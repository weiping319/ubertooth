
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008238  00004000  00004000  00004000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         0000093e  10000020  0000c238  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002928  10000960  0000cb76  00010960  2**3
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0001095e  2**0
                  CONTENTS, READONLY
  5 .comment      00000070  00000000  00000000  00010987  2**0
                  CONTENTS, READONLY
  6 .debug_frame  00001cf0  00000000  00000000  000109f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005048  00000000  00000000  000126e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001546  00000000  00000000  00017730  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006d8  00000000  00000000  00018c76  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005f8  00000000  00000000  0001934e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002744  00000000  00000000  00019946  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002234  00000000  00000000  0001c08a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 6d 96 00 00 d9 96 00 00 d9 96 00 00     .?..m...........
    4010:	d9 96 00 00 d9 96 00 00 d9 96 00 00 00 00 00 00     ................
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 d9 96 00 00     ................
    4030:	d9 96 00 00 00 00 00 00 d9 96 00 00 d9 96 00 00     ................
    4040:	d9 96 00 00 d9 52 00 00 d9 96 00 00 d9 96 00 00     .....R..........
    4050:	d9 96 00 00 d9 96 00 00 d9 96 00 00 d9 96 00 00     ................
    4060:	d9 96 00 00 d9 96 00 00 d9 96 00 00 d9 96 00 00     ................
    4070:	d9 96 00 00 d9 96 00 00 d9 96 00 00 d9 96 00 00     ................
    4080:	d9 96 00 00 d9 96 00 00 d9 96 00 00 d9 96 00 00     ................
    4090:	d9 96 00 00 f5 53 00 00 d9 96 00 00 d9 96 00 00     .....S..........
    40a0:	61 96 00 00 d9 96 00 00 c1 58 00 00 d9 96 00 00     a........X......
    40b0:	d9 96 00 00 d9 96 00 00 d9 96 00 00 d9 96 00 00     ................
    40c0:	d9 96 00 00 d9 96 00 00 d9 96 00 00                 ............

000040cc <__do_global_dtors_aux>:
    40cc:	b510      	push	{r4, lr}
    40ce:	4c05      	ldr	r4, [pc, #20]	; (40e4 <__do_global_dtors_aux+0x18>)
    40d0:	7823      	ldrb	r3, [r4, #0]
    40d2:	b933      	cbnz	r3, 40e2 <__do_global_dtors_aux+0x16>
    40d4:	4b04      	ldr	r3, [pc, #16]	; (40e8 <__do_global_dtors_aux+0x1c>)
    40d6:	b113      	cbz	r3, 40de <__do_global_dtors_aux+0x12>
    40d8:	4804      	ldr	r0, [pc, #16]	; (40ec <__do_global_dtors_aux+0x20>)
    40da:	f3af 8000 	nop.w
    40de:	2301      	movs	r3, #1
    40e0:	7023      	strb	r3, [r4, #0]
    40e2:	bd10      	pop	{r4, pc}
    40e4:	10000960 	.word	0x10000960
    40e8:	00000000 	.word	0x00000000
    40ec:	0000c214 	.word	0x0000c214

000040f0 <frame_dummy>:
    40f0:	4b08      	ldr	r3, [pc, #32]	; (4114 <frame_dummy+0x24>)
    40f2:	b510      	push	{r4, lr}
    40f4:	b11b      	cbz	r3, 40fe <frame_dummy+0xe>
    40f6:	4808      	ldr	r0, [pc, #32]	; (4118 <frame_dummy+0x28>)
    40f8:	4908      	ldr	r1, [pc, #32]	; (411c <frame_dummy+0x2c>)
    40fa:	f3af 8000 	nop.w
    40fe:	4808      	ldr	r0, [pc, #32]	; (4120 <frame_dummy+0x30>)
    4100:	6803      	ldr	r3, [r0, #0]
    4102:	b903      	cbnz	r3, 4106 <frame_dummy+0x16>
    4104:	bd10      	pop	{r4, pc}
    4106:	4b07      	ldr	r3, [pc, #28]	; (4124 <frame_dummy+0x34>)
    4108:	2b00      	cmp	r3, #0
    410a:	d0fb      	beq.n	4104 <frame_dummy+0x14>
    410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4110:	4718      	bx	r3
    4112:	bf00      	nop
    4114:	00000000 	.word	0x00000000
    4118:	0000c214 	.word	0x0000c214
    411c:	10000964 	.word	0x10000964
    4120:	10000960 	.word	0x10000960
    4124:	00000000 	.word	0x00000000

00004128 <__libc_init_array>:
    4128:	b570      	push	{r4, r5, r6, lr}
    412a:	4e0f      	ldr	r6, [pc, #60]	; (4168 <__libc_init_array+0x40>)
    412c:	4d0f      	ldr	r5, [pc, #60]	; (416c <__libc_init_array+0x44>)
    412e:	1b76      	subs	r6, r6, r5
    4130:	10b6      	asrs	r6, r6, #2
    4132:	bf18      	it	ne
    4134:	2400      	movne	r4, #0
    4136:	d005      	beq.n	4144 <__libc_init_array+0x1c>
    4138:	3401      	adds	r4, #1
    413a:	f855 3b04 	ldr.w	r3, [r5], #4
    413e:	4798      	blx	r3
    4140:	42a6      	cmp	r6, r4
    4142:	d1f9      	bne.n	4138 <__libc_init_array+0x10>
    4144:	4e0a      	ldr	r6, [pc, #40]	; (4170 <__libc_init_array+0x48>)
    4146:	4d0b      	ldr	r5, [pc, #44]	; (4174 <__libc_init_array+0x4c>)
    4148:	f008 f864 	bl	c214 <_init>
    414c:	1b76      	subs	r6, r6, r5
    414e:	10b6      	asrs	r6, r6, #2
    4150:	bf18      	it	ne
    4152:	2400      	movne	r4, #0
    4154:	d006      	beq.n	4164 <__libc_init_array+0x3c>
    4156:	3401      	adds	r4, #1
    4158:	f855 3b04 	ldr.w	r3, [r5], #4
    415c:	4798      	blx	r3
    415e:	42a6      	cmp	r6, r4
    4160:	d1f9      	bne.n	4156 <__libc_init_array+0x2e>
    4162:	bd70      	pop	{r4, r5, r6, pc}
    4164:	bd70      	pop	{r4, r5, r6, pc}
    4166:	bf00      	nop
    4168:	0000c220 	.word	0x0000c220
    416c:	0000c220 	.word	0x0000c220
    4170:	0000c228 	.word	0x0000c228
    4174:	0000c220 	.word	0x0000c220

00004178 <memset>:
    4178:	b470      	push	{r4, r5, r6}
    417a:	0784      	lsls	r4, r0, #30
    417c:	d046      	beq.n	420c <memset+0x94>
    417e:	1e54      	subs	r4, r2, #1
    4180:	2a00      	cmp	r2, #0
    4182:	d041      	beq.n	4208 <memset+0x90>
    4184:	b2cd      	uxtb	r5, r1
    4186:	4603      	mov	r3, r0
    4188:	e002      	b.n	4190 <memset+0x18>
    418a:	1e62      	subs	r2, r4, #1
    418c:	b3e4      	cbz	r4, 4208 <memset+0x90>
    418e:	4614      	mov	r4, r2
    4190:	f803 5b01 	strb.w	r5, [r3], #1
    4194:	079a      	lsls	r2, r3, #30
    4196:	d1f8      	bne.n	418a <memset+0x12>
    4198:	2c03      	cmp	r4, #3
    419a:	d92e      	bls.n	41fa <memset+0x82>
    419c:	b2cd      	uxtb	r5, r1
    419e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    41a2:	2c0f      	cmp	r4, #15
    41a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    41a8:	d919      	bls.n	41de <memset+0x66>
    41aa:	4626      	mov	r6, r4
    41ac:	f103 0210 	add.w	r2, r3, #16
    41b0:	3e10      	subs	r6, #16
    41b2:	2e0f      	cmp	r6, #15
    41b4:	f842 5c10 	str.w	r5, [r2, #-16]
    41b8:	f842 5c0c 	str.w	r5, [r2, #-12]
    41bc:	f842 5c08 	str.w	r5, [r2, #-8]
    41c0:	f842 5c04 	str.w	r5, [r2, #-4]
    41c4:	f102 0210 	add.w	r2, r2, #16
    41c8:	d8f2      	bhi.n	41b0 <memset+0x38>
    41ca:	f1a4 0210 	sub.w	r2, r4, #16
    41ce:	f022 020f 	bic.w	r2, r2, #15
    41d2:	f004 040f 	and.w	r4, r4, #15
    41d6:	3210      	adds	r2, #16
    41d8:	2c03      	cmp	r4, #3
    41da:	4413      	add	r3, r2
    41dc:	d90d      	bls.n	41fa <memset+0x82>
    41de:	461e      	mov	r6, r3
    41e0:	4622      	mov	r2, r4
    41e2:	3a04      	subs	r2, #4
    41e4:	2a03      	cmp	r2, #3
    41e6:	f846 5b04 	str.w	r5, [r6], #4
    41ea:	d8fa      	bhi.n	41e2 <memset+0x6a>
    41ec:	1f22      	subs	r2, r4, #4
    41ee:	f022 0203 	bic.w	r2, r2, #3
    41f2:	3204      	adds	r2, #4
    41f4:	4413      	add	r3, r2
    41f6:	f004 0403 	and.w	r4, r4, #3
    41fa:	b12c      	cbz	r4, 4208 <memset+0x90>
    41fc:	b2c9      	uxtb	r1, r1
    41fe:	441c      	add	r4, r3
    4200:	f803 1b01 	strb.w	r1, [r3], #1
    4204:	42a3      	cmp	r3, r4
    4206:	d1fb      	bne.n	4200 <memset+0x88>
    4208:	bc70      	pop	{r4, r5, r6}
    420a:	4770      	bx	lr
    420c:	4614      	mov	r4, r2
    420e:	4603      	mov	r3, r0
    4210:	e7c2      	b.n	4198 <memset+0x20>
    4212:	bf00      	nop

00004214 <register_fini>:
    4214:	4b02      	ldr	r3, [pc, #8]	; (4220 <register_fini+0xc>)
    4216:	b113      	cbz	r3, 421e <register_fini+0xa>
    4218:	4802      	ldr	r0, [pc, #8]	; (4224 <register_fini+0x10>)
    421a:	f000 b805 	b.w	4228 <atexit>
    421e:	4770      	bx	lr
    4220:	00000000 	.word	0x00000000
    4224:	00004235 	.word	0x00004235

00004228 <atexit>:
    4228:	4601      	mov	r1, r0
    422a:	2000      	movs	r0, #0
    422c:	4602      	mov	r2, r0
    422e:	4603      	mov	r3, r0
    4230:	f000 b816 	b.w	4260 <__register_exitproc>

00004234 <__libc_fini_array>:
    4234:	b538      	push	{r3, r4, r5, lr}
    4236:	4b08      	ldr	r3, [pc, #32]	; (4258 <__libc_fini_array+0x24>)
    4238:	4d08      	ldr	r5, [pc, #32]	; (425c <__libc_fini_array+0x28>)
    423a:	1aed      	subs	r5, r5, r3
    423c:	10ac      	asrs	r4, r5, #2
    423e:	bf18      	it	ne
    4240:	18ed      	addne	r5, r5, r3
    4242:	d005      	beq.n	4250 <__libc_fini_array+0x1c>
    4244:	3c01      	subs	r4, #1
    4246:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    424a:	4798      	blx	r3
    424c:	2c00      	cmp	r4, #0
    424e:	d1f9      	bne.n	4244 <__libc_fini_array+0x10>
    4250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4254:	f007 bfe8 	b.w	c228 <_fini>
    4258:	0000c234 	.word	0x0000c234
    425c:	0000c238 	.word	0x0000c238

00004260 <__register_exitproc>:
    4260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4264:	4c25      	ldr	r4, [pc, #148]	; (42fc <__register_exitproc+0x9c>)
    4266:	4606      	mov	r6, r0
    4268:	6825      	ldr	r5, [r4, #0]
    426a:	4688      	mov	r8, r1
    426c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    4270:	4692      	mov	sl, r2
    4272:	4699      	mov	r9, r3
    4274:	b3c4      	cbz	r4, 42e8 <__register_exitproc+0x88>
    4276:	6860      	ldr	r0, [r4, #4]
    4278:	281f      	cmp	r0, #31
    427a:	dc17      	bgt.n	42ac <__register_exitproc+0x4c>
    427c:	1c41      	adds	r1, r0, #1
    427e:	b176      	cbz	r6, 429e <__register_exitproc+0x3e>
    4280:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    4284:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    4288:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
    428c:	2201      	movs	r2, #1
    428e:	4082      	lsls	r2, r0
    4290:	4315      	orrs	r5, r2
    4292:	2e02      	cmp	r6, #2
    4294:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    4298:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
    429c:	d01e      	beq.n	42dc <__register_exitproc+0x7c>
    429e:	1c83      	adds	r3, r0, #2
    42a0:	6061      	str	r1, [r4, #4]
    42a2:	2000      	movs	r0, #0
    42a4:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
    42a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42ac:	4b14      	ldr	r3, [pc, #80]	; (4300 <__register_exitproc+0xa0>)
    42ae:	b303      	cbz	r3, 42f2 <__register_exitproc+0x92>
    42b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42b4:	f3af 8000 	nop.w
    42b8:	4604      	mov	r4, r0
    42ba:	b1d0      	cbz	r0, 42f2 <__register_exitproc+0x92>
    42bc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    42c0:	2700      	movs	r7, #0
    42c2:	e884 0088 	stmia.w	r4, {r3, r7}
    42c6:	4638      	mov	r0, r7
    42c8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42cc:	2101      	movs	r1, #1
    42ce:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    42d2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    42d6:	2e00      	cmp	r6, #0
    42d8:	d0e1      	beq.n	429e <__register_exitproc+0x3e>
    42da:	e7d1      	b.n	4280 <__register_exitproc+0x20>
    42dc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    42e0:	431a      	orrs	r2, r3
    42e2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    42e6:	e7da      	b.n	429e <__register_exitproc+0x3e>
    42e8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    42ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42f0:	e7c1      	b.n	4276 <__register_exitproc+0x16>
    42f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42fa:	bf00      	nop
    42fc:	0000b79c 	.word	0x0000b79c
    4300:	00000000 	.word	0x00000000

00004304 <rssi_reset>:
int32_t rssi_sum = 0;
int8_t rssi_avg;
int8_t freq_avg;

static void rssi_reset(void)
{
    4304:	b480      	push	{r7}
    4306:	af00      	add	r7, sp, #0
	rssi_count = 0;
    4308:	4b07      	ldr	r3, [pc, #28]	; (4328 <rssi_reset+0x24>)
    430a:	2200      	movs	r2, #0
    430c:	701a      	strb	r2, [r3, #0]
	rssi_sum = 0;
    430e:	4b07      	ldr	r3, [pc, #28]	; (432c <rssi_reset+0x28>)
    4310:	2200      	movs	r2, #0
    4312:	601a      	str	r2, [r3, #0]
	rssi_max = INT8_MIN;
    4314:	4b06      	ldr	r3, [pc, #24]	; (4330 <rssi_reset+0x2c>)
    4316:	2280      	movs	r2, #128	; 0x80
    4318:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    431a:	4b06      	ldr	r3, [pc, #24]	; (4334 <rssi_reset+0x30>)
    431c:	227f      	movs	r2, #127	; 0x7f
    431e:	701a      	strb	r2, [r3, #0]
}
    4320:	46bd      	mov	sp, r7
    4322:	f85d 7b04 	ldr.w	r7, [sp], #4
    4326:	4770      	bx	lr
    4328:	10000a49 	.word	0x10000a49
    432c:	10000a4c 	.word	0x10000a4c
    4330:	10000b04 	.word	0x10000b04
    4334:	10000bb8 	.word	0x10000bb8

00004338 <rssi_add>:

static void rssi_add(int8_t v)
{
    4338:	b480      	push	{r7}
    433a:	b083      	sub	sp, #12
    433c:	af00      	add	r7, sp, #0
    433e:	4603      	mov	r3, r0
    4340:	71fb      	strb	r3, [r7, #7]
	rssi_max = (v > rssi_max) ? v : rssi_max;
    4342:	4b14      	ldr	r3, [pc, #80]	; (4394 <rssi_add+0x5c>)
    4344:	781b      	ldrb	r3, [r3, #0]
    4346:	b25a      	sxtb	r2, r3
    4348:	f997 3007 	ldrsb.w	r3, [r7, #7]
    434c:	4293      	cmp	r3, r2
    434e:	bfb8      	it	lt
    4350:	4613      	movlt	r3, r2
    4352:	b2da      	uxtb	r2, r3
    4354:	4b0f      	ldr	r3, [pc, #60]	; (4394 <rssi_add+0x5c>)
    4356:	701a      	strb	r2, [r3, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    4358:	4b0f      	ldr	r3, [pc, #60]	; (4398 <rssi_add+0x60>)
    435a:	781b      	ldrb	r3, [r3, #0]
    435c:	b25a      	sxtb	r2, r3
    435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4362:	4293      	cmp	r3, r2
    4364:	bfa8      	it	ge
    4366:	4613      	movge	r3, r2
    4368:	b2da      	uxtb	r2, r3
    436a:	4b0b      	ldr	r3, [pc, #44]	; (4398 <rssi_add+0x60>)
    436c:	701a      	strb	r2, [r3, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4372:	021a      	lsls	r2, r3, #8
    4374:	4b09      	ldr	r3, [pc, #36]	; (439c <rssi_add+0x64>)
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	4413      	add	r3, r2
    437a:	4a08      	ldr	r2, [pc, #32]	; (439c <rssi_add+0x64>)
    437c:	6013      	str	r3, [r2, #0]
	rssi_count += 1;
    437e:	4b08      	ldr	r3, [pc, #32]	; (43a0 <rssi_add+0x68>)
    4380:	781b      	ldrb	r3, [r3, #0]
    4382:	3301      	adds	r3, #1
    4384:	b2da      	uxtb	r2, r3
    4386:	4b06      	ldr	r3, [pc, #24]	; (43a0 <rssi_add+0x68>)
    4388:	701a      	strb	r2, [r3, #0]
}
    438a:	370c      	adds	r7, #12
    438c:	46bd      	mov	sp, r7
    438e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4392:	4770      	bx	lr
    4394:	10000b04 	.word	0x10000b04
    4398:	10000bb8 	.word	0x10000bb8
    439c:	10000a4c 	.word	0x10000a4c
    43a0:	10000a49 	.word	0x10000a49

000043a4 <rssi_iir_update>:

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
static void rssi_iir_update(void)
{
    43a4:	b480      	push	{r7}
    43a6:	b085      	sub	sp, #20
    43a8:	af00      	add	r7, sp, #0
	int32_t avg;
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first
	 * slot of array if not sweeping. */
	if (hop_mode > 0)
    43aa:	4b1f      	ldr	r3, [pc, #124]	; (4428 <rssi_iir_update+0x84>)
    43ac:	781b      	ldrb	r3, [r3, #0]
    43ae:	2b00      	cmp	r3, #0
    43b0:	d006      	beq.n	43c0 <rssi_iir_update+0x1c>
		i = channel - 2402;
    43b2:	4b1e      	ldr	r3, [pc, #120]	; (442c <rssi_iir_update+0x88>)
    43b4:	881b      	ldrh	r3, [r3, #0]
    43b6:	b29b      	uxth	r3, r3
    43b8:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    43bc:	60fb      	str	r3, [r7, #12]
    43be:	e001      	b.n	43c4 <rssi_iir_update+0x20>
	else
		i = 0;
    43c0:	2300      	movs	r3, #0
    43c2:	60fb      	str	r3, [r7, #12]

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    43c4:	4b1a      	ldr	r3, [pc, #104]	; (4430 <rssi_iir_update+0x8c>)
    43c6:	781b      	ldrb	r3, [r3, #0]
    43c8:	2b00      	cmp	r3, #0
    43ca:	d008      	beq.n	43de <rssi_iir_update+0x3a>
		avg = (rssi_sum  + 128) / rssi_count;
    43cc:	4b19      	ldr	r3, [pc, #100]	; (4434 <rssi_iir_update+0x90>)
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	3380      	adds	r3, #128	; 0x80
    43d2:	4a17      	ldr	r2, [pc, #92]	; (4430 <rssi_iir_update+0x8c>)
    43d4:	7812      	ldrb	r2, [r2, #0]
    43d6:	fb93 f3f2 	sdiv	r3, r3, r2
    43da:	60bb      	str	r3, [r7, #8]
    43dc:	e001      	b.n	43e2 <rssi_iir_update+0x3e>
	else
		avg = 0; // really an error
    43de:	2300      	movs	r3, #0
    43e0:	60bb      	str	r3, [r7, #8]
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    43e2:	4a15      	ldr	r2, [pc, #84]	; (4438 <rssi_iir_update+0x94>)
    43e4:	68fb      	ldr	r3, [r7, #12]
    43e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    43ea:	b21a      	sxth	r2, r3
    43ec:	4613      	mov	r3, r2
    43ee:	019b      	lsls	r3, r3, #6
    43f0:	1a9b      	subs	r3, r3, r2
    43f2:	009b      	lsls	r3, r3, #2
    43f4:	4413      	add	r3, r2
    43f6:	607b      	str	r3, [r7, #4]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    43f8:	68ba      	ldr	r2, [r7, #8]
    43fa:	4613      	mov	r3, r2
    43fc:	005b      	lsls	r3, r3, #1
    43fe:	4413      	add	r3, r2
    4400:	687a      	ldr	r2, [r7, #4]
    4402:	4413      	add	r3, r2
    4404:	607b      	str	r3, [r7, #4]
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	3380      	adds	r3, #128	; 0x80
    440a:	2b00      	cmp	r3, #0
    440c:	da00      	bge.n	4410 <rssi_iir_update+0x6c>
    440e:	33ff      	adds	r3, #255	; 0xff
    4410:	121b      	asrs	r3, r3, #8
    4412:	b299      	uxth	r1, r3
    4414:	4a08      	ldr	r2, [pc, #32]	; (4438 <rssi_iir_update+0x94>)
    4416:	68fb      	ldr	r3, [r7, #12]
    4418:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
    441c:	3714      	adds	r7, #20
    441e:	46bd      	mov	sp, r7
    4420:	f85d 7b04 	ldr.w	r7, [sp], #4
    4424:	4770      	bx	lr
    4426:	bf00      	nop
    4428:	1000097c 	.word	0x1000097c
    442c:	1000049c 	.word	0x1000049c
    4430:	10000a49 	.word	0x10000a49
    4434:	10000a4c 	.word	0x10000a4c
    4438:	100009a0 	.word	0x100009a0

0000443c <cs_threshold_set>:
/* Set CC2400 carrier sense threshold and store value to
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, u8 samples)
{
    443c:	b580      	push	{r7, lr}
    443e:	b082      	sub	sp, #8
    4440:	af00      	add	r7, sp, #0
    4442:	4603      	mov	r3, r0
    4444:	460a      	mov	r2, r1
    4446:	71fb      	strb	r3, [r7, #7]
    4448:	4613      	mov	r3, r2
    444a:	71bb      	strb	r3, [r7, #6]
	level = MIN(MAX(level,-120),(-20));
    444c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4450:	f113 0f14 	cmn.w	r3, #20
    4454:	d00d      	beq.n	4472 <cs_threshold_set+0x36>
    4456:	f997 3007 	ldrsb.w	r3, [r7, #7]
    445a:	f113 0f13 	cmn.w	r3, #19
    445e:	da08      	bge.n	4472 <cs_threshold_set+0x36>
    4460:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4464:	f06f 0277 	mvn.w	r2, #119	; 0x77
    4468:	4293      	cmp	r3, r2
    446a:	bfb8      	it	lt
    446c:	4613      	movlt	r3, r2
    446e:	b2db      	uxtb	r3, r3
    4470:	e000      	b.n	4474 <cs_threshold_set+0x38>
    4472:	23ec      	movs	r3, #236	; 0xec
    4474:	71fb      	strb	r3, [r7, #7]
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | (samples&3));
    4476:	79fb      	ldrb	r3, [r7, #7]
    4478:	3338      	adds	r3, #56	; 0x38
    447a:	b2db      	uxtb	r3, r3
    447c:	b29b      	uxth	r3, r3
    447e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    4482:	b29a      	uxth	r2, r3
    4484:	79bb      	ldrb	r3, [r7, #6]
    4486:	b29b      	uxth	r3, r3
    4488:	f003 0303 	and.w	r3, r3, #3
    448c:	b29b      	uxth	r3, r3
    448e:	4313      	orrs	r3, r2
    4490:	b29b      	uxth	r3, r3
    4492:	b29b      	uxth	r3, r3
    4494:	2006      	movs	r0, #6
    4496:	4619      	mov	r1, r3
    4498:	f005 fb06 	bl	9aa8 <cc2400_set>
	cs_threshold_cur = level;
    449c:	4a08      	ldr	r2, [pc, #32]	; (44c0 <cs_threshold_set+0x84>)
    449e:	79fb      	ldrb	r3, [r7, #7]
    44a0:	7013      	strb	r3, [r2, #0]
	cs_no_squelch = (level <= -120);
    44a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    44a6:	f113 0f77 	cmn.w	r3, #119	; 0x77
    44aa:	bfb4      	ite	lt
    44ac:	2301      	movlt	r3, #1
    44ae:	2300      	movge	r3, #0
    44b0:	b2db      	uxtb	r3, r3
    44b2:	461a      	mov	r2, r3
    44b4:	4b03      	ldr	r3, [pc, #12]	; (44c4 <cs_threshold_set+0x88>)
    44b6:	701a      	strb	r2, [r3, #0]
}
    44b8:	3708      	adds	r7, #8
    44ba:	46bd      	mov	sp, r7
    44bc:	bd80      	pop	{r7, pc}
    44be:	bf00      	nop
    44c0:	1000044d 	.word	0x1000044d
    44c4:	1000097e 	.word	0x1000097e

000044c8 <enqueue>:

static int enqueue(u8 type, u8 *buf)
{
    44c8:	b580      	push	{r7, lr}
    44ca:	b088      	sub	sp, #32
    44cc:	af00      	add	r7, sp, #0
    44ce:	4603      	mov	r3, r0
    44d0:	6039      	str	r1, [r7, #0]
    44d2:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    44d4:	f004 f880 	bl	85d8 <usb_enqueue>
    44d8:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    44da:	69fb      	ldr	r3, [r7, #28]
    44dc:	2b00      	cmp	r3, #0
    44de:	d109      	bne.n	44f4 <enqueue+0x2c>
		status |= FIFO_OVERFLOW;
    44e0:	4b47      	ldr	r3, [pc, #284]	; (4600 <enqueue+0x138>)
    44e2:	781b      	ldrb	r3, [r3, #0]
    44e4:	b2db      	uxtb	r3, r3
    44e6:	f043 0304 	orr.w	r3, r3, #4
    44ea:	b2da      	uxtb	r2, r3
    44ec:	4b44      	ldr	r3, [pc, #272]	; (4600 <enqueue+0x138>)
    44ee:	701a      	strb	r2, [r3, #0]
		return 0;
    44f0:	2300      	movs	r3, #0
    44f2:	e080      	b.n	45f6 <enqueue+0x12e>
	}

	f->pkt_type = type;
    44f4:	69fb      	ldr	r3, [r7, #28]
    44f6:	79fa      	ldrb	r2, [r7, #7]
    44f8:	701a      	strb	r2, [r3, #0]
	if(type == SPECAN) {
    44fa:	79fb      	ldrb	r3, [r7, #7]
    44fc:	2b04      	cmp	r3, #4
    44fe:	d113      	bne.n	4528 <enqueue+0x60>
		f->clkn_high = (clkn >> 20) & 0xff;
    4500:	4b40      	ldr	r3, [pc, #256]	; (4604 <enqueue+0x13c>)
    4502:	681b      	ldr	r3, [r3, #0]
    4504:	0d1b      	lsrs	r3, r3, #20
    4506:	b2da      	uxtb	r2, r3
    4508:	69fb      	ldr	r3, [r7, #28]
    450a:	70da      	strb	r2, [r3, #3]
		f->clk100ns = CLK100NS;
    450c:	4b3d      	ldr	r3, [pc, #244]	; (4604 <enqueue+0x13c>)
    450e:	681b      	ldr	r3, [r3, #0]
    4510:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4514:	f640 4235 	movw	r2, #3125	; 0xc35
    4518:	fb02 f203 	mul.w	r2, r2, r3
    451c:	4b3a      	ldr	r3, [pc, #232]	; (4608 <enqueue+0x140>)
    451e:	681b      	ldr	r3, [r3, #0]
    4520:	441a      	add	r2, r3
    4522:	69fb      	ldr	r3, [r7, #28]
    4524:	605a      	str	r2, [r3, #4]
    4526:	e008      	b.n	453a <enqueue+0x72>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    4528:	4b38      	ldr	r3, [pc, #224]	; (460c <enqueue+0x144>)
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	b2da      	uxtb	r2, r3
    452e:	69fb      	ldr	r3, [r7, #28]
    4530:	70da      	strb	r2, [r3, #3]
		f->clk100ns = idle_buf_clk100ns;
    4532:	4b37      	ldr	r3, [pc, #220]	; (4610 <enqueue+0x148>)
    4534:	681a      	ldr	r2, [r3, #0]
    4536:	69fb      	ldr	r3, [r7, #28]
    4538:	605a      	str	r2, [r3, #4]
	}
	f->channel = idle_buf_channel - 2402;
    453a:	4b36      	ldr	r3, [pc, #216]	; (4614 <enqueue+0x14c>)
    453c:	881b      	ldrh	r3, [r3, #0]
    453e:	b29b      	uxth	r3, r3
    4540:	b2db      	uxtb	r3, r3
    4542:	3b62      	subs	r3, #98	; 0x62
    4544:	b2da      	uxtb	r2, r3
    4546:	69fb      	ldr	r3, [r7, #28]
    4548:	709a      	strb	r2, [r3, #2]
	else
		//f->rssi_avg = (int8_t)((rssi_iir[0] + 128)/256);
		f->rssi_avg = rssi_sum/rssi_count;
	f->rssi_count = rssi_count;
*/
	USRLED_SET;
    454a:	4b33      	ldr	r3, [pc, #204]	; (4618 <enqueue+0x150>)
    454c:	2202      	movs	r2, #2
    454e:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    4550:	69fb      	ldr	r3, [r7, #28]
    4552:	330e      	adds	r3, #14
    4554:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    4556:	683b      	ldr	r3, [r7, #0]
    4558:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    455a:	697b      	ldr	r3, [r7, #20]
    455c:	681a      	ldr	r2, [r3, #0]
    455e:	69bb      	ldr	r3, [r7, #24]
    4560:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    4562:	69bb      	ldr	r3, [r7, #24]
    4564:	3304      	adds	r3, #4
    4566:	697a      	ldr	r2, [r7, #20]
    4568:	6852      	ldr	r2, [r2, #4]
    456a:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    456c:	69bb      	ldr	r3, [r7, #24]
    456e:	3308      	adds	r3, #8
    4570:	697a      	ldr	r2, [r7, #20]
    4572:	6892      	ldr	r2, [r2, #8]
    4574:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    4576:	69bb      	ldr	r3, [r7, #24]
    4578:	330c      	adds	r3, #12
    457a:	697a      	ldr	r2, [r7, #20]
    457c:	68d2      	ldr	r2, [r2, #12]
    457e:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    4580:	69bb      	ldr	r3, [r7, #24]
    4582:	3310      	adds	r3, #16
    4584:	697a      	ldr	r2, [r7, #20]
    4586:	6912      	ldr	r2, [r2, #16]
    4588:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    458a:	69bb      	ldr	r3, [r7, #24]
    458c:	3314      	adds	r3, #20
    458e:	697a      	ldr	r2, [r7, #20]
    4590:	6952      	ldr	r2, [r2, #20]
    4592:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    4594:	69bb      	ldr	r3, [r7, #24]
    4596:	3318      	adds	r3, #24
    4598:	697a      	ldr	r2, [r7, #20]
    459a:	6992      	ldr	r2, [r2, #24]
    459c:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    459e:	69bb      	ldr	r3, [r7, #24]
    45a0:	331c      	adds	r3, #28
    45a2:	697a      	ldr	r2, [r7, #20]
    45a4:	69d2      	ldr	r2, [r2, #28]
    45a6:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    45a8:	69bb      	ldr	r3, [r7, #24]
    45aa:	3320      	adds	r3, #32
    45ac:	697a      	ldr	r2, [r7, #20]
    45ae:	6a12      	ldr	r2, [r2, #32]
    45b0:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    45b2:	69bb      	ldr	r3, [r7, #24]
    45b4:	3324      	adds	r3, #36	; 0x24
    45b6:	697a      	ldr	r2, [r7, #20]
    45b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
    45ba:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    45bc:	69bb      	ldr	r3, [r7, #24]
    45be:	3328      	adds	r3, #40	; 0x28
    45c0:	697a      	ldr	r2, [r7, #20]
    45c2:	6a92      	ldr	r2, [r2, #40]	; 0x28
    45c4:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    45c6:	69bb      	ldr	r3, [r7, #24]
    45c8:	332c      	adds	r3, #44	; 0x2c
    45ca:	697a      	ldr	r2, [r7, #20]
    45cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    45ce:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    45d0:	69fb      	ldr	r3, [r7, #28]
    45d2:	330e      	adds	r3, #14
    45d4:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    45d6:	683b      	ldr	r3, [r7, #0]
    45d8:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    45da:	693b      	ldr	r3, [r7, #16]
    45dc:	3330      	adds	r3, #48	; 0x30
    45de:	68fa      	ldr	r2, [r7, #12]
    45e0:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    45e2:	801a      	strh	r2, [r3, #0]

	f->status = status;
    45e4:	4b06      	ldr	r3, [pc, #24]	; (4600 <enqueue+0x138>)
    45e6:	781b      	ldrb	r3, [r3, #0]
    45e8:	b2da      	uxtb	r2, r3
    45ea:	69fb      	ldr	r3, [r7, #28]
    45ec:	705a      	strb	r2, [r3, #1]
	status = 0;
    45ee:	4b04      	ldr	r3, [pc, #16]	; (4600 <enqueue+0x138>)
    45f0:	2200      	movs	r2, #0
    45f2:	701a      	strb	r2, [r3, #0]

	return 1;
    45f4:	2301      	movs	r3, #1
}
    45f6:	4618      	mov	r0, r3
    45f8:	3720      	adds	r7, #32
    45fa:	46bd      	mov	sp, r7
    45fc:	bd80      	pop	{r7, pc}
    45fe:	bf00      	nop
    4600:	10000a48 	.word	0x10000a48
    4604:	10000be4 	.word	0x10000be4
    4608:	40004008 	.word	0x40004008
    460c:	10001030 	.word	0x10001030
    4610:	10000bc8 	.word	0x10000bc8
    4614:	10000988 	.word	0x10000988
    4618:	2009c038 	.word	0x2009c038

0000461c <enqueue_with_ts>:

int enqueue_with_ts(u8 type, u8 *buf, u32 ts)
{
    461c:	b580      	push	{r7, lr}
    461e:	b086      	sub	sp, #24
    4620:	af00      	add	r7, sp, #0
    4622:	4603      	mov	r3, r0
    4624:	60b9      	str	r1, [r7, #8]
    4626:	607a      	str	r2, [r7, #4]
    4628:	73fb      	strb	r3, [r7, #15]
	usb_pkt_rx *f = usb_enqueue();
    462a:	f003 ffd5 	bl	85d8 <usb_enqueue>
    462e:	6178      	str	r0, [r7, #20]

	/* fail if queue is full */
	if (f == NULL) {
    4630:	697b      	ldr	r3, [r7, #20]
    4632:	2b00      	cmp	r3, #0
    4634:	d109      	bne.n	464a <enqueue_with_ts+0x2e>
		status |= FIFO_OVERFLOW;
    4636:	4b19      	ldr	r3, [pc, #100]	; (469c <enqueue_with_ts+0x80>)
    4638:	781b      	ldrb	r3, [r3, #0]
    463a:	b2db      	uxtb	r3, r3
    463c:	f043 0304 	orr.w	r3, r3, #4
    4640:	b2da      	uxtb	r2, r3
    4642:	4b16      	ldr	r3, [pc, #88]	; (469c <enqueue_with_ts+0x80>)
    4644:	701a      	strb	r2, [r3, #0]
		return 0;
    4646:	2300      	movs	r3, #0
    4648:	e023      	b.n	4692 <enqueue_with_ts+0x76>
	}

	f->pkt_type = type;
    464a:	697b      	ldr	r3, [r7, #20]
    464c:	7bfa      	ldrb	r2, [r7, #15]
    464e:	701a      	strb	r2, [r3, #0]
//	f->clkn_high = 0;
	f->clk100ns = ts;
    4650:	697b      	ldr	r3, [r7, #20]
    4652:	687a      	ldr	r2, [r7, #4]
    4654:	605a      	str	r2, [r3, #4]

	f->channel = channel - 2402;
    4656:	4b12      	ldr	r3, [pc, #72]	; (46a0 <enqueue_with_ts+0x84>)
    4658:	881b      	ldrh	r3, [r3, #0]
    465a:	b29b      	uxth	r3, r3
    465c:	b2db      	uxtb	r3, r3
    465e:	3b62      	subs	r3, #98	; 0x62
    4660:	b2da      	uxtb	r2, r3
    4662:	697b      	ldr	r3, [r7, #20]
    4664:	709a      	strb	r2, [r3, #2]
	f->rssi_avg = rssi_avg;
    4666:	4b0f      	ldr	r3, [pc, #60]	; (46a4 <enqueue_with_ts+0x88>)
    4668:	781b      	ldrb	r3, [r3, #0]
    466a:	b2da      	uxtb	r2, r3
    466c:	697b      	ldr	r3, [r7, #20]
    466e:	729a      	strb	r2, [r3, #10]
	f->rssi_count = freq_avg;
    4670:	4b0d      	ldr	r3, [pc, #52]	; (46a8 <enqueue_with_ts+0x8c>)
    4672:	781b      	ldrb	r3, [r3, #0]
    4674:	b2da      	uxtb	r2, r3
    4676:	697b      	ldr	r3, [r7, #20]
    4678:	72da      	strb	r2, [r3, #11]

	USRLED_SET;
    467a:	4b0c      	ldr	r3, [pc, #48]	; (46ac <enqueue_with_ts+0x90>)
    467c:	2202      	movs	r2, #2
    467e:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
	u16 *p3 = (u16 *)f->data;
	u16 *p4 = (u16 *)buf;
	p3[24] = p4[24];
*/
	f->status = status;
    4680:	4b06      	ldr	r3, [pc, #24]	; (469c <enqueue_with_ts+0x80>)
    4682:	781b      	ldrb	r3, [r3, #0]
    4684:	b2da      	uxtb	r2, r3
    4686:	697b      	ldr	r3, [r7, #20]
    4688:	705a      	strb	r2, [r3, #1]
	status = 0;
    468a:	4b04      	ldr	r3, [pc, #16]	; (469c <enqueue_with_ts+0x80>)
    468c:	2200      	movs	r2, #0
    468e:	701a      	strb	r2, [r3, #0]

	return 1;
    4690:	2301      	movs	r3, #1
}
    4692:	4618      	mov	r0, r3
    4694:	3718      	adds	r7, #24
    4696:	46bd      	mov	sp, r7
    4698:	bd80      	pop	{r7, pc}
    469a:	bf00      	nop
    469c:	10000a48 	.word	0x10000a48
    46a0:	1000049c 	.word	0x1000049c
    46a4:	1000102d 	.word	0x1000102d
    46a8:	10000be8 	.word	0x10000be8
    46ac:	2009c038 	.word	0x2009c038

000046b0 <cs_threshold_calc_and_set>:

static void cs_threshold_calc_and_set(void)
{
    46b0:	b580      	push	{r7, lr}
    46b2:	b082      	sub	sp, #8
    46b4:	af00      	add	r7, sp, #0

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    46b6:	4b17      	ldr	r3, [pc, #92]	; (4714 <cs_threshold_calc_and_set+0x64>)
    46b8:	781b      	ldrb	r3, [r3, #0]
    46ba:	2b00      	cmp	r3, #0
    46bc:	d01d      	beq.n	46fa <cs_threshold_calc_and_set+0x4a>
    46be:	4b16      	ldr	r3, [pc, #88]	; (4718 <cs_threshold_calc_and_set+0x68>)
    46c0:	781b      	ldrb	r3, [r3, #0]
    46c2:	b25b      	sxtb	r3, r3
    46c4:	2b00      	cmp	r3, #0
    46c6:	dd18      	ble.n	46fa <cs_threshold_calc_and_set+0x4a>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
    46c8:	4b14      	ldr	r3, [pc, #80]	; (471c <cs_threshold_calc_and_set+0x6c>)
    46ca:	881b      	ldrh	r3, [r3, #0]
    46cc:	b29b      	uxth	r3, r3
    46ce:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    46d2:	4a13      	ldr	r2, [pc, #76]	; (4720 <cs_threshold_calc_and_set+0x70>)
    46d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    46d8:	b21b      	sxth	r3, r3
    46da:	3380      	adds	r3, #128	; 0x80
    46dc:	2b00      	cmp	r3, #0
    46de:	da00      	bge.n	46e2 <cs_threshold_calc_and_set+0x32>
    46e0:	33ff      	adds	r3, #255	; 0xff
    46e2:	121b      	asrs	r3, r3, #8
    46e4:	71bb      	strb	r3, [r7, #6]
		level = rssi - 54 + cs_threshold_req;
    46e6:	79ba      	ldrb	r2, [r7, #6]
    46e8:	4b0b      	ldr	r3, [pc, #44]	; (4718 <cs_threshold_calc_and_set+0x68>)
    46ea:	781b      	ldrb	r3, [r3, #0]
    46ec:	b2db      	uxtb	r3, r3
    46ee:	4413      	add	r3, r2
    46f0:	b2db      	uxtb	r3, r3
    46f2:	3b36      	subs	r3, #54	; 0x36
    46f4:	b2db      	uxtb	r3, r3
    46f6:	71fb      	strb	r3, [r7, #7]

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    46f8:	e002      	b.n	4700 <cs_threshold_calc_and_set+0x50>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
		level = rssi - 54 + cs_threshold_req;
	}
	else {
		level = cs_threshold_req;
    46fa:	4b07      	ldr	r3, [pc, #28]	; (4718 <cs_threshold_calc_and_set+0x68>)
    46fc:	781b      	ldrb	r3, [r3, #0]
    46fe:	71fb      	strb	r3, [r7, #7]
	}
	cs_threshold_set(level, CS_SAMPLES_4);
    4700:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4704:	4618      	mov	r0, r3
    4706:	2103      	movs	r1, #3
    4708:	f7ff fe98 	bl	443c <cs_threshold_set>
}
    470c:	3708      	adds	r7, #8
    470e:	46bd      	mov	sp, r7
    4710:	bd80      	pop	{r7, pc}
    4712:	bf00      	nop
    4714:	1000097c 	.word	0x1000097c
    4718:	1000044c 	.word	0x1000044c
    471c:	1000049c 	.word	0x1000049c
    4720:	100009a0 	.word	0x100009a0

00004724 <cs_trigger_enable>:
/* CS comes from CC2400 GIO6, which is LPC P2.2, active low. GPIO
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
static void cs_trigger_enable(void)
{
    4724:	b480      	push	{r7}
    4726:	af00      	add	r7, sp, #0
	cs_trigger = 0;
    4728:	4b09      	ldr	r3, [pc, #36]	; (4750 <cs_trigger_enable+0x2c>)
    472a:	2200      	movs	r2, #0
    472c:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    472e:	4b09      	ldr	r3, [pc, #36]	; (4754 <cs_trigger_enable+0x30>)
    4730:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4734:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4736:	4b08      	ldr	r3, [pc, #32]	; (4758 <cs_trigger_enable+0x34>)
    4738:	2204      	movs	r2, #4
    473a:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    473c:	4a07      	ldr	r2, [pc, #28]	; (475c <cs_trigger_enable+0x38>)
    473e:	4b07      	ldr	r3, [pc, #28]	; (475c <cs_trigger_enable+0x38>)
    4740:	681b      	ldr	r3, [r3, #0]
    4742:	f043 0304 	orr.w	r3, r3, #4
    4746:	6013      	str	r3, [r2, #0]
}
    4748:	46bd      	mov	sp, r7
    474a:	f85d 7b04 	ldr.w	r7, [sp], #4
    474e:	4770      	bx	lr
    4750:	100010c0 	.word	0x100010c0
    4754:	e000e100 	.word	0xe000e100
    4758:	400280ac 	.word	0x400280ac
    475c:	400280b4 	.word	0x400280b4

00004760 <cs_trigger_disable>:

static void cs_trigger_disable(void)
{
    4760:	b480      	push	{r7}
    4762:	af00      	add	r7, sp, #0
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    4764:	4a09      	ldr	r2, [pc, #36]	; (478c <cs_trigger_disable+0x2c>)
    4766:	4b09      	ldr	r3, [pc, #36]	; (478c <cs_trigger_disable+0x2c>)
    4768:	681b      	ldr	r3, [r3, #0]
    476a:	f023 0304 	bic.w	r3, r3, #4
    476e:	6013      	str	r3, [r2, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4770:	4b07      	ldr	r3, [pc, #28]	; (4790 <cs_trigger_disable+0x30>)
    4772:	2204      	movs	r2, #4
    4774:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_EINT3;
    4776:	4b07      	ldr	r3, [pc, #28]	; (4794 <cs_trigger_disable+0x34>)
    4778:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    477c:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    477e:	4b06      	ldr	r3, [pc, #24]	; (4798 <cs_trigger_disable+0x38>)
    4780:	2200      	movs	r2, #0
    4782:	701a      	strb	r2, [r3, #0]
}
    4784:	46bd      	mov	sp, r7
    4786:	f85d 7b04 	ldr.w	r7, [sp], #4
    478a:	4770      	bx	lr
    478c:	400280b4 	.word	0x400280b4
    4790:	400280ac 	.word	0x400280ac
    4794:	e000e180 	.word	0xe000e180
    4798:	100010c0 	.word	0x100010c0

0000479c <vendor_request_handler>:

static int vendor_request_handler(u8 request, u16 *request_params, u8 *data, int *data_len)
{
    479c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47a0:	b095      	sub	sp, #84	; 0x54
    47a2:	af00      	add	r7, sp, #0
    47a4:	60b9      	str	r1, [r7, #8]
    47a6:	607a      	str	r2, [r7, #4]
    47a8:	603b      	str	r3, [r7, #0]
    47aa:	4603      	mov	r3, r0
    47ac:	73fb      	strb	r3, [r7, #15]
	u64 ac_copy;
	int i; // loop counter
	u32 clock;
	int clock_offset;
	u8 length; // string length
	usb_pkt_rx *p = NULL;
    47ae:	2300      	movs	r3, #0
    47b0:	647b      	str	r3, [r7, #68]	; 0x44
	u16 reg_val;

	switch (request) {
    47b2:	7bfb      	ldrb	r3, [r7, #15]
    47b4:	2b3c      	cmp	r3, #60	; 0x3c
    47b6:	f200 8551 	bhi.w	525c <vendor_request_handler+0xac0>
    47ba:	a201      	add	r2, pc, #4	; (adr r2, 47c0 <vendor_request_handler+0x24>)
    47bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    47c0:	000048b5 	.word	0x000048b5
    47c4:	000048bf 	.word	0x000048bf
    47c8:	0000525d 	.word	0x0000525d
    47cc:	000048cf 	.word	0x000048cf
    47d0:	000048f1 	.word	0x000048f1
    47d4:	0000490d 	.word	0x0000490d
    47d8:	0000492f 	.word	0x0000492f
    47dc:	0000494b 	.word	0x0000494b
    47e0:	0000496d 	.word	0x0000496d
    47e4:	0000498d 	.word	0x0000498d
    47e8:	000049af 	.word	0x000049af
    47ec:	00004c53 	.word	0x00004c53
    47f0:	00004c79 	.word	0x00004c79
    47f4:	00004a25 	.word	0x00004a25
    47f8:	00004a2f 	.word	0x00004a2f
    47fc:	000049cf 	.word	0x000049cf
    4800:	00004b0d 	.word	0x00004b0d
    4804:	00004b2d 	.word	0x00004b2d
    4808:	00004b65 	.word	0x00004b65
    480c:	00004b85 	.word	0x00004b85
    4810:	00004ba1 	.word	0x00004ba1
    4814:	00004c2d 	.word	0x00004c2d
    4818:	00004c35 	.word	0x00004c35
    481c:	00004c47 	.word	0x00004c47
    4820:	00004d03 	.word	0x00004d03
    4824:	00004d21 	.word	0x00004d21
    4828:	0000525d 	.word	0x0000525d
    482c:	00004d2d 	.word	0x00004d2d
    4830:	00004ba9 	.word	0x00004ba9
    4834:	00004bc5 	.word	0x00004bc5
    4838:	00004bed 	.word	0x00004bed
    483c:	00004be5 	.word	0x00004be5
    4840:	00004bf5 	.word	0x00004bf5
    4844:	00004df1 	.word	0x00004df1
    4848:	00004d89 	.word	0x00004d89
    484c:	00004e65 	.word	0x00004e65
    4850:	00004e73 	.word	0x00004e73
    4854:	00004e83 	.word	0x00004e83
    4858:	00004e95 	.word	0x00004e95
    485c:	00004f61 	.word	0x00004f61
    4860:	00004fa7 	.word	0x00004fa7
    4864:	00005035 	.word	0x00005035
    4868:	00005069 	.word	0x00005069
    486c:	0000508b 	.word	0x0000508b
    4870:	000050e3 	.word	0x000050e3
    4874:	00005261 	.word	0x00005261
    4878:	00005115 	.word	0x00005115
    487c:	0000512b 	.word	0x0000512b
    4880:	00005147 	.word	0x00005147
    4884:	0000515d 	.word	0x0000515d
    4888:	00005189 	.word	0x00005189
    488c:	00004fd9 	.word	0x00004fd9
    4890:	0000500b 	.word	0x0000500b
    4894:	000051a5 	.word	0x000051a5
    4898:	000051e9 	.word	0x000051e9
    489c:	00004e33 	.word	0x00004e33
    48a0:	000051fb 	.word	0x000051fb
    48a4:	0000525d 	.word	0x0000525d
    48a8:	000051d3 	.word	0x000051d3
    48ac:	0000523f 	.word	0x0000523f
    48b0:	0000524b 	.word	0x0000524b

	case UBERTOOTH_PING:
		*data_len = 0;
    48b4:	683b      	ldr	r3, [r7, #0]
    48b6:	2200      	movs	r2, #0
    48b8:	601a      	str	r2, [r3, #0]
		break;
    48ba:	f000 bcd2 	b.w	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    48be:	4ba1      	ldr	r3, [pc, #644]	; (4b44 <vendor_request_handler+0x3a8>)
    48c0:	2201      	movs	r2, #1
    48c2:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    48c4:	683b      	ldr	r3, [r7, #0]
    48c6:	2200      	movs	r2, #0
    48c8:	601a      	str	r2, [r3, #0]
		break;
    48ca:	f000 bcca 	b.w	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    48ce:	4b9e      	ldr	r3, [pc, #632]	; (4b48 <vendor_request_handler+0x3ac>)
    48d0:	681b      	ldr	r3, [r3, #0]
    48d2:	f003 0302 	and.w	r3, r3, #2
    48d6:	2b00      	cmp	r3, #0
    48d8:	bf14      	ite	ne
    48da:	2301      	movne	r3, #1
    48dc:	2300      	moveq	r3, #0
    48de:	b2db      	uxtb	r3, r3
    48e0:	461a      	mov	r2, r3
    48e2:	687b      	ldr	r3, [r7, #4]
    48e4:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    48e6:	683b      	ldr	r3, [r7, #0]
    48e8:	2201      	movs	r2, #1
    48ea:	601a      	str	r2, [r3, #0]
		break;
    48ec:	f000 bcb9 	b.w	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    48f0:	68bb      	ldr	r3, [r7, #8]
    48f2:	881b      	ldrh	r3, [r3, #0]
    48f4:	2b00      	cmp	r3, #0
    48f6:	d004      	beq.n	4902 <vendor_request_handler+0x166>
			USRLED_SET;
    48f8:	4b94      	ldr	r3, [pc, #592]	; (4b4c <vendor_request_handler+0x3b0>)
    48fa:	2202      	movs	r2, #2
    48fc:	601a      	str	r2, [r3, #0]
		else
			USRLED_CLR;
		break;
    48fe:	f000 bcb0 	b.w	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
			USRLED_SET;
		else
			USRLED_CLR;
    4902:	4b93      	ldr	r3, [pc, #588]	; (4b50 <vendor_request_handler+0x3b4>)
    4904:	2202      	movs	r2, #2
    4906:	601a      	str	r2, [r3, #0]
		break;
    4908:	f000 bcab 	b.w	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    490c:	4b8e      	ldr	r3, [pc, #568]	; (4b48 <vendor_request_handler+0x3ac>)
    490e:	681b      	ldr	r3, [r3, #0]
    4910:	f003 0310 	and.w	r3, r3, #16
    4914:	2b00      	cmp	r3, #0
    4916:	bf14      	ite	ne
    4918:	2301      	movne	r3, #1
    491a:	2300      	moveq	r3, #0
    491c:	b2db      	uxtb	r3, r3
    491e:	461a      	mov	r2, r3
    4920:	687b      	ldr	r3, [r7, #4]
    4922:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4924:	683b      	ldr	r3, [r7, #0]
    4926:	2201      	movs	r2, #1
    4928:	601a      	str	r2, [r3, #0]
		break;
    492a:	f000 bc9a 	b.w	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    492e:	68bb      	ldr	r3, [r7, #8]
    4930:	881b      	ldrh	r3, [r3, #0]
    4932:	2b00      	cmp	r3, #0
    4934:	d004      	beq.n	4940 <vendor_request_handler+0x1a4>
			RXLED_SET;
    4936:	4b85      	ldr	r3, [pc, #532]	; (4b4c <vendor_request_handler+0x3b0>)
    4938:	2210      	movs	r2, #16
    493a:	601a      	str	r2, [r3, #0]
		else
			RXLED_CLR;
		break;
    493c:	f000 bc91 	b.w	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
			RXLED_SET;
		else
			RXLED_CLR;
    4940:	4b83      	ldr	r3, [pc, #524]	; (4b50 <vendor_request_handler+0x3b4>)
    4942:	2210      	movs	r2, #16
    4944:	601a      	str	r2, [r3, #0]
		break;
    4946:	f000 bc8c 	b.w	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    494a:	4b7f      	ldr	r3, [pc, #508]	; (4b48 <vendor_request_handler+0x3ac>)
    494c:	681b      	ldr	r3, [r3, #0]
    494e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4952:	2b00      	cmp	r3, #0
    4954:	bf14      	ite	ne
    4956:	2301      	movne	r3, #1
    4958:	2300      	moveq	r3, #0
    495a:	b2db      	uxtb	r3, r3
    495c:	461a      	mov	r2, r3
    495e:	687b      	ldr	r3, [r7, #4]
    4960:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4962:	683b      	ldr	r3, [r7, #0]
    4964:	2201      	movs	r2, #1
    4966:	601a      	str	r2, [r3, #0]
		break;
    4968:	f000 bc7b 	b.w	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    496c:	68bb      	ldr	r3, [r7, #8]
    496e:	881b      	ldrh	r3, [r3, #0]
    4970:	2b00      	cmp	r3, #0
    4972:	d005      	beq.n	4980 <vendor_request_handler+0x1e4>
			TXLED_SET;
    4974:	4b75      	ldr	r3, [pc, #468]	; (4b4c <vendor_request_handler+0x3b0>)
    4976:	f44f 7280 	mov.w	r2, #256	; 0x100
    497a:	601a      	str	r2, [r3, #0]
		else
			TXLED_CLR;
		break;
    497c:	f000 bc71 	b.w	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
			TXLED_SET;
		else
			TXLED_CLR;
    4980:	4b73      	ldr	r3, [pc, #460]	; (4b50 <vendor_request_handler+0x3b4>)
    4982:	f44f 7280 	mov.w	r2, #256	; 0x100
    4986:	601a      	str	r2, [r3, #0]
		break;
    4988:	f000 bc6b 	b.w	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    498c:	4b6e      	ldr	r3, [pc, #440]	; (4b48 <vendor_request_handler+0x3ac>)
    498e:	681b      	ldr	r3, [r3, #0]
    4990:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4994:	2b00      	cmp	r3, #0
    4996:	bf14      	ite	ne
    4998:	2301      	movne	r3, #1
    499a:	2300      	moveq	r3, #0
    499c:	b2db      	uxtb	r3, r3
    499e:	461a      	mov	r2, r3
    49a0:	687b      	ldr	r3, [r7, #4]
    49a2:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    49a4:	683b      	ldr	r3, [r7, #0]
    49a6:	2201      	movs	r2, #1
    49a8:	601a      	str	r2, [r3, #0]
		break;
    49aa:	f000 bc5a 	b.w	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    49ae:	68bb      	ldr	r3, [r7, #8]
    49b0:	881b      	ldrh	r3, [r3, #0]
    49b2:	2b00      	cmp	r3, #0
    49b4:	d005      	beq.n	49c2 <vendor_request_handler+0x226>
			CC1V8_SET;
    49b6:	4b65      	ldr	r3, [pc, #404]	; (4b4c <vendor_request_handler+0x3b0>)
    49b8:	f44f 7200 	mov.w	r2, #512	; 0x200
    49bc:	601a      	str	r2, [r3, #0]
		else
			CC1V8_CLR;
		break;
    49be:	f000 bc50 	b.w	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
			CC1V8_SET;
		else
			CC1V8_CLR;
    49c2:	4b63      	ldr	r3, [pc, #396]	; (4b50 <vendor_request_handler+0x3b4>)
    49c4:	f44f 7200 	mov.w	r2, #512	; 0x200
    49c8:	601a      	str	r2, [r3, #0]
		break;
    49ca:	f000 bc4a 	b.w	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_PARTNUM:
		command[0] = 54; /* read part number */
    49ce:	2336      	movs	r3, #54	; 0x36
    49d0:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    49d2:	4b60      	ldr	r3, [pc, #384]	; (4b54 <vendor_request_handler+0x3b8>)
    49d4:	681b      	ldr	r3, [r3, #0]
    49d6:	f107 0124 	add.w	r1, r7, #36	; 0x24
    49da:	f107 0210 	add.w	r2, r7, #16
    49de:	4608      	mov	r0, r1
    49e0:	4611      	mov	r1, r2
    49e2:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    49e4:	693b      	ldr	r3, [r7, #16]
    49e6:	b2da      	uxtb	r2, r3
    49e8:	687b      	ldr	r3, [r7, #4]
    49ea:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    49ec:	687b      	ldr	r3, [r7, #4]
    49ee:	3301      	adds	r3, #1
    49f0:	697a      	ldr	r2, [r7, #20]
    49f2:	b2d2      	uxtb	r2, r2
    49f4:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    49f6:	687b      	ldr	r3, [r7, #4]
    49f8:	3302      	adds	r3, #2
    49fa:	697a      	ldr	r2, [r7, #20]
    49fc:	0a12      	lsrs	r2, r2, #8
    49fe:	b2d2      	uxtb	r2, r2
    4a00:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4a02:	687b      	ldr	r3, [r7, #4]
    4a04:	3303      	adds	r3, #3
    4a06:	697a      	ldr	r2, [r7, #20]
    4a08:	0c12      	lsrs	r2, r2, #16
    4a0a:	b2d2      	uxtb	r2, r2
    4a0c:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4a0e:	687b      	ldr	r3, [r7, #4]
    4a10:	3304      	adds	r3, #4
    4a12:	697a      	ldr	r2, [r7, #20]
    4a14:	0e12      	lsrs	r2, r2, #24
    4a16:	b2d2      	uxtb	r2, r2
    4a18:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4a1a:	683b      	ldr	r3, [r7, #0]
    4a1c:	2205      	movs	r2, #5
    4a1e:	601a      	str	r2, [r3, #0]
		break;
    4a20:	f000 bc1f 	b.w	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
    4a24:	4b47      	ldr	r3, [pc, #284]	; (4b44 <vendor_request_handler+0x3a8>)
    4a26:	220b      	movs	r2, #11
    4a28:	701a      	strb	r2, [r3, #0]
		break;
    4a2a:	f000 bc1a 	b.w	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_SERIAL:
		command[0] = 58; /* read device serial number */
    4a2e:	233a      	movs	r3, #58	; 0x3a
    4a30:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4a32:	4b48      	ldr	r3, [pc, #288]	; (4b54 <vendor_request_handler+0x3b8>)
    4a34:	681b      	ldr	r3, [r3, #0]
    4a36:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4a3a:	f107 0210 	add.w	r2, r7, #16
    4a3e:	4608      	mov	r0, r1
    4a40:	4611      	mov	r1, r2
    4a42:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4a44:	693b      	ldr	r3, [r7, #16]
    4a46:	b2da      	uxtb	r2, r3
    4a48:	687b      	ldr	r3, [r7, #4]
    4a4a:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4a4c:	687b      	ldr	r3, [r7, #4]
    4a4e:	3301      	adds	r3, #1
    4a50:	697a      	ldr	r2, [r7, #20]
    4a52:	b2d2      	uxtb	r2, r2
    4a54:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4a56:	687b      	ldr	r3, [r7, #4]
    4a58:	3302      	adds	r3, #2
    4a5a:	697a      	ldr	r2, [r7, #20]
    4a5c:	0a12      	lsrs	r2, r2, #8
    4a5e:	b2d2      	uxtb	r2, r2
    4a60:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4a62:	687b      	ldr	r3, [r7, #4]
    4a64:	3303      	adds	r3, #3
    4a66:	697a      	ldr	r2, [r7, #20]
    4a68:	0c12      	lsrs	r2, r2, #16
    4a6a:	b2d2      	uxtb	r2, r2
    4a6c:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4a6e:	687b      	ldr	r3, [r7, #4]
    4a70:	3304      	adds	r3, #4
    4a72:	697a      	ldr	r2, [r7, #20]
    4a74:	0e12      	lsrs	r2, r2, #24
    4a76:	b2d2      	uxtb	r2, r2
    4a78:	701a      	strb	r2, [r3, #0]
		data[5] = result[2] & 0xFF;
    4a7a:	687b      	ldr	r3, [r7, #4]
    4a7c:	3305      	adds	r3, #5
    4a7e:	69ba      	ldr	r2, [r7, #24]
    4a80:	b2d2      	uxtb	r2, r2
    4a82:	701a      	strb	r2, [r3, #0]
		data[6] = (result[2] >> 8) & 0xFF;
    4a84:	687b      	ldr	r3, [r7, #4]
    4a86:	3306      	adds	r3, #6
    4a88:	69ba      	ldr	r2, [r7, #24]
    4a8a:	0a12      	lsrs	r2, r2, #8
    4a8c:	b2d2      	uxtb	r2, r2
    4a8e:	701a      	strb	r2, [r3, #0]
		data[7] = (result[2] >> 16) & 0xFF;
    4a90:	687b      	ldr	r3, [r7, #4]
    4a92:	3307      	adds	r3, #7
    4a94:	69ba      	ldr	r2, [r7, #24]
    4a96:	0c12      	lsrs	r2, r2, #16
    4a98:	b2d2      	uxtb	r2, r2
    4a9a:	701a      	strb	r2, [r3, #0]
		data[8] = (result[2] >> 24) & 0xFF;
    4a9c:	687b      	ldr	r3, [r7, #4]
    4a9e:	3308      	adds	r3, #8
    4aa0:	69ba      	ldr	r2, [r7, #24]
    4aa2:	0e12      	lsrs	r2, r2, #24
    4aa4:	b2d2      	uxtb	r2, r2
    4aa6:	701a      	strb	r2, [r3, #0]
		data[9] = result[3] & 0xFF;
    4aa8:	687b      	ldr	r3, [r7, #4]
    4aaa:	3309      	adds	r3, #9
    4aac:	69fa      	ldr	r2, [r7, #28]
    4aae:	b2d2      	uxtb	r2, r2
    4ab0:	701a      	strb	r2, [r3, #0]
		data[10] = (result[3] >> 8) & 0xFF;
    4ab2:	687b      	ldr	r3, [r7, #4]
    4ab4:	330a      	adds	r3, #10
    4ab6:	69fa      	ldr	r2, [r7, #28]
    4ab8:	0a12      	lsrs	r2, r2, #8
    4aba:	b2d2      	uxtb	r2, r2
    4abc:	701a      	strb	r2, [r3, #0]
		data[11] = (result[3] >> 16) & 0xFF;
    4abe:	687b      	ldr	r3, [r7, #4]
    4ac0:	330b      	adds	r3, #11
    4ac2:	69fa      	ldr	r2, [r7, #28]
    4ac4:	0c12      	lsrs	r2, r2, #16
    4ac6:	b2d2      	uxtb	r2, r2
    4ac8:	701a      	strb	r2, [r3, #0]
		data[12] = (result[3] >> 24) & 0xFF;
    4aca:	687b      	ldr	r3, [r7, #4]
    4acc:	330c      	adds	r3, #12
    4ace:	69fa      	ldr	r2, [r7, #28]
    4ad0:	0e12      	lsrs	r2, r2, #24
    4ad2:	b2d2      	uxtb	r2, r2
    4ad4:	701a      	strb	r2, [r3, #0]
		data[13] = result[4] & 0xFF;
    4ad6:	687b      	ldr	r3, [r7, #4]
    4ad8:	330d      	adds	r3, #13
    4ada:	6a3a      	ldr	r2, [r7, #32]
    4adc:	b2d2      	uxtb	r2, r2
    4ade:	701a      	strb	r2, [r3, #0]
		data[14] = (result[4] >> 8) & 0xFF;
    4ae0:	687b      	ldr	r3, [r7, #4]
    4ae2:	330e      	adds	r3, #14
    4ae4:	6a3a      	ldr	r2, [r7, #32]
    4ae6:	0a12      	lsrs	r2, r2, #8
    4ae8:	b2d2      	uxtb	r2, r2
    4aea:	701a      	strb	r2, [r3, #0]
		data[15] = (result[4] >> 16) & 0xFF;
    4aec:	687b      	ldr	r3, [r7, #4]
    4aee:	330f      	adds	r3, #15
    4af0:	6a3a      	ldr	r2, [r7, #32]
    4af2:	0c12      	lsrs	r2, r2, #16
    4af4:	b2d2      	uxtb	r2, r2
    4af6:	701a      	strb	r2, [r3, #0]
		data[16] = (result[4] >> 24) & 0xFF;
    4af8:	687b      	ldr	r3, [r7, #4]
    4afa:	3310      	adds	r3, #16
    4afc:	6a3a      	ldr	r2, [r7, #32]
    4afe:	0e12      	lsrs	r2, r2, #24
    4b00:	b2d2      	uxtb	r2, r2
    4b02:	701a      	strb	r2, [r3, #0]
		*data_len = 17;
    4b04:	683b      	ldr	r3, [r7, #0]
    4b06:	2211      	movs	r2, #17
    4b08:	601a      	str	r2, [r3, #0]
		break;
    4b0a:	e3aa      	b.n	5262 <vendor_request_handler+0xac6>

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    4b0c:	4b12      	ldr	r3, [pc, #72]	; (4b58 <vendor_request_handler+0x3bc>)
    4b0e:	681b      	ldr	r3, [r3, #0]
    4b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4b14:	2b00      	cmp	r3, #0
    4b16:	bf14      	ite	ne
    4b18:	2301      	movne	r3, #1
    4b1a:	2300      	moveq	r3, #0
    4b1c:	b2db      	uxtb	r3, r3
    4b1e:	461a      	mov	r2, r3
    4b20:	687b      	ldr	r3, [r7, #4]
    4b22:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4b24:	683b      	ldr	r3, [r7, #0]
    4b26:	2201      	movs	r2, #1
    4b28:	601a      	str	r2, [r3, #0]
		break;
    4b2a:	e39a      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    4b2c:	68bb      	ldr	r3, [r7, #8]
    4b2e:	881b      	ldrh	r3, [r3, #0]
    4b30:	2b00      	cmp	r3, #0
    4b32:	d003      	beq.n	4b3c <vendor_request_handler+0x3a0>
			PAEN_SET;
    4b34:	4b09      	ldr	r3, [pc, #36]	; (4b5c <vendor_request_handler+0x3c0>)
    4b36:	2280      	movs	r2, #128	; 0x80
    4b38:	601a      	str	r2, [r3, #0]
		else
			PAEN_CLR;
		break;
    4b3a:	e392      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
			PAEN_SET;
		else
			PAEN_CLR;
    4b3c:	4b08      	ldr	r3, [pc, #32]	; (4b60 <vendor_request_handler+0x3c4>)
    4b3e:	2280      	movs	r2, #128	; 0x80
    4b40:	601a      	str	r2, [r3, #0]
		break;
    4b42:	e38e      	b.n	5262 <vendor_request_handler+0xac6>
    4b44:	10000a3f 	.word	0x10000a3f
    4b48:	2009c034 	.word	0x2009c034
    4b4c:	2009c038 	.word	0x2009c038
    4b50:	2009c03c 	.word	0x2009c03c
    4b54:	10000448 	.word	0x10000448
    4b58:	2009c054 	.word	0x2009c054
    4b5c:	2009c058 	.word	0x2009c058
    4b60:	2009c05c 	.word	0x2009c05c

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    4b64:	4b92      	ldr	r3, [pc, #584]	; (4db0 <vendor_request_handler+0x614>)
    4b66:	681b      	ldr	r3, [r3, #0]
    4b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4b6c:	2b00      	cmp	r3, #0
    4b6e:	bf14      	ite	ne
    4b70:	2301      	movne	r3, #1
    4b72:	2300      	moveq	r3, #0
    4b74:	b2db      	uxtb	r3, r3
    4b76:	461a      	mov	r2, r3
    4b78:	687b      	ldr	r3, [r7, #4]
    4b7a:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4b7c:	683b      	ldr	r3, [r7, #0]
    4b7e:	2201      	movs	r2, #1
    4b80:	601a      	str	r2, [r3, #0]
		break;
    4b82:	e36e      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    4b84:	68bb      	ldr	r3, [r7, #8]
    4b86:	881b      	ldrh	r3, [r3, #0]
    4b88:	2b00      	cmp	r3, #0
    4b8a:	d004      	beq.n	4b96 <vendor_request_handler+0x3fa>
			HGM_SET;
    4b8c:	4b89      	ldr	r3, [pc, #548]	; (4db4 <vendor_request_handler+0x618>)
    4b8e:	f44f 7280 	mov.w	r2, #256	; 0x100
    4b92:	601a      	str	r2, [r3, #0]
		else
			HGM_CLR;
		break;
    4b94:	e365      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
			HGM_SET;
		else
			HGM_CLR;
    4b96:	4b88      	ldr	r3, [pc, #544]	; (4db8 <vendor_request_handler+0x61c>)
    4b98:	f44f 7280 	mov.w	r2, #256	; 0x100
    4b9c:	601a      	str	r2, [r3, #0]
		break;
    4b9e:	e360      	b.n	5262 <vendor_request_handler+0xac6>
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    4ba0:	4b86      	ldr	r3, [pc, #536]	; (4dbc <vendor_request_handler+0x620>)
    4ba2:	2203      	movs	r2, #3
    4ba4:	701a      	strb	r2, [r3, #0]
		break;
    4ba6:	e35c      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    4ba8:	2005      	movs	r0, #5
    4baa:	f004 ff67 	bl	9a7c <cc2400_get>
    4bae:	4603      	mov	r3, r0
    4bb0:	b2db      	uxtb	r3, r3
    4bb2:	f003 0307 	and.w	r3, r3, #7
    4bb6:	b2da      	uxtb	r2, r3
    4bb8:	687b      	ldr	r3, [r7, #4]
    4bba:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4bbc:	683b      	ldr	r3, [r7, #0]
    4bbe:	2201      	movs	r2, #1
    4bc0:	601a      	str	r2, [r3, #0]
		break;
    4bc2:	e34e      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    4bc4:	68bb      	ldr	r3, [r7, #8]
    4bc6:	881b      	ldrh	r3, [r3, #0]
    4bc8:	2b07      	cmp	r3, #7
    4bca:	d809      	bhi.n	4be0 <vendor_request_handler+0x444>
			cc2400_set(FREND, 8 | request_params[0]);
    4bcc:	68bb      	ldr	r3, [r7, #8]
    4bce:	881b      	ldrh	r3, [r3, #0]
    4bd0:	f043 0308 	orr.w	r3, r3, #8
    4bd4:	b29b      	uxth	r3, r3
    4bd6:	2005      	movs	r0, #5
    4bd8:	4619      	mov	r1, r3
    4bda:	f004 ff65 	bl	9aa8 <cc2400_set>
		} else {
			return 0;
		}
		break;
    4bde:	e340      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    4be0:	2300      	movs	r3, #0
    4be2:	e33f      	b.n	5264 <vendor_request_handler+0xac8>
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    4be4:	4b75      	ldr	r3, [pc, #468]	; (4dbc <vendor_request_handler+0x620>)
    4be6:	2205      	movs	r2, #5
    4be8:	701a      	strb	r2, [r3, #0]
		break;
    4bea:	e33a      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    4bec:	4b73      	ldr	r3, [pc, #460]	; (4dbc <vendor_request_handler+0x620>)
    4bee:	2206      	movs	r2, #6
    4bf0:	701a      	strb	r2, [r3, #0]
		break;
    4bf2:	e336      	b.n	5262 <vendor_request_handler+0xac6>
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    4bf4:	4b72      	ldr	r3, [pc, #456]	; (4dc0 <vendor_request_handler+0x624>)
    4bf6:	781a      	ldrb	r2, [r3, #0]
    4bf8:	687b      	ldr	r3, [r7, #4]
    4bfa:	701a      	strb	r2, [r3, #0]
		data[1] = rr.request_pa;
    4bfc:	687b      	ldr	r3, [r7, #4]
    4bfe:	3301      	adds	r3, #1
    4c00:	4a6f      	ldr	r2, [pc, #444]	; (4dc0 <vendor_request_handler+0x624>)
    4c02:	7852      	ldrb	r2, [r2, #1]
    4c04:	701a      	strb	r2, [r3, #0]
		data[2] = rr.request_num;
    4c06:	687b      	ldr	r3, [r7, #4]
    4c08:	3302      	adds	r3, #2
    4c0a:	4a6d      	ldr	r2, [pc, #436]	; (4dc0 <vendor_request_handler+0x624>)
    4c0c:	7892      	ldrb	r2, [r2, #2]
    4c0e:	701a      	strb	r2, [r3, #0]
		data[3] = rr.reply_pa;
    4c10:	687b      	ldr	r3, [r7, #4]
    4c12:	3303      	adds	r3, #3
    4c14:	4a6a      	ldr	r2, [pc, #424]	; (4dc0 <vendor_request_handler+0x624>)
    4c16:	78d2      	ldrb	r2, [r2, #3]
    4c18:	701a      	strb	r2, [r3, #0]
		data[4] = rr.reply_num;
    4c1a:	687b      	ldr	r3, [r7, #4]
    4c1c:	3304      	adds	r3, #4
    4c1e:	4a68      	ldr	r2, [pc, #416]	; (4dc0 <vendor_request_handler+0x624>)
    4c20:	7912      	ldrb	r2, [r2, #4]
    4c22:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4c24:	683b      	ldr	r3, [r7, #0]
    4c26:	2205      	movs	r2, #5
    4c28:	601a      	str	r2, [r3, #0]
		break;
    4c2a:	e31a      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    4c2c:	4b63      	ldr	r3, [pc, #396]	; (4dbc <vendor_request_handler+0x620>)
    4c2e:	2200      	movs	r2, #0
    4c30:	701a      	strb	r2, [r3, #0]
		break;
    4c32:	e316      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    4c34:	4b63      	ldr	r3, [pc, #396]	; (4dc4 <vendor_request_handler+0x628>)
    4c36:	781b      	ldrb	r3, [r3, #0]
    4c38:	b2da      	uxtb	r2, r3
    4c3a:	687b      	ldr	r3, [r7, #4]
    4c3c:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c3e:	683b      	ldr	r3, [r7, #0]
    4c40:	2201      	movs	r2, #1
    4c42:	601a      	str	r2, [r3, #0]
		break;
    4c44:	e30d      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    4c46:	68bb      	ldr	r3, [r7, #8]
    4c48:	881b      	ldrh	r3, [r3, #0]
    4c4a:	b2da      	uxtb	r2, r3
    4c4c:	4b5d      	ldr	r3, [pc, #372]	; (4dc4 <vendor_request_handler+0x628>)
    4c4e:	701a      	strb	r2, [r3, #0]
		break;
    4c50:	e307      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    4c52:	4b5d      	ldr	r3, [pc, #372]	; (4dc8 <vendor_request_handler+0x62c>)
    4c54:	881b      	ldrh	r3, [r3, #0]
    4c56:	b29b      	uxth	r3, r3
    4c58:	b2da      	uxtb	r2, r3
    4c5a:	687b      	ldr	r3, [r7, #4]
    4c5c:	701a      	strb	r2, [r3, #0]
		data[1] = (channel >> 8) & 0xFF;
    4c5e:	687b      	ldr	r3, [r7, #4]
    4c60:	3301      	adds	r3, #1
    4c62:	4a59      	ldr	r2, [pc, #356]	; (4dc8 <vendor_request_handler+0x62c>)
    4c64:	8812      	ldrh	r2, [r2, #0]
    4c66:	b292      	uxth	r2, r2
    4c68:	0a12      	lsrs	r2, r2, #8
    4c6a:	b292      	uxth	r2, r2
    4c6c:	b2d2      	uxtb	r2, r2
    4c6e:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    4c70:	683b      	ldr	r3, [r7, #0]
    4c72:	2202      	movs	r2, #2
    4c74:	601a      	str	r2, [r3, #0]
		break;
    4c76:	e2f4      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4c78:	68bb      	ldr	r3, [r7, #8]
    4c7a:	881a      	ldrh	r2, [r3, #0]
    4c7c:	4b53      	ldr	r3, [pc, #332]	; (4dcc <vendor_request_handler+0x630>)
    4c7e:	801a      	strh	r2, [r3, #0]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4c80:	4b52      	ldr	r3, [pc, #328]	; (4dcc <vendor_request_handler+0x630>)
    4c82:	881b      	ldrh	r3, [r3, #0]
    4c84:	b29b      	uxth	r3, r3
    4c86:	f640 22ea 	movw	r2, #2794	; 0xaea
    4c8a:	4293      	cmp	r3, r2
    4c8c:	d907      	bls.n	4c9e <vendor_request_handler+0x502>
			hop_mode = HOP_SWEEP;
    4c8e:	4b50      	ldr	r3, [pc, #320]	; (4dd0 <vendor_request_handler+0x634>)
    4c90:	2201      	movs	r2, #1
    4c92:	701a      	strb	r2, [r3, #0]
			requested_channel = 2402;
    4c94:	4b4d      	ldr	r3, [pc, #308]	; (4dcc <vendor_request_handler+0x630>)
    4c96:	f640 1262 	movw	r2, #2402	; 0x962
    4c9a:	801a      	strh	r2, [r3, #0]
    4c9c:	e020      	b.n	4ce0 <vendor_request_handler+0x544>
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
    4c9e:	4b4c      	ldr	r3, [pc, #304]	; (4dd0 <vendor_request_handler+0x634>)
    4ca0:	2200      	movs	r2, #0
    4ca2:	701a      	strb	r2, [r3, #0]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4ca4:	4b49      	ldr	r3, [pc, #292]	; (4dcc <vendor_request_handler+0x630>)
    4ca6:	881b      	ldrh	r3, [r3, #0]
    4ca8:	b29b      	uxth	r3, r3
    4caa:	f640 02dc 	movw	r2, #2268	; 0x8dc
    4cae:	4293      	cmp	r3, r2
    4cb0:	d903      	bls.n	4cba <vendor_request_handler+0x51e>
    4cb2:	4b46      	ldr	r3, [pc, #280]	; (4dcc <vendor_request_handler+0x630>)
    4cb4:	881b      	ldrh	r3, [r3, #0]
    4cb6:	b29b      	uxth	r3, r3
    4cb8:	e001      	b.n	4cbe <vendor_request_handler+0x522>
    4cba:	f640 03dc 	movw	r3, #2268	; 0x8dc
    4cbe:	4a43      	ldr	r2, [pc, #268]	; (4dcc <vendor_request_handler+0x630>)
    4cc0:	8013      	strh	r3, [r2, #0]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4cc2:	4b42      	ldr	r3, [pc, #264]	; (4dcc <vendor_request_handler+0x630>)
    4cc4:	881b      	ldrh	r3, [r3, #0]
    4cc6:	b29b      	uxth	r3, r3
    4cc8:	f640 22e9 	movw	r2, #2793	; 0xae9
    4ccc:	4293      	cmp	r3, r2
    4cce:	d803      	bhi.n	4cd8 <vendor_request_handler+0x53c>
    4cd0:	4b3e      	ldr	r3, [pc, #248]	; (4dcc <vendor_request_handler+0x630>)
    4cd2:	881b      	ldrh	r3, [r3, #0]
    4cd4:	b29b      	uxth	r3, r3
    4cd6:	e001      	b.n	4cdc <vendor_request_handler+0x540>
    4cd8:	f640 23ea 	movw	r3, #2794	; 0xaea
    4cdc:	4a3b      	ldr	r2, [pc, #236]	; (4dcc <vendor_request_handler+0x630>)
    4cde:	8013      	strh	r3, [r2, #0]
		}

		if (mode != MODE_BT_FOLLOW_LE) {
    4ce0:	4b3c      	ldr	r3, [pc, #240]	; (4dd4 <vendor_request_handler+0x638>)
    4ce2:	781b      	ldrb	r3, [r3, #0]
    4ce4:	b2db      	uxtb	r3, r3
    4ce6:	2b09      	cmp	r3, #9
    4ce8:	d00a      	beq.n	4d00 <vendor_request_handler+0x564>
			channel = requested_channel;
    4cea:	4b38      	ldr	r3, [pc, #224]	; (4dcc <vendor_request_handler+0x630>)
    4cec:	881b      	ldrh	r3, [r3, #0]
    4cee:	b29a      	uxth	r2, r3
    4cf0:	4b35      	ldr	r3, [pc, #212]	; (4dc8 <vendor_request_handler+0x62c>)
    4cf2:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    4cf4:	4b35      	ldr	r3, [pc, #212]	; (4dcc <vendor_request_handler+0x630>)
    4cf6:	2200      	movs	r2, #0
    4cf8:	801a      	strh	r2, [r3, #0]

			/* CS threshold is mode-dependent. Update it after
			 * possible mode change. TODO - kludgy. */
			cs_threshold_calc_and_set();
    4cfa:	f7ff fcd9 	bl	46b0 <cs_threshold_calc_and_set>
		}
		break;
    4cfe:	e2b0      	b.n	5262 <vendor_request_handler+0xac6>
    4d00:	e2af      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_ISP:
		command[0] = 57;
    4d02:	2339      	movs	r3, #57	; 0x39
    4d04:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4d06:	4b34      	ldr	r3, [pc, #208]	; (4dd8 <vendor_request_handler+0x63c>)
    4d08:	681b      	ldr	r3, [r3, #0]
    4d0a:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4d0e:	f107 0210 	add.w	r2, r7, #16
    4d12:	4608      	mov	r0, r1
    4d14:	4611      	mov	r1, r2
    4d16:	4798      	blx	r3
		*data_len = 0; /* should never return */
    4d18:	683b      	ldr	r3, [r7, #0]
    4d1a:	2200      	movs	r2, #0
    4d1c:	601a      	str	r2, [r3, #0]
		break;
    4d1e:	e2a0      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    4d20:	4b2e      	ldr	r3, [pc, #184]	; (4ddc <vendor_request_handler+0x640>)
    4d22:	4a2f      	ldr	r2, [pc, #188]	; (4de0 <vendor_request_handler+0x644>)
    4d24:	601a      	str	r2, [r3, #0]
		reset();
    4d26:	f005 f88b 	bl	9e40 <reset>
		break;
    4d2a:	e29a      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    4d2c:	68bb      	ldr	r3, [r7, #8]
    4d2e:	881b      	ldrh	r3, [r3, #0]
    4d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4d34:	d917      	bls.n	4d66 <vendor_request_handler+0x5ca>
    4d36:	68bb      	ldr	r3, [r7, #8]
    4d38:	881b      	ldrh	r3, [r3, #0]
    4d3a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    4d3e:	d812      	bhi.n	4d66 <vendor_request_handler+0x5ca>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4d40:	68bb      	ldr	r3, [r7, #8]
    4d42:	3302      	adds	r3, #2
    4d44:	881b      	ldrh	r3, [r3, #0]
		bootloader_ctrl = DFU_MODE;
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    4d46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4d4a:	d90c      	bls.n	4d66 <vendor_request_handler+0x5ca>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4d4c:	68bb      	ldr	r3, [r7, #8]
    4d4e:	3302      	adds	r3, #2
    4d50:	881b      	ldrh	r3, [r3, #0]
    4d52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    4d56:	d806      	bhi.n	4d66 <vendor_request_handler+0x5ca>
				request_params[1] < request_params[0])
    4d58:	68bb      	ldr	r3, [r7, #8]
    4d5a:	3302      	adds	r3, #2
    4d5c:	881a      	ldrh	r2, [r3, #0]
    4d5e:	68bb      	ldr	r3, [r7, #8]
    4d60:	881b      	ldrh	r3, [r3, #0]
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4d62:	429a      	cmp	r2, r3
    4d64:	d201      	bcs.n	4d6a <vendor_request_handler+0x5ce>
				request_params[1] < request_params[0])
			return 0;
    4d66:	2300      	movs	r3, #0
    4d68:	e27c      	b.n	5264 <vendor_request_handler+0xac8>
		low_freq = request_params[0];
    4d6a:	68bb      	ldr	r3, [r7, #8]
    4d6c:	881a      	ldrh	r2, [r3, #0]
    4d6e:	4b1d      	ldr	r3, [pc, #116]	; (4de4 <vendor_request_handler+0x648>)
    4d70:	801a      	strh	r2, [r3, #0]
		high_freq = request_params[1];
    4d72:	68bb      	ldr	r3, [r7, #8]
    4d74:	885a      	ldrh	r2, [r3, #2]
    4d76:	4b1c      	ldr	r3, [pc, #112]	; (4de8 <vendor_request_handler+0x64c>)
    4d78:	801a      	strh	r2, [r3, #0]
		requested_mode = MODE_SPECAN;
    4d7a:	4b10      	ldr	r3, [pc, #64]	; (4dbc <vendor_request_handler+0x620>)
    4d7c:	2204      	movs	r2, #4
    4d7e:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4d80:	683b      	ldr	r3, [r7, #0]
    4d82:	2200      	movs	r2, #0
    4d84:	601a      	str	r2, [r3, #0]
		break;
    4d86:	e26c      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    4d88:	68bb      	ldr	r3, [r7, #8]
    4d8a:	881b      	ldrh	r3, [r3, #0]
    4d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4d90:	d901      	bls.n	4d96 <vendor_request_handler+0x5fa>
			return 0;
    4d92:	2300      	movs	r3, #0
    4d94:	e266      	b.n	5264 <vendor_request_handler+0xac8>
		rssi_threshold = (int8_t)request_params[0];
    4d96:	68bb      	ldr	r3, [r7, #8]
    4d98:	881b      	ldrh	r3, [r3, #0]
    4d9a:	b2da      	uxtb	r2, r3
    4d9c:	4b13      	ldr	r3, [pc, #76]	; (4dec <vendor_request_handler+0x650>)
    4d9e:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_LED_SPECAN;
    4da0:	4b06      	ldr	r3, [pc, #24]	; (4dbc <vendor_request_handler+0x620>)
    4da2:	2207      	movs	r2, #7
    4da4:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4da6:	683b      	ldr	r3, [r7, #0]
    4da8:	2200      	movs	r2, #0
    4daa:	601a      	str	r2, [r3, #0]
		break;
    4dac:	e259      	b.n	5262 <vendor_request_handler+0xac6>
    4dae:	bf00      	nop
    4db0:	2009c054 	.word	0x2009c054
    4db4:	2009c058 	.word	0x2009c058
    4db8:	2009c05c 	.word	0x2009c05c
    4dbc:	10000a3f 	.word	0x10000a3f
    4dc0:	10001080 	.word	0x10001080
    4dc4:	10000a42 	.word	0x10000a42
    4dc8:	1000049c 	.word	0x1000049c
    4dcc:	10000a44 	.word	0x10000a44
    4dd0:	1000097c 	.word	0x1000097c
    4dd4:	10000a3e 	.word	0x10000a3e
    4dd8:	10000448 	.word	0x10000448
    4ddc:	1000001c 	.word	0x1000001c
    4de0:	4305bb21 	.word	0x4305bb21
    4de4:	1000049e 	.word	0x1000049e
    4de8:	100004a0 	.word	0x100004a0
    4dec:	100004a2 	.word	0x100004a2

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    4df0:	687b      	ldr	r3, [r7, #4]
    4df2:	2200      	movs	r2, #0
    4df4:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
    4df6:	687b      	ldr	r3, [r7, #4]
    4df8:	3301      	adds	r3, #1
    4dfa:	2200      	movs	r2, #0
    4dfc:	701a      	strb	r2, [r3, #0]

		length = (u8)strlen(GIT_REVISION);
    4dfe:	48a4      	ldr	r0, [pc, #656]	; (5090 <vendor_request_handler+0x8f4>)
    4e00:	f006 fc9c 	bl	b73c <strlen>
    4e04:	4603      	mov	r3, r0
    4e06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[2] = length;
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	3302      	adds	r3, #2
    4e0e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    4e12:	701a      	strb	r2, [r3, #0]

		memcpy(&data[3], GIT_REVISION, length);
    4e14:	687b      	ldr	r3, [r7, #4]
    4e16:	1cda      	adds	r2, r3, #3
    4e18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4e1c:	4610      	mov	r0, r2
    4e1e:	499c      	ldr	r1, [pc, #624]	; (5090 <vendor_request_handler+0x8f4>)
    4e20:	461a      	mov	r2, r3
    4e22:	f006 fc15 	bl	b650 <memcpy>

		*data_len = 2 + 1 + length;
    4e26:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4e2a:	1cda      	adds	r2, r3, #3
    4e2c:	683b      	ldr	r3, [r7, #0]
    4e2e:	601a      	str	r2, [r3, #0]
		break;
    4e30:	e217      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    4e32:	4898      	ldr	r0, [pc, #608]	; (5094 <vendor_request_handler+0x8f8>)
    4e34:	f006 fc82 	bl	b73c <strlen>
    4e38:	4603      	mov	r3, r0
    4e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[0] = length;
    4e3e:	687b      	ldr	r3, [r7, #4]
    4e40:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    4e44:	701a      	strb	r2, [r3, #0]
		memcpy(&data[1], compile_info, length);
    4e46:	687b      	ldr	r3, [r7, #4]
    4e48:	1c5a      	adds	r2, r3, #1
    4e4a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4e4e:	4610      	mov	r0, r2
    4e50:	4990      	ldr	r1, [pc, #576]	; (5094 <vendor_request_handler+0x8f8>)
    4e52:	461a      	mov	r2, r3
    4e54:	f006 fbfc 	bl	b650 <memcpy>
		*data_len = 1 + length;
    4e58:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4e5c:	1c5a      	adds	r2, r3, #1
    4e5e:	683b      	ldr	r3, [r7, #0]
    4e60:	601a      	str	r2, [r3, #0]
		break;
    4e62:	e1fe      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    4e64:	687b      	ldr	r3, [r7, #4]
    4e66:	2201      	movs	r2, #1
    4e68:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4e6a:	683b      	ldr	r3, [r7, #0]
    4e6c:	2201      	movs	r2, #1
    4e6e:	601a      	str	r2, [r3, #0]
		break;
    4e70:	e1f7      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    4e72:	68bb      	ldr	r3, [r7, #8]
    4e74:	881b      	ldrh	r3, [r3, #0]
    4e76:	b2da      	uxtb	r2, r3
    4e78:	4b87      	ldr	r3, [pc, #540]	; (5098 <vendor_request_handler+0x8fc>)
    4e7a:	701a      	strb	r2, [r3, #0]
		cs_threshold_calc_and_set();
    4e7c:	f7ff fc18 	bl	46b0 <cs_threshold_calc_and_set>
		break;
    4e80:	e1ef      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    4e82:	4b85      	ldr	r3, [pc, #532]	; (5098 <vendor_request_handler+0x8fc>)
    4e84:	781b      	ldrb	r3, [r3, #0]
    4e86:	b2da      	uxtb	r2, r3
    4e88:	687b      	ldr	r3, [r7, #4]
    4e8a:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4e8c:	683b      	ldr	r3, [r7, #0]
    4e8e:	2201      	movs	r2, #1
    4e90:	601a      	str	r2, [r3, #0]
		break;
    4e92:	e1e6      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    4e94:	4981      	ldr	r1, [pc, #516]	; (509c <vendor_request_handler+0x900>)
    4e96:	f04f 0200 	mov.w	r2, #0
    4e9a:	f04f 0300 	mov.w	r3, #0
    4e9e:	e9c1 2300 	strd	r2, r3, [r1]
		target.access_code = 0;
    4ea2:	497e      	ldr	r1, [pc, #504]	; (509c <vendor_request_handler+0x900>)
    4ea4:	f04f 0200 	mov.w	r2, #0
    4ea8:	f04f 0300 	mov.w	r3, #0
    4eac:	e9c1 2302 	strd	r2, r3, [r1, #8]
		for(i=0; i < 8; i++) {
    4eb0:	2300      	movs	r3, #0
    4eb2:	64fb      	str	r3, [r7, #76]	; 0x4c
    4eb4:	e025      	b.n	4f02 <vendor_request_handler+0x766>
			target.address |= (uint64_t)data[i] << 8*i;
    4eb6:	4b79      	ldr	r3, [pc, #484]	; (509c <vendor_request_handler+0x900>)
    4eb8:	e9d3 ab00 	ldrd	sl, fp, [r3]
    4ebc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4ebe:	687a      	ldr	r2, [r7, #4]
    4ec0:	4413      	add	r3, r2
    4ec2:	781b      	ldrb	r3, [r3, #0]
    4ec4:	b2da      	uxtb	r2, r3
    4ec6:	f04f 0300 	mov.w	r3, #0
    4eca:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    4ecc:	00c9      	lsls	r1, r1, #3
    4ece:	f1a1 0620 	sub.w	r6, r1, #32
    4ed2:	f1c1 0020 	rsb	r0, r1, #32
    4ed6:	fa03 f901 	lsl.w	r9, r3, r1
    4eda:	fa02 f606 	lsl.w	r6, r2, r6
    4ede:	ea49 0906 	orr.w	r9, r9, r6
    4ee2:	fa22 f000 	lsr.w	r0, r2, r0
    4ee6:	ea49 0900 	orr.w	r9, r9, r0
    4eea:	fa02 f801 	lsl.w	r8, r2, r1
    4eee:	ea4a 0208 	orr.w	r2, sl, r8
    4ef2:	ea4b 0309 	orr.w	r3, fp, r9
    4ef6:	4969      	ldr	r1, [pc, #420]	; (509c <vendor_request_handler+0x900>)
    4ef8:	e9c1 2300 	strd	r2, r3, [r1]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
    4efc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4efe:	3301      	adds	r3, #1
    4f00:	64fb      	str	r3, [r7, #76]	; 0x4c
    4f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f04:	2b07      	cmp	r3, #7
    4f06:	ddd6      	ble.n	4eb6 <vendor_request_handler+0x71a>
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    4f08:	2300      	movs	r3, #0
    4f0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    4f0c:	e024      	b.n	4f58 <vendor_request_handler+0x7bc>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
    4f0e:	4b63      	ldr	r3, [pc, #396]	; (509c <vendor_request_handler+0x900>)
    4f10:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
    4f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f16:	3308      	adds	r3, #8
    4f18:	687a      	ldr	r2, [r7, #4]
    4f1a:	4413      	add	r3, r2
    4f1c:	781b      	ldrb	r3, [r3, #0]
    4f1e:	b2da      	uxtb	r2, r3
    4f20:	f04f 0300 	mov.w	r3, #0
    4f24:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    4f26:	00c9      	lsls	r1, r1, #3
    4f28:	f1a1 0620 	sub.w	r6, r1, #32
    4f2c:	f1c1 0020 	rsb	r0, r1, #32
    4f30:	fa03 f501 	lsl.w	r5, r3, r1
    4f34:	fa02 f606 	lsl.w	r6, r2, r6
    4f38:	4335      	orrs	r5, r6
    4f3a:	fa22 f000 	lsr.w	r0, r2, r0
    4f3e:	4305      	orrs	r5, r0
    4f40:	fa02 f401 	lsl.w	r4, r2, r1
    4f44:	ea48 0204 	orr.w	r2, r8, r4
    4f48:	ea49 0305 	orr.w	r3, r9, r5
    4f4c:	4953      	ldr	r1, [pc, #332]	; (509c <vendor_request_handler+0x900>)
    4f4e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    4f52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f54:	3301      	adds	r3, #1
    4f56:	64fb      	str	r3, [r7, #76]	; 0x4c
    4f58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f5a:	2b07      	cmp	r3, #7
    4f5c:	ddd7      	ble.n	4f0e <vendor_request_handler+0x772>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
		}
		break;
    4f5e:	e180      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
    4f60:	2300      	movs	r3, #0
    4f62:	64bb      	str	r3, [r7, #72]	; 0x48
		for(i=0; i < 4; i++) {
    4f64:	2300      	movs	r3, #0
    4f66:	64fb      	str	r3, [r7, #76]	; 0x4c
    4f68:	e00d      	b.n	4f86 <vendor_request_handler+0x7ea>
			clock_offset <<= 8;
    4f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4f6c:	021b      	lsls	r3, r3, #8
    4f6e:	64bb      	str	r3, [r7, #72]	; 0x48
			clock_offset |= data[i];
    4f70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f72:	687a      	ldr	r2, [r7, #4]
    4f74:	4413      	add	r3, r2
    4f76:	781b      	ldrb	r3, [r3, #0]
    4f78:	461a      	mov	r2, r3
    4f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4f7c:	4313      	orrs	r3, r2
    4f7e:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		break;

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
		for(i=0; i < 4; i++) {
    4f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f82:	3301      	adds	r3, #1
    4f84:	64fb      	str	r3, [r7, #76]	; 0x4c
    4f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f88:	2b03      	cmp	r3, #3
    4f8a:	ddee      	ble.n	4f6a <vendor_request_handler+0x7ce>
			clock_offset <<= 8;
			clock_offset |= data[i];
		}
		clkn += clock_offset;
    4f8c:	4b44      	ldr	r3, [pc, #272]	; (50a0 <vendor_request_handler+0x904>)
    4f8e:	681a      	ldr	r2, [r3, #0]
    4f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4f92:	4413      	add	r3, r2
    4f94:	4a42      	ldr	r2, [pc, #264]	; (50a0 <vendor_request_handler+0x904>)
    4f96:	6013      	str	r3, [r2, #0]
		hop_mode = HOP_BLUETOOTH;
    4f98:	4b42      	ldr	r3, [pc, #264]	; (50a4 <vendor_request_handler+0x908>)
    4f9a:	2202      	movs	r2, #2
    4f9c:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW;
    4f9e:	4b42      	ldr	r3, [pc, #264]	; (50a8 <vendor_request_handler+0x90c>)
    4fa0:	2208      	movs	r2, #8
    4fa2:	701a      	strb	r2, [r3, #0]
		break;
    4fa4:	e15d      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    4fa6:	687b      	ldr	r3, [r7, #4]
    4fa8:	781b      	ldrb	r3, [r3, #0]
    4faa:	461a      	mov	r2, r3
    4fac:	687b      	ldr	r3, [r7, #4]
    4fae:	3301      	adds	r3, #1
    4fb0:	781b      	ldrb	r3, [r3, #0]
    4fb2:	021b      	lsls	r3, r3, #8
    4fb4:	431a      	orrs	r2, r3
    4fb6:	687b      	ldr	r3, [r7, #4]
    4fb8:	3302      	adds	r3, #2
    4fba:	781b      	ldrb	r3, [r3, #0]
    4fbc:	041b      	lsls	r3, r3, #16
    4fbe:	431a      	orrs	r2, r3
    4fc0:	687b      	ldr	r3, [r7, #4]
    4fc2:	3303      	adds	r3, #3
    4fc4:	781b      	ldrb	r3, [r3, #0]
    4fc6:	061b      	lsls	r3, r3, #24
    4fc8:	4313      	orrs	r3, r2
    4fca:	63fb      	str	r3, [r7, #60]	; 0x3c
		clkn = clock;
    4fcc:	4a34      	ldr	r2, [pc, #208]	; (50a0 <vendor_request_handler+0x904>)
    4fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    4fd0:	6013      	str	r3, [r2, #0]
		cs_threshold_calc_and_set();
    4fd2:	f7ff fb6d 	bl	46b0 <cs_threshold_calc_and_set>
		break;
    4fd6:	e144      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    4fd8:	2300      	movs	r3, #0
    4fda:	64fb      	str	r3, [r7, #76]	; 0x4c
    4fdc:	e00b      	b.n	4ff6 <vendor_request_handler+0x85a>
			afh_map[i] = data[i];
    4fde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4fe0:	687a      	ldr	r2, [r7, #4]
    4fe2:	4413      	add	r3, r2
    4fe4:	7819      	ldrb	r1, [r3, #0]
    4fe6:	4a31      	ldr	r2, [pc, #196]	; (50ac <vendor_request_handler+0x910>)
    4fe8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4fea:	4413      	add	r3, r2
    4fec:	460a      	mov	r2, r1
    4fee:	701a      	strb	r2, [r3, #0]
		clkn = clock;
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    4ff0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4ff2:	3301      	adds	r3, #1
    4ff4:	64fb      	str	r3, [r7, #76]	; 0x4c
    4ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4ff8:	2b09      	cmp	r3, #9
    4ffa:	ddf0      	ble.n	4fde <vendor_request_handler+0x842>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    4ffc:	4b2c      	ldr	r3, [pc, #176]	; (50b0 <vendor_request_handler+0x914>)
    4ffe:	2201      	movs	r2, #1
    5000:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    5002:	683b      	ldr	r3, [r7, #0]
    5004:	220a      	movs	r2, #10
    5006:	601a      	str	r2, [r3, #0]
		break;
    5008:	e12b      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    500a:	2300      	movs	r3, #0
    500c:	64fb      	str	r3, [r7, #76]	; 0x4c
    500e:	e007      	b.n	5020 <vendor_request_handler+0x884>
			afh_map[i] = 0;
    5010:	4a26      	ldr	r2, [pc, #152]	; (50ac <vendor_request_handler+0x910>)
    5012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5014:	4413      	add	r3, r2
    5016:	2200      	movs	r2, #0
    5018:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    501a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    501c:	3301      	adds	r3, #1
    501e:	64fb      	str	r3, [r7, #76]	; 0x4c
    5020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5022:	2b09      	cmp	r3, #9
    5024:	ddf4      	ble.n	5010 <vendor_request_handler+0x874>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    5026:	4b22      	ldr	r3, [pc, #136]	; (50b0 <vendor_request_handler+0x914>)
    5028:	2200      	movs	r2, #0
    502a:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    502c:	683b      	ldr	r3, [r7, #0]
    502e:	220a      	movs	r2, #10
    5030:	601a      	str	r2, [r3, #0]
		break;
    5032:	e116      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    5034:	4b1a      	ldr	r3, [pc, #104]	; (50a0 <vendor_request_handler+0x904>)
    5036:	681b      	ldr	r3, [r3, #0]
    5038:	63fb      	str	r3, [r7, #60]	; 0x3c
		for(i=0; i < 4; i++) {
    503a:	2300      	movs	r3, #0
    503c:	64fb      	str	r3, [r7, #76]	; 0x4c
    503e:	e00c      	b.n	505a <vendor_request_handler+0x8be>
			data[i] = (clock >> (8*i)) & 0xff;
    5040:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5042:	687a      	ldr	r2, [r7, #4]
    5044:	4413      	add	r3, r2
    5046:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5048:	00d2      	lsls	r2, r2, #3
    504a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    504c:	fa21 f202 	lsr.w	r2, r1, r2
    5050:	b2d2      	uxtb	r2, r2
    5052:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(i=0; i < 4; i++) {
    5054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5056:	3301      	adds	r3, #1
    5058:	64fb      	str	r3, [r7, #76]	; 0x4c
    505a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    505c:	2b03      	cmp	r3, #3
    505e:	ddef      	ble.n	5040 <vendor_request_handler+0x8a4>
			data[i] = (clock >> (8*i)) & 0xff;
		}
		*data_len = 4;
    5060:	683b      	ldr	r3, [r7, #0]
    5062:	2204      	movs	r2, #4
    5064:	601a      	str	r2, [r3, #0]
		break;
    5066:	e0fc      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;
    5068:	683b      	ldr	r3, [r7, #0]
    506a:	2200      	movs	r2, #0
    506c:	601a      	str	r2, [r3, #0]

		do_hop = 0;
    506e:	4b11      	ldr	r3, [pc, #68]	; (50b4 <vendor_request_handler+0x918>)
    5070:	2200      	movs	r2, #0
    5072:	701a      	strb	r2, [r3, #0]
		hop_mode = HOP_BTLE;
    5074:	4b0b      	ldr	r3, [pc, #44]	; (50a4 <vendor_request_handler+0x908>)
    5076:	2203      	movs	r2, #3
    5078:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW_LE;
    507a:	4b0b      	ldr	r3, [pc, #44]	; (50a8 <vendor_request_handler+0x90c>)
    507c:	2209      	movs	r2, #9
    507e:	701a      	strb	r2, [r3, #0]

		queue_init();
    5080:	f003 fa9a 	bl	85b8 <queue_init>
		cs_threshold_calc_and_set();
    5084:	f7ff fb14 	bl	46b0 <cs_threshold_calc_and_set>
		break;
    5088:	e0eb      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    508a:	2300      	movs	r3, #0
    508c:	64fb      	str	r3, [r7, #76]	; 0x4c
    508e:	e021      	b.n	50d4 <vendor_request_handler+0x938>
    5090:	0000c060 	.word	0x0000c060
    5094:	0000c01c 	.word	0x0000c01c
    5098:	1000044c 	.word	0x1000044c
    509c:	100010c8 	.word	0x100010c8
    50a0:	10000be4 	.word	0x10000be4
    50a4:	1000097c 	.word	0x1000097c
    50a8:	10000a3f 	.word	0x10000a3f
    50ac:	10000bbc 	.word	0x10000bbc
    50b0:	1000102c 	.word	0x1000102c
    50b4:	1000097d 	.word	0x1000097d
			data[i] = (le.access_address >> (8*i)) & 0xff;
    50b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50ba:	687a      	ldr	r2, [r7, #4]
    50bc:	4413      	add	r3, r2
    50be:	4a6c      	ldr	r2, [pc, #432]	; (5270 <vendor_request_handler+0xad4>)
    50c0:	6811      	ldr	r1, [r2, #0]
    50c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    50c4:	00d2      	lsls	r2, r2, #3
    50c6:	fa21 f202 	lsr.w	r2, r1, r2
    50ca:	b2d2      	uxtb	r2, r2
    50cc:	701a      	strb	r2, [r3, #0]
		queue_init();
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    50ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50d0:	3301      	adds	r3, #1
    50d2:	64fb      	str	r3, [r7, #76]	; 0x4c
    50d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50d6:	2b03      	cmp	r3, #3
    50d8:	ddee      	ble.n	50b8 <vendor_request_handler+0x91c>
			data[i] = (le.access_address >> (8*i)) & 0xff;
		}
		*data_len = 4;
    50da:	683b      	ldr	r3, [r7, #0]
    50dc:	2204      	movs	r2, #4
    50de:	601a      	str	r2, [r3, #0]
		break;
    50e0:	e0bf      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    50e2:	687b      	ldr	r3, [r7, #4]
    50e4:	781b      	ldrb	r3, [r3, #0]
    50e6:	461a      	mov	r2, r3
    50e8:	687b      	ldr	r3, [r7, #4]
    50ea:	3301      	adds	r3, #1
    50ec:	781b      	ldrb	r3, [r3, #0]
    50ee:	021b      	lsls	r3, r3, #8
    50f0:	431a      	orrs	r2, r3
    50f2:	687b      	ldr	r3, [r7, #4]
    50f4:	3302      	adds	r3, #2
    50f6:	781b      	ldrb	r3, [r3, #0]
    50f8:	041b      	lsls	r3, r3, #16
    50fa:	431a      	orrs	r2, r3
    50fc:	687b      	ldr	r3, [r7, #4]
    50fe:	3303      	adds	r3, #3
    5100:	781b      	ldrb	r3, [r3, #0]
    5102:	061b      	lsls	r3, r3, #24
    5104:	4313      	orrs	r3, r2
    5106:	4618      	mov	r0, r3
    5108:	f001 f96e 	bl	63e8 <le_set_access_address>
		le.target_set = 1;
    510c:	4b58      	ldr	r3, [pc, #352]	; (5270 <vendor_request_handler+0xad4>)
    510e:	2201      	movs	r2, #1
    5110:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    5112:	e0a6      	b.n	5262 <vendor_request_handler+0xac6>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    5114:	687b      	ldr	r3, [r7, #4]
    5116:	2213      	movs	r2, #19
    5118:	701a      	strb	r2, [r3, #0]
		data[1] = 0x37;
    511a:	687b      	ldr	r3, [r7, #4]
    511c:	3301      	adds	r3, #1
    511e:	2237      	movs	r2, #55	; 0x37
    5120:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    5122:	683b      	ldr	r3, [r7, #0]
    5124:	2202      	movs	r2, #2
    5126:	601a      	str	r2, [r3, #0]
		break;
    5128:	e09b      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    512a:	4b51      	ldr	r3, [pc, #324]	; (5270 <vendor_request_handler+0xad4>)
    512c:	691b      	ldr	r3, [r3, #16]
    512e:	2b00      	cmp	r3, #0
    5130:	bf14      	ite	ne
    5132:	2301      	movne	r3, #1
    5134:	2300      	moveq	r3, #0
    5136:	b2db      	uxtb	r3, r3
    5138:	461a      	mov	r2, r3
    513a:	687b      	ldr	r3, [r7, #4]
    513c:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    513e:	683b      	ldr	r3, [r7, #0]
    5140:	2201      	movs	r2, #1
    5142:	601a      	str	r2, [r3, #0]
		break;
    5144:	e08d      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    5146:	68bb      	ldr	r3, [r7, #8]
    5148:	881b      	ldrh	r3, [r3, #0]
    514a:	2b00      	cmp	r3, #0
    514c:	bf14      	ite	ne
    514e:	2301      	movne	r3, #1
    5150:	2300      	moveq	r3, #0
    5152:	b2db      	uxtb	r3, r3
    5154:	461a      	mov	r2, r3
    5156:	4b46      	ldr	r3, [pc, #280]	; (5270 <vendor_request_handler+0xad4>)
    5158:	611a      	str	r2, [r3, #16]
		break;
    515a:	e082      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_POLL:
		p = dequeue();
    515c:	f003 fa6c 	bl	8638 <dequeue>
    5160:	6478      	str	r0, [r7, #68]	; 0x44
		if (p != NULL) {
    5162:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5164:	2b00      	cmp	r3, #0
    5166:	d008      	beq.n	517a <vendor_request_handler+0x9de>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    5168:	6878      	ldr	r0, [r7, #4]
    516a:	6c79      	ldr	r1, [r7, #68]	; 0x44
    516c:	2240      	movs	r2, #64	; 0x40
    516e:	f006 fa6f 	bl	b650 <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    5172:	683b      	ldr	r3, [r7, #0]
    5174:	2240      	movs	r2, #64	; 0x40
    5176:	601a      	str	r2, [r3, #0]
		} else {
			data[0] = 0;
			*data_len = 1;
		}
		break;
    5178:	e073      	b.n	5262 <vendor_request_handler+0xac6>
		p = dequeue();
		if (p != NULL) {
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
			*data_len = sizeof(usb_pkt_rx);
		} else {
			data[0] = 0;
    517a:	687b      	ldr	r3, [r7, #4]
    517c:	2200      	movs	r2, #0
    517e:	701a      	strb	r2, [r3, #0]
			*data_len = 1;
    5180:	683b      	ldr	r3, [r7, #0]
    5182:	2201      	movs	r2, #1
    5184:	601a      	str	r2, [r3, #0]
		}
		break;
    5186:	e06c      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    5188:	683b      	ldr	r3, [r7, #0]
    518a:	2200      	movs	r2, #0
    518c:	601a      	str	r2, [r3, #0]

		hop_mode = HOP_NONE;
    518e:	4b39      	ldr	r3, [pc, #228]	; (5274 <vendor_request_handler+0xad8>)
    5190:	2200      	movs	r2, #0
    5192:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_PROMISC_LE;
    5194:	4b38      	ldr	r3, [pc, #224]	; (5278 <vendor_request_handler+0xadc>)
    5196:	220a      	movs	r2, #10
    5198:	701a      	strb	r2, [r3, #0]

		queue_init();
    519a:	f003 fa0d 	bl	85b8 <queue_init>
		cs_threshold_calc_and_set();
    519e:	f7ff fa87 	bl	46b0 <cs_threshold_calc_and_set>
		break;
    51a2:	e05e      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    51a4:	68bb      	ldr	r3, [r7, #8]
    51a6:	881b      	ldrh	r3, [r3, #0]
    51a8:	b2db      	uxtb	r3, r3
    51aa:	4618      	mov	r0, r3
    51ac:	f004 fc66 	bl	9a7c <cc2400_get>
    51b0:	4603      	mov	r3, r0
    51b2:	877b      	strh	r3, [r7, #58]	; 0x3a
		data[0] = (reg_val >> 8) & 0xff;
    51b4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    51b6:	0a1b      	lsrs	r3, r3, #8
    51b8:	b29b      	uxth	r3, r3
    51ba:	b2da      	uxtb	r2, r3
    51bc:	687b      	ldr	r3, [r7, #4]
    51be:	701a      	strb	r2, [r3, #0]
		data[1] = reg_val & 0xff;
    51c0:	687b      	ldr	r3, [r7, #4]
    51c2:	3301      	adds	r3, #1
    51c4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
    51c6:	b2d2      	uxtb	r2, r2
    51c8:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    51ca:	683b      	ldr	r3, [r7, #0]
    51cc:	2202      	movs	r2, #2
    51ce:	601a      	str	r2, [r3, #0]
		break;
    51d0:	e047      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    51d2:	68bb      	ldr	r3, [r7, #8]
    51d4:	881b      	ldrh	r3, [r3, #0]
    51d6:	b2da      	uxtb	r2, r3
    51d8:	68bb      	ldr	r3, [r7, #8]
    51da:	3302      	adds	r3, #2
    51dc:	881b      	ldrh	r3, [r3, #0]
    51de:	4610      	mov	r0, r2
    51e0:	4619      	mov	r1, r3
    51e2:	f004 fc61 	bl	9aa8 <cc2400_set>
		break;
    51e6:	e03c      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SLAVE:
		memcpy(slave_mac_address, data, 6);
    51e8:	4824      	ldr	r0, [pc, #144]	; (527c <vendor_request_handler+0xae0>)
    51ea:	6879      	ldr	r1, [r7, #4]
    51ec:	2206      	movs	r2, #6
    51ee:	f006 fa2f 	bl	b650 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    51f2:	4b21      	ldr	r3, [pc, #132]	; (5278 <vendor_request_handler+0xadc>)
    51f4:	220c      	movs	r2, #12
    51f6:	701a      	strb	r2, [r3, #0]
		break;
    51f8:	e033      	b.n	5262 <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    51fa:	687b      	ldr	r3, [r7, #4]
    51fc:	795a      	ldrb	r2, [r3, #5]
    51fe:	4b1c      	ldr	r3, [pc, #112]	; (5270 <vendor_request_handler+0xad4>)
    5200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		le.target[1] = data[4];
    5204:	687b      	ldr	r3, [r7, #4]
    5206:	791a      	ldrb	r2, [r3, #4]
    5208:	4b19      	ldr	r3, [pc, #100]	; (5270 <vendor_request_handler+0xad4>)
    520a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		le.target[2] = data[3];
    520e:	687b      	ldr	r3, [r7, #4]
    5210:	78da      	ldrb	r2, [r3, #3]
    5212:	4b17      	ldr	r3, [pc, #92]	; (5270 <vendor_request_handler+0xad4>)
    5214:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		le.target[3] = data[2];
    5218:	687b      	ldr	r3, [r7, #4]
    521a:	789a      	ldrb	r2, [r3, #2]
    521c:	4b14      	ldr	r3, [pc, #80]	; (5270 <vendor_request_handler+0xad4>)
    521e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		le.target[4] = data[1];
    5222:	687b      	ldr	r3, [r7, #4]
    5224:	785a      	ldrb	r2, [r3, #1]
    5226:	4b12      	ldr	r3, [pc, #72]	; (5270 <vendor_request_handler+0xad4>)
    5228:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		le.target[5] = data[0];
    522c:	687b      	ldr	r3, [r7, #4]
    522e:	781a      	ldrb	r2, [r3, #0]
    5230:	4b0f      	ldr	r3, [pc, #60]	; (5270 <vendor_request_handler+0xad4>)
    5232:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		le.target_set = 1;
    5236:	4b0e      	ldr	r3, [pc, #56]	; (5270 <vendor_request_handler+0xad4>)
    5238:	2201      	movs	r2, #1
    523a:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    523c:	e011      	b.n	5262 <vendor_request_handler+0xac6>

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    523e:	68bb      	ldr	r3, [r7, #8]
    5240:	881b      	ldrh	r3, [r3, #0]
    5242:	b2da      	uxtb	r2, r3
    5244:	4b0e      	ldr	r3, [pc, #56]	; (5280 <vendor_request_handler+0xae4>)
    5246:	701a      	strb	r2, [r3, #0]
		break;
    5248:	e00b      	b.n	5262 <vendor_request_handler+0xac6>
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    524a:	4b0b      	ldr	r3, [pc, #44]	; (5278 <vendor_request_handler+0xadc>)
    524c:	220d      	movs	r2, #13
    524e:	701a      	strb	r2, [r3, #0]
		ego_mode = request_params[0];
    5250:	68bb      	ldr	r3, [r7, #8]
    5252:	881b      	ldrh	r3, [r3, #0]
    5254:	b2da      	uxtb	r2, r3
    5256:	4b0b      	ldr	r3, [pc, #44]	; (5284 <vendor_request_handler+0xae8>)
    5258:	701a      	strb	r2, [r3, #0]
		break;
    525a:	e002      	b.n	5262 <vendor_request_handler+0xac6>

	default:
		return 0;
    525c:	2300      	movs	r3, #0
    525e:	e001      	b.n	5264 <vendor_request_handler+0xac8>
		le.target_set = 1;
		break;

	case UBERTOOTH_DO_SOMETHING:
		// do something! just don't commit anything here
		break;
    5260:	bf00      	nop
		break;

	default:
		return 0;
	}
	return 1;
    5262:	2301      	movs	r3, #1
}
    5264:	4618      	mov	r0, r3
    5266:	3754      	adds	r7, #84	; 0x54
    5268:	46bd      	mov	sp, r7
    526a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    526e:	bf00      	nop
    5270:	10000458 	.word	0x10000458
    5274:	1000097c 	.word	0x1000097c
    5278:	10000a3f 	.word	0x10000a3f
    527c:	1000098c 	.word	0x1000098c
    5280:	10000a40 	.word	0x10000a40
    5284:	10000a41 	.word	0x10000a41

00005288 <clkn_init>:

static void clkn_init()
{
    5288:	b480      	push	{r7}
    528a:	af00      	add	r7, sp, #0
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    528c:	4b0c      	ldr	r3, [pc, #48]	; (52c0 <clkn_init+0x38>)
    528e:	2202      	movs	r2, #2
    5290:	601a      	str	r2, [r3, #0]
	clkn = 0;
    5292:	4b0c      	ldr	r3, [pc, #48]	; (52c4 <clkn_init+0x3c>)
    5294:	2200      	movs	r2, #0
    5296:	601a      	str	r2, [r3, #0]
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    5298:	4b0b      	ldr	r3, [pc, #44]	; (52c8 <clkn_init+0x40>)
    529a:	2204      	movs	r2, #4
    529c:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    529e:	4b0b      	ldr	r3, [pc, #44]	; (52cc <clkn_init+0x44>)
    52a0:	f640 4234 	movw	r2, #3124	; 0xc34
    52a4:	601a      	str	r2, [r3, #0]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    52a6:	4b0a      	ldr	r3, [pc, #40]	; (52d0 <clkn_init+0x48>)
    52a8:	2203      	movs	r2, #3
    52aa:	601a      	str	r2, [r3, #0]
	ISER0 = ISER0_ISE_TIMER0;
    52ac:	4b09      	ldr	r3, [pc, #36]	; (52d4 <clkn_init+0x4c>)
    52ae:	2202      	movs	r2, #2
    52b0:	601a      	str	r2, [r3, #0]

	/* start timer */
	T0TCR = TCR_Counter_Enable;
    52b2:	4b03      	ldr	r3, [pc, #12]	; (52c0 <clkn_init+0x38>)
    52b4:	2201      	movs	r2, #1
    52b6:	601a      	str	r2, [r3, #0]
}
    52b8:	46bd      	mov	sp, r7
    52ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    52be:	4770      	bx	lr
    52c0:	40004004 	.word	0x40004004
    52c4:	10000be4 	.word	0x10000be4
    52c8:	4000400c 	.word	0x4000400c
    52cc:	40004018 	.word	0x40004018
    52d0:	40004014 	.word	0x40004014
    52d4:	e000e100 	.word	0xe000e100

000052d8 <TIMER0_IRQHandler>:

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    52d8:	b480      	push	{r7}
    52da:	b083      	sub	sp, #12
    52dc:	af00      	add	r7, sp, #0
	// Use non-volatile working register to shave off a couple instructions
	u32 next;
	u32 le_clk;

	if (T0IR & TIR_MR0_Interrupt) {
    52de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    52e2:	681b      	ldr	r3, [r3, #0]
    52e4:	f003 0301 	and.w	r3, r3, #1
    52e8:	2b00      	cmp	r3, #0
    52ea:	d06d      	beq.n	53c8 <TIMER0_IRQHandler+0xf0>

		clkn++;
    52ec:	4b39      	ldr	r3, [pc, #228]	; (53d4 <TIMER0_IRQHandler+0xfc>)
    52ee:	681b      	ldr	r3, [r3, #0]
    52f0:	3301      	adds	r3, #1
    52f2:	4a38      	ldr	r2, [pc, #224]	; (53d4 <TIMER0_IRQHandler+0xfc>)
    52f4:	6013      	str	r3, [r2, #0]
		next = clkn;
    52f6:	4b37      	ldr	r3, [pc, #220]	; (53d4 <TIMER0_IRQHandler+0xfc>)
    52f8:	681b      	ldr	r3, [r3, #0]
    52fa:	607b      	str	r3, [r7, #4]
		le_clk = (next - le.conn_epoch) & 0x03;
    52fc:	4b36      	ldr	r3, [pc, #216]	; (53d8 <TIMER0_IRQHandler+0x100>)
    52fe:	699b      	ldr	r3, [r3, #24]
    5300:	687a      	ldr	r2, [r7, #4]
    5302:	1ad3      	subs	r3, r2, r3
    5304:	f003 0303 	and.w	r3, r3, #3
    5308:	603b      	str	r3, [r7, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    530a:	4b34      	ldr	r3, [pc, #208]	; (53dc <TIMER0_IRQHandler+0x104>)
    530c:	781b      	ldrb	r3, [r3, #0]
    530e:	2b00      	cmp	r3, #0
    5310:	d003      	beq.n	531a <TIMER0_IRQHandler+0x42>
    5312:	4b32      	ldr	r3, [pc, #200]	; (53dc <TIMER0_IRQHandler+0x104>)
    5314:	781b      	ldrb	r3, [r3, #0]
    5316:	2b01      	cmp	r3, #1
    5318:	d109      	bne.n	532e <TIMER0_IRQHandler+0x56>
			if ((next & 0x7f) == 0)
    531a:	687b      	ldr	r3, [r7, #4]
    531c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5320:	2b00      	cmp	r3, #0
    5322:	d103      	bne.n	532c <TIMER0_IRQHandler+0x54>
				do_hop = 1;
    5324:	4b2e      	ldr	r3, [pc, #184]	; (53e0 <TIMER0_IRQHandler+0x108>)
    5326:	2201      	movs	r2, #1
    5328:	701a      	strb	r2, [r3, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
			if ((next & 0x7f) == 0)
    532a:	e037      	b.n	539c <TIMER0_IRQHandler+0xc4>
    532c:	e036      	b.n	539c <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    532e:	4b2b      	ldr	r3, [pc, #172]	; (53dc <TIMER0_IRQHandler+0x104>)
    5330:	781b      	ldrb	r3, [r3, #0]
    5332:	2b02      	cmp	r3, #2
    5334:	d108      	bne.n	5348 <TIMER0_IRQHandler+0x70>
			if ((next & 0x1) == 0)
    5336:	687b      	ldr	r3, [r7, #4]
    5338:	f003 0301 	and.w	r3, r3, #1
    533c:	2b00      	cmp	r3, #0
    533e:	d12d      	bne.n	539c <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
    5340:	4b27      	ldr	r3, [pc, #156]	; (53e0 <TIMER0_IRQHandler+0x108>)
    5342:	2201      	movs	r2, #1
    5344:	701a      	strb	r2, [r3, #0]
    5346:	e029      	b.n	539c <TIMER0_IRQHandler+0xc4>
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    5348:	4b24      	ldr	r3, [pc, #144]	; (53dc <TIMER0_IRQHandler+0x104>)
    534a:	781b      	ldrb	r3, [r3, #0]
    534c:	2b03      	cmp	r3, #3
    534e:	d125      	bne.n	539c <TIMER0_IRQHandler+0xc4>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    5350:	4b21      	ldr	r3, [pc, #132]	; (53d8 <TIMER0_IRQHandler+0x100>)
    5352:	7d1b      	ldrb	r3, [r3, #20]
    5354:	2b03      	cmp	r3, #3
    5356:	d121      	bne.n	539c <TIMER0_IRQHandler+0xc4>
    5358:	683b      	ldr	r3, [r7, #0]
    535a:	2b00      	cmp	r3, #0
    535c:	d11e      	bne.n	539c <TIMER0_IRQHandler+0xc4>
				--le.interval_timer;
    535e:	4b1e      	ldr	r3, [pc, #120]	; (53d8 <TIMER0_IRQHandler+0x100>)
    5360:	8b9b      	ldrh	r3, [r3, #28]
    5362:	b29b      	uxth	r3, r3
    5364:	3b01      	subs	r3, #1
    5366:	b29a      	uxth	r2, r3
    5368:	4b1b      	ldr	r3, [pc, #108]	; (53d8 <TIMER0_IRQHandler+0x100>)
    536a:	839a      	strh	r2, [r3, #28]
				if (le.interval_timer == 0) {
    536c:	4b1a      	ldr	r3, [pc, #104]	; (53d8 <TIMER0_IRQHandler+0x100>)
    536e:	8b9b      	ldrh	r3, [r3, #28]
    5370:	b29b      	uxth	r3, r3
    5372:	2b00      	cmp	r3, #0
    5374:	d10e      	bne.n	5394 <TIMER0_IRQHandler+0xbc>
					do_hop = 1;
    5376:	4b1a      	ldr	r3, [pc, #104]	; (53e0 <TIMER0_IRQHandler+0x108>)
    5378:	2201      	movs	r2, #1
    537a:	701a      	strb	r2, [r3, #0]
					++le.conn_count;
    537c:	4b16      	ldr	r3, [pc, #88]	; (53d8 <TIMER0_IRQHandler+0x100>)
    537e:	8c1b      	ldrh	r3, [r3, #32]
    5380:	b29b      	uxth	r3, r3
    5382:	3301      	adds	r3, #1
    5384:	b29a      	uxth	r2, r3
    5386:	4b14      	ldr	r3, [pc, #80]	; (53d8 <TIMER0_IRQHandler+0x100>)
    5388:	841a      	strh	r2, [r3, #32]
					le.interval_timer = le.conn_interval;
    538a:	4b13      	ldr	r3, [pc, #76]	; (53d8 <TIMER0_IRQHandler+0x100>)
    538c:	8bda      	ldrh	r2, [r3, #30]
    538e:	4b12      	ldr	r3, [pc, #72]	; (53d8 <TIMER0_IRQHandler+0x100>)
    5390:	839a      	strh	r2, [r3, #28]
    5392:	e003      	b.n	539c <TIMER0_IRQHandler+0xc4>
				} else {
					TXLED_CLR; // hack!
    5394:	4b13      	ldr	r3, [pc, #76]	; (53e4 <TIMER0_IRQHandler+0x10c>)
    5396:	f44f 7280 	mov.w	r2, #256	; 0x100
    539a:	601a      	str	r2, [r3, #0]
				}
			}
		}

		/* Keepalive trigger fires at 3200/2^9 = 6.25 Hz */
		if ((next & 0x1ff) == 0)
    539c:	687b      	ldr	r3, [r7, #4]
    539e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    53a2:	2b00      	cmp	r3, #0
    53a4:	d102      	bne.n	53ac <TIMER0_IRQHandler+0xd4>
			keepalive_trigger = 1;
    53a6:	4b10      	ldr	r3, [pc, #64]	; (53e8 <TIMER0_IRQHandler+0x110>)
    53a8:	2201      	movs	r2, #1
    53aa:	701a      	strb	r2, [r3, #0]

		/* Ack interrupt */
		T0MR0 = 3124 - clock_trim;
    53ac:	4a0f      	ldr	r2, [pc, #60]	; (53ec <TIMER0_IRQHandler+0x114>)
    53ae:	4b10      	ldr	r3, [pc, #64]	; (53f0 <TIMER0_IRQHandler+0x118>)
    53b0:	681b      	ldr	r3, [r3, #0]
    53b2:	f5c3 6343 	rsb	r3, r3, #3120	; 0xc30
    53b6:	3304      	adds	r3, #4
    53b8:	6013      	str	r3, [r2, #0]
		clock_trim = 0;
    53ba:	4b0d      	ldr	r3, [pc, #52]	; (53f0 <TIMER0_IRQHandler+0x118>)
    53bc:	2200      	movs	r2, #0
    53be:	601a      	str	r2, [r3, #0]
		T0IR = TIR_MR0_Interrupt;
    53c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    53c4:	2201      	movs	r2, #1
    53c6:	601a      	str	r2, [r3, #0]
	}
}
    53c8:	370c      	adds	r7, #12
    53ca:	46bd      	mov	sp, r7
    53cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    53d0:	4770      	bx	lr
    53d2:	bf00      	nop
    53d4:	10000be4 	.word	0x10000be4
    53d8:	10000458 	.word	0x10000458
    53dc:	1000097c 	.word	0x1000097c
    53e0:	1000097d 	.word	0x1000097d
    53e4:	2009c03c 	.word	0x2009c03c
    53e8:	10000be0 	.word	0x10000be0
    53ec:	40004018 	.word	0x40004018
    53f0:	10000984 	.word	0x10000984

000053f4 <EINT3_IRQHandler>:

/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
//static volatile u8 txledstate = 1;
void EINT3_IRQHandler()
{
    53f4:	b480      	push	{r7}
    53f6:	af00      	add	r7, sp, #0
	/* TODO - check specific source of shared interrupt */
	IO2IntClr = PIN_GIO6;            // clear interrupt
    53f8:	4b0b      	ldr	r3, [pc, #44]	; (5428 <EINT3_IRQHandler+0x34>)
    53fa:	2204      	movs	r2, #4
    53fc:	601a      	str	r2, [r3, #0]
	cs_trigger = 1;                  // signal trigger
    53fe:	4b0b      	ldr	r3, [pc, #44]	; (542c <EINT3_IRQHandler+0x38>)
    5400:	2201      	movs	r2, #1
    5402:	701a      	strb	r2, [r3, #0]
	cs_timestamp = CLK100NS;         // time at trigger
    5404:	4b0a      	ldr	r3, [pc, #40]	; (5430 <EINT3_IRQHandler+0x3c>)
    5406:	681b      	ldr	r3, [r3, #0]
    5408:	f3c3 0313 	ubfx	r3, r3, #0, #20
    540c:	f640 4235 	movw	r2, #3125	; 0xc35
    5410:	fb02 f203 	mul.w	r2, r2, r3
    5414:	4b07      	ldr	r3, [pc, #28]	; (5434 <EINT3_IRQHandler+0x40>)
    5416:	681b      	ldr	r3, [r3, #0]
    5418:	4413      	add	r3, r2
    541a:	4a07      	ldr	r2, [pc, #28]	; (5438 <EINT3_IRQHandler+0x44>)
    541c:	6013      	str	r3, [r2, #0]
}
    541e:	46bd      	mov	sp, r7
    5420:	f85d 7b04 	ldr.w	r7, [sp], #4
    5424:	4770      	bx	lr
    5426:	bf00      	nop
    5428:	400280ac 	.word	0x400280ac
    542c:	100010c0 	.word	0x100010c0
    5430:	10000be4 	.word	0x10000be4
    5434:	40004008 	.word	0x40004008
    5438:	10000bdc 	.word	0x10000bdc
    543c:	00000000 	.word	0x00000000

00005440 <msleep>:

/* Sleep (busy wait) for 'millis' milliseconds. The 'wait' routines in
 * ubertooth.c are matched to the clock setup at boot time and can not
 * be used while the board is running at 100MHz. */
static void msleep(uint32_t millis)
{
    5440:	b5b0      	push	{r4, r5, r7, lr}
    5442:	b084      	sub	sp, #16
    5444:	af00      	add	r7, sp, #0
    5446:	6078      	str	r0, [r7, #4]
	uint32_t stop_at = clkn + millis * 312.5 / 1000;  // millis -> clkn ticks
    5448:	4b1b      	ldr	r3, [pc, #108]	; (54b8 <msleep+0x78>)
    544a:	681b      	ldr	r3, [r3, #0]
    544c:	4618      	mov	r0, r3
    544e:	f005 fe25 	bl	b09c <__aeabi_ui2d>
    5452:	4604      	mov	r4, r0
    5454:	460d      	mov	r5, r1
    5456:	6878      	ldr	r0, [r7, #4]
    5458:	f005 fe20 	bl	b09c <__aeabi_ui2d>
    545c:	4602      	mov	r2, r0
    545e:	460b      	mov	r3, r1
    5460:	4610      	mov	r0, r2
    5462:	4619      	mov	r1, r3
    5464:	a312      	add	r3, pc, #72	; (adr r3, 54b0 <msleep+0x70>)
    5466:	e9d3 2300 	ldrd	r2, r3, [r3]
    546a:	f005 fe8d 	bl	b188 <__aeabi_dmul>
    546e:	4602      	mov	r2, r0
    5470:	460b      	mov	r3, r1
    5472:	4610      	mov	r0, r2
    5474:	4619      	mov	r1, r3
    5476:	f04f 0200 	mov.w	r2, #0
    547a:	4b10      	ldr	r3, [pc, #64]	; (54bc <msleep+0x7c>)
    547c:	f005 ffae 	bl	b3dc <__aeabi_ddiv>
    5480:	4602      	mov	r2, r0
    5482:	460b      	mov	r3, r1
    5484:	4620      	mov	r0, r4
    5486:	4629      	mov	r1, r5
    5488:	f005 fccc 	bl	ae24 <__adddf3>
    548c:	4602      	mov	r2, r0
    548e:	460b      	mov	r3, r1
    5490:	4610      	mov	r0, r2
    5492:	4619      	mov	r1, r3
    5494:	f006 f88a 	bl	b5ac <__aeabi_d2uiz>
    5498:	4603      	mov	r3, r0
    549a:	60fb      	str	r3, [r7, #12]
	do { } while (clkn < stop_at);                   // TODO: handle wrapping
    549c:	4b06      	ldr	r3, [pc, #24]	; (54b8 <msleep+0x78>)
    549e:	681a      	ldr	r2, [r3, #0]
    54a0:	68fb      	ldr	r3, [r7, #12]
    54a2:	429a      	cmp	r2, r3
    54a4:	d3fa      	bcc.n	549c <msleep+0x5c>
}
    54a6:	3710      	adds	r7, #16
    54a8:	46bd      	mov	sp, r7
    54aa:	bdb0      	pop	{r4, r5, r7, pc}
    54ac:	f3af 8000 	nop.w
    54b0:	00000000 	.word	0x00000000
    54b4:	40738800 	.word	0x40738800
    54b8:	10000be4 	.word	0x10000be4
    54bc:	408f4000 	.word	0x408f4000

000054c0 <dma_init>:

static void dma_init()
{
    54c0:	b480      	push	{r7}
    54c2:	af00      	add	r7, sp, #0
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    54c4:	4a3f      	ldr	r2, [pc, #252]	; (55c4 <dma_init+0x104>)
    54c6:	4b3f      	ldr	r3, [pc, #252]	; (55c4 <dma_init+0x104>)
    54c8:	681b      	ldr	r3, [r3, #0]
    54ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    54ce:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    54d0:	4b3d      	ldr	r3, [pc, #244]	; (55c8 <dma_init+0x108>)
    54d2:	2200      	movs	r2, #0
    54d4:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    54d6:	4b3d      	ldr	r3, [pc, #244]	; (55cc <dma_init+0x10c>)
    54d8:	2200      	movs	r2, #0
    54da:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    54dc:	4b3c      	ldr	r3, [pc, #240]	; (55d0 <dma_init+0x110>)
    54de:	2200      	movs	r2, #0
    54e0:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    54e2:	4b3c      	ldr	r3, [pc, #240]	; (55d4 <dma_init+0x114>)
    54e4:	2200      	movs	r2, #0
    54e6:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    54e8:	4b3b      	ldr	r3, [pc, #236]	; (55d8 <dma_init+0x118>)
    54ea:	2200      	movs	r2, #0
    54ec:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    54ee:	4b3b      	ldr	r3, [pc, #236]	; (55dc <dma_init+0x11c>)
    54f0:	2200      	movs	r2, #0
    54f2:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    54f4:	4b3a      	ldr	r3, [pc, #232]	; (55e0 <dma_init+0x120>)
    54f6:	2200      	movs	r2, #0
    54f8:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    54fa:	4b3a      	ldr	r3, [pc, #232]	; (55e4 <dma_init+0x124>)
    54fc:	2200      	movs	r2, #0
    54fe:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5500:	4b39      	ldr	r3, [pc, #228]	; (55e8 <dma_init+0x128>)
    5502:	22ff      	movs	r2, #255	; 0xff
    5504:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5506:	4b39      	ldr	r3, [pc, #228]	; (55ec <dma_init+0x12c>)
    5508:	22ff      	movs	r2, #255	; 0xff
    550a:	601a      	str	r2, [r3, #0]

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
    550c:	4b38      	ldr	r3, [pc, #224]	; (55f0 <dma_init+0x130>)
    550e:	4a39      	ldr	r2, [pc, #228]	; (55f4 <dma_init+0x134>)
    5510:	601a      	str	r2, [r3, #0]
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
    5512:	4a39      	ldr	r2, [pc, #228]	; (55f8 <dma_init+0x138>)
    5514:	4b36      	ldr	r3, [pc, #216]	; (55f0 <dma_init+0x130>)
    5516:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
    5518:	4a38      	ldr	r2, [pc, #224]	; (55fc <dma_init+0x13c>)
    551a:	4b35      	ldr	r3, [pc, #212]	; (55f0 <dma_init+0x130>)
    551c:	609a      	str	r2, [r3, #8]
	rx_dma_lli1.control = (DMA_SIZE) |
    551e:	4b34      	ldr	r3, [pc, #208]	; (55f0 <dma_init+0x130>)
    5520:	4a37      	ldr	r2, [pc, #220]	; (5600 <dma_init+0x140>)
    5522:	60da      	str	r2, [r3, #12]
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
    5524:	4b35      	ldr	r3, [pc, #212]	; (55fc <dma_init+0x13c>)
    5526:	4a33      	ldr	r2, [pc, #204]	; (55f4 <dma_init+0x134>)
    5528:	601a      	str	r2, [r3, #0]
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
    552a:	4a36      	ldr	r2, [pc, #216]	; (5604 <dma_init+0x144>)
    552c:	4b33      	ldr	r3, [pc, #204]	; (55fc <dma_init+0x13c>)
    552e:	605a      	str	r2, [r3, #4]
	rx_dma_lli2.next_lli = (u32)&rx_dma_lli1;
    5530:	4a2f      	ldr	r2, [pc, #188]	; (55f0 <dma_init+0x130>)
    5532:	4b32      	ldr	r3, [pc, #200]	; (55fc <dma_init+0x13c>)
    5534:	609a      	str	r2, [r3, #8]
	rx_dma_lli2.control = (DMA_SIZE) |
    5536:	4b31      	ldr	r3, [pc, #196]	; (55fc <dma_init+0x13c>)
    5538:	4a31      	ldr	r2, [pc, #196]	; (5600 <dma_init+0x140>)
    553a:	60da      	str	r2, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* disable DMA interrupts */
	ICER0 = ICER0_ICE_DMA;
    553c:	4b32      	ldr	r3, [pc, #200]	; (5608 <dma_init+0x148>)
    553e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5542:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    5544:	4b31      	ldr	r3, [pc, #196]	; (560c <dma_init+0x14c>)
    5546:	2201      	movs	r2, #1
    5548:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    554a:	bf00      	nop
    554c:	4b2f      	ldr	r3, [pc, #188]	; (560c <dma_init+0x14c>)
    554e:	681b      	ldr	r3, [r3, #0]
    5550:	f003 0301 	and.w	r3, r3, #1
    5554:	2b00      	cmp	r3, #0
    5556:	d0f9      	beq.n	554c <dma_init+0x8c>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    5558:	4a2d      	ldr	r2, [pc, #180]	; (5610 <dma_init+0x150>)
    555a:	4b25      	ldr	r3, [pc, #148]	; (55f0 <dma_init+0x130>)
    555c:	681b      	ldr	r3, [r3, #0]
    555e:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    5560:	4a2c      	ldr	r2, [pc, #176]	; (5614 <dma_init+0x154>)
    5562:	4b23      	ldr	r3, [pc, #140]	; (55f0 <dma_init+0x130>)
    5564:	685b      	ldr	r3, [r3, #4]
    5566:	6013      	str	r3, [r2, #0]
	DMACC0LLI = rx_dma_lli1.next_lli;
    5568:	4a2b      	ldr	r2, [pc, #172]	; (5618 <dma_init+0x158>)
    556a:	4b21      	ldr	r3, [pc, #132]	; (55f0 <dma_init+0x130>)
    556c:	689b      	ldr	r3, [r3, #8]
    556e:	6013      	str	r3, [r2, #0]
	DMACC0Control = rx_dma_lli1.control;
    5570:	4a2a      	ldr	r2, [pc, #168]	; (561c <dma_init+0x15c>)
    5572:	4b1f      	ldr	r3, [pc, #124]	; (55f0 <dma_init+0x130>)
    5574:	68db      	ldr	r3, [r3, #12]
    5576:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    5578:	4b13      	ldr	r3, [pc, #76]	; (55c8 <dma_init+0x108>)
    557a:	f24d 0206 	movw	r2, #53254	; 0xd006
    557e:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5580:	4b27      	ldr	r3, [pc, #156]	; (5620 <dma_init+0x160>)
    5582:	681b      	ldr	r3, [r3, #0]
    5584:	0d1b      	lsrs	r3, r3, #20
    5586:	b2db      	uxtb	r3, r3
    5588:	4a26      	ldr	r2, [pc, #152]	; (5624 <dma_init+0x164>)
    558a:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    558c:	4b24      	ldr	r3, [pc, #144]	; (5620 <dma_init+0x160>)
    558e:	681b      	ldr	r3, [r3, #0]
    5590:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5594:	f640 4235 	movw	r2, #3125	; 0xc35
    5598:	fb02 f203 	mul.w	r2, r2, r3
    559c:	4b22      	ldr	r3, [pc, #136]	; (5628 <dma_init+0x168>)
    559e:	681b      	ldr	r3, [r3, #0]
    55a0:	4413      	add	r3, r2
    55a2:	4a22      	ldr	r2, [pc, #136]	; (562c <dma_init+0x16c>)
    55a4:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    55a6:	4b22      	ldr	r3, [pc, #136]	; (5630 <dma_init+0x170>)
    55a8:	881b      	ldrh	r3, [r3, #0]
    55aa:	b29a      	uxth	r2, r3
    55ac:	4b21      	ldr	r3, [pc, #132]	; (5634 <dma_init+0x174>)
    55ae:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    55b0:	4b21      	ldr	r3, [pc, #132]	; (5638 <dma_init+0x178>)
    55b2:	2200      	movs	r2, #0
    55b4:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    55b6:	4b21      	ldr	r3, [pc, #132]	; (563c <dma_init+0x17c>)
    55b8:	2200      	movs	r2, #0
    55ba:	601a      	str	r2, [r3, #0]
}
    55bc:	46bd      	mov	sp, r7
    55be:	f85d 7b04 	ldr.w	r7, [sp], #4
    55c2:	4770      	bx	lr
    55c4:	400fc0c4 	.word	0x400fc0c4
    55c8:	50004110 	.word	0x50004110
    55cc:	50004130 	.word	0x50004130
    55d0:	50004150 	.word	0x50004150
    55d4:	50004170 	.word	0x50004170
    55d8:	50004190 	.word	0x50004190
    55dc:	500041b0 	.word	0x500041b0
    55e0:	500041d0 	.word	0x500041d0
    55e4:	500041f0 	.word	0x500041f0
    55e8:	50004008 	.word	0x50004008
    55ec:	50004010 	.word	0x50004010
    55f0:	1000106c 	.word	0x1000106c
    55f4:	40030008 	.word	0x40030008
    55f8:	10001088 	.word	0x10001088
    55fc:	10000bcc 	.word	0x10000bcc
    5600:	88009032 	.word	0x88009032
    5604:	10001034 	.word	0x10001034
    5608:	e000e180 	.word	0xe000e180
    560c:	50004030 	.word	0x50004030
    5610:	50004100 	.word	0x50004100
    5614:	50004104 	.word	0x50004104
    5618:	50004108 	.word	0x50004108
    561c:	5000410c 	.word	0x5000410c
    5620:	10000be4 	.word	0x10000be4
    5624:	10000bec 	.word	0x10000bec
    5628:	40004008 	.word	0x40004008
    562c:	10001028 	.word	0x10001028
    5630:	1000049c 	.word	0x1000049c
    5634:	1000098a 	.word	0x1000098a
    5638:	10000b00 	.word	0x10000b00
    563c:	100010bc 	.word	0x100010bc

00005640 <dma_init_le>:

static void dma_init_le()
{
    5640:	b480      	push	{r7}
    5642:	b083      	sub	sp, #12
    5644:	af00      	add	r7, sp, #0
	int i;

	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    5646:	4a4b      	ldr	r2, [pc, #300]	; (5774 <dma_init_le+0x134>)
    5648:	4b4a      	ldr	r3, [pc, #296]	; (5774 <dma_init_le+0x134>)
    564a:	681b      	ldr	r3, [r3, #0]
    564c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    5650:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    5652:	4b49      	ldr	r3, [pc, #292]	; (5778 <dma_init_le+0x138>)
    5654:	2200      	movs	r2, #0
    5656:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5658:	4b48      	ldr	r3, [pc, #288]	; (577c <dma_init_le+0x13c>)
    565a:	2200      	movs	r2, #0
    565c:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    565e:	4b48      	ldr	r3, [pc, #288]	; (5780 <dma_init_le+0x140>)
    5660:	2200      	movs	r2, #0
    5662:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5664:	4b47      	ldr	r3, [pc, #284]	; (5784 <dma_init_le+0x144>)
    5666:	2200      	movs	r2, #0
    5668:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    566a:	4b47      	ldr	r3, [pc, #284]	; (5788 <dma_init_le+0x148>)
    566c:	2200      	movs	r2, #0
    566e:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5670:	4b46      	ldr	r3, [pc, #280]	; (578c <dma_init_le+0x14c>)
    5672:	2200      	movs	r2, #0
    5674:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    5676:	4b46      	ldr	r3, [pc, #280]	; (5790 <dma_init_le+0x150>)
    5678:	2200      	movs	r2, #0
    567a:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    567c:	4b45      	ldr	r3, [pc, #276]	; (5794 <dma_init_le+0x154>)
    567e:	2200      	movs	r2, #0
    5680:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5682:	4b45      	ldr	r3, [pc, #276]	; (5798 <dma_init_le+0x158>)
    5684:	22ff      	movs	r2, #255	; 0xff
    5686:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5688:	4b44      	ldr	r3, [pc, #272]	; (579c <dma_init_le+0x15c>)
    568a:	22ff      	movs	r2, #255	; 0xff
    568c:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    568e:	4b44      	ldr	r3, [pc, #272]	; (57a0 <dma_init_le+0x160>)
    5690:	2201      	movs	r2, #1
    5692:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    5694:	bf00      	nop
    5696:	4b42      	ldr	r3, [pc, #264]	; (57a0 <dma_init_le+0x160>)
    5698:	681b      	ldr	r3, [r3, #0]
    569a:	f003 0301 	and.w	r3, r3, #1
    569e:	2b00      	cmp	r3, #0
    56a0:	d0f9      	beq.n	5696 <dma_init_le+0x56>

	for (i = 0; i < 11; ++i) {
    56a2:	2300      	movs	r3, #0
    56a4:	607b      	str	r3, [r7, #4]
    56a6:	e02a      	b.n	56fe <dma_init_le+0xbe>
		le_dma_lli[i].src = (u32)&(DIO_SSP_DR);
    56a8:	4a3e      	ldr	r2, [pc, #248]	; (57a4 <dma_init_le+0x164>)
    56aa:	687b      	ldr	r3, [r7, #4]
    56ac:	011b      	lsls	r3, r3, #4
    56ae:	4413      	add	r3, r2
    56b0:	4a3d      	ldr	r2, [pc, #244]	; (57a8 <dma_init_le+0x168>)
    56b2:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].dest = (u32)&rxbuf1[4 * i];
    56b4:	687b      	ldr	r3, [r7, #4]
    56b6:	009b      	lsls	r3, r3, #2
    56b8:	4a3c      	ldr	r2, [pc, #240]	; (57ac <dma_init_le+0x16c>)
    56ba:	4413      	add	r3, r2
    56bc:	4619      	mov	r1, r3
    56be:	4a39      	ldr	r2, [pc, #228]	; (57a4 <dma_init_le+0x164>)
    56c0:	687b      	ldr	r3, [r7, #4]
    56c2:	011b      	lsls	r3, r3, #4
    56c4:	4413      	add	r3, r2
    56c6:	6059      	str	r1, [r3, #4]
		le_dma_lli[i].next_lli = i < 10 ? (u32)&le_dma_lli[i+1] : 0;
    56c8:	687b      	ldr	r3, [r7, #4]
    56ca:	2b09      	cmp	r3, #9
    56cc:	dc06      	bgt.n	56dc <dma_init_le+0x9c>
    56ce:	687b      	ldr	r3, [r7, #4]
    56d0:	3301      	adds	r3, #1
    56d2:	011b      	lsls	r3, r3, #4
    56d4:	4a33      	ldr	r2, [pc, #204]	; (57a4 <dma_init_le+0x164>)
    56d6:	4413      	add	r3, r2
    56d8:	461a      	mov	r2, r3
    56da:	e000      	b.n	56de <dma_init_le+0x9e>
    56dc:	2200      	movs	r2, #0
    56de:	4931      	ldr	r1, [pc, #196]	; (57a4 <dma_init_le+0x164>)
    56e0:	687b      	ldr	r3, [r7, #4]
    56e2:	011b      	lsls	r3, r3, #4
    56e4:	440b      	add	r3, r1
    56e6:	3308      	adds	r3, #8
    56e8:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].control = 4 |
    56ea:	4a2e      	ldr	r2, [pc, #184]	; (57a4 <dma_init_le+0x164>)
    56ec:	687b      	ldr	r3, [r7, #4]
    56ee:	011b      	lsls	r3, r3, #4
    56f0:	4413      	add	r3, r2
    56f2:	3308      	adds	r3, #8
    56f4:	4a2e      	ldr	r2, [pc, #184]	; (57b0 <dma_init_le+0x170>)
    56f6:	605a      	str	r2, [r3, #4]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    56f8:	687b      	ldr	r3, [r7, #4]
    56fa:	3301      	adds	r3, #1
    56fc:	607b      	str	r3, [r7, #4]
    56fe:	687b      	ldr	r3, [r7, #4]
    5700:	2b0a      	cmp	r3, #10
    5702:	ddd1      	ble.n	56a8 <dma_init_le+0x68>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    5704:	4a2b      	ldr	r2, [pc, #172]	; (57b4 <dma_init_le+0x174>)
    5706:	4b27      	ldr	r3, [pc, #156]	; (57a4 <dma_init_le+0x164>)
    5708:	681b      	ldr	r3, [r3, #0]
    570a:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    570c:	4a2a      	ldr	r2, [pc, #168]	; (57b8 <dma_init_le+0x178>)
    570e:	4b25      	ldr	r3, [pc, #148]	; (57a4 <dma_init_le+0x164>)
    5710:	685b      	ldr	r3, [r3, #4]
    5712:	6013      	str	r3, [r2, #0]
	DMACC0LLI = le_dma_lli[0].next_lli;
    5714:	4a29      	ldr	r2, [pc, #164]	; (57bc <dma_init_le+0x17c>)
    5716:	4b23      	ldr	r3, [pc, #140]	; (57a4 <dma_init_le+0x164>)
    5718:	689b      	ldr	r3, [r3, #8]
    571a:	6013      	str	r3, [r2, #0]
	DMACC0Control = le_dma_lli[0].control;
    571c:	4a28      	ldr	r2, [pc, #160]	; (57c0 <dma_init_le+0x180>)
    571e:	4b21      	ldr	r3, [pc, #132]	; (57a4 <dma_init_le+0x164>)
    5720:	68db      	ldr	r3, [r3, #12]
    5722:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    5724:	4b14      	ldr	r3, [pc, #80]	; (5778 <dma_init_le+0x138>)
    5726:	f24d 0206 	movw	r2, #53254	; 0xd006
    572a:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    572c:	4b25      	ldr	r3, [pc, #148]	; (57c4 <dma_init_le+0x184>)
    572e:	681b      	ldr	r3, [r3, #0]
    5730:	0d1b      	lsrs	r3, r3, #20
    5732:	b2db      	uxtb	r3, r3
    5734:	4a24      	ldr	r2, [pc, #144]	; (57c8 <dma_init_le+0x188>)
    5736:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    5738:	4b22      	ldr	r3, [pc, #136]	; (57c4 <dma_init_le+0x184>)
    573a:	681b      	ldr	r3, [r3, #0]
    573c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5740:	f640 4235 	movw	r2, #3125	; 0xc35
    5744:	fb02 f203 	mul.w	r2, r2, r3
    5748:	4b20      	ldr	r3, [pc, #128]	; (57cc <dma_init_le+0x18c>)
    574a:	681b      	ldr	r3, [r3, #0]
    574c:	4413      	add	r3, r2
    574e:	4a20      	ldr	r2, [pc, #128]	; (57d0 <dma_init_le+0x190>)
    5750:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    5752:	4b20      	ldr	r3, [pc, #128]	; (57d4 <dma_init_le+0x194>)
    5754:	881b      	ldrh	r3, [r3, #0]
    5756:	b29a      	uxth	r2, r3
    5758:	4b1f      	ldr	r3, [pc, #124]	; (57d8 <dma_init_le+0x198>)
    575a:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    575c:	4b1f      	ldr	r3, [pc, #124]	; (57dc <dma_init_le+0x19c>)
    575e:	2200      	movs	r2, #0
    5760:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    5762:	4b1f      	ldr	r3, [pc, #124]	; (57e0 <dma_init_le+0x1a0>)
    5764:	2200      	movs	r2, #0
    5766:	601a      	str	r2, [r3, #0]
}
    5768:	370c      	adds	r7, #12
    576a:	46bd      	mov	sp, r7
    576c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5770:	4770      	bx	lr
    5772:	bf00      	nop
    5774:	400fc0c4 	.word	0x400fc0c4
    5778:	50004110 	.word	0x50004110
    577c:	50004130 	.word	0x50004130
    5780:	50004150 	.word	0x50004150
    5784:	50004170 	.word	0x50004170
    5788:	50004190 	.word	0x50004190
    578c:	500041b0 	.word	0x500041b0
    5790:	500041d0 	.word	0x500041d0
    5794:	500041f0 	.word	0x500041f0
    5798:	50004008 	.word	0x50004008
    579c:	50004010 	.word	0x50004010
    57a0:	50004030 	.word	0x50004030
    57a4:	10000b08 	.word	0x10000b08
    57a8:	40030008 	.word	0x40030008
    57ac:	10001088 	.word	0x10001088
    57b0:	88001004 	.word	0x88001004
    57b4:	50004100 	.word	0x50004100
    57b8:	50004104 	.word	0x50004104
    57bc:	50004108 	.word	0x50004108
    57c0:	5000410c 	.word	0x5000410c
    57c4:	10000be4 	.word	0x10000be4
    57c8:	10000bec 	.word	0x10000bec
    57cc:	40004008 	.word	0x40004008
    57d0:	10001028 	.word	0x10001028
    57d4:	1000049c 	.word	0x1000049c
    57d8:	1000098a 	.word	0x1000098a
    57dc:	10000b00 	.word	0x10000b00
    57e0:	100010bc 	.word	0x100010bc

000057e4 <bt_stream_dma_handler>:

void bt_stream_dma_handler(void) {
    57e4:	b480      	push	{r7}
    57e6:	af00      	add	r7, sp, #0
	idle_buf_clkn_high = active_buf_clkn_high;
    57e8:	4b25      	ldr	r3, [pc, #148]	; (5880 <bt_stream_dma_handler+0x9c>)
    57ea:	681b      	ldr	r3, [r3, #0]
    57ec:	4a25      	ldr	r2, [pc, #148]	; (5884 <bt_stream_dma_handler+0xa0>)
    57ee:	6013      	str	r3, [r2, #0]
	active_buf_clkn_high = (clkn >> 20) & 0xff;
    57f0:	4b25      	ldr	r3, [pc, #148]	; (5888 <bt_stream_dma_handler+0xa4>)
    57f2:	681b      	ldr	r3, [r3, #0]
    57f4:	0d1b      	lsrs	r3, r3, #20
    57f6:	b2db      	uxtb	r3, r3
    57f8:	4a21      	ldr	r2, [pc, #132]	; (5880 <bt_stream_dma_handler+0x9c>)
    57fa:	6013      	str	r3, [r2, #0]

	idle_buf_clk100ns = active_buf_clk100ns;
    57fc:	4b23      	ldr	r3, [pc, #140]	; (588c <bt_stream_dma_handler+0xa8>)
    57fe:	681b      	ldr	r3, [r3, #0]
    5800:	4a23      	ldr	r2, [pc, #140]	; (5890 <bt_stream_dma_handler+0xac>)
    5802:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    5804:	4b20      	ldr	r3, [pc, #128]	; (5888 <bt_stream_dma_handler+0xa4>)
    5806:	681b      	ldr	r3, [r3, #0]
    5808:	f3c3 0313 	ubfx	r3, r3, #0, #20
    580c:	f640 4235 	movw	r2, #3125	; 0xc35
    5810:	fb02 f203 	mul.w	r2, r2, r3
    5814:	4b1f      	ldr	r3, [pc, #124]	; (5894 <bt_stream_dma_handler+0xb0>)
    5816:	681b      	ldr	r3, [r3, #0]
    5818:	4413      	add	r3, r2
    581a:	4a1c      	ldr	r2, [pc, #112]	; (588c <bt_stream_dma_handler+0xa8>)
    581c:	6013      	str	r3, [r2, #0]

	idle_buf_channel = active_buf_channel;
    581e:	4b1e      	ldr	r3, [pc, #120]	; (5898 <bt_stream_dma_handler+0xb4>)
    5820:	881b      	ldrh	r3, [r3, #0]
    5822:	b29a      	uxth	r2, r3
    5824:	4b1d      	ldr	r3, [pc, #116]	; (589c <bt_stream_dma_handler+0xb8>)
    5826:	801a      	strh	r2, [r3, #0]
	active_buf_channel = channel;
    5828:	4b1d      	ldr	r3, [pc, #116]	; (58a0 <bt_stream_dma_handler+0xbc>)
    582a:	881b      	ldrh	r3, [r3, #0]
    582c:	b29a      	uxth	r2, r3
    582e:	4b1a      	ldr	r3, [pc, #104]	; (5898 <bt_stream_dma_handler+0xb4>)
    5830:	801a      	strh	r2, [r3, #0]

	/* interrupt on channel 0 */
	if (DMACIntStat & (1 << 0)) {
    5832:	4b1c      	ldr	r3, [pc, #112]	; (58a4 <bt_stream_dma_handler+0xc0>)
    5834:	681b      	ldr	r3, [r3, #0]
    5836:	f003 0301 	and.w	r3, r3, #1
    583a:	2b00      	cmp	r3, #0
    583c:	d01b      	beq.n	5876 <bt_stream_dma_handler+0x92>
		if (DMACIntTCStat & (1 << 0)) {
    583e:	4b1a      	ldr	r3, [pc, #104]	; (58a8 <bt_stream_dma_handler+0xc4>)
    5840:	681b      	ldr	r3, [r3, #0]
    5842:	f003 0301 	and.w	r3, r3, #1
    5846:	2b00      	cmp	r3, #0
    5848:	d007      	beq.n	585a <bt_stream_dma_handler+0x76>
			DMACIntTCClear = (1 << 0);
    584a:	4b18      	ldr	r3, [pc, #96]	; (58ac <bt_stream_dma_handler+0xc8>)
    584c:	2201      	movs	r2, #1
    584e:	601a      	str	r2, [r3, #0]
			++rx_tc;
    5850:	4b17      	ldr	r3, [pc, #92]	; (58b0 <bt_stream_dma_handler+0xcc>)
    5852:	681b      	ldr	r3, [r3, #0]
    5854:	3301      	adds	r3, #1
    5856:	4a16      	ldr	r2, [pc, #88]	; (58b0 <bt_stream_dma_handler+0xcc>)
    5858:	6013      	str	r3, [r2, #0]
		}
		if (DMACIntErrStat & (1 << 0)) {
    585a:	4b16      	ldr	r3, [pc, #88]	; (58b4 <bt_stream_dma_handler+0xd0>)
    585c:	681b      	ldr	r3, [r3, #0]
    585e:	f003 0301 	and.w	r3, r3, #1
    5862:	2b00      	cmp	r3, #0
    5864:	d007      	beq.n	5876 <bt_stream_dma_handler+0x92>
			DMACIntErrClr = (1 << 0);
    5866:	4b14      	ldr	r3, [pc, #80]	; (58b8 <bt_stream_dma_handler+0xd4>)
    5868:	2201      	movs	r2, #1
    586a:	601a      	str	r2, [r3, #0]
			++rx_err;
    586c:	4b13      	ldr	r3, [pc, #76]	; (58bc <bt_stream_dma_handler+0xd8>)
    586e:	681b      	ldr	r3, [r3, #0]
    5870:	3301      	adds	r3, #1
    5872:	4a12      	ldr	r2, [pc, #72]	; (58bc <bt_stream_dma_handler+0xd8>)
    5874:	6013      	str	r3, [r2, #0]
		}
	}
}
    5876:	46bd      	mov	sp, r7
    5878:	f85d 7b04 	ldr.w	r7, [sp], #4
    587c:	4770      	bx	lr
    587e:	bf00      	nop
    5880:	10000bec 	.word	0x10000bec
    5884:	10001030 	.word	0x10001030
    5888:	10000be4 	.word	0x10000be4
    588c:	10001028 	.word	0x10001028
    5890:	10000bc8 	.word	0x10000bc8
    5894:	40004008 	.word	0x40004008
    5898:	1000098a 	.word	0x1000098a
    589c:	10000988 	.word	0x10000988
    58a0:	1000049c 	.word	0x1000049c
    58a4:	50004000 	.word	0x50004000
    58a8:	50004004 	.word	0x50004004
    58ac:	50004008 	.word	0x50004008
    58b0:	10000b00 	.word	0x10000b00
    58b4:	5000400c 	.word	0x5000400c
    58b8:	50004010 	.word	0x50004010
    58bc:	100010bc 	.word	0x100010bc

000058c0 <DMA_IRQHandler>:

void DMA_IRQHandler()
{
    58c0:	b580      	push	{r7, lr}
    58c2:	af00      	add	r7, sp, #0
	switch (mode) {
    58c4:	4b12      	ldr	r3, [pc, #72]	; (5910 <DMA_IRQHandler+0x50>)
    58c6:	781b      	ldrb	r3, [r3, #0]
    58c8:	b2db      	uxtb	r3, r3
    58ca:	3b01      	subs	r3, #1
    58cc:	2b0b      	cmp	r3, #11
    58ce:	d81e      	bhi.n	590e <DMA_IRQHandler+0x4e>
    58d0:	a201      	add	r2, pc, #4	; (adr r2, 58d8 <DMA_IRQHandler+0x18>)
    58d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    58d6:	bf00      	nop
    58d8:	00005909 	.word	0x00005909
    58dc:	0000590f 	.word	0x0000590f
    58e0:	0000590f 	.word	0x0000590f
    58e4:	00005909 	.word	0x00005909
    58e8:	0000590f 	.word	0x0000590f
    58ec:	0000590f 	.word	0x0000590f
    58f0:	0000590f 	.word	0x0000590f
    58f4:	00005909 	.word	0x00005909
    58f8:	00005909 	.word	0x00005909
    58fc:	00005909 	.word	0x00005909
    5900:	0000590f 	.word	0x0000590f
    5904:	00005909 	.word	0x00005909
		case MODE_SPECAN:
		case MODE_BT_FOLLOW:
		case MODE_BT_FOLLOW_LE:
		case MODE_BT_PROMISC_LE:
		case MODE_BT_SLAVE_LE:
			bt_stream_dma_handler();
    5908:	f7ff ff6c 	bl	57e4 <bt_stream_dma_handler>
			break;
    590c:	bf00      	nop
	}
}
    590e:	bd80      	pop	{r7, pc}
    5910:	10000a3e 	.word	0x10000a3e

00005914 <dio_ssp_start>:

static void dio_ssp_start()
{
    5914:	b480      	push	{r7}
    5916:	af00      	add	r7, sp, #0
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    5918:	4b10      	ldr	r3, [pc, #64]	; (595c <dio_ssp_start+0x48>)
    591a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    591e:	601a      	str	r2, [r3, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    5920:	4a0f      	ldr	r2, [pc, #60]	; (5960 <dio_ssp_start+0x4c>)
    5922:	4b0f      	ldr	r3, [pc, #60]	; (5960 <dio_ssp_start+0x4c>)
    5924:	681b      	ldr	r3, [r3, #0]
    5926:	f043 0301 	orr.w	r3, r3, #1
    592a:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    592c:	4a0d      	ldr	r2, [pc, #52]	; (5964 <dio_ssp_start+0x50>)
    592e:	4b0d      	ldr	r3, [pc, #52]	; (5964 <dio_ssp_start+0x50>)
    5930:	681b      	ldr	r3, [r3, #0]
    5932:	f043 0302 	orr.w	r3, r3, #2
    5936:	6013      	str	r3, [r2, #0]
	
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
    5938:	4a0b      	ldr	r2, [pc, #44]	; (5968 <dio_ssp_start+0x54>)
    593a:	4b0b      	ldr	r3, [pc, #44]	; (5968 <dio_ssp_start+0x54>)
    593c:	681b      	ldr	r3, [r3, #0]
    593e:	f043 0301 	orr.w	r3, r3, #1
    5942:	6013      	str	r3, [r2, #0]
	ISER0 = ISER0_ISE_DMA;
    5944:	4b09      	ldr	r3, [pc, #36]	; (596c <dio_ssp_start+0x58>)
    5946:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    594a:	601a      	str	r2, [r3, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
    594c:	4b08      	ldr	r3, [pc, #32]	; (5970 <dio_ssp_start+0x5c>)
    594e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5952:	601a      	str	r2, [r3, #0]
}
    5954:	46bd      	mov	sp, r7
    5956:	f85d 7b04 	ldr.w	r7, [sp], #4
    595a:	4770      	bx	lr
    595c:	2009c098 	.word	0x2009c098
    5960:	40030024 	.word	0x40030024
    5964:	40030004 	.word	0x40030004
    5968:	50004110 	.word	0x50004110
    596c:	e000e100 	.word	0xe000e100
    5970:	2009c09c 	.word	0x2009c09c

00005974 <dio_ssp_stop>:

static void dio_ssp_stop()
{
    5974:	b480      	push	{r7}
    5976:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    5978:	4b21      	ldr	r3, [pc, #132]	; (5a00 <dio_ssp_stop+0x8c>)
    597a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    597e:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5980:	4a20      	ldr	r2, [pc, #128]	; (5a04 <dio_ssp_stop+0x90>)
    5982:	4b20      	ldr	r3, [pc, #128]	; (5a04 <dio_ssp_stop+0x90>)
    5984:	681b      	ldr	r3, [r3, #0]
    5986:	f023 0301 	bic.w	r3, r3, #1
    598a:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    598c:	4a1e      	ldr	r2, [pc, #120]	; (5a08 <dio_ssp_stop+0x94>)
    598e:	4b1e      	ldr	r3, [pc, #120]	; (5a08 <dio_ssp_stop+0x94>)
    5990:	681b      	ldr	r3, [r3, #0]
    5992:	f023 0302 	bic.w	r3, r3, #2
    5996:	6013      	str	r3, [r2, #0]

	// disable DMA engine:
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 607

	// disable DMA interrupts
	ICER0 = ICER0_ICE_DMA;
    5998:	4b1c      	ldr	r3, [pc, #112]	; (5a0c <dio_ssp_stop+0x98>)
    599a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    599e:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    59a0:	4b1b      	ldr	r3, [pc, #108]	; (5a10 <dio_ssp_stop+0x9c>)
    59a2:	2200      	movs	r2, #0
    59a4:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    59a6:	4b1b      	ldr	r3, [pc, #108]	; (5a14 <dio_ssp_stop+0xa0>)
    59a8:	2200      	movs	r2, #0
    59aa:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    59ac:	4b1a      	ldr	r3, [pc, #104]	; (5a18 <dio_ssp_stop+0xa4>)
    59ae:	2200      	movs	r2, #0
    59b0:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    59b2:	4b1a      	ldr	r3, [pc, #104]	; (5a1c <dio_ssp_stop+0xa8>)
    59b4:	2200      	movs	r2, #0
    59b6:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    59b8:	4b19      	ldr	r3, [pc, #100]	; (5a20 <dio_ssp_stop+0xac>)
    59ba:	2200      	movs	r2, #0
    59bc:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    59be:	4b19      	ldr	r3, [pc, #100]	; (5a24 <dio_ssp_stop+0xb0>)
    59c0:	2200      	movs	r2, #0
    59c2:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    59c4:	4b18      	ldr	r3, [pc, #96]	; (5a28 <dio_ssp_stop+0xb4>)
    59c6:	2200      	movs	r2, #0
    59c8:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    59ca:	4b18      	ldr	r3, [pc, #96]	; (5a2c <dio_ssp_stop+0xb8>)
    59cc:	2200      	movs	r2, #0
    59ce:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    59d0:	4b17      	ldr	r3, [pc, #92]	; (5a30 <dio_ssp_stop+0xbc>)
    59d2:	22ff      	movs	r2, #255	; 0xff
    59d4:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    59d6:	4b17      	ldr	r3, [pc, #92]	; (5a34 <dio_ssp_stop+0xc0>)
    59d8:	22ff      	movs	r2, #255	; 0xff
    59da:	601a      	str	r2, [r3, #0]

	// Disable the DMA controller by writing 0 to the DMA Enable bit in the DMACConfig
	// register.
	DMACConfig &= ~DMACConfig_E;
    59dc:	4a16      	ldr	r2, [pc, #88]	; (5a38 <dio_ssp_stop+0xc4>)
    59de:	4b16      	ldr	r3, [pc, #88]	; (5a38 <dio_ssp_stop+0xc4>)
    59e0:	681b      	ldr	r3, [r3, #0]
    59e2:	f023 0301 	bic.w	r3, r3, #1
    59e6:	6013      	str	r3, [r2, #0]
	while (DMACConfig & DMACConfig_E);
    59e8:	bf00      	nop
    59ea:	4b13      	ldr	r3, [pc, #76]	; (5a38 <dio_ssp_stop+0xc4>)
    59ec:	681b      	ldr	r3, [r3, #0]
    59ee:	f003 0301 	and.w	r3, r3, #1
    59f2:	2b00      	cmp	r3, #0
    59f4:	d1f9      	bne.n	59ea <dio_ssp_stop+0x76>
}
    59f6:	46bd      	mov	sp, r7
    59f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    59fc:	4770      	bx	lr
    59fe:	bf00      	nop
    5a00:	2009c098 	.word	0x2009c098
    5a04:	40030024 	.word	0x40030024
    5a08:	40030004 	.word	0x40030004
    5a0c:	e000e180 	.word	0xe000e180
    5a10:	50004110 	.word	0x50004110
    5a14:	50004130 	.word	0x50004130
    5a18:	50004150 	.word	0x50004150
    5a1c:	50004170 	.word	0x50004170
    5a20:	50004190 	.word	0x50004190
    5a24:	500041b0 	.word	0x500041b0
    5a28:	500041d0 	.word	0x500041d0
    5a2c:	500041f0 	.word	0x500041f0
    5a30:	50004008 	.word	0x50004008
    5a34:	50004010 	.word	0x50004010
    5a38:	50004030 	.word	0x50004030

00005a3c <cc2400_idle>:

static void cc2400_idle()
{
    5a3c:	b580      	push	{r7, lr}
    5a3e:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    5a40:	2064      	movs	r0, #100	; 0x64
    5a42:	f004 f8f3 	bl	9c2c <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5a46:	bf00      	nop
    5a48:	f004 f8e6 	bl	9c18 <cc2400_status>
    5a4c:	4603      	mov	r3, r0
    5a4e:	f003 0304 	and.w	r3, r3, #4
    5a52:	2b00      	cmp	r3, #0
    5a54:	d1f8      	bne.n	5a48 <cc2400_idle+0xc>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5a56:	4b0a      	ldr	r3, [pc, #40]	; (5a80 <cc2400_idle+0x44>)
    5a58:	2280      	movs	r2, #128	; 0x80
    5a5a:	601a      	str	r2, [r3, #0]
	HGM_CLR;
    5a5c:	4b08      	ldr	r3, [pc, #32]	; (5a80 <cc2400_idle+0x44>)
    5a5e:	f44f 7280 	mov.w	r2, #256	; 0x100
    5a62:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    5a64:	4b07      	ldr	r3, [pc, #28]	; (5a84 <cc2400_idle+0x48>)
    5a66:	2210      	movs	r2, #16
    5a68:	601a      	str	r2, [r3, #0]
	TXLED_CLR;
    5a6a:	4b06      	ldr	r3, [pc, #24]	; (5a84 <cc2400_idle+0x48>)
    5a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5a70:	601a      	str	r2, [r3, #0]
	USRLED_CLR;
    5a72:	4b04      	ldr	r3, [pc, #16]	; (5a84 <cc2400_idle+0x48>)
    5a74:	2202      	movs	r2, #2
    5a76:	601a      	str	r2, [r3, #0]
	mode = MODE_IDLE;
    5a78:	4b03      	ldr	r3, [pc, #12]	; (5a88 <cc2400_idle+0x4c>)
    5a7a:	2200      	movs	r2, #0
    5a7c:	701a      	strb	r2, [r3, #0]
}
    5a7e:	bd80      	pop	{r7, pc}
    5a80:	2009c05c 	.word	0x2009c05c
    5a84:	2009c03c 	.word	0x2009c03c
    5a88:	10000a3e 	.word	0x10000a3e

00005a8c <cc2400_rx>:

/* start un-buffered rx */
static void cc2400_rx()
{
    5a8c:	b580      	push	{r7, lr}
    5a8e:	b082      	sub	sp, #8
    5a90:	af00      	add	r7, sp, #0
	u16 mdmctrl;
	if (modulation == MOD_BT_BASIC_RATE) {
    5a92:	4b2a      	ldr	r3, [pc, #168]	; (5b3c <cc2400_rx+0xb0>)
    5a94:	781b      	ldrb	r3, [r3, #0]
    5a96:	b2db      	uxtb	r3, r3
    5a98:	2b00      	cmp	r3, #0
    5a9a:	d102      	bne.n	5aa2 <cc2400_rx+0x16>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5a9c:	2329      	movs	r3, #41	; 0x29
    5a9e:	80fb      	strh	r3, [r7, #6]
    5aa0:	e008      	b.n	5ab4 <cc2400_rx+0x28>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5aa2:	4b26      	ldr	r3, [pc, #152]	; (5b3c <cc2400_rx+0xb0>)
    5aa4:	781b      	ldrb	r3, [r3, #0]
    5aa6:	b2db      	uxtb	r3, r3
    5aa8:	2b01      	cmp	r3, #1
    5aaa:	d102      	bne.n	5ab2 <cc2400_rx+0x26>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5aac:	2340      	movs	r3, #64	; 0x40
    5aae:	80fb      	strh	r3, [r7, #6]
    5ab0:	e000      	b.n	5ab4 <cc2400_rx+0x28>
	} else {
		/* oops */
		return;
    5ab2:	e040      	b.n	5b36 <cc2400_rx+0xaa>
	}

	cc2400_set(MANAND,  0x7fff);
    5ab4:	200d      	movs	r0, #13
    5ab6:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5aba:	f003 fff5 	bl	9aa8 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5abe:	2012      	movs	r0, #18
    5ac0:	f642 3122 	movw	r1, #11042	; 0x2b22
    5ac4:	f003 fff0 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    5ac8:	2014      	movs	r0, #20
    5aca:	f241 314b 	movw	r1, #4939	; 0x134b
    5ace:	f003 ffeb 	bl	9aa8 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    5ad2:	2020      	movs	r0, #32
    5ad4:	f240 1101 	movw	r1, #257	; 0x101
    5ad8:	f003 ffe6 	bl	9aa8 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 2 preamble bytes of 01010101
	//      |  +-----------------> not packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5adc:	4b18      	ldr	r3, [pc, #96]	; (5b40 <cc2400_rx+0xb4>)
    5ade:	881b      	ldrh	r3, [r3, #0]
    5ae0:	b29b      	uxth	r3, r3
    5ae2:	3b01      	subs	r3, #1
    5ae4:	b29b      	uxth	r3, r3
    5ae6:	2002      	movs	r0, #2
    5ae8:	4619      	mov	r1, r3
    5aea:	f003 ffdd 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5aee:	88fb      	ldrh	r3, [r7, #6]
    5af0:	2003      	movs	r0, #3
    5af2:	4619      	mov	r1, r3
    5af4:	f003 ffd8 	bl	9aa8 <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5af8:	f7fe fdda 	bl	46b0 <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5afc:	bf00      	nop
    5afe:	f004 f88b 	bl	9c18 <cc2400_status>
    5b02:	4603      	mov	r3, r0
    5b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5b08:	2b00      	cmp	r3, #0
    5b0a:	d0f8      	beq.n	5afe <cc2400_rx+0x72>
	cc2400_strobe(SFSON);
    5b0c:	2061      	movs	r0, #97	; 0x61
    5b0e:	f004 f88d 	bl	9c2c <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5b12:	bf00      	nop
    5b14:	f004 f880 	bl	9c18 <cc2400_status>
    5b18:	4603      	mov	r3, r0
    5b1a:	f003 0304 	and.w	r3, r3, #4
    5b1e:	2b00      	cmp	r3, #0
    5b20:	d0f8      	beq.n	5b14 <cc2400_rx+0x88>
	cc2400_strobe(SRX);
    5b22:	2062      	movs	r0, #98	; 0x62
    5b24:	f004 f882 	bl	9c2c <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5b28:	4b06      	ldr	r3, [pc, #24]	; (5b44 <cc2400_rx+0xb8>)
    5b2a:	2280      	movs	r2, #128	; 0x80
    5b2c:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5b2e:	4b05      	ldr	r3, [pc, #20]	; (5b44 <cc2400_rx+0xb8>)
    5b30:	f44f 7280 	mov.w	r2, #256	; 0x100
    5b34:	601a      	str	r2, [r3, #0]
#endif
}
    5b36:	3708      	adds	r7, #8
    5b38:	46bd      	mov	sp, r7
    5b3a:	bd80      	pop	{r7, pc}
    5b3c:	10000a42 	.word	0x10000a42
    5b40:	1000049c 	.word	0x1000049c
    5b44:	2009c058 	.word	0x2009c058

00005b48 <cc2400_rx_sync>:

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    5b48:	b580      	push	{r7, lr}
    5b4a:	b084      	sub	sp, #16
    5b4c:	af00      	add	r7, sp, #0
    5b4e:	6078      	str	r0, [r7, #4]
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    5b50:	4b33      	ldr	r3, [pc, #204]	; (5c20 <cc2400_rx_sync+0xd8>)
    5b52:	781b      	ldrb	r3, [r3, #0]
    5b54:	b2db      	uxtb	r3, r3
    5b56:	2b00      	cmp	r3, #0
    5b58:	d105      	bne.n	5b66 <cc2400_rx_sync+0x1e>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5b5a:	2329      	movs	r3, #41	; 0x29
    5b5c:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    5b5e:	f240 4361 	movw	r3, #1121	; 0x461
    5b62:	81fb      	strh	r3, [r7, #14]
    5b64:	e00b      	b.n	5b7e <cc2400_rx_sync+0x36>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5b66:	4b2e      	ldr	r3, [pc, #184]	; (5c20 <cc2400_rx_sync+0xd8>)
    5b68:	781b      	ldrb	r3, [r3, #0]
    5b6a:	b2db      	uxtb	r3, r3
    5b6c:	2b01      	cmp	r3, #1
    5b6e:	d105      	bne.n	5b7c <cc2400_rx_sync+0x34>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5b70:	2340      	movs	r3, #64	; 0x40
    5b72:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    5b74:	f240 5361 	movw	r3, #1377	; 0x561
    5b78:	81fb      	strh	r3, [r7, #14]
    5b7a:	e000      	b.n	5b7e <cc2400_rx_sync+0x36>
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else {
		/* oops */
		return;
    5b7c:	e04d      	b.n	5c1a <cc2400_rx_sync+0xd2>
	}

	cc2400_set(MANAND,  0x7fff);
    5b7e:	200d      	movs	r0, #13
    5b80:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5b84:	f003 ff90 	bl	9aa8 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5b88:	2012      	movs	r0, #18
    5b8a:	f642 3122 	movw	r1, #11042	; 0x2b22
    5b8e:	f003 ff8b 	bl	9aa8 <cc2400_set>

	cc2400_set(MDMTST0, 0x124b);
    5b92:	2014      	movs	r0, #20
    5b94:	f241 214b 	movw	r1, #4683	; 0x124b
    5b98:	f003 ff86 	bl	9aa8 <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    5b9c:	89fb      	ldrh	r3, [r7, #14]
    5b9e:	2020      	movs	r0, #32
    5ba0:	4619      	mov	r1, r3
    5ba2:	f003 ff81 	bl	9aa8 <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    5ba6:	687b      	ldr	r3, [r7, #4]
    5ba8:	b29b      	uxth	r3, r3
    5baa:	202c      	movs	r0, #44	; 0x2c
    5bac:	4619      	mov	r1, r3
    5bae:	f003 ff7b 	bl	9aa8 <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    5bb2:	687b      	ldr	r3, [r7, #4]
    5bb4:	0c1b      	lsrs	r3, r3, #16
    5bb6:	b29b      	uxth	r3, r3
    5bb8:	202d      	movs	r0, #45	; 0x2d
    5bba:	4619      	mov	r1, r3
    5bbc:	f003 ff74 	bl	9aa8 <cc2400_set>
	
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5bc0:	4b18      	ldr	r3, [pc, #96]	; (5c24 <cc2400_rx_sync+0xdc>)
    5bc2:	881b      	ldrh	r3, [r3, #0]
    5bc4:	b29b      	uxth	r3, r3
    5bc6:	3b01      	subs	r3, #1
    5bc8:	b29b      	uxth	r3, r3
    5bca:	2002      	movs	r0, #2
    5bcc:	4619      	mov	r1, r3
    5bce:	f003 ff6b 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5bd2:	89bb      	ldrh	r3, [r7, #12]
    5bd4:	2003      	movs	r0, #3
    5bd6:	4619      	mov	r1, r3
    5bd8:	f003 ff66 	bl	9aa8 <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5bdc:	f7fe fd68 	bl	46b0 <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5be0:	bf00      	nop
    5be2:	f004 f819 	bl	9c18 <cc2400_status>
    5be6:	4603      	mov	r3, r0
    5be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5bec:	2b00      	cmp	r3, #0
    5bee:	d0f8      	beq.n	5be2 <cc2400_rx_sync+0x9a>
	cc2400_strobe(SFSON);
    5bf0:	2061      	movs	r0, #97	; 0x61
    5bf2:	f004 f81b 	bl	9c2c <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5bf6:	bf00      	nop
    5bf8:	f004 f80e 	bl	9c18 <cc2400_status>
    5bfc:	4603      	mov	r3, r0
    5bfe:	f003 0304 	and.w	r3, r3, #4
    5c02:	2b00      	cmp	r3, #0
    5c04:	d0f8      	beq.n	5bf8 <cc2400_rx_sync+0xb0>
	cc2400_strobe(SRX);
    5c06:	2062      	movs	r0, #98	; 0x62
    5c08:	f004 f810 	bl	9c2c <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5c0c:	4b06      	ldr	r3, [pc, #24]	; (5c28 <cc2400_rx_sync+0xe0>)
    5c0e:	2280      	movs	r2, #128	; 0x80
    5c10:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5c12:	4b05      	ldr	r3, [pc, #20]	; (5c28 <cc2400_rx_sync+0xe0>)
    5c14:	f44f 7280 	mov.w	r2, #256	; 0x100
    5c18:	601a      	str	r2, [r3, #0]
#endif
}
    5c1a:	3710      	adds	r7, #16
    5c1c:	46bd      	mov	sp, r7
    5c1e:	bd80      	pop	{r7, pc}
    5c20:	10000a42 	.word	0x10000a42
    5c24:	1000049c 	.word	0x1000049c
    5c28:	2009c058 	.word	0x2009c058

00005c2c <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data)
{
    5c2c:	b580      	push	{r7, lr}
    5c2e:	b09a      	sub	sp, #104	; 0x68
    5c30:	af00      	add	r7, sp, #0
    5c32:	60f8      	str	r0, [r7, #12]
    5c34:	460b      	mov	r3, r1
    5c36:	607a      	str	r2, [r7, #4]
    5c38:	72fb      	strb	r3, [r7, #11]
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5c3a:	2300      	movs	r3, #0
    5c3c:	667b      	str	r3, [r7, #100]	; 0x64
    5c3e:	e035      	b.n	5cac <le_transmit+0x80>
		byte = aa & 0xff;
    5c40:	68fb      	ldr	r3, [r7, #12]
    5c42:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		aa >>= 8;
    5c46:	68fb      	ldr	r3, [r7, #12]
    5c48:	0a1b      	lsrs	r3, r3, #8
    5c4a:	60fb      	str	r3, [r7, #12]
		txbuf[i] = 0;
    5c4c:	f107 0210 	add.w	r2, r7, #16
    5c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5c52:	4413      	add	r3, r2
    5c54:	2200      	movs	r2, #0
    5c56:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; ++j) {
    5c58:	2300      	movs	r3, #0
    5c5a:	663b      	str	r3, [r7, #96]	; 0x60
    5c5c:	e020      	b.n	5ca0 <le_transmit+0x74>
			txbuf[i] |= (byte & 1) << (7 - j);
    5c5e:	f107 0210 	add.w	r2, r7, #16
    5c62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5c64:	4413      	add	r3, r2
    5c66:	781b      	ldrb	r3, [r3, #0]
    5c68:	b2d9      	uxtb	r1, r3
    5c6a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5c6e:	f003 0301 	and.w	r3, r3, #1
    5c72:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5c74:	f1c2 0207 	rsb	r2, r2, #7
    5c78:	4093      	lsls	r3, r2
    5c7a:	b2db      	uxtb	r3, r3
    5c7c:	460a      	mov	r2, r1
    5c7e:	4313      	orrs	r3, r2
    5c80:	b2db      	uxtb	r3, r3
    5c82:	b2d9      	uxtb	r1, r3
    5c84:	f107 0210 	add.w	r2, r7, #16
    5c88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5c8a:	4413      	add	r3, r2
    5c8c:	460a      	mov	r2, r1
    5c8e:	701a      	strb	r2, [r3, #0]
			byte >>= 1;
    5c90:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5c94:	085b      	lsrs	r3, r3, #1
    5c96:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    5c9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5c9c:	3301      	adds	r3, #1
    5c9e:	663b      	str	r3, [r7, #96]	; 0x60
    5ca0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5ca2:	2b07      	cmp	r3, #7
    5ca4:	d9db      	bls.n	5c5e <le_transmit+0x32>
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5ca6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5ca8:	3301      	adds	r3, #1
    5caa:	667b      	str	r3, [r7, #100]	; 0x64
    5cac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5cae:	2b03      	cmp	r3, #3
    5cb0:	d9c6      	bls.n	5c40 <le_transmit+0x14>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
    5cb2:	4b93      	ldr	r3, [pc, #588]	; (5f00 <le_transmit+0x2d4>)
    5cb4:	881b      	ldrh	r3, [r3, #0]
    5cb6:	b29b      	uxth	r3, r3
    5cb8:	b2db      	uxtb	r3, r3
    5cba:	3b62      	subs	r3, #98	; 0x62
    5cbc:	b2db      	uxtb	r3, r3
    5cbe:	4618      	mov	r0, r3
    5cc0:	f002 fafa 	bl	82b8 <btle_channel_index>
    5cc4:	4603      	mov	r3, r0
    5cc6:	461a      	mov	r2, r3
    5cc8:	4b8e      	ldr	r3, [pc, #568]	; (5f04 <le_transmit+0x2d8>)
    5cca:	5c9b      	ldrb	r3, [r3, r2]
    5ccc:	65bb      	str	r3, [r7, #88]	; 0x58
	for (i = 0; i < len; ++i) {
    5cce:	2300      	movs	r3, #0
    5cd0:	667b      	str	r3, [r7, #100]	; 0x64
    5cd2:	e050      	b.n	5d76 <le_transmit+0x14a>
		byte = data[i];
    5cd4:	687a      	ldr	r2, [r7, #4]
    5cd6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5cd8:	4413      	add	r3, r2
    5cda:	781b      	ldrb	r3, [r3, #0]
    5cdc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		txbuf[i+4] = 0;
    5ce0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5ce2:	3304      	adds	r3, #4
    5ce4:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5ce8:	4413      	add	r3, r2
    5cea:	2200      	movs	r2, #0
    5cec:	f803 2c58 	strb.w	r2, [r3, #-88]
		for (j = 0; j < 8; ++j) {
    5cf0:	2300      	movs	r3, #0
    5cf2:	663b      	str	r3, [r7, #96]	; 0x60
    5cf4:	e039      	b.n	5d6a <le_transmit+0x13e>
			bit = (byte & 1) ^ whitening[idx];
    5cf6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5cfa:	f003 0301 	and.w	r3, r3, #1
    5cfe:	4982      	ldr	r1, [pc, #520]	; (5f08 <le_transmit+0x2dc>)
    5d00:	6dba      	ldr	r2, [r7, #88]	; 0x58
    5d02:	440a      	add	r2, r1
    5d04:	7812      	ldrb	r2, [r2, #0]
    5d06:	4053      	eors	r3, r2
    5d08:	657b      	str	r3, [r7, #84]	; 0x54
			idx = (idx + 1) % sizeof(whitening);
    5d0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5d0c:	3301      	adds	r3, #1
    5d0e:	4619      	mov	r1, r3
    5d10:	4b7e      	ldr	r3, [pc, #504]	; (5f0c <le_transmit+0x2e0>)
    5d12:	fba1 2303 	umull	r2, r3, r1, r3
    5d16:	1ac8      	subs	r0, r1, r3
    5d18:	0840      	lsrs	r0, r0, #1
    5d1a:	4403      	add	r3, r0
    5d1c:	099a      	lsrs	r2, r3, #6
    5d1e:	4613      	mov	r3, r2
    5d20:	01db      	lsls	r3, r3, #7
    5d22:	1a9b      	subs	r3, r3, r2
    5d24:	1aca      	subs	r2, r1, r3
    5d26:	65ba      	str	r2, [r7, #88]	; 0x58
			byte >>= 1;
    5d28:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5d2c:	085b      	lsrs	r3, r3, #1
    5d2e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			txbuf[i+4] |= bit << (7 - j);
    5d32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d34:	3304      	adds	r3, #4
    5d36:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    5d38:	3204      	adds	r2, #4
    5d3a:	f107 0168 	add.w	r1, r7, #104	; 0x68
    5d3e:	440a      	add	r2, r1
    5d40:	f812 2c58 	ldrb.w	r2, [r2, #-88]
    5d44:	b2d1      	uxtb	r1, r2
    5d46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5d48:	f1c2 0207 	rsb	r2, r2, #7
    5d4c:	4610      	mov	r0, r2
    5d4e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5d50:	4082      	lsls	r2, r0
    5d52:	b2d2      	uxtb	r2, r2
    5d54:	430a      	orrs	r2, r1
    5d56:	b2d2      	uxtb	r2, r2
    5d58:	b2d2      	uxtb	r2, r2
    5d5a:	f107 0168 	add.w	r1, r7, #104	; 0x68
    5d5e:	440b      	add	r3, r1
    5d60:	f803 2c58 	strb.w	r2, [r3, #-88]
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    5d64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5d66:	3301      	adds	r3, #1
    5d68:	663b      	str	r3, [r7, #96]	; 0x60
    5d6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5d6c:	2b07      	cmp	r3, #7
    5d6e:	d9c2      	bls.n	5cf6 <le_transmit+0xca>
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
    5d70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d72:	3301      	adds	r3, #1
    5d74:	667b      	str	r3, [r7, #100]	; 0x64
    5d76:	7afa      	ldrb	r2, [r7, #11]
    5d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d7a:	429a      	cmp	r2, r3
    5d7c:	d8aa      	bhi.n	5cd4 <le_transmit+0xa8>
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    5d7e:	7afb      	ldrb	r3, [r7, #11]
    5d80:	3304      	adds	r3, #4
    5d82:	72fb      	strb	r3, [r7, #11]

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    5d84:	200d      	movs	r0, #13
    5d86:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5d8a:	f003 fe8d 	bl	9aa8 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5d8e:	2012      	movs	r0, #18
    5d90:	f642 3122 	movw	r1, #11042	; 0x2b22
    5d94:	f003 fe88 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5d98:	2014      	movs	r0, #20
    5d9a:	f241 314b 	movw	r1, #4939	; 0x134b
    5d9e:	f003 fe83 	bl	9aa8 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5da2:	2020      	movs	r0, #32
    5da4:	f640 4101 	movw	r1, #3073	; 0xc01
    5da8:	f003 fe7e 	bl	9aa8 <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   channel);
    5dac:	4b54      	ldr	r3, [pc, #336]	; (5f00 <le_transmit+0x2d4>)
    5dae:	881b      	ldrh	r3, [r3, #0]
    5db0:	b29b      	uxth	r3, r3
    5db2:	2002      	movs	r0, #2
    5db4:	4619      	mov	r1, r3
    5db6:	f003 fe77 	bl	9aa8 <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5dba:	2005      	movs	r0, #5
    5dbc:	210b      	movs	r1, #11
    5dbe:	f003 fe73 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5dc2:	2003      	movs	r0, #3
    5dc4:	2140      	movs	r1, #64	; 0x40
    5dc6:	f003 fe6f 	bl	9aa8 <cc2400_set>
	cc2400_set(INT,     0x0014);	// FIFO_THRESHOLD: 20 bytes
    5dca:	2023      	movs	r0, #35	; 0x23
    5dcc:	2114      	movs	r1, #20
    5dce:	f003 fe6b 	bl	9aa8 <cc2400_set>

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    5dd2:	68fb      	ldr	r3, [r7, #12]
    5dd4:	f003 0301 	and.w	r3, r3, #1
    5dd8:	2b00      	cmp	r3, #0
    5dda:	d005      	beq.n	5de8 <le_transmit+0x1bc>
		cc2400_set(SYNCH,   0xaaaa);
    5ddc:	202d      	movs	r0, #45	; 0x2d
    5dde:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
    5de2:	f003 fe61 	bl	9aa8 <cc2400_set>
    5de6:	e004      	b.n	5df2 <le_transmit+0x1c6>
	else
		cc2400_set(SYNCH,   0x5555);
    5de8:	202d      	movs	r0, #45	; 0x2d
    5dea:	f245 5155 	movw	r1, #21845	; 0x5555
    5dee:	f003 fe5b 	bl	9aa8 <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5df2:	2008      	movs	r0, #8
    5df4:	f003 fe42 	bl	9a7c <cc2400_get>
    5df8:	4603      	mov	r3, r0
    5dfa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5dfe:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    5e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5e06:	b29b      	uxth	r3, r3
    5e08:	f443 439c 	orr.w	r3, r3, #19968	; 0x4e00
    5e0c:	b29b      	uxth	r3, r3
    5e0e:	b29b      	uxth	r3, r3
    5e10:	2008      	movs	r0, #8
    5e12:	4619      	mov	r1, r3
    5e14:	f003 fe48 	bl	9aa8 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5e18:	bf00      	nop
    5e1a:	f003 fefd 	bl	9c18 <cc2400_status>
    5e1e:	4603      	mov	r3, r0
    5e20:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5e24:	2b00      	cmp	r3, #0
    5e26:	d0f8      	beq.n	5e1a <le_transmit+0x1ee>
	cc2400_strobe(SFSON);
    5e28:	2061      	movs	r0, #97	; 0x61
    5e2a:	f003 feff 	bl	9c2c <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5e2e:	bf00      	nop
    5e30:	f003 fef2 	bl	9c18 <cc2400_status>
    5e34:	4603      	mov	r3, r0
    5e36:	f003 0304 	and.w	r3, r3, #4
    5e3a:	2b00      	cmp	r3, #0
    5e3c:	d0f8      	beq.n	5e30 <le_transmit+0x204>
	TXLED_SET;
    5e3e:	4b34      	ldr	r3, [pc, #208]	; (5f10 <le_transmit+0x2e4>)
    5e40:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e44:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5e46:	4b33      	ldr	r3, [pc, #204]	; (5f14 <le_transmit+0x2e8>)
    5e48:	2280      	movs	r2, #128	; 0x80
    5e4a:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5e4c:	bf00      	nop
    5e4e:	200e      	movs	r0, #14
    5e50:	f003 fe14 	bl	9a7c <cc2400_get>
    5e54:	4603      	mov	r3, r0
    5e56:	f003 031f 	and.w	r3, r3, #31
    5e5a:	2b0f      	cmp	r3, #15
    5e5c:	d1f7      	bne.n	5e4e <le_transmit+0x222>
	cc2400_strobe(STX);
    5e5e:	2063      	movs	r0, #99	; 0x63
    5e60:	f003 fee4 	bl	9c2c <cc2400_strobe>

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    5e64:	2300      	movs	r3, #0
    5e66:	667b      	str	r3, [r7, #100]	; 0x64
    5e68:	e021      	b.n	5eae <le_transmit+0x282>
		while (GIO6) ; // wait for the FIFO to drain (FIFO_FULL false)
    5e6a:	bf00      	nop
    5e6c:	4b2a      	ldr	r3, [pc, #168]	; (5f18 <le_transmit+0x2ec>)
    5e6e:	681b      	ldr	r3, [r3, #0]
    5e70:	f003 0304 	and.w	r3, r3, #4
    5e74:	2b00      	cmp	r3, #0
    5e76:	d1f9      	bne.n	5e6c <le_transmit+0x240>
		tx_len = len - i;
    5e78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e7a:	b2db      	uxtb	r3, r3
    5e7c:	7afa      	ldrb	r2, [r7, #11]
    5e7e:	1ad3      	subs	r3, r2, r3
    5e80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (tx_len > 16)
    5e84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    5e88:	2b10      	cmp	r3, #16
    5e8a:	d902      	bls.n	5e92 <le_transmit+0x266>
			tx_len = 16;
    5e8c:	2310      	movs	r3, #16
    5e8e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
    5e92:	f107 0210 	add.w	r2, r7, #16
    5e96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e98:	4413      	add	r3, r2
    5e9a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
    5e9e:	2070      	movs	r0, #112	; 0x70
    5ea0:	4611      	mov	r1, r2
    5ea2:	461a      	mov	r2, r3
    5ea4:	f003 fe42 	bl	9b2c <cc2400_spi_buf>
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    5ea8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5eaa:	3310      	adds	r3, #16
    5eac:	667b      	str	r3, [r7, #100]	; 0x64
    5eae:	7afa      	ldrb	r2, [r7, #11]
    5eb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5eb2:	429a      	cmp	r2, r3
    5eb4:	d8d9      	bhi.n	5e6a <le_transmit+0x23e>
		if (tx_len > 16)
			tx_len = 16;
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
	}

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5eb6:	bf00      	nop
    5eb8:	200e      	movs	r0, #14
    5eba:	f003 fddf 	bl	9a7c <cc2400_get>
    5ebe:	4603      	mov	r3, r0
    5ec0:	f003 031f 	and.w	r3, r3, #31
    5ec4:	2b0f      	cmp	r3, #15
    5ec6:	d1f7      	bne.n	5eb8 <le_transmit+0x28c>
	TXLED_CLR;
    5ec8:	4b14      	ldr	r3, [pc, #80]	; (5f1c <le_transmit+0x2f0>)
    5eca:	f44f 7280 	mov.w	r2, #256	; 0x100
    5ece:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    5ed0:	2064      	movs	r0, #100	; 0x64
    5ed2:	f003 feab 	bl	9c2c <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    5ed6:	bf00      	nop
    5ed8:	f003 fe9e 	bl	9c18 <cc2400_status>
    5edc:	4603      	mov	r3, r0
    5ede:	f003 0304 	and.w	r3, r3, #4
    5ee2:	2b00      	cmp	r3, #0
    5ee4:	d1f8      	bne.n	5ed8 <le_transmit+0x2ac>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5ee6:	4b0e      	ldr	r3, [pc, #56]	; (5f20 <le_transmit+0x2f4>)
    5ee8:	2280      	movs	r2, #128	; 0x80
    5eea:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    5eec:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    5ef0:	2008      	movs	r0, #8
    5ef2:	4619      	mov	r1, r3
    5ef4:	f003 fdd8 	bl	9aa8 <cc2400_set>
}
    5ef8:	3768      	adds	r7, #104	; 0x68
    5efa:	46bd      	mov	sp, r7
    5efc:	bd80      	pop	{r7, pc}
    5efe:	bf00      	nop
    5f00:	1000049c 	.word	0x1000049c
    5f04:	0000b84c 	.word	0x0000b84c
    5f08:	0000b7cc 	.word	0x0000b7cc
    5f0c:	02040811 	.word	0x02040811
    5f10:	2009c038 	.word	0x2009c038
    5f14:	2009c058 	.word	0x2009c058
    5f18:	2009c054 	.word	0x2009c054
    5f1c:	2009c03c 	.word	0x2009c03c
    5f20:	2009c05c 	.word	0x2009c05c

00005f24 <le_jam>:

void le_jam(void) {
    5f24:	b580      	push	{r7, lr}
    5f26:	af00      	add	r7, sp, #0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    5f28:	200d      	movs	r0, #13
    5f2a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5f2e:	f003 fdbb 	bl	9aa8 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5f32:	2012      	movs	r0, #18
    5f34:	f642 3122 	movw	r1, #11042	; 0x2b22
    5f38:	f003 fdb6 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    5f3c:	2014      	movs	r0, #20
    5f3e:	f242 314b 	movw	r1, #9035	; 0x234b
    5f42:	f003 fdb1 	bl	9aa8 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5f46:	2020      	movs	r0, #32
    5f48:	f640 4101 	movw	r1, #3073	; 0xc01
    5f4c:	f003 fdac 	bl	9aa8 <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5f50:	2005      	movs	r0, #5
    5f52:	210b      	movs	r1, #11
    5f54:	f003 fda8 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5f58:	2003      	movs	r0, #3
    5f5a:	2140      	movs	r1, #64	; 0x40
    5f5c:	f003 fda4 	bl	9aa8 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5f60:	bf00      	nop
    5f62:	f003 fe59 	bl	9c18 <cc2400_status>
    5f66:	4603      	mov	r3, r0
    5f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5f6c:	2b00      	cmp	r3, #0
    5f6e:	d0f8      	beq.n	5f62 <le_jam+0x3e>
	cc2400_strobe(SFSON);
    5f70:	2061      	movs	r0, #97	; 0x61
    5f72:	f003 fe5b 	bl	9c2c <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5f76:	bf00      	nop
    5f78:	f003 fe4e 	bl	9c18 <cc2400_status>
    5f7c:	4603      	mov	r3, r0
    5f7e:	f003 0304 	and.w	r3, r3, #4
    5f82:	2b00      	cmp	r3, #0
    5f84:	d0f8      	beq.n	5f78 <le_jam+0x54>
	TXLED_SET;
    5f86:	4b0a      	ldr	r3, [pc, #40]	; (5fb0 <le_jam+0x8c>)
    5f88:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f8c:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5f8e:	4b09      	ldr	r3, [pc, #36]	; (5fb4 <le_jam+0x90>)
    5f90:	2280      	movs	r2, #128	; 0x80
    5f92:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5f94:	bf00      	nop
    5f96:	200e      	movs	r0, #14
    5f98:	f003 fd70 	bl	9a7c <cc2400_get>
    5f9c:	4603      	mov	r3, r0
    5f9e:	f003 031f 	and.w	r3, r3, #31
    5fa2:	2b0f      	cmp	r3, #15
    5fa4:	d1f7      	bne.n	5f96 <le_jam+0x72>
	cc2400_strobe(STX);
    5fa6:	2063      	movs	r0, #99	; 0x63
    5fa8:	f003 fe40 	bl	9c2c <cc2400_strobe>
#endif
}
    5fac:	bd80      	pop	{r7, pc}
    5fae:	bf00      	nop
    5fb0:	2009c038 	.word	0x2009c038
    5fb4:	2009c058 	.word	0x2009c058

00005fb8 <hop>:

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    5fb8:	b580      	push	{r7, lr}
    5fba:	af00      	add	r7, sp, #0
	do_hop = 0;
    5fbc:	4b41      	ldr	r3, [pc, #260]	; (60c4 <hop+0x10c>)
    5fbe:	2200      	movs	r2, #0
    5fc0:	701a      	strb	r2, [r3, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    5fc2:	4b41      	ldr	r3, [pc, #260]	; (60c8 <hop+0x110>)
    5fc4:	781b      	ldrb	r3, [r3, #0]
    5fc6:	2b00      	cmp	r3, #0
    5fc8:	d10b      	bne.n	5fe2 <hop+0x2a>
		if (cc2400_get(FSDIV) == (channel - 1))
    5fca:	2002      	movs	r0, #2
    5fcc:	f003 fd56 	bl	9a7c <cc2400_get>
    5fd0:	4603      	mov	r3, r0
    5fd2:	461a      	mov	r2, r3
    5fd4:	4b3d      	ldr	r3, [pc, #244]	; (60cc <hop+0x114>)
    5fd6:	881b      	ldrh	r3, [r3, #0]
    5fd8:	b29b      	uxth	r3, r3
    5fda:	3b01      	subs	r3, #1
    5fdc:	429a      	cmp	r2, r3
    5fde:	d147      	bne.n	6070 <hop+0xb8>
			return;
    5fe0:	e06e      	b.n	60c0 <hop+0x108>
	}

	// Slow sweep (100 hops/sec)
	else if (hop_mode == HOP_SWEEP) {
    5fe2:	4b39      	ldr	r3, [pc, #228]	; (60c8 <hop+0x110>)
    5fe4:	781b      	ldrb	r3, [r3, #0]
    5fe6:	2b01      	cmp	r3, #1
    5fe8:	d114      	bne.n	6014 <hop+0x5c>
		channel += 32;
    5fea:	4b38      	ldr	r3, [pc, #224]	; (60cc <hop+0x114>)
    5fec:	881b      	ldrh	r3, [r3, #0]
    5fee:	b29b      	uxth	r3, r3
    5ff0:	3320      	adds	r3, #32
    5ff2:	b29a      	uxth	r2, r3
    5ff4:	4b35      	ldr	r3, [pc, #212]	; (60cc <hop+0x114>)
    5ff6:	801a      	strh	r2, [r3, #0]
		if (channel > 2480)
    5ff8:	4b34      	ldr	r3, [pc, #208]	; (60cc <hop+0x114>)
    5ffa:	881b      	ldrh	r3, [r3, #0]
    5ffc:	b29b      	uxth	r3, r3
    5ffe:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
    6002:	d935      	bls.n	6070 <hop+0xb8>
			channel -= 79;
    6004:	4b31      	ldr	r3, [pc, #196]	; (60cc <hop+0x114>)
    6006:	881b      	ldrh	r3, [r3, #0]
    6008:	b29b      	uxth	r3, r3
    600a:	3b4f      	subs	r3, #79	; 0x4f
    600c:	b29a      	uxth	r2, r3
    600e:	4b2f      	ldr	r3, [pc, #188]	; (60cc <hop+0x114>)
    6010:	801a      	strh	r2, [r3, #0]
    6012:	e02d      	b.n	6070 <hop+0xb8>
	}

	else if (hop_mode == HOP_BLUETOOTH) {
    6014:	4b2c      	ldr	r3, [pc, #176]	; (60c8 <hop+0x110>)
    6016:	781b      	ldrb	r3, [r3, #0]
    6018:	2b02      	cmp	r3, #2
    601a:	d10d      	bne.n	6038 <hop+0x80>
		TXLED_SET;
    601c:	4b2c      	ldr	r3, [pc, #176]	; (60d0 <hop+0x118>)
    601e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6022:	601a      	str	r2, [r3, #0]
		channel = next_hop(clkn);
    6024:	4b2b      	ldr	r3, [pc, #172]	; (60d4 <hop+0x11c>)
    6026:	681b      	ldr	r3, [r3, #0]
    6028:	4618      	mov	r0, r3
    602a:	f002 f857 	bl	80dc <next_hop>
    602e:	4603      	mov	r3, r0
    6030:	461a      	mov	r2, r3
    6032:	4b26      	ldr	r3, [pc, #152]	; (60cc <hop+0x114>)
    6034:	801a      	strh	r2, [r3, #0]
    6036:	e01b      	b.n	6070 <hop+0xb8>
	}

	else if (hop_mode == HOP_BTLE) {
    6038:	4b23      	ldr	r3, [pc, #140]	; (60c8 <hop+0x110>)
    603a:	781b      	ldrb	r3, [r3, #0]
    603c:	2b03      	cmp	r3, #3
    603e:	d10b      	bne.n	6058 <hop+0xa0>
		TXLED_SET;
    6040:	4b23      	ldr	r3, [pc, #140]	; (60d0 <hop+0x118>)
    6042:	f44f 7280 	mov.w	r2, #256	; 0x100
    6046:	601a      	str	r2, [r3, #0]
		channel = btle_next_hop(&le);
    6048:	4823      	ldr	r0, [pc, #140]	; (60d8 <hop+0x120>)
    604a:	f002 f90d 	bl	8268 <btle_next_hop>
    604e:	4603      	mov	r3, r0
    6050:	461a      	mov	r2, r3
    6052:	4b1e      	ldr	r3, [pc, #120]	; (60cc <hop+0x114>)
    6054:	801a      	strh	r2, [r3, #0]
    6056:	e00b      	b.n	6070 <hop+0xb8>
	}

	else if (hop_mode == HOP_DIRECT) {
    6058:	4b1b      	ldr	r3, [pc, #108]	; (60c8 <hop+0x110>)
    605a:	781b      	ldrb	r3, [r3, #0]
    605c:	2b04      	cmp	r3, #4
    605e:	d107      	bne.n	6070 <hop+0xb8>
		TXLED_SET;
    6060:	4b1b      	ldr	r3, [pc, #108]	; (60d0 <hop+0x118>)
    6062:	f44f 7280 	mov.w	r2, #256	; 0x100
    6066:	601a      	str	r2, [r3, #0]
		channel = hop_direct_channel;
    6068:	4b1c      	ldr	r3, [pc, #112]	; (60dc <hop+0x124>)
    606a:	881a      	ldrh	r2, [r3, #0]
    606c:	4b17      	ldr	r3, [pc, #92]	; (60cc <hop+0x114>)
    606e:	801a      	strh	r2, [r3, #0]
	}

        /* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    6070:	2064      	movs	r0, #100	; 0x64
    6072:	f003 fddb 	bl	9c2c <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    6076:	bf00      	nop
    6078:	f003 fdce 	bl	9c18 <cc2400_status>
    607c:	4603      	mov	r3, r0
    607e:	f003 0304 	and.w	r3, r3, #4
    6082:	2b00      	cmp	r3, #0
    6084:	d1f8      	bne.n	6078 <hop+0xc0>

	/* Retune */
	cc2400_set(FSDIV, channel - 1);
    6086:	4b11      	ldr	r3, [pc, #68]	; (60cc <hop+0x114>)
    6088:	881b      	ldrh	r3, [r3, #0]
    608a:	b29b      	uxth	r3, r3
    608c:	3b01      	subs	r3, #1
    608e:	b29b      	uxth	r3, r3
    6090:	2002      	movs	r0, #2
    6092:	4619      	mov	r1, r3
    6094:	f003 fd08 	bl	9aa8 <cc2400_set>
	
	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    6098:	4b0b      	ldr	r3, [pc, #44]	; (60c8 <hop+0x110>)
    609a:	781b      	ldrb	r3, [r3, #0]
    609c:	2b00      	cmp	r3, #0
    609e:	d001      	beq.n	60a4 <hop+0xec>
		cs_threshold_calc_and_set();
    60a0:	f7fe fb06 	bl	46b0 <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    60a4:	2061      	movs	r0, #97	; 0x61
    60a6:	f003 fdc1 	bl	9c2c <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    60aa:	bf00      	nop
    60ac:	f003 fdb4 	bl	9c18 <cc2400_status>
    60b0:	4603      	mov	r3, r0
    60b2:	f003 0304 	and.w	r3, r3, #4
    60b6:	2b00      	cmp	r3, #0
    60b8:	d0f8      	beq.n	60ac <hop+0xf4>
	
	/* RX mode */
	cc2400_strobe(SRX);
    60ba:	2062      	movs	r0, #98	; 0x62
    60bc:	f003 fdb6 	bl	9c2c <cc2400_strobe>

}
    60c0:	bd80      	pop	{r7, pc}
    60c2:	bf00      	nop
    60c4:	1000097d 	.word	0x1000097d
    60c8:	1000097c 	.word	0x1000097c
    60cc:	1000049c 	.word	0x1000049c
    60d0:	2009c038 	.word	0x2009c038
    60d4:	10000be4 	.word	0x10000be4
    60d8:	10000458 	.word	0x10000458
    60dc:	10000980 	.word	0x10000980

000060e0 <cc2400_spi_rev>:


u32 cc2400_spi_rev(u8 len, u32 data)
{
    60e0:	b480      	push	{r7}
    60e2:	b085      	sub	sp, #20
    60e4:	af00      	add	r7, sp, #0
    60e6:	4603      	mov	r3, r0
    60e8:	6039      	str	r1, [r7, #0]
    60ea:	71fb      	strb	r3, [r7, #7]
    //    u32 first_ts, second_ts, diff;


        u32 msb = 1 << (len - 1);
    60ec:	79fb      	ldrb	r3, [r7, #7]
    60ee:	3b01      	subs	r3, #1
    60f0:	2201      	movs	r2, #1
    60f2:	fa02 f303 	lsl.w	r3, r2, r3
    60f6:	60fb      	str	r3, [r7, #12]

        /* start transaction by dropping CSN */
        CSN_CLR;
    60f8:	4b18      	ldr	r3, [pc, #96]	; (615c <cc2400_spi_rev+0x7c>)
    60fa:	2220      	movs	r2, #32
    60fc:	601a      	str	r2, [r3, #0]
	
//	first_ts = CLK100NS;
        while (len--) {
    60fe:	e01e      	b.n	613e <cc2400_spi_rev+0x5e>
                if (data & msb)
    6100:	683a      	ldr	r2, [r7, #0]
    6102:	68fb      	ldr	r3, [r7, #12]
    6104:	4013      	ands	r3, r2
    6106:	2b00      	cmp	r3, #0
    6108:	d003      	beq.n	6112 <cc2400_spi_rev+0x32>
                        MOSI_SET;
    610a:	4b15      	ldr	r3, [pc, #84]	; (6160 <cc2400_spi_rev+0x80>)
    610c:	2201      	movs	r2, #1
    610e:	601a      	str	r2, [r3, #0]
    6110:	e002      	b.n	6118 <cc2400_spi_rev+0x38>
                else
                        MOSI_CLR;
    6112:	4b12      	ldr	r3, [pc, #72]	; (615c <cc2400_spi_rev+0x7c>)
    6114:	2201      	movs	r2, #1
    6116:	601a      	str	r2, [r3, #0]
                data <<= 1;
    6118:	683b      	ldr	r3, [r7, #0]
    611a:	005b      	lsls	r3, r3, #1
    611c:	603b      	str	r3, [r7, #0]

                SCLK_SET;
    611e:	4b10      	ldr	r3, [pc, #64]	; (6160 <cc2400_spi_rev+0x80>)
    6120:	2210      	movs	r2, #16
    6122:	601a      	str	r2, [r3, #0]
                if (MISO)
    6124:	4b0f      	ldr	r3, [pc, #60]	; (6164 <cc2400_spi_rev+0x84>)
    6126:	681b      	ldr	r3, [r3, #0]
    6128:	f003 0302 	and.w	r3, r3, #2
    612c:	2b00      	cmp	r3, #0
    612e:	d003      	beq.n	6138 <cc2400_spi_rev+0x58>
                        data |= 1;
    6130:	683b      	ldr	r3, [r7, #0]
    6132:	f043 0301 	orr.w	r3, r3, #1
    6136:	603b      	str	r3, [r7, #0]

                SCLK_CLR;
    6138:	4b08      	ldr	r3, [pc, #32]	; (615c <cc2400_spi_rev+0x7c>)
    613a:	2210      	movs	r2, #16
    613c:	601a      	str	r2, [r3, #0]

        /* start transaction by dropping CSN */
        CSN_CLR;
	
//	first_ts = CLK100NS;
        while (len--) {
    613e:	79fb      	ldrb	r3, [r7, #7]
    6140:	1e5a      	subs	r2, r3, #1
    6142:	71fa      	strb	r2, [r7, #7]
    6144:	2b00      	cmp	r3, #0
    6146:	d1db      	bne.n	6100 <cc2400_spi_rev+0x20>
                SCLK_CLR;
        }
//	second_ts = CLK100NS;
//	diff_ts = second_ts - first_ts;

	CSN_SET;
    6148:	4b05      	ldr	r3, [pc, #20]	; (6160 <cc2400_spi_rev+0x80>)
    614a:	2220      	movs	r2, #32
    614c:	601a      	str	r2, [r3, #0]
	return data;
    614e:	683b      	ldr	r3, [r7, #0]
}
    6150:	4618      	mov	r0, r3
    6152:	3714      	adds	r7, #20
    6154:	46bd      	mov	sp, r7
    6156:	f85d 7b04 	ldr.w	r7, [sp], #4
    615a:	4770      	bx	lr
    615c:	2009c05c 	.word	0x2009c05c
    6160:	2009c058 	.word	0x2009c058
    6164:	2009c054 	.word	0x2009c054

00006168 <cc2400_get_rev>:



u8 cc2400_get_rev(u8 reg)
{
    6168:	b580      	push	{r7, lr}
    616a:	b084      	sub	sp, #16
    616c:	af00      	add	r7, sp, #0
    616e:	4603      	mov	r3, r0
    6170:	71fb      	strb	r3, [r7, #7]
        u32 in;

        u32 out = (reg | 0x80) << 8;
    6172:	79fb      	ldrb	r3, [r7, #7]
    6174:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6178:	b2db      	uxtb	r3, r3
    617a:	021b      	lsls	r3, r3, #8
    617c:	60fb      	str	r3, [r7, #12]
        in = cc2400_spi_rev(16, out);
    617e:	2010      	movs	r0, #16
    6180:	68f9      	ldr	r1, [r7, #12]
    6182:	f7ff ffad 	bl	60e0 <cc2400_spi_rev>
    6186:	60b8      	str	r0, [r7, #8]
        return in & 0xFF;
    6188:	68bb      	ldr	r3, [r7, #8]
    618a:	b2db      	uxtb	r3, r3
}
    618c:	4618      	mov	r0, r3
    618e:	3710      	adds	r7, #16
    6190:	46bd      	mov	sp, r7
    6192:	bd80      	pop	{r7, pc}

00006194 <add>:
  return result;
}
*/

u8 add (u8 x, u8 y)
{
    6194:	b480      	push	{r7}
    6196:	b085      	sub	sp, #20
    6198:	af00      	add	r7, sp, #0
    619a:	4603      	mov	r3, r0
    619c:	460a      	mov	r2, r1
    619e:	71fb      	strb	r3, [r7, #7]
    61a0:	4613      	mov	r3, r2
    61a2:	71bb      	strb	r3, [r7, #6]
  while (y)
    61a4:	e00a      	b.n	61bc <add+0x28>
  {
    u8 carry = x & y;
    61a6:	79fa      	ldrb	r2, [r7, #7]
    61a8:	79bb      	ldrb	r3, [r7, #6]
    61aa:	4013      	ands	r3, r2
    61ac:	73fb      	strb	r3, [r7, #15]
    x = x ^ y;
    61ae:	79fa      	ldrb	r2, [r7, #7]
    61b0:	79bb      	ldrb	r3, [r7, #6]
    61b2:	4053      	eors	r3, r2
    61b4:	71fb      	strb	r3, [r7, #7]
    y = carry << 1;
    61b6:	7bfb      	ldrb	r3, [r7, #15]
    61b8:	005b      	lsls	r3, r3, #1
    61ba:	71bb      	strb	r3, [r7, #6]
}
*/

u8 add (u8 x, u8 y)
{
  while (y)
    61bc:	79bb      	ldrb	r3, [r7, #6]
    61be:	2b00      	cmp	r3, #0
    61c0:	d1f1      	bne.n	61a6 <add+0x12>
  {
    u8 carry = x & y;
    x = x ^ y;
    y = carry << 1;
  }
  return x;
    61c2:	79fb      	ldrb	r3, [r7, #7]
}
    61c4:	4618      	mov	r0, r3
    61c6:	3714      	adds	r7, #20
    61c8:	46bd      	mov	sp, r7
    61ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    61ce:	4770      	bx	lr

000061d0 <bt_stream_rx>:
/* Bluetooth packet monitoring */
// wpson
void bt_stream_rx()
{
    61d0:	b590      	push	{r4, r7, lr}
    61d2:	b091      	sub	sp, #68	; 0x44
    61d4:	af00      	add	r7, sp, #0
	u8 epstat;
//	u16 f;
//	u8 buf[DMA_SIZE];
	u8 rssi[50];
	int i = 0;
    61d6:	2300      	movs	r3, #0
    61d8:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (i = 0; i < 50; i++)
    61da:	2300      	movs	r3, #0
    61dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    61de:	e007      	b.n	61f0 <bt_stream_rx+0x20>
		rssi[i] = 0;
    61e0:	463a      	mov	r2, r7
    61e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    61e4:	4413      	add	r3, r2
    61e6:	2200      	movs	r2, #0
    61e8:	701a      	strb	r2, [r3, #0]
	u8 epstat;
//	u16 f;
//	u8 buf[DMA_SIZE];
	u8 rssi[50];
	int i = 0;
	for (i = 0; i < 50; i++)
    61ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    61ec:	3301      	adds	r3, #1
    61ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    61f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    61f2:	2b31      	cmp	r3, #49	; 0x31
    61f4:	ddf4      	ble.n	61e0 <bt_stream_rx+0x10>
		rssi[i] = 0;
//	u8 length = 50;
	int window = 0;
    61f6:	2300      	movs	r3, #0
    61f8:	63bb      	str	r3, [r7, #56]	; 0x38
//	u8 index = 0;
	u8 old = 0;
    61fa:	2300      	movs	r3, #0
    61fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	u8 now = 0;
    6200:	2300      	movs	r3, #0
    6202:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	u8 diff = 0;
    6206:	2300      	movs	r3, #0
    6208:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	u8 k = 0;
    620c:	2300      	movs	r3, #0
    620e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	u8 temp = 0;
    6212:	2300      	movs	r3, #0
    6214:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
//	TXLED_SET;
	queue_init();
    6218:	f002 f9ce 	bl	85b8 <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    621c:	4b69      	ldr	r3, [pc, #420]	; (63c4 <bt_stream_rx+0x1f4>)
    621e:	2280      	movs	r2, #128	; 0x80
    6220:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif
	cc2400_set(MANAND, 0x7fff);
    6222:	200d      	movs	r0, #13
    6224:	f647 71ff 	movw	r1, #32767	; 0x7fff
    6228:	f003 fc3e 	bl	9aa8 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    622c:	2012      	movs	r0, #18
    622e:	f642 3122 	movw	r1, #11042	; 0x2b22
    6232:	f003 fc39 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    6236:	2014      	movs	r0, #20
    6238:	f241 214b 	movw	r1, #4683	; 0x124b
    623c:	f003 fc34 	bl	9aa8 <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    6240:	2020      	movs	r0, #32
    6242:	f240 5161 	movw	r1, #1377	; 0x561
    6246:	f003 fc2f 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    624a:	2003      	movs	r0, #3
    624c:	2140      	movs	r1, #64	; 0x40
    624e:	f003 fc2b 	bl	9aa8 <cc2400_set>
//	cc2400_set(SYNCL, 0x00ff);
	
//	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
//	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
	
	while (!(cc2400_status() & XOSC16M_STABLE));
    6252:	bf00      	nop
    6254:	f003 fce0 	bl	9c18 <cc2400_status>
    6258:	4603      	mov	r3, r0
    625a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    625e:	2b00      	cmp	r3, #0
    6260:	d0f8      	beq.n	6254 <bt_stream_rx+0x84>
	while ((cc2400_status() & FS_LOCK));
    6262:	bf00      	nop
    6264:	f003 fcd8 	bl	9c18 <cc2400_status>
    6268:	4603      	mov	r3, r0
    626a:	f003 0304 	and.w	r3, r3, #4
    626e:	2b00      	cmp	r3, #0
    6270:	d1f8      	bne.n	6264 <bt_stream_rx+0x94>

	cc2400_set(FSDIV, channel - 1);
    6272:	4b55      	ldr	r3, [pc, #340]	; (63c8 <bt_stream_rx+0x1f8>)
    6274:	881b      	ldrh	r3, [r3, #0]
    6276:	b29b      	uxth	r3, r3
    6278:	3b01      	subs	r3, #1
    627a:	b29b      	uxth	r3, r3
    627c:	2002      	movs	r0, #2
    627e:	4619      	mov	r1, r3
    6280:	f003 fc12 	bl	9aa8 <cc2400_set>
	cc2400_strobe(SFSON);
    6284:	2061      	movs	r0, #97	; 0x61
    6286:	f003 fcd1 	bl	9c2c <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    628a:	bf00      	nop
    628c:	f003 fcc4 	bl	9c18 <cc2400_status>
    6290:	4603      	mov	r3, r0
    6292:	f003 0304 	and.w	r3, r3, #4
    6296:	2b00      	cmp	r3, #0
    6298:	d0f8      	beq.n	628c <bt_stream_rx+0xbc>
	cc2400_strobe(SRX);
    629a:	2062      	movs	r0, #98	; 0x62
    629c:	f003 fcc6 	bl	9c2c <cc2400_strobe>
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    62a0:	e083      	b.n	63aa <bt_stream_rx+0x1da>
	
//		while (!(cc2400_status () & SYNC_RECEIVED));	
		window = 0;
    62a2:	2300      	movs	r3, #0
    62a4:	63bb      	str	r3, [r7, #56]	; 0x38
		old = 0;
    62a6:	2300      	movs	r3, #0
    62a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		now = 0;
    62ac:	2300      	movs	r3, #0
    62ae:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		diff = 0;
    62b2:	2300      	movs	r3, #0
    62b4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		

//		diff_ts = CLK100NS - first_ts;
//wpson
		while (window < 10)
    62b8:	e034      	b.n	6324 <bt_stream_rx+0x154>
		{
		
			now = cc2400_get_rev(FREQEST);	 
    62ba:	2007      	movs	r0, #7
    62bc:	f7ff ff54 	bl	6168 <cc2400_get_rev>
    62c0:	4603      	mov	r3, r0
    62c2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		//	diff = add (now, 0xfa); // 1->6
		//	diff = add (now, 0xf9); // 2->7
		//	diff = add (now, 0xfc); // 3->4
		//	diff = add (now, 0xfb); // 4->5
			diff = add (now, 0xf8); // 5->8
    62c6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    62ca:	4618      	mov	r0, r3
    62cc:	21f8      	movs	r1, #248	; 0xf8
    62ce:	f7ff ff61 	bl	6194 <add>
    62d2:	4603      	mov	r3, r0
    62d4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			if (diff & 0x80) 
    62d8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    62dc:	b25b      	sxtb	r3, r3
    62de:	2b00      	cmp	r3, #0
    62e0:	da0a      	bge.n	62f8 <bt_stream_rx+0x128>
				diff = add (~diff, 1);	
    62e2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    62e6:	43db      	mvns	r3, r3
    62e8:	b2db      	uxtb	r3, r3
    62ea:	4618      	mov	r0, r3
    62ec:	2101      	movs	r1, #1
    62ee:	f7ff ff51 	bl	6194 <add>
    62f2:	4603      	mov	r3, r0
    62f4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

			if (diff < 0x05)
    62f8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    62fc:	2b04      	cmp	r3, #4
    62fe:	d803      	bhi.n	6308 <bt_stream_rx+0x138>
				window++;
    6300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6302:	3301      	adds	r3, #1
    6304:	63bb      	str	r3, [r7, #56]	; 0x38
    6306:	e00d      	b.n	6324 <bt_stream_rx+0x154>
			else
			{
				old++;
    6308:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    630c:	3301      	adds	r3, #1
    630e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				if (old > 1)
    6312:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    6316:	2b01      	cmp	r3, #1
    6318:	d904      	bls.n	6324 <bt_stream_rx+0x154>
				{
					old = 0;
    631a:	2300      	movs	r3, #0
    631c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					window = 0;
    6320:	2300      	movs	r3, #0
    6322:	63bb      	str	r3, [r7, #56]	; 0x38
		diff = 0;
		

//		diff_ts = CLK100NS - first_ts;
//wpson
		while (window < 10)
    6324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6326:	2b09      	cmp	r3, #9
    6328:	ddc7      	ble.n	62ba <bt_stream_rx+0xea>

	//	if (now >= 0 && now <= 3)
		{
	
//			first_ts = CLK100NS;
			rssi_avg = ((int8_t)cc2400_get_rev(RSSI) + (int8_t)cc2400_get_rev(RSSI))/2;
    632a:	2006      	movs	r0, #6
    632c:	f7ff ff1c 	bl	6168 <cc2400_get_rev>
    6330:	4603      	mov	r3, r0
    6332:	b2db      	uxtb	r3, r3
    6334:	b25c      	sxtb	r4, r3
    6336:	2006      	movs	r0, #6
    6338:	f7ff ff16 	bl	6168 <cc2400_get_rev>
    633c:	4603      	mov	r3, r0
    633e:	b2db      	uxtb	r3, r3
    6340:	b25b      	sxtb	r3, r3
    6342:	4423      	add	r3, r4
    6344:	0fda      	lsrs	r2, r3, #31
    6346:	4413      	add	r3, r2
    6348:	105b      	asrs	r3, r3, #1
    634a:	b2da      	uxtb	r2, r3
    634c:	4b1f      	ldr	r3, [pc, #124]	; (63cc <bt_stream_rx+0x1fc>)
    634e:	701a      	strb	r2, [r3, #0]
//			freq_avg = now;
	
//			diff_ts = second_ts - first_ts;
			enqueue_with_ts(FREQ_PACKET, rssi, diff_ts);
    6350:	4b1f      	ldr	r3, [pc, #124]	; (63d0 <bt_stream_rx+0x200>)
    6352:	681b      	ldr	r3, [r3, #0]
    6354:	463a      	mov	r2, r7
    6356:	2007      	movs	r0, #7
    6358:	4611      	mov	r1, r2
    635a:	461a      	mov	r2, r3
    635c:	f7fe f95e 	bl	461c <enqueue_with_ts>
			handle_usb(clkn);
    6360:	4b1c      	ldr	r3, [pc, #112]	; (63d4 <bt_stream_rx+0x204>)
    6362:	681b      	ldr	r3, [r3, #0]
    6364:	4618      	mov	r0, r3
    6366:	f002 f9c7 	bl	86f8 <handle_usb>
		}

		first_ts = CLK100NS;
    636a:	4b1a      	ldr	r3, [pc, #104]	; (63d4 <bt_stream_rx+0x204>)
    636c:	681b      	ldr	r3, [r3, #0]
    636e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6372:	f640 4235 	movw	r2, #3125	; 0xc35
    6376:	fb02 f203 	mul.w	r2, r2, r3
    637a:	4b17      	ldr	r3, [pc, #92]	; (63d8 <bt_stream_rx+0x208>)
    637c:	681b      	ldr	r3, [r3, #0]
    637e:	4413      	add	r3, r2
    6380:	4a16      	ldr	r2, [pc, #88]	; (63dc <bt_stream_rx+0x20c>)
    6382:	6013      	str	r3, [r2, #0]
		while ((CLK100NS-first_ts)<3000)
    6384:	bf00      	nop
    6386:	4b13      	ldr	r3, [pc, #76]	; (63d4 <bt_stream_rx+0x204>)
    6388:	681b      	ldr	r3, [r3, #0]
    638a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    638e:	f640 4235 	movw	r2, #3125	; 0xc35
    6392:	fb02 f203 	mul.w	r2, r2, r3
    6396:	4b10      	ldr	r3, [pc, #64]	; (63d8 <bt_stream_rx+0x208>)
    6398:	681b      	ldr	r3, [r3, #0]
    639a:	441a      	add	r2, r3
    639c:	4b0f      	ldr	r3, [pc, #60]	; (63dc <bt_stream_rx+0x20c>)
    639e:	681b      	ldr	r3, [r3, #0]
    63a0:	1ad3      	subs	r3, r2, r3
    63a2:	f640 32b7 	movw	r2, #2999	; 0xbb7
    63a6:	4293      	cmp	r3, r2
    63a8:	d9ed      	bls.n	6386 <bt_stream_rx+0x1b6>
	cc2400_set(FSDIV, channel - 1);
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    63aa:	4b0d      	ldr	r3, [pc, #52]	; (63e0 <bt_stream_rx+0x210>)
    63ac:	781b      	ldrb	r3, [r3, #0]
    63ae:	b2db      	uxtb	r3, r3
    63b0:	2b01      	cmp	r3, #1
    63b2:	f43f af76 	beq.w	62a2 <bt_stream_rx+0xd2>
	
//		msleep(500);	
		cc2400_strobe (SRX);
*/
	}
	mode = MODE_IDLE;
    63b6:	4b0b      	ldr	r3, [pc, #44]	; (63e4 <bt_stream_rx+0x214>)
    63b8:	2200      	movs	r2, #0
    63ba:	701a      	strb	r2, [r3, #0]
}
    63bc:	3744      	adds	r7, #68	; 0x44
    63be:	46bd      	mov	sp, r7
    63c0:	bd90      	pop	{r4, r7, pc}
    63c2:	bf00      	nop
    63c4:	2009c058 	.word	0x2009c058
    63c8:	1000049c 	.word	0x1000049c
    63cc:	1000102d 	.word	0x1000102d
    63d0:	10001068 	.word	0x10001068
    63d4:	10000be4 	.word	0x10000be4
    63d8:	40004008 	.word	0x40004008
    63dc:	10000cf8 	.word	0x10000cf8
    63e0:	10000a3f 	.word	0x10000a3f
    63e4:	10000a3e 	.word	0x10000a3e

000063e8 <le_set_access_address>:


/* set LE access address */
static void le_set_access_address(u32 aa) {
    63e8:	b580      	push	{r7, lr}
    63ea:	b084      	sub	sp, #16
    63ec:	af00      	add	r7, sp, #0
    63ee:	6078      	str	r0, [r7, #4]
	u32 aa_rev;

	le.access_address = aa;
    63f0:	4a09      	ldr	r2, [pc, #36]	; (6418 <le_set_access_address+0x30>)
    63f2:	687b      	ldr	r3, [r7, #4]
    63f4:	6013      	str	r3, [r2, #0]
	aa_rev = rbit(aa);
    63f6:	6878      	ldr	r0, [r7, #4]
    63f8:	f003 f984 	bl	9704 <rbit>
    63fc:	60f8      	str	r0, [r7, #12]
	le.syncl = aa_rev & 0xffff;
    63fe:	68fb      	ldr	r3, [r7, #12]
    6400:	b29a      	uxth	r2, r3
    6402:	4b05      	ldr	r3, [pc, #20]	; (6418 <le_set_access_address+0x30>)
    6404:	80da      	strh	r2, [r3, #6]
	le.synch = aa_rev >> 16;
    6406:	68fb      	ldr	r3, [r7, #12]
    6408:	0c1b      	lsrs	r3, r3, #16
    640a:	b29a      	uxth	r2, r3
    640c:	4b02      	ldr	r3, [pc, #8]	; (6418 <le_set_access_address+0x30>)
    640e:	809a      	strh	r2, [r3, #4]
}
    6410:	3710      	adds	r7, #16
    6412:	46bd      	mov	sp, r7
    6414:	bd80      	pop	{r7, pc}
    6416:	bf00      	nop
    6418:	10000458 	.word	0x10000458

0000641c <reset_le>:

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    641c:	b580      	push	{r7, lr}
    641e:	af00      	add	r7, sp, #0
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    6420:	481f      	ldr	r0, [pc, #124]	; (64a0 <reset_le+0x84>)
    6422:	f7ff ffe1 	bl	63e8 <le_set_access_address>
	le.crc_init  = 0x555555;	       // advertising channel CRCInit
    6426:	4b1f      	ldr	r3, [pc, #124]	; (64a4 <reset_le+0x88>)
    6428:	4a1f      	ldr	r2, [pc, #124]	; (64a8 <reset_le+0x8c>)
    642a:	609a      	str	r2, [r3, #8]
	le.crc_init_reversed = 0xAAAAAA;
    642c:	4b1d      	ldr	r3, [pc, #116]	; (64a4 <reset_le+0x88>)
    642e:	4a1f      	ldr	r2, [pc, #124]	; (64ac <reset_le+0x90>)
    6430:	60da      	str	r2, [r3, #12]
	le.crc_verify = 1;
    6432:	4b1c      	ldr	r3, [pc, #112]	; (64a4 <reset_le+0x88>)
    6434:	2201      	movs	r2, #1
    6436:	611a      	str	r2, [r3, #16]
	le.last_packet = 0;
    6438:	4b1a      	ldr	r3, [pc, #104]	; (64a4 <reset_le+0x88>)
    643a:	2200      	movs	r2, #0
    643c:	641a      	str	r2, [r3, #64]	; 0x40

	le.link_state = LINK_INACTIVE;
    643e:	4b19      	ldr	r3, [pc, #100]	; (64a4 <reset_le+0x88>)
    6440:	2200      	movs	r2, #0
    6442:	751a      	strb	r2, [r3, #20]

	le.channel_idx = 0;
    6444:	4b17      	ldr	r3, [pc, #92]	; (64a4 <reset_le+0x88>)
    6446:	2200      	movs	r2, #0
    6448:	755a      	strb	r2, [r3, #21]
	le.channel_increment = 0;
    644a:	4b16      	ldr	r3, [pc, #88]	; (64a4 <reset_le+0x88>)
    644c:	2200      	movs	r2, #0
    644e:	759a      	strb	r2, [r3, #22]

	le.conn_epoch = 0;
    6450:	4b14      	ldr	r3, [pc, #80]	; (64a4 <reset_le+0x88>)
    6452:	2200      	movs	r2, #0
    6454:	619a      	str	r2, [r3, #24]
	le.interval_timer = 0;
    6456:	4b13      	ldr	r3, [pc, #76]	; (64a4 <reset_le+0x88>)
    6458:	2200      	movs	r2, #0
    645a:	839a      	strh	r2, [r3, #28]
	le.conn_interval = 0;
    645c:	4b11      	ldr	r3, [pc, #68]	; (64a4 <reset_le+0x88>)
    645e:	2200      	movs	r2, #0
    6460:	83da      	strh	r2, [r3, #30]
	le.conn_interval = 0;
    6462:	4b10      	ldr	r3, [pc, #64]	; (64a4 <reset_le+0x88>)
    6464:	2200      	movs	r2, #0
    6466:	83da      	strh	r2, [r3, #30]
	le.conn_count = 0;
    6468:	4b0e      	ldr	r3, [pc, #56]	; (64a4 <reset_le+0x88>)
    646a:	2200      	movs	r2, #0
    646c:	841a      	strh	r2, [r3, #32]

	le.win_size = 0;
    646e:	4b0d      	ldr	r3, [pc, #52]	; (64a4 <reset_le+0x88>)
    6470:	2200      	movs	r2, #0
    6472:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	le.win_offset = 0;
    6476:	4b0b      	ldr	r3, [pc, #44]	; (64a4 <reset_le+0x88>)
    6478:	2200      	movs	r2, #0
    647a:	849a      	strh	r2, [r3, #36]	; 0x24

	le.update_pending = 0;
    647c:	4b09      	ldr	r3, [pc, #36]	; (64a4 <reset_le+0x88>)
    647e:	2200      	movs	r2, #0
    6480:	629a      	str	r2, [r3, #40]	; 0x28
	le.update_instant = 0;
    6482:	4b08      	ldr	r3, [pc, #32]	; (64a4 <reset_le+0x88>)
    6484:	2200      	movs	r2, #0
    6486:	859a      	strh	r2, [r3, #44]	; 0x2c
	le.interval_update = 0;
    6488:	4b06      	ldr	r3, [pc, #24]	; (64a4 <reset_le+0x88>)
    648a:	2200      	movs	r2, #0
    648c:	85da      	strh	r2, [r3, #46]	; 0x2e
	le.win_size_update = 0;
    648e:	4b05      	ldr	r3, [pc, #20]	; (64a4 <reset_le+0x88>)
    6490:	2200      	movs	r2, #0
    6492:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	le.win_offset_update;

	do_hop = 0;
    6496:	4b06      	ldr	r3, [pc, #24]	; (64b0 <reset_le+0x94>)
    6498:	2200      	movs	r2, #0
    649a:	701a      	strb	r2, [r3, #0]
}
    649c:	bd80      	pop	{r7, pc}
    649e:	bf00      	nop
    64a0:	8e89bed6 	.word	0x8e89bed6
    64a4:	10000458 	.word	0x10000458
    64a8:	00555555 	.word	0x00555555
    64ac:	00aaaaaa 	.word	0x00aaaaaa
    64b0:	1000097d 	.word	0x1000097d

000064b4 <reset_le_promisc>:

// reset LE Promisc state
void reset_le_promisc(void) {
    64b4:	b580      	push	{r7, lr}
    64b6:	af00      	add	r7, sp, #0
	memset(&le_promisc, 0, sizeof(le_promisc));
    64b8:	4805      	ldr	r0, [pc, #20]	; (64d0 <reset_le_promisc+0x1c>)
    64ba:	2100      	movs	r1, #0
    64bc:	f44f 7284 	mov.w	r2, #264	; 0x108
    64c0:	f7fd fe5a 	bl	4178 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    64c4:	4b02      	ldr	r3, [pc, #8]	; (64d0 <reset_le_promisc+0x1c>)
    64c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    64ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    64ce:	bd80      	pop	{r7, pc}
    64d0:	10000bf0 	.word	0x10000bf0

000064d4 <bt_generic_le>:

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    64d4:	b580      	push	{r7, lr}
    64d6:	b088      	sub	sp, #32
    64d8:	af00      	add	r7, sp, #0
    64da:	4603      	mov	r3, r0
    64dc:	71fb      	strb	r3, [r7, #7]
	u8 *tmp = NULL;
    64de:	2300      	movs	r3, #0
    64e0:	60fb      	str	r3, [r7, #12]
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    64e2:	4ba4      	ldr	r3, [pc, #656]	; (6774 <bt_generic_le+0x2a0>)
    64e4:	2201      	movs	r2, #1
    64e6:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    64e8:	4aa3      	ldr	r2, [pc, #652]	; (6778 <bt_generic_le+0x2a4>)
    64ea:	79fb      	ldrb	r3, [r7, #7]
    64ec:	7013      	strb	r3, [r2, #0]

	reset_le();
    64ee:	f7ff ff95 	bl	641c <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    64f2:	4ba2      	ldr	r3, [pc, #648]	; (677c <bt_generic_le+0x2a8>)
    64f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    64f8:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    64fa:	4ba1      	ldr	r3, [pc, #644]	; (6780 <bt_generic_le+0x2ac>)
    64fc:	2210      	movs	r2, #16
    64fe:	601a      	str	r2, [r3, #0]

	queue_init();
    6500:	f002 f85a 	bl	85b8 <queue_init>
	dio_ssp_init();
    6504:	f003 f9fe 	bl	9904 <dio_ssp_init>
	dma_init();
    6508:	f7fe ffda 	bl	54c0 <dma_init>
	dio_ssp_start();
    650c:	f7ff fa02 	bl	5914 <dio_ssp_start>
	cc2400_rx();
    6510:	f7ff fabc 	bl	5a8c <cc2400_rx>

	cs_trigger_enable();
    6514:	f7fe f906 	bl	4724 <cs_trigger_enable>

	hold = 0;
    6518:	2300      	movs	r3, #0
    651a:	77fb      	strb	r3, [r7, #31]

	while (requested_mode == active_mode) {
    651c:	e115      	b.n	674a <bt_generic_le+0x276>
		if (requested_channel != 0) {
    651e:	4b99      	ldr	r3, [pc, #612]	; (6784 <bt_generic_le+0x2b0>)
    6520:	881b      	ldrh	r3, [r3, #0]
    6522:	b29b      	uxth	r3, r3
    6524:	2b00      	cmp	r3, #0
    6526:	d024      	beq.n	6572 <bt_generic_le+0x9e>
			cc2400_strobe(SRFOFF);
    6528:	2064      	movs	r0, #100	; 0x64
    652a:	f003 fb7f 	bl	9c2c <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    652e:	bf00      	nop
    6530:	f003 fb72 	bl	9c18 <cc2400_status>
    6534:	4603      	mov	r3, r0
    6536:	f003 0304 	and.w	r3, r3, #4
    653a:	2b00      	cmp	r3, #0
    653c:	d1f8      	bne.n	6530 <bt_generic_le+0x5c>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    653e:	4b92      	ldr	r3, [pc, #584]	; (6788 <bt_generic_le+0x2b4>)
    6540:	881b      	ldrh	r3, [r3, #0]
    6542:	b29b      	uxth	r3, r3
    6544:	3b01      	subs	r3, #1
    6546:	b29b      	uxth	r3, r3
    6548:	2002      	movs	r0, #2
    654a:	4619      	mov	r1, r3
    654c:	f003 faac 	bl	9aa8 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    6550:	2061      	movs	r0, #97	; 0x61
    6552:	f003 fb6b 	bl	9c2c <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6556:	bf00      	nop
    6558:	f003 fb5e 	bl	9c18 <cc2400_status>
    655c:	4603      	mov	r3, r0
    655e:	f003 0304 	and.w	r3, r3, #4
    6562:	2b00      	cmp	r3, #0
    6564:	d0f8      	beq.n	6558 <bt_generic_le+0x84>

			/* RX mode */
			cc2400_strobe(SRX);
    6566:	2062      	movs	r0, #98	; 0x62
    6568:	f003 fb60 	bl	9c2c <cc2400_strobe>

			requested_channel = 0;
    656c:	4b85      	ldr	r3, [pc, #532]	; (6784 <bt_generic_le+0x2b0>)
    656e:	2200      	movs	r2, #0
    6570:	801a      	strh	r2, [r3, #0]
		}

		if (do_hop) {
    6572:	4b86      	ldr	r3, [pc, #536]	; (678c <bt_generic_le+0x2b8>)
    6574:	781b      	ldrb	r3, [r3, #0]
    6576:	b2db      	uxtb	r3, r3
    6578:	2b00      	cmp	r3, #0
    657a:	d002      	beq.n	6582 <bt_generic_le+0xae>
			hop();
    657c:	f7ff fd1c 	bl	5fb8 <hop>
    6580:	e003      	b.n	658a <bt_generic_le+0xb6>
		} else {
			TXLED_CLR;
    6582:	4b7f      	ldr	r3, [pc, #508]	; (6780 <bt_generic_le+0x2ac>)
    6584:	f44f 7280 	mov.w	r2, #256	; 0x100
    6588:	601a      	str	r2, [r3, #0]
		}

		RXLED_CLR;
    658a:	4b7d      	ldr	r3, [pc, #500]	; (6780 <bt_generic_le+0x2ac>)
    658c:	2210      	movs	r2, #16
    658e:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    6590:	f7fd feb8 	bl	4304 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    6594:	2380      	movs	r3, #128	; 0x80
    6596:	74bb      	strb	r3, [r7, #18]
		while ((rx_tc == 0) && (rx_err == 0))
    6598:	e022      	b.n	65e0 <bt_generic_le+0x10c>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    659a:	2006      	movs	r0, #6
    659c:	f003 fa6e 	bl	9a7c <cc2400_get>
    65a0:	4603      	mov	r3, r0
    65a2:	0a1b      	lsrs	r3, r3, #8
    65a4:	b29b      	uxth	r3, r3
    65a6:	74fb      	strb	r3, [r7, #19]
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    65a8:	4b79      	ldr	r3, [pc, #484]	; (6790 <bt_generic_le+0x2bc>)
    65aa:	781b      	ldrb	r3, [r3, #0]
    65ac:	b2db      	uxtb	r3, r3
    65ae:	2b00      	cmp	r3, #0
    65b0:	d011      	beq.n	65d6 <bt_generic_le+0x102>
    65b2:	f997 3012 	ldrsb.w	r3, [r7, #18]
    65b6:	f113 0f80 	cmn.w	r3, #128	; 0x80
    65ba:	d10c      	bne.n	65d6 <bt_generic_le+0x102>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    65bc:	4b75      	ldr	r3, [pc, #468]	; (6794 <bt_generic_le+0x2c0>)
    65be:	781b      	ldrb	r3, [r3, #0]
    65c0:	b25b      	sxtb	r3, r3
    65c2:	f103 0236 	add.w	r2, r3, #54	; 0x36
    65c6:	f997 3013 	ldrsb.w	r3, [r7, #19]
    65ca:	4293      	cmp	r3, r2
    65cc:	bfb8      	it	lt
    65ce:	4613      	movlt	r3, r2
    65d0:	74fb      	strb	r3, [r7, #19]
				rssi_at_trigger = rssi;
    65d2:	7cfb      	ldrb	r3, [r7, #19]
    65d4:	74bb      	strb	r3, [r7, #18]
			}
			rssi_add(rssi);
    65d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
    65da:	4618      	mov	r0, r3
    65dc:	f7fd feac 	bl	4338 <rssi_add>
		RXLED_CLR;

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
    65e0:	4b6d      	ldr	r3, [pc, #436]	; (6798 <bt_generic_le+0x2c4>)
    65e2:	681b      	ldr	r3, [r3, #0]
    65e4:	2b00      	cmp	r3, #0
    65e6:	d103      	bne.n	65f0 <bt_generic_le+0x11c>
    65e8:	4b6c      	ldr	r3, [pc, #432]	; (679c <bt_generic_le+0x2c8>)
    65ea:	681b      	ldr	r3, [r3, #0]
    65ec:	2b00      	cmp	r3, #0
    65ee:	d0d4      	beq.n	659a <bt_generic_le+0xc6>
			}
			rssi_add(rssi);
		}

		/* Keep buffer swapping in sync with DMA. */
		if (rx_tc % 2) {
    65f0:	4b69      	ldr	r3, [pc, #420]	; (6798 <bt_generic_le+0x2c4>)
    65f2:	681b      	ldr	r3, [r3, #0]
    65f4:	f003 0301 	and.w	r3, r3, #1
    65f8:	2b00      	cmp	r3, #0
    65fa:	d009      	beq.n	6610 <bt_generic_le+0x13c>
			tmp = active_rxbuf;
    65fc:	4b68      	ldr	r3, [pc, #416]	; (67a0 <bt_generic_le+0x2cc>)
    65fe:	681b      	ldr	r3, [r3, #0]
    6600:	60fb      	str	r3, [r7, #12]
			active_rxbuf = idle_rxbuf;
    6602:	4b68      	ldr	r3, [pc, #416]	; (67a4 <bt_generic_le+0x2d0>)
    6604:	681b      	ldr	r3, [r3, #0]
    6606:	4a66      	ldr	r2, [pc, #408]	; (67a0 <bt_generic_le+0x2cc>)
    6608:	6013      	str	r3, [r2, #0]
			idle_rxbuf = tmp;
    660a:	4a66      	ldr	r2, [pc, #408]	; (67a4 <bt_generic_le+0x2d0>)
    660c:	68fb      	ldr	r3, [r7, #12]
    660e:	6013      	str	r3, [r2, #0]
		}

		if (rx_err) {
    6610:	4b62      	ldr	r3, [pc, #392]	; (679c <bt_generic_le+0x2c8>)
    6612:	681b      	ldr	r3, [r3, #0]
    6614:	2b00      	cmp	r3, #0
    6616:	d007      	beq.n	6628 <bt_generic_le+0x154>
			status |= DMA_ERROR;
    6618:	4b63      	ldr	r3, [pc, #396]	; (67a8 <bt_generic_le+0x2d4>)
    661a:	781b      	ldrb	r3, [r3, #0]
    661c:	b2db      	uxtb	r3, r3
    661e:	f043 0302 	orr.w	r3, r3, #2
    6622:	b2da      	uxtb	r2, r3
    6624:	4b60      	ldr	r3, [pc, #384]	; (67a8 <bt_generic_le+0x2d4>)
    6626:	701a      	strb	r2, [r3, #0]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    6628:	4b5b      	ldr	r3, [pc, #364]	; (6798 <bt_generic_le+0x2c4>)
    662a:	681b      	ldr	r3, [r3, #0]
    662c:	2b00      	cmp	r3, #0
    662e:	d100      	bne.n	6632 <bt_generic_le+0x15e>
			goto rx_continue;
    6630:	e085      	b.n	673e <bt_generic_le+0x26a>

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    6632:	4b59      	ldr	r3, [pc, #356]	; (6798 <bt_generic_le+0x2c4>)
    6634:	681b      	ldr	r3, [r3, #0]
    6636:	2b01      	cmp	r3, #1
    6638:	d907      	bls.n	664a <bt_generic_le+0x176>
			status |= DMA_OVERFLOW;
    663a:	4b5b      	ldr	r3, [pc, #364]	; (67a8 <bt_generic_le+0x2d4>)
    663c:	781b      	ldrb	r3, [r3, #0]
    663e:	b2db      	uxtb	r3, r3
    6640:	f043 0301 	orr.w	r3, r3, #1
    6644:	b2da      	uxtb	r2, r3
    6646:	4b58      	ldr	r3, [pc, #352]	; (67a8 <bt_generic_le+0x2d4>)
    6648:	701a      	strb	r2, [r3, #0]

		rssi_iir_update();
    664a:	f7fd feab 	bl	43a4 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    664e:	4b50      	ldr	r3, [pc, #320]	; (6790 <bt_generic_le+0x2bc>)
    6650:	781b      	ldrb	r3, [r3, #0]
    6652:	b2db      	uxtb	r3, r3
    6654:	2b00      	cmp	r3, #0
    6656:	d103      	bne.n	6660 <bt_generic_le+0x18c>
    6658:	4b54      	ldr	r3, [pc, #336]	; (67ac <bt_generic_le+0x2d8>)
    665a:	781b      	ldrb	r3, [r3, #0]
    665c:	2b00      	cmp	r3, #0
    665e:	d00c      	beq.n	667a <bt_generic_le+0x1a6>
			status |= CS_TRIGGER;
    6660:	4b51      	ldr	r3, [pc, #324]	; (67a8 <bt_generic_le+0x2d4>)
    6662:	781b      	ldrb	r3, [r3, #0]
    6664:	b2db      	uxtb	r3, r3
    6666:	f043 0308 	orr.w	r3, r3, #8
    666a:	b2da      	uxtb	r2, r3
    666c:	4b4e      	ldr	r3, [pc, #312]	; (67a8 <bt_generic_le+0x2d4>)
    666e:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    6670:	2302      	movs	r3, #2
    6672:	77fb      	strb	r3, [r7, #31]
			cs_trigger = 0;
    6674:	4b46      	ldr	r3, [pc, #280]	; (6790 <bt_generic_le+0x2bc>)
    6676:	2200      	movs	r2, #0
    6678:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    667a:	4b4d      	ldr	r3, [pc, #308]	; (67b0 <bt_generic_le+0x2dc>)
    667c:	781b      	ldrb	r3, [r3, #0]
    667e:	b25a      	sxtb	r2, r3
    6680:	4b44      	ldr	r3, [pc, #272]	; (6794 <bt_generic_le+0x2c0>)
    6682:	781b      	ldrb	r3, [r3, #0]
    6684:	b25b      	sxtb	r3, r3
    6686:	3336      	adds	r3, #54	; 0x36
    6688:	429a      	cmp	r2, r3
    668a:	db09      	blt.n	66a0 <bt_generic_le+0x1cc>
			status |= RSSI_TRIGGER;
    668c:	4b46      	ldr	r3, [pc, #280]	; (67a8 <bt_generic_le+0x2d4>)
    668e:	781b      	ldrb	r3, [r3, #0]
    6690:	b2db      	uxtb	r3, r3
    6692:	f043 0310 	orr.w	r3, r3, #16
    6696:	b2da      	uxtb	r2, r3
    6698:	4b43      	ldr	r3, [pc, #268]	; (67a8 <bt_generic_le+0x2d4>)
    669a:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    669c:	2302      	movs	r3, #2
    669e:	77fb      	strb	r3, [r7, #31]
		}

		/* Send a packet once in a while (6.25 Hz) to keep
		 * host USB reads from timing out. */
		if (keepalive_trigger) {
    66a0:	4b44      	ldr	r3, [pc, #272]	; (67b4 <bt_generic_le+0x2e0>)
    66a2:	781b      	ldrb	r3, [r3, #0]
    66a4:	b2db      	uxtb	r3, r3
    66a6:	2b00      	cmp	r3, #0
    66a8:	d007      	beq.n	66ba <bt_generic_le+0x1e6>
			if (hold == 0)
    66aa:	7ffb      	ldrb	r3, [r7, #31]
    66ac:	2b00      	cmp	r3, #0
    66ae:	d101      	bne.n	66b4 <bt_generic_le+0x1e0>
				hold = 1;
    66b0:	2301      	movs	r3, #1
    66b2:	77fb      	strb	r3, [r7, #31]
			keepalive_trigger = 0;
    66b4:	4b3f      	ldr	r3, [pc, #252]	; (67b4 <bt_generic_le+0x2e0>)
    66b6:	2200      	movs	r2, #0
    66b8:	701a      	strb	r2, [r3, #0]
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    66ba:	7ffb      	ldrb	r3, [r7, #31]
    66bc:	2b00      	cmp	r3, #0
    66be:	d100      	bne.n	66c2 <bt_generic_le+0x1ee>
			goto rx_continue;
    66c0:	e03d      	b.n	673e <bt_generic_le+0x26a>
		}
		hold--;
    66c2:	7ffb      	ldrb	r3, [r7, #31]
    66c4:	3b01      	subs	r3, #1
    66c6:	77fb      	strb	r3, [r7, #31]

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    66c8:	483b      	ldr	r0, [pc, #236]	; (67b8 <bt_generic_le+0x2e4>)
    66ca:	493c      	ldr	r1, [pc, #240]	; (67bc <bt_generic_le+0x2e8>)
    66cc:	f44f 72c8 	mov.w	r2, #400	; 0x190
    66d0:	f004 ffbe 	bl	b650 <memcpy>

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    66d4:	2300      	movs	r3, #0
    66d6:	61bb      	str	r3, [r7, #24]
    66d8:	e025      	b.n	6726 <bt_generic_le+0x252>
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    66da:	2300      	movs	r3, #0
    66dc:	617b      	str	r3, [r7, #20]
    66de:	e01c      	b.n	671a <bt_generic_le+0x246>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    66e0:	69bb      	ldr	r3, [r7, #24]
    66e2:	3332      	adds	r3, #50	; 0x32
    66e4:	00da      	lsls	r2, r3, #3
    66e6:	697b      	ldr	r3, [r7, #20]
    66e8:	4413      	add	r3, r2
    66ea:	4a2e      	ldr	r2, [pc, #184]	; (67a4 <bt_generic_le+0x2d0>)
    66ec:	6811      	ldr	r1, [r2, #0]
    66ee:	69ba      	ldr	r2, [r7, #24]
    66f0:	440a      	add	r2, r1
    66f2:	7812      	ldrb	r2, [r2, #0]
    66f4:	09d2      	lsrs	r2, r2, #7
    66f6:	b2d1      	uxtb	r1, r2
    66f8:	4a2f      	ldr	r2, [pc, #188]	; (67b8 <bt_generic_le+0x2e4>)
    66fa:	54d1      	strb	r1, [r2, r3]
				idle_rxbuf[i] <<= 1;
    66fc:	4b29      	ldr	r3, [pc, #164]	; (67a4 <bt_generic_le+0x2d0>)
    66fe:	681a      	ldr	r2, [r3, #0]
    6700:	69bb      	ldr	r3, [r7, #24]
    6702:	4413      	add	r3, r2
    6704:	4a27      	ldr	r2, [pc, #156]	; (67a4 <bt_generic_le+0x2d0>)
    6706:	6811      	ldr	r1, [r2, #0]
    6708:	69ba      	ldr	r2, [r7, #24]
    670a:	440a      	add	r2, r1
    670c:	7812      	ldrb	r2, [r2, #0]
    670e:	0052      	lsls	r2, r2, #1
    6710:	b2d2      	uxtb	r2, r2
    6712:	701a      	strb	r2, [r3, #0]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    6714:	697b      	ldr	r3, [r7, #20]
    6716:	3301      	adds	r3, #1
    6718:	617b      	str	r3, [r7, #20]
    671a:	697b      	ldr	r3, [r7, #20]
    671c:	2b07      	cmp	r3, #7
    671e:	dddf      	ble.n	66e0 <bt_generic_le+0x20c>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    6720:	69bb      	ldr	r3, [r7, #24]
    6722:	3301      	adds	r3, #1
    6724:	61bb      	str	r3, [r7, #24]
    6726:	69bb      	ldr	r3, [r7, #24]
    6728:	2b31      	cmp	r3, #49	; 0x31
    672a:	ddd6      	ble.n	66da <bt_generic_le+0x206>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    672c:	4b24      	ldr	r3, [pc, #144]	; (67c0 <bt_generic_le+0x2ec>)
    672e:	681b      	ldr	r3, [r3, #0]
    6730:	4821      	ldr	r0, [pc, #132]	; (67b8 <bt_generic_le+0x2e4>)
    6732:	4798      	blx	r3
    6734:	60b8      	str	r0, [r7, #8]
		if (!ret) break;
    6736:	68bb      	ldr	r3, [r7, #8]
    6738:	2b00      	cmp	r3, #0
    673a:	d100      	bne.n	673e <bt_generic_le+0x26a>
    673c:	e00c      	b.n	6758 <bt_generic_le+0x284>

	rx_continue:
		rx_tc = 0;
    673e:	4b16      	ldr	r3, [pc, #88]	; (6798 <bt_generic_le+0x2c4>)
    6740:	2200      	movs	r2, #0
    6742:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6744:	4b15      	ldr	r3, [pc, #84]	; (679c <bt_generic_le+0x2c8>)
    6746:	2200      	movs	r2, #0
    6748:	601a      	str	r2, [r3, #0]

	cs_trigger_enable();

	hold = 0;

	while (requested_mode == active_mode) {
    674a:	4b1e      	ldr	r3, [pc, #120]	; (67c4 <bt_generic_le+0x2f0>)
    674c:	781b      	ldrb	r3, [r3, #0]
    674e:	b2db      	uxtb	r3, r3
    6750:	79fa      	ldrb	r2, [r7, #7]
    6752:	429a      	cmp	r2, r3
    6754:	f43f aee3 	beq.w	651e <bt_generic_le+0x4a>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6758:	4b1b      	ldr	r3, [pc, #108]	; (67c8 <bt_generic_le+0x2f4>)
    675a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    675e:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    6760:	f7ff f96c 	bl	5a3c <cc2400_idle>
	dio_ssp_stop();
    6764:	f7ff f906 	bl	5974 <dio_ssp_stop>
	cs_trigger_disable();
    6768:	f7fd fffa 	bl	4760 <cs_trigger_disable>
}
    676c:	3720      	adds	r7, #32
    676e:	46bd      	mov	sp, r7
    6770:	bd80      	pop	{r7, pc}
    6772:	bf00      	nop
    6774:	10000a42 	.word	0x10000a42
    6778:	10000a3e 	.word	0x10000a3e
    677c:	e000e100 	.word	0xe000e100
    6780:	2009c03c 	.word	0x2009c03c
    6784:	10000a44 	.word	0x10000a44
    6788:	1000049c 	.word	0x1000049c
    678c:	1000097d 	.word	0x1000097d
    6790:	100010c0 	.word	0x100010c0
    6794:	1000044d 	.word	0x1000044d
    6798:	10000b00 	.word	0x10000b00
    679c:	100010bc 	.word	0x100010bc
    67a0:	10000450 	.word	0x10000450
    67a4:	10000454 	.word	0x10000454
    67a8:	10000a48 	.word	0x10000a48
    67ac:	1000097e 	.word	0x1000097e
    67b0:	10000b04 	.word	0x10000b04
    67b4:	10000be0 	.word	0x10000be0
    67b8:	10000d08 	.word	0x10000d08
    67bc:	10000e98 	.word	0x10000e98
    67c0:	10000998 	.word	0x10000998
    67c4:	10000a3f 	.word	0x10000a3f
    67c8:	e000e180 	.word	0xe000e180

000067cc <bt_le_sync>:


void bt_le_sync(u8 active_mode)
{
    67cc:	b590      	push	{r4, r7, lr}
    67ce:	b09b      	sub	sp, #108	; 0x6c
    67d0:	af00      	add	r7, sp, #0
    67d2:	4603      	mov	r3, r0
    67d4:	71fb      	strb	r3, [r7, #7]
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    67d6:	4b87      	ldr	r3, [pc, #540]	; (69f4 <bt_le_sync+0x228>)
    67d8:	2201      	movs	r2, #1
    67da:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    67dc:	4a86      	ldr	r2, [pc, #536]	; (69f8 <bt_le_sync+0x22c>)
    67de:	79fb      	ldrb	r3, [r7, #7]
    67e0:	7013      	strb	r3, [r2, #0]

	le.link_state = LINK_LISTENING;
    67e2:	4b86      	ldr	r3, [pc, #536]	; (69fc <bt_le_sync+0x230>)
    67e4:	2201      	movs	r2, #1
    67e6:	751a      	strb	r2, [r3, #20]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    67e8:	4b85      	ldr	r3, [pc, #532]	; (6a00 <bt_le_sync+0x234>)
    67ea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    67ee:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    67f0:	4b84      	ldr	r3, [pc, #528]	; (6a04 <bt_le_sync+0x238>)
    67f2:	2210      	movs	r2, #16
    67f4:	601a      	str	r2, [r3, #0]

	queue_init();
    67f6:	f001 fedf 	bl	85b8 <queue_init>
	dio_ssp_init();
    67fa:	f003 f883 	bl	9904 <dio_ssp_init>
	dma_init_le();
    67fe:	f7fe ff1f 	bl	5640 <dma_init_le>
	dio_ssp_start();
    6802:	f7ff f887 	bl	5914 <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    6806:	4b7d      	ldr	r3, [pc, #500]	; (69fc <bt_le_sync+0x230>)
    6808:	681b      	ldr	r3, [r3, #0]
    680a:	4618      	mov	r0, r3
    680c:	f002 ff7a 	bl	9704 <rbit>
    6810:	4603      	mov	r3, r0
    6812:	4618      	mov	r0, r3
    6814:	f7ff f998 	bl	5b48 <cc2400_rx_sync>

	while (requested_mode == active_mode) {
    6818:	e247      	b.n	6caa <bt_le_sync+0x4de>
		if (requested_channel != 0) {
    681a:	4b7b      	ldr	r3, [pc, #492]	; (6a08 <bt_le_sync+0x23c>)
    681c:	881b      	ldrh	r3, [r3, #0]
    681e:	b29b      	uxth	r3, r3
    6820:	2b00      	cmp	r3, #0
    6822:	d029      	beq.n	6878 <bt_le_sync+0xac>
			cc2400_strobe(SRFOFF);
    6824:	2064      	movs	r0, #100	; 0x64
    6826:	f003 fa01 	bl	9c2c <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    682a:	bf00      	nop
    682c:	f003 f9f4 	bl	9c18 <cc2400_status>
    6830:	4603      	mov	r3, r0
    6832:	f003 0304 	and.w	r3, r3, #4
    6836:	2b00      	cmp	r3, #0
    6838:	d1f8      	bne.n	682c <bt_le_sync+0x60>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    683a:	4b74      	ldr	r3, [pc, #464]	; (6a0c <bt_le_sync+0x240>)
    683c:	881b      	ldrh	r3, [r3, #0]
    683e:	b29b      	uxth	r3, r3
    6840:	3b01      	subs	r3, #1
    6842:	b29b      	uxth	r3, r3
    6844:	2002      	movs	r0, #2
    6846:	4619      	mov	r1, r3
    6848:	f003 f92e 	bl	9aa8 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    684c:	2061      	movs	r0, #97	; 0x61
    684e:	f003 f9ed 	bl	9c2c <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6852:	bf00      	nop
    6854:	f003 f9e0 	bl	9c18 <cc2400_status>
    6858:	4603      	mov	r3, r0
    685a:	f003 0304 	and.w	r3, r3, #4
    685e:	2b00      	cmp	r3, #0
    6860:	d0f8      	beq.n	6854 <bt_le_sync+0x88>

			/* RX mode */
			cc2400_strobe(SRX);
    6862:	2062      	movs	r0, #98	; 0x62
    6864:	f003 f9e2 	bl	9c2c <cc2400_strobe>

			saved_request = requested_channel;
    6868:	4b67      	ldr	r3, [pc, #412]	; (6a08 <bt_le_sync+0x23c>)
    686a:	881b      	ldrh	r3, [r3, #0]
    686c:	b29a      	uxth	r2, r3
    686e:	4b68      	ldr	r3, [pc, #416]	; (6a10 <bt_le_sync+0x244>)
    6870:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    6872:	4b65      	ldr	r3, [pc, #404]	; (6a08 <bt_le_sync+0x23c>)
    6874:	2200      	movs	r2, #0
    6876:	801a      	strh	r2, [r3, #0]
		}

		RXLED_CLR;
    6878:	4b62      	ldr	r3, [pc, #392]	; (6a04 <bt_le_sync+0x238>)
    687a:	2210      	movs	r2, #16
    687c:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    687e:	f7fd fd41 	bl	4304 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    6882:	bf00      	nop
    6884:	4b63      	ldr	r3, [pc, #396]	; (6a14 <bt_le_sync+0x248>)
    6886:	681b      	ldr	r3, [r3, #0]
    6888:	2b00      	cmp	r3, #0
    688a:	d10e      	bne.n	68aa <bt_le_sync+0xde>
    688c:	4b62      	ldr	r3, [pc, #392]	; (6a18 <bt_le_sync+0x24c>)
    688e:	681b      	ldr	r3, [r3, #0]
    6890:	2b00      	cmp	r3, #0
    6892:	d10a      	bne.n	68aa <bt_le_sync+0xde>
    6894:	4b61      	ldr	r3, [pc, #388]	; (6a1c <bt_le_sync+0x250>)
    6896:	781b      	ldrb	r3, [r3, #0]
    6898:	b2db      	uxtb	r3, r3
    689a:	2b00      	cmp	r3, #0
    689c:	d105      	bne.n	68aa <bt_le_sync+0xde>
    689e:	4b60      	ldr	r3, [pc, #384]	; (6a20 <bt_le_sync+0x254>)
    68a0:	781b      	ldrb	r3, [r3, #0]
    68a2:	b2db      	uxtb	r3, r3
    68a4:	79fa      	ldrb	r2, [r7, #7]
    68a6:	429a      	cmp	r2, r3
    68a8:	d0ec      	beq.n	6884 <bt_le_sync+0xb8>
			;

		if (requested_mode != active_mode) {
    68aa:	4b5d      	ldr	r3, [pc, #372]	; (6a20 <bt_le_sync+0x254>)
    68ac:	781b      	ldrb	r3, [r3, #0]
    68ae:	b2db      	uxtb	r3, r3
    68b0:	79fa      	ldrb	r2, [r7, #7]
    68b2:	429a      	cmp	r2, r3
    68b4:	d000      	beq.n	68b8 <bt_le_sync+0xec>
			goto cleanup;
    68b6:	e1ff      	b.n	6cb8 <bt_le_sync+0x4ec>
		}

		if (rx_err) {
    68b8:	4b57      	ldr	r3, [pc, #348]	; (6a18 <bt_le_sync+0x24c>)
    68ba:	681b      	ldr	r3, [r3, #0]
    68bc:	2b00      	cmp	r3, #0
    68be:	d007      	beq.n	68d0 <bt_le_sync+0x104>
			status |= DMA_ERROR;
    68c0:	4b58      	ldr	r3, [pc, #352]	; (6a24 <bt_le_sync+0x258>)
    68c2:	781b      	ldrb	r3, [r3, #0]
    68c4:	b2db      	uxtb	r3, r3
    68c6:	f043 0302 	orr.w	r3, r3, #2
    68ca:	b2da      	uxtb	r2, r3
    68cc:	4b55      	ldr	r3, [pc, #340]	; (6a24 <bt_le_sync+0x258>)
    68ce:	701a      	strb	r2, [r3, #0]
		}

		if (do_hop)
    68d0:	4b52      	ldr	r3, [pc, #328]	; (6a1c <bt_le_sync+0x250>)
    68d2:	781b      	ldrb	r3, [r3, #0]
    68d4:	b2db      	uxtb	r3, r3
    68d6:	2b00      	cmp	r3, #0
    68d8:	d000      	beq.n	68dc <bt_le_sync+0x110>
			goto rx_flush;
    68da:	e12b      	b.n	6b34 <bt_le_sync+0x368>

		/* No DMA transfer? */
		if (!rx_tc)
    68dc:	4b4d      	ldr	r3, [pc, #308]	; (6a14 <bt_le_sync+0x248>)
    68de:	681b      	ldr	r3, [r3, #0]
    68e0:	2b00      	cmp	r3, #0
    68e2:	d100      	bne.n	68e6 <bt_le_sync+0x11a>
    68e4:	e1e1      	b.n	6caa <bt_le_sync+0x4de>

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    68e6:	f107 0308 	add.w	r3, r7, #8
    68ea:	65fb      	str	r3, [r7, #92]	; 0x5c
		packet[0] = le.access_address;
    68ec:	4b43      	ldr	r3, [pc, #268]	; (69fc <bt_le_sync+0x230>)
    68ee:	681b      	ldr	r3, [r3, #0]
    68f0:	60bb      	str	r3, [r7, #8]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    68f2:	4b46      	ldr	r3, [pc, #280]	; (6a0c <bt_le_sync+0x240>)
    68f4:	881b      	ldrh	r3, [r3, #0]
    68f6:	b29b      	uxth	r3, r3
    68f8:	b2db      	uxtb	r3, r3
    68fa:	3b62      	subs	r3, #98	; 0x62
    68fc:	b2db      	uxtb	r3, r3
    68fe:	4618      	mov	r0, r3
    6900:	f001 fcda 	bl	82b8 <btle_channel_index>
    6904:	4603      	mov	r3, r0
    6906:	461a      	mov	r2, r3
    6908:	4613      	mov	r3, r2
    690a:	005b      	lsls	r3, r3, #1
    690c:	4413      	add	r3, r2
    690e:	011b      	lsls	r3, r3, #4
    6910:	4a45      	ldr	r2, [pc, #276]	; (6a28 <bt_le_sync+0x25c>)
    6912:	4413      	add	r3, r2
    6914:	65bb      	str	r3, [r7, #88]	; 0x58
		for (i = 0; i < 4; i+= 4) {
    6916:	2300      	movs	r3, #0
    6918:	667b      	str	r3, [r7, #100]	; 0x64
    691a:	e034      	b.n	6986 <bt_le_sync+0x1ba>
			uint32_t v = rxbuf1[i+0] << 24
    691c:	4a43      	ldr	r2, [pc, #268]	; (6a2c <bt_le_sync+0x260>)
    691e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6920:	4413      	add	r3, r2
    6922:	781b      	ldrb	r3, [r3, #0]
    6924:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    6926:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6928:	3301      	adds	r3, #1
    692a:	4940      	ldr	r1, [pc, #256]	; (6a2c <bt_le_sync+0x260>)
    692c:	5ccb      	ldrb	r3, [r1, r3]
    692e:	041b      	lsls	r3, r3, #16
    6930:	431a      	orrs	r2, r3
					   | rxbuf1[i+2] << 8
    6932:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6934:	3302      	adds	r3, #2
    6936:	493d      	ldr	r1, [pc, #244]	; (6a2c <bt_le_sync+0x260>)
    6938:	5ccb      	ldrb	r3, [r1, r3]
    693a:	021b      	lsls	r3, r3, #8
    693c:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    693e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    6940:	3203      	adds	r2, #3
    6942:	493a      	ldr	r1, [pc, #232]	; (6a2c <bt_le_sync+0x260>)
    6944:	5c8a      	ldrb	r2, [r1, r2]
    6946:	4313      	orrs	r3, r2
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6948:	657b      	str	r3, [r7, #84]	; 0x54
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    694a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    694c:	2b00      	cmp	r3, #0
    694e:	da00      	bge.n	6952 <bt_le_sync+0x186>
    6950:	3303      	adds	r3, #3
    6952:	109b      	asrs	r3, r3, #2
    6954:	1c5c      	adds	r4, r3, #1
    6956:	6d78      	ldr	r0, [r7, #84]	; 0x54
    6958:	f002 fed4 	bl	9704 <rbit>
    695c:	4601      	mov	r1, r0
    695e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6960:	2b00      	cmp	r3, #0
    6962:	da00      	bge.n	6966 <bt_le_sync+0x19a>
    6964:	3303      	adds	r3, #3
    6966:	109b      	asrs	r3, r3, #2
    6968:	009b      	lsls	r3, r3, #2
    696a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    696c:	4413      	add	r3, r2
    696e:	681b      	ldr	r3, [r3, #0]
    6970:	ea81 0203 	eor.w	r2, r1, r3
    6974:	00a3      	lsls	r3, r4, #2
    6976:	f107 0168 	add.w	r1, r7, #104	; 0x68
    697a:	440b      	add	r3, r1
    697c:	f843 2c60 	str.w	r2, [r3, #-96]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
    6980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6982:	3304      	adds	r3, #4
    6984:	667b      	str	r3, [r7, #100]	; 0x64
    6986:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6988:	2b03      	cmp	r3, #3
    698a:	ddc7      	ble.n	691c <bt_le_sync+0x150>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		unsigned len = (p[5] & 0x3f) + 2;
    698c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    698e:	3305      	adds	r3, #5
    6990:	781b      	ldrb	r3, [r3, #0]
    6992:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6996:	3302      	adds	r3, #2
    6998:	653b      	str	r3, [r7, #80]	; 0x50
		if (len > 39)
    699a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    699c:	2b27      	cmp	r3, #39	; 0x27
    699e:	d900      	bls.n	69a2 <bt_le_sync+0x1d6>
			goto rx_flush;
    69a0:	e0c8      	b.n	6b34 <bt_le_sync+0x368>

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    69a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    69a4:	3306      	adds	r3, #6
    69a6:	089b      	lsrs	r3, r3, #2
    69a8:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (total_transfers < 11) {
    69aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    69ac:	2b0a      	cmp	r3, #10
    69ae:	d80d      	bhi.n	69cc <bt_le_sync+0x200>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    69b0:	bf00      	nop
    69b2:	4b1f      	ldr	r3, [pc, #124]	; (6a30 <bt_le_sync+0x264>)
    69b4:	681a      	ldr	r2, [r3, #0]
    69b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    69b8:	009b      	lsls	r3, r3, #2
    69ba:	491c      	ldr	r1, [pc, #112]	; (6a2c <bt_le_sync+0x260>)
    69bc:	440b      	add	r3, r1
    69be:	429a      	cmp	r2, r3
    69c0:	d20f      	bcs.n	69e2 <bt_le_sync+0x216>
    69c2:	4b15      	ldr	r3, [pc, #84]	; (6a18 <bt_le_sync+0x24c>)
    69c4:	681b      	ldr	r3, [r3, #0]
    69c6:	2b00      	cmp	r3, #0
    69c8:	d0f3      	beq.n	69b2 <bt_le_sync+0x1e6>
    69ca:	e00a      	b.n	69e2 <bt_le_sync+0x216>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    69cc:	bf00      	nop
    69ce:	4b19      	ldr	r3, [pc, #100]	; (6a34 <bt_le_sync+0x268>)
    69d0:	681b      	ldr	r3, [r3, #0]
    69d2:	f003 0301 	and.w	r3, r3, #1
    69d6:	2b00      	cmp	r3, #0
    69d8:	d003      	beq.n	69e2 <bt_le_sync+0x216>
    69da:	4b0f      	ldr	r3, [pc, #60]	; (6a18 <bt_le_sync+0x24c>)
    69dc:	681b      	ldr	r3, [r3, #0]
    69de:	2b00      	cmp	r3, #0
    69e0:	d0f5      	beq.n	69ce <bt_le_sync+0x202>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    69e2:	4a15      	ldr	r2, [pc, #84]	; (6a38 <bt_le_sync+0x26c>)
    69e4:	4b14      	ldr	r3, [pc, #80]	; (6a38 <bt_le_sync+0x26c>)
    69e6:	681b      	ldr	r3, [r3, #0]
    69e8:	f023 0301 	bic.w	r3, r3, #1
    69ec:	6013      	str	r3, [r2, #0]

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    69ee:	2304      	movs	r3, #4
    69f0:	667b      	str	r3, [r7, #100]	; 0x64
    69f2:	e058      	b.n	6aa6 <bt_le_sync+0x2da>
    69f4:	10000a42 	.word	0x10000a42
    69f8:	10000a3e 	.word	0x10000a3e
    69fc:	10000458 	.word	0x10000458
    6a00:	e000e100 	.word	0xe000e100
    6a04:	2009c03c 	.word	0x2009c03c
    6a08:	10000a44 	.word	0x10000a44
    6a0c:	1000049c 	.word	0x1000049c
    6a10:	10000a46 	.word	0x10000a46
    6a14:	10000b00 	.word	0x10000b00
    6a18:	100010bc 	.word	0x100010bc
    6a1c:	1000097d 	.word	0x1000097d
    6a20:	10000a3f 	.word	0x10000a3f
    6a24:	10000a48 	.word	0x10000a48
    6a28:	0000b89c 	.word	0x0000b89c
    6a2c:	10001088 	.word	0x10001088
    6a30:	50004104 	.word	0x50004104
    6a34:	50004110 	.word	0x50004110
    6a38:	40030024 	.word	0x40030024
			uint32_t v = rxbuf1[i+0] << 24
    6a3c:	4aa5      	ldr	r2, [pc, #660]	; (6cd4 <bt_le_sync+0x508>)
    6a3e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6a40:	4413      	add	r3, r2
    6a42:	781b      	ldrb	r3, [r3, #0]
    6a44:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    6a46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6a48:	3301      	adds	r3, #1
    6a4a:	49a2      	ldr	r1, [pc, #648]	; (6cd4 <bt_le_sync+0x508>)
    6a4c:	5ccb      	ldrb	r3, [r1, r3]
    6a4e:	041b      	lsls	r3, r3, #16
    6a50:	431a      	orrs	r2, r3
				       | rxbuf1[i+2] << 8
    6a52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6a54:	3302      	adds	r3, #2
    6a56:	499f      	ldr	r1, [pc, #636]	; (6cd4 <bt_le_sync+0x508>)
    6a58:	5ccb      	ldrb	r3, [r1, r3]
    6a5a:	021b      	lsls	r3, r3, #8
    6a5c:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    6a5e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    6a60:	3203      	adds	r2, #3
    6a62:	499c      	ldr	r1, [pc, #624]	; (6cd4 <bt_le_sync+0x508>)
    6a64:	5c8a      	ldrb	r2, [r1, r2]
    6a66:	4313      	orrs	r3, r2
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6a68:	64bb      	str	r3, [r7, #72]	; 0x48
					   | rxbuf1[i+1] << 16
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    6a6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6a6c:	2b00      	cmp	r3, #0
    6a6e:	da00      	bge.n	6a72 <bt_le_sync+0x2a6>
    6a70:	3303      	adds	r3, #3
    6a72:	109b      	asrs	r3, r3, #2
    6a74:	1c5c      	adds	r4, r3, #1
    6a76:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    6a78:	f002 fe44 	bl	9704 <rbit>
    6a7c:	4601      	mov	r1, r0
    6a7e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6a80:	2b00      	cmp	r3, #0
    6a82:	da00      	bge.n	6a86 <bt_le_sync+0x2ba>
    6a84:	3303      	adds	r3, #3
    6a86:	109b      	asrs	r3, r3, #2
    6a88:	009b      	lsls	r3, r3, #2
    6a8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    6a8c:	4413      	add	r3, r2
    6a8e:	681b      	ldr	r3, [r3, #0]
    6a90:	ea81 0203 	eor.w	r2, r1, r3
    6a94:	00a3      	lsls	r3, r4, #2
    6a96:	f107 0168 	add.w	r1, r7, #104	; 0x68
    6a9a:	440b      	add	r3, r1
    6a9c:	f843 2c60 	str.w	r2, [r3, #-96]
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    6aa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6aa2:	3304      	adds	r3, #4
    6aa4:	667b      	str	r3, [r7, #100]	; 0x64
    6aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6aa8:	2b2b      	cmp	r3, #43	; 0x2b
    6aaa:	ddc7      	ble.n	6a3c <bt_le_sync+0x270>
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    6aac:	4b8a      	ldr	r3, [pc, #552]	; (6cd8 <bt_le_sync+0x50c>)
    6aae:	691b      	ldr	r3, [r3, #16]
    6ab0:	2b00      	cmp	r3, #0
    6ab2:	d023      	beq.n	6afc <bt_le_sync+0x330>
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    6ab4:	4b88      	ldr	r3, [pc, #544]	; (6cd8 <bt_le_sync+0x50c>)
    6ab6:	68d9      	ldr	r1, [r3, #12]
    6ab8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    6aba:	1d1a      	adds	r2, r3, #4
    6abc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6abe:	4608      	mov	r0, r1
    6ac0:	4611      	mov	r1, r2
    6ac2:	461a      	mov	r2, r3
    6ac4:	f001 fcfc 	bl	84c0 <btle_crcgen_lut>
    6ac8:	6478      	str	r0, [r7, #68]	; 0x44
			u32 wire_crc = (p[4+len+2] << 16)
    6aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6acc:	3306      	adds	r3, #6
    6ace:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    6ad0:	4413      	add	r3, r2
    6ad2:	781b      	ldrb	r3, [r3, #0]
    6ad4:	041a      	lsls	r2, r3, #16
						 | (p[4+len+1] << 8)
    6ad6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6ad8:	3305      	adds	r3, #5
    6ada:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    6adc:	440b      	add	r3, r1
    6ade:	781b      	ldrb	r3, [r3, #0]
    6ae0:	021b      	lsls	r3, r3, #8
    6ae2:	4313      	orrs	r3, r2
						 | (p[4+len+0] << 0);
    6ae4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    6ae6:	3204      	adds	r2, #4
    6ae8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    6aea:	440a      	add	r2, r1
    6aec:	7812      	ldrb	r2, [r2, #0]
    6aee:	4313      	orrs	r3, r2
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
			u32 wire_crc = (p[4+len+2] << 16)
    6af0:	643b      	str	r3, [r7, #64]	; 0x40
						 | (p[4+len+1] << 8)
						 | (p[4+len+0] << 0);
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    6af2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6af4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6af6:	429a      	cmp	r2, r3
    6af8:	d000      	beq.n	6afc <bt_le_sync+0x330>
				goto rx_flush;
    6afa:	e01b      	b.n	6b34 <bt_le_sync+0x368>
		}


		RXLED_SET;
    6afc:	4b77      	ldr	r3, [pc, #476]	; (6cdc <bt_le_sync+0x510>)
    6afe:	2210      	movs	r2, #16
    6b00:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    6b02:	4b77      	ldr	r3, [pc, #476]	; (6ce0 <bt_le_sync+0x514>)
    6b04:	681b      	ldr	r3, [r3, #0]
    6b06:	f107 0208 	add.w	r2, r7, #8
    6b0a:	4610      	mov	r0, r2
    6b0c:	4798      	blx	r3
		enqueue(LE_PACKET, (uint8_t *)packet);
    6b0e:	f107 0308 	add.w	r3, r7, #8
    6b12:	2001      	movs	r0, #1
    6b14:	4619      	mov	r1, r3
    6b16:	f7fd fcd7 	bl	44c8 <enqueue>
		le.last_packet = CLK100NS;
    6b1a:	4b72      	ldr	r3, [pc, #456]	; (6ce4 <bt_le_sync+0x518>)
    6b1c:	681b      	ldr	r3, [r3, #0]
    6b1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6b22:	f640 4235 	movw	r2, #3125	; 0xc35
    6b26:	fb02 f203 	mul.w	r2, r2, r3
    6b2a:	4b6f      	ldr	r3, [pc, #444]	; (6ce8 <bt_le_sync+0x51c>)
    6b2c:	681b      	ldr	r3, [r3, #0]
    6b2e:	4413      	add	r3, r2
    6b30:	4a69      	ldr	r2, [pc, #420]	; (6cd8 <bt_le_sync+0x50c>)
    6b32:	6413      	str	r3, [r2, #64]	; 0x40

	rx_flush:
		cc2400_strobe(SFSON);
    6b34:	2061      	movs	r0, #97	; 0x61
    6b36:	f003 f879 	bl	9c2c <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    6b3a:	bf00      	nop
    6b3c:	f003 f86c 	bl	9c18 <cc2400_status>
    6b40:	4603      	mov	r3, r0
    6b42:	f003 0304 	and.w	r3, r3, #4
    6b46:	2b00      	cmp	r3, #0
    6b48:	d0f8      	beq.n	6b3c <bt_le_sync+0x370>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6b4a:	4a68      	ldr	r2, [pc, #416]	; (6cec <bt_le_sync+0x520>)
    6b4c:	4b67      	ldr	r3, [pc, #412]	; (6cec <bt_le_sync+0x520>)
    6b4e:	681b      	ldr	r3, [r3, #0]
    6b50:	f023 0301 	bic.w	r3, r3, #1
    6b54:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    6b56:	e003      	b.n	6b60 <bt_le_sync+0x394>
			u8 tmp = (u8)DIO_SSP_DR;
    6b58:	4b65      	ldr	r3, [pc, #404]	; (6cf0 <bt_le_sync+0x524>)
    6b5a:	681b      	ldr	r3, [r3, #0]
    6b5c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    6b60:	4b64      	ldr	r3, [pc, #400]	; (6cf4 <bt_le_sync+0x528>)
    6b62:	681b      	ldr	r3, [r3, #0]
    6b64:	f003 0304 	and.w	r3, r3, #4
    6b68:	2b00      	cmp	r3, #0
    6b6a:	d1f5      	bne.n	6b58 <bt_le_sync+0x38c>
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    6b6c:	4b5d      	ldr	r3, [pc, #372]	; (6ce4 <bt_le_sync+0x518>)
    6b6e:	681b      	ldr	r3, [r3, #0]
    6b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6b74:	f640 4235 	movw	r2, #3125	; 0xc35
    6b78:	fb02 f203 	mul.w	r2, r2, r3
    6b7c:	4b5a      	ldr	r3, [pc, #360]	; (6ce8 <bt_le_sync+0x51c>)
    6b7e:	681b      	ldr	r3, [r3, #0]
    6b80:	4413      	add	r3, r2
    6b82:	663b      	str	r3, [r7, #96]	; 0x60
		if (now < le.last_packet)
    6b84:	4b54      	ldr	r3, [pc, #336]	; (6cd8 <bt_le_sync+0x50c>)
    6b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    6b88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6b8a:	429a      	cmp	r2, r3
    6b8c:	d905      	bls.n	6b9a <bt_le_sync+0x3ce>
			now += 3276800000; // handle rollover
    6b8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6b90:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    6b94:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    6b98:	663b      	str	r3, [r7, #96]	; 0x60
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    6b9a:	4b4f      	ldr	r3, [pc, #316]	; (6cd8 <bt_le_sync+0x50c>)
    6b9c:	7d1b      	ldrb	r3, [r3, #20]

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
		if  ( // timeout
    6b9e:	2b03      	cmp	r3, #3
    6ba0:	d003      	beq.n	6baa <bt_le_sync+0x3de>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    6ba2:	4b4d      	ldr	r3, [pc, #308]	; (6cd8 <bt_le_sync+0x50c>)
    6ba4:	7d1b      	ldrb	r3, [r3, #20]
    6ba6:	2b02      	cmp	r3, #2
    6ba8:	d106      	bne.n	6bb8 <bt_le_sync+0x3ec>
			&& (now - le.last_packet > 50000000))
    6baa:	4b4b      	ldr	r3, [pc, #300]	; (6cd8 <bt_le_sync+0x50c>)
    6bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6bae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    6bb0:	1ad3      	subs	r3, r2, r3
    6bb2:	4a51      	ldr	r2, [pc, #324]	; (6cf8 <bt_le_sync+0x52c>)
    6bb4:	4293      	cmp	r3, r2
    6bb6:	d803      	bhi.n	6bc0 <bt_le_sync+0x3f4>
			// jam finished
			|| (le_jam_count == 1)
    6bb8:	4b50      	ldr	r3, [pc, #320]	; (6cfc <bt_le_sync+0x530>)
    6bba:	681b      	ldr	r3, [r3, #0]
    6bbc:	2b01      	cmp	r3, #1
    6bbe:	d137      	bne.n	6c30 <bt_le_sync+0x464>
			)
		{
			reset_le();
    6bc0:	f7ff fc2c 	bl	641c <reset_le>
			le_jam_count = 0;
    6bc4:	4b4d      	ldr	r3, [pc, #308]	; (6cfc <bt_le_sync+0x530>)
    6bc6:	2200      	movs	r2, #0
    6bc8:	601a      	str	r2, [r3, #0]
			TXLED_CLR;
    6bca:	4b4d      	ldr	r3, [pc, #308]	; (6d00 <bt_le_sync+0x534>)
    6bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
    6bd0:	601a      	str	r2, [r3, #0]

			if (jam_mode == JAM_ONCE) {
    6bd2:	4b4c      	ldr	r3, [pc, #304]	; (6d04 <bt_le_sync+0x538>)
    6bd4:	781b      	ldrb	r3, [r3, #0]
    6bd6:	b2db      	uxtb	r3, r3
    6bd8:	2b01      	cmp	r3, #1
    6bda:	d106      	bne.n	6bea <bt_le_sync+0x41e>
				jam_mode = JAM_NONE;
    6bdc:	4b49      	ldr	r3, [pc, #292]	; (6d04 <bt_le_sync+0x538>)
    6bde:	2200      	movs	r2, #0
    6be0:	701a      	strb	r2, [r3, #0]
				requested_mode = MODE_IDLE;
    6be2:	4b49      	ldr	r3, [pc, #292]	; (6d08 <bt_le_sync+0x53c>)
    6be4:	2200      	movs	r2, #0
    6be6:	701a      	strb	r2, [r3, #0]
				goto cleanup;
    6be8:	e066      	b.n	6cb8 <bt_le_sync+0x4ec>
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    6bea:	79fb      	ldrb	r3, [r7, #7]
    6bec:	2b0a      	cmp	r3, #10
    6bee:	d101      	bne.n	6bf4 <bt_le_sync+0x428>
				goto cleanup;
    6bf0:	bf00      	nop
    6bf2:	e061      	b.n	6cb8 <bt_le_sync+0x4ec>

			le.link_state = LINK_LISTENING;
    6bf4:	4b38      	ldr	r3, [pc, #224]	; (6cd8 <bt_le_sync+0x50c>)
    6bf6:	2201      	movs	r2, #1
    6bf8:	751a      	strb	r2, [r3, #20]

			cc2400_strobe(SRFOFF);
    6bfa:	2064      	movs	r0, #100	; 0x64
    6bfc:	f003 f816 	bl	9c2c <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    6c00:	bf00      	nop
    6c02:	f003 f809 	bl	9c18 <cc2400_status>
    6c06:	4603      	mov	r3, r0
    6c08:	f003 0304 	and.w	r3, r3, #4
    6c0c:	2b00      	cmp	r3, #0
    6c0e:	d1f8      	bne.n	6c02 <bt_le_sync+0x436>

			/* Retune */
			channel = saved_request != 0 ? saved_request : 2402;
    6c10:	4b3e      	ldr	r3, [pc, #248]	; (6d0c <bt_le_sync+0x540>)
    6c12:	881b      	ldrh	r3, [r3, #0]
    6c14:	b29b      	uxth	r3, r3
    6c16:	2b00      	cmp	r3, #0
    6c18:	d003      	beq.n	6c22 <bt_le_sync+0x456>
    6c1a:	4b3c      	ldr	r3, [pc, #240]	; (6d0c <bt_le_sync+0x540>)
    6c1c:	881b      	ldrh	r3, [r3, #0]
    6c1e:	b29b      	uxth	r3, r3
    6c20:	e001      	b.n	6c26 <bt_le_sync+0x45a>
    6c22:	f640 1362 	movw	r3, #2402	; 0x962
    6c26:	4a3a      	ldr	r2, [pc, #232]	; (6d10 <bt_le_sync+0x544>)
    6c28:	8013      	strh	r3, [r2, #0]
			restart_jamming = 1;
    6c2a:	4b3a      	ldr	r3, [pc, #232]	; (6d14 <bt_le_sync+0x548>)
    6c2c:	2201      	movs	r2, #1
    6c2e:	601a      	str	r2, [r3, #0]
		}

		cc2400_set(SYNCL, le.syncl);
    6c30:	4b29      	ldr	r3, [pc, #164]	; (6cd8 <bt_le_sync+0x50c>)
    6c32:	88db      	ldrh	r3, [r3, #6]
    6c34:	202c      	movs	r0, #44	; 0x2c
    6c36:	4619      	mov	r1, r3
    6c38:	f002 ff36 	bl	9aa8 <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    6c3c:	4b26      	ldr	r3, [pc, #152]	; (6cd8 <bt_le_sync+0x50c>)
    6c3e:	889b      	ldrh	r3, [r3, #4]
    6c40:	202d      	movs	r0, #45	; 0x2d
    6c42:	4619      	mov	r1, r3
    6c44:	f002 ff30 	bl	9aa8 <cc2400_set>

		if (do_hop)
    6c48:	4b33      	ldr	r3, [pc, #204]	; (6d18 <bt_le_sync+0x54c>)
    6c4a:	781b      	ldrb	r3, [r3, #0]
    6c4c:	b2db      	uxtb	r3, r3
    6c4e:	2b00      	cmp	r3, #0
    6c50:	d001      	beq.n	6c56 <bt_le_sync+0x48a>
			hop();
    6c52:	f7ff f9b1 	bl	5fb8 <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    6c56:	4b29      	ldr	r3, [pc, #164]	; (6cfc <bt_le_sync+0x530>)
    6c58:	681b      	ldr	r3, [r3, #0]
    6c5a:	2b00      	cmp	r3, #0
    6c5c:	dd07      	ble.n	6c6e <bt_le_sync+0x4a2>
			le_jam();
    6c5e:	f7ff f961 	bl	5f24 <le_jam>
			--le_jam_count;
    6c62:	4b26      	ldr	r3, [pc, #152]	; (6cfc <bt_le_sync+0x530>)
    6c64:	681b      	ldr	r3, [r3, #0]
    6c66:	3b01      	subs	r3, #1
    6c68:	4a24      	ldr	r2, [pc, #144]	; (6cfc <bt_le_sync+0x530>)
    6c6a:	6013      	str	r3, [r2, #0]
    6c6c:	e017      	b.n	6c9e <bt_le_sync+0x4d2>
		} else {
			/* RX mode */
			dma_init_le();
    6c6e:	f7fe fce7 	bl	5640 <dma_init_le>
			dio_ssp_start();
    6c72:	f7fe fe4f 	bl	5914 <dio_ssp_start>

			if (restart_jamming) {
    6c76:	4b27      	ldr	r3, [pc, #156]	; (6d14 <bt_le_sync+0x548>)
    6c78:	681b      	ldr	r3, [r3, #0]
    6c7a:	2b00      	cmp	r3, #0
    6c7c:	d00c      	beq.n	6c98 <bt_le_sync+0x4cc>
				cc2400_rx_sync(rbit(le.access_address));
    6c7e:	4b16      	ldr	r3, [pc, #88]	; (6cd8 <bt_le_sync+0x50c>)
    6c80:	681b      	ldr	r3, [r3, #0]
    6c82:	4618      	mov	r0, r3
    6c84:	f002 fd3e 	bl	9704 <rbit>
    6c88:	4603      	mov	r3, r0
    6c8a:	4618      	mov	r0, r3
    6c8c:	f7fe ff5c 	bl	5b48 <cc2400_rx_sync>
				restart_jamming = 0;
    6c90:	4b20      	ldr	r3, [pc, #128]	; (6d14 <bt_le_sync+0x548>)
    6c92:	2200      	movs	r2, #0
    6c94:	601a      	str	r2, [r3, #0]
    6c96:	e002      	b.n	6c9e <bt_le_sync+0x4d2>
			} else {
				cc2400_strobe(SRX);
    6c98:	2062      	movs	r0, #98	; 0x62
    6c9a:	f002 ffc7 	bl	9c2c <cc2400_strobe>
			}
		}

		rx_tc = 0;
    6c9e:	4b1f      	ldr	r3, [pc, #124]	; (6d1c <bt_le_sync+0x550>)
    6ca0:	2200      	movs	r2, #0
    6ca2:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6ca4:	4b1e      	ldr	r3, [pc, #120]	; (6d20 <bt_le_sync+0x554>)
    6ca6:	2200      	movs	r2, #0
    6ca8:	601a      	str	r2, [r3, #0]
	dma_init_le();
	dio_ssp_start();

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address

	while (requested_mode == active_mode) {
    6caa:	4b17      	ldr	r3, [pc, #92]	; (6d08 <bt_le_sync+0x53c>)
    6cac:	781b      	ldrb	r3, [r3, #0]
    6cae:	b2db      	uxtb	r3, r3
    6cb0:	79fa      	ldrb	r2, [r7, #7]
    6cb2:	429a      	cmp	r2, r3
    6cb4:	f43f adb1 	beq.w	681a <bt_le_sync+0x4e>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6cb8:	4b1a      	ldr	r3, [pc, #104]	; (6d24 <bt_le_sync+0x558>)
    6cba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6cbe:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    6cc0:	f7fe febc 	bl	5a3c <cc2400_idle>
	dio_ssp_stop();
    6cc4:	f7fe fe56 	bl	5974 <dio_ssp_stop>
	cs_trigger_disable();
    6cc8:	f7fd fd4a 	bl	4760 <cs_trigger_disable>
}
    6ccc:	376c      	adds	r7, #108	; 0x6c
    6cce:	46bd      	mov	sp, r7
    6cd0:	bd90      	pop	{r4, r7, pc}
    6cd2:	bf00      	nop
    6cd4:	10001088 	.word	0x10001088
    6cd8:	10000458 	.word	0x10000458
    6cdc:	2009c038 	.word	0x2009c038
    6ce0:	1000099c 	.word	0x1000099c
    6ce4:	10000be4 	.word	0x10000be4
    6ce8:	40004008 	.word	0x40004008
    6cec:	40030024 	.word	0x40030024
    6cf0:	40030008 	.word	0x40030008
    6cf4:	4003000c 	.word	0x4003000c
    6cf8:	02faf080 	.word	0x02faf080
    6cfc:	10000994 	.word	0x10000994
    6d00:	2009c03c 	.word	0x2009c03c
    6d04:	10000a40 	.word	0x10000a40
    6d08:	10000a3f 	.word	0x10000a3f
    6d0c:	10000a46 	.word	0x10000a46
    6d10:	1000049c 	.word	0x1000049c
    6d14:	10000a50 	.word	0x10000a50
    6d18:	1000097d 	.word	0x1000097d
    6d1c:	10000b00 	.word	0x10000b00
    6d20:	100010bc 	.word	0x100010bc
    6d24:	e000e180 	.word	0xe000e180

00006d28 <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    6d28:	b580      	push	{r7, lr}
    6d2a:	b08c      	sub	sp, #48	; 0x30
    6d2c:	af00      	add	r7, sp, #0
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    6d2e:	4b6c      	ldr	r3, [pc, #432]	; (6ee0 <cb_follow_le+0x1b8>)
    6d30:	881b      	ldrh	r3, [r3, #0]
    6d32:	b29b      	uxth	r3, r3
    6d34:	b2db      	uxtb	r3, r3
    6d36:	3b62      	subs	r3, #98	; 0x62
    6d38:	b2db      	uxtb	r3, r3
    6d3a:	4618      	mov	r0, r3
    6d3c:	f001 fabc 	bl	82b8 <btle_channel_index>
    6d40:	4603      	mov	r3, r0
    6d42:	461a      	mov	r2, r3
    6d44:	4b67      	ldr	r3, [pc, #412]	; (6ee4 <cb_follow_le+0x1bc>)
    6d46:	5c9b      	ldrb	r3, [r3, r2]
    6d48:	623b      	str	r3, [r7, #32]

	u32 access_address = 0;
    6d4a:	2300      	movs	r3, #0
    6d4c:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < 31; ++i) {
    6d4e:	2300      	movs	r3, #0
    6d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    6d52:	e00e      	b.n	6d72 <cb_follow_le+0x4a>
		access_address >>= 1;
    6d54:	69fb      	ldr	r3, [r7, #28]
    6d56:	085b      	lsrs	r3, r3, #1
    6d58:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    6d5a:	4a63      	ldr	r2, [pc, #396]	; (6ee8 <cb_follow_le+0x1c0>)
    6d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6d5e:	4413      	add	r3, r2
    6d60:	781b      	ldrb	r3, [r3, #0]
    6d62:	07db      	lsls	r3, r3, #31
    6d64:	461a      	mov	r2, r3
    6d66:	69fb      	ldr	r3, [r7, #28]
    6d68:	4313      	orrs	r3, r2
    6d6a:	61fb      	str	r3, [r7, #28]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    6d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6d6e:	3301      	adds	r3, #1
    6d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    6d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6d74:	2b1e      	cmp	r3, #30
    6d76:	dded      	ble.n	6d54 <cb_follow_le+0x2c>
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    6d78:	231f      	movs	r3, #31
    6d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    6d7c:	e0a6      	b.n	6ecc <cb_follow_le+0x1a4>
		access_address >>= 1;
    6d7e:	69fb      	ldr	r3, [r7, #28]
    6d80:	085b      	lsrs	r3, r3, #1
    6d82:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    6d84:	4a58      	ldr	r2, [pc, #352]	; (6ee8 <cb_follow_le+0x1c0>)
    6d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6d88:	4413      	add	r3, r2
    6d8a:	781b      	ldrb	r3, [r3, #0]
    6d8c:	07db      	lsls	r3, r3, #31
    6d8e:	461a      	mov	r2, r3
    6d90:	69fb      	ldr	r3, [r7, #28]
    6d92:	4313      	orrs	r3, r2
    6d94:	61fb      	str	r3, [r7, #28]
		if (access_address == le.access_address) {
    6d96:	4b55      	ldr	r3, [pc, #340]	; (6eec <cb_follow_le+0x1c4>)
    6d98:	681a      	ldr	r2, [r3, #0]
    6d9a:	69fb      	ldr	r3, [r7, #28]
    6d9c:	429a      	cmp	r2, r3
    6d9e:	f040 8092 	bne.w	6ec6 <cb_follow_le+0x19e>
			for (j = 0; j < 46; ++j) {
    6da2:	2300      	movs	r3, #0
    6da4:	62bb      	str	r3, [r7, #40]	; 0x28
    6da6:	e048      	b.n	6e3a <cb_follow_le+0x112>
				u8 byte = 0;
    6da8:	2300      	movs	r3, #0
    6daa:	76fb      	strb	r3, [r7, #27]
				for (k = 0; k < 8; k++) {
    6dac:	2300      	movs	r3, #0
    6dae:	627b      	str	r3, [r7, #36]	; 0x24
    6db0:	e037      	b.n	6e22 <cb_follow_le+0xfa>
					int offset = k + (j * 8) + i - 31;
    6db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6db4:	00da      	lsls	r2, r3, #3
    6db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6db8:	441a      	add	r2, r3
    6dba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6dbc:	4413      	add	r3, r2
    6dbe:	3b1f      	subs	r3, #31
    6dc0:	613b      	str	r3, [r7, #16]
					if (offset >= DMA_SIZE*8*2) break;
    6dc2:	693b      	ldr	r3, [r7, #16]
    6dc4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    6dc8:	db00      	blt.n	6dcc <cb_follow_le+0xa4>
    6dca:	e02d      	b.n	6e28 <cb_follow_le+0x100>
					int bit = unpacked[offset];
    6dcc:	4a46      	ldr	r2, [pc, #280]	; (6ee8 <cb_follow_le+0x1c0>)
    6dce:	693b      	ldr	r3, [r7, #16]
    6dd0:	4413      	add	r3, r2
    6dd2:	781b      	ldrb	r3, [r3, #0]
    6dd4:	617b      	str	r3, [r7, #20]
					if (j >= 4) { // unwhiten data bytes
    6dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6dd8:	2b03      	cmp	r3, #3
    6dda:	dd16      	ble.n	6e0a <cb_follow_le+0xe2>
						bit ^= whitening[idx];
    6ddc:	4a44      	ldr	r2, [pc, #272]	; (6ef0 <cb_follow_le+0x1c8>)
    6dde:	6a3b      	ldr	r3, [r7, #32]
    6de0:	4413      	add	r3, r2
    6de2:	781b      	ldrb	r3, [r3, #0]
    6de4:	461a      	mov	r2, r3
    6de6:	697b      	ldr	r3, [r7, #20]
    6de8:	4053      	eors	r3, r2
    6dea:	617b      	str	r3, [r7, #20]
						idx = (idx + 1) % sizeof(whitening);
    6dec:	6a3b      	ldr	r3, [r7, #32]
    6dee:	3301      	adds	r3, #1
    6df0:	4619      	mov	r1, r3
    6df2:	4b40      	ldr	r3, [pc, #256]	; (6ef4 <cb_follow_le+0x1cc>)
    6df4:	fba1 2303 	umull	r2, r3, r1, r3
    6df8:	1ac8      	subs	r0, r1, r3
    6dfa:	0840      	lsrs	r0, r0, #1
    6dfc:	4403      	add	r3, r0
    6dfe:	099a      	lsrs	r2, r3, #6
    6e00:	4613      	mov	r3, r2
    6e02:	01db      	lsls	r3, r3, #7
    6e04:	1a9b      	subs	r3, r3, r2
    6e06:	1aca      	subs	r2, r1, r3
    6e08:	623a      	str	r2, [r7, #32]
					}
					byte |= bit << k;
    6e0a:	697a      	ldr	r2, [r7, #20]
    6e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e0e:	fa02 f303 	lsl.w	r3, r2, r3
    6e12:	b2da      	uxtb	r2, r3
    6e14:	7efb      	ldrb	r3, [r7, #27]
    6e16:	4313      	orrs	r3, r2
    6e18:	b2db      	uxtb	r3, r3
    6e1a:	76fb      	strb	r3, [r7, #27]
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    6e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e1e:	3301      	adds	r3, #1
    6e20:	627b      	str	r3, [r7, #36]	; 0x24
    6e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e24:	2b07      	cmp	r3, #7
    6e26:	ddc4      	ble.n	6db2 <cb_follow_le+0x8a>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    6e28:	4b33      	ldr	r3, [pc, #204]	; (6ef8 <cb_follow_le+0x1d0>)
    6e2a:	681a      	ldr	r2, [r3, #0]
    6e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e2e:	4413      	add	r3, r2
    6e30:	7efa      	ldrb	r2, [r7, #27]
    6e32:	701a      	strb	r2, [r3, #0]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    6e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e36:	3301      	adds	r3, #1
    6e38:	62bb      	str	r3, [r7, #40]	; 0x28
    6e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e3c:	2b2d      	cmp	r3, #45	; 0x2d
    6e3e:	ddb3      	ble.n	6da8 <cb_follow_le+0x80>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    6e40:	4b2a      	ldr	r3, [pc, #168]	; (6eec <cb_follow_le+0x1c4>)
    6e42:	691b      	ldr	r3, [r3, #16]
    6e44:	2b00      	cmp	r3, #0
    6e46:	d02e      	beq.n	6ea6 <cb_follow_le+0x17e>
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    6e48:	4b2b      	ldr	r3, [pc, #172]	; (6ef8 <cb_follow_le+0x1d0>)
    6e4a:	681b      	ldr	r3, [r3, #0]
    6e4c:	3305      	adds	r3, #5
    6e4e:	781b      	ldrb	r3, [r3, #0]
    6e50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6e54:	3302      	adds	r3, #2
    6e56:	60fb      	str	r3, [r7, #12]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
    6e58:	4b24      	ldr	r3, [pc, #144]	; (6eec <cb_follow_le+0x1c4>)
    6e5a:	68da      	ldr	r2, [r3, #12]
    6e5c:	4b26      	ldr	r3, [pc, #152]	; (6ef8 <cb_follow_le+0x1d0>)
    6e5e:	681b      	ldr	r3, [r3, #0]
    6e60:	3304      	adds	r3, #4
    6e62:	4610      	mov	r0, r2
    6e64:	4619      	mov	r1, r3
    6e66:	68fa      	ldr	r2, [r7, #12]
    6e68:	f001 fb2a 	bl	84c0 <btle_crcgen_lut>
    6e6c:	60b8      	str	r0, [r7, #8]
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    6e6e:	4b22      	ldr	r3, [pc, #136]	; (6ef8 <cb_follow_le+0x1d0>)
    6e70:	681a      	ldr	r2, [r3, #0]
    6e72:	68fb      	ldr	r3, [r7, #12]
    6e74:	3306      	adds	r3, #6
    6e76:	4413      	add	r3, r2
    6e78:	781b      	ldrb	r3, [r3, #0]
    6e7a:	041a      	lsls	r2, r3, #16
							 | (idle_rxbuf[4+len+1] << 8)
    6e7c:	4b1e      	ldr	r3, [pc, #120]	; (6ef8 <cb_follow_le+0x1d0>)
    6e7e:	6819      	ldr	r1, [r3, #0]
    6e80:	68fb      	ldr	r3, [r7, #12]
    6e82:	3305      	adds	r3, #5
    6e84:	440b      	add	r3, r1
    6e86:	781b      	ldrb	r3, [r3, #0]
    6e88:	021b      	lsls	r3, r3, #8
    6e8a:	4313      	orrs	r3, r2
							 |  idle_rxbuf[4+len+0];
    6e8c:	4a1a      	ldr	r2, [pc, #104]	; (6ef8 <cb_follow_le+0x1d0>)
    6e8e:	6812      	ldr	r2, [r2, #0]
    6e90:	68f9      	ldr	r1, [r7, #12]
    6e92:	3104      	adds	r1, #4
    6e94:	440a      	add	r2, r1
    6e96:	7812      	ldrb	r2, [r2, #0]
    6e98:	4313      	orrs	r3, r2

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    6e9a:	607b      	str	r3, [r7, #4]
							 | (idle_rxbuf[4+len+1] << 8)
							 |  idle_rxbuf[4+len+0];
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    6e9c:	68ba      	ldr	r2, [r7, #8]
    6e9e:	687b      	ldr	r3, [r7, #4]
    6ea0:	429a      	cmp	r2, r3
    6ea2:	d000      	beq.n	6ea6 <cb_follow_le+0x17e>
					break;
    6ea4:	e017      	b.n	6ed6 <cb_follow_le+0x1ae>
			}

			// send to PC
			enqueue(LE_PACKET, idle_rxbuf);
    6ea6:	4b14      	ldr	r3, [pc, #80]	; (6ef8 <cb_follow_le+0x1d0>)
    6ea8:	681b      	ldr	r3, [r3, #0]
    6eaa:	2001      	movs	r0, #1
    6eac:	4619      	mov	r1, r3
    6eae:	f7fd fb0b 	bl	44c8 <enqueue>
			RXLED_SET;
    6eb2:	4b12      	ldr	r3, [pc, #72]	; (6efc <cb_follow_le+0x1d4>)
    6eb4:	2210      	movs	r2, #16
    6eb6:	601a      	str	r2, [r3, #0]

			packet_cb(idle_rxbuf);
    6eb8:	4b11      	ldr	r3, [pc, #68]	; (6f00 <cb_follow_le+0x1d8>)
    6eba:	681b      	ldr	r3, [r3, #0]
    6ebc:	4a0e      	ldr	r2, [pc, #56]	; (6ef8 <cb_follow_le+0x1d0>)
    6ebe:	6812      	ldr	r2, [r2, #0]
    6ec0:	4610      	mov	r0, r2
    6ec2:	4798      	blx	r3

			break;
    6ec4:	e007      	b.n	6ed6 <cb_follow_le+0x1ae>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    6ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6ec8:	3301      	adds	r3, #1
    6eca:	62fb      	str	r3, [r7, #44]	; 0x2c
    6ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6ece:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    6ed2:	f6ff af54 	blt.w	6d7e <cb_follow_le+0x56>

			break;
		}
	}

	return 1;
    6ed6:	2301      	movs	r3, #1
}
    6ed8:	4618      	mov	r0, r3
    6eda:	3730      	adds	r7, #48	; 0x30
    6edc:	46bd      	mov	sp, r7
    6ede:	bd80      	pop	{r7, pc}
    6ee0:	1000049c 	.word	0x1000049c
    6ee4:	0000b84c 	.word	0x0000b84c
    6ee8:	10000d08 	.word	0x10000d08
    6eec:	10000458 	.word	0x10000458
    6ef0:	0000b7cc 	.word	0x0000b7cc
    6ef4:	02040811 	.word	0x02040811
    6ef8:	10000454 	.word	0x10000454
    6efc:	2009c038 	.word	0x2009c038
    6f00:	1000099c 	.word	0x1000099c

00006f04 <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    6f04:	b580      	push	{r7, lr}
    6f06:	b08a      	sub	sp, #40	; 0x28
    6f08:	af00      	add	r7, sp, #0
    6f0a:	6078      	str	r0, [r7, #4]
	int i;
	u32 aa = 0;
    6f0c:	2300      	movs	r3, #0
    6f0e:	623b      	str	r3, [r7, #32]
#define ADV_ADDRESS_IDX 0
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
    6f10:	687b      	ldr	r3, [r7, #4]
    6f12:	61fb      	str	r3, [r7, #28]
	u8 header = packet[HEADER_IDX];
    6f14:	687b      	ldr	r3, [r7, #4]
    6f16:	791b      	ldrb	r3, [r3, #4]
    6f18:	76fb      	strb	r3, [r7, #27]
	u8 *data_len = &packet[DATA_LEN_IDX];
    6f1a:	687b      	ldr	r3, [r7, #4]
    6f1c:	3305      	adds	r3, #5
    6f1e:	617b      	str	r3, [r7, #20]
	u8 *data = &packet[DATA_START_IDX];
    6f20:	687b      	ldr	r3, [r7, #4]
    6f22:	3306      	adds	r3, #6
    6f24:	613b      	str	r3, [r7, #16]
	u8 *crc = &packet[DATA_START_IDX + *data_len];
    6f26:	697b      	ldr	r3, [r7, #20]
    6f28:	781b      	ldrb	r3, [r3, #0]
    6f2a:	3306      	adds	r3, #6
    6f2c:	461a      	mov	r2, r3
    6f2e:	687b      	ldr	r3, [r7, #4]
    6f30:	4413      	add	r3, r2
    6f32:	60fb      	str	r3, [r7, #12]

	if (le.link_state == LINK_CONN_PENDING) {
    6f34:	4b8b      	ldr	r3, [pc, #556]	; (7164 <connection_follow_cb+0x260>)
    6f36:	7d1b      	ldrb	r3, [r3, #20]
    6f38:	2b02      	cmp	r3, #2
    6f3a:	d11c      	bne.n	6f76 <connection_follow_cb+0x72>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    6f3c:	4b89      	ldr	r3, [pc, #548]	; (7164 <connection_follow_cb+0x260>)
    6f3e:	2203      	movs	r2, #3
    6f40:	751a      	strb	r2, [r3, #20]
		le.conn_epoch = clkn;
    6f42:	4b89      	ldr	r3, [pc, #548]	; (7168 <connection_follow_cb+0x264>)
    6f44:	681b      	ldr	r3, [r3, #0]
    6f46:	4a87      	ldr	r2, [pc, #540]	; (7164 <connection_follow_cb+0x260>)
    6f48:	6193      	str	r3, [r2, #24]
		le.interval_timer = le.conn_interval - 1;
    6f4a:	4b86      	ldr	r3, [pc, #536]	; (7164 <connection_follow_cb+0x260>)
    6f4c:	8bdb      	ldrh	r3, [r3, #30]
    6f4e:	3b01      	subs	r3, #1
    6f50:	b29a      	uxth	r2, r3
    6f52:	4b84      	ldr	r3, [pc, #528]	; (7164 <connection_follow_cb+0x260>)
    6f54:	839a      	strh	r2, [r3, #28]
		le.conn_count = 0;
    6f56:	4b83      	ldr	r3, [pc, #524]	; (7164 <connection_follow_cb+0x260>)
    6f58:	2200      	movs	r2, #0
    6f5a:	841a      	strh	r2, [r3, #32]
		le.update_pending = 0;
    6f5c:	4b81      	ldr	r3, [pc, #516]	; (7164 <connection_follow_cb+0x260>)
    6f5e:	2200      	movs	r2, #0
    6f60:	629a      	str	r2, [r3, #40]	; 0x28

		// hue hue hue
		if (jam_mode != JAM_NONE)
    6f62:	4b82      	ldr	r3, [pc, #520]	; (716c <connection_follow_cb+0x268>)
    6f64:	781b      	ldrb	r3, [r3, #0]
    6f66:	b2db      	uxtb	r3, r3
    6f68:	2b00      	cmp	r3, #0
    6f6a:	f000 80f7 	beq.w	715c <connection_follow_cb+0x258>
			le_jam_count = JAM_COUNT_DEFAULT;
    6f6e:	4b80      	ldr	r3, [pc, #512]	; (7170 <connection_follow_cb+0x26c>)
    6f70:	2228      	movs	r2, #40	; 0x28
    6f72:	601a      	str	r2, [r3, #0]
    6f74:	e0f2      	b.n	715c <connection_follow_cb+0x258>

	} else if (le.link_state == LINK_CONNECTED) {
    6f76:	4b7b      	ldr	r3, [pc, #492]	; (7164 <connection_follow_cb+0x260>)
    6f78:	7d1b      	ldrb	r3, [r3, #20]
    6f7a:	2b03      	cmp	r3, #3
    6f7c:	d16f      	bne.n	705e <connection_follow_cb+0x15a>
		u8 llid =  header & 0x03;
    6f7e:	7efb      	ldrb	r3, [r7, #27]
    6f80:	f003 0303 	and.w	r3, r3, #3
    6f84:	72fb      	strb	r3, [r7, #11]

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    6f86:	4b77      	ldr	r3, [pc, #476]	; (7164 <connection_follow_cb+0x260>)
    6f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6f8a:	2b00      	cmp	r3, #0
    6f8c:	d021      	beq.n	6fd2 <connection_follow_cb+0xce>
    6f8e:	4b75      	ldr	r3, [pc, #468]	; (7164 <connection_follow_cb+0x260>)
    6f90:	8c1b      	ldrh	r3, [r3, #32]
    6f92:	b29a      	uxth	r2, r3
    6f94:	4b73      	ldr	r3, [pc, #460]	; (7164 <connection_follow_cb+0x260>)
    6f96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6f98:	429a      	cmp	r2, r3
    6f9a:	d11a      	bne.n	6fd2 <connection_follow_cb+0xce>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    6f9c:	4b72      	ldr	r3, [pc, #456]	; (7168 <connection_follow_cb+0x264>)
    6f9e:	681b      	ldr	r3, [r3, #0]
    6fa0:	4a70      	ldr	r2, [pc, #448]	; (7164 <connection_follow_cb+0x260>)
    6fa2:	6193      	str	r3, [r2, #24]
			le.conn_interval = le.interval_update;
    6fa4:	4b6f      	ldr	r3, [pc, #444]	; (7164 <connection_follow_cb+0x260>)
    6fa6:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    6fa8:	4b6e      	ldr	r3, [pc, #440]	; (7164 <connection_follow_cb+0x260>)
    6faa:	83da      	strh	r2, [r3, #30]
			le.interval_timer = le.interval_update - 1;
    6fac:	4b6d      	ldr	r3, [pc, #436]	; (7164 <connection_follow_cb+0x260>)
    6fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6fb0:	3b01      	subs	r3, #1
    6fb2:	b29a      	uxth	r2, r3
    6fb4:	4b6b      	ldr	r3, [pc, #428]	; (7164 <connection_follow_cb+0x260>)
    6fb6:	839a      	strh	r2, [r3, #28]
			le.win_size = le.win_size_update;
    6fb8:	4b6a      	ldr	r3, [pc, #424]	; (7164 <connection_follow_cb+0x260>)
    6fba:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    6fbe:	4b69      	ldr	r3, [pc, #420]	; (7164 <connection_follow_cb+0x260>)
    6fc0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			le.win_offset = le.win_offset_update;
    6fc4:	4b67      	ldr	r3, [pc, #412]	; (7164 <connection_follow_cb+0x260>)
    6fc6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    6fc8:	4b66      	ldr	r3, [pc, #408]	; (7164 <connection_follow_cb+0x260>)
    6fca:	849a      	strh	r2, [r3, #36]	; 0x24
			le.update_pending = 0;
    6fcc:	4b65      	ldr	r3, [pc, #404]	; (7164 <connection_follow_cb+0x260>)
    6fce:	2200      	movs	r2, #0
    6fd0:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if (llid == 0x03 && data[0] == 0x00) {
    6fd2:	7afb      	ldrb	r3, [r7, #11]
    6fd4:	2b03      	cmp	r3, #3
    6fd6:	d141      	bne.n	705c <connection_follow_cb+0x158>
    6fd8:	693b      	ldr	r3, [r7, #16]
    6fda:	781b      	ldrb	r3, [r3, #0]
    6fdc:	2b00      	cmp	r3, #0
    6fde:	d13d      	bne.n	705c <connection_follow_cb+0x158>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    6fe0:	687b      	ldr	r3, [r7, #4]
    6fe2:	79da      	ldrb	r2, [r3, #7]
    6fe4:	4b5f      	ldr	r3, [pc, #380]	; (7164 <connection_follow_cb+0x260>)
    6fe6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    6fea:	687b      	ldr	r3, [r7, #4]
    6fec:	3308      	adds	r3, #8
    6fee:	781b      	ldrb	r3, [r3, #0]
    6ff0:	b29a      	uxth	r2, r3
    6ff2:	687b      	ldr	r3, [r7, #4]
    6ff4:	3309      	adds	r3, #9
    6ff6:	781b      	ldrb	r3, [r3, #0]
    6ff8:	b29b      	uxth	r3, r3
    6ffa:	021b      	lsls	r3, r3, #8
    6ffc:	b29b      	uxth	r3, r3
    6ffe:	4413      	add	r3, r2
    7000:	b29a      	uxth	r2, r3
    7002:	4b58      	ldr	r3, [pc, #352]	; (7164 <connection_follow_cb+0x260>)
    7004:	865a      	strh	r2, [r3, #50]	; 0x32
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    7006:	687b      	ldr	r3, [r7, #4]
    7008:	330a      	adds	r3, #10
    700a:	781b      	ldrb	r3, [r3, #0]
    700c:	b29a      	uxth	r2, r3
    700e:	687b      	ldr	r3, [r7, #4]
    7010:	330b      	adds	r3, #11
    7012:	781b      	ldrb	r3, [r3, #0]
    7014:	b29b      	uxth	r3, r3
    7016:	021b      	lsls	r3, r3, #8
    7018:	b29b      	uxth	r3, r3
    701a:	4413      	add	r3, r2
    701c:	b29a      	uxth	r2, r3
    701e:	4b51      	ldr	r3, [pc, #324]	; (7164 <connection_follow_cb+0x260>)
    7020:	85da      	strh	r2, [r3, #46]	; 0x2e
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    7022:	687b      	ldr	r3, [r7, #4]
    7024:	3310      	adds	r3, #16
    7026:	781b      	ldrb	r3, [r3, #0]
    7028:	b29a      	uxth	r2, r3
    702a:	687b      	ldr	r3, [r7, #4]
    702c:	3311      	adds	r3, #17
    702e:	781b      	ldrb	r3, [r3, #0]
    7030:	b29b      	uxth	r3, r3
    7032:	021b      	lsls	r3, r3, #8
    7034:	b29b      	uxth	r3, r3
    7036:	4413      	add	r3, r2
    7038:	b29a      	uxth	r2, r3
    703a:	4b4a      	ldr	r3, [pc, #296]	; (7164 <connection_follow_cb+0x260>)
    703c:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (le.update_instant - le.conn_count < 32767)
    703e:	4b49      	ldr	r3, [pc, #292]	; (7164 <connection_follow_cb+0x260>)
    7040:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    7042:	461a      	mov	r2, r3
    7044:	4b47      	ldr	r3, [pc, #284]	; (7164 <connection_follow_cb+0x260>)
    7046:	8c1b      	ldrh	r3, [r3, #32]
    7048:	b29b      	uxth	r3, r3
    704a:	1ad3      	subs	r3, r2, r3
    704c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    7050:	4293      	cmp	r3, r2
    7052:	dc03      	bgt.n	705c <connection_follow_cb+0x158>
				le.update_pending = 1;
    7054:	4b43      	ldr	r3, [pc, #268]	; (7164 <connection_follow_cb+0x260>)
    7056:	2201      	movs	r2, #1
    7058:	629a      	str	r2, [r3, #40]	; 0x28
    705a:	e07f      	b.n	715c <connection_follow_cb+0x258>
    705c:	e07e      	b.n	715c <connection_follow_cb+0x258>
		}

	} else if (le.link_state == LINK_LISTENING) {
    705e:	4b41      	ldr	r3, [pc, #260]	; (7164 <connection_follow_cb+0x260>)
    7060:	7d1b      	ldrb	r3, [r3, #20]
    7062:	2b01      	cmp	r3, #1
    7064:	d17a      	bne.n	715c <connection_follow_cb+0x258>
		u8 pkt_type = packet[4] & 0x0F;
    7066:	687b      	ldr	r3, [r7, #4]
    7068:	3304      	adds	r3, #4
    706a:	781b      	ldrb	r3, [r3, #0]
    706c:	f003 030f 	and.w	r3, r3, #15
    7070:	72bb      	strb	r3, [r7, #10]
		if (pkt_type == 0x05) {
    7072:	7abb      	ldrb	r3, [r7, #10]
    7074:	2b05      	cmp	r3, #5
    7076:	d171      	bne.n	715c <connection_follow_cb+0x258>
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    7078:	4b3a      	ldr	r3, [pc, #232]	; (7164 <connection_follow_cb+0x260>)
    707a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    707c:	2b00      	cmp	r3, #0
    707e:	d014      	beq.n	70aa <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    7080:	687b      	ldr	r3, [r7, #4]
    7082:	3306      	adds	r3, #6
    7084:	483b      	ldr	r0, [pc, #236]	; (7174 <connection_follow_cb+0x270>)
    7086:	4619      	mov	r1, r3
    7088:	2206      	movs	r2, #6
    708a:	f004 faaf 	bl	b5ec <memcmp>
    708e:	4603      	mov	r3, r0
	} else if (le.link_state == LINK_LISTENING) {
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    7090:	2b00      	cmp	r3, #0
    7092:	d00a      	beq.n	70aa <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    7094:	687b      	ldr	r3, [r7, #4]
    7096:	330c      	adds	r3, #12
    7098:	4836      	ldr	r0, [pc, #216]	; (7174 <connection_follow_cb+0x270>)
    709a:	4619      	mov	r1, r3
    709c:	2206      	movs	r2, #6
    709e:	f004 faa5 	bl	b5ec <memcmp>
    70a2:	4603      	mov	r3, r0
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    70a4:	2b00      	cmp	r3, #0
    70a6:	d000      	beq.n	70aa <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
    70a8:	e058      	b.n	715c <connection_follow_cb+0x258>
			}

			le.link_state = LINK_CONN_PENDING;
    70aa:	4b2e      	ldr	r3, [pc, #184]	; (7164 <connection_follow_cb+0x260>)
    70ac:	2202      	movs	r2, #2
    70ae:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    70b0:	4b2c      	ldr	r3, [pc, #176]	; (7164 <connection_follow_cb+0x260>)
    70b2:	2200      	movs	r2, #0
    70b4:	611a      	str	r2, [r3, #16]

			for (i = 0; i < 4; ++i)
    70b6:	2300      	movs	r3, #0
    70b8:	627b      	str	r3, [r7, #36]	; 0x24
    70ba:	e011      	b.n	70e0 <connection_follow_cb+0x1dc>
				aa |= packet[18+i] << (i*8);
    70bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    70be:	3312      	adds	r3, #18
    70c0:	461a      	mov	r2, r3
    70c2:	687b      	ldr	r3, [r7, #4]
    70c4:	4413      	add	r3, r2
    70c6:	781b      	ldrb	r3, [r3, #0]
    70c8:	461a      	mov	r2, r3
    70ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    70cc:	00db      	lsls	r3, r3, #3
    70ce:	fa02 f303 	lsl.w	r3, r2, r3
    70d2:	461a      	mov	r2, r3
    70d4:	6a3b      	ldr	r3, [r7, #32]
    70d6:	4313      	orrs	r3, r2
    70d8:	623b      	str	r3, [r7, #32]
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    70da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    70dc:	3301      	adds	r3, #1
    70de:	627b      	str	r3, [r7, #36]	; 0x24
    70e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    70e2:	2b03      	cmp	r3, #3
    70e4:	ddea      	ble.n	70bc <connection_follow_cb+0x1b8>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    70e6:	6a38      	ldr	r0, [r7, #32]
    70e8:	f7ff f97e 	bl	63e8 <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    70ec:	687b      	ldr	r3, [r7, #4]
    70ee:	3318      	adds	r3, #24
    70f0:	781b      	ldrb	r3, [r3, #0]
    70f2:	041a      	lsls	r2, r3, #16
						| (packet[CRC_INIT+1] << 8)
    70f4:	687b      	ldr	r3, [r7, #4]
    70f6:	3317      	adds	r3, #23
    70f8:	781b      	ldrb	r3, [r3, #0]
    70fa:	021b      	lsls	r3, r3, #8
    70fc:	4313      	orrs	r3, r2
						|  packet[CRC_INIT+0];
    70fe:	687a      	ldr	r2, [r7, #4]
    7100:	3216      	adds	r2, #22
    7102:	7812      	ldrb	r2, [r2, #0]
    7104:	4313      	orrs	r3, r2
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    7106:	461a      	mov	r2, r3
    7108:	4b16      	ldr	r3, [pc, #88]	; (7164 <connection_follow_cb+0x260>)
    710a:	609a      	str	r2, [r3, #8]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    710c:	4b15      	ldr	r3, [pc, #84]	; (7164 <connection_follow_cb+0x260>)
    710e:	689b      	ldr	r3, [r3, #8]
    7110:	4618      	mov	r0, r3
    7112:	f002 faf7 	bl	9704 <rbit>
    7116:	4602      	mov	r2, r0
    7118:	4b12      	ldr	r3, [pc, #72]	; (7164 <connection_follow_cb+0x260>)
    711a:	60da      	str	r2, [r3, #12]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    711c:	687b      	ldr	r3, [r7, #4]
    711e:	7e5a      	ldrb	r2, [r3, #25]
    7120:	4b10      	ldr	r3, [pc, #64]	; (7164 <connection_follow_cb+0x260>)
    7122:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    7126:	687b      	ldr	r3, [r7, #4]
    7128:	331a      	adds	r3, #26
    712a:	781b      	ldrb	r3, [r3, #0]
    712c:	b29a      	uxth	r2, r3
    712e:	4b0d      	ldr	r3, [pc, #52]	; (7164 <connection_follow_cb+0x260>)
    7130:	849a      	strh	r2, [r3, #36]	; 0x24

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = packet[CONN_INTERVAL];
    7132:	687b      	ldr	r3, [r7, #4]
    7134:	331c      	adds	r3, #28
    7136:	781b      	ldrb	r3, [r3, #0]
    7138:	b29a      	uxth	r2, r3
    713a:	4b0a      	ldr	r3, [pc, #40]	; (7164 <connection_follow_cb+0x260>)
    713c:	83da      	strh	r2, [r3, #30]

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    713e:	687b      	ldr	r3, [r7, #4]
    7140:	3327      	adds	r3, #39	; 0x27
    7142:	781b      	ldrb	r3, [r3, #0]
    7144:	f003 031f 	and.w	r3, r3, #31
    7148:	b2da      	uxtb	r2, r3
    714a:	4b06      	ldr	r3, [pc, #24]	; (7164 <connection_follow_cb+0x260>)
    714c:	759a      	strb	r2, [r3, #22]
			le.channel_idx = le.channel_increment;
    714e:	4b05      	ldr	r3, [pc, #20]	; (7164 <connection_follow_cb+0x260>)
    7150:	7d9a      	ldrb	r2, [r3, #22]
    7152:	4b04      	ldr	r3, [pc, #16]	; (7164 <connection_follow_cb+0x260>)
    7154:	755a      	strb	r2, [r3, #21]

			// Hop to the initial channel immediately
			do_hop = 1;
    7156:	4b08      	ldr	r3, [pc, #32]	; (7178 <connection_follow_cb+0x274>)
    7158:	2201      	movs	r2, #1
    715a:	701a      	strb	r2, [r3, #0]
		}
	}
}
    715c:	3728      	adds	r7, #40	; 0x28
    715e:	46bd      	mov	sp, r7
    7160:	bd80      	pop	{r7, pc}
    7162:	bf00      	nop
    7164:	10000458 	.word	0x10000458
    7168:	10000be4 	.word	0x10000be4
    716c:	10000a40 	.word	0x10000a40
    7170:	10000994 	.word	0x10000994
    7174:	1000048c 	.word	0x1000048c
    7178:	1000097d 	.word	0x1000097d

0000717c <bt_follow_le>:

void bt_follow_le() {
    717c:	b580      	push	{r7, lr}
    717e:	af00      	add	r7, sp, #0
	reset_le();
    7180:	f7ff f94c 	bl	641c <reset_le>
	packet_cb = connection_follow_cb;
    7184:	4b04      	ldr	r3, [pc, #16]	; (7198 <bt_follow_le+0x1c>)
    7186:	4a05      	ldr	r2, [pc, #20]	; (719c <bt_follow_le+0x20>)
    7188:	601a      	str	r2, [r3, #0]
	bt_le_sync(MODE_BT_FOLLOW_LE);
    718a:	2009      	movs	r0, #9
    718c:	f7ff fb1e 	bl	67cc <bt_le_sync>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    7190:	4b03      	ldr	r3, [pc, #12]	; (71a0 <bt_follow_le+0x24>)
    7192:	2200      	movs	r2, #0
    7194:	701a      	strb	r2, [r3, #0]
}
    7196:	bd80      	pop	{r7, pc}
    7198:	1000099c 	.word	0x1000099c
    719c:	00006f05 	.word	0x00006f05
    71a0:	10000a3e 	.word	0x10000a3e

000071a4 <le_promisc_state>:

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    71a4:	b580      	push	{r7, lr}
    71a6:	b092      	sub	sp, #72	; 0x48
    71a8:	af00      	add	r7, sp, #0
    71aa:	4603      	mov	r3, r0
    71ac:	60b9      	str	r1, [r7, #8]
    71ae:	607a      	str	r2, [r7, #4]
    71b0:	73fb      	strb	r3, [r7, #15]
	u8 buf[50] = { 0, };
    71b2:	f107 0314 	add.w	r3, r7, #20
    71b6:	2200      	movs	r2, #0
    71b8:	601a      	str	r2, [r3, #0]
    71ba:	3304      	adds	r3, #4
    71bc:	2200      	movs	r2, #0
    71be:	601a      	str	r2, [r3, #0]
    71c0:	3304      	adds	r3, #4
    71c2:	2200      	movs	r2, #0
    71c4:	601a      	str	r2, [r3, #0]
    71c6:	3304      	adds	r3, #4
    71c8:	2200      	movs	r2, #0
    71ca:	601a      	str	r2, [r3, #0]
    71cc:	3304      	adds	r3, #4
    71ce:	2200      	movs	r2, #0
    71d0:	601a      	str	r2, [r3, #0]
    71d2:	3304      	adds	r3, #4
    71d4:	2200      	movs	r2, #0
    71d6:	601a      	str	r2, [r3, #0]
    71d8:	3304      	adds	r3, #4
    71da:	2200      	movs	r2, #0
    71dc:	601a      	str	r2, [r3, #0]
    71de:	3304      	adds	r3, #4
    71e0:	2200      	movs	r2, #0
    71e2:	601a      	str	r2, [r3, #0]
    71e4:	3304      	adds	r3, #4
    71e6:	2200      	movs	r2, #0
    71e8:	601a      	str	r2, [r3, #0]
    71ea:	3304      	adds	r3, #4
    71ec:	2200      	movs	r2, #0
    71ee:	601a      	str	r2, [r3, #0]
    71f0:	3304      	adds	r3, #4
    71f2:	2200      	movs	r2, #0
    71f4:	601a      	str	r2, [r3, #0]
    71f6:	3304      	adds	r3, #4
    71f8:	2200      	movs	r2, #0
    71fa:	601a      	str	r2, [r3, #0]
    71fc:	3304      	adds	r3, #4
    71fe:	2200      	movs	r2, #0
    7200:	801a      	strh	r2, [r3, #0]
    7202:	3302      	adds	r3, #2
	if (len > 49)
    7204:	687b      	ldr	r3, [r7, #4]
    7206:	2b31      	cmp	r3, #49	; 0x31
    7208:	d901      	bls.n	720e <le_promisc_state+0x6a>
		len = 49;
    720a:	2331      	movs	r3, #49	; 0x31
    720c:	607b      	str	r3, [r7, #4]

	buf[0] = type;
    720e:	7bfb      	ldrb	r3, [r7, #15]
    7210:	753b      	strb	r3, [r7, #20]
	memcpy(&buf[1], data, len);
    7212:	f107 0314 	add.w	r3, r7, #20
    7216:	3301      	adds	r3, #1
    7218:	4618      	mov	r0, r3
    721a:	68b9      	ldr	r1, [r7, #8]
    721c:	687a      	ldr	r2, [r7, #4]
    721e:	f004 fa17 	bl	b650 <memcpy>
	enqueue(LE_PROMISC, buf);
    7222:	f107 0314 	add.w	r3, r7, #20
    7226:	2005      	movs	r0, #5
    7228:	4619      	mov	r1, r3
    722a:	f7fd f94d 	bl	44c8 <enqueue>
}
    722e:	3748      	adds	r7, #72	; 0x48
    7230:	46bd      	mov	sp, r7
    7232:	bd80      	pop	{r7, pc}

00007234 <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    7234:	b580      	push	{r7, lr}
    7236:	b084      	sub	sp, #16
    7238:	af00      	add	r7, sp, #0
    723a:	6078      	str	r0, [r7, #4]
	static u32 first_ts = 0;
	if (channel == 2404) {
    723c:	4b55      	ldr	r3, [pc, #340]	; (7394 <promisc_recover_hop_increment+0x160>)
    723e:	881b      	ldrh	r3, [r3, #0]
    7240:	b29b      	uxth	r3, r3
    7242:	f640 1264 	movw	r2, #2404	; 0x964
    7246:	4293      	cmp	r3, r2
    7248:	d114      	bne.n	7274 <promisc_recover_hop_increment+0x40>
		first_ts = CLK100NS;
    724a:	4b53      	ldr	r3, [pc, #332]	; (7398 <promisc_recover_hop_increment+0x164>)
    724c:	681b      	ldr	r3, [r3, #0]
    724e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7252:	f640 4235 	movw	r2, #3125	; 0xc35
    7256:	fb02 f203 	mul.w	r2, r2, r3
    725a:	4b50      	ldr	r3, [pc, #320]	; (739c <promisc_recover_hop_increment+0x168>)
    725c:	681b      	ldr	r3, [r3, #0]
    725e:	4413      	add	r3, r2
    7260:	4a4f      	ldr	r2, [pc, #316]	; (73a0 <promisc_recover_hop_increment+0x16c>)
    7262:	6013      	str	r3, [r2, #0]
		hop_direct_channel = 2406;
    7264:	4b4f      	ldr	r3, [pc, #316]	; (73a4 <promisc_recover_hop_increment+0x170>)
    7266:	f640 1266 	movw	r2, #2406	; 0x966
    726a:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    726c:	4b4e      	ldr	r3, [pc, #312]	; (73a8 <promisc_recover_hop_increment+0x174>)
    726e:	2201      	movs	r2, #1
    7270:	701a      	strb	r2, [r3, #0]
    7272:	e08b      	b.n	738c <promisc_recover_hop_increment+0x158>
	} else if (channel == 2406) {
    7274:	4b47      	ldr	r3, [pc, #284]	; (7394 <promisc_recover_hop_increment+0x160>)
    7276:	881b      	ldrh	r3, [r3, #0]
    7278:	b29b      	uxth	r3, r3
    727a:	f640 1266 	movw	r2, #2406	; 0x966
    727e:	4293      	cmp	r3, r2
    7280:	d17d      	bne.n	737e <promisc_recover_hop_increment+0x14a>
		u32 second_ts = CLK100NS;
    7282:	4b45      	ldr	r3, [pc, #276]	; (7398 <promisc_recover_hop_increment+0x164>)
    7284:	681b      	ldr	r3, [r3, #0]
    7286:	f3c3 0313 	ubfx	r3, r3, #0, #20
    728a:	f640 4235 	movw	r2, #3125	; 0xc35
    728e:	fb02 f203 	mul.w	r2, r2, r3
    7292:	4b42      	ldr	r3, [pc, #264]	; (739c <promisc_recover_hop_increment+0x168>)
    7294:	681b      	ldr	r3, [r3, #0]
    7296:	4413      	add	r3, r2
    7298:	60fb      	str	r3, [r7, #12]
		if (second_ts < first_ts)
    729a:	4b41      	ldr	r3, [pc, #260]	; (73a0 <promisc_recover_hop_increment+0x16c>)
    729c:	681b      	ldr	r3, [r3, #0]
    729e:	68fa      	ldr	r2, [r7, #12]
    72a0:	429a      	cmp	r2, r3
    72a2:	d205      	bcs.n	72b0 <promisc_recover_hop_increment+0x7c>
			second_ts += 3276800000; // handle rollover
    72a4:	68fb      	ldr	r3, [r7, #12]
    72a6:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    72aa:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    72ae:	60fb      	str	r3, [r7, #12]
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    72b0:	4b3b      	ldr	r3, [pc, #236]	; (73a0 <promisc_recover_hop_increment+0x16c>)
    72b2:	681b      	ldr	r3, [r3, #0]
    72b4:	68fa      	ldr	r2, [r7, #12]
    72b6:	1ad2      	subs	r2, r2, r3
    72b8:	4b3c      	ldr	r3, [pc, #240]	; (73ac <promisc_recover_hop_increment+0x178>)
    72ba:	8bdb      	ldrh	r3, [r3, #30]
    72bc:	4619      	mov	r1, r3
    72be:	f243 03d4 	movw	r3, #12500	; 0x30d4
    72c2:	fb03 f301 	mul.w	r3, r3, r1
    72c6:	0fd9      	lsrs	r1, r3, #31
    72c8:	440b      	add	r3, r1
    72ca:	105b      	asrs	r3, r3, #1
    72cc:	4413      	add	r3, r2
    72ce:	4a37      	ldr	r2, [pc, #220]	; (73ac <promisc_recover_hop_increment+0x178>)
    72d0:	8bd2      	ldrh	r2, [r2, #30]
    72d2:	4611      	mov	r1, r2
    72d4:	f243 02d4 	movw	r2, #12500	; 0x30d4
    72d8:	fb02 f201 	mul.w	r2, r2, r1
    72dc:	fbb3 f3f2 	udiv	r3, r3, r2
    72e0:	60bb      	str	r3, [r7, #8]
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    72e2:	68bb      	ldr	r3, [r7, #8]
    72e4:	2b24      	cmp	r3, #36	; 0x24
    72e6:	d842      	bhi.n	736e <promisc_recover_hop_increment+0x13a>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    72e8:	4a31      	ldr	r2, [pc, #196]	; (73b0 <promisc_recover_hop_increment+0x17c>)
    72ea:	68bb      	ldr	r3, [r7, #8]
    72ec:	4413      	add	r3, r2
    72ee:	781a      	ldrb	r2, [r3, #0]
    72f0:	4b2e      	ldr	r3, [pc, #184]	; (73ac <promisc_recover_hop_increment+0x178>)
    72f2:	759a      	strb	r2, [r3, #22]
			le.interval_timer = le.conn_interval / 2;
    72f4:	4b2d      	ldr	r3, [pc, #180]	; (73ac <promisc_recover_hop_increment+0x178>)
    72f6:	8bdb      	ldrh	r3, [r3, #30]
    72f8:	085b      	lsrs	r3, r3, #1
    72fa:	b29a      	uxth	r2, r3
    72fc:	4b2b      	ldr	r3, [pc, #172]	; (73ac <promisc_recover_hop_increment+0x178>)
    72fe:	839a      	strh	r2, [r3, #28]
			le.conn_count = 0;
    7300:	4b2a      	ldr	r3, [pc, #168]	; (73ac <promisc_recover_hop_increment+0x178>)
    7302:	2200      	movs	r2, #0
    7304:	841a      	strh	r2, [r3, #32]
			le.conn_epoch = 0;
    7306:	4b29      	ldr	r3, [pc, #164]	; (73ac <promisc_recover_hop_increment+0x178>)
    7308:	2200      	movs	r2, #0
    730a:	619a      	str	r2, [r3, #24]
			do_hop = 0;
    730c:	4b26      	ldr	r3, [pc, #152]	; (73a8 <promisc_recover_hop_increment+0x174>)
    730e:	2200      	movs	r2, #0
    7310:	701a      	strb	r2, [r3, #0]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    7312:	4b26      	ldr	r3, [pc, #152]	; (73ac <promisc_recover_hop_increment+0x178>)
    7314:	7d9b      	ldrb	r3, [r3, #22]
    7316:	1c5a      	adds	r2, r3, #1
    7318:	4b26      	ldr	r3, [pc, #152]	; (73b4 <promisc_recover_hop_increment+0x180>)
    731a:	fb82 0103 	smull	r0, r1, r2, r3
    731e:	1853      	adds	r3, r2, r1
    7320:	1159      	asrs	r1, r3, #5
    7322:	17d3      	asrs	r3, r2, #31
    7324:	1ac9      	subs	r1, r1, r3
    7326:	460b      	mov	r3, r1
    7328:	00db      	lsls	r3, r3, #3
    732a:	440b      	add	r3, r1
    732c:	009b      	lsls	r3, r3, #2
    732e:	440b      	add	r3, r1
    7330:	1ad1      	subs	r1, r2, r3
    7332:	b2ca      	uxtb	r2, r1
    7334:	4b1d      	ldr	r3, [pc, #116]	; (73ac <promisc_recover_hop_increment+0x178>)
    7336:	755a      	strb	r2, [r3, #21]
			le.link_state = LINK_CONNECTED;
    7338:	4b1c      	ldr	r3, [pc, #112]	; (73ac <promisc_recover_hop_increment+0x178>)
    733a:	2203      	movs	r2, #3
    733c:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0;
    733e:	4b1b      	ldr	r3, [pc, #108]	; (73ac <promisc_recover_hop_increment+0x178>)
    7340:	2200      	movs	r2, #0
    7342:	611a      	str	r2, [r3, #16]
			hop_mode = HOP_BTLE;
    7344:	4b1c      	ldr	r3, [pc, #112]	; (73b8 <promisc_recover_hop_increment+0x184>)
    7346:	2203      	movs	r2, #3
    7348:	701a      	strb	r2, [r3, #0]
			packet_cb = connection_follow_cb;
    734a:	4b1c      	ldr	r3, [pc, #112]	; (73bc <promisc_recover_hop_increment+0x188>)
    734c:	4a1c      	ldr	r2, [pc, #112]	; (73c0 <promisc_recover_hop_increment+0x18c>)
    734e:	601a      	str	r2, [r3, #0]
			le_promisc_state(3, &le.channel_increment, 1);
    7350:	2003      	movs	r0, #3
    7352:	491c      	ldr	r1, [pc, #112]	; (73c4 <promisc_recover_hop_increment+0x190>)
    7354:	2201      	movs	r2, #1
    7356:	f7ff ff25 	bl	71a4 <le_promisc_state>

			if (jam_mode != JAM_NONE)
    735a:	4b1b      	ldr	r3, [pc, #108]	; (73c8 <promisc_recover_hop_increment+0x194>)
    735c:	781b      	ldrb	r3, [r3, #0]
    735e:	b2db      	uxtb	r3, r3
    7360:	2b00      	cmp	r3, #0
    7362:	d003      	beq.n	736c <promisc_recover_hop_increment+0x138>
				le_jam_count = JAM_COUNT_DEFAULT;
    7364:	4b19      	ldr	r3, [pc, #100]	; (73cc <promisc_recover_hop_increment+0x198>)
    7366:	2228      	movs	r2, #40	; 0x28
    7368:	601a      	str	r2, [r3, #0]

			return;
    736a:	e00f      	b.n	738c <promisc_recover_hop_increment+0x158>
    736c:	e00e      	b.n	738c <promisc_recover_hop_increment+0x158>
		}
		hop_direct_channel = 2404;
    736e:	4b0d      	ldr	r3, [pc, #52]	; (73a4 <promisc_recover_hop_increment+0x170>)
    7370:	f640 1264 	movw	r2, #2404	; 0x964
    7374:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    7376:	4b0c      	ldr	r3, [pc, #48]	; (73a8 <promisc_recover_hop_increment+0x174>)
    7378:	2201      	movs	r2, #1
    737a:	701a      	strb	r2, [r3, #0]
    737c:	e006      	b.n	738c <promisc_recover_hop_increment+0x158>
	}
	else {
		hop_direct_channel = 2404;
    737e:	4b09      	ldr	r3, [pc, #36]	; (73a4 <promisc_recover_hop_increment+0x170>)
    7380:	f640 1264 	movw	r2, #2404	; 0x964
    7384:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    7386:	4b08      	ldr	r3, [pc, #32]	; (73a8 <promisc_recover_hop_increment+0x174>)
    7388:	2201      	movs	r2, #1
    738a:	701a      	strb	r2, [r3, #0]
	}
}
    738c:	3710      	adds	r7, #16
    738e:	46bd      	mov	sp, r7
    7390:	bd80      	pop	{r7, pc}
    7392:	bf00      	nop
    7394:	1000049c 	.word	0x1000049c
    7398:	10000be4 	.word	0x10000be4
    739c:	40004008 	.word	0x40004008
    73a0:	10000a54 	.word	0x10000a54
    73a4:	10000980 	.word	0x10000980
    73a8:	1000097d 	.word	0x1000097d
    73ac:	10000458 	.word	0x10000458
    73b0:	0000b874 	.word	0x0000b874
    73b4:	dd67c8a7 	.word	0xdd67c8a7
    73b8:	1000097c 	.word	0x1000097c
    73bc:	1000099c 	.word	0x1000099c
    73c0:	00006f05 	.word	0x00006f05
    73c4:	1000046e 	.word	0x1000046e
    73c8:	10000a40 	.word	0x10000a40
    73cc:	10000994 	.word	0x10000994

000073d0 <promisc_recover_hop_interval>:

void promisc_recover_hop_interval(u8 *packet) {
    73d0:	b580      	push	{r7, lr}
    73d2:	b086      	sub	sp, #24
    73d4:	af00      	add	r7, sp, #0
    73d6:	6078      	str	r0, [r7, #4]
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    73d8:	4b33      	ldr	r3, [pc, #204]	; (74a8 <promisc_recover_hop_interval+0xd8>)
    73da:	681b      	ldr	r3, [r3, #0]
    73dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    73e0:	f640 4235 	movw	r2, #3125	; 0xc35
    73e4:	fb02 f203 	mul.w	r2, r2, r3
    73e8:	4b30      	ldr	r3, [pc, #192]	; (74ac <promisc_recover_hop_interval+0xdc>)
    73ea:	681b      	ldr	r3, [r3, #0]
    73ec:	4413      	add	r3, r2
    73ee:	617b      	str	r3, [r7, #20]
	if (cur_clk < prev_clk)
    73f0:	4b2f      	ldr	r3, [pc, #188]	; (74b0 <promisc_recover_hop_interval+0xe0>)
    73f2:	681b      	ldr	r3, [r3, #0]
    73f4:	697a      	ldr	r2, [r7, #20]
    73f6:	429a      	cmp	r2, r3
    73f8:	d203      	bcs.n	7402 <promisc_recover_hop_interval+0x32>
		cur_clk += 3267800000; // handle rollover
    73fa:	697a      	ldr	r2, [r7, #20]
    73fc:	4b2d      	ldr	r3, [pc, #180]	; (74b4 <promisc_recover_hop_interval+0xe4>)
    73fe:	4413      	add	r3, r2
    7400:	617b      	str	r3, [r7, #20]
	u32 clk_diff = cur_clk - prev_clk;
    7402:	4b2b      	ldr	r3, [pc, #172]	; (74b0 <promisc_recover_hop_interval+0xe0>)
    7404:	681b      	ldr	r3, [r3, #0]
    7406:	697a      	ldr	r2, [r7, #20]
    7408:	1ad3      	subs	r3, r2, r3
    740a:	613b      	str	r3, [r7, #16]
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    740c:	693b      	ldr	r3, [r7, #16]
    740e:	f246 12a7 	movw	r2, #24999	; 0x61a7
    7412:	4293      	cmp	r3, r2
    7414:	d800      	bhi.n	7418 <promisc_recover_hop_interval+0x48>
		return;
    7416:	e043      	b.n	74a0 <promisc_recover_hop_interval+0xd0>

	if (clk_diff < le_promisc.smallest_hop_interval)
    7418:	4b27      	ldr	r3, [pc, #156]	; (74b8 <promisc_recover_hop_interval+0xe8>)
    741a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    741e:	693b      	ldr	r3, [r7, #16]
    7420:	429a      	cmp	r2, r3
    7422:	d903      	bls.n	742c <promisc_recover_hop_interval+0x5c>
		le_promisc.smallest_hop_interval = clk_diff;
    7424:	4a24      	ldr	r2, [pc, #144]	; (74b8 <promisc_recover_hop_interval+0xe8>)
    7426:	693b      	ldr	r3, [r7, #16]
    7428:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    742c:	4b22      	ldr	r3, [pc, #136]	; (74b8 <promisc_recover_hop_interval+0xe8>)
    742e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    7432:	f503 3361 	add.w	r3, r3, #230400	; 0x38400
    7436:	f203 3352 	addw	r3, r3, #850	; 0x352
    743a:	4a20      	ldr	r2, [pc, #128]	; (74bc <promisc_recover_hop_interval+0xec>)
    743c:	fba2 2303 	umull	r2, r3, r2, r3
    7440:	0c9b      	lsrs	r3, r3, #18
    7442:	81fb      	strh	r3, [r7, #14]

	if (le.conn_interval == obsv_hop_interval) {
    7444:	4b1e      	ldr	r3, [pc, #120]	; (74c0 <promisc_recover_hop_interval+0xf0>)
    7446:	8bdb      	ldrh	r3, [r3, #30]
    7448:	89fa      	ldrh	r2, [r7, #14]
    744a:	429a      	cmp	r2, r3
    744c:	d11e      	bne.n	748c <promisc_recover_hop_interval+0xbc>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    744e:	4b1a      	ldr	r3, [pc, #104]	; (74b8 <promisc_recover_hop_interval+0xe8>)
    7450:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    7454:	3301      	adds	r3, #1
    7456:	4a18      	ldr	r2, [pc, #96]	; (74b8 <promisc_recover_hop_interval+0xe8>)
    7458:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    745c:	4b16      	ldr	r3, [pc, #88]	; (74b8 <promisc_recover_hop_interval+0xe8>)
    745e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    7462:	2b05      	cmp	r3, #5
    7464:	d119      	bne.n	749a <promisc_recover_hop_interval+0xca>
			packet_cb = promisc_recover_hop_increment;
    7466:	4b17      	ldr	r3, [pc, #92]	; (74c4 <promisc_recover_hop_interval+0xf4>)
    7468:	4a17      	ldr	r2, [pc, #92]	; (74c8 <promisc_recover_hop_interval+0xf8>)
    746a:	601a      	str	r2, [r3, #0]
			hop_direct_channel = 2404;
    746c:	4b17      	ldr	r3, [pc, #92]	; (74cc <promisc_recover_hop_interval+0xfc>)
    746e:	f640 1264 	movw	r2, #2404	; 0x964
    7472:	801a      	strh	r2, [r3, #0]
			hop_mode = HOP_DIRECT;
    7474:	4b16      	ldr	r3, [pc, #88]	; (74d0 <promisc_recover_hop_interval+0x100>)
    7476:	2204      	movs	r2, #4
    7478:	701a      	strb	r2, [r3, #0]
			do_hop = 1;
    747a:	4b16      	ldr	r3, [pc, #88]	; (74d4 <promisc_recover_hop_interval+0x104>)
    747c:	2201      	movs	r2, #1
    747e:	701a      	strb	r2, [r3, #0]
			le_promisc_state(2, &le.conn_interval, 2);
    7480:	2002      	movs	r0, #2
    7482:	4915      	ldr	r1, [pc, #84]	; (74d8 <promisc_recover_hop_interval+0x108>)
    7484:	2202      	movs	r2, #2
    7486:	f7ff fe8d 	bl	71a4 <le_promisc_state>
    748a:	e006      	b.n	749a <promisc_recover_hop_interval+0xca>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    748c:	4a0c      	ldr	r2, [pc, #48]	; (74c0 <promisc_recover_hop_interval+0xf0>)
    748e:	89fb      	ldrh	r3, [r7, #14]
    7490:	83d3      	strh	r3, [r2, #30]
		le_promisc.consec_intervals = 0;
    7492:	4b09      	ldr	r3, [pc, #36]	; (74b8 <promisc_recover_hop_interval+0xe8>)
    7494:	2200      	movs	r2, #0
    7496:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	prev_clk = cur_clk;
    749a:	4a05      	ldr	r2, [pc, #20]	; (74b0 <promisc_recover_hop_interval+0xe0>)
    749c:	697b      	ldr	r3, [r7, #20]
    749e:	6013      	str	r3, [r2, #0]
}
    74a0:	3718      	adds	r7, #24
    74a2:	46bd      	mov	sp, r7
    74a4:	bd80      	pop	{r7, pc}
    74a6:	bf00      	nop
    74a8:	10000be4 	.word	0x10000be4
    74ac:	40004008 	.word	0x40004008
    74b0:	10000a58 	.word	0x10000a58
    74b4:	c2c6abc0 	.word	0xc2c6abc0
    74b8:	10000bf0 	.word	0x10000bf0
    74bc:	9119a9c1 	.word	0x9119a9c1
    74c0:	10000458 	.word	0x10000458
    74c4:	1000099c 	.word	0x1000099c
    74c8:	00007235 	.word	0x00007235
    74cc:	10000980 	.word	0x10000980
    74d0:	1000097c 	.word	0x1000097c
    74d4:	1000097d 	.word	0x1000097d
    74d8:	10000476 	.word	0x10000476

000074dc <promisc_follow_cb>:

void promisc_follow_cb(u8 *packet) {
    74dc:	b580      	push	{r7, lr}
    74de:	b084      	sub	sp, #16
    74e0:	af00      	add	r7, sp, #0
    74e2:	6078      	str	r0, [r7, #4]
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    74e4:	4b28      	ldr	r3, [pc, #160]	; (7588 <promisc_follow_cb+0xac>)
    74e6:	691b      	ldr	r3, [r3, #16]
    74e8:	2b00      	cmp	r3, #0
    74ea:	d149      	bne.n	7580 <promisc_follow_cb+0xa4>
    74ec:	687b      	ldr	r3, [r7, #4]
    74ee:	3304      	adds	r3, #4
    74f0:	781b      	ldrb	r3, [r3, #0]
    74f2:	2b01      	cmp	r3, #1
    74f4:	d144      	bne.n	7580 <promisc_follow_cb+0xa4>
    74f6:	687b      	ldr	r3, [r7, #4]
    74f8:	3305      	adds	r3, #5
    74fa:	781b      	ldrb	r3, [r3, #0]
    74fc:	2b00      	cmp	r3, #0
    74fe:	d13f      	bne.n	7580 <promisc_follow_cb+0xa4>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    7500:	687b      	ldr	r3, [r7, #4]
    7502:	3308      	adds	r3, #8
    7504:	781b      	ldrb	r3, [r3, #0]
    7506:	041a      	lsls	r2, r3, #16
    7508:	687b      	ldr	r3, [r7, #4]
    750a:	3307      	adds	r3, #7
    750c:	781b      	ldrb	r3, [r3, #0]
    750e:	021b      	lsls	r3, r3, #8
    7510:	4313      	orrs	r3, r2
    7512:	687a      	ldr	r2, [r7, #4]
    7514:	3206      	adds	r2, #6
    7516:	7812      	ldrb	r2, [r2, #0]
    7518:	4313      	orrs	r3, r2
    751a:	60bb      	str	r3, [r7, #8]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    751c:	687b      	ldr	r3, [r7, #4]
    751e:	3304      	adds	r3, #4
    7520:	68b8      	ldr	r0, [r7, #8]
    7522:	4619      	mov	r1, r3
    7524:	2202      	movs	r2, #2
    7526:	f000 ff69 	bl	83fc <btle_reverse_crc>
    752a:	4602      	mov	r2, r0
    752c:	4b16      	ldr	r3, [pc, #88]	; (7588 <promisc_follow_cb+0xac>)
    752e:	609a      	str	r2, [r3, #8]
		le.crc_init_reversed = 0;
    7530:	4b15      	ldr	r3, [pc, #84]	; (7588 <promisc_follow_cb+0xac>)
    7532:	2200      	movs	r2, #0
    7534:	60da      	str	r2, [r3, #12]
		for (i = 0; i < 24; ++i)
    7536:	2300      	movs	r3, #0
    7538:	60fb      	str	r3, [r7, #12]
    753a:	e013      	b.n	7564 <promisc_follow_cb+0x88>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    753c:	4b12      	ldr	r3, [pc, #72]	; (7588 <promisc_follow_cb+0xac>)
    753e:	68da      	ldr	r2, [r3, #12]
    7540:	4b11      	ldr	r3, [pc, #68]	; (7588 <promisc_follow_cb+0xac>)
    7542:	6899      	ldr	r1, [r3, #8]
    7544:	68fb      	ldr	r3, [r7, #12]
    7546:	fa21 f303 	lsr.w	r3, r1, r3
    754a:	f003 0101 	and.w	r1, r3, #1
    754e:	68fb      	ldr	r3, [r7, #12]
    7550:	f1c3 0317 	rsb	r3, r3, #23
    7554:	fa01 f303 	lsl.w	r3, r1, r3
    7558:	4313      	orrs	r3, r2
    755a:	4a0b      	ldr	r2, [pc, #44]	; (7588 <promisc_follow_cb+0xac>)
    755c:	60d3      	str	r3, [r2, #12]
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    755e:	68fb      	ldr	r3, [r7, #12]
    7560:	3301      	adds	r3, #1
    7562:	60fb      	str	r3, [r7, #12]
    7564:	68fb      	ldr	r3, [r7, #12]
    7566:	2b17      	cmp	r3, #23
    7568:	dde8      	ble.n	753c <promisc_follow_cb+0x60>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    756a:	4b07      	ldr	r3, [pc, #28]	; (7588 <promisc_follow_cb+0xac>)
    756c:	2201      	movs	r2, #1
    756e:	611a      	str	r2, [r3, #16]
		packet_cb = promisc_recover_hop_interval;
    7570:	4b06      	ldr	r3, [pc, #24]	; (758c <promisc_follow_cb+0xb0>)
    7572:	4a07      	ldr	r2, [pc, #28]	; (7590 <promisc_follow_cb+0xb4>)
    7574:	601a      	str	r2, [r3, #0]
		le_promisc_state(1, &le.crc_init, 3);
    7576:	2001      	movs	r0, #1
    7578:	4906      	ldr	r1, [pc, #24]	; (7594 <promisc_follow_cb+0xb8>)
    757a:	2203      	movs	r2, #3
    757c:	f7ff fe12 	bl	71a4 <le_promisc_state>
	}
}
    7580:	3710      	adds	r7, #16
    7582:	46bd      	mov	sp, r7
    7584:	bd80      	pop	{r7, pc}
    7586:	bf00      	nop
    7588:	10000458 	.word	0x10000458
    758c:	1000099c 	.word	0x1000099c
    7590:	000073d1 	.word	0x000073d1
    7594:	10000460 	.word	0x10000460

00007598 <see_aa>:

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    7598:	b480      	push	{r7}
    759a:	b087      	sub	sp, #28
    759c:	af00      	add	r7, sp, #0
    759e:	6078      	str	r0, [r7, #4]
	int i, max = -1, killme = -1;
    75a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    75a4:	613b      	str	r3, [r7, #16]
    75a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    75aa:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < AA_LIST_SIZE; ++i)
    75ac:	2300      	movs	r3, #0
    75ae:	617b      	str	r3, [r7, #20]
    75b0:	e015      	b.n	75de <see_aa+0x46>
		if (le_promisc.active_aa[i].aa == aa) {
    75b2:	4a22      	ldr	r2, [pc, #136]	; (763c <see_aa+0xa4>)
    75b4:	697b      	ldr	r3, [r7, #20]
    75b6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    75ba:	687b      	ldr	r3, [r7, #4]
    75bc:	429a      	cmp	r2, r3
    75be:	d10b      	bne.n	75d8 <see_aa+0x40>
			++le_promisc.active_aa[i].count;
    75c0:	4a1e      	ldr	r2, [pc, #120]	; (763c <see_aa+0xa4>)
    75c2:	697b      	ldr	r3, [r7, #20]
    75c4:	00db      	lsls	r3, r3, #3
    75c6:	4413      	add	r3, r2
    75c8:	685b      	ldr	r3, [r3, #4]
    75ca:	1c5a      	adds	r2, r3, #1
    75cc:	491b      	ldr	r1, [pc, #108]	; (763c <see_aa+0xa4>)
    75ce:	697b      	ldr	r3, [r7, #20]
    75d0:	00db      	lsls	r3, r3, #3
    75d2:	440b      	add	r3, r1
    75d4:	605a      	str	r2, [r3, #4]
			return;
    75d6:	e02c      	b.n	7632 <see_aa+0x9a>
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    75d8:	697b      	ldr	r3, [r7, #20]
    75da:	3301      	adds	r3, #1
    75dc:	617b      	str	r3, [r7, #20]
    75de:	697b      	ldr	r3, [r7, #20]
    75e0:	2b1f      	cmp	r3, #31
    75e2:	dde6      	ble.n	75b2 <see_aa+0x1a>
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    75e4:	2300      	movs	r3, #0
    75e6:	617b      	str	r3, [r7, #20]
    75e8:	e015      	b.n	7616 <see_aa+0x7e>
		if (le_promisc.active_aa[i].count < max || max < 0) {
    75ea:	4a14      	ldr	r2, [pc, #80]	; (763c <see_aa+0xa4>)
    75ec:	697b      	ldr	r3, [r7, #20]
    75ee:	00db      	lsls	r3, r3, #3
    75f0:	4413      	add	r3, r2
    75f2:	685a      	ldr	r2, [r3, #4]
    75f4:	693b      	ldr	r3, [r7, #16]
    75f6:	429a      	cmp	r2, r3
    75f8:	db02      	blt.n	7600 <see_aa+0x68>
    75fa:	693b      	ldr	r3, [r7, #16]
    75fc:	2b00      	cmp	r3, #0
    75fe:	da07      	bge.n	7610 <see_aa+0x78>
			killme = i;
    7600:	697b      	ldr	r3, [r7, #20]
    7602:	60fb      	str	r3, [r7, #12]
			max = le_promisc.active_aa[i].count;
    7604:	4a0d      	ldr	r2, [pc, #52]	; (763c <see_aa+0xa4>)
    7606:	697b      	ldr	r3, [r7, #20]
    7608:	00db      	lsls	r3, r3, #3
    760a:	4413      	add	r3, r2
    760c:	685b      	ldr	r3, [r3, #4]
    760e:	613b      	str	r3, [r7, #16]
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7610:	697b      	ldr	r3, [r7, #20]
    7612:	3301      	adds	r3, #1
    7614:	617b      	str	r3, [r7, #20]
    7616:	697b      	ldr	r3, [r7, #20]
    7618:	2b1f      	cmp	r3, #31
    761a:	dde6      	ble.n	75ea <see_aa+0x52>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    761c:	4907      	ldr	r1, [pc, #28]	; (763c <see_aa+0xa4>)
    761e:	68fb      	ldr	r3, [r7, #12]
    7620:	687a      	ldr	r2, [r7, #4]
    7622:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    7626:	4a05      	ldr	r2, [pc, #20]	; (763c <see_aa+0xa4>)
    7628:	68fb      	ldr	r3, [r7, #12]
    762a:	00db      	lsls	r3, r3, #3
    762c:	4413      	add	r3, r2
    762e:	2201      	movs	r2, #1
    7630:	605a      	str	r2, [r3, #4]
}
    7632:	371c      	adds	r7, #28
    7634:	46bd      	mov	sp, r7
    7636:	f85d 7b04 	ldr.w	r7, [sp], #4
    763a:	4770      	bx	lr
    763c:	10000bf0 	.word	0x10000bf0

00007640 <cb_le_promisc>:

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    7640:	b590      	push	{r4, r7, lr}
    7642:	b0a1      	sub	sp, #132	; 0x84
    7644:	af00      	add	r7, sp, #0
    7646:	6078      	str	r0, [r7, #4]
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    7648:	f107 031c 	add.w	r3, r7, #28
    764c:	2240      	movs	r2, #64	; 0x40
    764e:	4618      	mov	r0, r3
    7650:	2100      	movs	r1, #0
    7652:	f7fc fd91 	bl	4178 <memset>
    7656:	2301      	movs	r3, #1
    7658:	773b      	strb	r3, [r7, #28]
    765a:	2301      	movs	r3, #1
    765c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    7660:	2301      	movs	r3, #1
    7662:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    7666:	2301      	movs	r3, #1
    7668:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    766c:	2301      	movs	r3, #1
    766e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    7672:	2301      	movs	r3, #1
    7674:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    7678:	2301      	movs	r3, #1
    767a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    767e:	2301      	movs	r3, #1
    7680:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    7684:	2300      	movs	r3, #0
    7686:	67fb      	str	r3, [r7, #124]	; 0x7c
    7688:	e041      	b.n	770e <cb_le_promisc+0xce>
		idx = whitening_index[btle_channel_index(channel-2402)];
    768a:	4ba5      	ldr	r3, [pc, #660]	; (7920 <cb_le_promisc+0x2e0>)
    768c:	881b      	ldrh	r3, [r3, #0]
    768e:	b29b      	uxth	r3, r3
    7690:	b2db      	uxtb	r3, r3
    7692:	3b62      	subs	r3, #98	; 0x62
    7694:	b2db      	uxtb	r3, r3
    7696:	4618      	mov	r0, r3
    7698:	f000 fe0e 	bl	82b8 <btle_channel_index>
    769c:	4603      	mov	r3, r0
    769e:	461a      	mov	r2, r3
    76a0:	4ba0      	ldr	r3, [pc, #640]	; (7924 <cb_le_promisc+0x2e4>)
    76a2:	5c9b      	ldrb	r3, [r3, r2]
    76a4:	673b      	str	r3, [r7, #112]	; 0x70

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    76a6:	2300      	movs	r3, #0
    76a8:	67bb      	str	r3, [r7, #120]	; 0x78
    76aa:	e02a      	b.n	7702 <cb_le_promisc+0xc2>
			desired[i][j] ^= whitening[idx];
    76ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    76ae:	011b      	lsls	r3, r3, #4
    76b0:	f107 0280 	add.w	r2, r7, #128	; 0x80
    76b4:	441a      	add	r2, r3
    76b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    76b8:	4413      	add	r3, r2
    76ba:	3b64      	subs	r3, #100	; 0x64
    76bc:	781a      	ldrb	r2, [r3, #0]
    76be:	499a      	ldr	r1, [pc, #616]	; (7928 <cb_le_promisc+0x2e8>)
    76c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    76c2:	440b      	add	r3, r1
    76c4:	781b      	ldrb	r3, [r3, #0]
    76c6:	4053      	eors	r3, r2
    76c8:	b2d9      	uxtb	r1, r3
    76ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    76cc:	011b      	lsls	r3, r3, #4
    76ce:	f107 0280 	add.w	r2, r7, #128	; 0x80
    76d2:	441a      	add	r2, r3
    76d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    76d6:	4413      	add	r3, r2
    76d8:	3b64      	subs	r3, #100	; 0x64
    76da:	460a      	mov	r2, r1
    76dc:	701a      	strb	r2, [r3, #0]
			idx = (idx + 1) % sizeof(whitening);
    76de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    76e0:	3301      	adds	r3, #1
    76e2:	4619      	mov	r1, r3
    76e4:	4b91      	ldr	r3, [pc, #580]	; (792c <cb_le_promisc+0x2ec>)
    76e6:	fba1 2303 	umull	r2, r3, r1, r3
    76ea:	1ac8      	subs	r0, r1, r3
    76ec:	0840      	lsrs	r0, r0, #1
    76ee:	4403      	add	r3, r0
    76f0:	099a      	lsrs	r2, r3, #6
    76f2:	4613      	mov	r3, r2
    76f4:	01db      	lsls	r3, r3, #7
    76f6:	1a9b      	subs	r3, r3, r2
    76f8:	1aca      	subs	r2, r1, r3
    76fa:	673a      	str	r2, [r7, #112]	; 0x70

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    76fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    76fe:	3301      	adds	r3, #1
    7700:	67bb      	str	r3, [r7, #120]	; 0x78
    7702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7704:	2b0f      	cmp	r3, #15
    7706:	ddd1      	ble.n	76ac <cb_le_promisc+0x6c>
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    7708:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    770a:	3301      	adds	r3, #1
    770c:	67fb      	str	r3, [r7, #124]	; 0x7c
    770e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7710:	2b03      	cmp	r3, #3
    7712:	ddba      	ble.n	768a <cb_le_promisc+0x4a>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    7714:	2320      	movs	r3, #32
    7716:	67fb      	str	r3, [r7, #124]	; 0x7c
    7718:	e0d0      	b.n	78bc <cb_le_promisc+0x27c>
		int ok[4] = { 1, 1, 1, 1 };
    771a:	4b85      	ldr	r3, [pc, #532]	; (7930 <cb_le_promisc+0x2f0>)
    771c:	f107 040c 	add.w	r4, r7, #12
    7720:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    7722:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		int matching = -1;
    7726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    772a:	66fb      	str	r3, [r7, #108]	; 0x6c

		for (j = 0; j < 4; ++j) {
    772c:	2300      	movs	r3, #0
    772e:	67bb      	str	r3, [r7, #120]	; 0x78
    7730:	e026      	b.n	7780 <cb_le_promisc+0x140>
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    7732:	2300      	movs	r3, #0
    7734:	677b      	str	r3, [r7, #116]	; 0x74
    7736:	e01d      	b.n	7774 <cb_le_promisc+0x134>
				if (unpacked[i+k] != desired[j][k]) {
    7738:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    773a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    773c:	4413      	add	r3, r2
    773e:	461a      	mov	r2, r3
    7740:	687b      	ldr	r3, [r7, #4]
    7742:	4413      	add	r3, r2
    7744:	781a      	ldrb	r2, [r3, #0]
    7746:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7748:	011b      	lsls	r3, r3, #4
    774a:	f107 0180 	add.w	r1, r7, #128	; 0x80
    774e:	4419      	add	r1, r3
    7750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7752:	440b      	add	r3, r1
    7754:	3b64      	subs	r3, #100	; 0x64
    7756:	781b      	ldrb	r3, [r3, #0]
    7758:	429a      	cmp	r2, r3
    775a:	d008      	beq.n	776e <cb_le_promisc+0x12e>
					ok[j] = 0;
    775c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    775e:	009b      	lsls	r3, r3, #2
    7760:	f107 0280 	add.w	r2, r7, #128	; 0x80
    7764:	4413      	add	r3, r2
    7766:	2200      	movs	r2, #0
    7768:	f843 2c74 	str.w	r2, [r3, #-116]
					break;
    776c:	e005      	b.n	777a <cb_le_promisc+0x13a>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    776e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7770:	3301      	adds	r3, #1
    7772:	677b      	str	r3, [r7, #116]	; 0x74
    7774:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7776:	2b0f      	cmp	r3, #15
    7778:	ddde      	ble.n	7738 <cb_le_promisc+0xf8>
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    777a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    777c:	3301      	adds	r3, #1
    777e:	67bb      	str	r3, [r7, #120]	; 0x78
    7780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7782:	2b03      	cmp	r3, #3
    7784:	ddd5      	ble.n	7732 <cb_le_promisc+0xf2>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    7786:	2300      	movs	r3, #0
    7788:	67bb      	str	r3, [r7, #120]	; 0x78
    778a:	e00e      	b.n	77aa <cb_le_promisc+0x16a>
			if (ok[j]) {
    778c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    778e:	009b      	lsls	r3, r3, #2
    7790:	f107 0280 	add.w	r2, r7, #128	; 0x80
    7794:	4413      	add	r3, r2
    7796:	f853 3c74 	ldr.w	r3, [r3, #-116]
    779a:	2b00      	cmp	r3, #0
    779c:	d002      	beq.n	77a4 <cb_le_promisc+0x164>
				matching = j;
    779e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77a0:	66fb      	str	r3, [r7, #108]	; 0x6c
				break;
    77a2:	e005      	b.n	77b0 <cb_le_promisc+0x170>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    77a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77a6:	3301      	adds	r3, #1
    77a8:	67bb      	str	r3, [r7, #120]	; 0x78
    77aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77ac:	2b03      	cmp	r3, #3
    77ae:	dded      	ble.n	778c <cb_le_promisc+0x14c>
				break;
			}
		}

		// skip if no match
		if (matching < 0)
    77b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    77b2:	2b00      	cmp	r3, #0
    77b4:	db7f      	blt.n	78b6 <cb_le_promisc+0x276>
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
    77b6:	4b5a      	ldr	r3, [pc, #360]	; (7920 <cb_le_promisc+0x2e0>)
    77b8:	881b      	ldrh	r3, [r3, #0]
    77ba:	b29b      	uxth	r3, r3
    77bc:	b2db      	uxtb	r3, r3
    77be:	3b62      	subs	r3, #98	; 0x62
    77c0:	b2db      	uxtb	r3, r3
    77c2:	4618      	mov	r0, r3
    77c4:	f000 fd78 	bl	82b8 <btle_channel_index>
    77c8:	4603      	mov	r3, r0
    77ca:	461a      	mov	r2, r3
    77cc:	4b55      	ldr	r3, [pc, #340]	; (7924 <cb_le_promisc+0x2e4>)
    77ce:	5c9b      	ldrb	r3, [r3, r2]
    77d0:	673b      	str	r3, [r7, #112]	; 0x70
		for (j = 0; j < 4+3+3; ++j) {
    77d2:	2300      	movs	r3, #0
    77d4:	67bb      	str	r3, [r7, #120]	; 0x78
    77d6:	e04c      	b.n	7872 <cb_le_promisc+0x232>
			u8 byte = 0;
    77d8:	2300      	movs	r3, #0
    77da:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			for (k = 0; k < 8; k++) {
    77de:	2300      	movs	r3, #0
    77e0:	677b      	str	r3, [r7, #116]	; 0x74
    77e2:	e039      	b.n	7858 <cb_le_promisc+0x218>
				int offset = k + (j * 8) + i - 32;
    77e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77e6:	00da      	lsls	r2, r3, #3
    77e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    77ea:	441a      	add	r2, r3
    77ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    77ee:	4413      	add	r3, r2
    77f0:	3b20      	subs	r3, #32
    77f2:	663b      	str	r3, [r7, #96]	; 0x60
				if (offset >= DMA_SIZE*8*2) break;
    77f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    77f6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    77fa:	db00      	blt.n	77fe <cb_le_promisc+0x1be>
    77fc:	e02f      	b.n	785e <cb_le_promisc+0x21e>
				int bit = unpacked[offset];
    77fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7800:	687a      	ldr	r2, [r7, #4]
    7802:	4413      	add	r3, r2
    7804:	781b      	ldrb	r3, [r3, #0]
    7806:	667b      	str	r3, [r7, #100]	; 0x64
				if (j >= 4) { // unwhiten data bytes
    7808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    780a:	2b03      	cmp	r3, #3
    780c:	dd16      	ble.n	783c <cb_le_promisc+0x1fc>
					bit ^= whitening[idx];
    780e:	4a46      	ldr	r2, [pc, #280]	; (7928 <cb_le_promisc+0x2e8>)
    7810:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7812:	4413      	add	r3, r2
    7814:	781b      	ldrb	r3, [r3, #0]
    7816:	461a      	mov	r2, r3
    7818:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    781a:	4053      	eors	r3, r2
    781c:	667b      	str	r3, [r7, #100]	; 0x64
					idx = (idx + 1) % sizeof(whitening);
    781e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7820:	3301      	adds	r3, #1
    7822:	4619      	mov	r1, r3
    7824:	4b41      	ldr	r3, [pc, #260]	; (792c <cb_le_promisc+0x2ec>)
    7826:	fba1 2303 	umull	r2, r3, r1, r3
    782a:	1ac8      	subs	r0, r1, r3
    782c:	0840      	lsrs	r0, r0, #1
    782e:	4403      	add	r3, r0
    7830:	099a      	lsrs	r2, r3, #6
    7832:	4613      	mov	r3, r2
    7834:	01db      	lsls	r3, r3, #7
    7836:	1a9b      	subs	r3, r3, r2
    7838:	1aca      	subs	r2, r1, r3
    783a:	673a      	str	r2, [r7, #112]	; 0x70
				}
				byte |= bit << k;
    783c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    783e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7840:	fa02 f303 	lsl.w	r3, r2, r3
    7844:	b2da      	uxtb	r2, r3
    7846:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
    784a:	4313      	orrs	r3, r2
    784c:	b2db      	uxtb	r3, r3
    784e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    7852:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7854:	3301      	adds	r3, #1
    7856:	677b      	str	r3, [r7, #116]	; 0x74
    7858:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    785a:	2b07      	cmp	r3, #7
    785c:	ddc2      	ble.n	77e4 <cb_le_promisc+0x1a4>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    785e:	4b35      	ldr	r3, [pc, #212]	; (7934 <cb_le_promisc+0x2f4>)
    7860:	681a      	ldr	r2, [r3, #0]
    7862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7864:	4413      	add	r3, r2
    7866:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
    786a:	701a      	strb	r2, [r3, #0]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
    786c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    786e:	3301      	adds	r3, #1
    7870:	67bb      	str	r3, [r7, #120]	; 0x78
    7872:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7874:	2b09      	cmp	r3, #9
    7876:	ddaf      	ble.n	77d8 <cb_le_promisc+0x198>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    7878:	4b2e      	ldr	r3, [pc, #184]	; (7934 <cb_le_promisc+0x2f4>)
    787a:	681b      	ldr	r3, [r3, #0]
    787c:	3303      	adds	r3, #3
    787e:	781b      	ldrb	r3, [r3, #0]
    7880:	061a      	lsls	r2, r3, #24
				 (idle_rxbuf[2] << 16) |
    7882:	4b2c      	ldr	r3, [pc, #176]	; (7934 <cb_le_promisc+0x2f4>)
    7884:	681b      	ldr	r3, [r3, #0]
    7886:	3302      	adds	r3, #2
    7888:	781b      	ldrb	r3, [r3, #0]
    788a:	041b      	lsls	r3, r3, #16
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    788c:	431a      	orrs	r2, r3
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    788e:	4b29      	ldr	r3, [pc, #164]	; (7934 <cb_le_promisc+0x2f4>)
    7890:	681b      	ldr	r3, [r3, #0]
    7892:	3301      	adds	r3, #1
    7894:	781b      	ldrb	r3, [r3, #0]
    7896:	021b      	lsls	r3, r3, #8
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    7898:	4313      	orrs	r3, r2
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    789a:	4a26      	ldr	r2, [pc, #152]	; (7934 <cb_le_promisc+0x2f4>)
    789c:	6812      	ldr	r2, [r2, #0]
    789e:	7812      	ldrb	r2, [r2, #0]
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    78a0:	4313      	orrs	r3, r2
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    78a2:	65fb      	str	r3, [r7, #92]	; 0x5c
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
		see_aa(aa);
    78a4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    78a6:	f7ff fe77 	bl	7598 <see_aa>

		enqueue(LE_PACKET, idle_rxbuf);
    78aa:	4b22      	ldr	r3, [pc, #136]	; (7934 <cb_le_promisc+0x2f4>)
    78ac:	681b      	ldr	r3, [r3, #0]
    78ae:	2001      	movs	r0, #1
    78b0:	4619      	mov	r1, r3
    78b2:	f7fc fe09 	bl	44c8 <enqueue>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    78b6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    78b8:	3301      	adds	r3, #1
    78ba:	67fb      	str	r3, [r7, #124]	; 0x7c
    78bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    78be:	f5b3 7f3c 	cmp.w	r3, #752	; 0x2f0
    78c2:	f6ff af2a 	blt.w	771a <cb_le_promisc+0xda>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    78c6:	2300      	movs	r3, #0
    78c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    78ca:	e020      	b.n	790e <cb_le_promisc+0x2ce>
		if (le_promisc.active_aa[i].count > 3) {
    78cc:	4a1a      	ldr	r2, [pc, #104]	; (7938 <cb_le_promisc+0x2f8>)
    78ce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    78d0:	00db      	lsls	r3, r3, #3
    78d2:	4413      	add	r3, r2
    78d4:	685b      	ldr	r3, [r3, #4]
    78d6:	2b03      	cmp	r3, #3
    78d8:	dd16      	ble.n	7908 <cb_le_promisc+0x2c8>
			le_set_access_address(le_promisc.active_aa[i].aa);
    78da:	4a17      	ldr	r2, [pc, #92]	; (7938 <cb_le_promisc+0x2f8>)
    78dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    78de:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    78e2:	4618      	mov	r0, r3
    78e4:	f7fe fd80 	bl	63e8 <le_set_access_address>
			data_cb = cb_follow_le;
    78e8:	4b14      	ldr	r3, [pc, #80]	; (793c <cb_le_promisc+0x2fc>)
    78ea:	4a15      	ldr	r2, [pc, #84]	; (7940 <cb_le_promisc+0x300>)
    78ec:	601a      	str	r2, [r3, #0]
			packet_cb = promisc_follow_cb;
    78ee:	4b15      	ldr	r3, [pc, #84]	; (7944 <cb_le_promisc+0x304>)
    78f0:	4a15      	ldr	r2, [pc, #84]	; (7948 <cb_le_promisc+0x308>)
    78f2:	601a      	str	r2, [r3, #0]
			le.crc_verify = 0;
    78f4:	4b15      	ldr	r3, [pc, #84]	; (794c <cb_le_promisc+0x30c>)
    78f6:	2200      	movs	r2, #0
    78f8:	611a      	str	r2, [r3, #16]
			le_promisc_state(0, &le.access_address, 4);
    78fa:	2000      	movs	r0, #0
    78fc:	4913      	ldr	r1, [pc, #76]	; (794c <cb_le_promisc+0x30c>)
    78fe:	2204      	movs	r2, #4
    7900:	f7ff fc50 	bl	71a4 <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    7904:	2300      	movs	r3, #0
    7906:	e006      	b.n	7916 <cb_le_promisc+0x2d6>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    7908:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    790a:	3301      	adds	r3, #1
    790c:	67fb      	str	r3, [r7, #124]	; 0x7c
    790e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7910:	2b1f      	cmp	r3, #31
    7912:	dddb      	ble.n	78cc <cb_le_promisc+0x28c>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    7914:	2301      	movs	r3, #1
}
    7916:	4618      	mov	r0, r3
    7918:	3784      	adds	r7, #132	; 0x84
    791a:	46bd      	mov	sp, r7
    791c:	bd90      	pop	{r4, r7, pc}
    791e:	bf00      	nop
    7920:	1000049c 	.word	0x1000049c
    7924:	0000b84c 	.word	0x0000b84c
    7928:	0000b7cc 	.word	0x0000b7cc
    792c:	02040811 	.word	0x02040811
    7930:	0000c06c 	.word	0x0000c06c
    7934:	10000454 	.word	0x10000454
    7938:	10000bf0 	.word	0x10000bf0
    793c:	10000998 	.word	0x10000998
    7940:	00006d29 	.word	0x00006d29
    7944:	1000099c 	.word	0x1000099c
    7948:	000074dd 	.word	0x000074dd
    794c:	10000458 	.word	0x10000458

00007950 <bt_promisc_le>:

void bt_promisc_le() {
    7950:	b580      	push	{r7, lr}
    7952:	af00      	add	r7, sp, #0
	while (requested_mode == MODE_BT_PROMISC_LE) {
    7954:	e02c      	b.n	79b0 <bt_promisc_le+0x60>
		reset_le_promisc();
    7956:	f7fe fdad 	bl	64b4 <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    795a:	4b18      	ldr	r3, [pc, #96]	; (79bc <bt_promisc_le+0x6c>)
    795c:	881b      	ldrh	r3, [r3, #0]
    795e:	b29b      	uxth	r3, r3
    7960:	f003 0301 	and.w	r3, r3, #1
    7964:	2b00      	cmp	r3, #0
    7966:	d003      	beq.n	7970 <bt_promisc_le+0x20>
			channel = 2440;
    7968:	4b14      	ldr	r3, [pc, #80]	; (79bc <bt_promisc_le+0x6c>)
    796a:	f640 1288 	movw	r2, #2440	; 0x988
    796e:	801a      	strh	r2, [r3, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    7970:	4b13      	ldr	r3, [pc, #76]	; (79c0 <bt_promisc_le+0x70>)
    7972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7974:	2b00      	cmp	r3, #0
    7976:	d107      	bne.n	7988 <bt_promisc_le+0x38>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set();
    7978:	f7fc fe9a 	bl	46b0 <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    797c:	4b11      	ldr	r3, [pc, #68]	; (79c4 <bt_promisc_le+0x74>)
    797e:	4a12      	ldr	r2, [pc, #72]	; (79c8 <bt_promisc_le+0x78>)
    7980:	601a      	str	r2, [r3, #0]
			bt_generic_le(MODE_BT_PROMISC_LE);
    7982:	200a      	movs	r0, #10
    7984:	f7fe fda6 	bl	64d4 <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    7988:	4b10      	ldr	r3, [pc, #64]	; (79cc <bt_promisc_le+0x7c>)
    798a:	781b      	ldrb	r3, [r3, #0]
    798c:	b2db      	uxtb	r3, r3
    798e:	2b0a      	cmp	r3, #10
    7990:	d000      	beq.n	7994 <bt_promisc_le+0x44>
			break;
    7992:	e012      	b.n	79ba <bt_promisc_le+0x6a>

		le_promisc_state(0, &le.access_address, 4);
    7994:	2000      	movs	r0, #0
    7996:	490a      	ldr	r1, [pc, #40]	; (79c0 <bt_promisc_le+0x70>)
    7998:	2204      	movs	r2, #4
    799a:	f7ff fc03 	bl	71a4 <le_promisc_state>
		packet_cb = promisc_follow_cb;
    799e:	4b0c      	ldr	r3, [pc, #48]	; (79d0 <bt_promisc_le+0x80>)
    79a0:	4a0c      	ldr	r2, [pc, #48]	; (79d4 <bt_promisc_le+0x84>)
    79a2:	601a      	str	r2, [r3, #0]
		le.crc_verify = 0;
    79a4:	4b06      	ldr	r3, [pc, #24]	; (79c0 <bt_promisc_le+0x70>)
    79a6:	2200      	movs	r2, #0
    79a8:	611a      	str	r2, [r3, #16]
		bt_le_sync(MODE_BT_PROMISC_LE);
    79aa:	200a      	movs	r0, #10
    79ac:	f7fe ff0e 	bl	67cc <bt_le_sync>

	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
    79b0:	4b06      	ldr	r3, [pc, #24]	; (79cc <bt_promisc_le+0x7c>)
    79b2:	781b      	ldrb	r3, [r3, #0]
    79b4:	b2db      	uxtb	r3, r3
    79b6:	2b0a      	cmp	r3, #10
    79b8:	d0cd      	beq.n	7956 <bt_promisc_le+0x6>
		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
	}
}
    79ba:	bd80      	pop	{r7, pc}
    79bc:	1000049c 	.word	0x1000049c
    79c0:	10000458 	.word	0x10000458
    79c4:	10000998 	.word	0x10000998
    79c8:	00007641 	.word	0x00007641
    79cc:	10000a3f 	.word	0x10000a3f
    79d0:	1000099c 	.word	0x1000099c
    79d4:	000074dd 	.word	0x000074dd

000079d8 <bt_slave_le>:

void bt_slave_le() {
    79d8:	b590      	push	{r4, r7, lr}
    79da:	b089      	sub	sp, #36	; 0x24
    79dc:	af00      	add	r7, sp, #0
	u32 calc_crc;
	int i;

	u8 adv_ind[] = {
    79de:	4a35      	ldr	r2, [pc, #212]	; (7ab4 <bt_slave_le+0xdc>)
    79e0:	1d3b      	adds	r3, r7, #4
    79e2:	4614      	mov	r4, r2
    79e4:	6820      	ldr	r0, [r4, #0]
    79e6:	6861      	ldr	r1, [r4, #4]
    79e8:	68a2      	ldr	r2, [r4, #8]
    79ea:	c307      	stmia	r3!, {r0, r1, r2}
    79ec:	89a2      	ldrh	r2, [r4, #12]
    79ee:	801a      	strh	r2, [r3, #0]

		// CRC (calc)
		0xff, 0xff, 0xff,
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;
    79f0:	230b      	movs	r3, #11
    79f2:	76fb      	strb	r3, [r7, #27]

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    79f4:	2300      	movs	r3, #0
    79f6:	61fb      	str	r3, [r7, #28]
    79f8:	e00e      	b.n	7a18 <bt_slave_le+0x40>
		adv_ind[i+2] = slave_mac_address[5-i];
    79fa:	69fb      	ldr	r3, [r7, #28]
    79fc:	3302      	adds	r3, #2
    79fe:	69fa      	ldr	r2, [r7, #28]
    7a00:	f1c2 0205 	rsb	r2, r2, #5
    7a04:	492c      	ldr	r1, [pc, #176]	; (7ab8 <bt_slave_le+0xe0>)
    7a06:	5c8a      	ldrb	r2, [r1, r2]
    7a08:	f107 0120 	add.w	r1, r7, #32
    7a0c:	440b      	add	r3, r1
    7a0e:	f803 2c1c 	strb.w	r2, [r3, #-28]
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    7a12:	69fb      	ldr	r3, [r7, #28]
    7a14:	3301      	adds	r3, #1
    7a16:	61fb      	str	r3, [r7, #28]
    7a18:	69fb      	ldr	r3, [r7, #28]
    7a1a:	2b05      	cmp	r3, #5
    7a1c:	dded      	ble.n	79fa <bt_slave_le+0x22>
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
    7a1e:	4b27      	ldr	r3, [pc, #156]	; (7abc <bt_slave_le+0xe4>)
    7a20:	68d9      	ldr	r1, [r3, #12]
    7a22:	7efb      	ldrb	r3, [r7, #27]
    7a24:	1d3a      	adds	r2, r7, #4
    7a26:	4608      	mov	r0, r1
    7a28:	4611      	mov	r1, r2
    7a2a:	461a      	mov	r2, r3
    7a2c:	f000 fca2 	bl	8374 <btle_calc_crc>
    7a30:	6178      	str	r0, [r7, #20]
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
    7a32:	7efb      	ldrb	r3, [r7, #27]
    7a34:	697a      	ldr	r2, [r7, #20]
    7a36:	b2d2      	uxtb	r2, r2
    7a38:	f107 0120 	add.w	r1, r7, #32
    7a3c:	440b      	add	r3, r1
    7a3e:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    7a42:	7efb      	ldrb	r3, [r7, #27]
    7a44:	3301      	adds	r3, #1
    7a46:	697a      	ldr	r2, [r7, #20]
    7a48:	0a12      	lsrs	r2, r2, #8
    7a4a:	b2d2      	uxtb	r2, r2
    7a4c:	f107 0120 	add.w	r1, r7, #32
    7a50:	440b      	add	r3, r1
    7a52:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    7a56:	7efb      	ldrb	r3, [r7, #27]
    7a58:	3302      	adds	r3, #2
    7a5a:	697a      	ldr	r2, [r7, #20]
    7a5c:	0c12      	lsrs	r2, r2, #16
    7a5e:	b2d2      	uxtb	r2, r2
    7a60:	f107 0120 	add.w	r1, r7, #32
    7a64:	440b      	add	r3, r1
    7a66:	f803 2c1c 	strb.w	r2, [r3, #-28]

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    7a6a:	e01b      	b.n	7aa4 <bt_slave_le+0xcc>
		ICER0 = ICER0_ICE_USB;
    7a6c:	4b14      	ldr	r3, [pc, #80]	; (7ac0 <bt_slave_le+0xe8>)
    7a6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7a72:	601a      	str	r2, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
    7a74:	4b12      	ldr	r3, [pc, #72]	; (7ac0 <bt_slave_le+0xe8>)
    7a76:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7a7a:	601a      	str	r2, [r3, #0]
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    7a7c:	7efb      	ldrb	r3, [r7, #27]
    7a7e:	3303      	adds	r3, #3
    7a80:	b2da      	uxtb	r2, r3
    7a82:	1d3b      	adds	r3, r7, #4
    7a84:	480f      	ldr	r0, [pc, #60]	; (7ac4 <bt_slave_le+0xec>)
    7a86:	4611      	mov	r1, r2
    7a88:	461a      	mov	r2, r3
    7a8a:	f7fe f8cf 	bl	5c2c <le_transmit>
		ISER0 = ISER0_ISE_USB;
    7a8e:	4b0e      	ldr	r3, [pc, #56]	; (7ac8 <bt_slave_le+0xf0>)
    7a90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7a94:	601a      	str	r2, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    7a96:	4b0c      	ldr	r3, [pc, #48]	; (7ac8 <bt_slave_le+0xf0>)
    7a98:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7a9c:	601a      	str	r2, [r3, #0]
		msleep(100);
    7a9e:	2064      	movs	r0, #100	; 0x64
    7aa0:	f7fd fcce 	bl	5440 <msleep>
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    7aa4:	4b09      	ldr	r3, [pc, #36]	; (7acc <bt_slave_le+0xf4>)
    7aa6:	781b      	ldrb	r3, [r3, #0]
    7aa8:	b2db      	uxtb	r3, r3
    7aaa:	2b0c      	cmp	r3, #12
    7aac:	d0de      	beq.n	7a6c <bt_slave_le+0x94>
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
		msleep(100);
	}
}
    7aae:	3724      	adds	r7, #36	; 0x24
    7ab0:	46bd      	mov	sp, r7
    7ab2:	bd90      	pop	{r4, r7, pc}
    7ab4:	0000c07c 	.word	0x0000c07c
    7ab8:	1000098c 	.word	0x1000098c
    7abc:	10000458 	.word	0x10000458
    7ac0:	e000e180 	.word	0xe000e180
    7ac4:	8e89bed6 	.word	0x8e89bed6
    7ac8:	e000e100 	.word	0xe000e100
    7acc:	10000a3f 	.word	0x10000a3f

00007ad0 <specan>:

/* spectrum analysis */
void specan()
{
    7ad0:	b590      	push	{r4, r7, lr}
    7ad2:	b091      	sub	sp, #68	; 0x44
    7ad4:	af00      	add	r7, sp, #0
	u8 epstat;
	u16 f;
	u8 i = 0;
    7ad6:	2300      	movs	r3, #0
    7ad8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	u8 buf[DMA_SIZE];

	RXLED_SET;
    7adc:	4b5a      	ldr	r3, [pc, #360]	; (7c48 <specan+0x178>)
    7ade:	2210      	movs	r2, #16
    7ae0:	601a      	str	r2, [r3, #0]

	queue_init();
    7ae2:	f000 fd69 	bl	85b8 <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7ae6:	4b59      	ldr	r3, [pc, #356]	; (7c4c <specan+0x17c>)
    7ae8:	2280      	movs	r2, #128	; 0x80
    7aea:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    7aec:	2012      	movs	r0, #18
    7aee:	f642 3122 	movw	r1, #11042	; 0x2b22
    7af2:	f001 ffd9 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7af6:	2014      	movs	r0, #20
    7af8:	f241 314b 	movw	r1, #4939	; 0x134b
    7afc:	f001 ffd4 	bl	9aa8 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    7b00:	2020      	movs	r0, #32
    7b02:	f240 1101 	movw	r1, #257	; 0x101
    7b06:	f001 ffcf 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    7b0a:	2003      	movs	r0, #3
    7b0c:	2129      	movs	r1, #41	; 0x29
    7b0e:	f001 ffcb 	bl	9aa8 <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    7b12:	bf00      	nop
    7b14:	f002 f880 	bl	9c18 <cc2400_status>
    7b18:	4603      	mov	r3, r0
    7b1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7b1e:	2b00      	cmp	r3, #0
    7b20:	d0f8      	beq.n	7b14 <specan+0x44>
	while ((cc2400_status() & FS_LOCK));
    7b22:	bf00      	nop
    7b24:	f002 f878 	bl	9c18 <cc2400_status>
    7b28:	4603      	mov	r3, r0
    7b2a:	f003 0304 	and.w	r3, r3, #4
    7b2e:	2b00      	cmp	r3, #0
    7b30:	d1f8      	bne.n	7b24 <specan+0x54>

	while (requested_mode == MODE_SPECAN) {
    7b32:	e07a      	b.n	7c2a <specan+0x15a>
		for (f = low_freq; f < high_freq + 1; f++) {
    7b34:	4b46      	ldr	r3, [pc, #280]	; (7c50 <specan+0x180>)
    7b36:	881b      	ldrh	r3, [r3, #0]
    7b38:	87fb      	strh	r3, [r7, #62]	; 0x3e
    7b3a:	e06f      	b.n	7c1c <specan+0x14c>
			cc2400_set(FSDIV, f - 1);
    7b3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    7b3e:	3b01      	subs	r3, #1
    7b40:	b29b      	uxth	r3, r3
    7b42:	2002      	movs	r0, #2
    7b44:	4619      	mov	r1, r3
    7b46:	f001 ffaf 	bl	9aa8 <cc2400_set>
			cc2400_strobe(SFSON);
    7b4a:	2061      	movs	r0, #97	; 0x61
    7b4c:	f002 f86e 	bl	9c2c <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    7b50:	bf00      	nop
    7b52:	f002 f861 	bl	9c18 <cc2400_status>
    7b56:	4603      	mov	r3, r0
    7b58:	f003 0304 	and.w	r3, r3, #4
    7b5c:	2b00      	cmp	r3, #0
    7b5e:	d0f8      	beq.n	7b52 <specan+0x82>
			cc2400_strobe(SRX);
    7b60:	2062      	movs	r0, #98	; 0x62
    7b62:	f002 f863 	bl	9c2c <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    7b66:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    7b6a:	607b      	str	r3, [r7, #4]
    7b6c:	bf00      	nop
    7b6e:	687b      	ldr	r3, [r7, #4]
    7b70:	3b01      	subs	r3, #1
    7b72:	607b      	str	r3, [r7, #4]
    7b74:	2b00      	cmp	r3, #0
    7b76:	d1fa      	bne.n	7b6e <specan+0x9e>
			buf[3 * i] = (f >> 8) & 0xFF;
    7b78:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7b7c:	4613      	mov	r3, r2
    7b7e:	005b      	lsls	r3, r3, #1
    7b80:	4413      	add	r3, r2
    7b82:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7b84:	0a12      	lsrs	r2, r2, #8
    7b86:	b292      	uxth	r2, r2
    7b88:	b2d2      	uxtb	r2, r2
    7b8a:	f107 0140 	add.w	r1, r7, #64	; 0x40
    7b8e:	440b      	add	r3, r1
    7b90:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 1] = f  & 0xFF;
    7b94:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7b98:	4613      	mov	r3, r2
    7b9a:	005b      	lsls	r3, r3, #1
    7b9c:	4413      	add	r3, r2
    7b9e:	3301      	adds	r3, #1
    7ba0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7ba2:	b2d2      	uxtb	r2, r2
    7ba4:	f107 0140 	add.w	r1, r7, #64	; 0x40
    7ba8:	440b      	add	r3, r1
    7baa:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    7bae:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7bb2:	4613      	mov	r3, r2
    7bb4:	005b      	lsls	r3, r3, #1
    7bb6:	4413      	add	r3, r2
    7bb8:	1c9c      	adds	r4, r3, #2
    7bba:	2006      	movs	r0, #6
    7bbc:	f001 ff5e 	bl	9a7c <cc2400_get>
    7bc0:	4603      	mov	r3, r0
    7bc2:	0a1b      	lsrs	r3, r3, #8
    7bc4:	b29b      	uxth	r3, r3
    7bc6:	b2da      	uxtb	r2, r3
    7bc8:	f107 0340 	add.w	r3, r7, #64	; 0x40
    7bcc:	4423      	add	r3, r4
    7bce:	f803 2c38 	strb.w	r2, [r3, #-56]
			i++;
    7bd2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    7bd6:	3301      	adds	r3, #1
    7bd8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (i == 16) {
    7bdc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    7be0:	2b10      	cmp	r3, #16
    7be2:	d10d      	bne.n	7c00 <specan+0x130>
				enqueue(SPECAN, buf);
    7be4:	f107 0308 	add.w	r3, r7, #8
    7be8:	2004      	movs	r0, #4
    7bea:	4619      	mov	r1, r3
    7bec:	f7fc fc6c 	bl	44c8 <enqueue>
				i = 0;
    7bf0:	2300      	movs	r3, #0
    7bf2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				handle_usb(clkn);
    7bf6:	4b17      	ldr	r3, [pc, #92]	; (7c54 <specan+0x184>)
    7bf8:	681b      	ldr	r3, [r3, #0]
    7bfa:	4618      	mov	r0, r3
    7bfc:	f000 fd7c 	bl	86f8 <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    7c00:	2064      	movs	r0, #100	; 0x64
    7c02:	f002 f813 	bl	9c2c <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    7c06:	bf00      	nop
    7c08:	f002 f806 	bl	9c18 <cc2400_status>
    7c0c:	4603      	mov	r3, r0
    7c0e:	f003 0304 	and.w	r3, r3, #4
    7c12:	2b00      	cmp	r3, #0
    7c14:	d1f8      	bne.n	7c08 <specan+0x138>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    7c16:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    7c18:	3301      	adds	r3, #1
    7c1a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    7c1c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7c1e:	4b0e      	ldr	r3, [pc, #56]	; (7c58 <specan+0x188>)
    7c20:	881b      	ldrh	r3, [r3, #0]
    7c22:	b29b      	uxth	r3, r3
    7c24:	3301      	adds	r3, #1
    7c26:	429a      	cmp	r2, r3
    7c28:	db88      	blt.n	7b3c <specan+0x6c>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
    7c2a:	4b0c      	ldr	r3, [pc, #48]	; (7c5c <specan+0x18c>)
    7c2c:	781b      	ldrb	r3, [r3, #0]
    7c2e:	b2db      	uxtb	r3, r3
    7c30:	2b04      	cmp	r3, #4
    7c32:	f43f af7f 	beq.w	7b34 <specan+0x64>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	mode = MODE_IDLE;
    7c36:	4b0a      	ldr	r3, [pc, #40]	; (7c60 <specan+0x190>)
    7c38:	2200      	movs	r2, #0
    7c3a:	701a      	strb	r2, [r3, #0]
	RXLED_CLR;
    7c3c:	4b09      	ldr	r3, [pc, #36]	; (7c64 <specan+0x194>)
    7c3e:	2210      	movs	r2, #16
    7c40:	601a      	str	r2, [r3, #0]
}
    7c42:	3744      	adds	r7, #68	; 0x44
    7c44:	46bd      	mov	sp, r7
    7c46:	bd90      	pop	{r4, r7, pc}
    7c48:	2009c038 	.word	0x2009c038
    7c4c:	2009c058 	.word	0x2009c058
    7c50:	1000049e 	.word	0x1000049e
    7c54:	10000be4 	.word	0x10000be4
    7c58:	100004a0 	.word	0x100004a0
    7c5c:	10000a3f 	.word	0x10000a3f
    7c60:	10000a3e 	.word	0x10000a3e
    7c64:	2009c03c 	.word	0x2009c03c

00007c68 <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    7c68:	b580      	push	{r7, lr}
    7c6a:	b084      	sub	sp, #16
    7c6c:	af00      	add	r7, sp, #0
	int8_t lvl;
	u8 i = 0;
    7c6e:	2300      	movs	r3, #0
    7c70:	73fb      	strb	r3, [r7, #15]
	u16 channels[3] = {2412, 2437, 2462};
    7c72:	4a5b      	ldr	r2, [pc, #364]	; (7de0 <led_specan+0x178>)
    7c74:	f107 0308 	add.w	r3, r7, #8
    7c78:	6810      	ldr	r0, [r2, #0]
    7c7a:	6018      	str	r0, [r3, #0]
    7c7c:	8892      	ldrh	r2, [r2, #4]
    7c7e:	809a      	strh	r2, [r3, #4]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7c80:	4b58      	ldr	r3, [pc, #352]	; (7de4 <led_specan+0x17c>)
    7c82:	2280      	movs	r2, #128	; 0x80
    7c84:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    7c86:	2012      	movs	r0, #18
    7c88:	f642 3122 	movw	r1, #11042	; 0x2b22
    7c8c:	f001 ff0c 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7c90:	2014      	movs	r0, #20
    7c92:	f241 314b 	movw	r1, #4939	; 0x134b
    7c96:	f001 ff07 	bl	9aa8 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    7c9a:	2020      	movs	r0, #32
    7c9c:	f240 1101 	movw	r1, #257	; 0x101
    7ca0:	f001 ff02 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    7ca4:	2003      	movs	r0, #3
    7ca6:	2129      	movs	r1, #41	; 0x29
    7ca8:	f001 fefe 	bl	9aa8 <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    7cac:	2006      	movs	r0, #6
    7cae:	21f1      	movs	r1, #241	; 0xf1
    7cb0:	f001 fefa 	bl	9aa8 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7cb4:	bf00      	nop
    7cb6:	f001 ffaf 	bl	9c18 <cc2400_status>
    7cba:	4603      	mov	r3, r0
    7cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7cc0:	2b00      	cmp	r3, #0
    7cc2:	d0f8      	beq.n	7cb6 <led_specan+0x4e>
	while ((cc2400_status() & FS_LOCK));
    7cc4:	bf00      	nop
    7cc6:	f001 ffa7 	bl	9c18 <cc2400_status>
    7cca:	4603      	mov	r3, r0
    7ccc:	f003 0304 	and.w	r3, r3, #4
    7cd0:	2b00      	cmp	r3, #0
    7cd2:	d1f8      	bne.n	7cc6 <led_specan+0x5e>

	while (requested_mode == MODE_LED_SPECAN) {
    7cd4:	e079      	b.n	7dca <led_specan+0x162>
		cc2400_set(FSDIV, channels[i] - 1);
    7cd6:	7bfb      	ldrb	r3, [r7, #15]
    7cd8:	005b      	lsls	r3, r3, #1
    7cda:	f107 0210 	add.w	r2, r7, #16
    7cde:	4413      	add	r3, r2
    7ce0:	f833 3c08 	ldrh.w	r3, [r3, #-8]
    7ce4:	3b01      	subs	r3, #1
    7ce6:	b29b      	uxth	r3, r3
    7ce8:	2002      	movs	r0, #2
    7cea:	4619      	mov	r1, r3
    7cec:	f001 fedc 	bl	9aa8 <cc2400_set>
		cc2400_strobe(SFSON);
    7cf0:	2061      	movs	r0, #97	; 0x61
    7cf2:	f001 ff9b 	bl	9c2c <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    7cf6:	bf00      	nop
    7cf8:	f001 ff8e 	bl	9c18 <cc2400_status>
    7cfc:	4603      	mov	r3, r0
    7cfe:	f003 0304 	and.w	r3, r3, #4
    7d02:	2b00      	cmp	r3, #0
    7d04:	d0f8      	beq.n	7cf8 <led_specan+0x90>
		cc2400_strobe(SRX);
    7d06:	2062      	movs	r0, #98	; 0x62
    7d08:	f001 ff90 	bl	9c2c <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    7d0c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    7d10:	607b      	str	r3, [r7, #4]
    7d12:	bf00      	nop
    7d14:	687b      	ldr	r3, [r7, #4]
    7d16:	3b01      	subs	r3, #1
    7d18:	607b      	str	r3, [r7, #4]
    7d1a:	2b00      	cmp	r3, #0
    7d1c:	d1fa      	bne.n	7d14 <led_specan+0xac>
		lvl = cc2400_get(RSSI) >> 8;
    7d1e:	2006      	movs	r0, #6
    7d20:	f001 feac 	bl	9a7c <cc2400_get>
    7d24:	4603      	mov	r3, r0
    7d26:	0a1b      	lsrs	r3, r3, #8
    7d28:	b29b      	uxth	r3, r3
    7d2a:	73bb      	strb	r3, [r7, #14]
        if (lvl > rssi_threshold) {
    7d2c:	4b2e      	ldr	r3, [pc, #184]	; (7de8 <led_specan+0x180>)
    7d2e:	781b      	ldrb	r3, [r3, #0]
    7d30:	b2db      	uxtb	r3, r3
    7d32:	f997 200e 	ldrsb.w	r2, [r7, #14]
    7d36:	b25b      	sxtb	r3, r3
    7d38:	429a      	cmp	r2, r3
    7d3a:	dd15      	ble.n	7d68 <led_specan+0x100>
            switch (i) {
    7d3c:	7bfb      	ldrb	r3, [r7, #15]
    7d3e:	2b01      	cmp	r3, #1
    7d40:	d009      	beq.n	7d56 <led_specan+0xee>
    7d42:	2b02      	cmp	r3, #2
    7d44:	d00b      	beq.n	7d5e <led_specan+0xf6>
    7d46:	2b00      	cmp	r3, #0
    7d48:	d000      	beq.n	7d4c <led_specan+0xe4>
    7d4a:	e021      	b.n	7d90 <led_specan+0x128>
                case 0:
                    TXLED_SET;
    7d4c:	4b27      	ldr	r3, [pc, #156]	; (7dec <led_specan+0x184>)
    7d4e:	f44f 7280 	mov.w	r2, #256	; 0x100
    7d52:	601a      	str	r2, [r3, #0]
                    break;
    7d54:	e007      	b.n	7d66 <led_specan+0xfe>
                case 1:
                    RXLED_SET;
    7d56:	4b25      	ldr	r3, [pc, #148]	; (7dec <led_specan+0x184>)
    7d58:	2210      	movs	r2, #16
    7d5a:	601a      	str	r2, [r3, #0]
                    break;
    7d5c:	e003      	b.n	7d66 <led_specan+0xfe>
                case 2:
                    USRLED_SET;
    7d5e:	4b23      	ldr	r3, [pc, #140]	; (7dec <led_specan+0x184>)
    7d60:	2202      	movs	r2, #2
    7d62:	601a      	str	r2, [r3, #0]
                    break;
    7d64:	bf00      	nop
    7d66:	e013      	b.n	7d90 <led_specan+0x128>
            }
        }
        else {
            switch (i) {
    7d68:	7bfb      	ldrb	r3, [r7, #15]
    7d6a:	2b01      	cmp	r3, #1
    7d6c:	d008      	beq.n	7d80 <led_specan+0x118>
    7d6e:	2b02      	cmp	r3, #2
    7d70:	d00a      	beq.n	7d88 <led_specan+0x120>
    7d72:	2b00      	cmp	r3, #0
    7d74:	d10c      	bne.n	7d90 <led_specan+0x128>
                case 0:
                    TXLED_CLR;
    7d76:	4b1e      	ldr	r3, [pc, #120]	; (7df0 <led_specan+0x188>)
    7d78:	f44f 7280 	mov.w	r2, #256	; 0x100
    7d7c:	601a      	str	r2, [r3, #0]
                    break;
    7d7e:	e007      	b.n	7d90 <led_specan+0x128>
                case 1:
                    RXLED_CLR;
    7d80:	4b1b      	ldr	r3, [pc, #108]	; (7df0 <led_specan+0x188>)
    7d82:	2210      	movs	r2, #16
    7d84:	601a      	str	r2, [r3, #0]
                    break;
    7d86:	e003      	b.n	7d90 <led_specan+0x128>
                case 2:
                    USRLED_CLR;
    7d88:	4b19      	ldr	r3, [pc, #100]	; (7df0 <led_specan+0x188>)
    7d8a:	2202      	movs	r2, #2
    7d8c:	601a      	str	r2, [r3, #0]
                    break;
    7d8e:	bf00      	nop
            }
        }

		i = (i+1) % 3;
    7d90:	7bfb      	ldrb	r3, [r7, #15]
    7d92:	1c5a      	adds	r2, r3, #1
    7d94:	4b17      	ldr	r3, [pc, #92]	; (7df4 <led_specan+0x18c>)
    7d96:	fb83 3102 	smull	r3, r1, r3, r2
    7d9a:	17d3      	asrs	r3, r2, #31
    7d9c:	1ac9      	subs	r1, r1, r3
    7d9e:	460b      	mov	r3, r1
    7da0:	005b      	lsls	r3, r3, #1
    7da2:	440b      	add	r3, r1
    7da4:	1ad1      	subs	r1, r2, r3
    7da6:	460b      	mov	r3, r1
    7da8:	73fb      	strb	r3, [r7, #15]

		handle_usb(clkn);
    7daa:	4b13      	ldr	r3, [pc, #76]	; (7df8 <led_specan+0x190>)
    7dac:	681b      	ldr	r3, [r3, #0]
    7dae:	4618      	mov	r0, r3
    7db0:	f000 fca2 	bl	86f8 <handle_usb>
        //wait(1);
		cc2400_strobe(SRFOFF);
    7db4:	2064      	movs	r0, #100	; 0x64
    7db6:	f001 ff39 	bl	9c2c <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    7dba:	bf00      	nop
    7dbc:	f001 ff2c 	bl	9c18 <cc2400_status>
    7dc0:	4603      	mov	r3, r0
    7dc2:	f003 0304 	and.w	r3, r3, #4
    7dc6:	2b00      	cmp	r3, #0
    7dc8:	d1f8      	bne.n	7dbc <led_specan+0x154>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols

	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_LED_SPECAN) {
    7dca:	4b0c      	ldr	r3, [pc, #48]	; (7dfc <led_specan+0x194>)
    7dcc:	781b      	ldrb	r3, [r3, #0]
    7dce:	b2db      	uxtb	r3, r3
    7dd0:	2b07      	cmp	r3, #7
    7dd2:	d080      	beq.n	7cd6 <led_specan+0x6e>
		handle_usb(clkn);
        //wait(1);
		cc2400_strobe(SRFOFF);
		while ((cc2400_status() & FS_LOCK));
	}
	mode = MODE_IDLE;
    7dd4:	4b0a      	ldr	r3, [pc, #40]	; (7e00 <led_specan+0x198>)
    7dd6:	2200      	movs	r2, #0
    7dd8:	701a      	strb	r2, [r3, #0]
}
    7dda:	3710      	adds	r7, #16
    7ddc:	46bd      	mov	sp, r7
    7dde:	bd80      	pop	{r7, pc}
    7de0:	0000c08c 	.word	0x0000c08c
    7de4:	2009c058 	.word	0x2009c058
    7de8:	100004a2 	.word	0x100004a2
    7dec:	2009c038 	.word	0x2009c038
    7df0:	2009c03c 	.word	0x2009c03c
    7df4:	55555556 	.word	0x55555556
    7df8:	10000be4 	.word	0x10000be4
    7dfc:	10000a3f 	.word	0x10000a3f
    7e00:	10000a3e 	.word	0x10000a3e

00007e04 <main>:

int main()
{
    7e04:	b580      	push	{r7, lr}
    7e06:	af00      	add	r7, sp, #0
	ubertooth_init();
    7e08:	f001 fd72 	bl	98f0 <ubertooth_init>
	clkn_init();
    7e0c:	f7fd fa3c 	bl	5288 <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    7e10:	4842      	ldr	r0, [pc, #264]	; (7f1c <main+0x118>)
    7e12:	f000 fba9 	bl	8568 <ubertooth_usb_init>

	while (1) {
		handle_usb(clkn);
    7e16:	4b42      	ldr	r3, [pc, #264]	; (7f20 <main+0x11c>)
    7e18:	681b      	ldr	r3, [r3, #0]
    7e1a:	4618      	mov	r0, r3
    7e1c:	f000 fc6c 	bl	86f8 <handle_usb>
		if(requested_mode != mode)
    7e20:	4b40      	ldr	r3, [pc, #256]	; (7f24 <main+0x120>)
    7e22:	781b      	ldrb	r3, [r3, #0]
    7e24:	b2da      	uxtb	r2, r3
    7e26:	4b40      	ldr	r3, [pc, #256]	; (7f28 <main+0x124>)
    7e28:	781b      	ldrb	r3, [r3, #0]
    7e2a:	b2db      	uxtb	r3, r3
    7e2c:	429a      	cmp	r2, r3
    7e2e:	d074      	beq.n	7f1a <main+0x116>
			switch (requested_mode) {
    7e30:	4b3c      	ldr	r3, [pc, #240]	; (7f24 <main+0x120>)
    7e32:	781b      	ldrb	r3, [r3, #0]
    7e34:	b2db      	uxtb	r3, r3
    7e36:	2b0d      	cmp	r3, #13
    7e38:	d86e      	bhi.n	7f18 <main+0x114>
    7e3a:	a201      	add	r2, pc, #4	; (adr r2, 7e40 <main+0x3c>)
    7e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7e40:	00007f13 	.word	0x00007f13
    7e44:	00007e85 	.word	0x00007e85
    7e48:	00007f19 	.word	0x00007f19
    7e4c:	00007eaf 	.word	0x00007eaf
    7e50:	00007ef3 	.word	0x00007ef3
    7e54:	00007ebf 	.word	0x00007ebf
    7e58:	00007ee5 	.word	0x00007ee5
    7e5c:	00007ef9 	.word	0x00007ef9
    7e60:	00007e91 	.word	0x00007e91
    7e64:	00007e9d 	.word	0x00007e9d
    7e68:	00007ea3 	.word	0x00007ea3
    7e6c:	00007e79 	.word	0x00007e79
    7e70:	00007ea9 	.word	0x00007ea9
    7e74:	00007eff 	.word	0x00007eff
				 case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    7e78:	2001      	movs	r0, #1
    7e7a:	f001 fc31 	bl	96e0 <wait>
					reset();
    7e7e:	f001 ffdf 	bl	9e40 <reset>
					break;
    7e82:	e04a      	b.n	7f1a <main+0x116>
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    7e84:	4b28      	ldr	r3, [pc, #160]	; (7f28 <main+0x124>)
    7e86:	2201      	movs	r2, #1
    7e88:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    7e8a:	f7fe f9a1 	bl	61d0 <bt_stream_rx>
					break;
    7e8e:	e044      	b.n	7f1a <main+0x116>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    7e90:	4b25      	ldr	r3, [pc, #148]	; (7f28 <main+0x124>)
    7e92:	2208      	movs	r2, #8
    7e94:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    7e96:	f7fe f99b 	bl	61d0 <bt_stream_rx>
					break;
    7e9a:	e03e      	b.n	7f1a <main+0x116>
				case MODE_BT_FOLLOW_LE:
					bt_follow_le();
    7e9c:	f7ff f96e 	bl	717c <bt_follow_le>
					break;
    7ea0:	e03b      	b.n	7f1a <main+0x116>
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    7ea2:	f7ff fd55 	bl	7950 <bt_promisc_le>
					break;
    7ea6:	e038      	b.n	7f1a <main+0x116>
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
    7ea8:	f7ff fd96 	bl	79d8 <bt_slave_le>
					break;
    7eac:	e035      	b.n	7f1a <main+0x116>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    7eae:	4b1e      	ldr	r3, [pc, #120]	; (7f28 <main+0x124>)
    7eb0:	2203      	movs	r2, #3
    7eb2:	701a      	strb	r2, [r3, #0]
					cc2400_txtest(&modulation, &channel);
    7eb4:	481d      	ldr	r0, [pc, #116]	; (7f2c <main+0x128>)
    7eb6:	491e      	ldr	r1, [pc, #120]	; (7f30 <main+0x12c>)
    7eb8:	f000 ff92 	bl	8de0 <cc2400_txtest>
					break;
    7ebc:	e02d      	b.n	7f1a <main+0x116>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    7ebe:	4b1a      	ldr	r3, [pc, #104]	; (7f28 <main+0x124>)
    7ec0:	2205      	movs	r2, #5
    7ec2:	701a      	strb	r2, [r3, #0]
					cc2400_rangetest(&channel);
    7ec4:	481a      	ldr	r0, [pc, #104]	; (7f30 <main+0x12c>)
    7ec6:	f000 fc35 	bl	8734 <cc2400_rangetest>
					mode = MODE_IDLE;
    7eca:	4b17      	ldr	r3, [pc, #92]	; (7f28 <main+0x124>)
    7ecc:	2200      	movs	r2, #0
    7ece:	701a      	strb	r2, [r3, #0]
					if (requested_mode == MODE_RANGE_TEST)
    7ed0:	4b14      	ldr	r3, [pc, #80]	; (7f24 <main+0x120>)
    7ed2:	781b      	ldrb	r3, [r3, #0]
    7ed4:	b2db      	uxtb	r3, r3
    7ed6:	2b05      	cmp	r3, #5
    7ed8:	d103      	bne.n	7ee2 <main+0xde>
						requested_mode = MODE_IDLE;
    7eda:	4b12      	ldr	r3, [pc, #72]	; (7f24 <main+0x120>)
    7edc:	2200      	movs	r2, #0
    7ede:	701a      	strb	r2, [r3, #0]
					break;
    7ee0:	e01b      	b.n	7f1a <main+0x116>
    7ee2:	e01a      	b.n	7f1a <main+0x116>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    7ee4:	4b10      	ldr	r3, [pc, #64]	; (7f28 <main+0x124>)
    7ee6:	2206      	movs	r2, #6
    7ee8:	701a      	strb	r2, [r3, #0]
					cc2400_repeater(&channel);
    7eea:	4811      	ldr	r0, [pc, #68]	; (7f30 <main+0x12c>)
    7eec:	f000 fe40 	bl	8b70 <cc2400_repeater>
					break;
    7ef0:	e013      	b.n	7f1a <main+0x116>
				case MODE_SPECAN:
					specan();
    7ef2:	f7ff fded 	bl	7ad0 <specan>
					break;
    7ef6:	e010      	b.n	7f1a <main+0x116>
				case MODE_LED_SPECAN:
					led_specan();
    7ef8:	f7ff feb6 	bl	7c68 <led_specan>
					break;
    7efc:	e00d      	b.n	7f1a <main+0x116>
				case MODE_EGO:
					mode = MODE_EGO;
    7efe:	4b0a      	ldr	r3, [pc, #40]	; (7f28 <main+0x124>)
    7f00:	220d      	movs	r2, #13
    7f02:	701a      	strb	r2, [r3, #0]
					ego_main(ego_mode);
    7f04:	4b0b      	ldr	r3, [pc, #44]	; (7f34 <main+0x130>)
    7f06:	781b      	ldrb	r3, [r3, #0]
    7f08:	b2db      	uxtb	r3, r3
    7f0a:	4618      	mov	r0, r3
    7f0c:	f001 fb36 	bl	957c <ego_main>
					break;
    7f10:	e003      	b.n	7f1a <main+0x116>
				case MODE_IDLE:
					cc2400_idle();
    7f12:	f7fd fd93 	bl	5a3c <cc2400_idle>
					break;
    7f16:	e000      	b.n	7f1a <main+0x116>
				default:
					/* This is really an error state, but what can you do? */
					break;
    7f18:	bf00      	nop
			}
	}
    7f1a:	e77c      	b.n	7e16 <main+0x12>
    7f1c:	0000479d 	.word	0x0000479d
    7f20:	10000be4 	.word	0x10000be4
    7f24:	10000a3f 	.word	0x10000a3f
    7f28:	10000a3e 	.word	0x10000a3e
    7f2c:	10000a42 	.word	0x10000a42
    7f30:	1000049c 	.word	0x1000049c
    7f34:	10000a41 	.word	0x10000a41

00007f38 <perm5>:
	}
}

/* 5 bit permutation */
u8 perm5(u8 z, u8 p_high, u16 p_low)
{
    7f38:	b490      	push	{r4, r7}
    7f3a:	b092      	sub	sp, #72	; 0x48
    7f3c:	af00      	add	r7, sp, #0
    7f3e:	4603      	mov	r3, r0
    7f40:	71fb      	strb	r3, [r7, #7]
    7f42:	460b      	mov	r3, r1
    7f44:	71bb      	strb	r3, [r7, #6]
    7f46:	4613      	mov	r3, r2
    7f48:	80bb      	strh	r3, [r7, #4]
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
    7f4a:	79fb      	ldrb	r3, [r7, #7]
    7f4c:	f003 031f 	and.w	r3, r3, #31
    7f50:	71fb      	strb	r3, [r7, #7]
	p_high &= 0x1f;
    7f52:	79bb      	ldrb	r3, [r7, #6]
    7f54:	f003 031f 	and.w	r3, r3, #31
    7f58:	71bb      	strb	r3, [r7, #6]
	p_low &= 0x1ff;
    7f5a:	88bb      	ldrh	r3, [r7, #4]
    7f5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    7f60:	80bb      	strh	r3, [r7, #4]

	int i;
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
    7f62:	4a5c      	ldr	r2, [pc, #368]	; (80d4 <perm5+0x19c>)
    7f64:	f107 031c 	add.w	r3, r7, #28
    7f68:	4614      	mov	r4, r2
    7f6a:	6820      	ldr	r0, [r4, #0]
    7f6c:	6861      	ldr	r1, [r4, #4]
    7f6e:	68a2      	ldr	r2, [r4, #8]
    7f70:	c307      	stmia	r3!, {r0, r1, r2}
    7f72:	89a2      	ldrh	r2, [r4, #12]
    7f74:	801a      	strh	r2, [r3, #0]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};
    7f76:	4a58      	ldr	r2, [pc, #352]	; (80d8 <perm5+0x1a0>)
    7f78:	f107 030c 	add.w	r3, r7, #12
    7f7c:	4614      	mov	r4, r2
    7f7e:	6820      	ldr	r0, [r4, #0]
    7f80:	6861      	ldr	r1, [r4, #4]
    7f82:	68a2      	ldr	r2, [r4, #8]
    7f84:	c307      	stmia	r3!, {r0, r1, r2}
    7f86:	89a2      	ldrh	r2, [r4, #12]
    7f88:	801a      	strh	r2, [r3, #0]

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    7f8a:	2300      	movs	r3, #0
    7f8c:	647b      	str	r3, [r7, #68]	; 0x44
    7f8e:	e010      	b.n	7fb2 <perm5+0x7a>
		p[i] = (p_low >> i) & 0x01;
    7f90:	88ba      	ldrh	r2, [r7, #4]
    7f92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7f94:	fa42 f303 	asr.w	r3, r2, r3
    7f98:	b2db      	uxtb	r3, r3
    7f9a:	f003 0301 	and.w	r3, r3, #1
    7f9e:	b2d9      	uxtb	r1, r3
    7fa0:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    7fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7fa6:	4413      	add	r3, r2
    7fa8:	460a      	mov	r2, r1
    7faa:	701a      	strb	r2, [r3, #0]
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    7fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7fae:	3301      	adds	r3, #1
    7fb0:	647b      	str	r3, [r7, #68]	; 0x44
    7fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7fb4:	2b08      	cmp	r3, #8
    7fb6:	ddeb      	ble.n	7f90 <perm5+0x58>
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    7fb8:	2300      	movs	r3, #0
    7fba:	647b      	str	r3, [r7, #68]	; 0x44
    7fbc:	e011      	b.n	7fe2 <perm5+0xaa>
		p[i+9] = (p_high >> i) & 0x01;
    7fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7fc0:	3309      	adds	r3, #9
    7fc2:	79b9      	ldrb	r1, [r7, #6]
    7fc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    7fc6:	fa41 f202 	asr.w	r2, r1, r2
    7fca:	b2d2      	uxtb	r2, r2
    7fcc:	f002 0201 	and.w	r2, r2, #1
    7fd0:	b2d2      	uxtb	r2, r2
    7fd2:	f107 0148 	add.w	r1, r7, #72	; 0x48
    7fd6:	440b      	add	r3, r1
    7fd8:	f803 2c1c 	strb.w	r2, [r3, #-28]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    7fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7fde:	3301      	adds	r3, #1
    7fe0:	647b      	str	r3, [r7, #68]	; 0x44
    7fe2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7fe4:	2b04      	cmp	r3, #4
    7fe6:	ddea      	ble.n	7fbe <perm5+0x86>
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    7fe8:	2300      	movs	r3, #0
    7fea:	647b      	str	r3, [r7, #68]	; 0x44
    7fec:	e010      	b.n	8010 <perm5+0xd8>
		z_bit[i] = (z >> i) & 0x01;
    7fee:	79fa      	ldrb	r2, [r7, #7]
    7ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7ff2:	fa42 f303 	asr.w	r3, r2, r3
    7ff6:	b2db      	uxtb	r3, r3
    7ff8:	f003 0301 	and.w	r3, r3, #1
    7ffc:	b2d9      	uxtb	r1, r3
    7ffe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    8002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8004:	4413      	add	r3, r2
    8006:	460a      	mov	r2, r1
    8008:	701a      	strb	r2, [r3, #0]
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    800a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    800c:	3301      	adds	r3, #1
    800e:	647b      	str	r3, [r7, #68]	; 0x44
    8010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8012:	2b04      	cmp	r3, #4
    8014:	ddeb      	ble.n	7fee <perm5+0xb6>
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    8016:	230d      	movs	r3, #13
    8018:	647b      	str	r3, [r7, #68]	; 0x44
    801a:	e036      	b.n	808a <perm5+0x152>
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
    801c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    8020:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8022:	4413      	add	r3, r2
    8024:	781b      	ldrb	r3, [r3, #0]
    8026:	2b00      	cmp	r3, #0
    8028:	d02c      	beq.n	8084 <perm5+0x14c>
			tmp = z_bit[index1[i]];
    802a:	f107 021c 	add.w	r2, r7, #28
    802e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8030:	4413      	add	r3, r2
    8032:	781b      	ldrb	r3, [r3, #0]
    8034:	f107 0248 	add.w	r2, r7, #72	; 0x48
    8038:	4413      	add	r3, r2
    803a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    803e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			z_bit[index1[i]] = z_bit[index2[i]];
    8042:	f107 021c 	add.w	r2, r7, #28
    8046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8048:	4413      	add	r3, r2
    804a:	781b      	ldrb	r3, [r3, #0]
    804c:	4619      	mov	r1, r3
    804e:	f107 020c 	add.w	r2, r7, #12
    8052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8054:	4413      	add	r3, r2
    8056:	781b      	ldrb	r3, [r3, #0]
    8058:	f107 0248 	add.w	r2, r7, #72	; 0x48
    805c:	4413      	add	r3, r2
    805e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
    8062:	f107 0348 	add.w	r3, r7, #72	; 0x48
    8066:	440b      	add	r3, r1
    8068:	f803 2c0c 	strb.w	r2, [r3, #-12]
			z_bit[index2[i]] = tmp;
    806c:	f107 020c 	add.w	r2, r7, #12
    8070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8072:	4413      	add	r3, r2
    8074:	781b      	ldrb	r3, [r3, #0]
    8076:	f107 0248 	add.w	r2, r7, #72	; 0x48
    807a:	4413      	add	r3, r2
    807c:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
    8080:	f803 2c0c 	strb.w	r2, [r3, #-12]
	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    8084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8086:	3b01      	subs	r3, #1
    8088:	647b      	str	r3, [r7, #68]	; 0x44
    808a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    808c:	2b00      	cmp	r3, #0
    808e:	dac5      	bge.n	801c <perm5+0xe4>
			z_bit[index2[i]] = tmp;
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
    8090:	2300      	movs	r3, #0
    8092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	for (i = 0; i < 5; i++)
    8096:	2300      	movs	r3, #0
    8098:	647b      	str	r3, [r7, #68]	; 0x44
    809a:	e011      	b.n	80c0 <perm5+0x188>
		output += z_bit[i] << i;
    809c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    80a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    80a2:	4413      	add	r3, r2
    80a4:	781b      	ldrb	r3, [r3, #0]
    80a6:	461a      	mov	r2, r3
    80a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    80aa:	fa02 f303 	lsl.w	r3, r2, r3
    80ae:	b2da      	uxtb	r2, r3
    80b0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    80b4:	4413      	add	r3, r2
    80b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    80ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    80bc:	3301      	adds	r3, #1
    80be:	647b      	str	r3, [r7, #68]	; 0x44
    80c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    80c2:	2b04      	cmp	r3, #4
    80c4:	ddea      	ble.n	809c <perm5+0x164>
		output += z_bit[i] << i;

	return output;
    80c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
}
    80ca:	4618      	mov	r0, r3
    80cc:	3748      	adds	r7, #72	; 0x48
    80ce:	46bd      	mov	sp, r7
    80d0:	bc90      	pop	{r4, r7}
    80d2:	4770      	bx	lr
    80d4:	0000c094 	.word	0x0000c094
    80d8:	0000c0a4 	.word	0x0000c0a4

000080dc <next_hop>:

u16 next_hop(u32 clock)
{
    80dc:	b580      	push	{r7, lr}
    80de:	b08a      	sub	sp, #40	; 0x28
    80e0:	af00      	add	r7, sp, #0
    80e2:	6078      	str	r0, [r7, #4]
	u16 d, y2;
	u32 base_f, f, f_dash;

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
    80e4:	687b      	ldr	r3, [r7, #4]
    80e6:	089b      	lsrs	r3, r3, #2
    80e8:	b2db      	uxtb	r3, r3
    80ea:	f003 031f 	and.w	r3, r3, #31
    80ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	y1 = (clock >> 1) & 0x01;
    80f2:	687b      	ldr	r3, [r7, #4]
    80f4:	085b      	lsrs	r3, r3, #1
    80f6:	b2db      	uxtb	r3, r3
    80f8:	f003 0301 	and.w	r3, r3, #1
    80fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	y2 = y1 << 5;
    8100:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    8104:	b29b      	uxth	r3, r3
    8106:	015b      	lsls	r3, r3, #5
    8108:	847b      	strh	r3, [r7, #34]	; 0x22
	a = (a1 ^ (clock >> 21)) & 0x1f;
    810a:	687b      	ldr	r3, [r7, #4]
    810c:	0d5b      	lsrs	r3, r3, #21
    810e:	b2da      	uxtb	r2, r3
    8110:	4b4b      	ldr	r3, [pc, #300]	; (8240 <next_hop+0x164>)
    8112:	781b      	ldrb	r3, [r3, #0]
    8114:	4053      	eors	r3, r2
    8116:	b2db      	uxtb	r3, r3
    8118:	f003 031f 	and.w	r3, r3, #31
    811c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    8120:	687b      	ldr	r3, [r7, #4]
    8122:	0c1b      	lsrs	r3, r3, #16
    8124:	b2da      	uxtb	r2, r3
    8126:	4b47      	ldr	r3, [pc, #284]	; (8244 <next_hop+0x168>)
    8128:	781b      	ldrb	r3, [r3, #0]
    812a:	4053      	eors	r3, r2
    812c:	b2db      	uxtb	r3, r3
    812e:	f003 031f 	and.w	r3, r3, #31
    8132:	f887 3020 	strb.w	r3, [r7, #32]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    8136:	687b      	ldr	r3, [r7, #4]
    8138:	09db      	lsrs	r3, r3, #7
    813a:	b29a      	uxth	r2, r3
    813c:	4b42      	ldr	r3, [pc, #264]	; (8248 <next_hop+0x16c>)
    813e:	881b      	ldrh	r3, [r3, #0]
    8140:	4053      	eors	r3, r2
    8142:	b29b      	uxth	r3, r3
    8144:	f3c3 0308 	ubfx	r3, r3, #0, #9
    8148:	83fb      	strh	r3, [r7, #30]
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    814a:	687b      	ldr	r3, [r7, #4]
    814c:	08db      	lsrs	r3, r3, #3
    814e:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    8152:	f023 030f 	bic.w	r3, r3, #15
    8156:	61bb      	str	r3, [r7, #24]
	f = base_f % 79;
    8158:	69b9      	ldr	r1, [r7, #24]
    815a:	4b3c      	ldr	r3, [pc, #240]	; (824c <next_hop+0x170>)
    815c:	fba3 2301 	umull	r2, r3, r3, r1
    8160:	099a      	lsrs	r2, r3, #6
    8162:	4613      	mov	r3, r2
    8164:	009b      	lsls	r3, r3, #2
    8166:	4413      	add	r3, r2
    8168:	011b      	lsls	r3, r3, #4
    816a:	1a9b      	subs	r3, r3, r2
    816c:	1acb      	subs	r3, r1, r3
    816e:	617b      	str	r3, [r7, #20]

	perm = perm5(
    8170:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    8174:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    8178:	4413      	add	r3, r2
    817a:	b2db      	uxtb	r3, r3
    817c:	b2db      	uxtb	r3, r3
    817e:	f003 031f 	and.w	r3, r3, #31
    8182:	b2da      	uxtb	r2, r3
    8184:	4b32      	ldr	r3, [pc, #200]	; (8250 <next_hop+0x174>)
    8186:	781b      	ldrb	r3, [r3, #0]
    8188:	b2db      	uxtb	r3, r3
    818a:	4053      	eors	r3, r2
    818c:	b2db      	uxtb	r3, r3
    818e:	b2d9      	uxtb	r1, r3
    8190:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    8194:	461a      	mov	r2, r3
    8196:	0152      	lsls	r2, r2, #5
    8198:	1ad3      	subs	r3, r2, r3
    819a:	b2db      	uxtb	r3, r3
    819c:	b2da      	uxtb	r2, r3
    819e:	f897 3020 	ldrb.w	r3, [r7, #32]
    81a2:	4053      	eors	r3, r2
    81a4:	b2db      	uxtb	r3, r3
    81a6:	b2da      	uxtb	r2, r3
    81a8:	8bfb      	ldrh	r3, [r7, #30]
    81aa:	4608      	mov	r0, r1
    81ac:	4611      	mov	r1, r2
    81ae:	461a      	mov	r2, r3
    81b0:	f7ff fec2 	bl	7f38 <perm5>
    81b4:	4603      	mov	r3, r0
    81b6:	74fb      	strb	r3, [r7, #19]
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % CHANNELS];
    81b8:	7cfb      	ldrb	r3, [r7, #19]
    81ba:	4a26      	ldr	r2, [pc, #152]	; (8254 <next_hop+0x178>)
    81bc:	7812      	ldrb	r2, [r2, #0]
    81be:	4413      	add	r3, r2
    81c0:	461a      	mov	r2, r3
    81c2:	697b      	ldr	r3, [r7, #20]
    81c4:	441a      	add	r2, r3
    81c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    81c8:	18d1      	adds	r1, r2, r3
    81ca:	4b20      	ldr	r3, [pc, #128]	; (824c <next_hop+0x170>)
    81cc:	fba3 2301 	umull	r2, r3, r3, r1
    81d0:	099a      	lsrs	r2, r3, #6
    81d2:	4613      	mov	r3, r2
    81d4:	009b      	lsls	r3, r3, #2
    81d6:	4413      	add	r3, r2
    81d8:	011b      	lsls	r3, r3, #4
    81da:	1a9b      	subs	r3, r3, r2
    81dc:	1aca      	subs	r2, r1, r3
    81de:	4b1e      	ldr	r3, [pc, #120]	; (8258 <next_hop+0x17c>)
    81e0:	5c9b      	ldrb	r3, [r3, r2]
    81e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(afh_enabled) {
    81e6:	4b1d      	ldr	r3, [pc, #116]	; (825c <next_hop+0x180>)
    81e8:	781b      	ldrb	r3, [r3, #0]
    81ea:	2b00      	cmp	r3, #0
    81ec:	d01d      	beq.n	822a <next_hop+0x14e>
		f_dash = base_f % used_channels;
    81ee:	4b1c      	ldr	r3, [pc, #112]	; (8260 <next_hop+0x184>)
    81f0:	781b      	ldrb	r3, [r3, #0]
    81f2:	461a      	mov	r2, r3
    81f4:	69bb      	ldr	r3, [r7, #24]
    81f6:	fbb3 f1f2 	udiv	r1, r3, r2
    81fa:	fb02 f201 	mul.w	r2, r2, r1
    81fe:	1a9b      	subs	r3, r3, r2
    8200:	60fb      	str	r3, [r7, #12]
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    8202:	7cfb      	ldrb	r3, [r7, #19]
    8204:	4a13      	ldr	r2, [pc, #76]	; (8254 <next_hop+0x178>)
    8206:	7812      	ldrb	r2, [r2, #0]
    8208:	4413      	add	r3, r2
    820a:	461a      	mov	r2, r3
    820c:	68fb      	ldr	r3, [r7, #12]
    820e:	441a      	add	r2, r3
    8210:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    8212:	4413      	add	r3, r2
    8214:	4a12      	ldr	r2, [pc, #72]	; (8260 <next_hop+0x184>)
    8216:	7812      	ldrb	r2, [r2, #0]
    8218:	fbb3 f1f2 	udiv	r1, r3, r2
    821c:	fb02 f201 	mul.w	r2, r2, r1
    8220:	1a9b      	subs	r3, r3, r2
    8222:	4a10      	ldr	r2, [pc, #64]	; (8264 <next_hop+0x188>)
    8224:	5cd3      	ldrb	r3, [r2, r3]
    8226:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return (2402 + next_channel);
    822a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    822e:	b29b      	uxth	r3, r3
    8230:	f603 1362 	addw	r3, r3, #2402	; 0x962
    8234:	b29b      	uxth	r3, r3

}
    8236:	4618      	mov	r0, r3
    8238:	3728      	adds	r7, #40	; 0x28
    823a:	46bd      	mov	sp, r7
    823c:	bd80      	pop	{r7, pc}
    823e:	bf00      	nop
    8240:	1000112b 	.word	0x1000112b
    8244:	1000112c 	.word	0x1000112c
    8248:	100010da 	.word	0x100010da
    824c:	cf6474a9 	.word	0xcf6474a9
    8250:	100010d8 	.word	0x100010d8
    8254:	1000117f 	.word	0x1000117f
    8258:	10001130 	.word	0x10001130
    825c:	1000102c 	.word	0x1000102c
    8260:	100010d9 	.word	0x100010d9
    8264:	100010dc 	.word	0x100010dc

00008268 <btle_next_hop>:

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    8268:	b580      	push	{r7, lr}
    826a:	b084      	sub	sp, #16
    826c:	af00      	add	r7, sp, #0
    826e:	6078      	str	r0, [r7, #4]
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    8270:	687b      	ldr	r3, [r7, #4]
    8272:	7d5b      	ldrb	r3, [r3, #21]
    8274:	4618      	mov	r0, r3
    8276:	f000 f84b 	bl	8310 <btle_channel_index_to_phys>
    827a:	4603      	mov	r3, r0
    827c:	81fb      	strh	r3, [r7, #14]
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    827e:	687b      	ldr	r3, [r7, #4]
    8280:	7d5b      	ldrb	r3, [r3, #21]
    8282:	461a      	mov	r2, r3
    8284:	687b      	ldr	r3, [r7, #4]
    8286:	7d9b      	ldrb	r3, [r3, #22]
    8288:	441a      	add	r2, r3
    828a:	4b0a      	ldr	r3, [pc, #40]	; (82b4 <btle_next_hop+0x4c>)
    828c:	fb82 0103 	smull	r0, r1, r2, r3
    8290:	1853      	adds	r3, r2, r1
    8292:	1159      	asrs	r1, r3, #5
    8294:	17d3      	asrs	r3, r2, #31
    8296:	1ac9      	subs	r1, r1, r3
    8298:	460b      	mov	r3, r1
    829a:	00db      	lsls	r3, r3, #3
    829c:	440b      	add	r3, r1
    829e:	009b      	lsls	r3, r3, #2
    82a0:	440b      	add	r3, r1
    82a2:	1ad1      	subs	r1, r2, r3
    82a4:	b2ca      	uxtb	r2, r1
    82a6:	687b      	ldr	r3, [r7, #4]
    82a8:	755a      	strb	r2, [r3, #21]
	return phys;
    82aa:	89fb      	ldrh	r3, [r7, #14]
}
    82ac:	4618      	mov	r0, r3
    82ae:	3710      	adds	r7, #16
    82b0:	46bd      	mov	sp, r7
    82b2:	bd80      	pop	{r7, pc}
    82b4:	dd67c8a7 	.word	0xdd67c8a7

000082b8 <btle_channel_index>:

u32 received_data = 0;

u8 btle_channel_index(u8 channel) {
    82b8:	b480      	push	{r7}
    82ba:	b085      	sub	sp, #20
    82bc:	af00      	add	r7, sp, #0
    82be:	4603      	mov	r3, r0
    82c0:	71fb      	strb	r3, [r7, #7]
	u8 idx;
	channel /= 2;
    82c2:	79fb      	ldrb	r3, [r7, #7]
    82c4:	085b      	lsrs	r3, r3, #1
    82c6:	71fb      	strb	r3, [r7, #7]
	if (channel == 0)
    82c8:	79fb      	ldrb	r3, [r7, #7]
    82ca:	2b00      	cmp	r3, #0
    82cc:	d102      	bne.n	82d4 <btle_channel_index+0x1c>
		idx = 37;
    82ce:	2325      	movs	r3, #37	; 0x25
    82d0:	73fb      	strb	r3, [r7, #15]
    82d2:	e015      	b.n	8300 <btle_channel_index+0x48>
	else if (channel < 12)
    82d4:	79fb      	ldrb	r3, [r7, #7]
    82d6:	2b0b      	cmp	r3, #11
    82d8:	d803      	bhi.n	82e2 <btle_channel_index+0x2a>
		idx = channel - 1;
    82da:	79fb      	ldrb	r3, [r7, #7]
    82dc:	3b01      	subs	r3, #1
    82de:	73fb      	strb	r3, [r7, #15]
    82e0:	e00e      	b.n	8300 <btle_channel_index+0x48>
	else if (channel == 12)
    82e2:	79fb      	ldrb	r3, [r7, #7]
    82e4:	2b0c      	cmp	r3, #12
    82e6:	d102      	bne.n	82ee <btle_channel_index+0x36>
		idx = 38;
    82e8:	2326      	movs	r3, #38	; 0x26
    82ea:	73fb      	strb	r3, [r7, #15]
    82ec:	e008      	b.n	8300 <btle_channel_index+0x48>
	else if (channel < 39)
    82ee:	79fb      	ldrb	r3, [r7, #7]
    82f0:	2b26      	cmp	r3, #38	; 0x26
    82f2:	d803      	bhi.n	82fc <btle_channel_index+0x44>
		idx = channel - 2;
    82f4:	79fb      	ldrb	r3, [r7, #7]
    82f6:	3b02      	subs	r3, #2
    82f8:	73fb      	strb	r3, [r7, #15]
    82fa:	e001      	b.n	8300 <btle_channel_index+0x48>
	else
		idx = 39;
    82fc:	2327      	movs	r3, #39	; 0x27
    82fe:	73fb      	strb	r3, [r7, #15]
	return idx;
    8300:	7bfb      	ldrb	r3, [r7, #15]
}
    8302:	4618      	mov	r0, r3
    8304:	3714      	adds	r7, #20
    8306:	46bd      	mov	sp, r7
    8308:	f85d 7b04 	ldr.w	r7, [sp], #4
    830c:	4770      	bx	lr
    830e:	bf00      	nop

00008310 <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
    8310:	b480      	push	{r7}
    8312:	b085      	sub	sp, #20
    8314:	af00      	add	r7, sp, #0
    8316:	4603      	mov	r3, r0
    8318:	71fb      	strb	r3, [r7, #7]
	u16 phys;
	if (idx < 11)
    831a:	79fb      	ldrb	r3, [r7, #7]
    831c:	2b0a      	cmp	r3, #10
    831e:	d806      	bhi.n	832e <btle_channel_index_to_phys+0x1e>
		phys = 2404 + 2 * idx;
    8320:	79fb      	ldrb	r3, [r7, #7]
    8322:	f203 43b2 	addw	r3, r3, #1202	; 0x4b2
    8326:	b29b      	uxth	r3, r3
    8328:	005b      	lsls	r3, r3, #1
    832a:	81fb      	strh	r3, [r7, #14]
    832c:	e01a      	b.n	8364 <btle_channel_index_to_phys+0x54>
	else if (idx < 37)
    832e:	79fb      	ldrb	r3, [r7, #7]
    8330:	2b24      	cmp	r3, #36	; 0x24
    8332:	d806      	bhi.n	8342 <btle_channel_index_to_phys+0x32>
		phys = 2428 + 2 * (idx - 11);
    8334:	79fb      	ldrb	r3, [r7, #7]
    8336:	f203 43b3 	addw	r3, r3, #1203	; 0x4b3
    833a:	b29b      	uxth	r3, r3
    833c:	005b      	lsls	r3, r3, #1
    833e:	81fb      	strh	r3, [r7, #14]
    8340:	e010      	b.n	8364 <btle_channel_index_to_phys+0x54>
	else if (idx == 37)
    8342:	79fb      	ldrb	r3, [r7, #7]
    8344:	2b25      	cmp	r3, #37	; 0x25
    8346:	d103      	bne.n	8350 <btle_channel_index_to_phys+0x40>
		phys = 2402;
    8348:	f640 1362 	movw	r3, #2402	; 0x962
    834c:	81fb      	strh	r3, [r7, #14]
    834e:	e009      	b.n	8364 <btle_channel_index_to_phys+0x54>
	else if (idx == 38)
    8350:	79fb      	ldrb	r3, [r7, #7]
    8352:	2b26      	cmp	r3, #38	; 0x26
    8354:	d103      	bne.n	835e <btle_channel_index_to_phys+0x4e>
		phys = 2426;
    8356:	f640 137a 	movw	r3, #2426	; 0x97a
    835a:	81fb      	strh	r3, [r7, #14]
    835c:	e002      	b.n	8364 <btle_channel_index_to_phys+0x54>
	else
		phys = 2480;
    835e:	f44f 631b 	mov.w	r3, #2480	; 0x9b0
    8362:	81fb      	strh	r3, [r7, #14]
	return phys;
    8364:	89fb      	ldrh	r3, [r7, #14]
}
    8366:	4618      	mov	r0, r3
    8368:	3714      	adds	r7, #20
    836a:	46bd      	mov	sp, r7
    836c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8370:	4770      	bx	lr
    8372:	bf00      	nop

00008374 <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    8374:	b480      	push	{r7}
    8376:	b08b      	sub	sp, #44	; 0x2c
    8378:	af00      	add	r7, sp, #0
    837a:	60f8      	str	r0, [r7, #12]
    837c:	60b9      	str	r1, [r7, #8]
    837e:	607a      	str	r2, [r7, #4]
	u32 state = crc_init & 0xffffff;
    8380:	68fb      	ldr	r3, [r7, #12]
    8382:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8386:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
    8388:	4b1b      	ldr	r3, [pc, #108]	; (83f8 <btle_calc_crc+0x84>)
    838a:	617b      	str	r3, [r7, #20]
	int i, j;

	for (i = 0; i < len; ++i) {
    838c:	2300      	movs	r3, #0
    838e:	623b      	str	r3, [r7, #32]
    8390:	e027      	b.n	83e2 <btle_calc_crc+0x6e>
		u8 cur = data[i];
    8392:	6a3b      	ldr	r3, [r7, #32]
    8394:	68ba      	ldr	r2, [r7, #8]
    8396:	4413      	add	r3, r2
    8398:	781b      	ldrb	r3, [r3, #0]
    839a:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    839c:	2300      	movs	r3, #0
    839e:	61fb      	str	r3, [r7, #28]
    83a0:	e019      	b.n	83d6 <btle_calc_crc+0x62>
			int next_bit = (state ^ cur) & 1;
    83a2:	7efa      	ldrb	r2, [r7, #27]
    83a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    83a6:	4053      	eors	r3, r2
    83a8:	f003 0301 	and.w	r3, r3, #1
    83ac:	613b      	str	r3, [r7, #16]
			cur >>= 1;
    83ae:	7efb      	ldrb	r3, [r7, #27]
    83b0:	085b      	lsrs	r3, r3, #1
    83b2:	76fb      	strb	r3, [r7, #27]
			state >>= 1;
    83b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    83b6:	085b      	lsrs	r3, r3, #1
    83b8:	627b      	str	r3, [r7, #36]	; 0x24
			if (next_bit) {
    83ba:	693b      	ldr	r3, [r7, #16]
    83bc:	2b00      	cmp	r3, #0
    83be:	d007      	beq.n	83d0 <btle_calc_crc+0x5c>
				state |= 1 << 23;
    83c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    83c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    83c6:	627b      	str	r3, [r7, #36]	; 0x24
				state ^= lfsr_mask;
    83c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    83ca:	697b      	ldr	r3, [r7, #20]
    83cc:	4053      	eors	r3, r2
    83ce:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    83d0:	69fb      	ldr	r3, [r7, #28]
    83d2:	3301      	adds	r3, #1
    83d4:	61fb      	str	r3, [r7, #28]
    83d6:	69fb      	ldr	r3, [r7, #28]
    83d8:	2b07      	cmp	r3, #7
    83da:	dde2      	ble.n	83a2 <btle_calc_crc+0x2e>
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    83dc:	6a3b      	ldr	r3, [r7, #32]
    83de:	3301      	adds	r3, #1
    83e0:	623b      	str	r3, [r7, #32]
    83e2:	6a3a      	ldr	r2, [r7, #32]
    83e4:	687b      	ldr	r3, [r7, #4]
    83e6:	429a      	cmp	r2, r3
    83e8:	dbd3      	blt.n	8392 <btle_calc_crc+0x1e>
				state ^= lfsr_mask;
			}
		}
	}

	return state;
    83ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    83ec:	4618      	mov	r0, r3
    83ee:	372c      	adds	r7, #44	; 0x2c
    83f0:	46bd      	mov	sp, r7
    83f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    83f6:	4770      	bx	lr
    83f8:	005a6000 	.word	0x005a6000

000083fc <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    83fc:	b480      	push	{r7}
    83fe:	b08d      	sub	sp, #52	; 0x34
    8400:	af00      	add	r7, sp, #0
    8402:	60f8      	str	r0, [r7, #12]
    8404:	60b9      	str	r1, [r7, #8]
    8406:	607a      	str	r2, [r7, #4]
	u32 state = crc;
    8408:	68fb      	ldr	r3, [r7, #12]
    840a:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
    840c:	4b2b      	ldr	r3, [pc, #172]	; (84bc <btle_reverse_crc+0xc0>)
    840e:	61fb      	str	r3, [r7, #28]
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    8410:	687b      	ldr	r3, [r7, #4]
    8412:	3b01      	subs	r3, #1
    8414:	627b      	str	r3, [r7, #36]	; 0x24
    8416:	e02d      	b.n	8474 <btle_reverse_crc+0x78>
		u8 cur = data[i];
    8418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    841a:	68ba      	ldr	r2, [r7, #8]
    841c:	4413      	add	r3, r2
    841e:	781b      	ldrb	r3, [r3, #0]
    8420:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    8422:	2300      	movs	r3, #0
    8424:	623b      	str	r3, [r7, #32]
    8426:	e01f      	b.n	8468 <btle_reverse_crc+0x6c>
			int top_bit = state >> 23;
    8428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    842a:	0ddb      	lsrs	r3, r3, #23
    842c:	617b      	str	r3, [r7, #20]
			state = (state << 1) & 0xffffff;
    842e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8430:	005b      	lsls	r3, r3, #1
    8432:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8436:	62fb      	str	r3, [r7, #44]	; 0x2c
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    8438:	7efa      	ldrb	r2, [r7, #27]
    843a:	6a3b      	ldr	r3, [r7, #32]
    843c:	f1c3 0307 	rsb	r3, r3, #7
    8440:	fa42 f303 	asr.w	r3, r2, r3
    8444:	f003 0201 	and.w	r2, r3, #1
    8448:	697b      	ldr	r3, [r7, #20]
    844a:	4053      	eors	r3, r2
    844c:	461a      	mov	r2, r3
    844e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8450:	4313      	orrs	r3, r2
    8452:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (top_bit)
    8454:	697b      	ldr	r3, [r7, #20]
    8456:	2b00      	cmp	r3, #0
    8458:	d003      	beq.n	8462 <btle_reverse_crc+0x66>
				state ^= lfsr_mask;
    845a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    845c:	69fb      	ldr	r3, [r7, #28]
    845e:	4053      	eors	r3, r2
    8460:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    8462:	6a3b      	ldr	r3, [r7, #32]
    8464:	3301      	adds	r3, #1
    8466:	623b      	str	r3, [r7, #32]
    8468:	6a3b      	ldr	r3, [r7, #32]
    846a:	2b07      	cmp	r3, #7
    846c:	dddc      	ble.n	8428 <btle_reverse_crc+0x2c>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    846e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8470:	3b01      	subs	r3, #1
    8472:	627b      	str	r3, [r7, #36]	; 0x24
    8474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8476:	2b00      	cmp	r3, #0
    8478:	dace      	bge.n	8418 <btle_reverse_crc+0x1c>
			if (top_bit)
				state ^= lfsr_mask;
		}
	}

	ret = 0;
    847a:	2300      	movs	r3, #0
    847c:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < 24; ++i)
    847e:	2300      	movs	r3, #0
    8480:	627b      	str	r3, [r7, #36]	; 0x24
    8482:	e010      	b.n	84a6 <btle_reverse_crc+0xaa>
		ret |= ((state >> i) & 1) << (23 - i);
    8484:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8488:	fa22 f303 	lsr.w	r3, r2, r3
    848c:	f003 0201 	and.w	r2, r3, #1
    8490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8492:	f1c3 0317 	rsb	r3, r3, #23
    8496:	fa02 f303 	lsl.w	r3, r2, r3
    849a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    849c:	4313      	orrs	r3, r2
    849e:	62bb      	str	r3, [r7, #40]	; 0x28
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    84a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84a2:	3301      	adds	r3, #1
    84a4:	627b      	str	r3, [r7, #36]	; 0x24
    84a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84a8:	2b17      	cmp	r3, #23
    84aa:	ddeb      	ble.n	8484 <btle_reverse_crc+0x88>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
    84ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    84ae:	4618      	mov	r0, r3
    84b0:	3734      	adds	r7, #52	; 0x34
    84b2:	46bd      	mov	sp, r7
    84b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    84b8:	4770      	bx	lr
    84ba:	bf00      	nop
    84bc:	00b4c000 	.word	0x00b4c000

000084c0 <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    84c0:	b480      	push	{r7}
    84c2:	b089      	sub	sp, #36	; 0x24
    84c4:	af00      	add	r7, sp, #0
    84c6:	60f8      	str	r0, [r7, #12]
    84c8:	60b9      	str	r1, [r7, #8]
    84ca:	607a      	str	r2, [r7, #4]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    84cc:	68fb      	ldr	r3, [r7, #12]
    84ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    84d2:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < len; ++i) {
    84d4:	2300      	movs	r3, #0
    84d6:	61bb      	str	r3, [r7, #24]
    84d8:	e012      	b.n	8500 <btle_crcgen_lut+0x40>
		key = data[i] ^ (state & 0xff);
    84da:	69bb      	ldr	r3, [r7, #24]
    84dc:	68ba      	ldr	r2, [r7, #8]
    84de:	4413      	add	r3, r2
    84e0:	781a      	ldrb	r2, [r3, #0]
    84e2:	69fb      	ldr	r3, [r7, #28]
    84e4:	b2db      	uxtb	r3, r3
    84e6:	4053      	eors	r3, r2
    84e8:	75fb      	strb	r3, [r7, #23]
		state = (state >> 8) ^ btle_crc_lut[key];
    84ea:	69fb      	ldr	r3, [r7, #28]
    84ec:	0a1a      	lsrs	r2, r3, #8
    84ee:	7dfb      	ldrb	r3, [r7, #23]
    84f0:	4909      	ldr	r1, [pc, #36]	; (8518 <btle_crcgen_lut+0x58>)
    84f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    84f6:	4053      	eors	r3, r2
    84f8:	61fb      	str	r3, [r7, #28]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    84fa:	69bb      	ldr	r3, [r7, #24]
    84fc:	3301      	adds	r3, #1
    84fe:	61bb      	str	r3, [r7, #24]
    8500:	69ba      	ldr	r2, [r7, #24]
    8502:	687b      	ldr	r3, [r7, #4]
    8504:	429a      	cmp	r2, r3
    8506:	dbe8      	blt.n	84da <btle_crcgen_lut+0x1a>
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
	}
	return state;
    8508:	69fb      	ldr	r3, [r7, #28]
}
    850a:	4618      	mov	r0, r3
    850c:	3724      	adds	r7, #36	; 0x24
    850e:	46bd      	mov	sp, r7
    8510:	f85d 7b04 	ldr.w	r7, [sp], #4
    8514:	4770      	bx	lr
    8516:	bf00      	nop
    8518:	100004a8 	.word	0x100004a8

0000851c <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    851c:	b590      	push	{r4, r7, lr}
    851e:	b087      	sub	sp, #28
    8520:	af00      	add	r7, sp, #0
    8522:	60f8      	str	r0, [r7, #12]
    8524:	60b9      	str	r1, [r7, #8]
    8526:	607a      	str	r2, [r7, #4]
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    8528:	68fb      	ldr	r3, [r7, #12]
    852a:	885b      	ldrh	r3, [r3, #2]
    852c:	823b      	strh	r3, [r7, #16]
    852e:	68fb      	ldr	r3, [r7, #12]
    8530:	889b      	ldrh	r3, [r3, #4]
    8532:	827b      	strh	r3, [r7, #18]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    8534:	4b0b      	ldr	r3, [pc, #44]	; (8564 <usb_vendor_request_handler+0x48>)
    8536:	681c      	ldr	r4, [r3, #0]
    8538:	68fb      	ldr	r3, [r7, #12]
    853a:	7859      	ldrb	r1, [r3, #1]
    853c:	687b      	ldr	r3, [r7, #4]
    853e:	681b      	ldr	r3, [r3, #0]
    8540:	f107 0210 	add.w	r2, r7, #16
    8544:	4608      	mov	r0, r1
    8546:	4611      	mov	r1, r2
    8548:	461a      	mov	r2, r3
    854a:	68bb      	ldr	r3, [r7, #8]
    854c:	47a0      	blx	r4
    854e:	6178      	str	r0, [r7, #20]
	return (BOOL) (rv==1);
    8550:	697b      	ldr	r3, [r7, #20]
    8552:	2b01      	cmp	r3, #1
    8554:	bf0c      	ite	eq
    8556:	2301      	moveq	r3, #1
    8558:	2300      	movne	r3, #0
    855a:	b2db      	uxtb	r3, r3
}
    855c:	4618      	mov	r0, r3
    855e:	371c      	adds	r7, #28
    8560:	46bd      	mov	sp, r7
    8562:	bd90      	pop	{r4, r7, pc}
    8564:	10003284 	.word	0x10003284

00008568 <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    8568:	b580      	push	{r7, lr}
    856a:	b082      	sub	sp, #8
    856c:	af00      	add	r7, sp, #0
    856e:	6078      	str	r0, [r7, #4]
	// initialise stack
	USBInit();
    8570:	f001 fdcc 	bl	a10c <USBInit>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    8574:	480b      	ldr	r0, [pc, #44]	; (85a4 <ubertooth_usb_init+0x3c>)
    8576:	f002 fa2b 	bl	a9d0 <USBRegisterDescriptors>

	// Request handler 
	v_req_handler = vendor_req_handler;
    857a:	4a0b      	ldr	r2, [pc, #44]	; (85a8 <ubertooth_usb_init+0x40>)
    857c:	687b      	ldr	r3, [r7, #4]
    857e:	6013      	str	r3, [r2, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    8580:	2002      	movs	r0, #2
    8582:	490a      	ldr	r1, [pc, #40]	; (85ac <ubertooth_usb_init+0x44>)
    8584:	4a0a      	ldr	r2, [pc, #40]	; (85b0 <ubertooth_usb_init+0x48>)
    8586:	f001 fd9d 	bl	a0c4 <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    858a:	20ff      	movs	r0, #255	; 0xff
    858c:	4909      	ldr	r1, [pc, #36]	; (85b4 <ubertooth_usb_init+0x4c>)
    858e:	f002 f9c9 	bl	a924 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    8592:	2001      	movs	r0, #1
    8594:	f001 fefc 	bl	a390 <USBHwConnect>

	return 0;
    8598:	2300      	movs	r3, #0
}
    859a:	4618      	mov	r0, r3
    859c:	3708      	adds	r7, #8
    859e:	46bd      	mov	sp, r7
    85a0:	bd80      	pop	{r7, pc}
    85a2:	bf00      	nop
    85a4:	0000c0b4 	.word	0x0000c0b4
    85a8:	10003284 	.word	0x10003284
    85ac:	0000851d 	.word	0x0000851d
    85b0:	10003180 	.word	0x10003180
    85b4:	0000c178 	.word	0x0000c178

000085b8 <queue_init>:

volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init()
{
    85b8:	b480      	push	{r7}
    85ba:	af00      	add	r7, sp, #0
	head = 0;
    85bc:	4b04      	ldr	r3, [pc, #16]	; (85d0 <queue_init+0x18>)
    85be:	2200      	movs	r2, #0
    85c0:	601a      	str	r2, [r3, #0]
	tail = 0;
    85c2:	4b04      	ldr	r3, [pc, #16]	; (85d4 <queue_init+0x1c>)
    85c4:	2200      	movs	r2, #0
    85c6:	601a      	str	r2, [r3, #0]
}
    85c8:	46bd      	mov	sp, r7
    85ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    85ce:	4770      	bx	lr
    85d0:	10000a5c 	.word	0x10000a5c
    85d4:	10000a60 	.word	0x10000a60

000085d8 <usb_enqueue>:

usb_pkt_rx *usb_enqueue()
{
    85d8:	b480      	push	{r7}
    85da:	b083      	sub	sp, #12
    85dc:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    85de:	4b13      	ldr	r3, [pc, #76]	; (862c <usb_enqueue+0x54>)
    85e0:	681b      	ldr	r3, [r3, #0]
    85e2:	b2db      	uxtb	r3, r3
    85e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    85e8:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    85ea:	4b11      	ldr	r3, [pc, #68]	; (8630 <usb_enqueue+0x58>)
    85ec:	681b      	ldr	r3, [r3, #0]
    85ee:	b2db      	uxtb	r3, r3
    85f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    85f4:	71bb      	strb	r3, [r7, #6]
	u8 n = (t + 1) & 0x7F;
    85f6:	79bb      	ldrb	r3, [r7, #6]
    85f8:	3301      	adds	r3, #1
    85fa:	b2db      	uxtb	r3, r3
    85fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8600:	717b      	strb	r3, [r7, #5]

	/* fail if queue is full */
	if (h == n) {
    8602:	79fa      	ldrb	r2, [r7, #7]
    8604:	797b      	ldrb	r3, [r7, #5]
    8606:	429a      	cmp	r2, r3
    8608:	d101      	bne.n	860e <usb_enqueue+0x36>
		return NULL;
    860a:	2300      	movs	r3, #0
    860c:	e008      	b.n	8620 <usb_enqueue+0x48>
	}

	++tail;
    860e:	4b08      	ldr	r3, [pc, #32]	; (8630 <usb_enqueue+0x58>)
    8610:	681b      	ldr	r3, [r3, #0]
    8612:	3301      	adds	r3, #1
    8614:	4a06      	ldr	r2, [pc, #24]	; (8630 <usb_enqueue+0x58>)
    8616:	6013      	str	r3, [r2, #0]
	return &fifo[t];
    8618:	79bb      	ldrb	r3, [r7, #6]
    861a:	019b      	lsls	r3, r3, #6
    861c:	4a05      	ldr	r2, [pc, #20]	; (8634 <usb_enqueue+0x5c>)
    861e:	4413      	add	r3, r2
	
}
    8620:	4618      	mov	r0, r3
    8622:	370c      	adds	r7, #12
    8624:	46bd      	mov	sp, r7
    8626:	f85d 7b04 	ldr.w	r7, [sp], #4
    862a:	4770      	bx	lr
    862c:	10000a5c 	.word	0x10000a5c
    8630:	10000a60 	.word	0x10000a60
    8634:	10001180 	.word	0x10001180

00008638 <dequeue>:

usb_pkt_rx *dequeue()
{
    8638:	b480      	push	{r7}
    863a:	b083      	sub	sp, #12
    863c:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    863e:	4b10      	ldr	r3, [pc, #64]	; (8680 <dequeue+0x48>)
    8640:	681b      	ldr	r3, [r3, #0]
    8642:	b2db      	uxtb	r3, r3
    8644:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8648:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    864a:	4b0e      	ldr	r3, [pc, #56]	; (8684 <dequeue+0x4c>)
    864c:	681b      	ldr	r3, [r3, #0]
    864e:	b2db      	uxtb	r3, r3
    8650:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8654:	71bb      	strb	r3, [r7, #6]

	/* fail if queue is empty */
	if (h == t) {
    8656:	79fa      	ldrb	r2, [r7, #7]
    8658:	79bb      	ldrb	r3, [r7, #6]
    865a:	429a      	cmp	r2, r3
    865c:	d101      	bne.n	8662 <dequeue+0x2a>
		return NULL;
    865e:	2300      	movs	r3, #0
    8660:	e008      	b.n	8674 <dequeue+0x3c>
	}

	++head;
    8662:	4b07      	ldr	r3, [pc, #28]	; (8680 <dequeue+0x48>)
    8664:	681b      	ldr	r3, [r3, #0]
    8666:	3301      	adds	r3, #1
    8668:	4a05      	ldr	r2, [pc, #20]	; (8680 <dequeue+0x48>)
    866a:	6013      	str	r3, [r2, #0]
	return &fifo[h];
    866c:	79fb      	ldrb	r3, [r7, #7]
    866e:	019b      	lsls	r3, r3, #6
    8670:	4a05      	ldr	r2, [pc, #20]	; (8688 <dequeue+0x50>)
    8672:	4413      	add	r3, r2
}
    8674:	4618      	mov	r0, r3
    8676:	370c      	adds	r7, #12
    8678:	46bd      	mov	sp, r7
    867a:	f85d 7b04 	ldr.w	r7, [sp], #4
    867e:	4770      	bx	lr
    8680:	10000a5c 	.word	0x10000a5c
    8684:	10000a60 	.word	0x10000a60
    8688:	10001180 	.word	0x10001180

0000868c <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    868c:	b580      	push	{r7, lr}
    868e:	b084      	sub	sp, #16
    8690:	af00      	add	r7, sp, #0
    8692:	6078      	str	r0, [r7, #4]
	usb_pkt_rx *pkt = dequeue(&pkt);
    8694:	f107 030c 	add.w	r3, r7, #12
    8698:	4618      	mov	r0, r3
    869a:	f7ff ffcd 	bl	8638 <dequeue>
    869e:	4603      	mov	r3, r0
    86a0:	60fb      	str	r3, [r7, #12]
	if (pkt != NULL) {
    86a2:	68fb      	ldr	r3, [r7, #12]
    86a4:	2b00      	cmp	r3, #0
    86a6:	d00a      	beq.n	86be <dequeue_send+0x32>
		last_usb_pkt = clkn;
    86a8:	4a11      	ldr	r2, [pc, #68]	; (86f0 <dequeue_send+0x64>)
    86aa:	687b      	ldr	r3, [r7, #4]
    86ac:	6013      	str	r3, [r2, #0]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    86ae:	68fb      	ldr	r3, [r7, #12]
    86b0:	2082      	movs	r0, #130	; 0x82
    86b2:	4619      	mov	r1, r3
    86b4:	2240      	movs	r2, #64	; 0x40
    86b6:	f001 fec7 	bl	a448 <USBHwEPWrite>
		return 1;
    86ba:	2301      	movs	r3, #1
    86bc:	e013      	b.n	86e6 <dequeue_send+0x5a>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    86be:	4b0c      	ldr	r3, [pc, #48]	; (86f0 <dequeue_send+0x64>)
    86c0:	681b      	ldr	r3, [r3, #0]
    86c2:	687a      	ldr	r2, [r7, #4]
    86c4:	1ad3      	subs	r3, r2, r3
    86c6:	4a0b      	ldr	r2, [pc, #44]	; (86f4 <dequeue_send+0x68>)
    86c8:	4293      	cmp	r3, r2
    86ca:	d90b      	bls.n	86e4 <dequeue_send+0x58>
			u8 pkt_type = KEEP_ALIVE;
    86cc:	2303      	movs	r3, #3
    86ce:	72fb      	strb	r3, [r7, #11]
			last_usb_pkt = clkn;
    86d0:	4a07      	ldr	r2, [pc, #28]	; (86f0 <dequeue_send+0x64>)
    86d2:	687b      	ldr	r3, [r7, #4]
    86d4:	6013      	str	r3, [r2, #0]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    86d6:	f107 030b 	add.w	r3, r7, #11
    86da:	2082      	movs	r0, #130	; 0x82
    86dc:	4619      	mov	r1, r3
    86de:	2201      	movs	r2, #1
    86e0:	f001 feb2 	bl	a448 <USBHwEPWrite>
		}
		return 0;
    86e4:	2300      	movs	r3, #0
	}
}
    86e6:	4618      	mov	r0, r3
    86e8:	3710      	adds	r7, #16
    86ea:	46bd      	mov	sp, r7
    86ec:	bd80      	pop	{r7, pc}
    86ee:	bf00      	nop
    86f0:	10000a64 	.word	0x10000a64
    86f4:	00061a80 	.word	0x00061a80

000086f8 <handle_usb>:

void handle_usb(u32 clkn)
{
    86f8:	b580      	push	{r7, lr}
    86fa:	b084      	sub	sp, #16
    86fc:	af00      	add	r7, sp, #0
    86fe:	6078      	str	r0, [r7, #4]
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    8700:	2082      	movs	r0, #130	; 0x82
    8702:	f001 fe65 	bl	a3d0 <USBHwEPGetStatus>
    8706:	4603      	mov	r3, r0
    8708:	73fb      	strb	r3, [r7, #15]
	if (!(epstat & EPSTAT_B1FULL)) {
    870a:	7bfb      	ldrb	r3, [r7, #15]
    870c:	f003 0320 	and.w	r3, r3, #32
    8710:	2b00      	cmp	r3, #0
    8712:	d102      	bne.n	871a <handle_usb+0x22>
		dequeue_send(clkn);
    8714:	6878      	ldr	r0, [r7, #4]
    8716:	f7ff ffb9 	bl	868c <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    871a:	7bfb      	ldrb	r3, [r7, #15]
    871c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8720:	2b00      	cmp	r3, #0
    8722:	d102      	bne.n	872a <handle_usb+0x32>
		dequeue_send(clkn);
    8724:	6878      	ldr	r0, [r7, #4]
    8726:	f7ff ffb1 	bl	868c <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
    872a:	f001 ff53 	bl	a5d4 <USBHwISR>
}
    872e:	3710      	adds	r7, #16
    8730:	46bd      	mov	sp, r7
    8732:	bd80      	pop	{r7, pc}

00008734 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    8734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8738:	b095      	sub	sp, #84	; 0x54
    873a:	af00      	add	r7, sp, #0
    873c:	6078      	str	r0, [r7, #4]
    873e:	4669      	mov	r1, sp
    8740:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u32 command[5];
	u32 result[5];
	int i;
	int j;
	u8 len = 22;
    8742:	2116      	movs	r1, #22
    8744:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
	u8 pa = 0;
    8748:	2100      	movs	r1, #0
    874a:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
	u8 txbuf[len];
    874e:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    8752:	4631      	mov	r1, r6
    8754:	3901      	subs	r1, #1
    8756:	6439      	str	r1, [r7, #64]	; 0x40
    8758:	b2f0      	uxtb	r0, r6
    875a:	f04f 0100 	mov.w	r1, #0
    875e:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
    8762:	ea4b 7b50 	orr.w	fp, fp, r0, lsr #29
    8766:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
    876a:	b2f0      	uxtb	r0, r6
    876c:	f04f 0100 	mov.w	r1, #0
    8770:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    8774:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
    8778:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    877c:	4631      	mov	r1, r6
    877e:	3107      	adds	r1, #7
    8780:	08c9      	lsrs	r1, r1, #3
    8782:	00c9      	lsls	r1, r1, #3
    8784:	ebad 0d01 	sub.w	sp, sp, r1
    8788:	4669      	mov	r1, sp
    878a:	3100      	adds	r1, #0
    878c:	63f9      	str	r1, [r7, #60]	; 0x3c
	u8 rxbuf[len];
    878e:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    8792:	4631      	mov	r1, r6
    8794:	3901      	subs	r1, #1
    8796:	63b9      	str	r1, [r7, #56]	; 0x38
    8798:	b2f0      	uxtb	r0, r6
    879a:	f04f 0100 	mov.w	r1, #0
    879e:	00cd      	lsls	r5, r1, #3
    87a0:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    87a4:	00c4      	lsls	r4, r0, #3
    87a6:	b2f0      	uxtb	r0, r6
    87a8:	f04f 0100 	mov.w	r1, #0
    87ac:	00cb      	lsls	r3, r1, #3
    87ae:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    87b2:	00c2      	lsls	r2, r0, #3
    87b4:	4633      	mov	r3, r6
    87b6:	3307      	adds	r3, #7
    87b8:	08db      	lsrs	r3, r3, #3
    87ba:	00db      	lsls	r3, r3, #3
    87bc:	ebad 0d03 	sub.w	sp, sp, r3
    87c0:	466b      	mov	r3, sp
    87c2:	3300      	adds	r3, #0
    87c4:	637b      	str	r3, [r7, #52]	; 0x34

	txbuf[0] = len - 1; // length of data (rest of payload)
    87c6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
    87ca:	3b01      	subs	r3, #1
    87cc:	b2da      	uxtb	r2, r3
    87ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    87d0:	701a      	strb	r2, [r3, #0]
	txbuf[1] = 0; // request
    87d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    87d4:	2200      	movs	r2, #0
    87d6:	705a      	strb	r2, [r3, #1]

	// read device serial number
	command[0] = 58;
    87d8:	233a      	movs	r3, #58	; 0x3a
    87da:	623b      	str	r3, [r7, #32]
	iap_entry(command, result);
    87dc:	4bb3      	ldr	r3, [pc, #716]	; (8aac <cc2400_rangetest+0x378>)
    87de:	681b      	ldr	r3, [r3, #0]
    87e0:	f107 0120 	add.w	r1, r7, #32
    87e4:	f107 020c 	add.w	r2, r7, #12
    87e8:	4608      	mov	r0, r1
    87ea:	4611      	mov	r1, r2
    87ec:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    87ee:	68fb      	ldr	r3, [r7, #12]
    87f0:	b2db      	uxtb	r3, r3
    87f2:	2b00      	cmp	r3, #0
    87f4:	d001      	beq.n	87fa <cc2400_rangetest+0xc6>
    87f6:	2300      	movs	r3, #0
		return;
    87f8:	e1ac      	b.n	8b54 <cc2400_rangetest+0x420>
	txbuf[2] = (result[1] >> 24) & 0xFF;
    87fa:	693b      	ldr	r3, [r7, #16]
    87fc:	0e1b      	lsrs	r3, r3, #24
    87fe:	b2da      	uxtb	r2, r3
    8800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8802:	709a      	strb	r2, [r3, #2]
	txbuf[3] = (result[1] >> 16) & 0xFF;
    8804:	693b      	ldr	r3, [r7, #16]
    8806:	0c1b      	lsrs	r3, r3, #16
    8808:	b2da      	uxtb	r2, r3
    880a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    880c:	70da      	strb	r2, [r3, #3]
	txbuf[4] = (result[1] >> 8) & 0xFF;
    880e:	693b      	ldr	r3, [r7, #16]
    8810:	0a1b      	lsrs	r3, r3, #8
    8812:	b2da      	uxtb	r2, r3
    8814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8816:	711a      	strb	r2, [r3, #4]
	txbuf[5] = result[1] & 0xFF;
    8818:	693b      	ldr	r3, [r7, #16]
    881a:	b2da      	uxtb	r2, r3
    881c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    881e:	715a      	strb	r2, [r3, #5]
	txbuf[6] = (result[2] >> 24) & 0xFF;
    8820:	697b      	ldr	r3, [r7, #20]
    8822:	0e1b      	lsrs	r3, r3, #24
    8824:	b2da      	uxtb	r2, r3
    8826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8828:	719a      	strb	r2, [r3, #6]
	txbuf[7] = (result[2] >> 16) & 0xFF;
    882a:	697b      	ldr	r3, [r7, #20]
    882c:	0c1b      	lsrs	r3, r3, #16
    882e:	b2da      	uxtb	r2, r3
    8830:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8832:	71da      	strb	r2, [r3, #7]
	txbuf[8] = (result[2] >> 8) & 0xFF;
    8834:	697b      	ldr	r3, [r7, #20]
    8836:	0a1b      	lsrs	r3, r3, #8
    8838:	b2da      	uxtb	r2, r3
    883a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    883c:	721a      	strb	r2, [r3, #8]
	txbuf[9] = result[2] & 0xFF;
    883e:	697b      	ldr	r3, [r7, #20]
    8840:	b2da      	uxtb	r2, r3
    8842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8844:	725a      	strb	r2, [r3, #9]
	txbuf[10] = (result[3] >> 24) & 0xFF;
    8846:	69bb      	ldr	r3, [r7, #24]
    8848:	0e1b      	lsrs	r3, r3, #24
    884a:	b2da      	uxtb	r2, r3
    884c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    884e:	729a      	strb	r2, [r3, #10]
	txbuf[11] = (result[3] >> 16) & 0xFF;
    8850:	69bb      	ldr	r3, [r7, #24]
    8852:	0c1b      	lsrs	r3, r3, #16
    8854:	b2da      	uxtb	r2, r3
    8856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8858:	72da      	strb	r2, [r3, #11]
	txbuf[12] = (result[3] >> 8) & 0xFF;
    885a:	69bb      	ldr	r3, [r7, #24]
    885c:	0a1b      	lsrs	r3, r3, #8
    885e:	b2da      	uxtb	r2, r3
    8860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8862:	731a      	strb	r2, [r3, #12]
	txbuf[13] = result[3] & 0xFF;
    8864:	69bb      	ldr	r3, [r7, #24]
    8866:	b2da      	uxtb	r2, r3
    8868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    886a:	735a      	strb	r2, [r3, #13]
	txbuf[14] = (result[4] >> 24) & 0xFF;
    886c:	69fb      	ldr	r3, [r7, #28]
    886e:	0e1b      	lsrs	r3, r3, #24
    8870:	b2da      	uxtb	r2, r3
    8872:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8874:	739a      	strb	r2, [r3, #14]
	txbuf[15] = (result[4] >> 16) & 0xFF;
    8876:	69fb      	ldr	r3, [r7, #28]
    8878:	0c1b      	lsrs	r3, r3, #16
    887a:	b2da      	uxtb	r2, r3
    887c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    887e:	73da      	strb	r2, [r3, #15]
	txbuf[16] = (result[4] >> 8) & 0xFF;
    8880:	69fb      	ldr	r3, [r7, #28]
    8882:	0a1b      	lsrs	r3, r3, #8
    8884:	b2da      	uxtb	r2, r3
    8886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8888:	741a      	strb	r2, [r3, #16]
	txbuf[17] = result[4] & 0xFF;
    888a:	69fb      	ldr	r3, [r7, #28]
    888c:	b2da      	uxtb	r2, r3
    888e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8890:	745a      	strb	r2, [r3, #17]

	txbuf[18] = pa; // request pa
    8892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8894:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    8898:	749a      	strb	r2, [r3, #18]
	txbuf[19] = 0; // request number
    889a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    889c:	2200      	movs	r2, #0
    889e:	74da      	strb	r2, [r3, #19]
	txbuf[20] = 0xff; // reply pa
    88a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88a2:	22ff      	movs	r2, #255	; 0xff
    88a4:	751a      	strb	r2, [r3, #20]
	txbuf[21] = 0xff; // reply number
    88a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88a8:	22ff      	movs	r2, #255	; 0xff
    88aa:	755a      	strb	r2, [r3, #21]

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    88ac:	2012      	movs	r0, #18
    88ae:	f642 3122 	movw	r1, #11042	; 0x2b22
    88b2:	f001 f8f9 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    88b6:	2014      	movs	r0, #20
    88b8:	f241 314b 	movw	r1, #4939	; 0x134b
    88bc:	f001 f8f4 	bl	9aa8 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    88c0:	2020      	movs	r0, #32
    88c2:	f640 51f1 	movw	r1, #3569	; 0xdf1
    88c6:	f001 f8ef 	bl	9aa8 <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    88ca:	687b      	ldr	r3, [r7, #4]
    88cc:	881b      	ldrh	r3, [r3, #0]
    88ce:	b29b      	uxth	r3, r3
    88d0:	2002      	movs	r0, #2
    88d2:	4619      	mov	r1, r3
    88d4:	f001 f8e8 	bl	9aa8 <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    88d8:	202d      	movs	r0, #45	; 0x2d
    88da:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    88de:	f001 f8e3 	bl	9aa8 <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    88e2:	202c      	movs	r0, #44	; 0x2c
    88e4:	f241 5184 	movw	r1, #5508	; 0x1584
    88e8:	f001 f8de 	bl	9aa8 <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    88ec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    88f0:	f043 0308 	orr.w	r3, r3, #8
    88f4:	b2db      	uxtb	r3, r3
    88f6:	b29b      	uxth	r3, r3
    88f8:	2005      	movs	r0, #5
    88fa:	4619      	mov	r1, r3
    88fc:	f001 f8d4 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    8900:	2003      	movs	r0, #3
    8902:	2129      	movs	r1, #41	; 0x29
    8904:	f001 f8d0 	bl	9aa8 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8908:	bf00      	nop
    890a:	f001 f985 	bl	9c18 <cc2400_status>
    890e:	4603      	mov	r3, r0
    8910:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8914:	2b00      	cmp	r3, #0
    8916:	d0f8      	beq.n	890a <cc2400_rangetest+0x1d6>
	cc2400_strobe(SFSON);
    8918:	2061      	movs	r0, #97	; 0x61
    891a:	f001 f987 	bl	9c2c <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    891e:	bf00      	nop
    8920:	f001 f97a 	bl	9c18 <cc2400_status>
    8924:	4603      	mov	r3, r0
    8926:	f003 0304 	and.w	r3, r3, #4
    892a:	2b00      	cmp	r3, #0
    892c:	d0f8      	beq.n	8920 <cc2400_rangetest+0x1ec>
	TXLED_SET;
    892e:	4b60      	ldr	r3, [pc, #384]	; (8ab0 <cc2400_rangetest+0x37c>)
    8930:	f44f 7280 	mov.w	r2, #256	; 0x100
    8934:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8936:	4b5f      	ldr	r3, [pc, #380]	; (8ab4 <cc2400_rangetest+0x380>)
    8938:	2280      	movs	r2, #128	; 0x80
    893a:	601a      	str	r2, [r3, #0]
#endif
	for (pa = 0; pa < 8; pa++) {
    893c:	2300      	movs	r3, #0
    893e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    8942:	e03e      	b.n	89c2 <cc2400_rangetest+0x28e>
		cc2400_set(FREND, 8 | pa);
    8944:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8948:	f043 0308 	orr.w	r3, r3, #8
    894c:	b2db      	uxtb	r3, r3
    894e:	b29b      	uxth	r3, r3
    8950:	2005      	movs	r0, #5
    8952:	4619      	mov	r1, r3
    8954:	f001 f8a8 	bl	9aa8 <cc2400_set>
		txbuf[18] = pa;
    8958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    895a:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    895e:	749a      	strb	r2, [r3, #18]
		for (i = 0; i < 16; i++) {
    8960:	2300      	movs	r3, #0
    8962:	64fb      	str	r3, [r7, #76]	; 0x4c
    8964:	e025      	b.n	89b2 <cc2400_rangetest+0x27e>
			txbuf[19] = i;
    8966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8968:	b2da      	uxtb	r2, r3
    896a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    896c:	74da      	strb	r2, [r3, #19]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    896e:	bf00      	nop
    8970:	200e      	movs	r0, #14
    8972:	f001 f883 	bl	9a7c <cc2400_get>
    8976:	4603      	mov	r3, r0
    8978:	f003 031f 	and.w	r3, r3, #31
    897c:	2b0f      	cmp	r3, #15
    897e:	d1f7      	bne.n	8970 <cc2400_rangetest+0x23c>
			// transmit a packet
			for (j = 0; j < len; j++)
    8980:	2300      	movs	r3, #0
    8982:	64bb      	str	r3, [r7, #72]	; 0x48
    8984:	e00a      	b.n	899c <cc2400_rangetest+0x268>
				cc2400_set8(FIFOREG, txbuf[j]);
    8986:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    898a:	4413      	add	r3, r2
    898c:	781b      	ldrb	r3, [r3, #0]
    898e:	2070      	movs	r0, #112	; 0x70
    8990:	4619      	mov	r1, r3
    8992:	f001 f8b7 	bl	9b04 <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    8996:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8998:	3301      	adds	r3, #1
    899a:	64bb      	str	r3, [r7, #72]	; 0x48
    899c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    89a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    89a2:	429a      	cmp	r2, r3
    89a4:	dcef      	bgt.n	8986 <cc2400_rangetest+0x252>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    89a6:	2063      	movs	r0, #99	; 0x63
    89a8:	f001 f940 	bl	9c2c <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    89ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    89ae:	3301      	adds	r3, #1
    89b0:	64fb      	str	r3, [r7, #76]	; 0x4c
    89b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    89b4:	2b0f      	cmp	r3, #15
    89b6:	ddd6      	ble.n	8966 <cc2400_rangetest+0x232>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    89b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    89bc:	3301      	adds	r3, #1
    89be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    89c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    89c6:	2b07      	cmp	r3, #7
    89c8:	d9bc      	bls.n	8944 <cc2400_rangetest+0x210>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    89ca:	bf00      	nop
    89cc:	200e      	movs	r0, #14
    89ce:	f001 f855 	bl	9a7c <cc2400_get>
    89d2:	4603      	mov	r3, r0
    89d4:	f003 031f 	and.w	r3, r3, #31
    89d8:	2b0f      	cmp	r3, #15
    89da:	d1f7      	bne.n	89cc <cc2400_rangetest+0x298>
	TXLED_CLR;
    89dc:	4b36      	ldr	r3, [pc, #216]	; (8ab8 <cc2400_rangetest+0x384>)
    89de:	f44f 7280 	mov.w	r2, #256	; 0x100
    89e2:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    89e4:	2064      	movs	r0, #100	; 0x64
    89e6:	f001 f921 	bl	9c2c <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    89ea:	bf00      	nop
    89ec:	f001 f914 	bl	9c18 <cc2400_status>
    89f0:	4603      	mov	r3, r0
    89f2:	f003 0304 	and.w	r3, r3, #4
    89f6:	2b00      	cmp	r3, #0
    89f8:	d1f8      	bne.n	89ec <cc2400_rangetest+0x2b8>
	cc2400_set(FSDIV, *chan_ptr - 1);
    89fa:	687b      	ldr	r3, [r7, #4]
    89fc:	881b      	ldrh	r3, [r3, #0]
    89fe:	b29b      	uxth	r3, r3
    8a00:	3b01      	subs	r3, #1
    8a02:	b29b      	uxth	r3, r3
    8a04:	2002      	movs	r0, #2
    8a06:	4619      	mov	r1, r3
    8a08:	f001 f84e 	bl	9aa8 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8a0c:	bf00      	nop
    8a0e:	f001 f903 	bl	9c18 <cc2400_status>
    8a12:	4603      	mov	r3, r0
    8a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8a18:	2b00      	cmp	r3, #0
    8a1a:	d0f8      	beq.n	8a0e <cc2400_rangetest+0x2da>
	cc2400_strobe(SFSON);
    8a1c:	2061      	movs	r0, #97	; 0x61
    8a1e:	f001 f905 	bl	9c2c <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8a22:	bf00      	nop
    8a24:	f001 f8f8 	bl	9c18 <cc2400_status>
    8a28:	4603      	mov	r3, r0
    8a2a:	f003 0304 	and.w	r3, r3, #4
    8a2e:	2b00      	cmp	r3, #0
    8a30:	d0f8      	beq.n	8a24 <cc2400_rangetest+0x2f0>
	RXLED_SET;
    8a32:	4b1f      	ldr	r3, [pc, #124]	; (8ab0 <cc2400_rangetest+0x37c>)
    8a34:	2210      	movs	r2, #16
    8a36:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8a38:	bf00      	nop
    8a3a:	200e      	movs	r0, #14
    8a3c:	f001 f81e 	bl	9a7c <cc2400_get>
    8a40:	4603      	mov	r3, r0
    8a42:	f003 031f 	and.w	r3, r3, #31
    8a46:	2b0f      	cmp	r3, #15
    8a48:	d1f7      	bne.n	8a3a <cc2400_rangetest+0x306>
		cc2400_strobe(SRX);
    8a4a:	2062      	movs	r0, #98	; 0x62
    8a4c:	f001 f8ee 	bl	9c2c <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    8a50:	bf00      	nop
    8a52:	f001 f8e1 	bl	9c18 <cc2400_status>
    8a56:	4603      	mov	r3, r0
    8a58:	f003 0310 	and.w	r3, r3, #16
    8a5c:	2b00      	cmp	r3, #0
    8a5e:	d0f8      	beq.n	8a52 <cc2400_rangetest+0x31e>
		USRLED_SET;
    8a60:	4b13      	ldr	r3, [pc, #76]	; (8ab0 <cc2400_rangetest+0x37c>)
    8a62:	2202      	movs	r2, #2
    8a64:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
    8a66:	2300      	movs	r3, #0
    8a68:	64bb      	str	r3, [r7, #72]	; 0x48
    8a6a:	e00c      	b.n	8a86 <cc2400_rangetest+0x352>
			rxbuf[j] = cc2400_get8(FIFOREG);
    8a6c:	2070      	movs	r0, #112	; 0x70
    8a6e:	f001 f82f 	bl	9ad0 <cc2400_get8>
    8a72:	4603      	mov	r3, r0
    8a74:	4619      	mov	r1, r3
    8a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8a7a:	4413      	add	r3, r2
    8a7c:	460a      	mov	r2, r1
    8a7e:	701a      	strb	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    8a80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8a82:	3301      	adds	r3, #1
    8a84:	64bb      	str	r3, [r7, #72]	; 0x48
    8a86:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    8a8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8a8c:	429a      	cmp	r2, r3
    8a8e:	dced      	bgt.n	8a6c <cc2400_rangetest+0x338>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    8a90:	f001 f8c2 	bl	9c18 <cc2400_status>
    8a94:	4603      	mov	r3, r0
    8a96:	f003 0308 	and.w	r3, r3, #8
    8a9a:	2b00      	cmp	r3, #0
    8a9c:	d001      	beq.n	8aa2 <cc2400_rangetest+0x36e>
			break;
    8a9e:	bf00      	nop
		USRLED_CLR;
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8aa0:	e00c      	b.n	8abc <cc2400_rangetest+0x388>
		USRLED_SET;
		for (j = 0; j < len; j++)
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
			break;
		USRLED_CLR;
    8aa2:	4b05      	ldr	r3, [pc, #20]	; (8ab8 <cc2400_rangetest+0x384>)
    8aa4:	2202      	movs	r2, #2
    8aa6:	601a      	str	r2, [r3, #0]
	}
    8aa8:	e7c6      	b.n	8a38 <cc2400_rangetest+0x304>
    8aaa:	bf00      	nop
    8aac:	100008a8 	.word	0x100008a8
    8ab0:	2009c038 	.word	0x2009c038
    8ab4:	2009c058 	.word	0x2009c058
    8ab8:	2009c03c 	.word	0x2009c03c

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8abc:	200e      	movs	r0, #14
    8abe:	f000 ffdd 	bl	9a7c <cc2400_get>
    8ac2:	4603      	mov	r3, r0
    8ac4:	f003 031f 	and.w	r3, r3, #31
    8ac8:	2b0f      	cmp	r3, #15
    8aca:	d1f7      	bne.n	8abc <cc2400_rangetest+0x388>
	cc2400_strobe(SRFOFF);
    8acc:	2064      	movs	r0, #100	; 0x64
    8ace:	f001 f8ad 	bl	9c2c <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    8ad2:	bf00      	nop
    8ad4:	f001 f8a0 	bl	9c18 <cc2400_status>
    8ad8:	4603      	mov	r3, r0
    8ada:	f003 0304 	and.w	r3, r3, #4
    8ade:	2b00      	cmp	r3, #0
    8ae0:	d1f8      	bne.n	8ad4 <cc2400_rangetest+0x3a0>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    8ae2:	4b20      	ldr	r3, [pc, #128]	; (8b64 <cc2400_rangetest+0x430>)
    8ae4:	2280      	movs	r2, #128	; 0x80
    8ae6:	601a      	str	r2, [r3, #0]
#endif
	RXLED_CLR;
    8ae8:	4b1f      	ldr	r3, [pc, #124]	; (8b68 <cc2400_rangetest+0x434>)
    8aea:	2210      	movs	r2, #16
    8aec:	601a      	str	r2, [r3, #0]

	// get test result
	rr.valid       = 1;
    8aee:	4b1f      	ldr	r3, [pc, #124]	; (8b6c <cc2400_rangetest+0x438>)
    8af0:	2201      	movs	r2, #1
    8af2:	701a      	strb	r2, [r3, #0]
	rr.request_pa  = rxbuf[18];
    8af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8af6:	7c9a      	ldrb	r2, [r3, #18]
    8af8:	4b1c      	ldr	r3, [pc, #112]	; (8b6c <cc2400_rangetest+0x438>)
    8afa:	705a      	strb	r2, [r3, #1]
	rr.request_num = rxbuf[19];
    8afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8afe:	7cda      	ldrb	r2, [r3, #19]
    8b00:	4b1a      	ldr	r3, [pc, #104]	; (8b6c <cc2400_rangetest+0x438>)
    8b02:	709a      	strb	r2, [r3, #2]
	rr.reply_pa    = rxbuf[20];
    8b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b06:	7d1a      	ldrb	r2, [r3, #20]
    8b08:	4b18      	ldr	r3, [pc, #96]	; (8b6c <cc2400_rangetest+0x438>)
    8b0a:	70da      	strb	r2, [r3, #3]
	rr.reply_num   = rxbuf[21];
    8b0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b0e:	7d5a      	ldrb	r2, [r3, #21]
    8b10:	4b16      	ldr	r3, [pc, #88]	; (8b6c <cc2400_rangetest+0x438>)
    8b12:	711a      	strb	r2, [r3, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    8b14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8b16:	2201      	movs	r2, #1
    8b18:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 18; i++)
    8b1a:	2300      	movs	r3, #0
    8b1c:	64fb      	str	r3, [r7, #76]	; 0x4c
    8b1e:	e012      	b.n	8b46 <cc2400_rangetest+0x412>
		if (rxbuf[i] != txbuf[i])
    8b20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b24:	4413      	add	r3, r2
    8b26:	781a      	ldrb	r2, [r3, #0]
    8b28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    8b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b2c:	440b      	add	r3, r1
    8b2e:	781b      	ldrb	r3, [r3, #0]
    8b30:	429a      	cmp	r2, r3
    8b32:	d005      	beq.n	8b40 <cc2400_rangetest+0x40c>
			rr.valid = 2 + i;
    8b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b36:	b2db      	uxtb	r3, r3
    8b38:	3302      	adds	r3, #2
    8b3a:	b2da      	uxtb	r2, r3
    8b3c:	4b0b      	ldr	r3, [pc, #44]	; (8b6c <cc2400_rangetest+0x438>)
    8b3e:	701a      	strb	r2, [r3, #0]
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    8b40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b42:	3301      	adds	r3, #1
    8b44:	64fb      	str	r3, [r7, #76]	; 0x4c
    8b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b48:	2b11      	cmp	r3, #17
    8b4a:	dde9      	ble.n	8b20 <cc2400_rangetest+0x3ec>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    8b4c:	4b06      	ldr	r3, [pc, #24]	; (8b68 <cc2400_rangetest+0x434>)
    8b4e:	2202      	movs	r2, #2
    8b50:	601a      	str	r2, [r3, #0]
    8b52:	2301      	movs	r3, #1
    8b54:	f8d7 d000 	ldr.w	sp, [r7]
    8b58:	2b01      	cmp	r3, #1
#endif
}
    8b5a:	3754      	adds	r7, #84	; 0x54
    8b5c:	46bd      	mov	sp, r7
    8b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b62:	bf00      	nop
    8b64:	2009c05c 	.word	0x2009c05c
    8b68:	2009c03c 	.word	0x2009c03c
    8b6c:	10001080 	.word	0x10001080

00008b70 <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    8b70:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b72:	b089      	sub	sp, #36	; 0x24
    8b74:	af00      	add	r7, sp, #0
    8b76:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	int i;
	int j;
	u8 len = 22;
    8b78:	2116      	movs	r1, #22
    8b7a:	75b9      	strb	r1, [r7, #22]
	u8 pa = 0;
    8b7c:	2100      	movs	r1, #0
    8b7e:	75f9      	strb	r1, [r7, #23]
	u8 buf[len];
    8b80:	7dbe      	ldrb	r6, [r7, #22]
    8b82:	4631      	mov	r1, r6
    8b84:	3901      	subs	r1, #1
    8b86:	6139      	str	r1, [r7, #16]
    8b88:	b2f0      	uxtb	r0, r6
    8b8a:	f04f 0100 	mov.w	r1, #0
    8b8e:	00cd      	lsls	r5, r1, #3
    8b90:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    8b94:	00c4      	lsls	r4, r0, #3
    8b96:	b2f0      	uxtb	r0, r6
    8b98:	f04f 0100 	mov.w	r1, #0
    8b9c:	00cb      	lsls	r3, r1, #3
    8b9e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    8ba2:	00c2      	lsls	r2, r0, #3
    8ba4:	4633      	mov	r3, r6
    8ba6:	3307      	adds	r3, #7
    8ba8:	08db      	lsrs	r3, r3, #3
    8baa:	00db      	lsls	r3, r3, #3
    8bac:	ebad 0d03 	sub.w	sp, sp, r3
    8bb0:	466b      	mov	r3, sp
    8bb2:	3300      	adds	r3, #0
    8bb4:	60fb      	str	r3, [r7, #12]

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(LMTST,   0x2b22);
    8bb6:	2012      	movs	r0, #18
    8bb8:	f642 3122 	movw	r1, #11042	; 0x2b22
    8bbc:	f000 ff74 	bl	9aa8 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    8bc0:	2014      	movs	r0, #20
    8bc2:	f241 314b 	movw	r1, #4939	; 0x134b
    8bc6:	f000 ff6f 	bl	9aa8 <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    8bca:	687b      	ldr	r3, [r7, #4]
    8bcc:	881b      	ldrh	r3, [r3, #0]
    8bce:	b29b      	uxth	r3, r3
    8bd0:	3b01      	subs	r3, #1
    8bd2:	b29b      	uxth	r3, r3
    8bd4:	2002      	movs	r0, #2
    8bd6:	4619      	mov	r1, r3
    8bd8:	f000 ff66 	bl	9aa8 <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    8bdc:	202d      	movs	r0, #45	; 0x2d
    8bde:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    8be2:	f000 ff61 	bl	9aa8 <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    8be6:	202c      	movs	r0, #44	; 0x2c
    8be8:	f241 5184 	movw	r1, #5508	; 0x1584
    8bec:	f000 ff5c 	bl	9aa8 <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    8bf0:	2005      	movs	r0, #5
    8bf2:	2108      	movs	r1, #8
    8bf4:	f000 ff58 	bl	9aa8 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    8bf8:	2003      	movs	r0, #3
    8bfa:	2129      	movs	r1, #41	; 0x29
    8bfc:	f000 ff54 	bl	9aa8 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8c00:	bf00      	nop
    8c02:	f001 f809 	bl	9c18 <cc2400_status>
    8c06:	4603      	mov	r3, r0
    8c08:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8c0c:	2b00      	cmp	r3, #0
    8c0e:	d0f8      	beq.n	8c02 <cc2400_repeater+0x92>
		cc2400_strobe(SFSON);
    8c10:	2061      	movs	r0, #97	; 0x61
    8c12:	f001 f80b 	bl	9c2c <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    8c16:	bf00      	nop
    8c18:	f000 fffe 	bl	9c18 <cc2400_status>
    8c1c:	4603      	mov	r3, r0
    8c1e:	f003 0304 	and.w	r3, r3, #4
    8c22:	2b00      	cmp	r3, #0
    8c24:	d0f8      	beq.n	8c18 <cc2400_repeater+0xa8>
		RXLED_SET;
    8c26:	4b6a      	ldr	r3, [pc, #424]	; (8dd0 <cc2400_repeater+0x260>)
    8c28:	2210      	movs	r2, #16
    8c2a:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    8c2c:	4b69      	ldr	r3, [pc, #420]	; (8dd4 <cc2400_repeater+0x264>)
    8c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
    8c32:	601a      	str	r2, [r3, #0]
		USRLED_CLR;
    8c34:	4b67      	ldr	r3, [pc, #412]	; (8dd4 <cc2400_repeater+0x264>)
    8c36:	2202      	movs	r2, #2
    8c38:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    8c3a:	4b67      	ldr	r3, [pc, #412]	; (8dd8 <cc2400_repeater+0x268>)
    8c3c:	2280      	movs	r2, #128	; 0x80
    8c3e:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8c40:	bf00      	nop
    8c42:	200e      	movs	r0, #14
    8c44:	f000 ff1a 	bl	9a7c <cc2400_get>
    8c48:	4603      	mov	r3, r0
    8c4a:	f003 031f 	and.w	r3, r3, #31
    8c4e:	2b0f      	cmp	r3, #15
    8c50:	d1f7      	bne.n	8c42 <cc2400_repeater+0xd2>
			USRLED_CLR;
    8c52:	4b60      	ldr	r3, [pc, #384]	; (8dd4 <cc2400_repeater+0x264>)
    8c54:	2202      	movs	r2, #2
    8c56:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRX);
    8c58:	2062      	movs	r0, #98	; 0x62
    8c5a:	f000 ffe7 	bl	9c2c <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    8c5e:	bf00      	nop
    8c60:	f000 ffda 	bl	9c18 <cc2400_status>
    8c64:	4603      	mov	r3, r0
    8c66:	f003 0310 	and.w	r3, r3, #16
    8c6a:	2b00      	cmp	r3, #0
    8c6c:	d0f8      	beq.n	8c60 <cc2400_repeater+0xf0>
			USRLED_SET;
    8c6e:	4b58      	ldr	r3, [pc, #352]	; (8dd0 <cc2400_repeater+0x260>)
    8c70:	2202      	movs	r2, #2
    8c72:	601a      	str	r2, [r3, #0]
			for (i = 0; i < len; i++)
    8c74:	2300      	movs	r3, #0
    8c76:	61fb      	str	r3, [r7, #28]
    8c78:	e00c      	b.n	8c94 <cc2400_repeater+0x124>
				buf[i] = cc2400_get8(FIFOREG);
    8c7a:	2070      	movs	r0, #112	; 0x70
    8c7c:	f000 ff28 	bl	9ad0 <cc2400_get8>
    8c80:	4603      	mov	r3, r0
    8c82:	4619      	mov	r1, r3
    8c84:	68fa      	ldr	r2, [r7, #12]
    8c86:	69fb      	ldr	r3, [r7, #28]
    8c88:	4413      	add	r3, r2
    8c8a:	460a      	mov	r2, r1
    8c8c:	701a      	strb	r2, [r3, #0]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    8c8e:	69fb      	ldr	r3, [r7, #28]
    8c90:	3301      	adds	r3, #1
    8c92:	61fb      	str	r3, [r7, #28]
    8c94:	7dba      	ldrb	r2, [r7, #22]
    8c96:	69fb      	ldr	r3, [r7, #28]
    8c98:	429a      	cmp	r2, r3
    8c9a:	dcee      	bgt.n	8c7a <cc2400_repeater+0x10a>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    8c9c:	f000 ffbc 	bl	9c18 <cc2400_status>
    8ca0:	4603      	mov	r3, r0
    8ca2:	f003 0308 	and.w	r3, r3, #8
    8ca6:	2b00      	cmp	r3, #0
    8ca8:	d003      	beq.n	8cb2 <cc2400_repeater+0x142>
				break;
    8caa:	bf00      	nop
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    8cac:	4b4b      	ldr	r3, [pc, #300]	; (8ddc <cc2400_repeater+0x26c>)
    8cae:	61fb      	str	r3, [r7, #28]
    8cb0:	e000      	b.n	8cb4 <cc2400_repeater+0x144>
			USRLED_SET;
			for (i = 0; i < len; i++)
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
				break;
		}
    8cb2:	e7c5      	b.n	8c40 <cc2400_repeater+0xd0>
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    8cb4:	69fb      	ldr	r3, [r7, #28]
    8cb6:	3b01      	subs	r3, #1
    8cb8:	61fb      	str	r3, [r7, #28]
    8cba:	69fb      	ldr	r3, [r7, #28]
    8cbc:	2b00      	cmp	r3, #0
    8cbe:	d1f9      	bne.n	8cb4 <cc2400_repeater+0x144>
		USRLED_CLR;
    8cc0:	4b44      	ldr	r3, [pc, #272]	; (8dd4 <cc2400_repeater+0x264>)
    8cc2:	2202      	movs	r2, #2
    8cc4:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    8cc6:	4b43      	ldr	r3, [pc, #268]	; (8dd4 <cc2400_repeater+0x264>)
    8cc8:	2210      	movs	r2, #16
    8cca:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    8ccc:	2064      	movs	r0, #100	; 0x64
    8cce:	f000 ffad 	bl	9c2c <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8cd2:	bf00      	nop
    8cd4:	f000 ffa0 	bl	9c18 <cc2400_status>
    8cd8:	4603      	mov	r3, r0
    8cda:	f003 0304 	and.w	r3, r3, #4
    8cde:	2b00      	cmp	r3, #0
    8ce0:	d1f8      	bne.n	8cd4 <cc2400_repeater+0x164>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8ce2:	bf00      	nop
    8ce4:	f000 ff98 	bl	9c18 <cc2400_status>
    8ce8:	4603      	mov	r3, r0
    8cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8cee:	2b00      	cmp	r3, #0
    8cf0:	d0f8      	beq.n	8ce4 <cc2400_repeater+0x174>
		cc2400_set(FSDIV, *chan_ptr);
    8cf2:	687b      	ldr	r3, [r7, #4]
    8cf4:	881b      	ldrh	r3, [r3, #0]
    8cf6:	b29b      	uxth	r3, r3
    8cf8:	2002      	movs	r0, #2
    8cfa:	4619      	mov	r1, r3
    8cfc:	f000 fed4 	bl	9aa8 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8d00:	bf00      	nop
    8d02:	f000 ff89 	bl	9c18 <cc2400_status>
    8d06:	4603      	mov	r3, r0
    8d08:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8d0c:	2b00      	cmp	r3, #0
    8d0e:	d0f8      	beq.n	8d02 <cc2400_repeater+0x192>
		cc2400_strobe(SFSON);
    8d10:	2061      	movs	r0, #97	; 0x61
    8d12:	f000 ff8b 	bl	9c2c <cc2400_strobe>
		TXLED_SET;
    8d16:	4b2e      	ldr	r3, [pc, #184]	; (8dd0 <cc2400_repeater+0x260>)
    8d18:	f44f 7280 	mov.w	r2, #256	; 0x100
    8d1c:	601a      	str	r2, [r3, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    8d1e:	7dbb      	ldrb	r3, [r7, #22]
    8d20:	3b01      	subs	r3, #1
    8d22:	b2da      	uxtb	r2, r3
    8d24:	68fb      	ldr	r3, [r7, #12]
    8d26:	701a      	strb	r2, [r3, #0]
		buf[1] = 1; // reply
    8d28:	68fb      	ldr	r3, [r7, #12]
    8d2a:	2201      	movs	r2, #1
    8d2c:	705a      	strb	r2, [r3, #1]
		for (pa = 0; pa < 8; pa++) {
    8d2e:	2300      	movs	r3, #0
    8d30:	75fb      	strb	r3, [r7, #23]
    8d32:	e039      	b.n	8da8 <cc2400_repeater+0x238>
			cc2400_set(FREND, 8 | pa);
    8d34:	7dfb      	ldrb	r3, [r7, #23]
    8d36:	f043 0308 	orr.w	r3, r3, #8
    8d3a:	b2db      	uxtb	r3, r3
    8d3c:	b29b      	uxth	r3, r3
    8d3e:	2005      	movs	r0, #5
    8d40:	4619      	mov	r1, r3
    8d42:	f000 feb1 	bl	9aa8 <cc2400_set>
			buf[20] = pa;
    8d46:	68fb      	ldr	r3, [r7, #12]
    8d48:	7dfa      	ldrb	r2, [r7, #23]
    8d4a:	751a      	strb	r2, [r3, #20]
			for (i = 0; i < 16; i++) {
    8d4c:	2300      	movs	r3, #0
    8d4e:	61fb      	str	r3, [r7, #28]
    8d50:	e024      	b.n	8d9c <cc2400_repeater+0x22c>
				buf[21] = i;
    8d52:	69fb      	ldr	r3, [r7, #28]
    8d54:	b2da      	uxtb	r2, r3
    8d56:	68fb      	ldr	r3, [r7, #12]
    8d58:	755a      	strb	r2, [r3, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8d5a:	bf00      	nop
    8d5c:	200e      	movs	r0, #14
    8d5e:	f000 fe8d 	bl	9a7c <cc2400_get>
    8d62:	4603      	mov	r3, r0
    8d64:	f003 031f 	and.w	r3, r3, #31
    8d68:	2b0f      	cmp	r3, #15
    8d6a:	d1f7      	bne.n	8d5c <cc2400_repeater+0x1ec>
					for (j = 0; j < len; j++)
    8d6c:	2300      	movs	r3, #0
    8d6e:	61bb      	str	r3, [r7, #24]
    8d70:	e00a      	b.n	8d88 <cc2400_repeater+0x218>
						cc2400_set8(FIFOREG, buf[j]);
    8d72:	68fa      	ldr	r2, [r7, #12]
    8d74:	69bb      	ldr	r3, [r7, #24]
    8d76:	4413      	add	r3, r2
    8d78:	781b      	ldrb	r3, [r3, #0]
    8d7a:	2070      	movs	r0, #112	; 0x70
    8d7c:	4619      	mov	r1, r3
    8d7e:	f000 fec1 	bl	9b04 <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
					for (j = 0; j < len; j++)
    8d82:	69bb      	ldr	r3, [r7, #24]
    8d84:	3301      	adds	r3, #1
    8d86:	61bb      	str	r3, [r7, #24]
    8d88:	7dba      	ldrb	r2, [r7, #22]
    8d8a:	69bb      	ldr	r3, [r7, #24]
    8d8c:	429a      	cmp	r2, r3
    8d8e:	dcf0      	bgt.n	8d72 <cc2400_repeater+0x202>
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    8d90:	2063      	movs	r0, #99	; 0x63
    8d92:	f000 ff4b 	bl	9c2c <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    8d96:	69fb      	ldr	r3, [r7, #28]
    8d98:	3301      	adds	r3, #1
    8d9a:	61fb      	str	r3, [r7, #28]
    8d9c:	69fb      	ldr	r3, [r7, #28]
    8d9e:	2b0f      	cmp	r3, #15
    8da0:	ddd7      	ble.n	8d52 <cc2400_repeater+0x1e2>
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    8da2:	7dfb      	ldrb	r3, [r7, #23]
    8da4:	3301      	adds	r3, #1
    8da6:	75fb      	strb	r3, [r7, #23]
    8da8:	7dfb      	ldrb	r3, [r7, #23]
    8daa:	2b07      	cmp	r3, #7
    8dac:	d9c2      	bls.n	8d34 <cc2400_repeater+0x1c4>
					for (j = 0; j < len; j++)
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    8dae:	4b09      	ldr	r3, [pc, #36]	; (8dd4 <cc2400_repeater+0x264>)
    8db0:	f44f 7280 	mov.w	r2, #256	; 0x100
    8db4:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    8db6:	2064      	movs	r0, #100	; 0x64
    8db8:	f000 ff38 	bl	9c2c <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8dbc:	bf00      	nop
    8dbe:	f000 ff2b 	bl	9c18 <cc2400_status>
    8dc2:	4603      	mov	r3, r0
    8dc4:	f003 0304 	and.w	r3, r3, #4
    8dc8:	2b00      	cmp	r3, #0
    8dca:	d1f8      	bne.n	8dbe <cc2400_repeater+0x24e>
	}
    8dcc:	e6f3      	b.n	8bb6 <cc2400_repeater+0x46>
    8dce:	bf00      	nop
    8dd0:	2009c038 	.word	0x2009c038
    8dd4:	2009c03c 	.word	0x2009c03c
    8dd8:	2009c058 	.word	0x2009c058
    8ddc:	001e8480 	.word	0x001e8480

00008de0 <cc2400_txtest>:
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    8de0:	b580      	push	{r7, lr}
    8de2:	b084      	sub	sp, #16
    8de4:	af00      	add	r7, sp, #0
    8de6:	6078      	str	r0, [r7, #4]
    8de8:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    8dea:	687b      	ldr	r3, [r7, #4]
    8dec:	781b      	ldrb	r3, [r3, #0]
    8dee:	b2db      	uxtb	r3, r3
    8df0:	2b00      	cmp	r3, #0
    8df2:	d102      	bne.n	8dfa <cc2400_txtest+0x1a>
		mdmctrl = 0x0040; // 160 kHz frequency deviation
    8df4:	2340      	movs	r3, #64	; 0x40
    8df6:	81fb      	strh	r3, [r7, #14]
    8df8:	e008      	b.n	8e0c <cc2400_txtest+0x2c>
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    8dfa:	687b      	ldr	r3, [r7, #4]
    8dfc:	781b      	ldrb	r3, [r3, #0]
    8dfe:	b2db      	uxtb	r3, r3
    8e00:	2b01      	cmp	r3, #1
    8e02:	d102      	bne.n	8e0a <cc2400_txtest+0x2a>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    8e04:	2340      	movs	r3, #64	; 0x40
    8e06:	81fb      	strh	r3, [r7, #14]
    8e08:	e000      	b.n	8e0c <cc2400_txtest+0x2c>
	} else {
		/* oops */
		return;
    8e0a:	e035      	b.n	8e78 <cc2400_txtest+0x98>
	}
	cc2400_set(LMTST,   0x2b22);
    8e0c:	2012      	movs	r0, #18
    8e0e:	f642 3122 	movw	r1, #11042	; 0x2b22
    8e12:	f000 fe49 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    8e16:	2014      	movs	r0, #20
    8e18:	f243 314b 	movw	r1, #13131	; 0x334b
    8e1c:	f000 fe44 	bl	9aa8 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    8e20:	2020      	movs	r0, #32
    8e22:	f640 51f1 	movw	r1, #3569	; 0xdf1
    8e26:	f000 fe3f 	bl	9aa8 <cc2400_set>
	cc2400_set(FSDIV,   2435);
    8e2a:	2002      	movs	r0, #2
    8e2c:	f640 1183 	movw	r1, #2435	; 0x983
    8e30:	f000 fe3a 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl); 
    8e34:	89fb      	ldrh	r3, [r7, #14]
    8e36:	2003      	movs	r0, #3
    8e38:	4619      	mov	r1, r3
    8e3a:	f000 fe35 	bl	9aa8 <cc2400_set>
	
//	cc2400_set(FREND, 8 | 0);
	
	while (!(cc2400_status() & XOSC16M_STABLE));
    8e3e:	bf00      	nop
    8e40:	f000 feea 	bl	9c18 <cc2400_status>
    8e44:	4603      	mov	r3, r0
    8e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8e4a:	2b00      	cmp	r3, #0
    8e4c:	d0f8      	beq.n	8e40 <cc2400_txtest+0x60>
	cc2400_strobe(SFSON);
    8e4e:	2061      	movs	r0, #97	; 0x61
    8e50:	f000 feec 	bl	9c2c <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8e54:	bf00      	nop
    8e56:	f000 fedf 	bl	9c18 <cc2400_status>
    8e5a:	4603      	mov	r3, r0
    8e5c:	f003 0304 	and.w	r3, r3, #4
    8e60:	2b00      	cmp	r3, #0
    8e62:	d0f8      	beq.n	8e56 <cc2400_txtest+0x76>
	TXLED_SET;
    8e64:	4b06      	ldr	r3, [pc, #24]	; (8e80 <cc2400_txtest+0xa0>)
    8e66:	f44f 7280 	mov.w	r2, #256	; 0x100
    8e6a:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    8e6c:	2063      	movs	r0, #99	; 0x63
    8e6e:	f000 fedd 	bl	9c2c <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8e72:	4b04      	ldr	r3, [pc, #16]	; (8e84 <cc2400_txtest+0xa4>)
    8e74:	2280      	movs	r2, #128	; 0x80
    8e76:	601a      	str	r2, [r3, #0]
#endif
#endif
}
    8e78:	3710      	adds	r7, #16
    8e7a:	46bd      	mov	sp, r7
    8e7c:	bd80      	pop	{r7, pc}
    8e7e:	bf00      	nop
    8e80:	2009c038 	.word	0x2009c038
    8e84:	2009c058 	.word	0x2009c058

00008e88 <ssp_start>:
typedef struct _ego_packet_t {
	u8 rxbuf[EGO_PACKET_LEN];
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
    8e88:	b480      	push	{r7}
    8e8a:	af00      	add	r7, sp, #0
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    8e8c:	4b08      	ldr	r3, [pc, #32]	; (8eb0 <ssp_start+0x28>)
    8e8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8e92:	601a      	str	r2, [r3, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    8e94:	4a07      	ldr	r2, [pc, #28]	; (8eb4 <ssp_start+0x2c>)
    8e96:	4b07      	ldr	r3, [pc, #28]	; (8eb4 <ssp_start+0x2c>)
    8e98:	681b      	ldr	r3, [r3, #0]
    8e9a:	f043 0302 	orr.w	r3, r3, #2
    8e9e:	6013      	str	r3, [r2, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    8ea0:	4b05      	ldr	r3, [pc, #20]	; (8eb8 <ssp_start+0x30>)
    8ea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8ea6:	601a      	str	r2, [r3, #0]
}
    8ea8:	46bd      	mov	sp, r7
    8eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eae:	4770      	bx	lr
    8eb0:	2009c098 	.word	0x2009c098
    8eb4:	40030004 	.word	0x40030004
    8eb8:	2009c09c 	.word	0x2009c09c

00008ebc <ssp_stop>:

static void ssp_stop() {
    8ebc:	b480      	push	{r7}
    8ebe:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    8ec0:	4b06      	ldr	r3, [pc, #24]	; (8edc <ssp_stop+0x20>)
    8ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8ec6:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    8ec8:	4a05      	ldr	r2, [pc, #20]	; (8ee0 <ssp_stop+0x24>)
    8eca:	4b05      	ldr	r3, [pc, #20]	; (8ee0 <ssp_stop+0x24>)
    8ecc:	681b      	ldr	r3, [r3, #0]
    8ece:	f023 0302 	bic.w	r3, r3, #2
    8ed2:	6013      	str	r3, [r2, #0]
}
    8ed4:	46bd      	mov	sp, r7
    8ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eda:	4770      	bx	lr
    8edc:	2009c098 	.word	0x2009c098
    8ee0:	40030004 	.word	0x40030004

00008ee4 <ego_init>:

static void ego_init(void) {
    8ee4:	b580      	push	{r7, lr}
    8ee6:	af00      	add	r7, sp, #0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    8ee8:	4b03      	ldr	r3, [pc, #12]	; (8ef8 <ego_init+0x14>)
    8eea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8eee:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    8ef0:	f000 fd08 	bl	9904 <dio_ssp_init>
}
    8ef4:	bd80      	pop	{r7, pc}
    8ef6:	bf00      	nop
    8ef8:	e000e100 	.word	0xe000e100

00008efc <ego_deinit>:

static void ego_deinit(void) {
    8efc:	b580      	push	{r7, lr}
    8efe:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    8f00:	2064      	movs	r0, #100	; 0x64
    8f02:	f000 fe93 	bl	9c2c <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    8f06:	f7ff ffd9 	bl	8ebc <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    8f0a:	4b02      	ldr	r3, [pc, #8]	; (8f14 <ego_deinit+0x18>)
    8f0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8f10:	601a      	str	r2, [r3, #0]
}
    8f12:	bd80      	pop	{r7, pc}
    8f14:	e000e180 	.word	0xe000e180

00008f18 <rf_on>:

static void rf_on(void) {
    8f18:	b580      	push	{r7, lr}
    8f1a:	af00      	add	r7, sp, #0
	cc2400_set(MANAND,  0x7fff);
    8f1c:	200d      	movs	r0, #13
    8f1e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    8f22:	f000 fdc1 	bl	9aa8 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    8f26:	2012      	movs	r0, #18
    8f28:	f642 3122 	movw	r1, #11042	; 0x2b22
    8f2c:	f000 fdbc 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    8f30:	2014      	movs	r0, #20
    8f32:	f241 314b 	movw	r1, #4939	; 0x134b
    8f36:	f000 fdb7 	bl	9aa8 <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    8f3a:	2020      	movs	r0, #32
    8f3c:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    8f40:	f000 fdb2 	bl	9aa8 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    8f44:	4b1e      	ldr	r3, [pc, #120]	; (8fc0 <rf_on+0xa8>)
    8f46:	881b      	ldrh	r3, [r3, #0]
    8f48:	b29b      	uxth	r3, r3
    8f4a:	3b01      	subs	r3, #1
    8f4c:	b29b      	uxth	r3, r3
    8f4e:	2002      	movs	r0, #2
    8f50:	4619      	mov	r1, r3
    8f52:	f000 fda9 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    8f56:	2003      	movs	r0, #3
    8f58:	2126      	movs	r1, #38	; 0x26
    8f5a:	f000 fda5 	bl	9aa8 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    8f5e:	2021      	movs	r0, #33	; 0x21
    8f60:	2103      	movs	r1, #3
    8f62:	f000 fda1 	bl	9aa8 <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    8f66:	202d      	movs	r0, #45	; 0x2d
    8f68:	f246 310f 	movw	r1, #25359	; 0x630f
    8f6c:	f000 fd9c 	bl	9aa8 <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    8f70:	202c      	movs	r0, #44	; 0x2c
    8f72:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    8f76:	f000 fd97 	bl	9aa8 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    8f7a:	bf00      	nop
    8f7c:	f000 fe4c 	bl	9c18 <cc2400_status>
    8f80:	4603      	mov	r3, r0
    8f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8f86:	2b00      	cmp	r3, #0
    8f88:	d0f8      	beq.n	8f7c <rf_on+0x64>

	ssp_start();
    8f8a:	f7ff ff7d 	bl	8e88 <ssp_start>

	cc2400_strobe(SFSON);
    8f8e:	2061      	movs	r0, #97	; 0x61
    8f90:	f000 fe4c 	bl	9c2c <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8f94:	bf00      	nop
    8f96:	f000 fe3f 	bl	9c18 <cc2400_status>
    8f9a:	4603      	mov	r3, r0
    8f9c:	f003 0304 	and.w	r3, r3, #4
    8fa0:	2b00      	cmp	r3, #0
    8fa2:	d0f8      	beq.n	8f96 <rf_on+0x7e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8fa4:	bf00      	nop
    8fa6:	200e      	movs	r0, #14
    8fa8:	f000 fd68 	bl	9a7c <cc2400_get>
    8fac:	4603      	mov	r3, r0
    8fae:	f003 031f 	and.w	r3, r3, #31
    8fb2:	2b0f      	cmp	r3, #15
    8fb4:	d1f7      	bne.n	8fa6 <rf_on+0x8e>

	cc2400_strobe(SRX);
    8fb6:	2062      	movs	r0, #98	; 0x62
    8fb8:	f000 fe38 	bl	9c2c <cc2400_strobe>
}
    8fbc:	bd80      	pop	{r7, pc}
    8fbe:	bf00      	nop
    8fc0:	1000049c 	.word	0x1000049c

00008fc4 <do_rx>:

void do_rx(ego_packet_t *packet) {
    8fc4:	b480      	push	{r7}
    8fc6:	b085      	sub	sp, #20
    8fc8:	af00      	add	r7, sp, #0
    8fca:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    8fcc:	2300      	movs	r3, #0
    8fce:	60fb      	str	r3, [r7, #12]
    8fd0:	e011      	b.n	8ff6 <do_rx+0x32>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    8fd2:	bf00      	nop
    8fd4:	4b0c      	ldr	r3, [pc, #48]	; (9008 <do_rx+0x44>)
    8fd6:	681b      	ldr	r3, [r3, #0]
    8fd8:	f003 0304 	and.w	r3, r3, #4
    8fdc:	2b00      	cmp	r3, #0
    8fde:	d0f9      	beq.n	8fd4 <do_rx+0x10>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    8fe0:	4b0a      	ldr	r3, [pc, #40]	; (900c <do_rx+0x48>)
    8fe2:	681b      	ldr	r3, [r3, #0]
    8fe4:	b2d9      	uxtb	r1, r3
    8fe6:	687a      	ldr	r2, [r7, #4]
    8fe8:	68fb      	ldr	r3, [r7, #12]
    8fea:	4413      	add	r3, r2
    8fec:	460a      	mov	r2, r1
    8fee:	701a      	strb	r2, [r3, #0]
	cc2400_strobe(SRX);
}

void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    8ff0:	68fb      	ldr	r3, [r7, #12]
    8ff2:	3301      	adds	r3, #1
    8ff4:	60fb      	str	r3, [r7, #12]
    8ff6:	68fb      	ldr	r3, [r7, #12]
    8ff8:	2b23      	cmp	r3, #35	; 0x23
    8ffa:	ddea      	ble.n	8fd2 <do_rx+0xe>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    8ffc:	3714      	adds	r7, #20
    8ffe:	46bd      	mov	sp, r7
    9000:	f85d 7b04 	ldr.w	r7, [sp], #4
    9004:	4770      	bx	lr
    9006:	bf00      	nop
    9008:	4003000c 	.word	0x4003000c
    900c:	40030008 	.word	0x40030008

00009010 <sync_received>:

static inline int sync_received(void) {
    9010:	b580      	push	{r7, lr}
    9012:	af00      	add	r7, sp, #0
	return cc2400_status() & SYNC_RECEIVED;
    9014:	f000 fe00 	bl	9c18 <cc2400_status>
    9018:	4603      	mov	r3, r0
    901a:	f003 0310 	and.w	r3, r3, #16
}
    901e:	4618      	mov	r0, r3
    9020:	bd80      	pop	{r7, pc}
    9022:	bf00      	nop

00009024 <sleep_ms>:

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    9024:	b480      	push	{r7}
    9026:	b083      	sub	sp, #12
    9028:	af00      	add	r7, sp, #0
    902a:	6078      	str	r0, [r7, #4]
    902c:	6039      	str	r1, [r7, #0]
	state->sleep_start = CLK100NS;
    902e:	4b0c      	ldr	r3, [pc, #48]	; (9060 <sleep_ms+0x3c>)
    9030:	681b      	ldr	r3, [r3, #0]
    9032:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9036:	f640 4235 	movw	r2, #3125	; 0xc35
    903a:	fb02 f203 	mul.w	r2, r2, r3
    903e:	4b09      	ldr	r3, [pc, #36]	; (9064 <sleep_ms+0x40>)
    9040:	681b      	ldr	r3, [r3, #0]
    9042:	441a      	add	r2, r3
    9044:	687b      	ldr	r3, [r7, #4]
    9046:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    9048:	683b      	ldr	r3, [r7, #0]
    904a:	f242 7210 	movw	r2, #10000	; 0x2710
    904e:	fb02 f203 	mul.w	r2, r2, r3
    9052:	687b      	ldr	r3, [r7, #4]
    9054:	60da      	str	r2, [r3, #12]
}
    9056:	370c      	adds	r7, #12
    9058:	46bd      	mov	sp, r7
    905a:	f85d 7b04 	ldr.w	r7, [sp], #4
    905e:	4770      	bx	lr
    9060:	10000be4 	.word	0x10000be4
    9064:	40004008 	.word	0x40004008

00009068 <sleep_ms_anchor>:

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
    9068:	b480      	push	{r7}
    906a:	b083      	sub	sp, #12
    906c:	af00      	add	r7, sp, #0
    906e:	6078      	str	r0, [r7, #4]
    9070:	6039      	str	r1, [r7, #0]
	state->sleep_start = state->anchor;
    9072:	687b      	ldr	r3, [r7, #4]
    9074:	699a      	ldr	r2, [r3, #24]
    9076:	687b      	ldr	r3, [r7, #4]
    9078:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    907a:	683b      	ldr	r3, [r7, #0]
    907c:	f242 7210 	movw	r2, #10000	; 0x2710
    9080:	fb02 f203 	mul.w	r2, r2, r3
    9084:	687b      	ldr	r3, [r7, #4]
    9086:	60da      	str	r2, [r3, #12]
}
    9088:	370c      	adds	r7, #12
    908a:	46bd      	mov	sp, r7
    908c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9090:	4770      	bx	lr
    9092:	bf00      	nop

00009094 <sleep_elapsed>:

static inline int sleep_elapsed(ego_fsm_state_t *state) {
    9094:	b480      	push	{r7}
    9096:	b085      	sub	sp, #20
    9098:	af00      	add	r7, sp, #0
    909a:	6078      	str	r0, [r7, #4]
	u32 now = CLK100NS;
    909c:	4b13      	ldr	r3, [pc, #76]	; (90ec <sleep_elapsed+0x58>)
    909e:	681b      	ldr	r3, [r3, #0]
    90a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    90a4:	f640 4235 	movw	r2, #3125	; 0xc35
    90a8:	fb02 f203 	mul.w	r2, r2, r3
    90ac:	4b10      	ldr	r3, [pc, #64]	; (90f0 <sleep_elapsed+0x5c>)
    90ae:	681b      	ldr	r3, [r3, #0]
    90b0:	4413      	add	r3, r2
    90b2:	60fb      	str	r3, [r7, #12]
	if (now < state->sleep_start)
    90b4:	687b      	ldr	r3, [r7, #4]
    90b6:	689a      	ldr	r2, [r3, #8]
    90b8:	68fb      	ldr	r3, [r7, #12]
    90ba:	429a      	cmp	r2, r3
    90bc:	d905      	bls.n	90ca <sleep_elapsed+0x36>
		now += 3276800000;
    90be:	68fb      	ldr	r3, [r7, #12]
    90c0:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    90c4:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    90c8:	60fb      	str	r3, [r7, #12]
	return (now - state->sleep_start) >= state->sleep_duration;
    90ca:	687b      	ldr	r3, [r7, #4]
    90cc:	689b      	ldr	r3, [r3, #8]
    90ce:	68fa      	ldr	r2, [r7, #12]
    90d0:	1ad2      	subs	r2, r2, r3
    90d2:	687b      	ldr	r3, [r7, #4]
    90d4:	68db      	ldr	r3, [r3, #12]
    90d6:	429a      	cmp	r2, r3
    90d8:	bf2c      	ite	cs
    90da:	2301      	movcs	r3, #1
    90dc:	2300      	movcc	r3, #0
    90de:	b2db      	uxtb	r3, r3
}
    90e0:	4618      	mov	r0, r3
    90e2:	3714      	adds	r7, #20
    90e4:	46bd      	mov	sp, r7
    90e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    90ea:	4770      	bx	lr
    90ec:	10000be4 	.word	0x10000be4
    90f0:	40004008 	.word	0x40004008

000090f4 <nop_state>:

/////////////
// states

// do nothing
void nop_state(ego_fsm_state_t *state) {
    90f4:	b480      	push	{r7}
    90f6:	b083      	sub	sp, #12
    90f8:	af00      	add	r7, sp, #0
    90fa:	6078      	str	r0, [r7, #4]
}
    90fc:	370c      	adds	r7, #12
    90fe:	46bd      	mov	sp, r7
    9100:	f85d 7b04 	ldr.w	r7, [sp], #4
    9104:	4770      	bx	lr
    9106:	bf00      	nop

00009108 <init_state>:

// used in follow and jam mode, override the channel supplied by user
void init_state(ego_fsm_state_t *state) {
    9108:	b480      	push	{r7}
    910a:	b083      	sub	sp, #12
    910c:	af00      	add	r7, sp, #0
    910e:	6078      	str	r0, [r7, #4]
	state->channel_index = 0;
    9110:	687b      	ldr	r3, [r7, #4]
    9112:	2200      	movs	r2, #0
    9114:	605a      	str	r2, [r3, #4]
	channel = channels[state->channel_index];
    9116:	687b      	ldr	r3, [r7, #4]
    9118:	685b      	ldr	r3, [r3, #4]
    911a:	4a06      	ldr	r2, [pc, #24]	; (9134 <init_state+0x2c>)
    911c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    9120:	4b05      	ldr	r3, [pc, #20]	; (9138 <init_state+0x30>)
    9122:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    9124:	687b      	ldr	r3, [r7, #4]
    9126:	2201      	movs	r2, #1
    9128:	701a      	strb	r2, [r3, #0]
}
    912a:	370c      	adds	r7, #12
    912c:	46bd      	mov	sp, r7
    912e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9132:	4770      	bx	lr
    9134:	100008b0 	.word	0x100008b0
    9138:	1000049c 	.word	0x1000049c

0000913c <start_rf_state>:

void start_rf_state(ego_fsm_state_t *state) {
    913c:	b580      	push	{r7, lr}
    913e:	b082      	sub	sp, #8
    9140:	af00      	add	r7, sp, #0
    9142:	6078      	str	r0, [r7, #4]
	rf_on();
    9144:	f7ff fee8 	bl	8f18 <rf_on>
	state->state = EGO_ST_CAP;
    9148:	687b      	ldr	r3, [r7, #4]
    914a:	2202      	movs	r2, #2
    914c:	701a      	strb	r2, [r3, #0]
}
    914e:	3708      	adds	r7, #8
    9150:	46bd      	mov	sp, r7
    9152:	bd80      	pop	{r7, pc}

00009154 <cap_state>:

void cap_state(ego_fsm_state_t *state) {
    9154:	b580      	push	{r7, lr}
    9156:	b08c      	sub	sp, #48	; 0x30
    9158:	af00      	add	r7, sp, #0
    915a:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    915c:	f107 0308 	add.w	r3, r7, #8
    9160:	2200      	movs	r2, #0
    9162:	601a      	str	r2, [r3, #0]
    9164:	3304      	adds	r3, #4
    9166:	2200      	movs	r2, #0
    9168:	601a      	str	r2, [r3, #0]
    916a:	3304      	adds	r3, #4
    916c:	2200      	movs	r2, #0
    916e:	601a      	str	r2, [r3, #0]
    9170:	3304      	adds	r3, #4
    9172:	2200      	movs	r2, #0
    9174:	601a      	str	r2, [r3, #0]
    9176:	3304      	adds	r3, #4
    9178:	2200      	movs	r2, #0
    917a:	601a      	str	r2, [r3, #0]
    917c:	3304      	adds	r3, #4
    917e:	2200      	movs	r2, #0
    9180:	601a      	str	r2, [r3, #0]
    9182:	3304      	adds	r3, #4
    9184:	2200      	movs	r2, #0
    9186:	601a      	str	r2, [r3, #0]
    9188:	3304      	adds	r3, #4
    918a:	2200      	movs	r2, #0
    918c:	601a      	str	r2, [r3, #0]
    918e:	3304      	adds	r3, #4
    9190:	2200      	movs	r2, #0
    9192:	601a      	str	r2, [r3, #0]
    9194:	3304      	adds	r3, #4
    9196:	2200      	movs	r2, #0
    9198:	601a      	str	r2, [r3, #0]
    919a:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    919c:	4b23      	ldr	r3, [pc, #140]	; (922c <cap_state+0xd8>)
    919e:	681b      	ldr	r3, [r3, #0]
    91a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    91a4:	f640 4235 	movw	r2, #3125	; 0xc35
    91a8:	fb02 f203 	mul.w	r2, r2, r3
    91ac:	4b20      	ldr	r3, [pc, #128]	; (9230 <cap_state+0xdc>)
    91ae:	681b      	ldr	r3, [r3, #0]
    91b0:	4413      	add	r3, r2
	rf_on();
	state->state = EGO_ST_CAP;
}

void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    91b2:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    91b4:	6878      	ldr	r0, [r7, #4]
    91b6:	f7ff ff6d 	bl	9094 <sleep_elapsed>
    91ba:	4603      	mov	r3, r0
    91bc:	2b00      	cmp	r3, #0
    91be:	d006      	beq.n	91ce <cap_state+0x7a>
		sleep_ms(state, 4);
    91c0:	6878      	ldr	r0, [r7, #4]
    91c2:	2104      	movs	r1, #4
    91c4:	f7ff ff2e 	bl	9024 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    91c8:	687b      	ldr	r3, [r7, #4]
    91ca:	2203      	movs	r2, #3
    91cc:	701a      	strb	r2, [r3, #0]
	}

	if (sync_received()) {
    91ce:	f7ff ff1f 	bl	9010 <sync_received>
    91d2:	4603      	mov	r3, r0
    91d4:	2b00      	cmp	r3, #0
    91d6:	d019      	beq.n	920c <cap_state+0xb8>
		RXLED_SET;
    91d8:	4b16      	ldr	r3, [pc, #88]	; (9234 <cap_state+0xe0>)
    91da:	2210      	movs	r2, #16
    91dc:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    91de:	f107 0308 	add.w	r3, r7, #8
    91e2:	4618      	mov	r0, r3
    91e4:	f7ff feee 	bl	8fc4 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    91e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    91ea:	f107 0208 	add.w	r2, r7, #8
    91ee:	2006      	movs	r0, #6
    91f0:	4611      	mov	r1, r2
    91f2:	461a      	mov	r2, r3
    91f4:	f7fb fa12 	bl	461c <enqueue_with_ts>
		RXLED_CLR;
    91f8:	4b0f      	ldr	r3, [pc, #60]	; (9238 <cap_state+0xe4>)
    91fa:	2210      	movs	r2, #16
    91fc:	601a      	str	r2, [r3, #0]

		sleep_ms(state, 6);
    91fe:	6878      	ldr	r0, [r7, #4]
    9200:	2106      	movs	r1, #6
    9202:	f7ff ff0f 	bl	9024 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    9206:	687b      	ldr	r3, [r7, #4]
    9208:	2203      	movs	r2, #3
    920a:	701a      	strb	r2, [r3, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    920c:	687b      	ldr	r3, [r7, #4]
    920e:	781b      	ldrb	r3, [r3, #0]
    9210:	2b02      	cmp	r3, #2
    9212:	d007      	beq.n	9224 <cap_state+0xd0>
		cc2400_strobe(SRFOFF);
    9214:	2064      	movs	r0, #100	; 0x64
    9216:	f000 fd09 	bl	9c2c <cc2400_strobe>
		ssp_stop();
    921a:	f7ff fe4f 	bl	8ebc <ssp_stop>
		state->timer_active = 1;
    921e:	687b      	ldr	r3, [r7, #4]
    9220:	2201      	movs	r2, #1
    9222:	611a      	str	r2, [r3, #16]
	}
}
    9224:	3730      	adds	r7, #48	; 0x30
    9226:	46bd      	mov	sp, r7
    9228:	bd80      	pop	{r7, pc}
    922a:	bf00      	nop
    922c:	10000be4 	.word	0x10000be4
    9230:	40004008 	.word	0x40004008
    9234:	2009c038 	.word	0x2009c038
    9238:	2009c03c 	.word	0x2009c03c

0000923c <sleep_state>:

void sleep_state(ego_fsm_state_t *state) {
    923c:	b580      	push	{r7, lr}
    923e:	b082      	sub	sp, #8
    9240:	af00      	add	r7, sp, #0
    9242:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    9244:	6878      	ldr	r0, [r7, #4]
    9246:	f7ff ff25 	bl	9094 <sleep_elapsed>
    924a:	4603      	mov	r3, r0
    924c:	2b00      	cmp	r3, #0
    924e:	d01e      	beq.n	928e <sleep_state+0x52>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    9250:	687b      	ldr	r3, [r7, #4]
    9252:	685b      	ldr	r3, [r3, #4]
    9254:	1c5a      	adds	r2, r3, #1
    9256:	4b0f      	ldr	r3, [pc, #60]	; (9294 <sleep_state+0x58>)
    9258:	4013      	ands	r3, r2
    925a:	2b00      	cmp	r3, #0
    925c:	da03      	bge.n	9266 <sleep_state+0x2a>
    925e:	3b01      	subs	r3, #1
    9260:	f063 0303 	orn	r3, r3, #3
    9264:	3301      	adds	r3, #1
    9266:	461a      	mov	r2, r3
    9268:	687b      	ldr	r3, [r7, #4]
    926a:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    926c:	687b      	ldr	r3, [r7, #4]
    926e:	685b      	ldr	r3, [r3, #4]
    9270:	4a09      	ldr	r2, [pc, #36]	; (9298 <sleep_state+0x5c>)
    9272:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    9276:	4b09      	ldr	r3, [pc, #36]	; (929c <sleep_state+0x60>)
    9278:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    927a:	6878      	ldr	r0, [r7, #4]
    927c:	2107      	movs	r1, #7
    927e:	f7ff fed1 	bl	9024 <sleep_ms>
		state->timer_active = 1;
    9282:	687b      	ldr	r3, [r7, #4]
    9284:	2201      	movs	r2, #1
    9286:	611a      	str	r2, [r3, #16]

		state->state = EGO_ST_START_RX;
    9288:	687b      	ldr	r3, [r7, #4]
    928a:	2201      	movs	r2, #1
    928c:	701a      	strb	r2, [r3, #0]
	}
}
    928e:	3708      	adds	r7, #8
    9290:	46bd      	mov	sp, r7
    9292:	bd80      	pop	{r7, pc}
    9294:	80000003 	.word	0x80000003
    9298:	100008b0 	.word	0x100008b0
    929c:	1000049c 	.word	0x1000049c

000092a0 <continuous_init_state>:

// continuous cap states (reuses START_RX state)
void continuous_init_state(ego_fsm_state_t *state) {
    92a0:	b480      	push	{r7}
    92a2:	b083      	sub	sp, #12
    92a4:	af00      	add	r7, sp, #0
    92a6:	6078      	str	r0, [r7, #4]
	state->state = EGO_ST_START_RX;
    92a8:	687b      	ldr	r3, [r7, #4]
    92aa:	2201      	movs	r2, #1
    92ac:	701a      	strb	r2, [r3, #0]
}
    92ae:	370c      	adds	r7, #12
    92b0:	46bd      	mov	sp, r7
    92b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    92b6:	4770      	bx	lr

000092b8 <continuous_cap_state>:

void continuous_cap_state(ego_fsm_state_t *state) {
    92b8:	b580      	push	{r7, lr}
    92ba:	b08c      	sub	sp, #48	; 0x30
    92bc:	af00      	add	r7, sp, #0
    92be:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    92c0:	f107 0308 	add.w	r3, r7, #8
    92c4:	2200      	movs	r2, #0
    92c6:	601a      	str	r2, [r3, #0]
    92c8:	3304      	adds	r3, #4
    92ca:	2200      	movs	r2, #0
    92cc:	601a      	str	r2, [r3, #0]
    92ce:	3304      	adds	r3, #4
    92d0:	2200      	movs	r2, #0
    92d2:	601a      	str	r2, [r3, #0]
    92d4:	3304      	adds	r3, #4
    92d6:	2200      	movs	r2, #0
    92d8:	601a      	str	r2, [r3, #0]
    92da:	3304      	adds	r3, #4
    92dc:	2200      	movs	r2, #0
    92de:	601a      	str	r2, [r3, #0]
    92e0:	3304      	adds	r3, #4
    92e2:	2200      	movs	r2, #0
    92e4:	601a      	str	r2, [r3, #0]
    92e6:	3304      	adds	r3, #4
    92e8:	2200      	movs	r2, #0
    92ea:	601a      	str	r2, [r3, #0]
    92ec:	3304      	adds	r3, #4
    92ee:	2200      	movs	r2, #0
    92f0:	601a      	str	r2, [r3, #0]
    92f2:	3304      	adds	r3, #4
    92f4:	2200      	movs	r2, #0
    92f6:	601a      	str	r2, [r3, #0]
    92f8:	3304      	adds	r3, #4
    92fa:	2200      	movs	r2, #0
    92fc:	601a      	str	r2, [r3, #0]
    92fe:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    9300:	4b1e      	ldr	r3, [pc, #120]	; (937c <continuous_cap_state+0xc4>)
    9302:	681b      	ldr	r3, [r3, #0]
    9304:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9308:	f640 4235 	movw	r2, #3125	; 0xc35
    930c:	fb02 f203 	mul.w	r2, r2, r3
    9310:	4b1b      	ldr	r3, [pc, #108]	; (9380 <continuous_cap_state+0xc8>)
    9312:	681b      	ldr	r3, [r3, #0]
    9314:	4413      	add	r3, r2
void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    9316:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    9318:	f7ff fe7a 	bl	9010 <sync_received>
    931c:	4603      	mov	r3, r0
    931e:	2b00      	cmp	r3, #0
    9320:	d029      	beq.n	9376 <continuous_cap_state+0xbe>
		RXLED_SET;
    9322:	4b18      	ldr	r3, [pc, #96]	; (9384 <continuous_cap_state+0xcc>)
    9324:	2210      	movs	r2, #16
    9326:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    9328:	f107 0308 	add.w	r3, r7, #8
    932c:	4618      	mov	r0, r3
    932e:	f7ff fe49 	bl	8fc4 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    9332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9334:	f107 0208 	add.w	r2, r7, #8
    9338:	2006      	movs	r0, #6
    933a:	4611      	mov	r1, r2
    933c:	461a      	mov	r2, r3
    933e:	f7fb f96d 	bl	461c <enqueue_with_ts>
		RXLED_CLR;
    9342:	4b11      	ldr	r3, [pc, #68]	; (9388 <continuous_cap_state+0xd0>)
    9344:	2210      	movs	r2, #16
    9346:	601a      	str	r2, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    9348:	2061      	movs	r0, #97	; 0x61
    934a:	f000 fc6f 	bl	9c2c <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    934e:	bf00      	nop
    9350:	f000 fc62 	bl	9c18 <cc2400_status>
    9354:	4603      	mov	r3, r0
    9356:	f003 0304 	and.w	r3, r3, #4
    935a:	2b00      	cmp	r3, #0
    935c:	d0f8      	beq.n	9350 <continuous_cap_state+0x98>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    935e:	bf00      	nop
    9360:	200e      	movs	r0, #14
    9362:	f000 fb8b 	bl	9a7c <cc2400_get>
    9366:	4603      	mov	r3, r0
    9368:	f003 031f 	and.w	r3, r3, #31
    936c:	2b0f      	cmp	r3, #15
    936e:	d1f7      	bne.n	9360 <continuous_cap_state+0xa8>
		cc2400_strobe(SRX);
    9370:	2062      	movs	r0, #98	; 0x62
    9372:	f000 fc5b 	bl	9c2c <cc2400_strobe>
	}
}
    9376:	3730      	adds	r7, #48	; 0x30
    9378:	46bd      	mov	sp, r7
    937a:	bd80      	pop	{r7, pc}
    937c:	10000be4 	.word	0x10000be4
    9380:	40004008 	.word	0x40004008
    9384:	2009c038 	.word	0x2009c038
    9388:	2009c03c 	.word	0x2009c03c

0000938c <jam_cap_state>:

// jammer states
void jam_cap_state(ego_fsm_state_t *state) {
    938c:	b580      	push	{r7, lr}
    938e:	b082      	sub	sp, #8
    9390:	af00      	add	r7, sp, #0
    9392:	6078      	str	r0, [r7, #4]
	if (sync_received()) {
    9394:	f7ff fe3c 	bl	9010 <sync_received>
    9398:	4603      	mov	r3, r0
    939a:	2b00      	cmp	r3, #0
    939c:	d012      	beq.n	93c4 <jam_cap_state+0x38>
		state->state = EGO_ST_START_JAMMING;
    939e:	687b      	ldr	r3, [r7, #4]
    93a0:	2204      	movs	r2, #4
    93a2:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 1;
    93a4:	687b      	ldr	r3, [r7, #4]
    93a6:	2201      	movs	r2, #1
    93a8:	615a      	str	r2, [r3, #20]
		state->anchor = CLK100NS;
    93aa:	4b16      	ldr	r3, [pc, #88]	; (9404 <jam_cap_state+0x78>)
    93ac:	681b      	ldr	r3, [r3, #0]
    93ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
    93b2:	f640 4235 	movw	r2, #3125	; 0xc35
    93b6:	fb02 f203 	mul.w	r2, r2, r3
    93ba:	4b13      	ldr	r3, [pc, #76]	; (9408 <jam_cap_state+0x7c>)
    93bc:	681b      	ldr	r3, [r3, #0]
    93be:	441a      	add	r2, r3
    93c0:	687b      	ldr	r3, [r7, #4]
    93c2:	619a      	str	r2, [r3, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    93c4:	687b      	ldr	r3, [r7, #4]
    93c6:	691b      	ldr	r3, [r3, #16]
    93c8:	2b00      	cmp	r3, #0
    93ca:	d00f      	beq.n	93ec <jam_cap_state+0x60>
    93cc:	6878      	ldr	r0, [r7, #4]
    93ce:	f7ff fe61 	bl	9094 <sleep_elapsed>
    93d2:	4603      	mov	r3, r0
    93d4:	2b00      	cmp	r3, #0
    93d6:	d009      	beq.n	93ec <jam_cap_state+0x60>
		state->state = EGO_ST_START_JAMMING;
    93d8:	687b      	ldr	r3, [r7, #4]
    93da:	2204      	movs	r2, #4
    93dc:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 0;
    93de:	687b      	ldr	r3, [r7, #4]
    93e0:	2200      	movs	r2, #0
    93e2:	615a      	str	r2, [r3, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    93e4:	6878      	ldr	r0, [r7, #4]
    93e6:	210b      	movs	r1, #11
    93e8:	f7ff fe1c 	bl	9024 <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    93ec:	687b      	ldr	r3, [r7, #4]
    93ee:	781b      	ldrb	r3, [r3, #0]
    93f0:	2b02      	cmp	r3, #2
    93f2:	d004      	beq.n	93fe <jam_cap_state+0x72>
		cc2400_strobe(SRFOFF);
    93f4:	2064      	movs	r0, #100	; 0x64
    93f6:	f000 fc19 	bl	9c2c <cc2400_strobe>
		ssp_stop();
    93fa:	f7ff fd5f 	bl	8ebc <ssp_stop>
	}
}
    93fe:	3708      	adds	r7, #8
    9400:	46bd      	mov	sp, r7
    9402:	bd80      	pop	{r7, pc}
    9404:	10000be4 	.word	0x10000be4
    9408:	40004008 	.word	0x40004008

0000940c <start_jamming_state>:

void start_jamming_state(ego_fsm_state_t *state) {
    940c:	b580      	push	{r7, lr}
    940e:	b082      	sub	sp, #8
    9410:	af00      	add	r7, sp, #0
    9412:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    9414:	200d      	movs	r0, #13
    9416:	f647 71ff 	movw	r1, #32767	; 0x7fff
    941a:	f000 fb45 	bl	9aa8 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    941e:	2012      	movs	r0, #18
    9420:	f642 3122 	movw	r1, #11042	; 0x2b22
    9424:	f000 fb40 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    9428:	2014      	movs	r0, #20
    942a:	f243 314b 	movw	r1, #13131	; 0x334b
    942e:	f000 fb3b 	bl	9aa8 <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    9432:	2020      	movs	r0, #32
    9434:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    9438:	f000 fb36 	bl	9aa8 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    943c:	4b21      	ldr	r3, [pc, #132]	; (94c4 <start_jamming_state+0xb8>)
    943e:	881b      	ldrh	r3, [r3, #0]
    9440:	b29b      	uxth	r3, r3
    9442:	2002      	movs	r0, #2
    9444:	4619      	mov	r1, r3
    9446:	f000 fb2f 	bl	9aa8 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    944a:	2003      	movs	r0, #3
    944c:	2126      	movs	r1, #38	; 0x26
    944e:	f000 fb2b 	bl	9aa8 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    9452:	2021      	movs	r0, #33	; 0x21
    9454:	2103      	movs	r1, #3
    9456:	f000 fb27 	bl	9aa8 <cc2400_set>
	cc2400_set(FREND, 0xf);
    945a:	2005      	movs	r0, #5
    945c:	210f      	movs	r1, #15
    945e:	f000 fb23 	bl	9aa8 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    9462:	bf00      	nop
    9464:	f000 fbd8 	bl	9c18 <cc2400_status>
    9468:	4603      	mov	r3, r0
    946a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    946e:	2b00      	cmp	r3, #0
    9470:	d0f8      	beq.n	9464 <start_jamming_state+0x58>

	cc2400_strobe(SFSON);
    9472:	2061      	movs	r0, #97	; 0x61
    9474:	f000 fbda 	bl	9c2c <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    9478:	bf00      	nop
    947a:	f000 fbcd 	bl	9c18 <cc2400_status>
    947e:	4603      	mov	r3, r0
    9480:	f003 0304 	and.w	r3, r3, #4
    9484:	2b00      	cmp	r3, #0
    9486:	d0f8      	beq.n	947a <start_jamming_state+0x6e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9488:	bf00      	nop
    948a:	200e      	movs	r0, #14
    948c:	f000 faf6 	bl	9a7c <cc2400_get>
    9490:	4603      	mov	r3, r0
    9492:	f003 031f 	and.w	r3, r3, #31
    9496:	2b0f      	cmp	r3, #15
    9498:	d1f7      	bne.n	948a <start_jamming_state+0x7e>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    949a:	4b0b      	ldr	r3, [pc, #44]	; (94c8 <start_jamming_state+0xbc>)
    949c:	2280      	movs	r2, #128	; 0x80
    949e:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    94a0:	2063      	movs	r0, #99	; 0x63
    94a2:	f000 fbc3 	bl	9c2c <cc2400_strobe>
	TXLED_SET;
    94a6:	4b09      	ldr	r3, [pc, #36]	; (94cc <start_jamming_state+0xc0>)
    94a8:	f44f 7280 	mov.w	r2, #256	; 0x100
    94ac:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    94ae:	687b      	ldr	r3, [r7, #4]
    94b0:	2205      	movs	r2, #5
    94b2:	701a      	strb	r2, [r3, #0]
	sleep_ms_anchor(state, 2);
    94b4:	6878      	ldr	r0, [r7, #4]
    94b6:	2102      	movs	r1, #2
    94b8:	f7ff fdd6 	bl	9068 <sleep_ms_anchor>
}
    94bc:	3708      	adds	r7, #8
    94be:	46bd      	mov	sp, r7
    94c0:	bd80      	pop	{r7, pc}
    94c2:	bf00      	nop
    94c4:	1000049c 	.word	0x1000049c
    94c8:	2009c058 	.word	0x2009c058
    94cc:	2009c038 	.word	0x2009c038

000094d0 <jamming_state>:

void jamming_state(ego_fsm_state_t *state) {
    94d0:	b580      	push	{r7, lr}
    94d2:	b082      	sub	sp, #8
    94d4:	af00      	add	r7, sp, #0
    94d6:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    94d8:	6878      	ldr	r0, [r7, #4]
    94da:	f7ff fddb 	bl	9094 <sleep_elapsed>
    94de:	4603      	mov	r3, r0
    94e0:	2b00      	cmp	r3, #0
    94e2:	d025      	beq.n	9530 <jamming_state+0x60>
		cc2400_strobe(SRFOFF);
    94e4:	2064      	movs	r0, #100	; 0x64
    94e6:	f000 fba1 	bl	9c2c <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    94ea:	4b13      	ldr	r3, [pc, #76]	; (9538 <jamming_state+0x68>)
    94ec:	2280      	movs	r2, #128	; 0x80
    94ee:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    94f0:	4b12      	ldr	r3, [pc, #72]	; (953c <jamming_state+0x6c>)
    94f2:	f44f 7280 	mov.w	r2, #256	; 0x100
    94f6:	601a      	str	r2, [r3, #0]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    94f8:	687b      	ldr	r3, [r7, #4]
    94fa:	685b      	ldr	r3, [r3, #4]
    94fc:	1c5a      	adds	r2, r3, #1
    94fe:	4b10      	ldr	r3, [pc, #64]	; (9540 <jamming_state+0x70>)
    9500:	4013      	ands	r3, r2
    9502:	2b00      	cmp	r3, #0
    9504:	da03      	bge.n	950e <jamming_state+0x3e>
    9506:	3b01      	subs	r3, #1
    9508:	f063 0303 	orn	r3, r3, #3
    950c:	3301      	adds	r3, #1
    950e:	461a      	mov	r2, r3
    9510:	687b      	ldr	r3, [r7, #4]
    9512:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    9514:	687b      	ldr	r3, [r7, #4]
    9516:	685b      	ldr	r3, [r3, #4]
    9518:	4a0a      	ldr	r2, [pc, #40]	; (9544 <jamming_state+0x74>)
    951a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    951e:	4b0a      	ldr	r3, [pc, #40]	; (9548 <jamming_state+0x78>)
    9520:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    9522:	687b      	ldr	r3, [r7, #4]
    9524:	2203      	movs	r2, #3
    9526:	701a      	strb	r2, [r3, #0]
		sleep_ms_anchor(state, 6);
    9528:	6878      	ldr	r0, [r7, #4]
    952a:	2106      	movs	r1, #6
    952c:	f7ff fd9c 	bl	9068 <sleep_ms_anchor>
	}
}
    9530:	3708      	adds	r7, #8
    9532:	46bd      	mov	sp, r7
    9534:	bd80      	pop	{r7, pc}
    9536:	bf00      	nop
    9538:	2009c05c 	.word	0x2009c05c
    953c:	2009c03c 	.word	0x2009c03c
    9540:	80000003 	.word	0x80000003
    9544:	100008b0 	.word	0x100008b0
    9548:	1000049c 	.word	0x1000049c

0000954c <jam_sleep_state>:

void jam_sleep_state(ego_fsm_state_t *state) {
    954c:	b580      	push	{r7, lr}
    954e:	b082      	sub	sp, #8
    9550:	af00      	add	r7, sp, #0
    9552:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    9554:	6878      	ldr	r0, [r7, #4]
    9556:	f7ff fd9d 	bl	9094 <sleep_elapsed>
    955a:	4603      	mov	r3, r0
    955c:	2b00      	cmp	r3, #0
    955e:	d009      	beq.n	9574 <jam_sleep_state+0x28>
		state->state = EGO_ST_START_RX;
    9560:	687b      	ldr	r3, [r7, #4]
    9562:	2201      	movs	r2, #1
    9564:	701a      	strb	r2, [r3, #0]
		state->timer_active = 1;
    9566:	687b      	ldr	r3, [r7, #4]
    9568:	2201      	movs	r2, #1
    956a:	611a      	str	r2, [r3, #16]
		sleep_ms_anchor(state, 11);
    956c:	6878      	ldr	r0, [r7, #4]
    956e:	210b      	movs	r1, #11
    9570:	f7ff fd7a 	bl	9068 <sleep_ms_anchor>
	}
}
    9574:	3708      	adds	r7, #8
    9576:	46bd      	mov	sp, r7
    9578:	bd80      	pop	{r7, pc}
    957a:	bf00      	nop

0000957c <ego_main>:

void ego_main(ego_mode_t mode) {
    957c:	b5b0      	push	{r4, r5, r7, lr}
    957e:	b09e      	sub	sp, #120	; 0x78
    9580:	af00      	add	r7, sp, #0
    9582:	4603      	mov	r3, r0
    9584:	71fb      	strb	r3, [r7, #7]
	ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    9586:	f107 0358 	add.w	r3, r7, #88	; 0x58
    958a:	2200      	movs	r2, #0
    958c:	601a      	str	r2, [r3, #0]
    958e:	3304      	adds	r3, #4
    9590:	2200      	movs	r2, #0
    9592:	601a      	str	r2, [r3, #0]
    9594:	3304      	adds	r3, #4
    9596:	2200      	movs	r2, #0
    9598:	601a      	str	r2, [r3, #0]
    959a:	3304      	adds	r3, #4
    959c:	2200      	movs	r2, #0
    959e:	601a      	str	r2, [r3, #0]
    95a0:	3304      	adds	r3, #4
    95a2:	2200      	movs	r2, #0
    95a4:	601a      	str	r2, [r3, #0]
    95a6:	3304      	adds	r3, #4
    95a8:	2200      	movs	r2, #0
    95aa:	601a      	str	r2, [r3, #0]
    95ac:	3304      	adds	r3, #4
    95ae:	2200      	movs	r2, #0
    95b0:	601a      	str	r2, [r3, #0]
    95b2:	3304      	adds	r3, #4
		.channel_index = 0,
		.timer_active = 0,
	};

	// hopping connection following
	ego_st_handler follow_handler[] = {
    95b4:	4b26      	ldr	r3, [pc, #152]	; (9650 <ego_main+0xd4>)
    95b6:	f107 043c 	add.w	r4, r7, #60	; 0x3c
    95ba:	461d      	mov	r5, r3
    95bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    95be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    95c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    95c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		nop_state,
		nop_state,
	};

	// continuous rx on a single channel
	ego_st_handler continuous_rx_handler[] = {
    95c8:	4b22      	ldr	r3, [pc, #136]	; (9654 <ego_main+0xd8>)
    95ca:	f107 0424 	add.w	r4, r7, #36	; 0x24
    95ce:	461d      	mov	r5, r3
    95d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    95d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    95d4:	e895 0003 	ldmia.w	r5, {r0, r1}
    95d8:	e884 0003 	stmia.w	r4, {r0, r1}
		nop_state,
		nop_state,
	};

	// jamming
	ego_st_handler jam_handler[] = {
    95dc:	4b1e      	ldr	r3, [pc, #120]	; (9658 <ego_main+0xdc>)
    95de:	f107 040c 	add.w	r4, r7, #12
    95e2:	461d      	mov	r5, r3
    95e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    95e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    95e8:	e895 0003 	ldmia.w	r5, {r0, r1}
    95ec:	e884 0003 	stmia.w	r4, {r0, r1}
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    95f0:	79fb      	ldrb	r3, [r7, #7]
    95f2:	2b01      	cmp	r3, #1
    95f4:	d007      	beq.n	9606 <ego_main+0x8a>
    95f6:	2b02      	cmp	r3, #2
    95f8:	d009      	beq.n	960e <ego_main+0x92>
    95fa:	2b00      	cmp	r3, #0
    95fc:	d10b      	bne.n	9616 <ego_main+0x9a>
		case EGO_FOLLOW:
			handler = follow_handler;
    95fe:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    9602:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9604:	e00b      	b.n	961e <ego_main+0xa2>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    9606:	f107 0324 	add.w	r3, r7, #36	; 0x24
    960a:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    960c:	e007      	b.n	961e <ego_main+0xa2>
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    960e:	f107 030c 	add.w	r3, r7, #12
    9612:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9614:	e003      	b.n	961e <ego_main+0xa2>
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    9616:	4b11      	ldr	r3, [pc, #68]	; (965c <ego_main+0xe0>)
    9618:	2200      	movs	r2, #0
    961a:	701a      	strb	r2, [r3, #0]
    961c:	e015      	b.n	964a <ego_main+0xce>
			return;
	}

	ego_init();
    961e:	f7ff fc61 	bl	8ee4 <ego_init>

	while (1) {
		if (requested_mode != MODE_EGO)
    9622:	4b0e      	ldr	r3, [pc, #56]	; (965c <ego_main+0xe0>)
    9624:	781b      	ldrb	r3, [r3, #0]
    9626:	b2db      	uxtb	r3, r3
    9628:	2b0d      	cmp	r3, #13
    962a:	d003      	beq.n	9634 <ego_main+0xb8>
			break;
    962c:	bf00      	nop
		handler[state.state](&state);
	}

	ego_deinit();
    962e:	f7ff fc65 	bl	8efc <ego_deinit>
    9632:	e00a      	b.n	964a <ego_main+0xce>
	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
			break;
		handler[state.state](&state);
    9634:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    9638:	009b      	lsls	r3, r3, #2
    963a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    963c:	4413      	add	r3, r2
    963e:	681b      	ldr	r3, [r3, #0]
    9640:	f107 0258 	add.w	r2, r7, #88	; 0x58
    9644:	4610      	mov	r0, r2
    9646:	4798      	blx	r3
	}
    9648:	e7eb      	b.n	9622 <ego_main+0xa6>

	ego_deinit();
}
    964a:	3778      	adds	r7, #120	; 0x78
    964c:	46bd      	mov	sp, r7
    964e:	bdb0      	pop	{r4, r5, r7, pc}
    9650:	0000c1a0 	.word	0x0000c1a0
    9654:	0000c1bc 	.word	0x0000c1bc
    9658:	0000c1d4 	.word	0x0000c1d4
    965c:	10000a3f 	.word	0x10000a3f

00009660 <USB_IRQHandler>:
	
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
    9660:	b580      	push	{r7, lr}
    9662:	af00      	add	r7, sp, #0
	USBHwISR();
    9664:	f000 ffb6 	bl	a5d4 <USBHwISR>
}
    9668:	bd80      	pop	{r7, pc}
    966a:	bf00      	nop

0000966c <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    966c:	b580      	push	{r7, lr}
    966e:	b082      	sub	sp, #8
    9670:	af00      	add	r7, sp, #0
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
    9672:	4b12      	ldr	r3, [pc, #72]	; (96bc <Reset_Handler+0x50>)
    9674:	607b      	str	r3, [r7, #4]
	for(dest = &_data; dest < &_edata; )
    9676:	4b12      	ldr	r3, [pc, #72]	; (96c0 <Reset_Handler+0x54>)
    9678:	603b      	str	r3, [r7, #0]
    967a:	e007      	b.n	968c <Reset_Handler+0x20>
	{
		*dest++ = *src++;
    967c:	683b      	ldr	r3, [r7, #0]
    967e:	1d1a      	adds	r2, r3, #4
    9680:	603a      	str	r2, [r7, #0]
    9682:	687a      	ldr	r2, [r7, #4]
    9684:	1d11      	adds	r1, r2, #4
    9686:	6079      	str	r1, [r7, #4]
    9688:	6812      	ldr	r2, [r2, #0]
    968a:	601a      	str	r2, [r3, #0]
{
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    968c:	683b      	ldr	r3, [r7, #0]
    968e:	4a0d      	ldr	r2, [pc, #52]	; (96c4 <Reset_Handler+0x58>)
    9690:	4293      	cmp	r3, r2
    9692:	d3f3      	bcc.n	967c <Reset_Handler+0x10>
	{
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
    9694:	4b0c      	ldr	r3, [pc, #48]	; (96c8 <Reset_Handler+0x5c>)
    9696:	607b      	str	r3, [r7, #4]
	while (src < &_ebss)
    9698:	e004      	b.n	96a4 <Reset_Handler+0x38>
	{
		*src++ = 0;
    969a:	687b      	ldr	r3, [r7, #4]
    969c:	1d1a      	adds	r2, r3, #4
    969e:	607a      	str	r2, [r7, #4]
    96a0:	2200      	movs	r2, #0
    96a2:	601a      	str	r2, [r3, #0]
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    96a4:	687b      	ldr	r3, [r7, #4]
    96a6:	4a09      	ldr	r2, [pc, #36]	; (96cc <Reset_Handler+0x60>)
    96a8:	4293      	cmp	r3, r2
    96aa:	d3f6      	bcc.n	969a <Reset_Handler+0x2e>
	{
		*src++ = 0;
	}

    __libc_init_array();
    96ac:	f7fa fd3c 	bl	4128 <__libc_init_array>
    
    // Set the vector table location.
    SCB_VTOR = &_interrupt_vector_table;
    96b0:	4b07      	ldr	r3, [pc, #28]	; (96d0 <Reset_Handler+0x64>)
    96b2:	4a08      	ldr	r2, [pc, #32]	; (96d4 <Reset_Handler+0x68>)
    96b4:	601a      	str	r2, [r3, #0]
    
	main();
    96b6:	f7fe fba5 	bl	7e04 <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    96ba:	e7fe      	b.n	96ba <Reset_Handler+0x4e>
    96bc:	0000c238 	.word	0x0000c238
    96c0:	10000020 	.word	0x10000020
    96c4:	1000095e 	.word	0x1000095e
    96c8:	10000960 	.word	0x10000960
    96cc:	10003288 	.word	0x10003288
    96d0:	e000ed08 	.word	0xe000ed08
    96d4:	00004000 	.word	0x00004000

000096d8 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    96d8:	b480      	push	{r7}
    96da:	af00      	add	r7, sp, #0
    96dc:	e7fe      	b.n	96dc <ADC_IRQHandler+0x4>
    96de:	bf00      	nop

000096e0 <wait>:
 */

#include "ubertooth.h"
/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
    96e0:	b580      	push	{r7, lr}
    96e2:	b082      	sub	sp, #8
    96e4:	af00      	add	r7, sp, #0
    96e6:	4603      	mov	r3, r0
    96e8:	71fb      	strb	r3, [r7, #7]
	wait_us(seconds * 1000000);
    96ea:	79fb      	ldrb	r3, [r7, #7]
    96ec:	4a04      	ldr	r2, [pc, #16]	; (9700 <wait+0x20>)
    96ee:	fb02 f303 	mul.w	r3, r2, r3
    96f2:	4618      	mov	r0, r3
    96f4:	f000 f818 	bl	9728 <wait_us>
}
    96f8:	3708      	adds	r7, #8
    96fa:	46bd      	mov	sp, r7
    96fc:	bd80      	pop	{r7, pc}
    96fe:	bf00      	nop
    9700:	000f4240 	.word	0x000f4240

00009704 <rbit>:
{
	wait_us(ms * 1000);
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
    9704:	b480      	push	{r7}
    9706:	b085      	sub	sp, #20
    9708:	af00      	add	r7, sp, #0
    970a:	6078      	str	r0, [r7, #4]
  u32 result = 0;
    970c:	2300      	movs	r3, #0
    970e:	60fb      	str	r3, [r7, #12]
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    9710:	687b      	ldr	r3, [r7, #4]
    9712:	fa93 f3a3 	rbit	r3, r3
    9716:	60fb      	str	r3, [r7, #12]
  return result;
    9718:	68fb      	ldr	r3, [r7, #12]
}
    971a:	4618      	mov	r0, r3
    971c:	3714      	adds	r7, #20
    971e:	46bd      	mov	sp, r7
    9720:	f85d 7b04 	ldr.w	r7, [sp], #4
    9724:	4770      	bx	lr
    9726:	bf00      	nop

00009728 <wait_us>:

/* delay a number of microseconds while on internal oscillator (4 MHz) */
/* we only have a resolution of 1000/400, so to the nearest 2.5        */
static volatile u32 wait_us_counter;
void wait_us(u32 us)
{
    9728:	b480      	push	{r7}
    972a:	b083      	sub	sp, #12
    972c:	af00      	add	r7, sp, #0
    972e:	6078      	str	r0, [r7, #4]
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    9730:	687b      	ldr	r3, [r7, #4]
    9732:	089a      	lsrs	r2, r3, #2
    9734:	687b      	ldr	r3, [r7, #4]
    9736:	08db      	lsrs	r3, r3, #3
    9738:	441a      	add	r2, r3
    973a:	687b      	ldr	r3, [r7, #4]
    973c:	099b      	lsrs	r3, r3, #6
    973e:	441a      	add	r2, r3
    9740:	687b      	ldr	r3, [r7, #4]
    9742:	09db      	lsrs	r3, r3, #7
    9744:	441a      	add	r2, r3
    9746:	687b      	ldr	r3, [r7, #4]
    9748:	0a9b      	lsrs	r3, r3, #10
    974a:	441a      	add	r2, r3
    974c:	687b      	ldr	r3, [r7, #4]
    974e:	0adb      	lsrs	r3, r3, #11
    9750:	4413      	add	r3, r2
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    9752:	4a07      	ldr	r2, [pc, #28]	; (9770 <wait_us+0x48>)
    9754:	6013      	str	r3, [r2, #0]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    9756:	bf00      	nop
    9758:	4b05      	ldr	r3, [pc, #20]	; (9770 <wait_us+0x48>)
    975a:	681b      	ldr	r3, [r3, #0]
    975c:	3b01      	subs	r3, #1
    975e:	4a04      	ldr	r2, [pc, #16]	; (9770 <wait_us+0x48>)
    9760:	6013      	str	r3, [r2, #0]
    9762:	2b00      	cmp	r3, #0
    9764:	d1f8      	bne.n	9758 <wait_us+0x30>
}
    9766:	370c      	adds	r7, #12
    9768:	46bd      	mov	sp, r7
    976a:	f85d 7b04 	ldr.w	r7, [sp], #4
    976e:	4770      	bx	lr
    9770:	10000a68 	.word	0x10000a68

00009774 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    9774:	b580      	push	{r7, lr}
    9776:	af00      	add	r7, sp, #0
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    9778:	f000 f836 	bl	97e8 <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    977c:	4b10      	ldr	r3, [pc, #64]	; (97c0 <gpio_init+0x4c>)
    977e:	2200      	movs	r2, #0
    9780:	601a      	str	r2, [r3, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    9782:	4b10      	ldr	r3, [pc, #64]	; (97c4 <gpio_init+0x50>)
    9784:	f24c 7212 	movw	r2, #50962	; 0xc712
    9788:	601a      	str	r2, [r3, #0]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    978a:	4b0f      	ldr	r3, [pc, #60]	; (97c8 <gpio_init+0x54>)
    978c:	f240 12b1 	movw	r2, #433	; 0x1b1
    9790:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    9792:	4b0e      	ldr	r3, [pc, #56]	; (97cc <gpio_init+0x58>)
    9794:	2200      	movs	r2, #0
    9796:	601a      	str	r2, [r3, #0]
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    9798:	4b0d      	ldr	r3, [pc, #52]	; (97d0 <gpio_init+0x5c>)
    979a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    979e:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    97a0:	4b0c      	ldr	r3, [pc, #48]	; (97d4 <gpio_init+0x60>)
    97a2:	2200      	movs	r2, #0
    97a4:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    97a6:	4b0c      	ldr	r3, [pc, #48]	; (97d8 <gpio_init+0x64>)
    97a8:	2200      	movs	r2, #0
    97aa:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    97ac:	4b0b      	ldr	r3, [pc, #44]	; (97dc <gpio_init+0x68>)
    97ae:	2200      	movs	r2, #0
    97b0:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    97b2:	4b0b      	ldr	r3, [pc, #44]	; (97e0 <gpio_init+0x6c>)
    97b4:	2200      	movs	r2, #0
    97b6:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    97b8:	4b0a      	ldr	r3, [pc, #40]	; (97e4 <gpio_init+0x70>)
    97ba:	2200      	movs	r2, #0
    97bc:	601a      	str	r2, [r3, #0]

#ifdef TC13BADGE
	/* R8C_CTL is active low */
	R8C_CTL_SET;
#endif
}
    97be:	bd80      	pop	{r7, pc}
    97c0:	2009c000 	.word	0x2009c000
    97c4:	2009c020 	.word	0x2009c020
    97c8:	2009c040 	.word	0x2009c040
    97cc:	2009c060 	.word	0x2009c060
    97d0:	2009c080 	.word	0x2009c080
    97d4:	2009c014 	.word	0x2009c014
    97d8:	2009c034 	.word	0x2009c034
    97dc:	2009c054 	.word	0x2009c054
    97e0:	2009c074 	.word	0x2009c074
    97e4:	2009c094 	.word	0x2009c094

000097e8 <all_pins_off>:

void all_pins_off(void)
{
    97e8:	b480      	push	{r7}
    97ea:	af00      	add	r7, sp, #0
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    97ec:	4b27      	ldr	r3, [pc, #156]	; (988c <all_pins_off+0xa4>)
    97ee:	2200      	movs	r2, #0
    97f0:	601a      	str	r2, [r3, #0]
	PINSEL1 = 0;
    97f2:	4b27      	ldr	r3, [pc, #156]	; (9890 <all_pins_off+0xa8>)
    97f4:	2200      	movs	r2, #0
    97f6:	601a      	str	r2, [r3, #0]
	PINSEL2 = 0;
    97f8:	4b26      	ldr	r3, [pc, #152]	; (9894 <all_pins_off+0xac>)
    97fa:	2200      	movs	r2, #0
    97fc:	601a      	str	r2, [r3, #0]
	PINSEL3 = 0;
    97fe:	4b26      	ldr	r3, [pc, #152]	; (9898 <all_pins_off+0xb0>)
    9800:	2200      	movs	r2, #0
    9802:	601a      	str	r2, [r3, #0]
	PINSEL4 = 0;
    9804:	4b25      	ldr	r3, [pc, #148]	; (989c <all_pins_off+0xb4>)
    9806:	2200      	movs	r2, #0
    9808:	601a      	str	r2, [r3, #0]
	PINSEL7 = 0;
    980a:	4b25      	ldr	r3, [pc, #148]	; (98a0 <all_pins_off+0xb8>)
    980c:	2200      	movs	r2, #0
    980e:	601a      	str	r2, [r3, #0]
	PINSEL9 = 0;
    9810:	4b24      	ldr	r3, [pc, #144]	; (98a4 <all_pins_off+0xbc>)
    9812:	2200      	movs	r2, #0
    9814:	601a      	str	r2, [r3, #0]
	PINSEL10 = 0;
    9816:	4b24      	ldr	r3, [pc, #144]	; (98a8 <all_pins_off+0xc0>)
    9818:	2200      	movs	r2, #0
    981a:	601a      	str	r2, [r3, #0]

	/* configure all pins as inputs */
	FIO0DIR = 0;
    981c:	4b23      	ldr	r3, [pc, #140]	; (98ac <all_pins_off+0xc4>)
    981e:	2200      	movs	r2, #0
    9820:	601a      	str	r2, [r3, #0]
	FIO1DIR = 0;
    9822:	4b23      	ldr	r3, [pc, #140]	; (98b0 <all_pins_off+0xc8>)
    9824:	2200      	movs	r2, #0
    9826:	601a      	str	r2, [r3, #0]
	FIO2DIR = 0;
    9828:	4b22      	ldr	r3, [pc, #136]	; (98b4 <all_pins_off+0xcc>)
    982a:	2200      	movs	r2, #0
    982c:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    982e:	4b22      	ldr	r3, [pc, #136]	; (98b8 <all_pins_off+0xd0>)
    9830:	2200      	movs	r2, #0
    9832:	601a      	str	r2, [r3, #0]
	FIO4DIR = 0;
    9834:	4b21      	ldr	r3, [pc, #132]	; (98bc <all_pins_off+0xd4>)
    9836:	2200      	movs	r2, #0
    9838:	601a      	str	r2, [r3, #0]

	/* pull-up on every pin */
	PINMODE0 = 0;
    983a:	4b21      	ldr	r3, [pc, #132]	; (98c0 <all_pins_off+0xd8>)
    983c:	2200      	movs	r2, #0
    983e:	601a      	str	r2, [r3, #0]
	PINMODE1 = 0;
    9840:	4b20      	ldr	r3, [pc, #128]	; (98c4 <all_pins_off+0xdc>)
    9842:	2200      	movs	r2, #0
    9844:	601a      	str	r2, [r3, #0]
	PINMODE2 = 0;
    9846:	4b20      	ldr	r3, [pc, #128]	; (98c8 <all_pins_off+0xe0>)
    9848:	2200      	movs	r2, #0
    984a:	601a      	str	r2, [r3, #0]
	PINMODE3 = 0;
    984c:	4b1f      	ldr	r3, [pc, #124]	; (98cc <all_pins_off+0xe4>)
    984e:	2200      	movs	r2, #0
    9850:	601a      	str	r2, [r3, #0]
	PINMODE4 = 0;
    9852:	4b1f      	ldr	r3, [pc, #124]	; (98d0 <all_pins_off+0xe8>)
    9854:	2200      	movs	r2, #0
    9856:	601a      	str	r2, [r3, #0]
	PINMODE7 = 0;
    9858:	4b1e      	ldr	r3, [pc, #120]	; (98d4 <all_pins_off+0xec>)
    985a:	2200      	movs	r2, #0
    985c:	601a      	str	r2, [r3, #0]
	PINMODE9 = 0;
    985e:	4b1e      	ldr	r3, [pc, #120]	; (98d8 <all_pins_off+0xf0>)
    9860:	2200      	movs	r2, #0
    9862:	601a      	str	r2, [r3, #0]

	/* set all outputs low */
	FIO0PIN = 0;
    9864:	4b1d      	ldr	r3, [pc, #116]	; (98dc <all_pins_off+0xf4>)
    9866:	2200      	movs	r2, #0
    9868:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    986a:	4b1d      	ldr	r3, [pc, #116]	; (98e0 <all_pins_off+0xf8>)
    986c:	2200      	movs	r2, #0
    986e:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    9870:	4b1c      	ldr	r3, [pc, #112]	; (98e4 <all_pins_off+0xfc>)
    9872:	2200      	movs	r2, #0
    9874:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    9876:	4b1c      	ldr	r3, [pc, #112]	; (98e8 <all_pins_off+0x100>)
    9878:	2200      	movs	r2, #0
    987a:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    987c:	4b1b      	ldr	r3, [pc, #108]	; (98ec <all_pins_off+0x104>)
    987e:	2200      	movs	r2, #0
    9880:	601a      	str	r2, [r3, #0]
}
    9882:	46bd      	mov	sp, r7
    9884:	f85d 7b04 	ldr.w	r7, [sp], #4
    9888:	4770      	bx	lr
    988a:	bf00      	nop
    988c:	4002c000 	.word	0x4002c000
    9890:	4002c004 	.word	0x4002c004
    9894:	4002c008 	.word	0x4002c008
    9898:	4002c00c 	.word	0x4002c00c
    989c:	4002c010 	.word	0x4002c010
    98a0:	4002c01c 	.word	0x4002c01c
    98a4:	4002c024 	.word	0x4002c024
    98a8:	4002c028 	.word	0x4002c028
    98ac:	2009c000 	.word	0x2009c000
    98b0:	2009c020 	.word	0x2009c020
    98b4:	2009c040 	.word	0x2009c040
    98b8:	2009c060 	.word	0x2009c060
    98bc:	2009c080 	.word	0x2009c080
    98c0:	4002c040 	.word	0x4002c040
    98c4:	4002c044 	.word	0x4002c044
    98c8:	4002c048 	.word	0x4002c048
    98cc:	4002c04c 	.word	0x4002c04c
    98d0:	4002c050 	.word	0x4002c050
    98d4:	4002c05c 	.word	0x4002c05c
    98d8:	4002c064 	.word	0x4002c064
    98dc:	2009c014 	.word	0x2009c014
    98e0:	2009c034 	.word	0x2009c034
    98e4:	2009c054 	.word	0x2009c054
    98e8:	2009c074 	.word	0x2009c074
    98ec:	2009c094 	.word	0x2009c094

000098f0 <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    98f0:	b580      	push	{r7, lr}
    98f2:	af00      	add	r7, sp, #0
	gpio_init();
    98f4:	f7ff ff3e 	bl	9774 <gpio_init>
	cc2400_init();
    98f8:	f000 f860 	bl	99bc <cc2400_init>
	clock_start();
    98fc:	f000 f9c2 	bl	9c84 <clock_start>
}
    9900:	bd80      	pop	{r7, pc}
    9902:	bf00      	nop

00009904 <dio_ssp_init>:

/* configure SSP for CC2400's secondary serial data interface */
void dio_ssp_init()
{
    9904:	b480      	push	{r7}
    9906:	af00      	add	r7, sp, #0
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    9908:	4a16      	ldr	r2, [pc, #88]	; (9964 <dio_ssp_init+0x60>)
    990a:	4b16      	ldr	r3, [pc, #88]	; (9964 <dio_ssp_init+0x60>)
    990c:	681b      	ldr	r3, [r3, #0]
    990e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    9912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9916:	6013      	str	r3, [r2, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    9918:	4a12      	ldr	r2, [pc, #72]	; (9964 <dio_ssp_init+0x60>)
    991a:	4b12      	ldr	r3, [pc, #72]	; (9964 <dio_ssp_init+0x60>)
    991c:	681b      	ldr	r3, [r3, #0]
    991e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    9922:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    9926:	6013      	str	r3, [r2, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    9928:	4a0e      	ldr	r2, [pc, #56]	; (9964 <dio_ssp_init+0x60>)
    992a:	4b0e      	ldr	r3, [pc, #56]	; (9964 <dio_ssp_init+0x60>)
    992c:	681b      	ldr	r3, [r3, #0]
    992e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    9932:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9936:	6013      	str	r3, [r2, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    9938:	4a0a      	ldr	r2, [pc, #40]	; (9964 <dio_ssp_init+0x60>)
    993a:	4b0a      	ldr	r3, [pc, #40]	; (9964 <dio_ssp_init+0x60>)
    993c:	681b      	ldr	r3, [r3, #0]
    993e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    9942:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    9946:	6013      	str	r3, [r2, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    9948:	4b07      	ldr	r3, [pc, #28]	; (9968 <dio_ssp_init+0x64>)
    994a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    994e:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    9950:	4b06      	ldr	r3, [pc, #24]	; (996c <dio_ssp_init+0x68>)
    9952:	22c7      	movs	r2, #199	; 0xc7
    9954:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    9956:	4b06      	ldr	r3, [pc, #24]	; (9970 <dio_ssp_init+0x6c>)
    9958:	220c      	movs	r2, #12
    995a:	601a      	str	r2, [r3, #0]
}
    995c:	46bd      	mov	sp, r7
    995e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9962:	4770      	bx	lr
    9964:	4002c000 	.word	0x4002c000
    9968:	2009c098 	.word	0x2009c098
    996c:	40030000 	.word	0x40030000
    9970:	40030004 	.word	0x40030004

00009974 <atest_init>:

void atest_init()
{
    9974:	b480      	push	{r7}
    9976:	af00      	add	r7, sp, #0
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    9978:	4a0d      	ldr	r2, [pc, #52]	; (99b0 <atest_init+0x3c>)
    997a:	4b0d      	ldr	r3, [pc, #52]	; (99b0 <atest_init+0x3c>)
    997c:	681b      	ldr	r3, [r3, #0]
    997e:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    9982:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    9984:	4a0b      	ldr	r2, [pc, #44]	; (99b4 <atest_init+0x40>)
    9986:	4b0b      	ldr	r3, [pc, #44]	; (99b4 <atest_init+0x40>)
    9988:	681b      	ldr	r3, [r3, #0]
    998a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    998e:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    9990:	4a09      	ldr	r2, [pc, #36]	; (99b8 <atest_init+0x44>)
    9992:	4b09      	ldr	r3, [pc, #36]	; (99b8 <atest_init+0x44>)
    9994:	681b      	ldr	r3, [r3, #0]
    9996:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
    999a:	6013      	str	r3, [r2, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    999c:	4a06      	ldr	r2, [pc, #24]	; (99b8 <atest_init+0x44>)
    999e:	4b06      	ldr	r3, [pc, #24]	; (99b8 <atest_init+0x44>)
    99a0:	681b      	ldr	r3, [r3, #0]
    99a2:	f423 13a0 	bic.w	r3, r3, #1310720	; 0x140000
    99a6:	6013      	str	r3, [r2, #0]
}
    99a8:	46bd      	mov	sp, r7
    99aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    99ae:	4770      	bx	lr
    99b0:	4002c004 	.word	0x4002c004
    99b4:	2009c000 	.word	0x2009c000
    99b8:	4002c044 	.word	0x4002c044

000099bc <cc2400_init>:

void cc2400_init()
{
    99bc:	b580      	push	{r7, lr}
    99be:	af00      	add	r7, sp, #0
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    99c0:	f7ff ffd8 	bl	9974 <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    99c4:	4b09      	ldr	r3, [pc, #36]	; (99ec <cc2400_init+0x30>)
    99c6:	f44f 7200 	mov.w	r2, #512	; 0x200
    99ca:	601a      	str	r2, [r3, #0]
	wait_us(50);
    99cc:	2032      	movs	r0, #50	; 0x32
    99ce:	f7ff feab 	bl	9728 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    99d2:	4b07      	ldr	r3, [pc, #28]	; (99f0 <cc2400_init+0x34>)
    99d4:	2220      	movs	r2, #32
    99d6:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    99d8:	4b04      	ldr	r3, [pc, #16]	; (99ec <cc2400_init+0x30>)
    99da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    99de:	601a      	str	r2, [r3, #0]

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
    99e0:	200d      	movs	r0, #13
    99e2:	f647 71ff 	movw	r1, #32767	; 0x7fff
    99e6:	f000 f85f 	bl	9aa8 <cc2400_set>
}
    99ea:	bd80      	pop	{r7, pc}
    99ec:	2009c038 	.word	0x2009c038
    99f0:	2009c058 	.word	0x2009c058

000099f4 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    99f4:	b480      	push	{r7}
    99f6:	b085      	sub	sp, #20
    99f8:	af00      	add	r7, sp, #0
    99fa:	4603      	mov	r3, r0
    99fc:	6039      	str	r1, [r7, #0]
    99fe:	71fb      	strb	r3, [r7, #7]
	u32 msb = 1 << (len - 1);
    9a00:	79fb      	ldrb	r3, [r7, #7]
    9a02:	3b01      	subs	r3, #1
    9a04:	2201      	movs	r2, #1
    9a06:	fa02 f303 	lsl.w	r3, r2, r3
    9a0a:	60fb      	str	r3, [r7, #12]

	/* start transaction by dropping CSN */
	CSN_CLR;
    9a0c:	4b18      	ldr	r3, [pc, #96]	; (9a70 <cc2400_spi+0x7c>)
    9a0e:	2220      	movs	r2, #32
    9a10:	601a      	str	r2, [r3, #0]

	while (len--) {
    9a12:	e01e      	b.n	9a52 <cc2400_spi+0x5e>
		if (data & msb)
    9a14:	683a      	ldr	r2, [r7, #0]
    9a16:	68fb      	ldr	r3, [r7, #12]
    9a18:	4013      	ands	r3, r2
    9a1a:	2b00      	cmp	r3, #0
    9a1c:	d003      	beq.n	9a26 <cc2400_spi+0x32>
			MOSI_SET;
    9a1e:	4b15      	ldr	r3, [pc, #84]	; (9a74 <cc2400_spi+0x80>)
    9a20:	2201      	movs	r2, #1
    9a22:	601a      	str	r2, [r3, #0]
    9a24:	e002      	b.n	9a2c <cc2400_spi+0x38>
		else
			MOSI_CLR;
    9a26:	4b12      	ldr	r3, [pc, #72]	; (9a70 <cc2400_spi+0x7c>)
    9a28:	2201      	movs	r2, #1
    9a2a:	601a      	str	r2, [r3, #0]
		data <<= 1;
    9a2c:	683b      	ldr	r3, [r7, #0]
    9a2e:	005b      	lsls	r3, r3, #1
    9a30:	603b      	str	r3, [r7, #0]

		SCLK_SET;
    9a32:	4b10      	ldr	r3, [pc, #64]	; (9a74 <cc2400_spi+0x80>)
    9a34:	2210      	movs	r2, #16
    9a36:	601a      	str	r2, [r3, #0]
		if (MISO)
    9a38:	4b0f      	ldr	r3, [pc, #60]	; (9a78 <cc2400_spi+0x84>)
    9a3a:	681b      	ldr	r3, [r3, #0]
    9a3c:	f003 0302 	and.w	r3, r3, #2
    9a40:	2b00      	cmp	r3, #0
    9a42:	d003      	beq.n	9a4c <cc2400_spi+0x58>
			data |= 1;
    9a44:	683b      	ldr	r3, [r7, #0]
    9a46:	f043 0301 	orr.w	r3, r3, #1
    9a4a:	603b      	str	r3, [r7, #0]

		SCLK_CLR;
    9a4c:	4b08      	ldr	r3, [pc, #32]	; (9a70 <cc2400_spi+0x7c>)
    9a4e:	2210      	movs	r2, #16
    9a50:	601a      	str	r2, [r3, #0]
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    9a52:	79fb      	ldrb	r3, [r7, #7]
    9a54:	1e5a      	subs	r2, r3, #1
    9a56:	71fa      	strb	r2, [r7, #7]
    9a58:	2b00      	cmp	r3, #0
    9a5a:	d1db      	bne.n	9a14 <cc2400_spi+0x20>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    9a5c:	4b05      	ldr	r3, [pc, #20]	; (9a74 <cc2400_spi+0x80>)
    9a5e:	2220      	movs	r2, #32
    9a60:	601a      	str	r2, [r3, #0]

	return data;
    9a62:	683b      	ldr	r3, [r7, #0]
}
    9a64:	4618      	mov	r0, r3
    9a66:	3714      	adds	r7, #20
    9a68:	46bd      	mov	sp, r7
    9a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a6e:	4770      	bx	lr
    9a70:	2009c05c 	.word	0x2009c05c
    9a74:	2009c058 	.word	0x2009c058
    9a78:	2009c054 	.word	0x2009c054

00009a7c <cc2400_get>:

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    9a7c:	b580      	push	{r7, lr}
    9a7e:	b084      	sub	sp, #16
    9a80:	af00      	add	r7, sp, #0
    9a82:	4603      	mov	r3, r0
    9a84:	71fb      	strb	r3, [r7, #7]
	u32 in;

	u32 out = (reg | 0x80) << 16;
    9a86:	79fb      	ldrb	r3, [r7, #7]
    9a88:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9a8c:	b2db      	uxtb	r3, r3
    9a8e:	041b      	lsls	r3, r3, #16
    9a90:	60fb      	str	r3, [r7, #12]
	in = cc2400_spi(24, out);
    9a92:	2018      	movs	r0, #24
    9a94:	68f9      	ldr	r1, [r7, #12]
    9a96:	f7ff ffad 	bl	99f4 <cc2400_spi>
    9a9a:	60b8      	str	r0, [r7, #8]
	return in & 0xFFFF;
    9a9c:	68bb      	ldr	r3, [r7, #8]
    9a9e:	b29b      	uxth	r3, r3
}
    9aa0:	4618      	mov	r0, r3
    9aa2:	3710      	adds	r7, #16
    9aa4:	46bd      	mov	sp, r7
    9aa6:	bd80      	pop	{r7, pc}

00009aa8 <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
    9aa8:	b580      	push	{r7, lr}
    9aaa:	b084      	sub	sp, #16
    9aac:	af00      	add	r7, sp, #0
    9aae:	4603      	mov	r3, r0
    9ab0:	460a      	mov	r2, r1
    9ab2:	71fb      	strb	r3, [r7, #7]
    9ab4:	4613      	mov	r3, r2
    9ab6:	80bb      	strh	r3, [r7, #4]
	u32 out = (reg << 16) | val;
    9ab8:	79fb      	ldrb	r3, [r7, #7]
    9aba:	041a      	lsls	r2, r3, #16
    9abc:	88bb      	ldrh	r3, [r7, #4]
    9abe:	4313      	orrs	r3, r2
    9ac0:	60fb      	str	r3, [r7, #12]
	cc2400_spi(24, out);
    9ac2:	2018      	movs	r0, #24
    9ac4:	68f9      	ldr	r1, [r7, #12]
    9ac6:	f7ff ff95 	bl	99f4 <cc2400_spi>
}
    9aca:	3710      	adds	r7, #16
    9acc:	46bd      	mov	sp, r7
    9ace:	bd80      	pop	{r7, pc}

00009ad0 <cc2400_get8>:

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    9ad0:	b580      	push	{r7, lr}
    9ad2:	b084      	sub	sp, #16
    9ad4:	af00      	add	r7, sp, #0
    9ad6:	4603      	mov	r3, r0
    9ad8:	71fb      	strb	r3, [r7, #7]
	u16 in;

	u16 out = (reg | 0x80) << 8;
    9ada:	79fb      	ldrb	r3, [r7, #7]
    9adc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9ae0:	b2db      	uxtb	r3, r3
    9ae2:	b29b      	uxth	r3, r3
    9ae4:	021b      	lsls	r3, r3, #8
    9ae6:	81fb      	strh	r3, [r7, #14]
	in = cc2400_spi(16, out);
    9ae8:	89fb      	ldrh	r3, [r7, #14]
    9aea:	2010      	movs	r0, #16
    9aec:	4619      	mov	r1, r3
    9aee:	f7ff ff81 	bl	99f4 <cc2400_spi>
    9af2:	4603      	mov	r3, r0
    9af4:	81bb      	strh	r3, [r7, #12]
	return in & 0xFF;
    9af6:	89bb      	ldrh	r3, [r7, #12]
    9af8:	b2db      	uxtb	r3, r3
}
    9afa:	4618      	mov	r0, r3
    9afc:	3710      	adds	r7, #16
    9afe:	46bd      	mov	sp, r7
    9b00:	bd80      	pop	{r7, pc}
    9b02:	bf00      	nop

00009b04 <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
    9b04:	b580      	push	{r7, lr}
    9b06:	b084      	sub	sp, #16
    9b08:	af00      	add	r7, sp, #0
    9b0a:	4603      	mov	r3, r0
    9b0c:	460a      	mov	r2, r1
    9b0e:	71fb      	strb	r3, [r7, #7]
    9b10:	4613      	mov	r3, r2
    9b12:	71bb      	strb	r3, [r7, #6]
	u32 out = (reg << 8) | val;
    9b14:	79fb      	ldrb	r3, [r7, #7]
    9b16:	021a      	lsls	r2, r3, #8
    9b18:	79bb      	ldrb	r3, [r7, #6]
    9b1a:	4313      	orrs	r3, r2
    9b1c:	60fb      	str	r3, [r7, #12]
	cc2400_spi(16, out);
    9b1e:	2010      	movs	r0, #16
    9b20:	68f9      	ldr	r1, [r7, #12]
    9b22:	f7ff ff67 	bl	99f4 <cc2400_spi>
}
    9b26:	3710      	adds	r7, #16
    9b28:	46bd      	mov	sp, r7
    9b2a:	bd80      	pop	{r7, pc}

00009b2c <cc2400_spi_buf>:

/* write multiple bytes to SPI */
void cc2400_spi_buf(u8 reg, u8 len, u8 *data)
{
    9b2c:	b480      	push	{r7}
    9b2e:	b085      	sub	sp, #20
    9b30:	af00      	add	r7, sp, #0
    9b32:	4603      	mov	r3, r0
    9b34:	603a      	str	r2, [r7, #0]
    9b36:	71fb      	strb	r3, [r7, #7]
    9b38:	460b      	mov	r3, r1
    9b3a:	71bb      	strb	r3, [r7, #6]
	u8 msb = 1 << 7;
    9b3c:	2380      	movs	r3, #128	; 0x80
    9b3e:	733b      	strb	r3, [r7, #12]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    9b40:	4b33      	ldr	r3, [pc, #204]	; (9c10 <cc2400_spi_buf+0xe4>)
    9b42:	2220      	movs	r2, #32
    9b44:	601a      	str	r2, [r3, #0]

	for (i = 0; i < 8; ++i) {
    9b46:	2300      	movs	r3, #0
    9b48:	73fb      	strb	r3, [r7, #15]
    9b4a:	e018      	b.n	9b7e <cc2400_spi_buf+0x52>
		if (reg & msb)
    9b4c:	79fa      	ldrb	r2, [r7, #7]
    9b4e:	7b3b      	ldrb	r3, [r7, #12]
    9b50:	4013      	ands	r3, r2
    9b52:	b2db      	uxtb	r3, r3
    9b54:	2b00      	cmp	r3, #0
    9b56:	d003      	beq.n	9b60 <cc2400_spi_buf+0x34>
			MOSI_SET;
    9b58:	4b2e      	ldr	r3, [pc, #184]	; (9c14 <cc2400_spi_buf+0xe8>)
    9b5a:	2201      	movs	r2, #1
    9b5c:	601a      	str	r2, [r3, #0]
    9b5e:	e002      	b.n	9b66 <cc2400_spi_buf+0x3a>
		else
			MOSI_CLR;
    9b60:	4b2b      	ldr	r3, [pc, #172]	; (9c10 <cc2400_spi_buf+0xe4>)
    9b62:	2201      	movs	r2, #1
    9b64:	601a      	str	r2, [r3, #0]
		reg <<= 1;
    9b66:	79fb      	ldrb	r3, [r7, #7]
    9b68:	005b      	lsls	r3, r3, #1
    9b6a:	71fb      	strb	r3, [r7, #7]
		SCLK_SET;
    9b6c:	4b29      	ldr	r3, [pc, #164]	; (9c14 <cc2400_spi_buf+0xe8>)
    9b6e:	2210      	movs	r2, #16
    9b70:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    9b72:	4b27      	ldr	r3, [pc, #156]	; (9c10 <cc2400_spi_buf+0xe4>)
    9b74:	2210      	movs	r2, #16
    9b76:	601a      	str	r2, [r3, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    9b78:	7bfb      	ldrb	r3, [r7, #15]
    9b7a:	3301      	adds	r3, #1
    9b7c:	73fb      	strb	r3, [r7, #15]
    9b7e:	7bfb      	ldrb	r3, [r7, #15]
    9b80:	2b07      	cmp	r3, #7
    9b82:	d9e3      	bls.n	9b4c <cc2400_spi_buf+0x20>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    9b84:	2300      	movs	r3, #0
    9b86:	73fb      	strb	r3, [r7, #15]
    9b88:	e026      	b.n	9bd8 <cc2400_spi_buf+0xac>
		temp = data[i];
    9b8a:	7bfb      	ldrb	r3, [r7, #15]
    9b8c:	683a      	ldr	r2, [r7, #0]
    9b8e:	4413      	add	r3, r2
    9b90:	781b      	ldrb	r3, [r3, #0]
    9b92:	737b      	strb	r3, [r7, #13]
		for (j = 0; j < 8; ++j) {
    9b94:	2300      	movs	r3, #0
    9b96:	73bb      	strb	r3, [r7, #14]
    9b98:	e018      	b.n	9bcc <cc2400_spi_buf+0xa0>
			if (temp & msb)
    9b9a:	7b7a      	ldrb	r2, [r7, #13]
    9b9c:	7b3b      	ldrb	r3, [r7, #12]
    9b9e:	4013      	ands	r3, r2
    9ba0:	b2db      	uxtb	r3, r3
    9ba2:	2b00      	cmp	r3, #0
    9ba4:	d003      	beq.n	9bae <cc2400_spi_buf+0x82>
				MOSI_SET;
    9ba6:	4b1b      	ldr	r3, [pc, #108]	; (9c14 <cc2400_spi_buf+0xe8>)
    9ba8:	2201      	movs	r2, #1
    9baa:	601a      	str	r2, [r3, #0]
    9bac:	e002      	b.n	9bb4 <cc2400_spi_buf+0x88>
			else
				MOSI_CLR;
    9bae:	4b18      	ldr	r3, [pc, #96]	; (9c10 <cc2400_spi_buf+0xe4>)
    9bb0:	2201      	movs	r2, #1
    9bb2:	601a      	str	r2, [r3, #0]
			temp <<= 1;
    9bb4:	7b7b      	ldrb	r3, [r7, #13]
    9bb6:	005b      	lsls	r3, r3, #1
    9bb8:	737b      	strb	r3, [r7, #13]
			SCLK_SET;
    9bba:	4b16      	ldr	r3, [pc, #88]	; (9c14 <cc2400_spi_buf+0xe8>)
    9bbc:	2210      	movs	r2, #16
    9bbe:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
    9bc0:	4b13      	ldr	r3, [pc, #76]	; (9c10 <cc2400_spi_buf+0xe4>)
    9bc2:	2210      	movs	r2, #16
    9bc4:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    9bc6:	7bbb      	ldrb	r3, [r7, #14]
    9bc8:	3301      	adds	r3, #1
    9bca:	73bb      	strb	r3, [r7, #14]
    9bcc:	7bbb      	ldrb	r3, [r7, #14]
    9bce:	2b07      	cmp	r3, #7
    9bd0:	d9e3      	bls.n	9b9a <cc2400_spi_buf+0x6e>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    9bd2:	7bfb      	ldrb	r3, [r7, #15]
    9bd4:	3301      	adds	r3, #1
    9bd6:	73fb      	strb	r3, [r7, #15]
    9bd8:	7bfa      	ldrb	r2, [r7, #15]
    9bda:	79bb      	ldrb	r3, [r7, #6]
    9bdc:	429a      	cmp	r2, r3
    9bde:	d3d4      	bcc.n	9b8a <cc2400_spi_buf+0x5e>
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    9be0:	2300      	movs	r3, #0
    9be2:	73fb      	strb	r3, [r7, #15]
    9be4:	e008      	b.n	9bf8 <cc2400_spi_buf+0xcc>
		SCLK_SET;
    9be6:	4b0b      	ldr	r3, [pc, #44]	; (9c14 <cc2400_spi_buf+0xe8>)
    9be8:	2210      	movs	r2, #16
    9bea:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    9bec:	4b08      	ldr	r3, [pc, #32]	; (9c10 <cc2400_spi_buf+0xe4>)
    9bee:	2210      	movs	r2, #16
    9bf0:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    9bf2:	7bfb      	ldrb	r3, [r7, #15]
    9bf4:	3301      	adds	r3, #1
    9bf6:	73fb      	strb	r3, [r7, #15]
    9bf8:	7bfb      	ldrb	r3, [r7, #15]
    9bfa:	2b07      	cmp	r3, #7
    9bfc:	d9f3      	bls.n	9be6 <cc2400_spi_buf+0xba>
		SCLK_SET;
		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    9bfe:	4b05      	ldr	r3, [pc, #20]	; (9c14 <cc2400_spi_buf+0xe8>)
    9c00:	2220      	movs	r2, #32
    9c02:	601a      	str	r2, [r3, #0]
}
    9c04:	3714      	adds	r7, #20
    9c06:	46bd      	mov	sp, r7
    9c08:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c0c:	4770      	bx	lr
    9c0e:	bf00      	nop
    9c10:	2009c05c 	.word	0x2009c05c
    9c14:	2009c058 	.word	0x2009c058

00009c18 <cc2400_status>:

/* get the status */
u8 cc2400_status()
{
    9c18:	b580      	push	{r7, lr}
    9c1a:	af00      	add	r7, sp, #0
	return cc2400_spi(8, 0);
    9c1c:	2008      	movs	r0, #8
    9c1e:	2100      	movs	r1, #0
    9c20:	f7ff fee8 	bl	99f4 <cc2400_spi>
    9c24:	4603      	mov	r3, r0
    9c26:	b2db      	uxtb	r3, r3
}
    9c28:	4618      	mov	r0, r3
    9c2a:	bd80      	pop	{r7, pc}

00009c2c <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    9c2c:	b580      	push	{r7, lr}
    9c2e:	b082      	sub	sp, #8
    9c30:	af00      	add	r7, sp, #0
    9c32:	4603      	mov	r3, r0
    9c34:	71fb      	strb	r3, [r7, #7]
	return cc2400_spi(8, reg);
    9c36:	79fb      	ldrb	r3, [r7, #7]
    9c38:	2008      	movs	r0, #8
    9c3a:	4619      	mov	r1, r3
    9c3c:	f7ff feda 	bl	99f4 <cc2400_spi>
    9c40:	4603      	mov	r3, r0
    9c42:	b2db      	uxtb	r3, r3
}
    9c44:	4618      	mov	r0, r3
    9c46:	3708      	adds	r7, #8
    9c48:	46bd      	mov	sp, r7
    9c4a:	bd80      	pop	{r7, pc}

00009c4c <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    9c4c:	b580      	push	{r7, lr}
    9c4e:	af00      	add	r7, sp, #0
	cc2400_set(MAIN, 0x0000);
    9c50:	2000      	movs	r0, #0
    9c52:	2100      	movs	r1, #0
    9c54:	f7ff ff28 	bl	9aa8 <cc2400_set>
	while (cc2400_get(MAIN) != 0x0000);
    9c58:	bf00      	nop
    9c5a:	2000      	movs	r0, #0
    9c5c:	f7ff ff0e 	bl	9a7c <cc2400_get>
    9c60:	4603      	mov	r3, r0
    9c62:	2b00      	cmp	r3, #0
    9c64:	d1f9      	bne.n	9c5a <cc2400_reset+0xe>
	cc2400_set(MAIN, 0x8000);
    9c66:	2000      	movs	r0, #0
    9c68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    9c6c:	f7ff ff1c 	bl	9aa8 <cc2400_set>
	while (cc2400_get(MAIN) != 0x8000);
    9c70:	bf00      	nop
    9c72:	2000      	movs	r0, #0
    9c74:	f7ff ff02 	bl	9a7c <cc2400_get>
    9c78:	4603      	mov	r3, r0
    9c7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9c7e:	d1f8      	bne.n	9c72 <cc2400_reset+0x26>
}
    9c80:	bd80      	pop	{r7, pc}
    9c82:	bf00      	nop

00009c84 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    9c84:	b580      	push	{r7, lr}
    9c86:	af00      	add	r7, sp, #0
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    9c88:	4b5e      	ldr	r3, [pc, #376]	; (9e04 <clock_start+0x180>)
    9c8a:	f244 023a 	movw	r2, #16442	; 0x403a
    9c8e:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    9c90:	4b5d      	ldr	r3, [pc, #372]	; (9e08 <clock_start+0x184>)
    9c92:	2200      	movs	r2, #0
    9c94:	601a      	str	r2, [r3, #0]

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    9c96:	4a5d      	ldr	r2, [pc, #372]	; (9e0c <clock_start+0x188>)
    9c98:	4b5c      	ldr	r3, [pc, #368]	; (9e0c <clock_start+0x188>)
    9c9a:	681b      	ldr	r3, [r3, #0]
    9c9c:	f023 0302 	bic.w	r3, r3, #2
    9ca0:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9ca2:	4b5b      	ldr	r3, [pc, #364]	; (9e10 <clock_start+0x18c>)
    9ca4:	22aa      	movs	r2, #170	; 0xaa
    9ca6:	601a      	str	r2, [r3, #0]
    9ca8:	4b59      	ldr	r3, [pc, #356]	; (9e10 <clock_start+0x18c>)
    9caa:	2255      	movs	r2, #85	; 0x55
    9cac:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    9cae:	bf00      	nop
    9cb0:	4b58      	ldr	r3, [pc, #352]	; (9e14 <clock_start+0x190>)
    9cb2:	681b      	ldr	r3, [r3, #0]
    9cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    9cb8:	2b00      	cmp	r3, #0
    9cba:	d1f9      	bne.n	9cb0 <clock_start+0x2c>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    9cbc:	4a53      	ldr	r2, [pc, #332]	; (9e0c <clock_start+0x188>)
    9cbe:	4b53      	ldr	r3, [pc, #332]	; (9e0c <clock_start+0x188>)
    9cc0:	681b      	ldr	r3, [r3, #0]
    9cc2:	f023 0301 	bic.w	r3, r3, #1
    9cc6:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9cc8:	4b51      	ldr	r3, [pc, #324]	; (9e10 <clock_start+0x18c>)
    9cca:	22aa      	movs	r2, #170	; 0xaa
    9ccc:	601a      	str	r2, [r3, #0]
    9cce:	4b50      	ldr	r3, [pc, #320]	; (9e10 <clock_start+0x18c>)
    9cd0:	2255      	movs	r2, #85	; 0x55
    9cd2:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    9cd4:	bf00      	nop
    9cd6:	4b4f      	ldr	r3, [pc, #316]	; (9e14 <clock_start+0x190>)
    9cd8:	681b      	ldr	r3, [r3, #0]
    9cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    9cde:	2b00      	cmp	r3, #0
    9ce0:	d1f9      	bne.n	9cd6 <clock_start+0x52>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    9ce2:	4b4d      	ldr	r3, [pc, #308]	; (9e18 <clock_start+0x194>)
    9ce4:	2200      	movs	r2, #0
    9ce6:	601a      	str	r2, [r3, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    9ce8:	f7ff ffb0 	bl	9c4c <cc2400_reset>
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
    9cec:	2008      	movs	r0, #8
    9cee:	f241 5170 	movw	r1, #5488	; 0x1570
    9cf2:	f7ff fed9 	bl	9aa8 <cc2400_set>
	cc2400_strobe(SXOSCON);
    9cf6:	2060      	movs	r0, #96	; 0x60
    9cf8:	f7ff ff98 	bl	9c2c <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    9cfc:	bf00      	nop
    9cfe:	f7ff ff8b 	bl	9c18 <cc2400_status>
    9d02:	4603      	mov	r3, r0
    9d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9d08:	2b00      	cmp	r3, #0
    9d0a:	d0f8      	beq.n	9cfe <clock_start+0x7a>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    9d0c:	4b43      	ldr	r3, [pc, #268]	; (9e1c <clock_start+0x198>)
    9d0e:	2220      	movs	r2, #32
    9d10:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    9d12:	bf00      	nop
    9d14:	4b41      	ldr	r3, [pc, #260]	; (9e1c <clock_start+0x198>)
    9d16:	681b      	ldr	r3, [r3, #0]
    9d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9d1c:	2b00      	cmp	r3, #0
    9d1e:	d0f9      	beq.n	9d14 <clock_start+0x90>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    9d20:	4b3f      	ldr	r3, [pc, #252]	; (9e20 <clock_start+0x19c>)
    9d22:	2208      	movs	r2, #8
    9d24:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    9d26:	4b3f      	ldr	r3, [pc, #252]	; (9e24 <clock_start+0x1a0>)
    9d28:	2200      	movs	r2, #0
    9d2a:	601a      	str	r2, [r3, #0]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    9d2c:	4b36      	ldr	r3, [pc, #216]	; (9e08 <clock_start+0x184>)
    9d2e:	2201      	movs	r2, #1
    9d30:	601a      	str	r2, [r3, #0]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    9d32:	4b3d      	ldr	r3, [pc, #244]	; (9e28 <clock_start+0x1a4>)
    9d34:	4a3d      	ldr	r2, [pc, #244]	; (9e2c <clock_start+0x1a8>)
    9d36:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    9d38:	4b35      	ldr	r3, [pc, #212]	; (9e10 <clock_start+0x18c>)
    9d3a:	22aa      	movs	r2, #170	; 0xaa
    9d3c:	601a      	str	r2, [r3, #0]
    9d3e:	4b34      	ldr	r3, [pc, #208]	; (9e10 <clock_start+0x18c>)
    9d40:	2255      	movs	r2, #85	; 0x55
    9d42:	601a      	str	r2, [r3, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    9d44:	4a31      	ldr	r2, [pc, #196]	; (9e0c <clock_start+0x188>)
    9d46:	4b31      	ldr	r3, [pc, #196]	; (9e0c <clock_start+0x188>)
    9d48:	681b      	ldr	r3, [r3, #0]
    9d4a:	f043 0301 	orr.w	r3, r3, #1
    9d4e:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9d50:	4b2f      	ldr	r3, [pc, #188]	; (9e10 <clock_start+0x18c>)
    9d52:	22aa      	movs	r2, #170	; 0xaa
    9d54:	601a      	str	r2, [r3, #0]
    9d56:	4b2e      	ldr	r3, [pc, #184]	; (9e10 <clock_start+0x18c>)
    9d58:	2255      	movs	r2, #85	; 0x55
    9d5a:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    9d5c:	bf00      	nop
    9d5e:	4b2d      	ldr	r3, [pc, #180]	; (9e14 <clock_start+0x190>)
    9d60:	681b      	ldr	r3, [r3, #0]
    9d62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    9d66:	2b00      	cmp	r3, #0
    9d68:	d0f9      	beq.n	9d5e <clock_start+0xda>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    9d6a:	4b2b      	ldr	r3, [pc, #172]	; (9e18 <clock_start+0x194>)
    9d6c:	2203      	movs	r2, #3
    9d6e:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    9d70:	4a26      	ldr	r2, [pc, #152]	; (9e0c <clock_start+0x188>)
    9d72:	4b26      	ldr	r3, [pc, #152]	; (9e0c <clock_start+0x188>)
    9d74:	681b      	ldr	r3, [r3, #0]
    9d76:	f043 0302 	orr.w	r3, r3, #2
    9d7a:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9d7c:	4b24      	ldr	r3, [pc, #144]	; (9e10 <clock_start+0x18c>)
    9d7e:	22aa      	movs	r2, #170	; 0xaa
    9d80:	601a      	str	r2, [r3, #0]
    9d82:	4b23      	ldr	r3, [pc, #140]	; (9e10 <clock_start+0x18c>)
    9d84:	2255      	movs	r2, #85	; 0x55
    9d86:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    9d88:	bf00      	nop
    9d8a:	4b22      	ldr	r3, [pc, #136]	; (9e14 <clock_start+0x190>)
    9d8c:	681b      	ldr	r3, [r3, #0]
    9d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    9d92:	2b00      	cmp	r3, #0
    9d94:	d0f9      	beq.n	9d8a <clock_start+0x106>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    9d96:	4b26      	ldr	r3, [pc, #152]	; (9e30 <clock_start+0x1ac>)
    9d98:	2222      	movs	r2, #34	; 0x22
    9d9a:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    9d9c:	4b25      	ldr	r3, [pc, #148]	; (9e34 <clock_start+0x1b0>)
    9d9e:	22aa      	movs	r2, #170	; 0xaa
    9da0:	601a      	str	r2, [r3, #0]
    9da2:	4b24      	ldr	r3, [pc, #144]	; (9e34 <clock_start+0x1b0>)
    9da4:	2255      	movs	r2, #85	; 0x55
    9da6:	601a      	str	r2, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    9da8:	4a23      	ldr	r2, [pc, #140]	; (9e38 <clock_start+0x1b4>)
    9daa:	4b23      	ldr	r3, [pc, #140]	; (9e38 <clock_start+0x1b4>)
    9dac:	681b      	ldr	r3, [r3, #0]
    9dae:	f043 0301 	orr.w	r3, r3, #1
    9db2:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    9db4:	4b1f      	ldr	r3, [pc, #124]	; (9e34 <clock_start+0x1b0>)
    9db6:	22aa      	movs	r2, #170	; 0xaa
    9db8:	601a      	str	r2, [r3, #0]
    9dba:	4b1e      	ldr	r3, [pc, #120]	; (9e34 <clock_start+0x1b0>)
    9dbc:	2255      	movs	r2, #85	; 0x55
    9dbe:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    9dc0:	bf00      	nop
    9dc2:	4b1e      	ldr	r3, [pc, #120]	; (9e3c <clock_start+0x1b8>)
    9dc4:	681b      	ldr	r3, [r3, #0]
    9dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
    9dca:	2b00      	cmp	r3, #0
    9dcc:	d0f9      	beq.n	9dc2 <clock_start+0x13e>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    9dce:	bf00      	nop
    9dd0:	4b1a      	ldr	r3, [pc, #104]	; (9e3c <clock_start+0x1b8>)
    9dd2:	681b      	ldr	r3, [r3, #0]
    9dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9dd8:	2b00      	cmp	r3, #0
    9dda:	d0f9      	beq.n	9dd0 <clock_start+0x14c>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    9ddc:	4a16      	ldr	r2, [pc, #88]	; (9e38 <clock_start+0x1b4>)
    9dde:	4b16      	ldr	r3, [pc, #88]	; (9e38 <clock_start+0x1b4>)
    9de0:	681b      	ldr	r3, [r3, #0]
    9de2:	f043 0302 	orr.w	r3, r3, #2
    9de6:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    9de8:	4b12      	ldr	r3, [pc, #72]	; (9e34 <clock_start+0x1b0>)
    9dea:	22aa      	movs	r2, #170	; 0xaa
    9dec:	601a      	str	r2, [r3, #0]
    9dee:	4b11      	ldr	r3, [pc, #68]	; (9e34 <clock_start+0x1b0>)
    9df0:	2255      	movs	r2, #85	; 0x55
    9df2:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    9df4:	bf00      	nop
    9df6:	4b11      	ldr	r3, [pc, #68]	; (9e3c <clock_start+0x1b8>)
    9df8:	681b      	ldr	r3, [r3, #0]
    9dfa:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9dfe:	2b00      	cmp	r3, #0
    9e00:	d0f9      	beq.n	9df6 <clock_start+0x172>
}
    9e02:	bd80      	pop	{r7, pc}
    9e04:	400fc000 	.word	0x400fc000
    9e08:	400fc10c 	.word	0x400fc10c
    9e0c:	400fc080 	.word	0x400fc080
    9e10:	400fc08c 	.word	0x400fc08c
    9e14:	400fc088 	.word	0x400fc088
    9e18:	400fc104 	.word	0x400fc104
    9e1c:	400fc1a0 	.word	0x400fc1a0
    9e20:	400fc1a8 	.word	0x400fc1a8
    9e24:	400fc1ac 	.word	0x400fc1ac
    9e28:	400fc084 	.word	0x400fc084
    9e2c:	00010018 	.word	0x00010018
    9e30:	400fc0a4 	.word	0x400fc0a4
    9e34:	400fc0ac 	.word	0x400fc0ac
    9e38:	400fc0a0 	.word	0x400fc0a0
    9e3c:	400fc0a8 	.word	0x400fc0a8

00009e40 <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    9e40:	b580      	push	{r7, lr}
    9e42:	af00      	add	r7, sp, #0
	all_pins_off();
    9e44:	f7ff fcd0 	bl	97e8 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    9e48:	4b0a      	ldr	r3, [pc, #40]	; (9e74 <reset+0x34>)
    9e4a:	2202      	movs	r2, #2
    9e4c:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    9e4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9e52:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9e56:	681b      	ldr	r3, [r3, #0]
    9e58:	f043 0303 	orr.w	r3, r3, #3
    9e5c:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    9e5e:	4b06      	ldr	r3, [pc, #24]	; (9e78 <reset+0x38>)
    9e60:	22aa      	movs	r2, #170	; 0xaa
    9e62:	601a      	str	r2, [r3, #0]
    9e64:	4b04      	ldr	r3, [pc, #16]	; (9e78 <reset+0x38>)
    9e66:	2255      	movs	r2, #85	; 0x55
    9e68:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
    9e6a:	2001      	movs	r0, #1
    9e6c:	f7ff fc38 	bl	96e0 <wait>
}
    9e70:	bd80      	pop	{r7, pc}
    9e72:	bf00      	nop
    9e74:	2009c03c 	.word	0x2009c03c
    9e78:	40000008 	.word	0x40000008

00009e7c <_HandleRequest>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    9e7c:	b580      	push	{r7, lr}
    9e7e:	b088      	sub	sp, #32
    9e80:	af00      	add	r7, sp, #0
    9e82:	60f8      	str	r0, [r7, #12]
    9e84:	60b9      	str	r1, [r7, #8]
    9e86:	607a      	str	r2, [r7, #4]
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    9e88:	68fb      	ldr	r3, [r7, #12]
    9e8a:	781b      	ldrb	r3, [r3, #0]
    9e8c:	095b      	lsrs	r3, r3, #5
    9e8e:	b2db      	uxtb	r3, r3
    9e90:	f003 0303 	and.w	r3, r3, #3
    9e94:	61fb      	str	r3, [r7, #28]
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    9e96:	69fb      	ldr	r3, [r7, #28]
    9e98:	2b02      	cmp	r3, #2
    9e9a:	d10e      	bne.n	9eba <_HandleRequest+0x3e>
		BOOL fFilterStatus = FALSE;
    9e9c:	2300      	movs	r3, #0
    9e9e:	617b      	str	r3, [r7, #20]
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    9ea0:	f107 0314 	add.w	r3, r7, #20
    9ea4:	68f8      	ldr	r0, [r7, #12]
    9ea6:	4619      	mov	r1, r3
    9ea8:	68ba      	ldr	r2, [r7, #8]
    9eaa:	687b      	ldr	r3, [r7, #4]
    9eac:	f000 fcd2 	bl	a854 <USBFilterOsVendorMessage>
    9eb0:	4603      	mov	r3, r0
    9eb2:	2b00      	cmp	r3, #0
    9eb4:	d001      	beq.n	9eba <_HandleRequest+0x3e>
			return fFilterStatus;
    9eb6:	697b      	ldr	r3, [r7, #20]
    9eb8:	e00f      	b.n	9eda <_HandleRequest+0x5e>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    9eba:	4a0a      	ldr	r2, [pc, #40]	; (9ee4 <_HandleRequest+0x68>)
    9ebc:	69fb      	ldr	r3, [r7, #28]
    9ebe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9ec2:	61bb      	str	r3, [r7, #24]
	if (pfnHandler == NULL) {
    9ec4:	69bb      	ldr	r3, [r7, #24]
    9ec6:	2b00      	cmp	r3, #0
    9ec8:	d101      	bne.n	9ece <_HandleRequest+0x52>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    9eca:	2300      	movs	r3, #0
    9ecc:	e005      	b.n	9eda <_HandleRequest+0x5e>
	}

	return pfnHandler(pSetup, piLen, ppbData);
    9ece:	69bb      	ldr	r3, [r7, #24]
    9ed0:	68f8      	ldr	r0, [r7, #12]
    9ed2:	68b9      	ldr	r1, [r7, #8]
    9ed4:	687a      	ldr	r2, [r7, #4]
    9ed6:	4798      	blx	r3
    9ed8:	4603      	mov	r3, r0
}
    9eda:	4618      	mov	r0, r3
    9edc:	3720      	adds	r7, #32
    9ede:	46bd      	mov	sp, r7
    9ee0:	bd80      	pop	{r7, pc}
    9ee2:	bf00      	nop
    9ee4:	10000a80 	.word	0x10000a80

00009ee8 <StallControlPipe>:
	Local function to stall the control endpoint
	
	@param [in]	bEPStat	Endpoint status
 */
static void StallControlPipe(U8 bEPStat)
{
    9ee8:	b580      	push	{r7, lr}
    9eea:	b084      	sub	sp, #16
    9eec:	af00      	add	r7, sp, #0
    9eee:	4603      	mov	r3, r0
    9ef0:	71fb      	strb	r3, [r7, #7]
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    9ef2:	2080      	movs	r0, #128	; 0x80
    9ef4:	2101      	movs	r1, #1
    9ef6:	f000 fa83 	bl	a400 <USBHwEPStall>

// dump setup packet
	DBG("STALL on [");
	pb = (U8 *)&Setup;
    9efa:	4b07      	ldr	r3, [pc, #28]	; (9f18 <StallControlPipe+0x30>)
    9efc:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
    9efe:	2300      	movs	r3, #0
    9f00:	60fb      	str	r3, [r7, #12]
    9f02:	e002      	b.n	9f0a <StallControlPipe+0x22>
    9f04:	68fb      	ldr	r3, [r7, #12]
    9f06:	3301      	adds	r3, #1
    9f08:	60fb      	str	r3, [r7, #12]
    9f0a:	68fb      	ldr	r3, [r7, #12]
    9f0c:	2b07      	cmp	r3, #7
    9f0e:	ddf9      	ble.n	9f04 <StallControlPipe+0x1c>
		DBG(" %02x", *pb++);
	}
	DBG("] stat=%x\n", bEPStat);
}
    9f10:	3710      	adds	r7, #16
    9f12:	46bd      	mov	sp, r7
    9f14:	bd80      	pop	{r7, pc}
    9f16:	bf00      	nop
    9f18:	10000a6c 	.word	0x10000a6c

00009f1c <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    9f1c:	b580      	push	{r7, lr}
    9f1e:	b082      	sub	sp, #8
    9f20:	af00      	add	r7, sp, #0
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    9f22:	4b0e      	ldr	r3, [pc, #56]	; (9f5c <DataIn+0x40>)
    9f24:	681b      	ldr	r3, [r3, #0]
    9f26:	2b40      	cmp	r3, #64	; 0x40
    9f28:	bfa8      	it	ge
    9f2a:	2340      	movge	r3, #64	; 0x40
    9f2c:	607b      	str	r3, [r7, #4]
	USBHwEPWrite(0x80, pbData, iChunk);
    9f2e:	4b0c      	ldr	r3, [pc, #48]	; (9f60 <DataIn+0x44>)
    9f30:	681a      	ldr	r2, [r3, #0]
    9f32:	687b      	ldr	r3, [r7, #4]
    9f34:	2080      	movs	r0, #128	; 0x80
    9f36:	4611      	mov	r1, r2
    9f38:	461a      	mov	r2, r3
    9f3a:	f000 fa85 	bl	a448 <USBHwEPWrite>
	pbData += iChunk;
    9f3e:	4b08      	ldr	r3, [pc, #32]	; (9f60 <DataIn+0x44>)
    9f40:	681a      	ldr	r2, [r3, #0]
    9f42:	687b      	ldr	r3, [r7, #4]
    9f44:	4413      	add	r3, r2
    9f46:	4a06      	ldr	r2, [pc, #24]	; (9f60 <DataIn+0x44>)
    9f48:	6013      	str	r3, [r2, #0]
	iResidue -= iChunk;
    9f4a:	4b04      	ldr	r3, [pc, #16]	; (9f5c <DataIn+0x40>)
    9f4c:	681a      	ldr	r2, [r3, #0]
    9f4e:	687b      	ldr	r3, [r7, #4]
    9f50:	1ad3      	subs	r3, r2, r3
    9f52:	4a02      	ldr	r2, [pc, #8]	; (9f5c <DataIn+0x40>)
    9f54:	6013      	str	r3, [r2, #0]
}
    9f56:	3708      	adds	r7, #8
    9f58:	46bd      	mov	sp, r7
    9f5a:	bd80      	pop	{r7, pc}
    9f5c:	10000a78 	.word	0x10000a78
    9f60:	10000a74 	.word	0x10000a74

00009f64 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    9f64:	b580      	push	{r7, lr}
    9f66:	b084      	sub	sp, #16
    9f68:	af00      	add	r7, sp, #0
    9f6a:	4603      	mov	r3, r0
    9f6c:	460a      	mov	r2, r1
    9f6e:	71fb      	strb	r3, [r7, #7]
    9f70:	4613      	mov	r3, r2
    9f72:	71bb      	strb	r3, [r7, #6]
	int iChunk, iType;

	if (bEP == 0x00) {
    9f74:	79fb      	ldrb	r3, [r7, #7]
    9f76:	2b00      	cmp	r3, #0
    9f78:	f040 8091 	bne.w	a09e <USBHandleControlTransfer+0x13a>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    9f7c:	79bb      	ldrb	r3, [r7, #6]
    9f7e:	f003 0304 	and.w	r3, r3, #4
    9f82:	2b00      	cmp	r3, #0
    9f84:	d041      	beq.n	a00a <USBHandleControlTransfer+0xa6>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    9f86:	2000      	movs	r0, #0
    9f88:	4949      	ldr	r1, [pc, #292]	; (a0b0 <USBHandleControlTransfer+0x14c>)
    9f8a:	2208      	movs	r2, #8
    9f8c:	f000 faaa 	bl	a4e4 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    9f90:	4b47      	ldr	r3, [pc, #284]	; (a0b0 <USBHandleControlTransfer+0x14c>)
    9f92:	781b      	ldrb	r3, [r3, #0]
    9f94:	095b      	lsrs	r3, r3, #5
    9f96:	b2db      	uxtb	r3, r3
    9f98:	f003 0303 	and.w	r3, r3, #3
    9f9c:	60fb      	str	r3, [r7, #12]
			pbData = apbDataStore[iType];
    9f9e:	4a45      	ldr	r2, [pc, #276]	; (a0b4 <USBHandleControlTransfer+0x150>)
    9fa0:	68fb      	ldr	r3, [r7, #12]
    9fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fa6:	4a44      	ldr	r2, [pc, #272]	; (a0b8 <USBHandleControlTransfer+0x154>)
    9fa8:	6013      	str	r3, [r2, #0]
			iResidue = Setup.wLength;
    9faa:	4b41      	ldr	r3, [pc, #260]	; (a0b0 <USBHandleControlTransfer+0x14c>)
    9fac:	88db      	ldrh	r3, [r3, #6]
    9fae:	461a      	mov	r2, r3
    9fb0:	4b42      	ldr	r3, [pc, #264]	; (a0bc <USBHandleControlTransfer+0x158>)
    9fb2:	601a      	str	r2, [r3, #0]
			iLen = Setup.wLength;
    9fb4:	4b3e      	ldr	r3, [pc, #248]	; (a0b0 <USBHandleControlTransfer+0x14c>)
    9fb6:	88db      	ldrh	r3, [r3, #6]
    9fb8:	461a      	mov	r2, r3
    9fba:	4b41      	ldr	r3, [pc, #260]	; (a0c0 <USBHandleControlTransfer+0x15c>)
    9fbc:	601a      	str	r2, [r3, #0]

			if ((Setup.wLength == 0) ||
    9fbe:	4b3c      	ldr	r3, [pc, #240]	; (a0b0 <USBHandleControlTransfer+0x14c>)
    9fc0:	88db      	ldrh	r3, [r3, #6]
    9fc2:	2b00      	cmp	r3, #0
    9fc4:	d007      	beq.n	9fd6 <USBHandleControlTransfer+0x72>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
    9fc6:	4b3a      	ldr	r3, [pc, #232]	; (a0b0 <USBHandleControlTransfer+0x14c>)
    9fc8:	781b      	ldrb	r3, [r3, #0]
    9fca:	09db      	lsrs	r3, r3, #7
    9fcc:	b2db      	uxtb	r3, r3
    9fce:	f003 0301 	and.w	r3, r3, #1
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
			pbData = apbDataStore[iType];
			iResidue = Setup.wLength;
			iLen = Setup.wLength;

			if ((Setup.wLength == 0) ||
    9fd2:	2b00      	cmp	r3, #0
    9fd4:	d068      	beq.n	a0a8 <USBHandleControlTransfer+0x144>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    9fd6:	4836      	ldr	r0, [pc, #216]	; (a0b0 <USBHandleControlTransfer+0x14c>)
    9fd8:	4939      	ldr	r1, [pc, #228]	; (a0c0 <USBHandleControlTransfer+0x15c>)
    9fda:	4a37      	ldr	r2, [pc, #220]	; (a0b8 <USBHandleControlTransfer+0x154>)
    9fdc:	f7ff ff4e 	bl	9e7c <_HandleRequest>
    9fe0:	4603      	mov	r3, r0
    9fe2:	2b00      	cmp	r3, #0
    9fe4:	d104      	bne.n	9ff0 <USBHandleControlTransfer+0x8c>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
    9fe6:	79bb      	ldrb	r3, [r7, #6]
    9fe8:	4618      	mov	r0, r3
    9fea:	f7ff ff7d 	bl	9ee8 <StallControlPipe>
					return;
    9fee:	e05b      	b.n	a0a8 <USBHandleControlTransfer+0x144>
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    9ff0:	4b2f      	ldr	r3, [pc, #188]	; (a0b0 <USBHandleControlTransfer+0x14c>)
    9ff2:	88db      	ldrh	r3, [r3, #6]
    9ff4:	461a      	mov	r2, r3
    9ff6:	4b32      	ldr	r3, [pc, #200]	; (a0c0 <USBHandleControlTransfer+0x15c>)
    9ff8:	681b      	ldr	r3, [r3, #0]
    9ffa:	4293      	cmp	r3, r2
    9ffc:	bfa8      	it	ge
    9ffe:	4613      	movge	r3, r2
    a000:	4a2e      	ldr	r2, [pc, #184]	; (a0bc <USBHandleControlTransfer+0x158>)
    a002:	6013      	str	r3, [r2, #0]
				// send first part (possibly a zero-length status message)
				DataIn();
    a004:	f7ff ff8a 	bl	9f1c <DataIn>
    a008:	e04e      	b.n	a0a8 <USBHandleControlTransfer+0x144>
			}
		}
		else {		
			if (iResidue > 0) {
    a00a:	4b2c      	ldr	r3, [pc, #176]	; (a0bc <USBHandleControlTransfer+0x158>)
    a00c:	681b      	ldr	r3, [r3, #0]
    a00e:	2b00      	cmp	r3, #0
    a010:	dd3e      	ble.n	a090 <USBHandleControlTransfer+0x12c>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    a012:	4b29      	ldr	r3, [pc, #164]	; (a0b8 <USBHandleControlTransfer+0x154>)
    a014:	681a      	ldr	r2, [r3, #0]
    a016:	4b29      	ldr	r3, [pc, #164]	; (a0bc <USBHandleControlTransfer+0x158>)
    a018:	681b      	ldr	r3, [r3, #0]
    a01a:	2000      	movs	r0, #0
    a01c:	4611      	mov	r1, r2
    a01e:	461a      	mov	r2, r3
    a020:	f000 fa60 	bl	a4e4 <USBHwEPRead>
    a024:	60b8      	str	r0, [r7, #8]
				if (iChunk < 0) {
    a026:	68bb      	ldr	r3, [r7, #8]
    a028:	2b00      	cmp	r3, #0
    a02a:	da04      	bge.n	a036 <USBHandleControlTransfer+0xd2>
					StallControlPipe(bEPStat);
    a02c:	79bb      	ldrb	r3, [r7, #6]
    a02e:	4618      	mov	r0, r3
    a030:	f7ff ff5a 	bl	9ee8 <StallControlPipe>
					return;
    a034:	e038      	b.n	a0a8 <USBHandleControlTransfer+0x144>
				}
				pbData += iChunk;
    a036:	4b20      	ldr	r3, [pc, #128]	; (a0b8 <USBHandleControlTransfer+0x154>)
    a038:	681a      	ldr	r2, [r3, #0]
    a03a:	68bb      	ldr	r3, [r7, #8]
    a03c:	4413      	add	r3, r2
    a03e:	4a1e      	ldr	r2, [pc, #120]	; (a0b8 <USBHandleControlTransfer+0x154>)
    a040:	6013      	str	r3, [r2, #0]
				iResidue -= iChunk;
    a042:	4b1e      	ldr	r3, [pc, #120]	; (a0bc <USBHandleControlTransfer+0x158>)
    a044:	681a      	ldr	r2, [r3, #0]
    a046:	68bb      	ldr	r3, [r7, #8]
    a048:	1ad3      	subs	r3, r2, r3
    a04a:	4a1c      	ldr	r2, [pc, #112]	; (a0bc <USBHandleControlTransfer+0x158>)
    a04c:	6013      	str	r3, [r2, #0]
				if (iResidue == 0) {
    a04e:	4b1b      	ldr	r3, [pc, #108]	; (a0bc <USBHandleControlTransfer+0x158>)
    a050:	681b      	ldr	r3, [r3, #0]
    a052:	2b00      	cmp	r3, #0
    a054:	d128      	bne.n	a0a8 <USBHandleControlTransfer+0x144>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    a056:	4b16      	ldr	r3, [pc, #88]	; (a0b0 <USBHandleControlTransfer+0x14c>)
    a058:	781b      	ldrb	r3, [r3, #0]
    a05a:	095b      	lsrs	r3, r3, #5
    a05c:	b2db      	uxtb	r3, r3
    a05e:	f003 0303 	and.w	r3, r3, #3
    a062:	60fb      	str	r3, [r7, #12]
					pbData = apbDataStore[iType];
    a064:	4a13      	ldr	r2, [pc, #76]	; (a0b4 <USBHandleControlTransfer+0x150>)
    a066:	68fb      	ldr	r3, [r7, #12]
    a068:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a06c:	4a12      	ldr	r2, [pc, #72]	; (a0b8 <USBHandleControlTransfer+0x154>)
    a06e:	6013      	str	r3, [r2, #0]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    a070:	480f      	ldr	r0, [pc, #60]	; (a0b0 <USBHandleControlTransfer+0x14c>)
    a072:	4913      	ldr	r1, [pc, #76]	; (a0c0 <USBHandleControlTransfer+0x15c>)
    a074:	4a10      	ldr	r2, [pc, #64]	; (a0b8 <USBHandleControlTransfer+0x154>)
    a076:	f7ff ff01 	bl	9e7c <_HandleRequest>
    a07a:	4603      	mov	r3, r0
    a07c:	2b00      	cmp	r3, #0
    a07e:	d104      	bne.n	a08a <USBHandleControlTransfer+0x126>
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
    a080:	79bb      	ldrb	r3, [r7, #6]
    a082:	4618      	mov	r0, r3
    a084:	f7ff ff30 	bl	9ee8 <StallControlPipe>
						return;
    a088:	e00e      	b.n	a0a8 <USBHandleControlTransfer+0x144>
					}
					// send status to host
					DataIn();
    a08a:	f7ff ff47 	bl	9f1c <DataIn>
    a08e:	e00b      	b.n	a0a8 <USBHandleControlTransfer+0x144>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    a090:	2000      	movs	r0, #0
    a092:	2100      	movs	r1, #0
    a094:	2200      	movs	r2, #0
    a096:	f000 fa25 	bl	a4e4 <USBHwEPRead>
    a09a:	60b8      	str	r0, [r7, #8]
    a09c:	e004      	b.n	a0a8 <USBHandleControlTransfer+0x144>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    a09e:	79fb      	ldrb	r3, [r7, #7]
    a0a0:	2b80      	cmp	r3, #128	; 0x80
    a0a2:	d101      	bne.n	a0a8 <USBHandleControlTransfer+0x144>
		// IN transfer
		// send more data if available (possibly a 0-length packet)
		DataIn();
    a0a4:	f7ff ff3a 	bl	9f1c <DataIn>
	}
	else {
		ASSERT(FALSE);
	}
}
    a0a8:	3710      	adds	r7, #16
    a0aa:	46bd      	mov	sp, r7
    a0ac:	bd80      	pop	{r7, pc}
    a0ae:	bf00      	nop
    a0b0:	10000a6c 	.word	0x10000a6c
    a0b4:	10000a90 	.word	0x10000a90
    a0b8:	10000a74 	.word	0x10000a74
    a0bc:	10000a78 	.word	0x10000a78
    a0c0:	10000a7c 	.word	0x10000a7c

0000a0c4 <USBRegisterRequestHandler>:
	@param [in]	iType			Type of request, e.g. REQTYPE_TYPE_STANDARD
	@param [in]	*pfnHandler		Callback function pointer
	@param [in]	*pbDataStore	Data storage area for this type of request
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
    a0c4:	b480      	push	{r7}
    a0c6:	b085      	sub	sp, #20
    a0c8:	af00      	add	r7, sp, #0
    a0ca:	60f8      	str	r0, [r7, #12]
    a0cc:	60b9      	str	r1, [r7, #8]
    a0ce:	607a      	str	r2, [r7, #4]
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    a0d0:	4907      	ldr	r1, [pc, #28]	; (a0f0 <USBRegisterRequestHandler+0x2c>)
    a0d2:	68fb      	ldr	r3, [r7, #12]
    a0d4:	68ba      	ldr	r2, [r7, #8]
    a0d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	apbDataStore[iType] = pbDataStore;
    a0da:	4906      	ldr	r1, [pc, #24]	; (a0f4 <USBRegisterRequestHandler+0x30>)
    a0dc:	68fb      	ldr	r3, [r7, #12]
    a0de:	687a      	ldr	r2, [r7, #4]
    a0e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a0e4:	3714      	adds	r7, #20
    a0e6:	46bd      	mov	sp, r7
    a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0ec:	4770      	bx	lr
    a0ee:	bf00      	nop
    a0f0:	10000a80 	.word	0x10000a80
    a0f4:	10000a90 	.word	0x10000a90

0000a0f8 <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    a0f8:	b480      	push	{r7}
    a0fa:	b083      	sub	sp, #12
    a0fc:	af00      	add	r7, sp, #0
    a0fe:	4603      	mov	r3, r0
    a100:	71fb      	strb	r3, [r7, #7]
	if (bDevStatus & DEV_STATUS_RESET) {
		DBG("\n!");
	}
}
    a102:	370c      	adds	r7, #12
    a104:	46bd      	mov	sp, r7
    a106:	f85d 7b04 	ldr.w	r7, [sp], #4
    a10a:	4770      	bx	lr

0000a10c <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    a10c:	b580      	push	{r7, lr}
    a10e:	af00      	add	r7, sp, #0
	// init hardware
	USBHwInit();
    a110:	f000 fb2a 	bl	a768 <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    a114:	480d      	ldr	r0, [pc, #52]	; (a14c <USBInit+0x40>)
    a116:	f000 f913 	bl	a340 <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    a11a:	2000      	movs	r0, #0
    a11c:	490c      	ldr	r1, [pc, #48]	; (a150 <USBInit+0x44>)
    a11e:	f000 f8dd 	bl	a2dc <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    a122:	2080      	movs	r0, #128	; 0x80
    a124:	490a      	ldr	r1, [pc, #40]	; (a150 <USBInit+0x44>)
    a126:	f000 f8d9 	bl	a2dc <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    a12a:	2000      	movs	r0, #0
    a12c:	2140      	movs	r1, #64	; 0x40
    a12e:	f000 f8b7 	bl	a2a0 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    a132:	2080      	movs	r0, #128	; 0x80
    a134:	2140      	movs	r1, #64	; 0x40
    a136:	f000 f8b3 	bl	a2a0 <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    a13a:	2000      	movs	r0, #0
    a13c:	4905      	ldr	r1, [pc, #20]	; (a154 <USBInit+0x48>)
    a13e:	4a06      	ldr	r2, [pc, #24]	; (a158 <USBInit+0x4c>)
    a140:	f7ff ffc0 	bl	a0c4 <USBRegisterRequestHandler>

	return TRUE;
    a144:	2301      	movs	r3, #1
}
    a146:	4618      	mov	r0, r3
    a148:	bd80      	pop	{r7, pc}
    a14a:	bf00      	nop
    a14c:	0000a0f9 	.word	0x0000a0f9
    a150:	00009f65 	.word	0x00009f65
    a154:	0000ada1 	.word	0x0000ada1
    a158:	10000aa0 	.word	0x10000aa0

0000a15c <Wait4DevInt>:
    Local function to wait for a device interrupt (and clear it)
        
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    a15c:	b480      	push	{r7}
    a15e:	b083      	sub	sp, #12
    a160:	af00      	add	r7, sp, #0
    a162:	6078      	str	r0, [r7, #4]
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    a164:	bf00      	nop
    a166:	4b07      	ldr	r3, [pc, #28]	; (a184 <Wait4DevInt+0x28>)
    a168:	681a      	ldr	r2, [r3, #0]
    a16a:	687b      	ldr	r3, [r7, #4]
    a16c:	401a      	ands	r2, r3
    a16e:	687b      	ldr	r3, [r7, #4]
    a170:	429a      	cmp	r2, r3
    a172:	d1f8      	bne.n	a166 <Wait4DevInt+0xa>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    a174:	4a04      	ldr	r2, [pc, #16]	; (a188 <Wait4DevInt+0x2c>)
    a176:	687b      	ldr	r3, [r7, #4]
    a178:	6013      	str	r3, [r2, #0]
}
    a17a:	370c      	adds	r7, #12
    a17c:	46bd      	mov	sp, r7
    a17e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a182:	4770      	bx	lr
    a184:	5000c200 	.word	0x5000c200
    a188:	5000c208 	.word	0x5000c208

0000a18c <USBHwCmd>:
    Local function to send a command to the USB protocol engine
        
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    a18c:	b580      	push	{r7, lr}
    a18e:	b082      	sub	sp, #8
    a190:	af00      	add	r7, sp, #0
    a192:	4603      	mov	r3, r0
    a194:	71fb      	strb	r3, [r7, #7]
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    a196:	4b07      	ldr	r3, [pc, #28]	; (a1b4 <USBHwCmd+0x28>)
    a198:	2230      	movs	r2, #48	; 0x30
    a19a:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    a19c:	4a06      	ldr	r2, [pc, #24]	; (a1b8 <USBHwCmd+0x2c>)
    a19e:	79fb      	ldrb	r3, [r7, #7]
    a1a0:	041b      	lsls	r3, r3, #16
    a1a2:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    a1a6:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    a1a8:	2010      	movs	r0, #16
    a1aa:	f7ff ffd7 	bl	a15c <Wait4DevInt>
}
    a1ae:	3708      	adds	r7, #8
    a1b0:	46bd      	mov	sp, r7
    a1b2:	bd80      	pop	{r7, pc}
    a1b4:	5000c208 	.word	0x5000c208
    a1b8:	5000c210 	.word	0x5000c210

0000a1bc <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    a1bc:	b580      	push	{r7, lr}
    a1be:	b082      	sub	sp, #8
    a1c0:	af00      	add	r7, sp, #0
    a1c2:	4603      	mov	r3, r0
    a1c4:	460a      	mov	r2, r1
    a1c6:	71fb      	strb	r3, [r7, #7]
    a1c8:	4613      	mov	r3, r2
    a1ca:	80bb      	strh	r3, [r7, #4]
    // write command code
    USBHwCmd(bCmd);
    a1cc:	79fb      	ldrb	r3, [r7, #7]
    a1ce:	4618      	mov	r0, r3
    a1d0:	f7ff ffdc 	bl	a18c <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    a1d4:	4a05      	ldr	r2, [pc, #20]	; (a1ec <USBHwCmdWrite+0x30>)
    a1d6:	88bb      	ldrh	r3, [r7, #4]
    a1d8:	041b      	lsls	r3, r3, #16
    a1da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a1de:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    a1e0:	2010      	movs	r0, #16
    a1e2:	f7ff ffbb 	bl	a15c <Wait4DevInt>
}
    a1e6:	3708      	adds	r7, #8
    a1e8:	46bd      	mov	sp, r7
    a1ea:	bd80      	pop	{r7, pc}
    a1ec:	5000c210 	.word	0x5000c210

0000a1f0 <USBHwCmdRead>:
    @param [in] bCmd        Command to send

    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    a1f0:	b580      	push	{r7, lr}
    a1f2:	b082      	sub	sp, #8
    a1f4:	af00      	add	r7, sp, #0
    a1f6:	4603      	mov	r3, r0
    a1f8:	71fb      	strb	r3, [r7, #7]
    // write command code
    USBHwCmd(bCmd);
    a1fa:	79fb      	ldrb	r3, [r7, #7]
    a1fc:	4618      	mov	r0, r3
    a1fe:	f7ff ffc5 	bl	a18c <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    a202:	4a08      	ldr	r2, [pc, #32]	; (a224 <USBHwCmdRead+0x34>)
    a204:	79fb      	ldrb	r3, [r7, #7]
    a206:	041b      	lsls	r3, r3, #16
    a208:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a20c:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CDFULL);
    a20e:	2020      	movs	r0, #32
    a210:	f7ff ffa4 	bl	a15c <Wait4DevInt>
    return USBCmdData;
    a214:	4b04      	ldr	r3, [pc, #16]	; (a228 <USBHwCmdRead+0x38>)
    a216:	681b      	ldr	r3, [r3, #0]
    a218:	b2db      	uxtb	r3, r3
}
    a21a:	4618      	mov	r0, r3
    a21c:	3708      	adds	r7, #8
    a21e:	46bd      	mov	sp, r7
    a220:	bd80      	pop	{r7, pc}
    a222:	bf00      	nop
    a224:	5000c210 	.word	0x5000c210
    a228:	5000c214 	.word	0x5000c214

0000a22c <USBHwEPRealize>:
        
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    a22c:	b580      	push	{r7, lr}
    a22e:	b082      	sub	sp, #8
    a230:	af00      	add	r7, sp, #0
    a232:	6078      	str	r0, [r7, #4]
    a234:	460b      	mov	r3, r1
    a236:	807b      	strh	r3, [r7, #2]
    USBReEp |= (1 << idx);
    a238:	490a      	ldr	r1, [pc, #40]	; (a264 <USBHwEPRealize+0x38>)
    a23a:	4b0a      	ldr	r3, [pc, #40]	; (a264 <USBHwEPRealize+0x38>)
    a23c:	681b      	ldr	r3, [r3, #0]
    a23e:	2001      	movs	r0, #1
    a240:	687a      	ldr	r2, [r7, #4]
    a242:	fa00 f202 	lsl.w	r2, r0, r2
    a246:	4313      	orrs	r3, r2
    a248:	600b      	str	r3, [r1, #0]
#ifdef LPC17xx
    USBEpIn = idx;
    a24a:	4a07      	ldr	r2, [pc, #28]	; (a268 <USBHwEPRealize+0x3c>)
    a24c:	687b      	ldr	r3, [r7, #4]
    a24e:	6013      	str	r3, [r2, #0]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    a250:	4a06      	ldr	r2, [pc, #24]	; (a26c <USBHwEPRealize+0x40>)
    a252:	887b      	ldrh	r3, [r7, #2]
    a254:	6013      	str	r3, [r2, #0]
    Wait4DevInt(EP_RLZED);
    a256:	f44f 7080 	mov.w	r0, #256	; 0x100
    a25a:	f7ff ff7f 	bl	a15c <Wait4DevInt>
}
    a25e:	3708      	adds	r7, #8
    a260:	46bd      	mov	sp, r7
    a262:	bd80      	pop	{r7, pc}
    a264:	5000c244 	.word	0x5000c244
    a268:	5000c248 	.word	0x5000c248
    a26c:	5000c24c 	.word	0x5000c24c

0000a270 <USBHwEPEnable>:
        
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    a270:	b580      	push	{r7, lr}
    a272:	b082      	sub	sp, #8
    a274:	af00      	add	r7, sp, #0
    a276:	6078      	str	r0, [r7, #4]
    a278:	6039      	str	r1, [r7, #0]
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    a27a:	687b      	ldr	r3, [r7, #4]
    a27c:	b2db      	uxtb	r3, r3
    a27e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a282:	b2db      	uxtb	r3, r3
    a284:	b2da      	uxtb	r2, r3
    a286:	683b      	ldr	r3, [r7, #0]
    a288:	2b00      	cmp	r3, #0
    a28a:	d001      	beq.n	a290 <USBHwEPEnable+0x20>
    a28c:	2300      	movs	r3, #0
    a28e:	e000      	b.n	a292 <USBHwEPEnable+0x22>
    a290:	2320      	movs	r3, #32
    a292:	4610      	mov	r0, r2
    a294:	4619      	mov	r1, r3
    a296:	f7ff ff91 	bl	a1bc <USBHwCmdWrite>
}
    a29a:	3708      	adds	r7, #8
    a29c:	46bd      	mov	sp, r7
    a29e:	bd80      	pop	{r7, pc}

0000a2a0 <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    a2a0:	b580      	push	{r7, lr}
    a2a2:	b084      	sub	sp, #16
    a2a4:	af00      	add	r7, sp, #0
    a2a6:	4603      	mov	r3, r0
    a2a8:	460a      	mov	r2, r1
    a2aa:	71fb      	strb	r3, [r7, #7]
    a2ac:	4613      	mov	r3, r2
    a2ae:	80bb      	strh	r3, [r7, #4]
    int idx;
    
    idx = EP2IDX(bEP);
    a2b0:	79fb      	ldrb	r3, [r7, #7]
    a2b2:	f003 030f 	and.w	r3, r3, #15
    a2b6:	005b      	lsls	r3, r3, #1
    a2b8:	79fa      	ldrb	r2, [r7, #7]
    a2ba:	09d2      	lsrs	r2, r2, #7
    a2bc:	b2d2      	uxtb	r2, r2
    a2be:	4313      	orrs	r3, r2
    a2c0:	60fb      	str	r3, [r7, #12]
    
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);
    a2c2:	88bb      	ldrh	r3, [r7, #4]
    a2c4:	68f8      	ldr	r0, [r7, #12]
    a2c6:	4619      	mov	r1, r3
    a2c8:	f7ff ffb0 	bl	a22c <USBHwEPRealize>

    // enable EP
    USBHwEPEnable(idx, TRUE);
    a2cc:	68f8      	ldr	r0, [r7, #12]
    a2ce:	2101      	movs	r1, #1
    a2d0:	f7ff ffce 	bl	a270 <USBHwEPEnable>
}
    a2d4:	3710      	adds	r7, #16
    a2d6:	46bd      	mov	sp, r7
    a2d8:	bd80      	pop	{r7, pc}
    a2da:	bf00      	nop

0000a2dc <USBHwRegisterEPIntHandler>:
        
    @param [in] bEP             Endpoint number
    @param [in] pfnHandler      Callback function
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    a2dc:	b480      	push	{r7}
    a2de:	b085      	sub	sp, #20
    a2e0:	af00      	add	r7, sp, #0
    a2e2:	4603      	mov	r3, r0
    a2e4:	6039      	str	r1, [r7, #0]
    a2e6:	71fb      	strb	r3, [r7, #7]
    int idx;
    
    idx = EP2IDX(bEP);
    a2e8:	79fb      	ldrb	r3, [r7, #7]
    a2ea:	f003 030f 	and.w	r3, r3, #15
    a2ee:	005b      	lsls	r3, r3, #1
    a2f0:	79fa      	ldrb	r2, [r7, #7]
    a2f2:	09d2      	lsrs	r2, r2, #7
    a2f4:	b2d2      	uxtb	r2, r2
    a2f6:	4313      	orrs	r3, r2
    a2f8:	60fb      	str	r3, [r7, #12]

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    a2fa:	68fb      	ldr	r3, [r7, #12]
    a2fc:	0fda      	lsrs	r2, r3, #31
    a2fe:	4413      	add	r3, r2
    a300:	105b      	asrs	r3, r3, #1
    a302:	4619      	mov	r1, r3
    a304:	4a0b      	ldr	r2, [pc, #44]	; (a334 <USBHwRegisterEPIntHandler+0x58>)
    a306:	683b      	ldr	r3, [r7, #0]
    a308:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    a30c:	490a      	ldr	r1, [pc, #40]	; (a338 <USBHwRegisterEPIntHandler+0x5c>)
    a30e:	4b0a      	ldr	r3, [pc, #40]	; (a338 <USBHwRegisterEPIntHandler+0x5c>)
    a310:	681b      	ldr	r3, [r3, #0]
    a312:	2001      	movs	r0, #1
    a314:	68fa      	ldr	r2, [r7, #12]
    a316:	fa00 f202 	lsl.w	r2, r0, r2
    a31a:	4313      	orrs	r3, r2
    a31c:	600b      	str	r3, [r1, #0]
    USBDevIntEn |= EP_SLOW;
    a31e:	4a07      	ldr	r2, [pc, #28]	; (a33c <USBHwRegisterEPIntHandler+0x60>)
    a320:	4b06      	ldr	r3, [pc, #24]	; (a33c <USBHwRegisterEPIntHandler+0x60>)
    a322:	681b      	ldr	r3, [r3, #0]
    a324:	f043 0304 	orr.w	r3, r3, #4
    a328:	6013      	str	r3, [r2, #0]
    
    DBG("Registered handler for EP 0x%x\n", bEP);
}
    a32a:	3714      	adds	r7, #20
    a32c:	46bd      	mov	sp, r7
    a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a332:	4770      	bx	lr
    a334:	10000aac 	.word	0x10000aac
    a338:	5000c234 	.word	0x5000c234
    a33c:	5000c204 	.word	0x5000c204

0000a340 <USBHwRegisterDevIntHandler>:
    Registers an device status callback
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    a340:	b480      	push	{r7}
    a342:	b083      	sub	sp, #12
    a344:	af00      	add	r7, sp, #0
    a346:	6078      	str	r0, [r7, #4]
    _pfnDevIntHandler = pfnHandler;
    a348:	4a06      	ldr	r2, [pc, #24]	; (a364 <USBHwRegisterDevIntHandler+0x24>)
    a34a:	687b      	ldr	r3, [r7, #4]
    a34c:	6013      	str	r3, [r2, #0]
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    a34e:	4a06      	ldr	r2, [pc, #24]	; (a368 <USBHwRegisterDevIntHandler+0x28>)
    a350:	4b05      	ldr	r3, [pc, #20]	; (a368 <USBHwRegisterDevIntHandler+0x28>)
    a352:	681b      	ldr	r3, [r3, #0]
    a354:	f043 0308 	orr.w	r3, r3, #8
    a358:	6013      	str	r3, [r2, #0]

    DBG("Registered handler for device status\n");
}
    a35a:	370c      	adds	r7, #12
    a35c:	46bd      	mov	sp, r7
    a35e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a362:	4770      	bx	lr
    a364:	10000aa8 	.word	0x10000aa8
    a368:	5000c204 	.word	0x5000c204

0000a36c <USBHwSetAddress>:
    Sets the USB address.
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    a36c:	b580      	push	{r7, lr}
    a36e:	b082      	sub	sp, #8
    a370:	af00      	add	r7, sp, #0
    a372:	4603      	mov	r3, r0
    a374:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    a376:	79fb      	ldrb	r3, [r7, #7]
    a378:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a37c:	b2db      	uxtb	r3, r3
    a37e:	b29b      	uxth	r3, r3
    a380:	20d0      	movs	r0, #208	; 0xd0
    a382:	4619      	mov	r1, r3
    a384:	f7ff ff1a 	bl	a1bc <USBHwCmdWrite>
}
    a388:	3708      	adds	r7, #8
    a38a:	46bd      	mov	sp, r7
    a38c:	bd80      	pop	{r7, pc}
    a38e:	bf00      	nop

0000a390 <USBHwConnect>:
    Connects or disconnects from the USB bus
        
    @param [in] fConnect    If TRUE, connect, otherwise disconnect
 */
void USBHwConnect(BOOL fConnect)
{
    a390:	b580      	push	{r7, lr}
    a392:	b082      	sub	sp, #8
    a394:	af00      	add	r7, sp, #0
    a396:	6078      	str	r0, [r7, #4]
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    a398:	687b      	ldr	r3, [r7, #4]
    a39a:	2b00      	cmp	r3, #0
    a39c:	bf14      	ite	ne
    a39e:	2301      	movne	r3, #1
    a3a0:	2300      	moveq	r3, #0
    a3a2:	b2db      	uxtb	r3, r3
    a3a4:	b29b      	uxth	r3, r3
    a3a6:	20fe      	movs	r0, #254	; 0xfe
    a3a8:	4619      	mov	r1, r3
    a3aa:	f7ff ff07 	bl	a1bc <USBHwCmdWrite>
}
    a3ae:	3708      	adds	r7, #8
    a3b0:	46bd      	mov	sp, r7
    a3b2:	bd80      	pop	{r7, pc}

0000a3b4 <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    a3b4:	b580      	push	{r7, lr}
    a3b6:	b082      	sub	sp, #8
    a3b8:	af00      	add	r7, sp, #0
    a3ba:	4603      	mov	r3, r0
    a3bc:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    a3be:	79fb      	ldrb	r3, [r7, #7]
    a3c0:	b29b      	uxth	r3, r3
    a3c2:	20f3      	movs	r0, #243	; 0xf3
    a3c4:	4619      	mov	r1, r3
    a3c6:	f7ff fef9 	bl	a1bc <USBHwCmdWrite>
}
    a3ca:	3708      	adds	r7, #8
    a3cc:	46bd      	mov	sp, r7
    a3ce:	bd80      	pop	{r7, pc}

0000a3d0 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    a3d0:	b580      	push	{r7, lr}
    a3d2:	b084      	sub	sp, #16
    a3d4:	af00      	add	r7, sp, #0
    a3d6:	4603      	mov	r3, r0
    a3d8:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    a3da:	79fb      	ldrb	r3, [r7, #7]
    a3dc:	f003 030f 	and.w	r3, r3, #15
    a3e0:	005b      	lsls	r3, r3, #1
    a3e2:	79fa      	ldrb	r2, [r7, #7]
    a3e4:	09d2      	lsrs	r2, r2, #7
    a3e6:	b2d2      	uxtb	r2, r2
    a3e8:	4313      	orrs	r3, r2
    a3ea:	60fb      	str	r3, [r7, #12]

    return USBHwCmdRead(CMD_EP_SELECT | idx);
    a3ec:	68fb      	ldr	r3, [r7, #12]
    a3ee:	b2db      	uxtb	r3, r3
    a3f0:	4618      	mov	r0, r3
    a3f2:	f7ff fefd 	bl	a1f0 <USBHwCmdRead>
    a3f6:	4603      	mov	r3, r0
}
    a3f8:	4618      	mov	r0, r3
    a3fa:	3710      	adds	r7, #16
    a3fc:	46bd      	mov	sp, r7
    a3fe:	bd80      	pop	{r7, pc}

0000a400 <USBHwEPStall>:
        
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    a400:	b580      	push	{r7, lr}
    a402:	b084      	sub	sp, #16
    a404:	af00      	add	r7, sp, #0
    a406:	4603      	mov	r3, r0
    a408:	6039      	str	r1, [r7, #0]
    a40a:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    a40c:	79fb      	ldrb	r3, [r7, #7]
    a40e:	f003 030f 	and.w	r3, r3, #15
    a412:	005b      	lsls	r3, r3, #1
    a414:	79fa      	ldrb	r2, [r7, #7]
    a416:	09d2      	lsrs	r2, r2, #7
    a418:	b2d2      	uxtb	r2, r2
    a41a:	4313      	orrs	r3, r2
    a41c:	60fb      	str	r3, [r7, #12]

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    a41e:	68fb      	ldr	r3, [r7, #12]
    a420:	b2db      	uxtb	r3, r3
    a422:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a426:	b2db      	uxtb	r3, r3
    a428:	b2da      	uxtb	r2, r3
    a42a:	683b      	ldr	r3, [r7, #0]
    a42c:	2b00      	cmp	r3, #0
    a42e:	bf14      	ite	ne
    a430:	2301      	movne	r3, #1
    a432:	2300      	moveq	r3, #0
    a434:	b2db      	uxtb	r3, r3
    a436:	b29b      	uxth	r3, r3
    a438:	4610      	mov	r0, r2
    a43a:	4619      	mov	r1, r3
    a43c:	f7ff febe 	bl	a1bc <USBHwCmdWrite>
}
    a440:	3710      	adds	r7, #16
    a442:	46bd      	mov	sp, r7
    a444:	bd80      	pop	{r7, pc}
    a446:	bf00      	nop

0000a448 <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    a448:	b580      	push	{r7, lr}
    a44a:	b086      	sub	sp, #24
    a44c:	af00      	add	r7, sp, #0
    a44e:	4603      	mov	r3, r0
    a450:	60b9      	str	r1, [r7, #8]
    a452:	607a      	str	r2, [r7, #4]
    a454:	73fb      	strb	r3, [r7, #15]
    U32 idx;
    
    idx = EP2IDX(bEP);
    a456:	7bfb      	ldrb	r3, [r7, #15]
    a458:	f003 030f 	and.w	r3, r3, #15
    a45c:	005b      	lsls	r3, r3, #1
    a45e:	7bfa      	ldrb	r2, [r7, #15]
    a460:	09d2      	lsrs	r2, r2, #7
    a462:	b2d2      	uxtb	r2, r2
    a464:	4313      	orrs	r3, r2
    a466:	617b      	str	r3, [r7, #20]
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    a468:	4a1b      	ldr	r2, [pc, #108]	; (a4d8 <USBHwEPWrite+0x90>)
    a46a:	7bfb      	ldrb	r3, [r7, #15]
    a46c:	f003 030f 	and.w	r3, r3, #15
    a470:	009b      	lsls	r3, r3, #2
    a472:	f043 0302 	orr.w	r3, r3, #2
    a476:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    a478:	4a18      	ldr	r2, [pc, #96]	; (a4dc <USBHwEPWrite+0x94>)
    a47a:	687b      	ldr	r3, [r7, #4]
    a47c:	6013      	str	r3, [r2, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    a47e:	e015      	b.n	a4ac <USBHwEPWrite+0x64>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    a480:	4917      	ldr	r1, [pc, #92]	; (a4e0 <USBHwEPWrite+0x98>)
    a482:	68bb      	ldr	r3, [r7, #8]
    a484:	3303      	adds	r3, #3
    a486:	781b      	ldrb	r3, [r3, #0]
    a488:	061a      	lsls	r2, r3, #24
    a48a:	68bb      	ldr	r3, [r7, #8]
    a48c:	3302      	adds	r3, #2
    a48e:	781b      	ldrb	r3, [r3, #0]
    a490:	041b      	lsls	r3, r3, #16
    a492:	431a      	orrs	r2, r3
    a494:	68bb      	ldr	r3, [r7, #8]
    a496:	3301      	adds	r3, #1
    a498:	781b      	ldrb	r3, [r3, #0]
    a49a:	021b      	lsls	r3, r3, #8
    a49c:	4313      	orrs	r3, r2
    a49e:	68ba      	ldr	r2, [r7, #8]
    a4a0:	7812      	ldrb	r2, [r2, #0]
    a4a2:	4313      	orrs	r3, r2
    a4a4:	600b      	str	r3, [r1, #0]
        pbBuf += 4;
    a4a6:	68bb      	ldr	r3, [r7, #8]
    a4a8:	3304      	adds	r3, #4
    a4aa:	60bb      	str	r3, [r7, #8]
    
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
    a4ac:	4b0a      	ldr	r3, [pc, #40]	; (a4d8 <USBHwEPWrite+0x90>)
    a4ae:	681b      	ldr	r3, [r3, #0]
    a4b0:	f003 0302 	and.w	r3, r3, #2
    a4b4:	2b00      	cmp	r3, #0
    a4b6:	d1e3      	bne.n	a480 <USBHwEPWrite+0x38>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
        pbBuf += 4;
    }

    USBCtrl = 0;
    a4b8:	4b07      	ldr	r3, [pc, #28]	; (a4d8 <USBHwEPWrite+0x90>)
    a4ba:	2200      	movs	r2, #0
    a4bc:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    a4be:	697b      	ldr	r3, [r7, #20]
    a4c0:	b2db      	uxtb	r3, r3
    a4c2:	4618      	mov	r0, r3
    a4c4:	f7ff fe62 	bl	a18c <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    a4c8:	20fa      	movs	r0, #250	; 0xfa
    a4ca:	f7ff fe5f 	bl	a18c <USBHwCmd>
    
    return iLen;
    a4ce:	687b      	ldr	r3, [r7, #4]
}
    a4d0:	4618      	mov	r0, r3
    a4d2:	3718      	adds	r7, #24
    a4d4:	46bd      	mov	sp, r7
    a4d6:	bd80      	pop	{r7, pc}
    a4d8:	5000c228 	.word	0x5000c228
    a4dc:	5000c224 	.word	0x5000c224
    a4e0:	5000c21c 	.word	0x5000c21c

0000a4e4 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    a4e4:	b580      	push	{r7, lr}
    a4e6:	b088      	sub	sp, #32
    a4e8:	af00      	add	r7, sp, #0
    a4ea:	4603      	mov	r3, r0
    a4ec:	60b9      	str	r1, [r7, #8]
    a4ee:	607a      	str	r2, [r7, #4]
    a4f0:	73fb      	strb	r3, [r7, #15]
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    a4f2:	7bfb      	ldrb	r3, [r7, #15]
    a4f4:	f003 030f 	and.w	r3, r3, #15
    a4f8:	005b      	lsls	r3, r3, #1
    a4fa:	7bfa      	ldrb	r2, [r7, #15]
    a4fc:	09d2      	lsrs	r2, r2, #7
    a4fe:	b2d2      	uxtb	r2, r2
    a500:	4313      	orrs	r3, r2
    a502:	617b      	str	r3, [r7, #20]
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    a504:	4a27      	ldr	r2, [pc, #156]	; (a5a4 <USBHwEPRead+0xc0>)
    a506:	7bfb      	ldrb	r3, [r7, #15]
    a508:	f003 030f 	and.w	r3, r3, #15
    a50c:	009b      	lsls	r3, r3, #2
    a50e:	f043 0301 	orr.w	r3, r3, #1
    a512:	6013      	str	r3, [r2, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    a514:	4b24      	ldr	r3, [pc, #144]	; (a5a8 <USBHwEPRead+0xc4>)
    a516:	681b      	ldr	r3, [r3, #0]
    a518:	613b      	str	r3, [r7, #16]
    } while ((dwLen & PKT_RDY) == 0);
    a51a:	693b      	ldr	r3, [r7, #16]
    a51c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    a520:	2b00      	cmp	r3, #0
    a522:	d0f7      	beq.n	a514 <USBHwEPRead+0x30>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    a524:	693b      	ldr	r3, [r7, #16]
    a526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a52a:	2b00      	cmp	r3, #0
    a52c:	d102      	bne.n	a534 <USBHwEPRead+0x50>
        return -1;
    a52e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a532:	e033      	b.n	a59c <USBHwEPRead+0xb8>
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    a534:	693b      	ldr	r3, [r7, #16]
    a536:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a53a:	613b      	str	r3, [r7, #16]
    
    // get data
    dwData = 0;
    a53c:	2300      	movs	r3, #0
    a53e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < dwLen; i++) {
    a540:	2300      	movs	r3, #0
    a542:	61fb      	str	r3, [r7, #28]
    a544:	e01a      	b.n	a57c <USBHwEPRead+0x98>
        if ((i % 4) == 0) {
    a546:	69fb      	ldr	r3, [r7, #28]
    a548:	f003 0303 	and.w	r3, r3, #3
    a54c:	2b00      	cmp	r3, #0
    a54e:	d102      	bne.n	a556 <USBHwEPRead+0x72>
            dwData = USBRxData;
    a550:	4b16      	ldr	r3, [pc, #88]	; (a5ac <USBHwEPRead+0xc8>)
    a552:	681b      	ldr	r3, [r3, #0]
    a554:	61bb      	str	r3, [r7, #24]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    a556:	68bb      	ldr	r3, [r7, #8]
    a558:	2b00      	cmp	r3, #0
    a55a:	d009      	beq.n	a570 <USBHwEPRead+0x8c>
    a55c:	69fa      	ldr	r2, [r7, #28]
    a55e:	687b      	ldr	r3, [r7, #4]
    a560:	429a      	cmp	r2, r3
    a562:	d205      	bcs.n	a570 <USBHwEPRead+0x8c>
            pbBuf[i] = dwData & 0xFF;
    a564:	68ba      	ldr	r2, [r7, #8]
    a566:	69fb      	ldr	r3, [r7, #28]
    a568:	4413      	add	r3, r2
    a56a:	69ba      	ldr	r2, [r7, #24]
    a56c:	b2d2      	uxtb	r2, r2
    a56e:	701a      	strb	r2, [r3, #0]
        }
        dwData >>= 8;
    a570:	69bb      	ldr	r3, [r7, #24]
    a572:	0a1b      	lsrs	r3, r3, #8
    a574:	61bb      	str	r3, [r7, #24]
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    a576:	69fb      	ldr	r3, [r7, #28]
    a578:	3301      	adds	r3, #1
    a57a:	61fb      	str	r3, [r7, #28]
    a57c:	69fa      	ldr	r2, [r7, #28]
    a57e:	693b      	ldr	r3, [r7, #16]
    a580:	429a      	cmp	r2, r3
    a582:	d3e0      	bcc.n	a546 <USBHwEPRead+0x62>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    a584:	4b07      	ldr	r3, [pc, #28]	; (a5a4 <USBHwEPRead+0xc0>)
    a586:	2200      	movs	r2, #0
    a588:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    a58a:	697b      	ldr	r3, [r7, #20]
    a58c:	b2db      	uxtb	r3, r3
    a58e:	4618      	mov	r0, r3
    a590:	f7ff fdfc 	bl	a18c <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    a594:	20f2      	movs	r0, #242	; 0xf2
    a596:	f7ff fdf9 	bl	a18c <USBHwCmd>
    
    return dwLen;
    a59a:	693b      	ldr	r3, [r7, #16]
}
    a59c:	4618      	mov	r0, r3
    a59e:	3720      	adds	r7, #32
    a5a0:	46bd      	mov	sp, r7
    a5a2:	bd80      	pop	{r7, pc}
    a5a4:	5000c228 	.word	0x5000c228
    a5a8:	5000c220 	.word	0x5000c220
    a5ac:	5000c218 	.word	0x5000c218

0000a5b0 <USBHwConfigDevice>:
    'configured' bit is set in the device status register.
        
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    a5b0:	b580      	push	{r7, lr}
    a5b2:	b082      	sub	sp, #8
    a5b4:	af00      	add	r7, sp, #0
    a5b6:	6078      	str	r0, [r7, #4]
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    a5b8:	687b      	ldr	r3, [r7, #4]
    a5ba:	2b00      	cmp	r3, #0
    a5bc:	bf14      	ite	ne
    a5be:	2301      	movne	r3, #1
    a5c0:	2300      	moveq	r3, #0
    a5c2:	b2db      	uxtb	r3, r3
    a5c4:	b29b      	uxth	r3, r3
    a5c6:	20d8      	movs	r0, #216	; 0xd8
    a5c8:	4619      	mov	r1, r3
    a5ca:	f7ff fdf7 	bl	a1bc <USBHwCmdWrite>
}
    a5ce:	3708      	adds	r7, #8
    a5d0:	46bd      	mov	sp, r7
    a5d2:	bd80      	pop	{r7, pc}

0000a5d4 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    a5d4:	b580      	push	{r7, lr}
    a5d6:	b086      	sub	sp, #24
    a5d8:	af00      	add	r7, sp, #0

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    a5da:	4b5b      	ldr	r3, [pc, #364]	; (a748 <USBHwISR+0x174>)
    a5dc:	681b      	ldr	r3, [r3, #0]
    a5de:	613b      	str	r3, [r7, #16]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    a5e0:	693b      	ldr	r3, [r7, #16]
    a5e2:	f003 0301 	and.w	r3, r3, #1
    a5e6:	2b00      	cmp	r3, #0
    a5e8:	d010      	beq.n	a60c <USBHwISR+0x38>
        // clear int
        USBDevIntClr = FRAME;
    a5ea:	4b58      	ldr	r3, [pc, #352]	; (a74c <USBHwISR+0x178>)
    a5ec:	2201      	movs	r2, #1
    a5ee:	601a      	str	r2, [r3, #0]
        // call handler
        if (_pfnFrameHandler != NULL) {
    a5f0:	4b57      	ldr	r3, [pc, #348]	; (a750 <USBHwISR+0x17c>)
    a5f2:	681b      	ldr	r3, [r3, #0]
    a5f4:	2b00      	cmp	r3, #0
    a5f6:	d009      	beq.n	a60c <USBHwISR+0x38>
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
    a5f8:	20f5      	movs	r0, #245	; 0xf5
    a5fa:	f7ff fdf9 	bl	a1f0 <USBHwCmdRead>
    a5fe:	4603      	mov	r3, r0
    a600:	81fb      	strh	r3, [r7, #14]
            _pfnFrameHandler(wFrame);
    a602:	4b53      	ldr	r3, [pc, #332]	; (a750 <USBHwISR+0x17c>)
    a604:	681b      	ldr	r3, [r3, #0]
    a606:	89fa      	ldrh	r2, [r7, #14]
    a608:	4610      	mov	r0, r2
    a60a:	4798      	blx	r3
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    a60c:	693b      	ldr	r3, [r7, #16]
    a60e:	f003 0308 	and.w	r3, r3, #8
    a612:	2b00      	cmp	r3, #0
    a614:	d02b      	beq.n	a66e <USBHwISR+0x9a>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    a616:	4b4d      	ldr	r3, [pc, #308]	; (a74c <USBHwISR+0x178>)
    a618:	2208      	movs	r2, #8
    a61a:	601a      	str	r2, [r3, #0]
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
    a61c:	20fe      	movs	r0, #254	; 0xfe
    a61e:	f7ff fde7 	bl	a1f0 <USBHwCmdRead>
    a622:	4603      	mov	r3, r0
    a624:	737b      	strb	r3, [r7, #13]
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    a626:	7b7b      	ldrb	r3, [r7, #13]
    a628:	f003 031a 	and.w	r3, r3, #26
    a62c:	2b00      	cmp	r3, #0
    a62e:	d01e      	beq.n	a66e <USBHwISR+0x9a>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
    a630:	7b7b      	ldrb	r3, [r7, #13]
    a632:	f003 0301 	and.w	r3, r3, #1
    a636:	2b00      	cmp	r3, #0
    a638:	bf14      	ite	ne
    a63a:	2301      	movne	r3, #1
    a63c:	2300      	moveq	r3, #0
    a63e:	b2db      	uxtb	r3, r3
    a640:	b2da      	uxtb	r2, r3
    a642:	7b7b      	ldrb	r3, [r7, #13]
    a644:	f003 0304 	and.w	r3, r3, #4
    a648:	b2db      	uxtb	r3, r3
    a64a:	4313      	orrs	r3, r2
    a64c:	b2da      	uxtb	r2, r3
    a64e:	7b7b      	ldrb	r3, [r7, #13]
    a650:	f003 0310 	and.w	r3, r3, #16
    a654:	b2db      	uxtb	r3, r3
    a656:	4313      	orrs	r3, r2
    a658:	b2db      	uxtb	r3, r3
    a65a:	733b      	strb	r3, [r7, #12]
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    a65c:	4b3d      	ldr	r3, [pc, #244]	; (a754 <USBHwISR+0x180>)
    a65e:	681b      	ldr	r3, [r3, #0]
    a660:	2b00      	cmp	r3, #0
    a662:	d004      	beq.n	a66e <USBHwISR+0x9a>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    a664:	4b3b      	ldr	r3, [pc, #236]	; (a754 <USBHwISR+0x180>)
    a666:	681b      	ldr	r3, [r3, #0]
    a668:	7b3a      	ldrb	r2, [r7, #12]
    a66a:	4610      	mov	r0, r2
    a66c:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    a66e:	693b      	ldr	r3, [r7, #16]
    a670:	f003 0304 	and.w	r3, r3, #4
    a674:	2b00      	cmp	r3, #0
    a676:	d063      	beq.n	a740 <USBHwISR+0x16c>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    a678:	4b34      	ldr	r3, [pc, #208]	; (a74c <USBHwISR+0x178>)
    a67a:	2204      	movs	r2, #4
    a67c:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    a67e:	2300      	movs	r3, #0
    a680:	617b      	str	r3, [r7, #20]
    a682:	e05a      	b.n	a73a <USBHwISR+0x166>
            dwIntBit = (1 << i);
    a684:	2201      	movs	r2, #1
    a686:	697b      	ldr	r3, [r7, #20]
    a688:	fa02 f303 	lsl.w	r3, r2, r3
    a68c:	60bb      	str	r3, [r7, #8]
            if (USBEpIntSt & dwIntBit) {
    a68e:	4b32      	ldr	r3, [pc, #200]	; (a758 <USBHwISR+0x184>)
    a690:	681a      	ldr	r2, [r3, #0]
    a692:	68bb      	ldr	r3, [r7, #8]
    a694:	4013      	ands	r3, r2
    a696:	2b00      	cmp	r3, #0
    a698:	d04c      	beq.n	a734 <USBHwISR+0x160>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    a69a:	4a30      	ldr	r2, [pc, #192]	; (a75c <USBHwISR+0x188>)
    a69c:	68bb      	ldr	r3, [r7, #8]
    a69e:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    a6a0:	2020      	movs	r0, #32
    a6a2:	f7ff fd5b 	bl	a15c <Wait4DevInt>
                bEPStat = USBCmdData;
    a6a6:	4b2e      	ldr	r3, [pc, #184]	; (a760 <USBHwISR+0x18c>)
    a6a8:	681b      	ldr	r3, [r3, #0]
    a6aa:	71fb      	strb	r3, [r7, #7]
                // convert EP pipe stat into something HW independent
                bStat = ((bEPStat & EPSTAT_FE) ? EP_STATUS_DATA : 0) |
    a6ac:	79fb      	ldrb	r3, [r7, #7]
    a6ae:	f003 0301 	and.w	r3, r3, #1
    a6b2:	2b00      	cmp	r3, #0
    a6b4:	bf14      	ite	ne
    a6b6:	2301      	movne	r3, #1
    a6b8:	2300      	moveq	r3, #0
    a6ba:	b2db      	uxtb	r3, r3
    a6bc:	b2da      	uxtb	r2, r3
    a6be:	79fb      	ldrb	r3, [r7, #7]
    a6c0:	f003 0302 	and.w	r3, r3, #2
    a6c4:	b2db      	uxtb	r3, r3
    a6c6:	4313      	orrs	r3, r2
    a6c8:	b2da      	uxtb	r2, r3
    a6ca:	79fb      	ldrb	r3, [r7, #7]
    a6cc:	f003 0304 	and.w	r3, r3, #4
    a6d0:	b2db      	uxtb	r3, r3
    a6d2:	4313      	orrs	r3, r2
    a6d4:	b2da      	uxtb	r2, r3
    a6d6:	79fb      	ldrb	r3, [r7, #7]
    a6d8:	f003 0310 	and.w	r3, r3, #16
    a6dc:	b2db      	uxtb	r3, r3
    a6de:	4313      	orrs	r3, r2
    a6e0:	b2da      	uxtb	r2, r3
    a6e2:	79fb      	ldrb	r3, [r7, #7]
    a6e4:	f003 0308 	and.w	r3, r3, #8
    a6e8:	b2db      	uxtb	r3, r3
    a6ea:	4313      	orrs	r3, r2
    a6ec:	b2db      	uxtb	r3, r3
    a6ee:	733b      	strb	r3, [r7, #12]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    a6f0:	697b      	ldr	r3, [r7, #20]
    a6f2:	0fda      	lsrs	r2, r3, #31
    a6f4:	4413      	add	r3, r2
    a6f6:	105b      	asrs	r3, r3, #1
    a6f8:	461a      	mov	r2, r3
    a6fa:	4b1a      	ldr	r3, [pc, #104]	; (a764 <USBHwISR+0x190>)
    a6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a700:	2b00      	cmp	r3, #0
    a702:	d017      	beq.n	a734 <USBHwISR+0x160>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    a704:	697b      	ldr	r3, [r7, #20]
    a706:	0fda      	lsrs	r2, r3, #31
    a708:	4413      	add	r3, r2
    a70a:	105b      	asrs	r3, r3, #1
    a70c:	461a      	mov	r2, r3
    a70e:	4b15      	ldr	r3, [pc, #84]	; (a764 <USBHwISR+0x190>)
    a710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a714:	697a      	ldr	r2, [r7, #20]
    a716:	01d2      	lsls	r2, r2, #7
    a718:	b2d1      	uxtb	r1, r2
    a71a:	697a      	ldr	r2, [r7, #20]
    a71c:	1052      	asrs	r2, r2, #1
    a71e:	b2d2      	uxtb	r2, r2
    a720:	f002 020f 	and.w	r2, r2, #15
    a724:	b2d2      	uxtb	r2, r2
    a726:	430a      	orrs	r2, r1
    a728:	b2d2      	uxtb	r2, r2
    a72a:	b2d1      	uxtb	r1, r2
    a72c:	7b3a      	ldrb	r2, [r7, #12]
    a72e:	4608      	mov	r0, r1
    a730:	4611      	mov	r1, r2
    a732:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    a734:	697b      	ldr	r3, [r7, #20]
    a736:	3301      	adds	r3, #1
    a738:	617b      	str	r3, [r7, #20]
    a73a:	697b      	ldr	r3, [r7, #20]
    a73c:	2b1f      	cmp	r3, #31
    a73e:	dda1      	ble.n	a684 <USBHwISR+0xb0>
            }
        }
    }
    
DEBUG_LED_OFF(9);       
}
    a740:	3718      	adds	r7, #24
    a742:	46bd      	mov	sp, r7
    a744:	bd80      	pop	{r7, pc}
    a746:	bf00      	nop
    a748:	5000c200 	.word	0x5000c200
    a74c:	5000c208 	.word	0x5000c208
    a750:	10000aec 	.word	0x10000aec
    a754:	10000aa8 	.word	0x10000aa8
    a758:	5000c230 	.word	0x5000c230
    a75c:	5000c238 	.word	0x5000c238
    a760:	5000c214 	.word	0x5000c214
    a764:	10000aac 	.word	0x10000aac

0000a768 <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    a768:	b580      	push	{r7, lr}
    a76a:	af00      	add	r7, sp, #0
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    a76c:	4a2d      	ldr	r2, [pc, #180]	; (a824 <USBHwInit+0xbc>)
    a76e:	4b2d      	ldr	r3, [pc, #180]	; (a824 <USBHwInit+0xbc>)
    a770:	681b      	ldr	r3, [r3, #0]
    a772:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    a776:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    a77a:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    a77c:	4a2a      	ldr	r2, [pc, #168]	; (a828 <USBHwInit+0xc0>)
    a77e:	4b2a      	ldr	r3, [pc, #168]	; (a828 <USBHwInit+0xc0>)
    a780:	681b      	ldr	r3, [r3, #0]
    a782:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    a786:	f043 0310 	orr.w	r3, r3, #16
    a78a:	6013      	str	r3, [r2, #0]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    a78c:	4a26      	ldr	r2, [pc, #152]	; (a828 <USBHwInit+0xc0>)
    a78e:	4b26      	ldr	r3, [pc, #152]	; (a828 <USBHwInit+0xc0>)
    a790:	681b      	ldr	r3, [r3, #0]
    a792:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    a796:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    a79a:	6013      	str	r3, [r2, #0]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    a79c:	4a23      	ldr	r2, [pc, #140]	; (a82c <USBHwInit+0xc4>)
    a79e:	4b23      	ldr	r3, [pc, #140]	; (a82c <USBHwInit+0xc4>)
    a7a0:	681b      	ldr	r3, [r3, #0]
    a7a2:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    a7a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    a7aa:	6013      	str	r3, [r2, #0]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    a7ac:	4a1f      	ldr	r2, [pc, #124]	; (a82c <USBHwInit+0xc4>)
    a7ae:	4b1f      	ldr	r3, [pc, #124]	; (a82c <USBHwInit+0xc4>)
    a7b0:	681b      	ldr	r3, [r3, #0]
    a7b2:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    a7b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    a7ba:	6013      	str	r3, [r2, #0]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    a7bc:	4a1c      	ldr	r2, [pc, #112]	; (a830 <USBHwInit+0xc8>)
    a7be:	4b1c      	ldr	r3, [pc, #112]	; (a830 <USBHwInit+0xc8>)
    a7c0:	681b      	ldr	r3, [r3, #0]
    a7c2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a7c6:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    a7c8:	4a1a      	ldr	r2, [pc, #104]	; (a834 <USBHwInit+0xcc>)
    a7ca:	4b1a      	ldr	r3, [pc, #104]	; (a834 <USBHwInit+0xcc>)
    a7cc:	681b      	ldr	r3, [r3, #0]
    a7ce:	f043 0312 	orr.w	r3, r3, #18
    a7d2:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    a7d4:	bf00      	nop
    a7d6:	4b18      	ldr	r3, [pc, #96]	; (a838 <USBHwInit+0xd0>)
    a7d8:	681b      	ldr	r3, [r3, #0]
    a7da:	f003 0302 	and.w	r3, r3, #2
    a7de:	2b00      	cmp	r3, #0
    a7e0:	d0f9      	beq.n	a7d6 <USBHwInit+0x6e>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    a7e2:	bf00      	nop
    a7e4:	4b14      	ldr	r3, [pc, #80]	; (a838 <USBHwInit+0xd0>)
    a7e6:	681b      	ldr	r3, [r3, #0]
    a7e8:	f003 0310 	and.w	r3, r3, #16
    a7ec:	2b00      	cmp	r3, #0
    a7ee:	d0f9      	beq.n	a7e4 <USBHwInit+0x7c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    a7f0:	4b12      	ldr	r3, [pc, #72]	; (a83c <USBHwInit+0xd4>)
    a7f2:	2200      	movs	r2, #0
    a7f4:	601a      	str	r2, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    a7f6:	4b12      	ldr	r3, [pc, #72]	; (a840 <USBHwInit+0xd8>)
    a7f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a7fc:	601a      	str	r2, [r3, #0]
    USBDevIntPri = 0;
    a7fe:	4b11      	ldr	r3, [pc, #68]	; (a844 <USBHwInit+0xdc>)
    a800:	2200      	movs	r2, #0
    a802:	601a      	str	r2, [r3, #0]

    USBEpIntEn = 0;
    a804:	4b10      	ldr	r3, [pc, #64]	; (a848 <USBHwInit+0xe0>)
    a806:	2200      	movs	r2, #0
    a808:	601a      	str	r2, [r3, #0]
    USBEpIntClr = 0xFFFFFFFF;
    a80a:	4b10      	ldr	r3, [pc, #64]	; (a84c <USBHwInit+0xe4>)
    a80c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a810:	601a      	str	r2, [r3, #0]
    USBEpIntPri = 0;
    a812:	4b0f      	ldr	r3, [pc, #60]	; (a850 <USBHwInit+0xe8>)
    a814:	2200      	movs	r2, #0
    a816:	601a      	str	r2, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    a818:	2000      	movs	r0, #0
    a81a:	f7ff fdcb 	bl	a3b4 <USBHwNakIntEnable>
    // init debug leds
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
    a81e:	2301      	movs	r3, #1
}
    a820:	4618      	mov	r0, r3
    a822:	bd80      	pop	{r7, pc}
    a824:	4002c010 	.word	0x4002c010
    a828:	4002c00c 	.word	0x4002c00c
    a82c:	4002c004 	.word	0x4002c004
    a830:	400fc0c4 	.word	0x400fc0c4
    a834:	5000cff4 	.word	0x5000cff4
    a838:	5000cff8 	.word	0x5000cff8
    a83c:	5000c204 	.word	0x5000c204
    a840:	5000c208 	.word	0x5000c208
    a844:	5000c22c 	.word	0x5000c22c
    a848:	5000c234 	.word	0x5000c234
    a84c:	5000c238 	.word	0x5000c238
    a850:	5000c240 	.word	0x5000c240

0000a854 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    a854:	b480      	push	{r7}
    a856:	b089      	sub	sp, #36	; 0x24
    a858:	af00      	add	r7, sp, #0
    a85a:	60f8      	str	r0, [r7, #12]
    a85c:	60b9      	str	r1, [r7, #8]
    a85e:	607a      	str	r2, [r7, #4]
    a860:	603b      	str	r3, [r7, #0]
	if(bMsVendorIndex == 0)	{
    a862:	4b2d      	ldr	r3, [pc, #180]	; (a918 <USBFilterOsVendorMessage+0xc4>)
    a864:	781b      	ldrb	r3, [r3, #0]
    a866:	2b00      	cmp	r3, #0
    a868:	d101      	bne.n	a86e <USBFilterOsVendorMessage+0x1a>
		// Feature is disabled.
		return FALSE;
    a86a:	2300      	movs	r3, #0
    a86c:	e04e      	b.n	a90c <USBFilterOsVendorMessage+0xb8>
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    a86e:	68fb      	ldr	r3, [r7, #12]
    a870:	785a      	ldrb	r2, [r3, #1]
    a872:	4b29      	ldr	r3, [pc, #164]	; (a918 <USBFilterOsVendorMessage+0xc4>)
    a874:	781b      	ldrb	r3, [r3, #0]
    a876:	429a      	cmp	r2, r3
    a878:	d147      	bne.n	a90a <USBFilterOsVendorMessage+0xb6>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    a87a:	68bb      	ldr	r3, [r7, #8]
    a87c:	2200      	movs	r2, #0
    a87e:	601a      	str	r2, [r3, #0]
	
		int iRequestLength = pSetup->wLength;
    a880:	68fb      	ldr	r3, [r7, #12]
    a882:	88db      	ldrh	r3, [r3, #6]
    a884:	61fb      	str	r3, [r7, #28]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
    a886:	68fb      	ldr	r3, [r7, #12]
    a888:	885b      	ldrh	r3, [r3, #2]
    a88a:	76fb      	strb	r3, [r7, #27]
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    a88c:	68fb      	ldr	r3, [r7, #12]
    a88e:	885b      	ldrh	r3, [r3, #2]
    a890:	0a1b      	lsrs	r3, r3, #8
    a892:	b29b      	uxth	r3, r3
    a894:	76bb      	strb	r3, [r7, #26]
	
		switch (pSetup->wIndex) {
    a896:	68fb      	ldr	r3, [r7, #12]
    a898:	889b      	ldrh	r3, [r3, #4]
    a89a:	2b04      	cmp	r3, #4
    a89c:	d002      	beq.n	a8a4 <USBFilterOsVendorMessage+0x50>
    a89e:	2b05      	cmp	r3, #5
    a8a0:	d007      	beq.n	a8b2 <USBFilterOsVendorMessage+0x5e>
    a8a2:	e00d      	b.n	a8c0 <USBFilterOsVendorMessage+0x6c>
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    a8a4:	683b      	ldr	r3, [r7, #0]
    a8a6:	4a1d      	ldr	r2, [pc, #116]	; (a91c <USBFilterOsVendorMessage+0xc8>)
    a8a8:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    a8aa:	687b      	ldr	r3, [r7, #4]
    a8ac:	2228      	movs	r2, #40	; 0x28
    a8ae:	601a      	str	r2, [r3, #0]
			break;
    a8b0:	e008      	b.n	a8c4 <USBFilterOsVendorMessage+0x70>
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    a8b2:	683b      	ldr	r3, [r7, #0]
    a8b4:	4a1a      	ldr	r2, [pc, #104]	; (a920 <USBFilterOsVendorMessage+0xcc>)
    a8b6:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    a8b8:	687b      	ldr	r3, [r7, #4]
    a8ba:	2292      	movs	r2, #146	; 0x92
    a8bc:	601a      	str	r2, [r3, #0]
			break;
    a8be:	e001      	b.n	a8c4 <USBFilterOsVendorMessage+0x70>

		default:
			return TRUE;
    a8c0:	2301      	movs	r3, #1
    a8c2:	e023      	b.n	a90c <USBFilterOsVendorMessage+0xb8>
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    a8c4:	7ebb      	ldrb	r3, [r7, #26]
    a8c6:	041b      	lsls	r3, r3, #16
    a8c8:	617b      	str	r3, [r7, #20]
		if (*piLen < iPageOffset) {
    a8ca:	687b      	ldr	r3, [r7, #4]
    a8cc:	681a      	ldr	r2, [r3, #0]
    a8ce:	697b      	ldr	r3, [r7, #20]
    a8d0:	429a      	cmp	r2, r3
    a8d2:	da01      	bge.n	a8d8 <USBFilterOsVendorMessage+0x84>
			// Not enough data for the requested offset.
			return TRUE;
    a8d4:	2301      	movs	r3, #1
    a8d6:	e019      	b.n	a90c <USBFilterOsVendorMessage+0xb8>
		}
		*ppbData += iPageOffset;
    a8d8:	683b      	ldr	r3, [r7, #0]
    a8da:	681a      	ldr	r2, [r3, #0]
    a8dc:	697b      	ldr	r3, [r7, #20]
    a8de:	441a      	add	r2, r3
    a8e0:	683b      	ldr	r3, [r7, #0]
    a8e2:	601a      	str	r2, [r3, #0]
		*piLen -= iPageOffset;
    a8e4:	687b      	ldr	r3, [r7, #4]
    a8e6:	681a      	ldr	r2, [r3, #0]
    a8e8:	697b      	ldr	r3, [r7, #20]
    a8ea:	1ad2      	subs	r2, r2, r3
    a8ec:	687b      	ldr	r3, [r7, #4]
    a8ee:	601a      	str	r2, [r3, #0]
		
		if (*piLen > iRequestLength) {
    a8f0:	687b      	ldr	r3, [r7, #4]
    a8f2:	681a      	ldr	r2, [r3, #0]
    a8f4:	69fb      	ldr	r3, [r7, #28]
    a8f6:	429a      	cmp	r2, r3
    a8f8:	dd02      	ble.n	a900 <USBFilterOsVendorMessage+0xac>
			// Clip data longer than the requested length
			*piLen = iRequestLength;
    a8fa:	687b      	ldr	r3, [r7, #4]
    a8fc:	69fa      	ldr	r2, [r7, #28]
    a8fe:	601a      	str	r2, [r3, #0]
		}
	
		*pfSuccess = TRUE;
    a900:	68bb      	ldr	r3, [r7, #8]
    a902:	2201      	movs	r2, #1
    a904:	601a      	str	r2, [r3, #0]
		return TRUE;
    a906:	2301      	movs	r3, #1
    a908:	e000      	b.n	a90c <USBFilterOsVendorMessage+0xb8>
	}
	
	// These are not the requests you are looking for
	return FALSE;
    a90a:	2300      	movs	r3, #0
}
    a90c:	4618      	mov	r0, r3
    a90e:	3724      	adds	r7, #36	; 0x24
    a910:	46bd      	mov	sp, r7
    a912:	f85d 7b04 	ldr.w	r7, [sp], #4
    a916:	4770      	bx	lr
    a918:	10000afc 	.word	0x10000afc
    a91c:	0000c1ec 	.word	0x0000c1ec
    a920:	100008cc 	.word	0x100008cc

0000a924 <USBRegisterWinusbInterface>:
	@param [in]		pcInterfaceGuid			ASCII String GUID in curly braces
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
    a924:	b480      	push	{r7}
    a926:	b087      	sub	sp, #28
    a928:	af00      	add	r7, sp, #0
    a92a:	4603      	mov	r3, r0
    a92c:	6039      	str	r1, [r7, #0]
    a92e:	71fb      	strb	r3, [r7, #7]
	bMsVendorIndex = bVendorRequestIndex;
    a930:	4a18      	ldr	r2, [pc, #96]	; (a994 <USBRegisterWinusbInterface+0x70>)
    a932:	79fb      	ldrb	r3, [r7, #7]
    a934:	7013      	strb	r3, [r2, #0]
	
	if(!pcInterfaceGuid) {
    a936:	683b      	ldr	r3, [r7, #0]
    a938:	2b00      	cmp	r3, #0
    a93a:	d100      	bne.n	a93e <USBRegisterWinusbInterface+0x1a>
		return; // Trust that caller is actually specifying this with nonzero RequestIndex.
    a93c:	e024      	b.n	a988 <USBRegisterWinusbInterface+0x64>
	}
	
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
    a93e:	4b16      	ldr	r3, [pc, #88]	; (a998 <USBRegisterWinusbInterface+0x74>)
    a940:	617b      	str	r3, [r7, #20]
	const int ciMaxLength = 38;
    a942:	2326      	movs	r3, #38	; 0x26
    a944:	60fb      	str	r3, [r7, #12]
	
	for(int i = 0; i < ciMaxLength; i++) {
    a946:	2300      	movs	r3, #0
    a948:	613b      	str	r3, [r7, #16]
    a94a:	e012      	b.n	a972 <USBRegisterWinusbInterface+0x4e>
		if(!pcInterfaceGuid[i]) break;
    a94c:	693b      	ldr	r3, [r7, #16]
    a94e:	683a      	ldr	r2, [r7, #0]
    a950:	4413      	add	r3, r2
    a952:	781b      	ldrb	r3, [r3, #0]
    a954:	2b00      	cmp	r3, #0
    a956:	d100      	bne.n	a95a <USBRegisterWinusbInterface+0x36>
    a958:	e00f      	b.n	a97a <USBRegisterWinusbInterface+0x56>
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    a95a:	693b      	ldr	r3, [r7, #16]
    a95c:	683a      	ldr	r2, [r7, #0]
    a95e:	4413      	add	r3, r2
    a960:	781a      	ldrb	r2, [r3, #0]
    a962:	697b      	ldr	r3, [r7, #20]
    a964:	701a      	strb	r2, [r3, #0]
		pbWriteCursor += 2;
    a966:	697b      	ldr	r3, [r7, #20]
    a968:	3302      	adds	r3, #2
    a96a:	617b      	str	r3, [r7, #20]
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    a96c:	693b      	ldr	r3, [r7, #16]
    a96e:	3301      	adds	r3, #1
    a970:	613b      	str	r3, [r7, #16]
    a972:	693a      	ldr	r2, [r7, #16]
    a974:	68fb      	ldr	r3, [r7, #12]
    a976:	429a      	cmp	r2, r3
    a978:	dbe8      	blt.n	a94c <USBRegisterWinusbInterface+0x28>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    a97a:	697b      	ldr	r3, [r7, #20]
    a97c:	2200      	movs	r2, #0
    a97e:	701a      	strb	r2, [r3, #0]
	pbWriteCursor[2] = 0;
    a980:	697b      	ldr	r3, [r7, #20]
    a982:	3302      	adds	r3, #2
    a984:	2200      	movs	r2, #0
    a986:	701a      	strb	r2, [r3, #0]
	
}
    a988:	371c      	adds	r7, #28
    a98a:	46bd      	mov	sp, r7
    a98c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a990:	4770      	bx	lr
    a992:	bf00      	nop
    a994:	10000afc 	.word	0x10000afc
    a998:	1000090e 	.word	0x1000090e

0000a99c <USBGetOsStringDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
    a99c:	b480      	push	{r7}
    a99e:	b083      	sub	sp, #12
    a9a0:	af00      	add	r7, sp, #0
    a9a2:	6078      	str	r0, [r7, #4]
    a9a4:	6039      	str	r1, [r7, #0]
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    a9a6:	4b08      	ldr	r3, [pc, #32]	; (a9c8 <USBGetOsStringDescriptor+0x2c>)
    a9a8:	781a      	ldrb	r2, [r3, #0]
    a9aa:	4b08      	ldr	r3, [pc, #32]	; (a9cc <USBGetOsStringDescriptor+0x30>)
    a9ac:	741a      	strb	r2, [r3, #16]
	
	*ppbData = abOsStringDescriptor;
    a9ae:	683b      	ldr	r3, [r7, #0]
    a9b0:	4a06      	ldr	r2, [pc, #24]	; (a9cc <USBGetOsStringDescriptor+0x30>)
    a9b2:	601a      	str	r2, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    a9b4:	687b      	ldr	r3, [r7, #4]
    a9b6:	2212      	movs	r2, #18
    a9b8:	601a      	str	r2, [r3, #0]
	return TRUE;
    a9ba:	2301      	movs	r3, #1
}
    a9bc:	4618      	mov	r0, r3
    a9be:	370c      	adds	r7, #12
    a9c0:	46bd      	mov	sp, r7
    a9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9c6:	4770      	bx	lr
    a9c8:	10000afc 	.word	0x10000afc
    a9cc:	100008b8 	.word	0x100008b8

0000a9d0 <USBRegisterDescriptors>:
	for the device.

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(const U8 *pabDescriptors)
{
    a9d0:	b480      	push	{r7}
    a9d2:	b083      	sub	sp, #12
    a9d4:	af00      	add	r7, sp, #0
    a9d6:	6078      	str	r0, [r7, #4]
	pabDescrip = pabDescriptors;
    a9d8:	4a03      	ldr	r2, [pc, #12]	; (a9e8 <USBRegisterDescriptors+0x18>)
    a9da:	687b      	ldr	r3, [r7, #4]
    a9dc:	6013      	str	r3, [r2, #0]
}
    a9de:	370c      	adds	r7, #12
    a9e0:	46bd      	mov	sp, r7
    a9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9e6:	4770      	bx	lr
    a9e8:	10000af8 	.word	0x10000af8

0000a9ec <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    a9ec:	b580      	push	{r7, lr}
    a9ee:	b088      	sub	sp, #32
    a9f0:	af00      	add	r7, sp, #0
    a9f2:	60ba      	str	r2, [r7, #8]
    a9f4:	607b      	str	r3, [r7, #4]
    a9f6:	4603      	mov	r3, r0
    a9f8:	81fb      	strh	r3, [r7, #14]
    a9fa:	460b      	mov	r3, r1
    a9fc:	81bb      	strh	r3, [r7, #12]
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    a9fe:	89fb      	ldrh	r3, [r7, #14]
    aa00:	0a1b      	lsrs	r3, r3, #8
    aa02:	b29b      	uxth	r3, r3
    aa04:	75fb      	strb	r3, [r7, #23]
	bIndex = GET_DESC_INDEX(wTypeIndex);
    aa06:	89fb      	ldrh	r3, [r7, #14]
    aa08:	75bb      	strb	r3, [r7, #22]
	
    if (bType == DESC_STRING &&
    aa0a:	7dfb      	ldrb	r3, [r7, #23]
    aa0c:	2b03      	cmp	r3, #3
    aa0e:	d10b      	bne.n	aa28 <USBGetDescriptor+0x3c>
    aa10:	7dbb      	ldrb	r3, [r7, #22]
    aa12:	2bee      	cmp	r3, #238	; 0xee
    aa14:	d108      	bne.n	aa28 <USBGetDescriptor+0x3c>
        bIndex == DESC_STRING_OS) {
        
        if (USBGetOsStringDescriptor(piLen, ppbData)) {
    aa16:	68b8      	ldr	r0, [r7, #8]
    aa18:	6879      	ldr	r1, [r7, #4]
    aa1a:	f7ff ffbf 	bl	a99c <USBGetOsStringDescriptor>
    aa1e:	4603      	mov	r3, r0
    aa20:	2b00      	cmp	r3, #0
    aa22:	d001      	beq.n	aa28 <USBGetDescriptor+0x3c>
            
            return TRUE;
    aa24:	2301      	movs	r3, #1
    aa26:	e036      	b.n	aa96 <USBGetDescriptor+0xaa>
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    aa28:	4b1d      	ldr	r3, [pc, #116]	; (aaa0 <USBGetDescriptor+0xb4>)
    aa2a:	681b      	ldr	r3, [r3, #0]
    aa2c:	61fb      	str	r3, [r7, #28]
	iCurIndex = 0;
    aa2e:	2300      	movs	r3, #0
    aa30:	61bb      	str	r3, [r7, #24]
	
	while (pab[DESC_bLength] != 0) {
    aa32:	e02b      	b.n	aa8c <USBGetDescriptor+0xa0>
		if (pab[DESC_bDescriptorType] == bType) {
    aa34:	69fb      	ldr	r3, [r7, #28]
    aa36:	3301      	adds	r3, #1
    aa38:	781b      	ldrb	r3, [r3, #0]
    aa3a:	7dfa      	ldrb	r2, [r7, #23]
    aa3c:	429a      	cmp	r2, r3
    aa3e:	d11f      	bne.n	aa80 <USBGetDescriptor+0x94>
			if (iCurIndex == bIndex) {
    aa40:	7dba      	ldrb	r2, [r7, #22]
    aa42:	69bb      	ldr	r3, [r7, #24]
    aa44:	429a      	cmp	r2, r3
    aa46:	d118      	bne.n	aa7a <USBGetDescriptor+0x8e>
				// set data pointer
				*ppbData = pab;
    aa48:	687b      	ldr	r3, [r7, #4]
    aa4a:	69fa      	ldr	r2, [r7, #28]
    aa4c:	601a      	str	r2, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    aa4e:	7dfb      	ldrb	r3, [r7, #23]
    aa50:	2b02      	cmp	r3, #2
    aa52:	d10b      	bne.n	aa6c <USBGetDescriptor+0x80>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    aa54:	69fb      	ldr	r3, [r7, #28]
    aa56:	3302      	adds	r3, #2
    aa58:	781b      	ldrb	r3, [r3, #0]
    aa5a:	461a      	mov	r2, r3
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    aa5c:	69fb      	ldr	r3, [r7, #28]
    aa5e:	3303      	adds	r3, #3
    aa60:	781b      	ldrb	r3, [r3, #0]
    aa62:	021b      	lsls	r3, r3, #8
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    aa64:	431a      	orrs	r2, r3
    aa66:	68bb      	ldr	r3, [r7, #8]
    aa68:	601a      	str	r2, [r3, #0]
    aa6a:	e004      	b.n	aa76 <USBGetDescriptor+0x8a>
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    aa6c:	69fb      	ldr	r3, [r7, #28]
    aa6e:	781b      	ldrb	r3, [r3, #0]
    aa70:	461a      	mov	r2, r3
    aa72:	68bb      	ldr	r3, [r7, #8]
    aa74:	601a      	str	r2, [r3, #0]
				}
				return TRUE;
    aa76:	2301      	movs	r3, #1
    aa78:	e00d      	b.n	aa96 <USBGetDescriptor+0xaa>
			}
			iCurIndex++;
    aa7a:	69bb      	ldr	r3, [r7, #24]
    aa7c:	3301      	adds	r3, #1
    aa7e:	61bb      	str	r3, [r7, #24]
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    aa80:	69fb      	ldr	r3, [r7, #28]
    aa82:	781b      	ldrb	r3, [r3, #0]
    aa84:	461a      	mov	r2, r3
    aa86:	69fb      	ldr	r3, [r7, #28]
    aa88:	4413      	add	r3, r2
    aa8a:	61fb      	str	r3, [r7, #28]
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    aa8c:	69fb      	ldr	r3, [r7, #28]
    aa8e:	781b      	ldrb	r3, [r3, #0]
    aa90:	2b00      	cmp	r3, #0
    aa92:	d1cf      	bne.n	aa34 <USBGetDescriptor+0x48>
		// skip to next descriptor
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
    aa94:	2300      	movs	r3, #0
}
    aa96:	4618      	mov	r0, r3
    aa98:	3720      	adds	r7, #32
    aa9a:	46bd      	mov	sp, r7
    aa9c:	bd80      	pop	{r7, pc}
    aa9e:	bf00      	nop
    aaa0:	10000af8 	.word	0x10000af8

0000aaa4 <USBSetConfiguration>:
	@todo function always returns TRUE, add stricter checking?
	
	@return TRUE if successfully configured, FALSE otherwise
 */
static BOOL USBSetConfiguration(U8 bConfigIndex, U8 bAltSetting)
{
    aaa4:	b580      	push	{r7, lr}
    aaa6:	b086      	sub	sp, #24
    aaa8:	af00      	add	r7, sp, #0
    aaaa:	4603      	mov	r3, r0
    aaac:	460a      	mov	r2, r1
    aaae:	71fb      	strb	r3, [r7, #7]
    aab0:	4613      	mov	r3, r2
    aab2:	71bb      	strb	r3, [r7, #6]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    aab4:	79fb      	ldrb	r3, [r7, #7]
    aab6:	2b00      	cmp	r3, #0
    aab8:	d103      	bne.n	aac2 <USBSetConfiguration+0x1e>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    aaba:	2000      	movs	r0, #0
    aabc:	f7ff fd78 	bl	a5b0 <USBHwConfigDevice>
    aac0:	e045      	b.n	ab4e <USBSetConfiguration+0xaa>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    aac2:	4b25      	ldr	r3, [pc, #148]	; (ab58 <USBSetConfiguration+0xb4>)
    aac4:	681b      	ldr	r3, [r3, #0]
    aac6:	617b      	str	r3, [r7, #20]
		bCurConfig = 0xFF;
    aac8:	23ff      	movs	r3, #255	; 0xff
    aaca:	74fb      	strb	r3, [r7, #19]
		bCurAltSetting = 0xFF;
    aacc:	23ff      	movs	r3, #255	; 0xff
    aace:	74bb      	strb	r3, [r7, #18]

		while (pab[DESC_bLength] != 0) {
    aad0:	e036      	b.n	ab40 <USBSetConfiguration+0x9c>

			switch (pab[DESC_bDescriptorType]) {
    aad2:	697b      	ldr	r3, [r7, #20]
    aad4:	3301      	adds	r3, #1
    aad6:	781b      	ldrb	r3, [r3, #0]
    aad8:	2b04      	cmp	r3, #4
    aada:	d008      	beq.n	aaee <USBSetConfiguration+0x4a>
    aadc:	2b05      	cmp	r3, #5
    aade:	d00a      	beq.n	aaf6 <USBSetConfiguration+0x52>
    aae0:	2b02      	cmp	r3, #2
    aae2:	d000      	beq.n	aae6 <USBSetConfiguration+0x42>
					USBHwEPConfig(bEP, wMaxPktSize);
				}
				break;

			default:
				break;
    aae4:	e026      	b.n	ab34 <USBSetConfiguration+0x90>

			switch (pab[DESC_bDescriptorType]) {

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    aae6:	697b      	ldr	r3, [r7, #20]
    aae8:	795b      	ldrb	r3, [r3, #5]
    aaea:	74fb      	strb	r3, [r7, #19]
				break;
    aaec:	e022      	b.n	ab34 <USBSetConfiguration+0x90>

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    aaee:	697b      	ldr	r3, [r7, #20]
    aaf0:	78db      	ldrb	r3, [r3, #3]
    aaf2:	74bb      	strb	r3, [r7, #18]
				break;
    aaf4:	e01e      	b.n	ab34 <USBSetConfiguration+0x90>

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    aaf6:	7cfa      	ldrb	r2, [r7, #19]
    aaf8:	79fb      	ldrb	r3, [r7, #7]
    aafa:	429a      	cmp	r2, r3
    aafc:	d119      	bne.n	ab32 <USBSetConfiguration+0x8e>
    aafe:	7cba      	ldrb	r2, [r7, #18]
    ab00:	79bb      	ldrb	r3, [r7, #6]
    ab02:	429a      	cmp	r2, r3
    ab04:	d115      	bne.n	ab32 <USBSetConfiguration+0x8e>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
    ab06:	697b      	ldr	r3, [r7, #20]
    ab08:	789b      	ldrb	r3, [r3, #2]
    ab0a:	747b      	strb	r3, [r7, #17]
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    ab0c:	697b      	ldr	r3, [r7, #20]
    ab0e:	3304      	adds	r3, #4
    ab10:	781b      	ldrb	r3, [r3, #0]
    ab12:	b29a      	uxth	r2, r3
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    ab14:	697b      	ldr	r3, [r7, #20]
    ab16:	3305      	adds	r3, #5
    ab18:	781b      	ldrb	r3, [r3, #0]
    ab1a:	021b      	lsls	r3, r3, #8
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    ab1c:	b29b      	uxth	r3, r3
    ab1e:	4313      	orrs	r3, r2
    ab20:	b29b      	uxth	r3, r3
    ab22:	81fb      	strh	r3, [r7, #14]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    ab24:	7c7a      	ldrb	r2, [r7, #17]
    ab26:	89fb      	ldrh	r3, [r7, #14]
    ab28:	4610      	mov	r0, r2
    ab2a:	4619      	mov	r1, r3
    ab2c:	f7ff fbb8 	bl	a2a0 <USBHwEPConfig>
				}
				break;
    ab30:	e7ff      	b.n	ab32 <USBSetConfiguration+0x8e>
    ab32:	bf00      	nop

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    ab34:	697b      	ldr	r3, [r7, #20]
    ab36:	781b      	ldrb	r3, [r3, #0]
    ab38:	461a      	mov	r2, r3
    ab3a:	697b      	ldr	r3, [r7, #20]
    ab3c:	4413      	add	r3, r2
    ab3e:	617b      	str	r3, [r7, #20]
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    ab40:	697b      	ldr	r3, [r7, #20]
    ab42:	781b      	ldrb	r3, [r3, #0]
    ab44:	2b00      	cmp	r3, #0
    ab46:	d1c4      	bne.n	aad2 <USBSetConfiguration+0x2e>
			// skip to next descriptor
			pab += pab[DESC_bLength];
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    ab48:	2001      	movs	r0, #1
    ab4a:	f7ff fd31 	bl	a5b0 <USBHwConfigDevice>
	}

	return TRUE;
    ab4e:	2301      	movs	r3, #1
}
    ab50:	4618      	mov	r0, r3
    ab52:	3718      	adds	r7, #24
    ab54:	46bd      	mov	sp, r7
    ab56:	bd80      	pop	{r7, pc}
    ab58:	10000af8 	.word	0x10000af8

0000ab5c <HandleStdDeviceReq>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    ab5c:	b580      	push	{r7, lr}
    ab5e:	b086      	sub	sp, #24
    ab60:	af00      	add	r7, sp, #0
    ab62:	60f8      	str	r0, [r7, #12]
    ab64:	60b9      	str	r1, [r7, #8]
    ab66:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    ab68:	687b      	ldr	r3, [r7, #4]
    ab6a:	681b      	ldr	r3, [r3, #0]
    ab6c:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    ab6e:	68fb      	ldr	r3, [r7, #12]
    ab70:	785b      	ldrb	r3, [r3, #1]
    ab72:	2b09      	cmp	r3, #9
    ab74:	d852      	bhi.n	ac1c <HandleStdDeviceReq+0xc0>
    ab76:	a201      	add	r2, pc, #4	; (adr r2, ab7c <HandleStdDeviceReq+0x20>)
    ab78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ab7c:	0000aba5 	.word	0x0000aba5
    ab80:	0000ac15 	.word	0x0000ac15
    ab84:	0000ac1d 	.word	0x0000ac1d
    ab88:	0000ac15 	.word	0x0000ac15
    ab8c:	0000ac1d 	.word	0x0000ac1d
    ab90:	0000abbb 	.word	0x0000abbb
    ab94:	0000abc9 	.word	0x0000abc9
    ab98:	0000ac19 	.word	0x0000ac19
    ab9c:	0000abe1 	.word	0x0000abe1
    aba0:	0000abf1 	.word	0x0000abf1
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    aba4:	697b      	ldr	r3, [r7, #20]
    aba6:	2200      	movs	r2, #0
    aba8:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    abaa:	697b      	ldr	r3, [r7, #20]
    abac:	3301      	adds	r3, #1
    abae:	2200      	movs	r2, #0
    abb0:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    abb2:	68bb      	ldr	r3, [r7, #8]
    abb4:	2202      	movs	r2, #2
    abb6:	601a      	str	r2, [r3, #0]
		break;
    abb8:	e032      	b.n	ac20 <HandleStdDeviceReq+0xc4>
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    abba:	68fb      	ldr	r3, [r7, #12]
    abbc:	885b      	ldrh	r3, [r3, #2]
    abbe:	b2db      	uxtb	r3, r3
    abc0:	4618      	mov	r0, r3
    abc2:	f7ff fbd3 	bl	a36c <USBHwSetAddress>
		break;
    abc6:	e02b      	b.n	ac20 <HandleStdDeviceReq+0xc4>

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    abc8:	68fb      	ldr	r3, [r7, #12]
    abca:	885a      	ldrh	r2, [r3, #2]
    abcc:	68fb      	ldr	r3, [r7, #12]
    abce:	889b      	ldrh	r3, [r3, #4]
    abd0:	4610      	mov	r0, r2
    abd2:	4619      	mov	r1, r3
    abd4:	68ba      	ldr	r2, [r7, #8]
    abd6:	687b      	ldr	r3, [r7, #4]
    abd8:	f7ff ff08 	bl	a9ec <USBGetDescriptor>
    abdc:	4603      	mov	r3, r0
    abde:	e020      	b.n	ac22 <HandleStdDeviceReq+0xc6>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    abe0:	4b12      	ldr	r3, [pc, #72]	; (ac2c <HandleStdDeviceReq+0xd0>)
    abe2:	781a      	ldrb	r2, [r3, #0]
    abe4:	697b      	ldr	r3, [r7, #20]
    abe6:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    abe8:	68bb      	ldr	r3, [r7, #8]
    abea:	2201      	movs	r2, #1
    abec:	601a      	str	r2, [r3, #0]
		break;
    abee:	e017      	b.n	ac20 <HandleStdDeviceReq+0xc4>

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    abf0:	68fb      	ldr	r3, [r7, #12]
    abf2:	885b      	ldrh	r3, [r3, #2]
    abf4:	b2db      	uxtb	r3, r3
    abf6:	4618      	mov	r0, r3
    abf8:	2100      	movs	r1, #0
    abfa:	f7ff ff53 	bl	aaa4 <USBSetConfiguration>
    abfe:	4603      	mov	r3, r0
    ac00:	2b00      	cmp	r3, #0
    ac02:	d101      	bne.n	ac08 <HandleStdDeviceReq+0xac>
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
    ac04:	2300      	movs	r3, #0
    ac06:	e00c      	b.n	ac22 <HandleStdDeviceReq+0xc6>
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    ac08:	68fb      	ldr	r3, [r7, #12]
    ac0a:	885b      	ldrh	r3, [r3, #2]
    ac0c:	b2da      	uxtb	r2, r3
    ac0e:	4b07      	ldr	r3, [pc, #28]	; (ac2c <HandleStdDeviceReq+0xd0>)
    ac10:	701a      	strb	r2, [r3, #0]
		break;
    ac12:	e005      	b.n	ac20 <HandleStdDeviceReq+0xc4>
			// put DEVICE_REMOTE_WAKEUP code here
		}
		if (pSetup->wValue == FEA_TEST_MODE) {
			// put TEST_MODE code here
		}
		return FALSE;
    ac14:	2300      	movs	r3, #0
    ac16:	e004      	b.n	ac22 <HandleStdDeviceReq+0xc6>

	case REQ_SET_DESCRIPTOR:
		DBG("Device req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    ac18:	2300      	movs	r3, #0
    ac1a:	e002      	b.n	ac22 <HandleStdDeviceReq+0xc6>

	default:
		DBG("Illegal device req %d\n", pSetup->bRequest);
		return FALSE;
    ac1c:	2300      	movs	r3, #0
    ac1e:	e000      	b.n	ac22 <HandleStdDeviceReq+0xc6>
	}
	
	return TRUE;
    ac20:	2301      	movs	r3, #1
}
    ac22:	4618      	mov	r0, r3
    ac24:	3718      	adds	r7, #24
    ac26:	46bd      	mov	sp, r7
    ac28:	bd80      	pop	{r7, pc}
    ac2a:	bf00      	nop
    ac2c:	10000af0 	.word	0x10000af0

0000ac30 <HandleStdInterfaceReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    ac30:	b480      	push	{r7}
    ac32:	b087      	sub	sp, #28
    ac34:	af00      	add	r7, sp, #0
    ac36:	60f8      	str	r0, [r7, #12]
    ac38:	60b9      	str	r1, [r7, #8]
    ac3a:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    ac3c:	687b      	ldr	r3, [r7, #4]
    ac3e:	681b      	ldr	r3, [r3, #0]
    ac40:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    ac42:	68fb      	ldr	r3, [r7, #12]
    ac44:	785b      	ldrb	r3, [r3, #1]
    ac46:	2b0b      	cmp	r3, #11
    ac48:	d838      	bhi.n	acbc <HandleStdInterfaceReq+0x8c>
    ac4a:	a201      	add	r2, pc, #4	; (adr r2, ac50 <HandleStdInterfaceReq+0x20>)
    ac4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ac50:	0000ac81 	.word	0x0000ac81
    ac54:	0000ac97 	.word	0x0000ac97
    ac58:	0000acbd 	.word	0x0000acbd
    ac5c:	0000ac97 	.word	0x0000ac97
    ac60:	0000acbd 	.word	0x0000acbd
    ac64:	0000acbd 	.word	0x0000acbd
    ac68:	0000acbd 	.word	0x0000acbd
    ac6c:	0000acbd 	.word	0x0000acbd
    ac70:	0000acbd 	.word	0x0000acbd
    ac74:	0000acbd 	.word	0x0000acbd
    ac78:	0000ac9b 	.word	0x0000ac9b
    ac7c:	0000aca9 	.word	0x0000aca9

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    ac80:	697b      	ldr	r3, [r7, #20]
    ac82:	2200      	movs	r2, #0
    ac84:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    ac86:	697b      	ldr	r3, [r7, #20]
    ac88:	3301      	adds	r3, #1
    ac8a:	2200      	movs	r2, #0
    ac8c:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    ac8e:	68bb      	ldr	r3, [r7, #8]
    ac90:	2202      	movs	r2, #2
    ac92:	601a      	str	r2, [r3, #0]
		break;
    ac94:	e014      	b.n	acc0 <HandleStdInterfaceReq+0x90>

	case REQ_CLEAR_FEATURE:
	case REQ_SET_FEATURE:
		// not defined for interface
		return FALSE;
    ac96:	2300      	movs	r3, #0
    ac98:	e013      	b.n	acc2 <HandleStdInterfaceReq+0x92>
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    ac9a:	697b      	ldr	r3, [r7, #20]
    ac9c:	2200      	movs	r2, #0
    ac9e:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    aca0:	68bb      	ldr	r3, [r7, #8]
    aca2:	2201      	movs	r2, #1
    aca4:	601a      	str	r2, [r3, #0]
		break;
    aca6:	e00b      	b.n	acc0 <HandleStdInterfaceReq+0x90>
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    aca8:	68fb      	ldr	r3, [r7, #12]
    acaa:	885b      	ldrh	r3, [r3, #2]
    acac:	2b00      	cmp	r3, #0
    acae:	d001      	beq.n	acb4 <HandleStdInterfaceReq+0x84>
			return FALSE;
    acb0:	2300      	movs	r3, #0
    acb2:	e006      	b.n	acc2 <HandleStdInterfaceReq+0x92>
		}
		*piLen = 0;
    acb4:	68bb      	ldr	r3, [r7, #8]
    acb6:	2200      	movs	r2, #0
    acb8:	601a      	str	r2, [r3, #0]
		break;
    acba:	e001      	b.n	acc0 <HandleStdInterfaceReq+0x90>

	default:
		DBG("Illegal interface req %d\n", pSetup->bRequest);
		return FALSE;
    acbc:	2300      	movs	r3, #0
    acbe:	e000      	b.n	acc2 <HandleStdInterfaceReq+0x92>
	}

	return TRUE;
    acc0:	2301      	movs	r3, #1
}
    acc2:	4618      	mov	r0, r3
    acc4:	371c      	adds	r7, #28
    acc6:	46bd      	mov	sp, r7
    acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    accc:	4770      	bx	lr
    acce:	bf00      	nop

0000acd0 <HandleStdEndPointReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    acd0:	b580      	push	{r7, lr}
    acd2:	b086      	sub	sp, #24
    acd4:	af00      	add	r7, sp, #0
    acd6:	60f8      	str	r0, [r7, #12]
    acd8:	60b9      	str	r1, [r7, #8]
    acda:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    acdc:	687b      	ldr	r3, [r7, #4]
    acde:	681b      	ldr	r3, [r3, #0]
    ace0:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    ace2:	68fb      	ldr	r3, [r7, #12]
    ace4:	785b      	ldrb	r3, [r3, #1]
    ace6:	2b0c      	cmp	r3, #12
    ace8:	d853      	bhi.n	ad92 <HandleStdEndPointReq+0xc2>
    acea:	a201      	add	r2, pc, #4	; (adr r2, acf0 <HandleStdEndPointReq+0x20>)
    acec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    acf0:	0000ad25 	.word	0x0000ad25
    acf4:	0000ad57 	.word	0x0000ad57
    acf8:	0000ad93 	.word	0x0000ad93
    acfc:	0000ad73 	.word	0x0000ad73
    ad00:	0000ad93 	.word	0x0000ad93
    ad04:	0000ad93 	.word	0x0000ad93
    ad08:	0000ad93 	.word	0x0000ad93
    ad0c:	0000ad93 	.word	0x0000ad93
    ad10:	0000ad93 	.word	0x0000ad93
    ad14:	0000ad93 	.word	0x0000ad93
    ad18:	0000ad93 	.word	0x0000ad93
    ad1c:	0000ad93 	.word	0x0000ad93
    ad20:	0000ad8f 	.word	0x0000ad8f
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    ad24:	68fb      	ldr	r3, [r7, #12]
    ad26:	889b      	ldrh	r3, [r3, #4]
    ad28:	b2db      	uxtb	r3, r3
    ad2a:	4618      	mov	r0, r3
    ad2c:	f7ff fb50 	bl	a3d0 <USBHwEPGetStatus>
    ad30:	4603      	mov	r3, r0
    ad32:	f003 0302 	and.w	r3, r3, #2
    ad36:	2b00      	cmp	r3, #0
    ad38:	bf14      	ite	ne
    ad3a:	2301      	movne	r3, #1
    ad3c:	2300      	moveq	r3, #0
    ad3e:	b2db      	uxtb	r3, r3
    ad40:	461a      	mov	r2, r3
    ad42:	697b      	ldr	r3, [r7, #20]
    ad44:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    ad46:	697b      	ldr	r3, [r7, #20]
    ad48:	3301      	adds	r3, #1
    ad4a:	2200      	movs	r2, #0
    ad4c:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    ad4e:	68bb      	ldr	r3, [r7, #8]
    ad50:	2202      	movs	r2, #2
    ad52:	601a      	str	r2, [r3, #0]
		break;
    ad54:	e01f      	b.n	ad96 <HandleStdEndPointReq+0xc6>
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    ad56:	68fb      	ldr	r3, [r7, #12]
    ad58:	885b      	ldrh	r3, [r3, #2]
    ad5a:	2b00      	cmp	r3, #0
    ad5c:	d107      	bne.n	ad6e <HandleStdEndPointReq+0x9e>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    ad5e:	68fb      	ldr	r3, [r7, #12]
    ad60:	889b      	ldrh	r3, [r3, #4]
    ad62:	b2db      	uxtb	r3, r3
    ad64:	4618      	mov	r0, r3
    ad66:	2100      	movs	r1, #0
    ad68:	f7ff fb4a 	bl	a400 <USBHwEPStall>
			break;
    ad6c:	e013      	b.n	ad96 <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    ad6e:	2300      	movs	r3, #0
    ad70:	e012      	b.n	ad98 <HandleStdEndPointReq+0xc8>
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    ad72:	68fb      	ldr	r3, [r7, #12]
    ad74:	885b      	ldrh	r3, [r3, #2]
    ad76:	2b00      	cmp	r3, #0
    ad78:	d107      	bne.n	ad8a <HandleStdEndPointReq+0xba>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    ad7a:	68fb      	ldr	r3, [r7, #12]
    ad7c:	889b      	ldrh	r3, [r3, #4]
    ad7e:	b2db      	uxtb	r3, r3
    ad80:	4618      	mov	r0, r3
    ad82:	2101      	movs	r1, #1
    ad84:	f7ff fb3c 	bl	a400 <USBHwEPStall>
			break;
    ad88:	e005      	b.n	ad96 <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    ad8a:	2300      	movs	r3, #0
    ad8c:	e004      	b.n	ad98 <HandleStdEndPointReq+0xc8>

	case REQ_SYNCH_FRAME:
		DBG("EP req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    ad8e:	2300      	movs	r3, #0
    ad90:	e002      	b.n	ad98 <HandleStdEndPointReq+0xc8>

	default:
		DBG("Illegal EP req %d\n", pSetup->bRequest);
		return FALSE;
    ad92:	2300      	movs	r3, #0
    ad94:	e000      	b.n	ad98 <HandleStdEndPointReq+0xc8>
	}
	
	return TRUE;
    ad96:	2301      	movs	r3, #1
}
    ad98:	4618      	mov	r0, r3
    ad9a:	3718      	adds	r7, #24
    ad9c:	46bd      	mov	sp, r7
    ad9e:	bd80      	pop	{r7, pc}

0000ada0 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    ada0:	b580      	push	{r7, lr}
    ada2:	b084      	sub	sp, #16
    ada4:	af00      	add	r7, sp, #0
    ada6:	60f8      	str	r0, [r7, #12]
    ada8:	60b9      	str	r1, [r7, #8]
    adaa:	607a      	str	r2, [r7, #4]
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    adac:	4b19      	ldr	r3, [pc, #100]	; (ae14 <USBHandleStandardRequest+0x74>)
    adae:	681b      	ldr	r3, [r3, #0]
    adb0:	2b00      	cmp	r3, #0
    adb2:	d00a      	beq.n	adca <USBHandleStandardRequest+0x2a>
    adb4:	4b17      	ldr	r3, [pc, #92]	; (ae14 <USBHandleStandardRequest+0x74>)
    adb6:	681b      	ldr	r3, [r3, #0]
    adb8:	68f8      	ldr	r0, [r7, #12]
    adba:	68b9      	ldr	r1, [r7, #8]
    adbc:	687a      	ldr	r2, [r7, #4]
    adbe:	4798      	blx	r3
    adc0:	4603      	mov	r3, r0
    adc2:	2b00      	cmp	r3, #0
    adc4:	d001      	beq.n	adca <USBHandleStandardRequest+0x2a>
		return TRUE;
    adc6:	2301      	movs	r3, #1
    adc8:	e01f      	b.n	ae0a <USBHandleStandardRequest+0x6a>
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    adca:	68fb      	ldr	r3, [r7, #12]
    adcc:	781b      	ldrb	r3, [r3, #0]
    adce:	f003 031f 	and.w	r3, r3, #31
    add2:	2b01      	cmp	r3, #1
    add4:	d00a      	beq.n	adec <USBHandleStandardRequest+0x4c>
    add6:	2b02      	cmp	r3, #2
    add8:	d00f      	beq.n	adfa <USBHandleStandardRequest+0x5a>
    adda:	2b00      	cmp	r3, #0
    addc:	d114      	bne.n	ae08 <USBHandleStandardRequest+0x68>
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
    adde:	68f8      	ldr	r0, [r7, #12]
    ade0:	68b9      	ldr	r1, [r7, #8]
    ade2:	687a      	ldr	r2, [r7, #4]
    ade4:	f7ff feba 	bl	ab5c <HandleStdDeviceReq>
    ade8:	4603      	mov	r3, r0
    adea:	e00e      	b.n	ae0a <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
    adec:	68f8      	ldr	r0, [r7, #12]
    adee:	68b9      	ldr	r1, [r7, #8]
    adf0:	687a      	ldr	r2, [r7, #4]
    adf2:	f7ff ff1d 	bl	ac30 <HandleStdInterfaceReq>
    adf6:	4603      	mov	r3, r0
    adf8:	e007      	b.n	ae0a <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
    adfa:	68f8      	ldr	r0, [r7, #12]
    adfc:	68b9      	ldr	r1, [r7, #8]
    adfe:	687a      	ldr	r2, [r7, #4]
    ae00:	f7ff ff66 	bl	acd0 <HandleStdEndPointReq>
    ae04:	4603      	mov	r3, r0
    ae06:	e000      	b.n	ae0a <USBHandleStandardRequest+0x6a>
	default: 						return FALSE;
    ae08:	2300      	movs	r3, #0
	}
}
    ae0a:	4618      	mov	r0, r3
    ae0c:	3710      	adds	r7, #16
    ae0e:	46bd      	mov	sp, r7
    ae10:	bd80      	pop	{r7, pc}
    ae12:	bf00      	nop
    ae14:	10000af4 	.word	0x10000af4

0000ae18 <__aeabi_drsub>:
    ae18:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    ae1c:	e002      	b.n	ae24 <__adddf3>
    ae1e:	bf00      	nop

0000ae20 <__aeabi_dsub>:
    ae20:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000ae24 <__adddf3>:
    ae24:	b530      	push	{r4, r5, lr}
    ae26:	ea4f 0441 	mov.w	r4, r1, lsl #1
    ae2a:	ea4f 0543 	mov.w	r5, r3, lsl #1
    ae2e:	ea94 0f05 	teq	r4, r5
    ae32:	bf08      	it	eq
    ae34:	ea90 0f02 	teqeq	r0, r2
    ae38:	bf1f      	itttt	ne
    ae3a:	ea54 0c00 	orrsne.w	ip, r4, r0
    ae3e:	ea55 0c02 	orrsne.w	ip, r5, r2
    ae42:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    ae46:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    ae4a:	f000 80e2 	beq.w	b012 <__adddf3+0x1ee>
    ae4e:	ea4f 5454 	mov.w	r4, r4, lsr #21
    ae52:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    ae56:	bfb8      	it	lt
    ae58:	426d      	neglt	r5, r5
    ae5a:	dd0c      	ble.n	ae76 <__adddf3+0x52>
    ae5c:	442c      	add	r4, r5
    ae5e:	ea80 0202 	eor.w	r2, r0, r2
    ae62:	ea81 0303 	eor.w	r3, r1, r3
    ae66:	ea82 0000 	eor.w	r0, r2, r0
    ae6a:	ea83 0101 	eor.w	r1, r3, r1
    ae6e:	ea80 0202 	eor.w	r2, r0, r2
    ae72:	ea81 0303 	eor.w	r3, r1, r3
    ae76:	2d36      	cmp	r5, #54	; 0x36
    ae78:	bf88      	it	hi
    ae7a:	bd30      	pophi	{r4, r5, pc}
    ae7c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    ae80:	ea4f 3101 	mov.w	r1, r1, lsl #12
    ae84:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    ae88:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    ae8c:	d002      	beq.n	ae94 <__adddf3+0x70>
    ae8e:	4240      	negs	r0, r0
    ae90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    ae94:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    ae98:	ea4f 3303 	mov.w	r3, r3, lsl #12
    ae9c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    aea0:	d002      	beq.n	aea8 <__adddf3+0x84>
    aea2:	4252      	negs	r2, r2
    aea4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    aea8:	ea94 0f05 	teq	r4, r5
    aeac:	f000 80a7 	beq.w	affe <__adddf3+0x1da>
    aeb0:	f1a4 0401 	sub.w	r4, r4, #1
    aeb4:	f1d5 0e20 	rsbs	lr, r5, #32
    aeb8:	db0d      	blt.n	aed6 <__adddf3+0xb2>
    aeba:	fa02 fc0e 	lsl.w	ip, r2, lr
    aebe:	fa22 f205 	lsr.w	r2, r2, r5
    aec2:	1880      	adds	r0, r0, r2
    aec4:	f141 0100 	adc.w	r1, r1, #0
    aec8:	fa03 f20e 	lsl.w	r2, r3, lr
    aecc:	1880      	adds	r0, r0, r2
    aece:	fa43 f305 	asr.w	r3, r3, r5
    aed2:	4159      	adcs	r1, r3
    aed4:	e00e      	b.n	aef4 <__adddf3+0xd0>
    aed6:	f1a5 0520 	sub.w	r5, r5, #32
    aeda:	f10e 0e20 	add.w	lr, lr, #32
    aede:	2a01      	cmp	r2, #1
    aee0:	fa03 fc0e 	lsl.w	ip, r3, lr
    aee4:	bf28      	it	cs
    aee6:	f04c 0c02 	orrcs.w	ip, ip, #2
    aeea:	fa43 f305 	asr.w	r3, r3, r5
    aeee:	18c0      	adds	r0, r0, r3
    aef0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    aef4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    aef8:	d507      	bpl.n	af0a <__adddf3+0xe6>
    aefa:	f04f 0e00 	mov.w	lr, #0
    aefe:	f1dc 0c00 	rsbs	ip, ip, #0
    af02:	eb7e 0000 	sbcs.w	r0, lr, r0
    af06:	eb6e 0101 	sbc.w	r1, lr, r1
    af0a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    af0e:	d31b      	bcc.n	af48 <__adddf3+0x124>
    af10:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    af14:	d30c      	bcc.n	af30 <__adddf3+0x10c>
    af16:	0849      	lsrs	r1, r1, #1
    af18:	ea5f 0030 	movs.w	r0, r0, rrx
    af1c:	ea4f 0c3c 	mov.w	ip, ip, rrx
    af20:	f104 0401 	add.w	r4, r4, #1
    af24:	ea4f 5244 	mov.w	r2, r4, lsl #21
    af28:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    af2c:	f080 809a 	bcs.w	b064 <__adddf3+0x240>
    af30:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    af34:	bf08      	it	eq
    af36:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    af3a:	f150 0000 	adcs.w	r0, r0, #0
    af3e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    af42:	ea41 0105 	orr.w	r1, r1, r5
    af46:	bd30      	pop	{r4, r5, pc}
    af48:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    af4c:	4140      	adcs	r0, r0
    af4e:	eb41 0101 	adc.w	r1, r1, r1
    af52:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    af56:	f1a4 0401 	sub.w	r4, r4, #1
    af5a:	d1e9      	bne.n	af30 <__adddf3+0x10c>
    af5c:	f091 0f00 	teq	r1, #0
    af60:	bf04      	itt	eq
    af62:	4601      	moveq	r1, r0
    af64:	2000      	moveq	r0, #0
    af66:	fab1 f381 	clz	r3, r1
    af6a:	bf08      	it	eq
    af6c:	3320      	addeq	r3, #32
    af6e:	f1a3 030b 	sub.w	r3, r3, #11
    af72:	f1b3 0220 	subs.w	r2, r3, #32
    af76:	da0c      	bge.n	af92 <__adddf3+0x16e>
    af78:	320c      	adds	r2, #12
    af7a:	dd08      	ble.n	af8e <__adddf3+0x16a>
    af7c:	f102 0c14 	add.w	ip, r2, #20
    af80:	f1c2 020c 	rsb	r2, r2, #12
    af84:	fa01 f00c 	lsl.w	r0, r1, ip
    af88:	fa21 f102 	lsr.w	r1, r1, r2
    af8c:	e00c      	b.n	afa8 <__adddf3+0x184>
    af8e:	f102 0214 	add.w	r2, r2, #20
    af92:	bfd8      	it	le
    af94:	f1c2 0c20 	rsble	ip, r2, #32
    af98:	fa01 f102 	lsl.w	r1, r1, r2
    af9c:	fa20 fc0c 	lsr.w	ip, r0, ip
    afa0:	bfdc      	itt	le
    afa2:	ea41 010c 	orrle.w	r1, r1, ip
    afa6:	4090      	lslle	r0, r2
    afa8:	1ae4      	subs	r4, r4, r3
    afaa:	bfa2      	ittt	ge
    afac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    afb0:	4329      	orrge	r1, r5
    afb2:	bd30      	popge	{r4, r5, pc}
    afb4:	ea6f 0404 	mvn.w	r4, r4
    afb8:	3c1f      	subs	r4, #31
    afba:	da1c      	bge.n	aff6 <__adddf3+0x1d2>
    afbc:	340c      	adds	r4, #12
    afbe:	dc0e      	bgt.n	afde <__adddf3+0x1ba>
    afc0:	f104 0414 	add.w	r4, r4, #20
    afc4:	f1c4 0220 	rsb	r2, r4, #32
    afc8:	fa20 f004 	lsr.w	r0, r0, r4
    afcc:	fa01 f302 	lsl.w	r3, r1, r2
    afd0:	ea40 0003 	orr.w	r0, r0, r3
    afd4:	fa21 f304 	lsr.w	r3, r1, r4
    afd8:	ea45 0103 	orr.w	r1, r5, r3
    afdc:	bd30      	pop	{r4, r5, pc}
    afde:	f1c4 040c 	rsb	r4, r4, #12
    afe2:	f1c4 0220 	rsb	r2, r4, #32
    afe6:	fa20 f002 	lsr.w	r0, r0, r2
    afea:	fa01 f304 	lsl.w	r3, r1, r4
    afee:	ea40 0003 	orr.w	r0, r0, r3
    aff2:	4629      	mov	r1, r5
    aff4:	bd30      	pop	{r4, r5, pc}
    aff6:	fa21 f004 	lsr.w	r0, r1, r4
    affa:	4629      	mov	r1, r5
    affc:	bd30      	pop	{r4, r5, pc}
    affe:	f094 0f00 	teq	r4, #0
    b002:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    b006:	bf06      	itte	eq
    b008:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    b00c:	3401      	addeq	r4, #1
    b00e:	3d01      	subne	r5, #1
    b010:	e74e      	b.n	aeb0 <__adddf3+0x8c>
    b012:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b016:	bf18      	it	ne
    b018:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b01c:	d029      	beq.n	b072 <__adddf3+0x24e>
    b01e:	ea94 0f05 	teq	r4, r5
    b022:	bf08      	it	eq
    b024:	ea90 0f02 	teqeq	r0, r2
    b028:	d005      	beq.n	b036 <__adddf3+0x212>
    b02a:	ea54 0c00 	orrs.w	ip, r4, r0
    b02e:	bf04      	itt	eq
    b030:	4619      	moveq	r1, r3
    b032:	4610      	moveq	r0, r2
    b034:	bd30      	pop	{r4, r5, pc}
    b036:	ea91 0f03 	teq	r1, r3
    b03a:	bf1e      	ittt	ne
    b03c:	2100      	movne	r1, #0
    b03e:	2000      	movne	r0, #0
    b040:	bd30      	popne	{r4, r5, pc}
    b042:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    b046:	d105      	bne.n	b054 <__adddf3+0x230>
    b048:	0040      	lsls	r0, r0, #1
    b04a:	4149      	adcs	r1, r1
    b04c:	bf28      	it	cs
    b04e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b052:	bd30      	pop	{r4, r5, pc}
    b054:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    b058:	bf3c      	itt	cc
    b05a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    b05e:	bd30      	popcc	{r4, r5, pc}
    b060:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b064:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    b068:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b06c:	f04f 0000 	mov.w	r0, #0
    b070:	bd30      	pop	{r4, r5, pc}
    b072:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b076:	bf1a      	itte	ne
    b078:	4619      	movne	r1, r3
    b07a:	4610      	movne	r0, r2
    b07c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    b080:	bf1c      	itt	ne
    b082:	460b      	movne	r3, r1
    b084:	4602      	movne	r2, r0
    b086:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b08a:	bf06      	itte	eq
    b08c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    b090:	ea91 0f03 	teqeq	r1, r3
    b094:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    b098:	bd30      	pop	{r4, r5, pc}
    b09a:	bf00      	nop

0000b09c <__aeabi_ui2d>:
    b09c:	f090 0f00 	teq	r0, #0
    b0a0:	bf04      	itt	eq
    b0a2:	2100      	moveq	r1, #0
    b0a4:	4770      	bxeq	lr
    b0a6:	b530      	push	{r4, r5, lr}
    b0a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b0ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b0b0:	f04f 0500 	mov.w	r5, #0
    b0b4:	f04f 0100 	mov.w	r1, #0
    b0b8:	e750      	b.n	af5c <__adddf3+0x138>
    b0ba:	bf00      	nop

0000b0bc <__aeabi_i2d>:
    b0bc:	f090 0f00 	teq	r0, #0
    b0c0:	bf04      	itt	eq
    b0c2:	2100      	moveq	r1, #0
    b0c4:	4770      	bxeq	lr
    b0c6:	b530      	push	{r4, r5, lr}
    b0c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b0cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b0d0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    b0d4:	bf48      	it	mi
    b0d6:	4240      	negmi	r0, r0
    b0d8:	f04f 0100 	mov.w	r1, #0
    b0dc:	e73e      	b.n	af5c <__adddf3+0x138>
    b0de:	bf00      	nop

0000b0e0 <__aeabi_f2d>:
    b0e0:	0042      	lsls	r2, r0, #1
    b0e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
    b0e6:	ea4f 0131 	mov.w	r1, r1, rrx
    b0ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
    b0ee:	bf1f      	itttt	ne
    b0f0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    b0f4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b0f8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    b0fc:	4770      	bxne	lr
    b0fe:	f092 0f00 	teq	r2, #0
    b102:	bf14      	ite	ne
    b104:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b108:	4770      	bxeq	lr
    b10a:	b530      	push	{r4, r5, lr}
    b10c:	f44f 7460 	mov.w	r4, #896	; 0x380
    b110:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b114:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b118:	e720      	b.n	af5c <__adddf3+0x138>
    b11a:	bf00      	nop

0000b11c <__aeabi_ul2d>:
    b11c:	ea50 0201 	orrs.w	r2, r0, r1
    b120:	bf08      	it	eq
    b122:	4770      	bxeq	lr
    b124:	b530      	push	{r4, r5, lr}
    b126:	f04f 0500 	mov.w	r5, #0
    b12a:	e00a      	b.n	b142 <__aeabi_l2d+0x16>

0000b12c <__aeabi_l2d>:
    b12c:	ea50 0201 	orrs.w	r2, r0, r1
    b130:	bf08      	it	eq
    b132:	4770      	bxeq	lr
    b134:	b530      	push	{r4, r5, lr}
    b136:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    b13a:	d502      	bpl.n	b142 <__aeabi_l2d+0x16>
    b13c:	4240      	negs	r0, r0
    b13e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b142:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b146:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b14a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    b14e:	f43f aedc 	beq.w	af0a <__adddf3+0xe6>
    b152:	f04f 0203 	mov.w	r2, #3
    b156:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b15a:	bf18      	it	ne
    b15c:	3203      	addne	r2, #3
    b15e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b162:	bf18      	it	ne
    b164:	3203      	addne	r2, #3
    b166:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    b16a:	f1c2 0320 	rsb	r3, r2, #32
    b16e:	fa00 fc03 	lsl.w	ip, r0, r3
    b172:	fa20 f002 	lsr.w	r0, r0, r2
    b176:	fa01 fe03 	lsl.w	lr, r1, r3
    b17a:	ea40 000e 	orr.w	r0, r0, lr
    b17e:	fa21 f102 	lsr.w	r1, r1, r2
    b182:	4414      	add	r4, r2
    b184:	e6c1      	b.n	af0a <__adddf3+0xe6>
    b186:	bf00      	nop

0000b188 <__aeabi_dmul>:
    b188:	b570      	push	{r4, r5, r6, lr}
    b18a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b18e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b192:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b196:	bf1d      	ittte	ne
    b198:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b19c:	ea94 0f0c 	teqne	r4, ip
    b1a0:	ea95 0f0c 	teqne	r5, ip
    b1a4:	f000 f8de 	bleq	b364 <__aeabi_dmul+0x1dc>
    b1a8:	442c      	add	r4, r5
    b1aa:	ea81 0603 	eor.w	r6, r1, r3
    b1ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    b1b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    b1b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    b1ba:	bf18      	it	ne
    b1bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    b1c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b1c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b1c8:	d038      	beq.n	b23c <__aeabi_dmul+0xb4>
    b1ca:	fba0 ce02 	umull	ip, lr, r0, r2
    b1ce:	f04f 0500 	mov.w	r5, #0
    b1d2:	fbe1 e502 	umlal	lr, r5, r1, r2
    b1d6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    b1da:	fbe0 e503 	umlal	lr, r5, r0, r3
    b1de:	f04f 0600 	mov.w	r6, #0
    b1e2:	fbe1 5603 	umlal	r5, r6, r1, r3
    b1e6:	f09c 0f00 	teq	ip, #0
    b1ea:	bf18      	it	ne
    b1ec:	f04e 0e01 	orrne.w	lr, lr, #1
    b1f0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    b1f4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    b1f8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    b1fc:	d204      	bcs.n	b208 <__aeabi_dmul+0x80>
    b1fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    b202:	416d      	adcs	r5, r5
    b204:	eb46 0606 	adc.w	r6, r6, r6
    b208:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    b20c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    b210:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    b214:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    b218:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    b21c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b220:	bf88      	it	hi
    b222:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b226:	d81e      	bhi.n	b266 <__aeabi_dmul+0xde>
    b228:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    b22c:	bf08      	it	eq
    b22e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    b232:	f150 0000 	adcs.w	r0, r0, #0
    b236:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b23a:	bd70      	pop	{r4, r5, r6, pc}
    b23c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    b240:	ea46 0101 	orr.w	r1, r6, r1
    b244:	ea40 0002 	orr.w	r0, r0, r2
    b248:	ea81 0103 	eor.w	r1, r1, r3
    b24c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    b250:	bfc2      	ittt	gt
    b252:	ebd4 050c 	rsbsgt	r5, r4, ip
    b256:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b25a:	bd70      	popgt	{r4, r5, r6, pc}
    b25c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b260:	f04f 0e00 	mov.w	lr, #0
    b264:	3c01      	subs	r4, #1
    b266:	f300 80ab 	bgt.w	b3c0 <__aeabi_dmul+0x238>
    b26a:	f114 0f36 	cmn.w	r4, #54	; 0x36
    b26e:	bfde      	ittt	le
    b270:	2000      	movle	r0, #0
    b272:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    b276:	bd70      	pople	{r4, r5, r6, pc}
    b278:	f1c4 0400 	rsb	r4, r4, #0
    b27c:	3c20      	subs	r4, #32
    b27e:	da35      	bge.n	b2ec <__aeabi_dmul+0x164>
    b280:	340c      	adds	r4, #12
    b282:	dc1b      	bgt.n	b2bc <__aeabi_dmul+0x134>
    b284:	f104 0414 	add.w	r4, r4, #20
    b288:	f1c4 0520 	rsb	r5, r4, #32
    b28c:	fa00 f305 	lsl.w	r3, r0, r5
    b290:	fa20 f004 	lsr.w	r0, r0, r4
    b294:	fa01 f205 	lsl.w	r2, r1, r5
    b298:	ea40 0002 	orr.w	r0, r0, r2
    b29c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    b2a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b2a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b2a8:	fa21 f604 	lsr.w	r6, r1, r4
    b2ac:	eb42 0106 	adc.w	r1, r2, r6
    b2b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b2b4:	bf08      	it	eq
    b2b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b2ba:	bd70      	pop	{r4, r5, r6, pc}
    b2bc:	f1c4 040c 	rsb	r4, r4, #12
    b2c0:	f1c4 0520 	rsb	r5, r4, #32
    b2c4:	fa00 f304 	lsl.w	r3, r0, r4
    b2c8:	fa20 f005 	lsr.w	r0, r0, r5
    b2cc:	fa01 f204 	lsl.w	r2, r1, r4
    b2d0:	ea40 0002 	orr.w	r0, r0, r2
    b2d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b2d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b2dc:	f141 0100 	adc.w	r1, r1, #0
    b2e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b2e4:	bf08      	it	eq
    b2e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b2ea:	bd70      	pop	{r4, r5, r6, pc}
    b2ec:	f1c4 0520 	rsb	r5, r4, #32
    b2f0:	fa00 f205 	lsl.w	r2, r0, r5
    b2f4:	ea4e 0e02 	orr.w	lr, lr, r2
    b2f8:	fa20 f304 	lsr.w	r3, r0, r4
    b2fc:	fa01 f205 	lsl.w	r2, r1, r5
    b300:	ea43 0302 	orr.w	r3, r3, r2
    b304:	fa21 f004 	lsr.w	r0, r1, r4
    b308:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b30c:	fa21 f204 	lsr.w	r2, r1, r4
    b310:	ea20 0002 	bic.w	r0, r0, r2
    b314:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    b318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b31c:	bf08      	it	eq
    b31e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b322:	bd70      	pop	{r4, r5, r6, pc}
    b324:	f094 0f00 	teq	r4, #0
    b328:	d10f      	bne.n	b34a <__aeabi_dmul+0x1c2>
    b32a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    b32e:	0040      	lsls	r0, r0, #1
    b330:	eb41 0101 	adc.w	r1, r1, r1
    b334:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b338:	bf08      	it	eq
    b33a:	3c01      	subeq	r4, #1
    b33c:	d0f7      	beq.n	b32e <__aeabi_dmul+0x1a6>
    b33e:	ea41 0106 	orr.w	r1, r1, r6
    b342:	f095 0f00 	teq	r5, #0
    b346:	bf18      	it	ne
    b348:	4770      	bxne	lr
    b34a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    b34e:	0052      	lsls	r2, r2, #1
    b350:	eb43 0303 	adc.w	r3, r3, r3
    b354:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    b358:	bf08      	it	eq
    b35a:	3d01      	subeq	r5, #1
    b35c:	d0f7      	beq.n	b34e <__aeabi_dmul+0x1c6>
    b35e:	ea43 0306 	orr.w	r3, r3, r6
    b362:	4770      	bx	lr
    b364:	ea94 0f0c 	teq	r4, ip
    b368:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b36c:	bf18      	it	ne
    b36e:	ea95 0f0c 	teqne	r5, ip
    b372:	d00c      	beq.n	b38e <__aeabi_dmul+0x206>
    b374:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b378:	bf18      	it	ne
    b37a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b37e:	d1d1      	bne.n	b324 <__aeabi_dmul+0x19c>
    b380:	ea81 0103 	eor.w	r1, r1, r3
    b384:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b388:	f04f 0000 	mov.w	r0, #0
    b38c:	bd70      	pop	{r4, r5, r6, pc}
    b38e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b392:	bf06      	itte	eq
    b394:	4610      	moveq	r0, r2
    b396:	4619      	moveq	r1, r3
    b398:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b39c:	d019      	beq.n	b3d2 <__aeabi_dmul+0x24a>
    b39e:	ea94 0f0c 	teq	r4, ip
    b3a2:	d102      	bne.n	b3aa <__aeabi_dmul+0x222>
    b3a4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    b3a8:	d113      	bne.n	b3d2 <__aeabi_dmul+0x24a>
    b3aa:	ea95 0f0c 	teq	r5, ip
    b3ae:	d105      	bne.n	b3bc <__aeabi_dmul+0x234>
    b3b0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    b3b4:	bf1c      	itt	ne
    b3b6:	4610      	movne	r0, r2
    b3b8:	4619      	movne	r1, r3
    b3ba:	d10a      	bne.n	b3d2 <__aeabi_dmul+0x24a>
    b3bc:	ea81 0103 	eor.w	r1, r1, r3
    b3c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b3c4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b3c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b3cc:	f04f 0000 	mov.w	r0, #0
    b3d0:	bd70      	pop	{r4, r5, r6, pc}
    b3d2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b3d6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    b3da:	bd70      	pop	{r4, r5, r6, pc}

0000b3dc <__aeabi_ddiv>:
    b3dc:	b570      	push	{r4, r5, r6, lr}
    b3de:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b3e2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b3e6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b3ea:	bf1d      	ittte	ne
    b3ec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b3f0:	ea94 0f0c 	teqne	r4, ip
    b3f4:	ea95 0f0c 	teqne	r5, ip
    b3f8:	f000 f8a7 	bleq	b54a <__aeabi_ddiv+0x16e>
    b3fc:	eba4 0405 	sub.w	r4, r4, r5
    b400:	ea81 0e03 	eor.w	lr, r1, r3
    b404:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b408:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b40c:	f000 8088 	beq.w	b520 <__aeabi_ddiv+0x144>
    b410:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b414:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    b418:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    b41c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b420:	ea4f 2202 	mov.w	r2, r2, lsl #8
    b424:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    b428:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    b42c:	ea4f 2600 	mov.w	r6, r0, lsl #8
    b430:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    b434:	429d      	cmp	r5, r3
    b436:	bf08      	it	eq
    b438:	4296      	cmpeq	r6, r2
    b43a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    b43e:	f504 7440 	add.w	r4, r4, #768	; 0x300
    b442:	d202      	bcs.n	b44a <__aeabi_ddiv+0x6e>
    b444:	085b      	lsrs	r3, r3, #1
    b446:	ea4f 0232 	mov.w	r2, r2, rrx
    b44a:	1ab6      	subs	r6, r6, r2
    b44c:	eb65 0503 	sbc.w	r5, r5, r3
    b450:	085b      	lsrs	r3, r3, #1
    b452:	ea4f 0232 	mov.w	r2, r2, rrx
    b456:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b45a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    b45e:	ebb6 0e02 	subs.w	lr, r6, r2
    b462:	eb75 0e03 	sbcs.w	lr, r5, r3
    b466:	bf22      	ittt	cs
    b468:	1ab6      	subcs	r6, r6, r2
    b46a:	4675      	movcs	r5, lr
    b46c:	ea40 000c 	orrcs.w	r0, r0, ip
    b470:	085b      	lsrs	r3, r3, #1
    b472:	ea4f 0232 	mov.w	r2, r2, rrx
    b476:	ebb6 0e02 	subs.w	lr, r6, r2
    b47a:	eb75 0e03 	sbcs.w	lr, r5, r3
    b47e:	bf22      	ittt	cs
    b480:	1ab6      	subcs	r6, r6, r2
    b482:	4675      	movcs	r5, lr
    b484:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    b488:	085b      	lsrs	r3, r3, #1
    b48a:	ea4f 0232 	mov.w	r2, r2, rrx
    b48e:	ebb6 0e02 	subs.w	lr, r6, r2
    b492:	eb75 0e03 	sbcs.w	lr, r5, r3
    b496:	bf22      	ittt	cs
    b498:	1ab6      	subcs	r6, r6, r2
    b49a:	4675      	movcs	r5, lr
    b49c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    b4a0:	085b      	lsrs	r3, r3, #1
    b4a2:	ea4f 0232 	mov.w	r2, r2, rrx
    b4a6:	ebb6 0e02 	subs.w	lr, r6, r2
    b4aa:	eb75 0e03 	sbcs.w	lr, r5, r3
    b4ae:	bf22      	ittt	cs
    b4b0:	1ab6      	subcs	r6, r6, r2
    b4b2:	4675      	movcs	r5, lr
    b4b4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    b4b8:	ea55 0e06 	orrs.w	lr, r5, r6
    b4bc:	d018      	beq.n	b4f0 <__aeabi_ddiv+0x114>
    b4be:	ea4f 1505 	mov.w	r5, r5, lsl #4
    b4c2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    b4c6:	ea4f 1606 	mov.w	r6, r6, lsl #4
    b4ca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    b4ce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    b4d2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    b4d6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    b4da:	d1c0      	bne.n	b45e <__aeabi_ddiv+0x82>
    b4dc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b4e0:	d10b      	bne.n	b4fa <__aeabi_ddiv+0x11e>
    b4e2:	ea41 0100 	orr.w	r1, r1, r0
    b4e6:	f04f 0000 	mov.w	r0, #0
    b4ea:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    b4ee:	e7b6      	b.n	b45e <__aeabi_ddiv+0x82>
    b4f0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b4f4:	bf04      	itt	eq
    b4f6:	4301      	orreq	r1, r0
    b4f8:	2000      	moveq	r0, #0
    b4fa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b4fe:	bf88      	it	hi
    b500:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b504:	f63f aeaf 	bhi.w	b266 <__aeabi_dmul+0xde>
    b508:	ebb5 0c03 	subs.w	ip, r5, r3
    b50c:	bf04      	itt	eq
    b50e:	ebb6 0c02 	subseq.w	ip, r6, r2
    b512:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b516:	f150 0000 	adcs.w	r0, r0, #0
    b51a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b51e:	bd70      	pop	{r4, r5, r6, pc}
    b520:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    b524:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    b528:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    b52c:	bfc2      	ittt	gt
    b52e:	ebd4 050c 	rsbsgt	r5, r4, ip
    b532:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b536:	bd70      	popgt	{r4, r5, r6, pc}
    b538:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b53c:	f04f 0e00 	mov.w	lr, #0
    b540:	3c01      	subs	r4, #1
    b542:	e690      	b.n	b266 <__aeabi_dmul+0xde>
    b544:	ea45 0e06 	orr.w	lr, r5, r6
    b548:	e68d      	b.n	b266 <__aeabi_dmul+0xde>
    b54a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b54e:	ea94 0f0c 	teq	r4, ip
    b552:	bf08      	it	eq
    b554:	ea95 0f0c 	teqeq	r5, ip
    b558:	f43f af3b 	beq.w	b3d2 <__aeabi_dmul+0x24a>
    b55c:	ea94 0f0c 	teq	r4, ip
    b560:	d10a      	bne.n	b578 <__aeabi_ddiv+0x19c>
    b562:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b566:	f47f af34 	bne.w	b3d2 <__aeabi_dmul+0x24a>
    b56a:	ea95 0f0c 	teq	r5, ip
    b56e:	f47f af25 	bne.w	b3bc <__aeabi_dmul+0x234>
    b572:	4610      	mov	r0, r2
    b574:	4619      	mov	r1, r3
    b576:	e72c      	b.n	b3d2 <__aeabi_dmul+0x24a>
    b578:	ea95 0f0c 	teq	r5, ip
    b57c:	d106      	bne.n	b58c <__aeabi_ddiv+0x1b0>
    b57e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b582:	f43f aefd 	beq.w	b380 <__aeabi_dmul+0x1f8>
    b586:	4610      	mov	r0, r2
    b588:	4619      	mov	r1, r3
    b58a:	e722      	b.n	b3d2 <__aeabi_dmul+0x24a>
    b58c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b590:	bf18      	it	ne
    b592:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b596:	f47f aec5 	bne.w	b324 <__aeabi_dmul+0x19c>
    b59a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    b59e:	f47f af0d 	bne.w	b3bc <__aeabi_dmul+0x234>
    b5a2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    b5a6:	f47f aeeb 	bne.w	b380 <__aeabi_dmul+0x1f8>
    b5aa:	e712      	b.n	b3d2 <__aeabi_dmul+0x24a>

0000b5ac <__aeabi_d2uiz>:
    b5ac:	004a      	lsls	r2, r1, #1
    b5ae:	d211      	bcs.n	b5d4 <__aeabi_d2uiz+0x28>
    b5b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    b5b4:	d211      	bcs.n	b5da <__aeabi_d2uiz+0x2e>
    b5b6:	d50d      	bpl.n	b5d4 <__aeabi_d2uiz+0x28>
    b5b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    b5bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    b5c0:	d40e      	bmi.n	b5e0 <__aeabi_d2uiz+0x34>
    b5c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    b5c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b5ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    b5ce:	fa23 f002 	lsr.w	r0, r3, r2
    b5d2:	4770      	bx	lr
    b5d4:	f04f 0000 	mov.w	r0, #0
    b5d8:	4770      	bx	lr
    b5da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    b5de:	d102      	bne.n	b5e6 <__aeabi_d2uiz+0x3a>
    b5e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b5e4:	4770      	bx	lr
    b5e6:	f04f 0000 	mov.w	r0, #0
    b5ea:	4770      	bx	lr

0000b5ec <memcmp>:
    b5ec:	2a03      	cmp	r2, #3
    b5ee:	b470      	push	{r4, r5, r6}
    b5f0:	d926      	bls.n	b640 <memcmp+0x54>
    b5f2:	ea40 0301 	orr.w	r3, r0, r1
    b5f6:	079b      	lsls	r3, r3, #30
    b5f8:	d011      	beq.n	b61e <memcmp+0x32>
    b5fa:	7804      	ldrb	r4, [r0, #0]
    b5fc:	780d      	ldrb	r5, [r1, #0]
    b5fe:	42ac      	cmp	r4, r5
    b600:	d122      	bne.n	b648 <memcmp+0x5c>
    b602:	4402      	add	r2, r0
    b604:	1c43      	adds	r3, r0, #1
    b606:	e005      	b.n	b614 <memcmp+0x28>
    b608:	f813 4b01 	ldrb.w	r4, [r3], #1
    b60c:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    b610:	42ac      	cmp	r4, r5
    b612:	d119      	bne.n	b648 <memcmp+0x5c>
    b614:	4293      	cmp	r3, r2
    b616:	d1f7      	bne.n	b608 <memcmp+0x1c>
    b618:	2000      	movs	r0, #0
    b61a:	bc70      	pop	{r4, r5, r6}
    b61c:	4770      	bx	lr
    b61e:	460c      	mov	r4, r1
    b620:	4603      	mov	r3, r0
    b622:	681e      	ldr	r6, [r3, #0]
    b624:	6825      	ldr	r5, [r4, #0]
    b626:	4618      	mov	r0, r3
    b628:	42ae      	cmp	r6, r5
    b62a:	4621      	mov	r1, r4
    b62c:	f103 0304 	add.w	r3, r3, #4
    b630:	f104 0404 	add.w	r4, r4, #4
    b634:	d104      	bne.n	b640 <memcmp+0x54>
    b636:	3a04      	subs	r2, #4
    b638:	2a03      	cmp	r2, #3
    b63a:	4618      	mov	r0, r3
    b63c:	4621      	mov	r1, r4
    b63e:	d8f0      	bhi.n	b622 <memcmp+0x36>
    b640:	2a00      	cmp	r2, #0
    b642:	d1da      	bne.n	b5fa <memcmp+0xe>
    b644:	4610      	mov	r0, r2
    b646:	e7e8      	b.n	b61a <memcmp+0x2e>
    b648:	1b60      	subs	r0, r4, r5
    b64a:	bc70      	pop	{r4, r5, r6}
    b64c:	4770      	bx	lr
    b64e:	bf00      	nop

0000b650 <memcpy>:
    b650:	4684      	mov	ip, r0
    b652:	ea41 0300 	orr.w	r3, r1, r0
    b656:	f013 0303 	ands.w	r3, r3, #3
    b65a:	d149      	bne.n	b6f0 <memcpy+0xa0>
    b65c:	3a40      	subs	r2, #64	; 0x40
    b65e:	d323      	bcc.n	b6a8 <memcpy+0x58>
    b660:	680b      	ldr	r3, [r1, #0]
    b662:	6003      	str	r3, [r0, #0]
    b664:	684b      	ldr	r3, [r1, #4]
    b666:	6043      	str	r3, [r0, #4]
    b668:	688b      	ldr	r3, [r1, #8]
    b66a:	6083      	str	r3, [r0, #8]
    b66c:	68cb      	ldr	r3, [r1, #12]
    b66e:	60c3      	str	r3, [r0, #12]
    b670:	690b      	ldr	r3, [r1, #16]
    b672:	6103      	str	r3, [r0, #16]
    b674:	694b      	ldr	r3, [r1, #20]
    b676:	6143      	str	r3, [r0, #20]
    b678:	698b      	ldr	r3, [r1, #24]
    b67a:	6183      	str	r3, [r0, #24]
    b67c:	69cb      	ldr	r3, [r1, #28]
    b67e:	61c3      	str	r3, [r0, #28]
    b680:	6a0b      	ldr	r3, [r1, #32]
    b682:	6203      	str	r3, [r0, #32]
    b684:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    b686:	6243      	str	r3, [r0, #36]	; 0x24
    b688:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    b68a:	6283      	str	r3, [r0, #40]	; 0x28
    b68c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    b68e:	62c3      	str	r3, [r0, #44]	; 0x2c
    b690:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    b692:	6303      	str	r3, [r0, #48]	; 0x30
    b694:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    b696:	6343      	str	r3, [r0, #52]	; 0x34
    b698:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    b69a:	6383      	str	r3, [r0, #56]	; 0x38
    b69c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    b69e:	63c3      	str	r3, [r0, #60]	; 0x3c
    b6a0:	3040      	adds	r0, #64	; 0x40
    b6a2:	3140      	adds	r1, #64	; 0x40
    b6a4:	3a40      	subs	r2, #64	; 0x40
    b6a6:	d2db      	bcs.n	b660 <memcpy+0x10>
    b6a8:	3230      	adds	r2, #48	; 0x30
    b6aa:	d30b      	bcc.n	b6c4 <memcpy+0x74>
    b6ac:	680b      	ldr	r3, [r1, #0]
    b6ae:	6003      	str	r3, [r0, #0]
    b6b0:	684b      	ldr	r3, [r1, #4]
    b6b2:	6043      	str	r3, [r0, #4]
    b6b4:	688b      	ldr	r3, [r1, #8]
    b6b6:	6083      	str	r3, [r0, #8]
    b6b8:	68cb      	ldr	r3, [r1, #12]
    b6ba:	60c3      	str	r3, [r0, #12]
    b6bc:	3010      	adds	r0, #16
    b6be:	3110      	adds	r1, #16
    b6c0:	3a10      	subs	r2, #16
    b6c2:	d2f3      	bcs.n	b6ac <memcpy+0x5c>
    b6c4:	320c      	adds	r2, #12
    b6c6:	d305      	bcc.n	b6d4 <memcpy+0x84>
    b6c8:	f851 3b04 	ldr.w	r3, [r1], #4
    b6cc:	f840 3b04 	str.w	r3, [r0], #4
    b6d0:	3a04      	subs	r2, #4
    b6d2:	d2f9      	bcs.n	b6c8 <memcpy+0x78>
    b6d4:	3204      	adds	r2, #4
    b6d6:	d008      	beq.n	b6ea <memcpy+0x9a>
    b6d8:	07d2      	lsls	r2, r2, #31
    b6da:	bf1c      	itt	ne
    b6dc:	f811 3b01 	ldrbne.w	r3, [r1], #1
    b6e0:	f800 3b01 	strbne.w	r3, [r0], #1
    b6e4:	d301      	bcc.n	b6ea <memcpy+0x9a>
    b6e6:	880b      	ldrh	r3, [r1, #0]
    b6e8:	8003      	strh	r3, [r0, #0]
    b6ea:	4660      	mov	r0, ip
    b6ec:	4770      	bx	lr
    b6ee:	bf00      	nop
    b6f0:	2a08      	cmp	r2, #8
    b6f2:	d313      	bcc.n	b71c <memcpy+0xcc>
    b6f4:	078b      	lsls	r3, r1, #30
    b6f6:	d0b1      	beq.n	b65c <memcpy+0xc>
    b6f8:	f010 0303 	ands.w	r3, r0, #3
    b6fc:	d0ae      	beq.n	b65c <memcpy+0xc>
    b6fe:	f1c3 0304 	rsb	r3, r3, #4
    b702:	1ad2      	subs	r2, r2, r3
    b704:	07db      	lsls	r3, r3, #31
    b706:	bf1c      	itt	ne
    b708:	f811 3b01 	ldrbne.w	r3, [r1], #1
    b70c:	f800 3b01 	strbne.w	r3, [r0], #1
    b710:	d3a4      	bcc.n	b65c <memcpy+0xc>
    b712:	f831 3b02 	ldrh.w	r3, [r1], #2
    b716:	f820 3b02 	strh.w	r3, [r0], #2
    b71a:	e79f      	b.n	b65c <memcpy+0xc>
    b71c:	3a04      	subs	r2, #4
    b71e:	d3d9      	bcc.n	b6d4 <memcpy+0x84>
    b720:	3a01      	subs	r2, #1
    b722:	f811 3b01 	ldrb.w	r3, [r1], #1
    b726:	f800 3b01 	strb.w	r3, [r0], #1
    b72a:	d2f9      	bcs.n	b720 <memcpy+0xd0>
    b72c:	780b      	ldrb	r3, [r1, #0]
    b72e:	7003      	strb	r3, [r0, #0]
    b730:	784b      	ldrb	r3, [r1, #1]
    b732:	7043      	strb	r3, [r0, #1]
    b734:	788b      	ldrb	r3, [r1, #2]
    b736:	7083      	strb	r3, [r0, #2]
    b738:	4660      	mov	r0, ip
    b73a:	4770      	bx	lr

0000b73c <strlen>:
    b73c:	f020 0103 	bic.w	r1, r0, #3
    b740:	f010 0003 	ands.w	r0, r0, #3
    b744:	f1c0 0000 	rsb	r0, r0, #0
    b748:	f851 3b04 	ldr.w	r3, [r1], #4
    b74c:	f100 0c04 	add.w	ip, r0, #4
    b750:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    b754:	f06f 0200 	mvn.w	r2, #0
    b758:	bf1c      	itt	ne
    b75a:	fa22 f20c 	lsrne.w	r2, r2, ip
    b75e:	4313      	orrne	r3, r2
    b760:	f04f 0c01 	mov.w	ip, #1
    b764:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    b768:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    b76c:	eba3 020c 	sub.w	r2, r3, ip
    b770:	ea22 0203 	bic.w	r2, r2, r3
    b774:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    b778:	bf04      	itt	eq
    b77a:	f851 3b04 	ldreq.w	r3, [r1], #4
    b77e:	3004      	addeq	r0, #4
    b780:	d0f4      	beq.n	b76c <strlen+0x30>
    b782:	f1c2 0100 	rsb	r1, r2, #0
    b786:	ea02 0201 	and.w	r2, r2, r1
    b78a:	fab2 f282 	clz	r2, r2
    b78e:	f1c2 021f 	rsb	r2, r2, #31
    b792:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    b796:	4770      	bx	lr
    b798:	00000043 	.word	0x00000043

0000b79c <_global_impure_ptr>:
    b79c:	10000020                                 ...

0000b7a0 <advertising_channels>:
    b7a0:	00270c00                                ..'.

0000b7a4 <data_channels>:
    b7a4:	04030201 08070605 0d0b0a09 11100f0e     ................
    b7b4:	15141312 19181716 1d1c1b1a 21201f1e     .............. !
    b7c4:	25242322 00000026                       "#$%&...

0000b7cc <whitening>:
    b7cc:	01010101 01000100 00000100 00010000     ................
    b7dc:	01000101 00010101 01010100 00010000     ................
    b7ec:	01010001 01010000 00000000 00010100     ................
    b7fc:	01000101 01010100 00000100 00010100     ................
    b80c:	00000100 00000100 00000000 01000001     ................
    b81c:	01010000 00000100 01010101 01010100     ................
    b82c:	00000000 01010101 00010101 01010000     ................
    b83c:	01010001 01000000 00000100 00010001     ................

0000b84c <whitening_index>:
    b84c:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    b85c:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    b86c:	5a541b28 662f703f                       (.TZ?p/f

0000b874 <hop_interval_lut>:
    b874:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    b884:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    b894:	120c0916 00000024                       ....$...

0000b89c <whitening_word>:
    b89c:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    b8ac:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    b8bc:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    b8cc:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    b8dc:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    b8ec:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    b8fc:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    b90c:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    b91c:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    b92c:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    b93c:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    b94c:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    b95c:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    b96c:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    b97c:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    b98c:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    b99c:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    b9ac:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    b9bc:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    b9cc:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    b9dc:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    b9ec:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    b9fc:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    ba0c:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    ba1c:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    ba2c:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    ba3c:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    ba4c:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    ba5c:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    ba6c:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    ba7c:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    ba8c:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    ba9c:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    baac:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    babc:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    bacc:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    badc:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    baec:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    bafc:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    bb0c:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    bb1c:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    bb2c:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    bb3c:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    bb4c:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    bb5c:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    bb6c:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    bb7c:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    bb8c:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    bb9c:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    bbac:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    bbbc:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    bbcc:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    bbdc:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    bbec:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    bbfc:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    bc0c:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    bc1c:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    bc2c:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    bc3c:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    bc4c:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    bc5c:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    bc6c:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    bc7c:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    bc8c:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    bc9c:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    bcac:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    bcbc:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    bccc:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    bcdc:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    bcec:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    bcfc:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    bd0c:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    bd1c:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    bd2c:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    bd3c:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    bd4c:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    bd5c:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    bd6c:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    bd7c:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    bd8c:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    bd9c:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    bdac:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    bdbc:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    bdcc:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    bddc:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    bdec:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    bdfc:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    be0c:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    be1c:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    be2c:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    be3c:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    be4c:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    be5c:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    be6c:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    be7c:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    be8c:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    be9c:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    beac:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    bebc:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    becc:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    bedc:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    beec:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    befc:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    bf0c:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    bf1c:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    bf2c:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    bf3c:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    bf4c:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    bf5c:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    bf6c:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    bf7c:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    bf8c:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    bf9c:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    bfac:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    bfbc:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    bfcc:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    bfdc:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    bfec:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    bffc:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    c00c:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

0000c01c <compile_info>:
    c01c:	72656275 746f6f74 30322068 312d3531     ubertooth 2015-1
    c02c:	31522d30 6f722820 7740746f 69706965     0-R1 (root@weipi
    c03c:	2029676e 206e6f4d 2074634f 32203133     ng) Mon Oct 31 2
    c04c:	34343a32 2037333a 2054534b 36313032     2:44:37 KST 2016
    c05c:	00000000 35313032 2d30312d 00003152     ....2015-10-R1..
    c06c:	00000001 00000001 00000001 00000001     ................
    c07c:	ffff0900 ffffffff ff050102 0000ffff     ................
    c08c:	0985096c 0000099e 03010200 03000100     l...............
    c09c:	01020001 00000100 04020301 04020304     ................
    c0ac:	03040304 00000203                       ........

0000c0b4 <abDescriptors>:
    c0b4:	02000112 400000ff 60021d50 02010101     .......@P..`....
    c0c4:	02090103 01010020 096e8000 02000004     .... .....n.....
    c0d4:	000000ff 02820507 07000040 40020505     ........@......@
    c0e4:	03040000 035c0409 00740068 00700074     ......\.h.t.t.p.
    c0f4:	002f003a 0067002f 00740069 00750068     :././.g.i.t.h.u.
    c104:	002e0062 006f0063 002f006d 00720067     b...c.o.m./.g.r.
    c114:	00610065 00730074 006f0063 00740074     e.a.t.s.c.o.t.t.
    c124:	00610067 00670064 00740065 002f0073     g.a.d.g.e.t.s./.
    c134:	00620075 00720065 006f0074 0074006f     u.b.e.r.t.o.o.t.
    c144:	031e0068 006c0062 00650075 006f0074     h...b.l.u.e.t.o.
    c154:	0074006f 005f0068 00780072 00780074     o.t.h._.r.x.t.x.
    c164:	00300312 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
    c174:	00000031 6361387b 38613734 63632d38     1...{8ac47a88-cc
    c184:	342d3632 2d396161 62373838 6332342d     26-4aa9-887b-42c
    c194:	66633861 36613730 00007d33 00009109     a8cf07a63}......
    c1a4:	0000913d 00009155 0000923d 000090f5     =...U...=.......
    c1b4:	000090f5 000090f5 000092a1 0000913d     ............=...
    c1c4:	000092b9 000090f5 000090f5 000090f5     ................
    c1d4:	00009109 0000913d 0000938d 0000954d     ....=.......M...
    c1e4:	0000940d 000094d1                       ........

0000c1ec <abExtendedOsFeatureDescriptor>:
    c1ec:	00000028 00040100 00000001 00000000     (...............
    c1fc:	49570100 4253554e 00000000 00000000     ..WINUSB........
    c20c:	00000000 00000000                       ........

0000c214 <_init>:
    c214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c216:	bf00      	nop
    c218:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c21a:	bc08      	pop	{r3}
    c21c:	469e      	mov	lr, r3
    c21e:	4770      	bx	lr

0000c220 <__init_array_start>:
    c220:	00004215 	.word	0x00004215

0000c224 <__frame_dummy_init_array_entry>:
    c224:	000040f1                                .@..

0000c228 <_fini>:
    c228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c22a:	bf00      	nop
    c22c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c22e:	bc08      	pop	{r3}
    c230:	469e      	mov	lr, r3
    c232:	4770      	bx	lr

0000c234 <__fini_array_start>:
    c234:	000040cd 	.word	0x000040cd
