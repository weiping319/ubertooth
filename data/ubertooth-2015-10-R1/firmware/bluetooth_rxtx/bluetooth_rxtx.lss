
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000083f0  00004000  00004000  00004000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         0000093e  10000020  0000c3f0  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002918  10000960  0000cd2e  00010960  2**3
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0001095e  2**0
                  CONTENTS, READONLY
  5 .comment      00000070  00000000  00000000  00010987  2**0
                  CONTENTS, READONLY
  6 .debug_frame  00001c50  00000000  00000000  000109f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004fa3  00000000  00000000  00012648  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000150e  00000000  00000000  000175eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006b8  00000000  00000000  00018af9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005d8  00000000  00000000  000191b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000275c  00000000  00000000  00019789  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000021e2  00000000  00000000  0001bee5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 e9 97 00 00 55 98 00 00 55 98 00 00     .?......U...U...
    4010:	55 98 00 00 55 98 00 00 55 98 00 00 00 00 00 00     U...U...U.......
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 55 98 00 00     ............U...
    4030:	55 98 00 00 00 00 00 00 55 98 00 00 55 98 00 00     U.......U...U...
    4040:	55 98 00 00 b9 53 00 00 55 98 00 00 55 98 00 00     U....S..U...U...
    4050:	55 98 00 00 55 98 00 00 55 98 00 00 55 98 00 00     U...U...U...U...
    4060:	55 98 00 00 55 98 00 00 55 98 00 00 55 98 00 00     U...U...U...U...
    4070:	55 98 00 00 55 98 00 00 55 98 00 00 55 98 00 00     U...U...U...U...
    4080:	55 98 00 00 55 98 00 00 55 98 00 00 55 98 00 00     U...U...U...U...
    4090:	55 98 00 00 d5 54 00 00 55 98 00 00 55 98 00 00     U....T..U...U...
    40a0:	dd 97 00 00 55 98 00 00 a1 59 00 00 55 98 00 00     ....U....Y..U...
    40b0:	55 98 00 00 55 98 00 00 55 98 00 00 55 98 00 00     U...U...U...U...
    40c0:	55 98 00 00 55 98 00 00 55 98 00 00                 U...U...U...

000040cc <__do_global_dtors_aux>:
    40cc:	b510      	push	{r4, lr}
    40ce:	4c05      	ldr	r4, [pc, #20]	; (40e4 <__do_global_dtors_aux+0x18>)
    40d0:	7823      	ldrb	r3, [r4, #0]
    40d2:	b933      	cbnz	r3, 40e2 <__do_global_dtors_aux+0x16>
    40d4:	4b04      	ldr	r3, [pc, #16]	; (40e8 <__do_global_dtors_aux+0x1c>)
    40d6:	b113      	cbz	r3, 40de <__do_global_dtors_aux+0x12>
    40d8:	4804      	ldr	r0, [pc, #16]	; (40ec <__do_global_dtors_aux+0x20>)
    40da:	f3af 8000 	nop.w
    40de:	2301      	movs	r3, #1
    40e0:	7023      	strb	r3, [r4, #0]
    40e2:	bd10      	pop	{r4, pc}
    40e4:	10000960 	.word	0x10000960
    40e8:	00000000 	.word	0x00000000
    40ec:	0000c3cc 	.word	0x0000c3cc

000040f0 <frame_dummy>:
    40f0:	4b08      	ldr	r3, [pc, #32]	; (4114 <frame_dummy+0x24>)
    40f2:	b510      	push	{r4, lr}
    40f4:	b11b      	cbz	r3, 40fe <frame_dummy+0xe>
    40f6:	4808      	ldr	r0, [pc, #32]	; (4118 <frame_dummy+0x28>)
    40f8:	4908      	ldr	r1, [pc, #32]	; (411c <frame_dummy+0x2c>)
    40fa:	f3af 8000 	nop.w
    40fe:	4808      	ldr	r0, [pc, #32]	; (4120 <frame_dummy+0x30>)
    4100:	6803      	ldr	r3, [r0, #0]
    4102:	b903      	cbnz	r3, 4106 <frame_dummy+0x16>
    4104:	bd10      	pop	{r4, pc}
    4106:	4b07      	ldr	r3, [pc, #28]	; (4124 <frame_dummy+0x34>)
    4108:	2b00      	cmp	r3, #0
    410a:	d0fb      	beq.n	4104 <frame_dummy+0x14>
    410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4110:	4718      	bx	r3
    4112:	bf00      	nop
    4114:	00000000 	.word	0x00000000
    4118:	0000c3cc 	.word	0x0000c3cc
    411c:	10000964 	.word	0x10000964
    4120:	10000960 	.word	0x10000960
    4124:	00000000 	.word	0x00000000

00004128 <__libc_init_array>:
    4128:	b570      	push	{r4, r5, r6, lr}
    412a:	4e0f      	ldr	r6, [pc, #60]	; (4168 <__libc_init_array+0x40>)
    412c:	4d0f      	ldr	r5, [pc, #60]	; (416c <__libc_init_array+0x44>)
    412e:	1b76      	subs	r6, r6, r5
    4130:	10b6      	asrs	r6, r6, #2
    4132:	bf18      	it	ne
    4134:	2400      	movne	r4, #0
    4136:	d005      	beq.n	4144 <__libc_init_array+0x1c>
    4138:	3401      	adds	r4, #1
    413a:	f855 3b04 	ldr.w	r3, [r5], #4
    413e:	4798      	blx	r3
    4140:	42a6      	cmp	r6, r4
    4142:	d1f9      	bne.n	4138 <__libc_init_array+0x10>
    4144:	4e0a      	ldr	r6, [pc, #40]	; (4170 <__libc_init_array+0x48>)
    4146:	4d0b      	ldr	r5, [pc, #44]	; (4174 <__libc_init_array+0x4c>)
    4148:	f008 f940 	bl	c3cc <_init>
    414c:	1b76      	subs	r6, r6, r5
    414e:	10b6      	asrs	r6, r6, #2
    4150:	bf18      	it	ne
    4152:	2400      	movne	r4, #0
    4154:	d006      	beq.n	4164 <__libc_init_array+0x3c>
    4156:	3401      	adds	r4, #1
    4158:	f855 3b04 	ldr.w	r3, [r5], #4
    415c:	4798      	blx	r3
    415e:	42a6      	cmp	r6, r4
    4160:	d1f9      	bne.n	4156 <__libc_init_array+0x2e>
    4162:	bd70      	pop	{r4, r5, r6, pc}
    4164:	bd70      	pop	{r4, r5, r6, pc}
    4166:	bf00      	nop
    4168:	0000c3d8 	.word	0x0000c3d8
    416c:	0000c3d8 	.word	0x0000c3d8
    4170:	0000c3e0 	.word	0x0000c3e0
    4174:	0000c3d8 	.word	0x0000c3d8

00004178 <memset>:
    4178:	b470      	push	{r4, r5, r6}
    417a:	0784      	lsls	r4, r0, #30
    417c:	d046      	beq.n	420c <memset+0x94>
    417e:	1e54      	subs	r4, r2, #1
    4180:	2a00      	cmp	r2, #0
    4182:	d041      	beq.n	4208 <memset+0x90>
    4184:	b2cd      	uxtb	r5, r1
    4186:	4603      	mov	r3, r0
    4188:	e002      	b.n	4190 <memset+0x18>
    418a:	1e62      	subs	r2, r4, #1
    418c:	b3e4      	cbz	r4, 4208 <memset+0x90>
    418e:	4614      	mov	r4, r2
    4190:	f803 5b01 	strb.w	r5, [r3], #1
    4194:	079a      	lsls	r2, r3, #30
    4196:	d1f8      	bne.n	418a <memset+0x12>
    4198:	2c03      	cmp	r4, #3
    419a:	d92e      	bls.n	41fa <memset+0x82>
    419c:	b2cd      	uxtb	r5, r1
    419e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    41a2:	2c0f      	cmp	r4, #15
    41a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    41a8:	d919      	bls.n	41de <memset+0x66>
    41aa:	4626      	mov	r6, r4
    41ac:	f103 0210 	add.w	r2, r3, #16
    41b0:	3e10      	subs	r6, #16
    41b2:	2e0f      	cmp	r6, #15
    41b4:	f842 5c10 	str.w	r5, [r2, #-16]
    41b8:	f842 5c0c 	str.w	r5, [r2, #-12]
    41bc:	f842 5c08 	str.w	r5, [r2, #-8]
    41c0:	f842 5c04 	str.w	r5, [r2, #-4]
    41c4:	f102 0210 	add.w	r2, r2, #16
    41c8:	d8f2      	bhi.n	41b0 <memset+0x38>
    41ca:	f1a4 0210 	sub.w	r2, r4, #16
    41ce:	f022 020f 	bic.w	r2, r2, #15
    41d2:	f004 040f 	and.w	r4, r4, #15
    41d6:	3210      	adds	r2, #16
    41d8:	2c03      	cmp	r4, #3
    41da:	4413      	add	r3, r2
    41dc:	d90d      	bls.n	41fa <memset+0x82>
    41de:	461e      	mov	r6, r3
    41e0:	4622      	mov	r2, r4
    41e2:	3a04      	subs	r2, #4
    41e4:	2a03      	cmp	r2, #3
    41e6:	f846 5b04 	str.w	r5, [r6], #4
    41ea:	d8fa      	bhi.n	41e2 <memset+0x6a>
    41ec:	1f22      	subs	r2, r4, #4
    41ee:	f022 0203 	bic.w	r2, r2, #3
    41f2:	3204      	adds	r2, #4
    41f4:	4413      	add	r3, r2
    41f6:	f004 0403 	and.w	r4, r4, #3
    41fa:	b12c      	cbz	r4, 4208 <memset+0x90>
    41fc:	b2c9      	uxtb	r1, r1
    41fe:	441c      	add	r4, r3
    4200:	f803 1b01 	strb.w	r1, [r3], #1
    4204:	42a3      	cmp	r3, r4
    4206:	d1fb      	bne.n	4200 <memset+0x88>
    4208:	bc70      	pop	{r4, r5, r6}
    420a:	4770      	bx	lr
    420c:	4614      	mov	r4, r2
    420e:	4603      	mov	r3, r0
    4210:	e7c2      	b.n	4198 <memset+0x20>
    4212:	bf00      	nop

00004214 <register_fini>:
    4214:	4b02      	ldr	r3, [pc, #8]	; (4220 <register_fini+0xc>)
    4216:	b113      	cbz	r3, 421e <register_fini+0xa>
    4218:	4802      	ldr	r0, [pc, #8]	; (4224 <register_fini+0x10>)
    421a:	f000 b805 	b.w	4228 <atexit>
    421e:	4770      	bx	lr
    4220:	00000000 	.word	0x00000000
    4224:	00004235 	.word	0x00004235

00004228 <atexit>:
    4228:	4601      	mov	r1, r0
    422a:	2000      	movs	r0, #0
    422c:	4602      	mov	r2, r0
    422e:	4603      	mov	r3, r0
    4230:	f000 b816 	b.w	4260 <__register_exitproc>

00004234 <__libc_fini_array>:
    4234:	b538      	push	{r3, r4, r5, lr}
    4236:	4b08      	ldr	r3, [pc, #32]	; (4258 <__libc_fini_array+0x24>)
    4238:	4d08      	ldr	r5, [pc, #32]	; (425c <__libc_fini_array+0x28>)
    423a:	1aed      	subs	r5, r5, r3
    423c:	10ac      	asrs	r4, r5, #2
    423e:	bf18      	it	ne
    4240:	18ed      	addne	r5, r5, r3
    4242:	d005      	beq.n	4250 <__libc_fini_array+0x1c>
    4244:	3c01      	subs	r4, #1
    4246:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    424a:	4798      	blx	r3
    424c:	2c00      	cmp	r4, #0
    424e:	d1f9      	bne.n	4244 <__libc_fini_array+0x10>
    4250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4254:	f008 b8c4 	b.w	c3e0 <_fini>
    4258:	0000c3ec 	.word	0x0000c3ec
    425c:	0000c3f0 	.word	0x0000c3f0

00004260 <__register_exitproc>:
    4260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4264:	4c25      	ldr	r4, [pc, #148]	; (42fc <__register_exitproc+0x9c>)
    4266:	4606      	mov	r6, r0
    4268:	6825      	ldr	r5, [r4, #0]
    426a:	4688      	mov	r8, r1
    426c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    4270:	4692      	mov	sl, r2
    4272:	4699      	mov	r9, r3
    4274:	b3c4      	cbz	r4, 42e8 <__register_exitproc+0x88>
    4276:	6860      	ldr	r0, [r4, #4]
    4278:	281f      	cmp	r0, #31
    427a:	dc17      	bgt.n	42ac <__register_exitproc+0x4c>
    427c:	1c41      	adds	r1, r0, #1
    427e:	b176      	cbz	r6, 429e <__register_exitproc+0x3e>
    4280:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    4284:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    4288:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
    428c:	2201      	movs	r2, #1
    428e:	4082      	lsls	r2, r0
    4290:	4315      	orrs	r5, r2
    4292:	2e02      	cmp	r6, #2
    4294:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    4298:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
    429c:	d01e      	beq.n	42dc <__register_exitproc+0x7c>
    429e:	1c83      	adds	r3, r0, #2
    42a0:	6061      	str	r1, [r4, #4]
    42a2:	2000      	movs	r0, #0
    42a4:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
    42a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42ac:	4b14      	ldr	r3, [pc, #80]	; (4300 <__register_exitproc+0xa0>)
    42ae:	b303      	cbz	r3, 42f2 <__register_exitproc+0x92>
    42b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42b4:	f3af 8000 	nop.w
    42b8:	4604      	mov	r4, r0
    42ba:	b1d0      	cbz	r0, 42f2 <__register_exitproc+0x92>
    42bc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    42c0:	2700      	movs	r7, #0
    42c2:	e884 0088 	stmia.w	r4, {r3, r7}
    42c6:	4638      	mov	r0, r7
    42c8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42cc:	2101      	movs	r1, #1
    42ce:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    42d2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    42d6:	2e00      	cmp	r6, #0
    42d8:	d0e1      	beq.n	429e <__register_exitproc+0x3e>
    42da:	e7d1      	b.n	4280 <__register_exitproc+0x20>
    42dc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    42e0:	431a      	orrs	r2, r3
    42e2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    42e6:	e7da      	b.n	429e <__register_exitproc+0x3e>
    42e8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    42ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42f0:	e7c1      	b.n	4276 <__register_exitproc+0x16>
    42f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42fa:	bf00      	nop
    42fc:	0000b918 	.word	0x0000b918
    4300:	00000000 	.word	0x00000000

00004304 <rssi_reset>:
int8_t rssi_min;
uint8_t rssi_count = 0;
int32_t rssi_sum = 0;

static void rssi_reset(void)
{
    4304:	b480      	push	{r7}
    4306:	af00      	add	r7, sp, #0
	rssi_count = 0;
    4308:	4b07      	ldr	r3, [pc, #28]	; (4328 <rssi_reset+0x24>)
    430a:	2200      	movs	r2, #0
    430c:	701a      	strb	r2, [r3, #0]
	rssi_sum = 0;
    430e:	4b07      	ldr	r3, [pc, #28]	; (432c <rssi_reset+0x28>)
    4310:	2200      	movs	r2, #0
    4312:	601a      	str	r2, [r3, #0]
	rssi_max = INT8_MIN;
    4314:	4b06      	ldr	r3, [pc, #24]	; (4330 <rssi_reset+0x2c>)
    4316:	2280      	movs	r2, #128	; 0x80
    4318:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    431a:	4b06      	ldr	r3, [pc, #24]	; (4334 <rssi_reset+0x30>)
    431c:	227f      	movs	r2, #127	; 0x7f
    431e:	701a      	strb	r2, [r3, #0]
}
    4320:	46bd      	mov	sp, r7
    4322:	f85d 7b04 	ldr.w	r7, [sp], #4
    4326:	4770      	bx	lr
    4328:	10000a49 	.word	0x10000a49
    432c:	10000a4c 	.word	0x10000a4c
    4330:	10000b04 	.word	0x10000b04
    4334:	10000bb8 	.word	0x10000bb8

00004338 <rssi_add>:

static void rssi_add(int8_t v)
{
    4338:	b480      	push	{r7}
    433a:	b083      	sub	sp, #12
    433c:	af00      	add	r7, sp, #0
    433e:	4603      	mov	r3, r0
    4340:	71fb      	strb	r3, [r7, #7]
	rssi_max = (v > rssi_max) ? v : rssi_max;
    4342:	4b14      	ldr	r3, [pc, #80]	; (4394 <rssi_add+0x5c>)
    4344:	781b      	ldrb	r3, [r3, #0]
    4346:	b25a      	sxtb	r2, r3
    4348:	f997 3007 	ldrsb.w	r3, [r7, #7]
    434c:	4293      	cmp	r3, r2
    434e:	bfb8      	it	lt
    4350:	4613      	movlt	r3, r2
    4352:	b2da      	uxtb	r2, r3
    4354:	4b0f      	ldr	r3, [pc, #60]	; (4394 <rssi_add+0x5c>)
    4356:	701a      	strb	r2, [r3, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    4358:	4b0f      	ldr	r3, [pc, #60]	; (4398 <rssi_add+0x60>)
    435a:	781b      	ldrb	r3, [r3, #0]
    435c:	b25a      	sxtb	r2, r3
    435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4362:	4293      	cmp	r3, r2
    4364:	bfa8      	it	ge
    4366:	4613      	movge	r3, r2
    4368:	b2da      	uxtb	r2, r3
    436a:	4b0b      	ldr	r3, [pc, #44]	; (4398 <rssi_add+0x60>)
    436c:	701a      	strb	r2, [r3, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4372:	021a      	lsls	r2, r3, #8
    4374:	4b09      	ldr	r3, [pc, #36]	; (439c <rssi_add+0x64>)
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	4413      	add	r3, r2
    437a:	4a08      	ldr	r2, [pc, #32]	; (439c <rssi_add+0x64>)
    437c:	6013      	str	r3, [r2, #0]
	rssi_count += 1;
    437e:	4b08      	ldr	r3, [pc, #32]	; (43a0 <rssi_add+0x68>)
    4380:	781b      	ldrb	r3, [r3, #0]
    4382:	3301      	adds	r3, #1
    4384:	b2da      	uxtb	r2, r3
    4386:	4b06      	ldr	r3, [pc, #24]	; (43a0 <rssi_add+0x68>)
    4388:	701a      	strb	r2, [r3, #0]
}
    438a:	370c      	adds	r7, #12
    438c:	46bd      	mov	sp, r7
    438e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4392:	4770      	bx	lr
    4394:	10000b04 	.word	0x10000b04
    4398:	10000bb8 	.word	0x10000bb8
    439c:	10000a4c 	.word	0x10000a4c
    43a0:	10000a49 	.word	0x10000a49

000043a4 <rssi_iir_update>:

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
static void rssi_iir_update(void)
{
    43a4:	b480      	push	{r7}
    43a6:	b085      	sub	sp, #20
    43a8:	af00      	add	r7, sp, #0
	int32_t avg;
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first
	 * slot of array if not sweeping. */
	if (hop_mode > 0)
    43aa:	4b1f      	ldr	r3, [pc, #124]	; (4428 <rssi_iir_update+0x84>)
    43ac:	781b      	ldrb	r3, [r3, #0]
    43ae:	2b00      	cmp	r3, #0
    43b0:	d006      	beq.n	43c0 <rssi_iir_update+0x1c>
		i = channel - 2402;
    43b2:	4b1e      	ldr	r3, [pc, #120]	; (442c <rssi_iir_update+0x88>)
    43b4:	881b      	ldrh	r3, [r3, #0]
    43b6:	b29b      	uxth	r3, r3
    43b8:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    43bc:	60fb      	str	r3, [r7, #12]
    43be:	e001      	b.n	43c4 <rssi_iir_update+0x20>
	else
		i = 0;
    43c0:	2300      	movs	r3, #0
    43c2:	60fb      	str	r3, [r7, #12]

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    43c4:	4b1a      	ldr	r3, [pc, #104]	; (4430 <rssi_iir_update+0x8c>)
    43c6:	781b      	ldrb	r3, [r3, #0]
    43c8:	2b00      	cmp	r3, #0
    43ca:	d008      	beq.n	43de <rssi_iir_update+0x3a>
		avg = (rssi_sum  + 128) / rssi_count;
    43cc:	4b19      	ldr	r3, [pc, #100]	; (4434 <rssi_iir_update+0x90>)
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	3380      	adds	r3, #128	; 0x80
    43d2:	4a17      	ldr	r2, [pc, #92]	; (4430 <rssi_iir_update+0x8c>)
    43d4:	7812      	ldrb	r2, [r2, #0]
    43d6:	fb93 f3f2 	sdiv	r3, r3, r2
    43da:	60bb      	str	r3, [r7, #8]
    43dc:	e001      	b.n	43e2 <rssi_iir_update+0x3e>
	else
		avg = 0; // really an error
    43de:	2300      	movs	r3, #0
    43e0:	60bb      	str	r3, [r7, #8]
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    43e2:	4a15      	ldr	r2, [pc, #84]	; (4438 <rssi_iir_update+0x94>)
    43e4:	68fb      	ldr	r3, [r7, #12]
    43e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    43ea:	b21a      	sxth	r2, r3
    43ec:	4613      	mov	r3, r2
    43ee:	019b      	lsls	r3, r3, #6
    43f0:	1a9b      	subs	r3, r3, r2
    43f2:	009b      	lsls	r3, r3, #2
    43f4:	4413      	add	r3, r2
    43f6:	607b      	str	r3, [r7, #4]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    43f8:	68ba      	ldr	r2, [r7, #8]
    43fa:	4613      	mov	r3, r2
    43fc:	005b      	lsls	r3, r3, #1
    43fe:	4413      	add	r3, r2
    4400:	687a      	ldr	r2, [r7, #4]
    4402:	4413      	add	r3, r2
    4404:	607b      	str	r3, [r7, #4]
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	3380      	adds	r3, #128	; 0x80
    440a:	2b00      	cmp	r3, #0
    440c:	da00      	bge.n	4410 <rssi_iir_update+0x6c>
    440e:	33ff      	adds	r3, #255	; 0xff
    4410:	121b      	asrs	r3, r3, #8
    4412:	b299      	uxth	r1, r3
    4414:	4a08      	ldr	r2, [pc, #32]	; (4438 <rssi_iir_update+0x94>)
    4416:	68fb      	ldr	r3, [r7, #12]
    4418:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
    441c:	3714      	adds	r7, #20
    441e:	46bd      	mov	sp, r7
    4420:	f85d 7b04 	ldr.w	r7, [sp], #4
    4424:	4770      	bx	lr
    4426:	bf00      	nop
    4428:	1000097c 	.word	0x1000097c
    442c:	1000049c 	.word	0x1000049c
    4430:	10000a49 	.word	0x10000a49
    4434:	10000a4c 	.word	0x10000a4c
    4438:	100009a0 	.word	0x100009a0

0000443c <cs_threshold_set>:
/* Set CC2400 carrier sense threshold and store value to
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, u8 samples)
{
    443c:	b580      	push	{r7, lr}
    443e:	b082      	sub	sp, #8
    4440:	af00      	add	r7, sp, #0
    4442:	4603      	mov	r3, r0
    4444:	460a      	mov	r2, r1
    4446:	71fb      	strb	r3, [r7, #7]
    4448:	4613      	mov	r3, r2
    444a:	71bb      	strb	r3, [r7, #6]
	level = MIN(MAX(level,-120),(-20));
    444c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4450:	f113 0f14 	cmn.w	r3, #20
    4454:	d00d      	beq.n	4472 <cs_threshold_set+0x36>
    4456:	f997 3007 	ldrsb.w	r3, [r7, #7]
    445a:	f113 0f13 	cmn.w	r3, #19
    445e:	da08      	bge.n	4472 <cs_threshold_set+0x36>
    4460:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4464:	f06f 0277 	mvn.w	r2, #119	; 0x77
    4468:	4293      	cmp	r3, r2
    446a:	bfb8      	it	lt
    446c:	4613      	movlt	r3, r2
    446e:	b2db      	uxtb	r3, r3
    4470:	e000      	b.n	4474 <cs_threshold_set+0x38>
    4472:	23ec      	movs	r3, #236	; 0xec
    4474:	71fb      	strb	r3, [r7, #7]
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | (samples&3));
    4476:	79fb      	ldrb	r3, [r7, #7]
    4478:	3338      	adds	r3, #56	; 0x38
    447a:	b2db      	uxtb	r3, r3
    447c:	b29b      	uxth	r3, r3
    447e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    4482:	b29a      	uxth	r2, r3
    4484:	79bb      	ldrb	r3, [r7, #6]
    4486:	b29b      	uxth	r3, r3
    4488:	f003 0303 	and.w	r3, r3, #3
    448c:	b29b      	uxth	r3, r3
    448e:	4313      	orrs	r3, r2
    4490:	b29b      	uxth	r3, r3
    4492:	b29b      	uxth	r3, r3
    4494:	2006      	movs	r0, #6
    4496:	4619      	mov	r1, r3
    4498:	f005 fbc4 	bl	9c24 <cc2400_set>
	cs_threshold_cur = level;
    449c:	4a08      	ldr	r2, [pc, #32]	; (44c0 <cs_threshold_set+0x84>)
    449e:	79fb      	ldrb	r3, [r7, #7]
    44a0:	7013      	strb	r3, [r2, #0]
	cs_no_squelch = (level <= -120);
    44a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    44a6:	f113 0f77 	cmn.w	r3, #119	; 0x77
    44aa:	bfb4      	ite	lt
    44ac:	2301      	movlt	r3, #1
    44ae:	2300      	movge	r3, #0
    44b0:	b2db      	uxtb	r3, r3
    44b2:	461a      	mov	r2, r3
    44b4:	4b03      	ldr	r3, [pc, #12]	; (44c4 <cs_threshold_set+0x88>)
    44b6:	701a      	strb	r2, [r3, #0]
}
    44b8:	3708      	adds	r7, #8
    44ba:	46bd      	mov	sp, r7
    44bc:	bd80      	pop	{r7, pc}
    44be:	bf00      	nop
    44c0:	1000044d 	.word	0x1000044d
    44c4:	1000097e 	.word	0x1000097e

000044c8 <enqueue>:

static int enqueue(u8 type, u8 *buf)
{
    44c8:	b580      	push	{r7, lr}
    44ca:	b088      	sub	sp, #32
    44cc:	af00      	add	r7, sp, #0
    44ce:	4603      	mov	r3, r0
    44d0:	6039      	str	r1, [r7, #0]
    44d2:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    44d4:	f004 f93e 	bl	8754 <usb_enqueue>
    44d8:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    44da:	69fb      	ldr	r3, [r7, #28]
    44dc:	2b00      	cmp	r3, #0
    44de:	d109      	bne.n	44f4 <enqueue+0x2c>
		status |= FIFO_OVERFLOW;
    44e0:	4b59      	ldr	r3, [pc, #356]	; (4648 <enqueue+0x180>)
    44e2:	781b      	ldrb	r3, [r3, #0]
    44e4:	b2db      	uxtb	r3, r3
    44e6:	f043 0304 	orr.w	r3, r3, #4
    44ea:	b2da      	uxtb	r2, r3
    44ec:	4b56      	ldr	r3, [pc, #344]	; (4648 <enqueue+0x180>)
    44ee:	701a      	strb	r2, [r3, #0]
		return 0;
    44f0:	2300      	movs	r3, #0
    44f2:	e0a5      	b.n	4640 <enqueue+0x178>
	}

	f->pkt_type = type;
    44f4:	69fb      	ldr	r3, [r7, #28]
    44f6:	79fa      	ldrb	r2, [r7, #7]
    44f8:	701a      	strb	r2, [r3, #0]
	if(type == SPECAN) {
    44fa:	79fb      	ldrb	r3, [r7, #7]
    44fc:	2b04      	cmp	r3, #4
    44fe:	d113      	bne.n	4528 <enqueue+0x60>
		f->clkn_high = (clkn >> 20) & 0xff;
    4500:	4b52      	ldr	r3, [pc, #328]	; (464c <enqueue+0x184>)
    4502:	681b      	ldr	r3, [r3, #0]
    4504:	0d1b      	lsrs	r3, r3, #20
    4506:	b2da      	uxtb	r2, r3
    4508:	69fb      	ldr	r3, [r7, #28]
    450a:	70da      	strb	r2, [r3, #3]
		f->clk100ns = CLK100NS;
    450c:	4b4f      	ldr	r3, [pc, #316]	; (464c <enqueue+0x184>)
    450e:	681b      	ldr	r3, [r3, #0]
    4510:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4514:	f640 4235 	movw	r2, #3125	; 0xc35
    4518:	fb02 f203 	mul.w	r2, r2, r3
    451c:	4b4c      	ldr	r3, [pc, #304]	; (4650 <enqueue+0x188>)
    451e:	681b      	ldr	r3, [r3, #0]
    4520:	441a      	add	r2, r3
    4522:	69fb      	ldr	r3, [r7, #28]
    4524:	605a      	str	r2, [r3, #4]
    4526:	e008      	b.n	453a <enqueue+0x72>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    4528:	4b4a      	ldr	r3, [pc, #296]	; (4654 <enqueue+0x18c>)
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	b2da      	uxtb	r2, r3
    452e:	69fb      	ldr	r3, [r7, #28]
    4530:	70da      	strb	r2, [r3, #3]
		f->clk100ns = idle_buf_clk100ns;
    4532:	4b49      	ldr	r3, [pc, #292]	; (4658 <enqueue+0x190>)
    4534:	681a      	ldr	r2, [r3, #0]
    4536:	69fb      	ldr	r3, [r7, #28]
    4538:	605a      	str	r2, [r3, #4]
	}
	f->channel = idle_buf_channel - 2402;
    453a:	4b48      	ldr	r3, [pc, #288]	; (465c <enqueue+0x194>)
    453c:	881b      	ldrh	r3, [r3, #0]
    453e:	b29b      	uxth	r3, r3
    4540:	b2db      	uxtb	r3, r3
    4542:	3b62      	subs	r3, #98	; 0x62
    4544:	b2da      	uxtb	r2, r3
    4546:	69fb      	ldr	r3, [r7, #28]
    4548:	709a      	strb	r2, [r3, #2]
	f->rssi_min = rssi_min;
    454a:	4b45      	ldr	r3, [pc, #276]	; (4660 <enqueue+0x198>)
    454c:	781b      	ldrb	r3, [r3, #0]
    454e:	b2da      	uxtb	r2, r3
    4550:	69fb      	ldr	r3, [r7, #28]
    4552:	725a      	strb	r2, [r3, #9]
	f->rssi_max = rssi_max;
    4554:	4b43      	ldr	r3, [pc, #268]	; (4664 <enqueue+0x19c>)
    4556:	781b      	ldrb	r3, [r3, #0]
    4558:	b2da      	uxtb	r2, r3
    455a:	69fb      	ldr	r3, [r7, #28]
    455c:	721a      	strb	r2, [r3, #8]
	if (hop_mode != HOP_NONE)
    455e:	4b42      	ldr	r3, [pc, #264]	; (4668 <enqueue+0x1a0>)
    4560:	781b      	ldrb	r3, [r3, #0]
    4562:	2b00      	cmp	r3, #0
    4564:	d009      	beq.n	457a <enqueue+0xb2>
	//	f->rssi_avg = (int8_t)((rssi_iir[idle_buf_channel-2402] + 128)/256);
		f->rssi_avg = rssi_sum/rssi_count;
    4566:	4b41      	ldr	r3, [pc, #260]	; (466c <enqueue+0x1a4>)
    4568:	681b      	ldr	r3, [r3, #0]
    456a:	4a41      	ldr	r2, [pc, #260]	; (4670 <enqueue+0x1a8>)
    456c:	7812      	ldrb	r2, [r2, #0]
    456e:	fb93 f3f2 	sdiv	r3, r3, r2
    4572:	b2da      	uxtb	r2, r3
    4574:	69fb      	ldr	r3, [r7, #28]
    4576:	729a      	strb	r2, [r3, #10]
    4578:	e008      	b.n	458c <enqueue+0xc4>
	else
		//f->rssi_avg = (int8_t)((rssi_iir[0] + 128)/256);
		f->rssi_avg = rssi_sum/rssi_count;
    457a:	4b3c      	ldr	r3, [pc, #240]	; (466c <enqueue+0x1a4>)
    457c:	681b      	ldr	r3, [r3, #0]
    457e:	4a3c      	ldr	r2, [pc, #240]	; (4670 <enqueue+0x1a8>)
    4580:	7812      	ldrb	r2, [r2, #0]
    4582:	fb93 f3f2 	sdiv	r3, r3, r2
    4586:	b2da      	uxtb	r2, r3
    4588:	69fb      	ldr	r3, [r7, #28]
    458a:	729a      	strb	r2, [r3, #10]
	
	f->rssi_count = rssi_count;
    458c:	4b38      	ldr	r3, [pc, #224]	; (4670 <enqueue+0x1a8>)
    458e:	781a      	ldrb	r2, [r3, #0]
    4590:	69fb      	ldr	r3, [r7, #28]
    4592:	72da      	strb	r2, [r3, #11]

	USRLED_SET;
    4594:	4b37      	ldr	r3, [pc, #220]	; (4674 <enqueue+0x1ac>)
    4596:	2202      	movs	r2, #2
    4598:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    459a:	69fb      	ldr	r3, [r7, #28]
    459c:	330e      	adds	r3, #14
    459e:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    45a0:	683b      	ldr	r3, [r7, #0]
    45a2:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    45a4:	697b      	ldr	r3, [r7, #20]
    45a6:	681a      	ldr	r2, [r3, #0]
    45a8:	69bb      	ldr	r3, [r7, #24]
    45aa:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    45ac:	69bb      	ldr	r3, [r7, #24]
    45ae:	3304      	adds	r3, #4
    45b0:	697a      	ldr	r2, [r7, #20]
    45b2:	6852      	ldr	r2, [r2, #4]
    45b4:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    45b6:	69bb      	ldr	r3, [r7, #24]
    45b8:	3308      	adds	r3, #8
    45ba:	697a      	ldr	r2, [r7, #20]
    45bc:	6892      	ldr	r2, [r2, #8]
    45be:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    45c0:	69bb      	ldr	r3, [r7, #24]
    45c2:	330c      	adds	r3, #12
    45c4:	697a      	ldr	r2, [r7, #20]
    45c6:	68d2      	ldr	r2, [r2, #12]
    45c8:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    45ca:	69bb      	ldr	r3, [r7, #24]
    45cc:	3310      	adds	r3, #16
    45ce:	697a      	ldr	r2, [r7, #20]
    45d0:	6912      	ldr	r2, [r2, #16]
    45d2:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    45d4:	69bb      	ldr	r3, [r7, #24]
    45d6:	3314      	adds	r3, #20
    45d8:	697a      	ldr	r2, [r7, #20]
    45da:	6952      	ldr	r2, [r2, #20]
    45dc:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    45de:	69bb      	ldr	r3, [r7, #24]
    45e0:	3318      	adds	r3, #24
    45e2:	697a      	ldr	r2, [r7, #20]
    45e4:	6992      	ldr	r2, [r2, #24]
    45e6:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    45e8:	69bb      	ldr	r3, [r7, #24]
    45ea:	331c      	adds	r3, #28
    45ec:	697a      	ldr	r2, [r7, #20]
    45ee:	69d2      	ldr	r2, [r2, #28]
    45f0:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    45f2:	69bb      	ldr	r3, [r7, #24]
    45f4:	3320      	adds	r3, #32
    45f6:	697a      	ldr	r2, [r7, #20]
    45f8:	6a12      	ldr	r2, [r2, #32]
    45fa:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    45fc:	69bb      	ldr	r3, [r7, #24]
    45fe:	3324      	adds	r3, #36	; 0x24
    4600:	697a      	ldr	r2, [r7, #20]
    4602:	6a52      	ldr	r2, [r2, #36]	; 0x24
    4604:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    4606:	69bb      	ldr	r3, [r7, #24]
    4608:	3328      	adds	r3, #40	; 0x28
    460a:	697a      	ldr	r2, [r7, #20]
    460c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    460e:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    4610:	69bb      	ldr	r3, [r7, #24]
    4612:	332c      	adds	r3, #44	; 0x2c
    4614:	697a      	ldr	r2, [r7, #20]
    4616:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4618:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    461a:	69fb      	ldr	r3, [r7, #28]
    461c:	330e      	adds	r3, #14
    461e:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    4620:	683b      	ldr	r3, [r7, #0]
    4622:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    4624:	693b      	ldr	r3, [r7, #16]
    4626:	3330      	adds	r3, #48	; 0x30
    4628:	68fa      	ldr	r2, [r7, #12]
    462a:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    462c:	801a      	strh	r2, [r3, #0]

	f->status = status;
    462e:	4b06      	ldr	r3, [pc, #24]	; (4648 <enqueue+0x180>)
    4630:	781b      	ldrb	r3, [r3, #0]
    4632:	b2da      	uxtb	r2, r3
    4634:	69fb      	ldr	r3, [r7, #28]
    4636:	705a      	strb	r2, [r3, #1]
	status = 0;
    4638:	4b03      	ldr	r3, [pc, #12]	; (4648 <enqueue+0x180>)
    463a:	2200      	movs	r2, #0
    463c:	701a      	strb	r2, [r3, #0]

	return 1;
    463e:	2301      	movs	r3, #1
}
    4640:	4618      	mov	r0, r3
    4642:	3720      	adds	r7, #32
    4644:	46bd      	mov	sp, r7
    4646:	bd80      	pop	{r7, pc}
    4648:	10000a48 	.word	0x10000a48
    464c:	10000be4 	.word	0x10000be4
    4650:	40004008 	.word	0x40004008
    4654:	10001028 	.word	0x10001028
    4658:	10000bc8 	.word	0x10000bc8
    465c:	10000988 	.word	0x10000988
    4660:	10000bb8 	.word	0x10000bb8
    4664:	10000b04 	.word	0x10000b04
    4668:	1000097c 	.word	0x1000097c
    466c:	10000a4c 	.word	0x10000a4c
    4670:	10000a49 	.word	0x10000a49
    4674:	2009c038 	.word	0x2009c038

00004678 <enqueue_with_ts>:

int enqueue_with_ts(u8 type, u8 *buf, u32 ts)
{
    4678:	b580      	push	{r7, lr}
    467a:	b08a      	sub	sp, #40	; 0x28
    467c:	af00      	add	r7, sp, #0
    467e:	4603      	mov	r3, r0
    4680:	60b9      	str	r1, [r7, #8]
    4682:	607a      	str	r2, [r7, #4]
    4684:	73fb      	strb	r3, [r7, #15]
	usb_pkt_rx *f = usb_enqueue();
    4686:	f004 f865 	bl	8754 <usb_enqueue>
    468a:	6278      	str	r0, [r7, #36]	; 0x24

	/* fail if queue is full */
	if (f == NULL) {
    468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    468e:	2b00      	cmp	r3, #0
    4690:	d109      	bne.n	46a6 <enqueue_with_ts+0x2e>
		status |= FIFO_OVERFLOW;
    4692:	4b3c      	ldr	r3, [pc, #240]	; (4784 <enqueue_with_ts+0x10c>)
    4694:	781b      	ldrb	r3, [r3, #0]
    4696:	b2db      	uxtb	r3, r3
    4698:	f043 0304 	orr.w	r3, r3, #4
    469c:	b2da      	uxtb	r2, r3
    469e:	4b39      	ldr	r3, [pc, #228]	; (4784 <enqueue_with_ts+0x10c>)
    46a0:	701a      	strb	r2, [r3, #0]
		return 0;
    46a2:	2300      	movs	r3, #0
    46a4:	e069      	b.n	477a <enqueue_with_ts+0x102>
	}

	f->clkn_high = 0;
    46a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46a8:	2200      	movs	r2, #0
    46aa:	70da      	strb	r2, [r3, #3]
	f->clk100ns = ts;
    46ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46ae:	687a      	ldr	r2, [r7, #4]
    46b0:	605a      	str	r2, [r3, #4]

	f->channel = channel - 2402;
    46b2:	4b35      	ldr	r3, [pc, #212]	; (4788 <enqueue_with_ts+0x110>)
    46b4:	881b      	ldrh	r3, [r3, #0]
    46b6:	b29b      	uxth	r3, r3
    46b8:	b2db      	uxtb	r3, r3
    46ba:	3b62      	subs	r3, #98	; 0x62
    46bc:	b2da      	uxtb	r2, r3
    46be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46c0:	709a      	strb	r2, [r3, #2]
	f->rssi_avg = 0;
    46c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46c4:	2200      	movs	r2, #0
    46c6:	729a      	strb	r2, [r3, #10]
	f->rssi_count = 0;
    46c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46ca:	2200      	movs	r2, #0
    46cc:	72da      	strb	r2, [r3, #11]

	USRLED_SET;
    46ce:	4b2f      	ldr	r3, [pc, #188]	; (478c <enqueue_with_ts+0x114>)
    46d0:	2202      	movs	r2, #2
    46d2:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    46d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46d6:	330e      	adds	r3, #14
    46d8:	623b      	str	r3, [r7, #32]
	u32 *p2 = (u32 *)buf;
    46da:	68bb      	ldr	r3, [r7, #8]
    46dc:	61fb      	str	r3, [r7, #28]
	p1[0] = p2[0];
    46de:	69fb      	ldr	r3, [r7, #28]
    46e0:	681a      	ldr	r2, [r3, #0]
    46e2:	6a3b      	ldr	r3, [r7, #32]
    46e4:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    46e6:	6a3b      	ldr	r3, [r7, #32]
    46e8:	3304      	adds	r3, #4
    46ea:	69fa      	ldr	r2, [r7, #28]
    46ec:	6852      	ldr	r2, [r2, #4]
    46ee:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    46f0:	6a3b      	ldr	r3, [r7, #32]
    46f2:	3308      	adds	r3, #8
    46f4:	69fa      	ldr	r2, [r7, #28]
    46f6:	6892      	ldr	r2, [r2, #8]
    46f8:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    46fa:	6a3b      	ldr	r3, [r7, #32]
    46fc:	330c      	adds	r3, #12
    46fe:	69fa      	ldr	r2, [r7, #28]
    4700:	68d2      	ldr	r2, [r2, #12]
    4702:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    4704:	6a3b      	ldr	r3, [r7, #32]
    4706:	3310      	adds	r3, #16
    4708:	69fa      	ldr	r2, [r7, #28]
    470a:	6912      	ldr	r2, [r2, #16]
    470c:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    470e:	6a3b      	ldr	r3, [r7, #32]
    4710:	3314      	adds	r3, #20
    4712:	69fa      	ldr	r2, [r7, #28]
    4714:	6952      	ldr	r2, [r2, #20]
    4716:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    4718:	6a3b      	ldr	r3, [r7, #32]
    471a:	3318      	adds	r3, #24
    471c:	69fa      	ldr	r2, [r7, #28]
    471e:	6992      	ldr	r2, [r2, #24]
    4720:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    4722:	6a3b      	ldr	r3, [r7, #32]
    4724:	331c      	adds	r3, #28
    4726:	69fa      	ldr	r2, [r7, #28]
    4728:	69d2      	ldr	r2, [r2, #28]
    472a:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    472c:	6a3b      	ldr	r3, [r7, #32]
    472e:	3320      	adds	r3, #32
    4730:	69fa      	ldr	r2, [r7, #28]
    4732:	6a12      	ldr	r2, [r2, #32]
    4734:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    4736:	6a3b      	ldr	r3, [r7, #32]
    4738:	3324      	adds	r3, #36	; 0x24
    473a:	69fa      	ldr	r2, [r7, #28]
    473c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    473e:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    4740:	6a3b      	ldr	r3, [r7, #32]
    4742:	3328      	adds	r3, #40	; 0x28
    4744:	69fa      	ldr	r2, [r7, #28]
    4746:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4748:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    474a:	6a3b      	ldr	r3, [r7, #32]
    474c:	332c      	adds	r3, #44	; 0x2c
    474e:	69fa      	ldr	r2, [r7, #28]
    4750:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4752:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    4754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4756:	330e      	adds	r3, #14
    4758:	61bb      	str	r3, [r7, #24]
	u16 *p4 = (u16 *)buf;
    475a:	68bb      	ldr	r3, [r7, #8]
    475c:	617b      	str	r3, [r7, #20]
	p3[24] = p4[24];
    475e:	69bb      	ldr	r3, [r7, #24]
    4760:	3330      	adds	r3, #48	; 0x30
    4762:	697a      	ldr	r2, [r7, #20]
    4764:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    4766:	801a      	strh	r2, [r3, #0]

	f->status = status;
    4768:	4b06      	ldr	r3, [pc, #24]	; (4784 <enqueue_with_ts+0x10c>)
    476a:	781b      	ldrb	r3, [r3, #0]
    476c:	b2da      	uxtb	r2, r3
    476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4770:	705a      	strb	r2, [r3, #1]
	status = 0;
    4772:	4b04      	ldr	r3, [pc, #16]	; (4784 <enqueue_with_ts+0x10c>)
    4774:	2200      	movs	r2, #0
    4776:	701a      	strb	r2, [r3, #0]

	return 1;
    4778:	2301      	movs	r3, #1
}
    477a:	4618      	mov	r0, r3
    477c:	3728      	adds	r7, #40	; 0x28
    477e:	46bd      	mov	sp, r7
    4780:	bd80      	pop	{r7, pc}
    4782:	bf00      	nop
    4784:	10000a48 	.word	0x10000a48
    4788:	1000049c 	.word	0x1000049c
    478c:	2009c038 	.word	0x2009c038

00004790 <cs_threshold_calc_and_set>:

static void cs_threshold_calc_and_set(void)
{
    4790:	b580      	push	{r7, lr}
    4792:	b082      	sub	sp, #8
    4794:	af00      	add	r7, sp, #0

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    4796:	4b17      	ldr	r3, [pc, #92]	; (47f4 <cs_threshold_calc_and_set+0x64>)
    4798:	781b      	ldrb	r3, [r3, #0]
    479a:	2b00      	cmp	r3, #0
    479c:	d01d      	beq.n	47da <cs_threshold_calc_and_set+0x4a>
    479e:	4b16      	ldr	r3, [pc, #88]	; (47f8 <cs_threshold_calc_and_set+0x68>)
    47a0:	781b      	ldrb	r3, [r3, #0]
    47a2:	b25b      	sxtb	r3, r3
    47a4:	2b00      	cmp	r3, #0
    47a6:	dd18      	ble.n	47da <cs_threshold_calc_and_set+0x4a>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
    47a8:	4b14      	ldr	r3, [pc, #80]	; (47fc <cs_threshold_calc_and_set+0x6c>)
    47aa:	881b      	ldrh	r3, [r3, #0]
    47ac:	b29b      	uxth	r3, r3
    47ae:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    47b2:	4a13      	ldr	r2, [pc, #76]	; (4800 <cs_threshold_calc_and_set+0x70>)
    47b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    47b8:	b21b      	sxth	r3, r3
    47ba:	3380      	adds	r3, #128	; 0x80
    47bc:	2b00      	cmp	r3, #0
    47be:	da00      	bge.n	47c2 <cs_threshold_calc_and_set+0x32>
    47c0:	33ff      	adds	r3, #255	; 0xff
    47c2:	121b      	asrs	r3, r3, #8
    47c4:	71bb      	strb	r3, [r7, #6]
		level = rssi - 54 + cs_threshold_req;
    47c6:	79ba      	ldrb	r2, [r7, #6]
    47c8:	4b0b      	ldr	r3, [pc, #44]	; (47f8 <cs_threshold_calc_and_set+0x68>)
    47ca:	781b      	ldrb	r3, [r3, #0]
    47cc:	b2db      	uxtb	r3, r3
    47ce:	4413      	add	r3, r2
    47d0:	b2db      	uxtb	r3, r3
    47d2:	3b36      	subs	r3, #54	; 0x36
    47d4:	b2db      	uxtb	r3, r3
    47d6:	71fb      	strb	r3, [r7, #7]

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    47d8:	e002      	b.n	47e0 <cs_threshold_calc_and_set+0x50>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
		level = rssi - 54 + cs_threshold_req;
	}
	else {
		level = cs_threshold_req;
    47da:	4b07      	ldr	r3, [pc, #28]	; (47f8 <cs_threshold_calc_and_set+0x68>)
    47dc:	781b      	ldrb	r3, [r3, #0]
    47de:	71fb      	strb	r3, [r7, #7]
	}
	cs_threshold_set(level, CS_SAMPLES_4);
    47e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    47e4:	4618      	mov	r0, r3
    47e6:	2103      	movs	r1, #3
    47e8:	f7ff fe28 	bl	443c <cs_threshold_set>
}
    47ec:	3708      	adds	r7, #8
    47ee:	46bd      	mov	sp, r7
    47f0:	bd80      	pop	{r7, pc}
    47f2:	bf00      	nop
    47f4:	1000097c 	.word	0x1000097c
    47f8:	1000044c 	.word	0x1000044c
    47fc:	1000049c 	.word	0x1000049c
    4800:	100009a0 	.word	0x100009a0

00004804 <cs_trigger_enable>:
/* CS comes from CC2400 GIO6, which is LPC P2.2, active low. GPIO
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
static void cs_trigger_enable(void)
{
    4804:	b480      	push	{r7}
    4806:	af00      	add	r7, sp, #0
	cs_trigger = 0;
    4808:	4b09      	ldr	r3, [pc, #36]	; (4830 <cs_trigger_enable+0x2c>)
    480a:	2200      	movs	r2, #0
    480c:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    480e:	4b09      	ldr	r3, [pc, #36]	; (4834 <cs_trigger_enable+0x30>)
    4810:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4814:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4816:	4b08      	ldr	r3, [pc, #32]	; (4838 <cs_trigger_enable+0x34>)
    4818:	2204      	movs	r2, #4
    481a:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    481c:	4a07      	ldr	r2, [pc, #28]	; (483c <cs_trigger_enable+0x38>)
    481e:	4b07      	ldr	r3, [pc, #28]	; (483c <cs_trigger_enable+0x38>)
    4820:	681b      	ldr	r3, [r3, #0]
    4822:	f043 0304 	orr.w	r3, r3, #4
    4826:	6013      	str	r3, [r2, #0]
}
    4828:	46bd      	mov	sp, r7
    482a:	f85d 7b04 	ldr.w	r7, [sp], #4
    482e:	4770      	bx	lr
    4830:	100010b0 	.word	0x100010b0
    4834:	e000e100 	.word	0xe000e100
    4838:	400280ac 	.word	0x400280ac
    483c:	400280b4 	.word	0x400280b4

00004840 <cs_trigger_disable>:

static void cs_trigger_disable(void)
{
    4840:	b480      	push	{r7}
    4842:	af00      	add	r7, sp, #0
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    4844:	4a09      	ldr	r2, [pc, #36]	; (486c <cs_trigger_disable+0x2c>)
    4846:	4b09      	ldr	r3, [pc, #36]	; (486c <cs_trigger_disable+0x2c>)
    4848:	681b      	ldr	r3, [r3, #0]
    484a:	f023 0304 	bic.w	r3, r3, #4
    484e:	6013      	str	r3, [r2, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4850:	4b07      	ldr	r3, [pc, #28]	; (4870 <cs_trigger_disable+0x30>)
    4852:	2204      	movs	r2, #4
    4854:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_EINT3;
    4856:	4b07      	ldr	r3, [pc, #28]	; (4874 <cs_trigger_disable+0x34>)
    4858:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    485c:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    485e:	4b06      	ldr	r3, [pc, #24]	; (4878 <cs_trigger_disable+0x38>)
    4860:	2200      	movs	r2, #0
    4862:	701a      	strb	r2, [r3, #0]
}
    4864:	46bd      	mov	sp, r7
    4866:	f85d 7b04 	ldr.w	r7, [sp], #4
    486a:	4770      	bx	lr
    486c:	400280b4 	.word	0x400280b4
    4870:	400280ac 	.word	0x400280ac
    4874:	e000e180 	.word	0xe000e180
    4878:	100010b0 	.word	0x100010b0

0000487c <vendor_request_handler>:

static int vendor_request_handler(u8 request, u16 *request_params, u8 *data, int *data_len)
{
    487c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4880:	b095      	sub	sp, #84	; 0x54
    4882:	af00      	add	r7, sp, #0
    4884:	60b9      	str	r1, [r7, #8]
    4886:	607a      	str	r2, [r7, #4]
    4888:	603b      	str	r3, [r7, #0]
    488a:	4603      	mov	r3, r0
    488c:	73fb      	strb	r3, [r7, #15]
	u64 ac_copy;
	int i; // loop counter
	u32 clock;
	int clock_offset;
	u8 length; // string length
	usb_pkt_rx *p = NULL;
    488e:	2300      	movs	r3, #0
    4890:	647b      	str	r3, [r7, #68]	; 0x44
	u16 reg_val;

	switch (request) {
    4892:	7bfb      	ldrb	r3, [r7, #15]
    4894:	2b3c      	cmp	r3, #60	; 0x3c
    4896:	f200 8551 	bhi.w	533c <vendor_request_handler+0xac0>
    489a:	a201      	add	r2, pc, #4	; (adr r2, 48a0 <vendor_request_handler+0x24>)
    489c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    48a0:	00004995 	.word	0x00004995
    48a4:	0000499f 	.word	0x0000499f
    48a8:	0000533d 	.word	0x0000533d
    48ac:	000049af 	.word	0x000049af
    48b0:	000049d1 	.word	0x000049d1
    48b4:	000049ed 	.word	0x000049ed
    48b8:	00004a0f 	.word	0x00004a0f
    48bc:	00004a2b 	.word	0x00004a2b
    48c0:	00004a4d 	.word	0x00004a4d
    48c4:	00004a6d 	.word	0x00004a6d
    48c8:	00004a8f 	.word	0x00004a8f
    48cc:	00004d33 	.word	0x00004d33
    48d0:	00004d59 	.word	0x00004d59
    48d4:	00004b05 	.word	0x00004b05
    48d8:	00004b0f 	.word	0x00004b0f
    48dc:	00004aaf 	.word	0x00004aaf
    48e0:	00004bed 	.word	0x00004bed
    48e4:	00004c0d 	.word	0x00004c0d
    48e8:	00004c45 	.word	0x00004c45
    48ec:	00004c65 	.word	0x00004c65
    48f0:	00004c81 	.word	0x00004c81
    48f4:	00004d0d 	.word	0x00004d0d
    48f8:	00004d15 	.word	0x00004d15
    48fc:	00004d27 	.word	0x00004d27
    4900:	00004de3 	.word	0x00004de3
    4904:	00004e01 	.word	0x00004e01
    4908:	0000533d 	.word	0x0000533d
    490c:	00004e0d 	.word	0x00004e0d
    4910:	00004c89 	.word	0x00004c89
    4914:	00004ca5 	.word	0x00004ca5
    4918:	00004ccd 	.word	0x00004ccd
    491c:	00004cc5 	.word	0x00004cc5
    4920:	00004cd5 	.word	0x00004cd5
    4924:	00004ed1 	.word	0x00004ed1
    4928:	00004e69 	.word	0x00004e69
    492c:	00004f45 	.word	0x00004f45
    4930:	00004f53 	.word	0x00004f53
    4934:	00004f63 	.word	0x00004f63
    4938:	00004f75 	.word	0x00004f75
    493c:	00005041 	.word	0x00005041
    4940:	00005087 	.word	0x00005087
    4944:	00005115 	.word	0x00005115
    4948:	00005149 	.word	0x00005149
    494c:	0000516b 	.word	0x0000516b
    4950:	000051c3 	.word	0x000051c3
    4954:	00005341 	.word	0x00005341
    4958:	000051f5 	.word	0x000051f5
    495c:	0000520b 	.word	0x0000520b
    4960:	00005227 	.word	0x00005227
    4964:	0000523d 	.word	0x0000523d
    4968:	00005269 	.word	0x00005269
    496c:	000050b9 	.word	0x000050b9
    4970:	000050eb 	.word	0x000050eb
    4974:	00005285 	.word	0x00005285
    4978:	000052c9 	.word	0x000052c9
    497c:	00004f13 	.word	0x00004f13
    4980:	000052db 	.word	0x000052db
    4984:	0000533d 	.word	0x0000533d
    4988:	000052b3 	.word	0x000052b3
    498c:	0000531f 	.word	0x0000531f
    4990:	0000532b 	.word	0x0000532b

	case UBERTOOTH_PING:
		*data_len = 0;
    4994:	683b      	ldr	r3, [r7, #0]
    4996:	2200      	movs	r2, #0
    4998:	601a      	str	r2, [r3, #0]
		break;
    499a:	f000 bcd2 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    499e:	4ba1      	ldr	r3, [pc, #644]	; (4c24 <vendor_request_handler+0x3a8>)
    49a0:	2201      	movs	r2, #1
    49a2:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    49a4:	683b      	ldr	r3, [r7, #0]
    49a6:	2200      	movs	r2, #0
    49a8:	601a      	str	r2, [r3, #0]
		break;
    49aa:	f000 bcca 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    49ae:	4b9e      	ldr	r3, [pc, #632]	; (4c28 <vendor_request_handler+0x3ac>)
    49b0:	681b      	ldr	r3, [r3, #0]
    49b2:	f003 0302 	and.w	r3, r3, #2
    49b6:	2b00      	cmp	r3, #0
    49b8:	bf14      	ite	ne
    49ba:	2301      	movne	r3, #1
    49bc:	2300      	moveq	r3, #0
    49be:	b2db      	uxtb	r3, r3
    49c0:	461a      	mov	r2, r3
    49c2:	687b      	ldr	r3, [r7, #4]
    49c4:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    49c6:	683b      	ldr	r3, [r7, #0]
    49c8:	2201      	movs	r2, #1
    49ca:	601a      	str	r2, [r3, #0]
		break;
    49cc:	f000 bcb9 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    49d0:	68bb      	ldr	r3, [r7, #8]
    49d2:	881b      	ldrh	r3, [r3, #0]
    49d4:	2b00      	cmp	r3, #0
    49d6:	d004      	beq.n	49e2 <vendor_request_handler+0x166>
			USRLED_SET;
    49d8:	4b94      	ldr	r3, [pc, #592]	; (4c2c <vendor_request_handler+0x3b0>)
    49da:	2202      	movs	r2, #2
    49dc:	601a      	str	r2, [r3, #0]
		else
			USRLED_CLR;
		break;
    49de:	f000 bcb0 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
			USRLED_SET;
		else
			USRLED_CLR;
    49e2:	4b93      	ldr	r3, [pc, #588]	; (4c30 <vendor_request_handler+0x3b4>)
    49e4:	2202      	movs	r2, #2
    49e6:	601a      	str	r2, [r3, #0]
		break;
    49e8:	f000 bcab 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    49ec:	4b8e      	ldr	r3, [pc, #568]	; (4c28 <vendor_request_handler+0x3ac>)
    49ee:	681b      	ldr	r3, [r3, #0]
    49f0:	f003 0310 	and.w	r3, r3, #16
    49f4:	2b00      	cmp	r3, #0
    49f6:	bf14      	ite	ne
    49f8:	2301      	movne	r3, #1
    49fa:	2300      	moveq	r3, #0
    49fc:	b2db      	uxtb	r3, r3
    49fe:	461a      	mov	r2, r3
    4a00:	687b      	ldr	r3, [r7, #4]
    4a02:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4a04:	683b      	ldr	r3, [r7, #0]
    4a06:	2201      	movs	r2, #1
    4a08:	601a      	str	r2, [r3, #0]
		break;
    4a0a:	f000 bc9a 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    4a0e:	68bb      	ldr	r3, [r7, #8]
    4a10:	881b      	ldrh	r3, [r3, #0]
    4a12:	2b00      	cmp	r3, #0
    4a14:	d004      	beq.n	4a20 <vendor_request_handler+0x1a4>
			RXLED_SET;
    4a16:	4b85      	ldr	r3, [pc, #532]	; (4c2c <vendor_request_handler+0x3b0>)
    4a18:	2210      	movs	r2, #16
    4a1a:	601a      	str	r2, [r3, #0]
		else
			RXLED_CLR;
		break;
    4a1c:	f000 bc91 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
			RXLED_SET;
		else
			RXLED_CLR;
    4a20:	4b83      	ldr	r3, [pc, #524]	; (4c30 <vendor_request_handler+0x3b4>)
    4a22:	2210      	movs	r2, #16
    4a24:	601a      	str	r2, [r3, #0]
		break;
    4a26:	f000 bc8c 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    4a2a:	4b7f      	ldr	r3, [pc, #508]	; (4c28 <vendor_request_handler+0x3ac>)
    4a2c:	681b      	ldr	r3, [r3, #0]
    4a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4a32:	2b00      	cmp	r3, #0
    4a34:	bf14      	ite	ne
    4a36:	2301      	movne	r3, #1
    4a38:	2300      	moveq	r3, #0
    4a3a:	b2db      	uxtb	r3, r3
    4a3c:	461a      	mov	r2, r3
    4a3e:	687b      	ldr	r3, [r7, #4]
    4a40:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4a42:	683b      	ldr	r3, [r7, #0]
    4a44:	2201      	movs	r2, #1
    4a46:	601a      	str	r2, [r3, #0]
		break;
    4a48:	f000 bc7b 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    4a4c:	68bb      	ldr	r3, [r7, #8]
    4a4e:	881b      	ldrh	r3, [r3, #0]
    4a50:	2b00      	cmp	r3, #0
    4a52:	d005      	beq.n	4a60 <vendor_request_handler+0x1e4>
			TXLED_SET;
    4a54:	4b75      	ldr	r3, [pc, #468]	; (4c2c <vendor_request_handler+0x3b0>)
    4a56:	f44f 7280 	mov.w	r2, #256	; 0x100
    4a5a:	601a      	str	r2, [r3, #0]
		else
			TXLED_CLR;
		break;
    4a5c:	f000 bc71 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
			TXLED_SET;
		else
			TXLED_CLR;
    4a60:	4b73      	ldr	r3, [pc, #460]	; (4c30 <vendor_request_handler+0x3b4>)
    4a62:	f44f 7280 	mov.w	r2, #256	; 0x100
    4a66:	601a      	str	r2, [r3, #0]
		break;
    4a68:	f000 bc6b 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    4a6c:	4b6e      	ldr	r3, [pc, #440]	; (4c28 <vendor_request_handler+0x3ac>)
    4a6e:	681b      	ldr	r3, [r3, #0]
    4a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4a74:	2b00      	cmp	r3, #0
    4a76:	bf14      	ite	ne
    4a78:	2301      	movne	r3, #1
    4a7a:	2300      	moveq	r3, #0
    4a7c:	b2db      	uxtb	r3, r3
    4a7e:	461a      	mov	r2, r3
    4a80:	687b      	ldr	r3, [r7, #4]
    4a82:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4a84:	683b      	ldr	r3, [r7, #0]
    4a86:	2201      	movs	r2, #1
    4a88:	601a      	str	r2, [r3, #0]
		break;
    4a8a:	f000 bc5a 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    4a8e:	68bb      	ldr	r3, [r7, #8]
    4a90:	881b      	ldrh	r3, [r3, #0]
    4a92:	2b00      	cmp	r3, #0
    4a94:	d005      	beq.n	4aa2 <vendor_request_handler+0x226>
			CC1V8_SET;
    4a96:	4b65      	ldr	r3, [pc, #404]	; (4c2c <vendor_request_handler+0x3b0>)
    4a98:	f44f 7200 	mov.w	r2, #512	; 0x200
    4a9c:	601a      	str	r2, [r3, #0]
		else
			CC1V8_CLR;
		break;
    4a9e:	f000 bc50 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
			CC1V8_SET;
		else
			CC1V8_CLR;
    4aa2:	4b63      	ldr	r3, [pc, #396]	; (4c30 <vendor_request_handler+0x3b4>)
    4aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
    4aa8:	601a      	str	r2, [r3, #0]
		break;
    4aaa:	f000 bc4a 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_PARTNUM:
		command[0] = 54; /* read part number */
    4aae:	2336      	movs	r3, #54	; 0x36
    4ab0:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4ab2:	4b60      	ldr	r3, [pc, #384]	; (4c34 <vendor_request_handler+0x3b8>)
    4ab4:	681b      	ldr	r3, [r3, #0]
    4ab6:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4aba:	f107 0210 	add.w	r2, r7, #16
    4abe:	4608      	mov	r0, r1
    4ac0:	4611      	mov	r1, r2
    4ac2:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4ac4:	693b      	ldr	r3, [r7, #16]
    4ac6:	b2da      	uxtb	r2, r3
    4ac8:	687b      	ldr	r3, [r7, #4]
    4aca:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4acc:	687b      	ldr	r3, [r7, #4]
    4ace:	3301      	adds	r3, #1
    4ad0:	697a      	ldr	r2, [r7, #20]
    4ad2:	b2d2      	uxtb	r2, r2
    4ad4:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4ad6:	687b      	ldr	r3, [r7, #4]
    4ad8:	3302      	adds	r3, #2
    4ada:	697a      	ldr	r2, [r7, #20]
    4adc:	0a12      	lsrs	r2, r2, #8
    4ade:	b2d2      	uxtb	r2, r2
    4ae0:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4ae2:	687b      	ldr	r3, [r7, #4]
    4ae4:	3303      	adds	r3, #3
    4ae6:	697a      	ldr	r2, [r7, #20]
    4ae8:	0c12      	lsrs	r2, r2, #16
    4aea:	b2d2      	uxtb	r2, r2
    4aec:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4aee:	687b      	ldr	r3, [r7, #4]
    4af0:	3304      	adds	r3, #4
    4af2:	697a      	ldr	r2, [r7, #20]
    4af4:	0e12      	lsrs	r2, r2, #24
    4af6:	b2d2      	uxtb	r2, r2
    4af8:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4afa:	683b      	ldr	r3, [r7, #0]
    4afc:	2205      	movs	r2, #5
    4afe:	601a      	str	r2, [r3, #0]
		break;
    4b00:	f000 bc1f 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
    4b04:	4b47      	ldr	r3, [pc, #284]	; (4c24 <vendor_request_handler+0x3a8>)
    4b06:	220b      	movs	r2, #11
    4b08:	701a      	strb	r2, [r3, #0]
		break;
    4b0a:	f000 bc1a 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_SERIAL:
		command[0] = 58; /* read device serial number */
    4b0e:	233a      	movs	r3, #58	; 0x3a
    4b10:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4b12:	4b48      	ldr	r3, [pc, #288]	; (4c34 <vendor_request_handler+0x3b8>)
    4b14:	681b      	ldr	r3, [r3, #0]
    4b16:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4b1a:	f107 0210 	add.w	r2, r7, #16
    4b1e:	4608      	mov	r0, r1
    4b20:	4611      	mov	r1, r2
    4b22:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4b24:	693b      	ldr	r3, [r7, #16]
    4b26:	b2da      	uxtb	r2, r3
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4b2c:	687b      	ldr	r3, [r7, #4]
    4b2e:	3301      	adds	r3, #1
    4b30:	697a      	ldr	r2, [r7, #20]
    4b32:	b2d2      	uxtb	r2, r2
    4b34:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4b36:	687b      	ldr	r3, [r7, #4]
    4b38:	3302      	adds	r3, #2
    4b3a:	697a      	ldr	r2, [r7, #20]
    4b3c:	0a12      	lsrs	r2, r2, #8
    4b3e:	b2d2      	uxtb	r2, r2
    4b40:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4b42:	687b      	ldr	r3, [r7, #4]
    4b44:	3303      	adds	r3, #3
    4b46:	697a      	ldr	r2, [r7, #20]
    4b48:	0c12      	lsrs	r2, r2, #16
    4b4a:	b2d2      	uxtb	r2, r2
    4b4c:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4b4e:	687b      	ldr	r3, [r7, #4]
    4b50:	3304      	adds	r3, #4
    4b52:	697a      	ldr	r2, [r7, #20]
    4b54:	0e12      	lsrs	r2, r2, #24
    4b56:	b2d2      	uxtb	r2, r2
    4b58:	701a      	strb	r2, [r3, #0]
		data[5] = result[2] & 0xFF;
    4b5a:	687b      	ldr	r3, [r7, #4]
    4b5c:	3305      	adds	r3, #5
    4b5e:	69ba      	ldr	r2, [r7, #24]
    4b60:	b2d2      	uxtb	r2, r2
    4b62:	701a      	strb	r2, [r3, #0]
		data[6] = (result[2] >> 8) & 0xFF;
    4b64:	687b      	ldr	r3, [r7, #4]
    4b66:	3306      	adds	r3, #6
    4b68:	69ba      	ldr	r2, [r7, #24]
    4b6a:	0a12      	lsrs	r2, r2, #8
    4b6c:	b2d2      	uxtb	r2, r2
    4b6e:	701a      	strb	r2, [r3, #0]
		data[7] = (result[2] >> 16) & 0xFF;
    4b70:	687b      	ldr	r3, [r7, #4]
    4b72:	3307      	adds	r3, #7
    4b74:	69ba      	ldr	r2, [r7, #24]
    4b76:	0c12      	lsrs	r2, r2, #16
    4b78:	b2d2      	uxtb	r2, r2
    4b7a:	701a      	strb	r2, [r3, #0]
		data[8] = (result[2] >> 24) & 0xFF;
    4b7c:	687b      	ldr	r3, [r7, #4]
    4b7e:	3308      	adds	r3, #8
    4b80:	69ba      	ldr	r2, [r7, #24]
    4b82:	0e12      	lsrs	r2, r2, #24
    4b84:	b2d2      	uxtb	r2, r2
    4b86:	701a      	strb	r2, [r3, #0]
		data[9] = result[3] & 0xFF;
    4b88:	687b      	ldr	r3, [r7, #4]
    4b8a:	3309      	adds	r3, #9
    4b8c:	69fa      	ldr	r2, [r7, #28]
    4b8e:	b2d2      	uxtb	r2, r2
    4b90:	701a      	strb	r2, [r3, #0]
		data[10] = (result[3] >> 8) & 0xFF;
    4b92:	687b      	ldr	r3, [r7, #4]
    4b94:	330a      	adds	r3, #10
    4b96:	69fa      	ldr	r2, [r7, #28]
    4b98:	0a12      	lsrs	r2, r2, #8
    4b9a:	b2d2      	uxtb	r2, r2
    4b9c:	701a      	strb	r2, [r3, #0]
		data[11] = (result[3] >> 16) & 0xFF;
    4b9e:	687b      	ldr	r3, [r7, #4]
    4ba0:	330b      	adds	r3, #11
    4ba2:	69fa      	ldr	r2, [r7, #28]
    4ba4:	0c12      	lsrs	r2, r2, #16
    4ba6:	b2d2      	uxtb	r2, r2
    4ba8:	701a      	strb	r2, [r3, #0]
		data[12] = (result[3] >> 24) & 0xFF;
    4baa:	687b      	ldr	r3, [r7, #4]
    4bac:	330c      	adds	r3, #12
    4bae:	69fa      	ldr	r2, [r7, #28]
    4bb0:	0e12      	lsrs	r2, r2, #24
    4bb2:	b2d2      	uxtb	r2, r2
    4bb4:	701a      	strb	r2, [r3, #0]
		data[13] = result[4] & 0xFF;
    4bb6:	687b      	ldr	r3, [r7, #4]
    4bb8:	330d      	adds	r3, #13
    4bba:	6a3a      	ldr	r2, [r7, #32]
    4bbc:	b2d2      	uxtb	r2, r2
    4bbe:	701a      	strb	r2, [r3, #0]
		data[14] = (result[4] >> 8) & 0xFF;
    4bc0:	687b      	ldr	r3, [r7, #4]
    4bc2:	330e      	adds	r3, #14
    4bc4:	6a3a      	ldr	r2, [r7, #32]
    4bc6:	0a12      	lsrs	r2, r2, #8
    4bc8:	b2d2      	uxtb	r2, r2
    4bca:	701a      	strb	r2, [r3, #0]
		data[15] = (result[4] >> 16) & 0xFF;
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	330f      	adds	r3, #15
    4bd0:	6a3a      	ldr	r2, [r7, #32]
    4bd2:	0c12      	lsrs	r2, r2, #16
    4bd4:	b2d2      	uxtb	r2, r2
    4bd6:	701a      	strb	r2, [r3, #0]
		data[16] = (result[4] >> 24) & 0xFF;
    4bd8:	687b      	ldr	r3, [r7, #4]
    4bda:	3310      	adds	r3, #16
    4bdc:	6a3a      	ldr	r2, [r7, #32]
    4bde:	0e12      	lsrs	r2, r2, #24
    4be0:	b2d2      	uxtb	r2, r2
    4be2:	701a      	strb	r2, [r3, #0]
		*data_len = 17;
    4be4:	683b      	ldr	r3, [r7, #0]
    4be6:	2211      	movs	r2, #17
    4be8:	601a      	str	r2, [r3, #0]
		break;
    4bea:	e3aa      	b.n	5342 <vendor_request_handler+0xac6>

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    4bec:	4b12      	ldr	r3, [pc, #72]	; (4c38 <vendor_request_handler+0x3bc>)
    4bee:	681b      	ldr	r3, [r3, #0]
    4bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4bf4:	2b00      	cmp	r3, #0
    4bf6:	bf14      	ite	ne
    4bf8:	2301      	movne	r3, #1
    4bfa:	2300      	moveq	r3, #0
    4bfc:	b2db      	uxtb	r3, r3
    4bfe:	461a      	mov	r2, r3
    4c00:	687b      	ldr	r3, [r7, #4]
    4c02:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c04:	683b      	ldr	r3, [r7, #0]
    4c06:	2201      	movs	r2, #1
    4c08:	601a      	str	r2, [r3, #0]
		break;
    4c0a:	e39a      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    4c0c:	68bb      	ldr	r3, [r7, #8]
    4c0e:	881b      	ldrh	r3, [r3, #0]
    4c10:	2b00      	cmp	r3, #0
    4c12:	d003      	beq.n	4c1c <vendor_request_handler+0x3a0>
			PAEN_SET;
    4c14:	4b09      	ldr	r3, [pc, #36]	; (4c3c <vendor_request_handler+0x3c0>)
    4c16:	2280      	movs	r2, #128	; 0x80
    4c18:	601a      	str	r2, [r3, #0]
		else
			PAEN_CLR;
		break;
    4c1a:	e392      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
			PAEN_SET;
		else
			PAEN_CLR;
    4c1c:	4b08      	ldr	r3, [pc, #32]	; (4c40 <vendor_request_handler+0x3c4>)
    4c1e:	2280      	movs	r2, #128	; 0x80
    4c20:	601a      	str	r2, [r3, #0]
		break;
    4c22:	e38e      	b.n	5342 <vendor_request_handler+0xac6>
    4c24:	10000a3f 	.word	0x10000a3f
    4c28:	2009c034 	.word	0x2009c034
    4c2c:	2009c038 	.word	0x2009c038
    4c30:	2009c03c 	.word	0x2009c03c
    4c34:	10000448 	.word	0x10000448
    4c38:	2009c054 	.word	0x2009c054
    4c3c:	2009c058 	.word	0x2009c058
    4c40:	2009c05c 	.word	0x2009c05c

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    4c44:	4b92      	ldr	r3, [pc, #584]	; (4e90 <vendor_request_handler+0x614>)
    4c46:	681b      	ldr	r3, [r3, #0]
    4c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4c4c:	2b00      	cmp	r3, #0
    4c4e:	bf14      	ite	ne
    4c50:	2301      	movne	r3, #1
    4c52:	2300      	moveq	r3, #0
    4c54:	b2db      	uxtb	r3, r3
    4c56:	461a      	mov	r2, r3
    4c58:	687b      	ldr	r3, [r7, #4]
    4c5a:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c5c:	683b      	ldr	r3, [r7, #0]
    4c5e:	2201      	movs	r2, #1
    4c60:	601a      	str	r2, [r3, #0]
		break;
    4c62:	e36e      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    4c64:	68bb      	ldr	r3, [r7, #8]
    4c66:	881b      	ldrh	r3, [r3, #0]
    4c68:	2b00      	cmp	r3, #0
    4c6a:	d004      	beq.n	4c76 <vendor_request_handler+0x3fa>
			HGM_SET;
    4c6c:	4b89      	ldr	r3, [pc, #548]	; (4e94 <vendor_request_handler+0x618>)
    4c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
    4c72:	601a      	str	r2, [r3, #0]
		else
			HGM_CLR;
		break;
    4c74:	e365      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
			HGM_SET;
		else
			HGM_CLR;
    4c76:	4b88      	ldr	r3, [pc, #544]	; (4e98 <vendor_request_handler+0x61c>)
    4c78:	f44f 7280 	mov.w	r2, #256	; 0x100
    4c7c:	601a      	str	r2, [r3, #0]
		break;
    4c7e:	e360      	b.n	5342 <vendor_request_handler+0xac6>
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    4c80:	4b86      	ldr	r3, [pc, #536]	; (4e9c <vendor_request_handler+0x620>)
    4c82:	2203      	movs	r2, #3
    4c84:	701a      	strb	r2, [r3, #0]
		break;
    4c86:	e35c      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    4c88:	2005      	movs	r0, #5
    4c8a:	f004 ffb5 	bl	9bf8 <cc2400_get>
    4c8e:	4603      	mov	r3, r0
    4c90:	b2db      	uxtb	r3, r3
    4c92:	f003 0307 	and.w	r3, r3, #7
    4c96:	b2da      	uxtb	r2, r3
    4c98:	687b      	ldr	r3, [r7, #4]
    4c9a:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c9c:	683b      	ldr	r3, [r7, #0]
    4c9e:	2201      	movs	r2, #1
    4ca0:	601a      	str	r2, [r3, #0]
		break;
    4ca2:	e34e      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    4ca4:	68bb      	ldr	r3, [r7, #8]
    4ca6:	881b      	ldrh	r3, [r3, #0]
    4ca8:	2b07      	cmp	r3, #7
    4caa:	d809      	bhi.n	4cc0 <vendor_request_handler+0x444>
			cc2400_set(FREND, 8 | request_params[0]);
    4cac:	68bb      	ldr	r3, [r7, #8]
    4cae:	881b      	ldrh	r3, [r3, #0]
    4cb0:	f043 0308 	orr.w	r3, r3, #8
    4cb4:	b29b      	uxth	r3, r3
    4cb6:	2005      	movs	r0, #5
    4cb8:	4619      	mov	r1, r3
    4cba:	f004 ffb3 	bl	9c24 <cc2400_set>
		} else {
			return 0;
		}
		break;
    4cbe:	e340      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    4cc0:	2300      	movs	r3, #0
    4cc2:	e33f      	b.n	5344 <vendor_request_handler+0xac8>
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    4cc4:	4b75      	ldr	r3, [pc, #468]	; (4e9c <vendor_request_handler+0x620>)
    4cc6:	2205      	movs	r2, #5
    4cc8:	701a      	strb	r2, [r3, #0]
		break;
    4cca:	e33a      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    4ccc:	4b73      	ldr	r3, [pc, #460]	; (4e9c <vendor_request_handler+0x620>)
    4cce:	2206      	movs	r2, #6
    4cd0:	701a      	strb	r2, [r3, #0]
		break;
    4cd2:	e336      	b.n	5342 <vendor_request_handler+0xac6>
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    4cd4:	4b72      	ldr	r3, [pc, #456]	; (4ea0 <vendor_request_handler+0x624>)
    4cd6:	781a      	ldrb	r2, [r3, #0]
    4cd8:	687b      	ldr	r3, [r7, #4]
    4cda:	701a      	strb	r2, [r3, #0]
		data[1] = rr.request_pa;
    4cdc:	687b      	ldr	r3, [r7, #4]
    4cde:	3301      	adds	r3, #1
    4ce0:	4a6f      	ldr	r2, [pc, #444]	; (4ea0 <vendor_request_handler+0x624>)
    4ce2:	7852      	ldrb	r2, [r2, #1]
    4ce4:	701a      	strb	r2, [r3, #0]
		data[2] = rr.request_num;
    4ce6:	687b      	ldr	r3, [r7, #4]
    4ce8:	3302      	adds	r3, #2
    4cea:	4a6d      	ldr	r2, [pc, #436]	; (4ea0 <vendor_request_handler+0x624>)
    4cec:	7892      	ldrb	r2, [r2, #2]
    4cee:	701a      	strb	r2, [r3, #0]
		data[3] = rr.reply_pa;
    4cf0:	687b      	ldr	r3, [r7, #4]
    4cf2:	3303      	adds	r3, #3
    4cf4:	4a6a      	ldr	r2, [pc, #424]	; (4ea0 <vendor_request_handler+0x624>)
    4cf6:	78d2      	ldrb	r2, [r2, #3]
    4cf8:	701a      	strb	r2, [r3, #0]
		data[4] = rr.reply_num;
    4cfa:	687b      	ldr	r3, [r7, #4]
    4cfc:	3304      	adds	r3, #4
    4cfe:	4a68      	ldr	r2, [pc, #416]	; (4ea0 <vendor_request_handler+0x624>)
    4d00:	7912      	ldrb	r2, [r2, #4]
    4d02:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4d04:	683b      	ldr	r3, [r7, #0]
    4d06:	2205      	movs	r2, #5
    4d08:	601a      	str	r2, [r3, #0]
		break;
    4d0a:	e31a      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    4d0c:	4b63      	ldr	r3, [pc, #396]	; (4e9c <vendor_request_handler+0x620>)
    4d0e:	2200      	movs	r2, #0
    4d10:	701a      	strb	r2, [r3, #0]
		break;
    4d12:	e316      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    4d14:	4b63      	ldr	r3, [pc, #396]	; (4ea4 <vendor_request_handler+0x628>)
    4d16:	781b      	ldrb	r3, [r3, #0]
    4d18:	b2da      	uxtb	r2, r3
    4d1a:	687b      	ldr	r3, [r7, #4]
    4d1c:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4d1e:	683b      	ldr	r3, [r7, #0]
    4d20:	2201      	movs	r2, #1
    4d22:	601a      	str	r2, [r3, #0]
		break;
    4d24:	e30d      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    4d26:	68bb      	ldr	r3, [r7, #8]
    4d28:	881b      	ldrh	r3, [r3, #0]
    4d2a:	b2da      	uxtb	r2, r3
    4d2c:	4b5d      	ldr	r3, [pc, #372]	; (4ea4 <vendor_request_handler+0x628>)
    4d2e:	701a      	strb	r2, [r3, #0]
		break;
    4d30:	e307      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    4d32:	4b5d      	ldr	r3, [pc, #372]	; (4ea8 <vendor_request_handler+0x62c>)
    4d34:	881b      	ldrh	r3, [r3, #0]
    4d36:	b29b      	uxth	r3, r3
    4d38:	b2da      	uxtb	r2, r3
    4d3a:	687b      	ldr	r3, [r7, #4]
    4d3c:	701a      	strb	r2, [r3, #0]
		data[1] = (channel >> 8) & 0xFF;
    4d3e:	687b      	ldr	r3, [r7, #4]
    4d40:	3301      	adds	r3, #1
    4d42:	4a59      	ldr	r2, [pc, #356]	; (4ea8 <vendor_request_handler+0x62c>)
    4d44:	8812      	ldrh	r2, [r2, #0]
    4d46:	b292      	uxth	r2, r2
    4d48:	0a12      	lsrs	r2, r2, #8
    4d4a:	b292      	uxth	r2, r2
    4d4c:	b2d2      	uxtb	r2, r2
    4d4e:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    4d50:	683b      	ldr	r3, [r7, #0]
    4d52:	2202      	movs	r2, #2
    4d54:	601a      	str	r2, [r3, #0]
		break;
    4d56:	e2f4      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4d58:	68bb      	ldr	r3, [r7, #8]
    4d5a:	881a      	ldrh	r2, [r3, #0]
    4d5c:	4b53      	ldr	r3, [pc, #332]	; (4eac <vendor_request_handler+0x630>)
    4d5e:	801a      	strh	r2, [r3, #0]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4d60:	4b52      	ldr	r3, [pc, #328]	; (4eac <vendor_request_handler+0x630>)
    4d62:	881b      	ldrh	r3, [r3, #0]
    4d64:	b29b      	uxth	r3, r3
    4d66:	f640 22ea 	movw	r2, #2794	; 0xaea
    4d6a:	4293      	cmp	r3, r2
    4d6c:	d907      	bls.n	4d7e <vendor_request_handler+0x502>
			hop_mode = HOP_SWEEP;
    4d6e:	4b50      	ldr	r3, [pc, #320]	; (4eb0 <vendor_request_handler+0x634>)
    4d70:	2201      	movs	r2, #1
    4d72:	701a      	strb	r2, [r3, #0]
			requested_channel = 2402;
    4d74:	4b4d      	ldr	r3, [pc, #308]	; (4eac <vendor_request_handler+0x630>)
    4d76:	f640 1262 	movw	r2, #2402	; 0x962
    4d7a:	801a      	strh	r2, [r3, #0]
    4d7c:	e020      	b.n	4dc0 <vendor_request_handler+0x544>
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
    4d7e:	4b4c      	ldr	r3, [pc, #304]	; (4eb0 <vendor_request_handler+0x634>)
    4d80:	2200      	movs	r2, #0
    4d82:	701a      	strb	r2, [r3, #0]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4d84:	4b49      	ldr	r3, [pc, #292]	; (4eac <vendor_request_handler+0x630>)
    4d86:	881b      	ldrh	r3, [r3, #0]
    4d88:	b29b      	uxth	r3, r3
    4d8a:	f640 02dc 	movw	r2, #2268	; 0x8dc
    4d8e:	4293      	cmp	r3, r2
    4d90:	d903      	bls.n	4d9a <vendor_request_handler+0x51e>
    4d92:	4b46      	ldr	r3, [pc, #280]	; (4eac <vendor_request_handler+0x630>)
    4d94:	881b      	ldrh	r3, [r3, #0]
    4d96:	b29b      	uxth	r3, r3
    4d98:	e001      	b.n	4d9e <vendor_request_handler+0x522>
    4d9a:	f640 03dc 	movw	r3, #2268	; 0x8dc
    4d9e:	4a43      	ldr	r2, [pc, #268]	; (4eac <vendor_request_handler+0x630>)
    4da0:	8013      	strh	r3, [r2, #0]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4da2:	4b42      	ldr	r3, [pc, #264]	; (4eac <vendor_request_handler+0x630>)
    4da4:	881b      	ldrh	r3, [r3, #0]
    4da6:	b29b      	uxth	r3, r3
    4da8:	f640 22e9 	movw	r2, #2793	; 0xae9
    4dac:	4293      	cmp	r3, r2
    4dae:	d803      	bhi.n	4db8 <vendor_request_handler+0x53c>
    4db0:	4b3e      	ldr	r3, [pc, #248]	; (4eac <vendor_request_handler+0x630>)
    4db2:	881b      	ldrh	r3, [r3, #0]
    4db4:	b29b      	uxth	r3, r3
    4db6:	e001      	b.n	4dbc <vendor_request_handler+0x540>
    4db8:	f640 23ea 	movw	r3, #2794	; 0xaea
    4dbc:	4a3b      	ldr	r2, [pc, #236]	; (4eac <vendor_request_handler+0x630>)
    4dbe:	8013      	strh	r3, [r2, #0]
		}

		if (mode != MODE_BT_FOLLOW_LE) {
    4dc0:	4b3c      	ldr	r3, [pc, #240]	; (4eb4 <vendor_request_handler+0x638>)
    4dc2:	781b      	ldrb	r3, [r3, #0]
    4dc4:	b2db      	uxtb	r3, r3
    4dc6:	2b09      	cmp	r3, #9
    4dc8:	d00a      	beq.n	4de0 <vendor_request_handler+0x564>
			channel = requested_channel;
    4dca:	4b38      	ldr	r3, [pc, #224]	; (4eac <vendor_request_handler+0x630>)
    4dcc:	881b      	ldrh	r3, [r3, #0]
    4dce:	b29a      	uxth	r2, r3
    4dd0:	4b35      	ldr	r3, [pc, #212]	; (4ea8 <vendor_request_handler+0x62c>)
    4dd2:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    4dd4:	4b35      	ldr	r3, [pc, #212]	; (4eac <vendor_request_handler+0x630>)
    4dd6:	2200      	movs	r2, #0
    4dd8:	801a      	strh	r2, [r3, #0]

			/* CS threshold is mode-dependent. Update it after
			 * possible mode change. TODO - kludgy. */
			cs_threshold_calc_and_set();
    4dda:	f7ff fcd9 	bl	4790 <cs_threshold_calc_and_set>
		}
		break;
    4dde:	e2b0      	b.n	5342 <vendor_request_handler+0xac6>
    4de0:	e2af      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_ISP:
		command[0] = 57;
    4de2:	2339      	movs	r3, #57	; 0x39
    4de4:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4de6:	4b34      	ldr	r3, [pc, #208]	; (4eb8 <vendor_request_handler+0x63c>)
    4de8:	681b      	ldr	r3, [r3, #0]
    4dea:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4dee:	f107 0210 	add.w	r2, r7, #16
    4df2:	4608      	mov	r0, r1
    4df4:	4611      	mov	r1, r2
    4df6:	4798      	blx	r3
		*data_len = 0; /* should never return */
    4df8:	683b      	ldr	r3, [r7, #0]
    4dfa:	2200      	movs	r2, #0
    4dfc:	601a      	str	r2, [r3, #0]
		break;
    4dfe:	e2a0      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    4e00:	4b2e      	ldr	r3, [pc, #184]	; (4ebc <vendor_request_handler+0x640>)
    4e02:	4a2f      	ldr	r2, [pc, #188]	; (4ec0 <vendor_request_handler+0x644>)
    4e04:	601a      	str	r2, [r3, #0]
		reset();
    4e06:	f005 f8d9 	bl	9fbc <reset>
		break;
    4e0a:	e29a      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    4e0c:	68bb      	ldr	r3, [r7, #8]
    4e0e:	881b      	ldrh	r3, [r3, #0]
    4e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4e14:	d917      	bls.n	4e46 <vendor_request_handler+0x5ca>
    4e16:	68bb      	ldr	r3, [r7, #8]
    4e18:	881b      	ldrh	r3, [r3, #0]
    4e1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    4e1e:	d812      	bhi.n	4e46 <vendor_request_handler+0x5ca>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4e20:	68bb      	ldr	r3, [r7, #8]
    4e22:	3302      	adds	r3, #2
    4e24:	881b      	ldrh	r3, [r3, #0]
		bootloader_ctrl = DFU_MODE;
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    4e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4e2a:	d90c      	bls.n	4e46 <vendor_request_handler+0x5ca>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4e2c:	68bb      	ldr	r3, [r7, #8]
    4e2e:	3302      	adds	r3, #2
    4e30:	881b      	ldrh	r3, [r3, #0]
    4e32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    4e36:	d806      	bhi.n	4e46 <vendor_request_handler+0x5ca>
				request_params[1] < request_params[0])
    4e38:	68bb      	ldr	r3, [r7, #8]
    4e3a:	3302      	adds	r3, #2
    4e3c:	881a      	ldrh	r2, [r3, #0]
    4e3e:	68bb      	ldr	r3, [r7, #8]
    4e40:	881b      	ldrh	r3, [r3, #0]
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4e42:	429a      	cmp	r2, r3
    4e44:	d201      	bcs.n	4e4a <vendor_request_handler+0x5ce>
				request_params[1] < request_params[0])
			return 0;
    4e46:	2300      	movs	r3, #0
    4e48:	e27c      	b.n	5344 <vendor_request_handler+0xac8>
		low_freq = request_params[0];
    4e4a:	68bb      	ldr	r3, [r7, #8]
    4e4c:	881a      	ldrh	r2, [r3, #0]
    4e4e:	4b1d      	ldr	r3, [pc, #116]	; (4ec4 <vendor_request_handler+0x648>)
    4e50:	801a      	strh	r2, [r3, #0]
		high_freq = request_params[1];
    4e52:	68bb      	ldr	r3, [r7, #8]
    4e54:	885a      	ldrh	r2, [r3, #2]
    4e56:	4b1c      	ldr	r3, [pc, #112]	; (4ec8 <vendor_request_handler+0x64c>)
    4e58:	801a      	strh	r2, [r3, #0]
		requested_mode = MODE_SPECAN;
    4e5a:	4b10      	ldr	r3, [pc, #64]	; (4e9c <vendor_request_handler+0x620>)
    4e5c:	2204      	movs	r2, #4
    4e5e:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4e60:	683b      	ldr	r3, [r7, #0]
    4e62:	2200      	movs	r2, #0
    4e64:	601a      	str	r2, [r3, #0]
		break;
    4e66:	e26c      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    4e68:	68bb      	ldr	r3, [r7, #8]
    4e6a:	881b      	ldrh	r3, [r3, #0]
    4e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4e70:	d901      	bls.n	4e76 <vendor_request_handler+0x5fa>
			return 0;
    4e72:	2300      	movs	r3, #0
    4e74:	e266      	b.n	5344 <vendor_request_handler+0xac8>
		rssi_threshold = (int8_t)request_params[0];
    4e76:	68bb      	ldr	r3, [r7, #8]
    4e78:	881b      	ldrh	r3, [r3, #0]
    4e7a:	b2da      	uxtb	r2, r3
    4e7c:	4b13      	ldr	r3, [pc, #76]	; (4ecc <vendor_request_handler+0x650>)
    4e7e:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_LED_SPECAN;
    4e80:	4b06      	ldr	r3, [pc, #24]	; (4e9c <vendor_request_handler+0x620>)
    4e82:	2207      	movs	r2, #7
    4e84:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4e86:	683b      	ldr	r3, [r7, #0]
    4e88:	2200      	movs	r2, #0
    4e8a:	601a      	str	r2, [r3, #0]
		break;
    4e8c:	e259      	b.n	5342 <vendor_request_handler+0xac6>
    4e8e:	bf00      	nop
    4e90:	2009c054 	.word	0x2009c054
    4e94:	2009c058 	.word	0x2009c058
    4e98:	2009c05c 	.word	0x2009c05c
    4e9c:	10000a3f 	.word	0x10000a3f
    4ea0:	10001070 	.word	0x10001070
    4ea4:	10000a42 	.word	0x10000a42
    4ea8:	1000049c 	.word	0x1000049c
    4eac:	10000a44 	.word	0x10000a44
    4eb0:	1000097c 	.word	0x1000097c
    4eb4:	10000a3e 	.word	0x10000a3e
    4eb8:	10000448 	.word	0x10000448
    4ebc:	1000001c 	.word	0x1000001c
    4ec0:	4305bb21 	.word	0x4305bb21
    4ec4:	1000049e 	.word	0x1000049e
    4ec8:	100004a0 	.word	0x100004a0
    4ecc:	100004a2 	.word	0x100004a2

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    4ed0:	687b      	ldr	r3, [r7, #4]
    4ed2:	2200      	movs	r2, #0
    4ed4:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
    4ed6:	687b      	ldr	r3, [r7, #4]
    4ed8:	3301      	adds	r3, #1
    4eda:	2200      	movs	r2, #0
    4edc:	701a      	strb	r2, [r3, #0]

		length = (u8)strlen(GIT_REVISION);
    4ede:	48a4      	ldr	r0, [pc, #656]	; (5170 <vendor_request_handler+0x8f4>)
    4ee0:	f006 fcea 	bl	b8b8 <strlen>
    4ee4:	4603      	mov	r3, r0
    4ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[2] = length;
    4eea:	687b      	ldr	r3, [r7, #4]
    4eec:	3302      	adds	r3, #2
    4eee:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    4ef2:	701a      	strb	r2, [r3, #0]

		memcpy(&data[3], GIT_REVISION, length);
    4ef4:	687b      	ldr	r3, [r7, #4]
    4ef6:	1cda      	adds	r2, r3, #3
    4ef8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4efc:	4610      	mov	r0, r2
    4efe:	499c      	ldr	r1, [pc, #624]	; (5170 <vendor_request_handler+0x8f4>)
    4f00:	461a      	mov	r2, r3
    4f02:	f006 fc63 	bl	b7cc <memcpy>

		*data_len = 2 + 1 + length;
    4f06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4f0a:	1cda      	adds	r2, r3, #3
    4f0c:	683b      	ldr	r3, [r7, #0]
    4f0e:	601a      	str	r2, [r3, #0]
		break;
    4f10:	e217      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    4f12:	4898      	ldr	r0, [pc, #608]	; (5174 <vendor_request_handler+0x8f8>)
    4f14:	f006 fcd0 	bl	b8b8 <strlen>
    4f18:	4603      	mov	r3, r0
    4f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[0] = length;
    4f1e:	687b      	ldr	r3, [r7, #4]
    4f20:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    4f24:	701a      	strb	r2, [r3, #0]
		memcpy(&data[1], compile_info, length);
    4f26:	687b      	ldr	r3, [r7, #4]
    4f28:	1c5a      	adds	r2, r3, #1
    4f2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4f2e:	4610      	mov	r0, r2
    4f30:	4990      	ldr	r1, [pc, #576]	; (5174 <vendor_request_handler+0x8f8>)
    4f32:	461a      	mov	r2, r3
    4f34:	f006 fc4a 	bl	b7cc <memcpy>
		*data_len = 1 + length;
    4f38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4f3c:	1c5a      	adds	r2, r3, #1
    4f3e:	683b      	ldr	r3, [r7, #0]
    4f40:	601a      	str	r2, [r3, #0]
		break;
    4f42:	e1fe      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    4f44:	687b      	ldr	r3, [r7, #4]
    4f46:	2201      	movs	r2, #1
    4f48:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4f4a:	683b      	ldr	r3, [r7, #0]
    4f4c:	2201      	movs	r2, #1
    4f4e:	601a      	str	r2, [r3, #0]
		break;
    4f50:	e1f7      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    4f52:	68bb      	ldr	r3, [r7, #8]
    4f54:	881b      	ldrh	r3, [r3, #0]
    4f56:	b2da      	uxtb	r2, r3
    4f58:	4b87      	ldr	r3, [pc, #540]	; (5178 <vendor_request_handler+0x8fc>)
    4f5a:	701a      	strb	r2, [r3, #0]
		cs_threshold_calc_and_set();
    4f5c:	f7ff fc18 	bl	4790 <cs_threshold_calc_and_set>
		break;
    4f60:	e1ef      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    4f62:	4b85      	ldr	r3, [pc, #532]	; (5178 <vendor_request_handler+0x8fc>)
    4f64:	781b      	ldrb	r3, [r3, #0]
    4f66:	b2da      	uxtb	r2, r3
    4f68:	687b      	ldr	r3, [r7, #4]
    4f6a:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4f6c:	683b      	ldr	r3, [r7, #0]
    4f6e:	2201      	movs	r2, #1
    4f70:	601a      	str	r2, [r3, #0]
		break;
    4f72:	e1e6      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    4f74:	4981      	ldr	r1, [pc, #516]	; (517c <vendor_request_handler+0x900>)
    4f76:	f04f 0200 	mov.w	r2, #0
    4f7a:	f04f 0300 	mov.w	r3, #0
    4f7e:	e9c1 2300 	strd	r2, r3, [r1]
		target.access_code = 0;
    4f82:	497e      	ldr	r1, [pc, #504]	; (517c <vendor_request_handler+0x900>)
    4f84:	f04f 0200 	mov.w	r2, #0
    4f88:	f04f 0300 	mov.w	r3, #0
    4f8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		for(i=0; i < 8; i++) {
    4f90:	2300      	movs	r3, #0
    4f92:	64fb      	str	r3, [r7, #76]	; 0x4c
    4f94:	e025      	b.n	4fe2 <vendor_request_handler+0x766>
			target.address |= (uint64_t)data[i] << 8*i;
    4f96:	4b79      	ldr	r3, [pc, #484]	; (517c <vendor_request_handler+0x900>)
    4f98:	e9d3 ab00 	ldrd	sl, fp, [r3]
    4f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f9e:	687a      	ldr	r2, [r7, #4]
    4fa0:	4413      	add	r3, r2
    4fa2:	781b      	ldrb	r3, [r3, #0]
    4fa4:	b2da      	uxtb	r2, r3
    4fa6:	f04f 0300 	mov.w	r3, #0
    4faa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    4fac:	00c9      	lsls	r1, r1, #3
    4fae:	f1a1 0620 	sub.w	r6, r1, #32
    4fb2:	f1c1 0020 	rsb	r0, r1, #32
    4fb6:	fa03 f901 	lsl.w	r9, r3, r1
    4fba:	fa02 f606 	lsl.w	r6, r2, r6
    4fbe:	ea49 0906 	orr.w	r9, r9, r6
    4fc2:	fa22 f000 	lsr.w	r0, r2, r0
    4fc6:	ea49 0900 	orr.w	r9, r9, r0
    4fca:	fa02 f801 	lsl.w	r8, r2, r1
    4fce:	ea4a 0208 	orr.w	r2, sl, r8
    4fd2:	ea4b 0309 	orr.w	r3, fp, r9
    4fd6:	4969      	ldr	r1, [pc, #420]	; (517c <vendor_request_handler+0x900>)
    4fd8:	e9c1 2300 	strd	r2, r3, [r1]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
    4fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4fde:	3301      	adds	r3, #1
    4fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
    4fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4fe4:	2b07      	cmp	r3, #7
    4fe6:	ddd6      	ble.n	4f96 <vendor_request_handler+0x71a>
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    4fe8:	2300      	movs	r3, #0
    4fea:	64fb      	str	r3, [r7, #76]	; 0x4c
    4fec:	e024      	b.n	5038 <vendor_request_handler+0x7bc>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
    4fee:	4b63      	ldr	r3, [pc, #396]	; (517c <vendor_request_handler+0x900>)
    4ff0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
    4ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4ff6:	3308      	adds	r3, #8
    4ff8:	687a      	ldr	r2, [r7, #4]
    4ffa:	4413      	add	r3, r2
    4ffc:	781b      	ldrb	r3, [r3, #0]
    4ffe:	b2da      	uxtb	r2, r3
    5000:	f04f 0300 	mov.w	r3, #0
    5004:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    5006:	00c9      	lsls	r1, r1, #3
    5008:	f1a1 0620 	sub.w	r6, r1, #32
    500c:	f1c1 0020 	rsb	r0, r1, #32
    5010:	fa03 f501 	lsl.w	r5, r3, r1
    5014:	fa02 f606 	lsl.w	r6, r2, r6
    5018:	4335      	orrs	r5, r6
    501a:	fa22 f000 	lsr.w	r0, r2, r0
    501e:	4305      	orrs	r5, r0
    5020:	fa02 f401 	lsl.w	r4, r2, r1
    5024:	ea48 0204 	orr.w	r2, r8, r4
    5028:	ea49 0305 	orr.w	r3, r9, r5
    502c:	4953      	ldr	r1, [pc, #332]	; (517c <vendor_request_handler+0x900>)
    502e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    5032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5034:	3301      	adds	r3, #1
    5036:	64fb      	str	r3, [r7, #76]	; 0x4c
    5038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    503a:	2b07      	cmp	r3, #7
    503c:	ddd7      	ble.n	4fee <vendor_request_handler+0x772>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
		}
		break;
    503e:	e180      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
    5040:	2300      	movs	r3, #0
    5042:	64bb      	str	r3, [r7, #72]	; 0x48
		for(i=0; i < 4; i++) {
    5044:	2300      	movs	r3, #0
    5046:	64fb      	str	r3, [r7, #76]	; 0x4c
    5048:	e00d      	b.n	5066 <vendor_request_handler+0x7ea>
			clock_offset <<= 8;
    504a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    504c:	021b      	lsls	r3, r3, #8
    504e:	64bb      	str	r3, [r7, #72]	; 0x48
			clock_offset |= data[i];
    5050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5052:	687a      	ldr	r2, [r7, #4]
    5054:	4413      	add	r3, r2
    5056:	781b      	ldrb	r3, [r3, #0]
    5058:	461a      	mov	r2, r3
    505a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    505c:	4313      	orrs	r3, r2
    505e:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		break;

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
		for(i=0; i < 4; i++) {
    5060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5062:	3301      	adds	r3, #1
    5064:	64fb      	str	r3, [r7, #76]	; 0x4c
    5066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5068:	2b03      	cmp	r3, #3
    506a:	ddee      	ble.n	504a <vendor_request_handler+0x7ce>
			clock_offset <<= 8;
			clock_offset |= data[i];
		}
		clkn += clock_offset;
    506c:	4b44      	ldr	r3, [pc, #272]	; (5180 <vendor_request_handler+0x904>)
    506e:	681a      	ldr	r2, [r3, #0]
    5070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5072:	4413      	add	r3, r2
    5074:	4a42      	ldr	r2, [pc, #264]	; (5180 <vendor_request_handler+0x904>)
    5076:	6013      	str	r3, [r2, #0]
		hop_mode = HOP_BLUETOOTH;
    5078:	4b42      	ldr	r3, [pc, #264]	; (5184 <vendor_request_handler+0x908>)
    507a:	2202      	movs	r2, #2
    507c:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW;
    507e:	4b42      	ldr	r3, [pc, #264]	; (5188 <vendor_request_handler+0x90c>)
    5080:	2208      	movs	r2, #8
    5082:	701a      	strb	r2, [r3, #0]
		break;
    5084:	e15d      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    5086:	687b      	ldr	r3, [r7, #4]
    5088:	781b      	ldrb	r3, [r3, #0]
    508a:	461a      	mov	r2, r3
    508c:	687b      	ldr	r3, [r7, #4]
    508e:	3301      	adds	r3, #1
    5090:	781b      	ldrb	r3, [r3, #0]
    5092:	021b      	lsls	r3, r3, #8
    5094:	431a      	orrs	r2, r3
    5096:	687b      	ldr	r3, [r7, #4]
    5098:	3302      	adds	r3, #2
    509a:	781b      	ldrb	r3, [r3, #0]
    509c:	041b      	lsls	r3, r3, #16
    509e:	431a      	orrs	r2, r3
    50a0:	687b      	ldr	r3, [r7, #4]
    50a2:	3303      	adds	r3, #3
    50a4:	781b      	ldrb	r3, [r3, #0]
    50a6:	061b      	lsls	r3, r3, #24
    50a8:	4313      	orrs	r3, r2
    50aa:	63fb      	str	r3, [r7, #60]	; 0x3c
		clkn = clock;
    50ac:	4a34      	ldr	r2, [pc, #208]	; (5180 <vendor_request_handler+0x904>)
    50ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    50b0:	6013      	str	r3, [r2, #0]
		cs_threshold_calc_and_set();
    50b2:	f7ff fb6d 	bl	4790 <cs_threshold_calc_and_set>
		break;
    50b6:	e144      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    50b8:	2300      	movs	r3, #0
    50ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    50bc:	e00b      	b.n	50d6 <vendor_request_handler+0x85a>
			afh_map[i] = data[i];
    50be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50c0:	687a      	ldr	r2, [r7, #4]
    50c2:	4413      	add	r3, r2
    50c4:	7819      	ldrb	r1, [r3, #0]
    50c6:	4a31      	ldr	r2, [pc, #196]	; (518c <vendor_request_handler+0x910>)
    50c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50ca:	4413      	add	r3, r2
    50cc:	460a      	mov	r2, r1
    50ce:	701a      	strb	r2, [r3, #0]
		clkn = clock;
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    50d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50d2:	3301      	adds	r3, #1
    50d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    50d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50d8:	2b09      	cmp	r3, #9
    50da:	ddf0      	ble.n	50be <vendor_request_handler+0x842>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    50dc:	4b2c      	ldr	r3, [pc, #176]	; (5190 <vendor_request_handler+0x914>)
    50de:	2201      	movs	r2, #1
    50e0:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    50e2:	683b      	ldr	r3, [r7, #0]
    50e4:	220a      	movs	r2, #10
    50e6:	601a      	str	r2, [r3, #0]
		break;
    50e8:	e12b      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    50ea:	2300      	movs	r3, #0
    50ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    50ee:	e007      	b.n	5100 <vendor_request_handler+0x884>
			afh_map[i] = 0;
    50f0:	4a26      	ldr	r2, [pc, #152]	; (518c <vendor_request_handler+0x910>)
    50f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50f4:	4413      	add	r3, r2
    50f6:	2200      	movs	r2, #0
    50f8:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    50fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50fc:	3301      	adds	r3, #1
    50fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    5100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5102:	2b09      	cmp	r3, #9
    5104:	ddf4      	ble.n	50f0 <vendor_request_handler+0x874>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    5106:	4b22      	ldr	r3, [pc, #136]	; (5190 <vendor_request_handler+0x914>)
    5108:	2200      	movs	r2, #0
    510a:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    510c:	683b      	ldr	r3, [r7, #0]
    510e:	220a      	movs	r2, #10
    5110:	601a      	str	r2, [r3, #0]
		break;
    5112:	e116      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    5114:	4b1a      	ldr	r3, [pc, #104]	; (5180 <vendor_request_handler+0x904>)
    5116:	681b      	ldr	r3, [r3, #0]
    5118:	63fb      	str	r3, [r7, #60]	; 0x3c
		for(i=0; i < 4; i++) {
    511a:	2300      	movs	r3, #0
    511c:	64fb      	str	r3, [r7, #76]	; 0x4c
    511e:	e00c      	b.n	513a <vendor_request_handler+0x8be>
			data[i] = (clock >> (8*i)) & 0xff;
    5120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5122:	687a      	ldr	r2, [r7, #4]
    5124:	4413      	add	r3, r2
    5126:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5128:	00d2      	lsls	r2, r2, #3
    512a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    512c:	fa21 f202 	lsr.w	r2, r1, r2
    5130:	b2d2      	uxtb	r2, r2
    5132:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(i=0; i < 4; i++) {
    5134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5136:	3301      	adds	r3, #1
    5138:	64fb      	str	r3, [r7, #76]	; 0x4c
    513a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    513c:	2b03      	cmp	r3, #3
    513e:	ddef      	ble.n	5120 <vendor_request_handler+0x8a4>
			data[i] = (clock >> (8*i)) & 0xff;
		}
		*data_len = 4;
    5140:	683b      	ldr	r3, [r7, #0]
    5142:	2204      	movs	r2, #4
    5144:	601a      	str	r2, [r3, #0]
		break;
    5146:	e0fc      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;
    5148:	683b      	ldr	r3, [r7, #0]
    514a:	2200      	movs	r2, #0
    514c:	601a      	str	r2, [r3, #0]

		do_hop = 0;
    514e:	4b11      	ldr	r3, [pc, #68]	; (5194 <vendor_request_handler+0x918>)
    5150:	2200      	movs	r2, #0
    5152:	701a      	strb	r2, [r3, #0]
		hop_mode = HOP_BTLE;
    5154:	4b0b      	ldr	r3, [pc, #44]	; (5184 <vendor_request_handler+0x908>)
    5156:	2203      	movs	r2, #3
    5158:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW_LE;
    515a:	4b0b      	ldr	r3, [pc, #44]	; (5188 <vendor_request_handler+0x90c>)
    515c:	2209      	movs	r2, #9
    515e:	701a      	strb	r2, [r3, #0]

		queue_init();
    5160:	f003 fae8 	bl	8734 <queue_init>
		cs_threshold_calc_and_set();
    5164:	f7ff fb14 	bl	4790 <cs_threshold_calc_and_set>
		break;
    5168:	e0eb      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    516a:	2300      	movs	r3, #0
    516c:	64fb      	str	r3, [r7, #76]	; 0x4c
    516e:	e021      	b.n	51b4 <vendor_request_handler+0x938>
    5170:	0000c218 	.word	0x0000c218
    5174:	0000c1ac 	.word	0x0000c1ac
    5178:	1000044c 	.word	0x1000044c
    517c:	100010b8 	.word	0x100010b8
    5180:	10000be4 	.word	0x10000be4
    5184:	1000097c 	.word	0x1000097c
    5188:	10000a3f 	.word	0x10000a3f
    518c:	10000bbc 	.word	0x10000bbc
    5190:	10001024 	.word	0x10001024
    5194:	1000097d 	.word	0x1000097d
			data[i] = (le.access_address >> (8*i)) & 0xff;
    5198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    519a:	687a      	ldr	r2, [r7, #4]
    519c:	4413      	add	r3, r2
    519e:	4a6c      	ldr	r2, [pc, #432]	; (5350 <vendor_request_handler+0xad4>)
    51a0:	6811      	ldr	r1, [r2, #0]
    51a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    51a4:	00d2      	lsls	r2, r2, #3
    51a6:	fa21 f202 	lsr.w	r2, r1, r2
    51aa:	b2d2      	uxtb	r2, r2
    51ac:	701a      	strb	r2, [r3, #0]
		queue_init();
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    51ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    51b0:	3301      	adds	r3, #1
    51b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    51b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    51b6:	2b03      	cmp	r3, #3
    51b8:	ddee      	ble.n	5198 <vendor_request_handler+0x91c>
			data[i] = (le.access_address >> (8*i)) & 0xff;
		}
		*data_len = 4;
    51ba:	683b      	ldr	r3, [r7, #0]
    51bc:	2204      	movs	r2, #4
    51be:	601a      	str	r2, [r3, #0]
		break;
    51c0:	e0bf      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    51c2:	687b      	ldr	r3, [r7, #4]
    51c4:	781b      	ldrb	r3, [r3, #0]
    51c6:	461a      	mov	r2, r3
    51c8:	687b      	ldr	r3, [r7, #4]
    51ca:	3301      	adds	r3, #1
    51cc:	781b      	ldrb	r3, [r3, #0]
    51ce:	021b      	lsls	r3, r3, #8
    51d0:	431a      	orrs	r2, r3
    51d2:	687b      	ldr	r3, [r7, #4]
    51d4:	3302      	adds	r3, #2
    51d6:	781b      	ldrb	r3, [r3, #0]
    51d8:	041b      	lsls	r3, r3, #16
    51da:	431a      	orrs	r2, r3
    51dc:	687b      	ldr	r3, [r7, #4]
    51de:	3303      	adds	r3, #3
    51e0:	781b      	ldrb	r3, [r3, #0]
    51e2:	061b      	lsls	r3, r3, #24
    51e4:	4313      	orrs	r3, r2
    51e6:	4618      	mov	r0, r3
    51e8:	f001 f9bc 	bl	6564 <le_set_access_address>
		le.target_set = 1;
    51ec:	4b58      	ldr	r3, [pc, #352]	; (5350 <vendor_request_handler+0xad4>)
    51ee:	2201      	movs	r2, #1
    51f0:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    51f2:	e0a6      	b.n	5342 <vendor_request_handler+0xac6>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    51f4:	687b      	ldr	r3, [r7, #4]
    51f6:	2213      	movs	r2, #19
    51f8:	701a      	strb	r2, [r3, #0]
		data[1] = 0x37;
    51fa:	687b      	ldr	r3, [r7, #4]
    51fc:	3301      	adds	r3, #1
    51fe:	2237      	movs	r2, #55	; 0x37
    5200:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    5202:	683b      	ldr	r3, [r7, #0]
    5204:	2202      	movs	r2, #2
    5206:	601a      	str	r2, [r3, #0]
		break;
    5208:	e09b      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    520a:	4b51      	ldr	r3, [pc, #324]	; (5350 <vendor_request_handler+0xad4>)
    520c:	691b      	ldr	r3, [r3, #16]
    520e:	2b00      	cmp	r3, #0
    5210:	bf14      	ite	ne
    5212:	2301      	movne	r3, #1
    5214:	2300      	moveq	r3, #0
    5216:	b2db      	uxtb	r3, r3
    5218:	461a      	mov	r2, r3
    521a:	687b      	ldr	r3, [r7, #4]
    521c:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    521e:	683b      	ldr	r3, [r7, #0]
    5220:	2201      	movs	r2, #1
    5222:	601a      	str	r2, [r3, #0]
		break;
    5224:	e08d      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    5226:	68bb      	ldr	r3, [r7, #8]
    5228:	881b      	ldrh	r3, [r3, #0]
    522a:	2b00      	cmp	r3, #0
    522c:	bf14      	ite	ne
    522e:	2301      	movne	r3, #1
    5230:	2300      	moveq	r3, #0
    5232:	b2db      	uxtb	r3, r3
    5234:	461a      	mov	r2, r3
    5236:	4b46      	ldr	r3, [pc, #280]	; (5350 <vendor_request_handler+0xad4>)
    5238:	611a      	str	r2, [r3, #16]
		break;
    523a:	e082      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_POLL:
		p = dequeue();
    523c:	f003 faba 	bl	87b4 <dequeue>
    5240:	6478      	str	r0, [r7, #68]	; 0x44
		if (p != NULL) {
    5242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5244:	2b00      	cmp	r3, #0
    5246:	d008      	beq.n	525a <vendor_request_handler+0x9de>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    5248:	6878      	ldr	r0, [r7, #4]
    524a:	6c79      	ldr	r1, [r7, #68]	; 0x44
    524c:	2240      	movs	r2, #64	; 0x40
    524e:	f006 fabd 	bl	b7cc <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    5252:	683b      	ldr	r3, [r7, #0]
    5254:	2240      	movs	r2, #64	; 0x40
    5256:	601a      	str	r2, [r3, #0]
		} else {
			data[0] = 0;
			*data_len = 1;
		}
		break;
    5258:	e073      	b.n	5342 <vendor_request_handler+0xac6>
		p = dequeue();
		if (p != NULL) {
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
			*data_len = sizeof(usb_pkt_rx);
		} else {
			data[0] = 0;
    525a:	687b      	ldr	r3, [r7, #4]
    525c:	2200      	movs	r2, #0
    525e:	701a      	strb	r2, [r3, #0]
			*data_len = 1;
    5260:	683b      	ldr	r3, [r7, #0]
    5262:	2201      	movs	r2, #1
    5264:	601a      	str	r2, [r3, #0]
		}
		break;
    5266:	e06c      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    5268:	683b      	ldr	r3, [r7, #0]
    526a:	2200      	movs	r2, #0
    526c:	601a      	str	r2, [r3, #0]

		hop_mode = HOP_NONE;
    526e:	4b39      	ldr	r3, [pc, #228]	; (5354 <vendor_request_handler+0xad8>)
    5270:	2200      	movs	r2, #0
    5272:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_PROMISC_LE;
    5274:	4b38      	ldr	r3, [pc, #224]	; (5358 <vendor_request_handler+0xadc>)
    5276:	220a      	movs	r2, #10
    5278:	701a      	strb	r2, [r3, #0]

		queue_init();
    527a:	f003 fa5b 	bl	8734 <queue_init>
		cs_threshold_calc_and_set();
    527e:	f7ff fa87 	bl	4790 <cs_threshold_calc_and_set>
		break;
    5282:	e05e      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    5284:	68bb      	ldr	r3, [r7, #8]
    5286:	881b      	ldrh	r3, [r3, #0]
    5288:	b2db      	uxtb	r3, r3
    528a:	4618      	mov	r0, r3
    528c:	f004 fcb4 	bl	9bf8 <cc2400_get>
    5290:	4603      	mov	r3, r0
    5292:	877b      	strh	r3, [r7, #58]	; 0x3a
		data[0] = (reg_val >> 8) & 0xff;
    5294:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    5296:	0a1b      	lsrs	r3, r3, #8
    5298:	b29b      	uxth	r3, r3
    529a:	b2da      	uxtb	r2, r3
    529c:	687b      	ldr	r3, [r7, #4]
    529e:	701a      	strb	r2, [r3, #0]
		data[1] = reg_val & 0xff;
    52a0:	687b      	ldr	r3, [r7, #4]
    52a2:	3301      	adds	r3, #1
    52a4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
    52a6:	b2d2      	uxtb	r2, r2
    52a8:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    52aa:	683b      	ldr	r3, [r7, #0]
    52ac:	2202      	movs	r2, #2
    52ae:	601a      	str	r2, [r3, #0]
		break;
    52b0:	e047      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    52b2:	68bb      	ldr	r3, [r7, #8]
    52b4:	881b      	ldrh	r3, [r3, #0]
    52b6:	b2da      	uxtb	r2, r3
    52b8:	68bb      	ldr	r3, [r7, #8]
    52ba:	3302      	adds	r3, #2
    52bc:	881b      	ldrh	r3, [r3, #0]
    52be:	4610      	mov	r0, r2
    52c0:	4619      	mov	r1, r3
    52c2:	f004 fcaf 	bl	9c24 <cc2400_set>
		break;
    52c6:	e03c      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SLAVE:
		memcpy(slave_mac_address, data, 6);
    52c8:	4824      	ldr	r0, [pc, #144]	; (535c <vendor_request_handler+0xae0>)
    52ca:	6879      	ldr	r1, [r7, #4]
    52cc:	2206      	movs	r2, #6
    52ce:	f006 fa7d 	bl	b7cc <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    52d2:	4b21      	ldr	r3, [pc, #132]	; (5358 <vendor_request_handler+0xadc>)
    52d4:	220c      	movs	r2, #12
    52d6:	701a      	strb	r2, [r3, #0]
		break;
    52d8:	e033      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    52da:	687b      	ldr	r3, [r7, #4]
    52dc:	795a      	ldrb	r2, [r3, #5]
    52de:	4b1c      	ldr	r3, [pc, #112]	; (5350 <vendor_request_handler+0xad4>)
    52e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		le.target[1] = data[4];
    52e4:	687b      	ldr	r3, [r7, #4]
    52e6:	791a      	ldrb	r2, [r3, #4]
    52e8:	4b19      	ldr	r3, [pc, #100]	; (5350 <vendor_request_handler+0xad4>)
    52ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		le.target[2] = data[3];
    52ee:	687b      	ldr	r3, [r7, #4]
    52f0:	78da      	ldrb	r2, [r3, #3]
    52f2:	4b17      	ldr	r3, [pc, #92]	; (5350 <vendor_request_handler+0xad4>)
    52f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		le.target[3] = data[2];
    52f8:	687b      	ldr	r3, [r7, #4]
    52fa:	789a      	ldrb	r2, [r3, #2]
    52fc:	4b14      	ldr	r3, [pc, #80]	; (5350 <vendor_request_handler+0xad4>)
    52fe:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		le.target[4] = data[1];
    5302:	687b      	ldr	r3, [r7, #4]
    5304:	785a      	ldrb	r2, [r3, #1]
    5306:	4b12      	ldr	r3, [pc, #72]	; (5350 <vendor_request_handler+0xad4>)
    5308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		le.target[5] = data[0];
    530c:	687b      	ldr	r3, [r7, #4]
    530e:	781a      	ldrb	r2, [r3, #0]
    5310:	4b0f      	ldr	r3, [pc, #60]	; (5350 <vendor_request_handler+0xad4>)
    5312:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		le.target_set = 1;
    5316:	4b0e      	ldr	r3, [pc, #56]	; (5350 <vendor_request_handler+0xad4>)
    5318:	2201      	movs	r2, #1
    531a:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    531c:	e011      	b.n	5342 <vendor_request_handler+0xac6>

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    531e:	68bb      	ldr	r3, [r7, #8]
    5320:	881b      	ldrh	r3, [r3, #0]
    5322:	b2da      	uxtb	r2, r3
    5324:	4b0e      	ldr	r3, [pc, #56]	; (5360 <vendor_request_handler+0xae4>)
    5326:	701a      	strb	r2, [r3, #0]
		break;
    5328:	e00b      	b.n	5342 <vendor_request_handler+0xac6>
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    532a:	4b0b      	ldr	r3, [pc, #44]	; (5358 <vendor_request_handler+0xadc>)
    532c:	220d      	movs	r2, #13
    532e:	701a      	strb	r2, [r3, #0]
		ego_mode = request_params[0];
    5330:	68bb      	ldr	r3, [r7, #8]
    5332:	881b      	ldrh	r3, [r3, #0]
    5334:	b2da      	uxtb	r2, r3
    5336:	4b0b      	ldr	r3, [pc, #44]	; (5364 <vendor_request_handler+0xae8>)
    5338:	701a      	strb	r2, [r3, #0]
		break;
    533a:	e002      	b.n	5342 <vendor_request_handler+0xac6>

	default:
		return 0;
    533c:	2300      	movs	r3, #0
    533e:	e001      	b.n	5344 <vendor_request_handler+0xac8>
		le.target_set = 1;
		break;

	case UBERTOOTH_DO_SOMETHING:
		// do something! just don't commit anything here
		break;
    5340:	bf00      	nop
		break;

	default:
		return 0;
	}
	return 1;
    5342:	2301      	movs	r3, #1
}
    5344:	4618      	mov	r0, r3
    5346:	3754      	adds	r7, #84	; 0x54
    5348:	46bd      	mov	sp, r7
    534a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    534e:	bf00      	nop
    5350:	10000458 	.word	0x10000458
    5354:	1000097c 	.word	0x1000097c
    5358:	10000a3f 	.word	0x10000a3f
    535c:	1000098c 	.word	0x1000098c
    5360:	10000a40 	.word	0x10000a40
    5364:	10000a41 	.word	0x10000a41

00005368 <clkn_init>:

static void clkn_init()
{
    5368:	b480      	push	{r7}
    536a:	af00      	add	r7, sp, #0
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    536c:	4b0c      	ldr	r3, [pc, #48]	; (53a0 <clkn_init+0x38>)
    536e:	2202      	movs	r2, #2
    5370:	601a      	str	r2, [r3, #0]
	clkn = 0;
    5372:	4b0c      	ldr	r3, [pc, #48]	; (53a4 <clkn_init+0x3c>)
    5374:	2200      	movs	r2, #0
    5376:	601a      	str	r2, [r3, #0]
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    5378:	4b0b      	ldr	r3, [pc, #44]	; (53a8 <clkn_init+0x40>)
    537a:	2204      	movs	r2, #4
    537c:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    537e:	4b0b      	ldr	r3, [pc, #44]	; (53ac <clkn_init+0x44>)
    5380:	f640 4234 	movw	r2, #3124	; 0xc34
    5384:	601a      	str	r2, [r3, #0]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    5386:	4b0a      	ldr	r3, [pc, #40]	; (53b0 <clkn_init+0x48>)
    5388:	2203      	movs	r2, #3
    538a:	601a      	str	r2, [r3, #0]
	ISER0 = ISER0_ISE_TIMER0;
    538c:	4b09      	ldr	r3, [pc, #36]	; (53b4 <clkn_init+0x4c>)
    538e:	2202      	movs	r2, #2
    5390:	601a      	str	r2, [r3, #0]

	/* start timer */
	T0TCR = TCR_Counter_Enable;
    5392:	4b03      	ldr	r3, [pc, #12]	; (53a0 <clkn_init+0x38>)
    5394:	2201      	movs	r2, #1
    5396:	601a      	str	r2, [r3, #0]
}
    5398:	46bd      	mov	sp, r7
    539a:	f85d 7b04 	ldr.w	r7, [sp], #4
    539e:	4770      	bx	lr
    53a0:	40004004 	.word	0x40004004
    53a4:	10000be4 	.word	0x10000be4
    53a8:	4000400c 	.word	0x4000400c
    53ac:	40004018 	.word	0x40004018
    53b0:	40004014 	.word	0x40004014
    53b4:	e000e100 	.word	0xe000e100

000053b8 <TIMER0_IRQHandler>:

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    53b8:	b480      	push	{r7}
    53ba:	b083      	sub	sp, #12
    53bc:	af00      	add	r7, sp, #0
	// Use non-volatile working register to shave off a couple instructions
	u32 next;
	u32 le_clk;

	if (T0IR & TIR_MR0_Interrupt) {
    53be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    53c2:	681b      	ldr	r3, [r3, #0]
    53c4:	f003 0301 	and.w	r3, r3, #1
    53c8:	2b00      	cmp	r3, #0
    53ca:	d06d      	beq.n	54a8 <TIMER0_IRQHandler+0xf0>

		clkn++;
    53cc:	4b39      	ldr	r3, [pc, #228]	; (54b4 <TIMER0_IRQHandler+0xfc>)
    53ce:	681b      	ldr	r3, [r3, #0]
    53d0:	3301      	adds	r3, #1
    53d2:	4a38      	ldr	r2, [pc, #224]	; (54b4 <TIMER0_IRQHandler+0xfc>)
    53d4:	6013      	str	r3, [r2, #0]
		next = clkn;
    53d6:	4b37      	ldr	r3, [pc, #220]	; (54b4 <TIMER0_IRQHandler+0xfc>)
    53d8:	681b      	ldr	r3, [r3, #0]
    53da:	607b      	str	r3, [r7, #4]
		le_clk = (next - le.conn_epoch) & 0x03;
    53dc:	4b36      	ldr	r3, [pc, #216]	; (54b8 <TIMER0_IRQHandler+0x100>)
    53de:	699b      	ldr	r3, [r3, #24]
    53e0:	687a      	ldr	r2, [r7, #4]
    53e2:	1ad3      	subs	r3, r2, r3
    53e4:	f003 0303 	and.w	r3, r3, #3
    53e8:	603b      	str	r3, [r7, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    53ea:	4b34      	ldr	r3, [pc, #208]	; (54bc <TIMER0_IRQHandler+0x104>)
    53ec:	781b      	ldrb	r3, [r3, #0]
    53ee:	2b00      	cmp	r3, #0
    53f0:	d003      	beq.n	53fa <TIMER0_IRQHandler+0x42>
    53f2:	4b32      	ldr	r3, [pc, #200]	; (54bc <TIMER0_IRQHandler+0x104>)
    53f4:	781b      	ldrb	r3, [r3, #0]
    53f6:	2b01      	cmp	r3, #1
    53f8:	d109      	bne.n	540e <TIMER0_IRQHandler+0x56>
			if ((next & 0x7f) == 0)
    53fa:	687b      	ldr	r3, [r7, #4]
    53fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5400:	2b00      	cmp	r3, #0
    5402:	d103      	bne.n	540c <TIMER0_IRQHandler+0x54>
				do_hop = 1;
    5404:	4b2e      	ldr	r3, [pc, #184]	; (54c0 <TIMER0_IRQHandler+0x108>)
    5406:	2201      	movs	r2, #1
    5408:	701a      	strb	r2, [r3, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
			if ((next & 0x7f) == 0)
    540a:	e037      	b.n	547c <TIMER0_IRQHandler+0xc4>
    540c:	e036      	b.n	547c <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    540e:	4b2b      	ldr	r3, [pc, #172]	; (54bc <TIMER0_IRQHandler+0x104>)
    5410:	781b      	ldrb	r3, [r3, #0]
    5412:	2b02      	cmp	r3, #2
    5414:	d108      	bne.n	5428 <TIMER0_IRQHandler+0x70>
			if ((next & 0x1) == 0)
    5416:	687b      	ldr	r3, [r7, #4]
    5418:	f003 0301 	and.w	r3, r3, #1
    541c:	2b00      	cmp	r3, #0
    541e:	d12d      	bne.n	547c <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
    5420:	4b27      	ldr	r3, [pc, #156]	; (54c0 <TIMER0_IRQHandler+0x108>)
    5422:	2201      	movs	r2, #1
    5424:	701a      	strb	r2, [r3, #0]
    5426:	e029      	b.n	547c <TIMER0_IRQHandler+0xc4>
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    5428:	4b24      	ldr	r3, [pc, #144]	; (54bc <TIMER0_IRQHandler+0x104>)
    542a:	781b      	ldrb	r3, [r3, #0]
    542c:	2b03      	cmp	r3, #3
    542e:	d125      	bne.n	547c <TIMER0_IRQHandler+0xc4>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    5430:	4b21      	ldr	r3, [pc, #132]	; (54b8 <TIMER0_IRQHandler+0x100>)
    5432:	7d1b      	ldrb	r3, [r3, #20]
    5434:	2b03      	cmp	r3, #3
    5436:	d121      	bne.n	547c <TIMER0_IRQHandler+0xc4>
    5438:	683b      	ldr	r3, [r7, #0]
    543a:	2b00      	cmp	r3, #0
    543c:	d11e      	bne.n	547c <TIMER0_IRQHandler+0xc4>
				--le.interval_timer;
    543e:	4b1e      	ldr	r3, [pc, #120]	; (54b8 <TIMER0_IRQHandler+0x100>)
    5440:	8b9b      	ldrh	r3, [r3, #28]
    5442:	b29b      	uxth	r3, r3
    5444:	3b01      	subs	r3, #1
    5446:	b29a      	uxth	r2, r3
    5448:	4b1b      	ldr	r3, [pc, #108]	; (54b8 <TIMER0_IRQHandler+0x100>)
    544a:	839a      	strh	r2, [r3, #28]
				if (le.interval_timer == 0) {
    544c:	4b1a      	ldr	r3, [pc, #104]	; (54b8 <TIMER0_IRQHandler+0x100>)
    544e:	8b9b      	ldrh	r3, [r3, #28]
    5450:	b29b      	uxth	r3, r3
    5452:	2b00      	cmp	r3, #0
    5454:	d10e      	bne.n	5474 <TIMER0_IRQHandler+0xbc>
					do_hop = 1;
    5456:	4b1a      	ldr	r3, [pc, #104]	; (54c0 <TIMER0_IRQHandler+0x108>)
    5458:	2201      	movs	r2, #1
    545a:	701a      	strb	r2, [r3, #0]
					++le.conn_count;
    545c:	4b16      	ldr	r3, [pc, #88]	; (54b8 <TIMER0_IRQHandler+0x100>)
    545e:	8c1b      	ldrh	r3, [r3, #32]
    5460:	b29b      	uxth	r3, r3
    5462:	3301      	adds	r3, #1
    5464:	b29a      	uxth	r2, r3
    5466:	4b14      	ldr	r3, [pc, #80]	; (54b8 <TIMER0_IRQHandler+0x100>)
    5468:	841a      	strh	r2, [r3, #32]
					le.interval_timer = le.conn_interval;
    546a:	4b13      	ldr	r3, [pc, #76]	; (54b8 <TIMER0_IRQHandler+0x100>)
    546c:	8bda      	ldrh	r2, [r3, #30]
    546e:	4b12      	ldr	r3, [pc, #72]	; (54b8 <TIMER0_IRQHandler+0x100>)
    5470:	839a      	strh	r2, [r3, #28]
    5472:	e003      	b.n	547c <TIMER0_IRQHandler+0xc4>
				} else {
					TXLED_CLR; // hack!
    5474:	4b13      	ldr	r3, [pc, #76]	; (54c4 <TIMER0_IRQHandler+0x10c>)
    5476:	f44f 7280 	mov.w	r2, #256	; 0x100
    547a:	601a      	str	r2, [r3, #0]
				}
			}
		}

		/* Keepalive trigger fires at 3200/2^9 = 6.25 Hz */
		if ((next & 0x1ff) == 0)
    547c:	687b      	ldr	r3, [r7, #4]
    547e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5482:	2b00      	cmp	r3, #0
    5484:	d102      	bne.n	548c <TIMER0_IRQHandler+0xd4>
			keepalive_trigger = 1;
    5486:	4b10      	ldr	r3, [pc, #64]	; (54c8 <TIMER0_IRQHandler+0x110>)
    5488:	2201      	movs	r2, #1
    548a:	701a      	strb	r2, [r3, #0]

		/* Ack interrupt */
		T0MR0 = 3124 - clock_trim;
    548c:	4a0f      	ldr	r2, [pc, #60]	; (54cc <TIMER0_IRQHandler+0x114>)
    548e:	4b10      	ldr	r3, [pc, #64]	; (54d0 <TIMER0_IRQHandler+0x118>)
    5490:	681b      	ldr	r3, [r3, #0]
    5492:	f5c3 6343 	rsb	r3, r3, #3120	; 0xc30
    5496:	3304      	adds	r3, #4
    5498:	6013      	str	r3, [r2, #0]
		clock_trim = 0;
    549a:	4b0d      	ldr	r3, [pc, #52]	; (54d0 <TIMER0_IRQHandler+0x118>)
    549c:	2200      	movs	r2, #0
    549e:	601a      	str	r2, [r3, #0]
		T0IR = TIR_MR0_Interrupt;
    54a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    54a4:	2201      	movs	r2, #1
    54a6:	601a      	str	r2, [r3, #0]
	}
}
    54a8:	370c      	adds	r7, #12
    54aa:	46bd      	mov	sp, r7
    54ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    54b0:	4770      	bx	lr
    54b2:	bf00      	nop
    54b4:	10000be4 	.word	0x10000be4
    54b8:	10000458 	.word	0x10000458
    54bc:	1000097c 	.word	0x1000097c
    54c0:	1000097d 	.word	0x1000097d
    54c4:	2009c03c 	.word	0x2009c03c
    54c8:	10000be0 	.word	0x10000be0
    54cc:	40004018 	.word	0x40004018
    54d0:	10000984 	.word	0x10000984

000054d4 <EINT3_IRQHandler>:

/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
//static volatile u8 txledstate = 1;
void EINT3_IRQHandler()
{
    54d4:	b480      	push	{r7}
    54d6:	af00      	add	r7, sp, #0
	/* TODO - check specific source of shared interrupt */
	IO2IntClr = PIN_GIO6;            // clear interrupt
    54d8:	4b0b      	ldr	r3, [pc, #44]	; (5508 <EINT3_IRQHandler+0x34>)
    54da:	2204      	movs	r2, #4
    54dc:	601a      	str	r2, [r3, #0]
	cs_trigger = 1;                  // signal trigger
    54de:	4b0b      	ldr	r3, [pc, #44]	; (550c <EINT3_IRQHandler+0x38>)
    54e0:	2201      	movs	r2, #1
    54e2:	701a      	strb	r2, [r3, #0]
	cs_timestamp = CLK100NS;         // time at trigger
    54e4:	4b0a      	ldr	r3, [pc, #40]	; (5510 <EINT3_IRQHandler+0x3c>)
    54e6:	681b      	ldr	r3, [r3, #0]
    54e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    54ec:	f640 4235 	movw	r2, #3125	; 0xc35
    54f0:	fb02 f203 	mul.w	r2, r2, r3
    54f4:	4b07      	ldr	r3, [pc, #28]	; (5514 <EINT3_IRQHandler+0x40>)
    54f6:	681b      	ldr	r3, [r3, #0]
    54f8:	4413      	add	r3, r2
    54fa:	4a07      	ldr	r2, [pc, #28]	; (5518 <EINT3_IRQHandler+0x44>)
    54fc:	6013      	str	r3, [r2, #0]
}
    54fe:	46bd      	mov	sp, r7
    5500:	f85d 7b04 	ldr.w	r7, [sp], #4
    5504:	4770      	bx	lr
    5506:	bf00      	nop
    5508:	400280ac 	.word	0x400280ac
    550c:	100010b0 	.word	0x100010b0
    5510:	10000be4 	.word	0x10000be4
    5514:	40004008 	.word	0x40004008
    5518:	10000bdc 	.word	0x10000bdc
    551c:	00000000 	.word	0x00000000

00005520 <msleep>:

/* Sleep (busy wait) for 'millis' milliseconds. The 'wait' routines in
 * ubertooth.c are matched to the clock setup at boot time and can not
 * be used while the board is running at 100MHz. */
static void msleep(uint32_t millis)
{
    5520:	b5b0      	push	{r4, r5, r7, lr}
    5522:	b084      	sub	sp, #16
    5524:	af00      	add	r7, sp, #0
    5526:	6078      	str	r0, [r7, #4]
	uint32_t stop_at = clkn + millis * 312.5 / 1000;  // millis -> clkn ticks
    5528:	4b1b      	ldr	r3, [pc, #108]	; (5598 <msleep+0x78>)
    552a:	681b      	ldr	r3, [r3, #0]
    552c:	4618      	mov	r0, r3
    552e:	f005 fe73 	bl	b218 <__aeabi_ui2d>
    5532:	4604      	mov	r4, r0
    5534:	460d      	mov	r5, r1
    5536:	6878      	ldr	r0, [r7, #4]
    5538:	f005 fe6e 	bl	b218 <__aeabi_ui2d>
    553c:	4602      	mov	r2, r0
    553e:	460b      	mov	r3, r1
    5540:	4610      	mov	r0, r2
    5542:	4619      	mov	r1, r3
    5544:	a312      	add	r3, pc, #72	; (adr r3, 5590 <msleep+0x70>)
    5546:	e9d3 2300 	ldrd	r2, r3, [r3]
    554a:	f005 fedb 	bl	b304 <__aeabi_dmul>
    554e:	4602      	mov	r2, r0
    5550:	460b      	mov	r3, r1
    5552:	4610      	mov	r0, r2
    5554:	4619      	mov	r1, r3
    5556:	f04f 0200 	mov.w	r2, #0
    555a:	4b10      	ldr	r3, [pc, #64]	; (559c <msleep+0x7c>)
    555c:	f005 fffc 	bl	b558 <__aeabi_ddiv>
    5560:	4602      	mov	r2, r0
    5562:	460b      	mov	r3, r1
    5564:	4620      	mov	r0, r4
    5566:	4629      	mov	r1, r5
    5568:	f005 fd1a 	bl	afa0 <__adddf3>
    556c:	4602      	mov	r2, r0
    556e:	460b      	mov	r3, r1
    5570:	4610      	mov	r0, r2
    5572:	4619      	mov	r1, r3
    5574:	f006 f8d8 	bl	b728 <__aeabi_d2uiz>
    5578:	4603      	mov	r3, r0
    557a:	60fb      	str	r3, [r7, #12]
	do { } while (clkn < stop_at);                   // TODO: handle wrapping
    557c:	4b06      	ldr	r3, [pc, #24]	; (5598 <msleep+0x78>)
    557e:	681a      	ldr	r2, [r3, #0]
    5580:	68fb      	ldr	r3, [r7, #12]
    5582:	429a      	cmp	r2, r3
    5584:	d3fa      	bcc.n	557c <msleep+0x5c>
}
    5586:	3710      	adds	r7, #16
    5588:	46bd      	mov	sp, r7
    558a:	bdb0      	pop	{r4, r5, r7, pc}
    558c:	f3af 8000 	nop.w
    5590:	00000000 	.word	0x00000000
    5594:	40738800 	.word	0x40738800
    5598:	10000be4 	.word	0x10000be4
    559c:	408f4000 	.word	0x408f4000

000055a0 <dma_init>:

static void dma_init()
{
    55a0:	b480      	push	{r7}
    55a2:	af00      	add	r7, sp, #0
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    55a4:	4a3f      	ldr	r2, [pc, #252]	; (56a4 <dma_init+0x104>)
    55a6:	4b3f      	ldr	r3, [pc, #252]	; (56a4 <dma_init+0x104>)
    55a8:	681b      	ldr	r3, [r3, #0]
    55aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    55ae:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    55b0:	4b3d      	ldr	r3, [pc, #244]	; (56a8 <dma_init+0x108>)
    55b2:	2200      	movs	r2, #0
    55b4:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    55b6:	4b3d      	ldr	r3, [pc, #244]	; (56ac <dma_init+0x10c>)
    55b8:	2200      	movs	r2, #0
    55ba:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    55bc:	4b3c      	ldr	r3, [pc, #240]	; (56b0 <dma_init+0x110>)
    55be:	2200      	movs	r2, #0
    55c0:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    55c2:	4b3c      	ldr	r3, [pc, #240]	; (56b4 <dma_init+0x114>)
    55c4:	2200      	movs	r2, #0
    55c6:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    55c8:	4b3b      	ldr	r3, [pc, #236]	; (56b8 <dma_init+0x118>)
    55ca:	2200      	movs	r2, #0
    55cc:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    55ce:	4b3b      	ldr	r3, [pc, #236]	; (56bc <dma_init+0x11c>)
    55d0:	2200      	movs	r2, #0
    55d2:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    55d4:	4b3a      	ldr	r3, [pc, #232]	; (56c0 <dma_init+0x120>)
    55d6:	2200      	movs	r2, #0
    55d8:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    55da:	4b3a      	ldr	r3, [pc, #232]	; (56c4 <dma_init+0x124>)
    55dc:	2200      	movs	r2, #0
    55de:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    55e0:	4b39      	ldr	r3, [pc, #228]	; (56c8 <dma_init+0x128>)
    55e2:	22ff      	movs	r2, #255	; 0xff
    55e4:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    55e6:	4b39      	ldr	r3, [pc, #228]	; (56cc <dma_init+0x12c>)
    55e8:	22ff      	movs	r2, #255	; 0xff
    55ea:	601a      	str	r2, [r3, #0]

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
    55ec:	4b38      	ldr	r3, [pc, #224]	; (56d0 <dma_init+0x130>)
    55ee:	4a39      	ldr	r2, [pc, #228]	; (56d4 <dma_init+0x134>)
    55f0:	601a      	str	r2, [r3, #0]
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
    55f2:	4a39      	ldr	r2, [pc, #228]	; (56d8 <dma_init+0x138>)
    55f4:	4b36      	ldr	r3, [pc, #216]	; (56d0 <dma_init+0x130>)
    55f6:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
    55f8:	4a38      	ldr	r2, [pc, #224]	; (56dc <dma_init+0x13c>)
    55fa:	4b35      	ldr	r3, [pc, #212]	; (56d0 <dma_init+0x130>)
    55fc:	609a      	str	r2, [r3, #8]
	rx_dma_lli1.control = (DMA_SIZE) |
    55fe:	4b34      	ldr	r3, [pc, #208]	; (56d0 <dma_init+0x130>)
    5600:	4a37      	ldr	r2, [pc, #220]	; (56e0 <dma_init+0x140>)
    5602:	60da      	str	r2, [r3, #12]
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
    5604:	4b35      	ldr	r3, [pc, #212]	; (56dc <dma_init+0x13c>)
    5606:	4a33      	ldr	r2, [pc, #204]	; (56d4 <dma_init+0x134>)
    5608:	601a      	str	r2, [r3, #0]
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
    560a:	4a36      	ldr	r2, [pc, #216]	; (56e4 <dma_init+0x144>)
    560c:	4b33      	ldr	r3, [pc, #204]	; (56dc <dma_init+0x13c>)
    560e:	605a      	str	r2, [r3, #4]
	rx_dma_lli2.next_lli = (u32)&rx_dma_lli1;
    5610:	4a2f      	ldr	r2, [pc, #188]	; (56d0 <dma_init+0x130>)
    5612:	4b32      	ldr	r3, [pc, #200]	; (56dc <dma_init+0x13c>)
    5614:	609a      	str	r2, [r3, #8]
	rx_dma_lli2.control = (DMA_SIZE) |
    5616:	4b31      	ldr	r3, [pc, #196]	; (56dc <dma_init+0x13c>)
    5618:	4a31      	ldr	r2, [pc, #196]	; (56e0 <dma_init+0x140>)
    561a:	60da      	str	r2, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* disable DMA interrupts */
	ICER0 = ICER0_ICE_DMA;
    561c:	4b32      	ldr	r3, [pc, #200]	; (56e8 <dma_init+0x148>)
    561e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5622:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    5624:	4b31      	ldr	r3, [pc, #196]	; (56ec <dma_init+0x14c>)
    5626:	2201      	movs	r2, #1
    5628:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    562a:	bf00      	nop
    562c:	4b2f      	ldr	r3, [pc, #188]	; (56ec <dma_init+0x14c>)
    562e:	681b      	ldr	r3, [r3, #0]
    5630:	f003 0301 	and.w	r3, r3, #1
    5634:	2b00      	cmp	r3, #0
    5636:	d0f9      	beq.n	562c <dma_init+0x8c>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    5638:	4a2d      	ldr	r2, [pc, #180]	; (56f0 <dma_init+0x150>)
    563a:	4b25      	ldr	r3, [pc, #148]	; (56d0 <dma_init+0x130>)
    563c:	681b      	ldr	r3, [r3, #0]
    563e:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    5640:	4a2c      	ldr	r2, [pc, #176]	; (56f4 <dma_init+0x154>)
    5642:	4b23      	ldr	r3, [pc, #140]	; (56d0 <dma_init+0x130>)
    5644:	685b      	ldr	r3, [r3, #4]
    5646:	6013      	str	r3, [r2, #0]
	DMACC0LLI = rx_dma_lli1.next_lli;
    5648:	4a2b      	ldr	r2, [pc, #172]	; (56f8 <dma_init+0x158>)
    564a:	4b21      	ldr	r3, [pc, #132]	; (56d0 <dma_init+0x130>)
    564c:	689b      	ldr	r3, [r3, #8]
    564e:	6013      	str	r3, [r2, #0]
	DMACC0Control = rx_dma_lli1.control;
    5650:	4a2a      	ldr	r2, [pc, #168]	; (56fc <dma_init+0x15c>)
    5652:	4b1f      	ldr	r3, [pc, #124]	; (56d0 <dma_init+0x130>)
    5654:	68db      	ldr	r3, [r3, #12]
    5656:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    5658:	4b13      	ldr	r3, [pc, #76]	; (56a8 <dma_init+0x108>)
    565a:	f24d 0206 	movw	r2, #53254	; 0xd006
    565e:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5660:	4b27      	ldr	r3, [pc, #156]	; (5700 <dma_init+0x160>)
    5662:	681b      	ldr	r3, [r3, #0]
    5664:	0d1b      	lsrs	r3, r3, #20
    5666:	b2db      	uxtb	r3, r3
    5668:	4a26      	ldr	r2, [pc, #152]	; (5704 <dma_init+0x164>)
    566a:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    566c:	4b24      	ldr	r3, [pc, #144]	; (5700 <dma_init+0x160>)
    566e:	681b      	ldr	r3, [r3, #0]
    5670:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5674:	f640 4235 	movw	r2, #3125	; 0xc35
    5678:	fb02 f203 	mul.w	r2, r2, r3
    567c:	4b22      	ldr	r3, [pc, #136]	; (5708 <dma_init+0x168>)
    567e:	681b      	ldr	r3, [r3, #0]
    5680:	4413      	add	r3, r2
    5682:	4a22      	ldr	r2, [pc, #136]	; (570c <dma_init+0x16c>)
    5684:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    5686:	4b22      	ldr	r3, [pc, #136]	; (5710 <dma_init+0x170>)
    5688:	881b      	ldrh	r3, [r3, #0]
    568a:	b29a      	uxth	r2, r3
    568c:	4b21      	ldr	r3, [pc, #132]	; (5714 <dma_init+0x174>)
    568e:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    5690:	4b21      	ldr	r3, [pc, #132]	; (5718 <dma_init+0x178>)
    5692:	2200      	movs	r2, #0
    5694:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    5696:	4b21      	ldr	r3, [pc, #132]	; (571c <dma_init+0x17c>)
    5698:	2200      	movs	r2, #0
    569a:	601a      	str	r2, [r3, #0]
}
    569c:	46bd      	mov	sp, r7
    569e:	f85d 7b04 	ldr.w	r7, [sp], #4
    56a2:	4770      	bx	lr
    56a4:	400fc0c4 	.word	0x400fc0c4
    56a8:	50004110 	.word	0x50004110
    56ac:	50004130 	.word	0x50004130
    56b0:	50004150 	.word	0x50004150
    56b4:	50004170 	.word	0x50004170
    56b8:	50004190 	.word	0x50004190
    56bc:	500041b0 	.word	0x500041b0
    56c0:	500041d0 	.word	0x500041d0
    56c4:	500041f0 	.word	0x500041f0
    56c8:	50004008 	.word	0x50004008
    56cc:	50004010 	.word	0x50004010
    56d0:	10001060 	.word	0x10001060
    56d4:	40030008 	.word	0x40030008
    56d8:	10001078 	.word	0x10001078
    56dc:	10000bcc 	.word	0x10000bcc
    56e0:	88009032 	.word	0x88009032
    56e4:	1000102c 	.word	0x1000102c
    56e8:	e000e180 	.word	0xe000e180
    56ec:	50004030 	.word	0x50004030
    56f0:	50004100 	.word	0x50004100
    56f4:	50004104 	.word	0x50004104
    56f8:	50004108 	.word	0x50004108
    56fc:	5000410c 	.word	0x5000410c
    5700:	10000be4 	.word	0x10000be4
    5704:	10000be8 	.word	0x10000be8
    5708:	40004008 	.word	0x40004008
    570c:	10001020 	.word	0x10001020
    5710:	1000049c 	.word	0x1000049c
    5714:	1000098a 	.word	0x1000098a
    5718:	10000b00 	.word	0x10000b00
    571c:	100010ac 	.word	0x100010ac

00005720 <dma_init_le>:

static void dma_init_le()
{
    5720:	b480      	push	{r7}
    5722:	b083      	sub	sp, #12
    5724:	af00      	add	r7, sp, #0
	int i;

	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    5726:	4a4b      	ldr	r2, [pc, #300]	; (5854 <dma_init_le+0x134>)
    5728:	4b4a      	ldr	r3, [pc, #296]	; (5854 <dma_init_le+0x134>)
    572a:	681b      	ldr	r3, [r3, #0]
    572c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    5730:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    5732:	4b49      	ldr	r3, [pc, #292]	; (5858 <dma_init_le+0x138>)
    5734:	2200      	movs	r2, #0
    5736:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5738:	4b48      	ldr	r3, [pc, #288]	; (585c <dma_init_le+0x13c>)
    573a:	2200      	movs	r2, #0
    573c:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    573e:	4b48      	ldr	r3, [pc, #288]	; (5860 <dma_init_le+0x140>)
    5740:	2200      	movs	r2, #0
    5742:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5744:	4b47      	ldr	r3, [pc, #284]	; (5864 <dma_init_le+0x144>)
    5746:	2200      	movs	r2, #0
    5748:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    574a:	4b47      	ldr	r3, [pc, #284]	; (5868 <dma_init_le+0x148>)
    574c:	2200      	movs	r2, #0
    574e:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5750:	4b46      	ldr	r3, [pc, #280]	; (586c <dma_init_le+0x14c>)
    5752:	2200      	movs	r2, #0
    5754:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    5756:	4b46      	ldr	r3, [pc, #280]	; (5870 <dma_init_le+0x150>)
    5758:	2200      	movs	r2, #0
    575a:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    575c:	4b45      	ldr	r3, [pc, #276]	; (5874 <dma_init_le+0x154>)
    575e:	2200      	movs	r2, #0
    5760:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5762:	4b45      	ldr	r3, [pc, #276]	; (5878 <dma_init_le+0x158>)
    5764:	22ff      	movs	r2, #255	; 0xff
    5766:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5768:	4b44      	ldr	r3, [pc, #272]	; (587c <dma_init_le+0x15c>)
    576a:	22ff      	movs	r2, #255	; 0xff
    576c:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    576e:	4b44      	ldr	r3, [pc, #272]	; (5880 <dma_init_le+0x160>)
    5770:	2201      	movs	r2, #1
    5772:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    5774:	bf00      	nop
    5776:	4b42      	ldr	r3, [pc, #264]	; (5880 <dma_init_le+0x160>)
    5778:	681b      	ldr	r3, [r3, #0]
    577a:	f003 0301 	and.w	r3, r3, #1
    577e:	2b00      	cmp	r3, #0
    5780:	d0f9      	beq.n	5776 <dma_init_le+0x56>

	for (i = 0; i < 11; ++i) {
    5782:	2300      	movs	r3, #0
    5784:	607b      	str	r3, [r7, #4]
    5786:	e02a      	b.n	57de <dma_init_le+0xbe>
		le_dma_lli[i].src = (u32)&(DIO_SSP_DR);
    5788:	4a3e      	ldr	r2, [pc, #248]	; (5884 <dma_init_le+0x164>)
    578a:	687b      	ldr	r3, [r7, #4]
    578c:	011b      	lsls	r3, r3, #4
    578e:	4413      	add	r3, r2
    5790:	4a3d      	ldr	r2, [pc, #244]	; (5888 <dma_init_le+0x168>)
    5792:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].dest = (u32)&rxbuf1[4 * i];
    5794:	687b      	ldr	r3, [r7, #4]
    5796:	009b      	lsls	r3, r3, #2
    5798:	4a3c      	ldr	r2, [pc, #240]	; (588c <dma_init_le+0x16c>)
    579a:	4413      	add	r3, r2
    579c:	4619      	mov	r1, r3
    579e:	4a39      	ldr	r2, [pc, #228]	; (5884 <dma_init_le+0x164>)
    57a0:	687b      	ldr	r3, [r7, #4]
    57a2:	011b      	lsls	r3, r3, #4
    57a4:	4413      	add	r3, r2
    57a6:	6059      	str	r1, [r3, #4]
		le_dma_lli[i].next_lli = i < 10 ? (u32)&le_dma_lli[i+1] : 0;
    57a8:	687b      	ldr	r3, [r7, #4]
    57aa:	2b09      	cmp	r3, #9
    57ac:	dc06      	bgt.n	57bc <dma_init_le+0x9c>
    57ae:	687b      	ldr	r3, [r7, #4]
    57b0:	3301      	adds	r3, #1
    57b2:	011b      	lsls	r3, r3, #4
    57b4:	4a33      	ldr	r2, [pc, #204]	; (5884 <dma_init_le+0x164>)
    57b6:	4413      	add	r3, r2
    57b8:	461a      	mov	r2, r3
    57ba:	e000      	b.n	57be <dma_init_le+0x9e>
    57bc:	2200      	movs	r2, #0
    57be:	4931      	ldr	r1, [pc, #196]	; (5884 <dma_init_le+0x164>)
    57c0:	687b      	ldr	r3, [r7, #4]
    57c2:	011b      	lsls	r3, r3, #4
    57c4:	440b      	add	r3, r1
    57c6:	3308      	adds	r3, #8
    57c8:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].control = 4 |
    57ca:	4a2e      	ldr	r2, [pc, #184]	; (5884 <dma_init_le+0x164>)
    57cc:	687b      	ldr	r3, [r7, #4]
    57ce:	011b      	lsls	r3, r3, #4
    57d0:	4413      	add	r3, r2
    57d2:	3308      	adds	r3, #8
    57d4:	4a2e      	ldr	r2, [pc, #184]	; (5890 <dma_init_le+0x170>)
    57d6:	605a      	str	r2, [r3, #4]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    57d8:	687b      	ldr	r3, [r7, #4]
    57da:	3301      	adds	r3, #1
    57dc:	607b      	str	r3, [r7, #4]
    57de:	687b      	ldr	r3, [r7, #4]
    57e0:	2b0a      	cmp	r3, #10
    57e2:	ddd1      	ble.n	5788 <dma_init_le+0x68>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    57e4:	4a2b      	ldr	r2, [pc, #172]	; (5894 <dma_init_le+0x174>)
    57e6:	4b27      	ldr	r3, [pc, #156]	; (5884 <dma_init_le+0x164>)
    57e8:	681b      	ldr	r3, [r3, #0]
    57ea:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    57ec:	4a2a      	ldr	r2, [pc, #168]	; (5898 <dma_init_le+0x178>)
    57ee:	4b25      	ldr	r3, [pc, #148]	; (5884 <dma_init_le+0x164>)
    57f0:	685b      	ldr	r3, [r3, #4]
    57f2:	6013      	str	r3, [r2, #0]
	DMACC0LLI = le_dma_lli[0].next_lli;
    57f4:	4a29      	ldr	r2, [pc, #164]	; (589c <dma_init_le+0x17c>)
    57f6:	4b23      	ldr	r3, [pc, #140]	; (5884 <dma_init_le+0x164>)
    57f8:	689b      	ldr	r3, [r3, #8]
    57fa:	6013      	str	r3, [r2, #0]
	DMACC0Control = le_dma_lli[0].control;
    57fc:	4a28      	ldr	r2, [pc, #160]	; (58a0 <dma_init_le+0x180>)
    57fe:	4b21      	ldr	r3, [pc, #132]	; (5884 <dma_init_le+0x164>)
    5800:	68db      	ldr	r3, [r3, #12]
    5802:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    5804:	4b14      	ldr	r3, [pc, #80]	; (5858 <dma_init_le+0x138>)
    5806:	f24d 0206 	movw	r2, #53254	; 0xd006
    580a:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    580c:	4b25      	ldr	r3, [pc, #148]	; (58a4 <dma_init_le+0x184>)
    580e:	681b      	ldr	r3, [r3, #0]
    5810:	0d1b      	lsrs	r3, r3, #20
    5812:	b2db      	uxtb	r3, r3
    5814:	4a24      	ldr	r2, [pc, #144]	; (58a8 <dma_init_le+0x188>)
    5816:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    5818:	4b22      	ldr	r3, [pc, #136]	; (58a4 <dma_init_le+0x184>)
    581a:	681b      	ldr	r3, [r3, #0]
    581c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5820:	f640 4235 	movw	r2, #3125	; 0xc35
    5824:	fb02 f203 	mul.w	r2, r2, r3
    5828:	4b20      	ldr	r3, [pc, #128]	; (58ac <dma_init_le+0x18c>)
    582a:	681b      	ldr	r3, [r3, #0]
    582c:	4413      	add	r3, r2
    582e:	4a20      	ldr	r2, [pc, #128]	; (58b0 <dma_init_le+0x190>)
    5830:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    5832:	4b20      	ldr	r3, [pc, #128]	; (58b4 <dma_init_le+0x194>)
    5834:	881b      	ldrh	r3, [r3, #0]
    5836:	b29a      	uxth	r2, r3
    5838:	4b1f      	ldr	r3, [pc, #124]	; (58b8 <dma_init_le+0x198>)
    583a:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    583c:	4b1f      	ldr	r3, [pc, #124]	; (58bc <dma_init_le+0x19c>)
    583e:	2200      	movs	r2, #0
    5840:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    5842:	4b1f      	ldr	r3, [pc, #124]	; (58c0 <dma_init_le+0x1a0>)
    5844:	2200      	movs	r2, #0
    5846:	601a      	str	r2, [r3, #0]
}
    5848:	370c      	adds	r7, #12
    584a:	46bd      	mov	sp, r7
    584c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5850:	4770      	bx	lr
    5852:	bf00      	nop
    5854:	400fc0c4 	.word	0x400fc0c4
    5858:	50004110 	.word	0x50004110
    585c:	50004130 	.word	0x50004130
    5860:	50004150 	.word	0x50004150
    5864:	50004170 	.word	0x50004170
    5868:	50004190 	.word	0x50004190
    586c:	500041b0 	.word	0x500041b0
    5870:	500041d0 	.word	0x500041d0
    5874:	500041f0 	.word	0x500041f0
    5878:	50004008 	.word	0x50004008
    587c:	50004010 	.word	0x50004010
    5880:	50004030 	.word	0x50004030
    5884:	10000b08 	.word	0x10000b08
    5888:	40030008 	.word	0x40030008
    588c:	10001078 	.word	0x10001078
    5890:	88001004 	.word	0x88001004
    5894:	50004100 	.word	0x50004100
    5898:	50004104 	.word	0x50004104
    589c:	50004108 	.word	0x50004108
    58a0:	5000410c 	.word	0x5000410c
    58a4:	10000be4 	.word	0x10000be4
    58a8:	10000be8 	.word	0x10000be8
    58ac:	40004008 	.word	0x40004008
    58b0:	10001020 	.word	0x10001020
    58b4:	1000049c 	.word	0x1000049c
    58b8:	1000098a 	.word	0x1000098a
    58bc:	10000b00 	.word	0x10000b00
    58c0:	100010ac 	.word	0x100010ac

000058c4 <bt_stream_dma_handler>:

void bt_stream_dma_handler(void) {
    58c4:	b480      	push	{r7}
    58c6:	af00      	add	r7, sp, #0
	idle_buf_clkn_high = active_buf_clkn_high;
    58c8:	4b25      	ldr	r3, [pc, #148]	; (5960 <bt_stream_dma_handler+0x9c>)
    58ca:	681b      	ldr	r3, [r3, #0]
    58cc:	4a25      	ldr	r2, [pc, #148]	; (5964 <bt_stream_dma_handler+0xa0>)
    58ce:	6013      	str	r3, [r2, #0]
	active_buf_clkn_high = (clkn >> 20) & 0xff;
    58d0:	4b25      	ldr	r3, [pc, #148]	; (5968 <bt_stream_dma_handler+0xa4>)
    58d2:	681b      	ldr	r3, [r3, #0]
    58d4:	0d1b      	lsrs	r3, r3, #20
    58d6:	b2db      	uxtb	r3, r3
    58d8:	4a21      	ldr	r2, [pc, #132]	; (5960 <bt_stream_dma_handler+0x9c>)
    58da:	6013      	str	r3, [r2, #0]

	idle_buf_clk100ns = active_buf_clk100ns;
    58dc:	4b23      	ldr	r3, [pc, #140]	; (596c <bt_stream_dma_handler+0xa8>)
    58de:	681b      	ldr	r3, [r3, #0]
    58e0:	4a23      	ldr	r2, [pc, #140]	; (5970 <bt_stream_dma_handler+0xac>)
    58e2:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    58e4:	4b20      	ldr	r3, [pc, #128]	; (5968 <bt_stream_dma_handler+0xa4>)
    58e6:	681b      	ldr	r3, [r3, #0]
    58e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    58ec:	f640 4235 	movw	r2, #3125	; 0xc35
    58f0:	fb02 f203 	mul.w	r2, r2, r3
    58f4:	4b1f      	ldr	r3, [pc, #124]	; (5974 <bt_stream_dma_handler+0xb0>)
    58f6:	681b      	ldr	r3, [r3, #0]
    58f8:	4413      	add	r3, r2
    58fa:	4a1c      	ldr	r2, [pc, #112]	; (596c <bt_stream_dma_handler+0xa8>)
    58fc:	6013      	str	r3, [r2, #0]

	idle_buf_channel = active_buf_channel;
    58fe:	4b1e      	ldr	r3, [pc, #120]	; (5978 <bt_stream_dma_handler+0xb4>)
    5900:	881b      	ldrh	r3, [r3, #0]
    5902:	b29a      	uxth	r2, r3
    5904:	4b1d      	ldr	r3, [pc, #116]	; (597c <bt_stream_dma_handler+0xb8>)
    5906:	801a      	strh	r2, [r3, #0]
	active_buf_channel = channel;
    5908:	4b1d      	ldr	r3, [pc, #116]	; (5980 <bt_stream_dma_handler+0xbc>)
    590a:	881b      	ldrh	r3, [r3, #0]
    590c:	b29a      	uxth	r2, r3
    590e:	4b1a      	ldr	r3, [pc, #104]	; (5978 <bt_stream_dma_handler+0xb4>)
    5910:	801a      	strh	r2, [r3, #0]

	/* interrupt on channel 0 */
	if (DMACIntStat & (1 << 0)) {
    5912:	4b1c      	ldr	r3, [pc, #112]	; (5984 <bt_stream_dma_handler+0xc0>)
    5914:	681b      	ldr	r3, [r3, #0]
    5916:	f003 0301 	and.w	r3, r3, #1
    591a:	2b00      	cmp	r3, #0
    591c:	d01b      	beq.n	5956 <bt_stream_dma_handler+0x92>
		if (DMACIntTCStat & (1 << 0)) {
    591e:	4b1a      	ldr	r3, [pc, #104]	; (5988 <bt_stream_dma_handler+0xc4>)
    5920:	681b      	ldr	r3, [r3, #0]
    5922:	f003 0301 	and.w	r3, r3, #1
    5926:	2b00      	cmp	r3, #0
    5928:	d007      	beq.n	593a <bt_stream_dma_handler+0x76>
			DMACIntTCClear = (1 << 0);
    592a:	4b18      	ldr	r3, [pc, #96]	; (598c <bt_stream_dma_handler+0xc8>)
    592c:	2201      	movs	r2, #1
    592e:	601a      	str	r2, [r3, #0]
			++rx_tc;
    5930:	4b17      	ldr	r3, [pc, #92]	; (5990 <bt_stream_dma_handler+0xcc>)
    5932:	681b      	ldr	r3, [r3, #0]
    5934:	3301      	adds	r3, #1
    5936:	4a16      	ldr	r2, [pc, #88]	; (5990 <bt_stream_dma_handler+0xcc>)
    5938:	6013      	str	r3, [r2, #0]
		}
		if (DMACIntErrStat & (1 << 0)) {
    593a:	4b16      	ldr	r3, [pc, #88]	; (5994 <bt_stream_dma_handler+0xd0>)
    593c:	681b      	ldr	r3, [r3, #0]
    593e:	f003 0301 	and.w	r3, r3, #1
    5942:	2b00      	cmp	r3, #0
    5944:	d007      	beq.n	5956 <bt_stream_dma_handler+0x92>
			DMACIntErrClr = (1 << 0);
    5946:	4b14      	ldr	r3, [pc, #80]	; (5998 <bt_stream_dma_handler+0xd4>)
    5948:	2201      	movs	r2, #1
    594a:	601a      	str	r2, [r3, #0]
			++rx_err;
    594c:	4b13      	ldr	r3, [pc, #76]	; (599c <bt_stream_dma_handler+0xd8>)
    594e:	681b      	ldr	r3, [r3, #0]
    5950:	3301      	adds	r3, #1
    5952:	4a12      	ldr	r2, [pc, #72]	; (599c <bt_stream_dma_handler+0xd8>)
    5954:	6013      	str	r3, [r2, #0]
		}
	}
}
    5956:	46bd      	mov	sp, r7
    5958:	f85d 7b04 	ldr.w	r7, [sp], #4
    595c:	4770      	bx	lr
    595e:	bf00      	nop
    5960:	10000be8 	.word	0x10000be8
    5964:	10001028 	.word	0x10001028
    5968:	10000be4 	.word	0x10000be4
    596c:	10001020 	.word	0x10001020
    5970:	10000bc8 	.word	0x10000bc8
    5974:	40004008 	.word	0x40004008
    5978:	1000098a 	.word	0x1000098a
    597c:	10000988 	.word	0x10000988
    5980:	1000049c 	.word	0x1000049c
    5984:	50004000 	.word	0x50004000
    5988:	50004004 	.word	0x50004004
    598c:	50004008 	.word	0x50004008
    5990:	10000b00 	.word	0x10000b00
    5994:	5000400c 	.word	0x5000400c
    5998:	50004010 	.word	0x50004010
    599c:	100010ac 	.word	0x100010ac

000059a0 <DMA_IRQHandler>:

void DMA_IRQHandler()
{
    59a0:	b580      	push	{r7, lr}
    59a2:	af00      	add	r7, sp, #0
	switch (mode) {
    59a4:	4b12      	ldr	r3, [pc, #72]	; (59f0 <DMA_IRQHandler+0x50>)
    59a6:	781b      	ldrb	r3, [r3, #0]
    59a8:	b2db      	uxtb	r3, r3
    59aa:	3b01      	subs	r3, #1
    59ac:	2b0b      	cmp	r3, #11
    59ae:	d81e      	bhi.n	59ee <DMA_IRQHandler+0x4e>
    59b0:	a201      	add	r2, pc, #4	; (adr r2, 59b8 <DMA_IRQHandler+0x18>)
    59b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    59b6:	bf00      	nop
    59b8:	000059e9 	.word	0x000059e9
    59bc:	000059ef 	.word	0x000059ef
    59c0:	000059ef 	.word	0x000059ef
    59c4:	000059e9 	.word	0x000059e9
    59c8:	000059ef 	.word	0x000059ef
    59cc:	000059ef 	.word	0x000059ef
    59d0:	000059ef 	.word	0x000059ef
    59d4:	000059e9 	.word	0x000059e9
    59d8:	000059e9 	.word	0x000059e9
    59dc:	000059e9 	.word	0x000059e9
    59e0:	000059ef 	.word	0x000059ef
    59e4:	000059e9 	.word	0x000059e9
		case MODE_SPECAN:
		case MODE_BT_FOLLOW:
		case MODE_BT_FOLLOW_LE:
		case MODE_BT_PROMISC_LE:
		case MODE_BT_SLAVE_LE:
			bt_stream_dma_handler();
    59e8:	f7ff ff6c 	bl	58c4 <bt_stream_dma_handler>
			break;
    59ec:	bf00      	nop
	}
}
    59ee:	bd80      	pop	{r7, pc}
    59f0:	10000a3e 	.word	0x10000a3e

000059f4 <dio_ssp_start>:

static void dio_ssp_start()
{
    59f4:	b480      	push	{r7}
    59f6:	af00      	add	r7, sp, #0
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    59f8:	4b10      	ldr	r3, [pc, #64]	; (5a3c <dio_ssp_start+0x48>)
    59fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    59fe:	601a      	str	r2, [r3, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    5a00:	4a0f      	ldr	r2, [pc, #60]	; (5a40 <dio_ssp_start+0x4c>)
    5a02:	4b0f      	ldr	r3, [pc, #60]	; (5a40 <dio_ssp_start+0x4c>)
    5a04:	681b      	ldr	r3, [r3, #0]
    5a06:	f043 0301 	orr.w	r3, r3, #1
    5a0a:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    5a0c:	4a0d      	ldr	r2, [pc, #52]	; (5a44 <dio_ssp_start+0x50>)
    5a0e:	4b0d      	ldr	r3, [pc, #52]	; (5a44 <dio_ssp_start+0x50>)
    5a10:	681b      	ldr	r3, [r3, #0]
    5a12:	f043 0302 	orr.w	r3, r3, #2
    5a16:	6013      	str	r3, [r2, #0]
	
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
    5a18:	4a0b      	ldr	r2, [pc, #44]	; (5a48 <dio_ssp_start+0x54>)
    5a1a:	4b0b      	ldr	r3, [pc, #44]	; (5a48 <dio_ssp_start+0x54>)
    5a1c:	681b      	ldr	r3, [r3, #0]
    5a1e:	f043 0301 	orr.w	r3, r3, #1
    5a22:	6013      	str	r3, [r2, #0]
	ISER0 = ISER0_ISE_DMA;
    5a24:	4b09      	ldr	r3, [pc, #36]	; (5a4c <dio_ssp_start+0x58>)
    5a26:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5a2a:	601a      	str	r2, [r3, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
    5a2c:	4b08      	ldr	r3, [pc, #32]	; (5a50 <dio_ssp_start+0x5c>)
    5a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5a32:	601a      	str	r2, [r3, #0]
}
    5a34:	46bd      	mov	sp, r7
    5a36:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a3a:	4770      	bx	lr
    5a3c:	2009c098 	.word	0x2009c098
    5a40:	40030024 	.word	0x40030024
    5a44:	40030004 	.word	0x40030004
    5a48:	50004110 	.word	0x50004110
    5a4c:	e000e100 	.word	0xe000e100
    5a50:	2009c09c 	.word	0x2009c09c

00005a54 <dio_ssp_stop>:

static void dio_ssp_stop()
{
    5a54:	b480      	push	{r7}
    5a56:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    5a58:	4b21      	ldr	r3, [pc, #132]	; (5ae0 <dio_ssp_stop+0x8c>)
    5a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5a5e:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5a60:	4a20      	ldr	r2, [pc, #128]	; (5ae4 <dio_ssp_stop+0x90>)
    5a62:	4b20      	ldr	r3, [pc, #128]	; (5ae4 <dio_ssp_stop+0x90>)
    5a64:	681b      	ldr	r3, [r3, #0]
    5a66:	f023 0301 	bic.w	r3, r3, #1
    5a6a:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    5a6c:	4a1e      	ldr	r2, [pc, #120]	; (5ae8 <dio_ssp_stop+0x94>)
    5a6e:	4b1e      	ldr	r3, [pc, #120]	; (5ae8 <dio_ssp_stop+0x94>)
    5a70:	681b      	ldr	r3, [r3, #0]
    5a72:	f023 0302 	bic.w	r3, r3, #2
    5a76:	6013      	str	r3, [r2, #0]

	// disable DMA engine:
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 607

	// disable DMA interrupts
	ICER0 = ICER0_ICE_DMA;
    5a78:	4b1c      	ldr	r3, [pc, #112]	; (5aec <dio_ssp_stop+0x98>)
    5a7a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5a7e:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    5a80:	4b1b      	ldr	r3, [pc, #108]	; (5af0 <dio_ssp_stop+0x9c>)
    5a82:	2200      	movs	r2, #0
    5a84:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5a86:	4b1b      	ldr	r3, [pc, #108]	; (5af4 <dio_ssp_stop+0xa0>)
    5a88:	2200      	movs	r2, #0
    5a8a:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    5a8c:	4b1a      	ldr	r3, [pc, #104]	; (5af8 <dio_ssp_stop+0xa4>)
    5a8e:	2200      	movs	r2, #0
    5a90:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5a92:	4b1a      	ldr	r3, [pc, #104]	; (5afc <dio_ssp_stop+0xa8>)
    5a94:	2200      	movs	r2, #0
    5a96:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    5a98:	4b19      	ldr	r3, [pc, #100]	; (5b00 <dio_ssp_stop+0xac>)
    5a9a:	2200      	movs	r2, #0
    5a9c:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5a9e:	4b19      	ldr	r3, [pc, #100]	; (5b04 <dio_ssp_stop+0xb0>)
    5aa0:	2200      	movs	r2, #0
    5aa2:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    5aa4:	4b18      	ldr	r3, [pc, #96]	; (5b08 <dio_ssp_stop+0xb4>)
    5aa6:	2200      	movs	r2, #0
    5aa8:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    5aaa:	4b18      	ldr	r3, [pc, #96]	; (5b0c <dio_ssp_stop+0xb8>)
    5aac:	2200      	movs	r2, #0
    5aae:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5ab0:	4b17      	ldr	r3, [pc, #92]	; (5b10 <dio_ssp_stop+0xbc>)
    5ab2:	22ff      	movs	r2, #255	; 0xff
    5ab4:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5ab6:	4b17      	ldr	r3, [pc, #92]	; (5b14 <dio_ssp_stop+0xc0>)
    5ab8:	22ff      	movs	r2, #255	; 0xff
    5aba:	601a      	str	r2, [r3, #0]

	// Disable the DMA controller by writing 0 to the DMA Enable bit in the DMACConfig
	// register.
	DMACConfig &= ~DMACConfig_E;
    5abc:	4a16      	ldr	r2, [pc, #88]	; (5b18 <dio_ssp_stop+0xc4>)
    5abe:	4b16      	ldr	r3, [pc, #88]	; (5b18 <dio_ssp_stop+0xc4>)
    5ac0:	681b      	ldr	r3, [r3, #0]
    5ac2:	f023 0301 	bic.w	r3, r3, #1
    5ac6:	6013      	str	r3, [r2, #0]
	while (DMACConfig & DMACConfig_E);
    5ac8:	bf00      	nop
    5aca:	4b13      	ldr	r3, [pc, #76]	; (5b18 <dio_ssp_stop+0xc4>)
    5acc:	681b      	ldr	r3, [r3, #0]
    5ace:	f003 0301 	and.w	r3, r3, #1
    5ad2:	2b00      	cmp	r3, #0
    5ad4:	d1f9      	bne.n	5aca <dio_ssp_stop+0x76>
}
    5ad6:	46bd      	mov	sp, r7
    5ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5adc:	4770      	bx	lr
    5ade:	bf00      	nop
    5ae0:	2009c098 	.word	0x2009c098
    5ae4:	40030024 	.word	0x40030024
    5ae8:	40030004 	.word	0x40030004
    5aec:	e000e180 	.word	0xe000e180
    5af0:	50004110 	.word	0x50004110
    5af4:	50004130 	.word	0x50004130
    5af8:	50004150 	.word	0x50004150
    5afc:	50004170 	.word	0x50004170
    5b00:	50004190 	.word	0x50004190
    5b04:	500041b0 	.word	0x500041b0
    5b08:	500041d0 	.word	0x500041d0
    5b0c:	500041f0 	.word	0x500041f0
    5b10:	50004008 	.word	0x50004008
    5b14:	50004010 	.word	0x50004010
    5b18:	50004030 	.word	0x50004030

00005b1c <cc2400_idle>:

static void cc2400_idle()
{
    5b1c:	b580      	push	{r7, lr}
    5b1e:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    5b20:	2064      	movs	r0, #100	; 0x64
    5b22:	f004 f941 	bl	9da8 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5b26:	bf00      	nop
    5b28:	f004 f934 	bl	9d94 <cc2400_status>
    5b2c:	4603      	mov	r3, r0
    5b2e:	f003 0304 	and.w	r3, r3, #4
    5b32:	2b00      	cmp	r3, #0
    5b34:	d1f8      	bne.n	5b28 <cc2400_idle+0xc>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5b36:	4b0a      	ldr	r3, [pc, #40]	; (5b60 <cc2400_idle+0x44>)
    5b38:	2280      	movs	r2, #128	; 0x80
    5b3a:	601a      	str	r2, [r3, #0]
	HGM_CLR;
    5b3c:	4b08      	ldr	r3, [pc, #32]	; (5b60 <cc2400_idle+0x44>)
    5b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
    5b42:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    5b44:	4b07      	ldr	r3, [pc, #28]	; (5b64 <cc2400_idle+0x48>)
    5b46:	2210      	movs	r2, #16
    5b48:	601a      	str	r2, [r3, #0]
	TXLED_CLR;
    5b4a:	4b06      	ldr	r3, [pc, #24]	; (5b64 <cc2400_idle+0x48>)
    5b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5b50:	601a      	str	r2, [r3, #0]
	USRLED_CLR;
    5b52:	4b04      	ldr	r3, [pc, #16]	; (5b64 <cc2400_idle+0x48>)
    5b54:	2202      	movs	r2, #2
    5b56:	601a      	str	r2, [r3, #0]
	mode = MODE_IDLE;
    5b58:	4b03      	ldr	r3, [pc, #12]	; (5b68 <cc2400_idle+0x4c>)
    5b5a:	2200      	movs	r2, #0
    5b5c:	701a      	strb	r2, [r3, #0]
}
    5b5e:	bd80      	pop	{r7, pc}
    5b60:	2009c05c 	.word	0x2009c05c
    5b64:	2009c03c 	.word	0x2009c03c
    5b68:	10000a3e 	.word	0x10000a3e

00005b6c <cc2400_rx>:

/* start un-buffered rx */
static void cc2400_rx()
{
    5b6c:	b580      	push	{r7, lr}
    5b6e:	b082      	sub	sp, #8
    5b70:	af00      	add	r7, sp, #0
	u16 mdmctrl;
	if (modulation == MOD_BT_BASIC_RATE) {
    5b72:	4b2a      	ldr	r3, [pc, #168]	; (5c1c <cc2400_rx+0xb0>)
    5b74:	781b      	ldrb	r3, [r3, #0]
    5b76:	b2db      	uxtb	r3, r3
    5b78:	2b00      	cmp	r3, #0
    5b7a:	d102      	bne.n	5b82 <cc2400_rx+0x16>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5b7c:	2329      	movs	r3, #41	; 0x29
    5b7e:	80fb      	strh	r3, [r7, #6]
    5b80:	e008      	b.n	5b94 <cc2400_rx+0x28>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5b82:	4b26      	ldr	r3, [pc, #152]	; (5c1c <cc2400_rx+0xb0>)
    5b84:	781b      	ldrb	r3, [r3, #0]
    5b86:	b2db      	uxtb	r3, r3
    5b88:	2b01      	cmp	r3, #1
    5b8a:	d102      	bne.n	5b92 <cc2400_rx+0x26>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5b8c:	2340      	movs	r3, #64	; 0x40
    5b8e:	80fb      	strh	r3, [r7, #6]
    5b90:	e000      	b.n	5b94 <cc2400_rx+0x28>
	} else {
		/* oops */
		return;
    5b92:	e040      	b.n	5c16 <cc2400_rx+0xaa>
	}

	cc2400_set(MANAND,  0x7fff);
    5b94:	200d      	movs	r0, #13
    5b96:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5b9a:	f004 f843 	bl	9c24 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5b9e:	2012      	movs	r0, #18
    5ba0:	f642 3122 	movw	r1, #11042	; 0x2b22
    5ba4:	f004 f83e 	bl	9c24 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    5ba8:	2014      	movs	r0, #20
    5baa:	f241 314b 	movw	r1, #4939	; 0x134b
    5bae:	f004 f839 	bl	9c24 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    5bb2:	2020      	movs	r0, #32
    5bb4:	f240 1101 	movw	r1, #257	; 0x101
    5bb8:	f004 f834 	bl	9c24 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 2 preamble bytes of 01010101
	//      |  +-----------------> not packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5bbc:	4b18      	ldr	r3, [pc, #96]	; (5c20 <cc2400_rx+0xb4>)
    5bbe:	881b      	ldrh	r3, [r3, #0]
    5bc0:	b29b      	uxth	r3, r3
    5bc2:	3b01      	subs	r3, #1
    5bc4:	b29b      	uxth	r3, r3
    5bc6:	2002      	movs	r0, #2
    5bc8:	4619      	mov	r1, r3
    5bca:	f004 f82b 	bl	9c24 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5bce:	88fb      	ldrh	r3, [r7, #6]
    5bd0:	2003      	movs	r0, #3
    5bd2:	4619      	mov	r1, r3
    5bd4:	f004 f826 	bl	9c24 <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5bd8:	f7fe fdda 	bl	4790 <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5bdc:	bf00      	nop
    5bde:	f004 f8d9 	bl	9d94 <cc2400_status>
    5be2:	4603      	mov	r3, r0
    5be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5be8:	2b00      	cmp	r3, #0
    5bea:	d0f8      	beq.n	5bde <cc2400_rx+0x72>
	cc2400_strobe(SFSON);
    5bec:	2061      	movs	r0, #97	; 0x61
    5bee:	f004 f8db 	bl	9da8 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5bf2:	bf00      	nop
    5bf4:	f004 f8ce 	bl	9d94 <cc2400_status>
    5bf8:	4603      	mov	r3, r0
    5bfa:	f003 0304 	and.w	r3, r3, #4
    5bfe:	2b00      	cmp	r3, #0
    5c00:	d0f8      	beq.n	5bf4 <cc2400_rx+0x88>
	cc2400_strobe(SRX);
    5c02:	2062      	movs	r0, #98	; 0x62
    5c04:	f004 f8d0 	bl	9da8 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5c08:	4b06      	ldr	r3, [pc, #24]	; (5c24 <cc2400_rx+0xb8>)
    5c0a:	2280      	movs	r2, #128	; 0x80
    5c0c:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5c0e:	4b05      	ldr	r3, [pc, #20]	; (5c24 <cc2400_rx+0xb8>)
    5c10:	f44f 7280 	mov.w	r2, #256	; 0x100
    5c14:	601a      	str	r2, [r3, #0]
#endif
}
    5c16:	3708      	adds	r7, #8
    5c18:	46bd      	mov	sp, r7
    5c1a:	bd80      	pop	{r7, pc}
    5c1c:	10000a42 	.word	0x10000a42
    5c20:	1000049c 	.word	0x1000049c
    5c24:	2009c058 	.word	0x2009c058

00005c28 <cc2400_rx_sync>:

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    5c28:	b580      	push	{r7, lr}
    5c2a:	b084      	sub	sp, #16
    5c2c:	af00      	add	r7, sp, #0
    5c2e:	6078      	str	r0, [r7, #4]
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    5c30:	4b33      	ldr	r3, [pc, #204]	; (5d00 <cc2400_rx_sync+0xd8>)
    5c32:	781b      	ldrb	r3, [r3, #0]
    5c34:	b2db      	uxtb	r3, r3
    5c36:	2b00      	cmp	r3, #0
    5c38:	d105      	bne.n	5c46 <cc2400_rx_sync+0x1e>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5c3a:	2329      	movs	r3, #41	; 0x29
    5c3c:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    5c3e:	f240 4361 	movw	r3, #1121	; 0x461
    5c42:	81fb      	strh	r3, [r7, #14]
    5c44:	e00b      	b.n	5c5e <cc2400_rx_sync+0x36>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5c46:	4b2e      	ldr	r3, [pc, #184]	; (5d00 <cc2400_rx_sync+0xd8>)
    5c48:	781b      	ldrb	r3, [r3, #0]
    5c4a:	b2db      	uxtb	r3, r3
    5c4c:	2b01      	cmp	r3, #1
    5c4e:	d105      	bne.n	5c5c <cc2400_rx_sync+0x34>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5c50:	2340      	movs	r3, #64	; 0x40
    5c52:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    5c54:	f240 5361 	movw	r3, #1377	; 0x561
    5c58:	81fb      	strh	r3, [r7, #14]
    5c5a:	e000      	b.n	5c5e <cc2400_rx_sync+0x36>
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else {
		/* oops */
		return;
    5c5c:	e04d      	b.n	5cfa <cc2400_rx_sync+0xd2>
	}

	cc2400_set(MANAND,  0x7fff);
    5c5e:	200d      	movs	r0, #13
    5c60:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5c64:	f003 ffde 	bl	9c24 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5c68:	2012      	movs	r0, #18
    5c6a:	f642 3122 	movw	r1, #11042	; 0x2b22
    5c6e:	f003 ffd9 	bl	9c24 <cc2400_set>

	cc2400_set(MDMTST0, 0x124b);
    5c72:	2014      	movs	r0, #20
    5c74:	f241 214b 	movw	r1, #4683	; 0x124b
    5c78:	f003 ffd4 	bl	9c24 <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    5c7c:	89fb      	ldrh	r3, [r7, #14]
    5c7e:	2020      	movs	r0, #32
    5c80:	4619      	mov	r1, r3
    5c82:	f003 ffcf 	bl	9c24 <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    5c86:	687b      	ldr	r3, [r7, #4]
    5c88:	b29b      	uxth	r3, r3
    5c8a:	202c      	movs	r0, #44	; 0x2c
    5c8c:	4619      	mov	r1, r3
    5c8e:	f003 ffc9 	bl	9c24 <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    5c92:	687b      	ldr	r3, [r7, #4]
    5c94:	0c1b      	lsrs	r3, r3, #16
    5c96:	b29b      	uxth	r3, r3
    5c98:	202d      	movs	r0, #45	; 0x2d
    5c9a:	4619      	mov	r1, r3
    5c9c:	f003 ffc2 	bl	9c24 <cc2400_set>
	
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5ca0:	4b18      	ldr	r3, [pc, #96]	; (5d04 <cc2400_rx_sync+0xdc>)
    5ca2:	881b      	ldrh	r3, [r3, #0]
    5ca4:	b29b      	uxth	r3, r3
    5ca6:	3b01      	subs	r3, #1
    5ca8:	b29b      	uxth	r3, r3
    5caa:	2002      	movs	r0, #2
    5cac:	4619      	mov	r1, r3
    5cae:	f003 ffb9 	bl	9c24 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5cb2:	89bb      	ldrh	r3, [r7, #12]
    5cb4:	2003      	movs	r0, #3
    5cb6:	4619      	mov	r1, r3
    5cb8:	f003 ffb4 	bl	9c24 <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5cbc:	f7fe fd68 	bl	4790 <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5cc0:	bf00      	nop
    5cc2:	f004 f867 	bl	9d94 <cc2400_status>
    5cc6:	4603      	mov	r3, r0
    5cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5ccc:	2b00      	cmp	r3, #0
    5cce:	d0f8      	beq.n	5cc2 <cc2400_rx_sync+0x9a>
	cc2400_strobe(SFSON);
    5cd0:	2061      	movs	r0, #97	; 0x61
    5cd2:	f004 f869 	bl	9da8 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5cd6:	bf00      	nop
    5cd8:	f004 f85c 	bl	9d94 <cc2400_status>
    5cdc:	4603      	mov	r3, r0
    5cde:	f003 0304 	and.w	r3, r3, #4
    5ce2:	2b00      	cmp	r3, #0
    5ce4:	d0f8      	beq.n	5cd8 <cc2400_rx_sync+0xb0>
	cc2400_strobe(SRX);
    5ce6:	2062      	movs	r0, #98	; 0x62
    5ce8:	f004 f85e 	bl	9da8 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5cec:	4b06      	ldr	r3, [pc, #24]	; (5d08 <cc2400_rx_sync+0xe0>)
    5cee:	2280      	movs	r2, #128	; 0x80
    5cf0:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5cf2:	4b05      	ldr	r3, [pc, #20]	; (5d08 <cc2400_rx_sync+0xe0>)
    5cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
    5cf8:	601a      	str	r2, [r3, #0]
#endif
}
    5cfa:	3710      	adds	r7, #16
    5cfc:	46bd      	mov	sp, r7
    5cfe:	bd80      	pop	{r7, pc}
    5d00:	10000a42 	.word	0x10000a42
    5d04:	1000049c 	.word	0x1000049c
    5d08:	2009c058 	.word	0x2009c058

00005d0c <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data)
{
    5d0c:	b580      	push	{r7, lr}
    5d0e:	b09a      	sub	sp, #104	; 0x68
    5d10:	af00      	add	r7, sp, #0
    5d12:	60f8      	str	r0, [r7, #12]
    5d14:	460b      	mov	r3, r1
    5d16:	607a      	str	r2, [r7, #4]
    5d18:	72fb      	strb	r3, [r7, #11]
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5d1a:	2300      	movs	r3, #0
    5d1c:	667b      	str	r3, [r7, #100]	; 0x64
    5d1e:	e035      	b.n	5d8c <le_transmit+0x80>
		byte = aa & 0xff;
    5d20:	68fb      	ldr	r3, [r7, #12]
    5d22:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		aa >>= 8;
    5d26:	68fb      	ldr	r3, [r7, #12]
    5d28:	0a1b      	lsrs	r3, r3, #8
    5d2a:	60fb      	str	r3, [r7, #12]
		txbuf[i] = 0;
    5d2c:	f107 0210 	add.w	r2, r7, #16
    5d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d32:	4413      	add	r3, r2
    5d34:	2200      	movs	r2, #0
    5d36:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; ++j) {
    5d38:	2300      	movs	r3, #0
    5d3a:	663b      	str	r3, [r7, #96]	; 0x60
    5d3c:	e020      	b.n	5d80 <le_transmit+0x74>
			txbuf[i] |= (byte & 1) << (7 - j);
    5d3e:	f107 0210 	add.w	r2, r7, #16
    5d42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d44:	4413      	add	r3, r2
    5d46:	781b      	ldrb	r3, [r3, #0]
    5d48:	b2d9      	uxtb	r1, r3
    5d4a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5d4e:	f003 0301 	and.w	r3, r3, #1
    5d52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5d54:	f1c2 0207 	rsb	r2, r2, #7
    5d58:	4093      	lsls	r3, r2
    5d5a:	b2db      	uxtb	r3, r3
    5d5c:	460a      	mov	r2, r1
    5d5e:	4313      	orrs	r3, r2
    5d60:	b2db      	uxtb	r3, r3
    5d62:	b2d9      	uxtb	r1, r3
    5d64:	f107 0210 	add.w	r2, r7, #16
    5d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d6a:	4413      	add	r3, r2
    5d6c:	460a      	mov	r2, r1
    5d6e:	701a      	strb	r2, [r3, #0]
			byte >>= 1;
    5d70:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5d74:	085b      	lsrs	r3, r3, #1
    5d76:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    5d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5d7c:	3301      	adds	r3, #1
    5d7e:	663b      	str	r3, [r7, #96]	; 0x60
    5d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5d82:	2b07      	cmp	r3, #7
    5d84:	d9db      	bls.n	5d3e <le_transmit+0x32>
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5d86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d88:	3301      	adds	r3, #1
    5d8a:	667b      	str	r3, [r7, #100]	; 0x64
    5d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d8e:	2b03      	cmp	r3, #3
    5d90:	d9c6      	bls.n	5d20 <le_transmit+0x14>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
    5d92:	4b93      	ldr	r3, [pc, #588]	; (5fe0 <le_transmit+0x2d4>)
    5d94:	881b      	ldrh	r3, [r3, #0]
    5d96:	b29b      	uxth	r3, r3
    5d98:	b2db      	uxtb	r3, r3
    5d9a:	3b62      	subs	r3, #98	; 0x62
    5d9c:	b2db      	uxtb	r3, r3
    5d9e:	4618      	mov	r0, r3
    5da0:	f002 fb48 	bl	8434 <btle_channel_index>
    5da4:	4603      	mov	r3, r0
    5da6:	461a      	mov	r2, r3
    5da8:	4b8e      	ldr	r3, [pc, #568]	; (5fe4 <le_transmit+0x2d8>)
    5daa:	5c9b      	ldrb	r3, [r3, r2]
    5dac:	65bb      	str	r3, [r7, #88]	; 0x58
	for (i = 0; i < len; ++i) {
    5dae:	2300      	movs	r3, #0
    5db0:	667b      	str	r3, [r7, #100]	; 0x64
    5db2:	e050      	b.n	5e56 <le_transmit+0x14a>
		byte = data[i];
    5db4:	687a      	ldr	r2, [r7, #4]
    5db6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5db8:	4413      	add	r3, r2
    5dba:	781b      	ldrb	r3, [r3, #0]
    5dbc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		txbuf[i+4] = 0;
    5dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5dc2:	3304      	adds	r3, #4
    5dc4:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5dc8:	4413      	add	r3, r2
    5dca:	2200      	movs	r2, #0
    5dcc:	f803 2c58 	strb.w	r2, [r3, #-88]
		for (j = 0; j < 8; ++j) {
    5dd0:	2300      	movs	r3, #0
    5dd2:	663b      	str	r3, [r7, #96]	; 0x60
    5dd4:	e039      	b.n	5e4a <le_transmit+0x13e>
			bit = (byte & 1) ^ whitening[idx];
    5dd6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5dda:	f003 0301 	and.w	r3, r3, #1
    5dde:	4982      	ldr	r1, [pc, #520]	; (5fe8 <le_transmit+0x2dc>)
    5de0:	6dba      	ldr	r2, [r7, #88]	; 0x58
    5de2:	440a      	add	r2, r1
    5de4:	7812      	ldrb	r2, [r2, #0]
    5de6:	4053      	eors	r3, r2
    5de8:	657b      	str	r3, [r7, #84]	; 0x54
			idx = (idx + 1) % sizeof(whitening);
    5dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5dec:	3301      	adds	r3, #1
    5dee:	4619      	mov	r1, r3
    5df0:	4b7e      	ldr	r3, [pc, #504]	; (5fec <le_transmit+0x2e0>)
    5df2:	fba1 2303 	umull	r2, r3, r1, r3
    5df6:	1ac8      	subs	r0, r1, r3
    5df8:	0840      	lsrs	r0, r0, #1
    5dfa:	4403      	add	r3, r0
    5dfc:	099a      	lsrs	r2, r3, #6
    5dfe:	4613      	mov	r3, r2
    5e00:	01db      	lsls	r3, r3, #7
    5e02:	1a9b      	subs	r3, r3, r2
    5e04:	1aca      	subs	r2, r1, r3
    5e06:	65ba      	str	r2, [r7, #88]	; 0x58
			byte >>= 1;
    5e08:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5e0c:	085b      	lsrs	r3, r3, #1
    5e0e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			txbuf[i+4] |= bit << (7 - j);
    5e12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e14:	3304      	adds	r3, #4
    5e16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    5e18:	3204      	adds	r2, #4
    5e1a:	f107 0168 	add.w	r1, r7, #104	; 0x68
    5e1e:	440a      	add	r2, r1
    5e20:	f812 2c58 	ldrb.w	r2, [r2, #-88]
    5e24:	b2d1      	uxtb	r1, r2
    5e26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5e28:	f1c2 0207 	rsb	r2, r2, #7
    5e2c:	4610      	mov	r0, r2
    5e2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5e30:	4082      	lsls	r2, r0
    5e32:	b2d2      	uxtb	r2, r2
    5e34:	430a      	orrs	r2, r1
    5e36:	b2d2      	uxtb	r2, r2
    5e38:	b2d2      	uxtb	r2, r2
    5e3a:	f107 0168 	add.w	r1, r7, #104	; 0x68
    5e3e:	440b      	add	r3, r1
    5e40:	f803 2c58 	strb.w	r2, [r3, #-88]
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    5e44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5e46:	3301      	adds	r3, #1
    5e48:	663b      	str	r3, [r7, #96]	; 0x60
    5e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5e4c:	2b07      	cmp	r3, #7
    5e4e:	d9c2      	bls.n	5dd6 <le_transmit+0xca>
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
    5e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e52:	3301      	adds	r3, #1
    5e54:	667b      	str	r3, [r7, #100]	; 0x64
    5e56:	7afa      	ldrb	r2, [r7, #11]
    5e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e5a:	429a      	cmp	r2, r3
    5e5c:	d8aa      	bhi.n	5db4 <le_transmit+0xa8>
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    5e5e:	7afb      	ldrb	r3, [r7, #11]
    5e60:	3304      	adds	r3, #4
    5e62:	72fb      	strb	r3, [r7, #11]

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    5e64:	200d      	movs	r0, #13
    5e66:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5e6a:	f003 fedb 	bl	9c24 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5e6e:	2012      	movs	r0, #18
    5e70:	f642 3122 	movw	r1, #11042	; 0x2b22
    5e74:	f003 fed6 	bl	9c24 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5e78:	2014      	movs	r0, #20
    5e7a:	f241 314b 	movw	r1, #4939	; 0x134b
    5e7e:	f003 fed1 	bl	9c24 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5e82:	2020      	movs	r0, #32
    5e84:	f640 4101 	movw	r1, #3073	; 0xc01
    5e88:	f003 fecc 	bl	9c24 <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   channel);
    5e8c:	4b54      	ldr	r3, [pc, #336]	; (5fe0 <le_transmit+0x2d4>)
    5e8e:	881b      	ldrh	r3, [r3, #0]
    5e90:	b29b      	uxth	r3, r3
    5e92:	2002      	movs	r0, #2
    5e94:	4619      	mov	r1, r3
    5e96:	f003 fec5 	bl	9c24 <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5e9a:	2005      	movs	r0, #5
    5e9c:	210b      	movs	r1, #11
    5e9e:	f003 fec1 	bl	9c24 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5ea2:	2003      	movs	r0, #3
    5ea4:	2140      	movs	r1, #64	; 0x40
    5ea6:	f003 febd 	bl	9c24 <cc2400_set>
	cc2400_set(INT,     0x0014);	// FIFO_THRESHOLD: 20 bytes
    5eaa:	2023      	movs	r0, #35	; 0x23
    5eac:	2114      	movs	r1, #20
    5eae:	f003 feb9 	bl	9c24 <cc2400_set>

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    5eb2:	68fb      	ldr	r3, [r7, #12]
    5eb4:	f003 0301 	and.w	r3, r3, #1
    5eb8:	2b00      	cmp	r3, #0
    5eba:	d005      	beq.n	5ec8 <le_transmit+0x1bc>
		cc2400_set(SYNCH,   0xaaaa);
    5ebc:	202d      	movs	r0, #45	; 0x2d
    5ebe:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
    5ec2:	f003 feaf 	bl	9c24 <cc2400_set>
    5ec6:	e004      	b.n	5ed2 <le_transmit+0x1c6>
	else
		cc2400_set(SYNCH,   0x5555);
    5ec8:	202d      	movs	r0, #45	; 0x2d
    5eca:	f245 5155 	movw	r1, #21845	; 0x5555
    5ece:	f003 fea9 	bl	9c24 <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5ed2:	2008      	movs	r0, #8
    5ed4:	f003 fe90 	bl	9bf8 <cc2400_get>
    5ed8:	4603      	mov	r3, r0
    5eda:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5ede:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    5ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5ee6:	b29b      	uxth	r3, r3
    5ee8:	f443 439c 	orr.w	r3, r3, #19968	; 0x4e00
    5eec:	b29b      	uxth	r3, r3
    5eee:	b29b      	uxth	r3, r3
    5ef0:	2008      	movs	r0, #8
    5ef2:	4619      	mov	r1, r3
    5ef4:	f003 fe96 	bl	9c24 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5ef8:	bf00      	nop
    5efa:	f003 ff4b 	bl	9d94 <cc2400_status>
    5efe:	4603      	mov	r3, r0
    5f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5f04:	2b00      	cmp	r3, #0
    5f06:	d0f8      	beq.n	5efa <le_transmit+0x1ee>
	cc2400_strobe(SFSON);
    5f08:	2061      	movs	r0, #97	; 0x61
    5f0a:	f003 ff4d 	bl	9da8 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5f0e:	bf00      	nop
    5f10:	f003 ff40 	bl	9d94 <cc2400_status>
    5f14:	4603      	mov	r3, r0
    5f16:	f003 0304 	and.w	r3, r3, #4
    5f1a:	2b00      	cmp	r3, #0
    5f1c:	d0f8      	beq.n	5f10 <le_transmit+0x204>
	TXLED_SET;
    5f1e:	4b34      	ldr	r3, [pc, #208]	; (5ff0 <le_transmit+0x2e4>)
    5f20:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f24:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5f26:	4b33      	ldr	r3, [pc, #204]	; (5ff4 <le_transmit+0x2e8>)
    5f28:	2280      	movs	r2, #128	; 0x80
    5f2a:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5f2c:	bf00      	nop
    5f2e:	200e      	movs	r0, #14
    5f30:	f003 fe62 	bl	9bf8 <cc2400_get>
    5f34:	4603      	mov	r3, r0
    5f36:	f003 031f 	and.w	r3, r3, #31
    5f3a:	2b0f      	cmp	r3, #15
    5f3c:	d1f7      	bne.n	5f2e <le_transmit+0x222>
	cc2400_strobe(STX);
    5f3e:	2063      	movs	r0, #99	; 0x63
    5f40:	f003 ff32 	bl	9da8 <cc2400_strobe>

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    5f44:	2300      	movs	r3, #0
    5f46:	667b      	str	r3, [r7, #100]	; 0x64
    5f48:	e021      	b.n	5f8e <le_transmit+0x282>
		while (GIO6) ; // wait for the FIFO to drain (FIFO_FULL false)
    5f4a:	bf00      	nop
    5f4c:	4b2a      	ldr	r3, [pc, #168]	; (5ff8 <le_transmit+0x2ec>)
    5f4e:	681b      	ldr	r3, [r3, #0]
    5f50:	f003 0304 	and.w	r3, r3, #4
    5f54:	2b00      	cmp	r3, #0
    5f56:	d1f9      	bne.n	5f4c <le_transmit+0x240>
		tx_len = len - i;
    5f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5f5a:	b2db      	uxtb	r3, r3
    5f5c:	7afa      	ldrb	r2, [r7, #11]
    5f5e:	1ad3      	subs	r3, r2, r3
    5f60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (tx_len > 16)
    5f64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    5f68:	2b10      	cmp	r3, #16
    5f6a:	d902      	bls.n	5f72 <le_transmit+0x266>
			tx_len = 16;
    5f6c:	2310      	movs	r3, #16
    5f6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
    5f72:	f107 0210 	add.w	r2, r7, #16
    5f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5f78:	4413      	add	r3, r2
    5f7a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
    5f7e:	2070      	movs	r0, #112	; 0x70
    5f80:	4611      	mov	r1, r2
    5f82:	461a      	mov	r2, r3
    5f84:	f003 fe90 	bl	9ca8 <cc2400_spi_buf>
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    5f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5f8a:	3310      	adds	r3, #16
    5f8c:	667b      	str	r3, [r7, #100]	; 0x64
    5f8e:	7afa      	ldrb	r2, [r7, #11]
    5f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5f92:	429a      	cmp	r2, r3
    5f94:	d8d9      	bhi.n	5f4a <le_transmit+0x23e>
		if (tx_len > 16)
			tx_len = 16;
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
	}

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5f96:	bf00      	nop
    5f98:	200e      	movs	r0, #14
    5f9a:	f003 fe2d 	bl	9bf8 <cc2400_get>
    5f9e:	4603      	mov	r3, r0
    5fa0:	f003 031f 	and.w	r3, r3, #31
    5fa4:	2b0f      	cmp	r3, #15
    5fa6:	d1f7      	bne.n	5f98 <le_transmit+0x28c>
	TXLED_CLR;
    5fa8:	4b14      	ldr	r3, [pc, #80]	; (5ffc <le_transmit+0x2f0>)
    5faa:	f44f 7280 	mov.w	r2, #256	; 0x100
    5fae:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    5fb0:	2064      	movs	r0, #100	; 0x64
    5fb2:	f003 fef9 	bl	9da8 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    5fb6:	bf00      	nop
    5fb8:	f003 feec 	bl	9d94 <cc2400_status>
    5fbc:	4603      	mov	r3, r0
    5fbe:	f003 0304 	and.w	r3, r3, #4
    5fc2:	2b00      	cmp	r3, #0
    5fc4:	d1f8      	bne.n	5fb8 <le_transmit+0x2ac>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5fc6:	4b0e      	ldr	r3, [pc, #56]	; (6000 <le_transmit+0x2f4>)
    5fc8:	2280      	movs	r2, #128	; 0x80
    5fca:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    5fcc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    5fd0:	2008      	movs	r0, #8
    5fd2:	4619      	mov	r1, r3
    5fd4:	f003 fe26 	bl	9c24 <cc2400_set>
}
    5fd8:	3768      	adds	r7, #104	; 0x68
    5fda:	46bd      	mov	sp, r7
    5fdc:	bd80      	pop	{r7, pc}
    5fde:	bf00      	nop
    5fe0:	1000049c 	.word	0x1000049c
    5fe4:	0000b9dc 	.word	0x0000b9dc
    5fe8:	0000b95c 	.word	0x0000b95c
    5fec:	02040811 	.word	0x02040811
    5ff0:	2009c038 	.word	0x2009c038
    5ff4:	2009c058 	.word	0x2009c058
    5ff8:	2009c054 	.word	0x2009c054
    5ffc:	2009c03c 	.word	0x2009c03c
    6000:	2009c05c 	.word	0x2009c05c

00006004 <le_jam>:

void le_jam(void) {
    6004:	b580      	push	{r7, lr}
    6006:	af00      	add	r7, sp, #0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    6008:	200d      	movs	r0, #13
    600a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    600e:	f003 fe09 	bl	9c24 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    6012:	2012      	movs	r0, #18
    6014:	f642 3122 	movw	r1, #11042	; 0x2b22
    6018:	f003 fe04 	bl	9c24 <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    601c:	2014      	movs	r0, #20
    601e:	f242 314b 	movw	r1, #9035	; 0x234b
    6022:	f003 fdff 	bl	9c24 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    6026:	2020      	movs	r0, #32
    6028:	f640 4101 	movw	r1, #3073	; 0xc01
    602c:	f003 fdfa 	bl	9c24 <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    6030:	2005      	movs	r0, #5
    6032:	210b      	movs	r1, #11
    6034:	f003 fdf6 	bl	9c24 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    6038:	2003      	movs	r0, #3
    603a:	2140      	movs	r1, #64	; 0x40
    603c:	f003 fdf2 	bl	9c24 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6040:	bf00      	nop
    6042:	f003 fea7 	bl	9d94 <cc2400_status>
    6046:	4603      	mov	r3, r0
    6048:	f003 0340 	and.w	r3, r3, #64	; 0x40
    604c:	2b00      	cmp	r3, #0
    604e:	d0f8      	beq.n	6042 <le_jam+0x3e>
	cc2400_strobe(SFSON);
    6050:	2061      	movs	r0, #97	; 0x61
    6052:	f003 fea9 	bl	9da8 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6056:	bf00      	nop
    6058:	f003 fe9c 	bl	9d94 <cc2400_status>
    605c:	4603      	mov	r3, r0
    605e:	f003 0304 	and.w	r3, r3, #4
    6062:	2b00      	cmp	r3, #0
    6064:	d0f8      	beq.n	6058 <le_jam+0x54>
	TXLED_SET;
    6066:	4b0a      	ldr	r3, [pc, #40]	; (6090 <le_jam+0x8c>)
    6068:	f44f 7280 	mov.w	r2, #256	; 0x100
    606c:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    606e:	4b09      	ldr	r3, [pc, #36]	; (6094 <le_jam+0x90>)
    6070:	2280      	movs	r2, #128	; 0x80
    6072:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6074:	bf00      	nop
    6076:	200e      	movs	r0, #14
    6078:	f003 fdbe 	bl	9bf8 <cc2400_get>
    607c:	4603      	mov	r3, r0
    607e:	f003 031f 	and.w	r3, r3, #31
    6082:	2b0f      	cmp	r3, #15
    6084:	d1f7      	bne.n	6076 <le_jam+0x72>
	cc2400_strobe(STX);
    6086:	2063      	movs	r0, #99	; 0x63
    6088:	f003 fe8e 	bl	9da8 <cc2400_strobe>
#endif
}
    608c:	bd80      	pop	{r7, pc}
    608e:	bf00      	nop
    6090:	2009c038 	.word	0x2009c038
    6094:	2009c058 	.word	0x2009c058

00006098 <hop>:

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    6098:	b580      	push	{r7, lr}
    609a:	af00      	add	r7, sp, #0
	do_hop = 0;
    609c:	4b41      	ldr	r3, [pc, #260]	; (61a4 <hop+0x10c>)
    609e:	2200      	movs	r2, #0
    60a0:	701a      	strb	r2, [r3, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    60a2:	4b41      	ldr	r3, [pc, #260]	; (61a8 <hop+0x110>)
    60a4:	781b      	ldrb	r3, [r3, #0]
    60a6:	2b00      	cmp	r3, #0
    60a8:	d10b      	bne.n	60c2 <hop+0x2a>
		if (cc2400_get(FSDIV) == (channel - 1))
    60aa:	2002      	movs	r0, #2
    60ac:	f003 fda4 	bl	9bf8 <cc2400_get>
    60b0:	4603      	mov	r3, r0
    60b2:	461a      	mov	r2, r3
    60b4:	4b3d      	ldr	r3, [pc, #244]	; (61ac <hop+0x114>)
    60b6:	881b      	ldrh	r3, [r3, #0]
    60b8:	b29b      	uxth	r3, r3
    60ba:	3b01      	subs	r3, #1
    60bc:	429a      	cmp	r2, r3
    60be:	d147      	bne.n	6150 <hop+0xb8>
			return;
    60c0:	e06e      	b.n	61a0 <hop+0x108>
	}

	// Slow sweep (100 hops/sec)
	else if (hop_mode == HOP_SWEEP) {
    60c2:	4b39      	ldr	r3, [pc, #228]	; (61a8 <hop+0x110>)
    60c4:	781b      	ldrb	r3, [r3, #0]
    60c6:	2b01      	cmp	r3, #1
    60c8:	d114      	bne.n	60f4 <hop+0x5c>
		channel += 32;
    60ca:	4b38      	ldr	r3, [pc, #224]	; (61ac <hop+0x114>)
    60cc:	881b      	ldrh	r3, [r3, #0]
    60ce:	b29b      	uxth	r3, r3
    60d0:	3320      	adds	r3, #32
    60d2:	b29a      	uxth	r2, r3
    60d4:	4b35      	ldr	r3, [pc, #212]	; (61ac <hop+0x114>)
    60d6:	801a      	strh	r2, [r3, #0]
		if (channel > 2480)
    60d8:	4b34      	ldr	r3, [pc, #208]	; (61ac <hop+0x114>)
    60da:	881b      	ldrh	r3, [r3, #0]
    60dc:	b29b      	uxth	r3, r3
    60de:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
    60e2:	d935      	bls.n	6150 <hop+0xb8>
			channel -= 79;
    60e4:	4b31      	ldr	r3, [pc, #196]	; (61ac <hop+0x114>)
    60e6:	881b      	ldrh	r3, [r3, #0]
    60e8:	b29b      	uxth	r3, r3
    60ea:	3b4f      	subs	r3, #79	; 0x4f
    60ec:	b29a      	uxth	r2, r3
    60ee:	4b2f      	ldr	r3, [pc, #188]	; (61ac <hop+0x114>)
    60f0:	801a      	strh	r2, [r3, #0]
    60f2:	e02d      	b.n	6150 <hop+0xb8>
	}

	else if (hop_mode == HOP_BLUETOOTH) {
    60f4:	4b2c      	ldr	r3, [pc, #176]	; (61a8 <hop+0x110>)
    60f6:	781b      	ldrb	r3, [r3, #0]
    60f8:	2b02      	cmp	r3, #2
    60fa:	d10d      	bne.n	6118 <hop+0x80>
		TXLED_SET;
    60fc:	4b2c      	ldr	r3, [pc, #176]	; (61b0 <hop+0x118>)
    60fe:	f44f 7280 	mov.w	r2, #256	; 0x100
    6102:	601a      	str	r2, [r3, #0]
		channel = next_hop(clkn);
    6104:	4b2b      	ldr	r3, [pc, #172]	; (61b4 <hop+0x11c>)
    6106:	681b      	ldr	r3, [r3, #0]
    6108:	4618      	mov	r0, r3
    610a:	f002 f8a5 	bl	8258 <next_hop>
    610e:	4603      	mov	r3, r0
    6110:	461a      	mov	r2, r3
    6112:	4b26      	ldr	r3, [pc, #152]	; (61ac <hop+0x114>)
    6114:	801a      	strh	r2, [r3, #0]
    6116:	e01b      	b.n	6150 <hop+0xb8>
	}

	else if (hop_mode == HOP_BTLE) {
    6118:	4b23      	ldr	r3, [pc, #140]	; (61a8 <hop+0x110>)
    611a:	781b      	ldrb	r3, [r3, #0]
    611c:	2b03      	cmp	r3, #3
    611e:	d10b      	bne.n	6138 <hop+0xa0>
		TXLED_SET;
    6120:	4b23      	ldr	r3, [pc, #140]	; (61b0 <hop+0x118>)
    6122:	f44f 7280 	mov.w	r2, #256	; 0x100
    6126:	601a      	str	r2, [r3, #0]
		channel = btle_next_hop(&le);
    6128:	4823      	ldr	r0, [pc, #140]	; (61b8 <hop+0x120>)
    612a:	f002 f95b 	bl	83e4 <btle_next_hop>
    612e:	4603      	mov	r3, r0
    6130:	461a      	mov	r2, r3
    6132:	4b1e      	ldr	r3, [pc, #120]	; (61ac <hop+0x114>)
    6134:	801a      	strh	r2, [r3, #0]
    6136:	e00b      	b.n	6150 <hop+0xb8>
	}

	else if (hop_mode == HOP_DIRECT) {
    6138:	4b1b      	ldr	r3, [pc, #108]	; (61a8 <hop+0x110>)
    613a:	781b      	ldrb	r3, [r3, #0]
    613c:	2b04      	cmp	r3, #4
    613e:	d107      	bne.n	6150 <hop+0xb8>
		TXLED_SET;
    6140:	4b1b      	ldr	r3, [pc, #108]	; (61b0 <hop+0x118>)
    6142:	f44f 7280 	mov.w	r2, #256	; 0x100
    6146:	601a      	str	r2, [r3, #0]
		channel = hop_direct_channel;
    6148:	4b1c      	ldr	r3, [pc, #112]	; (61bc <hop+0x124>)
    614a:	881a      	ldrh	r2, [r3, #0]
    614c:	4b17      	ldr	r3, [pc, #92]	; (61ac <hop+0x114>)
    614e:	801a      	strh	r2, [r3, #0]
	}

        /* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    6150:	2064      	movs	r0, #100	; 0x64
    6152:	f003 fe29 	bl	9da8 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    6156:	bf00      	nop
    6158:	f003 fe1c 	bl	9d94 <cc2400_status>
    615c:	4603      	mov	r3, r0
    615e:	f003 0304 	and.w	r3, r3, #4
    6162:	2b00      	cmp	r3, #0
    6164:	d1f8      	bne.n	6158 <hop+0xc0>

	/* Retune */
	cc2400_set(FSDIV, channel - 1);
    6166:	4b11      	ldr	r3, [pc, #68]	; (61ac <hop+0x114>)
    6168:	881b      	ldrh	r3, [r3, #0]
    616a:	b29b      	uxth	r3, r3
    616c:	3b01      	subs	r3, #1
    616e:	b29b      	uxth	r3, r3
    6170:	2002      	movs	r0, #2
    6172:	4619      	mov	r1, r3
    6174:	f003 fd56 	bl	9c24 <cc2400_set>
	
	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    6178:	4b0b      	ldr	r3, [pc, #44]	; (61a8 <hop+0x110>)
    617a:	781b      	ldrb	r3, [r3, #0]
    617c:	2b00      	cmp	r3, #0
    617e:	d001      	beq.n	6184 <hop+0xec>
		cs_threshold_calc_and_set();
    6180:	f7fe fb06 	bl	4790 <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    6184:	2061      	movs	r0, #97	; 0x61
    6186:	f003 fe0f 	bl	9da8 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    618a:	bf00      	nop
    618c:	f003 fe02 	bl	9d94 <cc2400_status>
    6190:	4603      	mov	r3, r0
    6192:	f003 0304 	and.w	r3, r3, #4
    6196:	2b00      	cmp	r3, #0
    6198:	d0f8      	beq.n	618c <hop+0xf4>
	
	/* RX mode */
	cc2400_strobe(SRX);
    619a:	2062      	movs	r0, #98	; 0x62
    619c:	f003 fe04 	bl	9da8 <cc2400_strobe>

}
    61a0:	bd80      	pop	{r7, pc}
    61a2:	bf00      	nop
    61a4:	1000097d 	.word	0x1000097d
    61a8:	1000097c 	.word	0x1000097c
    61ac:	1000049c 	.word	0x1000049c
    61b0:	2009c038 	.word	0x2009c038
    61b4:	10000be4 	.word	0x10000be4
    61b8:	10000458 	.word	0x10000458
    61bc:	10000980 	.word	0x10000980

000061c0 <bt_stream_rx>:

/* Bluetooth packet monitoring */
// wpson
void bt_stream_rx()
{
    61c0:	b590      	push	{r4, r7, lr}
    61c2:	b0a3      	sub	sp, #140	; 0x8c
    61c4:	af00      	add	r7, sp, #0
//	TXLED_SET;
	RXLED_CLR;
    61c6:	4bc0      	ldr	r3, [pc, #768]	; (64c8 <bt_stream_rx+0x308>)
    61c8:	2210      	movs	r2, #16
    61ca:	601a      	str	r2, [r3, #0]
	int i;
	
	u8 rssi_buf[DMA_SIZE];
	queue_init();
    61cc:	f002 fab2 	bl	8734 <queue_init>
	dio_ssp_init();
    61d0:	f003 fc56 	bl	9a80 <dio_ssp_init>
	dma_init_le();
    61d4:	f7ff faa4 	bl	5720 <dma_init_le>
	dio_ssp_start();
    61d8:	f7ff fc0c 	bl	59f4 <dio_ssp_start>
	
	cc2400_set(MANAND, 0x7fff);
    61dc:	200d      	movs	r0, #13
    61de:	f647 71ff 	movw	r1, #32767	; 0x7fff
    61e2:	f003 fd1f 	bl	9c24 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    61e6:	2012      	movs	r0, #18
    61e8:	f642 3122 	movw	r1, #11042	; 0x2b22
    61ec:	f003 fd1a 	bl	9c24 <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    61f0:	2014      	movs	r0, #20
    61f2:	f241 214b 	movw	r1, #4683	; 0x124b
    61f6:	f003 fd15 	bl	9c24 <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    61fa:	2020      	movs	r0, #32
    61fc:	f240 5161 	movw	r1, #1377	; 0x561
    6200:	f003 fd10 	bl	9c24 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    6204:	2003      	movs	r0, #3
    6206:	2140      	movs	r1, #64	; 0x40
    6208:	f003 fd0c 	bl	9c24 <cc2400_set>

//	cc2400_set(SYNCH, 0xf9ae);
//	cc2400_set(SYNCL, 0x1584);
	
	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
    620c:	48af      	ldr	r0, [pc, #700]	; (64cc <bt_stream_rx+0x30c>)
    620e:	f003 fb37 	bl	9880 <rbit>
    6212:	4603      	mov	r3, r0
    6214:	b29b      	uxth	r3, r3
    6216:	202c      	movs	r0, #44	; 0x2c
    6218:	4619      	mov	r1, r3
    621a:	f003 fd03 	bl	9c24 <cc2400_set>
	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
    621e:	48ab      	ldr	r0, [pc, #684]	; (64cc <bt_stream_rx+0x30c>)
    6220:	f003 fb2e 	bl	9880 <rbit>
    6224:	4603      	mov	r3, r0
    6226:	0c1b      	lsrs	r3, r3, #16
    6228:	b29b      	uxth	r3, r3
    622a:	202d      	movs	r0, #45	; 0x2d
    622c:	4619      	mov	r1, r3
    622e:	f003 fcf9 	bl	9c24 <cc2400_set>
	
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6232:	4ba7      	ldr	r3, [pc, #668]	; (64d0 <bt_stream_rx+0x310>)
    6234:	2280      	movs	r2, #128	; 0x80
    6236:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif

	while (!(cc2400_status() & XOSC16M_STABLE));
    6238:	bf00      	nop
    623a:	f003 fdab 	bl	9d94 <cc2400_status>
    623e:	4603      	mov	r3, r0
    6240:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6244:	2b00      	cmp	r3, #0
    6246:	d0f8      	beq.n	623a <bt_stream_rx+0x7a>
	while ((cc2400_status() & FS_LOCK));
    6248:	bf00      	nop
    624a:	f003 fda3 	bl	9d94 <cc2400_status>
    624e:	4603      	mov	r3, r0
    6250:	f003 0304 	and.w	r3, r3, #4
    6254:	2b00      	cmp	r3, #0
    6256:	d1f8      	bne.n	624a <bt_stream_rx+0x8a>

	cc2400_set(FSDIV, channel - 1);
    6258:	4b9e      	ldr	r3, [pc, #632]	; (64d4 <bt_stream_rx+0x314>)
    625a:	881b      	ldrh	r3, [r3, #0]
    625c:	b29b      	uxth	r3, r3
    625e:	3b01      	subs	r3, #1
    6260:	b29b      	uxth	r3, r3
    6262:	2002      	movs	r0, #2
    6264:	4619      	mov	r1, r3
    6266:	f003 fcdd 	bl	9c24 <cc2400_set>
	cc2400_strobe(SFSON);
    626a:	2061      	movs	r0, #97	; 0x61
    626c:	f003 fd9c 	bl	9da8 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6270:	bf00      	nop
    6272:	f003 fd8f 	bl	9d94 <cc2400_status>
    6276:	4603      	mov	r3, r0
    6278:	f003 0304 	and.w	r3, r3, #4
    627c:	2b00      	cmp	r3, #0
    627e:	d0f8      	beq.n	6272 <bt_stream_rx+0xb2>
	cc2400_strobe(SRX);
    6280:	2062      	movs	r0, #98	; 0x62
    6282:	f003 fd91 	bl	9da8 <cc2400_strobe>
	
//	cc2400_rx();
	while (requested_mode == MODE_RX_SYMBOLS) {
    6286:	e156      	b.n	6536 <bt_stream_rx+0x376>
		
		while (!(cc2400_status () & SYNC_RECEIVED));
    6288:	bf00      	nop
    628a:	f003 fd83 	bl	9d94 <cc2400_status>
    628e:	4603      	mov	r3, r0
    6290:	f003 0310 	and.w	r3, r3, #16
    6294:	2b00      	cmp	r3, #0
    6296:	d0f8      	beq.n	628a <bt_stream_rx+0xca>
                else
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
    6298:	4b8f      	ldr	r3, [pc, #572]	; (64d8 <bt_stream_rx+0x318>)
    629a:	2200      	movs	r2, #0
    629c:	601a      	str	r2, [r3, #0]
		rssi_count = 5;
    629e:	4b8f      	ldr	r3, [pc, #572]	; (64dc <bt_stream_rx+0x31c>)
    62a0:	2205      	movs	r2, #5
    62a2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < rssi_count; i++)
    62a4:	2300      	movs	r3, #0
    62a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    62aa:	e011      	b.n	62d0 <bt_stream_rx+0x110>
		{
			rssi_sum += (int8_t)(cc2400_get(RSSI) >> 8);
    62ac:	2006      	movs	r0, #6
    62ae:	f003 fca3 	bl	9bf8 <cc2400_get>
    62b2:	4603      	mov	r3, r0
    62b4:	0a1b      	lsrs	r3, r3, #8
    62b6:	b29b      	uxth	r3, r3
    62b8:	b2db      	uxtb	r3, r3
    62ba:	b25a      	sxtb	r2, r3
    62bc:	4b86      	ldr	r3, [pc, #536]	; (64d8 <bt_stream_rx+0x318>)
    62be:	681b      	ldr	r3, [r3, #0]
    62c0:	4413      	add	r3, r2
    62c2:	4a85      	ldr	r2, [pc, #532]	; (64d8 <bt_stream_rx+0x318>)
    62c4:	6013      	str	r3, [r2, #0]
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
		rssi_count = 5;
		for (i = 0; i < rssi_count; i++)
    62c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    62ca:	3301      	adds	r3, #1
    62cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    62d0:	4b82      	ldr	r3, [pc, #520]	; (64dc <bt_stream_rx+0x31c>)
    62d2:	781b      	ldrb	r3, [r3, #0]
    62d4:	461a      	mov	r2, r3
    62d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    62da:	429a      	cmp	r2, r3
    62dc:	dce6      	bgt.n	62ac <bt_stream_rx+0xec>
		{
			rssi_sum += (int8_t)(cc2400_get(RSSI) >> 8);
		}
	
		while (!rx_tc);
    62de:	bf00      	nop
    62e0:	4b7f      	ldr	r3, [pc, #508]	; (64e0 <bt_stream_rx+0x320>)
    62e2:	681b      	ldr	r3, [r3, #0]
    62e4:	2b00      	cmp	r3, #0
    62e6:	d0fb      	beq.n	62e0 <bt_stream_rx+0x120>
	
		RXLED_SET;
    62e8:	4b7e      	ldr	r3, [pc, #504]	; (64e4 <bt_stream_rx+0x324>)
    62ea:	2210      	movs	r2, #16
    62ec:	601a      	str	r2, [r3, #0]
		if (rx_err) {
    62ee:	4b7e      	ldr	r3, [pc, #504]	; (64e8 <bt_stream_rx+0x328>)
    62f0:	681b      	ldr	r3, [r3, #0]
    62f2:	2b00      	cmp	r3, #0
    62f4:	d007      	beq.n	6306 <bt_stream_rx+0x146>
		status |= DMA_ERROR;
    62f6:	4b7d      	ldr	r3, [pc, #500]	; (64ec <bt_stream_rx+0x32c>)
    62f8:	781b      	ldrb	r3, [r3, #0]
    62fa:	b2db      	uxtb	r3, r3
    62fc:	f043 0302 	orr.w	r3, r3, #2
    6300:	b2da      	uxtb	r2, r3
    6302:	4b7a      	ldr	r3, [pc, #488]	; (64ec <bt_stream_rx+0x32c>)
    6304:	701a      	strb	r2, [r3, #0]
		}	
		if (rx_tc > 1)
    6306:	4b76      	ldr	r3, [pc, #472]	; (64e0 <bt_stream_rx+0x320>)
    6308:	681b      	ldr	r3, [r3, #0]
    630a:	2b01      	cmp	r3, #1
    630c:	d907      	bls.n	631e <bt_stream_rx+0x15e>
			status |= DMA_OVERFLOW;
    630e:	4b77      	ldr	r3, [pc, #476]	; (64ec <bt_stream_rx+0x32c>)
    6310:	781b      	ldrb	r3, [r3, #0]
    6312:	b2db      	uxtb	r3, r3
    6314:	f043 0301 	orr.w	r3, r3, #1
    6318:	b2da      	uxtb	r2, r3
    631a:	4b74      	ldr	r3, [pc, #464]	; (64ec <bt_stream_rx+0x32c>)
    631c:	701a      	strb	r2, [r3, #0]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    631e:	1d3b      	adds	r3, r7, #4
    6320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		packet[0] = le.access_address;
    6324:	4b72      	ldr	r3, [pc, #456]	; (64f0 <bt_stream_rx+0x330>)
    6326:	681b      	ldr	r3, [r3, #0]
    6328:	607b      	str	r3, [r7, #4]

                while (DMACC0Config & DMACCxConfig_E && rx_err == 0);
    632a:	bf00      	nop
    632c:	4b71      	ldr	r3, [pc, #452]	; (64f4 <bt_stream_rx+0x334>)
    632e:	681b      	ldr	r3, [r3, #0]
    6330:	f003 0301 	and.w	r3, r3, #1
    6334:	2b00      	cmp	r3, #0
    6336:	d003      	beq.n	6340 <bt_stream_rx+0x180>
    6338:	4b6b      	ldr	r3, [pc, #428]	; (64e8 <bt_stream_rx+0x328>)
    633a:	681b      	ldr	r3, [r3, #0]
    633c:	2b00      	cmp	r3, #0
    633e:	d0f5      	beq.n	632c <bt_stream_rx+0x16c>
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6340:	4a6d      	ldr	r2, [pc, #436]	; (64f8 <bt_stream_rx+0x338>)
    6342:	4b6d      	ldr	r3, [pc, #436]	; (64f8 <bt_stream_rx+0x338>)
    6344:	681b      	ldr	r3, [r3, #0]
    6346:	f023 0301 	bic.w	r3, r3, #1
    634a:	6013      	str	r3, [r2, #0]
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    634c:	4b61      	ldr	r3, [pc, #388]	; (64d4 <bt_stream_rx+0x314>)
    634e:	881b      	ldrh	r3, [r3, #0]
    6350:	b29b      	uxth	r3, r3
    6352:	b2db      	uxtb	r3, r3
    6354:	3b62      	subs	r3, #98	; 0x62
    6356:	b2db      	uxtb	r3, r3
    6358:	4618      	mov	r0, r3
    635a:	f002 f86b 	bl	8434 <btle_channel_index>
    635e:	4603      	mov	r3, r0
    6360:	461a      	mov	r2, r3
    6362:	4613      	mov	r3, r2
    6364:	005b      	lsls	r3, r3, #1
    6366:	4413      	add	r3, r2
    6368:	011b      	lsls	r3, r3, #4
    636a:	4a64      	ldr	r2, [pc, #400]	; (64fc <bt_stream_rx+0x33c>)
    636c:	4413      	add	r3, r2
    636e:	67fb      	str	r3, [r7, #124]	; 0x7c
		for (i = 0; i < 44; i += 4) {
    6370:	2300      	movs	r3, #0
    6372:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    6376:	e03c      	b.n	63f2 <bt_stream_rx+0x232>
			uint32_t v = rxbuf1[i+0] << 24
    6378:	4a61      	ldr	r2, [pc, #388]	; (6500 <bt_stream_rx+0x340>)
    637a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    637e:	4413      	add	r3, r2
    6380:	781b      	ldrb	r3, [r3, #0]
    6382:	061a      	lsls	r2, r3, #24
                                          | rxbuf1[i+1] << 16
    6384:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6388:	3301      	adds	r3, #1
    638a:	495d      	ldr	r1, [pc, #372]	; (6500 <bt_stream_rx+0x340>)
    638c:	5ccb      	ldrb	r3, [r1, r3]
    638e:	041b      	lsls	r3, r3, #16
    6390:	431a      	orrs	r2, r3
                                      | rxbuf1[i+2] << 8
    6392:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6396:	3302      	adds	r3, #2
    6398:	4959      	ldr	r1, [pc, #356]	; (6500 <bt_stream_rx+0x340>)
    639a:	5ccb      	ldrb	r3, [r1, r3]
    639c:	021b      	lsls	r3, r3, #8
    639e:	4313      	orrs	r3, r2
                                          | rxbuf1[i+3] << 0;
    63a0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    63a4:	3203      	adds	r2, #3
    63a6:	4956      	ldr	r1, [pc, #344]	; (6500 <bt_stream_rx+0x340>)
    63a8:	5c8a      	ldrb	r2, [r1, r2]
    63aa:	4313      	orrs	r3, r2
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    63ac:	67bb      	str	r3, [r7, #120]	; 0x78
                                          | rxbuf1[i+1] << 16
                                      | rxbuf1[i+2] << 8
                                          | rxbuf1[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
    63ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    63b2:	2b00      	cmp	r3, #0
    63b4:	da00      	bge.n	63b8 <bt_stream_rx+0x1f8>
    63b6:	3303      	adds	r3, #3
    63b8:	109b      	asrs	r3, r3, #2
    63ba:	1c5c      	adds	r4, r3, #1
    63bc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
    63be:	f003 fa5f 	bl	9880 <rbit>
    63c2:	4601      	mov	r1, r0
    63c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    63c8:	2b00      	cmp	r3, #0
    63ca:	da00      	bge.n	63ce <bt_stream_rx+0x20e>
    63cc:	3303      	adds	r3, #3
    63ce:	109b      	asrs	r3, r3, #2
    63d0:	009b      	lsls	r3, r3, #2
    63d2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    63d4:	4413      	add	r3, r2
    63d6:	681b      	ldr	r3, [r3, #0]
    63d8:	ea81 0203 	eor.w	r2, r1, r3
    63dc:	00a3      	lsls	r3, r4, #2
    63de:	f107 0188 	add.w	r1, r7, #136	; 0x88
    63e2:	440b      	add	r3, r1
    63e4:	f843 2c84 	str.w	r2, [r3, #-132]
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
    63e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    63ec:	3304      	adds	r3, #4
    63ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    63f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    63f6:	2b2b      	cmp	r3, #43	; 0x2b
    63f8:	ddbe      	ble.n	6378 <bt_stream_rx+0x1b8>
                                      | eddystone[i+2] << 8
                                          | eddystone[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
		}
*/
		unsigned len = (p[5] & 0x3f) + 2;
    63fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    63fe:	3305      	adds	r3, #5
    6400:	781b      	ldrb	r3, [r3, #0]
    6402:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6406:	3302      	adds	r3, #2
    6408:	677b      	str	r3, [r7, #116]	; 0x74
		
		if (len > 39)
    640a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    640c:	2b27      	cmp	r3, #39	; 0x27
    640e:	d900      	bls.n	6412 <bt_stream_rx+0x252>
			goto rx_flush;
    6410:	e034      	b.n	647c <bt_stream_rx+0x2bc>

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    6412:	4b37      	ldr	r3, [pc, #220]	; (64f0 <bt_stream_rx+0x330>)
    6414:	68d9      	ldr	r1, [r3, #12]
    6416:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    641a:	1d1a      	adds	r2, r3, #4
    641c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    641e:	4608      	mov	r0, r1
    6420:	4611      	mov	r1, r2
    6422:	461a      	mov	r2, r3
    6424:	f002 f90a 	bl	863c <btle_crcgen_lut>
    6428:	6738      	str	r0, [r7, #112]	; 0x70
		u32 wire_crc = (p[4+len+2] << 16)
    642a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    642c:	3306      	adds	r3, #6
    642e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    6432:	4413      	add	r3, r2
    6434:	781b      	ldrb	r3, [r3, #0]
    6436:	041a      	lsls	r2, r3, #16
                                                 | (p[4+len+1] << 8)
    6438:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    643a:	3305      	adds	r3, #5
    643c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    6440:	440b      	add	r3, r1
    6442:	781b      	ldrb	r3, [r3, #0]
    6444:	021b      	lsls	r3, r3, #8
    6446:	4313      	orrs	r3, r2
                                                 | (p[4+len+0] << 0);
    6448:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    644a:	3204      	adds	r2, #4
    644c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    6450:	440a      	add	r2, r1
    6452:	7812      	ldrb	r2, [r2, #0]
    6454:	4313      	orrs	r3, r2
		
		if (len > 39)
			goto rx_flush;

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
		u32 wire_crc = (p[4+len+2] << 16)
    6456:	66fb      	str	r3, [r7, #108]	; 0x6c
                                                 | (p[4+len+1] << 8)
                                                 | (p[4+len+0] << 0);
                if (calc_crc != wire_crc) // skip packets with a bad CRC
    6458:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    645a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    645c:	429a      	cmp	r2, r3
    645e:	d000      	beq.n	6462 <bt_stream_rx+0x2a2>
                        goto rx_flush;
    6460:	e00c      	b.n	647c <bt_stream_rx+0x2bc>


		enqueue (BR_PACKET, (uint8_t*)packet);
    6462:	1d3b      	adds	r3, r7, #4
    6464:	2000      	movs	r0, #0
    6466:	4619      	mov	r1, r3
    6468:	f7fe f82e 	bl	44c8 <enqueue>
//		enqueue (BR_PACKET, (uint8_t*)rxbuf1);
		handle_usb(clkn);
    646c:	4b25      	ldr	r3, [pc, #148]	; (6504 <bt_stream_rx+0x344>)
    646e:	681b      	ldr	r3, [r3, #0]
    6470:	4618      	mov	r0, r3
    6472:	f002 f9ff 	bl	8874 <handle_usb>
//		enqueue (MESSAGE, rssi_buf);
//		handle_usb(clkn);
		RXLED_CLR;
    6476:	4b14      	ldr	r3, [pc, #80]	; (64c8 <bt_stream_rx+0x308>)
    6478:	2210      	movs	r2, #16
    647a:	601a      	str	r2, [r3, #0]
	       
	rx_flush:
		cc2400_strobe (SRFOFF);
    647c:	2064      	movs	r0, #100	; 0x64
    647e:	f003 fc93 	bl	9da8 <cc2400_strobe>
                while ((cc2400_status () & FS_LOCK));
    6482:	bf00      	nop
    6484:	f003 fc86 	bl	9d94 <cc2400_status>
    6488:	4603      	mov	r3, r0
    648a:	f003 0304 	and.w	r3, r3, #4
    648e:	2b00      	cmp	r3, #0
    6490:	d1f8      	bne.n	6484 <bt_stream_rx+0x2c4>

                while (!(cc2400_status () & XOSC16M_STABLE));
    6492:	bf00      	nop
    6494:	f003 fc7e 	bl	9d94 <cc2400_status>
    6498:	4603      	mov	r3, r0
    649a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    649e:	2b00      	cmp	r3, #0
    64a0:	d0f8      	beq.n	6494 <bt_stream_rx+0x2d4>

                cc2400_strobe (SFSON);
    64a2:	2061      	movs	r0, #97	; 0x61
    64a4:	f003 fc80 	bl	9da8 <cc2400_strobe>
                while (!(cc2400_status () & FS_LOCK));
    64a8:	bf00      	nop
    64aa:	f003 fc73 	bl	9d94 <cc2400_status>
    64ae:	4603      	mov	r3, r0
    64b0:	f003 0304 	and.w	r3, r3, #4
    64b4:	2b00      	cmp	r3, #0
    64b6:	d0f8      	beq.n	64aa <bt_stream_rx+0x2ea>

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    64b8:	4a0f      	ldr	r2, [pc, #60]	; (64f8 <bt_stream_rx+0x338>)
    64ba:	4b0f      	ldr	r3, [pc, #60]	; (64f8 <bt_stream_rx+0x338>)
    64bc:	681b      	ldr	r3, [r3, #0]
    64be:	f023 0301 	bic.w	r3, r3, #1
    64c2:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    64c4:	e024      	b.n	6510 <bt_stream_rx+0x350>
    64c6:	bf00      	nop
    64c8:	2009c03c 	.word	0x2009c03c
    64cc:	8e89bed6 	.word	0x8e89bed6
    64d0:	2009c058 	.word	0x2009c058
    64d4:	1000049c 	.word	0x1000049c
    64d8:	10000a4c 	.word	0x10000a4c
    64dc:	10000a49 	.word	0x10000a49
    64e0:	10000b00 	.word	0x10000b00
    64e4:	2009c038 	.word	0x2009c038
    64e8:	100010ac 	.word	0x100010ac
    64ec:	10000a48 	.word	0x10000a48
    64f0:	10000458 	.word	0x10000458
    64f4:	50004110 	.word	0x50004110
    64f8:	40030024 	.word	0x40030024
    64fc:	0000ba2c 	.word	0x0000ba2c
    6500:	10001078 	.word	0x10001078
    6504:	10000be4 	.word	0x10000be4
                        u8 tmp = (u8)DIO_SSP_DR;
    6508:	4b11      	ldr	r3, [pc, #68]	; (6550 <bt_stream_rx+0x390>)
    650a:	681b      	ldr	r3, [r3, #0]
    650c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                cc2400_strobe (SFSON);
                while (!(cc2400_status () & FS_LOCK));

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    6510:	4b10      	ldr	r3, [pc, #64]	; (6554 <bt_stream_rx+0x394>)
    6512:	681b      	ldr	r3, [r3, #0]
    6514:	f003 0304 	and.w	r3, r3, #4
    6518:	2b00      	cmp	r3, #0
    651a:	d1f5      	bne.n	6508 <bt_stream_rx+0x348>
                        u8 tmp = (u8)DIO_SSP_DR;
                }
		dma_init_le();
    651c:	f7ff f900 	bl	5720 <dma_init_le>
		dio_ssp_start();
    6520:	f7ff fa68 	bl	59f4 <dio_ssp_start>
		
//              msleep(500);    
                cc2400_strobe (SRX);
    6524:	2062      	movs	r0, #98	; 0x62
    6526:	f003 fc3f 	bl	9da8 <cc2400_strobe>
		rx_tc = 0;
    652a:	4b0b      	ldr	r3, [pc, #44]	; (6558 <bt_stream_rx+0x398>)
    652c:	2200      	movs	r2, #0
    652e:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6530:	4b0a      	ldr	r3, [pc, #40]	; (655c <bt_stream_rx+0x39c>)
    6532:	2200      	movs	r2, #0
    6534:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
//	cc2400_rx();
	while (requested_mode == MODE_RX_SYMBOLS) {
    6536:	4b0a      	ldr	r3, [pc, #40]	; (6560 <bt_stream_rx+0x3a0>)
    6538:	781b      	ldrb	r3, [r3, #0]
    653a:	b2db      	uxtb	r3, r3
    653c:	2b01      	cmp	r3, #1
    653e:	f43f aea3 	beq.w	6288 <bt_stream_rx+0xc8>
		rx_tc = 0;
		rx_err = 0;
	 
	
	}
	dio_ssp_stop ();
    6542:	f7ff fa87 	bl	5a54 <dio_ssp_stop>
	cs_trigger_disable ();
    6546:	f7fe f97b 	bl	4840 <cs_trigger_disable>
}
    654a:	378c      	adds	r7, #140	; 0x8c
    654c:	46bd      	mov	sp, r7
    654e:	bd90      	pop	{r4, r7, pc}
    6550:	40030008 	.word	0x40030008
    6554:	4003000c 	.word	0x4003000c
    6558:	10000b00 	.word	0x10000b00
    655c:	100010ac 	.word	0x100010ac
    6560:	10000a3f 	.word	0x10000a3f

00006564 <le_set_access_address>:
}
*/


/* set LE access address */
static void le_set_access_address(u32 aa) {
    6564:	b580      	push	{r7, lr}
    6566:	b084      	sub	sp, #16
    6568:	af00      	add	r7, sp, #0
    656a:	6078      	str	r0, [r7, #4]
	u32 aa_rev;

	le.access_address = aa;
    656c:	4a09      	ldr	r2, [pc, #36]	; (6594 <le_set_access_address+0x30>)
    656e:	687b      	ldr	r3, [r7, #4]
    6570:	6013      	str	r3, [r2, #0]
	aa_rev = rbit(aa);
    6572:	6878      	ldr	r0, [r7, #4]
    6574:	f003 f984 	bl	9880 <rbit>
    6578:	60f8      	str	r0, [r7, #12]
	le.syncl = aa_rev & 0xffff;
    657a:	68fb      	ldr	r3, [r7, #12]
    657c:	b29a      	uxth	r2, r3
    657e:	4b05      	ldr	r3, [pc, #20]	; (6594 <le_set_access_address+0x30>)
    6580:	80da      	strh	r2, [r3, #6]
	le.synch = aa_rev >> 16;
    6582:	68fb      	ldr	r3, [r7, #12]
    6584:	0c1b      	lsrs	r3, r3, #16
    6586:	b29a      	uxth	r2, r3
    6588:	4b02      	ldr	r3, [pc, #8]	; (6594 <le_set_access_address+0x30>)
    658a:	809a      	strh	r2, [r3, #4]
}
    658c:	3710      	adds	r7, #16
    658e:	46bd      	mov	sp, r7
    6590:	bd80      	pop	{r7, pc}
    6592:	bf00      	nop
    6594:	10000458 	.word	0x10000458

00006598 <reset_le>:

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    6598:	b580      	push	{r7, lr}
    659a:	af00      	add	r7, sp, #0
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    659c:	481f      	ldr	r0, [pc, #124]	; (661c <reset_le+0x84>)
    659e:	f7ff ffe1 	bl	6564 <le_set_access_address>
	le.crc_init  = 0x555555;	       // advertising channel CRCInit
    65a2:	4b1f      	ldr	r3, [pc, #124]	; (6620 <reset_le+0x88>)
    65a4:	4a1f      	ldr	r2, [pc, #124]	; (6624 <reset_le+0x8c>)
    65a6:	609a      	str	r2, [r3, #8]
	le.crc_init_reversed = 0xAAAAAA;
    65a8:	4b1d      	ldr	r3, [pc, #116]	; (6620 <reset_le+0x88>)
    65aa:	4a1f      	ldr	r2, [pc, #124]	; (6628 <reset_le+0x90>)
    65ac:	60da      	str	r2, [r3, #12]
	le.crc_verify = 1;
    65ae:	4b1c      	ldr	r3, [pc, #112]	; (6620 <reset_le+0x88>)
    65b0:	2201      	movs	r2, #1
    65b2:	611a      	str	r2, [r3, #16]
	le.last_packet = 0;
    65b4:	4b1a      	ldr	r3, [pc, #104]	; (6620 <reset_le+0x88>)
    65b6:	2200      	movs	r2, #0
    65b8:	641a      	str	r2, [r3, #64]	; 0x40

	le.link_state = LINK_INACTIVE;
    65ba:	4b19      	ldr	r3, [pc, #100]	; (6620 <reset_le+0x88>)
    65bc:	2200      	movs	r2, #0
    65be:	751a      	strb	r2, [r3, #20]

	le.channel_idx = 0;
    65c0:	4b17      	ldr	r3, [pc, #92]	; (6620 <reset_le+0x88>)
    65c2:	2200      	movs	r2, #0
    65c4:	755a      	strb	r2, [r3, #21]
	le.channel_increment = 0;
    65c6:	4b16      	ldr	r3, [pc, #88]	; (6620 <reset_le+0x88>)
    65c8:	2200      	movs	r2, #0
    65ca:	759a      	strb	r2, [r3, #22]

	le.conn_epoch = 0;
    65cc:	4b14      	ldr	r3, [pc, #80]	; (6620 <reset_le+0x88>)
    65ce:	2200      	movs	r2, #0
    65d0:	619a      	str	r2, [r3, #24]
	le.interval_timer = 0;
    65d2:	4b13      	ldr	r3, [pc, #76]	; (6620 <reset_le+0x88>)
    65d4:	2200      	movs	r2, #0
    65d6:	839a      	strh	r2, [r3, #28]
	le.conn_interval = 0;
    65d8:	4b11      	ldr	r3, [pc, #68]	; (6620 <reset_le+0x88>)
    65da:	2200      	movs	r2, #0
    65dc:	83da      	strh	r2, [r3, #30]
	le.conn_interval = 0;
    65de:	4b10      	ldr	r3, [pc, #64]	; (6620 <reset_le+0x88>)
    65e0:	2200      	movs	r2, #0
    65e2:	83da      	strh	r2, [r3, #30]
	le.conn_count = 0;
    65e4:	4b0e      	ldr	r3, [pc, #56]	; (6620 <reset_le+0x88>)
    65e6:	2200      	movs	r2, #0
    65e8:	841a      	strh	r2, [r3, #32]

	le.win_size = 0;
    65ea:	4b0d      	ldr	r3, [pc, #52]	; (6620 <reset_le+0x88>)
    65ec:	2200      	movs	r2, #0
    65ee:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	le.win_offset = 0;
    65f2:	4b0b      	ldr	r3, [pc, #44]	; (6620 <reset_le+0x88>)
    65f4:	2200      	movs	r2, #0
    65f6:	849a      	strh	r2, [r3, #36]	; 0x24

	le.update_pending = 0;
    65f8:	4b09      	ldr	r3, [pc, #36]	; (6620 <reset_le+0x88>)
    65fa:	2200      	movs	r2, #0
    65fc:	629a      	str	r2, [r3, #40]	; 0x28
	le.update_instant = 0;
    65fe:	4b08      	ldr	r3, [pc, #32]	; (6620 <reset_le+0x88>)
    6600:	2200      	movs	r2, #0
    6602:	859a      	strh	r2, [r3, #44]	; 0x2c
	le.interval_update = 0;
    6604:	4b06      	ldr	r3, [pc, #24]	; (6620 <reset_le+0x88>)
    6606:	2200      	movs	r2, #0
    6608:	85da      	strh	r2, [r3, #46]	; 0x2e
	le.win_size_update = 0;
    660a:	4b05      	ldr	r3, [pc, #20]	; (6620 <reset_le+0x88>)
    660c:	2200      	movs	r2, #0
    660e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	le.win_offset_update;

	do_hop = 0;
    6612:	4b06      	ldr	r3, [pc, #24]	; (662c <reset_le+0x94>)
    6614:	2200      	movs	r2, #0
    6616:	701a      	strb	r2, [r3, #0]
}
    6618:	bd80      	pop	{r7, pc}
    661a:	bf00      	nop
    661c:	8e89bed6 	.word	0x8e89bed6
    6620:	10000458 	.word	0x10000458
    6624:	00555555 	.word	0x00555555
    6628:	00aaaaaa 	.word	0x00aaaaaa
    662c:	1000097d 	.word	0x1000097d

00006630 <reset_le_promisc>:

// reset LE Promisc state
void reset_le_promisc(void) {
    6630:	b580      	push	{r7, lr}
    6632:	af00      	add	r7, sp, #0
	memset(&le_promisc, 0, sizeof(le_promisc));
    6634:	4805      	ldr	r0, [pc, #20]	; (664c <reset_le_promisc+0x1c>)
    6636:	2100      	movs	r1, #0
    6638:	f44f 7284 	mov.w	r2, #264	; 0x108
    663c:	f7fd fd9c 	bl	4178 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    6640:	4b02      	ldr	r3, [pc, #8]	; (664c <reset_le_promisc+0x1c>)
    6642:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6646:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    664a:	bd80      	pop	{r7, pc}
    664c:	10000bec 	.word	0x10000bec

00006650 <bt_generic_le>:

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    6650:	b580      	push	{r7, lr}
    6652:	b088      	sub	sp, #32
    6654:	af00      	add	r7, sp, #0
    6656:	4603      	mov	r3, r0
    6658:	71fb      	strb	r3, [r7, #7]
	u8 *tmp = NULL;
    665a:	2300      	movs	r3, #0
    665c:	60fb      	str	r3, [r7, #12]
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    665e:	4ba4      	ldr	r3, [pc, #656]	; (68f0 <bt_generic_le+0x2a0>)
    6660:	2201      	movs	r2, #1
    6662:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    6664:	4aa3      	ldr	r2, [pc, #652]	; (68f4 <bt_generic_le+0x2a4>)
    6666:	79fb      	ldrb	r3, [r7, #7]
    6668:	7013      	strb	r3, [r2, #0]

	reset_le();
    666a:	f7ff ff95 	bl	6598 <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    666e:	4ba2      	ldr	r3, [pc, #648]	; (68f8 <bt_generic_le+0x2a8>)
    6670:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6674:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    6676:	4ba1      	ldr	r3, [pc, #644]	; (68fc <bt_generic_le+0x2ac>)
    6678:	2210      	movs	r2, #16
    667a:	601a      	str	r2, [r3, #0]

	queue_init();
    667c:	f002 f85a 	bl	8734 <queue_init>
	dio_ssp_init();
    6680:	f003 f9fe 	bl	9a80 <dio_ssp_init>
	dma_init();
    6684:	f7fe ff8c 	bl	55a0 <dma_init>
	dio_ssp_start();
    6688:	f7ff f9b4 	bl	59f4 <dio_ssp_start>
	cc2400_rx();
    668c:	f7ff fa6e 	bl	5b6c <cc2400_rx>

	cs_trigger_enable();
    6690:	f7fe f8b8 	bl	4804 <cs_trigger_enable>

	hold = 0;
    6694:	2300      	movs	r3, #0
    6696:	77fb      	strb	r3, [r7, #31]

	while (requested_mode == active_mode) {
    6698:	e115      	b.n	68c6 <bt_generic_le+0x276>
		if (requested_channel != 0) {
    669a:	4b99      	ldr	r3, [pc, #612]	; (6900 <bt_generic_le+0x2b0>)
    669c:	881b      	ldrh	r3, [r3, #0]
    669e:	b29b      	uxth	r3, r3
    66a0:	2b00      	cmp	r3, #0
    66a2:	d024      	beq.n	66ee <bt_generic_le+0x9e>
			cc2400_strobe(SRFOFF);
    66a4:	2064      	movs	r0, #100	; 0x64
    66a6:	f003 fb7f 	bl	9da8 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    66aa:	bf00      	nop
    66ac:	f003 fb72 	bl	9d94 <cc2400_status>
    66b0:	4603      	mov	r3, r0
    66b2:	f003 0304 	and.w	r3, r3, #4
    66b6:	2b00      	cmp	r3, #0
    66b8:	d1f8      	bne.n	66ac <bt_generic_le+0x5c>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    66ba:	4b92      	ldr	r3, [pc, #584]	; (6904 <bt_generic_le+0x2b4>)
    66bc:	881b      	ldrh	r3, [r3, #0]
    66be:	b29b      	uxth	r3, r3
    66c0:	3b01      	subs	r3, #1
    66c2:	b29b      	uxth	r3, r3
    66c4:	2002      	movs	r0, #2
    66c6:	4619      	mov	r1, r3
    66c8:	f003 faac 	bl	9c24 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    66cc:	2061      	movs	r0, #97	; 0x61
    66ce:	f003 fb6b 	bl	9da8 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    66d2:	bf00      	nop
    66d4:	f003 fb5e 	bl	9d94 <cc2400_status>
    66d8:	4603      	mov	r3, r0
    66da:	f003 0304 	and.w	r3, r3, #4
    66de:	2b00      	cmp	r3, #0
    66e0:	d0f8      	beq.n	66d4 <bt_generic_le+0x84>

			/* RX mode */
			cc2400_strobe(SRX);
    66e2:	2062      	movs	r0, #98	; 0x62
    66e4:	f003 fb60 	bl	9da8 <cc2400_strobe>

			requested_channel = 0;
    66e8:	4b85      	ldr	r3, [pc, #532]	; (6900 <bt_generic_le+0x2b0>)
    66ea:	2200      	movs	r2, #0
    66ec:	801a      	strh	r2, [r3, #0]
		}

		if (do_hop) {
    66ee:	4b86      	ldr	r3, [pc, #536]	; (6908 <bt_generic_le+0x2b8>)
    66f0:	781b      	ldrb	r3, [r3, #0]
    66f2:	b2db      	uxtb	r3, r3
    66f4:	2b00      	cmp	r3, #0
    66f6:	d002      	beq.n	66fe <bt_generic_le+0xae>
			hop();
    66f8:	f7ff fcce 	bl	6098 <hop>
    66fc:	e003      	b.n	6706 <bt_generic_le+0xb6>
		} else {
			TXLED_CLR;
    66fe:	4b7f      	ldr	r3, [pc, #508]	; (68fc <bt_generic_le+0x2ac>)
    6700:	f44f 7280 	mov.w	r2, #256	; 0x100
    6704:	601a      	str	r2, [r3, #0]
		}

		RXLED_CLR;
    6706:	4b7d      	ldr	r3, [pc, #500]	; (68fc <bt_generic_le+0x2ac>)
    6708:	2210      	movs	r2, #16
    670a:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    670c:	f7fd fdfa 	bl	4304 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    6710:	2380      	movs	r3, #128	; 0x80
    6712:	74bb      	strb	r3, [r7, #18]
		while ((rx_tc == 0) && (rx_err == 0))
    6714:	e022      	b.n	675c <bt_generic_le+0x10c>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    6716:	2006      	movs	r0, #6
    6718:	f003 fa6e 	bl	9bf8 <cc2400_get>
    671c:	4603      	mov	r3, r0
    671e:	0a1b      	lsrs	r3, r3, #8
    6720:	b29b      	uxth	r3, r3
    6722:	74fb      	strb	r3, [r7, #19]
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    6724:	4b79      	ldr	r3, [pc, #484]	; (690c <bt_generic_le+0x2bc>)
    6726:	781b      	ldrb	r3, [r3, #0]
    6728:	b2db      	uxtb	r3, r3
    672a:	2b00      	cmp	r3, #0
    672c:	d011      	beq.n	6752 <bt_generic_le+0x102>
    672e:	f997 3012 	ldrsb.w	r3, [r7, #18]
    6732:	f113 0f80 	cmn.w	r3, #128	; 0x80
    6736:	d10c      	bne.n	6752 <bt_generic_le+0x102>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    6738:	4b75      	ldr	r3, [pc, #468]	; (6910 <bt_generic_le+0x2c0>)
    673a:	781b      	ldrb	r3, [r3, #0]
    673c:	b25b      	sxtb	r3, r3
    673e:	f103 0236 	add.w	r2, r3, #54	; 0x36
    6742:	f997 3013 	ldrsb.w	r3, [r7, #19]
    6746:	4293      	cmp	r3, r2
    6748:	bfb8      	it	lt
    674a:	4613      	movlt	r3, r2
    674c:	74fb      	strb	r3, [r7, #19]
				rssi_at_trigger = rssi;
    674e:	7cfb      	ldrb	r3, [r7, #19]
    6750:	74bb      	strb	r3, [r7, #18]
			}
			rssi_add(rssi);
    6752:	f997 3013 	ldrsb.w	r3, [r7, #19]
    6756:	4618      	mov	r0, r3
    6758:	f7fd fdee 	bl	4338 <rssi_add>
		RXLED_CLR;

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
    675c:	4b6d      	ldr	r3, [pc, #436]	; (6914 <bt_generic_le+0x2c4>)
    675e:	681b      	ldr	r3, [r3, #0]
    6760:	2b00      	cmp	r3, #0
    6762:	d103      	bne.n	676c <bt_generic_le+0x11c>
    6764:	4b6c      	ldr	r3, [pc, #432]	; (6918 <bt_generic_le+0x2c8>)
    6766:	681b      	ldr	r3, [r3, #0]
    6768:	2b00      	cmp	r3, #0
    676a:	d0d4      	beq.n	6716 <bt_generic_le+0xc6>
			}
			rssi_add(rssi);
		}

		/* Keep buffer swapping in sync with DMA. */
		if (rx_tc % 2) {
    676c:	4b69      	ldr	r3, [pc, #420]	; (6914 <bt_generic_le+0x2c4>)
    676e:	681b      	ldr	r3, [r3, #0]
    6770:	f003 0301 	and.w	r3, r3, #1
    6774:	2b00      	cmp	r3, #0
    6776:	d009      	beq.n	678c <bt_generic_le+0x13c>
			tmp = active_rxbuf;
    6778:	4b68      	ldr	r3, [pc, #416]	; (691c <bt_generic_le+0x2cc>)
    677a:	681b      	ldr	r3, [r3, #0]
    677c:	60fb      	str	r3, [r7, #12]
			active_rxbuf = idle_rxbuf;
    677e:	4b68      	ldr	r3, [pc, #416]	; (6920 <bt_generic_le+0x2d0>)
    6780:	681b      	ldr	r3, [r3, #0]
    6782:	4a66      	ldr	r2, [pc, #408]	; (691c <bt_generic_le+0x2cc>)
    6784:	6013      	str	r3, [r2, #0]
			idle_rxbuf = tmp;
    6786:	4a66      	ldr	r2, [pc, #408]	; (6920 <bt_generic_le+0x2d0>)
    6788:	68fb      	ldr	r3, [r7, #12]
    678a:	6013      	str	r3, [r2, #0]
		}

		if (rx_err) {
    678c:	4b62      	ldr	r3, [pc, #392]	; (6918 <bt_generic_le+0x2c8>)
    678e:	681b      	ldr	r3, [r3, #0]
    6790:	2b00      	cmp	r3, #0
    6792:	d007      	beq.n	67a4 <bt_generic_le+0x154>
			status |= DMA_ERROR;
    6794:	4b63      	ldr	r3, [pc, #396]	; (6924 <bt_generic_le+0x2d4>)
    6796:	781b      	ldrb	r3, [r3, #0]
    6798:	b2db      	uxtb	r3, r3
    679a:	f043 0302 	orr.w	r3, r3, #2
    679e:	b2da      	uxtb	r2, r3
    67a0:	4b60      	ldr	r3, [pc, #384]	; (6924 <bt_generic_le+0x2d4>)
    67a2:	701a      	strb	r2, [r3, #0]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    67a4:	4b5b      	ldr	r3, [pc, #364]	; (6914 <bt_generic_le+0x2c4>)
    67a6:	681b      	ldr	r3, [r3, #0]
    67a8:	2b00      	cmp	r3, #0
    67aa:	d100      	bne.n	67ae <bt_generic_le+0x15e>
			goto rx_continue;
    67ac:	e085      	b.n	68ba <bt_generic_le+0x26a>

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    67ae:	4b59      	ldr	r3, [pc, #356]	; (6914 <bt_generic_le+0x2c4>)
    67b0:	681b      	ldr	r3, [r3, #0]
    67b2:	2b01      	cmp	r3, #1
    67b4:	d907      	bls.n	67c6 <bt_generic_le+0x176>
			status |= DMA_OVERFLOW;
    67b6:	4b5b      	ldr	r3, [pc, #364]	; (6924 <bt_generic_le+0x2d4>)
    67b8:	781b      	ldrb	r3, [r3, #0]
    67ba:	b2db      	uxtb	r3, r3
    67bc:	f043 0301 	orr.w	r3, r3, #1
    67c0:	b2da      	uxtb	r2, r3
    67c2:	4b58      	ldr	r3, [pc, #352]	; (6924 <bt_generic_le+0x2d4>)
    67c4:	701a      	strb	r2, [r3, #0]

		rssi_iir_update();
    67c6:	f7fd fded 	bl	43a4 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    67ca:	4b50      	ldr	r3, [pc, #320]	; (690c <bt_generic_le+0x2bc>)
    67cc:	781b      	ldrb	r3, [r3, #0]
    67ce:	b2db      	uxtb	r3, r3
    67d0:	2b00      	cmp	r3, #0
    67d2:	d103      	bne.n	67dc <bt_generic_le+0x18c>
    67d4:	4b54      	ldr	r3, [pc, #336]	; (6928 <bt_generic_le+0x2d8>)
    67d6:	781b      	ldrb	r3, [r3, #0]
    67d8:	2b00      	cmp	r3, #0
    67da:	d00c      	beq.n	67f6 <bt_generic_le+0x1a6>
			status |= CS_TRIGGER;
    67dc:	4b51      	ldr	r3, [pc, #324]	; (6924 <bt_generic_le+0x2d4>)
    67de:	781b      	ldrb	r3, [r3, #0]
    67e0:	b2db      	uxtb	r3, r3
    67e2:	f043 0308 	orr.w	r3, r3, #8
    67e6:	b2da      	uxtb	r2, r3
    67e8:	4b4e      	ldr	r3, [pc, #312]	; (6924 <bt_generic_le+0x2d4>)
    67ea:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    67ec:	2302      	movs	r3, #2
    67ee:	77fb      	strb	r3, [r7, #31]
			cs_trigger = 0;
    67f0:	4b46      	ldr	r3, [pc, #280]	; (690c <bt_generic_le+0x2bc>)
    67f2:	2200      	movs	r2, #0
    67f4:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    67f6:	4b4d      	ldr	r3, [pc, #308]	; (692c <bt_generic_le+0x2dc>)
    67f8:	781b      	ldrb	r3, [r3, #0]
    67fa:	b25a      	sxtb	r2, r3
    67fc:	4b44      	ldr	r3, [pc, #272]	; (6910 <bt_generic_le+0x2c0>)
    67fe:	781b      	ldrb	r3, [r3, #0]
    6800:	b25b      	sxtb	r3, r3
    6802:	3336      	adds	r3, #54	; 0x36
    6804:	429a      	cmp	r2, r3
    6806:	db09      	blt.n	681c <bt_generic_le+0x1cc>
			status |= RSSI_TRIGGER;
    6808:	4b46      	ldr	r3, [pc, #280]	; (6924 <bt_generic_le+0x2d4>)
    680a:	781b      	ldrb	r3, [r3, #0]
    680c:	b2db      	uxtb	r3, r3
    680e:	f043 0310 	orr.w	r3, r3, #16
    6812:	b2da      	uxtb	r2, r3
    6814:	4b43      	ldr	r3, [pc, #268]	; (6924 <bt_generic_le+0x2d4>)
    6816:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    6818:	2302      	movs	r3, #2
    681a:	77fb      	strb	r3, [r7, #31]
		}

		/* Send a packet once in a while (6.25 Hz) to keep
		 * host USB reads from timing out. */
		if (keepalive_trigger) {
    681c:	4b44      	ldr	r3, [pc, #272]	; (6930 <bt_generic_le+0x2e0>)
    681e:	781b      	ldrb	r3, [r3, #0]
    6820:	b2db      	uxtb	r3, r3
    6822:	2b00      	cmp	r3, #0
    6824:	d007      	beq.n	6836 <bt_generic_le+0x1e6>
			if (hold == 0)
    6826:	7ffb      	ldrb	r3, [r7, #31]
    6828:	2b00      	cmp	r3, #0
    682a:	d101      	bne.n	6830 <bt_generic_le+0x1e0>
				hold = 1;
    682c:	2301      	movs	r3, #1
    682e:	77fb      	strb	r3, [r7, #31]
			keepalive_trigger = 0;
    6830:	4b3f      	ldr	r3, [pc, #252]	; (6930 <bt_generic_le+0x2e0>)
    6832:	2200      	movs	r2, #0
    6834:	701a      	strb	r2, [r3, #0]
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    6836:	7ffb      	ldrb	r3, [r7, #31]
    6838:	2b00      	cmp	r3, #0
    683a:	d100      	bne.n	683e <bt_generic_le+0x1ee>
			goto rx_continue;
    683c:	e03d      	b.n	68ba <bt_generic_le+0x26a>
		}
		hold--;
    683e:	7ffb      	ldrb	r3, [r7, #31]
    6840:	3b01      	subs	r3, #1
    6842:	77fb      	strb	r3, [r7, #31]

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    6844:	483b      	ldr	r0, [pc, #236]	; (6934 <bt_generic_le+0x2e4>)
    6846:	493c      	ldr	r1, [pc, #240]	; (6938 <bt_generic_le+0x2e8>)
    6848:	f44f 72c8 	mov.w	r2, #400	; 0x190
    684c:	f004 ffbe 	bl	b7cc <memcpy>

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    6850:	2300      	movs	r3, #0
    6852:	61bb      	str	r3, [r7, #24]
    6854:	e025      	b.n	68a2 <bt_generic_le+0x252>
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    6856:	2300      	movs	r3, #0
    6858:	617b      	str	r3, [r7, #20]
    685a:	e01c      	b.n	6896 <bt_generic_le+0x246>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    685c:	69bb      	ldr	r3, [r7, #24]
    685e:	3332      	adds	r3, #50	; 0x32
    6860:	00da      	lsls	r2, r3, #3
    6862:	697b      	ldr	r3, [r7, #20]
    6864:	4413      	add	r3, r2
    6866:	4a2e      	ldr	r2, [pc, #184]	; (6920 <bt_generic_le+0x2d0>)
    6868:	6811      	ldr	r1, [r2, #0]
    686a:	69ba      	ldr	r2, [r7, #24]
    686c:	440a      	add	r2, r1
    686e:	7812      	ldrb	r2, [r2, #0]
    6870:	09d2      	lsrs	r2, r2, #7
    6872:	b2d1      	uxtb	r1, r2
    6874:	4a2f      	ldr	r2, [pc, #188]	; (6934 <bt_generic_le+0x2e4>)
    6876:	54d1      	strb	r1, [r2, r3]
				idle_rxbuf[i] <<= 1;
    6878:	4b29      	ldr	r3, [pc, #164]	; (6920 <bt_generic_le+0x2d0>)
    687a:	681a      	ldr	r2, [r3, #0]
    687c:	69bb      	ldr	r3, [r7, #24]
    687e:	4413      	add	r3, r2
    6880:	4a27      	ldr	r2, [pc, #156]	; (6920 <bt_generic_le+0x2d0>)
    6882:	6811      	ldr	r1, [r2, #0]
    6884:	69ba      	ldr	r2, [r7, #24]
    6886:	440a      	add	r2, r1
    6888:	7812      	ldrb	r2, [r2, #0]
    688a:	0052      	lsls	r2, r2, #1
    688c:	b2d2      	uxtb	r2, r2
    688e:	701a      	strb	r2, [r3, #0]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    6890:	697b      	ldr	r3, [r7, #20]
    6892:	3301      	adds	r3, #1
    6894:	617b      	str	r3, [r7, #20]
    6896:	697b      	ldr	r3, [r7, #20]
    6898:	2b07      	cmp	r3, #7
    689a:	dddf      	ble.n	685c <bt_generic_le+0x20c>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    689c:	69bb      	ldr	r3, [r7, #24]
    689e:	3301      	adds	r3, #1
    68a0:	61bb      	str	r3, [r7, #24]
    68a2:	69bb      	ldr	r3, [r7, #24]
    68a4:	2b31      	cmp	r3, #49	; 0x31
    68a6:	ddd6      	ble.n	6856 <bt_generic_le+0x206>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    68a8:	4b24      	ldr	r3, [pc, #144]	; (693c <bt_generic_le+0x2ec>)
    68aa:	681b      	ldr	r3, [r3, #0]
    68ac:	4821      	ldr	r0, [pc, #132]	; (6934 <bt_generic_le+0x2e4>)
    68ae:	4798      	blx	r3
    68b0:	60b8      	str	r0, [r7, #8]
		if (!ret) break;
    68b2:	68bb      	ldr	r3, [r7, #8]
    68b4:	2b00      	cmp	r3, #0
    68b6:	d100      	bne.n	68ba <bt_generic_le+0x26a>
    68b8:	e00c      	b.n	68d4 <bt_generic_le+0x284>

	rx_continue:
		rx_tc = 0;
    68ba:	4b16      	ldr	r3, [pc, #88]	; (6914 <bt_generic_le+0x2c4>)
    68bc:	2200      	movs	r2, #0
    68be:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    68c0:	4b15      	ldr	r3, [pc, #84]	; (6918 <bt_generic_le+0x2c8>)
    68c2:	2200      	movs	r2, #0
    68c4:	601a      	str	r2, [r3, #0]

	cs_trigger_enable();

	hold = 0;

	while (requested_mode == active_mode) {
    68c6:	4b1e      	ldr	r3, [pc, #120]	; (6940 <bt_generic_le+0x2f0>)
    68c8:	781b      	ldrb	r3, [r3, #0]
    68ca:	b2db      	uxtb	r3, r3
    68cc:	79fa      	ldrb	r2, [r7, #7]
    68ce:	429a      	cmp	r2, r3
    68d0:	f43f aee3 	beq.w	669a <bt_generic_le+0x4a>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    68d4:	4b1b      	ldr	r3, [pc, #108]	; (6944 <bt_generic_le+0x2f4>)
    68d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    68da:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    68dc:	f7ff f91e 	bl	5b1c <cc2400_idle>
	dio_ssp_stop();
    68e0:	f7ff f8b8 	bl	5a54 <dio_ssp_stop>
	cs_trigger_disable();
    68e4:	f7fd ffac 	bl	4840 <cs_trigger_disable>
}
    68e8:	3720      	adds	r7, #32
    68ea:	46bd      	mov	sp, r7
    68ec:	bd80      	pop	{r7, pc}
    68ee:	bf00      	nop
    68f0:	10000a42 	.word	0x10000a42
    68f4:	10000a3e 	.word	0x10000a3e
    68f8:	e000e100 	.word	0xe000e100
    68fc:	2009c03c 	.word	0x2009c03c
    6900:	10000a44 	.word	0x10000a44
    6904:	1000049c 	.word	0x1000049c
    6908:	1000097d 	.word	0x1000097d
    690c:	100010b0 	.word	0x100010b0
    6910:	1000044d 	.word	0x1000044d
    6914:	10000b00 	.word	0x10000b00
    6918:	100010ac 	.word	0x100010ac
    691c:	10000450 	.word	0x10000450
    6920:	10000454 	.word	0x10000454
    6924:	10000a48 	.word	0x10000a48
    6928:	1000097e 	.word	0x1000097e
    692c:	10000b04 	.word	0x10000b04
    6930:	10000be0 	.word	0x10000be0
    6934:	10000d00 	.word	0x10000d00
    6938:	10000e90 	.word	0x10000e90
    693c:	10000998 	.word	0x10000998
    6940:	10000a3f 	.word	0x10000a3f
    6944:	e000e180 	.word	0xe000e180

00006948 <bt_le_sync>:


void bt_le_sync(u8 active_mode)
{
    6948:	b590      	push	{r4, r7, lr}
    694a:	b09b      	sub	sp, #108	; 0x6c
    694c:	af00      	add	r7, sp, #0
    694e:	4603      	mov	r3, r0
    6950:	71fb      	strb	r3, [r7, #7]
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    6952:	4b87      	ldr	r3, [pc, #540]	; (6b70 <bt_le_sync+0x228>)
    6954:	2201      	movs	r2, #1
    6956:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    6958:	4a86      	ldr	r2, [pc, #536]	; (6b74 <bt_le_sync+0x22c>)
    695a:	79fb      	ldrb	r3, [r7, #7]
    695c:	7013      	strb	r3, [r2, #0]

	le.link_state = LINK_LISTENING;
    695e:	4b86      	ldr	r3, [pc, #536]	; (6b78 <bt_le_sync+0x230>)
    6960:	2201      	movs	r2, #1
    6962:	751a      	strb	r2, [r3, #20]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    6964:	4b85      	ldr	r3, [pc, #532]	; (6b7c <bt_le_sync+0x234>)
    6966:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    696a:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    696c:	4b84      	ldr	r3, [pc, #528]	; (6b80 <bt_le_sync+0x238>)
    696e:	2210      	movs	r2, #16
    6970:	601a      	str	r2, [r3, #0]

	queue_init();
    6972:	f001 fedf 	bl	8734 <queue_init>
	dio_ssp_init();
    6976:	f003 f883 	bl	9a80 <dio_ssp_init>
	dma_init_le();
    697a:	f7fe fed1 	bl	5720 <dma_init_le>
	dio_ssp_start();
    697e:	f7ff f839 	bl	59f4 <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    6982:	4b7d      	ldr	r3, [pc, #500]	; (6b78 <bt_le_sync+0x230>)
    6984:	681b      	ldr	r3, [r3, #0]
    6986:	4618      	mov	r0, r3
    6988:	f002 ff7a 	bl	9880 <rbit>
    698c:	4603      	mov	r3, r0
    698e:	4618      	mov	r0, r3
    6990:	f7ff f94a 	bl	5c28 <cc2400_rx_sync>

	while (requested_mode == active_mode) {
    6994:	e247      	b.n	6e26 <bt_le_sync+0x4de>
		if (requested_channel != 0) {
    6996:	4b7b      	ldr	r3, [pc, #492]	; (6b84 <bt_le_sync+0x23c>)
    6998:	881b      	ldrh	r3, [r3, #0]
    699a:	b29b      	uxth	r3, r3
    699c:	2b00      	cmp	r3, #0
    699e:	d029      	beq.n	69f4 <bt_le_sync+0xac>
			cc2400_strobe(SRFOFF);
    69a0:	2064      	movs	r0, #100	; 0x64
    69a2:	f003 fa01 	bl	9da8 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    69a6:	bf00      	nop
    69a8:	f003 f9f4 	bl	9d94 <cc2400_status>
    69ac:	4603      	mov	r3, r0
    69ae:	f003 0304 	and.w	r3, r3, #4
    69b2:	2b00      	cmp	r3, #0
    69b4:	d1f8      	bne.n	69a8 <bt_le_sync+0x60>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    69b6:	4b74      	ldr	r3, [pc, #464]	; (6b88 <bt_le_sync+0x240>)
    69b8:	881b      	ldrh	r3, [r3, #0]
    69ba:	b29b      	uxth	r3, r3
    69bc:	3b01      	subs	r3, #1
    69be:	b29b      	uxth	r3, r3
    69c0:	2002      	movs	r0, #2
    69c2:	4619      	mov	r1, r3
    69c4:	f003 f92e 	bl	9c24 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    69c8:	2061      	movs	r0, #97	; 0x61
    69ca:	f003 f9ed 	bl	9da8 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    69ce:	bf00      	nop
    69d0:	f003 f9e0 	bl	9d94 <cc2400_status>
    69d4:	4603      	mov	r3, r0
    69d6:	f003 0304 	and.w	r3, r3, #4
    69da:	2b00      	cmp	r3, #0
    69dc:	d0f8      	beq.n	69d0 <bt_le_sync+0x88>

			/* RX mode */
			cc2400_strobe(SRX);
    69de:	2062      	movs	r0, #98	; 0x62
    69e0:	f003 f9e2 	bl	9da8 <cc2400_strobe>

			saved_request = requested_channel;
    69e4:	4b67      	ldr	r3, [pc, #412]	; (6b84 <bt_le_sync+0x23c>)
    69e6:	881b      	ldrh	r3, [r3, #0]
    69e8:	b29a      	uxth	r2, r3
    69ea:	4b68      	ldr	r3, [pc, #416]	; (6b8c <bt_le_sync+0x244>)
    69ec:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    69ee:	4b65      	ldr	r3, [pc, #404]	; (6b84 <bt_le_sync+0x23c>)
    69f0:	2200      	movs	r2, #0
    69f2:	801a      	strh	r2, [r3, #0]
		}

		RXLED_CLR;
    69f4:	4b62      	ldr	r3, [pc, #392]	; (6b80 <bt_le_sync+0x238>)
    69f6:	2210      	movs	r2, #16
    69f8:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    69fa:	f7fd fc83 	bl	4304 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    69fe:	bf00      	nop
    6a00:	4b63      	ldr	r3, [pc, #396]	; (6b90 <bt_le_sync+0x248>)
    6a02:	681b      	ldr	r3, [r3, #0]
    6a04:	2b00      	cmp	r3, #0
    6a06:	d10e      	bne.n	6a26 <bt_le_sync+0xde>
    6a08:	4b62      	ldr	r3, [pc, #392]	; (6b94 <bt_le_sync+0x24c>)
    6a0a:	681b      	ldr	r3, [r3, #0]
    6a0c:	2b00      	cmp	r3, #0
    6a0e:	d10a      	bne.n	6a26 <bt_le_sync+0xde>
    6a10:	4b61      	ldr	r3, [pc, #388]	; (6b98 <bt_le_sync+0x250>)
    6a12:	781b      	ldrb	r3, [r3, #0]
    6a14:	b2db      	uxtb	r3, r3
    6a16:	2b00      	cmp	r3, #0
    6a18:	d105      	bne.n	6a26 <bt_le_sync+0xde>
    6a1a:	4b60      	ldr	r3, [pc, #384]	; (6b9c <bt_le_sync+0x254>)
    6a1c:	781b      	ldrb	r3, [r3, #0]
    6a1e:	b2db      	uxtb	r3, r3
    6a20:	79fa      	ldrb	r2, [r7, #7]
    6a22:	429a      	cmp	r2, r3
    6a24:	d0ec      	beq.n	6a00 <bt_le_sync+0xb8>
			;

		if (requested_mode != active_mode) {
    6a26:	4b5d      	ldr	r3, [pc, #372]	; (6b9c <bt_le_sync+0x254>)
    6a28:	781b      	ldrb	r3, [r3, #0]
    6a2a:	b2db      	uxtb	r3, r3
    6a2c:	79fa      	ldrb	r2, [r7, #7]
    6a2e:	429a      	cmp	r2, r3
    6a30:	d000      	beq.n	6a34 <bt_le_sync+0xec>
			goto cleanup;
    6a32:	e1ff      	b.n	6e34 <bt_le_sync+0x4ec>
		}

		if (rx_err) {
    6a34:	4b57      	ldr	r3, [pc, #348]	; (6b94 <bt_le_sync+0x24c>)
    6a36:	681b      	ldr	r3, [r3, #0]
    6a38:	2b00      	cmp	r3, #0
    6a3a:	d007      	beq.n	6a4c <bt_le_sync+0x104>
			status |= DMA_ERROR;
    6a3c:	4b58      	ldr	r3, [pc, #352]	; (6ba0 <bt_le_sync+0x258>)
    6a3e:	781b      	ldrb	r3, [r3, #0]
    6a40:	b2db      	uxtb	r3, r3
    6a42:	f043 0302 	orr.w	r3, r3, #2
    6a46:	b2da      	uxtb	r2, r3
    6a48:	4b55      	ldr	r3, [pc, #340]	; (6ba0 <bt_le_sync+0x258>)
    6a4a:	701a      	strb	r2, [r3, #0]
		}

		if (do_hop)
    6a4c:	4b52      	ldr	r3, [pc, #328]	; (6b98 <bt_le_sync+0x250>)
    6a4e:	781b      	ldrb	r3, [r3, #0]
    6a50:	b2db      	uxtb	r3, r3
    6a52:	2b00      	cmp	r3, #0
    6a54:	d000      	beq.n	6a58 <bt_le_sync+0x110>
			goto rx_flush;
    6a56:	e12b      	b.n	6cb0 <bt_le_sync+0x368>

		/* No DMA transfer? */
		if (!rx_tc)
    6a58:	4b4d      	ldr	r3, [pc, #308]	; (6b90 <bt_le_sync+0x248>)
    6a5a:	681b      	ldr	r3, [r3, #0]
    6a5c:	2b00      	cmp	r3, #0
    6a5e:	d100      	bne.n	6a62 <bt_le_sync+0x11a>
    6a60:	e1e1      	b.n	6e26 <bt_le_sync+0x4de>

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    6a62:	f107 0308 	add.w	r3, r7, #8
    6a66:	65fb      	str	r3, [r7, #92]	; 0x5c
		packet[0] = le.access_address;
    6a68:	4b43      	ldr	r3, [pc, #268]	; (6b78 <bt_le_sync+0x230>)
    6a6a:	681b      	ldr	r3, [r3, #0]
    6a6c:	60bb      	str	r3, [r7, #8]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    6a6e:	4b46      	ldr	r3, [pc, #280]	; (6b88 <bt_le_sync+0x240>)
    6a70:	881b      	ldrh	r3, [r3, #0]
    6a72:	b29b      	uxth	r3, r3
    6a74:	b2db      	uxtb	r3, r3
    6a76:	3b62      	subs	r3, #98	; 0x62
    6a78:	b2db      	uxtb	r3, r3
    6a7a:	4618      	mov	r0, r3
    6a7c:	f001 fcda 	bl	8434 <btle_channel_index>
    6a80:	4603      	mov	r3, r0
    6a82:	461a      	mov	r2, r3
    6a84:	4613      	mov	r3, r2
    6a86:	005b      	lsls	r3, r3, #1
    6a88:	4413      	add	r3, r2
    6a8a:	011b      	lsls	r3, r3, #4
    6a8c:	4a45      	ldr	r2, [pc, #276]	; (6ba4 <bt_le_sync+0x25c>)
    6a8e:	4413      	add	r3, r2
    6a90:	65bb      	str	r3, [r7, #88]	; 0x58
		for (i = 0; i < 4; i+= 4) {
    6a92:	2300      	movs	r3, #0
    6a94:	667b      	str	r3, [r7, #100]	; 0x64
    6a96:	e034      	b.n	6b02 <bt_le_sync+0x1ba>
			uint32_t v = rxbuf1[i+0] << 24
    6a98:	4a43      	ldr	r2, [pc, #268]	; (6ba8 <bt_le_sync+0x260>)
    6a9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6a9c:	4413      	add	r3, r2
    6a9e:	781b      	ldrb	r3, [r3, #0]
    6aa0:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    6aa2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6aa4:	3301      	adds	r3, #1
    6aa6:	4940      	ldr	r1, [pc, #256]	; (6ba8 <bt_le_sync+0x260>)
    6aa8:	5ccb      	ldrb	r3, [r1, r3]
    6aaa:	041b      	lsls	r3, r3, #16
    6aac:	431a      	orrs	r2, r3
					   | rxbuf1[i+2] << 8
    6aae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6ab0:	3302      	adds	r3, #2
    6ab2:	493d      	ldr	r1, [pc, #244]	; (6ba8 <bt_le_sync+0x260>)
    6ab4:	5ccb      	ldrb	r3, [r1, r3]
    6ab6:	021b      	lsls	r3, r3, #8
    6ab8:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    6aba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    6abc:	3203      	adds	r2, #3
    6abe:	493a      	ldr	r1, [pc, #232]	; (6ba8 <bt_le_sync+0x260>)
    6ac0:	5c8a      	ldrb	r2, [r1, r2]
    6ac2:	4313      	orrs	r3, r2
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6ac4:	657b      	str	r3, [r7, #84]	; 0x54
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    6ac6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6ac8:	2b00      	cmp	r3, #0
    6aca:	da00      	bge.n	6ace <bt_le_sync+0x186>
    6acc:	3303      	adds	r3, #3
    6ace:	109b      	asrs	r3, r3, #2
    6ad0:	1c5c      	adds	r4, r3, #1
    6ad2:	6d78      	ldr	r0, [r7, #84]	; 0x54
    6ad4:	f002 fed4 	bl	9880 <rbit>
    6ad8:	4601      	mov	r1, r0
    6ada:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6adc:	2b00      	cmp	r3, #0
    6ade:	da00      	bge.n	6ae2 <bt_le_sync+0x19a>
    6ae0:	3303      	adds	r3, #3
    6ae2:	109b      	asrs	r3, r3, #2
    6ae4:	009b      	lsls	r3, r3, #2
    6ae6:	6dba      	ldr	r2, [r7, #88]	; 0x58
    6ae8:	4413      	add	r3, r2
    6aea:	681b      	ldr	r3, [r3, #0]
    6aec:	ea81 0203 	eor.w	r2, r1, r3
    6af0:	00a3      	lsls	r3, r4, #2
    6af2:	f107 0168 	add.w	r1, r7, #104	; 0x68
    6af6:	440b      	add	r3, r1
    6af8:	f843 2c60 	str.w	r2, [r3, #-96]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
    6afc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6afe:	3304      	adds	r3, #4
    6b00:	667b      	str	r3, [r7, #100]	; 0x64
    6b02:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6b04:	2b03      	cmp	r3, #3
    6b06:	ddc7      	ble.n	6a98 <bt_le_sync+0x150>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		unsigned len = (p[5] & 0x3f) + 2;
    6b08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    6b0a:	3305      	adds	r3, #5
    6b0c:	781b      	ldrb	r3, [r3, #0]
    6b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6b12:	3302      	adds	r3, #2
    6b14:	653b      	str	r3, [r7, #80]	; 0x50
		if (len > 39)
    6b16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6b18:	2b27      	cmp	r3, #39	; 0x27
    6b1a:	d900      	bls.n	6b1e <bt_le_sync+0x1d6>
			goto rx_flush;
    6b1c:	e0c8      	b.n	6cb0 <bt_le_sync+0x368>

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    6b1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6b20:	3306      	adds	r3, #6
    6b22:	089b      	lsrs	r3, r3, #2
    6b24:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (total_transfers < 11) {
    6b26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6b28:	2b0a      	cmp	r3, #10
    6b2a:	d80d      	bhi.n	6b48 <bt_le_sync+0x200>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    6b2c:	bf00      	nop
    6b2e:	4b1f      	ldr	r3, [pc, #124]	; (6bac <bt_le_sync+0x264>)
    6b30:	681a      	ldr	r2, [r3, #0]
    6b32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6b34:	009b      	lsls	r3, r3, #2
    6b36:	491c      	ldr	r1, [pc, #112]	; (6ba8 <bt_le_sync+0x260>)
    6b38:	440b      	add	r3, r1
    6b3a:	429a      	cmp	r2, r3
    6b3c:	d20f      	bcs.n	6b5e <bt_le_sync+0x216>
    6b3e:	4b15      	ldr	r3, [pc, #84]	; (6b94 <bt_le_sync+0x24c>)
    6b40:	681b      	ldr	r3, [r3, #0]
    6b42:	2b00      	cmp	r3, #0
    6b44:	d0f3      	beq.n	6b2e <bt_le_sync+0x1e6>
    6b46:	e00a      	b.n	6b5e <bt_le_sync+0x216>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    6b48:	bf00      	nop
    6b4a:	4b19      	ldr	r3, [pc, #100]	; (6bb0 <bt_le_sync+0x268>)
    6b4c:	681b      	ldr	r3, [r3, #0]
    6b4e:	f003 0301 	and.w	r3, r3, #1
    6b52:	2b00      	cmp	r3, #0
    6b54:	d003      	beq.n	6b5e <bt_le_sync+0x216>
    6b56:	4b0f      	ldr	r3, [pc, #60]	; (6b94 <bt_le_sync+0x24c>)
    6b58:	681b      	ldr	r3, [r3, #0]
    6b5a:	2b00      	cmp	r3, #0
    6b5c:	d0f5      	beq.n	6b4a <bt_le_sync+0x202>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6b5e:	4a15      	ldr	r2, [pc, #84]	; (6bb4 <bt_le_sync+0x26c>)
    6b60:	4b14      	ldr	r3, [pc, #80]	; (6bb4 <bt_le_sync+0x26c>)
    6b62:	681b      	ldr	r3, [r3, #0]
    6b64:	f023 0301 	bic.w	r3, r3, #1
    6b68:	6013      	str	r3, [r2, #0]

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    6b6a:	2304      	movs	r3, #4
    6b6c:	667b      	str	r3, [r7, #100]	; 0x64
    6b6e:	e058      	b.n	6c22 <bt_le_sync+0x2da>
    6b70:	10000a42 	.word	0x10000a42
    6b74:	10000a3e 	.word	0x10000a3e
    6b78:	10000458 	.word	0x10000458
    6b7c:	e000e100 	.word	0xe000e100
    6b80:	2009c03c 	.word	0x2009c03c
    6b84:	10000a44 	.word	0x10000a44
    6b88:	1000049c 	.word	0x1000049c
    6b8c:	10000a46 	.word	0x10000a46
    6b90:	10000b00 	.word	0x10000b00
    6b94:	100010ac 	.word	0x100010ac
    6b98:	1000097d 	.word	0x1000097d
    6b9c:	10000a3f 	.word	0x10000a3f
    6ba0:	10000a48 	.word	0x10000a48
    6ba4:	0000ba2c 	.word	0x0000ba2c
    6ba8:	10001078 	.word	0x10001078
    6bac:	50004104 	.word	0x50004104
    6bb0:	50004110 	.word	0x50004110
    6bb4:	40030024 	.word	0x40030024
			uint32_t v = rxbuf1[i+0] << 24
    6bb8:	4aa5      	ldr	r2, [pc, #660]	; (6e50 <bt_le_sync+0x508>)
    6bba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6bbc:	4413      	add	r3, r2
    6bbe:	781b      	ldrb	r3, [r3, #0]
    6bc0:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    6bc2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6bc4:	3301      	adds	r3, #1
    6bc6:	49a2      	ldr	r1, [pc, #648]	; (6e50 <bt_le_sync+0x508>)
    6bc8:	5ccb      	ldrb	r3, [r1, r3]
    6bca:	041b      	lsls	r3, r3, #16
    6bcc:	431a      	orrs	r2, r3
				       | rxbuf1[i+2] << 8
    6bce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6bd0:	3302      	adds	r3, #2
    6bd2:	499f      	ldr	r1, [pc, #636]	; (6e50 <bt_le_sync+0x508>)
    6bd4:	5ccb      	ldrb	r3, [r1, r3]
    6bd6:	021b      	lsls	r3, r3, #8
    6bd8:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    6bda:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    6bdc:	3203      	adds	r2, #3
    6bde:	499c      	ldr	r1, [pc, #624]	; (6e50 <bt_le_sync+0x508>)
    6be0:	5c8a      	ldrb	r2, [r1, r2]
    6be2:	4313      	orrs	r3, r2
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6be4:	64bb      	str	r3, [r7, #72]	; 0x48
					   | rxbuf1[i+1] << 16
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    6be6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6be8:	2b00      	cmp	r3, #0
    6bea:	da00      	bge.n	6bee <bt_le_sync+0x2a6>
    6bec:	3303      	adds	r3, #3
    6bee:	109b      	asrs	r3, r3, #2
    6bf0:	1c5c      	adds	r4, r3, #1
    6bf2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    6bf4:	f002 fe44 	bl	9880 <rbit>
    6bf8:	4601      	mov	r1, r0
    6bfa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6bfc:	2b00      	cmp	r3, #0
    6bfe:	da00      	bge.n	6c02 <bt_le_sync+0x2ba>
    6c00:	3303      	adds	r3, #3
    6c02:	109b      	asrs	r3, r3, #2
    6c04:	009b      	lsls	r3, r3, #2
    6c06:	6dba      	ldr	r2, [r7, #88]	; 0x58
    6c08:	4413      	add	r3, r2
    6c0a:	681b      	ldr	r3, [r3, #0]
    6c0c:	ea81 0203 	eor.w	r2, r1, r3
    6c10:	00a3      	lsls	r3, r4, #2
    6c12:	f107 0168 	add.w	r1, r7, #104	; 0x68
    6c16:	440b      	add	r3, r1
    6c18:	f843 2c60 	str.w	r2, [r3, #-96]
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    6c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6c1e:	3304      	adds	r3, #4
    6c20:	667b      	str	r3, [r7, #100]	; 0x64
    6c22:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6c24:	2b2b      	cmp	r3, #43	; 0x2b
    6c26:	ddc7      	ble.n	6bb8 <bt_le_sync+0x270>
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    6c28:	4b8a      	ldr	r3, [pc, #552]	; (6e54 <bt_le_sync+0x50c>)
    6c2a:	691b      	ldr	r3, [r3, #16]
    6c2c:	2b00      	cmp	r3, #0
    6c2e:	d023      	beq.n	6c78 <bt_le_sync+0x330>
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    6c30:	4b88      	ldr	r3, [pc, #544]	; (6e54 <bt_le_sync+0x50c>)
    6c32:	68d9      	ldr	r1, [r3, #12]
    6c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    6c36:	1d1a      	adds	r2, r3, #4
    6c38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6c3a:	4608      	mov	r0, r1
    6c3c:	4611      	mov	r1, r2
    6c3e:	461a      	mov	r2, r3
    6c40:	f001 fcfc 	bl	863c <btle_crcgen_lut>
    6c44:	6478      	str	r0, [r7, #68]	; 0x44
			u32 wire_crc = (p[4+len+2] << 16)
    6c46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6c48:	3306      	adds	r3, #6
    6c4a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    6c4c:	4413      	add	r3, r2
    6c4e:	781b      	ldrb	r3, [r3, #0]
    6c50:	041a      	lsls	r2, r3, #16
						 | (p[4+len+1] << 8)
    6c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6c54:	3305      	adds	r3, #5
    6c56:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    6c58:	440b      	add	r3, r1
    6c5a:	781b      	ldrb	r3, [r3, #0]
    6c5c:	021b      	lsls	r3, r3, #8
    6c5e:	4313      	orrs	r3, r2
						 | (p[4+len+0] << 0);
    6c60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    6c62:	3204      	adds	r2, #4
    6c64:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    6c66:	440a      	add	r2, r1
    6c68:	7812      	ldrb	r2, [r2, #0]
    6c6a:	4313      	orrs	r3, r2
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
			u32 wire_crc = (p[4+len+2] << 16)
    6c6c:	643b      	str	r3, [r7, #64]	; 0x40
						 | (p[4+len+1] << 8)
						 | (p[4+len+0] << 0);
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    6c6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6c70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6c72:	429a      	cmp	r2, r3
    6c74:	d000      	beq.n	6c78 <bt_le_sync+0x330>
				goto rx_flush;
    6c76:	e01b      	b.n	6cb0 <bt_le_sync+0x368>
		}


		RXLED_SET;
    6c78:	4b77      	ldr	r3, [pc, #476]	; (6e58 <bt_le_sync+0x510>)
    6c7a:	2210      	movs	r2, #16
    6c7c:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    6c7e:	4b77      	ldr	r3, [pc, #476]	; (6e5c <bt_le_sync+0x514>)
    6c80:	681b      	ldr	r3, [r3, #0]
    6c82:	f107 0208 	add.w	r2, r7, #8
    6c86:	4610      	mov	r0, r2
    6c88:	4798      	blx	r3
		enqueue(LE_PACKET, (uint8_t *)packet);
    6c8a:	f107 0308 	add.w	r3, r7, #8
    6c8e:	2001      	movs	r0, #1
    6c90:	4619      	mov	r1, r3
    6c92:	f7fd fc19 	bl	44c8 <enqueue>
		le.last_packet = CLK100NS;
    6c96:	4b72      	ldr	r3, [pc, #456]	; (6e60 <bt_le_sync+0x518>)
    6c98:	681b      	ldr	r3, [r3, #0]
    6c9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6c9e:	f640 4235 	movw	r2, #3125	; 0xc35
    6ca2:	fb02 f203 	mul.w	r2, r2, r3
    6ca6:	4b6f      	ldr	r3, [pc, #444]	; (6e64 <bt_le_sync+0x51c>)
    6ca8:	681b      	ldr	r3, [r3, #0]
    6caa:	4413      	add	r3, r2
    6cac:	4a69      	ldr	r2, [pc, #420]	; (6e54 <bt_le_sync+0x50c>)
    6cae:	6413      	str	r3, [r2, #64]	; 0x40

	rx_flush:
		cc2400_strobe(SFSON);
    6cb0:	2061      	movs	r0, #97	; 0x61
    6cb2:	f003 f879 	bl	9da8 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    6cb6:	bf00      	nop
    6cb8:	f003 f86c 	bl	9d94 <cc2400_status>
    6cbc:	4603      	mov	r3, r0
    6cbe:	f003 0304 	and.w	r3, r3, #4
    6cc2:	2b00      	cmp	r3, #0
    6cc4:	d0f8      	beq.n	6cb8 <bt_le_sync+0x370>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6cc6:	4a68      	ldr	r2, [pc, #416]	; (6e68 <bt_le_sync+0x520>)
    6cc8:	4b67      	ldr	r3, [pc, #412]	; (6e68 <bt_le_sync+0x520>)
    6cca:	681b      	ldr	r3, [r3, #0]
    6ccc:	f023 0301 	bic.w	r3, r3, #1
    6cd0:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    6cd2:	e003      	b.n	6cdc <bt_le_sync+0x394>
			u8 tmp = (u8)DIO_SSP_DR;
    6cd4:	4b65      	ldr	r3, [pc, #404]	; (6e6c <bt_le_sync+0x524>)
    6cd6:	681b      	ldr	r3, [r3, #0]
    6cd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    6cdc:	4b64      	ldr	r3, [pc, #400]	; (6e70 <bt_le_sync+0x528>)
    6cde:	681b      	ldr	r3, [r3, #0]
    6ce0:	f003 0304 	and.w	r3, r3, #4
    6ce4:	2b00      	cmp	r3, #0
    6ce6:	d1f5      	bne.n	6cd4 <bt_le_sync+0x38c>
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    6ce8:	4b5d      	ldr	r3, [pc, #372]	; (6e60 <bt_le_sync+0x518>)
    6cea:	681b      	ldr	r3, [r3, #0]
    6cec:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6cf0:	f640 4235 	movw	r2, #3125	; 0xc35
    6cf4:	fb02 f203 	mul.w	r2, r2, r3
    6cf8:	4b5a      	ldr	r3, [pc, #360]	; (6e64 <bt_le_sync+0x51c>)
    6cfa:	681b      	ldr	r3, [r3, #0]
    6cfc:	4413      	add	r3, r2
    6cfe:	663b      	str	r3, [r7, #96]	; 0x60
		if (now < le.last_packet)
    6d00:	4b54      	ldr	r3, [pc, #336]	; (6e54 <bt_le_sync+0x50c>)
    6d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    6d04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6d06:	429a      	cmp	r2, r3
    6d08:	d905      	bls.n	6d16 <bt_le_sync+0x3ce>
			now += 3276800000; // handle rollover
    6d0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6d0c:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    6d10:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    6d14:	663b      	str	r3, [r7, #96]	; 0x60
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    6d16:	4b4f      	ldr	r3, [pc, #316]	; (6e54 <bt_le_sync+0x50c>)
    6d18:	7d1b      	ldrb	r3, [r3, #20]

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
		if  ( // timeout
    6d1a:	2b03      	cmp	r3, #3
    6d1c:	d003      	beq.n	6d26 <bt_le_sync+0x3de>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    6d1e:	4b4d      	ldr	r3, [pc, #308]	; (6e54 <bt_le_sync+0x50c>)
    6d20:	7d1b      	ldrb	r3, [r3, #20]
    6d22:	2b02      	cmp	r3, #2
    6d24:	d106      	bne.n	6d34 <bt_le_sync+0x3ec>
			&& (now - le.last_packet > 50000000))
    6d26:	4b4b      	ldr	r3, [pc, #300]	; (6e54 <bt_le_sync+0x50c>)
    6d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6d2a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    6d2c:	1ad3      	subs	r3, r2, r3
    6d2e:	4a51      	ldr	r2, [pc, #324]	; (6e74 <bt_le_sync+0x52c>)
    6d30:	4293      	cmp	r3, r2
    6d32:	d803      	bhi.n	6d3c <bt_le_sync+0x3f4>
			// jam finished
			|| (le_jam_count == 1)
    6d34:	4b50      	ldr	r3, [pc, #320]	; (6e78 <bt_le_sync+0x530>)
    6d36:	681b      	ldr	r3, [r3, #0]
    6d38:	2b01      	cmp	r3, #1
    6d3a:	d137      	bne.n	6dac <bt_le_sync+0x464>
			)
		{
			reset_le();
    6d3c:	f7ff fc2c 	bl	6598 <reset_le>
			le_jam_count = 0;
    6d40:	4b4d      	ldr	r3, [pc, #308]	; (6e78 <bt_le_sync+0x530>)
    6d42:	2200      	movs	r2, #0
    6d44:	601a      	str	r2, [r3, #0]
			TXLED_CLR;
    6d46:	4b4d      	ldr	r3, [pc, #308]	; (6e7c <bt_le_sync+0x534>)
    6d48:	f44f 7280 	mov.w	r2, #256	; 0x100
    6d4c:	601a      	str	r2, [r3, #0]

			if (jam_mode == JAM_ONCE) {
    6d4e:	4b4c      	ldr	r3, [pc, #304]	; (6e80 <bt_le_sync+0x538>)
    6d50:	781b      	ldrb	r3, [r3, #0]
    6d52:	b2db      	uxtb	r3, r3
    6d54:	2b01      	cmp	r3, #1
    6d56:	d106      	bne.n	6d66 <bt_le_sync+0x41e>
				jam_mode = JAM_NONE;
    6d58:	4b49      	ldr	r3, [pc, #292]	; (6e80 <bt_le_sync+0x538>)
    6d5a:	2200      	movs	r2, #0
    6d5c:	701a      	strb	r2, [r3, #0]
				requested_mode = MODE_IDLE;
    6d5e:	4b49      	ldr	r3, [pc, #292]	; (6e84 <bt_le_sync+0x53c>)
    6d60:	2200      	movs	r2, #0
    6d62:	701a      	strb	r2, [r3, #0]
				goto cleanup;
    6d64:	e066      	b.n	6e34 <bt_le_sync+0x4ec>
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    6d66:	79fb      	ldrb	r3, [r7, #7]
    6d68:	2b0a      	cmp	r3, #10
    6d6a:	d101      	bne.n	6d70 <bt_le_sync+0x428>
				goto cleanup;
    6d6c:	bf00      	nop
    6d6e:	e061      	b.n	6e34 <bt_le_sync+0x4ec>

			le.link_state = LINK_LISTENING;
    6d70:	4b38      	ldr	r3, [pc, #224]	; (6e54 <bt_le_sync+0x50c>)
    6d72:	2201      	movs	r2, #1
    6d74:	751a      	strb	r2, [r3, #20]

			cc2400_strobe(SRFOFF);
    6d76:	2064      	movs	r0, #100	; 0x64
    6d78:	f003 f816 	bl	9da8 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    6d7c:	bf00      	nop
    6d7e:	f003 f809 	bl	9d94 <cc2400_status>
    6d82:	4603      	mov	r3, r0
    6d84:	f003 0304 	and.w	r3, r3, #4
    6d88:	2b00      	cmp	r3, #0
    6d8a:	d1f8      	bne.n	6d7e <bt_le_sync+0x436>

			/* Retune */
			channel = saved_request != 0 ? saved_request : 2402;
    6d8c:	4b3e      	ldr	r3, [pc, #248]	; (6e88 <bt_le_sync+0x540>)
    6d8e:	881b      	ldrh	r3, [r3, #0]
    6d90:	b29b      	uxth	r3, r3
    6d92:	2b00      	cmp	r3, #0
    6d94:	d003      	beq.n	6d9e <bt_le_sync+0x456>
    6d96:	4b3c      	ldr	r3, [pc, #240]	; (6e88 <bt_le_sync+0x540>)
    6d98:	881b      	ldrh	r3, [r3, #0]
    6d9a:	b29b      	uxth	r3, r3
    6d9c:	e001      	b.n	6da2 <bt_le_sync+0x45a>
    6d9e:	f640 1362 	movw	r3, #2402	; 0x962
    6da2:	4a3a      	ldr	r2, [pc, #232]	; (6e8c <bt_le_sync+0x544>)
    6da4:	8013      	strh	r3, [r2, #0]
			restart_jamming = 1;
    6da6:	4b3a      	ldr	r3, [pc, #232]	; (6e90 <bt_le_sync+0x548>)
    6da8:	2201      	movs	r2, #1
    6daa:	601a      	str	r2, [r3, #0]
		}

		cc2400_set(SYNCL, le.syncl);
    6dac:	4b29      	ldr	r3, [pc, #164]	; (6e54 <bt_le_sync+0x50c>)
    6dae:	88db      	ldrh	r3, [r3, #6]
    6db0:	202c      	movs	r0, #44	; 0x2c
    6db2:	4619      	mov	r1, r3
    6db4:	f002 ff36 	bl	9c24 <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    6db8:	4b26      	ldr	r3, [pc, #152]	; (6e54 <bt_le_sync+0x50c>)
    6dba:	889b      	ldrh	r3, [r3, #4]
    6dbc:	202d      	movs	r0, #45	; 0x2d
    6dbe:	4619      	mov	r1, r3
    6dc0:	f002 ff30 	bl	9c24 <cc2400_set>

		if (do_hop)
    6dc4:	4b33      	ldr	r3, [pc, #204]	; (6e94 <bt_le_sync+0x54c>)
    6dc6:	781b      	ldrb	r3, [r3, #0]
    6dc8:	b2db      	uxtb	r3, r3
    6dca:	2b00      	cmp	r3, #0
    6dcc:	d001      	beq.n	6dd2 <bt_le_sync+0x48a>
			hop();
    6dce:	f7ff f963 	bl	6098 <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    6dd2:	4b29      	ldr	r3, [pc, #164]	; (6e78 <bt_le_sync+0x530>)
    6dd4:	681b      	ldr	r3, [r3, #0]
    6dd6:	2b00      	cmp	r3, #0
    6dd8:	dd07      	ble.n	6dea <bt_le_sync+0x4a2>
			le_jam();
    6dda:	f7ff f913 	bl	6004 <le_jam>
			--le_jam_count;
    6dde:	4b26      	ldr	r3, [pc, #152]	; (6e78 <bt_le_sync+0x530>)
    6de0:	681b      	ldr	r3, [r3, #0]
    6de2:	3b01      	subs	r3, #1
    6de4:	4a24      	ldr	r2, [pc, #144]	; (6e78 <bt_le_sync+0x530>)
    6de6:	6013      	str	r3, [r2, #0]
    6de8:	e017      	b.n	6e1a <bt_le_sync+0x4d2>
		} else {
			/* RX mode */
			dma_init_le();
    6dea:	f7fe fc99 	bl	5720 <dma_init_le>
			dio_ssp_start();
    6dee:	f7fe fe01 	bl	59f4 <dio_ssp_start>

			if (restart_jamming) {
    6df2:	4b27      	ldr	r3, [pc, #156]	; (6e90 <bt_le_sync+0x548>)
    6df4:	681b      	ldr	r3, [r3, #0]
    6df6:	2b00      	cmp	r3, #0
    6df8:	d00c      	beq.n	6e14 <bt_le_sync+0x4cc>
				cc2400_rx_sync(rbit(le.access_address));
    6dfa:	4b16      	ldr	r3, [pc, #88]	; (6e54 <bt_le_sync+0x50c>)
    6dfc:	681b      	ldr	r3, [r3, #0]
    6dfe:	4618      	mov	r0, r3
    6e00:	f002 fd3e 	bl	9880 <rbit>
    6e04:	4603      	mov	r3, r0
    6e06:	4618      	mov	r0, r3
    6e08:	f7fe ff0e 	bl	5c28 <cc2400_rx_sync>
				restart_jamming = 0;
    6e0c:	4b20      	ldr	r3, [pc, #128]	; (6e90 <bt_le_sync+0x548>)
    6e0e:	2200      	movs	r2, #0
    6e10:	601a      	str	r2, [r3, #0]
    6e12:	e002      	b.n	6e1a <bt_le_sync+0x4d2>
			} else {
				cc2400_strobe(SRX);
    6e14:	2062      	movs	r0, #98	; 0x62
    6e16:	f002 ffc7 	bl	9da8 <cc2400_strobe>
			}
		}

		rx_tc = 0;
    6e1a:	4b1f      	ldr	r3, [pc, #124]	; (6e98 <bt_le_sync+0x550>)
    6e1c:	2200      	movs	r2, #0
    6e1e:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6e20:	4b1e      	ldr	r3, [pc, #120]	; (6e9c <bt_le_sync+0x554>)
    6e22:	2200      	movs	r2, #0
    6e24:	601a      	str	r2, [r3, #0]
	dma_init_le();
	dio_ssp_start();

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address

	while (requested_mode == active_mode) {
    6e26:	4b17      	ldr	r3, [pc, #92]	; (6e84 <bt_le_sync+0x53c>)
    6e28:	781b      	ldrb	r3, [r3, #0]
    6e2a:	b2db      	uxtb	r3, r3
    6e2c:	79fa      	ldrb	r2, [r7, #7]
    6e2e:	429a      	cmp	r2, r3
    6e30:	f43f adb1 	beq.w	6996 <bt_le_sync+0x4e>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6e34:	4b1a      	ldr	r3, [pc, #104]	; (6ea0 <bt_le_sync+0x558>)
    6e36:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6e3a:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    6e3c:	f7fe fe6e 	bl	5b1c <cc2400_idle>
	dio_ssp_stop();
    6e40:	f7fe fe08 	bl	5a54 <dio_ssp_stop>
	cs_trigger_disable();
    6e44:	f7fd fcfc 	bl	4840 <cs_trigger_disable>
}
    6e48:	376c      	adds	r7, #108	; 0x6c
    6e4a:	46bd      	mov	sp, r7
    6e4c:	bd90      	pop	{r4, r7, pc}
    6e4e:	bf00      	nop
    6e50:	10001078 	.word	0x10001078
    6e54:	10000458 	.word	0x10000458
    6e58:	2009c038 	.word	0x2009c038
    6e5c:	1000099c 	.word	0x1000099c
    6e60:	10000be4 	.word	0x10000be4
    6e64:	40004008 	.word	0x40004008
    6e68:	40030024 	.word	0x40030024
    6e6c:	40030008 	.word	0x40030008
    6e70:	4003000c 	.word	0x4003000c
    6e74:	02faf080 	.word	0x02faf080
    6e78:	10000994 	.word	0x10000994
    6e7c:	2009c03c 	.word	0x2009c03c
    6e80:	10000a40 	.word	0x10000a40
    6e84:	10000a3f 	.word	0x10000a3f
    6e88:	10000a46 	.word	0x10000a46
    6e8c:	1000049c 	.word	0x1000049c
    6e90:	10000a50 	.word	0x10000a50
    6e94:	1000097d 	.word	0x1000097d
    6e98:	10000b00 	.word	0x10000b00
    6e9c:	100010ac 	.word	0x100010ac
    6ea0:	e000e180 	.word	0xe000e180

00006ea4 <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    6ea4:	b580      	push	{r7, lr}
    6ea6:	b08c      	sub	sp, #48	; 0x30
    6ea8:	af00      	add	r7, sp, #0
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    6eaa:	4b6c      	ldr	r3, [pc, #432]	; (705c <cb_follow_le+0x1b8>)
    6eac:	881b      	ldrh	r3, [r3, #0]
    6eae:	b29b      	uxth	r3, r3
    6eb0:	b2db      	uxtb	r3, r3
    6eb2:	3b62      	subs	r3, #98	; 0x62
    6eb4:	b2db      	uxtb	r3, r3
    6eb6:	4618      	mov	r0, r3
    6eb8:	f001 fabc 	bl	8434 <btle_channel_index>
    6ebc:	4603      	mov	r3, r0
    6ebe:	461a      	mov	r2, r3
    6ec0:	4b67      	ldr	r3, [pc, #412]	; (7060 <cb_follow_le+0x1bc>)
    6ec2:	5c9b      	ldrb	r3, [r3, r2]
    6ec4:	623b      	str	r3, [r7, #32]

	u32 access_address = 0;
    6ec6:	2300      	movs	r3, #0
    6ec8:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < 31; ++i) {
    6eca:	2300      	movs	r3, #0
    6ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
    6ece:	e00e      	b.n	6eee <cb_follow_le+0x4a>
		access_address >>= 1;
    6ed0:	69fb      	ldr	r3, [r7, #28]
    6ed2:	085b      	lsrs	r3, r3, #1
    6ed4:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    6ed6:	4a63      	ldr	r2, [pc, #396]	; (7064 <cb_follow_le+0x1c0>)
    6ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6eda:	4413      	add	r3, r2
    6edc:	781b      	ldrb	r3, [r3, #0]
    6ede:	07db      	lsls	r3, r3, #31
    6ee0:	461a      	mov	r2, r3
    6ee2:	69fb      	ldr	r3, [r7, #28]
    6ee4:	4313      	orrs	r3, r2
    6ee6:	61fb      	str	r3, [r7, #28]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    6ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6eea:	3301      	adds	r3, #1
    6eec:	62fb      	str	r3, [r7, #44]	; 0x2c
    6eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6ef0:	2b1e      	cmp	r3, #30
    6ef2:	dded      	ble.n	6ed0 <cb_follow_le+0x2c>
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    6ef4:	231f      	movs	r3, #31
    6ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    6ef8:	e0a6      	b.n	7048 <cb_follow_le+0x1a4>
		access_address >>= 1;
    6efa:	69fb      	ldr	r3, [r7, #28]
    6efc:	085b      	lsrs	r3, r3, #1
    6efe:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    6f00:	4a58      	ldr	r2, [pc, #352]	; (7064 <cb_follow_le+0x1c0>)
    6f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f04:	4413      	add	r3, r2
    6f06:	781b      	ldrb	r3, [r3, #0]
    6f08:	07db      	lsls	r3, r3, #31
    6f0a:	461a      	mov	r2, r3
    6f0c:	69fb      	ldr	r3, [r7, #28]
    6f0e:	4313      	orrs	r3, r2
    6f10:	61fb      	str	r3, [r7, #28]
		if (access_address == le.access_address) {
    6f12:	4b55      	ldr	r3, [pc, #340]	; (7068 <cb_follow_le+0x1c4>)
    6f14:	681a      	ldr	r2, [r3, #0]
    6f16:	69fb      	ldr	r3, [r7, #28]
    6f18:	429a      	cmp	r2, r3
    6f1a:	f040 8092 	bne.w	7042 <cb_follow_le+0x19e>
			for (j = 0; j < 46; ++j) {
    6f1e:	2300      	movs	r3, #0
    6f20:	62bb      	str	r3, [r7, #40]	; 0x28
    6f22:	e048      	b.n	6fb6 <cb_follow_le+0x112>
				u8 byte = 0;
    6f24:	2300      	movs	r3, #0
    6f26:	76fb      	strb	r3, [r7, #27]
				for (k = 0; k < 8; k++) {
    6f28:	2300      	movs	r3, #0
    6f2a:	627b      	str	r3, [r7, #36]	; 0x24
    6f2c:	e037      	b.n	6f9e <cb_follow_le+0xfa>
					int offset = k + (j * 8) + i - 31;
    6f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6f30:	00da      	lsls	r2, r3, #3
    6f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f34:	441a      	add	r2, r3
    6f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f38:	4413      	add	r3, r2
    6f3a:	3b1f      	subs	r3, #31
    6f3c:	613b      	str	r3, [r7, #16]
					if (offset >= DMA_SIZE*8*2) break;
    6f3e:	693b      	ldr	r3, [r7, #16]
    6f40:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    6f44:	db00      	blt.n	6f48 <cb_follow_le+0xa4>
    6f46:	e02d      	b.n	6fa4 <cb_follow_le+0x100>
					int bit = unpacked[offset];
    6f48:	4a46      	ldr	r2, [pc, #280]	; (7064 <cb_follow_le+0x1c0>)
    6f4a:	693b      	ldr	r3, [r7, #16]
    6f4c:	4413      	add	r3, r2
    6f4e:	781b      	ldrb	r3, [r3, #0]
    6f50:	617b      	str	r3, [r7, #20]
					if (j >= 4) { // unwhiten data bytes
    6f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6f54:	2b03      	cmp	r3, #3
    6f56:	dd16      	ble.n	6f86 <cb_follow_le+0xe2>
						bit ^= whitening[idx];
    6f58:	4a44      	ldr	r2, [pc, #272]	; (706c <cb_follow_le+0x1c8>)
    6f5a:	6a3b      	ldr	r3, [r7, #32]
    6f5c:	4413      	add	r3, r2
    6f5e:	781b      	ldrb	r3, [r3, #0]
    6f60:	461a      	mov	r2, r3
    6f62:	697b      	ldr	r3, [r7, #20]
    6f64:	4053      	eors	r3, r2
    6f66:	617b      	str	r3, [r7, #20]
						idx = (idx + 1) % sizeof(whitening);
    6f68:	6a3b      	ldr	r3, [r7, #32]
    6f6a:	3301      	adds	r3, #1
    6f6c:	4619      	mov	r1, r3
    6f6e:	4b40      	ldr	r3, [pc, #256]	; (7070 <cb_follow_le+0x1cc>)
    6f70:	fba1 2303 	umull	r2, r3, r1, r3
    6f74:	1ac8      	subs	r0, r1, r3
    6f76:	0840      	lsrs	r0, r0, #1
    6f78:	4403      	add	r3, r0
    6f7a:	099a      	lsrs	r2, r3, #6
    6f7c:	4613      	mov	r3, r2
    6f7e:	01db      	lsls	r3, r3, #7
    6f80:	1a9b      	subs	r3, r3, r2
    6f82:	1aca      	subs	r2, r1, r3
    6f84:	623a      	str	r2, [r7, #32]
					}
					byte |= bit << k;
    6f86:	697a      	ldr	r2, [r7, #20]
    6f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f8a:	fa02 f303 	lsl.w	r3, r2, r3
    6f8e:	b2da      	uxtb	r2, r3
    6f90:	7efb      	ldrb	r3, [r7, #27]
    6f92:	4313      	orrs	r3, r2
    6f94:	b2db      	uxtb	r3, r3
    6f96:	76fb      	strb	r3, [r7, #27]
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    6f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f9a:	3301      	adds	r3, #1
    6f9c:	627b      	str	r3, [r7, #36]	; 0x24
    6f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6fa0:	2b07      	cmp	r3, #7
    6fa2:	ddc4      	ble.n	6f2e <cb_follow_le+0x8a>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    6fa4:	4b33      	ldr	r3, [pc, #204]	; (7074 <cb_follow_le+0x1d0>)
    6fa6:	681a      	ldr	r2, [r3, #0]
    6fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6faa:	4413      	add	r3, r2
    6fac:	7efa      	ldrb	r2, [r7, #27]
    6fae:	701a      	strb	r2, [r3, #0]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    6fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6fb2:	3301      	adds	r3, #1
    6fb4:	62bb      	str	r3, [r7, #40]	; 0x28
    6fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6fb8:	2b2d      	cmp	r3, #45	; 0x2d
    6fba:	ddb3      	ble.n	6f24 <cb_follow_le+0x80>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    6fbc:	4b2a      	ldr	r3, [pc, #168]	; (7068 <cb_follow_le+0x1c4>)
    6fbe:	691b      	ldr	r3, [r3, #16]
    6fc0:	2b00      	cmp	r3, #0
    6fc2:	d02e      	beq.n	7022 <cb_follow_le+0x17e>
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    6fc4:	4b2b      	ldr	r3, [pc, #172]	; (7074 <cb_follow_le+0x1d0>)
    6fc6:	681b      	ldr	r3, [r3, #0]
    6fc8:	3305      	adds	r3, #5
    6fca:	781b      	ldrb	r3, [r3, #0]
    6fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6fd0:	3302      	adds	r3, #2
    6fd2:	60fb      	str	r3, [r7, #12]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
    6fd4:	4b24      	ldr	r3, [pc, #144]	; (7068 <cb_follow_le+0x1c4>)
    6fd6:	68da      	ldr	r2, [r3, #12]
    6fd8:	4b26      	ldr	r3, [pc, #152]	; (7074 <cb_follow_le+0x1d0>)
    6fda:	681b      	ldr	r3, [r3, #0]
    6fdc:	3304      	adds	r3, #4
    6fde:	4610      	mov	r0, r2
    6fe0:	4619      	mov	r1, r3
    6fe2:	68fa      	ldr	r2, [r7, #12]
    6fe4:	f001 fb2a 	bl	863c <btle_crcgen_lut>
    6fe8:	60b8      	str	r0, [r7, #8]
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    6fea:	4b22      	ldr	r3, [pc, #136]	; (7074 <cb_follow_le+0x1d0>)
    6fec:	681a      	ldr	r2, [r3, #0]
    6fee:	68fb      	ldr	r3, [r7, #12]
    6ff0:	3306      	adds	r3, #6
    6ff2:	4413      	add	r3, r2
    6ff4:	781b      	ldrb	r3, [r3, #0]
    6ff6:	041a      	lsls	r2, r3, #16
							 | (idle_rxbuf[4+len+1] << 8)
    6ff8:	4b1e      	ldr	r3, [pc, #120]	; (7074 <cb_follow_le+0x1d0>)
    6ffa:	6819      	ldr	r1, [r3, #0]
    6ffc:	68fb      	ldr	r3, [r7, #12]
    6ffe:	3305      	adds	r3, #5
    7000:	440b      	add	r3, r1
    7002:	781b      	ldrb	r3, [r3, #0]
    7004:	021b      	lsls	r3, r3, #8
    7006:	4313      	orrs	r3, r2
							 |  idle_rxbuf[4+len+0];
    7008:	4a1a      	ldr	r2, [pc, #104]	; (7074 <cb_follow_le+0x1d0>)
    700a:	6812      	ldr	r2, [r2, #0]
    700c:	68f9      	ldr	r1, [r7, #12]
    700e:	3104      	adds	r1, #4
    7010:	440a      	add	r2, r1
    7012:	7812      	ldrb	r2, [r2, #0]
    7014:	4313      	orrs	r3, r2

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    7016:	607b      	str	r3, [r7, #4]
							 | (idle_rxbuf[4+len+1] << 8)
							 |  idle_rxbuf[4+len+0];
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    7018:	68ba      	ldr	r2, [r7, #8]
    701a:	687b      	ldr	r3, [r7, #4]
    701c:	429a      	cmp	r2, r3
    701e:	d000      	beq.n	7022 <cb_follow_le+0x17e>
					break;
    7020:	e017      	b.n	7052 <cb_follow_le+0x1ae>
			}

			// send to PC
			enqueue(LE_PACKET, idle_rxbuf);
    7022:	4b14      	ldr	r3, [pc, #80]	; (7074 <cb_follow_le+0x1d0>)
    7024:	681b      	ldr	r3, [r3, #0]
    7026:	2001      	movs	r0, #1
    7028:	4619      	mov	r1, r3
    702a:	f7fd fa4d 	bl	44c8 <enqueue>
			RXLED_SET;
    702e:	4b12      	ldr	r3, [pc, #72]	; (7078 <cb_follow_le+0x1d4>)
    7030:	2210      	movs	r2, #16
    7032:	601a      	str	r2, [r3, #0]

			packet_cb(idle_rxbuf);
    7034:	4b11      	ldr	r3, [pc, #68]	; (707c <cb_follow_le+0x1d8>)
    7036:	681b      	ldr	r3, [r3, #0]
    7038:	4a0e      	ldr	r2, [pc, #56]	; (7074 <cb_follow_le+0x1d0>)
    703a:	6812      	ldr	r2, [r2, #0]
    703c:	4610      	mov	r0, r2
    703e:	4798      	blx	r3

			break;
    7040:	e007      	b.n	7052 <cb_follow_le+0x1ae>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    7042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7044:	3301      	adds	r3, #1
    7046:	62fb      	str	r3, [r7, #44]	; 0x2c
    7048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    704a:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    704e:	f6ff af54 	blt.w	6efa <cb_follow_le+0x56>

			break;
		}
	}

	return 1;
    7052:	2301      	movs	r3, #1
}
    7054:	4618      	mov	r0, r3
    7056:	3730      	adds	r7, #48	; 0x30
    7058:	46bd      	mov	sp, r7
    705a:	bd80      	pop	{r7, pc}
    705c:	1000049c 	.word	0x1000049c
    7060:	0000b9dc 	.word	0x0000b9dc
    7064:	10000d00 	.word	0x10000d00
    7068:	10000458 	.word	0x10000458
    706c:	0000b95c 	.word	0x0000b95c
    7070:	02040811 	.word	0x02040811
    7074:	10000454 	.word	0x10000454
    7078:	2009c038 	.word	0x2009c038
    707c:	1000099c 	.word	0x1000099c

00007080 <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    7080:	b580      	push	{r7, lr}
    7082:	b08a      	sub	sp, #40	; 0x28
    7084:	af00      	add	r7, sp, #0
    7086:	6078      	str	r0, [r7, #4]
	int i;
	u32 aa = 0;
    7088:	2300      	movs	r3, #0
    708a:	623b      	str	r3, [r7, #32]
#define ADV_ADDRESS_IDX 0
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
    708c:	687b      	ldr	r3, [r7, #4]
    708e:	61fb      	str	r3, [r7, #28]
	u8 header = packet[HEADER_IDX];
    7090:	687b      	ldr	r3, [r7, #4]
    7092:	791b      	ldrb	r3, [r3, #4]
    7094:	76fb      	strb	r3, [r7, #27]
	u8 *data_len = &packet[DATA_LEN_IDX];
    7096:	687b      	ldr	r3, [r7, #4]
    7098:	3305      	adds	r3, #5
    709a:	617b      	str	r3, [r7, #20]
	u8 *data = &packet[DATA_START_IDX];
    709c:	687b      	ldr	r3, [r7, #4]
    709e:	3306      	adds	r3, #6
    70a0:	613b      	str	r3, [r7, #16]
	u8 *crc = &packet[DATA_START_IDX + *data_len];
    70a2:	697b      	ldr	r3, [r7, #20]
    70a4:	781b      	ldrb	r3, [r3, #0]
    70a6:	3306      	adds	r3, #6
    70a8:	461a      	mov	r2, r3
    70aa:	687b      	ldr	r3, [r7, #4]
    70ac:	4413      	add	r3, r2
    70ae:	60fb      	str	r3, [r7, #12]

	if (le.link_state == LINK_CONN_PENDING) {
    70b0:	4b8b      	ldr	r3, [pc, #556]	; (72e0 <connection_follow_cb+0x260>)
    70b2:	7d1b      	ldrb	r3, [r3, #20]
    70b4:	2b02      	cmp	r3, #2
    70b6:	d11c      	bne.n	70f2 <connection_follow_cb+0x72>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    70b8:	4b89      	ldr	r3, [pc, #548]	; (72e0 <connection_follow_cb+0x260>)
    70ba:	2203      	movs	r2, #3
    70bc:	751a      	strb	r2, [r3, #20]
		le.conn_epoch = clkn;
    70be:	4b89      	ldr	r3, [pc, #548]	; (72e4 <connection_follow_cb+0x264>)
    70c0:	681b      	ldr	r3, [r3, #0]
    70c2:	4a87      	ldr	r2, [pc, #540]	; (72e0 <connection_follow_cb+0x260>)
    70c4:	6193      	str	r3, [r2, #24]
		le.interval_timer = le.conn_interval - 1;
    70c6:	4b86      	ldr	r3, [pc, #536]	; (72e0 <connection_follow_cb+0x260>)
    70c8:	8bdb      	ldrh	r3, [r3, #30]
    70ca:	3b01      	subs	r3, #1
    70cc:	b29a      	uxth	r2, r3
    70ce:	4b84      	ldr	r3, [pc, #528]	; (72e0 <connection_follow_cb+0x260>)
    70d0:	839a      	strh	r2, [r3, #28]
		le.conn_count = 0;
    70d2:	4b83      	ldr	r3, [pc, #524]	; (72e0 <connection_follow_cb+0x260>)
    70d4:	2200      	movs	r2, #0
    70d6:	841a      	strh	r2, [r3, #32]
		le.update_pending = 0;
    70d8:	4b81      	ldr	r3, [pc, #516]	; (72e0 <connection_follow_cb+0x260>)
    70da:	2200      	movs	r2, #0
    70dc:	629a      	str	r2, [r3, #40]	; 0x28

		// hue hue hue
		if (jam_mode != JAM_NONE)
    70de:	4b82      	ldr	r3, [pc, #520]	; (72e8 <connection_follow_cb+0x268>)
    70e0:	781b      	ldrb	r3, [r3, #0]
    70e2:	b2db      	uxtb	r3, r3
    70e4:	2b00      	cmp	r3, #0
    70e6:	f000 80f7 	beq.w	72d8 <connection_follow_cb+0x258>
			le_jam_count = JAM_COUNT_DEFAULT;
    70ea:	4b80      	ldr	r3, [pc, #512]	; (72ec <connection_follow_cb+0x26c>)
    70ec:	2228      	movs	r2, #40	; 0x28
    70ee:	601a      	str	r2, [r3, #0]
    70f0:	e0f2      	b.n	72d8 <connection_follow_cb+0x258>

	} else if (le.link_state == LINK_CONNECTED) {
    70f2:	4b7b      	ldr	r3, [pc, #492]	; (72e0 <connection_follow_cb+0x260>)
    70f4:	7d1b      	ldrb	r3, [r3, #20]
    70f6:	2b03      	cmp	r3, #3
    70f8:	d16f      	bne.n	71da <connection_follow_cb+0x15a>
		u8 llid =  header & 0x03;
    70fa:	7efb      	ldrb	r3, [r7, #27]
    70fc:	f003 0303 	and.w	r3, r3, #3
    7100:	72fb      	strb	r3, [r7, #11]

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    7102:	4b77      	ldr	r3, [pc, #476]	; (72e0 <connection_follow_cb+0x260>)
    7104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7106:	2b00      	cmp	r3, #0
    7108:	d021      	beq.n	714e <connection_follow_cb+0xce>
    710a:	4b75      	ldr	r3, [pc, #468]	; (72e0 <connection_follow_cb+0x260>)
    710c:	8c1b      	ldrh	r3, [r3, #32]
    710e:	b29a      	uxth	r2, r3
    7110:	4b73      	ldr	r3, [pc, #460]	; (72e0 <connection_follow_cb+0x260>)
    7112:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    7114:	429a      	cmp	r2, r3
    7116:	d11a      	bne.n	714e <connection_follow_cb+0xce>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    7118:	4b72      	ldr	r3, [pc, #456]	; (72e4 <connection_follow_cb+0x264>)
    711a:	681b      	ldr	r3, [r3, #0]
    711c:	4a70      	ldr	r2, [pc, #448]	; (72e0 <connection_follow_cb+0x260>)
    711e:	6193      	str	r3, [r2, #24]
			le.conn_interval = le.interval_update;
    7120:	4b6f      	ldr	r3, [pc, #444]	; (72e0 <connection_follow_cb+0x260>)
    7122:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    7124:	4b6e      	ldr	r3, [pc, #440]	; (72e0 <connection_follow_cb+0x260>)
    7126:	83da      	strh	r2, [r3, #30]
			le.interval_timer = le.interval_update - 1;
    7128:	4b6d      	ldr	r3, [pc, #436]	; (72e0 <connection_follow_cb+0x260>)
    712a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    712c:	3b01      	subs	r3, #1
    712e:	b29a      	uxth	r2, r3
    7130:	4b6b      	ldr	r3, [pc, #428]	; (72e0 <connection_follow_cb+0x260>)
    7132:	839a      	strh	r2, [r3, #28]
			le.win_size = le.win_size_update;
    7134:	4b6a      	ldr	r3, [pc, #424]	; (72e0 <connection_follow_cb+0x260>)
    7136:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    713a:	4b69      	ldr	r3, [pc, #420]	; (72e0 <connection_follow_cb+0x260>)
    713c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			le.win_offset = le.win_offset_update;
    7140:	4b67      	ldr	r3, [pc, #412]	; (72e0 <connection_follow_cb+0x260>)
    7142:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    7144:	4b66      	ldr	r3, [pc, #408]	; (72e0 <connection_follow_cb+0x260>)
    7146:	849a      	strh	r2, [r3, #36]	; 0x24
			le.update_pending = 0;
    7148:	4b65      	ldr	r3, [pc, #404]	; (72e0 <connection_follow_cb+0x260>)
    714a:	2200      	movs	r2, #0
    714c:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if (llid == 0x03 && data[0] == 0x00) {
    714e:	7afb      	ldrb	r3, [r7, #11]
    7150:	2b03      	cmp	r3, #3
    7152:	d141      	bne.n	71d8 <connection_follow_cb+0x158>
    7154:	693b      	ldr	r3, [r7, #16]
    7156:	781b      	ldrb	r3, [r3, #0]
    7158:	2b00      	cmp	r3, #0
    715a:	d13d      	bne.n	71d8 <connection_follow_cb+0x158>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    715c:	687b      	ldr	r3, [r7, #4]
    715e:	79da      	ldrb	r2, [r3, #7]
    7160:	4b5f      	ldr	r3, [pc, #380]	; (72e0 <connection_follow_cb+0x260>)
    7162:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    7166:	687b      	ldr	r3, [r7, #4]
    7168:	3308      	adds	r3, #8
    716a:	781b      	ldrb	r3, [r3, #0]
    716c:	b29a      	uxth	r2, r3
    716e:	687b      	ldr	r3, [r7, #4]
    7170:	3309      	adds	r3, #9
    7172:	781b      	ldrb	r3, [r3, #0]
    7174:	b29b      	uxth	r3, r3
    7176:	021b      	lsls	r3, r3, #8
    7178:	b29b      	uxth	r3, r3
    717a:	4413      	add	r3, r2
    717c:	b29a      	uxth	r2, r3
    717e:	4b58      	ldr	r3, [pc, #352]	; (72e0 <connection_follow_cb+0x260>)
    7180:	865a      	strh	r2, [r3, #50]	; 0x32
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    7182:	687b      	ldr	r3, [r7, #4]
    7184:	330a      	adds	r3, #10
    7186:	781b      	ldrb	r3, [r3, #0]
    7188:	b29a      	uxth	r2, r3
    718a:	687b      	ldr	r3, [r7, #4]
    718c:	330b      	adds	r3, #11
    718e:	781b      	ldrb	r3, [r3, #0]
    7190:	b29b      	uxth	r3, r3
    7192:	021b      	lsls	r3, r3, #8
    7194:	b29b      	uxth	r3, r3
    7196:	4413      	add	r3, r2
    7198:	b29a      	uxth	r2, r3
    719a:	4b51      	ldr	r3, [pc, #324]	; (72e0 <connection_follow_cb+0x260>)
    719c:	85da      	strh	r2, [r3, #46]	; 0x2e
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    719e:	687b      	ldr	r3, [r7, #4]
    71a0:	3310      	adds	r3, #16
    71a2:	781b      	ldrb	r3, [r3, #0]
    71a4:	b29a      	uxth	r2, r3
    71a6:	687b      	ldr	r3, [r7, #4]
    71a8:	3311      	adds	r3, #17
    71aa:	781b      	ldrb	r3, [r3, #0]
    71ac:	b29b      	uxth	r3, r3
    71ae:	021b      	lsls	r3, r3, #8
    71b0:	b29b      	uxth	r3, r3
    71b2:	4413      	add	r3, r2
    71b4:	b29a      	uxth	r2, r3
    71b6:	4b4a      	ldr	r3, [pc, #296]	; (72e0 <connection_follow_cb+0x260>)
    71b8:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (le.update_instant - le.conn_count < 32767)
    71ba:	4b49      	ldr	r3, [pc, #292]	; (72e0 <connection_follow_cb+0x260>)
    71bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    71be:	461a      	mov	r2, r3
    71c0:	4b47      	ldr	r3, [pc, #284]	; (72e0 <connection_follow_cb+0x260>)
    71c2:	8c1b      	ldrh	r3, [r3, #32]
    71c4:	b29b      	uxth	r3, r3
    71c6:	1ad3      	subs	r3, r2, r3
    71c8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    71cc:	4293      	cmp	r3, r2
    71ce:	dc03      	bgt.n	71d8 <connection_follow_cb+0x158>
				le.update_pending = 1;
    71d0:	4b43      	ldr	r3, [pc, #268]	; (72e0 <connection_follow_cb+0x260>)
    71d2:	2201      	movs	r2, #1
    71d4:	629a      	str	r2, [r3, #40]	; 0x28
    71d6:	e07f      	b.n	72d8 <connection_follow_cb+0x258>
    71d8:	e07e      	b.n	72d8 <connection_follow_cb+0x258>
		}

	} else if (le.link_state == LINK_LISTENING) {
    71da:	4b41      	ldr	r3, [pc, #260]	; (72e0 <connection_follow_cb+0x260>)
    71dc:	7d1b      	ldrb	r3, [r3, #20]
    71de:	2b01      	cmp	r3, #1
    71e0:	d17a      	bne.n	72d8 <connection_follow_cb+0x258>
		u8 pkt_type = packet[4] & 0x0F;
    71e2:	687b      	ldr	r3, [r7, #4]
    71e4:	3304      	adds	r3, #4
    71e6:	781b      	ldrb	r3, [r3, #0]
    71e8:	f003 030f 	and.w	r3, r3, #15
    71ec:	72bb      	strb	r3, [r7, #10]
		if (pkt_type == 0x05) {
    71ee:	7abb      	ldrb	r3, [r7, #10]
    71f0:	2b05      	cmp	r3, #5
    71f2:	d171      	bne.n	72d8 <connection_follow_cb+0x258>
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    71f4:	4b3a      	ldr	r3, [pc, #232]	; (72e0 <connection_follow_cb+0x260>)
    71f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    71f8:	2b00      	cmp	r3, #0
    71fa:	d014      	beq.n	7226 <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    71fc:	687b      	ldr	r3, [r7, #4]
    71fe:	3306      	adds	r3, #6
    7200:	483b      	ldr	r0, [pc, #236]	; (72f0 <connection_follow_cb+0x270>)
    7202:	4619      	mov	r1, r3
    7204:	2206      	movs	r2, #6
    7206:	f004 faaf 	bl	b768 <memcmp>
    720a:	4603      	mov	r3, r0
	} else if (le.link_state == LINK_LISTENING) {
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    720c:	2b00      	cmp	r3, #0
    720e:	d00a      	beq.n	7226 <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    7210:	687b      	ldr	r3, [r7, #4]
    7212:	330c      	adds	r3, #12
    7214:	4836      	ldr	r0, [pc, #216]	; (72f0 <connection_follow_cb+0x270>)
    7216:	4619      	mov	r1, r3
    7218:	2206      	movs	r2, #6
    721a:	f004 faa5 	bl	b768 <memcmp>
    721e:	4603      	mov	r3, r0
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    7220:	2b00      	cmp	r3, #0
    7222:	d000      	beq.n	7226 <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
    7224:	e058      	b.n	72d8 <connection_follow_cb+0x258>
			}

			le.link_state = LINK_CONN_PENDING;
    7226:	4b2e      	ldr	r3, [pc, #184]	; (72e0 <connection_follow_cb+0x260>)
    7228:	2202      	movs	r2, #2
    722a:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    722c:	4b2c      	ldr	r3, [pc, #176]	; (72e0 <connection_follow_cb+0x260>)
    722e:	2200      	movs	r2, #0
    7230:	611a      	str	r2, [r3, #16]

			for (i = 0; i < 4; ++i)
    7232:	2300      	movs	r3, #0
    7234:	627b      	str	r3, [r7, #36]	; 0x24
    7236:	e011      	b.n	725c <connection_follow_cb+0x1dc>
				aa |= packet[18+i] << (i*8);
    7238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    723a:	3312      	adds	r3, #18
    723c:	461a      	mov	r2, r3
    723e:	687b      	ldr	r3, [r7, #4]
    7240:	4413      	add	r3, r2
    7242:	781b      	ldrb	r3, [r3, #0]
    7244:	461a      	mov	r2, r3
    7246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7248:	00db      	lsls	r3, r3, #3
    724a:	fa02 f303 	lsl.w	r3, r2, r3
    724e:	461a      	mov	r2, r3
    7250:	6a3b      	ldr	r3, [r7, #32]
    7252:	4313      	orrs	r3, r2
    7254:	623b      	str	r3, [r7, #32]
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    7256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7258:	3301      	adds	r3, #1
    725a:	627b      	str	r3, [r7, #36]	; 0x24
    725c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    725e:	2b03      	cmp	r3, #3
    7260:	ddea      	ble.n	7238 <connection_follow_cb+0x1b8>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    7262:	6a38      	ldr	r0, [r7, #32]
    7264:	f7ff f97e 	bl	6564 <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    7268:	687b      	ldr	r3, [r7, #4]
    726a:	3318      	adds	r3, #24
    726c:	781b      	ldrb	r3, [r3, #0]
    726e:	041a      	lsls	r2, r3, #16
						| (packet[CRC_INIT+1] << 8)
    7270:	687b      	ldr	r3, [r7, #4]
    7272:	3317      	adds	r3, #23
    7274:	781b      	ldrb	r3, [r3, #0]
    7276:	021b      	lsls	r3, r3, #8
    7278:	4313      	orrs	r3, r2
						|  packet[CRC_INIT+0];
    727a:	687a      	ldr	r2, [r7, #4]
    727c:	3216      	adds	r2, #22
    727e:	7812      	ldrb	r2, [r2, #0]
    7280:	4313      	orrs	r3, r2
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    7282:	461a      	mov	r2, r3
    7284:	4b16      	ldr	r3, [pc, #88]	; (72e0 <connection_follow_cb+0x260>)
    7286:	609a      	str	r2, [r3, #8]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    7288:	4b15      	ldr	r3, [pc, #84]	; (72e0 <connection_follow_cb+0x260>)
    728a:	689b      	ldr	r3, [r3, #8]
    728c:	4618      	mov	r0, r3
    728e:	f002 faf7 	bl	9880 <rbit>
    7292:	4602      	mov	r2, r0
    7294:	4b12      	ldr	r3, [pc, #72]	; (72e0 <connection_follow_cb+0x260>)
    7296:	60da      	str	r2, [r3, #12]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    7298:	687b      	ldr	r3, [r7, #4]
    729a:	7e5a      	ldrb	r2, [r3, #25]
    729c:	4b10      	ldr	r3, [pc, #64]	; (72e0 <connection_follow_cb+0x260>)
    729e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    72a2:	687b      	ldr	r3, [r7, #4]
    72a4:	331a      	adds	r3, #26
    72a6:	781b      	ldrb	r3, [r3, #0]
    72a8:	b29a      	uxth	r2, r3
    72aa:	4b0d      	ldr	r3, [pc, #52]	; (72e0 <connection_follow_cb+0x260>)
    72ac:	849a      	strh	r2, [r3, #36]	; 0x24

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = packet[CONN_INTERVAL];
    72ae:	687b      	ldr	r3, [r7, #4]
    72b0:	331c      	adds	r3, #28
    72b2:	781b      	ldrb	r3, [r3, #0]
    72b4:	b29a      	uxth	r2, r3
    72b6:	4b0a      	ldr	r3, [pc, #40]	; (72e0 <connection_follow_cb+0x260>)
    72b8:	83da      	strh	r2, [r3, #30]

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    72ba:	687b      	ldr	r3, [r7, #4]
    72bc:	3327      	adds	r3, #39	; 0x27
    72be:	781b      	ldrb	r3, [r3, #0]
    72c0:	f003 031f 	and.w	r3, r3, #31
    72c4:	b2da      	uxtb	r2, r3
    72c6:	4b06      	ldr	r3, [pc, #24]	; (72e0 <connection_follow_cb+0x260>)
    72c8:	759a      	strb	r2, [r3, #22]
			le.channel_idx = le.channel_increment;
    72ca:	4b05      	ldr	r3, [pc, #20]	; (72e0 <connection_follow_cb+0x260>)
    72cc:	7d9a      	ldrb	r2, [r3, #22]
    72ce:	4b04      	ldr	r3, [pc, #16]	; (72e0 <connection_follow_cb+0x260>)
    72d0:	755a      	strb	r2, [r3, #21]

			// Hop to the initial channel immediately
			do_hop = 1;
    72d2:	4b08      	ldr	r3, [pc, #32]	; (72f4 <connection_follow_cb+0x274>)
    72d4:	2201      	movs	r2, #1
    72d6:	701a      	strb	r2, [r3, #0]
		}
	}
}
    72d8:	3728      	adds	r7, #40	; 0x28
    72da:	46bd      	mov	sp, r7
    72dc:	bd80      	pop	{r7, pc}
    72de:	bf00      	nop
    72e0:	10000458 	.word	0x10000458
    72e4:	10000be4 	.word	0x10000be4
    72e8:	10000a40 	.word	0x10000a40
    72ec:	10000994 	.word	0x10000994
    72f0:	1000048c 	.word	0x1000048c
    72f4:	1000097d 	.word	0x1000097d

000072f8 <bt_follow_le>:

void bt_follow_le() {
    72f8:	b580      	push	{r7, lr}
    72fa:	af00      	add	r7, sp, #0
	reset_le();
    72fc:	f7ff f94c 	bl	6598 <reset_le>
	packet_cb = connection_follow_cb;
    7300:	4b04      	ldr	r3, [pc, #16]	; (7314 <bt_follow_le+0x1c>)
    7302:	4a05      	ldr	r2, [pc, #20]	; (7318 <bt_follow_le+0x20>)
    7304:	601a      	str	r2, [r3, #0]
	bt_le_sync(MODE_BT_FOLLOW_LE);
    7306:	2009      	movs	r0, #9
    7308:	f7ff fb1e 	bl	6948 <bt_le_sync>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    730c:	4b03      	ldr	r3, [pc, #12]	; (731c <bt_follow_le+0x24>)
    730e:	2200      	movs	r2, #0
    7310:	701a      	strb	r2, [r3, #0]
}
    7312:	bd80      	pop	{r7, pc}
    7314:	1000099c 	.word	0x1000099c
    7318:	00007081 	.word	0x00007081
    731c:	10000a3e 	.word	0x10000a3e

00007320 <le_promisc_state>:

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    7320:	b580      	push	{r7, lr}
    7322:	b092      	sub	sp, #72	; 0x48
    7324:	af00      	add	r7, sp, #0
    7326:	4603      	mov	r3, r0
    7328:	60b9      	str	r1, [r7, #8]
    732a:	607a      	str	r2, [r7, #4]
    732c:	73fb      	strb	r3, [r7, #15]
	u8 buf[50] = { 0, };
    732e:	f107 0314 	add.w	r3, r7, #20
    7332:	2200      	movs	r2, #0
    7334:	601a      	str	r2, [r3, #0]
    7336:	3304      	adds	r3, #4
    7338:	2200      	movs	r2, #0
    733a:	601a      	str	r2, [r3, #0]
    733c:	3304      	adds	r3, #4
    733e:	2200      	movs	r2, #0
    7340:	601a      	str	r2, [r3, #0]
    7342:	3304      	adds	r3, #4
    7344:	2200      	movs	r2, #0
    7346:	601a      	str	r2, [r3, #0]
    7348:	3304      	adds	r3, #4
    734a:	2200      	movs	r2, #0
    734c:	601a      	str	r2, [r3, #0]
    734e:	3304      	adds	r3, #4
    7350:	2200      	movs	r2, #0
    7352:	601a      	str	r2, [r3, #0]
    7354:	3304      	adds	r3, #4
    7356:	2200      	movs	r2, #0
    7358:	601a      	str	r2, [r3, #0]
    735a:	3304      	adds	r3, #4
    735c:	2200      	movs	r2, #0
    735e:	601a      	str	r2, [r3, #0]
    7360:	3304      	adds	r3, #4
    7362:	2200      	movs	r2, #0
    7364:	601a      	str	r2, [r3, #0]
    7366:	3304      	adds	r3, #4
    7368:	2200      	movs	r2, #0
    736a:	601a      	str	r2, [r3, #0]
    736c:	3304      	adds	r3, #4
    736e:	2200      	movs	r2, #0
    7370:	601a      	str	r2, [r3, #0]
    7372:	3304      	adds	r3, #4
    7374:	2200      	movs	r2, #0
    7376:	601a      	str	r2, [r3, #0]
    7378:	3304      	adds	r3, #4
    737a:	2200      	movs	r2, #0
    737c:	801a      	strh	r2, [r3, #0]
    737e:	3302      	adds	r3, #2
	if (len > 49)
    7380:	687b      	ldr	r3, [r7, #4]
    7382:	2b31      	cmp	r3, #49	; 0x31
    7384:	d901      	bls.n	738a <le_promisc_state+0x6a>
		len = 49;
    7386:	2331      	movs	r3, #49	; 0x31
    7388:	607b      	str	r3, [r7, #4]

	buf[0] = type;
    738a:	7bfb      	ldrb	r3, [r7, #15]
    738c:	753b      	strb	r3, [r7, #20]
	memcpy(&buf[1], data, len);
    738e:	f107 0314 	add.w	r3, r7, #20
    7392:	3301      	adds	r3, #1
    7394:	4618      	mov	r0, r3
    7396:	68b9      	ldr	r1, [r7, #8]
    7398:	687a      	ldr	r2, [r7, #4]
    739a:	f004 fa17 	bl	b7cc <memcpy>
	enqueue(LE_PROMISC, buf);
    739e:	f107 0314 	add.w	r3, r7, #20
    73a2:	2005      	movs	r0, #5
    73a4:	4619      	mov	r1, r3
    73a6:	f7fd f88f 	bl	44c8 <enqueue>
}
    73aa:	3748      	adds	r7, #72	; 0x48
    73ac:	46bd      	mov	sp, r7
    73ae:	bd80      	pop	{r7, pc}

000073b0 <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    73b0:	b580      	push	{r7, lr}
    73b2:	b084      	sub	sp, #16
    73b4:	af00      	add	r7, sp, #0
    73b6:	6078      	str	r0, [r7, #4]
	static u32 first_ts = 0;
	if (channel == 2404) {
    73b8:	4b55      	ldr	r3, [pc, #340]	; (7510 <promisc_recover_hop_increment+0x160>)
    73ba:	881b      	ldrh	r3, [r3, #0]
    73bc:	b29b      	uxth	r3, r3
    73be:	f640 1264 	movw	r2, #2404	; 0x964
    73c2:	4293      	cmp	r3, r2
    73c4:	d114      	bne.n	73f0 <promisc_recover_hop_increment+0x40>
		first_ts = CLK100NS;
    73c6:	4b53      	ldr	r3, [pc, #332]	; (7514 <promisc_recover_hop_increment+0x164>)
    73c8:	681b      	ldr	r3, [r3, #0]
    73ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
    73ce:	f640 4235 	movw	r2, #3125	; 0xc35
    73d2:	fb02 f203 	mul.w	r2, r2, r3
    73d6:	4b50      	ldr	r3, [pc, #320]	; (7518 <promisc_recover_hop_increment+0x168>)
    73d8:	681b      	ldr	r3, [r3, #0]
    73da:	4413      	add	r3, r2
    73dc:	4a4f      	ldr	r2, [pc, #316]	; (751c <promisc_recover_hop_increment+0x16c>)
    73de:	6013      	str	r3, [r2, #0]
		hop_direct_channel = 2406;
    73e0:	4b4f      	ldr	r3, [pc, #316]	; (7520 <promisc_recover_hop_increment+0x170>)
    73e2:	f640 1266 	movw	r2, #2406	; 0x966
    73e6:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    73e8:	4b4e      	ldr	r3, [pc, #312]	; (7524 <promisc_recover_hop_increment+0x174>)
    73ea:	2201      	movs	r2, #1
    73ec:	701a      	strb	r2, [r3, #0]
    73ee:	e08b      	b.n	7508 <promisc_recover_hop_increment+0x158>
	} else if (channel == 2406) {
    73f0:	4b47      	ldr	r3, [pc, #284]	; (7510 <promisc_recover_hop_increment+0x160>)
    73f2:	881b      	ldrh	r3, [r3, #0]
    73f4:	b29b      	uxth	r3, r3
    73f6:	f640 1266 	movw	r2, #2406	; 0x966
    73fa:	4293      	cmp	r3, r2
    73fc:	d17d      	bne.n	74fa <promisc_recover_hop_increment+0x14a>
		u32 second_ts = CLK100NS;
    73fe:	4b45      	ldr	r3, [pc, #276]	; (7514 <promisc_recover_hop_increment+0x164>)
    7400:	681b      	ldr	r3, [r3, #0]
    7402:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7406:	f640 4235 	movw	r2, #3125	; 0xc35
    740a:	fb02 f203 	mul.w	r2, r2, r3
    740e:	4b42      	ldr	r3, [pc, #264]	; (7518 <promisc_recover_hop_increment+0x168>)
    7410:	681b      	ldr	r3, [r3, #0]
    7412:	4413      	add	r3, r2
    7414:	60fb      	str	r3, [r7, #12]
		if (second_ts < first_ts)
    7416:	4b41      	ldr	r3, [pc, #260]	; (751c <promisc_recover_hop_increment+0x16c>)
    7418:	681b      	ldr	r3, [r3, #0]
    741a:	68fa      	ldr	r2, [r7, #12]
    741c:	429a      	cmp	r2, r3
    741e:	d205      	bcs.n	742c <promisc_recover_hop_increment+0x7c>
			second_ts += 3276800000; // handle rollover
    7420:	68fb      	ldr	r3, [r7, #12]
    7422:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    7426:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    742a:	60fb      	str	r3, [r7, #12]
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    742c:	4b3b      	ldr	r3, [pc, #236]	; (751c <promisc_recover_hop_increment+0x16c>)
    742e:	681b      	ldr	r3, [r3, #0]
    7430:	68fa      	ldr	r2, [r7, #12]
    7432:	1ad2      	subs	r2, r2, r3
    7434:	4b3c      	ldr	r3, [pc, #240]	; (7528 <promisc_recover_hop_increment+0x178>)
    7436:	8bdb      	ldrh	r3, [r3, #30]
    7438:	4619      	mov	r1, r3
    743a:	f243 03d4 	movw	r3, #12500	; 0x30d4
    743e:	fb03 f301 	mul.w	r3, r3, r1
    7442:	0fd9      	lsrs	r1, r3, #31
    7444:	440b      	add	r3, r1
    7446:	105b      	asrs	r3, r3, #1
    7448:	4413      	add	r3, r2
    744a:	4a37      	ldr	r2, [pc, #220]	; (7528 <promisc_recover_hop_increment+0x178>)
    744c:	8bd2      	ldrh	r2, [r2, #30]
    744e:	4611      	mov	r1, r2
    7450:	f243 02d4 	movw	r2, #12500	; 0x30d4
    7454:	fb02 f201 	mul.w	r2, r2, r1
    7458:	fbb3 f3f2 	udiv	r3, r3, r2
    745c:	60bb      	str	r3, [r7, #8]
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    745e:	68bb      	ldr	r3, [r7, #8]
    7460:	2b24      	cmp	r3, #36	; 0x24
    7462:	d842      	bhi.n	74ea <promisc_recover_hop_increment+0x13a>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    7464:	4a31      	ldr	r2, [pc, #196]	; (752c <promisc_recover_hop_increment+0x17c>)
    7466:	68bb      	ldr	r3, [r7, #8]
    7468:	4413      	add	r3, r2
    746a:	781a      	ldrb	r2, [r3, #0]
    746c:	4b2e      	ldr	r3, [pc, #184]	; (7528 <promisc_recover_hop_increment+0x178>)
    746e:	759a      	strb	r2, [r3, #22]
			le.interval_timer = le.conn_interval / 2;
    7470:	4b2d      	ldr	r3, [pc, #180]	; (7528 <promisc_recover_hop_increment+0x178>)
    7472:	8bdb      	ldrh	r3, [r3, #30]
    7474:	085b      	lsrs	r3, r3, #1
    7476:	b29a      	uxth	r2, r3
    7478:	4b2b      	ldr	r3, [pc, #172]	; (7528 <promisc_recover_hop_increment+0x178>)
    747a:	839a      	strh	r2, [r3, #28]
			le.conn_count = 0;
    747c:	4b2a      	ldr	r3, [pc, #168]	; (7528 <promisc_recover_hop_increment+0x178>)
    747e:	2200      	movs	r2, #0
    7480:	841a      	strh	r2, [r3, #32]
			le.conn_epoch = 0;
    7482:	4b29      	ldr	r3, [pc, #164]	; (7528 <promisc_recover_hop_increment+0x178>)
    7484:	2200      	movs	r2, #0
    7486:	619a      	str	r2, [r3, #24]
			do_hop = 0;
    7488:	4b26      	ldr	r3, [pc, #152]	; (7524 <promisc_recover_hop_increment+0x174>)
    748a:	2200      	movs	r2, #0
    748c:	701a      	strb	r2, [r3, #0]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    748e:	4b26      	ldr	r3, [pc, #152]	; (7528 <promisc_recover_hop_increment+0x178>)
    7490:	7d9b      	ldrb	r3, [r3, #22]
    7492:	1c5a      	adds	r2, r3, #1
    7494:	4b26      	ldr	r3, [pc, #152]	; (7530 <promisc_recover_hop_increment+0x180>)
    7496:	fb82 0103 	smull	r0, r1, r2, r3
    749a:	1853      	adds	r3, r2, r1
    749c:	1159      	asrs	r1, r3, #5
    749e:	17d3      	asrs	r3, r2, #31
    74a0:	1ac9      	subs	r1, r1, r3
    74a2:	460b      	mov	r3, r1
    74a4:	00db      	lsls	r3, r3, #3
    74a6:	440b      	add	r3, r1
    74a8:	009b      	lsls	r3, r3, #2
    74aa:	440b      	add	r3, r1
    74ac:	1ad1      	subs	r1, r2, r3
    74ae:	b2ca      	uxtb	r2, r1
    74b0:	4b1d      	ldr	r3, [pc, #116]	; (7528 <promisc_recover_hop_increment+0x178>)
    74b2:	755a      	strb	r2, [r3, #21]
			le.link_state = LINK_CONNECTED;
    74b4:	4b1c      	ldr	r3, [pc, #112]	; (7528 <promisc_recover_hop_increment+0x178>)
    74b6:	2203      	movs	r2, #3
    74b8:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0;
    74ba:	4b1b      	ldr	r3, [pc, #108]	; (7528 <promisc_recover_hop_increment+0x178>)
    74bc:	2200      	movs	r2, #0
    74be:	611a      	str	r2, [r3, #16]
			hop_mode = HOP_BTLE;
    74c0:	4b1c      	ldr	r3, [pc, #112]	; (7534 <promisc_recover_hop_increment+0x184>)
    74c2:	2203      	movs	r2, #3
    74c4:	701a      	strb	r2, [r3, #0]
			packet_cb = connection_follow_cb;
    74c6:	4b1c      	ldr	r3, [pc, #112]	; (7538 <promisc_recover_hop_increment+0x188>)
    74c8:	4a1c      	ldr	r2, [pc, #112]	; (753c <promisc_recover_hop_increment+0x18c>)
    74ca:	601a      	str	r2, [r3, #0]
			le_promisc_state(3, &le.channel_increment, 1);
    74cc:	2003      	movs	r0, #3
    74ce:	491c      	ldr	r1, [pc, #112]	; (7540 <promisc_recover_hop_increment+0x190>)
    74d0:	2201      	movs	r2, #1
    74d2:	f7ff ff25 	bl	7320 <le_promisc_state>

			if (jam_mode != JAM_NONE)
    74d6:	4b1b      	ldr	r3, [pc, #108]	; (7544 <promisc_recover_hop_increment+0x194>)
    74d8:	781b      	ldrb	r3, [r3, #0]
    74da:	b2db      	uxtb	r3, r3
    74dc:	2b00      	cmp	r3, #0
    74de:	d003      	beq.n	74e8 <promisc_recover_hop_increment+0x138>
				le_jam_count = JAM_COUNT_DEFAULT;
    74e0:	4b19      	ldr	r3, [pc, #100]	; (7548 <promisc_recover_hop_increment+0x198>)
    74e2:	2228      	movs	r2, #40	; 0x28
    74e4:	601a      	str	r2, [r3, #0]

			return;
    74e6:	e00f      	b.n	7508 <promisc_recover_hop_increment+0x158>
    74e8:	e00e      	b.n	7508 <promisc_recover_hop_increment+0x158>
		}
		hop_direct_channel = 2404;
    74ea:	4b0d      	ldr	r3, [pc, #52]	; (7520 <promisc_recover_hop_increment+0x170>)
    74ec:	f640 1264 	movw	r2, #2404	; 0x964
    74f0:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    74f2:	4b0c      	ldr	r3, [pc, #48]	; (7524 <promisc_recover_hop_increment+0x174>)
    74f4:	2201      	movs	r2, #1
    74f6:	701a      	strb	r2, [r3, #0]
    74f8:	e006      	b.n	7508 <promisc_recover_hop_increment+0x158>
	}
	else {
		hop_direct_channel = 2404;
    74fa:	4b09      	ldr	r3, [pc, #36]	; (7520 <promisc_recover_hop_increment+0x170>)
    74fc:	f640 1264 	movw	r2, #2404	; 0x964
    7500:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    7502:	4b08      	ldr	r3, [pc, #32]	; (7524 <promisc_recover_hop_increment+0x174>)
    7504:	2201      	movs	r2, #1
    7506:	701a      	strb	r2, [r3, #0]
	}
}
    7508:	3710      	adds	r7, #16
    750a:	46bd      	mov	sp, r7
    750c:	bd80      	pop	{r7, pc}
    750e:	bf00      	nop
    7510:	1000049c 	.word	0x1000049c
    7514:	10000be4 	.word	0x10000be4
    7518:	40004008 	.word	0x40004008
    751c:	10000a54 	.word	0x10000a54
    7520:	10000980 	.word	0x10000980
    7524:	1000097d 	.word	0x1000097d
    7528:	10000458 	.word	0x10000458
    752c:	0000ba04 	.word	0x0000ba04
    7530:	dd67c8a7 	.word	0xdd67c8a7
    7534:	1000097c 	.word	0x1000097c
    7538:	1000099c 	.word	0x1000099c
    753c:	00007081 	.word	0x00007081
    7540:	1000046e 	.word	0x1000046e
    7544:	10000a40 	.word	0x10000a40
    7548:	10000994 	.word	0x10000994

0000754c <promisc_recover_hop_interval>:

void promisc_recover_hop_interval(u8 *packet) {
    754c:	b580      	push	{r7, lr}
    754e:	b086      	sub	sp, #24
    7550:	af00      	add	r7, sp, #0
    7552:	6078      	str	r0, [r7, #4]
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    7554:	4b33      	ldr	r3, [pc, #204]	; (7624 <promisc_recover_hop_interval+0xd8>)
    7556:	681b      	ldr	r3, [r3, #0]
    7558:	f3c3 0313 	ubfx	r3, r3, #0, #20
    755c:	f640 4235 	movw	r2, #3125	; 0xc35
    7560:	fb02 f203 	mul.w	r2, r2, r3
    7564:	4b30      	ldr	r3, [pc, #192]	; (7628 <promisc_recover_hop_interval+0xdc>)
    7566:	681b      	ldr	r3, [r3, #0]
    7568:	4413      	add	r3, r2
    756a:	617b      	str	r3, [r7, #20]
	if (cur_clk < prev_clk)
    756c:	4b2f      	ldr	r3, [pc, #188]	; (762c <promisc_recover_hop_interval+0xe0>)
    756e:	681b      	ldr	r3, [r3, #0]
    7570:	697a      	ldr	r2, [r7, #20]
    7572:	429a      	cmp	r2, r3
    7574:	d203      	bcs.n	757e <promisc_recover_hop_interval+0x32>
		cur_clk += 3267800000; // handle rollover
    7576:	697a      	ldr	r2, [r7, #20]
    7578:	4b2d      	ldr	r3, [pc, #180]	; (7630 <promisc_recover_hop_interval+0xe4>)
    757a:	4413      	add	r3, r2
    757c:	617b      	str	r3, [r7, #20]
	u32 clk_diff = cur_clk - prev_clk;
    757e:	4b2b      	ldr	r3, [pc, #172]	; (762c <promisc_recover_hop_interval+0xe0>)
    7580:	681b      	ldr	r3, [r3, #0]
    7582:	697a      	ldr	r2, [r7, #20]
    7584:	1ad3      	subs	r3, r2, r3
    7586:	613b      	str	r3, [r7, #16]
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    7588:	693b      	ldr	r3, [r7, #16]
    758a:	f246 12a7 	movw	r2, #24999	; 0x61a7
    758e:	4293      	cmp	r3, r2
    7590:	d800      	bhi.n	7594 <promisc_recover_hop_interval+0x48>
		return;
    7592:	e043      	b.n	761c <promisc_recover_hop_interval+0xd0>

	if (clk_diff < le_promisc.smallest_hop_interval)
    7594:	4b27      	ldr	r3, [pc, #156]	; (7634 <promisc_recover_hop_interval+0xe8>)
    7596:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    759a:	693b      	ldr	r3, [r7, #16]
    759c:	429a      	cmp	r2, r3
    759e:	d903      	bls.n	75a8 <promisc_recover_hop_interval+0x5c>
		le_promisc.smallest_hop_interval = clk_diff;
    75a0:	4a24      	ldr	r2, [pc, #144]	; (7634 <promisc_recover_hop_interval+0xe8>)
    75a2:	693b      	ldr	r3, [r7, #16]
    75a4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    75a8:	4b22      	ldr	r3, [pc, #136]	; (7634 <promisc_recover_hop_interval+0xe8>)
    75aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    75ae:	f503 3361 	add.w	r3, r3, #230400	; 0x38400
    75b2:	f203 3352 	addw	r3, r3, #850	; 0x352
    75b6:	4a20      	ldr	r2, [pc, #128]	; (7638 <promisc_recover_hop_interval+0xec>)
    75b8:	fba2 2303 	umull	r2, r3, r2, r3
    75bc:	0c9b      	lsrs	r3, r3, #18
    75be:	81fb      	strh	r3, [r7, #14]

	if (le.conn_interval == obsv_hop_interval) {
    75c0:	4b1e      	ldr	r3, [pc, #120]	; (763c <promisc_recover_hop_interval+0xf0>)
    75c2:	8bdb      	ldrh	r3, [r3, #30]
    75c4:	89fa      	ldrh	r2, [r7, #14]
    75c6:	429a      	cmp	r2, r3
    75c8:	d11e      	bne.n	7608 <promisc_recover_hop_interval+0xbc>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    75ca:	4b1a      	ldr	r3, [pc, #104]	; (7634 <promisc_recover_hop_interval+0xe8>)
    75cc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    75d0:	3301      	adds	r3, #1
    75d2:	4a18      	ldr	r2, [pc, #96]	; (7634 <promisc_recover_hop_interval+0xe8>)
    75d4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    75d8:	4b16      	ldr	r3, [pc, #88]	; (7634 <promisc_recover_hop_interval+0xe8>)
    75da:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    75de:	2b05      	cmp	r3, #5
    75e0:	d119      	bne.n	7616 <promisc_recover_hop_interval+0xca>
			packet_cb = promisc_recover_hop_increment;
    75e2:	4b17      	ldr	r3, [pc, #92]	; (7640 <promisc_recover_hop_interval+0xf4>)
    75e4:	4a17      	ldr	r2, [pc, #92]	; (7644 <promisc_recover_hop_interval+0xf8>)
    75e6:	601a      	str	r2, [r3, #0]
			hop_direct_channel = 2404;
    75e8:	4b17      	ldr	r3, [pc, #92]	; (7648 <promisc_recover_hop_interval+0xfc>)
    75ea:	f640 1264 	movw	r2, #2404	; 0x964
    75ee:	801a      	strh	r2, [r3, #0]
			hop_mode = HOP_DIRECT;
    75f0:	4b16      	ldr	r3, [pc, #88]	; (764c <promisc_recover_hop_interval+0x100>)
    75f2:	2204      	movs	r2, #4
    75f4:	701a      	strb	r2, [r3, #0]
			do_hop = 1;
    75f6:	4b16      	ldr	r3, [pc, #88]	; (7650 <promisc_recover_hop_interval+0x104>)
    75f8:	2201      	movs	r2, #1
    75fa:	701a      	strb	r2, [r3, #0]
			le_promisc_state(2, &le.conn_interval, 2);
    75fc:	2002      	movs	r0, #2
    75fe:	4915      	ldr	r1, [pc, #84]	; (7654 <promisc_recover_hop_interval+0x108>)
    7600:	2202      	movs	r2, #2
    7602:	f7ff fe8d 	bl	7320 <le_promisc_state>
    7606:	e006      	b.n	7616 <promisc_recover_hop_interval+0xca>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    7608:	4a0c      	ldr	r2, [pc, #48]	; (763c <promisc_recover_hop_interval+0xf0>)
    760a:	89fb      	ldrh	r3, [r7, #14]
    760c:	83d3      	strh	r3, [r2, #30]
		le_promisc.consec_intervals = 0;
    760e:	4b09      	ldr	r3, [pc, #36]	; (7634 <promisc_recover_hop_interval+0xe8>)
    7610:	2200      	movs	r2, #0
    7612:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	prev_clk = cur_clk;
    7616:	4a05      	ldr	r2, [pc, #20]	; (762c <promisc_recover_hop_interval+0xe0>)
    7618:	697b      	ldr	r3, [r7, #20]
    761a:	6013      	str	r3, [r2, #0]
}
    761c:	3718      	adds	r7, #24
    761e:	46bd      	mov	sp, r7
    7620:	bd80      	pop	{r7, pc}
    7622:	bf00      	nop
    7624:	10000be4 	.word	0x10000be4
    7628:	40004008 	.word	0x40004008
    762c:	10000a58 	.word	0x10000a58
    7630:	c2c6abc0 	.word	0xc2c6abc0
    7634:	10000bec 	.word	0x10000bec
    7638:	9119a9c1 	.word	0x9119a9c1
    763c:	10000458 	.word	0x10000458
    7640:	1000099c 	.word	0x1000099c
    7644:	000073b1 	.word	0x000073b1
    7648:	10000980 	.word	0x10000980
    764c:	1000097c 	.word	0x1000097c
    7650:	1000097d 	.word	0x1000097d
    7654:	10000476 	.word	0x10000476

00007658 <promisc_follow_cb>:

void promisc_follow_cb(u8 *packet) {
    7658:	b580      	push	{r7, lr}
    765a:	b084      	sub	sp, #16
    765c:	af00      	add	r7, sp, #0
    765e:	6078      	str	r0, [r7, #4]
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    7660:	4b28      	ldr	r3, [pc, #160]	; (7704 <promisc_follow_cb+0xac>)
    7662:	691b      	ldr	r3, [r3, #16]
    7664:	2b00      	cmp	r3, #0
    7666:	d149      	bne.n	76fc <promisc_follow_cb+0xa4>
    7668:	687b      	ldr	r3, [r7, #4]
    766a:	3304      	adds	r3, #4
    766c:	781b      	ldrb	r3, [r3, #0]
    766e:	2b01      	cmp	r3, #1
    7670:	d144      	bne.n	76fc <promisc_follow_cb+0xa4>
    7672:	687b      	ldr	r3, [r7, #4]
    7674:	3305      	adds	r3, #5
    7676:	781b      	ldrb	r3, [r3, #0]
    7678:	2b00      	cmp	r3, #0
    767a:	d13f      	bne.n	76fc <promisc_follow_cb+0xa4>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    767c:	687b      	ldr	r3, [r7, #4]
    767e:	3308      	adds	r3, #8
    7680:	781b      	ldrb	r3, [r3, #0]
    7682:	041a      	lsls	r2, r3, #16
    7684:	687b      	ldr	r3, [r7, #4]
    7686:	3307      	adds	r3, #7
    7688:	781b      	ldrb	r3, [r3, #0]
    768a:	021b      	lsls	r3, r3, #8
    768c:	4313      	orrs	r3, r2
    768e:	687a      	ldr	r2, [r7, #4]
    7690:	3206      	adds	r2, #6
    7692:	7812      	ldrb	r2, [r2, #0]
    7694:	4313      	orrs	r3, r2
    7696:	60bb      	str	r3, [r7, #8]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    7698:	687b      	ldr	r3, [r7, #4]
    769a:	3304      	adds	r3, #4
    769c:	68b8      	ldr	r0, [r7, #8]
    769e:	4619      	mov	r1, r3
    76a0:	2202      	movs	r2, #2
    76a2:	f000 ff69 	bl	8578 <btle_reverse_crc>
    76a6:	4602      	mov	r2, r0
    76a8:	4b16      	ldr	r3, [pc, #88]	; (7704 <promisc_follow_cb+0xac>)
    76aa:	609a      	str	r2, [r3, #8]
		le.crc_init_reversed = 0;
    76ac:	4b15      	ldr	r3, [pc, #84]	; (7704 <promisc_follow_cb+0xac>)
    76ae:	2200      	movs	r2, #0
    76b0:	60da      	str	r2, [r3, #12]
		for (i = 0; i < 24; ++i)
    76b2:	2300      	movs	r3, #0
    76b4:	60fb      	str	r3, [r7, #12]
    76b6:	e013      	b.n	76e0 <promisc_follow_cb+0x88>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    76b8:	4b12      	ldr	r3, [pc, #72]	; (7704 <promisc_follow_cb+0xac>)
    76ba:	68da      	ldr	r2, [r3, #12]
    76bc:	4b11      	ldr	r3, [pc, #68]	; (7704 <promisc_follow_cb+0xac>)
    76be:	6899      	ldr	r1, [r3, #8]
    76c0:	68fb      	ldr	r3, [r7, #12]
    76c2:	fa21 f303 	lsr.w	r3, r1, r3
    76c6:	f003 0101 	and.w	r1, r3, #1
    76ca:	68fb      	ldr	r3, [r7, #12]
    76cc:	f1c3 0317 	rsb	r3, r3, #23
    76d0:	fa01 f303 	lsl.w	r3, r1, r3
    76d4:	4313      	orrs	r3, r2
    76d6:	4a0b      	ldr	r2, [pc, #44]	; (7704 <promisc_follow_cb+0xac>)
    76d8:	60d3      	str	r3, [r2, #12]
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    76da:	68fb      	ldr	r3, [r7, #12]
    76dc:	3301      	adds	r3, #1
    76de:	60fb      	str	r3, [r7, #12]
    76e0:	68fb      	ldr	r3, [r7, #12]
    76e2:	2b17      	cmp	r3, #23
    76e4:	dde8      	ble.n	76b8 <promisc_follow_cb+0x60>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    76e6:	4b07      	ldr	r3, [pc, #28]	; (7704 <promisc_follow_cb+0xac>)
    76e8:	2201      	movs	r2, #1
    76ea:	611a      	str	r2, [r3, #16]
		packet_cb = promisc_recover_hop_interval;
    76ec:	4b06      	ldr	r3, [pc, #24]	; (7708 <promisc_follow_cb+0xb0>)
    76ee:	4a07      	ldr	r2, [pc, #28]	; (770c <promisc_follow_cb+0xb4>)
    76f0:	601a      	str	r2, [r3, #0]
		le_promisc_state(1, &le.crc_init, 3);
    76f2:	2001      	movs	r0, #1
    76f4:	4906      	ldr	r1, [pc, #24]	; (7710 <promisc_follow_cb+0xb8>)
    76f6:	2203      	movs	r2, #3
    76f8:	f7ff fe12 	bl	7320 <le_promisc_state>
	}
}
    76fc:	3710      	adds	r7, #16
    76fe:	46bd      	mov	sp, r7
    7700:	bd80      	pop	{r7, pc}
    7702:	bf00      	nop
    7704:	10000458 	.word	0x10000458
    7708:	1000099c 	.word	0x1000099c
    770c:	0000754d 	.word	0x0000754d
    7710:	10000460 	.word	0x10000460

00007714 <see_aa>:

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    7714:	b480      	push	{r7}
    7716:	b087      	sub	sp, #28
    7718:	af00      	add	r7, sp, #0
    771a:	6078      	str	r0, [r7, #4]
	int i, max = -1, killme = -1;
    771c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7720:	613b      	str	r3, [r7, #16]
    7722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7726:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7728:	2300      	movs	r3, #0
    772a:	617b      	str	r3, [r7, #20]
    772c:	e015      	b.n	775a <see_aa+0x46>
		if (le_promisc.active_aa[i].aa == aa) {
    772e:	4a22      	ldr	r2, [pc, #136]	; (77b8 <see_aa+0xa4>)
    7730:	697b      	ldr	r3, [r7, #20]
    7732:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    7736:	687b      	ldr	r3, [r7, #4]
    7738:	429a      	cmp	r2, r3
    773a:	d10b      	bne.n	7754 <see_aa+0x40>
			++le_promisc.active_aa[i].count;
    773c:	4a1e      	ldr	r2, [pc, #120]	; (77b8 <see_aa+0xa4>)
    773e:	697b      	ldr	r3, [r7, #20]
    7740:	00db      	lsls	r3, r3, #3
    7742:	4413      	add	r3, r2
    7744:	685b      	ldr	r3, [r3, #4]
    7746:	1c5a      	adds	r2, r3, #1
    7748:	491b      	ldr	r1, [pc, #108]	; (77b8 <see_aa+0xa4>)
    774a:	697b      	ldr	r3, [r7, #20]
    774c:	00db      	lsls	r3, r3, #3
    774e:	440b      	add	r3, r1
    7750:	605a      	str	r2, [r3, #4]
			return;
    7752:	e02c      	b.n	77ae <see_aa+0x9a>
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7754:	697b      	ldr	r3, [r7, #20]
    7756:	3301      	adds	r3, #1
    7758:	617b      	str	r3, [r7, #20]
    775a:	697b      	ldr	r3, [r7, #20]
    775c:	2b1f      	cmp	r3, #31
    775e:	dde6      	ble.n	772e <see_aa+0x1a>
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7760:	2300      	movs	r3, #0
    7762:	617b      	str	r3, [r7, #20]
    7764:	e015      	b.n	7792 <see_aa+0x7e>
		if (le_promisc.active_aa[i].count < max || max < 0) {
    7766:	4a14      	ldr	r2, [pc, #80]	; (77b8 <see_aa+0xa4>)
    7768:	697b      	ldr	r3, [r7, #20]
    776a:	00db      	lsls	r3, r3, #3
    776c:	4413      	add	r3, r2
    776e:	685a      	ldr	r2, [r3, #4]
    7770:	693b      	ldr	r3, [r7, #16]
    7772:	429a      	cmp	r2, r3
    7774:	db02      	blt.n	777c <see_aa+0x68>
    7776:	693b      	ldr	r3, [r7, #16]
    7778:	2b00      	cmp	r3, #0
    777a:	da07      	bge.n	778c <see_aa+0x78>
			killme = i;
    777c:	697b      	ldr	r3, [r7, #20]
    777e:	60fb      	str	r3, [r7, #12]
			max = le_promisc.active_aa[i].count;
    7780:	4a0d      	ldr	r2, [pc, #52]	; (77b8 <see_aa+0xa4>)
    7782:	697b      	ldr	r3, [r7, #20]
    7784:	00db      	lsls	r3, r3, #3
    7786:	4413      	add	r3, r2
    7788:	685b      	ldr	r3, [r3, #4]
    778a:	613b      	str	r3, [r7, #16]
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    778c:	697b      	ldr	r3, [r7, #20]
    778e:	3301      	adds	r3, #1
    7790:	617b      	str	r3, [r7, #20]
    7792:	697b      	ldr	r3, [r7, #20]
    7794:	2b1f      	cmp	r3, #31
    7796:	dde6      	ble.n	7766 <see_aa+0x52>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    7798:	4907      	ldr	r1, [pc, #28]	; (77b8 <see_aa+0xa4>)
    779a:	68fb      	ldr	r3, [r7, #12]
    779c:	687a      	ldr	r2, [r7, #4]
    779e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    77a2:	4a05      	ldr	r2, [pc, #20]	; (77b8 <see_aa+0xa4>)
    77a4:	68fb      	ldr	r3, [r7, #12]
    77a6:	00db      	lsls	r3, r3, #3
    77a8:	4413      	add	r3, r2
    77aa:	2201      	movs	r2, #1
    77ac:	605a      	str	r2, [r3, #4]
}
    77ae:	371c      	adds	r7, #28
    77b0:	46bd      	mov	sp, r7
    77b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    77b6:	4770      	bx	lr
    77b8:	10000bec 	.word	0x10000bec

000077bc <cb_le_promisc>:

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    77bc:	b590      	push	{r4, r7, lr}
    77be:	b0a1      	sub	sp, #132	; 0x84
    77c0:	af00      	add	r7, sp, #0
    77c2:	6078      	str	r0, [r7, #4]
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    77c4:	f107 031c 	add.w	r3, r7, #28
    77c8:	2240      	movs	r2, #64	; 0x40
    77ca:	4618      	mov	r0, r3
    77cc:	2100      	movs	r1, #0
    77ce:	f7fc fcd3 	bl	4178 <memset>
    77d2:	2301      	movs	r3, #1
    77d4:	773b      	strb	r3, [r7, #28]
    77d6:	2301      	movs	r3, #1
    77d8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    77dc:	2301      	movs	r3, #1
    77de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    77e2:	2301      	movs	r3, #1
    77e4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    77e8:	2301      	movs	r3, #1
    77ea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    77ee:	2301      	movs	r3, #1
    77f0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    77f4:	2301      	movs	r3, #1
    77f6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    77fa:	2301      	movs	r3, #1
    77fc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    7800:	2300      	movs	r3, #0
    7802:	67fb      	str	r3, [r7, #124]	; 0x7c
    7804:	e041      	b.n	788a <cb_le_promisc+0xce>
		idx = whitening_index[btle_channel_index(channel-2402)];
    7806:	4ba5      	ldr	r3, [pc, #660]	; (7a9c <cb_le_promisc+0x2e0>)
    7808:	881b      	ldrh	r3, [r3, #0]
    780a:	b29b      	uxth	r3, r3
    780c:	b2db      	uxtb	r3, r3
    780e:	3b62      	subs	r3, #98	; 0x62
    7810:	b2db      	uxtb	r3, r3
    7812:	4618      	mov	r0, r3
    7814:	f000 fe0e 	bl	8434 <btle_channel_index>
    7818:	4603      	mov	r3, r0
    781a:	461a      	mov	r2, r3
    781c:	4ba0      	ldr	r3, [pc, #640]	; (7aa0 <cb_le_promisc+0x2e4>)
    781e:	5c9b      	ldrb	r3, [r3, r2]
    7820:	673b      	str	r3, [r7, #112]	; 0x70

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    7822:	2300      	movs	r3, #0
    7824:	67bb      	str	r3, [r7, #120]	; 0x78
    7826:	e02a      	b.n	787e <cb_le_promisc+0xc2>
			desired[i][j] ^= whitening[idx];
    7828:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    782a:	011b      	lsls	r3, r3, #4
    782c:	f107 0280 	add.w	r2, r7, #128	; 0x80
    7830:	441a      	add	r2, r3
    7832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7834:	4413      	add	r3, r2
    7836:	3b64      	subs	r3, #100	; 0x64
    7838:	781a      	ldrb	r2, [r3, #0]
    783a:	499a      	ldr	r1, [pc, #616]	; (7aa4 <cb_le_promisc+0x2e8>)
    783c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    783e:	440b      	add	r3, r1
    7840:	781b      	ldrb	r3, [r3, #0]
    7842:	4053      	eors	r3, r2
    7844:	b2d9      	uxtb	r1, r3
    7846:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7848:	011b      	lsls	r3, r3, #4
    784a:	f107 0280 	add.w	r2, r7, #128	; 0x80
    784e:	441a      	add	r2, r3
    7850:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7852:	4413      	add	r3, r2
    7854:	3b64      	subs	r3, #100	; 0x64
    7856:	460a      	mov	r2, r1
    7858:	701a      	strb	r2, [r3, #0]
			idx = (idx + 1) % sizeof(whitening);
    785a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    785c:	3301      	adds	r3, #1
    785e:	4619      	mov	r1, r3
    7860:	4b91      	ldr	r3, [pc, #580]	; (7aa8 <cb_le_promisc+0x2ec>)
    7862:	fba1 2303 	umull	r2, r3, r1, r3
    7866:	1ac8      	subs	r0, r1, r3
    7868:	0840      	lsrs	r0, r0, #1
    786a:	4403      	add	r3, r0
    786c:	099a      	lsrs	r2, r3, #6
    786e:	4613      	mov	r3, r2
    7870:	01db      	lsls	r3, r3, #7
    7872:	1a9b      	subs	r3, r3, r2
    7874:	1aca      	subs	r2, r1, r3
    7876:	673a      	str	r2, [r7, #112]	; 0x70

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    7878:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    787a:	3301      	adds	r3, #1
    787c:	67bb      	str	r3, [r7, #120]	; 0x78
    787e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7880:	2b0f      	cmp	r3, #15
    7882:	ddd1      	ble.n	7828 <cb_le_promisc+0x6c>
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    7884:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7886:	3301      	adds	r3, #1
    7888:	67fb      	str	r3, [r7, #124]	; 0x7c
    788a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    788c:	2b03      	cmp	r3, #3
    788e:	ddba      	ble.n	7806 <cb_le_promisc+0x4a>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    7890:	2320      	movs	r3, #32
    7892:	67fb      	str	r3, [r7, #124]	; 0x7c
    7894:	e0d0      	b.n	7a38 <cb_le_promisc+0x27c>
		int ok[4] = { 1, 1, 1, 1 };
    7896:	4b85      	ldr	r3, [pc, #532]	; (7aac <cb_le_promisc+0x2f0>)
    7898:	f107 040c 	add.w	r4, r7, #12
    789c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    789e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		int matching = -1;
    78a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    78a6:	66fb      	str	r3, [r7, #108]	; 0x6c

		for (j = 0; j < 4; ++j) {
    78a8:	2300      	movs	r3, #0
    78aa:	67bb      	str	r3, [r7, #120]	; 0x78
    78ac:	e026      	b.n	78fc <cb_le_promisc+0x140>
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    78ae:	2300      	movs	r3, #0
    78b0:	677b      	str	r3, [r7, #116]	; 0x74
    78b2:	e01d      	b.n	78f0 <cb_le_promisc+0x134>
				if (unpacked[i+k] != desired[j][k]) {
    78b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    78b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    78b8:	4413      	add	r3, r2
    78ba:	461a      	mov	r2, r3
    78bc:	687b      	ldr	r3, [r7, #4]
    78be:	4413      	add	r3, r2
    78c0:	781a      	ldrb	r2, [r3, #0]
    78c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    78c4:	011b      	lsls	r3, r3, #4
    78c6:	f107 0180 	add.w	r1, r7, #128	; 0x80
    78ca:	4419      	add	r1, r3
    78cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    78ce:	440b      	add	r3, r1
    78d0:	3b64      	subs	r3, #100	; 0x64
    78d2:	781b      	ldrb	r3, [r3, #0]
    78d4:	429a      	cmp	r2, r3
    78d6:	d008      	beq.n	78ea <cb_le_promisc+0x12e>
					ok[j] = 0;
    78d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    78da:	009b      	lsls	r3, r3, #2
    78dc:	f107 0280 	add.w	r2, r7, #128	; 0x80
    78e0:	4413      	add	r3, r2
    78e2:	2200      	movs	r2, #0
    78e4:	f843 2c74 	str.w	r2, [r3, #-116]
					break;
    78e8:	e005      	b.n	78f6 <cb_le_promisc+0x13a>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    78ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    78ec:	3301      	adds	r3, #1
    78ee:	677b      	str	r3, [r7, #116]	; 0x74
    78f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    78f2:	2b0f      	cmp	r3, #15
    78f4:	ddde      	ble.n	78b4 <cb_le_promisc+0xf8>
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    78f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    78f8:	3301      	adds	r3, #1
    78fa:	67bb      	str	r3, [r7, #120]	; 0x78
    78fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    78fe:	2b03      	cmp	r3, #3
    7900:	ddd5      	ble.n	78ae <cb_le_promisc+0xf2>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    7902:	2300      	movs	r3, #0
    7904:	67bb      	str	r3, [r7, #120]	; 0x78
    7906:	e00e      	b.n	7926 <cb_le_promisc+0x16a>
			if (ok[j]) {
    7908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    790a:	009b      	lsls	r3, r3, #2
    790c:	f107 0280 	add.w	r2, r7, #128	; 0x80
    7910:	4413      	add	r3, r2
    7912:	f853 3c74 	ldr.w	r3, [r3, #-116]
    7916:	2b00      	cmp	r3, #0
    7918:	d002      	beq.n	7920 <cb_le_promisc+0x164>
				matching = j;
    791a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    791c:	66fb      	str	r3, [r7, #108]	; 0x6c
				break;
    791e:	e005      	b.n	792c <cb_le_promisc+0x170>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    7920:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7922:	3301      	adds	r3, #1
    7924:	67bb      	str	r3, [r7, #120]	; 0x78
    7926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7928:	2b03      	cmp	r3, #3
    792a:	dded      	ble.n	7908 <cb_le_promisc+0x14c>
				break;
			}
		}

		// skip if no match
		if (matching < 0)
    792c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    792e:	2b00      	cmp	r3, #0
    7930:	db7f      	blt.n	7a32 <cb_le_promisc+0x276>
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
    7932:	4b5a      	ldr	r3, [pc, #360]	; (7a9c <cb_le_promisc+0x2e0>)
    7934:	881b      	ldrh	r3, [r3, #0]
    7936:	b29b      	uxth	r3, r3
    7938:	b2db      	uxtb	r3, r3
    793a:	3b62      	subs	r3, #98	; 0x62
    793c:	b2db      	uxtb	r3, r3
    793e:	4618      	mov	r0, r3
    7940:	f000 fd78 	bl	8434 <btle_channel_index>
    7944:	4603      	mov	r3, r0
    7946:	461a      	mov	r2, r3
    7948:	4b55      	ldr	r3, [pc, #340]	; (7aa0 <cb_le_promisc+0x2e4>)
    794a:	5c9b      	ldrb	r3, [r3, r2]
    794c:	673b      	str	r3, [r7, #112]	; 0x70
		for (j = 0; j < 4+3+3; ++j) {
    794e:	2300      	movs	r3, #0
    7950:	67bb      	str	r3, [r7, #120]	; 0x78
    7952:	e04c      	b.n	79ee <cb_le_promisc+0x232>
			u8 byte = 0;
    7954:	2300      	movs	r3, #0
    7956:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			for (k = 0; k < 8; k++) {
    795a:	2300      	movs	r3, #0
    795c:	677b      	str	r3, [r7, #116]	; 0x74
    795e:	e039      	b.n	79d4 <cb_le_promisc+0x218>
				int offset = k + (j * 8) + i - 32;
    7960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7962:	00da      	lsls	r2, r3, #3
    7964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7966:	441a      	add	r2, r3
    7968:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    796a:	4413      	add	r3, r2
    796c:	3b20      	subs	r3, #32
    796e:	663b      	str	r3, [r7, #96]	; 0x60
				if (offset >= DMA_SIZE*8*2) break;
    7970:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7972:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    7976:	db00      	blt.n	797a <cb_le_promisc+0x1be>
    7978:	e02f      	b.n	79da <cb_le_promisc+0x21e>
				int bit = unpacked[offset];
    797a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    797c:	687a      	ldr	r2, [r7, #4]
    797e:	4413      	add	r3, r2
    7980:	781b      	ldrb	r3, [r3, #0]
    7982:	667b      	str	r3, [r7, #100]	; 0x64
				if (j >= 4) { // unwhiten data bytes
    7984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7986:	2b03      	cmp	r3, #3
    7988:	dd16      	ble.n	79b8 <cb_le_promisc+0x1fc>
					bit ^= whitening[idx];
    798a:	4a46      	ldr	r2, [pc, #280]	; (7aa4 <cb_le_promisc+0x2e8>)
    798c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    798e:	4413      	add	r3, r2
    7990:	781b      	ldrb	r3, [r3, #0]
    7992:	461a      	mov	r2, r3
    7994:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7996:	4053      	eors	r3, r2
    7998:	667b      	str	r3, [r7, #100]	; 0x64
					idx = (idx + 1) % sizeof(whitening);
    799a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    799c:	3301      	adds	r3, #1
    799e:	4619      	mov	r1, r3
    79a0:	4b41      	ldr	r3, [pc, #260]	; (7aa8 <cb_le_promisc+0x2ec>)
    79a2:	fba1 2303 	umull	r2, r3, r1, r3
    79a6:	1ac8      	subs	r0, r1, r3
    79a8:	0840      	lsrs	r0, r0, #1
    79aa:	4403      	add	r3, r0
    79ac:	099a      	lsrs	r2, r3, #6
    79ae:	4613      	mov	r3, r2
    79b0:	01db      	lsls	r3, r3, #7
    79b2:	1a9b      	subs	r3, r3, r2
    79b4:	1aca      	subs	r2, r1, r3
    79b6:	673a      	str	r2, [r7, #112]	; 0x70
				}
				byte |= bit << k;
    79b8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    79ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    79bc:	fa02 f303 	lsl.w	r3, r2, r3
    79c0:	b2da      	uxtb	r2, r3
    79c2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
    79c6:	4313      	orrs	r3, r2
    79c8:	b2db      	uxtb	r3, r3
    79ca:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    79ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    79d0:	3301      	adds	r3, #1
    79d2:	677b      	str	r3, [r7, #116]	; 0x74
    79d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    79d6:	2b07      	cmp	r3, #7
    79d8:	ddc2      	ble.n	7960 <cb_le_promisc+0x1a4>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    79da:	4b35      	ldr	r3, [pc, #212]	; (7ab0 <cb_le_promisc+0x2f4>)
    79dc:	681a      	ldr	r2, [r3, #0]
    79de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    79e0:	4413      	add	r3, r2
    79e2:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
    79e6:	701a      	strb	r2, [r3, #0]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
    79e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    79ea:	3301      	adds	r3, #1
    79ec:	67bb      	str	r3, [r7, #120]	; 0x78
    79ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    79f0:	2b09      	cmp	r3, #9
    79f2:	ddaf      	ble.n	7954 <cb_le_promisc+0x198>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    79f4:	4b2e      	ldr	r3, [pc, #184]	; (7ab0 <cb_le_promisc+0x2f4>)
    79f6:	681b      	ldr	r3, [r3, #0]
    79f8:	3303      	adds	r3, #3
    79fa:	781b      	ldrb	r3, [r3, #0]
    79fc:	061a      	lsls	r2, r3, #24
				 (idle_rxbuf[2] << 16) |
    79fe:	4b2c      	ldr	r3, [pc, #176]	; (7ab0 <cb_le_promisc+0x2f4>)
    7a00:	681b      	ldr	r3, [r3, #0]
    7a02:	3302      	adds	r3, #2
    7a04:	781b      	ldrb	r3, [r3, #0]
    7a06:	041b      	lsls	r3, r3, #16
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    7a08:	431a      	orrs	r2, r3
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    7a0a:	4b29      	ldr	r3, [pc, #164]	; (7ab0 <cb_le_promisc+0x2f4>)
    7a0c:	681b      	ldr	r3, [r3, #0]
    7a0e:	3301      	adds	r3, #1
    7a10:	781b      	ldrb	r3, [r3, #0]
    7a12:	021b      	lsls	r3, r3, #8
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    7a14:	4313      	orrs	r3, r2
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    7a16:	4a26      	ldr	r2, [pc, #152]	; (7ab0 <cb_le_promisc+0x2f4>)
    7a18:	6812      	ldr	r2, [r2, #0]
    7a1a:	7812      	ldrb	r2, [r2, #0]
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    7a1c:	4313      	orrs	r3, r2
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    7a1e:	65fb      	str	r3, [r7, #92]	; 0x5c
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
		see_aa(aa);
    7a20:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    7a22:	f7ff fe77 	bl	7714 <see_aa>

		enqueue(LE_PACKET, idle_rxbuf);
    7a26:	4b22      	ldr	r3, [pc, #136]	; (7ab0 <cb_le_promisc+0x2f4>)
    7a28:	681b      	ldr	r3, [r3, #0]
    7a2a:	2001      	movs	r0, #1
    7a2c:	4619      	mov	r1, r3
    7a2e:	f7fc fd4b 	bl	44c8 <enqueue>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    7a32:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7a34:	3301      	adds	r3, #1
    7a36:	67fb      	str	r3, [r7, #124]	; 0x7c
    7a38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7a3a:	f5b3 7f3c 	cmp.w	r3, #752	; 0x2f0
    7a3e:	f6ff af2a 	blt.w	7896 <cb_le_promisc+0xda>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    7a42:	2300      	movs	r3, #0
    7a44:	67fb      	str	r3, [r7, #124]	; 0x7c
    7a46:	e020      	b.n	7a8a <cb_le_promisc+0x2ce>
		if (le_promisc.active_aa[i].count > 3) {
    7a48:	4a1a      	ldr	r2, [pc, #104]	; (7ab4 <cb_le_promisc+0x2f8>)
    7a4a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7a4c:	00db      	lsls	r3, r3, #3
    7a4e:	4413      	add	r3, r2
    7a50:	685b      	ldr	r3, [r3, #4]
    7a52:	2b03      	cmp	r3, #3
    7a54:	dd16      	ble.n	7a84 <cb_le_promisc+0x2c8>
			le_set_access_address(le_promisc.active_aa[i].aa);
    7a56:	4a17      	ldr	r2, [pc, #92]	; (7ab4 <cb_le_promisc+0x2f8>)
    7a58:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7a5a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    7a5e:	4618      	mov	r0, r3
    7a60:	f7fe fd80 	bl	6564 <le_set_access_address>
			data_cb = cb_follow_le;
    7a64:	4b14      	ldr	r3, [pc, #80]	; (7ab8 <cb_le_promisc+0x2fc>)
    7a66:	4a15      	ldr	r2, [pc, #84]	; (7abc <cb_le_promisc+0x300>)
    7a68:	601a      	str	r2, [r3, #0]
			packet_cb = promisc_follow_cb;
    7a6a:	4b15      	ldr	r3, [pc, #84]	; (7ac0 <cb_le_promisc+0x304>)
    7a6c:	4a15      	ldr	r2, [pc, #84]	; (7ac4 <cb_le_promisc+0x308>)
    7a6e:	601a      	str	r2, [r3, #0]
			le.crc_verify = 0;
    7a70:	4b15      	ldr	r3, [pc, #84]	; (7ac8 <cb_le_promisc+0x30c>)
    7a72:	2200      	movs	r2, #0
    7a74:	611a      	str	r2, [r3, #16]
			le_promisc_state(0, &le.access_address, 4);
    7a76:	2000      	movs	r0, #0
    7a78:	4913      	ldr	r1, [pc, #76]	; (7ac8 <cb_le_promisc+0x30c>)
    7a7a:	2204      	movs	r2, #4
    7a7c:	f7ff fc50 	bl	7320 <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    7a80:	2300      	movs	r3, #0
    7a82:	e006      	b.n	7a92 <cb_le_promisc+0x2d6>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    7a84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7a86:	3301      	adds	r3, #1
    7a88:	67fb      	str	r3, [r7, #124]	; 0x7c
    7a8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7a8c:	2b1f      	cmp	r3, #31
    7a8e:	dddb      	ble.n	7a48 <cb_le_promisc+0x28c>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    7a90:	2301      	movs	r3, #1
}
    7a92:	4618      	mov	r0, r3
    7a94:	3784      	adds	r7, #132	; 0x84
    7a96:	46bd      	mov	sp, r7
    7a98:	bd90      	pop	{r4, r7, pc}
    7a9a:	bf00      	nop
    7a9c:	1000049c 	.word	0x1000049c
    7aa0:	0000b9dc 	.word	0x0000b9dc
    7aa4:	0000b95c 	.word	0x0000b95c
    7aa8:	02040811 	.word	0x02040811
    7aac:	0000c224 	.word	0x0000c224
    7ab0:	10000454 	.word	0x10000454
    7ab4:	10000bec 	.word	0x10000bec
    7ab8:	10000998 	.word	0x10000998
    7abc:	00006ea5 	.word	0x00006ea5
    7ac0:	1000099c 	.word	0x1000099c
    7ac4:	00007659 	.word	0x00007659
    7ac8:	10000458 	.word	0x10000458

00007acc <bt_promisc_le>:

void bt_promisc_le() {
    7acc:	b580      	push	{r7, lr}
    7ace:	af00      	add	r7, sp, #0
	while (requested_mode == MODE_BT_PROMISC_LE) {
    7ad0:	e02c      	b.n	7b2c <bt_promisc_le+0x60>
		reset_le_promisc();
    7ad2:	f7fe fdad 	bl	6630 <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    7ad6:	4b18      	ldr	r3, [pc, #96]	; (7b38 <bt_promisc_le+0x6c>)
    7ad8:	881b      	ldrh	r3, [r3, #0]
    7ada:	b29b      	uxth	r3, r3
    7adc:	f003 0301 	and.w	r3, r3, #1
    7ae0:	2b00      	cmp	r3, #0
    7ae2:	d003      	beq.n	7aec <bt_promisc_le+0x20>
			channel = 2440;
    7ae4:	4b14      	ldr	r3, [pc, #80]	; (7b38 <bt_promisc_le+0x6c>)
    7ae6:	f640 1288 	movw	r2, #2440	; 0x988
    7aea:	801a      	strh	r2, [r3, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    7aec:	4b13      	ldr	r3, [pc, #76]	; (7b3c <bt_promisc_le+0x70>)
    7aee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7af0:	2b00      	cmp	r3, #0
    7af2:	d107      	bne.n	7b04 <bt_promisc_le+0x38>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set();
    7af4:	f7fc fe4c 	bl	4790 <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    7af8:	4b11      	ldr	r3, [pc, #68]	; (7b40 <bt_promisc_le+0x74>)
    7afa:	4a12      	ldr	r2, [pc, #72]	; (7b44 <bt_promisc_le+0x78>)
    7afc:	601a      	str	r2, [r3, #0]
			bt_generic_le(MODE_BT_PROMISC_LE);
    7afe:	200a      	movs	r0, #10
    7b00:	f7fe fda6 	bl	6650 <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    7b04:	4b10      	ldr	r3, [pc, #64]	; (7b48 <bt_promisc_le+0x7c>)
    7b06:	781b      	ldrb	r3, [r3, #0]
    7b08:	b2db      	uxtb	r3, r3
    7b0a:	2b0a      	cmp	r3, #10
    7b0c:	d000      	beq.n	7b10 <bt_promisc_le+0x44>
			break;
    7b0e:	e012      	b.n	7b36 <bt_promisc_le+0x6a>

		le_promisc_state(0, &le.access_address, 4);
    7b10:	2000      	movs	r0, #0
    7b12:	490a      	ldr	r1, [pc, #40]	; (7b3c <bt_promisc_le+0x70>)
    7b14:	2204      	movs	r2, #4
    7b16:	f7ff fc03 	bl	7320 <le_promisc_state>
		packet_cb = promisc_follow_cb;
    7b1a:	4b0c      	ldr	r3, [pc, #48]	; (7b4c <bt_promisc_le+0x80>)
    7b1c:	4a0c      	ldr	r2, [pc, #48]	; (7b50 <bt_promisc_le+0x84>)
    7b1e:	601a      	str	r2, [r3, #0]
		le.crc_verify = 0;
    7b20:	4b06      	ldr	r3, [pc, #24]	; (7b3c <bt_promisc_le+0x70>)
    7b22:	2200      	movs	r2, #0
    7b24:	611a      	str	r2, [r3, #16]
		bt_le_sync(MODE_BT_PROMISC_LE);
    7b26:	200a      	movs	r0, #10
    7b28:	f7fe ff0e 	bl	6948 <bt_le_sync>

	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
    7b2c:	4b06      	ldr	r3, [pc, #24]	; (7b48 <bt_promisc_le+0x7c>)
    7b2e:	781b      	ldrb	r3, [r3, #0]
    7b30:	b2db      	uxtb	r3, r3
    7b32:	2b0a      	cmp	r3, #10
    7b34:	d0cd      	beq.n	7ad2 <bt_promisc_le+0x6>
		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
	}
}
    7b36:	bd80      	pop	{r7, pc}
    7b38:	1000049c 	.word	0x1000049c
    7b3c:	10000458 	.word	0x10000458
    7b40:	10000998 	.word	0x10000998
    7b44:	000077bd 	.word	0x000077bd
    7b48:	10000a3f 	.word	0x10000a3f
    7b4c:	1000099c 	.word	0x1000099c
    7b50:	00007659 	.word	0x00007659

00007b54 <bt_slave_le>:

void bt_slave_le() {
    7b54:	b590      	push	{r4, r7, lr}
    7b56:	b089      	sub	sp, #36	; 0x24
    7b58:	af00      	add	r7, sp, #0
	u32 calc_crc;
	int i;

	u8 adv_ind[] = {
    7b5a:	4a35      	ldr	r2, [pc, #212]	; (7c30 <bt_slave_le+0xdc>)
    7b5c:	1d3b      	adds	r3, r7, #4
    7b5e:	4614      	mov	r4, r2
    7b60:	6820      	ldr	r0, [r4, #0]
    7b62:	6861      	ldr	r1, [r4, #4]
    7b64:	68a2      	ldr	r2, [r4, #8]
    7b66:	c307      	stmia	r3!, {r0, r1, r2}
    7b68:	89a2      	ldrh	r2, [r4, #12]
    7b6a:	801a      	strh	r2, [r3, #0]

		// CRC (calc)
		0xff, 0xff, 0xff,
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;
    7b6c:	230b      	movs	r3, #11
    7b6e:	76fb      	strb	r3, [r7, #27]

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    7b70:	2300      	movs	r3, #0
    7b72:	61fb      	str	r3, [r7, #28]
    7b74:	e00e      	b.n	7b94 <bt_slave_le+0x40>
		adv_ind[i+2] = slave_mac_address[5-i];
    7b76:	69fb      	ldr	r3, [r7, #28]
    7b78:	3302      	adds	r3, #2
    7b7a:	69fa      	ldr	r2, [r7, #28]
    7b7c:	f1c2 0205 	rsb	r2, r2, #5
    7b80:	492c      	ldr	r1, [pc, #176]	; (7c34 <bt_slave_le+0xe0>)
    7b82:	5c8a      	ldrb	r2, [r1, r2]
    7b84:	f107 0120 	add.w	r1, r7, #32
    7b88:	440b      	add	r3, r1
    7b8a:	f803 2c1c 	strb.w	r2, [r3, #-28]
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    7b8e:	69fb      	ldr	r3, [r7, #28]
    7b90:	3301      	adds	r3, #1
    7b92:	61fb      	str	r3, [r7, #28]
    7b94:	69fb      	ldr	r3, [r7, #28]
    7b96:	2b05      	cmp	r3, #5
    7b98:	dded      	ble.n	7b76 <bt_slave_le+0x22>
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
    7b9a:	4b27      	ldr	r3, [pc, #156]	; (7c38 <bt_slave_le+0xe4>)
    7b9c:	68d9      	ldr	r1, [r3, #12]
    7b9e:	7efb      	ldrb	r3, [r7, #27]
    7ba0:	1d3a      	adds	r2, r7, #4
    7ba2:	4608      	mov	r0, r1
    7ba4:	4611      	mov	r1, r2
    7ba6:	461a      	mov	r2, r3
    7ba8:	f000 fca2 	bl	84f0 <btle_calc_crc>
    7bac:	6178      	str	r0, [r7, #20]
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
    7bae:	7efb      	ldrb	r3, [r7, #27]
    7bb0:	697a      	ldr	r2, [r7, #20]
    7bb2:	b2d2      	uxtb	r2, r2
    7bb4:	f107 0120 	add.w	r1, r7, #32
    7bb8:	440b      	add	r3, r1
    7bba:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    7bbe:	7efb      	ldrb	r3, [r7, #27]
    7bc0:	3301      	adds	r3, #1
    7bc2:	697a      	ldr	r2, [r7, #20]
    7bc4:	0a12      	lsrs	r2, r2, #8
    7bc6:	b2d2      	uxtb	r2, r2
    7bc8:	f107 0120 	add.w	r1, r7, #32
    7bcc:	440b      	add	r3, r1
    7bce:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    7bd2:	7efb      	ldrb	r3, [r7, #27]
    7bd4:	3302      	adds	r3, #2
    7bd6:	697a      	ldr	r2, [r7, #20]
    7bd8:	0c12      	lsrs	r2, r2, #16
    7bda:	b2d2      	uxtb	r2, r2
    7bdc:	f107 0120 	add.w	r1, r7, #32
    7be0:	440b      	add	r3, r1
    7be2:	f803 2c1c 	strb.w	r2, [r3, #-28]

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    7be6:	e01b      	b.n	7c20 <bt_slave_le+0xcc>
		ICER0 = ICER0_ICE_USB;
    7be8:	4b14      	ldr	r3, [pc, #80]	; (7c3c <bt_slave_le+0xe8>)
    7bea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7bee:	601a      	str	r2, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
    7bf0:	4b12      	ldr	r3, [pc, #72]	; (7c3c <bt_slave_le+0xe8>)
    7bf2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7bf6:	601a      	str	r2, [r3, #0]
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    7bf8:	7efb      	ldrb	r3, [r7, #27]
    7bfa:	3303      	adds	r3, #3
    7bfc:	b2da      	uxtb	r2, r3
    7bfe:	1d3b      	adds	r3, r7, #4
    7c00:	480f      	ldr	r0, [pc, #60]	; (7c40 <bt_slave_le+0xec>)
    7c02:	4611      	mov	r1, r2
    7c04:	461a      	mov	r2, r3
    7c06:	f7fe f881 	bl	5d0c <le_transmit>
		ISER0 = ISER0_ISE_USB;
    7c0a:	4b0e      	ldr	r3, [pc, #56]	; (7c44 <bt_slave_le+0xf0>)
    7c0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7c10:	601a      	str	r2, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    7c12:	4b0c      	ldr	r3, [pc, #48]	; (7c44 <bt_slave_le+0xf0>)
    7c14:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7c18:	601a      	str	r2, [r3, #0]
		msleep(100);
    7c1a:	2064      	movs	r0, #100	; 0x64
    7c1c:	f7fd fc80 	bl	5520 <msleep>
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    7c20:	4b09      	ldr	r3, [pc, #36]	; (7c48 <bt_slave_le+0xf4>)
    7c22:	781b      	ldrb	r3, [r3, #0]
    7c24:	b2db      	uxtb	r3, r3
    7c26:	2b0c      	cmp	r3, #12
    7c28:	d0de      	beq.n	7be8 <bt_slave_le+0x94>
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
		msleep(100);
	}
}
    7c2a:	3724      	adds	r7, #36	; 0x24
    7c2c:	46bd      	mov	sp, r7
    7c2e:	bd90      	pop	{r4, r7, pc}
    7c30:	0000c234 	.word	0x0000c234
    7c34:	1000098c 	.word	0x1000098c
    7c38:	10000458 	.word	0x10000458
    7c3c:	e000e180 	.word	0xe000e180
    7c40:	8e89bed6 	.word	0x8e89bed6
    7c44:	e000e100 	.word	0xe000e100
    7c48:	10000a3f 	.word	0x10000a3f

00007c4c <specan>:

/* spectrum analysis */
void specan()
{
    7c4c:	b590      	push	{r4, r7, lr}
    7c4e:	b091      	sub	sp, #68	; 0x44
    7c50:	af00      	add	r7, sp, #0
	u8 epstat;
	u16 f;
	u8 i = 0;
    7c52:	2300      	movs	r3, #0
    7c54:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	u8 buf[DMA_SIZE];

	RXLED_SET;
    7c58:	4b5a      	ldr	r3, [pc, #360]	; (7dc4 <specan+0x178>)
    7c5a:	2210      	movs	r2, #16
    7c5c:	601a      	str	r2, [r3, #0]

	queue_init();
    7c5e:	f000 fd69 	bl	8734 <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7c62:	4b59      	ldr	r3, [pc, #356]	; (7dc8 <specan+0x17c>)
    7c64:	2280      	movs	r2, #128	; 0x80
    7c66:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    7c68:	2012      	movs	r0, #18
    7c6a:	f642 3122 	movw	r1, #11042	; 0x2b22
    7c6e:	f001 ffd9 	bl	9c24 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7c72:	2014      	movs	r0, #20
    7c74:	f241 314b 	movw	r1, #4939	; 0x134b
    7c78:	f001 ffd4 	bl	9c24 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    7c7c:	2020      	movs	r0, #32
    7c7e:	f240 1101 	movw	r1, #257	; 0x101
    7c82:	f001 ffcf 	bl	9c24 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    7c86:	2003      	movs	r0, #3
    7c88:	2129      	movs	r1, #41	; 0x29
    7c8a:	f001 ffcb 	bl	9c24 <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    7c8e:	bf00      	nop
    7c90:	f002 f880 	bl	9d94 <cc2400_status>
    7c94:	4603      	mov	r3, r0
    7c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7c9a:	2b00      	cmp	r3, #0
    7c9c:	d0f8      	beq.n	7c90 <specan+0x44>
	while ((cc2400_status() & FS_LOCK));
    7c9e:	bf00      	nop
    7ca0:	f002 f878 	bl	9d94 <cc2400_status>
    7ca4:	4603      	mov	r3, r0
    7ca6:	f003 0304 	and.w	r3, r3, #4
    7caa:	2b00      	cmp	r3, #0
    7cac:	d1f8      	bne.n	7ca0 <specan+0x54>

	while (requested_mode == MODE_SPECAN) {
    7cae:	e07a      	b.n	7da6 <specan+0x15a>
		for (f = low_freq; f < high_freq + 1; f++) {
    7cb0:	4b46      	ldr	r3, [pc, #280]	; (7dcc <specan+0x180>)
    7cb2:	881b      	ldrh	r3, [r3, #0]
    7cb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
    7cb6:	e06f      	b.n	7d98 <specan+0x14c>
			cc2400_set(FSDIV, f - 1);
    7cb8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    7cba:	3b01      	subs	r3, #1
    7cbc:	b29b      	uxth	r3, r3
    7cbe:	2002      	movs	r0, #2
    7cc0:	4619      	mov	r1, r3
    7cc2:	f001 ffaf 	bl	9c24 <cc2400_set>
			cc2400_strobe(SFSON);
    7cc6:	2061      	movs	r0, #97	; 0x61
    7cc8:	f002 f86e 	bl	9da8 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    7ccc:	bf00      	nop
    7cce:	f002 f861 	bl	9d94 <cc2400_status>
    7cd2:	4603      	mov	r3, r0
    7cd4:	f003 0304 	and.w	r3, r3, #4
    7cd8:	2b00      	cmp	r3, #0
    7cda:	d0f8      	beq.n	7cce <specan+0x82>
			cc2400_strobe(SRX);
    7cdc:	2062      	movs	r0, #98	; 0x62
    7cde:	f002 f863 	bl	9da8 <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    7ce2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    7ce6:	607b      	str	r3, [r7, #4]
    7ce8:	bf00      	nop
    7cea:	687b      	ldr	r3, [r7, #4]
    7cec:	3b01      	subs	r3, #1
    7cee:	607b      	str	r3, [r7, #4]
    7cf0:	2b00      	cmp	r3, #0
    7cf2:	d1fa      	bne.n	7cea <specan+0x9e>
			buf[3 * i] = (f >> 8) & 0xFF;
    7cf4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7cf8:	4613      	mov	r3, r2
    7cfa:	005b      	lsls	r3, r3, #1
    7cfc:	4413      	add	r3, r2
    7cfe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7d00:	0a12      	lsrs	r2, r2, #8
    7d02:	b292      	uxth	r2, r2
    7d04:	b2d2      	uxtb	r2, r2
    7d06:	f107 0140 	add.w	r1, r7, #64	; 0x40
    7d0a:	440b      	add	r3, r1
    7d0c:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 1] = f  & 0xFF;
    7d10:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7d14:	4613      	mov	r3, r2
    7d16:	005b      	lsls	r3, r3, #1
    7d18:	4413      	add	r3, r2
    7d1a:	3301      	adds	r3, #1
    7d1c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7d1e:	b2d2      	uxtb	r2, r2
    7d20:	f107 0140 	add.w	r1, r7, #64	; 0x40
    7d24:	440b      	add	r3, r1
    7d26:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    7d2a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7d2e:	4613      	mov	r3, r2
    7d30:	005b      	lsls	r3, r3, #1
    7d32:	4413      	add	r3, r2
    7d34:	1c9c      	adds	r4, r3, #2
    7d36:	2006      	movs	r0, #6
    7d38:	f001 ff5e 	bl	9bf8 <cc2400_get>
    7d3c:	4603      	mov	r3, r0
    7d3e:	0a1b      	lsrs	r3, r3, #8
    7d40:	b29b      	uxth	r3, r3
    7d42:	b2da      	uxtb	r2, r3
    7d44:	f107 0340 	add.w	r3, r7, #64	; 0x40
    7d48:	4423      	add	r3, r4
    7d4a:	f803 2c38 	strb.w	r2, [r3, #-56]
			i++;
    7d4e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    7d52:	3301      	adds	r3, #1
    7d54:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (i == 16) {
    7d58:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    7d5c:	2b10      	cmp	r3, #16
    7d5e:	d10d      	bne.n	7d7c <specan+0x130>
				enqueue(SPECAN, buf);
    7d60:	f107 0308 	add.w	r3, r7, #8
    7d64:	2004      	movs	r0, #4
    7d66:	4619      	mov	r1, r3
    7d68:	f7fc fbae 	bl	44c8 <enqueue>
				i = 0;
    7d6c:	2300      	movs	r3, #0
    7d6e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				handle_usb(clkn);
    7d72:	4b17      	ldr	r3, [pc, #92]	; (7dd0 <specan+0x184>)
    7d74:	681b      	ldr	r3, [r3, #0]
    7d76:	4618      	mov	r0, r3
    7d78:	f000 fd7c 	bl	8874 <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    7d7c:	2064      	movs	r0, #100	; 0x64
    7d7e:	f002 f813 	bl	9da8 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    7d82:	bf00      	nop
    7d84:	f002 f806 	bl	9d94 <cc2400_status>
    7d88:	4603      	mov	r3, r0
    7d8a:	f003 0304 	and.w	r3, r3, #4
    7d8e:	2b00      	cmp	r3, #0
    7d90:	d1f8      	bne.n	7d84 <specan+0x138>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    7d92:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    7d94:	3301      	adds	r3, #1
    7d96:	87fb      	strh	r3, [r7, #62]	; 0x3e
    7d98:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7d9a:	4b0e      	ldr	r3, [pc, #56]	; (7dd4 <specan+0x188>)
    7d9c:	881b      	ldrh	r3, [r3, #0]
    7d9e:	b29b      	uxth	r3, r3
    7da0:	3301      	adds	r3, #1
    7da2:	429a      	cmp	r2, r3
    7da4:	db88      	blt.n	7cb8 <specan+0x6c>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
    7da6:	4b0c      	ldr	r3, [pc, #48]	; (7dd8 <specan+0x18c>)
    7da8:	781b      	ldrb	r3, [r3, #0]
    7daa:	b2db      	uxtb	r3, r3
    7dac:	2b04      	cmp	r3, #4
    7dae:	f43f af7f 	beq.w	7cb0 <specan+0x64>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	mode = MODE_IDLE;
    7db2:	4b0a      	ldr	r3, [pc, #40]	; (7ddc <specan+0x190>)
    7db4:	2200      	movs	r2, #0
    7db6:	701a      	strb	r2, [r3, #0]
	RXLED_CLR;
    7db8:	4b09      	ldr	r3, [pc, #36]	; (7de0 <specan+0x194>)
    7dba:	2210      	movs	r2, #16
    7dbc:	601a      	str	r2, [r3, #0]
}
    7dbe:	3744      	adds	r7, #68	; 0x44
    7dc0:	46bd      	mov	sp, r7
    7dc2:	bd90      	pop	{r4, r7, pc}
    7dc4:	2009c038 	.word	0x2009c038
    7dc8:	2009c058 	.word	0x2009c058
    7dcc:	1000049e 	.word	0x1000049e
    7dd0:	10000be4 	.word	0x10000be4
    7dd4:	100004a0 	.word	0x100004a0
    7dd8:	10000a3f 	.word	0x10000a3f
    7ddc:	10000a3e 	.word	0x10000a3e
    7de0:	2009c03c 	.word	0x2009c03c

00007de4 <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    7de4:	b580      	push	{r7, lr}
    7de6:	b084      	sub	sp, #16
    7de8:	af00      	add	r7, sp, #0
	int8_t lvl;
	u8 i = 0;
    7dea:	2300      	movs	r3, #0
    7dec:	73fb      	strb	r3, [r7, #15]
	u16 channels[3] = {2412, 2437, 2462};
    7dee:	4a5b      	ldr	r2, [pc, #364]	; (7f5c <led_specan+0x178>)
    7df0:	f107 0308 	add.w	r3, r7, #8
    7df4:	6810      	ldr	r0, [r2, #0]
    7df6:	6018      	str	r0, [r3, #0]
    7df8:	8892      	ldrh	r2, [r2, #4]
    7dfa:	809a      	strh	r2, [r3, #4]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7dfc:	4b58      	ldr	r3, [pc, #352]	; (7f60 <led_specan+0x17c>)
    7dfe:	2280      	movs	r2, #128	; 0x80
    7e00:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    7e02:	2012      	movs	r0, #18
    7e04:	f642 3122 	movw	r1, #11042	; 0x2b22
    7e08:	f001 ff0c 	bl	9c24 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7e0c:	2014      	movs	r0, #20
    7e0e:	f241 314b 	movw	r1, #4939	; 0x134b
    7e12:	f001 ff07 	bl	9c24 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    7e16:	2020      	movs	r0, #32
    7e18:	f240 1101 	movw	r1, #257	; 0x101
    7e1c:	f001 ff02 	bl	9c24 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    7e20:	2003      	movs	r0, #3
    7e22:	2129      	movs	r1, #41	; 0x29
    7e24:	f001 fefe 	bl	9c24 <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    7e28:	2006      	movs	r0, #6
    7e2a:	21f1      	movs	r1, #241	; 0xf1
    7e2c:	f001 fefa 	bl	9c24 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7e30:	bf00      	nop
    7e32:	f001 ffaf 	bl	9d94 <cc2400_status>
    7e36:	4603      	mov	r3, r0
    7e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7e3c:	2b00      	cmp	r3, #0
    7e3e:	d0f8      	beq.n	7e32 <led_specan+0x4e>
	while ((cc2400_status() & FS_LOCK));
    7e40:	bf00      	nop
    7e42:	f001 ffa7 	bl	9d94 <cc2400_status>
    7e46:	4603      	mov	r3, r0
    7e48:	f003 0304 	and.w	r3, r3, #4
    7e4c:	2b00      	cmp	r3, #0
    7e4e:	d1f8      	bne.n	7e42 <led_specan+0x5e>

	while (requested_mode == MODE_LED_SPECAN) {
    7e50:	e079      	b.n	7f46 <led_specan+0x162>
		cc2400_set(FSDIV, channels[i] - 1);
    7e52:	7bfb      	ldrb	r3, [r7, #15]
    7e54:	005b      	lsls	r3, r3, #1
    7e56:	f107 0210 	add.w	r2, r7, #16
    7e5a:	4413      	add	r3, r2
    7e5c:	f833 3c08 	ldrh.w	r3, [r3, #-8]
    7e60:	3b01      	subs	r3, #1
    7e62:	b29b      	uxth	r3, r3
    7e64:	2002      	movs	r0, #2
    7e66:	4619      	mov	r1, r3
    7e68:	f001 fedc 	bl	9c24 <cc2400_set>
		cc2400_strobe(SFSON);
    7e6c:	2061      	movs	r0, #97	; 0x61
    7e6e:	f001 ff9b 	bl	9da8 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    7e72:	bf00      	nop
    7e74:	f001 ff8e 	bl	9d94 <cc2400_status>
    7e78:	4603      	mov	r3, r0
    7e7a:	f003 0304 	and.w	r3, r3, #4
    7e7e:	2b00      	cmp	r3, #0
    7e80:	d0f8      	beq.n	7e74 <led_specan+0x90>
		cc2400_strobe(SRX);
    7e82:	2062      	movs	r0, #98	; 0x62
    7e84:	f001 ff90 	bl	9da8 <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    7e88:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    7e8c:	607b      	str	r3, [r7, #4]
    7e8e:	bf00      	nop
    7e90:	687b      	ldr	r3, [r7, #4]
    7e92:	3b01      	subs	r3, #1
    7e94:	607b      	str	r3, [r7, #4]
    7e96:	2b00      	cmp	r3, #0
    7e98:	d1fa      	bne.n	7e90 <led_specan+0xac>
		lvl = cc2400_get(RSSI) >> 8;
    7e9a:	2006      	movs	r0, #6
    7e9c:	f001 feac 	bl	9bf8 <cc2400_get>
    7ea0:	4603      	mov	r3, r0
    7ea2:	0a1b      	lsrs	r3, r3, #8
    7ea4:	b29b      	uxth	r3, r3
    7ea6:	73bb      	strb	r3, [r7, #14]
        if (lvl > rssi_threshold) {
    7ea8:	4b2e      	ldr	r3, [pc, #184]	; (7f64 <led_specan+0x180>)
    7eaa:	781b      	ldrb	r3, [r3, #0]
    7eac:	b2db      	uxtb	r3, r3
    7eae:	f997 200e 	ldrsb.w	r2, [r7, #14]
    7eb2:	b25b      	sxtb	r3, r3
    7eb4:	429a      	cmp	r2, r3
    7eb6:	dd15      	ble.n	7ee4 <led_specan+0x100>
            switch (i) {
    7eb8:	7bfb      	ldrb	r3, [r7, #15]
    7eba:	2b01      	cmp	r3, #1
    7ebc:	d009      	beq.n	7ed2 <led_specan+0xee>
    7ebe:	2b02      	cmp	r3, #2
    7ec0:	d00b      	beq.n	7eda <led_specan+0xf6>
    7ec2:	2b00      	cmp	r3, #0
    7ec4:	d000      	beq.n	7ec8 <led_specan+0xe4>
    7ec6:	e021      	b.n	7f0c <led_specan+0x128>
                case 0:
                    TXLED_SET;
    7ec8:	4b27      	ldr	r3, [pc, #156]	; (7f68 <led_specan+0x184>)
    7eca:	f44f 7280 	mov.w	r2, #256	; 0x100
    7ece:	601a      	str	r2, [r3, #0]
                    break;
    7ed0:	e007      	b.n	7ee2 <led_specan+0xfe>
                case 1:
                    RXLED_SET;
    7ed2:	4b25      	ldr	r3, [pc, #148]	; (7f68 <led_specan+0x184>)
    7ed4:	2210      	movs	r2, #16
    7ed6:	601a      	str	r2, [r3, #0]
                    break;
    7ed8:	e003      	b.n	7ee2 <led_specan+0xfe>
                case 2:
                    USRLED_SET;
    7eda:	4b23      	ldr	r3, [pc, #140]	; (7f68 <led_specan+0x184>)
    7edc:	2202      	movs	r2, #2
    7ede:	601a      	str	r2, [r3, #0]
                    break;
    7ee0:	bf00      	nop
    7ee2:	e013      	b.n	7f0c <led_specan+0x128>
            }
        }
        else {
            switch (i) {
    7ee4:	7bfb      	ldrb	r3, [r7, #15]
    7ee6:	2b01      	cmp	r3, #1
    7ee8:	d008      	beq.n	7efc <led_specan+0x118>
    7eea:	2b02      	cmp	r3, #2
    7eec:	d00a      	beq.n	7f04 <led_specan+0x120>
    7eee:	2b00      	cmp	r3, #0
    7ef0:	d10c      	bne.n	7f0c <led_specan+0x128>
                case 0:
                    TXLED_CLR;
    7ef2:	4b1e      	ldr	r3, [pc, #120]	; (7f6c <led_specan+0x188>)
    7ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
    7ef8:	601a      	str	r2, [r3, #0]
                    break;
    7efa:	e007      	b.n	7f0c <led_specan+0x128>
                case 1:
                    RXLED_CLR;
    7efc:	4b1b      	ldr	r3, [pc, #108]	; (7f6c <led_specan+0x188>)
    7efe:	2210      	movs	r2, #16
    7f00:	601a      	str	r2, [r3, #0]
                    break;
    7f02:	e003      	b.n	7f0c <led_specan+0x128>
                case 2:
                    USRLED_CLR;
    7f04:	4b19      	ldr	r3, [pc, #100]	; (7f6c <led_specan+0x188>)
    7f06:	2202      	movs	r2, #2
    7f08:	601a      	str	r2, [r3, #0]
                    break;
    7f0a:	bf00      	nop
            }
        }

		i = (i+1) % 3;
    7f0c:	7bfb      	ldrb	r3, [r7, #15]
    7f0e:	1c5a      	adds	r2, r3, #1
    7f10:	4b17      	ldr	r3, [pc, #92]	; (7f70 <led_specan+0x18c>)
    7f12:	fb83 3102 	smull	r3, r1, r3, r2
    7f16:	17d3      	asrs	r3, r2, #31
    7f18:	1ac9      	subs	r1, r1, r3
    7f1a:	460b      	mov	r3, r1
    7f1c:	005b      	lsls	r3, r3, #1
    7f1e:	440b      	add	r3, r1
    7f20:	1ad1      	subs	r1, r2, r3
    7f22:	460b      	mov	r3, r1
    7f24:	73fb      	strb	r3, [r7, #15]

		handle_usb(clkn);
    7f26:	4b13      	ldr	r3, [pc, #76]	; (7f74 <led_specan+0x190>)
    7f28:	681b      	ldr	r3, [r3, #0]
    7f2a:	4618      	mov	r0, r3
    7f2c:	f000 fca2 	bl	8874 <handle_usb>
        //wait(1);
		cc2400_strobe(SRFOFF);
    7f30:	2064      	movs	r0, #100	; 0x64
    7f32:	f001 ff39 	bl	9da8 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    7f36:	bf00      	nop
    7f38:	f001 ff2c 	bl	9d94 <cc2400_status>
    7f3c:	4603      	mov	r3, r0
    7f3e:	f003 0304 	and.w	r3, r3, #4
    7f42:	2b00      	cmp	r3, #0
    7f44:	d1f8      	bne.n	7f38 <led_specan+0x154>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols

	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_LED_SPECAN) {
    7f46:	4b0c      	ldr	r3, [pc, #48]	; (7f78 <led_specan+0x194>)
    7f48:	781b      	ldrb	r3, [r3, #0]
    7f4a:	b2db      	uxtb	r3, r3
    7f4c:	2b07      	cmp	r3, #7
    7f4e:	d080      	beq.n	7e52 <led_specan+0x6e>
		handle_usb(clkn);
        //wait(1);
		cc2400_strobe(SRFOFF);
		while ((cc2400_status() & FS_LOCK));
	}
	mode = MODE_IDLE;
    7f50:	4b0a      	ldr	r3, [pc, #40]	; (7f7c <led_specan+0x198>)
    7f52:	2200      	movs	r2, #0
    7f54:	701a      	strb	r2, [r3, #0]
}
    7f56:	3710      	adds	r7, #16
    7f58:	46bd      	mov	sp, r7
    7f5a:	bd80      	pop	{r7, pc}
    7f5c:	0000c244 	.word	0x0000c244
    7f60:	2009c058 	.word	0x2009c058
    7f64:	100004a2 	.word	0x100004a2
    7f68:	2009c038 	.word	0x2009c038
    7f6c:	2009c03c 	.word	0x2009c03c
    7f70:	55555556 	.word	0x55555556
    7f74:	10000be4 	.word	0x10000be4
    7f78:	10000a3f 	.word	0x10000a3f
    7f7c:	10000a3e 	.word	0x10000a3e

00007f80 <main>:

int main()
{
    7f80:	b580      	push	{r7, lr}
    7f82:	af00      	add	r7, sp, #0
	ubertooth_init();
    7f84:	f001 fd72 	bl	9a6c <ubertooth_init>
	clkn_init();
    7f88:	f7fd f9ee 	bl	5368 <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    7f8c:	4842      	ldr	r0, [pc, #264]	; (8098 <main+0x118>)
    7f8e:	f000 fba9 	bl	86e4 <ubertooth_usb_init>

	while (1) {
		handle_usb(clkn);
    7f92:	4b42      	ldr	r3, [pc, #264]	; (809c <main+0x11c>)
    7f94:	681b      	ldr	r3, [r3, #0]
    7f96:	4618      	mov	r0, r3
    7f98:	f000 fc6c 	bl	8874 <handle_usb>
		if(requested_mode != mode)
    7f9c:	4b40      	ldr	r3, [pc, #256]	; (80a0 <main+0x120>)
    7f9e:	781b      	ldrb	r3, [r3, #0]
    7fa0:	b2da      	uxtb	r2, r3
    7fa2:	4b40      	ldr	r3, [pc, #256]	; (80a4 <main+0x124>)
    7fa4:	781b      	ldrb	r3, [r3, #0]
    7fa6:	b2db      	uxtb	r3, r3
    7fa8:	429a      	cmp	r2, r3
    7faa:	d074      	beq.n	8096 <main+0x116>
			switch (requested_mode) {
    7fac:	4b3c      	ldr	r3, [pc, #240]	; (80a0 <main+0x120>)
    7fae:	781b      	ldrb	r3, [r3, #0]
    7fb0:	b2db      	uxtb	r3, r3
    7fb2:	2b0d      	cmp	r3, #13
    7fb4:	d86e      	bhi.n	8094 <main+0x114>
    7fb6:	a201      	add	r2, pc, #4	; (adr r2, 7fbc <main+0x3c>)
    7fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7fbc:	0000808f 	.word	0x0000808f
    7fc0:	00008001 	.word	0x00008001
    7fc4:	00008095 	.word	0x00008095
    7fc8:	0000802b 	.word	0x0000802b
    7fcc:	0000806f 	.word	0x0000806f
    7fd0:	0000803b 	.word	0x0000803b
    7fd4:	00008061 	.word	0x00008061
    7fd8:	00008075 	.word	0x00008075
    7fdc:	0000800d 	.word	0x0000800d
    7fe0:	00008019 	.word	0x00008019
    7fe4:	0000801f 	.word	0x0000801f
    7fe8:	00007ff5 	.word	0x00007ff5
    7fec:	00008025 	.word	0x00008025
    7ff0:	0000807b 	.word	0x0000807b
				 case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    7ff4:	2001      	movs	r0, #1
    7ff6:	f001 fc31 	bl	985c <wait>
					reset();
    7ffa:	f001 ffdf 	bl	9fbc <reset>
					break;
    7ffe:	e04a      	b.n	8096 <main+0x116>
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    8000:	4b28      	ldr	r3, [pc, #160]	; (80a4 <main+0x124>)
    8002:	2201      	movs	r2, #1
    8004:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    8006:	f7fe f8db 	bl	61c0 <bt_stream_rx>
					break;
    800a:	e044      	b.n	8096 <main+0x116>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    800c:	4b25      	ldr	r3, [pc, #148]	; (80a4 <main+0x124>)
    800e:	2208      	movs	r2, #8
    8010:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    8012:	f7fe f8d5 	bl	61c0 <bt_stream_rx>
					break;
    8016:	e03e      	b.n	8096 <main+0x116>
				case MODE_BT_FOLLOW_LE:
					bt_follow_le();
    8018:	f7ff f96e 	bl	72f8 <bt_follow_le>
					break;
    801c:	e03b      	b.n	8096 <main+0x116>
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    801e:	f7ff fd55 	bl	7acc <bt_promisc_le>
					break;
    8022:	e038      	b.n	8096 <main+0x116>
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
    8024:	f7ff fd96 	bl	7b54 <bt_slave_le>
					break;
    8028:	e035      	b.n	8096 <main+0x116>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    802a:	4b1e      	ldr	r3, [pc, #120]	; (80a4 <main+0x124>)
    802c:	2203      	movs	r2, #3
    802e:	701a      	strb	r2, [r3, #0]
					cc2400_txtest(&modulation, &channel);
    8030:	481d      	ldr	r0, [pc, #116]	; (80a8 <main+0x128>)
    8032:	491e      	ldr	r1, [pc, #120]	; (80ac <main+0x12c>)
    8034:	f000 ff92 	bl	8f5c <cc2400_txtest>
					break;
    8038:	e02d      	b.n	8096 <main+0x116>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    803a:	4b1a      	ldr	r3, [pc, #104]	; (80a4 <main+0x124>)
    803c:	2205      	movs	r2, #5
    803e:	701a      	strb	r2, [r3, #0]
					cc2400_rangetest(&channel);
    8040:	481a      	ldr	r0, [pc, #104]	; (80ac <main+0x12c>)
    8042:	f000 fc35 	bl	88b0 <cc2400_rangetest>
					mode = MODE_IDLE;
    8046:	4b17      	ldr	r3, [pc, #92]	; (80a4 <main+0x124>)
    8048:	2200      	movs	r2, #0
    804a:	701a      	strb	r2, [r3, #0]
					if (requested_mode == MODE_RANGE_TEST)
    804c:	4b14      	ldr	r3, [pc, #80]	; (80a0 <main+0x120>)
    804e:	781b      	ldrb	r3, [r3, #0]
    8050:	b2db      	uxtb	r3, r3
    8052:	2b05      	cmp	r3, #5
    8054:	d103      	bne.n	805e <main+0xde>
						requested_mode = MODE_IDLE;
    8056:	4b12      	ldr	r3, [pc, #72]	; (80a0 <main+0x120>)
    8058:	2200      	movs	r2, #0
    805a:	701a      	strb	r2, [r3, #0]
					break;
    805c:	e01b      	b.n	8096 <main+0x116>
    805e:	e01a      	b.n	8096 <main+0x116>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    8060:	4b10      	ldr	r3, [pc, #64]	; (80a4 <main+0x124>)
    8062:	2206      	movs	r2, #6
    8064:	701a      	strb	r2, [r3, #0]
					cc2400_repeater(&channel);
    8066:	4811      	ldr	r0, [pc, #68]	; (80ac <main+0x12c>)
    8068:	f000 fe40 	bl	8cec <cc2400_repeater>
					break;
    806c:	e013      	b.n	8096 <main+0x116>
				case MODE_SPECAN:
					specan();
    806e:	f7ff fded 	bl	7c4c <specan>
					break;
    8072:	e010      	b.n	8096 <main+0x116>
				case MODE_LED_SPECAN:
					led_specan();
    8074:	f7ff feb6 	bl	7de4 <led_specan>
					break;
    8078:	e00d      	b.n	8096 <main+0x116>
				case MODE_EGO:
					mode = MODE_EGO;
    807a:	4b0a      	ldr	r3, [pc, #40]	; (80a4 <main+0x124>)
    807c:	220d      	movs	r2, #13
    807e:	701a      	strb	r2, [r3, #0]
					ego_main(ego_mode);
    8080:	4b0b      	ldr	r3, [pc, #44]	; (80b0 <main+0x130>)
    8082:	781b      	ldrb	r3, [r3, #0]
    8084:	b2db      	uxtb	r3, r3
    8086:	4618      	mov	r0, r3
    8088:	f001 fb36 	bl	96f8 <ego_main>
					break;
    808c:	e003      	b.n	8096 <main+0x116>
				case MODE_IDLE:
					cc2400_idle();
    808e:	f7fd fd45 	bl	5b1c <cc2400_idle>
					break;
    8092:	e000      	b.n	8096 <main+0x116>
				default:
					/* This is really an error state, but what can you do? */
					break;
    8094:	bf00      	nop
			}
	}
    8096:	e77c      	b.n	7f92 <main+0x12>
    8098:	0000487d 	.word	0x0000487d
    809c:	10000be4 	.word	0x10000be4
    80a0:	10000a3f 	.word	0x10000a3f
    80a4:	10000a3e 	.word	0x10000a3e
    80a8:	10000a42 	.word	0x10000a42
    80ac:	1000049c 	.word	0x1000049c
    80b0:	10000a41 	.word	0x10000a41

000080b4 <perm5>:
	}
}

/* 5 bit permutation */
u8 perm5(u8 z, u8 p_high, u16 p_low)
{
    80b4:	b490      	push	{r4, r7}
    80b6:	b092      	sub	sp, #72	; 0x48
    80b8:	af00      	add	r7, sp, #0
    80ba:	4603      	mov	r3, r0
    80bc:	71fb      	strb	r3, [r7, #7]
    80be:	460b      	mov	r3, r1
    80c0:	71bb      	strb	r3, [r7, #6]
    80c2:	4613      	mov	r3, r2
    80c4:	80bb      	strh	r3, [r7, #4]
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
    80c6:	79fb      	ldrb	r3, [r7, #7]
    80c8:	f003 031f 	and.w	r3, r3, #31
    80cc:	71fb      	strb	r3, [r7, #7]
	p_high &= 0x1f;
    80ce:	79bb      	ldrb	r3, [r7, #6]
    80d0:	f003 031f 	and.w	r3, r3, #31
    80d4:	71bb      	strb	r3, [r7, #6]
	p_low &= 0x1ff;
    80d6:	88bb      	ldrh	r3, [r7, #4]
    80d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    80dc:	80bb      	strh	r3, [r7, #4]

	int i;
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
    80de:	4a5c      	ldr	r2, [pc, #368]	; (8250 <perm5+0x19c>)
    80e0:	f107 031c 	add.w	r3, r7, #28
    80e4:	4614      	mov	r4, r2
    80e6:	6820      	ldr	r0, [r4, #0]
    80e8:	6861      	ldr	r1, [r4, #4]
    80ea:	68a2      	ldr	r2, [r4, #8]
    80ec:	c307      	stmia	r3!, {r0, r1, r2}
    80ee:	89a2      	ldrh	r2, [r4, #12]
    80f0:	801a      	strh	r2, [r3, #0]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};
    80f2:	4a58      	ldr	r2, [pc, #352]	; (8254 <perm5+0x1a0>)
    80f4:	f107 030c 	add.w	r3, r7, #12
    80f8:	4614      	mov	r4, r2
    80fa:	6820      	ldr	r0, [r4, #0]
    80fc:	6861      	ldr	r1, [r4, #4]
    80fe:	68a2      	ldr	r2, [r4, #8]
    8100:	c307      	stmia	r3!, {r0, r1, r2}
    8102:	89a2      	ldrh	r2, [r4, #12]
    8104:	801a      	strh	r2, [r3, #0]

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    8106:	2300      	movs	r3, #0
    8108:	647b      	str	r3, [r7, #68]	; 0x44
    810a:	e010      	b.n	812e <perm5+0x7a>
		p[i] = (p_low >> i) & 0x01;
    810c:	88ba      	ldrh	r2, [r7, #4]
    810e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8110:	fa42 f303 	asr.w	r3, r2, r3
    8114:	b2db      	uxtb	r3, r3
    8116:	f003 0301 	and.w	r3, r3, #1
    811a:	b2d9      	uxtb	r1, r3
    811c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    8120:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8122:	4413      	add	r3, r2
    8124:	460a      	mov	r2, r1
    8126:	701a      	strb	r2, [r3, #0]
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    8128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    812a:	3301      	adds	r3, #1
    812c:	647b      	str	r3, [r7, #68]	; 0x44
    812e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8130:	2b08      	cmp	r3, #8
    8132:	ddeb      	ble.n	810c <perm5+0x58>
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    8134:	2300      	movs	r3, #0
    8136:	647b      	str	r3, [r7, #68]	; 0x44
    8138:	e011      	b.n	815e <perm5+0xaa>
		p[i+9] = (p_high >> i) & 0x01;
    813a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    813c:	3309      	adds	r3, #9
    813e:	79b9      	ldrb	r1, [r7, #6]
    8140:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    8142:	fa41 f202 	asr.w	r2, r1, r2
    8146:	b2d2      	uxtb	r2, r2
    8148:	f002 0201 	and.w	r2, r2, #1
    814c:	b2d2      	uxtb	r2, r2
    814e:	f107 0148 	add.w	r1, r7, #72	; 0x48
    8152:	440b      	add	r3, r1
    8154:	f803 2c1c 	strb.w	r2, [r3, #-28]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    8158:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    815a:	3301      	adds	r3, #1
    815c:	647b      	str	r3, [r7, #68]	; 0x44
    815e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8160:	2b04      	cmp	r3, #4
    8162:	ddea      	ble.n	813a <perm5+0x86>
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    8164:	2300      	movs	r3, #0
    8166:	647b      	str	r3, [r7, #68]	; 0x44
    8168:	e010      	b.n	818c <perm5+0xd8>
		z_bit[i] = (z >> i) & 0x01;
    816a:	79fa      	ldrb	r2, [r7, #7]
    816c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    816e:	fa42 f303 	asr.w	r3, r2, r3
    8172:	b2db      	uxtb	r3, r3
    8174:	f003 0301 	and.w	r3, r3, #1
    8178:	b2d9      	uxtb	r1, r3
    817a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    817e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8180:	4413      	add	r3, r2
    8182:	460a      	mov	r2, r1
    8184:	701a      	strb	r2, [r3, #0]
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    8186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8188:	3301      	adds	r3, #1
    818a:	647b      	str	r3, [r7, #68]	; 0x44
    818c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    818e:	2b04      	cmp	r3, #4
    8190:	ddeb      	ble.n	816a <perm5+0xb6>
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    8192:	230d      	movs	r3, #13
    8194:	647b      	str	r3, [r7, #68]	; 0x44
    8196:	e036      	b.n	8206 <perm5+0x152>
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
    8198:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    819c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    819e:	4413      	add	r3, r2
    81a0:	781b      	ldrb	r3, [r3, #0]
    81a2:	2b00      	cmp	r3, #0
    81a4:	d02c      	beq.n	8200 <perm5+0x14c>
			tmp = z_bit[index1[i]];
    81a6:	f107 021c 	add.w	r2, r7, #28
    81aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    81ac:	4413      	add	r3, r2
    81ae:	781b      	ldrb	r3, [r3, #0]
    81b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
    81b4:	4413      	add	r3, r2
    81b6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    81ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			z_bit[index1[i]] = z_bit[index2[i]];
    81be:	f107 021c 	add.w	r2, r7, #28
    81c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    81c4:	4413      	add	r3, r2
    81c6:	781b      	ldrb	r3, [r3, #0]
    81c8:	4619      	mov	r1, r3
    81ca:	f107 020c 	add.w	r2, r7, #12
    81ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    81d0:	4413      	add	r3, r2
    81d2:	781b      	ldrb	r3, [r3, #0]
    81d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
    81d8:	4413      	add	r3, r2
    81da:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
    81de:	f107 0348 	add.w	r3, r7, #72	; 0x48
    81e2:	440b      	add	r3, r1
    81e4:	f803 2c0c 	strb.w	r2, [r3, #-12]
			z_bit[index2[i]] = tmp;
    81e8:	f107 020c 	add.w	r2, r7, #12
    81ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    81ee:	4413      	add	r3, r2
    81f0:	781b      	ldrb	r3, [r3, #0]
    81f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
    81f6:	4413      	add	r3, r2
    81f8:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
    81fc:	f803 2c0c 	strb.w	r2, [r3, #-12]
	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    8200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8202:	3b01      	subs	r3, #1
    8204:	647b      	str	r3, [r7, #68]	; 0x44
    8206:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8208:	2b00      	cmp	r3, #0
    820a:	dac5      	bge.n	8198 <perm5+0xe4>
			z_bit[index2[i]] = tmp;
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
    820c:	2300      	movs	r3, #0
    820e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	for (i = 0; i < 5; i++)
    8212:	2300      	movs	r3, #0
    8214:	647b      	str	r3, [r7, #68]	; 0x44
    8216:	e011      	b.n	823c <perm5+0x188>
		output += z_bit[i] << i;
    8218:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    821c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    821e:	4413      	add	r3, r2
    8220:	781b      	ldrb	r3, [r3, #0]
    8222:	461a      	mov	r2, r3
    8224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8226:	fa02 f303 	lsl.w	r3, r2, r3
    822a:	b2da      	uxtb	r2, r3
    822c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    8230:	4413      	add	r3, r2
    8232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    8236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8238:	3301      	adds	r3, #1
    823a:	647b      	str	r3, [r7, #68]	; 0x44
    823c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    823e:	2b04      	cmp	r3, #4
    8240:	ddea      	ble.n	8218 <perm5+0x164>
		output += z_bit[i] << i;

	return output;
    8242:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
}
    8246:	4618      	mov	r0, r3
    8248:	3748      	adds	r7, #72	; 0x48
    824a:	46bd      	mov	sp, r7
    824c:	bc90      	pop	{r4, r7}
    824e:	4770      	bx	lr
    8250:	0000c24c 	.word	0x0000c24c
    8254:	0000c25c 	.word	0x0000c25c

00008258 <next_hop>:

u16 next_hop(u32 clock)
{
    8258:	b580      	push	{r7, lr}
    825a:	b08a      	sub	sp, #40	; 0x28
    825c:	af00      	add	r7, sp, #0
    825e:	6078      	str	r0, [r7, #4]
	u16 d, y2;
	u32 base_f, f, f_dash;

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
    8260:	687b      	ldr	r3, [r7, #4]
    8262:	089b      	lsrs	r3, r3, #2
    8264:	b2db      	uxtb	r3, r3
    8266:	f003 031f 	and.w	r3, r3, #31
    826a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	y1 = (clock >> 1) & 0x01;
    826e:	687b      	ldr	r3, [r7, #4]
    8270:	085b      	lsrs	r3, r3, #1
    8272:	b2db      	uxtb	r3, r3
    8274:	f003 0301 	and.w	r3, r3, #1
    8278:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	y2 = y1 << 5;
    827c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    8280:	b29b      	uxth	r3, r3
    8282:	015b      	lsls	r3, r3, #5
    8284:	847b      	strh	r3, [r7, #34]	; 0x22
	a = (a1 ^ (clock >> 21)) & 0x1f;
    8286:	687b      	ldr	r3, [r7, #4]
    8288:	0d5b      	lsrs	r3, r3, #21
    828a:	b2da      	uxtb	r2, r3
    828c:	4b4b      	ldr	r3, [pc, #300]	; (83bc <next_hop+0x164>)
    828e:	781b      	ldrb	r3, [r3, #0]
    8290:	4053      	eors	r3, r2
    8292:	b2db      	uxtb	r3, r3
    8294:	f003 031f 	and.w	r3, r3, #31
    8298:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    829c:	687b      	ldr	r3, [r7, #4]
    829e:	0c1b      	lsrs	r3, r3, #16
    82a0:	b2da      	uxtb	r2, r3
    82a2:	4b47      	ldr	r3, [pc, #284]	; (83c0 <next_hop+0x168>)
    82a4:	781b      	ldrb	r3, [r3, #0]
    82a6:	4053      	eors	r3, r2
    82a8:	b2db      	uxtb	r3, r3
    82aa:	f003 031f 	and.w	r3, r3, #31
    82ae:	f887 3020 	strb.w	r3, [r7, #32]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    82b2:	687b      	ldr	r3, [r7, #4]
    82b4:	09db      	lsrs	r3, r3, #7
    82b6:	b29a      	uxth	r2, r3
    82b8:	4b42      	ldr	r3, [pc, #264]	; (83c4 <next_hop+0x16c>)
    82ba:	881b      	ldrh	r3, [r3, #0]
    82bc:	4053      	eors	r3, r2
    82be:	b29b      	uxth	r3, r3
    82c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    82c4:	83fb      	strh	r3, [r7, #30]
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    82c6:	687b      	ldr	r3, [r7, #4]
    82c8:	08db      	lsrs	r3, r3, #3
    82ca:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    82ce:	f023 030f 	bic.w	r3, r3, #15
    82d2:	61bb      	str	r3, [r7, #24]
	f = base_f % 79;
    82d4:	69b9      	ldr	r1, [r7, #24]
    82d6:	4b3c      	ldr	r3, [pc, #240]	; (83c8 <next_hop+0x170>)
    82d8:	fba3 2301 	umull	r2, r3, r3, r1
    82dc:	099a      	lsrs	r2, r3, #6
    82de:	4613      	mov	r3, r2
    82e0:	009b      	lsls	r3, r3, #2
    82e2:	4413      	add	r3, r2
    82e4:	011b      	lsls	r3, r3, #4
    82e6:	1a9b      	subs	r3, r3, r2
    82e8:	1acb      	subs	r3, r1, r3
    82ea:	617b      	str	r3, [r7, #20]

	perm = perm5(
    82ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    82f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    82f4:	4413      	add	r3, r2
    82f6:	b2db      	uxtb	r3, r3
    82f8:	b2db      	uxtb	r3, r3
    82fa:	f003 031f 	and.w	r3, r3, #31
    82fe:	b2da      	uxtb	r2, r3
    8300:	4b32      	ldr	r3, [pc, #200]	; (83cc <next_hop+0x174>)
    8302:	781b      	ldrb	r3, [r3, #0]
    8304:	b2db      	uxtb	r3, r3
    8306:	4053      	eors	r3, r2
    8308:	b2db      	uxtb	r3, r3
    830a:	b2d9      	uxtb	r1, r3
    830c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    8310:	461a      	mov	r2, r3
    8312:	0152      	lsls	r2, r2, #5
    8314:	1ad3      	subs	r3, r2, r3
    8316:	b2db      	uxtb	r3, r3
    8318:	b2da      	uxtb	r2, r3
    831a:	f897 3020 	ldrb.w	r3, [r7, #32]
    831e:	4053      	eors	r3, r2
    8320:	b2db      	uxtb	r3, r3
    8322:	b2da      	uxtb	r2, r3
    8324:	8bfb      	ldrh	r3, [r7, #30]
    8326:	4608      	mov	r0, r1
    8328:	4611      	mov	r1, r2
    832a:	461a      	mov	r2, r3
    832c:	f7ff fec2 	bl	80b4 <perm5>
    8330:	4603      	mov	r3, r0
    8332:	74fb      	strb	r3, [r7, #19]
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % CHANNELS];
    8334:	7cfb      	ldrb	r3, [r7, #19]
    8336:	4a26      	ldr	r2, [pc, #152]	; (83d0 <next_hop+0x178>)
    8338:	7812      	ldrb	r2, [r2, #0]
    833a:	4413      	add	r3, r2
    833c:	461a      	mov	r2, r3
    833e:	697b      	ldr	r3, [r7, #20]
    8340:	441a      	add	r2, r3
    8342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    8344:	18d1      	adds	r1, r2, r3
    8346:	4b20      	ldr	r3, [pc, #128]	; (83c8 <next_hop+0x170>)
    8348:	fba3 2301 	umull	r2, r3, r3, r1
    834c:	099a      	lsrs	r2, r3, #6
    834e:	4613      	mov	r3, r2
    8350:	009b      	lsls	r3, r3, #2
    8352:	4413      	add	r3, r2
    8354:	011b      	lsls	r3, r3, #4
    8356:	1a9b      	subs	r3, r3, r2
    8358:	1aca      	subs	r2, r1, r3
    835a:	4b1e      	ldr	r3, [pc, #120]	; (83d4 <next_hop+0x17c>)
    835c:	5c9b      	ldrb	r3, [r3, r2]
    835e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(afh_enabled) {
    8362:	4b1d      	ldr	r3, [pc, #116]	; (83d8 <next_hop+0x180>)
    8364:	781b      	ldrb	r3, [r3, #0]
    8366:	2b00      	cmp	r3, #0
    8368:	d01d      	beq.n	83a6 <next_hop+0x14e>
		f_dash = base_f % used_channels;
    836a:	4b1c      	ldr	r3, [pc, #112]	; (83dc <next_hop+0x184>)
    836c:	781b      	ldrb	r3, [r3, #0]
    836e:	461a      	mov	r2, r3
    8370:	69bb      	ldr	r3, [r7, #24]
    8372:	fbb3 f1f2 	udiv	r1, r3, r2
    8376:	fb02 f201 	mul.w	r2, r2, r1
    837a:	1a9b      	subs	r3, r3, r2
    837c:	60fb      	str	r3, [r7, #12]
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    837e:	7cfb      	ldrb	r3, [r7, #19]
    8380:	4a13      	ldr	r2, [pc, #76]	; (83d0 <next_hop+0x178>)
    8382:	7812      	ldrb	r2, [r2, #0]
    8384:	4413      	add	r3, r2
    8386:	461a      	mov	r2, r3
    8388:	68fb      	ldr	r3, [r7, #12]
    838a:	441a      	add	r2, r3
    838c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    838e:	4413      	add	r3, r2
    8390:	4a12      	ldr	r2, [pc, #72]	; (83dc <next_hop+0x184>)
    8392:	7812      	ldrb	r2, [r2, #0]
    8394:	fbb3 f1f2 	udiv	r1, r3, r2
    8398:	fb02 f201 	mul.w	r2, r2, r1
    839c:	1a9b      	subs	r3, r3, r2
    839e:	4a10      	ldr	r2, [pc, #64]	; (83e0 <next_hop+0x188>)
    83a0:	5cd3      	ldrb	r3, [r2, r3]
    83a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return (2402 + next_channel);
    83a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    83aa:	b29b      	uxth	r3, r3
    83ac:	f603 1362 	addw	r3, r3, #2402	; 0x962
    83b0:	b29b      	uxth	r3, r3

}
    83b2:	4618      	mov	r0, r3
    83b4:	3728      	adds	r7, #40	; 0x28
    83b6:	46bd      	mov	sp, r7
    83b8:	bd80      	pop	{r7, pc}
    83ba:	bf00      	nop
    83bc:	1000111b 	.word	0x1000111b
    83c0:	1000111c 	.word	0x1000111c
    83c4:	100010ca 	.word	0x100010ca
    83c8:	cf6474a9 	.word	0xcf6474a9
    83cc:	100010c8 	.word	0x100010c8
    83d0:	1000116f 	.word	0x1000116f
    83d4:	10001120 	.word	0x10001120
    83d8:	10001024 	.word	0x10001024
    83dc:	100010c9 	.word	0x100010c9
    83e0:	100010cc 	.word	0x100010cc

000083e4 <btle_next_hop>:

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    83e4:	b580      	push	{r7, lr}
    83e6:	b084      	sub	sp, #16
    83e8:	af00      	add	r7, sp, #0
    83ea:	6078      	str	r0, [r7, #4]
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    83ec:	687b      	ldr	r3, [r7, #4]
    83ee:	7d5b      	ldrb	r3, [r3, #21]
    83f0:	4618      	mov	r0, r3
    83f2:	f000 f84b 	bl	848c <btle_channel_index_to_phys>
    83f6:	4603      	mov	r3, r0
    83f8:	81fb      	strh	r3, [r7, #14]
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    83fa:	687b      	ldr	r3, [r7, #4]
    83fc:	7d5b      	ldrb	r3, [r3, #21]
    83fe:	461a      	mov	r2, r3
    8400:	687b      	ldr	r3, [r7, #4]
    8402:	7d9b      	ldrb	r3, [r3, #22]
    8404:	441a      	add	r2, r3
    8406:	4b0a      	ldr	r3, [pc, #40]	; (8430 <btle_next_hop+0x4c>)
    8408:	fb82 0103 	smull	r0, r1, r2, r3
    840c:	1853      	adds	r3, r2, r1
    840e:	1159      	asrs	r1, r3, #5
    8410:	17d3      	asrs	r3, r2, #31
    8412:	1ac9      	subs	r1, r1, r3
    8414:	460b      	mov	r3, r1
    8416:	00db      	lsls	r3, r3, #3
    8418:	440b      	add	r3, r1
    841a:	009b      	lsls	r3, r3, #2
    841c:	440b      	add	r3, r1
    841e:	1ad1      	subs	r1, r2, r3
    8420:	b2ca      	uxtb	r2, r1
    8422:	687b      	ldr	r3, [r7, #4]
    8424:	755a      	strb	r2, [r3, #21]
	return phys;
    8426:	89fb      	ldrh	r3, [r7, #14]
}
    8428:	4618      	mov	r0, r3
    842a:	3710      	adds	r7, #16
    842c:	46bd      	mov	sp, r7
    842e:	bd80      	pop	{r7, pc}
    8430:	dd67c8a7 	.word	0xdd67c8a7

00008434 <btle_channel_index>:

u32 received_data = 0;

u8 btle_channel_index(u8 channel) {
    8434:	b480      	push	{r7}
    8436:	b085      	sub	sp, #20
    8438:	af00      	add	r7, sp, #0
    843a:	4603      	mov	r3, r0
    843c:	71fb      	strb	r3, [r7, #7]
	u8 idx;
	channel /= 2;
    843e:	79fb      	ldrb	r3, [r7, #7]
    8440:	085b      	lsrs	r3, r3, #1
    8442:	71fb      	strb	r3, [r7, #7]
	if (channel == 0)
    8444:	79fb      	ldrb	r3, [r7, #7]
    8446:	2b00      	cmp	r3, #0
    8448:	d102      	bne.n	8450 <btle_channel_index+0x1c>
		idx = 37;
    844a:	2325      	movs	r3, #37	; 0x25
    844c:	73fb      	strb	r3, [r7, #15]
    844e:	e015      	b.n	847c <btle_channel_index+0x48>
	else if (channel < 12)
    8450:	79fb      	ldrb	r3, [r7, #7]
    8452:	2b0b      	cmp	r3, #11
    8454:	d803      	bhi.n	845e <btle_channel_index+0x2a>
		idx = channel - 1;
    8456:	79fb      	ldrb	r3, [r7, #7]
    8458:	3b01      	subs	r3, #1
    845a:	73fb      	strb	r3, [r7, #15]
    845c:	e00e      	b.n	847c <btle_channel_index+0x48>
	else if (channel == 12)
    845e:	79fb      	ldrb	r3, [r7, #7]
    8460:	2b0c      	cmp	r3, #12
    8462:	d102      	bne.n	846a <btle_channel_index+0x36>
		idx = 38;
    8464:	2326      	movs	r3, #38	; 0x26
    8466:	73fb      	strb	r3, [r7, #15]
    8468:	e008      	b.n	847c <btle_channel_index+0x48>
	else if (channel < 39)
    846a:	79fb      	ldrb	r3, [r7, #7]
    846c:	2b26      	cmp	r3, #38	; 0x26
    846e:	d803      	bhi.n	8478 <btle_channel_index+0x44>
		idx = channel - 2;
    8470:	79fb      	ldrb	r3, [r7, #7]
    8472:	3b02      	subs	r3, #2
    8474:	73fb      	strb	r3, [r7, #15]
    8476:	e001      	b.n	847c <btle_channel_index+0x48>
	else
		idx = 39;
    8478:	2327      	movs	r3, #39	; 0x27
    847a:	73fb      	strb	r3, [r7, #15]
	return idx;
    847c:	7bfb      	ldrb	r3, [r7, #15]
}
    847e:	4618      	mov	r0, r3
    8480:	3714      	adds	r7, #20
    8482:	46bd      	mov	sp, r7
    8484:	f85d 7b04 	ldr.w	r7, [sp], #4
    8488:	4770      	bx	lr
    848a:	bf00      	nop

0000848c <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
    848c:	b480      	push	{r7}
    848e:	b085      	sub	sp, #20
    8490:	af00      	add	r7, sp, #0
    8492:	4603      	mov	r3, r0
    8494:	71fb      	strb	r3, [r7, #7]
	u16 phys;
	if (idx < 11)
    8496:	79fb      	ldrb	r3, [r7, #7]
    8498:	2b0a      	cmp	r3, #10
    849a:	d806      	bhi.n	84aa <btle_channel_index_to_phys+0x1e>
		phys = 2404 + 2 * idx;
    849c:	79fb      	ldrb	r3, [r7, #7]
    849e:	f203 43b2 	addw	r3, r3, #1202	; 0x4b2
    84a2:	b29b      	uxth	r3, r3
    84a4:	005b      	lsls	r3, r3, #1
    84a6:	81fb      	strh	r3, [r7, #14]
    84a8:	e01a      	b.n	84e0 <btle_channel_index_to_phys+0x54>
	else if (idx < 37)
    84aa:	79fb      	ldrb	r3, [r7, #7]
    84ac:	2b24      	cmp	r3, #36	; 0x24
    84ae:	d806      	bhi.n	84be <btle_channel_index_to_phys+0x32>
		phys = 2428 + 2 * (idx - 11);
    84b0:	79fb      	ldrb	r3, [r7, #7]
    84b2:	f203 43b3 	addw	r3, r3, #1203	; 0x4b3
    84b6:	b29b      	uxth	r3, r3
    84b8:	005b      	lsls	r3, r3, #1
    84ba:	81fb      	strh	r3, [r7, #14]
    84bc:	e010      	b.n	84e0 <btle_channel_index_to_phys+0x54>
	else if (idx == 37)
    84be:	79fb      	ldrb	r3, [r7, #7]
    84c0:	2b25      	cmp	r3, #37	; 0x25
    84c2:	d103      	bne.n	84cc <btle_channel_index_to_phys+0x40>
		phys = 2402;
    84c4:	f640 1362 	movw	r3, #2402	; 0x962
    84c8:	81fb      	strh	r3, [r7, #14]
    84ca:	e009      	b.n	84e0 <btle_channel_index_to_phys+0x54>
	else if (idx == 38)
    84cc:	79fb      	ldrb	r3, [r7, #7]
    84ce:	2b26      	cmp	r3, #38	; 0x26
    84d0:	d103      	bne.n	84da <btle_channel_index_to_phys+0x4e>
		phys = 2426;
    84d2:	f640 137a 	movw	r3, #2426	; 0x97a
    84d6:	81fb      	strh	r3, [r7, #14]
    84d8:	e002      	b.n	84e0 <btle_channel_index_to_phys+0x54>
	else
		phys = 2480;
    84da:	f44f 631b 	mov.w	r3, #2480	; 0x9b0
    84de:	81fb      	strh	r3, [r7, #14]
	return phys;
    84e0:	89fb      	ldrh	r3, [r7, #14]
}
    84e2:	4618      	mov	r0, r3
    84e4:	3714      	adds	r7, #20
    84e6:	46bd      	mov	sp, r7
    84e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    84ec:	4770      	bx	lr
    84ee:	bf00      	nop

000084f0 <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    84f0:	b480      	push	{r7}
    84f2:	b08b      	sub	sp, #44	; 0x2c
    84f4:	af00      	add	r7, sp, #0
    84f6:	60f8      	str	r0, [r7, #12]
    84f8:	60b9      	str	r1, [r7, #8]
    84fa:	607a      	str	r2, [r7, #4]
	u32 state = crc_init & 0xffffff;
    84fc:	68fb      	ldr	r3, [r7, #12]
    84fe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8502:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
    8504:	4b1b      	ldr	r3, [pc, #108]	; (8574 <btle_calc_crc+0x84>)
    8506:	617b      	str	r3, [r7, #20]
	int i, j;

	for (i = 0; i < len; ++i) {
    8508:	2300      	movs	r3, #0
    850a:	623b      	str	r3, [r7, #32]
    850c:	e027      	b.n	855e <btle_calc_crc+0x6e>
		u8 cur = data[i];
    850e:	6a3b      	ldr	r3, [r7, #32]
    8510:	68ba      	ldr	r2, [r7, #8]
    8512:	4413      	add	r3, r2
    8514:	781b      	ldrb	r3, [r3, #0]
    8516:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    8518:	2300      	movs	r3, #0
    851a:	61fb      	str	r3, [r7, #28]
    851c:	e019      	b.n	8552 <btle_calc_crc+0x62>
			int next_bit = (state ^ cur) & 1;
    851e:	7efa      	ldrb	r2, [r7, #27]
    8520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8522:	4053      	eors	r3, r2
    8524:	f003 0301 	and.w	r3, r3, #1
    8528:	613b      	str	r3, [r7, #16]
			cur >>= 1;
    852a:	7efb      	ldrb	r3, [r7, #27]
    852c:	085b      	lsrs	r3, r3, #1
    852e:	76fb      	strb	r3, [r7, #27]
			state >>= 1;
    8530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8532:	085b      	lsrs	r3, r3, #1
    8534:	627b      	str	r3, [r7, #36]	; 0x24
			if (next_bit) {
    8536:	693b      	ldr	r3, [r7, #16]
    8538:	2b00      	cmp	r3, #0
    853a:	d007      	beq.n	854c <btle_calc_crc+0x5c>
				state |= 1 << 23;
    853c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    853e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    8542:	627b      	str	r3, [r7, #36]	; 0x24
				state ^= lfsr_mask;
    8544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8546:	697b      	ldr	r3, [r7, #20]
    8548:	4053      	eors	r3, r2
    854a:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    854c:	69fb      	ldr	r3, [r7, #28]
    854e:	3301      	adds	r3, #1
    8550:	61fb      	str	r3, [r7, #28]
    8552:	69fb      	ldr	r3, [r7, #28]
    8554:	2b07      	cmp	r3, #7
    8556:	dde2      	ble.n	851e <btle_calc_crc+0x2e>
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    8558:	6a3b      	ldr	r3, [r7, #32]
    855a:	3301      	adds	r3, #1
    855c:	623b      	str	r3, [r7, #32]
    855e:	6a3a      	ldr	r2, [r7, #32]
    8560:	687b      	ldr	r3, [r7, #4]
    8562:	429a      	cmp	r2, r3
    8564:	dbd3      	blt.n	850e <btle_calc_crc+0x1e>
				state ^= lfsr_mask;
			}
		}
	}

	return state;
    8566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    8568:	4618      	mov	r0, r3
    856a:	372c      	adds	r7, #44	; 0x2c
    856c:	46bd      	mov	sp, r7
    856e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8572:	4770      	bx	lr
    8574:	005a6000 	.word	0x005a6000

00008578 <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    8578:	b480      	push	{r7}
    857a:	b08d      	sub	sp, #52	; 0x34
    857c:	af00      	add	r7, sp, #0
    857e:	60f8      	str	r0, [r7, #12]
    8580:	60b9      	str	r1, [r7, #8]
    8582:	607a      	str	r2, [r7, #4]
	u32 state = crc;
    8584:	68fb      	ldr	r3, [r7, #12]
    8586:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
    8588:	4b2b      	ldr	r3, [pc, #172]	; (8638 <btle_reverse_crc+0xc0>)
    858a:	61fb      	str	r3, [r7, #28]
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    858c:	687b      	ldr	r3, [r7, #4]
    858e:	3b01      	subs	r3, #1
    8590:	627b      	str	r3, [r7, #36]	; 0x24
    8592:	e02d      	b.n	85f0 <btle_reverse_crc+0x78>
		u8 cur = data[i];
    8594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8596:	68ba      	ldr	r2, [r7, #8]
    8598:	4413      	add	r3, r2
    859a:	781b      	ldrb	r3, [r3, #0]
    859c:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    859e:	2300      	movs	r3, #0
    85a0:	623b      	str	r3, [r7, #32]
    85a2:	e01f      	b.n	85e4 <btle_reverse_crc+0x6c>
			int top_bit = state >> 23;
    85a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    85a6:	0ddb      	lsrs	r3, r3, #23
    85a8:	617b      	str	r3, [r7, #20]
			state = (state << 1) & 0xffffff;
    85aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    85ac:	005b      	lsls	r3, r3, #1
    85ae:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    85b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    85b4:	7efa      	ldrb	r2, [r7, #27]
    85b6:	6a3b      	ldr	r3, [r7, #32]
    85b8:	f1c3 0307 	rsb	r3, r3, #7
    85bc:	fa42 f303 	asr.w	r3, r2, r3
    85c0:	f003 0201 	and.w	r2, r3, #1
    85c4:	697b      	ldr	r3, [r7, #20]
    85c6:	4053      	eors	r3, r2
    85c8:	461a      	mov	r2, r3
    85ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    85cc:	4313      	orrs	r3, r2
    85ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (top_bit)
    85d0:	697b      	ldr	r3, [r7, #20]
    85d2:	2b00      	cmp	r3, #0
    85d4:	d003      	beq.n	85de <btle_reverse_crc+0x66>
				state ^= lfsr_mask;
    85d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    85d8:	69fb      	ldr	r3, [r7, #28]
    85da:	4053      	eors	r3, r2
    85dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    85de:	6a3b      	ldr	r3, [r7, #32]
    85e0:	3301      	adds	r3, #1
    85e2:	623b      	str	r3, [r7, #32]
    85e4:	6a3b      	ldr	r3, [r7, #32]
    85e6:	2b07      	cmp	r3, #7
    85e8:	dddc      	ble.n	85a4 <btle_reverse_crc+0x2c>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    85ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    85ec:	3b01      	subs	r3, #1
    85ee:	627b      	str	r3, [r7, #36]	; 0x24
    85f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    85f2:	2b00      	cmp	r3, #0
    85f4:	dace      	bge.n	8594 <btle_reverse_crc+0x1c>
			if (top_bit)
				state ^= lfsr_mask;
		}
	}

	ret = 0;
    85f6:	2300      	movs	r3, #0
    85f8:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < 24; ++i)
    85fa:	2300      	movs	r3, #0
    85fc:	627b      	str	r3, [r7, #36]	; 0x24
    85fe:	e010      	b.n	8622 <btle_reverse_crc+0xaa>
		ret |= ((state >> i) & 1) << (23 - i);
    8600:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8604:	fa22 f303 	lsr.w	r3, r2, r3
    8608:	f003 0201 	and.w	r2, r3, #1
    860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    860e:	f1c3 0317 	rsb	r3, r3, #23
    8612:	fa02 f303 	lsl.w	r3, r2, r3
    8616:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8618:	4313      	orrs	r3, r2
    861a:	62bb      	str	r3, [r7, #40]	; 0x28
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    861e:	3301      	adds	r3, #1
    8620:	627b      	str	r3, [r7, #36]	; 0x24
    8622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8624:	2b17      	cmp	r3, #23
    8626:	ddeb      	ble.n	8600 <btle_reverse_crc+0x88>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
    8628:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    862a:	4618      	mov	r0, r3
    862c:	3734      	adds	r7, #52	; 0x34
    862e:	46bd      	mov	sp, r7
    8630:	f85d 7b04 	ldr.w	r7, [sp], #4
    8634:	4770      	bx	lr
    8636:	bf00      	nop
    8638:	00b4c000 	.word	0x00b4c000

0000863c <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    863c:	b480      	push	{r7}
    863e:	b089      	sub	sp, #36	; 0x24
    8640:	af00      	add	r7, sp, #0
    8642:	60f8      	str	r0, [r7, #12]
    8644:	60b9      	str	r1, [r7, #8]
    8646:	607a      	str	r2, [r7, #4]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    8648:	68fb      	ldr	r3, [r7, #12]
    864a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    864e:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < len; ++i) {
    8650:	2300      	movs	r3, #0
    8652:	61bb      	str	r3, [r7, #24]
    8654:	e012      	b.n	867c <btle_crcgen_lut+0x40>
		key = data[i] ^ (state & 0xff);
    8656:	69bb      	ldr	r3, [r7, #24]
    8658:	68ba      	ldr	r2, [r7, #8]
    865a:	4413      	add	r3, r2
    865c:	781a      	ldrb	r2, [r3, #0]
    865e:	69fb      	ldr	r3, [r7, #28]
    8660:	b2db      	uxtb	r3, r3
    8662:	4053      	eors	r3, r2
    8664:	75fb      	strb	r3, [r7, #23]
		state = (state >> 8) ^ btle_crc_lut[key];
    8666:	69fb      	ldr	r3, [r7, #28]
    8668:	0a1a      	lsrs	r2, r3, #8
    866a:	7dfb      	ldrb	r3, [r7, #23]
    866c:	4909      	ldr	r1, [pc, #36]	; (8694 <btle_crcgen_lut+0x58>)
    866e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    8672:	4053      	eors	r3, r2
    8674:	61fb      	str	r3, [r7, #28]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    8676:	69bb      	ldr	r3, [r7, #24]
    8678:	3301      	adds	r3, #1
    867a:	61bb      	str	r3, [r7, #24]
    867c:	69ba      	ldr	r2, [r7, #24]
    867e:	687b      	ldr	r3, [r7, #4]
    8680:	429a      	cmp	r2, r3
    8682:	dbe8      	blt.n	8656 <btle_crcgen_lut+0x1a>
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
	}
	return state;
    8684:	69fb      	ldr	r3, [r7, #28]
}
    8686:	4618      	mov	r0, r3
    8688:	3724      	adds	r7, #36	; 0x24
    868a:	46bd      	mov	sp, r7
    868c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8690:	4770      	bx	lr
    8692:	bf00      	nop
    8694:	100004a8 	.word	0x100004a8

00008698 <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    8698:	b590      	push	{r4, r7, lr}
    869a:	b087      	sub	sp, #28
    869c:	af00      	add	r7, sp, #0
    869e:	60f8      	str	r0, [r7, #12]
    86a0:	60b9      	str	r1, [r7, #8]
    86a2:	607a      	str	r2, [r7, #4]
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    86a4:	68fb      	ldr	r3, [r7, #12]
    86a6:	885b      	ldrh	r3, [r3, #2]
    86a8:	823b      	strh	r3, [r7, #16]
    86aa:	68fb      	ldr	r3, [r7, #12]
    86ac:	889b      	ldrh	r3, [r3, #4]
    86ae:	827b      	strh	r3, [r7, #18]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    86b0:	4b0b      	ldr	r3, [pc, #44]	; (86e0 <usb_vendor_request_handler+0x48>)
    86b2:	681c      	ldr	r4, [r3, #0]
    86b4:	68fb      	ldr	r3, [r7, #12]
    86b6:	7859      	ldrb	r1, [r3, #1]
    86b8:	687b      	ldr	r3, [r7, #4]
    86ba:	681b      	ldr	r3, [r3, #0]
    86bc:	f107 0210 	add.w	r2, r7, #16
    86c0:	4608      	mov	r0, r1
    86c2:	4611      	mov	r1, r2
    86c4:	461a      	mov	r2, r3
    86c6:	68bb      	ldr	r3, [r7, #8]
    86c8:	47a0      	blx	r4
    86ca:	6178      	str	r0, [r7, #20]
	return (BOOL) (rv==1);
    86cc:	697b      	ldr	r3, [r7, #20]
    86ce:	2b01      	cmp	r3, #1
    86d0:	bf0c      	ite	eq
    86d2:	2301      	moveq	r3, #1
    86d4:	2300      	movne	r3, #0
    86d6:	b2db      	uxtb	r3, r3
}
    86d8:	4618      	mov	r0, r3
    86da:	371c      	adds	r7, #28
    86dc:	46bd      	mov	sp, r7
    86de:	bd90      	pop	{r4, r7, pc}
    86e0:	10003274 	.word	0x10003274

000086e4 <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    86e4:	b580      	push	{r7, lr}
    86e6:	b082      	sub	sp, #8
    86e8:	af00      	add	r7, sp, #0
    86ea:	6078      	str	r0, [r7, #4]
	// initialise stack
	USBInit();
    86ec:	f001 fdcc 	bl	a288 <USBInit>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    86f0:	480b      	ldr	r0, [pc, #44]	; (8720 <ubertooth_usb_init+0x3c>)
    86f2:	f002 fa2b 	bl	ab4c <USBRegisterDescriptors>

	// Request handler 
	v_req_handler = vendor_req_handler;
    86f6:	4a0b      	ldr	r2, [pc, #44]	; (8724 <ubertooth_usb_init+0x40>)
    86f8:	687b      	ldr	r3, [r7, #4]
    86fa:	6013      	str	r3, [r2, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    86fc:	2002      	movs	r0, #2
    86fe:	490a      	ldr	r1, [pc, #40]	; (8728 <ubertooth_usb_init+0x44>)
    8700:	4a0a      	ldr	r2, [pc, #40]	; (872c <ubertooth_usb_init+0x48>)
    8702:	f001 fd9d 	bl	a240 <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    8706:	20ff      	movs	r0, #255	; 0xff
    8708:	4909      	ldr	r1, [pc, #36]	; (8730 <ubertooth_usb_init+0x4c>)
    870a:	f002 f9c9 	bl	aaa0 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    870e:	2001      	movs	r0, #1
    8710:	f001 fefc 	bl	a50c <USBHwConnect>

	return 0;
    8714:	2300      	movs	r3, #0
}
    8716:	4618      	mov	r0, r3
    8718:	3708      	adds	r7, #8
    871a:	46bd      	mov	sp, r7
    871c:	bd80      	pop	{r7, pc}
    871e:	bf00      	nop
    8720:	0000c26c 	.word	0x0000c26c
    8724:	10003274 	.word	0x10003274
    8728:	00008699 	.word	0x00008699
    872c:	10003170 	.word	0x10003170
    8730:	0000c330 	.word	0x0000c330

00008734 <queue_init>:

volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init()
{
    8734:	b480      	push	{r7}
    8736:	af00      	add	r7, sp, #0
	head = 0;
    8738:	4b04      	ldr	r3, [pc, #16]	; (874c <queue_init+0x18>)
    873a:	2200      	movs	r2, #0
    873c:	601a      	str	r2, [r3, #0]
	tail = 0;
    873e:	4b04      	ldr	r3, [pc, #16]	; (8750 <queue_init+0x1c>)
    8740:	2200      	movs	r2, #0
    8742:	601a      	str	r2, [r3, #0]
}
    8744:	46bd      	mov	sp, r7
    8746:	f85d 7b04 	ldr.w	r7, [sp], #4
    874a:	4770      	bx	lr
    874c:	10000a5c 	.word	0x10000a5c
    8750:	10000a60 	.word	0x10000a60

00008754 <usb_enqueue>:

usb_pkt_rx *usb_enqueue()
{
    8754:	b480      	push	{r7}
    8756:	b083      	sub	sp, #12
    8758:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    875a:	4b13      	ldr	r3, [pc, #76]	; (87a8 <usb_enqueue+0x54>)
    875c:	681b      	ldr	r3, [r3, #0]
    875e:	b2db      	uxtb	r3, r3
    8760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8764:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    8766:	4b11      	ldr	r3, [pc, #68]	; (87ac <usb_enqueue+0x58>)
    8768:	681b      	ldr	r3, [r3, #0]
    876a:	b2db      	uxtb	r3, r3
    876c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8770:	71bb      	strb	r3, [r7, #6]
	u8 n = (t + 1) & 0x7F;
    8772:	79bb      	ldrb	r3, [r7, #6]
    8774:	3301      	adds	r3, #1
    8776:	b2db      	uxtb	r3, r3
    8778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    877c:	717b      	strb	r3, [r7, #5]

	/* fail if queue is full */
	if (h == n) {
    877e:	79fa      	ldrb	r2, [r7, #7]
    8780:	797b      	ldrb	r3, [r7, #5]
    8782:	429a      	cmp	r2, r3
    8784:	d101      	bne.n	878a <usb_enqueue+0x36>
		return NULL;
    8786:	2300      	movs	r3, #0
    8788:	e008      	b.n	879c <usb_enqueue+0x48>
	}

	++tail;
    878a:	4b08      	ldr	r3, [pc, #32]	; (87ac <usb_enqueue+0x58>)
    878c:	681b      	ldr	r3, [r3, #0]
    878e:	3301      	adds	r3, #1
    8790:	4a06      	ldr	r2, [pc, #24]	; (87ac <usb_enqueue+0x58>)
    8792:	6013      	str	r3, [r2, #0]
	return &fifo[t];
    8794:	79bb      	ldrb	r3, [r7, #6]
    8796:	019b      	lsls	r3, r3, #6
    8798:	4a05      	ldr	r2, [pc, #20]	; (87b0 <usb_enqueue+0x5c>)
    879a:	4413      	add	r3, r2
	
}
    879c:	4618      	mov	r0, r3
    879e:	370c      	adds	r7, #12
    87a0:	46bd      	mov	sp, r7
    87a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    87a6:	4770      	bx	lr
    87a8:	10000a5c 	.word	0x10000a5c
    87ac:	10000a60 	.word	0x10000a60
    87b0:	10001170 	.word	0x10001170

000087b4 <dequeue>:

usb_pkt_rx *dequeue()
{
    87b4:	b480      	push	{r7}
    87b6:	b083      	sub	sp, #12
    87b8:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    87ba:	4b10      	ldr	r3, [pc, #64]	; (87fc <dequeue+0x48>)
    87bc:	681b      	ldr	r3, [r3, #0]
    87be:	b2db      	uxtb	r3, r3
    87c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    87c4:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    87c6:	4b0e      	ldr	r3, [pc, #56]	; (8800 <dequeue+0x4c>)
    87c8:	681b      	ldr	r3, [r3, #0]
    87ca:	b2db      	uxtb	r3, r3
    87cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    87d0:	71bb      	strb	r3, [r7, #6]

	/* fail if queue is empty */
	if (h == t) {
    87d2:	79fa      	ldrb	r2, [r7, #7]
    87d4:	79bb      	ldrb	r3, [r7, #6]
    87d6:	429a      	cmp	r2, r3
    87d8:	d101      	bne.n	87de <dequeue+0x2a>
		return NULL;
    87da:	2300      	movs	r3, #0
    87dc:	e008      	b.n	87f0 <dequeue+0x3c>
	}

	++head;
    87de:	4b07      	ldr	r3, [pc, #28]	; (87fc <dequeue+0x48>)
    87e0:	681b      	ldr	r3, [r3, #0]
    87e2:	3301      	adds	r3, #1
    87e4:	4a05      	ldr	r2, [pc, #20]	; (87fc <dequeue+0x48>)
    87e6:	6013      	str	r3, [r2, #0]
	return &fifo[h];
    87e8:	79fb      	ldrb	r3, [r7, #7]
    87ea:	019b      	lsls	r3, r3, #6
    87ec:	4a05      	ldr	r2, [pc, #20]	; (8804 <dequeue+0x50>)
    87ee:	4413      	add	r3, r2
}
    87f0:	4618      	mov	r0, r3
    87f2:	370c      	adds	r7, #12
    87f4:	46bd      	mov	sp, r7
    87f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    87fa:	4770      	bx	lr
    87fc:	10000a5c 	.word	0x10000a5c
    8800:	10000a60 	.word	0x10000a60
    8804:	10001170 	.word	0x10001170

00008808 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    8808:	b580      	push	{r7, lr}
    880a:	b084      	sub	sp, #16
    880c:	af00      	add	r7, sp, #0
    880e:	6078      	str	r0, [r7, #4]
	usb_pkt_rx *pkt = dequeue(&pkt);
    8810:	f107 030c 	add.w	r3, r7, #12
    8814:	4618      	mov	r0, r3
    8816:	f7ff ffcd 	bl	87b4 <dequeue>
    881a:	4603      	mov	r3, r0
    881c:	60fb      	str	r3, [r7, #12]
	if (pkt != NULL) {
    881e:	68fb      	ldr	r3, [r7, #12]
    8820:	2b00      	cmp	r3, #0
    8822:	d00a      	beq.n	883a <dequeue_send+0x32>
		last_usb_pkt = clkn;
    8824:	4a11      	ldr	r2, [pc, #68]	; (886c <dequeue_send+0x64>)
    8826:	687b      	ldr	r3, [r7, #4]
    8828:	6013      	str	r3, [r2, #0]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    882a:	68fb      	ldr	r3, [r7, #12]
    882c:	2082      	movs	r0, #130	; 0x82
    882e:	4619      	mov	r1, r3
    8830:	2240      	movs	r2, #64	; 0x40
    8832:	f001 fec7 	bl	a5c4 <USBHwEPWrite>
		return 1;
    8836:	2301      	movs	r3, #1
    8838:	e013      	b.n	8862 <dequeue_send+0x5a>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    883a:	4b0c      	ldr	r3, [pc, #48]	; (886c <dequeue_send+0x64>)
    883c:	681b      	ldr	r3, [r3, #0]
    883e:	687a      	ldr	r2, [r7, #4]
    8840:	1ad3      	subs	r3, r2, r3
    8842:	4a0b      	ldr	r2, [pc, #44]	; (8870 <dequeue_send+0x68>)
    8844:	4293      	cmp	r3, r2
    8846:	d90b      	bls.n	8860 <dequeue_send+0x58>
			u8 pkt_type = KEEP_ALIVE;
    8848:	2303      	movs	r3, #3
    884a:	72fb      	strb	r3, [r7, #11]
			last_usb_pkt = clkn;
    884c:	4a07      	ldr	r2, [pc, #28]	; (886c <dequeue_send+0x64>)
    884e:	687b      	ldr	r3, [r7, #4]
    8850:	6013      	str	r3, [r2, #0]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    8852:	f107 030b 	add.w	r3, r7, #11
    8856:	2082      	movs	r0, #130	; 0x82
    8858:	4619      	mov	r1, r3
    885a:	2201      	movs	r2, #1
    885c:	f001 feb2 	bl	a5c4 <USBHwEPWrite>
		}
		return 0;
    8860:	2300      	movs	r3, #0
	}
}
    8862:	4618      	mov	r0, r3
    8864:	3710      	adds	r7, #16
    8866:	46bd      	mov	sp, r7
    8868:	bd80      	pop	{r7, pc}
    886a:	bf00      	nop
    886c:	10000a64 	.word	0x10000a64
    8870:	00061a80 	.word	0x00061a80

00008874 <handle_usb>:

void handle_usb(u32 clkn)
{
    8874:	b580      	push	{r7, lr}
    8876:	b084      	sub	sp, #16
    8878:	af00      	add	r7, sp, #0
    887a:	6078      	str	r0, [r7, #4]
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    887c:	2082      	movs	r0, #130	; 0x82
    887e:	f001 fe65 	bl	a54c <USBHwEPGetStatus>
    8882:	4603      	mov	r3, r0
    8884:	73fb      	strb	r3, [r7, #15]
	if (!(epstat & EPSTAT_B1FULL)) {
    8886:	7bfb      	ldrb	r3, [r7, #15]
    8888:	f003 0320 	and.w	r3, r3, #32
    888c:	2b00      	cmp	r3, #0
    888e:	d102      	bne.n	8896 <handle_usb+0x22>
		dequeue_send(clkn);
    8890:	6878      	ldr	r0, [r7, #4]
    8892:	f7ff ffb9 	bl	8808 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    8896:	7bfb      	ldrb	r3, [r7, #15]
    8898:	f003 0340 	and.w	r3, r3, #64	; 0x40
    889c:	2b00      	cmp	r3, #0
    889e:	d102      	bne.n	88a6 <handle_usb+0x32>
		dequeue_send(clkn);
    88a0:	6878      	ldr	r0, [r7, #4]
    88a2:	f7ff ffb1 	bl	8808 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
    88a6:	f001 ff53 	bl	a750 <USBHwISR>
}
    88aa:	3710      	adds	r7, #16
    88ac:	46bd      	mov	sp, r7
    88ae:	bd80      	pop	{r7, pc}

000088b0 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    88b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    88b4:	b095      	sub	sp, #84	; 0x54
    88b6:	af00      	add	r7, sp, #0
    88b8:	6078      	str	r0, [r7, #4]
    88ba:	4669      	mov	r1, sp
    88bc:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u32 command[5];
	u32 result[5];
	int i;
	int j;
	u8 len = 22;
    88be:	2116      	movs	r1, #22
    88c0:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
	u8 pa = 0;
    88c4:	2100      	movs	r1, #0
    88c6:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
	u8 txbuf[len];
    88ca:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    88ce:	4631      	mov	r1, r6
    88d0:	3901      	subs	r1, #1
    88d2:	6439      	str	r1, [r7, #64]	; 0x40
    88d4:	b2f0      	uxtb	r0, r6
    88d6:	f04f 0100 	mov.w	r1, #0
    88da:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
    88de:	ea4b 7b50 	orr.w	fp, fp, r0, lsr #29
    88e2:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
    88e6:	b2f0      	uxtb	r0, r6
    88e8:	f04f 0100 	mov.w	r1, #0
    88ec:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    88f0:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
    88f4:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    88f8:	4631      	mov	r1, r6
    88fa:	3107      	adds	r1, #7
    88fc:	08c9      	lsrs	r1, r1, #3
    88fe:	00c9      	lsls	r1, r1, #3
    8900:	ebad 0d01 	sub.w	sp, sp, r1
    8904:	4669      	mov	r1, sp
    8906:	3100      	adds	r1, #0
    8908:	63f9      	str	r1, [r7, #60]	; 0x3c
	u8 rxbuf[len];
    890a:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    890e:	4631      	mov	r1, r6
    8910:	3901      	subs	r1, #1
    8912:	63b9      	str	r1, [r7, #56]	; 0x38
    8914:	b2f0      	uxtb	r0, r6
    8916:	f04f 0100 	mov.w	r1, #0
    891a:	00cd      	lsls	r5, r1, #3
    891c:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    8920:	00c4      	lsls	r4, r0, #3
    8922:	b2f0      	uxtb	r0, r6
    8924:	f04f 0100 	mov.w	r1, #0
    8928:	00cb      	lsls	r3, r1, #3
    892a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    892e:	00c2      	lsls	r2, r0, #3
    8930:	4633      	mov	r3, r6
    8932:	3307      	adds	r3, #7
    8934:	08db      	lsrs	r3, r3, #3
    8936:	00db      	lsls	r3, r3, #3
    8938:	ebad 0d03 	sub.w	sp, sp, r3
    893c:	466b      	mov	r3, sp
    893e:	3300      	adds	r3, #0
    8940:	637b      	str	r3, [r7, #52]	; 0x34

	txbuf[0] = len - 1; // length of data (rest of payload)
    8942:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
    8946:	3b01      	subs	r3, #1
    8948:	b2da      	uxtb	r2, r3
    894a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    894c:	701a      	strb	r2, [r3, #0]
	txbuf[1] = 0; // request
    894e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8950:	2200      	movs	r2, #0
    8952:	705a      	strb	r2, [r3, #1]

	// read device serial number
	command[0] = 58;
    8954:	233a      	movs	r3, #58	; 0x3a
    8956:	623b      	str	r3, [r7, #32]
	iap_entry(command, result);
    8958:	4bb3      	ldr	r3, [pc, #716]	; (8c28 <cc2400_rangetest+0x378>)
    895a:	681b      	ldr	r3, [r3, #0]
    895c:	f107 0120 	add.w	r1, r7, #32
    8960:	f107 020c 	add.w	r2, r7, #12
    8964:	4608      	mov	r0, r1
    8966:	4611      	mov	r1, r2
    8968:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    896a:	68fb      	ldr	r3, [r7, #12]
    896c:	b2db      	uxtb	r3, r3
    896e:	2b00      	cmp	r3, #0
    8970:	d001      	beq.n	8976 <cc2400_rangetest+0xc6>
    8972:	2300      	movs	r3, #0
		return;
    8974:	e1ac      	b.n	8cd0 <cc2400_rangetest+0x420>
	txbuf[2] = (result[1] >> 24) & 0xFF;
    8976:	693b      	ldr	r3, [r7, #16]
    8978:	0e1b      	lsrs	r3, r3, #24
    897a:	b2da      	uxtb	r2, r3
    897c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    897e:	709a      	strb	r2, [r3, #2]
	txbuf[3] = (result[1] >> 16) & 0xFF;
    8980:	693b      	ldr	r3, [r7, #16]
    8982:	0c1b      	lsrs	r3, r3, #16
    8984:	b2da      	uxtb	r2, r3
    8986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8988:	70da      	strb	r2, [r3, #3]
	txbuf[4] = (result[1] >> 8) & 0xFF;
    898a:	693b      	ldr	r3, [r7, #16]
    898c:	0a1b      	lsrs	r3, r3, #8
    898e:	b2da      	uxtb	r2, r3
    8990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8992:	711a      	strb	r2, [r3, #4]
	txbuf[5] = result[1] & 0xFF;
    8994:	693b      	ldr	r3, [r7, #16]
    8996:	b2da      	uxtb	r2, r3
    8998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    899a:	715a      	strb	r2, [r3, #5]
	txbuf[6] = (result[2] >> 24) & 0xFF;
    899c:	697b      	ldr	r3, [r7, #20]
    899e:	0e1b      	lsrs	r3, r3, #24
    89a0:	b2da      	uxtb	r2, r3
    89a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    89a4:	719a      	strb	r2, [r3, #6]
	txbuf[7] = (result[2] >> 16) & 0xFF;
    89a6:	697b      	ldr	r3, [r7, #20]
    89a8:	0c1b      	lsrs	r3, r3, #16
    89aa:	b2da      	uxtb	r2, r3
    89ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    89ae:	71da      	strb	r2, [r3, #7]
	txbuf[8] = (result[2] >> 8) & 0xFF;
    89b0:	697b      	ldr	r3, [r7, #20]
    89b2:	0a1b      	lsrs	r3, r3, #8
    89b4:	b2da      	uxtb	r2, r3
    89b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    89b8:	721a      	strb	r2, [r3, #8]
	txbuf[9] = result[2] & 0xFF;
    89ba:	697b      	ldr	r3, [r7, #20]
    89bc:	b2da      	uxtb	r2, r3
    89be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    89c0:	725a      	strb	r2, [r3, #9]
	txbuf[10] = (result[3] >> 24) & 0xFF;
    89c2:	69bb      	ldr	r3, [r7, #24]
    89c4:	0e1b      	lsrs	r3, r3, #24
    89c6:	b2da      	uxtb	r2, r3
    89c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    89ca:	729a      	strb	r2, [r3, #10]
	txbuf[11] = (result[3] >> 16) & 0xFF;
    89cc:	69bb      	ldr	r3, [r7, #24]
    89ce:	0c1b      	lsrs	r3, r3, #16
    89d0:	b2da      	uxtb	r2, r3
    89d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    89d4:	72da      	strb	r2, [r3, #11]
	txbuf[12] = (result[3] >> 8) & 0xFF;
    89d6:	69bb      	ldr	r3, [r7, #24]
    89d8:	0a1b      	lsrs	r3, r3, #8
    89da:	b2da      	uxtb	r2, r3
    89dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    89de:	731a      	strb	r2, [r3, #12]
	txbuf[13] = result[3] & 0xFF;
    89e0:	69bb      	ldr	r3, [r7, #24]
    89e2:	b2da      	uxtb	r2, r3
    89e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    89e6:	735a      	strb	r2, [r3, #13]
	txbuf[14] = (result[4] >> 24) & 0xFF;
    89e8:	69fb      	ldr	r3, [r7, #28]
    89ea:	0e1b      	lsrs	r3, r3, #24
    89ec:	b2da      	uxtb	r2, r3
    89ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    89f0:	739a      	strb	r2, [r3, #14]
	txbuf[15] = (result[4] >> 16) & 0xFF;
    89f2:	69fb      	ldr	r3, [r7, #28]
    89f4:	0c1b      	lsrs	r3, r3, #16
    89f6:	b2da      	uxtb	r2, r3
    89f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    89fa:	73da      	strb	r2, [r3, #15]
	txbuf[16] = (result[4] >> 8) & 0xFF;
    89fc:	69fb      	ldr	r3, [r7, #28]
    89fe:	0a1b      	lsrs	r3, r3, #8
    8a00:	b2da      	uxtb	r2, r3
    8a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8a04:	741a      	strb	r2, [r3, #16]
	txbuf[17] = result[4] & 0xFF;
    8a06:	69fb      	ldr	r3, [r7, #28]
    8a08:	b2da      	uxtb	r2, r3
    8a0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8a0c:	745a      	strb	r2, [r3, #17]

	txbuf[18] = pa; // request pa
    8a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8a10:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    8a14:	749a      	strb	r2, [r3, #18]
	txbuf[19] = 0; // request number
    8a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8a18:	2200      	movs	r2, #0
    8a1a:	74da      	strb	r2, [r3, #19]
	txbuf[20] = 0xff; // reply pa
    8a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8a1e:	22ff      	movs	r2, #255	; 0xff
    8a20:	751a      	strb	r2, [r3, #20]
	txbuf[21] = 0xff; // reply number
    8a22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8a24:	22ff      	movs	r2, #255	; 0xff
    8a26:	755a      	strb	r2, [r3, #21]

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    8a28:	2012      	movs	r0, #18
    8a2a:	f642 3122 	movw	r1, #11042	; 0x2b22
    8a2e:	f001 f8f9 	bl	9c24 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    8a32:	2014      	movs	r0, #20
    8a34:	f241 314b 	movw	r1, #4939	; 0x134b
    8a38:	f001 f8f4 	bl	9c24 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    8a3c:	2020      	movs	r0, #32
    8a3e:	f640 51f1 	movw	r1, #3569	; 0xdf1
    8a42:	f001 f8ef 	bl	9c24 <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    8a46:	687b      	ldr	r3, [r7, #4]
    8a48:	881b      	ldrh	r3, [r3, #0]
    8a4a:	b29b      	uxth	r3, r3
    8a4c:	2002      	movs	r0, #2
    8a4e:	4619      	mov	r1, r3
    8a50:	f001 f8e8 	bl	9c24 <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    8a54:	202d      	movs	r0, #45	; 0x2d
    8a56:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    8a5a:	f001 f8e3 	bl	9c24 <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    8a5e:	202c      	movs	r0, #44	; 0x2c
    8a60:	f241 5184 	movw	r1, #5508	; 0x1584
    8a64:	f001 f8de 	bl	9c24 <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    8a68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8a6c:	f043 0308 	orr.w	r3, r3, #8
    8a70:	b2db      	uxtb	r3, r3
    8a72:	b29b      	uxth	r3, r3
    8a74:	2005      	movs	r0, #5
    8a76:	4619      	mov	r1, r3
    8a78:	f001 f8d4 	bl	9c24 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    8a7c:	2003      	movs	r0, #3
    8a7e:	2129      	movs	r1, #41	; 0x29
    8a80:	f001 f8d0 	bl	9c24 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8a84:	bf00      	nop
    8a86:	f001 f985 	bl	9d94 <cc2400_status>
    8a8a:	4603      	mov	r3, r0
    8a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8a90:	2b00      	cmp	r3, #0
    8a92:	d0f8      	beq.n	8a86 <cc2400_rangetest+0x1d6>
	cc2400_strobe(SFSON);
    8a94:	2061      	movs	r0, #97	; 0x61
    8a96:	f001 f987 	bl	9da8 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8a9a:	bf00      	nop
    8a9c:	f001 f97a 	bl	9d94 <cc2400_status>
    8aa0:	4603      	mov	r3, r0
    8aa2:	f003 0304 	and.w	r3, r3, #4
    8aa6:	2b00      	cmp	r3, #0
    8aa8:	d0f8      	beq.n	8a9c <cc2400_rangetest+0x1ec>
	TXLED_SET;
    8aaa:	4b60      	ldr	r3, [pc, #384]	; (8c2c <cc2400_rangetest+0x37c>)
    8aac:	f44f 7280 	mov.w	r2, #256	; 0x100
    8ab0:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8ab2:	4b5f      	ldr	r3, [pc, #380]	; (8c30 <cc2400_rangetest+0x380>)
    8ab4:	2280      	movs	r2, #128	; 0x80
    8ab6:	601a      	str	r2, [r3, #0]
#endif
	for (pa = 0; pa < 8; pa++) {
    8ab8:	2300      	movs	r3, #0
    8aba:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    8abe:	e03e      	b.n	8b3e <cc2400_rangetest+0x28e>
		cc2400_set(FREND, 8 | pa);
    8ac0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8ac4:	f043 0308 	orr.w	r3, r3, #8
    8ac8:	b2db      	uxtb	r3, r3
    8aca:	b29b      	uxth	r3, r3
    8acc:	2005      	movs	r0, #5
    8ace:	4619      	mov	r1, r3
    8ad0:	f001 f8a8 	bl	9c24 <cc2400_set>
		txbuf[18] = pa;
    8ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8ad6:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    8ada:	749a      	strb	r2, [r3, #18]
		for (i = 0; i < 16; i++) {
    8adc:	2300      	movs	r3, #0
    8ade:	64fb      	str	r3, [r7, #76]	; 0x4c
    8ae0:	e025      	b.n	8b2e <cc2400_rangetest+0x27e>
			txbuf[19] = i;
    8ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8ae4:	b2da      	uxtb	r2, r3
    8ae6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8ae8:	74da      	strb	r2, [r3, #19]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8aea:	bf00      	nop
    8aec:	200e      	movs	r0, #14
    8aee:	f001 f883 	bl	9bf8 <cc2400_get>
    8af2:	4603      	mov	r3, r0
    8af4:	f003 031f 	and.w	r3, r3, #31
    8af8:	2b0f      	cmp	r3, #15
    8afa:	d1f7      	bne.n	8aec <cc2400_rangetest+0x23c>
			// transmit a packet
			for (j = 0; j < len; j++)
    8afc:	2300      	movs	r3, #0
    8afe:	64bb      	str	r3, [r7, #72]	; 0x48
    8b00:	e00a      	b.n	8b18 <cc2400_rangetest+0x268>
				cc2400_set8(FIFOREG, txbuf[j]);
    8b02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8b04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8b06:	4413      	add	r3, r2
    8b08:	781b      	ldrb	r3, [r3, #0]
    8b0a:	2070      	movs	r0, #112	; 0x70
    8b0c:	4619      	mov	r1, r3
    8b0e:	f001 f8b7 	bl	9c80 <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    8b12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8b14:	3301      	adds	r3, #1
    8b16:	64bb      	str	r3, [r7, #72]	; 0x48
    8b18:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    8b1c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8b1e:	429a      	cmp	r2, r3
    8b20:	dcef      	bgt.n	8b02 <cc2400_rangetest+0x252>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    8b22:	2063      	movs	r0, #99	; 0x63
    8b24:	f001 f940 	bl	9da8 <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    8b28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b2a:	3301      	adds	r3, #1
    8b2c:	64fb      	str	r3, [r7, #76]	; 0x4c
    8b2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b30:	2b0f      	cmp	r3, #15
    8b32:	ddd6      	ble.n	8ae2 <cc2400_rangetest+0x232>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    8b34:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8b38:	3301      	adds	r3, #1
    8b3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    8b3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8b42:	2b07      	cmp	r3, #7
    8b44:	d9bc      	bls.n	8ac0 <cc2400_rangetest+0x210>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8b46:	bf00      	nop
    8b48:	200e      	movs	r0, #14
    8b4a:	f001 f855 	bl	9bf8 <cc2400_get>
    8b4e:	4603      	mov	r3, r0
    8b50:	f003 031f 	and.w	r3, r3, #31
    8b54:	2b0f      	cmp	r3, #15
    8b56:	d1f7      	bne.n	8b48 <cc2400_rangetest+0x298>
	TXLED_CLR;
    8b58:	4b36      	ldr	r3, [pc, #216]	; (8c34 <cc2400_rangetest+0x384>)
    8b5a:	f44f 7280 	mov.w	r2, #256	; 0x100
    8b5e:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    8b60:	2064      	movs	r0, #100	; 0x64
    8b62:	f001 f921 	bl	9da8 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    8b66:	bf00      	nop
    8b68:	f001 f914 	bl	9d94 <cc2400_status>
    8b6c:	4603      	mov	r3, r0
    8b6e:	f003 0304 	and.w	r3, r3, #4
    8b72:	2b00      	cmp	r3, #0
    8b74:	d1f8      	bne.n	8b68 <cc2400_rangetest+0x2b8>
	cc2400_set(FSDIV, *chan_ptr - 1);
    8b76:	687b      	ldr	r3, [r7, #4]
    8b78:	881b      	ldrh	r3, [r3, #0]
    8b7a:	b29b      	uxth	r3, r3
    8b7c:	3b01      	subs	r3, #1
    8b7e:	b29b      	uxth	r3, r3
    8b80:	2002      	movs	r0, #2
    8b82:	4619      	mov	r1, r3
    8b84:	f001 f84e 	bl	9c24 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8b88:	bf00      	nop
    8b8a:	f001 f903 	bl	9d94 <cc2400_status>
    8b8e:	4603      	mov	r3, r0
    8b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8b94:	2b00      	cmp	r3, #0
    8b96:	d0f8      	beq.n	8b8a <cc2400_rangetest+0x2da>
	cc2400_strobe(SFSON);
    8b98:	2061      	movs	r0, #97	; 0x61
    8b9a:	f001 f905 	bl	9da8 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8b9e:	bf00      	nop
    8ba0:	f001 f8f8 	bl	9d94 <cc2400_status>
    8ba4:	4603      	mov	r3, r0
    8ba6:	f003 0304 	and.w	r3, r3, #4
    8baa:	2b00      	cmp	r3, #0
    8bac:	d0f8      	beq.n	8ba0 <cc2400_rangetest+0x2f0>
	RXLED_SET;
    8bae:	4b1f      	ldr	r3, [pc, #124]	; (8c2c <cc2400_rangetest+0x37c>)
    8bb0:	2210      	movs	r2, #16
    8bb2:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8bb4:	bf00      	nop
    8bb6:	200e      	movs	r0, #14
    8bb8:	f001 f81e 	bl	9bf8 <cc2400_get>
    8bbc:	4603      	mov	r3, r0
    8bbe:	f003 031f 	and.w	r3, r3, #31
    8bc2:	2b0f      	cmp	r3, #15
    8bc4:	d1f7      	bne.n	8bb6 <cc2400_rangetest+0x306>
		cc2400_strobe(SRX);
    8bc6:	2062      	movs	r0, #98	; 0x62
    8bc8:	f001 f8ee 	bl	9da8 <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    8bcc:	bf00      	nop
    8bce:	f001 f8e1 	bl	9d94 <cc2400_status>
    8bd2:	4603      	mov	r3, r0
    8bd4:	f003 0310 	and.w	r3, r3, #16
    8bd8:	2b00      	cmp	r3, #0
    8bda:	d0f8      	beq.n	8bce <cc2400_rangetest+0x31e>
		USRLED_SET;
    8bdc:	4b13      	ldr	r3, [pc, #76]	; (8c2c <cc2400_rangetest+0x37c>)
    8bde:	2202      	movs	r2, #2
    8be0:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
    8be2:	2300      	movs	r3, #0
    8be4:	64bb      	str	r3, [r7, #72]	; 0x48
    8be6:	e00c      	b.n	8c02 <cc2400_rangetest+0x352>
			rxbuf[j] = cc2400_get8(FIFOREG);
    8be8:	2070      	movs	r0, #112	; 0x70
    8bea:	f001 f82f 	bl	9c4c <cc2400_get8>
    8bee:	4603      	mov	r3, r0
    8bf0:	4619      	mov	r1, r3
    8bf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8bf6:	4413      	add	r3, r2
    8bf8:	460a      	mov	r2, r1
    8bfa:	701a      	strb	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    8bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8bfe:	3301      	adds	r3, #1
    8c00:	64bb      	str	r3, [r7, #72]	; 0x48
    8c02:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    8c06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8c08:	429a      	cmp	r2, r3
    8c0a:	dced      	bgt.n	8be8 <cc2400_rangetest+0x338>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    8c0c:	f001 f8c2 	bl	9d94 <cc2400_status>
    8c10:	4603      	mov	r3, r0
    8c12:	f003 0308 	and.w	r3, r3, #8
    8c16:	2b00      	cmp	r3, #0
    8c18:	d001      	beq.n	8c1e <cc2400_rangetest+0x36e>
			break;
    8c1a:	bf00      	nop
		USRLED_CLR;
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8c1c:	e00c      	b.n	8c38 <cc2400_rangetest+0x388>
		USRLED_SET;
		for (j = 0; j < len; j++)
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
			break;
		USRLED_CLR;
    8c1e:	4b05      	ldr	r3, [pc, #20]	; (8c34 <cc2400_rangetest+0x384>)
    8c20:	2202      	movs	r2, #2
    8c22:	601a      	str	r2, [r3, #0]
	}
    8c24:	e7c6      	b.n	8bb4 <cc2400_rangetest+0x304>
    8c26:	bf00      	nop
    8c28:	100008a8 	.word	0x100008a8
    8c2c:	2009c038 	.word	0x2009c038
    8c30:	2009c058 	.word	0x2009c058
    8c34:	2009c03c 	.word	0x2009c03c

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8c38:	200e      	movs	r0, #14
    8c3a:	f000 ffdd 	bl	9bf8 <cc2400_get>
    8c3e:	4603      	mov	r3, r0
    8c40:	f003 031f 	and.w	r3, r3, #31
    8c44:	2b0f      	cmp	r3, #15
    8c46:	d1f7      	bne.n	8c38 <cc2400_rangetest+0x388>
	cc2400_strobe(SRFOFF);
    8c48:	2064      	movs	r0, #100	; 0x64
    8c4a:	f001 f8ad 	bl	9da8 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    8c4e:	bf00      	nop
    8c50:	f001 f8a0 	bl	9d94 <cc2400_status>
    8c54:	4603      	mov	r3, r0
    8c56:	f003 0304 	and.w	r3, r3, #4
    8c5a:	2b00      	cmp	r3, #0
    8c5c:	d1f8      	bne.n	8c50 <cc2400_rangetest+0x3a0>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    8c5e:	4b20      	ldr	r3, [pc, #128]	; (8ce0 <cc2400_rangetest+0x430>)
    8c60:	2280      	movs	r2, #128	; 0x80
    8c62:	601a      	str	r2, [r3, #0]
#endif
	RXLED_CLR;
    8c64:	4b1f      	ldr	r3, [pc, #124]	; (8ce4 <cc2400_rangetest+0x434>)
    8c66:	2210      	movs	r2, #16
    8c68:	601a      	str	r2, [r3, #0]

	// get test result
	rr.valid       = 1;
    8c6a:	4b1f      	ldr	r3, [pc, #124]	; (8ce8 <cc2400_rangetest+0x438>)
    8c6c:	2201      	movs	r2, #1
    8c6e:	701a      	strb	r2, [r3, #0]
	rr.request_pa  = rxbuf[18];
    8c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8c72:	7c9a      	ldrb	r2, [r3, #18]
    8c74:	4b1c      	ldr	r3, [pc, #112]	; (8ce8 <cc2400_rangetest+0x438>)
    8c76:	705a      	strb	r2, [r3, #1]
	rr.request_num = rxbuf[19];
    8c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8c7a:	7cda      	ldrb	r2, [r3, #19]
    8c7c:	4b1a      	ldr	r3, [pc, #104]	; (8ce8 <cc2400_rangetest+0x438>)
    8c7e:	709a      	strb	r2, [r3, #2]
	rr.reply_pa    = rxbuf[20];
    8c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8c82:	7d1a      	ldrb	r2, [r3, #20]
    8c84:	4b18      	ldr	r3, [pc, #96]	; (8ce8 <cc2400_rangetest+0x438>)
    8c86:	70da      	strb	r2, [r3, #3]
	rr.reply_num   = rxbuf[21];
    8c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8c8a:	7d5a      	ldrb	r2, [r3, #21]
    8c8c:	4b16      	ldr	r3, [pc, #88]	; (8ce8 <cc2400_rangetest+0x438>)
    8c8e:	711a      	strb	r2, [r3, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    8c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8c92:	2201      	movs	r2, #1
    8c94:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 18; i++)
    8c96:	2300      	movs	r3, #0
    8c98:	64fb      	str	r3, [r7, #76]	; 0x4c
    8c9a:	e012      	b.n	8cc2 <cc2400_rangetest+0x412>
		if (rxbuf[i] != txbuf[i])
    8c9c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8ca0:	4413      	add	r3, r2
    8ca2:	781a      	ldrb	r2, [r3, #0]
    8ca4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    8ca6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8ca8:	440b      	add	r3, r1
    8caa:	781b      	ldrb	r3, [r3, #0]
    8cac:	429a      	cmp	r2, r3
    8cae:	d005      	beq.n	8cbc <cc2400_rangetest+0x40c>
			rr.valid = 2 + i;
    8cb0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8cb2:	b2db      	uxtb	r3, r3
    8cb4:	3302      	adds	r3, #2
    8cb6:	b2da      	uxtb	r2, r3
    8cb8:	4b0b      	ldr	r3, [pc, #44]	; (8ce8 <cc2400_rangetest+0x438>)
    8cba:	701a      	strb	r2, [r3, #0]
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    8cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8cbe:	3301      	adds	r3, #1
    8cc0:	64fb      	str	r3, [r7, #76]	; 0x4c
    8cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8cc4:	2b11      	cmp	r3, #17
    8cc6:	dde9      	ble.n	8c9c <cc2400_rangetest+0x3ec>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    8cc8:	4b06      	ldr	r3, [pc, #24]	; (8ce4 <cc2400_rangetest+0x434>)
    8cca:	2202      	movs	r2, #2
    8ccc:	601a      	str	r2, [r3, #0]
    8cce:	2301      	movs	r3, #1
    8cd0:	f8d7 d000 	ldr.w	sp, [r7]
    8cd4:	2b01      	cmp	r3, #1
#endif
}
    8cd6:	3754      	adds	r7, #84	; 0x54
    8cd8:	46bd      	mov	sp, r7
    8cda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8cde:	bf00      	nop
    8ce0:	2009c05c 	.word	0x2009c05c
    8ce4:	2009c03c 	.word	0x2009c03c
    8ce8:	10001070 	.word	0x10001070

00008cec <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    8cec:	b5f0      	push	{r4, r5, r6, r7, lr}
    8cee:	b089      	sub	sp, #36	; 0x24
    8cf0:	af00      	add	r7, sp, #0
    8cf2:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	int i;
	int j;
	u8 len = 22;
    8cf4:	2116      	movs	r1, #22
    8cf6:	75b9      	strb	r1, [r7, #22]
	u8 pa = 0;
    8cf8:	2100      	movs	r1, #0
    8cfa:	75f9      	strb	r1, [r7, #23]
	u8 buf[len];
    8cfc:	7dbe      	ldrb	r6, [r7, #22]
    8cfe:	4631      	mov	r1, r6
    8d00:	3901      	subs	r1, #1
    8d02:	6139      	str	r1, [r7, #16]
    8d04:	b2f0      	uxtb	r0, r6
    8d06:	f04f 0100 	mov.w	r1, #0
    8d0a:	00cd      	lsls	r5, r1, #3
    8d0c:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    8d10:	00c4      	lsls	r4, r0, #3
    8d12:	b2f0      	uxtb	r0, r6
    8d14:	f04f 0100 	mov.w	r1, #0
    8d18:	00cb      	lsls	r3, r1, #3
    8d1a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    8d1e:	00c2      	lsls	r2, r0, #3
    8d20:	4633      	mov	r3, r6
    8d22:	3307      	adds	r3, #7
    8d24:	08db      	lsrs	r3, r3, #3
    8d26:	00db      	lsls	r3, r3, #3
    8d28:	ebad 0d03 	sub.w	sp, sp, r3
    8d2c:	466b      	mov	r3, sp
    8d2e:	3300      	adds	r3, #0
    8d30:	60fb      	str	r3, [r7, #12]

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(LMTST,   0x2b22);
    8d32:	2012      	movs	r0, #18
    8d34:	f642 3122 	movw	r1, #11042	; 0x2b22
    8d38:	f000 ff74 	bl	9c24 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    8d3c:	2014      	movs	r0, #20
    8d3e:	f241 314b 	movw	r1, #4939	; 0x134b
    8d42:	f000 ff6f 	bl	9c24 <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    8d46:	687b      	ldr	r3, [r7, #4]
    8d48:	881b      	ldrh	r3, [r3, #0]
    8d4a:	b29b      	uxth	r3, r3
    8d4c:	3b01      	subs	r3, #1
    8d4e:	b29b      	uxth	r3, r3
    8d50:	2002      	movs	r0, #2
    8d52:	4619      	mov	r1, r3
    8d54:	f000 ff66 	bl	9c24 <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    8d58:	202d      	movs	r0, #45	; 0x2d
    8d5a:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    8d5e:	f000 ff61 	bl	9c24 <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    8d62:	202c      	movs	r0, #44	; 0x2c
    8d64:	f241 5184 	movw	r1, #5508	; 0x1584
    8d68:	f000 ff5c 	bl	9c24 <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    8d6c:	2005      	movs	r0, #5
    8d6e:	2108      	movs	r1, #8
    8d70:	f000 ff58 	bl	9c24 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    8d74:	2003      	movs	r0, #3
    8d76:	2129      	movs	r1, #41	; 0x29
    8d78:	f000 ff54 	bl	9c24 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8d7c:	bf00      	nop
    8d7e:	f001 f809 	bl	9d94 <cc2400_status>
    8d82:	4603      	mov	r3, r0
    8d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8d88:	2b00      	cmp	r3, #0
    8d8a:	d0f8      	beq.n	8d7e <cc2400_repeater+0x92>
		cc2400_strobe(SFSON);
    8d8c:	2061      	movs	r0, #97	; 0x61
    8d8e:	f001 f80b 	bl	9da8 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    8d92:	bf00      	nop
    8d94:	f000 fffe 	bl	9d94 <cc2400_status>
    8d98:	4603      	mov	r3, r0
    8d9a:	f003 0304 	and.w	r3, r3, #4
    8d9e:	2b00      	cmp	r3, #0
    8da0:	d0f8      	beq.n	8d94 <cc2400_repeater+0xa8>
		RXLED_SET;
    8da2:	4b6a      	ldr	r3, [pc, #424]	; (8f4c <cc2400_repeater+0x260>)
    8da4:	2210      	movs	r2, #16
    8da6:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    8da8:	4b69      	ldr	r3, [pc, #420]	; (8f50 <cc2400_repeater+0x264>)
    8daa:	f44f 7280 	mov.w	r2, #256	; 0x100
    8dae:	601a      	str	r2, [r3, #0]
		USRLED_CLR;
    8db0:	4b67      	ldr	r3, [pc, #412]	; (8f50 <cc2400_repeater+0x264>)
    8db2:	2202      	movs	r2, #2
    8db4:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    8db6:	4b67      	ldr	r3, [pc, #412]	; (8f54 <cc2400_repeater+0x268>)
    8db8:	2280      	movs	r2, #128	; 0x80
    8dba:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8dbc:	bf00      	nop
    8dbe:	200e      	movs	r0, #14
    8dc0:	f000 ff1a 	bl	9bf8 <cc2400_get>
    8dc4:	4603      	mov	r3, r0
    8dc6:	f003 031f 	and.w	r3, r3, #31
    8dca:	2b0f      	cmp	r3, #15
    8dcc:	d1f7      	bne.n	8dbe <cc2400_repeater+0xd2>
			USRLED_CLR;
    8dce:	4b60      	ldr	r3, [pc, #384]	; (8f50 <cc2400_repeater+0x264>)
    8dd0:	2202      	movs	r2, #2
    8dd2:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRX);
    8dd4:	2062      	movs	r0, #98	; 0x62
    8dd6:	f000 ffe7 	bl	9da8 <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    8dda:	bf00      	nop
    8ddc:	f000 ffda 	bl	9d94 <cc2400_status>
    8de0:	4603      	mov	r3, r0
    8de2:	f003 0310 	and.w	r3, r3, #16
    8de6:	2b00      	cmp	r3, #0
    8de8:	d0f8      	beq.n	8ddc <cc2400_repeater+0xf0>
			USRLED_SET;
    8dea:	4b58      	ldr	r3, [pc, #352]	; (8f4c <cc2400_repeater+0x260>)
    8dec:	2202      	movs	r2, #2
    8dee:	601a      	str	r2, [r3, #0]
			for (i = 0; i < len; i++)
    8df0:	2300      	movs	r3, #0
    8df2:	61fb      	str	r3, [r7, #28]
    8df4:	e00c      	b.n	8e10 <cc2400_repeater+0x124>
				buf[i] = cc2400_get8(FIFOREG);
    8df6:	2070      	movs	r0, #112	; 0x70
    8df8:	f000 ff28 	bl	9c4c <cc2400_get8>
    8dfc:	4603      	mov	r3, r0
    8dfe:	4619      	mov	r1, r3
    8e00:	68fa      	ldr	r2, [r7, #12]
    8e02:	69fb      	ldr	r3, [r7, #28]
    8e04:	4413      	add	r3, r2
    8e06:	460a      	mov	r2, r1
    8e08:	701a      	strb	r2, [r3, #0]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    8e0a:	69fb      	ldr	r3, [r7, #28]
    8e0c:	3301      	adds	r3, #1
    8e0e:	61fb      	str	r3, [r7, #28]
    8e10:	7dba      	ldrb	r2, [r7, #22]
    8e12:	69fb      	ldr	r3, [r7, #28]
    8e14:	429a      	cmp	r2, r3
    8e16:	dcee      	bgt.n	8df6 <cc2400_repeater+0x10a>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    8e18:	f000 ffbc 	bl	9d94 <cc2400_status>
    8e1c:	4603      	mov	r3, r0
    8e1e:	f003 0308 	and.w	r3, r3, #8
    8e22:	2b00      	cmp	r3, #0
    8e24:	d003      	beq.n	8e2e <cc2400_repeater+0x142>
				break;
    8e26:	bf00      	nop
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    8e28:	4b4b      	ldr	r3, [pc, #300]	; (8f58 <cc2400_repeater+0x26c>)
    8e2a:	61fb      	str	r3, [r7, #28]
    8e2c:	e000      	b.n	8e30 <cc2400_repeater+0x144>
			USRLED_SET;
			for (i = 0; i < len; i++)
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
				break;
		}
    8e2e:	e7c5      	b.n	8dbc <cc2400_repeater+0xd0>
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    8e30:	69fb      	ldr	r3, [r7, #28]
    8e32:	3b01      	subs	r3, #1
    8e34:	61fb      	str	r3, [r7, #28]
    8e36:	69fb      	ldr	r3, [r7, #28]
    8e38:	2b00      	cmp	r3, #0
    8e3a:	d1f9      	bne.n	8e30 <cc2400_repeater+0x144>
		USRLED_CLR;
    8e3c:	4b44      	ldr	r3, [pc, #272]	; (8f50 <cc2400_repeater+0x264>)
    8e3e:	2202      	movs	r2, #2
    8e40:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    8e42:	4b43      	ldr	r3, [pc, #268]	; (8f50 <cc2400_repeater+0x264>)
    8e44:	2210      	movs	r2, #16
    8e46:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    8e48:	2064      	movs	r0, #100	; 0x64
    8e4a:	f000 ffad 	bl	9da8 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8e4e:	bf00      	nop
    8e50:	f000 ffa0 	bl	9d94 <cc2400_status>
    8e54:	4603      	mov	r3, r0
    8e56:	f003 0304 	and.w	r3, r3, #4
    8e5a:	2b00      	cmp	r3, #0
    8e5c:	d1f8      	bne.n	8e50 <cc2400_repeater+0x164>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8e5e:	bf00      	nop
    8e60:	f000 ff98 	bl	9d94 <cc2400_status>
    8e64:	4603      	mov	r3, r0
    8e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8e6a:	2b00      	cmp	r3, #0
    8e6c:	d0f8      	beq.n	8e60 <cc2400_repeater+0x174>
		cc2400_set(FSDIV, *chan_ptr);
    8e6e:	687b      	ldr	r3, [r7, #4]
    8e70:	881b      	ldrh	r3, [r3, #0]
    8e72:	b29b      	uxth	r3, r3
    8e74:	2002      	movs	r0, #2
    8e76:	4619      	mov	r1, r3
    8e78:	f000 fed4 	bl	9c24 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8e7c:	bf00      	nop
    8e7e:	f000 ff89 	bl	9d94 <cc2400_status>
    8e82:	4603      	mov	r3, r0
    8e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8e88:	2b00      	cmp	r3, #0
    8e8a:	d0f8      	beq.n	8e7e <cc2400_repeater+0x192>
		cc2400_strobe(SFSON);
    8e8c:	2061      	movs	r0, #97	; 0x61
    8e8e:	f000 ff8b 	bl	9da8 <cc2400_strobe>
		TXLED_SET;
    8e92:	4b2e      	ldr	r3, [pc, #184]	; (8f4c <cc2400_repeater+0x260>)
    8e94:	f44f 7280 	mov.w	r2, #256	; 0x100
    8e98:	601a      	str	r2, [r3, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    8e9a:	7dbb      	ldrb	r3, [r7, #22]
    8e9c:	3b01      	subs	r3, #1
    8e9e:	b2da      	uxtb	r2, r3
    8ea0:	68fb      	ldr	r3, [r7, #12]
    8ea2:	701a      	strb	r2, [r3, #0]
		buf[1] = 1; // reply
    8ea4:	68fb      	ldr	r3, [r7, #12]
    8ea6:	2201      	movs	r2, #1
    8ea8:	705a      	strb	r2, [r3, #1]
		for (pa = 0; pa < 8; pa++) {
    8eaa:	2300      	movs	r3, #0
    8eac:	75fb      	strb	r3, [r7, #23]
    8eae:	e039      	b.n	8f24 <cc2400_repeater+0x238>
			cc2400_set(FREND, 8 | pa);
    8eb0:	7dfb      	ldrb	r3, [r7, #23]
    8eb2:	f043 0308 	orr.w	r3, r3, #8
    8eb6:	b2db      	uxtb	r3, r3
    8eb8:	b29b      	uxth	r3, r3
    8eba:	2005      	movs	r0, #5
    8ebc:	4619      	mov	r1, r3
    8ebe:	f000 feb1 	bl	9c24 <cc2400_set>
			buf[20] = pa;
    8ec2:	68fb      	ldr	r3, [r7, #12]
    8ec4:	7dfa      	ldrb	r2, [r7, #23]
    8ec6:	751a      	strb	r2, [r3, #20]
			for (i = 0; i < 16; i++) {
    8ec8:	2300      	movs	r3, #0
    8eca:	61fb      	str	r3, [r7, #28]
    8ecc:	e024      	b.n	8f18 <cc2400_repeater+0x22c>
				buf[21] = i;
    8ece:	69fb      	ldr	r3, [r7, #28]
    8ed0:	b2da      	uxtb	r2, r3
    8ed2:	68fb      	ldr	r3, [r7, #12]
    8ed4:	755a      	strb	r2, [r3, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8ed6:	bf00      	nop
    8ed8:	200e      	movs	r0, #14
    8eda:	f000 fe8d 	bl	9bf8 <cc2400_get>
    8ede:	4603      	mov	r3, r0
    8ee0:	f003 031f 	and.w	r3, r3, #31
    8ee4:	2b0f      	cmp	r3, #15
    8ee6:	d1f7      	bne.n	8ed8 <cc2400_repeater+0x1ec>
					for (j = 0; j < len; j++)
    8ee8:	2300      	movs	r3, #0
    8eea:	61bb      	str	r3, [r7, #24]
    8eec:	e00a      	b.n	8f04 <cc2400_repeater+0x218>
						cc2400_set8(FIFOREG, buf[j]);
    8eee:	68fa      	ldr	r2, [r7, #12]
    8ef0:	69bb      	ldr	r3, [r7, #24]
    8ef2:	4413      	add	r3, r2
    8ef4:	781b      	ldrb	r3, [r3, #0]
    8ef6:	2070      	movs	r0, #112	; 0x70
    8ef8:	4619      	mov	r1, r3
    8efa:	f000 fec1 	bl	9c80 <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
					for (j = 0; j < len; j++)
    8efe:	69bb      	ldr	r3, [r7, #24]
    8f00:	3301      	adds	r3, #1
    8f02:	61bb      	str	r3, [r7, #24]
    8f04:	7dba      	ldrb	r2, [r7, #22]
    8f06:	69bb      	ldr	r3, [r7, #24]
    8f08:	429a      	cmp	r2, r3
    8f0a:	dcf0      	bgt.n	8eee <cc2400_repeater+0x202>
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    8f0c:	2063      	movs	r0, #99	; 0x63
    8f0e:	f000 ff4b 	bl	9da8 <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    8f12:	69fb      	ldr	r3, [r7, #28]
    8f14:	3301      	adds	r3, #1
    8f16:	61fb      	str	r3, [r7, #28]
    8f18:	69fb      	ldr	r3, [r7, #28]
    8f1a:	2b0f      	cmp	r3, #15
    8f1c:	ddd7      	ble.n	8ece <cc2400_repeater+0x1e2>
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    8f1e:	7dfb      	ldrb	r3, [r7, #23]
    8f20:	3301      	adds	r3, #1
    8f22:	75fb      	strb	r3, [r7, #23]
    8f24:	7dfb      	ldrb	r3, [r7, #23]
    8f26:	2b07      	cmp	r3, #7
    8f28:	d9c2      	bls.n	8eb0 <cc2400_repeater+0x1c4>
					for (j = 0; j < len; j++)
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    8f2a:	4b09      	ldr	r3, [pc, #36]	; (8f50 <cc2400_repeater+0x264>)
    8f2c:	f44f 7280 	mov.w	r2, #256	; 0x100
    8f30:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    8f32:	2064      	movs	r0, #100	; 0x64
    8f34:	f000 ff38 	bl	9da8 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8f38:	bf00      	nop
    8f3a:	f000 ff2b 	bl	9d94 <cc2400_status>
    8f3e:	4603      	mov	r3, r0
    8f40:	f003 0304 	and.w	r3, r3, #4
    8f44:	2b00      	cmp	r3, #0
    8f46:	d1f8      	bne.n	8f3a <cc2400_repeater+0x24e>
	}
    8f48:	e6f3      	b.n	8d32 <cc2400_repeater+0x46>
    8f4a:	bf00      	nop
    8f4c:	2009c038 	.word	0x2009c038
    8f50:	2009c03c 	.word	0x2009c03c
    8f54:	2009c058 	.word	0x2009c058
    8f58:	001e8480 	.word	0x001e8480

00008f5c <cc2400_txtest>:
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    8f5c:	b580      	push	{r7, lr}
    8f5e:	b084      	sub	sp, #16
    8f60:	af00      	add	r7, sp, #0
    8f62:	6078      	str	r0, [r7, #4]
    8f64:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    8f66:	687b      	ldr	r3, [r7, #4]
    8f68:	781b      	ldrb	r3, [r3, #0]
    8f6a:	b2db      	uxtb	r3, r3
    8f6c:	2b00      	cmp	r3, #0
    8f6e:	d102      	bne.n	8f76 <cc2400_txtest+0x1a>
		mdmctrl = 0x0040; // 160 kHz frequency deviation
    8f70:	2340      	movs	r3, #64	; 0x40
    8f72:	81fb      	strh	r3, [r7, #14]
    8f74:	e008      	b.n	8f88 <cc2400_txtest+0x2c>
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    8f76:	687b      	ldr	r3, [r7, #4]
    8f78:	781b      	ldrb	r3, [r3, #0]
    8f7a:	b2db      	uxtb	r3, r3
    8f7c:	2b01      	cmp	r3, #1
    8f7e:	d102      	bne.n	8f86 <cc2400_txtest+0x2a>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    8f80:	2340      	movs	r3, #64	; 0x40
    8f82:	81fb      	strh	r3, [r7, #14]
    8f84:	e000      	b.n	8f88 <cc2400_txtest+0x2c>
	} else {
		/* oops */
		return;
    8f86:	e035      	b.n	8ff4 <cc2400_txtest+0x98>
	}
	cc2400_set(LMTST,   0x2b22);
    8f88:	2012      	movs	r0, #18
    8f8a:	f642 3122 	movw	r1, #11042	; 0x2b22
    8f8e:	f000 fe49 	bl	9c24 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    8f92:	2014      	movs	r0, #20
    8f94:	f243 314b 	movw	r1, #13131	; 0x334b
    8f98:	f000 fe44 	bl	9c24 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    8f9c:	2020      	movs	r0, #32
    8f9e:	f640 51f1 	movw	r1, #3569	; 0xdf1
    8fa2:	f000 fe3f 	bl	9c24 <cc2400_set>
	cc2400_set(FSDIV,   2435);
    8fa6:	2002      	movs	r0, #2
    8fa8:	f640 1183 	movw	r1, #2435	; 0x983
    8fac:	f000 fe3a 	bl	9c24 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl); 
    8fb0:	89fb      	ldrh	r3, [r7, #14]
    8fb2:	2003      	movs	r0, #3
    8fb4:	4619      	mov	r1, r3
    8fb6:	f000 fe35 	bl	9c24 <cc2400_set>
	
//	cc2400_set(FREND, 8 | 0);
	
	while (!(cc2400_status() & XOSC16M_STABLE));
    8fba:	bf00      	nop
    8fbc:	f000 feea 	bl	9d94 <cc2400_status>
    8fc0:	4603      	mov	r3, r0
    8fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8fc6:	2b00      	cmp	r3, #0
    8fc8:	d0f8      	beq.n	8fbc <cc2400_txtest+0x60>
	cc2400_strobe(SFSON);
    8fca:	2061      	movs	r0, #97	; 0x61
    8fcc:	f000 feec 	bl	9da8 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8fd0:	bf00      	nop
    8fd2:	f000 fedf 	bl	9d94 <cc2400_status>
    8fd6:	4603      	mov	r3, r0
    8fd8:	f003 0304 	and.w	r3, r3, #4
    8fdc:	2b00      	cmp	r3, #0
    8fde:	d0f8      	beq.n	8fd2 <cc2400_txtest+0x76>
	TXLED_SET;
    8fe0:	4b06      	ldr	r3, [pc, #24]	; (8ffc <cc2400_txtest+0xa0>)
    8fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
    8fe6:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    8fe8:	2063      	movs	r0, #99	; 0x63
    8fea:	f000 fedd 	bl	9da8 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8fee:	4b04      	ldr	r3, [pc, #16]	; (9000 <cc2400_txtest+0xa4>)
    8ff0:	2280      	movs	r2, #128	; 0x80
    8ff2:	601a      	str	r2, [r3, #0]
#endif
#endif
}
    8ff4:	3710      	adds	r7, #16
    8ff6:	46bd      	mov	sp, r7
    8ff8:	bd80      	pop	{r7, pc}
    8ffa:	bf00      	nop
    8ffc:	2009c038 	.word	0x2009c038
    9000:	2009c058 	.word	0x2009c058

00009004 <ssp_start>:
typedef struct _ego_packet_t {
	u8 rxbuf[EGO_PACKET_LEN];
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
    9004:	b480      	push	{r7}
    9006:	af00      	add	r7, sp, #0
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    9008:	4b08      	ldr	r3, [pc, #32]	; (902c <ssp_start+0x28>)
    900a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    900e:	601a      	str	r2, [r3, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    9010:	4a07      	ldr	r2, [pc, #28]	; (9030 <ssp_start+0x2c>)
    9012:	4b07      	ldr	r3, [pc, #28]	; (9030 <ssp_start+0x2c>)
    9014:	681b      	ldr	r3, [r3, #0]
    9016:	f043 0302 	orr.w	r3, r3, #2
    901a:	6013      	str	r3, [r2, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    901c:	4b05      	ldr	r3, [pc, #20]	; (9034 <ssp_start+0x30>)
    901e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9022:	601a      	str	r2, [r3, #0]
}
    9024:	46bd      	mov	sp, r7
    9026:	f85d 7b04 	ldr.w	r7, [sp], #4
    902a:	4770      	bx	lr
    902c:	2009c098 	.word	0x2009c098
    9030:	40030004 	.word	0x40030004
    9034:	2009c09c 	.word	0x2009c09c

00009038 <ssp_stop>:

static void ssp_stop() {
    9038:	b480      	push	{r7}
    903a:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    903c:	4b06      	ldr	r3, [pc, #24]	; (9058 <ssp_stop+0x20>)
    903e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9042:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    9044:	4a05      	ldr	r2, [pc, #20]	; (905c <ssp_stop+0x24>)
    9046:	4b05      	ldr	r3, [pc, #20]	; (905c <ssp_stop+0x24>)
    9048:	681b      	ldr	r3, [r3, #0]
    904a:	f023 0302 	bic.w	r3, r3, #2
    904e:	6013      	str	r3, [r2, #0]
}
    9050:	46bd      	mov	sp, r7
    9052:	f85d 7b04 	ldr.w	r7, [sp], #4
    9056:	4770      	bx	lr
    9058:	2009c098 	.word	0x2009c098
    905c:	40030004 	.word	0x40030004

00009060 <ego_init>:

static void ego_init(void) {
    9060:	b580      	push	{r7, lr}
    9062:	af00      	add	r7, sp, #0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    9064:	4b03      	ldr	r3, [pc, #12]	; (9074 <ego_init+0x14>)
    9066:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    906a:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    906c:	f000 fd08 	bl	9a80 <dio_ssp_init>
}
    9070:	bd80      	pop	{r7, pc}
    9072:	bf00      	nop
    9074:	e000e100 	.word	0xe000e100

00009078 <ego_deinit>:

static void ego_deinit(void) {
    9078:	b580      	push	{r7, lr}
    907a:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    907c:	2064      	movs	r0, #100	; 0x64
    907e:	f000 fe93 	bl	9da8 <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    9082:	f7ff ffd9 	bl	9038 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    9086:	4b02      	ldr	r3, [pc, #8]	; (9090 <ego_deinit+0x18>)
    9088:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    908c:	601a      	str	r2, [r3, #0]
}
    908e:	bd80      	pop	{r7, pc}
    9090:	e000e180 	.word	0xe000e180

00009094 <rf_on>:

static void rf_on(void) {
    9094:	b580      	push	{r7, lr}
    9096:	af00      	add	r7, sp, #0
	cc2400_set(MANAND,  0x7fff);
    9098:	200d      	movs	r0, #13
    909a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    909e:	f000 fdc1 	bl	9c24 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    90a2:	2012      	movs	r0, #18
    90a4:	f642 3122 	movw	r1, #11042	; 0x2b22
    90a8:	f000 fdbc 	bl	9c24 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    90ac:	2014      	movs	r0, #20
    90ae:	f241 314b 	movw	r1, #4939	; 0x134b
    90b2:	f000 fdb7 	bl	9c24 <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    90b6:	2020      	movs	r0, #32
    90b8:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    90bc:	f000 fdb2 	bl	9c24 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    90c0:	4b1e      	ldr	r3, [pc, #120]	; (913c <rf_on+0xa8>)
    90c2:	881b      	ldrh	r3, [r3, #0]
    90c4:	b29b      	uxth	r3, r3
    90c6:	3b01      	subs	r3, #1
    90c8:	b29b      	uxth	r3, r3
    90ca:	2002      	movs	r0, #2
    90cc:	4619      	mov	r1, r3
    90ce:	f000 fda9 	bl	9c24 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    90d2:	2003      	movs	r0, #3
    90d4:	2126      	movs	r1, #38	; 0x26
    90d6:	f000 fda5 	bl	9c24 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    90da:	2021      	movs	r0, #33	; 0x21
    90dc:	2103      	movs	r1, #3
    90de:	f000 fda1 	bl	9c24 <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    90e2:	202d      	movs	r0, #45	; 0x2d
    90e4:	f246 310f 	movw	r1, #25359	; 0x630f
    90e8:	f000 fd9c 	bl	9c24 <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    90ec:	202c      	movs	r0, #44	; 0x2c
    90ee:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    90f2:	f000 fd97 	bl	9c24 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    90f6:	bf00      	nop
    90f8:	f000 fe4c 	bl	9d94 <cc2400_status>
    90fc:	4603      	mov	r3, r0
    90fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9102:	2b00      	cmp	r3, #0
    9104:	d0f8      	beq.n	90f8 <rf_on+0x64>

	ssp_start();
    9106:	f7ff ff7d 	bl	9004 <ssp_start>

	cc2400_strobe(SFSON);
    910a:	2061      	movs	r0, #97	; 0x61
    910c:	f000 fe4c 	bl	9da8 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    9110:	bf00      	nop
    9112:	f000 fe3f 	bl	9d94 <cc2400_status>
    9116:	4603      	mov	r3, r0
    9118:	f003 0304 	and.w	r3, r3, #4
    911c:	2b00      	cmp	r3, #0
    911e:	d0f8      	beq.n	9112 <rf_on+0x7e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9120:	bf00      	nop
    9122:	200e      	movs	r0, #14
    9124:	f000 fd68 	bl	9bf8 <cc2400_get>
    9128:	4603      	mov	r3, r0
    912a:	f003 031f 	and.w	r3, r3, #31
    912e:	2b0f      	cmp	r3, #15
    9130:	d1f7      	bne.n	9122 <rf_on+0x8e>

	cc2400_strobe(SRX);
    9132:	2062      	movs	r0, #98	; 0x62
    9134:	f000 fe38 	bl	9da8 <cc2400_strobe>
}
    9138:	bd80      	pop	{r7, pc}
    913a:	bf00      	nop
    913c:	1000049c 	.word	0x1000049c

00009140 <do_rx>:

void do_rx(ego_packet_t *packet) {
    9140:	b480      	push	{r7}
    9142:	b085      	sub	sp, #20
    9144:	af00      	add	r7, sp, #0
    9146:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    9148:	2300      	movs	r3, #0
    914a:	60fb      	str	r3, [r7, #12]
    914c:	e011      	b.n	9172 <do_rx+0x32>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    914e:	bf00      	nop
    9150:	4b0c      	ldr	r3, [pc, #48]	; (9184 <do_rx+0x44>)
    9152:	681b      	ldr	r3, [r3, #0]
    9154:	f003 0304 	and.w	r3, r3, #4
    9158:	2b00      	cmp	r3, #0
    915a:	d0f9      	beq.n	9150 <do_rx+0x10>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    915c:	4b0a      	ldr	r3, [pc, #40]	; (9188 <do_rx+0x48>)
    915e:	681b      	ldr	r3, [r3, #0]
    9160:	b2d9      	uxtb	r1, r3
    9162:	687a      	ldr	r2, [r7, #4]
    9164:	68fb      	ldr	r3, [r7, #12]
    9166:	4413      	add	r3, r2
    9168:	460a      	mov	r2, r1
    916a:	701a      	strb	r2, [r3, #0]
	cc2400_strobe(SRX);
}

void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    916c:	68fb      	ldr	r3, [r7, #12]
    916e:	3301      	adds	r3, #1
    9170:	60fb      	str	r3, [r7, #12]
    9172:	68fb      	ldr	r3, [r7, #12]
    9174:	2b23      	cmp	r3, #35	; 0x23
    9176:	ddea      	ble.n	914e <do_rx+0xe>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    9178:	3714      	adds	r7, #20
    917a:	46bd      	mov	sp, r7
    917c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9180:	4770      	bx	lr
    9182:	bf00      	nop
    9184:	4003000c 	.word	0x4003000c
    9188:	40030008 	.word	0x40030008

0000918c <sync_received>:

static inline int sync_received(void) {
    918c:	b580      	push	{r7, lr}
    918e:	af00      	add	r7, sp, #0
	return cc2400_status() & SYNC_RECEIVED;
    9190:	f000 fe00 	bl	9d94 <cc2400_status>
    9194:	4603      	mov	r3, r0
    9196:	f003 0310 	and.w	r3, r3, #16
}
    919a:	4618      	mov	r0, r3
    919c:	bd80      	pop	{r7, pc}
    919e:	bf00      	nop

000091a0 <sleep_ms>:

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    91a0:	b480      	push	{r7}
    91a2:	b083      	sub	sp, #12
    91a4:	af00      	add	r7, sp, #0
    91a6:	6078      	str	r0, [r7, #4]
    91a8:	6039      	str	r1, [r7, #0]
	state->sleep_start = CLK100NS;
    91aa:	4b0c      	ldr	r3, [pc, #48]	; (91dc <sleep_ms+0x3c>)
    91ac:	681b      	ldr	r3, [r3, #0]
    91ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
    91b2:	f640 4235 	movw	r2, #3125	; 0xc35
    91b6:	fb02 f203 	mul.w	r2, r2, r3
    91ba:	4b09      	ldr	r3, [pc, #36]	; (91e0 <sleep_ms+0x40>)
    91bc:	681b      	ldr	r3, [r3, #0]
    91be:	441a      	add	r2, r3
    91c0:	687b      	ldr	r3, [r7, #4]
    91c2:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    91c4:	683b      	ldr	r3, [r7, #0]
    91c6:	f242 7210 	movw	r2, #10000	; 0x2710
    91ca:	fb02 f203 	mul.w	r2, r2, r3
    91ce:	687b      	ldr	r3, [r7, #4]
    91d0:	60da      	str	r2, [r3, #12]
}
    91d2:	370c      	adds	r7, #12
    91d4:	46bd      	mov	sp, r7
    91d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    91da:	4770      	bx	lr
    91dc:	10000be4 	.word	0x10000be4
    91e0:	40004008 	.word	0x40004008

000091e4 <sleep_ms_anchor>:

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
    91e4:	b480      	push	{r7}
    91e6:	b083      	sub	sp, #12
    91e8:	af00      	add	r7, sp, #0
    91ea:	6078      	str	r0, [r7, #4]
    91ec:	6039      	str	r1, [r7, #0]
	state->sleep_start = state->anchor;
    91ee:	687b      	ldr	r3, [r7, #4]
    91f0:	699a      	ldr	r2, [r3, #24]
    91f2:	687b      	ldr	r3, [r7, #4]
    91f4:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    91f6:	683b      	ldr	r3, [r7, #0]
    91f8:	f242 7210 	movw	r2, #10000	; 0x2710
    91fc:	fb02 f203 	mul.w	r2, r2, r3
    9200:	687b      	ldr	r3, [r7, #4]
    9202:	60da      	str	r2, [r3, #12]
}
    9204:	370c      	adds	r7, #12
    9206:	46bd      	mov	sp, r7
    9208:	f85d 7b04 	ldr.w	r7, [sp], #4
    920c:	4770      	bx	lr
    920e:	bf00      	nop

00009210 <sleep_elapsed>:

static inline int sleep_elapsed(ego_fsm_state_t *state) {
    9210:	b480      	push	{r7}
    9212:	b085      	sub	sp, #20
    9214:	af00      	add	r7, sp, #0
    9216:	6078      	str	r0, [r7, #4]
	u32 now = CLK100NS;
    9218:	4b13      	ldr	r3, [pc, #76]	; (9268 <sleep_elapsed+0x58>)
    921a:	681b      	ldr	r3, [r3, #0]
    921c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9220:	f640 4235 	movw	r2, #3125	; 0xc35
    9224:	fb02 f203 	mul.w	r2, r2, r3
    9228:	4b10      	ldr	r3, [pc, #64]	; (926c <sleep_elapsed+0x5c>)
    922a:	681b      	ldr	r3, [r3, #0]
    922c:	4413      	add	r3, r2
    922e:	60fb      	str	r3, [r7, #12]
	if (now < state->sleep_start)
    9230:	687b      	ldr	r3, [r7, #4]
    9232:	689a      	ldr	r2, [r3, #8]
    9234:	68fb      	ldr	r3, [r7, #12]
    9236:	429a      	cmp	r2, r3
    9238:	d905      	bls.n	9246 <sleep_elapsed+0x36>
		now += 3276800000;
    923a:	68fb      	ldr	r3, [r7, #12]
    923c:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    9240:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    9244:	60fb      	str	r3, [r7, #12]
	return (now - state->sleep_start) >= state->sleep_duration;
    9246:	687b      	ldr	r3, [r7, #4]
    9248:	689b      	ldr	r3, [r3, #8]
    924a:	68fa      	ldr	r2, [r7, #12]
    924c:	1ad2      	subs	r2, r2, r3
    924e:	687b      	ldr	r3, [r7, #4]
    9250:	68db      	ldr	r3, [r3, #12]
    9252:	429a      	cmp	r2, r3
    9254:	bf2c      	ite	cs
    9256:	2301      	movcs	r3, #1
    9258:	2300      	movcc	r3, #0
    925a:	b2db      	uxtb	r3, r3
}
    925c:	4618      	mov	r0, r3
    925e:	3714      	adds	r7, #20
    9260:	46bd      	mov	sp, r7
    9262:	f85d 7b04 	ldr.w	r7, [sp], #4
    9266:	4770      	bx	lr
    9268:	10000be4 	.word	0x10000be4
    926c:	40004008 	.word	0x40004008

00009270 <nop_state>:

/////////////
// states

// do nothing
void nop_state(ego_fsm_state_t *state) {
    9270:	b480      	push	{r7}
    9272:	b083      	sub	sp, #12
    9274:	af00      	add	r7, sp, #0
    9276:	6078      	str	r0, [r7, #4]
}
    9278:	370c      	adds	r7, #12
    927a:	46bd      	mov	sp, r7
    927c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9280:	4770      	bx	lr
    9282:	bf00      	nop

00009284 <init_state>:

// used in follow and jam mode, override the channel supplied by user
void init_state(ego_fsm_state_t *state) {
    9284:	b480      	push	{r7}
    9286:	b083      	sub	sp, #12
    9288:	af00      	add	r7, sp, #0
    928a:	6078      	str	r0, [r7, #4]
	state->channel_index = 0;
    928c:	687b      	ldr	r3, [r7, #4]
    928e:	2200      	movs	r2, #0
    9290:	605a      	str	r2, [r3, #4]
	channel = channels[state->channel_index];
    9292:	687b      	ldr	r3, [r7, #4]
    9294:	685b      	ldr	r3, [r3, #4]
    9296:	4a06      	ldr	r2, [pc, #24]	; (92b0 <init_state+0x2c>)
    9298:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    929c:	4b05      	ldr	r3, [pc, #20]	; (92b4 <init_state+0x30>)
    929e:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    92a0:	687b      	ldr	r3, [r7, #4]
    92a2:	2201      	movs	r2, #1
    92a4:	701a      	strb	r2, [r3, #0]
}
    92a6:	370c      	adds	r7, #12
    92a8:	46bd      	mov	sp, r7
    92aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    92ae:	4770      	bx	lr
    92b0:	100008b0 	.word	0x100008b0
    92b4:	1000049c 	.word	0x1000049c

000092b8 <start_rf_state>:

void start_rf_state(ego_fsm_state_t *state) {
    92b8:	b580      	push	{r7, lr}
    92ba:	b082      	sub	sp, #8
    92bc:	af00      	add	r7, sp, #0
    92be:	6078      	str	r0, [r7, #4]
	rf_on();
    92c0:	f7ff fee8 	bl	9094 <rf_on>
	state->state = EGO_ST_CAP;
    92c4:	687b      	ldr	r3, [r7, #4]
    92c6:	2202      	movs	r2, #2
    92c8:	701a      	strb	r2, [r3, #0]
}
    92ca:	3708      	adds	r7, #8
    92cc:	46bd      	mov	sp, r7
    92ce:	bd80      	pop	{r7, pc}

000092d0 <cap_state>:

void cap_state(ego_fsm_state_t *state) {
    92d0:	b580      	push	{r7, lr}
    92d2:	b08c      	sub	sp, #48	; 0x30
    92d4:	af00      	add	r7, sp, #0
    92d6:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    92d8:	f107 0308 	add.w	r3, r7, #8
    92dc:	2200      	movs	r2, #0
    92de:	601a      	str	r2, [r3, #0]
    92e0:	3304      	adds	r3, #4
    92e2:	2200      	movs	r2, #0
    92e4:	601a      	str	r2, [r3, #0]
    92e6:	3304      	adds	r3, #4
    92e8:	2200      	movs	r2, #0
    92ea:	601a      	str	r2, [r3, #0]
    92ec:	3304      	adds	r3, #4
    92ee:	2200      	movs	r2, #0
    92f0:	601a      	str	r2, [r3, #0]
    92f2:	3304      	adds	r3, #4
    92f4:	2200      	movs	r2, #0
    92f6:	601a      	str	r2, [r3, #0]
    92f8:	3304      	adds	r3, #4
    92fa:	2200      	movs	r2, #0
    92fc:	601a      	str	r2, [r3, #0]
    92fe:	3304      	adds	r3, #4
    9300:	2200      	movs	r2, #0
    9302:	601a      	str	r2, [r3, #0]
    9304:	3304      	adds	r3, #4
    9306:	2200      	movs	r2, #0
    9308:	601a      	str	r2, [r3, #0]
    930a:	3304      	adds	r3, #4
    930c:	2200      	movs	r2, #0
    930e:	601a      	str	r2, [r3, #0]
    9310:	3304      	adds	r3, #4
    9312:	2200      	movs	r2, #0
    9314:	601a      	str	r2, [r3, #0]
    9316:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    9318:	4b23      	ldr	r3, [pc, #140]	; (93a8 <cap_state+0xd8>)
    931a:	681b      	ldr	r3, [r3, #0]
    931c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9320:	f640 4235 	movw	r2, #3125	; 0xc35
    9324:	fb02 f203 	mul.w	r2, r2, r3
    9328:	4b20      	ldr	r3, [pc, #128]	; (93ac <cap_state+0xdc>)
    932a:	681b      	ldr	r3, [r3, #0]
    932c:	4413      	add	r3, r2
	rf_on();
	state->state = EGO_ST_CAP;
}

void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    932e:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    9330:	6878      	ldr	r0, [r7, #4]
    9332:	f7ff ff6d 	bl	9210 <sleep_elapsed>
    9336:	4603      	mov	r3, r0
    9338:	2b00      	cmp	r3, #0
    933a:	d006      	beq.n	934a <cap_state+0x7a>
		sleep_ms(state, 4);
    933c:	6878      	ldr	r0, [r7, #4]
    933e:	2104      	movs	r1, #4
    9340:	f7ff ff2e 	bl	91a0 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    9344:	687b      	ldr	r3, [r7, #4]
    9346:	2203      	movs	r2, #3
    9348:	701a      	strb	r2, [r3, #0]
	}

	if (sync_received()) {
    934a:	f7ff ff1f 	bl	918c <sync_received>
    934e:	4603      	mov	r3, r0
    9350:	2b00      	cmp	r3, #0
    9352:	d019      	beq.n	9388 <cap_state+0xb8>
		RXLED_SET;
    9354:	4b16      	ldr	r3, [pc, #88]	; (93b0 <cap_state+0xe0>)
    9356:	2210      	movs	r2, #16
    9358:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    935a:	f107 0308 	add.w	r3, r7, #8
    935e:	4618      	mov	r0, r3
    9360:	f7ff feee 	bl	9140 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    9364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9366:	f107 0208 	add.w	r2, r7, #8
    936a:	2006      	movs	r0, #6
    936c:	4611      	mov	r1, r2
    936e:	461a      	mov	r2, r3
    9370:	f7fb f982 	bl	4678 <enqueue_with_ts>
		RXLED_CLR;
    9374:	4b0f      	ldr	r3, [pc, #60]	; (93b4 <cap_state+0xe4>)
    9376:	2210      	movs	r2, #16
    9378:	601a      	str	r2, [r3, #0]

		sleep_ms(state, 6);
    937a:	6878      	ldr	r0, [r7, #4]
    937c:	2106      	movs	r1, #6
    937e:	f7ff ff0f 	bl	91a0 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    9382:	687b      	ldr	r3, [r7, #4]
    9384:	2203      	movs	r2, #3
    9386:	701a      	strb	r2, [r3, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    9388:	687b      	ldr	r3, [r7, #4]
    938a:	781b      	ldrb	r3, [r3, #0]
    938c:	2b02      	cmp	r3, #2
    938e:	d007      	beq.n	93a0 <cap_state+0xd0>
		cc2400_strobe(SRFOFF);
    9390:	2064      	movs	r0, #100	; 0x64
    9392:	f000 fd09 	bl	9da8 <cc2400_strobe>
		ssp_stop();
    9396:	f7ff fe4f 	bl	9038 <ssp_stop>
		state->timer_active = 1;
    939a:	687b      	ldr	r3, [r7, #4]
    939c:	2201      	movs	r2, #1
    939e:	611a      	str	r2, [r3, #16]
	}
}
    93a0:	3730      	adds	r7, #48	; 0x30
    93a2:	46bd      	mov	sp, r7
    93a4:	bd80      	pop	{r7, pc}
    93a6:	bf00      	nop
    93a8:	10000be4 	.word	0x10000be4
    93ac:	40004008 	.word	0x40004008
    93b0:	2009c038 	.word	0x2009c038
    93b4:	2009c03c 	.word	0x2009c03c

000093b8 <sleep_state>:

void sleep_state(ego_fsm_state_t *state) {
    93b8:	b580      	push	{r7, lr}
    93ba:	b082      	sub	sp, #8
    93bc:	af00      	add	r7, sp, #0
    93be:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    93c0:	6878      	ldr	r0, [r7, #4]
    93c2:	f7ff ff25 	bl	9210 <sleep_elapsed>
    93c6:	4603      	mov	r3, r0
    93c8:	2b00      	cmp	r3, #0
    93ca:	d01e      	beq.n	940a <sleep_state+0x52>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    93cc:	687b      	ldr	r3, [r7, #4]
    93ce:	685b      	ldr	r3, [r3, #4]
    93d0:	1c5a      	adds	r2, r3, #1
    93d2:	4b0f      	ldr	r3, [pc, #60]	; (9410 <sleep_state+0x58>)
    93d4:	4013      	ands	r3, r2
    93d6:	2b00      	cmp	r3, #0
    93d8:	da03      	bge.n	93e2 <sleep_state+0x2a>
    93da:	3b01      	subs	r3, #1
    93dc:	f063 0303 	orn	r3, r3, #3
    93e0:	3301      	adds	r3, #1
    93e2:	461a      	mov	r2, r3
    93e4:	687b      	ldr	r3, [r7, #4]
    93e6:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    93e8:	687b      	ldr	r3, [r7, #4]
    93ea:	685b      	ldr	r3, [r3, #4]
    93ec:	4a09      	ldr	r2, [pc, #36]	; (9414 <sleep_state+0x5c>)
    93ee:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    93f2:	4b09      	ldr	r3, [pc, #36]	; (9418 <sleep_state+0x60>)
    93f4:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    93f6:	6878      	ldr	r0, [r7, #4]
    93f8:	2107      	movs	r1, #7
    93fa:	f7ff fed1 	bl	91a0 <sleep_ms>
		state->timer_active = 1;
    93fe:	687b      	ldr	r3, [r7, #4]
    9400:	2201      	movs	r2, #1
    9402:	611a      	str	r2, [r3, #16]

		state->state = EGO_ST_START_RX;
    9404:	687b      	ldr	r3, [r7, #4]
    9406:	2201      	movs	r2, #1
    9408:	701a      	strb	r2, [r3, #0]
	}
}
    940a:	3708      	adds	r7, #8
    940c:	46bd      	mov	sp, r7
    940e:	bd80      	pop	{r7, pc}
    9410:	80000003 	.word	0x80000003
    9414:	100008b0 	.word	0x100008b0
    9418:	1000049c 	.word	0x1000049c

0000941c <continuous_init_state>:

// continuous cap states (reuses START_RX state)
void continuous_init_state(ego_fsm_state_t *state) {
    941c:	b480      	push	{r7}
    941e:	b083      	sub	sp, #12
    9420:	af00      	add	r7, sp, #0
    9422:	6078      	str	r0, [r7, #4]
	state->state = EGO_ST_START_RX;
    9424:	687b      	ldr	r3, [r7, #4]
    9426:	2201      	movs	r2, #1
    9428:	701a      	strb	r2, [r3, #0]
}
    942a:	370c      	adds	r7, #12
    942c:	46bd      	mov	sp, r7
    942e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9432:	4770      	bx	lr

00009434 <continuous_cap_state>:

void continuous_cap_state(ego_fsm_state_t *state) {
    9434:	b580      	push	{r7, lr}
    9436:	b08c      	sub	sp, #48	; 0x30
    9438:	af00      	add	r7, sp, #0
    943a:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    943c:	f107 0308 	add.w	r3, r7, #8
    9440:	2200      	movs	r2, #0
    9442:	601a      	str	r2, [r3, #0]
    9444:	3304      	adds	r3, #4
    9446:	2200      	movs	r2, #0
    9448:	601a      	str	r2, [r3, #0]
    944a:	3304      	adds	r3, #4
    944c:	2200      	movs	r2, #0
    944e:	601a      	str	r2, [r3, #0]
    9450:	3304      	adds	r3, #4
    9452:	2200      	movs	r2, #0
    9454:	601a      	str	r2, [r3, #0]
    9456:	3304      	adds	r3, #4
    9458:	2200      	movs	r2, #0
    945a:	601a      	str	r2, [r3, #0]
    945c:	3304      	adds	r3, #4
    945e:	2200      	movs	r2, #0
    9460:	601a      	str	r2, [r3, #0]
    9462:	3304      	adds	r3, #4
    9464:	2200      	movs	r2, #0
    9466:	601a      	str	r2, [r3, #0]
    9468:	3304      	adds	r3, #4
    946a:	2200      	movs	r2, #0
    946c:	601a      	str	r2, [r3, #0]
    946e:	3304      	adds	r3, #4
    9470:	2200      	movs	r2, #0
    9472:	601a      	str	r2, [r3, #0]
    9474:	3304      	adds	r3, #4
    9476:	2200      	movs	r2, #0
    9478:	601a      	str	r2, [r3, #0]
    947a:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    947c:	4b1e      	ldr	r3, [pc, #120]	; (94f8 <continuous_cap_state+0xc4>)
    947e:	681b      	ldr	r3, [r3, #0]
    9480:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9484:	f640 4235 	movw	r2, #3125	; 0xc35
    9488:	fb02 f203 	mul.w	r2, r2, r3
    948c:	4b1b      	ldr	r3, [pc, #108]	; (94fc <continuous_cap_state+0xc8>)
    948e:	681b      	ldr	r3, [r3, #0]
    9490:	4413      	add	r3, r2
void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    9492:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    9494:	f7ff fe7a 	bl	918c <sync_received>
    9498:	4603      	mov	r3, r0
    949a:	2b00      	cmp	r3, #0
    949c:	d029      	beq.n	94f2 <continuous_cap_state+0xbe>
		RXLED_SET;
    949e:	4b18      	ldr	r3, [pc, #96]	; (9500 <continuous_cap_state+0xcc>)
    94a0:	2210      	movs	r2, #16
    94a2:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    94a4:	f107 0308 	add.w	r3, r7, #8
    94a8:	4618      	mov	r0, r3
    94aa:	f7ff fe49 	bl	9140 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    94ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    94b0:	f107 0208 	add.w	r2, r7, #8
    94b4:	2006      	movs	r0, #6
    94b6:	4611      	mov	r1, r2
    94b8:	461a      	mov	r2, r3
    94ba:	f7fb f8dd 	bl	4678 <enqueue_with_ts>
		RXLED_CLR;
    94be:	4b11      	ldr	r3, [pc, #68]	; (9504 <continuous_cap_state+0xd0>)
    94c0:	2210      	movs	r2, #16
    94c2:	601a      	str	r2, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    94c4:	2061      	movs	r0, #97	; 0x61
    94c6:	f000 fc6f 	bl	9da8 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    94ca:	bf00      	nop
    94cc:	f000 fc62 	bl	9d94 <cc2400_status>
    94d0:	4603      	mov	r3, r0
    94d2:	f003 0304 	and.w	r3, r3, #4
    94d6:	2b00      	cmp	r3, #0
    94d8:	d0f8      	beq.n	94cc <continuous_cap_state+0x98>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    94da:	bf00      	nop
    94dc:	200e      	movs	r0, #14
    94de:	f000 fb8b 	bl	9bf8 <cc2400_get>
    94e2:	4603      	mov	r3, r0
    94e4:	f003 031f 	and.w	r3, r3, #31
    94e8:	2b0f      	cmp	r3, #15
    94ea:	d1f7      	bne.n	94dc <continuous_cap_state+0xa8>
		cc2400_strobe(SRX);
    94ec:	2062      	movs	r0, #98	; 0x62
    94ee:	f000 fc5b 	bl	9da8 <cc2400_strobe>
	}
}
    94f2:	3730      	adds	r7, #48	; 0x30
    94f4:	46bd      	mov	sp, r7
    94f6:	bd80      	pop	{r7, pc}
    94f8:	10000be4 	.word	0x10000be4
    94fc:	40004008 	.word	0x40004008
    9500:	2009c038 	.word	0x2009c038
    9504:	2009c03c 	.word	0x2009c03c

00009508 <jam_cap_state>:

// jammer states
void jam_cap_state(ego_fsm_state_t *state) {
    9508:	b580      	push	{r7, lr}
    950a:	b082      	sub	sp, #8
    950c:	af00      	add	r7, sp, #0
    950e:	6078      	str	r0, [r7, #4]
	if (sync_received()) {
    9510:	f7ff fe3c 	bl	918c <sync_received>
    9514:	4603      	mov	r3, r0
    9516:	2b00      	cmp	r3, #0
    9518:	d012      	beq.n	9540 <jam_cap_state+0x38>
		state->state = EGO_ST_START_JAMMING;
    951a:	687b      	ldr	r3, [r7, #4]
    951c:	2204      	movs	r2, #4
    951e:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 1;
    9520:	687b      	ldr	r3, [r7, #4]
    9522:	2201      	movs	r2, #1
    9524:	615a      	str	r2, [r3, #20]
		state->anchor = CLK100NS;
    9526:	4b16      	ldr	r3, [pc, #88]	; (9580 <jam_cap_state+0x78>)
    9528:	681b      	ldr	r3, [r3, #0]
    952a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    952e:	f640 4235 	movw	r2, #3125	; 0xc35
    9532:	fb02 f203 	mul.w	r2, r2, r3
    9536:	4b13      	ldr	r3, [pc, #76]	; (9584 <jam_cap_state+0x7c>)
    9538:	681b      	ldr	r3, [r3, #0]
    953a:	441a      	add	r2, r3
    953c:	687b      	ldr	r3, [r7, #4]
    953e:	619a      	str	r2, [r3, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    9540:	687b      	ldr	r3, [r7, #4]
    9542:	691b      	ldr	r3, [r3, #16]
    9544:	2b00      	cmp	r3, #0
    9546:	d00f      	beq.n	9568 <jam_cap_state+0x60>
    9548:	6878      	ldr	r0, [r7, #4]
    954a:	f7ff fe61 	bl	9210 <sleep_elapsed>
    954e:	4603      	mov	r3, r0
    9550:	2b00      	cmp	r3, #0
    9552:	d009      	beq.n	9568 <jam_cap_state+0x60>
		state->state = EGO_ST_START_JAMMING;
    9554:	687b      	ldr	r3, [r7, #4]
    9556:	2204      	movs	r2, #4
    9558:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 0;
    955a:	687b      	ldr	r3, [r7, #4]
    955c:	2200      	movs	r2, #0
    955e:	615a      	str	r2, [r3, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    9560:	6878      	ldr	r0, [r7, #4]
    9562:	210b      	movs	r1, #11
    9564:	f7ff fe1c 	bl	91a0 <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    9568:	687b      	ldr	r3, [r7, #4]
    956a:	781b      	ldrb	r3, [r3, #0]
    956c:	2b02      	cmp	r3, #2
    956e:	d004      	beq.n	957a <jam_cap_state+0x72>
		cc2400_strobe(SRFOFF);
    9570:	2064      	movs	r0, #100	; 0x64
    9572:	f000 fc19 	bl	9da8 <cc2400_strobe>
		ssp_stop();
    9576:	f7ff fd5f 	bl	9038 <ssp_stop>
	}
}
    957a:	3708      	adds	r7, #8
    957c:	46bd      	mov	sp, r7
    957e:	bd80      	pop	{r7, pc}
    9580:	10000be4 	.word	0x10000be4
    9584:	40004008 	.word	0x40004008

00009588 <start_jamming_state>:

void start_jamming_state(ego_fsm_state_t *state) {
    9588:	b580      	push	{r7, lr}
    958a:	b082      	sub	sp, #8
    958c:	af00      	add	r7, sp, #0
    958e:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    9590:	200d      	movs	r0, #13
    9592:	f647 71ff 	movw	r1, #32767	; 0x7fff
    9596:	f000 fb45 	bl	9c24 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    959a:	2012      	movs	r0, #18
    959c:	f642 3122 	movw	r1, #11042	; 0x2b22
    95a0:	f000 fb40 	bl	9c24 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    95a4:	2014      	movs	r0, #20
    95a6:	f243 314b 	movw	r1, #13131	; 0x334b
    95aa:	f000 fb3b 	bl	9c24 <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    95ae:	2020      	movs	r0, #32
    95b0:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    95b4:	f000 fb36 	bl	9c24 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    95b8:	4b21      	ldr	r3, [pc, #132]	; (9640 <start_jamming_state+0xb8>)
    95ba:	881b      	ldrh	r3, [r3, #0]
    95bc:	b29b      	uxth	r3, r3
    95be:	2002      	movs	r0, #2
    95c0:	4619      	mov	r1, r3
    95c2:	f000 fb2f 	bl	9c24 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    95c6:	2003      	movs	r0, #3
    95c8:	2126      	movs	r1, #38	; 0x26
    95ca:	f000 fb2b 	bl	9c24 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    95ce:	2021      	movs	r0, #33	; 0x21
    95d0:	2103      	movs	r1, #3
    95d2:	f000 fb27 	bl	9c24 <cc2400_set>
	cc2400_set(FREND, 0xf);
    95d6:	2005      	movs	r0, #5
    95d8:	210f      	movs	r1, #15
    95da:	f000 fb23 	bl	9c24 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    95de:	bf00      	nop
    95e0:	f000 fbd8 	bl	9d94 <cc2400_status>
    95e4:	4603      	mov	r3, r0
    95e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    95ea:	2b00      	cmp	r3, #0
    95ec:	d0f8      	beq.n	95e0 <start_jamming_state+0x58>

	cc2400_strobe(SFSON);
    95ee:	2061      	movs	r0, #97	; 0x61
    95f0:	f000 fbda 	bl	9da8 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    95f4:	bf00      	nop
    95f6:	f000 fbcd 	bl	9d94 <cc2400_status>
    95fa:	4603      	mov	r3, r0
    95fc:	f003 0304 	and.w	r3, r3, #4
    9600:	2b00      	cmp	r3, #0
    9602:	d0f8      	beq.n	95f6 <start_jamming_state+0x6e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9604:	bf00      	nop
    9606:	200e      	movs	r0, #14
    9608:	f000 faf6 	bl	9bf8 <cc2400_get>
    960c:	4603      	mov	r3, r0
    960e:	f003 031f 	and.w	r3, r3, #31
    9612:	2b0f      	cmp	r3, #15
    9614:	d1f7      	bne.n	9606 <start_jamming_state+0x7e>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    9616:	4b0b      	ldr	r3, [pc, #44]	; (9644 <start_jamming_state+0xbc>)
    9618:	2280      	movs	r2, #128	; 0x80
    961a:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    961c:	2063      	movs	r0, #99	; 0x63
    961e:	f000 fbc3 	bl	9da8 <cc2400_strobe>
	TXLED_SET;
    9622:	4b09      	ldr	r3, [pc, #36]	; (9648 <start_jamming_state+0xc0>)
    9624:	f44f 7280 	mov.w	r2, #256	; 0x100
    9628:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    962a:	687b      	ldr	r3, [r7, #4]
    962c:	2205      	movs	r2, #5
    962e:	701a      	strb	r2, [r3, #0]
	sleep_ms_anchor(state, 2);
    9630:	6878      	ldr	r0, [r7, #4]
    9632:	2102      	movs	r1, #2
    9634:	f7ff fdd6 	bl	91e4 <sleep_ms_anchor>
}
    9638:	3708      	adds	r7, #8
    963a:	46bd      	mov	sp, r7
    963c:	bd80      	pop	{r7, pc}
    963e:	bf00      	nop
    9640:	1000049c 	.word	0x1000049c
    9644:	2009c058 	.word	0x2009c058
    9648:	2009c038 	.word	0x2009c038

0000964c <jamming_state>:

void jamming_state(ego_fsm_state_t *state) {
    964c:	b580      	push	{r7, lr}
    964e:	b082      	sub	sp, #8
    9650:	af00      	add	r7, sp, #0
    9652:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    9654:	6878      	ldr	r0, [r7, #4]
    9656:	f7ff fddb 	bl	9210 <sleep_elapsed>
    965a:	4603      	mov	r3, r0
    965c:	2b00      	cmp	r3, #0
    965e:	d025      	beq.n	96ac <jamming_state+0x60>
		cc2400_strobe(SRFOFF);
    9660:	2064      	movs	r0, #100	; 0x64
    9662:	f000 fba1 	bl	9da8 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    9666:	4b13      	ldr	r3, [pc, #76]	; (96b4 <jamming_state+0x68>)
    9668:	2280      	movs	r2, #128	; 0x80
    966a:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    966c:	4b12      	ldr	r3, [pc, #72]	; (96b8 <jamming_state+0x6c>)
    966e:	f44f 7280 	mov.w	r2, #256	; 0x100
    9672:	601a      	str	r2, [r3, #0]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    9674:	687b      	ldr	r3, [r7, #4]
    9676:	685b      	ldr	r3, [r3, #4]
    9678:	1c5a      	adds	r2, r3, #1
    967a:	4b10      	ldr	r3, [pc, #64]	; (96bc <jamming_state+0x70>)
    967c:	4013      	ands	r3, r2
    967e:	2b00      	cmp	r3, #0
    9680:	da03      	bge.n	968a <jamming_state+0x3e>
    9682:	3b01      	subs	r3, #1
    9684:	f063 0303 	orn	r3, r3, #3
    9688:	3301      	adds	r3, #1
    968a:	461a      	mov	r2, r3
    968c:	687b      	ldr	r3, [r7, #4]
    968e:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    9690:	687b      	ldr	r3, [r7, #4]
    9692:	685b      	ldr	r3, [r3, #4]
    9694:	4a0a      	ldr	r2, [pc, #40]	; (96c0 <jamming_state+0x74>)
    9696:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    969a:	4b0a      	ldr	r3, [pc, #40]	; (96c4 <jamming_state+0x78>)
    969c:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    969e:	687b      	ldr	r3, [r7, #4]
    96a0:	2203      	movs	r2, #3
    96a2:	701a      	strb	r2, [r3, #0]
		sleep_ms_anchor(state, 6);
    96a4:	6878      	ldr	r0, [r7, #4]
    96a6:	2106      	movs	r1, #6
    96a8:	f7ff fd9c 	bl	91e4 <sleep_ms_anchor>
	}
}
    96ac:	3708      	adds	r7, #8
    96ae:	46bd      	mov	sp, r7
    96b0:	bd80      	pop	{r7, pc}
    96b2:	bf00      	nop
    96b4:	2009c05c 	.word	0x2009c05c
    96b8:	2009c03c 	.word	0x2009c03c
    96bc:	80000003 	.word	0x80000003
    96c0:	100008b0 	.word	0x100008b0
    96c4:	1000049c 	.word	0x1000049c

000096c8 <jam_sleep_state>:

void jam_sleep_state(ego_fsm_state_t *state) {
    96c8:	b580      	push	{r7, lr}
    96ca:	b082      	sub	sp, #8
    96cc:	af00      	add	r7, sp, #0
    96ce:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    96d0:	6878      	ldr	r0, [r7, #4]
    96d2:	f7ff fd9d 	bl	9210 <sleep_elapsed>
    96d6:	4603      	mov	r3, r0
    96d8:	2b00      	cmp	r3, #0
    96da:	d009      	beq.n	96f0 <jam_sleep_state+0x28>
		state->state = EGO_ST_START_RX;
    96dc:	687b      	ldr	r3, [r7, #4]
    96de:	2201      	movs	r2, #1
    96e0:	701a      	strb	r2, [r3, #0]
		state->timer_active = 1;
    96e2:	687b      	ldr	r3, [r7, #4]
    96e4:	2201      	movs	r2, #1
    96e6:	611a      	str	r2, [r3, #16]
		sleep_ms_anchor(state, 11);
    96e8:	6878      	ldr	r0, [r7, #4]
    96ea:	210b      	movs	r1, #11
    96ec:	f7ff fd7a 	bl	91e4 <sleep_ms_anchor>
	}
}
    96f0:	3708      	adds	r7, #8
    96f2:	46bd      	mov	sp, r7
    96f4:	bd80      	pop	{r7, pc}
    96f6:	bf00      	nop

000096f8 <ego_main>:

void ego_main(ego_mode_t mode) {
    96f8:	b5b0      	push	{r4, r5, r7, lr}
    96fa:	b09e      	sub	sp, #120	; 0x78
    96fc:	af00      	add	r7, sp, #0
    96fe:	4603      	mov	r3, r0
    9700:	71fb      	strb	r3, [r7, #7]
	ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    9702:	f107 0358 	add.w	r3, r7, #88	; 0x58
    9706:	2200      	movs	r2, #0
    9708:	601a      	str	r2, [r3, #0]
    970a:	3304      	adds	r3, #4
    970c:	2200      	movs	r2, #0
    970e:	601a      	str	r2, [r3, #0]
    9710:	3304      	adds	r3, #4
    9712:	2200      	movs	r2, #0
    9714:	601a      	str	r2, [r3, #0]
    9716:	3304      	adds	r3, #4
    9718:	2200      	movs	r2, #0
    971a:	601a      	str	r2, [r3, #0]
    971c:	3304      	adds	r3, #4
    971e:	2200      	movs	r2, #0
    9720:	601a      	str	r2, [r3, #0]
    9722:	3304      	adds	r3, #4
    9724:	2200      	movs	r2, #0
    9726:	601a      	str	r2, [r3, #0]
    9728:	3304      	adds	r3, #4
    972a:	2200      	movs	r2, #0
    972c:	601a      	str	r2, [r3, #0]
    972e:	3304      	adds	r3, #4
		.channel_index = 0,
		.timer_active = 0,
	};

	// hopping connection following
	ego_st_handler follow_handler[] = {
    9730:	4b26      	ldr	r3, [pc, #152]	; (97cc <ego_main+0xd4>)
    9732:	f107 043c 	add.w	r4, r7, #60	; 0x3c
    9736:	461d      	mov	r5, r3
    9738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    973a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    973c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    9740:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		nop_state,
		nop_state,
	};

	// continuous rx on a single channel
	ego_st_handler continuous_rx_handler[] = {
    9744:	4b22      	ldr	r3, [pc, #136]	; (97d0 <ego_main+0xd8>)
    9746:	f107 0424 	add.w	r4, r7, #36	; 0x24
    974a:	461d      	mov	r5, r3
    974c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    974e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9750:	e895 0003 	ldmia.w	r5, {r0, r1}
    9754:	e884 0003 	stmia.w	r4, {r0, r1}
		nop_state,
		nop_state,
	};

	// jamming
	ego_st_handler jam_handler[] = {
    9758:	4b1e      	ldr	r3, [pc, #120]	; (97d4 <ego_main+0xdc>)
    975a:	f107 040c 	add.w	r4, r7, #12
    975e:	461d      	mov	r5, r3
    9760:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9762:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9764:	e895 0003 	ldmia.w	r5, {r0, r1}
    9768:	e884 0003 	stmia.w	r4, {r0, r1}
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    976c:	79fb      	ldrb	r3, [r7, #7]
    976e:	2b01      	cmp	r3, #1
    9770:	d007      	beq.n	9782 <ego_main+0x8a>
    9772:	2b02      	cmp	r3, #2
    9774:	d009      	beq.n	978a <ego_main+0x92>
    9776:	2b00      	cmp	r3, #0
    9778:	d10b      	bne.n	9792 <ego_main+0x9a>
		case EGO_FOLLOW:
			handler = follow_handler;
    977a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    977e:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9780:	e00b      	b.n	979a <ego_main+0xa2>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    9782:	f107 0324 	add.w	r3, r7, #36	; 0x24
    9786:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9788:	e007      	b.n	979a <ego_main+0xa2>
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    978a:	f107 030c 	add.w	r3, r7, #12
    978e:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9790:	e003      	b.n	979a <ego_main+0xa2>
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    9792:	4b11      	ldr	r3, [pc, #68]	; (97d8 <ego_main+0xe0>)
    9794:	2200      	movs	r2, #0
    9796:	701a      	strb	r2, [r3, #0]
    9798:	e015      	b.n	97c6 <ego_main+0xce>
			return;
	}

	ego_init();
    979a:	f7ff fc61 	bl	9060 <ego_init>

	while (1) {
		if (requested_mode != MODE_EGO)
    979e:	4b0e      	ldr	r3, [pc, #56]	; (97d8 <ego_main+0xe0>)
    97a0:	781b      	ldrb	r3, [r3, #0]
    97a2:	b2db      	uxtb	r3, r3
    97a4:	2b0d      	cmp	r3, #13
    97a6:	d003      	beq.n	97b0 <ego_main+0xb8>
			break;
    97a8:	bf00      	nop
		handler[state.state](&state);
	}

	ego_deinit();
    97aa:	f7ff fc65 	bl	9078 <ego_deinit>
    97ae:	e00a      	b.n	97c6 <ego_main+0xce>
	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
			break;
		handler[state.state](&state);
    97b0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    97b4:	009b      	lsls	r3, r3, #2
    97b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    97b8:	4413      	add	r3, r2
    97ba:	681b      	ldr	r3, [r3, #0]
    97bc:	f107 0258 	add.w	r2, r7, #88	; 0x58
    97c0:	4610      	mov	r0, r2
    97c2:	4798      	blx	r3
	}
    97c4:	e7eb      	b.n	979e <ego_main+0xa6>

	ego_deinit();
}
    97c6:	3778      	adds	r7, #120	; 0x78
    97c8:	46bd      	mov	sp, r7
    97ca:	bdb0      	pop	{r4, r5, r7, pc}
    97cc:	0000c358 	.word	0x0000c358
    97d0:	0000c374 	.word	0x0000c374
    97d4:	0000c38c 	.word	0x0000c38c
    97d8:	10000a3f 	.word	0x10000a3f

000097dc <USB_IRQHandler>:
	
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
    97dc:	b580      	push	{r7, lr}
    97de:	af00      	add	r7, sp, #0
	USBHwISR();
    97e0:	f000 ffb6 	bl	a750 <USBHwISR>
}
    97e4:	bd80      	pop	{r7, pc}
    97e6:	bf00      	nop

000097e8 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    97e8:	b580      	push	{r7, lr}
    97ea:	b082      	sub	sp, #8
    97ec:	af00      	add	r7, sp, #0
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
    97ee:	4b12      	ldr	r3, [pc, #72]	; (9838 <Reset_Handler+0x50>)
    97f0:	607b      	str	r3, [r7, #4]
	for(dest = &_data; dest < &_edata; )
    97f2:	4b12      	ldr	r3, [pc, #72]	; (983c <Reset_Handler+0x54>)
    97f4:	603b      	str	r3, [r7, #0]
    97f6:	e007      	b.n	9808 <Reset_Handler+0x20>
	{
		*dest++ = *src++;
    97f8:	683b      	ldr	r3, [r7, #0]
    97fa:	1d1a      	adds	r2, r3, #4
    97fc:	603a      	str	r2, [r7, #0]
    97fe:	687a      	ldr	r2, [r7, #4]
    9800:	1d11      	adds	r1, r2, #4
    9802:	6079      	str	r1, [r7, #4]
    9804:	6812      	ldr	r2, [r2, #0]
    9806:	601a      	str	r2, [r3, #0]
{
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    9808:	683b      	ldr	r3, [r7, #0]
    980a:	4a0d      	ldr	r2, [pc, #52]	; (9840 <Reset_Handler+0x58>)
    980c:	4293      	cmp	r3, r2
    980e:	d3f3      	bcc.n	97f8 <Reset_Handler+0x10>
	{
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
    9810:	4b0c      	ldr	r3, [pc, #48]	; (9844 <Reset_Handler+0x5c>)
    9812:	607b      	str	r3, [r7, #4]
	while (src < &_ebss)
    9814:	e004      	b.n	9820 <Reset_Handler+0x38>
	{
		*src++ = 0;
    9816:	687b      	ldr	r3, [r7, #4]
    9818:	1d1a      	adds	r2, r3, #4
    981a:	607a      	str	r2, [r7, #4]
    981c:	2200      	movs	r2, #0
    981e:	601a      	str	r2, [r3, #0]
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    9820:	687b      	ldr	r3, [r7, #4]
    9822:	4a09      	ldr	r2, [pc, #36]	; (9848 <Reset_Handler+0x60>)
    9824:	4293      	cmp	r3, r2
    9826:	d3f6      	bcc.n	9816 <Reset_Handler+0x2e>
	{
		*src++ = 0;
	}

    __libc_init_array();
    9828:	f7fa fc7e 	bl	4128 <__libc_init_array>
    
    // Set the vector table location.
    SCB_VTOR = &_interrupt_vector_table;
    982c:	4b07      	ldr	r3, [pc, #28]	; (984c <Reset_Handler+0x64>)
    982e:	4a08      	ldr	r2, [pc, #32]	; (9850 <Reset_Handler+0x68>)
    9830:	601a      	str	r2, [r3, #0]
    
	main();
    9832:	f7fe fba5 	bl	7f80 <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    9836:	e7fe      	b.n	9836 <Reset_Handler+0x4e>
    9838:	0000c3f0 	.word	0x0000c3f0
    983c:	10000020 	.word	0x10000020
    9840:	1000095e 	.word	0x1000095e
    9844:	10000960 	.word	0x10000960
    9848:	10003278 	.word	0x10003278
    984c:	e000ed08 	.word	0xe000ed08
    9850:	00004000 	.word	0x00004000

00009854 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    9854:	b480      	push	{r7}
    9856:	af00      	add	r7, sp, #0
    9858:	e7fe      	b.n	9858 <ADC_IRQHandler+0x4>
    985a:	bf00      	nop

0000985c <wait>:
 */

#include "ubertooth.h"
/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
    985c:	b580      	push	{r7, lr}
    985e:	b082      	sub	sp, #8
    9860:	af00      	add	r7, sp, #0
    9862:	4603      	mov	r3, r0
    9864:	71fb      	strb	r3, [r7, #7]
	wait_us(seconds * 1000000);
    9866:	79fb      	ldrb	r3, [r7, #7]
    9868:	4a04      	ldr	r2, [pc, #16]	; (987c <wait+0x20>)
    986a:	fb02 f303 	mul.w	r3, r2, r3
    986e:	4618      	mov	r0, r3
    9870:	f000 f818 	bl	98a4 <wait_us>
}
    9874:	3708      	adds	r7, #8
    9876:	46bd      	mov	sp, r7
    9878:	bd80      	pop	{r7, pc}
    987a:	bf00      	nop
    987c:	000f4240 	.word	0x000f4240

00009880 <rbit>:
{
	wait_us(ms * 1000);
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
    9880:	b480      	push	{r7}
    9882:	b085      	sub	sp, #20
    9884:	af00      	add	r7, sp, #0
    9886:	6078      	str	r0, [r7, #4]
  u32 result = 0;
    9888:	2300      	movs	r3, #0
    988a:	60fb      	str	r3, [r7, #12]
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    988c:	687b      	ldr	r3, [r7, #4]
    988e:	fa93 f3a3 	rbit	r3, r3
    9892:	60fb      	str	r3, [r7, #12]
  return result;
    9894:	68fb      	ldr	r3, [r7, #12]
}
    9896:	4618      	mov	r0, r3
    9898:	3714      	adds	r7, #20
    989a:	46bd      	mov	sp, r7
    989c:	f85d 7b04 	ldr.w	r7, [sp], #4
    98a0:	4770      	bx	lr
    98a2:	bf00      	nop

000098a4 <wait_us>:

/* delay a number of microseconds while on internal oscillator (4 MHz) */
/* we only have a resolution of 1000/400, so to the nearest 2.5        */
static volatile u32 wait_us_counter;
void wait_us(u32 us)
{
    98a4:	b480      	push	{r7}
    98a6:	b083      	sub	sp, #12
    98a8:	af00      	add	r7, sp, #0
    98aa:	6078      	str	r0, [r7, #4]
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    98ac:	687b      	ldr	r3, [r7, #4]
    98ae:	089a      	lsrs	r2, r3, #2
    98b0:	687b      	ldr	r3, [r7, #4]
    98b2:	08db      	lsrs	r3, r3, #3
    98b4:	441a      	add	r2, r3
    98b6:	687b      	ldr	r3, [r7, #4]
    98b8:	099b      	lsrs	r3, r3, #6
    98ba:	441a      	add	r2, r3
    98bc:	687b      	ldr	r3, [r7, #4]
    98be:	09db      	lsrs	r3, r3, #7
    98c0:	441a      	add	r2, r3
    98c2:	687b      	ldr	r3, [r7, #4]
    98c4:	0a9b      	lsrs	r3, r3, #10
    98c6:	441a      	add	r2, r3
    98c8:	687b      	ldr	r3, [r7, #4]
    98ca:	0adb      	lsrs	r3, r3, #11
    98cc:	4413      	add	r3, r2
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    98ce:	4a07      	ldr	r2, [pc, #28]	; (98ec <wait_us+0x48>)
    98d0:	6013      	str	r3, [r2, #0]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    98d2:	bf00      	nop
    98d4:	4b05      	ldr	r3, [pc, #20]	; (98ec <wait_us+0x48>)
    98d6:	681b      	ldr	r3, [r3, #0]
    98d8:	3b01      	subs	r3, #1
    98da:	4a04      	ldr	r2, [pc, #16]	; (98ec <wait_us+0x48>)
    98dc:	6013      	str	r3, [r2, #0]
    98de:	2b00      	cmp	r3, #0
    98e0:	d1f8      	bne.n	98d4 <wait_us+0x30>
}
    98e2:	370c      	adds	r7, #12
    98e4:	46bd      	mov	sp, r7
    98e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    98ea:	4770      	bx	lr
    98ec:	10000a68 	.word	0x10000a68

000098f0 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    98f0:	b580      	push	{r7, lr}
    98f2:	af00      	add	r7, sp, #0
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    98f4:	f000 f836 	bl	9964 <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    98f8:	4b10      	ldr	r3, [pc, #64]	; (993c <gpio_init+0x4c>)
    98fa:	2200      	movs	r2, #0
    98fc:	601a      	str	r2, [r3, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    98fe:	4b10      	ldr	r3, [pc, #64]	; (9940 <gpio_init+0x50>)
    9900:	f24c 7212 	movw	r2, #50962	; 0xc712
    9904:	601a      	str	r2, [r3, #0]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    9906:	4b0f      	ldr	r3, [pc, #60]	; (9944 <gpio_init+0x54>)
    9908:	f240 12b1 	movw	r2, #433	; 0x1b1
    990c:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    990e:	4b0e      	ldr	r3, [pc, #56]	; (9948 <gpio_init+0x58>)
    9910:	2200      	movs	r2, #0
    9912:	601a      	str	r2, [r3, #0]
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    9914:	4b0d      	ldr	r3, [pc, #52]	; (994c <gpio_init+0x5c>)
    9916:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    991a:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    991c:	4b0c      	ldr	r3, [pc, #48]	; (9950 <gpio_init+0x60>)
    991e:	2200      	movs	r2, #0
    9920:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    9922:	4b0c      	ldr	r3, [pc, #48]	; (9954 <gpio_init+0x64>)
    9924:	2200      	movs	r2, #0
    9926:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    9928:	4b0b      	ldr	r3, [pc, #44]	; (9958 <gpio_init+0x68>)
    992a:	2200      	movs	r2, #0
    992c:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    992e:	4b0b      	ldr	r3, [pc, #44]	; (995c <gpio_init+0x6c>)
    9930:	2200      	movs	r2, #0
    9932:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    9934:	4b0a      	ldr	r3, [pc, #40]	; (9960 <gpio_init+0x70>)
    9936:	2200      	movs	r2, #0
    9938:	601a      	str	r2, [r3, #0]

#ifdef TC13BADGE
	/* R8C_CTL is active low */
	R8C_CTL_SET;
#endif
}
    993a:	bd80      	pop	{r7, pc}
    993c:	2009c000 	.word	0x2009c000
    9940:	2009c020 	.word	0x2009c020
    9944:	2009c040 	.word	0x2009c040
    9948:	2009c060 	.word	0x2009c060
    994c:	2009c080 	.word	0x2009c080
    9950:	2009c014 	.word	0x2009c014
    9954:	2009c034 	.word	0x2009c034
    9958:	2009c054 	.word	0x2009c054
    995c:	2009c074 	.word	0x2009c074
    9960:	2009c094 	.word	0x2009c094

00009964 <all_pins_off>:

void all_pins_off(void)
{
    9964:	b480      	push	{r7}
    9966:	af00      	add	r7, sp, #0
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    9968:	4b27      	ldr	r3, [pc, #156]	; (9a08 <all_pins_off+0xa4>)
    996a:	2200      	movs	r2, #0
    996c:	601a      	str	r2, [r3, #0]
	PINSEL1 = 0;
    996e:	4b27      	ldr	r3, [pc, #156]	; (9a0c <all_pins_off+0xa8>)
    9970:	2200      	movs	r2, #0
    9972:	601a      	str	r2, [r3, #0]
	PINSEL2 = 0;
    9974:	4b26      	ldr	r3, [pc, #152]	; (9a10 <all_pins_off+0xac>)
    9976:	2200      	movs	r2, #0
    9978:	601a      	str	r2, [r3, #0]
	PINSEL3 = 0;
    997a:	4b26      	ldr	r3, [pc, #152]	; (9a14 <all_pins_off+0xb0>)
    997c:	2200      	movs	r2, #0
    997e:	601a      	str	r2, [r3, #0]
	PINSEL4 = 0;
    9980:	4b25      	ldr	r3, [pc, #148]	; (9a18 <all_pins_off+0xb4>)
    9982:	2200      	movs	r2, #0
    9984:	601a      	str	r2, [r3, #0]
	PINSEL7 = 0;
    9986:	4b25      	ldr	r3, [pc, #148]	; (9a1c <all_pins_off+0xb8>)
    9988:	2200      	movs	r2, #0
    998a:	601a      	str	r2, [r3, #0]
	PINSEL9 = 0;
    998c:	4b24      	ldr	r3, [pc, #144]	; (9a20 <all_pins_off+0xbc>)
    998e:	2200      	movs	r2, #0
    9990:	601a      	str	r2, [r3, #0]
	PINSEL10 = 0;
    9992:	4b24      	ldr	r3, [pc, #144]	; (9a24 <all_pins_off+0xc0>)
    9994:	2200      	movs	r2, #0
    9996:	601a      	str	r2, [r3, #0]

	/* configure all pins as inputs */
	FIO0DIR = 0;
    9998:	4b23      	ldr	r3, [pc, #140]	; (9a28 <all_pins_off+0xc4>)
    999a:	2200      	movs	r2, #0
    999c:	601a      	str	r2, [r3, #0]
	FIO1DIR = 0;
    999e:	4b23      	ldr	r3, [pc, #140]	; (9a2c <all_pins_off+0xc8>)
    99a0:	2200      	movs	r2, #0
    99a2:	601a      	str	r2, [r3, #0]
	FIO2DIR = 0;
    99a4:	4b22      	ldr	r3, [pc, #136]	; (9a30 <all_pins_off+0xcc>)
    99a6:	2200      	movs	r2, #0
    99a8:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    99aa:	4b22      	ldr	r3, [pc, #136]	; (9a34 <all_pins_off+0xd0>)
    99ac:	2200      	movs	r2, #0
    99ae:	601a      	str	r2, [r3, #0]
	FIO4DIR = 0;
    99b0:	4b21      	ldr	r3, [pc, #132]	; (9a38 <all_pins_off+0xd4>)
    99b2:	2200      	movs	r2, #0
    99b4:	601a      	str	r2, [r3, #0]

	/* pull-up on every pin */
	PINMODE0 = 0;
    99b6:	4b21      	ldr	r3, [pc, #132]	; (9a3c <all_pins_off+0xd8>)
    99b8:	2200      	movs	r2, #0
    99ba:	601a      	str	r2, [r3, #0]
	PINMODE1 = 0;
    99bc:	4b20      	ldr	r3, [pc, #128]	; (9a40 <all_pins_off+0xdc>)
    99be:	2200      	movs	r2, #0
    99c0:	601a      	str	r2, [r3, #0]
	PINMODE2 = 0;
    99c2:	4b20      	ldr	r3, [pc, #128]	; (9a44 <all_pins_off+0xe0>)
    99c4:	2200      	movs	r2, #0
    99c6:	601a      	str	r2, [r3, #0]
	PINMODE3 = 0;
    99c8:	4b1f      	ldr	r3, [pc, #124]	; (9a48 <all_pins_off+0xe4>)
    99ca:	2200      	movs	r2, #0
    99cc:	601a      	str	r2, [r3, #0]
	PINMODE4 = 0;
    99ce:	4b1f      	ldr	r3, [pc, #124]	; (9a4c <all_pins_off+0xe8>)
    99d0:	2200      	movs	r2, #0
    99d2:	601a      	str	r2, [r3, #0]
	PINMODE7 = 0;
    99d4:	4b1e      	ldr	r3, [pc, #120]	; (9a50 <all_pins_off+0xec>)
    99d6:	2200      	movs	r2, #0
    99d8:	601a      	str	r2, [r3, #0]
	PINMODE9 = 0;
    99da:	4b1e      	ldr	r3, [pc, #120]	; (9a54 <all_pins_off+0xf0>)
    99dc:	2200      	movs	r2, #0
    99de:	601a      	str	r2, [r3, #0]

	/* set all outputs low */
	FIO0PIN = 0;
    99e0:	4b1d      	ldr	r3, [pc, #116]	; (9a58 <all_pins_off+0xf4>)
    99e2:	2200      	movs	r2, #0
    99e4:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    99e6:	4b1d      	ldr	r3, [pc, #116]	; (9a5c <all_pins_off+0xf8>)
    99e8:	2200      	movs	r2, #0
    99ea:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    99ec:	4b1c      	ldr	r3, [pc, #112]	; (9a60 <all_pins_off+0xfc>)
    99ee:	2200      	movs	r2, #0
    99f0:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    99f2:	4b1c      	ldr	r3, [pc, #112]	; (9a64 <all_pins_off+0x100>)
    99f4:	2200      	movs	r2, #0
    99f6:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    99f8:	4b1b      	ldr	r3, [pc, #108]	; (9a68 <all_pins_off+0x104>)
    99fa:	2200      	movs	r2, #0
    99fc:	601a      	str	r2, [r3, #0]
}
    99fe:	46bd      	mov	sp, r7
    9a00:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a04:	4770      	bx	lr
    9a06:	bf00      	nop
    9a08:	4002c000 	.word	0x4002c000
    9a0c:	4002c004 	.word	0x4002c004
    9a10:	4002c008 	.word	0x4002c008
    9a14:	4002c00c 	.word	0x4002c00c
    9a18:	4002c010 	.word	0x4002c010
    9a1c:	4002c01c 	.word	0x4002c01c
    9a20:	4002c024 	.word	0x4002c024
    9a24:	4002c028 	.word	0x4002c028
    9a28:	2009c000 	.word	0x2009c000
    9a2c:	2009c020 	.word	0x2009c020
    9a30:	2009c040 	.word	0x2009c040
    9a34:	2009c060 	.word	0x2009c060
    9a38:	2009c080 	.word	0x2009c080
    9a3c:	4002c040 	.word	0x4002c040
    9a40:	4002c044 	.word	0x4002c044
    9a44:	4002c048 	.word	0x4002c048
    9a48:	4002c04c 	.word	0x4002c04c
    9a4c:	4002c050 	.word	0x4002c050
    9a50:	4002c05c 	.word	0x4002c05c
    9a54:	4002c064 	.word	0x4002c064
    9a58:	2009c014 	.word	0x2009c014
    9a5c:	2009c034 	.word	0x2009c034
    9a60:	2009c054 	.word	0x2009c054
    9a64:	2009c074 	.word	0x2009c074
    9a68:	2009c094 	.word	0x2009c094

00009a6c <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    9a6c:	b580      	push	{r7, lr}
    9a6e:	af00      	add	r7, sp, #0
	gpio_init();
    9a70:	f7ff ff3e 	bl	98f0 <gpio_init>
	cc2400_init();
    9a74:	f000 f860 	bl	9b38 <cc2400_init>
	clock_start();
    9a78:	f000 f9c2 	bl	9e00 <clock_start>
}
    9a7c:	bd80      	pop	{r7, pc}
    9a7e:	bf00      	nop

00009a80 <dio_ssp_init>:

/* configure SSP for CC2400's secondary serial data interface */
void dio_ssp_init()
{
    9a80:	b480      	push	{r7}
    9a82:	af00      	add	r7, sp, #0
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    9a84:	4a16      	ldr	r2, [pc, #88]	; (9ae0 <dio_ssp_init+0x60>)
    9a86:	4b16      	ldr	r3, [pc, #88]	; (9ae0 <dio_ssp_init+0x60>)
    9a88:	681b      	ldr	r3, [r3, #0]
    9a8a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    9a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9a92:	6013      	str	r3, [r2, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    9a94:	4a12      	ldr	r2, [pc, #72]	; (9ae0 <dio_ssp_init+0x60>)
    9a96:	4b12      	ldr	r3, [pc, #72]	; (9ae0 <dio_ssp_init+0x60>)
    9a98:	681b      	ldr	r3, [r3, #0]
    9a9a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    9a9e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    9aa2:	6013      	str	r3, [r2, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    9aa4:	4a0e      	ldr	r2, [pc, #56]	; (9ae0 <dio_ssp_init+0x60>)
    9aa6:	4b0e      	ldr	r3, [pc, #56]	; (9ae0 <dio_ssp_init+0x60>)
    9aa8:	681b      	ldr	r3, [r3, #0]
    9aaa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    9aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9ab2:	6013      	str	r3, [r2, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    9ab4:	4a0a      	ldr	r2, [pc, #40]	; (9ae0 <dio_ssp_init+0x60>)
    9ab6:	4b0a      	ldr	r3, [pc, #40]	; (9ae0 <dio_ssp_init+0x60>)
    9ab8:	681b      	ldr	r3, [r3, #0]
    9aba:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    9abe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    9ac2:	6013      	str	r3, [r2, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    9ac4:	4b07      	ldr	r3, [pc, #28]	; (9ae4 <dio_ssp_init+0x64>)
    9ac6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9aca:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    9acc:	4b06      	ldr	r3, [pc, #24]	; (9ae8 <dio_ssp_init+0x68>)
    9ace:	22c7      	movs	r2, #199	; 0xc7
    9ad0:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    9ad2:	4b06      	ldr	r3, [pc, #24]	; (9aec <dio_ssp_init+0x6c>)
    9ad4:	220c      	movs	r2, #12
    9ad6:	601a      	str	r2, [r3, #0]
}
    9ad8:	46bd      	mov	sp, r7
    9ada:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ade:	4770      	bx	lr
    9ae0:	4002c000 	.word	0x4002c000
    9ae4:	2009c098 	.word	0x2009c098
    9ae8:	40030000 	.word	0x40030000
    9aec:	40030004 	.word	0x40030004

00009af0 <atest_init>:

void atest_init()
{
    9af0:	b480      	push	{r7}
    9af2:	af00      	add	r7, sp, #0
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    9af4:	4a0d      	ldr	r2, [pc, #52]	; (9b2c <atest_init+0x3c>)
    9af6:	4b0d      	ldr	r3, [pc, #52]	; (9b2c <atest_init+0x3c>)
    9af8:	681b      	ldr	r3, [r3, #0]
    9afa:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    9afe:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    9b00:	4a0b      	ldr	r2, [pc, #44]	; (9b30 <atest_init+0x40>)
    9b02:	4b0b      	ldr	r3, [pc, #44]	; (9b30 <atest_init+0x40>)
    9b04:	681b      	ldr	r3, [r3, #0]
    9b06:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    9b0a:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    9b0c:	4a09      	ldr	r2, [pc, #36]	; (9b34 <atest_init+0x44>)
    9b0e:	4b09      	ldr	r3, [pc, #36]	; (9b34 <atest_init+0x44>)
    9b10:	681b      	ldr	r3, [r3, #0]
    9b12:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
    9b16:	6013      	str	r3, [r2, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    9b18:	4a06      	ldr	r2, [pc, #24]	; (9b34 <atest_init+0x44>)
    9b1a:	4b06      	ldr	r3, [pc, #24]	; (9b34 <atest_init+0x44>)
    9b1c:	681b      	ldr	r3, [r3, #0]
    9b1e:	f423 13a0 	bic.w	r3, r3, #1310720	; 0x140000
    9b22:	6013      	str	r3, [r2, #0]
}
    9b24:	46bd      	mov	sp, r7
    9b26:	f85d 7b04 	ldr.w	r7, [sp], #4
    9b2a:	4770      	bx	lr
    9b2c:	4002c004 	.word	0x4002c004
    9b30:	2009c000 	.word	0x2009c000
    9b34:	4002c044 	.word	0x4002c044

00009b38 <cc2400_init>:

void cc2400_init()
{
    9b38:	b580      	push	{r7, lr}
    9b3a:	af00      	add	r7, sp, #0
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    9b3c:	f7ff ffd8 	bl	9af0 <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    9b40:	4b09      	ldr	r3, [pc, #36]	; (9b68 <cc2400_init+0x30>)
    9b42:	f44f 7200 	mov.w	r2, #512	; 0x200
    9b46:	601a      	str	r2, [r3, #0]
	wait_us(50);
    9b48:	2032      	movs	r0, #50	; 0x32
    9b4a:	f7ff feab 	bl	98a4 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    9b4e:	4b07      	ldr	r3, [pc, #28]	; (9b6c <cc2400_init+0x34>)
    9b50:	2220      	movs	r2, #32
    9b52:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    9b54:	4b04      	ldr	r3, [pc, #16]	; (9b68 <cc2400_init+0x30>)
    9b56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9b5a:	601a      	str	r2, [r3, #0]

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
    9b5c:	200d      	movs	r0, #13
    9b5e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    9b62:	f000 f85f 	bl	9c24 <cc2400_set>
}
    9b66:	bd80      	pop	{r7, pc}
    9b68:	2009c038 	.word	0x2009c038
    9b6c:	2009c058 	.word	0x2009c058

00009b70 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    9b70:	b480      	push	{r7}
    9b72:	b085      	sub	sp, #20
    9b74:	af00      	add	r7, sp, #0
    9b76:	4603      	mov	r3, r0
    9b78:	6039      	str	r1, [r7, #0]
    9b7a:	71fb      	strb	r3, [r7, #7]
	u32 msb = 1 << (len - 1);
    9b7c:	79fb      	ldrb	r3, [r7, #7]
    9b7e:	3b01      	subs	r3, #1
    9b80:	2201      	movs	r2, #1
    9b82:	fa02 f303 	lsl.w	r3, r2, r3
    9b86:	60fb      	str	r3, [r7, #12]

	/* start transaction by dropping CSN */
	CSN_CLR;
    9b88:	4b18      	ldr	r3, [pc, #96]	; (9bec <cc2400_spi+0x7c>)
    9b8a:	2220      	movs	r2, #32
    9b8c:	601a      	str	r2, [r3, #0]

	while (len--) {
    9b8e:	e01e      	b.n	9bce <cc2400_spi+0x5e>
		if (data & msb)
    9b90:	683a      	ldr	r2, [r7, #0]
    9b92:	68fb      	ldr	r3, [r7, #12]
    9b94:	4013      	ands	r3, r2
    9b96:	2b00      	cmp	r3, #0
    9b98:	d003      	beq.n	9ba2 <cc2400_spi+0x32>
			MOSI_SET;
    9b9a:	4b15      	ldr	r3, [pc, #84]	; (9bf0 <cc2400_spi+0x80>)
    9b9c:	2201      	movs	r2, #1
    9b9e:	601a      	str	r2, [r3, #0]
    9ba0:	e002      	b.n	9ba8 <cc2400_spi+0x38>
		else
			MOSI_CLR;
    9ba2:	4b12      	ldr	r3, [pc, #72]	; (9bec <cc2400_spi+0x7c>)
    9ba4:	2201      	movs	r2, #1
    9ba6:	601a      	str	r2, [r3, #0]
		data <<= 1;
    9ba8:	683b      	ldr	r3, [r7, #0]
    9baa:	005b      	lsls	r3, r3, #1
    9bac:	603b      	str	r3, [r7, #0]

		SCLK_SET;
    9bae:	4b10      	ldr	r3, [pc, #64]	; (9bf0 <cc2400_spi+0x80>)
    9bb0:	2210      	movs	r2, #16
    9bb2:	601a      	str	r2, [r3, #0]
		if (MISO)
    9bb4:	4b0f      	ldr	r3, [pc, #60]	; (9bf4 <cc2400_spi+0x84>)
    9bb6:	681b      	ldr	r3, [r3, #0]
    9bb8:	f003 0302 	and.w	r3, r3, #2
    9bbc:	2b00      	cmp	r3, #0
    9bbe:	d003      	beq.n	9bc8 <cc2400_spi+0x58>
			data |= 1;
    9bc0:	683b      	ldr	r3, [r7, #0]
    9bc2:	f043 0301 	orr.w	r3, r3, #1
    9bc6:	603b      	str	r3, [r7, #0]

		SCLK_CLR;
    9bc8:	4b08      	ldr	r3, [pc, #32]	; (9bec <cc2400_spi+0x7c>)
    9bca:	2210      	movs	r2, #16
    9bcc:	601a      	str	r2, [r3, #0]
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    9bce:	79fb      	ldrb	r3, [r7, #7]
    9bd0:	1e5a      	subs	r2, r3, #1
    9bd2:	71fa      	strb	r2, [r7, #7]
    9bd4:	2b00      	cmp	r3, #0
    9bd6:	d1db      	bne.n	9b90 <cc2400_spi+0x20>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    9bd8:	4b05      	ldr	r3, [pc, #20]	; (9bf0 <cc2400_spi+0x80>)
    9bda:	2220      	movs	r2, #32
    9bdc:	601a      	str	r2, [r3, #0]

	return data;
    9bde:	683b      	ldr	r3, [r7, #0]
}
    9be0:	4618      	mov	r0, r3
    9be2:	3714      	adds	r7, #20
    9be4:	46bd      	mov	sp, r7
    9be6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9bea:	4770      	bx	lr
    9bec:	2009c05c 	.word	0x2009c05c
    9bf0:	2009c058 	.word	0x2009c058
    9bf4:	2009c054 	.word	0x2009c054

00009bf8 <cc2400_get>:

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    9bf8:	b580      	push	{r7, lr}
    9bfa:	b084      	sub	sp, #16
    9bfc:	af00      	add	r7, sp, #0
    9bfe:	4603      	mov	r3, r0
    9c00:	71fb      	strb	r3, [r7, #7]
	u32 in;

	u32 out = (reg | 0x80) << 16;
    9c02:	79fb      	ldrb	r3, [r7, #7]
    9c04:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9c08:	b2db      	uxtb	r3, r3
    9c0a:	041b      	lsls	r3, r3, #16
    9c0c:	60fb      	str	r3, [r7, #12]
	in = cc2400_spi(24, out);
    9c0e:	2018      	movs	r0, #24
    9c10:	68f9      	ldr	r1, [r7, #12]
    9c12:	f7ff ffad 	bl	9b70 <cc2400_spi>
    9c16:	60b8      	str	r0, [r7, #8]
	return in & 0xFFFF;
    9c18:	68bb      	ldr	r3, [r7, #8]
    9c1a:	b29b      	uxth	r3, r3
}
    9c1c:	4618      	mov	r0, r3
    9c1e:	3710      	adds	r7, #16
    9c20:	46bd      	mov	sp, r7
    9c22:	bd80      	pop	{r7, pc}

00009c24 <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
    9c24:	b580      	push	{r7, lr}
    9c26:	b084      	sub	sp, #16
    9c28:	af00      	add	r7, sp, #0
    9c2a:	4603      	mov	r3, r0
    9c2c:	460a      	mov	r2, r1
    9c2e:	71fb      	strb	r3, [r7, #7]
    9c30:	4613      	mov	r3, r2
    9c32:	80bb      	strh	r3, [r7, #4]
	u32 out = (reg << 16) | val;
    9c34:	79fb      	ldrb	r3, [r7, #7]
    9c36:	041a      	lsls	r2, r3, #16
    9c38:	88bb      	ldrh	r3, [r7, #4]
    9c3a:	4313      	orrs	r3, r2
    9c3c:	60fb      	str	r3, [r7, #12]
	cc2400_spi(24, out);
    9c3e:	2018      	movs	r0, #24
    9c40:	68f9      	ldr	r1, [r7, #12]
    9c42:	f7ff ff95 	bl	9b70 <cc2400_spi>
}
    9c46:	3710      	adds	r7, #16
    9c48:	46bd      	mov	sp, r7
    9c4a:	bd80      	pop	{r7, pc}

00009c4c <cc2400_get8>:

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    9c4c:	b580      	push	{r7, lr}
    9c4e:	b084      	sub	sp, #16
    9c50:	af00      	add	r7, sp, #0
    9c52:	4603      	mov	r3, r0
    9c54:	71fb      	strb	r3, [r7, #7]
	u16 in;

	u16 out = (reg | 0x80) << 8;
    9c56:	79fb      	ldrb	r3, [r7, #7]
    9c58:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9c5c:	b2db      	uxtb	r3, r3
    9c5e:	b29b      	uxth	r3, r3
    9c60:	021b      	lsls	r3, r3, #8
    9c62:	81fb      	strh	r3, [r7, #14]
	in = cc2400_spi(16, out);
    9c64:	89fb      	ldrh	r3, [r7, #14]
    9c66:	2010      	movs	r0, #16
    9c68:	4619      	mov	r1, r3
    9c6a:	f7ff ff81 	bl	9b70 <cc2400_spi>
    9c6e:	4603      	mov	r3, r0
    9c70:	81bb      	strh	r3, [r7, #12]
	return in & 0xFF;
    9c72:	89bb      	ldrh	r3, [r7, #12]
    9c74:	b2db      	uxtb	r3, r3
}
    9c76:	4618      	mov	r0, r3
    9c78:	3710      	adds	r7, #16
    9c7a:	46bd      	mov	sp, r7
    9c7c:	bd80      	pop	{r7, pc}
    9c7e:	bf00      	nop

00009c80 <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
    9c80:	b580      	push	{r7, lr}
    9c82:	b084      	sub	sp, #16
    9c84:	af00      	add	r7, sp, #0
    9c86:	4603      	mov	r3, r0
    9c88:	460a      	mov	r2, r1
    9c8a:	71fb      	strb	r3, [r7, #7]
    9c8c:	4613      	mov	r3, r2
    9c8e:	71bb      	strb	r3, [r7, #6]
	u32 out = (reg << 8) | val;
    9c90:	79fb      	ldrb	r3, [r7, #7]
    9c92:	021a      	lsls	r2, r3, #8
    9c94:	79bb      	ldrb	r3, [r7, #6]
    9c96:	4313      	orrs	r3, r2
    9c98:	60fb      	str	r3, [r7, #12]
	cc2400_spi(16, out);
    9c9a:	2010      	movs	r0, #16
    9c9c:	68f9      	ldr	r1, [r7, #12]
    9c9e:	f7ff ff67 	bl	9b70 <cc2400_spi>
}
    9ca2:	3710      	adds	r7, #16
    9ca4:	46bd      	mov	sp, r7
    9ca6:	bd80      	pop	{r7, pc}

00009ca8 <cc2400_spi_buf>:

/* write multiple bytes to SPI */
void cc2400_spi_buf(u8 reg, u8 len, u8 *data)
{
    9ca8:	b480      	push	{r7}
    9caa:	b085      	sub	sp, #20
    9cac:	af00      	add	r7, sp, #0
    9cae:	4603      	mov	r3, r0
    9cb0:	603a      	str	r2, [r7, #0]
    9cb2:	71fb      	strb	r3, [r7, #7]
    9cb4:	460b      	mov	r3, r1
    9cb6:	71bb      	strb	r3, [r7, #6]
	u8 msb = 1 << 7;
    9cb8:	2380      	movs	r3, #128	; 0x80
    9cba:	733b      	strb	r3, [r7, #12]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    9cbc:	4b33      	ldr	r3, [pc, #204]	; (9d8c <cc2400_spi_buf+0xe4>)
    9cbe:	2220      	movs	r2, #32
    9cc0:	601a      	str	r2, [r3, #0]

	for (i = 0; i < 8; ++i) {
    9cc2:	2300      	movs	r3, #0
    9cc4:	73fb      	strb	r3, [r7, #15]
    9cc6:	e018      	b.n	9cfa <cc2400_spi_buf+0x52>
		if (reg & msb)
    9cc8:	79fa      	ldrb	r2, [r7, #7]
    9cca:	7b3b      	ldrb	r3, [r7, #12]
    9ccc:	4013      	ands	r3, r2
    9cce:	b2db      	uxtb	r3, r3
    9cd0:	2b00      	cmp	r3, #0
    9cd2:	d003      	beq.n	9cdc <cc2400_spi_buf+0x34>
			MOSI_SET;
    9cd4:	4b2e      	ldr	r3, [pc, #184]	; (9d90 <cc2400_spi_buf+0xe8>)
    9cd6:	2201      	movs	r2, #1
    9cd8:	601a      	str	r2, [r3, #0]
    9cda:	e002      	b.n	9ce2 <cc2400_spi_buf+0x3a>
		else
			MOSI_CLR;
    9cdc:	4b2b      	ldr	r3, [pc, #172]	; (9d8c <cc2400_spi_buf+0xe4>)
    9cde:	2201      	movs	r2, #1
    9ce0:	601a      	str	r2, [r3, #0]
		reg <<= 1;
    9ce2:	79fb      	ldrb	r3, [r7, #7]
    9ce4:	005b      	lsls	r3, r3, #1
    9ce6:	71fb      	strb	r3, [r7, #7]
		SCLK_SET;
    9ce8:	4b29      	ldr	r3, [pc, #164]	; (9d90 <cc2400_spi_buf+0xe8>)
    9cea:	2210      	movs	r2, #16
    9cec:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    9cee:	4b27      	ldr	r3, [pc, #156]	; (9d8c <cc2400_spi_buf+0xe4>)
    9cf0:	2210      	movs	r2, #16
    9cf2:	601a      	str	r2, [r3, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    9cf4:	7bfb      	ldrb	r3, [r7, #15]
    9cf6:	3301      	adds	r3, #1
    9cf8:	73fb      	strb	r3, [r7, #15]
    9cfa:	7bfb      	ldrb	r3, [r7, #15]
    9cfc:	2b07      	cmp	r3, #7
    9cfe:	d9e3      	bls.n	9cc8 <cc2400_spi_buf+0x20>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    9d00:	2300      	movs	r3, #0
    9d02:	73fb      	strb	r3, [r7, #15]
    9d04:	e026      	b.n	9d54 <cc2400_spi_buf+0xac>
		temp = data[i];
    9d06:	7bfb      	ldrb	r3, [r7, #15]
    9d08:	683a      	ldr	r2, [r7, #0]
    9d0a:	4413      	add	r3, r2
    9d0c:	781b      	ldrb	r3, [r3, #0]
    9d0e:	737b      	strb	r3, [r7, #13]
		for (j = 0; j < 8; ++j) {
    9d10:	2300      	movs	r3, #0
    9d12:	73bb      	strb	r3, [r7, #14]
    9d14:	e018      	b.n	9d48 <cc2400_spi_buf+0xa0>
			if (temp & msb)
    9d16:	7b7a      	ldrb	r2, [r7, #13]
    9d18:	7b3b      	ldrb	r3, [r7, #12]
    9d1a:	4013      	ands	r3, r2
    9d1c:	b2db      	uxtb	r3, r3
    9d1e:	2b00      	cmp	r3, #0
    9d20:	d003      	beq.n	9d2a <cc2400_spi_buf+0x82>
				MOSI_SET;
    9d22:	4b1b      	ldr	r3, [pc, #108]	; (9d90 <cc2400_spi_buf+0xe8>)
    9d24:	2201      	movs	r2, #1
    9d26:	601a      	str	r2, [r3, #0]
    9d28:	e002      	b.n	9d30 <cc2400_spi_buf+0x88>
			else
				MOSI_CLR;
    9d2a:	4b18      	ldr	r3, [pc, #96]	; (9d8c <cc2400_spi_buf+0xe4>)
    9d2c:	2201      	movs	r2, #1
    9d2e:	601a      	str	r2, [r3, #0]
			temp <<= 1;
    9d30:	7b7b      	ldrb	r3, [r7, #13]
    9d32:	005b      	lsls	r3, r3, #1
    9d34:	737b      	strb	r3, [r7, #13]
			SCLK_SET;
    9d36:	4b16      	ldr	r3, [pc, #88]	; (9d90 <cc2400_spi_buf+0xe8>)
    9d38:	2210      	movs	r2, #16
    9d3a:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
    9d3c:	4b13      	ldr	r3, [pc, #76]	; (9d8c <cc2400_spi_buf+0xe4>)
    9d3e:	2210      	movs	r2, #16
    9d40:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    9d42:	7bbb      	ldrb	r3, [r7, #14]
    9d44:	3301      	adds	r3, #1
    9d46:	73bb      	strb	r3, [r7, #14]
    9d48:	7bbb      	ldrb	r3, [r7, #14]
    9d4a:	2b07      	cmp	r3, #7
    9d4c:	d9e3      	bls.n	9d16 <cc2400_spi_buf+0x6e>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    9d4e:	7bfb      	ldrb	r3, [r7, #15]
    9d50:	3301      	adds	r3, #1
    9d52:	73fb      	strb	r3, [r7, #15]
    9d54:	7bfa      	ldrb	r2, [r7, #15]
    9d56:	79bb      	ldrb	r3, [r7, #6]
    9d58:	429a      	cmp	r2, r3
    9d5a:	d3d4      	bcc.n	9d06 <cc2400_spi_buf+0x5e>
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    9d5c:	2300      	movs	r3, #0
    9d5e:	73fb      	strb	r3, [r7, #15]
    9d60:	e008      	b.n	9d74 <cc2400_spi_buf+0xcc>
		SCLK_SET;
    9d62:	4b0b      	ldr	r3, [pc, #44]	; (9d90 <cc2400_spi_buf+0xe8>)
    9d64:	2210      	movs	r2, #16
    9d66:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    9d68:	4b08      	ldr	r3, [pc, #32]	; (9d8c <cc2400_spi_buf+0xe4>)
    9d6a:	2210      	movs	r2, #16
    9d6c:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    9d6e:	7bfb      	ldrb	r3, [r7, #15]
    9d70:	3301      	adds	r3, #1
    9d72:	73fb      	strb	r3, [r7, #15]
    9d74:	7bfb      	ldrb	r3, [r7, #15]
    9d76:	2b07      	cmp	r3, #7
    9d78:	d9f3      	bls.n	9d62 <cc2400_spi_buf+0xba>
		SCLK_SET;
		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    9d7a:	4b05      	ldr	r3, [pc, #20]	; (9d90 <cc2400_spi_buf+0xe8>)
    9d7c:	2220      	movs	r2, #32
    9d7e:	601a      	str	r2, [r3, #0]
}
    9d80:	3714      	adds	r7, #20
    9d82:	46bd      	mov	sp, r7
    9d84:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d88:	4770      	bx	lr
    9d8a:	bf00      	nop
    9d8c:	2009c05c 	.word	0x2009c05c
    9d90:	2009c058 	.word	0x2009c058

00009d94 <cc2400_status>:

/* get the status */
u8 cc2400_status()
{
    9d94:	b580      	push	{r7, lr}
    9d96:	af00      	add	r7, sp, #0
	return cc2400_spi(8, 0);
    9d98:	2008      	movs	r0, #8
    9d9a:	2100      	movs	r1, #0
    9d9c:	f7ff fee8 	bl	9b70 <cc2400_spi>
    9da0:	4603      	mov	r3, r0
    9da2:	b2db      	uxtb	r3, r3
}
    9da4:	4618      	mov	r0, r3
    9da6:	bd80      	pop	{r7, pc}

00009da8 <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    9da8:	b580      	push	{r7, lr}
    9daa:	b082      	sub	sp, #8
    9dac:	af00      	add	r7, sp, #0
    9dae:	4603      	mov	r3, r0
    9db0:	71fb      	strb	r3, [r7, #7]
	return cc2400_spi(8, reg);
    9db2:	79fb      	ldrb	r3, [r7, #7]
    9db4:	2008      	movs	r0, #8
    9db6:	4619      	mov	r1, r3
    9db8:	f7ff feda 	bl	9b70 <cc2400_spi>
    9dbc:	4603      	mov	r3, r0
    9dbe:	b2db      	uxtb	r3, r3
}
    9dc0:	4618      	mov	r0, r3
    9dc2:	3708      	adds	r7, #8
    9dc4:	46bd      	mov	sp, r7
    9dc6:	bd80      	pop	{r7, pc}

00009dc8 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    9dc8:	b580      	push	{r7, lr}
    9dca:	af00      	add	r7, sp, #0
	cc2400_set(MAIN, 0x0000);
    9dcc:	2000      	movs	r0, #0
    9dce:	2100      	movs	r1, #0
    9dd0:	f7ff ff28 	bl	9c24 <cc2400_set>
	while (cc2400_get(MAIN) != 0x0000);
    9dd4:	bf00      	nop
    9dd6:	2000      	movs	r0, #0
    9dd8:	f7ff ff0e 	bl	9bf8 <cc2400_get>
    9ddc:	4603      	mov	r3, r0
    9dde:	2b00      	cmp	r3, #0
    9de0:	d1f9      	bne.n	9dd6 <cc2400_reset+0xe>
	cc2400_set(MAIN, 0x8000);
    9de2:	2000      	movs	r0, #0
    9de4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    9de8:	f7ff ff1c 	bl	9c24 <cc2400_set>
	while (cc2400_get(MAIN) != 0x8000);
    9dec:	bf00      	nop
    9dee:	2000      	movs	r0, #0
    9df0:	f7ff ff02 	bl	9bf8 <cc2400_get>
    9df4:	4603      	mov	r3, r0
    9df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9dfa:	d1f8      	bne.n	9dee <cc2400_reset+0x26>
}
    9dfc:	bd80      	pop	{r7, pc}
    9dfe:	bf00      	nop

00009e00 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    9e00:	b580      	push	{r7, lr}
    9e02:	af00      	add	r7, sp, #0
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    9e04:	4b5e      	ldr	r3, [pc, #376]	; (9f80 <clock_start+0x180>)
    9e06:	f244 023a 	movw	r2, #16442	; 0x403a
    9e0a:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    9e0c:	4b5d      	ldr	r3, [pc, #372]	; (9f84 <clock_start+0x184>)
    9e0e:	2200      	movs	r2, #0
    9e10:	601a      	str	r2, [r3, #0]

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    9e12:	4a5d      	ldr	r2, [pc, #372]	; (9f88 <clock_start+0x188>)
    9e14:	4b5c      	ldr	r3, [pc, #368]	; (9f88 <clock_start+0x188>)
    9e16:	681b      	ldr	r3, [r3, #0]
    9e18:	f023 0302 	bic.w	r3, r3, #2
    9e1c:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9e1e:	4b5b      	ldr	r3, [pc, #364]	; (9f8c <clock_start+0x18c>)
    9e20:	22aa      	movs	r2, #170	; 0xaa
    9e22:	601a      	str	r2, [r3, #0]
    9e24:	4b59      	ldr	r3, [pc, #356]	; (9f8c <clock_start+0x18c>)
    9e26:	2255      	movs	r2, #85	; 0x55
    9e28:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    9e2a:	bf00      	nop
    9e2c:	4b58      	ldr	r3, [pc, #352]	; (9f90 <clock_start+0x190>)
    9e2e:	681b      	ldr	r3, [r3, #0]
    9e30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    9e34:	2b00      	cmp	r3, #0
    9e36:	d1f9      	bne.n	9e2c <clock_start+0x2c>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    9e38:	4a53      	ldr	r2, [pc, #332]	; (9f88 <clock_start+0x188>)
    9e3a:	4b53      	ldr	r3, [pc, #332]	; (9f88 <clock_start+0x188>)
    9e3c:	681b      	ldr	r3, [r3, #0]
    9e3e:	f023 0301 	bic.w	r3, r3, #1
    9e42:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9e44:	4b51      	ldr	r3, [pc, #324]	; (9f8c <clock_start+0x18c>)
    9e46:	22aa      	movs	r2, #170	; 0xaa
    9e48:	601a      	str	r2, [r3, #0]
    9e4a:	4b50      	ldr	r3, [pc, #320]	; (9f8c <clock_start+0x18c>)
    9e4c:	2255      	movs	r2, #85	; 0x55
    9e4e:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    9e50:	bf00      	nop
    9e52:	4b4f      	ldr	r3, [pc, #316]	; (9f90 <clock_start+0x190>)
    9e54:	681b      	ldr	r3, [r3, #0]
    9e56:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    9e5a:	2b00      	cmp	r3, #0
    9e5c:	d1f9      	bne.n	9e52 <clock_start+0x52>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    9e5e:	4b4d      	ldr	r3, [pc, #308]	; (9f94 <clock_start+0x194>)
    9e60:	2200      	movs	r2, #0
    9e62:	601a      	str	r2, [r3, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    9e64:	f7ff ffb0 	bl	9dc8 <cc2400_reset>
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
    9e68:	2008      	movs	r0, #8
    9e6a:	f241 5170 	movw	r1, #5488	; 0x1570
    9e6e:	f7ff fed9 	bl	9c24 <cc2400_set>
	cc2400_strobe(SXOSCON);
    9e72:	2060      	movs	r0, #96	; 0x60
    9e74:	f7ff ff98 	bl	9da8 <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    9e78:	bf00      	nop
    9e7a:	f7ff ff8b 	bl	9d94 <cc2400_status>
    9e7e:	4603      	mov	r3, r0
    9e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e84:	2b00      	cmp	r3, #0
    9e86:	d0f8      	beq.n	9e7a <clock_start+0x7a>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    9e88:	4b43      	ldr	r3, [pc, #268]	; (9f98 <clock_start+0x198>)
    9e8a:	2220      	movs	r2, #32
    9e8c:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    9e8e:	bf00      	nop
    9e90:	4b41      	ldr	r3, [pc, #260]	; (9f98 <clock_start+0x198>)
    9e92:	681b      	ldr	r3, [r3, #0]
    9e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e98:	2b00      	cmp	r3, #0
    9e9a:	d0f9      	beq.n	9e90 <clock_start+0x90>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    9e9c:	4b3f      	ldr	r3, [pc, #252]	; (9f9c <clock_start+0x19c>)
    9e9e:	2208      	movs	r2, #8
    9ea0:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    9ea2:	4b3f      	ldr	r3, [pc, #252]	; (9fa0 <clock_start+0x1a0>)
    9ea4:	2200      	movs	r2, #0
    9ea6:	601a      	str	r2, [r3, #0]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    9ea8:	4b36      	ldr	r3, [pc, #216]	; (9f84 <clock_start+0x184>)
    9eaa:	2201      	movs	r2, #1
    9eac:	601a      	str	r2, [r3, #0]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    9eae:	4b3d      	ldr	r3, [pc, #244]	; (9fa4 <clock_start+0x1a4>)
    9eb0:	4a3d      	ldr	r2, [pc, #244]	; (9fa8 <clock_start+0x1a8>)
    9eb2:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    9eb4:	4b35      	ldr	r3, [pc, #212]	; (9f8c <clock_start+0x18c>)
    9eb6:	22aa      	movs	r2, #170	; 0xaa
    9eb8:	601a      	str	r2, [r3, #0]
    9eba:	4b34      	ldr	r3, [pc, #208]	; (9f8c <clock_start+0x18c>)
    9ebc:	2255      	movs	r2, #85	; 0x55
    9ebe:	601a      	str	r2, [r3, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    9ec0:	4a31      	ldr	r2, [pc, #196]	; (9f88 <clock_start+0x188>)
    9ec2:	4b31      	ldr	r3, [pc, #196]	; (9f88 <clock_start+0x188>)
    9ec4:	681b      	ldr	r3, [r3, #0]
    9ec6:	f043 0301 	orr.w	r3, r3, #1
    9eca:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9ecc:	4b2f      	ldr	r3, [pc, #188]	; (9f8c <clock_start+0x18c>)
    9ece:	22aa      	movs	r2, #170	; 0xaa
    9ed0:	601a      	str	r2, [r3, #0]
    9ed2:	4b2e      	ldr	r3, [pc, #184]	; (9f8c <clock_start+0x18c>)
    9ed4:	2255      	movs	r2, #85	; 0x55
    9ed6:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    9ed8:	bf00      	nop
    9eda:	4b2d      	ldr	r3, [pc, #180]	; (9f90 <clock_start+0x190>)
    9edc:	681b      	ldr	r3, [r3, #0]
    9ede:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    9ee2:	2b00      	cmp	r3, #0
    9ee4:	d0f9      	beq.n	9eda <clock_start+0xda>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    9ee6:	4b2b      	ldr	r3, [pc, #172]	; (9f94 <clock_start+0x194>)
    9ee8:	2203      	movs	r2, #3
    9eea:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    9eec:	4a26      	ldr	r2, [pc, #152]	; (9f88 <clock_start+0x188>)
    9eee:	4b26      	ldr	r3, [pc, #152]	; (9f88 <clock_start+0x188>)
    9ef0:	681b      	ldr	r3, [r3, #0]
    9ef2:	f043 0302 	orr.w	r3, r3, #2
    9ef6:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9ef8:	4b24      	ldr	r3, [pc, #144]	; (9f8c <clock_start+0x18c>)
    9efa:	22aa      	movs	r2, #170	; 0xaa
    9efc:	601a      	str	r2, [r3, #0]
    9efe:	4b23      	ldr	r3, [pc, #140]	; (9f8c <clock_start+0x18c>)
    9f00:	2255      	movs	r2, #85	; 0x55
    9f02:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    9f04:	bf00      	nop
    9f06:	4b22      	ldr	r3, [pc, #136]	; (9f90 <clock_start+0x190>)
    9f08:	681b      	ldr	r3, [r3, #0]
    9f0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    9f0e:	2b00      	cmp	r3, #0
    9f10:	d0f9      	beq.n	9f06 <clock_start+0x106>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    9f12:	4b26      	ldr	r3, [pc, #152]	; (9fac <clock_start+0x1ac>)
    9f14:	2222      	movs	r2, #34	; 0x22
    9f16:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    9f18:	4b25      	ldr	r3, [pc, #148]	; (9fb0 <clock_start+0x1b0>)
    9f1a:	22aa      	movs	r2, #170	; 0xaa
    9f1c:	601a      	str	r2, [r3, #0]
    9f1e:	4b24      	ldr	r3, [pc, #144]	; (9fb0 <clock_start+0x1b0>)
    9f20:	2255      	movs	r2, #85	; 0x55
    9f22:	601a      	str	r2, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    9f24:	4a23      	ldr	r2, [pc, #140]	; (9fb4 <clock_start+0x1b4>)
    9f26:	4b23      	ldr	r3, [pc, #140]	; (9fb4 <clock_start+0x1b4>)
    9f28:	681b      	ldr	r3, [r3, #0]
    9f2a:	f043 0301 	orr.w	r3, r3, #1
    9f2e:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    9f30:	4b1f      	ldr	r3, [pc, #124]	; (9fb0 <clock_start+0x1b0>)
    9f32:	22aa      	movs	r2, #170	; 0xaa
    9f34:	601a      	str	r2, [r3, #0]
    9f36:	4b1e      	ldr	r3, [pc, #120]	; (9fb0 <clock_start+0x1b0>)
    9f38:	2255      	movs	r2, #85	; 0x55
    9f3a:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    9f3c:	bf00      	nop
    9f3e:	4b1e      	ldr	r3, [pc, #120]	; (9fb8 <clock_start+0x1b8>)
    9f40:	681b      	ldr	r3, [r3, #0]
    9f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
    9f46:	2b00      	cmp	r3, #0
    9f48:	d0f9      	beq.n	9f3e <clock_start+0x13e>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    9f4a:	bf00      	nop
    9f4c:	4b1a      	ldr	r3, [pc, #104]	; (9fb8 <clock_start+0x1b8>)
    9f4e:	681b      	ldr	r3, [r3, #0]
    9f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9f54:	2b00      	cmp	r3, #0
    9f56:	d0f9      	beq.n	9f4c <clock_start+0x14c>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    9f58:	4a16      	ldr	r2, [pc, #88]	; (9fb4 <clock_start+0x1b4>)
    9f5a:	4b16      	ldr	r3, [pc, #88]	; (9fb4 <clock_start+0x1b4>)
    9f5c:	681b      	ldr	r3, [r3, #0]
    9f5e:	f043 0302 	orr.w	r3, r3, #2
    9f62:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    9f64:	4b12      	ldr	r3, [pc, #72]	; (9fb0 <clock_start+0x1b0>)
    9f66:	22aa      	movs	r2, #170	; 0xaa
    9f68:	601a      	str	r2, [r3, #0]
    9f6a:	4b11      	ldr	r3, [pc, #68]	; (9fb0 <clock_start+0x1b0>)
    9f6c:	2255      	movs	r2, #85	; 0x55
    9f6e:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    9f70:	bf00      	nop
    9f72:	4b11      	ldr	r3, [pc, #68]	; (9fb8 <clock_start+0x1b8>)
    9f74:	681b      	ldr	r3, [r3, #0]
    9f76:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9f7a:	2b00      	cmp	r3, #0
    9f7c:	d0f9      	beq.n	9f72 <clock_start+0x172>
}
    9f7e:	bd80      	pop	{r7, pc}
    9f80:	400fc000 	.word	0x400fc000
    9f84:	400fc10c 	.word	0x400fc10c
    9f88:	400fc080 	.word	0x400fc080
    9f8c:	400fc08c 	.word	0x400fc08c
    9f90:	400fc088 	.word	0x400fc088
    9f94:	400fc104 	.word	0x400fc104
    9f98:	400fc1a0 	.word	0x400fc1a0
    9f9c:	400fc1a8 	.word	0x400fc1a8
    9fa0:	400fc1ac 	.word	0x400fc1ac
    9fa4:	400fc084 	.word	0x400fc084
    9fa8:	00010018 	.word	0x00010018
    9fac:	400fc0a4 	.word	0x400fc0a4
    9fb0:	400fc0ac 	.word	0x400fc0ac
    9fb4:	400fc0a0 	.word	0x400fc0a0
    9fb8:	400fc0a8 	.word	0x400fc0a8

00009fbc <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    9fbc:	b580      	push	{r7, lr}
    9fbe:	af00      	add	r7, sp, #0
	all_pins_off();
    9fc0:	f7ff fcd0 	bl	9964 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    9fc4:	4b0a      	ldr	r3, [pc, #40]	; (9ff0 <reset+0x34>)
    9fc6:	2202      	movs	r2, #2
    9fc8:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    9fca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9fce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9fd2:	681b      	ldr	r3, [r3, #0]
    9fd4:	f043 0303 	orr.w	r3, r3, #3
    9fd8:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    9fda:	4b06      	ldr	r3, [pc, #24]	; (9ff4 <reset+0x38>)
    9fdc:	22aa      	movs	r2, #170	; 0xaa
    9fde:	601a      	str	r2, [r3, #0]
    9fe0:	4b04      	ldr	r3, [pc, #16]	; (9ff4 <reset+0x38>)
    9fe2:	2255      	movs	r2, #85	; 0x55
    9fe4:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
    9fe6:	2001      	movs	r0, #1
    9fe8:	f7ff fc38 	bl	985c <wait>
}
    9fec:	bd80      	pop	{r7, pc}
    9fee:	bf00      	nop
    9ff0:	2009c03c 	.word	0x2009c03c
    9ff4:	40000008 	.word	0x40000008

00009ff8 <_HandleRequest>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    9ff8:	b580      	push	{r7, lr}
    9ffa:	b088      	sub	sp, #32
    9ffc:	af00      	add	r7, sp, #0
    9ffe:	60f8      	str	r0, [r7, #12]
    a000:	60b9      	str	r1, [r7, #8]
    a002:	607a      	str	r2, [r7, #4]
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    a004:	68fb      	ldr	r3, [r7, #12]
    a006:	781b      	ldrb	r3, [r3, #0]
    a008:	095b      	lsrs	r3, r3, #5
    a00a:	b2db      	uxtb	r3, r3
    a00c:	f003 0303 	and.w	r3, r3, #3
    a010:	61fb      	str	r3, [r7, #28]
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    a012:	69fb      	ldr	r3, [r7, #28]
    a014:	2b02      	cmp	r3, #2
    a016:	d10e      	bne.n	a036 <_HandleRequest+0x3e>
		BOOL fFilterStatus = FALSE;
    a018:	2300      	movs	r3, #0
    a01a:	617b      	str	r3, [r7, #20]
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    a01c:	f107 0314 	add.w	r3, r7, #20
    a020:	68f8      	ldr	r0, [r7, #12]
    a022:	4619      	mov	r1, r3
    a024:	68ba      	ldr	r2, [r7, #8]
    a026:	687b      	ldr	r3, [r7, #4]
    a028:	f000 fcd2 	bl	a9d0 <USBFilterOsVendorMessage>
    a02c:	4603      	mov	r3, r0
    a02e:	2b00      	cmp	r3, #0
    a030:	d001      	beq.n	a036 <_HandleRequest+0x3e>
			return fFilterStatus;
    a032:	697b      	ldr	r3, [r7, #20]
    a034:	e00f      	b.n	a056 <_HandleRequest+0x5e>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    a036:	4a0a      	ldr	r2, [pc, #40]	; (a060 <_HandleRequest+0x68>)
    a038:	69fb      	ldr	r3, [r7, #28]
    a03a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a03e:	61bb      	str	r3, [r7, #24]
	if (pfnHandler == NULL) {
    a040:	69bb      	ldr	r3, [r7, #24]
    a042:	2b00      	cmp	r3, #0
    a044:	d101      	bne.n	a04a <_HandleRequest+0x52>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    a046:	2300      	movs	r3, #0
    a048:	e005      	b.n	a056 <_HandleRequest+0x5e>
	}

	return pfnHandler(pSetup, piLen, ppbData);
    a04a:	69bb      	ldr	r3, [r7, #24]
    a04c:	68f8      	ldr	r0, [r7, #12]
    a04e:	68b9      	ldr	r1, [r7, #8]
    a050:	687a      	ldr	r2, [r7, #4]
    a052:	4798      	blx	r3
    a054:	4603      	mov	r3, r0
}
    a056:	4618      	mov	r0, r3
    a058:	3720      	adds	r7, #32
    a05a:	46bd      	mov	sp, r7
    a05c:	bd80      	pop	{r7, pc}
    a05e:	bf00      	nop
    a060:	10000a80 	.word	0x10000a80

0000a064 <StallControlPipe>:
	Local function to stall the control endpoint
	
	@param [in]	bEPStat	Endpoint status
 */
static void StallControlPipe(U8 bEPStat)
{
    a064:	b580      	push	{r7, lr}
    a066:	b084      	sub	sp, #16
    a068:	af00      	add	r7, sp, #0
    a06a:	4603      	mov	r3, r0
    a06c:	71fb      	strb	r3, [r7, #7]
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    a06e:	2080      	movs	r0, #128	; 0x80
    a070:	2101      	movs	r1, #1
    a072:	f000 fa83 	bl	a57c <USBHwEPStall>

// dump setup packet
	DBG("STALL on [");
	pb = (U8 *)&Setup;
    a076:	4b07      	ldr	r3, [pc, #28]	; (a094 <StallControlPipe+0x30>)
    a078:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
    a07a:	2300      	movs	r3, #0
    a07c:	60fb      	str	r3, [r7, #12]
    a07e:	e002      	b.n	a086 <StallControlPipe+0x22>
    a080:	68fb      	ldr	r3, [r7, #12]
    a082:	3301      	adds	r3, #1
    a084:	60fb      	str	r3, [r7, #12]
    a086:	68fb      	ldr	r3, [r7, #12]
    a088:	2b07      	cmp	r3, #7
    a08a:	ddf9      	ble.n	a080 <StallControlPipe+0x1c>
		DBG(" %02x", *pb++);
	}
	DBG("] stat=%x\n", bEPStat);
}
    a08c:	3710      	adds	r7, #16
    a08e:	46bd      	mov	sp, r7
    a090:	bd80      	pop	{r7, pc}
    a092:	bf00      	nop
    a094:	10000a6c 	.word	0x10000a6c

0000a098 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    a098:	b580      	push	{r7, lr}
    a09a:	b082      	sub	sp, #8
    a09c:	af00      	add	r7, sp, #0
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    a09e:	4b0e      	ldr	r3, [pc, #56]	; (a0d8 <DataIn+0x40>)
    a0a0:	681b      	ldr	r3, [r3, #0]
    a0a2:	2b40      	cmp	r3, #64	; 0x40
    a0a4:	bfa8      	it	ge
    a0a6:	2340      	movge	r3, #64	; 0x40
    a0a8:	607b      	str	r3, [r7, #4]
	USBHwEPWrite(0x80, pbData, iChunk);
    a0aa:	4b0c      	ldr	r3, [pc, #48]	; (a0dc <DataIn+0x44>)
    a0ac:	681a      	ldr	r2, [r3, #0]
    a0ae:	687b      	ldr	r3, [r7, #4]
    a0b0:	2080      	movs	r0, #128	; 0x80
    a0b2:	4611      	mov	r1, r2
    a0b4:	461a      	mov	r2, r3
    a0b6:	f000 fa85 	bl	a5c4 <USBHwEPWrite>
	pbData += iChunk;
    a0ba:	4b08      	ldr	r3, [pc, #32]	; (a0dc <DataIn+0x44>)
    a0bc:	681a      	ldr	r2, [r3, #0]
    a0be:	687b      	ldr	r3, [r7, #4]
    a0c0:	4413      	add	r3, r2
    a0c2:	4a06      	ldr	r2, [pc, #24]	; (a0dc <DataIn+0x44>)
    a0c4:	6013      	str	r3, [r2, #0]
	iResidue -= iChunk;
    a0c6:	4b04      	ldr	r3, [pc, #16]	; (a0d8 <DataIn+0x40>)
    a0c8:	681a      	ldr	r2, [r3, #0]
    a0ca:	687b      	ldr	r3, [r7, #4]
    a0cc:	1ad3      	subs	r3, r2, r3
    a0ce:	4a02      	ldr	r2, [pc, #8]	; (a0d8 <DataIn+0x40>)
    a0d0:	6013      	str	r3, [r2, #0]
}
    a0d2:	3708      	adds	r7, #8
    a0d4:	46bd      	mov	sp, r7
    a0d6:	bd80      	pop	{r7, pc}
    a0d8:	10000a78 	.word	0x10000a78
    a0dc:	10000a74 	.word	0x10000a74

0000a0e0 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    a0e0:	b580      	push	{r7, lr}
    a0e2:	b084      	sub	sp, #16
    a0e4:	af00      	add	r7, sp, #0
    a0e6:	4603      	mov	r3, r0
    a0e8:	460a      	mov	r2, r1
    a0ea:	71fb      	strb	r3, [r7, #7]
    a0ec:	4613      	mov	r3, r2
    a0ee:	71bb      	strb	r3, [r7, #6]
	int iChunk, iType;

	if (bEP == 0x00) {
    a0f0:	79fb      	ldrb	r3, [r7, #7]
    a0f2:	2b00      	cmp	r3, #0
    a0f4:	f040 8091 	bne.w	a21a <USBHandleControlTransfer+0x13a>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    a0f8:	79bb      	ldrb	r3, [r7, #6]
    a0fa:	f003 0304 	and.w	r3, r3, #4
    a0fe:	2b00      	cmp	r3, #0
    a100:	d041      	beq.n	a186 <USBHandleControlTransfer+0xa6>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    a102:	2000      	movs	r0, #0
    a104:	4949      	ldr	r1, [pc, #292]	; (a22c <USBHandleControlTransfer+0x14c>)
    a106:	2208      	movs	r2, #8
    a108:	f000 faaa 	bl	a660 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    a10c:	4b47      	ldr	r3, [pc, #284]	; (a22c <USBHandleControlTransfer+0x14c>)
    a10e:	781b      	ldrb	r3, [r3, #0]
    a110:	095b      	lsrs	r3, r3, #5
    a112:	b2db      	uxtb	r3, r3
    a114:	f003 0303 	and.w	r3, r3, #3
    a118:	60fb      	str	r3, [r7, #12]
			pbData = apbDataStore[iType];
    a11a:	4a45      	ldr	r2, [pc, #276]	; (a230 <USBHandleControlTransfer+0x150>)
    a11c:	68fb      	ldr	r3, [r7, #12]
    a11e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a122:	4a44      	ldr	r2, [pc, #272]	; (a234 <USBHandleControlTransfer+0x154>)
    a124:	6013      	str	r3, [r2, #0]
			iResidue = Setup.wLength;
    a126:	4b41      	ldr	r3, [pc, #260]	; (a22c <USBHandleControlTransfer+0x14c>)
    a128:	88db      	ldrh	r3, [r3, #6]
    a12a:	461a      	mov	r2, r3
    a12c:	4b42      	ldr	r3, [pc, #264]	; (a238 <USBHandleControlTransfer+0x158>)
    a12e:	601a      	str	r2, [r3, #0]
			iLen = Setup.wLength;
    a130:	4b3e      	ldr	r3, [pc, #248]	; (a22c <USBHandleControlTransfer+0x14c>)
    a132:	88db      	ldrh	r3, [r3, #6]
    a134:	461a      	mov	r2, r3
    a136:	4b41      	ldr	r3, [pc, #260]	; (a23c <USBHandleControlTransfer+0x15c>)
    a138:	601a      	str	r2, [r3, #0]

			if ((Setup.wLength == 0) ||
    a13a:	4b3c      	ldr	r3, [pc, #240]	; (a22c <USBHandleControlTransfer+0x14c>)
    a13c:	88db      	ldrh	r3, [r3, #6]
    a13e:	2b00      	cmp	r3, #0
    a140:	d007      	beq.n	a152 <USBHandleControlTransfer+0x72>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
    a142:	4b3a      	ldr	r3, [pc, #232]	; (a22c <USBHandleControlTransfer+0x14c>)
    a144:	781b      	ldrb	r3, [r3, #0]
    a146:	09db      	lsrs	r3, r3, #7
    a148:	b2db      	uxtb	r3, r3
    a14a:	f003 0301 	and.w	r3, r3, #1
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
			pbData = apbDataStore[iType];
			iResidue = Setup.wLength;
			iLen = Setup.wLength;

			if ((Setup.wLength == 0) ||
    a14e:	2b00      	cmp	r3, #0
    a150:	d068      	beq.n	a224 <USBHandleControlTransfer+0x144>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    a152:	4836      	ldr	r0, [pc, #216]	; (a22c <USBHandleControlTransfer+0x14c>)
    a154:	4939      	ldr	r1, [pc, #228]	; (a23c <USBHandleControlTransfer+0x15c>)
    a156:	4a37      	ldr	r2, [pc, #220]	; (a234 <USBHandleControlTransfer+0x154>)
    a158:	f7ff ff4e 	bl	9ff8 <_HandleRequest>
    a15c:	4603      	mov	r3, r0
    a15e:	2b00      	cmp	r3, #0
    a160:	d104      	bne.n	a16c <USBHandleControlTransfer+0x8c>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
    a162:	79bb      	ldrb	r3, [r7, #6]
    a164:	4618      	mov	r0, r3
    a166:	f7ff ff7d 	bl	a064 <StallControlPipe>
					return;
    a16a:	e05b      	b.n	a224 <USBHandleControlTransfer+0x144>
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    a16c:	4b2f      	ldr	r3, [pc, #188]	; (a22c <USBHandleControlTransfer+0x14c>)
    a16e:	88db      	ldrh	r3, [r3, #6]
    a170:	461a      	mov	r2, r3
    a172:	4b32      	ldr	r3, [pc, #200]	; (a23c <USBHandleControlTransfer+0x15c>)
    a174:	681b      	ldr	r3, [r3, #0]
    a176:	4293      	cmp	r3, r2
    a178:	bfa8      	it	ge
    a17a:	4613      	movge	r3, r2
    a17c:	4a2e      	ldr	r2, [pc, #184]	; (a238 <USBHandleControlTransfer+0x158>)
    a17e:	6013      	str	r3, [r2, #0]
				// send first part (possibly a zero-length status message)
				DataIn();
    a180:	f7ff ff8a 	bl	a098 <DataIn>
    a184:	e04e      	b.n	a224 <USBHandleControlTransfer+0x144>
			}
		}
		else {		
			if (iResidue > 0) {
    a186:	4b2c      	ldr	r3, [pc, #176]	; (a238 <USBHandleControlTransfer+0x158>)
    a188:	681b      	ldr	r3, [r3, #0]
    a18a:	2b00      	cmp	r3, #0
    a18c:	dd3e      	ble.n	a20c <USBHandleControlTransfer+0x12c>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    a18e:	4b29      	ldr	r3, [pc, #164]	; (a234 <USBHandleControlTransfer+0x154>)
    a190:	681a      	ldr	r2, [r3, #0]
    a192:	4b29      	ldr	r3, [pc, #164]	; (a238 <USBHandleControlTransfer+0x158>)
    a194:	681b      	ldr	r3, [r3, #0]
    a196:	2000      	movs	r0, #0
    a198:	4611      	mov	r1, r2
    a19a:	461a      	mov	r2, r3
    a19c:	f000 fa60 	bl	a660 <USBHwEPRead>
    a1a0:	60b8      	str	r0, [r7, #8]
				if (iChunk < 0) {
    a1a2:	68bb      	ldr	r3, [r7, #8]
    a1a4:	2b00      	cmp	r3, #0
    a1a6:	da04      	bge.n	a1b2 <USBHandleControlTransfer+0xd2>
					StallControlPipe(bEPStat);
    a1a8:	79bb      	ldrb	r3, [r7, #6]
    a1aa:	4618      	mov	r0, r3
    a1ac:	f7ff ff5a 	bl	a064 <StallControlPipe>
					return;
    a1b0:	e038      	b.n	a224 <USBHandleControlTransfer+0x144>
				}
				pbData += iChunk;
    a1b2:	4b20      	ldr	r3, [pc, #128]	; (a234 <USBHandleControlTransfer+0x154>)
    a1b4:	681a      	ldr	r2, [r3, #0]
    a1b6:	68bb      	ldr	r3, [r7, #8]
    a1b8:	4413      	add	r3, r2
    a1ba:	4a1e      	ldr	r2, [pc, #120]	; (a234 <USBHandleControlTransfer+0x154>)
    a1bc:	6013      	str	r3, [r2, #0]
				iResidue -= iChunk;
    a1be:	4b1e      	ldr	r3, [pc, #120]	; (a238 <USBHandleControlTransfer+0x158>)
    a1c0:	681a      	ldr	r2, [r3, #0]
    a1c2:	68bb      	ldr	r3, [r7, #8]
    a1c4:	1ad3      	subs	r3, r2, r3
    a1c6:	4a1c      	ldr	r2, [pc, #112]	; (a238 <USBHandleControlTransfer+0x158>)
    a1c8:	6013      	str	r3, [r2, #0]
				if (iResidue == 0) {
    a1ca:	4b1b      	ldr	r3, [pc, #108]	; (a238 <USBHandleControlTransfer+0x158>)
    a1cc:	681b      	ldr	r3, [r3, #0]
    a1ce:	2b00      	cmp	r3, #0
    a1d0:	d128      	bne.n	a224 <USBHandleControlTransfer+0x144>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    a1d2:	4b16      	ldr	r3, [pc, #88]	; (a22c <USBHandleControlTransfer+0x14c>)
    a1d4:	781b      	ldrb	r3, [r3, #0]
    a1d6:	095b      	lsrs	r3, r3, #5
    a1d8:	b2db      	uxtb	r3, r3
    a1da:	f003 0303 	and.w	r3, r3, #3
    a1de:	60fb      	str	r3, [r7, #12]
					pbData = apbDataStore[iType];
    a1e0:	4a13      	ldr	r2, [pc, #76]	; (a230 <USBHandleControlTransfer+0x150>)
    a1e2:	68fb      	ldr	r3, [r7, #12]
    a1e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a1e8:	4a12      	ldr	r2, [pc, #72]	; (a234 <USBHandleControlTransfer+0x154>)
    a1ea:	6013      	str	r3, [r2, #0]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    a1ec:	480f      	ldr	r0, [pc, #60]	; (a22c <USBHandleControlTransfer+0x14c>)
    a1ee:	4913      	ldr	r1, [pc, #76]	; (a23c <USBHandleControlTransfer+0x15c>)
    a1f0:	4a10      	ldr	r2, [pc, #64]	; (a234 <USBHandleControlTransfer+0x154>)
    a1f2:	f7ff ff01 	bl	9ff8 <_HandleRequest>
    a1f6:	4603      	mov	r3, r0
    a1f8:	2b00      	cmp	r3, #0
    a1fa:	d104      	bne.n	a206 <USBHandleControlTransfer+0x126>
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
    a1fc:	79bb      	ldrb	r3, [r7, #6]
    a1fe:	4618      	mov	r0, r3
    a200:	f7ff ff30 	bl	a064 <StallControlPipe>
						return;
    a204:	e00e      	b.n	a224 <USBHandleControlTransfer+0x144>
					}
					// send status to host
					DataIn();
    a206:	f7ff ff47 	bl	a098 <DataIn>
    a20a:	e00b      	b.n	a224 <USBHandleControlTransfer+0x144>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    a20c:	2000      	movs	r0, #0
    a20e:	2100      	movs	r1, #0
    a210:	2200      	movs	r2, #0
    a212:	f000 fa25 	bl	a660 <USBHwEPRead>
    a216:	60b8      	str	r0, [r7, #8]
    a218:	e004      	b.n	a224 <USBHandleControlTransfer+0x144>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    a21a:	79fb      	ldrb	r3, [r7, #7]
    a21c:	2b80      	cmp	r3, #128	; 0x80
    a21e:	d101      	bne.n	a224 <USBHandleControlTransfer+0x144>
		// IN transfer
		// send more data if available (possibly a 0-length packet)
		DataIn();
    a220:	f7ff ff3a 	bl	a098 <DataIn>
	}
	else {
		ASSERT(FALSE);
	}
}
    a224:	3710      	adds	r7, #16
    a226:	46bd      	mov	sp, r7
    a228:	bd80      	pop	{r7, pc}
    a22a:	bf00      	nop
    a22c:	10000a6c 	.word	0x10000a6c
    a230:	10000a90 	.word	0x10000a90
    a234:	10000a74 	.word	0x10000a74
    a238:	10000a78 	.word	0x10000a78
    a23c:	10000a7c 	.word	0x10000a7c

0000a240 <USBRegisterRequestHandler>:
	@param [in]	iType			Type of request, e.g. REQTYPE_TYPE_STANDARD
	@param [in]	*pfnHandler		Callback function pointer
	@param [in]	*pbDataStore	Data storage area for this type of request
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
    a240:	b480      	push	{r7}
    a242:	b085      	sub	sp, #20
    a244:	af00      	add	r7, sp, #0
    a246:	60f8      	str	r0, [r7, #12]
    a248:	60b9      	str	r1, [r7, #8]
    a24a:	607a      	str	r2, [r7, #4]
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    a24c:	4907      	ldr	r1, [pc, #28]	; (a26c <USBRegisterRequestHandler+0x2c>)
    a24e:	68fb      	ldr	r3, [r7, #12]
    a250:	68ba      	ldr	r2, [r7, #8]
    a252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	apbDataStore[iType] = pbDataStore;
    a256:	4906      	ldr	r1, [pc, #24]	; (a270 <USBRegisterRequestHandler+0x30>)
    a258:	68fb      	ldr	r3, [r7, #12]
    a25a:	687a      	ldr	r2, [r7, #4]
    a25c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a260:	3714      	adds	r7, #20
    a262:	46bd      	mov	sp, r7
    a264:	f85d 7b04 	ldr.w	r7, [sp], #4
    a268:	4770      	bx	lr
    a26a:	bf00      	nop
    a26c:	10000a80 	.word	0x10000a80
    a270:	10000a90 	.word	0x10000a90

0000a274 <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    a274:	b480      	push	{r7}
    a276:	b083      	sub	sp, #12
    a278:	af00      	add	r7, sp, #0
    a27a:	4603      	mov	r3, r0
    a27c:	71fb      	strb	r3, [r7, #7]
	if (bDevStatus & DEV_STATUS_RESET) {
		DBG("\n!");
	}
}
    a27e:	370c      	adds	r7, #12
    a280:	46bd      	mov	sp, r7
    a282:	f85d 7b04 	ldr.w	r7, [sp], #4
    a286:	4770      	bx	lr

0000a288 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    a288:	b580      	push	{r7, lr}
    a28a:	af00      	add	r7, sp, #0
	// init hardware
	USBHwInit();
    a28c:	f000 fb2a 	bl	a8e4 <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    a290:	480d      	ldr	r0, [pc, #52]	; (a2c8 <USBInit+0x40>)
    a292:	f000 f913 	bl	a4bc <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    a296:	2000      	movs	r0, #0
    a298:	490c      	ldr	r1, [pc, #48]	; (a2cc <USBInit+0x44>)
    a29a:	f000 f8dd 	bl	a458 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    a29e:	2080      	movs	r0, #128	; 0x80
    a2a0:	490a      	ldr	r1, [pc, #40]	; (a2cc <USBInit+0x44>)
    a2a2:	f000 f8d9 	bl	a458 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    a2a6:	2000      	movs	r0, #0
    a2a8:	2140      	movs	r1, #64	; 0x40
    a2aa:	f000 f8b7 	bl	a41c <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    a2ae:	2080      	movs	r0, #128	; 0x80
    a2b0:	2140      	movs	r1, #64	; 0x40
    a2b2:	f000 f8b3 	bl	a41c <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    a2b6:	2000      	movs	r0, #0
    a2b8:	4905      	ldr	r1, [pc, #20]	; (a2d0 <USBInit+0x48>)
    a2ba:	4a06      	ldr	r2, [pc, #24]	; (a2d4 <USBInit+0x4c>)
    a2bc:	f7ff ffc0 	bl	a240 <USBRegisterRequestHandler>

	return TRUE;
    a2c0:	2301      	movs	r3, #1
}
    a2c2:	4618      	mov	r0, r3
    a2c4:	bd80      	pop	{r7, pc}
    a2c6:	bf00      	nop
    a2c8:	0000a275 	.word	0x0000a275
    a2cc:	0000a0e1 	.word	0x0000a0e1
    a2d0:	0000af1d 	.word	0x0000af1d
    a2d4:	10000aa0 	.word	0x10000aa0

0000a2d8 <Wait4DevInt>:
    Local function to wait for a device interrupt (and clear it)
        
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    a2d8:	b480      	push	{r7}
    a2da:	b083      	sub	sp, #12
    a2dc:	af00      	add	r7, sp, #0
    a2de:	6078      	str	r0, [r7, #4]
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    a2e0:	bf00      	nop
    a2e2:	4b07      	ldr	r3, [pc, #28]	; (a300 <Wait4DevInt+0x28>)
    a2e4:	681a      	ldr	r2, [r3, #0]
    a2e6:	687b      	ldr	r3, [r7, #4]
    a2e8:	401a      	ands	r2, r3
    a2ea:	687b      	ldr	r3, [r7, #4]
    a2ec:	429a      	cmp	r2, r3
    a2ee:	d1f8      	bne.n	a2e2 <Wait4DevInt+0xa>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    a2f0:	4a04      	ldr	r2, [pc, #16]	; (a304 <Wait4DevInt+0x2c>)
    a2f2:	687b      	ldr	r3, [r7, #4]
    a2f4:	6013      	str	r3, [r2, #0]
}
    a2f6:	370c      	adds	r7, #12
    a2f8:	46bd      	mov	sp, r7
    a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
    a2fe:	4770      	bx	lr
    a300:	5000c200 	.word	0x5000c200
    a304:	5000c208 	.word	0x5000c208

0000a308 <USBHwCmd>:
    Local function to send a command to the USB protocol engine
        
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    a308:	b580      	push	{r7, lr}
    a30a:	b082      	sub	sp, #8
    a30c:	af00      	add	r7, sp, #0
    a30e:	4603      	mov	r3, r0
    a310:	71fb      	strb	r3, [r7, #7]
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    a312:	4b07      	ldr	r3, [pc, #28]	; (a330 <USBHwCmd+0x28>)
    a314:	2230      	movs	r2, #48	; 0x30
    a316:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    a318:	4a06      	ldr	r2, [pc, #24]	; (a334 <USBHwCmd+0x2c>)
    a31a:	79fb      	ldrb	r3, [r7, #7]
    a31c:	041b      	lsls	r3, r3, #16
    a31e:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    a322:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    a324:	2010      	movs	r0, #16
    a326:	f7ff ffd7 	bl	a2d8 <Wait4DevInt>
}
    a32a:	3708      	adds	r7, #8
    a32c:	46bd      	mov	sp, r7
    a32e:	bd80      	pop	{r7, pc}
    a330:	5000c208 	.word	0x5000c208
    a334:	5000c210 	.word	0x5000c210

0000a338 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    a338:	b580      	push	{r7, lr}
    a33a:	b082      	sub	sp, #8
    a33c:	af00      	add	r7, sp, #0
    a33e:	4603      	mov	r3, r0
    a340:	460a      	mov	r2, r1
    a342:	71fb      	strb	r3, [r7, #7]
    a344:	4613      	mov	r3, r2
    a346:	80bb      	strh	r3, [r7, #4]
    // write command code
    USBHwCmd(bCmd);
    a348:	79fb      	ldrb	r3, [r7, #7]
    a34a:	4618      	mov	r0, r3
    a34c:	f7ff ffdc 	bl	a308 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    a350:	4a05      	ldr	r2, [pc, #20]	; (a368 <USBHwCmdWrite+0x30>)
    a352:	88bb      	ldrh	r3, [r7, #4]
    a354:	041b      	lsls	r3, r3, #16
    a356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a35a:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    a35c:	2010      	movs	r0, #16
    a35e:	f7ff ffbb 	bl	a2d8 <Wait4DevInt>
}
    a362:	3708      	adds	r7, #8
    a364:	46bd      	mov	sp, r7
    a366:	bd80      	pop	{r7, pc}
    a368:	5000c210 	.word	0x5000c210

0000a36c <USBHwCmdRead>:
    @param [in] bCmd        Command to send

    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    a36c:	b580      	push	{r7, lr}
    a36e:	b082      	sub	sp, #8
    a370:	af00      	add	r7, sp, #0
    a372:	4603      	mov	r3, r0
    a374:	71fb      	strb	r3, [r7, #7]
    // write command code
    USBHwCmd(bCmd);
    a376:	79fb      	ldrb	r3, [r7, #7]
    a378:	4618      	mov	r0, r3
    a37a:	f7ff ffc5 	bl	a308 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    a37e:	4a08      	ldr	r2, [pc, #32]	; (a3a0 <USBHwCmdRead+0x34>)
    a380:	79fb      	ldrb	r3, [r7, #7]
    a382:	041b      	lsls	r3, r3, #16
    a384:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a388:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CDFULL);
    a38a:	2020      	movs	r0, #32
    a38c:	f7ff ffa4 	bl	a2d8 <Wait4DevInt>
    return USBCmdData;
    a390:	4b04      	ldr	r3, [pc, #16]	; (a3a4 <USBHwCmdRead+0x38>)
    a392:	681b      	ldr	r3, [r3, #0]
    a394:	b2db      	uxtb	r3, r3
}
    a396:	4618      	mov	r0, r3
    a398:	3708      	adds	r7, #8
    a39a:	46bd      	mov	sp, r7
    a39c:	bd80      	pop	{r7, pc}
    a39e:	bf00      	nop
    a3a0:	5000c210 	.word	0x5000c210
    a3a4:	5000c214 	.word	0x5000c214

0000a3a8 <USBHwEPRealize>:
        
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    a3a8:	b580      	push	{r7, lr}
    a3aa:	b082      	sub	sp, #8
    a3ac:	af00      	add	r7, sp, #0
    a3ae:	6078      	str	r0, [r7, #4]
    a3b0:	460b      	mov	r3, r1
    a3b2:	807b      	strh	r3, [r7, #2]
    USBReEp |= (1 << idx);
    a3b4:	490a      	ldr	r1, [pc, #40]	; (a3e0 <USBHwEPRealize+0x38>)
    a3b6:	4b0a      	ldr	r3, [pc, #40]	; (a3e0 <USBHwEPRealize+0x38>)
    a3b8:	681b      	ldr	r3, [r3, #0]
    a3ba:	2001      	movs	r0, #1
    a3bc:	687a      	ldr	r2, [r7, #4]
    a3be:	fa00 f202 	lsl.w	r2, r0, r2
    a3c2:	4313      	orrs	r3, r2
    a3c4:	600b      	str	r3, [r1, #0]
#ifdef LPC17xx
    USBEpIn = idx;
    a3c6:	4a07      	ldr	r2, [pc, #28]	; (a3e4 <USBHwEPRealize+0x3c>)
    a3c8:	687b      	ldr	r3, [r7, #4]
    a3ca:	6013      	str	r3, [r2, #0]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    a3cc:	4a06      	ldr	r2, [pc, #24]	; (a3e8 <USBHwEPRealize+0x40>)
    a3ce:	887b      	ldrh	r3, [r7, #2]
    a3d0:	6013      	str	r3, [r2, #0]
    Wait4DevInt(EP_RLZED);
    a3d2:	f44f 7080 	mov.w	r0, #256	; 0x100
    a3d6:	f7ff ff7f 	bl	a2d8 <Wait4DevInt>
}
    a3da:	3708      	adds	r7, #8
    a3dc:	46bd      	mov	sp, r7
    a3de:	bd80      	pop	{r7, pc}
    a3e0:	5000c244 	.word	0x5000c244
    a3e4:	5000c248 	.word	0x5000c248
    a3e8:	5000c24c 	.word	0x5000c24c

0000a3ec <USBHwEPEnable>:
        
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    a3ec:	b580      	push	{r7, lr}
    a3ee:	b082      	sub	sp, #8
    a3f0:	af00      	add	r7, sp, #0
    a3f2:	6078      	str	r0, [r7, #4]
    a3f4:	6039      	str	r1, [r7, #0]
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    a3f6:	687b      	ldr	r3, [r7, #4]
    a3f8:	b2db      	uxtb	r3, r3
    a3fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a3fe:	b2db      	uxtb	r3, r3
    a400:	b2da      	uxtb	r2, r3
    a402:	683b      	ldr	r3, [r7, #0]
    a404:	2b00      	cmp	r3, #0
    a406:	d001      	beq.n	a40c <USBHwEPEnable+0x20>
    a408:	2300      	movs	r3, #0
    a40a:	e000      	b.n	a40e <USBHwEPEnable+0x22>
    a40c:	2320      	movs	r3, #32
    a40e:	4610      	mov	r0, r2
    a410:	4619      	mov	r1, r3
    a412:	f7ff ff91 	bl	a338 <USBHwCmdWrite>
}
    a416:	3708      	adds	r7, #8
    a418:	46bd      	mov	sp, r7
    a41a:	bd80      	pop	{r7, pc}

0000a41c <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    a41c:	b580      	push	{r7, lr}
    a41e:	b084      	sub	sp, #16
    a420:	af00      	add	r7, sp, #0
    a422:	4603      	mov	r3, r0
    a424:	460a      	mov	r2, r1
    a426:	71fb      	strb	r3, [r7, #7]
    a428:	4613      	mov	r3, r2
    a42a:	80bb      	strh	r3, [r7, #4]
    int idx;
    
    idx = EP2IDX(bEP);
    a42c:	79fb      	ldrb	r3, [r7, #7]
    a42e:	f003 030f 	and.w	r3, r3, #15
    a432:	005b      	lsls	r3, r3, #1
    a434:	79fa      	ldrb	r2, [r7, #7]
    a436:	09d2      	lsrs	r2, r2, #7
    a438:	b2d2      	uxtb	r2, r2
    a43a:	4313      	orrs	r3, r2
    a43c:	60fb      	str	r3, [r7, #12]
    
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);
    a43e:	88bb      	ldrh	r3, [r7, #4]
    a440:	68f8      	ldr	r0, [r7, #12]
    a442:	4619      	mov	r1, r3
    a444:	f7ff ffb0 	bl	a3a8 <USBHwEPRealize>

    // enable EP
    USBHwEPEnable(idx, TRUE);
    a448:	68f8      	ldr	r0, [r7, #12]
    a44a:	2101      	movs	r1, #1
    a44c:	f7ff ffce 	bl	a3ec <USBHwEPEnable>
}
    a450:	3710      	adds	r7, #16
    a452:	46bd      	mov	sp, r7
    a454:	bd80      	pop	{r7, pc}
    a456:	bf00      	nop

0000a458 <USBHwRegisterEPIntHandler>:
        
    @param [in] bEP             Endpoint number
    @param [in] pfnHandler      Callback function
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    a458:	b480      	push	{r7}
    a45a:	b085      	sub	sp, #20
    a45c:	af00      	add	r7, sp, #0
    a45e:	4603      	mov	r3, r0
    a460:	6039      	str	r1, [r7, #0]
    a462:	71fb      	strb	r3, [r7, #7]
    int idx;
    
    idx = EP2IDX(bEP);
    a464:	79fb      	ldrb	r3, [r7, #7]
    a466:	f003 030f 	and.w	r3, r3, #15
    a46a:	005b      	lsls	r3, r3, #1
    a46c:	79fa      	ldrb	r2, [r7, #7]
    a46e:	09d2      	lsrs	r2, r2, #7
    a470:	b2d2      	uxtb	r2, r2
    a472:	4313      	orrs	r3, r2
    a474:	60fb      	str	r3, [r7, #12]

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    a476:	68fb      	ldr	r3, [r7, #12]
    a478:	0fda      	lsrs	r2, r3, #31
    a47a:	4413      	add	r3, r2
    a47c:	105b      	asrs	r3, r3, #1
    a47e:	4619      	mov	r1, r3
    a480:	4a0b      	ldr	r2, [pc, #44]	; (a4b0 <USBHwRegisterEPIntHandler+0x58>)
    a482:	683b      	ldr	r3, [r7, #0]
    a484:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    a488:	490a      	ldr	r1, [pc, #40]	; (a4b4 <USBHwRegisterEPIntHandler+0x5c>)
    a48a:	4b0a      	ldr	r3, [pc, #40]	; (a4b4 <USBHwRegisterEPIntHandler+0x5c>)
    a48c:	681b      	ldr	r3, [r3, #0]
    a48e:	2001      	movs	r0, #1
    a490:	68fa      	ldr	r2, [r7, #12]
    a492:	fa00 f202 	lsl.w	r2, r0, r2
    a496:	4313      	orrs	r3, r2
    a498:	600b      	str	r3, [r1, #0]
    USBDevIntEn |= EP_SLOW;
    a49a:	4a07      	ldr	r2, [pc, #28]	; (a4b8 <USBHwRegisterEPIntHandler+0x60>)
    a49c:	4b06      	ldr	r3, [pc, #24]	; (a4b8 <USBHwRegisterEPIntHandler+0x60>)
    a49e:	681b      	ldr	r3, [r3, #0]
    a4a0:	f043 0304 	orr.w	r3, r3, #4
    a4a4:	6013      	str	r3, [r2, #0]
    
    DBG("Registered handler for EP 0x%x\n", bEP);
}
    a4a6:	3714      	adds	r7, #20
    a4a8:	46bd      	mov	sp, r7
    a4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4ae:	4770      	bx	lr
    a4b0:	10000aac 	.word	0x10000aac
    a4b4:	5000c234 	.word	0x5000c234
    a4b8:	5000c204 	.word	0x5000c204

0000a4bc <USBHwRegisterDevIntHandler>:
    Registers an device status callback
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    a4bc:	b480      	push	{r7}
    a4be:	b083      	sub	sp, #12
    a4c0:	af00      	add	r7, sp, #0
    a4c2:	6078      	str	r0, [r7, #4]
    _pfnDevIntHandler = pfnHandler;
    a4c4:	4a06      	ldr	r2, [pc, #24]	; (a4e0 <USBHwRegisterDevIntHandler+0x24>)
    a4c6:	687b      	ldr	r3, [r7, #4]
    a4c8:	6013      	str	r3, [r2, #0]
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    a4ca:	4a06      	ldr	r2, [pc, #24]	; (a4e4 <USBHwRegisterDevIntHandler+0x28>)
    a4cc:	4b05      	ldr	r3, [pc, #20]	; (a4e4 <USBHwRegisterDevIntHandler+0x28>)
    a4ce:	681b      	ldr	r3, [r3, #0]
    a4d0:	f043 0308 	orr.w	r3, r3, #8
    a4d4:	6013      	str	r3, [r2, #0]

    DBG("Registered handler for device status\n");
}
    a4d6:	370c      	adds	r7, #12
    a4d8:	46bd      	mov	sp, r7
    a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
    a4de:	4770      	bx	lr
    a4e0:	10000aa8 	.word	0x10000aa8
    a4e4:	5000c204 	.word	0x5000c204

0000a4e8 <USBHwSetAddress>:
    Sets the USB address.
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    a4e8:	b580      	push	{r7, lr}
    a4ea:	b082      	sub	sp, #8
    a4ec:	af00      	add	r7, sp, #0
    a4ee:	4603      	mov	r3, r0
    a4f0:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    a4f2:	79fb      	ldrb	r3, [r7, #7]
    a4f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a4f8:	b2db      	uxtb	r3, r3
    a4fa:	b29b      	uxth	r3, r3
    a4fc:	20d0      	movs	r0, #208	; 0xd0
    a4fe:	4619      	mov	r1, r3
    a500:	f7ff ff1a 	bl	a338 <USBHwCmdWrite>
}
    a504:	3708      	adds	r7, #8
    a506:	46bd      	mov	sp, r7
    a508:	bd80      	pop	{r7, pc}
    a50a:	bf00      	nop

0000a50c <USBHwConnect>:
    Connects or disconnects from the USB bus
        
    @param [in] fConnect    If TRUE, connect, otherwise disconnect
 */
void USBHwConnect(BOOL fConnect)
{
    a50c:	b580      	push	{r7, lr}
    a50e:	b082      	sub	sp, #8
    a510:	af00      	add	r7, sp, #0
    a512:	6078      	str	r0, [r7, #4]
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    a514:	687b      	ldr	r3, [r7, #4]
    a516:	2b00      	cmp	r3, #0
    a518:	bf14      	ite	ne
    a51a:	2301      	movne	r3, #1
    a51c:	2300      	moveq	r3, #0
    a51e:	b2db      	uxtb	r3, r3
    a520:	b29b      	uxth	r3, r3
    a522:	20fe      	movs	r0, #254	; 0xfe
    a524:	4619      	mov	r1, r3
    a526:	f7ff ff07 	bl	a338 <USBHwCmdWrite>
}
    a52a:	3708      	adds	r7, #8
    a52c:	46bd      	mov	sp, r7
    a52e:	bd80      	pop	{r7, pc}

0000a530 <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    a530:	b580      	push	{r7, lr}
    a532:	b082      	sub	sp, #8
    a534:	af00      	add	r7, sp, #0
    a536:	4603      	mov	r3, r0
    a538:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    a53a:	79fb      	ldrb	r3, [r7, #7]
    a53c:	b29b      	uxth	r3, r3
    a53e:	20f3      	movs	r0, #243	; 0xf3
    a540:	4619      	mov	r1, r3
    a542:	f7ff fef9 	bl	a338 <USBHwCmdWrite>
}
    a546:	3708      	adds	r7, #8
    a548:	46bd      	mov	sp, r7
    a54a:	bd80      	pop	{r7, pc}

0000a54c <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    a54c:	b580      	push	{r7, lr}
    a54e:	b084      	sub	sp, #16
    a550:	af00      	add	r7, sp, #0
    a552:	4603      	mov	r3, r0
    a554:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    a556:	79fb      	ldrb	r3, [r7, #7]
    a558:	f003 030f 	and.w	r3, r3, #15
    a55c:	005b      	lsls	r3, r3, #1
    a55e:	79fa      	ldrb	r2, [r7, #7]
    a560:	09d2      	lsrs	r2, r2, #7
    a562:	b2d2      	uxtb	r2, r2
    a564:	4313      	orrs	r3, r2
    a566:	60fb      	str	r3, [r7, #12]

    return USBHwCmdRead(CMD_EP_SELECT | idx);
    a568:	68fb      	ldr	r3, [r7, #12]
    a56a:	b2db      	uxtb	r3, r3
    a56c:	4618      	mov	r0, r3
    a56e:	f7ff fefd 	bl	a36c <USBHwCmdRead>
    a572:	4603      	mov	r3, r0
}
    a574:	4618      	mov	r0, r3
    a576:	3710      	adds	r7, #16
    a578:	46bd      	mov	sp, r7
    a57a:	bd80      	pop	{r7, pc}

0000a57c <USBHwEPStall>:
        
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    a57c:	b580      	push	{r7, lr}
    a57e:	b084      	sub	sp, #16
    a580:	af00      	add	r7, sp, #0
    a582:	4603      	mov	r3, r0
    a584:	6039      	str	r1, [r7, #0]
    a586:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    a588:	79fb      	ldrb	r3, [r7, #7]
    a58a:	f003 030f 	and.w	r3, r3, #15
    a58e:	005b      	lsls	r3, r3, #1
    a590:	79fa      	ldrb	r2, [r7, #7]
    a592:	09d2      	lsrs	r2, r2, #7
    a594:	b2d2      	uxtb	r2, r2
    a596:	4313      	orrs	r3, r2
    a598:	60fb      	str	r3, [r7, #12]

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    a59a:	68fb      	ldr	r3, [r7, #12]
    a59c:	b2db      	uxtb	r3, r3
    a59e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a5a2:	b2db      	uxtb	r3, r3
    a5a4:	b2da      	uxtb	r2, r3
    a5a6:	683b      	ldr	r3, [r7, #0]
    a5a8:	2b00      	cmp	r3, #0
    a5aa:	bf14      	ite	ne
    a5ac:	2301      	movne	r3, #1
    a5ae:	2300      	moveq	r3, #0
    a5b0:	b2db      	uxtb	r3, r3
    a5b2:	b29b      	uxth	r3, r3
    a5b4:	4610      	mov	r0, r2
    a5b6:	4619      	mov	r1, r3
    a5b8:	f7ff febe 	bl	a338 <USBHwCmdWrite>
}
    a5bc:	3710      	adds	r7, #16
    a5be:	46bd      	mov	sp, r7
    a5c0:	bd80      	pop	{r7, pc}
    a5c2:	bf00      	nop

0000a5c4 <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    a5c4:	b580      	push	{r7, lr}
    a5c6:	b086      	sub	sp, #24
    a5c8:	af00      	add	r7, sp, #0
    a5ca:	4603      	mov	r3, r0
    a5cc:	60b9      	str	r1, [r7, #8]
    a5ce:	607a      	str	r2, [r7, #4]
    a5d0:	73fb      	strb	r3, [r7, #15]
    U32 idx;
    
    idx = EP2IDX(bEP);
    a5d2:	7bfb      	ldrb	r3, [r7, #15]
    a5d4:	f003 030f 	and.w	r3, r3, #15
    a5d8:	005b      	lsls	r3, r3, #1
    a5da:	7bfa      	ldrb	r2, [r7, #15]
    a5dc:	09d2      	lsrs	r2, r2, #7
    a5de:	b2d2      	uxtb	r2, r2
    a5e0:	4313      	orrs	r3, r2
    a5e2:	617b      	str	r3, [r7, #20]
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    a5e4:	4a1b      	ldr	r2, [pc, #108]	; (a654 <USBHwEPWrite+0x90>)
    a5e6:	7bfb      	ldrb	r3, [r7, #15]
    a5e8:	f003 030f 	and.w	r3, r3, #15
    a5ec:	009b      	lsls	r3, r3, #2
    a5ee:	f043 0302 	orr.w	r3, r3, #2
    a5f2:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    a5f4:	4a18      	ldr	r2, [pc, #96]	; (a658 <USBHwEPWrite+0x94>)
    a5f6:	687b      	ldr	r3, [r7, #4]
    a5f8:	6013      	str	r3, [r2, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    a5fa:	e015      	b.n	a628 <USBHwEPWrite+0x64>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    a5fc:	4917      	ldr	r1, [pc, #92]	; (a65c <USBHwEPWrite+0x98>)
    a5fe:	68bb      	ldr	r3, [r7, #8]
    a600:	3303      	adds	r3, #3
    a602:	781b      	ldrb	r3, [r3, #0]
    a604:	061a      	lsls	r2, r3, #24
    a606:	68bb      	ldr	r3, [r7, #8]
    a608:	3302      	adds	r3, #2
    a60a:	781b      	ldrb	r3, [r3, #0]
    a60c:	041b      	lsls	r3, r3, #16
    a60e:	431a      	orrs	r2, r3
    a610:	68bb      	ldr	r3, [r7, #8]
    a612:	3301      	adds	r3, #1
    a614:	781b      	ldrb	r3, [r3, #0]
    a616:	021b      	lsls	r3, r3, #8
    a618:	4313      	orrs	r3, r2
    a61a:	68ba      	ldr	r2, [r7, #8]
    a61c:	7812      	ldrb	r2, [r2, #0]
    a61e:	4313      	orrs	r3, r2
    a620:	600b      	str	r3, [r1, #0]
        pbBuf += 4;
    a622:	68bb      	ldr	r3, [r7, #8]
    a624:	3304      	adds	r3, #4
    a626:	60bb      	str	r3, [r7, #8]
    
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
    a628:	4b0a      	ldr	r3, [pc, #40]	; (a654 <USBHwEPWrite+0x90>)
    a62a:	681b      	ldr	r3, [r3, #0]
    a62c:	f003 0302 	and.w	r3, r3, #2
    a630:	2b00      	cmp	r3, #0
    a632:	d1e3      	bne.n	a5fc <USBHwEPWrite+0x38>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
        pbBuf += 4;
    }

    USBCtrl = 0;
    a634:	4b07      	ldr	r3, [pc, #28]	; (a654 <USBHwEPWrite+0x90>)
    a636:	2200      	movs	r2, #0
    a638:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    a63a:	697b      	ldr	r3, [r7, #20]
    a63c:	b2db      	uxtb	r3, r3
    a63e:	4618      	mov	r0, r3
    a640:	f7ff fe62 	bl	a308 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    a644:	20fa      	movs	r0, #250	; 0xfa
    a646:	f7ff fe5f 	bl	a308 <USBHwCmd>
    
    return iLen;
    a64a:	687b      	ldr	r3, [r7, #4]
}
    a64c:	4618      	mov	r0, r3
    a64e:	3718      	adds	r7, #24
    a650:	46bd      	mov	sp, r7
    a652:	bd80      	pop	{r7, pc}
    a654:	5000c228 	.word	0x5000c228
    a658:	5000c224 	.word	0x5000c224
    a65c:	5000c21c 	.word	0x5000c21c

0000a660 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    a660:	b580      	push	{r7, lr}
    a662:	b088      	sub	sp, #32
    a664:	af00      	add	r7, sp, #0
    a666:	4603      	mov	r3, r0
    a668:	60b9      	str	r1, [r7, #8]
    a66a:	607a      	str	r2, [r7, #4]
    a66c:	73fb      	strb	r3, [r7, #15]
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    a66e:	7bfb      	ldrb	r3, [r7, #15]
    a670:	f003 030f 	and.w	r3, r3, #15
    a674:	005b      	lsls	r3, r3, #1
    a676:	7bfa      	ldrb	r2, [r7, #15]
    a678:	09d2      	lsrs	r2, r2, #7
    a67a:	b2d2      	uxtb	r2, r2
    a67c:	4313      	orrs	r3, r2
    a67e:	617b      	str	r3, [r7, #20]
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    a680:	4a27      	ldr	r2, [pc, #156]	; (a720 <USBHwEPRead+0xc0>)
    a682:	7bfb      	ldrb	r3, [r7, #15]
    a684:	f003 030f 	and.w	r3, r3, #15
    a688:	009b      	lsls	r3, r3, #2
    a68a:	f043 0301 	orr.w	r3, r3, #1
    a68e:	6013      	str	r3, [r2, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    a690:	4b24      	ldr	r3, [pc, #144]	; (a724 <USBHwEPRead+0xc4>)
    a692:	681b      	ldr	r3, [r3, #0]
    a694:	613b      	str	r3, [r7, #16]
    } while ((dwLen & PKT_RDY) == 0);
    a696:	693b      	ldr	r3, [r7, #16]
    a698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    a69c:	2b00      	cmp	r3, #0
    a69e:	d0f7      	beq.n	a690 <USBHwEPRead+0x30>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    a6a0:	693b      	ldr	r3, [r7, #16]
    a6a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a6a6:	2b00      	cmp	r3, #0
    a6a8:	d102      	bne.n	a6b0 <USBHwEPRead+0x50>
        return -1;
    a6aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a6ae:	e033      	b.n	a718 <USBHwEPRead+0xb8>
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    a6b0:	693b      	ldr	r3, [r7, #16]
    a6b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a6b6:	613b      	str	r3, [r7, #16]
    
    // get data
    dwData = 0;
    a6b8:	2300      	movs	r3, #0
    a6ba:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < dwLen; i++) {
    a6bc:	2300      	movs	r3, #0
    a6be:	61fb      	str	r3, [r7, #28]
    a6c0:	e01a      	b.n	a6f8 <USBHwEPRead+0x98>
        if ((i % 4) == 0) {
    a6c2:	69fb      	ldr	r3, [r7, #28]
    a6c4:	f003 0303 	and.w	r3, r3, #3
    a6c8:	2b00      	cmp	r3, #0
    a6ca:	d102      	bne.n	a6d2 <USBHwEPRead+0x72>
            dwData = USBRxData;
    a6cc:	4b16      	ldr	r3, [pc, #88]	; (a728 <USBHwEPRead+0xc8>)
    a6ce:	681b      	ldr	r3, [r3, #0]
    a6d0:	61bb      	str	r3, [r7, #24]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    a6d2:	68bb      	ldr	r3, [r7, #8]
    a6d4:	2b00      	cmp	r3, #0
    a6d6:	d009      	beq.n	a6ec <USBHwEPRead+0x8c>
    a6d8:	69fa      	ldr	r2, [r7, #28]
    a6da:	687b      	ldr	r3, [r7, #4]
    a6dc:	429a      	cmp	r2, r3
    a6de:	d205      	bcs.n	a6ec <USBHwEPRead+0x8c>
            pbBuf[i] = dwData & 0xFF;
    a6e0:	68ba      	ldr	r2, [r7, #8]
    a6e2:	69fb      	ldr	r3, [r7, #28]
    a6e4:	4413      	add	r3, r2
    a6e6:	69ba      	ldr	r2, [r7, #24]
    a6e8:	b2d2      	uxtb	r2, r2
    a6ea:	701a      	strb	r2, [r3, #0]
        }
        dwData >>= 8;
    a6ec:	69bb      	ldr	r3, [r7, #24]
    a6ee:	0a1b      	lsrs	r3, r3, #8
    a6f0:	61bb      	str	r3, [r7, #24]
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    a6f2:	69fb      	ldr	r3, [r7, #28]
    a6f4:	3301      	adds	r3, #1
    a6f6:	61fb      	str	r3, [r7, #28]
    a6f8:	69fa      	ldr	r2, [r7, #28]
    a6fa:	693b      	ldr	r3, [r7, #16]
    a6fc:	429a      	cmp	r2, r3
    a6fe:	d3e0      	bcc.n	a6c2 <USBHwEPRead+0x62>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    a700:	4b07      	ldr	r3, [pc, #28]	; (a720 <USBHwEPRead+0xc0>)
    a702:	2200      	movs	r2, #0
    a704:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    a706:	697b      	ldr	r3, [r7, #20]
    a708:	b2db      	uxtb	r3, r3
    a70a:	4618      	mov	r0, r3
    a70c:	f7ff fdfc 	bl	a308 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    a710:	20f2      	movs	r0, #242	; 0xf2
    a712:	f7ff fdf9 	bl	a308 <USBHwCmd>
    
    return dwLen;
    a716:	693b      	ldr	r3, [r7, #16]
}
    a718:	4618      	mov	r0, r3
    a71a:	3720      	adds	r7, #32
    a71c:	46bd      	mov	sp, r7
    a71e:	bd80      	pop	{r7, pc}
    a720:	5000c228 	.word	0x5000c228
    a724:	5000c220 	.word	0x5000c220
    a728:	5000c218 	.word	0x5000c218

0000a72c <USBHwConfigDevice>:
    'configured' bit is set in the device status register.
        
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    a72c:	b580      	push	{r7, lr}
    a72e:	b082      	sub	sp, #8
    a730:	af00      	add	r7, sp, #0
    a732:	6078      	str	r0, [r7, #4]
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    a734:	687b      	ldr	r3, [r7, #4]
    a736:	2b00      	cmp	r3, #0
    a738:	bf14      	ite	ne
    a73a:	2301      	movne	r3, #1
    a73c:	2300      	moveq	r3, #0
    a73e:	b2db      	uxtb	r3, r3
    a740:	b29b      	uxth	r3, r3
    a742:	20d8      	movs	r0, #216	; 0xd8
    a744:	4619      	mov	r1, r3
    a746:	f7ff fdf7 	bl	a338 <USBHwCmdWrite>
}
    a74a:	3708      	adds	r7, #8
    a74c:	46bd      	mov	sp, r7
    a74e:	bd80      	pop	{r7, pc}

0000a750 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    a750:	b580      	push	{r7, lr}
    a752:	b086      	sub	sp, #24
    a754:	af00      	add	r7, sp, #0

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    a756:	4b5b      	ldr	r3, [pc, #364]	; (a8c4 <USBHwISR+0x174>)
    a758:	681b      	ldr	r3, [r3, #0]
    a75a:	613b      	str	r3, [r7, #16]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    a75c:	693b      	ldr	r3, [r7, #16]
    a75e:	f003 0301 	and.w	r3, r3, #1
    a762:	2b00      	cmp	r3, #0
    a764:	d010      	beq.n	a788 <USBHwISR+0x38>
        // clear int
        USBDevIntClr = FRAME;
    a766:	4b58      	ldr	r3, [pc, #352]	; (a8c8 <USBHwISR+0x178>)
    a768:	2201      	movs	r2, #1
    a76a:	601a      	str	r2, [r3, #0]
        // call handler
        if (_pfnFrameHandler != NULL) {
    a76c:	4b57      	ldr	r3, [pc, #348]	; (a8cc <USBHwISR+0x17c>)
    a76e:	681b      	ldr	r3, [r3, #0]
    a770:	2b00      	cmp	r3, #0
    a772:	d009      	beq.n	a788 <USBHwISR+0x38>
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
    a774:	20f5      	movs	r0, #245	; 0xf5
    a776:	f7ff fdf9 	bl	a36c <USBHwCmdRead>
    a77a:	4603      	mov	r3, r0
    a77c:	81fb      	strh	r3, [r7, #14]
            _pfnFrameHandler(wFrame);
    a77e:	4b53      	ldr	r3, [pc, #332]	; (a8cc <USBHwISR+0x17c>)
    a780:	681b      	ldr	r3, [r3, #0]
    a782:	89fa      	ldrh	r2, [r7, #14]
    a784:	4610      	mov	r0, r2
    a786:	4798      	blx	r3
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    a788:	693b      	ldr	r3, [r7, #16]
    a78a:	f003 0308 	and.w	r3, r3, #8
    a78e:	2b00      	cmp	r3, #0
    a790:	d02b      	beq.n	a7ea <USBHwISR+0x9a>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    a792:	4b4d      	ldr	r3, [pc, #308]	; (a8c8 <USBHwISR+0x178>)
    a794:	2208      	movs	r2, #8
    a796:	601a      	str	r2, [r3, #0]
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
    a798:	20fe      	movs	r0, #254	; 0xfe
    a79a:	f7ff fde7 	bl	a36c <USBHwCmdRead>
    a79e:	4603      	mov	r3, r0
    a7a0:	737b      	strb	r3, [r7, #13]
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    a7a2:	7b7b      	ldrb	r3, [r7, #13]
    a7a4:	f003 031a 	and.w	r3, r3, #26
    a7a8:	2b00      	cmp	r3, #0
    a7aa:	d01e      	beq.n	a7ea <USBHwISR+0x9a>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
    a7ac:	7b7b      	ldrb	r3, [r7, #13]
    a7ae:	f003 0301 	and.w	r3, r3, #1
    a7b2:	2b00      	cmp	r3, #0
    a7b4:	bf14      	ite	ne
    a7b6:	2301      	movne	r3, #1
    a7b8:	2300      	moveq	r3, #0
    a7ba:	b2db      	uxtb	r3, r3
    a7bc:	b2da      	uxtb	r2, r3
    a7be:	7b7b      	ldrb	r3, [r7, #13]
    a7c0:	f003 0304 	and.w	r3, r3, #4
    a7c4:	b2db      	uxtb	r3, r3
    a7c6:	4313      	orrs	r3, r2
    a7c8:	b2da      	uxtb	r2, r3
    a7ca:	7b7b      	ldrb	r3, [r7, #13]
    a7cc:	f003 0310 	and.w	r3, r3, #16
    a7d0:	b2db      	uxtb	r3, r3
    a7d2:	4313      	orrs	r3, r2
    a7d4:	b2db      	uxtb	r3, r3
    a7d6:	733b      	strb	r3, [r7, #12]
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    a7d8:	4b3d      	ldr	r3, [pc, #244]	; (a8d0 <USBHwISR+0x180>)
    a7da:	681b      	ldr	r3, [r3, #0]
    a7dc:	2b00      	cmp	r3, #0
    a7de:	d004      	beq.n	a7ea <USBHwISR+0x9a>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    a7e0:	4b3b      	ldr	r3, [pc, #236]	; (a8d0 <USBHwISR+0x180>)
    a7e2:	681b      	ldr	r3, [r3, #0]
    a7e4:	7b3a      	ldrb	r2, [r7, #12]
    a7e6:	4610      	mov	r0, r2
    a7e8:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    a7ea:	693b      	ldr	r3, [r7, #16]
    a7ec:	f003 0304 	and.w	r3, r3, #4
    a7f0:	2b00      	cmp	r3, #0
    a7f2:	d063      	beq.n	a8bc <USBHwISR+0x16c>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    a7f4:	4b34      	ldr	r3, [pc, #208]	; (a8c8 <USBHwISR+0x178>)
    a7f6:	2204      	movs	r2, #4
    a7f8:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    a7fa:	2300      	movs	r3, #0
    a7fc:	617b      	str	r3, [r7, #20]
    a7fe:	e05a      	b.n	a8b6 <USBHwISR+0x166>
            dwIntBit = (1 << i);
    a800:	2201      	movs	r2, #1
    a802:	697b      	ldr	r3, [r7, #20]
    a804:	fa02 f303 	lsl.w	r3, r2, r3
    a808:	60bb      	str	r3, [r7, #8]
            if (USBEpIntSt & dwIntBit) {
    a80a:	4b32      	ldr	r3, [pc, #200]	; (a8d4 <USBHwISR+0x184>)
    a80c:	681a      	ldr	r2, [r3, #0]
    a80e:	68bb      	ldr	r3, [r7, #8]
    a810:	4013      	ands	r3, r2
    a812:	2b00      	cmp	r3, #0
    a814:	d04c      	beq.n	a8b0 <USBHwISR+0x160>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    a816:	4a30      	ldr	r2, [pc, #192]	; (a8d8 <USBHwISR+0x188>)
    a818:	68bb      	ldr	r3, [r7, #8]
    a81a:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    a81c:	2020      	movs	r0, #32
    a81e:	f7ff fd5b 	bl	a2d8 <Wait4DevInt>
                bEPStat = USBCmdData;
    a822:	4b2e      	ldr	r3, [pc, #184]	; (a8dc <USBHwISR+0x18c>)
    a824:	681b      	ldr	r3, [r3, #0]
    a826:	71fb      	strb	r3, [r7, #7]
                // convert EP pipe stat into something HW independent
                bStat = ((bEPStat & EPSTAT_FE) ? EP_STATUS_DATA : 0) |
    a828:	79fb      	ldrb	r3, [r7, #7]
    a82a:	f003 0301 	and.w	r3, r3, #1
    a82e:	2b00      	cmp	r3, #0
    a830:	bf14      	ite	ne
    a832:	2301      	movne	r3, #1
    a834:	2300      	moveq	r3, #0
    a836:	b2db      	uxtb	r3, r3
    a838:	b2da      	uxtb	r2, r3
    a83a:	79fb      	ldrb	r3, [r7, #7]
    a83c:	f003 0302 	and.w	r3, r3, #2
    a840:	b2db      	uxtb	r3, r3
    a842:	4313      	orrs	r3, r2
    a844:	b2da      	uxtb	r2, r3
    a846:	79fb      	ldrb	r3, [r7, #7]
    a848:	f003 0304 	and.w	r3, r3, #4
    a84c:	b2db      	uxtb	r3, r3
    a84e:	4313      	orrs	r3, r2
    a850:	b2da      	uxtb	r2, r3
    a852:	79fb      	ldrb	r3, [r7, #7]
    a854:	f003 0310 	and.w	r3, r3, #16
    a858:	b2db      	uxtb	r3, r3
    a85a:	4313      	orrs	r3, r2
    a85c:	b2da      	uxtb	r2, r3
    a85e:	79fb      	ldrb	r3, [r7, #7]
    a860:	f003 0308 	and.w	r3, r3, #8
    a864:	b2db      	uxtb	r3, r3
    a866:	4313      	orrs	r3, r2
    a868:	b2db      	uxtb	r3, r3
    a86a:	733b      	strb	r3, [r7, #12]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    a86c:	697b      	ldr	r3, [r7, #20]
    a86e:	0fda      	lsrs	r2, r3, #31
    a870:	4413      	add	r3, r2
    a872:	105b      	asrs	r3, r3, #1
    a874:	461a      	mov	r2, r3
    a876:	4b1a      	ldr	r3, [pc, #104]	; (a8e0 <USBHwISR+0x190>)
    a878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a87c:	2b00      	cmp	r3, #0
    a87e:	d017      	beq.n	a8b0 <USBHwISR+0x160>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    a880:	697b      	ldr	r3, [r7, #20]
    a882:	0fda      	lsrs	r2, r3, #31
    a884:	4413      	add	r3, r2
    a886:	105b      	asrs	r3, r3, #1
    a888:	461a      	mov	r2, r3
    a88a:	4b15      	ldr	r3, [pc, #84]	; (a8e0 <USBHwISR+0x190>)
    a88c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a890:	697a      	ldr	r2, [r7, #20]
    a892:	01d2      	lsls	r2, r2, #7
    a894:	b2d1      	uxtb	r1, r2
    a896:	697a      	ldr	r2, [r7, #20]
    a898:	1052      	asrs	r2, r2, #1
    a89a:	b2d2      	uxtb	r2, r2
    a89c:	f002 020f 	and.w	r2, r2, #15
    a8a0:	b2d2      	uxtb	r2, r2
    a8a2:	430a      	orrs	r2, r1
    a8a4:	b2d2      	uxtb	r2, r2
    a8a6:	b2d1      	uxtb	r1, r2
    a8a8:	7b3a      	ldrb	r2, [r7, #12]
    a8aa:	4608      	mov	r0, r1
    a8ac:	4611      	mov	r1, r2
    a8ae:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    a8b0:	697b      	ldr	r3, [r7, #20]
    a8b2:	3301      	adds	r3, #1
    a8b4:	617b      	str	r3, [r7, #20]
    a8b6:	697b      	ldr	r3, [r7, #20]
    a8b8:	2b1f      	cmp	r3, #31
    a8ba:	dda1      	ble.n	a800 <USBHwISR+0xb0>
            }
        }
    }
    
DEBUG_LED_OFF(9);       
}
    a8bc:	3718      	adds	r7, #24
    a8be:	46bd      	mov	sp, r7
    a8c0:	bd80      	pop	{r7, pc}
    a8c2:	bf00      	nop
    a8c4:	5000c200 	.word	0x5000c200
    a8c8:	5000c208 	.word	0x5000c208
    a8cc:	10000aec 	.word	0x10000aec
    a8d0:	10000aa8 	.word	0x10000aa8
    a8d4:	5000c230 	.word	0x5000c230
    a8d8:	5000c238 	.word	0x5000c238
    a8dc:	5000c214 	.word	0x5000c214
    a8e0:	10000aac 	.word	0x10000aac

0000a8e4 <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    a8e4:	b580      	push	{r7, lr}
    a8e6:	af00      	add	r7, sp, #0
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    a8e8:	4a2d      	ldr	r2, [pc, #180]	; (a9a0 <USBHwInit+0xbc>)
    a8ea:	4b2d      	ldr	r3, [pc, #180]	; (a9a0 <USBHwInit+0xbc>)
    a8ec:	681b      	ldr	r3, [r3, #0]
    a8ee:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    a8f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    a8f6:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    a8f8:	4a2a      	ldr	r2, [pc, #168]	; (a9a4 <USBHwInit+0xc0>)
    a8fa:	4b2a      	ldr	r3, [pc, #168]	; (a9a4 <USBHwInit+0xc0>)
    a8fc:	681b      	ldr	r3, [r3, #0]
    a8fe:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    a902:	f043 0310 	orr.w	r3, r3, #16
    a906:	6013      	str	r3, [r2, #0]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    a908:	4a26      	ldr	r2, [pc, #152]	; (a9a4 <USBHwInit+0xc0>)
    a90a:	4b26      	ldr	r3, [pc, #152]	; (a9a4 <USBHwInit+0xc0>)
    a90c:	681b      	ldr	r3, [r3, #0]
    a90e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    a912:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    a916:	6013      	str	r3, [r2, #0]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    a918:	4a23      	ldr	r2, [pc, #140]	; (a9a8 <USBHwInit+0xc4>)
    a91a:	4b23      	ldr	r3, [pc, #140]	; (a9a8 <USBHwInit+0xc4>)
    a91c:	681b      	ldr	r3, [r3, #0]
    a91e:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    a922:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    a926:	6013      	str	r3, [r2, #0]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    a928:	4a1f      	ldr	r2, [pc, #124]	; (a9a8 <USBHwInit+0xc4>)
    a92a:	4b1f      	ldr	r3, [pc, #124]	; (a9a8 <USBHwInit+0xc4>)
    a92c:	681b      	ldr	r3, [r3, #0]
    a92e:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    a932:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    a936:	6013      	str	r3, [r2, #0]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    a938:	4a1c      	ldr	r2, [pc, #112]	; (a9ac <USBHwInit+0xc8>)
    a93a:	4b1c      	ldr	r3, [pc, #112]	; (a9ac <USBHwInit+0xc8>)
    a93c:	681b      	ldr	r3, [r3, #0]
    a93e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a942:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    a944:	4a1a      	ldr	r2, [pc, #104]	; (a9b0 <USBHwInit+0xcc>)
    a946:	4b1a      	ldr	r3, [pc, #104]	; (a9b0 <USBHwInit+0xcc>)
    a948:	681b      	ldr	r3, [r3, #0]
    a94a:	f043 0312 	orr.w	r3, r3, #18
    a94e:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    a950:	bf00      	nop
    a952:	4b18      	ldr	r3, [pc, #96]	; (a9b4 <USBHwInit+0xd0>)
    a954:	681b      	ldr	r3, [r3, #0]
    a956:	f003 0302 	and.w	r3, r3, #2
    a95a:	2b00      	cmp	r3, #0
    a95c:	d0f9      	beq.n	a952 <USBHwInit+0x6e>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    a95e:	bf00      	nop
    a960:	4b14      	ldr	r3, [pc, #80]	; (a9b4 <USBHwInit+0xd0>)
    a962:	681b      	ldr	r3, [r3, #0]
    a964:	f003 0310 	and.w	r3, r3, #16
    a968:	2b00      	cmp	r3, #0
    a96a:	d0f9      	beq.n	a960 <USBHwInit+0x7c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    a96c:	4b12      	ldr	r3, [pc, #72]	; (a9b8 <USBHwInit+0xd4>)
    a96e:	2200      	movs	r2, #0
    a970:	601a      	str	r2, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    a972:	4b12      	ldr	r3, [pc, #72]	; (a9bc <USBHwInit+0xd8>)
    a974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a978:	601a      	str	r2, [r3, #0]
    USBDevIntPri = 0;
    a97a:	4b11      	ldr	r3, [pc, #68]	; (a9c0 <USBHwInit+0xdc>)
    a97c:	2200      	movs	r2, #0
    a97e:	601a      	str	r2, [r3, #0]

    USBEpIntEn = 0;
    a980:	4b10      	ldr	r3, [pc, #64]	; (a9c4 <USBHwInit+0xe0>)
    a982:	2200      	movs	r2, #0
    a984:	601a      	str	r2, [r3, #0]
    USBEpIntClr = 0xFFFFFFFF;
    a986:	4b10      	ldr	r3, [pc, #64]	; (a9c8 <USBHwInit+0xe4>)
    a988:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a98c:	601a      	str	r2, [r3, #0]
    USBEpIntPri = 0;
    a98e:	4b0f      	ldr	r3, [pc, #60]	; (a9cc <USBHwInit+0xe8>)
    a990:	2200      	movs	r2, #0
    a992:	601a      	str	r2, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    a994:	2000      	movs	r0, #0
    a996:	f7ff fdcb 	bl	a530 <USBHwNakIntEnable>
    // init debug leds
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
    a99a:	2301      	movs	r3, #1
}
    a99c:	4618      	mov	r0, r3
    a99e:	bd80      	pop	{r7, pc}
    a9a0:	4002c010 	.word	0x4002c010
    a9a4:	4002c00c 	.word	0x4002c00c
    a9a8:	4002c004 	.word	0x4002c004
    a9ac:	400fc0c4 	.word	0x400fc0c4
    a9b0:	5000cff4 	.word	0x5000cff4
    a9b4:	5000cff8 	.word	0x5000cff8
    a9b8:	5000c204 	.word	0x5000c204
    a9bc:	5000c208 	.word	0x5000c208
    a9c0:	5000c22c 	.word	0x5000c22c
    a9c4:	5000c234 	.word	0x5000c234
    a9c8:	5000c238 	.word	0x5000c238
    a9cc:	5000c240 	.word	0x5000c240

0000a9d0 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    a9d0:	b480      	push	{r7}
    a9d2:	b089      	sub	sp, #36	; 0x24
    a9d4:	af00      	add	r7, sp, #0
    a9d6:	60f8      	str	r0, [r7, #12]
    a9d8:	60b9      	str	r1, [r7, #8]
    a9da:	607a      	str	r2, [r7, #4]
    a9dc:	603b      	str	r3, [r7, #0]
	if(bMsVendorIndex == 0)	{
    a9de:	4b2d      	ldr	r3, [pc, #180]	; (aa94 <USBFilterOsVendorMessage+0xc4>)
    a9e0:	781b      	ldrb	r3, [r3, #0]
    a9e2:	2b00      	cmp	r3, #0
    a9e4:	d101      	bne.n	a9ea <USBFilterOsVendorMessage+0x1a>
		// Feature is disabled.
		return FALSE;
    a9e6:	2300      	movs	r3, #0
    a9e8:	e04e      	b.n	aa88 <USBFilterOsVendorMessage+0xb8>
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    a9ea:	68fb      	ldr	r3, [r7, #12]
    a9ec:	785a      	ldrb	r2, [r3, #1]
    a9ee:	4b29      	ldr	r3, [pc, #164]	; (aa94 <USBFilterOsVendorMessage+0xc4>)
    a9f0:	781b      	ldrb	r3, [r3, #0]
    a9f2:	429a      	cmp	r2, r3
    a9f4:	d147      	bne.n	aa86 <USBFilterOsVendorMessage+0xb6>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    a9f6:	68bb      	ldr	r3, [r7, #8]
    a9f8:	2200      	movs	r2, #0
    a9fa:	601a      	str	r2, [r3, #0]
	
		int iRequestLength = pSetup->wLength;
    a9fc:	68fb      	ldr	r3, [r7, #12]
    a9fe:	88db      	ldrh	r3, [r3, #6]
    aa00:	61fb      	str	r3, [r7, #28]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
    aa02:	68fb      	ldr	r3, [r7, #12]
    aa04:	885b      	ldrh	r3, [r3, #2]
    aa06:	76fb      	strb	r3, [r7, #27]
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    aa08:	68fb      	ldr	r3, [r7, #12]
    aa0a:	885b      	ldrh	r3, [r3, #2]
    aa0c:	0a1b      	lsrs	r3, r3, #8
    aa0e:	b29b      	uxth	r3, r3
    aa10:	76bb      	strb	r3, [r7, #26]
	
		switch (pSetup->wIndex) {
    aa12:	68fb      	ldr	r3, [r7, #12]
    aa14:	889b      	ldrh	r3, [r3, #4]
    aa16:	2b04      	cmp	r3, #4
    aa18:	d002      	beq.n	aa20 <USBFilterOsVendorMessage+0x50>
    aa1a:	2b05      	cmp	r3, #5
    aa1c:	d007      	beq.n	aa2e <USBFilterOsVendorMessage+0x5e>
    aa1e:	e00d      	b.n	aa3c <USBFilterOsVendorMessage+0x6c>
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    aa20:	683b      	ldr	r3, [r7, #0]
    aa22:	4a1d      	ldr	r2, [pc, #116]	; (aa98 <USBFilterOsVendorMessage+0xc8>)
    aa24:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    aa26:	687b      	ldr	r3, [r7, #4]
    aa28:	2228      	movs	r2, #40	; 0x28
    aa2a:	601a      	str	r2, [r3, #0]
			break;
    aa2c:	e008      	b.n	aa40 <USBFilterOsVendorMessage+0x70>
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    aa2e:	683b      	ldr	r3, [r7, #0]
    aa30:	4a1a      	ldr	r2, [pc, #104]	; (aa9c <USBFilterOsVendorMessage+0xcc>)
    aa32:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    aa34:	687b      	ldr	r3, [r7, #4]
    aa36:	2292      	movs	r2, #146	; 0x92
    aa38:	601a      	str	r2, [r3, #0]
			break;
    aa3a:	e001      	b.n	aa40 <USBFilterOsVendorMessage+0x70>

		default:
			return TRUE;
    aa3c:	2301      	movs	r3, #1
    aa3e:	e023      	b.n	aa88 <USBFilterOsVendorMessage+0xb8>
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    aa40:	7ebb      	ldrb	r3, [r7, #26]
    aa42:	041b      	lsls	r3, r3, #16
    aa44:	617b      	str	r3, [r7, #20]
		if (*piLen < iPageOffset) {
    aa46:	687b      	ldr	r3, [r7, #4]
    aa48:	681a      	ldr	r2, [r3, #0]
    aa4a:	697b      	ldr	r3, [r7, #20]
    aa4c:	429a      	cmp	r2, r3
    aa4e:	da01      	bge.n	aa54 <USBFilterOsVendorMessage+0x84>
			// Not enough data for the requested offset.
			return TRUE;
    aa50:	2301      	movs	r3, #1
    aa52:	e019      	b.n	aa88 <USBFilterOsVendorMessage+0xb8>
		}
		*ppbData += iPageOffset;
    aa54:	683b      	ldr	r3, [r7, #0]
    aa56:	681a      	ldr	r2, [r3, #0]
    aa58:	697b      	ldr	r3, [r7, #20]
    aa5a:	441a      	add	r2, r3
    aa5c:	683b      	ldr	r3, [r7, #0]
    aa5e:	601a      	str	r2, [r3, #0]
		*piLen -= iPageOffset;
    aa60:	687b      	ldr	r3, [r7, #4]
    aa62:	681a      	ldr	r2, [r3, #0]
    aa64:	697b      	ldr	r3, [r7, #20]
    aa66:	1ad2      	subs	r2, r2, r3
    aa68:	687b      	ldr	r3, [r7, #4]
    aa6a:	601a      	str	r2, [r3, #0]
		
		if (*piLen > iRequestLength) {
    aa6c:	687b      	ldr	r3, [r7, #4]
    aa6e:	681a      	ldr	r2, [r3, #0]
    aa70:	69fb      	ldr	r3, [r7, #28]
    aa72:	429a      	cmp	r2, r3
    aa74:	dd02      	ble.n	aa7c <USBFilterOsVendorMessage+0xac>
			// Clip data longer than the requested length
			*piLen = iRequestLength;
    aa76:	687b      	ldr	r3, [r7, #4]
    aa78:	69fa      	ldr	r2, [r7, #28]
    aa7a:	601a      	str	r2, [r3, #0]
		}
	
		*pfSuccess = TRUE;
    aa7c:	68bb      	ldr	r3, [r7, #8]
    aa7e:	2201      	movs	r2, #1
    aa80:	601a      	str	r2, [r3, #0]
		return TRUE;
    aa82:	2301      	movs	r3, #1
    aa84:	e000      	b.n	aa88 <USBFilterOsVendorMessage+0xb8>
	}
	
	// These are not the requests you are looking for
	return FALSE;
    aa86:	2300      	movs	r3, #0
}
    aa88:	4618      	mov	r0, r3
    aa8a:	3724      	adds	r7, #36	; 0x24
    aa8c:	46bd      	mov	sp, r7
    aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa92:	4770      	bx	lr
    aa94:	10000afc 	.word	0x10000afc
    aa98:	0000c3a4 	.word	0x0000c3a4
    aa9c:	100008cc 	.word	0x100008cc

0000aaa0 <USBRegisterWinusbInterface>:
	@param [in]		pcInterfaceGuid			ASCII String GUID in curly braces
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
    aaa0:	b480      	push	{r7}
    aaa2:	b087      	sub	sp, #28
    aaa4:	af00      	add	r7, sp, #0
    aaa6:	4603      	mov	r3, r0
    aaa8:	6039      	str	r1, [r7, #0]
    aaaa:	71fb      	strb	r3, [r7, #7]
	bMsVendorIndex = bVendorRequestIndex;
    aaac:	4a18      	ldr	r2, [pc, #96]	; (ab10 <USBRegisterWinusbInterface+0x70>)
    aaae:	79fb      	ldrb	r3, [r7, #7]
    aab0:	7013      	strb	r3, [r2, #0]
	
	if(!pcInterfaceGuid) {
    aab2:	683b      	ldr	r3, [r7, #0]
    aab4:	2b00      	cmp	r3, #0
    aab6:	d100      	bne.n	aaba <USBRegisterWinusbInterface+0x1a>
		return; // Trust that caller is actually specifying this with nonzero RequestIndex.
    aab8:	e024      	b.n	ab04 <USBRegisterWinusbInterface+0x64>
	}
	
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
    aaba:	4b16      	ldr	r3, [pc, #88]	; (ab14 <USBRegisterWinusbInterface+0x74>)
    aabc:	617b      	str	r3, [r7, #20]
	const int ciMaxLength = 38;
    aabe:	2326      	movs	r3, #38	; 0x26
    aac0:	60fb      	str	r3, [r7, #12]
	
	for(int i = 0; i < ciMaxLength; i++) {
    aac2:	2300      	movs	r3, #0
    aac4:	613b      	str	r3, [r7, #16]
    aac6:	e012      	b.n	aaee <USBRegisterWinusbInterface+0x4e>
		if(!pcInterfaceGuid[i]) break;
    aac8:	693b      	ldr	r3, [r7, #16]
    aaca:	683a      	ldr	r2, [r7, #0]
    aacc:	4413      	add	r3, r2
    aace:	781b      	ldrb	r3, [r3, #0]
    aad0:	2b00      	cmp	r3, #0
    aad2:	d100      	bne.n	aad6 <USBRegisterWinusbInterface+0x36>
    aad4:	e00f      	b.n	aaf6 <USBRegisterWinusbInterface+0x56>
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    aad6:	693b      	ldr	r3, [r7, #16]
    aad8:	683a      	ldr	r2, [r7, #0]
    aada:	4413      	add	r3, r2
    aadc:	781a      	ldrb	r2, [r3, #0]
    aade:	697b      	ldr	r3, [r7, #20]
    aae0:	701a      	strb	r2, [r3, #0]
		pbWriteCursor += 2;
    aae2:	697b      	ldr	r3, [r7, #20]
    aae4:	3302      	adds	r3, #2
    aae6:	617b      	str	r3, [r7, #20]
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    aae8:	693b      	ldr	r3, [r7, #16]
    aaea:	3301      	adds	r3, #1
    aaec:	613b      	str	r3, [r7, #16]
    aaee:	693a      	ldr	r2, [r7, #16]
    aaf0:	68fb      	ldr	r3, [r7, #12]
    aaf2:	429a      	cmp	r2, r3
    aaf4:	dbe8      	blt.n	aac8 <USBRegisterWinusbInterface+0x28>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    aaf6:	697b      	ldr	r3, [r7, #20]
    aaf8:	2200      	movs	r2, #0
    aafa:	701a      	strb	r2, [r3, #0]
	pbWriteCursor[2] = 0;
    aafc:	697b      	ldr	r3, [r7, #20]
    aafe:	3302      	adds	r3, #2
    ab00:	2200      	movs	r2, #0
    ab02:	701a      	strb	r2, [r3, #0]
	
}
    ab04:	371c      	adds	r7, #28
    ab06:	46bd      	mov	sp, r7
    ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab0c:	4770      	bx	lr
    ab0e:	bf00      	nop
    ab10:	10000afc 	.word	0x10000afc
    ab14:	1000090e 	.word	0x1000090e

0000ab18 <USBGetOsStringDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
    ab18:	b480      	push	{r7}
    ab1a:	b083      	sub	sp, #12
    ab1c:	af00      	add	r7, sp, #0
    ab1e:	6078      	str	r0, [r7, #4]
    ab20:	6039      	str	r1, [r7, #0]
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    ab22:	4b08      	ldr	r3, [pc, #32]	; (ab44 <USBGetOsStringDescriptor+0x2c>)
    ab24:	781a      	ldrb	r2, [r3, #0]
    ab26:	4b08      	ldr	r3, [pc, #32]	; (ab48 <USBGetOsStringDescriptor+0x30>)
    ab28:	741a      	strb	r2, [r3, #16]
	
	*ppbData = abOsStringDescriptor;
    ab2a:	683b      	ldr	r3, [r7, #0]
    ab2c:	4a06      	ldr	r2, [pc, #24]	; (ab48 <USBGetOsStringDescriptor+0x30>)
    ab2e:	601a      	str	r2, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    ab30:	687b      	ldr	r3, [r7, #4]
    ab32:	2212      	movs	r2, #18
    ab34:	601a      	str	r2, [r3, #0]
	return TRUE;
    ab36:	2301      	movs	r3, #1
}
    ab38:	4618      	mov	r0, r3
    ab3a:	370c      	adds	r7, #12
    ab3c:	46bd      	mov	sp, r7
    ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab42:	4770      	bx	lr
    ab44:	10000afc 	.word	0x10000afc
    ab48:	100008b8 	.word	0x100008b8

0000ab4c <USBRegisterDescriptors>:
	for the device.

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(const U8 *pabDescriptors)
{
    ab4c:	b480      	push	{r7}
    ab4e:	b083      	sub	sp, #12
    ab50:	af00      	add	r7, sp, #0
    ab52:	6078      	str	r0, [r7, #4]
	pabDescrip = pabDescriptors;
    ab54:	4a03      	ldr	r2, [pc, #12]	; (ab64 <USBRegisterDescriptors+0x18>)
    ab56:	687b      	ldr	r3, [r7, #4]
    ab58:	6013      	str	r3, [r2, #0]
}
    ab5a:	370c      	adds	r7, #12
    ab5c:	46bd      	mov	sp, r7
    ab5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab62:	4770      	bx	lr
    ab64:	10000af8 	.word	0x10000af8

0000ab68 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    ab68:	b580      	push	{r7, lr}
    ab6a:	b088      	sub	sp, #32
    ab6c:	af00      	add	r7, sp, #0
    ab6e:	60ba      	str	r2, [r7, #8]
    ab70:	607b      	str	r3, [r7, #4]
    ab72:	4603      	mov	r3, r0
    ab74:	81fb      	strh	r3, [r7, #14]
    ab76:	460b      	mov	r3, r1
    ab78:	81bb      	strh	r3, [r7, #12]
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    ab7a:	89fb      	ldrh	r3, [r7, #14]
    ab7c:	0a1b      	lsrs	r3, r3, #8
    ab7e:	b29b      	uxth	r3, r3
    ab80:	75fb      	strb	r3, [r7, #23]
	bIndex = GET_DESC_INDEX(wTypeIndex);
    ab82:	89fb      	ldrh	r3, [r7, #14]
    ab84:	75bb      	strb	r3, [r7, #22]
	
    if (bType == DESC_STRING &&
    ab86:	7dfb      	ldrb	r3, [r7, #23]
    ab88:	2b03      	cmp	r3, #3
    ab8a:	d10b      	bne.n	aba4 <USBGetDescriptor+0x3c>
    ab8c:	7dbb      	ldrb	r3, [r7, #22]
    ab8e:	2bee      	cmp	r3, #238	; 0xee
    ab90:	d108      	bne.n	aba4 <USBGetDescriptor+0x3c>
        bIndex == DESC_STRING_OS) {
        
        if (USBGetOsStringDescriptor(piLen, ppbData)) {
    ab92:	68b8      	ldr	r0, [r7, #8]
    ab94:	6879      	ldr	r1, [r7, #4]
    ab96:	f7ff ffbf 	bl	ab18 <USBGetOsStringDescriptor>
    ab9a:	4603      	mov	r3, r0
    ab9c:	2b00      	cmp	r3, #0
    ab9e:	d001      	beq.n	aba4 <USBGetDescriptor+0x3c>
            
            return TRUE;
    aba0:	2301      	movs	r3, #1
    aba2:	e036      	b.n	ac12 <USBGetDescriptor+0xaa>
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    aba4:	4b1d      	ldr	r3, [pc, #116]	; (ac1c <USBGetDescriptor+0xb4>)
    aba6:	681b      	ldr	r3, [r3, #0]
    aba8:	61fb      	str	r3, [r7, #28]
	iCurIndex = 0;
    abaa:	2300      	movs	r3, #0
    abac:	61bb      	str	r3, [r7, #24]
	
	while (pab[DESC_bLength] != 0) {
    abae:	e02b      	b.n	ac08 <USBGetDescriptor+0xa0>
		if (pab[DESC_bDescriptorType] == bType) {
    abb0:	69fb      	ldr	r3, [r7, #28]
    abb2:	3301      	adds	r3, #1
    abb4:	781b      	ldrb	r3, [r3, #0]
    abb6:	7dfa      	ldrb	r2, [r7, #23]
    abb8:	429a      	cmp	r2, r3
    abba:	d11f      	bne.n	abfc <USBGetDescriptor+0x94>
			if (iCurIndex == bIndex) {
    abbc:	7dba      	ldrb	r2, [r7, #22]
    abbe:	69bb      	ldr	r3, [r7, #24]
    abc0:	429a      	cmp	r2, r3
    abc2:	d118      	bne.n	abf6 <USBGetDescriptor+0x8e>
				// set data pointer
				*ppbData = pab;
    abc4:	687b      	ldr	r3, [r7, #4]
    abc6:	69fa      	ldr	r2, [r7, #28]
    abc8:	601a      	str	r2, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    abca:	7dfb      	ldrb	r3, [r7, #23]
    abcc:	2b02      	cmp	r3, #2
    abce:	d10b      	bne.n	abe8 <USBGetDescriptor+0x80>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    abd0:	69fb      	ldr	r3, [r7, #28]
    abd2:	3302      	adds	r3, #2
    abd4:	781b      	ldrb	r3, [r3, #0]
    abd6:	461a      	mov	r2, r3
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    abd8:	69fb      	ldr	r3, [r7, #28]
    abda:	3303      	adds	r3, #3
    abdc:	781b      	ldrb	r3, [r3, #0]
    abde:	021b      	lsls	r3, r3, #8
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    abe0:	431a      	orrs	r2, r3
    abe2:	68bb      	ldr	r3, [r7, #8]
    abe4:	601a      	str	r2, [r3, #0]
    abe6:	e004      	b.n	abf2 <USBGetDescriptor+0x8a>
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    abe8:	69fb      	ldr	r3, [r7, #28]
    abea:	781b      	ldrb	r3, [r3, #0]
    abec:	461a      	mov	r2, r3
    abee:	68bb      	ldr	r3, [r7, #8]
    abf0:	601a      	str	r2, [r3, #0]
				}
				return TRUE;
    abf2:	2301      	movs	r3, #1
    abf4:	e00d      	b.n	ac12 <USBGetDescriptor+0xaa>
			}
			iCurIndex++;
    abf6:	69bb      	ldr	r3, [r7, #24]
    abf8:	3301      	adds	r3, #1
    abfa:	61bb      	str	r3, [r7, #24]
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    abfc:	69fb      	ldr	r3, [r7, #28]
    abfe:	781b      	ldrb	r3, [r3, #0]
    ac00:	461a      	mov	r2, r3
    ac02:	69fb      	ldr	r3, [r7, #28]
    ac04:	4413      	add	r3, r2
    ac06:	61fb      	str	r3, [r7, #28]
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    ac08:	69fb      	ldr	r3, [r7, #28]
    ac0a:	781b      	ldrb	r3, [r3, #0]
    ac0c:	2b00      	cmp	r3, #0
    ac0e:	d1cf      	bne.n	abb0 <USBGetDescriptor+0x48>
		// skip to next descriptor
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
    ac10:	2300      	movs	r3, #0
}
    ac12:	4618      	mov	r0, r3
    ac14:	3720      	adds	r7, #32
    ac16:	46bd      	mov	sp, r7
    ac18:	bd80      	pop	{r7, pc}
    ac1a:	bf00      	nop
    ac1c:	10000af8 	.word	0x10000af8

0000ac20 <USBSetConfiguration>:
	@todo function always returns TRUE, add stricter checking?
	
	@return TRUE if successfully configured, FALSE otherwise
 */
static BOOL USBSetConfiguration(U8 bConfigIndex, U8 bAltSetting)
{
    ac20:	b580      	push	{r7, lr}
    ac22:	b086      	sub	sp, #24
    ac24:	af00      	add	r7, sp, #0
    ac26:	4603      	mov	r3, r0
    ac28:	460a      	mov	r2, r1
    ac2a:	71fb      	strb	r3, [r7, #7]
    ac2c:	4613      	mov	r3, r2
    ac2e:	71bb      	strb	r3, [r7, #6]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    ac30:	79fb      	ldrb	r3, [r7, #7]
    ac32:	2b00      	cmp	r3, #0
    ac34:	d103      	bne.n	ac3e <USBSetConfiguration+0x1e>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    ac36:	2000      	movs	r0, #0
    ac38:	f7ff fd78 	bl	a72c <USBHwConfigDevice>
    ac3c:	e045      	b.n	acca <USBSetConfiguration+0xaa>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    ac3e:	4b25      	ldr	r3, [pc, #148]	; (acd4 <USBSetConfiguration+0xb4>)
    ac40:	681b      	ldr	r3, [r3, #0]
    ac42:	617b      	str	r3, [r7, #20]
		bCurConfig = 0xFF;
    ac44:	23ff      	movs	r3, #255	; 0xff
    ac46:	74fb      	strb	r3, [r7, #19]
		bCurAltSetting = 0xFF;
    ac48:	23ff      	movs	r3, #255	; 0xff
    ac4a:	74bb      	strb	r3, [r7, #18]

		while (pab[DESC_bLength] != 0) {
    ac4c:	e036      	b.n	acbc <USBSetConfiguration+0x9c>

			switch (pab[DESC_bDescriptorType]) {
    ac4e:	697b      	ldr	r3, [r7, #20]
    ac50:	3301      	adds	r3, #1
    ac52:	781b      	ldrb	r3, [r3, #0]
    ac54:	2b04      	cmp	r3, #4
    ac56:	d008      	beq.n	ac6a <USBSetConfiguration+0x4a>
    ac58:	2b05      	cmp	r3, #5
    ac5a:	d00a      	beq.n	ac72 <USBSetConfiguration+0x52>
    ac5c:	2b02      	cmp	r3, #2
    ac5e:	d000      	beq.n	ac62 <USBSetConfiguration+0x42>
					USBHwEPConfig(bEP, wMaxPktSize);
				}
				break;

			default:
				break;
    ac60:	e026      	b.n	acb0 <USBSetConfiguration+0x90>

			switch (pab[DESC_bDescriptorType]) {

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    ac62:	697b      	ldr	r3, [r7, #20]
    ac64:	795b      	ldrb	r3, [r3, #5]
    ac66:	74fb      	strb	r3, [r7, #19]
				break;
    ac68:	e022      	b.n	acb0 <USBSetConfiguration+0x90>

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    ac6a:	697b      	ldr	r3, [r7, #20]
    ac6c:	78db      	ldrb	r3, [r3, #3]
    ac6e:	74bb      	strb	r3, [r7, #18]
				break;
    ac70:	e01e      	b.n	acb0 <USBSetConfiguration+0x90>

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    ac72:	7cfa      	ldrb	r2, [r7, #19]
    ac74:	79fb      	ldrb	r3, [r7, #7]
    ac76:	429a      	cmp	r2, r3
    ac78:	d119      	bne.n	acae <USBSetConfiguration+0x8e>
    ac7a:	7cba      	ldrb	r2, [r7, #18]
    ac7c:	79bb      	ldrb	r3, [r7, #6]
    ac7e:	429a      	cmp	r2, r3
    ac80:	d115      	bne.n	acae <USBSetConfiguration+0x8e>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
    ac82:	697b      	ldr	r3, [r7, #20]
    ac84:	789b      	ldrb	r3, [r3, #2]
    ac86:	747b      	strb	r3, [r7, #17]
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    ac88:	697b      	ldr	r3, [r7, #20]
    ac8a:	3304      	adds	r3, #4
    ac8c:	781b      	ldrb	r3, [r3, #0]
    ac8e:	b29a      	uxth	r2, r3
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    ac90:	697b      	ldr	r3, [r7, #20]
    ac92:	3305      	adds	r3, #5
    ac94:	781b      	ldrb	r3, [r3, #0]
    ac96:	021b      	lsls	r3, r3, #8
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    ac98:	b29b      	uxth	r3, r3
    ac9a:	4313      	orrs	r3, r2
    ac9c:	b29b      	uxth	r3, r3
    ac9e:	81fb      	strh	r3, [r7, #14]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    aca0:	7c7a      	ldrb	r2, [r7, #17]
    aca2:	89fb      	ldrh	r3, [r7, #14]
    aca4:	4610      	mov	r0, r2
    aca6:	4619      	mov	r1, r3
    aca8:	f7ff fbb8 	bl	a41c <USBHwEPConfig>
				}
				break;
    acac:	e7ff      	b.n	acae <USBSetConfiguration+0x8e>
    acae:	bf00      	nop

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    acb0:	697b      	ldr	r3, [r7, #20]
    acb2:	781b      	ldrb	r3, [r3, #0]
    acb4:	461a      	mov	r2, r3
    acb6:	697b      	ldr	r3, [r7, #20]
    acb8:	4413      	add	r3, r2
    acba:	617b      	str	r3, [r7, #20]
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    acbc:	697b      	ldr	r3, [r7, #20]
    acbe:	781b      	ldrb	r3, [r3, #0]
    acc0:	2b00      	cmp	r3, #0
    acc2:	d1c4      	bne.n	ac4e <USBSetConfiguration+0x2e>
			// skip to next descriptor
			pab += pab[DESC_bLength];
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    acc4:	2001      	movs	r0, #1
    acc6:	f7ff fd31 	bl	a72c <USBHwConfigDevice>
	}

	return TRUE;
    acca:	2301      	movs	r3, #1
}
    accc:	4618      	mov	r0, r3
    acce:	3718      	adds	r7, #24
    acd0:	46bd      	mov	sp, r7
    acd2:	bd80      	pop	{r7, pc}
    acd4:	10000af8 	.word	0x10000af8

0000acd8 <HandleStdDeviceReq>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    acd8:	b580      	push	{r7, lr}
    acda:	b086      	sub	sp, #24
    acdc:	af00      	add	r7, sp, #0
    acde:	60f8      	str	r0, [r7, #12]
    ace0:	60b9      	str	r1, [r7, #8]
    ace2:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    ace4:	687b      	ldr	r3, [r7, #4]
    ace6:	681b      	ldr	r3, [r3, #0]
    ace8:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    acea:	68fb      	ldr	r3, [r7, #12]
    acec:	785b      	ldrb	r3, [r3, #1]
    acee:	2b09      	cmp	r3, #9
    acf0:	d852      	bhi.n	ad98 <HandleStdDeviceReq+0xc0>
    acf2:	a201      	add	r2, pc, #4	; (adr r2, acf8 <HandleStdDeviceReq+0x20>)
    acf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    acf8:	0000ad21 	.word	0x0000ad21
    acfc:	0000ad91 	.word	0x0000ad91
    ad00:	0000ad99 	.word	0x0000ad99
    ad04:	0000ad91 	.word	0x0000ad91
    ad08:	0000ad99 	.word	0x0000ad99
    ad0c:	0000ad37 	.word	0x0000ad37
    ad10:	0000ad45 	.word	0x0000ad45
    ad14:	0000ad95 	.word	0x0000ad95
    ad18:	0000ad5d 	.word	0x0000ad5d
    ad1c:	0000ad6d 	.word	0x0000ad6d
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    ad20:	697b      	ldr	r3, [r7, #20]
    ad22:	2200      	movs	r2, #0
    ad24:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    ad26:	697b      	ldr	r3, [r7, #20]
    ad28:	3301      	adds	r3, #1
    ad2a:	2200      	movs	r2, #0
    ad2c:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    ad2e:	68bb      	ldr	r3, [r7, #8]
    ad30:	2202      	movs	r2, #2
    ad32:	601a      	str	r2, [r3, #0]
		break;
    ad34:	e032      	b.n	ad9c <HandleStdDeviceReq+0xc4>
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    ad36:	68fb      	ldr	r3, [r7, #12]
    ad38:	885b      	ldrh	r3, [r3, #2]
    ad3a:	b2db      	uxtb	r3, r3
    ad3c:	4618      	mov	r0, r3
    ad3e:	f7ff fbd3 	bl	a4e8 <USBHwSetAddress>
		break;
    ad42:	e02b      	b.n	ad9c <HandleStdDeviceReq+0xc4>

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    ad44:	68fb      	ldr	r3, [r7, #12]
    ad46:	885a      	ldrh	r2, [r3, #2]
    ad48:	68fb      	ldr	r3, [r7, #12]
    ad4a:	889b      	ldrh	r3, [r3, #4]
    ad4c:	4610      	mov	r0, r2
    ad4e:	4619      	mov	r1, r3
    ad50:	68ba      	ldr	r2, [r7, #8]
    ad52:	687b      	ldr	r3, [r7, #4]
    ad54:	f7ff ff08 	bl	ab68 <USBGetDescriptor>
    ad58:	4603      	mov	r3, r0
    ad5a:	e020      	b.n	ad9e <HandleStdDeviceReq+0xc6>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    ad5c:	4b12      	ldr	r3, [pc, #72]	; (ada8 <HandleStdDeviceReq+0xd0>)
    ad5e:	781a      	ldrb	r2, [r3, #0]
    ad60:	697b      	ldr	r3, [r7, #20]
    ad62:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    ad64:	68bb      	ldr	r3, [r7, #8]
    ad66:	2201      	movs	r2, #1
    ad68:	601a      	str	r2, [r3, #0]
		break;
    ad6a:	e017      	b.n	ad9c <HandleStdDeviceReq+0xc4>

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    ad6c:	68fb      	ldr	r3, [r7, #12]
    ad6e:	885b      	ldrh	r3, [r3, #2]
    ad70:	b2db      	uxtb	r3, r3
    ad72:	4618      	mov	r0, r3
    ad74:	2100      	movs	r1, #0
    ad76:	f7ff ff53 	bl	ac20 <USBSetConfiguration>
    ad7a:	4603      	mov	r3, r0
    ad7c:	2b00      	cmp	r3, #0
    ad7e:	d101      	bne.n	ad84 <HandleStdDeviceReq+0xac>
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
    ad80:	2300      	movs	r3, #0
    ad82:	e00c      	b.n	ad9e <HandleStdDeviceReq+0xc6>
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    ad84:	68fb      	ldr	r3, [r7, #12]
    ad86:	885b      	ldrh	r3, [r3, #2]
    ad88:	b2da      	uxtb	r2, r3
    ad8a:	4b07      	ldr	r3, [pc, #28]	; (ada8 <HandleStdDeviceReq+0xd0>)
    ad8c:	701a      	strb	r2, [r3, #0]
		break;
    ad8e:	e005      	b.n	ad9c <HandleStdDeviceReq+0xc4>
			// put DEVICE_REMOTE_WAKEUP code here
		}
		if (pSetup->wValue == FEA_TEST_MODE) {
			// put TEST_MODE code here
		}
		return FALSE;
    ad90:	2300      	movs	r3, #0
    ad92:	e004      	b.n	ad9e <HandleStdDeviceReq+0xc6>

	case REQ_SET_DESCRIPTOR:
		DBG("Device req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    ad94:	2300      	movs	r3, #0
    ad96:	e002      	b.n	ad9e <HandleStdDeviceReq+0xc6>

	default:
		DBG("Illegal device req %d\n", pSetup->bRequest);
		return FALSE;
    ad98:	2300      	movs	r3, #0
    ad9a:	e000      	b.n	ad9e <HandleStdDeviceReq+0xc6>
	}
	
	return TRUE;
    ad9c:	2301      	movs	r3, #1
}
    ad9e:	4618      	mov	r0, r3
    ada0:	3718      	adds	r7, #24
    ada2:	46bd      	mov	sp, r7
    ada4:	bd80      	pop	{r7, pc}
    ada6:	bf00      	nop
    ada8:	10000af0 	.word	0x10000af0

0000adac <HandleStdInterfaceReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    adac:	b480      	push	{r7}
    adae:	b087      	sub	sp, #28
    adb0:	af00      	add	r7, sp, #0
    adb2:	60f8      	str	r0, [r7, #12]
    adb4:	60b9      	str	r1, [r7, #8]
    adb6:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    adb8:	687b      	ldr	r3, [r7, #4]
    adba:	681b      	ldr	r3, [r3, #0]
    adbc:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    adbe:	68fb      	ldr	r3, [r7, #12]
    adc0:	785b      	ldrb	r3, [r3, #1]
    adc2:	2b0b      	cmp	r3, #11
    adc4:	d838      	bhi.n	ae38 <HandleStdInterfaceReq+0x8c>
    adc6:	a201      	add	r2, pc, #4	; (adr r2, adcc <HandleStdInterfaceReq+0x20>)
    adc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    adcc:	0000adfd 	.word	0x0000adfd
    add0:	0000ae13 	.word	0x0000ae13
    add4:	0000ae39 	.word	0x0000ae39
    add8:	0000ae13 	.word	0x0000ae13
    addc:	0000ae39 	.word	0x0000ae39
    ade0:	0000ae39 	.word	0x0000ae39
    ade4:	0000ae39 	.word	0x0000ae39
    ade8:	0000ae39 	.word	0x0000ae39
    adec:	0000ae39 	.word	0x0000ae39
    adf0:	0000ae39 	.word	0x0000ae39
    adf4:	0000ae17 	.word	0x0000ae17
    adf8:	0000ae25 	.word	0x0000ae25

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    adfc:	697b      	ldr	r3, [r7, #20]
    adfe:	2200      	movs	r2, #0
    ae00:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    ae02:	697b      	ldr	r3, [r7, #20]
    ae04:	3301      	adds	r3, #1
    ae06:	2200      	movs	r2, #0
    ae08:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    ae0a:	68bb      	ldr	r3, [r7, #8]
    ae0c:	2202      	movs	r2, #2
    ae0e:	601a      	str	r2, [r3, #0]
		break;
    ae10:	e014      	b.n	ae3c <HandleStdInterfaceReq+0x90>

	case REQ_CLEAR_FEATURE:
	case REQ_SET_FEATURE:
		// not defined for interface
		return FALSE;
    ae12:	2300      	movs	r3, #0
    ae14:	e013      	b.n	ae3e <HandleStdInterfaceReq+0x92>
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    ae16:	697b      	ldr	r3, [r7, #20]
    ae18:	2200      	movs	r2, #0
    ae1a:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    ae1c:	68bb      	ldr	r3, [r7, #8]
    ae1e:	2201      	movs	r2, #1
    ae20:	601a      	str	r2, [r3, #0]
		break;
    ae22:	e00b      	b.n	ae3c <HandleStdInterfaceReq+0x90>
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    ae24:	68fb      	ldr	r3, [r7, #12]
    ae26:	885b      	ldrh	r3, [r3, #2]
    ae28:	2b00      	cmp	r3, #0
    ae2a:	d001      	beq.n	ae30 <HandleStdInterfaceReq+0x84>
			return FALSE;
    ae2c:	2300      	movs	r3, #0
    ae2e:	e006      	b.n	ae3e <HandleStdInterfaceReq+0x92>
		}
		*piLen = 0;
    ae30:	68bb      	ldr	r3, [r7, #8]
    ae32:	2200      	movs	r2, #0
    ae34:	601a      	str	r2, [r3, #0]
		break;
    ae36:	e001      	b.n	ae3c <HandleStdInterfaceReq+0x90>

	default:
		DBG("Illegal interface req %d\n", pSetup->bRequest);
		return FALSE;
    ae38:	2300      	movs	r3, #0
    ae3a:	e000      	b.n	ae3e <HandleStdInterfaceReq+0x92>
	}

	return TRUE;
    ae3c:	2301      	movs	r3, #1
}
    ae3e:	4618      	mov	r0, r3
    ae40:	371c      	adds	r7, #28
    ae42:	46bd      	mov	sp, r7
    ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
    ae48:	4770      	bx	lr
    ae4a:	bf00      	nop

0000ae4c <HandleStdEndPointReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    ae4c:	b580      	push	{r7, lr}
    ae4e:	b086      	sub	sp, #24
    ae50:	af00      	add	r7, sp, #0
    ae52:	60f8      	str	r0, [r7, #12]
    ae54:	60b9      	str	r1, [r7, #8]
    ae56:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    ae58:	687b      	ldr	r3, [r7, #4]
    ae5a:	681b      	ldr	r3, [r3, #0]
    ae5c:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    ae5e:	68fb      	ldr	r3, [r7, #12]
    ae60:	785b      	ldrb	r3, [r3, #1]
    ae62:	2b0c      	cmp	r3, #12
    ae64:	d853      	bhi.n	af0e <HandleStdEndPointReq+0xc2>
    ae66:	a201      	add	r2, pc, #4	; (adr r2, ae6c <HandleStdEndPointReq+0x20>)
    ae68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ae6c:	0000aea1 	.word	0x0000aea1
    ae70:	0000aed3 	.word	0x0000aed3
    ae74:	0000af0f 	.word	0x0000af0f
    ae78:	0000aeef 	.word	0x0000aeef
    ae7c:	0000af0f 	.word	0x0000af0f
    ae80:	0000af0f 	.word	0x0000af0f
    ae84:	0000af0f 	.word	0x0000af0f
    ae88:	0000af0f 	.word	0x0000af0f
    ae8c:	0000af0f 	.word	0x0000af0f
    ae90:	0000af0f 	.word	0x0000af0f
    ae94:	0000af0f 	.word	0x0000af0f
    ae98:	0000af0f 	.word	0x0000af0f
    ae9c:	0000af0b 	.word	0x0000af0b
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    aea0:	68fb      	ldr	r3, [r7, #12]
    aea2:	889b      	ldrh	r3, [r3, #4]
    aea4:	b2db      	uxtb	r3, r3
    aea6:	4618      	mov	r0, r3
    aea8:	f7ff fb50 	bl	a54c <USBHwEPGetStatus>
    aeac:	4603      	mov	r3, r0
    aeae:	f003 0302 	and.w	r3, r3, #2
    aeb2:	2b00      	cmp	r3, #0
    aeb4:	bf14      	ite	ne
    aeb6:	2301      	movne	r3, #1
    aeb8:	2300      	moveq	r3, #0
    aeba:	b2db      	uxtb	r3, r3
    aebc:	461a      	mov	r2, r3
    aebe:	697b      	ldr	r3, [r7, #20]
    aec0:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    aec2:	697b      	ldr	r3, [r7, #20]
    aec4:	3301      	adds	r3, #1
    aec6:	2200      	movs	r2, #0
    aec8:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    aeca:	68bb      	ldr	r3, [r7, #8]
    aecc:	2202      	movs	r2, #2
    aece:	601a      	str	r2, [r3, #0]
		break;
    aed0:	e01f      	b.n	af12 <HandleStdEndPointReq+0xc6>
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    aed2:	68fb      	ldr	r3, [r7, #12]
    aed4:	885b      	ldrh	r3, [r3, #2]
    aed6:	2b00      	cmp	r3, #0
    aed8:	d107      	bne.n	aeea <HandleStdEndPointReq+0x9e>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    aeda:	68fb      	ldr	r3, [r7, #12]
    aedc:	889b      	ldrh	r3, [r3, #4]
    aede:	b2db      	uxtb	r3, r3
    aee0:	4618      	mov	r0, r3
    aee2:	2100      	movs	r1, #0
    aee4:	f7ff fb4a 	bl	a57c <USBHwEPStall>
			break;
    aee8:	e013      	b.n	af12 <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    aeea:	2300      	movs	r3, #0
    aeec:	e012      	b.n	af14 <HandleStdEndPointReq+0xc8>
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    aeee:	68fb      	ldr	r3, [r7, #12]
    aef0:	885b      	ldrh	r3, [r3, #2]
    aef2:	2b00      	cmp	r3, #0
    aef4:	d107      	bne.n	af06 <HandleStdEndPointReq+0xba>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    aef6:	68fb      	ldr	r3, [r7, #12]
    aef8:	889b      	ldrh	r3, [r3, #4]
    aefa:	b2db      	uxtb	r3, r3
    aefc:	4618      	mov	r0, r3
    aefe:	2101      	movs	r1, #1
    af00:	f7ff fb3c 	bl	a57c <USBHwEPStall>
			break;
    af04:	e005      	b.n	af12 <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    af06:	2300      	movs	r3, #0
    af08:	e004      	b.n	af14 <HandleStdEndPointReq+0xc8>

	case REQ_SYNCH_FRAME:
		DBG("EP req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    af0a:	2300      	movs	r3, #0
    af0c:	e002      	b.n	af14 <HandleStdEndPointReq+0xc8>

	default:
		DBG("Illegal EP req %d\n", pSetup->bRequest);
		return FALSE;
    af0e:	2300      	movs	r3, #0
    af10:	e000      	b.n	af14 <HandleStdEndPointReq+0xc8>
	}
	
	return TRUE;
    af12:	2301      	movs	r3, #1
}
    af14:	4618      	mov	r0, r3
    af16:	3718      	adds	r7, #24
    af18:	46bd      	mov	sp, r7
    af1a:	bd80      	pop	{r7, pc}

0000af1c <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    af1c:	b580      	push	{r7, lr}
    af1e:	b084      	sub	sp, #16
    af20:	af00      	add	r7, sp, #0
    af22:	60f8      	str	r0, [r7, #12]
    af24:	60b9      	str	r1, [r7, #8]
    af26:	607a      	str	r2, [r7, #4]
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    af28:	4b19      	ldr	r3, [pc, #100]	; (af90 <USBHandleStandardRequest+0x74>)
    af2a:	681b      	ldr	r3, [r3, #0]
    af2c:	2b00      	cmp	r3, #0
    af2e:	d00a      	beq.n	af46 <USBHandleStandardRequest+0x2a>
    af30:	4b17      	ldr	r3, [pc, #92]	; (af90 <USBHandleStandardRequest+0x74>)
    af32:	681b      	ldr	r3, [r3, #0]
    af34:	68f8      	ldr	r0, [r7, #12]
    af36:	68b9      	ldr	r1, [r7, #8]
    af38:	687a      	ldr	r2, [r7, #4]
    af3a:	4798      	blx	r3
    af3c:	4603      	mov	r3, r0
    af3e:	2b00      	cmp	r3, #0
    af40:	d001      	beq.n	af46 <USBHandleStandardRequest+0x2a>
		return TRUE;
    af42:	2301      	movs	r3, #1
    af44:	e01f      	b.n	af86 <USBHandleStandardRequest+0x6a>
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    af46:	68fb      	ldr	r3, [r7, #12]
    af48:	781b      	ldrb	r3, [r3, #0]
    af4a:	f003 031f 	and.w	r3, r3, #31
    af4e:	2b01      	cmp	r3, #1
    af50:	d00a      	beq.n	af68 <USBHandleStandardRequest+0x4c>
    af52:	2b02      	cmp	r3, #2
    af54:	d00f      	beq.n	af76 <USBHandleStandardRequest+0x5a>
    af56:	2b00      	cmp	r3, #0
    af58:	d114      	bne.n	af84 <USBHandleStandardRequest+0x68>
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
    af5a:	68f8      	ldr	r0, [r7, #12]
    af5c:	68b9      	ldr	r1, [r7, #8]
    af5e:	687a      	ldr	r2, [r7, #4]
    af60:	f7ff feba 	bl	acd8 <HandleStdDeviceReq>
    af64:	4603      	mov	r3, r0
    af66:	e00e      	b.n	af86 <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
    af68:	68f8      	ldr	r0, [r7, #12]
    af6a:	68b9      	ldr	r1, [r7, #8]
    af6c:	687a      	ldr	r2, [r7, #4]
    af6e:	f7ff ff1d 	bl	adac <HandleStdInterfaceReq>
    af72:	4603      	mov	r3, r0
    af74:	e007      	b.n	af86 <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
    af76:	68f8      	ldr	r0, [r7, #12]
    af78:	68b9      	ldr	r1, [r7, #8]
    af7a:	687a      	ldr	r2, [r7, #4]
    af7c:	f7ff ff66 	bl	ae4c <HandleStdEndPointReq>
    af80:	4603      	mov	r3, r0
    af82:	e000      	b.n	af86 <USBHandleStandardRequest+0x6a>
	default: 						return FALSE;
    af84:	2300      	movs	r3, #0
	}
}
    af86:	4618      	mov	r0, r3
    af88:	3710      	adds	r7, #16
    af8a:	46bd      	mov	sp, r7
    af8c:	bd80      	pop	{r7, pc}
    af8e:	bf00      	nop
    af90:	10000af4 	.word	0x10000af4

0000af94 <__aeabi_drsub>:
    af94:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    af98:	e002      	b.n	afa0 <__adddf3>
    af9a:	bf00      	nop

0000af9c <__aeabi_dsub>:
    af9c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000afa0 <__adddf3>:
    afa0:	b530      	push	{r4, r5, lr}
    afa2:	ea4f 0441 	mov.w	r4, r1, lsl #1
    afa6:	ea4f 0543 	mov.w	r5, r3, lsl #1
    afaa:	ea94 0f05 	teq	r4, r5
    afae:	bf08      	it	eq
    afb0:	ea90 0f02 	teqeq	r0, r2
    afb4:	bf1f      	itttt	ne
    afb6:	ea54 0c00 	orrsne.w	ip, r4, r0
    afba:	ea55 0c02 	orrsne.w	ip, r5, r2
    afbe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    afc2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    afc6:	f000 80e2 	beq.w	b18e <__adddf3+0x1ee>
    afca:	ea4f 5454 	mov.w	r4, r4, lsr #21
    afce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    afd2:	bfb8      	it	lt
    afd4:	426d      	neglt	r5, r5
    afd6:	dd0c      	ble.n	aff2 <__adddf3+0x52>
    afd8:	442c      	add	r4, r5
    afda:	ea80 0202 	eor.w	r2, r0, r2
    afde:	ea81 0303 	eor.w	r3, r1, r3
    afe2:	ea82 0000 	eor.w	r0, r2, r0
    afe6:	ea83 0101 	eor.w	r1, r3, r1
    afea:	ea80 0202 	eor.w	r2, r0, r2
    afee:	ea81 0303 	eor.w	r3, r1, r3
    aff2:	2d36      	cmp	r5, #54	; 0x36
    aff4:	bf88      	it	hi
    aff6:	bd30      	pophi	{r4, r5, pc}
    aff8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    affc:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b000:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    b004:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    b008:	d002      	beq.n	b010 <__adddf3+0x70>
    b00a:	4240      	negs	r0, r0
    b00c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b010:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    b014:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b018:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    b01c:	d002      	beq.n	b024 <__adddf3+0x84>
    b01e:	4252      	negs	r2, r2
    b020:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b024:	ea94 0f05 	teq	r4, r5
    b028:	f000 80a7 	beq.w	b17a <__adddf3+0x1da>
    b02c:	f1a4 0401 	sub.w	r4, r4, #1
    b030:	f1d5 0e20 	rsbs	lr, r5, #32
    b034:	db0d      	blt.n	b052 <__adddf3+0xb2>
    b036:	fa02 fc0e 	lsl.w	ip, r2, lr
    b03a:	fa22 f205 	lsr.w	r2, r2, r5
    b03e:	1880      	adds	r0, r0, r2
    b040:	f141 0100 	adc.w	r1, r1, #0
    b044:	fa03 f20e 	lsl.w	r2, r3, lr
    b048:	1880      	adds	r0, r0, r2
    b04a:	fa43 f305 	asr.w	r3, r3, r5
    b04e:	4159      	adcs	r1, r3
    b050:	e00e      	b.n	b070 <__adddf3+0xd0>
    b052:	f1a5 0520 	sub.w	r5, r5, #32
    b056:	f10e 0e20 	add.w	lr, lr, #32
    b05a:	2a01      	cmp	r2, #1
    b05c:	fa03 fc0e 	lsl.w	ip, r3, lr
    b060:	bf28      	it	cs
    b062:	f04c 0c02 	orrcs.w	ip, ip, #2
    b066:	fa43 f305 	asr.w	r3, r3, r5
    b06a:	18c0      	adds	r0, r0, r3
    b06c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    b070:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b074:	d507      	bpl.n	b086 <__adddf3+0xe6>
    b076:	f04f 0e00 	mov.w	lr, #0
    b07a:	f1dc 0c00 	rsbs	ip, ip, #0
    b07e:	eb7e 0000 	sbcs.w	r0, lr, r0
    b082:	eb6e 0101 	sbc.w	r1, lr, r1
    b086:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    b08a:	d31b      	bcc.n	b0c4 <__adddf3+0x124>
    b08c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    b090:	d30c      	bcc.n	b0ac <__adddf3+0x10c>
    b092:	0849      	lsrs	r1, r1, #1
    b094:	ea5f 0030 	movs.w	r0, r0, rrx
    b098:	ea4f 0c3c 	mov.w	ip, ip, rrx
    b09c:	f104 0401 	add.w	r4, r4, #1
    b0a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
    b0a4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    b0a8:	f080 809a 	bcs.w	b1e0 <__adddf3+0x240>
    b0ac:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    b0b0:	bf08      	it	eq
    b0b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b0b6:	f150 0000 	adcs.w	r0, r0, #0
    b0ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b0be:	ea41 0105 	orr.w	r1, r1, r5
    b0c2:	bd30      	pop	{r4, r5, pc}
    b0c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    b0c8:	4140      	adcs	r0, r0
    b0ca:	eb41 0101 	adc.w	r1, r1, r1
    b0ce:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b0d2:	f1a4 0401 	sub.w	r4, r4, #1
    b0d6:	d1e9      	bne.n	b0ac <__adddf3+0x10c>
    b0d8:	f091 0f00 	teq	r1, #0
    b0dc:	bf04      	itt	eq
    b0de:	4601      	moveq	r1, r0
    b0e0:	2000      	moveq	r0, #0
    b0e2:	fab1 f381 	clz	r3, r1
    b0e6:	bf08      	it	eq
    b0e8:	3320      	addeq	r3, #32
    b0ea:	f1a3 030b 	sub.w	r3, r3, #11
    b0ee:	f1b3 0220 	subs.w	r2, r3, #32
    b0f2:	da0c      	bge.n	b10e <__adddf3+0x16e>
    b0f4:	320c      	adds	r2, #12
    b0f6:	dd08      	ble.n	b10a <__adddf3+0x16a>
    b0f8:	f102 0c14 	add.w	ip, r2, #20
    b0fc:	f1c2 020c 	rsb	r2, r2, #12
    b100:	fa01 f00c 	lsl.w	r0, r1, ip
    b104:	fa21 f102 	lsr.w	r1, r1, r2
    b108:	e00c      	b.n	b124 <__adddf3+0x184>
    b10a:	f102 0214 	add.w	r2, r2, #20
    b10e:	bfd8      	it	le
    b110:	f1c2 0c20 	rsble	ip, r2, #32
    b114:	fa01 f102 	lsl.w	r1, r1, r2
    b118:	fa20 fc0c 	lsr.w	ip, r0, ip
    b11c:	bfdc      	itt	le
    b11e:	ea41 010c 	orrle.w	r1, r1, ip
    b122:	4090      	lslle	r0, r2
    b124:	1ae4      	subs	r4, r4, r3
    b126:	bfa2      	ittt	ge
    b128:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    b12c:	4329      	orrge	r1, r5
    b12e:	bd30      	popge	{r4, r5, pc}
    b130:	ea6f 0404 	mvn.w	r4, r4
    b134:	3c1f      	subs	r4, #31
    b136:	da1c      	bge.n	b172 <__adddf3+0x1d2>
    b138:	340c      	adds	r4, #12
    b13a:	dc0e      	bgt.n	b15a <__adddf3+0x1ba>
    b13c:	f104 0414 	add.w	r4, r4, #20
    b140:	f1c4 0220 	rsb	r2, r4, #32
    b144:	fa20 f004 	lsr.w	r0, r0, r4
    b148:	fa01 f302 	lsl.w	r3, r1, r2
    b14c:	ea40 0003 	orr.w	r0, r0, r3
    b150:	fa21 f304 	lsr.w	r3, r1, r4
    b154:	ea45 0103 	orr.w	r1, r5, r3
    b158:	bd30      	pop	{r4, r5, pc}
    b15a:	f1c4 040c 	rsb	r4, r4, #12
    b15e:	f1c4 0220 	rsb	r2, r4, #32
    b162:	fa20 f002 	lsr.w	r0, r0, r2
    b166:	fa01 f304 	lsl.w	r3, r1, r4
    b16a:	ea40 0003 	orr.w	r0, r0, r3
    b16e:	4629      	mov	r1, r5
    b170:	bd30      	pop	{r4, r5, pc}
    b172:	fa21 f004 	lsr.w	r0, r1, r4
    b176:	4629      	mov	r1, r5
    b178:	bd30      	pop	{r4, r5, pc}
    b17a:	f094 0f00 	teq	r4, #0
    b17e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    b182:	bf06      	itte	eq
    b184:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    b188:	3401      	addeq	r4, #1
    b18a:	3d01      	subne	r5, #1
    b18c:	e74e      	b.n	b02c <__adddf3+0x8c>
    b18e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b192:	bf18      	it	ne
    b194:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b198:	d029      	beq.n	b1ee <__adddf3+0x24e>
    b19a:	ea94 0f05 	teq	r4, r5
    b19e:	bf08      	it	eq
    b1a0:	ea90 0f02 	teqeq	r0, r2
    b1a4:	d005      	beq.n	b1b2 <__adddf3+0x212>
    b1a6:	ea54 0c00 	orrs.w	ip, r4, r0
    b1aa:	bf04      	itt	eq
    b1ac:	4619      	moveq	r1, r3
    b1ae:	4610      	moveq	r0, r2
    b1b0:	bd30      	pop	{r4, r5, pc}
    b1b2:	ea91 0f03 	teq	r1, r3
    b1b6:	bf1e      	ittt	ne
    b1b8:	2100      	movne	r1, #0
    b1ba:	2000      	movne	r0, #0
    b1bc:	bd30      	popne	{r4, r5, pc}
    b1be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    b1c2:	d105      	bne.n	b1d0 <__adddf3+0x230>
    b1c4:	0040      	lsls	r0, r0, #1
    b1c6:	4149      	adcs	r1, r1
    b1c8:	bf28      	it	cs
    b1ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b1ce:	bd30      	pop	{r4, r5, pc}
    b1d0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    b1d4:	bf3c      	itt	cc
    b1d6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    b1da:	bd30      	popcc	{r4, r5, pc}
    b1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b1e0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    b1e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b1e8:	f04f 0000 	mov.w	r0, #0
    b1ec:	bd30      	pop	{r4, r5, pc}
    b1ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b1f2:	bf1a      	itte	ne
    b1f4:	4619      	movne	r1, r3
    b1f6:	4610      	movne	r0, r2
    b1f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    b1fc:	bf1c      	itt	ne
    b1fe:	460b      	movne	r3, r1
    b200:	4602      	movne	r2, r0
    b202:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b206:	bf06      	itte	eq
    b208:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    b20c:	ea91 0f03 	teqeq	r1, r3
    b210:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    b214:	bd30      	pop	{r4, r5, pc}
    b216:	bf00      	nop

0000b218 <__aeabi_ui2d>:
    b218:	f090 0f00 	teq	r0, #0
    b21c:	bf04      	itt	eq
    b21e:	2100      	moveq	r1, #0
    b220:	4770      	bxeq	lr
    b222:	b530      	push	{r4, r5, lr}
    b224:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b228:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b22c:	f04f 0500 	mov.w	r5, #0
    b230:	f04f 0100 	mov.w	r1, #0
    b234:	e750      	b.n	b0d8 <__adddf3+0x138>
    b236:	bf00      	nop

0000b238 <__aeabi_i2d>:
    b238:	f090 0f00 	teq	r0, #0
    b23c:	bf04      	itt	eq
    b23e:	2100      	moveq	r1, #0
    b240:	4770      	bxeq	lr
    b242:	b530      	push	{r4, r5, lr}
    b244:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b248:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b24c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    b250:	bf48      	it	mi
    b252:	4240      	negmi	r0, r0
    b254:	f04f 0100 	mov.w	r1, #0
    b258:	e73e      	b.n	b0d8 <__adddf3+0x138>
    b25a:	bf00      	nop

0000b25c <__aeabi_f2d>:
    b25c:	0042      	lsls	r2, r0, #1
    b25e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    b262:	ea4f 0131 	mov.w	r1, r1, rrx
    b266:	ea4f 7002 	mov.w	r0, r2, lsl #28
    b26a:	bf1f      	itttt	ne
    b26c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    b270:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b274:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    b278:	4770      	bxne	lr
    b27a:	f092 0f00 	teq	r2, #0
    b27e:	bf14      	ite	ne
    b280:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b284:	4770      	bxeq	lr
    b286:	b530      	push	{r4, r5, lr}
    b288:	f44f 7460 	mov.w	r4, #896	; 0x380
    b28c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b290:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b294:	e720      	b.n	b0d8 <__adddf3+0x138>
    b296:	bf00      	nop

0000b298 <__aeabi_ul2d>:
    b298:	ea50 0201 	orrs.w	r2, r0, r1
    b29c:	bf08      	it	eq
    b29e:	4770      	bxeq	lr
    b2a0:	b530      	push	{r4, r5, lr}
    b2a2:	f04f 0500 	mov.w	r5, #0
    b2a6:	e00a      	b.n	b2be <__aeabi_l2d+0x16>

0000b2a8 <__aeabi_l2d>:
    b2a8:	ea50 0201 	orrs.w	r2, r0, r1
    b2ac:	bf08      	it	eq
    b2ae:	4770      	bxeq	lr
    b2b0:	b530      	push	{r4, r5, lr}
    b2b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    b2b6:	d502      	bpl.n	b2be <__aeabi_l2d+0x16>
    b2b8:	4240      	negs	r0, r0
    b2ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b2be:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b2c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b2c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    b2ca:	f43f aedc 	beq.w	b086 <__adddf3+0xe6>
    b2ce:	f04f 0203 	mov.w	r2, #3
    b2d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b2d6:	bf18      	it	ne
    b2d8:	3203      	addne	r2, #3
    b2da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b2de:	bf18      	it	ne
    b2e0:	3203      	addne	r2, #3
    b2e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    b2e6:	f1c2 0320 	rsb	r3, r2, #32
    b2ea:	fa00 fc03 	lsl.w	ip, r0, r3
    b2ee:	fa20 f002 	lsr.w	r0, r0, r2
    b2f2:	fa01 fe03 	lsl.w	lr, r1, r3
    b2f6:	ea40 000e 	orr.w	r0, r0, lr
    b2fa:	fa21 f102 	lsr.w	r1, r1, r2
    b2fe:	4414      	add	r4, r2
    b300:	e6c1      	b.n	b086 <__adddf3+0xe6>
    b302:	bf00      	nop

0000b304 <__aeabi_dmul>:
    b304:	b570      	push	{r4, r5, r6, lr}
    b306:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b30a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b30e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b312:	bf1d      	ittte	ne
    b314:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b318:	ea94 0f0c 	teqne	r4, ip
    b31c:	ea95 0f0c 	teqne	r5, ip
    b320:	f000 f8de 	bleq	b4e0 <__aeabi_dmul+0x1dc>
    b324:	442c      	add	r4, r5
    b326:	ea81 0603 	eor.w	r6, r1, r3
    b32a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    b32e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    b332:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    b336:	bf18      	it	ne
    b338:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    b33c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b340:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b344:	d038      	beq.n	b3b8 <__aeabi_dmul+0xb4>
    b346:	fba0 ce02 	umull	ip, lr, r0, r2
    b34a:	f04f 0500 	mov.w	r5, #0
    b34e:	fbe1 e502 	umlal	lr, r5, r1, r2
    b352:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    b356:	fbe0 e503 	umlal	lr, r5, r0, r3
    b35a:	f04f 0600 	mov.w	r6, #0
    b35e:	fbe1 5603 	umlal	r5, r6, r1, r3
    b362:	f09c 0f00 	teq	ip, #0
    b366:	bf18      	it	ne
    b368:	f04e 0e01 	orrne.w	lr, lr, #1
    b36c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    b370:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    b374:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    b378:	d204      	bcs.n	b384 <__aeabi_dmul+0x80>
    b37a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    b37e:	416d      	adcs	r5, r5
    b380:	eb46 0606 	adc.w	r6, r6, r6
    b384:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    b388:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    b38c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    b390:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    b394:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    b398:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b39c:	bf88      	it	hi
    b39e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b3a2:	d81e      	bhi.n	b3e2 <__aeabi_dmul+0xde>
    b3a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    b3a8:	bf08      	it	eq
    b3aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    b3ae:	f150 0000 	adcs.w	r0, r0, #0
    b3b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b3b6:	bd70      	pop	{r4, r5, r6, pc}
    b3b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    b3bc:	ea46 0101 	orr.w	r1, r6, r1
    b3c0:	ea40 0002 	orr.w	r0, r0, r2
    b3c4:	ea81 0103 	eor.w	r1, r1, r3
    b3c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    b3cc:	bfc2      	ittt	gt
    b3ce:	ebd4 050c 	rsbsgt	r5, r4, ip
    b3d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b3d6:	bd70      	popgt	{r4, r5, r6, pc}
    b3d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b3dc:	f04f 0e00 	mov.w	lr, #0
    b3e0:	3c01      	subs	r4, #1
    b3e2:	f300 80ab 	bgt.w	b53c <__aeabi_dmul+0x238>
    b3e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
    b3ea:	bfde      	ittt	le
    b3ec:	2000      	movle	r0, #0
    b3ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    b3f2:	bd70      	pople	{r4, r5, r6, pc}
    b3f4:	f1c4 0400 	rsb	r4, r4, #0
    b3f8:	3c20      	subs	r4, #32
    b3fa:	da35      	bge.n	b468 <__aeabi_dmul+0x164>
    b3fc:	340c      	adds	r4, #12
    b3fe:	dc1b      	bgt.n	b438 <__aeabi_dmul+0x134>
    b400:	f104 0414 	add.w	r4, r4, #20
    b404:	f1c4 0520 	rsb	r5, r4, #32
    b408:	fa00 f305 	lsl.w	r3, r0, r5
    b40c:	fa20 f004 	lsr.w	r0, r0, r4
    b410:	fa01 f205 	lsl.w	r2, r1, r5
    b414:	ea40 0002 	orr.w	r0, r0, r2
    b418:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    b41c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b420:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b424:	fa21 f604 	lsr.w	r6, r1, r4
    b428:	eb42 0106 	adc.w	r1, r2, r6
    b42c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b430:	bf08      	it	eq
    b432:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b436:	bd70      	pop	{r4, r5, r6, pc}
    b438:	f1c4 040c 	rsb	r4, r4, #12
    b43c:	f1c4 0520 	rsb	r5, r4, #32
    b440:	fa00 f304 	lsl.w	r3, r0, r4
    b444:	fa20 f005 	lsr.w	r0, r0, r5
    b448:	fa01 f204 	lsl.w	r2, r1, r4
    b44c:	ea40 0002 	orr.w	r0, r0, r2
    b450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b454:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b458:	f141 0100 	adc.w	r1, r1, #0
    b45c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b460:	bf08      	it	eq
    b462:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b466:	bd70      	pop	{r4, r5, r6, pc}
    b468:	f1c4 0520 	rsb	r5, r4, #32
    b46c:	fa00 f205 	lsl.w	r2, r0, r5
    b470:	ea4e 0e02 	orr.w	lr, lr, r2
    b474:	fa20 f304 	lsr.w	r3, r0, r4
    b478:	fa01 f205 	lsl.w	r2, r1, r5
    b47c:	ea43 0302 	orr.w	r3, r3, r2
    b480:	fa21 f004 	lsr.w	r0, r1, r4
    b484:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b488:	fa21 f204 	lsr.w	r2, r1, r4
    b48c:	ea20 0002 	bic.w	r0, r0, r2
    b490:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    b494:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b498:	bf08      	it	eq
    b49a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b49e:	bd70      	pop	{r4, r5, r6, pc}
    b4a0:	f094 0f00 	teq	r4, #0
    b4a4:	d10f      	bne.n	b4c6 <__aeabi_dmul+0x1c2>
    b4a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    b4aa:	0040      	lsls	r0, r0, #1
    b4ac:	eb41 0101 	adc.w	r1, r1, r1
    b4b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b4b4:	bf08      	it	eq
    b4b6:	3c01      	subeq	r4, #1
    b4b8:	d0f7      	beq.n	b4aa <__aeabi_dmul+0x1a6>
    b4ba:	ea41 0106 	orr.w	r1, r1, r6
    b4be:	f095 0f00 	teq	r5, #0
    b4c2:	bf18      	it	ne
    b4c4:	4770      	bxne	lr
    b4c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    b4ca:	0052      	lsls	r2, r2, #1
    b4cc:	eb43 0303 	adc.w	r3, r3, r3
    b4d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    b4d4:	bf08      	it	eq
    b4d6:	3d01      	subeq	r5, #1
    b4d8:	d0f7      	beq.n	b4ca <__aeabi_dmul+0x1c6>
    b4da:	ea43 0306 	orr.w	r3, r3, r6
    b4de:	4770      	bx	lr
    b4e0:	ea94 0f0c 	teq	r4, ip
    b4e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b4e8:	bf18      	it	ne
    b4ea:	ea95 0f0c 	teqne	r5, ip
    b4ee:	d00c      	beq.n	b50a <__aeabi_dmul+0x206>
    b4f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b4f4:	bf18      	it	ne
    b4f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b4fa:	d1d1      	bne.n	b4a0 <__aeabi_dmul+0x19c>
    b4fc:	ea81 0103 	eor.w	r1, r1, r3
    b500:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b504:	f04f 0000 	mov.w	r0, #0
    b508:	bd70      	pop	{r4, r5, r6, pc}
    b50a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b50e:	bf06      	itte	eq
    b510:	4610      	moveq	r0, r2
    b512:	4619      	moveq	r1, r3
    b514:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b518:	d019      	beq.n	b54e <__aeabi_dmul+0x24a>
    b51a:	ea94 0f0c 	teq	r4, ip
    b51e:	d102      	bne.n	b526 <__aeabi_dmul+0x222>
    b520:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    b524:	d113      	bne.n	b54e <__aeabi_dmul+0x24a>
    b526:	ea95 0f0c 	teq	r5, ip
    b52a:	d105      	bne.n	b538 <__aeabi_dmul+0x234>
    b52c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    b530:	bf1c      	itt	ne
    b532:	4610      	movne	r0, r2
    b534:	4619      	movne	r1, r3
    b536:	d10a      	bne.n	b54e <__aeabi_dmul+0x24a>
    b538:	ea81 0103 	eor.w	r1, r1, r3
    b53c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b540:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b544:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b548:	f04f 0000 	mov.w	r0, #0
    b54c:	bd70      	pop	{r4, r5, r6, pc}
    b54e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b552:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    b556:	bd70      	pop	{r4, r5, r6, pc}

0000b558 <__aeabi_ddiv>:
    b558:	b570      	push	{r4, r5, r6, lr}
    b55a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b55e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b566:	bf1d      	ittte	ne
    b568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b56c:	ea94 0f0c 	teqne	r4, ip
    b570:	ea95 0f0c 	teqne	r5, ip
    b574:	f000 f8a7 	bleq	b6c6 <__aeabi_ddiv+0x16e>
    b578:	eba4 0405 	sub.w	r4, r4, r5
    b57c:	ea81 0e03 	eor.w	lr, r1, r3
    b580:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b584:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b588:	f000 8088 	beq.w	b69c <__aeabi_ddiv+0x144>
    b58c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b590:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    b594:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    b598:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b59c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    b5a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    b5a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    b5a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
    b5ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    b5b0:	429d      	cmp	r5, r3
    b5b2:	bf08      	it	eq
    b5b4:	4296      	cmpeq	r6, r2
    b5b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    b5ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
    b5be:	d202      	bcs.n	b5c6 <__aeabi_ddiv+0x6e>
    b5c0:	085b      	lsrs	r3, r3, #1
    b5c2:	ea4f 0232 	mov.w	r2, r2, rrx
    b5c6:	1ab6      	subs	r6, r6, r2
    b5c8:	eb65 0503 	sbc.w	r5, r5, r3
    b5cc:	085b      	lsrs	r3, r3, #1
    b5ce:	ea4f 0232 	mov.w	r2, r2, rrx
    b5d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b5d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    b5da:	ebb6 0e02 	subs.w	lr, r6, r2
    b5de:	eb75 0e03 	sbcs.w	lr, r5, r3
    b5e2:	bf22      	ittt	cs
    b5e4:	1ab6      	subcs	r6, r6, r2
    b5e6:	4675      	movcs	r5, lr
    b5e8:	ea40 000c 	orrcs.w	r0, r0, ip
    b5ec:	085b      	lsrs	r3, r3, #1
    b5ee:	ea4f 0232 	mov.w	r2, r2, rrx
    b5f2:	ebb6 0e02 	subs.w	lr, r6, r2
    b5f6:	eb75 0e03 	sbcs.w	lr, r5, r3
    b5fa:	bf22      	ittt	cs
    b5fc:	1ab6      	subcs	r6, r6, r2
    b5fe:	4675      	movcs	r5, lr
    b600:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    b604:	085b      	lsrs	r3, r3, #1
    b606:	ea4f 0232 	mov.w	r2, r2, rrx
    b60a:	ebb6 0e02 	subs.w	lr, r6, r2
    b60e:	eb75 0e03 	sbcs.w	lr, r5, r3
    b612:	bf22      	ittt	cs
    b614:	1ab6      	subcs	r6, r6, r2
    b616:	4675      	movcs	r5, lr
    b618:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    b61c:	085b      	lsrs	r3, r3, #1
    b61e:	ea4f 0232 	mov.w	r2, r2, rrx
    b622:	ebb6 0e02 	subs.w	lr, r6, r2
    b626:	eb75 0e03 	sbcs.w	lr, r5, r3
    b62a:	bf22      	ittt	cs
    b62c:	1ab6      	subcs	r6, r6, r2
    b62e:	4675      	movcs	r5, lr
    b630:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    b634:	ea55 0e06 	orrs.w	lr, r5, r6
    b638:	d018      	beq.n	b66c <__aeabi_ddiv+0x114>
    b63a:	ea4f 1505 	mov.w	r5, r5, lsl #4
    b63e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    b642:	ea4f 1606 	mov.w	r6, r6, lsl #4
    b646:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    b64a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    b64e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    b652:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    b656:	d1c0      	bne.n	b5da <__aeabi_ddiv+0x82>
    b658:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b65c:	d10b      	bne.n	b676 <__aeabi_ddiv+0x11e>
    b65e:	ea41 0100 	orr.w	r1, r1, r0
    b662:	f04f 0000 	mov.w	r0, #0
    b666:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    b66a:	e7b6      	b.n	b5da <__aeabi_ddiv+0x82>
    b66c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b670:	bf04      	itt	eq
    b672:	4301      	orreq	r1, r0
    b674:	2000      	moveq	r0, #0
    b676:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b67a:	bf88      	it	hi
    b67c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b680:	f63f aeaf 	bhi.w	b3e2 <__aeabi_dmul+0xde>
    b684:	ebb5 0c03 	subs.w	ip, r5, r3
    b688:	bf04      	itt	eq
    b68a:	ebb6 0c02 	subseq.w	ip, r6, r2
    b68e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b692:	f150 0000 	adcs.w	r0, r0, #0
    b696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b69a:	bd70      	pop	{r4, r5, r6, pc}
    b69c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    b6a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    b6a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    b6a8:	bfc2      	ittt	gt
    b6aa:	ebd4 050c 	rsbsgt	r5, r4, ip
    b6ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b6b2:	bd70      	popgt	{r4, r5, r6, pc}
    b6b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b6b8:	f04f 0e00 	mov.w	lr, #0
    b6bc:	3c01      	subs	r4, #1
    b6be:	e690      	b.n	b3e2 <__aeabi_dmul+0xde>
    b6c0:	ea45 0e06 	orr.w	lr, r5, r6
    b6c4:	e68d      	b.n	b3e2 <__aeabi_dmul+0xde>
    b6c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b6ca:	ea94 0f0c 	teq	r4, ip
    b6ce:	bf08      	it	eq
    b6d0:	ea95 0f0c 	teqeq	r5, ip
    b6d4:	f43f af3b 	beq.w	b54e <__aeabi_dmul+0x24a>
    b6d8:	ea94 0f0c 	teq	r4, ip
    b6dc:	d10a      	bne.n	b6f4 <__aeabi_ddiv+0x19c>
    b6de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b6e2:	f47f af34 	bne.w	b54e <__aeabi_dmul+0x24a>
    b6e6:	ea95 0f0c 	teq	r5, ip
    b6ea:	f47f af25 	bne.w	b538 <__aeabi_dmul+0x234>
    b6ee:	4610      	mov	r0, r2
    b6f0:	4619      	mov	r1, r3
    b6f2:	e72c      	b.n	b54e <__aeabi_dmul+0x24a>
    b6f4:	ea95 0f0c 	teq	r5, ip
    b6f8:	d106      	bne.n	b708 <__aeabi_ddiv+0x1b0>
    b6fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b6fe:	f43f aefd 	beq.w	b4fc <__aeabi_dmul+0x1f8>
    b702:	4610      	mov	r0, r2
    b704:	4619      	mov	r1, r3
    b706:	e722      	b.n	b54e <__aeabi_dmul+0x24a>
    b708:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b70c:	bf18      	it	ne
    b70e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b712:	f47f aec5 	bne.w	b4a0 <__aeabi_dmul+0x19c>
    b716:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    b71a:	f47f af0d 	bne.w	b538 <__aeabi_dmul+0x234>
    b71e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    b722:	f47f aeeb 	bne.w	b4fc <__aeabi_dmul+0x1f8>
    b726:	e712      	b.n	b54e <__aeabi_dmul+0x24a>

0000b728 <__aeabi_d2uiz>:
    b728:	004a      	lsls	r2, r1, #1
    b72a:	d211      	bcs.n	b750 <__aeabi_d2uiz+0x28>
    b72c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    b730:	d211      	bcs.n	b756 <__aeabi_d2uiz+0x2e>
    b732:	d50d      	bpl.n	b750 <__aeabi_d2uiz+0x28>
    b734:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    b738:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    b73c:	d40e      	bmi.n	b75c <__aeabi_d2uiz+0x34>
    b73e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    b742:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b746:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    b74a:	fa23 f002 	lsr.w	r0, r3, r2
    b74e:	4770      	bx	lr
    b750:	f04f 0000 	mov.w	r0, #0
    b754:	4770      	bx	lr
    b756:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    b75a:	d102      	bne.n	b762 <__aeabi_d2uiz+0x3a>
    b75c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b760:	4770      	bx	lr
    b762:	f04f 0000 	mov.w	r0, #0
    b766:	4770      	bx	lr

0000b768 <memcmp>:
    b768:	2a03      	cmp	r2, #3
    b76a:	b470      	push	{r4, r5, r6}
    b76c:	d926      	bls.n	b7bc <memcmp+0x54>
    b76e:	ea40 0301 	orr.w	r3, r0, r1
    b772:	079b      	lsls	r3, r3, #30
    b774:	d011      	beq.n	b79a <memcmp+0x32>
    b776:	7804      	ldrb	r4, [r0, #0]
    b778:	780d      	ldrb	r5, [r1, #0]
    b77a:	42ac      	cmp	r4, r5
    b77c:	d122      	bne.n	b7c4 <memcmp+0x5c>
    b77e:	4402      	add	r2, r0
    b780:	1c43      	adds	r3, r0, #1
    b782:	e005      	b.n	b790 <memcmp+0x28>
    b784:	f813 4b01 	ldrb.w	r4, [r3], #1
    b788:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    b78c:	42ac      	cmp	r4, r5
    b78e:	d119      	bne.n	b7c4 <memcmp+0x5c>
    b790:	4293      	cmp	r3, r2
    b792:	d1f7      	bne.n	b784 <memcmp+0x1c>
    b794:	2000      	movs	r0, #0
    b796:	bc70      	pop	{r4, r5, r6}
    b798:	4770      	bx	lr
    b79a:	460c      	mov	r4, r1
    b79c:	4603      	mov	r3, r0
    b79e:	681e      	ldr	r6, [r3, #0]
    b7a0:	6825      	ldr	r5, [r4, #0]
    b7a2:	4618      	mov	r0, r3
    b7a4:	42ae      	cmp	r6, r5
    b7a6:	4621      	mov	r1, r4
    b7a8:	f103 0304 	add.w	r3, r3, #4
    b7ac:	f104 0404 	add.w	r4, r4, #4
    b7b0:	d104      	bne.n	b7bc <memcmp+0x54>
    b7b2:	3a04      	subs	r2, #4
    b7b4:	2a03      	cmp	r2, #3
    b7b6:	4618      	mov	r0, r3
    b7b8:	4621      	mov	r1, r4
    b7ba:	d8f0      	bhi.n	b79e <memcmp+0x36>
    b7bc:	2a00      	cmp	r2, #0
    b7be:	d1da      	bne.n	b776 <memcmp+0xe>
    b7c0:	4610      	mov	r0, r2
    b7c2:	e7e8      	b.n	b796 <memcmp+0x2e>
    b7c4:	1b60      	subs	r0, r4, r5
    b7c6:	bc70      	pop	{r4, r5, r6}
    b7c8:	4770      	bx	lr
    b7ca:	bf00      	nop

0000b7cc <memcpy>:
    b7cc:	4684      	mov	ip, r0
    b7ce:	ea41 0300 	orr.w	r3, r1, r0
    b7d2:	f013 0303 	ands.w	r3, r3, #3
    b7d6:	d149      	bne.n	b86c <memcpy+0xa0>
    b7d8:	3a40      	subs	r2, #64	; 0x40
    b7da:	d323      	bcc.n	b824 <memcpy+0x58>
    b7dc:	680b      	ldr	r3, [r1, #0]
    b7de:	6003      	str	r3, [r0, #0]
    b7e0:	684b      	ldr	r3, [r1, #4]
    b7e2:	6043      	str	r3, [r0, #4]
    b7e4:	688b      	ldr	r3, [r1, #8]
    b7e6:	6083      	str	r3, [r0, #8]
    b7e8:	68cb      	ldr	r3, [r1, #12]
    b7ea:	60c3      	str	r3, [r0, #12]
    b7ec:	690b      	ldr	r3, [r1, #16]
    b7ee:	6103      	str	r3, [r0, #16]
    b7f0:	694b      	ldr	r3, [r1, #20]
    b7f2:	6143      	str	r3, [r0, #20]
    b7f4:	698b      	ldr	r3, [r1, #24]
    b7f6:	6183      	str	r3, [r0, #24]
    b7f8:	69cb      	ldr	r3, [r1, #28]
    b7fa:	61c3      	str	r3, [r0, #28]
    b7fc:	6a0b      	ldr	r3, [r1, #32]
    b7fe:	6203      	str	r3, [r0, #32]
    b800:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    b802:	6243      	str	r3, [r0, #36]	; 0x24
    b804:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    b806:	6283      	str	r3, [r0, #40]	; 0x28
    b808:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    b80a:	62c3      	str	r3, [r0, #44]	; 0x2c
    b80c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    b80e:	6303      	str	r3, [r0, #48]	; 0x30
    b810:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    b812:	6343      	str	r3, [r0, #52]	; 0x34
    b814:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    b816:	6383      	str	r3, [r0, #56]	; 0x38
    b818:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    b81a:	63c3      	str	r3, [r0, #60]	; 0x3c
    b81c:	3040      	adds	r0, #64	; 0x40
    b81e:	3140      	adds	r1, #64	; 0x40
    b820:	3a40      	subs	r2, #64	; 0x40
    b822:	d2db      	bcs.n	b7dc <memcpy+0x10>
    b824:	3230      	adds	r2, #48	; 0x30
    b826:	d30b      	bcc.n	b840 <memcpy+0x74>
    b828:	680b      	ldr	r3, [r1, #0]
    b82a:	6003      	str	r3, [r0, #0]
    b82c:	684b      	ldr	r3, [r1, #4]
    b82e:	6043      	str	r3, [r0, #4]
    b830:	688b      	ldr	r3, [r1, #8]
    b832:	6083      	str	r3, [r0, #8]
    b834:	68cb      	ldr	r3, [r1, #12]
    b836:	60c3      	str	r3, [r0, #12]
    b838:	3010      	adds	r0, #16
    b83a:	3110      	adds	r1, #16
    b83c:	3a10      	subs	r2, #16
    b83e:	d2f3      	bcs.n	b828 <memcpy+0x5c>
    b840:	320c      	adds	r2, #12
    b842:	d305      	bcc.n	b850 <memcpy+0x84>
    b844:	f851 3b04 	ldr.w	r3, [r1], #4
    b848:	f840 3b04 	str.w	r3, [r0], #4
    b84c:	3a04      	subs	r2, #4
    b84e:	d2f9      	bcs.n	b844 <memcpy+0x78>
    b850:	3204      	adds	r2, #4
    b852:	d008      	beq.n	b866 <memcpy+0x9a>
    b854:	07d2      	lsls	r2, r2, #31
    b856:	bf1c      	itt	ne
    b858:	f811 3b01 	ldrbne.w	r3, [r1], #1
    b85c:	f800 3b01 	strbne.w	r3, [r0], #1
    b860:	d301      	bcc.n	b866 <memcpy+0x9a>
    b862:	880b      	ldrh	r3, [r1, #0]
    b864:	8003      	strh	r3, [r0, #0]
    b866:	4660      	mov	r0, ip
    b868:	4770      	bx	lr
    b86a:	bf00      	nop
    b86c:	2a08      	cmp	r2, #8
    b86e:	d313      	bcc.n	b898 <memcpy+0xcc>
    b870:	078b      	lsls	r3, r1, #30
    b872:	d0b1      	beq.n	b7d8 <memcpy+0xc>
    b874:	f010 0303 	ands.w	r3, r0, #3
    b878:	d0ae      	beq.n	b7d8 <memcpy+0xc>
    b87a:	f1c3 0304 	rsb	r3, r3, #4
    b87e:	1ad2      	subs	r2, r2, r3
    b880:	07db      	lsls	r3, r3, #31
    b882:	bf1c      	itt	ne
    b884:	f811 3b01 	ldrbne.w	r3, [r1], #1
    b888:	f800 3b01 	strbne.w	r3, [r0], #1
    b88c:	d3a4      	bcc.n	b7d8 <memcpy+0xc>
    b88e:	f831 3b02 	ldrh.w	r3, [r1], #2
    b892:	f820 3b02 	strh.w	r3, [r0], #2
    b896:	e79f      	b.n	b7d8 <memcpy+0xc>
    b898:	3a04      	subs	r2, #4
    b89a:	d3d9      	bcc.n	b850 <memcpy+0x84>
    b89c:	3a01      	subs	r2, #1
    b89e:	f811 3b01 	ldrb.w	r3, [r1], #1
    b8a2:	f800 3b01 	strb.w	r3, [r0], #1
    b8a6:	d2f9      	bcs.n	b89c <memcpy+0xd0>
    b8a8:	780b      	ldrb	r3, [r1, #0]
    b8aa:	7003      	strb	r3, [r0, #0]
    b8ac:	784b      	ldrb	r3, [r1, #1]
    b8ae:	7043      	strb	r3, [r0, #1]
    b8b0:	788b      	ldrb	r3, [r1, #2]
    b8b2:	7083      	strb	r3, [r0, #2]
    b8b4:	4660      	mov	r0, ip
    b8b6:	4770      	bx	lr

0000b8b8 <strlen>:
    b8b8:	f020 0103 	bic.w	r1, r0, #3
    b8bc:	f010 0003 	ands.w	r0, r0, #3
    b8c0:	f1c0 0000 	rsb	r0, r0, #0
    b8c4:	f851 3b04 	ldr.w	r3, [r1], #4
    b8c8:	f100 0c04 	add.w	ip, r0, #4
    b8cc:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    b8d0:	f06f 0200 	mvn.w	r2, #0
    b8d4:	bf1c      	itt	ne
    b8d6:	fa22 f20c 	lsrne.w	r2, r2, ip
    b8da:	4313      	orrne	r3, r2
    b8dc:	f04f 0c01 	mov.w	ip, #1
    b8e0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    b8e4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    b8e8:	eba3 020c 	sub.w	r2, r3, ip
    b8ec:	ea22 0203 	bic.w	r2, r2, r3
    b8f0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    b8f4:	bf04      	itt	eq
    b8f6:	f851 3b04 	ldreq.w	r3, [r1], #4
    b8fa:	3004      	addeq	r0, #4
    b8fc:	d0f4      	beq.n	b8e8 <strlen+0x30>
    b8fe:	f1c2 0100 	rsb	r1, r2, #0
    b902:	ea02 0201 	and.w	r2, r2, r1
    b906:	fab2 f282 	clz	r2, r2
    b90a:	f1c2 021f 	rsb	r2, r2, #31
    b90e:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    b912:	4770      	bx	lr
    b914:	00000043 	.word	0x00000043

0000b918 <_global_impure_ptr>:
    b918:	10000020                                 ...

0000b91c <advertising_channels>:
    b91c:	00270c00                                ..'.

0000b920 <data_channels>:
    b920:	04030201 08070605 0d0b0a09 11100f0e     ................
    b930:	15141312 19181716 1d1c1b1a 21201f1e     .............. !
    b940:	25242322 00000026                       "#$%&...

0000b948 <payload>:
    b948:	aaaaaaca aaaaaaaa aaaaaaaa aaaaaaaa     ................
    b958:	aaaaaaaa                                ....

0000b95c <whitening>:
    b95c:	01010101 01000100 00000100 00010000     ................
    b96c:	01000101 00010101 01010100 00010000     ................
    b97c:	01010001 01010000 00000000 00010100     ................
    b98c:	01000101 01010100 00000100 00010100     ................
    b99c:	00000100 00000100 00000000 01000001     ................
    b9ac:	01010000 00000100 01010101 01010100     ................
    b9bc:	00000000 01010101 00010101 01010000     ................
    b9cc:	01010001 01000000 00000100 00010001     ................

0000b9dc <whitening_index>:
    b9dc:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    b9ec:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    b9fc:	5a541b28 662f703f                       (.TZ?p/f

0000ba04 <hop_interval_lut>:
    ba04:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    ba14:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    ba24:	120c0916 00000024                       ....$...

0000ba2c <whitening_word>:
    ba2c:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    ba3c:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    ba4c:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    ba5c:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    ba6c:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    ba7c:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    ba8c:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    ba9c:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    baac:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    babc:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    bacc:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    badc:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    baec:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    bafc:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    bb0c:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    bb1c:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    bb2c:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    bb3c:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    bb4c:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    bb5c:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    bb6c:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    bb7c:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    bb8c:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    bb9c:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    bbac:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    bbbc:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    bbcc:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    bbdc:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    bbec:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    bbfc:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    bc0c:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    bc1c:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    bc2c:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    bc3c:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    bc4c:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    bc5c:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    bc6c:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    bc7c:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    bc8c:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    bc9c:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    bcac:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    bcbc:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    bccc:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    bcdc:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    bcec:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    bcfc:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    bd0c:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    bd1c:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    bd2c:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    bd3c:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    bd4c:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    bd5c:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    bd6c:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    bd7c:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    bd8c:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    bd9c:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    bdac:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    bdbc:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    bdcc:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    bddc:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    bdec:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    bdfc:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    be0c:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    be1c:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    be2c:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    be3c:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    be4c:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    be5c:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    be6c:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    be7c:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    be8c:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    be9c:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    beac:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    bebc:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    becc:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    bedc:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    beec:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    befc:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    bf0c:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    bf1c:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    bf2c:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    bf3c:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    bf4c:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    bf5c:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    bf6c:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    bf7c:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    bf8c:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    bf9c:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    bfac:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    bfbc:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    bfcc:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    bfdc:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    bfec:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    bffc:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    c00c:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    c01c:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    c02c:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    c03c:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    c04c:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    c05c:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    c06c:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    c07c:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    c08c:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    c09c:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    c0ac:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    c0bc:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    c0cc:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    c0dc:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    c0ec:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    c0fc:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    c10c:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    c11c:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    c12c:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    c13c:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    c14c:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    c15c:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    c16c:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    c17c:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    c18c:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    c19c:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

0000c1ac <compile_info>:
    c1ac:	72656275 746f6f74 30322068 312d3531     ubertooth 2015-1
    c1bc:	31522d30 6f722820 7740746f 69706965     0-R1 (root@weipi
    c1cc:	2029676e 20646557 20766f4e 31203220     ng) Wed Nov  2 1
    c1dc:	37343a39 2039303a 2054534b 36313032     9:47:09 KST 2016
    c1ec:	00000000                                ....

0000c1f0 <eddystone>:
    c1f0:	4b008fb3 7210e485 d2e80cee 6f60bba9     ...K...r......`o
    c200:	0baac20a cc477dae 9e621a0a f1d7d924     .....}G...b.$...
    c210:	d8932eb3 00000019 35313032 2d30312d     ........2015-10-
    c220:	00003152 00000001 00000001 00000001     R1..............
    c230:	00000001 ffff0900 ffffffff ff050102     ................
    c240:	0000ffff 0985096c 0000099e 03010200     ....l...........
    c250:	03000100 01020001 00000100 04020301     ................
    c260:	04020304 03040304 00000203              ............

0000c26c <abDescriptors>:
    c26c:	02000112 400000ff 60021d50 02010101     .......@P..`....
    c27c:	02090103 01010020 096e8000 02000004     .... .....n.....
    c28c:	000000ff 02820507 07000040 40020505     ........@......@
    c29c:	03040000 035c0409 00740068 00700074     ......\.h.t.t.p.
    c2ac:	002f003a 0067002f 00740069 00750068     :././.g.i.t.h.u.
    c2bc:	002e0062 006f0063 002f006d 00720067     b...c.o.m./.g.r.
    c2cc:	00610065 00730074 006f0063 00740074     e.a.t.s.c.o.t.t.
    c2dc:	00610067 00670064 00740065 002f0073     g.a.d.g.e.t.s./.
    c2ec:	00620075 00720065 006f0074 0074006f     u.b.e.r.t.o.o.t.
    c2fc:	031e0068 006c0062 00650075 006f0074     h...b.l.u.e.t.o.
    c30c:	0074006f 005f0068 00780072 00780074     o.t.h._.r.x.t.x.
    c31c:	00300312 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
    c32c:	00000031 6361387b 38613734 63632d38     1...{8ac47a88-cc
    c33c:	342d3632 2d396161 62373838 6332342d     26-4aa9-887b-42c
    c34c:	66633861 36613730 00007d33 00009285     a8cf07a63}......
    c35c:	000092b9 000092d1 000093b9 00009271     ............q...
    c36c:	00009271 00009271 0000941d 000092b9     q...q...........
    c37c:	00009435 00009271 00009271 00009271     5...q...q...q...
    c38c:	00009285 000092b9 00009509 000096c9     ................
    c39c:	00009589 0000964d                       ....M...

0000c3a4 <abExtendedOsFeatureDescriptor>:
    c3a4:	00000028 00040100 00000001 00000000     (...............
    c3b4:	49570100 4253554e 00000000 00000000     ..WINUSB........
    c3c4:	00000000 00000000                       ........

0000c3cc <_init>:
    c3cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3ce:	bf00      	nop
    c3d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c3d2:	bc08      	pop	{r3}
    c3d4:	469e      	mov	lr, r3
    c3d6:	4770      	bx	lr

0000c3d8 <__init_array_start>:
    c3d8:	00004215 	.word	0x00004215

0000c3dc <__frame_dummy_init_array_entry>:
    c3dc:	000040f1                                .@..

0000c3e0 <_fini>:
    c3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c3e2:	bf00      	nop
    c3e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c3e6:	bc08      	pop	{r3}
    c3e8:	469e      	mov	lr, r3
    c3ea:	4770      	bx	lr

0000c3ec <__fini_array_start>:
    c3ec:	000040cd 	.word	0x000040cd
