
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000075d8  00004000  00004000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         00000942  10000020  0000b5d8  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002900  10000968  0000bf1a  00010968  2**3
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010962  2**0
                  CONTENTS, READONLY
  5 .comment      00000070  00000000  00000000  0001098b  2**0
                  CONTENTS, READONLY
  6 .debug_frame  00001c20  00000000  00000000  000109fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004f3f  00000000  00000000  0001261c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001517  00000000  00000000  0001755b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006b0  00000000  00000000  00018a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005d0  00000000  00000000  00019122  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002651  00000000  00000000  000196f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002250  00000000  00000000  0001bd43  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 f1 91 00 00 5d 92 00 00 5d 92 00 00     .?......]...]...
    4010:	5d 92 00 00 5d 92 00 00 5d 92 00 00 00 00 00 00     ]...]...].......
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 5d 92 00 00     ............]...
    4030:	5d 92 00 00 00 00 00 00 5d 92 00 00 5d 92 00 00     ].......]...]...
    4040:	5d 92 00 00 25 53 00 00 5d 92 00 00 5d 92 00 00     ]...%S..]...]...
    4050:	5d 92 00 00 5d 92 00 00 5d 92 00 00 5d 92 00 00     ]...]...]...]...
    4060:	5d 92 00 00 5d 92 00 00 5d 92 00 00 5d 92 00 00     ]...]...]...]...
    4070:	5d 92 00 00 5d 92 00 00 5d 92 00 00 5d 92 00 00     ]...]...]...]...
    4080:	5d 92 00 00 5d 92 00 00 5d 92 00 00 5d 92 00 00     ]...]...]...]...
    4090:	5d 92 00 00 75 54 00 00 5d 92 00 00 5d 92 00 00     ]...uT..]...]...
    40a0:	e5 91 00 00 5d 92 00 00 7d 58 00 00 5d 92 00 00     ....]...}X..]...
    40b0:	5d 92 00 00 5d 92 00 00 5d 92 00 00 5d 92 00 00     ]...]...]...]...
    40c0:	5d 92 00 00 5d 92 00 00 5d 92 00 00                 ]...]...]...

000040cc <__do_global_dtors_aux>:
    40cc:	b510      	push	{r4, lr}
    40ce:	4c05      	ldr	r4, [pc, #20]	; (40e4 <__do_global_dtors_aux+0x18>)
    40d0:	7823      	ldrb	r3, [r4, #0]
    40d2:	b933      	cbnz	r3, 40e2 <__do_global_dtors_aux+0x16>
    40d4:	4b04      	ldr	r3, [pc, #16]	; (40e8 <__do_global_dtors_aux+0x1c>)
    40d6:	b113      	cbz	r3, 40de <__do_global_dtors_aux+0x12>
    40d8:	4804      	ldr	r0, [pc, #16]	; (40ec <__do_global_dtors_aux+0x20>)
    40da:	f3af 8000 	nop.w
    40de:	2301      	movs	r3, #1
    40e0:	7023      	strb	r3, [r4, #0]
    40e2:	bd10      	pop	{r4, pc}
    40e4:	10000968 	.word	0x10000968
    40e8:	00000000 	.word	0x00000000
    40ec:	0000b5b0 	.word	0x0000b5b0

000040f0 <frame_dummy>:
    40f0:	4b08      	ldr	r3, [pc, #32]	; (4114 <frame_dummy+0x24>)
    40f2:	b510      	push	{r4, lr}
    40f4:	b11b      	cbz	r3, 40fe <frame_dummy+0xe>
    40f6:	4808      	ldr	r0, [pc, #32]	; (4118 <frame_dummy+0x28>)
    40f8:	4908      	ldr	r1, [pc, #32]	; (411c <frame_dummy+0x2c>)
    40fa:	f3af 8000 	nop.w
    40fe:	4808      	ldr	r0, [pc, #32]	; (4120 <frame_dummy+0x30>)
    4100:	6803      	ldr	r3, [r0, #0]
    4102:	b903      	cbnz	r3, 4106 <frame_dummy+0x16>
    4104:	bd10      	pop	{r4, pc}
    4106:	4b07      	ldr	r3, [pc, #28]	; (4124 <frame_dummy+0x34>)
    4108:	2b00      	cmp	r3, #0
    410a:	d0fb      	beq.n	4104 <frame_dummy+0x14>
    410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4110:	4718      	bx	r3
    4112:	bf00      	nop
    4114:	00000000 	.word	0x00000000
    4118:	0000b5b0 	.word	0x0000b5b0
    411c:	1000096c 	.word	0x1000096c
    4120:	10000964 	.word	0x10000964
    4124:	00000000 	.word	0x00000000

00004128 <__libc_init_array>:
    4128:	b570      	push	{r4, r5, r6, lr}
    412a:	4e0f      	ldr	r6, [pc, #60]	; (4168 <__libc_init_array+0x40>)
    412c:	4d0f      	ldr	r5, [pc, #60]	; (416c <__libc_init_array+0x44>)
    412e:	1b76      	subs	r6, r6, r5
    4130:	10b6      	asrs	r6, r6, #2
    4132:	bf18      	it	ne
    4134:	2400      	movne	r4, #0
    4136:	d005      	beq.n	4144 <__libc_init_array+0x1c>
    4138:	3401      	adds	r4, #1
    413a:	f855 3b04 	ldr.w	r3, [r5], #4
    413e:	4798      	blx	r3
    4140:	42a6      	cmp	r6, r4
    4142:	d1f9      	bne.n	4138 <__libc_init_array+0x10>
    4144:	4e0a      	ldr	r6, [pc, #40]	; (4170 <__libc_init_array+0x48>)
    4146:	4d0b      	ldr	r5, [pc, #44]	; (4174 <__libc_init_array+0x4c>)
    4148:	f007 fa32 	bl	b5b0 <_init>
    414c:	1b76      	subs	r6, r6, r5
    414e:	10b6      	asrs	r6, r6, #2
    4150:	bf18      	it	ne
    4152:	2400      	movne	r4, #0
    4154:	d006      	beq.n	4164 <__libc_init_array+0x3c>
    4156:	3401      	adds	r4, #1
    4158:	f855 3b04 	ldr.w	r3, [r5], #4
    415c:	4798      	blx	r3
    415e:	42a6      	cmp	r6, r4
    4160:	d1f9      	bne.n	4156 <__libc_init_array+0x2e>
    4162:	bd70      	pop	{r4, r5, r6, pc}
    4164:	bd70      	pop	{r4, r5, r6, pc}
    4166:	bf00      	nop
    4168:	0000b5bc 	.word	0x0000b5bc
    416c:	0000b5bc 	.word	0x0000b5bc
    4170:	0000b5c4 	.word	0x0000b5c4
    4174:	0000b5bc 	.word	0x0000b5bc

00004178 <memset>:
    4178:	b470      	push	{r4, r5, r6}
    417a:	0784      	lsls	r4, r0, #30
    417c:	d046      	beq.n	420c <memset+0x94>
    417e:	1e54      	subs	r4, r2, #1
    4180:	2a00      	cmp	r2, #0
    4182:	d041      	beq.n	4208 <memset+0x90>
    4184:	b2cd      	uxtb	r5, r1
    4186:	4603      	mov	r3, r0
    4188:	e002      	b.n	4190 <memset+0x18>
    418a:	1e62      	subs	r2, r4, #1
    418c:	b3e4      	cbz	r4, 4208 <memset+0x90>
    418e:	4614      	mov	r4, r2
    4190:	f803 5b01 	strb.w	r5, [r3], #1
    4194:	079a      	lsls	r2, r3, #30
    4196:	d1f8      	bne.n	418a <memset+0x12>
    4198:	2c03      	cmp	r4, #3
    419a:	d92e      	bls.n	41fa <memset+0x82>
    419c:	b2cd      	uxtb	r5, r1
    419e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    41a2:	2c0f      	cmp	r4, #15
    41a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    41a8:	d919      	bls.n	41de <memset+0x66>
    41aa:	4626      	mov	r6, r4
    41ac:	f103 0210 	add.w	r2, r3, #16
    41b0:	3e10      	subs	r6, #16
    41b2:	2e0f      	cmp	r6, #15
    41b4:	f842 5c10 	str.w	r5, [r2, #-16]
    41b8:	f842 5c0c 	str.w	r5, [r2, #-12]
    41bc:	f842 5c08 	str.w	r5, [r2, #-8]
    41c0:	f842 5c04 	str.w	r5, [r2, #-4]
    41c4:	f102 0210 	add.w	r2, r2, #16
    41c8:	d8f2      	bhi.n	41b0 <memset+0x38>
    41ca:	f1a4 0210 	sub.w	r2, r4, #16
    41ce:	f022 020f 	bic.w	r2, r2, #15
    41d2:	f004 040f 	and.w	r4, r4, #15
    41d6:	3210      	adds	r2, #16
    41d8:	2c03      	cmp	r4, #3
    41da:	4413      	add	r3, r2
    41dc:	d90d      	bls.n	41fa <memset+0x82>
    41de:	461e      	mov	r6, r3
    41e0:	4622      	mov	r2, r4
    41e2:	3a04      	subs	r2, #4
    41e4:	2a03      	cmp	r2, #3
    41e6:	f846 5b04 	str.w	r5, [r6], #4
    41ea:	d8fa      	bhi.n	41e2 <memset+0x6a>
    41ec:	1f22      	subs	r2, r4, #4
    41ee:	f022 0203 	bic.w	r2, r2, #3
    41f2:	3204      	adds	r2, #4
    41f4:	4413      	add	r3, r2
    41f6:	f004 0403 	and.w	r4, r4, #3
    41fa:	b12c      	cbz	r4, 4208 <memset+0x90>
    41fc:	b2c9      	uxtb	r1, r1
    41fe:	441c      	add	r4, r3
    4200:	f803 1b01 	strb.w	r1, [r3], #1
    4204:	42a3      	cmp	r3, r4
    4206:	d1fb      	bne.n	4200 <memset+0x88>
    4208:	bc70      	pop	{r4, r5, r6}
    420a:	4770      	bx	lr
    420c:	4614      	mov	r4, r2
    420e:	4603      	mov	r3, r0
    4210:	e7c2      	b.n	4198 <memset+0x20>
    4212:	bf00      	nop

00004214 <register_fini>:
    4214:	4b02      	ldr	r3, [pc, #8]	; (4220 <register_fini+0xc>)
    4216:	b113      	cbz	r3, 421e <register_fini+0xa>
    4218:	4802      	ldr	r0, [pc, #8]	; (4224 <register_fini+0x10>)
    421a:	f000 b805 	b.w	4228 <atexit>
    421e:	4770      	bx	lr
    4220:	00000000 	.word	0x00000000
    4224:	00004235 	.word	0x00004235

00004228 <atexit>:
    4228:	4601      	mov	r1, r0
    422a:	2000      	movs	r0, #0
    422c:	4602      	mov	r2, r0
    422e:	4603      	mov	r3, r0
    4230:	f000 b816 	b.w	4260 <__register_exitproc>

00004234 <__libc_fini_array>:
    4234:	b538      	push	{r3, r4, r5, lr}
    4236:	4b08      	ldr	r3, [pc, #32]	; (4258 <__libc_fini_array+0x24>)
    4238:	4d08      	ldr	r5, [pc, #32]	; (425c <__libc_fini_array+0x28>)
    423a:	1aed      	subs	r5, r5, r3
    423c:	10ac      	asrs	r4, r5, #2
    423e:	bf18      	it	ne
    4240:	18ed      	addne	r5, r5, r3
    4242:	d005      	beq.n	4250 <__libc_fini_array+0x1c>
    4244:	3c01      	subs	r4, #1
    4246:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    424a:	4798      	blx	r3
    424c:	2c00      	cmp	r4, #0
    424e:	d1f9      	bne.n	4244 <__libc_fini_array+0x10>
    4250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4254:	f007 b9b6 	b.w	b5c4 <_fini>
    4258:	0000b5d0 	.word	0x0000b5d0
    425c:	0000b5d4 	.word	0x0000b5d4

00004260 <__register_exitproc>:
    4260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4264:	4c25      	ldr	r4, [pc, #148]	; (42fc <__register_exitproc+0x9c>)
    4266:	4606      	mov	r6, r0
    4268:	6825      	ldr	r5, [r4, #0]
    426a:	4688      	mov	r8, r1
    426c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    4270:	4692      	mov	sl, r2
    4272:	4699      	mov	r9, r3
    4274:	b3c4      	cbz	r4, 42e8 <__register_exitproc+0x88>
    4276:	6860      	ldr	r0, [r4, #4]
    4278:	281f      	cmp	r0, #31
    427a:	dc17      	bgt.n	42ac <__register_exitproc+0x4c>
    427c:	1c41      	adds	r1, r0, #1
    427e:	b176      	cbz	r6, 429e <__register_exitproc+0x3e>
    4280:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    4284:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    4288:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
    428c:	2201      	movs	r2, #1
    428e:	4082      	lsls	r2, r0
    4290:	4315      	orrs	r5, r2
    4292:	2e02      	cmp	r6, #2
    4294:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    4298:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
    429c:	d01e      	beq.n	42dc <__register_exitproc+0x7c>
    429e:	1c83      	adds	r3, r0, #2
    42a0:	6061      	str	r1, [r4, #4]
    42a2:	2000      	movs	r0, #0
    42a4:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
    42a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42ac:	4b14      	ldr	r3, [pc, #80]	; (4300 <__register_exitproc+0xa0>)
    42ae:	b303      	cbz	r3, 42f2 <__register_exitproc+0x92>
    42b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42b4:	f3af 8000 	nop.w
    42b8:	4604      	mov	r4, r0
    42ba:	b1d0      	cbz	r0, 42f2 <__register_exitproc+0x92>
    42bc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    42c0:	2700      	movs	r7, #0
    42c2:	e884 0088 	stmia.w	r4, {r3, r7}
    42c6:	4638      	mov	r0, r7
    42c8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42cc:	2101      	movs	r1, #1
    42ce:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    42d2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    42d6:	2e00      	cmp	r6, #0
    42d8:	d0e1      	beq.n	429e <__register_exitproc+0x3e>
    42da:	e7d1      	b.n	4280 <__register_exitproc+0x20>
    42dc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    42e0:	431a      	orrs	r2, r3
    42e2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    42e6:	e7da      	b.n	429e <__register_exitproc+0x3e>
    42e8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    42ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42f0:	e7c1      	b.n	4276 <__register_exitproc+0x16>
    42f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42fa:	bf00      	nop
    42fc:	0000ab4c 	.word	0x0000ab4c
    4300:	00000000 	.word	0x00000000

00004304 <rssi_reset>:
int8_t rssi_min = INT8_MIN;
uint8_t rssi_count = 0;
int32_t rssi_sum = 0;

static void rssi_reset(void)
{
    4304:	b480      	push	{r7}
    4306:	af00      	add	r7, sp, #0
	rssi_count = 0;
    4308:	4b07      	ldr	r3, [pc, #28]	; (4328 <rssi_reset+0x24>)
    430a:	2200      	movs	r2, #0
    430c:	701a      	strb	r2, [r3, #0]
	rssi_sum = 0;
    430e:	4b07      	ldr	r3, [pc, #28]	; (432c <rssi_reset+0x28>)
    4310:	2200      	movs	r2, #0
    4312:	601a      	str	r2, [r3, #0]
	rssi_max = INT8_MIN;
    4314:	4b06      	ldr	r3, [pc, #24]	; (4330 <rssi_reset+0x2c>)
    4316:	2280      	movs	r2, #128	; 0x80
    4318:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    431a:	4b06      	ldr	r3, [pc, #24]	; (4334 <rssi_reset+0x30>)
    431c:	227f      	movs	r2, #127	; 0x7f
    431e:	701a      	strb	r2, [r3, #0]
}
    4320:	46bd      	mov	sp, r7
    4322:	f85d 7b04 	ldr.w	r7, [sp], #4
    4326:	4770      	bx	lr
    4328:	10000a59 	.word	0x10000a59
    432c:	10000a5c 	.word	0x10000a5c
    4330:	100004a3 	.word	0x100004a3
    4334:	100004a4 	.word	0x100004a4

00004338 <rssi_add>:

static void rssi_add(int8_t v)
{
    4338:	b480      	push	{r7}
    433a:	b083      	sub	sp, #12
    433c:	af00      	add	r7, sp, #0
    433e:	4603      	mov	r3, r0
    4340:	71fb      	strb	r3, [r7, #7]
	rssi_max = (v > rssi_max) ? v : rssi_max;
    4342:	4b14      	ldr	r3, [pc, #80]	; (4394 <rssi_add+0x5c>)
    4344:	781b      	ldrb	r3, [r3, #0]
    4346:	b25a      	sxtb	r2, r3
    4348:	f997 3007 	ldrsb.w	r3, [r7, #7]
    434c:	4293      	cmp	r3, r2
    434e:	bfb8      	it	lt
    4350:	4613      	movlt	r3, r2
    4352:	b2da      	uxtb	r2, r3
    4354:	4b0f      	ldr	r3, [pc, #60]	; (4394 <rssi_add+0x5c>)
    4356:	701a      	strb	r2, [r3, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    4358:	4b0f      	ldr	r3, [pc, #60]	; (4398 <rssi_add+0x60>)
    435a:	781b      	ldrb	r3, [r3, #0]
    435c:	b25a      	sxtb	r2, r3
    435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4362:	4293      	cmp	r3, r2
    4364:	bfa8      	it	ge
    4366:	4613      	movge	r3, r2
    4368:	b2da      	uxtb	r2, r3
    436a:	4b0b      	ldr	r3, [pc, #44]	; (4398 <rssi_add+0x60>)
    436c:	701a      	strb	r2, [r3, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4372:	021a      	lsls	r2, r3, #8
    4374:	4b09      	ldr	r3, [pc, #36]	; (439c <rssi_add+0x64>)
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	4413      	add	r3, r2
    437a:	4a08      	ldr	r2, [pc, #32]	; (439c <rssi_add+0x64>)
    437c:	6013      	str	r3, [r2, #0]
	rssi_count += 1;
    437e:	4b08      	ldr	r3, [pc, #32]	; (43a0 <rssi_add+0x68>)
    4380:	781b      	ldrb	r3, [r3, #0]
    4382:	3301      	adds	r3, #1
    4384:	b2da      	uxtb	r2, r3
    4386:	4b06      	ldr	r3, [pc, #24]	; (43a0 <rssi_add+0x68>)
    4388:	701a      	strb	r2, [r3, #0]
}
    438a:	370c      	adds	r7, #12
    438c:	46bd      	mov	sp, r7
    438e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4392:	4770      	bx	lr
    4394:	100004a3 	.word	0x100004a3
    4398:	100004a4 	.word	0x100004a4
    439c:	10000a5c 	.word	0x10000a5c
    43a0:	10000a59 	.word	0x10000a59

000043a4 <rssi_iir_update>:

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
static void rssi_iir_update(void)
{
    43a4:	b480      	push	{r7}
    43a6:	b085      	sub	sp, #20
    43a8:	af00      	add	r7, sp, #0
	int32_t avg;
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first
	 * slot of array if not sweeping. */
	if (hop_mode > 0)
    43aa:	4b1f      	ldr	r3, [pc, #124]	; (4428 <rssi_iir_update+0x84>)
    43ac:	781b      	ldrb	r3, [r3, #0]
    43ae:	b2db      	uxtb	r3, r3
    43b0:	2b00      	cmp	r3, #0
    43b2:	d006      	beq.n	43c2 <rssi_iir_update+0x1e>
		i = channel - 2402;
    43b4:	4b1d      	ldr	r3, [pc, #116]	; (442c <rssi_iir_update+0x88>)
    43b6:	881b      	ldrh	r3, [r3, #0]
    43b8:	b29b      	uxth	r3, r3
    43ba:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    43be:	60fb      	str	r3, [r7, #12]
    43c0:	e001      	b.n	43c6 <rssi_iir_update+0x22>
	else
		i = 0;
    43c2:	2300      	movs	r3, #0
    43c4:	60fb      	str	r3, [r7, #12]

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    43c6:	4b1a      	ldr	r3, [pc, #104]	; (4430 <rssi_iir_update+0x8c>)
    43c8:	781b      	ldrb	r3, [r3, #0]
    43ca:	2b00      	cmp	r3, #0
    43cc:	d008      	beq.n	43e0 <rssi_iir_update+0x3c>
		avg = (rssi_sum  + 128) / rssi_count;
    43ce:	4b19      	ldr	r3, [pc, #100]	; (4434 <rssi_iir_update+0x90>)
    43d0:	681b      	ldr	r3, [r3, #0]
    43d2:	3380      	adds	r3, #128	; 0x80
    43d4:	4a16      	ldr	r2, [pc, #88]	; (4430 <rssi_iir_update+0x8c>)
    43d6:	7812      	ldrb	r2, [r2, #0]
    43d8:	fb93 f3f2 	sdiv	r3, r3, r2
    43dc:	60bb      	str	r3, [r7, #8]
    43de:	e001      	b.n	43e4 <rssi_iir_update+0x40>
	else
		avg = 0; // really an error
    43e0:	2300      	movs	r3, #0
    43e2:	60bb      	str	r3, [r7, #8]
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    43e4:	4a14      	ldr	r2, [pc, #80]	; (4438 <rssi_iir_update+0x94>)
    43e6:	68fb      	ldr	r3, [r7, #12]
    43e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    43ec:	b21a      	sxth	r2, r3
    43ee:	4613      	mov	r3, r2
    43f0:	019b      	lsls	r3, r3, #6
    43f2:	1a9b      	subs	r3, r3, r2
    43f4:	009b      	lsls	r3, r3, #2
    43f6:	4413      	add	r3, r2
    43f8:	607b      	str	r3, [r7, #4]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    43fa:	68ba      	ldr	r2, [r7, #8]
    43fc:	4613      	mov	r3, r2
    43fe:	005b      	lsls	r3, r3, #1
    4400:	4413      	add	r3, r2
    4402:	687a      	ldr	r2, [r7, #4]
    4404:	4413      	add	r3, r2
    4406:	607b      	str	r3, [r7, #4]
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    4408:	687b      	ldr	r3, [r7, #4]
    440a:	3380      	adds	r3, #128	; 0x80
    440c:	2b00      	cmp	r3, #0
    440e:	da00      	bge.n	4412 <rssi_iir_update+0x6e>
    4410:	33ff      	adds	r3, #255	; 0xff
    4412:	121b      	asrs	r3, r3, #8
    4414:	b299      	uxth	r1, r3
    4416:	4a08      	ldr	r2, [pc, #32]	; (4438 <rssi_iir_update+0x94>)
    4418:	68fb      	ldr	r3, [r7, #12]
    441a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
    441e:	3714      	adds	r7, #20
    4420:	46bd      	mov	sp, r7
    4422:	f85d 7b04 	ldr.w	r7, [sp], #4
    4426:	4770      	bx	lr
    4428:	10000992 	.word	0x10000992
    442c:	1000049c 	.word	0x1000049c
    4430:	10000a59 	.word	0x10000a59
    4434:	10000a5c 	.word	0x10000a5c
    4438:	100009b0 	.word	0x100009b0

0000443c <cs_threshold_set>:
/* Set CC2400 carrier sense threshold and store value to
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, u8 samples)
{
    443c:	b580      	push	{r7, lr}
    443e:	b082      	sub	sp, #8
    4440:	af00      	add	r7, sp, #0
    4442:	4603      	mov	r3, r0
    4444:	460a      	mov	r2, r1
    4446:	71fb      	strb	r3, [r7, #7]
    4448:	4613      	mov	r3, r2
    444a:	71bb      	strb	r3, [r7, #6]
	level = MIN(MAX(level,-120),(-20));
    444c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4450:	f113 0f14 	cmn.w	r3, #20
    4454:	d00d      	beq.n	4472 <cs_threshold_set+0x36>
    4456:	f997 3007 	ldrsb.w	r3, [r7, #7]
    445a:	f113 0f13 	cmn.w	r3, #19
    445e:	da08      	bge.n	4472 <cs_threshold_set+0x36>
    4460:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4464:	f06f 0277 	mvn.w	r2, #119	; 0x77
    4468:	4293      	cmp	r3, r2
    446a:	bfb8      	it	lt
    446c:	4613      	movlt	r3, r2
    446e:	b2db      	uxtb	r3, r3
    4470:	e000      	b.n	4474 <cs_threshold_set+0x38>
    4472:	23ec      	movs	r3, #236	; 0xec
    4474:	71fb      	strb	r3, [r7, #7]
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | (samples&3));
    4476:	79fb      	ldrb	r3, [r7, #7]
    4478:	3338      	adds	r3, #56	; 0x38
    447a:	b2db      	uxtb	r3, r3
    447c:	b29b      	uxth	r3, r3
    447e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    4482:	b29a      	uxth	r2, r3
    4484:	79bb      	ldrb	r3, [r7, #6]
    4486:	b29b      	uxth	r3, r3
    4488:	f003 0303 	and.w	r3, r3, #3
    448c:	b29b      	uxth	r3, r3
    448e:	4313      	orrs	r3, r2
    4490:	b29b      	uxth	r3, r3
    4492:	b29b      	uxth	r3, r3
    4494:	2006      	movs	r0, #6
    4496:	4619      	mov	r1, r3
    4498:	f005 f8c8 	bl	962c <cc2400_set>
	cs_threshold_cur = level;
    449c:	4a08      	ldr	r2, [pc, #32]	; (44c0 <cs_threshold_set+0x84>)
    449e:	79fb      	ldrb	r3, [r7, #7]
    44a0:	7013      	strb	r3, [r2, #0]
	cs_no_squelch = (level <= -120);
    44a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    44a6:	f113 0f77 	cmn.w	r3, #119	; 0x77
    44aa:	bfb4      	ite	lt
    44ac:	2301      	movlt	r3, #1
    44ae:	2300      	movge	r3, #0
    44b0:	b2db      	uxtb	r3, r3
    44b2:	461a      	mov	r2, r3
    44b4:	4b03      	ldr	r3, [pc, #12]	; (44c4 <cs_threshold_set+0x88>)
    44b6:	701a      	strb	r2, [r3, #0]
}
    44b8:	3708      	adds	r7, #8
    44ba:	46bd      	mov	sp, r7
    44bc:	bd80      	pop	{r7, pc}
    44be:	bf00      	nop
    44c0:	1000044d 	.word	0x1000044d
    44c4:	10000995 	.word	0x10000995

000044c8 <enqueue>:

static int enqueue(uint8_t type, uint8_t* buf)
{
    44c8:	b580      	push	{r7, lr}
    44ca:	b084      	sub	sp, #16
    44cc:	af00      	add	r7, sp, #0
    44ce:	4603      	mov	r3, r0
    44d0:	6039      	str	r1, [r7, #0]
    44d2:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx* f = usb_enqueue();
    44d4:	f003 ff06 	bl	82e4 <usb_enqueue>
    44d8:	60f8      	str	r0, [r7, #12]

	/* fail if queue is full */
	if (f == NULL) {
    44da:	68fb      	ldr	r3, [r7, #12]
    44dc:	2b00      	cmp	r3, #0
    44de:	d109      	bne.n	44f4 <enqueue+0x2c>
		status |= FIFO_OVERFLOW;
    44e0:	4b3c      	ldr	r3, [pc, #240]	; (45d4 <enqueue+0x10c>)
    44e2:	781b      	ldrb	r3, [r3, #0]
    44e4:	b2db      	uxtb	r3, r3
    44e6:	f043 0304 	orr.w	r3, r3, #4
    44ea:	b2da      	uxtb	r2, r3
    44ec:	4b39      	ldr	r3, [pc, #228]	; (45d4 <enqueue+0x10c>)
    44ee:	701a      	strb	r2, [r3, #0]
		return 0;
    44f0:	2300      	movs	r3, #0
    44f2:	e06a      	b.n	45ca <enqueue+0x102>
	}

	f->pkt_type = type;
    44f4:	68fb      	ldr	r3, [r7, #12]
    44f6:	79fa      	ldrb	r2, [r7, #7]
    44f8:	701a      	strb	r2, [r3, #0]
	if(type == SPECAN) {
    44fa:	79fb      	ldrb	r3, [r7, #7]
    44fc:	2b04      	cmp	r3, #4
    44fe:	d113      	bne.n	4528 <enqueue+0x60>
		f->clkn_high = (clkn >> 20) & 0xff;
    4500:	4b35      	ldr	r3, [pc, #212]	; (45d8 <enqueue+0x110>)
    4502:	681b      	ldr	r3, [r3, #0]
    4504:	0d1b      	lsrs	r3, r3, #20
    4506:	b2da      	uxtb	r2, r3
    4508:	68fb      	ldr	r3, [r7, #12]
    450a:	70da      	strb	r2, [r3, #3]
		f->clk100ns = CLK100NS;
    450c:	4b32      	ldr	r3, [pc, #200]	; (45d8 <enqueue+0x110>)
    450e:	681b      	ldr	r3, [r3, #0]
    4510:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4514:	f640 4235 	movw	r2, #3125	; 0xc35
    4518:	fb02 f203 	mul.w	r2, r2, r3
    451c:	4b2f      	ldr	r3, [pc, #188]	; (45dc <enqueue+0x114>)
    451e:	681b      	ldr	r3, [r3, #0]
    4520:	441a      	add	r2, r3
    4522:	68fb      	ldr	r3, [r7, #12]
    4524:	605a      	str	r2, [r3, #4]
    4526:	e040      	b.n	45aa <enqueue+0xe2>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    4528:	4b2d      	ldr	r3, [pc, #180]	; (45e0 <enqueue+0x118>)
    452a:	781b      	ldrb	r3, [r3, #0]
    452c:	b2da      	uxtb	r2, r3
    452e:	68fb      	ldr	r3, [r7, #12]
    4530:	70da      	strb	r2, [r3, #3]
		f->clk100ns = idle_buf_clk100ns;
    4532:	4b2c      	ldr	r3, [pc, #176]	; (45e4 <enqueue+0x11c>)
    4534:	681a      	ldr	r2, [r3, #0]
    4536:	68fb      	ldr	r3, [r7, #12]
    4538:	605a      	str	r2, [r3, #4]
		f->channel = idle_buf_channel - 2402;
    453a:	4b2b      	ldr	r3, [pc, #172]	; (45e8 <enqueue+0x120>)
    453c:	881b      	ldrh	r3, [r3, #0]
    453e:	b29b      	uxth	r3, r3
    4540:	b2db      	uxtb	r3, r3
    4542:	3b62      	subs	r3, #98	; 0x62
    4544:	b2da      	uxtb	r2, r3
    4546:	68fb      	ldr	r3, [r7, #12]
    4548:	709a      	strb	r2, [r3, #2]
		f->rssi_min = rssi_min;
    454a:	4b28      	ldr	r3, [pc, #160]	; (45ec <enqueue+0x124>)
    454c:	781b      	ldrb	r3, [r3, #0]
    454e:	b2da      	uxtb	r2, r3
    4550:	68fb      	ldr	r3, [r7, #12]
    4552:	725a      	strb	r2, [r3, #9]
		f->rssi_max = rssi_max;
    4554:	4b26      	ldr	r3, [pc, #152]	; (45f0 <enqueue+0x128>)
    4556:	781b      	ldrb	r3, [r3, #0]
    4558:	b2da      	uxtb	r2, r3
    455a:	68fb      	ldr	r3, [r7, #12]
    455c:	721a      	strb	r2, [r3, #8]
		if (hop_mode != HOP_NONE)
    455e:	4b25      	ldr	r3, [pc, #148]	; (45f4 <enqueue+0x12c>)
    4560:	781b      	ldrb	r3, [r3, #0]
    4562:	b2db      	uxtb	r3, r3
    4564:	2b00      	cmp	r3, #0
    4566:	d011      	beq.n	458c <enqueue+0xc4>
			f->rssi_avg = (int8_t)((rssi_iir[idle_buf_channel-2402] + 128)/256);
    4568:	4b1f      	ldr	r3, [pc, #124]	; (45e8 <enqueue+0x120>)
    456a:	881b      	ldrh	r3, [r3, #0]
    456c:	b29b      	uxth	r3, r3
    456e:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    4572:	4a21      	ldr	r2, [pc, #132]	; (45f8 <enqueue+0x130>)
    4574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4578:	b21b      	sxth	r3, r3
    457a:	3380      	adds	r3, #128	; 0x80
    457c:	2b00      	cmp	r3, #0
    457e:	da00      	bge.n	4582 <enqueue+0xba>
    4580:	33ff      	adds	r3, #255	; 0xff
    4582:	121b      	asrs	r3, r3, #8
    4584:	b2da      	uxtb	r2, r3
    4586:	68fb      	ldr	r3, [r7, #12]
    4588:	729a      	strb	r2, [r3, #10]
    458a:	e00a      	b.n	45a2 <enqueue+0xda>
		else
			f->rssi_avg = (int8_t)((rssi_iir[0] + 128)/256);
    458c:	4b1a      	ldr	r3, [pc, #104]	; (45f8 <enqueue+0x130>)
    458e:	881b      	ldrh	r3, [r3, #0]
    4590:	b21b      	sxth	r3, r3
    4592:	3380      	adds	r3, #128	; 0x80
    4594:	2b00      	cmp	r3, #0
    4596:	da00      	bge.n	459a <enqueue+0xd2>
    4598:	33ff      	adds	r3, #255	; 0xff
    459a:	121b      	asrs	r3, r3, #8
    459c:	b2da      	uxtb	r2, r3
    459e:	68fb      	ldr	r3, [r7, #12]
    45a0:	729a      	strb	r2, [r3, #10]
		f->rssi_count = rssi_count;
    45a2:	4b16      	ldr	r3, [pc, #88]	; (45fc <enqueue+0x134>)
    45a4:	781a      	ldrb	r2, [r3, #0]
    45a6:	68fb      	ldr	r3, [r7, #12]
    45a8:	72da      	strb	r2, [r3, #11]
	}

	memcpy(f->data, buf, DMA_SIZE);
    45aa:	68fb      	ldr	r3, [r7, #12]
    45ac:	330e      	adds	r3, #14
    45ae:	4618      	mov	r0, r3
    45b0:	6839      	ldr	r1, [r7, #0]
    45b2:	2232      	movs	r2, #50	; 0x32
    45b4:	f006 fa24 	bl	aa00 <memcpy>

	f->status = status;
    45b8:	4b06      	ldr	r3, [pc, #24]	; (45d4 <enqueue+0x10c>)
    45ba:	781b      	ldrb	r3, [r3, #0]
    45bc:	b2da      	uxtb	r2, r3
    45be:	68fb      	ldr	r3, [r7, #12]
    45c0:	705a      	strb	r2, [r3, #1]
	status = 0;
    45c2:	4b04      	ldr	r3, [pc, #16]	; (45d4 <enqueue+0x10c>)
    45c4:	2200      	movs	r2, #0
    45c6:	701a      	strb	r2, [r3, #0]

	return 1;
    45c8:	2301      	movs	r3, #1
}
    45ca:	4618      	mov	r0, r3
    45cc:	3710      	adds	r7, #16
    45ce:	46bd      	mov	sp, r7
    45d0:	bd80      	pop	{r7, pc}
    45d2:	bf00      	nop
    45d4:	10000a58 	.word	0x10000a58
    45d8:	10000984 	.word	0x10000984
    45dc:	40004008 	.word	0x40004008
    45e0:	10001019 	.word	0x10001019
    45e4:	10000bd0 	.word	0x10000bd0
    45e8:	10000998 	.word	0x10000998
    45ec:	100004a4 	.word	0x100004a4
    45f0:	100004a3 	.word	0x100004a3
    45f4:	10000992 	.word	0x10000992
    45f8:	100009b0 	.word	0x100009b0
    45fc:	10000a59 	.word	0x10000a59

00004600 <enqueue_with_ts>:

int enqueue_with_ts(u8 type, u8 *buf, u32 ts)
{
    4600:	b580      	push	{r7, lr}
    4602:	b086      	sub	sp, #24
    4604:	af00      	add	r7, sp, #0
    4606:	4603      	mov	r3, r0
    4608:	60b9      	str	r1, [r7, #8]
    460a:	607a      	str	r2, [r7, #4]
    460c:	73fb      	strb	r3, [r7, #15]
	usb_pkt_rx *f = usb_enqueue();
    460e:	f003 fe69 	bl	82e4 <usb_enqueue>
    4612:	6178      	str	r0, [r7, #20]

	/* fail if queue is full */
	if (f == NULL) {
    4614:	697b      	ldr	r3, [r7, #20]
    4616:	2b00      	cmp	r3, #0
    4618:	d109      	bne.n	462e <enqueue_with_ts+0x2e>
		status |= FIFO_OVERFLOW;
    461a:	4b19      	ldr	r3, [pc, #100]	; (4680 <enqueue_with_ts+0x80>)
    461c:	781b      	ldrb	r3, [r3, #0]
    461e:	b2db      	uxtb	r3, r3
    4620:	f043 0304 	orr.w	r3, r3, #4
    4624:	b2da      	uxtb	r2, r3
    4626:	4b16      	ldr	r3, [pc, #88]	; (4680 <enqueue_with_ts+0x80>)
    4628:	701a      	strb	r2, [r3, #0]
		return 0;
    462a:	2300      	movs	r3, #0
    462c:	e023      	b.n	4676 <enqueue_with_ts+0x76>
	}

	f->clkn_high = 0;
    462e:	697b      	ldr	r3, [r7, #20]
    4630:	2200      	movs	r2, #0
    4632:	70da      	strb	r2, [r3, #3]
	f->clk100ns = ts;
    4634:	697b      	ldr	r3, [r7, #20]
    4636:	687a      	ldr	r2, [r7, #4]
    4638:	605a      	str	r2, [r3, #4]

	f->channel = channel - 2402;
    463a:	4b12      	ldr	r3, [pc, #72]	; (4684 <enqueue_with_ts+0x84>)
    463c:	881b      	ldrh	r3, [r3, #0]
    463e:	b29b      	uxth	r3, r3
    4640:	b2db      	uxtb	r3, r3
    4642:	3b62      	subs	r3, #98	; 0x62
    4644:	b2da      	uxtb	r2, r3
    4646:	697b      	ldr	r3, [r7, #20]
    4648:	709a      	strb	r2, [r3, #2]
	f->rssi_avg = 0;
    464a:	697b      	ldr	r3, [r7, #20]
    464c:	2200      	movs	r2, #0
    464e:	729a      	strb	r2, [r3, #10]
	f->rssi_count = 0;
    4650:	697b      	ldr	r3, [r7, #20]
    4652:	2200      	movs	r2, #0
    4654:	72da      	strb	r2, [r3, #11]

	memcpy(f->data, buf, DMA_SIZE);
    4656:	697b      	ldr	r3, [r7, #20]
    4658:	330e      	adds	r3, #14
    465a:	4618      	mov	r0, r3
    465c:	68b9      	ldr	r1, [r7, #8]
    465e:	2232      	movs	r2, #50	; 0x32
    4660:	f006 f9ce 	bl	aa00 <memcpy>

	f->status = status;
    4664:	4b06      	ldr	r3, [pc, #24]	; (4680 <enqueue_with_ts+0x80>)
    4666:	781b      	ldrb	r3, [r3, #0]
    4668:	b2da      	uxtb	r2, r3
    466a:	697b      	ldr	r3, [r7, #20]
    466c:	705a      	strb	r2, [r3, #1]
	status = 0;
    466e:	4b04      	ldr	r3, [pc, #16]	; (4680 <enqueue_with_ts+0x80>)
    4670:	2200      	movs	r2, #0
    4672:	701a      	strb	r2, [r3, #0]

	return 1;
    4674:	2301      	movs	r3, #1
}
    4676:	4618      	mov	r0, r3
    4678:	3718      	adds	r7, #24
    467a:	46bd      	mov	sp, r7
    467c:	bd80      	pop	{r7, pc}
    467e:	bf00      	nop
    4680:	10000a58 	.word	0x10000a58
    4684:	1000049c 	.word	0x1000049c

00004688 <cs_threshold_calc_and_set>:

static void cs_threshold_calc_and_set(void)
{
    4688:	b580      	push	{r7, lr}
    468a:	b082      	sub	sp, #8
    468c:	af00      	add	r7, sp, #0

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    468e:	4b17      	ldr	r3, [pc, #92]	; (46ec <cs_threshold_calc_and_set+0x64>)
    4690:	781b      	ldrb	r3, [r3, #0]
    4692:	b2db      	uxtb	r3, r3
    4694:	2b00      	cmp	r3, #0
    4696:	d01d      	beq.n	46d4 <cs_threshold_calc_and_set+0x4c>
    4698:	4b15      	ldr	r3, [pc, #84]	; (46f0 <cs_threshold_calc_and_set+0x68>)
    469a:	781b      	ldrb	r3, [r3, #0]
    469c:	b25b      	sxtb	r3, r3
    469e:	2b00      	cmp	r3, #0
    46a0:	dd18      	ble.n	46d4 <cs_threshold_calc_and_set+0x4c>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
    46a2:	4b14      	ldr	r3, [pc, #80]	; (46f4 <cs_threshold_calc_and_set+0x6c>)
    46a4:	881b      	ldrh	r3, [r3, #0]
    46a6:	b29b      	uxth	r3, r3
    46a8:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    46ac:	4a12      	ldr	r2, [pc, #72]	; (46f8 <cs_threshold_calc_and_set+0x70>)
    46ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    46b2:	b21b      	sxth	r3, r3
    46b4:	3380      	adds	r3, #128	; 0x80
    46b6:	2b00      	cmp	r3, #0
    46b8:	da00      	bge.n	46bc <cs_threshold_calc_and_set+0x34>
    46ba:	33ff      	adds	r3, #255	; 0xff
    46bc:	121b      	asrs	r3, r3, #8
    46be:	71bb      	strb	r3, [r7, #6]
		level = rssi - 54 + cs_threshold_req;
    46c0:	79ba      	ldrb	r2, [r7, #6]
    46c2:	4b0b      	ldr	r3, [pc, #44]	; (46f0 <cs_threshold_calc_and_set+0x68>)
    46c4:	781b      	ldrb	r3, [r3, #0]
    46c6:	b2db      	uxtb	r3, r3
    46c8:	4413      	add	r3, r2
    46ca:	b2db      	uxtb	r3, r3
    46cc:	3b36      	subs	r3, #54	; 0x36
    46ce:	b2db      	uxtb	r3, r3
    46d0:	71fb      	strb	r3, [r7, #7]

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    46d2:	e002      	b.n	46da <cs_threshold_calc_and_set+0x52>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
		level = rssi - 54 + cs_threshold_req;
	}
	else {
		level = cs_threshold_req;
    46d4:	4b06      	ldr	r3, [pc, #24]	; (46f0 <cs_threshold_calc_and_set+0x68>)
    46d6:	781b      	ldrb	r3, [r3, #0]
    46d8:	71fb      	strb	r3, [r7, #7]
	}
	cs_threshold_set(level, CS_SAMPLES_4);
    46da:	f997 3007 	ldrsb.w	r3, [r7, #7]
    46de:	4618      	mov	r0, r3
    46e0:	2103      	movs	r1, #3
    46e2:	f7ff feab 	bl	443c <cs_threshold_set>
}
    46e6:	3708      	adds	r7, #8
    46e8:	46bd      	mov	sp, r7
    46ea:	bd80      	pop	{r7, pc}
    46ec:	10000992 	.word	0x10000992
    46f0:	1000044c 	.word	0x1000044c
    46f4:	1000049c 	.word	0x1000049c
    46f8:	100009b0 	.word	0x100009b0

000046fc <cs_trigger_enable>:
/* CS comes from CC2400 GIO6, which is LPC P2.2, active low. GPIO
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
static void cs_trigger_enable(void)
{
    46fc:	b480      	push	{r7}
    46fe:	af00      	add	r7, sp, #0
	cs_trigger = 0;
    4700:	4b09      	ldr	r3, [pc, #36]	; (4728 <cs_trigger_enable+0x2c>)
    4702:	2200      	movs	r2, #0
    4704:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    4706:	4b09      	ldr	r3, [pc, #36]	; (472c <cs_trigger_enable+0x30>)
    4708:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    470c:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    470e:	4b08      	ldr	r3, [pc, #32]	; (4730 <cs_trigger_enable+0x34>)
    4710:	2204      	movs	r2, #4
    4712:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    4714:	4a07      	ldr	r2, [pc, #28]	; (4734 <cs_trigger_enable+0x38>)
    4716:	4b07      	ldr	r3, [pc, #28]	; (4734 <cs_trigger_enable+0x38>)
    4718:	681b      	ldr	r3, [r3, #0]
    471a:	f043 0304 	orr.w	r3, r3, #4
    471e:	6013      	str	r3, [r2, #0]
}
    4720:	46bd      	mov	sp, r7
    4722:	f85d 7b04 	ldr.w	r7, [sp], #4
    4726:	4770      	bx	lr
    4728:	100010a0 	.word	0x100010a0
    472c:	e000e100 	.word	0xe000e100
    4730:	400280ac 	.word	0x400280ac
    4734:	400280b4 	.word	0x400280b4

00004738 <cs_trigger_disable>:

static void cs_trigger_disable(void)
{
    4738:	b480      	push	{r7}
    473a:	af00      	add	r7, sp, #0
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    473c:	4a09      	ldr	r2, [pc, #36]	; (4764 <cs_trigger_disable+0x2c>)
    473e:	4b09      	ldr	r3, [pc, #36]	; (4764 <cs_trigger_disable+0x2c>)
    4740:	681b      	ldr	r3, [r3, #0]
    4742:	f023 0304 	bic.w	r3, r3, #4
    4746:	6013      	str	r3, [r2, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4748:	4b07      	ldr	r3, [pc, #28]	; (4768 <cs_trigger_disable+0x30>)
    474a:	2204      	movs	r2, #4
    474c:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_EINT3;
    474e:	4b07      	ldr	r3, [pc, #28]	; (476c <cs_trigger_disable+0x34>)
    4750:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4754:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    4756:	4b06      	ldr	r3, [pc, #24]	; (4770 <cs_trigger_disable+0x38>)
    4758:	2200      	movs	r2, #0
    475a:	701a      	strb	r2, [r3, #0]
}
    475c:	46bd      	mov	sp, r7
    475e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4762:	4770      	bx	lr
    4764:	400280b4 	.word	0x400280b4
    4768:	400280ac 	.word	0x400280ac
    476c:	e000e180 	.word	0xe000e180
    4770:	100010a0 	.word	0x100010a0

00004774 <vendor_request_handler>:

static int vendor_request_handler(u8 request, u16 *request_params, u8 *data, int *data_len)
{
    4774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4778:	b09b      	sub	sp, #108	; 0x6c
    477a:	af00      	add	r7, sp, #0
    477c:	60b9      	str	r1, [r7, #8]
    477e:	607a      	str	r2, [r7, #4]
    4780:	603b      	str	r3, [r7, #0]
    4782:	4603      	mov	r3, r0
    4784:	73fb      	strb	r3, [r7, #15]
	u32 result[5];
	u64 ac_copy;
	u32 clock;
	int clock_offset;
	u8 length; // string length
	usb_pkt_rx *p = NULL;
    4786:	2300      	movs	r3, #0
    4788:	64bb      	str	r3, [r7, #72]	; 0x48
	u16 reg_val;

	switch (request) {
    478a:	7bfb      	ldrb	r3, [r7, #15]
    478c:	2b3f      	cmp	r3, #63	; 0x3f
    478e:	f200 8587 	bhi.w	52a0 <vendor_request_handler+0xb2c>
    4792:	a201      	add	r2, pc, #4	; (adr r2, 4798 <vendor_request_handler+0x24>)
    4794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4798:	00004899 	.word	0x00004899
    479c:	000048a3 	.word	0x000048a3
    47a0:	000052a1 	.word	0x000052a1
    47a4:	000048b3 	.word	0x000048b3
    47a8:	000048d5 	.word	0x000048d5
    47ac:	000048f1 	.word	0x000048f1
    47b0:	00004913 	.word	0x00004913
    47b4:	0000492f 	.word	0x0000492f
    47b8:	00004951 	.word	0x00004951
    47bc:	00004971 	.word	0x00004971
    47c0:	00004993 	.word	0x00004993
    47c4:	00004c37 	.word	0x00004c37
    47c8:	00004c5d 	.word	0x00004c5d
    47cc:	00004a09 	.word	0x00004a09
    47d0:	00004a13 	.word	0x00004a13
    47d4:	000049b3 	.word	0x000049b3
    47d8:	00004af1 	.word	0x00004af1
    47dc:	00004b11 	.word	0x00004b11
    47e0:	00004b49 	.word	0x00004b49
    47e4:	00004b69 	.word	0x00004b69
    47e8:	00004b85 	.word	0x00004b85
    47ec:	00004c11 	.word	0x00004c11
    47f0:	00004c19 	.word	0x00004c19
    47f4:	00004c2b 	.word	0x00004c2b
    47f8:	00004ce7 	.word	0x00004ce7
    47fc:	00004d05 	.word	0x00004d05
    4800:	000052a1 	.word	0x000052a1
    4804:	00004d11 	.word	0x00004d11
    4808:	00004b8d 	.word	0x00004b8d
    480c:	00004ba9 	.word	0x00004ba9
    4810:	00004bd1 	.word	0x00004bd1
    4814:	00004bc9 	.word	0x00004bc9
    4818:	00004bd9 	.word	0x00004bd9
    481c:	00004dd5 	.word	0x00004dd5
    4820:	00004d6d 	.word	0x00004d6d
    4824:	00004e49 	.word	0x00004e49
    4828:	00004e57 	.word	0x00004e57
    482c:	00004e67 	.word	0x00004e67
    4830:	00004e79 	.word	0x00004e79
    4834:	00004f49 	.word	0x00004f49
    4838:	00004fbf 	.word	0x00004fbf
    483c:	0000504d 	.word	0x0000504d
    4840:	000050d5 	.word	0x000050d5
    4844:	000050f7 	.word	0x000050f7
    4848:	00005127 	.word	0x00005127
    484c:	000052a5 	.word	0x000052a5
    4850:	00005159 	.word	0x00005159
    4854:	0000516f 	.word	0x0000516f
    4858:	0000518b 	.word	0x0000518b
    485c:	000051a1 	.word	0x000051a1
    4860:	000051cd 	.word	0x000051cd
    4864:	00004ff1 	.word	0x00004ff1
    4868:	00005023 	.word	0x00005023
    486c:	000051e9 	.word	0x000051e9
    4870:	0000522d 	.word	0x0000522d
    4874:	00004e17 	.word	0x00004e17
    4878:	0000523f 	.word	0x0000523f
    487c:	000052a1 	.word	0x000052a1
    4880:	00005217 	.word	0x00005217
    4884:	00005283 	.word	0x00005283
    4888:	0000528f 	.word	0x0000528f
    488c:	000052a1 	.word	0x000052a1
    4890:	00004fb7 	.word	0x00004fb7
    4894:	000050b9 	.word	0x000050b9

	case UBERTOOTH_PING:
		*data_len = 0;
    4898:	683b      	ldr	r3, [r7, #0]
    489a:	2200      	movs	r2, #0
    489c:	601a      	str	r2, [r3, #0]
		break;
    489e:	f000 bd02 	b.w	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    48a2:	4ba1      	ldr	r3, [pc, #644]	; (4b28 <vendor_request_handler+0x3b4>)
    48a4:	2201      	movs	r2, #1
    48a6:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    48a8:	683b      	ldr	r3, [r7, #0]
    48aa:	2200      	movs	r2, #0
    48ac:	601a      	str	r2, [r3, #0]
		break;
    48ae:	f000 bcfa 	b.w	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    48b2:	4b9e      	ldr	r3, [pc, #632]	; (4b2c <vendor_request_handler+0x3b8>)
    48b4:	681b      	ldr	r3, [r3, #0]
    48b6:	f003 0302 	and.w	r3, r3, #2
    48ba:	2b00      	cmp	r3, #0
    48bc:	bf14      	ite	ne
    48be:	2301      	movne	r3, #1
    48c0:	2300      	moveq	r3, #0
    48c2:	b2db      	uxtb	r3, r3
    48c4:	461a      	mov	r2, r3
    48c6:	687b      	ldr	r3, [r7, #4]
    48c8:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    48ca:	683b      	ldr	r3, [r7, #0]
    48cc:	2201      	movs	r2, #1
    48ce:	601a      	str	r2, [r3, #0]
		break;
    48d0:	f000 bce9 	b.w	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    48d4:	68bb      	ldr	r3, [r7, #8]
    48d6:	881b      	ldrh	r3, [r3, #0]
    48d8:	2b00      	cmp	r3, #0
    48da:	d004      	beq.n	48e6 <vendor_request_handler+0x172>
			USRLED_SET;
    48dc:	4b94      	ldr	r3, [pc, #592]	; (4b30 <vendor_request_handler+0x3bc>)
    48de:	2202      	movs	r2, #2
    48e0:	601a      	str	r2, [r3, #0]
		else
			USRLED_CLR;
		break;
    48e2:	f000 bce0 	b.w	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
			USRLED_SET;
		else
			USRLED_CLR;
    48e6:	4b93      	ldr	r3, [pc, #588]	; (4b34 <vendor_request_handler+0x3c0>)
    48e8:	2202      	movs	r2, #2
    48ea:	601a      	str	r2, [r3, #0]
		break;
    48ec:	f000 bcdb 	b.w	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    48f0:	4b8e      	ldr	r3, [pc, #568]	; (4b2c <vendor_request_handler+0x3b8>)
    48f2:	681b      	ldr	r3, [r3, #0]
    48f4:	f003 0310 	and.w	r3, r3, #16
    48f8:	2b00      	cmp	r3, #0
    48fa:	bf14      	ite	ne
    48fc:	2301      	movne	r3, #1
    48fe:	2300      	moveq	r3, #0
    4900:	b2db      	uxtb	r3, r3
    4902:	461a      	mov	r2, r3
    4904:	687b      	ldr	r3, [r7, #4]
    4906:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4908:	683b      	ldr	r3, [r7, #0]
    490a:	2201      	movs	r2, #1
    490c:	601a      	str	r2, [r3, #0]
		break;
    490e:	f000 bcca 	b.w	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    4912:	68bb      	ldr	r3, [r7, #8]
    4914:	881b      	ldrh	r3, [r3, #0]
    4916:	2b00      	cmp	r3, #0
    4918:	d004      	beq.n	4924 <vendor_request_handler+0x1b0>
			RXLED_SET;
    491a:	4b85      	ldr	r3, [pc, #532]	; (4b30 <vendor_request_handler+0x3bc>)
    491c:	2210      	movs	r2, #16
    491e:	601a      	str	r2, [r3, #0]
		else
			RXLED_CLR;
		break;
    4920:	f000 bcc1 	b.w	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
			RXLED_SET;
		else
			RXLED_CLR;
    4924:	4b83      	ldr	r3, [pc, #524]	; (4b34 <vendor_request_handler+0x3c0>)
    4926:	2210      	movs	r2, #16
    4928:	601a      	str	r2, [r3, #0]
		break;
    492a:	f000 bcbc 	b.w	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    492e:	4b7f      	ldr	r3, [pc, #508]	; (4b2c <vendor_request_handler+0x3b8>)
    4930:	681b      	ldr	r3, [r3, #0]
    4932:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4936:	2b00      	cmp	r3, #0
    4938:	bf14      	ite	ne
    493a:	2301      	movne	r3, #1
    493c:	2300      	moveq	r3, #0
    493e:	b2db      	uxtb	r3, r3
    4940:	461a      	mov	r2, r3
    4942:	687b      	ldr	r3, [r7, #4]
    4944:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4946:	683b      	ldr	r3, [r7, #0]
    4948:	2201      	movs	r2, #1
    494a:	601a      	str	r2, [r3, #0]
		break;
    494c:	f000 bcab 	b.w	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    4950:	68bb      	ldr	r3, [r7, #8]
    4952:	881b      	ldrh	r3, [r3, #0]
    4954:	2b00      	cmp	r3, #0
    4956:	d005      	beq.n	4964 <vendor_request_handler+0x1f0>
			TXLED_SET;
    4958:	4b75      	ldr	r3, [pc, #468]	; (4b30 <vendor_request_handler+0x3bc>)
    495a:	f44f 7280 	mov.w	r2, #256	; 0x100
    495e:	601a      	str	r2, [r3, #0]
		else
			TXLED_CLR;
		break;
    4960:	f000 bca1 	b.w	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
			TXLED_SET;
		else
			TXLED_CLR;
    4964:	4b73      	ldr	r3, [pc, #460]	; (4b34 <vendor_request_handler+0x3c0>)
    4966:	f44f 7280 	mov.w	r2, #256	; 0x100
    496a:	601a      	str	r2, [r3, #0]
		break;
    496c:	f000 bc9b 	b.w	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    4970:	4b6e      	ldr	r3, [pc, #440]	; (4b2c <vendor_request_handler+0x3b8>)
    4972:	681b      	ldr	r3, [r3, #0]
    4974:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4978:	2b00      	cmp	r3, #0
    497a:	bf14      	ite	ne
    497c:	2301      	movne	r3, #1
    497e:	2300      	moveq	r3, #0
    4980:	b2db      	uxtb	r3, r3
    4982:	461a      	mov	r2, r3
    4984:	687b      	ldr	r3, [r7, #4]
    4986:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4988:	683b      	ldr	r3, [r7, #0]
    498a:	2201      	movs	r2, #1
    498c:	601a      	str	r2, [r3, #0]
		break;
    498e:	f000 bc8a 	b.w	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    4992:	68bb      	ldr	r3, [r7, #8]
    4994:	881b      	ldrh	r3, [r3, #0]
    4996:	2b00      	cmp	r3, #0
    4998:	d005      	beq.n	49a6 <vendor_request_handler+0x232>
			CC1V8_SET;
    499a:	4b65      	ldr	r3, [pc, #404]	; (4b30 <vendor_request_handler+0x3bc>)
    499c:	f44f 7200 	mov.w	r2, #512	; 0x200
    49a0:	601a      	str	r2, [r3, #0]
		else
			CC1V8_CLR;
		break;
    49a2:	f000 bc80 	b.w	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
			CC1V8_SET;
		else
			CC1V8_CLR;
    49a6:	4b63      	ldr	r3, [pc, #396]	; (4b34 <vendor_request_handler+0x3c0>)
    49a8:	f44f 7200 	mov.w	r2, #512	; 0x200
    49ac:	601a      	str	r2, [r3, #0]
		break;
    49ae:	f000 bc7a 	b.w	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_GET_PARTNUM:
		command[0] = 54; /* read part number */
    49b2:	2336      	movs	r3, #54	; 0x36
    49b4:	62bb      	str	r3, [r7, #40]	; 0x28
		iap_entry(command, result);
    49b6:	4b60      	ldr	r3, [pc, #384]	; (4b38 <vendor_request_handler+0x3c4>)
    49b8:	681b      	ldr	r3, [r3, #0]
    49ba:	f107 0128 	add.w	r1, r7, #40	; 0x28
    49be:	f107 0214 	add.w	r2, r7, #20
    49c2:	4608      	mov	r0, r1
    49c4:	4611      	mov	r1, r2
    49c6:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    49c8:	697b      	ldr	r3, [r7, #20]
    49ca:	b2da      	uxtb	r2, r3
    49cc:	687b      	ldr	r3, [r7, #4]
    49ce:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    49d0:	687b      	ldr	r3, [r7, #4]
    49d2:	3301      	adds	r3, #1
    49d4:	69ba      	ldr	r2, [r7, #24]
    49d6:	b2d2      	uxtb	r2, r2
    49d8:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    49da:	687b      	ldr	r3, [r7, #4]
    49dc:	3302      	adds	r3, #2
    49de:	69ba      	ldr	r2, [r7, #24]
    49e0:	0a12      	lsrs	r2, r2, #8
    49e2:	b2d2      	uxtb	r2, r2
    49e4:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    49e6:	687b      	ldr	r3, [r7, #4]
    49e8:	3303      	adds	r3, #3
    49ea:	69ba      	ldr	r2, [r7, #24]
    49ec:	0c12      	lsrs	r2, r2, #16
    49ee:	b2d2      	uxtb	r2, r2
    49f0:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    49f2:	687b      	ldr	r3, [r7, #4]
    49f4:	3304      	adds	r3, #4
    49f6:	69ba      	ldr	r2, [r7, #24]
    49f8:	0e12      	lsrs	r2, r2, #24
    49fa:	b2d2      	uxtb	r2, r2
    49fc:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    49fe:	683b      	ldr	r3, [r7, #0]
    4a00:	2205      	movs	r2, #5
    4a02:	601a      	str	r2, [r3, #0]
		break;
    4a04:	f000 bc4f 	b.w	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
    4a08:	4b47      	ldr	r3, [pc, #284]	; (4b28 <vendor_request_handler+0x3b4>)
    4a0a:	220b      	movs	r2, #11
    4a0c:	701a      	strb	r2, [r3, #0]
		break;
    4a0e:	f000 bc4a 	b.w	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_GET_SERIAL:
		command[0] = 58; /* read device serial number */
    4a12:	233a      	movs	r3, #58	; 0x3a
    4a14:	62bb      	str	r3, [r7, #40]	; 0x28
		iap_entry(command, result);
    4a16:	4b48      	ldr	r3, [pc, #288]	; (4b38 <vendor_request_handler+0x3c4>)
    4a18:	681b      	ldr	r3, [r3, #0]
    4a1a:	f107 0128 	add.w	r1, r7, #40	; 0x28
    4a1e:	f107 0214 	add.w	r2, r7, #20
    4a22:	4608      	mov	r0, r1
    4a24:	4611      	mov	r1, r2
    4a26:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4a28:	697b      	ldr	r3, [r7, #20]
    4a2a:	b2da      	uxtb	r2, r3
    4a2c:	687b      	ldr	r3, [r7, #4]
    4a2e:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4a30:	687b      	ldr	r3, [r7, #4]
    4a32:	3301      	adds	r3, #1
    4a34:	69ba      	ldr	r2, [r7, #24]
    4a36:	b2d2      	uxtb	r2, r2
    4a38:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4a3a:	687b      	ldr	r3, [r7, #4]
    4a3c:	3302      	adds	r3, #2
    4a3e:	69ba      	ldr	r2, [r7, #24]
    4a40:	0a12      	lsrs	r2, r2, #8
    4a42:	b2d2      	uxtb	r2, r2
    4a44:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4a46:	687b      	ldr	r3, [r7, #4]
    4a48:	3303      	adds	r3, #3
    4a4a:	69ba      	ldr	r2, [r7, #24]
    4a4c:	0c12      	lsrs	r2, r2, #16
    4a4e:	b2d2      	uxtb	r2, r2
    4a50:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4a52:	687b      	ldr	r3, [r7, #4]
    4a54:	3304      	adds	r3, #4
    4a56:	69ba      	ldr	r2, [r7, #24]
    4a58:	0e12      	lsrs	r2, r2, #24
    4a5a:	b2d2      	uxtb	r2, r2
    4a5c:	701a      	strb	r2, [r3, #0]
		data[5] = result[2] & 0xFF;
    4a5e:	687b      	ldr	r3, [r7, #4]
    4a60:	3305      	adds	r3, #5
    4a62:	69fa      	ldr	r2, [r7, #28]
    4a64:	b2d2      	uxtb	r2, r2
    4a66:	701a      	strb	r2, [r3, #0]
		data[6] = (result[2] >> 8) & 0xFF;
    4a68:	687b      	ldr	r3, [r7, #4]
    4a6a:	3306      	adds	r3, #6
    4a6c:	69fa      	ldr	r2, [r7, #28]
    4a6e:	0a12      	lsrs	r2, r2, #8
    4a70:	b2d2      	uxtb	r2, r2
    4a72:	701a      	strb	r2, [r3, #0]
		data[7] = (result[2] >> 16) & 0xFF;
    4a74:	687b      	ldr	r3, [r7, #4]
    4a76:	3307      	adds	r3, #7
    4a78:	69fa      	ldr	r2, [r7, #28]
    4a7a:	0c12      	lsrs	r2, r2, #16
    4a7c:	b2d2      	uxtb	r2, r2
    4a7e:	701a      	strb	r2, [r3, #0]
		data[8] = (result[2] >> 24) & 0xFF;
    4a80:	687b      	ldr	r3, [r7, #4]
    4a82:	3308      	adds	r3, #8
    4a84:	69fa      	ldr	r2, [r7, #28]
    4a86:	0e12      	lsrs	r2, r2, #24
    4a88:	b2d2      	uxtb	r2, r2
    4a8a:	701a      	strb	r2, [r3, #0]
		data[9] = result[3] & 0xFF;
    4a8c:	687b      	ldr	r3, [r7, #4]
    4a8e:	3309      	adds	r3, #9
    4a90:	6a3a      	ldr	r2, [r7, #32]
    4a92:	b2d2      	uxtb	r2, r2
    4a94:	701a      	strb	r2, [r3, #0]
		data[10] = (result[3] >> 8) & 0xFF;
    4a96:	687b      	ldr	r3, [r7, #4]
    4a98:	330a      	adds	r3, #10
    4a9a:	6a3a      	ldr	r2, [r7, #32]
    4a9c:	0a12      	lsrs	r2, r2, #8
    4a9e:	b2d2      	uxtb	r2, r2
    4aa0:	701a      	strb	r2, [r3, #0]
		data[11] = (result[3] >> 16) & 0xFF;
    4aa2:	687b      	ldr	r3, [r7, #4]
    4aa4:	330b      	adds	r3, #11
    4aa6:	6a3a      	ldr	r2, [r7, #32]
    4aa8:	0c12      	lsrs	r2, r2, #16
    4aaa:	b2d2      	uxtb	r2, r2
    4aac:	701a      	strb	r2, [r3, #0]
		data[12] = (result[3] >> 24) & 0xFF;
    4aae:	687b      	ldr	r3, [r7, #4]
    4ab0:	330c      	adds	r3, #12
    4ab2:	6a3a      	ldr	r2, [r7, #32]
    4ab4:	0e12      	lsrs	r2, r2, #24
    4ab6:	b2d2      	uxtb	r2, r2
    4ab8:	701a      	strb	r2, [r3, #0]
		data[13] = result[4] & 0xFF;
    4aba:	687b      	ldr	r3, [r7, #4]
    4abc:	330d      	adds	r3, #13
    4abe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4ac0:	b2d2      	uxtb	r2, r2
    4ac2:	701a      	strb	r2, [r3, #0]
		data[14] = (result[4] >> 8) & 0xFF;
    4ac4:	687b      	ldr	r3, [r7, #4]
    4ac6:	330e      	adds	r3, #14
    4ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4aca:	0a12      	lsrs	r2, r2, #8
    4acc:	b2d2      	uxtb	r2, r2
    4ace:	701a      	strb	r2, [r3, #0]
		data[15] = (result[4] >> 16) & 0xFF;
    4ad0:	687b      	ldr	r3, [r7, #4]
    4ad2:	330f      	adds	r3, #15
    4ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4ad6:	0c12      	lsrs	r2, r2, #16
    4ad8:	b2d2      	uxtb	r2, r2
    4ada:	701a      	strb	r2, [r3, #0]
		data[16] = (result[4] >> 24) & 0xFF;
    4adc:	687b      	ldr	r3, [r7, #4]
    4ade:	3310      	adds	r3, #16
    4ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    4ae2:	0e12      	lsrs	r2, r2, #24
    4ae4:	b2d2      	uxtb	r2, r2
    4ae6:	701a      	strb	r2, [r3, #0]
		*data_len = 17;
    4ae8:	683b      	ldr	r3, [r7, #0]
    4aea:	2211      	movs	r2, #17
    4aec:	601a      	str	r2, [r3, #0]
		break;
    4aee:	e3da      	b.n	52a6 <vendor_request_handler+0xb32>

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    4af0:	4b12      	ldr	r3, [pc, #72]	; (4b3c <vendor_request_handler+0x3c8>)
    4af2:	681b      	ldr	r3, [r3, #0]
    4af4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4af8:	2b00      	cmp	r3, #0
    4afa:	bf14      	ite	ne
    4afc:	2301      	movne	r3, #1
    4afe:	2300      	moveq	r3, #0
    4b00:	b2db      	uxtb	r3, r3
    4b02:	461a      	mov	r2, r3
    4b04:	687b      	ldr	r3, [r7, #4]
    4b06:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4b08:	683b      	ldr	r3, [r7, #0]
    4b0a:	2201      	movs	r2, #1
    4b0c:	601a      	str	r2, [r3, #0]
		break;
    4b0e:	e3ca      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    4b10:	68bb      	ldr	r3, [r7, #8]
    4b12:	881b      	ldrh	r3, [r3, #0]
    4b14:	2b00      	cmp	r3, #0
    4b16:	d003      	beq.n	4b20 <vendor_request_handler+0x3ac>
			PAEN_SET;
    4b18:	4b09      	ldr	r3, [pc, #36]	; (4b40 <vendor_request_handler+0x3cc>)
    4b1a:	2280      	movs	r2, #128	; 0x80
    4b1c:	601a      	str	r2, [r3, #0]
		else
			PAEN_CLR;
		break;
    4b1e:	e3c2      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
			PAEN_SET;
		else
			PAEN_CLR;
    4b20:	4b08      	ldr	r3, [pc, #32]	; (4b44 <vendor_request_handler+0x3d0>)
    4b22:	2280      	movs	r2, #128	; 0x80
    4b24:	601a      	str	r2, [r3, #0]
		break;
    4b26:	e3be      	b.n	52a6 <vendor_request_handler+0xb32>
    4b28:	10000a4f 	.word	0x10000a4f
    4b2c:	2009c034 	.word	0x2009c034
    4b30:	2009c038 	.word	0x2009c038
    4b34:	2009c03c 	.word	0x2009c03c
    4b38:	10000448 	.word	0x10000448
    4b3c:	2009c054 	.word	0x2009c054
    4b40:	2009c058 	.word	0x2009c058
    4b44:	2009c05c 	.word	0x2009c05c

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    4b48:	4b92      	ldr	r3, [pc, #584]	; (4d94 <vendor_request_handler+0x620>)
    4b4a:	681b      	ldr	r3, [r3, #0]
    4b4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4b50:	2b00      	cmp	r3, #0
    4b52:	bf14      	ite	ne
    4b54:	2301      	movne	r3, #1
    4b56:	2300      	moveq	r3, #0
    4b58:	b2db      	uxtb	r3, r3
    4b5a:	461a      	mov	r2, r3
    4b5c:	687b      	ldr	r3, [r7, #4]
    4b5e:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4b60:	683b      	ldr	r3, [r7, #0]
    4b62:	2201      	movs	r2, #1
    4b64:	601a      	str	r2, [r3, #0]
		break;
    4b66:	e39e      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    4b68:	68bb      	ldr	r3, [r7, #8]
    4b6a:	881b      	ldrh	r3, [r3, #0]
    4b6c:	2b00      	cmp	r3, #0
    4b6e:	d004      	beq.n	4b7a <vendor_request_handler+0x406>
			HGM_SET;
    4b70:	4b89      	ldr	r3, [pc, #548]	; (4d98 <vendor_request_handler+0x624>)
    4b72:	f44f 7280 	mov.w	r2, #256	; 0x100
    4b76:	601a      	str	r2, [r3, #0]
		else
			HGM_CLR;
		break;
    4b78:	e395      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
			HGM_SET;
		else
			HGM_CLR;
    4b7a:	4b88      	ldr	r3, [pc, #544]	; (4d9c <vendor_request_handler+0x628>)
    4b7c:	f44f 7280 	mov.w	r2, #256	; 0x100
    4b80:	601a      	str	r2, [r3, #0]
		break;
    4b82:	e390      	b.n	52a6 <vendor_request_handler+0xb32>
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    4b84:	4b86      	ldr	r3, [pc, #536]	; (4da0 <vendor_request_handler+0x62c>)
    4b86:	2203      	movs	r2, #3
    4b88:	701a      	strb	r2, [r3, #0]
		break;
    4b8a:	e38c      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    4b8c:	2005      	movs	r0, #5
    4b8e:	f004 fd37 	bl	9600 <cc2400_get>
    4b92:	4603      	mov	r3, r0
    4b94:	b2db      	uxtb	r3, r3
    4b96:	f003 0307 	and.w	r3, r3, #7
    4b9a:	b2da      	uxtb	r2, r3
    4b9c:	687b      	ldr	r3, [r7, #4]
    4b9e:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4ba0:	683b      	ldr	r3, [r7, #0]
    4ba2:	2201      	movs	r2, #1
    4ba4:	601a      	str	r2, [r3, #0]
		break;
    4ba6:	e37e      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    4ba8:	68bb      	ldr	r3, [r7, #8]
    4baa:	881b      	ldrh	r3, [r3, #0]
    4bac:	2b07      	cmp	r3, #7
    4bae:	d809      	bhi.n	4bc4 <vendor_request_handler+0x450>
			cc2400_set(FREND, 8 | request_params[0]);
    4bb0:	68bb      	ldr	r3, [r7, #8]
    4bb2:	881b      	ldrh	r3, [r3, #0]
    4bb4:	f043 0308 	orr.w	r3, r3, #8
    4bb8:	b29b      	uxth	r3, r3
    4bba:	2005      	movs	r0, #5
    4bbc:	4619      	mov	r1, r3
    4bbe:	f004 fd35 	bl	962c <cc2400_set>
		} else {
			return 0;
		}
		break;
    4bc2:	e370      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    4bc4:	2300      	movs	r3, #0
    4bc6:	e36f      	b.n	52a8 <vendor_request_handler+0xb34>
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    4bc8:	4b75      	ldr	r3, [pc, #468]	; (4da0 <vendor_request_handler+0x62c>)
    4bca:	2205      	movs	r2, #5
    4bcc:	701a      	strb	r2, [r3, #0]
		break;
    4bce:	e36a      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    4bd0:	4b73      	ldr	r3, [pc, #460]	; (4da0 <vendor_request_handler+0x62c>)
    4bd2:	2206      	movs	r2, #6
    4bd4:	701a      	strb	r2, [r3, #0]
		break;
    4bd6:	e366      	b.n	52a6 <vendor_request_handler+0xb32>
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    4bd8:	4b72      	ldr	r3, [pc, #456]	; (4da4 <vendor_request_handler+0x630>)
    4bda:	781a      	ldrb	r2, [r3, #0]
    4bdc:	687b      	ldr	r3, [r7, #4]
    4bde:	701a      	strb	r2, [r3, #0]
		data[1] = rr.request_pa;
    4be0:	687b      	ldr	r3, [r7, #4]
    4be2:	3301      	adds	r3, #1
    4be4:	4a6f      	ldr	r2, [pc, #444]	; (4da4 <vendor_request_handler+0x630>)
    4be6:	7852      	ldrb	r2, [r2, #1]
    4be8:	701a      	strb	r2, [r3, #0]
		data[2] = rr.request_num;
    4bea:	687b      	ldr	r3, [r7, #4]
    4bec:	3302      	adds	r3, #2
    4bee:	4a6d      	ldr	r2, [pc, #436]	; (4da4 <vendor_request_handler+0x630>)
    4bf0:	7892      	ldrb	r2, [r2, #2]
    4bf2:	701a      	strb	r2, [r3, #0]
		data[3] = rr.reply_pa;
    4bf4:	687b      	ldr	r3, [r7, #4]
    4bf6:	3303      	adds	r3, #3
    4bf8:	4a6a      	ldr	r2, [pc, #424]	; (4da4 <vendor_request_handler+0x630>)
    4bfa:	78d2      	ldrb	r2, [r2, #3]
    4bfc:	701a      	strb	r2, [r3, #0]
		data[4] = rr.reply_num;
    4bfe:	687b      	ldr	r3, [r7, #4]
    4c00:	3304      	adds	r3, #4
    4c02:	4a68      	ldr	r2, [pc, #416]	; (4da4 <vendor_request_handler+0x630>)
    4c04:	7912      	ldrb	r2, [r2, #4]
    4c06:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4c08:	683b      	ldr	r3, [r7, #0]
    4c0a:	2205      	movs	r2, #5
    4c0c:	601a      	str	r2, [r3, #0]
		break;
    4c0e:	e34a      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    4c10:	4b63      	ldr	r3, [pc, #396]	; (4da0 <vendor_request_handler+0x62c>)
    4c12:	2200      	movs	r2, #0
    4c14:	701a      	strb	r2, [r3, #0]
		break;
    4c16:	e346      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    4c18:	4b63      	ldr	r3, [pc, #396]	; (4da8 <vendor_request_handler+0x634>)
    4c1a:	781b      	ldrb	r3, [r3, #0]
    4c1c:	b2da      	uxtb	r2, r3
    4c1e:	687b      	ldr	r3, [r7, #4]
    4c20:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c22:	683b      	ldr	r3, [r7, #0]
    4c24:	2201      	movs	r2, #1
    4c26:	601a      	str	r2, [r3, #0]
		break;
    4c28:	e33d      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    4c2a:	68bb      	ldr	r3, [r7, #8]
    4c2c:	881b      	ldrh	r3, [r3, #0]
    4c2e:	b2da      	uxtb	r2, r3
    4c30:	4b5d      	ldr	r3, [pc, #372]	; (4da8 <vendor_request_handler+0x634>)
    4c32:	701a      	strb	r2, [r3, #0]
		break;
    4c34:	e337      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    4c36:	4b5d      	ldr	r3, [pc, #372]	; (4dac <vendor_request_handler+0x638>)
    4c38:	881b      	ldrh	r3, [r3, #0]
    4c3a:	b29b      	uxth	r3, r3
    4c3c:	b2da      	uxtb	r2, r3
    4c3e:	687b      	ldr	r3, [r7, #4]
    4c40:	701a      	strb	r2, [r3, #0]
		data[1] = (channel >> 8) & 0xFF;
    4c42:	687b      	ldr	r3, [r7, #4]
    4c44:	3301      	adds	r3, #1
    4c46:	4a59      	ldr	r2, [pc, #356]	; (4dac <vendor_request_handler+0x638>)
    4c48:	8812      	ldrh	r2, [r2, #0]
    4c4a:	b292      	uxth	r2, r2
    4c4c:	0a12      	lsrs	r2, r2, #8
    4c4e:	b292      	uxth	r2, r2
    4c50:	b2d2      	uxtb	r2, r2
    4c52:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    4c54:	683b      	ldr	r3, [r7, #0]
    4c56:	2202      	movs	r2, #2
    4c58:	601a      	str	r2, [r3, #0]
		break;
    4c5a:	e324      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4c5c:	68bb      	ldr	r3, [r7, #8]
    4c5e:	881a      	ldrh	r2, [r3, #0]
    4c60:	4b53      	ldr	r3, [pc, #332]	; (4db0 <vendor_request_handler+0x63c>)
    4c62:	801a      	strh	r2, [r3, #0]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4c64:	4b52      	ldr	r3, [pc, #328]	; (4db0 <vendor_request_handler+0x63c>)
    4c66:	881b      	ldrh	r3, [r3, #0]
    4c68:	b29b      	uxth	r3, r3
    4c6a:	f640 22ea 	movw	r2, #2794	; 0xaea
    4c6e:	4293      	cmp	r3, r2
    4c70:	d907      	bls.n	4c82 <vendor_request_handler+0x50e>
			hop_mode = HOP_SWEEP;
    4c72:	4b50      	ldr	r3, [pc, #320]	; (4db4 <vendor_request_handler+0x640>)
    4c74:	2201      	movs	r2, #1
    4c76:	701a      	strb	r2, [r3, #0]
			requested_channel = 2402;
    4c78:	4b4d      	ldr	r3, [pc, #308]	; (4db0 <vendor_request_handler+0x63c>)
    4c7a:	f640 1262 	movw	r2, #2402	; 0x962
    4c7e:	801a      	strh	r2, [r3, #0]
    4c80:	e020      	b.n	4cc4 <vendor_request_handler+0x550>
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
    4c82:	4b4c      	ldr	r3, [pc, #304]	; (4db4 <vendor_request_handler+0x640>)
    4c84:	2200      	movs	r2, #0
    4c86:	701a      	strb	r2, [r3, #0]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4c88:	4b49      	ldr	r3, [pc, #292]	; (4db0 <vendor_request_handler+0x63c>)
    4c8a:	881b      	ldrh	r3, [r3, #0]
    4c8c:	b29b      	uxth	r3, r3
    4c8e:	f640 02dc 	movw	r2, #2268	; 0x8dc
    4c92:	4293      	cmp	r3, r2
    4c94:	d903      	bls.n	4c9e <vendor_request_handler+0x52a>
    4c96:	4b46      	ldr	r3, [pc, #280]	; (4db0 <vendor_request_handler+0x63c>)
    4c98:	881b      	ldrh	r3, [r3, #0]
    4c9a:	b29b      	uxth	r3, r3
    4c9c:	e001      	b.n	4ca2 <vendor_request_handler+0x52e>
    4c9e:	f640 03dc 	movw	r3, #2268	; 0x8dc
    4ca2:	4a43      	ldr	r2, [pc, #268]	; (4db0 <vendor_request_handler+0x63c>)
    4ca4:	8013      	strh	r3, [r2, #0]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4ca6:	4b42      	ldr	r3, [pc, #264]	; (4db0 <vendor_request_handler+0x63c>)
    4ca8:	881b      	ldrh	r3, [r3, #0]
    4caa:	b29b      	uxth	r3, r3
    4cac:	f640 22e9 	movw	r2, #2793	; 0xae9
    4cb0:	4293      	cmp	r3, r2
    4cb2:	d803      	bhi.n	4cbc <vendor_request_handler+0x548>
    4cb4:	4b3e      	ldr	r3, [pc, #248]	; (4db0 <vendor_request_handler+0x63c>)
    4cb6:	881b      	ldrh	r3, [r3, #0]
    4cb8:	b29b      	uxth	r3, r3
    4cba:	e001      	b.n	4cc0 <vendor_request_handler+0x54c>
    4cbc:	f640 23ea 	movw	r3, #2794	; 0xaea
    4cc0:	4a3b      	ldr	r2, [pc, #236]	; (4db0 <vendor_request_handler+0x63c>)
    4cc2:	8013      	strh	r3, [r2, #0]
		}

		if (mode != MODE_BT_FOLLOW_LE) {
    4cc4:	4b3c      	ldr	r3, [pc, #240]	; (4db8 <vendor_request_handler+0x644>)
    4cc6:	781b      	ldrb	r3, [r3, #0]
    4cc8:	b2db      	uxtb	r3, r3
    4cca:	2b09      	cmp	r3, #9
    4ccc:	d00a      	beq.n	4ce4 <vendor_request_handler+0x570>
			channel = requested_channel;
    4cce:	4b38      	ldr	r3, [pc, #224]	; (4db0 <vendor_request_handler+0x63c>)
    4cd0:	881b      	ldrh	r3, [r3, #0]
    4cd2:	b29a      	uxth	r2, r3
    4cd4:	4b35      	ldr	r3, [pc, #212]	; (4dac <vendor_request_handler+0x638>)
    4cd6:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    4cd8:	4b35      	ldr	r3, [pc, #212]	; (4db0 <vendor_request_handler+0x63c>)
    4cda:	2200      	movs	r2, #0
    4cdc:	801a      	strh	r2, [r3, #0]

			/* CS threshold is mode-dependent. Update it after
			 * possible mode change. TODO - kludgy. */
			cs_threshold_calc_and_set();
    4cde:	f7ff fcd3 	bl	4688 <cs_threshold_calc_and_set>
		}
		break;
    4ce2:	e2e0      	b.n	52a6 <vendor_request_handler+0xb32>
    4ce4:	e2df      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_ISP:
		command[0] = 57;
    4ce6:	2339      	movs	r3, #57	; 0x39
    4ce8:	62bb      	str	r3, [r7, #40]	; 0x28
		iap_entry(command, result);
    4cea:	4b34      	ldr	r3, [pc, #208]	; (4dbc <vendor_request_handler+0x648>)
    4cec:	681b      	ldr	r3, [r3, #0]
    4cee:	f107 0128 	add.w	r1, r7, #40	; 0x28
    4cf2:	f107 0214 	add.w	r2, r7, #20
    4cf6:	4608      	mov	r0, r1
    4cf8:	4611      	mov	r1, r2
    4cfa:	4798      	blx	r3
		*data_len = 0; /* should never return */
    4cfc:	683b      	ldr	r3, [r7, #0]
    4cfe:	2200      	movs	r2, #0
    4d00:	601a      	str	r2, [r3, #0]
		break;
    4d02:	e2d0      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    4d04:	4b2e      	ldr	r3, [pc, #184]	; (4dc0 <vendor_request_handler+0x64c>)
    4d06:	4a2f      	ldr	r2, [pc, #188]	; (4dc4 <vendor_request_handler+0x650>)
    4d08:	601a      	str	r2, [r3, #0]
		reset();
    4d0a:	f004 fe5b 	bl	99c4 <reset>
		break;
    4d0e:	e2ca      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4d10:	68bb      	ldr	r3, [r7, #8]
    4d12:	881b      	ldrh	r3, [r3, #0]
    4d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4d18:	d917      	bls.n	4d4a <vendor_request_handler+0x5d6>
    4d1a:	68bb      	ldr	r3, [r7, #8]
    4d1c:	881b      	ldrh	r3, [r3, #0]
    4d1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    4d22:	d812      	bhi.n	4d4a <vendor_request_handler+0x5d6>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4d24:	68bb      	ldr	r3, [r7, #8]
    4d26:	3302      	adds	r3, #2
    4d28:	881b      	ldrh	r3, [r3, #0]
		bootloader_ctrl = DFU_MODE;
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
    4d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4d2e:	d90c      	bls.n	4d4a <vendor_request_handler+0x5d6>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4d30:	68bb      	ldr	r3, [r7, #8]
    4d32:	3302      	adds	r3, #2
    4d34:	881b      	ldrh	r3, [r3, #0]
    4d36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    4d3a:	d806      	bhi.n	4d4a <vendor_request_handler+0x5d6>
				request_params[1] < request_params[0])
    4d3c:	68bb      	ldr	r3, [r7, #8]
    4d3e:	3302      	adds	r3, #2
    4d40:	881a      	ldrh	r2, [r3, #0]
    4d42:	68bb      	ldr	r3, [r7, #8]
    4d44:	881b      	ldrh	r3, [r3, #0]
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 ||
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4d46:	429a      	cmp	r2, r3
    4d48:	d201      	bcs.n	4d4e <vendor_request_handler+0x5da>
				request_params[1] < request_params[0])
			return 0;
    4d4a:	2300      	movs	r3, #0
    4d4c:	e2ac      	b.n	52a8 <vendor_request_handler+0xb34>
		low_freq = request_params[0];
    4d4e:	68bb      	ldr	r3, [r7, #8]
    4d50:	881a      	ldrh	r2, [r3, #0]
    4d52:	4b1d      	ldr	r3, [pc, #116]	; (4dc8 <vendor_request_handler+0x654>)
    4d54:	801a      	strh	r2, [r3, #0]
		high_freq = request_params[1];
    4d56:	68bb      	ldr	r3, [r7, #8]
    4d58:	885a      	ldrh	r2, [r3, #2]
    4d5a:	4b1c      	ldr	r3, [pc, #112]	; (4dcc <vendor_request_handler+0x658>)
    4d5c:	801a      	strh	r2, [r3, #0]
		requested_mode = MODE_SPECAN;
    4d5e:	4b10      	ldr	r3, [pc, #64]	; (4da0 <vendor_request_handler+0x62c>)
    4d60:	2204      	movs	r2, #4
    4d62:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4d64:	683b      	ldr	r3, [r7, #0]
    4d66:	2200      	movs	r2, #0
    4d68:	601a      	str	r2, [r3, #0]
		break;
    4d6a:	e29c      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    4d6c:	68bb      	ldr	r3, [r7, #8]
    4d6e:	881b      	ldrh	r3, [r3, #0]
    4d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4d74:	d901      	bls.n	4d7a <vendor_request_handler+0x606>
			return 0;
    4d76:	2300      	movs	r3, #0
    4d78:	e296      	b.n	52a8 <vendor_request_handler+0xb34>
		rssi_threshold = (int8_t)request_params[0];
    4d7a:	68bb      	ldr	r3, [r7, #8]
    4d7c:	881b      	ldrh	r3, [r3, #0]
    4d7e:	b2da      	uxtb	r2, r3
    4d80:	4b13      	ldr	r3, [pc, #76]	; (4dd0 <vendor_request_handler+0x65c>)
    4d82:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_LED_SPECAN;
    4d84:	4b06      	ldr	r3, [pc, #24]	; (4da0 <vendor_request_handler+0x62c>)
    4d86:	2207      	movs	r2, #7
    4d88:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4d8a:	683b      	ldr	r3, [r7, #0]
    4d8c:	2200      	movs	r2, #0
    4d8e:	601a      	str	r2, [r3, #0]
		break;
    4d90:	e289      	b.n	52a6 <vendor_request_handler+0xb32>
    4d92:	bf00      	nop
    4d94:	2009c054 	.word	0x2009c054
    4d98:	2009c058 	.word	0x2009c058
    4d9c:	2009c05c 	.word	0x2009c05c
    4da0:	10000a4f 	.word	0x10000a4f
    4da4:	10001060 	.word	0x10001060
    4da8:	10000a52 	.word	0x10000a52
    4dac:	1000049c 	.word	0x1000049c
    4db0:	10000a54 	.word	0x10000a54
    4db4:	10000992 	.word	0x10000992
    4db8:	10000a4e 	.word	0x10000a4e
    4dbc:	10000448 	.word	0x10000448
    4dc0:	1000001c 	.word	0x1000001c
    4dc4:	4305bb21 	.word	0x4305bb21
    4dc8:	1000049e 	.word	0x1000049e
    4dcc:	100004a0 	.word	0x100004a0
    4dd0:	100004a2 	.word	0x100004a2

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    4dd4:	687b      	ldr	r3, [r7, #4]
    4dd6:	2200      	movs	r2, #0
    4dd8:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
    4dda:	687b      	ldr	r3, [r7, #4]
    4ddc:	3301      	adds	r3, #1
    4dde:	2200      	movs	r2, #0
    4de0:	701a      	strb	r2, [r3, #0]

		length = (u8)strlen(GIT_REVISION);
    4de2:	48a7      	ldr	r0, [pc, #668]	; (5080 <vendor_request_handler+0x90c>)
    4de4:	f005 fe82 	bl	aaec <strlen>
    4de8:	4603      	mov	r3, r0
    4dea:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		data[2] = length;
    4dee:	687b      	ldr	r3, [r7, #4]
    4df0:	3302      	adds	r3, #2
    4df2:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    4df6:	701a      	strb	r2, [r3, #0]

		memcpy(&data[3], GIT_REVISION, length);
    4df8:	687b      	ldr	r3, [r7, #4]
    4dfa:	1cda      	adds	r2, r3, #3
    4dfc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    4e00:	4610      	mov	r0, r2
    4e02:	499f      	ldr	r1, [pc, #636]	; (5080 <vendor_request_handler+0x90c>)
    4e04:	461a      	mov	r2, r3
    4e06:	f005 fdfb 	bl	aa00 <memcpy>

		*data_len = 2 + 1 + length;
    4e0a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    4e0e:	1cda      	adds	r2, r3, #3
    4e10:	683b      	ldr	r3, [r7, #0]
    4e12:	601a      	str	r2, [r3, #0]
		break;
    4e14:	e247      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    4e16:	489b      	ldr	r0, [pc, #620]	; (5084 <vendor_request_handler+0x910>)
    4e18:	f005 fe68 	bl	aaec <strlen>
    4e1c:	4603      	mov	r3, r0
    4e1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		data[0] = length;
    4e22:	687b      	ldr	r3, [r7, #4]
    4e24:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    4e28:	701a      	strb	r2, [r3, #0]
		memcpy(&data[1], compile_info, length);
    4e2a:	687b      	ldr	r3, [r7, #4]
    4e2c:	1c5a      	adds	r2, r3, #1
    4e2e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    4e32:	4610      	mov	r0, r2
    4e34:	4993      	ldr	r1, [pc, #588]	; (5084 <vendor_request_handler+0x910>)
    4e36:	461a      	mov	r2, r3
    4e38:	f005 fde2 	bl	aa00 <memcpy>
		*data_len = 1 + length;
    4e3c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    4e40:	1c5a      	adds	r2, r3, #1
    4e42:	683b      	ldr	r3, [r7, #0]
    4e44:	601a      	str	r2, [r3, #0]
		break;
    4e46:	e22e      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    4e48:	687b      	ldr	r3, [r7, #4]
    4e4a:	2201      	movs	r2, #1
    4e4c:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4e4e:	683b      	ldr	r3, [r7, #0]
    4e50:	2201      	movs	r2, #1
    4e52:	601a      	str	r2, [r3, #0]
		break;
    4e54:	e227      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    4e56:	68bb      	ldr	r3, [r7, #8]
    4e58:	881b      	ldrh	r3, [r3, #0]
    4e5a:	b2da      	uxtb	r2, r3
    4e5c:	4b8a      	ldr	r3, [pc, #552]	; (5088 <vendor_request_handler+0x914>)
    4e5e:	701a      	strb	r2, [r3, #0]
		cs_threshold_calc_and_set();
    4e60:	f7ff fc12 	bl	4688 <cs_threshold_calc_and_set>
		break;
    4e64:	e21f      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    4e66:	4b88      	ldr	r3, [pc, #544]	; (5088 <vendor_request_handler+0x914>)
    4e68:	781b      	ldrb	r3, [r3, #0]
    4e6a:	b2da      	uxtb	r2, r3
    4e6c:	687b      	ldr	r3, [r7, #4]
    4e6e:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4e70:	683b      	ldr	r3, [r7, #0]
    4e72:	2201      	movs	r2, #1
    4e74:	601a      	str	r2, [r3, #0]
		break;
    4e76:	e216      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    4e78:	4984      	ldr	r1, [pc, #528]	; (508c <vendor_request_handler+0x918>)
    4e7a:	f04f 0200 	mov.w	r2, #0
    4e7e:	f04f 0300 	mov.w	r3, #0
    4e82:	e9c1 2300 	strd	r2, r3, [r1]
		target.access_code = 0;
    4e86:	4981      	ldr	r1, [pc, #516]	; (508c <vendor_request_handler+0x918>)
    4e88:	f04f 0200 	mov.w	r2, #0
    4e8c:	f04f 0300 	mov.w	r3, #0
    4e90:	e9c1 2302 	strd	r2, r3, [r1, #8]
		for(int i=0; i < 8; i++) {
    4e94:	2300      	movs	r3, #0
    4e96:	667b      	str	r3, [r7, #100]	; 0x64
    4e98:	e025      	b.n	4ee6 <vendor_request_handler+0x772>
			target.address |= (uint64_t)data[i] << 8*i;
    4e9a:	4b7c      	ldr	r3, [pc, #496]	; (508c <vendor_request_handler+0x918>)
    4e9c:	e9d3 ab00 	ldrd	sl, fp, [r3]
    4ea0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4ea2:	687a      	ldr	r2, [r7, #4]
    4ea4:	4413      	add	r3, r2
    4ea6:	781b      	ldrb	r3, [r3, #0]
    4ea8:	b2da      	uxtb	r2, r3
    4eaa:	f04f 0300 	mov.w	r3, #0
    4eae:	6e79      	ldr	r1, [r7, #100]	; 0x64
    4eb0:	00c9      	lsls	r1, r1, #3
    4eb2:	f1a1 0620 	sub.w	r6, r1, #32
    4eb6:	f1c1 0020 	rsb	r0, r1, #32
    4eba:	fa03 f901 	lsl.w	r9, r3, r1
    4ebe:	fa02 f606 	lsl.w	r6, r2, r6
    4ec2:	ea49 0906 	orr.w	r9, r9, r6
    4ec6:	fa22 f000 	lsr.w	r0, r2, r0
    4eca:	ea49 0900 	orr.w	r9, r9, r0
    4ece:	fa02 f801 	lsl.w	r8, r2, r1
    4ed2:	ea4a 0208 	orr.w	r2, sl, r8
    4ed6:	ea4b 0309 	orr.w	r3, fp, r9
    4eda:	496c      	ldr	r1, [pc, #432]	; (508c <vendor_request_handler+0x918>)
    4edc:	e9c1 2300 	strd	r2, r3, [r1]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.access_code = 0;
		for(int i=0; i < 8; i++) {
    4ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4ee2:	3301      	adds	r3, #1
    4ee4:	667b      	str	r3, [r7, #100]	; 0x64
    4ee6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    4ee8:	2b07      	cmp	r3, #7
    4eea:	ddd6      	ble.n	4e9a <vendor_request_handler+0x726>
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4eec:	2300      	movs	r3, #0
    4eee:	663b      	str	r3, [r7, #96]	; 0x60
    4ef0:	e024      	b.n	4f3c <vendor_request_handler+0x7c8>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
    4ef2:	4b66      	ldr	r3, [pc, #408]	; (508c <vendor_request_handler+0x918>)
    4ef4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
    4ef8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4efa:	3308      	adds	r3, #8
    4efc:	687a      	ldr	r2, [r7, #4]
    4efe:	4413      	add	r3, r2
    4f00:	781b      	ldrb	r3, [r3, #0]
    4f02:	b2da      	uxtb	r2, r3
    4f04:	f04f 0300 	mov.w	r3, #0
    4f08:	6e39      	ldr	r1, [r7, #96]	; 0x60
    4f0a:	00c9      	lsls	r1, r1, #3
    4f0c:	f1a1 0620 	sub.w	r6, r1, #32
    4f10:	f1c1 0020 	rsb	r0, r1, #32
    4f14:	fa03 f501 	lsl.w	r5, r3, r1
    4f18:	fa02 f606 	lsl.w	r6, r2, r6
    4f1c:	4335      	orrs	r5, r6
    4f1e:	fa22 f000 	lsr.w	r0, r2, r0
    4f22:	4305      	orrs	r5, r0
    4f24:	fa02 f401 	lsl.w	r4, r2, r1
    4f28:	ea48 0204 	orr.w	r2, r8, r4
    4f2c:	ea49 0305 	orr.w	r3, r9, r5
    4f30:	4956      	ldr	r1, [pc, #344]	; (508c <vendor_request_handler+0x918>)
    4f32:	e9c1 2302 	strd	r2, r3, [r1, #8]
		target.address = 0;
		target.access_code = 0;
		for(int i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(int i=0; i < 8; i++) {
    4f36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4f38:	3301      	adds	r3, #1
    4f3a:	663b      	str	r3, [r7, #96]	; 0x60
    4f3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    4f3e:	2b07      	cmp	r3, #7
    4f40:	ddd7      	ble.n	4ef2 <vendor_request_handler+0x77e>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
		}
		precalc();
    4f42:	f002 ff5b 	bl	7dfc <precalc>
		break;
    4f46:	e1ae      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
    4f48:	4b51      	ldr	r3, [pc, #324]	; (5090 <vendor_request_handler+0x91c>)
    4f4a:	2200      	movs	r2, #0
    4f4c:	601a      	str	r2, [r3, #0]
		for(int i=0; i < 4; i++) {
    4f4e:	2300      	movs	r3, #0
    4f50:	65fb      	str	r3, [r7, #92]	; 0x5c
    4f52:	e011      	b.n	4f78 <vendor_request_handler+0x804>
			clkn_offset <<= 8;
    4f54:	4b4e      	ldr	r3, [pc, #312]	; (5090 <vendor_request_handler+0x91c>)
    4f56:	681b      	ldr	r3, [r3, #0]
    4f58:	021b      	lsls	r3, r3, #8
    4f5a:	4a4d      	ldr	r2, [pc, #308]	; (5090 <vendor_request_handler+0x91c>)
    4f5c:	6013      	str	r3, [r2, #0]
			clkn_offset |= data[i];
    4f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4f60:	687a      	ldr	r2, [r7, #4]
    4f62:	4413      	add	r3, r2
    4f64:	781b      	ldrb	r3, [r3, #0]
    4f66:	461a      	mov	r2, r3
    4f68:	4b49      	ldr	r3, [pc, #292]	; (5090 <vendor_request_handler+0x91c>)
    4f6a:	681b      	ldr	r3, [r3, #0]
    4f6c:	4313      	orrs	r3, r2
    4f6e:	4a48      	ldr	r2, [pc, #288]	; (5090 <vendor_request_handler+0x91c>)
    4f70:	6013      	str	r3, [r2, #0]
		precalc();
		break;

	case UBERTOOTH_START_HOPPING:
		clkn_offset = 0;
		for(int i=0; i < 4; i++) {
    4f72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4f74:	3301      	adds	r3, #1
    4f76:	65fb      	str	r3, [r7, #92]	; 0x5c
    4f78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4f7a:	2b03      	cmp	r3, #3
    4f7c:	ddea      	ble.n	4f54 <vendor_request_handler+0x7e0>
			clkn_offset <<= 8;
			clkn_offset |= data[i];
		}
		hop_mode = HOP_BLUETOOTH;
    4f7e:	4b45      	ldr	r3, [pc, #276]	; (5094 <vendor_request_handler+0x920>)
    4f80:	2202      	movs	r2, #2
    4f82:	701a      	strb	r2, [r3, #0]
		dma_discard = 1;
    4f84:	4b44      	ldr	r3, [pc, #272]	; (5098 <vendor_request_handler+0x924>)
    4f86:	2201      	movs	r2, #1
    4f88:	701a      	strb	r2, [r3, #0]
		DIO_SSEL_SET;
    4f8a:	4b44      	ldr	r3, [pc, #272]	; (509c <vendor_request_handler+0x928>)
    4f8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4f90:	601a      	str	r2, [r3, #0]
		clk100ns_offset = (data[4] << 8) | (data[5] << 0);
    4f92:	687b      	ldr	r3, [r7, #4]
    4f94:	3304      	adds	r3, #4
    4f96:	781b      	ldrb	r3, [r3, #0]
    4f98:	021b      	lsls	r3, r3, #8
    4f9a:	b29a      	uxth	r2, r3
    4f9c:	687b      	ldr	r3, [r7, #4]
    4f9e:	3305      	adds	r3, #5
    4fa0:	781b      	ldrb	r3, [r3, #0]
    4fa2:	b29b      	uxth	r3, r3
    4fa4:	4313      	orrs	r3, r2
    4fa6:	b29b      	uxth	r3, r3
    4fa8:	b29a      	uxth	r2, r3
    4faa:	4b3d      	ldr	r3, [pc, #244]	; (50a0 <vendor_request_handler+0x92c>)
    4fac:	801a      	strh	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW;
    4fae:	4b3d      	ldr	r3, [pc, #244]	; (50a4 <vendor_request_handler+0x930>)
    4fb0:	2208      	movs	r2, #8
    4fb2:	701a      	strb	r2, [r3, #0]
		break;
    4fb4:	e177      	b.n	52a6 <vendor_request_handler+0xb32>
		used_channels = 0;
		afh_enabled = 1;
		break;
*/
	case UBERTOOTH_HOP:
		do_hop = 1;
    4fb6:	4b3c      	ldr	r3, [pc, #240]	; (50a8 <vendor_request_handler+0x934>)
    4fb8:	2201      	movs	r2, #1
    4fba:	701a      	strb	r2, [r3, #0]
		break;
    4fbc:	e173      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    4fbe:	687b      	ldr	r3, [r7, #4]
    4fc0:	781b      	ldrb	r3, [r3, #0]
    4fc2:	461a      	mov	r2, r3
    4fc4:	687b      	ldr	r3, [r7, #4]
    4fc6:	3301      	adds	r3, #1
    4fc8:	781b      	ldrb	r3, [r3, #0]
    4fca:	021b      	lsls	r3, r3, #8
    4fcc:	431a      	orrs	r2, r3
    4fce:	687b      	ldr	r3, [r7, #4]
    4fd0:	3302      	adds	r3, #2
    4fd2:	781b      	ldrb	r3, [r3, #0]
    4fd4:	041b      	lsls	r3, r3, #16
    4fd6:	431a      	orrs	r2, r3
    4fd8:	687b      	ldr	r3, [r7, #4]
    4fda:	3303      	adds	r3, #3
    4fdc:	781b      	ldrb	r3, [r3, #0]
    4fde:	061b      	lsls	r3, r3, #24
    4fe0:	4313      	orrs	r3, r2
    4fe2:	643b      	str	r3, [r7, #64]	; 0x40
		clkn = clock;
    4fe4:	4a31      	ldr	r2, [pc, #196]	; (50ac <vendor_request_handler+0x938>)
    4fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    4fe8:	6013      	str	r3, [r2, #0]
		cs_threshold_calc_and_set();
    4fea:	f7ff fb4d 	bl	4688 <cs_threshold_calc_and_set>
		break;
    4fee:	e15a      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_AFHMAP:
		for(int i=0; i < 10; i++) {
    4ff0:	2300      	movs	r3, #0
    4ff2:	65bb      	str	r3, [r7, #88]	; 0x58
    4ff4:	e00b      	b.n	500e <vendor_request_handler+0x89a>
			afh_map[i] = data[i];
    4ff6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    4ff8:	687a      	ldr	r2, [r7, #4]
    4ffa:	4413      	add	r3, r2
    4ffc:	7819      	ldrb	r1, [r3, #0]
    4ffe:	4a2c      	ldr	r2, [pc, #176]	; (50b0 <vendor_request_handler+0x93c>)
    5000:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5002:	4413      	add	r3, r2
    5004:	460a      	mov	r2, r1
    5006:	701a      	strb	r2, [r3, #0]
		clkn = clock;
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(int i=0; i < 10; i++) {
    5008:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    500a:	3301      	adds	r3, #1
    500c:	65bb      	str	r3, [r7, #88]	; 0x58
    500e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5010:	2b09      	cmp	r3, #9
    5012:	ddf0      	ble.n	4ff6 <vendor_request_handler+0x882>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    5014:	4b27      	ldr	r3, [pc, #156]	; (50b4 <vendor_request_handler+0x940>)
    5016:	2201      	movs	r2, #1
    5018:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    501a:	683b      	ldr	r3, [r7, #0]
    501c:	220a      	movs	r2, #10
    501e:	601a      	str	r2, [r3, #0]
		break;
    5020:	e141      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_CLEAR_AFHMAP:
		for(int i=0; i < 10; i++) {
    5022:	2300      	movs	r3, #0
    5024:	657b      	str	r3, [r7, #84]	; 0x54
    5026:	e007      	b.n	5038 <vendor_request_handler+0x8c4>
			afh_map[i] = 0;
    5028:	4a21      	ldr	r2, [pc, #132]	; (50b0 <vendor_request_handler+0x93c>)
    502a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    502c:	4413      	add	r3, r2
    502e:	2200      	movs	r2, #0
    5030:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(int i=0; i < 10; i++) {
    5032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    5034:	3301      	adds	r3, #1
    5036:	657b      	str	r3, [r7, #84]	; 0x54
    5038:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    503a:	2b09      	cmp	r3, #9
    503c:	ddf4      	ble.n	5028 <vendor_request_handler+0x8b4>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    503e:	4b1d      	ldr	r3, [pc, #116]	; (50b4 <vendor_request_handler+0x940>)
    5040:	2200      	movs	r2, #0
    5042:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    5044:	683b      	ldr	r3, [r7, #0]
    5046:	220a      	movs	r2, #10
    5048:	601a      	str	r2, [r3, #0]
		break;
    504a:	e12c      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    504c:	4b17      	ldr	r3, [pc, #92]	; (50ac <vendor_request_handler+0x938>)
    504e:	681b      	ldr	r3, [r3, #0]
    5050:	643b      	str	r3, [r7, #64]	; 0x40
		for(int i=0; i < 4; i++) {
    5052:	2300      	movs	r3, #0
    5054:	653b      	str	r3, [r7, #80]	; 0x50
    5056:	e00c      	b.n	5072 <vendor_request_handler+0x8fe>
			data[i] = (clock >> (8*i)) & 0xff;
    5058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    505a:	687a      	ldr	r2, [r7, #4]
    505c:	4413      	add	r3, r2
    505e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    5060:	00d2      	lsls	r2, r2, #3
    5062:	6c39      	ldr	r1, [r7, #64]	; 0x40
    5064:	fa21 f202 	lsr.w	r2, r1, r2
    5068:	b2d2      	uxtb	r2, r2
    506a:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(int i=0; i < 4; i++) {
    506c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    506e:	3301      	adds	r3, #1
    5070:	653b      	str	r3, [r7, #80]	; 0x50
    5072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    5074:	2b03      	cmp	r3, #3
    5076:	ddef      	ble.n	5058 <vendor_request_handler+0x8e4>
			data[i] = (clock >> (8*i)) & 0xff;
		}
		*data_len = 4;
    5078:	683b      	ldr	r3, [r7, #0]
    507a:	2204      	movs	r2, #4
    507c:	601a      	str	r2, [r3, #0]
		break;
    507e:	e112      	b.n	52a6 <vendor_request_handler+0xb32>
    5080:	0000b410 	.word	0x0000b410
    5084:	0000b3cc 	.word	0x0000b3cc
    5088:	1000044c 	.word	0x1000044c
    508c:	100010a8 	.word	0x100010a8
    5090:	1000098c 	.word	0x1000098c
    5094:	10000992 	.word	0x10000992
    5098:	10000994 	.word	0x10000994
    509c:	2009c098 	.word	0x2009c098
    50a0:	10000990 	.word	0x10000990
    50a4:	10000a4f 	.word	0x10000a4f
    50a8:	10000993 	.word	0x10000993
    50ac:	10000984 	.word	0x10000984
    50b0:	10000bc4 	.word	0x10000bc4
    50b4:	10001018 	.word	0x10001018

	case UBERTOOTH_TRIM_CLOCK:
		clk100ns_offset = (data[0] << 8) | (data[1] << 0);
    50b8:	687b      	ldr	r3, [r7, #4]
    50ba:	781b      	ldrb	r3, [r3, #0]
    50bc:	021b      	lsls	r3, r3, #8
    50be:	b29a      	uxth	r2, r3
    50c0:	687b      	ldr	r3, [r7, #4]
    50c2:	3301      	adds	r3, #1
    50c4:	781b      	ldrb	r3, [r3, #0]
    50c6:	b29b      	uxth	r3, r3
    50c8:	4313      	orrs	r3, r2
    50ca:	b29b      	uxth	r3, r3
    50cc:	b29a      	uxth	r2, r3
    50ce:	4b79      	ldr	r3, [pc, #484]	; (52b4 <vendor_request_handler+0xb40>)
    50d0:	801a      	strh	r2, [r3, #0]
		break;
    50d2:	e0e8      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;
    50d4:	683b      	ldr	r3, [r7, #0]
    50d6:	2200      	movs	r2, #0
    50d8:	601a      	str	r2, [r3, #0]

		do_hop = 0;
    50da:	4b77      	ldr	r3, [pc, #476]	; (52b8 <vendor_request_handler+0xb44>)
    50dc:	2200      	movs	r2, #0
    50de:	701a      	strb	r2, [r3, #0]
		hop_mode = HOP_BTLE;
    50e0:	4b76      	ldr	r3, [pc, #472]	; (52bc <vendor_request_handler+0xb48>)
    50e2:	2203      	movs	r2, #3
    50e4:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW_LE;
    50e6:	4b76      	ldr	r3, [pc, #472]	; (52c0 <vendor_request_handler+0xb4c>)
    50e8:	2209      	movs	r2, #9
    50ea:	701a      	strb	r2, [r3, #0]

		queue_init();
    50ec:	f003 f8e4 	bl	82b8 <queue_init>
		cs_threshold_calc_and_set();
    50f0:	f7ff faca 	bl	4688 <cs_threshold_calc_and_set>
		break;
    50f4:	e0d7      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(int i=0; i < 4; i++) {
    50f6:	2300      	movs	r3, #0
    50f8:	64fb      	str	r3, [r7, #76]	; 0x4c
    50fa:	e00d      	b.n	5118 <vendor_request_handler+0x9a4>
			data[i] = (le.access_address >> (8*i)) & 0xff;
    50fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50fe:	687a      	ldr	r2, [r7, #4]
    5100:	4413      	add	r3, r2
    5102:	4a70      	ldr	r2, [pc, #448]	; (52c4 <vendor_request_handler+0xb50>)
    5104:	6811      	ldr	r1, [r2, #0]
    5106:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5108:	00d2      	lsls	r2, r2, #3
    510a:	fa21 f202 	lsr.w	r2, r1, r2
    510e:	b2d2      	uxtb	r2, r2
    5110:	701a      	strb	r2, [r3, #0]
		queue_init();
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(int i=0; i < 4; i++) {
    5112:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5114:	3301      	adds	r3, #1
    5116:	64fb      	str	r3, [r7, #76]	; 0x4c
    5118:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    511a:	2b03      	cmp	r3, #3
    511c:	ddee      	ble.n	50fc <vendor_request_handler+0x988>
			data[i] = (le.access_address >> (8*i)) & 0xff;
		}
		*data_len = 4;
    511e:	683b      	ldr	r3, [r7, #0]
    5120:	2204      	movs	r2, #4
    5122:	601a      	str	r2, [r3, #0]
		break;
    5124:	e0bf      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    5126:	687b      	ldr	r3, [r7, #4]
    5128:	781b      	ldrb	r3, [r3, #0]
    512a:	461a      	mov	r2, r3
    512c:	687b      	ldr	r3, [r7, #4]
    512e:	3301      	adds	r3, #1
    5130:	781b      	ldrb	r3, [r3, #0]
    5132:	021b      	lsls	r3, r3, #8
    5134:	431a      	orrs	r2, r3
    5136:	687b      	ldr	r3, [r7, #4]
    5138:	3302      	adds	r3, #2
    513a:	781b      	ldrb	r3, [r3, #0]
    513c:	041b      	lsls	r3, r3, #16
    513e:	431a      	orrs	r2, r3
    5140:	687b      	ldr	r3, [r7, #4]
    5142:	3303      	adds	r3, #3
    5144:	781b      	ldrb	r3, [r3, #0]
    5146:	061b      	lsls	r3, r3, #24
    5148:	4313      	orrs	r3, r2
    514a:	4618      	mov	r0, r3
    514c:	f001 f898 	bl	6280 <le_set_access_address>
		le.target_set = 1;
    5150:	4b5c      	ldr	r3, [pc, #368]	; (52c4 <vendor_request_handler+0xb50>)
    5152:	2201      	movs	r2, #1
    5154:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    5156:	e0a6      	b.n	52a6 <vendor_request_handler+0xb32>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    5158:	687b      	ldr	r3, [r7, #4]
    515a:	2213      	movs	r2, #19
    515c:	701a      	strb	r2, [r3, #0]
		data[1] = 0x37;
    515e:	687b      	ldr	r3, [r7, #4]
    5160:	3301      	adds	r3, #1
    5162:	2237      	movs	r2, #55	; 0x37
    5164:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    5166:	683b      	ldr	r3, [r7, #0]
    5168:	2202      	movs	r2, #2
    516a:	601a      	str	r2, [r3, #0]
		break;
    516c:	e09b      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    516e:	4b55      	ldr	r3, [pc, #340]	; (52c4 <vendor_request_handler+0xb50>)
    5170:	691b      	ldr	r3, [r3, #16]
    5172:	2b00      	cmp	r3, #0
    5174:	bf14      	ite	ne
    5176:	2301      	movne	r3, #1
    5178:	2300      	moveq	r3, #0
    517a:	b2db      	uxtb	r3, r3
    517c:	461a      	mov	r2, r3
    517e:	687b      	ldr	r3, [r7, #4]
    5180:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    5182:	683b      	ldr	r3, [r7, #0]
    5184:	2201      	movs	r2, #1
    5186:	601a      	str	r2, [r3, #0]
		break;
    5188:	e08d      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    518a:	68bb      	ldr	r3, [r7, #8]
    518c:	881b      	ldrh	r3, [r3, #0]
    518e:	2b00      	cmp	r3, #0
    5190:	bf14      	ite	ne
    5192:	2301      	movne	r3, #1
    5194:	2300      	moveq	r3, #0
    5196:	b2db      	uxtb	r3, r3
    5198:	461a      	mov	r2, r3
    519a:	4b4a      	ldr	r3, [pc, #296]	; (52c4 <vendor_request_handler+0xb50>)
    519c:	611a      	str	r2, [r3, #16]
		break;
    519e:	e082      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_POLL:
		p = dequeue();
    51a0:	f003 f8d0 	bl	8344 <dequeue>
    51a4:	64b8      	str	r0, [r7, #72]	; 0x48
		if (p != NULL) {
    51a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    51a8:	2b00      	cmp	r3, #0
    51aa:	d008      	beq.n	51be <vendor_request_handler+0xa4a>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    51ac:	6878      	ldr	r0, [r7, #4]
    51ae:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    51b0:	2240      	movs	r2, #64	; 0x40
    51b2:	f005 fc25 	bl	aa00 <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    51b6:	683b      	ldr	r3, [r7, #0]
    51b8:	2240      	movs	r2, #64	; 0x40
    51ba:	601a      	str	r2, [r3, #0]
		} else {
			data[0] = 0;
			*data_len = 1;
		}
		break;
    51bc:	e073      	b.n	52a6 <vendor_request_handler+0xb32>
		p = dequeue();
		if (p != NULL) {
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
			*data_len = sizeof(usb_pkt_rx);
		} else {
			data[0] = 0;
    51be:	687b      	ldr	r3, [r7, #4]
    51c0:	2200      	movs	r2, #0
    51c2:	701a      	strb	r2, [r3, #0]
			*data_len = 1;
    51c4:	683b      	ldr	r3, [r7, #0]
    51c6:	2201      	movs	r2, #1
    51c8:	601a      	str	r2, [r3, #0]
		}
		break;
    51ca:	e06c      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    51cc:	683b      	ldr	r3, [r7, #0]
    51ce:	2200      	movs	r2, #0
    51d0:	601a      	str	r2, [r3, #0]

		hop_mode = HOP_NONE;
    51d2:	4b3a      	ldr	r3, [pc, #232]	; (52bc <vendor_request_handler+0xb48>)
    51d4:	2200      	movs	r2, #0
    51d6:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_PROMISC_LE;
    51d8:	4b39      	ldr	r3, [pc, #228]	; (52c0 <vendor_request_handler+0xb4c>)
    51da:	220a      	movs	r2, #10
    51dc:	701a      	strb	r2, [r3, #0]

		queue_init();
    51de:	f003 f86b 	bl	82b8 <queue_init>
		cs_threshold_calc_and_set();
    51e2:	f7ff fa51 	bl	4688 <cs_threshold_calc_and_set>
		break;
    51e6:	e05e      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    51e8:	68bb      	ldr	r3, [r7, #8]
    51ea:	881b      	ldrh	r3, [r3, #0]
    51ec:	b2db      	uxtb	r3, r3
    51ee:	4618      	mov	r0, r3
    51f0:	f004 fa06 	bl	9600 <cc2400_get>
    51f4:	4603      	mov	r3, r0
    51f6:	87fb      	strh	r3, [r7, #62]	; 0x3e
		data[0] = (reg_val >> 8) & 0xff;
    51f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    51fa:	0a1b      	lsrs	r3, r3, #8
    51fc:	b29b      	uxth	r3, r3
    51fe:	b2da      	uxtb	r2, r3
    5200:	687b      	ldr	r3, [r7, #4]
    5202:	701a      	strb	r2, [r3, #0]
		data[1] = reg_val & 0xff;
    5204:	687b      	ldr	r3, [r7, #4]
    5206:	3301      	adds	r3, #1
    5208:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    520a:	b2d2      	uxtb	r2, r2
    520c:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    520e:	683b      	ldr	r3, [r7, #0]
    5210:	2202      	movs	r2, #2
    5212:	601a      	str	r2, [r3, #0]
		break;
    5214:	e047      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    5216:	68bb      	ldr	r3, [r7, #8]
    5218:	881b      	ldrh	r3, [r3, #0]
    521a:	b2da      	uxtb	r2, r3
    521c:	68bb      	ldr	r3, [r7, #8]
    521e:	3302      	adds	r3, #2
    5220:	881b      	ldrh	r3, [r3, #0]
    5222:	4610      	mov	r0, r2
    5224:	4619      	mov	r1, r3
    5226:	f004 fa01 	bl	962c <cc2400_set>
		break;
    522a:	e03c      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_BTLE_SLAVE:
		memcpy(slave_mac_address, data, 6);
    522c:	4826      	ldr	r0, [pc, #152]	; (52c8 <vendor_request_handler+0xb54>)
    522e:	6879      	ldr	r1, [r7, #4]
    5230:	2206      	movs	r2, #6
    5232:	f005 fbe5 	bl	aa00 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    5236:	4b22      	ldr	r3, [pc, #136]	; (52c0 <vendor_request_handler+0xb4c>)
    5238:	220c      	movs	r2, #12
    523a:	701a      	strb	r2, [r3, #0]
		break;
    523c:	e033      	b.n	52a6 <vendor_request_handler+0xb32>

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    523e:	687b      	ldr	r3, [r7, #4]
    5240:	795a      	ldrb	r2, [r3, #5]
    5242:	4b20      	ldr	r3, [pc, #128]	; (52c4 <vendor_request_handler+0xb50>)
    5244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		le.target[1] = data[4];
    5248:	687b      	ldr	r3, [r7, #4]
    524a:	791a      	ldrb	r2, [r3, #4]
    524c:	4b1d      	ldr	r3, [pc, #116]	; (52c4 <vendor_request_handler+0xb50>)
    524e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		le.target[2] = data[3];
    5252:	687b      	ldr	r3, [r7, #4]
    5254:	78da      	ldrb	r2, [r3, #3]
    5256:	4b1b      	ldr	r3, [pc, #108]	; (52c4 <vendor_request_handler+0xb50>)
    5258:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		le.target[3] = data[2];
    525c:	687b      	ldr	r3, [r7, #4]
    525e:	789a      	ldrb	r2, [r3, #2]
    5260:	4b18      	ldr	r3, [pc, #96]	; (52c4 <vendor_request_handler+0xb50>)
    5262:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		le.target[4] = data[1];
    5266:	687b      	ldr	r3, [r7, #4]
    5268:	785a      	ldrb	r2, [r3, #1]
    526a:	4b16      	ldr	r3, [pc, #88]	; (52c4 <vendor_request_handler+0xb50>)
    526c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		le.target[5] = data[0];
    5270:	687b      	ldr	r3, [r7, #4]
    5272:	781a      	ldrb	r2, [r3, #0]
    5274:	4b13      	ldr	r3, [pc, #76]	; (52c4 <vendor_request_handler+0xb50>)
    5276:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		le.target_set = 1;
    527a:	4b12      	ldr	r3, [pc, #72]	; (52c4 <vendor_request_handler+0xb50>)
    527c:	2201      	movs	r2, #1
    527e:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    5280:	e011      	b.n	52a6 <vendor_request_handler+0xb32>

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    5282:	68bb      	ldr	r3, [r7, #8]
    5284:	881b      	ldrh	r3, [r3, #0]
    5286:	b2da      	uxtb	r2, r3
    5288:	4b10      	ldr	r3, [pc, #64]	; (52cc <vendor_request_handler+0xb58>)
    528a:	701a      	strb	r2, [r3, #0]
		break;
    528c:	e00b      	b.n	52a6 <vendor_request_handler+0xb32>
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    528e:	4b0c      	ldr	r3, [pc, #48]	; (52c0 <vendor_request_handler+0xb4c>)
    5290:	220d      	movs	r2, #13
    5292:	701a      	strb	r2, [r3, #0]
		ego_mode = request_params[0];
    5294:	68bb      	ldr	r3, [r7, #8]
    5296:	881b      	ldrh	r3, [r3, #0]
    5298:	b2da      	uxtb	r2, r3
    529a:	4b0d      	ldr	r3, [pc, #52]	; (52d0 <vendor_request_handler+0xb5c>)
    529c:	701a      	strb	r2, [r3, #0]
		break;
    529e:	e002      	b.n	52a6 <vendor_request_handler+0xb32>

	default:
		return 0;
    52a0:	2300      	movs	r3, #0
    52a2:	e001      	b.n	52a8 <vendor_request_handler+0xb34>
		le.target_set = 1;
		break;

	case UBERTOOTH_DO_SOMETHING:
		// do something! just don't commit anything here
		break;
    52a4:	bf00      	nop
		break;

	default:
		return 0;
	}
	return 1;
    52a6:	2301      	movs	r3, #1
}
    52a8:	4618      	mov	r0, r3
    52aa:	376c      	adds	r7, #108	; 0x6c
    52ac:	46bd      	mov	sp, r7
    52ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52b2:	bf00      	nop
    52b4:	10000990 	.word	0x10000990
    52b8:	10000993 	.word	0x10000993
    52bc:	10000992 	.word	0x10000992
    52c0:	10000a4f 	.word	0x10000a4f
    52c4:	10000458 	.word	0x10000458
    52c8:	1000099c 	.word	0x1000099c
    52cc:	10000a50 	.word	0x10000a50
    52d0:	10000a51 	.word	0x10000a51

000052d4 <clkn_init>:

static void clkn_init()
{
    52d4:	b480      	push	{r7}
    52d6:	af00      	add	r7, sp, #0
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    52d8:	4b0c      	ldr	r3, [pc, #48]	; (530c <clkn_init+0x38>)
    52da:	2202      	movs	r2, #2
    52dc:	601a      	str	r2, [r3, #0]
	clkn = 0;
    52de:	4b0c      	ldr	r3, [pc, #48]	; (5310 <clkn_init+0x3c>)
    52e0:	2200      	movs	r2, #0
    52e2:	601a      	str	r2, [r3, #0]
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    52e4:	4b0b      	ldr	r3, [pc, #44]	; (5314 <clkn_init+0x40>)
    52e6:	2204      	movs	r2, #4
    52e8:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    52ea:	4b0b      	ldr	r3, [pc, #44]	; (5318 <clkn_init+0x44>)
    52ec:	f640 4234 	movw	r2, #3124	; 0xc34
    52f0:	601a      	str	r2, [r3, #0]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    52f2:	4b0a      	ldr	r3, [pc, #40]	; (531c <clkn_init+0x48>)
    52f4:	2203      	movs	r2, #3
    52f6:	601a      	str	r2, [r3, #0]
	ISER0 = ISER0_ISE_TIMER0;
    52f8:	4b09      	ldr	r3, [pc, #36]	; (5320 <clkn_init+0x4c>)
    52fa:	2202      	movs	r2, #2
    52fc:	601a      	str	r2, [r3, #0]

	/* start timer */
	T0TCR = TCR_Counter_Enable;
    52fe:	4b03      	ldr	r3, [pc, #12]	; (530c <clkn_init+0x38>)
    5300:	2201      	movs	r2, #1
    5302:	601a      	str	r2, [r3, #0]
}
    5304:	46bd      	mov	sp, r7
    5306:	f85d 7b04 	ldr.w	r7, [sp], #4
    530a:	4770      	bx	lr
    530c:	40004004 	.word	0x40004004
    5310:	10000984 	.word	0x10000984
    5314:	4000400c 	.word	0x4000400c
    5318:	40004018 	.word	0x40004018
    531c:	40004014 	.word	0x40004014
    5320:	e000e100 	.word	0xe000e100

00005324 <TIMER0_IRQHandler>:

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    5324:	b480      	push	{r7}
    5326:	b083      	sub	sp, #12
    5328:	af00      	add	r7, sp, #0
	if (T0IR & TIR_MR0_Interrupt) {
    532a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    532e:	681b      	ldr	r3, [r3, #0]
    5330:	f003 0301 	and.w	r3, r3, #1
    5334:	2b00      	cmp	r3, #0
    5336:	f000 8084 	beq.w	5442 <TIMER0_IRQHandler+0x11e>

		clkn += clkn_offset + 1;
    533a:	4b44      	ldr	r3, [pc, #272]	; (544c <TIMER0_IRQHandler+0x128>)
    533c:	681b      	ldr	r3, [r3, #0]
    533e:	1c5a      	adds	r2, r3, #1
    5340:	4b43      	ldr	r3, [pc, #268]	; (5450 <TIMER0_IRQHandler+0x12c>)
    5342:	681b      	ldr	r3, [r3, #0]
    5344:	4413      	add	r3, r2
    5346:	4a42      	ldr	r2, [pc, #264]	; (5450 <TIMER0_IRQHandler+0x12c>)
    5348:	6013      	str	r3, [r2, #0]
		clkn_offset = 0;
    534a:	4b40      	ldr	r3, [pc, #256]	; (544c <TIMER0_IRQHandler+0x128>)
    534c:	2200      	movs	r2, #0
    534e:	601a      	str	r2, [r3, #0]

		uint32_t le_clk = (clkn - le.conn_epoch) & 0x03;
    5350:	4b3f      	ldr	r3, [pc, #252]	; (5450 <TIMER0_IRQHandler+0x12c>)
    5352:	681a      	ldr	r2, [r3, #0]
    5354:	4b3f      	ldr	r3, [pc, #252]	; (5454 <TIMER0_IRQHandler+0x130>)
    5356:	699b      	ldr	r3, [r3, #24]
    5358:	1ad3      	subs	r3, r2, r3
    535a:	f003 0303 	and.w	r3, r3, #3
    535e:	607b      	str	r3, [r7, #4]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    5360:	4b3d      	ldr	r3, [pc, #244]	; (5458 <TIMER0_IRQHandler+0x134>)
    5362:	781b      	ldrb	r3, [r3, #0]
    5364:	b2db      	uxtb	r3, r3
    5366:	2b00      	cmp	r3, #0
    5368:	d004      	beq.n	5374 <TIMER0_IRQHandler+0x50>
    536a:	4b3b      	ldr	r3, [pc, #236]	; (5458 <TIMER0_IRQHandler+0x134>)
    536c:	781b      	ldrb	r3, [r3, #0]
    536e:	b2db      	uxtb	r3, r3
    5370:	2b01      	cmp	r3, #1
    5372:	d10a      	bne.n	538a <TIMER0_IRQHandler+0x66>
			if ((clkn & 0x7f) == 0)
    5374:	4b36      	ldr	r3, [pc, #216]	; (5450 <TIMER0_IRQHandler+0x12c>)
    5376:	681b      	ldr	r3, [r3, #0]
    5378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    537c:	2b00      	cmp	r3, #0
    537e:	d103      	bne.n	5388 <TIMER0_IRQHandler+0x64>
				do_hop = 1;
    5380:	4b36      	ldr	r3, [pc, #216]	; (545c <TIMER0_IRQHandler+0x138>)
    5382:	2201      	movs	r2, #1
    5384:	701a      	strb	r2, [r3, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
			if ((clkn & 0x7f) == 0)
    5386:	e04e      	b.n	5426 <TIMER0_IRQHandler+0x102>
    5388:	e04d      	b.n	5426 <TIMER0_IRQHandler+0x102>
				do_hop = 1;
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    538a:	4b33      	ldr	r3, [pc, #204]	; (5458 <TIMER0_IRQHandler+0x134>)
    538c:	781b      	ldrb	r3, [r3, #0]
    538e:	b2db      	uxtb	r3, r3
    5390:	2b02      	cmp	r3, #2
    5392:	d109      	bne.n	53a8 <TIMER0_IRQHandler+0x84>
			if ((clkn & 0x1) == 0)
    5394:	4b2e      	ldr	r3, [pc, #184]	; (5450 <TIMER0_IRQHandler+0x12c>)
    5396:	681b      	ldr	r3, [r3, #0]
    5398:	f003 0301 	and.w	r3, r3, #1
    539c:	2b00      	cmp	r3, #0
    539e:	d142      	bne.n	5426 <TIMER0_IRQHandler+0x102>
				do_hop = 1;
    53a0:	4b2e      	ldr	r3, [pc, #184]	; (545c <TIMER0_IRQHandler+0x138>)
    53a2:	2201      	movs	r2, #1
    53a4:	701a      	strb	r2, [r3, #0]
    53a6:	e03e      	b.n	5426 <TIMER0_IRQHandler+0x102>
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    53a8:	4b2b      	ldr	r3, [pc, #172]	; (5458 <TIMER0_IRQHandler+0x134>)
    53aa:	781b      	ldrb	r3, [r3, #0]
    53ac:	b2db      	uxtb	r3, r3
    53ae:	2b03      	cmp	r3, #3
    53b0:	d126      	bne.n	5400 <TIMER0_IRQHandler+0xdc>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    53b2:	4b28      	ldr	r3, [pc, #160]	; (5454 <TIMER0_IRQHandler+0x130>)
    53b4:	7d1b      	ldrb	r3, [r3, #20]
    53b6:	2b03      	cmp	r3, #3
    53b8:	d135      	bne.n	5426 <TIMER0_IRQHandler+0x102>
    53ba:	687b      	ldr	r3, [r7, #4]
    53bc:	2b00      	cmp	r3, #0
    53be:	d132      	bne.n	5426 <TIMER0_IRQHandler+0x102>
				--le.interval_timer;
    53c0:	4b24      	ldr	r3, [pc, #144]	; (5454 <TIMER0_IRQHandler+0x130>)
    53c2:	8b9b      	ldrh	r3, [r3, #28]
    53c4:	b29b      	uxth	r3, r3
    53c6:	3b01      	subs	r3, #1
    53c8:	b29a      	uxth	r2, r3
    53ca:	4b22      	ldr	r3, [pc, #136]	; (5454 <TIMER0_IRQHandler+0x130>)
    53cc:	839a      	strh	r2, [r3, #28]
				if (le.interval_timer == 0) {
    53ce:	4b21      	ldr	r3, [pc, #132]	; (5454 <TIMER0_IRQHandler+0x130>)
    53d0:	8b9b      	ldrh	r3, [r3, #28]
    53d2:	b29b      	uxth	r3, r3
    53d4:	2b00      	cmp	r3, #0
    53d6:	d10e      	bne.n	53f6 <TIMER0_IRQHandler+0xd2>
					do_hop = 1;
    53d8:	4b20      	ldr	r3, [pc, #128]	; (545c <TIMER0_IRQHandler+0x138>)
    53da:	2201      	movs	r2, #1
    53dc:	701a      	strb	r2, [r3, #0]
					++le.conn_count;
    53de:	4b1d      	ldr	r3, [pc, #116]	; (5454 <TIMER0_IRQHandler+0x130>)
    53e0:	8c1b      	ldrh	r3, [r3, #32]
    53e2:	b29b      	uxth	r3, r3
    53e4:	3301      	adds	r3, #1
    53e6:	b29a      	uxth	r2, r3
    53e8:	4b1a      	ldr	r3, [pc, #104]	; (5454 <TIMER0_IRQHandler+0x130>)
    53ea:	841a      	strh	r2, [r3, #32]
					le.interval_timer = le.conn_interval;
    53ec:	4b19      	ldr	r3, [pc, #100]	; (5454 <TIMER0_IRQHandler+0x130>)
    53ee:	8bda      	ldrh	r2, [r3, #30]
    53f0:	4b18      	ldr	r3, [pc, #96]	; (5454 <TIMER0_IRQHandler+0x130>)
    53f2:	839a      	strh	r2, [r3, #28]
    53f4:	e017      	b.n	5426 <TIMER0_IRQHandler+0x102>
				} else {
					TXLED_CLR; // hack!
    53f6:	4b1a      	ldr	r3, [pc, #104]	; (5460 <TIMER0_IRQHandler+0x13c>)
    53f8:	f44f 7280 	mov.w	r2, #256	; 0x100
    53fc:	601a      	str	r2, [r3, #0]
    53fe:	e012      	b.n	5426 <TIMER0_IRQHandler+0x102>
				}
			}
		}
		else if (hop_mode == HOP_AFH) {
    5400:	4b15      	ldr	r3, [pc, #84]	; (5458 <TIMER0_IRQHandler+0x134>)
    5402:	781b      	ldrb	r3, [r3, #0]
    5404:	b2db      	uxtb	r3, r3
    5406:	2b05      	cmp	r3, #5
    5408:	d10d      	bne.n	5426 <TIMER0_IRQHandler+0x102>
			if( (last_hop + hop_timeout) == clkn ) {
    540a:	4b16      	ldr	r3, [pc, #88]	; (5464 <TIMER0_IRQHandler+0x140>)
    540c:	881b      	ldrh	r3, [r3, #0]
    540e:	b29b      	uxth	r3, r3
    5410:	461a      	mov	r2, r3
    5412:	4b15      	ldr	r3, [pc, #84]	; (5468 <TIMER0_IRQHandler+0x144>)
    5414:	681b      	ldr	r3, [r3, #0]
    5416:	441a      	add	r2, r3
    5418:	4b0d      	ldr	r3, [pc, #52]	; (5450 <TIMER0_IRQHandler+0x12c>)
    541a:	681b      	ldr	r3, [r3, #0]
    541c:	429a      	cmp	r2, r3
    541e:	d102      	bne.n	5426 <TIMER0_IRQHandler+0x102>
				do_hop = 1;
    5420:	4b0e      	ldr	r3, [pc, #56]	; (545c <TIMER0_IRQHandler+0x138>)
    5422:	2201      	movs	r2, #1
    5424:	701a      	strb	r2, [r3, #0]
			}
		}

		T0MR0 = 3124 + clk100ns_offset;
    5426:	4b11      	ldr	r3, [pc, #68]	; (546c <TIMER0_IRQHandler+0x148>)
    5428:	4a11      	ldr	r2, [pc, #68]	; (5470 <TIMER0_IRQHandler+0x14c>)
    542a:	8812      	ldrh	r2, [r2, #0]
    542c:	b292      	uxth	r2, r2
    542e:	f602 4234 	addw	r2, r2, #3124	; 0xc34
    5432:	601a      	str	r2, [r3, #0]
		clk100ns_offset = 0;
    5434:	4b0e      	ldr	r3, [pc, #56]	; (5470 <TIMER0_IRQHandler+0x14c>)
    5436:	2200      	movs	r2, #0
    5438:	801a      	strh	r2, [r3, #0]

		/* Ack interrupt */
		T0IR = TIR_MR0_Interrupt;
    543a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    543e:	2201      	movs	r2, #1
    5440:	601a      	str	r2, [r3, #0]
	}
}
    5442:	370c      	adds	r7, #12
    5444:	46bd      	mov	sp, r7
    5446:	f85d 7b04 	ldr.w	r7, [sp], #4
    544a:	4770      	bx	lr
    544c:	1000098c 	.word	0x1000098c
    5450:	10000984 	.word	0x10000984
    5454:	10000458 	.word	0x10000458
    5458:	10000992 	.word	0x10000992
    545c:	10000993 	.word	0x10000993
    5460:	2009c03c 	.word	0x2009c03c
    5464:	1000044e 	.word	0x1000044e
    5468:	10000988 	.word	0x10000988
    546c:	40004018 	.word	0x40004018
    5470:	10000990 	.word	0x10000990

00005474 <EINT3_IRQHandler>:

/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
//static volatile u8 txledstate = 1;
void EINT3_IRQHandler()
{
    5474:	b480      	push	{r7}
    5476:	af00      	add	r7, sp, #0
	/* TODO - check specific source of shared interrupt */
	IO2IntClr   = PIN_GIO6; // clear interrupt
    5478:	4b0a      	ldr	r3, [pc, #40]	; (54a4 <EINT3_IRQHandler+0x30>)
    547a:	2204      	movs	r2, #4
    547c:	601a      	str	r2, [r3, #0]
	DIO_SSEL_CLR;           // enable SPI
    547e:	4b0a      	ldr	r3, [pc, #40]	; (54a8 <EINT3_IRQHandler+0x34>)
    5480:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5484:	601a      	str	r2, [r3, #0]
	cs_trigger  = 1;        // signal trigger
    5486:	4b09      	ldr	r3, [pc, #36]	; (54ac <EINT3_IRQHandler+0x38>)
    5488:	2201      	movs	r2, #1
    548a:	701a      	strb	r2, [r3, #0]
	if (hop_mode == HOP_BLUETOOTH)
    548c:	4b08      	ldr	r3, [pc, #32]	; (54b0 <EINT3_IRQHandler+0x3c>)
    548e:	781b      	ldrb	r3, [r3, #0]
    5490:	b2db      	uxtb	r3, r3
    5492:	2b02      	cmp	r3, #2
    5494:	d102      	bne.n	549c <EINT3_IRQHandler+0x28>
		dma_discard = 0;
    5496:	4b07      	ldr	r3, [pc, #28]	; (54b4 <EINT3_IRQHandler+0x40>)
    5498:	2200      	movs	r2, #0
    549a:	701a      	strb	r2, [r3, #0]

}
    549c:	46bd      	mov	sp, r7
    549e:	f85d 7b04 	ldr.w	r7, [sp], #4
    54a2:	4770      	bx	lr
    54a4:	400280ac 	.word	0x400280ac
    54a8:	2009c09c 	.word	0x2009c09c
    54ac:	100010a0 	.word	0x100010a0
    54b0:	10000992 	.word	0x10000992
    54b4:	10000994 	.word	0x10000994

000054b8 <msleep>:

/* Sleep (busy wait) for 'millis' milliseconds. The 'wait' routines in
 * ubertooth.c are matched to the clock setup at boot time and can not
 * be used while the board is running at 100MHz. */
static void msleep(uint32_t millis)
{
    54b8:	b480      	push	{r7}
    54ba:	b085      	sub	sp, #20
    54bc:	af00      	add	r7, sp, #0
    54be:	6078      	str	r0, [r7, #4]
	uint32_t stop_at = clkn + millis * 3125 / 1000;  // millis -> clkn ticks
    54c0:	687b      	ldr	r3, [r7, #4]
    54c2:	f640 4235 	movw	r2, #3125	; 0xc35
    54c6:	fb02 f303 	mul.w	r3, r2, r3
    54ca:	4a09      	ldr	r2, [pc, #36]	; (54f0 <msleep+0x38>)
    54cc:	fba2 2303 	umull	r2, r3, r2, r3
    54d0:	099a      	lsrs	r2, r3, #6
    54d2:	4b08      	ldr	r3, [pc, #32]	; (54f4 <msleep+0x3c>)
    54d4:	681b      	ldr	r3, [r3, #0]
    54d6:	4413      	add	r3, r2
    54d8:	60fb      	str	r3, [r7, #12]
	do { } while (clkn < stop_at);                   // TODO: handle wrapping
    54da:	4b06      	ldr	r3, [pc, #24]	; (54f4 <msleep+0x3c>)
    54dc:	681a      	ldr	r2, [r3, #0]
    54de:	68fb      	ldr	r3, [r7, #12]
    54e0:	429a      	cmp	r2, r3
    54e2:	d3fa      	bcc.n	54da <msleep+0x22>
}
    54e4:	3714      	adds	r7, #20
    54e6:	46bd      	mov	sp, r7
    54e8:	f85d 7b04 	ldr.w	r7, [sp], #4
    54ec:	4770      	bx	lr
    54ee:	bf00      	nop
    54f0:	10624dd3 	.word	0x10624dd3
    54f4:	10000984 	.word	0x10000984

000054f8 <dma_init>:

static void dma_init()
{
    54f8:	b480      	push	{r7}
    54fa:	af00      	add	r7, sp, #0
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    54fc:	4a33      	ldr	r2, [pc, #204]	; (55cc <dma_init+0xd4>)
    54fe:	4b33      	ldr	r3, [pc, #204]	; (55cc <dma_init+0xd4>)
    5500:	681b      	ldr	r3, [r3, #0]
    5502:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    5506:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    5508:	4b31      	ldr	r3, [pc, #196]	; (55d0 <dma_init+0xd8>)
    550a:	2200      	movs	r2, #0
    550c:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    550e:	4b31      	ldr	r3, [pc, #196]	; (55d4 <dma_init+0xdc>)
    5510:	2200      	movs	r2, #0
    5512:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    5514:	4b30      	ldr	r3, [pc, #192]	; (55d8 <dma_init+0xe0>)
    5516:	2200      	movs	r2, #0
    5518:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    551a:	4b30      	ldr	r3, [pc, #192]	; (55dc <dma_init+0xe4>)
    551c:	2200      	movs	r2, #0
    551e:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    5520:	4b2f      	ldr	r3, [pc, #188]	; (55e0 <dma_init+0xe8>)
    5522:	2200      	movs	r2, #0
    5524:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5526:	4b2f      	ldr	r3, [pc, #188]	; (55e4 <dma_init+0xec>)
    5528:	2200      	movs	r2, #0
    552a:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    552c:	4b2e      	ldr	r3, [pc, #184]	; (55e8 <dma_init+0xf0>)
    552e:	2200      	movs	r2, #0
    5530:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    5532:	4b2e      	ldr	r3, [pc, #184]	; (55ec <dma_init+0xf4>)
    5534:	2200      	movs	r2, #0
    5536:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5538:	4b2d      	ldr	r3, [pc, #180]	; (55f0 <dma_init+0xf8>)
    553a:	22ff      	movs	r2, #255	; 0xff
    553c:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    553e:	4b2d      	ldr	r3, [pc, #180]	; (55f4 <dma_init+0xfc>)
    5540:	22ff      	movs	r2, #255	; 0xff
    5542:	601a      	str	r2, [r3, #0]

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
    5544:	4b2c      	ldr	r3, [pc, #176]	; (55f8 <dma_init+0x100>)
    5546:	4a2d      	ldr	r2, [pc, #180]	; (55fc <dma_init+0x104>)
    5548:	601a      	str	r2, [r3, #0]
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
    554a:	4a2d      	ldr	r2, [pc, #180]	; (5600 <dma_init+0x108>)
    554c:	4b2a      	ldr	r3, [pc, #168]	; (55f8 <dma_init+0x100>)
    554e:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
    5550:	4a2c      	ldr	r2, [pc, #176]	; (5604 <dma_init+0x10c>)
    5552:	4b29      	ldr	r3, [pc, #164]	; (55f8 <dma_init+0x100>)
    5554:	609a      	str	r2, [r3, #8]
	rx_dma_lli1.control = (DMA_SIZE) |
    5556:	4b28      	ldr	r3, [pc, #160]	; (55f8 <dma_init+0x100>)
    5558:	4a2b      	ldr	r2, [pc, #172]	; (5608 <dma_init+0x110>)
    555a:	60da      	str	r2, [r3, #12]
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
    555c:	4b29      	ldr	r3, [pc, #164]	; (5604 <dma_init+0x10c>)
    555e:	4a27      	ldr	r2, [pc, #156]	; (55fc <dma_init+0x104>)
    5560:	601a      	str	r2, [r3, #0]
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
    5562:	4a2a      	ldr	r2, [pc, #168]	; (560c <dma_init+0x114>)
    5564:	4b27      	ldr	r3, [pc, #156]	; (5604 <dma_init+0x10c>)
    5566:	605a      	str	r2, [r3, #4]
	rx_dma_lli2.next_lli = (u32)&rx_dma_lli1;
    5568:	4a23      	ldr	r2, [pc, #140]	; (55f8 <dma_init+0x100>)
    556a:	4b26      	ldr	r3, [pc, #152]	; (5604 <dma_init+0x10c>)
    556c:	609a      	str	r2, [r3, #8]
	rx_dma_lli2.control = (DMA_SIZE) |
    556e:	4b25      	ldr	r3, [pc, #148]	; (5604 <dma_init+0x10c>)
    5570:	4a25      	ldr	r2, [pc, #148]	; (5608 <dma_init+0x110>)
    5572:	60da      	str	r2, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* disable DMA interrupts */
	ICER0 = ICER0_ICE_DMA;
    5574:	4b26      	ldr	r3, [pc, #152]	; (5610 <dma_init+0x118>)
    5576:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    557a:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    557c:	4b25      	ldr	r3, [pc, #148]	; (5614 <dma_init+0x11c>)
    557e:	2201      	movs	r2, #1
    5580:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    5582:	bf00      	nop
    5584:	4b23      	ldr	r3, [pc, #140]	; (5614 <dma_init+0x11c>)
    5586:	681b      	ldr	r3, [r3, #0]
    5588:	f003 0301 	and.w	r3, r3, #1
    558c:	2b00      	cmp	r3, #0
    558e:	d0f9      	beq.n	5584 <dma_init+0x8c>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    5590:	4a21      	ldr	r2, [pc, #132]	; (5618 <dma_init+0x120>)
    5592:	4b19      	ldr	r3, [pc, #100]	; (55f8 <dma_init+0x100>)
    5594:	681b      	ldr	r3, [r3, #0]
    5596:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    5598:	4a20      	ldr	r2, [pc, #128]	; (561c <dma_init+0x124>)
    559a:	4b17      	ldr	r3, [pc, #92]	; (55f8 <dma_init+0x100>)
    559c:	685b      	ldr	r3, [r3, #4]
    559e:	6013      	str	r3, [r2, #0]
	DMACC0LLI = rx_dma_lli1.next_lli;
    55a0:	4a1f      	ldr	r2, [pc, #124]	; (5620 <dma_init+0x128>)
    55a2:	4b15      	ldr	r3, [pc, #84]	; (55f8 <dma_init+0x100>)
    55a4:	689b      	ldr	r3, [r3, #8]
    55a6:	6013      	str	r3, [r2, #0]
	DMACC0Control = rx_dma_lli1.control;
    55a8:	4a1e      	ldr	r2, [pc, #120]	; (5624 <dma_init+0x12c>)
    55aa:	4b13      	ldr	r3, [pc, #76]	; (55f8 <dma_init+0x100>)
    55ac:	68db      	ldr	r3, [r3, #12]
    55ae:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    55b0:	4b07      	ldr	r3, [pc, #28]	; (55d0 <dma_init+0xd8>)
    55b2:	f24d 0206 	movw	r2, #53254	; 0xd006
    55b6:	601a      	str	r2, [r3, #0]
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	/* reset interrupt counters */
	rx_tc = 0;
    55b8:	4b1b      	ldr	r3, [pc, #108]	; (5628 <dma_init+0x130>)
    55ba:	2200      	movs	r2, #0
    55bc:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    55be:	4b1b      	ldr	r3, [pc, #108]	; (562c <dma_init+0x134>)
    55c0:	2200      	movs	r2, #0
    55c2:	601a      	str	r2, [r3, #0]
}
    55c4:	46bd      	mov	sp, r7
    55c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    55ca:	4770      	bx	lr
    55cc:	400fc0c4 	.word	0x400fc0c4
    55d0:	50004110 	.word	0x50004110
    55d4:	50004130 	.word	0x50004130
    55d8:	50004150 	.word	0x50004150
    55dc:	50004170 	.word	0x50004170
    55e0:	50004190 	.word	0x50004190
    55e4:	500041b0 	.word	0x500041b0
    55e8:	500041d0 	.word	0x500041d0
    55ec:	500041f0 	.word	0x500041f0
    55f0:	50004008 	.word	0x50004008
    55f4:	50004010 	.word	0x50004010
    55f8:	10001050 	.word	0x10001050
    55fc:	40030008 	.word	0x40030008
    5600:	10001068 	.word	0x10001068
    5604:	10000bd4 	.word	0x10000bd4
    5608:	88009032 	.word	0x88009032
    560c:	1000101c 	.word	0x1000101c
    5610:	e000e180 	.word	0xe000e180
    5614:	50004030 	.word	0x50004030
    5618:	50004100 	.word	0x50004100
    561c:	50004104 	.word	0x50004104
    5620:	50004108 	.word	0x50004108
    5624:	5000410c 	.word	0x5000410c
    5628:	10000b10 	.word	0x10000b10
    562c:	1000109c 	.word	0x1000109c

00005630 <dma_init_le>:

static void dma_init_le()
{
    5630:	b480      	push	{r7}
    5632:	b083      	sub	sp, #12
    5634:	af00      	add	r7, sp, #0
	int i;

	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    5636:	4a3f      	ldr	r2, [pc, #252]	; (5734 <dma_init_le+0x104>)
    5638:	4b3e      	ldr	r3, [pc, #248]	; (5734 <dma_init_le+0x104>)
    563a:	681b      	ldr	r3, [r3, #0]
    563c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    5640:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    5642:	4b3d      	ldr	r3, [pc, #244]	; (5738 <dma_init_le+0x108>)
    5644:	2200      	movs	r2, #0
    5646:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5648:	4b3c      	ldr	r3, [pc, #240]	; (573c <dma_init_le+0x10c>)
    564a:	2200      	movs	r2, #0
    564c:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    564e:	4b3c      	ldr	r3, [pc, #240]	; (5740 <dma_init_le+0x110>)
    5650:	2200      	movs	r2, #0
    5652:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5654:	4b3b      	ldr	r3, [pc, #236]	; (5744 <dma_init_le+0x114>)
    5656:	2200      	movs	r2, #0
    5658:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    565a:	4b3b      	ldr	r3, [pc, #236]	; (5748 <dma_init_le+0x118>)
    565c:	2200      	movs	r2, #0
    565e:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5660:	4b3a      	ldr	r3, [pc, #232]	; (574c <dma_init_le+0x11c>)
    5662:	2200      	movs	r2, #0
    5664:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    5666:	4b3a      	ldr	r3, [pc, #232]	; (5750 <dma_init_le+0x120>)
    5668:	2200      	movs	r2, #0
    566a:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    566c:	4b39      	ldr	r3, [pc, #228]	; (5754 <dma_init_le+0x124>)
    566e:	2200      	movs	r2, #0
    5670:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5672:	4b39      	ldr	r3, [pc, #228]	; (5758 <dma_init_le+0x128>)
    5674:	22ff      	movs	r2, #255	; 0xff
    5676:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5678:	4b38      	ldr	r3, [pc, #224]	; (575c <dma_init_le+0x12c>)
    567a:	22ff      	movs	r2, #255	; 0xff
    567c:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    567e:	4b38      	ldr	r3, [pc, #224]	; (5760 <dma_init_le+0x130>)
    5680:	2201      	movs	r2, #1
    5682:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    5684:	bf00      	nop
    5686:	4b36      	ldr	r3, [pc, #216]	; (5760 <dma_init_le+0x130>)
    5688:	681b      	ldr	r3, [r3, #0]
    568a:	f003 0301 	and.w	r3, r3, #1
    568e:	2b00      	cmp	r3, #0
    5690:	d0f9      	beq.n	5686 <dma_init_le+0x56>

	for (i = 0; i < 11; ++i) {
    5692:	2300      	movs	r3, #0
    5694:	607b      	str	r3, [r7, #4]
    5696:	e02a      	b.n	56ee <dma_init_le+0xbe>
		le_dma_lli[i].src = (u32)&(DIO_SSP_DR);
    5698:	4a32      	ldr	r2, [pc, #200]	; (5764 <dma_init_le+0x134>)
    569a:	687b      	ldr	r3, [r7, #4]
    569c:	011b      	lsls	r3, r3, #4
    569e:	4413      	add	r3, r2
    56a0:	4a31      	ldr	r2, [pc, #196]	; (5768 <dma_init_le+0x138>)
    56a2:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].dest = (u32)&rxbuf1[4 * i];
    56a4:	687b      	ldr	r3, [r7, #4]
    56a6:	009b      	lsls	r3, r3, #2
    56a8:	4a30      	ldr	r2, [pc, #192]	; (576c <dma_init_le+0x13c>)
    56aa:	4413      	add	r3, r2
    56ac:	4619      	mov	r1, r3
    56ae:	4a2d      	ldr	r2, [pc, #180]	; (5764 <dma_init_le+0x134>)
    56b0:	687b      	ldr	r3, [r7, #4]
    56b2:	011b      	lsls	r3, r3, #4
    56b4:	4413      	add	r3, r2
    56b6:	6059      	str	r1, [r3, #4]
		le_dma_lli[i].next_lli = i < 10 ? (u32)&le_dma_lli[i+1] : 0;
    56b8:	687b      	ldr	r3, [r7, #4]
    56ba:	2b09      	cmp	r3, #9
    56bc:	dc06      	bgt.n	56cc <dma_init_le+0x9c>
    56be:	687b      	ldr	r3, [r7, #4]
    56c0:	3301      	adds	r3, #1
    56c2:	011b      	lsls	r3, r3, #4
    56c4:	4a27      	ldr	r2, [pc, #156]	; (5764 <dma_init_le+0x134>)
    56c6:	4413      	add	r3, r2
    56c8:	461a      	mov	r2, r3
    56ca:	e000      	b.n	56ce <dma_init_le+0x9e>
    56cc:	2200      	movs	r2, #0
    56ce:	4925      	ldr	r1, [pc, #148]	; (5764 <dma_init_le+0x134>)
    56d0:	687b      	ldr	r3, [r7, #4]
    56d2:	011b      	lsls	r3, r3, #4
    56d4:	440b      	add	r3, r1
    56d6:	3308      	adds	r3, #8
    56d8:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].control = 4 |
    56da:	4a22      	ldr	r2, [pc, #136]	; (5764 <dma_init_le+0x134>)
    56dc:	687b      	ldr	r3, [r7, #4]
    56de:	011b      	lsls	r3, r3, #4
    56e0:	4413      	add	r3, r2
    56e2:	3308      	adds	r3, #8
    56e4:	4a22      	ldr	r2, [pc, #136]	; (5770 <dma_init_le+0x140>)
    56e6:	605a      	str	r2, [r3, #4]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    56e8:	687b      	ldr	r3, [r7, #4]
    56ea:	3301      	adds	r3, #1
    56ec:	607b      	str	r3, [r7, #4]
    56ee:	687b      	ldr	r3, [r7, #4]
    56f0:	2b0a      	cmp	r3, #10
    56f2:	ddd1      	ble.n	5698 <dma_init_le+0x68>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    56f4:	4a1f      	ldr	r2, [pc, #124]	; (5774 <dma_init_le+0x144>)
    56f6:	4b1b      	ldr	r3, [pc, #108]	; (5764 <dma_init_le+0x134>)
    56f8:	681b      	ldr	r3, [r3, #0]
    56fa:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    56fc:	4a1e      	ldr	r2, [pc, #120]	; (5778 <dma_init_le+0x148>)
    56fe:	4b19      	ldr	r3, [pc, #100]	; (5764 <dma_init_le+0x134>)
    5700:	685b      	ldr	r3, [r3, #4]
    5702:	6013      	str	r3, [r2, #0]
	DMACC0LLI = le_dma_lli[0].next_lli;
    5704:	4a1d      	ldr	r2, [pc, #116]	; (577c <dma_init_le+0x14c>)
    5706:	4b17      	ldr	r3, [pc, #92]	; (5764 <dma_init_le+0x134>)
    5708:	689b      	ldr	r3, [r3, #8]
    570a:	6013      	str	r3, [r2, #0]
	DMACC0Control = le_dma_lli[0].control;
    570c:	4a1c      	ldr	r2, [pc, #112]	; (5780 <dma_init_le+0x150>)
    570e:	4b15      	ldr	r3, [pc, #84]	; (5764 <dma_init_le+0x134>)
    5710:	68db      	ldr	r3, [r3, #12]
    5712:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    5714:	4b08      	ldr	r3, [pc, #32]	; (5738 <dma_init_le+0x108>)
    5716:	f24d 0206 	movw	r2, #53254	; 0xd006
    571a:	601a      	str	r2, [r3, #0]
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	/* reset interrupt counters */
	rx_tc = 0;
    571c:	4b19      	ldr	r3, [pc, #100]	; (5784 <dma_init_le+0x154>)
    571e:	2200      	movs	r2, #0
    5720:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    5722:	4b19      	ldr	r3, [pc, #100]	; (5788 <dma_init_le+0x158>)
    5724:	2200      	movs	r2, #0
    5726:	601a      	str	r2, [r3, #0]
}
    5728:	370c      	adds	r7, #12
    572a:	46bd      	mov	sp, r7
    572c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5730:	4770      	bx	lr
    5732:	bf00      	nop
    5734:	400fc0c4 	.word	0x400fc0c4
    5738:	50004110 	.word	0x50004110
    573c:	50004130 	.word	0x50004130
    5740:	50004150 	.word	0x50004150
    5744:	50004170 	.word	0x50004170
    5748:	50004190 	.word	0x50004190
    574c:	500041b0 	.word	0x500041b0
    5750:	500041d0 	.word	0x500041d0
    5754:	500041f0 	.word	0x500041f0
    5758:	50004008 	.word	0x50004008
    575c:	50004010 	.word	0x50004010
    5760:	50004030 	.word	0x50004030
    5764:	10000b14 	.word	0x10000b14
    5768:	40030008 	.word	0x40030008
    576c:	10001068 	.word	0x10001068
    5770:	88001004 	.word	0x88001004
    5774:	50004100 	.word	0x50004100
    5778:	50004104 	.word	0x50004104
    577c:	50004108 	.word	0x50004108
    5780:	5000410c 	.word	0x5000410c
    5784:	10000b10 	.word	0x10000b10
    5788:	1000109c 	.word	0x1000109c

0000578c <bt_stream_dma_handler>:

void bt_stream_dma_handler(void)
{
    578c:	b480      	push	{r7}
    578e:	b083      	sub	sp, #12
    5790:	af00      	add	r7, sp, #0
	/* interrupt on channel 0 */
	if (DMACIntStat & (1 << 0)) {
    5792:	4b29      	ldr	r3, [pc, #164]	; (5838 <bt_stream_dma_handler+0xac>)
    5794:	681b      	ldr	r3, [r3, #0]
    5796:	f003 0301 	and.w	r3, r3, #1
    579a:	2b00      	cmp	r3, #0
    579c:	d046      	beq.n	582c <bt_stream_dma_handler+0xa0>
		if (DMACIntTCStat & (1 << 0)) {
    579e:	4b27      	ldr	r3, [pc, #156]	; (583c <bt_stream_dma_handler+0xb0>)
    57a0:	681b      	ldr	r3, [r3, #0]
    57a2:	f003 0301 	and.w	r3, r3, #1
    57a6:	2b00      	cmp	r3, #0
    57a8:	d032      	beq.n	5810 <bt_stream_dma_handler+0x84>
			DMACIntTCClear = (1 << 0);
    57aa:	4b25      	ldr	r3, [pc, #148]	; (5840 <bt_stream_dma_handler+0xb4>)
    57ac:	2201      	movs	r2, #1
    57ae:	601a      	str	r2, [r3, #0]

			if (hop_mode == HOP_BLUETOOTH)
    57b0:	4b24      	ldr	r3, [pc, #144]	; (5844 <bt_stream_dma_handler+0xb8>)
    57b2:	781b      	ldrb	r3, [r3, #0]
    57b4:	b2db      	uxtb	r3, r3
    57b6:	2b02      	cmp	r3, #2
    57b8:	d103      	bne.n	57c2 <bt_stream_dma_handler+0x36>
				DIO_SSEL_SET;
    57ba:	4b23      	ldr	r3, [pc, #140]	; (5848 <bt_stream_dma_handler+0xbc>)
    57bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    57c0:	601a      	str	r2, [r3, #0]

			idle_buf_clk100ns  = CLK100NS;
    57c2:	4b22      	ldr	r3, [pc, #136]	; (584c <bt_stream_dma_handler+0xc0>)
    57c4:	681b      	ldr	r3, [r3, #0]
    57c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
    57ca:	f640 4235 	movw	r2, #3125	; 0xc35
    57ce:	fb02 f203 	mul.w	r2, r2, r3
    57d2:	4b1f      	ldr	r3, [pc, #124]	; (5850 <bt_stream_dma_handler+0xc4>)
    57d4:	681b      	ldr	r3, [r3, #0]
    57d6:	4413      	add	r3, r2
    57d8:	4a1e      	ldr	r2, [pc, #120]	; (5854 <bt_stream_dma_handler+0xc8>)
    57da:	6013      	str	r3, [r2, #0]
			idle_buf_clkn_high = (clkn >> 20) & 0xff;
    57dc:	4b1b      	ldr	r3, [pc, #108]	; (584c <bt_stream_dma_handler+0xc0>)
    57de:	681b      	ldr	r3, [r3, #0]
    57e0:	0d1b      	lsrs	r3, r3, #20
    57e2:	b2da      	uxtb	r2, r3
    57e4:	4b1c      	ldr	r3, [pc, #112]	; (5858 <bt_stream_dma_handler+0xcc>)
    57e6:	701a      	strb	r2, [r3, #0]
			idle_buf_channel   = channel;
    57e8:	4b1c      	ldr	r3, [pc, #112]	; (585c <bt_stream_dma_handler+0xd0>)
    57ea:	881b      	ldrh	r3, [r3, #0]
    57ec:	b29a      	uxth	r2, r3
    57ee:	4b1c      	ldr	r3, [pc, #112]	; (5860 <bt_stream_dma_handler+0xd4>)
    57f0:	801a      	strh	r2, [r3, #0]

			/* Keep buffer swapping in sync with DMA. */
			volatile uint8_t* tmp = active_rxbuf;
    57f2:	4b1c      	ldr	r3, [pc, #112]	; (5864 <bt_stream_dma_handler+0xd8>)
    57f4:	681b      	ldr	r3, [r3, #0]
    57f6:	607b      	str	r3, [r7, #4]
			active_rxbuf = idle_rxbuf;
    57f8:	4b1b      	ldr	r3, [pc, #108]	; (5868 <bt_stream_dma_handler+0xdc>)
    57fa:	681b      	ldr	r3, [r3, #0]
    57fc:	4a19      	ldr	r2, [pc, #100]	; (5864 <bt_stream_dma_handler+0xd8>)
    57fe:	6013      	str	r3, [r2, #0]
			idle_rxbuf = tmp;
    5800:	4a19      	ldr	r2, [pc, #100]	; (5868 <bt_stream_dma_handler+0xdc>)
    5802:	687b      	ldr	r3, [r7, #4]
    5804:	6013      	str	r3, [r2, #0]

			++rx_tc;
    5806:	4b19      	ldr	r3, [pc, #100]	; (586c <bt_stream_dma_handler+0xe0>)
    5808:	681b      	ldr	r3, [r3, #0]
    580a:	3301      	adds	r3, #1
    580c:	4a17      	ldr	r2, [pc, #92]	; (586c <bt_stream_dma_handler+0xe0>)
    580e:	6013      	str	r3, [r2, #0]
		}
		if (DMACIntErrStat & (1 << 0)) {
    5810:	4b17      	ldr	r3, [pc, #92]	; (5870 <bt_stream_dma_handler+0xe4>)
    5812:	681b      	ldr	r3, [r3, #0]
    5814:	f003 0301 	and.w	r3, r3, #1
    5818:	2b00      	cmp	r3, #0
    581a:	d007      	beq.n	582c <bt_stream_dma_handler+0xa0>
			DMACIntErrClr = (1 << 0);
    581c:	4b15      	ldr	r3, [pc, #84]	; (5874 <bt_stream_dma_handler+0xe8>)
    581e:	2201      	movs	r2, #1
    5820:	601a      	str	r2, [r3, #0]
			++rx_err;
    5822:	4b15      	ldr	r3, [pc, #84]	; (5878 <bt_stream_dma_handler+0xec>)
    5824:	681b      	ldr	r3, [r3, #0]
    5826:	3301      	adds	r3, #1
    5828:	4a13      	ldr	r2, [pc, #76]	; (5878 <bt_stream_dma_handler+0xec>)
    582a:	6013      	str	r3, [r2, #0]
		}
	}
}
    582c:	370c      	adds	r7, #12
    582e:	46bd      	mov	sp, r7
    5830:	f85d 7b04 	ldr.w	r7, [sp], #4
    5834:	4770      	bx	lr
    5836:	bf00      	nop
    5838:	50004000 	.word	0x50004000
    583c:	50004004 	.word	0x50004004
    5840:	50004008 	.word	0x50004008
    5844:	10000992 	.word	0x10000992
    5848:	2009c098 	.word	0x2009c098
    584c:	10000984 	.word	0x10000984
    5850:	40004008 	.word	0x40004008
    5854:	10000bd0 	.word	0x10000bd0
    5858:	10001019 	.word	0x10001019
    585c:	1000049c 	.word	0x1000049c
    5860:	10000998 	.word	0x10000998
    5864:	10000450 	.word	0x10000450
    5868:	10000454 	.word	0x10000454
    586c:	10000b10 	.word	0x10000b10
    5870:	5000400c 	.word	0x5000400c
    5874:	50004010 	.word	0x50004010
    5878:	1000109c 	.word	0x1000109c

0000587c <DMA_IRQHandler>:

void DMA_IRQHandler()
{
    587c:	b580      	push	{r7, lr}
    587e:	af00      	add	r7, sp, #0
	switch (mode) {
    5880:	4b12      	ldr	r3, [pc, #72]	; (58cc <DMA_IRQHandler+0x50>)
    5882:	781b      	ldrb	r3, [r3, #0]
    5884:	b2db      	uxtb	r3, r3
    5886:	3b01      	subs	r3, #1
    5888:	2b0b      	cmp	r3, #11
    588a:	d81e      	bhi.n	58ca <DMA_IRQHandler+0x4e>
    588c:	a201      	add	r2, pc, #4	; (adr r2, 5894 <DMA_IRQHandler+0x18>)
    588e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5892:	bf00      	nop
    5894:	000058c5 	.word	0x000058c5
    5898:	000058cb 	.word	0x000058cb
    589c:	000058cb 	.word	0x000058cb
    58a0:	000058c5 	.word	0x000058c5
    58a4:	000058cb 	.word	0x000058cb
    58a8:	000058cb 	.word	0x000058cb
    58ac:	000058cb 	.word	0x000058cb
    58b0:	000058c5 	.word	0x000058c5
    58b4:	000058c5 	.word	0x000058c5
    58b8:	000058c5 	.word	0x000058c5
    58bc:	000058cb 	.word	0x000058cb
    58c0:	000058c5 	.word	0x000058c5
		case MODE_SPECAN:
		case MODE_BT_FOLLOW:
		case MODE_BT_FOLLOW_LE:
		case MODE_BT_PROMISC_LE:
		case MODE_BT_SLAVE_LE:
			bt_stream_dma_handler();
    58c4:	f7ff ff62 	bl	578c <bt_stream_dma_handler>
			break;
    58c8:	bf00      	nop
	}
}
    58ca:	bd80      	pop	{r7, pc}
    58cc:	10000a4e 	.word	0x10000a4e

000058d0 <dio_ssp_start>:

static void dio_ssp_start()
{
    58d0:	b480      	push	{r7}
    58d2:	af00      	add	r7, sp, #0
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    58d4:	4b10      	ldr	r3, [pc, #64]	; (5918 <dio_ssp_start+0x48>)
    58d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    58da:	601a      	str	r2, [r3, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    58dc:	4a0f      	ldr	r2, [pc, #60]	; (591c <dio_ssp_start+0x4c>)
    58de:	4b0f      	ldr	r3, [pc, #60]	; (591c <dio_ssp_start+0x4c>)
    58e0:	681b      	ldr	r3, [r3, #0]
    58e2:	f043 0301 	orr.w	r3, r3, #1
    58e6:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    58e8:	4a0d      	ldr	r2, [pc, #52]	; (5920 <dio_ssp_start+0x50>)
    58ea:	4b0d      	ldr	r3, [pc, #52]	; (5920 <dio_ssp_start+0x50>)
    58ec:	681b      	ldr	r3, [r3, #0]
    58ee:	f043 0302 	orr.w	r3, r3, #2
    58f2:	6013      	str	r3, [r2, #0]

	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
    58f4:	4a0b      	ldr	r2, [pc, #44]	; (5924 <dio_ssp_start+0x54>)
    58f6:	4b0b      	ldr	r3, [pc, #44]	; (5924 <dio_ssp_start+0x54>)
    58f8:	681b      	ldr	r3, [r3, #0]
    58fa:	f043 0301 	orr.w	r3, r3, #1
    58fe:	6013      	str	r3, [r2, #0]
	ISER0 = ISER0_ISE_DMA;
    5900:	4b09      	ldr	r3, [pc, #36]	; (5928 <dio_ssp_start+0x58>)
    5902:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5906:	601a      	str	r2, [r3, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
    5908:	4b08      	ldr	r3, [pc, #32]	; (592c <dio_ssp_start+0x5c>)
    590a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    590e:	601a      	str	r2, [r3, #0]
}
    5910:	46bd      	mov	sp, r7
    5912:	f85d 7b04 	ldr.w	r7, [sp], #4
    5916:	4770      	bx	lr
    5918:	2009c098 	.word	0x2009c098
    591c:	40030024 	.word	0x40030024
    5920:	40030004 	.word	0x40030004
    5924:	50004110 	.word	0x50004110
    5928:	e000e100 	.word	0xe000e100
    592c:	2009c09c 	.word	0x2009c09c

00005930 <dio_ssp_stop>:

static void dio_ssp_stop()
{
    5930:	b480      	push	{r7}
    5932:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    5934:	4b21      	ldr	r3, [pc, #132]	; (59bc <dio_ssp_stop+0x8c>)
    5936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    593a:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    593c:	4a20      	ldr	r2, [pc, #128]	; (59c0 <dio_ssp_stop+0x90>)
    593e:	4b20      	ldr	r3, [pc, #128]	; (59c0 <dio_ssp_stop+0x90>)
    5940:	681b      	ldr	r3, [r3, #0]
    5942:	f023 0301 	bic.w	r3, r3, #1
    5946:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    5948:	4a1e      	ldr	r2, [pc, #120]	; (59c4 <dio_ssp_stop+0x94>)
    594a:	4b1e      	ldr	r3, [pc, #120]	; (59c4 <dio_ssp_stop+0x94>)
    594c:	681b      	ldr	r3, [r3, #0]
    594e:	f023 0302 	bic.w	r3, r3, #2
    5952:	6013      	str	r3, [r2, #0]

	// disable DMA engine:
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 607

	// disable DMA interrupts
	ICER0 = ICER0_ICE_DMA;
    5954:	4b1c      	ldr	r3, [pc, #112]	; (59c8 <dio_ssp_stop+0x98>)
    5956:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    595a:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    595c:	4b1b      	ldr	r3, [pc, #108]	; (59cc <dio_ssp_stop+0x9c>)
    595e:	2200      	movs	r2, #0
    5960:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5962:	4b1b      	ldr	r3, [pc, #108]	; (59d0 <dio_ssp_stop+0xa0>)
    5964:	2200      	movs	r2, #0
    5966:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    5968:	4b1a      	ldr	r3, [pc, #104]	; (59d4 <dio_ssp_stop+0xa4>)
    596a:	2200      	movs	r2, #0
    596c:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    596e:	4b1a      	ldr	r3, [pc, #104]	; (59d8 <dio_ssp_stop+0xa8>)
    5970:	2200      	movs	r2, #0
    5972:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    5974:	4b19      	ldr	r3, [pc, #100]	; (59dc <dio_ssp_stop+0xac>)
    5976:	2200      	movs	r2, #0
    5978:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    597a:	4b19      	ldr	r3, [pc, #100]	; (59e0 <dio_ssp_stop+0xb0>)
    597c:	2200      	movs	r2, #0
    597e:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    5980:	4b18      	ldr	r3, [pc, #96]	; (59e4 <dio_ssp_stop+0xb4>)
    5982:	2200      	movs	r2, #0
    5984:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    5986:	4b18      	ldr	r3, [pc, #96]	; (59e8 <dio_ssp_stop+0xb8>)
    5988:	2200      	movs	r2, #0
    598a:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    598c:	4b17      	ldr	r3, [pc, #92]	; (59ec <dio_ssp_stop+0xbc>)
    598e:	22ff      	movs	r2, #255	; 0xff
    5990:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5992:	4b17      	ldr	r3, [pc, #92]	; (59f0 <dio_ssp_stop+0xc0>)
    5994:	22ff      	movs	r2, #255	; 0xff
    5996:	601a      	str	r2, [r3, #0]

	// Disable the DMA controller by writing 0 to the DMA Enable bit in the DMACConfig
	// register.
	DMACConfig &= ~DMACConfig_E;
    5998:	4a16      	ldr	r2, [pc, #88]	; (59f4 <dio_ssp_stop+0xc4>)
    599a:	4b16      	ldr	r3, [pc, #88]	; (59f4 <dio_ssp_stop+0xc4>)
    599c:	681b      	ldr	r3, [r3, #0]
    599e:	f023 0301 	bic.w	r3, r3, #1
    59a2:	6013      	str	r3, [r2, #0]
	while (DMACConfig & DMACConfig_E);
    59a4:	bf00      	nop
    59a6:	4b13      	ldr	r3, [pc, #76]	; (59f4 <dio_ssp_stop+0xc4>)
    59a8:	681b      	ldr	r3, [r3, #0]
    59aa:	f003 0301 	and.w	r3, r3, #1
    59ae:	2b00      	cmp	r3, #0
    59b0:	d1f9      	bne.n	59a6 <dio_ssp_stop+0x76>
}
    59b2:	46bd      	mov	sp, r7
    59b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    59b8:	4770      	bx	lr
    59ba:	bf00      	nop
    59bc:	2009c098 	.word	0x2009c098
    59c0:	40030024 	.word	0x40030024
    59c4:	40030004 	.word	0x40030004
    59c8:	e000e180 	.word	0xe000e180
    59cc:	50004110 	.word	0x50004110
    59d0:	50004130 	.word	0x50004130
    59d4:	50004150 	.word	0x50004150
    59d8:	50004170 	.word	0x50004170
    59dc:	50004190 	.word	0x50004190
    59e0:	500041b0 	.word	0x500041b0
    59e4:	500041d0 	.word	0x500041d0
    59e8:	500041f0 	.word	0x500041f0
    59ec:	50004008 	.word	0x50004008
    59f0:	50004010 	.word	0x50004010
    59f4:	50004030 	.word	0x50004030

000059f8 <cc2400_idle>:

static void cc2400_idle()
{
    59f8:	b580      	push	{r7, lr}
    59fa:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    59fc:	2064      	movs	r0, #100	; 0x64
    59fe:	f003 fed7 	bl	97b0 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5a02:	bf00      	nop
    5a04:	f003 feca 	bl	979c <cc2400_status>
    5a08:	4603      	mov	r3, r0
    5a0a:	f003 0304 	and.w	r3, r3, #4
    5a0e:	2b00      	cmp	r3, #0
    5a10:	d1f8      	bne.n	5a04 <cc2400_idle+0xc>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5a12:	4b0a      	ldr	r3, [pc, #40]	; (5a3c <cc2400_idle+0x44>)
    5a14:	2280      	movs	r2, #128	; 0x80
    5a16:	601a      	str	r2, [r3, #0]
	HGM_CLR;
    5a18:	4b08      	ldr	r3, [pc, #32]	; (5a3c <cc2400_idle+0x44>)
    5a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
    5a1e:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    5a20:	4b07      	ldr	r3, [pc, #28]	; (5a40 <cc2400_idle+0x48>)
    5a22:	2210      	movs	r2, #16
    5a24:	601a      	str	r2, [r3, #0]
	TXLED_CLR;
    5a26:	4b06      	ldr	r3, [pc, #24]	; (5a40 <cc2400_idle+0x48>)
    5a28:	f44f 7280 	mov.w	r2, #256	; 0x100
    5a2c:	601a      	str	r2, [r3, #0]
	USRLED_CLR;
    5a2e:	4b04      	ldr	r3, [pc, #16]	; (5a40 <cc2400_idle+0x48>)
    5a30:	2202      	movs	r2, #2
    5a32:	601a      	str	r2, [r3, #0]
	mode = MODE_IDLE;
    5a34:	4b03      	ldr	r3, [pc, #12]	; (5a44 <cc2400_idle+0x4c>)
    5a36:	2200      	movs	r2, #0
    5a38:	701a      	strb	r2, [r3, #0]
}
    5a3a:	bd80      	pop	{r7, pc}
    5a3c:	2009c05c 	.word	0x2009c05c
    5a40:	2009c03c 	.word	0x2009c03c
    5a44:	10000a4e 	.word	0x10000a4e

00005a48 <cc2400_rx>:

/* start un-buffered rx */
static void cc2400_rx()
{
    5a48:	b580      	push	{r7, lr}
    5a4a:	b082      	sub	sp, #8
    5a4c:	af00      	add	r7, sp, #0
	u16 mdmctrl;
	if (modulation == MOD_BT_BASIC_RATE) {
    5a4e:	4b28      	ldr	r3, [pc, #160]	; (5af0 <cc2400_rx+0xa8>)
    5a50:	781b      	ldrb	r3, [r3, #0]
    5a52:	b2db      	uxtb	r3, r3
    5a54:	2b00      	cmp	r3, #0
    5a56:	d102      	bne.n	5a5e <cc2400_rx+0x16>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5a58:	2329      	movs	r3, #41	; 0x29
    5a5a:	80fb      	strh	r3, [r7, #6]
    5a5c:	e008      	b.n	5a70 <cc2400_rx+0x28>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5a5e:	4b24      	ldr	r3, [pc, #144]	; (5af0 <cc2400_rx+0xa8>)
    5a60:	781b      	ldrb	r3, [r3, #0]
    5a62:	b2db      	uxtb	r3, r3
    5a64:	2b01      	cmp	r3, #1
    5a66:	d102      	bne.n	5a6e <cc2400_rx+0x26>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5a68:	2340      	movs	r3, #64	; 0x40
    5a6a:	80fb      	strh	r3, [r7, #6]
    5a6c:	e000      	b.n	5a70 <cc2400_rx+0x28>
	} else {
		/* oops */
		return;
    5a6e:	e03c      	b.n	5aea <cc2400_rx+0xa2>
	}

	cc2400_set(MANAND,  0x7fff);
    5a70:	200d      	movs	r0, #13
    5a72:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5a76:	f003 fdd9 	bl	962c <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5a7a:	2012      	movs	r0, #18
    5a7c:	f642 3122 	movw	r1, #11042	; 0x2b22
    5a80:	f003 fdd4 	bl	962c <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    5a84:	2014      	movs	r0, #20
    5a86:	f241 314b 	movw	r1, #4939	; 0x134b
    5a8a:	f003 fdcf 	bl	962c <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    5a8e:	2020      	movs	r0, #32
    5a90:	f240 1101 	movw	r1, #257	; 0x101
    5a94:	f003 fdca 	bl	962c <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 2 preamble bytes of 01010101
	//      |  +-----------------> not packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   2427 - 1); // 1 MHz IF
    5a98:	2002      	movs	r0, #2
    5a9a:	f640 117a 	movw	r1, #2426	; 0x97a
    5a9e:	f003 fdc5 	bl	962c <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5aa2:	88fb      	ldrh	r3, [r7, #6]
    5aa4:	2003      	movs	r0, #3
    5aa6:	4619      	mov	r1, r3
    5aa8:	f003 fdc0 	bl	962c <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5aac:	f7fe fdec 	bl	4688 <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5ab0:	bf00      	nop
    5ab2:	f003 fe73 	bl	979c <cc2400_status>
    5ab6:	4603      	mov	r3, r0
    5ab8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5abc:	2b00      	cmp	r3, #0
    5abe:	d0f8      	beq.n	5ab2 <cc2400_rx+0x6a>
	cc2400_strobe(SFSON);
    5ac0:	2061      	movs	r0, #97	; 0x61
    5ac2:	f003 fe75 	bl	97b0 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5ac6:	bf00      	nop
    5ac8:	f003 fe68 	bl	979c <cc2400_status>
    5acc:	4603      	mov	r3, r0
    5ace:	f003 0304 	and.w	r3, r3, #4
    5ad2:	2b00      	cmp	r3, #0
    5ad4:	d0f8      	beq.n	5ac8 <cc2400_rx+0x80>
	cc2400_strobe(SRX);
    5ad6:	2062      	movs	r0, #98	; 0x62
    5ad8:	f003 fe6a 	bl	97b0 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5adc:	4b05      	ldr	r3, [pc, #20]	; (5af4 <cc2400_rx+0xac>)
    5ade:	2280      	movs	r2, #128	; 0x80
    5ae0:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5ae2:	4b04      	ldr	r3, [pc, #16]	; (5af4 <cc2400_rx+0xac>)
    5ae4:	f44f 7280 	mov.w	r2, #256	; 0x100
    5ae8:	601a      	str	r2, [r3, #0]
#endif
}
    5aea:	3708      	adds	r7, #8
    5aec:	46bd      	mov	sp, r7
    5aee:	bd80      	pop	{r7, pc}
    5af0:	10000a52 	.word	0x10000a52
    5af4:	2009c058 	.word	0x2009c058

00005af8 <cc2400_rx_sync>:

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    5af8:	b580      	push	{r7, lr}
    5afa:	b084      	sub	sp, #16
    5afc:	af00      	add	r7, sp, #0
    5afe:	6078      	str	r0, [r7, #4]
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    5b00:	4b33      	ldr	r3, [pc, #204]	; (5bd0 <cc2400_rx_sync+0xd8>)
    5b02:	781b      	ldrb	r3, [r3, #0]
    5b04:	b2db      	uxtb	r3, r3
    5b06:	2b00      	cmp	r3, #0
    5b08:	d105      	bne.n	5b16 <cc2400_rx_sync+0x1e>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5b0a:	2329      	movs	r3, #41	; 0x29
    5b0c:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    5b0e:	f240 4361 	movw	r3, #1121	; 0x461
    5b12:	81fb      	strh	r3, [r7, #14]
    5b14:	e00b      	b.n	5b2e <cc2400_rx_sync+0x36>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5b16:	4b2e      	ldr	r3, [pc, #184]	; (5bd0 <cc2400_rx_sync+0xd8>)
    5b18:	781b      	ldrb	r3, [r3, #0]
    5b1a:	b2db      	uxtb	r3, r3
    5b1c:	2b01      	cmp	r3, #1
    5b1e:	d105      	bne.n	5b2c <cc2400_rx_sync+0x34>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5b20:	2340      	movs	r3, #64	; 0x40
    5b22:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    5b24:	f240 5361 	movw	r3, #1377	; 0x561
    5b28:	81fb      	strh	r3, [r7, #14]
    5b2a:	e000      	b.n	5b2e <cc2400_rx_sync+0x36>
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else {
		/* oops */
		return;
    5b2c:	e04d      	b.n	5bca <cc2400_rx_sync+0xd2>
	}

	cc2400_set(MANAND,  0x7fff);
    5b2e:	200d      	movs	r0, #13
    5b30:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5b34:	f003 fd7a 	bl	962c <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5b38:	2012      	movs	r0, #18
    5b3a:	f642 3122 	movw	r1, #11042	; 0x2b22
    5b3e:	f003 fd75 	bl	962c <cc2400_set>

	cc2400_set(MDMTST0, 0x124b);
    5b42:	2014      	movs	r0, #20
    5b44:	f241 214b 	movw	r1, #4683	; 0x124b
    5b48:	f003 fd70 	bl	962c <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    5b4c:	89fb      	ldrh	r3, [r7, #14]
    5b4e:	2020      	movs	r0, #32
    5b50:	4619      	mov	r1, r3
    5b52:	f003 fd6b 	bl	962c <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    5b56:	687b      	ldr	r3, [r7, #4]
    5b58:	b29b      	uxth	r3, r3
    5b5a:	202c      	movs	r0, #44	; 0x2c
    5b5c:	4619      	mov	r1, r3
    5b5e:	f003 fd65 	bl	962c <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    5b62:	687b      	ldr	r3, [r7, #4]
    5b64:	0c1b      	lsrs	r3, r3, #16
    5b66:	b29b      	uxth	r3, r3
    5b68:	202d      	movs	r0, #45	; 0x2d
    5b6a:	4619      	mov	r1, r3
    5b6c:	f003 fd5e 	bl	962c <cc2400_set>

	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5b70:	4b18      	ldr	r3, [pc, #96]	; (5bd4 <cc2400_rx_sync+0xdc>)
    5b72:	881b      	ldrh	r3, [r3, #0]
    5b74:	b29b      	uxth	r3, r3
    5b76:	3b01      	subs	r3, #1
    5b78:	b29b      	uxth	r3, r3
    5b7a:	2002      	movs	r0, #2
    5b7c:	4619      	mov	r1, r3
    5b7e:	f003 fd55 	bl	962c <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5b82:	89bb      	ldrh	r3, [r7, #12]
    5b84:	2003      	movs	r0, #3
    5b86:	4619      	mov	r1, r3
    5b88:	f003 fd50 	bl	962c <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5b8c:	f7fe fd7c 	bl	4688 <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5b90:	bf00      	nop
    5b92:	f003 fe03 	bl	979c <cc2400_status>
    5b96:	4603      	mov	r3, r0
    5b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5b9c:	2b00      	cmp	r3, #0
    5b9e:	d0f8      	beq.n	5b92 <cc2400_rx_sync+0x9a>
	cc2400_strobe(SFSON);
    5ba0:	2061      	movs	r0, #97	; 0x61
    5ba2:	f003 fe05 	bl	97b0 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5ba6:	bf00      	nop
    5ba8:	f003 fdf8 	bl	979c <cc2400_status>
    5bac:	4603      	mov	r3, r0
    5bae:	f003 0304 	and.w	r3, r3, #4
    5bb2:	2b00      	cmp	r3, #0
    5bb4:	d0f8      	beq.n	5ba8 <cc2400_rx_sync+0xb0>
	cc2400_strobe(SRX);
    5bb6:	2062      	movs	r0, #98	; 0x62
    5bb8:	f003 fdfa 	bl	97b0 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5bbc:	4b06      	ldr	r3, [pc, #24]	; (5bd8 <cc2400_rx_sync+0xe0>)
    5bbe:	2280      	movs	r2, #128	; 0x80
    5bc0:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5bc2:	4b05      	ldr	r3, [pc, #20]	; (5bd8 <cc2400_rx_sync+0xe0>)
    5bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
    5bc8:	601a      	str	r2, [r3, #0]
#endif
}
    5bca:	3710      	adds	r7, #16
    5bcc:	46bd      	mov	sp, r7
    5bce:	bd80      	pop	{r7, pc}
    5bd0:	10000a52 	.word	0x10000a52
    5bd4:	1000049c 	.word	0x1000049c
    5bd8:	2009c058 	.word	0x2009c058

00005bdc <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data)
{
    5bdc:	b580      	push	{r7, lr}
    5bde:	b09a      	sub	sp, #104	; 0x68
    5be0:	af00      	add	r7, sp, #0
    5be2:	60f8      	str	r0, [r7, #12]
    5be4:	460b      	mov	r3, r1
    5be6:	607a      	str	r2, [r7, #4]
    5be8:	72fb      	strb	r3, [r7, #11]
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5bea:	2300      	movs	r3, #0
    5bec:	667b      	str	r3, [r7, #100]	; 0x64
    5bee:	e035      	b.n	5c5c <le_transmit+0x80>
		byte = aa & 0xff;
    5bf0:	68fb      	ldr	r3, [r7, #12]
    5bf2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		aa >>= 8;
    5bf6:	68fb      	ldr	r3, [r7, #12]
    5bf8:	0a1b      	lsrs	r3, r3, #8
    5bfa:	60fb      	str	r3, [r7, #12]
		txbuf[i] = 0;
    5bfc:	f107 0210 	add.w	r2, r7, #16
    5c00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5c02:	4413      	add	r3, r2
    5c04:	2200      	movs	r2, #0
    5c06:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; ++j) {
    5c08:	2300      	movs	r3, #0
    5c0a:	663b      	str	r3, [r7, #96]	; 0x60
    5c0c:	e020      	b.n	5c50 <le_transmit+0x74>
			txbuf[i] |= (byte & 1) << (7 - j);
    5c0e:	f107 0210 	add.w	r2, r7, #16
    5c12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5c14:	4413      	add	r3, r2
    5c16:	781b      	ldrb	r3, [r3, #0]
    5c18:	b2d9      	uxtb	r1, r3
    5c1a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5c1e:	f003 0301 	and.w	r3, r3, #1
    5c22:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5c24:	f1c2 0207 	rsb	r2, r2, #7
    5c28:	4093      	lsls	r3, r2
    5c2a:	b2db      	uxtb	r3, r3
    5c2c:	460a      	mov	r2, r1
    5c2e:	4313      	orrs	r3, r2
    5c30:	b2db      	uxtb	r3, r3
    5c32:	b2d9      	uxtb	r1, r3
    5c34:	f107 0210 	add.w	r2, r7, #16
    5c38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5c3a:	4413      	add	r3, r2
    5c3c:	460a      	mov	r2, r1
    5c3e:	701a      	strb	r2, [r3, #0]
			byte >>= 1;
    5c40:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5c44:	085b      	lsrs	r3, r3, #1
    5c46:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    5c4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5c4c:	3301      	adds	r3, #1
    5c4e:	663b      	str	r3, [r7, #96]	; 0x60
    5c50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5c52:	2b07      	cmp	r3, #7
    5c54:	d9db      	bls.n	5c0e <le_transmit+0x32>
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5c56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5c58:	3301      	adds	r3, #1
    5c5a:	667b      	str	r3, [r7, #100]	; 0x64
    5c5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5c5e:	2b03      	cmp	r3, #3
    5c60:	d9c6      	bls.n	5bf0 <le_transmit+0x14>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
    5c62:	4b93      	ldr	r3, [pc, #588]	; (5eb0 <le_transmit+0x2d4>)
    5c64:	881b      	ldrh	r3, [r3, #0]
    5c66:	b29b      	uxth	r3, r3
    5c68:	b2db      	uxtb	r3, r3
    5c6a:	3b62      	subs	r3, #98	; 0x62
    5c6c:	b2db      	uxtb	r3, r3
    5c6e:	4618      	mov	r0, r3
    5c70:	f002 f9d4 	bl	801c <btle_channel_index>
    5c74:	4603      	mov	r3, r0
    5c76:	461a      	mov	r2, r3
    5c78:	4b8e      	ldr	r3, [pc, #568]	; (5eb4 <le_transmit+0x2d8>)
    5c7a:	5c9b      	ldrb	r3, [r3, r2]
    5c7c:	65bb      	str	r3, [r7, #88]	; 0x58
	for (i = 0; i < len; ++i) {
    5c7e:	2300      	movs	r3, #0
    5c80:	667b      	str	r3, [r7, #100]	; 0x64
    5c82:	e050      	b.n	5d26 <le_transmit+0x14a>
		byte = data[i];
    5c84:	687a      	ldr	r2, [r7, #4]
    5c86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5c88:	4413      	add	r3, r2
    5c8a:	781b      	ldrb	r3, [r3, #0]
    5c8c:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		txbuf[i+4] = 0;
    5c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5c92:	3304      	adds	r3, #4
    5c94:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5c98:	4413      	add	r3, r2
    5c9a:	2200      	movs	r2, #0
    5c9c:	f803 2c58 	strb.w	r2, [r3, #-88]
		for (j = 0; j < 8; ++j) {
    5ca0:	2300      	movs	r3, #0
    5ca2:	663b      	str	r3, [r7, #96]	; 0x60
    5ca4:	e039      	b.n	5d1a <le_transmit+0x13e>
			bit = (byte & 1) ^ whitening[idx];
    5ca6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5caa:	f003 0301 	and.w	r3, r3, #1
    5cae:	4982      	ldr	r1, [pc, #520]	; (5eb8 <le_transmit+0x2dc>)
    5cb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
    5cb2:	440a      	add	r2, r1
    5cb4:	7812      	ldrb	r2, [r2, #0]
    5cb6:	4053      	eors	r3, r2
    5cb8:	657b      	str	r3, [r7, #84]	; 0x54
			idx = (idx + 1) % sizeof(whitening);
    5cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5cbc:	3301      	adds	r3, #1
    5cbe:	4619      	mov	r1, r3
    5cc0:	4b7e      	ldr	r3, [pc, #504]	; (5ebc <le_transmit+0x2e0>)
    5cc2:	fba1 2303 	umull	r2, r3, r1, r3
    5cc6:	1ac8      	subs	r0, r1, r3
    5cc8:	0840      	lsrs	r0, r0, #1
    5cca:	4403      	add	r3, r0
    5ccc:	099a      	lsrs	r2, r3, #6
    5cce:	4613      	mov	r3, r2
    5cd0:	01db      	lsls	r3, r3, #7
    5cd2:	1a9b      	subs	r3, r3, r2
    5cd4:	1aca      	subs	r2, r1, r3
    5cd6:	65ba      	str	r2, [r7, #88]	; 0x58
			byte >>= 1;
    5cd8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5cdc:	085b      	lsrs	r3, r3, #1
    5cde:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			txbuf[i+4] |= bit << (7 - j);
    5ce2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5ce4:	3304      	adds	r3, #4
    5ce6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    5ce8:	3204      	adds	r2, #4
    5cea:	f107 0168 	add.w	r1, r7, #104	; 0x68
    5cee:	440a      	add	r2, r1
    5cf0:	f812 2c58 	ldrb.w	r2, [r2, #-88]
    5cf4:	b2d1      	uxtb	r1, r2
    5cf6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5cf8:	f1c2 0207 	rsb	r2, r2, #7
    5cfc:	4610      	mov	r0, r2
    5cfe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5d00:	4082      	lsls	r2, r0
    5d02:	b2d2      	uxtb	r2, r2
    5d04:	430a      	orrs	r2, r1
    5d06:	b2d2      	uxtb	r2, r2
    5d08:	b2d2      	uxtb	r2, r2
    5d0a:	f107 0168 	add.w	r1, r7, #104	; 0x68
    5d0e:	440b      	add	r3, r1
    5d10:	f803 2c58 	strb.w	r2, [r3, #-88]
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    5d14:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5d16:	3301      	adds	r3, #1
    5d18:	663b      	str	r3, [r7, #96]	; 0x60
    5d1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5d1c:	2b07      	cmp	r3, #7
    5d1e:	d9c2      	bls.n	5ca6 <le_transmit+0xca>
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
    5d20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d22:	3301      	adds	r3, #1
    5d24:	667b      	str	r3, [r7, #100]	; 0x64
    5d26:	7afa      	ldrb	r2, [r7, #11]
    5d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d2a:	429a      	cmp	r2, r3
    5d2c:	d8aa      	bhi.n	5c84 <le_transmit+0xa8>
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    5d2e:	7afb      	ldrb	r3, [r7, #11]
    5d30:	3304      	adds	r3, #4
    5d32:	72fb      	strb	r3, [r7, #11]

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    5d34:	200d      	movs	r0, #13
    5d36:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5d3a:	f003 fc77 	bl	962c <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5d3e:	2012      	movs	r0, #18
    5d40:	f642 3122 	movw	r1, #11042	; 0x2b22
    5d44:	f003 fc72 	bl	962c <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5d48:	2014      	movs	r0, #20
    5d4a:	f241 314b 	movw	r1, #4939	; 0x134b
    5d4e:	f003 fc6d 	bl	962c <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5d52:	2020      	movs	r0, #32
    5d54:	f640 4101 	movw	r1, #3073	; 0xc01
    5d58:	f003 fc68 	bl	962c <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   channel);
    5d5c:	4b54      	ldr	r3, [pc, #336]	; (5eb0 <le_transmit+0x2d4>)
    5d5e:	881b      	ldrh	r3, [r3, #0]
    5d60:	b29b      	uxth	r3, r3
    5d62:	2002      	movs	r0, #2
    5d64:	4619      	mov	r1, r3
    5d66:	f003 fc61 	bl	962c <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5d6a:	2005      	movs	r0, #5
    5d6c:	210b      	movs	r1, #11
    5d6e:	f003 fc5d 	bl	962c <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5d72:	2003      	movs	r0, #3
    5d74:	2140      	movs	r1, #64	; 0x40
    5d76:	f003 fc59 	bl	962c <cc2400_set>
	cc2400_set(INT,     0x0014);	// FIFO_THRESHOLD: 20 bytes
    5d7a:	2023      	movs	r0, #35	; 0x23
    5d7c:	2114      	movs	r1, #20
    5d7e:	f003 fc55 	bl	962c <cc2400_set>

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    5d82:	68fb      	ldr	r3, [r7, #12]
    5d84:	f003 0301 	and.w	r3, r3, #1
    5d88:	2b00      	cmp	r3, #0
    5d8a:	d005      	beq.n	5d98 <le_transmit+0x1bc>
		cc2400_set(SYNCH,   0xaaaa);
    5d8c:	202d      	movs	r0, #45	; 0x2d
    5d8e:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
    5d92:	f003 fc4b 	bl	962c <cc2400_set>
    5d96:	e004      	b.n	5da2 <le_transmit+0x1c6>
	else
		cc2400_set(SYNCH,   0x5555);
    5d98:	202d      	movs	r0, #45	; 0x2d
    5d9a:	f245 5155 	movw	r1, #21845	; 0x5555
    5d9e:	f003 fc45 	bl	962c <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5da2:	2008      	movs	r0, #8
    5da4:	f003 fc2c 	bl	9600 <cc2400_get>
    5da8:	4603      	mov	r3, r0
    5daa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5dae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    5db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5db6:	b29b      	uxth	r3, r3
    5db8:	f443 439c 	orr.w	r3, r3, #19968	; 0x4e00
    5dbc:	b29b      	uxth	r3, r3
    5dbe:	b29b      	uxth	r3, r3
    5dc0:	2008      	movs	r0, #8
    5dc2:	4619      	mov	r1, r3
    5dc4:	f003 fc32 	bl	962c <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5dc8:	bf00      	nop
    5dca:	f003 fce7 	bl	979c <cc2400_status>
    5dce:	4603      	mov	r3, r0
    5dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5dd4:	2b00      	cmp	r3, #0
    5dd6:	d0f8      	beq.n	5dca <le_transmit+0x1ee>
	cc2400_strobe(SFSON);
    5dd8:	2061      	movs	r0, #97	; 0x61
    5dda:	f003 fce9 	bl	97b0 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5dde:	bf00      	nop
    5de0:	f003 fcdc 	bl	979c <cc2400_status>
    5de4:	4603      	mov	r3, r0
    5de6:	f003 0304 	and.w	r3, r3, #4
    5dea:	2b00      	cmp	r3, #0
    5dec:	d0f8      	beq.n	5de0 <le_transmit+0x204>
	TXLED_SET;
    5dee:	4b34      	ldr	r3, [pc, #208]	; (5ec0 <le_transmit+0x2e4>)
    5df0:	f44f 7280 	mov.w	r2, #256	; 0x100
    5df4:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5df6:	4b33      	ldr	r3, [pc, #204]	; (5ec4 <le_transmit+0x2e8>)
    5df8:	2280      	movs	r2, #128	; 0x80
    5dfa:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5dfc:	bf00      	nop
    5dfe:	200e      	movs	r0, #14
    5e00:	f003 fbfe 	bl	9600 <cc2400_get>
    5e04:	4603      	mov	r3, r0
    5e06:	f003 031f 	and.w	r3, r3, #31
    5e0a:	2b0f      	cmp	r3, #15
    5e0c:	d1f7      	bne.n	5dfe <le_transmit+0x222>
	cc2400_strobe(STX);
    5e0e:	2063      	movs	r0, #99	; 0x63
    5e10:	f003 fcce 	bl	97b0 <cc2400_strobe>

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    5e14:	2300      	movs	r3, #0
    5e16:	667b      	str	r3, [r7, #100]	; 0x64
    5e18:	e021      	b.n	5e5e <le_transmit+0x282>
		while (GIO6) ; // wait for the FIFO to drain (FIFO_FULL false)
    5e1a:	bf00      	nop
    5e1c:	4b2a      	ldr	r3, [pc, #168]	; (5ec8 <le_transmit+0x2ec>)
    5e1e:	681b      	ldr	r3, [r3, #0]
    5e20:	f003 0304 	and.w	r3, r3, #4
    5e24:	2b00      	cmp	r3, #0
    5e26:	d1f9      	bne.n	5e1c <le_transmit+0x240>
		tx_len = len - i;
    5e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e2a:	b2db      	uxtb	r3, r3
    5e2c:	7afa      	ldrb	r2, [r7, #11]
    5e2e:	1ad3      	subs	r3, r2, r3
    5e30:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (tx_len > 16)
    5e34:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    5e38:	2b10      	cmp	r3, #16
    5e3a:	d902      	bls.n	5e42 <le_transmit+0x266>
			tx_len = 16;
    5e3c:	2310      	movs	r3, #16
    5e3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
    5e42:	f107 0210 	add.w	r2, r7, #16
    5e46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e48:	4413      	add	r3, r2
    5e4a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
    5e4e:	2070      	movs	r0, #112	; 0x70
    5e50:	4611      	mov	r1, r2
    5e52:	461a      	mov	r2, r3
    5e54:	f003 fc2c 	bl	96b0 <cc2400_spi_buf>
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    5e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e5a:	3310      	adds	r3, #16
    5e5c:	667b      	str	r3, [r7, #100]	; 0x64
    5e5e:	7afa      	ldrb	r2, [r7, #11]
    5e60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e62:	429a      	cmp	r2, r3
    5e64:	d8d9      	bhi.n	5e1a <le_transmit+0x23e>
		if (tx_len > 16)
			tx_len = 16;
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
	}

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5e66:	bf00      	nop
    5e68:	200e      	movs	r0, #14
    5e6a:	f003 fbc9 	bl	9600 <cc2400_get>
    5e6e:	4603      	mov	r3, r0
    5e70:	f003 031f 	and.w	r3, r3, #31
    5e74:	2b0f      	cmp	r3, #15
    5e76:	d1f7      	bne.n	5e68 <le_transmit+0x28c>
	TXLED_CLR;
    5e78:	4b14      	ldr	r3, [pc, #80]	; (5ecc <le_transmit+0x2f0>)
    5e7a:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e7e:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    5e80:	2064      	movs	r0, #100	; 0x64
    5e82:	f003 fc95 	bl	97b0 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    5e86:	bf00      	nop
    5e88:	f003 fc88 	bl	979c <cc2400_status>
    5e8c:	4603      	mov	r3, r0
    5e8e:	f003 0304 	and.w	r3, r3, #4
    5e92:	2b00      	cmp	r3, #0
    5e94:	d1f8      	bne.n	5e88 <le_transmit+0x2ac>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5e96:	4b0e      	ldr	r3, [pc, #56]	; (5ed0 <le_transmit+0x2f4>)
    5e98:	2280      	movs	r2, #128	; 0x80
    5e9a:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    5e9c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    5ea0:	2008      	movs	r0, #8
    5ea2:	4619      	mov	r1, r3
    5ea4:	f003 fbc2 	bl	962c <cc2400_set>
}
    5ea8:	3768      	adds	r7, #104	; 0x68
    5eaa:	46bd      	mov	sp, r7
    5eac:	bd80      	pop	{r7, pc}
    5eae:	bf00      	nop
    5eb0:	1000049c 	.word	0x1000049c
    5eb4:	0000abfc 	.word	0x0000abfc
    5eb8:	0000ab7c 	.word	0x0000ab7c
    5ebc:	02040811 	.word	0x02040811
    5ec0:	2009c038 	.word	0x2009c038
    5ec4:	2009c058 	.word	0x2009c058
    5ec8:	2009c054 	.word	0x2009c054
    5ecc:	2009c03c 	.word	0x2009c03c
    5ed0:	2009c05c 	.word	0x2009c05c

00005ed4 <le_jam>:

void le_jam(void) {
    5ed4:	b580      	push	{r7, lr}
    5ed6:	af00      	add	r7, sp, #0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    5ed8:	200d      	movs	r0, #13
    5eda:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5ede:	f003 fba5 	bl	962c <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5ee2:	2012      	movs	r0, #18
    5ee4:	f642 3122 	movw	r1, #11042	; 0x2b22
    5ee8:	f003 fba0 	bl	962c <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    5eec:	2014      	movs	r0, #20
    5eee:	f242 314b 	movw	r1, #9035	; 0x234b
    5ef2:	f003 fb9b 	bl	962c <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5ef6:	2020      	movs	r0, #32
    5ef8:	f640 4101 	movw	r1, #3073	; 0xc01
    5efc:	f003 fb96 	bl	962c <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5f00:	2005      	movs	r0, #5
    5f02:	210b      	movs	r1, #11
    5f04:	f003 fb92 	bl	962c <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5f08:	2003      	movs	r0, #3
    5f0a:	2140      	movs	r1, #64	; 0x40
    5f0c:	f003 fb8e 	bl	962c <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5f10:	bf00      	nop
    5f12:	f003 fc43 	bl	979c <cc2400_status>
    5f16:	4603      	mov	r3, r0
    5f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5f1c:	2b00      	cmp	r3, #0
    5f1e:	d0f8      	beq.n	5f12 <le_jam+0x3e>
	cc2400_strobe(SFSON);
    5f20:	2061      	movs	r0, #97	; 0x61
    5f22:	f003 fc45 	bl	97b0 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5f26:	bf00      	nop
    5f28:	f003 fc38 	bl	979c <cc2400_status>
    5f2c:	4603      	mov	r3, r0
    5f2e:	f003 0304 	and.w	r3, r3, #4
    5f32:	2b00      	cmp	r3, #0
    5f34:	d0f8      	beq.n	5f28 <le_jam+0x54>
	TXLED_SET;
    5f36:	4b0a      	ldr	r3, [pc, #40]	; (5f60 <le_jam+0x8c>)
    5f38:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f3c:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5f3e:	4b09      	ldr	r3, [pc, #36]	; (5f64 <le_jam+0x90>)
    5f40:	2280      	movs	r2, #128	; 0x80
    5f42:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5f44:	bf00      	nop
    5f46:	200e      	movs	r0, #14
    5f48:	f003 fb5a 	bl	9600 <cc2400_get>
    5f4c:	4603      	mov	r3, r0
    5f4e:	f003 031f 	and.w	r3, r3, #31
    5f52:	2b0f      	cmp	r3, #15
    5f54:	d1f7      	bne.n	5f46 <le_jam+0x72>
	cc2400_strobe(STX);
    5f56:	2063      	movs	r0, #99	; 0x63
    5f58:	f003 fc2a 	bl	97b0 <cc2400_strobe>
#endif
}
    5f5c:	bd80      	pop	{r7, pc}
    5f5e:	bf00      	nop
    5f60:	2009c038 	.word	0x2009c038
    5f64:	2009c058 	.word	0x2009c058

00005f68 <hop>:

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    5f68:	b580      	push	{r7, lr}
    5f6a:	af00      	add	r7, sp, #0
	do_hop = 0;
    5f6c:	4b22      	ldr	r3, [pc, #136]	; (5ff8 <hop+0x90>)
    5f6e:	2200      	movs	r2, #0
    5f70:	701a      	strb	r2, [r3, #0]
	last_hop = clkn;
    5f72:	4b22      	ldr	r3, [pc, #136]	; (5ffc <hop+0x94>)
    5f74:	681b      	ldr	r3, [r3, #0]
    5f76:	4a22      	ldr	r2, [pc, #136]	; (6000 <hop+0x98>)
    5f78:	6013      	str	r3, [r2, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    5f7a:	4b22      	ldr	r3, [pc, #136]	; (6004 <hop+0x9c>)
    5f7c:	781b      	ldrb	r3, [r3, #0]
    5f7e:	b2db      	uxtb	r3, r3
    5f80:	2b00      	cmp	r3, #0
    5f82:	d10b      	bne.n	5f9c <hop+0x34>
		if (cc2400_get(FSDIV) == (channel - 1))
    5f84:	2002      	movs	r0, #2
    5f86:	f003 fb3b 	bl	9600 <cc2400_get>
    5f8a:	4603      	mov	r3, r0
    5f8c:	461a      	mov	r2, r3
    5f8e:	4b1e      	ldr	r3, [pc, #120]	; (6008 <hop+0xa0>)
    5f90:	881b      	ldrh	r3, [r3, #0]
    5f92:	b29b      	uxth	r3, r3
    5f94:	3b01      	subs	r3, #1
    5f96:	429a      	cmp	r2, r3
    5f98:	d100      	bne.n	5f9c <hop+0x34>
			return;
    5f9a:	e02b      	b.n	5ff4 <hop+0x8c>
	}

        /* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    5f9c:	2064      	movs	r0, #100	; 0x64
    5f9e:	f003 fc07 	bl	97b0 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5fa2:	bf00      	nop
    5fa4:	f003 fbfa 	bl	979c <cc2400_status>
    5fa8:	4603      	mov	r3, r0
    5faa:	f003 0304 	and.w	r3, r3, #4
    5fae:	2b00      	cmp	r3, #0
    5fb0:	d1f8      	bne.n	5fa4 <hop+0x3c>

	/* Retune */
	cc2400_set(FSDIV, channel - 1);
    5fb2:	4b15      	ldr	r3, [pc, #84]	; (6008 <hop+0xa0>)
    5fb4:	881b      	ldrh	r3, [r3, #0]
    5fb6:	b29b      	uxth	r3, r3
    5fb8:	3b01      	subs	r3, #1
    5fba:	b29b      	uxth	r3, r3
    5fbc:	2002      	movs	r0, #2
    5fbe:	4619      	mov	r1, r3
    5fc0:	f003 fb34 	bl	962c <cc2400_set>

	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    5fc4:	4b0f      	ldr	r3, [pc, #60]	; (6004 <hop+0x9c>)
    5fc6:	781b      	ldrb	r3, [r3, #0]
    5fc8:	b2db      	uxtb	r3, r3
    5fca:	2b00      	cmp	r3, #0
    5fcc:	d001      	beq.n	5fd2 <hop+0x6a>
		cs_threshold_calc_and_set();
    5fce:	f7fe fb5b 	bl	4688 <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    5fd2:	2061      	movs	r0, #97	; 0x61
    5fd4:	f003 fbec 	bl	97b0 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5fd8:	bf00      	nop
    5fda:	f003 fbdf 	bl	979c <cc2400_status>
    5fde:	4603      	mov	r3, r0
    5fe0:	f003 0304 	and.w	r3, r3, #4
    5fe4:	2b00      	cmp	r3, #0
    5fe6:	d0f8      	beq.n	5fda <hop+0x72>

	dma_discard = 1;
    5fe8:	4b08      	ldr	r3, [pc, #32]	; (600c <hop+0xa4>)
    5fea:	2201      	movs	r2, #1
    5fec:	701a      	strb	r2, [r3, #0]

	/* RX mode */
	cc2400_strobe(SRX);
    5fee:	2062      	movs	r0, #98	; 0x62
    5ff0:	f003 fbde 	bl	97b0 <cc2400_strobe>
}
    5ff4:	bd80      	pop	{r7, pc}
    5ff6:	bf00      	nop
    5ff8:	10000993 	.word	0x10000993
    5ffc:	10000984 	.word	0x10000984
    6000:	10000988 	.word	0x10000988
    6004:	10000992 	.word	0x10000992
    6008:	1000049c 	.word	0x1000049c
    600c:	10000994 	.word	0x10000994

00006010 <bt_stream_rx>:

/* Bluetooth packet monitoring */
void bt_stream_rx()
{
    6010:	b580      	push	{r7, lr}
    6012:	b082      	sub	sp, #8
    6014:	af00      	add	r7, sp, #0
	int8_t rssi;
	int8_t rssi_at_trigger;

	cc2400_set(MANAND, 0x7fff);
    6016:	200d      	movs	r0, #13
    6018:	f647 71ff 	movw	r1, #32767	; 0x7fff
    601c:	f003 fb06 	bl	962c <cc2400_set>
        cc2400_set(LMTST,   0x2b22);
    6020:	2012      	movs	r0, #18
    6022:	f642 3122 	movw	r1, #11042	; 0x2b22
    6026:	f003 fb01 	bl	962c <cc2400_set>
        cc2400_set(MDMTST0, 0x164b);
    602a:	2014      	movs	r0, #20
    602c:	f241 614b 	movw	r1, #5707	; 0x164b
    6030:	f003 fafc 	bl	962c <cc2400_set>
        cc2400_set(FSDIV,   2441 - 1);
    6034:	2002      	movs	r0, #2
    6036:	f640 1188 	movw	r1, #2440	; 0x988
    603a:	f003 faf7 	bl	962c <cc2400_set>
        cc2400_set(SYNCH,   0xf9ae);
    603e:	202d      	movs	r0, #45	; 0x2d
    6040:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    6044:	f003 faf2 	bl	962c <cc2400_set>
        cc2400_set(SYNCL,   0x1584);
    6048:	202c      	movs	r0, #44	; 0x2c
    604a:	f241 5184 	movw	r1, #5508	; 0x1584
    604e:	f003 faed 	bl	962c <cc2400_set>
        cc2400_set(MDMCTRL, 0x0040);
    6052:	2003      	movs	r0, #3
    6054:	2140      	movs	r1, #64	; 0x40
    6056:	f003 fae9 	bl	962c <cc2400_set>
        cc2400_set(GRMDM, 0x0f60);
    605a:	2020      	movs	r0, #32
    605c:	f44f 6176 	mov.w	r1, #3936	; 0xf60
    6060:	f003 fae4 	bl	962c <cc2400_set>

        while (!(cc2400_status() & XOSC16M_STABLE));
    6064:	bf00      	nop
    6066:	f003 fb99 	bl	979c <cc2400_status>
    606a:	4603      	mov	r3, r0
    606c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6070:	2b00      	cmp	r3, #0
    6072:	d0f8      	beq.n	6066 <bt_stream_rx+0x56>
        cc2400_strobe(SFSON);
    6074:	2061      	movs	r0, #97	; 0x61
    6076:	f003 fb9b 	bl	97b0 <cc2400_strobe>
        while (!(cc2400_status() & FS_LOCK));
    607a:	bf00      	nop
    607c:	f003 fb8e 	bl	979c <cc2400_status>
    6080:	4603      	mov	r3, r0
    6082:	f003 0304 	and.w	r3, r3, #4
    6086:	2b00      	cmp	r3, #0
    6088:	d0f8      	beq.n	607c <bt_stream_rx+0x6c>
#ifdef UBERTOOTH_ONE
        PAEN_SET;
    608a:	4b6d      	ldr	r3, [pc, #436]	; (6240 <bt_stream_rx+0x230>)
    608c:	2280      	movs	r2, #128	; 0x80
    608e:	601a      	str	r2, [r3, #0]
        HGM_SET;
    6090:	4b6b      	ldr	r3, [pc, #428]	; (6240 <bt_stream_rx+0x230>)
    6092:	f44f 7280 	mov.w	r2, #256	; 0x100
    6096:	601a      	str	r2, [r3, #0]
#endif
        cc2400_strobe(SRX);
    6098:	2062      	movs	r0, #98	; 0x62
    609a:	f003 fb89 	bl	97b0 <cc2400_strobe>
        while (!(cc2400_status() & SYNC_RECEIVED));
    609e:	bf00      	nop
    60a0:	f003 fb7c 	bl	979c <cc2400_status>
    60a4:	4603      	mov	r3, r0
    60a6:	f003 0310 	and.w	r3, r3, #16
    60aa:	2b00      	cmp	r3, #0
    60ac:	d0f8      	beq.n	60a0 <bt_stream_rx+0x90>
        
        clkn_init ();
    60ae:	f7ff f911 	bl	52d4 <clkn_init>
        T0TC = 2250;
    60b2:	4b64      	ldr	r3, [pc, #400]	; (6244 <bt_stream_rx+0x234>)
    60b4:	f640 02ca 	movw	r2, #2250	; 0x8ca
    60b8:	601a      	str	r2, [r3, #0]


	queue_init();
    60ba:	f002 f8fd 	bl	82b8 <queue_init>
	dio_ssp_init();
    60be:	f003 f9e3 	bl	9488 <dio_ssp_init>
	dma_init();
    60c2:	f7ff fa19 	bl	54f8 <dma_init>
	dio_ssp_start();
    60c6:	f7ff fc03 	bl	58d0 <dio_ssp_start>

	cc2400_rx();
    60ca:	f7ff fcbd 	bl	5a48 <cc2400_rx>

	cs_trigger_enable();
    60ce:	f7fe fb15 	bl	46fc <cs_trigger_enable>

	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    60d2:	e0a2      	b.n	621a <bt_stream_rx+0x20a>
	{

		RXLED_CLR;
    60d4:	4b5c      	ldr	r3, [pc, #368]	; (6248 <bt_stream_rx+0x238>)
    60d6:	2210      	movs	r2, #16
    60d8:	601a      	str	r2, [r3, #0]
		 * cover all the symbols in a DMA transfer. Can not do
		 * RSSI sampling in CS interrupt, but could log time
		 * at multiple trigger points there. The MAX() below
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
    60da:	f7fe f913 	bl	4304 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    60de:	2380      	movs	r3, #128	; 0x80
    60e0:	71bb      	strb	r3, [r7, #6]
		while (!rx_tc) {
    60e2:	e033      	b.n	614c <bt_stream_rx+0x13c>
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    60e4:	2006      	movs	r0, #6
    60e6:	f003 fa8b 	bl	9600 <cc2400_get>
    60ea:	4603      	mov	r3, r0
    60ec:	0a1b      	lsrs	r3, r3, #8
    60ee:	b29b      	uxth	r3, r3
    60f0:	71fb      	strb	r3, [r7, #7]
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    60f2:	4b56      	ldr	r3, [pc, #344]	; (624c <bt_stream_rx+0x23c>)
    60f4:	781b      	ldrb	r3, [r3, #0]
    60f6:	b2db      	uxtb	r3, r3
    60f8:	2b00      	cmp	r3, #0
    60fa:	d011      	beq.n	6120 <bt_stream_rx+0x110>
    60fc:	f997 3006 	ldrsb.w	r3, [r7, #6]
    6100:	f113 0f80 	cmn.w	r3, #128	; 0x80
    6104:	d10c      	bne.n	6120 <bt_stream_rx+0x110>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    6106:	4b52      	ldr	r3, [pc, #328]	; (6250 <bt_stream_rx+0x240>)
    6108:	781b      	ldrb	r3, [r3, #0]
    610a:	b25b      	sxtb	r3, r3
    610c:	f103 0236 	add.w	r2, r3, #54	; 0x36
    6110:	f997 3007 	ldrsb.w	r3, [r7, #7]
    6114:	4293      	cmp	r3, r2
    6116:	bfb8      	it	lt
    6118:	4613      	movlt	r3, r2
    611a:	71fb      	strb	r3, [r7, #7]
				rssi_at_trigger = rssi;
    611c:	79fb      	ldrb	r3, [r7, #7]
    611e:	71bb      	strb	r3, [r7, #6]
			}
			rssi_add(rssi);
    6120:	f997 3007 	ldrsb.w	r3, [r7, #7]
    6124:	4618      	mov	r0, r3
    6126:	f7fe f907 	bl	4338 <rssi_add>

			handle_usb(clkn);
    612a:	4b4a      	ldr	r3, [pc, #296]	; (6254 <bt_stream_rx+0x244>)
    612c:	681b      	ldr	r3, [r3, #0]
    612e:	4618      	mov	r0, r3
    6130:	f002 f968 	bl	8404 <handle_usb>

			/* If timer says time to hop, do it. */
			if (do_hop) {
    6134:	4b48      	ldr	r3, [pc, #288]	; (6258 <bt_stream_rx+0x248>)
    6136:	781b      	ldrb	r3, [r3, #0]
    6138:	b2db      	uxtb	r3, r3
    613a:	2b00      	cmp	r3, #0
    613c:	d002      	beq.n	6144 <bt_stream_rx+0x134>
				hop();
    613e:	f7ff ff13 	bl	5f68 <hop>
    6142:	e003      	b.n	614c <bt_stream_rx+0x13c>
			} else {
				TXLED_CLR;
    6144:	4b40      	ldr	r3, [pc, #256]	; (6248 <bt_stream_rx+0x238>)
    6146:	f44f 7280 	mov.w	r2, #256	; 0x100
    614a:	601a      	str	r2, [r3, #0]
		 * at multiple trigger points there. The MAX() below
		 * helps with statistics in the case that cs_trigger
		 * happened before the loop started. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while (!rx_tc) {
    614c:	4b43      	ldr	r3, [pc, #268]	; (625c <bt_stream_rx+0x24c>)
    614e:	681b      	ldr	r3, [r3, #0]
    6150:	2b00      	cmp	r3, #0
    6152:	d0c7      	beq.n	60e4 <bt_stream_rx+0xd4>
			}
			/* TODO - set per-channel carrier sense threshold.
			 * Set by firmware or host. */
		}

		RXLED_SET;
    6154:	4b42      	ldr	r3, [pc, #264]	; (6260 <bt_stream_rx+0x250>)
    6156:	2210      	movs	r2, #16
    6158:	601a      	str	r2, [r3, #0]

		if (rx_err) {
    615a:	4b42      	ldr	r3, [pc, #264]	; (6264 <bt_stream_rx+0x254>)
    615c:	681b      	ldr	r3, [r3, #0]
    615e:	2b00      	cmp	r3, #0
    6160:	d007      	beq.n	6172 <bt_stream_rx+0x162>
			status |= DMA_ERROR;
    6162:	4b41      	ldr	r3, [pc, #260]	; (6268 <bt_stream_rx+0x258>)
    6164:	781b      	ldrb	r3, [r3, #0]
    6166:	b2db      	uxtb	r3, r3
    6168:	f043 0302 	orr.w	r3, r3, #2
    616c:	b2da      	uxtb	r2, r3
    616e:	4b3e      	ldr	r3, [pc, #248]	; (6268 <bt_stream_rx+0x258>)
    6170:	701a      	strb	r2, [r3, #0]
		}

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    6172:	4b3a      	ldr	r3, [pc, #232]	; (625c <bt_stream_rx+0x24c>)
    6174:	681b      	ldr	r3, [r3, #0]
    6176:	2b01      	cmp	r3, #1
    6178:	d907      	bls.n	618a <bt_stream_rx+0x17a>
			status |= DMA_OVERFLOW;
    617a:	4b3b      	ldr	r3, [pc, #236]	; (6268 <bt_stream_rx+0x258>)
    617c:	781b      	ldrb	r3, [r3, #0]
    617e:	b2db      	uxtb	r3, r3
    6180:	f043 0301 	orr.w	r3, r3, #1
    6184:	b2da      	uxtb	r2, r3
    6186:	4b38      	ldr	r3, [pc, #224]	; (6268 <bt_stream_rx+0x258>)
    6188:	701a      	strb	r2, [r3, #0]

		if (dma_discard) {
    618a:	4b38      	ldr	r3, [pc, #224]	; (626c <bt_stream_rx+0x25c>)
    618c:	781b      	ldrb	r3, [r3, #0]
    618e:	b2db      	uxtb	r3, r3
    6190:	2b00      	cmp	r3, #0
    6192:	d00a      	beq.n	61aa <bt_stream_rx+0x19a>
			status |= DISCARD;
    6194:	4b34      	ldr	r3, [pc, #208]	; (6268 <bt_stream_rx+0x258>)
    6196:	781b      	ldrb	r3, [r3, #0]
    6198:	b2db      	uxtb	r3, r3
    619a:	f043 0320 	orr.w	r3, r3, #32
    619e:	b2da      	uxtb	r2, r3
    61a0:	4b31      	ldr	r3, [pc, #196]	; (6268 <bt_stream_rx+0x258>)
    61a2:	701a      	strb	r2, [r3, #0]
			dma_discard = 0;
    61a4:	4b31      	ldr	r3, [pc, #196]	; (626c <bt_stream_rx+0x25c>)
    61a6:	2200      	movs	r2, #0
    61a8:	701a      	strb	r2, [r3, #0]
		}

		rssi_iir_update();
    61aa:	f7fe f8fb 	bl	43a4 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    61ae:	4b27      	ldr	r3, [pc, #156]	; (624c <bt_stream_rx+0x23c>)
    61b0:	781b      	ldrb	r3, [r3, #0]
    61b2:	b2db      	uxtb	r3, r3
    61b4:	2b00      	cmp	r3, #0
    61b6:	d103      	bne.n	61c0 <bt_stream_rx+0x1b0>
    61b8:	4b2d      	ldr	r3, [pc, #180]	; (6270 <bt_stream_rx+0x260>)
    61ba:	781b      	ldrb	r3, [r3, #0]
    61bc:	2b00      	cmp	r3, #0
    61be:	d00a      	beq.n	61d6 <bt_stream_rx+0x1c6>
			status |= CS_TRIGGER;
    61c0:	4b29      	ldr	r3, [pc, #164]	; (6268 <bt_stream_rx+0x258>)
    61c2:	781b      	ldrb	r3, [r3, #0]
    61c4:	b2db      	uxtb	r3, r3
    61c6:	f043 0308 	orr.w	r3, r3, #8
    61ca:	b2da      	uxtb	r2, r3
    61cc:	4b26      	ldr	r3, [pc, #152]	; (6268 <bt_stream_rx+0x258>)
    61ce:	701a      	strb	r2, [r3, #0]
			cs_trigger = 0;
    61d0:	4b1e      	ldr	r3, [pc, #120]	; (624c <bt_stream_rx+0x23c>)
    61d2:	2200      	movs	r2, #0
    61d4:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    61d6:	4b27      	ldr	r3, [pc, #156]	; (6274 <bt_stream_rx+0x264>)
    61d8:	781b      	ldrb	r3, [r3, #0]
    61da:	b25a      	sxtb	r2, r3
    61dc:	4b1c      	ldr	r3, [pc, #112]	; (6250 <bt_stream_rx+0x240>)
    61de:	781b      	ldrb	r3, [r3, #0]
    61e0:	b25b      	sxtb	r3, r3
    61e2:	3336      	adds	r3, #54	; 0x36
    61e4:	429a      	cmp	r2, r3
    61e6:	db07      	blt.n	61f8 <bt_stream_rx+0x1e8>
			status |= RSSI_TRIGGER;
    61e8:	4b1f      	ldr	r3, [pc, #124]	; (6268 <bt_stream_rx+0x258>)
    61ea:	781b      	ldrb	r3, [r3, #0]
    61ec:	b2db      	uxtb	r3, r3
    61ee:	f043 0310 	orr.w	r3, r3, #16
    61f2:	b2da      	uxtb	r2, r3
    61f4:	4b1c      	ldr	r3, [pc, #112]	; (6268 <bt_stream_rx+0x258>)
    61f6:	701a      	strb	r2, [r3, #0]
		}

		enqueue(BR_PACKET, (uint8_t*)idle_rxbuf);
    61f8:	4b1f      	ldr	r3, [pc, #124]	; (6278 <bt_stream_rx+0x268>)
    61fa:	681b      	ldr	r3, [r3, #0]
    61fc:	2000      	movs	r0, #0
    61fe:	4619      	mov	r1, r3
    6200:	f7fe f962 	bl	44c8 <enqueue>

	rx_continue:
		handle_usb(clkn);
    6204:	4b13      	ldr	r3, [pc, #76]	; (6254 <bt_stream_rx+0x244>)
    6206:	681b      	ldr	r3, [r3, #0]
    6208:	4618      	mov	r0, r3
    620a:	f002 f8fb 	bl	8404 <handle_usb>
		rx_tc = 0;
    620e:	4b13      	ldr	r3, [pc, #76]	; (625c <bt_stream_rx+0x24c>)
    6210:	2200      	movs	r2, #0
    6212:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6214:	4b13      	ldr	r3, [pc, #76]	; (6264 <bt_stream_rx+0x254>)
    6216:	2200      	movs	r2, #0
    6218:	601a      	str	r2, [r3, #0]

	cc2400_rx();

	cs_trigger_enable();

	while ( requested_mode == MODE_RX_SYMBOLS || requested_mode == MODE_BT_FOLLOW )
    621a:	4b18      	ldr	r3, [pc, #96]	; (627c <bt_stream_rx+0x26c>)
    621c:	781b      	ldrb	r3, [r3, #0]
    621e:	b2db      	uxtb	r3, r3
    6220:	2b01      	cmp	r3, #1
    6222:	f43f af57 	beq.w	60d4 <bt_stream_rx+0xc4>
    6226:	4b15      	ldr	r3, [pc, #84]	; (627c <bt_stream_rx+0x26c>)
    6228:	781b      	ldrb	r3, [r3, #0]
    622a:	b2db      	uxtb	r3, r3
    622c:	2b08      	cmp	r3, #8
    622e:	f43f af51 	beq.w	60d4 <bt_stream_rx+0xc4>

	/* This call is a nop so far. Since bt_rx_stream() starts the
	 * stream, it makes sense that it would stop it. TODO - how
	 * should setup/teardown be handled? Should every new mode be
	 * starting from scratch? */
	dio_ssp_stop();
    6232:	f7ff fb7d 	bl	5930 <dio_ssp_stop>
	cs_trigger_disable();
    6236:	f7fe fa7f 	bl	4738 <cs_trigger_disable>
}
    623a:	3708      	adds	r7, #8
    623c:	46bd      	mov	sp, r7
    623e:	bd80      	pop	{r7, pc}
    6240:	2009c058 	.word	0x2009c058
    6244:	40004008 	.word	0x40004008
    6248:	2009c03c 	.word	0x2009c03c
    624c:	100010a0 	.word	0x100010a0
    6250:	1000044d 	.word	0x1000044d
    6254:	10000984 	.word	0x10000984
    6258:	10000993 	.word	0x10000993
    625c:	10000b10 	.word	0x10000b10
    6260:	2009c038 	.word	0x2009c038
    6264:	1000109c 	.word	0x1000109c
    6268:	10000a58 	.word	0x10000a58
    626c:	10000994 	.word	0x10000994
    6270:	10000995 	.word	0x10000995
    6274:	100004a3 	.word	0x100004a3
    6278:	10000454 	.word	0x10000454
    627c:	10000a4f 	.word	0x10000a4f

00006280 <le_set_access_address>:

/* set LE access address */
static void le_set_access_address(u32 aa) {
    6280:	b580      	push	{r7, lr}
    6282:	b084      	sub	sp, #16
    6284:	af00      	add	r7, sp, #0
    6286:	6078      	str	r0, [r7, #4]
	u32 aa_rev;

	le.access_address = aa;
    6288:	4a09      	ldr	r2, [pc, #36]	; (62b0 <le_set_access_address+0x30>)
    628a:	687b      	ldr	r3, [r7, #4]
    628c:	6013      	str	r3, [r2, #0]
	aa_rev = rbit(aa);
    628e:	6878      	ldr	r0, [r7, #4]
    6290:	f002 fffa 	bl	9288 <rbit>
    6294:	60f8      	str	r0, [r7, #12]
	le.syncl = aa_rev & 0xffff;
    6296:	68fb      	ldr	r3, [r7, #12]
    6298:	b29a      	uxth	r2, r3
    629a:	4b05      	ldr	r3, [pc, #20]	; (62b0 <le_set_access_address+0x30>)
    629c:	80da      	strh	r2, [r3, #6]
	le.synch = aa_rev >> 16;
    629e:	68fb      	ldr	r3, [r7, #12]
    62a0:	0c1b      	lsrs	r3, r3, #16
    62a2:	b29a      	uxth	r2, r3
    62a4:	4b02      	ldr	r3, [pc, #8]	; (62b0 <le_set_access_address+0x30>)
    62a6:	809a      	strh	r2, [r3, #4]
}
    62a8:	3710      	adds	r7, #16
    62aa:	46bd      	mov	sp, r7
    62ac:	bd80      	pop	{r7, pc}
    62ae:	bf00      	nop
    62b0:	10000458 	.word	0x10000458

000062b4 <reset_le>:

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    62b4:	b580      	push	{r7, lr}
    62b6:	af00      	add	r7, sp, #0
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    62b8:	481f      	ldr	r0, [pc, #124]	; (6338 <reset_le+0x84>)
    62ba:	f7ff ffe1 	bl	6280 <le_set_access_address>
	le.crc_init  = 0x555555;               // advertising channel CRCInit
    62be:	4b1f      	ldr	r3, [pc, #124]	; (633c <reset_le+0x88>)
    62c0:	4a1f      	ldr	r2, [pc, #124]	; (6340 <reset_le+0x8c>)
    62c2:	609a      	str	r2, [r3, #8]
	le.crc_init_reversed = 0xAAAAAA;
    62c4:	4b1d      	ldr	r3, [pc, #116]	; (633c <reset_le+0x88>)
    62c6:	4a1f      	ldr	r2, [pc, #124]	; (6344 <reset_le+0x90>)
    62c8:	60da      	str	r2, [r3, #12]
	le.crc_verify = 1;
    62ca:	4b1c      	ldr	r3, [pc, #112]	; (633c <reset_le+0x88>)
    62cc:	2201      	movs	r2, #1
    62ce:	611a      	str	r2, [r3, #16]
	le.last_packet = 0;
    62d0:	4b1a      	ldr	r3, [pc, #104]	; (633c <reset_le+0x88>)
    62d2:	2200      	movs	r2, #0
    62d4:	641a      	str	r2, [r3, #64]	; 0x40

	le.link_state = LINK_INACTIVE;
    62d6:	4b19      	ldr	r3, [pc, #100]	; (633c <reset_le+0x88>)
    62d8:	2200      	movs	r2, #0
    62da:	751a      	strb	r2, [r3, #20]

	le.channel_idx = 0;
    62dc:	4b17      	ldr	r3, [pc, #92]	; (633c <reset_le+0x88>)
    62de:	2200      	movs	r2, #0
    62e0:	755a      	strb	r2, [r3, #21]
	le.channel_increment = 0;
    62e2:	4b16      	ldr	r3, [pc, #88]	; (633c <reset_le+0x88>)
    62e4:	2200      	movs	r2, #0
    62e6:	759a      	strb	r2, [r3, #22]

	le.conn_epoch = 0;
    62e8:	4b14      	ldr	r3, [pc, #80]	; (633c <reset_le+0x88>)
    62ea:	2200      	movs	r2, #0
    62ec:	619a      	str	r2, [r3, #24]
	le.interval_timer = 0;
    62ee:	4b13      	ldr	r3, [pc, #76]	; (633c <reset_le+0x88>)
    62f0:	2200      	movs	r2, #0
    62f2:	839a      	strh	r2, [r3, #28]
	le.conn_interval = 0;
    62f4:	4b11      	ldr	r3, [pc, #68]	; (633c <reset_le+0x88>)
    62f6:	2200      	movs	r2, #0
    62f8:	83da      	strh	r2, [r3, #30]
	le.conn_interval = 0;
    62fa:	4b10      	ldr	r3, [pc, #64]	; (633c <reset_le+0x88>)
    62fc:	2200      	movs	r2, #0
    62fe:	83da      	strh	r2, [r3, #30]
	le.conn_count = 0;
    6300:	4b0e      	ldr	r3, [pc, #56]	; (633c <reset_le+0x88>)
    6302:	2200      	movs	r2, #0
    6304:	841a      	strh	r2, [r3, #32]

	le.win_size = 0;
    6306:	4b0d      	ldr	r3, [pc, #52]	; (633c <reset_le+0x88>)
    6308:	2200      	movs	r2, #0
    630a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	le.win_offset = 0;
    630e:	4b0b      	ldr	r3, [pc, #44]	; (633c <reset_le+0x88>)
    6310:	2200      	movs	r2, #0
    6312:	849a      	strh	r2, [r3, #36]	; 0x24

	le.update_pending = 0;
    6314:	4b09      	ldr	r3, [pc, #36]	; (633c <reset_le+0x88>)
    6316:	2200      	movs	r2, #0
    6318:	629a      	str	r2, [r3, #40]	; 0x28
	le.update_instant = 0;
    631a:	4b08      	ldr	r3, [pc, #32]	; (633c <reset_le+0x88>)
    631c:	2200      	movs	r2, #0
    631e:	859a      	strh	r2, [r3, #44]	; 0x2c
	le.interval_update = 0;
    6320:	4b06      	ldr	r3, [pc, #24]	; (633c <reset_le+0x88>)
    6322:	2200      	movs	r2, #0
    6324:	85da      	strh	r2, [r3, #46]	; 0x2e
	le.win_size_update = 0;
    6326:	4b05      	ldr	r3, [pc, #20]	; (633c <reset_le+0x88>)
    6328:	2200      	movs	r2, #0
    632a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	le.win_offset_update;

	do_hop = 0;
    632e:	4b06      	ldr	r3, [pc, #24]	; (6348 <reset_le+0x94>)
    6330:	2200      	movs	r2, #0
    6332:	701a      	strb	r2, [r3, #0]
}
    6334:	bd80      	pop	{r7, pc}
    6336:	bf00      	nop
    6338:	8e89bed6 	.word	0x8e89bed6
    633c:	10000458 	.word	0x10000458
    6340:	00555555 	.word	0x00555555
    6344:	00aaaaaa 	.word	0x00aaaaaa
    6348:	10000993 	.word	0x10000993

0000634c <reset_le_promisc>:

// reset LE Promisc state
void reset_le_promisc(void) {
    634c:	b580      	push	{r7, lr}
    634e:	af00      	add	r7, sp, #0
	memset(&le_promisc, 0, sizeof(le_promisc));
    6350:	4805      	ldr	r0, [pc, #20]	; (6368 <reset_le_promisc+0x1c>)
    6352:	2100      	movs	r1, #0
    6354:	f44f 7284 	mov.w	r2, #264	; 0x108
    6358:	f7fd ff0e 	bl	4178 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    635c:	4b02      	ldr	r3, [pc, #8]	; (6368 <reset_le_promisc+0x1c>)
    635e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6362:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    6366:	bd80      	pop	{r7, pc}
    6368:	10000be4 	.word	0x10000be4

0000636c <bt_generic_le>:

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    636c:	b580      	push	{r7, lr}
    636e:	b088      	sub	sp, #32
    6370:	af00      	add	r7, sp, #0
    6372:	4603      	mov	r3, r0
    6374:	71fb      	strb	r3, [r7, #7]
	u8 *tmp = NULL;
    6376:	2300      	movs	r3, #0
    6378:	60fb      	str	r3, [r7, #12]
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    637a:	4b95      	ldr	r3, [pc, #596]	; (65d0 <bt_generic_le+0x264>)
    637c:	2201      	movs	r2, #1
    637e:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    6380:	4a94      	ldr	r2, [pc, #592]	; (65d4 <bt_generic_le+0x268>)
    6382:	79fb      	ldrb	r3, [r7, #7]
    6384:	7013      	strb	r3, [r2, #0]

	reset_le();
    6386:	f7ff ff95 	bl	62b4 <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    638a:	4b93      	ldr	r3, [pc, #588]	; (65d8 <bt_generic_le+0x26c>)
    638c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6390:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    6392:	4b92      	ldr	r3, [pc, #584]	; (65dc <bt_generic_le+0x270>)
    6394:	2210      	movs	r2, #16
    6396:	601a      	str	r2, [r3, #0]

	queue_init();
    6398:	f001 ff8e 	bl	82b8 <queue_init>
	dio_ssp_init();
    639c:	f003 f874 	bl	9488 <dio_ssp_init>
	dma_init();
    63a0:	f7ff f8aa 	bl	54f8 <dma_init>
	dio_ssp_start();
    63a4:	f7ff fa94 	bl	58d0 <dio_ssp_start>
	cc2400_rx();
    63a8:	f7ff fb4e 	bl	5a48 <cc2400_rx>

	cs_trigger_enable();
    63ac:	f7fe f9a6 	bl	46fc <cs_trigger_enable>

	hold = 0;
    63b0:	2300      	movs	r3, #0
    63b2:	77fb      	strb	r3, [r7, #31]

	while (requested_mode == active_mode) {
    63b4:	e0f8      	b.n	65a8 <bt_generic_le+0x23c>
		if (requested_channel != 0) {
    63b6:	4b8a      	ldr	r3, [pc, #552]	; (65e0 <bt_generic_le+0x274>)
    63b8:	881b      	ldrh	r3, [r3, #0]
    63ba:	b29b      	uxth	r3, r3
    63bc:	2b00      	cmp	r3, #0
    63be:	d024      	beq.n	640a <bt_generic_le+0x9e>
			cc2400_strobe(SRFOFF);
    63c0:	2064      	movs	r0, #100	; 0x64
    63c2:	f003 f9f5 	bl	97b0 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    63c6:	bf00      	nop
    63c8:	f003 f9e8 	bl	979c <cc2400_status>
    63cc:	4603      	mov	r3, r0
    63ce:	f003 0304 	and.w	r3, r3, #4
    63d2:	2b00      	cmp	r3, #0
    63d4:	d1f8      	bne.n	63c8 <bt_generic_le+0x5c>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    63d6:	4b83      	ldr	r3, [pc, #524]	; (65e4 <bt_generic_le+0x278>)
    63d8:	881b      	ldrh	r3, [r3, #0]
    63da:	b29b      	uxth	r3, r3
    63dc:	3b01      	subs	r3, #1
    63de:	b29b      	uxth	r3, r3
    63e0:	2002      	movs	r0, #2
    63e2:	4619      	mov	r1, r3
    63e4:	f003 f922 	bl	962c <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    63e8:	2061      	movs	r0, #97	; 0x61
    63ea:	f003 f9e1 	bl	97b0 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    63ee:	bf00      	nop
    63f0:	f003 f9d4 	bl	979c <cc2400_status>
    63f4:	4603      	mov	r3, r0
    63f6:	f003 0304 	and.w	r3, r3, #4
    63fa:	2b00      	cmp	r3, #0
    63fc:	d0f8      	beq.n	63f0 <bt_generic_le+0x84>

			/* RX mode */
			cc2400_strobe(SRX);
    63fe:	2062      	movs	r0, #98	; 0x62
    6400:	f003 f9d6 	bl	97b0 <cc2400_strobe>

			requested_channel = 0;
    6404:	4b76      	ldr	r3, [pc, #472]	; (65e0 <bt_generic_le+0x274>)
    6406:	2200      	movs	r2, #0
    6408:	801a      	strh	r2, [r3, #0]
		}

		if (do_hop) {
    640a:	4b77      	ldr	r3, [pc, #476]	; (65e8 <bt_generic_le+0x27c>)
    640c:	781b      	ldrb	r3, [r3, #0]
    640e:	b2db      	uxtb	r3, r3
    6410:	2b00      	cmp	r3, #0
    6412:	d002      	beq.n	641a <bt_generic_le+0xae>
			hop();
    6414:	f7ff fda8 	bl	5f68 <hop>
    6418:	e003      	b.n	6422 <bt_generic_le+0xb6>
		} else {
			TXLED_CLR;
    641a:	4b70      	ldr	r3, [pc, #448]	; (65dc <bt_generic_le+0x270>)
    641c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6420:	601a      	str	r2, [r3, #0]
		}

		RXLED_CLR;
    6422:	4b6e      	ldr	r3, [pc, #440]	; (65dc <bt_generic_le+0x270>)
    6424:	2210      	movs	r2, #16
    6426:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    6428:	f7fd ff6c 	bl	4304 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    642c:	2380      	movs	r3, #128	; 0x80
    642e:	74bb      	strb	r3, [r7, #18]
		while ((rx_tc == 0) && (rx_err == 0))
    6430:	e022      	b.n	6478 <bt_generic_le+0x10c>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    6432:	2006      	movs	r0, #6
    6434:	f003 f8e4 	bl	9600 <cc2400_get>
    6438:	4603      	mov	r3, r0
    643a:	0a1b      	lsrs	r3, r3, #8
    643c:	b29b      	uxth	r3, r3
    643e:	74fb      	strb	r3, [r7, #19]
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    6440:	4b6a      	ldr	r3, [pc, #424]	; (65ec <bt_generic_le+0x280>)
    6442:	781b      	ldrb	r3, [r3, #0]
    6444:	b2db      	uxtb	r3, r3
    6446:	2b00      	cmp	r3, #0
    6448:	d011      	beq.n	646e <bt_generic_le+0x102>
    644a:	f997 3012 	ldrsb.w	r3, [r7, #18]
    644e:	f113 0f80 	cmn.w	r3, #128	; 0x80
    6452:	d10c      	bne.n	646e <bt_generic_le+0x102>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    6454:	4b66      	ldr	r3, [pc, #408]	; (65f0 <bt_generic_le+0x284>)
    6456:	781b      	ldrb	r3, [r3, #0]
    6458:	b25b      	sxtb	r3, r3
    645a:	f103 0236 	add.w	r2, r3, #54	; 0x36
    645e:	f997 3013 	ldrsb.w	r3, [r7, #19]
    6462:	4293      	cmp	r3, r2
    6464:	bfb8      	it	lt
    6466:	4613      	movlt	r3, r2
    6468:	74fb      	strb	r3, [r7, #19]
				rssi_at_trigger = rssi;
    646a:	7cfb      	ldrb	r3, [r7, #19]
    646c:	74bb      	strb	r3, [r7, #18]
			}
			rssi_add(rssi);
    646e:	f997 3013 	ldrsb.w	r3, [r7, #19]
    6472:	4618      	mov	r0, r3
    6474:	f7fd ff60 	bl	4338 <rssi_add>
		RXLED_CLR;

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
    6478:	4b5e      	ldr	r3, [pc, #376]	; (65f4 <bt_generic_le+0x288>)
    647a:	681b      	ldr	r3, [r3, #0]
    647c:	2b00      	cmp	r3, #0
    647e:	d103      	bne.n	6488 <bt_generic_le+0x11c>
    6480:	4b5d      	ldr	r3, [pc, #372]	; (65f8 <bt_generic_le+0x28c>)
    6482:	681b      	ldr	r3, [r3, #0]
    6484:	2b00      	cmp	r3, #0
    6486:	d0d4      	beq.n	6432 <bt_generic_le+0xc6>
				rssi_at_trigger = rssi;
			}
			rssi_add(rssi);
		}

		if (rx_err) {
    6488:	4b5b      	ldr	r3, [pc, #364]	; (65f8 <bt_generic_le+0x28c>)
    648a:	681b      	ldr	r3, [r3, #0]
    648c:	2b00      	cmp	r3, #0
    648e:	d007      	beq.n	64a0 <bt_generic_le+0x134>
			status |= DMA_ERROR;
    6490:	4b5a      	ldr	r3, [pc, #360]	; (65fc <bt_generic_le+0x290>)
    6492:	781b      	ldrb	r3, [r3, #0]
    6494:	b2db      	uxtb	r3, r3
    6496:	f043 0302 	orr.w	r3, r3, #2
    649a:	b2da      	uxtb	r2, r3
    649c:	4b57      	ldr	r3, [pc, #348]	; (65fc <bt_generic_le+0x290>)
    649e:	701a      	strb	r2, [r3, #0]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    64a0:	4b54      	ldr	r3, [pc, #336]	; (65f4 <bt_generic_le+0x288>)
    64a2:	681b      	ldr	r3, [r3, #0]
    64a4:	2b00      	cmp	r3, #0
    64a6:	d100      	bne.n	64aa <bt_generic_le+0x13e>
			goto rx_continue;
    64a8:	e078      	b.n	659c <bt_generic_le+0x230>

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    64aa:	4b52      	ldr	r3, [pc, #328]	; (65f4 <bt_generic_le+0x288>)
    64ac:	681b      	ldr	r3, [r3, #0]
    64ae:	2b01      	cmp	r3, #1
    64b0:	d907      	bls.n	64c2 <bt_generic_le+0x156>
			status |= DMA_OVERFLOW;
    64b2:	4b52      	ldr	r3, [pc, #328]	; (65fc <bt_generic_le+0x290>)
    64b4:	781b      	ldrb	r3, [r3, #0]
    64b6:	b2db      	uxtb	r3, r3
    64b8:	f043 0301 	orr.w	r3, r3, #1
    64bc:	b2da      	uxtb	r2, r3
    64be:	4b4f      	ldr	r3, [pc, #316]	; (65fc <bt_generic_le+0x290>)
    64c0:	701a      	strb	r2, [r3, #0]

		rssi_iir_update();
    64c2:	f7fd ff6f 	bl	43a4 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    64c6:	4b49      	ldr	r3, [pc, #292]	; (65ec <bt_generic_le+0x280>)
    64c8:	781b      	ldrb	r3, [r3, #0]
    64ca:	b2db      	uxtb	r3, r3
    64cc:	2b00      	cmp	r3, #0
    64ce:	d103      	bne.n	64d8 <bt_generic_le+0x16c>
    64d0:	4b4b      	ldr	r3, [pc, #300]	; (6600 <bt_generic_le+0x294>)
    64d2:	781b      	ldrb	r3, [r3, #0]
    64d4:	2b00      	cmp	r3, #0
    64d6:	d00c      	beq.n	64f2 <bt_generic_le+0x186>
			status |= CS_TRIGGER;
    64d8:	4b48      	ldr	r3, [pc, #288]	; (65fc <bt_generic_le+0x290>)
    64da:	781b      	ldrb	r3, [r3, #0]
    64dc:	b2db      	uxtb	r3, r3
    64de:	f043 0308 	orr.w	r3, r3, #8
    64e2:	b2da      	uxtb	r2, r3
    64e4:	4b45      	ldr	r3, [pc, #276]	; (65fc <bt_generic_le+0x290>)
    64e6:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    64e8:	2302      	movs	r3, #2
    64ea:	77fb      	strb	r3, [r7, #31]
			cs_trigger = 0;
    64ec:	4b3f      	ldr	r3, [pc, #252]	; (65ec <bt_generic_le+0x280>)
    64ee:	2200      	movs	r2, #0
    64f0:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    64f2:	4b44      	ldr	r3, [pc, #272]	; (6604 <bt_generic_le+0x298>)
    64f4:	781b      	ldrb	r3, [r3, #0]
    64f6:	b25a      	sxtb	r2, r3
    64f8:	4b3d      	ldr	r3, [pc, #244]	; (65f0 <bt_generic_le+0x284>)
    64fa:	781b      	ldrb	r3, [r3, #0]
    64fc:	b25b      	sxtb	r3, r3
    64fe:	3336      	adds	r3, #54	; 0x36
    6500:	429a      	cmp	r2, r3
    6502:	db09      	blt.n	6518 <bt_generic_le+0x1ac>
			status |= RSSI_TRIGGER;
    6504:	4b3d      	ldr	r3, [pc, #244]	; (65fc <bt_generic_le+0x290>)
    6506:	781b      	ldrb	r3, [r3, #0]
    6508:	b2db      	uxtb	r3, r3
    650a:	f043 0310 	orr.w	r3, r3, #16
    650e:	b2da      	uxtb	r2, r3
    6510:	4b3a      	ldr	r3, [pc, #232]	; (65fc <bt_generic_le+0x290>)
    6512:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    6514:	2302      	movs	r3, #2
    6516:	77fb      	strb	r3, [r7, #31]
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    6518:	7ffb      	ldrb	r3, [r7, #31]
    651a:	2b00      	cmp	r3, #0
    651c:	d100      	bne.n	6520 <bt_generic_le+0x1b4>
			goto rx_continue;
    651e:	e03d      	b.n	659c <bt_generic_le+0x230>
		}
		hold--;
    6520:	7ffb      	ldrb	r3, [r7, #31]
    6522:	3b01      	subs	r3, #1
    6524:	77fb      	strb	r3, [r7, #31]

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    6526:	4838      	ldr	r0, [pc, #224]	; (6608 <bt_generic_le+0x29c>)
    6528:	4938      	ldr	r1, [pc, #224]	; (660c <bt_generic_le+0x2a0>)
    652a:	f44f 72c8 	mov.w	r2, #400	; 0x190
    652e:	f004 fa67 	bl	aa00 <memcpy>

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    6532:	2300      	movs	r3, #0
    6534:	61bb      	str	r3, [r7, #24]
    6536:	e025      	b.n	6584 <bt_generic_le+0x218>
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    6538:	2300      	movs	r3, #0
    653a:	617b      	str	r3, [r7, #20]
    653c:	e01c      	b.n	6578 <bt_generic_le+0x20c>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    653e:	69bb      	ldr	r3, [r7, #24]
    6540:	3332      	adds	r3, #50	; 0x32
    6542:	00da      	lsls	r2, r3, #3
    6544:	697b      	ldr	r3, [r7, #20]
    6546:	4413      	add	r3, r2
    6548:	4a31      	ldr	r2, [pc, #196]	; (6610 <bt_generic_le+0x2a4>)
    654a:	6811      	ldr	r1, [r2, #0]
    654c:	69ba      	ldr	r2, [r7, #24]
    654e:	440a      	add	r2, r1
    6550:	7812      	ldrb	r2, [r2, #0]
    6552:	b2d2      	uxtb	r2, r2
    6554:	09d2      	lsrs	r2, r2, #7
    6556:	b2d1      	uxtb	r1, r2
    6558:	4a2b      	ldr	r2, [pc, #172]	; (6608 <bt_generic_le+0x29c>)
    655a:	54d1      	strb	r1, [r2, r3]
				idle_rxbuf[i] <<= 1;
    655c:	4b2c      	ldr	r3, [pc, #176]	; (6610 <bt_generic_le+0x2a4>)
    655e:	681b      	ldr	r3, [r3, #0]
    6560:	69ba      	ldr	r2, [r7, #24]
    6562:	441a      	add	r2, r3
    6564:	69b9      	ldr	r1, [r7, #24]
    6566:	440b      	add	r3, r1
    6568:	781b      	ldrb	r3, [r3, #0]
    656a:	b2db      	uxtb	r3, r3
    656c:	005b      	lsls	r3, r3, #1
    656e:	b2db      	uxtb	r3, r3
    6570:	7013      	strb	r3, [r2, #0]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    6572:	697b      	ldr	r3, [r7, #20]
    6574:	3301      	adds	r3, #1
    6576:	617b      	str	r3, [r7, #20]
    6578:	697b      	ldr	r3, [r7, #20]
    657a:	2b07      	cmp	r3, #7
    657c:	dddf      	ble.n	653e <bt_generic_le+0x1d2>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    657e:	69bb      	ldr	r3, [r7, #24]
    6580:	3301      	adds	r3, #1
    6582:	61bb      	str	r3, [r7, #24]
    6584:	69bb      	ldr	r3, [r7, #24]
    6586:	2b31      	cmp	r3, #49	; 0x31
    6588:	ddd6      	ble.n	6538 <bt_generic_le+0x1cc>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    658a:	4b22      	ldr	r3, [pc, #136]	; (6614 <bt_generic_le+0x2a8>)
    658c:	681b      	ldr	r3, [r3, #0]
    658e:	481e      	ldr	r0, [pc, #120]	; (6608 <bt_generic_le+0x29c>)
    6590:	4798      	blx	r3
    6592:	60b8      	str	r0, [r7, #8]
		if (!ret) break;
    6594:	68bb      	ldr	r3, [r7, #8]
    6596:	2b00      	cmp	r3, #0
    6598:	d100      	bne.n	659c <bt_generic_le+0x230>
    659a:	e00c      	b.n	65b6 <bt_generic_le+0x24a>

	rx_continue:
		rx_tc = 0;
    659c:	4b15      	ldr	r3, [pc, #84]	; (65f4 <bt_generic_le+0x288>)
    659e:	2200      	movs	r2, #0
    65a0:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    65a2:	4b15      	ldr	r3, [pc, #84]	; (65f8 <bt_generic_le+0x28c>)
    65a4:	2200      	movs	r2, #0
    65a6:	601a      	str	r2, [r3, #0]

	cs_trigger_enable();

	hold = 0;

	while (requested_mode == active_mode) {
    65a8:	4b1b      	ldr	r3, [pc, #108]	; (6618 <bt_generic_le+0x2ac>)
    65aa:	781b      	ldrb	r3, [r3, #0]
    65ac:	b2db      	uxtb	r3, r3
    65ae:	79fa      	ldrb	r2, [r7, #7]
    65b0:	429a      	cmp	r2, r3
    65b2:	f43f af00 	beq.w	63b6 <bt_generic_le+0x4a>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    65b6:	4b19      	ldr	r3, [pc, #100]	; (661c <bt_generic_le+0x2b0>)
    65b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    65bc:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    65be:	f7ff fa1b 	bl	59f8 <cc2400_idle>
	dio_ssp_stop();
    65c2:	f7ff f9b5 	bl	5930 <dio_ssp_stop>
	cs_trigger_disable();
    65c6:	f7fe f8b7 	bl	4738 <cs_trigger_disable>
}
    65ca:	3720      	adds	r7, #32
    65cc:	46bd      	mov	sp, r7
    65ce:	bd80      	pop	{r7, pc}
    65d0:	10000a52 	.word	0x10000a52
    65d4:	10000a4e 	.word	0x10000a4e
    65d8:	e000e100 	.word	0xe000e100
    65dc:	2009c03c 	.word	0x2009c03c
    65e0:	10000a54 	.word	0x10000a54
    65e4:	1000049c 	.word	0x1000049c
    65e8:	10000993 	.word	0x10000993
    65ec:	100010a0 	.word	0x100010a0
    65f0:	1000044d 	.word	0x1000044d
    65f4:	10000b10 	.word	0x10000b10
    65f8:	1000109c 	.word	0x1000109c
    65fc:	10000a58 	.word	0x10000a58
    6600:	10000995 	.word	0x10000995
    6604:	100004a3 	.word	0x100004a3
    6608:	10000cf8 	.word	0x10000cf8
    660c:	10000e88 	.word	0x10000e88
    6610:	10000454 	.word	0x10000454
    6614:	100009a8 	.word	0x100009a8
    6618:	10000a4f 	.word	0x10000a4f
    661c:	e000e180 	.word	0xe000e180

00006620 <bt_le_sync>:


void bt_le_sync(u8 active_mode)
{
    6620:	b590      	push	{r4, r7, lr}
    6622:	b09d      	sub	sp, #116	; 0x74
    6624:	af00      	add	r7, sp, #0
    6626:	4603      	mov	r3, r0
    6628:	71fb      	strb	r3, [r7, #7]
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    662a:	4b91      	ldr	r3, [pc, #580]	; (6870 <bt_le_sync+0x250>)
    662c:	2201      	movs	r2, #1
    662e:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    6630:	4a90      	ldr	r2, [pc, #576]	; (6874 <bt_le_sync+0x254>)
    6632:	79fb      	ldrb	r3, [r7, #7]
    6634:	7013      	strb	r3, [r2, #0]

	le.link_state = LINK_LISTENING;
    6636:	4b90      	ldr	r3, [pc, #576]	; (6878 <bt_le_sync+0x258>)
    6638:	2201      	movs	r2, #1
    663a:	751a      	strb	r2, [r3, #20]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    663c:	4b8f      	ldr	r3, [pc, #572]	; (687c <bt_le_sync+0x25c>)
    663e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6642:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    6644:	4b8e      	ldr	r3, [pc, #568]	; (6880 <bt_le_sync+0x260>)
    6646:	2210      	movs	r2, #16
    6648:	601a      	str	r2, [r3, #0]

	queue_init();
    664a:	f001 fe35 	bl	82b8 <queue_init>
	dio_ssp_init();
    664e:	f002 ff1b 	bl	9488 <dio_ssp_init>
	dma_init_le();
    6652:	f7fe ffed 	bl	5630 <dma_init_le>
	dio_ssp_start();
    6656:	f7ff f93b 	bl	58d0 <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    665a:	4b87      	ldr	r3, [pc, #540]	; (6878 <bt_le_sync+0x258>)
    665c:	681b      	ldr	r3, [r3, #0]
    665e:	4618      	mov	r0, r3
    6660:	f002 fe12 	bl	9288 <rbit>
    6664:	4603      	mov	r3, r0
    6666:	4618      	mov	r0, r3
    6668:	f7ff fa46 	bl	5af8 <cc2400_rx_sync>

	while (requested_mode == active_mode) {
    666c:	e263      	b.n	6b36 <bt_le_sync+0x516>
		if (requested_channel != 0) {
    666e:	4b85      	ldr	r3, [pc, #532]	; (6884 <bt_le_sync+0x264>)
    6670:	881b      	ldrh	r3, [r3, #0]
    6672:	b29b      	uxth	r3, r3
    6674:	2b00      	cmp	r3, #0
    6676:	d029      	beq.n	66cc <bt_le_sync+0xac>
			cc2400_strobe(SRFOFF);
    6678:	2064      	movs	r0, #100	; 0x64
    667a:	f003 f899 	bl	97b0 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    667e:	bf00      	nop
    6680:	f003 f88c 	bl	979c <cc2400_status>
    6684:	4603      	mov	r3, r0
    6686:	f003 0304 	and.w	r3, r3, #4
    668a:	2b00      	cmp	r3, #0
    668c:	d1f8      	bne.n	6680 <bt_le_sync+0x60>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    668e:	4b7e      	ldr	r3, [pc, #504]	; (6888 <bt_le_sync+0x268>)
    6690:	881b      	ldrh	r3, [r3, #0]
    6692:	b29b      	uxth	r3, r3
    6694:	3b01      	subs	r3, #1
    6696:	b29b      	uxth	r3, r3
    6698:	2002      	movs	r0, #2
    669a:	4619      	mov	r1, r3
    669c:	f002 ffc6 	bl	962c <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    66a0:	2061      	movs	r0, #97	; 0x61
    66a2:	f003 f885 	bl	97b0 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    66a6:	bf00      	nop
    66a8:	f003 f878 	bl	979c <cc2400_status>
    66ac:	4603      	mov	r3, r0
    66ae:	f003 0304 	and.w	r3, r3, #4
    66b2:	2b00      	cmp	r3, #0
    66b4:	d0f8      	beq.n	66a8 <bt_le_sync+0x88>

			/* RX mode */
			cc2400_strobe(SRX);
    66b6:	2062      	movs	r0, #98	; 0x62
    66b8:	f003 f87a 	bl	97b0 <cc2400_strobe>

			saved_request = requested_channel;
    66bc:	4b71      	ldr	r3, [pc, #452]	; (6884 <bt_le_sync+0x264>)
    66be:	881b      	ldrh	r3, [r3, #0]
    66c0:	b29a      	uxth	r2, r3
    66c2:	4b72      	ldr	r3, [pc, #456]	; (688c <bt_le_sync+0x26c>)
    66c4:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    66c6:	4b6f      	ldr	r3, [pc, #444]	; (6884 <bt_le_sync+0x264>)
    66c8:	2200      	movs	r2, #0
    66ca:	801a      	strh	r2, [r3, #0]
		}

		RXLED_CLR;
    66cc:	4b6c      	ldr	r3, [pc, #432]	; (6880 <bt_le_sync+0x260>)
    66ce:	2210      	movs	r2, #16
    66d0:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    66d2:	f7fd fe17 	bl	4304 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    66d6:	bf00      	nop
    66d8:	4b6d      	ldr	r3, [pc, #436]	; (6890 <bt_le_sync+0x270>)
    66da:	681b      	ldr	r3, [r3, #0]
    66dc:	2b00      	cmp	r3, #0
    66de:	d10e      	bne.n	66fe <bt_le_sync+0xde>
    66e0:	4b6c      	ldr	r3, [pc, #432]	; (6894 <bt_le_sync+0x274>)
    66e2:	681b      	ldr	r3, [r3, #0]
    66e4:	2b00      	cmp	r3, #0
    66e6:	d10a      	bne.n	66fe <bt_le_sync+0xde>
    66e8:	4b6b      	ldr	r3, [pc, #428]	; (6898 <bt_le_sync+0x278>)
    66ea:	781b      	ldrb	r3, [r3, #0]
    66ec:	b2db      	uxtb	r3, r3
    66ee:	2b00      	cmp	r3, #0
    66f0:	d105      	bne.n	66fe <bt_le_sync+0xde>
    66f2:	4b6a      	ldr	r3, [pc, #424]	; (689c <bt_le_sync+0x27c>)
    66f4:	781b      	ldrb	r3, [r3, #0]
    66f6:	b2db      	uxtb	r3, r3
    66f8:	79fa      	ldrb	r2, [r7, #7]
    66fa:	429a      	cmp	r2, r3
    66fc:	d0ec      	beq.n	66d8 <bt_le_sync+0xb8>
			;

		rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    66fe:	2006      	movs	r0, #6
    6700:	f002 ff7e 	bl	9600 <cc2400_get>
    6704:	4603      	mov	r3, r0
    6706:	0a1b      	lsrs	r3, r3, #8
    6708:	b29b      	uxth	r3, r3
    670a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		rssi_min = rssi_max = rssi;
    670e:	4a64      	ldr	r2, [pc, #400]	; (68a0 <bt_le_sync+0x280>)
    6710:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
    6714:	7013      	strb	r3, [r2, #0]
    6716:	4b62      	ldr	r3, [pc, #392]	; (68a0 <bt_le_sync+0x280>)
    6718:	781a      	ldrb	r2, [r3, #0]
    671a:	4b62      	ldr	r3, [pc, #392]	; (68a4 <bt_le_sync+0x284>)
    671c:	701a      	strb	r2, [r3, #0]

		if (requested_mode != active_mode) {
    671e:	4b5f      	ldr	r3, [pc, #380]	; (689c <bt_le_sync+0x27c>)
    6720:	781b      	ldrb	r3, [r3, #0]
    6722:	b2db      	uxtb	r3, r3
    6724:	79fa      	ldrb	r2, [r7, #7]
    6726:	429a      	cmp	r2, r3
    6728:	d000      	beq.n	672c <bt_le_sync+0x10c>
			goto cleanup;
    672a:	e20b      	b.n	6b44 <bt_le_sync+0x524>
		}

		if (rx_err) {
    672c:	4b59      	ldr	r3, [pc, #356]	; (6894 <bt_le_sync+0x274>)
    672e:	681b      	ldr	r3, [r3, #0]
    6730:	2b00      	cmp	r3, #0
    6732:	d007      	beq.n	6744 <bt_le_sync+0x124>
			status |= DMA_ERROR;
    6734:	4b5c      	ldr	r3, [pc, #368]	; (68a8 <bt_le_sync+0x288>)
    6736:	781b      	ldrb	r3, [r3, #0]
    6738:	b2db      	uxtb	r3, r3
    673a:	f043 0302 	orr.w	r3, r3, #2
    673e:	b2da      	uxtb	r2, r3
    6740:	4b59      	ldr	r3, [pc, #356]	; (68a8 <bt_le_sync+0x288>)
    6742:	701a      	strb	r2, [r3, #0]
		}

		if (do_hop)
    6744:	4b54      	ldr	r3, [pc, #336]	; (6898 <bt_le_sync+0x278>)
    6746:	781b      	ldrb	r3, [r3, #0]
    6748:	b2db      	uxtb	r3, r3
    674a:	2b00      	cmp	r3, #0
    674c:	d000      	beq.n	6750 <bt_le_sync+0x130>
			goto rx_flush;
    674e:	e137      	b.n	69c0 <bt_le_sync+0x3a0>

		/* No DMA transfer? */
		if (!rx_tc)
    6750:	4b4f      	ldr	r3, [pc, #316]	; (6890 <bt_le_sync+0x270>)
    6752:	681b      	ldr	r3, [r3, #0]
    6754:	2b00      	cmp	r3, #0
    6756:	d100      	bne.n	675a <bt_le_sync+0x13a>
    6758:	e1ed      	b.n	6b36 <bt_le_sync+0x516>

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    675a:	f107 030c 	add.w	r3, r7, #12
    675e:	663b      	str	r3, [r7, #96]	; 0x60
		packet[0] = le.access_address;
    6760:	4b45      	ldr	r3, [pc, #276]	; (6878 <bt_le_sync+0x258>)
    6762:	681b      	ldr	r3, [r3, #0]
    6764:	60fb      	str	r3, [r7, #12]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    6766:	4b48      	ldr	r3, [pc, #288]	; (6888 <bt_le_sync+0x268>)
    6768:	881b      	ldrh	r3, [r3, #0]
    676a:	b29b      	uxth	r3, r3
    676c:	b2db      	uxtb	r3, r3
    676e:	3b62      	subs	r3, #98	; 0x62
    6770:	b2db      	uxtb	r3, r3
    6772:	4618      	mov	r0, r3
    6774:	f001 fc52 	bl	801c <btle_channel_index>
    6778:	4603      	mov	r3, r0
    677a:	461a      	mov	r2, r3
    677c:	4613      	mov	r3, r2
    677e:	005b      	lsls	r3, r3, #1
    6780:	4413      	add	r3, r2
    6782:	011b      	lsls	r3, r3, #4
    6784:	4a49      	ldr	r2, [pc, #292]	; (68ac <bt_le_sync+0x28c>)
    6786:	4413      	add	r3, r2
    6788:	65fb      	str	r3, [r7, #92]	; 0x5c
		for (i = 0; i < 4; i+= 4) {
    678a:	2300      	movs	r3, #0
    678c:	66fb      	str	r3, [r7, #108]	; 0x6c
    678e:	e038      	b.n	6802 <bt_le_sync+0x1e2>
			uint32_t v = rxbuf1[i+0] << 24
    6790:	4a47      	ldr	r2, [pc, #284]	; (68b0 <bt_le_sync+0x290>)
    6792:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6794:	4413      	add	r3, r2
    6796:	781b      	ldrb	r3, [r3, #0]
    6798:	b2db      	uxtb	r3, r3
    679a:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    679c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    679e:	3301      	adds	r3, #1
    67a0:	4943      	ldr	r1, [pc, #268]	; (68b0 <bt_le_sync+0x290>)
    67a2:	5ccb      	ldrb	r3, [r1, r3]
    67a4:	b2db      	uxtb	r3, r3
    67a6:	041b      	lsls	r3, r3, #16
    67a8:	431a      	orrs	r2, r3
					   | rxbuf1[i+2] << 8
    67aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    67ac:	3302      	adds	r3, #2
    67ae:	4940      	ldr	r1, [pc, #256]	; (68b0 <bt_le_sync+0x290>)
    67b0:	5ccb      	ldrb	r3, [r1, r3]
    67b2:	b2db      	uxtb	r3, r3
    67b4:	021b      	lsls	r3, r3, #8
    67b6:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    67b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    67ba:	3203      	adds	r2, #3
    67bc:	493c      	ldr	r1, [pc, #240]	; (68b0 <bt_le_sync+0x290>)
    67be:	5c8a      	ldrb	r2, [r1, r2]
    67c0:	b2d2      	uxtb	r2, r2
    67c2:	4313      	orrs	r3, r2
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    67c4:	65bb      	str	r3, [r7, #88]	; 0x58
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    67c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    67c8:	2b00      	cmp	r3, #0
    67ca:	da00      	bge.n	67ce <bt_le_sync+0x1ae>
    67cc:	3303      	adds	r3, #3
    67ce:	109b      	asrs	r3, r3, #2
    67d0:	1c5c      	adds	r4, r3, #1
    67d2:	6db8      	ldr	r0, [r7, #88]	; 0x58
    67d4:	f002 fd58 	bl	9288 <rbit>
    67d8:	4601      	mov	r1, r0
    67da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    67dc:	2b00      	cmp	r3, #0
    67de:	da00      	bge.n	67e2 <bt_le_sync+0x1c2>
    67e0:	3303      	adds	r3, #3
    67e2:	109b      	asrs	r3, r3, #2
    67e4:	009b      	lsls	r3, r3, #2
    67e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    67e8:	4413      	add	r3, r2
    67ea:	681b      	ldr	r3, [r3, #0]
    67ec:	ea81 0203 	eor.w	r2, r1, r3
    67f0:	00a3      	lsls	r3, r4, #2
    67f2:	f107 0170 	add.w	r1, r7, #112	; 0x70
    67f6:	440b      	add	r3, r1
    67f8:	f843 2c64 	str.w	r2, [r3, #-100]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
    67fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    67fe:	3304      	adds	r3, #4
    6800:	66fb      	str	r3, [r7, #108]	; 0x6c
    6802:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6804:	2b03      	cmp	r3, #3
    6806:	ddc3      	ble.n	6790 <bt_le_sync+0x170>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		unsigned len = (p[5] & 0x3f) + 2;
    6808:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    680a:	3305      	adds	r3, #5
    680c:	781b      	ldrb	r3, [r3, #0]
    680e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6812:	3302      	adds	r3, #2
    6814:	657b      	str	r3, [r7, #84]	; 0x54
		if (len > 39)
    6816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6818:	2b27      	cmp	r3, #39	; 0x27
    681a:	d900      	bls.n	681e <bt_le_sync+0x1fe>
			goto rx_flush;
    681c:	e0d0      	b.n	69c0 <bt_le_sync+0x3a0>

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    681e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6820:	3306      	adds	r3, #6
    6822:	089b      	lsrs	r3, r3, #2
    6824:	653b      	str	r3, [r7, #80]	; 0x50
		if (total_transfers < 11) {
    6826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6828:	2b0a      	cmp	r3, #10
    682a:	d80d      	bhi.n	6848 <bt_le_sync+0x228>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    682c:	bf00      	nop
    682e:	4b21      	ldr	r3, [pc, #132]	; (68b4 <bt_le_sync+0x294>)
    6830:	681a      	ldr	r2, [r3, #0]
    6832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6834:	009b      	lsls	r3, r3, #2
    6836:	491e      	ldr	r1, [pc, #120]	; (68b0 <bt_le_sync+0x290>)
    6838:	440b      	add	r3, r1
    683a:	429a      	cmp	r2, r3
    683c:	d20f      	bcs.n	685e <bt_le_sync+0x23e>
    683e:	4b15      	ldr	r3, [pc, #84]	; (6894 <bt_le_sync+0x274>)
    6840:	681b      	ldr	r3, [r3, #0]
    6842:	2b00      	cmp	r3, #0
    6844:	d0f3      	beq.n	682e <bt_le_sync+0x20e>
    6846:	e00a      	b.n	685e <bt_le_sync+0x23e>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    6848:	bf00      	nop
    684a:	4b1b      	ldr	r3, [pc, #108]	; (68b8 <bt_le_sync+0x298>)
    684c:	681b      	ldr	r3, [r3, #0]
    684e:	f003 0301 	and.w	r3, r3, #1
    6852:	2b00      	cmp	r3, #0
    6854:	d003      	beq.n	685e <bt_le_sync+0x23e>
    6856:	4b0f      	ldr	r3, [pc, #60]	; (6894 <bt_le_sync+0x274>)
    6858:	681b      	ldr	r3, [r3, #0]
    685a:	2b00      	cmp	r3, #0
    685c:	d0f5      	beq.n	684a <bt_le_sync+0x22a>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    685e:	4a17      	ldr	r2, [pc, #92]	; (68bc <bt_le_sync+0x29c>)
    6860:	4b16      	ldr	r3, [pc, #88]	; (68bc <bt_le_sync+0x29c>)
    6862:	681b      	ldr	r3, [r3, #0]
    6864:	f023 0301 	bic.w	r3, r3, #1
    6868:	6013      	str	r3, [r2, #0]

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    686a:	2304      	movs	r3, #4
    686c:	66fb      	str	r3, [r7, #108]	; 0x6c
    686e:	e060      	b.n	6932 <bt_le_sync+0x312>
    6870:	10000a52 	.word	0x10000a52
    6874:	10000a4e 	.word	0x10000a4e
    6878:	10000458 	.word	0x10000458
    687c:	e000e100 	.word	0xe000e100
    6880:	2009c03c 	.word	0x2009c03c
    6884:	10000a54 	.word	0x10000a54
    6888:	1000049c 	.word	0x1000049c
    688c:	10000a56 	.word	0x10000a56
    6890:	10000b10 	.word	0x10000b10
    6894:	1000109c 	.word	0x1000109c
    6898:	10000993 	.word	0x10000993
    689c:	10000a4f 	.word	0x10000a4f
    68a0:	100004a3 	.word	0x100004a3
    68a4:	100004a4 	.word	0x100004a4
    68a8:	10000a58 	.word	0x10000a58
    68ac:	0000ac4c 	.word	0x0000ac4c
    68b0:	10001068 	.word	0x10001068
    68b4:	50004104 	.word	0x50004104
    68b8:	50004110 	.word	0x50004110
    68bc:	40030024 	.word	0x40030024
			uint32_t v = rxbuf1[i+0] << 24
    68c0:	4aa7      	ldr	r2, [pc, #668]	; (6b60 <bt_le_sync+0x540>)
    68c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    68c4:	4413      	add	r3, r2
    68c6:	781b      	ldrb	r3, [r3, #0]
    68c8:	b2db      	uxtb	r3, r3
    68ca:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    68cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    68ce:	3301      	adds	r3, #1
    68d0:	49a3      	ldr	r1, [pc, #652]	; (6b60 <bt_le_sync+0x540>)
    68d2:	5ccb      	ldrb	r3, [r1, r3]
    68d4:	b2db      	uxtb	r3, r3
    68d6:	041b      	lsls	r3, r3, #16
    68d8:	431a      	orrs	r2, r3
					   | rxbuf1[i+2] << 8
    68da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    68dc:	3302      	adds	r3, #2
    68de:	49a0      	ldr	r1, [pc, #640]	; (6b60 <bt_le_sync+0x540>)
    68e0:	5ccb      	ldrb	r3, [r1, r3]
    68e2:	b2db      	uxtb	r3, r3
    68e4:	021b      	lsls	r3, r3, #8
    68e6:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    68e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    68ea:	3203      	adds	r2, #3
    68ec:	499c      	ldr	r1, [pc, #624]	; (6b60 <bt_le_sync+0x540>)
    68ee:	5c8a      	ldrb	r2, [r1, r2]
    68f0:	b2d2      	uxtb	r2, r2
    68f2:	4313      	orrs	r3, r2
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    68f4:	64fb      	str	r3, [r7, #76]	; 0x4c
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    68f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    68f8:	2b00      	cmp	r3, #0
    68fa:	da00      	bge.n	68fe <bt_le_sync+0x2de>
    68fc:	3303      	adds	r3, #3
    68fe:	109b      	asrs	r3, r3, #2
    6900:	1c5c      	adds	r4, r3, #1
    6902:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    6904:	f002 fcc0 	bl	9288 <rbit>
    6908:	4601      	mov	r1, r0
    690a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    690c:	2b00      	cmp	r3, #0
    690e:	da00      	bge.n	6912 <bt_le_sync+0x2f2>
    6910:	3303      	adds	r3, #3
    6912:	109b      	asrs	r3, r3, #2
    6914:	009b      	lsls	r3, r3, #2
    6916:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    6918:	4413      	add	r3, r2
    691a:	681b      	ldr	r3, [r3, #0]
    691c:	ea81 0203 	eor.w	r2, r1, r3
    6920:	00a3      	lsls	r3, r4, #2
    6922:	f107 0170 	add.w	r1, r7, #112	; 0x70
    6926:	440b      	add	r3, r1
    6928:	f843 2c64 	str.w	r2, [r3, #-100]
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    692c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    692e:	3304      	adds	r3, #4
    6930:	66fb      	str	r3, [r7, #108]	; 0x6c
    6932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6934:	2b2b      	cmp	r3, #43	; 0x2b
    6936:	ddc3      	ble.n	68c0 <bt_le_sync+0x2a0>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    6938:	4b8a      	ldr	r3, [pc, #552]	; (6b64 <bt_le_sync+0x544>)
    693a:	691b      	ldr	r3, [r3, #16]
    693c:	2b00      	cmp	r3, #0
    693e:	d023      	beq.n	6988 <bt_le_sync+0x368>
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    6940:	4b88      	ldr	r3, [pc, #544]	; (6b64 <bt_le_sync+0x544>)
    6942:	68d9      	ldr	r1, [r3, #12]
    6944:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6946:	1d1a      	adds	r2, r3, #4
    6948:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    694a:	4608      	mov	r0, r1
    694c:	4611      	mov	r1, r2
    694e:	461a      	mov	r2, r3
    6950:	f001 fc36 	bl	81c0 <btle_crcgen_lut>
    6954:	64b8      	str	r0, [r7, #72]	; 0x48
			u32 wire_crc = (p[4+len+2] << 16)
    6956:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6958:	3306      	adds	r3, #6
    695a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    695c:	4413      	add	r3, r2
    695e:	781b      	ldrb	r3, [r3, #0]
    6960:	041a      	lsls	r2, r3, #16
						 | (p[4+len+1] << 8)
    6962:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6964:	3305      	adds	r3, #5
    6966:	6e39      	ldr	r1, [r7, #96]	; 0x60
    6968:	440b      	add	r3, r1
    696a:	781b      	ldrb	r3, [r3, #0]
    696c:	021b      	lsls	r3, r3, #8
    696e:	4313      	orrs	r3, r2
						 | (p[4+len+0] << 0);
    6970:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    6972:	3204      	adds	r2, #4
    6974:	6e39      	ldr	r1, [r7, #96]	; 0x60
    6976:	440a      	add	r2, r1
    6978:	7812      	ldrb	r2, [r2, #0]
    697a:	4313      	orrs	r3, r2
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
			u32 wire_crc = (p[4+len+2] << 16)
    697c:	647b      	str	r3, [r7, #68]	; 0x44
						 | (p[4+len+1] << 8)
						 | (p[4+len+0] << 0);
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    697e:	6cba      	ldr	r2, [r7, #72]	; 0x48
    6980:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6982:	429a      	cmp	r2, r3
    6984:	d000      	beq.n	6988 <bt_le_sync+0x368>
				goto rx_flush;
    6986:	e01b      	b.n	69c0 <bt_le_sync+0x3a0>
		}


		RXLED_SET;
    6988:	4b77      	ldr	r3, [pc, #476]	; (6b68 <bt_le_sync+0x548>)
    698a:	2210      	movs	r2, #16
    698c:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    698e:	4b77      	ldr	r3, [pc, #476]	; (6b6c <bt_le_sync+0x54c>)
    6990:	681b      	ldr	r3, [r3, #0]
    6992:	f107 020c 	add.w	r2, r7, #12
    6996:	4610      	mov	r0, r2
    6998:	4798      	blx	r3
		enqueue(LE_PACKET, (uint8_t *)packet);
    699a:	f107 030c 	add.w	r3, r7, #12
    699e:	2001      	movs	r0, #1
    69a0:	4619      	mov	r1, r3
    69a2:	f7fd fd91 	bl	44c8 <enqueue>
		le.last_packet = CLK100NS;
    69a6:	4b72      	ldr	r3, [pc, #456]	; (6b70 <bt_le_sync+0x550>)
    69a8:	681b      	ldr	r3, [r3, #0]
    69aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
    69ae:	f640 4235 	movw	r2, #3125	; 0xc35
    69b2:	fb02 f203 	mul.w	r2, r2, r3
    69b6:	4b6f      	ldr	r3, [pc, #444]	; (6b74 <bt_le_sync+0x554>)
    69b8:	681b      	ldr	r3, [r3, #0]
    69ba:	4413      	add	r3, r2
    69bc:	4a69      	ldr	r2, [pc, #420]	; (6b64 <bt_le_sync+0x544>)
    69be:	6413      	str	r3, [r2, #64]	; 0x40

	rx_flush:
		cc2400_strobe(SFSON);
    69c0:	2061      	movs	r0, #97	; 0x61
    69c2:	f002 fef5 	bl	97b0 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    69c6:	bf00      	nop
    69c8:	f002 fee8 	bl	979c <cc2400_status>
    69cc:	4603      	mov	r3, r0
    69ce:	f003 0304 	and.w	r3, r3, #4
    69d2:	2b00      	cmp	r3, #0
    69d4:	d0f8      	beq.n	69c8 <bt_le_sync+0x3a8>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    69d6:	4a68      	ldr	r2, [pc, #416]	; (6b78 <bt_le_sync+0x558>)
    69d8:	4b67      	ldr	r3, [pc, #412]	; (6b78 <bt_le_sync+0x558>)
    69da:	681b      	ldr	r3, [r3, #0]
    69dc:	f023 0301 	bic.w	r3, r3, #1
    69e0:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    69e2:	e003      	b.n	69ec <bt_le_sync+0x3cc>
			u8 tmp = (u8)DIO_SSP_DR;
    69e4:	4b65      	ldr	r3, [pc, #404]	; (6b7c <bt_le_sync+0x55c>)
    69e6:	681b      	ldr	r3, [r3, #0]
    69e8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    69ec:	4b64      	ldr	r3, [pc, #400]	; (6b80 <bt_le_sync+0x560>)
    69ee:	681b      	ldr	r3, [r3, #0]
    69f0:	f003 0304 	and.w	r3, r3, #4
    69f4:	2b00      	cmp	r3, #0
    69f6:	d1f5      	bne.n	69e4 <bt_le_sync+0x3c4>
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    69f8:	4b5d      	ldr	r3, [pc, #372]	; (6b70 <bt_le_sync+0x550>)
    69fa:	681b      	ldr	r3, [r3, #0]
    69fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6a00:	f640 4235 	movw	r2, #3125	; 0xc35
    6a04:	fb02 f203 	mul.w	r2, r2, r3
    6a08:	4b5a      	ldr	r3, [pc, #360]	; (6b74 <bt_le_sync+0x554>)
    6a0a:	681b      	ldr	r3, [r3, #0]
    6a0c:	4413      	add	r3, r2
    6a0e:	66bb      	str	r3, [r7, #104]	; 0x68
		if (now < le.last_packet)
    6a10:	4b54      	ldr	r3, [pc, #336]	; (6b64 <bt_le_sync+0x544>)
    6a12:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    6a14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6a16:	429a      	cmp	r2, r3
    6a18:	d905      	bls.n	6a26 <bt_le_sync+0x406>
			now += 3276800000; // handle rollover
    6a1a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    6a1c:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    6a20:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    6a24:	66bb      	str	r3, [r7, #104]	; 0x68
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    6a26:	4b4f      	ldr	r3, [pc, #316]	; (6b64 <bt_le_sync+0x544>)
    6a28:	7d1b      	ldrb	r3, [r3, #20]

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
		if  ( // timeout
    6a2a:	2b03      	cmp	r3, #3
    6a2c:	d003      	beq.n	6a36 <bt_le_sync+0x416>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    6a2e:	4b4d      	ldr	r3, [pc, #308]	; (6b64 <bt_le_sync+0x544>)
    6a30:	7d1b      	ldrb	r3, [r3, #20]
    6a32:	2b02      	cmp	r3, #2
    6a34:	d106      	bne.n	6a44 <bt_le_sync+0x424>
			&& (now - le.last_packet > 50000000))
    6a36:	4b4b      	ldr	r3, [pc, #300]	; (6b64 <bt_le_sync+0x544>)
    6a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6a3a:	6eba      	ldr	r2, [r7, #104]	; 0x68
    6a3c:	1ad3      	subs	r3, r2, r3
    6a3e:	4a51      	ldr	r2, [pc, #324]	; (6b84 <bt_le_sync+0x564>)
    6a40:	4293      	cmp	r3, r2
    6a42:	d803      	bhi.n	6a4c <bt_le_sync+0x42c>
			// jam finished
			|| (le_jam_count == 1)
    6a44:	4b50      	ldr	r3, [pc, #320]	; (6b88 <bt_le_sync+0x568>)
    6a46:	681b      	ldr	r3, [r3, #0]
    6a48:	2b01      	cmp	r3, #1
    6a4a:	d137      	bne.n	6abc <bt_le_sync+0x49c>
			)
		{
			reset_le();
    6a4c:	f7ff fc32 	bl	62b4 <reset_le>
			le_jam_count = 0;
    6a50:	4b4d      	ldr	r3, [pc, #308]	; (6b88 <bt_le_sync+0x568>)
    6a52:	2200      	movs	r2, #0
    6a54:	601a      	str	r2, [r3, #0]
			TXLED_CLR;
    6a56:	4b4d      	ldr	r3, [pc, #308]	; (6b8c <bt_le_sync+0x56c>)
    6a58:	f44f 7280 	mov.w	r2, #256	; 0x100
    6a5c:	601a      	str	r2, [r3, #0]

			if (jam_mode == JAM_ONCE) {
    6a5e:	4b4c      	ldr	r3, [pc, #304]	; (6b90 <bt_le_sync+0x570>)
    6a60:	781b      	ldrb	r3, [r3, #0]
    6a62:	b2db      	uxtb	r3, r3
    6a64:	2b01      	cmp	r3, #1
    6a66:	d106      	bne.n	6a76 <bt_le_sync+0x456>
				jam_mode = JAM_NONE;
    6a68:	4b49      	ldr	r3, [pc, #292]	; (6b90 <bt_le_sync+0x570>)
    6a6a:	2200      	movs	r2, #0
    6a6c:	701a      	strb	r2, [r3, #0]
				requested_mode = MODE_IDLE;
    6a6e:	4b49      	ldr	r3, [pc, #292]	; (6b94 <bt_le_sync+0x574>)
    6a70:	2200      	movs	r2, #0
    6a72:	701a      	strb	r2, [r3, #0]
				goto cleanup;
    6a74:	e066      	b.n	6b44 <bt_le_sync+0x524>
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    6a76:	79fb      	ldrb	r3, [r7, #7]
    6a78:	2b0a      	cmp	r3, #10
    6a7a:	d101      	bne.n	6a80 <bt_le_sync+0x460>
				goto cleanup;
    6a7c:	bf00      	nop
    6a7e:	e061      	b.n	6b44 <bt_le_sync+0x524>

			le.link_state = LINK_LISTENING;
    6a80:	4b38      	ldr	r3, [pc, #224]	; (6b64 <bt_le_sync+0x544>)
    6a82:	2201      	movs	r2, #1
    6a84:	751a      	strb	r2, [r3, #20]

			cc2400_strobe(SRFOFF);
    6a86:	2064      	movs	r0, #100	; 0x64
    6a88:	f002 fe92 	bl	97b0 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    6a8c:	bf00      	nop
    6a8e:	f002 fe85 	bl	979c <cc2400_status>
    6a92:	4603      	mov	r3, r0
    6a94:	f003 0304 	and.w	r3, r3, #4
    6a98:	2b00      	cmp	r3, #0
    6a9a:	d1f8      	bne.n	6a8e <bt_le_sync+0x46e>

			/* Retune */
			channel = saved_request != 0 ? saved_request : 2402;
    6a9c:	4b3e      	ldr	r3, [pc, #248]	; (6b98 <bt_le_sync+0x578>)
    6a9e:	881b      	ldrh	r3, [r3, #0]
    6aa0:	b29b      	uxth	r3, r3
    6aa2:	2b00      	cmp	r3, #0
    6aa4:	d003      	beq.n	6aae <bt_le_sync+0x48e>
    6aa6:	4b3c      	ldr	r3, [pc, #240]	; (6b98 <bt_le_sync+0x578>)
    6aa8:	881b      	ldrh	r3, [r3, #0]
    6aaa:	b29b      	uxth	r3, r3
    6aac:	e001      	b.n	6ab2 <bt_le_sync+0x492>
    6aae:	f640 1362 	movw	r3, #2402	; 0x962
    6ab2:	4a3a      	ldr	r2, [pc, #232]	; (6b9c <bt_le_sync+0x57c>)
    6ab4:	8013      	strh	r3, [r2, #0]
			restart_jamming = 1;
    6ab6:	4b3a      	ldr	r3, [pc, #232]	; (6ba0 <bt_le_sync+0x580>)
    6ab8:	2201      	movs	r2, #1
    6aba:	601a      	str	r2, [r3, #0]
		}

		cc2400_set(SYNCL, le.syncl);
    6abc:	4b29      	ldr	r3, [pc, #164]	; (6b64 <bt_le_sync+0x544>)
    6abe:	88db      	ldrh	r3, [r3, #6]
    6ac0:	202c      	movs	r0, #44	; 0x2c
    6ac2:	4619      	mov	r1, r3
    6ac4:	f002 fdb2 	bl	962c <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    6ac8:	4b26      	ldr	r3, [pc, #152]	; (6b64 <bt_le_sync+0x544>)
    6aca:	889b      	ldrh	r3, [r3, #4]
    6acc:	202d      	movs	r0, #45	; 0x2d
    6ace:	4619      	mov	r1, r3
    6ad0:	f002 fdac 	bl	962c <cc2400_set>

		if (do_hop)
    6ad4:	4b33      	ldr	r3, [pc, #204]	; (6ba4 <bt_le_sync+0x584>)
    6ad6:	781b      	ldrb	r3, [r3, #0]
    6ad8:	b2db      	uxtb	r3, r3
    6ada:	2b00      	cmp	r3, #0
    6adc:	d001      	beq.n	6ae2 <bt_le_sync+0x4c2>
			hop();
    6ade:	f7ff fa43 	bl	5f68 <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    6ae2:	4b29      	ldr	r3, [pc, #164]	; (6b88 <bt_le_sync+0x568>)
    6ae4:	681b      	ldr	r3, [r3, #0]
    6ae6:	2b00      	cmp	r3, #0
    6ae8:	dd07      	ble.n	6afa <bt_le_sync+0x4da>
			le_jam();
    6aea:	f7ff f9f3 	bl	5ed4 <le_jam>
			--le_jam_count;
    6aee:	4b26      	ldr	r3, [pc, #152]	; (6b88 <bt_le_sync+0x568>)
    6af0:	681b      	ldr	r3, [r3, #0]
    6af2:	3b01      	subs	r3, #1
    6af4:	4a24      	ldr	r2, [pc, #144]	; (6b88 <bt_le_sync+0x568>)
    6af6:	6013      	str	r3, [r2, #0]
    6af8:	e017      	b.n	6b2a <bt_le_sync+0x50a>
		} else {
			/* RX mode */
			dma_init_le();
    6afa:	f7fe fd99 	bl	5630 <dma_init_le>
			dio_ssp_start();
    6afe:	f7fe fee7 	bl	58d0 <dio_ssp_start>

			if (restart_jamming) {
    6b02:	4b27      	ldr	r3, [pc, #156]	; (6ba0 <bt_le_sync+0x580>)
    6b04:	681b      	ldr	r3, [r3, #0]
    6b06:	2b00      	cmp	r3, #0
    6b08:	d00c      	beq.n	6b24 <bt_le_sync+0x504>
				cc2400_rx_sync(rbit(le.access_address));
    6b0a:	4b16      	ldr	r3, [pc, #88]	; (6b64 <bt_le_sync+0x544>)
    6b0c:	681b      	ldr	r3, [r3, #0]
    6b0e:	4618      	mov	r0, r3
    6b10:	f002 fbba 	bl	9288 <rbit>
    6b14:	4603      	mov	r3, r0
    6b16:	4618      	mov	r0, r3
    6b18:	f7fe ffee 	bl	5af8 <cc2400_rx_sync>
				restart_jamming = 0;
    6b1c:	4b20      	ldr	r3, [pc, #128]	; (6ba0 <bt_le_sync+0x580>)
    6b1e:	2200      	movs	r2, #0
    6b20:	601a      	str	r2, [r3, #0]
    6b22:	e002      	b.n	6b2a <bt_le_sync+0x50a>
			} else {
				cc2400_strobe(SRX);
    6b24:	2062      	movs	r0, #98	; 0x62
    6b26:	f002 fe43 	bl	97b0 <cc2400_strobe>
			}
		}

		rx_tc = 0;
    6b2a:	4b1f      	ldr	r3, [pc, #124]	; (6ba8 <bt_le_sync+0x588>)
    6b2c:	2200      	movs	r2, #0
    6b2e:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6b30:	4b1e      	ldr	r3, [pc, #120]	; (6bac <bt_le_sync+0x58c>)
    6b32:	2200      	movs	r2, #0
    6b34:	601a      	str	r2, [r3, #0]
	dma_init_le();
	dio_ssp_start();

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address

	while (requested_mode == active_mode) {
    6b36:	4b17      	ldr	r3, [pc, #92]	; (6b94 <bt_le_sync+0x574>)
    6b38:	781b      	ldrb	r3, [r3, #0]
    6b3a:	b2db      	uxtb	r3, r3
    6b3c:	79fa      	ldrb	r2, [r7, #7]
    6b3e:	429a      	cmp	r2, r3
    6b40:	f43f ad95 	beq.w	666e <bt_le_sync+0x4e>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6b44:	4b1a      	ldr	r3, [pc, #104]	; (6bb0 <bt_le_sync+0x590>)
    6b46:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6b4a:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    6b4c:	f7fe ff54 	bl	59f8 <cc2400_idle>
	dio_ssp_stop();
    6b50:	f7fe feee 	bl	5930 <dio_ssp_stop>
	cs_trigger_disable();
    6b54:	f7fd fdf0 	bl	4738 <cs_trigger_disable>
}
    6b58:	3774      	adds	r7, #116	; 0x74
    6b5a:	46bd      	mov	sp, r7
    6b5c:	bd90      	pop	{r4, r7, pc}
    6b5e:	bf00      	nop
    6b60:	10001068 	.word	0x10001068
    6b64:	10000458 	.word	0x10000458
    6b68:	2009c038 	.word	0x2009c038
    6b6c:	100009ac 	.word	0x100009ac
    6b70:	10000984 	.word	0x10000984
    6b74:	40004008 	.word	0x40004008
    6b78:	40030024 	.word	0x40030024
    6b7c:	40030008 	.word	0x40030008
    6b80:	4003000c 	.word	0x4003000c
    6b84:	02faf080 	.word	0x02faf080
    6b88:	100009a4 	.word	0x100009a4
    6b8c:	2009c03c 	.word	0x2009c03c
    6b90:	10000a50 	.word	0x10000a50
    6b94:	10000a4f 	.word	0x10000a4f
    6b98:	10000a56 	.word	0x10000a56
    6b9c:	1000049c 	.word	0x1000049c
    6ba0:	10000a60 	.word	0x10000a60
    6ba4:	10000993 	.word	0x10000993
    6ba8:	10000b10 	.word	0x10000b10
    6bac:	1000109c 	.word	0x1000109c
    6bb0:	e000e180 	.word	0xe000e180

00006bb4 <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    6bb4:	b580      	push	{r7, lr}
    6bb6:	b08c      	sub	sp, #48	; 0x30
    6bb8:	af00      	add	r7, sp, #0
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    6bba:	4b6e      	ldr	r3, [pc, #440]	; (6d74 <cb_follow_le+0x1c0>)
    6bbc:	881b      	ldrh	r3, [r3, #0]
    6bbe:	b29b      	uxth	r3, r3
    6bc0:	b2db      	uxtb	r3, r3
    6bc2:	3b62      	subs	r3, #98	; 0x62
    6bc4:	b2db      	uxtb	r3, r3
    6bc6:	4618      	mov	r0, r3
    6bc8:	f001 fa28 	bl	801c <btle_channel_index>
    6bcc:	4603      	mov	r3, r0
    6bce:	461a      	mov	r2, r3
    6bd0:	4b69      	ldr	r3, [pc, #420]	; (6d78 <cb_follow_le+0x1c4>)
    6bd2:	5c9b      	ldrb	r3, [r3, r2]
    6bd4:	623b      	str	r3, [r7, #32]

	u32 access_address = 0;
    6bd6:	2300      	movs	r3, #0
    6bd8:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < 31; ++i) {
    6bda:	2300      	movs	r3, #0
    6bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    6bde:	e00e      	b.n	6bfe <cb_follow_le+0x4a>
		access_address >>= 1;
    6be0:	69fb      	ldr	r3, [r7, #28]
    6be2:	085b      	lsrs	r3, r3, #1
    6be4:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    6be6:	4a65      	ldr	r2, [pc, #404]	; (6d7c <cb_follow_le+0x1c8>)
    6be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6bea:	4413      	add	r3, r2
    6bec:	781b      	ldrb	r3, [r3, #0]
    6bee:	07db      	lsls	r3, r3, #31
    6bf0:	461a      	mov	r2, r3
    6bf2:	69fb      	ldr	r3, [r7, #28]
    6bf4:	4313      	orrs	r3, r2
    6bf6:	61fb      	str	r3, [r7, #28]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    6bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6bfa:	3301      	adds	r3, #1
    6bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    6bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c00:	2b1e      	cmp	r3, #30
    6c02:	dded      	ble.n	6be0 <cb_follow_le+0x2c>
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    6c04:	231f      	movs	r3, #31
    6c06:	62fb      	str	r3, [r7, #44]	; 0x2c
    6c08:	e0aa      	b.n	6d60 <cb_follow_le+0x1ac>
		access_address >>= 1;
    6c0a:	69fb      	ldr	r3, [r7, #28]
    6c0c:	085b      	lsrs	r3, r3, #1
    6c0e:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    6c10:	4a5a      	ldr	r2, [pc, #360]	; (6d7c <cb_follow_le+0x1c8>)
    6c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c14:	4413      	add	r3, r2
    6c16:	781b      	ldrb	r3, [r3, #0]
    6c18:	07db      	lsls	r3, r3, #31
    6c1a:	461a      	mov	r2, r3
    6c1c:	69fb      	ldr	r3, [r7, #28]
    6c1e:	4313      	orrs	r3, r2
    6c20:	61fb      	str	r3, [r7, #28]
		if (access_address == le.access_address) {
    6c22:	4b57      	ldr	r3, [pc, #348]	; (6d80 <cb_follow_le+0x1cc>)
    6c24:	681a      	ldr	r2, [r3, #0]
    6c26:	69fb      	ldr	r3, [r7, #28]
    6c28:	429a      	cmp	r2, r3
    6c2a:	f040 8096 	bne.w	6d5a <cb_follow_le+0x1a6>
			for (j = 0; j < 46; ++j) {
    6c2e:	2300      	movs	r3, #0
    6c30:	62bb      	str	r3, [r7, #40]	; 0x28
    6c32:	e048      	b.n	6cc6 <cb_follow_le+0x112>
				u8 byte = 0;
    6c34:	2300      	movs	r3, #0
    6c36:	76fb      	strb	r3, [r7, #27]
				for (k = 0; k < 8; k++) {
    6c38:	2300      	movs	r3, #0
    6c3a:	627b      	str	r3, [r7, #36]	; 0x24
    6c3c:	e037      	b.n	6cae <cb_follow_le+0xfa>
					int offset = k + (j * 8) + i - 31;
    6c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6c40:	00da      	lsls	r2, r3, #3
    6c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c44:	441a      	add	r2, r3
    6c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6c48:	4413      	add	r3, r2
    6c4a:	3b1f      	subs	r3, #31
    6c4c:	613b      	str	r3, [r7, #16]
					if (offset >= DMA_SIZE*8*2) break;
    6c4e:	693b      	ldr	r3, [r7, #16]
    6c50:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    6c54:	db00      	blt.n	6c58 <cb_follow_le+0xa4>
    6c56:	e02d      	b.n	6cb4 <cb_follow_le+0x100>
					int bit = unpacked[offset];
    6c58:	4a48      	ldr	r2, [pc, #288]	; (6d7c <cb_follow_le+0x1c8>)
    6c5a:	693b      	ldr	r3, [r7, #16]
    6c5c:	4413      	add	r3, r2
    6c5e:	781b      	ldrb	r3, [r3, #0]
    6c60:	617b      	str	r3, [r7, #20]
					if (j >= 4) { // unwhiten data bytes
    6c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6c64:	2b03      	cmp	r3, #3
    6c66:	dd16      	ble.n	6c96 <cb_follow_le+0xe2>
						bit ^= whitening[idx];
    6c68:	4a46      	ldr	r2, [pc, #280]	; (6d84 <cb_follow_le+0x1d0>)
    6c6a:	6a3b      	ldr	r3, [r7, #32]
    6c6c:	4413      	add	r3, r2
    6c6e:	781b      	ldrb	r3, [r3, #0]
    6c70:	461a      	mov	r2, r3
    6c72:	697b      	ldr	r3, [r7, #20]
    6c74:	4053      	eors	r3, r2
    6c76:	617b      	str	r3, [r7, #20]
						idx = (idx + 1) % sizeof(whitening);
    6c78:	6a3b      	ldr	r3, [r7, #32]
    6c7a:	3301      	adds	r3, #1
    6c7c:	4619      	mov	r1, r3
    6c7e:	4b42      	ldr	r3, [pc, #264]	; (6d88 <cb_follow_le+0x1d4>)
    6c80:	fba1 2303 	umull	r2, r3, r1, r3
    6c84:	1ac8      	subs	r0, r1, r3
    6c86:	0840      	lsrs	r0, r0, #1
    6c88:	4403      	add	r3, r0
    6c8a:	099a      	lsrs	r2, r3, #6
    6c8c:	4613      	mov	r3, r2
    6c8e:	01db      	lsls	r3, r3, #7
    6c90:	1a9b      	subs	r3, r3, r2
    6c92:	1aca      	subs	r2, r1, r3
    6c94:	623a      	str	r2, [r7, #32]
					}
					byte |= bit << k;
    6c96:	697a      	ldr	r2, [r7, #20]
    6c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6c9a:	fa02 f303 	lsl.w	r3, r2, r3
    6c9e:	b2da      	uxtb	r2, r3
    6ca0:	7efb      	ldrb	r3, [r7, #27]
    6ca2:	4313      	orrs	r3, r2
    6ca4:	b2db      	uxtb	r3, r3
    6ca6:	76fb      	strb	r3, [r7, #27]
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    6ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6caa:	3301      	adds	r3, #1
    6cac:	627b      	str	r3, [r7, #36]	; 0x24
    6cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6cb0:	2b07      	cmp	r3, #7
    6cb2:	ddc4      	ble.n	6c3e <cb_follow_le+0x8a>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    6cb4:	4b35      	ldr	r3, [pc, #212]	; (6d8c <cb_follow_le+0x1d8>)
    6cb6:	681a      	ldr	r2, [r3, #0]
    6cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6cba:	4413      	add	r3, r2
    6cbc:	7efa      	ldrb	r2, [r7, #27]
    6cbe:	701a      	strb	r2, [r3, #0]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    6cc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6cc2:	3301      	adds	r3, #1
    6cc4:	62bb      	str	r3, [r7, #40]	; 0x28
    6cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6cc8:	2b2d      	cmp	r3, #45	; 0x2d
    6cca:	ddb3      	ble.n	6c34 <cb_follow_le+0x80>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    6ccc:	4b2c      	ldr	r3, [pc, #176]	; (6d80 <cb_follow_le+0x1cc>)
    6cce:	691b      	ldr	r3, [r3, #16]
    6cd0:	2b00      	cmp	r3, #0
    6cd2:	d032      	beq.n	6d3a <cb_follow_le+0x186>
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    6cd4:	4b2d      	ldr	r3, [pc, #180]	; (6d8c <cb_follow_le+0x1d8>)
    6cd6:	681b      	ldr	r3, [r3, #0]
    6cd8:	3305      	adds	r3, #5
    6cda:	781b      	ldrb	r3, [r3, #0]
    6cdc:	b2db      	uxtb	r3, r3
    6cde:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6ce2:	3302      	adds	r3, #2
    6ce4:	60fb      	str	r3, [r7, #12]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
    6ce6:	4b26      	ldr	r3, [pc, #152]	; (6d80 <cb_follow_le+0x1cc>)
    6ce8:	68da      	ldr	r2, [r3, #12]
    6cea:	4b28      	ldr	r3, [pc, #160]	; (6d8c <cb_follow_le+0x1d8>)
    6cec:	681b      	ldr	r3, [r3, #0]
    6cee:	3304      	adds	r3, #4
    6cf0:	4610      	mov	r0, r2
    6cf2:	4619      	mov	r1, r3
    6cf4:	68fa      	ldr	r2, [r7, #12]
    6cf6:	f001 fa63 	bl	81c0 <btle_crcgen_lut>
    6cfa:	60b8      	str	r0, [r7, #8]
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    6cfc:	4b23      	ldr	r3, [pc, #140]	; (6d8c <cb_follow_le+0x1d8>)
    6cfe:	681a      	ldr	r2, [r3, #0]
    6d00:	68fb      	ldr	r3, [r7, #12]
    6d02:	3306      	adds	r3, #6
    6d04:	4413      	add	r3, r2
    6d06:	781b      	ldrb	r3, [r3, #0]
    6d08:	b2db      	uxtb	r3, r3
    6d0a:	041a      	lsls	r2, r3, #16
							 | (idle_rxbuf[4+len+1] << 8)
    6d0c:	4b1f      	ldr	r3, [pc, #124]	; (6d8c <cb_follow_le+0x1d8>)
    6d0e:	6819      	ldr	r1, [r3, #0]
    6d10:	68fb      	ldr	r3, [r7, #12]
    6d12:	3305      	adds	r3, #5
    6d14:	440b      	add	r3, r1
    6d16:	781b      	ldrb	r3, [r3, #0]
    6d18:	b2db      	uxtb	r3, r3
    6d1a:	021b      	lsls	r3, r3, #8
    6d1c:	4313      	orrs	r3, r2
							 |  idle_rxbuf[4+len+0];
    6d1e:	4a1b      	ldr	r2, [pc, #108]	; (6d8c <cb_follow_le+0x1d8>)
    6d20:	6812      	ldr	r2, [r2, #0]
    6d22:	68f9      	ldr	r1, [r7, #12]
    6d24:	3104      	adds	r1, #4
    6d26:	440a      	add	r2, r1
    6d28:	7812      	ldrb	r2, [r2, #0]
    6d2a:	b2d2      	uxtb	r2, r2
    6d2c:	4313      	orrs	r3, r2

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, (uint8_t*)idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    6d2e:	607b      	str	r3, [r7, #4]
							 | (idle_rxbuf[4+len+1] << 8)
							 |  idle_rxbuf[4+len+0];
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    6d30:	68ba      	ldr	r2, [r7, #8]
    6d32:	687b      	ldr	r3, [r7, #4]
    6d34:	429a      	cmp	r2, r3
    6d36:	d000      	beq.n	6d3a <cb_follow_le+0x186>
					break;
    6d38:	e017      	b.n	6d6a <cb_follow_le+0x1b6>
			}

			// send to PC
			enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    6d3a:	4b14      	ldr	r3, [pc, #80]	; (6d8c <cb_follow_le+0x1d8>)
    6d3c:	681b      	ldr	r3, [r3, #0]
    6d3e:	2001      	movs	r0, #1
    6d40:	4619      	mov	r1, r3
    6d42:	f7fd fbc1 	bl	44c8 <enqueue>
			RXLED_SET;
    6d46:	4b12      	ldr	r3, [pc, #72]	; (6d90 <cb_follow_le+0x1dc>)
    6d48:	2210      	movs	r2, #16
    6d4a:	601a      	str	r2, [r3, #0]

			packet_cb((uint8_t*)idle_rxbuf);
    6d4c:	4b11      	ldr	r3, [pc, #68]	; (6d94 <cb_follow_le+0x1e0>)
    6d4e:	681b      	ldr	r3, [r3, #0]
    6d50:	4a0e      	ldr	r2, [pc, #56]	; (6d8c <cb_follow_le+0x1d8>)
    6d52:	6812      	ldr	r2, [r2, #0]
    6d54:	4610      	mov	r0, r2
    6d56:	4798      	blx	r3

			break;
    6d58:	e007      	b.n	6d6a <cb_follow_le+0x1b6>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    6d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6d5c:	3301      	adds	r3, #1
    6d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6d62:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    6d66:	f6ff af50 	blt.w	6c0a <cb_follow_le+0x56>

			break;
		}
	}

	return 1;
    6d6a:	2301      	movs	r3, #1
}
    6d6c:	4618      	mov	r0, r3
    6d6e:	3730      	adds	r7, #48	; 0x30
    6d70:	46bd      	mov	sp, r7
    6d72:	bd80      	pop	{r7, pc}
    6d74:	1000049c 	.word	0x1000049c
    6d78:	0000abfc 	.word	0x0000abfc
    6d7c:	10000cf8 	.word	0x10000cf8
    6d80:	10000458 	.word	0x10000458
    6d84:	0000ab7c 	.word	0x0000ab7c
    6d88:	02040811 	.word	0x02040811
    6d8c:	10000454 	.word	0x10000454
    6d90:	2009c038 	.word	0x2009c038
    6d94:	100009ac 	.word	0x100009ac

00006d98 <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    6d98:	b580      	push	{r7, lr}
    6d9a:	b08a      	sub	sp, #40	; 0x28
    6d9c:	af00      	add	r7, sp, #0
    6d9e:	6078      	str	r0, [r7, #4]
	int i;
	u32 aa = 0;
    6da0:	2300      	movs	r3, #0
    6da2:	623b      	str	r3, [r7, #32]
#define ADV_ADDRESS_IDX 0
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
    6da4:	687b      	ldr	r3, [r7, #4]
    6da6:	61fb      	str	r3, [r7, #28]
	u8 header = packet[HEADER_IDX];
    6da8:	687b      	ldr	r3, [r7, #4]
    6daa:	791b      	ldrb	r3, [r3, #4]
    6dac:	76fb      	strb	r3, [r7, #27]
	u8 *data_len = &packet[DATA_LEN_IDX];
    6dae:	687b      	ldr	r3, [r7, #4]
    6db0:	3305      	adds	r3, #5
    6db2:	617b      	str	r3, [r7, #20]
	u8 *data = &packet[DATA_START_IDX];
    6db4:	687b      	ldr	r3, [r7, #4]
    6db6:	3306      	adds	r3, #6
    6db8:	613b      	str	r3, [r7, #16]
	u8 *crc = &packet[DATA_START_IDX + *data_len];
    6dba:	697b      	ldr	r3, [r7, #20]
    6dbc:	781b      	ldrb	r3, [r3, #0]
    6dbe:	3306      	adds	r3, #6
    6dc0:	461a      	mov	r2, r3
    6dc2:	687b      	ldr	r3, [r7, #4]
    6dc4:	4413      	add	r3, r2
    6dc6:	60fb      	str	r3, [r7, #12]

	if (le.link_state == LINK_CONN_PENDING) {
    6dc8:	4b8b      	ldr	r3, [pc, #556]	; (6ff8 <connection_follow_cb+0x260>)
    6dca:	7d1b      	ldrb	r3, [r3, #20]
    6dcc:	2b02      	cmp	r3, #2
    6dce:	d11c      	bne.n	6e0a <connection_follow_cb+0x72>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    6dd0:	4b89      	ldr	r3, [pc, #548]	; (6ff8 <connection_follow_cb+0x260>)
    6dd2:	2203      	movs	r2, #3
    6dd4:	751a      	strb	r2, [r3, #20]
		le.conn_epoch = clkn;
    6dd6:	4b89      	ldr	r3, [pc, #548]	; (6ffc <connection_follow_cb+0x264>)
    6dd8:	681b      	ldr	r3, [r3, #0]
    6dda:	4a87      	ldr	r2, [pc, #540]	; (6ff8 <connection_follow_cb+0x260>)
    6ddc:	6193      	str	r3, [r2, #24]
		le.interval_timer = le.conn_interval - 1;
    6dde:	4b86      	ldr	r3, [pc, #536]	; (6ff8 <connection_follow_cb+0x260>)
    6de0:	8bdb      	ldrh	r3, [r3, #30]
    6de2:	3b01      	subs	r3, #1
    6de4:	b29a      	uxth	r2, r3
    6de6:	4b84      	ldr	r3, [pc, #528]	; (6ff8 <connection_follow_cb+0x260>)
    6de8:	839a      	strh	r2, [r3, #28]
		le.conn_count = 0;
    6dea:	4b83      	ldr	r3, [pc, #524]	; (6ff8 <connection_follow_cb+0x260>)
    6dec:	2200      	movs	r2, #0
    6dee:	841a      	strh	r2, [r3, #32]
		le.update_pending = 0;
    6df0:	4b81      	ldr	r3, [pc, #516]	; (6ff8 <connection_follow_cb+0x260>)
    6df2:	2200      	movs	r2, #0
    6df4:	629a      	str	r2, [r3, #40]	; 0x28

		// hue hue hue
		if (jam_mode != JAM_NONE)
    6df6:	4b82      	ldr	r3, [pc, #520]	; (7000 <connection_follow_cb+0x268>)
    6df8:	781b      	ldrb	r3, [r3, #0]
    6dfa:	b2db      	uxtb	r3, r3
    6dfc:	2b00      	cmp	r3, #0
    6dfe:	f000 80f7 	beq.w	6ff0 <connection_follow_cb+0x258>
			le_jam_count = JAM_COUNT_DEFAULT;
    6e02:	4b80      	ldr	r3, [pc, #512]	; (7004 <connection_follow_cb+0x26c>)
    6e04:	2228      	movs	r2, #40	; 0x28
    6e06:	601a      	str	r2, [r3, #0]
    6e08:	e0f2      	b.n	6ff0 <connection_follow_cb+0x258>

	} else if (le.link_state == LINK_CONNECTED) {
    6e0a:	4b7b      	ldr	r3, [pc, #492]	; (6ff8 <connection_follow_cb+0x260>)
    6e0c:	7d1b      	ldrb	r3, [r3, #20]
    6e0e:	2b03      	cmp	r3, #3
    6e10:	d16f      	bne.n	6ef2 <connection_follow_cb+0x15a>
		u8 llid =  header & 0x03;
    6e12:	7efb      	ldrb	r3, [r7, #27]
    6e14:	f003 0303 	and.w	r3, r3, #3
    6e18:	72fb      	strb	r3, [r7, #11]

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    6e1a:	4b77      	ldr	r3, [pc, #476]	; (6ff8 <connection_follow_cb+0x260>)
    6e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6e1e:	2b00      	cmp	r3, #0
    6e20:	d021      	beq.n	6e66 <connection_follow_cb+0xce>
    6e22:	4b75      	ldr	r3, [pc, #468]	; (6ff8 <connection_follow_cb+0x260>)
    6e24:	8c1b      	ldrh	r3, [r3, #32]
    6e26:	b29a      	uxth	r2, r3
    6e28:	4b73      	ldr	r3, [pc, #460]	; (6ff8 <connection_follow_cb+0x260>)
    6e2a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6e2c:	429a      	cmp	r2, r3
    6e2e:	d11a      	bne.n	6e66 <connection_follow_cb+0xce>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    6e30:	4b72      	ldr	r3, [pc, #456]	; (6ffc <connection_follow_cb+0x264>)
    6e32:	681b      	ldr	r3, [r3, #0]
    6e34:	4a70      	ldr	r2, [pc, #448]	; (6ff8 <connection_follow_cb+0x260>)
    6e36:	6193      	str	r3, [r2, #24]
			le.conn_interval = le.interval_update;
    6e38:	4b6f      	ldr	r3, [pc, #444]	; (6ff8 <connection_follow_cb+0x260>)
    6e3a:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    6e3c:	4b6e      	ldr	r3, [pc, #440]	; (6ff8 <connection_follow_cb+0x260>)
    6e3e:	83da      	strh	r2, [r3, #30]
			le.interval_timer = le.interval_update - 1;
    6e40:	4b6d      	ldr	r3, [pc, #436]	; (6ff8 <connection_follow_cb+0x260>)
    6e42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6e44:	3b01      	subs	r3, #1
    6e46:	b29a      	uxth	r2, r3
    6e48:	4b6b      	ldr	r3, [pc, #428]	; (6ff8 <connection_follow_cb+0x260>)
    6e4a:	839a      	strh	r2, [r3, #28]
			le.win_size = le.win_size_update;
    6e4c:	4b6a      	ldr	r3, [pc, #424]	; (6ff8 <connection_follow_cb+0x260>)
    6e4e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    6e52:	4b69      	ldr	r3, [pc, #420]	; (6ff8 <connection_follow_cb+0x260>)
    6e54:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			le.win_offset = le.win_offset_update;
    6e58:	4b67      	ldr	r3, [pc, #412]	; (6ff8 <connection_follow_cb+0x260>)
    6e5a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    6e5c:	4b66      	ldr	r3, [pc, #408]	; (6ff8 <connection_follow_cb+0x260>)
    6e5e:	849a      	strh	r2, [r3, #36]	; 0x24
			le.update_pending = 0;
    6e60:	4b65      	ldr	r3, [pc, #404]	; (6ff8 <connection_follow_cb+0x260>)
    6e62:	2200      	movs	r2, #0
    6e64:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if (llid == 0x03 && data[0] == 0x00) {
    6e66:	7afb      	ldrb	r3, [r7, #11]
    6e68:	2b03      	cmp	r3, #3
    6e6a:	d141      	bne.n	6ef0 <connection_follow_cb+0x158>
    6e6c:	693b      	ldr	r3, [r7, #16]
    6e6e:	781b      	ldrb	r3, [r3, #0]
    6e70:	2b00      	cmp	r3, #0
    6e72:	d13d      	bne.n	6ef0 <connection_follow_cb+0x158>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    6e74:	687b      	ldr	r3, [r7, #4]
    6e76:	79da      	ldrb	r2, [r3, #7]
    6e78:	4b5f      	ldr	r3, [pc, #380]	; (6ff8 <connection_follow_cb+0x260>)
    6e7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    6e7e:	687b      	ldr	r3, [r7, #4]
    6e80:	3308      	adds	r3, #8
    6e82:	781b      	ldrb	r3, [r3, #0]
    6e84:	b29a      	uxth	r2, r3
    6e86:	687b      	ldr	r3, [r7, #4]
    6e88:	3309      	adds	r3, #9
    6e8a:	781b      	ldrb	r3, [r3, #0]
    6e8c:	b29b      	uxth	r3, r3
    6e8e:	021b      	lsls	r3, r3, #8
    6e90:	b29b      	uxth	r3, r3
    6e92:	4413      	add	r3, r2
    6e94:	b29a      	uxth	r2, r3
    6e96:	4b58      	ldr	r3, [pc, #352]	; (6ff8 <connection_follow_cb+0x260>)
    6e98:	865a      	strh	r2, [r3, #50]	; 0x32
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    6e9a:	687b      	ldr	r3, [r7, #4]
    6e9c:	330a      	adds	r3, #10
    6e9e:	781b      	ldrb	r3, [r3, #0]
    6ea0:	b29a      	uxth	r2, r3
    6ea2:	687b      	ldr	r3, [r7, #4]
    6ea4:	330b      	adds	r3, #11
    6ea6:	781b      	ldrb	r3, [r3, #0]
    6ea8:	b29b      	uxth	r3, r3
    6eaa:	021b      	lsls	r3, r3, #8
    6eac:	b29b      	uxth	r3, r3
    6eae:	4413      	add	r3, r2
    6eb0:	b29a      	uxth	r2, r3
    6eb2:	4b51      	ldr	r3, [pc, #324]	; (6ff8 <connection_follow_cb+0x260>)
    6eb4:	85da      	strh	r2, [r3, #46]	; 0x2e
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    6eb6:	687b      	ldr	r3, [r7, #4]
    6eb8:	3310      	adds	r3, #16
    6eba:	781b      	ldrb	r3, [r3, #0]
    6ebc:	b29a      	uxth	r2, r3
    6ebe:	687b      	ldr	r3, [r7, #4]
    6ec0:	3311      	adds	r3, #17
    6ec2:	781b      	ldrb	r3, [r3, #0]
    6ec4:	b29b      	uxth	r3, r3
    6ec6:	021b      	lsls	r3, r3, #8
    6ec8:	b29b      	uxth	r3, r3
    6eca:	4413      	add	r3, r2
    6ecc:	b29a      	uxth	r2, r3
    6ece:	4b4a      	ldr	r3, [pc, #296]	; (6ff8 <connection_follow_cb+0x260>)
    6ed0:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (le.update_instant - le.conn_count < 32767)
    6ed2:	4b49      	ldr	r3, [pc, #292]	; (6ff8 <connection_follow_cb+0x260>)
    6ed4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6ed6:	461a      	mov	r2, r3
    6ed8:	4b47      	ldr	r3, [pc, #284]	; (6ff8 <connection_follow_cb+0x260>)
    6eda:	8c1b      	ldrh	r3, [r3, #32]
    6edc:	b29b      	uxth	r3, r3
    6ede:	1ad3      	subs	r3, r2, r3
    6ee0:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    6ee4:	4293      	cmp	r3, r2
    6ee6:	dc03      	bgt.n	6ef0 <connection_follow_cb+0x158>
				le.update_pending = 1;
    6ee8:	4b43      	ldr	r3, [pc, #268]	; (6ff8 <connection_follow_cb+0x260>)
    6eea:	2201      	movs	r2, #1
    6eec:	629a      	str	r2, [r3, #40]	; 0x28
    6eee:	e07f      	b.n	6ff0 <connection_follow_cb+0x258>
    6ef0:	e07e      	b.n	6ff0 <connection_follow_cb+0x258>
		}

	} else if (le.link_state == LINK_LISTENING) {
    6ef2:	4b41      	ldr	r3, [pc, #260]	; (6ff8 <connection_follow_cb+0x260>)
    6ef4:	7d1b      	ldrb	r3, [r3, #20]
    6ef6:	2b01      	cmp	r3, #1
    6ef8:	d17a      	bne.n	6ff0 <connection_follow_cb+0x258>
		u8 pkt_type = packet[4] & 0x0F;
    6efa:	687b      	ldr	r3, [r7, #4]
    6efc:	3304      	adds	r3, #4
    6efe:	781b      	ldrb	r3, [r3, #0]
    6f00:	f003 030f 	and.w	r3, r3, #15
    6f04:	72bb      	strb	r3, [r7, #10]
		if (pkt_type == 0x05) {
    6f06:	7abb      	ldrb	r3, [r7, #10]
    6f08:	2b05      	cmp	r3, #5
    6f0a:	d171      	bne.n	6ff0 <connection_follow_cb+0x258>
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    6f0c:	4b3a      	ldr	r3, [pc, #232]	; (6ff8 <connection_follow_cb+0x260>)
    6f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    6f10:	2b00      	cmp	r3, #0
    6f12:	d014      	beq.n	6f3e <connection_follow_cb+0x1a6>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    6f14:	687b      	ldr	r3, [r7, #4]
    6f16:	3306      	adds	r3, #6
    6f18:	483b      	ldr	r0, [pc, #236]	; (7008 <connection_follow_cb+0x270>)
    6f1a:	4619      	mov	r1, r3
    6f1c:	2206      	movs	r2, #6
    6f1e:	f003 fd3d 	bl	a99c <memcmp>
    6f22:	4603      	mov	r3, r0
	} else if (le.link_state == LINK_LISTENING) {
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    6f24:	2b00      	cmp	r3, #0
    6f26:	d00a      	beq.n	6f3e <connection_follow_cb+0x1a6>
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    6f28:	687b      	ldr	r3, [r7, #4]
    6f2a:	330c      	adds	r3, #12
    6f2c:	4836      	ldr	r0, [pc, #216]	; (7008 <connection_follow_cb+0x270>)
    6f2e:	4619      	mov	r1, r3
    6f30:	2206      	movs	r2, #6
    6f32:	f003 fd33 	bl	a99c <memcmp>
    6f36:	4603      	mov	r3, r0
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
				memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    6f38:	2b00      	cmp	r3, #0
    6f3a:	d000      	beq.n	6f3e <connection_follow_cb+0x1a6>
				memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
    6f3c:	e058      	b.n	6ff0 <connection_follow_cb+0x258>
			}

			le.link_state = LINK_CONN_PENDING;
    6f3e:	4b2e      	ldr	r3, [pc, #184]	; (6ff8 <connection_follow_cb+0x260>)
    6f40:	2202      	movs	r2, #2
    6f42:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    6f44:	4b2c      	ldr	r3, [pc, #176]	; (6ff8 <connection_follow_cb+0x260>)
    6f46:	2200      	movs	r2, #0
    6f48:	611a      	str	r2, [r3, #16]

			for (i = 0; i < 4; ++i)
    6f4a:	2300      	movs	r3, #0
    6f4c:	627b      	str	r3, [r7, #36]	; 0x24
    6f4e:	e011      	b.n	6f74 <connection_follow_cb+0x1dc>
				aa |= packet[18+i] << (i*8);
    6f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f52:	3312      	adds	r3, #18
    6f54:	461a      	mov	r2, r3
    6f56:	687b      	ldr	r3, [r7, #4]
    6f58:	4413      	add	r3, r2
    6f5a:	781b      	ldrb	r3, [r3, #0]
    6f5c:	461a      	mov	r2, r3
    6f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f60:	00db      	lsls	r3, r3, #3
    6f62:	fa02 f303 	lsl.w	r3, r2, r3
    6f66:	461a      	mov	r2, r3
    6f68:	6a3b      	ldr	r3, [r7, #32]
    6f6a:	4313      	orrs	r3, r2
    6f6c:	623b      	str	r3, [r7, #32]
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    6f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f70:	3301      	adds	r3, #1
    6f72:	627b      	str	r3, [r7, #36]	; 0x24
    6f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6f76:	2b03      	cmp	r3, #3
    6f78:	ddea      	ble.n	6f50 <connection_follow_cb+0x1b8>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    6f7a:	6a38      	ldr	r0, [r7, #32]
    6f7c:	f7ff f980 	bl	6280 <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    6f80:	687b      	ldr	r3, [r7, #4]
    6f82:	3318      	adds	r3, #24
    6f84:	781b      	ldrb	r3, [r3, #0]
    6f86:	041a      	lsls	r2, r3, #16
						| (packet[CRC_INIT+1] << 8)
    6f88:	687b      	ldr	r3, [r7, #4]
    6f8a:	3317      	adds	r3, #23
    6f8c:	781b      	ldrb	r3, [r3, #0]
    6f8e:	021b      	lsls	r3, r3, #8
    6f90:	4313      	orrs	r3, r2
						|  packet[CRC_INIT+0];
    6f92:	687a      	ldr	r2, [r7, #4]
    6f94:	3216      	adds	r2, #22
    6f96:	7812      	ldrb	r2, [r2, #0]
    6f98:	4313      	orrs	r3, r2
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    6f9a:	461a      	mov	r2, r3
    6f9c:	4b16      	ldr	r3, [pc, #88]	; (6ff8 <connection_follow_cb+0x260>)
    6f9e:	609a      	str	r2, [r3, #8]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    6fa0:	4b15      	ldr	r3, [pc, #84]	; (6ff8 <connection_follow_cb+0x260>)
    6fa2:	689b      	ldr	r3, [r3, #8]
    6fa4:	4618      	mov	r0, r3
    6fa6:	f002 f96f 	bl	9288 <rbit>
    6faa:	4602      	mov	r2, r0
    6fac:	4b12      	ldr	r3, [pc, #72]	; (6ff8 <connection_follow_cb+0x260>)
    6fae:	60da      	str	r2, [r3, #12]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    6fb0:	687b      	ldr	r3, [r7, #4]
    6fb2:	7e5a      	ldrb	r2, [r3, #25]
    6fb4:	4b10      	ldr	r3, [pc, #64]	; (6ff8 <connection_follow_cb+0x260>)
    6fb6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    6fba:	687b      	ldr	r3, [r7, #4]
    6fbc:	331a      	adds	r3, #26
    6fbe:	781b      	ldrb	r3, [r3, #0]
    6fc0:	b29a      	uxth	r2, r3
    6fc2:	4b0d      	ldr	r3, [pc, #52]	; (6ff8 <connection_follow_cb+0x260>)
    6fc4:	849a      	strh	r2, [r3, #36]	; 0x24

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = packet[CONN_INTERVAL];
    6fc6:	687b      	ldr	r3, [r7, #4]
    6fc8:	331c      	adds	r3, #28
    6fca:	781b      	ldrb	r3, [r3, #0]
    6fcc:	b29a      	uxth	r2, r3
    6fce:	4b0a      	ldr	r3, [pc, #40]	; (6ff8 <connection_follow_cb+0x260>)
    6fd0:	83da      	strh	r2, [r3, #30]

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    6fd2:	687b      	ldr	r3, [r7, #4]
    6fd4:	3327      	adds	r3, #39	; 0x27
    6fd6:	781b      	ldrb	r3, [r3, #0]
    6fd8:	f003 031f 	and.w	r3, r3, #31
    6fdc:	b2da      	uxtb	r2, r3
    6fde:	4b06      	ldr	r3, [pc, #24]	; (6ff8 <connection_follow_cb+0x260>)
    6fe0:	759a      	strb	r2, [r3, #22]
			le.channel_idx = le.channel_increment;
    6fe2:	4b05      	ldr	r3, [pc, #20]	; (6ff8 <connection_follow_cb+0x260>)
    6fe4:	7d9a      	ldrb	r2, [r3, #22]
    6fe6:	4b04      	ldr	r3, [pc, #16]	; (6ff8 <connection_follow_cb+0x260>)
    6fe8:	755a      	strb	r2, [r3, #21]

			// Hop to the initial channel immediately
			do_hop = 1;
    6fea:	4b08      	ldr	r3, [pc, #32]	; (700c <connection_follow_cb+0x274>)
    6fec:	2201      	movs	r2, #1
    6fee:	701a      	strb	r2, [r3, #0]
		}
	}
}
    6ff0:	3728      	adds	r7, #40	; 0x28
    6ff2:	46bd      	mov	sp, r7
    6ff4:	bd80      	pop	{r7, pc}
    6ff6:	bf00      	nop
    6ff8:	10000458 	.word	0x10000458
    6ffc:	10000984 	.word	0x10000984
    7000:	10000a50 	.word	0x10000a50
    7004:	100009a4 	.word	0x100009a4
    7008:	1000048c 	.word	0x1000048c
    700c:	10000993 	.word	0x10000993

00007010 <bt_follow_le>:

void bt_follow_le() {
    7010:	b580      	push	{r7, lr}
    7012:	af00      	add	r7, sp, #0
	reset_le();
    7014:	f7ff f94e 	bl	62b4 <reset_le>
	packet_cb = connection_follow_cb;
    7018:	4b04      	ldr	r3, [pc, #16]	; (702c <bt_follow_le+0x1c>)
    701a:	4a05      	ldr	r2, [pc, #20]	; (7030 <bt_follow_le+0x20>)
    701c:	601a      	str	r2, [r3, #0]
	bt_le_sync(MODE_BT_FOLLOW_LE);
    701e:	2009      	movs	r0, #9
    7020:	f7ff fafe 	bl	6620 <bt_le_sync>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    7024:	4b03      	ldr	r3, [pc, #12]	; (7034 <bt_follow_le+0x24>)
    7026:	2200      	movs	r2, #0
    7028:	701a      	strb	r2, [r3, #0]
}
    702a:	bd80      	pop	{r7, pc}
    702c:	100009ac 	.word	0x100009ac
    7030:	00006d99 	.word	0x00006d99
    7034:	10000a4e 	.word	0x10000a4e

00007038 <le_promisc_state>:

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    7038:	b580      	push	{r7, lr}
    703a:	b092      	sub	sp, #72	; 0x48
    703c:	af00      	add	r7, sp, #0
    703e:	4603      	mov	r3, r0
    7040:	60b9      	str	r1, [r7, #8]
    7042:	607a      	str	r2, [r7, #4]
    7044:	73fb      	strb	r3, [r7, #15]
	u8 buf[50] = { 0, };
    7046:	f107 0314 	add.w	r3, r7, #20
    704a:	2200      	movs	r2, #0
    704c:	601a      	str	r2, [r3, #0]
    704e:	3304      	adds	r3, #4
    7050:	2200      	movs	r2, #0
    7052:	601a      	str	r2, [r3, #0]
    7054:	3304      	adds	r3, #4
    7056:	2200      	movs	r2, #0
    7058:	601a      	str	r2, [r3, #0]
    705a:	3304      	adds	r3, #4
    705c:	2200      	movs	r2, #0
    705e:	601a      	str	r2, [r3, #0]
    7060:	3304      	adds	r3, #4
    7062:	2200      	movs	r2, #0
    7064:	601a      	str	r2, [r3, #0]
    7066:	3304      	adds	r3, #4
    7068:	2200      	movs	r2, #0
    706a:	601a      	str	r2, [r3, #0]
    706c:	3304      	adds	r3, #4
    706e:	2200      	movs	r2, #0
    7070:	601a      	str	r2, [r3, #0]
    7072:	3304      	adds	r3, #4
    7074:	2200      	movs	r2, #0
    7076:	601a      	str	r2, [r3, #0]
    7078:	3304      	adds	r3, #4
    707a:	2200      	movs	r2, #0
    707c:	601a      	str	r2, [r3, #0]
    707e:	3304      	adds	r3, #4
    7080:	2200      	movs	r2, #0
    7082:	601a      	str	r2, [r3, #0]
    7084:	3304      	adds	r3, #4
    7086:	2200      	movs	r2, #0
    7088:	601a      	str	r2, [r3, #0]
    708a:	3304      	adds	r3, #4
    708c:	2200      	movs	r2, #0
    708e:	601a      	str	r2, [r3, #0]
    7090:	3304      	adds	r3, #4
    7092:	2200      	movs	r2, #0
    7094:	801a      	strh	r2, [r3, #0]
    7096:	3302      	adds	r3, #2
	if (len > 49)
    7098:	687b      	ldr	r3, [r7, #4]
    709a:	2b31      	cmp	r3, #49	; 0x31
    709c:	d901      	bls.n	70a2 <le_promisc_state+0x6a>
		len = 49;
    709e:	2331      	movs	r3, #49	; 0x31
    70a0:	607b      	str	r3, [r7, #4]

	buf[0] = type;
    70a2:	7bfb      	ldrb	r3, [r7, #15]
    70a4:	753b      	strb	r3, [r7, #20]
	memcpy(&buf[1], data, len);
    70a6:	f107 0314 	add.w	r3, r7, #20
    70aa:	3301      	adds	r3, #1
    70ac:	4618      	mov	r0, r3
    70ae:	68b9      	ldr	r1, [r7, #8]
    70b0:	687a      	ldr	r2, [r7, #4]
    70b2:	f003 fca5 	bl	aa00 <memcpy>
	enqueue(LE_PROMISC, (uint8_t*)buf);
    70b6:	f107 0314 	add.w	r3, r7, #20
    70ba:	2005      	movs	r0, #5
    70bc:	4619      	mov	r1, r3
    70be:	f7fd fa03 	bl	44c8 <enqueue>
}
    70c2:	3748      	adds	r7, #72	; 0x48
    70c4:	46bd      	mov	sp, r7
    70c6:	bd80      	pop	{r7, pc}

000070c8 <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    70c8:	b580      	push	{r7, lr}
    70ca:	b084      	sub	sp, #16
    70cc:	af00      	add	r7, sp, #0
    70ce:	6078      	str	r0, [r7, #4]
	static u32 first_ts = 0;
	if (channel == 2404) {
    70d0:	4b55      	ldr	r3, [pc, #340]	; (7228 <promisc_recover_hop_increment+0x160>)
    70d2:	881b      	ldrh	r3, [r3, #0]
    70d4:	b29b      	uxth	r3, r3
    70d6:	f640 1264 	movw	r2, #2404	; 0x964
    70da:	4293      	cmp	r3, r2
    70dc:	d114      	bne.n	7108 <promisc_recover_hop_increment+0x40>
		first_ts = CLK100NS;
    70de:	4b53      	ldr	r3, [pc, #332]	; (722c <promisc_recover_hop_increment+0x164>)
    70e0:	681b      	ldr	r3, [r3, #0]
    70e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    70e6:	f640 4235 	movw	r2, #3125	; 0xc35
    70ea:	fb02 f203 	mul.w	r2, r2, r3
    70ee:	4b50      	ldr	r3, [pc, #320]	; (7230 <promisc_recover_hop_increment+0x168>)
    70f0:	681b      	ldr	r3, [r3, #0]
    70f2:	4413      	add	r3, r2
    70f4:	4a4f      	ldr	r2, [pc, #316]	; (7234 <promisc_recover_hop_increment+0x16c>)
    70f6:	6013      	str	r3, [r2, #0]
		hop_direct_channel = 2406;
    70f8:	4b4f      	ldr	r3, [pc, #316]	; (7238 <promisc_recover_hop_increment+0x170>)
    70fa:	f640 1266 	movw	r2, #2406	; 0x966
    70fe:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    7100:	4b4e      	ldr	r3, [pc, #312]	; (723c <promisc_recover_hop_increment+0x174>)
    7102:	2201      	movs	r2, #1
    7104:	701a      	strb	r2, [r3, #0]
    7106:	e08b      	b.n	7220 <promisc_recover_hop_increment+0x158>
	} else if (channel == 2406) {
    7108:	4b47      	ldr	r3, [pc, #284]	; (7228 <promisc_recover_hop_increment+0x160>)
    710a:	881b      	ldrh	r3, [r3, #0]
    710c:	b29b      	uxth	r3, r3
    710e:	f640 1266 	movw	r2, #2406	; 0x966
    7112:	4293      	cmp	r3, r2
    7114:	d17d      	bne.n	7212 <promisc_recover_hop_increment+0x14a>
		u32 second_ts = CLK100NS;
    7116:	4b45      	ldr	r3, [pc, #276]	; (722c <promisc_recover_hop_increment+0x164>)
    7118:	681b      	ldr	r3, [r3, #0]
    711a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    711e:	f640 4235 	movw	r2, #3125	; 0xc35
    7122:	fb02 f203 	mul.w	r2, r2, r3
    7126:	4b42      	ldr	r3, [pc, #264]	; (7230 <promisc_recover_hop_increment+0x168>)
    7128:	681b      	ldr	r3, [r3, #0]
    712a:	4413      	add	r3, r2
    712c:	60fb      	str	r3, [r7, #12]
		if (second_ts < first_ts)
    712e:	4b41      	ldr	r3, [pc, #260]	; (7234 <promisc_recover_hop_increment+0x16c>)
    7130:	681b      	ldr	r3, [r3, #0]
    7132:	68fa      	ldr	r2, [r7, #12]
    7134:	429a      	cmp	r2, r3
    7136:	d205      	bcs.n	7144 <promisc_recover_hop_increment+0x7c>
			second_ts += 3276800000; // handle rollover
    7138:	68fb      	ldr	r3, [r7, #12]
    713a:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    713e:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    7142:	60fb      	str	r3, [r7, #12]
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    7144:	4b3b      	ldr	r3, [pc, #236]	; (7234 <promisc_recover_hop_increment+0x16c>)
    7146:	681b      	ldr	r3, [r3, #0]
    7148:	68fa      	ldr	r2, [r7, #12]
    714a:	1ad2      	subs	r2, r2, r3
    714c:	4b3c      	ldr	r3, [pc, #240]	; (7240 <promisc_recover_hop_increment+0x178>)
    714e:	8bdb      	ldrh	r3, [r3, #30]
    7150:	4619      	mov	r1, r3
    7152:	f243 03d4 	movw	r3, #12500	; 0x30d4
    7156:	fb03 f301 	mul.w	r3, r3, r1
    715a:	0fd9      	lsrs	r1, r3, #31
    715c:	440b      	add	r3, r1
    715e:	105b      	asrs	r3, r3, #1
    7160:	4413      	add	r3, r2
    7162:	4a37      	ldr	r2, [pc, #220]	; (7240 <promisc_recover_hop_increment+0x178>)
    7164:	8bd2      	ldrh	r2, [r2, #30]
    7166:	4611      	mov	r1, r2
    7168:	f243 02d4 	movw	r2, #12500	; 0x30d4
    716c:	fb02 f201 	mul.w	r2, r2, r1
    7170:	fbb3 f3f2 	udiv	r3, r3, r2
    7174:	60bb      	str	r3, [r7, #8]
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    7176:	68bb      	ldr	r3, [r7, #8]
    7178:	2b24      	cmp	r3, #36	; 0x24
    717a:	d842      	bhi.n	7202 <promisc_recover_hop_increment+0x13a>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    717c:	4a31      	ldr	r2, [pc, #196]	; (7244 <promisc_recover_hop_increment+0x17c>)
    717e:	68bb      	ldr	r3, [r7, #8]
    7180:	4413      	add	r3, r2
    7182:	781a      	ldrb	r2, [r3, #0]
    7184:	4b2e      	ldr	r3, [pc, #184]	; (7240 <promisc_recover_hop_increment+0x178>)
    7186:	759a      	strb	r2, [r3, #22]
			le.interval_timer = le.conn_interval / 2;
    7188:	4b2d      	ldr	r3, [pc, #180]	; (7240 <promisc_recover_hop_increment+0x178>)
    718a:	8bdb      	ldrh	r3, [r3, #30]
    718c:	085b      	lsrs	r3, r3, #1
    718e:	b29a      	uxth	r2, r3
    7190:	4b2b      	ldr	r3, [pc, #172]	; (7240 <promisc_recover_hop_increment+0x178>)
    7192:	839a      	strh	r2, [r3, #28]
			le.conn_count = 0;
    7194:	4b2a      	ldr	r3, [pc, #168]	; (7240 <promisc_recover_hop_increment+0x178>)
    7196:	2200      	movs	r2, #0
    7198:	841a      	strh	r2, [r3, #32]
			le.conn_epoch = 0;
    719a:	4b29      	ldr	r3, [pc, #164]	; (7240 <promisc_recover_hop_increment+0x178>)
    719c:	2200      	movs	r2, #0
    719e:	619a      	str	r2, [r3, #24]
			do_hop = 0;
    71a0:	4b26      	ldr	r3, [pc, #152]	; (723c <promisc_recover_hop_increment+0x174>)
    71a2:	2200      	movs	r2, #0
    71a4:	701a      	strb	r2, [r3, #0]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    71a6:	4b26      	ldr	r3, [pc, #152]	; (7240 <promisc_recover_hop_increment+0x178>)
    71a8:	7d9b      	ldrb	r3, [r3, #22]
    71aa:	1c5a      	adds	r2, r3, #1
    71ac:	4b26      	ldr	r3, [pc, #152]	; (7248 <promisc_recover_hop_increment+0x180>)
    71ae:	fb82 0103 	smull	r0, r1, r2, r3
    71b2:	1853      	adds	r3, r2, r1
    71b4:	1159      	asrs	r1, r3, #5
    71b6:	17d3      	asrs	r3, r2, #31
    71b8:	1ac9      	subs	r1, r1, r3
    71ba:	460b      	mov	r3, r1
    71bc:	00db      	lsls	r3, r3, #3
    71be:	440b      	add	r3, r1
    71c0:	009b      	lsls	r3, r3, #2
    71c2:	440b      	add	r3, r1
    71c4:	1ad1      	subs	r1, r2, r3
    71c6:	b2ca      	uxtb	r2, r1
    71c8:	4b1d      	ldr	r3, [pc, #116]	; (7240 <promisc_recover_hop_increment+0x178>)
    71ca:	755a      	strb	r2, [r3, #21]
			le.link_state = LINK_CONNECTED;
    71cc:	4b1c      	ldr	r3, [pc, #112]	; (7240 <promisc_recover_hop_increment+0x178>)
    71ce:	2203      	movs	r2, #3
    71d0:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0;
    71d2:	4b1b      	ldr	r3, [pc, #108]	; (7240 <promisc_recover_hop_increment+0x178>)
    71d4:	2200      	movs	r2, #0
    71d6:	611a      	str	r2, [r3, #16]
			hop_mode = HOP_BTLE;
    71d8:	4b1c      	ldr	r3, [pc, #112]	; (724c <promisc_recover_hop_increment+0x184>)
    71da:	2203      	movs	r2, #3
    71dc:	701a      	strb	r2, [r3, #0]
			packet_cb = connection_follow_cb;
    71de:	4b1c      	ldr	r3, [pc, #112]	; (7250 <promisc_recover_hop_increment+0x188>)
    71e0:	4a1c      	ldr	r2, [pc, #112]	; (7254 <promisc_recover_hop_increment+0x18c>)
    71e2:	601a      	str	r2, [r3, #0]
			le_promisc_state(3, &le.channel_increment, 1);
    71e4:	2003      	movs	r0, #3
    71e6:	491c      	ldr	r1, [pc, #112]	; (7258 <promisc_recover_hop_increment+0x190>)
    71e8:	2201      	movs	r2, #1
    71ea:	f7ff ff25 	bl	7038 <le_promisc_state>

			if (jam_mode != JAM_NONE)
    71ee:	4b1b      	ldr	r3, [pc, #108]	; (725c <promisc_recover_hop_increment+0x194>)
    71f0:	781b      	ldrb	r3, [r3, #0]
    71f2:	b2db      	uxtb	r3, r3
    71f4:	2b00      	cmp	r3, #0
    71f6:	d003      	beq.n	7200 <promisc_recover_hop_increment+0x138>
				le_jam_count = JAM_COUNT_DEFAULT;
    71f8:	4b19      	ldr	r3, [pc, #100]	; (7260 <promisc_recover_hop_increment+0x198>)
    71fa:	2228      	movs	r2, #40	; 0x28
    71fc:	601a      	str	r2, [r3, #0]

			return;
    71fe:	e00f      	b.n	7220 <promisc_recover_hop_increment+0x158>
    7200:	e00e      	b.n	7220 <promisc_recover_hop_increment+0x158>
		}
		hop_direct_channel = 2404;
    7202:	4b0d      	ldr	r3, [pc, #52]	; (7238 <promisc_recover_hop_increment+0x170>)
    7204:	f640 1264 	movw	r2, #2404	; 0x964
    7208:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    720a:	4b0c      	ldr	r3, [pc, #48]	; (723c <promisc_recover_hop_increment+0x174>)
    720c:	2201      	movs	r2, #1
    720e:	701a      	strb	r2, [r3, #0]
    7210:	e006      	b.n	7220 <promisc_recover_hop_increment+0x158>
	}
	else {
		hop_direct_channel = 2404;
    7212:	4b09      	ldr	r3, [pc, #36]	; (7238 <promisc_recover_hop_increment+0x170>)
    7214:	f640 1264 	movw	r2, #2404	; 0x964
    7218:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    721a:	4b08      	ldr	r3, [pc, #32]	; (723c <promisc_recover_hop_increment+0x174>)
    721c:	2201      	movs	r2, #1
    721e:	701a      	strb	r2, [r3, #0]
	}
}
    7220:	3710      	adds	r7, #16
    7222:	46bd      	mov	sp, r7
    7224:	bd80      	pop	{r7, pc}
    7226:	bf00      	nop
    7228:	1000049c 	.word	0x1000049c
    722c:	10000984 	.word	0x10000984
    7230:	40004008 	.word	0x40004008
    7234:	10000a64 	.word	0x10000a64
    7238:	10000996 	.word	0x10000996
    723c:	10000993 	.word	0x10000993
    7240:	10000458 	.word	0x10000458
    7244:	0000ac24 	.word	0x0000ac24
    7248:	dd67c8a7 	.word	0xdd67c8a7
    724c:	10000992 	.word	0x10000992
    7250:	100009ac 	.word	0x100009ac
    7254:	00006d99 	.word	0x00006d99
    7258:	1000046e 	.word	0x1000046e
    725c:	10000a50 	.word	0x10000a50
    7260:	100009a4 	.word	0x100009a4

00007264 <promisc_recover_hop_interval>:

void promisc_recover_hop_interval(u8 *packet) {
    7264:	b580      	push	{r7, lr}
    7266:	b086      	sub	sp, #24
    7268:	af00      	add	r7, sp, #0
    726a:	6078      	str	r0, [r7, #4]
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    726c:	4b33      	ldr	r3, [pc, #204]	; (733c <promisc_recover_hop_interval+0xd8>)
    726e:	681b      	ldr	r3, [r3, #0]
    7270:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7274:	f640 4235 	movw	r2, #3125	; 0xc35
    7278:	fb02 f203 	mul.w	r2, r2, r3
    727c:	4b30      	ldr	r3, [pc, #192]	; (7340 <promisc_recover_hop_interval+0xdc>)
    727e:	681b      	ldr	r3, [r3, #0]
    7280:	4413      	add	r3, r2
    7282:	617b      	str	r3, [r7, #20]
	if (cur_clk < prev_clk)
    7284:	4b2f      	ldr	r3, [pc, #188]	; (7344 <promisc_recover_hop_interval+0xe0>)
    7286:	681b      	ldr	r3, [r3, #0]
    7288:	697a      	ldr	r2, [r7, #20]
    728a:	429a      	cmp	r2, r3
    728c:	d203      	bcs.n	7296 <promisc_recover_hop_interval+0x32>
		cur_clk += 3267800000; // handle rollover
    728e:	697a      	ldr	r2, [r7, #20]
    7290:	4b2d      	ldr	r3, [pc, #180]	; (7348 <promisc_recover_hop_interval+0xe4>)
    7292:	4413      	add	r3, r2
    7294:	617b      	str	r3, [r7, #20]
	u32 clk_diff = cur_clk - prev_clk;
    7296:	4b2b      	ldr	r3, [pc, #172]	; (7344 <promisc_recover_hop_interval+0xe0>)
    7298:	681b      	ldr	r3, [r3, #0]
    729a:	697a      	ldr	r2, [r7, #20]
    729c:	1ad3      	subs	r3, r2, r3
    729e:	613b      	str	r3, [r7, #16]
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    72a0:	693b      	ldr	r3, [r7, #16]
    72a2:	f246 12a7 	movw	r2, #24999	; 0x61a7
    72a6:	4293      	cmp	r3, r2
    72a8:	d800      	bhi.n	72ac <promisc_recover_hop_interval+0x48>
		return;
    72aa:	e043      	b.n	7334 <promisc_recover_hop_interval+0xd0>

	if (clk_diff < le_promisc.smallest_hop_interval)
    72ac:	4b27      	ldr	r3, [pc, #156]	; (734c <promisc_recover_hop_interval+0xe8>)
    72ae:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    72b2:	693b      	ldr	r3, [r7, #16]
    72b4:	429a      	cmp	r2, r3
    72b6:	d903      	bls.n	72c0 <promisc_recover_hop_interval+0x5c>
		le_promisc.smallest_hop_interval = clk_diff;
    72b8:	4a24      	ldr	r2, [pc, #144]	; (734c <promisc_recover_hop_interval+0xe8>)
    72ba:	693b      	ldr	r3, [r7, #16]
    72bc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    72c0:	4b22      	ldr	r3, [pc, #136]	; (734c <promisc_recover_hop_interval+0xe8>)
    72c2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    72c6:	f503 3361 	add.w	r3, r3, #230400	; 0x38400
    72ca:	f203 3352 	addw	r3, r3, #850	; 0x352
    72ce:	4a20      	ldr	r2, [pc, #128]	; (7350 <promisc_recover_hop_interval+0xec>)
    72d0:	fba2 2303 	umull	r2, r3, r2, r3
    72d4:	0c9b      	lsrs	r3, r3, #18
    72d6:	81fb      	strh	r3, [r7, #14]

	if (le.conn_interval == obsv_hop_interval) {
    72d8:	4b1e      	ldr	r3, [pc, #120]	; (7354 <promisc_recover_hop_interval+0xf0>)
    72da:	8bdb      	ldrh	r3, [r3, #30]
    72dc:	89fa      	ldrh	r2, [r7, #14]
    72de:	429a      	cmp	r2, r3
    72e0:	d11e      	bne.n	7320 <promisc_recover_hop_interval+0xbc>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    72e2:	4b1a      	ldr	r3, [pc, #104]	; (734c <promisc_recover_hop_interval+0xe8>)
    72e4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    72e8:	3301      	adds	r3, #1
    72ea:	4a18      	ldr	r2, [pc, #96]	; (734c <promisc_recover_hop_interval+0xe8>)
    72ec:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    72f0:	4b16      	ldr	r3, [pc, #88]	; (734c <promisc_recover_hop_interval+0xe8>)
    72f2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    72f6:	2b05      	cmp	r3, #5
    72f8:	d119      	bne.n	732e <promisc_recover_hop_interval+0xca>
			packet_cb = promisc_recover_hop_increment;
    72fa:	4b17      	ldr	r3, [pc, #92]	; (7358 <promisc_recover_hop_interval+0xf4>)
    72fc:	4a17      	ldr	r2, [pc, #92]	; (735c <promisc_recover_hop_interval+0xf8>)
    72fe:	601a      	str	r2, [r3, #0]
			hop_direct_channel = 2404;
    7300:	4b17      	ldr	r3, [pc, #92]	; (7360 <promisc_recover_hop_interval+0xfc>)
    7302:	f640 1264 	movw	r2, #2404	; 0x964
    7306:	801a      	strh	r2, [r3, #0]
			hop_mode = HOP_DIRECT;
    7308:	4b16      	ldr	r3, [pc, #88]	; (7364 <promisc_recover_hop_interval+0x100>)
    730a:	2204      	movs	r2, #4
    730c:	701a      	strb	r2, [r3, #0]
			do_hop = 1;
    730e:	4b16      	ldr	r3, [pc, #88]	; (7368 <promisc_recover_hop_interval+0x104>)
    7310:	2201      	movs	r2, #1
    7312:	701a      	strb	r2, [r3, #0]
			le_promisc_state(2, &le.conn_interval, 2);
    7314:	2002      	movs	r0, #2
    7316:	4915      	ldr	r1, [pc, #84]	; (736c <promisc_recover_hop_interval+0x108>)
    7318:	2202      	movs	r2, #2
    731a:	f7ff fe8d 	bl	7038 <le_promisc_state>
    731e:	e006      	b.n	732e <promisc_recover_hop_interval+0xca>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    7320:	4a0c      	ldr	r2, [pc, #48]	; (7354 <promisc_recover_hop_interval+0xf0>)
    7322:	89fb      	ldrh	r3, [r7, #14]
    7324:	83d3      	strh	r3, [r2, #30]
		le_promisc.consec_intervals = 0;
    7326:	4b09      	ldr	r3, [pc, #36]	; (734c <promisc_recover_hop_interval+0xe8>)
    7328:	2200      	movs	r2, #0
    732a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	prev_clk = cur_clk;
    732e:	4a05      	ldr	r2, [pc, #20]	; (7344 <promisc_recover_hop_interval+0xe0>)
    7330:	697b      	ldr	r3, [r7, #20]
    7332:	6013      	str	r3, [r2, #0]
}
    7334:	3718      	adds	r7, #24
    7336:	46bd      	mov	sp, r7
    7338:	bd80      	pop	{r7, pc}
    733a:	bf00      	nop
    733c:	10000984 	.word	0x10000984
    7340:	40004008 	.word	0x40004008
    7344:	10000a68 	.word	0x10000a68
    7348:	c2c6abc0 	.word	0xc2c6abc0
    734c:	10000be4 	.word	0x10000be4
    7350:	9119a9c1 	.word	0x9119a9c1
    7354:	10000458 	.word	0x10000458
    7358:	100009ac 	.word	0x100009ac
    735c:	000070c9 	.word	0x000070c9
    7360:	10000996 	.word	0x10000996
    7364:	10000992 	.word	0x10000992
    7368:	10000993 	.word	0x10000993
    736c:	10000476 	.word	0x10000476

00007370 <promisc_follow_cb>:

void promisc_follow_cb(u8 *packet) {
    7370:	b580      	push	{r7, lr}
    7372:	b084      	sub	sp, #16
    7374:	af00      	add	r7, sp, #0
    7376:	6078      	str	r0, [r7, #4]
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    7378:	4b28      	ldr	r3, [pc, #160]	; (741c <promisc_follow_cb+0xac>)
    737a:	691b      	ldr	r3, [r3, #16]
    737c:	2b00      	cmp	r3, #0
    737e:	d149      	bne.n	7414 <promisc_follow_cb+0xa4>
    7380:	687b      	ldr	r3, [r7, #4]
    7382:	3304      	adds	r3, #4
    7384:	781b      	ldrb	r3, [r3, #0]
    7386:	2b01      	cmp	r3, #1
    7388:	d144      	bne.n	7414 <promisc_follow_cb+0xa4>
    738a:	687b      	ldr	r3, [r7, #4]
    738c:	3305      	adds	r3, #5
    738e:	781b      	ldrb	r3, [r3, #0]
    7390:	2b00      	cmp	r3, #0
    7392:	d13f      	bne.n	7414 <promisc_follow_cb+0xa4>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    7394:	687b      	ldr	r3, [r7, #4]
    7396:	3308      	adds	r3, #8
    7398:	781b      	ldrb	r3, [r3, #0]
    739a:	041a      	lsls	r2, r3, #16
    739c:	687b      	ldr	r3, [r7, #4]
    739e:	3307      	adds	r3, #7
    73a0:	781b      	ldrb	r3, [r3, #0]
    73a2:	021b      	lsls	r3, r3, #8
    73a4:	4313      	orrs	r3, r2
    73a6:	687a      	ldr	r2, [r7, #4]
    73a8:	3206      	adds	r2, #6
    73aa:	7812      	ldrb	r2, [r2, #0]
    73ac:	4313      	orrs	r3, r2
    73ae:	60bb      	str	r3, [r7, #8]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    73b0:	687b      	ldr	r3, [r7, #4]
    73b2:	3304      	adds	r3, #4
    73b4:	68b8      	ldr	r0, [r7, #8]
    73b6:	4619      	mov	r1, r3
    73b8:	2202      	movs	r2, #2
    73ba:	f000 fe9f 	bl	80fc <btle_reverse_crc>
    73be:	4602      	mov	r2, r0
    73c0:	4b16      	ldr	r3, [pc, #88]	; (741c <promisc_follow_cb+0xac>)
    73c2:	609a      	str	r2, [r3, #8]
		le.crc_init_reversed = 0;
    73c4:	4b15      	ldr	r3, [pc, #84]	; (741c <promisc_follow_cb+0xac>)
    73c6:	2200      	movs	r2, #0
    73c8:	60da      	str	r2, [r3, #12]
		for (i = 0; i < 24; ++i)
    73ca:	2300      	movs	r3, #0
    73cc:	60fb      	str	r3, [r7, #12]
    73ce:	e013      	b.n	73f8 <promisc_follow_cb+0x88>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    73d0:	4b12      	ldr	r3, [pc, #72]	; (741c <promisc_follow_cb+0xac>)
    73d2:	68da      	ldr	r2, [r3, #12]
    73d4:	4b11      	ldr	r3, [pc, #68]	; (741c <promisc_follow_cb+0xac>)
    73d6:	6899      	ldr	r1, [r3, #8]
    73d8:	68fb      	ldr	r3, [r7, #12]
    73da:	fa21 f303 	lsr.w	r3, r1, r3
    73de:	f003 0101 	and.w	r1, r3, #1
    73e2:	68fb      	ldr	r3, [r7, #12]
    73e4:	f1c3 0317 	rsb	r3, r3, #23
    73e8:	fa01 f303 	lsl.w	r3, r1, r3
    73ec:	4313      	orrs	r3, r2
    73ee:	4a0b      	ldr	r2, [pc, #44]	; (741c <promisc_follow_cb+0xac>)
    73f0:	60d3      	str	r3, [r2, #12]
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    73f2:	68fb      	ldr	r3, [r7, #12]
    73f4:	3301      	adds	r3, #1
    73f6:	60fb      	str	r3, [r7, #12]
    73f8:	68fb      	ldr	r3, [r7, #12]
    73fa:	2b17      	cmp	r3, #23
    73fc:	dde8      	ble.n	73d0 <promisc_follow_cb+0x60>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    73fe:	4b07      	ldr	r3, [pc, #28]	; (741c <promisc_follow_cb+0xac>)
    7400:	2201      	movs	r2, #1
    7402:	611a      	str	r2, [r3, #16]
		packet_cb = promisc_recover_hop_interval;
    7404:	4b06      	ldr	r3, [pc, #24]	; (7420 <promisc_follow_cb+0xb0>)
    7406:	4a07      	ldr	r2, [pc, #28]	; (7424 <promisc_follow_cb+0xb4>)
    7408:	601a      	str	r2, [r3, #0]
		le_promisc_state(1, &le.crc_init, 3);
    740a:	2001      	movs	r0, #1
    740c:	4906      	ldr	r1, [pc, #24]	; (7428 <promisc_follow_cb+0xb8>)
    740e:	2203      	movs	r2, #3
    7410:	f7ff fe12 	bl	7038 <le_promisc_state>
	}
}
    7414:	3710      	adds	r7, #16
    7416:	46bd      	mov	sp, r7
    7418:	bd80      	pop	{r7, pc}
    741a:	bf00      	nop
    741c:	10000458 	.word	0x10000458
    7420:	100009ac 	.word	0x100009ac
    7424:	00007265 	.word	0x00007265
    7428:	10000460 	.word	0x10000460

0000742c <see_aa>:

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    742c:	b480      	push	{r7}
    742e:	b087      	sub	sp, #28
    7430:	af00      	add	r7, sp, #0
    7432:	6078      	str	r0, [r7, #4]
	int i, max = -1, killme = -1;
    7434:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7438:	613b      	str	r3, [r7, #16]
    743a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    743e:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7440:	2300      	movs	r3, #0
    7442:	617b      	str	r3, [r7, #20]
    7444:	e015      	b.n	7472 <see_aa+0x46>
		if (le_promisc.active_aa[i].aa == aa) {
    7446:	4a22      	ldr	r2, [pc, #136]	; (74d0 <see_aa+0xa4>)
    7448:	697b      	ldr	r3, [r7, #20]
    744a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    744e:	687b      	ldr	r3, [r7, #4]
    7450:	429a      	cmp	r2, r3
    7452:	d10b      	bne.n	746c <see_aa+0x40>
			++le_promisc.active_aa[i].count;
    7454:	4a1e      	ldr	r2, [pc, #120]	; (74d0 <see_aa+0xa4>)
    7456:	697b      	ldr	r3, [r7, #20]
    7458:	00db      	lsls	r3, r3, #3
    745a:	4413      	add	r3, r2
    745c:	685b      	ldr	r3, [r3, #4]
    745e:	1c5a      	adds	r2, r3, #1
    7460:	491b      	ldr	r1, [pc, #108]	; (74d0 <see_aa+0xa4>)
    7462:	697b      	ldr	r3, [r7, #20]
    7464:	00db      	lsls	r3, r3, #3
    7466:	440b      	add	r3, r1
    7468:	605a      	str	r2, [r3, #4]
			return;
    746a:	e02c      	b.n	74c6 <see_aa+0x9a>
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    746c:	697b      	ldr	r3, [r7, #20]
    746e:	3301      	adds	r3, #1
    7470:	617b      	str	r3, [r7, #20]
    7472:	697b      	ldr	r3, [r7, #20]
    7474:	2b1f      	cmp	r3, #31
    7476:	dde6      	ble.n	7446 <see_aa+0x1a>
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7478:	2300      	movs	r3, #0
    747a:	617b      	str	r3, [r7, #20]
    747c:	e015      	b.n	74aa <see_aa+0x7e>
		if (le_promisc.active_aa[i].count < max || max < 0) {
    747e:	4a14      	ldr	r2, [pc, #80]	; (74d0 <see_aa+0xa4>)
    7480:	697b      	ldr	r3, [r7, #20]
    7482:	00db      	lsls	r3, r3, #3
    7484:	4413      	add	r3, r2
    7486:	685a      	ldr	r2, [r3, #4]
    7488:	693b      	ldr	r3, [r7, #16]
    748a:	429a      	cmp	r2, r3
    748c:	db02      	blt.n	7494 <see_aa+0x68>
    748e:	693b      	ldr	r3, [r7, #16]
    7490:	2b00      	cmp	r3, #0
    7492:	da07      	bge.n	74a4 <see_aa+0x78>
			killme = i;
    7494:	697b      	ldr	r3, [r7, #20]
    7496:	60fb      	str	r3, [r7, #12]
			max = le_promisc.active_aa[i].count;
    7498:	4a0d      	ldr	r2, [pc, #52]	; (74d0 <see_aa+0xa4>)
    749a:	697b      	ldr	r3, [r7, #20]
    749c:	00db      	lsls	r3, r3, #3
    749e:	4413      	add	r3, r2
    74a0:	685b      	ldr	r3, [r3, #4]
    74a2:	613b      	str	r3, [r7, #16]
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    74a4:	697b      	ldr	r3, [r7, #20]
    74a6:	3301      	adds	r3, #1
    74a8:	617b      	str	r3, [r7, #20]
    74aa:	697b      	ldr	r3, [r7, #20]
    74ac:	2b1f      	cmp	r3, #31
    74ae:	dde6      	ble.n	747e <see_aa+0x52>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    74b0:	4907      	ldr	r1, [pc, #28]	; (74d0 <see_aa+0xa4>)
    74b2:	68fb      	ldr	r3, [r7, #12]
    74b4:	687a      	ldr	r2, [r7, #4]
    74b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    74ba:	4a05      	ldr	r2, [pc, #20]	; (74d0 <see_aa+0xa4>)
    74bc:	68fb      	ldr	r3, [r7, #12]
    74be:	00db      	lsls	r3, r3, #3
    74c0:	4413      	add	r3, r2
    74c2:	2201      	movs	r2, #1
    74c4:	605a      	str	r2, [r3, #4]
}
    74c6:	371c      	adds	r7, #28
    74c8:	46bd      	mov	sp, r7
    74ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    74ce:	4770      	bx	lr
    74d0:	10000be4 	.word	0x10000be4

000074d4 <cb_le_promisc>:

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    74d4:	b590      	push	{r4, r7, lr}
    74d6:	b0a1      	sub	sp, #132	; 0x84
    74d8:	af00      	add	r7, sp, #0
    74da:	6078      	str	r0, [r7, #4]
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    74dc:	f107 031c 	add.w	r3, r7, #28
    74e0:	2240      	movs	r2, #64	; 0x40
    74e2:	4618      	mov	r0, r3
    74e4:	2100      	movs	r1, #0
    74e6:	f7fc fe47 	bl	4178 <memset>
    74ea:	2301      	movs	r3, #1
    74ec:	773b      	strb	r3, [r7, #28]
    74ee:	2301      	movs	r3, #1
    74f0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    74f4:	2301      	movs	r3, #1
    74f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    74fa:	2301      	movs	r3, #1
    74fc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    7500:	2301      	movs	r3, #1
    7502:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    7506:	2301      	movs	r3, #1
    7508:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    750c:	2301      	movs	r3, #1
    750e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    7512:	2301      	movs	r3, #1
    7514:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    7518:	2300      	movs	r3, #0
    751a:	67fb      	str	r3, [r7, #124]	; 0x7c
    751c:	e041      	b.n	75a2 <cb_le_promisc+0xce>
		idx = whitening_index[btle_channel_index(channel-2402)];
    751e:	4ba7      	ldr	r3, [pc, #668]	; (77bc <cb_le_promisc+0x2e8>)
    7520:	881b      	ldrh	r3, [r3, #0]
    7522:	b29b      	uxth	r3, r3
    7524:	b2db      	uxtb	r3, r3
    7526:	3b62      	subs	r3, #98	; 0x62
    7528:	b2db      	uxtb	r3, r3
    752a:	4618      	mov	r0, r3
    752c:	f000 fd76 	bl	801c <btle_channel_index>
    7530:	4603      	mov	r3, r0
    7532:	461a      	mov	r2, r3
    7534:	4ba2      	ldr	r3, [pc, #648]	; (77c0 <cb_le_promisc+0x2ec>)
    7536:	5c9b      	ldrb	r3, [r3, r2]
    7538:	673b      	str	r3, [r7, #112]	; 0x70

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    753a:	2300      	movs	r3, #0
    753c:	67bb      	str	r3, [r7, #120]	; 0x78
    753e:	e02a      	b.n	7596 <cb_le_promisc+0xc2>
			desired[i][j] ^= whitening[idx];
    7540:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7542:	011b      	lsls	r3, r3, #4
    7544:	f107 0280 	add.w	r2, r7, #128	; 0x80
    7548:	441a      	add	r2, r3
    754a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    754c:	4413      	add	r3, r2
    754e:	3b64      	subs	r3, #100	; 0x64
    7550:	781a      	ldrb	r2, [r3, #0]
    7552:	499c      	ldr	r1, [pc, #624]	; (77c4 <cb_le_promisc+0x2f0>)
    7554:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7556:	440b      	add	r3, r1
    7558:	781b      	ldrb	r3, [r3, #0]
    755a:	4053      	eors	r3, r2
    755c:	b2d9      	uxtb	r1, r3
    755e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7560:	011b      	lsls	r3, r3, #4
    7562:	f107 0280 	add.w	r2, r7, #128	; 0x80
    7566:	441a      	add	r2, r3
    7568:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    756a:	4413      	add	r3, r2
    756c:	3b64      	subs	r3, #100	; 0x64
    756e:	460a      	mov	r2, r1
    7570:	701a      	strb	r2, [r3, #0]
			idx = (idx + 1) % sizeof(whitening);
    7572:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7574:	3301      	adds	r3, #1
    7576:	4619      	mov	r1, r3
    7578:	4b93      	ldr	r3, [pc, #588]	; (77c8 <cb_le_promisc+0x2f4>)
    757a:	fba1 2303 	umull	r2, r3, r1, r3
    757e:	1ac8      	subs	r0, r1, r3
    7580:	0840      	lsrs	r0, r0, #1
    7582:	4403      	add	r3, r0
    7584:	099a      	lsrs	r2, r3, #6
    7586:	4613      	mov	r3, r2
    7588:	01db      	lsls	r3, r3, #7
    758a:	1a9b      	subs	r3, r3, r2
    758c:	1aca      	subs	r2, r1, r3
    758e:	673a      	str	r2, [r7, #112]	; 0x70

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    7590:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7592:	3301      	adds	r3, #1
    7594:	67bb      	str	r3, [r7, #120]	; 0x78
    7596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7598:	2b0f      	cmp	r3, #15
    759a:	ddd1      	ble.n	7540 <cb_le_promisc+0x6c>
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    759c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    759e:	3301      	adds	r3, #1
    75a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    75a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    75a4:	2b03      	cmp	r3, #3
    75a6:	ddba      	ble.n	751e <cb_le_promisc+0x4a>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    75a8:	2320      	movs	r3, #32
    75aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    75ac:	e0d5      	b.n	775a <cb_le_promisc+0x286>
		int ok[4] = { 1, 1, 1, 1 };
    75ae:	4b87      	ldr	r3, [pc, #540]	; (77cc <cb_le_promisc+0x2f8>)
    75b0:	f107 040c 	add.w	r4, r7, #12
    75b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    75b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		int matching = -1;
    75ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    75be:	66fb      	str	r3, [r7, #108]	; 0x6c

		for (j = 0; j < 4; ++j) {
    75c0:	2300      	movs	r3, #0
    75c2:	67bb      	str	r3, [r7, #120]	; 0x78
    75c4:	e026      	b.n	7614 <cb_le_promisc+0x140>
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    75c6:	2300      	movs	r3, #0
    75c8:	677b      	str	r3, [r7, #116]	; 0x74
    75ca:	e01d      	b.n	7608 <cb_le_promisc+0x134>
				if (unpacked[i+k] != desired[j][k]) {
    75cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    75ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    75d0:	4413      	add	r3, r2
    75d2:	461a      	mov	r2, r3
    75d4:	687b      	ldr	r3, [r7, #4]
    75d6:	4413      	add	r3, r2
    75d8:	781a      	ldrb	r2, [r3, #0]
    75da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    75dc:	011b      	lsls	r3, r3, #4
    75de:	f107 0180 	add.w	r1, r7, #128	; 0x80
    75e2:	4419      	add	r1, r3
    75e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    75e6:	440b      	add	r3, r1
    75e8:	3b64      	subs	r3, #100	; 0x64
    75ea:	781b      	ldrb	r3, [r3, #0]
    75ec:	429a      	cmp	r2, r3
    75ee:	d008      	beq.n	7602 <cb_le_promisc+0x12e>
					ok[j] = 0;
    75f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    75f2:	009b      	lsls	r3, r3, #2
    75f4:	f107 0280 	add.w	r2, r7, #128	; 0x80
    75f8:	4413      	add	r3, r2
    75fa:	2200      	movs	r2, #0
    75fc:	f843 2c74 	str.w	r2, [r3, #-116]
					break;
    7600:	e005      	b.n	760e <cb_le_promisc+0x13a>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    7602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7604:	3301      	adds	r3, #1
    7606:	677b      	str	r3, [r7, #116]	; 0x74
    7608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    760a:	2b0f      	cmp	r3, #15
    760c:	ddde      	ble.n	75cc <cb_le_promisc+0xf8>
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    760e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7610:	3301      	adds	r3, #1
    7612:	67bb      	str	r3, [r7, #120]	; 0x78
    7614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7616:	2b03      	cmp	r3, #3
    7618:	ddd5      	ble.n	75c6 <cb_le_promisc+0xf2>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    761a:	2300      	movs	r3, #0
    761c:	67bb      	str	r3, [r7, #120]	; 0x78
    761e:	e00e      	b.n	763e <cb_le_promisc+0x16a>
			if (ok[j]) {
    7620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7622:	009b      	lsls	r3, r3, #2
    7624:	f107 0280 	add.w	r2, r7, #128	; 0x80
    7628:	4413      	add	r3, r2
    762a:	f853 3c74 	ldr.w	r3, [r3, #-116]
    762e:	2b00      	cmp	r3, #0
    7630:	d002      	beq.n	7638 <cb_le_promisc+0x164>
				matching = j;
    7632:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7634:	66fb      	str	r3, [r7, #108]	; 0x6c
				break;
    7636:	e005      	b.n	7644 <cb_le_promisc+0x170>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    7638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    763a:	3301      	adds	r3, #1
    763c:	67bb      	str	r3, [r7, #120]	; 0x78
    763e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7640:	2b03      	cmp	r3, #3
    7642:	dded      	ble.n	7620 <cb_le_promisc+0x14c>
				break;
			}
		}

		// skip if no match
		if (matching < 0)
    7644:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    7646:	2b00      	cmp	r3, #0
    7648:	f2c0 8084 	blt.w	7754 <cb_le_promisc+0x280>
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
    764c:	4b5b      	ldr	r3, [pc, #364]	; (77bc <cb_le_promisc+0x2e8>)
    764e:	881b      	ldrh	r3, [r3, #0]
    7650:	b29b      	uxth	r3, r3
    7652:	b2db      	uxtb	r3, r3
    7654:	3b62      	subs	r3, #98	; 0x62
    7656:	b2db      	uxtb	r3, r3
    7658:	4618      	mov	r0, r3
    765a:	f000 fcdf 	bl	801c <btle_channel_index>
    765e:	4603      	mov	r3, r0
    7660:	461a      	mov	r2, r3
    7662:	4b57      	ldr	r3, [pc, #348]	; (77c0 <cb_le_promisc+0x2ec>)
    7664:	5c9b      	ldrb	r3, [r3, r2]
    7666:	673b      	str	r3, [r7, #112]	; 0x70
		for (j = 0; j < 4+3+3; ++j) {
    7668:	2300      	movs	r3, #0
    766a:	67bb      	str	r3, [r7, #120]	; 0x78
    766c:	e04c      	b.n	7708 <cb_le_promisc+0x234>
			u8 byte = 0;
    766e:	2300      	movs	r3, #0
    7670:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			for (k = 0; k < 8; k++) {
    7674:	2300      	movs	r3, #0
    7676:	677b      	str	r3, [r7, #116]	; 0x74
    7678:	e039      	b.n	76ee <cb_le_promisc+0x21a>
				int offset = k + (j * 8) + i - 32;
    767a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    767c:	00da      	lsls	r2, r3, #3
    767e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7680:	441a      	add	r2, r3
    7682:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7684:	4413      	add	r3, r2
    7686:	3b20      	subs	r3, #32
    7688:	663b      	str	r3, [r7, #96]	; 0x60
				if (offset >= DMA_SIZE*8*2) break;
    768a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    768c:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    7690:	db00      	blt.n	7694 <cb_le_promisc+0x1c0>
    7692:	e02f      	b.n	76f4 <cb_le_promisc+0x220>
				int bit = unpacked[offset];
    7694:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7696:	687a      	ldr	r2, [r7, #4]
    7698:	4413      	add	r3, r2
    769a:	781b      	ldrb	r3, [r3, #0]
    769c:	667b      	str	r3, [r7, #100]	; 0x64
				if (j >= 4) { // unwhiten data bytes
    769e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    76a0:	2b03      	cmp	r3, #3
    76a2:	dd16      	ble.n	76d2 <cb_le_promisc+0x1fe>
					bit ^= whitening[idx];
    76a4:	4a47      	ldr	r2, [pc, #284]	; (77c4 <cb_le_promisc+0x2f0>)
    76a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    76a8:	4413      	add	r3, r2
    76aa:	781b      	ldrb	r3, [r3, #0]
    76ac:	461a      	mov	r2, r3
    76ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    76b0:	4053      	eors	r3, r2
    76b2:	667b      	str	r3, [r7, #100]	; 0x64
					idx = (idx + 1) % sizeof(whitening);
    76b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    76b6:	3301      	adds	r3, #1
    76b8:	4619      	mov	r1, r3
    76ba:	4b43      	ldr	r3, [pc, #268]	; (77c8 <cb_le_promisc+0x2f4>)
    76bc:	fba1 2303 	umull	r2, r3, r1, r3
    76c0:	1ac8      	subs	r0, r1, r3
    76c2:	0840      	lsrs	r0, r0, #1
    76c4:	4403      	add	r3, r0
    76c6:	099a      	lsrs	r2, r3, #6
    76c8:	4613      	mov	r3, r2
    76ca:	01db      	lsls	r3, r3, #7
    76cc:	1a9b      	subs	r3, r3, r2
    76ce:	1aca      	subs	r2, r1, r3
    76d0:	673a      	str	r2, [r7, #112]	; 0x70
				}
				byte |= bit << k;
    76d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    76d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    76d6:	fa02 f303 	lsl.w	r3, r2, r3
    76da:	b2da      	uxtb	r2, r3
    76dc:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
    76e0:	4313      	orrs	r3, r2
    76e2:	b2db      	uxtb	r3, r3
    76e4:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    76e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    76ea:	3301      	adds	r3, #1
    76ec:	677b      	str	r3, [r7, #116]	; 0x74
    76ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    76f0:	2b07      	cmp	r3, #7
    76f2:	ddc2      	ble.n	767a <cb_le_promisc+0x1a6>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    76f4:	4b36      	ldr	r3, [pc, #216]	; (77d0 <cb_le_promisc+0x2fc>)
    76f6:	681a      	ldr	r2, [r3, #0]
    76f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    76fa:	4413      	add	r3, r2
    76fc:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
    7700:	701a      	strb	r2, [r3, #0]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
    7702:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7704:	3301      	adds	r3, #1
    7706:	67bb      	str	r3, [r7, #120]	; 0x78
    7708:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    770a:	2b09      	cmp	r3, #9
    770c:	ddaf      	ble.n	766e <cb_le_promisc+0x19a>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    770e:	4b30      	ldr	r3, [pc, #192]	; (77d0 <cb_le_promisc+0x2fc>)
    7710:	681b      	ldr	r3, [r3, #0]
    7712:	3303      	adds	r3, #3
    7714:	781b      	ldrb	r3, [r3, #0]
    7716:	b2db      	uxtb	r3, r3
    7718:	061a      	lsls	r2, r3, #24
				 (idle_rxbuf[2] << 16) |
    771a:	4b2d      	ldr	r3, [pc, #180]	; (77d0 <cb_le_promisc+0x2fc>)
    771c:	681b      	ldr	r3, [r3, #0]
    771e:	3302      	adds	r3, #2
    7720:	781b      	ldrb	r3, [r3, #0]
    7722:	b2db      	uxtb	r3, r3
    7724:	041b      	lsls	r3, r3, #16
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    7726:	431a      	orrs	r2, r3
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    7728:	4b29      	ldr	r3, [pc, #164]	; (77d0 <cb_le_promisc+0x2fc>)
    772a:	681b      	ldr	r3, [r3, #0]
    772c:	3301      	adds	r3, #1
    772e:	781b      	ldrb	r3, [r3, #0]
    7730:	b2db      	uxtb	r3, r3
    7732:	021b      	lsls	r3, r3, #8
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    7734:	4313      	orrs	r3, r2
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    7736:	4a26      	ldr	r2, [pc, #152]	; (77d0 <cb_le_promisc+0x2fc>)
    7738:	6812      	ldr	r2, [r2, #0]
    773a:	7812      	ldrb	r2, [r2, #0]
    773c:	b2d2      	uxtb	r2, r2
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    773e:	4313      	orrs	r3, r2
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    7740:	65fb      	str	r3, [r7, #92]	; 0x5c
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
		see_aa(aa);
    7742:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    7744:	f7ff fe72 	bl	742c <see_aa>

		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);
    7748:	4b21      	ldr	r3, [pc, #132]	; (77d0 <cb_le_promisc+0x2fc>)
    774a:	681b      	ldr	r3, [r3, #0]
    774c:	2001      	movs	r0, #1
    774e:	4619      	mov	r1, r3
    7750:	f7fc feba 	bl	44c8 <enqueue>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    7754:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7756:	3301      	adds	r3, #1
    7758:	67fb      	str	r3, [r7, #124]	; 0x7c
    775a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    775c:	f5b3 7f3c 	cmp.w	r3, #752	; 0x2f0
    7760:	f6ff af25 	blt.w	75ae <cb_le_promisc+0xda>
		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    7764:	2300      	movs	r3, #0
    7766:	67fb      	str	r3, [r7, #124]	; 0x7c
    7768:	e020      	b.n	77ac <cb_le_promisc+0x2d8>
		if (le_promisc.active_aa[i].count > 3) {
    776a:	4a1a      	ldr	r2, [pc, #104]	; (77d4 <cb_le_promisc+0x300>)
    776c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    776e:	00db      	lsls	r3, r3, #3
    7770:	4413      	add	r3, r2
    7772:	685b      	ldr	r3, [r3, #4]
    7774:	2b03      	cmp	r3, #3
    7776:	dd16      	ble.n	77a6 <cb_le_promisc+0x2d2>
			le_set_access_address(le_promisc.active_aa[i].aa);
    7778:	4a16      	ldr	r2, [pc, #88]	; (77d4 <cb_le_promisc+0x300>)
    777a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    777c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    7780:	4618      	mov	r0, r3
    7782:	f7fe fd7d 	bl	6280 <le_set_access_address>
			data_cb = cb_follow_le;
    7786:	4b14      	ldr	r3, [pc, #80]	; (77d8 <cb_le_promisc+0x304>)
    7788:	4a14      	ldr	r2, [pc, #80]	; (77dc <cb_le_promisc+0x308>)
    778a:	601a      	str	r2, [r3, #0]
			packet_cb = promisc_follow_cb;
    778c:	4b14      	ldr	r3, [pc, #80]	; (77e0 <cb_le_promisc+0x30c>)
    778e:	4a15      	ldr	r2, [pc, #84]	; (77e4 <cb_le_promisc+0x310>)
    7790:	601a      	str	r2, [r3, #0]
			le.crc_verify = 0;
    7792:	4b15      	ldr	r3, [pc, #84]	; (77e8 <cb_le_promisc+0x314>)
    7794:	2200      	movs	r2, #0
    7796:	611a      	str	r2, [r3, #16]
			le_promisc_state(0, &le.access_address, 4);
    7798:	2000      	movs	r0, #0
    779a:	4913      	ldr	r1, [pc, #76]	; (77e8 <cb_le_promisc+0x314>)
    779c:	2204      	movs	r2, #4
    779e:	f7ff fc4b 	bl	7038 <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    77a2:	2300      	movs	r3, #0
    77a4:	e006      	b.n	77b4 <cb_le_promisc+0x2e0>
		enqueue(LE_PACKET, (uint8_t*)idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    77a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    77a8:	3301      	adds	r3, #1
    77aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    77ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    77ae:	2b1f      	cmp	r3, #31
    77b0:	dddb      	ble.n	776a <cb_le_promisc+0x296>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    77b2:	2301      	movs	r3, #1
}
    77b4:	4618      	mov	r0, r3
    77b6:	3784      	adds	r7, #132	; 0x84
    77b8:	46bd      	mov	sp, r7
    77ba:	bd90      	pop	{r4, r7, pc}
    77bc:	1000049c 	.word	0x1000049c
    77c0:	0000abfc 	.word	0x0000abfc
    77c4:	0000ab7c 	.word	0x0000ab7c
    77c8:	02040811 	.word	0x02040811
    77cc:	0000b41c 	.word	0x0000b41c
    77d0:	10000454 	.word	0x10000454
    77d4:	10000be4 	.word	0x10000be4
    77d8:	100009a8 	.word	0x100009a8
    77dc:	00006bb5 	.word	0x00006bb5
    77e0:	100009ac 	.word	0x100009ac
    77e4:	00007371 	.word	0x00007371
    77e8:	10000458 	.word	0x10000458

000077ec <bt_promisc_le>:

void bt_promisc_le() {
    77ec:	b580      	push	{r7, lr}
    77ee:	af00      	add	r7, sp, #0
	while (requested_mode == MODE_BT_PROMISC_LE) {
    77f0:	e02c      	b.n	784c <bt_promisc_le+0x60>
		reset_le_promisc();
    77f2:	f7fe fdab 	bl	634c <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    77f6:	4b18      	ldr	r3, [pc, #96]	; (7858 <bt_promisc_le+0x6c>)
    77f8:	881b      	ldrh	r3, [r3, #0]
    77fa:	b29b      	uxth	r3, r3
    77fc:	f003 0301 	and.w	r3, r3, #1
    7800:	2b00      	cmp	r3, #0
    7802:	d003      	beq.n	780c <bt_promisc_le+0x20>
			channel = 2440;
    7804:	4b14      	ldr	r3, [pc, #80]	; (7858 <bt_promisc_le+0x6c>)
    7806:	f640 1288 	movw	r2, #2440	; 0x988
    780a:	801a      	strh	r2, [r3, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    780c:	4b13      	ldr	r3, [pc, #76]	; (785c <bt_promisc_le+0x70>)
    780e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7810:	2b00      	cmp	r3, #0
    7812:	d107      	bne.n	7824 <bt_promisc_le+0x38>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set();
    7814:	f7fc ff38 	bl	4688 <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    7818:	4b11      	ldr	r3, [pc, #68]	; (7860 <bt_promisc_le+0x74>)
    781a:	4a12      	ldr	r2, [pc, #72]	; (7864 <bt_promisc_le+0x78>)
    781c:	601a      	str	r2, [r3, #0]
			bt_generic_le(MODE_BT_PROMISC_LE);
    781e:	200a      	movs	r0, #10
    7820:	f7fe fda4 	bl	636c <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    7824:	4b10      	ldr	r3, [pc, #64]	; (7868 <bt_promisc_le+0x7c>)
    7826:	781b      	ldrb	r3, [r3, #0]
    7828:	b2db      	uxtb	r3, r3
    782a:	2b0a      	cmp	r3, #10
    782c:	d000      	beq.n	7830 <bt_promisc_le+0x44>
			break;
    782e:	e012      	b.n	7856 <bt_promisc_le+0x6a>

		le_promisc_state(0, &le.access_address, 4);
    7830:	2000      	movs	r0, #0
    7832:	490a      	ldr	r1, [pc, #40]	; (785c <bt_promisc_le+0x70>)
    7834:	2204      	movs	r2, #4
    7836:	f7ff fbff 	bl	7038 <le_promisc_state>
		packet_cb = promisc_follow_cb;
    783a:	4b0c      	ldr	r3, [pc, #48]	; (786c <bt_promisc_le+0x80>)
    783c:	4a0c      	ldr	r2, [pc, #48]	; (7870 <bt_promisc_le+0x84>)
    783e:	601a      	str	r2, [r3, #0]
		le.crc_verify = 0;
    7840:	4b06      	ldr	r3, [pc, #24]	; (785c <bt_promisc_le+0x70>)
    7842:	2200      	movs	r2, #0
    7844:	611a      	str	r2, [r3, #16]
		bt_le_sync(MODE_BT_PROMISC_LE);
    7846:	200a      	movs	r0, #10
    7848:	f7fe feea 	bl	6620 <bt_le_sync>

	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
    784c:	4b06      	ldr	r3, [pc, #24]	; (7868 <bt_promisc_le+0x7c>)
    784e:	781b      	ldrb	r3, [r3, #0]
    7850:	b2db      	uxtb	r3, r3
    7852:	2b0a      	cmp	r3, #10
    7854:	d0cd      	beq.n	77f2 <bt_promisc_le+0x6>
		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
	}
}
    7856:	bd80      	pop	{r7, pc}
    7858:	1000049c 	.word	0x1000049c
    785c:	10000458 	.word	0x10000458
    7860:	100009a8 	.word	0x100009a8
    7864:	000074d5 	.word	0x000074d5
    7868:	10000a4f 	.word	0x10000a4f
    786c:	100009ac 	.word	0x100009ac
    7870:	00007371 	.word	0x00007371

00007874 <bt_slave_le>:

void bt_slave_le() {
    7874:	b590      	push	{r4, r7, lr}
    7876:	b089      	sub	sp, #36	; 0x24
    7878:	af00      	add	r7, sp, #0
	u32 calc_crc;
	int i;

	u8 adv_ind[] = {
    787a:	4a35      	ldr	r2, [pc, #212]	; (7950 <bt_slave_le+0xdc>)
    787c:	1d3b      	adds	r3, r7, #4
    787e:	4614      	mov	r4, r2
    7880:	6820      	ldr	r0, [r4, #0]
    7882:	6861      	ldr	r1, [r4, #4]
    7884:	68a2      	ldr	r2, [r4, #8]
    7886:	c307      	stmia	r3!, {r0, r1, r2}
    7888:	89a2      	ldrh	r2, [r4, #12]
    788a:	801a      	strh	r2, [r3, #0]

		// CRC (calc)
		0xff, 0xff, 0xff,
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;
    788c:	230b      	movs	r3, #11
    788e:	76fb      	strb	r3, [r7, #27]

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    7890:	2300      	movs	r3, #0
    7892:	61fb      	str	r3, [r7, #28]
    7894:	e00e      	b.n	78b4 <bt_slave_le+0x40>
		adv_ind[i+2] = slave_mac_address[5-i];
    7896:	69fb      	ldr	r3, [r7, #28]
    7898:	3302      	adds	r3, #2
    789a:	69fa      	ldr	r2, [r7, #28]
    789c:	f1c2 0205 	rsb	r2, r2, #5
    78a0:	492c      	ldr	r1, [pc, #176]	; (7954 <bt_slave_le+0xe0>)
    78a2:	5c8a      	ldrb	r2, [r1, r2]
    78a4:	f107 0120 	add.w	r1, r7, #32
    78a8:	440b      	add	r3, r1
    78aa:	f803 2c1c 	strb.w	r2, [r3, #-28]
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    78ae:	69fb      	ldr	r3, [r7, #28]
    78b0:	3301      	adds	r3, #1
    78b2:	61fb      	str	r3, [r7, #28]
    78b4:	69fb      	ldr	r3, [r7, #28]
    78b6:	2b05      	cmp	r3, #5
    78b8:	dded      	ble.n	7896 <bt_slave_le+0x22>
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
    78ba:	4b27      	ldr	r3, [pc, #156]	; (7958 <bt_slave_le+0xe4>)
    78bc:	68d9      	ldr	r1, [r3, #12]
    78be:	7efb      	ldrb	r3, [r7, #27]
    78c0:	1d3a      	adds	r2, r7, #4
    78c2:	4608      	mov	r0, r1
    78c4:	4611      	mov	r1, r2
    78c6:	461a      	mov	r2, r3
    78c8:	f000 fbd4 	bl	8074 <btle_calc_crc>
    78cc:	6178      	str	r0, [r7, #20]
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
    78ce:	7efb      	ldrb	r3, [r7, #27]
    78d0:	697a      	ldr	r2, [r7, #20]
    78d2:	b2d2      	uxtb	r2, r2
    78d4:	f107 0120 	add.w	r1, r7, #32
    78d8:	440b      	add	r3, r1
    78da:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    78de:	7efb      	ldrb	r3, [r7, #27]
    78e0:	3301      	adds	r3, #1
    78e2:	697a      	ldr	r2, [r7, #20]
    78e4:	0a12      	lsrs	r2, r2, #8
    78e6:	b2d2      	uxtb	r2, r2
    78e8:	f107 0120 	add.w	r1, r7, #32
    78ec:	440b      	add	r3, r1
    78ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    78f2:	7efb      	ldrb	r3, [r7, #27]
    78f4:	3302      	adds	r3, #2
    78f6:	697a      	ldr	r2, [r7, #20]
    78f8:	0c12      	lsrs	r2, r2, #16
    78fa:	b2d2      	uxtb	r2, r2
    78fc:	f107 0120 	add.w	r1, r7, #32
    7900:	440b      	add	r3, r1
    7902:	f803 2c1c 	strb.w	r2, [r3, #-28]

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    7906:	e01b      	b.n	7940 <bt_slave_le+0xcc>
		ICER0 = ICER0_ICE_USB;
    7908:	4b14      	ldr	r3, [pc, #80]	; (795c <bt_slave_le+0xe8>)
    790a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    790e:	601a      	str	r2, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
    7910:	4b12      	ldr	r3, [pc, #72]	; (795c <bt_slave_le+0xe8>)
    7912:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7916:	601a      	str	r2, [r3, #0]
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    7918:	7efb      	ldrb	r3, [r7, #27]
    791a:	3303      	adds	r3, #3
    791c:	b2da      	uxtb	r2, r3
    791e:	1d3b      	adds	r3, r7, #4
    7920:	480f      	ldr	r0, [pc, #60]	; (7960 <bt_slave_le+0xec>)
    7922:	4611      	mov	r1, r2
    7924:	461a      	mov	r2, r3
    7926:	f7fe f959 	bl	5bdc <le_transmit>
		ISER0 = ISER0_ISE_USB;
    792a:	4b0e      	ldr	r3, [pc, #56]	; (7964 <bt_slave_le+0xf0>)
    792c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7930:	601a      	str	r2, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    7932:	4b0c      	ldr	r3, [pc, #48]	; (7964 <bt_slave_le+0xf0>)
    7934:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7938:	601a      	str	r2, [r3, #0]
		msleep(100);
    793a:	2064      	movs	r0, #100	; 0x64
    793c:	f7fd fdbc 	bl	54b8 <msleep>
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    7940:	4b09      	ldr	r3, [pc, #36]	; (7968 <bt_slave_le+0xf4>)
    7942:	781b      	ldrb	r3, [r3, #0]
    7944:	b2db      	uxtb	r3, r3
    7946:	2b0c      	cmp	r3, #12
    7948:	d0de      	beq.n	7908 <bt_slave_le+0x94>
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
		msleep(100);
	}
}
    794a:	3724      	adds	r7, #36	; 0x24
    794c:	46bd      	mov	sp, r7
    794e:	bd90      	pop	{r4, r7, pc}
    7950:	0000b42c 	.word	0x0000b42c
    7954:	1000099c 	.word	0x1000099c
    7958:	10000458 	.word	0x10000458
    795c:	e000e180 	.word	0xe000e180
    7960:	8e89bed6 	.word	0x8e89bed6
    7964:	e000e100 	.word	0xe000e100
    7968:	10000a4f 	.word	0x10000a4f

0000796c <specan>:

/* spectrum analysis */
void specan()
{
    796c:	b590      	push	{r4, r7, lr}
    796e:	b091      	sub	sp, #68	; 0x44
    7970:	af00      	add	r7, sp, #0
	u16 f;
	u8 i = 0;
    7972:	2300      	movs	r3, #0
    7974:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	u8 buf[DMA_SIZE];

	RXLED_SET;
    7978:	4b59      	ldr	r3, [pc, #356]	; (7ae0 <specan+0x174>)
    797a:	2210      	movs	r2, #16
    797c:	601a      	str	r2, [r3, #0]

	queue_init();
    797e:	f000 fc9b 	bl	82b8 <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7982:	4b58      	ldr	r3, [pc, #352]	; (7ae4 <specan+0x178>)
    7984:	2280      	movs	r2, #128	; 0x80
    7986:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    7988:	2012      	movs	r0, #18
    798a:	f642 3122 	movw	r1, #11042	; 0x2b22
    798e:	f001 fe4d 	bl	962c <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7992:	2014      	movs	r0, #20
    7994:	f241 314b 	movw	r1, #4939	; 0x134b
    7998:	f001 fe48 	bl	962c <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    799c:	2020      	movs	r0, #32
    799e:	f240 1101 	movw	r1, #257	; 0x101
    79a2:	f001 fe43 	bl	962c <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    79a6:	2003      	movs	r0, #3
    79a8:	2129      	movs	r1, #41	; 0x29
    79aa:	f001 fe3f 	bl	962c <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    79ae:	bf00      	nop
    79b0:	f001 fef4 	bl	979c <cc2400_status>
    79b4:	4603      	mov	r3, r0
    79b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    79ba:	2b00      	cmp	r3, #0
    79bc:	d0f8      	beq.n	79b0 <specan+0x44>
	while ((cc2400_status() & FS_LOCK));
    79be:	bf00      	nop
    79c0:	f001 feec 	bl	979c <cc2400_status>
    79c4:	4603      	mov	r3, r0
    79c6:	f003 0304 	and.w	r3, r3, #4
    79ca:	2b00      	cmp	r3, #0
    79cc:	d1f8      	bne.n	79c0 <specan+0x54>

	while (requested_mode == MODE_SPECAN) {
    79ce:	e07a      	b.n	7ac6 <specan+0x15a>
		for (f = low_freq; f < high_freq + 1; f++) {
    79d0:	4b45      	ldr	r3, [pc, #276]	; (7ae8 <specan+0x17c>)
    79d2:	881b      	ldrh	r3, [r3, #0]
    79d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
    79d6:	e06f      	b.n	7ab8 <specan+0x14c>
			cc2400_set(FSDIV, f - 1);
    79d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    79da:	3b01      	subs	r3, #1
    79dc:	b29b      	uxth	r3, r3
    79de:	2002      	movs	r0, #2
    79e0:	4619      	mov	r1, r3
    79e2:	f001 fe23 	bl	962c <cc2400_set>
			cc2400_strobe(SFSON);
    79e6:	2061      	movs	r0, #97	; 0x61
    79e8:	f001 fee2 	bl	97b0 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    79ec:	bf00      	nop
    79ee:	f001 fed5 	bl	979c <cc2400_status>
    79f2:	4603      	mov	r3, r0
    79f4:	f003 0304 	and.w	r3, r3, #4
    79f8:	2b00      	cmp	r3, #0
    79fa:	d0f8      	beq.n	79ee <specan+0x82>
			cc2400_strobe(SRX);
    79fc:	2062      	movs	r0, #98	; 0x62
    79fe:	f001 fed7 	bl	97b0 <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    7a02:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    7a06:	607b      	str	r3, [r7, #4]
    7a08:	bf00      	nop
    7a0a:	687b      	ldr	r3, [r7, #4]
    7a0c:	3b01      	subs	r3, #1
    7a0e:	607b      	str	r3, [r7, #4]
    7a10:	2b00      	cmp	r3, #0
    7a12:	d1fa      	bne.n	7a0a <specan+0x9e>
			buf[3 * i] = (f >> 8) & 0xFF;
    7a14:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7a18:	4613      	mov	r3, r2
    7a1a:	005b      	lsls	r3, r3, #1
    7a1c:	4413      	add	r3, r2
    7a1e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7a20:	0a12      	lsrs	r2, r2, #8
    7a22:	b292      	uxth	r2, r2
    7a24:	b2d2      	uxtb	r2, r2
    7a26:	f107 0140 	add.w	r1, r7, #64	; 0x40
    7a2a:	440b      	add	r3, r1
    7a2c:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 1] = f  & 0xFF;
    7a30:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7a34:	4613      	mov	r3, r2
    7a36:	005b      	lsls	r3, r3, #1
    7a38:	4413      	add	r3, r2
    7a3a:	3301      	adds	r3, #1
    7a3c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7a3e:	b2d2      	uxtb	r2, r2
    7a40:	f107 0140 	add.w	r1, r7, #64	; 0x40
    7a44:	440b      	add	r3, r1
    7a46:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    7a4a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7a4e:	4613      	mov	r3, r2
    7a50:	005b      	lsls	r3, r3, #1
    7a52:	4413      	add	r3, r2
    7a54:	1c9c      	adds	r4, r3, #2
    7a56:	2006      	movs	r0, #6
    7a58:	f001 fdd2 	bl	9600 <cc2400_get>
    7a5c:	4603      	mov	r3, r0
    7a5e:	0a1b      	lsrs	r3, r3, #8
    7a60:	b29b      	uxth	r3, r3
    7a62:	b2da      	uxtb	r2, r3
    7a64:	f107 0340 	add.w	r3, r7, #64	; 0x40
    7a68:	4423      	add	r3, r4
    7a6a:	f803 2c38 	strb.w	r2, [r3, #-56]
			i++;
    7a6e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    7a72:	3301      	adds	r3, #1
    7a74:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (i == 16) {
    7a78:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    7a7c:	2b10      	cmp	r3, #16
    7a7e:	d10d      	bne.n	7a9c <specan+0x130>
				enqueue(SPECAN, buf);
    7a80:	f107 0308 	add.w	r3, r7, #8
    7a84:	2004      	movs	r0, #4
    7a86:	4619      	mov	r1, r3
    7a88:	f7fc fd1e 	bl	44c8 <enqueue>
				i = 0;
    7a8c:	2300      	movs	r3, #0
    7a8e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				handle_usb(clkn);
    7a92:	4b16      	ldr	r3, [pc, #88]	; (7aec <specan+0x180>)
    7a94:	681b      	ldr	r3, [r3, #0]
    7a96:	4618      	mov	r0, r3
    7a98:	f000 fcb4 	bl	8404 <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    7a9c:	2064      	movs	r0, #100	; 0x64
    7a9e:	f001 fe87 	bl	97b0 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    7aa2:	bf00      	nop
    7aa4:	f001 fe7a 	bl	979c <cc2400_status>
    7aa8:	4603      	mov	r3, r0
    7aaa:	f003 0304 	and.w	r3, r3, #4
    7aae:	2b00      	cmp	r3, #0
    7ab0:	d1f8      	bne.n	7aa4 <specan+0x138>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    7ab2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    7ab4:	3301      	adds	r3, #1
    7ab6:	87fb      	strh	r3, [r7, #62]	; 0x3e
    7ab8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7aba:	4b0d      	ldr	r3, [pc, #52]	; (7af0 <specan+0x184>)
    7abc:	881b      	ldrh	r3, [r3, #0]
    7abe:	b29b      	uxth	r3, r3
    7ac0:	3301      	adds	r3, #1
    7ac2:	429a      	cmp	r2, r3
    7ac4:	db88      	blt.n	79d8 <specan+0x6c>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
    7ac6:	4b0b      	ldr	r3, [pc, #44]	; (7af4 <specan+0x188>)
    7ac8:	781b      	ldrb	r3, [r3, #0]
    7aca:	b2db      	uxtb	r3, r3
    7acc:	2b04      	cmp	r3, #4
    7ace:	f43f af7f 	beq.w	79d0 <specan+0x64>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	RXLED_CLR;
    7ad2:	4b09      	ldr	r3, [pc, #36]	; (7af8 <specan+0x18c>)
    7ad4:	2210      	movs	r2, #16
    7ad6:	601a      	str	r2, [r3, #0]
}
    7ad8:	3744      	adds	r7, #68	; 0x44
    7ada:	46bd      	mov	sp, r7
    7adc:	bd90      	pop	{r4, r7, pc}
    7ade:	bf00      	nop
    7ae0:	2009c038 	.word	0x2009c038
    7ae4:	2009c058 	.word	0x2009c058
    7ae8:	1000049e 	.word	0x1000049e
    7aec:	10000984 	.word	0x10000984
    7af0:	100004a0 	.word	0x100004a0
    7af4:	10000a4f 	.word	0x10000a4f
    7af8:	2009c03c 	.word	0x2009c03c

00007afc <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    7afc:	b580      	push	{r7, lr}
    7afe:	b084      	sub	sp, #16
    7b00:	af00      	add	r7, sp, #0
	int8_t lvl;
	u8 i = 0;
    7b02:	2300      	movs	r3, #0
    7b04:	73fb      	strb	r3, [r7, #15]
	u16 channels[3] = {2412, 2437, 2462};
    7b06:	4a5a      	ldr	r2, [pc, #360]	; (7c70 <led_specan+0x174>)
    7b08:	f107 0308 	add.w	r3, r7, #8
    7b0c:	6810      	ldr	r0, [r2, #0]
    7b0e:	6018      	str	r0, [r3, #0]
    7b10:	8892      	ldrh	r2, [r2, #4]
    7b12:	809a      	strh	r2, [r3, #4]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7b14:	4b57      	ldr	r3, [pc, #348]	; (7c74 <led_specan+0x178>)
    7b16:	2280      	movs	r2, #128	; 0x80
    7b18:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    7b1a:	2012      	movs	r0, #18
    7b1c:	f642 3122 	movw	r1, #11042	; 0x2b22
    7b20:	f001 fd84 	bl	962c <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7b24:	2014      	movs	r0, #20
    7b26:	f241 314b 	movw	r1, #4939	; 0x134b
    7b2a:	f001 fd7f 	bl	962c <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    7b2e:	2020      	movs	r0, #32
    7b30:	f240 1101 	movw	r1, #257	; 0x101
    7b34:	f001 fd7a 	bl	962c <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    7b38:	2003      	movs	r0, #3
    7b3a:	2129      	movs	r1, #41	; 0x29
    7b3c:	f001 fd76 	bl	962c <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    7b40:	2006      	movs	r0, #6
    7b42:	21f1      	movs	r1, #241	; 0xf1
    7b44:	f001 fd72 	bl	962c <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7b48:	bf00      	nop
    7b4a:	f001 fe27 	bl	979c <cc2400_status>
    7b4e:	4603      	mov	r3, r0
    7b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7b54:	2b00      	cmp	r3, #0
    7b56:	d0f8      	beq.n	7b4a <led_specan+0x4e>
	while ((cc2400_status() & FS_LOCK));
    7b58:	bf00      	nop
    7b5a:	f001 fe1f 	bl	979c <cc2400_status>
    7b5e:	4603      	mov	r3, r0
    7b60:	f003 0304 	and.w	r3, r3, #4
    7b64:	2b00      	cmp	r3, #0
    7b66:	d1f8      	bne.n	7b5a <led_specan+0x5e>

	while (requested_mode == MODE_LED_SPECAN) {
    7b68:	e079      	b.n	7c5e <led_specan+0x162>
		cc2400_set(FSDIV, channels[i] - 1);
    7b6a:	7bfb      	ldrb	r3, [r7, #15]
    7b6c:	005b      	lsls	r3, r3, #1
    7b6e:	f107 0210 	add.w	r2, r7, #16
    7b72:	4413      	add	r3, r2
    7b74:	f833 3c08 	ldrh.w	r3, [r3, #-8]
    7b78:	3b01      	subs	r3, #1
    7b7a:	b29b      	uxth	r3, r3
    7b7c:	2002      	movs	r0, #2
    7b7e:	4619      	mov	r1, r3
    7b80:	f001 fd54 	bl	962c <cc2400_set>
		cc2400_strobe(SFSON);
    7b84:	2061      	movs	r0, #97	; 0x61
    7b86:	f001 fe13 	bl	97b0 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    7b8a:	bf00      	nop
    7b8c:	f001 fe06 	bl	979c <cc2400_status>
    7b90:	4603      	mov	r3, r0
    7b92:	f003 0304 	and.w	r3, r3, #4
    7b96:	2b00      	cmp	r3, #0
    7b98:	d0f8      	beq.n	7b8c <led_specan+0x90>
		cc2400_strobe(SRX);
    7b9a:	2062      	movs	r0, #98	; 0x62
    7b9c:	f001 fe08 	bl	97b0 <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    7ba0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    7ba4:	607b      	str	r3, [r7, #4]
    7ba6:	bf00      	nop
    7ba8:	687b      	ldr	r3, [r7, #4]
    7baa:	3b01      	subs	r3, #1
    7bac:	607b      	str	r3, [r7, #4]
    7bae:	2b00      	cmp	r3, #0
    7bb0:	d1fa      	bne.n	7ba8 <led_specan+0xac>
		lvl = cc2400_get(RSSI) >> 8;
    7bb2:	2006      	movs	r0, #6
    7bb4:	f001 fd24 	bl	9600 <cc2400_get>
    7bb8:	4603      	mov	r3, r0
    7bba:	0a1b      	lsrs	r3, r3, #8
    7bbc:	b29b      	uxth	r3, r3
    7bbe:	73bb      	strb	r3, [r7, #14]
		if (lvl > rssi_threshold) {
    7bc0:	4b2d      	ldr	r3, [pc, #180]	; (7c78 <led_specan+0x17c>)
    7bc2:	781b      	ldrb	r3, [r3, #0]
    7bc4:	b2db      	uxtb	r3, r3
    7bc6:	f997 200e 	ldrsb.w	r2, [r7, #14]
    7bca:	b25b      	sxtb	r3, r3
    7bcc:	429a      	cmp	r2, r3
    7bce:	dd15      	ble.n	7bfc <led_specan+0x100>
			switch (i) {
    7bd0:	7bfb      	ldrb	r3, [r7, #15]
    7bd2:	2b01      	cmp	r3, #1
    7bd4:	d009      	beq.n	7bea <led_specan+0xee>
    7bd6:	2b02      	cmp	r3, #2
    7bd8:	d00b      	beq.n	7bf2 <led_specan+0xf6>
    7bda:	2b00      	cmp	r3, #0
    7bdc:	d000      	beq.n	7be0 <led_specan+0xe4>
    7bde:	e021      	b.n	7c24 <led_specan+0x128>
				case 0:
					TXLED_SET;
    7be0:	4b26      	ldr	r3, [pc, #152]	; (7c7c <led_specan+0x180>)
    7be2:	f44f 7280 	mov.w	r2, #256	; 0x100
    7be6:	601a      	str	r2, [r3, #0]
					break;
    7be8:	e007      	b.n	7bfa <led_specan+0xfe>
				case 1:
					RXLED_SET;
    7bea:	4b24      	ldr	r3, [pc, #144]	; (7c7c <led_specan+0x180>)
    7bec:	2210      	movs	r2, #16
    7bee:	601a      	str	r2, [r3, #0]
					break;
    7bf0:	e003      	b.n	7bfa <led_specan+0xfe>
				case 2:
					USRLED_SET;
    7bf2:	4b22      	ldr	r3, [pc, #136]	; (7c7c <led_specan+0x180>)
    7bf4:	2202      	movs	r2, #2
    7bf6:	601a      	str	r2, [r3, #0]
					break;
    7bf8:	bf00      	nop
    7bfa:	e013      	b.n	7c24 <led_specan+0x128>
			}
		}
		else {
			switch (i) {
    7bfc:	7bfb      	ldrb	r3, [r7, #15]
    7bfe:	2b01      	cmp	r3, #1
    7c00:	d008      	beq.n	7c14 <led_specan+0x118>
    7c02:	2b02      	cmp	r3, #2
    7c04:	d00a      	beq.n	7c1c <led_specan+0x120>
    7c06:	2b00      	cmp	r3, #0
    7c08:	d10c      	bne.n	7c24 <led_specan+0x128>
				case 0:
					TXLED_CLR;
    7c0a:	4b1d      	ldr	r3, [pc, #116]	; (7c80 <led_specan+0x184>)
    7c0c:	f44f 7280 	mov.w	r2, #256	; 0x100
    7c10:	601a      	str	r2, [r3, #0]
					break;
    7c12:	e007      	b.n	7c24 <led_specan+0x128>
				case 1:
					RXLED_CLR;
    7c14:	4b1a      	ldr	r3, [pc, #104]	; (7c80 <led_specan+0x184>)
    7c16:	2210      	movs	r2, #16
    7c18:	601a      	str	r2, [r3, #0]
					break;
    7c1a:	e003      	b.n	7c24 <led_specan+0x128>
				case 2:
					USRLED_CLR;
    7c1c:	4b18      	ldr	r3, [pc, #96]	; (7c80 <led_specan+0x184>)
    7c1e:	2202      	movs	r2, #2
    7c20:	601a      	str	r2, [r3, #0]
					break;
    7c22:	bf00      	nop
			}
		}

		i = (i+1) % 3;
    7c24:	7bfb      	ldrb	r3, [r7, #15]
    7c26:	1c5a      	adds	r2, r3, #1
    7c28:	4b16      	ldr	r3, [pc, #88]	; (7c84 <led_specan+0x188>)
    7c2a:	fb83 3102 	smull	r3, r1, r3, r2
    7c2e:	17d3      	asrs	r3, r2, #31
    7c30:	1ac9      	subs	r1, r1, r3
    7c32:	460b      	mov	r3, r1
    7c34:	005b      	lsls	r3, r3, #1
    7c36:	440b      	add	r3, r1
    7c38:	1ad1      	subs	r1, r2, r3
    7c3a:	460b      	mov	r3, r1
    7c3c:	73fb      	strb	r3, [r7, #15]

		handle_usb(clkn);
    7c3e:	4b12      	ldr	r3, [pc, #72]	; (7c88 <led_specan+0x18c>)
    7c40:	681b      	ldr	r3, [r3, #0]
    7c42:	4618      	mov	r0, r3
    7c44:	f000 fbde 	bl	8404 <handle_usb>

		cc2400_strobe(SRFOFF);
    7c48:	2064      	movs	r0, #100	; 0x64
    7c4a:	f001 fdb1 	bl	97b0 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    7c4e:	bf00      	nop
    7c50:	f001 fda4 	bl	979c <cc2400_status>
    7c54:	4603      	mov	r3, r0
    7c56:	f003 0304 	and.w	r3, r3, #4
    7c5a:	2b00      	cmp	r3, #0
    7c5c:	d1f8      	bne.n	7c50 <led_specan+0x154>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols

	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_LED_SPECAN) {
    7c5e:	4b0b      	ldr	r3, [pc, #44]	; (7c8c <led_specan+0x190>)
    7c60:	781b      	ldrb	r3, [r3, #0]
    7c62:	b2db      	uxtb	r3, r3
    7c64:	2b07      	cmp	r3, #7
    7c66:	d080      	beq.n	7b6a <led_specan+0x6e>
		handle_usb(clkn);

		cc2400_strobe(SRFOFF);
		while ((cc2400_status() & FS_LOCK));
	}
}
    7c68:	3710      	adds	r7, #16
    7c6a:	46bd      	mov	sp, r7
    7c6c:	bd80      	pop	{r7, pc}
    7c6e:	bf00      	nop
    7c70:	0000b43c 	.word	0x0000b43c
    7c74:	2009c058 	.word	0x2009c058
    7c78:	100004a2 	.word	0x100004a2
    7c7c:	2009c038 	.word	0x2009c038
    7c80:	2009c03c 	.word	0x2009c03c
    7c84:	55555556 	.word	0x55555556
    7c88:	10000984 	.word	0x10000984
    7c8c:	10000a4f 	.word	0x10000a4f

00007c90 <main>:

int main()
{
    7c90:	b580      	push	{r7, lr}
    7c92:	af00      	add	r7, sp, #0
	ubertooth_init();
    7c94:	f001 fbee 	bl	9474 <ubertooth_init>
	clkn_init();
    7c98:	f7fd fb1c 	bl	52d4 <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    7c9c:	483d      	ldr	r0, [pc, #244]	; (7d94 <main+0x104>)
    7c9e:	f000 fae3 	bl	8268 <ubertooth_usb_init>

	while (1) {
		handle_usb(clkn);
    7ca2:	4b3d      	ldr	r3, [pc, #244]	; (7d98 <main+0x108>)
    7ca4:	681b      	ldr	r3, [r3, #0]
    7ca6:	4618      	mov	r0, r3
    7ca8:	f000 fbac 	bl	8404 <handle_usb>
		if(requested_mode != mode) {
    7cac:	4b3b      	ldr	r3, [pc, #236]	; (7d9c <main+0x10c>)
    7cae:	781b      	ldrb	r3, [r3, #0]
    7cb0:	b2da      	uxtb	r2, r3
    7cb2:	4b3b      	ldr	r3, [pc, #236]	; (7da0 <main+0x110>)
    7cb4:	781b      	ldrb	r3, [r3, #0]
    7cb6:	b2db      	uxtb	r3, r3
    7cb8:	429a      	cmp	r2, r3
    7cba:	d06a      	beq.n	7d92 <main+0x102>
			switch (requested_mode) {
    7cbc:	4b37      	ldr	r3, [pc, #220]	; (7d9c <main+0x10c>)
    7cbe:	781b      	ldrb	r3, [r3, #0]
    7cc0:	b2db      	uxtb	r3, r3
    7cc2:	2b0d      	cmp	r3, #13
    7cc4:	d864      	bhi.n	7d90 <main+0x100>
    7cc6:	a201      	add	r2, pc, #4	; (adr r2, 7ccc <main+0x3c>)
    7cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7ccc:	00007d8b 	.word	0x00007d8b
    7cd0:	00007d11 	.word	0x00007d11
    7cd4:	00007d91 	.word	0x00007d91
    7cd8:	00007d3f 	.word	0x00007d3f
    7cdc:	00007d6b 	.word	0x00007d6b
    7ce0:	00007d4f 	.word	0x00007d4f
    7ce4:	00007d63 	.word	0x00007d63
    7ce8:	00007d71 	.word	0x00007d71
    7cec:	00007d21 	.word	0x00007d21
    7cf0:	00007d2d 	.word	0x00007d2d
    7cf4:	00007d33 	.word	0x00007d33
    7cf8:	00007d05 	.word	0x00007d05
    7cfc:	00007d39 	.word	0x00007d39
    7d00:	00007d77 	.word	0x00007d77
				 case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    7d04:	2001      	movs	r0, #1
    7d06:	f001 faad 	bl	9264 <wait>
					reset();
    7d0a:	f001 fe5b 	bl	99c4 <reset>
					break;
    7d0e:	e040      	b.n	7d92 <main+0x102>
//				case MODE_AFH:
//					mode = MODE_AFH;
//					bt_stream_rx();
//					break;
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    7d10:	4b23      	ldr	r3, [pc, #140]	; (7da0 <main+0x110>)
    7d12:	2201      	movs	r2, #1
    7d14:	701a      	strb	r2, [r3, #0]
					queue_init();
    7d16:	f000 facf 	bl	82b8 <queue_init>
					bt_stream_rx();
    7d1a:	f7fe f979 	bl	6010 <bt_stream_rx>
					break;
    7d1e:	e038      	b.n	7d92 <main+0x102>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    7d20:	4b1f      	ldr	r3, [pc, #124]	; (7da0 <main+0x110>)
    7d22:	2208      	movs	r2, #8
    7d24:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    7d26:	f7fe f973 	bl	6010 <bt_stream_rx>
					break;
    7d2a:	e032      	b.n	7d92 <main+0x102>
				case MODE_BT_FOLLOW_LE:
					bt_follow_le();
    7d2c:	f7ff f970 	bl	7010 <bt_follow_le>
					break;
    7d30:	e02f      	b.n	7d92 <main+0x102>
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    7d32:	f7ff fd5b 	bl	77ec <bt_promisc_le>
					break;
    7d36:	e02c      	b.n	7d92 <main+0x102>
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
    7d38:	f7ff fd9c 	bl	7874 <bt_slave_le>
					break;
    7d3c:	e029      	b.n	7d92 <main+0x102>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    7d3e:	4b18      	ldr	r3, [pc, #96]	; (7da0 <main+0x110>)
    7d40:	2203      	movs	r2, #3
    7d42:	701a      	strb	r2, [r3, #0]
					cc2400_txtest(&modulation, &channel);
    7d44:	4817      	ldr	r0, [pc, #92]	; (7da4 <main+0x114>)
    7d46:	4918      	ldr	r1, [pc, #96]	; (7da8 <main+0x118>)
    7d48:	f000 fd98 	bl	887c <cc2400_txtest>
					break;
    7d4c:	e021      	b.n	7d92 <main+0x102>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    7d4e:	4b14      	ldr	r3, [pc, #80]	; (7da0 <main+0x110>)
    7d50:	2205      	movs	r2, #5
    7d52:	701a      	strb	r2, [r3, #0]
					cc2400_rangetest(&channel);
    7d54:	4814      	ldr	r0, [pc, #80]	; (7da8 <main+0x118>)
    7d56:	f000 fb73 	bl	8440 <cc2400_rangetest>
					requested_mode = MODE_IDLE;
    7d5a:	4b10      	ldr	r3, [pc, #64]	; (7d9c <main+0x10c>)
    7d5c:	2200      	movs	r2, #0
    7d5e:	701a      	strb	r2, [r3, #0]
					break;
    7d60:	e017      	b.n	7d92 <main+0x102>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    7d62:	4b0f      	ldr	r3, [pc, #60]	; (7da0 <main+0x110>)
    7d64:	2206      	movs	r2, #6
    7d66:	701a      	strb	r2, [r3, #0]
//					cc2400_repeater(&channel);
					break;
    7d68:	e013      	b.n	7d92 <main+0x102>
				case MODE_SPECAN:
					specan();
    7d6a:	f7ff fdff 	bl	796c <specan>
					break;
    7d6e:	e010      	b.n	7d92 <main+0x102>
				case MODE_LED_SPECAN:
					led_specan();
    7d70:	f7ff fec4 	bl	7afc <led_specan>
					break;
    7d74:	e00d      	b.n	7d92 <main+0x102>
				case MODE_EGO:
					mode = MODE_EGO;
    7d76:	4b0a      	ldr	r3, [pc, #40]	; (7da0 <main+0x110>)
    7d78:	220d      	movs	r2, #13
    7d7a:	701a      	strb	r2, [r3, #0]
					ego_main(ego_mode);
    7d7c:	4b0b      	ldr	r3, [pc, #44]	; (7dac <main+0x11c>)
    7d7e:	781b      	ldrb	r3, [r3, #0]
    7d80:	b2db      	uxtb	r3, r3
    7d82:	4618      	mov	r0, r3
    7d84:	f001 f9bc 	bl	9100 <ego_main>
					break;
    7d88:	e003      	b.n	7d92 <main+0x102>
				case MODE_IDLE:
					cc2400_idle();
    7d8a:	f7fd fe35 	bl	59f8 <cc2400_idle>
					break;
    7d8e:	e000      	b.n	7d92 <main+0x102>
				default:
					/* This is really an error state, but what can you do? */
					break;
    7d90:	bf00      	nop
			}
		}
	}
    7d92:	e786      	b.n	7ca2 <main+0x12>
    7d94:	00004775 	.word	0x00004775
    7d98:	10000984 	.word	0x10000984
    7d9c:	10000a4f 	.word	0x10000a4f
    7da0:	10000a4e 	.word	0x10000a4e
    7da4:	10000a52 	.word	0x10000a52
    7da8:	1000049c 	.word	0x1000049c
    7dac:	10000a51 	.word	0x10000a51

00007db0 <count_bits>:
u8 afh_bank[CHANNELS];
u8 used_channels;

/* count the number of 1 bits in a uint64_t */
uint8_t count_bits(uint64_t n)
{
    7db0:	b480      	push	{r7}
    7db2:	b085      	sub	sp, #20
    7db4:	af00      	add	r7, sp, #0
    7db6:	e9c7 0100 	strd	r0, r1, [r7]
	uint8_t i = 0;
    7dba:	2300      	movs	r3, #0
    7dbc:	73fb      	strb	r3, [r7, #15]
	for (i = 0; n != 0; i++)
    7dbe:	2300      	movs	r3, #0
    7dc0:	73fb      	strb	r3, [r7, #15]
    7dc2:	e010      	b.n	7de6 <count_bits+0x36>
		n &= n - 1;
    7dc4:	e9d7 2300 	ldrd	r2, r3, [r7]
    7dc8:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    7dcc:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    7dd0:	e9d7 0100 	ldrd	r0, r1, [r7]
    7dd4:	ea02 0200 	and.w	r2, r2, r0
    7dd8:	ea03 0301 	and.w	r3, r3, r1
    7ddc:	e9c7 2300 	strd	r2, r3, [r7]

/* count the number of 1 bits in a uint64_t */
uint8_t count_bits(uint64_t n)
{
	uint8_t i = 0;
	for (i = 0; n != 0; i++)
    7de0:	7bfb      	ldrb	r3, [r7, #15]
    7de2:	3301      	adds	r3, #1
    7de4:	73fb      	strb	r3, [r7, #15]
    7de6:	e9d7 2300 	ldrd	r2, r3, [r7]
    7dea:	4313      	orrs	r3, r2
    7dec:	d1ea      	bne.n	7dc4 <count_bits+0x14>
		n &= n - 1;
	return i;
    7dee:	7bfb      	ldrb	r3, [r7, #15]
}
    7df0:	4618      	mov	r0, r3
    7df2:	3714      	adds	r7, #20
    7df4:	46bd      	mov	sp, r7
    7df6:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dfa:	4770      	bx	lr

00007dfc <precalc>:

/* do all of the one time precalculation */
void precalc(void)
{
    7dfc:	b580      	push	{r7, lr}
    7dfe:	b084      	sub	sp, #16
    7e00:	af00      	add	r7, sp, #0
	u8 i, j, chan;
	u32 address;
	address = target.address & 0xffffffff;
    7e02:	4b7a      	ldr	r3, [pc, #488]	; (7fec <precalc+0x1f0>)
    7e04:	e9d3 2300 	ldrd	r2, r3, [r3]
    7e08:	4613      	mov	r3, r2
    7e0a:	60bb      	str	r3, [r7, #8]
	syncword = 0;
    7e0c:	4978      	ldr	r1, [pc, #480]	; (7ff0 <precalc+0x1f4>)
    7e0e:	f04f 0200 	mov.w	r2, #0
    7e12:	f04f 0300 	mov.w	r3, #0
    7e16:	e9c1 2300 	strd	r2, r3, [r1]

	/* populate frequency register bank*/
	for (i = 0; i < CHANNELS; i++)
    7e1a:	2300      	movs	r3, #0
    7e1c:	73fb      	strb	r3, [r7, #15]
    7e1e:	e014      	b.n	7e4a <precalc+0x4e>
		bank[i] = ((i * 2) % CHANNELS);
    7e20:	7bf8      	ldrb	r0, [r7, #15]
    7e22:	7bfb      	ldrb	r3, [r7, #15]
    7e24:	0059      	lsls	r1, r3, #1
    7e26:	4b73      	ldr	r3, [pc, #460]	; (7ff4 <precalc+0x1f8>)
    7e28:	fb83 2301 	smull	r2, r3, r3, r1
    7e2c:	115a      	asrs	r2, r3, #5
    7e2e:	17cb      	asrs	r3, r1, #31
    7e30:	1ad2      	subs	r2, r2, r3
    7e32:	4613      	mov	r3, r2
    7e34:	009b      	lsls	r3, r3, #2
    7e36:	4413      	add	r3, r2
    7e38:	011b      	lsls	r3, r3, #4
    7e3a:	1a9b      	subs	r3, r3, r2
    7e3c:	1aca      	subs	r2, r1, r3
    7e3e:	b2d2      	uxtb	r2, r2
    7e40:	4b6d      	ldr	r3, [pc, #436]	; (7ff8 <precalc+0x1fc>)
    7e42:	541a      	strb	r2, [r3, r0]
	u32 address;
	address = target.address & 0xffffffff;
	syncword = 0;

	/* populate frequency register bank*/
	for (i = 0; i < CHANNELS; i++)
    7e44:	7bfb      	ldrb	r3, [r7, #15]
    7e46:	3301      	adds	r3, #1
    7e48:	73fb      	strb	r3, [r7, #15]
    7e4a:	7bfb      	ldrb	r3, [r7, #15]
    7e4c:	2b4e      	cmp	r3, #78	; 0x4e
    7e4e:	d9e7      	bls.n	7e20 <precalc+0x24>
		bank[i] = ((i * 2) % CHANNELS);
		/* actual frequency is 2402 + bank[i] MHz */


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
    7e50:	68bb      	ldr	r3, [r7, #8]
    7e52:	0ddb      	lsrs	r3, r3, #23
    7e54:	b2db      	uxtb	r3, r3
    7e56:	f003 031f 	and.w	r3, r3, #31
    7e5a:	b2da      	uxtb	r2, r3
    7e5c:	4b67      	ldr	r3, [pc, #412]	; (7ffc <precalc+0x200>)
    7e5e:	701a      	strb	r2, [r3, #0]
	b = (address >> 19) & 0x0f;
    7e60:	68bb      	ldr	r3, [r7, #8]
    7e62:	0cdb      	lsrs	r3, r3, #19
    7e64:	b2db      	uxtb	r3, r3
    7e66:	f003 030f 	and.w	r3, r3, #15
    7e6a:	b2da      	uxtb	r2, r3
    7e6c:	4b64      	ldr	r3, [pc, #400]	; (8000 <precalc+0x204>)
    7e6e:	701a      	strb	r2, [r3, #0]
	c1 = ((address >> 4) & 0x10) +
    7e70:	68bb      	ldr	r3, [r7, #8]
    7e72:	091b      	lsrs	r3, r3, #4
    7e74:	b2db      	uxtb	r3, r3
    7e76:	f003 0310 	and.w	r3, r3, #16
    7e7a:	b2da      	uxtb	r2, r3
		((address >> 3) & 0x08) +
    7e7c:	68bb      	ldr	r3, [r7, #8]
    7e7e:	08db      	lsrs	r3, r3, #3


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    7e80:	b2db      	uxtb	r3, r3
    7e82:	f003 0308 	and.w	r3, r3, #8
    7e86:	b2db      	uxtb	r3, r3
    7e88:	4413      	add	r3, r2
    7e8a:	b2da      	uxtb	r2, r3
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
    7e8c:	68bb      	ldr	r3, [r7, #8]
    7e8e:	089b      	lsrs	r3, r3, #2


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    7e90:	b2db      	uxtb	r3, r3
    7e92:	f003 0304 	and.w	r3, r3, #4
    7e96:	b2db      	uxtb	r3, r3
    7e98:	4413      	add	r3, r2
    7e9a:	b2da      	uxtb	r2, r3
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
    7e9c:	68bb      	ldr	r3, [r7, #8]
    7e9e:	085b      	lsrs	r3, r3, #1


	/* precalculate some of next_hop()'s variables */
	a1 = (address >> 23) & 0x1f;
	b = (address >> 19) & 0x0f;
	c1 = ((address >> 4) & 0x10) +
    7ea0:	b2db      	uxtb	r3, r3
    7ea2:	f003 0302 	and.w	r3, r3, #2
    7ea6:	b2db      	uxtb	r3, r3
    7ea8:	4413      	add	r3, r2
    7eaa:	b2da      	uxtb	r2, r3
    7eac:	68bb      	ldr	r3, [r7, #8]
    7eae:	b2db      	uxtb	r3, r3
    7eb0:	f003 0301 	and.w	r3, r3, #1
    7eb4:	b2db      	uxtb	r3, r3
    7eb6:	4413      	add	r3, r2
    7eb8:	b2da      	uxtb	r2, r3
    7eba:	4b52      	ldr	r3, [pc, #328]	; (8004 <precalc+0x208>)
    7ebc:	701a      	strb	r2, [r3, #0]
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
    7ebe:	68bb      	ldr	r3, [r7, #8]
    7ec0:	0a9b      	lsrs	r3, r3, #10
    7ec2:	b29b      	uxth	r3, r3
    7ec4:	f3c3 0308 	ubfx	r3, r3, #0, #9
    7ec8:	b29a      	uxth	r2, r3
    7eca:	4b4f      	ldr	r3, [pc, #316]	; (8008 <precalc+0x20c>)
    7ecc:	801a      	strh	r2, [r3, #0]
	e = ((address >> 7) & 0x40) +
    7ece:	68bb      	ldr	r3, [r7, #8]
    7ed0:	09db      	lsrs	r3, r3, #7
    7ed2:	b2db      	uxtb	r3, r3
    7ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7ed8:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
    7eda:	68bb      	ldr	r3, [r7, #8]
    7edc:	099b      	lsrs	r3, r3, #6
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    7ede:	b2db      	uxtb	r3, r3
    7ee0:	f003 0320 	and.w	r3, r3, #32
    7ee4:	b2db      	uxtb	r3, r3
    7ee6:	4413      	add	r3, r2
    7ee8:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
    7eea:	68bb      	ldr	r3, [r7, #8]
    7eec:	095b      	lsrs	r3, r3, #5
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    7eee:	b2db      	uxtb	r3, r3
    7ef0:	f003 0310 	and.w	r3, r3, #16
    7ef4:	b2db      	uxtb	r3, r3
    7ef6:	4413      	add	r3, r2
    7ef8:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
		((address >> 4) & 0x08) +
    7efa:	68bb      	ldr	r3, [r7, #8]
    7efc:	091b      	lsrs	r3, r3, #4
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    7efe:	b2db      	uxtb	r3, r3
    7f00:	f003 0308 	and.w	r3, r3, #8
    7f04:	b2db      	uxtb	r3, r3
    7f06:	4413      	add	r3, r2
    7f08:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
    7f0a:	68bb      	ldr	r3, [r7, #8]
    7f0c:	08db      	lsrs	r3, r3, #3
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    7f0e:	b2db      	uxtb	r3, r3
    7f10:	f003 0304 	and.w	r3, r3, #4
    7f14:	b2db      	uxtb	r3, r3
    7f16:	4413      	add	r3, r2
    7f18:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
		((address >> 2) & 0x02) +
    7f1a:	68bb      	ldr	r3, [r7, #8]
    7f1c:	089b      	lsrs	r3, r3, #2
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    7f1e:	b2db      	uxtb	r3, r3
    7f20:	f003 0302 	and.w	r3, r3, #2
    7f24:	b2db      	uxtb	r3, r3
    7f26:	4413      	add	r3, r2
    7f28:	b2da      	uxtb	r2, r3
		((address >> 6) & 0x20) +
		((address >> 5) & 0x10) +
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);
    7f2a:	68bb      	ldr	r3, [r7, #8]
    7f2c:	085b      	lsrs	r3, r3, #1
		((address >> 3) & 0x08) +
		((address >> 2) & 0x04) +
		((address >> 1) & 0x02) +
		(address & 0x01);
	d1 = (address >> 10) & 0x1ff;
	e = ((address >> 7) & 0x40) +
    7f2e:	b2db      	uxtb	r3, r3
    7f30:	f003 0301 	and.w	r3, r3, #1
    7f34:	b2db      	uxtb	r3, r3
    7f36:	4413      	add	r3, r2
    7f38:	b2da      	uxtb	r2, r3
    7f3a:	4b34      	ldr	r3, [pc, #208]	; (800c <precalc+0x210>)
    7f3c:	701a      	strb	r2, [r3, #0]
		((address >> 4) & 0x08) +
		((address >> 3) & 0x04) +
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
    7f3e:	4b34      	ldr	r3, [pc, #208]	; (8010 <precalc+0x214>)
    7f40:	781b      	ldrb	r3, [r3, #0]
    7f42:	2b00      	cmp	r3, #0
    7f44:	d04f      	beq.n	7fe6 <precalc+0x1ea>
		used_channels = 0;
    7f46:	4b33      	ldr	r3, [pc, #204]	; (8014 <precalc+0x218>)
    7f48:	2200      	movs	r2, #0
    7f4a:	701a      	strb	r2, [r3, #0]
		for(i = 0; i < 10; i++)
    7f4c:	2300      	movs	r3, #0
    7f4e:	73fb      	strb	r3, [r7, #15]
    7f50:	e014      	b.n	7f7c <precalc+0x180>
			used_channels += count_bits((uint64_t) afh_map[i]);
    7f52:	7bfb      	ldrb	r3, [r7, #15]
    7f54:	4a30      	ldr	r2, [pc, #192]	; (8018 <precalc+0x21c>)
    7f56:	5cd3      	ldrb	r3, [r2, r3]
    7f58:	b2da      	uxtb	r2, r3
    7f5a:	f04f 0300 	mov.w	r3, #0
    7f5e:	4610      	mov	r0, r2
    7f60:	4619      	mov	r1, r3
    7f62:	f7ff ff25 	bl	7db0 <count_bits>
    7f66:	4603      	mov	r3, r0
    7f68:	461a      	mov	r2, r3
    7f6a:	4b2a      	ldr	r3, [pc, #168]	; (8014 <precalc+0x218>)
    7f6c:	781b      	ldrb	r3, [r3, #0]
    7f6e:	4413      	add	r3, r2
    7f70:	b2da      	uxtb	r2, r3
    7f72:	4b28      	ldr	r3, [pc, #160]	; (8014 <precalc+0x218>)
    7f74:	701a      	strb	r2, [r3, #0]
		((address >> 2) & 0x02) +
		((address >> 1) & 0x01);

	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
    7f76:	7bfb      	ldrb	r3, [r7, #15]
    7f78:	3301      	adds	r3, #1
    7f7a:	73fb      	strb	r3, [r7, #15]
    7f7c:	7bfb      	ldrb	r3, [r7, #15]
    7f7e:	2b09      	cmp	r3, #9
    7f80:	d9e7      	bls.n	7f52 <precalc+0x156>
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
    7f82:	2300      	movs	r3, #0
    7f84:	71fb      	strb	r3, [r7, #7]
		for (i = 0; i < CHANNELS; i++)
    7f86:	2300      	movs	r3, #0
    7f88:	73fb      	strb	r3, [r7, #15]
    7f8a:	e012      	b.n	7fb2 <precalc+0x1b6>
			chan = (i * 2) % CHANNELS;
    7f8c:	7bfb      	ldrb	r3, [r7, #15]
    7f8e:	0059      	lsls	r1, r3, #1
    7f90:	4b18      	ldr	r3, [pc, #96]	; (7ff4 <precalc+0x1f8>)
    7f92:	fb83 2301 	smull	r2, r3, r3, r1
    7f96:	115a      	asrs	r2, r3, #5
    7f98:	17cb      	asrs	r3, r1, #31
    7f9a:	1ad2      	subs	r2, r2, r3
    7f9c:	4613      	mov	r3, r2
    7f9e:	009b      	lsls	r3, r3, #2
    7fa0:	4413      	add	r3, r2
    7fa2:	011b      	lsls	r3, r3, #4
    7fa4:	1a9b      	subs	r3, r3, r2
    7fa6:	1aca      	subs	r2, r1, r3
    7fa8:	4613      	mov	r3, r2
    7faa:	73bb      	strb	r3, [r7, #14]
	if(afh_enabled) {
		used_channels = 0;
		for(i = 0; i < 10; i++)
			used_channels += count_bits((uint64_t) afh_map[i]);
		j = 0;
		for (i = 0; i < CHANNELS; i++)
    7fac:	7bfb      	ldrb	r3, [r7, #15]
    7fae:	3301      	adds	r3, #1
    7fb0:	73fb      	strb	r3, [r7, #15]
    7fb2:	7bfb      	ldrb	r3, [r7, #15]
    7fb4:	2b4e      	cmp	r3, #78	; 0x4e
    7fb6:	d9e9      	bls.n	7f8c <precalc+0x190>
			chan = (i * 2) % CHANNELS;
			if(afh_map[chan/8] & (0x1 << (chan % 8)))
    7fb8:	7bbb      	ldrb	r3, [r7, #14]
    7fba:	08db      	lsrs	r3, r3, #3
    7fbc:	b2db      	uxtb	r3, r3
    7fbe:	461a      	mov	r2, r3
    7fc0:	4b15      	ldr	r3, [pc, #84]	; (8018 <precalc+0x21c>)
    7fc2:	5c9b      	ldrb	r3, [r3, r2]
    7fc4:	461a      	mov	r2, r3
    7fc6:	7bbb      	ldrb	r3, [r7, #14]
    7fc8:	f003 0307 	and.w	r3, r3, #7
    7fcc:	fa42 f303 	asr.w	r3, r2, r3
    7fd0:	f003 0301 	and.w	r3, r3, #1
    7fd4:	2b00      	cmp	r3, #0
    7fd6:	d006      	beq.n	7fe6 <precalc+0x1ea>
				bank[j++] = chan;
    7fd8:	79fb      	ldrb	r3, [r7, #7]
    7fda:	1c5a      	adds	r2, r3, #1
    7fdc:	71fa      	strb	r2, [r7, #7]
    7fde:	4619      	mov	r1, r3
    7fe0:	4a05      	ldr	r2, [pc, #20]	; (7ff8 <precalc+0x1fc>)
    7fe2:	7bbb      	ldrb	r3, [r7, #14]
    7fe4:	5453      	strb	r3, [r2, r1]
	}
}
    7fe6:	3710      	adds	r7, #16
    7fe8:	46bd      	mov	sp, r7
    7fea:	bd80      	pop	{r7, pc}
    7fec:	100010a8 	.word	0x100010a8
    7ff0:	10000cf0 	.word	0x10000cf0
    7ff4:	67b23a55 	.word	0x67b23a55
    7ff8:	10001110 	.word	0x10001110
    7ffc:	1000110b 	.word	0x1000110b
    8000:	100010b8 	.word	0x100010b8
    8004:	1000110c 	.word	0x1000110c
    8008:	100010ba 	.word	0x100010ba
    800c:	1000115f 	.word	0x1000115f
    8010:	10001018 	.word	0x10001018
    8014:	100010b9 	.word	0x100010b9
    8018:	10000bc4 	.word	0x10000bc4

0000801c <btle_channel_index>:
	return phys;
}

u32 received_data = 0;

u8 btle_channel_index(u8 channel) {
    801c:	b480      	push	{r7}
    801e:	b085      	sub	sp, #20
    8020:	af00      	add	r7, sp, #0
    8022:	4603      	mov	r3, r0
    8024:	71fb      	strb	r3, [r7, #7]
	u8 idx;
	channel /= 2;
    8026:	79fb      	ldrb	r3, [r7, #7]
    8028:	085b      	lsrs	r3, r3, #1
    802a:	71fb      	strb	r3, [r7, #7]
	if (channel == 0)
    802c:	79fb      	ldrb	r3, [r7, #7]
    802e:	2b00      	cmp	r3, #0
    8030:	d102      	bne.n	8038 <btle_channel_index+0x1c>
		idx = 37;
    8032:	2325      	movs	r3, #37	; 0x25
    8034:	73fb      	strb	r3, [r7, #15]
    8036:	e015      	b.n	8064 <btle_channel_index+0x48>
	else if (channel < 12)
    8038:	79fb      	ldrb	r3, [r7, #7]
    803a:	2b0b      	cmp	r3, #11
    803c:	d803      	bhi.n	8046 <btle_channel_index+0x2a>
		idx = channel - 1;
    803e:	79fb      	ldrb	r3, [r7, #7]
    8040:	3b01      	subs	r3, #1
    8042:	73fb      	strb	r3, [r7, #15]
    8044:	e00e      	b.n	8064 <btle_channel_index+0x48>
	else if (channel == 12)
    8046:	79fb      	ldrb	r3, [r7, #7]
    8048:	2b0c      	cmp	r3, #12
    804a:	d102      	bne.n	8052 <btle_channel_index+0x36>
		idx = 38;
    804c:	2326      	movs	r3, #38	; 0x26
    804e:	73fb      	strb	r3, [r7, #15]
    8050:	e008      	b.n	8064 <btle_channel_index+0x48>
	else if (channel < 39)
    8052:	79fb      	ldrb	r3, [r7, #7]
    8054:	2b26      	cmp	r3, #38	; 0x26
    8056:	d803      	bhi.n	8060 <btle_channel_index+0x44>
		idx = channel - 2;
    8058:	79fb      	ldrb	r3, [r7, #7]
    805a:	3b02      	subs	r3, #2
    805c:	73fb      	strb	r3, [r7, #15]
    805e:	e001      	b.n	8064 <btle_channel_index+0x48>
	else
		idx = 39;
    8060:	2327      	movs	r3, #39	; 0x27
    8062:	73fb      	strb	r3, [r7, #15]
	return idx;
    8064:	7bfb      	ldrb	r3, [r7, #15]
}
    8066:	4618      	mov	r0, r3
    8068:	3714      	adds	r7, #20
    806a:	46bd      	mov	sp, r7
    806c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8070:	4770      	bx	lr
    8072:	bf00      	nop

00008074 <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    8074:	b480      	push	{r7}
    8076:	b08b      	sub	sp, #44	; 0x2c
    8078:	af00      	add	r7, sp, #0
    807a:	60f8      	str	r0, [r7, #12]
    807c:	60b9      	str	r1, [r7, #8]
    807e:	607a      	str	r2, [r7, #4]
	u32 state = crc_init & 0xffffff;
    8080:	68fb      	ldr	r3, [r7, #12]
    8082:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8086:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
    8088:	4b1b      	ldr	r3, [pc, #108]	; (80f8 <btle_calc_crc+0x84>)
    808a:	617b      	str	r3, [r7, #20]
	int i, j;

	for (i = 0; i < len; ++i) {
    808c:	2300      	movs	r3, #0
    808e:	623b      	str	r3, [r7, #32]
    8090:	e027      	b.n	80e2 <btle_calc_crc+0x6e>
		u8 cur = data[i];
    8092:	6a3b      	ldr	r3, [r7, #32]
    8094:	68ba      	ldr	r2, [r7, #8]
    8096:	4413      	add	r3, r2
    8098:	781b      	ldrb	r3, [r3, #0]
    809a:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    809c:	2300      	movs	r3, #0
    809e:	61fb      	str	r3, [r7, #28]
    80a0:	e019      	b.n	80d6 <btle_calc_crc+0x62>
			int next_bit = (state ^ cur) & 1;
    80a2:	7efa      	ldrb	r2, [r7, #27]
    80a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80a6:	4053      	eors	r3, r2
    80a8:	f003 0301 	and.w	r3, r3, #1
    80ac:	613b      	str	r3, [r7, #16]
			cur >>= 1;
    80ae:	7efb      	ldrb	r3, [r7, #27]
    80b0:	085b      	lsrs	r3, r3, #1
    80b2:	76fb      	strb	r3, [r7, #27]
			state >>= 1;
    80b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80b6:	085b      	lsrs	r3, r3, #1
    80b8:	627b      	str	r3, [r7, #36]	; 0x24
			if (next_bit) {
    80ba:	693b      	ldr	r3, [r7, #16]
    80bc:	2b00      	cmp	r3, #0
    80be:	d007      	beq.n	80d0 <btle_calc_crc+0x5c>
				state |= 1 << 23;
    80c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    80c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    80c6:	627b      	str	r3, [r7, #36]	; 0x24
				state ^= lfsr_mask;
    80c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    80ca:	697b      	ldr	r3, [r7, #20]
    80cc:	4053      	eors	r3, r2
    80ce:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    80d0:	69fb      	ldr	r3, [r7, #28]
    80d2:	3301      	adds	r3, #1
    80d4:	61fb      	str	r3, [r7, #28]
    80d6:	69fb      	ldr	r3, [r7, #28]
    80d8:	2b07      	cmp	r3, #7
    80da:	dde2      	ble.n	80a2 <btle_calc_crc+0x2e>
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    80dc:	6a3b      	ldr	r3, [r7, #32]
    80de:	3301      	adds	r3, #1
    80e0:	623b      	str	r3, [r7, #32]
    80e2:	6a3a      	ldr	r2, [r7, #32]
    80e4:	687b      	ldr	r3, [r7, #4]
    80e6:	429a      	cmp	r2, r3
    80e8:	dbd3      	blt.n	8092 <btle_calc_crc+0x1e>
				state ^= lfsr_mask;
			}
		}
	}

	return state;
    80ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    80ec:	4618      	mov	r0, r3
    80ee:	372c      	adds	r7, #44	; 0x2c
    80f0:	46bd      	mov	sp, r7
    80f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    80f6:	4770      	bx	lr
    80f8:	005a6000 	.word	0x005a6000

000080fc <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    80fc:	b480      	push	{r7}
    80fe:	b08d      	sub	sp, #52	; 0x34
    8100:	af00      	add	r7, sp, #0
    8102:	60f8      	str	r0, [r7, #12]
    8104:	60b9      	str	r1, [r7, #8]
    8106:	607a      	str	r2, [r7, #4]
	u32 state = crc;
    8108:	68fb      	ldr	r3, [r7, #12]
    810a:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
    810c:	4b2b      	ldr	r3, [pc, #172]	; (81bc <btle_reverse_crc+0xc0>)
    810e:	61fb      	str	r3, [r7, #28]
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    8110:	687b      	ldr	r3, [r7, #4]
    8112:	3b01      	subs	r3, #1
    8114:	627b      	str	r3, [r7, #36]	; 0x24
    8116:	e02d      	b.n	8174 <btle_reverse_crc+0x78>
		u8 cur = data[i];
    8118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    811a:	68ba      	ldr	r2, [r7, #8]
    811c:	4413      	add	r3, r2
    811e:	781b      	ldrb	r3, [r3, #0]
    8120:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    8122:	2300      	movs	r3, #0
    8124:	623b      	str	r3, [r7, #32]
    8126:	e01f      	b.n	8168 <btle_reverse_crc+0x6c>
			int top_bit = state >> 23;
    8128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    812a:	0ddb      	lsrs	r3, r3, #23
    812c:	617b      	str	r3, [r7, #20]
			state = (state << 1) & 0xffffff;
    812e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8130:	005b      	lsls	r3, r3, #1
    8132:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8136:	62fb      	str	r3, [r7, #44]	; 0x2c
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    8138:	7efa      	ldrb	r2, [r7, #27]
    813a:	6a3b      	ldr	r3, [r7, #32]
    813c:	f1c3 0307 	rsb	r3, r3, #7
    8140:	fa42 f303 	asr.w	r3, r2, r3
    8144:	f003 0201 	and.w	r2, r3, #1
    8148:	697b      	ldr	r3, [r7, #20]
    814a:	4053      	eors	r3, r2
    814c:	461a      	mov	r2, r3
    814e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8150:	4313      	orrs	r3, r2
    8152:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (top_bit)
    8154:	697b      	ldr	r3, [r7, #20]
    8156:	2b00      	cmp	r3, #0
    8158:	d003      	beq.n	8162 <btle_reverse_crc+0x66>
				state ^= lfsr_mask;
    815a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    815c:	69fb      	ldr	r3, [r7, #28]
    815e:	4053      	eors	r3, r2
    8160:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    8162:	6a3b      	ldr	r3, [r7, #32]
    8164:	3301      	adds	r3, #1
    8166:	623b      	str	r3, [r7, #32]
    8168:	6a3b      	ldr	r3, [r7, #32]
    816a:	2b07      	cmp	r3, #7
    816c:	dddc      	ble.n	8128 <btle_reverse_crc+0x2c>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8170:	3b01      	subs	r3, #1
    8172:	627b      	str	r3, [r7, #36]	; 0x24
    8174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8176:	2b00      	cmp	r3, #0
    8178:	dace      	bge.n	8118 <btle_reverse_crc+0x1c>
			if (top_bit)
				state ^= lfsr_mask;
		}
	}

	ret = 0;
    817a:	2300      	movs	r3, #0
    817c:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < 24; ++i)
    817e:	2300      	movs	r3, #0
    8180:	627b      	str	r3, [r7, #36]	; 0x24
    8182:	e010      	b.n	81a6 <btle_reverse_crc+0xaa>
		ret |= ((state >> i) & 1) << (23 - i);
    8184:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8188:	fa22 f303 	lsr.w	r3, r2, r3
    818c:	f003 0201 	and.w	r2, r3, #1
    8190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8192:	f1c3 0317 	rsb	r3, r3, #23
    8196:	fa02 f303 	lsl.w	r3, r2, r3
    819a:	6aba      	ldr	r2, [r7, #40]	; 0x28
    819c:	4313      	orrs	r3, r2
    819e:	62bb      	str	r3, [r7, #40]	; 0x28
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    81a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    81a2:	3301      	adds	r3, #1
    81a4:	627b      	str	r3, [r7, #36]	; 0x24
    81a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    81a8:	2b17      	cmp	r3, #23
    81aa:	ddeb      	ble.n	8184 <btle_reverse_crc+0x88>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
    81ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    81ae:	4618      	mov	r0, r3
    81b0:	3734      	adds	r7, #52	; 0x34
    81b2:	46bd      	mov	sp, r7
    81b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    81b8:	4770      	bx	lr
    81ba:	bf00      	nop
    81bc:	00b4c000 	.word	0x00b4c000

000081c0 <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    81c0:	b480      	push	{r7}
    81c2:	b089      	sub	sp, #36	; 0x24
    81c4:	af00      	add	r7, sp, #0
    81c6:	60f8      	str	r0, [r7, #12]
    81c8:	60b9      	str	r1, [r7, #8]
    81ca:	607a      	str	r2, [r7, #4]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    81cc:	68fb      	ldr	r3, [r7, #12]
    81ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    81d2:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < len; ++i) {
    81d4:	2300      	movs	r3, #0
    81d6:	61bb      	str	r3, [r7, #24]
    81d8:	e012      	b.n	8200 <btle_crcgen_lut+0x40>
		key = data[i] ^ (state & 0xff);
    81da:	69bb      	ldr	r3, [r7, #24]
    81dc:	68ba      	ldr	r2, [r7, #8]
    81de:	4413      	add	r3, r2
    81e0:	781a      	ldrb	r2, [r3, #0]
    81e2:	69fb      	ldr	r3, [r7, #28]
    81e4:	b2db      	uxtb	r3, r3
    81e6:	4053      	eors	r3, r2
    81e8:	75fb      	strb	r3, [r7, #23]
		state = (state >> 8) ^ btle_crc_lut[key];
    81ea:	69fb      	ldr	r3, [r7, #28]
    81ec:	0a1a      	lsrs	r2, r3, #8
    81ee:	7dfb      	ldrb	r3, [r7, #23]
    81f0:	4909      	ldr	r1, [pc, #36]	; (8218 <btle_crcgen_lut+0x58>)
    81f2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    81f6:	4053      	eors	r3, r2
    81f8:	61fb      	str	r3, [r7, #28]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    81fa:	69bb      	ldr	r3, [r7, #24]
    81fc:	3301      	adds	r3, #1
    81fe:	61bb      	str	r3, [r7, #24]
    8200:	69ba      	ldr	r2, [r7, #24]
    8202:	687b      	ldr	r3, [r7, #4]
    8204:	429a      	cmp	r2, r3
    8206:	dbe8      	blt.n	81da <btle_crcgen_lut+0x1a>
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
	}
	return state;
    8208:	69fb      	ldr	r3, [r7, #28]
}
    820a:	4618      	mov	r0, r3
    820c:	3724      	adds	r7, #36	; 0x24
    820e:	46bd      	mov	sp, r7
    8210:	f85d 7b04 	ldr.w	r7, [sp], #4
    8214:	4770      	bx	lr
    8216:	bf00      	nop
    8218:	100004ac 	.word	0x100004ac

0000821c <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    821c:	b590      	push	{r4, r7, lr}
    821e:	b087      	sub	sp, #28
    8220:	af00      	add	r7, sp, #0
    8222:	60f8      	str	r0, [r7, #12]
    8224:	60b9      	str	r1, [r7, #8]
    8226:	607a      	str	r2, [r7, #4]
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    8228:	68fb      	ldr	r3, [r7, #12]
    822a:	885b      	ldrh	r3, [r3, #2]
    822c:	823b      	strh	r3, [r7, #16]
    822e:	68fb      	ldr	r3, [r7, #12]
    8230:	889b      	ldrh	r3, [r3, #4]
    8232:	827b      	strh	r3, [r7, #18]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    8234:	4b0b      	ldr	r3, [pc, #44]	; (8264 <usb_vendor_request_handler+0x48>)
    8236:	681c      	ldr	r4, [r3, #0]
    8238:	68fb      	ldr	r3, [r7, #12]
    823a:	7859      	ldrb	r1, [r3, #1]
    823c:	687b      	ldr	r3, [r7, #4]
    823e:	681b      	ldr	r3, [r3, #0]
    8240:	f107 0210 	add.w	r2, r7, #16
    8244:	4608      	mov	r0, r1
    8246:	4611      	mov	r1, r2
    8248:	461a      	mov	r2, r3
    824a:	68bb      	ldr	r3, [r7, #8]
    824c:	47a0      	blx	r4
    824e:	6178      	str	r0, [r7, #20]
	return (BOOL) (rv==1);
    8250:	697b      	ldr	r3, [r7, #20]
    8252:	2b01      	cmp	r3, #1
    8254:	bf0c      	ite	eq
    8256:	2301      	moveq	r3, #1
    8258:	2300      	movne	r3, #0
    825a:	b2db      	uxtb	r3, r3
}
    825c:	4618      	mov	r0, r3
    825e:	371c      	adds	r7, #28
    8260:	46bd      	mov	sp, r7
    8262:	bd90      	pop	{r4, r7, pc}
    8264:	10003264 	.word	0x10003264

00008268 <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    8268:	b580      	push	{r7, lr}
    826a:	b082      	sub	sp, #8
    826c:	af00      	add	r7, sp, #0
    826e:	6078      	str	r0, [r7, #4]
	// initialise stack
	USBInit();
    8270:	f001 fd0e 	bl	9c90 <USBInit>

	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    8274:	480b      	ldr	r0, [pc, #44]	; (82a4 <ubertooth_usb_init+0x3c>)
    8276:	f002 f96d 	bl	a554 <USBRegisterDescriptors>

	// Request handler
	v_req_handler = vendor_req_handler;
    827a:	4a0b      	ldr	r2, [pc, #44]	; (82a8 <ubertooth_usb_init+0x40>)
    827c:	687b      	ldr	r3, [r7, #4]
    827e:	6013      	str	r3, [r2, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    8280:	2002      	movs	r0, #2
    8282:	490a      	ldr	r1, [pc, #40]	; (82ac <ubertooth_usb_init+0x44>)
    8284:	4a0a      	ldr	r2, [pc, #40]	; (82b0 <ubertooth_usb_init+0x48>)
    8286:	f001 fcdf 	bl	9c48 <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    828a:	20ff      	movs	r0, #255	; 0xff
    828c:	4909      	ldr	r1, [pc, #36]	; (82b4 <ubertooth_usb_init+0x4c>)
    828e:	f002 f90b 	bl	a4a8 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    8292:	2001      	movs	r0, #1
    8294:	f001 fe3e 	bl	9f14 <USBHwConnect>

	return 0;
    8298:	2300      	movs	r3, #0
}
    829a:	4618      	mov	r0, r3
    829c:	3708      	adds	r7, #8
    829e:	46bd      	mov	sp, r7
    82a0:	bd80      	pop	{r7, pc}
    82a2:	bf00      	nop
    82a4:	0000b444 	.word	0x0000b444
    82a8:	10003264 	.word	0x10003264
    82ac:	0000821d 	.word	0x0000821d
    82b0:	10003160 	.word	0x10003160
    82b4:	0000b508 	.word	0x0000b508

000082b8 <queue_init>:

volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init()
{
    82b8:	b580      	push	{r7, lr}
    82ba:	af00      	add	r7, sp, #0
	head = 0;
    82bc:	4b06      	ldr	r3, [pc, #24]	; (82d8 <queue_init+0x20>)
    82be:	2200      	movs	r2, #0
    82c0:	601a      	str	r2, [r3, #0]
	tail = 0;
    82c2:	4b06      	ldr	r3, [pc, #24]	; (82dc <queue_init+0x24>)
    82c4:	2200      	movs	r2, #0
    82c6:	601a      	str	r2, [r3, #0]
	memset(fifo, 0, sizeof(fifo));
    82c8:	4805      	ldr	r0, [pc, #20]	; (82e0 <queue_init+0x28>)
    82ca:	2100      	movs	r1, #0
    82cc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
    82d0:	f7fb ff52 	bl	4178 <memset>
}
    82d4:	bd80      	pop	{r7, pc}
    82d6:	bf00      	nop
    82d8:	10000a6c 	.word	0x10000a6c
    82dc:	10000a70 	.word	0x10000a70
    82e0:	10001160 	.word	0x10001160

000082e4 <usb_enqueue>:

usb_pkt_rx *usb_enqueue()
{
    82e4:	b480      	push	{r7}
    82e6:	b083      	sub	sp, #12
    82e8:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    82ea:	4b13      	ldr	r3, [pc, #76]	; (8338 <usb_enqueue+0x54>)
    82ec:	681b      	ldr	r3, [r3, #0]
    82ee:	b2db      	uxtb	r3, r3
    82f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    82f4:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    82f6:	4b11      	ldr	r3, [pc, #68]	; (833c <usb_enqueue+0x58>)
    82f8:	681b      	ldr	r3, [r3, #0]
    82fa:	b2db      	uxtb	r3, r3
    82fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8300:	71bb      	strb	r3, [r7, #6]
	u8 n = (t + 1) & 0x7F;
    8302:	79bb      	ldrb	r3, [r7, #6]
    8304:	3301      	adds	r3, #1
    8306:	b2db      	uxtb	r3, r3
    8308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    830c:	717b      	strb	r3, [r7, #5]

	/* fail if queue is full */
	if (h == n) {
    830e:	79fa      	ldrb	r2, [r7, #7]
    8310:	797b      	ldrb	r3, [r7, #5]
    8312:	429a      	cmp	r2, r3
    8314:	d101      	bne.n	831a <usb_enqueue+0x36>
		return NULL;
    8316:	2300      	movs	r3, #0
    8318:	e008      	b.n	832c <usb_enqueue+0x48>
	}

	++tail;
    831a:	4b08      	ldr	r3, [pc, #32]	; (833c <usb_enqueue+0x58>)
    831c:	681b      	ldr	r3, [r3, #0]
    831e:	3301      	adds	r3, #1
    8320:	4a06      	ldr	r2, [pc, #24]	; (833c <usb_enqueue+0x58>)
    8322:	6013      	str	r3, [r2, #0]
	return &fifo[t];
    8324:	79bb      	ldrb	r3, [r7, #6]
    8326:	019b      	lsls	r3, r3, #6
    8328:	4a05      	ldr	r2, [pc, #20]	; (8340 <usb_enqueue+0x5c>)
    832a:	4413      	add	r3, r2

}
    832c:	4618      	mov	r0, r3
    832e:	370c      	adds	r7, #12
    8330:	46bd      	mov	sp, r7
    8332:	f85d 7b04 	ldr.w	r7, [sp], #4
    8336:	4770      	bx	lr
    8338:	10000a6c 	.word	0x10000a6c
    833c:	10000a70 	.word	0x10000a70
    8340:	10001160 	.word	0x10001160

00008344 <dequeue>:

usb_pkt_rx *dequeue()
{
    8344:	b480      	push	{r7}
    8346:	b083      	sub	sp, #12
    8348:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    834a:	4b10      	ldr	r3, [pc, #64]	; (838c <dequeue+0x48>)
    834c:	681b      	ldr	r3, [r3, #0]
    834e:	b2db      	uxtb	r3, r3
    8350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8354:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    8356:	4b0e      	ldr	r3, [pc, #56]	; (8390 <dequeue+0x4c>)
    8358:	681b      	ldr	r3, [r3, #0]
    835a:	b2db      	uxtb	r3, r3
    835c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8360:	71bb      	strb	r3, [r7, #6]

	/* fail if queue is empty */
	if (h == t) {
    8362:	79fa      	ldrb	r2, [r7, #7]
    8364:	79bb      	ldrb	r3, [r7, #6]
    8366:	429a      	cmp	r2, r3
    8368:	d101      	bne.n	836e <dequeue+0x2a>
		return NULL;
    836a:	2300      	movs	r3, #0
    836c:	e008      	b.n	8380 <dequeue+0x3c>
	}

	++head;
    836e:	4b07      	ldr	r3, [pc, #28]	; (838c <dequeue+0x48>)
    8370:	681b      	ldr	r3, [r3, #0]
    8372:	3301      	adds	r3, #1
    8374:	4a05      	ldr	r2, [pc, #20]	; (838c <dequeue+0x48>)
    8376:	6013      	str	r3, [r2, #0]
	return &fifo[h];
    8378:	79fb      	ldrb	r3, [r7, #7]
    837a:	019b      	lsls	r3, r3, #6
    837c:	4a05      	ldr	r2, [pc, #20]	; (8394 <dequeue+0x50>)
    837e:	4413      	add	r3, r2
}
    8380:	4618      	mov	r0, r3
    8382:	370c      	adds	r7, #12
    8384:	46bd      	mov	sp, r7
    8386:	f85d 7b04 	ldr.w	r7, [sp], #4
    838a:	4770      	bx	lr
    838c:	10000a6c 	.word	0x10000a6c
    8390:	10000a70 	.word	0x10000a70
    8394:	10001160 	.word	0x10001160

00008398 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    8398:	b580      	push	{r7, lr}
    839a:	b084      	sub	sp, #16
    839c:	af00      	add	r7, sp, #0
    839e:	6078      	str	r0, [r7, #4]
	usb_pkt_rx *pkt = dequeue(&pkt);
    83a0:	f107 030c 	add.w	r3, r7, #12
    83a4:	4618      	mov	r0, r3
    83a6:	f7ff ffcd 	bl	8344 <dequeue>
    83aa:	4603      	mov	r3, r0
    83ac:	60fb      	str	r3, [r7, #12]
	if (pkt != NULL) {
    83ae:	68fb      	ldr	r3, [r7, #12]
    83b0:	2b00      	cmp	r3, #0
    83b2:	d00a      	beq.n	83ca <dequeue_send+0x32>
		last_usb_pkt = clkn;
    83b4:	4a11      	ldr	r2, [pc, #68]	; (83fc <dequeue_send+0x64>)
    83b6:	687b      	ldr	r3, [r7, #4]
    83b8:	6013      	str	r3, [r2, #0]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    83ba:	68fb      	ldr	r3, [r7, #12]
    83bc:	2082      	movs	r0, #130	; 0x82
    83be:	4619      	mov	r1, r3
    83c0:	2240      	movs	r2, #64	; 0x40
    83c2:	f001 fe03 	bl	9fcc <USBHwEPWrite>
		return 1;
    83c6:	2301      	movs	r3, #1
    83c8:	e013      	b.n	83f2 <dequeue_send+0x5a>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    83ca:	4b0c      	ldr	r3, [pc, #48]	; (83fc <dequeue_send+0x64>)
    83cc:	681b      	ldr	r3, [r3, #0]
    83ce:	687a      	ldr	r2, [r7, #4]
    83d0:	1ad3      	subs	r3, r2, r3
    83d2:	4a0b      	ldr	r2, [pc, #44]	; (8400 <dequeue_send+0x68>)
    83d4:	4293      	cmp	r3, r2
    83d6:	d90b      	bls.n	83f0 <dequeue_send+0x58>
			u8 pkt_type = KEEP_ALIVE;
    83d8:	2303      	movs	r3, #3
    83da:	72fb      	strb	r3, [r7, #11]
			last_usb_pkt = clkn;
    83dc:	4a07      	ldr	r2, [pc, #28]	; (83fc <dequeue_send+0x64>)
    83de:	687b      	ldr	r3, [r7, #4]
    83e0:	6013      	str	r3, [r2, #0]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    83e2:	f107 030b 	add.w	r3, r7, #11
    83e6:	2082      	movs	r0, #130	; 0x82
    83e8:	4619      	mov	r1, r3
    83ea:	2201      	movs	r2, #1
    83ec:	f001 fdee 	bl	9fcc <USBHwEPWrite>
		}
		return 0;
    83f0:	2300      	movs	r3, #0
	}
}
    83f2:	4618      	mov	r0, r3
    83f4:	3710      	adds	r7, #16
    83f6:	46bd      	mov	sp, r7
    83f8:	bd80      	pop	{r7, pc}
    83fa:	bf00      	nop
    83fc:	10000a74 	.word	0x10000a74
    8400:	00061a80 	.word	0x00061a80

00008404 <handle_usb>:

void handle_usb(u32 clkn)
{
    8404:	b580      	push	{r7, lr}
    8406:	b084      	sub	sp, #16
    8408:	af00      	add	r7, sp, #0
    840a:	6078      	str	r0, [r7, #4]
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    840c:	2082      	movs	r0, #130	; 0x82
    840e:	f001 fda1 	bl	9f54 <USBHwEPGetStatus>
    8412:	4603      	mov	r3, r0
    8414:	73fb      	strb	r3, [r7, #15]
	if (!(epstat & EPSTAT_B1FULL)) {
    8416:	7bfb      	ldrb	r3, [r7, #15]
    8418:	f003 0320 	and.w	r3, r3, #32
    841c:	2b00      	cmp	r3, #0
    841e:	d102      	bne.n	8426 <handle_usb+0x22>
		dequeue_send(clkn);
    8420:	6878      	ldr	r0, [r7, #4]
    8422:	f7ff ffb9 	bl	8398 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    8426:	7bfb      	ldrb	r3, [r7, #15]
    8428:	f003 0340 	and.w	r3, r3, #64	; 0x40
    842c:	2b00      	cmp	r3, #0
    842e:	d102      	bne.n	8436 <handle_usb+0x32>
		dequeue_send(clkn);
    8430:	6878      	ldr	r0, [r7, #4]
    8432:	f7ff ffb1 	bl	8398 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
    8436:	f001 fe8f 	bl	a158 <USBHwISR>
}
    843a:	3710      	adds	r7, #16
    843c:	46bd      	mov	sp, r7
    843e:	bd80      	pop	{r7, pc}

00008440 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    8440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8444:	b095      	sub	sp, #84	; 0x54
    8446:	af00      	add	r7, sp, #0
    8448:	6078      	str	r0, [r7, #4]
    844a:	4669      	mov	r1, sp
    844c:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u32 command[5];
	u32 result[5];
	int i;
	int j;
	u8 len = 22;
    844e:	2116      	movs	r1, #22
    8450:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
	u8 pa = 0;
    8454:	2100      	movs	r1, #0
    8456:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
	u8 txbuf[len];
    845a:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    845e:	4631      	mov	r1, r6
    8460:	3901      	subs	r1, #1
    8462:	6439      	str	r1, [r7, #64]	; 0x40
    8464:	b2f0      	uxtb	r0, r6
    8466:	f04f 0100 	mov.w	r1, #0
    846a:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
    846e:	ea4b 7b50 	orr.w	fp, fp, r0, lsr #29
    8472:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
    8476:	b2f0      	uxtb	r0, r6
    8478:	f04f 0100 	mov.w	r1, #0
    847c:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    8480:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
    8484:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    8488:	4631      	mov	r1, r6
    848a:	3107      	adds	r1, #7
    848c:	08c9      	lsrs	r1, r1, #3
    848e:	00c9      	lsls	r1, r1, #3
    8490:	ebad 0d01 	sub.w	sp, sp, r1
    8494:	4669      	mov	r1, sp
    8496:	3100      	adds	r1, #0
    8498:	63f9      	str	r1, [r7, #60]	; 0x3c
	u8 rxbuf[len];
    849a:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    849e:	4631      	mov	r1, r6
    84a0:	3901      	subs	r1, #1
    84a2:	63b9      	str	r1, [r7, #56]	; 0x38
    84a4:	b2f0      	uxtb	r0, r6
    84a6:	f04f 0100 	mov.w	r1, #0
    84aa:	00cd      	lsls	r5, r1, #3
    84ac:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    84b0:	00c4      	lsls	r4, r0, #3
    84b2:	b2f0      	uxtb	r0, r6
    84b4:	f04f 0100 	mov.w	r1, #0
    84b8:	00cb      	lsls	r3, r1, #3
    84ba:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    84be:	00c2      	lsls	r2, r0, #3
    84c0:	4633      	mov	r3, r6
    84c2:	3307      	adds	r3, #7
    84c4:	08db      	lsrs	r3, r3, #3
    84c6:	00db      	lsls	r3, r3, #3
    84c8:	ebad 0d03 	sub.w	sp, sp, r3
    84cc:	466b      	mov	r3, sp
    84ce:	3300      	adds	r3, #0
    84d0:	637b      	str	r3, [r7, #52]	; 0x34

	txbuf[0] = len - 1; // length of data (rest of payload)
    84d2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
    84d6:	3b01      	subs	r3, #1
    84d8:	b2da      	uxtb	r2, r3
    84da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    84dc:	701a      	strb	r2, [r3, #0]
	txbuf[1] = 0; // request
    84de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    84e0:	2200      	movs	r2, #0
    84e2:	705a      	strb	r2, [r3, #1]

	// read device serial number
	command[0] = 58;
    84e4:	233a      	movs	r3, #58	; 0x3a
    84e6:	623b      	str	r3, [r7, #32]
	iap_entry(command, result);
    84e8:	4bb3      	ldr	r3, [pc, #716]	; (87b8 <cc2400_rangetest+0x378>)
    84ea:	681b      	ldr	r3, [r3, #0]
    84ec:	f107 0120 	add.w	r1, r7, #32
    84f0:	f107 020c 	add.w	r2, r7, #12
    84f4:	4608      	mov	r0, r1
    84f6:	4611      	mov	r1, r2
    84f8:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    84fa:	68fb      	ldr	r3, [r7, #12]
    84fc:	b2db      	uxtb	r3, r3
    84fe:	2b00      	cmp	r3, #0
    8500:	d001      	beq.n	8506 <cc2400_rangetest+0xc6>
    8502:	2300      	movs	r3, #0
		return;
    8504:	e1ac      	b.n	8860 <cc2400_rangetest+0x420>
	txbuf[2] = (result[1] >> 24) & 0xFF;
    8506:	693b      	ldr	r3, [r7, #16]
    8508:	0e1b      	lsrs	r3, r3, #24
    850a:	b2da      	uxtb	r2, r3
    850c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    850e:	709a      	strb	r2, [r3, #2]
	txbuf[3] = (result[1] >> 16) & 0xFF;
    8510:	693b      	ldr	r3, [r7, #16]
    8512:	0c1b      	lsrs	r3, r3, #16
    8514:	b2da      	uxtb	r2, r3
    8516:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8518:	70da      	strb	r2, [r3, #3]
	txbuf[4] = (result[1] >> 8) & 0xFF;
    851a:	693b      	ldr	r3, [r7, #16]
    851c:	0a1b      	lsrs	r3, r3, #8
    851e:	b2da      	uxtb	r2, r3
    8520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8522:	711a      	strb	r2, [r3, #4]
	txbuf[5] = result[1] & 0xFF;
    8524:	693b      	ldr	r3, [r7, #16]
    8526:	b2da      	uxtb	r2, r3
    8528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    852a:	715a      	strb	r2, [r3, #5]
	txbuf[6] = (result[2] >> 24) & 0xFF;
    852c:	697b      	ldr	r3, [r7, #20]
    852e:	0e1b      	lsrs	r3, r3, #24
    8530:	b2da      	uxtb	r2, r3
    8532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8534:	719a      	strb	r2, [r3, #6]
	txbuf[7] = (result[2] >> 16) & 0xFF;
    8536:	697b      	ldr	r3, [r7, #20]
    8538:	0c1b      	lsrs	r3, r3, #16
    853a:	b2da      	uxtb	r2, r3
    853c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    853e:	71da      	strb	r2, [r3, #7]
	txbuf[8] = (result[2] >> 8) & 0xFF;
    8540:	697b      	ldr	r3, [r7, #20]
    8542:	0a1b      	lsrs	r3, r3, #8
    8544:	b2da      	uxtb	r2, r3
    8546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8548:	721a      	strb	r2, [r3, #8]
	txbuf[9] = result[2] & 0xFF;
    854a:	697b      	ldr	r3, [r7, #20]
    854c:	b2da      	uxtb	r2, r3
    854e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8550:	725a      	strb	r2, [r3, #9]
	txbuf[10] = (result[3] >> 24) & 0xFF;
    8552:	69bb      	ldr	r3, [r7, #24]
    8554:	0e1b      	lsrs	r3, r3, #24
    8556:	b2da      	uxtb	r2, r3
    8558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    855a:	729a      	strb	r2, [r3, #10]
	txbuf[11] = (result[3] >> 16) & 0xFF;
    855c:	69bb      	ldr	r3, [r7, #24]
    855e:	0c1b      	lsrs	r3, r3, #16
    8560:	b2da      	uxtb	r2, r3
    8562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8564:	72da      	strb	r2, [r3, #11]
	txbuf[12] = (result[3] >> 8) & 0xFF;
    8566:	69bb      	ldr	r3, [r7, #24]
    8568:	0a1b      	lsrs	r3, r3, #8
    856a:	b2da      	uxtb	r2, r3
    856c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    856e:	731a      	strb	r2, [r3, #12]
	txbuf[13] = result[3] & 0xFF;
    8570:	69bb      	ldr	r3, [r7, #24]
    8572:	b2da      	uxtb	r2, r3
    8574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8576:	735a      	strb	r2, [r3, #13]
	txbuf[14] = (result[4] >> 24) & 0xFF;
    8578:	69fb      	ldr	r3, [r7, #28]
    857a:	0e1b      	lsrs	r3, r3, #24
    857c:	b2da      	uxtb	r2, r3
    857e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8580:	739a      	strb	r2, [r3, #14]
	txbuf[15] = (result[4] >> 16) & 0xFF;
    8582:	69fb      	ldr	r3, [r7, #28]
    8584:	0c1b      	lsrs	r3, r3, #16
    8586:	b2da      	uxtb	r2, r3
    8588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    858a:	73da      	strb	r2, [r3, #15]
	txbuf[16] = (result[4] >> 8) & 0xFF;
    858c:	69fb      	ldr	r3, [r7, #28]
    858e:	0a1b      	lsrs	r3, r3, #8
    8590:	b2da      	uxtb	r2, r3
    8592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8594:	741a      	strb	r2, [r3, #16]
	txbuf[17] = result[4] & 0xFF;
    8596:	69fb      	ldr	r3, [r7, #28]
    8598:	b2da      	uxtb	r2, r3
    859a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    859c:	745a      	strb	r2, [r3, #17]

	txbuf[18] = pa; // request pa
    859e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    85a0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    85a4:	749a      	strb	r2, [r3, #18]
	txbuf[19] = 0; // request number
    85a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    85a8:	2200      	movs	r2, #0
    85aa:	74da      	strb	r2, [r3, #19]
	txbuf[20] = 0xff; // reply pa
    85ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    85ae:	22ff      	movs	r2, #255	; 0xff
    85b0:	751a      	strb	r2, [r3, #20]
	txbuf[21] = 0xff; // reply number
    85b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    85b4:	22ff      	movs	r2, #255	; 0xff
    85b6:	755a      	strb	r2, [r3, #21]

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    85b8:	2012      	movs	r0, #18
    85ba:	f642 3122 	movw	r1, #11042	; 0x2b22
    85be:	f001 f835 	bl	962c <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    85c2:	2014      	movs	r0, #20
    85c4:	f241 314b 	movw	r1, #4939	; 0x134b
    85c8:	f001 f830 	bl	962c <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    85cc:	2020      	movs	r0, #32
    85ce:	f640 51f1 	movw	r1, #3569	; 0xdf1
    85d2:	f001 f82b 	bl	962c <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    85d6:	687b      	ldr	r3, [r7, #4]
    85d8:	881b      	ldrh	r3, [r3, #0]
    85da:	b29b      	uxth	r3, r3
    85dc:	2002      	movs	r0, #2
    85de:	4619      	mov	r1, r3
    85e0:	f001 f824 	bl	962c <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    85e4:	202d      	movs	r0, #45	; 0x2d
    85e6:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    85ea:	f001 f81f 	bl	962c <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    85ee:	202c      	movs	r0, #44	; 0x2c
    85f0:	f241 5184 	movw	r1, #5508	; 0x1584
    85f4:	f001 f81a 	bl	962c <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    85f8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    85fc:	f043 0308 	orr.w	r3, r3, #8
    8600:	b2db      	uxtb	r3, r3
    8602:	b29b      	uxth	r3, r3
    8604:	2005      	movs	r0, #5
    8606:	4619      	mov	r1, r3
    8608:	f001 f810 	bl	962c <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    860c:	2003      	movs	r0, #3
    860e:	2129      	movs	r1, #41	; 0x29
    8610:	f001 f80c 	bl	962c <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8614:	bf00      	nop
    8616:	f001 f8c1 	bl	979c <cc2400_status>
    861a:	4603      	mov	r3, r0
    861c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8620:	2b00      	cmp	r3, #0
    8622:	d0f8      	beq.n	8616 <cc2400_rangetest+0x1d6>
	cc2400_strobe(SFSON);
    8624:	2061      	movs	r0, #97	; 0x61
    8626:	f001 f8c3 	bl	97b0 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    862a:	bf00      	nop
    862c:	f001 f8b6 	bl	979c <cc2400_status>
    8630:	4603      	mov	r3, r0
    8632:	f003 0304 	and.w	r3, r3, #4
    8636:	2b00      	cmp	r3, #0
    8638:	d0f8      	beq.n	862c <cc2400_rangetest+0x1ec>
	TXLED_SET;
    863a:	4b60      	ldr	r3, [pc, #384]	; (87bc <cc2400_rangetest+0x37c>)
    863c:	f44f 7280 	mov.w	r2, #256	; 0x100
    8640:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8642:	4b5f      	ldr	r3, [pc, #380]	; (87c0 <cc2400_rangetest+0x380>)
    8644:	2280      	movs	r2, #128	; 0x80
    8646:	601a      	str	r2, [r3, #0]
#endif
	for (pa = 0; pa < 8; pa++) {
    8648:	2300      	movs	r3, #0
    864a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    864e:	e03e      	b.n	86ce <cc2400_rangetest+0x28e>
		cc2400_set(FREND, 8 | pa);
    8650:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8654:	f043 0308 	orr.w	r3, r3, #8
    8658:	b2db      	uxtb	r3, r3
    865a:	b29b      	uxth	r3, r3
    865c:	2005      	movs	r0, #5
    865e:	4619      	mov	r1, r3
    8660:	f000 ffe4 	bl	962c <cc2400_set>
		txbuf[18] = pa;
    8664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8666:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    866a:	749a      	strb	r2, [r3, #18]
		for (i = 0; i < 16; i++) {
    866c:	2300      	movs	r3, #0
    866e:	64fb      	str	r3, [r7, #76]	; 0x4c
    8670:	e025      	b.n	86be <cc2400_rangetest+0x27e>
			txbuf[19] = i;
    8672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8674:	b2da      	uxtb	r2, r3
    8676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8678:	74da      	strb	r2, [r3, #19]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    867a:	bf00      	nop
    867c:	200e      	movs	r0, #14
    867e:	f000 ffbf 	bl	9600 <cc2400_get>
    8682:	4603      	mov	r3, r0
    8684:	f003 031f 	and.w	r3, r3, #31
    8688:	2b0f      	cmp	r3, #15
    868a:	d1f7      	bne.n	867c <cc2400_rangetest+0x23c>
			// transmit a packet
			for (j = 0; j < len; j++)
    868c:	2300      	movs	r3, #0
    868e:	64bb      	str	r3, [r7, #72]	; 0x48
    8690:	e00a      	b.n	86a8 <cc2400_rangetest+0x268>
				cc2400_set8(FIFOREG, txbuf[j]);
    8692:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    8694:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8696:	4413      	add	r3, r2
    8698:	781b      	ldrb	r3, [r3, #0]
    869a:	2070      	movs	r0, #112	; 0x70
    869c:	4619      	mov	r1, r3
    869e:	f000 fff3 	bl	9688 <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    86a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    86a4:	3301      	adds	r3, #1
    86a6:	64bb      	str	r3, [r7, #72]	; 0x48
    86a8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    86ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    86ae:	429a      	cmp	r2, r3
    86b0:	dcef      	bgt.n	8692 <cc2400_rangetest+0x252>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    86b2:	2063      	movs	r0, #99	; 0x63
    86b4:	f001 f87c 	bl	97b0 <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    86b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    86ba:	3301      	adds	r3, #1
    86bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    86be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    86c0:	2b0f      	cmp	r3, #15
    86c2:	ddd6      	ble.n	8672 <cc2400_rangetest+0x232>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    86c4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    86c8:	3301      	adds	r3, #1
    86ca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    86ce:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    86d2:	2b07      	cmp	r3, #7
    86d4:	d9bc      	bls.n	8650 <cc2400_rangetest+0x210>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    86d6:	bf00      	nop
    86d8:	200e      	movs	r0, #14
    86da:	f000 ff91 	bl	9600 <cc2400_get>
    86de:	4603      	mov	r3, r0
    86e0:	f003 031f 	and.w	r3, r3, #31
    86e4:	2b0f      	cmp	r3, #15
    86e6:	d1f7      	bne.n	86d8 <cc2400_rangetest+0x298>
	TXLED_CLR;
    86e8:	4b36      	ldr	r3, [pc, #216]	; (87c4 <cc2400_rangetest+0x384>)
    86ea:	f44f 7280 	mov.w	r2, #256	; 0x100
    86ee:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    86f0:	2064      	movs	r0, #100	; 0x64
    86f2:	f001 f85d 	bl	97b0 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    86f6:	bf00      	nop
    86f8:	f001 f850 	bl	979c <cc2400_status>
    86fc:	4603      	mov	r3, r0
    86fe:	f003 0304 	and.w	r3, r3, #4
    8702:	2b00      	cmp	r3, #0
    8704:	d1f8      	bne.n	86f8 <cc2400_rangetest+0x2b8>
	cc2400_set(FSDIV, *chan_ptr - 1);
    8706:	687b      	ldr	r3, [r7, #4]
    8708:	881b      	ldrh	r3, [r3, #0]
    870a:	b29b      	uxth	r3, r3
    870c:	3b01      	subs	r3, #1
    870e:	b29b      	uxth	r3, r3
    8710:	2002      	movs	r0, #2
    8712:	4619      	mov	r1, r3
    8714:	f000 ff8a 	bl	962c <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8718:	bf00      	nop
    871a:	f001 f83f 	bl	979c <cc2400_status>
    871e:	4603      	mov	r3, r0
    8720:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8724:	2b00      	cmp	r3, #0
    8726:	d0f8      	beq.n	871a <cc2400_rangetest+0x2da>
	cc2400_strobe(SFSON);
    8728:	2061      	movs	r0, #97	; 0x61
    872a:	f001 f841 	bl	97b0 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    872e:	bf00      	nop
    8730:	f001 f834 	bl	979c <cc2400_status>
    8734:	4603      	mov	r3, r0
    8736:	f003 0304 	and.w	r3, r3, #4
    873a:	2b00      	cmp	r3, #0
    873c:	d0f8      	beq.n	8730 <cc2400_rangetest+0x2f0>
	RXLED_SET;
    873e:	4b1f      	ldr	r3, [pc, #124]	; (87bc <cc2400_rangetest+0x37c>)
    8740:	2210      	movs	r2, #16
    8742:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8744:	bf00      	nop
    8746:	200e      	movs	r0, #14
    8748:	f000 ff5a 	bl	9600 <cc2400_get>
    874c:	4603      	mov	r3, r0
    874e:	f003 031f 	and.w	r3, r3, #31
    8752:	2b0f      	cmp	r3, #15
    8754:	d1f7      	bne.n	8746 <cc2400_rangetest+0x306>
		cc2400_strobe(SRX);
    8756:	2062      	movs	r0, #98	; 0x62
    8758:	f001 f82a 	bl	97b0 <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    875c:	bf00      	nop
    875e:	f001 f81d 	bl	979c <cc2400_status>
    8762:	4603      	mov	r3, r0
    8764:	f003 0310 	and.w	r3, r3, #16
    8768:	2b00      	cmp	r3, #0
    876a:	d0f8      	beq.n	875e <cc2400_rangetest+0x31e>
		USRLED_SET;
    876c:	4b13      	ldr	r3, [pc, #76]	; (87bc <cc2400_rangetest+0x37c>)
    876e:	2202      	movs	r2, #2
    8770:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
    8772:	2300      	movs	r3, #0
    8774:	64bb      	str	r3, [r7, #72]	; 0x48
    8776:	e00c      	b.n	8792 <cc2400_rangetest+0x352>
			rxbuf[j] = cc2400_get8(FIFOREG);
    8778:	2070      	movs	r0, #112	; 0x70
    877a:	f000 ff6b 	bl	9654 <cc2400_get8>
    877e:	4603      	mov	r3, r0
    8780:	4619      	mov	r1, r3
    8782:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8784:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8786:	4413      	add	r3, r2
    8788:	460a      	mov	r2, r1
    878a:	701a      	strb	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    878c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    878e:	3301      	adds	r3, #1
    8790:	64bb      	str	r3, [r7, #72]	; 0x48
    8792:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    8796:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8798:	429a      	cmp	r2, r3
    879a:	dced      	bgt.n	8778 <cc2400_rangetest+0x338>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    879c:	f000 fffe 	bl	979c <cc2400_status>
    87a0:	4603      	mov	r3, r0
    87a2:	f003 0308 	and.w	r3, r3, #8
    87a6:	2b00      	cmp	r3, #0
    87a8:	d001      	beq.n	87ae <cc2400_rangetest+0x36e>
			break;
    87aa:	bf00      	nop
		USRLED_CLR;
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    87ac:	e00c      	b.n	87c8 <cc2400_rangetest+0x388>
		USRLED_SET;
		for (j = 0; j < len; j++)
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
			break;
		USRLED_CLR;
    87ae:	4b05      	ldr	r3, [pc, #20]	; (87c4 <cc2400_rangetest+0x384>)
    87b0:	2202      	movs	r2, #2
    87b2:	601a      	str	r2, [r3, #0]
	}
    87b4:	e7c6      	b.n	8744 <cc2400_rangetest+0x304>
    87b6:	bf00      	nop
    87b8:	100008ac 	.word	0x100008ac
    87bc:	2009c038 	.word	0x2009c038
    87c0:	2009c058 	.word	0x2009c058
    87c4:	2009c03c 	.word	0x2009c03c

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    87c8:	200e      	movs	r0, #14
    87ca:	f000 ff19 	bl	9600 <cc2400_get>
    87ce:	4603      	mov	r3, r0
    87d0:	f003 031f 	and.w	r3, r3, #31
    87d4:	2b0f      	cmp	r3, #15
    87d6:	d1f7      	bne.n	87c8 <cc2400_rangetest+0x388>
	cc2400_strobe(SRFOFF);
    87d8:	2064      	movs	r0, #100	; 0x64
    87da:	f000 ffe9 	bl	97b0 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    87de:	bf00      	nop
    87e0:	f000 ffdc 	bl	979c <cc2400_status>
    87e4:	4603      	mov	r3, r0
    87e6:	f003 0304 	and.w	r3, r3, #4
    87ea:	2b00      	cmp	r3, #0
    87ec:	d1f8      	bne.n	87e0 <cc2400_rangetest+0x3a0>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    87ee:	4b20      	ldr	r3, [pc, #128]	; (8870 <cc2400_rangetest+0x430>)
    87f0:	2280      	movs	r2, #128	; 0x80
    87f2:	601a      	str	r2, [r3, #0]
#endif
	RXLED_CLR;
    87f4:	4b1f      	ldr	r3, [pc, #124]	; (8874 <cc2400_rangetest+0x434>)
    87f6:	2210      	movs	r2, #16
    87f8:	601a      	str	r2, [r3, #0]

	// get test result
	rr.valid       = 1;
    87fa:	4b1f      	ldr	r3, [pc, #124]	; (8878 <cc2400_rangetest+0x438>)
    87fc:	2201      	movs	r2, #1
    87fe:	701a      	strb	r2, [r3, #0]
	rr.request_pa  = rxbuf[18];
    8800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8802:	7c9a      	ldrb	r2, [r3, #18]
    8804:	4b1c      	ldr	r3, [pc, #112]	; (8878 <cc2400_rangetest+0x438>)
    8806:	705a      	strb	r2, [r3, #1]
	rr.request_num = rxbuf[19];
    8808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    880a:	7cda      	ldrb	r2, [r3, #19]
    880c:	4b1a      	ldr	r3, [pc, #104]	; (8878 <cc2400_rangetest+0x438>)
    880e:	709a      	strb	r2, [r3, #2]
	rr.reply_pa    = rxbuf[20];
    8810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8812:	7d1a      	ldrb	r2, [r3, #20]
    8814:	4b18      	ldr	r3, [pc, #96]	; (8878 <cc2400_rangetest+0x438>)
    8816:	70da      	strb	r2, [r3, #3]
	rr.reply_num   = rxbuf[21];
    8818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    881a:	7d5a      	ldrb	r2, [r3, #21]
    881c:	4b16      	ldr	r3, [pc, #88]	; (8878 <cc2400_rangetest+0x438>)
    881e:	711a      	strb	r2, [r3, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    8820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8822:	2201      	movs	r2, #1
    8824:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 18; i++)
    8826:	2300      	movs	r3, #0
    8828:	64fb      	str	r3, [r7, #76]	; 0x4c
    882a:	e012      	b.n	8852 <cc2400_rangetest+0x412>
		if (rxbuf[i] != txbuf[i])
    882c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    882e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8830:	4413      	add	r3, r2
    8832:	781a      	ldrb	r2, [r3, #0]
    8834:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    8836:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8838:	440b      	add	r3, r1
    883a:	781b      	ldrb	r3, [r3, #0]
    883c:	429a      	cmp	r2, r3
    883e:	d005      	beq.n	884c <cc2400_rangetest+0x40c>
			rr.valid = 2 + i;
    8840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8842:	b2db      	uxtb	r3, r3
    8844:	3302      	adds	r3, #2
    8846:	b2da      	uxtb	r2, r3
    8848:	4b0b      	ldr	r3, [pc, #44]	; (8878 <cc2400_rangetest+0x438>)
    884a:	701a      	strb	r2, [r3, #0]
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    884c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    884e:	3301      	adds	r3, #1
    8850:	64fb      	str	r3, [r7, #76]	; 0x4c
    8852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8854:	2b11      	cmp	r3, #17
    8856:	dde9      	ble.n	882c <cc2400_rangetest+0x3ec>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    8858:	4b06      	ldr	r3, [pc, #24]	; (8874 <cc2400_rangetest+0x434>)
    885a:	2202      	movs	r2, #2
    885c:	601a      	str	r2, [r3, #0]
    885e:	2301      	movs	r3, #1
    8860:	f8d7 d000 	ldr.w	sp, [r7]
    8864:	2b01      	cmp	r3, #1
#endif
}
    8866:	3754      	adds	r7, #84	; 0x54
    8868:	46bd      	mov	sp, r7
    886a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    886e:	bf00      	nop
    8870:	2009c05c 	.word	0x2009c05c
    8874:	2009c03c 	.word	0x2009c03c
    8878:	10001060 	.word	0x10001060

0000887c <cc2400_txtest>:


void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    887c:	b580      	push	{r7, lr}
    887e:	b088      	sub	sp, #32
    8880:	af00      	add	r7, sp, #0
    8882:	6078      	str	r0, [r7, #4]
    8884:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u8 id_pkt1[9] = {0x54, 0x75, 0xc5, 0x8c, 0xc7, 0x33, 0x45, 0xe7, 0x2a};
    8886:	4a5b      	ldr	r2, [pc, #364]	; (89f4 <cc2400_txtest+0x178>)
    8888:	f107 0308 	add.w	r3, r7, #8
    888c:	6810      	ldr	r0, [r2, #0]
    888e:	6851      	ldr	r1, [r2, #4]
    8890:	c303      	stmia	r3!, {r0, r1}
    8892:	7a12      	ldrb	r2, [r2, #8]
    8894:	701a      	strb	r2, [r3, #0]
//	u8 id_pkt1[9] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
//	u8 id_pkt2[9] = {0x52, 0x8e, 0xd3, 0xc3, 0x4c, 0xb3, 0x45, 0xe7, 0x2a};
//	u8 id_pkt3[9] = {0x52, 0x8e, 0xd3, 0xc3, 0x4c, 0xb3, 0x45, 0xe7, 0x2a};
	
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    8896:	687b      	ldr	r3, [r7, #4]
    8898:	781b      	ldrb	r3, [r3, #0]
    889a:	b2db      	uxtb	r3, r3
    889c:	2b00      	cmp	r3, #0
    889e:	d102      	bne.n	88a6 <cc2400_txtest+0x2a>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    88a0:	2329      	movs	r3, #41	; 0x29
    88a2:	82fb      	strh	r3, [r7, #22]
    88a4:	e007      	b.n	88b6 <cc2400_txtest+0x3a>
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    88a6:	687b      	ldr	r3, [r7, #4]
    88a8:	781b      	ldrb	r3, [r3, #0]
    88aa:	b2db      	uxtb	r3, r3
    88ac:	2b01      	cmp	r3, #1
    88ae:	f040 809d 	bne.w	89ec <cc2400_txtest+0x170>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    88b2:	2340      	movs	r3, #64	; 0x40
    88b4:	82fb      	strh	r3, [r7, #22]
	} else {
		/* oops */
		return;
	}

	cc2400_set(MANAND, 0x7fff);
    88b6:	200d      	movs	r0, #13
    88b8:	f647 71ff 	movw	r1, #32767	; 0x7fff
    88bc:	f000 feb6 	bl	962c <cc2400_set>

	cc2400_set(LMTST,   0x2b22); // receiver
    88c0:	2012      	movs	r0, #18
    88c2:	f642 3122 	movw	r1, #11042	; 0x2b22
    88c6:	f000 feb1 	bl	962c <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // wo PRNG
    88ca:	2014      	movs	r0, #20
    88cc:	f241 314b 	movw	r1, #4939	; 0x134b
    88d0:	f000 feac 	bl	962c <cc2400_set>
	cc2400_set(GRMDM,   0x0f60); // 0 preamble, 8 bit cync word
    88d4:	2020      	movs	r0, #32
    88d6:	f44f 6176 	mov.w	r1, #3936	; 0xf60
    88da:	f000 fea7 	bl	962c <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    88de:	683b      	ldr	r3, [r7, #0]
    88e0:	881b      	ldrh	r3, [r3, #0]
    88e2:	b29b      	uxth	r3, r3
    88e4:	2002      	movs	r0, #2
    88e6:	4619      	mov	r1, r3
    88e8:	f000 fea0 	bl	962c <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 250 kHz 
    88ec:	2003      	movs	r0, #3
    88ee:	2140      	movs	r1, #64	; 0x40
    88f0:	f000 fe9c 	bl	962c <cc2400_set>
//	cc2400_set(MDMCTRL, 0x0029); // 250 kHz 
	//cc2400_set(MDMCTRL, 0x0029); // 250 kHz 
	cc2400_set(INT, 0x000b);
    88f4:	2023      	movs	r0, #35	; 0x23
    88f6:	210b      	movs	r1, #11
    88f8:	f000 fe98 	bl	962c <cc2400_set>
//	cc2400_set(SYNCH,   0xf9ae);
//	cc2400_set(SYNCL,   0x1584);

	u16 gio_save;
	gio_save = cc2400_get(IOCFG);
    88fc:	2008      	movs	r0, #8
    88fe:	f000 fe7f 	bl	9600 <cc2400_get>
    8902:	4603      	mov	r3, r0
    8904:	82bb      	strh	r3, [r7, #20]
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    8906:	8abb      	ldrh	r3, [r7, #20]
    8908:	f3c3 0308 	ubfx	r3, r3, #0, #9
    890c:	b29b      	uxth	r3, r3
    890e:	f443 439c 	orr.w	r3, r3, #19968	; 0x4e00
    8912:	b29b      	uxth	r3, r3
    8914:	b29b      	uxth	r3, r3
    8916:	2008      	movs	r0, #8
    8918:	4619      	mov	r1, r3
    891a:	f000 fe87 	bl	962c <cc2400_set>
//	u8 pa = 7;
//	cc2400_set(FREND, 0b1011);

//	cc2400_set(GRDEC, 49);

	while (!(cc2400_status() & XOSC16M_STABLE));
    891e:	bf00      	nop
    8920:	f000 ff3c 	bl	979c <cc2400_status>
    8924:	4603      	mov	r3, r0
    8926:	f003 0340 	and.w	r3, r3, #64	; 0x40
    892a:	2b00      	cmp	r3, #0
    892c:	d0f8      	beq.n	8920 <cc2400_txtest+0xa4>
	cc2400_strobe(SFSON);
    892e:	2061      	movs	r0, #97	; 0x61
    8930:	f000 ff3e 	bl	97b0 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8934:	bf00      	nop
    8936:	f000 ff31 	bl	979c <cc2400_status>
    893a:	4603      	mov	r3, r0
    893c:	f003 0304 	and.w	r3, r3, #4
    8940:	2b00      	cmp	r3, #0
    8942:	d0f8      	beq.n	8936 <cc2400_txtest+0xba>
	TXLED_SET;
    8944:	4b2c      	ldr	r3, [pc, #176]	; (89f8 <cc2400_txtest+0x17c>)
    8946:	f44f 7280 	mov.w	r2, #256	; 0x100
    894a:	601a      	str	r2, [r3, #0]
//	cc2400_strobe(STX);
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    894c:	4b2b      	ldr	r3, [pc, #172]	; (89fc <cc2400_txtest+0x180>)
    894e:	2280      	movs	r2, #128	; 0x80
    8950:	601a      	str	r2, [r3, #0]
#endif
		for (int j = 0; j < 1000; j++)
    8952:	2300      	movs	r3, #0
    8954:	61fb      	str	r3, [r7, #28]
    8956:	e025      	b.n	89a4 <cc2400_txtest+0x128>
		{
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8958:	bf00      	nop
    895a:	200e      	movs	r0, #14
    895c:	f000 fe50 	bl	9600 <cc2400_get>
    8960:	4603      	mov	r3, r0
    8962:	f003 031f 	and.w	r3, r3, #31
    8966:	2b0f      	cmp	r3, #15
    8968:	d1f7      	bne.n	895a <cc2400_txtest+0xde>
			int k = 10000; while (--k);
    896a:	f242 7310 	movw	r3, #10000	; 0x2710
    896e:	61bb      	str	r3, [r7, #24]
    8970:	69bb      	ldr	r3, [r7, #24]
    8972:	3b01      	subs	r3, #1
    8974:	61bb      	str	r3, [r7, #24]
    8976:	69bb      	ldr	r3, [r7, #24]
    8978:	2b00      	cmp	r3, #0
    897a:	d1f9      	bne.n	8970 <cc2400_txtest+0xf4>
			cc2400_strobe (STX);
    897c:	2063      	movs	r0, #99	; 0x63
    897e:	f000 ff17 	bl	97b0 <cc2400_strobe>
			
			while (GIO6);
    8982:	bf00      	nop
    8984:	4b1e      	ldr	r3, [pc, #120]	; (8a00 <cc2400_txtest+0x184>)
    8986:	681b      	ldr	r3, [r3, #0]
    8988:	f003 0304 	and.w	r3, r3, #4
    898c:	2b00      	cmp	r3, #0
    898e:	d1f9      	bne.n	8984 <cc2400_txtest+0x108>
			cc2400_spi_buf(FIFOREG, 9, id_pkt1);		
    8990:	f107 0308 	add.w	r3, r7, #8
    8994:	2070      	movs	r0, #112	; 0x70
    8996:	2109      	movs	r1, #9
    8998:	461a      	mov	r2, r3
    899a:	f000 fe89 	bl	96b0 <cc2400_spi_buf>
	TXLED_SET;
//	cc2400_strobe(STX);
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
		for (int j = 0; j < 1000; j++)
    899e:	69fb      	ldr	r3, [r7, #28]
    89a0:	3301      	adds	r3, #1
    89a2:	61fb      	str	r3, [r7, #28]
    89a4:	69fb      	ldr	r3, [r7, #28]
    89a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    89aa:	dbd5      	blt.n	8958 <cc2400_txtest+0xdc>
			
			while (GIO6);
			cc2400_spi_buf(FIFOREG, 9, id_pkt1);		

		}	
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    89ac:	bf00      	nop
    89ae:	200e      	movs	r0, #14
    89b0:	f000 fe26 	bl	9600 <cc2400_get>
    89b4:	4603      	mov	r3, r0
    89b6:	f003 031f 	and.w	r3, r3, #31
    89ba:	2b0f      	cmp	r3, #15
    89bc:	d1f7      	bne.n	89ae <cc2400_txtest+0x132>
	TXLED_CLR;
    89be:	4b11      	ldr	r3, [pc, #68]	; (8a04 <cc2400_txtest+0x188>)
    89c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    89c4:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    89c6:	2064      	movs	r0, #100	; 0x64
    89c8:	f000 fef2 	bl	97b0 <cc2400_strobe>
	while ((cc2400_status () & FS_LOCK));
    89cc:	bf00      	nop
    89ce:	f000 fee5 	bl	979c <cc2400_status>
    89d2:	4603      	mov	r3, r0
    89d4:	f003 0304 	and.w	r3, r3, #4
    89d8:	2b00      	cmp	r3, #0
    89da:	d1f8      	bne.n	89ce <cc2400_txtest+0x152>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    89dc:	4b0a      	ldr	r3, [pc, #40]	; (8a08 <cc2400_txtest+0x18c>)
    89de:	2280      	movs	r2, #128	; 0x80
    89e0:	601a      	str	r2, [r3, #0]
#endif
	cc2400_set(IOCFG, gio_save);
    89e2:	8abb      	ldrh	r3, [r7, #20]
    89e4:	2008      	movs	r0, #8
    89e6:	4619      	mov	r1, r3
    89e8:	f000 fe20 	bl	962c <cc2400_set>

#endif
}
    89ec:	3720      	adds	r7, #32
    89ee:	46bd      	mov	sp, r7
    89f0:	bd80      	pop	{r7, pc}
    89f2:	bf00      	nop
    89f4:	0000b530 	.word	0x0000b530
    89f8:	2009c038 	.word	0x2009c038
    89fc:	2009c058 	.word	0x2009c058
    8a00:	2009c054 	.word	0x2009c054
    8a04:	2009c03c 	.word	0x2009c03c
    8a08:	2009c05c 	.word	0x2009c05c

00008a0c <ssp_start>:
typedef struct _ego_packet_t {
	u8 rxbuf[EGO_PACKET_LEN];
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
    8a0c:	b480      	push	{r7}
    8a0e:	af00      	add	r7, sp, #0
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    8a10:	4b08      	ldr	r3, [pc, #32]	; (8a34 <ssp_start+0x28>)
    8a12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8a16:	601a      	str	r2, [r3, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    8a18:	4a07      	ldr	r2, [pc, #28]	; (8a38 <ssp_start+0x2c>)
    8a1a:	4b07      	ldr	r3, [pc, #28]	; (8a38 <ssp_start+0x2c>)
    8a1c:	681b      	ldr	r3, [r3, #0]
    8a1e:	f043 0302 	orr.w	r3, r3, #2
    8a22:	6013      	str	r3, [r2, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    8a24:	4b05      	ldr	r3, [pc, #20]	; (8a3c <ssp_start+0x30>)
    8a26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8a2a:	601a      	str	r2, [r3, #0]
}
    8a2c:	46bd      	mov	sp, r7
    8a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a32:	4770      	bx	lr
    8a34:	2009c098 	.word	0x2009c098
    8a38:	40030004 	.word	0x40030004
    8a3c:	2009c09c 	.word	0x2009c09c

00008a40 <ssp_stop>:

static void ssp_stop() {
    8a40:	b480      	push	{r7}
    8a42:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    8a44:	4b06      	ldr	r3, [pc, #24]	; (8a60 <ssp_stop+0x20>)
    8a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8a4a:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    8a4c:	4a05      	ldr	r2, [pc, #20]	; (8a64 <ssp_stop+0x24>)
    8a4e:	4b05      	ldr	r3, [pc, #20]	; (8a64 <ssp_stop+0x24>)
    8a50:	681b      	ldr	r3, [r3, #0]
    8a52:	f023 0302 	bic.w	r3, r3, #2
    8a56:	6013      	str	r3, [r2, #0]
}
    8a58:	46bd      	mov	sp, r7
    8a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8a5e:	4770      	bx	lr
    8a60:	2009c098 	.word	0x2009c098
    8a64:	40030004 	.word	0x40030004

00008a68 <ego_init>:

static void ego_init(void) {
    8a68:	b580      	push	{r7, lr}
    8a6a:	af00      	add	r7, sp, #0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    8a6c:	4b03      	ldr	r3, [pc, #12]	; (8a7c <ego_init+0x14>)
    8a6e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8a72:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    8a74:	f000 fd08 	bl	9488 <dio_ssp_init>
}
    8a78:	bd80      	pop	{r7, pc}
    8a7a:	bf00      	nop
    8a7c:	e000e100 	.word	0xe000e100

00008a80 <ego_deinit>:

static void ego_deinit(void) {
    8a80:	b580      	push	{r7, lr}
    8a82:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    8a84:	2064      	movs	r0, #100	; 0x64
    8a86:	f000 fe93 	bl	97b0 <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    8a8a:	f7ff ffd9 	bl	8a40 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    8a8e:	4b02      	ldr	r3, [pc, #8]	; (8a98 <ego_deinit+0x18>)
    8a90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8a94:	601a      	str	r2, [r3, #0]
}
    8a96:	bd80      	pop	{r7, pc}
    8a98:	e000e180 	.word	0xe000e180

00008a9c <rf_on>:

static void rf_on(void) {
    8a9c:	b580      	push	{r7, lr}
    8a9e:	af00      	add	r7, sp, #0
	cc2400_set(MANAND,  0x7fff);
    8aa0:	200d      	movs	r0, #13
    8aa2:	f647 71ff 	movw	r1, #32767	; 0x7fff
    8aa6:	f000 fdc1 	bl	962c <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    8aaa:	2012      	movs	r0, #18
    8aac:	f642 3122 	movw	r1, #11042	; 0x2b22
    8ab0:	f000 fdbc 	bl	962c <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    8ab4:	2014      	movs	r0, #20
    8ab6:	f241 314b 	movw	r1, #4939	; 0x134b
    8aba:	f000 fdb7 	bl	962c <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    8abe:	2020      	movs	r0, #32
    8ac0:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    8ac4:	f000 fdb2 	bl	962c <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    8ac8:	4b1e      	ldr	r3, [pc, #120]	; (8b44 <rf_on+0xa8>)
    8aca:	881b      	ldrh	r3, [r3, #0]
    8acc:	b29b      	uxth	r3, r3
    8ace:	3b01      	subs	r3, #1
    8ad0:	b29b      	uxth	r3, r3
    8ad2:	2002      	movs	r0, #2
    8ad4:	4619      	mov	r1, r3
    8ad6:	f000 fda9 	bl	962c <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    8ada:	2003      	movs	r0, #3
    8adc:	2126      	movs	r1, #38	; 0x26
    8ade:	f000 fda5 	bl	962c <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    8ae2:	2021      	movs	r0, #33	; 0x21
    8ae4:	2103      	movs	r1, #3
    8ae6:	f000 fda1 	bl	962c <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    8aea:	202d      	movs	r0, #45	; 0x2d
    8aec:	f246 310f 	movw	r1, #25359	; 0x630f
    8af0:	f000 fd9c 	bl	962c <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    8af4:	202c      	movs	r0, #44	; 0x2c
    8af6:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    8afa:	f000 fd97 	bl	962c <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    8afe:	bf00      	nop
    8b00:	f000 fe4c 	bl	979c <cc2400_status>
    8b04:	4603      	mov	r3, r0
    8b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8b0a:	2b00      	cmp	r3, #0
    8b0c:	d0f8      	beq.n	8b00 <rf_on+0x64>

	ssp_start();
    8b0e:	f7ff ff7d 	bl	8a0c <ssp_start>

	cc2400_strobe(SFSON);
    8b12:	2061      	movs	r0, #97	; 0x61
    8b14:	f000 fe4c 	bl	97b0 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8b18:	bf00      	nop
    8b1a:	f000 fe3f 	bl	979c <cc2400_status>
    8b1e:	4603      	mov	r3, r0
    8b20:	f003 0304 	and.w	r3, r3, #4
    8b24:	2b00      	cmp	r3, #0
    8b26:	d0f8      	beq.n	8b1a <rf_on+0x7e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8b28:	bf00      	nop
    8b2a:	200e      	movs	r0, #14
    8b2c:	f000 fd68 	bl	9600 <cc2400_get>
    8b30:	4603      	mov	r3, r0
    8b32:	f003 031f 	and.w	r3, r3, #31
    8b36:	2b0f      	cmp	r3, #15
    8b38:	d1f7      	bne.n	8b2a <rf_on+0x8e>

	cc2400_strobe(SRX);
    8b3a:	2062      	movs	r0, #98	; 0x62
    8b3c:	f000 fe38 	bl	97b0 <cc2400_strobe>
}
    8b40:	bd80      	pop	{r7, pc}
    8b42:	bf00      	nop
    8b44:	1000049c 	.word	0x1000049c

00008b48 <do_rx>:

void do_rx(ego_packet_t *packet) {
    8b48:	b480      	push	{r7}
    8b4a:	b085      	sub	sp, #20
    8b4c:	af00      	add	r7, sp, #0
    8b4e:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    8b50:	2300      	movs	r3, #0
    8b52:	60fb      	str	r3, [r7, #12]
    8b54:	e011      	b.n	8b7a <do_rx+0x32>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    8b56:	bf00      	nop
    8b58:	4b0c      	ldr	r3, [pc, #48]	; (8b8c <do_rx+0x44>)
    8b5a:	681b      	ldr	r3, [r3, #0]
    8b5c:	f003 0304 	and.w	r3, r3, #4
    8b60:	2b00      	cmp	r3, #0
    8b62:	d0f9      	beq.n	8b58 <do_rx+0x10>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    8b64:	4b0a      	ldr	r3, [pc, #40]	; (8b90 <do_rx+0x48>)
    8b66:	681b      	ldr	r3, [r3, #0]
    8b68:	b2d9      	uxtb	r1, r3
    8b6a:	687a      	ldr	r2, [r7, #4]
    8b6c:	68fb      	ldr	r3, [r7, #12]
    8b6e:	4413      	add	r3, r2
    8b70:	460a      	mov	r2, r1
    8b72:	701a      	strb	r2, [r3, #0]
	cc2400_strobe(SRX);
}

void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    8b74:	68fb      	ldr	r3, [r7, #12]
    8b76:	3301      	adds	r3, #1
    8b78:	60fb      	str	r3, [r7, #12]
    8b7a:	68fb      	ldr	r3, [r7, #12]
    8b7c:	2b23      	cmp	r3, #35	; 0x23
    8b7e:	ddea      	ble.n	8b56 <do_rx+0xe>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    8b80:	3714      	adds	r7, #20
    8b82:	46bd      	mov	sp, r7
    8b84:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b88:	4770      	bx	lr
    8b8a:	bf00      	nop
    8b8c:	4003000c 	.word	0x4003000c
    8b90:	40030008 	.word	0x40030008

00008b94 <sync_received>:

static inline int sync_received(void) {
    8b94:	b580      	push	{r7, lr}
    8b96:	af00      	add	r7, sp, #0
	return cc2400_status() & SYNC_RECEIVED;
    8b98:	f000 fe00 	bl	979c <cc2400_status>
    8b9c:	4603      	mov	r3, r0
    8b9e:	f003 0310 	and.w	r3, r3, #16
}
    8ba2:	4618      	mov	r0, r3
    8ba4:	bd80      	pop	{r7, pc}
    8ba6:	bf00      	nop

00008ba8 <sleep_ms>:

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    8ba8:	b480      	push	{r7}
    8baa:	b083      	sub	sp, #12
    8bac:	af00      	add	r7, sp, #0
    8bae:	6078      	str	r0, [r7, #4]
    8bb0:	6039      	str	r1, [r7, #0]
	state->sleep_start = CLK100NS;
    8bb2:	4b0c      	ldr	r3, [pc, #48]	; (8be4 <sleep_ms+0x3c>)
    8bb4:	681b      	ldr	r3, [r3, #0]
    8bb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8bba:	f640 4235 	movw	r2, #3125	; 0xc35
    8bbe:	fb02 f203 	mul.w	r2, r2, r3
    8bc2:	4b09      	ldr	r3, [pc, #36]	; (8be8 <sleep_ms+0x40>)
    8bc4:	681b      	ldr	r3, [r3, #0]
    8bc6:	441a      	add	r2, r3
    8bc8:	687b      	ldr	r3, [r7, #4]
    8bca:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    8bcc:	683b      	ldr	r3, [r7, #0]
    8bce:	f242 7210 	movw	r2, #10000	; 0x2710
    8bd2:	fb02 f203 	mul.w	r2, r2, r3
    8bd6:	687b      	ldr	r3, [r7, #4]
    8bd8:	60da      	str	r2, [r3, #12]
}
    8bda:	370c      	adds	r7, #12
    8bdc:	46bd      	mov	sp, r7
    8bde:	f85d 7b04 	ldr.w	r7, [sp], #4
    8be2:	4770      	bx	lr
    8be4:	10000984 	.word	0x10000984
    8be8:	40004008 	.word	0x40004008

00008bec <sleep_ms_anchor>:

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
    8bec:	b480      	push	{r7}
    8bee:	b083      	sub	sp, #12
    8bf0:	af00      	add	r7, sp, #0
    8bf2:	6078      	str	r0, [r7, #4]
    8bf4:	6039      	str	r1, [r7, #0]
	state->sleep_start = state->anchor;
    8bf6:	687b      	ldr	r3, [r7, #4]
    8bf8:	699a      	ldr	r2, [r3, #24]
    8bfa:	687b      	ldr	r3, [r7, #4]
    8bfc:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    8bfe:	683b      	ldr	r3, [r7, #0]
    8c00:	f242 7210 	movw	r2, #10000	; 0x2710
    8c04:	fb02 f203 	mul.w	r2, r2, r3
    8c08:	687b      	ldr	r3, [r7, #4]
    8c0a:	60da      	str	r2, [r3, #12]
}
    8c0c:	370c      	adds	r7, #12
    8c0e:	46bd      	mov	sp, r7
    8c10:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c14:	4770      	bx	lr
    8c16:	bf00      	nop

00008c18 <sleep_elapsed>:

static inline int sleep_elapsed(ego_fsm_state_t *state) {
    8c18:	b480      	push	{r7}
    8c1a:	b085      	sub	sp, #20
    8c1c:	af00      	add	r7, sp, #0
    8c1e:	6078      	str	r0, [r7, #4]
	u32 now = CLK100NS;
    8c20:	4b13      	ldr	r3, [pc, #76]	; (8c70 <sleep_elapsed+0x58>)
    8c22:	681b      	ldr	r3, [r3, #0]
    8c24:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8c28:	f640 4235 	movw	r2, #3125	; 0xc35
    8c2c:	fb02 f203 	mul.w	r2, r2, r3
    8c30:	4b10      	ldr	r3, [pc, #64]	; (8c74 <sleep_elapsed+0x5c>)
    8c32:	681b      	ldr	r3, [r3, #0]
    8c34:	4413      	add	r3, r2
    8c36:	60fb      	str	r3, [r7, #12]
	if (now < state->sleep_start)
    8c38:	687b      	ldr	r3, [r7, #4]
    8c3a:	689a      	ldr	r2, [r3, #8]
    8c3c:	68fb      	ldr	r3, [r7, #12]
    8c3e:	429a      	cmp	r2, r3
    8c40:	d905      	bls.n	8c4e <sleep_elapsed+0x36>
		now += 3276800000;
    8c42:	68fb      	ldr	r3, [r7, #12]
    8c44:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    8c48:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    8c4c:	60fb      	str	r3, [r7, #12]
	return (now - state->sleep_start) >= state->sleep_duration;
    8c4e:	687b      	ldr	r3, [r7, #4]
    8c50:	689b      	ldr	r3, [r3, #8]
    8c52:	68fa      	ldr	r2, [r7, #12]
    8c54:	1ad2      	subs	r2, r2, r3
    8c56:	687b      	ldr	r3, [r7, #4]
    8c58:	68db      	ldr	r3, [r3, #12]
    8c5a:	429a      	cmp	r2, r3
    8c5c:	bf2c      	ite	cs
    8c5e:	2301      	movcs	r3, #1
    8c60:	2300      	movcc	r3, #0
    8c62:	b2db      	uxtb	r3, r3
}
    8c64:	4618      	mov	r0, r3
    8c66:	3714      	adds	r7, #20
    8c68:	46bd      	mov	sp, r7
    8c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c6e:	4770      	bx	lr
    8c70:	10000984 	.word	0x10000984
    8c74:	40004008 	.word	0x40004008

00008c78 <nop_state>:

/////////////
// states

// do nothing
void nop_state(ego_fsm_state_t *state) {
    8c78:	b480      	push	{r7}
    8c7a:	b083      	sub	sp, #12
    8c7c:	af00      	add	r7, sp, #0
    8c7e:	6078      	str	r0, [r7, #4]
}
    8c80:	370c      	adds	r7, #12
    8c82:	46bd      	mov	sp, r7
    8c84:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c88:	4770      	bx	lr
    8c8a:	bf00      	nop

00008c8c <init_state>:

// used in follow and jam mode, override the channel supplied by user
void init_state(ego_fsm_state_t *state) {
    8c8c:	b480      	push	{r7}
    8c8e:	b083      	sub	sp, #12
    8c90:	af00      	add	r7, sp, #0
    8c92:	6078      	str	r0, [r7, #4]
	state->channel_index = 0;
    8c94:	687b      	ldr	r3, [r7, #4]
    8c96:	2200      	movs	r2, #0
    8c98:	605a      	str	r2, [r3, #4]
	channel = channels[state->channel_index];
    8c9a:	687b      	ldr	r3, [r7, #4]
    8c9c:	685b      	ldr	r3, [r3, #4]
    8c9e:	4a06      	ldr	r2, [pc, #24]	; (8cb8 <init_state+0x2c>)
    8ca0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    8ca4:	4b05      	ldr	r3, [pc, #20]	; (8cbc <init_state+0x30>)
    8ca6:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    8ca8:	687b      	ldr	r3, [r7, #4]
    8caa:	2201      	movs	r2, #1
    8cac:	701a      	strb	r2, [r3, #0]
}
    8cae:	370c      	adds	r7, #12
    8cb0:	46bd      	mov	sp, r7
    8cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8cb6:	4770      	bx	lr
    8cb8:	100008b4 	.word	0x100008b4
    8cbc:	1000049c 	.word	0x1000049c

00008cc0 <start_rf_state>:

void start_rf_state(ego_fsm_state_t *state) {
    8cc0:	b580      	push	{r7, lr}
    8cc2:	b082      	sub	sp, #8
    8cc4:	af00      	add	r7, sp, #0
    8cc6:	6078      	str	r0, [r7, #4]
	rf_on();
    8cc8:	f7ff fee8 	bl	8a9c <rf_on>
	state->state = EGO_ST_CAP;
    8ccc:	687b      	ldr	r3, [r7, #4]
    8cce:	2202      	movs	r2, #2
    8cd0:	701a      	strb	r2, [r3, #0]
}
    8cd2:	3708      	adds	r7, #8
    8cd4:	46bd      	mov	sp, r7
    8cd6:	bd80      	pop	{r7, pc}

00008cd8 <cap_state>:

void cap_state(ego_fsm_state_t *state) {
    8cd8:	b580      	push	{r7, lr}
    8cda:	b08c      	sub	sp, #48	; 0x30
    8cdc:	af00      	add	r7, sp, #0
    8cde:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    8ce0:	f107 0308 	add.w	r3, r7, #8
    8ce4:	2200      	movs	r2, #0
    8ce6:	601a      	str	r2, [r3, #0]
    8ce8:	3304      	adds	r3, #4
    8cea:	2200      	movs	r2, #0
    8cec:	601a      	str	r2, [r3, #0]
    8cee:	3304      	adds	r3, #4
    8cf0:	2200      	movs	r2, #0
    8cf2:	601a      	str	r2, [r3, #0]
    8cf4:	3304      	adds	r3, #4
    8cf6:	2200      	movs	r2, #0
    8cf8:	601a      	str	r2, [r3, #0]
    8cfa:	3304      	adds	r3, #4
    8cfc:	2200      	movs	r2, #0
    8cfe:	601a      	str	r2, [r3, #0]
    8d00:	3304      	adds	r3, #4
    8d02:	2200      	movs	r2, #0
    8d04:	601a      	str	r2, [r3, #0]
    8d06:	3304      	adds	r3, #4
    8d08:	2200      	movs	r2, #0
    8d0a:	601a      	str	r2, [r3, #0]
    8d0c:	3304      	adds	r3, #4
    8d0e:	2200      	movs	r2, #0
    8d10:	601a      	str	r2, [r3, #0]
    8d12:	3304      	adds	r3, #4
    8d14:	2200      	movs	r2, #0
    8d16:	601a      	str	r2, [r3, #0]
    8d18:	3304      	adds	r3, #4
    8d1a:	2200      	movs	r2, #0
    8d1c:	601a      	str	r2, [r3, #0]
    8d1e:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    8d20:	4b23      	ldr	r3, [pc, #140]	; (8db0 <cap_state+0xd8>)
    8d22:	681b      	ldr	r3, [r3, #0]
    8d24:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8d28:	f640 4235 	movw	r2, #3125	; 0xc35
    8d2c:	fb02 f203 	mul.w	r2, r2, r3
    8d30:	4b20      	ldr	r3, [pc, #128]	; (8db4 <cap_state+0xdc>)
    8d32:	681b      	ldr	r3, [r3, #0]
    8d34:	4413      	add	r3, r2
	rf_on();
	state->state = EGO_ST_CAP;
}

void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    8d36:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    8d38:	6878      	ldr	r0, [r7, #4]
    8d3a:	f7ff ff6d 	bl	8c18 <sleep_elapsed>
    8d3e:	4603      	mov	r3, r0
    8d40:	2b00      	cmp	r3, #0
    8d42:	d006      	beq.n	8d52 <cap_state+0x7a>
		sleep_ms(state, 4);
    8d44:	6878      	ldr	r0, [r7, #4]
    8d46:	2104      	movs	r1, #4
    8d48:	f7ff ff2e 	bl	8ba8 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    8d4c:	687b      	ldr	r3, [r7, #4]
    8d4e:	2203      	movs	r2, #3
    8d50:	701a      	strb	r2, [r3, #0]
	}

	if (sync_received()) {
    8d52:	f7ff ff1f 	bl	8b94 <sync_received>
    8d56:	4603      	mov	r3, r0
    8d58:	2b00      	cmp	r3, #0
    8d5a:	d019      	beq.n	8d90 <cap_state+0xb8>
		RXLED_SET;
    8d5c:	4b16      	ldr	r3, [pc, #88]	; (8db8 <cap_state+0xe0>)
    8d5e:	2210      	movs	r2, #16
    8d60:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    8d62:	f107 0308 	add.w	r3, r7, #8
    8d66:	4618      	mov	r0, r3
    8d68:	f7ff feee 	bl	8b48 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    8d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8d6e:	f107 0208 	add.w	r2, r7, #8
    8d72:	2006      	movs	r0, #6
    8d74:	4611      	mov	r1, r2
    8d76:	461a      	mov	r2, r3
    8d78:	f7fb fc42 	bl	4600 <enqueue_with_ts>
		RXLED_CLR;
    8d7c:	4b0f      	ldr	r3, [pc, #60]	; (8dbc <cap_state+0xe4>)
    8d7e:	2210      	movs	r2, #16
    8d80:	601a      	str	r2, [r3, #0]

		sleep_ms(state, 6);
    8d82:	6878      	ldr	r0, [r7, #4]
    8d84:	2106      	movs	r1, #6
    8d86:	f7ff ff0f 	bl	8ba8 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    8d8a:	687b      	ldr	r3, [r7, #4]
    8d8c:	2203      	movs	r2, #3
    8d8e:	701a      	strb	r2, [r3, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    8d90:	687b      	ldr	r3, [r7, #4]
    8d92:	781b      	ldrb	r3, [r3, #0]
    8d94:	2b02      	cmp	r3, #2
    8d96:	d007      	beq.n	8da8 <cap_state+0xd0>
		cc2400_strobe(SRFOFF);
    8d98:	2064      	movs	r0, #100	; 0x64
    8d9a:	f000 fd09 	bl	97b0 <cc2400_strobe>
		ssp_stop();
    8d9e:	f7ff fe4f 	bl	8a40 <ssp_stop>
		state->timer_active = 1;
    8da2:	687b      	ldr	r3, [r7, #4]
    8da4:	2201      	movs	r2, #1
    8da6:	611a      	str	r2, [r3, #16]
	}
}
    8da8:	3730      	adds	r7, #48	; 0x30
    8daa:	46bd      	mov	sp, r7
    8dac:	bd80      	pop	{r7, pc}
    8dae:	bf00      	nop
    8db0:	10000984 	.word	0x10000984
    8db4:	40004008 	.word	0x40004008
    8db8:	2009c038 	.word	0x2009c038
    8dbc:	2009c03c 	.word	0x2009c03c

00008dc0 <sleep_state>:

void sleep_state(ego_fsm_state_t *state) {
    8dc0:	b580      	push	{r7, lr}
    8dc2:	b082      	sub	sp, #8
    8dc4:	af00      	add	r7, sp, #0
    8dc6:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    8dc8:	6878      	ldr	r0, [r7, #4]
    8dca:	f7ff ff25 	bl	8c18 <sleep_elapsed>
    8dce:	4603      	mov	r3, r0
    8dd0:	2b00      	cmp	r3, #0
    8dd2:	d01e      	beq.n	8e12 <sleep_state+0x52>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    8dd4:	687b      	ldr	r3, [r7, #4]
    8dd6:	685b      	ldr	r3, [r3, #4]
    8dd8:	1c5a      	adds	r2, r3, #1
    8dda:	4b0f      	ldr	r3, [pc, #60]	; (8e18 <sleep_state+0x58>)
    8ddc:	4013      	ands	r3, r2
    8dde:	2b00      	cmp	r3, #0
    8de0:	da03      	bge.n	8dea <sleep_state+0x2a>
    8de2:	3b01      	subs	r3, #1
    8de4:	f063 0303 	orn	r3, r3, #3
    8de8:	3301      	adds	r3, #1
    8dea:	461a      	mov	r2, r3
    8dec:	687b      	ldr	r3, [r7, #4]
    8dee:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    8df0:	687b      	ldr	r3, [r7, #4]
    8df2:	685b      	ldr	r3, [r3, #4]
    8df4:	4a09      	ldr	r2, [pc, #36]	; (8e1c <sleep_state+0x5c>)
    8df6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    8dfa:	4b09      	ldr	r3, [pc, #36]	; (8e20 <sleep_state+0x60>)
    8dfc:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    8dfe:	6878      	ldr	r0, [r7, #4]
    8e00:	2107      	movs	r1, #7
    8e02:	f7ff fed1 	bl	8ba8 <sleep_ms>
		state->timer_active = 1;
    8e06:	687b      	ldr	r3, [r7, #4]
    8e08:	2201      	movs	r2, #1
    8e0a:	611a      	str	r2, [r3, #16]

		state->state = EGO_ST_START_RX;
    8e0c:	687b      	ldr	r3, [r7, #4]
    8e0e:	2201      	movs	r2, #1
    8e10:	701a      	strb	r2, [r3, #0]
	}
}
    8e12:	3708      	adds	r7, #8
    8e14:	46bd      	mov	sp, r7
    8e16:	bd80      	pop	{r7, pc}
    8e18:	80000003 	.word	0x80000003
    8e1c:	100008b4 	.word	0x100008b4
    8e20:	1000049c 	.word	0x1000049c

00008e24 <continuous_init_state>:

// continuous cap states (reuses START_RX state)
void continuous_init_state(ego_fsm_state_t *state) {
    8e24:	b480      	push	{r7}
    8e26:	b083      	sub	sp, #12
    8e28:	af00      	add	r7, sp, #0
    8e2a:	6078      	str	r0, [r7, #4]
	state->state = EGO_ST_START_RX;
    8e2c:	687b      	ldr	r3, [r7, #4]
    8e2e:	2201      	movs	r2, #1
    8e30:	701a      	strb	r2, [r3, #0]
}
    8e32:	370c      	adds	r7, #12
    8e34:	46bd      	mov	sp, r7
    8e36:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e3a:	4770      	bx	lr

00008e3c <continuous_cap_state>:

void continuous_cap_state(ego_fsm_state_t *state) {
    8e3c:	b580      	push	{r7, lr}
    8e3e:	b08c      	sub	sp, #48	; 0x30
    8e40:	af00      	add	r7, sp, #0
    8e42:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    8e44:	f107 0308 	add.w	r3, r7, #8
    8e48:	2200      	movs	r2, #0
    8e4a:	601a      	str	r2, [r3, #0]
    8e4c:	3304      	adds	r3, #4
    8e4e:	2200      	movs	r2, #0
    8e50:	601a      	str	r2, [r3, #0]
    8e52:	3304      	adds	r3, #4
    8e54:	2200      	movs	r2, #0
    8e56:	601a      	str	r2, [r3, #0]
    8e58:	3304      	adds	r3, #4
    8e5a:	2200      	movs	r2, #0
    8e5c:	601a      	str	r2, [r3, #0]
    8e5e:	3304      	adds	r3, #4
    8e60:	2200      	movs	r2, #0
    8e62:	601a      	str	r2, [r3, #0]
    8e64:	3304      	adds	r3, #4
    8e66:	2200      	movs	r2, #0
    8e68:	601a      	str	r2, [r3, #0]
    8e6a:	3304      	adds	r3, #4
    8e6c:	2200      	movs	r2, #0
    8e6e:	601a      	str	r2, [r3, #0]
    8e70:	3304      	adds	r3, #4
    8e72:	2200      	movs	r2, #0
    8e74:	601a      	str	r2, [r3, #0]
    8e76:	3304      	adds	r3, #4
    8e78:	2200      	movs	r2, #0
    8e7a:	601a      	str	r2, [r3, #0]
    8e7c:	3304      	adds	r3, #4
    8e7e:	2200      	movs	r2, #0
    8e80:	601a      	str	r2, [r3, #0]
    8e82:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    8e84:	4b1e      	ldr	r3, [pc, #120]	; (8f00 <continuous_cap_state+0xc4>)
    8e86:	681b      	ldr	r3, [r3, #0]
    8e88:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8e8c:	f640 4235 	movw	r2, #3125	; 0xc35
    8e90:	fb02 f203 	mul.w	r2, r2, r3
    8e94:	4b1b      	ldr	r3, [pc, #108]	; (8f04 <continuous_cap_state+0xc8>)
    8e96:	681b      	ldr	r3, [r3, #0]
    8e98:	4413      	add	r3, r2
void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    8e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    8e9c:	f7ff fe7a 	bl	8b94 <sync_received>
    8ea0:	4603      	mov	r3, r0
    8ea2:	2b00      	cmp	r3, #0
    8ea4:	d029      	beq.n	8efa <continuous_cap_state+0xbe>
		RXLED_SET;
    8ea6:	4b18      	ldr	r3, [pc, #96]	; (8f08 <continuous_cap_state+0xcc>)
    8ea8:	2210      	movs	r2, #16
    8eaa:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    8eac:	f107 0308 	add.w	r3, r7, #8
    8eb0:	4618      	mov	r0, r3
    8eb2:	f7ff fe49 	bl	8b48 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    8eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8eb8:	f107 0208 	add.w	r2, r7, #8
    8ebc:	2006      	movs	r0, #6
    8ebe:	4611      	mov	r1, r2
    8ec0:	461a      	mov	r2, r3
    8ec2:	f7fb fb9d 	bl	4600 <enqueue_with_ts>
		RXLED_CLR;
    8ec6:	4b11      	ldr	r3, [pc, #68]	; (8f0c <continuous_cap_state+0xd0>)
    8ec8:	2210      	movs	r2, #16
    8eca:	601a      	str	r2, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    8ecc:	2061      	movs	r0, #97	; 0x61
    8ece:	f000 fc6f 	bl	97b0 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    8ed2:	bf00      	nop
    8ed4:	f000 fc62 	bl	979c <cc2400_status>
    8ed8:	4603      	mov	r3, r0
    8eda:	f003 0304 	and.w	r3, r3, #4
    8ede:	2b00      	cmp	r3, #0
    8ee0:	d0f8      	beq.n	8ed4 <continuous_cap_state+0x98>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8ee2:	bf00      	nop
    8ee4:	200e      	movs	r0, #14
    8ee6:	f000 fb8b 	bl	9600 <cc2400_get>
    8eea:	4603      	mov	r3, r0
    8eec:	f003 031f 	and.w	r3, r3, #31
    8ef0:	2b0f      	cmp	r3, #15
    8ef2:	d1f7      	bne.n	8ee4 <continuous_cap_state+0xa8>
		cc2400_strobe(SRX);
    8ef4:	2062      	movs	r0, #98	; 0x62
    8ef6:	f000 fc5b 	bl	97b0 <cc2400_strobe>
	}
}
    8efa:	3730      	adds	r7, #48	; 0x30
    8efc:	46bd      	mov	sp, r7
    8efe:	bd80      	pop	{r7, pc}
    8f00:	10000984 	.word	0x10000984
    8f04:	40004008 	.word	0x40004008
    8f08:	2009c038 	.word	0x2009c038
    8f0c:	2009c03c 	.word	0x2009c03c

00008f10 <jam_cap_state>:

// jammer states
void jam_cap_state(ego_fsm_state_t *state) {
    8f10:	b580      	push	{r7, lr}
    8f12:	b082      	sub	sp, #8
    8f14:	af00      	add	r7, sp, #0
    8f16:	6078      	str	r0, [r7, #4]
	if (sync_received()) {
    8f18:	f7ff fe3c 	bl	8b94 <sync_received>
    8f1c:	4603      	mov	r3, r0
    8f1e:	2b00      	cmp	r3, #0
    8f20:	d012      	beq.n	8f48 <jam_cap_state+0x38>
		state->state = EGO_ST_START_JAMMING;
    8f22:	687b      	ldr	r3, [r7, #4]
    8f24:	2204      	movs	r2, #4
    8f26:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 1;
    8f28:	687b      	ldr	r3, [r7, #4]
    8f2a:	2201      	movs	r2, #1
    8f2c:	615a      	str	r2, [r3, #20]
		state->anchor = CLK100NS;
    8f2e:	4b16      	ldr	r3, [pc, #88]	; (8f88 <jam_cap_state+0x78>)
    8f30:	681b      	ldr	r3, [r3, #0]
    8f32:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8f36:	f640 4235 	movw	r2, #3125	; 0xc35
    8f3a:	fb02 f203 	mul.w	r2, r2, r3
    8f3e:	4b13      	ldr	r3, [pc, #76]	; (8f8c <jam_cap_state+0x7c>)
    8f40:	681b      	ldr	r3, [r3, #0]
    8f42:	441a      	add	r2, r3
    8f44:	687b      	ldr	r3, [r7, #4]
    8f46:	619a      	str	r2, [r3, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    8f48:	687b      	ldr	r3, [r7, #4]
    8f4a:	691b      	ldr	r3, [r3, #16]
    8f4c:	2b00      	cmp	r3, #0
    8f4e:	d00f      	beq.n	8f70 <jam_cap_state+0x60>
    8f50:	6878      	ldr	r0, [r7, #4]
    8f52:	f7ff fe61 	bl	8c18 <sleep_elapsed>
    8f56:	4603      	mov	r3, r0
    8f58:	2b00      	cmp	r3, #0
    8f5a:	d009      	beq.n	8f70 <jam_cap_state+0x60>
		state->state = EGO_ST_START_JAMMING;
    8f5c:	687b      	ldr	r3, [r7, #4]
    8f5e:	2204      	movs	r2, #4
    8f60:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 0;
    8f62:	687b      	ldr	r3, [r7, #4]
    8f64:	2200      	movs	r2, #0
    8f66:	615a      	str	r2, [r3, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    8f68:	6878      	ldr	r0, [r7, #4]
    8f6a:	210b      	movs	r1, #11
    8f6c:	f7ff fe1c 	bl	8ba8 <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    8f70:	687b      	ldr	r3, [r7, #4]
    8f72:	781b      	ldrb	r3, [r3, #0]
    8f74:	2b02      	cmp	r3, #2
    8f76:	d004      	beq.n	8f82 <jam_cap_state+0x72>
		cc2400_strobe(SRFOFF);
    8f78:	2064      	movs	r0, #100	; 0x64
    8f7a:	f000 fc19 	bl	97b0 <cc2400_strobe>
		ssp_stop();
    8f7e:	f7ff fd5f 	bl	8a40 <ssp_stop>
	}
}
    8f82:	3708      	adds	r7, #8
    8f84:	46bd      	mov	sp, r7
    8f86:	bd80      	pop	{r7, pc}
    8f88:	10000984 	.word	0x10000984
    8f8c:	40004008 	.word	0x40004008

00008f90 <start_jamming_state>:

void start_jamming_state(ego_fsm_state_t *state) {
    8f90:	b580      	push	{r7, lr}
    8f92:	b082      	sub	sp, #8
    8f94:	af00      	add	r7, sp, #0
    8f96:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    8f98:	200d      	movs	r0, #13
    8f9a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    8f9e:	f000 fb45 	bl	962c <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    8fa2:	2012      	movs	r0, #18
    8fa4:	f642 3122 	movw	r1, #11042	; 0x2b22
    8fa8:	f000 fb40 	bl	962c <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    8fac:	2014      	movs	r0, #20
    8fae:	f243 314b 	movw	r1, #13131	; 0x334b
    8fb2:	f000 fb3b 	bl	962c <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    8fb6:	2020      	movs	r0, #32
    8fb8:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    8fbc:	f000 fb36 	bl	962c <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    8fc0:	4b21      	ldr	r3, [pc, #132]	; (9048 <start_jamming_state+0xb8>)
    8fc2:	881b      	ldrh	r3, [r3, #0]
    8fc4:	b29b      	uxth	r3, r3
    8fc6:	2002      	movs	r0, #2
    8fc8:	4619      	mov	r1, r3
    8fca:	f000 fb2f 	bl	962c <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    8fce:	2003      	movs	r0, #3
    8fd0:	2126      	movs	r1, #38	; 0x26
    8fd2:	f000 fb2b 	bl	962c <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    8fd6:	2021      	movs	r0, #33	; 0x21
    8fd8:	2103      	movs	r1, #3
    8fda:	f000 fb27 	bl	962c <cc2400_set>
	cc2400_set(FREND, 0xf);
    8fde:	2005      	movs	r0, #5
    8fe0:	210f      	movs	r1, #15
    8fe2:	f000 fb23 	bl	962c <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    8fe6:	bf00      	nop
    8fe8:	f000 fbd8 	bl	979c <cc2400_status>
    8fec:	4603      	mov	r3, r0
    8fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8ff2:	2b00      	cmp	r3, #0
    8ff4:	d0f8      	beq.n	8fe8 <start_jamming_state+0x58>

	cc2400_strobe(SFSON);
    8ff6:	2061      	movs	r0, #97	; 0x61
    8ff8:	f000 fbda 	bl	97b0 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8ffc:	bf00      	nop
    8ffe:	f000 fbcd 	bl	979c <cc2400_status>
    9002:	4603      	mov	r3, r0
    9004:	f003 0304 	and.w	r3, r3, #4
    9008:	2b00      	cmp	r3, #0
    900a:	d0f8      	beq.n	8ffe <start_jamming_state+0x6e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    900c:	bf00      	nop
    900e:	200e      	movs	r0, #14
    9010:	f000 faf6 	bl	9600 <cc2400_get>
    9014:	4603      	mov	r3, r0
    9016:	f003 031f 	and.w	r3, r3, #31
    901a:	2b0f      	cmp	r3, #15
    901c:	d1f7      	bne.n	900e <start_jamming_state+0x7e>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    901e:	4b0b      	ldr	r3, [pc, #44]	; (904c <start_jamming_state+0xbc>)
    9020:	2280      	movs	r2, #128	; 0x80
    9022:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    9024:	2063      	movs	r0, #99	; 0x63
    9026:	f000 fbc3 	bl	97b0 <cc2400_strobe>
	TXLED_SET;
    902a:	4b09      	ldr	r3, [pc, #36]	; (9050 <start_jamming_state+0xc0>)
    902c:	f44f 7280 	mov.w	r2, #256	; 0x100
    9030:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    9032:	687b      	ldr	r3, [r7, #4]
    9034:	2205      	movs	r2, #5
    9036:	701a      	strb	r2, [r3, #0]
	sleep_ms_anchor(state, 2);
    9038:	6878      	ldr	r0, [r7, #4]
    903a:	2102      	movs	r1, #2
    903c:	f7ff fdd6 	bl	8bec <sleep_ms_anchor>
}
    9040:	3708      	adds	r7, #8
    9042:	46bd      	mov	sp, r7
    9044:	bd80      	pop	{r7, pc}
    9046:	bf00      	nop
    9048:	1000049c 	.word	0x1000049c
    904c:	2009c058 	.word	0x2009c058
    9050:	2009c038 	.word	0x2009c038

00009054 <jamming_state>:

void jamming_state(ego_fsm_state_t *state) {
    9054:	b580      	push	{r7, lr}
    9056:	b082      	sub	sp, #8
    9058:	af00      	add	r7, sp, #0
    905a:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    905c:	6878      	ldr	r0, [r7, #4]
    905e:	f7ff fddb 	bl	8c18 <sleep_elapsed>
    9062:	4603      	mov	r3, r0
    9064:	2b00      	cmp	r3, #0
    9066:	d025      	beq.n	90b4 <jamming_state+0x60>
		cc2400_strobe(SRFOFF);
    9068:	2064      	movs	r0, #100	; 0x64
    906a:	f000 fba1 	bl	97b0 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    906e:	4b13      	ldr	r3, [pc, #76]	; (90bc <jamming_state+0x68>)
    9070:	2280      	movs	r2, #128	; 0x80
    9072:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    9074:	4b12      	ldr	r3, [pc, #72]	; (90c0 <jamming_state+0x6c>)
    9076:	f44f 7280 	mov.w	r2, #256	; 0x100
    907a:	601a      	str	r2, [r3, #0]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    907c:	687b      	ldr	r3, [r7, #4]
    907e:	685b      	ldr	r3, [r3, #4]
    9080:	1c5a      	adds	r2, r3, #1
    9082:	4b10      	ldr	r3, [pc, #64]	; (90c4 <jamming_state+0x70>)
    9084:	4013      	ands	r3, r2
    9086:	2b00      	cmp	r3, #0
    9088:	da03      	bge.n	9092 <jamming_state+0x3e>
    908a:	3b01      	subs	r3, #1
    908c:	f063 0303 	orn	r3, r3, #3
    9090:	3301      	adds	r3, #1
    9092:	461a      	mov	r2, r3
    9094:	687b      	ldr	r3, [r7, #4]
    9096:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    9098:	687b      	ldr	r3, [r7, #4]
    909a:	685b      	ldr	r3, [r3, #4]
    909c:	4a0a      	ldr	r2, [pc, #40]	; (90c8 <jamming_state+0x74>)
    909e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    90a2:	4b0a      	ldr	r3, [pc, #40]	; (90cc <jamming_state+0x78>)
    90a4:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    90a6:	687b      	ldr	r3, [r7, #4]
    90a8:	2203      	movs	r2, #3
    90aa:	701a      	strb	r2, [r3, #0]
		sleep_ms_anchor(state, 6);
    90ac:	6878      	ldr	r0, [r7, #4]
    90ae:	2106      	movs	r1, #6
    90b0:	f7ff fd9c 	bl	8bec <sleep_ms_anchor>
	}
}
    90b4:	3708      	adds	r7, #8
    90b6:	46bd      	mov	sp, r7
    90b8:	bd80      	pop	{r7, pc}
    90ba:	bf00      	nop
    90bc:	2009c05c 	.word	0x2009c05c
    90c0:	2009c03c 	.word	0x2009c03c
    90c4:	80000003 	.word	0x80000003
    90c8:	100008b4 	.word	0x100008b4
    90cc:	1000049c 	.word	0x1000049c

000090d0 <jam_sleep_state>:

void jam_sleep_state(ego_fsm_state_t *state) {
    90d0:	b580      	push	{r7, lr}
    90d2:	b082      	sub	sp, #8
    90d4:	af00      	add	r7, sp, #0
    90d6:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    90d8:	6878      	ldr	r0, [r7, #4]
    90da:	f7ff fd9d 	bl	8c18 <sleep_elapsed>
    90de:	4603      	mov	r3, r0
    90e0:	2b00      	cmp	r3, #0
    90e2:	d009      	beq.n	90f8 <jam_sleep_state+0x28>
		state->state = EGO_ST_START_RX;
    90e4:	687b      	ldr	r3, [r7, #4]
    90e6:	2201      	movs	r2, #1
    90e8:	701a      	strb	r2, [r3, #0]
		state->timer_active = 1;
    90ea:	687b      	ldr	r3, [r7, #4]
    90ec:	2201      	movs	r2, #1
    90ee:	611a      	str	r2, [r3, #16]
		sleep_ms_anchor(state, 11);
    90f0:	6878      	ldr	r0, [r7, #4]
    90f2:	210b      	movs	r1, #11
    90f4:	f7ff fd7a 	bl	8bec <sleep_ms_anchor>
	}
}
    90f8:	3708      	adds	r7, #8
    90fa:	46bd      	mov	sp, r7
    90fc:	bd80      	pop	{r7, pc}
    90fe:	bf00      	nop

00009100 <ego_main>:

void ego_main(ego_mode_t mode) {
    9100:	b5b0      	push	{r4, r5, r7, lr}
    9102:	b09e      	sub	sp, #120	; 0x78
    9104:	af00      	add	r7, sp, #0
    9106:	4603      	mov	r3, r0
    9108:	71fb      	strb	r3, [r7, #7]
	ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    910a:	f107 0358 	add.w	r3, r7, #88	; 0x58
    910e:	2200      	movs	r2, #0
    9110:	601a      	str	r2, [r3, #0]
    9112:	3304      	adds	r3, #4
    9114:	2200      	movs	r2, #0
    9116:	601a      	str	r2, [r3, #0]
    9118:	3304      	adds	r3, #4
    911a:	2200      	movs	r2, #0
    911c:	601a      	str	r2, [r3, #0]
    911e:	3304      	adds	r3, #4
    9120:	2200      	movs	r2, #0
    9122:	601a      	str	r2, [r3, #0]
    9124:	3304      	adds	r3, #4
    9126:	2200      	movs	r2, #0
    9128:	601a      	str	r2, [r3, #0]
    912a:	3304      	adds	r3, #4
    912c:	2200      	movs	r2, #0
    912e:	601a      	str	r2, [r3, #0]
    9130:	3304      	adds	r3, #4
    9132:	2200      	movs	r2, #0
    9134:	601a      	str	r2, [r3, #0]
    9136:	3304      	adds	r3, #4
		.channel_index = 0,
		.timer_active = 0,
	};

	// hopping connection following
	ego_st_handler follow_handler[] = {
    9138:	4b26      	ldr	r3, [pc, #152]	; (91d4 <ego_main+0xd4>)
    913a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
    913e:	461d      	mov	r5, r3
    9140:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9142:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9144:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    9148:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		nop_state,
		nop_state,
	};

	// continuous rx on a single channel
	ego_st_handler continuous_rx_handler[] = {
    914c:	4b22      	ldr	r3, [pc, #136]	; (91d8 <ego_main+0xd8>)
    914e:	f107 0424 	add.w	r4, r7, #36	; 0x24
    9152:	461d      	mov	r5, r3
    9154:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9158:	e895 0003 	ldmia.w	r5, {r0, r1}
    915c:	e884 0003 	stmia.w	r4, {r0, r1}
		nop_state,
		nop_state,
	};

	// jamming
	ego_st_handler jam_handler[] = {
    9160:	4b1e      	ldr	r3, [pc, #120]	; (91dc <ego_main+0xdc>)
    9162:	f107 040c 	add.w	r4, r7, #12
    9166:	461d      	mov	r5, r3
    9168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    916a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    916c:	e895 0003 	ldmia.w	r5, {r0, r1}
    9170:	e884 0003 	stmia.w	r4, {r0, r1}
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    9174:	79fb      	ldrb	r3, [r7, #7]
    9176:	2b01      	cmp	r3, #1
    9178:	d007      	beq.n	918a <ego_main+0x8a>
    917a:	2b02      	cmp	r3, #2
    917c:	d009      	beq.n	9192 <ego_main+0x92>
    917e:	2b00      	cmp	r3, #0
    9180:	d10b      	bne.n	919a <ego_main+0x9a>
		case EGO_FOLLOW:
			handler = follow_handler;
    9182:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    9186:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9188:	e00b      	b.n	91a2 <ego_main+0xa2>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    918a:	f107 0324 	add.w	r3, r7, #36	; 0x24
    918e:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9190:	e007      	b.n	91a2 <ego_main+0xa2>
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    9192:	f107 030c 	add.w	r3, r7, #12
    9196:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9198:	e003      	b.n	91a2 <ego_main+0xa2>
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    919a:	4b11      	ldr	r3, [pc, #68]	; (91e0 <ego_main+0xe0>)
    919c:	2200      	movs	r2, #0
    919e:	701a      	strb	r2, [r3, #0]
    91a0:	e015      	b.n	91ce <ego_main+0xce>
			return;
	}

	ego_init();
    91a2:	f7ff fc61 	bl	8a68 <ego_init>

	while (1) {
		if (requested_mode != MODE_EGO)
    91a6:	4b0e      	ldr	r3, [pc, #56]	; (91e0 <ego_main+0xe0>)
    91a8:	781b      	ldrb	r3, [r3, #0]
    91aa:	b2db      	uxtb	r3, r3
    91ac:	2b0d      	cmp	r3, #13
    91ae:	d003      	beq.n	91b8 <ego_main+0xb8>
			break;
    91b0:	bf00      	nop
		handler[state.state](&state);
	}

	ego_deinit();
    91b2:	f7ff fc65 	bl	8a80 <ego_deinit>
    91b6:	e00a      	b.n	91ce <ego_main+0xce>
	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
			break;
		handler[state.state](&state);
    91b8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    91bc:	009b      	lsls	r3, r3, #2
    91be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    91c0:	4413      	add	r3, r2
    91c2:	681b      	ldr	r3, [r3, #0]
    91c4:	f107 0258 	add.w	r2, r7, #88	; 0x58
    91c8:	4610      	mov	r0, r2
    91ca:	4798      	blx	r3
	}
    91cc:	e7eb      	b.n	91a6 <ego_main+0xa6>

	ego_deinit();
}
    91ce:	3778      	adds	r7, #120	; 0x78
    91d0:	46bd      	mov	sp, r7
    91d2:	bdb0      	pop	{r4, r5, r7, pc}
    91d4:	0000b53c 	.word	0x0000b53c
    91d8:	0000b558 	.word	0x0000b558
    91dc:	0000b570 	.word	0x0000b570
    91e0:	10000a4f 	.word	0x10000a4f

000091e4 <USB_IRQHandler>:
	
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
    91e4:	b580      	push	{r7, lr}
    91e6:	af00      	add	r7, sp, #0
	USBHwISR();
    91e8:	f000 ffb6 	bl	a158 <USBHwISR>
}
    91ec:	bd80      	pop	{r7, pc}
    91ee:	bf00      	nop

000091f0 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    91f0:	b580      	push	{r7, lr}
    91f2:	b082      	sub	sp, #8
    91f4:	af00      	add	r7, sp, #0
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
    91f6:	4b12      	ldr	r3, [pc, #72]	; (9240 <Reset_Handler+0x50>)
    91f8:	607b      	str	r3, [r7, #4]
	for(dest = &_data; dest < &_edata; )
    91fa:	4b12      	ldr	r3, [pc, #72]	; (9244 <Reset_Handler+0x54>)
    91fc:	603b      	str	r3, [r7, #0]
    91fe:	e007      	b.n	9210 <Reset_Handler+0x20>
	{
		*dest++ = *src++;
    9200:	683b      	ldr	r3, [r7, #0]
    9202:	1d1a      	adds	r2, r3, #4
    9204:	603a      	str	r2, [r7, #0]
    9206:	687a      	ldr	r2, [r7, #4]
    9208:	1d11      	adds	r1, r2, #4
    920a:	6079      	str	r1, [r7, #4]
    920c:	6812      	ldr	r2, [r2, #0]
    920e:	601a      	str	r2, [r3, #0]
{
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    9210:	683b      	ldr	r3, [r7, #0]
    9212:	4a0d      	ldr	r2, [pc, #52]	; (9248 <Reset_Handler+0x58>)
    9214:	4293      	cmp	r3, r2
    9216:	d3f3      	bcc.n	9200 <Reset_Handler+0x10>
	{
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
    9218:	4b0c      	ldr	r3, [pc, #48]	; (924c <Reset_Handler+0x5c>)
    921a:	607b      	str	r3, [r7, #4]
	while (src < &_ebss)
    921c:	e004      	b.n	9228 <Reset_Handler+0x38>
	{
		*src++ = 0;
    921e:	687b      	ldr	r3, [r7, #4]
    9220:	1d1a      	adds	r2, r3, #4
    9222:	607a      	str	r2, [r7, #4]
    9224:	2200      	movs	r2, #0
    9226:	601a      	str	r2, [r3, #0]
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    9228:	687b      	ldr	r3, [r7, #4]
    922a:	4a09      	ldr	r2, [pc, #36]	; (9250 <Reset_Handler+0x60>)
    922c:	4293      	cmp	r3, r2
    922e:	d3f6      	bcc.n	921e <Reset_Handler+0x2e>
	{
		*src++ = 0;
	}

    __libc_init_array();
    9230:	f7fa ff7a 	bl	4128 <__libc_init_array>
    
    // Set the vector table location.
    SCB_VTOR = &_interrupt_vector_table;
    9234:	4b07      	ldr	r3, [pc, #28]	; (9254 <Reset_Handler+0x64>)
    9236:	4a08      	ldr	r2, [pc, #32]	; (9258 <Reset_Handler+0x68>)
    9238:	601a      	str	r2, [r3, #0]
    
	main();
    923a:	f7fe fd29 	bl	7c90 <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    923e:	e7fe      	b.n	923e <Reset_Handler+0x4e>
    9240:	0000b5d8 	.word	0x0000b5d8
    9244:	10000020 	.word	0x10000020
    9248:	10000962 	.word	0x10000962
    924c:	10000968 	.word	0x10000968
    9250:	10003268 	.word	0x10003268
    9254:	e000ed08 	.word	0xe000ed08
    9258:	00004000 	.word	0x00004000

0000925c <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    925c:	b480      	push	{r7}
    925e:	af00      	add	r7, sp, #0
    9260:	e7fe      	b.n	9260 <ADC_IRQHandler+0x4>
    9262:	bf00      	nop

00009264 <wait>:
 */

#include "ubertooth.h"
/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
    9264:	b580      	push	{r7, lr}
    9266:	b082      	sub	sp, #8
    9268:	af00      	add	r7, sp, #0
    926a:	4603      	mov	r3, r0
    926c:	71fb      	strb	r3, [r7, #7]
	wait_us(seconds * 1000000);
    926e:	79fb      	ldrb	r3, [r7, #7]
    9270:	4a04      	ldr	r2, [pc, #16]	; (9284 <wait+0x20>)
    9272:	fb02 f303 	mul.w	r3, r2, r3
    9276:	4618      	mov	r0, r3
    9278:	f000 f818 	bl	92ac <wait_us>
}
    927c:	3708      	adds	r7, #8
    927e:	46bd      	mov	sp, r7
    9280:	bd80      	pop	{r7, pc}
    9282:	bf00      	nop
    9284:	000f4240 	.word	0x000f4240

00009288 <rbit>:
{
	wait_us(ms * 1000);
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
    9288:	b480      	push	{r7}
    928a:	b085      	sub	sp, #20
    928c:	af00      	add	r7, sp, #0
    928e:	6078      	str	r0, [r7, #4]
  u32 result = 0;
    9290:	2300      	movs	r3, #0
    9292:	60fb      	str	r3, [r7, #12]
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    9294:	687b      	ldr	r3, [r7, #4]
    9296:	fa93 f3a3 	rbit	r3, r3
    929a:	60fb      	str	r3, [r7, #12]
  return result;
    929c:	68fb      	ldr	r3, [r7, #12]
}
    929e:	4618      	mov	r0, r3
    92a0:	3714      	adds	r7, #20
    92a2:	46bd      	mov	sp, r7
    92a4:	f85d 7b04 	ldr.w	r7, [sp], #4
    92a8:	4770      	bx	lr
    92aa:	bf00      	nop

000092ac <wait_us>:

/* delay a number of microseconds while on internal oscillator (4 MHz) */
/* we only have a resolution of 1000/400, so to the nearest 2.5        */
static volatile u32 wait_us_counter;
void wait_us(u32 us)
{
    92ac:	b480      	push	{r7}
    92ae:	b083      	sub	sp, #12
    92b0:	af00      	add	r7, sp, #0
    92b2:	6078      	str	r0, [r7, #4]
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    92b4:	687b      	ldr	r3, [r7, #4]
    92b6:	089a      	lsrs	r2, r3, #2
    92b8:	687b      	ldr	r3, [r7, #4]
    92ba:	08db      	lsrs	r3, r3, #3
    92bc:	441a      	add	r2, r3
    92be:	687b      	ldr	r3, [r7, #4]
    92c0:	099b      	lsrs	r3, r3, #6
    92c2:	441a      	add	r2, r3
    92c4:	687b      	ldr	r3, [r7, #4]
    92c6:	09db      	lsrs	r3, r3, #7
    92c8:	441a      	add	r2, r3
    92ca:	687b      	ldr	r3, [r7, #4]
    92cc:	0a9b      	lsrs	r3, r3, #10
    92ce:	441a      	add	r2, r3
    92d0:	687b      	ldr	r3, [r7, #4]
    92d2:	0adb      	lsrs	r3, r3, #11
    92d4:	4413      	add	r3, r2
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    92d6:	4a07      	ldr	r2, [pc, #28]	; (92f4 <wait_us+0x48>)
    92d8:	6013      	str	r3, [r2, #0]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    92da:	bf00      	nop
    92dc:	4b05      	ldr	r3, [pc, #20]	; (92f4 <wait_us+0x48>)
    92de:	681b      	ldr	r3, [r3, #0]
    92e0:	3b01      	subs	r3, #1
    92e2:	4a04      	ldr	r2, [pc, #16]	; (92f4 <wait_us+0x48>)
    92e4:	6013      	str	r3, [r2, #0]
    92e6:	2b00      	cmp	r3, #0
    92e8:	d1f8      	bne.n	92dc <wait_us+0x30>
}
    92ea:	370c      	adds	r7, #12
    92ec:	46bd      	mov	sp, r7
    92ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    92f2:	4770      	bx	lr
    92f4:	10000a78 	.word	0x10000a78

000092f8 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    92f8:	b580      	push	{r7, lr}
    92fa:	af00      	add	r7, sp, #0
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    92fc:	f000 f836 	bl	936c <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    9300:	4b10      	ldr	r3, [pc, #64]	; (9344 <gpio_init+0x4c>)
    9302:	2200      	movs	r2, #0
    9304:	601a      	str	r2, [r3, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    9306:	4b10      	ldr	r3, [pc, #64]	; (9348 <gpio_init+0x50>)
    9308:	f24c 7212 	movw	r2, #50962	; 0xc712
    930c:	601a      	str	r2, [r3, #0]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    930e:	4b0f      	ldr	r3, [pc, #60]	; (934c <gpio_init+0x54>)
    9310:	f240 12b1 	movw	r2, #433	; 0x1b1
    9314:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    9316:	4b0e      	ldr	r3, [pc, #56]	; (9350 <gpio_init+0x58>)
    9318:	2200      	movs	r2, #0
    931a:	601a      	str	r2, [r3, #0]
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    931c:	4b0d      	ldr	r3, [pc, #52]	; (9354 <gpio_init+0x5c>)
    931e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    9322:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    9324:	4b0c      	ldr	r3, [pc, #48]	; (9358 <gpio_init+0x60>)
    9326:	2200      	movs	r2, #0
    9328:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    932a:	4b0c      	ldr	r3, [pc, #48]	; (935c <gpio_init+0x64>)
    932c:	2200      	movs	r2, #0
    932e:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    9330:	4b0b      	ldr	r3, [pc, #44]	; (9360 <gpio_init+0x68>)
    9332:	2200      	movs	r2, #0
    9334:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    9336:	4b0b      	ldr	r3, [pc, #44]	; (9364 <gpio_init+0x6c>)
    9338:	2200      	movs	r2, #0
    933a:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    933c:	4b0a      	ldr	r3, [pc, #40]	; (9368 <gpio_init+0x70>)
    933e:	2200      	movs	r2, #0
    9340:	601a      	str	r2, [r3, #0]

#ifdef TC13BADGE
	/* R8C_CTL is active low */
	R8C_CTL_SET;
#endif
}
    9342:	bd80      	pop	{r7, pc}
    9344:	2009c000 	.word	0x2009c000
    9348:	2009c020 	.word	0x2009c020
    934c:	2009c040 	.word	0x2009c040
    9350:	2009c060 	.word	0x2009c060
    9354:	2009c080 	.word	0x2009c080
    9358:	2009c014 	.word	0x2009c014
    935c:	2009c034 	.word	0x2009c034
    9360:	2009c054 	.word	0x2009c054
    9364:	2009c074 	.word	0x2009c074
    9368:	2009c094 	.word	0x2009c094

0000936c <all_pins_off>:

void all_pins_off(void)
{
    936c:	b480      	push	{r7}
    936e:	af00      	add	r7, sp, #0
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    9370:	4b27      	ldr	r3, [pc, #156]	; (9410 <all_pins_off+0xa4>)
    9372:	2200      	movs	r2, #0
    9374:	601a      	str	r2, [r3, #0]
	PINSEL1 = 0;
    9376:	4b27      	ldr	r3, [pc, #156]	; (9414 <all_pins_off+0xa8>)
    9378:	2200      	movs	r2, #0
    937a:	601a      	str	r2, [r3, #0]
	PINSEL2 = 0;
    937c:	4b26      	ldr	r3, [pc, #152]	; (9418 <all_pins_off+0xac>)
    937e:	2200      	movs	r2, #0
    9380:	601a      	str	r2, [r3, #0]
	PINSEL3 = 0;
    9382:	4b26      	ldr	r3, [pc, #152]	; (941c <all_pins_off+0xb0>)
    9384:	2200      	movs	r2, #0
    9386:	601a      	str	r2, [r3, #0]
	PINSEL4 = 0;
    9388:	4b25      	ldr	r3, [pc, #148]	; (9420 <all_pins_off+0xb4>)
    938a:	2200      	movs	r2, #0
    938c:	601a      	str	r2, [r3, #0]
	PINSEL7 = 0;
    938e:	4b25      	ldr	r3, [pc, #148]	; (9424 <all_pins_off+0xb8>)
    9390:	2200      	movs	r2, #0
    9392:	601a      	str	r2, [r3, #0]
	PINSEL9 = 0;
    9394:	4b24      	ldr	r3, [pc, #144]	; (9428 <all_pins_off+0xbc>)
    9396:	2200      	movs	r2, #0
    9398:	601a      	str	r2, [r3, #0]
	PINSEL10 = 0;
    939a:	4b24      	ldr	r3, [pc, #144]	; (942c <all_pins_off+0xc0>)
    939c:	2200      	movs	r2, #0
    939e:	601a      	str	r2, [r3, #0]

	/* configure all pins as inputs */
	FIO0DIR = 0;
    93a0:	4b23      	ldr	r3, [pc, #140]	; (9430 <all_pins_off+0xc4>)
    93a2:	2200      	movs	r2, #0
    93a4:	601a      	str	r2, [r3, #0]
	FIO1DIR = 0;
    93a6:	4b23      	ldr	r3, [pc, #140]	; (9434 <all_pins_off+0xc8>)
    93a8:	2200      	movs	r2, #0
    93aa:	601a      	str	r2, [r3, #0]
	FIO2DIR = 0;
    93ac:	4b22      	ldr	r3, [pc, #136]	; (9438 <all_pins_off+0xcc>)
    93ae:	2200      	movs	r2, #0
    93b0:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    93b2:	4b22      	ldr	r3, [pc, #136]	; (943c <all_pins_off+0xd0>)
    93b4:	2200      	movs	r2, #0
    93b6:	601a      	str	r2, [r3, #0]
	FIO4DIR = 0;
    93b8:	4b21      	ldr	r3, [pc, #132]	; (9440 <all_pins_off+0xd4>)
    93ba:	2200      	movs	r2, #0
    93bc:	601a      	str	r2, [r3, #0]

	/* pull-up on every pin */
	PINMODE0 = 0;
    93be:	4b21      	ldr	r3, [pc, #132]	; (9444 <all_pins_off+0xd8>)
    93c0:	2200      	movs	r2, #0
    93c2:	601a      	str	r2, [r3, #0]
	PINMODE1 = 0;
    93c4:	4b20      	ldr	r3, [pc, #128]	; (9448 <all_pins_off+0xdc>)
    93c6:	2200      	movs	r2, #0
    93c8:	601a      	str	r2, [r3, #0]
	PINMODE2 = 0;
    93ca:	4b20      	ldr	r3, [pc, #128]	; (944c <all_pins_off+0xe0>)
    93cc:	2200      	movs	r2, #0
    93ce:	601a      	str	r2, [r3, #0]
	PINMODE3 = 0;
    93d0:	4b1f      	ldr	r3, [pc, #124]	; (9450 <all_pins_off+0xe4>)
    93d2:	2200      	movs	r2, #0
    93d4:	601a      	str	r2, [r3, #0]
	PINMODE4 = 0;
    93d6:	4b1f      	ldr	r3, [pc, #124]	; (9454 <all_pins_off+0xe8>)
    93d8:	2200      	movs	r2, #0
    93da:	601a      	str	r2, [r3, #0]
	PINMODE7 = 0;
    93dc:	4b1e      	ldr	r3, [pc, #120]	; (9458 <all_pins_off+0xec>)
    93de:	2200      	movs	r2, #0
    93e0:	601a      	str	r2, [r3, #0]
	PINMODE9 = 0;
    93e2:	4b1e      	ldr	r3, [pc, #120]	; (945c <all_pins_off+0xf0>)
    93e4:	2200      	movs	r2, #0
    93e6:	601a      	str	r2, [r3, #0]

	/* set all outputs low */
	FIO0PIN = 0;
    93e8:	4b1d      	ldr	r3, [pc, #116]	; (9460 <all_pins_off+0xf4>)
    93ea:	2200      	movs	r2, #0
    93ec:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    93ee:	4b1d      	ldr	r3, [pc, #116]	; (9464 <all_pins_off+0xf8>)
    93f0:	2200      	movs	r2, #0
    93f2:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    93f4:	4b1c      	ldr	r3, [pc, #112]	; (9468 <all_pins_off+0xfc>)
    93f6:	2200      	movs	r2, #0
    93f8:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    93fa:	4b1c      	ldr	r3, [pc, #112]	; (946c <all_pins_off+0x100>)
    93fc:	2200      	movs	r2, #0
    93fe:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    9400:	4b1b      	ldr	r3, [pc, #108]	; (9470 <all_pins_off+0x104>)
    9402:	2200      	movs	r2, #0
    9404:	601a      	str	r2, [r3, #0]
}
    9406:	46bd      	mov	sp, r7
    9408:	f85d 7b04 	ldr.w	r7, [sp], #4
    940c:	4770      	bx	lr
    940e:	bf00      	nop
    9410:	4002c000 	.word	0x4002c000
    9414:	4002c004 	.word	0x4002c004
    9418:	4002c008 	.word	0x4002c008
    941c:	4002c00c 	.word	0x4002c00c
    9420:	4002c010 	.word	0x4002c010
    9424:	4002c01c 	.word	0x4002c01c
    9428:	4002c024 	.word	0x4002c024
    942c:	4002c028 	.word	0x4002c028
    9430:	2009c000 	.word	0x2009c000
    9434:	2009c020 	.word	0x2009c020
    9438:	2009c040 	.word	0x2009c040
    943c:	2009c060 	.word	0x2009c060
    9440:	2009c080 	.word	0x2009c080
    9444:	4002c040 	.word	0x4002c040
    9448:	4002c044 	.word	0x4002c044
    944c:	4002c048 	.word	0x4002c048
    9450:	4002c04c 	.word	0x4002c04c
    9454:	4002c050 	.word	0x4002c050
    9458:	4002c05c 	.word	0x4002c05c
    945c:	4002c064 	.word	0x4002c064
    9460:	2009c014 	.word	0x2009c014
    9464:	2009c034 	.word	0x2009c034
    9468:	2009c054 	.word	0x2009c054
    946c:	2009c074 	.word	0x2009c074
    9470:	2009c094 	.word	0x2009c094

00009474 <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    9474:	b580      	push	{r7, lr}
    9476:	af00      	add	r7, sp, #0
	gpio_init();
    9478:	f7ff ff3e 	bl	92f8 <gpio_init>
	cc2400_init();
    947c:	f000 f860 	bl	9540 <cc2400_init>
	clock_start();
    9480:	f000 f9c2 	bl	9808 <clock_start>
}
    9484:	bd80      	pop	{r7, pc}
    9486:	bf00      	nop

00009488 <dio_ssp_init>:

/* configure SSP for CC2400's secondary serial data interface */
void dio_ssp_init()
{
    9488:	b480      	push	{r7}
    948a:	af00      	add	r7, sp, #0
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    948c:	4a16      	ldr	r2, [pc, #88]	; (94e8 <dio_ssp_init+0x60>)
    948e:	4b16      	ldr	r3, [pc, #88]	; (94e8 <dio_ssp_init+0x60>)
    9490:	681b      	ldr	r3, [r3, #0]
    9492:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    9496:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    949a:	6013      	str	r3, [r2, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    949c:	4a12      	ldr	r2, [pc, #72]	; (94e8 <dio_ssp_init+0x60>)
    949e:	4b12      	ldr	r3, [pc, #72]	; (94e8 <dio_ssp_init+0x60>)
    94a0:	681b      	ldr	r3, [r3, #0]
    94a2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    94a6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    94aa:	6013      	str	r3, [r2, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    94ac:	4a0e      	ldr	r2, [pc, #56]	; (94e8 <dio_ssp_init+0x60>)
    94ae:	4b0e      	ldr	r3, [pc, #56]	; (94e8 <dio_ssp_init+0x60>)
    94b0:	681b      	ldr	r3, [r3, #0]
    94b2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    94b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    94ba:	6013      	str	r3, [r2, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    94bc:	4a0a      	ldr	r2, [pc, #40]	; (94e8 <dio_ssp_init+0x60>)
    94be:	4b0a      	ldr	r3, [pc, #40]	; (94e8 <dio_ssp_init+0x60>)
    94c0:	681b      	ldr	r3, [r3, #0]
    94c2:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    94c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    94ca:	6013      	str	r3, [r2, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    94cc:	4b07      	ldr	r3, [pc, #28]	; (94ec <dio_ssp_init+0x64>)
    94ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    94d2:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    94d4:	4b06      	ldr	r3, [pc, #24]	; (94f0 <dio_ssp_init+0x68>)
    94d6:	22c7      	movs	r2, #199	; 0xc7
    94d8:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    94da:	4b06      	ldr	r3, [pc, #24]	; (94f4 <dio_ssp_init+0x6c>)
    94dc:	220c      	movs	r2, #12
    94de:	601a      	str	r2, [r3, #0]
}
    94e0:	46bd      	mov	sp, r7
    94e2:	f85d 7b04 	ldr.w	r7, [sp], #4
    94e6:	4770      	bx	lr
    94e8:	4002c000 	.word	0x4002c000
    94ec:	2009c098 	.word	0x2009c098
    94f0:	40030000 	.word	0x40030000
    94f4:	40030004 	.word	0x40030004

000094f8 <atest_init>:

void atest_init()
{
    94f8:	b480      	push	{r7}
    94fa:	af00      	add	r7, sp, #0
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    94fc:	4a0d      	ldr	r2, [pc, #52]	; (9534 <atest_init+0x3c>)
    94fe:	4b0d      	ldr	r3, [pc, #52]	; (9534 <atest_init+0x3c>)
    9500:	681b      	ldr	r3, [r3, #0]
    9502:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    9506:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    9508:	4a0b      	ldr	r2, [pc, #44]	; (9538 <atest_init+0x40>)
    950a:	4b0b      	ldr	r3, [pc, #44]	; (9538 <atest_init+0x40>)
    950c:	681b      	ldr	r3, [r3, #0]
    950e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    9512:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    9514:	4a09      	ldr	r2, [pc, #36]	; (953c <atest_init+0x44>)
    9516:	4b09      	ldr	r3, [pc, #36]	; (953c <atest_init+0x44>)
    9518:	681b      	ldr	r3, [r3, #0]
    951a:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
    951e:	6013      	str	r3, [r2, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    9520:	4a06      	ldr	r2, [pc, #24]	; (953c <atest_init+0x44>)
    9522:	4b06      	ldr	r3, [pc, #24]	; (953c <atest_init+0x44>)
    9524:	681b      	ldr	r3, [r3, #0]
    9526:	f423 13a0 	bic.w	r3, r3, #1310720	; 0x140000
    952a:	6013      	str	r3, [r2, #0]
}
    952c:	46bd      	mov	sp, r7
    952e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9532:	4770      	bx	lr
    9534:	4002c004 	.word	0x4002c004
    9538:	2009c000 	.word	0x2009c000
    953c:	4002c044 	.word	0x4002c044

00009540 <cc2400_init>:

void cc2400_init()
{
    9540:	b580      	push	{r7, lr}
    9542:	af00      	add	r7, sp, #0
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    9544:	f7ff ffd8 	bl	94f8 <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    9548:	4b09      	ldr	r3, [pc, #36]	; (9570 <cc2400_init+0x30>)
    954a:	f44f 7200 	mov.w	r2, #512	; 0x200
    954e:	601a      	str	r2, [r3, #0]
	wait_us(50);
    9550:	2032      	movs	r0, #50	; 0x32
    9552:	f7ff feab 	bl	92ac <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    9556:	4b07      	ldr	r3, [pc, #28]	; (9574 <cc2400_init+0x34>)
    9558:	2220      	movs	r2, #32
    955a:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    955c:	4b04      	ldr	r3, [pc, #16]	; (9570 <cc2400_init+0x30>)
    955e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9562:	601a      	str	r2, [r3, #0]

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
    9564:	200d      	movs	r0, #13
    9566:	f647 71ff 	movw	r1, #32767	; 0x7fff
    956a:	f000 f85f 	bl	962c <cc2400_set>
}
    956e:	bd80      	pop	{r7, pc}
    9570:	2009c038 	.word	0x2009c038
    9574:	2009c058 	.word	0x2009c058

00009578 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    9578:	b480      	push	{r7}
    957a:	b085      	sub	sp, #20
    957c:	af00      	add	r7, sp, #0
    957e:	4603      	mov	r3, r0
    9580:	6039      	str	r1, [r7, #0]
    9582:	71fb      	strb	r3, [r7, #7]
	u32 msb = 1 << (len - 1);
    9584:	79fb      	ldrb	r3, [r7, #7]
    9586:	3b01      	subs	r3, #1
    9588:	2201      	movs	r2, #1
    958a:	fa02 f303 	lsl.w	r3, r2, r3
    958e:	60fb      	str	r3, [r7, #12]

	/* start transaction by dropping CSN */
	CSN_CLR;
    9590:	4b18      	ldr	r3, [pc, #96]	; (95f4 <cc2400_spi+0x7c>)
    9592:	2220      	movs	r2, #32
    9594:	601a      	str	r2, [r3, #0]

	while (len--) {
    9596:	e01e      	b.n	95d6 <cc2400_spi+0x5e>
		if (data & msb)
    9598:	683a      	ldr	r2, [r7, #0]
    959a:	68fb      	ldr	r3, [r7, #12]
    959c:	4013      	ands	r3, r2
    959e:	2b00      	cmp	r3, #0
    95a0:	d003      	beq.n	95aa <cc2400_spi+0x32>
			MOSI_SET;
    95a2:	4b15      	ldr	r3, [pc, #84]	; (95f8 <cc2400_spi+0x80>)
    95a4:	2201      	movs	r2, #1
    95a6:	601a      	str	r2, [r3, #0]
    95a8:	e002      	b.n	95b0 <cc2400_spi+0x38>
		else
			MOSI_CLR;
    95aa:	4b12      	ldr	r3, [pc, #72]	; (95f4 <cc2400_spi+0x7c>)
    95ac:	2201      	movs	r2, #1
    95ae:	601a      	str	r2, [r3, #0]
		data <<= 1;
    95b0:	683b      	ldr	r3, [r7, #0]
    95b2:	005b      	lsls	r3, r3, #1
    95b4:	603b      	str	r3, [r7, #0]

		SCLK_SET;
    95b6:	4b10      	ldr	r3, [pc, #64]	; (95f8 <cc2400_spi+0x80>)
    95b8:	2210      	movs	r2, #16
    95ba:	601a      	str	r2, [r3, #0]
		if (MISO)
    95bc:	4b0f      	ldr	r3, [pc, #60]	; (95fc <cc2400_spi+0x84>)
    95be:	681b      	ldr	r3, [r3, #0]
    95c0:	f003 0302 	and.w	r3, r3, #2
    95c4:	2b00      	cmp	r3, #0
    95c6:	d003      	beq.n	95d0 <cc2400_spi+0x58>
			data |= 1;
    95c8:	683b      	ldr	r3, [r7, #0]
    95ca:	f043 0301 	orr.w	r3, r3, #1
    95ce:	603b      	str	r3, [r7, #0]

		SCLK_CLR;
    95d0:	4b08      	ldr	r3, [pc, #32]	; (95f4 <cc2400_spi+0x7c>)
    95d2:	2210      	movs	r2, #16
    95d4:	601a      	str	r2, [r3, #0]
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    95d6:	79fb      	ldrb	r3, [r7, #7]
    95d8:	1e5a      	subs	r2, r3, #1
    95da:	71fa      	strb	r2, [r7, #7]
    95dc:	2b00      	cmp	r3, #0
    95de:	d1db      	bne.n	9598 <cc2400_spi+0x20>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    95e0:	4b05      	ldr	r3, [pc, #20]	; (95f8 <cc2400_spi+0x80>)
    95e2:	2220      	movs	r2, #32
    95e4:	601a      	str	r2, [r3, #0]

	return data;
    95e6:	683b      	ldr	r3, [r7, #0]
}
    95e8:	4618      	mov	r0, r3
    95ea:	3714      	adds	r7, #20
    95ec:	46bd      	mov	sp, r7
    95ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    95f2:	4770      	bx	lr
    95f4:	2009c05c 	.word	0x2009c05c
    95f8:	2009c058 	.word	0x2009c058
    95fc:	2009c054 	.word	0x2009c054

00009600 <cc2400_get>:

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    9600:	b580      	push	{r7, lr}
    9602:	b084      	sub	sp, #16
    9604:	af00      	add	r7, sp, #0
    9606:	4603      	mov	r3, r0
    9608:	71fb      	strb	r3, [r7, #7]
	u32 in;

	u32 out = (reg | 0x80) << 16;
    960a:	79fb      	ldrb	r3, [r7, #7]
    960c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9610:	b2db      	uxtb	r3, r3
    9612:	041b      	lsls	r3, r3, #16
    9614:	60fb      	str	r3, [r7, #12]
	in = cc2400_spi(24, out);
    9616:	2018      	movs	r0, #24
    9618:	68f9      	ldr	r1, [r7, #12]
    961a:	f7ff ffad 	bl	9578 <cc2400_spi>
    961e:	60b8      	str	r0, [r7, #8]
	return in & 0xFFFF;
    9620:	68bb      	ldr	r3, [r7, #8]
    9622:	b29b      	uxth	r3, r3
}
    9624:	4618      	mov	r0, r3
    9626:	3710      	adds	r7, #16
    9628:	46bd      	mov	sp, r7
    962a:	bd80      	pop	{r7, pc}

0000962c <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
    962c:	b580      	push	{r7, lr}
    962e:	b084      	sub	sp, #16
    9630:	af00      	add	r7, sp, #0
    9632:	4603      	mov	r3, r0
    9634:	460a      	mov	r2, r1
    9636:	71fb      	strb	r3, [r7, #7]
    9638:	4613      	mov	r3, r2
    963a:	80bb      	strh	r3, [r7, #4]
	u32 out = (reg << 16) | val;
    963c:	79fb      	ldrb	r3, [r7, #7]
    963e:	041a      	lsls	r2, r3, #16
    9640:	88bb      	ldrh	r3, [r7, #4]
    9642:	4313      	orrs	r3, r2
    9644:	60fb      	str	r3, [r7, #12]
	cc2400_spi(24, out);
    9646:	2018      	movs	r0, #24
    9648:	68f9      	ldr	r1, [r7, #12]
    964a:	f7ff ff95 	bl	9578 <cc2400_spi>
}
    964e:	3710      	adds	r7, #16
    9650:	46bd      	mov	sp, r7
    9652:	bd80      	pop	{r7, pc}

00009654 <cc2400_get8>:

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    9654:	b580      	push	{r7, lr}
    9656:	b084      	sub	sp, #16
    9658:	af00      	add	r7, sp, #0
    965a:	4603      	mov	r3, r0
    965c:	71fb      	strb	r3, [r7, #7]
	u16 in;

	u16 out = (reg | 0x80) << 8;
    965e:	79fb      	ldrb	r3, [r7, #7]
    9660:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9664:	b2db      	uxtb	r3, r3
    9666:	b29b      	uxth	r3, r3
    9668:	021b      	lsls	r3, r3, #8
    966a:	81fb      	strh	r3, [r7, #14]
	in = cc2400_spi(16, out);
    966c:	89fb      	ldrh	r3, [r7, #14]
    966e:	2010      	movs	r0, #16
    9670:	4619      	mov	r1, r3
    9672:	f7ff ff81 	bl	9578 <cc2400_spi>
    9676:	4603      	mov	r3, r0
    9678:	81bb      	strh	r3, [r7, #12]
	return in & 0xFF;
    967a:	89bb      	ldrh	r3, [r7, #12]
    967c:	b2db      	uxtb	r3, r3
}
    967e:	4618      	mov	r0, r3
    9680:	3710      	adds	r7, #16
    9682:	46bd      	mov	sp, r7
    9684:	bd80      	pop	{r7, pc}
    9686:	bf00      	nop

00009688 <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
    9688:	b580      	push	{r7, lr}
    968a:	b084      	sub	sp, #16
    968c:	af00      	add	r7, sp, #0
    968e:	4603      	mov	r3, r0
    9690:	460a      	mov	r2, r1
    9692:	71fb      	strb	r3, [r7, #7]
    9694:	4613      	mov	r3, r2
    9696:	71bb      	strb	r3, [r7, #6]
	u32 out = (reg << 8) | val;
    9698:	79fb      	ldrb	r3, [r7, #7]
    969a:	021a      	lsls	r2, r3, #8
    969c:	79bb      	ldrb	r3, [r7, #6]
    969e:	4313      	orrs	r3, r2
    96a0:	60fb      	str	r3, [r7, #12]
	cc2400_spi(16, out);
    96a2:	2010      	movs	r0, #16
    96a4:	68f9      	ldr	r1, [r7, #12]
    96a6:	f7ff ff67 	bl	9578 <cc2400_spi>
}
    96aa:	3710      	adds	r7, #16
    96ac:	46bd      	mov	sp, r7
    96ae:	bd80      	pop	{r7, pc}

000096b0 <cc2400_spi_buf>:

/* write multiple bytes to SPI */
void cc2400_spi_buf(u8 reg, u8 len, u8 *data)
{
    96b0:	b480      	push	{r7}
    96b2:	b085      	sub	sp, #20
    96b4:	af00      	add	r7, sp, #0
    96b6:	4603      	mov	r3, r0
    96b8:	603a      	str	r2, [r7, #0]
    96ba:	71fb      	strb	r3, [r7, #7]
    96bc:	460b      	mov	r3, r1
    96be:	71bb      	strb	r3, [r7, #6]
	u8 msb = 1 << 7;
    96c0:	2380      	movs	r3, #128	; 0x80
    96c2:	733b      	strb	r3, [r7, #12]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    96c4:	4b33      	ldr	r3, [pc, #204]	; (9794 <cc2400_spi_buf+0xe4>)
    96c6:	2220      	movs	r2, #32
    96c8:	601a      	str	r2, [r3, #0]

	for (i = 0; i < 8; ++i) {
    96ca:	2300      	movs	r3, #0
    96cc:	73fb      	strb	r3, [r7, #15]
    96ce:	e018      	b.n	9702 <cc2400_spi_buf+0x52>
		if (reg & msb)
    96d0:	79fa      	ldrb	r2, [r7, #7]
    96d2:	7b3b      	ldrb	r3, [r7, #12]
    96d4:	4013      	ands	r3, r2
    96d6:	b2db      	uxtb	r3, r3
    96d8:	2b00      	cmp	r3, #0
    96da:	d003      	beq.n	96e4 <cc2400_spi_buf+0x34>
			MOSI_SET;
    96dc:	4b2e      	ldr	r3, [pc, #184]	; (9798 <cc2400_spi_buf+0xe8>)
    96de:	2201      	movs	r2, #1
    96e0:	601a      	str	r2, [r3, #0]
    96e2:	e002      	b.n	96ea <cc2400_spi_buf+0x3a>
		else
			MOSI_CLR;
    96e4:	4b2b      	ldr	r3, [pc, #172]	; (9794 <cc2400_spi_buf+0xe4>)
    96e6:	2201      	movs	r2, #1
    96e8:	601a      	str	r2, [r3, #0]
		reg <<= 1;
    96ea:	79fb      	ldrb	r3, [r7, #7]
    96ec:	005b      	lsls	r3, r3, #1
    96ee:	71fb      	strb	r3, [r7, #7]
		SCLK_SET;
    96f0:	4b29      	ldr	r3, [pc, #164]	; (9798 <cc2400_spi_buf+0xe8>)
    96f2:	2210      	movs	r2, #16
    96f4:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    96f6:	4b27      	ldr	r3, [pc, #156]	; (9794 <cc2400_spi_buf+0xe4>)
    96f8:	2210      	movs	r2, #16
    96fa:	601a      	str	r2, [r3, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    96fc:	7bfb      	ldrb	r3, [r7, #15]
    96fe:	3301      	adds	r3, #1
    9700:	73fb      	strb	r3, [r7, #15]
    9702:	7bfb      	ldrb	r3, [r7, #15]
    9704:	2b07      	cmp	r3, #7
    9706:	d9e3      	bls.n	96d0 <cc2400_spi_buf+0x20>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    9708:	2300      	movs	r3, #0
    970a:	73fb      	strb	r3, [r7, #15]
    970c:	e026      	b.n	975c <cc2400_spi_buf+0xac>
		temp = data[i];
    970e:	7bfb      	ldrb	r3, [r7, #15]
    9710:	683a      	ldr	r2, [r7, #0]
    9712:	4413      	add	r3, r2
    9714:	781b      	ldrb	r3, [r3, #0]
    9716:	737b      	strb	r3, [r7, #13]
		for (j = 0; j < 8; ++j) {
    9718:	2300      	movs	r3, #0
    971a:	73bb      	strb	r3, [r7, #14]
    971c:	e018      	b.n	9750 <cc2400_spi_buf+0xa0>
			if (temp & msb)
    971e:	7b7a      	ldrb	r2, [r7, #13]
    9720:	7b3b      	ldrb	r3, [r7, #12]
    9722:	4013      	ands	r3, r2
    9724:	b2db      	uxtb	r3, r3
    9726:	2b00      	cmp	r3, #0
    9728:	d003      	beq.n	9732 <cc2400_spi_buf+0x82>
				MOSI_SET;
    972a:	4b1b      	ldr	r3, [pc, #108]	; (9798 <cc2400_spi_buf+0xe8>)
    972c:	2201      	movs	r2, #1
    972e:	601a      	str	r2, [r3, #0]
    9730:	e002      	b.n	9738 <cc2400_spi_buf+0x88>
			else
				MOSI_CLR;
    9732:	4b18      	ldr	r3, [pc, #96]	; (9794 <cc2400_spi_buf+0xe4>)
    9734:	2201      	movs	r2, #1
    9736:	601a      	str	r2, [r3, #0]
			temp <<= 1;
    9738:	7b7b      	ldrb	r3, [r7, #13]
    973a:	005b      	lsls	r3, r3, #1
    973c:	737b      	strb	r3, [r7, #13]
			SCLK_SET;
    973e:	4b16      	ldr	r3, [pc, #88]	; (9798 <cc2400_spi_buf+0xe8>)
    9740:	2210      	movs	r2, #16
    9742:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
    9744:	4b13      	ldr	r3, [pc, #76]	; (9794 <cc2400_spi_buf+0xe4>)
    9746:	2210      	movs	r2, #16
    9748:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    974a:	7bbb      	ldrb	r3, [r7, #14]
    974c:	3301      	adds	r3, #1
    974e:	73bb      	strb	r3, [r7, #14]
    9750:	7bbb      	ldrb	r3, [r7, #14]
    9752:	2b07      	cmp	r3, #7
    9754:	d9e3      	bls.n	971e <cc2400_spi_buf+0x6e>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    9756:	7bfb      	ldrb	r3, [r7, #15]
    9758:	3301      	adds	r3, #1
    975a:	73fb      	strb	r3, [r7, #15]
    975c:	7bfa      	ldrb	r2, [r7, #15]
    975e:	79bb      	ldrb	r3, [r7, #6]
    9760:	429a      	cmp	r2, r3
    9762:	d3d4      	bcc.n	970e <cc2400_spi_buf+0x5e>
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    9764:	2300      	movs	r3, #0
    9766:	73fb      	strb	r3, [r7, #15]
    9768:	e008      	b.n	977c <cc2400_spi_buf+0xcc>
		SCLK_SET;
    976a:	4b0b      	ldr	r3, [pc, #44]	; (9798 <cc2400_spi_buf+0xe8>)
    976c:	2210      	movs	r2, #16
    976e:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    9770:	4b08      	ldr	r3, [pc, #32]	; (9794 <cc2400_spi_buf+0xe4>)
    9772:	2210      	movs	r2, #16
    9774:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    9776:	7bfb      	ldrb	r3, [r7, #15]
    9778:	3301      	adds	r3, #1
    977a:	73fb      	strb	r3, [r7, #15]
    977c:	7bfb      	ldrb	r3, [r7, #15]
    977e:	2b07      	cmp	r3, #7
    9780:	d9f3      	bls.n	976a <cc2400_spi_buf+0xba>
		SCLK_SET;
		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    9782:	4b05      	ldr	r3, [pc, #20]	; (9798 <cc2400_spi_buf+0xe8>)
    9784:	2220      	movs	r2, #32
    9786:	601a      	str	r2, [r3, #0]
}
    9788:	3714      	adds	r7, #20
    978a:	46bd      	mov	sp, r7
    978c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9790:	4770      	bx	lr
    9792:	bf00      	nop
    9794:	2009c05c 	.word	0x2009c05c
    9798:	2009c058 	.word	0x2009c058

0000979c <cc2400_status>:

/* get the status */
u8 cc2400_status()
{
    979c:	b580      	push	{r7, lr}
    979e:	af00      	add	r7, sp, #0
	return cc2400_spi(8, 0);
    97a0:	2008      	movs	r0, #8
    97a2:	2100      	movs	r1, #0
    97a4:	f7ff fee8 	bl	9578 <cc2400_spi>
    97a8:	4603      	mov	r3, r0
    97aa:	b2db      	uxtb	r3, r3
}
    97ac:	4618      	mov	r0, r3
    97ae:	bd80      	pop	{r7, pc}

000097b0 <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    97b0:	b580      	push	{r7, lr}
    97b2:	b082      	sub	sp, #8
    97b4:	af00      	add	r7, sp, #0
    97b6:	4603      	mov	r3, r0
    97b8:	71fb      	strb	r3, [r7, #7]
	return cc2400_spi(8, reg);
    97ba:	79fb      	ldrb	r3, [r7, #7]
    97bc:	2008      	movs	r0, #8
    97be:	4619      	mov	r1, r3
    97c0:	f7ff feda 	bl	9578 <cc2400_spi>
    97c4:	4603      	mov	r3, r0
    97c6:	b2db      	uxtb	r3, r3
}
    97c8:	4618      	mov	r0, r3
    97ca:	3708      	adds	r7, #8
    97cc:	46bd      	mov	sp, r7
    97ce:	bd80      	pop	{r7, pc}

000097d0 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    97d0:	b580      	push	{r7, lr}
    97d2:	af00      	add	r7, sp, #0
	cc2400_set(MAIN, 0x0000);
    97d4:	2000      	movs	r0, #0
    97d6:	2100      	movs	r1, #0
    97d8:	f7ff ff28 	bl	962c <cc2400_set>
	while (cc2400_get(MAIN) != 0x0000);
    97dc:	bf00      	nop
    97de:	2000      	movs	r0, #0
    97e0:	f7ff ff0e 	bl	9600 <cc2400_get>
    97e4:	4603      	mov	r3, r0
    97e6:	2b00      	cmp	r3, #0
    97e8:	d1f9      	bne.n	97de <cc2400_reset+0xe>
	cc2400_set(MAIN, 0x8000);
    97ea:	2000      	movs	r0, #0
    97ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    97f0:	f7ff ff1c 	bl	962c <cc2400_set>
	while (cc2400_get(MAIN) != 0x8000);
    97f4:	bf00      	nop
    97f6:	2000      	movs	r0, #0
    97f8:	f7ff ff02 	bl	9600 <cc2400_get>
    97fc:	4603      	mov	r3, r0
    97fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9802:	d1f8      	bne.n	97f6 <cc2400_reset+0x26>
}
    9804:	bd80      	pop	{r7, pc}
    9806:	bf00      	nop

00009808 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    9808:	b580      	push	{r7, lr}
    980a:	af00      	add	r7, sp, #0
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    980c:	4b5e      	ldr	r3, [pc, #376]	; (9988 <clock_start+0x180>)
    980e:	f244 023a 	movw	r2, #16442	; 0x403a
    9812:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    9814:	4b5d      	ldr	r3, [pc, #372]	; (998c <clock_start+0x184>)
    9816:	2200      	movs	r2, #0
    9818:	601a      	str	r2, [r3, #0]

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    981a:	4a5d      	ldr	r2, [pc, #372]	; (9990 <clock_start+0x188>)
    981c:	4b5c      	ldr	r3, [pc, #368]	; (9990 <clock_start+0x188>)
    981e:	681b      	ldr	r3, [r3, #0]
    9820:	f023 0302 	bic.w	r3, r3, #2
    9824:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9826:	4b5b      	ldr	r3, [pc, #364]	; (9994 <clock_start+0x18c>)
    9828:	22aa      	movs	r2, #170	; 0xaa
    982a:	601a      	str	r2, [r3, #0]
    982c:	4b59      	ldr	r3, [pc, #356]	; (9994 <clock_start+0x18c>)
    982e:	2255      	movs	r2, #85	; 0x55
    9830:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    9832:	bf00      	nop
    9834:	4b58      	ldr	r3, [pc, #352]	; (9998 <clock_start+0x190>)
    9836:	681b      	ldr	r3, [r3, #0]
    9838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    983c:	2b00      	cmp	r3, #0
    983e:	d1f9      	bne.n	9834 <clock_start+0x2c>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    9840:	4a53      	ldr	r2, [pc, #332]	; (9990 <clock_start+0x188>)
    9842:	4b53      	ldr	r3, [pc, #332]	; (9990 <clock_start+0x188>)
    9844:	681b      	ldr	r3, [r3, #0]
    9846:	f023 0301 	bic.w	r3, r3, #1
    984a:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    984c:	4b51      	ldr	r3, [pc, #324]	; (9994 <clock_start+0x18c>)
    984e:	22aa      	movs	r2, #170	; 0xaa
    9850:	601a      	str	r2, [r3, #0]
    9852:	4b50      	ldr	r3, [pc, #320]	; (9994 <clock_start+0x18c>)
    9854:	2255      	movs	r2, #85	; 0x55
    9856:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    9858:	bf00      	nop
    985a:	4b4f      	ldr	r3, [pc, #316]	; (9998 <clock_start+0x190>)
    985c:	681b      	ldr	r3, [r3, #0]
    985e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    9862:	2b00      	cmp	r3, #0
    9864:	d1f9      	bne.n	985a <clock_start+0x52>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    9866:	4b4d      	ldr	r3, [pc, #308]	; (999c <clock_start+0x194>)
    9868:	2200      	movs	r2, #0
    986a:	601a      	str	r2, [r3, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    986c:	f7ff ffb0 	bl	97d0 <cc2400_reset>
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
    9870:	2008      	movs	r0, #8
    9872:	f241 5170 	movw	r1, #5488	; 0x1570
    9876:	f7ff fed9 	bl	962c <cc2400_set>
	cc2400_strobe(SXOSCON);
    987a:	2060      	movs	r0, #96	; 0x60
    987c:	f7ff ff98 	bl	97b0 <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    9880:	bf00      	nop
    9882:	f7ff ff8b 	bl	979c <cc2400_status>
    9886:	4603      	mov	r3, r0
    9888:	f003 0340 	and.w	r3, r3, #64	; 0x40
    988c:	2b00      	cmp	r3, #0
    988e:	d0f8      	beq.n	9882 <clock_start+0x7a>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    9890:	4b43      	ldr	r3, [pc, #268]	; (99a0 <clock_start+0x198>)
    9892:	2220      	movs	r2, #32
    9894:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    9896:	bf00      	nop
    9898:	4b41      	ldr	r3, [pc, #260]	; (99a0 <clock_start+0x198>)
    989a:	681b      	ldr	r3, [r3, #0]
    989c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    98a0:	2b00      	cmp	r3, #0
    98a2:	d0f9      	beq.n	9898 <clock_start+0x90>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    98a4:	4b3f      	ldr	r3, [pc, #252]	; (99a4 <clock_start+0x19c>)
    98a6:	2208      	movs	r2, #8
    98a8:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    98aa:	4b3f      	ldr	r3, [pc, #252]	; (99a8 <clock_start+0x1a0>)
    98ac:	2200      	movs	r2, #0
    98ae:	601a      	str	r2, [r3, #0]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    98b0:	4b36      	ldr	r3, [pc, #216]	; (998c <clock_start+0x184>)
    98b2:	2201      	movs	r2, #1
    98b4:	601a      	str	r2, [r3, #0]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    98b6:	4b3d      	ldr	r3, [pc, #244]	; (99ac <clock_start+0x1a4>)
    98b8:	4a3d      	ldr	r2, [pc, #244]	; (99b0 <clock_start+0x1a8>)
    98ba:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    98bc:	4b35      	ldr	r3, [pc, #212]	; (9994 <clock_start+0x18c>)
    98be:	22aa      	movs	r2, #170	; 0xaa
    98c0:	601a      	str	r2, [r3, #0]
    98c2:	4b34      	ldr	r3, [pc, #208]	; (9994 <clock_start+0x18c>)
    98c4:	2255      	movs	r2, #85	; 0x55
    98c6:	601a      	str	r2, [r3, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    98c8:	4a31      	ldr	r2, [pc, #196]	; (9990 <clock_start+0x188>)
    98ca:	4b31      	ldr	r3, [pc, #196]	; (9990 <clock_start+0x188>)
    98cc:	681b      	ldr	r3, [r3, #0]
    98ce:	f043 0301 	orr.w	r3, r3, #1
    98d2:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    98d4:	4b2f      	ldr	r3, [pc, #188]	; (9994 <clock_start+0x18c>)
    98d6:	22aa      	movs	r2, #170	; 0xaa
    98d8:	601a      	str	r2, [r3, #0]
    98da:	4b2e      	ldr	r3, [pc, #184]	; (9994 <clock_start+0x18c>)
    98dc:	2255      	movs	r2, #85	; 0x55
    98de:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    98e0:	bf00      	nop
    98e2:	4b2d      	ldr	r3, [pc, #180]	; (9998 <clock_start+0x190>)
    98e4:	681b      	ldr	r3, [r3, #0]
    98e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    98ea:	2b00      	cmp	r3, #0
    98ec:	d0f9      	beq.n	98e2 <clock_start+0xda>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    98ee:	4b2b      	ldr	r3, [pc, #172]	; (999c <clock_start+0x194>)
    98f0:	2203      	movs	r2, #3
    98f2:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    98f4:	4a26      	ldr	r2, [pc, #152]	; (9990 <clock_start+0x188>)
    98f6:	4b26      	ldr	r3, [pc, #152]	; (9990 <clock_start+0x188>)
    98f8:	681b      	ldr	r3, [r3, #0]
    98fa:	f043 0302 	orr.w	r3, r3, #2
    98fe:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9900:	4b24      	ldr	r3, [pc, #144]	; (9994 <clock_start+0x18c>)
    9902:	22aa      	movs	r2, #170	; 0xaa
    9904:	601a      	str	r2, [r3, #0]
    9906:	4b23      	ldr	r3, [pc, #140]	; (9994 <clock_start+0x18c>)
    9908:	2255      	movs	r2, #85	; 0x55
    990a:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    990c:	bf00      	nop
    990e:	4b22      	ldr	r3, [pc, #136]	; (9998 <clock_start+0x190>)
    9910:	681b      	ldr	r3, [r3, #0]
    9912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    9916:	2b00      	cmp	r3, #0
    9918:	d0f9      	beq.n	990e <clock_start+0x106>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    991a:	4b26      	ldr	r3, [pc, #152]	; (99b4 <clock_start+0x1ac>)
    991c:	2222      	movs	r2, #34	; 0x22
    991e:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    9920:	4b25      	ldr	r3, [pc, #148]	; (99b8 <clock_start+0x1b0>)
    9922:	22aa      	movs	r2, #170	; 0xaa
    9924:	601a      	str	r2, [r3, #0]
    9926:	4b24      	ldr	r3, [pc, #144]	; (99b8 <clock_start+0x1b0>)
    9928:	2255      	movs	r2, #85	; 0x55
    992a:	601a      	str	r2, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    992c:	4a23      	ldr	r2, [pc, #140]	; (99bc <clock_start+0x1b4>)
    992e:	4b23      	ldr	r3, [pc, #140]	; (99bc <clock_start+0x1b4>)
    9930:	681b      	ldr	r3, [r3, #0]
    9932:	f043 0301 	orr.w	r3, r3, #1
    9936:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    9938:	4b1f      	ldr	r3, [pc, #124]	; (99b8 <clock_start+0x1b0>)
    993a:	22aa      	movs	r2, #170	; 0xaa
    993c:	601a      	str	r2, [r3, #0]
    993e:	4b1e      	ldr	r3, [pc, #120]	; (99b8 <clock_start+0x1b0>)
    9940:	2255      	movs	r2, #85	; 0x55
    9942:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    9944:	bf00      	nop
    9946:	4b1e      	ldr	r3, [pc, #120]	; (99c0 <clock_start+0x1b8>)
    9948:	681b      	ldr	r3, [r3, #0]
    994a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    994e:	2b00      	cmp	r3, #0
    9950:	d0f9      	beq.n	9946 <clock_start+0x13e>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    9952:	bf00      	nop
    9954:	4b1a      	ldr	r3, [pc, #104]	; (99c0 <clock_start+0x1b8>)
    9956:	681b      	ldr	r3, [r3, #0]
    9958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    995c:	2b00      	cmp	r3, #0
    995e:	d0f9      	beq.n	9954 <clock_start+0x14c>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    9960:	4a16      	ldr	r2, [pc, #88]	; (99bc <clock_start+0x1b4>)
    9962:	4b16      	ldr	r3, [pc, #88]	; (99bc <clock_start+0x1b4>)
    9964:	681b      	ldr	r3, [r3, #0]
    9966:	f043 0302 	orr.w	r3, r3, #2
    996a:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    996c:	4b12      	ldr	r3, [pc, #72]	; (99b8 <clock_start+0x1b0>)
    996e:	22aa      	movs	r2, #170	; 0xaa
    9970:	601a      	str	r2, [r3, #0]
    9972:	4b11      	ldr	r3, [pc, #68]	; (99b8 <clock_start+0x1b0>)
    9974:	2255      	movs	r2, #85	; 0x55
    9976:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    9978:	bf00      	nop
    997a:	4b11      	ldr	r3, [pc, #68]	; (99c0 <clock_start+0x1b8>)
    997c:	681b      	ldr	r3, [r3, #0]
    997e:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9982:	2b00      	cmp	r3, #0
    9984:	d0f9      	beq.n	997a <clock_start+0x172>
}
    9986:	bd80      	pop	{r7, pc}
    9988:	400fc000 	.word	0x400fc000
    998c:	400fc10c 	.word	0x400fc10c
    9990:	400fc080 	.word	0x400fc080
    9994:	400fc08c 	.word	0x400fc08c
    9998:	400fc088 	.word	0x400fc088
    999c:	400fc104 	.word	0x400fc104
    99a0:	400fc1a0 	.word	0x400fc1a0
    99a4:	400fc1a8 	.word	0x400fc1a8
    99a8:	400fc1ac 	.word	0x400fc1ac
    99ac:	400fc084 	.word	0x400fc084
    99b0:	00010018 	.word	0x00010018
    99b4:	400fc0a4 	.word	0x400fc0a4
    99b8:	400fc0ac 	.word	0x400fc0ac
    99bc:	400fc0a0 	.word	0x400fc0a0
    99c0:	400fc0a8 	.word	0x400fc0a8

000099c4 <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    99c4:	b580      	push	{r7, lr}
    99c6:	af00      	add	r7, sp, #0
	all_pins_off();
    99c8:	f7ff fcd0 	bl	936c <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    99cc:	4b0a      	ldr	r3, [pc, #40]	; (99f8 <reset+0x34>)
    99ce:	2202      	movs	r2, #2
    99d0:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    99d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    99d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    99da:	681b      	ldr	r3, [r3, #0]
    99dc:	f043 0303 	orr.w	r3, r3, #3
    99e0:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    99e2:	4b06      	ldr	r3, [pc, #24]	; (99fc <reset+0x38>)
    99e4:	22aa      	movs	r2, #170	; 0xaa
    99e6:	601a      	str	r2, [r3, #0]
    99e8:	4b04      	ldr	r3, [pc, #16]	; (99fc <reset+0x38>)
    99ea:	2255      	movs	r2, #85	; 0x55
    99ec:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
    99ee:	2001      	movs	r0, #1
    99f0:	f7ff fc38 	bl	9264 <wait>
}
    99f4:	bd80      	pop	{r7, pc}
    99f6:	bf00      	nop
    99f8:	2009c03c 	.word	0x2009c03c
    99fc:	40000008 	.word	0x40000008

00009a00 <_HandleRequest>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    9a00:	b580      	push	{r7, lr}
    9a02:	b088      	sub	sp, #32
    9a04:	af00      	add	r7, sp, #0
    9a06:	60f8      	str	r0, [r7, #12]
    9a08:	60b9      	str	r1, [r7, #8]
    9a0a:	607a      	str	r2, [r7, #4]
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    9a0c:	68fb      	ldr	r3, [r7, #12]
    9a0e:	781b      	ldrb	r3, [r3, #0]
    9a10:	095b      	lsrs	r3, r3, #5
    9a12:	b2db      	uxtb	r3, r3
    9a14:	f003 0303 	and.w	r3, r3, #3
    9a18:	61fb      	str	r3, [r7, #28]
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    9a1a:	69fb      	ldr	r3, [r7, #28]
    9a1c:	2b02      	cmp	r3, #2
    9a1e:	d10e      	bne.n	9a3e <_HandleRequest+0x3e>
		BOOL fFilterStatus = FALSE;
    9a20:	2300      	movs	r3, #0
    9a22:	617b      	str	r3, [r7, #20]
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    9a24:	f107 0314 	add.w	r3, r7, #20
    9a28:	68f8      	ldr	r0, [r7, #12]
    9a2a:	4619      	mov	r1, r3
    9a2c:	68ba      	ldr	r2, [r7, #8]
    9a2e:	687b      	ldr	r3, [r7, #4]
    9a30:	f000 fcd2 	bl	a3d8 <USBFilterOsVendorMessage>
    9a34:	4603      	mov	r3, r0
    9a36:	2b00      	cmp	r3, #0
    9a38:	d001      	beq.n	9a3e <_HandleRequest+0x3e>
			return fFilterStatus;
    9a3a:	697b      	ldr	r3, [r7, #20]
    9a3c:	e00f      	b.n	9a5e <_HandleRequest+0x5e>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    9a3e:	4a0a      	ldr	r2, [pc, #40]	; (9a68 <_HandleRequest+0x68>)
    9a40:	69fb      	ldr	r3, [r7, #28]
    9a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9a46:	61bb      	str	r3, [r7, #24]
	if (pfnHandler == NULL) {
    9a48:	69bb      	ldr	r3, [r7, #24]
    9a4a:	2b00      	cmp	r3, #0
    9a4c:	d101      	bne.n	9a52 <_HandleRequest+0x52>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    9a4e:	2300      	movs	r3, #0
    9a50:	e005      	b.n	9a5e <_HandleRequest+0x5e>
	}

	return pfnHandler(pSetup, piLen, ppbData);
    9a52:	69bb      	ldr	r3, [r7, #24]
    9a54:	68f8      	ldr	r0, [r7, #12]
    9a56:	68b9      	ldr	r1, [r7, #8]
    9a58:	687a      	ldr	r2, [r7, #4]
    9a5a:	4798      	blx	r3
    9a5c:	4603      	mov	r3, r0
}
    9a5e:	4618      	mov	r0, r3
    9a60:	3720      	adds	r7, #32
    9a62:	46bd      	mov	sp, r7
    9a64:	bd80      	pop	{r7, pc}
    9a66:	bf00      	nop
    9a68:	10000a90 	.word	0x10000a90

00009a6c <StallControlPipe>:
	Local function to stall the control endpoint
	
	@param [in]	bEPStat	Endpoint status
 */
static void StallControlPipe(U8 bEPStat)
{
    9a6c:	b580      	push	{r7, lr}
    9a6e:	b084      	sub	sp, #16
    9a70:	af00      	add	r7, sp, #0
    9a72:	4603      	mov	r3, r0
    9a74:	71fb      	strb	r3, [r7, #7]
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    9a76:	2080      	movs	r0, #128	; 0x80
    9a78:	2101      	movs	r1, #1
    9a7a:	f000 fa83 	bl	9f84 <USBHwEPStall>

// dump setup packet
	DBG("STALL on [");
	pb = (U8 *)&Setup;
    9a7e:	4b07      	ldr	r3, [pc, #28]	; (9a9c <StallControlPipe+0x30>)
    9a80:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
    9a82:	2300      	movs	r3, #0
    9a84:	60fb      	str	r3, [r7, #12]
    9a86:	e002      	b.n	9a8e <StallControlPipe+0x22>
    9a88:	68fb      	ldr	r3, [r7, #12]
    9a8a:	3301      	adds	r3, #1
    9a8c:	60fb      	str	r3, [r7, #12]
    9a8e:	68fb      	ldr	r3, [r7, #12]
    9a90:	2b07      	cmp	r3, #7
    9a92:	ddf9      	ble.n	9a88 <StallControlPipe+0x1c>
		DBG(" %02x", *pb++);
	}
	DBG("] stat=%x\n", bEPStat);
}
    9a94:	3710      	adds	r7, #16
    9a96:	46bd      	mov	sp, r7
    9a98:	bd80      	pop	{r7, pc}
    9a9a:	bf00      	nop
    9a9c:	10000a7c 	.word	0x10000a7c

00009aa0 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    9aa0:	b580      	push	{r7, lr}
    9aa2:	b082      	sub	sp, #8
    9aa4:	af00      	add	r7, sp, #0
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    9aa6:	4b0e      	ldr	r3, [pc, #56]	; (9ae0 <DataIn+0x40>)
    9aa8:	681b      	ldr	r3, [r3, #0]
    9aaa:	2b40      	cmp	r3, #64	; 0x40
    9aac:	bfa8      	it	ge
    9aae:	2340      	movge	r3, #64	; 0x40
    9ab0:	607b      	str	r3, [r7, #4]
	USBHwEPWrite(0x80, pbData, iChunk);
    9ab2:	4b0c      	ldr	r3, [pc, #48]	; (9ae4 <DataIn+0x44>)
    9ab4:	681a      	ldr	r2, [r3, #0]
    9ab6:	687b      	ldr	r3, [r7, #4]
    9ab8:	2080      	movs	r0, #128	; 0x80
    9aba:	4611      	mov	r1, r2
    9abc:	461a      	mov	r2, r3
    9abe:	f000 fa85 	bl	9fcc <USBHwEPWrite>
	pbData += iChunk;
    9ac2:	4b08      	ldr	r3, [pc, #32]	; (9ae4 <DataIn+0x44>)
    9ac4:	681a      	ldr	r2, [r3, #0]
    9ac6:	687b      	ldr	r3, [r7, #4]
    9ac8:	4413      	add	r3, r2
    9aca:	4a06      	ldr	r2, [pc, #24]	; (9ae4 <DataIn+0x44>)
    9acc:	6013      	str	r3, [r2, #0]
	iResidue -= iChunk;
    9ace:	4b04      	ldr	r3, [pc, #16]	; (9ae0 <DataIn+0x40>)
    9ad0:	681a      	ldr	r2, [r3, #0]
    9ad2:	687b      	ldr	r3, [r7, #4]
    9ad4:	1ad3      	subs	r3, r2, r3
    9ad6:	4a02      	ldr	r2, [pc, #8]	; (9ae0 <DataIn+0x40>)
    9ad8:	6013      	str	r3, [r2, #0]
}
    9ada:	3708      	adds	r7, #8
    9adc:	46bd      	mov	sp, r7
    9ade:	bd80      	pop	{r7, pc}
    9ae0:	10000a88 	.word	0x10000a88
    9ae4:	10000a84 	.word	0x10000a84

00009ae8 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    9ae8:	b580      	push	{r7, lr}
    9aea:	b084      	sub	sp, #16
    9aec:	af00      	add	r7, sp, #0
    9aee:	4603      	mov	r3, r0
    9af0:	460a      	mov	r2, r1
    9af2:	71fb      	strb	r3, [r7, #7]
    9af4:	4613      	mov	r3, r2
    9af6:	71bb      	strb	r3, [r7, #6]
	int iChunk, iType;

	if (bEP == 0x00) {
    9af8:	79fb      	ldrb	r3, [r7, #7]
    9afa:	2b00      	cmp	r3, #0
    9afc:	f040 8091 	bne.w	9c22 <USBHandleControlTransfer+0x13a>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    9b00:	79bb      	ldrb	r3, [r7, #6]
    9b02:	f003 0304 	and.w	r3, r3, #4
    9b06:	2b00      	cmp	r3, #0
    9b08:	d041      	beq.n	9b8e <USBHandleControlTransfer+0xa6>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    9b0a:	2000      	movs	r0, #0
    9b0c:	4949      	ldr	r1, [pc, #292]	; (9c34 <USBHandleControlTransfer+0x14c>)
    9b0e:	2208      	movs	r2, #8
    9b10:	f000 faaa 	bl	a068 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    9b14:	4b47      	ldr	r3, [pc, #284]	; (9c34 <USBHandleControlTransfer+0x14c>)
    9b16:	781b      	ldrb	r3, [r3, #0]
    9b18:	095b      	lsrs	r3, r3, #5
    9b1a:	b2db      	uxtb	r3, r3
    9b1c:	f003 0303 	and.w	r3, r3, #3
    9b20:	60fb      	str	r3, [r7, #12]
			pbData = apbDataStore[iType];
    9b22:	4a45      	ldr	r2, [pc, #276]	; (9c38 <USBHandleControlTransfer+0x150>)
    9b24:	68fb      	ldr	r3, [r7, #12]
    9b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9b2a:	4a44      	ldr	r2, [pc, #272]	; (9c3c <USBHandleControlTransfer+0x154>)
    9b2c:	6013      	str	r3, [r2, #0]
			iResidue = Setup.wLength;
    9b2e:	4b41      	ldr	r3, [pc, #260]	; (9c34 <USBHandleControlTransfer+0x14c>)
    9b30:	88db      	ldrh	r3, [r3, #6]
    9b32:	461a      	mov	r2, r3
    9b34:	4b42      	ldr	r3, [pc, #264]	; (9c40 <USBHandleControlTransfer+0x158>)
    9b36:	601a      	str	r2, [r3, #0]
			iLen = Setup.wLength;
    9b38:	4b3e      	ldr	r3, [pc, #248]	; (9c34 <USBHandleControlTransfer+0x14c>)
    9b3a:	88db      	ldrh	r3, [r3, #6]
    9b3c:	461a      	mov	r2, r3
    9b3e:	4b41      	ldr	r3, [pc, #260]	; (9c44 <USBHandleControlTransfer+0x15c>)
    9b40:	601a      	str	r2, [r3, #0]

			if ((Setup.wLength == 0) ||
    9b42:	4b3c      	ldr	r3, [pc, #240]	; (9c34 <USBHandleControlTransfer+0x14c>)
    9b44:	88db      	ldrh	r3, [r3, #6]
    9b46:	2b00      	cmp	r3, #0
    9b48:	d007      	beq.n	9b5a <USBHandleControlTransfer+0x72>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
    9b4a:	4b3a      	ldr	r3, [pc, #232]	; (9c34 <USBHandleControlTransfer+0x14c>)
    9b4c:	781b      	ldrb	r3, [r3, #0]
    9b4e:	09db      	lsrs	r3, r3, #7
    9b50:	b2db      	uxtb	r3, r3
    9b52:	f003 0301 	and.w	r3, r3, #1
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
			pbData = apbDataStore[iType];
			iResidue = Setup.wLength;
			iLen = Setup.wLength;

			if ((Setup.wLength == 0) ||
    9b56:	2b00      	cmp	r3, #0
    9b58:	d068      	beq.n	9c2c <USBHandleControlTransfer+0x144>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    9b5a:	4836      	ldr	r0, [pc, #216]	; (9c34 <USBHandleControlTransfer+0x14c>)
    9b5c:	4939      	ldr	r1, [pc, #228]	; (9c44 <USBHandleControlTransfer+0x15c>)
    9b5e:	4a37      	ldr	r2, [pc, #220]	; (9c3c <USBHandleControlTransfer+0x154>)
    9b60:	f7ff ff4e 	bl	9a00 <_HandleRequest>
    9b64:	4603      	mov	r3, r0
    9b66:	2b00      	cmp	r3, #0
    9b68:	d104      	bne.n	9b74 <USBHandleControlTransfer+0x8c>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
    9b6a:	79bb      	ldrb	r3, [r7, #6]
    9b6c:	4618      	mov	r0, r3
    9b6e:	f7ff ff7d 	bl	9a6c <StallControlPipe>
					return;
    9b72:	e05b      	b.n	9c2c <USBHandleControlTransfer+0x144>
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    9b74:	4b2f      	ldr	r3, [pc, #188]	; (9c34 <USBHandleControlTransfer+0x14c>)
    9b76:	88db      	ldrh	r3, [r3, #6]
    9b78:	461a      	mov	r2, r3
    9b7a:	4b32      	ldr	r3, [pc, #200]	; (9c44 <USBHandleControlTransfer+0x15c>)
    9b7c:	681b      	ldr	r3, [r3, #0]
    9b7e:	4293      	cmp	r3, r2
    9b80:	bfa8      	it	ge
    9b82:	4613      	movge	r3, r2
    9b84:	4a2e      	ldr	r2, [pc, #184]	; (9c40 <USBHandleControlTransfer+0x158>)
    9b86:	6013      	str	r3, [r2, #0]
				// send first part (possibly a zero-length status message)
				DataIn();
    9b88:	f7ff ff8a 	bl	9aa0 <DataIn>
    9b8c:	e04e      	b.n	9c2c <USBHandleControlTransfer+0x144>
			}
		}
		else {		
			if (iResidue > 0) {
    9b8e:	4b2c      	ldr	r3, [pc, #176]	; (9c40 <USBHandleControlTransfer+0x158>)
    9b90:	681b      	ldr	r3, [r3, #0]
    9b92:	2b00      	cmp	r3, #0
    9b94:	dd3e      	ble.n	9c14 <USBHandleControlTransfer+0x12c>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    9b96:	4b29      	ldr	r3, [pc, #164]	; (9c3c <USBHandleControlTransfer+0x154>)
    9b98:	681a      	ldr	r2, [r3, #0]
    9b9a:	4b29      	ldr	r3, [pc, #164]	; (9c40 <USBHandleControlTransfer+0x158>)
    9b9c:	681b      	ldr	r3, [r3, #0]
    9b9e:	2000      	movs	r0, #0
    9ba0:	4611      	mov	r1, r2
    9ba2:	461a      	mov	r2, r3
    9ba4:	f000 fa60 	bl	a068 <USBHwEPRead>
    9ba8:	60b8      	str	r0, [r7, #8]
				if (iChunk < 0) {
    9baa:	68bb      	ldr	r3, [r7, #8]
    9bac:	2b00      	cmp	r3, #0
    9bae:	da04      	bge.n	9bba <USBHandleControlTransfer+0xd2>
					StallControlPipe(bEPStat);
    9bb0:	79bb      	ldrb	r3, [r7, #6]
    9bb2:	4618      	mov	r0, r3
    9bb4:	f7ff ff5a 	bl	9a6c <StallControlPipe>
					return;
    9bb8:	e038      	b.n	9c2c <USBHandleControlTransfer+0x144>
				}
				pbData += iChunk;
    9bba:	4b20      	ldr	r3, [pc, #128]	; (9c3c <USBHandleControlTransfer+0x154>)
    9bbc:	681a      	ldr	r2, [r3, #0]
    9bbe:	68bb      	ldr	r3, [r7, #8]
    9bc0:	4413      	add	r3, r2
    9bc2:	4a1e      	ldr	r2, [pc, #120]	; (9c3c <USBHandleControlTransfer+0x154>)
    9bc4:	6013      	str	r3, [r2, #0]
				iResidue -= iChunk;
    9bc6:	4b1e      	ldr	r3, [pc, #120]	; (9c40 <USBHandleControlTransfer+0x158>)
    9bc8:	681a      	ldr	r2, [r3, #0]
    9bca:	68bb      	ldr	r3, [r7, #8]
    9bcc:	1ad3      	subs	r3, r2, r3
    9bce:	4a1c      	ldr	r2, [pc, #112]	; (9c40 <USBHandleControlTransfer+0x158>)
    9bd0:	6013      	str	r3, [r2, #0]
				if (iResidue == 0) {
    9bd2:	4b1b      	ldr	r3, [pc, #108]	; (9c40 <USBHandleControlTransfer+0x158>)
    9bd4:	681b      	ldr	r3, [r3, #0]
    9bd6:	2b00      	cmp	r3, #0
    9bd8:	d128      	bne.n	9c2c <USBHandleControlTransfer+0x144>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    9bda:	4b16      	ldr	r3, [pc, #88]	; (9c34 <USBHandleControlTransfer+0x14c>)
    9bdc:	781b      	ldrb	r3, [r3, #0]
    9bde:	095b      	lsrs	r3, r3, #5
    9be0:	b2db      	uxtb	r3, r3
    9be2:	f003 0303 	and.w	r3, r3, #3
    9be6:	60fb      	str	r3, [r7, #12]
					pbData = apbDataStore[iType];
    9be8:	4a13      	ldr	r2, [pc, #76]	; (9c38 <USBHandleControlTransfer+0x150>)
    9bea:	68fb      	ldr	r3, [r7, #12]
    9bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9bf0:	4a12      	ldr	r2, [pc, #72]	; (9c3c <USBHandleControlTransfer+0x154>)
    9bf2:	6013      	str	r3, [r2, #0]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    9bf4:	480f      	ldr	r0, [pc, #60]	; (9c34 <USBHandleControlTransfer+0x14c>)
    9bf6:	4913      	ldr	r1, [pc, #76]	; (9c44 <USBHandleControlTransfer+0x15c>)
    9bf8:	4a10      	ldr	r2, [pc, #64]	; (9c3c <USBHandleControlTransfer+0x154>)
    9bfa:	f7ff ff01 	bl	9a00 <_HandleRequest>
    9bfe:	4603      	mov	r3, r0
    9c00:	2b00      	cmp	r3, #0
    9c02:	d104      	bne.n	9c0e <USBHandleControlTransfer+0x126>
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
    9c04:	79bb      	ldrb	r3, [r7, #6]
    9c06:	4618      	mov	r0, r3
    9c08:	f7ff ff30 	bl	9a6c <StallControlPipe>
						return;
    9c0c:	e00e      	b.n	9c2c <USBHandleControlTransfer+0x144>
					}
					// send status to host
					DataIn();
    9c0e:	f7ff ff47 	bl	9aa0 <DataIn>
    9c12:	e00b      	b.n	9c2c <USBHandleControlTransfer+0x144>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    9c14:	2000      	movs	r0, #0
    9c16:	2100      	movs	r1, #0
    9c18:	2200      	movs	r2, #0
    9c1a:	f000 fa25 	bl	a068 <USBHwEPRead>
    9c1e:	60b8      	str	r0, [r7, #8]
    9c20:	e004      	b.n	9c2c <USBHandleControlTransfer+0x144>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    9c22:	79fb      	ldrb	r3, [r7, #7]
    9c24:	2b80      	cmp	r3, #128	; 0x80
    9c26:	d101      	bne.n	9c2c <USBHandleControlTransfer+0x144>
		// IN transfer
		// send more data if available (possibly a 0-length packet)
		DataIn();
    9c28:	f7ff ff3a 	bl	9aa0 <DataIn>
	}
	else {
		ASSERT(FALSE);
	}
}
    9c2c:	3710      	adds	r7, #16
    9c2e:	46bd      	mov	sp, r7
    9c30:	bd80      	pop	{r7, pc}
    9c32:	bf00      	nop
    9c34:	10000a7c 	.word	0x10000a7c
    9c38:	10000aa0 	.word	0x10000aa0
    9c3c:	10000a84 	.word	0x10000a84
    9c40:	10000a88 	.word	0x10000a88
    9c44:	10000a8c 	.word	0x10000a8c

00009c48 <USBRegisterRequestHandler>:
	@param [in]	iType			Type of request, e.g. REQTYPE_TYPE_STANDARD
	@param [in]	*pfnHandler		Callback function pointer
	@param [in]	*pbDataStore	Data storage area for this type of request
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
    9c48:	b480      	push	{r7}
    9c4a:	b085      	sub	sp, #20
    9c4c:	af00      	add	r7, sp, #0
    9c4e:	60f8      	str	r0, [r7, #12]
    9c50:	60b9      	str	r1, [r7, #8]
    9c52:	607a      	str	r2, [r7, #4]
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    9c54:	4907      	ldr	r1, [pc, #28]	; (9c74 <USBRegisterRequestHandler+0x2c>)
    9c56:	68fb      	ldr	r3, [r7, #12]
    9c58:	68ba      	ldr	r2, [r7, #8]
    9c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	apbDataStore[iType] = pbDataStore;
    9c5e:	4906      	ldr	r1, [pc, #24]	; (9c78 <USBRegisterRequestHandler+0x30>)
    9c60:	68fb      	ldr	r3, [r7, #12]
    9c62:	687a      	ldr	r2, [r7, #4]
    9c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    9c68:	3714      	adds	r7, #20
    9c6a:	46bd      	mov	sp, r7
    9c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c70:	4770      	bx	lr
    9c72:	bf00      	nop
    9c74:	10000a90 	.word	0x10000a90
    9c78:	10000aa0 	.word	0x10000aa0

00009c7c <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    9c7c:	b480      	push	{r7}
    9c7e:	b083      	sub	sp, #12
    9c80:	af00      	add	r7, sp, #0
    9c82:	4603      	mov	r3, r0
    9c84:	71fb      	strb	r3, [r7, #7]
	if (bDevStatus & DEV_STATUS_RESET) {
		DBG("\n!");
	}
}
    9c86:	370c      	adds	r7, #12
    9c88:	46bd      	mov	sp, r7
    9c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c8e:	4770      	bx	lr

00009c90 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    9c90:	b580      	push	{r7, lr}
    9c92:	af00      	add	r7, sp, #0
	// init hardware
	USBHwInit();
    9c94:	f000 fb2a 	bl	a2ec <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    9c98:	480d      	ldr	r0, [pc, #52]	; (9cd0 <USBInit+0x40>)
    9c9a:	f000 f913 	bl	9ec4 <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    9c9e:	2000      	movs	r0, #0
    9ca0:	490c      	ldr	r1, [pc, #48]	; (9cd4 <USBInit+0x44>)
    9ca2:	f000 f8dd 	bl	9e60 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    9ca6:	2080      	movs	r0, #128	; 0x80
    9ca8:	490a      	ldr	r1, [pc, #40]	; (9cd4 <USBInit+0x44>)
    9caa:	f000 f8d9 	bl	9e60 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    9cae:	2000      	movs	r0, #0
    9cb0:	2140      	movs	r1, #64	; 0x40
    9cb2:	f000 f8b7 	bl	9e24 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    9cb6:	2080      	movs	r0, #128	; 0x80
    9cb8:	2140      	movs	r1, #64	; 0x40
    9cba:	f000 f8b3 	bl	9e24 <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    9cbe:	2000      	movs	r0, #0
    9cc0:	4905      	ldr	r1, [pc, #20]	; (9cd8 <USBInit+0x48>)
    9cc2:	4a06      	ldr	r2, [pc, #24]	; (9cdc <USBInit+0x4c>)
    9cc4:	f7ff ffc0 	bl	9c48 <USBRegisterRequestHandler>

	return TRUE;
    9cc8:	2301      	movs	r3, #1
}
    9cca:	4618      	mov	r0, r3
    9ccc:	bd80      	pop	{r7, pc}
    9cce:	bf00      	nop
    9cd0:	00009c7d 	.word	0x00009c7d
    9cd4:	00009ae9 	.word	0x00009ae9
    9cd8:	0000a925 	.word	0x0000a925
    9cdc:	10000ab0 	.word	0x10000ab0

00009ce0 <Wait4DevInt>:
    Local function to wait for a device interrupt (and clear it)
        
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    9ce0:	b480      	push	{r7}
    9ce2:	b083      	sub	sp, #12
    9ce4:	af00      	add	r7, sp, #0
    9ce6:	6078      	str	r0, [r7, #4]
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    9ce8:	bf00      	nop
    9cea:	4b07      	ldr	r3, [pc, #28]	; (9d08 <Wait4DevInt+0x28>)
    9cec:	681a      	ldr	r2, [r3, #0]
    9cee:	687b      	ldr	r3, [r7, #4]
    9cf0:	401a      	ands	r2, r3
    9cf2:	687b      	ldr	r3, [r7, #4]
    9cf4:	429a      	cmp	r2, r3
    9cf6:	d1f8      	bne.n	9cea <Wait4DevInt+0xa>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    9cf8:	4a04      	ldr	r2, [pc, #16]	; (9d0c <Wait4DevInt+0x2c>)
    9cfa:	687b      	ldr	r3, [r7, #4]
    9cfc:	6013      	str	r3, [r2, #0]
}
    9cfe:	370c      	adds	r7, #12
    9d00:	46bd      	mov	sp, r7
    9d02:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d06:	4770      	bx	lr
    9d08:	5000c200 	.word	0x5000c200
    9d0c:	5000c208 	.word	0x5000c208

00009d10 <USBHwCmd>:
    Local function to send a command to the USB protocol engine
        
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    9d10:	b580      	push	{r7, lr}
    9d12:	b082      	sub	sp, #8
    9d14:	af00      	add	r7, sp, #0
    9d16:	4603      	mov	r3, r0
    9d18:	71fb      	strb	r3, [r7, #7]
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    9d1a:	4b07      	ldr	r3, [pc, #28]	; (9d38 <USBHwCmd+0x28>)
    9d1c:	2230      	movs	r2, #48	; 0x30
    9d1e:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    9d20:	4a06      	ldr	r2, [pc, #24]	; (9d3c <USBHwCmd+0x2c>)
    9d22:	79fb      	ldrb	r3, [r7, #7]
    9d24:	041b      	lsls	r3, r3, #16
    9d26:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    9d2a:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    9d2c:	2010      	movs	r0, #16
    9d2e:	f7ff ffd7 	bl	9ce0 <Wait4DevInt>
}
    9d32:	3708      	adds	r7, #8
    9d34:	46bd      	mov	sp, r7
    9d36:	bd80      	pop	{r7, pc}
    9d38:	5000c208 	.word	0x5000c208
    9d3c:	5000c210 	.word	0x5000c210

00009d40 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    9d40:	b580      	push	{r7, lr}
    9d42:	b082      	sub	sp, #8
    9d44:	af00      	add	r7, sp, #0
    9d46:	4603      	mov	r3, r0
    9d48:	460a      	mov	r2, r1
    9d4a:	71fb      	strb	r3, [r7, #7]
    9d4c:	4613      	mov	r3, r2
    9d4e:	80bb      	strh	r3, [r7, #4]
    // write command code
    USBHwCmd(bCmd);
    9d50:	79fb      	ldrb	r3, [r7, #7]
    9d52:	4618      	mov	r0, r3
    9d54:	f7ff ffdc 	bl	9d10 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    9d58:	4a05      	ldr	r2, [pc, #20]	; (9d70 <USBHwCmdWrite+0x30>)
    9d5a:	88bb      	ldrh	r3, [r7, #4]
    9d5c:	041b      	lsls	r3, r3, #16
    9d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9d62:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    9d64:	2010      	movs	r0, #16
    9d66:	f7ff ffbb 	bl	9ce0 <Wait4DevInt>
}
    9d6a:	3708      	adds	r7, #8
    9d6c:	46bd      	mov	sp, r7
    9d6e:	bd80      	pop	{r7, pc}
    9d70:	5000c210 	.word	0x5000c210

00009d74 <USBHwCmdRead>:
    @param [in] bCmd        Command to send

    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    9d74:	b580      	push	{r7, lr}
    9d76:	b082      	sub	sp, #8
    9d78:	af00      	add	r7, sp, #0
    9d7a:	4603      	mov	r3, r0
    9d7c:	71fb      	strb	r3, [r7, #7]
    // write command code
    USBHwCmd(bCmd);
    9d7e:	79fb      	ldrb	r3, [r7, #7]
    9d80:	4618      	mov	r0, r3
    9d82:	f7ff ffc5 	bl	9d10 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    9d86:	4a08      	ldr	r2, [pc, #32]	; (9da8 <USBHwCmdRead+0x34>)
    9d88:	79fb      	ldrb	r3, [r7, #7]
    9d8a:	041b      	lsls	r3, r3, #16
    9d8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    9d90:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CDFULL);
    9d92:	2020      	movs	r0, #32
    9d94:	f7ff ffa4 	bl	9ce0 <Wait4DevInt>
    return USBCmdData;
    9d98:	4b04      	ldr	r3, [pc, #16]	; (9dac <USBHwCmdRead+0x38>)
    9d9a:	681b      	ldr	r3, [r3, #0]
    9d9c:	b2db      	uxtb	r3, r3
}
    9d9e:	4618      	mov	r0, r3
    9da0:	3708      	adds	r7, #8
    9da2:	46bd      	mov	sp, r7
    9da4:	bd80      	pop	{r7, pc}
    9da6:	bf00      	nop
    9da8:	5000c210 	.word	0x5000c210
    9dac:	5000c214 	.word	0x5000c214

00009db0 <USBHwEPRealize>:
        
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    9db0:	b580      	push	{r7, lr}
    9db2:	b082      	sub	sp, #8
    9db4:	af00      	add	r7, sp, #0
    9db6:	6078      	str	r0, [r7, #4]
    9db8:	460b      	mov	r3, r1
    9dba:	807b      	strh	r3, [r7, #2]
    USBReEp |= (1 << idx);
    9dbc:	490a      	ldr	r1, [pc, #40]	; (9de8 <USBHwEPRealize+0x38>)
    9dbe:	4b0a      	ldr	r3, [pc, #40]	; (9de8 <USBHwEPRealize+0x38>)
    9dc0:	681b      	ldr	r3, [r3, #0]
    9dc2:	2001      	movs	r0, #1
    9dc4:	687a      	ldr	r2, [r7, #4]
    9dc6:	fa00 f202 	lsl.w	r2, r0, r2
    9dca:	4313      	orrs	r3, r2
    9dcc:	600b      	str	r3, [r1, #0]
#ifdef LPC17xx
    USBEpIn = idx;
    9dce:	4a07      	ldr	r2, [pc, #28]	; (9dec <USBHwEPRealize+0x3c>)
    9dd0:	687b      	ldr	r3, [r7, #4]
    9dd2:	6013      	str	r3, [r2, #0]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    9dd4:	4a06      	ldr	r2, [pc, #24]	; (9df0 <USBHwEPRealize+0x40>)
    9dd6:	887b      	ldrh	r3, [r7, #2]
    9dd8:	6013      	str	r3, [r2, #0]
    Wait4DevInt(EP_RLZED);
    9dda:	f44f 7080 	mov.w	r0, #256	; 0x100
    9dde:	f7ff ff7f 	bl	9ce0 <Wait4DevInt>
}
    9de2:	3708      	adds	r7, #8
    9de4:	46bd      	mov	sp, r7
    9de6:	bd80      	pop	{r7, pc}
    9de8:	5000c244 	.word	0x5000c244
    9dec:	5000c248 	.word	0x5000c248
    9df0:	5000c24c 	.word	0x5000c24c

00009df4 <USBHwEPEnable>:
        
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    9df4:	b580      	push	{r7, lr}
    9df6:	b082      	sub	sp, #8
    9df8:	af00      	add	r7, sp, #0
    9dfa:	6078      	str	r0, [r7, #4]
    9dfc:	6039      	str	r1, [r7, #0]
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    9dfe:	687b      	ldr	r3, [r7, #4]
    9e00:	b2db      	uxtb	r3, r3
    9e02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9e06:	b2db      	uxtb	r3, r3
    9e08:	b2da      	uxtb	r2, r3
    9e0a:	683b      	ldr	r3, [r7, #0]
    9e0c:	2b00      	cmp	r3, #0
    9e0e:	d001      	beq.n	9e14 <USBHwEPEnable+0x20>
    9e10:	2300      	movs	r3, #0
    9e12:	e000      	b.n	9e16 <USBHwEPEnable+0x22>
    9e14:	2320      	movs	r3, #32
    9e16:	4610      	mov	r0, r2
    9e18:	4619      	mov	r1, r3
    9e1a:	f7ff ff91 	bl	9d40 <USBHwCmdWrite>
}
    9e1e:	3708      	adds	r7, #8
    9e20:	46bd      	mov	sp, r7
    9e22:	bd80      	pop	{r7, pc}

00009e24 <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    9e24:	b580      	push	{r7, lr}
    9e26:	b084      	sub	sp, #16
    9e28:	af00      	add	r7, sp, #0
    9e2a:	4603      	mov	r3, r0
    9e2c:	460a      	mov	r2, r1
    9e2e:	71fb      	strb	r3, [r7, #7]
    9e30:	4613      	mov	r3, r2
    9e32:	80bb      	strh	r3, [r7, #4]
    int idx;
    
    idx = EP2IDX(bEP);
    9e34:	79fb      	ldrb	r3, [r7, #7]
    9e36:	f003 030f 	and.w	r3, r3, #15
    9e3a:	005b      	lsls	r3, r3, #1
    9e3c:	79fa      	ldrb	r2, [r7, #7]
    9e3e:	09d2      	lsrs	r2, r2, #7
    9e40:	b2d2      	uxtb	r2, r2
    9e42:	4313      	orrs	r3, r2
    9e44:	60fb      	str	r3, [r7, #12]
    
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);
    9e46:	88bb      	ldrh	r3, [r7, #4]
    9e48:	68f8      	ldr	r0, [r7, #12]
    9e4a:	4619      	mov	r1, r3
    9e4c:	f7ff ffb0 	bl	9db0 <USBHwEPRealize>

    // enable EP
    USBHwEPEnable(idx, TRUE);
    9e50:	68f8      	ldr	r0, [r7, #12]
    9e52:	2101      	movs	r1, #1
    9e54:	f7ff ffce 	bl	9df4 <USBHwEPEnable>
}
    9e58:	3710      	adds	r7, #16
    9e5a:	46bd      	mov	sp, r7
    9e5c:	bd80      	pop	{r7, pc}
    9e5e:	bf00      	nop

00009e60 <USBHwRegisterEPIntHandler>:
        
    @param [in] bEP             Endpoint number
    @param [in] pfnHandler      Callback function
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    9e60:	b480      	push	{r7}
    9e62:	b085      	sub	sp, #20
    9e64:	af00      	add	r7, sp, #0
    9e66:	4603      	mov	r3, r0
    9e68:	6039      	str	r1, [r7, #0]
    9e6a:	71fb      	strb	r3, [r7, #7]
    int idx;
    
    idx = EP2IDX(bEP);
    9e6c:	79fb      	ldrb	r3, [r7, #7]
    9e6e:	f003 030f 	and.w	r3, r3, #15
    9e72:	005b      	lsls	r3, r3, #1
    9e74:	79fa      	ldrb	r2, [r7, #7]
    9e76:	09d2      	lsrs	r2, r2, #7
    9e78:	b2d2      	uxtb	r2, r2
    9e7a:	4313      	orrs	r3, r2
    9e7c:	60fb      	str	r3, [r7, #12]

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    9e7e:	68fb      	ldr	r3, [r7, #12]
    9e80:	0fda      	lsrs	r2, r3, #31
    9e82:	4413      	add	r3, r2
    9e84:	105b      	asrs	r3, r3, #1
    9e86:	4619      	mov	r1, r3
    9e88:	4a0b      	ldr	r2, [pc, #44]	; (9eb8 <USBHwRegisterEPIntHandler+0x58>)
    9e8a:	683b      	ldr	r3, [r7, #0]
    9e8c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    9e90:	490a      	ldr	r1, [pc, #40]	; (9ebc <USBHwRegisterEPIntHandler+0x5c>)
    9e92:	4b0a      	ldr	r3, [pc, #40]	; (9ebc <USBHwRegisterEPIntHandler+0x5c>)
    9e94:	681b      	ldr	r3, [r3, #0]
    9e96:	2001      	movs	r0, #1
    9e98:	68fa      	ldr	r2, [r7, #12]
    9e9a:	fa00 f202 	lsl.w	r2, r0, r2
    9e9e:	4313      	orrs	r3, r2
    9ea0:	600b      	str	r3, [r1, #0]
    USBDevIntEn |= EP_SLOW;
    9ea2:	4a07      	ldr	r2, [pc, #28]	; (9ec0 <USBHwRegisterEPIntHandler+0x60>)
    9ea4:	4b06      	ldr	r3, [pc, #24]	; (9ec0 <USBHwRegisterEPIntHandler+0x60>)
    9ea6:	681b      	ldr	r3, [r3, #0]
    9ea8:	f043 0304 	orr.w	r3, r3, #4
    9eac:	6013      	str	r3, [r2, #0]
    
    DBG("Registered handler for EP 0x%x\n", bEP);
}
    9eae:	3714      	adds	r7, #20
    9eb0:	46bd      	mov	sp, r7
    9eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9eb6:	4770      	bx	lr
    9eb8:	10000abc 	.word	0x10000abc
    9ebc:	5000c234 	.word	0x5000c234
    9ec0:	5000c204 	.word	0x5000c204

00009ec4 <USBHwRegisterDevIntHandler>:
    Registers an device status callback
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    9ec4:	b480      	push	{r7}
    9ec6:	b083      	sub	sp, #12
    9ec8:	af00      	add	r7, sp, #0
    9eca:	6078      	str	r0, [r7, #4]
    _pfnDevIntHandler = pfnHandler;
    9ecc:	4a06      	ldr	r2, [pc, #24]	; (9ee8 <USBHwRegisterDevIntHandler+0x24>)
    9ece:	687b      	ldr	r3, [r7, #4]
    9ed0:	6013      	str	r3, [r2, #0]
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    9ed2:	4a06      	ldr	r2, [pc, #24]	; (9eec <USBHwRegisterDevIntHandler+0x28>)
    9ed4:	4b05      	ldr	r3, [pc, #20]	; (9eec <USBHwRegisterDevIntHandler+0x28>)
    9ed6:	681b      	ldr	r3, [r3, #0]
    9ed8:	f043 0308 	orr.w	r3, r3, #8
    9edc:	6013      	str	r3, [r2, #0]

    DBG("Registered handler for device status\n");
}
    9ede:	370c      	adds	r7, #12
    9ee0:	46bd      	mov	sp, r7
    9ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ee6:	4770      	bx	lr
    9ee8:	10000ab8 	.word	0x10000ab8
    9eec:	5000c204 	.word	0x5000c204

00009ef0 <USBHwSetAddress>:
    Sets the USB address.
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    9ef0:	b580      	push	{r7, lr}
    9ef2:	b082      	sub	sp, #8
    9ef4:	af00      	add	r7, sp, #0
    9ef6:	4603      	mov	r3, r0
    9ef8:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    9efa:	79fb      	ldrb	r3, [r7, #7]
    9efc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9f00:	b2db      	uxtb	r3, r3
    9f02:	b29b      	uxth	r3, r3
    9f04:	20d0      	movs	r0, #208	; 0xd0
    9f06:	4619      	mov	r1, r3
    9f08:	f7ff ff1a 	bl	9d40 <USBHwCmdWrite>
}
    9f0c:	3708      	adds	r7, #8
    9f0e:	46bd      	mov	sp, r7
    9f10:	bd80      	pop	{r7, pc}
    9f12:	bf00      	nop

00009f14 <USBHwConnect>:
    Connects or disconnects from the USB bus
        
    @param [in] fConnect    If TRUE, connect, otherwise disconnect
 */
void USBHwConnect(BOOL fConnect)
{
    9f14:	b580      	push	{r7, lr}
    9f16:	b082      	sub	sp, #8
    9f18:	af00      	add	r7, sp, #0
    9f1a:	6078      	str	r0, [r7, #4]
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    9f1c:	687b      	ldr	r3, [r7, #4]
    9f1e:	2b00      	cmp	r3, #0
    9f20:	bf14      	ite	ne
    9f22:	2301      	movne	r3, #1
    9f24:	2300      	moveq	r3, #0
    9f26:	b2db      	uxtb	r3, r3
    9f28:	b29b      	uxth	r3, r3
    9f2a:	20fe      	movs	r0, #254	; 0xfe
    9f2c:	4619      	mov	r1, r3
    9f2e:	f7ff ff07 	bl	9d40 <USBHwCmdWrite>
}
    9f32:	3708      	adds	r7, #8
    9f34:	46bd      	mov	sp, r7
    9f36:	bd80      	pop	{r7, pc}

00009f38 <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    9f38:	b580      	push	{r7, lr}
    9f3a:	b082      	sub	sp, #8
    9f3c:	af00      	add	r7, sp, #0
    9f3e:	4603      	mov	r3, r0
    9f40:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    9f42:	79fb      	ldrb	r3, [r7, #7]
    9f44:	b29b      	uxth	r3, r3
    9f46:	20f3      	movs	r0, #243	; 0xf3
    9f48:	4619      	mov	r1, r3
    9f4a:	f7ff fef9 	bl	9d40 <USBHwCmdWrite>
}
    9f4e:	3708      	adds	r7, #8
    9f50:	46bd      	mov	sp, r7
    9f52:	bd80      	pop	{r7, pc}

00009f54 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    9f54:	b580      	push	{r7, lr}
    9f56:	b084      	sub	sp, #16
    9f58:	af00      	add	r7, sp, #0
    9f5a:	4603      	mov	r3, r0
    9f5c:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    9f5e:	79fb      	ldrb	r3, [r7, #7]
    9f60:	f003 030f 	and.w	r3, r3, #15
    9f64:	005b      	lsls	r3, r3, #1
    9f66:	79fa      	ldrb	r2, [r7, #7]
    9f68:	09d2      	lsrs	r2, r2, #7
    9f6a:	b2d2      	uxtb	r2, r2
    9f6c:	4313      	orrs	r3, r2
    9f6e:	60fb      	str	r3, [r7, #12]

    return USBHwCmdRead(CMD_EP_SELECT | idx);
    9f70:	68fb      	ldr	r3, [r7, #12]
    9f72:	b2db      	uxtb	r3, r3
    9f74:	4618      	mov	r0, r3
    9f76:	f7ff fefd 	bl	9d74 <USBHwCmdRead>
    9f7a:	4603      	mov	r3, r0
}
    9f7c:	4618      	mov	r0, r3
    9f7e:	3710      	adds	r7, #16
    9f80:	46bd      	mov	sp, r7
    9f82:	bd80      	pop	{r7, pc}

00009f84 <USBHwEPStall>:
        
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    9f84:	b580      	push	{r7, lr}
    9f86:	b084      	sub	sp, #16
    9f88:	af00      	add	r7, sp, #0
    9f8a:	4603      	mov	r3, r0
    9f8c:	6039      	str	r1, [r7, #0]
    9f8e:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    9f90:	79fb      	ldrb	r3, [r7, #7]
    9f92:	f003 030f 	and.w	r3, r3, #15
    9f96:	005b      	lsls	r3, r3, #1
    9f98:	79fa      	ldrb	r2, [r7, #7]
    9f9a:	09d2      	lsrs	r2, r2, #7
    9f9c:	b2d2      	uxtb	r2, r2
    9f9e:	4313      	orrs	r3, r2
    9fa0:	60fb      	str	r3, [r7, #12]

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    9fa2:	68fb      	ldr	r3, [r7, #12]
    9fa4:	b2db      	uxtb	r3, r3
    9fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9faa:	b2db      	uxtb	r3, r3
    9fac:	b2da      	uxtb	r2, r3
    9fae:	683b      	ldr	r3, [r7, #0]
    9fb0:	2b00      	cmp	r3, #0
    9fb2:	bf14      	ite	ne
    9fb4:	2301      	movne	r3, #1
    9fb6:	2300      	moveq	r3, #0
    9fb8:	b2db      	uxtb	r3, r3
    9fba:	b29b      	uxth	r3, r3
    9fbc:	4610      	mov	r0, r2
    9fbe:	4619      	mov	r1, r3
    9fc0:	f7ff febe 	bl	9d40 <USBHwCmdWrite>
}
    9fc4:	3710      	adds	r7, #16
    9fc6:	46bd      	mov	sp, r7
    9fc8:	bd80      	pop	{r7, pc}
    9fca:	bf00      	nop

00009fcc <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    9fcc:	b580      	push	{r7, lr}
    9fce:	b086      	sub	sp, #24
    9fd0:	af00      	add	r7, sp, #0
    9fd2:	4603      	mov	r3, r0
    9fd4:	60b9      	str	r1, [r7, #8]
    9fd6:	607a      	str	r2, [r7, #4]
    9fd8:	73fb      	strb	r3, [r7, #15]
    U32 idx;
    
    idx = EP2IDX(bEP);
    9fda:	7bfb      	ldrb	r3, [r7, #15]
    9fdc:	f003 030f 	and.w	r3, r3, #15
    9fe0:	005b      	lsls	r3, r3, #1
    9fe2:	7bfa      	ldrb	r2, [r7, #15]
    9fe4:	09d2      	lsrs	r2, r2, #7
    9fe6:	b2d2      	uxtb	r2, r2
    9fe8:	4313      	orrs	r3, r2
    9fea:	617b      	str	r3, [r7, #20]
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    9fec:	4a1b      	ldr	r2, [pc, #108]	; (a05c <USBHwEPWrite+0x90>)
    9fee:	7bfb      	ldrb	r3, [r7, #15]
    9ff0:	f003 030f 	and.w	r3, r3, #15
    9ff4:	009b      	lsls	r3, r3, #2
    9ff6:	f043 0302 	orr.w	r3, r3, #2
    9ffa:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    9ffc:	4a18      	ldr	r2, [pc, #96]	; (a060 <USBHwEPWrite+0x94>)
    9ffe:	687b      	ldr	r3, [r7, #4]
    a000:	6013      	str	r3, [r2, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    a002:	e015      	b.n	a030 <USBHwEPWrite+0x64>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    a004:	4917      	ldr	r1, [pc, #92]	; (a064 <USBHwEPWrite+0x98>)
    a006:	68bb      	ldr	r3, [r7, #8]
    a008:	3303      	adds	r3, #3
    a00a:	781b      	ldrb	r3, [r3, #0]
    a00c:	061a      	lsls	r2, r3, #24
    a00e:	68bb      	ldr	r3, [r7, #8]
    a010:	3302      	adds	r3, #2
    a012:	781b      	ldrb	r3, [r3, #0]
    a014:	041b      	lsls	r3, r3, #16
    a016:	431a      	orrs	r2, r3
    a018:	68bb      	ldr	r3, [r7, #8]
    a01a:	3301      	adds	r3, #1
    a01c:	781b      	ldrb	r3, [r3, #0]
    a01e:	021b      	lsls	r3, r3, #8
    a020:	4313      	orrs	r3, r2
    a022:	68ba      	ldr	r2, [r7, #8]
    a024:	7812      	ldrb	r2, [r2, #0]
    a026:	4313      	orrs	r3, r2
    a028:	600b      	str	r3, [r1, #0]
        pbBuf += 4;
    a02a:	68bb      	ldr	r3, [r7, #8]
    a02c:	3304      	adds	r3, #4
    a02e:	60bb      	str	r3, [r7, #8]
    
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
    a030:	4b0a      	ldr	r3, [pc, #40]	; (a05c <USBHwEPWrite+0x90>)
    a032:	681b      	ldr	r3, [r3, #0]
    a034:	f003 0302 	and.w	r3, r3, #2
    a038:	2b00      	cmp	r3, #0
    a03a:	d1e3      	bne.n	a004 <USBHwEPWrite+0x38>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
        pbBuf += 4;
    }

    USBCtrl = 0;
    a03c:	4b07      	ldr	r3, [pc, #28]	; (a05c <USBHwEPWrite+0x90>)
    a03e:	2200      	movs	r2, #0
    a040:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    a042:	697b      	ldr	r3, [r7, #20]
    a044:	b2db      	uxtb	r3, r3
    a046:	4618      	mov	r0, r3
    a048:	f7ff fe62 	bl	9d10 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    a04c:	20fa      	movs	r0, #250	; 0xfa
    a04e:	f7ff fe5f 	bl	9d10 <USBHwCmd>
    
    return iLen;
    a052:	687b      	ldr	r3, [r7, #4]
}
    a054:	4618      	mov	r0, r3
    a056:	3718      	adds	r7, #24
    a058:	46bd      	mov	sp, r7
    a05a:	bd80      	pop	{r7, pc}
    a05c:	5000c228 	.word	0x5000c228
    a060:	5000c224 	.word	0x5000c224
    a064:	5000c21c 	.word	0x5000c21c

0000a068 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    a068:	b580      	push	{r7, lr}
    a06a:	b088      	sub	sp, #32
    a06c:	af00      	add	r7, sp, #0
    a06e:	4603      	mov	r3, r0
    a070:	60b9      	str	r1, [r7, #8]
    a072:	607a      	str	r2, [r7, #4]
    a074:	73fb      	strb	r3, [r7, #15]
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    a076:	7bfb      	ldrb	r3, [r7, #15]
    a078:	f003 030f 	and.w	r3, r3, #15
    a07c:	005b      	lsls	r3, r3, #1
    a07e:	7bfa      	ldrb	r2, [r7, #15]
    a080:	09d2      	lsrs	r2, r2, #7
    a082:	b2d2      	uxtb	r2, r2
    a084:	4313      	orrs	r3, r2
    a086:	617b      	str	r3, [r7, #20]
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    a088:	4a27      	ldr	r2, [pc, #156]	; (a128 <USBHwEPRead+0xc0>)
    a08a:	7bfb      	ldrb	r3, [r7, #15]
    a08c:	f003 030f 	and.w	r3, r3, #15
    a090:	009b      	lsls	r3, r3, #2
    a092:	f043 0301 	orr.w	r3, r3, #1
    a096:	6013      	str	r3, [r2, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    a098:	4b24      	ldr	r3, [pc, #144]	; (a12c <USBHwEPRead+0xc4>)
    a09a:	681b      	ldr	r3, [r3, #0]
    a09c:	613b      	str	r3, [r7, #16]
    } while ((dwLen & PKT_RDY) == 0);
    a09e:	693b      	ldr	r3, [r7, #16]
    a0a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    a0a4:	2b00      	cmp	r3, #0
    a0a6:	d0f7      	beq.n	a098 <USBHwEPRead+0x30>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    a0a8:	693b      	ldr	r3, [r7, #16]
    a0aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a0ae:	2b00      	cmp	r3, #0
    a0b0:	d102      	bne.n	a0b8 <USBHwEPRead+0x50>
        return -1;
    a0b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a0b6:	e033      	b.n	a120 <USBHwEPRead+0xb8>
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    a0b8:	693b      	ldr	r3, [r7, #16]
    a0ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a0be:	613b      	str	r3, [r7, #16]
    
    // get data
    dwData = 0;
    a0c0:	2300      	movs	r3, #0
    a0c2:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < dwLen; i++) {
    a0c4:	2300      	movs	r3, #0
    a0c6:	61fb      	str	r3, [r7, #28]
    a0c8:	e01a      	b.n	a100 <USBHwEPRead+0x98>
        if ((i % 4) == 0) {
    a0ca:	69fb      	ldr	r3, [r7, #28]
    a0cc:	f003 0303 	and.w	r3, r3, #3
    a0d0:	2b00      	cmp	r3, #0
    a0d2:	d102      	bne.n	a0da <USBHwEPRead+0x72>
            dwData = USBRxData;
    a0d4:	4b16      	ldr	r3, [pc, #88]	; (a130 <USBHwEPRead+0xc8>)
    a0d6:	681b      	ldr	r3, [r3, #0]
    a0d8:	61bb      	str	r3, [r7, #24]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    a0da:	68bb      	ldr	r3, [r7, #8]
    a0dc:	2b00      	cmp	r3, #0
    a0de:	d009      	beq.n	a0f4 <USBHwEPRead+0x8c>
    a0e0:	69fa      	ldr	r2, [r7, #28]
    a0e2:	687b      	ldr	r3, [r7, #4]
    a0e4:	429a      	cmp	r2, r3
    a0e6:	d205      	bcs.n	a0f4 <USBHwEPRead+0x8c>
            pbBuf[i] = dwData & 0xFF;
    a0e8:	68ba      	ldr	r2, [r7, #8]
    a0ea:	69fb      	ldr	r3, [r7, #28]
    a0ec:	4413      	add	r3, r2
    a0ee:	69ba      	ldr	r2, [r7, #24]
    a0f0:	b2d2      	uxtb	r2, r2
    a0f2:	701a      	strb	r2, [r3, #0]
        }
        dwData >>= 8;
    a0f4:	69bb      	ldr	r3, [r7, #24]
    a0f6:	0a1b      	lsrs	r3, r3, #8
    a0f8:	61bb      	str	r3, [r7, #24]
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    a0fa:	69fb      	ldr	r3, [r7, #28]
    a0fc:	3301      	adds	r3, #1
    a0fe:	61fb      	str	r3, [r7, #28]
    a100:	69fa      	ldr	r2, [r7, #28]
    a102:	693b      	ldr	r3, [r7, #16]
    a104:	429a      	cmp	r2, r3
    a106:	d3e0      	bcc.n	a0ca <USBHwEPRead+0x62>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    a108:	4b07      	ldr	r3, [pc, #28]	; (a128 <USBHwEPRead+0xc0>)
    a10a:	2200      	movs	r2, #0
    a10c:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    a10e:	697b      	ldr	r3, [r7, #20]
    a110:	b2db      	uxtb	r3, r3
    a112:	4618      	mov	r0, r3
    a114:	f7ff fdfc 	bl	9d10 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    a118:	20f2      	movs	r0, #242	; 0xf2
    a11a:	f7ff fdf9 	bl	9d10 <USBHwCmd>
    
    return dwLen;
    a11e:	693b      	ldr	r3, [r7, #16]
}
    a120:	4618      	mov	r0, r3
    a122:	3720      	adds	r7, #32
    a124:	46bd      	mov	sp, r7
    a126:	bd80      	pop	{r7, pc}
    a128:	5000c228 	.word	0x5000c228
    a12c:	5000c220 	.word	0x5000c220
    a130:	5000c218 	.word	0x5000c218

0000a134 <USBHwConfigDevice>:
    'configured' bit is set in the device status register.
        
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    a134:	b580      	push	{r7, lr}
    a136:	b082      	sub	sp, #8
    a138:	af00      	add	r7, sp, #0
    a13a:	6078      	str	r0, [r7, #4]
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    a13c:	687b      	ldr	r3, [r7, #4]
    a13e:	2b00      	cmp	r3, #0
    a140:	bf14      	ite	ne
    a142:	2301      	movne	r3, #1
    a144:	2300      	moveq	r3, #0
    a146:	b2db      	uxtb	r3, r3
    a148:	b29b      	uxth	r3, r3
    a14a:	20d8      	movs	r0, #216	; 0xd8
    a14c:	4619      	mov	r1, r3
    a14e:	f7ff fdf7 	bl	9d40 <USBHwCmdWrite>
}
    a152:	3708      	adds	r7, #8
    a154:	46bd      	mov	sp, r7
    a156:	bd80      	pop	{r7, pc}

0000a158 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    a158:	b580      	push	{r7, lr}
    a15a:	b086      	sub	sp, #24
    a15c:	af00      	add	r7, sp, #0

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    a15e:	4b5b      	ldr	r3, [pc, #364]	; (a2cc <USBHwISR+0x174>)
    a160:	681b      	ldr	r3, [r3, #0]
    a162:	613b      	str	r3, [r7, #16]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    a164:	693b      	ldr	r3, [r7, #16]
    a166:	f003 0301 	and.w	r3, r3, #1
    a16a:	2b00      	cmp	r3, #0
    a16c:	d010      	beq.n	a190 <USBHwISR+0x38>
        // clear int
        USBDevIntClr = FRAME;
    a16e:	4b58      	ldr	r3, [pc, #352]	; (a2d0 <USBHwISR+0x178>)
    a170:	2201      	movs	r2, #1
    a172:	601a      	str	r2, [r3, #0]
        // call handler
        if (_pfnFrameHandler != NULL) {
    a174:	4b57      	ldr	r3, [pc, #348]	; (a2d4 <USBHwISR+0x17c>)
    a176:	681b      	ldr	r3, [r3, #0]
    a178:	2b00      	cmp	r3, #0
    a17a:	d009      	beq.n	a190 <USBHwISR+0x38>
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
    a17c:	20f5      	movs	r0, #245	; 0xf5
    a17e:	f7ff fdf9 	bl	9d74 <USBHwCmdRead>
    a182:	4603      	mov	r3, r0
    a184:	81fb      	strh	r3, [r7, #14]
            _pfnFrameHandler(wFrame);
    a186:	4b53      	ldr	r3, [pc, #332]	; (a2d4 <USBHwISR+0x17c>)
    a188:	681b      	ldr	r3, [r3, #0]
    a18a:	89fa      	ldrh	r2, [r7, #14]
    a18c:	4610      	mov	r0, r2
    a18e:	4798      	blx	r3
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    a190:	693b      	ldr	r3, [r7, #16]
    a192:	f003 0308 	and.w	r3, r3, #8
    a196:	2b00      	cmp	r3, #0
    a198:	d02b      	beq.n	a1f2 <USBHwISR+0x9a>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    a19a:	4b4d      	ldr	r3, [pc, #308]	; (a2d0 <USBHwISR+0x178>)
    a19c:	2208      	movs	r2, #8
    a19e:	601a      	str	r2, [r3, #0]
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
    a1a0:	20fe      	movs	r0, #254	; 0xfe
    a1a2:	f7ff fde7 	bl	9d74 <USBHwCmdRead>
    a1a6:	4603      	mov	r3, r0
    a1a8:	737b      	strb	r3, [r7, #13]
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    a1aa:	7b7b      	ldrb	r3, [r7, #13]
    a1ac:	f003 031a 	and.w	r3, r3, #26
    a1b0:	2b00      	cmp	r3, #0
    a1b2:	d01e      	beq.n	a1f2 <USBHwISR+0x9a>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
    a1b4:	7b7b      	ldrb	r3, [r7, #13]
    a1b6:	f003 0301 	and.w	r3, r3, #1
    a1ba:	2b00      	cmp	r3, #0
    a1bc:	bf14      	ite	ne
    a1be:	2301      	movne	r3, #1
    a1c0:	2300      	moveq	r3, #0
    a1c2:	b2db      	uxtb	r3, r3
    a1c4:	b2da      	uxtb	r2, r3
    a1c6:	7b7b      	ldrb	r3, [r7, #13]
    a1c8:	f003 0304 	and.w	r3, r3, #4
    a1cc:	b2db      	uxtb	r3, r3
    a1ce:	4313      	orrs	r3, r2
    a1d0:	b2da      	uxtb	r2, r3
    a1d2:	7b7b      	ldrb	r3, [r7, #13]
    a1d4:	f003 0310 	and.w	r3, r3, #16
    a1d8:	b2db      	uxtb	r3, r3
    a1da:	4313      	orrs	r3, r2
    a1dc:	b2db      	uxtb	r3, r3
    a1de:	733b      	strb	r3, [r7, #12]
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    a1e0:	4b3d      	ldr	r3, [pc, #244]	; (a2d8 <USBHwISR+0x180>)
    a1e2:	681b      	ldr	r3, [r3, #0]
    a1e4:	2b00      	cmp	r3, #0
    a1e6:	d004      	beq.n	a1f2 <USBHwISR+0x9a>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    a1e8:	4b3b      	ldr	r3, [pc, #236]	; (a2d8 <USBHwISR+0x180>)
    a1ea:	681b      	ldr	r3, [r3, #0]
    a1ec:	7b3a      	ldrb	r2, [r7, #12]
    a1ee:	4610      	mov	r0, r2
    a1f0:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    a1f2:	693b      	ldr	r3, [r7, #16]
    a1f4:	f003 0304 	and.w	r3, r3, #4
    a1f8:	2b00      	cmp	r3, #0
    a1fa:	d063      	beq.n	a2c4 <USBHwISR+0x16c>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    a1fc:	4b34      	ldr	r3, [pc, #208]	; (a2d0 <USBHwISR+0x178>)
    a1fe:	2204      	movs	r2, #4
    a200:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    a202:	2300      	movs	r3, #0
    a204:	617b      	str	r3, [r7, #20]
    a206:	e05a      	b.n	a2be <USBHwISR+0x166>
            dwIntBit = (1 << i);
    a208:	2201      	movs	r2, #1
    a20a:	697b      	ldr	r3, [r7, #20]
    a20c:	fa02 f303 	lsl.w	r3, r2, r3
    a210:	60bb      	str	r3, [r7, #8]
            if (USBEpIntSt & dwIntBit) {
    a212:	4b32      	ldr	r3, [pc, #200]	; (a2dc <USBHwISR+0x184>)
    a214:	681a      	ldr	r2, [r3, #0]
    a216:	68bb      	ldr	r3, [r7, #8]
    a218:	4013      	ands	r3, r2
    a21a:	2b00      	cmp	r3, #0
    a21c:	d04c      	beq.n	a2b8 <USBHwISR+0x160>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    a21e:	4a30      	ldr	r2, [pc, #192]	; (a2e0 <USBHwISR+0x188>)
    a220:	68bb      	ldr	r3, [r7, #8]
    a222:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    a224:	2020      	movs	r0, #32
    a226:	f7ff fd5b 	bl	9ce0 <Wait4DevInt>
                bEPStat = USBCmdData;
    a22a:	4b2e      	ldr	r3, [pc, #184]	; (a2e4 <USBHwISR+0x18c>)
    a22c:	681b      	ldr	r3, [r3, #0]
    a22e:	71fb      	strb	r3, [r7, #7]
                // convert EP pipe stat into something HW independent
                bStat = ((bEPStat & EPSTAT_FE) ? EP_STATUS_DATA : 0) |
    a230:	79fb      	ldrb	r3, [r7, #7]
    a232:	f003 0301 	and.w	r3, r3, #1
    a236:	2b00      	cmp	r3, #0
    a238:	bf14      	ite	ne
    a23a:	2301      	movne	r3, #1
    a23c:	2300      	moveq	r3, #0
    a23e:	b2db      	uxtb	r3, r3
    a240:	b2da      	uxtb	r2, r3
    a242:	79fb      	ldrb	r3, [r7, #7]
    a244:	f003 0302 	and.w	r3, r3, #2
    a248:	b2db      	uxtb	r3, r3
    a24a:	4313      	orrs	r3, r2
    a24c:	b2da      	uxtb	r2, r3
    a24e:	79fb      	ldrb	r3, [r7, #7]
    a250:	f003 0304 	and.w	r3, r3, #4
    a254:	b2db      	uxtb	r3, r3
    a256:	4313      	orrs	r3, r2
    a258:	b2da      	uxtb	r2, r3
    a25a:	79fb      	ldrb	r3, [r7, #7]
    a25c:	f003 0310 	and.w	r3, r3, #16
    a260:	b2db      	uxtb	r3, r3
    a262:	4313      	orrs	r3, r2
    a264:	b2da      	uxtb	r2, r3
    a266:	79fb      	ldrb	r3, [r7, #7]
    a268:	f003 0308 	and.w	r3, r3, #8
    a26c:	b2db      	uxtb	r3, r3
    a26e:	4313      	orrs	r3, r2
    a270:	b2db      	uxtb	r3, r3
    a272:	733b      	strb	r3, [r7, #12]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    a274:	697b      	ldr	r3, [r7, #20]
    a276:	0fda      	lsrs	r2, r3, #31
    a278:	4413      	add	r3, r2
    a27a:	105b      	asrs	r3, r3, #1
    a27c:	461a      	mov	r2, r3
    a27e:	4b1a      	ldr	r3, [pc, #104]	; (a2e8 <USBHwISR+0x190>)
    a280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a284:	2b00      	cmp	r3, #0
    a286:	d017      	beq.n	a2b8 <USBHwISR+0x160>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    a288:	697b      	ldr	r3, [r7, #20]
    a28a:	0fda      	lsrs	r2, r3, #31
    a28c:	4413      	add	r3, r2
    a28e:	105b      	asrs	r3, r3, #1
    a290:	461a      	mov	r2, r3
    a292:	4b15      	ldr	r3, [pc, #84]	; (a2e8 <USBHwISR+0x190>)
    a294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a298:	697a      	ldr	r2, [r7, #20]
    a29a:	01d2      	lsls	r2, r2, #7
    a29c:	b2d1      	uxtb	r1, r2
    a29e:	697a      	ldr	r2, [r7, #20]
    a2a0:	1052      	asrs	r2, r2, #1
    a2a2:	b2d2      	uxtb	r2, r2
    a2a4:	f002 020f 	and.w	r2, r2, #15
    a2a8:	b2d2      	uxtb	r2, r2
    a2aa:	430a      	orrs	r2, r1
    a2ac:	b2d2      	uxtb	r2, r2
    a2ae:	b2d1      	uxtb	r1, r2
    a2b0:	7b3a      	ldrb	r2, [r7, #12]
    a2b2:	4608      	mov	r0, r1
    a2b4:	4611      	mov	r1, r2
    a2b6:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    a2b8:	697b      	ldr	r3, [r7, #20]
    a2ba:	3301      	adds	r3, #1
    a2bc:	617b      	str	r3, [r7, #20]
    a2be:	697b      	ldr	r3, [r7, #20]
    a2c0:	2b1f      	cmp	r3, #31
    a2c2:	dda1      	ble.n	a208 <USBHwISR+0xb0>
            }
        }
    }
    
DEBUG_LED_OFF(9);       
}
    a2c4:	3718      	adds	r7, #24
    a2c6:	46bd      	mov	sp, r7
    a2c8:	bd80      	pop	{r7, pc}
    a2ca:	bf00      	nop
    a2cc:	5000c200 	.word	0x5000c200
    a2d0:	5000c208 	.word	0x5000c208
    a2d4:	10000afc 	.word	0x10000afc
    a2d8:	10000ab8 	.word	0x10000ab8
    a2dc:	5000c230 	.word	0x5000c230
    a2e0:	5000c238 	.word	0x5000c238
    a2e4:	5000c214 	.word	0x5000c214
    a2e8:	10000abc 	.word	0x10000abc

0000a2ec <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    a2ec:	b580      	push	{r7, lr}
    a2ee:	af00      	add	r7, sp, #0
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    a2f0:	4a2d      	ldr	r2, [pc, #180]	; (a3a8 <USBHwInit+0xbc>)
    a2f2:	4b2d      	ldr	r3, [pc, #180]	; (a3a8 <USBHwInit+0xbc>)
    a2f4:	681b      	ldr	r3, [r3, #0]
    a2f6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    a2fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    a2fe:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    a300:	4a2a      	ldr	r2, [pc, #168]	; (a3ac <USBHwInit+0xc0>)
    a302:	4b2a      	ldr	r3, [pc, #168]	; (a3ac <USBHwInit+0xc0>)
    a304:	681b      	ldr	r3, [r3, #0]
    a306:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    a30a:	f043 0310 	orr.w	r3, r3, #16
    a30e:	6013      	str	r3, [r2, #0]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    a310:	4a26      	ldr	r2, [pc, #152]	; (a3ac <USBHwInit+0xc0>)
    a312:	4b26      	ldr	r3, [pc, #152]	; (a3ac <USBHwInit+0xc0>)
    a314:	681b      	ldr	r3, [r3, #0]
    a316:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    a31a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    a31e:	6013      	str	r3, [r2, #0]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    a320:	4a23      	ldr	r2, [pc, #140]	; (a3b0 <USBHwInit+0xc4>)
    a322:	4b23      	ldr	r3, [pc, #140]	; (a3b0 <USBHwInit+0xc4>)
    a324:	681b      	ldr	r3, [r3, #0]
    a326:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    a32a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    a32e:	6013      	str	r3, [r2, #0]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    a330:	4a1f      	ldr	r2, [pc, #124]	; (a3b0 <USBHwInit+0xc4>)
    a332:	4b1f      	ldr	r3, [pc, #124]	; (a3b0 <USBHwInit+0xc4>)
    a334:	681b      	ldr	r3, [r3, #0]
    a336:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    a33a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    a33e:	6013      	str	r3, [r2, #0]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    a340:	4a1c      	ldr	r2, [pc, #112]	; (a3b4 <USBHwInit+0xc8>)
    a342:	4b1c      	ldr	r3, [pc, #112]	; (a3b4 <USBHwInit+0xc8>)
    a344:	681b      	ldr	r3, [r3, #0]
    a346:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a34a:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    a34c:	4a1a      	ldr	r2, [pc, #104]	; (a3b8 <USBHwInit+0xcc>)
    a34e:	4b1a      	ldr	r3, [pc, #104]	; (a3b8 <USBHwInit+0xcc>)
    a350:	681b      	ldr	r3, [r3, #0]
    a352:	f043 0312 	orr.w	r3, r3, #18
    a356:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    a358:	bf00      	nop
    a35a:	4b18      	ldr	r3, [pc, #96]	; (a3bc <USBHwInit+0xd0>)
    a35c:	681b      	ldr	r3, [r3, #0]
    a35e:	f003 0302 	and.w	r3, r3, #2
    a362:	2b00      	cmp	r3, #0
    a364:	d0f9      	beq.n	a35a <USBHwInit+0x6e>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    a366:	bf00      	nop
    a368:	4b14      	ldr	r3, [pc, #80]	; (a3bc <USBHwInit+0xd0>)
    a36a:	681b      	ldr	r3, [r3, #0]
    a36c:	f003 0310 	and.w	r3, r3, #16
    a370:	2b00      	cmp	r3, #0
    a372:	d0f9      	beq.n	a368 <USBHwInit+0x7c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    a374:	4b12      	ldr	r3, [pc, #72]	; (a3c0 <USBHwInit+0xd4>)
    a376:	2200      	movs	r2, #0
    a378:	601a      	str	r2, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    a37a:	4b12      	ldr	r3, [pc, #72]	; (a3c4 <USBHwInit+0xd8>)
    a37c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a380:	601a      	str	r2, [r3, #0]
    USBDevIntPri = 0;
    a382:	4b11      	ldr	r3, [pc, #68]	; (a3c8 <USBHwInit+0xdc>)
    a384:	2200      	movs	r2, #0
    a386:	601a      	str	r2, [r3, #0]

    USBEpIntEn = 0;
    a388:	4b10      	ldr	r3, [pc, #64]	; (a3cc <USBHwInit+0xe0>)
    a38a:	2200      	movs	r2, #0
    a38c:	601a      	str	r2, [r3, #0]
    USBEpIntClr = 0xFFFFFFFF;
    a38e:	4b10      	ldr	r3, [pc, #64]	; (a3d0 <USBHwInit+0xe4>)
    a390:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a394:	601a      	str	r2, [r3, #0]
    USBEpIntPri = 0;
    a396:	4b0f      	ldr	r3, [pc, #60]	; (a3d4 <USBHwInit+0xe8>)
    a398:	2200      	movs	r2, #0
    a39a:	601a      	str	r2, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    a39c:	2000      	movs	r0, #0
    a39e:	f7ff fdcb 	bl	9f38 <USBHwNakIntEnable>
    // init debug leds
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
    a3a2:	2301      	movs	r3, #1
}
    a3a4:	4618      	mov	r0, r3
    a3a6:	bd80      	pop	{r7, pc}
    a3a8:	4002c010 	.word	0x4002c010
    a3ac:	4002c00c 	.word	0x4002c00c
    a3b0:	4002c004 	.word	0x4002c004
    a3b4:	400fc0c4 	.word	0x400fc0c4
    a3b8:	5000cff4 	.word	0x5000cff4
    a3bc:	5000cff8 	.word	0x5000cff8
    a3c0:	5000c204 	.word	0x5000c204
    a3c4:	5000c208 	.word	0x5000c208
    a3c8:	5000c22c 	.word	0x5000c22c
    a3cc:	5000c234 	.word	0x5000c234
    a3d0:	5000c238 	.word	0x5000c238
    a3d4:	5000c240 	.word	0x5000c240

0000a3d8 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    a3d8:	b480      	push	{r7}
    a3da:	b089      	sub	sp, #36	; 0x24
    a3dc:	af00      	add	r7, sp, #0
    a3de:	60f8      	str	r0, [r7, #12]
    a3e0:	60b9      	str	r1, [r7, #8]
    a3e2:	607a      	str	r2, [r7, #4]
    a3e4:	603b      	str	r3, [r7, #0]
	if(bMsVendorIndex == 0)	{
    a3e6:	4b2d      	ldr	r3, [pc, #180]	; (a49c <USBFilterOsVendorMessage+0xc4>)
    a3e8:	781b      	ldrb	r3, [r3, #0]
    a3ea:	2b00      	cmp	r3, #0
    a3ec:	d101      	bne.n	a3f2 <USBFilterOsVendorMessage+0x1a>
		// Feature is disabled.
		return FALSE;
    a3ee:	2300      	movs	r3, #0
    a3f0:	e04e      	b.n	a490 <USBFilterOsVendorMessage+0xb8>
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    a3f2:	68fb      	ldr	r3, [r7, #12]
    a3f4:	785a      	ldrb	r2, [r3, #1]
    a3f6:	4b29      	ldr	r3, [pc, #164]	; (a49c <USBFilterOsVendorMessage+0xc4>)
    a3f8:	781b      	ldrb	r3, [r3, #0]
    a3fa:	429a      	cmp	r2, r3
    a3fc:	d147      	bne.n	a48e <USBFilterOsVendorMessage+0xb6>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    a3fe:	68bb      	ldr	r3, [r7, #8]
    a400:	2200      	movs	r2, #0
    a402:	601a      	str	r2, [r3, #0]
	
		int iRequestLength = pSetup->wLength;
    a404:	68fb      	ldr	r3, [r7, #12]
    a406:	88db      	ldrh	r3, [r3, #6]
    a408:	61fb      	str	r3, [r7, #28]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
    a40a:	68fb      	ldr	r3, [r7, #12]
    a40c:	885b      	ldrh	r3, [r3, #2]
    a40e:	76fb      	strb	r3, [r7, #27]
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    a410:	68fb      	ldr	r3, [r7, #12]
    a412:	885b      	ldrh	r3, [r3, #2]
    a414:	0a1b      	lsrs	r3, r3, #8
    a416:	b29b      	uxth	r3, r3
    a418:	76bb      	strb	r3, [r7, #26]
	
		switch (pSetup->wIndex) {
    a41a:	68fb      	ldr	r3, [r7, #12]
    a41c:	889b      	ldrh	r3, [r3, #4]
    a41e:	2b04      	cmp	r3, #4
    a420:	d002      	beq.n	a428 <USBFilterOsVendorMessage+0x50>
    a422:	2b05      	cmp	r3, #5
    a424:	d007      	beq.n	a436 <USBFilterOsVendorMessage+0x5e>
    a426:	e00d      	b.n	a444 <USBFilterOsVendorMessage+0x6c>
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    a428:	683b      	ldr	r3, [r7, #0]
    a42a:	4a1d      	ldr	r2, [pc, #116]	; (a4a0 <USBFilterOsVendorMessage+0xc8>)
    a42c:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    a42e:	687b      	ldr	r3, [r7, #4]
    a430:	2228      	movs	r2, #40	; 0x28
    a432:	601a      	str	r2, [r3, #0]
			break;
    a434:	e008      	b.n	a448 <USBFilterOsVendorMessage+0x70>
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    a436:	683b      	ldr	r3, [r7, #0]
    a438:	4a1a      	ldr	r2, [pc, #104]	; (a4a4 <USBFilterOsVendorMessage+0xcc>)
    a43a:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    a43c:	687b      	ldr	r3, [r7, #4]
    a43e:	2292      	movs	r2, #146	; 0x92
    a440:	601a      	str	r2, [r3, #0]
			break;
    a442:	e001      	b.n	a448 <USBFilterOsVendorMessage+0x70>

		default:
			return TRUE;
    a444:	2301      	movs	r3, #1
    a446:	e023      	b.n	a490 <USBFilterOsVendorMessage+0xb8>
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    a448:	7ebb      	ldrb	r3, [r7, #26]
    a44a:	041b      	lsls	r3, r3, #16
    a44c:	617b      	str	r3, [r7, #20]
		if (*piLen < iPageOffset) {
    a44e:	687b      	ldr	r3, [r7, #4]
    a450:	681a      	ldr	r2, [r3, #0]
    a452:	697b      	ldr	r3, [r7, #20]
    a454:	429a      	cmp	r2, r3
    a456:	da01      	bge.n	a45c <USBFilterOsVendorMessage+0x84>
			// Not enough data for the requested offset.
			return TRUE;
    a458:	2301      	movs	r3, #1
    a45a:	e019      	b.n	a490 <USBFilterOsVendorMessage+0xb8>
		}
		*ppbData += iPageOffset;
    a45c:	683b      	ldr	r3, [r7, #0]
    a45e:	681a      	ldr	r2, [r3, #0]
    a460:	697b      	ldr	r3, [r7, #20]
    a462:	441a      	add	r2, r3
    a464:	683b      	ldr	r3, [r7, #0]
    a466:	601a      	str	r2, [r3, #0]
		*piLen -= iPageOffset;
    a468:	687b      	ldr	r3, [r7, #4]
    a46a:	681a      	ldr	r2, [r3, #0]
    a46c:	697b      	ldr	r3, [r7, #20]
    a46e:	1ad2      	subs	r2, r2, r3
    a470:	687b      	ldr	r3, [r7, #4]
    a472:	601a      	str	r2, [r3, #0]
		
		if (*piLen > iRequestLength) {
    a474:	687b      	ldr	r3, [r7, #4]
    a476:	681a      	ldr	r2, [r3, #0]
    a478:	69fb      	ldr	r3, [r7, #28]
    a47a:	429a      	cmp	r2, r3
    a47c:	dd02      	ble.n	a484 <USBFilterOsVendorMessage+0xac>
			// Clip data longer than the requested length
			*piLen = iRequestLength;
    a47e:	687b      	ldr	r3, [r7, #4]
    a480:	69fa      	ldr	r2, [r7, #28]
    a482:	601a      	str	r2, [r3, #0]
		}
	
		*pfSuccess = TRUE;
    a484:	68bb      	ldr	r3, [r7, #8]
    a486:	2201      	movs	r2, #1
    a488:	601a      	str	r2, [r3, #0]
		return TRUE;
    a48a:	2301      	movs	r3, #1
    a48c:	e000      	b.n	a490 <USBFilterOsVendorMessage+0xb8>
	}
	
	// These are not the requests you are looking for
	return FALSE;
    a48e:	2300      	movs	r3, #0
}
    a490:	4618      	mov	r0, r3
    a492:	3724      	adds	r7, #36	; 0x24
    a494:	46bd      	mov	sp, r7
    a496:	f85d 7b04 	ldr.w	r7, [sp], #4
    a49a:	4770      	bx	lr
    a49c:	10000b0c 	.word	0x10000b0c
    a4a0:	0000b588 	.word	0x0000b588
    a4a4:	100008d0 	.word	0x100008d0

0000a4a8 <USBRegisterWinusbInterface>:
	@param [in]		pcInterfaceGuid			ASCII String GUID in curly braces
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
    a4a8:	b480      	push	{r7}
    a4aa:	b087      	sub	sp, #28
    a4ac:	af00      	add	r7, sp, #0
    a4ae:	4603      	mov	r3, r0
    a4b0:	6039      	str	r1, [r7, #0]
    a4b2:	71fb      	strb	r3, [r7, #7]
	bMsVendorIndex = bVendorRequestIndex;
    a4b4:	4a18      	ldr	r2, [pc, #96]	; (a518 <USBRegisterWinusbInterface+0x70>)
    a4b6:	79fb      	ldrb	r3, [r7, #7]
    a4b8:	7013      	strb	r3, [r2, #0]
	
	if(!pcInterfaceGuid) {
    a4ba:	683b      	ldr	r3, [r7, #0]
    a4bc:	2b00      	cmp	r3, #0
    a4be:	d100      	bne.n	a4c2 <USBRegisterWinusbInterface+0x1a>
		return; // Trust that caller is actually specifying this with nonzero RequestIndex.
    a4c0:	e024      	b.n	a50c <USBRegisterWinusbInterface+0x64>
	}
	
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
    a4c2:	4b16      	ldr	r3, [pc, #88]	; (a51c <USBRegisterWinusbInterface+0x74>)
    a4c4:	617b      	str	r3, [r7, #20]
	const int ciMaxLength = 38;
    a4c6:	2326      	movs	r3, #38	; 0x26
    a4c8:	60fb      	str	r3, [r7, #12]
	
	for(int i = 0; i < ciMaxLength; i++) {
    a4ca:	2300      	movs	r3, #0
    a4cc:	613b      	str	r3, [r7, #16]
    a4ce:	e012      	b.n	a4f6 <USBRegisterWinusbInterface+0x4e>
		if(!pcInterfaceGuid[i]) break;
    a4d0:	693b      	ldr	r3, [r7, #16]
    a4d2:	683a      	ldr	r2, [r7, #0]
    a4d4:	4413      	add	r3, r2
    a4d6:	781b      	ldrb	r3, [r3, #0]
    a4d8:	2b00      	cmp	r3, #0
    a4da:	d100      	bne.n	a4de <USBRegisterWinusbInterface+0x36>
    a4dc:	e00f      	b.n	a4fe <USBRegisterWinusbInterface+0x56>
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    a4de:	693b      	ldr	r3, [r7, #16]
    a4e0:	683a      	ldr	r2, [r7, #0]
    a4e2:	4413      	add	r3, r2
    a4e4:	781a      	ldrb	r2, [r3, #0]
    a4e6:	697b      	ldr	r3, [r7, #20]
    a4e8:	701a      	strb	r2, [r3, #0]
		pbWriteCursor += 2;
    a4ea:	697b      	ldr	r3, [r7, #20]
    a4ec:	3302      	adds	r3, #2
    a4ee:	617b      	str	r3, [r7, #20]
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    a4f0:	693b      	ldr	r3, [r7, #16]
    a4f2:	3301      	adds	r3, #1
    a4f4:	613b      	str	r3, [r7, #16]
    a4f6:	693a      	ldr	r2, [r7, #16]
    a4f8:	68fb      	ldr	r3, [r7, #12]
    a4fa:	429a      	cmp	r2, r3
    a4fc:	dbe8      	blt.n	a4d0 <USBRegisterWinusbInterface+0x28>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    a4fe:	697b      	ldr	r3, [r7, #20]
    a500:	2200      	movs	r2, #0
    a502:	701a      	strb	r2, [r3, #0]
	pbWriteCursor[2] = 0;
    a504:	697b      	ldr	r3, [r7, #20]
    a506:	3302      	adds	r3, #2
    a508:	2200      	movs	r2, #0
    a50a:	701a      	strb	r2, [r3, #0]
	
}
    a50c:	371c      	adds	r7, #28
    a50e:	46bd      	mov	sp, r7
    a510:	f85d 7b04 	ldr.w	r7, [sp], #4
    a514:	4770      	bx	lr
    a516:	bf00      	nop
    a518:	10000b0c 	.word	0x10000b0c
    a51c:	10000912 	.word	0x10000912

0000a520 <USBGetOsStringDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
    a520:	b480      	push	{r7}
    a522:	b083      	sub	sp, #12
    a524:	af00      	add	r7, sp, #0
    a526:	6078      	str	r0, [r7, #4]
    a528:	6039      	str	r1, [r7, #0]
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    a52a:	4b08      	ldr	r3, [pc, #32]	; (a54c <USBGetOsStringDescriptor+0x2c>)
    a52c:	781a      	ldrb	r2, [r3, #0]
    a52e:	4b08      	ldr	r3, [pc, #32]	; (a550 <USBGetOsStringDescriptor+0x30>)
    a530:	741a      	strb	r2, [r3, #16]
	
	*ppbData = abOsStringDescriptor;
    a532:	683b      	ldr	r3, [r7, #0]
    a534:	4a06      	ldr	r2, [pc, #24]	; (a550 <USBGetOsStringDescriptor+0x30>)
    a536:	601a      	str	r2, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    a538:	687b      	ldr	r3, [r7, #4]
    a53a:	2212      	movs	r2, #18
    a53c:	601a      	str	r2, [r3, #0]
	return TRUE;
    a53e:	2301      	movs	r3, #1
}
    a540:	4618      	mov	r0, r3
    a542:	370c      	adds	r7, #12
    a544:	46bd      	mov	sp, r7
    a546:	f85d 7b04 	ldr.w	r7, [sp], #4
    a54a:	4770      	bx	lr
    a54c:	10000b0c 	.word	0x10000b0c
    a550:	100008bc 	.word	0x100008bc

0000a554 <USBRegisterDescriptors>:
	for the device.

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(const U8 *pabDescriptors)
{
    a554:	b480      	push	{r7}
    a556:	b083      	sub	sp, #12
    a558:	af00      	add	r7, sp, #0
    a55a:	6078      	str	r0, [r7, #4]
	pabDescrip = pabDescriptors;
    a55c:	4a03      	ldr	r2, [pc, #12]	; (a56c <USBRegisterDescriptors+0x18>)
    a55e:	687b      	ldr	r3, [r7, #4]
    a560:	6013      	str	r3, [r2, #0]
}
    a562:	370c      	adds	r7, #12
    a564:	46bd      	mov	sp, r7
    a566:	f85d 7b04 	ldr.w	r7, [sp], #4
    a56a:	4770      	bx	lr
    a56c:	10000b08 	.word	0x10000b08

0000a570 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    a570:	b580      	push	{r7, lr}
    a572:	b088      	sub	sp, #32
    a574:	af00      	add	r7, sp, #0
    a576:	60ba      	str	r2, [r7, #8]
    a578:	607b      	str	r3, [r7, #4]
    a57a:	4603      	mov	r3, r0
    a57c:	81fb      	strh	r3, [r7, #14]
    a57e:	460b      	mov	r3, r1
    a580:	81bb      	strh	r3, [r7, #12]
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    a582:	89fb      	ldrh	r3, [r7, #14]
    a584:	0a1b      	lsrs	r3, r3, #8
    a586:	b29b      	uxth	r3, r3
    a588:	75fb      	strb	r3, [r7, #23]
	bIndex = GET_DESC_INDEX(wTypeIndex);
    a58a:	89fb      	ldrh	r3, [r7, #14]
    a58c:	75bb      	strb	r3, [r7, #22]
	
    if (bType == DESC_STRING &&
    a58e:	7dfb      	ldrb	r3, [r7, #23]
    a590:	2b03      	cmp	r3, #3
    a592:	d10b      	bne.n	a5ac <USBGetDescriptor+0x3c>
    a594:	7dbb      	ldrb	r3, [r7, #22]
    a596:	2bee      	cmp	r3, #238	; 0xee
    a598:	d108      	bne.n	a5ac <USBGetDescriptor+0x3c>
        bIndex == DESC_STRING_OS) {
        
        if (USBGetOsStringDescriptor(piLen, ppbData)) {
    a59a:	68b8      	ldr	r0, [r7, #8]
    a59c:	6879      	ldr	r1, [r7, #4]
    a59e:	f7ff ffbf 	bl	a520 <USBGetOsStringDescriptor>
    a5a2:	4603      	mov	r3, r0
    a5a4:	2b00      	cmp	r3, #0
    a5a6:	d001      	beq.n	a5ac <USBGetDescriptor+0x3c>
            
            return TRUE;
    a5a8:	2301      	movs	r3, #1
    a5aa:	e036      	b.n	a61a <USBGetDescriptor+0xaa>
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    a5ac:	4b1d      	ldr	r3, [pc, #116]	; (a624 <USBGetDescriptor+0xb4>)
    a5ae:	681b      	ldr	r3, [r3, #0]
    a5b0:	61fb      	str	r3, [r7, #28]
	iCurIndex = 0;
    a5b2:	2300      	movs	r3, #0
    a5b4:	61bb      	str	r3, [r7, #24]
	
	while (pab[DESC_bLength] != 0) {
    a5b6:	e02b      	b.n	a610 <USBGetDescriptor+0xa0>
		if (pab[DESC_bDescriptorType] == bType) {
    a5b8:	69fb      	ldr	r3, [r7, #28]
    a5ba:	3301      	adds	r3, #1
    a5bc:	781b      	ldrb	r3, [r3, #0]
    a5be:	7dfa      	ldrb	r2, [r7, #23]
    a5c0:	429a      	cmp	r2, r3
    a5c2:	d11f      	bne.n	a604 <USBGetDescriptor+0x94>
			if (iCurIndex == bIndex) {
    a5c4:	7dba      	ldrb	r2, [r7, #22]
    a5c6:	69bb      	ldr	r3, [r7, #24]
    a5c8:	429a      	cmp	r2, r3
    a5ca:	d118      	bne.n	a5fe <USBGetDescriptor+0x8e>
				// set data pointer
				*ppbData = pab;
    a5cc:	687b      	ldr	r3, [r7, #4]
    a5ce:	69fa      	ldr	r2, [r7, #28]
    a5d0:	601a      	str	r2, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    a5d2:	7dfb      	ldrb	r3, [r7, #23]
    a5d4:	2b02      	cmp	r3, #2
    a5d6:	d10b      	bne.n	a5f0 <USBGetDescriptor+0x80>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    a5d8:	69fb      	ldr	r3, [r7, #28]
    a5da:	3302      	adds	r3, #2
    a5dc:	781b      	ldrb	r3, [r3, #0]
    a5de:	461a      	mov	r2, r3
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    a5e0:	69fb      	ldr	r3, [r7, #28]
    a5e2:	3303      	adds	r3, #3
    a5e4:	781b      	ldrb	r3, [r3, #0]
    a5e6:	021b      	lsls	r3, r3, #8
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    a5e8:	431a      	orrs	r2, r3
    a5ea:	68bb      	ldr	r3, [r7, #8]
    a5ec:	601a      	str	r2, [r3, #0]
    a5ee:	e004      	b.n	a5fa <USBGetDescriptor+0x8a>
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    a5f0:	69fb      	ldr	r3, [r7, #28]
    a5f2:	781b      	ldrb	r3, [r3, #0]
    a5f4:	461a      	mov	r2, r3
    a5f6:	68bb      	ldr	r3, [r7, #8]
    a5f8:	601a      	str	r2, [r3, #0]
				}
				return TRUE;
    a5fa:	2301      	movs	r3, #1
    a5fc:	e00d      	b.n	a61a <USBGetDescriptor+0xaa>
			}
			iCurIndex++;
    a5fe:	69bb      	ldr	r3, [r7, #24]
    a600:	3301      	adds	r3, #1
    a602:	61bb      	str	r3, [r7, #24]
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    a604:	69fb      	ldr	r3, [r7, #28]
    a606:	781b      	ldrb	r3, [r3, #0]
    a608:	461a      	mov	r2, r3
    a60a:	69fb      	ldr	r3, [r7, #28]
    a60c:	4413      	add	r3, r2
    a60e:	61fb      	str	r3, [r7, #28]
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    a610:	69fb      	ldr	r3, [r7, #28]
    a612:	781b      	ldrb	r3, [r3, #0]
    a614:	2b00      	cmp	r3, #0
    a616:	d1cf      	bne.n	a5b8 <USBGetDescriptor+0x48>
		// skip to next descriptor
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
    a618:	2300      	movs	r3, #0
}
    a61a:	4618      	mov	r0, r3
    a61c:	3720      	adds	r7, #32
    a61e:	46bd      	mov	sp, r7
    a620:	bd80      	pop	{r7, pc}
    a622:	bf00      	nop
    a624:	10000b08 	.word	0x10000b08

0000a628 <USBSetConfiguration>:
	@todo function always returns TRUE, add stricter checking?
	
	@return TRUE if successfully configured, FALSE otherwise
 */
static BOOL USBSetConfiguration(U8 bConfigIndex, U8 bAltSetting)
{
    a628:	b580      	push	{r7, lr}
    a62a:	b086      	sub	sp, #24
    a62c:	af00      	add	r7, sp, #0
    a62e:	4603      	mov	r3, r0
    a630:	460a      	mov	r2, r1
    a632:	71fb      	strb	r3, [r7, #7]
    a634:	4613      	mov	r3, r2
    a636:	71bb      	strb	r3, [r7, #6]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    a638:	79fb      	ldrb	r3, [r7, #7]
    a63a:	2b00      	cmp	r3, #0
    a63c:	d103      	bne.n	a646 <USBSetConfiguration+0x1e>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    a63e:	2000      	movs	r0, #0
    a640:	f7ff fd78 	bl	a134 <USBHwConfigDevice>
    a644:	e045      	b.n	a6d2 <USBSetConfiguration+0xaa>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    a646:	4b25      	ldr	r3, [pc, #148]	; (a6dc <USBSetConfiguration+0xb4>)
    a648:	681b      	ldr	r3, [r3, #0]
    a64a:	617b      	str	r3, [r7, #20]
		bCurConfig = 0xFF;
    a64c:	23ff      	movs	r3, #255	; 0xff
    a64e:	74fb      	strb	r3, [r7, #19]
		bCurAltSetting = 0xFF;
    a650:	23ff      	movs	r3, #255	; 0xff
    a652:	74bb      	strb	r3, [r7, #18]

		while (pab[DESC_bLength] != 0) {
    a654:	e036      	b.n	a6c4 <USBSetConfiguration+0x9c>

			switch (pab[DESC_bDescriptorType]) {
    a656:	697b      	ldr	r3, [r7, #20]
    a658:	3301      	adds	r3, #1
    a65a:	781b      	ldrb	r3, [r3, #0]
    a65c:	2b04      	cmp	r3, #4
    a65e:	d008      	beq.n	a672 <USBSetConfiguration+0x4a>
    a660:	2b05      	cmp	r3, #5
    a662:	d00a      	beq.n	a67a <USBSetConfiguration+0x52>
    a664:	2b02      	cmp	r3, #2
    a666:	d000      	beq.n	a66a <USBSetConfiguration+0x42>
					USBHwEPConfig(bEP, wMaxPktSize);
				}
				break;

			default:
				break;
    a668:	e026      	b.n	a6b8 <USBSetConfiguration+0x90>

			switch (pab[DESC_bDescriptorType]) {

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    a66a:	697b      	ldr	r3, [r7, #20]
    a66c:	795b      	ldrb	r3, [r3, #5]
    a66e:	74fb      	strb	r3, [r7, #19]
				break;
    a670:	e022      	b.n	a6b8 <USBSetConfiguration+0x90>

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    a672:	697b      	ldr	r3, [r7, #20]
    a674:	78db      	ldrb	r3, [r3, #3]
    a676:	74bb      	strb	r3, [r7, #18]
				break;
    a678:	e01e      	b.n	a6b8 <USBSetConfiguration+0x90>

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    a67a:	7cfa      	ldrb	r2, [r7, #19]
    a67c:	79fb      	ldrb	r3, [r7, #7]
    a67e:	429a      	cmp	r2, r3
    a680:	d119      	bne.n	a6b6 <USBSetConfiguration+0x8e>
    a682:	7cba      	ldrb	r2, [r7, #18]
    a684:	79bb      	ldrb	r3, [r7, #6]
    a686:	429a      	cmp	r2, r3
    a688:	d115      	bne.n	a6b6 <USBSetConfiguration+0x8e>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
    a68a:	697b      	ldr	r3, [r7, #20]
    a68c:	789b      	ldrb	r3, [r3, #2]
    a68e:	747b      	strb	r3, [r7, #17]
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    a690:	697b      	ldr	r3, [r7, #20]
    a692:	3304      	adds	r3, #4
    a694:	781b      	ldrb	r3, [r3, #0]
    a696:	b29a      	uxth	r2, r3
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    a698:	697b      	ldr	r3, [r7, #20]
    a69a:	3305      	adds	r3, #5
    a69c:	781b      	ldrb	r3, [r3, #0]
    a69e:	021b      	lsls	r3, r3, #8
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    a6a0:	b29b      	uxth	r3, r3
    a6a2:	4313      	orrs	r3, r2
    a6a4:	b29b      	uxth	r3, r3
    a6a6:	81fb      	strh	r3, [r7, #14]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    a6a8:	7c7a      	ldrb	r2, [r7, #17]
    a6aa:	89fb      	ldrh	r3, [r7, #14]
    a6ac:	4610      	mov	r0, r2
    a6ae:	4619      	mov	r1, r3
    a6b0:	f7ff fbb8 	bl	9e24 <USBHwEPConfig>
				}
				break;
    a6b4:	e7ff      	b.n	a6b6 <USBSetConfiguration+0x8e>
    a6b6:	bf00      	nop

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    a6b8:	697b      	ldr	r3, [r7, #20]
    a6ba:	781b      	ldrb	r3, [r3, #0]
    a6bc:	461a      	mov	r2, r3
    a6be:	697b      	ldr	r3, [r7, #20]
    a6c0:	4413      	add	r3, r2
    a6c2:	617b      	str	r3, [r7, #20]
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    a6c4:	697b      	ldr	r3, [r7, #20]
    a6c6:	781b      	ldrb	r3, [r3, #0]
    a6c8:	2b00      	cmp	r3, #0
    a6ca:	d1c4      	bne.n	a656 <USBSetConfiguration+0x2e>
			// skip to next descriptor
			pab += pab[DESC_bLength];
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    a6cc:	2001      	movs	r0, #1
    a6ce:	f7ff fd31 	bl	a134 <USBHwConfigDevice>
	}

	return TRUE;
    a6d2:	2301      	movs	r3, #1
}
    a6d4:	4618      	mov	r0, r3
    a6d6:	3718      	adds	r7, #24
    a6d8:	46bd      	mov	sp, r7
    a6da:	bd80      	pop	{r7, pc}
    a6dc:	10000b08 	.word	0x10000b08

0000a6e0 <HandleStdDeviceReq>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    a6e0:	b580      	push	{r7, lr}
    a6e2:	b086      	sub	sp, #24
    a6e4:	af00      	add	r7, sp, #0
    a6e6:	60f8      	str	r0, [r7, #12]
    a6e8:	60b9      	str	r1, [r7, #8]
    a6ea:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    a6ec:	687b      	ldr	r3, [r7, #4]
    a6ee:	681b      	ldr	r3, [r3, #0]
    a6f0:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    a6f2:	68fb      	ldr	r3, [r7, #12]
    a6f4:	785b      	ldrb	r3, [r3, #1]
    a6f6:	2b09      	cmp	r3, #9
    a6f8:	d852      	bhi.n	a7a0 <HandleStdDeviceReq+0xc0>
    a6fa:	a201      	add	r2, pc, #4	; (adr r2, a700 <HandleStdDeviceReq+0x20>)
    a6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a700:	0000a729 	.word	0x0000a729
    a704:	0000a799 	.word	0x0000a799
    a708:	0000a7a1 	.word	0x0000a7a1
    a70c:	0000a799 	.word	0x0000a799
    a710:	0000a7a1 	.word	0x0000a7a1
    a714:	0000a73f 	.word	0x0000a73f
    a718:	0000a74d 	.word	0x0000a74d
    a71c:	0000a79d 	.word	0x0000a79d
    a720:	0000a765 	.word	0x0000a765
    a724:	0000a775 	.word	0x0000a775
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    a728:	697b      	ldr	r3, [r7, #20]
    a72a:	2200      	movs	r2, #0
    a72c:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    a72e:	697b      	ldr	r3, [r7, #20]
    a730:	3301      	adds	r3, #1
    a732:	2200      	movs	r2, #0
    a734:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    a736:	68bb      	ldr	r3, [r7, #8]
    a738:	2202      	movs	r2, #2
    a73a:	601a      	str	r2, [r3, #0]
		break;
    a73c:	e032      	b.n	a7a4 <HandleStdDeviceReq+0xc4>
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    a73e:	68fb      	ldr	r3, [r7, #12]
    a740:	885b      	ldrh	r3, [r3, #2]
    a742:	b2db      	uxtb	r3, r3
    a744:	4618      	mov	r0, r3
    a746:	f7ff fbd3 	bl	9ef0 <USBHwSetAddress>
		break;
    a74a:	e02b      	b.n	a7a4 <HandleStdDeviceReq+0xc4>

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    a74c:	68fb      	ldr	r3, [r7, #12]
    a74e:	885a      	ldrh	r2, [r3, #2]
    a750:	68fb      	ldr	r3, [r7, #12]
    a752:	889b      	ldrh	r3, [r3, #4]
    a754:	4610      	mov	r0, r2
    a756:	4619      	mov	r1, r3
    a758:	68ba      	ldr	r2, [r7, #8]
    a75a:	687b      	ldr	r3, [r7, #4]
    a75c:	f7ff ff08 	bl	a570 <USBGetDescriptor>
    a760:	4603      	mov	r3, r0
    a762:	e020      	b.n	a7a6 <HandleStdDeviceReq+0xc6>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    a764:	4b12      	ldr	r3, [pc, #72]	; (a7b0 <HandleStdDeviceReq+0xd0>)
    a766:	781a      	ldrb	r2, [r3, #0]
    a768:	697b      	ldr	r3, [r7, #20]
    a76a:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    a76c:	68bb      	ldr	r3, [r7, #8]
    a76e:	2201      	movs	r2, #1
    a770:	601a      	str	r2, [r3, #0]
		break;
    a772:	e017      	b.n	a7a4 <HandleStdDeviceReq+0xc4>

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    a774:	68fb      	ldr	r3, [r7, #12]
    a776:	885b      	ldrh	r3, [r3, #2]
    a778:	b2db      	uxtb	r3, r3
    a77a:	4618      	mov	r0, r3
    a77c:	2100      	movs	r1, #0
    a77e:	f7ff ff53 	bl	a628 <USBSetConfiguration>
    a782:	4603      	mov	r3, r0
    a784:	2b00      	cmp	r3, #0
    a786:	d101      	bne.n	a78c <HandleStdDeviceReq+0xac>
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
    a788:	2300      	movs	r3, #0
    a78a:	e00c      	b.n	a7a6 <HandleStdDeviceReq+0xc6>
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    a78c:	68fb      	ldr	r3, [r7, #12]
    a78e:	885b      	ldrh	r3, [r3, #2]
    a790:	b2da      	uxtb	r2, r3
    a792:	4b07      	ldr	r3, [pc, #28]	; (a7b0 <HandleStdDeviceReq+0xd0>)
    a794:	701a      	strb	r2, [r3, #0]
		break;
    a796:	e005      	b.n	a7a4 <HandleStdDeviceReq+0xc4>
			// put DEVICE_REMOTE_WAKEUP code here
		}
		if (pSetup->wValue == FEA_TEST_MODE) {
			// put TEST_MODE code here
		}
		return FALSE;
    a798:	2300      	movs	r3, #0
    a79a:	e004      	b.n	a7a6 <HandleStdDeviceReq+0xc6>

	case REQ_SET_DESCRIPTOR:
		DBG("Device req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    a79c:	2300      	movs	r3, #0
    a79e:	e002      	b.n	a7a6 <HandleStdDeviceReq+0xc6>

	default:
		DBG("Illegal device req %d\n", pSetup->bRequest);
		return FALSE;
    a7a0:	2300      	movs	r3, #0
    a7a2:	e000      	b.n	a7a6 <HandleStdDeviceReq+0xc6>
	}
	
	return TRUE;
    a7a4:	2301      	movs	r3, #1
}
    a7a6:	4618      	mov	r0, r3
    a7a8:	3718      	adds	r7, #24
    a7aa:	46bd      	mov	sp, r7
    a7ac:	bd80      	pop	{r7, pc}
    a7ae:	bf00      	nop
    a7b0:	10000b00 	.word	0x10000b00

0000a7b4 <HandleStdInterfaceReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    a7b4:	b480      	push	{r7}
    a7b6:	b087      	sub	sp, #28
    a7b8:	af00      	add	r7, sp, #0
    a7ba:	60f8      	str	r0, [r7, #12]
    a7bc:	60b9      	str	r1, [r7, #8]
    a7be:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    a7c0:	687b      	ldr	r3, [r7, #4]
    a7c2:	681b      	ldr	r3, [r3, #0]
    a7c4:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    a7c6:	68fb      	ldr	r3, [r7, #12]
    a7c8:	785b      	ldrb	r3, [r3, #1]
    a7ca:	2b0b      	cmp	r3, #11
    a7cc:	d838      	bhi.n	a840 <HandleStdInterfaceReq+0x8c>
    a7ce:	a201      	add	r2, pc, #4	; (adr r2, a7d4 <HandleStdInterfaceReq+0x20>)
    a7d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a7d4:	0000a805 	.word	0x0000a805
    a7d8:	0000a81b 	.word	0x0000a81b
    a7dc:	0000a841 	.word	0x0000a841
    a7e0:	0000a81b 	.word	0x0000a81b
    a7e4:	0000a841 	.word	0x0000a841
    a7e8:	0000a841 	.word	0x0000a841
    a7ec:	0000a841 	.word	0x0000a841
    a7f0:	0000a841 	.word	0x0000a841
    a7f4:	0000a841 	.word	0x0000a841
    a7f8:	0000a841 	.word	0x0000a841
    a7fc:	0000a81f 	.word	0x0000a81f
    a800:	0000a82d 	.word	0x0000a82d

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    a804:	697b      	ldr	r3, [r7, #20]
    a806:	2200      	movs	r2, #0
    a808:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    a80a:	697b      	ldr	r3, [r7, #20]
    a80c:	3301      	adds	r3, #1
    a80e:	2200      	movs	r2, #0
    a810:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    a812:	68bb      	ldr	r3, [r7, #8]
    a814:	2202      	movs	r2, #2
    a816:	601a      	str	r2, [r3, #0]
		break;
    a818:	e014      	b.n	a844 <HandleStdInterfaceReq+0x90>

	case REQ_CLEAR_FEATURE:
	case REQ_SET_FEATURE:
		// not defined for interface
		return FALSE;
    a81a:	2300      	movs	r3, #0
    a81c:	e013      	b.n	a846 <HandleStdInterfaceReq+0x92>
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    a81e:	697b      	ldr	r3, [r7, #20]
    a820:	2200      	movs	r2, #0
    a822:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    a824:	68bb      	ldr	r3, [r7, #8]
    a826:	2201      	movs	r2, #1
    a828:	601a      	str	r2, [r3, #0]
		break;
    a82a:	e00b      	b.n	a844 <HandleStdInterfaceReq+0x90>
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    a82c:	68fb      	ldr	r3, [r7, #12]
    a82e:	885b      	ldrh	r3, [r3, #2]
    a830:	2b00      	cmp	r3, #0
    a832:	d001      	beq.n	a838 <HandleStdInterfaceReq+0x84>
			return FALSE;
    a834:	2300      	movs	r3, #0
    a836:	e006      	b.n	a846 <HandleStdInterfaceReq+0x92>
		}
		*piLen = 0;
    a838:	68bb      	ldr	r3, [r7, #8]
    a83a:	2200      	movs	r2, #0
    a83c:	601a      	str	r2, [r3, #0]
		break;
    a83e:	e001      	b.n	a844 <HandleStdInterfaceReq+0x90>

	default:
		DBG("Illegal interface req %d\n", pSetup->bRequest);
		return FALSE;
    a840:	2300      	movs	r3, #0
    a842:	e000      	b.n	a846 <HandleStdInterfaceReq+0x92>
	}

	return TRUE;
    a844:	2301      	movs	r3, #1
}
    a846:	4618      	mov	r0, r3
    a848:	371c      	adds	r7, #28
    a84a:	46bd      	mov	sp, r7
    a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a850:	4770      	bx	lr
    a852:	bf00      	nop

0000a854 <HandleStdEndPointReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    a854:	b580      	push	{r7, lr}
    a856:	b086      	sub	sp, #24
    a858:	af00      	add	r7, sp, #0
    a85a:	60f8      	str	r0, [r7, #12]
    a85c:	60b9      	str	r1, [r7, #8]
    a85e:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    a860:	687b      	ldr	r3, [r7, #4]
    a862:	681b      	ldr	r3, [r3, #0]
    a864:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    a866:	68fb      	ldr	r3, [r7, #12]
    a868:	785b      	ldrb	r3, [r3, #1]
    a86a:	2b0c      	cmp	r3, #12
    a86c:	d853      	bhi.n	a916 <HandleStdEndPointReq+0xc2>
    a86e:	a201      	add	r2, pc, #4	; (adr r2, a874 <HandleStdEndPointReq+0x20>)
    a870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a874:	0000a8a9 	.word	0x0000a8a9
    a878:	0000a8db 	.word	0x0000a8db
    a87c:	0000a917 	.word	0x0000a917
    a880:	0000a8f7 	.word	0x0000a8f7
    a884:	0000a917 	.word	0x0000a917
    a888:	0000a917 	.word	0x0000a917
    a88c:	0000a917 	.word	0x0000a917
    a890:	0000a917 	.word	0x0000a917
    a894:	0000a917 	.word	0x0000a917
    a898:	0000a917 	.word	0x0000a917
    a89c:	0000a917 	.word	0x0000a917
    a8a0:	0000a917 	.word	0x0000a917
    a8a4:	0000a913 	.word	0x0000a913
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    a8a8:	68fb      	ldr	r3, [r7, #12]
    a8aa:	889b      	ldrh	r3, [r3, #4]
    a8ac:	b2db      	uxtb	r3, r3
    a8ae:	4618      	mov	r0, r3
    a8b0:	f7ff fb50 	bl	9f54 <USBHwEPGetStatus>
    a8b4:	4603      	mov	r3, r0
    a8b6:	f003 0302 	and.w	r3, r3, #2
    a8ba:	2b00      	cmp	r3, #0
    a8bc:	bf14      	ite	ne
    a8be:	2301      	movne	r3, #1
    a8c0:	2300      	moveq	r3, #0
    a8c2:	b2db      	uxtb	r3, r3
    a8c4:	461a      	mov	r2, r3
    a8c6:	697b      	ldr	r3, [r7, #20]
    a8c8:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    a8ca:	697b      	ldr	r3, [r7, #20]
    a8cc:	3301      	adds	r3, #1
    a8ce:	2200      	movs	r2, #0
    a8d0:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    a8d2:	68bb      	ldr	r3, [r7, #8]
    a8d4:	2202      	movs	r2, #2
    a8d6:	601a      	str	r2, [r3, #0]
		break;
    a8d8:	e01f      	b.n	a91a <HandleStdEndPointReq+0xc6>
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    a8da:	68fb      	ldr	r3, [r7, #12]
    a8dc:	885b      	ldrh	r3, [r3, #2]
    a8de:	2b00      	cmp	r3, #0
    a8e0:	d107      	bne.n	a8f2 <HandleStdEndPointReq+0x9e>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    a8e2:	68fb      	ldr	r3, [r7, #12]
    a8e4:	889b      	ldrh	r3, [r3, #4]
    a8e6:	b2db      	uxtb	r3, r3
    a8e8:	4618      	mov	r0, r3
    a8ea:	2100      	movs	r1, #0
    a8ec:	f7ff fb4a 	bl	9f84 <USBHwEPStall>
			break;
    a8f0:	e013      	b.n	a91a <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    a8f2:	2300      	movs	r3, #0
    a8f4:	e012      	b.n	a91c <HandleStdEndPointReq+0xc8>
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    a8f6:	68fb      	ldr	r3, [r7, #12]
    a8f8:	885b      	ldrh	r3, [r3, #2]
    a8fa:	2b00      	cmp	r3, #0
    a8fc:	d107      	bne.n	a90e <HandleStdEndPointReq+0xba>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    a8fe:	68fb      	ldr	r3, [r7, #12]
    a900:	889b      	ldrh	r3, [r3, #4]
    a902:	b2db      	uxtb	r3, r3
    a904:	4618      	mov	r0, r3
    a906:	2101      	movs	r1, #1
    a908:	f7ff fb3c 	bl	9f84 <USBHwEPStall>
			break;
    a90c:	e005      	b.n	a91a <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    a90e:	2300      	movs	r3, #0
    a910:	e004      	b.n	a91c <HandleStdEndPointReq+0xc8>

	case REQ_SYNCH_FRAME:
		DBG("EP req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    a912:	2300      	movs	r3, #0
    a914:	e002      	b.n	a91c <HandleStdEndPointReq+0xc8>

	default:
		DBG("Illegal EP req %d\n", pSetup->bRequest);
		return FALSE;
    a916:	2300      	movs	r3, #0
    a918:	e000      	b.n	a91c <HandleStdEndPointReq+0xc8>
	}
	
	return TRUE;
    a91a:	2301      	movs	r3, #1
}
    a91c:	4618      	mov	r0, r3
    a91e:	3718      	adds	r7, #24
    a920:	46bd      	mov	sp, r7
    a922:	bd80      	pop	{r7, pc}

0000a924 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    a924:	b580      	push	{r7, lr}
    a926:	b084      	sub	sp, #16
    a928:	af00      	add	r7, sp, #0
    a92a:	60f8      	str	r0, [r7, #12]
    a92c:	60b9      	str	r1, [r7, #8]
    a92e:	607a      	str	r2, [r7, #4]
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    a930:	4b19      	ldr	r3, [pc, #100]	; (a998 <USBHandleStandardRequest+0x74>)
    a932:	681b      	ldr	r3, [r3, #0]
    a934:	2b00      	cmp	r3, #0
    a936:	d00a      	beq.n	a94e <USBHandleStandardRequest+0x2a>
    a938:	4b17      	ldr	r3, [pc, #92]	; (a998 <USBHandleStandardRequest+0x74>)
    a93a:	681b      	ldr	r3, [r3, #0]
    a93c:	68f8      	ldr	r0, [r7, #12]
    a93e:	68b9      	ldr	r1, [r7, #8]
    a940:	687a      	ldr	r2, [r7, #4]
    a942:	4798      	blx	r3
    a944:	4603      	mov	r3, r0
    a946:	2b00      	cmp	r3, #0
    a948:	d001      	beq.n	a94e <USBHandleStandardRequest+0x2a>
		return TRUE;
    a94a:	2301      	movs	r3, #1
    a94c:	e01f      	b.n	a98e <USBHandleStandardRequest+0x6a>
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    a94e:	68fb      	ldr	r3, [r7, #12]
    a950:	781b      	ldrb	r3, [r3, #0]
    a952:	f003 031f 	and.w	r3, r3, #31
    a956:	2b01      	cmp	r3, #1
    a958:	d00a      	beq.n	a970 <USBHandleStandardRequest+0x4c>
    a95a:	2b02      	cmp	r3, #2
    a95c:	d00f      	beq.n	a97e <USBHandleStandardRequest+0x5a>
    a95e:	2b00      	cmp	r3, #0
    a960:	d114      	bne.n	a98c <USBHandleStandardRequest+0x68>
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
    a962:	68f8      	ldr	r0, [r7, #12]
    a964:	68b9      	ldr	r1, [r7, #8]
    a966:	687a      	ldr	r2, [r7, #4]
    a968:	f7ff feba 	bl	a6e0 <HandleStdDeviceReq>
    a96c:	4603      	mov	r3, r0
    a96e:	e00e      	b.n	a98e <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
    a970:	68f8      	ldr	r0, [r7, #12]
    a972:	68b9      	ldr	r1, [r7, #8]
    a974:	687a      	ldr	r2, [r7, #4]
    a976:	f7ff ff1d 	bl	a7b4 <HandleStdInterfaceReq>
    a97a:	4603      	mov	r3, r0
    a97c:	e007      	b.n	a98e <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
    a97e:	68f8      	ldr	r0, [r7, #12]
    a980:	68b9      	ldr	r1, [r7, #8]
    a982:	687a      	ldr	r2, [r7, #4]
    a984:	f7ff ff66 	bl	a854 <HandleStdEndPointReq>
    a988:	4603      	mov	r3, r0
    a98a:	e000      	b.n	a98e <USBHandleStandardRequest+0x6a>
	default: 						return FALSE;
    a98c:	2300      	movs	r3, #0
	}
}
    a98e:	4618      	mov	r0, r3
    a990:	3710      	adds	r7, #16
    a992:	46bd      	mov	sp, r7
    a994:	bd80      	pop	{r7, pc}
    a996:	bf00      	nop
    a998:	10000b04 	.word	0x10000b04

0000a99c <memcmp>:
    a99c:	2a03      	cmp	r2, #3
    a99e:	b470      	push	{r4, r5, r6}
    a9a0:	d926      	bls.n	a9f0 <memcmp+0x54>
    a9a2:	ea40 0301 	orr.w	r3, r0, r1
    a9a6:	079b      	lsls	r3, r3, #30
    a9a8:	d011      	beq.n	a9ce <memcmp+0x32>
    a9aa:	7804      	ldrb	r4, [r0, #0]
    a9ac:	780d      	ldrb	r5, [r1, #0]
    a9ae:	42ac      	cmp	r4, r5
    a9b0:	d122      	bne.n	a9f8 <memcmp+0x5c>
    a9b2:	4402      	add	r2, r0
    a9b4:	1c43      	adds	r3, r0, #1
    a9b6:	e005      	b.n	a9c4 <memcmp+0x28>
    a9b8:	f813 4b01 	ldrb.w	r4, [r3], #1
    a9bc:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    a9c0:	42ac      	cmp	r4, r5
    a9c2:	d119      	bne.n	a9f8 <memcmp+0x5c>
    a9c4:	4293      	cmp	r3, r2
    a9c6:	d1f7      	bne.n	a9b8 <memcmp+0x1c>
    a9c8:	2000      	movs	r0, #0
    a9ca:	bc70      	pop	{r4, r5, r6}
    a9cc:	4770      	bx	lr
    a9ce:	460c      	mov	r4, r1
    a9d0:	4603      	mov	r3, r0
    a9d2:	681e      	ldr	r6, [r3, #0]
    a9d4:	6825      	ldr	r5, [r4, #0]
    a9d6:	4618      	mov	r0, r3
    a9d8:	42ae      	cmp	r6, r5
    a9da:	4621      	mov	r1, r4
    a9dc:	f103 0304 	add.w	r3, r3, #4
    a9e0:	f104 0404 	add.w	r4, r4, #4
    a9e4:	d104      	bne.n	a9f0 <memcmp+0x54>
    a9e6:	3a04      	subs	r2, #4
    a9e8:	2a03      	cmp	r2, #3
    a9ea:	4618      	mov	r0, r3
    a9ec:	4621      	mov	r1, r4
    a9ee:	d8f0      	bhi.n	a9d2 <memcmp+0x36>
    a9f0:	2a00      	cmp	r2, #0
    a9f2:	d1da      	bne.n	a9aa <memcmp+0xe>
    a9f4:	4610      	mov	r0, r2
    a9f6:	e7e8      	b.n	a9ca <memcmp+0x2e>
    a9f8:	1b60      	subs	r0, r4, r5
    a9fa:	bc70      	pop	{r4, r5, r6}
    a9fc:	4770      	bx	lr
    a9fe:	bf00      	nop

0000aa00 <memcpy>:
    aa00:	4684      	mov	ip, r0
    aa02:	ea41 0300 	orr.w	r3, r1, r0
    aa06:	f013 0303 	ands.w	r3, r3, #3
    aa0a:	d149      	bne.n	aaa0 <memcpy+0xa0>
    aa0c:	3a40      	subs	r2, #64	; 0x40
    aa0e:	d323      	bcc.n	aa58 <memcpy+0x58>
    aa10:	680b      	ldr	r3, [r1, #0]
    aa12:	6003      	str	r3, [r0, #0]
    aa14:	684b      	ldr	r3, [r1, #4]
    aa16:	6043      	str	r3, [r0, #4]
    aa18:	688b      	ldr	r3, [r1, #8]
    aa1a:	6083      	str	r3, [r0, #8]
    aa1c:	68cb      	ldr	r3, [r1, #12]
    aa1e:	60c3      	str	r3, [r0, #12]
    aa20:	690b      	ldr	r3, [r1, #16]
    aa22:	6103      	str	r3, [r0, #16]
    aa24:	694b      	ldr	r3, [r1, #20]
    aa26:	6143      	str	r3, [r0, #20]
    aa28:	698b      	ldr	r3, [r1, #24]
    aa2a:	6183      	str	r3, [r0, #24]
    aa2c:	69cb      	ldr	r3, [r1, #28]
    aa2e:	61c3      	str	r3, [r0, #28]
    aa30:	6a0b      	ldr	r3, [r1, #32]
    aa32:	6203      	str	r3, [r0, #32]
    aa34:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    aa36:	6243      	str	r3, [r0, #36]	; 0x24
    aa38:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    aa3a:	6283      	str	r3, [r0, #40]	; 0x28
    aa3c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    aa3e:	62c3      	str	r3, [r0, #44]	; 0x2c
    aa40:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    aa42:	6303      	str	r3, [r0, #48]	; 0x30
    aa44:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    aa46:	6343      	str	r3, [r0, #52]	; 0x34
    aa48:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    aa4a:	6383      	str	r3, [r0, #56]	; 0x38
    aa4c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    aa4e:	63c3      	str	r3, [r0, #60]	; 0x3c
    aa50:	3040      	adds	r0, #64	; 0x40
    aa52:	3140      	adds	r1, #64	; 0x40
    aa54:	3a40      	subs	r2, #64	; 0x40
    aa56:	d2db      	bcs.n	aa10 <memcpy+0x10>
    aa58:	3230      	adds	r2, #48	; 0x30
    aa5a:	d30b      	bcc.n	aa74 <memcpy+0x74>
    aa5c:	680b      	ldr	r3, [r1, #0]
    aa5e:	6003      	str	r3, [r0, #0]
    aa60:	684b      	ldr	r3, [r1, #4]
    aa62:	6043      	str	r3, [r0, #4]
    aa64:	688b      	ldr	r3, [r1, #8]
    aa66:	6083      	str	r3, [r0, #8]
    aa68:	68cb      	ldr	r3, [r1, #12]
    aa6a:	60c3      	str	r3, [r0, #12]
    aa6c:	3010      	adds	r0, #16
    aa6e:	3110      	adds	r1, #16
    aa70:	3a10      	subs	r2, #16
    aa72:	d2f3      	bcs.n	aa5c <memcpy+0x5c>
    aa74:	320c      	adds	r2, #12
    aa76:	d305      	bcc.n	aa84 <memcpy+0x84>
    aa78:	f851 3b04 	ldr.w	r3, [r1], #4
    aa7c:	f840 3b04 	str.w	r3, [r0], #4
    aa80:	3a04      	subs	r2, #4
    aa82:	d2f9      	bcs.n	aa78 <memcpy+0x78>
    aa84:	3204      	adds	r2, #4
    aa86:	d008      	beq.n	aa9a <memcpy+0x9a>
    aa88:	07d2      	lsls	r2, r2, #31
    aa8a:	bf1c      	itt	ne
    aa8c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    aa90:	f800 3b01 	strbne.w	r3, [r0], #1
    aa94:	d301      	bcc.n	aa9a <memcpy+0x9a>
    aa96:	880b      	ldrh	r3, [r1, #0]
    aa98:	8003      	strh	r3, [r0, #0]
    aa9a:	4660      	mov	r0, ip
    aa9c:	4770      	bx	lr
    aa9e:	bf00      	nop
    aaa0:	2a08      	cmp	r2, #8
    aaa2:	d313      	bcc.n	aacc <memcpy+0xcc>
    aaa4:	078b      	lsls	r3, r1, #30
    aaa6:	d0b1      	beq.n	aa0c <memcpy+0xc>
    aaa8:	f010 0303 	ands.w	r3, r0, #3
    aaac:	d0ae      	beq.n	aa0c <memcpy+0xc>
    aaae:	f1c3 0304 	rsb	r3, r3, #4
    aab2:	1ad2      	subs	r2, r2, r3
    aab4:	07db      	lsls	r3, r3, #31
    aab6:	bf1c      	itt	ne
    aab8:	f811 3b01 	ldrbne.w	r3, [r1], #1
    aabc:	f800 3b01 	strbne.w	r3, [r0], #1
    aac0:	d3a4      	bcc.n	aa0c <memcpy+0xc>
    aac2:	f831 3b02 	ldrh.w	r3, [r1], #2
    aac6:	f820 3b02 	strh.w	r3, [r0], #2
    aaca:	e79f      	b.n	aa0c <memcpy+0xc>
    aacc:	3a04      	subs	r2, #4
    aace:	d3d9      	bcc.n	aa84 <memcpy+0x84>
    aad0:	3a01      	subs	r2, #1
    aad2:	f811 3b01 	ldrb.w	r3, [r1], #1
    aad6:	f800 3b01 	strb.w	r3, [r0], #1
    aada:	d2f9      	bcs.n	aad0 <memcpy+0xd0>
    aadc:	780b      	ldrb	r3, [r1, #0]
    aade:	7003      	strb	r3, [r0, #0]
    aae0:	784b      	ldrb	r3, [r1, #1]
    aae2:	7043      	strb	r3, [r0, #1]
    aae4:	788b      	ldrb	r3, [r1, #2]
    aae6:	7083      	strb	r3, [r0, #2]
    aae8:	4660      	mov	r0, ip
    aaea:	4770      	bx	lr

0000aaec <strlen>:
    aaec:	f020 0103 	bic.w	r1, r0, #3
    aaf0:	f010 0003 	ands.w	r0, r0, #3
    aaf4:	f1c0 0000 	rsb	r0, r0, #0
    aaf8:	f851 3b04 	ldr.w	r3, [r1], #4
    aafc:	f100 0c04 	add.w	ip, r0, #4
    ab00:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    ab04:	f06f 0200 	mvn.w	r2, #0
    ab08:	bf1c      	itt	ne
    ab0a:	fa22 f20c 	lsrne.w	r2, r2, ip
    ab0e:	4313      	orrne	r3, r2
    ab10:	f04f 0c01 	mov.w	ip, #1
    ab14:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    ab18:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    ab1c:	eba3 020c 	sub.w	r2, r3, ip
    ab20:	ea22 0203 	bic.w	r2, r2, r3
    ab24:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    ab28:	bf04      	itt	eq
    ab2a:	f851 3b04 	ldreq.w	r3, [r1], #4
    ab2e:	3004      	addeq	r0, #4
    ab30:	d0f4      	beq.n	ab1c <strlen+0x30>
    ab32:	f1c2 0100 	rsb	r1, r2, #0
    ab36:	ea02 0201 	and.w	r2, r2, r1
    ab3a:	fab2 f282 	clz	r2, r2
    ab3e:	f1c2 021f 	rsb	r2, r2, #31
    ab42:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    ab46:	4770      	bx	lr
    ab48:	00000043 	.word	0x00000043

0000ab4c <_global_impure_ptr>:
    ab4c:	10000020                                 ...

0000ab50 <advertising_channels>:
    ab50:	00270c00                                ..'.

0000ab54 <data_channels>:
    ab54:	04030201 08070605 0d0b0a09 11100f0e     ................
    ab64:	15141312 19181716 1d1c1b1a 21201f1e     .............. !
    ab74:	25242322 00000026                       "#$%&...

0000ab7c <whitening>:
    ab7c:	01010101 01000100 00000100 00010000     ................
    ab8c:	01000101 00010101 01010100 00010000     ................
    ab9c:	01010001 01010000 00000000 00010100     ................
    abac:	01000101 01010100 00000100 00010100     ................
    abbc:	00000100 00000100 00000000 01000001     ................
    abcc:	01010000 00000100 01010101 01010100     ................
    abdc:	00000000 01010101 00010101 01010000     ................
    abec:	01010001 01000000 00000100 00010001     ................

0000abfc <whitening_index>:
    abfc:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    ac0c:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    ac1c:	5a541b28 662f703f                       (.TZ?p/f

0000ac24 <hop_interval_lut>:
    ac24:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    ac34:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    ac44:	120c0916 00000024                       ....$...

0000ac4c <whitening_word>:
    ac4c:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    ac5c:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    ac6c:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    ac7c:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    ac8c:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    ac9c:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    acac:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    acbc:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    accc:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    acdc:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    acec:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    acfc:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    ad0c:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    ad1c:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    ad2c:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    ad3c:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    ad4c:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    ad5c:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    ad6c:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    ad7c:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    ad8c:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    ad9c:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    adac:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    adbc:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    adcc:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    addc:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    adec:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    adfc:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    ae0c:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    ae1c:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    ae2c:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    ae3c:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    ae4c:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    ae5c:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    ae6c:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    ae7c:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    ae8c:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    ae9c:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    aeac:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    aebc:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    aecc:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    aedc:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    aeec:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    aefc:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    af0c:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    af1c:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    af2c:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    af3c:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    af4c:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    af5c:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    af6c:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    af7c:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    af8c:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    af9c:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    afac:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    afbc:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    afcc:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    afdc:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    afec:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    affc:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    b00c:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    b01c:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    b02c:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    b03c:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    b04c:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    b05c:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    b06c:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    b07c:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    b08c:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    b09c:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    b0ac:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    b0bc:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    b0cc:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    b0dc:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    b0ec:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    b0fc:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    b10c:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    b11c:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    b12c:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    b13c:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    b14c:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    b15c:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    b16c:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    b17c:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    b18c:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    b19c:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    b1ac:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    b1bc:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    b1cc:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    b1dc:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    b1ec:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    b1fc:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    b20c:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    b21c:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    b22c:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    b23c:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    b24c:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    b25c:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    b26c:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    b27c:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    b28c:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    b29c:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    b2ac:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    b2bc:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    b2cc:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    b2dc:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    b2ec:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    b2fc:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    b30c:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    b31c:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    b32c:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    b33c:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    b34c:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    b35c:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    b36c:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    b37c:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    b38c:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    b39c:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    b3ac:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    b3bc:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

0000b3cc <compile_info>:
    b3cc:	72656275 746f6f74 30322068 312d3531     ubertooth 2015-1
    b3dc:	31522d30 6f722820 7740746f 69706965     0-R1 (root@weipi
    b3ec:	2029676e 20657554 20727041 31203632     ng) Tue Apr 26 1
    b3fc:	38343a30 2033343a 2054534b 36313032     0:48:43 KST 2016
    b40c:	00000000 35313032 2d30312d 00003152     ....2015-10-R1..
    b41c:	00000001 00000001 00000001 00000001     ................
    b42c:	ffff0900 ffffffff ff050102 0000ffff     ................
    b43c:	0985096c 0000099e                       l.......

0000b444 <abDescriptors>:
    b444:	02000112 400000ff 60021d50 02010101     .......@P..`....
    b454:	02090103 01010020 096e8000 02000004     .... .....n.....
    b464:	000000ff 02820507 07000040 40020505     ........@......@
    b474:	03040000 035c0409 00740068 00700074     ......\.h.t.t.p.
    b484:	002f003a 0067002f 00740069 00750068     :././.g.i.t.h.u.
    b494:	002e0062 006f0063 002f006d 00720067     b...c.o.m./.g.r.
    b4a4:	00610065 00730074 006f0063 00740074     e.a.t.s.c.o.t.t.
    b4b4:	00610067 00670064 00740065 002f0073     g.a.d.g.e.t.s./.
    b4c4:	00620075 00720065 006f0074 0074006f     u.b.e.r.t.o.o.t.
    b4d4:	031e0068 006c0062 00650075 006f0074     h...b.l.u.e.t.o.
    b4e4:	0074006f 005f0068 00780072 00780074     o.t.h._.r.x.t.x.
    b4f4:	00300312 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
    b504:	00000031 6361387b 38613734 63632d38     1...{8ac47a88-cc
    b514:	342d3632 2d396161 62373838 6332342d     26-4aa9-887b-42c
    b524:	66633861 36613730 00007d33 8cc57554     a8cf07a63}..Tu..
    b534:	e74533c7 0000002a 00008c8d 00008cc1     .3E.*...........
    b544:	00008cd9 00008dc1 00008c79 00008c79     ........y...y...
    b554:	00008c79 00008e25 00008cc1 00008e3d     y...%.......=...
    b564:	00008c79 00008c79 00008c79 00008c8d     y...y...y.......
    b574:	00008cc1 00008f11 000090d1 00008f91     ................
    b584:	00009055                                U...

0000b588 <abExtendedOsFeatureDescriptor>:
    b588:	00000028 00040100 00000001 00000000     (...............
    b598:	49570100 4253554e 00000000 00000000     ..WINUSB........
    b5a8:	00000000 00000000                       ........

0000b5b0 <_init>:
    b5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b5b2:	bf00      	nop
    b5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b5b6:	bc08      	pop	{r3}
    b5b8:	469e      	mov	lr, r3
    b5ba:	4770      	bx	lr

0000b5bc <__init_array_start>:
    b5bc:	00004215 	.word	0x00004215

0000b5c0 <__frame_dummy_init_array_entry>:
    b5c0:	000040f1                                .@..

0000b5c4 <_fini>:
    b5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b5c6:	bf00      	nop
    b5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    b5ca:	bc08      	pop	{r3}
    b5cc:	469e      	mov	lr, r3
    b5ce:	4770      	bx	lr

0000b5d0 <__fini_array_start>:
    b5d0:	000040cd 	.word	0x000040cd

0000b5d4 <__fini_array_end>:
    b5d4:	00000000 	.word	0x00000000
