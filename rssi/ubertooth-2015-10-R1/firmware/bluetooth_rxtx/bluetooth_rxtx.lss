
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008278  00004000  00004000  00004000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         0000093e  10000020  0000c278  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002918  10000960  0000cbb6  00010960  2**3
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0001095e  2**0
                  CONTENTS, READONLY
  5 .comment      00000070  00000000  00000000  00010987  2**0
                  CONTENTS, READONLY
  6 .debug_frame  00001c9c  00000000  00000000  000109f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004f95  00000000  00000000  00012694  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001537  00000000  00000000  00017629  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006c8  00000000  00000000  00018b60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005e8  00000000  00000000  00019228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002730  00000000  00000000  00019810  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000021fd  00000000  00000000  0001bf40  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 a9 96 00 00 15 97 00 00 15 97 00 00     .?..............
    4010:	15 97 00 00 15 97 00 00 15 97 00 00 00 00 00 00     ................
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 15 97 00 00     ................
    4030:	15 97 00 00 00 00 00 00 15 97 00 00 15 97 00 00     ................
    4040:	15 97 00 00 b9 53 00 00 15 97 00 00 15 97 00 00     .....S..........
    4050:	15 97 00 00 15 97 00 00 15 97 00 00 15 97 00 00     ................
    4060:	15 97 00 00 15 97 00 00 15 97 00 00 15 97 00 00     ................
    4070:	15 97 00 00 15 97 00 00 15 97 00 00 15 97 00 00     ................
    4080:	15 97 00 00 15 97 00 00 15 97 00 00 15 97 00 00     ................
    4090:	15 97 00 00 d5 54 00 00 15 97 00 00 15 97 00 00     .....T..........
    40a0:	9d 96 00 00 15 97 00 00 95 59 00 00 15 97 00 00     .........Y......
    40b0:	15 97 00 00 15 97 00 00 15 97 00 00 15 97 00 00     ................
    40c0:	15 97 00 00 15 97 00 00 15 97 00 00                 ............

000040cc <__do_global_dtors_aux>:
    40cc:	b510      	push	{r4, lr}
    40ce:	4c05      	ldr	r4, [pc, #20]	; (40e4 <__do_global_dtors_aux+0x18>)
    40d0:	7823      	ldrb	r3, [r4, #0]
    40d2:	b933      	cbnz	r3, 40e2 <__do_global_dtors_aux+0x16>
    40d4:	4b04      	ldr	r3, [pc, #16]	; (40e8 <__do_global_dtors_aux+0x1c>)
    40d6:	b113      	cbz	r3, 40de <__do_global_dtors_aux+0x12>
    40d8:	4804      	ldr	r0, [pc, #16]	; (40ec <__do_global_dtors_aux+0x20>)
    40da:	f3af 8000 	nop.w
    40de:	2301      	movs	r3, #1
    40e0:	7023      	strb	r3, [r4, #0]
    40e2:	bd10      	pop	{r4, pc}
    40e4:	10000960 	.word	0x10000960
    40e8:	00000000 	.word	0x00000000
    40ec:	0000c250 	.word	0x0000c250

000040f0 <frame_dummy>:
    40f0:	4b08      	ldr	r3, [pc, #32]	; (4114 <frame_dummy+0x24>)
    40f2:	b510      	push	{r4, lr}
    40f4:	b11b      	cbz	r3, 40fe <frame_dummy+0xe>
    40f6:	4808      	ldr	r0, [pc, #32]	; (4118 <frame_dummy+0x28>)
    40f8:	4908      	ldr	r1, [pc, #32]	; (411c <frame_dummy+0x2c>)
    40fa:	f3af 8000 	nop.w
    40fe:	4808      	ldr	r0, [pc, #32]	; (4120 <frame_dummy+0x30>)
    4100:	6803      	ldr	r3, [r0, #0]
    4102:	b903      	cbnz	r3, 4106 <frame_dummy+0x16>
    4104:	bd10      	pop	{r4, pc}
    4106:	4b07      	ldr	r3, [pc, #28]	; (4124 <frame_dummy+0x34>)
    4108:	2b00      	cmp	r3, #0
    410a:	d0fb      	beq.n	4104 <frame_dummy+0x14>
    410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4110:	4718      	bx	r3
    4112:	bf00      	nop
    4114:	00000000 	.word	0x00000000
    4118:	0000c250 	.word	0x0000c250
    411c:	10000964 	.word	0x10000964
    4120:	10000960 	.word	0x10000960
    4124:	00000000 	.word	0x00000000

00004128 <__libc_init_array>:
    4128:	b570      	push	{r4, r5, r6, lr}
    412a:	4e0f      	ldr	r6, [pc, #60]	; (4168 <__libc_init_array+0x40>)
    412c:	4d0f      	ldr	r5, [pc, #60]	; (416c <__libc_init_array+0x44>)
    412e:	1b76      	subs	r6, r6, r5
    4130:	10b6      	asrs	r6, r6, #2
    4132:	bf18      	it	ne
    4134:	2400      	movne	r4, #0
    4136:	d005      	beq.n	4144 <__libc_init_array+0x1c>
    4138:	3401      	adds	r4, #1
    413a:	f855 3b04 	ldr.w	r3, [r5], #4
    413e:	4798      	blx	r3
    4140:	42a6      	cmp	r6, r4
    4142:	d1f9      	bne.n	4138 <__libc_init_array+0x10>
    4144:	4e0a      	ldr	r6, [pc, #40]	; (4170 <__libc_init_array+0x48>)
    4146:	4d0b      	ldr	r5, [pc, #44]	; (4174 <__libc_init_array+0x4c>)
    4148:	f008 f882 	bl	c250 <_init>
    414c:	1b76      	subs	r6, r6, r5
    414e:	10b6      	asrs	r6, r6, #2
    4150:	bf18      	it	ne
    4152:	2400      	movne	r4, #0
    4154:	d006      	beq.n	4164 <__libc_init_array+0x3c>
    4156:	3401      	adds	r4, #1
    4158:	f855 3b04 	ldr.w	r3, [r5], #4
    415c:	4798      	blx	r3
    415e:	42a6      	cmp	r6, r4
    4160:	d1f9      	bne.n	4156 <__libc_init_array+0x2e>
    4162:	bd70      	pop	{r4, r5, r6, pc}
    4164:	bd70      	pop	{r4, r5, r6, pc}
    4166:	bf00      	nop
    4168:	0000c25c 	.word	0x0000c25c
    416c:	0000c25c 	.word	0x0000c25c
    4170:	0000c264 	.word	0x0000c264
    4174:	0000c25c 	.word	0x0000c25c

00004178 <memset>:
    4178:	b470      	push	{r4, r5, r6}
    417a:	0784      	lsls	r4, r0, #30
    417c:	d046      	beq.n	420c <memset+0x94>
    417e:	1e54      	subs	r4, r2, #1
    4180:	2a00      	cmp	r2, #0
    4182:	d041      	beq.n	4208 <memset+0x90>
    4184:	b2cd      	uxtb	r5, r1
    4186:	4603      	mov	r3, r0
    4188:	e002      	b.n	4190 <memset+0x18>
    418a:	1e62      	subs	r2, r4, #1
    418c:	b3e4      	cbz	r4, 4208 <memset+0x90>
    418e:	4614      	mov	r4, r2
    4190:	f803 5b01 	strb.w	r5, [r3], #1
    4194:	079a      	lsls	r2, r3, #30
    4196:	d1f8      	bne.n	418a <memset+0x12>
    4198:	2c03      	cmp	r4, #3
    419a:	d92e      	bls.n	41fa <memset+0x82>
    419c:	b2cd      	uxtb	r5, r1
    419e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    41a2:	2c0f      	cmp	r4, #15
    41a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    41a8:	d919      	bls.n	41de <memset+0x66>
    41aa:	4626      	mov	r6, r4
    41ac:	f103 0210 	add.w	r2, r3, #16
    41b0:	3e10      	subs	r6, #16
    41b2:	2e0f      	cmp	r6, #15
    41b4:	f842 5c10 	str.w	r5, [r2, #-16]
    41b8:	f842 5c0c 	str.w	r5, [r2, #-12]
    41bc:	f842 5c08 	str.w	r5, [r2, #-8]
    41c0:	f842 5c04 	str.w	r5, [r2, #-4]
    41c4:	f102 0210 	add.w	r2, r2, #16
    41c8:	d8f2      	bhi.n	41b0 <memset+0x38>
    41ca:	f1a4 0210 	sub.w	r2, r4, #16
    41ce:	f022 020f 	bic.w	r2, r2, #15
    41d2:	f004 040f 	and.w	r4, r4, #15
    41d6:	3210      	adds	r2, #16
    41d8:	2c03      	cmp	r4, #3
    41da:	4413      	add	r3, r2
    41dc:	d90d      	bls.n	41fa <memset+0x82>
    41de:	461e      	mov	r6, r3
    41e0:	4622      	mov	r2, r4
    41e2:	3a04      	subs	r2, #4
    41e4:	2a03      	cmp	r2, #3
    41e6:	f846 5b04 	str.w	r5, [r6], #4
    41ea:	d8fa      	bhi.n	41e2 <memset+0x6a>
    41ec:	1f22      	subs	r2, r4, #4
    41ee:	f022 0203 	bic.w	r2, r2, #3
    41f2:	3204      	adds	r2, #4
    41f4:	4413      	add	r3, r2
    41f6:	f004 0403 	and.w	r4, r4, #3
    41fa:	b12c      	cbz	r4, 4208 <memset+0x90>
    41fc:	b2c9      	uxtb	r1, r1
    41fe:	441c      	add	r4, r3
    4200:	f803 1b01 	strb.w	r1, [r3], #1
    4204:	42a3      	cmp	r3, r4
    4206:	d1fb      	bne.n	4200 <memset+0x88>
    4208:	bc70      	pop	{r4, r5, r6}
    420a:	4770      	bx	lr
    420c:	4614      	mov	r4, r2
    420e:	4603      	mov	r3, r0
    4210:	e7c2      	b.n	4198 <memset+0x20>
    4212:	bf00      	nop

00004214 <register_fini>:
    4214:	4b02      	ldr	r3, [pc, #8]	; (4220 <register_fini+0xc>)
    4216:	b113      	cbz	r3, 421e <register_fini+0xa>
    4218:	4802      	ldr	r0, [pc, #8]	; (4224 <register_fini+0x10>)
    421a:	f000 b805 	b.w	4228 <atexit>
    421e:	4770      	bx	lr
    4220:	00000000 	.word	0x00000000
    4224:	00004235 	.word	0x00004235

00004228 <atexit>:
    4228:	4601      	mov	r1, r0
    422a:	2000      	movs	r0, #0
    422c:	4602      	mov	r2, r0
    422e:	4603      	mov	r3, r0
    4230:	f000 b816 	b.w	4260 <__register_exitproc>

00004234 <__libc_fini_array>:
    4234:	b538      	push	{r3, r4, r5, lr}
    4236:	4b08      	ldr	r3, [pc, #32]	; (4258 <__libc_fini_array+0x24>)
    4238:	4d08      	ldr	r5, [pc, #32]	; (425c <__libc_fini_array+0x28>)
    423a:	1aed      	subs	r5, r5, r3
    423c:	10ac      	asrs	r4, r5, #2
    423e:	bf18      	it	ne
    4240:	18ed      	addne	r5, r5, r3
    4242:	d005      	beq.n	4250 <__libc_fini_array+0x1c>
    4244:	3c01      	subs	r4, #1
    4246:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    424a:	4798      	blx	r3
    424c:	2c00      	cmp	r4, #0
    424e:	d1f9      	bne.n	4244 <__libc_fini_array+0x10>
    4250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4254:	f008 b806 	b.w	c264 <_fini>
    4258:	0000c270 	.word	0x0000c270
    425c:	0000c274 	.word	0x0000c274

00004260 <__register_exitproc>:
    4260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4264:	4c25      	ldr	r4, [pc, #148]	; (42fc <__register_exitproc+0x9c>)
    4266:	4606      	mov	r6, r0
    4268:	6825      	ldr	r5, [r4, #0]
    426a:	4688      	mov	r8, r1
    426c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    4270:	4692      	mov	sl, r2
    4272:	4699      	mov	r9, r3
    4274:	b3c4      	cbz	r4, 42e8 <__register_exitproc+0x88>
    4276:	6860      	ldr	r0, [r4, #4]
    4278:	281f      	cmp	r0, #31
    427a:	dc17      	bgt.n	42ac <__register_exitproc+0x4c>
    427c:	1c41      	adds	r1, r0, #1
    427e:	b176      	cbz	r6, 429e <__register_exitproc+0x3e>
    4280:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    4284:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    4288:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
    428c:	2201      	movs	r2, #1
    428e:	4082      	lsls	r2, r0
    4290:	4315      	orrs	r5, r2
    4292:	2e02      	cmp	r6, #2
    4294:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    4298:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
    429c:	d01e      	beq.n	42dc <__register_exitproc+0x7c>
    429e:	1c83      	adds	r3, r0, #2
    42a0:	6061      	str	r1, [r4, #4]
    42a2:	2000      	movs	r0, #0
    42a4:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
    42a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42ac:	4b14      	ldr	r3, [pc, #80]	; (4300 <__register_exitproc+0xa0>)
    42ae:	b303      	cbz	r3, 42f2 <__register_exitproc+0x92>
    42b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42b4:	f3af 8000 	nop.w
    42b8:	4604      	mov	r4, r0
    42ba:	b1d0      	cbz	r0, 42f2 <__register_exitproc+0x92>
    42bc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    42c0:	2700      	movs	r7, #0
    42c2:	e884 0088 	stmia.w	r4, {r3, r7}
    42c6:	4638      	mov	r0, r7
    42c8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42cc:	2101      	movs	r1, #1
    42ce:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    42d2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    42d6:	2e00      	cmp	r6, #0
    42d8:	d0e1      	beq.n	429e <__register_exitproc+0x3e>
    42da:	e7d1      	b.n	4280 <__register_exitproc+0x20>
    42dc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    42e0:	431a      	orrs	r2, r3
    42e2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    42e6:	e7da      	b.n	429e <__register_exitproc+0x3e>
    42e8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    42ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42f0:	e7c1      	b.n	4276 <__register_exitproc+0x16>
    42f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42fa:	bf00      	nop
    42fc:	0000b7d8 	.word	0x0000b7d8
    4300:	00000000 	.word	0x00000000

00004304 <rssi_reset>:
int8_t rssi_min;
uint8_t rssi_count = 0;
int32_t rssi_sum = 0;

static void rssi_reset(void)
{
    4304:	b480      	push	{r7}
    4306:	af00      	add	r7, sp, #0
	rssi_count = 0;
    4308:	4b07      	ldr	r3, [pc, #28]	; (4328 <rssi_reset+0x24>)
    430a:	2200      	movs	r2, #0
    430c:	701a      	strb	r2, [r3, #0]
	rssi_sum = 0;
    430e:	4b07      	ldr	r3, [pc, #28]	; (432c <rssi_reset+0x28>)
    4310:	2200      	movs	r2, #0
    4312:	601a      	str	r2, [r3, #0]
	rssi_max = INT8_MIN;
    4314:	4b06      	ldr	r3, [pc, #24]	; (4330 <rssi_reset+0x2c>)
    4316:	2280      	movs	r2, #128	; 0x80
    4318:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    431a:	4b06      	ldr	r3, [pc, #24]	; (4334 <rssi_reset+0x30>)
    431c:	227f      	movs	r2, #127	; 0x7f
    431e:	701a      	strb	r2, [r3, #0]
}
    4320:	46bd      	mov	sp, r7
    4322:	f85d 7b04 	ldr.w	r7, [sp], #4
    4326:	4770      	bx	lr
    4328:	10000a49 	.word	0x10000a49
    432c:	10000a4c 	.word	0x10000a4c
    4330:	10000b04 	.word	0x10000b04
    4334:	10000bb8 	.word	0x10000bb8

00004338 <rssi_add>:

static void rssi_add(int8_t v)
{
    4338:	b480      	push	{r7}
    433a:	b083      	sub	sp, #12
    433c:	af00      	add	r7, sp, #0
    433e:	4603      	mov	r3, r0
    4340:	71fb      	strb	r3, [r7, #7]
	rssi_max = (v > rssi_max) ? v : rssi_max;
    4342:	4b14      	ldr	r3, [pc, #80]	; (4394 <rssi_add+0x5c>)
    4344:	781b      	ldrb	r3, [r3, #0]
    4346:	b25a      	sxtb	r2, r3
    4348:	f997 3007 	ldrsb.w	r3, [r7, #7]
    434c:	4293      	cmp	r3, r2
    434e:	bfb8      	it	lt
    4350:	4613      	movlt	r3, r2
    4352:	b2da      	uxtb	r2, r3
    4354:	4b0f      	ldr	r3, [pc, #60]	; (4394 <rssi_add+0x5c>)
    4356:	701a      	strb	r2, [r3, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    4358:	4b0f      	ldr	r3, [pc, #60]	; (4398 <rssi_add+0x60>)
    435a:	781b      	ldrb	r3, [r3, #0]
    435c:	b25a      	sxtb	r2, r3
    435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4362:	4293      	cmp	r3, r2
    4364:	bfa8      	it	ge
    4366:	4613      	movge	r3, r2
    4368:	b2da      	uxtb	r2, r3
    436a:	4b0b      	ldr	r3, [pc, #44]	; (4398 <rssi_add+0x60>)
    436c:	701a      	strb	r2, [r3, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4372:	021a      	lsls	r2, r3, #8
    4374:	4b09      	ldr	r3, [pc, #36]	; (439c <rssi_add+0x64>)
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	4413      	add	r3, r2
    437a:	4a08      	ldr	r2, [pc, #32]	; (439c <rssi_add+0x64>)
    437c:	6013      	str	r3, [r2, #0]
	rssi_count += 1;
    437e:	4b08      	ldr	r3, [pc, #32]	; (43a0 <rssi_add+0x68>)
    4380:	781b      	ldrb	r3, [r3, #0]
    4382:	3301      	adds	r3, #1
    4384:	b2da      	uxtb	r2, r3
    4386:	4b06      	ldr	r3, [pc, #24]	; (43a0 <rssi_add+0x68>)
    4388:	701a      	strb	r2, [r3, #0]
}
    438a:	370c      	adds	r7, #12
    438c:	46bd      	mov	sp, r7
    438e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4392:	4770      	bx	lr
    4394:	10000b04 	.word	0x10000b04
    4398:	10000bb8 	.word	0x10000bb8
    439c:	10000a4c 	.word	0x10000a4c
    43a0:	10000a49 	.word	0x10000a49

000043a4 <rssi_iir_update>:

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
static void rssi_iir_update(void)
{
    43a4:	b480      	push	{r7}
    43a6:	b085      	sub	sp, #20
    43a8:	af00      	add	r7, sp, #0
	int32_t avg;
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first
	 * slot of array if not sweeping. */
	if (hop_mode > 0)
    43aa:	4b1f      	ldr	r3, [pc, #124]	; (4428 <rssi_iir_update+0x84>)
    43ac:	781b      	ldrb	r3, [r3, #0]
    43ae:	2b00      	cmp	r3, #0
    43b0:	d006      	beq.n	43c0 <rssi_iir_update+0x1c>
		i = channel - 2402;
    43b2:	4b1e      	ldr	r3, [pc, #120]	; (442c <rssi_iir_update+0x88>)
    43b4:	881b      	ldrh	r3, [r3, #0]
    43b6:	b29b      	uxth	r3, r3
    43b8:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    43bc:	60fb      	str	r3, [r7, #12]
    43be:	e001      	b.n	43c4 <rssi_iir_update+0x20>
	else
		i = 0;
    43c0:	2300      	movs	r3, #0
    43c2:	60fb      	str	r3, [r7, #12]

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    43c4:	4b1a      	ldr	r3, [pc, #104]	; (4430 <rssi_iir_update+0x8c>)
    43c6:	781b      	ldrb	r3, [r3, #0]
    43c8:	2b00      	cmp	r3, #0
    43ca:	d008      	beq.n	43de <rssi_iir_update+0x3a>
		avg = (rssi_sum  + 128) / rssi_count;
    43cc:	4b19      	ldr	r3, [pc, #100]	; (4434 <rssi_iir_update+0x90>)
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	3380      	adds	r3, #128	; 0x80
    43d2:	4a17      	ldr	r2, [pc, #92]	; (4430 <rssi_iir_update+0x8c>)
    43d4:	7812      	ldrb	r2, [r2, #0]
    43d6:	fb93 f3f2 	sdiv	r3, r3, r2
    43da:	60bb      	str	r3, [r7, #8]
    43dc:	e001      	b.n	43e2 <rssi_iir_update+0x3e>
	else
		avg = 0; // really an error
    43de:	2300      	movs	r3, #0
    43e0:	60bb      	str	r3, [r7, #8]
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    43e2:	4a15      	ldr	r2, [pc, #84]	; (4438 <rssi_iir_update+0x94>)
    43e4:	68fb      	ldr	r3, [r7, #12]
    43e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    43ea:	b21a      	sxth	r2, r3
    43ec:	4613      	mov	r3, r2
    43ee:	019b      	lsls	r3, r3, #6
    43f0:	1a9b      	subs	r3, r3, r2
    43f2:	009b      	lsls	r3, r3, #2
    43f4:	4413      	add	r3, r2
    43f6:	607b      	str	r3, [r7, #4]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    43f8:	68ba      	ldr	r2, [r7, #8]
    43fa:	4613      	mov	r3, r2
    43fc:	005b      	lsls	r3, r3, #1
    43fe:	4413      	add	r3, r2
    4400:	687a      	ldr	r2, [r7, #4]
    4402:	4413      	add	r3, r2
    4404:	607b      	str	r3, [r7, #4]
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	3380      	adds	r3, #128	; 0x80
    440a:	2b00      	cmp	r3, #0
    440c:	da00      	bge.n	4410 <rssi_iir_update+0x6c>
    440e:	33ff      	adds	r3, #255	; 0xff
    4410:	121b      	asrs	r3, r3, #8
    4412:	b299      	uxth	r1, r3
    4414:	4a08      	ldr	r2, [pc, #32]	; (4438 <rssi_iir_update+0x94>)
    4416:	68fb      	ldr	r3, [r7, #12]
    4418:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
    441c:	3714      	adds	r7, #20
    441e:	46bd      	mov	sp, r7
    4420:	f85d 7b04 	ldr.w	r7, [sp], #4
    4424:	4770      	bx	lr
    4426:	bf00      	nop
    4428:	1000097c 	.word	0x1000097c
    442c:	1000049c 	.word	0x1000049c
    4430:	10000a49 	.word	0x10000a49
    4434:	10000a4c 	.word	0x10000a4c
    4438:	100009a0 	.word	0x100009a0

0000443c <cs_threshold_set>:
/* Set CC2400 carrier sense threshold and store value to
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, u8 samples)
{
    443c:	b580      	push	{r7, lr}
    443e:	b082      	sub	sp, #8
    4440:	af00      	add	r7, sp, #0
    4442:	4603      	mov	r3, r0
    4444:	460a      	mov	r2, r1
    4446:	71fb      	strb	r3, [r7, #7]
    4448:	4613      	mov	r3, r2
    444a:	71bb      	strb	r3, [r7, #6]
	level = MIN(MAX(level,-120),(-20));
    444c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4450:	f113 0f14 	cmn.w	r3, #20
    4454:	d00d      	beq.n	4472 <cs_threshold_set+0x36>
    4456:	f997 3007 	ldrsb.w	r3, [r7, #7]
    445a:	f113 0f13 	cmn.w	r3, #19
    445e:	da08      	bge.n	4472 <cs_threshold_set+0x36>
    4460:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4464:	f06f 0277 	mvn.w	r2, #119	; 0x77
    4468:	4293      	cmp	r3, r2
    446a:	bfb8      	it	lt
    446c:	4613      	movlt	r3, r2
    446e:	b2db      	uxtb	r3, r3
    4470:	e000      	b.n	4474 <cs_threshold_set+0x38>
    4472:	23ec      	movs	r3, #236	; 0xec
    4474:	71fb      	strb	r3, [r7, #7]
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | (samples&3));
    4476:	79fb      	ldrb	r3, [r7, #7]
    4478:	3338      	adds	r3, #56	; 0x38
    447a:	b2db      	uxtb	r3, r3
    447c:	b29b      	uxth	r3, r3
    447e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    4482:	b29a      	uxth	r2, r3
    4484:	79bb      	ldrb	r3, [r7, #6]
    4486:	b29b      	uxth	r3, r3
    4488:	f003 0303 	and.w	r3, r3, #3
    448c:	b29b      	uxth	r3, r3
    448e:	4313      	orrs	r3, r2
    4490:	b29b      	uxth	r3, r3
    4492:	b29b      	uxth	r3, r3
    4494:	2006      	movs	r0, #6
    4496:	4619      	mov	r1, r3
    4498:	f005 fb24 	bl	9ae4 <cc2400_set>
	cs_threshold_cur = level;
    449c:	4a08      	ldr	r2, [pc, #32]	; (44c0 <cs_threshold_set+0x84>)
    449e:	79fb      	ldrb	r3, [r7, #7]
    44a0:	7013      	strb	r3, [r2, #0]
	cs_no_squelch = (level <= -120);
    44a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    44a6:	f113 0f77 	cmn.w	r3, #119	; 0x77
    44aa:	bfb4      	ite	lt
    44ac:	2301      	movlt	r3, #1
    44ae:	2300      	movge	r3, #0
    44b0:	b2db      	uxtb	r3, r3
    44b2:	461a      	mov	r2, r3
    44b4:	4b03      	ldr	r3, [pc, #12]	; (44c4 <cs_threshold_set+0x88>)
    44b6:	701a      	strb	r2, [r3, #0]
}
    44b8:	3708      	adds	r7, #8
    44ba:	46bd      	mov	sp, r7
    44bc:	bd80      	pop	{r7, pc}
    44be:	bf00      	nop
    44c0:	1000044d 	.word	0x1000044d
    44c4:	1000097e 	.word	0x1000097e

000044c8 <enqueue>:

static int enqueue(u8 type, u8 *buf)
{
    44c8:	b580      	push	{r7, lr}
    44ca:	b088      	sub	sp, #32
    44cc:	af00      	add	r7, sp, #0
    44ce:	4603      	mov	r3, r0
    44d0:	6039      	str	r1, [r7, #0]
    44d2:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    44d4:	f004 f89e 	bl	8614 <usb_enqueue>
    44d8:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    44da:	69fb      	ldr	r3, [r7, #28]
    44dc:	2b00      	cmp	r3, #0
    44de:	d109      	bne.n	44f4 <enqueue+0x2c>
		status |= FIFO_OVERFLOW;
    44e0:	4b59      	ldr	r3, [pc, #356]	; (4648 <enqueue+0x180>)
    44e2:	781b      	ldrb	r3, [r3, #0]
    44e4:	b2db      	uxtb	r3, r3
    44e6:	f043 0304 	orr.w	r3, r3, #4
    44ea:	b2da      	uxtb	r2, r3
    44ec:	4b56      	ldr	r3, [pc, #344]	; (4648 <enqueue+0x180>)
    44ee:	701a      	strb	r2, [r3, #0]
		return 0;
    44f0:	2300      	movs	r3, #0
    44f2:	e0a5      	b.n	4640 <enqueue+0x178>
	}

	f->pkt_type = type;
    44f4:	69fb      	ldr	r3, [r7, #28]
    44f6:	79fa      	ldrb	r2, [r7, #7]
    44f8:	701a      	strb	r2, [r3, #0]
	if(type == SPECAN) {
    44fa:	79fb      	ldrb	r3, [r7, #7]
    44fc:	2b04      	cmp	r3, #4
    44fe:	d113      	bne.n	4528 <enqueue+0x60>
		f->clkn_high = (clkn >> 20) & 0xff;
    4500:	4b52      	ldr	r3, [pc, #328]	; (464c <enqueue+0x184>)
    4502:	681b      	ldr	r3, [r3, #0]
    4504:	0d1b      	lsrs	r3, r3, #20
    4506:	b2da      	uxtb	r2, r3
    4508:	69fb      	ldr	r3, [r7, #28]
    450a:	70da      	strb	r2, [r3, #3]
		f->clk100ns = CLK100NS;
    450c:	4b4f      	ldr	r3, [pc, #316]	; (464c <enqueue+0x184>)
    450e:	681b      	ldr	r3, [r3, #0]
    4510:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4514:	f640 4235 	movw	r2, #3125	; 0xc35
    4518:	fb02 f203 	mul.w	r2, r2, r3
    451c:	4b4c      	ldr	r3, [pc, #304]	; (4650 <enqueue+0x188>)
    451e:	681b      	ldr	r3, [r3, #0]
    4520:	441a      	add	r2, r3
    4522:	69fb      	ldr	r3, [r7, #28]
    4524:	605a      	str	r2, [r3, #4]
    4526:	e008      	b.n	453a <enqueue+0x72>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    4528:	4b4a      	ldr	r3, [pc, #296]	; (4654 <enqueue+0x18c>)
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	b2da      	uxtb	r2, r3
    452e:	69fb      	ldr	r3, [r7, #28]
    4530:	70da      	strb	r2, [r3, #3]
		f->clk100ns = idle_buf_clk100ns;
    4532:	4b49      	ldr	r3, [pc, #292]	; (4658 <enqueue+0x190>)
    4534:	681a      	ldr	r2, [r3, #0]
    4536:	69fb      	ldr	r3, [r7, #28]
    4538:	605a      	str	r2, [r3, #4]
	}
	f->channel = idle_buf_channel - 2402;
    453a:	4b48      	ldr	r3, [pc, #288]	; (465c <enqueue+0x194>)
    453c:	881b      	ldrh	r3, [r3, #0]
    453e:	b29b      	uxth	r3, r3
    4540:	b2db      	uxtb	r3, r3
    4542:	3b62      	subs	r3, #98	; 0x62
    4544:	b2da      	uxtb	r2, r3
    4546:	69fb      	ldr	r3, [r7, #28]
    4548:	709a      	strb	r2, [r3, #2]
	f->rssi_min = rssi_min;
    454a:	4b45      	ldr	r3, [pc, #276]	; (4660 <enqueue+0x198>)
    454c:	781b      	ldrb	r3, [r3, #0]
    454e:	b2da      	uxtb	r2, r3
    4550:	69fb      	ldr	r3, [r7, #28]
    4552:	725a      	strb	r2, [r3, #9]
	f->rssi_max = rssi_max;
    4554:	4b43      	ldr	r3, [pc, #268]	; (4664 <enqueue+0x19c>)
    4556:	781b      	ldrb	r3, [r3, #0]
    4558:	b2da      	uxtb	r2, r3
    455a:	69fb      	ldr	r3, [r7, #28]
    455c:	721a      	strb	r2, [r3, #8]
	if (hop_mode != HOP_NONE)
    455e:	4b42      	ldr	r3, [pc, #264]	; (4668 <enqueue+0x1a0>)
    4560:	781b      	ldrb	r3, [r3, #0]
    4562:	2b00      	cmp	r3, #0
    4564:	d009      	beq.n	457a <enqueue+0xb2>
	//	f->rssi_avg = (int8_t)((rssi_iir[idle_buf_channel-2402] + 128)/256);
		f->rssi_avg = rssi_sum/rssi_count;
    4566:	4b41      	ldr	r3, [pc, #260]	; (466c <enqueue+0x1a4>)
    4568:	681b      	ldr	r3, [r3, #0]
    456a:	4a41      	ldr	r2, [pc, #260]	; (4670 <enqueue+0x1a8>)
    456c:	7812      	ldrb	r2, [r2, #0]
    456e:	fb93 f3f2 	sdiv	r3, r3, r2
    4572:	b2da      	uxtb	r2, r3
    4574:	69fb      	ldr	r3, [r7, #28]
    4576:	729a      	strb	r2, [r3, #10]
    4578:	e008      	b.n	458c <enqueue+0xc4>
	else
		//f->rssi_avg = (int8_t)((rssi_iir[0] + 128)/256);
		f->rssi_avg = rssi_sum/rssi_count;
    457a:	4b3c      	ldr	r3, [pc, #240]	; (466c <enqueue+0x1a4>)
    457c:	681b      	ldr	r3, [r3, #0]
    457e:	4a3c      	ldr	r2, [pc, #240]	; (4670 <enqueue+0x1a8>)
    4580:	7812      	ldrb	r2, [r2, #0]
    4582:	fb93 f3f2 	sdiv	r3, r3, r2
    4586:	b2da      	uxtb	r2, r3
    4588:	69fb      	ldr	r3, [r7, #28]
    458a:	729a      	strb	r2, [r3, #10]
	f->rssi_count = rssi_count;
    458c:	4b38      	ldr	r3, [pc, #224]	; (4670 <enqueue+0x1a8>)
    458e:	781a      	ldrb	r2, [r3, #0]
    4590:	69fb      	ldr	r3, [r7, #28]
    4592:	72da      	strb	r2, [r3, #11]

	USRLED_SET;
    4594:	4b37      	ldr	r3, [pc, #220]	; (4674 <enqueue+0x1ac>)
    4596:	2202      	movs	r2, #2
    4598:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    459a:	69fb      	ldr	r3, [r7, #28]
    459c:	330e      	adds	r3, #14
    459e:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    45a0:	683b      	ldr	r3, [r7, #0]
    45a2:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    45a4:	697b      	ldr	r3, [r7, #20]
    45a6:	681a      	ldr	r2, [r3, #0]
    45a8:	69bb      	ldr	r3, [r7, #24]
    45aa:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    45ac:	69bb      	ldr	r3, [r7, #24]
    45ae:	3304      	adds	r3, #4
    45b0:	697a      	ldr	r2, [r7, #20]
    45b2:	6852      	ldr	r2, [r2, #4]
    45b4:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    45b6:	69bb      	ldr	r3, [r7, #24]
    45b8:	3308      	adds	r3, #8
    45ba:	697a      	ldr	r2, [r7, #20]
    45bc:	6892      	ldr	r2, [r2, #8]
    45be:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    45c0:	69bb      	ldr	r3, [r7, #24]
    45c2:	330c      	adds	r3, #12
    45c4:	697a      	ldr	r2, [r7, #20]
    45c6:	68d2      	ldr	r2, [r2, #12]
    45c8:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    45ca:	69bb      	ldr	r3, [r7, #24]
    45cc:	3310      	adds	r3, #16
    45ce:	697a      	ldr	r2, [r7, #20]
    45d0:	6912      	ldr	r2, [r2, #16]
    45d2:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    45d4:	69bb      	ldr	r3, [r7, #24]
    45d6:	3314      	adds	r3, #20
    45d8:	697a      	ldr	r2, [r7, #20]
    45da:	6952      	ldr	r2, [r2, #20]
    45dc:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    45de:	69bb      	ldr	r3, [r7, #24]
    45e0:	3318      	adds	r3, #24
    45e2:	697a      	ldr	r2, [r7, #20]
    45e4:	6992      	ldr	r2, [r2, #24]
    45e6:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    45e8:	69bb      	ldr	r3, [r7, #24]
    45ea:	331c      	adds	r3, #28
    45ec:	697a      	ldr	r2, [r7, #20]
    45ee:	69d2      	ldr	r2, [r2, #28]
    45f0:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    45f2:	69bb      	ldr	r3, [r7, #24]
    45f4:	3320      	adds	r3, #32
    45f6:	697a      	ldr	r2, [r7, #20]
    45f8:	6a12      	ldr	r2, [r2, #32]
    45fa:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    45fc:	69bb      	ldr	r3, [r7, #24]
    45fe:	3324      	adds	r3, #36	; 0x24
    4600:	697a      	ldr	r2, [r7, #20]
    4602:	6a52      	ldr	r2, [r2, #36]	; 0x24
    4604:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    4606:	69bb      	ldr	r3, [r7, #24]
    4608:	3328      	adds	r3, #40	; 0x28
    460a:	697a      	ldr	r2, [r7, #20]
    460c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    460e:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    4610:	69bb      	ldr	r3, [r7, #24]
    4612:	332c      	adds	r3, #44	; 0x2c
    4614:	697a      	ldr	r2, [r7, #20]
    4616:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4618:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    461a:	69fb      	ldr	r3, [r7, #28]
    461c:	330e      	adds	r3, #14
    461e:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    4620:	683b      	ldr	r3, [r7, #0]
    4622:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    4624:	693b      	ldr	r3, [r7, #16]
    4626:	3330      	adds	r3, #48	; 0x30
    4628:	68fa      	ldr	r2, [r7, #12]
    462a:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    462c:	801a      	strh	r2, [r3, #0]

	f->status = status;
    462e:	4b06      	ldr	r3, [pc, #24]	; (4648 <enqueue+0x180>)
    4630:	781b      	ldrb	r3, [r3, #0]
    4632:	b2da      	uxtb	r2, r3
    4634:	69fb      	ldr	r3, [r7, #28]
    4636:	705a      	strb	r2, [r3, #1]
	status = 0;
    4638:	4b03      	ldr	r3, [pc, #12]	; (4648 <enqueue+0x180>)
    463a:	2200      	movs	r2, #0
    463c:	701a      	strb	r2, [r3, #0]

	return 1;
    463e:	2301      	movs	r3, #1
}
    4640:	4618      	mov	r0, r3
    4642:	3720      	adds	r7, #32
    4644:	46bd      	mov	sp, r7
    4646:	bd80      	pop	{r7, pc}
    4648:	10000a48 	.word	0x10000a48
    464c:	10000be4 	.word	0x10000be4
    4650:	40004008 	.word	0x40004008
    4654:	10001028 	.word	0x10001028
    4658:	10000bc8 	.word	0x10000bc8
    465c:	10000988 	.word	0x10000988
    4660:	10000bb8 	.word	0x10000bb8
    4664:	10000b04 	.word	0x10000b04
    4668:	1000097c 	.word	0x1000097c
    466c:	10000a4c 	.word	0x10000a4c
    4670:	10000a49 	.word	0x10000a49
    4674:	2009c038 	.word	0x2009c038

00004678 <enqueue_with_ts>:

int enqueue_with_ts(u8 type, u8 *buf, u32 ts)
{
    4678:	b580      	push	{r7, lr}
    467a:	b08a      	sub	sp, #40	; 0x28
    467c:	af00      	add	r7, sp, #0
    467e:	4603      	mov	r3, r0
    4680:	60b9      	str	r1, [r7, #8]
    4682:	607a      	str	r2, [r7, #4]
    4684:	73fb      	strb	r3, [r7, #15]
	usb_pkt_rx *f = usb_enqueue();
    4686:	f003 ffc5 	bl	8614 <usb_enqueue>
    468a:	6278      	str	r0, [r7, #36]	; 0x24

	/* fail if queue is full */
	if (f == NULL) {
    468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    468e:	2b00      	cmp	r3, #0
    4690:	d109      	bne.n	46a6 <enqueue_with_ts+0x2e>
		status |= FIFO_OVERFLOW;
    4692:	4b3c      	ldr	r3, [pc, #240]	; (4784 <enqueue_with_ts+0x10c>)
    4694:	781b      	ldrb	r3, [r3, #0]
    4696:	b2db      	uxtb	r3, r3
    4698:	f043 0304 	orr.w	r3, r3, #4
    469c:	b2da      	uxtb	r2, r3
    469e:	4b39      	ldr	r3, [pc, #228]	; (4784 <enqueue_with_ts+0x10c>)
    46a0:	701a      	strb	r2, [r3, #0]
		return 0;
    46a2:	2300      	movs	r3, #0
    46a4:	e069      	b.n	477a <enqueue_with_ts+0x102>
	}

	f->clkn_high = 0;
    46a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46a8:	2200      	movs	r2, #0
    46aa:	70da      	strb	r2, [r3, #3]
	f->clk100ns = ts;
    46ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46ae:	687a      	ldr	r2, [r7, #4]
    46b0:	605a      	str	r2, [r3, #4]

	f->channel = channel - 2402;
    46b2:	4b35      	ldr	r3, [pc, #212]	; (4788 <enqueue_with_ts+0x110>)
    46b4:	881b      	ldrh	r3, [r3, #0]
    46b6:	b29b      	uxth	r3, r3
    46b8:	b2db      	uxtb	r3, r3
    46ba:	3b62      	subs	r3, #98	; 0x62
    46bc:	b2da      	uxtb	r2, r3
    46be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46c0:	709a      	strb	r2, [r3, #2]
	f->rssi_avg = 0;
    46c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46c4:	2200      	movs	r2, #0
    46c6:	729a      	strb	r2, [r3, #10]
	f->rssi_count = 0;
    46c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46ca:	2200      	movs	r2, #0
    46cc:	72da      	strb	r2, [r3, #11]

	USRLED_SET;
    46ce:	4b2f      	ldr	r3, [pc, #188]	; (478c <enqueue_with_ts+0x114>)
    46d0:	2202      	movs	r2, #2
    46d2:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    46d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46d6:	330e      	adds	r3, #14
    46d8:	623b      	str	r3, [r7, #32]
	u32 *p2 = (u32 *)buf;
    46da:	68bb      	ldr	r3, [r7, #8]
    46dc:	61fb      	str	r3, [r7, #28]
	p1[0] = p2[0];
    46de:	69fb      	ldr	r3, [r7, #28]
    46e0:	681a      	ldr	r2, [r3, #0]
    46e2:	6a3b      	ldr	r3, [r7, #32]
    46e4:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    46e6:	6a3b      	ldr	r3, [r7, #32]
    46e8:	3304      	adds	r3, #4
    46ea:	69fa      	ldr	r2, [r7, #28]
    46ec:	6852      	ldr	r2, [r2, #4]
    46ee:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    46f0:	6a3b      	ldr	r3, [r7, #32]
    46f2:	3308      	adds	r3, #8
    46f4:	69fa      	ldr	r2, [r7, #28]
    46f6:	6892      	ldr	r2, [r2, #8]
    46f8:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    46fa:	6a3b      	ldr	r3, [r7, #32]
    46fc:	330c      	adds	r3, #12
    46fe:	69fa      	ldr	r2, [r7, #28]
    4700:	68d2      	ldr	r2, [r2, #12]
    4702:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    4704:	6a3b      	ldr	r3, [r7, #32]
    4706:	3310      	adds	r3, #16
    4708:	69fa      	ldr	r2, [r7, #28]
    470a:	6912      	ldr	r2, [r2, #16]
    470c:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    470e:	6a3b      	ldr	r3, [r7, #32]
    4710:	3314      	adds	r3, #20
    4712:	69fa      	ldr	r2, [r7, #28]
    4714:	6952      	ldr	r2, [r2, #20]
    4716:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    4718:	6a3b      	ldr	r3, [r7, #32]
    471a:	3318      	adds	r3, #24
    471c:	69fa      	ldr	r2, [r7, #28]
    471e:	6992      	ldr	r2, [r2, #24]
    4720:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    4722:	6a3b      	ldr	r3, [r7, #32]
    4724:	331c      	adds	r3, #28
    4726:	69fa      	ldr	r2, [r7, #28]
    4728:	69d2      	ldr	r2, [r2, #28]
    472a:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    472c:	6a3b      	ldr	r3, [r7, #32]
    472e:	3320      	adds	r3, #32
    4730:	69fa      	ldr	r2, [r7, #28]
    4732:	6a12      	ldr	r2, [r2, #32]
    4734:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    4736:	6a3b      	ldr	r3, [r7, #32]
    4738:	3324      	adds	r3, #36	; 0x24
    473a:	69fa      	ldr	r2, [r7, #28]
    473c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    473e:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    4740:	6a3b      	ldr	r3, [r7, #32]
    4742:	3328      	adds	r3, #40	; 0x28
    4744:	69fa      	ldr	r2, [r7, #28]
    4746:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4748:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    474a:	6a3b      	ldr	r3, [r7, #32]
    474c:	332c      	adds	r3, #44	; 0x2c
    474e:	69fa      	ldr	r2, [r7, #28]
    4750:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4752:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    4754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4756:	330e      	adds	r3, #14
    4758:	61bb      	str	r3, [r7, #24]
	u16 *p4 = (u16 *)buf;
    475a:	68bb      	ldr	r3, [r7, #8]
    475c:	617b      	str	r3, [r7, #20]
	p3[24] = p4[24];
    475e:	69bb      	ldr	r3, [r7, #24]
    4760:	3330      	adds	r3, #48	; 0x30
    4762:	697a      	ldr	r2, [r7, #20]
    4764:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    4766:	801a      	strh	r2, [r3, #0]

	f->status = status;
    4768:	4b06      	ldr	r3, [pc, #24]	; (4784 <enqueue_with_ts+0x10c>)
    476a:	781b      	ldrb	r3, [r3, #0]
    476c:	b2da      	uxtb	r2, r3
    476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4770:	705a      	strb	r2, [r3, #1]
	status = 0;
    4772:	4b04      	ldr	r3, [pc, #16]	; (4784 <enqueue_with_ts+0x10c>)
    4774:	2200      	movs	r2, #0
    4776:	701a      	strb	r2, [r3, #0]

	return 1;
    4778:	2301      	movs	r3, #1
}
    477a:	4618      	mov	r0, r3
    477c:	3728      	adds	r7, #40	; 0x28
    477e:	46bd      	mov	sp, r7
    4780:	bd80      	pop	{r7, pc}
    4782:	bf00      	nop
    4784:	10000a48 	.word	0x10000a48
    4788:	1000049c 	.word	0x1000049c
    478c:	2009c038 	.word	0x2009c038

00004790 <cs_threshold_calc_and_set>:

static void cs_threshold_calc_and_set(void)
{
    4790:	b580      	push	{r7, lr}
    4792:	b082      	sub	sp, #8
    4794:	af00      	add	r7, sp, #0

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    4796:	4b17      	ldr	r3, [pc, #92]	; (47f4 <cs_threshold_calc_and_set+0x64>)
    4798:	781b      	ldrb	r3, [r3, #0]
    479a:	2b00      	cmp	r3, #0
    479c:	d01d      	beq.n	47da <cs_threshold_calc_and_set+0x4a>
    479e:	4b16      	ldr	r3, [pc, #88]	; (47f8 <cs_threshold_calc_and_set+0x68>)
    47a0:	781b      	ldrb	r3, [r3, #0]
    47a2:	b25b      	sxtb	r3, r3
    47a4:	2b00      	cmp	r3, #0
    47a6:	dd18      	ble.n	47da <cs_threshold_calc_and_set+0x4a>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
    47a8:	4b14      	ldr	r3, [pc, #80]	; (47fc <cs_threshold_calc_and_set+0x6c>)
    47aa:	881b      	ldrh	r3, [r3, #0]
    47ac:	b29b      	uxth	r3, r3
    47ae:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    47b2:	4a13      	ldr	r2, [pc, #76]	; (4800 <cs_threshold_calc_and_set+0x70>)
    47b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    47b8:	b21b      	sxth	r3, r3
    47ba:	3380      	adds	r3, #128	; 0x80
    47bc:	2b00      	cmp	r3, #0
    47be:	da00      	bge.n	47c2 <cs_threshold_calc_and_set+0x32>
    47c0:	33ff      	adds	r3, #255	; 0xff
    47c2:	121b      	asrs	r3, r3, #8
    47c4:	71bb      	strb	r3, [r7, #6]
		level = rssi - 54 + cs_threshold_req;
    47c6:	79ba      	ldrb	r2, [r7, #6]
    47c8:	4b0b      	ldr	r3, [pc, #44]	; (47f8 <cs_threshold_calc_and_set+0x68>)
    47ca:	781b      	ldrb	r3, [r3, #0]
    47cc:	b2db      	uxtb	r3, r3
    47ce:	4413      	add	r3, r2
    47d0:	b2db      	uxtb	r3, r3
    47d2:	3b36      	subs	r3, #54	; 0x36
    47d4:	b2db      	uxtb	r3, r3
    47d6:	71fb      	strb	r3, [r7, #7]

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    47d8:	e002      	b.n	47e0 <cs_threshold_calc_and_set+0x50>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
		level = rssi - 54 + cs_threshold_req;
	}
	else {
		level = cs_threshold_req;
    47da:	4b07      	ldr	r3, [pc, #28]	; (47f8 <cs_threshold_calc_and_set+0x68>)
    47dc:	781b      	ldrb	r3, [r3, #0]
    47de:	71fb      	strb	r3, [r7, #7]
	}
	cs_threshold_set(level, CS_SAMPLES_4);
    47e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    47e4:	4618      	mov	r0, r3
    47e6:	2103      	movs	r1, #3
    47e8:	f7ff fe28 	bl	443c <cs_threshold_set>
}
    47ec:	3708      	adds	r7, #8
    47ee:	46bd      	mov	sp, r7
    47f0:	bd80      	pop	{r7, pc}
    47f2:	bf00      	nop
    47f4:	1000097c 	.word	0x1000097c
    47f8:	1000044c 	.word	0x1000044c
    47fc:	1000049c 	.word	0x1000049c
    4800:	100009a0 	.word	0x100009a0

00004804 <cs_trigger_enable>:
/* CS comes from CC2400 GIO6, which is LPC P2.2, active low. GPIO
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
static void cs_trigger_enable(void)
{
    4804:	b480      	push	{r7}
    4806:	af00      	add	r7, sp, #0
	cs_trigger = 0;
    4808:	4b09      	ldr	r3, [pc, #36]	; (4830 <cs_trigger_enable+0x2c>)
    480a:	2200      	movs	r2, #0
    480c:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    480e:	4b09      	ldr	r3, [pc, #36]	; (4834 <cs_trigger_enable+0x30>)
    4810:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4814:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4816:	4b08      	ldr	r3, [pc, #32]	; (4838 <cs_trigger_enable+0x34>)
    4818:	2204      	movs	r2, #4
    481a:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    481c:	4a07      	ldr	r2, [pc, #28]	; (483c <cs_trigger_enable+0x38>)
    481e:	4b07      	ldr	r3, [pc, #28]	; (483c <cs_trigger_enable+0x38>)
    4820:	681b      	ldr	r3, [r3, #0]
    4822:	f043 0304 	orr.w	r3, r3, #4
    4826:	6013      	str	r3, [r2, #0]
}
    4828:	46bd      	mov	sp, r7
    482a:	f85d 7b04 	ldr.w	r7, [sp], #4
    482e:	4770      	bx	lr
    4830:	100010b0 	.word	0x100010b0
    4834:	e000e100 	.word	0xe000e100
    4838:	400280ac 	.word	0x400280ac
    483c:	400280b4 	.word	0x400280b4

00004840 <cs_trigger_disable>:

static void cs_trigger_disable(void)
{
    4840:	b480      	push	{r7}
    4842:	af00      	add	r7, sp, #0
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    4844:	4a09      	ldr	r2, [pc, #36]	; (486c <cs_trigger_disable+0x2c>)
    4846:	4b09      	ldr	r3, [pc, #36]	; (486c <cs_trigger_disable+0x2c>)
    4848:	681b      	ldr	r3, [r3, #0]
    484a:	f023 0304 	bic.w	r3, r3, #4
    484e:	6013      	str	r3, [r2, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4850:	4b07      	ldr	r3, [pc, #28]	; (4870 <cs_trigger_disable+0x30>)
    4852:	2204      	movs	r2, #4
    4854:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_EINT3;
    4856:	4b07      	ldr	r3, [pc, #28]	; (4874 <cs_trigger_disable+0x34>)
    4858:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    485c:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    485e:	4b06      	ldr	r3, [pc, #24]	; (4878 <cs_trigger_disable+0x38>)
    4860:	2200      	movs	r2, #0
    4862:	701a      	strb	r2, [r3, #0]
}
    4864:	46bd      	mov	sp, r7
    4866:	f85d 7b04 	ldr.w	r7, [sp], #4
    486a:	4770      	bx	lr
    486c:	400280b4 	.word	0x400280b4
    4870:	400280ac 	.word	0x400280ac
    4874:	e000e180 	.word	0xe000e180
    4878:	100010b0 	.word	0x100010b0

0000487c <vendor_request_handler>:

static int vendor_request_handler(u8 request, u16 *request_params, u8 *data, int *data_len)
{
    487c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4880:	b095      	sub	sp, #84	; 0x54
    4882:	af00      	add	r7, sp, #0
    4884:	60b9      	str	r1, [r7, #8]
    4886:	607a      	str	r2, [r7, #4]
    4888:	603b      	str	r3, [r7, #0]
    488a:	4603      	mov	r3, r0
    488c:	73fb      	strb	r3, [r7, #15]
	u64 ac_copy;
	int i; // loop counter
	u32 clock;
	int clock_offset;
	u8 length; // string length
	usb_pkt_rx *p = NULL;
    488e:	2300      	movs	r3, #0
    4890:	647b      	str	r3, [r7, #68]	; 0x44
	u16 reg_val;

	switch (request) {
    4892:	7bfb      	ldrb	r3, [r7, #15]
    4894:	2b3c      	cmp	r3, #60	; 0x3c
    4896:	f200 8551 	bhi.w	533c <vendor_request_handler+0xac0>
    489a:	a201      	add	r2, pc, #4	; (adr r2, 48a0 <vendor_request_handler+0x24>)
    489c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    48a0:	00004995 	.word	0x00004995
    48a4:	0000499f 	.word	0x0000499f
    48a8:	0000533d 	.word	0x0000533d
    48ac:	000049af 	.word	0x000049af
    48b0:	000049d1 	.word	0x000049d1
    48b4:	000049ed 	.word	0x000049ed
    48b8:	00004a0f 	.word	0x00004a0f
    48bc:	00004a2b 	.word	0x00004a2b
    48c0:	00004a4d 	.word	0x00004a4d
    48c4:	00004a6d 	.word	0x00004a6d
    48c8:	00004a8f 	.word	0x00004a8f
    48cc:	00004d33 	.word	0x00004d33
    48d0:	00004d59 	.word	0x00004d59
    48d4:	00004b05 	.word	0x00004b05
    48d8:	00004b0f 	.word	0x00004b0f
    48dc:	00004aaf 	.word	0x00004aaf
    48e0:	00004bed 	.word	0x00004bed
    48e4:	00004c0d 	.word	0x00004c0d
    48e8:	00004c45 	.word	0x00004c45
    48ec:	00004c65 	.word	0x00004c65
    48f0:	00004c81 	.word	0x00004c81
    48f4:	00004d0d 	.word	0x00004d0d
    48f8:	00004d15 	.word	0x00004d15
    48fc:	00004d27 	.word	0x00004d27
    4900:	00004de3 	.word	0x00004de3
    4904:	00004e01 	.word	0x00004e01
    4908:	0000533d 	.word	0x0000533d
    490c:	00004e0d 	.word	0x00004e0d
    4910:	00004c89 	.word	0x00004c89
    4914:	00004ca5 	.word	0x00004ca5
    4918:	00004ccd 	.word	0x00004ccd
    491c:	00004cc5 	.word	0x00004cc5
    4920:	00004cd5 	.word	0x00004cd5
    4924:	00004ed1 	.word	0x00004ed1
    4928:	00004e69 	.word	0x00004e69
    492c:	00004f45 	.word	0x00004f45
    4930:	00004f53 	.word	0x00004f53
    4934:	00004f63 	.word	0x00004f63
    4938:	00004f75 	.word	0x00004f75
    493c:	00005041 	.word	0x00005041
    4940:	00005087 	.word	0x00005087
    4944:	00005115 	.word	0x00005115
    4948:	00005149 	.word	0x00005149
    494c:	0000516b 	.word	0x0000516b
    4950:	000051c3 	.word	0x000051c3
    4954:	00005341 	.word	0x00005341
    4958:	000051f5 	.word	0x000051f5
    495c:	0000520b 	.word	0x0000520b
    4960:	00005227 	.word	0x00005227
    4964:	0000523d 	.word	0x0000523d
    4968:	00005269 	.word	0x00005269
    496c:	000050b9 	.word	0x000050b9
    4970:	000050eb 	.word	0x000050eb
    4974:	00005285 	.word	0x00005285
    4978:	000052c9 	.word	0x000052c9
    497c:	00004f13 	.word	0x00004f13
    4980:	000052db 	.word	0x000052db
    4984:	0000533d 	.word	0x0000533d
    4988:	000052b3 	.word	0x000052b3
    498c:	0000531f 	.word	0x0000531f
    4990:	0000532b 	.word	0x0000532b

	case UBERTOOTH_PING:
		*data_len = 0;
    4994:	683b      	ldr	r3, [r7, #0]
    4996:	2200      	movs	r2, #0
    4998:	601a      	str	r2, [r3, #0]
		break;
    499a:	f000 bcd2 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    499e:	4ba1      	ldr	r3, [pc, #644]	; (4c24 <vendor_request_handler+0x3a8>)
    49a0:	2201      	movs	r2, #1
    49a2:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    49a4:	683b      	ldr	r3, [r7, #0]
    49a6:	2200      	movs	r2, #0
    49a8:	601a      	str	r2, [r3, #0]
		break;
    49aa:	f000 bcca 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    49ae:	4b9e      	ldr	r3, [pc, #632]	; (4c28 <vendor_request_handler+0x3ac>)
    49b0:	681b      	ldr	r3, [r3, #0]
    49b2:	f003 0302 	and.w	r3, r3, #2
    49b6:	2b00      	cmp	r3, #0
    49b8:	bf14      	ite	ne
    49ba:	2301      	movne	r3, #1
    49bc:	2300      	moveq	r3, #0
    49be:	b2db      	uxtb	r3, r3
    49c0:	461a      	mov	r2, r3
    49c2:	687b      	ldr	r3, [r7, #4]
    49c4:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    49c6:	683b      	ldr	r3, [r7, #0]
    49c8:	2201      	movs	r2, #1
    49ca:	601a      	str	r2, [r3, #0]
		break;
    49cc:	f000 bcb9 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    49d0:	68bb      	ldr	r3, [r7, #8]
    49d2:	881b      	ldrh	r3, [r3, #0]
    49d4:	2b00      	cmp	r3, #0
    49d6:	d004      	beq.n	49e2 <vendor_request_handler+0x166>
			USRLED_SET;
    49d8:	4b94      	ldr	r3, [pc, #592]	; (4c2c <vendor_request_handler+0x3b0>)
    49da:	2202      	movs	r2, #2
    49dc:	601a      	str	r2, [r3, #0]
		else
			USRLED_CLR;
		break;
    49de:	f000 bcb0 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
			USRLED_SET;
		else
			USRLED_CLR;
    49e2:	4b93      	ldr	r3, [pc, #588]	; (4c30 <vendor_request_handler+0x3b4>)
    49e4:	2202      	movs	r2, #2
    49e6:	601a      	str	r2, [r3, #0]
		break;
    49e8:	f000 bcab 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    49ec:	4b8e      	ldr	r3, [pc, #568]	; (4c28 <vendor_request_handler+0x3ac>)
    49ee:	681b      	ldr	r3, [r3, #0]
    49f0:	f003 0310 	and.w	r3, r3, #16
    49f4:	2b00      	cmp	r3, #0
    49f6:	bf14      	ite	ne
    49f8:	2301      	movne	r3, #1
    49fa:	2300      	moveq	r3, #0
    49fc:	b2db      	uxtb	r3, r3
    49fe:	461a      	mov	r2, r3
    4a00:	687b      	ldr	r3, [r7, #4]
    4a02:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4a04:	683b      	ldr	r3, [r7, #0]
    4a06:	2201      	movs	r2, #1
    4a08:	601a      	str	r2, [r3, #0]
		break;
    4a0a:	f000 bc9a 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    4a0e:	68bb      	ldr	r3, [r7, #8]
    4a10:	881b      	ldrh	r3, [r3, #0]
    4a12:	2b00      	cmp	r3, #0
    4a14:	d004      	beq.n	4a20 <vendor_request_handler+0x1a4>
			RXLED_SET;
    4a16:	4b85      	ldr	r3, [pc, #532]	; (4c2c <vendor_request_handler+0x3b0>)
    4a18:	2210      	movs	r2, #16
    4a1a:	601a      	str	r2, [r3, #0]
		else
			RXLED_CLR;
		break;
    4a1c:	f000 bc91 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
			RXLED_SET;
		else
			RXLED_CLR;
    4a20:	4b83      	ldr	r3, [pc, #524]	; (4c30 <vendor_request_handler+0x3b4>)
    4a22:	2210      	movs	r2, #16
    4a24:	601a      	str	r2, [r3, #0]
		break;
    4a26:	f000 bc8c 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    4a2a:	4b7f      	ldr	r3, [pc, #508]	; (4c28 <vendor_request_handler+0x3ac>)
    4a2c:	681b      	ldr	r3, [r3, #0]
    4a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4a32:	2b00      	cmp	r3, #0
    4a34:	bf14      	ite	ne
    4a36:	2301      	movne	r3, #1
    4a38:	2300      	moveq	r3, #0
    4a3a:	b2db      	uxtb	r3, r3
    4a3c:	461a      	mov	r2, r3
    4a3e:	687b      	ldr	r3, [r7, #4]
    4a40:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4a42:	683b      	ldr	r3, [r7, #0]
    4a44:	2201      	movs	r2, #1
    4a46:	601a      	str	r2, [r3, #0]
		break;
    4a48:	f000 bc7b 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    4a4c:	68bb      	ldr	r3, [r7, #8]
    4a4e:	881b      	ldrh	r3, [r3, #0]
    4a50:	2b00      	cmp	r3, #0
    4a52:	d005      	beq.n	4a60 <vendor_request_handler+0x1e4>
			TXLED_SET;
    4a54:	4b75      	ldr	r3, [pc, #468]	; (4c2c <vendor_request_handler+0x3b0>)
    4a56:	f44f 7280 	mov.w	r2, #256	; 0x100
    4a5a:	601a      	str	r2, [r3, #0]
		else
			TXLED_CLR;
		break;
    4a5c:	f000 bc71 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
			TXLED_SET;
		else
			TXLED_CLR;
    4a60:	4b73      	ldr	r3, [pc, #460]	; (4c30 <vendor_request_handler+0x3b4>)
    4a62:	f44f 7280 	mov.w	r2, #256	; 0x100
    4a66:	601a      	str	r2, [r3, #0]
		break;
    4a68:	f000 bc6b 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    4a6c:	4b6e      	ldr	r3, [pc, #440]	; (4c28 <vendor_request_handler+0x3ac>)
    4a6e:	681b      	ldr	r3, [r3, #0]
    4a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4a74:	2b00      	cmp	r3, #0
    4a76:	bf14      	ite	ne
    4a78:	2301      	movne	r3, #1
    4a7a:	2300      	moveq	r3, #0
    4a7c:	b2db      	uxtb	r3, r3
    4a7e:	461a      	mov	r2, r3
    4a80:	687b      	ldr	r3, [r7, #4]
    4a82:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4a84:	683b      	ldr	r3, [r7, #0]
    4a86:	2201      	movs	r2, #1
    4a88:	601a      	str	r2, [r3, #0]
		break;
    4a8a:	f000 bc5a 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    4a8e:	68bb      	ldr	r3, [r7, #8]
    4a90:	881b      	ldrh	r3, [r3, #0]
    4a92:	2b00      	cmp	r3, #0
    4a94:	d005      	beq.n	4aa2 <vendor_request_handler+0x226>
			CC1V8_SET;
    4a96:	4b65      	ldr	r3, [pc, #404]	; (4c2c <vendor_request_handler+0x3b0>)
    4a98:	f44f 7200 	mov.w	r2, #512	; 0x200
    4a9c:	601a      	str	r2, [r3, #0]
		else
			CC1V8_CLR;
		break;
    4a9e:	f000 bc50 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
			CC1V8_SET;
		else
			CC1V8_CLR;
    4aa2:	4b63      	ldr	r3, [pc, #396]	; (4c30 <vendor_request_handler+0x3b4>)
    4aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
    4aa8:	601a      	str	r2, [r3, #0]
		break;
    4aaa:	f000 bc4a 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_PARTNUM:
		command[0] = 54; /* read part number */
    4aae:	2336      	movs	r3, #54	; 0x36
    4ab0:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4ab2:	4b60      	ldr	r3, [pc, #384]	; (4c34 <vendor_request_handler+0x3b8>)
    4ab4:	681b      	ldr	r3, [r3, #0]
    4ab6:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4aba:	f107 0210 	add.w	r2, r7, #16
    4abe:	4608      	mov	r0, r1
    4ac0:	4611      	mov	r1, r2
    4ac2:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4ac4:	693b      	ldr	r3, [r7, #16]
    4ac6:	b2da      	uxtb	r2, r3
    4ac8:	687b      	ldr	r3, [r7, #4]
    4aca:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4acc:	687b      	ldr	r3, [r7, #4]
    4ace:	3301      	adds	r3, #1
    4ad0:	697a      	ldr	r2, [r7, #20]
    4ad2:	b2d2      	uxtb	r2, r2
    4ad4:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4ad6:	687b      	ldr	r3, [r7, #4]
    4ad8:	3302      	adds	r3, #2
    4ada:	697a      	ldr	r2, [r7, #20]
    4adc:	0a12      	lsrs	r2, r2, #8
    4ade:	b2d2      	uxtb	r2, r2
    4ae0:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4ae2:	687b      	ldr	r3, [r7, #4]
    4ae4:	3303      	adds	r3, #3
    4ae6:	697a      	ldr	r2, [r7, #20]
    4ae8:	0c12      	lsrs	r2, r2, #16
    4aea:	b2d2      	uxtb	r2, r2
    4aec:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4aee:	687b      	ldr	r3, [r7, #4]
    4af0:	3304      	adds	r3, #4
    4af2:	697a      	ldr	r2, [r7, #20]
    4af4:	0e12      	lsrs	r2, r2, #24
    4af6:	b2d2      	uxtb	r2, r2
    4af8:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4afa:	683b      	ldr	r3, [r7, #0]
    4afc:	2205      	movs	r2, #5
    4afe:	601a      	str	r2, [r3, #0]
		break;
    4b00:	f000 bc1f 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
    4b04:	4b47      	ldr	r3, [pc, #284]	; (4c24 <vendor_request_handler+0x3a8>)
    4b06:	220b      	movs	r2, #11
    4b08:	701a      	strb	r2, [r3, #0]
		break;
    4b0a:	f000 bc1a 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_SERIAL:
		command[0] = 58; /* read device serial number */
    4b0e:	233a      	movs	r3, #58	; 0x3a
    4b10:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4b12:	4b48      	ldr	r3, [pc, #288]	; (4c34 <vendor_request_handler+0x3b8>)
    4b14:	681b      	ldr	r3, [r3, #0]
    4b16:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4b1a:	f107 0210 	add.w	r2, r7, #16
    4b1e:	4608      	mov	r0, r1
    4b20:	4611      	mov	r1, r2
    4b22:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4b24:	693b      	ldr	r3, [r7, #16]
    4b26:	b2da      	uxtb	r2, r3
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4b2c:	687b      	ldr	r3, [r7, #4]
    4b2e:	3301      	adds	r3, #1
    4b30:	697a      	ldr	r2, [r7, #20]
    4b32:	b2d2      	uxtb	r2, r2
    4b34:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4b36:	687b      	ldr	r3, [r7, #4]
    4b38:	3302      	adds	r3, #2
    4b3a:	697a      	ldr	r2, [r7, #20]
    4b3c:	0a12      	lsrs	r2, r2, #8
    4b3e:	b2d2      	uxtb	r2, r2
    4b40:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4b42:	687b      	ldr	r3, [r7, #4]
    4b44:	3303      	adds	r3, #3
    4b46:	697a      	ldr	r2, [r7, #20]
    4b48:	0c12      	lsrs	r2, r2, #16
    4b4a:	b2d2      	uxtb	r2, r2
    4b4c:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4b4e:	687b      	ldr	r3, [r7, #4]
    4b50:	3304      	adds	r3, #4
    4b52:	697a      	ldr	r2, [r7, #20]
    4b54:	0e12      	lsrs	r2, r2, #24
    4b56:	b2d2      	uxtb	r2, r2
    4b58:	701a      	strb	r2, [r3, #0]
		data[5] = result[2] & 0xFF;
    4b5a:	687b      	ldr	r3, [r7, #4]
    4b5c:	3305      	adds	r3, #5
    4b5e:	69ba      	ldr	r2, [r7, #24]
    4b60:	b2d2      	uxtb	r2, r2
    4b62:	701a      	strb	r2, [r3, #0]
		data[6] = (result[2] >> 8) & 0xFF;
    4b64:	687b      	ldr	r3, [r7, #4]
    4b66:	3306      	adds	r3, #6
    4b68:	69ba      	ldr	r2, [r7, #24]
    4b6a:	0a12      	lsrs	r2, r2, #8
    4b6c:	b2d2      	uxtb	r2, r2
    4b6e:	701a      	strb	r2, [r3, #0]
		data[7] = (result[2] >> 16) & 0xFF;
    4b70:	687b      	ldr	r3, [r7, #4]
    4b72:	3307      	adds	r3, #7
    4b74:	69ba      	ldr	r2, [r7, #24]
    4b76:	0c12      	lsrs	r2, r2, #16
    4b78:	b2d2      	uxtb	r2, r2
    4b7a:	701a      	strb	r2, [r3, #0]
		data[8] = (result[2] >> 24) & 0xFF;
    4b7c:	687b      	ldr	r3, [r7, #4]
    4b7e:	3308      	adds	r3, #8
    4b80:	69ba      	ldr	r2, [r7, #24]
    4b82:	0e12      	lsrs	r2, r2, #24
    4b84:	b2d2      	uxtb	r2, r2
    4b86:	701a      	strb	r2, [r3, #0]
		data[9] = result[3] & 0xFF;
    4b88:	687b      	ldr	r3, [r7, #4]
    4b8a:	3309      	adds	r3, #9
    4b8c:	69fa      	ldr	r2, [r7, #28]
    4b8e:	b2d2      	uxtb	r2, r2
    4b90:	701a      	strb	r2, [r3, #0]
		data[10] = (result[3] >> 8) & 0xFF;
    4b92:	687b      	ldr	r3, [r7, #4]
    4b94:	330a      	adds	r3, #10
    4b96:	69fa      	ldr	r2, [r7, #28]
    4b98:	0a12      	lsrs	r2, r2, #8
    4b9a:	b2d2      	uxtb	r2, r2
    4b9c:	701a      	strb	r2, [r3, #0]
		data[11] = (result[3] >> 16) & 0xFF;
    4b9e:	687b      	ldr	r3, [r7, #4]
    4ba0:	330b      	adds	r3, #11
    4ba2:	69fa      	ldr	r2, [r7, #28]
    4ba4:	0c12      	lsrs	r2, r2, #16
    4ba6:	b2d2      	uxtb	r2, r2
    4ba8:	701a      	strb	r2, [r3, #0]
		data[12] = (result[3] >> 24) & 0xFF;
    4baa:	687b      	ldr	r3, [r7, #4]
    4bac:	330c      	adds	r3, #12
    4bae:	69fa      	ldr	r2, [r7, #28]
    4bb0:	0e12      	lsrs	r2, r2, #24
    4bb2:	b2d2      	uxtb	r2, r2
    4bb4:	701a      	strb	r2, [r3, #0]
		data[13] = result[4] & 0xFF;
    4bb6:	687b      	ldr	r3, [r7, #4]
    4bb8:	330d      	adds	r3, #13
    4bba:	6a3a      	ldr	r2, [r7, #32]
    4bbc:	b2d2      	uxtb	r2, r2
    4bbe:	701a      	strb	r2, [r3, #0]
		data[14] = (result[4] >> 8) & 0xFF;
    4bc0:	687b      	ldr	r3, [r7, #4]
    4bc2:	330e      	adds	r3, #14
    4bc4:	6a3a      	ldr	r2, [r7, #32]
    4bc6:	0a12      	lsrs	r2, r2, #8
    4bc8:	b2d2      	uxtb	r2, r2
    4bca:	701a      	strb	r2, [r3, #0]
		data[15] = (result[4] >> 16) & 0xFF;
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	330f      	adds	r3, #15
    4bd0:	6a3a      	ldr	r2, [r7, #32]
    4bd2:	0c12      	lsrs	r2, r2, #16
    4bd4:	b2d2      	uxtb	r2, r2
    4bd6:	701a      	strb	r2, [r3, #0]
		data[16] = (result[4] >> 24) & 0xFF;
    4bd8:	687b      	ldr	r3, [r7, #4]
    4bda:	3310      	adds	r3, #16
    4bdc:	6a3a      	ldr	r2, [r7, #32]
    4bde:	0e12      	lsrs	r2, r2, #24
    4be0:	b2d2      	uxtb	r2, r2
    4be2:	701a      	strb	r2, [r3, #0]
		*data_len = 17;
    4be4:	683b      	ldr	r3, [r7, #0]
    4be6:	2211      	movs	r2, #17
    4be8:	601a      	str	r2, [r3, #0]
		break;
    4bea:	e3aa      	b.n	5342 <vendor_request_handler+0xac6>

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    4bec:	4b12      	ldr	r3, [pc, #72]	; (4c38 <vendor_request_handler+0x3bc>)
    4bee:	681b      	ldr	r3, [r3, #0]
    4bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4bf4:	2b00      	cmp	r3, #0
    4bf6:	bf14      	ite	ne
    4bf8:	2301      	movne	r3, #1
    4bfa:	2300      	moveq	r3, #0
    4bfc:	b2db      	uxtb	r3, r3
    4bfe:	461a      	mov	r2, r3
    4c00:	687b      	ldr	r3, [r7, #4]
    4c02:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c04:	683b      	ldr	r3, [r7, #0]
    4c06:	2201      	movs	r2, #1
    4c08:	601a      	str	r2, [r3, #0]
		break;
    4c0a:	e39a      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    4c0c:	68bb      	ldr	r3, [r7, #8]
    4c0e:	881b      	ldrh	r3, [r3, #0]
    4c10:	2b00      	cmp	r3, #0
    4c12:	d003      	beq.n	4c1c <vendor_request_handler+0x3a0>
			PAEN_SET;
    4c14:	4b09      	ldr	r3, [pc, #36]	; (4c3c <vendor_request_handler+0x3c0>)
    4c16:	2280      	movs	r2, #128	; 0x80
    4c18:	601a      	str	r2, [r3, #0]
		else
			PAEN_CLR;
		break;
    4c1a:	e392      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
			PAEN_SET;
		else
			PAEN_CLR;
    4c1c:	4b08      	ldr	r3, [pc, #32]	; (4c40 <vendor_request_handler+0x3c4>)
    4c1e:	2280      	movs	r2, #128	; 0x80
    4c20:	601a      	str	r2, [r3, #0]
		break;
    4c22:	e38e      	b.n	5342 <vendor_request_handler+0xac6>
    4c24:	10000a3f 	.word	0x10000a3f
    4c28:	2009c034 	.word	0x2009c034
    4c2c:	2009c038 	.word	0x2009c038
    4c30:	2009c03c 	.word	0x2009c03c
    4c34:	10000448 	.word	0x10000448
    4c38:	2009c054 	.word	0x2009c054
    4c3c:	2009c058 	.word	0x2009c058
    4c40:	2009c05c 	.word	0x2009c05c

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    4c44:	4b92      	ldr	r3, [pc, #584]	; (4e90 <vendor_request_handler+0x614>)
    4c46:	681b      	ldr	r3, [r3, #0]
    4c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4c4c:	2b00      	cmp	r3, #0
    4c4e:	bf14      	ite	ne
    4c50:	2301      	movne	r3, #1
    4c52:	2300      	moveq	r3, #0
    4c54:	b2db      	uxtb	r3, r3
    4c56:	461a      	mov	r2, r3
    4c58:	687b      	ldr	r3, [r7, #4]
    4c5a:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c5c:	683b      	ldr	r3, [r7, #0]
    4c5e:	2201      	movs	r2, #1
    4c60:	601a      	str	r2, [r3, #0]
		break;
    4c62:	e36e      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    4c64:	68bb      	ldr	r3, [r7, #8]
    4c66:	881b      	ldrh	r3, [r3, #0]
    4c68:	2b00      	cmp	r3, #0
    4c6a:	d004      	beq.n	4c76 <vendor_request_handler+0x3fa>
			HGM_SET;
    4c6c:	4b89      	ldr	r3, [pc, #548]	; (4e94 <vendor_request_handler+0x618>)
    4c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
    4c72:	601a      	str	r2, [r3, #0]
		else
			HGM_CLR;
		break;
    4c74:	e365      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
			HGM_SET;
		else
			HGM_CLR;
    4c76:	4b88      	ldr	r3, [pc, #544]	; (4e98 <vendor_request_handler+0x61c>)
    4c78:	f44f 7280 	mov.w	r2, #256	; 0x100
    4c7c:	601a      	str	r2, [r3, #0]
		break;
    4c7e:	e360      	b.n	5342 <vendor_request_handler+0xac6>
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    4c80:	4b86      	ldr	r3, [pc, #536]	; (4e9c <vendor_request_handler+0x620>)
    4c82:	2203      	movs	r2, #3
    4c84:	701a      	strb	r2, [r3, #0]
		break;
    4c86:	e35c      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    4c88:	2005      	movs	r0, #5
    4c8a:	f004 ff15 	bl	9ab8 <cc2400_get>
    4c8e:	4603      	mov	r3, r0
    4c90:	b2db      	uxtb	r3, r3
    4c92:	f003 0307 	and.w	r3, r3, #7
    4c96:	b2da      	uxtb	r2, r3
    4c98:	687b      	ldr	r3, [r7, #4]
    4c9a:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c9c:	683b      	ldr	r3, [r7, #0]
    4c9e:	2201      	movs	r2, #1
    4ca0:	601a      	str	r2, [r3, #0]
		break;
    4ca2:	e34e      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    4ca4:	68bb      	ldr	r3, [r7, #8]
    4ca6:	881b      	ldrh	r3, [r3, #0]
    4ca8:	2b07      	cmp	r3, #7
    4caa:	d809      	bhi.n	4cc0 <vendor_request_handler+0x444>
			cc2400_set(FREND, 8 | request_params[0]);
    4cac:	68bb      	ldr	r3, [r7, #8]
    4cae:	881b      	ldrh	r3, [r3, #0]
    4cb0:	f043 0308 	orr.w	r3, r3, #8
    4cb4:	b29b      	uxth	r3, r3
    4cb6:	2005      	movs	r0, #5
    4cb8:	4619      	mov	r1, r3
    4cba:	f004 ff13 	bl	9ae4 <cc2400_set>
		} else {
			return 0;
		}
		break;
    4cbe:	e340      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    4cc0:	2300      	movs	r3, #0
    4cc2:	e33f      	b.n	5344 <vendor_request_handler+0xac8>
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    4cc4:	4b75      	ldr	r3, [pc, #468]	; (4e9c <vendor_request_handler+0x620>)
    4cc6:	2205      	movs	r2, #5
    4cc8:	701a      	strb	r2, [r3, #0]
		break;
    4cca:	e33a      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    4ccc:	4b73      	ldr	r3, [pc, #460]	; (4e9c <vendor_request_handler+0x620>)
    4cce:	2206      	movs	r2, #6
    4cd0:	701a      	strb	r2, [r3, #0]
		break;
    4cd2:	e336      	b.n	5342 <vendor_request_handler+0xac6>
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    4cd4:	4b72      	ldr	r3, [pc, #456]	; (4ea0 <vendor_request_handler+0x624>)
    4cd6:	781a      	ldrb	r2, [r3, #0]
    4cd8:	687b      	ldr	r3, [r7, #4]
    4cda:	701a      	strb	r2, [r3, #0]
		data[1] = rr.request_pa;
    4cdc:	687b      	ldr	r3, [r7, #4]
    4cde:	3301      	adds	r3, #1
    4ce0:	4a6f      	ldr	r2, [pc, #444]	; (4ea0 <vendor_request_handler+0x624>)
    4ce2:	7852      	ldrb	r2, [r2, #1]
    4ce4:	701a      	strb	r2, [r3, #0]
		data[2] = rr.request_num;
    4ce6:	687b      	ldr	r3, [r7, #4]
    4ce8:	3302      	adds	r3, #2
    4cea:	4a6d      	ldr	r2, [pc, #436]	; (4ea0 <vendor_request_handler+0x624>)
    4cec:	7892      	ldrb	r2, [r2, #2]
    4cee:	701a      	strb	r2, [r3, #0]
		data[3] = rr.reply_pa;
    4cf0:	687b      	ldr	r3, [r7, #4]
    4cf2:	3303      	adds	r3, #3
    4cf4:	4a6a      	ldr	r2, [pc, #424]	; (4ea0 <vendor_request_handler+0x624>)
    4cf6:	78d2      	ldrb	r2, [r2, #3]
    4cf8:	701a      	strb	r2, [r3, #0]
		data[4] = rr.reply_num;
    4cfa:	687b      	ldr	r3, [r7, #4]
    4cfc:	3304      	adds	r3, #4
    4cfe:	4a68      	ldr	r2, [pc, #416]	; (4ea0 <vendor_request_handler+0x624>)
    4d00:	7912      	ldrb	r2, [r2, #4]
    4d02:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4d04:	683b      	ldr	r3, [r7, #0]
    4d06:	2205      	movs	r2, #5
    4d08:	601a      	str	r2, [r3, #0]
		break;
    4d0a:	e31a      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    4d0c:	4b63      	ldr	r3, [pc, #396]	; (4e9c <vendor_request_handler+0x620>)
    4d0e:	2200      	movs	r2, #0
    4d10:	701a      	strb	r2, [r3, #0]
		break;
    4d12:	e316      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    4d14:	4b63      	ldr	r3, [pc, #396]	; (4ea4 <vendor_request_handler+0x628>)
    4d16:	781b      	ldrb	r3, [r3, #0]
    4d18:	b2da      	uxtb	r2, r3
    4d1a:	687b      	ldr	r3, [r7, #4]
    4d1c:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4d1e:	683b      	ldr	r3, [r7, #0]
    4d20:	2201      	movs	r2, #1
    4d22:	601a      	str	r2, [r3, #0]
		break;
    4d24:	e30d      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    4d26:	68bb      	ldr	r3, [r7, #8]
    4d28:	881b      	ldrh	r3, [r3, #0]
    4d2a:	b2da      	uxtb	r2, r3
    4d2c:	4b5d      	ldr	r3, [pc, #372]	; (4ea4 <vendor_request_handler+0x628>)
    4d2e:	701a      	strb	r2, [r3, #0]
		break;
    4d30:	e307      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    4d32:	4b5d      	ldr	r3, [pc, #372]	; (4ea8 <vendor_request_handler+0x62c>)
    4d34:	881b      	ldrh	r3, [r3, #0]
    4d36:	b29b      	uxth	r3, r3
    4d38:	b2da      	uxtb	r2, r3
    4d3a:	687b      	ldr	r3, [r7, #4]
    4d3c:	701a      	strb	r2, [r3, #0]
		data[1] = (channel >> 8) & 0xFF;
    4d3e:	687b      	ldr	r3, [r7, #4]
    4d40:	3301      	adds	r3, #1
    4d42:	4a59      	ldr	r2, [pc, #356]	; (4ea8 <vendor_request_handler+0x62c>)
    4d44:	8812      	ldrh	r2, [r2, #0]
    4d46:	b292      	uxth	r2, r2
    4d48:	0a12      	lsrs	r2, r2, #8
    4d4a:	b292      	uxth	r2, r2
    4d4c:	b2d2      	uxtb	r2, r2
    4d4e:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    4d50:	683b      	ldr	r3, [r7, #0]
    4d52:	2202      	movs	r2, #2
    4d54:	601a      	str	r2, [r3, #0]
		break;
    4d56:	e2f4      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4d58:	68bb      	ldr	r3, [r7, #8]
    4d5a:	881a      	ldrh	r2, [r3, #0]
    4d5c:	4b53      	ldr	r3, [pc, #332]	; (4eac <vendor_request_handler+0x630>)
    4d5e:	801a      	strh	r2, [r3, #0]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4d60:	4b52      	ldr	r3, [pc, #328]	; (4eac <vendor_request_handler+0x630>)
    4d62:	881b      	ldrh	r3, [r3, #0]
    4d64:	b29b      	uxth	r3, r3
    4d66:	f640 22ea 	movw	r2, #2794	; 0xaea
    4d6a:	4293      	cmp	r3, r2
    4d6c:	d907      	bls.n	4d7e <vendor_request_handler+0x502>
			hop_mode = HOP_SWEEP;
    4d6e:	4b50      	ldr	r3, [pc, #320]	; (4eb0 <vendor_request_handler+0x634>)
    4d70:	2201      	movs	r2, #1
    4d72:	701a      	strb	r2, [r3, #0]
			requested_channel = 2402;
    4d74:	4b4d      	ldr	r3, [pc, #308]	; (4eac <vendor_request_handler+0x630>)
    4d76:	f640 1262 	movw	r2, #2402	; 0x962
    4d7a:	801a      	strh	r2, [r3, #0]
    4d7c:	e020      	b.n	4dc0 <vendor_request_handler+0x544>
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
    4d7e:	4b4c      	ldr	r3, [pc, #304]	; (4eb0 <vendor_request_handler+0x634>)
    4d80:	2200      	movs	r2, #0
    4d82:	701a      	strb	r2, [r3, #0]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4d84:	4b49      	ldr	r3, [pc, #292]	; (4eac <vendor_request_handler+0x630>)
    4d86:	881b      	ldrh	r3, [r3, #0]
    4d88:	b29b      	uxth	r3, r3
    4d8a:	f640 02dc 	movw	r2, #2268	; 0x8dc
    4d8e:	4293      	cmp	r3, r2
    4d90:	d903      	bls.n	4d9a <vendor_request_handler+0x51e>
    4d92:	4b46      	ldr	r3, [pc, #280]	; (4eac <vendor_request_handler+0x630>)
    4d94:	881b      	ldrh	r3, [r3, #0]
    4d96:	b29b      	uxth	r3, r3
    4d98:	e001      	b.n	4d9e <vendor_request_handler+0x522>
    4d9a:	f640 03dc 	movw	r3, #2268	; 0x8dc
    4d9e:	4a43      	ldr	r2, [pc, #268]	; (4eac <vendor_request_handler+0x630>)
    4da0:	8013      	strh	r3, [r2, #0]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4da2:	4b42      	ldr	r3, [pc, #264]	; (4eac <vendor_request_handler+0x630>)
    4da4:	881b      	ldrh	r3, [r3, #0]
    4da6:	b29b      	uxth	r3, r3
    4da8:	f640 22e9 	movw	r2, #2793	; 0xae9
    4dac:	4293      	cmp	r3, r2
    4dae:	d803      	bhi.n	4db8 <vendor_request_handler+0x53c>
    4db0:	4b3e      	ldr	r3, [pc, #248]	; (4eac <vendor_request_handler+0x630>)
    4db2:	881b      	ldrh	r3, [r3, #0]
    4db4:	b29b      	uxth	r3, r3
    4db6:	e001      	b.n	4dbc <vendor_request_handler+0x540>
    4db8:	f640 23ea 	movw	r3, #2794	; 0xaea
    4dbc:	4a3b      	ldr	r2, [pc, #236]	; (4eac <vendor_request_handler+0x630>)
    4dbe:	8013      	strh	r3, [r2, #0]
		}

		if (mode != MODE_BT_FOLLOW_LE) {
    4dc0:	4b3c      	ldr	r3, [pc, #240]	; (4eb4 <vendor_request_handler+0x638>)
    4dc2:	781b      	ldrb	r3, [r3, #0]
    4dc4:	b2db      	uxtb	r3, r3
    4dc6:	2b09      	cmp	r3, #9
    4dc8:	d00a      	beq.n	4de0 <vendor_request_handler+0x564>
			channel = requested_channel;
    4dca:	4b38      	ldr	r3, [pc, #224]	; (4eac <vendor_request_handler+0x630>)
    4dcc:	881b      	ldrh	r3, [r3, #0]
    4dce:	b29a      	uxth	r2, r3
    4dd0:	4b35      	ldr	r3, [pc, #212]	; (4ea8 <vendor_request_handler+0x62c>)
    4dd2:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    4dd4:	4b35      	ldr	r3, [pc, #212]	; (4eac <vendor_request_handler+0x630>)
    4dd6:	2200      	movs	r2, #0
    4dd8:	801a      	strh	r2, [r3, #0]

			/* CS threshold is mode-dependent. Update it after
			 * possible mode change. TODO - kludgy. */
			cs_threshold_calc_and_set();
    4dda:	f7ff fcd9 	bl	4790 <cs_threshold_calc_and_set>
		}
		break;
    4dde:	e2b0      	b.n	5342 <vendor_request_handler+0xac6>
    4de0:	e2af      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_ISP:
		command[0] = 57;
    4de2:	2339      	movs	r3, #57	; 0x39
    4de4:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4de6:	4b34      	ldr	r3, [pc, #208]	; (4eb8 <vendor_request_handler+0x63c>)
    4de8:	681b      	ldr	r3, [r3, #0]
    4dea:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4dee:	f107 0210 	add.w	r2, r7, #16
    4df2:	4608      	mov	r0, r1
    4df4:	4611      	mov	r1, r2
    4df6:	4798      	blx	r3
		*data_len = 0; /* should never return */
    4df8:	683b      	ldr	r3, [r7, #0]
    4dfa:	2200      	movs	r2, #0
    4dfc:	601a      	str	r2, [r3, #0]
		break;
    4dfe:	e2a0      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    4e00:	4b2e      	ldr	r3, [pc, #184]	; (4ebc <vendor_request_handler+0x640>)
    4e02:	4a2f      	ldr	r2, [pc, #188]	; (4ec0 <vendor_request_handler+0x644>)
    4e04:	601a      	str	r2, [r3, #0]
		reset();
    4e06:	f005 f839 	bl	9e7c <reset>
		break;
    4e0a:	e29a      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    4e0c:	68bb      	ldr	r3, [r7, #8]
    4e0e:	881b      	ldrh	r3, [r3, #0]
    4e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4e14:	d917      	bls.n	4e46 <vendor_request_handler+0x5ca>
    4e16:	68bb      	ldr	r3, [r7, #8]
    4e18:	881b      	ldrh	r3, [r3, #0]
    4e1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    4e1e:	d812      	bhi.n	4e46 <vendor_request_handler+0x5ca>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4e20:	68bb      	ldr	r3, [r7, #8]
    4e22:	3302      	adds	r3, #2
    4e24:	881b      	ldrh	r3, [r3, #0]
		bootloader_ctrl = DFU_MODE;
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    4e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4e2a:	d90c      	bls.n	4e46 <vendor_request_handler+0x5ca>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4e2c:	68bb      	ldr	r3, [r7, #8]
    4e2e:	3302      	adds	r3, #2
    4e30:	881b      	ldrh	r3, [r3, #0]
    4e32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    4e36:	d806      	bhi.n	4e46 <vendor_request_handler+0x5ca>
				request_params[1] < request_params[0])
    4e38:	68bb      	ldr	r3, [r7, #8]
    4e3a:	3302      	adds	r3, #2
    4e3c:	881a      	ldrh	r2, [r3, #0]
    4e3e:	68bb      	ldr	r3, [r7, #8]
    4e40:	881b      	ldrh	r3, [r3, #0]
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4e42:	429a      	cmp	r2, r3
    4e44:	d201      	bcs.n	4e4a <vendor_request_handler+0x5ce>
				request_params[1] < request_params[0])
			return 0;
    4e46:	2300      	movs	r3, #0
    4e48:	e27c      	b.n	5344 <vendor_request_handler+0xac8>
		low_freq = request_params[0];
    4e4a:	68bb      	ldr	r3, [r7, #8]
    4e4c:	881a      	ldrh	r2, [r3, #0]
    4e4e:	4b1d      	ldr	r3, [pc, #116]	; (4ec4 <vendor_request_handler+0x648>)
    4e50:	801a      	strh	r2, [r3, #0]
		high_freq = request_params[1];
    4e52:	68bb      	ldr	r3, [r7, #8]
    4e54:	885a      	ldrh	r2, [r3, #2]
    4e56:	4b1c      	ldr	r3, [pc, #112]	; (4ec8 <vendor_request_handler+0x64c>)
    4e58:	801a      	strh	r2, [r3, #0]
		requested_mode = MODE_SPECAN;
    4e5a:	4b10      	ldr	r3, [pc, #64]	; (4e9c <vendor_request_handler+0x620>)
    4e5c:	2204      	movs	r2, #4
    4e5e:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4e60:	683b      	ldr	r3, [r7, #0]
    4e62:	2200      	movs	r2, #0
    4e64:	601a      	str	r2, [r3, #0]
		break;
    4e66:	e26c      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    4e68:	68bb      	ldr	r3, [r7, #8]
    4e6a:	881b      	ldrh	r3, [r3, #0]
    4e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4e70:	d901      	bls.n	4e76 <vendor_request_handler+0x5fa>
			return 0;
    4e72:	2300      	movs	r3, #0
    4e74:	e266      	b.n	5344 <vendor_request_handler+0xac8>
		rssi_threshold = (int8_t)request_params[0];
    4e76:	68bb      	ldr	r3, [r7, #8]
    4e78:	881b      	ldrh	r3, [r3, #0]
    4e7a:	b2da      	uxtb	r2, r3
    4e7c:	4b13      	ldr	r3, [pc, #76]	; (4ecc <vendor_request_handler+0x650>)
    4e7e:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_LED_SPECAN;
    4e80:	4b06      	ldr	r3, [pc, #24]	; (4e9c <vendor_request_handler+0x620>)
    4e82:	2207      	movs	r2, #7
    4e84:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4e86:	683b      	ldr	r3, [r7, #0]
    4e88:	2200      	movs	r2, #0
    4e8a:	601a      	str	r2, [r3, #0]
		break;
    4e8c:	e259      	b.n	5342 <vendor_request_handler+0xac6>
    4e8e:	bf00      	nop
    4e90:	2009c054 	.word	0x2009c054
    4e94:	2009c058 	.word	0x2009c058
    4e98:	2009c05c 	.word	0x2009c05c
    4e9c:	10000a3f 	.word	0x10000a3f
    4ea0:	10001070 	.word	0x10001070
    4ea4:	10000a42 	.word	0x10000a42
    4ea8:	1000049c 	.word	0x1000049c
    4eac:	10000a44 	.word	0x10000a44
    4eb0:	1000097c 	.word	0x1000097c
    4eb4:	10000a3e 	.word	0x10000a3e
    4eb8:	10000448 	.word	0x10000448
    4ebc:	1000001c 	.word	0x1000001c
    4ec0:	4305bb21 	.word	0x4305bb21
    4ec4:	1000049e 	.word	0x1000049e
    4ec8:	100004a0 	.word	0x100004a0
    4ecc:	100004a2 	.word	0x100004a2

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    4ed0:	687b      	ldr	r3, [r7, #4]
    4ed2:	2200      	movs	r2, #0
    4ed4:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
    4ed6:	687b      	ldr	r3, [r7, #4]
    4ed8:	3301      	adds	r3, #1
    4eda:	2200      	movs	r2, #0
    4edc:	701a      	strb	r2, [r3, #0]

		length = (u8)strlen(GIT_REVISION);
    4ede:	48a4      	ldr	r0, [pc, #656]	; (5170 <vendor_request_handler+0x8f4>)
    4ee0:	f006 fc4a 	bl	b778 <strlen>
    4ee4:	4603      	mov	r3, r0
    4ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[2] = length;
    4eea:	687b      	ldr	r3, [r7, #4]
    4eec:	3302      	adds	r3, #2
    4eee:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    4ef2:	701a      	strb	r2, [r3, #0]

		memcpy(&data[3], GIT_REVISION, length);
    4ef4:	687b      	ldr	r3, [r7, #4]
    4ef6:	1cda      	adds	r2, r3, #3
    4ef8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4efc:	4610      	mov	r0, r2
    4efe:	499c      	ldr	r1, [pc, #624]	; (5170 <vendor_request_handler+0x8f4>)
    4f00:	461a      	mov	r2, r3
    4f02:	f006 fbc3 	bl	b68c <memcpy>

		*data_len = 2 + 1 + length;
    4f06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4f0a:	1cda      	adds	r2, r3, #3
    4f0c:	683b      	ldr	r3, [r7, #0]
    4f0e:	601a      	str	r2, [r3, #0]
		break;
    4f10:	e217      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    4f12:	4898      	ldr	r0, [pc, #608]	; (5174 <vendor_request_handler+0x8f8>)
    4f14:	f006 fc30 	bl	b778 <strlen>
    4f18:	4603      	mov	r3, r0
    4f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[0] = length;
    4f1e:	687b      	ldr	r3, [r7, #4]
    4f20:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    4f24:	701a      	strb	r2, [r3, #0]
		memcpy(&data[1], compile_info, length);
    4f26:	687b      	ldr	r3, [r7, #4]
    4f28:	1c5a      	adds	r2, r3, #1
    4f2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4f2e:	4610      	mov	r0, r2
    4f30:	4990      	ldr	r1, [pc, #576]	; (5174 <vendor_request_handler+0x8f8>)
    4f32:	461a      	mov	r2, r3
    4f34:	f006 fbaa 	bl	b68c <memcpy>
		*data_len = 1 + length;
    4f38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4f3c:	1c5a      	adds	r2, r3, #1
    4f3e:	683b      	ldr	r3, [r7, #0]
    4f40:	601a      	str	r2, [r3, #0]
		break;
    4f42:	e1fe      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    4f44:	687b      	ldr	r3, [r7, #4]
    4f46:	2201      	movs	r2, #1
    4f48:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4f4a:	683b      	ldr	r3, [r7, #0]
    4f4c:	2201      	movs	r2, #1
    4f4e:	601a      	str	r2, [r3, #0]
		break;
    4f50:	e1f7      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    4f52:	68bb      	ldr	r3, [r7, #8]
    4f54:	881b      	ldrh	r3, [r3, #0]
    4f56:	b2da      	uxtb	r2, r3
    4f58:	4b87      	ldr	r3, [pc, #540]	; (5178 <vendor_request_handler+0x8fc>)
    4f5a:	701a      	strb	r2, [r3, #0]
		cs_threshold_calc_and_set();
    4f5c:	f7ff fc18 	bl	4790 <cs_threshold_calc_and_set>
		break;
    4f60:	e1ef      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    4f62:	4b85      	ldr	r3, [pc, #532]	; (5178 <vendor_request_handler+0x8fc>)
    4f64:	781b      	ldrb	r3, [r3, #0]
    4f66:	b2da      	uxtb	r2, r3
    4f68:	687b      	ldr	r3, [r7, #4]
    4f6a:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4f6c:	683b      	ldr	r3, [r7, #0]
    4f6e:	2201      	movs	r2, #1
    4f70:	601a      	str	r2, [r3, #0]
		break;
    4f72:	e1e6      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    4f74:	4981      	ldr	r1, [pc, #516]	; (517c <vendor_request_handler+0x900>)
    4f76:	f04f 0200 	mov.w	r2, #0
    4f7a:	f04f 0300 	mov.w	r3, #0
    4f7e:	e9c1 2300 	strd	r2, r3, [r1]
		target.access_code = 0;
    4f82:	497e      	ldr	r1, [pc, #504]	; (517c <vendor_request_handler+0x900>)
    4f84:	f04f 0200 	mov.w	r2, #0
    4f88:	f04f 0300 	mov.w	r3, #0
    4f8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		for(i=0; i < 8; i++) {
    4f90:	2300      	movs	r3, #0
    4f92:	64fb      	str	r3, [r7, #76]	; 0x4c
    4f94:	e025      	b.n	4fe2 <vendor_request_handler+0x766>
			target.address |= (uint64_t)data[i] << 8*i;
    4f96:	4b79      	ldr	r3, [pc, #484]	; (517c <vendor_request_handler+0x900>)
    4f98:	e9d3 ab00 	ldrd	sl, fp, [r3]
    4f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f9e:	687a      	ldr	r2, [r7, #4]
    4fa0:	4413      	add	r3, r2
    4fa2:	781b      	ldrb	r3, [r3, #0]
    4fa4:	b2da      	uxtb	r2, r3
    4fa6:	f04f 0300 	mov.w	r3, #0
    4faa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    4fac:	00c9      	lsls	r1, r1, #3
    4fae:	f1a1 0620 	sub.w	r6, r1, #32
    4fb2:	f1c1 0020 	rsb	r0, r1, #32
    4fb6:	fa03 f901 	lsl.w	r9, r3, r1
    4fba:	fa02 f606 	lsl.w	r6, r2, r6
    4fbe:	ea49 0906 	orr.w	r9, r9, r6
    4fc2:	fa22 f000 	lsr.w	r0, r2, r0
    4fc6:	ea49 0900 	orr.w	r9, r9, r0
    4fca:	fa02 f801 	lsl.w	r8, r2, r1
    4fce:	ea4a 0208 	orr.w	r2, sl, r8
    4fd2:	ea4b 0309 	orr.w	r3, fp, r9
    4fd6:	4969      	ldr	r1, [pc, #420]	; (517c <vendor_request_handler+0x900>)
    4fd8:	e9c1 2300 	strd	r2, r3, [r1]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
    4fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4fde:	3301      	adds	r3, #1
    4fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
    4fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4fe4:	2b07      	cmp	r3, #7
    4fe6:	ddd6      	ble.n	4f96 <vendor_request_handler+0x71a>
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    4fe8:	2300      	movs	r3, #0
    4fea:	64fb      	str	r3, [r7, #76]	; 0x4c
    4fec:	e024      	b.n	5038 <vendor_request_handler+0x7bc>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
    4fee:	4b63      	ldr	r3, [pc, #396]	; (517c <vendor_request_handler+0x900>)
    4ff0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
    4ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4ff6:	3308      	adds	r3, #8
    4ff8:	687a      	ldr	r2, [r7, #4]
    4ffa:	4413      	add	r3, r2
    4ffc:	781b      	ldrb	r3, [r3, #0]
    4ffe:	b2da      	uxtb	r2, r3
    5000:	f04f 0300 	mov.w	r3, #0
    5004:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    5006:	00c9      	lsls	r1, r1, #3
    5008:	f1a1 0620 	sub.w	r6, r1, #32
    500c:	f1c1 0020 	rsb	r0, r1, #32
    5010:	fa03 f501 	lsl.w	r5, r3, r1
    5014:	fa02 f606 	lsl.w	r6, r2, r6
    5018:	4335      	orrs	r5, r6
    501a:	fa22 f000 	lsr.w	r0, r2, r0
    501e:	4305      	orrs	r5, r0
    5020:	fa02 f401 	lsl.w	r4, r2, r1
    5024:	ea48 0204 	orr.w	r2, r8, r4
    5028:	ea49 0305 	orr.w	r3, r9, r5
    502c:	4953      	ldr	r1, [pc, #332]	; (517c <vendor_request_handler+0x900>)
    502e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    5032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5034:	3301      	adds	r3, #1
    5036:	64fb      	str	r3, [r7, #76]	; 0x4c
    5038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    503a:	2b07      	cmp	r3, #7
    503c:	ddd7      	ble.n	4fee <vendor_request_handler+0x772>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
		}
		break;
    503e:	e180      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
    5040:	2300      	movs	r3, #0
    5042:	64bb      	str	r3, [r7, #72]	; 0x48
		for(i=0; i < 4; i++) {
    5044:	2300      	movs	r3, #0
    5046:	64fb      	str	r3, [r7, #76]	; 0x4c
    5048:	e00d      	b.n	5066 <vendor_request_handler+0x7ea>
			clock_offset <<= 8;
    504a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    504c:	021b      	lsls	r3, r3, #8
    504e:	64bb      	str	r3, [r7, #72]	; 0x48
			clock_offset |= data[i];
    5050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5052:	687a      	ldr	r2, [r7, #4]
    5054:	4413      	add	r3, r2
    5056:	781b      	ldrb	r3, [r3, #0]
    5058:	461a      	mov	r2, r3
    505a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    505c:	4313      	orrs	r3, r2
    505e:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		break;

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
		for(i=0; i < 4; i++) {
    5060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5062:	3301      	adds	r3, #1
    5064:	64fb      	str	r3, [r7, #76]	; 0x4c
    5066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5068:	2b03      	cmp	r3, #3
    506a:	ddee      	ble.n	504a <vendor_request_handler+0x7ce>
			clock_offset <<= 8;
			clock_offset |= data[i];
		}
		clkn += clock_offset;
    506c:	4b44      	ldr	r3, [pc, #272]	; (5180 <vendor_request_handler+0x904>)
    506e:	681a      	ldr	r2, [r3, #0]
    5070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5072:	4413      	add	r3, r2
    5074:	4a42      	ldr	r2, [pc, #264]	; (5180 <vendor_request_handler+0x904>)
    5076:	6013      	str	r3, [r2, #0]
		hop_mode = HOP_BLUETOOTH;
    5078:	4b42      	ldr	r3, [pc, #264]	; (5184 <vendor_request_handler+0x908>)
    507a:	2202      	movs	r2, #2
    507c:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW;
    507e:	4b42      	ldr	r3, [pc, #264]	; (5188 <vendor_request_handler+0x90c>)
    5080:	2208      	movs	r2, #8
    5082:	701a      	strb	r2, [r3, #0]
		break;
    5084:	e15d      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    5086:	687b      	ldr	r3, [r7, #4]
    5088:	781b      	ldrb	r3, [r3, #0]
    508a:	461a      	mov	r2, r3
    508c:	687b      	ldr	r3, [r7, #4]
    508e:	3301      	adds	r3, #1
    5090:	781b      	ldrb	r3, [r3, #0]
    5092:	021b      	lsls	r3, r3, #8
    5094:	431a      	orrs	r2, r3
    5096:	687b      	ldr	r3, [r7, #4]
    5098:	3302      	adds	r3, #2
    509a:	781b      	ldrb	r3, [r3, #0]
    509c:	041b      	lsls	r3, r3, #16
    509e:	431a      	orrs	r2, r3
    50a0:	687b      	ldr	r3, [r7, #4]
    50a2:	3303      	adds	r3, #3
    50a4:	781b      	ldrb	r3, [r3, #0]
    50a6:	061b      	lsls	r3, r3, #24
    50a8:	4313      	orrs	r3, r2
    50aa:	63fb      	str	r3, [r7, #60]	; 0x3c
		clkn = clock;
    50ac:	4a34      	ldr	r2, [pc, #208]	; (5180 <vendor_request_handler+0x904>)
    50ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    50b0:	6013      	str	r3, [r2, #0]
		cs_threshold_calc_and_set();
    50b2:	f7ff fb6d 	bl	4790 <cs_threshold_calc_and_set>
		break;
    50b6:	e144      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    50b8:	2300      	movs	r3, #0
    50ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    50bc:	e00b      	b.n	50d6 <vendor_request_handler+0x85a>
			afh_map[i] = data[i];
    50be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50c0:	687a      	ldr	r2, [r7, #4]
    50c2:	4413      	add	r3, r2
    50c4:	7819      	ldrb	r1, [r3, #0]
    50c6:	4a31      	ldr	r2, [pc, #196]	; (518c <vendor_request_handler+0x910>)
    50c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50ca:	4413      	add	r3, r2
    50cc:	460a      	mov	r2, r1
    50ce:	701a      	strb	r2, [r3, #0]
		clkn = clock;
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    50d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50d2:	3301      	adds	r3, #1
    50d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    50d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50d8:	2b09      	cmp	r3, #9
    50da:	ddf0      	ble.n	50be <vendor_request_handler+0x842>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    50dc:	4b2c      	ldr	r3, [pc, #176]	; (5190 <vendor_request_handler+0x914>)
    50de:	2201      	movs	r2, #1
    50e0:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    50e2:	683b      	ldr	r3, [r7, #0]
    50e4:	220a      	movs	r2, #10
    50e6:	601a      	str	r2, [r3, #0]
		break;
    50e8:	e12b      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    50ea:	2300      	movs	r3, #0
    50ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    50ee:	e007      	b.n	5100 <vendor_request_handler+0x884>
			afh_map[i] = 0;
    50f0:	4a26      	ldr	r2, [pc, #152]	; (518c <vendor_request_handler+0x910>)
    50f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50f4:	4413      	add	r3, r2
    50f6:	2200      	movs	r2, #0
    50f8:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    50fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50fc:	3301      	adds	r3, #1
    50fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    5100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5102:	2b09      	cmp	r3, #9
    5104:	ddf4      	ble.n	50f0 <vendor_request_handler+0x874>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    5106:	4b22      	ldr	r3, [pc, #136]	; (5190 <vendor_request_handler+0x914>)
    5108:	2200      	movs	r2, #0
    510a:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    510c:	683b      	ldr	r3, [r7, #0]
    510e:	220a      	movs	r2, #10
    5110:	601a      	str	r2, [r3, #0]
		break;
    5112:	e116      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    5114:	4b1a      	ldr	r3, [pc, #104]	; (5180 <vendor_request_handler+0x904>)
    5116:	681b      	ldr	r3, [r3, #0]
    5118:	63fb      	str	r3, [r7, #60]	; 0x3c
		for(i=0; i < 4; i++) {
    511a:	2300      	movs	r3, #0
    511c:	64fb      	str	r3, [r7, #76]	; 0x4c
    511e:	e00c      	b.n	513a <vendor_request_handler+0x8be>
			data[i] = (clock >> (8*i)) & 0xff;
    5120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5122:	687a      	ldr	r2, [r7, #4]
    5124:	4413      	add	r3, r2
    5126:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5128:	00d2      	lsls	r2, r2, #3
    512a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    512c:	fa21 f202 	lsr.w	r2, r1, r2
    5130:	b2d2      	uxtb	r2, r2
    5132:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(i=0; i < 4; i++) {
    5134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5136:	3301      	adds	r3, #1
    5138:	64fb      	str	r3, [r7, #76]	; 0x4c
    513a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    513c:	2b03      	cmp	r3, #3
    513e:	ddef      	ble.n	5120 <vendor_request_handler+0x8a4>
			data[i] = (clock >> (8*i)) & 0xff;
		}
		*data_len = 4;
    5140:	683b      	ldr	r3, [r7, #0]
    5142:	2204      	movs	r2, #4
    5144:	601a      	str	r2, [r3, #0]
		break;
    5146:	e0fc      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;
    5148:	683b      	ldr	r3, [r7, #0]
    514a:	2200      	movs	r2, #0
    514c:	601a      	str	r2, [r3, #0]

		do_hop = 0;
    514e:	4b11      	ldr	r3, [pc, #68]	; (5194 <vendor_request_handler+0x918>)
    5150:	2200      	movs	r2, #0
    5152:	701a      	strb	r2, [r3, #0]
		hop_mode = HOP_BTLE;
    5154:	4b0b      	ldr	r3, [pc, #44]	; (5184 <vendor_request_handler+0x908>)
    5156:	2203      	movs	r2, #3
    5158:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW_LE;
    515a:	4b0b      	ldr	r3, [pc, #44]	; (5188 <vendor_request_handler+0x90c>)
    515c:	2209      	movs	r2, #9
    515e:	701a      	strb	r2, [r3, #0]

		queue_init();
    5160:	f003 fa48 	bl	85f4 <queue_init>
		cs_threshold_calc_and_set();
    5164:	f7ff fb14 	bl	4790 <cs_threshold_calc_and_set>
		break;
    5168:	e0eb      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    516a:	2300      	movs	r3, #0
    516c:	64fb      	str	r3, [r7, #76]	; 0x4c
    516e:	e021      	b.n	51b4 <vendor_request_handler+0x938>
    5170:	0000c09c 	.word	0x0000c09c
    5174:	0000c058 	.word	0x0000c058
    5178:	1000044c 	.word	0x1000044c
    517c:	100010b8 	.word	0x100010b8
    5180:	10000be4 	.word	0x10000be4
    5184:	1000097c 	.word	0x1000097c
    5188:	10000a3f 	.word	0x10000a3f
    518c:	10000bbc 	.word	0x10000bbc
    5190:	10001024 	.word	0x10001024
    5194:	1000097d 	.word	0x1000097d
			data[i] = (le.access_address >> (8*i)) & 0xff;
    5198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    519a:	687a      	ldr	r2, [r7, #4]
    519c:	4413      	add	r3, r2
    519e:	4a6c      	ldr	r2, [pc, #432]	; (5350 <vendor_request_handler+0xad4>)
    51a0:	6811      	ldr	r1, [r2, #0]
    51a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    51a4:	00d2      	lsls	r2, r2, #3
    51a6:	fa21 f202 	lsr.w	r2, r1, r2
    51aa:	b2d2      	uxtb	r2, r2
    51ac:	701a      	strb	r2, [r3, #0]
		queue_init();
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    51ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    51b0:	3301      	adds	r3, #1
    51b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    51b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    51b6:	2b03      	cmp	r3, #3
    51b8:	ddee      	ble.n	5198 <vendor_request_handler+0x91c>
			data[i] = (le.access_address >> (8*i)) & 0xff;
		}
		*data_len = 4;
    51ba:	683b      	ldr	r3, [r7, #0]
    51bc:	2204      	movs	r2, #4
    51be:	601a      	str	r2, [r3, #0]
		break;
    51c0:	e0bf      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    51c2:	687b      	ldr	r3, [r7, #4]
    51c4:	781b      	ldrb	r3, [r3, #0]
    51c6:	461a      	mov	r2, r3
    51c8:	687b      	ldr	r3, [r7, #4]
    51ca:	3301      	adds	r3, #1
    51cc:	781b      	ldrb	r3, [r3, #0]
    51ce:	021b      	lsls	r3, r3, #8
    51d0:	431a      	orrs	r2, r3
    51d2:	687b      	ldr	r3, [r7, #4]
    51d4:	3302      	adds	r3, #2
    51d6:	781b      	ldrb	r3, [r3, #0]
    51d8:	041b      	lsls	r3, r3, #16
    51da:	431a      	orrs	r2, r3
    51dc:	687b      	ldr	r3, [r7, #4]
    51de:	3303      	adds	r3, #3
    51e0:	781b      	ldrb	r3, [r3, #0]
    51e2:	061b      	lsls	r3, r3, #24
    51e4:	4313      	orrs	r3, r2
    51e6:	4618      	mov	r0, r3
    51e8:	f001 f91c 	bl	6424 <le_set_access_address>
		le.target_set = 1;
    51ec:	4b58      	ldr	r3, [pc, #352]	; (5350 <vendor_request_handler+0xad4>)
    51ee:	2201      	movs	r2, #1
    51f0:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    51f2:	e0a6      	b.n	5342 <vendor_request_handler+0xac6>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    51f4:	687b      	ldr	r3, [r7, #4]
    51f6:	2213      	movs	r2, #19
    51f8:	701a      	strb	r2, [r3, #0]
		data[1] = 0x37;
    51fa:	687b      	ldr	r3, [r7, #4]
    51fc:	3301      	adds	r3, #1
    51fe:	2237      	movs	r2, #55	; 0x37
    5200:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    5202:	683b      	ldr	r3, [r7, #0]
    5204:	2202      	movs	r2, #2
    5206:	601a      	str	r2, [r3, #0]
		break;
    5208:	e09b      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    520a:	4b51      	ldr	r3, [pc, #324]	; (5350 <vendor_request_handler+0xad4>)
    520c:	691b      	ldr	r3, [r3, #16]
    520e:	2b00      	cmp	r3, #0
    5210:	bf14      	ite	ne
    5212:	2301      	movne	r3, #1
    5214:	2300      	moveq	r3, #0
    5216:	b2db      	uxtb	r3, r3
    5218:	461a      	mov	r2, r3
    521a:	687b      	ldr	r3, [r7, #4]
    521c:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    521e:	683b      	ldr	r3, [r7, #0]
    5220:	2201      	movs	r2, #1
    5222:	601a      	str	r2, [r3, #0]
		break;
    5224:	e08d      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    5226:	68bb      	ldr	r3, [r7, #8]
    5228:	881b      	ldrh	r3, [r3, #0]
    522a:	2b00      	cmp	r3, #0
    522c:	bf14      	ite	ne
    522e:	2301      	movne	r3, #1
    5230:	2300      	moveq	r3, #0
    5232:	b2db      	uxtb	r3, r3
    5234:	461a      	mov	r2, r3
    5236:	4b46      	ldr	r3, [pc, #280]	; (5350 <vendor_request_handler+0xad4>)
    5238:	611a      	str	r2, [r3, #16]
		break;
    523a:	e082      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_POLL:
		p = dequeue();
    523c:	f003 fa1a 	bl	8674 <dequeue>
    5240:	6478      	str	r0, [r7, #68]	; 0x44
		if (p != NULL) {
    5242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5244:	2b00      	cmp	r3, #0
    5246:	d008      	beq.n	525a <vendor_request_handler+0x9de>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    5248:	6878      	ldr	r0, [r7, #4]
    524a:	6c79      	ldr	r1, [r7, #68]	; 0x44
    524c:	2240      	movs	r2, #64	; 0x40
    524e:	f006 fa1d 	bl	b68c <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    5252:	683b      	ldr	r3, [r7, #0]
    5254:	2240      	movs	r2, #64	; 0x40
    5256:	601a      	str	r2, [r3, #0]
		} else {
			data[0] = 0;
			*data_len = 1;
		}
		break;
    5258:	e073      	b.n	5342 <vendor_request_handler+0xac6>
		p = dequeue();
		if (p != NULL) {
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
			*data_len = sizeof(usb_pkt_rx);
		} else {
			data[0] = 0;
    525a:	687b      	ldr	r3, [r7, #4]
    525c:	2200      	movs	r2, #0
    525e:	701a      	strb	r2, [r3, #0]
			*data_len = 1;
    5260:	683b      	ldr	r3, [r7, #0]
    5262:	2201      	movs	r2, #1
    5264:	601a      	str	r2, [r3, #0]
		}
		break;
    5266:	e06c      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    5268:	683b      	ldr	r3, [r7, #0]
    526a:	2200      	movs	r2, #0
    526c:	601a      	str	r2, [r3, #0]

		hop_mode = HOP_NONE;
    526e:	4b39      	ldr	r3, [pc, #228]	; (5354 <vendor_request_handler+0xad8>)
    5270:	2200      	movs	r2, #0
    5272:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_PROMISC_LE;
    5274:	4b38      	ldr	r3, [pc, #224]	; (5358 <vendor_request_handler+0xadc>)
    5276:	220a      	movs	r2, #10
    5278:	701a      	strb	r2, [r3, #0]

		queue_init();
    527a:	f003 f9bb 	bl	85f4 <queue_init>
		cs_threshold_calc_and_set();
    527e:	f7ff fa87 	bl	4790 <cs_threshold_calc_and_set>
		break;
    5282:	e05e      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    5284:	68bb      	ldr	r3, [r7, #8]
    5286:	881b      	ldrh	r3, [r3, #0]
    5288:	b2db      	uxtb	r3, r3
    528a:	4618      	mov	r0, r3
    528c:	f004 fc14 	bl	9ab8 <cc2400_get>
    5290:	4603      	mov	r3, r0
    5292:	877b      	strh	r3, [r7, #58]	; 0x3a
		data[0] = (reg_val >> 8) & 0xff;
    5294:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    5296:	0a1b      	lsrs	r3, r3, #8
    5298:	b29b      	uxth	r3, r3
    529a:	b2da      	uxtb	r2, r3
    529c:	687b      	ldr	r3, [r7, #4]
    529e:	701a      	strb	r2, [r3, #0]
		data[1] = reg_val & 0xff;
    52a0:	687b      	ldr	r3, [r7, #4]
    52a2:	3301      	adds	r3, #1
    52a4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
    52a6:	b2d2      	uxtb	r2, r2
    52a8:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    52aa:	683b      	ldr	r3, [r7, #0]
    52ac:	2202      	movs	r2, #2
    52ae:	601a      	str	r2, [r3, #0]
		break;
    52b0:	e047      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    52b2:	68bb      	ldr	r3, [r7, #8]
    52b4:	881b      	ldrh	r3, [r3, #0]
    52b6:	b2da      	uxtb	r2, r3
    52b8:	68bb      	ldr	r3, [r7, #8]
    52ba:	3302      	adds	r3, #2
    52bc:	881b      	ldrh	r3, [r3, #0]
    52be:	4610      	mov	r0, r2
    52c0:	4619      	mov	r1, r3
    52c2:	f004 fc0f 	bl	9ae4 <cc2400_set>
		break;
    52c6:	e03c      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SLAVE:
		memcpy(slave_mac_address, data, 6);
    52c8:	4824      	ldr	r0, [pc, #144]	; (535c <vendor_request_handler+0xae0>)
    52ca:	6879      	ldr	r1, [r7, #4]
    52cc:	2206      	movs	r2, #6
    52ce:	f006 f9dd 	bl	b68c <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    52d2:	4b21      	ldr	r3, [pc, #132]	; (5358 <vendor_request_handler+0xadc>)
    52d4:	220c      	movs	r2, #12
    52d6:	701a      	strb	r2, [r3, #0]
		break;
    52d8:	e033      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    52da:	687b      	ldr	r3, [r7, #4]
    52dc:	795a      	ldrb	r2, [r3, #5]
    52de:	4b1c      	ldr	r3, [pc, #112]	; (5350 <vendor_request_handler+0xad4>)
    52e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		le.target[1] = data[4];
    52e4:	687b      	ldr	r3, [r7, #4]
    52e6:	791a      	ldrb	r2, [r3, #4]
    52e8:	4b19      	ldr	r3, [pc, #100]	; (5350 <vendor_request_handler+0xad4>)
    52ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		le.target[2] = data[3];
    52ee:	687b      	ldr	r3, [r7, #4]
    52f0:	78da      	ldrb	r2, [r3, #3]
    52f2:	4b17      	ldr	r3, [pc, #92]	; (5350 <vendor_request_handler+0xad4>)
    52f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		le.target[3] = data[2];
    52f8:	687b      	ldr	r3, [r7, #4]
    52fa:	789a      	ldrb	r2, [r3, #2]
    52fc:	4b14      	ldr	r3, [pc, #80]	; (5350 <vendor_request_handler+0xad4>)
    52fe:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		le.target[4] = data[1];
    5302:	687b      	ldr	r3, [r7, #4]
    5304:	785a      	ldrb	r2, [r3, #1]
    5306:	4b12      	ldr	r3, [pc, #72]	; (5350 <vendor_request_handler+0xad4>)
    5308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		le.target[5] = data[0];
    530c:	687b      	ldr	r3, [r7, #4]
    530e:	781a      	ldrb	r2, [r3, #0]
    5310:	4b0f      	ldr	r3, [pc, #60]	; (5350 <vendor_request_handler+0xad4>)
    5312:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		le.target_set = 1;
    5316:	4b0e      	ldr	r3, [pc, #56]	; (5350 <vendor_request_handler+0xad4>)
    5318:	2201      	movs	r2, #1
    531a:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    531c:	e011      	b.n	5342 <vendor_request_handler+0xac6>

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    531e:	68bb      	ldr	r3, [r7, #8]
    5320:	881b      	ldrh	r3, [r3, #0]
    5322:	b2da      	uxtb	r2, r3
    5324:	4b0e      	ldr	r3, [pc, #56]	; (5360 <vendor_request_handler+0xae4>)
    5326:	701a      	strb	r2, [r3, #0]
		break;
    5328:	e00b      	b.n	5342 <vendor_request_handler+0xac6>
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    532a:	4b0b      	ldr	r3, [pc, #44]	; (5358 <vendor_request_handler+0xadc>)
    532c:	220d      	movs	r2, #13
    532e:	701a      	strb	r2, [r3, #0]
		ego_mode = request_params[0];
    5330:	68bb      	ldr	r3, [r7, #8]
    5332:	881b      	ldrh	r3, [r3, #0]
    5334:	b2da      	uxtb	r2, r3
    5336:	4b0b      	ldr	r3, [pc, #44]	; (5364 <vendor_request_handler+0xae8>)
    5338:	701a      	strb	r2, [r3, #0]
		break;
    533a:	e002      	b.n	5342 <vendor_request_handler+0xac6>

	default:
		return 0;
    533c:	2300      	movs	r3, #0
    533e:	e001      	b.n	5344 <vendor_request_handler+0xac8>
		le.target_set = 1;
		break;

	case UBERTOOTH_DO_SOMETHING:
		// do something! just don't commit anything here
		break;
    5340:	bf00      	nop
		break;

	default:
		return 0;
	}
	return 1;
    5342:	2301      	movs	r3, #1
}
    5344:	4618      	mov	r0, r3
    5346:	3754      	adds	r7, #84	; 0x54
    5348:	46bd      	mov	sp, r7
    534a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    534e:	bf00      	nop
    5350:	10000458 	.word	0x10000458
    5354:	1000097c 	.word	0x1000097c
    5358:	10000a3f 	.word	0x10000a3f
    535c:	1000098c 	.word	0x1000098c
    5360:	10000a40 	.word	0x10000a40
    5364:	10000a41 	.word	0x10000a41

00005368 <clkn_init>:

static void clkn_init()
{
    5368:	b480      	push	{r7}
    536a:	af00      	add	r7, sp, #0
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    536c:	4b0c      	ldr	r3, [pc, #48]	; (53a0 <clkn_init+0x38>)
    536e:	2202      	movs	r2, #2
    5370:	601a      	str	r2, [r3, #0]
	clkn = 0;
    5372:	4b0c      	ldr	r3, [pc, #48]	; (53a4 <clkn_init+0x3c>)
    5374:	2200      	movs	r2, #0
    5376:	601a      	str	r2, [r3, #0]
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    5378:	4b0b      	ldr	r3, [pc, #44]	; (53a8 <clkn_init+0x40>)
    537a:	2204      	movs	r2, #4
    537c:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    537e:	4b0b      	ldr	r3, [pc, #44]	; (53ac <clkn_init+0x44>)
    5380:	f640 4234 	movw	r2, #3124	; 0xc34
    5384:	601a      	str	r2, [r3, #0]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    5386:	4b0a      	ldr	r3, [pc, #40]	; (53b0 <clkn_init+0x48>)
    5388:	2203      	movs	r2, #3
    538a:	601a      	str	r2, [r3, #0]
	ISER0 = ISER0_ISE_TIMER0;
    538c:	4b09      	ldr	r3, [pc, #36]	; (53b4 <clkn_init+0x4c>)
    538e:	2202      	movs	r2, #2
    5390:	601a      	str	r2, [r3, #0]

	/* start timer */
	T0TCR = TCR_Counter_Enable;
    5392:	4b03      	ldr	r3, [pc, #12]	; (53a0 <clkn_init+0x38>)
    5394:	2201      	movs	r2, #1
    5396:	601a      	str	r2, [r3, #0]
}
    5398:	46bd      	mov	sp, r7
    539a:	f85d 7b04 	ldr.w	r7, [sp], #4
    539e:	4770      	bx	lr
    53a0:	40004004 	.word	0x40004004
    53a4:	10000be4 	.word	0x10000be4
    53a8:	4000400c 	.word	0x4000400c
    53ac:	40004018 	.word	0x40004018
    53b0:	40004014 	.word	0x40004014
    53b4:	e000e100 	.word	0xe000e100

000053b8 <TIMER0_IRQHandler>:

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    53b8:	b480      	push	{r7}
    53ba:	b083      	sub	sp, #12
    53bc:	af00      	add	r7, sp, #0
	// Use non-volatile working register to shave off a couple instructions
	u32 next;
	u32 le_clk;

	if (T0IR & TIR_MR0_Interrupt) {
    53be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    53c2:	681b      	ldr	r3, [r3, #0]
    53c4:	f003 0301 	and.w	r3, r3, #1
    53c8:	2b00      	cmp	r3, #0
    53ca:	d06d      	beq.n	54a8 <TIMER0_IRQHandler+0xf0>

		clkn++;
    53cc:	4b39      	ldr	r3, [pc, #228]	; (54b4 <TIMER0_IRQHandler+0xfc>)
    53ce:	681b      	ldr	r3, [r3, #0]
    53d0:	3301      	adds	r3, #1
    53d2:	4a38      	ldr	r2, [pc, #224]	; (54b4 <TIMER0_IRQHandler+0xfc>)
    53d4:	6013      	str	r3, [r2, #0]
		next = clkn;
    53d6:	4b37      	ldr	r3, [pc, #220]	; (54b4 <TIMER0_IRQHandler+0xfc>)
    53d8:	681b      	ldr	r3, [r3, #0]
    53da:	607b      	str	r3, [r7, #4]
		le_clk = (next - le.conn_epoch) & 0x03;
    53dc:	4b36      	ldr	r3, [pc, #216]	; (54b8 <TIMER0_IRQHandler+0x100>)
    53de:	699b      	ldr	r3, [r3, #24]
    53e0:	687a      	ldr	r2, [r7, #4]
    53e2:	1ad3      	subs	r3, r2, r3
    53e4:	f003 0303 	and.w	r3, r3, #3
    53e8:	603b      	str	r3, [r7, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    53ea:	4b34      	ldr	r3, [pc, #208]	; (54bc <TIMER0_IRQHandler+0x104>)
    53ec:	781b      	ldrb	r3, [r3, #0]
    53ee:	2b00      	cmp	r3, #0
    53f0:	d003      	beq.n	53fa <TIMER0_IRQHandler+0x42>
    53f2:	4b32      	ldr	r3, [pc, #200]	; (54bc <TIMER0_IRQHandler+0x104>)
    53f4:	781b      	ldrb	r3, [r3, #0]
    53f6:	2b01      	cmp	r3, #1
    53f8:	d109      	bne.n	540e <TIMER0_IRQHandler+0x56>
			if ((next & 0x7f) == 0)
    53fa:	687b      	ldr	r3, [r7, #4]
    53fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5400:	2b00      	cmp	r3, #0
    5402:	d103      	bne.n	540c <TIMER0_IRQHandler+0x54>
				do_hop = 1;
    5404:	4b2e      	ldr	r3, [pc, #184]	; (54c0 <TIMER0_IRQHandler+0x108>)
    5406:	2201      	movs	r2, #1
    5408:	701a      	strb	r2, [r3, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
			if ((next & 0x7f) == 0)
    540a:	e037      	b.n	547c <TIMER0_IRQHandler+0xc4>
    540c:	e036      	b.n	547c <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    540e:	4b2b      	ldr	r3, [pc, #172]	; (54bc <TIMER0_IRQHandler+0x104>)
    5410:	781b      	ldrb	r3, [r3, #0]
    5412:	2b02      	cmp	r3, #2
    5414:	d108      	bne.n	5428 <TIMER0_IRQHandler+0x70>
			if ((next & 0x1) == 0)
    5416:	687b      	ldr	r3, [r7, #4]
    5418:	f003 0301 	and.w	r3, r3, #1
    541c:	2b00      	cmp	r3, #0
    541e:	d12d      	bne.n	547c <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
    5420:	4b27      	ldr	r3, [pc, #156]	; (54c0 <TIMER0_IRQHandler+0x108>)
    5422:	2201      	movs	r2, #1
    5424:	701a      	strb	r2, [r3, #0]
    5426:	e029      	b.n	547c <TIMER0_IRQHandler+0xc4>
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    5428:	4b24      	ldr	r3, [pc, #144]	; (54bc <TIMER0_IRQHandler+0x104>)
    542a:	781b      	ldrb	r3, [r3, #0]
    542c:	2b03      	cmp	r3, #3
    542e:	d125      	bne.n	547c <TIMER0_IRQHandler+0xc4>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    5430:	4b21      	ldr	r3, [pc, #132]	; (54b8 <TIMER0_IRQHandler+0x100>)
    5432:	7d1b      	ldrb	r3, [r3, #20]
    5434:	2b03      	cmp	r3, #3
    5436:	d121      	bne.n	547c <TIMER0_IRQHandler+0xc4>
    5438:	683b      	ldr	r3, [r7, #0]
    543a:	2b00      	cmp	r3, #0
    543c:	d11e      	bne.n	547c <TIMER0_IRQHandler+0xc4>
				--le.interval_timer;
    543e:	4b1e      	ldr	r3, [pc, #120]	; (54b8 <TIMER0_IRQHandler+0x100>)
    5440:	8b9b      	ldrh	r3, [r3, #28]
    5442:	b29b      	uxth	r3, r3
    5444:	3b01      	subs	r3, #1
    5446:	b29a      	uxth	r2, r3
    5448:	4b1b      	ldr	r3, [pc, #108]	; (54b8 <TIMER0_IRQHandler+0x100>)
    544a:	839a      	strh	r2, [r3, #28]
				if (le.interval_timer == 0) {
    544c:	4b1a      	ldr	r3, [pc, #104]	; (54b8 <TIMER0_IRQHandler+0x100>)
    544e:	8b9b      	ldrh	r3, [r3, #28]
    5450:	b29b      	uxth	r3, r3
    5452:	2b00      	cmp	r3, #0
    5454:	d10e      	bne.n	5474 <TIMER0_IRQHandler+0xbc>
					do_hop = 1;
    5456:	4b1a      	ldr	r3, [pc, #104]	; (54c0 <TIMER0_IRQHandler+0x108>)
    5458:	2201      	movs	r2, #1
    545a:	701a      	strb	r2, [r3, #0]
					++le.conn_count;
    545c:	4b16      	ldr	r3, [pc, #88]	; (54b8 <TIMER0_IRQHandler+0x100>)
    545e:	8c1b      	ldrh	r3, [r3, #32]
    5460:	b29b      	uxth	r3, r3
    5462:	3301      	adds	r3, #1
    5464:	b29a      	uxth	r2, r3
    5466:	4b14      	ldr	r3, [pc, #80]	; (54b8 <TIMER0_IRQHandler+0x100>)
    5468:	841a      	strh	r2, [r3, #32]
					le.interval_timer = le.conn_interval;
    546a:	4b13      	ldr	r3, [pc, #76]	; (54b8 <TIMER0_IRQHandler+0x100>)
    546c:	8bda      	ldrh	r2, [r3, #30]
    546e:	4b12      	ldr	r3, [pc, #72]	; (54b8 <TIMER0_IRQHandler+0x100>)
    5470:	839a      	strh	r2, [r3, #28]
    5472:	e003      	b.n	547c <TIMER0_IRQHandler+0xc4>
				} else {
					TXLED_CLR; // hack!
    5474:	4b13      	ldr	r3, [pc, #76]	; (54c4 <TIMER0_IRQHandler+0x10c>)
    5476:	f44f 7280 	mov.w	r2, #256	; 0x100
    547a:	601a      	str	r2, [r3, #0]
				}
			}
		}

		/* Keepalive trigger fires at 3200/2^9 = 6.25 Hz */
		if ((next & 0x1ff) == 0)
    547c:	687b      	ldr	r3, [r7, #4]
    547e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5482:	2b00      	cmp	r3, #0
    5484:	d102      	bne.n	548c <TIMER0_IRQHandler+0xd4>
			keepalive_trigger = 1;
    5486:	4b10      	ldr	r3, [pc, #64]	; (54c8 <TIMER0_IRQHandler+0x110>)
    5488:	2201      	movs	r2, #1
    548a:	701a      	strb	r2, [r3, #0]

		/* Ack interrupt */
		T0MR0 = 3124 - clock_trim;
    548c:	4a0f      	ldr	r2, [pc, #60]	; (54cc <TIMER0_IRQHandler+0x114>)
    548e:	4b10      	ldr	r3, [pc, #64]	; (54d0 <TIMER0_IRQHandler+0x118>)
    5490:	681b      	ldr	r3, [r3, #0]
    5492:	f5c3 6343 	rsb	r3, r3, #3120	; 0xc30
    5496:	3304      	adds	r3, #4
    5498:	6013      	str	r3, [r2, #0]
		clock_trim = 0;
    549a:	4b0d      	ldr	r3, [pc, #52]	; (54d0 <TIMER0_IRQHandler+0x118>)
    549c:	2200      	movs	r2, #0
    549e:	601a      	str	r2, [r3, #0]
		T0IR = TIR_MR0_Interrupt;
    54a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    54a4:	2201      	movs	r2, #1
    54a6:	601a      	str	r2, [r3, #0]
	}
}
    54a8:	370c      	adds	r7, #12
    54aa:	46bd      	mov	sp, r7
    54ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    54b0:	4770      	bx	lr
    54b2:	bf00      	nop
    54b4:	10000be4 	.word	0x10000be4
    54b8:	10000458 	.word	0x10000458
    54bc:	1000097c 	.word	0x1000097c
    54c0:	1000097d 	.word	0x1000097d
    54c4:	2009c03c 	.word	0x2009c03c
    54c8:	10000be0 	.word	0x10000be0
    54cc:	40004018 	.word	0x40004018
    54d0:	10000984 	.word	0x10000984

000054d4 <EINT3_IRQHandler>:

/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
//static volatile u8 txledstate = 1;
void EINT3_IRQHandler()
{
    54d4:	b480      	push	{r7}
    54d6:	af00      	add	r7, sp, #0
	/* TODO - check specific source of shared interrupt */
	IO2IntClr = PIN_GIO6;            // clear interrupt
    54d8:	4b0b      	ldr	r3, [pc, #44]	; (5508 <EINT3_IRQHandler+0x34>)
    54da:	2204      	movs	r2, #4
    54dc:	601a      	str	r2, [r3, #0]
	cs_trigger = 1;                  // signal trigger
    54de:	4b0b      	ldr	r3, [pc, #44]	; (550c <EINT3_IRQHandler+0x38>)
    54e0:	2201      	movs	r2, #1
    54e2:	701a      	strb	r2, [r3, #0]
	cs_timestamp = CLK100NS;         // time at trigger
    54e4:	4b0a      	ldr	r3, [pc, #40]	; (5510 <EINT3_IRQHandler+0x3c>)
    54e6:	681b      	ldr	r3, [r3, #0]
    54e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    54ec:	f640 4235 	movw	r2, #3125	; 0xc35
    54f0:	fb02 f203 	mul.w	r2, r2, r3
    54f4:	4b07      	ldr	r3, [pc, #28]	; (5514 <EINT3_IRQHandler+0x40>)
    54f6:	681b      	ldr	r3, [r3, #0]
    54f8:	4413      	add	r3, r2
    54fa:	4a07      	ldr	r2, [pc, #28]	; (5518 <EINT3_IRQHandler+0x44>)
    54fc:	6013      	str	r3, [r2, #0]
}
    54fe:	46bd      	mov	sp, r7
    5500:	f85d 7b04 	ldr.w	r7, [sp], #4
    5504:	4770      	bx	lr
    5506:	bf00      	nop
    5508:	400280ac 	.word	0x400280ac
    550c:	100010b0 	.word	0x100010b0
    5510:	10000be4 	.word	0x10000be4
    5514:	40004008 	.word	0x40004008
    5518:	10000bdc 	.word	0x10000bdc
    551c:	00000000 	.word	0x00000000

00005520 <msleep>:

/* Sleep (busy wait) for 'millis' milliseconds. The 'wait' routines in
 * ubertooth.c are matched to the clock setup at boot time and can not
 * be used while the board is running at 100MHz. */
static void msleep(uint32_t millis)
{
    5520:	b5b0      	push	{r4, r5, r7, lr}
    5522:	b084      	sub	sp, #16
    5524:	af00      	add	r7, sp, #0
    5526:	6078      	str	r0, [r7, #4]
	uint32_t stop_at = clkn + (millis * 1000 / 312.5);  // millis -> clkn ticks
    5528:	4b19      	ldr	r3, [pc, #100]	; (5590 <msleep+0x70>)
    552a:	681b      	ldr	r3, [r3, #0]
    552c:	4618      	mov	r0, r3
    552e:	f005 fdd3 	bl	b0d8 <__aeabi_ui2d>
    5532:	4604      	mov	r4, r0
    5534:	460d      	mov	r5, r1
    5536:	687b      	ldr	r3, [r7, #4]
    5538:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    553c:	fb02 f303 	mul.w	r3, r2, r3
    5540:	4618      	mov	r0, r3
    5542:	f005 fdc9 	bl	b0d8 <__aeabi_ui2d>
    5546:	4602      	mov	r2, r0
    5548:	460b      	mov	r3, r1
    554a:	4610      	mov	r0, r2
    554c:	4619      	mov	r1, r3
    554e:	a30e      	add	r3, pc, #56	; (adr r3, 5588 <msleep+0x68>)
    5550:	e9d3 2300 	ldrd	r2, r3, [r3]
    5554:	f005 ff60 	bl	b418 <__aeabi_ddiv>
    5558:	4602      	mov	r2, r0
    555a:	460b      	mov	r3, r1
    555c:	4620      	mov	r0, r4
    555e:	4629      	mov	r1, r5
    5560:	f005 fc7e 	bl	ae60 <__adddf3>
    5564:	4602      	mov	r2, r0
    5566:	460b      	mov	r3, r1
    5568:	4610      	mov	r0, r2
    556a:	4619      	mov	r1, r3
    556c:	f006 f83c 	bl	b5e8 <__aeabi_d2uiz>
    5570:	4603      	mov	r3, r0
    5572:	60fb      	str	r3, [r7, #12]
	do { } while (clkn < stop_at);                   // TODO: handle wrapping
    5574:	4b06      	ldr	r3, [pc, #24]	; (5590 <msleep+0x70>)
    5576:	681a      	ldr	r2, [r3, #0]
    5578:	68fb      	ldr	r3, [r7, #12]
    557a:	429a      	cmp	r2, r3
    557c:	d3fa      	bcc.n	5574 <msleep+0x54>
}
    557e:	3710      	adds	r7, #16
    5580:	46bd      	mov	sp, r7
    5582:	bdb0      	pop	{r4, r5, r7, pc}
    5584:	f3af 8000 	nop.w
    5588:	00000000 	.word	0x00000000
    558c:	40738800 	.word	0x40738800
    5590:	10000be4 	.word	0x10000be4

00005594 <dma_init>:

static void dma_init()
{
    5594:	b480      	push	{r7}
    5596:	af00      	add	r7, sp, #0
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    5598:	4a3f      	ldr	r2, [pc, #252]	; (5698 <dma_init+0x104>)
    559a:	4b3f      	ldr	r3, [pc, #252]	; (5698 <dma_init+0x104>)
    559c:	681b      	ldr	r3, [r3, #0]
    559e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    55a2:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    55a4:	4b3d      	ldr	r3, [pc, #244]	; (569c <dma_init+0x108>)
    55a6:	2200      	movs	r2, #0
    55a8:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    55aa:	4b3d      	ldr	r3, [pc, #244]	; (56a0 <dma_init+0x10c>)
    55ac:	2200      	movs	r2, #0
    55ae:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    55b0:	4b3c      	ldr	r3, [pc, #240]	; (56a4 <dma_init+0x110>)
    55b2:	2200      	movs	r2, #0
    55b4:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    55b6:	4b3c      	ldr	r3, [pc, #240]	; (56a8 <dma_init+0x114>)
    55b8:	2200      	movs	r2, #0
    55ba:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    55bc:	4b3b      	ldr	r3, [pc, #236]	; (56ac <dma_init+0x118>)
    55be:	2200      	movs	r2, #0
    55c0:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    55c2:	4b3b      	ldr	r3, [pc, #236]	; (56b0 <dma_init+0x11c>)
    55c4:	2200      	movs	r2, #0
    55c6:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    55c8:	4b3a      	ldr	r3, [pc, #232]	; (56b4 <dma_init+0x120>)
    55ca:	2200      	movs	r2, #0
    55cc:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    55ce:	4b3a      	ldr	r3, [pc, #232]	; (56b8 <dma_init+0x124>)
    55d0:	2200      	movs	r2, #0
    55d2:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    55d4:	4b39      	ldr	r3, [pc, #228]	; (56bc <dma_init+0x128>)
    55d6:	22ff      	movs	r2, #255	; 0xff
    55d8:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    55da:	4b39      	ldr	r3, [pc, #228]	; (56c0 <dma_init+0x12c>)
    55dc:	22ff      	movs	r2, #255	; 0xff
    55de:	601a      	str	r2, [r3, #0]

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
    55e0:	4b38      	ldr	r3, [pc, #224]	; (56c4 <dma_init+0x130>)
    55e2:	4a39      	ldr	r2, [pc, #228]	; (56c8 <dma_init+0x134>)
    55e4:	601a      	str	r2, [r3, #0]
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
    55e6:	4a39      	ldr	r2, [pc, #228]	; (56cc <dma_init+0x138>)
    55e8:	4b36      	ldr	r3, [pc, #216]	; (56c4 <dma_init+0x130>)
    55ea:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
    55ec:	4a38      	ldr	r2, [pc, #224]	; (56d0 <dma_init+0x13c>)
    55ee:	4b35      	ldr	r3, [pc, #212]	; (56c4 <dma_init+0x130>)
    55f0:	609a      	str	r2, [r3, #8]
	rx_dma_lli1.control = (DMA_SIZE) |
    55f2:	4b34      	ldr	r3, [pc, #208]	; (56c4 <dma_init+0x130>)
    55f4:	4a37      	ldr	r2, [pc, #220]	; (56d4 <dma_init+0x140>)
    55f6:	60da      	str	r2, [r3, #12]
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
    55f8:	4b35      	ldr	r3, [pc, #212]	; (56d0 <dma_init+0x13c>)
    55fa:	4a33      	ldr	r2, [pc, #204]	; (56c8 <dma_init+0x134>)
    55fc:	601a      	str	r2, [r3, #0]
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
    55fe:	4a36      	ldr	r2, [pc, #216]	; (56d8 <dma_init+0x144>)
    5600:	4b33      	ldr	r3, [pc, #204]	; (56d0 <dma_init+0x13c>)
    5602:	605a      	str	r2, [r3, #4]
	rx_dma_lli2.next_lli = (u32)&rx_dma_lli1;
    5604:	4a2f      	ldr	r2, [pc, #188]	; (56c4 <dma_init+0x130>)
    5606:	4b32      	ldr	r3, [pc, #200]	; (56d0 <dma_init+0x13c>)
    5608:	609a      	str	r2, [r3, #8]
	rx_dma_lli2.control = (DMA_SIZE) |
    560a:	4b31      	ldr	r3, [pc, #196]	; (56d0 <dma_init+0x13c>)
    560c:	4a31      	ldr	r2, [pc, #196]	; (56d4 <dma_init+0x140>)
    560e:	60da      	str	r2, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* disable DMA interrupts */
	ICER0 = ICER0_ICE_DMA;
    5610:	4b32      	ldr	r3, [pc, #200]	; (56dc <dma_init+0x148>)
    5612:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5616:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    5618:	4b31      	ldr	r3, [pc, #196]	; (56e0 <dma_init+0x14c>)
    561a:	2201      	movs	r2, #1
    561c:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    561e:	bf00      	nop
    5620:	4b2f      	ldr	r3, [pc, #188]	; (56e0 <dma_init+0x14c>)
    5622:	681b      	ldr	r3, [r3, #0]
    5624:	f003 0301 	and.w	r3, r3, #1
    5628:	2b00      	cmp	r3, #0
    562a:	d0f9      	beq.n	5620 <dma_init+0x8c>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    562c:	4a2d      	ldr	r2, [pc, #180]	; (56e4 <dma_init+0x150>)
    562e:	4b25      	ldr	r3, [pc, #148]	; (56c4 <dma_init+0x130>)
    5630:	681b      	ldr	r3, [r3, #0]
    5632:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    5634:	4a2c      	ldr	r2, [pc, #176]	; (56e8 <dma_init+0x154>)
    5636:	4b23      	ldr	r3, [pc, #140]	; (56c4 <dma_init+0x130>)
    5638:	685b      	ldr	r3, [r3, #4]
    563a:	6013      	str	r3, [r2, #0]
	DMACC0LLI = rx_dma_lli1.next_lli;
    563c:	4a2b      	ldr	r2, [pc, #172]	; (56ec <dma_init+0x158>)
    563e:	4b21      	ldr	r3, [pc, #132]	; (56c4 <dma_init+0x130>)
    5640:	689b      	ldr	r3, [r3, #8]
    5642:	6013      	str	r3, [r2, #0]
	DMACC0Control = rx_dma_lli1.control;
    5644:	4a2a      	ldr	r2, [pc, #168]	; (56f0 <dma_init+0x15c>)
    5646:	4b1f      	ldr	r3, [pc, #124]	; (56c4 <dma_init+0x130>)
    5648:	68db      	ldr	r3, [r3, #12]
    564a:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    564c:	4b13      	ldr	r3, [pc, #76]	; (569c <dma_init+0x108>)
    564e:	f24d 0206 	movw	r2, #53254	; 0xd006
    5652:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5654:	4b27      	ldr	r3, [pc, #156]	; (56f4 <dma_init+0x160>)
    5656:	681b      	ldr	r3, [r3, #0]
    5658:	0d1b      	lsrs	r3, r3, #20
    565a:	b2db      	uxtb	r3, r3
    565c:	4a26      	ldr	r2, [pc, #152]	; (56f8 <dma_init+0x164>)
    565e:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    5660:	4b24      	ldr	r3, [pc, #144]	; (56f4 <dma_init+0x160>)
    5662:	681b      	ldr	r3, [r3, #0]
    5664:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5668:	f640 4235 	movw	r2, #3125	; 0xc35
    566c:	fb02 f203 	mul.w	r2, r2, r3
    5670:	4b22      	ldr	r3, [pc, #136]	; (56fc <dma_init+0x168>)
    5672:	681b      	ldr	r3, [r3, #0]
    5674:	4413      	add	r3, r2
    5676:	4a22      	ldr	r2, [pc, #136]	; (5700 <dma_init+0x16c>)
    5678:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    567a:	4b22      	ldr	r3, [pc, #136]	; (5704 <dma_init+0x170>)
    567c:	881b      	ldrh	r3, [r3, #0]
    567e:	b29a      	uxth	r2, r3
    5680:	4b21      	ldr	r3, [pc, #132]	; (5708 <dma_init+0x174>)
    5682:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    5684:	4b21      	ldr	r3, [pc, #132]	; (570c <dma_init+0x178>)
    5686:	2200      	movs	r2, #0
    5688:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    568a:	4b21      	ldr	r3, [pc, #132]	; (5710 <dma_init+0x17c>)
    568c:	2200      	movs	r2, #0
    568e:	601a      	str	r2, [r3, #0]
}
    5690:	46bd      	mov	sp, r7
    5692:	f85d 7b04 	ldr.w	r7, [sp], #4
    5696:	4770      	bx	lr
    5698:	400fc0c4 	.word	0x400fc0c4
    569c:	50004110 	.word	0x50004110
    56a0:	50004130 	.word	0x50004130
    56a4:	50004150 	.word	0x50004150
    56a8:	50004170 	.word	0x50004170
    56ac:	50004190 	.word	0x50004190
    56b0:	500041b0 	.word	0x500041b0
    56b4:	500041d0 	.word	0x500041d0
    56b8:	500041f0 	.word	0x500041f0
    56bc:	50004008 	.word	0x50004008
    56c0:	50004010 	.word	0x50004010
    56c4:	10001060 	.word	0x10001060
    56c8:	40030008 	.word	0x40030008
    56cc:	10001078 	.word	0x10001078
    56d0:	10000bcc 	.word	0x10000bcc
    56d4:	88009032 	.word	0x88009032
    56d8:	1000102c 	.word	0x1000102c
    56dc:	e000e180 	.word	0xe000e180
    56e0:	50004030 	.word	0x50004030
    56e4:	50004100 	.word	0x50004100
    56e8:	50004104 	.word	0x50004104
    56ec:	50004108 	.word	0x50004108
    56f0:	5000410c 	.word	0x5000410c
    56f4:	10000be4 	.word	0x10000be4
    56f8:	10000be8 	.word	0x10000be8
    56fc:	40004008 	.word	0x40004008
    5700:	10001020 	.word	0x10001020
    5704:	1000049c 	.word	0x1000049c
    5708:	1000098a 	.word	0x1000098a
    570c:	10000b00 	.word	0x10000b00
    5710:	100010ac 	.word	0x100010ac

00005714 <dma_init_le>:

static void dma_init_le()
{
    5714:	b480      	push	{r7}
    5716:	b083      	sub	sp, #12
    5718:	af00      	add	r7, sp, #0
	int i;

	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    571a:	4a4b      	ldr	r2, [pc, #300]	; (5848 <dma_init_le+0x134>)
    571c:	4b4a      	ldr	r3, [pc, #296]	; (5848 <dma_init_le+0x134>)
    571e:	681b      	ldr	r3, [r3, #0]
    5720:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    5724:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    5726:	4b49      	ldr	r3, [pc, #292]	; (584c <dma_init_le+0x138>)
    5728:	2200      	movs	r2, #0
    572a:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    572c:	4b48      	ldr	r3, [pc, #288]	; (5850 <dma_init_le+0x13c>)
    572e:	2200      	movs	r2, #0
    5730:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    5732:	4b48      	ldr	r3, [pc, #288]	; (5854 <dma_init_le+0x140>)
    5734:	2200      	movs	r2, #0
    5736:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5738:	4b47      	ldr	r3, [pc, #284]	; (5858 <dma_init_le+0x144>)
    573a:	2200      	movs	r2, #0
    573c:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    573e:	4b47      	ldr	r3, [pc, #284]	; (585c <dma_init_le+0x148>)
    5740:	2200      	movs	r2, #0
    5742:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5744:	4b46      	ldr	r3, [pc, #280]	; (5860 <dma_init_le+0x14c>)
    5746:	2200      	movs	r2, #0
    5748:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    574a:	4b46      	ldr	r3, [pc, #280]	; (5864 <dma_init_le+0x150>)
    574c:	2200      	movs	r2, #0
    574e:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    5750:	4b45      	ldr	r3, [pc, #276]	; (5868 <dma_init_le+0x154>)
    5752:	2200      	movs	r2, #0
    5754:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5756:	4b45      	ldr	r3, [pc, #276]	; (586c <dma_init_le+0x158>)
    5758:	22ff      	movs	r2, #255	; 0xff
    575a:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    575c:	4b44      	ldr	r3, [pc, #272]	; (5870 <dma_init_le+0x15c>)
    575e:	22ff      	movs	r2, #255	; 0xff
    5760:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    5762:	4b44      	ldr	r3, [pc, #272]	; (5874 <dma_init_le+0x160>)
    5764:	2201      	movs	r2, #1
    5766:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    5768:	bf00      	nop
    576a:	4b42      	ldr	r3, [pc, #264]	; (5874 <dma_init_le+0x160>)
    576c:	681b      	ldr	r3, [r3, #0]
    576e:	f003 0301 	and.w	r3, r3, #1
    5772:	2b00      	cmp	r3, #0
    5774:	d0f9      	beq.n	576a <dma_init_le+0x56>

	for (i = 0; i < 11; ++i) {
    5776:	2300      	movs	r3, #0
    5778:	607b      	str	r3, [r7, #4]
    577a:	e02a      	b.n	57d2 <dma_init_le+0xbe>
		le_dma_lli[i].src = (u32)&(DIO_SSP_DR);
    577c:	4a3e      	ldr	r2, [pc, #248]	; (5878 <dma_init_le+0x164>)
    577e:	687b      	ldr	r3, [r7, #4]
    5780:	011b      	lsls	r3, r3, #4
    5782:	4413      	add	r3, r2
    5784:	4a3d      	ldr	r2, [pc, #244]	; (587c <dma_init_le+0x168>)
    5786:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].dest = (u32)&rxbuf1[4 * i];
    5788:	687b      	ldr	r3, [r7, #4]
    578a:	009b      	lsls	r3, r3, #2
    578c:	4a3c      	ldr	r2, [pc, #240]	; (5880 <dma_init_le+0x16c>)
    578e:	4413      	add	r3, r2
    5790:	4619      	mov	r1, r3
    5792:	4a39      	ldr	r2, [pc, #228]	; (5878 <dma_init_le+0x164>)
    5794:	687b      	ldr	r3, [r7, #4]
    5796:	011b      	lsls	r3, r3, #4
    5798:	4413      	add	r3, r2
    579a:	6059      	str	r1, [r3, #4]
		le_dma_lli[i].next_lli = i < 10 ? (u32)&le_dma_lli[i+1] : 0;
    579c:	687b      	ldr	r3, [r7, #4]
    579e:	2b09      	cmp	r3, #9
    57a0:	dc06      	bgt.n	57b0 <dma_init_le+0x9c>
    57a2:	687b      	ldr	r3, [r7, #4]
    57a4:	3301      	adds	r3, #1
    57a6:	011b      	lsls	r3, r3, #4
    57a8:	4a33      	ldr	r2, [pc, #204]	; (5878 <dma_init_le+0x164>)
    57aa:	4413      	add	r3, r2
    57ac:	461a      	mov	r2, r3
    57ae:	e000      	b.n	57b2 <dma_init_le+0x9e>
    57b0:	2200      	movs	r2, #0
    57b2:	4931      	ldr	r1, [pc, #196]	; (5878 <dma_init_le+0x164>)
    57b4:	687b      	ldr	r3, [r7, #4]
    57b6:	011b      	lsls	r3, r3, #4
    57b8:	440b      	add	r3, r1
    57ba:	3308      	adds	r3, #8
    57bc:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].control = 4 |
    57be:	4a2e      	ldr	r2, [pc, #184]	; (5878 <dma_init_le+0x164>)
    57c0:	687b      	ldr	r3, [r7, #4]
    57c2:	011b      	lsls	r3, r3, #4
    57c4:	4413      	add	r3, r2
    57c6:	3308      	adds	r3, #8
    57c8:	4a2e      	ldr	r2, [pc, #184]	; (5884 <dma_init_le+0x170>)
    57ca:	605a      	str	r2, [r3, #4]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    57cc:	687b      	ldr	r3, [r7, #4]
    57ce:	3301      	adds	r3, #1
    57d0:	607b      	str	r3, [r7, #4]
    57d2:	687b      	ldr	r3, [r7, #4]
    57d4:	2b0a      	cmp	r3, #10
    57d6:	ddd1      	ble.n	577c <dma_init_le+0x68>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    57d8:	4a2b      	ldr	r2, [pc, #172]	; (5888 <dma_init_le+0x174>)
    57da:	4b27      	ldr	r3, [pc, #156]	; (5878 <dma_init_le+0x164>)
    57dc:	681b      	ldr	r3, [r3, #0]
    57de:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    57e0:	4a2a      	ldr	r2, [pc, #168]	; (588c <dma_init_le+0x178>)
    57e2:	4b25      	ldr	r3, [pc, #148]	; (5878 <dma_init_le+0x164>)
    57e4:	685b      	ldr	r3, [r3, #4]
    57e6:	6013      	str	r3, [r2, #0]
	DMACC0LLI = le_dma_lli[0].next_lli;
    57e8:	4a29      	ldr	r2, [pc, #164]	; (5890 <dma_init_le+0x17c>)
    57ea:	4b23      	ldr	r3, [pc, #140]	; (5878 <dma_init_le+0x164>)
    57ec:	689b      	ldr	r3, [r3, #8]
    57ee:	6013      	str	r3, [r2, #0]
	DMACC0Control = le_dma_lli[0].control;
    57f0:	4a28      	ldr	r2, [pc, #160]	; (5894 <dma_init_le+0x180>)
    57f2:	4b21      	ldr	r3, [pc, #132]	; (5878 <dma_init_le+0x164>)
    57f4:	68db      	ldr	r3, [r3, #12]
    57f6:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    57f8:	4b14      	ldr	r3, [pc, #80]	; (584c <dma_init_le+0x138>)
    57fa:	f24d 0206 	movw	r2, #53254	; 0xd006
    57fe:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5800:	4b25      	ldr	r3, [pc, #148]	; (5898 <dma_init_le+0x184>)
    5802:	681b      	ldr	r3, [r3, #0]
    5804:	0d1b      	lsrs	r3, r3, #20
    5806:	b2db      	uxtb	r3, r3
    5808:	4a24      	ldr	r2, [pc, #144]	; (589c <dma_init_le+0x188>)
    580a:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    580c:	4b22      	ldr	r3, [pc, #136]	; (5898 <dma_init_le+0x184>)
    580e:	681b      	ldr	r3, [r3, #0]
    5810:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5814:	f640 4235 	movw	r2, #3125	; 0xc35
    5818:	fb02 f203 	mul.w	r2, r2, r3
    581c:	4b20      	ldr	r3, [pc, #128]	; (58a0 <dma_init_le+0x18c>)
    581e:	681b      	ldr	r3, [r3, #0]
    5820:	4413      	add	r3, r2
    5822:	4a20      	ldr	r2, [pc, #128]	; (58a4 <dma_init_le+0x190>)
    5824:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    5826:	4b20      	ldr	r3, [pc, #128]	; (58a8 <dma_init_le+0x194>)
    5828:	881b      	ldrh	r3, [r3, #0]
    582a:	b29a      	uxth	r2, r3
    582c:	4b1f      	ldr	r3, [pc, #124]	; (58ac <dma_init_le+0x198>)
    582e:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    5830:	4b1f      	ldr	r3, [pc, #124]	; (58b0 <dma_init_le+0x19c>)
    5832:	2200      	movs	r2, #0
    5834:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    5836:	4b1f      	ldr	r3, [pc, #124]	; (58b4 <dma_init_le+0x1a0>)
    5838:	2200      	movs	r2, #0
    583a:	601a      	str	r2, [r3, #0]
}
    583c:	370c      	adds	r7, #12
    583e:	46bd      	mov	sp, r7
    5840:	f85d 7b04 	ldr.w	r7, [sp], #4
    5844:	4770      	bx	lr
    5846:	bf00      	nop
    5848:	400fc0c4 	.word	0x400fc0c4
    584c:	50004110 	.word	0x50004110
    5850:	50004130 	.word	0x50004130
    5854:	50004150 	.word	0x50004150
    5858:	50004170 	.word	0x50004170
    585c:	50004190 	.word	0x50004190
    5860:	500041b0 	.word	0x500041b0
    5864:	500041d0 	.word	0x500041d0
    5868:	500041f0 	.word	0x500041f0
    586c:	50004008 	.word	0x50004008
    5870:	50004010 	.word	0x50004010
    5874:	50004030 	.word	0x50004030
    5878:	10000b08 	.word	0x10000b08
    587c:	40030008 	.word	0x40030008
    5880:	10001078 	.word	0x10001078
    5884:	88001004 	.word	0x88001004
    5888:	50004100 	.word	0x50004100
    588c:	50004104 	.word	0x50004104
    5890:	50004108 	.word	0x50004108
    5894:	5000410c 	.word	0x5000410c
    5898:	10000be4 	.word	0x10000be4
    589c:	10000be8 	.word	0x10000be8
    58a0:	40004008 	.word	0x40004008
    58a4:	10001020 	.word	0x10001020
    58a8:	1000049c 	.word	0x1000049c
    58ac:	1000098a 	.word	0x1000098a
    58b0:	10000b00 	.word	0x10000b00
    58b4:	100010ac 	.word	0x100010ac

000058b8 <bt_stream_dma_handler>:

void bt_stream_dma_handler(void) {
    58b8:	b480      	push	{r7}
    58ba:	af00      	add	r7, sp, #0
	idle_buf_clkn_high = active_buf_clkn_high;
    58bc:	4b25      	ldr	r3, [pc, #148]	; (5954 <bt_stream_dma_handler+0x9c>)
    58be:	681b      	ldr	r3, [r3, #0]
    58c0:	4a25      	ldr	r2, [pc, #148]	; (5958 <bt_stream_dma_handler+0xa0>)
    58c2:	6013      	str	r3, [r2, #0]
	active_buf_clkn_high = (clkn >> 20) & 0xff;
    58c4:	4b25      	ldr	r3, [pc, #148]	; (595c <bt_stream_dma_handler+0xa4>)
    58c6:	681b      	ldr	r3, [r3, #0]
    58c8:	0d1b      	lsrs	r3, r3, #20
    58ca:	b2db      	uxtb	r3, r3
    58cc:	4a21      	ldr	r2, [pc, #132]	; (5954 <bt_stream_dma_handler+0x9c>)
    58ce:	6013      	str	r3, [r2, #0]

	idle_buf_clk100ns = active_buf_clk100ns;
    58d0:	4b23      	ldr	r3, [pc, #140]	; (5960 <bt_stream_dma_handler+0xa8>)
    58d2:	681b      	ldr	r3, [r3, #0]
    58d4:	4a23      	ldr	r2, [pc, #140]	; (5964 <bt_stream_dma_handler+0xac>)
    58d6:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    58d8:	4b20      	ldr	r3, [pc, #128]	; (595c <bt_stream_dma_handler+0xa4>)
    58da:	681b      	ldr	r3, [r3, #0]
    58dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    58e0:	f640 4235 	movw	r2, #3125	; 0xc35
    58e4:	fb02 f203 	mul.w	r2, r2, r3
    58e8:	4b1f      	ldr	r3, [pc, #124]	; (5968 <bt_stream_dma_handler+0xb0>)
    58ea:	681b      	ldr	r3, [r3, #0]
    58ec:	4413      	add	r3, r2
    58ee:	4a1c      	ldr	r2, [pc, #112]	; (5960 <bt_stream_dma_handler+0xa8>)
    58f0:	6013      	str	r3, [r2, #0]

	idle_buf_channel = active_buf_channel;
    58f2:	4b1e      	ldr	r3, [pc, #120]	; (596c <bt_stream_dma_handler+0xb4>)
    58f4:	881b      	ldrh	r3, [r3, #0]
    58f6:	b29a      	uxth	r2, r3
    58f8:	4b1d      	ldr	r3, [pc, #116]	; (5970 <bt_stream_dma_handler+0xb8>)
    58fa:	801a      	strh	r2, [r3, #0]
	active_buf_channel = channel;
    58fc:	4b1d      	ldr	r3, [pc, #116]	; (5974 <bt_stream_dma_handler+0xbc>)
    58fe:	881b      	ldrh	r3, [r3, #0]
    5900:	b29a      	uxth	r2, r3
    5902:	4b1a      	ldr	r3, [pc, #104]	; (596c <bt_stream_dma_handler+0xb4>)
    5904:	801a      	strh	r2, [r3, #0]

	/* interrupt on channel 0 */
	if (DMACIntStat & (1 << 0)) {
    5906:	4b1c      	ldr	r3, [pc, #112]	; (5978 <bt_stream_dma_handler+0xc0>)
    5908:	681b      	ldr	r3, [r3, #0]
    590a:	f003 0301 	and.w	r3, r3, #1
    590e:	2b00      	cmp	r3, #0
    5910:	d01b      	beq.n	594a <bt_stream_dma_handler+0x92>
		if (DMACIntTCStat & (1 << 0)) {
    5912:	4b1a      	ldr	r3, [pc, #104]	; (597c <bt_stream_dma_handler+0xc4>)
    5914:	681b      	ldr	r3, [r3, #0]
    5916:	f003 0301 	and.w	r3, r3, #1
    591a:	2b00      	cmp	r3, #0
    591c:	d007      	beq.n	592e <bt_stream_dma_handler+0x76>
			DMACIntTCClear = (1 << 0);
    591e:	4b18      	ldr	r3, [pc, #96]	; (5980 <bt_stream_dma_handler+0xc8>)
    5920:	2201      	movs	r2, #1
    5922:	601a      	str	r2, [r3, #0]
			++rx_tc;
    5924:	4b17      	ldr	r3, [pc, #92]	; (5984 <bt_stream_dma_handler+0xcc>)
    5926:	681b      	ldr	r3, [r3, #0]
    5928:	3301      	adds	r3, #1
    592a:	4a16      	ldr	r2, [pc, #88]	; (5984 <bt_stream_dma_handler+0xcc>)
    592c:	6013      	str	r3, [r2, #0]
		}
		if (DMACIntErrStat & (1 << 0)) {
    592e:	4b16      	ldr	r3, [pc, #88]	; (5988 <bt_stream_dma_handler+0xd0>)
    5930:	681b      	ldr	r3, [r3, #0]
    5932:	f003 0301 	and.w	r3, r3, #1
    5936:	2b00      	cmp	r3, #0
    5938:	d007      	beq.n	594a <bt_stream_dma_handler+0x92>
			DMACIntErrClr = (1 << 0);
    593a:	4b14      	ldr	r3, [pc, #80]	; (598c <bt_stream_dma_handler+0xd4>)
    593c:	2201      	movs	r2, #1
    593e:	601a      	str	r2, [r3, #0]
			++rx_err;
    5940:	4b13      	ldr	r3, [pc, #76]	; (5990 <bt_stream_dma_handler+0xd8>)
    5942:	681b      	ldr	r3, [r3, #0]
    5944:	3301      	adds	r3, #1
    5946:	4a12      	ldr	r2, [pc, #72]	; (5990 <bt_stream_dma_handler+0xd8>)
    5948:	6013      	str	r3, [r2, #0]
		}
	}
}
    594a:	46bd      	mov	sp, r7
    594c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5950:	4770      	bx	lr
    5952:	bf00      	nop
    5954:	10000be8 	.word	0x10000be8
    5958:	10001028 	.word	0x10001028
    595c:	10000be4 	.word	0x10000be4
    5960:	10001020 	.word	0x10001020
    5964:	10000bc8 	.word	0x10000bc8
    5968:	40004008 	.word	0x40004008
    596c:	1000098a 	.word	0x1000098a
    5970:	10000988 	.word	0x10000988
    5974:	1000049c 	.word	0x1000049c
    5978:	50004000 	.word	0x50004000
    597c:	50004004 	.word	0x50004004
    5980:	50004008 	.word	0x50004008
    5984:	10000b00 	.word	0x10000b00
    5988:	5000400c 	.word	0x5000400c
    598c:	50004010 	.word	0x50004010
    5990:	100010ac 	.word	0x100010ac

00005994 <DMA_IRQHandler>:

void DMA_IRQHandler()
{
    5994:	b580      	push	{r7, lr}
    5996:	af00      	add	r7, sp, #0
	switch (mode) {
    5998:	4b12      	ldr	r3, [pc, #72]	; (59e4 <DMA_IRQHandler+0x50>)
    599a:	781b      	ldrb	r3, [r3, #0]
    599c:	b2db      	uxtb	r3, r3
    599e:	3b01      	subs	r3, #1
    59a0:	2b0b      	cmp	r3, #11
    59a2:	d81e      	bhi.n	59e2 <DMA_IRQHandler+0x4e>
    59a4:	a201      	add	r2, pc, #4	; (adr r2, 59ac <DMA_IRQHandler+0x18>)
    59a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    59aa:	bf00      	nop
    59ac:	000059dd 	.word	0x000059dd
    59b0:	000059e3 	.word	0x000059e3
    59b4:	000059e3 	.word	0x000059e3
    59b8:	000059dd 	.word	0x000059dd
    59bc:	000059e3 	.word	0x000059e3
    59c0:	000059e3 	.word	0x000059e3
    59c4:	000059e3 	.word	0x000059e3
    59c8:	000059dd 	.word	0x000059dd
    59cc:	000059dd 	.word	0x000059dd
    59d0:	000059dd 	.word	0x000059dd
    59d4:	000059e3 	.word	0x000059e3
    59d8:	000059dd 	.word	0x000059dd
		case MODE_SPECAN:
		case MODE_BT_FOLLOW:
		case MODE_BT_FOLLOW_LE:
		case MODE_BT_PROMISC_LE:
		case MODE_BT_SLAVE_LE:
			bt_stream_dma_handler();
    59dc:	f7ff ff6c 	bl	58b8 <bt_stream_dma_handler>
			break;
    59e0:	bf00      	nop
	}
}
    59e2:	bd80      	pop	{r7, pc}
    59e4:	10000a3e 	.word	0x10000a3e

000059e8 <dio_ssp_start>:

static void dio_ssp_start()
{
    59e8:	b480      	push	{r7}
    59ea:	af00      	add	r7, sp, #0
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    59ec:	4b10      	ldr	r3, [pc, #64]	; (5a30 <dio_ssp_start+0x48>)
    59ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    59f2:	601a      	str	r2, [r3, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    59f4:	4a0f      	ldr	r2, [pc, #60]	; (5a34 <dio_ssp_start+0x4c>)
    59f6:	4b0f      	ldr	r3, [pc, #60]	; (5a34 <dio_ssp_start+0x4c>)
    59f8:	681b      	ldr	r3, [r3, #0]
    59fa:	f043 0301 	orr.w	r3, r3, #1
    59fe:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    5a00:	4a0d      	ldr	r2, [pc, #52]	; (5a38 <dio_ssp_start+0x50>)
    5a02:	4b0d      	ldr	r3, [pc, #52]	; (5a38 <dio_ssp_start+0x50>)
    5a04:	681b      	ldr	r3, [r3, #0]
    5a06:	f043 0302 	orr.w	r3, r3, #2
    5a0a:	6013      	str	r3, [r2, #0]
	
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
    5a0c:	4a0b      	ldr	r2, [pc, #44]	; (5a3c <dio_ssp_start+0x54>)
    5a0e:	4b0b      	ldr	r3, [pc, #44]	; (5a3c <dio_ssp_start+0x54>)
    5a10:	681b      	ldr	r3, [r3, #0]
    5a12:	f043 0301 	orr.w	r3, r3, #1
    5a16:	6013      	str	r3, [r2, #0]
	ISER0 = ISER0_ISE_DMA;
    5a18:	4b09      	ldr	r3, [pc, #36]	; (5a40 <dio_ssp_start+0x58>)
    5a1a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5a1e:	601a      	str	r2, [r3, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
    5a20:	4b08      	ldr	r3, [pc, #32]	; (5a44 <dio_ssp_start+0x5c>)
    5a22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5a26:	601a      	str	r2, [r3, #0]
}
    5a28:	46bd      	mov	sp, r7
    5a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a2e:	4770      	bx	lr
    5a30:	2009c098 	.word	0x2009c098
    5a34:	40030024 	.word	0x40030024
    5a38:	40030004 	.word	0x40030004
    5a3c:	50004110 	.word	0x50004110
    5a40:	e000e100 	.word	0xe000e100
    5a44:	2009c09c 	.word	0x2009c09c

00005a48 <dio_ssp_stop>:

static void dio_ssp_stop()
{
    5a48:	b480      	push	{r7}
    5a4a:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    5a4c:	4b21      	ldr	r3, [pc, #132]	; (5ad4 <dio_ssp_stop+0x8c>)
    5a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5a52:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5a54:	4a20      	ldr	r2, [pc, #128]	; (5ad8 <dio_ssp_stop+0x90>)
    5a56:	4b20      	ldr	r3, [pc, #128]	; (5ad8 <dio_ssp_stop+0x90>)
    5a58:	681b      	ldr	r3, [r3, #0]
    5a5a:	f023 0301 	bic.w	r3, r3, #1
    5a5e:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    5a60:	4a1e      	ldr	r2, [pc, #120]	; (5adc <dio_ssp_stop+0x94>)
    5a62:	4b1e      	ldr	r3, [pc, #120]	; (5adc <dio_ssp_stop+0x94>)
    5a64:	681b      	ldr	r3, [r3, #0]
    5a66:	f023 0302 	bic.w	r3, r3, #2
    5a6a:	6013      	str	r3, [r2, #0]

	// disable DMA engine:
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 607

	// disable DMA interrupts
	ICER0 = ICER0_ICE_DMA;
    5a6c:	4b1c      	ldr	r3, [pc, #112]	; (5ae0 <dio_ssp_stop+0x98>)
    5a6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5a72:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    5a74:	4b1b      	ldr	r3, [pc, #108]	; (5ae4 <dio_ssp_stop+0x9c>)
    5a76:	2200      	movs	r2, #0
    5a78:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5a7a:	4b1b      	ldr	r3, [pc, #108]	; (5ae8 <dio_ssp_stop+0xa0>)
    5a7c:	2200      	movs	r2, #0
    5a7e:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    5a80:	4b1a      	ldr	r3, [pc, #104]	; (5aec <dio_ssp_stop+0xa4>)
    5a82:	2200      	movs	r2, #0
    5a84:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5a86:	4b1a      	ldr	r3, [pc, #104]	; (5af0 <dio_ssp_stop+0xa8>)
    5a88:	2200      	movs	r2, #0
    5a8a:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    5a8c:	4b19      	ldr	r3, [pc, #100]	; (5af4 <dio_ssp_stop+0xac>)
    5a8e:	2200      	movs	r2, #0
    5a90:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5a92:	4b19      	ldr	r3, [pc, #100]	; (5af8 <dio_ssp_stop+0xb0>)
    5a94:	2200      	movs	r2, #0
    5a96:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    5a98:	4b18      	ldr	r3, [pc, #96]	; (5afc <dio_ssp_stop+0xb4>)
    5a9a:	2200      	movs	r2, #0
    5a9c:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    5a9e:	4b18      	ldr	r3, [pc, #96]	; (5b00 <dio_ssp_stop+0xb8>)
    5aa0:	2200      	movs	r2, #0
    5aa2:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5aa4:	4b17      	ldr	r3, [pc, #92]	; (5b04 <dio_ssp_stop+0xbc>)
    5aa6:	22ff      	movs	r2, #255	; 0xff
    5aa8:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5aaa:	4b17      	ldr	r3, [pc, #92]	; (5b08 <dio_ssp_stop+0xc0>)
    5aac:	22ff      	movs	r2, #255	; 0xff
    5aae:	601a      	str	r2, [r3, #0]

	// Disable the DMA controller by writing 0 to the DMA Enable bit in the DMACConfig
	// register.
	DMACConfig &= ~DMACConfig_E;
    5ab0:	4a16      	ldr	r2, [pc, #88]	; (5b0c <dio_ssp_stop+0xc4>)
    5ab2:	4b16      	ldr	r3, [pc, #88]	; (5b0c <dio_ssp_stop+0xc4>)
    5ab4:	681b      	ldr	r3, [r3, #0]
    5ab6:	f023 0301 	bic.w	r3, r3, #1
    5aba:	6013      	str	r3, [r2, #0]
	while (DMACConfig & DMACConfig_E);
    5abc:	bf00      	nop
    5abe:	4b13      	ldr	r3, [pc, #76]	; (5b0c <dio_ssp_stop+0xc4>)
    5ac0:	681b      	ldr	r3, [r3, #0]
    5ac2:	f003 0301 	and.w	r3, r3, #1
    5ac6:	2b00      	cmp	r3, #0
    5ac8:	d1f9      	bne.n	5abe <dio_ssp_stop+0x76>
}
    5aca:	46bd      	mov	sp, r7
    5acc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ad0:	4770      	bx	lr
    5ad2:	bf00      	nop
    5ad4:	2009c098 	.word	0x2009c098
    5ad8:	40030024 	.word	0x40030024
    5adc:	40030004 	.word	0x40030004
    5ae0:	e000e180 	.word	0xe000e180
    5ae4:	50004110 	.word	0x50004110
    5ae8:	50004130 	.word	0x50004130
    5aec:	50004150 	.word	0x50004150
    5af0:	50004170 	.word	0x50004170
    5af4:	50004190 	.word	0x50004190
    5af8:	500041b0 	.word	0x500041b0
    5afc:	500041d0 	.word	0x500041d0
    5b00:	500041f0 	.word	0x500041f0
    5b04:	50004008 	.word	0x50004008
    5b08:	50004010 	.word	0x50004010
    5b0c:	50004030 	.word	0x50004030

00005b10 <cc2400_idle>:

static void cc2400_idle()
{
    5b10:	b580      	push	{r7, lr}
    5b12:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    5b14:	2064      	movs	r0, #100	; 0x64
    5b16:	f004 f8a7 	bl	9c68 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5b1a:	bf00      	nop
    5b1c:	f004 f89a 	bl	9c54 <cc2400_status>
    5b20:	4603      	mov	r3, r0
    5b22:	f003 0304 	and.w	r3, r3, #4
    5b26:	2b00      	cmp	r3, #0
    5b28:	d1f8      	bne.n	5b1c <cc2400_idle+0xc>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5b2a:	4b0a      	ldr	r3, [pc, #40]	; (5b54 <cc2400_idle+0x44>)
    5b2c:	2280      	movs	r2, #128	; 0x80
    5b2e:	601a      	str	r2, [r3, #0]
	HGM_CLR;
    5b30:	4b08      	ldr	r3, [pc, #32]	; (5b54 <cc2400_idle+0x44>)
    5b32:	f44f 7280 	mov.w	r2, #256	; 0x100
    5b36:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    5b38:	4b07      	ldr	r3, [pc, #28]	; (5b58 <cc2400_idle+0x48>)
    5b3a:	2210      	movs	r2, #16
    5b3c:	601a      	str	r2, [r3, #0]
	TXLED_CLR;
    5b3e:	4b06      	ldr	r3, [pc, #24]	; (5b58 <cc2400_idle+0x48>)
    5b40:	f44f 7280 	mov.w	r2, #256	; 0x100
    5b44:	601a      	str	r2, [r3, #0]
	USRLED_CLR;
    5b46:	4b04      	ldr	r3, [pc, #16]	; (5b58 <cc2400_idle+0x48>)
    5b48:	2202      	movs	r2, #2
    5b4a:	601a      	str	r2, [r3, #0]
	mode = MODE_IDLE;
    5b4c:	4b03      	ldr	r3, [pc, #12]	; (5b5c <cc2400_idle+0x4c>)
    5b4e:	2200      	movs	r2, #0
    5b50:	701a      	strb	r2, [r3, #0]
}
    5b52:	bd80      	pop	{r7, pc}
    5b54:	2009c05c 	.word	0x2009c05c
    5b58:	2009c03c 	.word	0x2009c03c
    5b5c:	10000a3e 	.word	0x10000a3e

00005b60 <cc2400_rx>:

/* start un-buffered rx */
static void cc2400_rx()
{
    5b60:	b580      	push	{r7, lr}
    5b62:	b082      	sub	sp, #8
    5b64:	af00      	add	r7, sp, #0
	u16 mdmctrl;
	if (modulation == MOD_BT_BASIC_RATE) {
    5b66:	4b2a      	ldr	r3, [pc, #168]	; (5c10 <cc2400_rx+0xb0>)
    5b68:	781b      	ldrb	r3, [r3, #0]
    5b6a:	b2db      	uxtb	r3, r3
    5b6c:	2b00      	cmp	r3, #0
    5b6e:	d102      	bne.n	5b76 <cc2400_rx+0x16>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5b70:	2329      	movs	r3, #41	; 0x29
    5b72:	80fb      	strh	r3, [r7, #6]
    5b74:	e008      	b.n	5b88 <cc2400_rx+0x28>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5b76:	4b26      	ldr	r3, [pc, #152]	; (5c10 <cc2400_rx+0xb0>)
    5b78:	781b      	ldrb	r3, [r3, #0]
    5b7a:	b2db      	uxtb	r3, r3
    5b7c:	2b01      	cmp	r3, #1
    5b7e:	d102      	bne.n	5b86 <cc2400_rx+0x26>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5b80:	2340      	movs	r3, #64	; 0x40
    5b82:	80fb      	strh	r3, [r7, #6]
    5b84:	e000      	b.n	5b88 <cc2400_rx+0x28>
	} else {
		/* oops */
		return;
    5b86:	e040      	b.n	5c0a <cc2400_rx+0xaa>
	}

	cc2400_set(MANAND,  0x7fff);
    5b88:	200d      	movs	r0, #13
    5b8a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5b8e:	f003 ffa9 	bl	9ae4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5b92:	2012      	movs	r0, #18
    5b94:	f642 3122 	movw	r1, #11042	; 0x2b22
    5b98:	f003 ffa4 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    5b9c:	2014      	movs	r0, #20
    5b9e:	f241 314b 	movw	r1, #4939	; 0x134b
    5ba2:	f003 ff9f 	bl	9ae4 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    5ba6:	2020      	movs	r0, #32
    5ba8:	f240 1101 	movw	r1, #257	; 0x101
    5bac:	f003 ff9a 	bl	9ae4 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 2 preamble bytes of 01010101
	//      |  +-----------------> not packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5bb0:	4b18      	ldr	r3, [pc, #96]	; (5c14 <cc2400_rx+0xb4>)
    5bb2:	881b      	ldrh	r3, [r3, #0]
    5bb4:	b29b      	uxth	r3, r3
    5bb6:	3b01      	subs	r3, #1
    5bb8:	b29b      	uxth	r3, r3
    5bba:	2002      	movs	r0, #2
    5bbc:	4619      	mov	r1, r3
    5bbe:	f003 ff91 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5bc2:	88fb      	ldrh	r3, [r7, #6]
    5bc4:	2003      	movs	r0, #3
    5bc6:	4619      	mov	r1, r3
    5bc8:	f003 ff8c 	bl	9ae4 <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5bcc:	f7fe fde0 	bl	4790 <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5bd0:	bf00      	nop
    5bd2:	f004 f83f 	bl	9c54 <cc2400_status>
    5bd6:	4603      	mov	r3, r0
    5bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5bdc:	2b00      	cmp	r3, #0
    5bde:	d0f8      	beq.n	5bd2 <cc2400_rx+0x72>
	cc2400_strobe(SFSON);
    5be0:	2061      	movs	r0, #97	; 0x61
    5be2:	f004 f841 	bl	9c68 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5be6:	bf00      	nop
    5be8:	f004 f834 	bl	9c54 <cc2400_status>
    5bec:	4603      	mov	r3, r0
    5bee:	f003 0304 	and.w	r3, r3, #4
    5bf2:	2b00      	cmp	r3, #0
    5bf4:	d0f8      	beq.n	5be8 <cc2400_rx+0x88>
	cc2400_strobe(SRX);
    5bf6:	2062      	movs	r0, #98	; 0x62
    5bf8:	f004 f836 	bl	9c68 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5bfc:	4b06      	ldr	r3, [pc, #24]	; (5c18 <cc2400_rx+0xb8>)
    5bfe:	2280      	movs	r2, #128	; 0x80
    5c00:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5c02:	4b05      	ldr	r3, [pc, #20]	; (5c18 <cc2400_rx+0xb8>)
    5c04:	f44f 7280 	mov.w	r2, #256	; 0x100
    5c08:	601a      	str	r2, [r3, #0]
#endif
}
    5c0a:	3708      	adds	r7, #8
    5c0c:	46bd      	mov	sp, r7
    5c0e:	bd80      	pop	{r7, pc}
    5c10:	10000a42 	.word	0x10000a42
    5c14:	1000049c 	.word	0x1000049c
    5c18:	2009c058 	.word	0x2009c058

00005c1c <cc2400_rx_sync>:

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    5c1c:	b580      	push	{r7, lr}
    5c1e:	b084      	sub	sp, #16
    5c20:	af00      	add	r7, sp, #0
    5c22:	6078      	str	r0, [r7, #4]
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    5c24:	4b33      	ldr	r3, [pc, #204]	; (5cf4 <cc2400_rx_sync+0xd8>)
    5c26:	781b      	ldrb	r3, [r3, #0]
    5c28:	b2db      	uxtb	r3, r3
    5c2a:	2b00      	cmp	r3, #0
    5c2c:	d105      	bne.n	5c3a <cc2400_rx_sync+0x1e>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5c2e:	2329      	movs	r3, #41	; 0x29
    5c30:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    5c32:	f240 4361 	movw	r3, #1121	; 0x461
    5c36:	81fb      	strh	r3, [r7, #14]
    5c38:	e00b      	b.n	5c52 <cc2400_rx_sync+0x36>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5c3a:	4b2e      	ldr	r3, [pc, #184]	; (5cf4 <cc2400_rx_sync+0xd8>)
    5c3c:	781b      	ldrb	r3, [r3, #0]
    5c3e:	b2db      	uxtb	r3, r3
    5c40:	2b01      	cmp	r3, #1
    5c42:	d105      	bne.n	5c50 <cc2400_rx_sync+0x34>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5c44:	2340      	movs	r3, #64	; 0x40
    5c46:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    5c48:	f240 5361 	movw	r3, #1377	; 0x561
    5c4c:	81fb      	strh	r3, [r7, #14]
    5c4e:	e000      	b.n	5c52 <cc2400_rx_sync+0x36>
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else {
		/* oops */
		return;
    5c50:	e04d      	b.n	5cee <cc2400_rx_sync+0xd2>
	}

	cc2400_set(MANAND,  0x7fff);
    5c52:	200d      	movs	r0, #13
    5c54:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5c58:	f003 ff44 	bl	9ae4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5c5c:	2012      	movs	r0, #18
    5c5e:	f642 3122 	movw	r1, #11042	; 0x2b22
    5c62:	f003 ff3f 	bl	9ae4 <cc2400_set>

	cc2400_set(MDMTST0, 0x124b);
    5c66:	2014      	movs	r0, #20
    5c68:	f241 214b 	movw	r1, #4683	; 0x124b
    5c6c:	f003 ff3a 	bl	9ae4 <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    5c70:	89fb      	ldrh	r3, [r7, #14]
    5c72:	2020      	movs	r0, #32
    5c74:	4619      	mov	r1, r3
    5c76:	f003 ff35 	bl	9ae4 <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    5c7a:	687b      	ldr	r3, [r7, #4]
    5c7c:	b29b      	uxth	r3, r3
    5c7e:	202c      	movs	r0, #44	; 0x2c
    5c80:	4619      	mov	r1, r3
    5c82:	f003 ff2f 	bl	9ae4 <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    5c86:	687b      	ldr	r3, [r7, #4]
    5c88:	0c1b      	lsrs	r3, r3, #16
    5c8a:	b29b      	uxth	r3, r3
    5c8c:	202d      	movs	r0, #45	; 0x2d
    5c8e:	4619      	mov	r1, r3
    5c90:	f003 ff28 	bl	9ae4 <cc2400_set>
	
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5c94:	4b18      	ldr	r3, [pc, #96]	; (5cf8 <cc2400_rx_sync+0xdc>)
    5c96:	881b      	ldrh	r3, [r3, #0]
    5c98:	b29b      	uxth	r3, r3
    5c9a:	3b01      	subs	r3, #1
    5c9c:	b29b      	uxth	r3, r3
    5c9e:	2002      	movs	r0, #2
    5ca0:	4619      	mov	r1, r3
    5ca2:	f003 ff1f 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5ca6:	89bb      	ldrh	r3, [r7, #12]
    5ca8:	2003      	movs	r0, #3
    5caa:	4619      	mov	r1, r3
    5cac:	f003 ff1a 	bl	9ae4 <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5cb0:	f7fe fd6e 	bl	4790 <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5cb4:	bf00      	nop
    5cb6:	f003 ffcd 	bl	9c54 <cc2400_status>
    5cba:	4603      	mov	r3, r0
    5cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5cc0:	2b00      	cmp	r3, #0
    5cc2:	d0f8      	beq.n	5cb6 <cc2400_rx_sync+0x9a>
	cc2400_strobe(SFSON);
    5cc4:	2061      	movs	r0, #97	; 0x61
    5cc6:	f003 ffcf 	bl	9c68 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5cca:	bf00      	nop
    5ccc:	f003 ffc2 	bl	9c54 <cc2400_status>
    5cd0:	4603      	mov	r3, r0
    5cd2:	f003 0304 	and.w	r3, r3, #4
    5cd6:	2b00      	cmp	r3, #0
    5cd8:	d0f8      	beq.n	5ccc <cc2400_rx_sync+0xb0>
	cc2400_strobe(SRX);
    5cda:	2062      	movs	r0, #98	; 0x62
    5cdc:	f003 ffc4 	bl	9c68 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5ce0:	4b06      	ldr	r3, [pc, #24]	; (5cfc <cc2400_rx_sync+0xe0>)
    5ce2:	2280      	movs	r2, #128	; 0x80
    5ce4:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5ce6:	4b05      	ldr	r3, [pc, #20]	; (5cfc <cc2400_rx_sync+0xe0>)
    5ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
    5cec:	601a      	str	r2, [r3, #0]
#endif
}
    5cee:	3710      	adds	r7, #16
    5cf0:	46bd      	mov	sp, r7
    5cf2:	bd80      	pop	{r7, pc}
    5cf4:	10000a42 	.word	0x10000a42
    5cf8:	1000049c 	.word	0x1000049c
    5cfc:	2009c058 	.word	0x2009c058

00005d00 <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data)
{
    5d00:	b580      	push	{r7, lr}
    5d02:	b09a      	sub	sp, #104	; 0x68
    5d04:	af00      	add	r7, sp, #0
    5d06:	60f8      	str	r0, [r7, #12]
    5d08:	460b      	mov	r3, r1
    5d0a:	607a      	str	r2, [r7, #4]
    5d0c:	72fb      	strb	r3, [r7, #11]
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5d0e:	2300      	movs	r3, #0
    5d10:	667b      	str	r3, [r7, #100]	; 0x64
    5d12:	e035      	b.n	5d80 <le_transmit+0x80>
		byte = aa & 0xff;
    5d14:	68fb      	ldr	r3, [r7, #12]
    5d16:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		aa >>= 8;
    5d1a:	68fb      	ldr	r3, [r7, #12]
    5d1c:	0a1b      	lsrs	r3, r3, #8
    5d1e:	60fb      	str	r3, [r7, #12]
		txbuf[i] = 0;
    5d20:	f107 0210 	add.w	r2, r7, #16
    5d24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d26:	4413      	add	r3, r2
    5d28:	2200      	movs	r2, #0
    5d2a:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; ++j) {
    5d2c:	2300      	movs	r3, #0
    5d2e:	663b      	str	r3, [r7, #96]	; 0x60
    5d30:	e020      	b.n	5d74 <le_transmit+0x74>
			txbuf[i] |= (byte & 1) << (7 - j);
    5d32:	f107 0210 	add.w	r2, r7, #16
    5d36:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d38:	4413      	add	r3, r2
    5d3a:	781b      	ldrb	r3, [r3, #0]
    5d3c:	b2d9      	uxtb	r1, r3
    5d3e:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5d42:	f003 0301 	and.w	r3, r3, #1
    5d46:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5d48:	f1c2 0207 	rsb	r2, r2, #7
    5d4c:	4093      	lsls	r3, r2
    5d4e:	b2db      	uxtb	r3, r3
    5d50:	460a      	mov	r2, r1
    5d52:	4313      	orrs	r3, r2
    5d54:	b2db      	uxtb	r3, r3
    5d56:	b2d9      	uxtb	r1, r3
    5d58:	f107 0210 	add.w	r2, r7, #16
    5d5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d5e:	4413      	add	r3, r2
    5d60:	460a      	mov	r2, r1
    5d62:	701a      	strb	r2, [r3, #0]
			byte >>= 1;
    5d64:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5d68:	085b      	lsrs	r3, r3, #1
    5d6a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    5d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5d70:	3301      	adds	r3, #1
    5d72:	663b      	str	r3, [r7, #96]	; 0x60
    5d74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5d76:	2b07      	cmp	r3, #7
    5d78:	d9db      	bls.n	5d32 <le_transmit+0x32>
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5d7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d7c:	3301      	adds	r3, #1
    5d7e:	667b      	str	r3, [r7, #100]	; 0x64
    5d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d82:	2b03      	cmp	r3, #3
    5d84:	d9c6      	bls.n	5d14 <le_transmit+0x14>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
    5d86:	4b93      	ldr	r3, [pc, #588]	; (5fd4 <le_transmit+0x2d4>)
    5d88:	881b      	ldrh	r3, [r3, #0]
    5d8a:	b29b      	uxth	r3, r3
    5d8c:	b2db      	uxtb	r3, r3
    5d8e:	3b62      	subs	r3, #98	; 0x62
    5d90:	b2db      	uxtb	r3, r3
    5d92:	4618      	mov	r0, r3
    5d94:	f002 faae 	bl	82f4 <btle_channel_index>
    5d98:	4603      	mov	r3, r0
    5d9a:	461a      	mov	r2, r3
    5d9c:	4b8e      	ldr	r3, [pc, #568]	; (5fd8 <le_transmit+0x2d8>)
    5d9e:	5c9b      	ldrb	r3, [r3, r2]
    5da0:	65bb      	str	r3, [r7, #88]	; 0x58
	for (i = 0; i < len; ++i) {
    5da2:	2300      	movs	r3, #0
    5da4:	667b      	str	r3, [r7, #100]	; 0x64
    5da6:	e050      	b.n	5e4a <le_transmit+0x14a>
		byte = data[i];
    5da8:	687a      	ldr	r2, [r7, #4]
    5daa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5dac:	4413      	add	r3, r2
    5dae:	781b      	ldrb	r3, [r3, #0]
    5db0:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		txbuf[i+4] = 0;
    5db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5db6:	3304      	adds	r3, #4
    5db8:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5dbc:	4413      	add	r3, r2
    5dbe:	2200      	movs	r2, #0
    5dc0:	f803 2c58 	strb.w	r2, [r3, #-88]
		for (j = 0; j < 8; ++j) {
    5dc4:	2300      	movs	r3, #0
    5dc6:	663b      	str	r3, [r7, #96]	; 0x60
    5dc8:	e039      	b.n	5e3e <le_transmit+0x13e>
			bit = (byte & 1) ^ whitening[idx];
    5dca:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5dce:	f003 0301 	and.w	r3, r3, #1
    5dd2:	4982      	ldr	r1, [pc, #520]	; (5fdc <le_transmit+0x2dc>)
    5dd4:	6dba      	ldr	r2, [r7, #88]	; 0x58
    5dd6:	440a      	add	r2, r1
    5dd8:	7812      	ldrb	r2, [r2, #0]
    5dda:	4053      	eors	r3, r2
    5ddc:	657b      	str	r3, [r7, #84]	; 0x54
			idx = (idx + 1) % sizeof(whitening);
    5dde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5de0:	3301      	adds	r3, #1
    5de2:	4619      	mov	r1, r3
    5de4:	4b7e      	ldr	r3, [pc, #504]	; (5fe0 <le_transmit+0x2e0>)
    5de6:	fba1 2303 	umull	r2, r3, r1, r3
    5dea:	1ac8      	subs	r0, r1, r3
    5dec:	0840      	lsrs	r0, r0, #1
    5dee:	4403      	add	r3, r0
    5df0:	099a      	lsrs	r2, r3, #6
    5df2:	4613      	mov	r3, r2
    5df4:	01db      	lsls	r3, r3, #7
    5df6:	1a9b      	subs	r3, r3, r2
    5df8:	1aca      	subs	r2, r1, r3
    5dfa:	65ba      	str	r2, [r7, #88]	; 0x58
			byte >>= 1;
    5dfc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5e00:	085b      	lsrs	r3, r3, #1
    5e02:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			txbuf[i+4] |= bit << (7 - j);
    5e06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e08:	3304      	adds	r3, #4
    5e0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    5e0c:	3204      	adds	r2, #4
    5e0e:	f107 0168 	add.w	r1, r7, #104	; 0x68
    5e12:	440a      	add	r2, r1
    5e14:	f812 2c58 	ldrb.w	r2, [r2, #-88]
    5e18:	b2d1      	uxtb	r1, r2
    5e1a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5e1c:	f1c2 0207 	rsb	r2, r2, #7
    5e20:	4610      	mov	r0, r2
    5e22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5e24:	4082      	lsls	r2, r0
    5e26:	b2d2      	uxtb	r2, r2
    5e28:	430a      	orrs	r2, r1
    5e2a:	b2d2      	uxtb	r2, r2
    5e2c:	b2d2      	uxtb	r2, r2
    5e2e:	f107 0168 	add.w	r1, r7, #104	; 0x68
    5e32:	440b      	add	r3, r1
    5e34:	f803 2c58 	strb.w	r2, [r3, #-88]
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    5e38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5e3a:	3301      	adds	r3, #1
    5e3c:	663b      	str	r3, [r7, #96]	; 0x60
    5e3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5e40:	2b07      	cmp	r3, #7
    5e42:	d9c2      	bls.n	5dca <le_transmit+0xca>
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
    5e44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e46:	3301      	adds	r3, #1
    5e48:	667b      	str	r3, [r7, #100]	; 0x64
    5e4a:	7afa      	ldrb	r2, [r7, #11]
    5e4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e4e:	429a      	cmp	r2, r3
    5e50:	d8aa      	bhi.n	5da8 <le_transmit+0xa8>
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    5e52:	7afb      	ldrb	r3, [r7, #11]
    5e54:	3304      	adds	r3, #4
    5e56:	72fb      	strb	r3, [r7, #11]

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    5e58:	200d      	movs	r0, #13
    5e5a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5e5e:	f003 fe41 	bl	9ae4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5e62:	2012      	movs	r0, #18
    5e64:	f642 3122 	movw	r1, #11042	; 0x2b22
    5e68:	f003 fe3c 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5e6c:	2014      	movs	r0, #20
    5e6e:	f241 314b 	movw	r1, #4939	; 0x134b
    5e72:	f003 fe37 	bl	9ae4 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5e76:	2020      	movs	r0, #32
    5e78:	f640 4101 	movw	r1, #3073	; 0xc01
    5e7c:	f003 fe32 	bl	9ae4 <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   channel);
    5e80:	4b54      	ldr	r3, [pc, #336]	; (5fd4 <le_transmit+0x2d4>)
    5e82:	881b      	ldrh	r3, [r3, #0]
    5e84:	b29b      	uxth	r3, r3
    5e86:	2002      	movs	r0, #2
    5e88:	4619      	mov	r1, r3
    5e8a:	f003 fe2b 	bl	9ae4 <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5e8e:	2005      	movs	r0, #5
    5e90:	210b      	movs	r1, #11
    5e92:	f003 fe27 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5e96:	2003      	movs	r0, #3
    5e98:	2140      	movs	r1, #64	; 0x40
    5e9a:	f003 fe23 	bl	9ae4 <cc2400_set>
	cc2400_set(INT,     0x0014);	// FIFO_THRESHOLD: 20 bytes
    5e9e:	2023      	movs	r0, #35	; 0x23
    5ea0:	2114      	movs	r1, #20
    5ea2:	f003 fe1f 	bl	9ae4 <cc2400_set>

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    5ea6:	68fb      	ldr	r3, [r7, #12]
    5ea8:	f003 0301 	and.w	r3, r3, #1
    5eac:	2b00      	cmp	r3, #0
    5eae:	d005      	beq.n	5ebc <le_transmit+0x1bc>
		cc2400_set(SYNCH,   0xaaaa);
    5eb0:	202d      	movs	r0, #45	; 0x2d
    5eb2:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
    5eb6:	f003 fe15 	bl	9ae4 <cc2400_set>
    5eba:	e004      	b.n	5ec6 <le_transmit+0x1c6>
	else
		cc2400_set(SYNCH,   0x5555);
    5ebc:	202d      	movs	r0, #45	; 0x2d
    5ebe:	f245 5155 	movw	r1, #21845	; 0x5555
    5ec2:	f003 fe0f 	bl	9ae4 <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5ec6:	2008      	movs	r0, #8
    5ec8:	f003 fdf6 	bl	9ab8 <cc2400_get>
    5ecc:	4603      	mov	r3, r0
    5ece:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5ed2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    5ed6:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5eda:	b29b      	uxth	r3, r3
    5edc:	f443 439c 	orr.w	r3, r3, #19968	; 0x4e00
    5ee0:	b29b      	uxth	r3, r3
    5ee2:	b29b      	uxth	r3, r3
    5ee4:	2008      	movs	r0, #8
    5ee6:	4619      	mov	r1, r3
    5ee8:	f003 fdfc 	bl	9ae4 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5eec:	bf00      	nop
    5eee:	f003 feb1 	bl	9c54 <cc2400_status>
    5ef2:	4603      	mov	r3, r0
    5ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5ef8:	2b00      	cmp	r3, #0
    5efa:	d0f8      	beq.n	5eee <le_transmit+0x1ee>
	cc2400_strobe(SFSON);
    5efc:	2061      	movs	r0, #97	; 0x61
    5efe:	f003 feb3 	bl	9c68 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5f02:	bf00      	nop
    5f04:	f003 fea6 	bl	9c54 <cc2400_status>
    5f08:	4603      	mov	r3, r0
    5f0a:	f003 0304 	and.w	r3, r3, #4
    5f0e:	2b00      	cmp	r3, #0
    5f10:	d0f8      	beq.n	5f04 <le_transmit+0x204>
	TXLED_SET;
    5f12:	4b34      	ldr	r3, [pc, #208]	; (5fe4 <le_transmit+0x2e4>)
    5f14:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f18:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5f1a:	4b33      	ldr	r3, [pc, #204]	; (5fe8 <le_transmit+0x2e8>)
    5f1c:	2280      	movs	r2, #128	; 0x80
    5f1e:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5f20:	bf00      	nop
    5f22:	200e      	movs	r0, #14
    5f24:	f003 fdc8 	bl	9ab8 <cc2400_get>
    5f28:	4603      	mov	r3, r0
    5f2a:	f003 031f 	and.w	r3, r3, #31
    5f2e:	2b0f      	cmp	r3, #15
    5f30:	d1f7      	bne.n	5f22 <le_transmit+0x222>
	cc2400_strobe(STX);
    5f32:	2063      	movs	r0, #99	; 0x63
    5f34:	f003 fe98 	bl	9c68 <cc2400_strobe>

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    5f38:	2300      	movs	r3, #0
    5f3a:	667b      	str	r3, [r7, #100]	; 0x64
    5f3c:	e021      	b.n	5f82 <le_transmit+0x282>
		while (GIO6) ; // wait for the FIFO to drain (FIFO_FULL false)
    5f3e:	bf00      	nop
    5f40:	4b2a      	ldr	r3, [pc, #168]	; (5fec <le_transmit+0x2ec>)
    5f42:	681b      	ldr	r3, [r3, #0]
    5f44:	f003 0304 	and.w	r3, r3, #4
    5f48:	2b00      	cmp	r3, #0
    5f4a:	d1f9      	bne.n	5f40 <le_transmit+0x240>
		tx_len = len - i;
    5f4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5f4e:	b2db      	uxtb	r3, r3
    5f50:	7afa      	ldrb	r2, [r7, #11]
    5f52:	1ad3      	subs	r3, r2, r3
    5f54:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (tx_len > 16)
    5f58:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    5f5c:	2b10      	cmp	r3, #16
    5f5e:	d902      	bls.n	5f66 <le_transmit+0x266>
			tx_len = 16;
    5f60:	2310      	movs	r3, #16
    5f62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
    5f66:	f107 0210 	add.w	r2, r7, #16
    5f6a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5f6c:	4413      	add	r3, r2
    5f6e:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
    5f72:	2070      	movs	r0, #112	; 0x70
    5f74:	4611      	mov	r1, r2
    5f76:	461a      	mov	r2, r3
    5f78:	f003 fdf6 	bl	9b68 <cc2400_spi_buf>
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    5f7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5f7e:	3310      	adds	r3, #16
    5f80:	667b      	str	r3, [r7, #100]	; 0x64
    5f82:	7afa      	ldrb	r2, [r7, #11]
    5f84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5f86:	429a      	cmp	r2, r3
    5f88:	d8d9      	bhi.n	5f3e <le_transmit+0x23e>
		if (tx_len > 16)
			tx_len = 16;
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
	}

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5f8a:	bf00      	nop
    5f8c:	200e      	movs	r0, #14
    5f8e:	f003 fd93 	bl	9ab8 <cc2400_get>
    5f92:	4603      	mov	r3, r0
    5f94:	f003 031f 	and.w	r3, r3, #31
    5f98:	2b0f      	cmp	r3, #15
    5f9a:	d1f7      	bne.n	5f8c <le_transmit+0x28c>
	TXLED_CLR;
    5f9c:	4b14      	ldr	r3, [pc, #80]	; (5ff0 <le_transmit+0x2f0>)
    5f9e:	f44f 7280 	mov.w	r2, #256	; 0x100
    5fa2:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    5fa4:	2064      	movs	r0, #100	; 0x64
    5fa6:	f003 fe5f 	bl	9c68 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    5faa:	bf00      	nop
    5fac:	f003 fe52 	bl	9c54 <cc2400_status>
    5fb0:	4603      	mov	r3, r0
    5fb2:	f003 0304 	and.w	r3, r3, #4
    5fb6:	2b00      	cmp	r3, #0
    5fb8:	d1f8      	bne.n	5fac <le_transmit+0x2ac>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5fba:	4b0e      	ldr	r3, [pc, #56]	; (5ff4 <le_transmit+0x2f4>)
    5fbc:	2280      	movs	r2, #128	; 0x80
    5fbe:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    5fc0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    5fc4:	2008      	movs	r0, #8
    5fc6:	4619      	mov	r1, r3
    5fc8:	f003 fd8c 	bl	9ae4 <cc2400_set>
}
    5fcc:	3768      	adds	r7, #104	; 0x68
    5fce:	46bd      	mov	sp, r7
    5fd0:	bd80      	pop	{r7, pc}
    5fd2:	bf00      	nop
    5fd4:	1000049c 	.word	0x1000049c
    5fd8:	0000b888 	.word	0x0000b888
    5fdc:	0000b808 	.word	0x0000b808
    5fe0:	02040811 	.word	0x02040811
    5fe4:	2009c038 	.word	0x2009c038
    5fe8:	2009c058 	.word	0x2009c058
    5fec:	2009c054 	.word	0x2009c054
    5ff0:	2009c03c 	.word	0x2009c03c
    5ff4:	2009c05c 	.word	0x2009c05c

00005ff8 <le_jam>:

void le_jam(void) {
    5ff8:	b580      	push	{r7, lr}
    5ffa:	af00      	add	r7, sp, #0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    5ffc:	200d      	movs	r0, #13
    5ffe:	f647 71ff 	movw	r1, #32767	; 0x7fff
    6002:	f003 fd6f 	bl	9ae4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    6006:	2012      	movs	r0, #18
    6008:	f642 3122 	movw	r1, #11042	; 0x2b22
    600c:	f003 fd6a 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    6010:	2014      	movs	r0, #20
    6012:	f242 314b 	movw	r1, #9035	; 0x234b
    6016:	f003 fd65 	bl	9ae4 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    601a:	2020      	movs	r0, #32
    601c:	f640 4101 	movw	r1, #3073	; 0xc01
    6020:	f003 fd60 	bl	9ae4 <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    6024:	2005      	movs	r0, #5
    6026:	210b      	movs	r1, #11
    6028:	f003 fd5c 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    602c:	2003      	movs	r0, #3
    602e:	2140      	movs	r1, #64	; 0x40
    6030:	f003 fd58 	bl	9ae4 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6034:	bf00      	nop
    6036:	f003 fe0d 	bl	9c54 <cc2400_status>
    603a:	4603      	mov	r3, r0
    603c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6040:	2b00      	cmp	r3, #0
    6042:	d0f8      	beq.n	6036 <le_jam+0x3e>
	cc2400_strobe(SFSON);
    6044:	2061      	movs	r0, #97	; 0x61
    6046:	f003 fe0f 	bl	9c68 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    604a:	bf00      	nop
    604c:	f003 fe02 	bl	9c54 <cc2400_status>
    6050:	4603      	mov	r3, r0
    6052:	f003 0304 	and.w	r3, r3, #4
    6056:	2b00      	cmp	r3, #0
    6058:	d0f8      	beq.n	604c <le_jam+0x54>
	TXLED_SET;
    605a:	4b0a      	ldr	r3, [pc, #40]	; (6084 <le_jam+0x8c>)
    605c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6060:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6062:	4b09      	ldr	r3, [pc, #36]	; (6088 <le_jam+0x90>)
    6064:	2280      	movs	r2, #128	; 0x80
    6066:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6068:	bf00      	nop
    606a:	200e      	movs	r0, #14
    606c:	f003 fd24 	bl	9ab8 <cc2400_get>
    6070:	4603      	mov	r3, r0
    6072:	f003 031f 	and.w	r3, r3, #31
    6076:	2b0f      	cmp	r3, #15
    6078:	d1f7      	bne.n	606a <le_jam+0x72>
	cc2400_strobe(STX);
    607a:	2063      	movs	r0, #99	; 0x63
    607c:	f003 fdf4 	bl	9c68 <cc2400_strobe>
#endif
}
    6080:	bd80      	pop	{r7, pc}
    6082:	bf00      	nop
    6084:	2009c038 	.word	0x2009c038
    6088:	2009c058 	.word	0x2009c058

0000608c <hop>:

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    608c:	b580      	push	{r7, lr}
    608e:	af00      	add	r7, sp, #0
	do_hop = 0;
    6090:	4b41      	ldr	r3, [pc, #260]	; (6198 <hop+0x10c>)
    6092:	2200      	movs	r2, #0
    6094:	701a      	strb	r2, [r3, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    6096:	4b41      	ldr	r3, [pc, #260]	; (619c <hop+0x110>)
    6098:	781b      	ldrb	r3, [r3, #0]
    609a:	2b00      	cmp	r3, #0
    609c:	d10b      	bne.n	60b6 <hop+0x2a>
		if (cc2400_get(FSDIV) == (channel - 1))
    609e:	2002      	movs	r0, #2
    60a0:	f003 fd0a 	bl	9ab8 <cc2400_get>
    60a4:	4603      	mov	r3, r0
    60a6:	461a      	mov	r2, r3
    60a8:	4b3d      	ldr	r3, [pc, #244]	; (61a0 <hop+0x114>)
    60aa:	881b      	ldrh	r3, [r3, #0]
    60ac:	b29b      	uxth	r3, r3
    60ae:	3b01      	subs	r3, #1
    60b0:	429a      	cmp	r2, r3
    60b2:	d147      	bne.n	6144 <hop+0xb8>
			return;
    60b4:	e06e      	b.n	6194 <hop+0x108>
	}

	// Slow sweep (100 hops/sec)
	else if (hop_mode == HOP_SWEEP) {
    60b6:	4b39      	ldr	r3, [pc, #228]	; (619c <hop+0x110>)
    60b8:	781b      	ldrb	r3, [r3, #0]
    60ba:	2b01      	cmp	r3, #1
    60bc:	d114      	bne.n	60e8 <hop+0x5c>
		channel += 32;
    60be:	4b38      	ldr	r3, [pc, #224]	; (61a0 <hop+0x114>)
    60c0:	881b      	ldrh	r3, [r3, #0]
    60c2:	b29b      	uxth	r3, r3
    60c4:	3320      	adds	r3, #32
    60c6:	b29a      	uxth	r2, r3
    60c8:	4b35      	ldr	r3, [pc, #212]	; (61a0 <hop+0x114>)
    60ca:	801a      	strh	r2, [r3, #0]
		if (channel > 2480)
    60cc:	4b34      	ldr	r3, [pc, #208]	; (61a0 <hop+0x114>)
    60ce:	881b      	ldrh	r3, [r3, #0]
    60d0:	b29b      	uxth	r3, r3
    60d2:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
    60d6:	d935      	bls.n	6144 <hop+0xb8>
			channel -= 79;
    60d8:	4b31      	ldr	r3, [pc, #196]	; (61a0 <hop+0x114>)
    60da:	881b      	ldrh	r3, [r3, #0]
    60dc:	b29b      	uxth	r3, r3
    60de:	3b4f      	subs	r3, #79	; 0x4f
    60e0:	b29a      	uxth	r2, r3
    60e2:	4b2f      	ldr	r3, [pc, #188]	; (61a0 <hop+0x114>)
    60e4:	801a      	strh	r2, [r3, #0]
    60e6:	e02d      	b.n	6144 <hop+0xb8>
	}

	else if (hop_mode == HOP_BLUETOOTH) {
    60e8:	4b2c      	ldr	r3, [pc, #176]	; (619c <hop+0x110>)
    60ea:	781b      	ldrb	r3, [r3, #0]
    60ec:	2b02      	cmp	r3, #2
    60ee:	d10d      	bne.n	610c <hop+0x80>
		TXLED_SET;
    60f0:	4b2c      	ldr	r3, [pc, #176]	; (61a4 <hop+0x118>)
    60f2:	f44f 7280 	mov.w	r2, #256	; 0x100
    60f6:	601a      	str	r2, [r3, #0]
		channel = next_hop(clkn);
    60f8:	4b2b      	ldr	r3, [pc, #172]	; (61a8 <hop+0x11c>)
    60fa:	681b      	ldr	r3, [r3, #0]
    60fc:	4618      	mov	r0, r3
    60fe:	f002 f80b 	bl	8118 <next_hop>
    6102:	4603      	mov	r3, r0
    6104:	461a      	mov	r2, r3
    6106:	4b26      	ldr	r3, [pc, #152]	; (61a0 <hop+0x114>)
    6108:	801a      	strh	r2, [r3, #0]
    610a:	e01b      	b.n	6144 <hop+0xb8>
	}

	else if (hop_mode == HOP_BTLE) {
    610c:	4b23      	ldr	r3, [pc, #140]	; (619c <hop+0x110>)
    610e:	781b      	ldrb	r3, [r3, #0]
    6110:	2b03      	cmp	r3, #3
    6112:	d10b      	bne.n	612c <hop+0xa0>
		TXLED_SET;
    6114:	4b23      	ldr	r3, [pc, #140]	; (61a4 <hop+0x118>)
    6116:	f44f 7280 	mov.w	r2, #256	; 0x100
    611a:	601a      	str	r2, [r3, #0]
		channel = btle_next_hop(&le);
    611c:	4823      	ldr	r0, [pc, #140]	; (61ac <hop+0x120>)
    611e:	f002 f8c1 	bl	82a4 <btle_next_hop>
    6122:	4603      	mov	r3, r0
    6124:	461a      	mov	r2, r3
    6126:	4b1e      	ldr	r3, [pc, #120]	; (61a0 <hop+0x114>)
    6128:	801a      	strh	r2, [r3, #0]
    612a:	e00b      	b.n	6144 <hop+0xb8>
	}

	else if (hop_mode == HOP_DIRECT) {
    612c:	4b1b      	ldr	r3, [pc, #108]	; (619c <hop+0x110>)
    612e:	781b      	ldrb	r3, [r3, #0]
    6130:	2b04      	cmp	r3, #4
    6132:	d107      	bne.n	6144 <hop+0xb8>
		TXLED_SET;
    6134:	4b1b      	ldr	r3, [pc, #108]	; (61a4 <hop+0x118>)
    6136:	f44f 7280 	mov.w	r2, #256	; 0x100
    613a:	601a      	str	r2, [r3, #0]
		channel = hop_direct_channel;
    613c:	4b1c      	ldr	r3, [pc, #112]	; (61b0 <hop+0x124>)
    613e:	881a      	ldrh	r2, [r3, #0]
    6140:	4b17      	ldr	r3, [pc, #92]	; (61a0 <hop+0x114>)
    6142:	801a      	strh	r2, [r3, #0]
	}

        /* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    6144:	2064      	movs	r0, #100	; 0x64
    6146:	f003 fd8f 	bl	9c68 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    614a:	bf00      	nop
    614c:	f003 fd82 	bl	9c54 <cc2400_status>
    6150:	4603      	mov	r3, r0
    6152:	f003 0304 	and.w	r3, r3, #4
    6156:	2b00      	cmp	r3, #0
    6158:	d1f8      	bne.n	614c <hop+0xc0>

	/* Retune */
	cc2400_set(FSDIV, channel - 1);
    615a:	4b11      	ldr	r3, [pc, #68]	; (61a0 <hop+0x114>)
    615c:	881b      	ldrh	r3, [r3, #0]
    615e:	b29b      	uxth	r3, r3
    6160:	3b01      	subs	r3, #1
    6162:	b29b      	uxth	r3, r3
    6164:	2002      	movs	r0, #2
    6166:	4619      	mov	r1, r3
    6168:	f003 fcbc 	bl	9ae4 <cc2400_set>
	
	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    616c:	4b0b      	ldr	r3, [pc, #44]	; (619c <hop+0x110>)
    616e:	781b      	ldrb	r3, [r3, #0]
    6170:	2b00      	cmp	r3, #0
    6172:	d001      	beq.n	6178 <hop+0xec>
		cs_threshold_calc_and_set();
    6174:	f7fe fb0c 	bl	4790 <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    6178:	2061      	movs	r0, #97	; 0x61
    617a:	f003 fd75 	bl	9c68 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    617e:	bf00      	nop
    6180:	f003 fd68 	bl	9c54 <cc2400_status>
    6184:	4603      	mov	r3, r0
    6186:	f003 0304 	and.w	r3, r3, #4
    618a:	2b00      	cmp	r3, #0
    618c:	d0f8      	beq.n	6180 <hop+0xf4>
	
	/* RX mode */
	cc2400_strobe(SRX);
    618e:	2062      	movs	r0, #98	; 0x62
    6190:	f003 fd6a 	bl	9c68 <cc2400_strobe>

}
    6194:	bd80      	pop	{r7, pc}
    6196:	bf00      	nop
    6198:	1000097d 	.word	0x1000097d
    619c:	1000097c 	.word	0x1000097c
    61a0:	1000049c 	.word	0x1000049c
    61a4:	2009c038 	.word	0x2009c038
    61a8:	10000be4 	.word	0x10000be4
    61ac:	10000458 	.word	0x10000458
    61b0:	10000980 	.word	0x10000980

000061b4 <cc2400_spi_rev>:

u32 cc2400_spi_rev(u8 len, u32 data)
{
    61b4:	b480      	push	{r7}
    61b6:	b085      	sub	sp, #20
    61b8:	af00      	add	r7, sp, #0
    61ba:	4603      	mov	r3, r0
    61bc:	6039      	str	r1, [r7, #0]
    61be:	71fb      	strb	r3, [r7, #7]
    //    u32 first_ts, second_ts, diff;


        u32 msb = 1 << (len - 1);
    61c0:	79fb      	ldrb	r3, [r7, #7]
    61c2:	3b01      	subs	r3, #1
    61c4:	2201      	movs	r2, #1
    61c6:	fa02 f303 	lsl.w	r3, r2, r3
    61ca:	60fb      	str	r3, [r7, #12]

        /* start transaction by dropping CSN */
        CSN_CLR;
    61cc:	4b18      	ldr	r3, [pc, #96]	; (6230 <cc2400_spi_rev+0x7c>)
    61ce:	2220      	movs	r2, #32
    61d0:	601a      	str	r2, [r3, #0]
        
//      first_ts = CLK100NS;
        while (len--) {
    61d2:	e01e      	b.n	6212 <cc2400_spi_rev+0x5e>
                if (data & msb)
    61d4:	683a      	ldr	r2, [r7, #0]
    61d6:	68fb      	ldr	r3, [r7, #12]
    61d8:	4013      	ands	r3, r2
    61da:	2b00      	cmp	r3, #0
    61dc:	d003      	beq.n	61e6 <cc2400_spi_rev+0x32>
                        MOSI_SET;
    61de:	4b15      	ldr	r3, [pc, #84]	; (6234 <cc2400_spi_rev+0x80>)
    61e0:	2201      	movs	r2, #1
    61e2:	601a      	str	r2, [r3, #0]
    61e4:	e002      	b.n	61ec <cc2400_spi_rev+0x38>
                else
                        MOSI_CLR;
    61e6:	4b12      	ldr	r3, [pc, #72]	; (6230 <cc2400_spi_rev+0x7c>)
    61e8:	2201      	movs	r2, #1
    61ea:	601a      	str	r2, [r3, #0]
                data <<= 1;
    61ec:	683b      	ldr	r3, [r7, #0]
    61ee:	005b      	lsls	r3, r3, #1
    61f0:	603b      	str	r3, [r7, #0]

                SCLK_SET;
    61f2:	4b10      	ldr	r3, [pc, #64]	; (6234 <cc2400_spi_rev+0x80>)
    61f4:	2210      	movs	r2, #16
    61f6:	601a      	str	r2, [r3, #0]
                if (MISO)
    61f8:	4b0f      	ldr	r3, [pc, #60]	; (6238 <cc2400_spi_rev+0x84>)
    61fa:	681b      	ldr	r3, [r3, #0]
    61fc:	f003 0302 	and.w	r3, r3, #2
    6200:	2b00      	cmp	r3, #0
    6202:	d003      	beq.n	620c <cc2400_spi_rev+0x58>
                        data |= 1;
    6204:	683b      	ldr	r3, [r7, #0]
    6206:	f043 0301 	orr.w	r3, r3, #1
    620a:	603b      	str	r3, [r7, #0]

                SCLK_CLR;
    620c:	4b08      	ldr	r3, [pc, #32]	; (6230 <cc2400_spi_rev+0x7c>)
    620e:	2210      	movs	r2, #16
    6210:	601a      	str	r2, [r3, #0]

        /* start transaction by dropping CSN */
        CSN_CLR;
        
//      first_ts = CLK100NS;
        while (len--) {
    6212:	79fb      	ldrb	r3, [r7, #7]
    6214:	1e5a      	subs	r2, r3, #1
    6216:	71fa      	strb	r2, [r7, #7]
    6218:	2b00      	cmp	r3, #0
    621a:	d1db      	bne.n	61d4 <cc2400_spi_rev+0x20>
                SCLK_CLR;
        }
//      second_ts = CLK100NS;
//      diff_ts = second_ts - first_ts;

        CSN_SET;
    621c:	4b05      	ldr	r3, [pc, #20]	; (6234 <cc2400_spi_rev+0x80>)
    621e:	2220      	movs	r2, #32
    6220:	601a      	str	r2, [r3, #0]
        return data;
    6222:	683b      	ldr	r3, [r7, #0]
}
    6224:	4618      	mov	r0, r3
    6226:	3714      	adds	r7, #20
    6228:	46bd      	mov	sp, r7
    622a:	f85d 7b04 	ldr.w	r7, [sp], #4
    622e:	4770      	bx	lr
    6230:	2009c05c 	.word	0x2009c05c
    6234:	2009c058 	.word	0x2009c058
    6238:	2009c054 	.word	0x2009c054

0000623c <cc2400_get_rev>:

u8 cc2400_get_rev(u8 reg)
{
    623c:	b580      	push	{r7, lr}
    623e:	b084      	sub	sp, #16
    6240:	af00      	add	r7, sp, #0
    6242:	4603      	mov	r3, r0
    6244:	71fb      	strb	r3, [r7, #7]
        u32 in;

        u32 out = (reg | 0x80) << 8;
    6246:	79fb      	ldrb	r3, [r7, #7]
    6248:	f063 037f 	orn	r3, r3, #127	; 0x7f
    624c:	b2db      	uxtb	r3, r3
    624e:	021b      	lsls	r3, r3, #8
    6250:	60fb      	str	r3, [r7, #12]
        in = cc2400_spi_rev(16, out);
    6252:	2010      	movs	r0, #16
    6254:	68f9      	ldr	r1, [r7, #12]
    6256:	f7ff ffad 	bl	61b4 <cc2400_spi_rev>
    625a:	60b8      	str	r0, [r7, #8]
        return in & 0xFF;
    625c:	68bb      	ldr	r3, [r7, #8]
    625e:	b2db      	uxtb	r3, r3
}
    6260:	4618      	mov	r0, r3
    6262:	3710      	adds	r7, #16
    6264:	46bd      	mov	sp, r7
    6266:	bd80      	pop	{r7, pc}

00006268 <bt_stream_rx>:



//wpson
void bt_stream_rx()
{
    6268:	b580      	push	{r7, lr}
    626a:	b090      	sub	sp, #64	; 0x40
    626c:	af00      	add	r7, sp, #0
	u8 epstat;
	u16 f;
	u8 i = 0;
    626e:	2300      	movs	r3, #0
    6270:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	u8 buf[DMA_SIZE];


//	TXLED_SET;
	queue_init();
    6274:	f002 f9be 	bl	85f4 <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6278:	4b62      	ldr	r3, [pc, #392]	; (6404 <bt_stream_rx+0x19c>)
    627a:	2280      	movs	r2, #128	; 0x80
    627c:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif
	cc2400_set (MANAND, 0x7fff);
    627e:	200d      	movs	r0, #13
    6280:	f647 71ff 	movw	r1, #32767	; 0x7fff
    6284:	f003 fc2e 	bl	9ae4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    6288:	2012      	movs	r0, #18
    628a:	f642 3122 	movw	r1, #11042	; 0x2b22
    628e:	f003 fc29 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMTST0, 0x164b); // without PRNG
    6292:	2014      	movs	r0, #20
    6294:	f241 614b 	movw	r1, #5707	; 0x164b
    6298:	f003 fc24 	bl	9ae4 <cc2400_set>
	cc2400_set(GRMDM,   0x0560); // un-buffered mode, GFSK
    629c:	2020      	movs	r0, #32
    629e:	f44f 61ac 	mov.w	r1, #1376	; 0x560
    62a2:	f003 fc1f 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    62a6:	2003      	movs	r0, #3
    62a8:	2140      	movs	r1, #64	; 0x40
    62aa:	f003 fc1b 	bl	9ae4 <cc2400_set>
	
//	cc2400_set(SYNCH, 0xf9ae);
//	cc2400_set(SYNCL, 0x1584);
        cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
    62ae:	4856      	ldr	r0, [pc, #344]	; (6408 <bt_stream_rx+0x1a0>)
    62b0:	f003 fa46 	bl	9740 <rbit>
    62b4:	4603      	mov	r3, r0
    62b6:	b29b      	uxth	r3, r3
    62b8:	202c      	movs	r0, #44	; 0x2c
    62ba:	4619      	mov	r1, r3
    62bc:	f003 fc12 	bl	9ae4 <cc2400_set>
        cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
    62c0:	4851      	ldr	r0, [pc, #324]	; (6408 <bt_stream_rx+0x1a0>)
    62c2:	f003 fa3d 	bl	9740 <rbit>
    62c6:	4603      	mov	r3, r0
    62c8:	0c1b      	lsrs	r3, r3, #16
    62ca:	b29b      	uxth	r3, r3
    62cc:	202d      	movs	r0, #45	; 0x2d
    62ce:	4619      	mov	r1, r3
    62d0:	f003 fc08 	bl	9ae4 <cc2400_set>


	while (!(cc2400_status() & XOSC16M_STABLE));
    62d4:	bf00      	nop
    62d6:	f003 fcbd 	bl	9c54 <cc2400_status>
    62da:	4603      	mov	r3, r0
    62dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    62e0:	2b00      	cmp	r3, #0
    62e2:	d0f8      	beq.n	62d6 <bt_stream_rx+0x6e>
	while ((cc2400_status() & FS_LOCK));
    62e4:	bf00      	nop
    62e6:	f003 fcb5 	bl	9c54 <cc2400_status>
    62ea:	4603      	mov	r3, r0
    62ec:	f003 0304 	and.w	r3, r3, #4
    62f0:	2b00      	cmp	r3, #0
    62f2:	d1f8      	bne.n	62e6 <bt_stream_rx+0x7e>

	cc2400_set(FSDIV, channel - 1);
    62f4:	4b45      	ldr	r3, [pc, #276]	; (640c <bt_stream_rx+0x1a4>)
    62f6:	881b      	ldrh	r3, [r3, #0]
    62f8:	b29b      	uxth	r3, r3
    62fa:	3b01      	subs	r3, #1
    62fc:	b29b      	uxth	r3, r3
    62fe:	2002      	movs	r0, #2
    6300:	4619      	mov	r1, r3
    6302:	f003 fbef 	bl	9ae4 <cc2400_set>
	cc2400_strobe(SFSON);
    6306:	2061      	movs	r0, #97	; 0x61
    6308:	f003 fcae 	bl	9c68 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    630c:	bf00      	nop
    630e:	f003 fca1 	bl	9c54 <cc2400_status>
    6312:	4603      	mov	r3, r0
    6314:	f003 0304 	and.w	r3, r3, #4
    6318:	2b00      	cmp	r3, #0
    631a:	d0f8      	beq.n	630e <bt_stream_rx+0xa6>

	cc2400_strobe(SRX);
    631c:	2062      	movs	r0, #98	; 0x62
    631e:	f003 fca3 	bl	9c68 <cc2400_strobe>

//	u32 j = 250; while (--j);

	while (requested_mode == MODE_RX_SYMBOLS) {
    6322:	e061      	b.n	63e8 <bt_stream_rx+0x180>

		while (!(cc2400_status() & SYNC_RECEIVED));
    6324:	bf00      	nop
    6326:	f003 fc95 	bl	9c54 <cc2400_status>
    632a:	4603      	mov	r3, r0
    632c:	f003 0310 	and.w	r3, r3, #16
    6330:	2b00      	cmp	r3, #0
    6332:	d0f8      	beq.n	6326 <bt_stream_rx+0xbe>
		int out;
		u8 rssi = cc2400_get(RSSI) >> 8;
    6334:	2006      	movs	r0, #6
    6336:	f003 fbbf 	bl	9ab8 <cc2400_get>
    633a:	4603      	mov	r3, r0
    633c:	0a1b      	lsrs	r3, r3, #8
    633e:	b29b      	uxth	r3, r3
    6340:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
		if (rssi >= 128)
    6344:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    6348:	b25b      	sxtb	r3, r3
    634a:	2b00      	cmp	r3, #0
    634c:	da05      	bge.n	635a <bt_stream_rx+0xf2>
			out = rssi - 256;
    634e:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    6352:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
    6356:	637b      	str	r3, [r7, #52]	; 0x34
    6358:	e002      	b.n	6360 <bt_stream_rx+0xf8>
		else
			out = rssi;
    635a:	f897 303a 	ldrb.w	r3, [r7, #58]	; 0x3a
    635e:	637b      	str	r3, [r7, #52]	; 0x34
//		if (out > -15)
		{
			RXLED_SET;
    6360:	4b2b      	ldr	r3, [pc, #172]	; (6410 <bt_stream_rx+0x1a8>)
    6362:	2210      	movs	r2, #16
    6364:	601a      	str	r2, [r3, #0]
			for (int i = 0; i < 50; i++)
    6366:	2300      	movs	r3, #0
    6368:	63fb      	str	r3, [r7, #60]	; 0x3c
    636a:	e00c      	b.n	6386 <bt_stream_rx+0x11e>
			{
		/* give the CC2400 time to acquire RSSI reading */
	//		volatile u32 j = 500; while (--j); //FIXME crude delay
				buf[i] = cc2400_get_rev(RSSI);
    636c:	2006      	movs	r0, #6
    636e:	f7ff ff65 	bl	623c <cc2400_get_rev>
    6372:	4603      	mov	r3, r0
    6374:	4619      	mov	r1, r3
    6376:	463a      	mov	r2, r7
    6378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    637a:	4413      	add	r3, r2
    637c:	460a      	mov	r2, r1
    637e:	701a      	strb	r2, [r3, #0]
		else
			out = rssi;
//		if (out > -15)
		{
			RXLED_SET;
			for (int i = 0; i < 50; i++)
    6380:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6382:	3301      	adds	r3, #1
    6384:	63fb      	str	r3, [r7, #60]	; 0x3c
    6386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6388:	2b31      	cmp	r3, #49	; 0x31
    638a:	ddef      	ble.n	636c <bt_stream_rx+0x104>
		/* give the CC2400 time to acquire RSSI reading */
	//		volatile u32 j = 500; while (--j); //FIXME crude delay
				buf[i] = cc2400_get_rev(RSSI);
			}

			enqueue (RSSI_PACKET, buf);
    638c:	463b      	mov	r3, r7
    638e:	2008      	movs	r0, #8
    6390:	4619      	mov	r1, r3
    6392:	f7fe f899 	bl	44c8 <enqueue>

			handle_usb(clkn);
    6396:	4b1f      	ldr	r3, [pc, #124]	; (6414 <bt_stream_rx+0x1ac>)
    6398:	681b      	ldr	r3, [r3, #0]
    639a:	4618      	mov	r0, r3
    639c:	f002 f9ca 	bl	8734 <handle_usb>
//		msleep (500);

//		u32 j = 10000; while (j--);

		
			RXLED_CLR;
    63a0:	4b1d      	ldr	r3, [pc, #116]	; (6418 <bt_stream_rx+0x1b0>)
    63a2:	2210      	movs	r2, #16
    63a4:	601a      	str	r2, [r3, #0]
		}
		cc2400_strobe (SRFOFF);
    63a6:	2064      	movs	r0, #100	; 0x64
    63a8:	f003 fc5e 	bl	9c68 <cc2400_strobe>
		while ((cc2400_status () & FS_LOCK));
    63ac:	bf00      	nop
    63ae:	f003 fc51 	bl	9c54 <cc2400_status>
    63b2:	4603      	mov	r3, r0
    63b4:	f003 0304 	and.w	r3, r3, #4
    63b8:	2b00      	cmp	r3, #0
    63ba:	d1f8      	bne.n	63ae <bt_stream_rx+0x146>
	
		cc2400_set(SYNCH, 0xf9ae);
		cc2400_set(SYNCL, 0x1584);
*/

		while (!(cc2400_status () & XOSC16M_STABLE));
    63bc:	bf00      	nop
    63be:	f003 fc49 	bl	9c54 <cc2400_status>
    63c2:	4603      	mov	r3, r0
    63c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    63c8:	2b00      	cmp	r3, #0
    63ca:	d0f8      	beq.n	63be <bt_stream_rx+0x156>
		cc2400_strobe (SFSON);
    63cc:	2061      	movs	r0, #97	; 0x61
    63ce:	f003 fc4b 	bl	9c68 <cc2400_strobe>
		while (!(cc2400_status () & FS_LOCK));
    63d2:	bf00      	nop
    63d4:	f003 fc3e 	bl	9c54 <cc2400_status>
    63d8:	4603      	mov	r3, r0
    63da:	f003 0304 	and.w	r3, r3, #4
    63de:	2b00      	cmp	r3, #0
    63e0:	d0f8      	beq.n	63d4 <bt_stream_rx+0x16c>
	
	//	PAEN_SET;
		
//	 	u32 k = 100; while (k--);
		cc2400_strobe (SRX);
    63e2:	2062      	movs	r0, #98	; 0x62
    63e4:	f003 fc40 	bl	9c68 <cc2400_strobe>

	cc2400_strobe(SRX);

//	u32 j = 250; while (--j);

	while (requested_mode == MODE_RX_SYMBOLS) {
    63e8:	4b0c      	ldr	r3, [pc, #48]	; (641c <bt_stream_rx+0x1b4>)
    63ea:	781b      	ldrb	r3, [r3, #0]
    63ec:	b2db      	uxtb	r3, r3
    63ee:	2b01      	cmp	r3, #1
    63f0:	d098      	beq.n	6324 <bt_stream_rx+0xbc>
		cc2400_strobe (SRX);
//		HGM_SET;
		

	}
	mode = MODE_IDLE;
    63f2:	4b0b      	ldr	r3, [pc, #44]	; (6420 <bt_stream_rx+0x1b8>)
    63f4:	2200      	movs	r2, #0
    63f6:	701a      	strb	r2, [r3, #0]
	RXLED_CLR;
    63f8:	4b07      	ldr	r3, [pc, #28]	; (6418 <bt_stream_rx+0x1b0>)
    63fa:	2210      	movs	r2, #16
    63fc:	601a      	str	r2, [r3, #0]
}
    63fe:	3740      	adds	r7, #64	; 0x40
    6400:	46bd      	mov	sp, r7
    6402:	bd80      	pop	{r7, pc}
    6404:	2009c058 	.word	0x2009c058
    6408:	8e89bed6 	.word	0x8e89bed6
    640c:	1000049c 	.word	0x1000049c
    6410:	2009c038 	.word	0x2009c038
    6414:	10000be4 	.word	0x10000be4
    6418:	2009c03c 	.word	0x2009c03c
    641c:	10000a3f 	.word	0x10000a3f
    6420:	10000a3e 	.word	0x10000a3e

00006424 <le_set_access_address>:

/* set LE access address */
static void le_set_access_address(u32 aa) {
    6424:	b580      	push	{r7, lr}
    6426:	b084      	sub	sp, #16
    6428:	af00      	add	r7, sp, #0
    642a:	6078      	str	r0, [r7, #4]
	u32 aa_rev;

	le.access_address = aa;
    642c:	4a09      	ldr	r2, [pc, #36]	; (6454 <le_set_access_address+0x30>)
    642e:	687b      	ldr	r3, [r7, #4]
    6430:	6013      	str	r3, [r2, #0]
	aa_rev = rbit(aa);
    6432:	6878      	ldr	r0, [r7, #4]
    6434:	f003 f984 	bl	9740 <rbit>
    6438:	60f8      	str	r0, [r7, #12]
	le.syncl = aa_rev & 0xffff;
    643a:	68fb      	ldr	r3, [r7, #12]
    643c:	b29a      	uxth	r2, r3
    643e:	4b05      	ldr	r3, [pc, #20]	; (6454 <le_set_access_address+0x30>)
    6440:	80da      	strh	r2, [r3, #6]
	le.synch = aa_rev >> 16;
    6442:	68fb      	ldr	r3, [r7, #12]
    6444:	0c1b      	lsrs	r3, r3, #16
    6446:	b29a      	uxth	r2, r3
    6448:	4b02      	ldr	r3, [pc, #8]	; (6454 <le_set_access_address+0x30>)
    644a:	809a      	strh	r2, [r3, #4]
}
    644c:	3710      	adds	r7, #16
    644e:	46bd      	mov	sp, r7
    6450:	bd80      	pop	{r7, pc}
    6452:	bf00      	nop
    6454:	10000458 	.word	0x10000458

00006458 <reset_le>:

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    6458:	b580      	push	{r7, lr}
    645a:	af00      	add	r7, sp, #0
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    645c:	481f      	ldr	r0, [pc, #124]	; (64dc <reset_le+0x84>)
    645e:	f7ff ffe1 	bl	6424 <le_set_access_address>
	le.crc_init  = 0x555555;	       // advertising channel CRCInit
    6462:	4b1f      	ldr	r3, [pc, #124]	; (64e0 <reset_le+0x88>)
    6464:	4a1f      	ldr	r2, [pc, #124]	; (64e4 <reset_le+0x8c>)
    6466:	609a      	str	r2, [r3, #8]
	le.crc_init_reversed = 0xAAAAAA;
    6468:	4b1d      	ldr	r3, [pc, #116]	; (64e0 <reset_le+0x88>)
    646a:	4a1f      	ldr	r2, [pc, #124]	; (64e8 <reset_le+0x90>)
    646c:	60da      	str	r2, [r3, #12]
	le.crc_verify = 1;
    646e:	4b1c      	ldr	r3, [pc, #112]	; (64e0 <reset_le+0x88>)
    6470:	2201      	movs	r2, #1
    6472:	611a      	str	r2, [r3, #16]
	le.last_packet = 0;
    6474:	4b1a      	ldr	r3, [pc, #104]	; (64e0 <reset_le+0x88>)
    6476:	2200      	movs	r2, #0
    6478:	641a      	str	r2, [r3, #64]	; 0x40

	le.link_state = LINK_INACTIVE;
    647a:	4b19      	ldr	r3, [pc, #100]	; (64e0 <reset_le+0x88>)
    647c:	2200      	movs	r2, #0
    647e:	751a      	strb	r2, [r3, #20]

	le.channel_idx = 0;
    6480:	4b17      	ldr	r3, [pc, #92]	; (64e0 <reset_le+0x88>)
    6482:	2200      	movs	r2, #0
    6484:	755a      	strb	r2, [r3, #21]
	le.channel_increment = 0;
    6486:	4b16      	ldr	r3, [pc, #88]	; (64e0 <reset_le+0x88>)
    6488:	2200      	movs	r2, #0
    648a:	759a      	strb	r2, [r3, #22]

	le.conn_epoch = 0;
    648c:	4b14      	ldr	r3, [pc, #80]	; (64e0 <reset_le+0x88>)
    648e:	2200      	movs	r2, #0
    6490:	619a      	str	r2, [r3, #24]
	le.interval_timer = 0;
    6492:	4b13      	ldr	r3, [pc, #76]	; (64e0 <reset_le+0x88>)
    6494:	2200      	movs	r2, #0
    6496:	839a      	strh	r2, [r3, #28]
	le.conn_interval = 0;
    6498:	4b11      	ldr	r3, [pc, #68]	; (64e0 <reset_le+0x88>)
    649a:	2200      	movs	r2, #0
    649c:	83da      	strh	r2, [r3, #30]
	le.conn_interval = 0;
    649e:	4b10      	ldr	r3, [pc, #64]	; (64e0 <reset_le+0x88>)
    64a0:	2200      	movs	r2, #0
    64a2:	83da      	strh	r2, [r3, #30]
	le.conn_count = 0;
    64a4:	4b0e      	ldr	r3, [pc, #56]	; (64e0 <reset_le+0x88>)
    64a6:	2200      	movs	r2, #0
    64a8:	841a      	strh	r2, [r3, #32]

	le.win_size = 0;
    64aa:	4b0d      	ldr	r3, [pc, #52]	; (64e0 <reset_le+0x88>)
    64ac:	2200      	movs	r2, #0
    64ae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	le.win_offset = 0;
    64b2:	4b0b      	ldr	r3, [pc, #44]	; (64e0 <reset_le+0x88>)
    64b4:	2200      	movs	r2, #0
    64b6:	849a      	strh	r2, [r3, #36]	; 0x24

	le.update_pending = 0;
    64b8:	4b09      	ldr	r3, [pc, #36]	; (64e0 <reset_le+0x88>)
    64ba:	2200      	movs	r2, #0
    64bc:	629a      	str	r2, [r3, #40]	; 0x28
	le.update_instant = 0;
    64be:	4b08      	ldr	r3, [pc, #32]	; (64e0 <reset_le+0x88>)
    64c0:	2200      	movs	r2, #0
    64c2:	859a      	strh	r2, [r3, #44]	; 0x2c
	le.interval_update = 0;
    64c4:	4b06      	ldr	r3, [pc, #24]	; (64e0 <reset_le+0x88>)
    64c6:	2200      	movs	r2, #0
    64c8:	85da      	strh	r2, [r3, #46]	; 0x2e
	le.win_size_update = 0;
    64ca:	4b05      	ldr	r3, [pc, #20]	; (64e0 <reset_le+0x88>)
    64cc:	2200      	movs	r2, #0
    64ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	le.win_offset_update;

	do_hop = 0;
    64d2:	4b06      	ldr	r3, [pc, #24]	; (64ec <reset_le+0x94>)
    64d4:	2200      	movs	r2, #0
    64d6:	701a      	strb	r2, [r3, #0]
}
    64d8:	bd80      	pop	{r7, pc}
    64da:	bf00      	nop
    64dc:	8e89bed6 	.word	0x8e89bed6
    64e0:	10000458 	.word	0x10000458
    64e4:	00555555 	.word	0x00555555
    64e8:	00aaaaaa 	.word	0x00aaaaaa
    64ec:	1000097d 	.word	0x1000097d

000064f0 <reset_le_promisc>:

// reset LE Promisc state
void reset_le_promisc(void) {
    64f0:	b580      	push	{r7, lr}
    64f2:	af00      	add	r7, sp, #0
	memset(&le_promisc, 0, sizeof(le_promisc));
    64f4:	4805      	ldr	r0, [pc, #20]	; (650c <reset_le_promisc+0x1c>)
    64f6:	2100      	movs	r1, #0
    64f8:	f44f 7284 	mov.w	r2, #264	; 0x108
    64fc:	f7fd fe3c 	bl	4178 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    6500:	4b02      	ldr	r3, [pc, #8]	; (650c <reset_le_promisc+0x1c>)
    6502:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6506:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    650a:	bd80      	pop	{r7, pc}
    650c:	10000bec 	.word	0x10000bec

00006510 <bt_generic_le>:

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    6510:	b580      	push	{r7, lr}
    6512:	b088      	sub	sp, #32
    6514:	af00      	add	r7, sp, #0
    6516:	4603      	mov	r3, r0
    6518:	71fb      	strb	r3, [r7, #7]
	u8 *tmp = NULL;
    651a:	2300      	movs	r3, #0
    651c:	60fb      	str	r3, [r7, #12]
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    651e:	4ba4      	ldr	r3, [pc, #656]	; (67b0 <bt_generic_le+0x2a0>)
    6520:	2201      	movs	r2, #1
    6522:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    6524:	4aa3      	ldr	r2, [pc, #652]	; (67b4 <bt_generic_le+0x2a4>)
    6526:	79fb      	ldrb	r3, [r7, #7]
    6528:	7013      	strb	r3, [r2, #0]

	reset_le();
    652a:	f7ff ff95 	bl	6458 <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    652e:	4ba2      	ldr	r3, [pc, #648]	; (67b8 <bt_generic_le+0x2a8>)
    6530:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6534:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    6536:	4ba1      	ldr	r3, [pc, #644]	; (67bc <bt_generic_le+0x2ac>)
    6538:	2210      	movs	r2, #16
    653a:	601a      	str	r2, [r3, #0]

	queue_init();
    653c:	f002 f85a 	bl	85f4 <queue_init>
	dio_ssp_init();
    6540:	f003 f9fe 	bl	9940 <dio_ssp_init>
	dma_init();
    6544:	f7ff f826 	bl	5594 <dma_init>
	dio_ssp_start();
    6548:	f7ff fa4e 	bl	59e8 <dio_ssp_start>
	cc2400_rx();
    654c:	f7ff fb08 	bl	5b60 <cc2400_rx>

	cs_trigger_enable();
    6550:	f7fe f958 	bl	4804 <cs_trigger_enable>

	hold = 0;
    6554:	2300      	movs	r3, #0
    6556:	77fb      	strb	r3, [r7, #31]

	while (requested_mode == active_mode) {
    6558:	e115      	b.n	6786 <bt_generic_le+0x276>
		if (requested_channel != 0) {
    655a:	4b99      	ldr	r3, [pc, #612]	; (67c0 <bt_generic_le+0x2b0>)
    655c:	881b      	ldrh	r3, [r3, #0]
    655e:	b29b      	uxth	r3, r3
    6560:	2b00      	cmp	r3, #0
    6562:	d024      	beq.n	65ae <bt_generic_le+0x9e>
			cc2400_strobe(SRFOFF);
    6564:	2064      	movs	r0, #100	; 0x64
    6566:	f003 fb7f 	bl	9c68 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    656a:	bf00      	nop
    656c:	f003 fb72 	bl	9c54 <cc2400_status>
    6570:	4603      	mov	r3, r0
    6572:	f003 0304 	and.w	r3, r3, #4
    6576:	2b00      	cmp	r3, #0
    6578:	d1f8      	bne.n	656c <bt_generic_le+0x5c>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    657a:	4b92      	ldr	r3, [pc, #584]	; (67c4 <bt_generic_le+0x2b4>)
    657c:	881b      	ldrh	r3, [r3, #0]
    657e:	b29b      	uxth	r3, r3
    6580:	3b01      	subs	r3, #1
    6582:	b29b      	uxth	r3, r3
    6584:	2002      	movs	r0, #2
    6586:	4619      	mov	r1, r3
    6588:	f003 faac 	bl	9ae4 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    658c:	2061      	movs	r0, #97	; 0x61
    658e:	f003 fb6b 	bl	9c68 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6592:	bf00      	nop
    6594:	f003 fb5e 	bl	9c54 <cc2400_status>
    6598:	4603      	mov	r3, r0
    659a:	f003 0304 	and.w	r3, r3, #4
    659e:	2b00      	cmp	r3, #0
    65a0:	d0f8      	beq.n	6594 <bt_generic_le+0x84>

			/* RX mode */
			cc2400_strobe(SRX);
    65a2:	2062      	movs	r0, #98	; 0x62
    65a4:	f003 fb60 	bl	9c68 <cc2400_strobe>

			requested_channel = 0;
    65a8:	4b85      	ldr	r3, [pc, #532]	; (67c0 <bt_generic_le+0x2b0>)
    65aa:	2200      	movs	r2, #0
    65ac:	801a      	strh	r2, [r3, #0]
		}

		if (do_hop) {
    65ae:	4b86      	ldr	r3, [pc, #536]	; (67c8 <bt_generic_le+0x2b8>)
    65b0:	781b      	ldrb	r3, [r3, #0]
    65b2:	b2db      	uxtb	r3, r3
    65b4:	2b00      	cmp	r3, #0
    65b6:	d002      	beq.n	65be <bt_generic_le+0xae>
			hop();
    65b8:	f7ff fd68 	bl	608c <hop>
    65bc:	e003      	b.n	65c6 <bt_generic_le+0xb6>
		} else {
			TXLED_CLR;
    65be:	4b7f      	ldr	r3, [pc, #508]	; (67bc <bt_generic_le+0x2ac>)
    65c0:	f44f 7280 	mov.w	r2, #256	; 0x100
    65c4:	601a      	str	r2, [r3, #0]
		}

		RXLED_CLR;
    65c6:	4b7d      	ldr	r3, [pc, #500]	; (67bc <bt_generic_le+0x2ac>)
    65c8:	2210      	movs	r2, #16
    65ca:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    65cc:	f7fd fe9a 	bl	4304 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    65d0:	2380      	movs	r3, #128	; 0x80
    65d2:	74bb      	strb	r3, [r7, #18]
		while ((rx_tc == 0) && (rx_err == 0))
    65d4:	e022      	b.n	661c <bt_generic_le+0x10c>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    65d6:	2006      	movs	r0, #6
    65d8:	f003 fa6e 	bl	9ab8 <cc2400_get>
    65dc:	4603      	mov	r3, r0
    65de:	0a1b      	lsrs	r3, r3, #8
    65e0:	b29b      	uxth	r3, r3
    65e2:	74fb      	strb	r3, [r7, #19]
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    65e4:	4b79      	ldr	r3, [pc, #484]	; (67cc <bt_generic_le+0x2bc>)
    65e6:	781b      	ldrb	r3, [r3, #0]
    65e8:	b2db      	uxtb	r3, r3
    65ea:	2b00      	cmp	r3, #0
    65ec:	d011      	beq.n	6612 <bt_generic_le+0x102>
    65ee:	f997 3012 	ldrsb.w	r3, [r7, #18]
    65f2:	f113 0f80 	cmn.w	r3, #128	; 0x80
    65f6:	d10c      	bne.n	6612 <bt_generic_le+0x102>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    65f8:	4b75      	ldr	r3, [pc, #468]	; (67d0 <bt_generic_le+0x2c0>)
    65fa:	781b      	ldrb	r3, [r3, #0]
    65fc:	b25b      	sxtb	r3, r3
    65fe:	f103 0236 	add.w	r2, r3, #54	; 0x36
    6602:	f997 3013 	ldrsb.w	r3, [r7, #19]
    6606:	4293      	cmp	r3, r2
    6608:	bfb8      	it	lt
    660a:	4613      	movlt	r3, r2
    660c:	74fb      	strb	r3, [r7, #19]
				rssi_at_trigger = rssi;
    660e:	7cfb      	ldrb	r3, [r7, #19]
    6610:	74bb      	strb	r3, [r7, #18]
			}
			rssi_add(rssi);
    6612:	f997 3013 	ldrsb.w	r3, [r7, #19]
    6616:	4618      	mov	r0, r3
    6618:	f7fd fe8e 	bl	4338 <rssi_add>
		RXLED_CLR;

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
    661c:	4b6d      	ldr	r3, [pc, #436]	; (67d4 <bt_generic_le+0x2c4>)
    661e:	681b      	ldr	r3, [r3, #0]
    6620:	2b00      	cmp	r3, #0
    6622:	d103      	bne.n	662c <bt_generic_le+0x11c>
    6624:	4b6c      	ldr	r3, [pc, #432]	; (67d8 <bt_generic_le+0x2c8>)
    6626:	681b      	ldr	r3, [r3, #0]
    6628:	2b00      	cmp	r3, #0
    662a:	d0d4      	beq.n	65d6 <bt_generic_le+0xc6>
			}
			rssi_add(rssi);
		}

		/* Keep buffer swapping in sync with DMA. */
		if (rx_tc % 2) {
    662c:	4b69      	ldr	r3, [pc, #420]	; (67d4 <bt_generic_le+0x2c4>)
    662e:	681b      	ldr	r3, [r3, #0]
    6630:	f003 0301 	and.w	r3, r3, #1
    6634:	2b00      	cmp	r3, #0
    6636:	d009      	beq.n	664c <bt_generic_le+0x13c>
			tmp = active_rxbuf;
    6638:	4b68      	ldr	r3, [pc, #416]	; (67dc <bt_generic_le+0x2cc>)
    663a:	681b      	ldr	r3, [r3, #0]
    663c:	60fb      	str	r3, [r7, #12]
			active_rxbuf = idle_rxbuf;
    663e:	4b68      	ldr	r3, [pc, #416]	; (67e0 <bt_generic_le+0x2d0>)
    6640:	681b      	ldr	r3, [r3, #0]
    6642:	4a66      	ldr	r2, [pc, #408]	; (67dc <bt_generic_le+0x2cc>)
    6644:	6013      	str	r3, [r2, #0]
			idle_rxbuf = tmp;
    6646:	4a66      	ldr	r2, [pc, #408]	; (67e0 <bt_generic_le+0x2d0>)
    6648:	68fb      	ldr	r3, [r7, #12]
    664a:	6013      	str	r3, [r2, #0]
		}

		if (rx_err) {
    664c:	4b62      	ldr	r3, [pc, #392]	; (67d8 <bt_generic_le+0x2c8>)
    664e:	681b      	ldr	r3, [r3, #0]
    6650:	2b00      	cmp	r3, #0
    6652:	d007      	beq.n	6664 <bt_generic_le+0x154>
			status |= DMA_ERROR;
    6654:	4b63      	ldr	r3, [pc, #396]	; (67e4 <bt_generic_le+0x2d4>)
    6656:	781b      	ldrb	r3, [r3, #0]
    6658:	b2db      	uxtb	r3, r3
    665a:	f043 0302 	orr.w	r3, r3, #2
    665e:	b2da      	uxtb	r2, r3
    6660:	4b60      	ldr	r3, [pc, #384]	; (67e4 <bt_generic_le+0x2d4>)
    6662:	701a      	strb	r2, [r3, #0]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    6664:	4b5b      	ldr	r3, [pc, #364]	; (67d4 <bt_generic_le+0x2c4>)
    6666:	681b      	ldr	r3, [r3, #0]
    6668:	2b00      	cmp	r3, #0
    666a:	d100      	bne.n	666e <bt_generic_le+0x15e>
			goto rx_continue;
    666c:	e085      	b.n	677a <bt_generic_le+0x26a>

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    666e:	4b59      	ldr	r3, [pc, #356]	; (67d4 <bt_generic_le+0x2c4>)
    6670:	681b      	ldr	r3, [r3, #0]
    6672:	2b01      	cmp	r3, #1
    6674:	d907      	bls.n	6686 <bt_generic_le+0x176>
			status |= DMA_OVERFLOW;
    6676:	4b5b      	ldr	r3, [pc, #364]	; (67e4 <bt_generic_le+0x2d4>)
    6678:	781b      	ldrb	r3, [r3, #0]
    667a:	b2db      	uxtb	r3, r3
    667c:	f043 0301 	orr.w	r3, r3, #1
    6680:	b2da      	uxtb	r2, r3
    6682:	4b58      	ldr	r3, [pc, #352]	; (67e4 <bt_generic_le+0x2d4>)
    6684:	701a      	strb	r2, [r3, #0]

		rssi_iir_update();
    6686:	f7fd fe8d 	bl	43a4 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    668a:	4b50      	ldr	r3, [pc, #320]	; (67cc <bt_generic_le+0x2bc>)
    668c:	781b      	ldrb	r3, [r3, #0]
    668e:	b2db      	uxtb	r3, r3
    6690:	2b00      	cmp	r3, #0
    6692:	d103      	bne.n	669c <bt_generic_le+0x18c>
    6694:	4b54      	ldr	r3, [pc, #336]	; (67e8 <bt_generic_le+0x2d8>)
    6696:	781b      	ldrb	r3, [r3, #0]
    6698:	2b00      	cmp	r3, #0
    669a:	d00c      	beq.n	66b6 <bt_generic_le+0x1a6>
			status |= CS_TRIGGER;
    669c:	4b51      	ldr	r3, [pc, #324]	; (67e4 <bt_generic_le+0x2d4>)
    669e:	781b      	ldrb	r3, [r3, #0]
    66a0:	b2db      	uxtb	r3, r3
    66a2:	f043 0308 	orr.w	r3, r3, #8
    66a6:	b2da      	uxtb	r2, r3
    66a8:	4b4e      	ldr	r3, [pc, #312]	; (67e4 <bt_generic_le+0x2d4>)
    66aa:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    66ac:	2302      	movs	r3, #2
    66ae:	77fb      	strb	r3, [r7, #31]
			cs_trigger = 0;
    66b0:	4b46      	ldr	r3, [pc, #280]	; (67cc <bt_generic_le+0x2bc>)
    66b2:	2200      	movs	r2, #0
    66b4:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    66b6:	4b4d      	ldr	r3, [pc, #308]	; (67ec <bt_generic_le+0x2dc>)
    66b8:	781b      	ldrb	r3, [r3, #0]
    66ba:	b25a      	sxtb	r2, r3
    66bc:	4b44      	ldr	r3, [pc, #272]	; (67d0 <bt_generic_le+0x2c0>)
    66be:	781b      	ldrb	r3, [r3, #0]
    66c0:	b25b      	sxtb	r3, r3
    66c2:	3336      	adds	r3, #54	; 0x36
    66c4:	429a      	cmp	r2, r3
    66c6:	db09      	blt.n	66dc <bt_generic_le+0x1cc>
			status |= RSSI_TRIGGER;
    66c8:	4b46      	ldr	r3, [pc, #280]	; (67e4 <bt_generic_le+0x2d4>)
    66ca:	781b      	ldrb	r3, [r3, #0]
    66cc:	b2db      	uxtb	r3, r3
    66ce:	f043 0310 	orr.w	r3, r3, #16
    66d2:	b2da      	uxtb	r2, r3
    66d4:	4b43      	ldr	r3, [pc, #268]	; (67e4 <bt_generic_le+0x2d4>)
    66d6:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    66d8:	2302      	movs	r3, #2
    66da:	77fb      	strb	r3, [r7, #31]
		}

		/* Send a packet once in a while (6.25 Hz) to keep
		 * host USB reads from timing out. */
		if (keepalive_trigger) {
    66dc:	4b44      	ldr	r3, [pc, #272]	; (67f0 <bt_generic_le+0x2e0>)
    66de:	781b      	ldrb	r3, [r3, #0]
    66e0:	b2db      	uxtb	r3, r3
    66e2:	2b00      	cmp	r3, #0
    66e4:	d007      	beq.n	66f6 <bt_generic_le+0x1e6>
			if (hold == 0)
    66e6:	7ffb      	ldrb	r3, [r7, #31]
    66e8:	2b00      	cmp	r3, #0
    66ea:	d101      	bne.n	66f0 <bt_generic_le+0x1e0>
				hold = 1;
    66ec:	2301      	movs	r3, #1
    66ee:	77fb      	strb	r3, [r7, #31]
			keepalive_trigger = 0;
    66f0:	4b3f      	ldr	r3, [pc, #252]	; (67f0 <bt_generic_le+0x2e0>)
    66f2:	2200      	movs	r2, #0
    66f4:	701a      	strb	r2, [r3, #0]
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    66f6:	7ffb      	ldrb	r3, [r7, #31]
    66f8:	2b00      	cmp	r3, #0
    66fa:	d100      	bne.n	66fe <bt_generic_le+0x1ee>
			goto rx_continue;
    66fc:	e03d      	b.n	677a <bt_generic_le+0x26a>
		}
		hold--;
    66fe:	7ffb      	ldrb	r3, [r7, #31]
    6700:	3b01      	subs	r3, #1
    6702:	77fb      	strb	r3, [r7, #31]

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    6704:	483b      	ldr	r0, [pc, #236]	; (67f4 <bt_generic_le+0x2e4>)
    6706:	493c      	ldr	r1, [pc, #240]	; (67f8 <bt_generic_le+0x2e8>)
    6708:	f44f 72c8 	mov.w	r2, #400	; 0x190
    670c:	f004 ffbe 	bl	b68c <memcpy>

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    6710:	2300      	movs	r3, #0
    6712:	61bb      	str	r3, [r7, #24]
    6714:	e025      	b.n	6762 <bt_generic_le+0x252>
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    6716:	2300      	movs	r3, #0
    6718:	617b      	str	r3, [r7, #20]
    671a:	e01c      	b.n	6756 <bt_generic_le+0x246>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    671c:	69bb      	ldr	r3, [r7, #24]
    671e:	3332      	adds	r3, #50	; 0x32
    6720:	00da      	lsls	r2, r3, #3
    6722:	697b      	ldr	r3, [r7, #20]
    6724:	4413      	add	r3, r2
    6726:	4a2e      	ldr	r2, [pc, #184]	; (67e0 <bt_generic_le+0x2d0>)
    6728:	6811      	ldr	r1, [r2, #0]
    672a:	69ba      	ldr	r2, [r7, #24]
    672c:	440a      	add	r2, r1
    672e:	7812      	ldrb	r2, [r2, #0]
    6730:	09d2      	lsrs	r2, r2, #7
    6732:	b2d1      	uxtb	r1, r2
    6734:	4a2f      	ldr	r2, [pc, #188]	; (67f4 <bt_generic_le+0x2e4>)
    6736:	54d1      	strb	r1, [r2, r3]
				idle_rxbuf[i] <<= 1;
    6738:	4b29      	ldr	r3, [pc, #164]	; (67e0 <bt_generic_le+0x2d0>)
    673a:	681a      	ldr	r2, [r3, #0]
    673c:	69bb      	ldr	r3, [r7, #24]
    673e:	4413      	add	r3, r2
    6740:	4a27      	ldr	r2, [pc, #156]	; (67e0 <bt_generic_le+0x2d0>)
    6742:	6811      	ldr	r1, [r2, #0]
    6744:	69ba      	ldr	r2, [r7, #24]
    6746:	440a      	add	r2, r1
    6748:	7812      	ldrb	r2, [r2, #0]
    674a:	0052      	lsls	r2, r2, #1
    674c:	b2d2      	uxtb	r2, r2
    674e:	701a      	strb	r2, [r3, #0]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    6750:	697b      	ldr	r3, [r7, #20]
    6752:	3301      	adds	r3, #1
    6754:	617b      	str	r3, [r7, #20]
    6756:	697b      	ldr	r3, [r7, #20]
    6758:	2b07      	cmp	r3, #7
    675a:	dddf      	ble.n	671c <bt_generic_le+0x20c>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    675c:	69bb      	ldr	r3, [r7, #24]
    675e:	3301      	adds	r3, #1
    6760:	61bb      	str	r3, [r7, #24]
    6762:	69bb      	ldr	r3, [r7, #24]
    6764:	2b31      	cmp	r3, #49	; 0x31
    6766:	ddd6      	ble.n	6716 <bt_generic_le+0x206>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    6768:	4b24      	ldr	r3, [pc, #144]	; (67fc <bt_generic_le+0x2ec>)
    676a:	681b      	ldr	r3, [r3, #0]
    676c:	4821      	ldr	r0, [pc, #132]	; (67f4 <bt_generic_le+0x2e4>)
    676e:	4798      	blx	r3
    6770:	60b8      	str	r0, [r7, #8]
		if (!ret) break;
    6772:	68bb      	ldr	r3, [r7, #8]
    6774:	2b00      	cmp	r3, #0
    6776:	d100      	bne.n	677a <bt_generic_le+0x26a>
    6778:	e00c      	b.n	6794 <bt_generic_le+0x284>

	rx_continue:
		rx_tc = 0;
    677a:	4b16      	ldr	r3, [pc, #88]	; (67d4 <bt_generic_le+0x2c4>)
    677c:	2200      	movs	r2, #0
    677e:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6780:	4b15      	ldr	r3, [pc, #84]	; (67d8 <bt_generic_le+0x2c8>)
    6782:	2200      	movs	r2, #0
    6784:	601a      	str	r2, [r3, #0]

	cs_trigger_enable();

	hold = 0;

	while (requested_mode == active_mode) {
    6786:	4b1e      	ldr	r3, [pc, #120]	; (6800 <bt_generic_le+0x2f0>)
    6788:	781b      	ldrb	r3, [r3, #0]
    678a:	b2db      	uxtb	r3, r3
    678c:	79fa      	ldrb	r2, [r7, #7]
    678e:	429a      	cmp	r2, r3
    6790:	f43f aee3 	beq.w	655a <bt_generic_le+0x4a>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6794:	4b1b      	ldr	r3, [pc, #108]	; (6804 <bt_generic_le+0x2f4>)
    6796:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    679a:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    679c:	f7ff f9b8 	bl	5b10 <cc2400_idle>
	dio_ssp_stop();
    67a0:	f7ff f952 	bl	5a48 <dio_ssp_stop>
	cs_trigger_disable();
    67a4:	f7fe f84c 	bl	4840 <cs_trigger_disable>
}
    67a8:	3720      	adds	r7, #32
    67aa:	46bd      	mov	sp, r7
    67ac:	bd80      	pop	{r7, pc}
    67ae:	bf00      	nop
    67b0:	10000a42 	.word	0x10000a42
    67b4:	10000a3e 	.word	0x10000a3e
    67b8:	e000e100 	.word	0xe000e100
    67bc:	2009c03c 	.word	0x2009c03c
    67c0:	10000a44 	.word	0x10000a44
    67c4:	1000049c 	.word	0x1000049c
    67c8:	1000097d 	.word	0x1000097d
    67cc:	100010b0 	.word	0x100010b0
    67d0:	1000044d 	.word	0x1000044d
    67d4:	10000b00 	.word	0x10000b00
    67d8:	100010ac 	.word	0x100010ac
    67dc:	10000450 	.word	0x10000450
    67e0:	10000454 	.word	0x10000454
    67e4:	10000a48 	.word	0x10000a48
    67e8:	1000097e 	.word	0x1000097e
    67ec:	10000b04 	.word	0x10000b04
    67f0:	10000be0 	.word	0x10000be0
    67f4:	10000d00 	.word	0x10000d00
    67f8:	10000e90 	.word	0x10000e90
    67fc:	10000998 	.word	0x10000998
    6800:	10000a3f 	.word	0x10000a3f
    6804:	e000e180 	.word	0xe000e180

00006808 <bt_le_sync>:


void bt_le_sync(u8 active_mode)
{
    6808:	b590      	push	{r4, r7, lr}
    680a:	b09b      	sub	sp, #108	; 0x6c
    680c:	af00      	add	r7, sp, #0
    680e:	4603      	mov	r3, r0
    6810:	71fb      	strb	r3, [r7, #7]
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    6812:	4b87      	ldr	r3, [pc, #540]	; (6a30 <bt_le_sync+0x228>)
    6814:	2201      	movs	r2, #1
    6816:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    6818:	4a86      	ldr	r2, [pc, #536]	; (6a34 <bt_le_sync+0x22c>)
    681a:	79fb      	ldrb	r3, [r7, #7]
    681c:	7013      	strb	r3, [r2, #0]

	le.link_state = LINK_LISTENING;
    681e:	4b86      	ldr	r3, [pc, #536]	; (6a38 <bt_le_sync+0x230>)
    6820:	2201      	movs	r2, #1
    6822:	751a      	strb	r2, [r3, #20]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    6824:	4b85      	ldr	r3, [pc, #532]	; (6a3c <bt_le_sync+0x234>)
    6826:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    682a:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    682c:	4b84      	ldr	r3, [pc, #528]	; (6a40 <bt_le_sync+0x238>)
    682e:	2210      	movs	r2, #16
    6830:	601a      	str	r2, [r3, #0]

	queue_init();
    6832:	f001 fedf 	bl	85f4 <queue_init>
	dio_ssp_init();
    6836:	f003 f883 	bl	9940 <dio_ssp_init>
	dma_init_le();
    683a:	f7fe ff6b 	bl	5714 <dma_init_le>
	dio_ssp_start();
    683e:	f7ff f8d3 	bl	59e8 <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    6842:	4b7d      	ldr	r3, [pc, #500]	; (6a38 <bt_le_sync+0x230>)
    6844:	681b      	ldr	r3, [r3, #0]
    6846:	4618      	mov	r0, r3
    6848:	f002 ff7a 	bl	9740 <rbit>
    684c:	4603      	mov	r3, r0
    684e:	4618      	mov	r0, r3
    6850:	f7ff f9e4 	bl	5c1c <cc2400_rx_sync>

	while (requested_mode == active_mode) {
    6854:	e247      	b.n	6ce6 <bt_le_sync+0x4de>
		if (requested_channel != 0) {
    6856:	4b7b      	ldr	r3, [pc, #492]	; (6a44 <bt_le_sync+0x23c>)
    6858:	881b      	ldrh	r3, [r3, #0]
    685a:	b29b      	uxth	r3, r3
    685c:	2b00      	cmp	r3, #0
    685e:	d029      	beq.n	68b4 <bt_le_sync+0xac>
			cc2400_strobe(SRFOFF);
    6860:	2064      	movs	r0, #100	; 0x64
    6862:	f003 fa01 	bl	9c68 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    6866:	bf00      	nop
    6868:	f003 f9f4 	bl	9c54 <cc2400_status>
    686c:	4603      	mov	r3, r0
    686e:	f003 0304 	and.w	r3, r3, #4
    6872:	2b00      	cmp	r3, #0
    6874:	d1f8      	bne.n	6868 <bt_le_sync+0x60>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    6876:	4b74      	ldr	r3, [pc, #464]	; (6a48 <bt_le_sync+0x240>)
    6878:	881b      	ldrh	r3, [r3, #0]
    687a:	b29b      	uxth	r3, r3
    687c:	3b01      	subs	r3, #1
    687e:	b29b      	uxth	r3, r3
    6880:	2002      	movs	r0, #2
    6882:	4619      	mov	r1, r3
    6884:	f003 f92e 	bl	9ae4 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    6888:	2061      	movs	r0, #97	; 0x61
    688a:	f003 f9ed 	bl	9c68 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    688e:	bf00      	nop
    6890:	f003 f9e0 	bl	9c54 <cc2400_status>
    6894:	4603      	mov	r3, r0
    6896:	f003 0304 	and.w	r3, r3, #4
    689a:	2b00      	cmp	r3, #0
    689c:	d0f8      	beq.n	6890 <bt_le_sync+0x88>

			/* RX mode */
			cc2400_strobe(SRX);
    689e:	2062      	movs	r0, #98	; 0x62
    68a0:	f003 f9e2 	bl	9c68 <cc2400_strobe>

			saved_request = requested_channel;
    68a4:	4b67      	ldr	r3, [pc, #412]	; (6a44 <bt_le_sync+0x23c>)
    68a6:	881b      	ldrh	r3, [r3, #0]
    68a8:	b29a      	uxth	r2, r3
    68aa:	4b68      	ldr	r3, [pc, #416]	; (6a4c <bt_le_sync+0x244>)
    68ac:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    68ae:	4b65      	ldr	r3, [pc, #404]	; (6a44 <bt_le_sync+0x23c>)
    68b0:	2200      	movs	r2, #0
    68b2:	801a      	strh	r2, [r3, #0]
		}

		RXLED_CLR;
    68b4:	4b62      	ldr	r3, [pc, #392]	; (6a40 <bt_le_sync+0x238>)
    68b6:	2210      	movs	r2, #16
    68b8:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    68ba:	f7fd fd23 	bl	4304 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    68be:	bf00      	nop
    68c0:	4b63      	ldr	r3, [pc, #396]	; (6a50 <bt_le_sync+0x248>)
    68c2:	681b      	ldr	r3, [r3, #0]
    68c4:	2b00      	cmp	r3, #0
    68c6:	d10e      	bne.n	68e6 <bt_le_sync+0xde>
    68c8:	4b62      	ldr	r3, [pc, #392]	; (6a54 <bt_le_sync+0x24c>)
    68ca:	681b      	ldr	r3, [r3, #0]
    68cc:	2b00      	cmp	r3, #0
    68ce:	d10a      	bne.n	68e6 <bt_le_sync+0xde>
    68d0:	4b61      	ldr	r3, [pc, #388]	; (6a58 <bt_le_sync+0x250>)
    68d2:	781b      	ldrb	r3, [r3, #0]
    68d4:	b2db      	uxtb	r3, r3
    68d6:	2b00      	cmp	r3, #0
    68d8:	d105      	bne.n	68e6 <bt_le_sync+0xde>
    68da:	4b60      	ldr	r3, [pc, #384]	; (6a5c <bt_le_sync+0x254>)
    68dc:	781b      	ldrb	r3, [r3, #0]
    68de:	b2db      	uxtb	r3, r3
    68e0:	79fa      	ldrb	r2, [r7, #7]
    68e2:	429a      	cmp	r2, r3
    68e4:	d0ec      	beq.n	68c0 <bt_le_sync+0xb8>
			;

		if (requested_mode != active_mode) {
    68e6:	4b5d      	ldr	r3, [pc, #372]	; (6a5c <bt_le_sync+0x254>)
    68e8:	781b      	ldrb	r3, [r3, #0]
    68ea:	b2db      	uxtb	r3, r3
    68ec:	79fa      	ldrb	r2, [r7, #7]
    68ee:	429a      	cmp	r2, r3
    68f0:	d000      	beq.n	68f4 <bt_le_sync+0xec>
			goto cleanup;
    68f2:	e1ff      	b.n	6cf4 <bt_le_sync+0x4ec>
		}

		if (rx_err) {
    68f4:	4b57      	ldr	r3, [pc, #348]	; (6a54 <bt_le_sync+0x24c>)
    68f6:	681b      	ldr	r3, [r3, #0]
    68f8:	2b00      	cmp	r3, #0
    68fa:	d007      	beq.n	690c <bt_le_sync+0x104>
			status |= DMA_ERROR;
    68fc:	4b58      	ldr	r3, [pc, #352]	; (6a60 <bt_le_sync+0x258>)
    68fe:	781b      	ldrb	r3, [r3, #0]
    6900:	b2db      	uxtb	r3, r3
    6902:	f043 0302 	orr.w	r3, r3, #2
    6906:	b2da      	uxtb	r2, r3
    6908:	4b55      	ldr	r3, [pc, #340]	; (6a60 <bt_le_sync+0x258>)
    690a:	701a      	strb	r2, [r3, #0]
		}

		if (do_hop)
    690c:	4b52      	ldr	r3, [pc, #328]	; (6a58 <bt_le_sync+0x250>)
    690e:	781b      	ldrb	r3, [r3, #0]
    6910:	b2db      	uxtb	r3, r3
    6912:	2b00      	cmp	r3, #0
    6914:	d000      	beq.n	6918 <bt_le_sync+0x110>
			goto rx_flush;
    6916:	e12b      	b.n	6b70 <bt_le_sync+0x368>

		/* No DMA transfer? */
		if (!rx_tc)
    6918:	4b4d      	ldr	r3, [pc, #308]	; (6a50 <bt_le_sync+0x248>)
    691a:	681b      	ldr	r3, [r3, #0]
    691c:	2b00      	cmp	r3, #0
    691e:	d100      	bne.n	6922 <bt_le_sync+0x11a>
    6920:	e1e1      	b.n	6ce6 <bt_le_sync+0x4de>

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    6922:	f107 0308 	add.w	r3, r7, #8
    6926:	65fb      	str	r3, [r7, #92]	; 0x5c
		packet[0] = le.access_address;
    6928:	4b43      	ldr	r3, [pc, #268]	; (6a38 <bt_le_sync+0x230>)
    692a:	681b      	ldr	r3, [r3, #0]
    692c:	60bb      	str	r3, [r7, #8]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    692e:	4b46      	ldr	r3, [pc, #280]	; (6a48 <bt_le_sync+0x240>)
    6930:	881b      	ldrh	r3, [r3, #0]
    6932:	b29b      	uxth	r3, r3
    6934:	b2db      	uxtb	r3, r3
    6936:	3b62      	subs	r3, #98	; 0x62
    6938:	b2db      	uxtb	r3, r3
    693a:	4618      	mov	r0, r3
    693c:	f001 fcda 	bl	82f4 <btle_channel_index>
    6940:	4603      	mov	r3, r0
    6942:	461a      	mov	r2, r3
    6944:	4613      	mov	r3, r2
    6946:	005b      	lsls	r3, r3, #1
    6948:	4413      	add	r3, r2
    694a:	011b      	lsls	r3, r3, #4
    694c:	4a45      	ldr	r2, [pc, #276]	; (6a64 <bt_le_sync+0x25c>)
    694e:	4413      	add	r3, r2
    6950:	65bb      	str	r3, [r7, #88]	; 0x58
		for (i = 0; i < 4; i+= 4) {
    6952:	2300      	movs	r3, #0
    6954:	667b      	str	r3, [r7, #100]	; 0x64
    6956:	e034      	b.n	69c2 <bt_le_sync+0x1ba>
			uint32_t v = rxbuf1[i+0] << 24
    6958:	4a43      	ldr	r2, [pc, #268]	; (6a68 <bt_le_sync+0x260>)
    695a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    695c:	4413      	add	r3, r2
    695e:	781b      	ldrb	r3, [r3, #0]
    6960:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    6962:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6964:	3301      	adds	r3, #1
    6966:	4940      	ldr	r1, [pc, #256]	; (6a68 <bt_le_sync+0x260>)
    6968:	5ccb      	ldrb	r3, [r1, r3]
    696a:	041b      	lsls	r3, r3, #16
    696c:	431a      	orrs	r2, r3
					   | rxbuf1[i+2] << 8
    696e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6970:	3302      	adds	r3, #2
    6972:	493d      	ldr	r1, [pc, #244]	; (6a68 <bt_le_sync+0x260>)
    6974:	5ccb      	ldrb	r3, [r1, r3]
    6976:	021b      	lsls	r3, r3, #8
    6978:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    697a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    697c:	3203      	adds	r2, #3
    697e:	493a      	ldr	r1, [pc, #232]	; (6a68 <bt_le_sync+0x260>)
    6980:	5c8a      	ldrb	r2, [r1, r2]
    6982:	4313      	orrs	r3, r2
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6984:	657b      	str	r3, [r7, #84]	; 0x54
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    6986:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6988:	2b00      	cmp	r3, #0
    698a:	da00      	bge.n	698e <bt_le_sync+0x186>
    698c:	3303      	adds	r3, #3
    698e:	109b      	asrs	r3, r3, #2
    6990:	1c5c      	adds	r4, r3, #1
    6992:	6d78      	ldr	r0, [r7, #84]	; 0x54
    6994:	f002 fed4 	bl	9740 <rbit>
    6998:	4601      	mov	r1, r0
    699a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    699c:	2b00      	cmp	r3, #0
    699e:	da00      	bge.n	69a2 <bt_le_sync+0x19a>
    69a0:	3303      	adds	r3, #3
    69a2:	109b      	asrs	r3, r3, #2
    69a4:	009b      	lsls	r3, r3, #2
    69a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
    69a8:	4413      	add	r3, r2
    69aa:	681b      	ldr	r3, [r3, #0]
    69ac:	ea81 0203 	eor.w	r2, r1, r3
    69b0:	00a3      	lsls	r3, r4, #2
    69b2:	f107 0168 	add.w	r1, r7, #104	; 0x68
    69b6:	440b      	add	r3, r1
    69b8:	f843 2c60 	str.w	r2, [r3, #-96]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
    69bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    69be:	3304      	adds	r3, #4
    69c0:	667b      	str	r3, [r7, #100]	; 0x64
    69c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    69c4:	2b03      	cmp	r3, #3
    69c6:	ddc7      	ble.n	6958 <bt_le_sync+0x150>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		unsigned len = (p[5] & 0x3f) + 2;
    69c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    69ca:	3305      	adds	r3, #5
    69cc:	781b      	ldrb	r3, [r3, #0]
    69ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    69d2:	3302      	adds	r3, #2
    69d4:	653b      	str	r3, [r7, #80]	; 0x50
		if (len > 39)
    69d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    69d8:	2b27      	cmp	r3, #39	; 0x27
    69da:	d900      	bls.n	69de <bt_le_sync+0x1d6>
			goto rx_flush;
    69dc:	e0c8      	b.n	6b70 <bt_le_sync+0x368>

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    69de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    69e0:	3306      	adds	r3, #6
    69e2:	089b      	lsrs	r3, r3, #2
    69e4:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (total_transfers < 11) {
    69e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    69e8:	2b0a      	cmp	r3, #10
    69ea:	d80d      	bhi.n	6a08 <bt_le_sync+0x200>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    69ec:	bf00      	nop
    69ee:	4b1f      	ldr	r3, [pc, #124]	; (6a6c <bt_le_sync+0x264>)
    69f0:	681a      	ldr	r2, [r3, #0]
    69f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    69f4:	009b      	lsls	r3, r3, #2
    69f6:	491c      	ldr	r1, [pc, #112]	; (6a68 <bt_le_sync+0x260>)
    69f8:	440b      	add	r3, r1
    69fa:	429a      	cmp	r2, r3
    69fc:	d20f      	bcs.n	6a1e <bt_le_sync+0x216>
    69fe:	4b15      	ldr	r3, [pc, #84]	; (6a54 <bt_le_sync+0x24c>)
    6a00:	681b      	ldr	r3, [r3, #0]
    6a02:	2b00      	cmp	r3, #0
    6a04:	d0f3      	beq.n	69ee <bt_le_sync+0x1e6>
    6a06:	e00a      	b.n	6a1e <bt_le_sync+0x216>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    6a08:	bf00      	nop
    6a0a:	4b19      	ldr	r3, [pc, #100]	; (6a70 <bt_le_sync+0x268>)
    6a0c:	681b      	ldr	r3, [r3, #0]
    6a0e:	f003 0301 	and.w	r3, r3, #1
    6a12:	2b00      	cmp	r3, #0
    6a14:	d003      	beq.n	6a1e <bt_le_sync+0x216>
    6a16:	4b0f      	ldr	r3, [pc, #60]	; (6a54 <bt_le_sync+0x24c>)
    6a18:	681b      	ldr	r3, [r3, #0]
    6a1a:	2b00      	cmp	r3, #0
    6a1c:	d0f5      	beq.n	6a0a <bt_le_sync+0x202>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6a1e:	4a15      	ldr	r2, [pc, #84]	; (6a74 <bt_le_sync+0x26c>)
    6a20:	4b14      	ldr	r3, [pc, #80]	; (6a74 <bt_le_sync+0x26c>)
    6a22:	681b      	ldr	r3, [r3, #0]
    6a24:	f023 0301 	bic.w	r3, r3, #1
    6a28:	6013      	str	r3, [r2, #0]

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    6a2a:	2304      	movs	r3, #4
    6a2c:	667b      	str	r3, [r7, #100]	; 0x64
    6a2e:	e058      	b.n	6ae2 <bt_le_sync+0x2da>
    6a30:	10000a42 	.word	0x10000a42
    6a34:	10000a3e 	.word	0x10000a3e
    6a38:	10000458 	.word	0x10000458
    6a3c:	e000e100 	.word	0xe000e100
    6a40:	2009c03c 	.word	0x2009c03c
    6a44:	10000a44 	.word	0x10000a44
    6a48:	1000049c 	.word	0x1000049c
    6a4c:	10000a46 	.word	0x10000a46
    6a50:	10000b00 	.word	0x10000b00
    6a54:	100010ac 	.word	0x100010ac
    6a58:	1000097d 	.word	0x1000097d
    6a5c:	10000a3f 	.word	0x10000a3f
    6a60:	10000a48 	.word	0x10000a48
    6a64:	0000b8d8 	.word	0x0000b8d8
    6a68:	10001078 	.word	0x10001078
    6a6c:	50004104 	.word	0x50004104
    6a70:	50004110 	.word	0x50004110
    6a74:	40030024 	.word	0x40030024
			uint32_t v = rxbuf1[i+0] << 24
    6a78:	4aa5      	ldr	r2, [pc, #660]	; (6d10 <bt_le_sync+0x508>)
    6a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6a7c:	4413      	add	r3, r2
    6a7e:	781b      	ldrb	r3, [r3, #0]
    6a80:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    6a82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6a84:	3301      	adds	r3, #1
    6a86:	49a2      	ldr	r1, [pc, #648]	; (6d10 <bt_le_sync+0x508>)
    6a88:	5ccb      	ldrb	r3, [r1, r3]
    6a8a:	041b      	lsls	r3, r3, #16
    6a8c:	431a      	orrs	r2, r3
				       | rxbuf1[i+2] << 8
    6a8e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6a90:	3302      	adds	r3, #2
    6a92:	499f      	ldr	r1, [pc, #636]	; (6d10 <bt_le_sync+0x508>)
    6a94:	5ccb      	ldrb	r3, [r1, r3]
    6a96:	021b      	lsls	r3, r3, #8
    6a98:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    6a9a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    6a9c:	3203      	adds	r2, #3
    6a9e:	499c      	ldr	r1, [pc, #624]	; (6d10 <bt_le_sync+0x508>)
    6aa0:	5c8a      	ldrb	r2, [r1, r2]
    6aa2:	4313      	orrs	r3, r2
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6aa4:	64bb      	str	r3, [r7, #72]	; 0x48
					   | rxbuf1[i+1] << 16
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    6aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6aa8:	2b00      	cmp	r3, #0
    6aaa:	da00      	bge.n	6aae <bt_le_sync+0x2a6>
    6aac:	3303      	adds	r3, #3
    6aae:	109b      	asrs	r3, r3, #2
    6ab0:	1c5c      	adds	r4, r3, #1
    6ab2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    6ab4:	f002 fe44 	bl	9740 <rbit>
    6ab8:	4601      	mov	r1, r0
    6aba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6abc:	2b00      	cmp	r3, #0
    6abe:	da00      	bge.n	6ac2 <bt_le_sync+0x2ba>
    6ac0:	3303      	adds	r3, #3
    6ac2:	109b      	asrs	r3, r3, #2
    6ac4:	009b      	lsls	r3, r3, #2
    6ac6:	6dba      	ldr	r2, [r7, #88]	; 0x58
    6ac8:	4413      	add	r3, r2
    6aca:	681b      	ldr	r3, [r3, #0]
    6acc:	ea81 0203 	eor.w	r2, r1, r3
    6ad0:	00a3      	lsls	r3, r4, #2
    6ad2:	f107 0168 	add.w	r1, r7, #104	; 0x68
    6ad6:	440b      	add	r3, r1
    6ad8:	f843 2c60 	str.w	r2, [r3, #-96]
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    6adc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6ade:	3304      	adds	r3, #4
    6ae0:	667b      	str	r3, [r7, #100]	; 0x64
    6ae2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6ae4:	2b2b      	cmp	r3, #43	; 0x2b
    6ae6:	ddc7      	ble.n	6a78 <bt_le_sync+0x270>
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    6ae8:	4b8a      	ldr	r3, [pc, #552]	; (6d14 <bt_le_sync+0x50c>)
    6aea:	691b      	ldr	r3, [r3, #16]
    6aec:	2b00      	cmp	r3, #0
    6aee:	d023      	beq.n	6b38 <bt_le_sync+0x330>
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    6af0:	4b88      	ldr	r3, [pc, #544]	; (6d14 <bt_le_sync+0x50c>)
    6af2:	68d9      	ldr	r1, [r3, #12]
    6af4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    6af6:	1d1a      	adds	r2, r3, #4
    6af8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6afa:	4608      	mov	r0, r1
    6afc:	4611      	mov	r1, r2
    6afe:	461a      	mov	r2, r3
    6b00:	f001 fcfc 	bl	84fc <btle_crcgen_lut>
    6b04:	6478      	str	r0, [r7, #68]	; 0x44
			u32 wire_crc = (p[4+len+2] << 16)
    6b06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6b08:	3306      	adds	r3, #6
    6b0a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    6b0c:	4413      	add	r3, r2
    6b0e:	781b      	ldrb	r3, [r3, #0]
    6b10:	041a      	lsls	r2, r3, #16
						 | (p[4+len+1] << 8)
    6b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6b14:	3305      	adds	r3, #5
    6b16:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    6b18:	440b      	add	r3, r1
    6b1a:	781b      	ldrb	r3, [r3, #0]
    6b1c:	021b      	lsls	r3, r3, #8
    6b1e:	4313      	orrs	r3, r2
						 | (p[4+len+0] << 0);
    6b20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    6b22:	3204      	adds	r2, #4
    6b24:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    6b26:	440a      	add	r2, r1
    6b28:	7812      	ldrb	r2, [r2, #0]
    6b2a:	4313      	orrs	r3, r2
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
			u32 wire_crc = (p[4+len+2] << 16)
    6b2c:	643b      	str	r3, [r7, #64]	; 0x40
						 | (p[4+len+1] << 8)
						 | (p[4+len+0] << 0);
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    6b2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6b30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6b32:	429a      	cmp	r2, r3
    6b34:	d000      	beq.n	6b38 <bt_le_sync+0x330>
				goto rx_flush;
    6b36:	e01b      	b.n	6b70 <bt_le_sync+0x368>
		}


		RXLED_SET;
    6b38:	4b77      	ldr	r3, [pc, #476]	; (6d18 <bt_le_sync+0x510>)
    6b3a:	2210      	movs	r2, #16
    6b3c:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    6b3e:	4b77      	ldr	r3, [pc, #476]	; (6d1c <bt_le_sync+0x514>)
    6b40:	681b      	ldr	r3, [r3, #0]
    6b42:	f107 0208 	add.w	r2, r7, #8
    6b46:	4610      	mov	r0, r2
    6b48:	4798      	blx	r3
		enqueue(LE_PACKET, (uint8_t *)packet);
    6b4a:	f107 0308 	add.w	r3, r7, #8
    6b4e:	2001      	movs	r0, #1
    6b50:	4619      	mov	r1, r3
    6b52:	f7fd fcb9 	bl	44c8 <enqueue>
		le.last_packet = CLK100NS;
    6b56:	4b72      	ldr	r3, [pc, #456]	; (6d20 <bt_le_sync+0x518>)
    6b58:	681b      	ldr	r3, [r3, #0]
    6b5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6b5e:	f640 4235 	movw	r2, #3125	; 0xc35
    6b62:	fb02 f203 	mul.w	r2, r2, r3
    6b66:	4b6f      	ldr	r3, [pc, #444]	; (6d24 <bt_le_sync+0x51c>)
    6b68:	681b      	ldr	r3, [r3, #0]
    6b6a:	4413      	add	r3, r2
    6b6c:	4a69      	ldr	r2, [pc, #420]	; (6d14 <bt_le_sync+0x50c>)
    6b6e:	6413      	str	r3, [r2, #64]	; 0x40

	rx_flush:
		cc2400_strobe(SFSON);
    6b70:	2061      	movs	r0, #97	; 0x61
    6b72:	f003 f879 	bl	9c68 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    6b76:	bf00      	nop
    6b78:	f003 f86c 	bl	9c54 <cc2400_status>
    6b7c:	4603      	mov	r3, r0
    6b7e:	f003 0304 	and.w	r3, r3, #4
    6b82:	2b00      	cmp	r3, #0
    6b84:	d0f8      	beq.n	6b78 <bt_le_sync+0x370>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6b86:	4a68      	ldr	r2, [pc, #416]	; (6d28 <bt_le_sync+0x520>)
    6b88:	4b67      	ldr	r3, [pc, #412]	; (6d28 <bt_le_sync+0x520>)
    6b8a:	681b      	ldr	r3, [r3, #0]
    6b8c:	f023 0301 	bic.w	r3, r3, #1
    6b90:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    6b92:	e003      	b.n	6b9c <bt_le_sync+0x394>
			u8 tmp = (u8)DIO_SSP_DR;
    6b94:	4b65      	ldr	r3, [pc, #404]	; (6d2c <bt_le_sync+0x524>)
    6b96:	681b      	ldr	r3, [r3, #0]
    6b98:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    6b9c:	4b64      	ldr	r3, [pc, #400]	; (6d30 <bt_le_sync+0x528>)
    6b9e:	681b      	ldr	r3, [r3, #0]
    6ba0:	f003 0304 	and.w	r3, r3, #4
    6ba4:	2b00      	cmp	r3, #0
    6ba6:	d1f5      	bne.n	6b94 <bt_le_sync+0x38c>
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    6ba8:	4b5d      	ldr	r3, [pc, #372]	; (6d20 <bt_le_sync+0x518>)
    6baa:	681b      	ldr	r3, [r3, #0]
    6bac:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6bb0:	f640 4235 	movw	r2, #3125	; 0xc35
    6bb4:	fb02 f203 	mul.w	r2, r2, r3
    6bb8:	4b5a      	ldr	r3, [pc, #360]	; (6d24 <bt_le_sync+0x51c>)
    6bba:	681b      	ldr	r3, [r3, #0]
    6bbc:	4413      	add	r3, r2
    6bbe:	663b      	str	r3, [r7, #96]	; 0x60
		if (now < le.last_packet)
    6bc0:	4b54      	ldr	r3, [pc, #336]	; (6d14 <bt_le_sync+0x50c>)
    6bc2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    6bc4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6bc6:	429a      	cmp	r2, r3
    6bc8:	d905      	bls.n	6bd6 <bt_le_sync+0x3ce>
			now += 3276800000; // handle rollover
    6bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6bcc:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    6bd0:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    6bd4:	663b      	str	r3, [r7, #96]	; 0x60
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    6bd6:	4b4f      	ldr	r3, [pc, #316]	; (6d14 <bt_le_sync+0x50c>)
    6bd8:	7d1b      	ldrb	r3, [r3, #20]

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
		if  ( // timeout
    6bda:	2b03      	cmp	r3, #3
    6bdc:	d003      	beq.n	6be6 <bt_le_sync+0x3de>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    6bde:	4b4d      	ldr	r3, [pc, #308]	; (6d14 <bt_le_sync+0x50c>)
    6be0:	7d1b      	ldrb	r3, [r3, #20]
    6be2:	2b02      	cmp	r3, #2
    6be4:	d106      	bne.n	6bf4 <bt_le_sync+0x3ec>
			&& (now - le.last_packet > 50000000))
    6be6:	4b4b      	ldr	r3, [pc, #300]	; (6d14 <bt_le_sync+0x50c>)
    6be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6bea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    6bec:	1ad3      	subs	r3, r2, r3
    6bee:	4a51      	ldr	r2, [pc, #324]	; (6d34 <bt_le_sync+0x52c>)
    6bf0:	4293      	cmp	r3, r2
    6bf2:	d803      	bhi.n	6bfc <bt_le_sync+0x3f4>
			// jam finished
			|| (le_jam_count == 1)
    6bf4:	4b50      	ldr	r3, [pc, #320]	; (6d38 <bt_le_sync+0x530>)
    6bf6:	681b      	ldr	r3, [r3, #0]
    6bf8:	2b01      	cmp	r3, #1
    6bfa:	d137      	bne.n	6c6c <bt_le_sync+0x464>
			)
		{
			reset_le();
    6bfc:	f7ff fc2c 	bl	6458 <reset_le>
			le_jam_count = 0;
    6c00:	4b4d      	ldr	r3, [pc, #308]	; (6d38 <bt_le_sync+0x530>)
    6c02:	2200      	movs	r2, #0
    6c04:	601a      	str	r2, [r3, #0]
			TXLED_CLR;
    6c06:	4b4d      	ldr	r3, [pc, #308]	; (6d3c <bt_le_sync+0x534>)
    6c08:	f44f 7280 	mov.w	r2, #256	; 0x100
    6c0c:	601a      	str	r2, [r3, #0]

			if (jam_mode == JAM_ONCE) {
    6c0e:	4b4c      	ldr	r3, [pc, #304]	; (6d40 <bt_le_sync+0x538>)
    6c10:	781b      	ldrb	r3, [r3, #0]
    6c12:	b2db      	uxtb	r3, r3
    6c14:	2b01      	cmp	r3, #1
    6c16:	d106      	bne.n	6c26 <bt_le_sync+0x41e>
				jam_mode = JAM_NONE;
    6c18:	4b49      	ldr	r3, [pc, #292]	; (6d40 <bt_le_sync+0x538>)
    6c1a:	2200      	movs	r2, #0
    6c1c:	701a      	strb	r2, [r3, #0]
				requested_mode = MODE_IDLE;
    6c1e:	4b49      	ldr	r3, [pc, #292]	; (6d44 <bt_le_sync+0x53c>)
    6c20:	2200      	movs	r2, #0
    6c22:	701a      	strb	r2, [r3, #0]
				goto cleanup;
    6c24:	e066      	b.n	6cf4 <bt_le_sync+0x4ec>
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    6c26:	79fb      	ldrb	r3, [r7, #7]
    6c28:	2b0a      	cmp	r3, #10
    6c2a:	d101      	bne.n	6c30 <bt_le_sync+0x428>
				goto cleanup;
    6c2c:	bf00      	nop
    6c2e:	e061      	b.n	6cf4 <bt_le_sync+0x4ec>

			le.link_state = LINK_LISTENING;
    6c30:	4b38      	ldr	r3, [pc, #224]	; (6d14 <bt_le_sync+0x50c>)
    6c32:	2201      	movs	r2, #1
    6c34:	751a      	strb	r2, [r3, #20]

			cc2400_strobe(SRFOFF);
    6c36:	2064      	movs	r0, #100	; 0x64
    6c38:	f003 f816 	bl	9c68 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    6c3c:	bf00      	nop
    6c3e:	f003 f809 	bl	9c54 <cc2400_status>
    6c42:	4603      	mov	r3, r0
    6c44:	f003 0304 	and.w	r3, r3, #4
    6c48:	2b00      	cmp	r3, #0
    6c4a:	d1f8      	bne.n	6c3e <bt_le_sync+0x436>

			/* Retune */
			channel = saved_request != 0 ? saved_request : 2402;
    6c4c:	4b3e      	ldr	r3, [pc, #248]	; (6d48 <bt_le_sync+0x540>)
    6c4e:	881b      	ldrh	r3, [r3, #0]
    6c50:	b29b      	uxth	r3, r3
    6c52:	2b00      	cmp	r3, #0
    6c54:	d003      	beq.n	6c5e <bt_le_sync+0x456>
    6c56:	4b3c      	ldr	r3, [pc, #240]	; (6d48 <bt_le_sync+0x540>)
    6c58:	881b      	ldrh	r3, [r3, #0]
    6c5a:	b29b      	uxth	r3, r3
    6c5c:	e001      	b.n	6c62 <bt_le_sync+0x45a>
    6c5e:	f640 1362 	movw	r3, #2402	; 0x962
    6c62:	4a3a      	ldr	r2, [pc, #232]	; (6d4c <bt_le_sync+0x544>)
    6c64:	8013      	strh	r3, [r2, #0]
			restart_jamming = 1;
    6c66:	4b3a      	ldr	r3, [pc, #232]	; (6d50 <bt_le_sync+0x548>)
    6c68:	2201      	movs	r2, #1
    6c6a:	601a      	str	r2, [r3, #0]
		}

		cc2400_set(SYNCL, le.syncl);
    6c6c:	4b29      	ldr	r3, [pc, #164]	; (6d14 <bt_le_sync+0x50c>)
    6c6e:	88db      	ldrh	r3, [r3, #6]
    6c70:	202c      	movs	r0, #44	; 0x2c
    6c72:	4619      	mov	r1, r3
    6c74:	f002 ff36 	bl	9ae4 <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    6c78:	4b26      	ldr	r3, [pc, #152]	; (6d14 <bt_le_sync+0x50c>)
    6c7a:	889b      	ldrh	r3, [r3, #4]
    6c7c:	202d      	movs	r0, #45	; 0x2d
    6c7e:	4619      	mov	r1, r3
    6c80:	f002 ff30 	bl	9ae4 <cc2400_set>

		if (do_hop)
    6c84:	4b33      	ldr	r3, [pc, #204]	; (6d54 <bt_le_sync+0x54c>)
    6c86:	781b      	ldrb	r3, [r3, #0]
    6c88:	b2db      	uxtb	r3, r3
    6c8a:	2b00      	cmp	r3, #0
    6c8c:	d001      	beq.n	6c92 <bt_le_sync+0x48a>
			hop();
    6c8e:	f7ff f9fd 	bl	608c <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    6c92:	4b29      	ldr	r3, [pc, #164]	; (6d38 <bt_le_sync+0x530>)
    6c94:	681b      	ldr	r3, [r3, #0]
    6c96:	2b00      	cmp	r3, #0
    6c98:	dd07      	ble.n	6caa <bt_le_sync+0x4a2>
			le_jam();
    6c9a:	f7ff f9ad 	bl	5ff8 <le_jam>
			--le_jam_count;
    6c9e:	4b26      	ldr	r3, [pc, #152]	; (6d38 <bt_le_sync+0x530>)
    6ca0:	681b      	ldr	r3, [r3, #0]
    6ca2:	3b01      	subs	r3, #1
    6ca4:	4a24      	ldr	r2, [pc, #144]	; (6d38 <bt_le_sync+0x530>)
    6ca6:	6013      	str	r3, [r2, #0]
    6ca8:	e017      	b.n	6cda <bt_le_sync+0x4d2>
		} else {
			/* RX mode */
			dma_init_le();
    6caa:	f7fe fd33 	bl	5714 <dma_init_le>
			dio_ssp_start();
    6cae:	f7fe fe9b 	bl	59e8 <dio_ssp_start>

			if (restart_jamming) {
    6cb2:	4b27      	ldr	r3, [pc, #156]	; (6d50 <bt_le_sync+0x548>)
    6cb4:	681b      	ldr	r3, [r3, #0]
    6cb6:	2b00      	cmp	r3, #0
    6cb8:	d00c      	beq.n	6cd4 <bt_le_sync+0x4cc>
				cc2400_rx_sync(rbit(le.access_address));
    6cba:	4b16      	ldr	r3, [pc, #88]	; (6d14 <bt_le_sync+0x50c>)
    6cbc:	681b      	ldr	r3, [r3, #0]
    6cbe:	4618      	mov	r0, r3
    6cc0:	f002 fd3e 	bl	9740 <rbit>
    6cc4:	4603      	mov	r3, r0
    6cc6:	4618      	mov	r0, r3
    6cc8:	f7fe ffa8 	bl	5c1c <cc2400_rx_sync>
				restart_jamming = 0;
    6ccc:	4b20      	ldr	r3, [pc, #128]	; (6d50 <bt_le_sync+0x548>)
    6cce:	2200      	movs	r2, #0
    6cd0:	601a      	str	r2, [r3, #0]
    6cd2:	e002      	b.n	6cda <bt_le_sync+0x4d2>
			} else {
				cc2400_strobe(SRX);
    6cd4:	2062      	movs	r0, #98	; 0x62
    6cd6:	f002 ffc7 	bl	9c68 <cc2400_strobe>
			}
		}

		rx_tc = 0;
    6cda:	4b1f      	ldr	r3, [pc, #124]	; (6d58 <bt_le_sync+0x550>)
    6cdc:	2200      	movs	r2, #0
    6cde:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6ce0:	4b1e      	ldr	r3, [pc, #120]	; (6d5c <bt_le_sync+0x554>)
    6ce2:	2200      	movs	r2, #0
    6ce4:	601a      	str	r2, [r3, #0]
	dma_init_le();
	dio_ssp_start();

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address

	while (requested_mode == active_mode) {
    6ce6:	4b17      	ldr	r3, [pc, #92]	; (6d44 <bt_le_sync+0x53c>)
    6ce8:	781b      	ldrb	r3, [r3, #0]
    6cea:	b2db      	uxtb	r3, r3
    6cec:	79fa      	ldrb	r2, [r7, #7]
    6cee:	429a      	cmp	r2, r3
    6cf0:	f43f adb1 	beq.w	6856 <bt_le_sync+0x4e>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6cf4:	4b1a      	ldr	r3, [pc, #104]	; (6d60 <bt_le_sync+0x558>)
    6cf6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6cfa:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    6cfc:	f7fe ff08 	bl	5b10 <cc2400_idle>
	dio_ssp_stop();
    6d00:	f7fe fea2 	bl	5a48 <dio_ssp_stop>
	cs_trigger_disable();
    6d04:	f7fd fd9c 	bl	4840 <cs_trigger_disable>
}
    6d08:	376c      	adds	r7, #108	; 0x6c
    6d0a:	46bd      	mov	sp, r7
    6d0c:	bd90      	pop	{r4, r7, pc}
    6d0e:	bf00      	nop
    6d10:	10001078 	.word	0x10001078
    6d14:	10000458 	.word	0x10000458
    6d18:	2009c038 	.word	0x2009c038
    6d1c:	1000099c 	.word	0x1000099c
    6d20:	10000be4 	.word	0x10000be4
    6d24:	40004008 	.word	0x40004008
    6d28:	40030024 	.word	0x40030024
    6d2c:	40030008 	.word	0x40030008
    6d30:	4003000c 	.word	0x4003000c
    6d34:	02faf080 	.word	0x02faf080
    6d38:	10000994 	.word	0x10000994
    6d3c:	2009c03c 	.word	0x2009c03c
    6d40:	10000a40 	.word	0x10000a40
    6d44:	10000a3f 	.word	0x10000a3f
    6d48:	10000a46 	.word	0x10000a46
    6d4c:	1000049c 	.word	0x1000049c
    6d50:	10000a50 	.word	0x10000a50
    6d54:	1000097d 	.word	0x1000097d
    6d58:	10000b00 	.word	0x10000b00
    6d5c:	100010ac 	.word	0x100010ac
    6d60:	e000e180 	.word	0xe000e180

00006d64 <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    6d64:	b580      	push	{r7, lr}
    6d66:	b08c      	sub	sp, #48	; 0x30
    6d68:	af00      	add	r7, sp, #0
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    6d6a:	4b6c      	ldr	r3, [pc, #432]	; (6f1c <cb_follow_le+0x1b8>)
    6d6c:	881b      	ldrh	r3, [r3, #0]
    6d6e:	b29b      	uxth	r3, r3
    6d70:	b2db      	uxtb	r3, r3
    6d72:	3b62      	subs	r3, #98	; 0x62
    6d74:	b2db      	uxtb	r3, r3
    6d76:	4618      	mov	r0, r3
    6d78:	f001 fabc 	bl	82f4 <btle_channel_index>
    6d7c:	4603      	mov	r3, r0
    6d7e:	461a      	mov	r2, r3
    6d80:	4b67      	ldr	r3, [pc, #412]	; (6f20 <cb_follow_le+0x1bc>)
    6d82:	5c9b      	ldrb	r3, [r3, r2]
    6d84:	623b      	str	r3, [r7, #32]

	u32 access_address = 0;
    6d86:	2300      	movs	r3, #0
    6d88:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < 31; ++i) {
    6d8a:	2300      	movs	r3, #0
    6d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    6d8e:	e00e      	b.n	6dae <cb_follow_le+0x4a>
		access_address >>= 1;
    6d90:	69fb      	ldr	r3, [r7, #28]
    6d92:	085b      	lsrs	r3, r3, #1
    6d94:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    6d96:	4a63      	ldr	r2, [pc, #396]	; (6f24 <cb_follow_le+0x1c0>)
    6d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6d9a:	4413      	add	r3, r2
    6d9c:	781b      	ldrb	r3, [r3, #0]
    6d9e:	07db      	lsls	r3, r3, #31
    6da0:	461a      	mov	r2, r3
    6da2:	69fb      	ldr	r3, [r7, #28]
    6da4:	4313      	orrs	r3, r2
    6da6:	61fb      	str	r3, [r7, #28]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    6da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6daa:	3301      	adds	r3, #1
    6dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    6dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6db0:	2b1e      	cmp	r3, #30
    6db2:	dded      	ble.n	6d90 <cb_follow_le+0x2c>
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    6db4:	231f      	movs	r3, #31
    6db6:	62fb      	str	r3, [r7, #44]	; 0x2c
    6db8:	e0a6      	b.n	6f08 <cb_follow_le+0x1a4>
		access_address >>= 1;
    6dba:	69fb      	ldr	r3, [r7, #28]
    6dbc:	085b      	lsrs	r3, r3, #1
    6dbe:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    6dc0:	4a58      	ldr	r2, [pc, #352]	; (6f24 <cb_follow_le+0x1c0>)
    6dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6dc4:	4413      	add	r3, r2
    6dc6:	781b      	ldrb	r3, [r3, #0]
    6dc8:	07db      	lsls	r3, r3, #31
    6dca:	461a      	mov	r2, r3
    6dcc:	69fb      	ldr	r3, [r7, #28]
    6dce:	4313      	orrs	r3, r2
    6dd0:	61fb      	str	r3, [r7, #28]
		if (access_address == le.access_address) {
    6dd2:	4b55      	ldr	r3, [pc, #340]	; (6f28 <cb_follow_le+0x1c4>)
    6dd4:	681a      	ldr	r2, [r3, #0]
    6dd6:	69fb      	ldr	r3, [r7, #28]
    6dd8:	429a      	cmp	r2, r3
    6dda:	f040 8092 	bne.w	6f02 <cb_follow_le+0x19e>
			for (j = 0; j < 46; ++j) {
    6dde:	2300      	movs	r3, #0
    6de0:	62bb      	str	r3, [r7, #40]	; 0x28
    6de2:	e048      	b.n	6e76 <cb_follow_le+0x112>
				u8 byte = 0;
    6de4:	2300      	movs	r3, #0
    6de6:	76fb      	strb	r3, [r7, #27]
				for (k = 0; k < 8; k++) {
    6de8:	2300      	movs	r3, #0
    6dea:	627b      	str	r3, [r7, #36]	; 0x24
    6dec:	e037      	b.n	6e5e <cb_follow_le+0xfa>
					int offset = k + (j * 8) + i - 31;
    6dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6df0:	00da      	lsls	r2, r3, #3
    6df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6df4:	441a      	add	r2, r3
    6df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6df8:	4413      	add	r3, r2
    6dfa:	3b1f      	subs	r3, #31
    6dfc:	613b      	str	r3, [r7, #16]
					if (offset >= DMA_SIZE*8*2) break;
    6dfe:	693b      	ldr	r3, [r7, #16]
    6e00:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    6e04:	db00      	blt.n	6e08 <cb_follow_le+0xa4>
    6e06:	e02d      	b.n	6e64 <cb_follow_le+0x100>
					int bit = unpacked[offset];
    6e08:	4a46      	ldr	r2, [pc, #280]	; (6f24 <cb_follow_le+0x1c0>)
    6e0a:	693b      	ldr	r3, [r7, #16]
    6e0c:	4413      	add	r3, r2
    6e0e:	781b      	ldrb	r3, [r3, #0]
    6e10:	617b      	str	r3, [r7, #20]
					if (j >= 4) { // unwhiten data bytes
    6e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e14:	2b03      	cmp	r3, #3
    6e16:	dd16      	ble.n	6e46 <cb_follow_le+0xe2>
						bit ^= whitening[idx];
    6e18:	4a44      	ldr	r2, [pc, #272]	; (6f2c <cb_follow_le+0x1c8>)
    6e1a:	6a3b      	ldr	r3, [r7, #32]
    6e1c:	4413      	add	r3, r2
    6e1e:	781b      	ldrb	r3, [r3, #0]
    6e20:	461a      	mov	r2, r3
    6e22:	697b      	ldr	r3, [r7, #20]
    6e24:	4053      	eors	r3, r2
    6e26:	617b      	str	r3, [r7, #20]
						idx = (idx + 1) % sizeof(whitening);
    6e28:	6a3b      	ldr	r3, [r7, #32]
    6e2a:	3301      	adds	r3, #1
    6e2c:	4619      	mov	r1, r3
    6e2e:	4b40      	ldr	r3, [pc, #256]	; (6f30 <cb_follow_le+0x1cc>)
    6e30:	fba1 2303 	umull	r2, r3, r1, r3
    6e34:	1ac8      	subs	r0, r1, r3
    6e36:	0840      	lsrs	r0, r0, #1
    6e38:	4403      	add	r3, r0
    6e3a:	099a      	lsrs	r2, r3, #6
    6e3c:	4613      	mov	r3, r2
    6e3e:	01db      	lsls	r3, r3, #7
    6e40:	1a9b      	subs	r3, r3, r2
    6e42:	1aca      	subs	r2, r1, r3
    6e44:	623a      	str	r2, [r7, #32]
					}
					byte |= bit << k;
    6e46:	697a      	ldr	r2, [r7, #20]
    6e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e4a:	fa02 f303 	lsl.w	r3, r2, r3
    6e4e:	b2da      	uxtb	r2, r3
    6e50:	7efb      	ldrb	r3, [r7, #27]
    6e52:	4313      	orrs	r3, r2
    6e54:	b2db      	uxtb	r3, r3
    6e56:	76fb      	strb	r3, [r7, #27]
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    6e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e5a:	3301      	adds	r3, #1
    6e5c:	627b      	str	r3, [r7, #36]	; 0x24
    6e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e60:	2b07      	cmp	r3, #7
    6e62:	ddc4      	ble.n	6dee <cb_follow_le+0x8a>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    6e64:	4b33      	ldr	r3, [pc, #204]	; (6f34 <cb_follow_le+0x1d0>)
    6e66:	681a      	ldr	r2, [r3, #0]
    6e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e6a:	4413      	add	r3, r2
    6e6c:	7efa      	ldrb	r2, [r7, #27]
    6e6e:	701a      	strb	r2, [r3, #0]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    6e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e72:	3301      	adds	r3, #1
    6e74:	62bb      	str	r3, [r7, #40]	; 0x28
    6e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e78:	2b2d      	cmp	r3, #45	; 0x2d
    6e7a:	ddb3      	ble.n	6de4 <cb_follow_le+0x80>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    6e7c:	4b2a      	ldr	r3, [pc, #168]	; (6f28 <cb_follow_le+0x1c4>)
    6e7e:	691b      	ldr	r3, [r3, #16]
    6e80:	2b00      	cmp	r3, #0
    6e82:	d02e      	beq.n	6ee2 <cb_follow_le+0x17e>
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    6e84:	4b2b      	ldr	r3, [pc, #172]	; (6f34 <cb_follow_le+0x1d0>)
    6e86:	681b      	ldr	r3, [r3, #0]
    6e88:	3305      	adds	r3, #5
    6e8a:	781b      	ldrb	r3, [r3, #0]
    6e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6e90:	3302      	adds	r3, #2
    6e92:	60fb      	str	r3, [r7, #12]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
    6e94:	4b24      	ldr	r3, [pc, #144]	; (6f28 <cb_follow_le+0x1c4>)
    6e96:	68da      	ldr	r2, [r3, #12]
    6e98:	4b26      	ldr	r3, [pc, #152]	; (6f34 <cb_follow_le+0x1d0>)
    6e9a:	681b      	ldr	r3, [r3, #0]
    6e9c:	3304      	adds	r3, #4
    6e9e:	4610      	mov	r0, r2
    6ea0:	4619      	mov	r1, r3
    6ea2:	68fa      	ldr	r2, [r7, #12]
    6ea4:	f001 fb2a 	bl	84fc <btle_crcgen_lut>
    6ea8:	60b8      	str	r0, [r7, #8]
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    6eaa:	4b22      	ldr	r3, [pc, #136]	; (6f34 <cb_follow_le+0x1d0>)
    6eac:	681a      	ldr	r2, [r3, #0]
    6eae:	68fb      	ldr	r3, [r7, #12]
    6eb0:	3306      	adds	r3, #6
    6eb2:	4413      	add	r3, r2
    6eb4:	781b      	ldrb	r3, [r3, #0]
    6eb6:	041a      	lsls	r2, r3, #16
							 | (idle_rxbuf[4+len+1] << 8)
    6eb8:	4b1e      	ldr	r3, [pc, #120]	; (6f34 <cb_follow_le+0x1d0>)
    6eba:	6819      	ldr	r1, [r3, #0]
    6ebc:	68fb      	ldr	r3, [r7, #12]
    6ebe:	3305      	adds	r3, #5
    6ec0:	440b      	add	r3, r1
    6ec2:	781b      	ldrb	r3, [r3, #0]
    6ec4:	021b      	lsls	r3, r3, #8
    6ec6:	4313      	orrs	r3, r2
							 |  idle_rxbuf[4+len+0];
    6ec8:	4a1a      	ldr	r2, [pc, #104]	; (6f34 <cb_follow_le+0x1d0>)
    6eca:	6812      	ldr	r2, [r2, #0]
    6ecc:	68f9      	ldr	r1, [r7, #12]
    6ece:	3104      	adds	r1, #4
    6ed0:	440a      	add	r2, r1
    6ed2:	7812      	ldrb	r2, [r2, #0]
    6ed4:	4313      	orrs	r3, r2

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    6ed6:	607b      	str	r3, [r7, #4]
							 | (idle_rxbuf[4+len+1] << 8)
							 |  idle_rxbuf[4+len+0];
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    6ed8:	68ba      	ldr	r2, [r7, #8]
    6eda:	687b      	ldr	r3, [r7, #4]
    6edc:	429a      	cmp	r2, r3
    6ede:	d000      	beq.n	6ee2 <cb_follow_le+0x17e>
					break;
    6ee0:	e017      	b.n	6f12 <cb_follow_le+0x1ae>
			}

			// send to PC
			enqueue(LE_PACKET, idle_rxbuf);
    6ee2:	4b14      	ldr	r3, [pc, #80]	; (6f34 <cb_follow_le+0x1d0>)
    6ee4:	681b      	ldr	r3, [r3, #0]
    6ee6:	2001      	movs	r0, #1
    6ee8:	4619      	mov	r1, r3
    6eea:	f7fd faed 	bl	44c8 <enqueue>
			RXLED_SET;
    6eee:	4b12      	ldr	r3, [pc, #72]	; (6f38 <cb_follow_le+0x1d4>)
    6ef0:	2210      	movs	r2, #16
    6ef2:	601a      	str	r2, [r3, #0]

			packet_cb(idle_rxbuf);
    6ef4:	4b11      	ldr	r3, [pc, #68]	; (6f3c <cb_follow_le+0x1d8>)
    6ef6:	681b      	ldr	r3, [r3, #0]
    6ef8:	4a0e      	ldr	r2, [pc, #56]	; (6f34 <cb_follow_le+0x1d0>)
    6efa:	6812      	ldr	r2, [r2, #0]
    6efc:	4610      	mov	r0, r2
    6efe:	4798      	blx	r3

			break;
    6f00:	e007      	b.n	6f12 <cb_follow_le+0x1ae>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    6f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f04:	3301      	adds	r3, #1
    6f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    6f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6f0a:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    6f0e:	f6ff af54 	blt.w	6dba <cb_follow_le+0x56>

			break;
		}
	}

	return 1;
    6f12:	2301      	movs	r3, #1
}
    6f14:	4618      	mov	r0, r3
    6f16:	3730      	adds	r7, #48	; 0x30
    6f18:	46bd      	mov	sp, r7
    6f1a:	bd80      	pop	{r7, pc}
    6f1c:	1000049c 	.word	0x1000049c
    6f20:	0000b888 	.word	0x0000b888
    6f24:	10000d00 	.word	0x10000d00
    6f28:	10000458 	.word	0x10000458
    6f2c:	0000b808 	.word	0x0000b808
    6f30:	02040811 	.word	0x02040811
    6f34:	10000454 	.word	0x10000454
    6f38:	2009c038 	.word	0x2009c038
    6f3c:	1000099c 	.word	0x1000099c

00006f40 <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    6f40:	b580      	push	{r7, lr}
    6f42:	b08a      	sub	sp, #40	; 0x28
    6f44:	af00      	add	r7, sp, #0
    6f46:	6078      	str	r0, [r7, #4]
	int i;
	u32 aa = 0;
    6f48:	2300      	movs	r3, #0
    6f4a:	623b      	str	r3, [r7, #32]
#define ADV_ADDRESS_IDX 0
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
    6f4c:	687b      	ldr	r3, [r7, #4]
    6f4e:	61fb      	str	r3, [r7, #28]
	u8 header = packet[HEADER_IDX];
    6f50:	687b      	ldr	r3, [r7, #4]
    6f52:	791b      	ldrb	r3, [r3, #4]
    6f54:	76fb      	strb	r3, [r7, #27]
	u8 *data_len = &packet[DATA_LEN_IDX];
    6f56:	687b      	ldr	r3, [r7, #4]
    6f58:	3305      	adds	r3, #5
    6f5a:	617b      	str	r3, [r7, #20]
	u8 *data = &packet[DATA_START_IDX];
    6f5c:	687b      	ldr	r3, [r7, #4]
    6f5e:	3306      	adds	r3, #6
    6f60:	613b      	str	r3, [r7, #16]
	u8 *crc = &packet[DATA_START_IDX + *data_len];
    6f62:	697b      	ldr	r3, [r7, #20]
    6f64:	781b      	ldrb	r3, [r3, #0]
    6f66:	3306      	adds	r3, #6
    6f68:	461a      	mov	r2, r3
    6f6a:	687b      	ldr	r3, [r7, #4]
    6f6c:	4413      	add	r3, r2
    6f6e:	60fb      	str	r3, [r7, #12]

	if (le.link_state == LINK_CONN_PENDING) {
    6f70:	4b8b      	ldr	r3, [pc, #556]	; (71a0 <connection_follow_cb+0x260>)
    6f72:	7d1b      	ldrb	r3, [r3, #20]
    6f74:	2b02      	cmp	r3, #2
    6f76:	d11c      	bne.n	6fb2 <connection_follow_cb+0x72>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    6f78:	4b89      	ldr	r3, [pc, #548]	; (71a0 <connection_follow_cb+0x260>)
    6f7a:	2203      	movs	r2, #3
    6f7c:	751a      	strb	r2, [r3, #20]
		le.conn_epoch = clkn;
    6f7e:	4b89      	ldr	r3, [pc, #548]	; (71a4 <connection_follow_cb+0x264>)
    6f80:	681b      	ldr	r3, [r3, #0]
    6f82:	4a87      	ldr	r2, [pc, #540]	; (71a0 <connection_follow_cb+0x260>)
    6f84:	6193      	str	r3, [r2, #24]
		le.interval_timer = le.conn_interval - 1;
    6f86:	4b86      	ldr	r3, [pc, #536]	; (71a0 <connection_follow_cb+0x260>)
    6f88:	8bdb      	ldrh	r3, [r3, #30]
    6f8a:	3b01      	subs	r3, #1
    6f8c:	b29a      	uxth	r2, r3
    6f8e:	4b84      	ldr	r3, [pc, #528]	; (71a0 <connection_follow_cb+0x260>)
    6f90:	839a      	strh	r2, [r3, #28]
		le.conn_count = 0;
    6f92:	4b83      	ldr	r3, [pc, #524]	; (71a0 <connection_follow_cb+0x260>)
    6f94:	2200      	movs	r2, #0
    6f96:	841a      	strh	r2, [r3, #32]
		le.update_pending = 0;
    6f98:	4b81      	ldr	r3, [pc, #516]	; (71a0 <connection_follow_cb+0x260>)
    6f9a:	2200      	movs	r2, #0
    6f9c:	629a      	str	r2, [r3, #40]	; 0x28

		// hue hue hue
		if (jam_mode != JAM_NONE)
    6f9e:	4b82      	ldr	r3, [pc, #520]	; (71a8 <connection_follow_cb+0x268>)
    6fa0:	781b      	ldrb	r3, [r3, #0]
    6fa2:	b2db      	uxtb	r3, r3
    6fa4:	2b00      	cmp	r3, #0
    6fa6:	f000 80f7 	beq.w	7198 <connection_follow_cb+0x258>
			le_jam_count = JAM_COUNT_DEFAULT;
    6faa:	4b80      	ldr	r3, [pc, #512]	; (71ac <connection_follow_cb+0x26c>)
    6fac:	2228      	movs	r2, #40	; 0x28
    6fae:	601a      	str	r2, [r3, #0]
    6fb0:	e0f2      	b.n	7198 <connection_follow_cb+0x258>

	} else if (le.link_state == LINK_CONNECTED) {
    6fb2:	4b7b      	ldr	r3, [pc, #492]	; (71a0 <connection_follow_cb+0x260>)
    6fb4:	7d1b      	ldrb	r3, [r3, #20]
    6fb6:	2b03      	cmp	r3, #3
    6fb8:	d16f      	bne.n	709a <connection_follow_cb+0x15a>
		u8 llid =  header & 0x03;
    6fba:	7efb      	ldrb	r3, [r7, #27]
    6fbc:	f003 0303 	and.w	r3, r3, #3
    6fc0:	72fb      	strb	r3, [r7, #11]

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    6fc2:	4b77      	ldr	r3, [pc, #476]	; (71a0 <connection_follow_cb+0x260>)
    6fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6fc6:	2b00      	cmp	r3, #0
    6fc8:	d021      	beq.n	700e <connection_follow_cb+0xce>
    6fca:	4b75      	ldr	r3, [pc, #468]	; (71a0 <connection_follow_cb+0x260>)
    6fcc:	8c1b      	ldrh	r3, [r3, #32]
    6fce:	b29a      	uxth	r2, r3
    6fd0:	4b73      	ldr	r3, [pc, #460]	; (71a0 <connection_follow_cb+0x260>)
    6fd2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6fd4:	429a      	cmp	r2, r3
    6fd6:	d11a      	bne.n	700e <connection_follow_cb+0xce>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    6fd8:	4b72      	ldr	r3, [pc, #456]	; (71a4 <connection_follow_cb+0x264>)
    6fda:	681b      	ldr	r3, [r3, #0]
    6fdc:	4a70      	ldr	r2, [pc, #448]	; (71a0 <connection_follow_cb+0x260>)
    6fde:	6193      	str	r3, [r2, #24]
			le.conn_interval = le.interval_update;
    6fe0:	4b6f      	ldr	r3, [pc, #444]	; (71a0 <connection_follow_cb+0x260>)
    6fe2:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    6fe4:	4b6e      	ldr	r3, [pc, #440]	; (71a0 <connection_follow_cb+0x260>)
    6fe6:	83da      	strh	r2, [r3, #30]
			le.interval_timer = le.interval_update - 1;
    6fe8:	4b6d      	ldr	r3, [pc, #436]	; (71a0 <connection_follow_cb+0x260>)
    6fea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6fec:	3b01      	subs	r3, #1
    6fee:	b29a      	uxth	r2, r3
    6ff0:	4b6b      	ldr	r3, [pc, #428]	; (71a0 <connection_follow_cb+0x260>)
    6ff2:	839a      	strh	r2, [r3, #28]
			le.win_size = le.win_size_update;
    6ff4:	4b6a      	ldr	r3, [pc, #424]	; (71a0 <connection_follow_cb+0x260>)
    6ff6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    6ffa:	4b69      	ldr	r3, [pc, #420]	; (71a0 <connection_follow_cb+0x260>)
    6ffc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			le.win_offset = le.win_offset_update;
    7000:	4b67      	ldr	r3, [pc, #412]	; (71a0 <connection_follow_cb+0x260>)
    7002:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    7004:	4b66      	ldr	r3, [pc, #408]	; (71a0 <connection_follow_cb+0x260>)
    7006:	849a      	strh	r2, [r3, #36]	; 0x24
			le.update_pending = 0;
    7008:	4b65      	ldr	r3, [pc, #404]	; (71a0 <connection_follow_cb+0x260>)
    700a:	2200      	movs	r2, #0
    700c:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if (llid == 0x03 && data[0] == 0x00) {
    700e:	7afb      	ldrb	r3, [r7, #11]
    7010:	2b03      	cmp	r3, #3
    7012:	d141      	bne.n	7098 <connection_follow_cb+0x158>
    7014:	693b      	ldr	r3, [r7, #16]
    7016:	781b      	ldrb	r3, [r3, #0]
    7018:	2b00      	cmp	r3, #0
    701a:	d13d      	bne.n	7098 <connection_follow_cb+0x158>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    701c:	687b      	ldr	r3, [r7, #4]
    701e:	79da      	ldrb	r2, [r3, #7]
    7020:	4b5f      	ldr	r3, [pc, #380]	; (71a0 <connection_follow_cb+0x260>)
    7022:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    7026:	687b      	ldr	r3, [r7, #4]
    7028:	3308      	adds	r3, #8
    702a:	781b      	ldrb	r3, [r3, #0]
    702c:	b29a      	uxth	r2, r3
    702e:	687b      	ldr	r3, [r7, #4]
    7030:	3309      	adds	r3, #9
    7032:	781b      	ldrb	r3, [r3, #0]
    7034:	b29b      	uxth	r3, r3
    7036:	021b      	lsls	r3, r3, #8
    7038:	b29b      	uxth	r3, r3
    703a:	4413      	add	r3, r2
    703c:	b29a      	uxth	r2, r3
    703e:	4b58      	ldr	r3, [pc, #352]	; (71a0 <connection_follow_cb+0x260>)
    7040:	865a      	strh	r2, [r3, #50]	; 0x32
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    7042:	687b      	ldr	r3, [r7, #4]
    7044:	330a      	adds	r3, #10
    7046:	781b      	ldrb	r3, [r3, #0]
    7048:	b29a      	uxth	r2, r3
    704a:	687b      	ldr	r3, [r7, #4]
    704c:	330b      	adds	r3, #11
    704e:	781b      	ldrb	r3, [r3, #0]
    7050:	b29b      	uxth	r3, r3
    7052:	021b      	lsls	r3, r3, #8
    7054:	b29b      	uxth	r3, r3
    7056:	4413      	add	r3, r2
    7058:	b29a      	uxth	r2, r3
    705a:	4b51      	ldr	r3, [pc, #324]	; (71a0 <connection_follow_cb+0x260>)
    705c:	85da      	strh	r2, [r3, #46]	; 0x2e
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    705e:	687b      	ldr	r3, [r7, #4]
    7060:	3310      	adds	r3, #16
    7062:	781b      	ldrb	r3, [r3, #0]
    7064:	b29a      	uxth	r2, r3
    7066:	687b      	ldr	r3, [r7, #4]
    7068:	3311      	adds	r3, #17
    706a:	781b      	ldrb	r3, [r3, #0]
    706c:	b29b      	uxth	r3, r3
    706e:	021b      	lsls	r3, r3, #8
    7070:	b29b      	uxth	r3, r3
    7072:	4413      	add	r3, r2
    7074:	b29a      	uxth	r2, r3
    7076:	4b4a      	ldr	r3, [pc, #296]	; (71a0 <connection_follow_cb+0x260>)
    7078:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (le.update_instant - le.conn_count < 32767)
    707a:	4b49      	ldr	r3, [pc, #292]	; (71a0 <connection_follow_cb+0x260>)
    707c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    707e:	461a      	mov	r2, r3
    7080:	4b47      	ldr	r3, [pc, #284]	; (71a0 <connection_follow_cb+0x260>)
    7082:	8c1b      	ldrh	r3, [r3, #32]
    7084:	b29b      	uxth	r3, r3
    7086:	1ad3      	subs	r3, r2, r3
    7088:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    708c:	4293      	cmp	r3, r2
    708e:	dc03      	bgt.n	7098 <connection_follow_cb+0x158>
				le.update_pending = 1;
    7090:	4b43      	ldr	r3, [pc, #268]	; (71a0 <connection_follow_cb+0x260>)
    7092:	2201      	movs	r2, #1
    7094:	629a      	str	r2, [r3, #40]	; 0x28
    7096:	e07f      	b.n	7198 <connection_follow_cb+0x258>
    7098:	e07e      	b.n	7198 <connection_follow_cb+0x258>
		}

	} else if (le.link_state == LINK_LISTENING) {
    709a:	4b41      	ldr	r3, [pc, #260]	; (71a0 <connection_follow_cb+0x260>)
    709c:	7d1b      	ldrb	r3, [r3, #20]
    709e:	2b01      	cmp	r3, #1
    70a0:	d17a      	bne.n	7198 <connection_follow_cb+0x258>
		u8 pkt_type = packet[4] & 0x0F;
    70a2:	687b      	ldr	r3, [r7, #4]
    70a4:	3304      	adds	r3, #4
    70a6:	781b      	ldrb	r3, [r3, #0]
    70a8:	f003 030f 	and.w	r3, r3, #15
    70ac:	72bb      	strb	r3, [r7, #10]
		if (pkt_type == 0x05) {
    70ae:	7abb      	ldrb	r3, [r7, #10]
    70b0:	2b05      	cmp	r3, #5
    70b2:	d171      	bne.n	7198 <connection_follow_cb+0x258>
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    70b4:	4b3a      	ldr	r3, [pc, #232]	; (71a0 <connection_follow_cb+0x260>)
    70b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    70b8:	2b00      	cmp	r3, #0
    70ba:	d014      	beq.n	70e6 <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    70bc:	687b      	ldr	r3, [r7, #4]
    70be:	3306      	adds	r3, #6
    70c0:	483b      	ldr	r0, [pc, #236]	; (71b0 <connection_follow_cb+0x270>)
    70c2:	4619      	mov	r1, r3
    70c4:	2206      	movs	r2, #6
    70c6:	f004 faaf 	bl	b628 <memcmp>
    70ca:	4603      	mov	r3, r0
	} else if (le.link_state == LINK_LISTENING) {
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    70cc:	2b00      	cmp	r3, #0
    70ce:	d00a      	beq.n	70e6 <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    70d0:	687b      	ldr	r3, [r7, #4]
    70d2:	330c      	adds	r3, #12
    70d4:	4836      	ldr	r0, [pc, #216]	; (71b0 <connection_follow_cb+0x270>)
    70d6:	4619      	mov	r1, r3
    70d8:	2206      	movs	r2, #6
    70da:	f004 faa5 	bl	b628 <memcmp>
    70de:	4603      	mov	r3, r0
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    70e0:	2b00      	cmp	r3, #0
    70e2:	d000      	beq.n	70e6 <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
    70e4:	e058      	b.n	7198 <connection_follow_cb+0x258>
			}

			le.link_state = LINK_CONN_PENDING;
    70e6:	4b2e      	ldr	r3, [pc, #184]	; (71a0 <connection_follow_cb+0x260>)
    70e8:	2202      	movs	r2, #2
    70ea:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    70ec:	4b2c      	ldr	r3, [pc, #176]	; (71a0 <connection_follow_cb+0x260>)
    70ee:	2200      	movs	r2, #0
    70f0:	611a      	str	r2, [r3, #16]

			for (i = 0; i < 4; ++i)
    70f2:	2300      	movs	r3, #0
    70f4:	627b      	str	r3, [r7, #36]	; 0x24
    70f6:	e011      	b.n	711c <connection_follow_cb+0x1dc>
				aa |= packet[18+i] << (i*8);
    70f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    70fa:	3312      	adds	r3, #18
    70fc:	461a      	mov	r2, r3
    70fe:	687b      	ldr	r3, [r7, #4]
    7100:	4413      	add	r3, r2
    7102:	781b      	ldrb	r3, [r3, #0]
    7104:	461a      	mov	r2, r3
    7106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7108:	00db      	lsls	r3, r3, #3
    710a:	fa02 f303 	lsl.w	r3, r2, r3
    710e:	461a      	mov	r2, r3
    7110:	6a3b      	ldr	r3, [r7, #32]
    7112:	4313      	orrs	r3, r2
    7114:	623b      	str	r3, [r7, #32]
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    7116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7118:	3301      	adds	r3, #1
    711a:	627b      	str	r3, [r7, #36]	; 0x24
    711c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    711e:	2b03      	cmp	r3, #3
    7120:	ddea      	ble.n	70f8 <connection_follow_cb+0x1b8>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    7122:	6a38      	ldr	r0, [r7, #32]
    7124:	f7ff f97e 	bl	6424 <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    7128:	687b      	ldr	r3, [r7, #4]
    712a:	3318      	adds	r3, #24
    712c:	781b      	ldrb	r3, [r3, #0]
    712e:	041a      	lsls	r2, r3, #16
						| (packet[CRC_INIT+1] << 8)
    7130:	687b      	ldr	r3, [r7, #4]
    7132:	3317      	adds	r3, #23
    7134:	781b      	ldrb	r3, [r3, #0]
    7136:	021b      	lsls	r3, r3, #8
    7138:	4313      	orrs	r3, r2
						|  packet[CRC_INIT+0];
    713a:	687a      	ldr	r2, [r7, #4]
    713c:	3216      	adds	r2, #22
    713e:	7812      	ldrb	r2, [r2, #0]
    7140:	4313      	orrs	r3, r2
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    7142:	461a      	mov	r2, r3
    7144:	4b16      	ldr	r3, [pc, #88]	; (71a0 <connection_follow_cb+0x260>)
    7146:	609a      	str	r2, [r3, #8]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    7148:	4b15      	ldr	r3, [pc, #84]	; (71a0 <connection_follow_cb+0x260>)
    714a:	689b      	ldr	r3, [r3, #8]
    714c:	4618      	mov	r0, r3
    714e:	f002 faf7 	bl	9740 <rbit>
    7152:	4602      	mov	r2, r0
    7154:	4b12      	ldr	r3, [pc, #72]	; (71a0 <connection_follow_cb+0x260>)
    7156:	60da      	str	r2, [r3, #12]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    7158:	687b      	ldr	r3, [r7, #4]
    715a:	7e5a      	ldrb	r2, [r3, #25]
    715c:	4b10      	ldr	r3, [pc, #64]	; (71a0 <connection_follow_cb+0x260>)
    715e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    7162:	687b      	ldr	r3, [r7, #4]
    7164:	331a      	adds	r3, #26
    7166:	781b      	ldrb	r3, [r3, #0]
    7168:	b29a      	uxth	r2, r3
    716a:	4b0d      	ldr	r3, [pc, #52]	; (71a0 <connection_follow_cb+0x260>)
    716c:	849a      	strh	r2, [r3, #36]	; 0x24

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = packet[CONN_INTERVAL];
    716e:	687b      	ldr	r3, [r7, #4]
    7170:	331c      	adds	r3, #28
    7172:	781b      	ldrb	r3, [r3, #0]
    7174:	b29a      	uxth	r2, r3
    7176:	4b0a      	ldr	r3, [pc, #40]	; (71a0 <connection_follow_cb+0x260>)
    7178:	83da      	strh	r2, [r3, #30]

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    717a:	687b      	ldr	r3, [r7, #4]
    717c:	3327      	adds	r3, #39	; 0x27
    717e:	781b      	ldrb	r3, [r3, #0]
    7180:	f003 031f 	and.w	r3, r3, #31
    7184:	b2da      	uxtb	r2, r3
    7186:	4b06      	ldr	r3, [pc, #24]	; (71a0 <connection_follow_cb+0x260>)
    7188:	759a      	strb	r2, [r3, #22]
			le.channel_idx = le.channel_increment;
    718a:	4b05      	ldr	r3, [pc, #20]	; (71a0 <connection_follow_cb+0x260>)
    718c:	7d9a      	ldrb	r2, [r3, #22]
    718e:	4b04      	ldr	r3, [pc, #16]	; (71a0 <connection_follow_cb+0x260>)
    7190:	755a      	strb	r2, [r3, #21]

			// Hop to the initial channel immediately
			do_hop = 1;
    7192:	4b08      	ldr	r3, [pc, #32]	; (71b4 <connection_follow_cb+0x274>)
    7194:	2201      	movs	r2, #1
    7196:	701a      	strb	r2, [r3, #0]
		}
	}
}
    7198:	3728      	adds	r7, #40	; 0x28
    719a:	46bd      	mov	sp, r7
    719c:	bd80      	pop	{r7, pc}
    719e:	bf00      	nop
    71a0:	10000458 	.word	0x10000458
    71a4:	10000be4 	.word	0x10000be4
    71a8:	10000a40 	.word	0x10000a40
    71ac:	10000994 	.word	0x10000994
    71b0:	1000048c 	.word	0x1000048c
    71b4:	1000097d 	.word	0x1000097d

000071b8 <bt_follow_le>:

void bt_follow_le() {
    71b8:	b580      	push	{r7, lr}
    71ba:	af00      	add	r7, sp, #0
	reset_le();
    71bc:	f7ff f94c 	bl	6458 <reset_le>
	packet_cb = connection_follow_cb;
    71c0:	4b04      	ldr	r3, [pc, #16]	; (71d4 <bt_follow_le+0x1c>)
    71c2:	4a05      	ldr	r2, [pc, #20]	; (71d8 <bt_follow_le+0x20>)
    71c4:	601a      	str	r2, [r3, #0]
	bt_le_sync(MODE_BT_FOLLOW_LE);
    71c6:	2009      	movs	r0, #9
    71c8:	f7ff fb1e 	bl	6808 <bt_le_sync>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    71cc:	4b03      	ldr	r3, [pc, #12]	; (71dc <bt_follow_le+0x24>)
    71ce:	2200      	movs	r2, #0
    71d0:	701a      	strb	r2, [r3, #0]
}
    71d2:	bd80      	pop	{r7, pc}
    71d4:	1000099c 	.word	0x1000099c
    71d8:	00006f41 	.word	0x00006f41
    71dc:	10000a3e 	.word	0x10000a3e

000071e0 <le_promisc_state>:

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    71e0:	b580      	push	{r7, lr}
    71e2:	b092      	sub	sp, #72	; 0x48
    71e4:	af00      	add	r7, sp, #0
    71e6:	4603      	mov	r3, r0
    71e8:	60b9      	str	r1, [r7, #8]
    71ea:	607a      	str	r2, [r7, #4]
    71ec:	73fb      	strb	r3, [r7, #15]
	u8 buf[50] = { 0, };
    71ee:	f107 0314 	add.w	r3, r7, #20
    71f2:	2200      	movs	r2, #0
    71f4:	601a      	str	r2, [r3, #0]
    71f6:	3304      	adds	r3, #4
    71f8:	2200      	movs	r2, #0
    71fa:	601a      	str	r2, [r3, #0]
    71fc:	3304      	adds	r3, #4
    71fe:	2200      	movs	r2, #0
    7200:	601a      	str	r2, [r3, #0]
    7202:	3304      	adds	r3, #4
    7204:	2200      	movs	r2, #0
    7206:	601a      	str	r2, [r3, #0]
    7208:	3304      	adds	r3, #4
    720a:	2200      	movs	r2, #0
    720c:	601a      	str	r2, [r3, #0]
    720e:	3304      	adds	r3, #4
    7210:	2200      	movs	r2, #0
    7212:	601a      	str	r2, [r3, #0]
    7214:	3304      	adds	r3, #4
    7216:	2200      	movs	r2, #0
    7218:	601a      	str	r2, [r3, #0]
    721a:	3304      	adds	r3, #4
    721c:	2200      	movs	r2, #0
    721e:	601a      	str	r2, [r3, #0]
    7220:	3304      	adds	r3, #4
    7222:	2200      	movs	r2, #0
    7224:	601a      	str	r2, [r3, #0]
    7226:	3304      	adds	r3, #4
    7228:	2200      	movs	r2, #0
    722a:	601a      	str	r2, [r3, #0]
    722c:	3304      	adds	r3, #4
    722e:	2200      	movs	r2, #0
    7230:	601a      	str	r2, [r3, #0]
    7232:	3304      	adds	r3, #4
    7234:	2200      	movs	r2, #0
    7236:	601a      	str	r2, [r3, #0]
    7238:	3304      	adds	r3, #4
    723a:	2200      	movs	r2, #0
    723c:	801a      	strh	r2, [r3, #0]
    723e:	3302      	adds	r3, #2
	if (len > 49)
    7240:	687b      	ldr	r3, [r7, #4]
    7242:	2b31      	cmp	r3, #49	; 0x31
    7244:	d901      	bls.n	724a <le_promisc_state+0x6a>
		len = 49;
    7246:	2331      	movs	r3, #49	; 0x31
    7248:	607b      	str	r3, [r7, #4]

	buf[0] = type;
    724a:	7bfb      	ldrb	r3, [r7, #15]
    724c:	753b      	strb	r3, [r7, #20]
	memcpy(&buf[1], data, len);
    724e:	f107 0314 	add.w	r3, r7, #20
    7252:	3301      	adds	r3, #1
    7254:	4618      	mov	r0, r3
    7256:	68b9      	ldr	r1, [r7, #8]
    7258:	687a      	ldr	r2, [r7, #4]
    725a:	f004 fa17 	bl	b68c <memcpy>
	enqueue(LE_PROMISC, buf);
    725e:	f107 0314 	add.w	r3, r7, #20
    7262:	2005      	movs	r0, #5
    7264:	4619      	mov	r1, r3
    7266:	f7fd f92f 	bl	44c8 <enqueue>
}
    726a:	3748      	adds	r7, #72	; 0x48
    726c:	46bd      	mov	sp, r7
    726e:	bd80      	pop	{r7, pc}

00007270 <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    7270:	b580      	push	{r7, lr}
    7272:	b084      	sub	sp, #16
    7274:	af00      	add	r7, sp, #0
    7276:	6078      	str	r0, [r7, #4]
	static u32 first_ts = 0;
	if (channel == 2404) {
    7278:	4b55      	ldr	r3, [pc, #340]	; (73d0 <promisc_recover_hop_increment+0x160>)
    727a:	881b      	ldrh	r3, [r3, #0]
    727c:	b29b      	uxth	r3, r3
    727e:	f640 1264 	movw	r2, #2404	; 0x964
    7282:	4293      	cmp	r3, r2
    7284:	d114      	bne.n	72b0 <promisc_recover_hop_increment+0x40>
		first_ts = CLK100NS;
    7286:	4b53      	ldr	r3, [pc, #332]	; (73d4 <promisc_recover_hop_increment+0x164>)
    7288:	681b      	ldr	r3, [r3, #0]
    728a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    728e:	f640 4235 	movw	r2, #3125	; 0xc35
    7292:	fb02 f203 	mul.w	r2, r2, r3
    7296:	4b50      	ldr	r3, [pc, #320]	; (73d8 <promisc_recover_hop_increment+0x168>)
    7298:	681b      	ldr	r3, [r3, #0]
    729a:	4413      	add	r3, r2
    729c:	4a4f      	ldr	r2, [pc, #316]	; (73dc <promisc_recover_hop_increment+0x16c>)
    729e:	6013      	str	r3, [r2, #0]
		hop_direct_channel = 2406;
    72a0:	4b4f      	ldr	r3, [pc, #316]	; (73e0 <promisc_recover_hop_increment+0x170>)
    72a2:	f640 1266 	movw	r2, #2406	; 0x966
    72a6:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    72a8:	4b4e      	ldr	r3, [pc, #312]	; (73e4 <promisc_recover_hop_increment+0x174>)
    72aa:	2201      	movs	r2, #1
    72ac:	701a      	strb	r2, [r3, #0]
    72ae:	e08b      	b.n	73c8 <promisc_recover_hop_increment+0x158>
	} else if (channel == 2406) {
    72b0:	4b47      	ldr	r3, [pc, #284]	; (73d0 <promisc_recover_hop_increment+0x160>)
    72b2:	881b      	ldrh	r3, [r3, #0]
    72b4:	b29b      	uxth	r3, r3
    72b6:	f640 1266 	movw	r2, #2406	; 0x966
    72ba:	4293      	cmp	r3, r2
    72bc:	d17d      	bne.n	73ba <promisc_recover_hop_increment+0x14a>
		u32 second_ts = CLK100NS;
    72be:	4b45      	ldr	r3, [pc, #276]	; (73d4 <promisc_recover_hop_increment+0x164>)
    72c0:	681b      	ldr	r3, [r3, #0]
    72c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    72c6:	f640 4235 	movw	r2, #3125	; 0xc35
    72ca:	fb02 f203 	mul.w	r2, r2, r3
    72ce:	4b42      	ldr	r3, [pc, #264]	; (73d8 <promisc_recover_hop_increment+0x168>)
    72d0:	681b      	ldr	r3, [r3, #0]
    72d2:	4413      	add	r3, r2
    72d4:	60fb      	str	r3, [r7, #12]
		if (second_ts < first_ts)
    72d6:	4b41      	ldr	r3, [pc, #260]	; (73dc <promisc_recover_hop_increment+0x16c>)
    72d8:	681b      	ldr	r3, [r3, #0]
    72da:	68fa      	ldr	r2, [r7, #12]
    72dc:	429a      	cmp	r2, r3
    72de:	d205      	bcs.n	72ec <promisc_recover_hop_increment+0x7c>
			second_ts += 3276800000; // handle rollover
    72e0:	68fb      	ldr	r3, [r7, #12]
    72e2:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    72e6:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    72ea:	60fb      	str	r3, [r7, #12]
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    72ec:	4b3b      	ldr	r3, [pc, #236]	; (73dc <promisc_recover_hop_increment+0x16c>)
    72ee:	681b      	ldr	r3, [r3, #0]
    72f0:	68fa      	ldr	r2, [r7, #12]
    72f2:	1ad2      	subs	r2, r2, r3
    72f4:	4b3c      	ldr	r3, [pc, #240]	; (73e8 <promisc_recover_hop_increment+0x178>)
    72f6:	8bdb      	ldrh	r3, [r3, #30]
    72f8:	4619      	mov	r1, r3
    72fa:	f243 03d4 	movw	r3, #12500	; 0x30d4
    72fe:	fb03 f301 	mul.w	r3, r3, r1
    7302:	0fd9      	lsrs	r1, r3, #31
    7304:	440b      	add	r3, r1
    7306:	105b      	asrs	r3, r3, #1
    7308:	4413      	add	r3, r2
    730a:	4a37      	ldr	r2, [pc, #220]	; (73e8 <promisc_recover_hop_increment+0x178>)
    730c:	8bd2      	ldrh	r2, [r2, #30]
    730e:	4611      	mov	r1, r2
    7310:	f243 02d4 	movw	r2, #12500	; 0x30d4
    7314:	fb02 f201 	mul.w	r2, r2, r1
    7318:	fbb3 f3f2 	udiv	r3, r3, r2
    731c:	60bb      	str	r3, [r7, #8]
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    731e:	68bb      	ldr	r3, [r7, #8]
    7320:	2b24      	cmp	r3, #36	; 0x24
    7322:	d842      	bhi.n	73aa <promisc_recover_hop_increment+0x13a>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    7324:	4a31      	ldr	r2, [pc, #196]	; (73ec <promisc_recover_hop_increment+0x17c>)
    7326:	68bb      	ldr	r3, [r7, #8]
    7328:	4413      	add	r3, r2
    732a:	781a      	ldrb	r2, [r3, #0]
    732c:	4b2e      	ldr	r3, [pc, #184]	; (73e8 <promisc_recover_hop_increment+0x178>)
    732e:	759a      	strb	r2, [r3, #22]
			le.interval_timer = le.conn_interval / 2;
    7330:	4b2d      	ldr	r3, [pc, #180]	; (73e8 <promisc_recover_hop_increment+0x178>)
    7332:	8bdb      	ldrh	r3, [r3, #30]
    7334:	085b      	lsrs	r3, r3, #1
    7336:	b29a      	uxth	r2, r3
    7338:	4b2b      	ldr	r3, [pc, #172]	; (73e8 <promisc_recover_hop_increment+0x178>)
    733a:	839a      	strh	r2, [r3, #28]
			le.conn_count = 0;
    733c:	4b2a      	ldr	r3, [pc, #168]	; (73e8 <promisc_recover_hop_increment+0x178>)
    733e:	2200      	movs	r2, #0
    7340:	841a      	strh	r2, [r3, #32]
			le.conn_epoch = 0;
    7342:	4b29      	ldr	r3, [pc, #164]	; (73e8 <promisc_recover_hop_increment+0x178>)
    7344:	2200      	movs	r2, #0
    7346:	619a      	str	r2, [r3, #24]
			do_hop = 0;
    7348:	4b26      	ldr	r3, [pc, #152]	; (73e4 <promisc_recover_hop_increment+0x174>)
    734a:	2200      	movs	r2, #0
    734c:	701a      	strb	r2, [r3, #0]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    734e:	4b26      	ldr	r3, [pc, #152]	; (73e8 <promisc_recover_hop_increment+0x178>)
    7350:	7d9b      	ldrb	r3, [r3, #22]
    7352:	1c5a      	adds	r2, r3, #1
    7354:	4b26      	ldr	r3, [pc, #152]	; (73f0 <promisc_recover_hop_increment+0x180>)
    7356:	fb82 0103 	smull	r0, r1, r2, r3
    735a:	1853      	adds	r3, r2, r1
    735c:	1159      	asrs	r1, r3, #5
    735e:	17d3      	asrs	r3, r2, #31
    7360:	1ac9      	subs	r1, r1, r3
    7362:	460b      	mov	r3, r1
    7364:	00db      	lsls	r3, r3, #3
    7366:	440b      	add	r3, r1
    7368:	009b      	lsls	r3, r3, #2
    736a:	440b      	add	r3, r1
    736c:	1ad1      	subs	r1, r2, r3
    736e:	b2ca      	uxtb	r2, r1
    7370:	4b1d      	ldr	r3, [pc, #116]	; (73e8 <promisc_recover_hop_increment+0x178>)
    7372:	755a      	strb	r2, [r3, #21]
			le.link_state = LINK_CONNECTED;
    7374:	4b1c      	ldr	r3, [pc, #112]	; (73e8 <promisc_recover_hop_increment+0x178>)
    7376:	2203      	movs	r2, #3
    7378:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0;
    737a:	4b1b      	ldr	r3, [pc, #108]	; (73e8 <promisc_recover_hop_increment+0x178>)
    737c:	2200      	movs	r2, #0
    737e:	611a      	str	r2, [r3, #16]
			hop_mode = HOP_BTLE;
    7380:	4b1c      	ldr	r3, [pc, #112]	; (73f4 <promisc_recover_hop_increment+0x184>)
    7382:	2203      	movs	r2, #3
    7384:	701a      	strb	r2, [r3, #0]
			packet_cb = connection_follow_cb;
    7386:	4b1c      	ldr	r3, [pc, #112]	; (73f8 <promisc_recover_hop_increment+0x188>)
    7388:	4a1c      	ldr	r2, [pc, #112]	; (73fc <promisc_recover_hop_increment+0x18c>)
    738a:	601a      	str	r2, [r3, #0]
			le_promisc_state(3, &le.channel_increment, 1);
    738c:	2003      	movs	r0, #3
    738e:	491c      	ldr	r1, [pc, #112]	; (7400 <promisc_recover_hop_increment+0x190>)
    7390:	2201      	movs	r2, #1
    7392:	f7ff ff25 	bl	71e0 <le_promisc_state>

			if (jam_mode != JAM_NONE)
    7396:	4b1b      	ldr	r3, [pc, #108]	; (7404 <promisc_recover_hop_increment+0x194>)
    7398:	781b      	ldrb	r3, [r3, #0]
    739a:	b2db      	uxtb	r3, r3
    739c:	2b00      	cmp	r3, #0
    739e:	d003      	beq.n	73a8 <promisc_recover_hop_increment+0x138>
				le_jam_count = JAM_COUNT_DEFAULT;
    73a0:	4b19      	ldr	r3, [pc, #100]	; (7408 <promisc_recover_hop_increment+0x198>)
    73a2:	2228      	movs	r2, #40	; 0x28
    73a4:	601a      	str	r2, [r3, #0]

			return;
    73a6:	e00f      	b.n	73c8 <promisc_recover_hop_increment+0x158>
    73a8:	e00e      	b.n	73c8 <promisc_recover_hop_increment+0x158>
		}
		hop_direct_channel = 2404;
    73aa:	4b0d      	ldr	r3, [pc, #52]	; (73e0 <promisc_recover_hop_increment+0x170>)
    73ac:	f640 1264 	movw	r2, #2404	; 0x964
    73b0:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    73b2:	4b0c      	ldr	r3, [pc, #48]	; (73e4 <promisc_recover_hop_increment+0x174>)
    73b4:	2201      	movs	r2, #1
    73b6:	701a      	strb	r2, [r3, #0]
    73b8:	e006      	b.n	73c8 <promisc_recover_hop_increment+0x158>
	}
	else {
		hop_direct_channel = 2404;
    73ba:	4b09      	ldr	r3, [pc, #36]	; (73e0 <promisc_recover_hop_increment+0x170>)
    73bc:	f640 1264 	movw	r2, #2404	; 0x964
    73c0:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    73c2:	4b08      	ldr	r3, [pc, #32]	; (73e4 <promisc_recover_hop_increment+0x174>)
    73c4:	2201      	movs	r2, #1
    73c6:	701a      	strb	r2, [r3, #0]
	}
}
    73c8:	3710      	adds	r7, #16
    73ca:	46bd      	mov	sp, r7
    73cc:	bd80      	pop	{r7, pc}
    73ce:	bf00      	nop
    73d0:	1000049c 	.word	0x1000049c
    73d4:	10000be4 	.word	0x10000be4
    73d8:	40004008 	.word	0x40004008
    73dc:	10000a54 	.word	0x10000a54
    73e0:	10000980 	.word	0x10000980
    73e4:	1000097d 	.word	0x1000097d
    73e8:	10000458 	.word	0x10000458
    73ec:	0000b8b0 	.word	0x0000b8b0
    73f0:	dd67c8a7 	.word	0xdd67c8a7
    73f4:	1000097c 	.word	0x1000097c
    73f8:	1000099c 	.word	0x1000099c
    73fc:	00006f41 	.word	0x00006f41
    7400:	1000046e 	.word	0x1000046e
    7404:	10000a40 	.word	0x10000a40
    7408:	10000994 	.word	0x10000994

0000740c <promisc_recover_hop_interval>:

void promisc_recover_hop_interval(u8 *packet) {
    740c:	b580      	push	{r7, lr}
    740e:	b086      	sub	sp, #24
    7410:	af00      	add	r7, sp, #0
    7412:	6078      	str	r0, [r7, #4]
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    7414:	4b33      	ldr	r3, [pc, #204]	; (74e4 <promisc_recover_hop_interval+0xd8>)
    7416:	681b      	ldr	r3, [r3, #0]
    7418:	f3c3 0313 	ubfx	r3, r3, #0, #20
    741c:	f640 4235 	movw	r2, #3125	; 0xc35
    7420:	fb02 f203 	mul.w	r2, r2, r3
    7424:	4b30      	ldr	r3, [pc, #192]	; (74e8 <promisc_recover_hop_interval+0xdc>)
    7426:	681b      	ldr	r3, [r3, #0]
    7428:	4413      	add	r3, r2
    742a:	617b      	str	r3, [r7, #20]
	if (cur_clk < prev_clk)
    742c:	4b2f      	ldr	r3, [pc, #188]	; (74ec <promisc_recover_hop_interval+0xe0>)
    742e:	681b      	ldr	r3, [r3, #0]
    7430:	697a      	ldr	r2, [r7, #20]
    7432:	429a      	cmp	r2, r3
    7434:	d203      	bcs.n	743e <promisc_recover_hop_interval+0x32>
		cur_clk += 3267800000; // handle rollover
    7436:	697a      	ldr	r2, [r7, #20]
    7438:	4b2d      	ldr	r3, [pc, #180]	; (74f0 <promisc_recover_hop_interval+0xe4>)
    743a:	4413      	add	r3, r2
    743c:	617b      	str	r3, [r7, #20]
	u32 clk_diff = cur_clk - prev_clk;
    743e:	4b2b      	ldr	r3, [pc, #172]	; (74ec <promisc_recover_hop_interval+0xe0>)
    7440:	681b      	ldr	r3, [r3, #0]
    7442:	697a      	ldr	r2, [r7, #20]
    7444:	1ad3      	subs	r3, r2, r3
    7446:	613b      	str	r3, [r7, #16]
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    7448:	693b      	ldr	r3, [r7, #16]
    744a:	f246 12a7 	movw	r2, #24999	; 0x61a7
    744e:	4293      	cmp	r3, r2
    7450:	d800      	bhi.n	7454 <promisc_recover_hop_interval+0x48>
		return;
    7452:	e043      	b.n	74dc <promisc_recover_hop_interval+0xd0>

	if (clk_diff < le_promisc.smallest_hop_interval)
    7454:	4b27      	ldr	r3, [pc, #156]	; (74f4 <promisc_recover_hop_interval+0xe8>)
    7456:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    745a:	693b      	ldr	r3, [r7, #16]
    745c:	429a      	cmp	r2, r3
    745e:	d903      	bls.n	7468 <promisc_recover_hop_interval+0x5c>
		le_promisc.smallest_hop_interval = clk_diff;
    7460:	4a24      	ldr	r2, [pc, #144]	; (74f4 <promisc_recover_hop_interval+0xe8>)
    7462:	693b      	ldr	r3, [r7, #16]
    7464:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    7468:	4b22      	ldr	r3, [pc, #136]	; (74f4 <promisc_recover_hop_interval+0xe8>)
    746a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    746e:	f503 3361 	add.w	r3, r3, #230400	; 0x38400
    7472:	f203 3352 	addw	r3, r3, #850	; 0x352
    7476:	4a20      	ldr	r2, [pc, #128]	; (74f8 <promisc_recover_hop_interval+0xec>)
    7478:	fba2 2303 	umull	r2, r3, r2, r3
    747c:	0c9b      	lsrs	r3, r3, #18
    747e:	81fb      	strh	r3, [r7, #14]

	if (le.conn_interval == obsv_hop_interval) {
    7480:	4b1e      	ldr	r3, [pc, #120]	; (74fc <promisc_recover_hop_interval+0xf0>)
    7482:	8bdb      	ldrh	r3, [r3, #30]
    7484:	89fa      	ldrh	r2, [r7, #14]
    7486:	429a      	cmp	r2, r3
    7488:	d11e      	bne.n	74c8 <promisc_recover_hop_interval+0xbc>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    748a:	4b1a      	ldr	r3, [pc, #104]	; (74f4 <promisc_recover_hop_interval+0xe8>)
    748c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    7490:	3301      	adds	r3, #1
    7492:	4a18      	ldr	r2, [pc, #96]	; (74f4 <promisc_recover_hop_interval+0xe8>)
    7494:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    7498:	4b16      	ldr	r3, [pc, #88]	; (74f4 <promisc_recover_hop_interval+0xe8>)
    749a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    749e:	2b05      	cmp	r3, #5
    74a0:	d119      	bne.n	74d6 <promisc_recover_hop_interval+0xca>
			packet_cb = promisc_recover_hop_increment;
    74a2:	4b17      	ldr	r3, [pc, #92]	; (7500 <promisc_recover_hop_interval+0xf4>)
    74a4:	4a17      	ldr	r2, [pc, #92]	; (7504 <promisc_recover_hop_interval+0xf8>)
    74a6:	601a      	str	r2, [r3, #0]
			hop_direct_channel = 2404;
    74a8:	4b17      	ldr	r3, [pc, #92]	; (7508 <promisc_recover_hop_interval+0xfc>)
    74aa:	f640 1264 	movw	r2, #2404	; 0x964
    74ae:	801a      	strh	r2, [r3, #0]
			hop_mode = HOP_DIRECT;
    74b0:	4b16      	ldr	r3, [pc, #88]	; (750c <promisc_recover_hop_interval+0x100>)
    74b2:	2204      	movs	r2, #4
    74b4:	701a      	strb	r2, [r3, #0]
			do_hop = 1;
    74b6:	4b16      	ldr	r3, [pc, #88]	; (7510 <promisc_recover_hop_interval+0x104>)
    74b8:	2201      	movs	r2, #1
    74ba:	701a      	strb	r2, [r3, #0]
			le_promisc_state(2, &le.conn_interval, 2);
    74bc:	2002      	movs	r0, #2
    74be:	4915      	ldr	r1, [pc, #84]	; (7514 <promisc_recover_hop_interval+0x108>)
    74c0:	2202      	movs	r2, #2
    74c2:	f7ff fe8d 	bl	71e0 <le_promisc_state>
    74c6:	e006      	b.n	74d6 <promisc_recover_hop_interval+0xca>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    74c8:	4a0c      	ldr	r2, [pc, #48]	; (74fc <promisc_recover_hop_interval+0xf0>)
    74ca:	89fb      	ldrh	r3, [r7, #14]
    74cc:	83d3      	strh	r3, [r2, #30]
		le_promisc.consec_intervals = 0;
    74ce:	4b09      	ldr	r3, [pc, #36]	; (74f4 <promisc_recover_hop_interval+0xe8>)
    74d0:	2200      	movs	r2, #0
    74d2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	prev_clk = cur_clk;
    74d6:	4a05      	ldr	r2, [pc, #20]	; (74ec <promisc_recover_hop_interval+0xe0>)
    74d8:	697b      	ldr	r3, [r7, #20]
    74da:	6013      	str	r3, [r2, #0]
}
    74dc:	3718      	adds	r7, #24
    74de:	46bd      	mov	sp, r7
    74e0:	bd80      	pop	{r7, pc}
    74e2:	bf00      	nop
    74e4:	10000be4 	.word	0x10000be4
    74e8:	40004008 	.word	0x40004008
    74ec:	10000a58 	.word	0x10000a58
    74f0:	c2c6abc0 	.word	0xc2c6abc0
    74f4:	10000bec 	.word	0x10000bec
    74f8:	9119a9c1 	.word	0x9119a9c1
    74fc:	10000458 	.word	0x10000458
    7500:	1000099c 	.word	0x1000099c
    7504:	00007271 	.word	0x00007271
    7508:	10000980 	.word	0x10000980
    750c:	1000097c 	.word	0x1000097c
    7510:	1000097d 	.word	0x1000097d
    7514:	10000476 	.word	0x10000476

00007518 <promisc_follow_cb>:

void promisc_follow_cb(u8 *packet) {
    7518:	b580      	push	{r7, lr}
    751a:	b084      	sub	sp, #16
    751c:	af00      	add	r7, sp, #0
    751e:	6078      	str	r0, [r7, #4]
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    7520:	4b28      	ldr	r3, [pc, #160]	; (75c4 <promisc_follow_cb+0xac>)
    7522:	691b      	ldr	r3, [r3, #16]
    7524:	2b00      	cmp	r3, #0
    7526:	d149      	bne.n	75bc <promisc_follow_cb+0xa4>
    7528:	687b      	ldr	r3, [r7, #4]
    752a:	3304      	adds	r3, #4
    752c:	781b      	ldrb	r3, [r3, #0]
    752e:	2b01      	cmp	r3, #1
    7530:	d144      	bne.n	75bc <promisc_follow_cb+0xa4>
    7532:	687b      	ldr	r3, [r7, #4]
    7534:	3305      	adds	r3, #5
    7536:	781b      	ldrb	r3, [r3, #0]
    7538:	2b00      	cmp	r3, #0
    753a:	d13f      	bne.n	75bc <promisc_follow_cb+0xa4>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    753c:	687b      	ldr	r3, [r7, #4]
    753e:	3308      	adds	r3, #8
    7540:	781b      	ldrb	r3, [r3, #0]
    7542:	041a      	lsls	r2, r3, #16
    7544:	687b      	ldr	r3, [r7, #4]
    7546:	3307      	adds	r3, #7
    7548:	781b      	ldrb	r3, [r3, #0]
    754a:	021b      	lsls	r3, r3, #8
    754c:	4313      	orrs	r3, r2
    754e:	687a      	ldr	r2, [r7, #4]
    7550:	3206      	adds	r2, #6
    7552:	7812      	ldrb	r2, [r2, #0]
    7554:	4313      	orrs	r3, r2
    7556:	60bb      	str	r3, [r7, #8]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    7558:	687b      	ldr	r3, [r7, #4]
    755a:	3304      	adds	r3, #4
    755c:	68b8      	ldr	r0, [r7, #8]
    755e:	4619      	mov	r1, r3
    7560:	2202      	movs	r2, #2
    7562:	f000 ff69 	bl	8438 <btle_reverse_crc>
    7566:	4602      	mov	r2, r0
    7568:	4b16      	ldr	r3, [pc, #88]	; (75c4 <promisc_follow_cb+0xac>)
    756a:	609a      	str	r2, [r3, #8]
		le.crc_init_reversed = 0;
    756c:	4b15      	ldr	r3, [pc, #84]	; (75c4 <promisc_follow_cb+0xac>)
    756e:	2200      	movs	r2, #0
    7570:	60da      	str	r2, [r3, #12]
		for (i = 0; i < 24; ++i)
    7572:	2300      	movs	r3, #0
    7574:	60fb      	str	r3, [r7, #12]
    7576:	e013      	b.n	75a0 <promisc_follow_cb+0x88>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    7578:	4b12      	ldr	r3, [pc, #72]	; (75c4 <promisc_follow_cb+0xac>)
    757a:	68da      	ldr	r2, [r3, #12]
    757c:	4b11      	ldr	r3, [pc, #68]	; (75c4 <promisc_follow_cb+0xac>)
    757e:	6899      	ldr	r1, [r3, #8]
    7580:	68fb      	ldr	r3, [r7, #12]
    7582:	fa21 f303 	lsr.w	r3, r1, r3
    7586:	f003 0101 	and.w	r1, r3, #1
    758a:	68fb      	ldr	r3, [r7, #12]
    758c:	f1c3 0317 	rsb	r3, r3, #23
    7590:	fa01 f303 	lsl.w	r3, r1, r3
    7594:	4313      	orrs	r3, r2
    7596:	4a0b      	ldr	r2, [pc, #44]	; (75c4 <promisc_follow_cb+0xac>)
    7598:	60d3      	str	r3, [r2, #12]
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    759a:	68fb      	ldr	r3, [r7, #12]
    759c:	3301      	adds	r3, #1
    759e:	60fb      	str	r3, [r7, #12]
    75a0:	68fb      	ldr	r3, [r7, #12]
    75a2:	2b17      	cmp	r3, #23
    75a4:	dde8      	ble.n	7578 <promisc_follow_cb+0x60>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    75a6:	4b07      	ldr	r3, [pc, #28]	; (75c4 <promisc_follow_cb+0xac>)
    75a8:	2201      	movs	r2, #1
    75aa:	611a      	str	r2, [r3, #16]
		packet_cb = promisc_recover_hop_interval;
    75ac:	4b06      	ldr	r3, [pc, #24]	; (75c8 <promisc_follow_cb+0xb0>)
    75ae:	4a07      	ldr	r2, [pc, #28]	; (75cc <promisc_follow_cb+0xb4>)
    75b0:	601a      	str	r2, [r3, #0]
		le_promisc_state(1, &le.crc_init, 3);
    75b2:	2001      	movs	r0, #1
    75b4:	4906      	ldr	r1, [pc, #24]	; (75d0 <promisc_follow_cb+0xb8>)
    75b6:	2203      	movs	r2, #3
    75b8:	f7ff fe12 	bl	71e0 <le_promisc_state>
	}
}
    75bc:	3710      	adds	r7, #16
    75be:	46bd      	mov	sp, r7
    75c0:	bd80      	pop	{r7, pc}
    75c2:	bf00      	nop
    75c4:	10000458 	.word	0x10000458
    75c8:	1000099c 	.word	0x1000099c
    75cc:	0000740d 	.word	0x0000740d
    75d0:	10000460 	.word	0x10000460

000075d4 <see_aa>:

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    75d4:	b480      	push	{r7}
    75d6:	b087      	sub	sp, #28
    75d8:	af00      	add	r7, sp, #0
    75da:	6078      	str	r0, [r7, #4]
	int i, max = -1, killme = -1;
    75dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    75e0:	613b      	str	r3, [r7, #16]
    75e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    75e6:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < AA_LIST_SIZE; ++i)
    75e8:	2300      	movs	r3, #0
    75ea:	617b      	str	r3, [r7, #20]
    75ec:	e015      	b.n	761a <see_aa+0x46>
		if (le_promisc.active_aa[i].aa == aa) {
    75ee:	4a22      	ldr	r2, [pc, #136]	; (7678 <see_aa+0xa4>)
    75f0:	697b      	ldr	r3, [r7, #20]
    75f2:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    75f6:	687b      	ldr	r3, [r7, #4]
    75f8:	429a      	cmp	r2, r3
    75fa:	d10b      	bne.n	7614 <see_aa+0x40>
			++le_promisc.active_aa[i].count;
    75fc:	4a1e      	ldr	r2, [pc, #120]	; (7678 <see_aa+0xa4>)
    75fe:	697b      	ldr	r3, [r7, #20]
    7600:	00db      	lsls	r3, r3, #3
    7602:	4413      	add	r3, r2
    7604:	685b      	ldr	r3, [r3, #4]
    7606:	1c5a      	adds	r2, r3, #1
    7608:	491b      	ldr	r1, [pc, #108]	; (7678 <see_aa+0xa4>)
    760a:	697b      	ldr	r3, [r7, #20]
    760c:	00db      	lsls	r3, r3, #3
    760e:	440b      	add	r3, r1
    7610:	605a      	str	r2, [r3, #4]
			return;
    7612:	e02c      	b.n	766e <see_aa+0x9a>
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7614:	697b      	ldr	r3, [r7, #20]
    7616:	3301      	adds	r3, #1
    7618:	617b      	str	r3, [r7, #20]
    761a:	697b      	ldr	r3, [r7, #20]
    761c:	2b1f      	cmp	r3, #31
    761e:	dde6      	ble.n	75ee <see_aa+0x1a>
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7620:	2300      	movs	r3, #0
    7622:	617b      	str	r3, [r7, #20]
    7624:	e015      	b.n	7652 <see_aa+0x7e>
		if (le_promisc.active_aa[i].count < max || max < 0) {
    7626:	4a14      	ldr	r2, [pc, #80]	; (7678 <see_aa+0xa4>)
    7628:	697b      	ldr	r3, [r7, #20]
    762a:	00db      	lsls	r3, r3, #3
    762c:	4413      	add	r3, r2
    762e:	685a      	ldr	r2, [r3, #4]
    7630:	693b      	ldr	r3, [r7, #16]
    7632:	429a      	cmp	r2, r3
    7634:	db02      	blt.n	763c <see_aa+0x68>
    7636:	693b      	ldr	r3, [r7, #16]
    7638:	2b00      	cmp	r3, #0
    763a:	da07      	bge.n	764c <see_aa+0x78>
			killme = i;
    763c:	697b      	ldr	r3, [r7, #20]
    763e:	60fb      	str	r3, [r7, #12]
			max = le_promisc.active_aa[i].count;
    7640:	4a0d      	ldr	r2, [pc, #52]	; (7678 <see_aa+0xa4>)
    7642:	697b      	ldr	r3, [r7, #20]
    7644:	00db      	lsls	r3, r3, #3
    7646:	4413      	add	r3, r2
    7648:	685b      	ldr	r3, [r3, #4]
    764a:	613b      	str	r3, [r7, #16]
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    764c:	697b      	ldr	r3, [r7, #20]
    764e:	3301      	adds	r3, #1
    7650:	617b      	str	r3, [r7, #20]
    7652:	697b      	ldr	r3, [r7, #20]
    7654:	2b1f      	cmp	r3, #31
    7656:	dde6      	ble.n	7626 <see_aa+0x52>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    7658:	4907      	ldr	r1, [pc, #28]	; (7678 <see_aa+0xa4>)
    765a:	68fb      	ldr	r3, [r7, #12]
    765c:	687a      	ldr	r2, [r7, #4]
    765e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    7662:	4a05      	ldr	r2, [pc, #20]	; (7678 <see_aa+0xa4>)
    7664:	68fb      	ldr	r3, [r7, #12]
    7666:	00db      	lsls	r3, r3, #3
    7668:	4413      	add	r3, r2
    766a:	2201      	movs	r2, #1
    766c:	605a      	str	r2, [r3, #4]
}
    766e:	371c      	adds	r7, #28
    7670:	46bd      	mov	sp, r7
    7672:	f85d 7b04 	ldr.w	r7, [sp], #4
    7676:	4770      	bx	lr
    7678:	10000bec 	.word	0x10000bec

0000767c <cb_le_promisc>:

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    767c:	b590      	push	{r4, r7, lr}
    767e:	b0a1      	sub	sp, #132	; 0x84
    7680:	af00      	add	r7, sp, #0
    7682:	6078      	str	r0, [r7, #4]
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    7684:	f107 031c 	add.w	r3, r7, #28
    7688:	2240      	movs	r2, #64	; 0x40
    768a:	4618      	mov	r0, r3
    768c:	2100      	movs	r1, #0
    768e:	f7fc fd73 	bl	4178 <memset>
    7692:	2301      	movs	r3, #1
    7694:	773b      	strb	r3, [r7, #28]
    7696:	2301      	movs	r3, #1
    7698:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    769c:	2301      	movs	r3, #1
    769e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    76a2:	2301      	movs	r3, #1
    76a4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    76a8:	2301      	movs	r3, #1
    76aa:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    76ae:	2301      	movs	r3, #1
    76b0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    76b4:	2301      	movs	r3, #1
    76b6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    76ba:	2301      	movs	r3, #1
    76bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    76c0:	2300      	movs	r3, #0
    76c2:	67fb      	str	r3, [r7, #124]	; 0x7c
    76c4:	e041      	b.n	774a <cb_le_promisc+0xce>
		idx = whitening_index[btle_channel_index(channel-2402)];
    76c6:	4ba5      	ldr	r3, [pc, #660]	; (795c <cb_le_promisc+0x2e0>)
    76c8:	881b      	ldrh	r3, [r3, #0]
    76ca:	b29b      	uxth	r3, r3
    76cc:	b2db      	uxtb	r3, r3
    76ce:	3b62      	subs	r3, #98	; 0x62
    76d0:	b2db      	uxtb	r3, r3
    76d2:	4618      	mov	r0, r3
    76d4:	f000 fe0e 	bl	82f4 <btle_channel_index>
    76d8:	4603      	mov	r3, r0
    76da:	461a      	mov	r2, r3
    76dc:	4ba0      	ldr	r3, [pc, #640]	; (7960 <cb_le_promisc+0x2e4>)
    76de:	5c9b      	ldrb	r3, [r3, r2]
    76e0:	673b      	str	r3, [r7, #112]	; 0x70

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    76e2:	2300      	movs	r3, #0
    76e4:	67bb      	str	r3, [r7, #120]	; 0x78
    76e6:	e02a      	b.n	773e <cb_le_promisc+0xc2>
			desired[i][j] ^= whitening[idx];
    76e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    76ea:	011b      	lsls	r3, r3, #4
    76ec:	f107 0280 	add.w	r2, r7, #128	; 0x80
    76f0:	441a      	add	r2, r3
    76f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    76f4:	4413      	add	r3, r2
    76f6:	3b64      	subs	r3, #100	; 0x64
    76f8:	781a      	ldrb	r2, [r3, #0]
    76fa:	499a      	ldr	r1, [pc, #616]	; (7964 <cb_le_promisc+0x2e8>)
    76fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    76fe:	440b      	add	r3, r1
    7700:	781b      	ldrb	r3, [r3, #0]
    7702:	4053      	eors	r3, r2
    7704:	b2d9      	uxtb	r1, r3
    7706:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7708:	011b      	lsls	r3, r3, #4
    770a:	f107 0280 	add.w	r2, r7, #128	; 0x80
    770e:	441a      	add	r2, r3
    7710:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7712:	4413      	add	r3, r2
    7714:	3b64      	subs	r3, #100	; 0x64
    7716:	460a      	mov	r2, r1
    7718:	701a      	strb	r2, [r3, #0]
			idx = (idx + 1) % sizeof(whitening);
    771a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    771c:	3301      	adds	r3, #1
    771e:	4619      	mov	r1, r3
    7720:	4b91      	ldr	r3, [pc, #580]	; (7968 <cb_le_promisc+0x2ec>)
    7722:	fba1 2303 	umull	r2, r3, r1, r3
    7726:	1ac8      	subs	r0, r1, r3
    7728:	0840      	lsrs	r0, r0, #1
    772a:	4403      	add	r3, r0
    772c:	099a      	lsrs	r2, r3, #6
    772e:	4613      	mov	r3, r2
    7730:	01db      	lsls	r3, r3, #7
    7732:	1a9b      	subs	r3, r3, r2
    7734:	1aca      	subs	r2, r1, r3
    7736:	673a      	str	r2, [r7, #112]	; 0x70

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    7738:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    773a:	3301      	adds	r3, #1
    773c:	67bb      	str	r3, [r7, #120]	; 0x78
    773e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7740:	2b0f      	cmp	r3, #15
    7742:	ddd1      	ble.n	76e8 <cb_le_promisc+0x6c>
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    7744:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7746:	3301      	adds	r3, #1
    7748:	67fb      	str	r3, [r7, #124]	; 0x7c
    774a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    774c:	2b03      	cmp	r3, #3
    774e:	ddba      	ble.n	76c6 <cb_le_promisc+0x4a>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    7750:	2320      	movs	r3, #32
    7752:	67fb      	str	r3, [r7, #124]	; 0x7c
    7754:	e0d0      	b.n	78f8 <cb_le_promisc+0x27c>
		int ok[4] = { 1, 1, 1, 1 };
    7756:	4b85      	ldr	r3, [pc, #532]	; (796c <cb_le_promisc+0x2f0>)
    7758:	f107 040c 	add.w	r4, r7, #12
    775c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    775e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		int matching = -1;
    7762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7766:	66fb      	str	r3, [r7, #108]	; 0x6c

		for (j = 0; j < 4; ++j) {
    7768:	2300      	movs	r3, #0
    776a:	67bb      	str	r3, [r7, #120]	; 0x78
    776c:	e026      	b.n	77bc <cb_le_promisc+0x140>
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    776e:	2300      	movs	r3, #0
    7770:	677b      	str	r3, [r7, #116]	; 0x74
    7772:	e01d      	b.n	77b0 <cb_le_promisc+0x134>
				if (unpacked[i+k] != desired[j][k]) {
    7774:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    7776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7778:	4413      	add	r3, r2
    777a:	461a      	mov	r2, r3
    777c:	687b      	ldr	r3, [r7, #4]
    777e:	4413      	add	r3, r2
    7780:	781a      	ldrb	r2, [r3, #0]
    7782:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7784:	011b      	lsls	r3, r3, #4
    7786:	f107 0180 	add.w	r1, r7, #128	; 0x80
    778a:	4419      	add	r1, r3
    778c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    778e:	440b      	add	r3, r1
    7790:	3b64      	subs	r3, #100	; 0x64
    7792:	781b      	ldrb	r3, [r3, #0]
    7794:	429a      	cmp	r2, r3
    7796:	d008      	beq.n	77aa <cb_le_promisc+0x12e>
					ok[j] = 0;
    7798:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    779a:	009b      	lsls	r3, r3, #2
    779c:	f107 0280 	add.w	r2, r7, #128	; 0x80
    77a0:	4413      	add	r3, r2
    77a2:	2200      	movs	r2, #0
    77a4:	f843 2c74 	str.w	r2, [r3, #-116]
					break;
    77a8:	e005      	b.n	77b6 <cb_le_promisc+0x13a>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    77aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    77ac:	3301      	adds	r3, #1
    77ae:	677b      	str	r3, [r7, #116]	; 0x74
    77b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    77b2:	2b0f      	cmp	r3, #15
    77b4:	ddde      	ble.n	7774 <cb_le_promisc+0xf8>
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    77b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77b8:	3301      	adds	r3, #1
    77ba:	67bb      	str	r3, [r7, #120]	; 0x78
    77bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77be:	2b03      	cmp	r3, #3
    77c0:	ddd5      	ble.n	776e <cb_le_promisc+0xf2>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    77c2:	2300      	movs	r3, #0
    77c4:	67bb      	str	r3, [r7, #120]	; 0x78
    77c6:	e00e      	b.n	77e6 <cb_le_promisc+0x16a>
			if (ok[j]) {
    77c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77ca:	009b      	lsls	r3, r3, #2
    77cc:	f107 0280 	add.w	r2, r7, #128	; 0x80
    77d0:	4413      	add	r3, r2
    77d2:	f853 3c74 	ldr.w	r3, [r3, #-116]
    77d6:	2b00      	cmp	r3, #0
    77d8:	d002      	beq.n	77e0 <cb_le_promisc+0x164>
				matching = j;
    77da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77dc:	66fb      	str	r3, [r7, #108]	; 0x6c
				break;
    77de:	e005      	b.n	77ec <cb_le_promisc+0x170>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    77e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77e2:	3301      	adds	r3, #1
    77e4:	67bb      	str	r3, [r7, #120]	; 0x78
    77e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77e8:	2b03      	cmp	r3, #3
    77ea:	dded      	ble.n	77c8 <cb_le_promisc+0x14c>
				break;
			}
		}

		// skip if no match
		if (matching < 0)
    77ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    77ee:	2b00      	cmp	r3, #0
    77f0:	db7f      	blt.n	78f2 <cb_le_promisc+0x276>
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
    77f2:	4b5a      	ldr	r3, [pc, #360]	; (795c <cb_le_promisc+0x2e0>)
    77f4:	881b      	ldrh	r3, [r3, #0]
    77f6:	b29b      	uxth	r3, r3
    77f8:	b2db      	uxtb	r3, r3
    77fa:	3b62      	subs	r3, #98	; 0x62
    77fc:	b2db      	uxtb	r3, r3
    77fe:	4618      	mov	r0, r3
    7800:	f000 fd78 	bl	82f4 <btle_channel_index>
    7804:	4603      	mov	r3, r0
    7806:	461a      	mov	r2, r3
    7808:	4b55      	ldr	r3, [pc, #340]	; (7960 <cb_le_promisc+0x2e4>)
    780a:	5c9b      	ldrb	r3, [r3, r2]
    780c:	673b      	str	r3, [r7, #112]	; 0x70
		for (j = 0; j < 4+3+3; ++j) {
    780e:	2300      	movs	r3, #0
    7810:	67bb      	str	r3, [r7, #120]	; 0x78
    7812:	e04c      	b.n	78ae <cb_le_promisc+0x232>
			u8 byte = 0;
    7814:	2300      	movs	r3, #0
    7816:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			for (k = 0; k < 8; k++) {
    781a:	2300      	movs	r3, #0
    781c:	677b      	str	r3, [r7, #116]	; 0x74
    781e:	e039      	b.n	7894 <cb_le_promisc+0x218>
				int offset = k + (j * 8) + i - 32;
    7820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7822:	00da      	lsls	r2, r3, #3
    7824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7826:	441a      	add	r2, r3
    7828:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    782a:	4413      	add	r3, r2
    782c:	3b20      	subs	r3, #32
    782e:	663b      	str	r3, [r7, #96]	; 0x60
				if (offset >= DMA_SIZE*8*2) break;
    7830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7832:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    7836:	db00      	blt.n	783a <cb_le_promisc+0x1be>
    7838:	e02f      	b.n	789a <cb_le_promisc+0x21e>
				int bit = unpacked[offset];
    783a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    783c:	687a      	ldr	r2, [r7, #4]
    783e:	4413      	add	r3, r2
    7840:	781b      	ldrb	r3, [r3, #0]
    7842:	667b      	str	r3, [r7, #100]	; 0x64
				if (j >= 4) { // unwhiten data bytes
    7844:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7846:	2b03      	cmp	r3, #3
    7848:	dd16      	ble.n	7878 <cb_le_promisc+0x1fc>
					bit ^= whitening[idx];
    784a:	4a46      	ldr	r2, [pc, #280]	; (7964 <cb_le_promisc+0x2e8>)
    784c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    784e:	4413      	add	r3, r2
    7850:	781b      	ldrb	r3, [r3, #0]
    7852:	461a      	mov	r2, r3
    7854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7856:	4053      	eors	r3, r2
    7858:	667b      	str	r3, [r7, #100]	; 0x64
					idx = (idx + 1) % sizeof(whitening);
    785a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    785c:	3301      	adds	r3, #1
    785e:	4619      	mov	r1, r3
    7860:	4b41      	ldr	r3, [pc, #260]	; (7968 <cb_le_promisc+0x2ec>)
    7862:	fba1 2303 	umull	r2, r3, r1, r3
    7866:	1ac8      	subs	r0, r1, r3
    7868:	0840      	lsrs	r0, r0, #1
    786a:	4403      	add	r3, r0
    786c:	099a      	lsrs	r2, r3, #6
    786e:	4613      	mov	r3, r2
    7870:	01db      	lsls	r3, r3, #7
    7872:	1a9b      	subs	r3, r3, r2
    7874:	1aca      	subs	r2, r1, r3
    7876:	673a      	str	r2, [r7, #112]	; 0x70
				}
				byte |= bit << k;
    7878:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    787a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    787c:	fa02 f303 	lsl.w	r3, r2, r3
    7880:	b2da      	uxtb	r2, r3
    7882:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
    7886:	4313      	orrs	r3, r2
    7888:	b2db      	uxtb	r3, r3
    788a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    788e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7890:	3301      	adds	r3, #1
    7892:	677b      	str	r3, [r7, #116]	; 0x74
    7894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7896:	2b07      	cmp	r3, #7
    7898:	ddc2      	ble.n	7820 <cb_le_promisc+0x1a4>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    789a:	4b35      	ldr	r3, [pc, #212]	; (7970 <cb_le_promisc+0x2f4>)
    789c:	681a      	ldr	r2, [r3, #0]
    789e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    78a0:	4413      	add	r3, r2
    78a2:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
    78a6:	701a      	strb	r2, [r3, #0]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
    78a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    78aa:	3301      	adds	r3, #1
    78ac:	67bb      	str	r3, [r7, #120]	; 0x78
    78ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    78b0:	2b09      	cmp	r3, #9
    78b2:	ddaf      	ble.n	7814 <cb_le_promisc+0x198>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    78b4:	4b2e      	ldr	r3, [pc, #184]	; (7970 <cb_le_promisc+0x2f4>)
    78b6:	681b      	ldr	r3, [r3, #0]
    78b8:	3303      	adds	r3, #3
    78ba:	781b      	ldrb	r3, [r3, #0]
    78bc:	061a      	lsls	r2, r3, #24
				 (idle_rxbuf[2] << 16) |
    78be:	4b2c      	ldr	r3, [pc, #176]	; (7970 <cb_le_promisc+0x2f4>)
    78c0:	681b      	ldr	r3, [r3, #0]
    78c2:	3302      	adds	r3, #2
    78c4:	781b      	ldrb	r3, [r3, #0]
    78c6:	041b      	lsls	r3, r3, #16
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    78c8:	431a      	orrs	r2, r3
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    78ca:	4b29      	ldr	r3, [pc, #164]	; (7970 <cb_le_promisc+0x2f4>)
    78cc:	681b      	ldr	r3, [r3, #0]
    78ce:	3301      	adds	r3, #1
    78d0:	781b      	ldrb	r3, [r3, #0]
    78d2:	021b      	lsls	r3, r3, #8
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    78d4:	4313      	orrs	r3, r2
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    78d6:	4a26      	ldr	r2, [pc, #152]	; (7970 <cb_le_promisc+0x2f4>)
    78d8:	6812      	ldr	r2, [r2, #0]
    78da:	7812      	ldrb	r2, [r2, #0]
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    78dc:	4313      	orrs	r3, r2
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    78de:	65fb      	str	r3, [r7, #92]	; 0x5c
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
		see_aa(aa);
    78e0:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    78e2:	f7ff fe77 	bl	75d4 <see_aa>

		enqueue(LE_PACKET, idle_rxbuf);
    78e6:	4b22      	ldr	r3, [pc, #136]	; (7970 <cb_le_promisc+0x2f4>)
    78e8:	681b      	ldr	r3, [r3, #0]
    78ea:	2001      	movs	r0, #1
    78ec:	4619      	mov	r1, r3
    78ee:	f7fc fdeb 	bl	44c8 <enqueue>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    78f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    78f4:	3301      	adds	r3, #1
    78f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    78f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    78fa:	f5b3 7f3c 	cmp.w	r3, #752	; 0x2f0
    78fe:	f6ff af2a 	blt.w	7756 <cb_le_promisc+0xda>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    7902:	2300      	movs	r3, #0
    7904:	67fb      	str	r3, [r7, #124]	; 0x7c
    7906:	e020      	b.n	794a <cb_le_promisc+0x2ce>
		if (le_promisc.active_aa[i].count > 3) {
    7908:	4a1a      	ldr	r2, [pc, #104]	; (7974 <cb_le_promisc+0x2f8>)
    790a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    790c:	00db      	lsls	r3, r3, #3
    790e:	4413      	add	r3, r2
    7910:	685b      	ldr	r3, [r3, #4]
    7912:	2b03      	cmp	r3, #3
    7914:	dd16      	ble.n	7944 <cb_le_promisc+0x2c8>
			le_set_access_address(le_promisc.active_aa[i].aa);
    7916:	4a17      	ldr	r2, [pc, #92]	; (7974 <cb_le_promisc+0x2f8>)
    7918:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    791a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    791e:	4618      	mov	r0, r3
    7920:	f7fe fd80 	bl	6424 <le_set_access_address>
			data_cb = cb_follow_le;
    7924:	4b14      	ldr	r3, [pc, #80]	; (7978 <cb_le_promisc+0x2fc>)
    7926:	4a15      	ldr	r2, [pc, #84]	; (797c <cb_le_promisc+0x300>)
    7928:	601a      	str	r2, [r3, #0]
			packet_cb = promisc_follow_cb;
    792a:	4b15      	ldr	r3, [pc, #84]	; (7980 <cb_le_promisc+0x304>)
    792c:	4a15      	ldr	r2, [pc, #84]	; (7984 <cb_le_promisc+0x308>)
    792e:	601a      	str	r2, [r3, #0]
			le.crc_verify = 0;
    7930:	4b15      	ldr	r3, [pc, #84]	; (7988 <cb_le_promisc+0x30c>)
    7932:	2200      	movs	r2, #0
    7934:	611a      	str	r2, [r3, #16]
			le_promisc_state(0, &le.access_address, 4);
    7936:	2000      	movs	r0, #0
    7938:	4913      	ldr	r1, [pc, #76]	; (7988 <cb_le_promisc+0x30c>)
    793a:	2204      	movs	r2, #4
    793c:	f7ff fc50 	bl	71e0 <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    7940:	2300      	movs	r3, #0
    7942:	e006      	b.n	7952 <cb_le_promisc+0x2d6>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    7944:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7946:	3301      	adds	r3, #1
    7948:	67fb      	str	r3, [r7, #124]	; 0x7c
    794a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    794c:	2b1f      	cmp	r3, #31
    794e:	dddb      	ble.n	7908 <cb_le_promisc+0x28c>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    7950:	2301      	movs	r3, #1
}
    7952:	4618      	mov	r0, r3
    7954:	3784      	adds	r7, #132	; 0x84
    7956:	46bd      	mov	sp, r7
    7958:	bd90      	pop	{r4, r7, pc}
    795a:	bf00      	nop
    795c:	1000049c 	.word	0x1000049c
    7960:	0000b888 	.word	0x0000b888
    7964:	0000b808 	.word	0x0000b808
    7968:	02040811 	.word	0x02040811
    796c:	0000c0a8 	.word	0x0000c0a8
    7970:	10000454 	.word	0x10000454
    7974:	10000bec 	.word	0x10000bec
    7978:	10000998 	.word	0x10000998
    797c:	00006d65 	.word	0x00006d65
    7980:	1000099c 	.word	0x1000099c
    7984:	00007519 	.word	0x00007519
    7988:	10000458 	.word	0x10000458

0000798c <bt_promisc_le>:

void bt_promisc_le() {
    798c:	b580      	push	{r7, lr}
    798e:	af00      	add	r7, sp, #0
	while (requested_mode == MODE_BT_PROMISC_LE) {
    7990:	e02c      	b.n	79ec <bt_promisc_le+0x60>
		reset_le_promisc();
    7992:	f7fe fdad 	bl	64f0 <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    7996:	4b18      	ldr	r3, [pc, #96]	; (79f8 <bt_promisc_le+0x6c>)
    7998:	881b      	ldrh	r3, [r3, #0]
    799a:	b29b      	uxth	r3, r3
    799c:	f003 0301 	and.w	r3, r3, #1
    79a0:	2b00      	cmp	r3, #0
    79a2:	d003      	beq.n	79ac <bt_promisc_le+0x20>
			channel = 2440;
    79a4:	4b14      	ldr	r3, [pc, #80]	; (79f8 <bt_promisc_le+0x6c>)
    79a6:	f640 1288 	movw	r2, #2440	; 0x988
    79aa:	801a      	strh	r2, [r3, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    79ac:	4b13      	ldr	r3, [pc, #76]	; (79fc <bt_promisc_le+0x70>)
    79ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    79b0:	2b00      	cmp	r3, #0
    79b2:	d107      	bne.n	79c4 <bt_promisc_le+0x38>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set();
    79b4:	f7fc feec 	bl	4790 <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    79b8:	4b11      	ldr	r3, [pc, #68]	; (7a00 <bt_promisc_le+0x74>)
    79ba:	4a12      	ldr	r2, [pc, #72]	; (7a04 <bt_promisc_le+0x78>)
    79bc:	601a      	str	r2, [r3, #0]
			bt_generic_le(MODE_BT_PROMISC_LE);
    79be:	200a      	movs	r0, #10
    79c0:	f7fe fda6 	bl	6510 <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    79c4:	4b10      	ldr	r3, [pc, #64]	; (7a08 <bt_promisc_le+0x7c>)
    79c6:	781b      	ldrb	r3, [r3, #0]
    79c8:	b2db      	uxtb	r3, r3
    79ca:	2b0a      	cmp	r3, #10
    79cc:	d000      	beq.n	79d0 <bt_promisc_le+0x44>
			break;
    79ce:	e012      	b.n	79f6 <bt_promisc_le+0x6a>

		le_promisc_state(0, &le.access_address, 4);
    79d0:	2000      	movs	r0, #0
    79d2:	490a      	ldr	r1, [pc, #40]	; (79fc <bt_promisc_le+0x70>)
    79d4:	2204      	movs	r2, #4
    79d6:	f7ff fc03 	bl	71e0 <le_promisc_state>
		packet_cb = promisc_follow_cb;
    79da:	4b0c      	ldr	r3, [pc, #48]	; (7a0c <bt_promisc_le+0x80>)
    79dc:	4a0c      	ldr	r2, [pc, #48]	; (7a10 <bt_promisc_le+0x84>)
    79de:	601a      	str	r2, [r3, #0]
		le.crc_verify = 0;
    79e0:	4b06      	ldr	r3, [pc, #24]	; (79fc <bt_promisc_le+0x70>)
    79e2:	2200      	movs	r2, #0
    79e4:	611a      	str	r2, [r3, #16]
		bt_le_sync(MODE_BT_PROMISC_LE);
    79e6:	200a      	movs	r0, #10
    79e8:	f7fe ff0e 	bl	6808 <bt_le_sync>

	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
    79ec:	4b06      	ldr	r3, [pc, #24]	; (7a08 <bt_promisc_le+0x7c>)
    79ee:	781b      	ldrb	r3, [r3, #0]
    79f0:	b2db      	uxtb	r3, r3
    79f2:	2b0a      	cmp	r3, #10
    79f4:	d0cd      	beq.n	7992 <bt_promisc_le+0x6>
		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
	}
}
    79f6:	bd80      	pop	{r7, pc}
    79f8:	1000049c 	.word	0x1000049c
    79fc:	10000458 	.word	0x10000458
    7a00:	10000998 	.word	0x10000998
    7a04:	0000767d 	.word	0x0000767d
    7a08:	10000a3f 	.word	0x10000a3f
    7a0c:	1000099c 	.word	0x1000099c
    7a10:	00007519 	.word	0x00007519

00007a14 <bt_slave_le>:

void bt_slave_le() {
    7a14:	b590      	push	{r4, r7, lr}
    7a16:	b089      	sub	sp, #36	; 0x24
    7a18:	af00      	add	r7, sp, #0
	u32 calc_crc;
	int i;

	u8 adv_ind[] = {
    7a1a:	4a35      	ldr	r2, [pc, #212]	; (7af0 <bt_slave_le+0xdc>)
    7a1c:	1d3b      	adds	r3, r7, #4
    7a1e:	4614      	mov	r4, r2
    7a20:	6820      	ldr	r0, [r4, #0]
    7a22:	6861      	ldr	r1, [r4, #4]
    7a24:	68a2      	ldr	r2, [r4, #8]
    7a26:	c307      	stmia	r3!, {r0, r1, r2}
    7a28:	89a2      	ldrh	r2, [r4, #12]
    7a2a:	801a      	strh	r2, [r3, #0]

		// CRC (calc)
		0xff, 0xff, 0xff,
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;
    7a2c:	230b      	movs	r3, #11
    7a2e:	76fb      	strb	r3, [r7, #27]

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    7a30:	2300      	movs	r3, #0
    7a32:	61fb      	str	r3, [r7, #28]
    7a34:	e00e      	b.n	7a54 <bt_slave_le+0x40>
		adv_ind[i+2] = slave_mac_address[5-i];
    7a36:	69fb      	ldr	r3, [r7, #28]
    7a38:	3302      	adds	r3, #2
    7a3a:	69fa      	ldr	r2, [r7, #28]
    7a3c:	f1c2 0205 	rsb	r2, r2, #5
    7a40:	492c      	ldr	r1, [pc, #176]	; (7af4 <bt_slave_le+0xe0>)
    7a42:	5c8a      	ldrb	r2, [r1, r2]
    7a44:	f107 0120 	add.w	r1, r7, #32
    7a48:	440b      	add	r3, r1
    7a4a:	f803 2c1c 	strb.w	r2, [r3, #-28]
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    7a4e:	69fb      	ldr	r3, [r7, #28]
    7a50:	3301      	adds	r3, #1
    7a52:	61fb      	str	r3, [r7, #28]
    7a54:	69fb      	ldr	r3, [r7, #28]
    7a56:	2b05      	cmp	r3, #5
    7a58:	dded      	ble.n	7a36 <bt_slave_le+0x22>
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
    7a5a:	4b27      	ldr	r3, [pc, #156]	; (7af8 <bt_slave_le+0xe4>)
    7a5c:	68d9      	ldr	r1, [r3, #12]
    7a5e:	7efb      	ldrb	r3, [r7, #27]
    7a60:	1d3a      	adds	r2, r7, #4
    7a62:	4608      	mov	r0, r1
    7a64:	4611      	mov	r1, r2
    7a66:	461a      	mov	r2, r3
    7a68:	f000 fca2 	bl	83b0 <btle_calc_crc>
    7a6c:	6178      	str	r0, [r7, #20]
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
    7a6e:	7efb      	ldrb	r3, [r7, #27]
    7a70:	697a      	ldr	r2, [r7, #20]
    7a72:	b2d2      	uxtb	r2, r2
    7a74:	f107 0120 	add.w	r1, r7, #32
    7a78:	440b      	add	r3, r1
    7a7a:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    7a7e:	7efb      	ldrb	r3, [r7, #27]
    7a80:	3301      	adds	r3, #1
    7a82:	697a      	ldr	r2, [r7, #20]
    7a84:	0a12      	lsrs	r2, r2, #8
    7a86:	b2d2      	uxtb	r2, r2
    7a88:	f107 0120 	add.w	r1, r7, #32
    7a8c:	440b      	add	r3, r1
    7a8e:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    7a92:	7efb      	ldrb	r3, [r7, #27]
    7a94:	3302      	adds	r3, #2
    7a96:	697a      	ldr	r2, [r7, #20]
    7a98:	0c12      	lsrs	r2, r2, #16
    7a9a:	b2d2      	uxtb	r2, r2
    7a9c:	f107 0120 	add.w	r1, r7, #32
    7aa0:	440b      	add	r3, r1
    7aa2:	f803 2c1c 	strb.w	r2, [r3, #-28]

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    7aa6:	e01b      	b.n	7ae0 <bt_slave_le+0xcc>
		ICER0 = ICER0_ICE_USB;
    7aa8:	4b14      	ldr	r3, [pc, #80]	; (7afc <bt_slave_le+0xe8>)
    7aaa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7aae:	601a      	str	r2, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
    7ab0:	4b12      	ldr	r3, [pc, #72]	; (7afc <bt_slave_le+0xe8>)
    7ab2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7ab6:	601a      	str	r2, [r3, #0]
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    7ab8:	7efb      	ldrb	r3, [r7, #27]
    7aba:	3303      	adds	r3, #3
    7abc:	b2da      	uxtb	r2, r3
    7abe:	1d3b      	adds	r3, r7, #4
    7ac0:	480f      	ldr	r0, [pc, #60]	; (7b00 <bt_slave_le+0xec>)
    7ac2:	4611      	mov	r1, r2
    7ac4:	461a      	mov	r2, r3
    7ac6:	f7fe f91b 	bl	5d00 <le_transmit>
		ISER0 = ISER0_ISE_USB;
    7aca:	4b0e      	ldr	r3, [pc, #56]	; (7b04 <bt_slave_le+0xf0>)
    7acc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7ad0:	601a      	str	r2, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    7ad2:	4b0c      	ldr	r3, [pc, #48]	; (7b04 <bt_slave_le+0xf0>)
    7ad4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7ad8:	601a      	str	r2, [r3, #0]
		msleep(100);
    7ada:	2064      	movs	r0, #100	; 0x64
    7adc:	f7fd fd20 	bl	5520 <msleep>
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    7ae0:	4b09      	ldr	r3, [pc, #36]	; (7b08 <bt_slave_le+0xf4>)
    7ae2:	781b      	ldrb	r3, [r3, #0]
    7ae4:	b2db      	uxtb	r3, r3
    7ae6:	2b0c      	cmp	r3, #12
    7ae8:	d0de      	beq.n	7aa8 <bt_slave_le+0x94>
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
		msleep(100);
	}
}
    7aea:	3724      	adds	r7, #36	; 0x24
    7aec:	46bd      	mov	sp, r7
    7aee:	bd90      	pop	{r4, r7, pc}
    7af0:	0000c0b8 	.word	0x0000c0b8
    7af4:	1000098c 	.word	0x1000098c
    7af8:	10000458 	.word	0x10000458
    7afc:	e000e180 	.word	0xe000e180
    7b00:	8e89bed6 	.word	0x8e89bed6
    7b04:	e000e100 	.word	0xe000e100
    7b08:	10000a3f 	.word	0x10000a3f

00007b0c <specan>:

/* spectrum analysis */
void specan()
{
    7b0c:	b590      	push	{r4, r7, lr}
    7b0e:	b091      	sub	sp, #68	; 0x44
    7b10:	af00      	add	r7, sp, #0
	u8 epstat;
	u16 f;
	u8 i = 0;
    7b12:	2300      	movs	r3, #0
    7b14:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	u8 buf[DMA_SIZE];

	RXLED_SET;
    7b18:	4b5a      	ldr	r3, [pc, #360]	; (7c84 <specan+0x178>)
    7b1a:	2210      	movs	r2, #16
    7b1c:	601a      	str	r2, [r3, #0]

	queue_init();
    7b1e:	f000 fd69 	bl	85f4 <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7b22:	4b59      	ldr	r3, [pc, #356]	; (7c88 <specan+0x17c>)
    7b24:	2280      	movs	r2, #128	; 0x80
    7b26:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    7b28:	2012      	movs	r0, #18
    7b2a:	f642 3122 	movw	r1, #11042	; 0x2b22
    7b2e:	f001 ffd9 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7b32:	2014      	movs	r0, #20
    7b34:	f241 314b 	movw	r1, #4939	; 0x134b
    7b38:	f001 ffd4 	bl	9ae4 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    7b3c:	2020      	movs	r0, #32
    7b3e:	f240 1101 	movw	r1, #257	; 0x101
    7b42:	f001 ffcf 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    7b46:	2003      	movs	r0, #3
    7b48:	2129      	movs	r1, #41	; 0x29
    7b4a:	f001 ffcb 	bl	9ae4 <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    7b4e:	bf00      	nop
    7b50:	f002 f880 	bl	9c54 <cc2400_status>
    7b54:	4603      	mov	r3, r0
    7b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7b5a:	2b00      	cmp	r3, #0
    7b5c:	d0f8      	beq.n	7b50 <specan+0x44>
	while ((cc2400_status() & FS_LOCK));
    7b5e:	bf00      	nop
    7b60:	f002 f878 	bl	9c54 <cc2400_status>
    7b64:	4603      	mov	r3, r0
    7b66:	f003 0304 	and.w	r3, r3, #4
    7b6a:	2b00      	cmp	r3, #0
    7b6c:	d1f8      	bne.n	7b60 <specan+0x54>

	while (requested_mode == MODE_SPECAN) {
    7b6e:	e07a      	b.n	7c66 <specan+0x15a>
		for (f = low_freq; f < high_freq + 1; f++) {
    7b70:	4b46      	ldr	r3, [pc, #280]	; (7c8c <specan+0x180>)
    7b72:	881b      	ldrh	r3, [r3, #0]
    7b74:	87fb      	strh	r3, [r7, #62]	; 0x3e
    7b76:	e06f      	b.n	7c58 <specan+0x14c>
			cc2400_set(FSDIV, f - 1);
    7b78:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    7b7a:	3b01      	subs	r3, #1
    7b7c:	b29b      	uxth	r3, r3
    7b7e:	2002      	movs	r0, #2
    7b80:	4619      	mov	r1, r3
    7b82:	f001 ffaf 	bl	9ae4 <cc2400_set>
			cc2400_strobe(SFSON);
    7b86:	2061      	movs	r0, #97	; 0x61
    7b88:	f002 f86e 	bl	9c68 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    7b8c:	bf00      	nop
    7b8e:	f002 f861 	bl	9c54 <cc2400_status>
    7b92:	4603      	mov	r3, r0
    7b94:	f003 0304 	and.w	r3, r3, #4
    7b98:	2b00      	cmp	r3, #0
    7b9a:	d0f8      	beq.n	7b8e <specan+0x82>
			cc2400_strobe(SRX);
    7b9c:	2062      	movs	r0, #98	; 0x62
    7b9e:	f002 f863 	bl	9c68 <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    7ba2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    7ba6:	607b      	str	r3, [r7, #4]
    7ba8:	bf00      	nop
    7baa:	687b      	ldr	r3, [r7, #4]
    7bac:	3b01      	subs	r3, #1
    7bae:	607b      	str	r3, [r7, #4]
    7bb0:	2b00      	cmp	r3, #0
    7bb2:	d1fa      	bne.n	7baa <specan+0x9e>
			buf[3 * i] = (f >> 8) & 0xFF;
    7bb4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7bb8:	4613      	mov	r3, r2
    7bba:	005b      	lsls	r3, r3, #1
    7bbc:	4413      	add	r3, r2
    7bbe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7bc0:	0a12      	lsrs	r2, r2, #8
    7bc2:	b292      	uxth	r2, r2
    7bc4:	b2d2      	uxtb	r2, r2
    7bc6:	f107 0140 	add.w	r1, r7, #64	; 0x40
    7bca:	440b      	add	r3, r1
    7bcc:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 1] = f  & 0xFF;
    7bd0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7bd4:	4613      	mov	r3, r2
    7bd6:	005b      	lsls	r3, r3, #1
    7bd8:	4413      	add	r3, r2
    7bda:	3301      	adds	r3, #1
    7bdc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7bde:	b2d2      	uxtb	r2, r2
    7be0:	f107 0140 	add.w	r1, r7, #64	; 0x40
    7be4:	440b      	add	r3, r1
    7be6:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    7bea:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7bee:	4613      	mov	r3, r2
    7bf0:	005b      	lsls	r3, r3, #1
    7bf2:	4413      	add	r3, r2
    7bf4:	1c9c      	adds	r4, r3, #2
    7bf6:	2006      	movs	r0, #6
    7bf8:	f001 ff5e 	bl	9ab8 <cc2400_get>
    7bfc:	4603      	mov	r3, r0
    7bfe:	0a1b      	lsrs	r3, r3, #8
    7c00:	b29b      	uxth	r3, r3
    7c02:	b2da      	uxtb	r2, r3
    7c04:	f107 0340 	add.w	r3, r7, #64	; 0x40
    7c08:	4423      	add	r3, r4
    7c0a:	f803 2c38 	strb.w	r2, [r3, #-56]
			i++;
    7c0e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    7c12:	3301      	adds	r3, #1
    7c14:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (i == 16) {
    7c18:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    7c1c:	2b10      	cmp	r3, #16
    7c1e:	d10d      	bne.n	7c3c <specan+0x130>
				enqueue(SPECAN, buf);
    7c20:	f107 0308 	add.w	r3, r7, #8
    7c24:	2004      	movs	r0, #4
    7c26:	4619      	mov	r1, r3
    7c28:	f7fc fc4e 	bl	44c8 <enqueue>
				i = 0;
    7c2c:	2300      	movs	r3, #0
    7c2e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				handle_usb(clkn);
    7c32:	4b17      	ldr	r3, [pc, #92]	; (7c90 <specan+0x184>)
    7c34:	681b      	ldr	r3, [r3, #0]
    7c36:	4618      	mov	r0, r3
    7c38:	f000 fd7c 	bl	8734 <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    7c3c:	2064      	movs	r0, #100	; 0x64
    7c3e:	f002 f813 	bl	9c68 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    7c42:	bf00      	nop
    7c44:	f002 f806 	bl	9c54 <cc2400_status>
    7c48:	4603      	mov	r3, r0
    7c4a:	f003 0304 	and.w	r3, r3, #4
    7c4e:	2b00      	cmp	r3, #0
    7c50:	d1f8      	bne.n	7c44 <specan+0x138>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    7c52:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    7c54:	3301      	adds	r3, #1
    7c56:	87fb      	strh	r3, [r7, #62]	; 0x3e
    7c58:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7c5a:	4b0e      	ldr	r3, [pc, #56]	; (7c94 <specan+0x188>)
    7c5c:	881b      	ldrh	r3, [r3, #0]
    7c5e:	b29b      	uxth	r3, r3
    7c60:	3301      	adds	r3, #1
    7c62:	429a      	cmp	r2, r3
    7c64:	db88      	blt.n	7b78 <specan+0x6c>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
    7c66:	4b0c      	ldr	r3, [pc, #48]	; (7c98 <specan+0x18c>)
    7c68:	781b      	ldrb	r3, [r3, #0]
    7c6a:	b2db      	uxtb	r3, r3
    7c6c:	2b04      	cmp	r3, #4
    7c6e:	f43f af7f 	beq.w	7b70 <specan+0x64>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	mode = MODE_IDLE;
    7c72:	4b0a      	ldr	r3, [pc, #40]	; (7c9c <specan+0x190>)
    7c74:	2200      	movs	r2, #0
    7c76:	701a      	strb	r2, [r3, #0]
	RXLED_CLR;
    7c78:	4b09      	ldr	r3, [pc, #36]	; (7ca0 <specan+0x194>)
    7c7a:	2210      	movs	r2, #16
    7c7c:	601a      	str	r2, [r3, #0]
}
    7c7e:	3744      	adds	r7, #68	; 0x44
    7c80:	46bd      	mov	sp, r7
    7c82:	bd90      	pop	{r4, r7, pc}
    7c84:	2009c038 	.word	0x2009c038
    7c88:	2009c058 	.word	0x2009c058
    7c8c:	1000049e 	.word	0x1000049e
    7c90:	10000be4 	.word	0x10000be4
    7c94:	100004a0 	.word	0x100004a0
    7c98:	10000a3f 	.word	0x10000a3f
    7c9c:	10000a3e 	.word	0x10000a3e
    7ca0:	2009c03c 	.word	0x2009c03c

00007ca4 <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    7ca4:	b580      	push	{r7, lr}
    7ca6:	b084      	sub	sp, #16
    7ca8:	af00      	add	r7, sp, #0
	int8_t lvl;
	u8 i = 0;
    7caa:	2300      	movs	r3, #0
    7cac:	73fb      	strb	r3, [r7, #15]
	u16 channels[3] = {2412, 2437, 2462};
    7cae:	4a5b      	ldr	r2, [pc, #364]	; (7e1c <led_specan+0x178>)
    7cb0:	f107 0308 	add.w	r3, r7, #8
    7cb4:	6810      	ldr	r0, [r2, #0]
    7cb6:	6018      	str	r0, [r3, #0]
    7cb8:	8892      	ldrh	r2, [r2, #4]
    7cba:	809a      	strh	r2, [r3, #4]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7cbc:	4b58      	ldr	r3, [pc, #352]	; (7e20 <led_specan+0x17c>)
    7cbe:	2280      	movs	r2, #128	; 0x80
    7cc0:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    7cc2:	2012      	movs	r0, #18
    7cc4:	f642 3122 	movw	r1, #11042	; 0x2b22
    7cc8:	f001 ff0c 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7ccc:	2014      	movs	r0, #20
    7cce:	f241 314b 	movw	r1, #4939	; 0x134b
    7cd2:	f001 ff07 	bl	9ae4 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    7cd6:	2020      	movs	r0, #32
    7cd8:	f240 1101 	movw	r1, #257	; 0x101
    7cdc:	f001 ff02 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    7ce0:	2003      	movs	r0, #3
    7ce2:	2129      	movs	r1, #41	; 0x29
    7ce4:	f001 fefe 	bl	9ae4 <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    7ce8:	2006      	movs	r0, #6
    7cea:	21f1      	movs	r1, #241	; 0xf1
    7cec:	f001 fefa 	bl	9ae4 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7cf0:	bf00      	nop
    7cf2:	f001 ffaf 	bl	9c54 <cc2400_status>
    7cf6:	4603      	mov	r3, r0
    7cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7cfc:	2b00      	cmp	r3, #0
    7cfe:	d0f8      	beq.n	7cf2 <led_specan+0x4e>
	while ((cc2400_status() & FS_LOCK));
    7d00:	bf00      	nop
    7d02:	f001 ffa7 	bl	9c54 <cc2400_status>
    7d06:	4603      	mov	r3, r0
    7d08:	f003 0304 	and.w	r3, r3, #4
    7d0c:	2b00      	cmp	r3, #0
    7d0e:	d1f8      	bne.n	7d02 <led_specan+0x5e>

	while (requested_mode == MODE_LED_SPECAN) {
    7d10:	e079      	b.n	7e06 <led_specan+0x162>
		cc2400_set(FSDIV, channels[i] - 1);
    7d12:	7bfb      	ldrb	r3, [r7, #15]
    7d14:	005b      	lsls	r3, r3, #1
    7d16:	f107 0210 	add.w	r2, r7, #16
    7d1a:	4413      	add	r3, r2
    7d1c:	f833 3c08 	ldrh.w	r3, [r3, #-8]
    7d20:	3b01      	subs	r3, #1
    7d22:	b29b      	uxth	r3, r3
    7d24:	2002      	movs	r0, #2
    7d26:	4619      	mov	r1, r3
    7d28:	f001 fedc 	bl	9ae4 <cc2400_set>
		cc2400_strobe(SFSON);
    7d2c:	2061      	movs	r0, #97	; 0x61
    7d2e:	f001 ff9b 	bl	9c68 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    7d32:	bf00      	nop
    7d34:	f001 ff8e 	bl	9c54 <cc2400_status>
    7d38:	4603      	mov	r3, r0
    7d3a:	f003 0304 	and.w	r3, r3, #4
    7d3e:	2b00      	cmp	r3, #0
    7d40:	d0f8      	beq.n	7d34 <led_specan+0x90>
		cc2400_strobe(SRX);
    7d42:	2062      	movs	r0, #98	; 0x62
    7d44:	f001 ff90 	bl	9c68 <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    7d48:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    7d4c:	607b      	str	r3, [r7, #4]
    7d4e:	bf00      	nop
    7d50:	687b      	ldr	r3, [r7, #4]
    7d52:	3b01      	subs	r3, #1
    7d54:	607b      	str	r3, [r7, #4]
    7d56:	2b00      	cmp	r3, #0
    7d58:	d1fa      	bne.n	7d50 <led_specan+0xac>
		lvl = cc2400_get(RSSI) >> 8;
    7d5a:	2006      	movs	r0, #6
    7d5c:	f001 feac 	bl	9ab8 <cc2400_get>
    7d60:	4603      	mov	r3, r0
    7d62:	0a1b      	lsrs	r3, r3, #8
    7d64:	b29b      	uxth	r3, r3
    7d66:	73bb      	strb	r3, [r7, #14]
        if (lvl > rssi_threshold) {
    7d68:	4b2e      	ldr	r3, [pc, #184]	; (7e24 <led_specan+0x180>)
    7d6a:	781b      	ldrb	r3, [r3, #0]
    7d6c:	b2db      	uxtb	r3, r3
    7d6e:	f997 200e 	ldrsb.w	r2, [r7, #14]
    7d72:	b25b      	sxtb	r3, r3
    7d74:	429a      	cmp	r2, r3
    7d76:	dd15      	ble.n	7da4 <led_specan+0x100>
            switch (i) {
    7d78:	7bfb      	ldrb	r3, [r7, #15]
    7d7a:	2b01      	cmp	r3, #1
    7d7c:	d009      	beq.n	7d92 <led_specan+0xee>
    7d7e:	2b02      	cmp	r3, #2
    7d80:	d00b      	beq.n	7d9a <led_specan+0xf6>
    7d82:	2b00      	cmp	r3, #0
    7d84:	d000      	beq.n	7d88 <led_specan+0xe4>
    7d86:	e021      	b.n	7dcc <led_specan+0x128>
                case 0:
                    TXLED_SET;
    7d88:	4b27      	ldr	r3, [pc, #156]	; (7e28 <led_specan+0x184>)
    7d8a:	f44f 7280 	mov.w	r2, #256	; 0x100
    7d8e:	601a      	str	r2, [r3, #0]
                    break;
    7d90:	e007      	b.n	7da2 <led_specan+0xfe>
                case 1:
                    RXLED_SET;
    7d92:	4b25      	ldr	r3, [pc, #148]	; (7e28 <led_specan+0x184>)
    7d94:	2210      	movs	r2, #16
    7d96:	601a      	str	r2, [r3, #0]
                    break;
    7d98:	e003      	b.n	7da2 <led_specan+0xfe>
                case 2:
                    USRLED_SET;
    7d9a:	4b23      	ldr	r3, [pc, #140]	; (7e28 <led_specan+0x184>)
    7d9c:	2202      	movs	r2, #2
    7d9e:	601a      	str	r2, [r3, #0]
                    break;
    7da0:	bf00      	nop
    7da2:	e013      	b.n	7dcc <led_specan+0x128>
            }
        }
        else {
            switch (i) {
    7da4:	7bfb      	ldrb	r3, [r7, #15]
    7da6:	2b01      	cmp	r3, #1
    7da8:	d008      	beq.n	7dbc <led_specan+0x118>
    7daa:	2b02      	cmp	r3, #2
    7dac:	d00a      	beq.n	7dc4 <led_specan+0x120>
    7dae:	2b00      	cmp	r3, #0
    7db0:	d10c      	bne.n	7dcc <led_specan+0x128>
                case 0:
                    TXLED_CLR;
    7db2:	4b1e      	ldr	r3, [pc, #120]	; (7e2c <led_specan+0x188>)
    7db4:	f44f 7280 	mov.w	r2, #256	; 0x100
    7db8:	601a      	str	r2, [r3, #0]
                    break;
    7dba:	e007      	b.n	7dcc <led_specan+0x128>
                case 1:
                    RXLED_CLR;
    7dbc:	4b1b      	ldr	r3, [pc, #108]	; (7e2c <led_specan+0x188>)
    7dbe:	2210      	movs	r2, #16
    7dc0:	601a      	str	r2, [r3, #0]
                    break;
    7dc2:	e003      	b.n	7dcc <led_specan+0x128>
                case 2:
                    USRLED_CLR;
    7dc4:	4b19      	ldr	r3, [pc, #100]	; (7e2c <led_specan+0x188>)
    7dc6:	2202      	movs	r2, #2
    7dc8:	601a      	str	r2, [r3, #0]
                    break;
    7dca:	bf00      	nop
            }
        }

		i = (i+1) % 3;
    7dcc:	7bfb      	ldrb	r3, [r7, #15]
    7dce:	1c5a      	adds	r2, r3, #1
    7dd0:	4b17      	ldr	r3, [pc, #92]	; (7e30 <led_specan+0x18c>)
    7dd2:	fb83 3102 	smull	r3, r1, r3, r2
    7dd6:	17d3      	asrs	r3, r2, #31
    7dd8:	1ac9      	subs	r1, r1, r3
    7dda:	460b      	mov	r3, r1
    7ddc:	005b      	lsls	r3, r3, #1
    7dde:	440b      	add	r3, r1
    7de0:	1ad1      	subs	r1, r2, r3
    7de2:	460b      	mov	r3, r1
    7de4:	73fb      	strb	r3, [r7, #15]

		handle_usb(clkn);
    7de6:	4b13      	ldr	r3, [pc, #76]	; (7e34 <led_specan+0x190>)
    7de8:	681b      	ldr	r3, [r3, #0]
    7dea:	4618      	mov	r0, r3
    7dec:	f000 fca2 	bl	8734 <handle_usb>
        //wait(1);
		cc2400_strobe(SRFOFF);
    7df0:	2064      	movs	r0, #100	; 0x64
    7df2:	f001 ff39 	bl	9c68 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    7df6:	bf00      	nop
    7df8:	f001 ff2c 	bl	9c54 <cc2400_status>
    7dfc:	4603      	mov	r3, r0
    7dfe:	f003 0304 	and.w	r3, r3, #4
    7e02:	2b00      	cmp	r3, #0
    7e04:	d1f8      	bne.n	7df8 <led_specan+0x154>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols

	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_LED_SPECAN) {
    7e06:	4b0c      	ldr	r3, [pc, #48]	; (7e38 <led_specan+0x194>)
    7e08:	781b      	ldrb	r3, [r3, #0]
    7e0a:	b2db      	uxtb	r3, r3
    7e0c:	2b07      	cmp	r3, #7
    7e0e:	d080      	beq.n	7d12 <led_specan+0x6e>
		handle_usb(clkn);
        //wait(1);
		cc2400_strobe(SRFOFF);
		while ((cc2400_status() & FS_LOCK));
	}
	mode = MODE_IDLE;
    7e10:	4b0a      	ldr	r3, [pc, #40]	; (7e3c <led_specan+0x198>)
    7e12:	2200      	movs	r2, #0
    7e14:	701a      	strb	r2, [r3, #0]
}
    7e16:	3710      	adds	r7, #16
    7e18:	46bd      	mov	sp, r7
    7e1a:	bd80      	pop	{r7, pc}
    7e1c:	0000c0c8 	.word	0x0000c0c8
    7e20:	2009c058 	.word	0x2009c058
    7e24:	100004a2 	.word	0x100004a2
    7e28:	2009c038 	.word	0x2009c038
    7e2c:	2009c03c 	.word	0x2009c03c
    7e30:	55555556 	.word	0x55555556
    7e34:	10000be4 	.word	0x10000be4
    7e38:	10000a3f 	.word	0x10000a3f
    7e3c:	10000a3e 	.word	0x10000a3e

00007e40 <main>:

int main()
{
    7e40:	b580      	push	{r7, lr}
    7e42:	af00      	add	r7, sp, #0
	ubertooth_init();
    7e44:	f001 fd72 	bl	992c <ubertooth_init>
	clkn_init();
    7e48:	f7fd fa8e 	bl	5368 <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    7e4c:	4842      	ldr	r0, [pc, #264]	; (7f58 <main+0x118>)
    7e4e:	f000 fba9 	bl	85a4 <ubertooth_usb_init>

	while (1) {
		handle_usb(clkn);
    7e52:	4b42      	ldr	r3, [pc, #264]	; (7f5c <main+0x11c>)
    7e54:	681b      	ldr	r3, [r3, #0]
    7e56:	4618      	mov	r0, r3
    7e58:	f000 fc6c 	bl	8734 <handle_usb>
		if(requested_mode != mode)
    7e5c:	4b40      	ldr	r3, [pc, #256]	; (7f60 <main+0x120>)
    7e5e:	781b      	ldrb	r3, [r3, #0]
    7e60:	b2da      	uxtb	r2, r3
    7e62:	4b40      	ldr	r3, [pc, #256]	; (7f64 <main+0x124>)
    7e64:	781b      	ldrb	r3, [r3, #0]
    7e66:	b2db      	uxtb	r3, r3
    7e68:	429a      	cmp	r2, r3
    7e6a:	d074      	beq.n	7f56 <main+0x116>
			switch (requested_mode) {
    7e6c:	4b3c      	ldr	r3, [pc, #240]	; (7f60 <main+0x120>)
    7e6e:	781b      	ldrb	r3, [r3, #0]
    7e70:	b2db      	uxtb	r3, r3
    7e72:	2b0d      	cmp	r3, #13
    7e74:	d86e      	bhi.n	7f54 <main+0x114>
    7e76:	a201      	add	r2, pc, #4	; (adr r2, 7e7c <main+0x3c>)
    7e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7e7c:	00007f4f 	.word	0x00007f4f
    7e80:	00007ec1 	.word	0x00007ec1
    7e84:	00007f55 	.word	0x00007f55
    7e88:	00007eeb 	.word	0x00007eeb
    7e8c:	00007f2f 	.word	0x00007f2f
    7e90:	00007efb 	.word	0x00007efb
    7e94:	00007f21 	.word	0x00007f21
    7e98:	00007f35 	.word	0x00007f35
    7e9c:	00007ecd 	.word	0x00007ecd
    7ea0:	00007ed9 	.word	0x00007ed9
    7ea4:	00007edf 	.word	0x00007edf
    7ea8:	00007eb5 	.word	0x00007eb5
    7eac:	00007ee5 	.word	0x00007ee5
    7eb0:	00007f3b 	.word	0x00007f3b
				 case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    7eb4:	2001      	movs	r0, #1
    7eb6:	f001 fc31 	bl	971c <wait>
					reset();
    7eba:	f001 ffdf 	bl	9e7c <reset>
					break;
    7ebe:	e04a      	b.n	7f56 <main+0x116>
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    7ec0:	4b28      	ldr	r3, [pc, #160]	; (7f64 <main+0x124>)
    7ec2:	2201      	movs	r2, #1
    7ec4:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    7ec6:	f7fe f9cf 	bl	6268 <bt_stream_rx>
					break;
    7eca:	e044      	b.n	7f56 <main+0x116>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    7ecc:	4b25      	ldr	r3, [pc, #148]	; (7f64 <main+0x124>)
    7ece:	2208      	movs	r2, #8
    7ed0:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    7ed2:	f7fe f9c9 	bl	6268 <bt_stream_rx>
					break;
    7ed6:	e03e      	b.n	7f56 <main+0x116>
				case MODE_BT_FOLLOW_LE:
					bt_follow_le();
    7ed8:	f7ff f96e 	bl	71b8 <bt_follow_le>
					break;
    7edc:	e03b      	b.n	7f56 <main+0x116>
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    7ede:	f7ff fd55 	bl	798c <bt_promisc_le>
					break;
    7ee2:	e038      	b.n	7f56 <main+0x116>
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
    7ee4:	f7ff fd96 	bl	7a14 <bt_slave_le>
					break;
    7ee8:	e035      	b.n	7f56 <main+0x116>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    7eea:	4b1e      	ldr	r3, [pc, #120]	; (7f64 <main+0x124>)
    7eec:	2203      	movs	r2, #3
    7eee:	701a      	strb	r2, [r3, #0]
					cc2400_txtest(&modulation, &channel);
    7ef0:	481d      	ldr	r0, [pc, #116]	; (7f68 <main+0x128>)
    7ef2:	491e      	ldr	r1, [pc, #120]	; (7f6c <main+0x12c>)
    7ef4:	f000 ff92 	bl	8e1c <cc2400_txtest>
					break;
    7ef8:	e02d      	b.n	7f56 <main+0x116>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    7efa:	4b1a      	ldr	r3, [pc, #104]	; (7f64 <main+0x124>)
    7efc:	2205      	movs	r2, #5
    7efe:	701a      	strb	r2, [r3, #0]
					cc2400_rangetest(&channel);
    7f00:	481a      	ldr	r0, [pc, #104]	; (7f6c <main+0x12c>)
    7f02:	f000 fc35 	bl	8770 <cc2400_rangetest>
					mode = MODE_IDLE;
    7f06:	4b17      	ldr	r3, [pc, #92]	; (7f64 <main+0x124>)
    7f08:	2200      	movs	r2, #0
    7f0a:	701a      	strb	r2, [r3, #0]
					if (requested_mode == MODE_RANGE_TEST)
    7f0c:	4b14      	ldr	r3, [pc, #80]	; (7f60 <main+0x120>)
    7f0e:	781b      	ldrb	r3, [r3, #0]
    7f10:	b2db      	uxtb	r3, r3
    7f12:	2b05      	cmp	r3, #5
    7f14:	d103      	bne.n	7f1e <main+0xde>
						requested_mode = MODE_IDLE;
    7f16:	4b12      	ldr	r3, [pc, #72]	; (7f60 <main+0x120>)
    7f18:	2200      	movs	r2, #0
    7f1a:	701a      	strb	r2, [r3, #0]
					break;
    7f1c:	e01b      	b.n	7f56 <main+0x116>
    7f1e:	e01a      	b.n	7f56 <main+0x116>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    7f20:	4b10      	ldr	r3, [pc, #64]	; (7f64 <main+0x124>)
    7f22:	2206      	movs	r2, #6
    7f24:	701a      	strb	r2, [r3, #0]
					cc2400_repeater(&channel);
    7f26:	4811      	ldr	r0, [pc, #68]	; (7f6c <main+0x12c>)
    7f28:	f000 fe40 	bl	8bac <cc2400_repeater>
					break;
    7f2c:	e013      	b.n	7f56 <main+0x116>
				case MODE_SPECAN:
					specan();
    7f2e:	f7ff fded 	bl	7b0c <specan>
					break;
    7f32:	e010      	b.n	7f56 <main+0x116>
				case MODE_LED_SPECAN:
					led_specan();
    7f34:	f7ff feb6 	bl	7ca4 <led_specan>
					break;
    7f38:	e00d      	b.n	7f56 <main+0x116>
				case MODE_EGO:
					mode = MODE_EGO;
    7f3a:	4b0a      	ldr	r3, [pc, #40]	; (7f64 <main+0x124>)
    7f3c:	220d      	movs	r2, #13
    7f3e:	701a      	strb	r2, [r3, #0]
					ego_main(ego_mode);
    7f40:	4b0b      	ldr	r3, [pc, #44]	; (7f70 <main+0x130>)
    7f42:	781b      	ldrb	r3, [r3, #0]
    7f44:	b2db      	uxtb	r3, r3
    7f46:	4618      	mov	r0, r3
    7f48:	f001 fb36 	bl	95b8 <ego_main>
					break;
    7f4c:	e003      	b.n	7f56 <main+0x116>
				case MODE_IDLE:
					cc2400_idle();
    7f4e:	f7fd fddf 	bl	5b10 <cc2400_idle>
					break;
    7f52:	e000      	b.n	7f56 <main+0x116>
				default:
					/* This is really an error state, but what can you do? */
					break;
    7f54:	bf00      	nop
			}
	}
    7f56:	e77c      	b.n	7e52 <main+0x12>
    7f58:	0000487d 	.word	0x0000487d
    7f5c:	10000be4 	.word	0x10000be4
    7f60:	10000a3f 	.word	0x10000a3f
    7f64:	10000a3e 	.word	0x10000a3e
    7f68:	10000a42 	.word	0x10000a42
    7f6c:	1000049c 	.word	0x1000049c
    7f70:	10000a41 	.word	0x10000a41

00007f74 <perm5>:
	}
}

/* 5 bit permutation */
u8 perm5(u8 z, u8 p_high, u16 p_low)
{
    7f74:	b490      	push	{r4, r7}
    7f76:	b092      	sub	sp, #72	; 0x48
    7f78:	af00      	add	r7, sp, #0
    7f7a:	4603      	mov	r3, r0
    7f7c:	71fb      	strb	r3, [r7, #7]
    7f7e:	460b      	mov	r3, r1
    7f80:	71bb      	strb	r3, [r7, #6]
    7f82:	4613      	mov	r3, r2
    7f84:	80bb      	strh	r3, [r7, #4]
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
    7f86:	79fb      	ldrb	r3, [r7, #7]
    7f88:	f003 031f 	and.w	r3, r3, #31
    7f8c:	71fb      	strb	r3, [r7, #7]
	p_high &= 0x1f;
    7f8e:	79bb      	ldrb	r3, [r7, #6]
    7f90:	f003 031f 	and.w	r3, r3, #31
    7f94:	71bb      	strb	r3, [r7, #6]
	p_low &= 0x1ff;
    7f96:	88bb      	ldrh	r3, [r7, #4]
    7f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
    7f9c:	80bb      	strh	r3, [r7, #4]

	int i;
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
    7f9e:	4a5c      	ldr	r2, [pc, #368]	; (8110 <perm5+0x19c>)
    7fa0:	f107 031c 	add.w	r3, r7, #28
    7fa4:	4614      	mov	r4, r2
    7fa6:	6820      	ldr	r0, [r4, #0]
    7fa8:	6861      	ldr	r1, [r4, #4]
    7faa:	68a2      	ldr	r2, [r4, #8]
    7fac:	c307      	stmia	r3!, {r0, r1, r2}
    7fae:	89a2      	ldrh	r2, [r4, #12]
    7fb0:	801a      	strh	r2, [r3, #0]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};
    7fb2:	4a58      	ldr	r2, [pc, #352]	; (8114 <perm5+0x1a0>)
    7fb4:	f107 030c 	add.w	r3, r7, #12
    7fb8:	4614      	mov	r4, r2
    7fba:	6820      	ldr	r0, [r4, #0]
    7fbc:	6861      	ldr	r1, [r4, #4]
    7fbe:	68a2      	ldr	r2, [r4, #8]
    7fc0:	c307      	stmia	r3!, {r0, r1, r2}
    7fc2:	89a2      	ldrh	r2, [r4, #12]
    7fc4:	801a      	strh	r2, [r3, #0]

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    7fc6:	2300      	movs	r3, #0
    7fc8:	647b      	str	r3, [r7, #68]	; 0x44
    7fca:	e010      	b.n	7fee <perm5+0x7a>
		p[i] = (p_low >> i) & 0x01;
    7fcc:	88ba      	ldrh	r2, [r7, #4]
    7fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7fd0:	fa42 f303 	asr.w	r3, r2, r3
    7fd4:	b2db      	uxtb	r3, r3
    7fd6:	f003 0301 	and.w	r3, r3, #1
    7fda:	b2d9      	uxtb	r1, r3
    7fdc:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    7fe0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7fe2:	4413      	add	r3, r2
    7fe4:	460a      	mov	r2, r1
    7fe6:	701a      	strb	r2, [r3, #0]
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    7fe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7fea:	3301      	adds	r3, #1
    7fec:	647b      	str	r3, [r7, #68]	; 0x44
    7fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7ff0:	2b08      	cmp	r3, #8
    7ff2:	ddeb      	ble.n	7fcc <perm5+0x58>
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    7ff4:	2300      	movs	r3, #0
    7ff6:	647b      	str	r3, [r7, #68]	; 0x44
    7ff8:	e011      	b.n	801e <perm5+0xaa>
		p[i+9] = (p_high >> i) & 0x01;
    7ffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7ffc:	3309      	adds	r3, #9
    7ffe:	79b9      	ldrb	r1, [r7, #6]
    8000:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    8002:	fa41 f202 	asr.w	r2, r1, r2
    8006:	b2d2      	uxtb	r2, r2
    8008:	f002 0201 	and.w	r2, r2, #1
    800c:	b2d2      	uxtb	r2, r2
    800e:	f107 0148 	add.w	r1, r7, #72	; 0x48
    8012:	440b      	add	r3, r1
    8014:	f803 2c1c 	strb.w	r2, [r3, #-28]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    8018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    801a:	3301      	adds	r3, #1
    801c:	647b      	str	r3, [r7, #68]	; 0x44
    801e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8020:	2b04      	cmp	r3, #4
    8022:	ddea      	ble.n	7ffa <perm5+0x86>
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    8024:	2300      	movs	r3, #0
    8026:	647b      	str	r3, [r7, #68]	; 0x44
    8028:	e010      	b.n	804c <perm5+0xd8>
		z_bit[i] = (z >> i) & 0x01;
    802a:	79fa      	ldrb	r2, [r7, #7]
    802c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    802e:	fa42 f303 	asr.w	r3, r2, r3
    8032:	b2db      	uxtb	r3, r3
    8034:	f003 0301 	and.w	r3, r3, #1
    8038:	b2d9      	uxtb	r1, r3
    803a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    803e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8040:	4413      	add	r3, r2
    8042:	460a      	mov	r2, r1
    8044:	701a      	strb	r2, [r3, #0]
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    8046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8048:	3301      	adds	r3, #1
    804a:	647b      	str	r3, [r7, #68]	; 0x44
    804c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    804e:	2b04      	cmp	r3, #4
    8050:	ddeb      	ble.n	802a <perm5+0xb6>
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    8052:	230d      	movs	r3, #13
    8054:	647b      	str	r3, [r7, #68]	; 0x44
    8056:	e036      	b.n	80c6 <perm5+0x152>
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
    8058:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    805c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    805e:	4413      	add	r3, r2
    8060:	781b      	ldrb	r3, [r3, #0]
    8062:	2b00      	cmp	r3, #0
    8064:	d02c      	beq.n	80c0 <perm5+0x14c>
			tmp = z_bit[index1[i]];
    8066:	f107 021c 	add.w	r2, r7, #28
    806a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    806c:	4413      	add	r3, r2
    806e:	781b      	ldrb	r3, [r3, #0]
    8070:	f107 0248 	add.w	r2, r7, #72	; 0x48
    8074:	4413      	add	r3, r2
    8076:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    807a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			z_bit[index1[i]] = z_bit[index2[i]];
    807e:	f107 021c 	add.w	r2, r7, #28
    8082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8084:	4413      	add	r3, r2
    8086:	781b      	ldrb	r3, [r3, #0]
    8088:	4619      	mov	r1, r3
    808a:	f107 020c 	add.w	r2, r7, #12
    808e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8090:	4413      	add	r3, r2
    8092:	781b      	ldrb	r3, [r3, #0]
    8094:	f107 0248 	add.w	r2, r7, #72	; 0x48
    8098:	4413      	add	r3, r2
    809a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
    809e:	f107 0348 	add.w	r3, r7, #72	; 0x48
    80a2:	440b      	add	r3, r1
    80a4:	f803 2c0c 	strb.w	r2, [r3, #-12]
			z_bit[index2[i]] = tmp;
    80a8:	f107 020c 	add.w	r2, r7, #12
    80ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    80ae:	4413      	add	r3, r2
    80b0:	781b      	ldrb	r3, [r3, #0]
    80b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
    80b6:	4413      	add	r3, r2
    80b8:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
    80bc:	f803 2c0c 	strb.w	r2, [r3, #-12]
	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    80c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    80c2:	3b01      	subs	r3, #1
    80c4:	647b      	str	r3, [r7, #68]	; 0x44
    80c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    80c8:	2b00      	cmp	r3, #0
    80ca:	dac5      	bge.n	8058 <perm5+0xe4>
			z_bit[index2[i]] = tmp;
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
    80cc:	2300      	movs	r3, #0
    80ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	for (i = 0; i < 5; i++)
    80d2:	2300      	movs	r3, #0
    80d4:	647b      	str	r3, [r7, #68]	; 0x44
    80d6:	e011      	b.n	80fc <perm5+0x188>
		output += z_bit[i] << i;
    80d8:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    80dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    80de:	4413      	add	r3, r2
    80e0:	781b      	ldrb	r3, [r3, #0]
    80e2:	461a      	mov	r2, r3
    80e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    80e6:	fa02 f303 	lsl.w	r3, r2, r3
    80ea:	b2da      	uxtb	r2, r3
    80ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    80f0:	4413      	add	r3, r2
    80f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    80f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    80f8:	3301      	adds	r3, #1
    80fa:	647b      	str	r3, [r7, #68]	; 0x44
    80fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    80fe:	2b04      	cmp	r3, #4
    8100:	ddea      	ble.n	80d8 <perm5+0x164>
		output += z_bit[i] << i;

	return output;
    8102:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
}
    8106:	4618      	mov	r0, r3
    8108:	3748      	adds	r7, #72	; 0x48
    810a:	46bd      	mov	sp, r7
    810c:	bc90      	pop	{r4, r7}
    810e:	4770      	bx	lr
    8110:	0000c0d0 	.word	0x0000c0d0
    8114:	0000c0e0 	.word	0x0000c0e0

00008118 <next_hop>:

u16 next_hop(u32 clock)
{
    8118:	b580      	push	{r7, lr}
    811a:	b08a      	sub	sp, #40	; 0x28
    811c:	af00      	add	r7, sp, #0
    811e:	6078      	str	r0, [r7, #4]
	u16 d, y2;
	u32 base_f, f, f_dash;

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
    8120:	687b      	ldr	r3, [r7, #4]
    8122:	089b      	lsrs	r3, r3, #2
    8124:	b2db      	uxtb	r3, r3
    8126:	f003 031f 	and.w	r3, r3, #31
    812a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	y1 = (clock >> 1) & 0x01;
    812e:	687b      	ldr	r3, [r7, #4]
    8130:	085b      	lsrs	r3, r3, #1
    8132:	b2db      	uxtb	r3, r3
    8134:	f003 0301 	and.w	r3, r3, #1
    8138:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	y2 = y1 << 5;
    813c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    8140:	b29b      	uxth	r3, r3
    8142:	015b      	lsls	r3, r3, #5
    8144:	847b      	strh	r3, [r7, #34]	; 0x22
	a = (a1 ^ (clock >> 21)) & 0x1f;
    8146:	687b      	ldr	r3, [r7, #4]
    8148:	0d5b      	lsrs	r3, r3, #21
    814a:	b2da      	uxtb	r2, r3
    814c:	4b4b      	ldr	r3, [pc, #300]	; (827c <next_hop+0x164>)
    814e:	781b      	ldrb	r3, [r3, #0]
    8150:	4053      	eors	r3, r2
    8152:	b2db      	uxtb	r3, r3
    8154:	f003 031f 	and.w	r3, r3, #31
    8158:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    815c:	687b      	ldr	r3, [r7, #4]
    815e:	0c1b      	lsrs	r3, r3, #16
    8160:	b2da      	uxtb	r2, r3
    8162:	4b47      	ldr	r3, [pc, #284]	; (8280 <next_hop+0x168>)
    8164:	781b      	ldrb	r3, [r3, #0]
    8166:	4053      	eors	r3, r2
    8168:	b2db      	uxtb	r3, r3
    816a:	f003 031f 	and.w	r3, r3, #31
    816e:	f887 3020 	strb.w	r3, [r7, #32]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    8172:	687b      	ldr	r3, [r7, #4]
    8174:	09db      	lsrs	r3, r3, #7
    8176:	b29a      	uxth	r2, r3
    8178:	4b42      	ldr	r3, [pc, #264]	; (8284 <next_hop+0x16c>)
    817a:	881b      	ldrh	r3, [r3, #0]
    817c:	4053      	eors	r3, r2
    817e:	b29b      	uxth	r3, r3
    8180:	f3c3 0308 	ubfx	r3, r3, #0, #9
    8184:	83fb      	strh	r3, [r7, #30]
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    8186:	687b      	ldr	r3, [r7, #4]
    8188:	08db      	lsrs	r3, r3, #3
    818a:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    818e:	f023 030f 	bic.w	r3, r3, #15
    8192:	61bb      	str	r3, [r7, #24]
	f = base_f % 79;
    8194:	69b9      	ldr	r1, [r7, #24]
    8196:	4b3c      	ldr	r3, [pc, #240]	; (8288 <next_hop+0x170>)
    8198:	fba3 2301 	umull	r2, r3, r3, r1
    819c:	099a      	lsrs	r2, r3, #6
    819e:	4613      	mov	r3, r2
    81a0:	009b      	lsls	r3, r3, #2
    81a2:	4413      	add	r3, r2
    81a4:	011b      	lsls	r3, r3, #4
    81a6:	1a9b      	subs	r3, r3, r2
    81a8:	1acb      	subs	r3, r1, r3
    81aa:	617b      	str	r3, [r7, #20]

	perm = perm5(
    81ac:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    81b0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    81b4:	4413      	add	r3, r2
    81b6:	b2db      	uxtb	r3, r3
    81b8:	b2db      	uxtb	r3, r3
    81ba:	f003 031f 	and.w	r3, r3, #31
    81be:	b2da      	uxtb	r2, r3
    81c0:	4b32      	ldr	r3, [pc, #200]	; (828c <next_hop+0x174>)
    81c2:	781b      	ldrb	r3, [r3, #0]
    81c4:	b2db      	uxtb	r3, r3
    81c6:	4053      	eors	r3, r2
    81c8:	b2db      	uxtb	r3, r3
    81ca:	b2d9      	uxtb	r1, r3
    81cc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    81d0:	461a      	mov	r2, r3
    81d2:	0152      	lsls	r2, r2, #5
    81d4:	1ad3      	subs	r3, r2, r3
    81d6:	b2db      	uxtb	r3, r3
    81d8:	b2da      	uxtb	r2, r3
    81da:	f897 3020 	ldrb.w	r3, [r7, #32]
    81de:	4053      	eors	r3, r2
    81e0:	b2db      	uxtb	r3, r3
    81e2:	b2da      	uxtb	r2, r3
    81e4:	8bfb      	ldrh	r3, [r7, #30]
    81e6:	4608      	mov	r0, r1
    81e8:	4611      	mov	r1, r2
    81ea:	461a      	mov	r2, r3
    81ec:	f7ff fec2 	bl	7f74 <perm5>
    81f0:	4603      	mov	r3, r0
    81f2:	74fb      	strb	r3, [r7, #19]
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % CHANNELS];
    81f4:	7cfb      	ldrb	r3, [r7, #19]
    81f6:	4a26      	ldr	r2, [pc, #152]	; (8290 <next_hop+0x178>)
    81f8:	7812      	ldrb	r2, [r2, #0]
    81fa:	4413      	add	r3, r2
    81fc:	461a      	mov	r2, r3
    81fe:	697b      	ldr	r3, [r7, #20]
    8200:	441a      	add	r2, r3
    8202:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    8204:	18d1      	adds	r1, r2, r3
    8206:	4b20      	ldr	r3, [pc, #128]	; (8288 <next_hop+0x170>)
    8208:	fba3 2301 	umull	r2, r3, r3, r1
    820c:	099a      	lsrs	r2, r3, #6
    820e:	4613      	mov	r3, r2
    8210:	009b      	lsls	r3, r3, #2
    8212:	4413      	add	r3, r2
    8214:	011b      	lsls	r3, r3, #4
    8216:	1a9b      	subs	r3, r3, r2
    8218:	1aca      	subs	r2, r1, r3
    821a:	4b1e      	ldr	r3, [pc, #120]	; (8294 <next_hop+0x17c>)
    821c:	5c9b      	ldrb	r3, [r3, r2]
    821e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(afh_enabled) {
    8222:	4b1d      	ldr	r3, [pc, #116]	; (8298 <next_hop+0x180>)
    8224:	781b      	ldrb	r3, [r3, #0]
    8226:	2b00      	cmp	r3, #0
    8228:	d01d      	beq.n	8266 <next_hop+0x14e>
		f_dash = base_f % used_channels;
    822a:	4b1c      	ldr	r3, [pc, #112]	; (829c <next_hop+0x184>)
    822c:	781b      	ldrb	r3, [r3, #0]
    822e:	461a      	mov	r2, r3
    8230:	69bb      	ldr	r3, [r7, #24]
    8232:	fbb3 f1f2 	udiv	r1, r3, r2
    8236:	fb02 f201 	mul.w	r2, r2, r1
    823a:	1a9b      	subs	r3, r3, r2
    823c:	60fb      	str	r3, [r7, #12]
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    823e:	7cfb      	ldrb	r3, [r7, #19]
    8240:	4a13      	ldr	r2, [pc, #76]	; (8290 <next_hop+0x178>)
    8242:	7812      	ldrb	r2, [r2, #0]
    8244:	4413      	add	r3, r2
    8246:	461a      	mov	r2, r3
    8248:	68fb      	ldr	r3, [r7, #12]
    824a:	441a      	add	r2, r3
    824c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    824e:	4413      	add	r3, r2
    8250:	4a12      	ldr	r2, [pc, #72]	; (829c <next_hop+0x184>)
    8252:	7812      	ldrb	r2, [r2, #0]
    8254:	fbb3 f1f2 	udiv	r1, r3, r2
    8258:	fb02 f201 	mul.w	r2, r2, r1
    825c:	1a9b      	subs	r3, r3, r2
    825e:	4a10      	ldr	r2, [pc, #64]	; (82a0 <next_hop+0x188>)
    8260:	5cd3      	ldrb	r3, [r2, r3]
    8262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return (2402 + next_channel);
    8266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    826a:	b29b      	uxth	r3, r3
    826c:	f603 1362 	addw	r3, r3, #2402	; 0x962
    8270:	b29b      	uxth	r3, r3

}
    8272:	4618      	mov	r0, r3
    8274:	3728      	adds	r7, #40	; 0x28
    8276:	46bd      	mov	sp, r7
    8278:	bd80      	pop	{r7, pc}
    827a:	bf00      	nop
    827c:	1000111b 	.word	0x1000111b
    8280:	1000111c 	.word	0x1000111c
    8284:	100010ca 	.word	0x100010ca
    8288:	cf6474a9 	.word	0xcf6474a9
    828c:	100010c8 	.word	0x100010c8
    8290:	1000116f 	.word	0x1000116f
    8294:	10001120 	.word	0x10001120
    8298:	10001024 	.word	0x10001024
    829c:	100010c9 	.word	0x100010c9
    82a0:	100010cc 	.word	0x100010cc

000082a4 <btle_next_hop>:

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    82a4:	b580      	push	{r7, lr}
    82a6:	b084      	sub	sp, #16
    82a8:	af00      	add	r7, sp, #0
    82aa:	6078      	str	r0, [r7, #4]
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    82ac:	687b      	ldr	r3, [r7, #4]
    82ae:	7d5b      	ldrb	r3, [r3, #21]
    82b0:	4618      	mov	r0, r3
    82b2:	f000 f84b 	bl	834c <btle_channel_index_to_phys>
    82b6:	4603      	mov	r3, r0
    82b8:	81fb      	strh	r3, [r7, #14]
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    82ba:	687b      	ldr	r3, [r7, #4]
    82bc:	7d5b      	ldrb	r3, [r3, #21]
    82be:	461a      	mov	r2, r3
    82c0:	687b      	ldr	r3, [r7, #4]
    82c2:	7d9b      	ldrb	r3, [r3, #22]
    82c4:	441a      	add	r2, r3
    82c6:	4b0a      	ldr	r3, [pc, #40]	; (82f0 <btle_next_hop+0x4c>)
    82c8:	fb82 0103 	smull	r0, r1, r2, r3
    82cc:	1853      	adds	r3, r2, r1
    82ce:	1159      	asrs	r1, r3, #5
    82d0:	17d3      	asrs	r3, r2, #31
    82d2:	1ac9      	subs	r1, r1, r3
    82d4:	460b      	mov	r3, r1
    82d6:	00db      	lsls	r3, r3, #3
    82d8:	440b      	add	r3, r1
    82da:	009b      	lsls	r3, r3, #2
    82dc:	440b      	add	r3, r1
    82de:	1ad1      	subs	r1, r2, r3
    82e0:	b2ca      	uxtb	r2, r1
    82e2:	687b      	ldr	r3, [r7, #4]
    82e4:	755a      	strb	r2, [r3, #21]
	return phys;
    82e6:	89fb      	ldrh	r3, [r7, #14]
}
    82e8:	4618      	mov	r0, r3
    82ea:	3710      	adds	r7, #16
    82ec:	46bd      	mov	sp, r7
    82ee:	bd80      	pop	{r7, pc}
    82f0:	dd67c8a7 	.word	0xdd67c8a7

000082f4 <btle_channel_index>:

u32 received_data = 0;

u8 btle_channel_index(u8 channel) {
    82f4:	b480      	push	{r7}
    82f6:	b085      	sub	sp, #20
    82f8:	af00      	add	r7, sp, #0
    82fa:	4603      	mov	r3, r0
    82fc:	71fb      	strb	r3, [r7, #7]
	u8 idx;
	channel /= 2;
    82fe:	79fb      	ldrb	r3, [r7, #7]
    8300:	085b      	lsrs	r3, r3, #1
    8302:	71fb      	strb	r3, [r7, #7]
	if (channel == 0)
    8304:	79fb      	ldrb	r3, [r7, #7]
    8306:	2b00      	cmp	r3, #0
    8308:	d102      	bne.n	8310 <btle_channel_index+0x1c>
		idx = 37;
    830a:	2325      	movs	r3, #37	; 0x25
    830c:	73fb      	strb	r3, [r7, #15]
    830e:	e015      	b.n	833c <btle_channel_index+0x48>
	else if (channel < 12)
    8310:	79fb      	ldrb	r3, [r7, #7]
    8312:	2b0b      	cmp	r3, #11
    8314:	d803      	bhi.n	831e <btle_channel_index+0x2a>
		idx = channel - 1;
    8316:	79fb      	ldrb	r3, [r7, #7]
    8318:	3b01      	subs	r3, #1
    831a:	73fb      	strb	r3, [r7, #15]
    831c:	e00e      	b.n	833c <btle_channel_index+0x48>
	else if (channel == 12)
    831e:	79fb      	ldrb	r3, [r7, #7]
    8320:	2b0c      	cmp	r3, #12
    8322:	d102      	bne.n	832a <btle_channel_index+0x36>
		idx = 38;
    8324:	2326      	movs	r3, #38	; 0x26
    8326:	73fb      	strb	r3, [r7, #15]
    8328:	e008      	b.n	833c <btle_channel_index+0x48>
	else if (channel < 39)
    832a:	79fb      	ldrb	r3, [r7, #7]
    832c:	2b26      	cmp	r3, #38	; 0x26
    832e:	d803      	bhi.n	8338 <btle_channel_index+0x44>
		idx = channel - 2;
    8330:	79fb      	ldrb	r3, [r7, #7]
    8332:	3b02      	subs	r3, #2
    8334:	73fb      	strb	r3, [r7, #15]
    8336:	e001      	b.n	833c <btle_channel_index+0x48>
	else
		idx = 39;
    8338:	2327      	movs	r3, #39	; 0x27
    833a:	73fb      	strb	r3, [r7, #15]
	return idx;
    833c:	7bfb      	ldrb	r3, [r7, #15]
}
    833e:	4618      	mov	r0, r3
    8340:	3714      	adds	r7, #20
    8342:	46bd      	mov	sp, r7
    8344:	f85d 7b04 	ldr.w	r7, [sp], #4
    8348:	4770      	bx	lr
    834a:	bf00      	nop

0000834c <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
    834c:	b480      	push	{r7}
    834e:	b085      	sub	sp, #20
    8350:	af00      	add	r7, sp, #0
    8352:	4603      	mov	r3, r0
    8354:	71fb      	strb	r3, [r7, #7]
	u16 phys;
	if (idx < 11)
    8356:	79fb      	ldrb	r3, [r7, #7]
    8358:	2b0a      	cmp	r3, #10
    835a:	d806      	bhi.n	836a <btle_channel_index_to_phys+0x1e>
		phys = 2404 + 2 * idx;
    835c:	79fb      	ldrb	r3, [r7, #7]
    835e:	f203 43b2 	addw	r3, r3, #1202	; 0x4b2
    8362:	b29b      	uxth	r3, r3
    8364:	005b      	lsls	r3, r3, #1
    8366:	81fb      	strh	r3, [r7, #14]
    8368:	e01a      	b.n	83a0 <btle_channel_index_to_phys+0x54>
	else if (idx < 37)
    836a:	79fb      	ldrb	r3, [r7, #7]
    836c:	2b24      	cmp	r3, #36	; 0x24
    836e:	d806      	bhi.n	837e <btle_channel_index_to_phys+0x32>
		phys = 2428 + 2 * (idx - 11);
    8370:	79fb      	ldrb	r3, [r7, #7]
    8372:	f203 43b3 	addw	r3, r3, #1203	; 0x4b3
    8376:	b29b      	uxth	r3, r3
    8378:	005b      	lsls	r3, r3, #1
    837a:	81fb      	strh	r3, [r7, #14]
    837c:	e010      	b.n	83a0 <btle_channel_index_to_phys+0x54>
	else if (idx == 37)
    837e:	79fb      	ldrb	r3, [r7, #7]
    8380:	2b25      	cmp	r3, #37	; 0x25
    8382:	d103      	bne.n	838c <btle_channel_index_to_phys+0x40>
		phys = 2402;
    8384:	f640 1362 	movw	r3, #2402	; 0x962
    8388:	81fb      	strh	r3, [r7, #14]
    838a:	e009      	b.n	83a0 <btle_channel_index_to_phys+0x54>
	else if (idx == 38)
    838c:	79fb      	ldrb	r3, [r7, #7]
    838e:	2b26      	cmp	r3, #38	; 0x26
    8390:	d103      	bne.n	839a <btle_channel_index_to_phys+0x4e>
		phys = 2426;
    8392:	f640 137a 	movw	r3, #2426	; 0x97a
    8396:	81fb      	strh	r3, [r7, #14]
    8398:	e002      	b.n	83a0 <btle_channel_index_to_phys+0x54>
	else
		phys = 2480;
    839a:	f44f 631b 	mov.w	r3, #2480	; 0x9b0
    839e:	81fb      	strh	r3, [r7, #14]
	return phys;
    83a0:	89fb      	ldrh	r3, [r7, #14]
}
    83a2:	4618      	mov	r0, r3
    83a4:	3714      	adds	r7, #20
    83a6:	46bd      	mov	sp, r7
    83a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    83ac:	4770      	bx	lr
    83ae:	bf00      	nop

000083b0 <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    83b0:	b480      	push	{r7}
    83b2:	b08b      	sub	sp, #44	; 0x2c
    83b4:	af00      	add	r7, sp, #0
    83b6:	60f8      	str	r0, [r7, #12]
    83b8:	60b9      	str	r1, [r7, #8]
    83ba:	607a      	str	r2, [r7, #4]
	u32 state = crc_init & 0xffffff;
    83bc:	68fb      	ldr	r3, [r7, #12]
    83be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    83c2:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
    83c4:	4b1b      	ldr	r3, [pc, #108]	; (8434 <btle_calc_crc+0x84>)
    83c6:	617b      	str	r3, [r7, #20]
	int i, j;

	for (i = 0; i < len; ++i) {
    83c8:	2300      	movs	r3, #0
    83ca:	623b      	str	r3, [r7, #32]
    83cc:	e027      	b.n	841e <btle_calc_crc+0x6e>
		u8 cur = data[i];
    83ce:	6a3b      	ldr	r3, [r7, #32]
    83d0:	68ba      	ldr	r2, [r7, #8]
    83d2:	4413      	add	r3, r2
    83d4:	781b      	ldrb	r3, [r3, #0]
    83d6:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    83d8:	2300      	movs	r3, #0
    83da:	61fb      	str	r3, [r7, #28]
    83dc:	e019      	b.n	8412 <btle_calc_crc+0x62>
			int next_bit = (state ^ cur) & 1;
    83de:	7efa      	ldrb	r2, [r7, #27]
    83e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    83e2:	4053      	eors	r3, r2
    83e4:	f003 0301 	and.w	r3, r3, #1
    83e8:	613b      	str	r3, [r7, #16]
			cur >>= 1;
    83ea:	7efb      	ldrb	r3, [r7, #27]
    83ec:	085b      	lsrs	r3, r3, #1
    83ee:	76fb      	strb	r3, [r7, #27]
			state >>= 1;
    83f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    83f2:	085b      	lsrs	r3, r3, #1
    83f4:	627b      	str	r3, [r7, #36]	; 0x24
			if (next_bit) {
    83f6:	693b      	ldr	r3, [r7, #16]
    83f8:	2b00      	cmp	r3, #0
    83fa:	d007      	beq.n	840c <btle_calc_crc+0x5c>
				state |= 1 << 23;
    83fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    83fe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    8402:	627b      	str	r3, [r7, #36]	; 0x24
				state ^= lfsr_mask;
    8404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8406:	697b      	ldr	r3, [r7, #20]
    8408:	4053      	eors	r3, r2
    840a:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    840c:	69fb      	ldr	r3, [r7, #28]
    840e:	3301      	adds	r3, #1
    8410:	61fb      	str	r3, [r7, #28]
    8412:	69fb      	ldr	r3, [r7, #28]
    8414:	2b07      	cmp	r3, #7
    8416:	dde2      	ble.n	83de <btle_calc_crc+0x2e>
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    8418:	6a3b      	ldr	r3, [r7, #32]
    841a:	3301      	adds	r3, #1
    841c:	623b      	str	r3, [r7, #32]
    841e:	6a3a      	ldr	r2, [r7, #32]
    8420:	687b      	ldr	r3, [r7, #4]
    8422:	429a      	cmp	r2, r3
    8424:	dbd3      	blt.n	83ce <btle_calc_crc+0x1e>
				state ^= lfsr_mask;
			}
		}
	}

	return state;
    8426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    8428:	4618      	mov	r0, r3
    842a:	372c      	adds	r7, #44	; 0x2c
    842c:	46bd      	mov	sp, r7
    842e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8432:	4770      	bx	lr
    8434:	005a6000 	.word	0x005a6000

00008438 <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    8438:	b480      	push	{r7}
    843a:	b08d      	sub	sp, #52	; 0x34
    843c:	af00      	add	r7, sp, #0
    843e:	60f8      	str	r0, [r7, #12]
    8440:	60b9      	str	r1, [r7, #8]
    8442:	607a      	str	r2, [r7, #4]
	u32 state = crc;
    8444:	68fb      	ldr	r3, [r7, #12]
    8446:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
    8448:	4b2b      	ldr	r3, [pc, #172]	; (84f8 <btle_reverse_crc+0xc0>)
    844a:	61fb      	str	r3, [r7, #28]
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    844c:	687b      	ldr	r3, [r7, #4]
    844e:	3b01      	subs	r3, #1
    8450:	627b      	str	r3, [r7, #36]	; 0x24
    8452:	e02d      	b.n	84b0 <btle_reverse_crc+0x78>
		u8 cur = data[i];
    8454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8456:	68ba      	ldr	r2, [r7, #8]
    8458:	4413      	add	r3, r2
    845a:	781b      	ldrb	r3, [r3, #0]
    845c:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    845e:	2300      	movs	r3, #0
    8460:	623b      	str	r3, [r7, #32]
    8462:	e01f      	b.n	84a4 <btle_reverse_crc+0x6c>
			int top_bit = state >> 23;
    8464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8466:	0ddb      	lsrs	r3, r3, #23
    8468:	617b      	str	r3, [r7, #20]
			state = (state << 1) & 0xffffff;
    846a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    846c:	005b      	lsls	r3, r3, #1
    846e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8472:	62fb      	str	r3, [r7, #44]	; 0x2c
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    8474:	7efa      	ldrb	r2, [r7, #27]
    8476:	6a3b      	ldr	r3, [r7, #32]
    8478:	f1c3 0307 	rsb	r3, r3, #7
    847c:	fa42 f303 	asr.w	r3, r2, r3
    8480:	f003 0201 	and.w	r2, r3, #1
    8484:	697b      	ldr	r3, [r7, #20]
    8486:	4053      	eors	r3, r2
    8488:	461a      	mov	r2, r3
    848a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    848c:	4313      	orrs	r3, r2
    848e:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (top_bit)
    8490:	697b      	ldr	r3, [r7, #20]
    8492:	2b00      	cmp	r3, #0
    8494:	d003      	beq.n	849e <btle_reverse_crc+0x66>
				state ^= lfsr_mask;
    8496:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8498:	69fb      	ldr	r3, [r7, #28]
    849a:	4053      	eors	r3, r2
    849c:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    849e:	6a3b      	ldr	r3, [r7, #32]
    84a0:	3301      	adds	r3, #1
    84a2:	623b      	str	r3, [r7, #32]
    84a4:	6a3b      	ldr	r3, [r7, #32]
    84a6:	2b07      	cmp	r3, #7
    84a8:	dddc      	ble.n	8464 <btle_reverse_crc+0x2c>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    84aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84ac:	3b01      	subs	r3, #1
    84ae:	627b      	str	r3, [r7, #36]	; 0x24
    84b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84b2:	2b00      	cmp	r3, #0
    84b4:	dace      	bge.n	8454 <btle_reverse_crc+0x1c>
			if (top_bit)
				state ^= lfsr_mask;
		}
	}

	ret = 0;
    84b6:	2300      	movs	r3, #0
    84b8:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < 24; ++i)
    84ba:	2300      	movs	r3, #0
    84bc:	627b      	str	r3, [r7, #36]	; 0x24
    84be:	e010      	b.n	84e2 <btle_reverse_crc+0xaa>
		ret |= ((state >> i) & 1) << (23 - i);
    84c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    84c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84c4:	fa22 f303 	lsr.w	r3, r2, r3
    84c8:	f003 0201 	and.w	r2, r3, #1
    84cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84ce:	f1c3 0317 	rsb	r3, r3, #23
    84d2:	fa02 f303 	lsl.w	r3, r2, r3
    84d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
    84d8:	4313      	orrs	r3, r2
    84da:	62bb      	str	r3, [r7, #40]	; 0x28
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    84dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84de:	3301      	adds	r3, #1
    84e0:	627b      	str	r3, [r7, #36]	; 0x24
    84e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84e4:	2b17      	cmp	r3, #23
    84e6:	ddeb      	ble.n	84c0 <btle_reverse_crc+0x88>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
    84e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    84ea:	4618      	mov	r0, r3
    84ec:	3734      	adds	r7, #52	; 0x34
    84ee:	46bd      	mov	sp, r7
    84f0:	f85d 7b04 	ldr.w	r7, [sp], #4
    84f4:	4770      	bx	lr
    84f6:	bf00      	nop
    84f8:	00b4c000 	.word	0x00b4c000

000084fc <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    84fc:	b480      	push	{r7}
    84fe:	b089      	sub	sp, #36	; 0x24
    8500:	af00      	add	r7, sp, #0
    8502:	60f8      	str	r0, [r7, #12]
    8504:	60b9      	str	r1, [r7, #8]
    8506:	607a      	str	r2, [r7, #4]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    8508:	68fb      	ldr	r3, [r7, #12]
    850a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    850e:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < len; ++i) {
    8510:	2300      	movs	r3, #0
    8512:	61bb      	str	r3, [r7, #24]
    8514:	e012      	b.n	853c <btle_crcgen_lut+0x40>
		key = data[i] ^ (state & 0xff);
    8516:	69bb      	ldr	r3, [r7, #24]
    8518:	68ba      	ldr	r2, [r7, #8]
    851a:	4413      	add	r3, r2
    851c:	781a      	ldrb	r2, [r3, #0]
    851e:	69fb      	ldr	r3, [r7, #28]
    8520:	b2db      	uxtb	r3, r3
    8522:	4053      	eors	r3, r2
    8524:	75fb      	strb	r3, [r7, #23]
		state = (state >> 8) ^ btle_crc_lut[key];
    8526:	69fb      	ldr	r3, [r7, #28]
    8528:	0a1a      	lsrs	r2, r3, #8
    852a:	7dfb      	ldrb	r3, [r7, #23]
    852c:	4909      	ldr	r1, [pc, #36]	; (8554 <btle_crcgen_lut+0x58>)
    852e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    8532:	4053      	eors	r3, r2
    8534:	61fb      	str	r3, [r7, #28]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    8536:	69bb      	ldr	r3, [r7, #24]
    8538:	3301      	adds	r3, #1
    853a:	61bb      	str	r3, [r7, #24]
    853c:	69ba      	ldr	r2, [r7, #24]
    853e:	687b      	ldr	r3, [r7, #4]
    8540:	429a      	cmp	r2, r3
    8542:	dbe8      	blt.n	8516 <btle_crcgen_lut+0x1a>
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
	}
	return state;
    8544:	69fb      	ldr	r3, [r7, #28]
}
    8546:	4618      	mov	r0, r3
    8548:	3724      	adds	r7, #36	; 0x24
    854a:	46bd      	mov	sp, r7
    854c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8550:	4770      	bx	lr
    8552:	bf00      	nop
    8554:	100004a8 	.word	0x100004a8

00008558 <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    8558:	b590      	push	{r4, r7, lr}
    855a:	b087      	sub	sp, #28
    855c:	af00      	add	r7, sp, #0
    855e:	60f8      	str	r0, [r7, #12]
    8560:	60b9      	str	r1, [r7, #8]
    8562:	607a      	str	r2, [r7, #4]
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    8564:	68fb      	ldr	r3, [r7, #12]
    8566:	885b      	ldrh	r3, [r3, #2]
    8568:	823b      	strh	r3, [r7, #16]
    856a:	68fb      	ldr	r3, [r7, #12]
    856c:	889b      	ldrh	r3, [r3, #4]
    856e:	827b      	strh	r3, [r7, #18]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    8570:	4b0b      	ldr	r3, [pc, #44]	; (85a0 <usb_vendor_request_handler+0x48>)
    8572:	681c      	ldr	r4, [r3, #0]
    8574:	68fb      	ldr	r3, [r7, #12]
    8576:	7859      	ldrb	r1, [r3, #1]
    8578:	687b      	ldr	r3, [r7, #4]
    857a:	681b      	ldr	r3, [r3, #0]
    857c:	f107 0210 	add.w	r2, r7, #16
    8580:	4608      	mov	r0, r1
    8582:	4611      	mov	r1, r2
    8584:	461a      	mov	r2, r3
    8586:	68bb      	ldr	r3, [r7, #8]
    8588:	47a0      	blx	r4
    858a:	6178      	str	r0, [r7, #20]
	return (BOOL) (rv==1);
    858c:	697b      	ldr	r3, [r7, #20]
    858e:	2b01      	cmp	r3, #1
    8590:	bf0c      	ite	eq
    8592:	2301      	moveq	r3, #1
    8594:	2300      	movne	r3, #0
    8596:	b2db      	uxtb	r3, r3
}
    8598:	4618      	mov	r0, r3
    859a:	371c      	adds	r7, #28
    859c:	46bd      	mov	sp, r7
    859e:	bd90      	pop	{r4, r7, pc}
    85a0:	10003274 	.word	0x10003274

000085a4 <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    85a4:	b580      	push	{r7, lr}
    85a6:	b082      	sub	sp, #8
    85a8:	af00      	add	r7, sp, #0
    85aa:	6078      	str	r0, [r7, #4]
	// initialise stack
	USBInit();
    85ac:	f001 fdcc 	bl	a148 <USBInit>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    85b0:	480b      	ldr	r0, [pc, #44]	; (85e0 <ubertooth_usb_init+0x3c>)
    85b2:	f002 fa2b 	bl	aa0c <USBRegisterDescriptors>

	// Request handler 
	v_req_handler = vendor_req_handler;
    85b6:	4a0b      	ldr	r2, [pc, #44]	; (85e4 <ubertooth_usb_init+0x40>)
    85b8:	687b      	ldr	r3, [r7, #4]
    85ba:	6013      	str	r3, [r2, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    85bc:	2002      	movs	r0, #2
    85be:	490a      	ldr	r1, [pc, #40]	; (85e8 <ubertooth_usb_init+0x44>)
    85c0:	4a0a      	ldr	r2, [pc, #40]	; (85ec <ubertooth_usb_init+0x48>)
    85c2:	f001 fd9d 	bl	a100 <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    85c6:	20ff      	movs	r0, #255	; 0xff
    85c8:	4909      	ldr	r1, [pc, #36]	; (85f0 <ubertooth_usb_init+0x4c>)
    85ca:	f002 f9c9 	bl	a960 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    85ce:	2001      	movs	r0, #1
    85d0:	f001 fefc 	bl	a3cc <USBHwConnect>

	return 0;
    85d4:	2300      	movs	r3, #0
}
    85d6:	4618      	mov	r0, r3
    85d8:	3708      	adds	r7, #8
    85da:	46bd      	mov	sp, r7
    85dc:	bd80      	pop	{r7, pc}
    85de:	bf00      	nop
    85e0:	0000c0f0 	.word	0x0000c0f0
    85e4:	10003274 	.word	0x10003274
    85e8:	00008559 	.word	0x00008559
    85ec:	10003170 	.word	0x10003170
    85f0:	0000c1b4 	.word	0x0000c1b4

000085f4 <queue_init>:

volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init()
{
    85f4:	b480      	push	{r7}
    85f6:	af00      	add	r7, sp, #0
	head = 0;
    85f8:	4b04      	ldr	r3, [pc, #16]	; (860c <queue_init+0x18>)
    85fa:	2200      	movs	r2, #0
    85fc:	601a      	str	r2, [r3, #0]
	tail = 0;
    85fe:	4b04      	ldr	r3, [pc, #16]	; (8610 <queue_init+0x1c>)
    8600:	2200      	movs	r2, #0
    8602:	601a      	str	r2, [r3, #0]
}
    8604:	46bd      	mov	sp, r7
    8606:	f85d 7b04 	ldr.w	r7, [sp], #4
    860a:	4770      	bx	lr
    860c:	10000a5c 	.word	0x10000a5c
    8610:	10000a60 	.word	0x10000a60

00008614 <usb_enqueue>:

usb_pkt_rx *usb_enqueue()
{
    8614:	b480      	push	{r7}
    8616:	b083      	sub	sp, #12
    8618:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    861a:	4b13      	ldr	r3, [pc, #76]	; (8668 <usb_enqueue+0x54>)
    861c:	681b      	ldr	r3, [r3, #0]
    861e:	b2db      	uxtb	r3, r3
    8620:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8624:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    8626:	4b11      	ldr	r3, [pc, #68]	; (866c <usb_enqueue+0x58>)
    8628:	681b      	ldr	r3, [r3, #0]
    862a:	b2db      	uxtb	r3, r3
    862c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8630:	71bb      	strb	r3, [r7, #6]
	u8 n = (t + 1) & 0x7F;
    8632:	79bb      	ldrb	r3, [r7, #6]
    8634:	3301      	adds	r3, #1
    8636:	b2db      	uxtb	r3, r3
    8638:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    863c:	717b      	strb	r3, [r7, #5]

	/* fail if queue is full */
	if (h == n) {
    863e:	79fa      	ldrb	r2, [r7, #7]
    8640:	797b      	ldrb	r3, [r7, #5]
    8642:	429a      	cmp	r2, r3
    8644:	d101      	bne.n	864a <usb_enqueue+0x36>
		return NULL;
    8646:	2300      	movs	r3, #0
    8648:	e008      	b.n	865c <usb_enqueue+0x48>
	}

	++tail;
    864a:	4b08      	ldr	r3, [pc, #32]	; (866c <usb_enqueue+0x58>)
    864c:	681b      	ldr	r3, [r3, #0]
    864e:	3301      	adds	r3, #1
    8650:	4a06      	ldr	r2, [pc, #24]	; (866c <usb_enqueue+0x58>)
    8652:	6013      	str	r3, [r2, #0]
	return &fifo[t];
    8654:	79bb      	ldrb	r3, [r7, #6]
    8656:	019b      	lsls	r3, r3, #6
    8658:	4a05      	ldr	r2, [pc, #20]	; (8670 <usb_enqueue+0x5c>)
    865a:	4413      	add	r3, r2
	
}
    865c:	4618      	mov	r0, r3
    865e:	370c      	adds	r7, #12
    8660:	46bd      	mov	sp, r7
    8662:	f85d 7b04 	ldr.w	r7, [sp], #4
    8666:	4770      	bx	lr
    8668:	10000a5c 	.word	0x10000a5c
    866c:	10000a60 	.word	0x10000a60
    8670:	10001170 	.word	0x10001170

00008674 <dequeue>:

usb_pkt_rx *dequeue()
{
    8674:	b480      	push	{r7}
    8676:	b083      	sub	sp, #12
    8678:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    867a:	4b10      	ldr	r3, [pc, #64]	; (86bc <dequeue+0x48>)
    867c:	681b      	ldr	r3, [r3, #0]
    867e:	b2db      	uxtb	r3, r3
    8680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8684:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    8686:	4b0e      	ldr	r3, [pc, #56]	; (86c0 <dequeue+0x4c>)
    8688:	681b      	ldr	r3, [r3, #0]
    868a:	b2db      	uxtb	r3, r3
    868c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8690:	71bb      	strb	r3, [r7, #6]

	/* fail if queue is empty */
	if (h == t) {
    8692:	79fa      	ldrb	r2, [r7, #7]
    8694:	79bb      	ldrb	r3, [r7, #6]
    8696:	429a      	cmp	r2, r3
    8698:	d101      	bne.n	869e <dequeue+0x2a>
		return NULL;
    869a:	2300      	movs	r3, #0
    869c:	e008      	b.n	86b0 <dequeue+0x3c>
	}

	++head;
    869e:	4b07      	ldr	r3, [pc, #28]	; (86bc <dequeue+0x48>)
    86a0:	681b      	ldr	r3, [r3, #0]
    86a2:	3301      	adds	r3, #1
    86a4:	4a05      	ldr	r2, [pc, #20]	; (86bc <dequeue+0x48>)
    86a6:	6013      	str	r3, [r2, #0]
	return &fifo[h];
    86a8:	79fb      	ldrb	r3, [r7, #7]
    86aa:	019b      	lsls	r3, r3, #6
    86ac:	4a05      	ldr	r2, [pc, #20]	; (86c4 <dequeue+0x50>)
    86ae:	4413      	add	r3, r2
}
    86b0:	4618      	mov	r0, r3
    86b2:	370c      	adds	r7, #12
    86b4:	46bd      	mov	sp, r7
    86b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    86ba:	4770      	bx	lr
    86bc:	10000a5c 	.word	0x10000a5c
    86c0:	10000a60 	.word	0x10000a60
    86c4:	10001170 	.word	0x10001170

000086c8 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    86c8:	b580      	push	{r7, lr}
    86ca:	b084      	sub	sp, #16
    86cc:	af00      	add	r7, sp, #0
    86ce:	6078      	str	r0, [r7, #4]
	usb_pkt_rx *pkt = dequeue(&pkt);
    86d0:	f107 030c 	add.w	r3, r7, #12
    86d4:	4618      	mov	r0, r3
    86d6:	f7ff ffcd 	bl	8674 <dequeue>
    86da:	4603      	mov	r3, r0
    86dc:	60fb      	str	r3, [r7, #12]
	if (pkt != NULL) {
    86de:	68fb      	ldr	r3, [r7, #12]
    86e0:	2b00      	cmp	r3, #0
    86e2:	d00a      	beq.n	86fa <dequeue_send+0x32>
		last_usb_pkt = clkn;
    86e4:	4a11      	ldr	r2, [pc, #68]	; (872c <dequeue_send+0x64>)
    86e6:	687b      	ldr	r3, [r7, #4]
    86e8:	6013      	str	r3, [r2, #0]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    86ea:	68fb      	ldr	r3, [r7, #12]
    86ec:	2082      	movs	r0, #130	; 0x82
    86ee:	4619      	mov	r1, r3
    86f0:	2240      	movs	r2, #64	; 0x40
    86f2:	f001 fec7 	bl	a484 <USBHwEPWrite>
		return 1;
    86f6:	2301      	movs	r3, #1
    86f8:	e013      	b.n	8722 <dequeue_send+0x5a>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    86fa:	4b0c      	ldr	r3, [pc, #48]	; (872c <dequeue_send+0x64>)
    86fc:	681b      	ldr	r3, [r3, #0]
    86fe:	687a      	ldr	r2, [r7, #4]
    8700:	1ad3      	subs	r3, r2, r3
    8702:	4a0b      	ldr	r2, [pc, #44]	; (8730 <dequeue_send+0x68>)
    8704:	4293      	cmp	r3, r2
    8706:	d90b      	bls.n	8720 <dequeue_send+0x58>
			u8 pkt_type = KEEP_ALIVE;
    8708:	2303      	movs	r3, #3
    870a:	72fb      	strb	r3, [r7, #11]
			last_usb_pkt = clkn;
    870c:	4a07      	ldr	r2, [pc, #28]	; (872c <dequeue_send+0x64>)
    870e:	687b      	ldr	r3, [r7, #4]
    8710:	6013      	str	r3, [r2, #0]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    8712:	f107 030b 	add.w	r3, r7, #11
    8716:	2082      	movs	r0, #130	; 0x82
    8718:	4619      	mov	r1, r3
    871a:	2201      	movs	r2, #1
    871c:	f001 feb2 	bl	a484 <USBHwEPWrite>
		}
		return 0;
    8720:	2300      	movs	r3, #0
	}
}
    8722:	4618      	mov	r0, r3
    8724:	3710      	adds	r7, #16
    8726:	46bd      	mov	sp, r7
    8728:	bd80      	pop	{r7, pc}
    872a:	bf00      	nop
    872c:	10000a64 	.word	0x10000a64
    8730:	00061a80 	.word	0x00061a80

00008734 <handle_usb>:

void handle_usb(u32 clkn)
{
    8734:	b580      	push	{r7, lr}
    8736:	b084      	sub	sp, #16
    8738:	af00      	add	r7, sp, #0
    873a:	6078      	str	r0, [r7, #4]
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    873c:	2082      	movs	r0, #130	; 0x82
    873e:	f001 fe65 	bl	a40c <USBHwEPGetStatus>
    8742:	4603      	mov	r3, r0
    8744:	73fb      	strb	r3, [r7, #15]
	if (!(epstat & EPSTAT_B1FULL)) {
    8746:	7bfb      	ldrb	r3, [r7, #15]
    8748:	f003 0320 	and.w	r3, r3, #32
    874c:	2b00      	cmp	r3, #0
    874e:	d102      	bne.n	8756 <handle_usb+0x22>
		dequeue_send(clkn);
    8750:	6878      	ldr	r0, [r7, #4]
    8752:	f7ff ffb9 	bl	86c8 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    8756:	7bfb      	ldrb	r3, [r7, #15]
    8758:	f003 0340 	and.w	r3, r3, #64	; 0x40
    875c:	2b00      	cmp	r3, #0
    875e:	d102      	bne.n	8766 <handle_usb+0x32>
		dequeue_send(clkn);
    8760:	6878      	ldr	r0, [r7, #4]
    8762:	f7ff ffb1 	bl	86c8 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
    8766:	f001 ff53 	bl	a610 <USBHwISR>
}
    876a:	3710      	adds	r7, #16
    876c:	46bd      	mov	sp, r7
    876e:	bd80      	pop	{r7, pc}

00008770 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    8770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8774:	b095      	sub	sp, #84	; 0x54
    8776:	af00      	add	r7, sp, #0
    8778:	6078      	str	r0, [r7, #4]
    877a:	4669      	mov	r1, sp
    877c:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u32 command[5];
	u32 result[5];
	int i;
	int j;
	u8 len = 22;
    877e:	2116      	movs	r1, #22
    8780:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
	u8 pa = 0;
    8784:	2100      	movs	r1, #0
    8786:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
	u8 txbuf[len];
    878a:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    878e:	4631      	mov	r1, r6
    8790:	3901      	subs	r1, #1
    8792:	6439      	str	r1, [r7, #64]	; 0x40
    8794:	b2f0      	uxtb	r0, r6
    8796:	f04f 0100 	mov.w	r1, #0
    879a:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
    879e:	ea4b 7b50 	orr.w	fp, fp, r0, lsr #29
    87a2:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
    87a6:	b2f0      	uxtb	r0, r6
    87a8:	f04f 0100 	mov.w	r1, #0
    87ac:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    87b0:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
    87b4:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    87b8:	4631      	mov	r1, r6
    87ba:	3107      	adds	r1, #7
    87bc:	08c9      	lsrs	r1, r1, #3
    87be:	00c9      	lsls	r1, r1, #3
    87c0:	ebad 0d01 	sub.w	sp, sp, r1
    87c4:	4669      	mov	r1, sp
    87c6:	3100      	adds	r1, #0
    87c8:	63f9      	str	r1, [r7, #60]	; 0x3c
	u8 rxbuf[len];
    87ca:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    87ce:	4631      	mov	r1, r6
    87d0:	3901      	subs	r1, #1
    87d2:	63b9      	str	r1, [r7, #56]	; 0x38
    87d4:	b2f0      	uxtb	r0, r6
    87d6:	f04f 0100 	mov.w	r1, #0
    87da:	00cd      	lsls	r5, r1, #3
    87dc:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    87e0:	00c4      	lsls	r4, r0, #3
    87e2:	b2f0      	uxtb	r0, r6
    87e4:	f04f 0100 	mov.w	r1, #0
    87e8:	00cb      	lsls	r3, r1, #3
    87ea:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    87ee:	00c2      	lsls	r2, r0, #3
    87f0:	4633      	mov	r3, r6
    87f2:	3307      	adds	r3, #7
    87f4:	08db      	lsrs	r3, r3, #3
    87f6:	00db      	lsls	r3, r3, #3
    87f8:	ebad 0d03 	sub.w	sp, sp, r3
    87fc:	466b      	mov	r3, sp
    87fe:	3300      	adds	r3, #0
    8800:	637b      	str	r3, [r7, #52]	; 0x34

	txbuf[0] = len - 1; // length of data (rest of payload)
    8802:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
    8806:	3b01      	subs	r3, #1
    8808:	b2da      	uxtb	r2, r3
    880a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    880c:	701a      	strb	r2, [r3, #0]
	txbuf[1] = 0; // request
    880e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8810:	2200      	movs	r2, #0
    8812:	705a      	strb	r2, [r3, #1]

	// read device serial number
	command[0] = 58;
    8814:	233a      	movs	r3, #58	; 0x3a
    8816:	623b      	str	r3, [r7, #32]
	iap_entry(command, result);
    8818:	4bb3      	ldr	r3, [pc, #716]	; (8ae8 <cc2400_rangetest+0x378>)
    881a:	681b      	ldr	r3, [r3, #0]
    881c:	f107 0120 	add.w	r1, r7, #32
    8820:	f107 020c 	add.w	r2, r7, #12
    8824:	4608      	mov	r0, r1
    8826:	4611      	mov	r1, r2
    8828:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    882a:	68fb      	ldr	r3, [r7, #12]
    882c:	b2db      	uxtb	r3, r3
    882e:	2b00      	cmp	r3, #0
    8830:	d001      	beq.n	8836 <cc2400_rangetest+0xc6>
    8832:	2300      	movs	r3, #0
		return;
    8834:	e1ac      	b.n	8b90 <cc2400_rangetest+0x420>
	txbuf[2] = (result[1] >> 24) & 0xFF;
    8836:	693b      	ldr	r3, [r7, #16]
    8838:	0e1b      	lsrs	r3, r3, #24
    883a:	b2da      	uxtb	r2, r3
    883c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    883e:	709a      	strb	r2, [r3, #2]
	txbuf[3] = (result[1] >> 16) & 0xFF;
    8840:	693b      	ldr	r3, [r7, #16]
    8842:	0c1b      	lsrs	r3, r3, #16
    8844:	b2da      	uxtb	r2, r3
    8846:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8848:	70da      	strb	r2, [r3, #3]
	txbuf[4] = (result[1] >> 8) & 0xFF;
    884a:	693b      	ldr	r3, [r7, #16]
    884c:	0a1b      	lsrs	r3, r3, #8
    884e:	b2da      	uxtb	r2, r3
    8850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8852:	711a      	strb	r2, [r3, #4]
	txbuf[5] = result[1] & 0xFF;
    8854:	693b      	ldr	r3, [r7, #16]
    8856:	b2da      	uxtb	r2, r3
    8858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    885a:	715a      	strb	r2, [r3, #5]
	txbuf[6] = (result[2] >> 24) & 0xFF;
    885c:	697b      	ldr	r3, [r7, #20]
    885e:	0e1b      	lsrs	r3, r3, #24
    8860:	b2da      	uxtb	r2, r3
    8862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8864:	719a      	strb	r2, [r3, #6]
	txbuf[7] = (result[2] >> 16) & 0xFF;
    8866:	697b      	ldr	r3, [r7, #20]
    8868:	0c1b      	lsrs	r3, r3, #16
    886a:	b2da      	uxtb	r2, r3
    886c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    886e:	71da      	strb	r2, [r3, #7]
	txbuf[8] = (result[2] >> 8) & 0xFF;
    8870:	697b      	ldr	r3, [r7, #20]
    8872:	0a1b      	lsrs	r3, r3, #8
    8874:	b2da      	uxtb	r2, r3
    8876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8878:	721a      	strb	r2, [r3, #8]
	txbuf[9] = result[2] & 0xFF;
    887a:	697b      	ldr	r3, [r7, #20]
    887c:	b2da      	uxtb	r2, r3
    887e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8880:	725a      	strb	r2, [r3, #9]
	txbuf[10] = (result[3] >> 24) & 0xFF;
    8882:	69bb      	ldr	r3, [r7, #24]
    8884:	0e1b      	lsrs	r3, r3, #24
    8886:	b2da      	uxtb	r2, r3
    8888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    888a:	729a      	strb	r2, [r3, #10]
	txbuf[11] = (result[3] >> 16) & 0xFF;
    888c:	69bb      	ldr	r3, [r7, #24]
    888e:	0c1b      	lsrs	r3, r3, #16
    8890:	b2da      	uxtb	r2, r3
    8892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8894:	72da      	strb	r2, [r3, #11]
	txbuf[12] = (result[3] >> 8) & 0xFF;
    8896:	69bb      	ldr	r3, [r7, #24]
    8898:	0a1b      	lsrs	r3, r3, #8
    889a:	b2da      	uxtb	r2, r3
    889c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    889e:	731a      	strb	r2, [r3, #12]
	txbuf[13] = result[3] & 0xFF;
    88a0:	69bb      	ldr	r3, [r7, #24]
    88a2:	b2da      	uxtb	r2, r3
    88a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88a6:	735a      	strb	r2, [r3, #13]
	txbuf[14] = (result[4] >> 24) & 0xFF;
    88a8:	69fb      	ldr	r3, [r7, #28]
    88aa:	0e1b      	lsrs	r3, r3, #24
    88ac:	b2da      	uxtb	r2, r3
    88ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88b0:	739a      	strb	r2, [r3, #14]
	txbuf[15] = (result[4] >> 16) & 0xFF;
    88b2:	69fb      	ldr	r3, [r7, #28]
    88b4:	0c1b      	lsrs	r3, r3, #16
    88b6:	b2da      	uxtb	r2, r3
    88b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88ba:	73da      	strb	r2, [r3, #15]
	txbuf[16] = (result[4] >> 8) & 0xFF;
    88bc:	69fb      	ldr	r3, [r7, #28]
    88be:	0a1b      	lsrs	r3, r3, #8
    88c0:	b2da      	uxtb	r2, r3
    88c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88c4:	741a      	strb	r2, [r3, #16]
	txbuf[17] = result[4] & 0xFF;
    88c6:	69fb      	ldr	r3, [r7, #28]
    88c8:	b2da      	uxtb	r2, r3
    88ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88cc:	745a      	strb	r2, [r3, #17]

	txbuf[18] = pa; // request pa
    88ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88d0:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    88d4:	749a      	strb	r2, [r3, #18]
	txbuf[19] = 0; // request number
    88d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88d8:	2200      	movs	r2, #0
    88da:	74da      	strb	r2, [r3, #19]
	txbuf[20] = 0xff; // reply pa
    88dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88de:	22ff      	movs	r2, #255	; 0xff
    88e0:	751a      	strb	r2, [r3, #20]
	txbuf[21] = 0xff; // reply number
    88e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88e4:	22ff      	movs	r2, #255	; 0xff
    88e6:	755a      	strb	r2, [r3, #21]

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    88e8:	2012      	movs	r0, #18
    88ea:	f642 3122 	movw	r1, #11042	; 0x2b22
    88ee:	f001 f8f9 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    88f2:	2014      	movs	r0, #20
    88f4:	f241 314b 	movw	r1, #4939	; 0x134b
    88f8:	f001 f8f4 	bl	9ae4 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    88fc:	2020      	movs	r0, #32
    88fe:	f640 51f1 	movw	r1, #3569	; 0xdf1
    8902:	f001 f8ef 	bl	9ae4 <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    8906:	687b      	ldr	r3, [r7, #4]
    8908:	881b      	ldrh	r3, [r3, #0]
    890a:	b29b      	uxth	r3, r3
    890c:	2002      	movs	r0, #2
    890e:	4619      	mov	r1, r3
    8910:	f001 f8e8 	bl	9ae4 <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    8914:	202d      	movs	r0, #45	; 0x2d
    8916:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    891a:	f001 f8e3 	bl	9ae4 <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    891e:	202c      	movs	r0, #44	; 0x2c
    8920:	f241 5184 	movw	r1, #5508	; 0x1584
    8924:	f001 f8de 	bl	9ae4 <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    8928:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    892c:	f043 0308 	orr.w	r3, r3, #8
    8930:	b2db      	uxtb	r3, r3
    8932:	b29b      	uxth	r3, r3
    8934:	2005      	movs	r0, #5
    8936:	4619      	mov	r1, r3
    8938:	f001 f8d4 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    893c:	2003      	movs	r0, #3
    893e:	2129      	movs	r1, #41	; 0x29
    8940:	f001 f8d0 	bl	9ae4 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8944:	bf00      	nop
    8946:	f001 f985 	bl	9c54 <cc2400_status>
    894a:	4603      	mov	r3, r0
    894c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8950:	2b00      	cmp	r3, #0
    8952:	d0f8      	beq.n	8946 <cc2400_rangetest+0x1d6>
	cc2400_strobe(SFSON);
    8954:	2061      	movs	r0, #97	; 0x61
    8956:	f001 f987 	bl	9c68 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    895a:	bf00      	nop
    895c:	f001 f97a 	bl	9c54 <cc2400_status>
    8960:	4603      	mov	r3, r0
    8962:	f003 0304 	and.w	r3, r3, #4
    8966:	2b00      	cmp	r3, #0
    8968:	d0f8      	beq.n	895c <cc2400_rangetest+0x1ec>
	TXLED_SET;
    896a:	4b60      	ldr	r3, [pc, #384]	; (8aec <cc2400_rangetest+0x37c>)
    896c:	f44f 7280 	mov.w	r2, #256	; 0x100
    8970:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8972:	4b5f      	ldr	r3, [pc, #380]	; (8af0 <cc2400_rangetest+0x380>)
    8974:	2280      	movs	r2, #128	; 0x80
    8976:	601a      	str	r2, [r3, #0]
#endif
	for (pa = 0; pa < 8; pa++) {
    8978:	2300      	movs	r3, #0
    897a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    897e:	e03e      	b.n	89fe <cc2400_rangetest+0x28e>
		cc2400_set(FREND, 8 | pa);
    8980:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8984:	f043 0308 	orr.w	r3, r3, #8
    8988:	b2db      	uxtb	r3, r3
    898a:	b29b      	uxth	r3, r3
    898c:	2005      	movs	r0, #5
    898e:	4619      	mov	r1, r3
    8990:	f001 f8a8 	bl	9ae4 <cc2400_set>
		txbuf[18] = pa;
    8994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8996:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    899a:	749a      	strb	r2, [r3, #18]
		for (i = 0; i < 16; i++) {
    899c:	2300      	movs	r3, #0
    899e:	64fb      	str	r3, [r7, #76]	; 0x4c
    89a0:	e025      	b.n	89ee <cc2400_rangetest+0x27e>
			txbuf[19] = i;
    89a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    89a4:	b2da      	uxtb	r2, r3
    89a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    89a8:	74da      	strb	r2, [r3, #19]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    89aa:	bf00      	nop
    89ac:	200e      	movs	r0, #14
    89ae:	f001 f883 	bl	9ab8 <cc2400_get>
    89b2:	4603      	mov	r3, r0
    89b4:	f003 031f 	and.w	r3, r3, #31
    89b8:	2b0f      	cmp	r3, #15
    89ba:	d1f7      	bne.n	89ac <cc2400_rangetest+0x23c>
			// transmit a packet
			for (j = 0; j < len; j++)
    89bc:	2300      	movs	r3, #0
    89be:	64bb      	str	r3, [r7, #72]	; 0x48
    89c0:	e00a      	b.n	89d8 <cc2400_rangetest+0x268>
				cc2400_set8(FIFOREG, txbuf[j]);
    89c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    89c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    89c6:	4413      	add	r3, r2
    89c8:	781b      	ldrb	r3, [r3, #0]
    89ca:	2070      	movs	r0, #112	; 0x70
    89cc:	4619      	mov	r1, r3
    89ce:	f001 f8b7 	bl	9b40 <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    89d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    89d4:	3301      	adds	r3, #1
    89d6:	64bb      	str	r3, [r7, #72]	; 0x48
    89d8:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    89dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    89de:	429a      	cmp	r2, r3
    89e0:	dcef      	bgt.n	89c2 <cc2400_rangetest+0x252>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    89e2:	2063      	movs	r0, #99	; 0x63
    89e4:	f001 f940 	bl	9c68 <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    89e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    89ea:	3301      	adds	r3, #1
    89ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    89ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    89f0:	2b0f      	cmp	r3, #15
    89f2:	ddd6      	ble.n	89a2 <cc2400_rangetest+0x232>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    89f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    89f8:	3301      	adds	r3, #1
    89fa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    89fe:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8a02:	2b07      	cmp	r3, #7
    8a04:	d9bc      	bls.n	8980 <cc2400_rangetest+0x210>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8a06:	bf00      	nop
    8a08:	200e      	movs	r0, #14
    8a0a:	f001 f855 	bl	9ab8 <cc2400_get>
    8a0e:	4603      	mov	r3, r0
    8a10:	f003 031f 	and.w	r3, r3, #31
    8a14:	2b0f      	cmp	r3, #15
    8a16:	d1f7      	bne.n	8a08 <cc2400_rangetest+0x298>
	TXLED_CLR;
    8a18:	4b36      	ldr	r3, [pc, #216]	; (8af4 <cc2400_rangetest+0x384>)
    8a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
    8a1e:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    8a20:	2064      	movs	r0, #100	; 0x64
    8a22:	f001 f921 	bl	9c68 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    8a26:	bf00      	nop
    8a28:	f001 f914 	bl	9c54 <cc2400_status>
    8a2c:	4603      	mov	r3, r0
    8a2e:	f003 0304 	and.w	r3, r3, #4
    8a32:	2b00      	cmp	r3, #0
    8a34:	d1f8      	bne.n	8a28 <cc2400_rangetest+0x2b8>
	cc2400_set(FSDIV, *chan_ptr - 1);
    8a36:	687b      	ldr	r3, [r7, #4]
    8a38:	881b      	ldrh	r3, [r3, #0]
    8a3a:	b29b      	uxth	r3, r3
    8a3c:	3b01      	subs	r3, #1
    8a3e:	b29b      	uxth	r3, r3
    8a40:	2002      	movs	r0, #2
    8a42:	4619      	mov	r1, r3
    8a44:	f001 f84e 	bl	9ae4 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8a48:	bf00      	nop
    8a4a:	f001 f903 	bl	9c54 <cc2400_status>
    8a4e:	4603      	mov	r3, r0
    8a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8a54:	2b00      	cmp	r3, #0
    8a56:	d0f8      	beq.n	8a4a <cc2400_rangetest+0x2da>
	cc2400_strobe(SFSON);
    8a58:	2061      	movs	r0, #97	; 0x61
    8a5a:	f001 f905 	bl	9c68 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8a5e:	bf00      	nop
    8a60:	f001 f8f8 	bl	9c54 <cc2400_status>
    8a64:	4603      	mov	r3, r0
    8a66:	f003 0304 	and.w	r3, r3, #4
    8a6a:	2b00      	cmp	r3, #0
    8a6c:	d0f8      	beq.n	8a60 <cc2400_rangetest+0x2f0>
	RXLED_SET;
    8a6e:	4b1f      	ldr	r3, [pc, #124]	; (8aec <cc2400_rangetest+0x37c>)
    8a70:	2210      	movs	r2, #16
    8a72:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8a74:	bf00      	nop
    8a76:	200e      	movs	r0, #14
    8a78:	f001 f81e 	bl	9ab8 <cc2400_get>
    8a7c:	4603      	mov	r3, r0
    8a7e:	f003 031f 	and.w	r3, r3, #31
    8a82:	2b0f      	cmp	r3, #15
    8a84:	d1f7      	bne.n	8a76 <cc2400_rangetest+0x306>
		cc2400_strobe(SRX);
    8a86:	2062      	movs	r0, #98	; 0x62
    8a88:	f001 f8ee 	bl	9c68 <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    8a8c:	bf00      	nop
    8a8e:	f001 f8e1 	bl	9c54 <cc2400_status>
    8a92:	4603      	mov	r3, r0
    8a94:	f003 0310 	and.w	r3, r3, #16
    8a98:	2b00      	cmp	r3, #0
    8a9a:	d0f8      	beq.n	8a8e <cc2400_rangetest+0x31e>
		USRLED_SET;
    8a9c:	4b13      	ldr	r3, [pc, #76]	; (8aec <cc2400_rangetest+0x37c>)
    8a9e:	2202      	movs	r2, #2
    8aa0:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
    8aa2:	2300      	movs	r3, #0
    8aa4:	64bb      	str	r3, [r7, #72]	; 0x48
    8aa6:	e00c      	b.n	8ac2 <cc2400_rangetest+0x352>
			rxbuf[j] = cc2400_get8(FIFOREG);
    8aa8:	2070      	movs	r0, #112	; 0x70
    8aaa:	f001 f82f 	bl	9b0c <cc2400_get8>
    8aae:	4603      	mov	r3, r0
    8ab0:	4619      	mov	r1, r3
    8ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8ab4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8ab6:	4413      	add	r3, r2
    8ab8:	460a      	mov	r2, r1
    8aba:	701a      	strb	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    8abc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8abe:	3301      	adds	r3, #1
    8ac0:	64bb      	str	r3, [r7, #72]	; 0x48
    8ac2:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    8ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8ac8:	429a      	cmp	r2, r3
    8aca:	dced      	bgt.n	8aa8 <cc2400_rangetest+0x338>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    8acc:	f001 f8c2 	bl	9c54 <cc2400_status>
    8ad0:	4603      	mov	r3, r0
    8ad2:	f003 0308 	and.w	r3, r3, #8
    8ad6:	2b00      	cmp	r3, #0
    8ad8:	d001      	beq.n	8ade <cc2400_rangetest+0x36e>
			break;
    8ada:	bf00      	nop
		USRLED_CLR;
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8adc:	e00c      	b.n	8af8 <cc2400_rangetest+0x388>
		USRLED_SET;
		for (j = 0; j < len; j++)
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
			break;
		USRLED_CLR;
    8ade:	4b05      	ldr	r3, [pc, #20]	; (8af4 <cc2400_rangetest+0x384>)
    8ae0:	2202      	movs	r2, #2
    8ae2:	601a      	str	r2, [r3, #0]
	}
    8ae4:	e7c6      	b.n	8a74 <cc2400_rangetest+0x304>
    8ae6:	bf00      	nop
    8ae8:	100008a8 	.word	0x100008a8
    8aec:	2009c038 	.word	0x2009c038
    8af0:	2009c058 	.word	0x2009c058
    8af4:	2009c03c 	.word	0x2009c03c

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8af8:	200e      	movs	r0, #14
    8afa:	f000 ffdd 	bl	9ab8 <cc2400_get>
    8afe:	4603      	mov	r3, r0
    8b00:	f003 031f 	and.w	r3, r3, #31
    8b04:	2b0f      	cmp	r3, #15
    8b06:	d1f7      	bne.n	8af8 <cc2400_rangetest+0x388>
	cc2400_strobe(SRFOFF);
    8b08:	2064      	movs	r0, #100	; 0x64
    8b0a:	f001 f8ad 	bl	9c68 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    8b0e:	bf00      	nop
    8b10:	f001 f8a0 	bl	9c54 <cc2400_status>
    8b14:	4603      	mov	r3, r0
    8b16:	f003 0304 	and.w	r3, r3, #4
    8b1a:	2b00      	cmp	r3, #0
    8b1c:	d1f8      	bne.n	8b10 <cc2400_rangetest+0x3a0>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    8b1e:	4b20      	ldr	r3, [pc, #128]	; (8ba0 <cc2400_rangetest+0x430>)
    8b20:	2280      	movs	r2, #128	; 0x80
    8b22:	601a      	str	r2, [r3, #0]
#endif
	RXLED_CLR;
    8b24:	4b1f      	ldr	r3, [pc, #124]	; (8ba4 <cc2400_rangetest+0x434>)
    8b26:	2210      	movs	r2, #16
    8b28:	601a      	str	r2, [r3, #0]

	// get test result
	rr.valid       = 1;
    8b2a:	4b1f      	ldr	r3, [pc, #124]	; (8ba8 <cc2400_rangetest+0x438>)
    8b2c:	2201      	movs	r2, #1
    8b2e:	701a      	strb	r2, [r3, #0]
	rr.request_pa  = rxbuf[18];
    8b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b32:	7c9a      	ldrb	r2, [r3, #18]
    8b34:	4b1c      	ldr	r3, [pc, #112]	; (8ba8 <cc2400_rangetest+0x438>)
    8b36:	705a      	strb	r2, [r3, #1]
	rr.request_num = rxbuf[19];
    8b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b3a:	7cda      	ldrb	r2, [r3, #19]
    8b3c:	4b1a      	ldr	r3, [pc, #104]	; (8ba8 <cc2400_rangetest+0x438>)
    8b3e:	709a      	strb	r2, [r3, #2]
	rr.reply_pa    = rxbuf[20];
    8b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b42:	7d1a      	ldrb	r2, [r3, #20]
    8b44:	4b18      	ldr	r3, [pc, #96]	; (8ba8 <cc2400_rangetest+0x438>)
    8b46:	70da      	strb	r2, [r3, #3]
	rr.reply_num   = rxbuf[21];
    8b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b4a:	7d5a      	ldrb	r2, [r3, #21]
    8b4c:	4b16      	ldr	r3, [pc, #88]	; (8ba8 <cc2400_rangetest+0x438>)
    8b4e:	711a      	strb	r2, [r3, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    8b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8b52:	2201      	movs	r2, #1
    8b54:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 18; i++)
    8b56:	2300      	movs	r3, #0
    8b58:	64fb      	str	r3, [r7, #76]	; 0x4c
    8b5a:	e012      	b.n	8b82 <cc2400_rangetest+0x412>
		if (rxbuf[i] != txbuf[i])
    8b5c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b60:	4413      	add	r3, r2
    8b62:	781a      	ldrb	r2, [r3, #0]
    8b64:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    8b66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b68:	440b      	add	r3, r1
    8b6a:	781b      	ldrb	r3, [r3, #0]
    8b6c:	429a      	cmp	r2, r3
    8b6e:	d005      	beq.n	8b7c <cc2400_rangetest+0x40c>
			rr.valid = 2 + i;
    8b70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b72:	b2db      	uxtb	r3, r3
    8b74:	3302      	adds	r3, #2
    8b76:	b2da      	uxtb	r2, r3
    8b78:	4b0b      	ldr	r3, [pc, #44]	; (8ba8 <cc2400_rangetest+0x438>)
    8b7a:	701a      	strb	r2, [r3, #0]
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    8b7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b7e:	3301      	adds	r3, #1
    8b80:	64fb      	str	r3, [r7, #76]	; 0x4c
    8b82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b84:	2b11      	cmp	r3, #17
    8b86:	dde9      	ble.n	8b5c <cc2400_rangetest+0x3ec>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    8b88:	4b06      	ldr	r3, [pc, #24]	; (8ba4 <cc2400_rangetest+0x434>)
    8b8a:	2202      	movs	r2, #2
    8b8c:	601a      	str	r2, [r3, #0]
    8b8e:	2301      	movs	r3, #1
    8b90:	f8d7 d000 	ldr.w	sp, [r7]
    8b94:	2b01      	cmp	r3, #1
#endif
}
    8b96:	3754      	adds	r7, #84	; 0x54
    8b98:	46bd      	mov	sp, r7
    8b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b9e:	bf00      	nop
    8ba0:	2009c05c 	.word	0x2009c05c
    8ba4:	2009c03c 	.word	0x2009c03c
    8ba8:	10001070 	.word	0x10001070

00008bac <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    8bac:	b5f0      	push	{r4, r5, r6, r7, lr}
    8bae:	b089      	sub	sp, #36	; 0x24
    8bb0:	af00      	add	r7, sp, #0
    8bb2:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	int i;
	int j;
	u8 len = 22;
    8bb4:	2116      	movs	r1, #22
    8bb6:	75b9      	strb	r1, [r7, #22]
	u8 pa = 0;
    8bb8:	2100      	movs	r1, #0
    8bba:	75f9      	strb	r1, [r7, #23]
	u8 buf[len];
    8bbc:	7dbe      	ldrb	r6, [r7, #22]
    8bbe:	4631      	mov	r1, r6
    8bc0:	3901      	subs	r1, #1
    8bc2:	6139      	str	r1, [r7, #16]
    8bc4:	b2f0      	uxtb	r0, r6
    8bc6:	f04f 0100 	mov.w	r1, #0
    8bca:	00cd      	lsls	r5, r1, #3
    8bcc:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    8bd0:	00c4      	lsls	r4, r0, #3
    8bd2:	b2f0      	uxtb	r0, r6
    8bd4:	f04f 0100 	mov.w	r1, #0
    8bd8:	00cb      	lsls	r3, r1, #3
    8bda:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    8bde:	00c2      	lsls	r2, r0, #3
    8be0:	4633      	mov	r3, r6
    8be2:	3307      	adds	r3, #7
    8be4:	08db      	lsrs	r3, r3, #3
    8be6:	00db      	lsls	r3, r3, #3
    8be8:	ebad 0d03 	sub.w	sp, sp, r3
    8bec:	466b      	mov	r3, sp
    8bee:	3300      	adds	r3, #0
    8bf0:	60fb      	str	r3, [r7, #12]

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(LMTST,   0x2b22);
    8bf2:	2012      	movs	r0, #18
    8bf4:	f642 3122 	movw	r1, #11042	; 0x2b22
    8bf8:	f000 ff74 	bl	9ae4 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    8bfc:	2014      	movs	r0, #20
    8bfe:	f241 314b 	movw	r1, #4939	; 0x134b
    8c02:	f000 ff6f 	bl	9ae4 <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    8c06:	687b      	ldr	r3, [r7, #4]
    8c08:	881b      	ldrh	r3, [r3, #0]
    8c0a:	b29b      	uxth	r3, r3
    8c0c:	3b01      	subs	r3, #1
    8c0e:	b29b      	uxth	r3, r3
    8c10:	2002      	movs	r0, #2
    8c12:	4619      	mov	r1, r3
    8c14:	f000 ff66 	bl	9ae4 <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    8c18:	202d      	movs	r0, #45	; 0x2d
    8c1a:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    8c1e:	f000 ff61 	bl	9ae4 <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    8c22:	202c      	movs	r0, #44	; 0x2c
    8c24:	f241 5184 	movw	r1, #5508	; 0x1584
    8c28:	f000 ff5c 	bl	9ae4 <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    8c2c:	2005      	movs	r0, #5
    8c2e:	2108      	movs	r1, #8
    8c30:	f000 ff58 	bl	9ae4 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    8c34:	2003      	movs	r0, #3
    8c36:	2129      	movs	r1, #41	; 0x29
    8c38:	f000 ff54 	bl	9ae4 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8c3c:	bf00      	nop
    8c3e:	f001 f809 	bl	9c54 <cc2400_status>
    8c42:	4603      	mov	r3, r0
    8c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8c48:	2b00      	cmp	r3, #0
    8c4a:	d0f8      	beq.n	8c3e <cc2400_repeater+0x92>
		cc2400_strobe(SFSON);
    8c4c:	2061      	movs	r0, #97	; 0x61
    8c4e:	f001 f80b 	bl	9c68 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    8c52:	bf00      	nop
    8c54:	f000 fffe 	bl	9c54 <cc2400_status>
    8c58:	4603      	mov	r3, r0
    8c5a:	f003 0304 	and.w	r3, r3, #4
    8c5e:	2b00      	cmp	r3, #0
    8c60:	d0f8      	beq.n	8c54 <cc2400_repeater+0xa8>
		RXLED_SET;
    8c62:	4b6a      	ldr	r3, [pc, #424]	; (8e0c <cc2400_repeater+0x260>)
    8c64:	2210      	movs	r2, #16
    8c66:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    8c68:	4b69      	ldr	r3, [pc, #420]	; (8e10 <cc2400_repeater+0x264>)
    8c6a:	f44f 7280 	mov.w	r2, #256	; 0x100
    8c6e:	601a      	str	r2, [r3, #0]
		USRLED_CLR;
    8c70:	4b67      	ldr	r3, [pc, #412]	; (8e10 <cc2400_repeater+0x264>)
    8c72:	2202      	movs	r2, #2
    8c74:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    8c76:	4b67      	ldr	r3, [pc, #412]	; (8e14 <cc2400_repeater+0x268>)
    8c78:	2280      	movs	r2, #128	; 0x80
    8c7a:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8c7c:	bf00      	nop
    8c7e:	200e      	movs	r0, #14
    8c80:	f000 ff1a 	bl	9ab8 <cc2400_get>
    8c84:	4603      	mov	r3, r0
    8c86:	f003 031f 	and.w	r3, r3, #31
    8c8a:	2b0f      	cmp	r3, #15
    8c8c:	d1f7      	bne.n	8c7e <cc2400_repeater+0xd2>
			USRLED_CLR;
    8c8e:	4b60      	ldr	r3, [pc, #384]	; (8e10 <cc2400_repeater+0x264>)
    8c90:	2202      	movs	r2, #2
    8c92:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRX);
    8c94:	2062      	movs	r0, #98	; 0x62
    8c96:	f000 ffe7 	bl	9c68 <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    8c9a:	bf00      	nop
    8c9c:	f000 ffda 	bl	9c54 <cc2400_status>
    8ca0:	4603      	mov	r3, r0
    8ca2:	f003 0310 	and.w	r3, r3, #16
    8ca6:	2b00      	cmp	r3, #0
    8ca8:	d0f8      	beq.n	8c9c <cc2400_repeater+0xf0>
			USRLED_SET;
    8caa:	4b58      	ldr	r3, [pc, #352]	; (8e0c <cc2400_repeater+0x260>)
    8cac:	2202      	movs	r2, #2
    8cae:	601a      	str	r2, [r3, #0]
			for (i = 0; i < len; i++)
    8cb0:	2300      	movs	r3, #0
    8cb2:	61fb      	str	r3, [r7, #28]
    8cb4:	e00c      	b.n	8cd0 <cc2400_repeater+0x124>
				buf[i] = cc2400_get8(FIFOREG);
    8cb6:	2070      	movs	r0, #112	; 0x70
    8cb8:	f000 ff28 	bl	9b0c <cc2400_get8>
    8cbc:	4603      	mov	r3, r0
    8cbe:	4619      	mov	r1, r3
    8cc0:	68fa      	ldr	r2, [r7, #12]
    8cc2:	69fb      	ldr	r3, [r7, #28]
    8cc4:	4413      	add	r3, r2
    8cc6:	460a      	mov	r2, r1
    8cc8:	701a      	strb	r2, [r3, #0]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    8cca:	69fb      	ldr	r3, [r7, #28]
    8ccc:	3301      	adds	r3, #1
    8cce:	61fb      	str	r3, [r7, #28]
    8cd0:	7dba      	ldrb	r2, [r7, #22]
    8cd2:	69fb      	ldr	r3, [r7, #28]
    8cd4:	429a      	cmp	r2, r3
    8cd6:	dcee      	bgt.n	8cb6 <cc2400_repeater+0x10a>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    8cd8:	f000 ffbc 	bl	9c54 <cc2400_status>
    8cdc:	4603      	mov	r3, r0
    8cde:	f003 0308 	and.w	r3, r3, #8
    8ce2:	2b00      	cmp	r3, #0
    8ce4:	d003      	beq.n	8cee <cc2400_repeater+0x142>
				break;
    8ce6:	bf00      	nop
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    8ce8:	4b4b      	ldr	r3, [pc, #300]	; (8e18 <cc2400_repeater+0x26c>)
    8cea:	61fb      	str	r3, [r7, #28]
    8cec:	e000      	b.n	8cf0 <cc2400_repeater+0x144>
			USRLED_SET;
			for (i = 0; i < len; i++)
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
				break;
		}
    8cee:	e7c5      	b.n	8c7c <cc2400_repeater+0xd0>
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    8cf0:	69fb      	ldr	r3, [r7, #28]
    8cf2:	3b01      	subs	r3, #1
    8cf4:	61fb      	str	r3, [r7, #28]
    8cf6:	69fb      	ldr	r3, [r7, #28]
    8cf8:	2b00      	cmp	r3, #0
    8cfa:	d1f9      	bne.n	8cf0 <cc2400_repeater+0x144>
		USRLED_CLR;
    8cfc:	4b44      	ldr	r3, [pc, #272]	; (8e10 <cc2400_repeater+0x264>)
    8cfe:	2202      	movs	r2, #2
    8d00:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    8d02:	4b43      	ldr	r3, [pc, #268]	; (8e10 <cc2400_repeater+0x264>)
    8d04:	2210      	movs	r2, #16
    8d06:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    8d08:	2064      	movs	r0, #100	; 0x64
    8d0a:	f000 ffad 	bl	9c68 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8d0e:	bf00      	nop
    8d10:	f000 ffa0 	bl	9c54 <cc2400_status>
    8d14:	4603      	mov	r3, r0
    8d16:	f003 0304 	and.w	r3, r3, #4
    8d1a:	2b00      	cmp	r3, #0
    8d1c:	d1f8      	bne.n	8d10 <cc2400_repeater+0x164>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8d1e:	bf00      	nop
    8d20:	f000 ff98 	bl	9c54 <cc2400_status>
    8d24:	4603      	mov	r3, r0
    8d26:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8d2a:	2b00      	cmp	r3, #0
    8d2c:	d0f8      	beq.n	8d20 <cc2400_repeater+0x174>
		cc2400_set(FSDIV, *chan_ptr);
    8d2e:	687b      	ldr	r3, [r7, #4]
    8d30:	881b      	ldrh	r3, [r3, #0]
    8d32:	b29b      	uxth	r3, r3
    8d34:	2002      	movs	r0, #2
    8d36:	4619      	mov	r1, r3
    8d38:	f000 fed4 	bl	9ae4 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8d3c:	bf00      	nop
    8d3e:	f000 ff89 	bl	9c54 <cc2400_status>
    8d42:	4603      	mov	r3, r0
    8d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8d48:	2b00      	cmp	r3, #0
    8d4a:	d0f8      	beq.n	8d3e <cc2400_repeater+0x192>
		cc2400_strobe(SFSON);
    8d4c:	2061      	movs	r0, #97	; 0x61
    8d4e:	f000 ff8b 	bl	9c68 <cc2400_strobe>
		TXLED_SET;
    8d52:	4b2e      	ldr	r3, [pc, #184]	; (8e0c <cc2400_repeater+0x260>)
    8d54:	f44f 7280 	mov.w	r2, #256	; 0x100
    8d58:	601a      	str	r2, [r3, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    8d5a:	7dbb      	ldrb	r3, [r7, #22]
    8d5c:	3b01      	subs	r3, #1
    8d5e:	b2da      	uxtb	r2, r3
    8d60:	68fb      	ldr	r3, [r7, #12]
    8d62:	701a      	strb	r2, [r3, #0]
		buf[1] = 1; // reply
    8d64:	68fb      	ldr	r3, [r7, #12]
    8d66:	2201      	movs	r2, #1
    8d68:	705a      	strb	r2, [r3, #1]
		for (pa = 0; pa < 8; pa++) {
    8d6a:	2300      	movs	r3, #0
    8d6c:	75fb      	strb	r3, [r7, #23]
    8d6e:	e039      	b.n	8de4 <cc2400_repeater+0x238>
			cc2400_set(FREND, 8 | pa);
    8d70:	7dfb      	ldrb	r3, [r7, #23]
    8d72:	f043 0308 	orr.w	r3, r3, #8
    8d76:	b2db      	uxtb	r3, r3
    8d78:	b29b      	uxth	r3, r3
    8d7a:	2005      	movs	r0, #5
    8d7c:	4619      	mov	r1, r3
    8d7e:	f000 feb1 	bl	9ae4 <cc2400_set>
			buf[20] = pa;
    8d82:	68fb      	ldr	r3, [r7, #12]
    8d84:	7dfa      	ldrb	r2, [r7, #23]
    8d86:	751a      	strb	r2, [r3, #20]
			for (i = 0; i < 16; i++) {
    8d88:	2300      	movs	r3, #0
    8d8a:	61fb      	str	r3, [r7, #28]
    8d8c:	e024      	b.n	8dd8 <cc2400_repeater+0x22c>
				buf[21] = i;
    8d8e:	69fb      	ldr	r3, [r7, #28]
    8d90:	b2da      	uxtb	r2, r3
    8d92:	68fb      	ldr	r3, [r7, #12]
    8d94:	755a      	strb	r2, [r3, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8d96:	bf00      	nop
    8d98:	200e      	movs	r0, #14
    8d9a:	f000 fe8d 	bl	9ab8 <cc2400_get>
    8d9e:	4603      	mov	r3, r0
    8da0:	f003 031f 	and.w	r3, r3, #31
    8da4:	2b0f      	cmp	r3, #15
    8da6:	d1f7      	bne.n	8d98 <cc2400_repeater+0x1ec>
					for (j = 0; j < len; j++)
    8da8:	2300      	movs	r3, #0
    8daa:	61bb      	str	r3, [r7, #24]
    8dac:	e00a      	b.n	8dc4 <cc2400_repeater+0x218>
						cc2400_set8(FIFOREG, buf[j]);
    8dae:	68fa      	ldr	r2, [r7, #12]
    8db0:	69bb      	ldr	r3, [r7, #24]
    8db2:	4413      	add	r3, r2
    8db4:	781b      	ldrb	r3, [r3, #0]
    8db6:	2070      	movs	r0, #112	; 0x70
    8db8:	4619      	mov	r1, r3
    8dba:	f000 fec1 	bl	9b40 <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
					for (j = 0; j < len; j++)
    8dbe:	69bb      	ldr	r3, [r7, #24]
    8dc0:	3301      	adds	r3, #1
    8dc2:	61bb      	str	r3, [r7, #24]
    8dc4:	7dba      	ldrb	r2, [r7, #22]
    8dc6:	69bb      	ldr	r3, [r7, #24]
    8dc8:	429a      	cmp	r2, r3
    8dca:	dcf0      	bgt.n	8dae <cc2400_repeater+0x202>
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    8dcc:	2063      	movs	r0, #99	; 0x63
    8dce:	f000 ff4b 	bl	9c68 <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    8dd2:	69fb      	ldr	r3, [r7, #28]
    8dd4:	3301      	adds	r3, #1
    8dd6:	61fb      	str	r3, [r7, #28]
    8dd8:	69fb      	ldr	r3, [r7, #28]
    8dda:	2b0f      	cmp	r3, #15
    8ddc:	ddd7      	ble.n	8d8e <cc2400_repeater+0x1e2>
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    8dde:	7dfb      	ldrb	r3, [r7, #23]
    8de0:	3301      	adds	r3, #1
    8de2:	75fb      	strb	r3, [r7, #23]
    8de4:	7dfb      	ldrb	r3, [r7, #23]
    8de6:	2b07      	cmp	r3, #7
    8de8:	d9c2      	bls.n	8d70 <cc2400_repeater+0x1c4>
					for (j = 0; j < len; j++)
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    8dea:	4b09      	ldr	r3, [pc, #36]	; (8e10 <cc2400_repeater+0x264>)
    8dec:	f44f 7280 	mov.w	r2, #256	; 0x100
    8df0:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    8df2:	2064      	movs	r0, #100	; 0x64
    8df4:	f000 ff38 	bl	9c68 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8df8:	bf00      	nop
    8dfa:	f000 ff2b 	bl	9c54 <cc2400_status>
    8dfe:	4603      	mov	r3, r0
    8e00:	f003 0304 	and.w	r3, r3, #4
    8e04:	2b00      	cmp	r3, #0
    8e06:	d1f8      	bne.n	8dfa <cc2400_repeater+0x24e>
	}
    8e08:	e6f3      	b.n	8bf2 <cc2400_repeater+0x46>
    8e0a:	bf00      	nop
    8e0c:	2009c038 	.word	0x2009c038
    8e10:	2009c03c 	.word	0x2009c03c
    8e14:	2009c058 	.word	0x2009c058
    8e18:	001e8480 	.word	0x001e8480

00008e1c <cc2400_txtest>:
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    8e1c:	b580      	push	{r7, lr}
    8e1e:	b084      	sub	sp, #16
    8e20:	af00      	add	r7, sp, #0
    8e22:	6078      	str	r0, [r7, #4]
    8e24:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    8e26:	687b      	ldr	r3, [r7, #4]
    8e28:	781b      	ldrb	r3, [r3, #0]
    8e2a:	b2db      	uxtb	r3, r3
    8e2c:	2b00      	cmp	r3, #0
    8e2e:	d102      	bne.n	8e36 <cc2400_txtest+0x1a>
		mdmctrl = 0x0040; // 160 kHz frequency deviation
    8e30:	2340      	movs	r3, #64	; 0x40
    8e32:	81fb      	strh	r3, [r7, #14]
    8e34:	e008      	b.n	8e48 <cc2400_txtest+0x2c>
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    8e36:	687b      	ldr	r3, [r7, #4]
    8e38:	781b      	ldrb	r3, [r3, #0]
    8e3a:	b2db      	uxtb	r3, r3
    8e3c:	2b01      	cmp	r3, #1
    8e3e:	d102      	bne.n	8e46 <cc2400_txtest+0x2a>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    8e40:	2340      	movs	r3, #64	; 0x40
    8e42:	81fb      	strh	r3, [r7, #14]
    8e44:	e000      	b.n	8e48 <cc2400_txtest+0x2c>
	} else {
		/* oops */
		return;
    8e46:	e035      	b.n	8eb4 <cc2400_txtest+0x98>
	}
	cc2400_set(LMTST,   0x2b22);
    8e48:	2012      	movs	r0, #18
    8e4a:	f642 3122 	movw	r1, #11042	; 0x2b22
    8e4e:	f000 fe49 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    8e52:	2014      	movs	r0, #20
    8e54:	f243 314b 	movw	r1, #13131	; 0x334b
    8e58:	f000 fe44 	bl	9ae4 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    8e5c:	2020      	movs	r0, #32
    8e5e:	f640 51f1 	movw	r1, #3569	; 0xdf1
    8e62:	f000 fe3f 	bl	9ae4 <cc2400_set>
	cc2400_set(FSDIV,   2435);
    8e66:	2002      	movs	r0, #2
    8e68:	f640 1183 	movw	r1, #2435	; 0x983
    8e6c:	f000 fe3a 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl); 
    8e70:	89fb      	ldrh	r3, [r7, #14]
    8e72:	2003      	movs	r0, #3
    8e74:	4619      	mov	r1, r3
    8e76:	f000 fe35 	bl	9ae4 <cc2400_set>
	
//	cc2400_set(FREND, 8 | 0);
	
	while (!(cc2400_status() & XOSC16M_STABLE));
    8e7a:	bf00      	nop
    8e7c:	f000 feea 	bl	9c54 <cc2400_status>
    8e80:	4603      	mov	r3, r0
    8e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8e86:	2b00      	cmp	r3, #0
    8e88:	d0f8      	beq.n	8e7c <cc2400_txtest+0x60>
	cc2400_strobe(SFSON);
    8e8a:	2061      	movs	r0, #97	; 0x61
    8e8c:	f000 feec 	bl	9c68 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8e90:	bf00      	nop
    8e92:	f000 fedf 	bl	9c54 <cc2400_status>
    8e96:	4603      	mov	r3, r0
    8e98:	f003 0304 	and.w	r3, r3, #4
    8e9c:	2b00      	cmp	r3, #0
    8e9e:	d0f8      	beq.n	8e92 <cc2400_txtest+0x76>
	TXLED_SET;
    8ea0:	4b06      	ldr	r3, [pc, #24]	; (8ebc <cc2400_txtest+0xa0>)
    8ea2:	f44f 7280 	mov.w	r2, #256	; 0x100
    8ea6:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    8ea8:	2063      	movs	r0, #99	; 0x63
    8eaa:	f000 fedd 	bl	9c68 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8eae:	4b04      	ldr	r3, [pc, #16]	; (8ec0 <cc2400_txtest+0xa4>)
    8eb0:	2280      	movs	r2, #128	; 0x80
    8eb2:	601a      	str	r2, [r3, #0]
#endif
#endif
}
    8eb4:	3710      	adds	r7, #16
    8eb6:	46bd      	mov	sp, r7
    8eb8:	bd80      	pop	{r7, pc}
    8eba:	bf00      	nop
    8ebc:	2009c038 	.word	0x2009c038
    8ec0:	2009c058 	.word	0x2009c058

00008ec4 <ssp_start>:
typedef struct _ego_packet_t {
	u8 rxbuf[EGO_PACKET_LEN];
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
    8ec4:	b480      	push	{r7}
    8ec6:	af00      	add	r7, sp, #0
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    8ec8:	4b08      	ldr	r3, [pc, #32]	; (8eec <ssp_start+0x28>)
    8eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8ece:	601a      	str	r2, [r3, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    8ed0:	4a07      	ldr	r2, [pc, #28]	; (8ef0 <ssp_start+0x2c>)
    8ed2:	4b07      	ldr	r3, [pc, #28]	; (8ef0 <ssp_start+0x2c>)
    8ed4:	681b      	ldr	r3, [r3, #0]
    8ed6:	f043 0302 	orr.w	r3, r3, #2
    8eda:	6013      	str	r3, [r2, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    8edc:	4b05      	ldr	r3, [pc, #20]	; (8ef4 <ssp_start+0x30>)
    8ede:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8ee2:	601a      	str	r2, [r3, #0]
}
    8ee4:	46bd      	mov	sp, r7
    8ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
    8eea:	4770      	bx	lr
    8eec:	2009c098 	.word	0x2009c098
    8ef0:	40030004 	.word	0x40030004
    8ef4:	2009c09c 	.word	0x2009c09c

00008ef8 <ssp_stop>:

static void ssp_stop() {
    8ef8:	b480      	push	{r7}
    8efa:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    8efc:	4b06      	ldr	r3, [pc, #24]	; (8f18 <ssp_stop+0x20>)
    8efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8f02:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    8f04:	4a05      	ldr	r2, [pc, #20]	; (8f1c <ssp_stop+0x24>)
    8f06:	4b05      	ldr	r3, [pc, #20]	; (8f1c <ssp_stop+0x24>)
    8f08:	681b      	ldr	r3, [r3, #0]
    8f0a:	f023 0302 	bic.w	r3, r3, #2
    8f0e:	6013      	str	r3, [r2, #0]
}
    8f10:	46bd      	mov	sp, r7
    8f12:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f16:	4770      	bx	lr
    8f18:	2009c098 	.word	0x2009c098
    8f1c:	40030004 	.word	0x40030004

00008f20 <ego_init>:

static void ego_init(void) {
    8f20:	b580      	push	{r7, lr}
    8f22:	af00      	add	r7, sp, #0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    8f24:	4b03      	ldr	r3, [pc, #12]	; (8f34 <ego_init+0x14>)
    8f26:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8f2a:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    8f2c:	f000 fd08 	bl	9940 <dio_ssp_init>
}
    8f30:	bd80      	pop	{r7, pc}
    8f32:	bf00      	nop
    8f34:	e000e100 	.word	0xe000e100

00008f38 <ego_deinit>:

static void ego_deinit(void) {
    8f38:	b580      	push	{r7, lr}
    8f3a:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    8f3c:	2064      	movs	r0, #100	; 0x64
    8f3e:	f000 fe93 	bl	9c68 <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    8f42:	f7ff ffd9 	bl	8ef8 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    8f46:	4b02      	ldr	r3, [pc, #8]	; (8f50 <ego_deinit+0x18>)
    8f48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8f4c:	601a      	str	r2, [r3, #0]
}
    8f4e:	bd80      	pop	{r7, pc}
    8f50:	e000e180 	.word	0xe000e180

00008f54 <rf_on>:

static void rf_on(void) {
    8f54:	b580      	push	{r7, lr}
    8f56:	af00      	add	r7, sp, #0
	cc2400_set(MANAND,  0x7fff);
    8f58:	200d      	movs	r0, #13
    8f5a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    8f5e:	f000 fdc1 	bl	9ae4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    8f62:	2012      	movs	r0, #18
    8f64:	f642 3122 	movw	r1, #11042	; 0x2b22
    8f68:	f000 fdbc 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    8f6c:	2014      	movs	r0, #20
    8f6e:	f241 314b 	movw	r1, #4939	; 0x134b
    8f72:	f000 fdb7 	bl	9ae4 <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    8f76:	2020      	movs	r0, #32
    8f78:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    8f7c:	f000 fdb2 	bl	9ae4 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    8f80:	4b1e      	ldr	r3, [pc, #120]	; (8ffc <rf_on+0xa8>)
    8f82:	881b      	ldrh	r3, [r3, #0]
    8f84:	b29b      	uxth	r3, r3
    8f86:	3b01      	subs	r3, #1
    8f88:	b29b      	uxth	r3, r3
    8f8a:	2002      	movs	r0, #2
    8f8c:	4619      	mov	r1, r3
    8f8e:	f000 fda9 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    8f92:	2003      	movs	r0, #3
    8f94:	2126      	movs	r1, #38	; 0x26
    8f96:	f000 fda5 	bl	9ae4 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    8f9a:	2021      	movs	r0, #33	; 0x21
    8f9c:	2103      	movs	r1, #3
    8f9e:	f000 fda1 	bl	9ae4 <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    8fa2:	202d      	movs	r0, #45	; 0x2d
    8fa4:	f246 310f 	movw	r1, #25359	; 0x630f
    8fa8:	f000 fd9c 	bl	9ae4 <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    8fac:	202c      	movs	r0, #44	; 0x2c
    8fae:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    8fb2:	f000 fd97 	bl	9ae4 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    8fb6:	bf00      	nop
    8fb8:	f000 fe4c 	bl	9c54 <cc2400_status>
    8fbc:	4603      	mov	r3, r0
    8fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8fc2:	2b00      	cmp	r3, #0
    8fc4:	d0f8      	beq.n	8fb8 <rf_on+0x64>

	ssp_start();
    8fc6:	f7ff ff7d 	bl	8ec4 <ssp_start>

	cc2400_strobe(SFSON);
    8fca:	2061      	movs	r0, #97	; 0x61
    8fcc:	f000 fe4c 	bl	9c68 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8fd0:	bf00      	nop
    8fd2:	f000 fe3f 	bl	9c54 <cc2400_status>
    8fd6:	4603      	mov	r3, r0
    8fd8:	f003 0304 	and.w	r3, r3, #4
    8fdc:	2b00      	cmp	r3, #0
    8fde:	d0f8      	beq.n	8fd2 <rf_on+0x7e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8fe0:	bf00      	nop
    8fe2:	200e      	movs	r0, #14
    8fe4:	f000 fd68 	bl	9ab8 <cc2400_get>
    8fe8:	4603      	mov	r3, r0
    8fea:	f003 031f 	and.w	r3, r3, #31
    8fee:	2b0f      	cmp	r3, #15
    8ff0:	d1f7      	bne.n	8fe2 <rf_on+0x8e>

	cc2400_strobe(SRX);
    8ff2:	2062      	movs	r0, #98	; 0x62
    8ff4:	f000 fe38 	bl	9c68 <cc2400_strobe>
}
    8ff8:	bd80      	pop	{r7, pc}
    8ffa:	bf00      	nop
    8ffc:	1000049c 	.word	0x1000049c

00009000 <do_rx>:

void do_rx(ego_packet_t *packet) {
    9000:	b480      	push	{r7}
    9002:	b085      	sub	sp, #20
    9004:	af00      	add	r7, sp, #0
    9006:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    9008:	2300      	movs	r3, #0
    900a:	60fb      	str	r3, [r7, #12]
    900c:	e011      	b.n	9032 <do_rx+0x32>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    900e:	bf00      	nop
    9010:	4b0c      	ldr	r3, [pc, #48]	; (9044 <do_rx+0x44>)
    9012:	681b      	ldr	r3, [r3, #0]
    9014:	f003 0304 	and.w	r3, r3, #4
    9018:	2b00      	cmp	r3, #0
    901a:	d0f9      	beq.n	9010 <do_rx+0x10>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    901c:	4b0a      	ldr	r3, [pc, #40]	; (9048 <do_rx+0x48>)
    901e:	681b      	ldr	r3, [r3, #0]
    9020:	b2d9      	uxtb	r1, r3
    9022:	687a      	ldr	r2, [r7, #4]
    9024:	68fb      	ldr	r3, [r7, #12]
    9026:	4413      	add	r3, r2
    9028:	460a      	mov	r2, r1
    902a:	701a      	strb	r2, [r3, #0]
	cc2400_strobe(SRX);
}

void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    902c:	68fb      	ldr	r3, [r7, #12]
    902e:	3301      	adds	r3, #1
    9030:	60fb      	str	r3, [r7, #12]
    9032:	68fb      	ldr	r3, [r7, #12]
    9034:	2b23      	cmp	r3, #35	; 0x23
    9036:	ddea      	ble.n	900e <do_rx+0xe>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    9038:	3714      	adds	r7, #20
    903a:	46bd      	mov	sp, r7
    903c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9040:	4770      	bx	lr
    9042:	bf00      	nop
    9044:	4003000c 	.word	0x4003000c
    9048:	40030008 	.word	0x40030008

0000904c <sync_received>:

static inline int sync_received(void) {
    904c:	b580      	push	{r7, lr}
    904e:	af00      	add	r7, sp, #0
	return cc2400_status() & SYNC_RECEIVED;
    9050:	f000 fe00 	bl	9c54 <cc2400_status>
    9054:	4603      	mov	r3, r0
    9056:	f003 0310 	and.w	r3, r3, #16
}
    905a:	4618      	mov	r0, r3
    905c:	bd80      	pop	{r7, pc}
    905e:	bf00      	nop

00009060 <sleep_ms>:

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    9060:	b480      	push	{r7}
    9062:	b083      	sub	sp, #12
    9064:	af00      	add	r7, sp, #0
    9066:	6078      	str	r0, [r7, #4]
    9068:	6039      	str	r1, [r7, #0]
	state->sleep_start = CLK100NS;
    906a:	4b0c      	ldr	r3, [pc, #48]	; (909c <sleep_ms+0x3c>)
    906c:	681b      	ldr	r3, [r3, #0]
    906e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9072:	f640 4235 	movw	r2, #3125	; 0xc35
    9076:	fb02 f203 	mul.w	r2, r2, r3
    907a:	4b09      	ldr	r3, [pc, #36]	; (90a0 <sleep_ms+0x40>)
    907c:	681b      	ldr	r3, [r3, #0]
    907e:	441a      	add	r2, r3
    9080:	687b      	ldr	r3, [r7, #4]
    9082:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    9084:	683b      	ldr	r3, [r7, #0]
    9086:	f242 7210 	movw	r2, #10000	; 0x2710
    908a:	fb02 f203 	mul.w	r2, r2, r3
    908e:	687b      	ldr	r3, [r7, #4]
    9090:	60da      	str	r2, [r3, #12]
}
    9092:	370c      	adds	r7, #12
    9094:	46bd      	mov	sp, r7
    9096:	f85d 7b04 	ldr.w	r7, [sp], #4
    909a:	4770      	bx	lr
    909c:	10000be4 	.word	0x10000be4
    90a0:	40004008 	.word	0x40004008

000090a4 <sleep_ms_anchor>:

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
    90a4:	b480      	push	{r7}
    90a6:	b083      	sub	sp, #12
    90a8:	af00      	add	r7, sp, #0
    90aa:	6078      	str	r0, [r7, #4]
    90ac:	6039      	str	r1, [r7, #0]
	state->sleep_start = state->anchor;
    90ae:	687b      	ldr	r3, [r7, #4]
    90b0:	699a      	ldr	r2, [r3, #24]
    90b2:	687b      	ldr	r3, [r7, #4]
    90b4:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    90b6:	683b      	ldr	r3, [r7, #0]
    90b8:	f242 7210 	movw	r2, #10000	; 0x2710
    90bc:	fb02 f203 	mul.w	r2, r2, r3
    90c0:	687b      	ldr	r3, [r7, #4]
    90c2:	60da      	str	r2, [r3, #12]
}
    90c4:	370c      	adds	r7, #12
    90c6:	46bd      	mov	sp, r7
    90c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    90cc:	4770      	bx	lr
    90ce:	bf00      	nop

000090d0 <sleep_elapsed>:

static inline int sleep_elapsed(ego_fsm_state_t *state) {
    90d0:	b480      	push	{r7}
    90d2:	b085      	sub	sp, #20
    90d4:	af00      	add	r7, sp, #0
    90d6:	6078      	str	r0, [r7, #4]
	u32 now = CLK100NS;
    90d8:	4b13      	ldr	r3, [pc, #76]	; (9128 <sleep_elapsed+0x58>)
    90da:	681b      	ldr	r3, [r3, #0]
    90dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    90e0:	f640 4235 	movw	r2, #3125	; 0xc35
    90e4:	fb02 f203 	mul.w	r2, r2, r3
    90e8:	4b10      	ldr	r3, [pc, #64]	; (912c <sleep_elapsed+0x5c>)
    90ea:	681b      	ldr	r3, [r3, #0]
    90ec:	4413      	add	r3, r2
    90ee:	60fb      	str	r3, [r7, #12]
	if (now < state->sleep_start)
    90f0:	687b      	ldr	r3, [r7, #4]
    90f2:	689a      	ldr	r2, [r3, #8]
    90f4:	68fb      	ldr	r3, [r7, #12]
    90f6:	429a      	cmp	r2, r3
    90f8:	d905      	bls.n	9106 <sleep_elapsed+0x36>
		now += 3276800000;
    90fa:	68fb      	ldr	r3, [r7, #12]
    90fc:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    9100:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    9104:	60fb      	str	r3, [r7, #12]
	return (now - state->sleep_start) >= state->sleep_duration;
    9106:	687b      	ldr	r3, [r7, #4]
    9108:	689b      	ldr	r3, [r3, #8]
    910a:	68fa      	ldr	r2, [r7, #12]
    910c:	1ad2      	subs	r2, r2, r3
    910e:	687b      	ldr	r3, [r7, #4]
    9110:	68db      	ldr	r3, [r3, #12]
    9112:	429a      	cmp	r2, r3
    9114:	bf2c      	ite	cs
    9116:	2301      	movcs	r3, #1
    9118:	2300      	movcc	r3, #0
    911a:	b2db      	uxtb	r3, r3
}
    911c:	4618      	mov	r0, r3
    911e:	3714      	adds	r7, #20
    9120:	46bd      	mov	sp, r7
    9122:	f85d 7b04 	ldr.w	r7, [sp], #4
    9126:	4770      	bx	lr
    9128:	10000be4 	.word	0x10000be4
    912c:	40004008 	.word	0x40004008

00009130 <nop_state>:

/////////////
// states

// do nothing
void nop_state(ego_fsm_state_t *state) {
    9130:	b480      	push	{r7}
    9132:	b083      	sub	sp, #12
    9134:	af00      	add	r7, sp, #0
    9136:	6078      	str	r0, [r7, #4]
}
    9138:	370c      	adds	r7, #12
    913a:	46bd      	mov	sp, r7
    913c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9140:	4770      	bx	lr
    9142:	bf00      	nop

00009144 <init_state>:

// used in follow and jam mode, override the channel supplied by user
void init_state(ego_fsm_state_t *state) {
    9144:	b480      	push	{r7}
    9146:	b083      	sub	sp, #12
    9148:	af00      	add	r7, sp, #0
    914a:	6078      	str	r0, [r7, #4]
	state->channel_index = 0;
    914c:	687b      	ldr	r3, [r7, #4]
    914e:	2200      	movs	r2, #0
    9150:	605a      	str	r2, [r3, #4]
	channel = channels[state->channel_index];
    9152:	687b      	ldr	r3, [r7, #4]
    9154:	685b      	ldr	r3, [r3, #4]
    9156:	4a06      	ldr	r2, [pc, #24]	; (9170 <init_state+0x2c>)
    9158:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    915c:	4b05      	ldr	r3, [pc, #20]	; (9174 <init_state+0x30>)
    915e:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    9160:	687b      	ldr	r3, [r7, #4]
    9162:	2201      	movs	r2, #1
    9164:	701a      	strb	r2, [r3, #0]
}
    9166:	370c      	adds	r7, #12
    9168:	46bd      	mov	sp, r7
    916a:	f85d 7b04 	ldr.w	r7, [sp], #4
    916e:	4770      	bx	lr
    9170:	100008b0 	.word	0x100008b0
    9174:	1000049c 	.word	0x1000049c

00009178 <start_rf_state>:

void start_rf_state(ego_fsm_state_t *state) {
    9178:	b580      	push	{r7, lr}
    917a:	b082      	sub	sp, #8
    917c:	af00      	add	r7, sp, #0
    917e:	6078      	str	r0, [r7, #4]
	rf_on();
    9180:	f7ff fee8 	bl	8f54 <rf_on>
	state->state = EGO_ST_CAP;
    9184:	687b      	ldr	r3, [r7, #4]
    9186:	2202      	movs	r2, #2
    9188:	701a      	strb	r2, [r3, #0]
}
    918a:	3708      	adds	r7, #8
    918c:	46bd      	mov	sp, r7
    918e:	bd80      	pop	{r7, pc}

00009190 <cap_state>:

void cap_state(ego_fsm_state_t *state) {
    9190:	b580      	push	{r7, lr}
    9192:	b08c      	sub	sp, #48	; 0x30
    9194:	af00      	add	r7, sp, #0
    9196:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    9198:	f107 0308 	add.w	r3, r7, #8
    919c:	2200      	movs	r2, #0
    919e:	601a      	str	r2, [r3, #0]
    91a0:	3304      	adds	r3, #4
    91a2:	2200      	movs	r2, #0
    91a4:	601a      	str	r2, [r3, #0]
    91a6:	3304      	adds	r3, #4
    91a8:	2200      	movs	r2, #0
    91aa:	601a      	str	r2, [r3, #0]
    91ac:	3304      	adds	r3, #4
    91ae:	2200      	movs	r2, #0
    91b0:	601a      	str	r2, [r3, #0]
    91b2:	3304      	adds	r3, #4
    91b4:	2200      	movs	r2, #0
    91b6:	601a      	str	r2, [r3, #0]
    91b8:	3304      	adds	r3, #4
    91ba:	2200      	movs	r2, #0
    91bc:	601a      	str	r2, [r3, #0]
    91be:	3304      	adds	r3, #4
    91c0:	2200      	movs	r2, #0
    91c2:	601a      	str	r2, [r3, #0]
    91c4:	3304      	adds	r3, #4
    91c6:	2200      	movs	r2, #0
    91c8:	601a      	str	r2, [r3, #0]
    91ca:	3304      	adds	r3, #4
    91cc:	2200      	movs	r2, #0
    91ce:	601a      	str	r2, [r3, #0]
    91d0:	3304      	adds	r3, #4
    91d2:	2200      	movs	r2, #0
    91d4:	601a      	str	r2, [r3, #0]
    91d6:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    91d8:	4b23      	ldr	r3, [pc, #140]	; (9268 <cap_state+0xd8>)
    91da:	681b      	ldr	r3, [r3, #0]
    91dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    91e0:	f640 4235 	movw	r2, #3125	; 0xc35
    91e4:	fb02 f203 	mul.w	r2, r2, r3
    91e8:	4b20      	ldr	r3, [pc, #128]	; (926c <cap_state+0xdc>)
    91ea:	681b      	ldr	r3, [r3, #0]
    91ec:	4413      	add	r3, r2
	rf_on();
	state->state = EGO_ST_CAP;
}

void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    91ee:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    91f0:	6878      	ldr	r0, [r7, #4]
    91f2:	f7ff ff6d 	bl	90d0 <sleep_elapsed>
    91f6:	4603      	mov	r3, r0
    91f8:	2b00      	cmp	r3, #0
    91fa:	d006      	beq.n	920a <cap_state+0x7a>
		sleep_ms(state, 4);
    91fc:	6878      	ldr	r0, [r7, #4]
    91fe:	2104      	movs	r1, #4
    9200:	f7ff ff2e 	bl	9060 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    9204:	687b      	ldr	r3, [r7, #4]
    9206:	2203      	movs	r2, #3
    9208:	701a      	strb	r2, [r3, #0]
	}

	if (sync_received()) {
    920a:	f7ff ff1f 	bl	904c <sync_received>
    920e:	4603      	mov	r3, r0
    9210:	2b00      	cmp	r3, #0
    9212:	d019      	beq.n	9248 <cap_state+0xb8>
		RXLED_SET;
    9214:	4b16      	ldr	r3, [pc, #88]	; (9270 <cap_state+0xe0>)
    9216:	2210      	movs	r2, #16
    9218:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    921a:	f107 0308 	add.w	r3, r7, #8
    921e:	4618      	mov	r0, r3
    9220:	f7ff feee 	bl	9000 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    9224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9226:	f107 0208 	add.w	r2, r7, #8
    922a:	2006      	movs	r0, #6
    922c:	4611      	mov	r1, r2
    922e:	461a      	mov	r2, r3
    9230:	f7fb fa22 	bl	4678 <enqueue_with_ts>
		RXLED_CLR;
    9234:	4b0f      	ldr	r3, [pc, #60]	; (9274 <cap_state+0xe4>)
    9236:	2210      	movs	r2, #16
    9238:	601a      	str	r2, [r3, #0]

		sleep_ms(state, 6);
    923a:	6878      	ldr	r0, [r7, #4]
    923c:	2106      	movs	r1, #6
    923e:	f7ff ff0f 	bl	9060 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    9242:	687b      	ldr	r3, [r7, #4]
    9244:	2203      	movs	r2, #3
    9246:	701a      	strb	r2, [r3, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    9248:	687b      	ldr	r3, [r7, #4]
    924a:	781b      	ldrb	r3, [r3, #0]
    924c:	2b02      	cmp	r3, #2
    924e:	d007      	beq.n	9260 <cap_state+0xd0>
		cc2400_strobe(SRFOFF);
    9250:	2064      	movs	r0, #100	; 0x64
    9252:	f000 fd09 	bl	9c68 <cc2400_strobe>
		ssp_stop();
    9256:	f7ff fe4f 	bl	8ef8 <ssp_stop>
		state->timer_active = 1;
    925a:	687b      	ldr	r3, [r7, #4]
    925c:	2201      	movs	r2, #1
    925e:	611a      	str	r2, [r3, #16]
	}
}
    9260:	3730      	adds	r7, #48	; 0x30
    9262:	46bd      	mov	sp, r7
    9264:	bd80      	pop	{r7, pc}
    9266:	bf00      	nop
    9268:	10000be4 	.word	0x10000be4
    926c:	40004008 	.word	0x40004008
    9270:	2009c038 	.word	0x2009c038
    9274:	2009c03c 	.word	0x2009c03c

00009278 <sleep_state>:

void sleep_state(ego_fsm_state_t *state) {
    9278:	b580      	push	{r7, lr}
    927a:	b082      	sub	sp, #8
    927c:	af00      	add	r7, sp, #0
    927e:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    9280:	6878      	ldr	r0, [r7, #4]
    9282:	f7ff ff25 	bl	90d0 <sleep_elapsed>
    9286:	4603      	mov	r3, r0
    9288:	2b00      	cmp	r3, #0
    928a:	d01e      	beq.n	92ca <sleep_state+0x52>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    928c:	687b      	ldr	r3, [r7, #4]
    928e:	685b      	ldr	r3, [r3, #4]
    9290:	1c5a      	adds	r2, r3, #1
    9292:	4b0f      	ldr	r3, [pc, #60]	; (92d0 <sleep_state+0x58>)
    9294:	4013      	ands	r3, r2
    9296:	2b00      	cmp	r3, #0
    9298:	da03      	bge.n	92a2 <sleep_state+0x2a>
    929a:	3b01      	subs	r3, #1
    929c:	f063 0303 	orn	r3, r3, #3
    92a0:	3301      	adds	r3, #1
    92a2:	461a      	mov	r2, r3
    92a4:	687b      	ldr	r3, [r7, #4]
    92a6:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    92a8:	687b      	ldr	r3, [r7, #4]
    92aa:	685b      	ldr	r3, [r3, #4]
    92ac:	4a09      	ldr	r2, [pc, #36]	; (92d4 <sleep_state+0x5c>)
    92ae:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    92b2:	4b09      	ldr	r3, [pc, #36]	; (92d8 <sleep_state+0x60>)
    92b4:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    92b6:	6878      	ldr	r0, [r7, #4]
    92b8:	2107      	movs	r1, #7
    92ba:	f7ff fed1 	bl	9060 <sleep_ms>
		state->timer_active = 1;
    92be:	687b      	ldr	r3, [r7, #4]
    92c0:	2201      	movs	r2, #1
    92c2:	611a      	str	r2, [r3, #16]

		state->state = EGO_ST_START_RX;
    92c4:	687b      	ldr	r3, [r7, #4]
    92c6:	2201      	movs	r2, #1
    92c8:	701a      	strb	r2, [r3, #0]
	}
}
    92ca:	3708      	adds	r7, #8
    92cc:	46bd      	mov	sp, r7
    92ce:	bd80      	pop	{r7, pc}
    92d0:	80000003 	.word	0x80000003
    92d4:	100008b0 	.word	0x100008b0
    92d8:	1000049c 	.word	0x1000049c

000092dc <continuous_init_state>:

// continuous cap states (reuses START_RX state)
void continuous_init_state(ego_fsm_state_t *state) {
    92dc:	b480      	push	{r7}
    92de:	b083      	sub	sp, #12
    92e0:	af00      	add	r7, sp, #0
    92e2:	6078      	str	r0, [r7, #4]
	state->state = EGO_ST_START_RX;
    92e4:	687b      	ldr	r3, [r7, #4]
    92e6:	2201      	movs	r2, #1
    92e8:	701a      	strb	r2, [r3, #0]
}
    92ea:	370c      	adds	r7, #12
    92ec:	46bd      	mov	sp, r7
    92ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    92f2:	4770      	bx	lr

000092f4 <continuous_cap_state>:

void continuous_cap_state(ego_fsm_state_t *state) {
    92f4:	b580      	push	{r7, lr}
    92f6:	b08c      	sub	sp, #48	; 0x30
    92f8:	af00      	add	r7, sp, #0
    92fa:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    92fc:	f107 0308 	add.w	r3, r7, #8
    9300:	2200      	movs	r2, #0
    9302:	601a      	str	r2, [r3, #0]
    9304:	3304      	adds	r3, #4
    9306:	2200      	movs	r2, #0
    9308:	601a      	str	r2, [r3, #0]
    930a:	3304      	adds	r3, #4
    930c:	2200      	movs	r2, #0
    930e:	601a      	str	r2, [r3, #0]
    9310:	3304      	adds	r3, #4
    9312:	2200      	movs	r2, #0
    9314:	601a      	str	r2, [r3, #0]
    9316:	3304      	adds	r3, #4
    9318:	2200      	movs	r2, #0
    931a:	601a      	str	r2, [r3, #0]
    931c:	3304      	adds	r3, #4
    931e:	2200      	movs	r2, #0
    9320:	601a      	str	r2, [r3, #0]
    9322:	3304      	adds	r3, #4
    9324:	2200      	movs	r2, #0
    9326:	601a      	str	r2, [r3, #0]
    9328:	3304      	adds	r3, #4
    932a:	2200      	movs	r2, #0
    932c:	601a      	str	r2, [r3, #0]
    932e:	3304      	adds	r3, #4
    9330:	2200      	movs	r2, #0
    9332:	601a      	str	r2, [r3, #0]
    9334:	3304      	adds	r3, #4
    9336:	2200      	movs	r2, #0
    9338:	601a      	str	r2, [r3, #0]
    933a:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    933c:	4b1e      	ldr	r3, [pc, #120]	; (93b8 <continuous_cap_state+0xc4>)
    933e:	681b      	ldr	r3, [r3, #0]
    9340:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9344:	f640 4235 	movw	r2, #3125	; 0xc35
    9348:	fb02 f203 	mul.w	r2, r2, r3
    934c:	4b1b      	ldr	r3, [pc, #108]	; (93bc <continuous_cap_state+0xc8>)
    934e:	681b      	ldr	r3, [r3, #0]
    9350:	4413      	add	r3, r2
void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    9352:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    9354:	f7ff fe7a 	bl	904c <sync_received>
    9358:	4603      	mov	r3, r0
    935a:	2b00      	cmp	r3, #0
    935c:	d029      	beq.n	93b2 <continuous_cap_state+0xbe>
		RXLED_SET;
    935e:	4b18      	ldr	r3, [pc, #96]	; (93c0 <continuous_cap_state+0xcc>)
    9360:	2210      	movs	r2, #16
    9362:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    9364:	f107 0308 	add.w	r3, r7, #8
    9368:	4618      	mov	r0, r3
    936a:	f7ff fe49 	bl	9000 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    936e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9370:	f107 0208 	add.w	r2, r7, #8
    9374:	2006      	movs	r0, #6
    9376:	4611      	mov	r1, r2
    9378:	461a      	mov	r2, r3
    937a:	f7fb f97d 	bl	4678 <enqueue_with_ts>
		RXLED_CLR;
    937e:	4b11      	ldr	r3, [pc, #68]	; (93c4 <continuous_cap_state+0xd0>)
    9380:	2210      	movs	r2, #16
    9382:	601a      	str	r2, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    9384:	2061      	movs	r0, #97	; 0x61
    9386:	f000 fc6f 	bl	9c68 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    938a:	bf00      	nop
    938c:	f000 fc62 	bl	9c54 <cc2400_status>
    9390:	4603      	mov	r3, r0
    9392:	f003 0304 	and.w	r3, r3, #4
    9396:	2b00      	cmp	r3, #0
    9398:	d0f8      	beq.n	938c <continuous_cap_state+0x98>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    939a:	bf00      	nop
    939c:	200e      	movs	r0, #14
    939e:	f000 fb8b 	bl	9ab8 <cc2400_get>
    93a2:	4603      	mov	r3, r0
    93a4:	f003 031f 	and.w	r3, r3, #31
    93a8:	2b0f      	cmp	r3, #15
    93aa:	d1f7      	bne.n	939c <continuous_cap_state+0xa8>
		cc2400_strobe(SRX);
    93ac:	2062      	movs	r0, #98	; 0x62
    93ae:	f000 fc5b 	bl	9c68 <cc2400_strobe>
	}
}
    93b2:	3730      	adds	r7, #48	; 0x30
    93b4:	46bd      	mov	sp, r7
    93b6:	bd80      	pop	{r7, pc}
    93b8:	10000be4 	.word	0x10000be4
    93bc:	40004008 	.word	0x40004008
    93c0:	2009c038 	.word	0x2009c038
    93c4:	2009c03c 	.word	0x2009c03c

000093c8 <jam_cap_state>:

// jammer states
void jam_cap_state(ego_fsm_state_t *state) {
    93c8:	b580      	push	{r7, lr}
    93ca:	b082      	sub	sp, #8
    93cc:	af00      	add	r7, sp, #0
    93ce:	6078      	str	r0, [r7, #4]
	if (sync_received()) {
    93d0:	f7ff fe3c 	bl	904c <sync_received>
    93d4:	4603      	mov	r3, r0
    93d6:	2b00      	cmp	r3, #0
    93d8:	d012      	beq.n	9400 <jam_cap_state+0x38>
		state->state = EGO_ST_START_JAMMING;
    93da:	687b      	ldr	r3, [r7, #4]
    93dc:	2204      	movs	r2, #4
    93de:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 1;
    93e0:	687b      	ldr	r3, [r7, #4]
    93e2:	2201      	movs	r2, #1
    93e4:	615a      	str	r2, [r3, #20]
		state->anchor = CLK100NS;
    93e6:	4b16      	ldr	r3, [pc, #88]	; (9440 <jam_cap_state+0x78>)
    93e8:	681b      	ldr	r3, [r3, #0]
    93ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
    93ee:	f640 4235 	movw	r2, #3125	; 0xc35
    93f2:	fb02 f203 	mul.w	r2, r2, r3
    93f6:	4b13      	ldr	r3, [pc, #76]	; (9444 <jam_cap_state+0x7c>)
    93f8:	681b      	ldr	r3, [r3, #0]
    93fa:	441a      	add	r2, r3
    93fc:	687b      	ldr	r3, [r7, #4]
    93fe:	619a      	str	r2, [r3, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    9400:	687b      	ldr	r3, [r7, #4]
    9402:	691b      	ldr	r3, [r3, #16]
    9404:	2b00      	cmp	r3, #0
    9406:	d00f      	beq.n	9428 <jam_cap_state+0x60>
    9408:	6878      	ldr	r0, [r7, #4]
    940a:	f7ff fe61 	bl	90d0 <sleep_elapsed>
    940e:	4603      	mov	r3, r0
    9410:	2b00      	cmp	r3, #0
    9412:	d009      	beq.n	9428 <jam_cap_state+0x60>
		state->state = EGO_ST_START_JAMMING;
    9414:	687b      	ldr	r3, [r7, #4]
    9416:	2204      	movs	r2, #4
    9418:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 0;
    941a:	687b      	ldr	r3, [r7, #4]
    941c:	2200      	movs	r2, #0
    941e:	615a      	str	r2, [r3, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    9420:	6878      	ldr	r0, [r7, #4]
    9422:	210b      	movs	r1, #11
    9424:	f7ff fe1c 	bl	9060 <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    9428:	687b      	ldr	r3, [r7, #4]
    942a:	781b      	ldrb	r3, [r3, #0]
    942c:	2b02      	cmp	r3, #2
    942e:	d004      	beq.n	943a <jam_cap_state+0x72>
		cc2400_strobe(SRFOFF);
    9430:	2064      	movs	r0, #100	; 0x64
    9432:	f000 fc19 	bl	9c68 <cc2400_strobe>
		ssp_stop();
    9436:	f7ff fd5f 	bl	8ef8 <ssp_stop>
	}
}
    943a:	3708      	adds	r7, #8
    943c:	46bd      	mov	sp, r7
    943e:	bd80      	pop	{r7, pc}
    9440:	10000be4 	.word	0x10000be4
    9444:	40004008 	.word	0x40004008

00009448 <start_jamming_state>:

void start_jamming_state(ego_fsm_state_t *state) {
    9448:	b580      	push	{r7, lr}
    944a:	b082      	sub	sp, #8
    944c:	af00      	add	r7, sp, #0
    944e:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    9450:	200d      	movs	r0, #13
    9452:	f647 71ff 	movw	r1, #32767	; 0x7fff
    9456:	f000 fb45 	bl	9ae4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    945a:	2012      	movs	r0, #18
    945c:	f642 3122 	movw	r1, #11042	; 0x2b22
    9460:	f000 fb40 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    9464:	2014      	movs	r0, #20
    9466:	f243 314b 	movw	r1, #13131	; 0x334b
    946a:	f000 fb3b 	bl	9ae4 <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    946e:	2020      	movs	r0, #32
    9470:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    9474:	f000 fb36 	bl	9ae4 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    9478:	4b21      	ldr	r3, [pc, #132]	; (9500 <start_jamming_state+0xb8>)
    947a:	881b      	ldrh	r3, [r3, #0]
    947c:	b29b      	uxth	r3, r3
    947e:	2002      	movs	r0, #2
    9480:	4619      	mov	r1, r3
    9482:	f000 fb2f 	bl	9ae4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    9486:	2003      	movs	r0, #3
    9488:	2126      	movs	r1, #38	; 0x26
    948a:	f000 fb2b 	bl	9ae4 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    948e:	2021      	movs	r0, #33	; 0x21
    9490:	2103      	movs	r1, #3
    9492:	f000 fb27 	bl	9ae4 <cc2400_set>
	cc2400_set(FREND, 0xf);
    9496:	2005      	movs	r0, #5
    9498:	210f      	movs	r1, #15
    949a:	f000 fb23 	bl	9ae4 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    949e:	bf00      	nop
    94a0:	f000 fbd8 	bl	9c54 <cc2400_status>
    94a4:	4603      	mov	r3, r0
    94a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    94aa:	2b00      	cmp	r3, #0
    94ac:	d0f8      	beq.n	94a0 <start_jamming_state+0x58>

	cc2400_strobe(SFSON);
    94ae:	2061      	movs	r0, #97	; 0x61
    94b0:	f000 fbda 	bl	9c68 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    94b4:	bf00      	nop
    94b6:	f000 fbcd 	bl	9c54 <cc2400_status>
    94ba:	4603      	mov	r3, r0
    94bc:	f003 0304 	and.w	r3, r3, #4
    94c0:	2b00      	cmp	r3, #0
    94c2:	d0f8      	beq.n	94b6 <start_jamming_state+0x6e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    94c4:	bf00      	nop
    94c6:	200e      	movs	r0, #14
    94c8:	f000 faf6 	bl	9ab8 <cc2400_get>
    94cc:	4603      	mov	r3, r0
    94ce:	f003 031f 	and.w	r3, r3, #31
    94d2:	2b0f      	cmp	r3, #15
    94d4:	d1f7      	bne.n	94c6 <start_jamming_state+0x7e>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    94d6:	4b0b      	ldr	r3, [pc, #44]	; (9504 <start_jamming_state+0xbc>)
    94d8:	2280      	movs	r2, #128	; 0x80
    94da:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    94dc:	2063      	movs	r0, #99	; 0x63
    94de:	f000 fbc3 	bl	9c68 <cc2400_strobe>
	TXLED_SET;
    94e2:	4b09      	ldr	r3, [pc, #36]	; (9508 <start_jamming_state+0xc0>)
    94e4:	f44f 7280 	mov.w	r2, #256	; 0x100
    94e8:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    94ea:	687b      	ldr	r3, [r7, #4]
    94ec:	2205      	movs	r2, #5
    94ee:	701a      	strb	r2, [r3, #0]
	sleep_ms_anchor(state, 2);
    94f0:	6878      	ldr	r0, [r7, #4]
    94f2:	2102      	movs	r1, #2
    94f4:	f7ff fdd6 	bl	90a4 <sleep_ms_anchor>
}
    94f8:	3708      	adds	r7, #8
    94fa:	46bd      	mov	sp, r7
    94fc:	bd80      	pop	{r7, pc}
    94fe:	bf00      	nop
    9500:	1000049c 	.word	0x1000049c
    9504:	2009c058 	.word	0x2009c058
    9508:	2009c038 	.word	0x2009c038

0000950c <jamming_state>:

void jamming_state(ego_fsm_state_t *state) {
    950c:	b580      	push	{r7, lr}
    950e:	b082      	sub	sp, #8
    9510:	af00      	add	r7, sp, #0
    9512:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    9514:	6878      	ldr	r0, [r7, #4]
    9516:	f7ff fddb 	bl	90d0 <sleep_elapsed>
    951a:	4603      	mov	r3, r0
    951c:	2b00      	cmp	r3, #0
    951e:	d025      	beq.n	956c <jamming_state+0x60>
		cc2400_strobe(SRFOFF);
    9520:	2064      	movs	r0, #100	; 0x64
    9522:	f000 fba1 	bl	9c68 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    9526:	4b13      	ldr	r3, [pc, #76]	; (9574 <jamming_state+0x68>)
    9528:	2280      	movs	r2, #128	; 0x80
    952a:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    952c:	4b12      	ldr	r3, [pc, #72]	; (9578 <jamming_state+0x6c>)
    952e:	f44f 7280 	mov.w	r2, #256	; 0x100
    9532:	601a      	str	r2, [r3, #0]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    9534:	687b      	ldr	r3, [r7, #4]
    9536:	685b      	ldr	r3, [r3, #4]
    9538:	1c5a      	adds	r2, r3, #1
    953a:	4b10      	ldr	r3, [pc, #64]	; (957c <jamming_state+0x70>)
    953c:	4013      	ands	r3, r2
    953e:	2b00      	cmp	r3, #0
    9540:	da03      	bge.n	954a <jamming_state+0x3e>
    9542:	3b01      	subs	r3, #1
    9544:	f063 0303 	orn	r3, r3, #3
    9548:	3301      	adds	r3, #1
    954a:	461a      	mov	r2, r3
    954c:	687b      	ldr	r3, [r7, #4]
    954e:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    9550:	687b      	ldr	r3, [r7, #4]
    9552:	685b      	ldr	r3, [r3, #4]
    9554:	4a0a      	ldr	r2, [pc, #40]	; (9580 <jamming_state+0x74>)
    9556:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    955a:	4b0a      	ldr	r3, [pc, #40]	; (9584 <jamming_state+0x78>)
    955c:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    955e:	687b      	ldr	r3, [r7, #4]
    9560:	2203      	movs	r2, #3
    9562:	701a      	strb	r2, [r3, #0]
		sleep_ms_anchor(state, 6);
    9564:	6878      	ldr	r0, [r7, #4]
    9566:	2106      	movs	r1, #6
    9568:	f7ff fd9c 	bl	90a4 <sleep_ms_anchor>
	}
}
    956c:	3708      	adds	r7, #8
    956e:	46bd      	mov	sp, r7
    9570:	bd80      	pop	{r7, pc}
    9572:	bf00      	nop
    9574:	2009c05c 	.word	0x2009c05c
    9578:	2009c03c 	.word	0x2009c03c
    957c:	80000003 	.word	0x80000003
    9580:	100008b0 	.word	0x100008b0
    9584:	1000049c 	.word	0x1000049c

00009588 <jam_sleep_state>:

void jam_sleep_state(ego_fsm_state_t *state) {
    9588:	b580      	push	{r7, lr}
    958a:	b082      	sub	sp, #8
    958c:	af00      	add	r7, sp, #0
    958e:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    9590:	6878      	ldr	r0, [r7, #4]
    9592:	f7ff fd9d 	bl	90d0 <sleep_elapsed>
    9596:	4603      	mov	r3, r0
    9598:	2b00      	cmp	r3, #0
    959a:	d009      	beq.n	95b0 <jam_sleep_state+0x28>
		state->state = EGO_ST_START_RX;
    959c:	687b      	ldr	r3, [r7, #4]
    959e:	2201      	movs	r2, #1
    95a0:	701a      	strb	r2, [r3, #0]
		state->timer_active = 1;
    95a2:	687b      	ldr	r3, [r7, #4]
    95a4:	2201      	movs	r2, #1
    95a6:	611a      	str	r2, [r3, #16]
		sleep_ms_anchor(state, 11);
    95a8:	6878      	ldr	r0, [r7, #4]
    95aa:	210b      	movs	r1, #11
    95ac:	f7ff fd7a 	bl	90a4 <sleep_ms_anchor>
	}
}
    95b0:	3708      	adds	r7, #8
    95b2:	46bd      	mov	sp, r7
    95b4:	bd80      	pop	{r7, pc}
    95b6:	bf00      	nop

000095b8 <ego_main>:

void ego_main(ego_mode_t mode) {
    95b8:	b5b0      	push	{r4, r5, r7, lr}
    95ba:	b09e      	sub	sp, #120	; 0x78
    95bc:	af00      	add	r7, sp, #0
    95be:	4603      	mov	r3, r0
    95c0:	71fb      	strb	r3, [r7, #7]
	ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    95c2:	f107 0358 	add.w	r3, r7, #88	; 0x58
    95c6:	2200      	movs	r2, #0
    95c8:	601a      	str	r2, [r3, #0]
    95ca:	3304      	adds	r3, #4
    95cc:	2200      	movs	r2, #0
    95ce:	601a      	str	r2, [r3, #0]
    95d0:	3304      	adds	r3, #4
    95d2:	2200      	movs	r2, #0
    95d4:	601a      	str	r2, [r3, #0]
    95d6:	3304      	adds	r3, #4
    95d8:	2200      	movs	r2, #0
    95da:	601a      	str	r2, [r3, #0]
    95dc:	3304      	adds	r3, #4
    95de:	2200      	movs	r2, #0
    95e0:	601a      	str	r2, [r3, #0]
    95e2:	3304      	adds	r3, #4
    95e4:	2200      	movs	r2, #0
    95e6:	601a      	str	r2, [r3, #0]
    95e8:	3304      	adds	r3, #4
    95ea:	2200      	movs	r2, #0
    95ec:	601a      	str	r2, [r3, #0]
    95ee:	3304      	adds	r3, #4
		.channel_index = 0,
		.timer_active = 0,
	};

	// hopping connection following
	ego_st_handler follow_handler[] = {
    95f0:	4b26      	ldr	r3, [pc, #152]	; (968c <ego_main+0xd4>)
    95f2:	f107 043c 	add.w	r4, r7, #60	; 0x3c
    95f6:	461d      	mov	r5, r3
    95f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    95fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    95fc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    9600:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		nop_state,
		nop_state,
	};

	// continuous rx on a single channel
	ego_st_handler continuous_rx_handler[] = {
    9604:	4b22      	ldr	r3, [pc, #136]	; (9690 <ego_main+0xd8>)
    9606:	f107 0424 	add.w	r4, r7, #36	; 0x24
    960a:	461d      	mov	r5, r3
    960c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    960e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9610:	e895 0003 	ldmia.w	r5, {r0, r1}
    9614:	e884 0003 	stmia.w	r4, {r0, r1}
		nop_state,
		nop_state,
	};

	// jamming
	ego_st_handler jam_handler[] = {
    9618:	4b1e      	ldr	r3, [pc, #120]	; (9694 <ego_main+0xdc>)
    961a:	f107 040c 	add.w	r4, r7, #12
    961e:	461d      	mov	r5, r3
    9620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9624:	e895 0003 	ldmia.w	r5, {r0, r1}
    9628:	e884 0003 	stmia.w	r4, {r0, r1}
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    962c:	79fb      	ldrb	r3, [r7, #7]
    962e:	2b01      	cmp	r3, #1
    9630:	d007      	beq.n	9642 <ego_main+0x8a>
    9632:	2b02      	cmp	r3, #2
    9634:	d009      	beq.n	964a <ego_main+0x92>
    9636:	2b00      	cmp	r3, #0
    9638:	d10b      	bne.n	9652 <ego_main+0x9a>
		case EGO_FOLLOW:
			handler = follow_handler;
    963a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    963e:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9640:	e00b      	b.n	965a <ego_main+0xa2>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    9642:	f107 0324 	add.w	r3, r7, #36	; 0x24
    9646:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9648:	e007      	b.n	965a <ego_main+0xa2>
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    964a:	f107 030c 	add.w	r3, r7, #12
    964e:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9650:	e003      	b.n	965a <ego_main+0xa2>
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    9652:	4b11      	ldr	r3, [pc, #68]	; (9698 <ego_main+0xe0>)
    9654:	2200      	movs	r2, #0
    9656:	701a      	strb	r2, [r3, #0]
    9658:	e015      	b.n	9686 <ego_main+0xce>
			return;
	}

	ego_init();
    965a:	f7ff fc61 	bl	8f20 <ego_init>

	while (1) {
		if (requested_mode != MODE_EGO)
    965e:	4b0e      	ldr	r3, [pc, #56]	; (9698 <ego_main+0xe0>)
    9660:	781b      	ldrb	r3, [r3, #0]
    9662:	b2db      	uxtb	r3, r3
    9664:	2b0d      	cmp	r3, #13
    9666:	d003      	beq.n	9670 <ego_main+0xb8>
			break;
    9668:	bf00      	nop
		handler[state.state](&state);
	}

	ego_deinit();
    966a:	f7ff fc65 	bl	8f38 <ego_deinit>
    966e:	e00a      	b.n	9686 <ego_main+0xce>
	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
			break;
		handler[state.state](&state);
    9670:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    9674:	009b      	lsls	r3, r3, #2
    9676:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    9678:	4413      	add	r3, r2
    967a:	681b      	ldr	r3, [r3, #0]
    967c:	f107 0258 	add.w	r2, r7, #88	; 0x58
    9680:	4610      	mov	r0, r2
    9682:	4798      	blx	r3
	}
    9684:	e7eb      	b.n	965e <ego_main+0xa6>

	ego_deinit();
}
    9686:	3778      	adds	r7, #120	; 0x78
    9688:	46bd      	mov	sp, r7
    968a:	bdb0      	pop	{r4, r5, r7, pc}
    968c:	0000c1dc 	.word	0x0000c1dc
    9690:	0000c1f8 	.word	0x0000c1f8
    9694:	0000c210 	.word	0x0000c210
    9698:	10000a3f 	.word	0x10000a3f

0000969c <USB_IRQHandler>:
	
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
    969c:	b580      	push	{r7, lr}
    969e:	af00      	add	r7, sp, #0
	USBHwISR();
    96a0:	f000 ffb6 	bl	a610 <USBHwISR>
}
    96a4:	bd80      	pop	{r7, pc}
    96a6:	bf00      	nop

000096a8 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    96a8:	b580      	push	{r7, lr}
    96aa:	b082      	sub	sp, #8
    96ac:	af00      	add	r7, sp, #0
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
    96ae:	4b12      	ldr	r3, [pc, #72]	; (96f8 <Reset_Handler+0x50>)
    96b0:	607b      	str	r3, [r7, #4]
	for(dest = &_data; dest < &_edata; )
    96b2:	4b12      	ldr	r3, [pc, #72]	; (96fc <Reset_Handler+0x54>)
    96b4:	603b      	str	r3, [r7, #0]
    96b6:	e007      	b.n	96c8 <Reset_Handler+0x20>
	{
		*dest++ = *src++;
    96b8:	683b      	ldr	r3, [r7, #0]
    96ba:	1d1a      	adds	r2, r3, #4
    96bc:	603a      	str	r2, [r7, #0]
    96be:	687a      	ldr	r2, [r7, #4]
    96c0:	1d11      	adds	r1, r2, #4
    96c2:	6079      	str	r1, [r7, #4]
    96c4:	6812      	ldr	r2, [r2, #0]
    96c6:	601a      	str	r2, [r3, #0]
{
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    96c8:	683b      	ldr	r3, [r7, #0]
    96ca:	4a0d      	ldr	r2, [pc, #52]	; (9700 <Reset_Handler+0x58>)
    96cc:	4293      	cmp	r3, r2
    96ce:	d3f3      	bcc.n	96b8 <Reset_Handler+0x10>
	{
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
    96d0:	4b0c      	ldr	r3, [pc, #48]	; (9704 <Reset_Handler+0x5c>)
    96d2:	607b      	str	r3, [r7, #4]
	while (src < &_ebss)
    96d4:	e004      	b.n	96e0 <Reset_Handler+0x38>
	{
		*src++ = 0;
    96d6:	687b      	ldr	r3, [r7, #4]
    96d8:	1d1a      	adds	r2, r3, #4
    96da:	607a      	str	r2, [r7, #4]
    96dc:	2200      	movs	r2, #0
    96de:	601a      	str	r2, [r3, #0]
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    96e0:	687b      	ldr	r3, [r7, #4]
    96e2:	4a09      	ldr	r2, [pc, #36]	; (9708 <Reset_Handler+0x60>)
    96e4:	4293      	cmp	r3, r2
    96e6:	d3f6      	bcc.n	96d6 <Reset_Handler+0x2e>
	{
		*src++ = 0;
	}

    __libc_init_array();
    96e8:	f7fa fd1e 	bl	4128 <__libc_init_array>
    
    // Set the vector table location.
    SCB_VTOR = &_interrupt_vector_table;
    96ec:	4b07      	ldr	r3, [pc, #28]	; (970c <Reset_Handler+0x64>)
    96ee:	4a08      	ldr	r2, [pc, #32]	; (9710 <Reset_Handler+0x68>)
    96f0:	601a      	str	r2, [r3, #0]
    
	main();
    96f2:	f7fe fba5 	bl	7e40 <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    96f6:	e7fe      	b.n	96f6 <Reset_Handler+0x4e>
    96f8:	0000c278 	.word	0x0000c278
    96fc:	10000020 	.word	0x10000020
    9700:	1000095e 	.word	0x1000095e
    9704:	10000960 	.word	0x10000960
    9708:	10003278 	.word	0x10003278
    970c:	e000ed08 	.word	0xe000ed08
    9710:	00004000 	.word	0x00004000

00009714 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    9714:	b480      	push	{r7}
    9716:	af00      	add	r7, sp, #0
    9718:	e7fe      	b.n	9718 <ADC_IRQHandler+0x4>
    971a:	bf00      	nop

0000971c <wait>:
 */

#include "ubertooth.h"
/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
    971c:	b580      	push	{r7, lr}
    971e:	b082      	sub	sp, #8
    9720:	af00      	add	r7, sp, #0
    9722:	4603      	mov	r3, r0
    9724:	71fb      	strb	r3, [r7, #7]
	wait_us(seconds * 1000000);
    9726:	79fb      	ldrb	r3, [r7, #7]
    9728:	4a04      	ldr	r2, [pc, #16]	; (973c <wait+0x20>)
    972a:	fb02 f303 	mul.w	r3, r2, r3
    972e:	4618      	mov	r0, r3
    9730:	f000 f818 	bl	9764 <wait_us>
}
    9734:	3708      	adds	r7, #8
    9736:	46bd      	mov	sp, r7
    9738:	bd80      	pop	{r7, pc}
    973a:	bf00      	nop
    973c:	000f4240 	.word	0x000f4240

00009740 <rbit>:
{
	wait_us(ms * 1000);
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
    9740:	b480      	push	{r7}
    9742:	b085      	sub	sp, #20
    9744:	af00      	add	r7, sp, #0
    9746:	6078      	str	r0, [r7, #4]
  u32 result = 0;
    9748:	2300      	movs	r3, #0
    974a:	60fb      	str	r3, [r7, #12]
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    974c:	687b      	ldr	r3, [r7, #4]
    974e:	fa93 f3a3 	rbit	r3, r3
    9752:	60fb      	str	r3, [r7, #12]
  return result;
    9754:	68fb      	ldr	r3, [r7, #12]
}
    9756:	4618      	mov	r0, r3
    9758:	3714      	adds	r7, #20
    975a:	46bd      	mov	sp, r7
    975c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9760:	4770      	bx	lr
    9762:	bf00      	nop

00009764 <wait_us>:

/* delay a number of microseconds while on internal oscillator (4 MHz) */
/* we only have a resolution of 1000/400, so to the nearest 2.5        */
static volatile u32 wait_us_counter;
void wait_us(u32 us)
{
    9764:	b480      	push	{r7}
    9766:	b083      	sub	sp, #12
    9768:	af00      	add	r7, sp, #0
    976a:	6078      	str	r0, [r7, #4]
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    976c:	687b      	ldr	r3, [r7, #4]
    976e:	089a      	lsrs	r2, r3, #2
    9770:	687b      	ldr	r3, [r7, #4]
    9772:	08db      	lsrs	r3, r3, #3
    9774:	441a      	add	r2, r3
    9776:	687b      	ldr	r3, [r7, #4]
    9778:	099b      	lsrs	r3, r3, #6
    977a:	441a      	add	r2, r3
    977c:	687b      	ldr	r3, [r7, #4]
    977e:	09db      	lsrs	r3, r3, #7
    9780:	441a      	add	r2, r3
    9782:	687b      	ldr	r3, [r7, #4]
    9784:	0a9b      	lsrs	r3, r3, #10
    9786:	441a      	add	r2, r3
    9788:	687b      	ldr	r3, [r7, #4]
    978a:	0adb      	lsrs	r3, r3, #11
    978c:	4413      	add	r3, r2
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    978e:	4a07      	ldr	r2, [pc, #28]	; (97ac <wait_us+0x48>)
    9790:	6013      	str	r3, [r2, #0]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    9792:	bf00      	nop
    9794:	4b05      	ldr	r3, [pc, #20]	; (97ac <wait_us+0x48>)
    9796:	681b      	ldr	r3, [r3, #0]
    9798:	3b01      	subs	r3, #1
    979a:	4a04      	ldr	r2, [pc, #16]	; (97ac <wait_us+0x48>)
    979c:	6013      	str	r3, [r2, #0]
    979e:	2b00      	cmp	r3, #0
    97a0:	d1f8      	bne.n	9794 <wait_us+0x30>
}
    97a2:	370c      	adds	r7, #12
    97a4:	46bd      	mov	sp, r7
    97a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    97aa:	4770      	bx	lr
    97ac:	10000a68 	.word	0x10000a68

000097b0 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    97b0:	b580      	push	{r7, lr}
    97b2:	af00      	add	r7, sp, #0
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    97b4:	f000 f836 	bl	9824 <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    97b8:	4b10      	ldr	r3, [pc, #64]	; (97fc <gpio_init+0x4c>)
    97ba:	2200      	movs	r2, #0
    97bc:	601a      	str	r2, [r3, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    97be:	4b10      	ldr	r3, [pc, #64]	; (9800 <gpio_init+0x50>)
    97c0:	f24c 7212 	movw	r2, #50962	; 0xc712
    97c4:	601a      	str	r2, [r3, #0]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    97c6:	4b0f      	ldr	r3, [pc, #60]	; (9804 <gpio_init+0x54>)
    97c8:	f240 12b1 	movw	r2, #433	; 0x1b1
    97cc:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    97ce:	4b0e      	ldr	r3, [pc, #56]	; (9808 <gpio_init+0x58>)
    97d0:	2200      	movs	r2, #0
    97d2:	601a      	str	r2, [r3, #0]
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    97d4:	4b0d      	ldr	r3, [pc, #52]	; (980c <gpio_init+0x5c>)
    97d6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    97da:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    97dc:	4b0c      	ldr	r3, [pc, #48]	; (9810 <gpio_init+0x60>)
    97de:	2200      	movs	r2, #0
    97e0:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    97e2:	4b0c      	ldr	r3, [pc, #48]	; (9814 <gpio_init+0x64>)
    97e4:	2200      	movs	r2, #0
    97e6:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    97e8:	4b0b      	ldr	r3, [pc, #44]	; (9818 <gpio_init+0x68>)
    97ea:	2200      	movs	r2, #0
    97ec:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    97ee:	4b0b      	ldr	r3, [pc, #44]	; (981c <gpio_init+0x6c>)
    97f0:	2200      	movs	r2, #0
    97f2:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    97f4:	4b0a      	ldr	r3, [pc, #40]	; (9820 <gpio_init+0x70>)
    97f6:	2200      	movs	r2, #0
    97f8:	601a      	str	r2, [r3, #0]

#ifdef TC13BADGE
	/* R8C_CTL is active low */
	R8C_CTL_SET;
#endif
}
    97fa:	bd80      	pop	{r7, pc}
    97fc:	2009c000 	.word	0x2009c000
    9800:	2009c020 	.word	0x2009c020
    9804:	2009c040 	.word	0x2009c040
    9808:	2009c060 	.word	0x2009c060
    980c:	2009c080 	.word	0x2009c080
    9810:	2009c014 	.word	0x2009c014
    9814:	2009c034 	.word	0x2009c034
    9818:	2009c054 	.word	0x2009c054
    981c:	2009c074 	.word	0x2009c074
    9820:	2009c094 	.word	0x2009c094

00009824 <all_pins_off>:

void all_pins_off(void)
{
    9824:	b480      	push	{r7}
    9826:	af00      	add	r7, sp, #0
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    9828:	4b27      	ldr	r3, [pc, #156]	; (98c8 <all_pins_off+0xa4>)
    982a:	2200      	movs	r2, #0
    982c:	601a      	str	r2, [r3, #0]
	PINSEL1 = 0;
    982e:	4b27      	ldr	r3, [pc, #156]	; (98cc <all_pins_off+0xa8>)
    9830:	2200      	movs	r2, #0
    9832:	601a      	str	r2, [r3, #0]
	PINSEL2 = 0;
    9834:	4b26      	ldr	r3, [pc, #152]	; (98d0 <all_pins_off+0xac>)
    9836:	2200      	movs	r2, #0
    9838:	601a      	str	r2, [r3, #0]
	PINSEL3 = 0;
    983a:	4b26      	ldr	r3, [pc, #152]	; (98d4 <all_pins_off+0xb0>)
    983c:	2200      	movs	r2, #0
    983e:	601a      	str	r2, [r3, #0]
	PINSEL4 = 0;
    9840:	4b25      	ldr	r3, [pc, #148]	; (98d8 <all_pins_off+0xb4>)
    9842:	2200      	movs	r2, #0
    9844:	601a      	str	r2, [r3, #0]
	PINSEL7 = 0;
    9846:	4b25      	ldr	r3, [pc, #148]	; (98dc <all_pins_off+0xb8>)
    9848:	2200      	movs	r2, #0
    984a:	601a      	str	r2, [r3, #0]
	PINSEL9 = 0;
    984c:	4b24      	ldr	r3, [pc, #144]	; (98e0 <all_pins_off+0xbc>)
    984e:	2200      	movs	r2, #0
    9850:	601a      	str	r2, [r3, #0]
	PINSEL10 = 0;
    9852:	4b24      	ldr	r3, [pc, #144]	; (98e4 <all_pins_off+0xc0>)
    9854:	2200      	movs	r2, #0
    9856:	601a      	str	r2, [r3, #0]

	/* configure all pins as inputs */
	FIO0DIR = 0;
    9858:	4b23      	ldr	r3, [pc, #140]	; (98e8 <all_pins_off+0xc4>)
    985a:	2200      	movs	r2, #0
    985c:	601a      	str	r2, [r3, #0]
	FIO1DIR = 0;
    985e:	4b23      	ldr	r3, [pc, #140]	; (98ec <all_pins_off+0xc8>)
    9860:	2200      	movs	r2, #0
    9862:	601a      	str	r2, [r3, #0]
	FIO2DIR = 0;
    9864:	4b22      	ldr	r3, [pc, #136]	; (98f0 <all_pins_off+0xcc>)
    9866:	2200      	movs	r2, #0
    9868:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    986a:	4b22      	ldr	r3, [pc, #136]	; (98f4 <all_pins_off+0xd0>)
    986c:	2200      	movs	r2, #0
    986e:	601a      	str	r2, [r3, #0]
	FIO4DIR = 0;
    9870:	4b21      	ldr	r3, [pc, #132]	; (98f8 <all_pins_off+0xd4>)
    9872:	2200      	movs	r2, #0
    9874:	601a      	str	r2, [r3, #0]

	/* pull-up on every pin */
	PINMODE0 = 0;
    9876:	4b21      	ldr	r3, [pc, #132]	; (98fc <all_pins_off+0xd8>)
    9878:	2200      	movs	r2, #0
    987a:	601a      	str	r2, [r3, #0]
	PINMODE1 = 0;
    987c:	4b20      	ldr	r3, [pc, #128]	; (9900 <all_pins_off+0xdc>)
    987e:	2200      	movs	r2, #0
    9880:	601a      	str	r2, [r3, #0]
	PINMODE2 = 0;
    9882:	4b20      	ldr	r3, [pc, #128]	; (9904 <all_pins_off+0xe0>)
    9884:	2200      	movs	r2, #0
    9886:	601a      	str	r2, [r3, #0]
	PINMODE3 = 0;
    9888:	4b1f      	ldr	r3, [pc, #124]	; (9908 <all_pins_off+0xe4>)
    988a:	2200      	movs	r2, #0
    988c:	601a      	str	r2, [r3, #0]
	PINMODE4 = 0;
    988e:	4b1f      	ldr	r3, [pc, #124]	; (990c <all_pins_off+0xe8>)
    9890:	2200      	movs	r2, #0
    9892:	601a      	str	r2, [r3, #0]
	PINMODE7 = 0;
    9894:	4b1e      	ldr	r3, [pc, #120]	; (9910 <all_pins_off+0xec>)
    9896:	2200      	movs	r2, #0
    9898:	601a      	str	r2, [r3, #0]
	PINMODE9 = 0;
    989a:	4b1e      	ldr	r3, [pc, #120]	; (9914 <all_pins_off+0xf0>)
    989c:	2200      	movs	r2, #0
    989e:	601a      	str	r2, [r3, #0]

	/* set all outputs low */
	FIO0PIN = 0;
    98a0:	4b1d      	ldr	r3, [pc, #116]	; (9918 <all_pins_off+0xf4>)
    98a2:	2200      	movs	r2, #0
    98a4:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    98a6:	4b1d      	ldr	r3, [pc, #116]	; (991c <all_pins_off+0xf8>)
    98a8:	2200      	movs	r2, #0
    98aa:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    98ac:	4b1c      	ldr	r3, [pc, #112]	; (9920 <all_pins_off+0xfc>)
    98ae:	2200      	movs	r2, #0
    98b0:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    98b2:	4b1c      	ldr	r3, [pc, #112]	; (9924 <all_pins_off+0x100>)
    98b4:	2200      	movs	r2, #0
    98b6:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    98b8:	4b1b      	ldr	r3, [pc, #108]	; (9928 <all_pins_off+0x104>)
    98ba:	2200      	movs	r2, #0
    98bc:	601a      	str	r2, [r3, #0]
}
    98be:	46bd      	mov	sp, r7
    98c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    98c4:	4770      	bx	lr
    98c6:	bf00      	nop
    98c8:	4002c000 	.word	0x4002c000
    98cc:	4002c004 	.word	0x4002c004
    98d0:	4002c008 	.word	0x4002c008
    98d4:	4002c00c 	.word	0x4002c00c
    98d8:	4002c010 	.word	0x4002c010
    98dc:	4002c01c 	.word	0x4002c01c
    98e0:	4002c024 	.word	0x4002c024
    98e4:	4002c028 	.word	0x4002c028
    98e8:	2009c000 	.word	0x2009c000
    98ec:	2009c020 	.word	0x2009c020
    98f0:	2009c040 	.word	0x2009c040
    98f4:	2009c060 	.word	0x2009c060
    98f8:	2009c080 	.word	0x2009c080
    98fc:	4002c040 	.word	0x4002c040
    9900:	4002c044 	.word	0x4002c044
    9904:	4002c048 	.word	0x4002c048
    9908:	4002c04c 	.word	0x4002c04c
    990c:	4002c050 	.word	0x4002c050
    9910:	4002c05c 	.word	0x4002c05c
    9914:	4002c064 	.word	0x4002c064
    9918:	2009c014 	.word	0x2009c014
    991c:	2009c034 	.word	0x2009c034
    9920:	2009c054 	.word	0x2009c054
    9924:	2009c074 	.word	0x2009c074
    9928:	2009c094 	.word	0x2009c094

0000992c <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    992c:	b580      	push	{r7, lr}
    992e:	af00      	add	r7, sp, #0
	gpio_init();
    9930:	f7ff ff3e 	bl	97b0 <gpio_init>
	cc2400_init();
    9934:	f000 f860 	bl	99f8 <cc2400_init>
	clock_start();
    9938:	f000 f9c2 	bl	9cc0 <clock_start>
}
    993c:	bd80      	pop	{r7, pc}
    993e:	bf00      	nop

00009940 <dio_ssp_init>:

/* configure SSP for CC2400's secondary serial data interface */
void dio_ssp_init()
{
    9940:	b480      	push	{r7}
    9942:	af00      	add	r7, sp, #0
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    9944:	4a16      	ldr	r2, [pc, #88]	; (99a0 <dio_ssp_init+0x60>)
    9946:	4b16      	ldr	r3, [pc, #88]	; (99a0 <dio_ssp_init+0x60>)
    9948:	681b      	ldr	r3, [r3, #0]
    994a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    994e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    9952:	6013      	str	r3, [r2, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    9954:	4a12      	ldr	r2, [pc, #72]	; (99a0 <dio_ssp_init+0x60>)
    9956:	4b12      	ldr	r3, [pc, #72]	; (99a0 <dio_ssp_init+0x60>)
    9958:	681b      	ldr	r3, [r3, #0]
    995a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    995e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    9962:	6013      	str	r3, [r2, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    9964:	4a0e      	ldr	r2, [pc, #56]	; (99a0 <dio_ssp_init+0x60>)
    9966:	4b0e      	ldr	r3, [pc, #56]	; (99a0 <dio_ssp_init+0x60>)
    9968:	681b      	ldr	r3, [r3, #0]
    996a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    996e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    9972:	6013      	str	r3, [r2, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    9974:	4a0a      	ldr	r2, [pc, #40]	; (99a0 <dio_ssp_init+0x60>)
    9976:	4b0a      	ldr	r3, [pc, #40]	; (99a0 <dio_ssp_init+0x60>)
    9978:	681b      	ldr	r3, [r3, #0]
    997a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    997e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    9982:	6013      	str	r3, [r2, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    9984:	4b07      	ldr	r3, [pc, #28]	; (99a4 <dio_ssp_init+0x64>)
    9986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    998a:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    998c:	4b06      	ldr	r3, [pc, #24]	; (99a8 <dio_ssp_init+0x68>)
    998e:	22c7      	movs	r2, #199	; 0xc7
    9990:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    9992:	4b06      	ldr	r3, [pc, #24]	; (99ac <dio_ssp_init+0x6c>)
    9994:	220c      	movs	r2, #12
    9996:	601a      	str	r2, [r3, #0]
}
    9998:	46bd      	mov	sp, r7
    999a:	f85d 7b04 	ldr.w	r7, [sp], #4
    999e:	4770      	bx	lr
    99a0:	4002c000 	.word	0x4002c000
    99a4:	2009c098 	.word	0x2009c098
    99a8:	40030000 	.word	0x40030000
    99ac:	40030004 	.word	0x40030004

000099b0 <atest_init>:

void atest_init()
{
    99b0:	b480      	push	{r7}
    99b2:	af00      	add	r7, sp, #0
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    99b4:	4a0d      	ldr	r2, [pc, #52]	; (99ec <atest_init+0x3c>)
    99b6:	4b0d      	ldr	r3, [pc, #52]	; (99ec <atest_init+0x3c>)
    99b8:	681b      	ldr	r3, [r3, #0]
    99ba:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    99be:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    99c0:	4a0b      	ldr	r2, [pc, #44]	; (99f0 <atest_init+0x40>)
    99c2:	4b0b      	ldr	r3, [pc, #44]	; (99f0 <atest_init+0x40>)
    99c4:	681b      	ldr	r3, [r3, #0]
    99c6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    99ca:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    99cc:	4a09      	ldr	r2, [pc, #36]	; (99f4 <atest_init+0x44>)
    99ce:	4b09      	ldr	r3, [pc, #36]	; (99f4 <atest_init+0x44>)
    99d0:	681b      	ldr	r3, [r3, #0]
    99d2:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
    99d6:	6013      	str	r3, [r2, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    99d8:	4a06      	ldr	r2, [pc, #24]	; (99f4 <atest_init+0x44>)
    99da:	4b06      	ldr	r3, [pc, #24]	; (99f4 <atest_init+0x44>)
    99dc:	681b      	ldr	r3, [r3, #0]
    99de:	f423 13a0 	bic.w	r3, r3, #1310720	; 0x140000
    99e2:	6013      	str	r3, [r2, #0]
}
    99e4:	46bd      	mov	sp, r7
    99e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    99ea:	4770      	bx	lr
    99ec:	4002c004 	.word	0x4002c004
    99f0:	2009c000 	.word	0x2009c000
    99f4:	4002c044 	.word	0x4002c044

000099f8 <cc2400_init>:

void cc2400_init()
{
    99f8:	b580      	push	{r7, lr}
    99fa:	af00      	add	r7, sp, #0
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    99fc:	f7ff ffd8 	bl	99b0 <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    9a00:	4b09      	ldr	r3, [pc, #36]	; (9a28 <cc2400_init+0x30>)
    9a02:	f44f 7200 	mov.w	r2, #512	; 0x200
    9a06:	601a      	str	r2, [r3, #0]
	wait_us(50);
    9a08:	2032      	movs	r0, #50	; 0x32
    9a0a:	f7ff feab 	bl	9764 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    9a0e:	4b07      	ldr	r3, [pc, #28]	; (9a2c <cc2400_init+0x34>)
    9a10:	2220      	movs	r2, #32
    9a12:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    9a14:	4b04      	ldr	r3, [pc, #16]	; (9a28 <cc2400_init+0x30>)
    9a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9a1a:	601a      	str	r2, [r3, #0]

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
    9a1c:	200d      	movs	r0, #13
    9a1e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    9a22:	f000 f85f 	bl	9ae4 <cc2400_set>
}
    9a26:	bd80      	pop	{r7, pc}
    9a28:	2009c038 	.word	0x2009c038
    9a2c:	2009c058 	.word	0x2009c058

00009a30 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    9a30:	b480      	push	{r7}
    9a32:	b085      	sub	sp, #20
    9a34:	af00      	add	r7, sp, #0
    9a36:	4603      	mov	r3, r0
    9a38:	6039      	str	r1, [r7, #0]
    9a3a:	71fb      	strb	r3, [r7, #7]
	u32 msb = 1 << (len - 1);
    9a3c:	79fb      	ldrb	r3, [r7, #7]
    9a3e:	3b01      	subs	r3, #1
    9a40:	2201      	movs	r2, #1
    9a42:	fa02 f303 	lsl.w	r3, r2, r3
    9a46:	60fb      	str	r3, [r7, #12]

	/* start transaction by dropping CSN */
	CSN_CLR;
    9a48:	4b18      	ldr	r3, [pc, #96]	; (9aac <cc2400_spi+0x7c>)
    9a4a:	2220      	movs	r2, #32
    9a4c:	601a      	str	r2, [r3, #0]

	while (len--) {
    9a4e:	e01e      	b.n	9a8e <cc2400_spi+0x5e>
		if (data & msb)
    9a50:	683a      	ldr	r2, [r7, #0]
    9a52:	68fb      	ldr	r3, [r7, #12]
    9a54:	4013      	ands	r3, r2
    9a56:	2b00      	cmp	r3, #0
    9a58:	d003      	beq.n	9a62 <cc2400_spi+0x32>
			MOSI_SET;
    9a5a:	4b15      	ldr	r3, [pc, #84]	; (9ab0 <cc2400_spi+0x80>)
    9a5c:	2201      	movs	r2, #1
    9a5e:	601a      	str	r2, [r3, #0]
    9a60:	e002      	b.n	9a68 <cc2400_spi+0x38>
		else
			MOSI_CLR;
    9a62:	4b12      	ldr	r3, [pc, #72]	; (9aac <cc2400_spi+0x7c>)
    9a64:	2201      	movs	r2, #1
    9a66:	601a      	str	r2, [r3, #0]
		data <<= 1;
    9a68:	683b      	ldr	r3, [r7, #0]
    9a6a:	005b      	lsls	r3, r3, #1
    9a6c:	603b      	str	r3, [r7, #0]

		SCLK_SET;
    9a6e:	4b10      	ldr	r3, [pc, #64]	; (9ab0 <cc2400_spi+0x80>)
    9a70:	2210      	movs	r2, #16
    9a72:	601a      	str	r2, [r3, #0]
		if (MISO)
    9a74:	4b0f      	ldr	r3, [pc, #60]	; (9ab4 <cc2400_spi+0x84>)
    9a76:	681b      	ldr	r3, [r3, #0]
    9a78:	f003 0302 	and.w	r3, r3, #2
    9a7c:	2b00      	cmp	r3, #0
    9a7e:	d003      	beq.n	9a88 <cc2400_spi+0x58>
			data |= 1;
    9a80:	683b      	ldr	r3, [r7, #0]
    9a82:	f043 0301 	orr.w	r3, r3, #1
    9a86:	603b      	str	r3, [r7, #0]

		SCLK_CLR;
    9a88:	4b08      	ldr	r3, [pc, #32]	; (9aac <cc2400_spi+0x7c>)
    9a8a:	2210      	movs	r2, #16
    9a8c:	601a      	str	r2, [r3, #0]
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    9a8e:	79fb      	ldrb	r3, [r7, #7]
    9a90:	1e5a      	subs	r2, r3, #1
    9a92:	71fa      	strb	r2, [r7, #7]
    9a94:	2b00      	cmp	r3, #0
    9a96:	d1db      	bne.n	9a50 <cc2400_spi+0x20>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    9a98:	4b05      	ldr	r3, [pc, #20]	; (9ab0 <cc2400_spi+0x80>)
    9a9a:	2220      	movs	r2, #32
    9a9c:	601a      	str	r2, [r3, #0]

	return data;
    9a9e:	683b      	ldr	r3, [r7, #0]
}
    9aa0:	4618      	mov	r0, r3
    9aa2:	3714      	adds	r7, #20
    9aa4:	46bd      	mov	sp, r7
    9aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9aaa:	4770      	bx	lr
    9aac:	2009c05c 	.word	0x2009c05c
    9ab0:	2009c058 	.word	0x2009c058
    9ab4:	2009c054 	.word	0x2009c054

00009ab8 <cc2400_get>:

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    9ab8:	b580      	push	{r7, lr}
    9aba:	b084      	sub	sp, #16
    9abc:	af00      	add	r7, sp, #0
    9abe:	4603      	mov	r3, r0
    9ac0:	71fb      	strb	r3, [r7, #7]
	u32 in;

	u32 out = (reg | 0x80) << 16;
    9ac2:	79fb      	ldrb	r3, [r7, #7]
    9ac4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9ac8:	b2db      	uxtb	r3, r3
    9aca:	041b      	lsls	r3, r3, #16
    9acc:	60fb      	str	r3, [r7, #12]
	in = cc2400_spi(24, out);
    9ace:	2018      	movs	r0, #24
    9ad0:	68f9      	ldr	r1, [r7, #12]
    9ad2:	f7ff ffad 	bl	9a30 <cc2400_spi>
    9ad6:	60b8      	str	r0, [r7, #8]
	return in & 0xFFFF;
    9ad8:	68bb      	ldr	r3, [r7, #8]
    9ada:	b29b      	uxth	r3, r3
}
    9adc:	4618      	mov	r0, r3
    9ade:	3710      	adds	r7, #16
    9ae0:	46bd      	mov	sp, r7
    9ae2:	bd80      	pop	{r7, pc}

00009ae4 <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
    9ae4:	b580      	push	{r7, lr}
    9ae6:	b084      	sub	sp, #16
    9ae8:	af00      	add	r7, sp, #0
    9aea:	4603      	mov	r3, r0
    9aec:	460a      	mov	r2, r1
    9aee:	71fb      	strb	r3, [r7, #7]
    9af0:	4613      	mov	r3, r2
    9af2:	80bb      	strh	r3, [r7, #4]
	u32 out = (reg << 16) | val;
    9af4:	79fb      	ldrb	r3, [r7, #7]
    9af6:	041a      	lsls	r2, r3, #16
    9af8:	88bb      	ldrh	r3, [r7, #4]
    9afa:	4313      	orrs	r3, r2
    9afc:	60fb      	str	r3, [r7, #12]
	cc2400_spi(24, out);
    9afe:	2018      	movs	r0, #24
    9b00:	68f9      	ldr	r1, [r7, #12]
    9b02:	f7ff ff95 	bl	9a30 <cc2400_spi>
}
    9b06:	3710      	adds	r7, #16
    9b08:	46bd      	mov	sp, r7
    9b0a:	bd80      	pop	{r7, pc}

00009b0c <cc2400_get8>:

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    9b0c:	b580      	push	{r7, lr}
    9b0e:	b084      	sub	sp, #16
    9b10:	af00      	add	r7, sp, #0
    9b12:	4603      	mov	r3, r0
    9b14:	71fb      	strb	r3, [r7, #7]
	u16 in;

	u16 out = (reg | 0x80) << 8;
    9b16:	79fb      	ldrb	r3, [r7, #7]
    9b18:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9b1c:	b2db      	uxtb	r3, r3
    9b1e:	b29b      	uxth	r3, r3
    9b20:	021b      	lsls	r3, r3, #8
    9b22:	81fb      	strh	r3, [r7, #14]
	in = cc2400_spi(16, out);
    9b24:	89fb      	ldrh	r3, [r7, #14]
    9b26:	2010      	movs	r0, #16
    9b28:	4619      	mov	r1, r3
    9b2a:	f7ff ff81 	bl	9a30 <cc2400_spi>
    9b2e:	4603      	mov	r3, r0
    9b30:	81bb      	strh	r3, [r7, #12]
	return in & 0xFF;
    9b32:	89bb      	ldrh	r3, [r7, #12]
    9b34:	b2db      	uxtb	r3, r3
}
    9b36:	4618      	mov	r0, r3
    9b38:	3710      	adds	r7, #16
    9b3a:	46bd      	mov	sp, r7
    9b3c:	bd80      	pop	{r7, pc}
    9b3e:	bf00      	nop

00009b40 <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
    9b40:	b580      	push	{r7, lr}
    9b42:	b084      	sub	sp, #16
    9b44:	af00      	add	r7, sp, #0
    9b46:	4603      	mov	r3, r0
    9b48:	460a      	mov	r2, r1
    9b4a:	71fb      	strb	r3, [r7, #7]
    9b4c:	4613      	mov	r3, r2
    9b4e:	71bb      	strb	r3, [r7, #6]
	u32 out = (reg << 8) | val;
    9b50:	79fb      	ldrb	r3, [r7, #7]
    9b52:	021a      	lsls	r2, r3, #8
    9b54:	79bb      	ldrb	r3, [r7, #6]
    9b56:	4313      	orrs	r3, r2
    9b58:	60fb      	str	r3, [r7, #12]
	cc2400_spi(16, out);
    9b5a:	2010      	movs	r0, #16
    9b5c:	68f9      	ldr	r1, [r7, #12]
    9b5e:	f7ff ff67 	bl	9a30 <cc2400_spi>
}
    9b62:	3710      	adds	r7, #16
    9b64:	46bd      	mov	sp, r7
    9b66:	bd80      	pop	{r7, pc}

00009b68 <cc2400_spi_buf>:

/* write multiple bytes to SPI */
void cc2400_spi_buf(u8 reg, u8 len, u8 *data)
{
    9b68:	b480      	push	{r7}
    9b6a:	b085      	sub	sp, #20
    9b6c:	af00      	add	r7, sp, #0
    9b6e:	4603      	mov	r3, r0
    9b70:	603a      	str	r2, [r7, #0]
    9b72:	71fb      	strb	r3, [r7, #7]
    9b74:	460b      	mov	r3, r1
    9b76:	71bb      	strb	r3, [r7, #6]
	u8 msb = 1 << 7;
    9b78:	2380      	movs	r3, #128	; 0x80
    9b7a:	733b      	strb	r3, [r7, #12]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    9b7c:	4b33      	ldr	r3, [pc, #204]	; (9c4c <cc2400_spi_buf+0xe4>)
    9b7e:	2220      	movs	r2, #32
    9b80:	601a      	str	r2, [r3, #0]

	for (i = 0; i < 8; ++i) {
    9b82:	2300      	movs	r3, #0
    9b84:	73fb      	strb	r3, [r7, #15]
    9b86:	e018      	b.n	9bba <cc2400_spi_buf+0x52>
		if (reg & msb)
    9b88:	79fa      	ldrb	r2, [r7, #7]
    9b8a:	7b3b      	ldrb	r3, [r7, #12]
    9b8c:	4013      	ands	r3, r2
    9b8e:	b2db      	uxtb	r3, r3
    9b90:	2b00      	cmp	r3, #0
    9b92:	d003      	beq.n	9b9c <cc2400_spi_buf+0x34>
			MOSI_SET;
    9b94:	4b2e      	ldr	r3, [pc, #184]	; (9c50 <cc2400_spi_buf+0xe8>)
    9b96:	2201      	movs	r2, #1
    9b98:	601a      	str	r2, [r3, #0]
    9b9a:	e002      	b.n	9ba2 <cc2400_spi_buf+0x3a>
		else
			MOSI_CLR;
    9b9c:	4b2b      	ldr	r3, [pc, #172]	; (9c4c <cc2400_spi_buf+0xe4>)
    9b9e:	2201      	movs	r2, #1
    9ba0:	601a      	str	r2, [r3, #0]
		reg <<= 1;
    9ba2:	79fb      	ldrb	r3, [r7, #7]
    9ba4:	005b      	lsls	r3, r3, #1
    9ba6:	71fb      	strb	r3, [r7, #7]
		SCLK_SET;
    9ba8:	4b29      	ldr	r3, [pc, #164]	; (9c50 <cc2400_spi_buf+0xe8>)
    9baa:	2210      	movs	r2, #16
    9bac:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    9bae:	4b27      	ldr	r3, [pc, #156]	; (9c4c <cc2400_spi_buf+0xe4>)
    9bb0:	2210      	movs	r2, #16
    9bb2:	601a      	str	r2, [r3, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    9bb4:	7bfb      	ldrb	r3, [r7, #15]
    9bb6:	3301      	adds	r3, #1
    9bb8:	73fb      	strb	r3, [r7, #15]
    9bba:	7bfb      	ldrb	r3, [r7, #15]
    9bbc:	2b07      	cmp	r3, #7
    9bbe:	d9e3      	bls.n	9b88 <cc2400_spi_buf+0x20>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    9bc0:	2300      	movs	r3, #0
    9bc2:	73fb      	strb	r3, [r7, #15]
    9bc4:	e026      	b.n	9c14 <cc2400_spi_buf+0xac>
		temp = data[i];
    9bc6:	7bfb      	ldrb	r3, [r7, #15]
    9bc8:	683a      	ldr	r2, [r7, #0]
    9bca:	4413      	add	r3, r2
    9bcc:	781b      	ldrb	r3, [r3, #0]
    9bce:	737b      	strb	r3, [r7, #13]
		for (j = 0; j < 8; ++j) {
    9bd0:	2300      	movs	r3, #0
    9bd2:	73bb      	strb	r3, [r7, #14]
    9bd4:	e018      	b.n	9c08 <cc2400_spi_buf+0xa0>
			if (temp & msb)
    9bd6:	7b7a      	ldrb	r2, [r7, #13]
    9bd8:	7b3b      	ldrb	r3, [r7, #12]
    9bda:	4013      	ands	r3, r2
    9bdc:	b2db      	uxtb	r3, r3
    9bde:	2b00      	cmp	r3, #0
    9be0:	d003      	beq.n	9bea <cc2400_spi_buf+0x82>
				MOSI_SET;
    9be2:	4b1b      	ldr	r3, [pc, #108]	; (9c50 <cc2400_spi_buf+0xe8>)
    9be4:	2201      	movs	r2, #1
    9be6:	601a      	str	r2, [r3, #0]
    9be8:	e002      	b.n	9bf0 <cc2400_spi_buf+0x88>
			else
				MOSI_CLR;
    9bea:	4b18      	ldr	r3, [pc, #96]	; (9c4c <cc2400_spi_buf+0xe4>)
    9bec:	2201      	movs	r2, #1
    9bee:	601a      	str	r2, [r3, #0]
			temp <<= 1;
    9bf0:	7b7b      	ldrb	r3, [r7, #13]
    9bf2:	005b      	lsls	r3, r3, #1
    9bf4:	737b      	strb	r3, [r7, #13]
			SCLK_SET;
    9bf6:	4b16      	ldr	r3, [pc, #88]	; (9c50 <cc2400_spi_buf+0xe8>)
    9bf8:	2210      	movs	r2, #16
    9bfa:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
    9bfc:	4b13      	ldr	r3, [pc, #76]	; (9c4c <cc2400_spi_buf+0xe4>)
    9bfe:	2210      	movs	r2, #16
    9c00:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    9c02:	7bbb      	ldrb	r3, [r7, #14]
    9c04:	3301      	adds	r3, #1
    9c06:	73bb      	strb	r3, [r7, #14]
    9c08:	7bbb      	ldrb	r3, [r7, #14]
    9c0a:	2b07      	cmp	r3, #7
    9c0c:	d9e3      	bls.n	9bd6 <cc2400_spi_buf+0x6e>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    9c0e:	7bfb      	ldrb	r3, [r7, #15]
    9c10:	3301      	adds	r3, #1
    9c12:	73fb      	strb	r3, [r7, #15]
    9c14:	7bfa      	ldrb	r2, [r7, #15]
    9c16:	79bb      	ldrb	r3, [r7, #6]
    9c18:	429a      	cmp	r2, r3
    9c1a:	d3d4      	bcc.n	9bc6 <cc2400_spi_buf+0x5e>
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    9c1c:	2300      	movs	r3, #0
    9c1e:	73fb      	strb	r3, [r7, #15]
    9c20:	e008      	b.n	9c34 <cc2400_spi_buf+0xcc>
		SCLK_SET;
    9c22:	4b0b      	ldr	r3, [pc, #44]	; (9c50 <cc2400_spi_buf+0xe8>)
    9c24:	2210      	movs	r2, #16
    9c26:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    9c28:	4b08      	ldr	r3, [pc, #32]	; (9c4c <cc2400_spi_buf+0xe4>)
    9c2a:	2210      	movs	r2, #16
    9c2c:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    9c2e:	7bfb      	ldrb	r3, [r7, #15]
    9c30:	3301      	adds	r3, #1
    9c32:	73fb      	strb	r3, [r7, #15]
    9c34:	7bfb      	ldrb	r3, [r7, #15]
    9c36:	2b07      	cmp	r3, #7
    9c38:	d9f3      	bls.n	9c22 <cc2400_spi_buf+0xba>
		SCLK_SET;
		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    9c3a:	4b05      	ldr	r3, [pc, #20]	; (9c50 <cc2400_spi_buf+0xe8>)
    9c3c:	2220      	movs	r2, #32
    9c3e:	601a      	str	r2, [r3, #0]
}
    9c40:	3714      	adds	r7, #20
    9c42:	46bd      	mov	sp, r7
    9c44:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c48:	4770      	bx	lr
    9c4a:	bf00      	nop
    9c4c:	2009c05c 	.word	0x2009c05c
    9c50:	2009c058 	.word	0x2009c058

00009c54 <cc2400_status>:

/* get the status */
u8 cc2400_status()
{
    9c54:	b580      	push	{r7, lr}
    9c56:	af00      	add	r7, sp, #0
	return cc2400_spi(8, 0);
    9c58:	2008      	movs	r0, #8
    9c5a:	2100      	movs	r1, #0
    9c5c:	f7ff fee8 	bl	9a30 <cc2400_spi>
    9c60:	4603      	mov	r3, r0
    9c62:	b2db      	uxtb	r3, r3
}
    9c64:	4618      	mov	r0, r3
    9c66:	bd80      	pop	{r7, pc}

00009c68 <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    9c68:	b580      	push	{r7, lr}
    9c6a:	b082      	sub	sp, #8
    9c6c:	af00      	add	r7, sp, #0
    9c6e:	4603      	mov	r3, r0
    9c70:	71fb      	strb	r3, [r7, #7]
	return cc2400_spi(8, reg);
    9c72:	79fb      	ldrb	r3, [r7, #7]
    9c74:	2008      	movs	r0, #8
    9c76:	4619      	mov	r1, r3
    9c78:	f7ff feda 	bl	9a30 <cc2400_spi>
    9c7c:	4603      	mov	r3, r0
    9c7e:	b2db      	uxtb	r3, r3
}
    9c80:	4618      	mov	r0, r3
    9c82:	3708      	adds	r7, #8
    9c84:	46bd      	mov	sp, r7
    9c86:	bd80      	pop	{r7, pc}

00009c88 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    9c88:	b580      	push	{r7, lr}
    9c8a:	af00      	add	r7, sp, #0
	cc2400_set(MAIN, 0x0000);
    9c8c:	2000      	movs	r0, #0
    9c8e:	2100      	movs	r1, #0
    9c90:	f7ff ff28 	bl	9ae4 <cc2400_set>
	while (cc2400_get(MAIN) != 0x0000);
    9c94:	bf00      	nop
    9c96:	2000      	movs	r0, #0
    9c98:	f7ff ff0e 	bl	9ab8 <cc2400_get>
    9c9c:	4603      	mov	r3, r0
    9c9e:	2b00      	cmp	r3, #0
    9ca0:	d1f9      	bne.n	9c96 <cc2400_reset+0xe>
	cc2400_set(MAIN, 0x8000);
    9ca2:	2000      	movs	r0, #0
    9ca4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    9ca8:	f7ff ff1c 	bl	9ae4 <cc2400_set>
	while (cc2400_get(MAIN) != 0x8000);
    9cac:	bf00      	nop
    9cae:	2000      	movs	r0, #0
    9cb0:	f7ff ff02 	bl	9ab8 <cc2400_get>
    9cb4:	4603      	mov	r3, r0
    9cb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9cba:	d1f8      	bne.n	9cae <cc2400_reset+0x26>
}
    9cbc:	bd80      	pop	{r7, pc}
    9cbe:	bf00      	nop

00009cc0 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    9cc0:	b580      	push	{r7, lr}
    9cc2:	af00      	add	r7, sp, #0
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    9cc4:	4b5e      	ldr	r3, [pc, #376]	; (9e40 <clock_start+0x180>)
    9cc6:	f244 023a 	movw	r2, #16442	; 0x403a
    9cca:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    9ccc:	4b5d      	ldr	r3, [pc, #372]	; (9e44 <clock_start+0x184>)
    9cce:	2200      	movs	r2, #0
    9cd0:	601a      	str	r2, [r3, #0]

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    9cd2:	4a5d      	ldr	r2, [pc, #372]	; (9e48 <clock_start+0x188>)
    9cd4:	4b5c      	ldr	r3, [pc, #368]	; (9e48 <clock_start+0x188>)
    9cd6:	681b      	ldr	r3, [r3, #0]
    9cd8:	f023 0302 	bic.w	r3, r3, #2
    9cdc:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9cde:	4b5b      	ldr	r3, [pc, #364]	; (9e4c <clock_start+0x18c>)
    9ce0:	22aa      	movs	r2, #170	; 0xaa
    9ce2:	601a      	str	r2, [r3, #0]
    9ce4:	4b59      	ldr	r3, [pc, #356]	; (9e4c <clock_start+0x18c>)
    9ce6:	2255      	movs	r2, #85	; 0x55
    9ce8:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    9cea:	bf00      	nop
    9cec:	4b58      	ldr	r3, [pc, #352]	; (9e50 <clock_start+0x190>)
    9cee:	681b      	ldr	r3, [r3, #0]
    9cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    9cf4:	2b00      	cmp	r3, #0
    9cf6:	d1f9      	bne.n	9cec <clock_start+0x2c>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    9cf8:	4a53      	ldr	r2, [pc, #332]	; (9e48 <clock_start+0x188>)
    9cfa:	4b53      	ldr	r3, [pc, #332]	; (9e48 <clock_start+0x188>)
    9cfc:	681b      	ldr	r3, [r3, #0]
    9cfe:	f023 0301 	bic.w	r3, r3, #1
    9d02:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9d04:	4b51      	ldr	r3, [pc, #324]	; (9e4c <clock_start+0x18c>)
    9d06:	22aa      	movs	r2, #170	; 0xaa
    9d08:	601a      	str	r2, [r3, #0]
    9d0a:	4b50      	ldr	r3, [pc, #320]	; (9e4c <clock_start+0x18c>)
    9d0c:	2255      	movs	r2, #85	; 0x55
    9d0e:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    9d10:	bf00      	nop
    9d12:	4b4f      	ldr	r3, [pc, #316]	; (9e50 <clock_start+0x190>)
    9d14:	681b      	ldr	r3, [r3, #0]
    9d16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    9d1a:	2b00      	cmp	r3, #0
    9d1c:	d1f9      	bne.n	9d12 <clock_start+0x52>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    9d1e:	4b4d      	ldr	r3, [pc, #308]	; (9e54 <clock_start+0x194>)
    9d20:	2200      	movs	r2, #0
    9d22:	601a      	str	r2, [r3, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    9d24:	f7ff ffb0 	bl	9c88 <cc2400_reset>
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
    9d28:	2008      	movs	r0, #8
    9d2a:	f241 5170 	movw	r1, #5488	; 0x1570
    9d2e:	f7ff fed9 	bl	9ae4 <cc2400_set>
	cc2400_strobe(SXOSCON);
    9d32:	2060      	movs	r0, #96	; 0x60
    9d34:	f7ff ff98 	bl	9c68 <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    9d38:	bf00      	nop
    9d3a:	f7ff ff8b 	bl	9c54 <cc2400_status>
    9d3e:	4603      	mov	r3, r0
    9d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9d44:	2b00      	cmp	r3, #0
    9d46:	d0f8      	beq.n	9d3a <clock_start+0x7a>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    9d48:	4b43      	ldr	r3, [pc, #268]	; (9e58 <clock_start+0x198>)
    9d4a:	2220      	movs	r2, #32
    9d4c:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    9d4e:	bf00      	nop
    9d50:	4b41      	ldr	r3, [pc, #260]	; (9e58 <clock_start+0x198>)
    9d52:	681b      	ldr	r3, [r3, #0]
    9d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9d58:	2b00      	cmp	r3, #0
    9d5a:	d0f9      	beq.n	9d50 <clock_start+0x90>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    9d5c:	4b3f      	ldr	r3, [pc, #252]	; (9e5c <clock_start+0x19c>)
    9d5e:	2208      	movs	r2, #8
    9d60:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    9d62:	4b3f      	ldr	r3, [pc, #252]	; (9e60 <clock_start+0x1a0>)
    9d64:	2200      	movs	r2, #0
    9d66:	601a      	str	r2, [r3, #0]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    9d68:	4b36      	ldr	r3, [pc, #216]	; (9e44 <clock_start+0x184>)
    9d6a:	2201      	movs	r2, #1
    9d6c:	601a      	str	r2, [r3, #0]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    9d6e:	4b3d      	ldr	r3, [pc, #244]	; (9e64 <clock_start+0x1a4>)
    9d70:	4a3d      	ldr	r2, [pc, #244]	; (9e68 <clock_start+0x1a8>)
    9d72:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    9d74:	4b35      	ldr	r3, [pc, #212]	; (9e4c <clock_start+0x18c>)
    9d76:	22aa      	movs	r2, #170	; 0xaa
    9d78:	601a      	str	r2, [r3, #0]
    9d7a:	4b34      	ldr	r3, [pc, #208]	; (9e4c <clock_start+0x18c>)
    9d7c:	2255      	movs	r2, #85	; 0x55
    9d7e:	601a      	str	r2, [r3, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    9d80:	4a31      	ldr	r2, [pc, #196]	; (9e48 <clock_start+0x188>)
    9d82:	4b31      	ldr	r3, [pc, #196]	; (9e48 <clock_start+0x188>)
    9d84:	681b      	ldr	r3, [r3, #0]
    9d86:	f043 0301 	orr.w	r3, r3, #1
    9d8a:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9d8c:	4b2f      	ldr	r3, [pc, #188]	; (9e4c <clock_start+0x18c>)
    9d8e:	22aa      	movs	r2, #170	; 0xaa
    9d90:	601a      	str	r2, [r3, #0]
    9d92:	4b2e      	ldr	r3, [pc, #184]	; (9e4c <clock_start+0x18c>)
    9d94:	2255      	movs	r2, #85	; 0x55
    9d96:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    9d98:	bf00      	nop
    9d9a:	4b2d      	ldr	r3, [pc, #180]	; (9e50 <clock_start+0x190>)
    9d9c:	681b      	ldr	r3, [r3, #0]
    9d9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    9da2:	2b00      	cmp	r3, #0
    9da4:	d0f9      	beq.n	9d9a <clock_start+0xda>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    9da6:	4b2b      	ldr	r3, [pc, #172]	; (9e54 <clock_start+0x194>)
    9da8:	2203      	movs	r2, #3
    9daa:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    9dac:	4a26      	ldr	r2, [pc, #152]	; (9e48 <clock_start+0x188>)
    9dae:	4b26      	ldr	r3, [pc, #152]	; (9e48 <clock_start+0x188>)
    9db0:	681b      	ldr	r3, [r3, #0]
    9db2:	f043 0302 	orr.w	r3, r3, #2
    9db6:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9db8:	4b24      	ldr	r3, [pc, #144]	; (9e4c <clock_start+0x18c>)
    9dba:	22aa      	movs	r2, #170	; 0xaa
    9dbc:	601a      	str	r2, [r3, #0]
    9dbe:	4b23      	ldr	r3, [pc, #140]	; (9e4c <clock_start+0x18c>)
    9dc0:	2255      	movs	r2, #85	; 0x55
    9dc2:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    9dc4:	bf00      	nop
    9dc6:	4b22      	ldr	r3, [pc, #136]	; (9e50 <clock_start+0x190>)
    9dc8:	681b      	ldr	r3, [r3, #0]
    9dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    9dce:	2b00      	cmp	r3, #0
    9dd0:	d0f9      	beq.n	9dc6 <clock_start+0x106>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    9dd2:	4b26      	ldr	r3, [pc, #152]	; (9e6c <clock_start+0x1ac>)
    9dd4:	2222      	movs	r2, #34	; 0x22
    9dd6:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    9dd8:	4b25      	ldr	r3, [pc, #148]	; (9e70 <clock_start+0x1b0>)
    9dda:	22aa      	movs	r2, #170	; 0xaa
    9ddc:	601a      	str	r2, [r3, #0]
    9dde:	4b24      	ldr	r3, [pc, #144]	; (9e70 <clock_start+0x1b0>)
    9de0:	2255      	movs	r2, #85	; 0x55
    9de2:	601a      	str	r2, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    9de4:	4a23      	ldr	r2, [pc, #140]	; (9e74 <clock_start+0x1b4>)
    9de6:	4b23      	ldr	r3, [pc, #140]	; (9e74 <clock_start+0x1b4>)
    9de8:	681b      	ldr	r3, [r3, #0]
    9dea:	f043 0301 	orr.w	r3, r3, #1
    9dee:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    9df0:	4b1f      	ldr	r3, [pc, #124]	; (9e70 <clock_start+0x1b0>)
    9df2:	22aa      	movs	r2, #170	; 0xaa
    9df4:	601a      	str	r2, [r3, #0]
    9df6:	4b1e      	ldr	r3, [pc, #120]	; (9e70 <clock_start+0x1b0>)
    9df8:	2255      	movs	r2, #85	; 0x55
    9dfa:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    9dfc:	bf00      	nop
    9dfe:	4b1e      	ldr	r3, [pc, #120]	; (9e78 <clock_start+0x1b8>)
    9e00:	681b      	ldr	r3, [r3, #0]
    9e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
    9e06:	2b00      	cmp	r3, #0
    9e08:	d0f9      	beq.n	9dfe <clock_start+0x13e>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    9e0a:	bf00      	nop
    9e0c:	4b1a      	ldr	r3, [pc, #104]	; (9e78 <clock_start+0x1b8>)
    9e0e:	681b      	ldr	r3, [r3, #0]
    9e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9e14:	2b00      	cmp	r3, #0
    9e16:	d0f9      	beq.n	9e0c <clock_start+0x14c>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    9e18:	4a16      	ldr	r2, [pc, #88]	; (9e74 <clock_start+0x1b4>)
    9e1a:	4b16      	ldr	r3, [pc, #88]	; (9e74 <clock_start+0x1b4>)
    9e1c:	681b      	ldr	r3, [r3, #0]
    9e1e:	f043 0302 	orr.w	r3, r3, #2
    9e22:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    9e24:	4b12      	ldr	r3, [pc, #72]	; (9e70 <clock_start+0x1b0>)
    9e26:	22aa      	movs	r2, #170	; 0xaa
    9e28:	601a      	str	r2, [r3, #0]
    9e2a:	4b11      	ldr	r3, [pc, #68]	; (9e70 <clock_start+0x1b0>)
    9e2c:	2255      	movs	r2, #85	; 0x55
    9e2e:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    9e30:	bf00      	nop
    9e32:	4b11      	ldr	r3, [pc, #68]	; (9e78 <clock_start+0x1b8>)
    9e34:	681b      	ldr	r3, [r3, #0]
    9e36:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9e3a:	2b00      	cmp	r3, #0
    9e3c:	d0f9      	beq.n	9e32 <clock_start+0x172>
}
    9e3e:	bd80      	pop	{r7, pc}
    9e40:	400fc000 	.word	0x400fc000
    9e44:	400fc10c 	.word	0x400fc10c
    9e48:	400fc080 	.word	0x400fc080
    9e4c:	400fc08c 	.word	0x400fc08c
    9e50:	400fc088 	.word	0x400fc088
    9e54:	400fc104 	.word	0x400fc104
    9e58:	400fc1a0 	.word	0x400fc1a0
    9e5c:	400fc1a8 	.word	0x400fc1a8
    9e60:	400fc1ac 	.word	0x400fc1ac
    9e64:	400fc084 	.word	0x400fc084
    9e68:	00010018 	.word	0x00010018
    9e6c:	400fc0a4 	.word	0x400fc0a4
    9e70:	400fc0ac 	.word	0x400fc0ac
    9e74:	400fc0a0 	.word	0x400fc0a0
    9e78:	400fc0a8 	.word	0x400fc0a8

00009e7c <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    9e7c:	b580      	push	{r7, lr}
    9e7e:	af00      	add	r7, sp, #0
	all_pins_off();
    9e80:	f7ff fcd0 	bl	9824 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    9e84:	4b0a      	ldr	r3, [pc, #40]	; (9eb0 <reset+0x34>)
    9e86:	2202      	movs	r2, #2
    9e88:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    9e8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9e8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9e92:	681b      	ldr	r3, [r3, #0]
    9e94:	f043 0303 	orr.w	r3, r3, #3
    9e98:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    9e9a:	4b06      	ldr	r3, [pc, #24]	; (9eb4 <reset+0x38>)
    9e9c:	22aa      	movs	r2, #170	; 0xaa
    9e9e:	601a      	str	r2, [r3, #0]
    9ea0:	4b04      	ldr	r3, [pc, #16]	; (9eb4 <reset+0x38>)
    9ea2:	2255      	movs	r2, #85	; 0x55
    9ea4:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
    9ea6:	2001      	movs	r0, #1
    9ea8:	f7ff fc38 	bl	971c <wait>
}
    9eac:	bd80      	pop	{r7, pc}
    9eae:	bf00      	nop
    9eb0:	2009c03c 	.word	0x2009c03c
    9eb4:	40000008 	.word	0x40000008

00009eb8 <_HandleRequest>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    9eb8:	b580      	push	{r7, lr}
    9eba:	b088      	sub	sp, #32
    9ebc:	af00      	add	r7, sp, #0
    9ebe:	60f8      	str	r0, [r7, #12]
    9ec0:	60b9      	str	r1, [r7, #8]
    9ec2:	607a      	str	r2, [r7, #4]
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    9ec4:	68fb      	ldr	r3, [r7, #12]
    9ec6:	781b      	ldrb	r3, [r3, #0]
    9ec8:	095b      	lsrs	r3, r3, #5
    9eca:	b2db      	uxtb	r3, r3
    9ecc:	f003 0303 	and.w	r3, r3, #3
    9ed0:	61fb      	str	r3, [r7, #28]
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    9ed2:	69fb      	ldr	r3, [r7, #28]
    9ed4:	2b02      	cmp	r3, #2
    9ed6:	d10e      	bne.n	9ef6 <_HandleRequest+0x3e>
		BOOL fFilterStatus = FALSE;
    9ed8:	2300      	movs	r3, #0
    9eda:	617b      	str	r3, [r7, #20]
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    9edc:	f107 0314 	add.w	r3, r7, #20
    9ee0:	68f8      	ldr	r0, [r7, #12]
    9ee2:	4619      	mov	r1, r3
    9ee4:	68ba      	ldr	r2, [r7, #8]
    9ee6:	687b      	ldr	r3, [r7, #4]
    9ee8:	f000 fcd2 	bl	a890 <USBFilterOsVendorMessage>
    9eec:	4603      	mov	r3, r0
    9eee:	2b00      	cmp	r3, #0
    9ef0:	d001      	beq.n	9ef6 <_HandleRequest+0x3e>
			return fFilterStatus;
    9ef2:	697b      	ldr	r3, [r7, #20]
    9ef4:	e00f      	b.n	9f16 <_HandleRequest+0x5e>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    9ef6:	4a0a      	ldr	r2, [pc, #40]	; (9f20 <_HandleRequest+0x68>)
    9ef8:	69fb      	ldr	r3, [r7, #28]
    9efa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9efe:	61bb      	str	r3, [r7, #24]
	if (pfnHandler == NULL) {
    9f00:	69bb      	ldr	r3, [r7, #24]
    9f02:	2b00      	cmp	r3, #0
    9f04:	d101      	bne.n	9f0a <_HandleRequest+0x52>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    9f06:	2300      	movs	r3, #0
    9f08:	e005      	b.n	9f16 <_HandleRequest+0x5e>
	}

	return pfnHandler(pSetup, piLen, ppbData);
    9f0a:	69bb      	ldr	r3, [r7, #24]
    9f0c:	68f8      	ldr	r0, [r7, #12]
    9f0e:	68b9      	ldr	r1, [r7, #8]
    9f10:	687a      	ldr	r2, [r7, #4]
    9f12:	4798      	blx	r3
    9f14:	4603      	mov	r3, r0
}
    9f16:	4618      	mov	r0, r3
    9f18:	3720      	adds	r7, #32
    9f1a:	46bd      	mov	sp, r7
    9f1c:	bd80      	pop	{r7, pc}
    9f1e:	bf00      	nop
    9f20:	10000a80 	.word	0x10000a80

00009f24 <StallControlPipe>:
	Local function to stall the control endpoint
	
	@param [in]	bEPStat	Endpoint status
 */
static void StallControlPipe(U8 bEPStat)
{
    9f24:	b580      	push	{r7, lr}
    9f26:	b084      	sub	sp, #16
    9f28:	af00      	add	r7, sp, #0
    9f2a:	4603      	mov	r3, r0
    9f2c:	71fb      	strb	r3, [r7, #7]
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    9f2e:	2080      	movs	r0, #128	; 0x80
    9f30:	2101      	movs	r1, #1
    9f32:	f000 fa83 	bl	a43c <USBHwEPStall>

// dump setup packet
	DBG("STALL on [");
	pb = (U8 *)&Setup;
    9f36:	4b07      	ldr	r3, [pc, #28]	; (9f54 <StallControlPipe+0x30>)
    9f38:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
    9f3a:	2300      	movs	r3, #0
    9f3c:	60fb      	str	r3, [r7, #12]
    9f3e:	e002      	b.n	9f46 <StallControlPipe+0x22>
    9f40:	68fb      	ldr	r3, [r7, #12]
    9f42:	3301      	adds	r3, #1
    9f44:	60fb      	str	r3, [r7, #12]
    9f46:	68fb      	ldr	r3, [r7, #12]
    9f48:	2b07      	cmp	r3, #7
    9f4a:	ddf9      	ble.n	9f40 <StallControlPipe+0x1c>
		DBG(" %02x", *pb++);
	}
	DBG("] stat=%x\n", bEPStat);
}
    9f4c:	3710      	adds	r7, #16
    9f4e:	46bd      	mov	sp, r7
    9f50:	bd80      	pop	{r7, pc}
    9f52:	bf00      	nop
    9f54:	10000a6c 	.word	0x10000a6c

00009f58 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    9f58:	b580      	push	{r7, lr}
    9f5a:	b082      	sub	sp, #8
    9f5c:	af00      	add	r7, sp, #0
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    9f5e:	4b0e      	ldr	r3, [pc, #56]	; (9f98 <DataIn+0x40>)
    9f60:	681b      	ldr	r3, [r3, #0]
    9f62:	2b40      	cmp	r3, #64	; 0x40
    9f64:	bfa8      	it	ge
    9f66:	2340      	movge	r3, #64	; 0x40
    9f68:	607b      	str	r3, [r7, #4]
	USBHwEPWrite(0x80, pbData, iChunk);
    9f6a:	4b0c      	ldr	r3, [pc, #48]	; (9f9c <DataIn+0x44>)
    9f6c:	681a      	ldr	r2, [r3, #0]
    9f6e:	687b      	ldr	r3, [r7, #4]
    9f70:	2080      	movs	r0, #128	; 0x80
    9f72:	4611      	mov	r1, r2
    9f74:	461a      	mov	r2, r3
    9f76:	f000 fa85 	bl	a484 <USBHwEPWrite>
	pbData += iChunk;
    9f7a:	4b08      	ldr	r3, [pc, #32]	; (9f9c <DataIn+0x44>)
    9f7c:	681a      	ldr	r2, [r3, #0]
    9f7e:	687b      	ldr	r3, [r7, #4]
    9f80:	4413      	add	r3, r2
    9f82:	4a06      	ldr	r2, [pc, #24]	; (9f9c <DataIn+0x44>)
    9f84:	6013      	str	r3, [r2, #0]
	iResidue -= iChunk;
    9f86:	4b04      	ldr	r3, [pc, #16]	; (9f98 <DataIn+0x40>)
    9f88:	681a      	ldr	r2, [r3, #0]
    9f8a:	687b      	ldr	r3, [r7, #4]
    9f8c:	1ad3      	subs	r3, r2, r3
    9f8e:	4a02      	ldr	r2, [pc, #8]	; (9f98 <DataIn+0x40>)
    9f90:	6013      	str	r3, [r2, #0]
}
    9f92:	3708      	adds	r7, #8
    9f94:	46bd      	mov	sp, r7
    9f96:	bd80      	pop	{r7, pc}
    9f98:	10000a78 	.word	0x10000a78
    9f9c:	10000a74 	.word	0x10000a74

00009fa0 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    9fa0:	b580      	push	{r7, lr}
    9fa2:	b084      	sub	sp, #16
    9fa4:	af00      	add	r7, sp, #0
    9fa6:	4603      	mov	r3, r0
    9fa8:	460a      	mov	r2, r1
    9faa:	71fb      	strb	r3, [r7, #7]
    9fac:	4613      	mov	r3, r2
    9fae:	71bb      	strb	r3, [r7, #6]
	int iChunk, iType;

	if (bEP == 0x00) {
    9fb0:	79fb      	ldrb	r3, [r7, #7]
    9fb2:	2b00      	cmp	r3, #0
    9fb4:	f040 8091 	bne.w	a0da <USBHandleControlTransfer+0x13a>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    9fb8:	79bb      	ldrb	r3, [r7, #6]
    9fba:	f003 0304 	and.w	r3, r3, #4
    9fbe:	2b00      	cmp	r3, #0
    9fc0:	d041      	beq.n	a046 <USBHandleControlTransfer+0xa6>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    9fc2:	2000      	movs	r0, #0
    9fc4:	4949      	ldr	r1, [pc, #292]	; (a0ec <USBHandleControlTransfer+0x14c>)
    9fc6:	2208      	movs	r2, #8
    9fc8:	f000 faaa 	bl	a520 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    9fcc:	4b47      	ldr	r3, [pc, #284]	; (a0ec <USBHandleControlTransfer+0x14c>)
    9fce:	781b      	ldrb	r3, [r3, #0]
    9fd0:	095b      	lsrs	r3, r3, #5
    9fd2:	b2db      	uxtb	r3, r3
    9fd4:	f003 0303 	and.w	r3, r3, #3
    9fd8:	60fb      	str	r3, [r7, #12]
			pbData = apbDataStore[iType];
    9fda:	4a45      	ldr	r2, [pc, #276]	; (a0f0 <USBHandleControlTransfer+0x150>)
    9fdc:	68fb      	ldr	r3, [r7, #12]
    9fde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fe2:	4a44      	ldr	r2, [pc, #272]	; (a0f4 <USBHandleControlTransfer+0x154>)
    9fe4:	6013      	str	r3, [r2, #0]
			iResidue = Setup.wLength;
    9fe6:	4b41      	ldr	r3, [pc, #260]	; (a0ec <USBHandleControlTransfer+0x14c>)
    9fe8:	88db      	ldrh	r3, [r3, #6]
    9fea:	461a      	mov	r2, r3
    9fec:	4b42      	ldr	r3, [pc, #264]	; (a0f8 <USBHandleControlTransfer+0x158>)
    9fee:	601a      	str	r2, [r3, #0]
			iLen = Setup.wLength;
    9ff0:	4b3e      	ldr	r3, [pc, #248]	; (a0ec <USBHandleControlTransfer+0x14c>)
    9ff2:	88db      	ldrh	r3, [r3, #6]
    9ff4:	461a      	mov	r2, r3
    9ff6:	4b41      	ldr	r3, [pc, #260]	; (a0fc <USBHandleControlTransfer+0x15c>)
    9ff8:	601a      	str	r2, [r3, #0]

			if ((Setup.wLength == 0) ||
    9ffa:	4b3c      	ldr	r3, [pc, #240]	; (a0ec <USBHandleControlTransfer+0x14c>)
    9ffc:	88db      	ldrh	r3, [r3, #6]
    9ffe:	2b00      	cmp	r3, #0
    a000:	d007      	beq.n	a012 <USBHandleControlTransfer+0x72>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
    a002:	4b3a      	ldr	r3, [pc, #232]	; (a0ec <USBHandleControlTransfer+0x14c>)
    a004:	781b      	ldrb	r3, [r3, #0]
    a006:	09db      	lsrs	r3, r3, #7
    a008:	b2db      	uxtb	r3, r3
    a00a:	f003 0301 	and.w	r3, r3, #1
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
			pbData = apbDataStore[iType];
			iResidue = Setup.wLength;
			iLen = Setup.wLength;

			if ((Setup.wLength == 0) ||
    a00e:	2b00      	cmp	r3, #0
    a010:	d068      	beq.n	a0e4 <USBHandleControlTransfer+0x144>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    a012:	4836      	ldr	r0, [pc, #216]	; (a0ec <USBHandleControlTransfer+0x14c>)
    a014:	4939      	ldr	r1, [pc, #228]	; (a0fc <USBHandleControlTransfer+0x15c>)
    a016:	4a37      	ldr	r2, [pc, #220]	; (a0f4 <USBHandleControlTransfer+0x154>)
    a018:	f7ff ff4e 	bl	9eb8 <_HandleRequest>
    a01c:	4603      	mov	r3, r0
    a01e:	2b00      	cmp	r3, #0
    a020:	d104      	bne.n	a02c <USBHandleControlTransfer+0x8c>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
    a022:	79bb      	ldrb	r3, [r7, #6]
    a024:	4618      	mov	r0, r3
    a026:	f7ff ff7d 	bl	9f24 <StallControlPipe>
					return;
    a02a:	e05b      	b.n	a0e4 <USBHandleControlTransfer+0x144>
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    a02c:	4b2f      	ldr	r3, [pc, #188]	; (a0ec <USBHandleControlTransfer+0x14c>)
    a02e:	88db      	ldrh	r3, [r3, #6]
    a030:	461a      	mov	r2, r3
    a032:	4b32      	ldr	r3, [pc, #200]	; (a0fc <USBHandleControlTransfer+0x15c>)
    a034:	681b      	ldr	r3, [r3, #0]
    a036:	4293      	cmp	r3, r2
    a038:	bfa8      	it	ge
    a03a:	4613      	movge	r3, r2
    a03c:	4a2e      	ldr	r2, [pc, #184]	; (a0f8 <USBHandleControlTransfer+0x158>)
    a03e:	6013      	str	r3, [r2, #0]
				// send first part (possibly a zero-length status message)
				DataIn();
    a040:	f7ff ff8a 	bl	9f58 <DataIn>
    a044:	e04e      	b.n	a0e4 <USBHandleControlTransfer+0x144>
			}
		}
		else {		
			if (iResidue > 0) {
    a046:	4b2c      	ldr	r3, [pc, #176]	; (a0f8 <USBHandleControlTransfer+0x158>)
    a048:	681b      	ldr	r3, [r3, #0]
    a04a:	2b00      	cmp	r3, #0
    a04c:	dd3e      	ble.n	a0cc <USBHandleControlTransfer+0x12c>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    a04e:	4b29      	ldr	r3, [pc, #164]	; (a0f4 <USBHandleControlTransfer+0x154>)
    a050:	681a      	ldr	r2, [r3, #0]
    a052:	4b29      	ldr	r3, [pc, #164]	; (a0f8 <USBHandleControlTransfer+0x158>)
    a054:	681b      	ldr	r3, [r3, #0]
    a056:	2000      	movs	r0, #0
    a058:	4611      	mov	r1, r2
    a05a:	461a      	mov	r2, r3
    a05c:	f000 fa60 	bl	a520 <USBHwEPRead>
    a060:	60b8      	str	r0, [r7, #8]
				if (iChunk < 0) {
    a062:	68bb      	ldr	r3, [r7, #8]
    a064:	2b00      	cmp	r3, #0
    a066:	da04      	bge.n	a072 <USBHandleControlTransfer+0xd2>
					StallControlPipe(bEPStat);
    a068:	79bb      	ldrb	r3, [r7, #6]
    a06a:	4618      	mov	r0, r3
    a06c:	f7ff ff5a 	bl	9f24 <StallControlPipe>
					return;
    a070:	e038      	b.n	a0e4 <USBHandleControlTransfer+0x144>
				}
				pbData += iChunk;
    a072:	4b20      	ldr	r3, [pc, #128]	; (a0f4 <USBHandleControlTransfer+0x154>)
    a074:	681a      	ldr	r2, [r3, #0]
    a076:	68bb      	ldr	r3, [r7, #8]
    a078:	4413      	add	r3, r2
    a07a:	4a1e      	ldr	r2, [pc, #120]	; (a0f4 <USBHandleControlTransfer+0x154>)
    a07c:	6013      	str	r3, [r2, #0]
				iResidue -= iChunk;
    a07e:	4b1e      	ldr	r3, [pc, #120]	; (a0f8 <USBHandleControlTransfer+0x158>)
    a080:	681a      	ldr	r2, [r3, #0]
    a082:	68bb      	ldr	r3, [r7, #8]
    a084:	1ad3      	subs	r3, r2, r3
    a086:	4a1c      	ldr	r2, [pc, #112]	; (a0f8 <USBHandleControlTransfer+0x158>)
    a088:	6013      	str	r3, [r2, #0]
				if (iResidue == 0) {
    a08a:	4b1b      	ldr	r3, [pc, #108]	; (a0f8 <USBHandleControlTransfer+0x158>)
    a08c:	681b      	ldr	r3, [r3, #0]
    a08e:	2b00      	cmp	r3, #0
    a090:	d128      	bne.n	a0e4 <USBHandleControlTransfer+0x144>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    a092:	4b16      	ldr	r3, [pc, #88]	; (a0ec <USBHandleControlTransfer+0x14c>)
    a094:	781b      	ldrb	r3, [r3, #0]
    a096:	095b      	lsrs	r3, r3, #5
    a098:	b2db      	uxtb	r3, r3
    a09a:	f003 0303 	and.w	r3, r3, #3
    a09e:	60fb      	str	r3, [r7, #12]
					pbData = apbDataStore[iType];
    a0a0:	4a13      	ldr	r2, [pc, #76]	; (a0f0 <USBHandleControlTransfer+0x150>)
    a0a2:	68fb      	ldr	r3, [r7, #12]
    a0a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a0a8:	4a12      	ldr	r2, [pc, #72]	; (a0f4 <USBHandleControlTransfer+0x154>)
    a0aa:	6013      	str	r3, [r2, #0]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    a0ac:	480f      	ldr	r0, [pc, #60]	; (a0ec <USBHandleControlTransfer+0x14c>)
    a0ae:	4913      	ldr	r1, [pc, #76]	; (a0fc <USBHandleControlTransfer+0x15c>)
    a0b0:	4a10      	ldr	r2, [pc, #64]	; (a0f4 <USBHandleControlTransfer+0x154>)
    a0b2:	f7ff ff01 	bl	9eb8 <_HandleRequest>
    a0b6:	4603      	mov	r3, r0
    a0b8:	2b00      	cmp	r3, #0
    a0ba:	d104      	bne.n	a0c6 <USBHandleControlTransfer+0x126>
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
    a0bc:	79bb      	ldrb	r3, [r7, #6]
    a0be:	4618      	mov	r0, r3
    a0c0:	f7ff ff30 	bl	9f24 <StallControlPipe>
						return;
    a0c4:	e00e      	b.n	a0e4 <USBHandleControlTransfer+0x144>
					}
					// send status to host
					DataIn();
    a0c6:	f7ff ff47 	bl	9f58 <DataIn>
    a0ca:	e00b      	b.n	a0e4 <USBHandleControlTransfer+0x144>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    a0cc:	2000      	movs	r0, #0
    a0ce:	2100      	movs	r1, #0
    a0d0:	2200      	movs	r2, #0
    a0d2:	f000 fa25 	bl	a520 <USBHwEPRead>
    a0d6:	60b8      	str	r0, [r7, #8]
    a0d8:	e004      	b.n	a0e4 <USBHandleControlTransfer+0x144>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    a0da:	79fb      	ldrb	r3, [r7, #7]
    a0dc:	2b80      	cmp	r3, #128	; 0x80
    a0de:	d101      	bne.n	a0e4 <USBHandleControlTransfer+0x144>
		// IN transfer
		// send more data if available (possibly a 0-length packet)
		DataIn();
    a0e0:	f7ff ff3a 	bl	9f58 <DataIn>
	}
	else {
		ASSERT(FALSE);
	}
}
    a0e4:	3710      	adds	r7, #16
    a0e6:	46bd      	mov	sp, r7
    a0e8:	bd80      	pop	{r7, pc}
    a0ea:	bf00      	nop
    a0ec:	10000a6c 	.word	0x10000a6c
    a0f0:	10000a90 	.word	0x10000a90
    a0f4:	10000a74 	.word	0x10000a74
    a0f8:	10000a78 	.word	0x10000a78
    a0fc:	10000a7c 	.word	0x10000a7c

0000a100 <USBRegisterRequestHandler>:
	@param [in]	iType			Type of request, e.g. REQTYPE_TYPE_STANDARD
	@param [in]	*pfnHandler		Callback function pointer
	@param [in]	*pbDataStore	Data storage area for this type of request
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
    a100:	b480      	push	{r7}
    a102:	b085      	sub	sp, #20
    a104:	af00      	add	r7, sp, #0
    a106:	60f8      	str	r0, [r7, #12]
    a108:	60b9      	str	r1, [r7, #8]
    a10a:	607a      	str	r2, [r7, #4]
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    a10c:	4907      	ldr	r1, [pc, #28]	; (a12c <USBRegisterRequestHandler+0x2c>)
    a10e:	68fb      	ldr	r3, [r7, #12]
    a110:	68ba      	ldr	r2, [r7, #8]
    a112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	apbDataStore[iType] = pbDataStore;
    a116:	4906      	ldr	r1, [pc, #24]	; (a130 <USBRegisterRequestHandler+0x30>)
    a118:	68fb      	ldr	r3, [r7, #12]
    a11a:	687a      	ldr	r2, [r7, #4]
    a11c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a120:	3714      	adds	r7, #20
    a122:	46bd      	mov	sp, r7
    a124:	f85d 7b04 	ldr.w	r7, [sp], #4
    a128:	4770      	bx	lr
    a12a:	bf00      	nop
    a12c:	10000a80 	.word	0x10000a80
    a130:	10000a90 	.word	0x10000a90

0000a134 <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    a134:	b480      	push	{r7}
    a136:	b083      	sub	sp, #12
    a138:	af00      	add	r7, sp, #0
    a13a:	4603      	mov	r3, r0
    a13c:	71fb      	strb	r3, [r7, #7]
	if (bDevStatus & DEV_STATUS_RESET) {
		DBG("\n!");
	}
}
    a13e:	370c      	adds	r7, #12
    a140:	46bd      	mov	sp, r7
    a142:	f85d 7b04 	ldr.w	r7, [sp], #4
    a146:	4770      	bx	lr

0000a148 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    a148:	b580      	push	{r7, lr}
    a14a:	af00      	add	r7, sp, #0
	// init hardware
	USBHwInit();
    a14c:	f000 fb2a 	bl	a7a4 <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    a150:	480d      	ldr	r0, [pc, #52]	; (a188 <USBInit+0x40>)
    a152:	f000 f913 	bl	a37c <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    a156:	2000      	movs	r0, #0
    a158:	490c      	ldr	r1, [pc, #48]	; (a18c <USBInit+0x44>)
    a15a:	f000 f8dd 	bl	a318 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    a15e:	2080      	movs	r0, #128	; 0x80
    a160:	490a      	ldr	r1, [pc, #40]	; (a18c <USBInit+0x44>)
    a162:	f000 f8d9 	bl	a318 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    a166:	2000      	movs	r0, #0
    a168:	2140      	movs	r1, #64	; 0x40
    a16a:	f000 f8b7 	bl	a2dc <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    a16e:	2080      	movs	r0, #128	; 0x80
    a170:	2140      	movs	r1, #64	; 0x40
    a172:	f000 f8b3 	bl	a2dc <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    a176:	2000      	movs	r0, #0
    a178:	4905      	ldr	r1, [pc, #20]	; (a190 <USBInit+0x48>)
    a17a:	4a06      	ldr	r2, [pc, #24]	; (a194 <USBInit+0x4c>)
    a17c:	f7ff ffc0 	bl	a100 <USBRegisterRequestHandler>

	return TRUE;
    a180:	2301      	movs	r3, #1
}
    a182:	4618      	mov	r0, r3
    a184:	bd80      	pop	{r7, pc}
    a186:	bf00      	nop
    a188:	0000a135 	.word	0x0000a135
    a18c:	00009fa1 	.word	0x00009fa1
    a190:	0000addd 	.word	0x0000addd
    a194:	10000aa0 	.word	0x10000aa0

0000a198 <Wait4DevInt>:
    Local function to wait for a device interrupt (and clear it)
        
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    a198:	b480      	push	{r7}
    a19a:	b083      	sub	sp, #12
    a19c:	af00      	add	r7, sp, #0
    a19e:	6078      	str	r0, [r7, #4]
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    a1a0:	bf00      	nop
    a1a2:	4b07      	ldr	r3, [pc, #28]	; (a1c0 <Wait4DevInt+0x28>)
    a1a4:	681a      	ldr	r2, [r3, #0]
    a1a6:	687b      	ldr	r3, [r7, #4]
    a1a8:	401a      	ands	r2, r3
    a1aa:	687b      	ldr	r3, [r7, #4]
    a1ac:	429a      	cmp	r2, r3
    a1ae:	d1f8      	bne.n	a1a2 <Wait4DevInt+0xa>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    a1b0:	4a04      	ldr	r2, [pc, #16]	; (a1c4 <Wait4DevInt+0x2c>)
    a1b2:	687b      	ldr	r3, [r7, #4]
    a1b4:	6013      	str	r3, [r2, #0]
}
    a1b6:	370c      	adds	r7, #12
    a1b8:	46bd      	mov	sp, r7
    a1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1be:	4770      	bx	lr
    a1c0:	5000c200 	.word	0x5000c200
    a1c4:	5000c208 	.word	0x5000c208

0000a1c8 <USBHwCmd>:
    Local function to send a command to the USB protocol engine
        
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    a1c8:	b580      	push	{r7, lr}
    a1ca:	b082      	sub	sp, #8
    a1cc:	af00      	add	r7, sp, #0
    a1ce:	4603      	mov	r3, r0
    a1d0:	71fb      	strb	r3, [r7, #7]
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    a1d2:	4b07      	ldr	r3, [pc, #28]	; (a1f0 <USBHwCmd+0x28>)
    a1d4:	2230      	movs	r2, #48	; 0x30
    a1d6:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    a1d8:	4a06      	ldr	r2, [pc, #24]	; (a1f4 <USBHwCmd+0x2c>)
    a1da:	79fb      	ldrb	r3, [r7, #7]
    a1dc:	041b      	lsls	r3, r3, #16
    a1de:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    a1e2:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    a1e4:	2010      	movs	r0, #16
    a1e6:	f7ff ffd7 	bl	a198 <Wait4DevInt>
}
    a1ea:	3708      	adds	r7, #8
    a1ec:	46bd      	mov	sp, r7
    a1ee:	bd80      	pop	{r7, pc}
    a1f0:	5000c208 	.word	0x5000c208
    a1f4:	5000c210 	.word	0x5000c210

0000a1f8 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    a1f8:	b580      	push	{r7, lr}
    a1fa:	b082      	sub	sp, #8
    a1fc:	af00      	add	r7, sp, #0
    a1fe:	4603      	mov	r3, r0
    a200:	460a      	mov	r2, r1
    a202:	71fb      	strb	r3, [r7, #7]
    a204:	4613      	mov	r3, r2
    a206:	80bb      	strh	r3, [r7, #4]
    // write command code
    USBHwCmd(bCmd);
    a208:	79fb      	ldrb	r3, [r7, #7]
    a20a:	4618      	mov	r0, r3
    a20c:	f7ff ffdc 	bl	a1c8 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    a210:	4a05      	ldr	r2, [pc, #20]	; (a228 <USBHwCmdWrite+0x30>)
    a212:	88bb      	ldrh	r3, [r7, #4]
    a214:	041b      	lsls	r3, r3, #16
    a216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a21a:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    a21c:	2010      	movs	r0, #16
    a21e:	f7ff ffbb 	bl	a198 <Wait4DevInt>
}
    a222:	3708      	adds	r7, #8
    a224:	46bd      	mov	sp, r7
    a226:	bd80      	pop	{r7, pc}
    a228:	5000c210 	.word	0x5000c210

0000a22c <USBHwCmdRead>:
    @param [in] bCmd        Command to send

    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    a22c:	b580      	push	{r7, lr}
    a22e:	b082      	sub	sp, #8
    a230:	af00      	add	r7, sp, #0
    a232:	4603      	mov	r3, r0
    a234:	71fb      	strb	r3, [r7, #7]
    // write command code
    USBHwCmd(bCmd);
    a236:	79fb      	ldrb	r3, [r7, #7]
    a238:	4618      	mov	r0, r3
    a23a:	f7ff ffc5 	bl	a1c8 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    a23e:	4a08      	ldr	r2, [pc, #32]	; (a260 <USBHwCmdRead+0x34>)
    a240:	79fb      	ldrb	r3, [r7, #7]
    a242:	041b      	lsls	r3, r3, #16
    a244:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a248:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CDFULL);
    a24a:	2020      	movs	r0, #32
    a24c:	f7ff ffa4 	bl	a198 <Wait4DevInt>
    return USBCmdData;
    a250:	4b04      	ldr	r3, [pc, #16]	; (a264 <USBHwCmdRead+0x38>)
    a252:	681b      	ldr	r3, [r3, #0]
    a254:	b2db      	uxtb	r3, r3
}
    a256:	4618      	mov	r0, r3
    a258:	3708      	adds	r7, #8
    a25a:	46bd      	mov	sp, r7
    a25c:	bd80      	pop	{r7, pc}
    a25e:	bf00      	nop
    a260:	5000c210 	.word	0x5000c210
    a264:	5000c214 	.word	0x5000c214

0000a268 <USBHwEPRealize>:
        
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    a268:	b580      	push	{r7, lr}
    a26a:	b082      	sub	sp, #8
    a26c:	af00      	add	r7, sp, #0
    a26e:	6078      	str	r0, [r7, #4]
    a270:	460b      	mov	r3, r1
    a272:	807b      	strh	r3, [r7, #2]
    USBReEp |= (1 << idx);
    a274:	490a      	ldr	r1, [pc, #40]	; (a2a0 <USBHwEPRealize+0x38>)
    a276:	4b0a      	ldr	r3, [pc, #40]	; (a2a0 <USBHwEPRealize+0x38>)
    a278:	681b      	ldr	r3, [r3, #0]
    a27a:	2001      	movs	r0, #1
    a27c:	687a      	ldr	r2, [r7, #4]
    a27e:	fa00 f202 	lsl.w	r2, r0, r2
    a282:	4313      	orrs	r3, r2
    a284:	600b      	str	r3, [r1, #0]
#ifdef LPC17xx
    USBEpIn = idx;
    a286:	4a07      	ldr	r2, [pc, #28]	; (a2a4 <USBHwEPRealize+0x3c>)
    a288:	687b      	ldr	r3, [r7, #4]
    a28a:	6013      	str	r3, [r2, #0]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    a28c:	4a06      	ldr	r2, [pc, #24]	; (a2a8 <USBHwEPRealize+0x40>)
    a28e:	887b      	ldrh	r3, [r7, #2]
    a290:	6013      	str	r3, [r2, #0]
    Wait4DevInt(EP_RLZED);
    a292:	f44f 7080 	mov.w	r0, #256	; 0x100
    a296:	f7ff ff7f 	bl	a198 <Wait4DevInt>
}
    a29a:	3708      	adds	r7, #8
    a29c:	46bd      	mov	sp, r7
    a29e:	bd80      	pop	{r7, pc}
    a2a0:	5000c244 	.word	0x5000c244
    a2a4:	5000c248 	.word	0x5000c248
    a2a8:	5000c24c 	.word	0x5000c24c

0000a2ac <USBHwEPEnable>:
        
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    a2ac:	b580      	push	{r7, lr}
    a2ae:	b082      	sub	sp, #8
    a2b0:	af00      	add	r7, sp, #0
    a2b2:	6078      	str	r0, [r7, #4]
    a2b4:	6039      	str	r1, [r7, #0]
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    a2b6:	687b      	ldr	r3, [r7, #4]
    a2b8:	b2db      	uxtb	r3, r3
    a2ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a2be:	b2db      	uxtb	r3, r3
    a2c0:	b2da      	uxtb	r2, r3
    a2c2:	683b      	ldr	r3, [r7, #0]
    a2c4:	2b00      	cmp	r3, #0
    a2c6:	d001      	beq.n	a2cc <USBHwEPEnable+0x20>
    a2c8:	2300      	movs	r3, #0
    a2ca:	e000      	b.n	a2ce <USBHwEPEnable+0x22>
    a2cc:	2320      	movs	r3, #32
    a2ce:	4610      	mov	r0, r2
    a2d0:	4619      	mov	r1, r3
    a2d2:	f7ff ff91 	bl	a1f8 <USBHwCmdWrite>
}
    a2d6:	3708      	adds	r7, #8
    a2d8:	46bd      	mov	sp, r7
    a2da:	bd80      	pop	{r7, pc}

0000a2dc <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    a2dc:	b580      	push	{r7, lr}
    a2de:	b084      	sub	sp, #16
    a2e0:	af00      	add	r7, sp, #0
    a2e2:	4603      	mov	r3, r0
    a2e4:	460a      	mov	r2, r1
    a2e6:	71fb      	strb	r3, [r7, #7]
    a2e8:	4613      	mov	r3, r2
    a2ea:	80bb      	strh	r3, [r7, #4]
    int idx;
    
    idx = EP2IDX(bEP);
    a2ec:	79fb      	ldrb	r3, [r7, #7]
    a2ee:	f003 030f 	and.w	r3, r3, #15
    a2f2:	005b      	lsls	r3, r3, #1
    a2f4:	79fa      	ldrb	r2, [r7, #7]
    a2f6:	09d2      	lsrs	r2, r2, #7
    a2f8:	b2d2      	uxtb	r2, r2
    a2fa:	4313      	orrs	r3, r2
    a2fc:	60fb      	str	r3, [r7, #12]
    
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);
    a2fe:	88bb      	ldrh	r3, [r7, #4]
    a300:	68f8      	ldr	r0, [r7, #12]
    a302:	4619      	mov	r1, r3
    a304:	f7ff ffb0 	bl	a268 <USBHwEPRealize>

    // enable EP
    USBHwEPEnable(idx, TRUE);
    a308:	68f8      	ldr	r0, [r7, #12]
    a30a:	2101      	movs	r1, #1
    a30c:	f7ff ffce 	bl	a2ac <USBHwEPEnable>
}
    a310:	3710      	adds	r7, #16
    a312:	46bd      	mov	sp, r7
    a314:	bd80      	pop	{r7, pc}
    a316:	bf00      	nop

0000a318 <USBHwRegisterEPIntHandler>:
        
    @param [in] bEP             Endpoint number
    @param [in] pfnHandler      Callback function
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    a318:	b480      	push	{r7}
    a31a:	b085      	sub	sp, #20
    a31c:	af00      	add	r7, sp, #0
    a31e:	4603      	mov	r3, r0
    a320:	6039      	str	r1, [r7, #0]
    a322:	71fb      	strb	r3, [r7, #7]
    int idx;
    
    idx = EP2IDX(bEP);
    a324:	79fb      	ldrb	r3, [r7, #7]
    a326:	f003 030f 	and.w	r3, r3, #15
    a32a:	005b      	lsls	r3, r3, #1
    a32c:	79fa      	ldrb	r2, [r7, #7]
    a32e:	09d2      	lsrs	r2, r2, #7
    a330:	b2d2      	uxtb	r2, r2
    a332:	4313      	orrs	r3, r2
    a334:	60fb      	str	r3, [r7, #12]

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    a336:	68fb      	ldr	r3, [r7, #12]
    a338:	0fda      	lsrs	r2, r3, #31
    a33a:	4413      	add	r3, r2
    a33c:	105b      	asrs	r3, r3, #1
    a33e:	4619      	mov	r1, r3
    a340:	4a0b      	ldr	r2, [pc, #44]	; (a370 <USBHwRegisterEPIntHandler+0x58>)
    a342:	683b      	ldr	r3, [r7, #0]
    a344:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    a348:	490a      	ldr	r1, [pc, #40]	; (a374 <USBHwRegisterEPIntHandler+0x5c>)
    a34a:	4b0a      	ldr	r3, [pc, #40]	; (a374 <USBHwRegisterEPIntHandler+0x5c>)
    a34c:	681b      	ldr	r3, [r3, #0]
    a34e:	2001      	movs	r0, #1
    a350:	68fa      	ldr	r2, [r7, #12]
    a352:	fa00 f202 	lsl.w	r2, r0, r2
    a356:	4313      	orrs	r3, r2
    a358:	600b      	str	r3, [r1, #0]
    USBDevIntEn |= EP_SLOW;
    a35a:	4a07      	ldr	r2, [pc, #28]	; (a378 <USBHwRegisterEPIntHandler+0x60>)
    a35c:	4b06      	ldr	r3, [pc, #24]	; (a378 <USBHwRegisterEPIntHandler+0x60>)
    a35e:	681b      	ldr	r3, [r3, #0]
    a360:	f043 0304 	orr.w	r3, r3, #4
    a364:	6013      	str	r3, [r2, #0]
    
    DBG("Registered handler for EP 0x%x\n", bEP);
}
    a366:	3714      	adds	r7, #20
    a368:	46bd      	mov	sp, r7
    a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a36e:	4770      	bx	lr
    a370:	10000aac 	.word	0x10000aac
    a374:	5000c234 	.word	0x5000c234
    a378:	5000c204 	.word	0x5000c204

0000a37c <USBHwRegisterDevIntHandler>:
    Registers an device status callback
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    a37c:	b480      	push	{r7}
    a37e:	b083      	sub	sp, #12
    a380:	af00      	add	r7, sp, #0
    a382:	6078      	str	r0, [r7, #4]
    _pfnDevIntHandler = pfnHandler;
    a384:	4a06      	ldr	r2, [pc, #24]	; (a3a0 <USBHwRegisterDevIntHandler+0x24>)
    a386:	687b      	ldr	r3, [r7, #4]
    a388:	6013      	str	r3, [r2, #0]
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    a38a:	4a06      	ldr	r2, [pc, #24]	; (a3a4 <USBHwRegisterDevIntHandler+0x28>)
    a38c:	4b05      	ldr	r3, [pc, #20]	; (a3a4 <USBHwRegisterDevIntHandler+0x28>)
    a38e:	681b      	ldr	r3, [r3, #0]
    a390:	f043 0308 	orr.w	r3, r3, #8
    a394:	6013      	str	r3, [r2, #0]

    DBG("Registered handler for device status\n");
}
    a396:	370c      	adds	r7, #12
    a398:	46bd      	mov	sp, r7
    a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a39e:	4770      	bx	lr
    a3a0:	10000aa8 	.word	0x10000aa8
    a3a4:	5000c204 	.word	0x5000c204

0000a3a8 <USBHwSetAddress>:
    Sets the USB address.
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    a3a8:	b580      	push	{r7, lr}
    a3aa:	b082      	sub	sp, #8
    a3ac:	af00      	add	r7, sp, #0
    a3ae:	4603      	mov	r3, r0
    a3b0:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    a3b2:	79fb      	ldrb	r3, [r7, #7]
    a3b4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a3b8:	b2db      	uxtb	r3, r3
    a3ba:	b29b      	uxth	r3, r3
    a3bc:	20d0      	movs	r0, #208	; 0xd0
    a3be:	4619      	mov	r1, r3
    a3c0:	f7ff ff1a 	bl	a1f8 <USBHwCmdWrite>
}
    a3c4:	3708      	adds	r7, #8
    a3c6:	46bd      	mov	sp, r7
    a3c8:	bd80      	pop	{r7, pc}
    a3ca:	bf00      	nop

0000a3cc <USBHwConnect>:
    Connects or disconnects from the USB bus
        
    @param [in] fConnect    If TRUE, connect, otherwise disconnect
 */
void USBHwConnect(BOOL fConnect)
{
    a3cc:	b580      	push	{r7, lr}
    a3ce:	b082      	sub	sp, #8
    a3d0:	af00      	add	r7, sp, #0
    a3d2:	6078      	str	r0, [r7, #4]
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    a3d4:	687b      	ldr	r3, [r7, #4]
    a3d6:	2b00      	cmp	r3, #0
    a3d8:	bf14      	ite	ne
    a3da:	2301      	movne	r3, #1
    a3dc:	2300      	moveq	r3, #0
    a3de:	b2db      	uxtb	r3, r3
    a3e0:	b29b      	uxth	r3, r3
    a3e2:	20fe      	movs	r0, #254	; 0xfe
    a3e4:	4619      	mov	r1, r3
    a3e6:	f7ff ff07 	bl	a1f8 <USBHwCmdWrite>
}
    a3ea:	3708      	adds	r7, #8
    a3ec:	46bd      	mov	sp, r7
    a3ee:	bd80      	pop	{r7, pc}

0000a3f0 <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    a3f0:	b580      	push	{r7, lr}
    a3f2:	b082      	sub	sp, #8
    a3f4:	af00      	add	r7, sp, #0
    a3f6:	4603      	mov	r3, r0
    a3f8:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    a3fa:	79fb      	ldrb	r3, [r7, #7]
    a3fc:	b29b      	uxth	r3, r3
    a3fe:	20f3      	movs	r0, #243	; 0xf3
    a400:	4619      	mov	r1, r3
    a402:	f7ff fef9 	bl	a1f8 <USBHwCmdWrite>
}
    a406:	3708      	adds	r7, #8
    a408:	46bd      	mov	sp, r7
    a40a:	bd80      	pop	{r7, pc}

0000a40c <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    a40c:	b580      	push	{r7, lr}
    a40e:	b084      	sub	sp, #16
    a410:	af00      	add	r7, sp, #0
    a412:	4603      	mov	r3, r0
    a414:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    a416:	79fb      	ldrb	r3, [r7, #7]
    a418:	f003 030f 	and.w	r3, r3, #15
    a41c:	005b      	lsls	r3, r3, #1
    a41e:	79fa      	ldrb	r2, [r7, #7]
    a420:	09d2      	lsrs	r2, r2, #7
    a422:	b2d2      	uxtb	r2, r2
    a424:	4313      	orrs	r3, r2
    a426:	60fb      	str	r3, [r7, #12]

    return USBHwCmdRead(CMD_EP_SELECT | idx);
    a428:	68fb      	ldr	r3, [r7, #12]
    a42a:	b2db      	uxtb	r3, r3
    a42c:	4618      	mov	r0, r3
    a42e:	f7ff fefd 	bl	a22c <USBHwCmdRead>
    a432:	4603      	mov	r3, r0
}
    a434:	4618      	mov	r0, r3
    a436:	3710      	adds	r7, #16
    a438:	46bd      	mov	sp, r7
    a43a:	bd80      	pop	{r7, pc}

0000a43c <USBHwEPStall>:
        
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    a43c:	b580      	push	{r7, lr}
    a43e:	b084      	sub	sp, #16
    a440:	af00      	add	r7, sp, #0
    a442:	4603      	mov	r3, r0
    a444:	6039      	str	r1, [r7, #0]
    a446:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    a448:	79fb      	ldrb	r3, [r7, #7]
    a44a:	f003 030f 	and.w	r3, r3, #15
    a44e:	005b      	lsls	r3, r3, #1
    a450:	79fa      	ldrb	r2, [r7, #7]
    a452:	09d2      	lsrs	r2, r2, #7
    a454:	b2d2      	uxtb	r2, r2
    a456:	4313      	orrs	r3, r2
    a458:	60fb      	str	r3, [r7, #12]

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    a45a:	68fb      	ldr	r3, [r7, #12]
    a45c:	b2db      	uxtb	r3, r3
    a45e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a462:	b2db      	uxtb	r3, r3
    a464:	b2da      	uxtb	r2, r3
    a466:	683b      	ldr	r3, [r7, #0]
    a468:	2b00      	cmp	r3, #0
    a46a:	bf14      	ite	ne
    a46c:	2301      	movne	r3, #1
    a46e:	2300      	moveq	r3, #0
    a470:	b2db      	uxtb	r3, r3
    a472:	b29b      	uxth	r3, r3
    a474:	4610      	mov	r0, r2
    a476:	4619      	mov	r1, r3
    a478:	f7ff febe 	bl	a1f8 <USBHwCmdWrite>
}
    a47c:	3710      	adds	r7, #16
    a47e:	46bd      	mov	sp, r7
    a480:	bd80      	pop	{r7, pc}
    a482:	bf00      	nop

0000a484 <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    a484:	b580      	push	{r7, lr}
    a486:	b086      	sub	sp, #24
    a488:	af00      	add	r7, sp, #0
    a48a:	4603      	mov	r3, r0
    a48c:	60b9      	str	r1, [r7, #8]
    a48e:	607a      	str	r2, [r7, #4]
    a490:	73fb      	strb	r3, [r7, #15]
    U32 idx;
    
    idx = EP2IDX(bEP);
    a492:	7bfb      	ldrb	r3, [r7, #15]
    a494:	f003 030f 	and.w	r3, r3, #15
    a498:	005b      	lsls	r3, r3, #1
    a49a:	7bfa      	ldrb	r2, [r7, #15]
    a49c:	09d2      	lsrs	r2, r2, #7
    a49e:	b2d2      	uxtb	r2, r2
    a4a0:	4313      	orrs	r3, r2
    a4a2:	617b      	str	r3, [r7, #20]
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    a4a4:	4a1b      	ldr	r2, [pc, #108]	; (a514 <USBHwEPWrite+0x90>)
    a4a6:	7bfb      	ldrb	r3, [r7, #15]
    a4a8:	f003 030f 	and.w	r3, r3, #15
    a4ac:	009b      	lsls	r3, r3, #2
    a4ae:	f043 0302 	orr.w	r3, r3, #2
    a4b2:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    a4b4:	4a18      	ldr	r2, [pc, #96]	; (a518 <USBHwEPWrite+0x94>)
    a4b6:	687b      	ldr	r3, [r7, #4]
    a4b8:	6013      	str	r3, [r2, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    a4ba:	e015      	b.n	a4e8 <USBHwEPWrite+0x64>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    a4bc:	4917      	ldr	r1, [pc, #92]	; (a51c <USBHwEPWrite+0x98>)
    a4be:	68bb      	ldr	r3, [r7, #8]
    a4c0:	3303      	adds	r3, #3
    a4c2:	781b      	ldrb	r3, [r3, #0]
    a4c4:	061a      	lsls	r2, r3, #24
    a4c6:	68bb      	ldr	r3, [r7, #8]
    a4c8:	3302      	adds	r3, #2
    a4ca:	781b      	ldrb	r3, [r3, #0]
    a4cc:	041b      	lsls	r3, r3, #16
    a4ce:	431a      	orrs	r2, r3
    a4d0:	68bb      	ldr	r3, [r7, #8]
    a4d2:	3301      	adds	r3, #1
    a4d4:	781b      	ldrb	r3, [r3, #0]
    a4d6:	021b      	lsls	r3, r3, #8
    a4d8:	4313      	orrs	r3, r2
    a4da:	68ba      	ldr	r2, [r7, #8]
    a4dc:	7812      	ldrb	r2, [r2, #0]
    a4de:	4313      	orrs	r3, r2
    a4e0:	600b      	str	r3, [r1, #0]
        pbBuf += 4;
    a4e2:	68bb      	ldr	r3, [r7, #8]
    a4e4:	3304      	adds	r3, #4
    a4e6:	60bb      	str	r3, [r7, #8]
    
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
    a4e8:	4b0a      	ldr	r3, [pc, #40]	; (a514 <USBHwEPWrite+0x90>)
    a4ea:	681b      	ldr	r3, [r3, #0]
    a4ec:	f003 0302 	and.w	r3, r3, #2
    a4f0:	2b00      	cmp	r3, #0
    a4f2:	d1e3      	bne.n	a4bc <USBHwEPWrite+0x38>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
        pbBuf += 4;
    }

    USBCtrl = 0;
    a4f4:	4b07      	ldr	r3, [pc, #28]	; (a514 <USBHwEPWrite+0x90>)
    a4f6:	2200      	movs	r2, #0
    a4f8:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    a4fa:	697b      	ldr	r3, [r7, #20]
    a4fc:	b2db      	uxtb	r3, r3
    a4fe:	4618      	mov	r0, r3
    a500:	f7ff fe62 	bl	a1c8 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    a504:	20fa      	movs	r0, #250	; 0xfa
    a506:	f7ff fe5f 	bl	a1c8 <USBHwCmd>
    
    return iLen;
    a50a:	687b      	ldr	r3, [r7, #4]
}
    a50c:	4618      	mov	r0, r3
    a50e:	3718      	adds	r7, #24
    a510:	46bd      	mov	sp, r7
    a512:	bd80      	pop	{r7, pc}
    a514:	5000c228 	.word	0x5000c228
    a518:	5000c224 	.word	0x5000c224
    a51c:	5000c21c 	.word	0x5000c21c

0000a520 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    a520:	b580      	push	{r7, lr}
    a522:	b088      	sub	sp, #32
    a524:	af00      	add	r7, sp, #0
    a526:	4603      	mov	r3, r0
    a528:	60b9      	str	r1, [r7, #8]
    a52a:	607a      	str	r2, [r7, #4]
    a52c:	73fb      	strb	r3, [r7, #15]
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    a52e:	7bfb      	ldrb	r3, [r7, #15]
    a530:	f003 030f 	and.w	r3, r3, #15
    a534:	005b      	lsls	r3, r3, #1
    a536:	7bfa      	ldrb	r2, [r7, #15]
    a538:	09d2      	lsrs	r2, r2, #7
    a53a:	b2d2      	uxtb	r2, r2
    a53c:	4313      	orrs	r3, r2
    a53e:	617b      	str	r3, [r7, #20]
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    a540:	4a27      	ldr	r2, [pc, #156]	; (a5e0 <USBHwEPRead+0xc0>)
    a542:	7bfb      	ldrb	r3, [r7, #15]
    a544:	f003 030f 	and.w	r3, r3, #15
    a548:	009b      	lsls	r3, r3, #2
    a54a:	f043 0301 	orr.w	r3, r3, #1
    a54e:	6013      	str	r3, [r2, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    a550:	4b24      	ldr	r3, [pc, #144]	; (a5e4 <USBHwEPRead+0xc4>)
    a552:	681b      	ldr	r3, [r3, #0]
    a554:	613b      	str	r3, [r7, #16]
    } while ((dwLen & PKT_RDY) == 0);
    a556:	693b      	ldr	r3, [r7, #16]
    a558:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    a55c:	2b00      	cmp	r3, #0
    a55e:	d0f7      	beq.n	a550 <USBHwEPRead+0x30>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    a560:	693b      	ldr	r3, [r7, #16]
    a562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a566:	2b00      	cmp	r3, #0
    a568:	d102      	bne.n	a570 <USBHwEPRead+0x50>
        return -1;
    a56a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a56e:	e033      	b.n	a5d8 <USBHwEPRead+0xb8>
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    a570:	693b      	ldr	r3, [r7, #16]
    a572:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a576:	613b      	str	r3, [r7, #16]
    
    // get data
    dwData = 0;
    a578:	2300      	movs	r3, #0
    a57a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < dwLen; i++) {
    a57c:	2300      	movs	r3, #0
    a57e:	61fb      	str	r3, [r7, #28]
    a580:	e01a      	b.n	a5b8 <USBHwEPRead+0x98>
        if ((i % 4) == 0) {
    a582:	69fb      	ldr	r3, [r7, #28]
    a584:	f003 0303 	and.w	r3, r3, #3
    a588:	2b00      	cmp	r3, #0
    a58a:	d102      	bne.n	a592 <USBHwEPRead+0x72>
            dwData = USBRxData;
    a58c:	4b16      	ldr	r3, [pc, #88]	; (a5e8 <USBHwEPRead+0xc8>)
    a58e:	681b      	ldr	r3, [r3, #0]
    a590:	61bb      	str	r3, [r7, #24]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    a592:	68bb      	ldr	r3, [r7, #8]
    a594:	2b00      	cmp	r3, #0
    a596:	d009      	beq.n	a5ac <USBHwEPRead+0x8c>
    a598:	69fa      	ldr	r2, [r7, #28]
    a59a:	687b      	ldr	r3, [r7, #4]
    a59c:	429a      	cmp	r2, r3
    a59e:	d205      	bcs.n	a5ac <USBHwEPRead+0x8c>
            pbBuf[i] = dwData & 0xFF;
    a5a0:	68ba      	ldr	r2, [r7, #8]
    a5a2:	69fb      	ldr	r3, [r7, #28]
    a5a4:	4413      	add	r3, r2
    a5a6:	69ba      	ldr	r2, [r7, #24]
    a5a8:	b2d2      	uxtb	r2, r2
    a5aa:	701a      	strb	r2, [r3, #0]
        }
        dwData >>= 8;
    a5ac:	69bb      	ldr	r3, [r7, #24]
    a5ae:	0a1b      	lsrs	r3, r3, #8
    a5b0:	61bb      	str	r3, [r7, #24]
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    a5b2:	69fb      	ldr	r3, [r7, #28]
    a5b4:	3301      	adds	r3, #1
    a5b6:	61fb      	str	r3, [r7, #28]
    a5b8:	69fa      	ldr	r2, [r7, #28]
    a5ba:	693b      	ldr	r3, [r7, #16]
    a5bc:	429a      	cmp	r2, r3
    a5be:	d3e0      	bcc.n	a582 <USBHwEPRead+0x62>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    a5c0:	4b07      	ldr	r3, [pc, #28]	; (a5e0 <USBHwEPRead+0xc0>)
    a5c2:	2200      	movs	r2, #0
    a5c4:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    a5c6:	697b      	ldr	r3, [r7, #20]
    a5c8:	b2db      	uxtb	r3, r3
    a5ca:	4618      	mov	r0, r3
    a5cc:	f7ff fdfc 	bl	a1c8 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    a5d0:	20f2      	movs	r0, #242	; 0xf2
    a5d2:	f7ff fdf9 	bl	a1c8 <USBHwCmd>
    
    return dwLen;
    a5d6:	693b      	ldr	r3, [r7, #16]
}
    a5d8:	4618      	mov	r0, r3
    a5da:	3720      	adds	r7, #32
    a5dc:	46bd      	mov	sp, r7
    a5de:	bd80      	pop	{r7, pc}
    a5e0:	5000c228 	.word	0x5000c228
    a5e4:	5000c220 	.word	0x5000c220
    a5e8:	5000c218 	.word	0x5000c218

0000a5ec <USBHwConfigDevice>:
    'configured' bit is set in the device status register.
        
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    a5ec:	b580      	push	{r7, lr}
    a5ee:	b082      	sub	sp, #8
    a5f0:	af00      	add	r7, sp, #0
    a5f2:	6078      	str	r0, [r7, #4]
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    a5f4:	687b      	ldr	r3, [r7, #4]
    a5f6:	2b00      	cmp	r3, #0
    a5f8:	bf14      	ite	ne
    a5fa:	2301      	movne	r3, #1
    a5fc:	2300      	moveq	r3, #0
    a5fe:	b2db      	uxtb	r3, r3
    a600:	b29b      	uxth	r3, r3
    a602:	20d8      	movs	r0, #216	; 0xd8
    a604:	4619      	mov	r1, r3
    a606:	f7ff fdf7 	bl	a1f8 <USBHwCmdWrite>
}
    a60a:	3708      	adds	r7, #8
    a60c:	46bd      	mov	sp, r7
    a60e:	bd80      	pop	{r7, pc}

0000a610 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    a610:	b580      	push	{r7, lr}
    a612:	b086      	sub	sp, #24
    a614:	af00      	add	r7, sp, #0

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    a616:	4b5b      	ldr	r3, [pc, #364]	; (a784 <USBHwISR+0x174>)
    a618:	681b      	ldr	r3, [r3, #0]
    a61a:	613b      	str	r3, [r7, #16]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    a61c:	693b      	ldr	r3, [r7, #16]
    a61e:	f003 0301 	and.w	r3, r3, #1
    a622:	2b00      	cmp	r3, #0
    a624:	d010      	beq.n	a648 <USBHwISR+0x38>
        // clear int
        USBDevIntClr = FRAME;
    a626:	4b58      	ldr	r3, [pc, #352]	; (a788 <USBHwISR+0x178>)
    a628:	2201      	movs	r2, #1
    a62a:	601a      	str	r2, [r3, #0]
        // call handler
        if (_pfnFrameHandler != NULL) {
    a62c:	4b57      	ldr	r3, [pc, #348]	; (a78c <USBHwISR+0x17c>)
    a62e:	681b      	ldr	r3, [r3, #0]
    a630:	2b00      	cmp	r3, #0
    a632:	d009      	beq.n	a648 <USBHwISR+0x38>
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
    a634:	20f5      	movs	r0, #245	; 0xf5
    a636:	f7ff fdf9 	bl	a22c <USBHwCmdRead>
    a63a:	4603      	mov	r3, r0
    a63c:	81fb      	strh	r3, [r7, #14]
            _pfnFrameHandler(wFrame);
    a63e:	4b53      	ldr	r3, [pc, #332]	; (a78c <USBHwISR+0x17c>)
    a640:	681b      	ldr	r3, [r3, #0]
    a642:	89fa      	ldrh	r2, [r7, #14]
    a644:	4610      	mov	r0, r2
    a646:	4798      	blx	r3
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    a648:	693b      	ldr	r3, [r7, #16]
    a64a:	f003 0308 	and.w	r3, r3, #8
    a64e:	2b00      	cmp	r3, #0
    a650:	d02b      	beq.n	a6aa <USBHwISR+0x9a>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    a652:	4b4d      	ldr	r3, [pc, #308]	; (a788 <USBHwISR+0x178>)
    a654:	2208      	movs	r2, #8
    a656:	601a      	str	r2, [r3, #0]
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
    a658:	20fe      	movs	r0, #254	; 0xfe
    a65a:	f7ff fde7 	bl	a22c <USBHwCmdRead>
    a65e:	4603      	mov	r3, r0
    a660:	737b      	strb	r3, [r7, #13]
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    a662:	7b7b      	ldrb	r3, [r7, #13]
    a664:	f003 031a 	and.w	r3, r3, #26
    a668:	2b00      	cmp	r3, #0
    a66a:	d01e      	beq.n	a6aa <USBHwISR+0x9a>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
    a66c:	7b7b      	ldrb	r3, [r7, #13]
    a66e:	f003 0301 	and.w	r3, r3, #1
    a672:	2b00      	cmp	r3, #0
    a674:	bf14      	ite	ne
    a676:	2301      	movne	r3, #1
    a678:	2300      	moveq	r3, #0
    a67a:	b2db      	uxtb	r3, r3
    a67c:	b2da      	uxtb	r2, r3
    a67e:	7b7b      	ldrb	r3, [r7, #13]
    a680:	f003 0304 	and.w	r3, r3, #4
    a684:	b2db      	uxtb	r3, r3
    a686:	4313      	orrs	r3, r2
    a688:	b2da      	uxtb	r2, r3
    a68a:	7b7b      	ldrb	r3, [r7, #13]
    a68c:	f003 0310 	and.w	r3, r3, #16
    a690:	b2db      	uxtb	r3, r3
    a692:	4313      	orrs	r3, r2
    a694:	b2db      	uxtb	r3, r3
    a696:	733b      	strb	r3, [r7, #12]
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    a698:	4b3d      	ldr	r3, [pc, #244]	; (a790 <USBHwISR+0x180>)
    a69a:	681b      	ldr	r3, [r3, #0]
    a69c:	2b00      	cmp	r3, #0
    a69e:	d004      	beq.n	a6aa <USBHwISR+0x9a>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    a6a0:	4b3b      	ldr	r3, [pc, #236]	; (a790 <USBHwISR+0x180>)
    a6a2:	681b      	ldr	r3, [r3, #0]
    a6a4:	7b3a      	ldrb	r2, [r7, #12]
    a6a6:	4610      	mov	r0, r2
    a6a8:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    a6aa:	693b      	ldr	r3, [r7, #16]
    a6ac:	f003 0304 	and.w	r3, r3, #4
    a6b0:	2b00      	cmp	r3, #0
    a6b2:	d063      	beq.n	a77c <USBHwISR+0x16c>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    a6b4:	4b34      	ldr	r3, [pc, #208]	; (a788 <USBHwISR+0x178>)
    a6b6:	2204      	movs	r2, #4
    a6b8:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    a6ba:	2300      	movs	r3, #0
    a6bc:	617b      	str	r3, [r7, #20]
    a6be:	e05a      	b.n	a776 <USBHwISR+0x166>
            dwIntBit = (1 << i);
    a6c0:	2201      	movs	r2, #1
    a6c2:	697b      	ldr	r3, [r7, #20]
    a6c4:	fa02 f303 	lsl.w	r3, r2, r3
    a6c8:	60bb      	str	r3, [r7, #8]
            if (USBEpIntSt & dwIntBit) {
    a6ca:	4b32      	ldr	r3, [pc, #200]	; (a794 <USBHwISR+0x184>)
    a6cc:	681a      	ldr	r2, [r3, #0]
    a6ce:	68bb      	ldr	r3, [r7, #8]
    a6d0:	4013      	ands	r3, r2
    a6d2:	2b00      	cmp	r3, #0
    a6d4:	d04c      	beq.n	a770 <USBHwISR+0x160>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    a6d6:	4a30      	ldr	r2, [pc, #192]	; (a798 <USBHwISR+0x188>)
    a6d8:	68bb      	ldr	r3, [r7, #8]
    a6da:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    a6dc:	2020      	movs	r0, #32
    a6de:	f7ff fd5b 	bl	a198 <Wait4DevInt>
                bEPStat = USBCmdData;
    a6e2:	4b2e      	ldr	r3, [pc, #184]	; (a79c <USBHwISR+0x18c>)
    a6e4:	681b      	ldr	r3, [r3, #0]
    a6e6:	71fb      	strb	r3, [r7, #7]
                // convert EP pipe stat into something HW independent
                bStat = ((bEPStat & EPSTAT_FE) ? EP_STATUS_DATA : 0) |
    a6e8:	79fb      	ldrb	r3, [r7, #7]
    a6ea:	f003 0301 	and.w	r3, r3, #1
    a6ee:	2b00      	cmp	r3, #0
    a6f0:	bf14      	ite	ne
    a6f2:	2301      	movne	r3, #1
    a6f4:	2300      	moveq	r3, #0
    a6f6:	b2db      	uxtb	r3, r3
    a6f8:	b2da      	uxtb	r2, r3
    a6fa:	79fb      	ldrb	r3, [r7, #7]
    a6fc:	f003 0302 	and.w	r3, r3, #2
    a700:	b2db      	uxtb	r3, r3
    a702:	4313      	orrs	r3, r2
    a704:	b2da      	uxtb	r2, r3
    a706:	79fb      	ldrb	r3, [r7, #7]
    a708:	f003 0304 	and.w	r3, r3, #4
    a70c:	b2db      	uxtb	r3, r3
    a70e:	4313      	orrs	r3, r2
    a710:	b2da      	uxtb	r2, r3
    a712:	79fb      	ldrb	r3, [r7, #7]
    a714:	f003 0310 	and.w	r3, r3, #16
    a718:	b2db      	uxtb	r3, r3
    a71a:	4313      	orrs	r3, r2
    a71c:	b2da      	uxtb	r2, r3
    a71e:	79fb      	ldrb	r3, [r7, #7]
    a720:	f003 0308 	and.w	r3, r3, #8
    a724:	b2db      	uxtb	r3, r3
    a726:	4313      	orrs	r3, r2
    a728:	b2db      	uxtb	r3, r3
    a72a:	733b      	strb	r3, [r7, #12]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    a72c:	697b      	ldr	r3, [r7, #20]
    a72e:	0fda      	lsrs	r2, r3, #31
    a730:	4413      	add	r3, r2
    a732:	105b      	asrs	r3, r3, #1
    a734:	461a      	mov	r2, r3
    a736:	4b1a      	ldr	r3, [pc, #104]	; (a7a0 <USBHwISR+0x190>)
    a738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a73c:	2b00      	cmp	r3, #0
    a73e:	d017      	beq.n	a770 <USBHwISR+0x160>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    a740:	697b      	ldr	r3, [r7, #20]
    a742:	0fda      	lsrs	r2, r3, #31
    a744:	4413      	add	r3, r2
    a746:	105b      	asrs	r3, r3, #1
    a748:	461a      	mov	r2, r3
    a74a:	4b15      	ldr	r3, [pc, #84]	; (a7a0 <USBHwISR+0x190>)
    a74c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a750:	697a      	ldr	r2, [r7, #20]
    a752:	01d2      	lsls	r2, r2, #7
    a754:	b2d1      	uxtb	r1, r2
    a756:	697a      	ldr	r2, [r7, #20]
    a758:	1052      	asrs	r2, r2, #1
    a75a:	b2d2      	uxtb	r2, r2
    a75c:	f002 020f 	and.w	r2, r2, #15
    a760:	b2d2      	uxtb	r2, r2
    a762:	430a      	orrs	r2, r1
    a764:	b2d2      	uxtb	r2, r2
    a766:	b2d1      	uxtb	r1, r2
    a768:	7b3a      	ldrb	r2, [r7, #12]
    a76a:	4608      	mov	r0, r1
    a76c:	4611      	mov	r1, r2
    a76e:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    a770:	697b      	ldr	r3, [r7, #20]
    a772:	3301      	adds	r3, #1
    a774:	617b      	str	r3, [r7, #20]
    a776:	697b      	ldr	r3, [r7, #20]
    a778:	2b1f      	cmp	r3, #31
    a77a:	dda1      	ble.n	a6c0 <USBHwISR+0xb0>
            }
        }
    }
    
DEBUG_LED_OFF(9);       
}
    a77c:	3718      	adds	r7, #24
    a77e:	46bd      	mov	sp, r7
    a780:	bd80      	pop	{r7, pc}
    a782:	bf00      	nop
    a784:	5000c200 	.word	0x5000c200
    a788:	5000c208 	.word	0x5000c208
    a78c:	10000aec 	.word	0x10000aec
    a790:	10000aa8 	.word	0x10000aa8
    a794:	5000c230 	.word	0x5000c230
    a798:	5000c238 	.word	0x5000c238
    a79c:	5000c214 	.word	0x5000c214
    a7a0:	10000aac 	.word	0x10000aac

0000a7a4 <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    a7a4:	b580      	push	{r7, lr}
    a7a6:	af00      	add	r7, sp, #0
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    a7a8:	4a2d      	ldr	r2, [pc, #180]	; (a860 <USBHwInit+0xbc>)
    a7aa:	4b2d      	ldr	r3, [pc, #180]	; (a860 <USBHwInit+0xbc>)
    a7ac:	681b      	ldr	r3, [r3, #0]
    a7ae:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    a7b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    a7b6:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    a7b8:	4a2a      	ldr	r2, [pc, #168]	; (a864 <USBHwInit+0xc0>)
    a7ba:	4b2a      	ldr	r3, [pc, #168]	; (a864 <USBHwInit+0xc0>)
    a7bc:	681b      	ldr	r3, [r3, #0]
    a7be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    a7c2:	f043 0310 	orr.w	r3, r3, #16
    a7c6:	6013      	str	r3, [r2, #0]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    a7c8:	4a26      	ldr	r2, [pc, #152]	; (a864 <USBHwInit+0xc0>)
    a7ca:	4b26      	ldr	r3, [pc, #152]	; (a864 <USBHwInit+0xc0>)
    a7cc:	681b      	ldr	r3, [r3, #0]
    a7ce:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    a7d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    a7d6:	6013      	str	r3, [r2, #0]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    a7d8:	4a23      	ldr	r2, [pc, #140]	; (a868 <USBHwInit+0xc4>)
    a7da:	4b23      	ldr	r3, [pc, #140]	; (a868 <USBHwInit+0xc4>)
    a7dc:	681b      	ldr	r3, [r3, #0]
    a7de:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    a7e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    a7e6:	6013      	str	r3, [r2, #0]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    a7e8:	4a1f      	ldr	r2, [pc, #124]	; (a868 <USBHwInit+0xc4>)
    a7ea:	4b1f      	ldr	r3, [pc, #124]	; (a868 <USBHwInit+0xc4>)
    a7ec:	681b      	ldr	r3, [r3, #0]
    a7ee:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    a7f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    a7f6:	6013      	str	r3, [r2, #0]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    a7f8:	4a1c      	ldr	r2, [pc, #112]	; (a86c <USBHwInit+0xc8>)
    a7fa:	4b1c      	ldr	r3, [pc, #112]	; (a86c <USBHwInit+0xc8>)
    a7fc:	681b      	ldr	r3, [r3, #0]
    a7fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a802:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    a804:	4a1a      	ldr	r2, [pc, #104]	; (a870 <USBHwInit+0xcc>)
    a806:	4b1a      	ldr	r3, [pc, #104]	; (a870 <USBHwInit+0xcc>)
    a808:	681b      	ldr	r3, [r3, #0]
    a80a:	f043 0312 	orr.w	r3, r3, #18
    a80e:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    a810:	bf00      	nop
    a812:	4b18      	ldr	r3, [pc, #96]	; (a874 <USBHwInit+0xd0>)
    a814:	681b      	ldr	r3, [r3, #0]
    a816:	f003 0302 	and.w	r3, r3, #2
    a81a:	2b00      	cmp	r3, #0
    a81c:	d0f9      	beq.n	a812 <USBHwInit+0x6e>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    a81e:	bf00      	nop
    a820:	4b14      	ldr	r3, [pc, #80]	; (a874 <USBHwInit+0xd0>)
    a822:	681b      	ldr	r3, [r3, #0]
    a824:	f003 0310 	and.w	r3, r3, #16
    a828:	2b00      	cmp	r3, #0
    a82a:	d0f9      	beq.n	a820 <USBHwInit+0x7c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    a82c:	4b12      	ldr	r3, [pc, #72]	; (a878 <USBHwInit+0xd4>)
    a82e:	2200      	movs	r2, #0
    a830:	601a      	str	r2, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    a832:	4b12      	ldr	r3, [pc, #72]	; (a87c <USBHwInit+0xd8>)
    a834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a838:	601a      	str	r2, [r3, #0]
    USBDevIntPri = 0;
    a83a:	4b11      	ldr	r3, [pc, #68]	; (a880 <USBHwInit+0xdc>)
    a83c:	2200      	movs	r2, #0
    a83e:	601a      	str	r2, [r3, #0]

    USBEpIntEn = 0;
    a840:	4b10      	ldr	r3, [pc, #64]	; (a884 <USBHwInit+0xe0>)
    a842:	2200      	movs	r2, #0
    a844:	601a      	str	r2, [r3, #0]
    USBEpIntClr = 0xFFFFFFFF;
    a846:	4b10      	ldr	r3, [pc, #64]	; (a888 <USBHwInit+0xe4>)
    a848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a84c:	601a      	str	r2, [r3, #0]
    USBEpIntPri = 0;
    a84e:	4b0f      	ldr	r3, [pc, #60]	; (a88c <USBHwInit+0xe8>)
    a850:	2200      	movs	r2, #0
    a852:	601a      	str	r2, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    a854:	2000      	movs	r0, #0
    a856:	f7ff fdcb 	bl	a3f0 <USBHwNakIntEnable>
    // init debug leds
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
    a85a:	2301      	movs	r3, #1
}
    a85c:	4618      	mov	r0, r3
    a85e:	bd80      	pop	{r7, pc}
    a860:	4002c010 	.word	0x4002c010
    a864:	4002c00c 	.word	0x4002c00c
    a868:	4002c004 	.word	0x4002c004
    a86c:	400fc0c4 	.word	0x400fc0c4
    a870:	5000cff4 	.word	0x5000cff4
    a874:	5000cff8 	.word	0x5000cff8
    a878:	5000c204 	.word	0x5000c204
    a87c:	5000c208 	.word	0x5000c208
    a880:	5000c22c 	.word	0x5000c22c
    a884:	5000c234 	.word	0x5000c234
    a888:	5000c238 	.word	0x5000c238
    a88c:	5000c240 	.word	0x5000c240

0000a890 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    a890:	b480      	push	{r7}
    a892:	b089      	sub	sp, #36	; 0x24
    a894:	af00      	add	r7, sp, #0
    a896:	60f8      	str	r0, [r7, #12]
    a898:	60b9      	str	r1, [r7, #8]
    a89a:	607a      	str	r2, [r7, #4]
    a89c:	603b      	str	r3, [r7, #0]
	if(bMsVendorIndex == 0)	{
    a89e:	4b2d      	ldr	r3, [pc, #180]	; (a954 <USBFilterOsVendorMessage+0xc4>)
    a8a0:	781b      	ldrb	r3, [r3, #0]
    a8a2:	2b00      	cmp	r3, #0
    a8a4:	d101      	bne.n	a8aa <USBFilterOsVendorMessage+0x1a>
		// Feature is disabled.
		return FALSE;
    a8a6:	2300      	movs	r3, #0
    a8a8:	e04e      	b.n	a948 <USBFilterOsVendorMessage+0xb8>
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    a8aa:	68fb      	ldr	r3, [r7, #12]
    a8ac:	785a      	ldrb	r2, [r3, #1]
    a8ae:	4b29      	ldr	r3, [pc, #164]	; (a954 <USBFilterOsVendorMessage+0xc4>)
    a8b0:	781b      	ldrb	r3, [r3, #0]
    a8b2:	429a      	cmp	r2, r3
    a8b4:	d147      	bne.n	a946 <USBFilterOsVendorMessage+0xb6>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    a8b6:	68bb      	ldr	r3, [r7, #8]
    a8b8:	2200      	movs	r2, #0
    a8ba:	601a      	str	r2, [r3, #0]
	
		int iRequestLength = pSetup->wLength;
    a8bc:	68fb      	ldr	r3, [r7, #12]
    a8be:	88db      	ldrh	r3, [r3, #6]
    a8c0:	61fb      	str	r3, [r7, #28]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
    a8c2:	68fb      	ldr	r3, [r7, #12]
    a8c4:	885b      	ldrh	r3, [r3, #2]
    a8c6:	76fb      	strb	r3, [r7, #27]
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    a8c8:	68fb      	ldr	r3, [r7, #12]
    a8ca:	885b      	ldrh	r3, [r3, #2]
    a8cc:	0a1b      	lsrs	r3, r3, #8
    a8ce:	b29b      	uxth	r3, r3
    a8d0:	76bb      	strb	r3, [r7, #26]
	
		switch (pSetup->wIndex) {
    a8d2:	68fb      	ldr	r3, [r7, #12]
    a8d4:	889b      	ldrh	r3, [r3, #4]
    a8d6:	2b04      	cmp	r3, #4
    a8d8:	d002      	beq.n	a8e0 <USBFilterOsVendorMessage+0x50>
    a8da:	2b05      	cmp	r3, #5
    a8dc:	d007      	beq.n	a8ee <USBFilterOsVendorMessage+0x5e>
    a8de:	e00d      	b.n	a8fc <USBFilterOsVendorMessage+0x6c>
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    a8e0:	683b      	ldr	r3, [r7, #0]
    a8e2:	4a1d      	ldr	r2, [pc, #116]	; (a958 <USBFilterOsVendorMessage+0xc8>)
    a8e4:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    a8e6:	687b      	ldr	r3, [r7, #4]
    a8e8:	2228      	movs	r2, #40	; 0x28
    a8ea:	601a      	str	r2, [r3, #0]
			break;
    a8ec:	e008      	b.n	a900 <USBFilterOsVendorMessage+0x70>
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    a8ee:	683b      	ldr	r3, [r7, #0]
    a8f0:	4a1a      	ldr	r2, [pc, #104]	; (a95c <USBFilterOsVendorMessage+0xcc>)
    a8f2:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    a8f4:	687b      	ldr	r3, [r7, #4]
    a8f6:	2292      	movs	r2, #146	; 0x92
    a8f8:	601a      	str	r2, [r3, #0]
			break;
    a8fa:	e001      	b.n	a900 <USBFilterOsVendorMessage+0x70>

		default:
			return TRUE;
    a8fc:	2301      	movs	r3, #1
    a8fe:	e023      	b.n	a948 <USBFilterOsVendorMessage+0xb8>
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    a900:	7ebb      	ldrb	r3, [r7, #26]
    a902:	041b      	lsls	r3, r3, #16
    a904:	617b      	str	r3, [r7, #20]
		if (*piLen < iPageOffset) {
    a906:	687b      	ldr	r3, [r7, #4]
    a908:	681a      	ldr	r2, [r3, #0]
    a90a:	697b      	ldr	r3, [r7, #20]
    a90c:	429a      	cmp	r2, r3
    a90e:	da01      	bge.n	a914 <USBFilterOsVendorMessage+0x84>
			// Not enough data for the requested offset.
			return TRUE;
    a910:	2301      	movs	r3, #1
    a912:	e019      	b.n	a948 <USBFilterOsVendorMessage+0xb8>
		}
		*ppbData += iPageOffset;
    a914:	683b      	ldr	r3, [r7, #0]
    a916:	681a      	ldr	r2, [r3, #0]
    a918:	697b      	ldr	r3, [r7, #20]
    a91a:	441a      	add	r2, r3
    a91c:	683b      	ldr	r3, [r7, #0]
    a91e:	601a      	str	r2, [r3, #0]
		*piLen -= iPageOffset;
    a920:	687b      	ldr	r3, [r7, #4]
    a922:	681a      	ldr	r2, [r3, #0]
    a924:	697b      	ldr	r3, [r7, #20]
    a926:	1ad2      	subs	r2, r2, r3
    a928:	687b      	ldr	r3, [r7, #4]
    a92a:	601a      	str	r2, [r3, #0]
		
		if (*piLen > iRequestLength) {
    a92c:	687b      	ldr	r3, [r7, #4]
    a92e:	681a      	ldr	r2, [r3, #0]
    a930:	69fb      	ldr	r3, [r7, #28]
    a932:	429a      	cmp	r2, r3
    a934:	dd02      	ble.n	a93c <USBFilterOsVendorMessage+0xac>
			// Clip data longer than the requested length
			*piLen = iRequestLength;
    a936:	687b      	ldr	r3, [r7, #4]
    a938:	69fa      	ldr	r2, [r7, #28]
    a93a:	601a      	str	r2, [r3, #0]
		}
	
		*pfSuccess = TRUE;
    a93c:	68bb      	ldr	r3, [r7, #8]
    a93e:	2201      	movs	r2, #1
    a940:	601a      	str	r2, [r3, #0]
		return TRUE;
    a942:	2301      	movs	r3, #1
    a944:	e000      	b.n	a948 <USBFilterOsVendorMessage+0xb8>
	}
	
	// These are not the requests you are looking for
	return FALSE;
    a946:	2300      	movs	r3, #0
}
    a948:	4618      	mov	r0, r3
    a94a:	3724      	adds	r7, #36	; 0x24
    a94c:	46bd      	mov	sp, r7
    a94e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a952:	4770      	bx	lr
    a954:	10000afc 	.word	0x10000afc
    a958:	0000c228 	.word	0x0000c228
    a95c:	100008cc 	.word	0x100008cc

0000a960 <USBRegisterWinusbInterface>:
	@param [in]		pcInterfaceGuid			ASCII String GUID in curly braces
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
    a960:	b480      	push	{r7}
    a962:	b087      	sub	sp, #28
    a964:	af00      	add	r7, sp, #0
    a966:	4603      	mov	r3, r0
    a968:	6039      	str	r1, [r7, #0]
    a96a:	71fb      	strb	r3, [r7, #7]
	bMsVendorIndex = bVendorRequestIndex;
    a96c:	4a18      	ldr	r2, [pc, #96]	; (a9d0 <USBRegisterWinusbInterface+0x70>)
    a96e:	79fb      	ldrb	r3, [r7, #7]
    a970:	7013      	strb	r3, [r2, #0]
	
	if(!pcInterfaceGuid) {
    a972:	683b      	ldr	r3, [r7, #0]
    a974:	2b00      	cmp	r3, #0
    a976:	d100      	bne.n	a97a <USBRegisterWinusbInterface+0x1a>
		return; // Trust that caller is actually specifying this with nonzero RequestIndex.
    a978:	e024      	b.n	a9c4 <USBRegisterWinusbInterface+0x64>
	}
	
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
    a97a:	4b16      	ldr	r3, [pc, #88]	; (a9d4 <USBRegisterWinusbInterface+0x74>)
    a97c:	617b      	str	r3, [r7, #20]
	const int ciMaxLength = 38;
    a97e:	2326      	movs	r3, #38	; 0x26
    a980:	60fb      	str	r3, [r7, #12]
	
	for(int i = 0; i < ciMaxLength; i++) {
    a982:	2300      	movs	r3, #0
    a984:	613b      	str	r3, [r7, #16]
    a986:	e012      	b.n	a9ae <USBRegisterWinusbInterface+0x4e>
		if(!pcInterfaceGuid[i]) break;
    a988:	693b      	ldr	r3, [r7, #16]
    a98a:	683a      	ldr	r2, [r7, #0]
    a98c:	4413      	add	r3, r2
    a98e:	781b      	ldrb	r3, [r3, #0]
    a990:	2b00      	cmp	r3, #0
    a992:	d100      	bne.n	a996 <USBRegisterWinusbInterface+0x36>
    a994:	e00f      	b.n	a9b6 <USBRegisterWinusbInterface+0x56>
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    a996:	693b      	ldr	r3, [r7, #16]
    a998:	683a      	ldr	r2, [r7, #0]
    a99a:	4413      	add	r3, r2
    a99c:	781a      	ldrb	r2, [r3, #0]
    a99e:	697b      	ldr	r3, [r7, #20]
    a9a0:	701a      	strb	r2, [r3, #0]
		pbWriteCursor += 2;
    a9a2:	697b      	ldr	r3, [r7, #20]
    a9a4:	3302      	adds	r3, #2
    a9a6:	617b      	str	r3, [r7, #20]
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    a9a8:	693b      	ldr	r3, [r7, #16]
    a9aa:	3301      	adds	r3, #1
    a9ac:	613b      	str	r3, [r7, #16]
    a9ae:	693a      	ldr	r2, [r7, #16]
    a9b0:	68fb      	ldr	r3, [r7, #12]
    a9b2:	429a      	cmp	r2, r3
    a9b4:	dbe8      	blt.n	a988 <USBRegisterWinusbInterface+0x28>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    a9b6:	697b      	ldr	r3, [r7, #20]
    a9b8:	2200      	movs	r2, #0
    a9ba:	701a      	strb	r2, [r3, #0]
	pbWriteCursor[2] = 0;
    a9bc:	697b      	ldr	r3, [r7, #20]
    a9be:	3302      	adds	r3, #2
    a9c0:	2200      	movs	r2, #0
    a9c2:	701a      	strb	r2, [r3, #0]
	
}
    a9c4:	371c      	adds	r7, #28
    a9c6:	46bd      	mov	sp, r7
    a9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9cc:	4770      	bx	lr
    a9ce:	bf00      	nop
    a9d0:	10000afc 	.word	0x10000afc
    a9d4:	1000090e 	.word	0x1000090e

0000a9d8 <USBGetOsStringDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
    a9d8:	b480      	push	{r7}
    a9da:	b083      	sub	sp, #12
    a9dc:	af00      	add	r7, sp, #0
    a9de:	6078      	str	r0, [r7, #4]
    a9e0:	6039      	str	r1, [r7, #0]
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    a9e2:	4b08      	ldr	r3, [pc, #32]	; (aa04 <USBGetOsStringDescriptor+0x2c>)
    a9e4:	781a      	ldrb	r2, [r3, #0]
    a9e6:	4b08      	ldr	r3, [pc, #32]	; (aa08 <USBGetOsStringDescriptor+0x30>)
    a9e8:	741a      	strb	r2, [r3, #16]
	
	*ppbData = abOsStringDescriptor;
    a9ea:	683b      	ldr	r3, [r7, #0]
    a9ec:	4a06      	ldr	r2, [pc, #24]	; (aa08 <USBGetOsStringDescriptor+0x30>)
    a9ee:	601a      	str	r2, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    a9f0:	687b      	ldr	r3, [r7, #4]
    a9f2:	2212      	movs	r2, #18
    a9f4:	601a      	str	r2, [r3, #0]
	return TRUE;
    a9f6:	2301      	movs	r3, #1
}
    a9f8:	4618      	mov	r0, r3
    a9fa:	370c      	adds	r7, #12
    a9fc:	46bd      	mov	sp, r7
    a9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa02:	4770      	bx	lr
    aa04:	10000afc 	.word	0x10000afc
    aa08:	100008b8 	.word	0x100008b8

0000aa0c <USBRegisterDescriptors>:
	for the device.

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(const U8 *pabDescriptors)
{
    aa0c:	b480      	push	{r7}
    aa0e:	b083      	sub	sp, #12
    aa10:	af00      	add	r7, sp, #0
    aa12:	6078      	str	r0, [r7, #4]
	pabDescrip = pabDescriptors;
    aa14:	4a03      	ldr	r2, [pc, #12]	; (aa24 <USBRegisterDescriptors+0x18>)
    aa16:	687b      	ldr	r3, [r7, #4]
    aa18:	6013      	str	r3, [r2, #0]
}
    aa1a:	370c      	adds	r7, #12
    aa1c:	46bd      	mov	sp, r7
    aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa22:	4770      	bx	lr
    aa24:	10000af8 	.word	0x10000af8

0000aa28 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    aa28:	b580      	push	{r7, lr}
    aa2a:	b088      	sub	sp, #32
    aa2c:	af00      	add	r7, sp, #0
    aa2e:	60ba      	str	r2, [r7, #8]
    aa30:	607b      	str	r3, [r7, #4]
    aa32:	4603      	mov	r3, r0
    aa34:	81fb      	strh	r3, [r7, #14]
    aa36:	460b      	mov	r3, r1
    aa38:	81bb      	strh	r3, [r7, #12]
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    aa3a:	89fb      	ldrh	r3, [r7, #14]
    aa3c:	0a1b      	lsrs	r3, r3, #8
    aa3e:	b29b      	uxth	r3, r3
    aa40:	75fb      	strb	r3, [r7, #23]
	bIndex = GET_DESC_INDEX(wTypeIndex);
    aa42:	89fb      	ldrh	r3, [r7, #14]
    aa44:	75bb      	strb	r3, [r7, #22]
	
    if (bType == DESC_STRING &&
    aa46:	7dfb      	ldrb	r3, [r7, #23]
    aa48:	2b03      	cmp	r3, #3
    aa4a:	d10b      	bne.n	aa64 <USBGetDescriptor+0x3c>
    aa4c:	7dbb      	ldrb	r3, [r7, #22]
    aa4e:	2bee      	cmp	r3, #238	; 0xee
    aa50:	d108      	bne.n	aa64 <USBGetDescriptor+0x3c>
        bIndex == DESC_STRING_OS) {
        
        if (USBGetOsStringDescriptor(piLen, ppbData)) {
    aa52:	68b8      	ldr	r0, [r7, #8]
    aa54:	6879      	ldr	r1, [r7, #4]
    aa56:	f7ff ffbf 	bl	a9d8 <USBGetOsStringDescriptor>
    aa5a:	4603      	mov	r3, r0
    aa5c:	2b00      	cmp	r3, #0
    aa5e:	d001      	beq.n	aa64 <USBGetDescriptor+0x3c>
            
            return TRUE;
    aa60:	2301      	movs	r3, #1
    aa62:	e036      	b.n	aad2 <USBGetDescriptor+0xaa>
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    aa64:	4b1d      	ldr	r3, [pc, #116]	; (aadc <USBGetDescriptor+0xb4>)
    aa66:	681b      	ldr	r3, [r3, #0]
    aa68:	61fb      	str	r3, [r7, #28]
	iCurIndex = 0;
    aa6a:	2300      	movs	r3, #0
    aa6c:	61bb      	str	r3, [r7, #24]
	
	while (pab[DESC_bLength] != 0) {
    aa6e:	e02b      	b.n	aac8 <USBGetDescriptor+0xa0>
		if (pab[DESC_bDescriptorType] == bType) {
    aa70:	69fb      	ldr	r3, [r7, #28]
    aa72:	3301      	adds	r3, #1
    aa74:	781b      	ldrb	r3, [r3, #0]
    aa76:	7dfa      	ldrb	r2, [r7, #23]
    aa78:	429a      	cmp	r2, r3
    aa7a:	d11f      	bne.n	aabc <USBGetDescriptor+0x94>
			if (iCurIndex == bIndex) {
    aa7c:	7dba      	ldrb	r2, [r7, #22]
    aa7e:	69bb      	ldr	r3, [r7, #24]
    aa80:	429a      	cmp	r2, r3
    aa82:	d118      	bne.n	aab6 <USBGetDescriptor+0x8e>
				// set data pointer
				*ppbData = pab;
    aa84:	687b      	ldr	r3, [r7, #4]
    aa86:	69fa      	ldr	r2, [r7, #28]
    aa88:	601a      	str	r2, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    aa8a:	7dfb      	ldrb	r3, [r7, #23]
    aa8c:	2b02      	cmp	r3, #2
    aa8e:	d10b      	bne.n	aaa8 <USBGetDescriptor+0x80>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    aa90:	69fb      	ldr	r3, [r7, #28]
    aa92:	3302      	adds	r3, #2
    aa94:	781b      	ldrb	r3, [r3, #0]
    aa96:	461a      	mov	r2, r3
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    aa98:	69fb      	ldr	r3, [r7, #28]
    aa9a:	3303      	adds	r3, #3
    aa9c:	781b      	ldrb	r3, [r3, #0]
    aa9e:	021b      	lsls	r3, r3, #8
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    aaa0:	431a      	orrs	r2, r3
    aaa2:	68bb      	ldr	r3, [r7, #8]
    aaa4:	601a      	str	r2, [r3, #0]
    aaa6:	e004      	b.n	aab2 <USBGetDescriptor+0x8a>
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    aaa8:	69fb      	ldr	r3, [r7, #28]
    aaaa:	781b      	ldrb	r3, [r3, #0]
    aaac:	461a      	mov	r2, r3
    aaae:	68bb      	ldr	r3, [r7, #8]
    aab0:	601a      	str	r2, [r3, #0]
				}
				return TRUE;
    aab2:	2301      	movs	r3, #1
    aab4:	e00d      	b.n	aad2 <USBGetDescriptor+0xaa>
			}
			iCurIndex++;
    aab6:	69bb      	ldr	r3, [r7, #24]
    aab8:	3301      	adds	r3, #1
    aaba:	61bb      	str	r3, [r7, #24]
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    aabc:	69fb      	ldr	r3, [r7, #28]
    aabe:	781b      	ldrb	r3, [r3, #0]
    aac0:	461a      	mov	r2, r3
    aac2:	69fb      	ldr	r3, [r7, #28]
    aac4:	4413      	add	r3, r2
    aac6:	61fb      	str	r3, [r7, #28]
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    aac8:	69fb      	ldr	r3, [r7, #28]
    aaca:	781b      	ldrb	r3, [r3, #0]
    aacc:	2b00      	cmp	r3, #0
    aace:	d1cf      	bne.n	aa70 <USBGetDescriptor+0x48>
		// skip to next descriptor
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
    aad0:	2300      	movs	r3, #0
}
    aad2:	4618      	mov	r0, r3
    aad4:	3720      	adds	r7, #32
    aad6:	46bd      	mov	sp, r7
    aad8:	bd80      	pop	{r7, pc}
    aada:	bf00      	nop
    aadc:	10000af8 	.word	0x10000af8

0000aae0 <USBSetConfiguration>:
	@todo function always returns TRUE, add stricter checking?
	
	@return TRUE if successfully configured, FALSE otherwise
 */
static BOOL USBSetConfiguration(U8 bConfigIndex, U8 bAltSetting)
{
    aae0:	b580      	push	{r7, lr}
    aae2:	b086      	sub	sp, #24
    aae4:	af00      	add	r7, sp, #0
    aae6:	4603      	mov	r3, r0
    aae8:	460a      	mov	r2, r1
    aaea:	71fb      	strb	r3, [r7, #7]
    aaec:	4613      	mov	r3, r2
    aaee:	71bb      	strb	r3, [r7, #6]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    aaf0:	79fb      	ldrb	r3, [r7, #7]
    aaf2:	2b00      	cmp	r3, #0
    aaf4:	d103      	bne.n	aafe <USBSetConfiguration+0x1e>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    aaf6:	2000      	movs	r0, #0
    aaf8:	f7ff fd78 	bl	a5ec <USBHwConfigDevice>
    aafc:	e045      	b.n	ab8a <USBSetConfiguration+0xaa>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    aafe:	4b25      	ldr	r3, [pc, #148]	; (ab94 <USBSetConfiguration+0xb4>)
    ab00:	681b      	ldr	r3, [r3, #0]
    ab02:	617b      	str	r3, [r7, #20]
		bCurConfig = 0xFF;
    ab04:	23ff      	movs	r3, #255	; 0xff
    ab06:	74fb      	strb	r3, [r7, #19]
		bCurAltSetting = 0xFF;
    ab08:	23ff      	movs	r3, #255	; 0xff
    ab0a:	74bb      	strb	r3, [r7, #18]

		while (pab[DESC_bLength] != 0) {
    ab0c:	e036      	b.n	ab7c <USBSetConfiguration+0x9c>

			switch (pab[DESC_bDescriptorType]) {
    ab0e:	697b      	ldr	r3, [r7, #20]
    ab10:	3301      	adds	r3, #1
    ab12:	781b      	ldrb	r3, [r3, #0]
    ab14:	2b04      	cmp	r3, #4
    ab16:	d008      	beq.n	ab2a <USBSetConfiguration+0x4a>
    ab18:	2b05      	cmp	r3, #5
    ab1a:	d00a      	beq.n	ab32 <USBSetConfiguration+0x52>
    ab1c:	2b02      	cmp	r3, #2
    ab1e:	d000      	beq.n	ab22 <USBSetConfiguration+0x42>
					USBHwEPConfig(bEP, wMaxPktSize);
				}
				break;

			default:
				break;
    ab20:	e026      	b.n	ab70 <USBSetConfiguration+0x90>

			switch (pab[DESC_bDescriptorType]) {

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    ab22:	697b      	ldr	r3, [r7, #20]
    ab24:	795b      	ldrb	r3, [r3, #5]
    ab26:	74fb      	strb	r3, [r7, #19]
				break;
    ab28:	e022      	b.n	ab70 <USBSetConfiguration+0x90>

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    ab2a:	697b      	ldr	r3, [r7, #20]
    ab2c:	78db      	ldrb	r3, [r3, #3]
    ab2e:	74bb      	strb	r3, [r7, #18]
				break;
    ab30:	e01e      	b.n	ab70 <USBSetConfiguration+0x90>

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    ab32:	7cfa      	ldrb	r2, [r7, #19]
    ab34:	79fb      	ldrb	r3, [r7, #7]
    ab36:	429a      	cmp	r2, r3
    ab38:	d119      	bne.n	ab6e <USBSetConfiguration+0x8e>
    ab3a:	7cba      	ldrb	r2, [r7, #18]
    ab3c:	79bb      	ldrb	r3, [r7, #6]
    ab3e:	429a      	cmp	r2, r3
    ab40:	d115      	bne.n	ab6e <USBSetConfiguration+0x8e>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
    ab42:	697b      	ldr	r3, [r7, #20]
    ab44:	789b      	ldrb	r3, [r3, #2]
    ab46:	747b      	strb	r3, [r7, #17]
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    ab48:	697b      	ldr	r3, [r7, #20]
    ab4a:	3304      	adds	r3, #4
    ab4c:	781b      	ldrb	r3, [r3, #0]
    ab4e:	b29a      	uxth	r2, r3
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    ab50:	697b      	ldr	r3, [r7, #20]
    ab52:	3305      	adds	r3, #5
    ab54:	781b      	ldrb	r3, [r3, #0]
    ab56:	021b      	lsls	r3, r3, #8
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    ab58:	b29b      	uxth	r3, r3
    ab5a:	4313      	orrs	r3, r2
    ab5c:	b29b      	uxth	r3, r3
    ab5e:	81fb      	strh	r3, [r7, #14]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    ab60:	7c7a      	ldrb	r2, [r7, #17]
    ab62:	89fb      	ldrh	r3, [r7, #14]
    ab64:	4610      	mov	r0, r2
    ab66:	4619      	mov	r1, r3
    ab68:	f7ff fbb8 	bl	a2dc <USBHwEPConfig>
				}
				break;
    ab6c:	e7ff      	b.n	ab6e <USBSetConfiguration+0x8e>
    ab6e:	bf00      	nop

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    ab70:	697b      	ldr	r3, [r7, #20]
    ab72:	781b      	ldrb	r3, [r3, #0]
    ab74:	461a      	mov	r2, r3
    ab76:	697b      	ldr	r3, [r7, #20]
    ab78:	4413      	add	r3, r2
    ab7a:	617b      	str	r3, [r7, #20]
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    ab7c:	697b      	ldr	r3, [r7, #20]
    ab7e:	781b      	ldrb	r3, [r3, #0]
    ab80:	2b00      	cmp	r3, #0
    ab82:	d1c4      	bne.n	ab0e <USBSetConfiguration+0x2e>
			// skip to next descriptor
			pab += pab[DESC_bLength];
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    ab84:	2001      	movs	r0, #1
    ab86:	f7ff fd31 	bl	a5ec <USBHwConfigDevice>
	}

	return TRUE;
    ab8a:	2301      	movs	r3, #1
}
    ab8c:	4618      	mov	r0, r3
    ab8e:	3718      	adds	r7, #24
    ab90:	46bd      	mov	sp, r7
    ab92:	bd80      	pop	{r7, pc}
    ab94:	10000af8 	.word	0x10000af8

0000ab98 <HandleStdDeviceReq>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    ab98:	b580      	push	{r7, lr}
    ab9a:	b086      	sub	sp, #24
    ab9c:	af00      	add	r7, sp, #0
    ab9e:	60f8      	str	r0, [r7, #12]
    aba0:	60b9      	str	r1, [r7, #8]
    aba2:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    aba4:	687b      	ldr	r3, [r7, #4]
    aba6:	681b      	ldr	r3, [r3, #0]
    aba8:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    abaa:	68fb      	ldr	r3, [r7, #12]
    abac:	785b      	ldrb	r3, [r3, #1]
    abae:	2b09      	cmp	r3, #9
    abb0:	d852      	bhi.n	ac58 <HandleStdDeviceReq+0xc0>
    abb2:	a201      	add	r2, pc, #4	; (adr r2, abb8 <HandleStdDeviceReq+0x20>)
    abb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    abb8:	0000abe1 	.word	0x0000abe1
    abbc:	0000ac51 	.word	0x0000ac51
    abc0:	0000ac59 	.word	0x0000ac59
    abc4:	0000ac51 	.word	0x0000ac51
    abc8:	0000ac59 	.word	0x0000ac59
    abcc:	0000abf7 	.word	0x0000abf7
    abd0:	0000ac05 	.word	0x0000ac05
    abd4:	0000ac55 	.word	0x0000ac55
    abd8:	0000ac1d 	.word	0x0000ac1d
    abdc:	0000ac2d 	.word	0x0000ac2d
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    abe0:	697b      	ldr	r3, [r7, #20]
    abe2:	2200      	movs	r2, #0
    abe4:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    abe6:	697b      	ldr	r3, [r7, #20]
    abe8:	3301      	adds	r3, #1
    abea:	2200      	movs	r2, #0
    abec:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    abee:	68bb      	ldr	r3, [r7, #8]
    abf0:	2202      	movs	r2, #2
    abf2:	601a      	str	r2, [r3, #0]
		break;
    abf4:	e032      	b.n	ac5c <HandleStdDeviceReq+0xc4>
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    abf6:	68fb      	ldr	r3, [r7, #12]
    abf8:	885b      	ldrh	r3, [r3, #2]
    abfa:	b2db      	uxtb	r3, r3
    abfc:	4618      	mov	r0, r3
    abfe:	f7ff fbd3 	bl	a3a8 <USBHwSetAddress>
		break;
    ac02:	e02b      	b.n	ac5c <HandleStdDeviceReq+0xc4>

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    ac04:	68fb      	ldr	r3, [r7, #12]
    ac06:	885a      	ldrh	r2, [r3, #2]
    ac08:	68fb      	ldr	r3, [r7, #12]
    ac0a:	889b      	ldrh	r3, [r3, #4]
    ac0c:	4610      	mov	r0, r2
    ac0e:	4619      	mov	r1, r3
    ac10:	68ba      	ldr	r2, [r7, #8]
    ac12:	687b      	ldr	r3, [r7, #4]
    ac14:	f7ff ff08 	bl	aa28 <USBGetDescriptor>
    ac18:	4603      	mov	r3, r0
    ac1a:	e020      	b.n	ac5e <HandleStdDeviceReq+0xc6>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    ac1c:	4b12      	ldr	r3, [pc, #72]	; (ac68 <HandleStdDeviceReq+0xd0>)
    ac1e:	781a      	ldrb	r2, [r3, #0]
    ac20:	697b      	ldr	r3, [r7, #20]
    ac22:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    ac24:	68bb      	ldr	r3, [r7, #8]
    ac26:	2201      	movs	r2, #1
    ac28:	601a      	str	r2, [r3, #0]
		break;
    ac2a:	e017      	b.n	ac5c <HandleStdDeviceReq+0xc4>

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    ac2c:	68fb      	ldr	r3, [r7, #12]
    ac2e:	885b      	ldrh	r3, [r3, #2]
    ac30:	b2db      	uxtb	r3, r3
    ac32:	4618      	mov	r0, r3
    ac34:	2100      	movs	r1, #0
    ac36:	f7ff ff53 	bl	aae0 <USBSetConfiguration>
    ac3a:	4603      	mov	r3, r0
    ac3c:	2b00      	cmp	r3, #0
    ac3e:	d101      	bne.n	ac44 <HandleStdDeviceReq+0xac>
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
    ac40:	2300      	movs	r3, #0
    ac42:	e00c      	b.n	ac5e <HandleStdDeviceReq+0xc6>
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    ac44:	68fb      	ldr	r3, [r7, #12]
    ac46:	885b      	ldrh	r3, [r3, #2]
    ac48:	b2da      	uxtb	r2, r3
    ac4a:	4b07      	ldr	r3, [pc, #28]	; (ac68 <HandleStdDeviceReq+0xd0>)
    ac4c:	701a      	strb	r2, [r3, #0]
		break;
    ac4e:	e005      	b.n	ac5c <HandleStdDeviceReq+0xc4>
			// put DEVICE_REMOTE_WAKEUP code here
		}
		if (pSetup->wValue == FEA_TEST_MODE) {
			// put TEST_MODE code here
		}
		return FALSE;
    ac50:	2300      	movs	r3, #0
    ac52:	e004      	b.n	ac5e <HandleStdDeviceReq+0xc6>

	case REQ_SET_DESCRIPTOR:
		DBG("Device req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    ac54:	2300      	movs	r3, #0
    ac56:	e002      	b.n	ac5e <HandleStdDeviceReq+0xc6>

	default:
		DBG("Illegal device req %d\n", pSetup->bRequest);
		return FALSE;
    ac58:	2300      	movs	r3, #0
    ac5a:	e000      	b.n	ac5e <HandleStdDeviceReq+0xc6>
	}
	
	return TRUE;
    ac5c:	2301      	movs	r3, #1
}
    ac5e:	4618      	mov	r0, r3
    ac60:	3718      	adds	r7, #24
    ac62:	46bd      	mov	sp, r7
    ac64:	bd80      	pop	{r7, pc}
    ac66:	bf00      	nop
    ac68:	10000af0 	.word	0x10000af0

0000ac6c <HandleStdInterfaceReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    ac6c:	b480      	push	{r7}
    ac6e:	b087      	sub	sp, #28
    ac70:	af00      	add	r7, sp, #0
    ac72:	60f8      	str	r0, [r7, #12]
    ac74:	60b9      	str	r1, [r7, #8]
    ac76:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    ac78:	687b      	ldr	r3, [r7, #4]
    ac7a:	681b      	ldr	r3, [r3, #0]
    ac7c:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    ac7e:	68fb      	ldr	r3, [r7, #12]
    ac80:	785b      	ldrb	r3, [r3, #1]
    ac82:	2b0b      	cmp	r3, #11
    ac84:	d838      	bhi.n	acf8 <HandleStdInterfaceReq+0x8c>
    ac86:	a201      	add	r2, pc, #4	; (adr r2, ac8c <HandleStdInterfaceReq+0x20>)
    ac88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ac8c:	0000acbd 	.word	0x0000acbd
    ac90:	0000acd3 	.word	0x0000acd3
    ac94:	0000acf9 	.word	0x0000acf9
    ac98:	0000acd3 	.word	0x0000acd3
    ac9c:	0000acf9 	.word	0x0000acf9
    aca0:	0000acf9 	.word	0x0000acf9
    aca4:	0000acf9 	.word	0x0000acf9
    aca8:	0000acf9 	.word	0x0000acf9
    acac:	0000acf9 	.word	0x0000acf9
    acb0:	0000acf9 	.word	0x0000acf9
    acb4:	0000acd7 	.word	0x0000acd7
    acb8:	0000ace5 	.word	0x0000ace5

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    acbc:	697b      	ldr	r3, [r7, #20]
    acbe:	2200      	movs	r2, #0
    acc0:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    acc2:	697b      	ldr	r3, [r7, #20]
    acc4:	3301      	adds	r3, #1
    acc6:	2200      	movs	r2, #0
    acc8:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    acca:	68bb      	ldr	r3, [r7, #8]
    accc:	2202      	movs	r2, #2
    acce:	601a      	str	r2, [r3, #0]
		break;
    acd0:	e014      	b.n	acfc <HandleStdInterfaceReq+0x90>

	case REQ_CLEAR_FEATURE:
	case REQ_SET_FEATURE:
		// not defined for interface
		return FALSE;
    acd2:	2300      	movs	r3, #0
    acd4:	e013      	b.n	acfe <HandleStdInterfaceReq+0x92>
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    acd6:	697b      	ldr	r3, [r7, #20]
    acd8:	2200      	movs	r2, #0
    acda:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    acdc:	68bb      	ldr	r3, [r7, #8]
    acde:	2201      	movs	r2, #1
    ace0:	601a      	str	r2, [r3, #0]
		break;
    ace2:	e00b      	b.n	acfc <HandleStdInterfaceReq+0x90>
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    ace4:	68fb      	ldr	r3, [r7, #12]
    ace6:	885b      	ldrh	r3, [r3, #2]
    ace8:	2b00      	cmp	r3, #0
    acea:	d001      	beq.n	acf0 <HandleStdInterfaceReq+0x84>
			return FALSE;
    acec:	2300      	movs	r3, #0
    acee:	e006      	b.n	acfe <HandleStdInterfaceReq+0x92>
		}
		*piLen = 0;
    acf0:	68bb      	ldr	r3, [r7, #8]
    acf2:	2200      	movs	r2, #0
    acf4:	601a      	str	r2, [r3, #0]
		break;
    acf6:	e001      	b.n	acfc <HandleStdInterfaceReq+0x90>

	default:
		DBG("Illegal interface req %d\n", pSetup->bRequest);
		return FALSE;
    acf8:	2300      	movs	r3, #0
    acfa:	e000      	b.n	acfe <HandleStdInterfaceReq+0x92>
	}

	return TRUE;
    acfc:	2301      	movs	r3, #1
}
    acfe:	4618      	mov	r0, r3
    ad00:	371c      	adds	r7, #28
    ad02:	46bd      	mov	sp, r7
    ad04:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad08:	4770      	bx	lr
    ad0a:	bf00      	nop

0000ad0c <HandleStdEndPointReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    ad0c:	b580      	push	{r7, lr}
    ad0e:	b086      	sub	sp, #24
    ad10:	af00      	add	r7, sp, #0
    ad12:	60f8      	str	r0, [r7, #12]
    ad14:	60b9      	str	r1, [r7, #8]
    ad16:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    ad18:	687b      	ldr	r3, [r7, #4]
    ad1a:	681b      	ldr	r3, [r3, #0]
    ad1c:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    ad1e:	68fb      	ldr	r3, [r7, #12]
    ad20:	785b      	ldrb	r3, [r3, #1]
    ad22:	2b0c      	cmp	r3, #12
    ad24:	d853      	bhi.n	adce <HandleStdEndPointReq+0xc2>
    ad26:	a201      	add	r2, pc, #4	; (adr r2, ad2c <HandleStdEndPointReq+0x20>)
    ad28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ad2c:	0000ad61 	.word	0x0000ad61
    ad30:	0000ad93 	.word	0x0000ad93
    ad34:	0000adcf 	.word	0x0000adcf
    ad38:	0000adaf 	.word	0x0000adaf
    ad3c:	0000adcf 	.word	0x0000adcf
    ad40:	0000adcf 	.word	0x0000adcf
    ad44:	0000adcf 	.word	0x0000adcf
    ad48:	0000adcf 	.word	0x0000adcf
    ad4c:	0000adcf 	.word	0x0000adcf
    ad50:	0000adcf 	.word	0x0000adcf
    ad54:	0000adcf 	.word	0x0000adcf
    ad58:	0000adcf 	.word	0x0000adcf
    ad5c:	0000adcb 	.word	0x0000adcb
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    ad60:	68fb      	ldr	r3, [r7, #12]
    ad62:	889b      	ldrh	r3, [r3, #4]
    ad64:	b2db      	uxtb	r3, r3
    ad66:	4618      	mov	r0, r3
    ad68:	f7ff fb50 	bl	a40c <USBHwEPGetStatus>
    ad6c:	4603      	mov	r3, r0
    ad6e:	f003 0302 	and.w	r3, r3, #2
    ad72:	2b00      	cmp	r3, #0
    ad74:	bf14      	ite	ne
    ad76:	2301      	movne	r3, #1
    ad78:	2300      	moveq	r3, #0
    ad7a:	b2db      	uxtb	r3, r3
    ad7c:	461a      	mov	r2, r3
    ad7e:	697b      	ldr	r3, [r7, #20]
    ad80:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    ad82:	697b      	ldr	r3, [r7, #20]
    ad84:	3301      	adds	r3, #1
    ad86:	2200      	movs	r2, #0
    ad88:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    ad8a:	68bb      	ldr	r3, [r7, #8]
    ad8c:	2202      	movs	r2, #2
    ad8e:	601a      	str	r2, [r3, #0]
		break;
    ad90:	e01f      	b.n	add2 <HandleStdEndPointReq+0xc6>
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    ad92:	68fb      	ldr	r3, [r7, #12]
    ad94:	885b      	ldrh	r3, [r3, #2]
    ad96:	2b00      	cmp	r3, #0
    ad98:	d107      	bne.n	adaa <HandleStdEndPointReq+0x9e>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    ad9a:	68fb      	ldr	r3, [r7, #12]
    ad9c:	889b      	ldrh	r3, [r3, #4]
    ad9e:	b2db      	uxtb	r3, r3
    ada0:	4618      	mov	r0, r3
    ada2:	2100      	movs	r1, #0
    ada4:	f7ff fb4a 	bl	a43c <USBHwEPStall>
			break;
    ada8:	e013      	b.n	add2 <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    adaa:	2300      	movs	r3, #0
    adac:	e012      	b.n	add4 <HandleStdEndPointReq+0xc8>
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    adae:	68fb      	ldr	r3, [r7, #12]
    adb0:	885b      	ldrh	r3, [r3, #2]
    adb2:	2b00      	cmp	r3, #0
    adb4:	d107      	bne.n	adc6 <HandleStdEndPointReq+0xba>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    adb6:	68fb      	ldr	r3, [r7, #12]
    adb8:	889b      	ldrh	r3, [r3, #4]
    adba:	b2db      	uxtb	r3, r3
    adbc:	4618      	mov	r0, r3
    adbe:	2101      	movs	r1, #1
    adc0:	f7ff fb3c 	bl	a43c <USBHwEPStall>
			break;
    adc4:	e005      	b.n	add2 <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    adc6:	2300      	movs	r3, #0
    adc8:	e004      	b.n	add4 <HandleStdEndPointReq+0xc8>

	case REQ_SYNCH_FRAME:
		DBG("EP req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    adca:	2300      	movs	r3, #0
    adcc:	e002      	b.n	add4 <HandleStdEndPointReq+0xc8>

	default:
		DBG("Illegal EP req %d\n", pSetup->bRequest);
		return FALSE;
    adce:	2300      	movs	r3, #0
    add0:	e000      	b.n	add4 <HandleStdEndPointReq+0xc8>
	}
	
	return TRUE;
    add2:	2301      	movs	r3, #1
}
    add4:	4618      	mov	r0, r3
    add6:	3718      	adds	r7, #24
    add8:	46bd      	mov	sp, r7
    adda:	bd80      	pop	{r7, pc}

0000addc <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    addc:	b580      	push	{r7, lr}
    adde:	b084      	sub	sp, #16
    ade0:	af00      	add	r7, sp, #0
    ade2:	60f8      	str	r0, [r7, #12]
    ade4:	60b9      	str	r1, [r7, #8]
    ade6:	607a      	str	r2, [r7, #4]
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    ade8:	4b19      	ldr	r3, [pc, #100]	; (ae50 <USBHandleStandardRequest+0x74>)
    adea:	681b      	ldr	r3, [r3, #0]
    adec:	2b00      	cmp	r3, #0
    adee:	d00a      	beq.n	ae06 <USBHandleStandardRequest+0x2a>
    adf0:	4b17      	ldr	r3, [pc, #92]	; (ae50 <USBHandleStandardRequest+0x74>)
    adf2:	681b      	ldr	r3, [r3, #0]
    adf4:	68f8      	ldr	r0, [r7, #12]
    adf6:	68b9      	ldr	r1, [r7, #8]
    adf8:	687a      	ldr	r2, [r7, #4]
    adfa:	4798      	blx	r3
    adfc:	4603      	mov	r3, r0
    adfe:	2b00      	cmp	r3, #0
    ae00:	d001      	beq.n	ae06 <USBHandleStandardRequest+0x2a>
		return TRUE;
    ae02:	2301      	movs	r3, #1
    ae04:	e01f      	b.n	ae46 <USBHandleStandardRequest+0x6a>
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    ae06:	68fb      	ldr	r3, [r7, #12]
    ae08:	781b      	ldrb	r3, [r3, #0]
    ae0a:	f003 031f 	and.w	r3, r3, #31
    ae0e:	2b01      	cmp	r3, #1
    ae10:	d00a      	beq.n	ae28 <USBHandleStandardRequest+0x4c>
    ae12:	2b02      	cmp	r3, #2
    ae14:	d00f      	beq.n	ae36 <USBHandleStandardRequest+0x5a>
    ae16:	2b00      	cmp	r3, #0
    ae18:	d114      	bne.n	ae44 <USBHandleStandardRequest+0x68>
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
    ae1a:	68f8      	ldr	r0, [r7, #12]
    ae1c:	68b9      	ldr	r1, [r7, #8]
    ae1e:	687a      	ldr	r2, [r7, #4]
    ae20:	f7ff feba 	bl	ab98 <HandleStdDeviceReq>
    ae24:	4603      	mov	r3, r0
    ae26:	e00e      	b.n	ae46 <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
    ae28:	68f8      	ldr	r0, [r7, #12]
    ae2a:	68b9      	ldr	r1, [r7, #8]
    ae2c:	687a      	ldr	r2, [r7, #4]
    ae2e:	f7ff ff1d 	bl	ac6c <HandleStdInterfaceReq>
    ae32:	4603      	mov	r3, r0
    ae34:	e007      	b.n	ae46 <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
    ae36:	68f8      	ldr	r0, [r7, #12]
    ae38:	68b9      	ldr	r1, [r7, #8]
    ae3a:	687a      	ldr	r2, [r7, #4]
    ae3c:	f7ff ff66 	bl	ad0c <HandleStdEndPointReq>
    ae40:	4603      	mov	r3, r0
    ae42:	e000      	b.n	ae46 <USBHandleStandardRequest+0x6a>
	default: 						return FALSE;
    ae44:	2300      	movs	r3, #0
	}
}
    ae46:	4618      	mov	r0, r3
    ae48:	3710      	adds	r7, #16
    ae4a:	46bd      	mov	sp, r7
    ae4c:	bd80      	pop	{r7, pc}
    ae4e:	bf00      	nop
    ae50:	10000af4 	.word	0x10000af4

0000ae54 <__aeabi_drsub>:
    ae54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    ae58:	e002      	b.n	ae60 <__adddf3>
    ae5a:	bf00      	nop

0000ae5c <__aeabi_dsub>:
    ae5c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000ae60 <__adddf3>:
    ae60:	b530      	push	{r4, r5, lr}
    ae62:	ea4f 0441 	mov.w	r4, r1, lsl #1
    ae66:	ea4f 0543 	mov.w	r5, r3, lsl #1
    ae6a:	ea94 0f05 	teq	r4, r5
    ae6e:	bf08      	it	eq
    ae70:	ea90 0f02 	teqeq	r0, r2
    ae74:	bf1f      	itttt	ne
    ae76:	ea54 0c00 	orrsne.w	ip, r4, r0
    ae7a:	ea55 0c02 	orrsne.w	ip, r5, r2
    ae7e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    ae82:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    ae86:	f000 80e2 	beq.w	b04e <__adddf3+0x1ee>
    ae8a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    ae8e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    ae92:	bfb8      	it	lt
    ae94:	426d      	neglt	r5, r5
    ae96:	dd0c      	ble.n	aeb2 <__adddf3+0x52>
    ae98:	442c      	add	r4, r5
    ae9a:	ea80 0202 	eor.w	r2, r0, r2
    ae9e:	ea81 0303 	eor.w	r3, r1, r3
    aea2:	ea82 0000 	eor.w	r0, r2, r0
    aea6:	ea83 0101 	eor.w	r1, r3, r1
    aeaa:	ea80 0202 	eor.w	r2, r0, r2
    aeae:	ea81 0303 	eor.w	r3, r1, r3
    aeb2:	2d36      	cmp	r5, #54	; 0x36
    aeb4:	bf88      	it	hi
    aeb6:	bd30      	pophi	{r4, r5, pc}
    aeb8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    aebc:	ea4f 3101 	mov.w	r1, r1, lsl #12
    aec0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    aec4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    aec8:	d002      	beq.n	aed0 <__adddf3+0x70>
    aeca:	4240      	negs	r0, r0
    aecc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    aed0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    aed4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    aed8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    aedc:	d002      	beq.n	aee4 <__adddf3+0x84>
    aede:	4252      	negs	r2, r2
    aee0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    aee4:	ea94 0f05 	teq	r4, r5
    aee8:	f000 80a7 	beq.w	b03a <__adddf3+0x1da>
    aeec:	f1a4 0401 	sub.w	r4, r4, #1
    aef0:	f1d5 0e20 	rsbs	lr, r5, #32
    aef4:	db0d      	blt.n	af12 <__adddf3+0xb2>
    aef6:	fa02 fc0e 	lsl.w	ip, r2, lr
    aefa:	fa22 f205 	lsr.w	r2, r2, r5
    aefe:	1880      	adds	r0, r0, r2
    af00:	f141 0100 	adc.w	r1, r1, #0
    af04:	fa03 f20e 	lsl.w	r2, r3, lr
    af08:	1880      	adds	r0, r0, r2
    af0a:	fa43 f305 	asr.w	r3, r3, r5
    af0e:	4159      	adcs	r1, r3
    af10:	e00e      	b.n	af30 <__adddf3+0xd0>
    af12:	f1a5 0520 	sub.w	r5, r5, #32
    af16:	f10e 0e20 	add.w	lr, lr, #32
    af1a:	2a01      	cmp	r2, #1
    af1c:	fa03 fc0e 	lsl.w	ip, r3, lr
    af20:	bf28      	it	cs
    af22:	f04c 0c02 	orrcs.w	ip, ip, #2
    af26:	fa43 f305 	asr.w	r3, r3, r5
    af2a:	18c0      	adds	r0, r0, r3
    af2c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    af30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    af34:	d507      	bpl.n	af46 <__adddf3+0xe6>
    af36:	f04f 0e00 	mov.w	lr, #0
    af3a:	f1dc 0c00 	rsbs	ip, ip, #0
    af3e:	eb7e 0000 	sbcs.w	r0, lr, r0
    af42:	eb6e 0101 	sbc.w	r1, lr, r1
    af46:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    af4a:	d31b      	bcc.n	af84 <__adddf3+0x124>
    af4c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    af50:	d30c      	bcc.n	af6c <__adddf3+0x10c>
    af52:	0849      	lsrs	r1, r1, #1
    af54:	ea5f 0030 	movs.w	r0, r0, rrx
    af58:	ea4f 0c3c 	mov.w	ip, ip, rrx
    af5c:	f104 0401 	add.w	r4, r4, #1
    af60:	ea4f 5244 	mov.w	r2, r4, lsl #21
    af64:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    af68:	f080 809a 	bcs.w	b0a0 <__adddf3+0x240>
    af6c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    af70:	bf08      	it	eq
    af72:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    af76:	f150 0000 	adcs.w	r0, r0, #0
    af7a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    af7e:	ea41 0105 	orr.w	r1, r1, r5
    af82:	bd30      	pop	{r4, r5, pc}
    af84:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    af88:	4140      	adcs	r0, r0
    af8a:	eb41 0101 	adc.w	r1, r1, r1
    af8e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    af92:	f1a4 0401 	sub.w	r4, r4, #1
    af96:	d1e9      	bne.n	af6c <__adddf3+0x10c>
    af98:	f091 0f00 	teq	r1, #0
    af9c:	bf04      	itt	eq
    af9e:	4601      	moveq	r1, r0
    afa0:	2000      	moveq	r0, #0
    afa2:	fab1 f381 	clz	r3, r1
    afa6:	bf08      	it	eq
    afa8:	3320      	addeq	r3, #32
    afaa:	f1a3 030b 	sub.w	r3, r3, #11
    afae:	f1b3 0220 	subs.w	r2, r3, #32
    afb2:	da0c      	bge.n	afce <__adddf3+0x16e>
    afb4:	320c      	adds	r2, #12
    afb6:	dd08      	ble.n	afca <__adddf3+0x16a>
    afb8:	f102 0c14 	add.w	ip, r2, #20
    afbc:	f1c2 020c 	rsb	r2, r2, #12
    afc0:	fa01 f00c 	lsl.w	r0, r1, ip
    afc4:	fa21 f102 	lsr.w	r1, r1, r2
    afc8:	e00c      	b.n	afe4 <__adddf3+0x184>
    afca:	f102 0214 	add.w	r2, r2, #20
    afce:	bfd8      	it	le
    afd0:	f1c2 0c20 	rsble	ip, r2, #32
    afd4:	fa01 f102 	lsl.w	r1, r1, r2
    afd8:	fa20 fc0c 	lsr.w	ip, r0, ip
    afdc:	bfdc      	itt	le
    afde:	ea41 010c 	orrle.w	r1, r1, ip
    afe2:	4090      	lslle	r0, r2
    afe4:	1ae4      	subs	r4, r4, r3
    afe6:	bfa2      	ittt	ge
    afe8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    afec:	4329      	orrge	r1, r5
    afee:	bd30      	popge	{r4, r5, pc}
    aff0:	ea6f 0404 	mvn.w	r4, r4
    aff4:	3c1f      	subs	r4, #31
    aff6:	da1c      	bge.n	b032 <__adddf3+0x1d2>
    aff8:	340c      	adds	r4, #12
    affa:	dc0e      	bgt.n	b01a <__adddf3+0x1ba>
    affc:	f104 0414 	add.w	r4, r4, #20
    b000:	f1c4 0220 	rsb	r2, r4, #32
    b004:	fa20 f004 	lsr.w	r0, r0, r4
    b008:	fa01 f302 	lsl.w	r3, r1, r2
    b00c:	ea40 0003 	orr.w	r0, r0, r3
    b010:	fa21 f304 	lsr.w	r3, r1, r4
    b014:	ea45 0103 	orr.w	r1, r5, r3
    b018:	bd30      	pop	{r4, r5, pc}
    b01a:	f1c4 040c 	rsb	r4, r4, #12
    b01e:	f1c4 0220 	rsb	r2, r4, #32
    b022:	fa20 f002 	lsr.w	r0, r0, r2
    b026:	fa01 f304 	lsl.w	r3, r1, r4
    b02a:	ea40 0003 	orr.w	r0, r0, r3
    b02e:	4629      	mov	r1, r5
    b030:	bd30      	pop	{r4, r5, pc}
    b032:	fa21 f004 	lsr.w	r0, r1, r4
    b036:	4629      	mov	r1, r5
    b038:	bd30      	pop	{r4, r5, pc}
    b03a:	f094 0f00 	teq	r4, #0
    b03e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    b042:	bf06      	itte	eq
    b044:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    b048:	3401      	addeq	r4, #1
    b04a:	3d01      	subne	r5, #1
    b04c:	e74e      	b.n	aeec <__adddf3+0x8c>
    b04e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b052:	bf18      	it	ne
    b054:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b058:	d029      	beq.n	b0ae <__adddf3+0x24e>
    b05a:	ea94 0f05 	teq	r4, r5
    b05e:	bf08      	it	eq
    b060:	ea90 0f02 	teqeq	r0, r2
    b064:	d005      	beq.n	b072 <__adddf3+0x212>
    b066:	ea54 0c00 	orrs.w	ip, r4, r0
    b06a:	bf04      	itt	eq
    b06c:	4619      	moveq	r1, r3
    b06e:	4610      	moveq	r0, r2
    b070:	bd30      	pop	{r4, r5, pc}
    b072:	ea91 0f03 	teq	r1, r3
    b076:	bf1e      	ittt	ne
    b078:	2100      	movne	r1, #0
    b07a:	2000      	movne	r0, #0
    b07c:	bd30      	popne	{r4, r5, pc}
    b07e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    b082:	d105      	bne.n	b090 <__adddf3+0x230>
    b084:	0040      	lsls	r0, r0, #1
    b086:	4149      	adcs	r1, r1
    b088:	bf28      	it	cs
    b08a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b08e:	bd30      	pop	{r4, r5, pc}
    b090:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    b094:	bf3c      	itt	cc
    b096:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    b09a:	bd30      	popcc	{r4, r5, pc}
    b09c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b0a0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    b0a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b0a8:	f04f 0000 	mov.w	r0, #0
    b0ac:	bd30      	pop	{r4, r5, pc}
    b0ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b0b2:	bf1a      	itte	ne
    b0b4:	4619      	movne	r1, r3
    b0b6:	4610      	movne	r0, r2
    b0b8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    b0bc:	bf1c      	itt	ne
    b0be:	460b      	movne	r3, r1
    b0c0:	4602      	movne	r2, r0
    b0c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b0c6:	bf06      	itte	eq
    b0c8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    b0cc:	ea91 0f03 	teqeq	r1, r3
    b0d0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    b0d4:	bd30      	pop	{r4, r5, pc}
    b0d6:	bf00      	nop

0000b0d8 <__aeabi_ui2d>:
    b0d8:	f090 0f00 	teq	r0, #0
    b0dc:	bf04      	itt	eq
    b0de:	2100      	moveq	r1, #0
    b0e0:	4770      	bxeq	lr
    b0e2:	b530      	push	{r4, r5, lr}
    b0e4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b0e8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b0ec:	f04f 0500 	mov.w	r5, #0
    b0f0:	f04f 0100 	mov.w	r1, #0
    b0f4:	e750      	b.n	af98 <__adddf3+0x138>
    b0f6:	bf00      	nop

0000b0f8 <__aeabi_i2d>:
    b0f8:	f090 0f00 	teq	r0, #0
    b0fc:	bf04      	itt	eq
    b0fe:	2100      	moveq	r1, #0
    b100:	4770      	bxeq	lr
    b102:	b530      	push	{r4, r5, lr}
    b104:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b108:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b10c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    b110:	bf48      	it	mi
    b112:	4240      	negmi	r0, r0
    b114:	f04f 0100 	mov.w	r1, #0
    b118:	e73e      	b.n	af98 <__adddf3+0x138>
    b11a:	bf00      	nop

0000b11c <__aeabi_f2d>:
    b11c:	0042      	lsls	r2, r0, #1
    b11e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    b122:	ea4f 0131 	mov.w	r1, r1, rrx
    b126:	ea4f 7002 	mov.w	r0, r2, lsl #28
    b12a:	bf1f      	itttt	ne
    b12c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    b130:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b134:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    b138:	4770      	bxne	lr
    b13a:	f092 0f00 	teq	r2, #0
    b13e:	bf14      	ite	ne
    b140:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b144:	4770      	bxeq	lr
    b146:	b530      	push	{r4, r5, lr}
    b148:	f44f 7460 	mov.w	r4, #896	; 0x380
    b14c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b150:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b154:	e720      	b.n	af98 <__adddf3+0x138>
    b156:	bf00      	nop

0000b158 <__aeabi_ul2d>:
    b158:	ea50 0201 	orrs.w	r2, r0, r1
    b15c:	bf08      	it	eq
    b15e:	4770      	bxeq	lr
    b160:	b530      	push	{r4, r5, lr}
    b162:	f04f 0500 	mov.w	r5, #0
    b166:	e00a      	b.n	b17e <__aeabi_l2d+0x16>

0000b168 <__aeabi_l2d>:
    b168:	ea50 0201 	orrs.w	r2, r0, r1
    b16c:	bf08      	it	eq
    b16e:	4770      	bxeq	lr
    b170:	b530      	push	{r4, r5, lr}
    b172:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    b176:	d502      	bpl.n	b17e <__aeabi_l2d+0x16>
    b178:	4240      	negs	r0, r0
    b17a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b17e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b182:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b186:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    b18a:	f43f aedc 	beq.w	af46 <__adddf3+0xe6>
    b18e:	f04f 0203 	mov.w	r2, #3
    b192:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b196:	bf18      	it	ne
    b198:	3203      	addne	r2, #3
    b19a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b19e:	bf18      	it	ne
    b1a0:	3203      	addne	r2, #3
    b1a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    b1a6:	f1c2 0320 	rsb	r3, r2, #32
    b1aa:	fa00 fc03 	lsl.w	ip, r0, r3
    b1ae:	fa20 f002 	lsr.w	r0, r0, r2
    b1b2:	fa01 fe03 	lsl.w	lr, r1, r3
    b1b6:	ea40 000e 	orr.w	r0, r0, lr
    b1ba:	fa21 f102 	lsr.w	r1, r1, r2
    b1be:	4414      	add	r4, r2
    b1c0:	e6c1      	b.n	af46 <__adddf3+0xe6>
    b1c2:	bf00      	nop

0000b1c4 <__aeabi_dmul>:
    b1c4:	b570      	push	{r4, r5, r6, lr}
    b1c6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b1ca:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b1ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b1d2:	bf1d      	ittte	ne
    b1d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b1d8:	ea94 0f0c 	teqne	r4, ip
    b1dc:	ea95 0f0c 	teqne	r5, ip
    b1e0:	f000 f8de 	bleq	b3a0 <__aeabi_dmul+0x1dc>
    b1e4:	442c      	add	r4, r5
    b1e6:	ea81 0603 	eor.w	r6, r1, r3
    b1ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    b1ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    b1f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    b1f6:	bf18      	it	ne
    b1f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    b1fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b204:	d038      	beq.n	b278 <__aeabi_dmul+0xb4>
    b206:	fba0 ce02 	umull	ip, lr, r0, r2
    b20a:	f04f 0500 	mov.w	r5, #0
    b20e:	fbe1 e502 	umlal	lr, r5, r1, r2
    b212:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    b216:	fbe0 e503 	umlal	lr, r5, r0, r3
    b21a:	f04f 0600 	mov.w	r6, #0
    b21e:	fbe1 5603 	umlal	r5, r6, r1, r3
    b222:	f09c 0f00 	teq	ip, #0
    b226:	bf18      	it	ne
    b228:	f04e 0e01 	orrne.w	lr, lr, #1
    b22c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    b230:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    b234:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    b238:	d204      	bcs.n	b244 <__aeabi_dmul+0x80>
    b23a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    b23e:	416d      	adcs	r5, r5
    b240:	eb46 0606 	adc.w	r6, r6, r6
    b244:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    b248:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    b24c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    b250:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    b254:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    b258:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b25c:	bf88      	it	hi
    b25e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b262:	d81e      	bhi.n	b2a2 <__aeabi_dmul+0xde>
    b264:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    b268:	bf08      	it	eq
    b26a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    b26e:	f150 0000 	adcs.w	r0, r0, #0
    b272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b276:	bd70      	pop	{r4, r5, r6, pc}
    b278:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    b27c:	ea46 0101 	orr.w	r1, r6, r1
    b280:	ea40 0002 	orr.w	r0, r0, r2
    b284:	ea81 0103 	eor.w	r1, r1, r3
    b288:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    b28c:	bfc2      	ittt	gt
    b28e:	ebd4 050c 	rsbsgt	r5, r4, ip
    b292:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b296:	bd70      	popgt	{r4, r5, r6, pc}
    b298:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b29c:	f04f 0e00 	mov.w	lr, #0
    b2a0:	3c01      	subs	r4, #1
    b2a2:	f300 80ab 	bgt.w	b3fc <__aeabi_dmul+0x238>
    b2a6:	f114 0f36 	cmn.w	r4, #54	; 0x36
    b2aa:	bfde      	ittt	le
    b2ac:	2000      	movle	r0, #0
    b2ae:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    b2b2:	bd70      	pople	{r4, r5, r6, pc}
    b2b4:	f1c4 0400 	rsb	r4, r4, #0
    b2b8:	3c20      	subs	r4, #32
    b2ba:	da35      	bge.n	b328 <__aeabi_dmul+0x164>
    b2bc:	340c      	adds	r4, #12
    b2be:	dc1b      	bgt.n	b2f8 <__aeabi_dmul+0x134>
    b2c0:	f104 0414 	add.w	r4, r4, #20
    b2c4:	f1c4 0520 	rsb	r5, r4, #32
    b2c8:	fa00 f305 	lsl.w	r3, r0, r5
    b2cc:	fa20 f004 	lsr.w	r0, r0, r4
    b2d0:	fa01 f205 	lsl.w	r2, r1, r5
    b2d4:	ea40 0002 	orr.w	r0, r0, r2
    b2d8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    b2dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b2e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b2e4:	fa21 f604 	lsr.w	r6, r1, r4
    b2e8:	eb42 0106 	adc.w	r1, r2, r6
    b2ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b2f0:	bf08      	it	eq
    b2f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b2f6:	bd70      	pop	{r4, r5, r6, pc}
    b2f8:	f1c4 040c 	rsb	r4, r4, #12
    b2fc:	f1c4 0520 	rsb	r5, r4, #32
    b300:	fa00 f304 	lsl.w	r3, r0, r4
    b304:	fa20 f005 	lsr.w	r0, r0, r5
    b308:	fa01 f204 	lsl.w	r2, r1, r4
    b30c:	ea40 0002 	orr.w	r0, r0, r2
    b310:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b314:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b318:	f141 0100 	adc.w	r1, r1, #0
    b31c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b320:	bf08      	it	eq
    b322:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b326:	bd70      	pop	{r4, r5, r6, pc}
    b328:	f1c4 0520 	rsb	r5, r4, #32
    b32c:	fa00 f205 	lsl.w	r2, r0, r5
    b330:	ea4e 0e02 	orr.w	lr, lr, r2
    b334:	fa20 f304 	lsr.w	r3, r0, r4
    b338:	fa01 f205 	lsl.w	r2, r1, r5
    b33c:	ea43 0302 	orr.w	r3, r3, r2
    b340:	fa21 f004 	lsr.w	r0, r1, r4
    b344:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b348:	fa21 f204 	lsr.w	r2, r1, r4
    b34c:	ea20 0002 	bic.w	r0, r0, r2
    b350:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    b354:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b358:	bf08      	it	eq
    b35a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b35e:	bd70      	pop	{r4, r5, r6, pc}
    b360:	f094 0f00 	teq	r4, #0
    b364:	d10f      	bne.n	b386 <__aeabi_dmul+0x1c2>
    b366:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    b36a:	0040      	lsls	r0, r0, #1
    b36c:	eb41 0101 	adc.w	r1, r1, r1
    b370:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b374:	bf08      	it	eq
    b376:	3c01      	subeq	r4, #1
    b378:	d0f7      	beq.n	b36a <__aeabi_dmul+0x1a6>
    b37a:	ea41 0106 	orr.w	r1, r1, r6
    b37e:	f095 0f00 	teq	r5, #0
    b382:	bf18      	it	ne
    b384:	4770      	bxne	lr
    b386:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    b38a:	0052      	lsls	r2, r2, #1
    b38c:	eb43 0303 	adc.w	r3, r3, r3
    b390:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    b394:	bf08      	it	eq
    b396:	3d01      	subeq	r5, #1
    b398:	d0f7      	beq.n	b38a <__aeabi_dmul+0x1c6>
    b39a:	ea43 0306 	orr.w	r3, r3, r6
    b39e:	4770      	bx	lr
    b3a0:	ea94 0f0c 	teq	r4, ip
    b3a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b3a8:	bf18      	it	ne
    b3aa:	ea95 0f0c 	teqne	r5, ip
    b3ae:	d00c      	beq.n	b3ca <__aeabi_dmul+0x206>
    b3b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b3b4:	bf18      	it	ne
    b3b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b3ba:	d1d1      	bne.n	b360 <__aeabi_dmul+0x19c>
    b3bc:	ea81 0103 	eor.w	r1, r1, r3
    b3c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b3c4:	f04f 0000 	mov.w	r0, #0
    b3c8:	bd70      	pop	{r4, r5, r6, pc}
    b3ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b3ce:	bf06      	itte	eq
    b3d0:	4610      	moveq	r0, r2
    b3d2:	4619      	moveq	r1, r3
    b3d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b3d8:	d019      	beq.n	b40e <__aeabi_dmul+0x24a>
    b3da:	ea94 0f0c 	teq	r4, ip
    b3de:	d102      	bne.n	b3e6 <__aeabi_dmul+0x222>
    b3e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    b3e4:	d113      	bne.n	b40e <__aeabi_dmul+0x24a>
    b3e6:	ea95 0f0c 	teq	r5, ip
    b3ea:	d105      	bne.n	b3f8 <__aeabi_dmul+0x234>
    b3ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    b3f0:	bf1c      	itt	ne
    b3f2:	4610      	movne	r0, r2
    b3f4:	4619      	movne	r1, r3
    b3f6:	d10a      	bne.n	b40e <__aeabi_dmul+0x24a>
    b3f8:	ea81 0103 	eor.w	r1, r1, r3
    b3fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b400:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b404:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b408:	f04f 0000 	mov.w	r0, #0
    b40c:	bd70      	pop	{r4, r5, r6, pc}
    b40e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b412:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    b416:	bd70      	pop	{r4, r5, r6, pc}

0000b418 <__aeabi_ddiv>:
    b418:	b570      	push	{r4, r5, r6, lr}
    b41a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b41e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b422:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b426:	bf1d      	ittte	ne
    b428:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b42c:	ea94 0f0c 	teqne	r4, ip
    b430:	ea95 0f0c 	teqne	r5, ip
    b434:	f000 f8a7 	bleq	b586 <__aeabi_ddiv+0x16e>
    b438:	eba4 0405 	sub.w	r4, r4, r5
    b43c:	ea81 0e03 	eor.w	lr, r1, r3
    b440:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b444:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b448:	f000 8088 	beq.w	b55c <__aeabi_ddiv+0x144>
    b44c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b450:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    b454:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    b458:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b45c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    b460:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    b464:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    b468:	ea4f 2600 	mov.w	r6, r0, lsl #8
    b46c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    b470:	429d      	cmp	r5, r3
    b472:	bf08      	it	eq
    b474:	4296      	cmpeq	r6, r2
    b476:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    b47a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    b47e:	d202      	bcs.n	b486 <__aeabi_ddiv+0x6e>
    b480:	085b      	lsrs	r3, r3, #1
    b482:	ea4f 0232 	mov.w	r2, r2, rrx
    b486:	1ab6      	subs	r6, r6, r2
    b488:	eb65 0503 	sbc.w	r5, r5, r3
    b48c:	085b      	lsrs	r3, r3, #1
    b48e:	ea4f 0232 	mov.w	r2, r2, rrx
    b492:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b496:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    b49a:	ebb6 0e02 	subs.w	lr, r6, r2
    b49e:	eb75 0e03 	sbcs.w	lr, r5, r3
    b4a2:	bf22      	ittt	cs
    b4a4:	1ab6      	subcs	r6, r6, r2
    b4a6:	4675      	movcs	r5, lr
    b4a8:	ea40 000c 	orrcs.w	r0, r0, ip
    b4ac:	085b      	lsrs	r3, r3, #1
    b4ae:	ea4f 0232 	mov.w	r2, r2, rrx
    b4b2:	ebb6 0e02 	subs.w	lr, r6, r2
    b4b6:	eb75 0e03 	sbcs.w	lr, r5, r3
    b4ba:	bf22      	ittt	cs
    b4bc:	1ab6      	subcs	r6, r6, r2
    b4be:	4675      	movcs	r5, lr
    b4c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    b4c4:	085b      	lsrs	r3, r3, #1
    b4c6:	ea4f 0232 	mov.w	r2, r2, rrx
    b4ca:	ebb6 0e02 	subs.w	lr, r6, r2
    b4ce:	eb75 0e03 	sbcs.w	lr, r5, r3
    b4d2:	bf22      	ittt	cs
    b4d4:	1ab6      	subcs	r6, r6, r2
    b4d6:	4675      	movcs	r5, lr
    b4d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    b4dc:	085b      	lsrs	r3, r3, #1
    b4de:	ea4f 0232 	mov.w	r2, r2, rrx
    b4e2:	ebb6 0e02 	subs.w	lr, r6, r2
    b4e6:	eb75 0e03 	sbcs.w	lr, r5, r3
    b4ea:	bf22      	ittt	cs
    b4ec:	1ab6      	subcs	r6, r6, r2
    b4ee:	4675      	movcs	r5, lr
    b4f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    b4f4:	ea55 0e06 	orrs.w	lr, r5, r6
    b4f8:	d018      	beq.n	b52c <__aeabi_ddiv+0x114>
    b4fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
    b4fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    b502:	ea4f 1606 	mov.w	r6, r6, lsl #4
    b506:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    b50a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    b50e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    b512:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    b516:	d1c0      	bne.n	b49a <__aeabi_ddiv+0x82>
    b518:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b51c:	d10b      	bne.n	b536 <__aeabi_ddiv+0x11e>
    b51e:	ea41 0100 	orr.w	r1, r1, r0
    b522:	f04f 0000 	mov.w	r0, #0
    b526:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    b52a:	e7b6      	b.n	b49a <__aeabi_ddiv+0x82>
    b52c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b530:	bf04      	itt	eq
    b532:	4301      	orreq	r1, r0
    b534:	2000      	moveq	r0, #0
    b536:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b53a:	bf88      	it	hi
    b53c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b540:	f63f aeaf 	bhi.w	b2a2 <__aeabi_dmul+0xde>
    b544:	ebb5 0c03 	subs.w	ip, r5, r3
    b548:	bf04      	itt	eq
    b54a:	ebb6 0c02 	subseq.w	ip, r6, r2
    b54e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b552:	f150 0000 	adcs.w	r0, r0, #0
    b556:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b55a:	bd70      	pop	{r4, r5, r6, pc}
    b55c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    b560:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    b564:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    b568:	bfc2      	ittt	gt
    b56a:	ebd4 050c 	rsbsgt	r5, r4, ip
    b56e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b572:	bd70      	popgt	{r4, r5, r6, pc}
    b574:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b578:	f04f 0e00 	mov.w	lr, #0
    b57c:	3c01      	subs	r4, #1
    b57e:	e690      	b.n	b2a2 <__aeabi_dmul+0xde>
    b580:	ea45 0e06 	orr.w	lr, r5, r6
    b584:	e68d      	b.n	b2a2 <__aeabi_dmul+0xde>
    b586:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b58a:	ea94 0f0c 	teq	r4, ip
    b58e:	bf08      	it	eq
    b590:	ea95 0f0c 	teqeq	r5, ip
    b594:	f43f af3b 	beq.w	b40e <__aeabi_dmul+0x24a>
    b598:	ea94 0f0c 	teq	r4, ip
    b59c:	d10a      	bne.n	b5b4 <__aeabi_ddiv+0x19c>
    b59e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b5a2:	f47f af34 	bne.w	b40e <__aeabi_dmul+0x24a>
    b5a6:	ea95 0f0c 	teq	r5, ip
    b5aa:	f47f af25 	bne.w	b3f8 <__aeabi_dmul+0x234>
    b5ae:	4610      	mov	r0, r2
    b5b0:	4619      	mov	r1, r3
    b5b2:	e72c      	b.n	b40e <__aeabi_dmul+0x24a>
    b5b4:	ea95 0f0c 	teq	r5, ip
    b5b8:	d106      	bne.n	b5c8 <__aeabi_ddiv+0x1b0>
    b5ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b5be:	f43f aefd 	beq.w	b3bc <__aeabi_dmul+0x1f8>
    b5c2:	4610      	mov	r0, r2
    b5c4:	4619      	mov	r1, r3
    b5c6:	e722      	b.n	b40e <__aeabi_dmul+0x24a>
    b5c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b5cc:	bf18      	it	ne
    b5ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b5d2:	f47f aec5 	bne.w	b360 <__aeabi_dmul+0x19c>
    b5d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    b5da:	f47f af0d 	bne.w	b3f8 <__aeabi_dmul+0x234>
    b5de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    b5e2:	f47f aeeb 	bne.w	b3bc <__aeabi_dmul+0x1f8>
    b5e6:	e712      	b.n	b40e <__aeabi_dmul+0x24a>

0000b5e8 <__aeabi_d2uiz>:
    b5e8:	004a      	lsls	r2, r1, #1
    b5ea:	d211      	bcs.n	b610 <__aeabi_d2uiz+0x28>
    b5ec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    b5f0:	d211      	bcs.n	b616 <__aeabi_d2uiz+0x2e>
    b5f2:	d50d      	bpl.n	b610 <__aeabi_d2uiz+0x28>
    b5f4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    b5f8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    b5fc:	d40e      	bmi.n	b61c <__aeabi_d2uiz+0x34>
    b5fe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    b602:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b606:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    b60a:	fa23 f002 	lsr.w	r0, r3, r2
    b60e:	4770      	bx	lr
    b610:	f04f 0000 	mov.w	r0, #0
    b614:	4770      	bx	lr
    b616:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    b61a:	d102      	bne.n	b622 <__aeabi_d2uiz+0x3a>
    b61c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b620:	4770      	bx	lr
    b622:	f04f 0000 	mov.w	r0, #0
    b626:	4770      	bx	lr

0000b628 <memcmp>:
    b628:	2a03      	cmp	r2, #3
    b62a:	b470      	push	{r4, r5, r6}
    b62c:	d926      	bls.n	b67c <memcmp+0x54>
    b62e:	ea40 0301 	orr.w	r3, r0, r1
    b632:	079b      	lsls	r3, r3, #30
    b634:	d011      	beq.n	b65a <memcmp+0x32>
    b636:	7804      	ldrb	r4, [r0, #0]
    b638:	780d      	ldrb	r5, [r1, #0]
    b63a:	42ac      	cmp	r4, r5
    b63c:	d122      	bne.n	b684 <memcmp+0x5c>
    b63e:	4402      	add	r2, r0
    b640:	1c43      	adds	r3, r0, #1
    b642:	e005      	b.n	b650 <memcmp+0x28>
    b644:	f813 4b01 	ldrb.w	r4, [r3], #1
    b648:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    b64c:	42ac      	cmp	r4, r5
    b64e:	d119      	bne.n	b684 <memcmp+0x5c>
    b650:	4293      	cmp	r3, r2
    b652:	d1f7      	bne.n	b644 <memcmp+0x1c>
    b654:	2000      	movs	r0, #0
    b656:	bc70      	pop	{r4, r5, r6}
    b658:	4770      	bx	lr
    b65a:	460c      	mov	r4, r1
    b65c:	4603      	mov	r3, r0
    b65e:	681e      	ldr	r6, [r3, #0]
    b660:	6825      	ldr	r5, [r4, #0]
    b662:	4618      	mov	r0, r3
    b664:	42ae      	cmp	r6, r5
    b666:	4621      	mov	r1, r4
    b668:	f103 0304 	add.w	r3, r3, #4
    b66c:	f104 0404 	add.w	r4, r4, #4
    b670:	d104      	bne.n	b67c <memcmp+0x54>
    b672:	3a04      	subs	r2, #4
    b674:	2a03      	cmp	r2, #3
    b676:	4618      	mov	r0, r3
    b678:	4621      	mov	r1, r4
    b67a:	d8f0      	bhi.n	b65e <memcmp+0x36>
    b67c:	2a00      	cmp	r2, #0
    b67e:	d1da      	bne.n	b636 <memcmp+0xe>
    b680:	4610      	mov	r0, r2
    b682:	e7e8      	b.n	b656 <memcmp+0x2e>
    b684:	1b60      	subs	r0, r4, r5
    b686:	bc70      	pop	{r4, r5, r6}
    b688:	4770      	bx	lr
    b68a:	bf00      	nop

0000b68c <memcpy>:
    b68c:	4684      	mov	ip, r0
    b68e:	ea41 0300 	orr.w	r3, r1, r0
    b692:	f013 0303 	ands.w	r3, r3, #3
    b696:	d149      	bne.n	b72c <memcpy+0xa0>
    b698:	3a40      	subs	r2, #64	; 0x40
    b69a:	d323      	bcc.n	b6e4 <memcpy+0x58>
    b69c:	680b      	ldr	r3, [r1, #0]
    b69e:	6003      	str	r3, [r0, #0]
    b6a0:	684b      	ldr	r3, [r1, #4]
    b6a2:	6043      	str	r3, [r0, #4]
    b6a4:	688b      	ldr	r3, [r1, #8]
    b6a6:	6083      	str	r3, [r0, #8]
    b6a8:	68cb      	ldr	r3, [r1, #12]
    b6aa:	60c3      	str	r3, [r0, #12]
    b6ac:	690b      	ldr	r3, [r1, #16]
    b6ae:	6103      	str	r3, [r0, #16]
    b6b0:	694b      	ldr	r3, [r1, #20]
    b6b2:	6143      	str	r3, [r0, #20]
    b6b4:	698b      	ldr	r3, [r1, #24]
    b6b6:	6183      	str	r3, [r0, #24]
    b6b8:	69cb      	ldr	r3, [r1, #28]
    b6ba:	61c3      	str	r3, [r0, #28]
    b6bc:	6a0b      	ldr	r3, [r1, #32]
    b6be:	6203      	str	r3, [r0, #32]
    b6c0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    b6c2:	6243      	str	r3, [r0, #36]	; 0x24
    b6c4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    b6c6:	6283      	str	r3, [r0, #40]	; 0x28
    b6c8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    b6ca:	62c3      	str	r3, [r0, #44]	; 0x2c
    b6cc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    b6ce:	6303      	str	r3, [r0, #48]	; 0x30
    b6d0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    b6d2:	6343      	str	r3, [r0, #52]	; 0x34
    b6d4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    b6d6:	6383      	str	r3, [r0, #56]	; 0x38
    b6d8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    b6da:	63c3      	str	r3, [r0, #60]	; 0x3c
    b6dc:	3040      	adds	r0, #64	; 0x40
    b6de:	3140      	adds	r1, #64	; 0x40
    b6e0:	3a40      	subs	r2, #64	; 0x40
    b6e2:	d2db      	bcs.n	b69c <memcpy+0x10>
    b6e4:	3230      	adds	r2, #48	; 0x30
    b6e6:	d30b      	bcc.n	b700 <memcpy+0x74>
    b6e8:	680b      	ldr	r3, [r1, #0]
    b6ea:	6003      	str	r3, [r0, #0]
    b6ec:	684b      	ldr	r3, [r1, #4]
    b6ee:	6043      	str	r3, [r0, #4]
    b6f0:	688b      	ldr	r3, [r1, #8]
    b6f2:	6083      	str	r3, [r0, #8]
    b6f4:	68cb      	ldr	r3, [r1, #12]
    b6f6:	60c3      	str	r3, [r0, #12]
    b6f8:	3010      	adds	r0, #16
    b6fa:	3110      	adds	r1, #16
    b6fc:	3a10      	subs	r2, #16
    b6fe:	d2f3      	bcs.n	b6e8 <memcpy+0x5c>
    b700:	320c      	adds	r2, #12
    b702:	d305      	bcc.n	b710 <memcpy+0x84>
    b704:	f851 3b04 	ldr.w	r3, [r1], #4
    b708:	f840 3b04 	str.w	r3, [r0], #4
    b70c:	3a04      	subs	r2, #4
    b70e:	d2f9      	bcs.n	b704 <memcpy+0x78>
    b710:	3204      	adds	r2, #4
    b712:	d008      	beq.n	b726 <memcpy+0x9a>
    b714:	07d2      	lsls	r2, r2, #31
    b716:	bf1c      	itt	ne
    b718:	f811 3b01 	ldrbne.w	r3, [r1], #1
    b71c:	f800 3b01 	strbne.w	r3, [r0], #1
    b720:	d301      	bcc.n	b726 <memcpy+0x9a>
    b722:	880b      	ldrh	r3, [r1, #0]
    b724:	8003      	strh	r3, [r0, #0]
    b726:	4660      	mov	r0, ip
    b728:	4770      	bx	lr
    b72a:	bf00      	nop
    b72c:	2a08      	cmp	r2, #8
    b72e:	d313      	bcc.n	b758 <memcpy+0xcc>
    b730:	078b      	lsls	r3, r1, #30
    b732:	d0b1      	beq.n	b698 <memcpy+0xc>
    b734:	f010 0303 	ands.w	r3, r0, #3
    b738:	d0ae      	beq.n	b698 <memcpy+0xc>
    b73a:	f1c3 0304 	rsb	r3, r3, #4
    b73e:	1ad2      	subs	r2, r2, r3
    b740:	07db      	lsls	r3, r3, #31
    b742:	bf1c      	itt	ne
    b744:	f811 3b01 	ldrbne.w	r3, [r1], #1
    b748:	f800 3b01 	strbne.w	r3, [r0], #1
    b74c:	d3a4      	bcc.n	b698 <memcpy+0xc>
    b74e:	f831 3b02 	ldrh.w	r3, [r1], #2
    b752:	f820 3b02 	strh.w	r3, [r0], #2
    b756:	e79f      	b.n	b698 <memcpy+0xc>
    b758:	3a04      	subs	r2, #4
    b75a:	d3d9      	bcc.n	b710 <memcpy+0x84>
    b75c:	3a01      	subs	r2, #1
    b75e:	f811 3b01 	ldrb.w	r3, [r1], #1
    b762:	f800 3b01 	strb.w	r3, [r0], #1
    b766:	d2f9      	bcs.n	b75c <memcpy+0xd0>
    b768:	780b      	ldrb	r3, [r1, #0]
    b76a:	7003      	strb	r3, [r0, #0]
    b76c:	784b      	ldrb	r3, [r1, #1]
    b76e:	7043      	strb	r3, [r0, #1]
    b770:	788b      	ldrb	r3, [r1, #2]
    b772:	7083      	strb	r3, [r0, #2]
    b774:	4660      	mov	r0, ip
    b776:	4770      	bx	lr

0000b778 <strlen>:
    b778:	f020 0103 	bic.w	r1, r0, #3
    b77c:	f010 0003 	ands.w	r0, r0, #3
    b780:	f1c0 0000 	rsb	r0, r0, #0
    b784:	f851 3b04 	ldr.w	r3, [r1], #4
    b788:	f100 0c04 	add.w	ip, r0, #4
    b78c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    b790:	f06f 0200 	mvn.w	r2, #0
    b794:	bf1c      	itt	ne
    b796:	fa22 f20c 	lsrne.w	r2, r2, ip
    b79a:	4313      	orrne	r3, r2
    b79c:	f04f 0c01 	mov.w	ip, #1
    b7a0:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    b7a4:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    b7a8:	eba3 020c 	sub.w	r2, r3, ip
    b7ac:	ea22 0203 	bic.w	r2, r2, r3
    b7b0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    b7b4:	bf04      	itt	eq
    b7b6:	f851 3b04 	ldreq.w	r3, [r1], #4
    b7ba:	3004      	addeq	r0, #4
    b7bc:	d0f4      	beq.n	b7a8 <strlen+0x30>
    b7be:	f1c2 0100 	rsb	r1, r2, #0
    b7c2:	ea02 0201 	and.w	r2, r2, r1
    b7c6:	fab2 f282 	clz	r2, r2
    b7ca:	f1c2 021f 	rsb	r2, r2, #31
    b7ce:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    b7d2:	4770      	bx	lr
    b7d4:	00000043 	.word	0x00000043

0000b7d8 <_global_impure_ptr>:
    b7d8:	10000020                                 ...

0000b7dc <advertising_channels>:
    b7dc:	00270c00                                ..'.

0000b7e0 <data_channels>:
    b7e0:	04030201 08070605 0d0b0a09 11100f0e     ................
    b7f0:	15141312 19181716 1d1c1b1a 21201f1e     .............. !
    b800:	25242322 00000026                       "#$%&...

0000b808 <whitening>:
    b808:	01010101 01000100 00000100 00010000     ................
    b818:	01000101 00010101 01010100 00010000     ................
    b828:	01010001 01010000 00000000 00010100     ................
    b838:	01000101 01010100 00000100 00010100     ................
    b848:	00000100 00000100 00000000 01000001     ................
    b858:	01010000 00000100 01010101 01010100     ................
    b868:	00000000 01010101 00010101 01010000     ................
    b878:	01010001 01000000 00000100 00010001     ................

0000b888 <whitening_index>:
    b888:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    b898:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    b8a8:	5a541b28 662f703f                       (.TZ?p/f

0000b8b0 <hop_interval_lut>:
    b8b0:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    b8c0:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    b8d0:	120c0916 00000024                       ....$...

0000b8d8 <whitening_word>:
    b8d8:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    b8e8:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    b8f8:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    b908:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    b918:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    b928:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    b938:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    b948:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    b958:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    b968:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    b978:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    b988:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    b998:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    b9a8:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    b9b8:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    b9c8:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    b9d8:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    b9e8:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    b9f8:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    ba08:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    ba18:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    ba28:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    ba38:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    ba48:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    ba58:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    ba68:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    ba78:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    ba88:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    ba98:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    baa8:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    bab8:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    bac8:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    bad8:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    bae8:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    baf8:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    bb08:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    bb18:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    bb28:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    bb38:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    bb48:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    bb58:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    bb68:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    bb78:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    bb88:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    bb98:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    bba8:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    bbb8:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    bbc8:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    bbd8:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    bbe8:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    bbf8:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    bc08:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    bc18:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    bc28:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    bc38:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    bc48:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    bc58:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    bc68:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    bc78:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    bc88:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    bc98:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    bca8:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    bcb8:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    bcc8:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    bcd8:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    bce8:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    bcf8:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    bd08:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    bd18:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    bd28:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    bd38:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    bd48:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    bd58:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    bd68:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    bd78:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    bd88:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    bd98:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    bda8:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    bdb8:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    bdc8:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    bdd8:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    bde8:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    bdf8:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    be08:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    be18:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    be28:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    be38:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    be48:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    be58:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    be68:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    be78:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    be88:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    be98:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    bea8:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    beb8:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    bec8:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    bed8:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    bee8:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    bef8:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    bf08:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    bf18:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    bf28:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    bf38:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    bf48:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    bf58:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    bf68:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    bf78:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    bf88:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    bf98:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    bfa8:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    bfb8:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    bfc8:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    bfd8:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    bfe8:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    bff8:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    c008:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    c018:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    c028:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    c038:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    c048:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

0000c058 <compile_info>:
    c058:	72656275 746f6f74 30322068 312d3531     ubertooth 2015-1
    c068:	31522d30 6f722820 7740746f 69706965     0-R1 (root@weipi
    c078:	2029676e 20746153 2074634f 31203531     ng) Sat Oct 15 1
    c088:	35333a34 2030313a 2054534b 36313032     4:35:10 KST 2016
    c098:	00000000 35313032 2d30312d 00003152     ....2015-10-R1..
    c0a8:	00000001 00000001 00000001 00000001     ................
    c0b8:	ffff0900 ffffffff ff050102 0000ffff     ................
    c0c8:	0985096c 0000099e 03010200 03000100     l...............
    c0d8:	01020001 00000100 04020301 04020304     ................
    c0e8:	03040304 00000203                       ........

0000c0f0 <abDescriptors>:
    c0f0:	02000112 400000ff 60021d50 02010101     .......@P..`....
    c100:	02090103 01010020 096e8000 02000004     .... .....n.....
    c110:	000000ff 02820507 07000040 40020505     ........@......@
    c120:	03040000 035c0409 00740068 00700074     ......\.h.t.t.p.
    c130:	002f003a 0067002f 00740069 00750068     :././.g.i.t.h.u.
    c140:	002e0062 006f0063 002f006d 00720067     b...c.o.m./.g.r.
    c150:	00610065 00730074 006f0063 00740074     e.a.t.s.c.o.t.t.
    c160:	00610067 00670064 00740065 002f0073     g.a.d.g.e.t.s./.
    c170:	00620075 00720065 006f0074 0074006f     u.b.e.r.t.o.o.t.
    c180:	031e0068 006c0062 00650075 006f0074     h...b.l.u.e.t.o.
    c190:	0074006f 005f0068 00780072 00780074     o.t.h._.r.x.t.x.
    c1a0:	00300312 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
    c1b0:	00000031 6361387b 38613734 63632d38     1...{8ac47a88-cc
    c1c0:	342d3632 2d396161 62373838 6332342d     26-4aa9-887b-42c
    c1d0:	66633861 36613730 00007d33 00009145     a8cf07a63}..E...
    c1e0:	00009179 00009191 00009279 00009131     y.......y...1...
    c1f0:	00009131 00009131 000092dd 00009179     1...1.......y...
    c200:	000092f5 00009131 00009131 00009131     ....1...1...1...
    c210:	00009145 00009179 000093c9 00009589     E...y...........
    c220:	00009449 0000950d                       I.......

0000c228 <abExtendedOsFeatureDescriptor>:
    c228:	00000028 00040100 00000001 00000000     (...............
    c238:	49570100 4253554e 00000000 00000000     ..WINUSB........
    c248:	00000000 00000000                       ........

0000c250 <_init>:
    c250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c252:	bf00      	nop
    c254:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c256:	bc08      	pop	{r3}
    c258:	469e      	mov	lr, r3
    c25a:	4770      	bx	lr

0000c25c <__init_array_start>:
    c25c:	00004215 	.word	0x00004215

0000c260 <__frame_dummy_init_array_entry>:
    c260:	000040f1                                .@..

0000c264 <_fini>:
    c264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c266:	bf00      	nop
    c268:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c26a:	bc08      	pop	{r3}
    c26c:	469e      	mov	lr, r3
    c26e:	4770      	bx	lr

0000c270 <__fini_array_start>:
    c270:	000040cd 	.word	0x000040cd

0000c274 <__fini_array_end>:
    c274:	00000000 	.word	0x00000000
