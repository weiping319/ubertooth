
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008a08  00004000  00004000  00004000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         0000093e  10000020  0000ca08  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002928  10000960  0000d346  00010960  2**3
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0001095e  2**0
                  CONTENTS, READONLY
  5 .comment      00000070  00000000  00000000  00010987  2**0
                  CONTENTS, READONLY
  6 .debug_frame  00001d20  00000000  00000000  000109f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000525e  00000000  00000000  00012718  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001546  00000000  00000000  00017976  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006e0  00000000  00000000  00018ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000600  00000000  00000000  0001959c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000028fc  00000000  00000000  00019b9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000022b6  00000000  00000000  0001c498  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 25 9e 00 00 91 9e 00 00 91 9e 00 00     .?..%...........
    4010:	91 9e 00 00 91 9e 00 00 91 9e 00 00 00 00 00 00     ................
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 91 9e 00 00     ................
    4030:	91 9e 00 00 00 00 00 00 91 9e 00 00 91 9e 00 00     ................
    4040:	91 9e 00 00 0d 53 00 00 91 9e 00 00 91 9e 00 00     .....S..........
    4050:	91 9e 00 00 91 9e 00 00 91 9e 00 00 91 9e 00 00     ................
    4060:	91 9e 00 00 91 9e 00 00 91 9e 00 00 91 9e 00 00     ................
    4070:	91 9e 00 00 91 9e 00 00 91 9e 00 00 91 9e 00 00     ................
    4080:	91 9e 00 00 91 9e 00 00 91 9e 00 00 91 9e 00 00     ................
    4090:	91 9e 00 00 29 54 00 00 91 9e 00 00 91 9e 00 00     ....)T..........
    40a0:	19 9e 00 00 91 9e 00 00 f1 58 00 00 91 9e 00 00     .........X......
    40b0:	91 9e 00 00 91 9e 00 00 91 9e 00 00 91 9e 00 00     ................
    40c0:	91 9e 00 00 91 9e 00 00 91 9e 00 00                 ............

000040cc <__do_global_dtors_aux>:
    40cc:	b510      	push	{r4, lr}
    40ce:	4c05      	ldr	r4, [pc, #20]	; (40e4 <__do_global_dtors_aux+0x18>)
    40d0:	7823      	ldrb	r3, [r4, #0]
    40d2:	b933      	cbnz	r3, 40e2 <__do_global_dtors_aux+0x16>
    40d4:	4b04      	ldr	r3, [pc, #16]	; (40e8 <__do_global_dtors_aux+0x1c>)
    40d6:	b113      	cbz	r3, 40de <__do_global_dtors_aux+0x12>
    40d8:	4804      	ldr	r0, [pc, #16]	; (40ec <__do_global_dtors_aux+0x20>)
    40da:	f3af 8000 	nop.w
    40de:	2301      	movs	r3, #1
    40e0:	7023      	strb	r3, [r4, #0]
    40e2:	bd10      	pop	{r4, pc}
    40e4:	10000960 	.word	0x10000960
    40e8:	00000000 	.word	0x00000000
    40ec:	0000c9e0 	.word	0x0000c9e0

000040f0 <frame_dummy>:
    40f0:	4b08      	ldr	r3, [pc, #32]	; (4114 <frame_dummy+0x24>)
    40f2:	b510      	push	{r4, lr}
    40f4:	b11b      	cbz	r3, 40fe <frame_dummy+0xe>
    40f6:	4808      	ldr	r0, [pc, #32]	; (4118 <frame_dummy+0x28>)
    40f8:	4908      	ldr	r1, [pc, #32]	; (411c <frame_dummy+0x2c>)
    40fa:	f3af 8000 	nop.w
    40fe:	4808      	ldr	r0, [pc, #32]	; (4120 <frame_dummy+0x30>)
    4100:	6803      	ldr	r3, [r0, #0]
    4102:	b903      	cbnz	r3, 4106 <frame_dummy+0x16>
    4104:	bd10      	pop	{r4, pc}
    4106:	4b07      	ldr	r3, [pc, #28]	; (4124 <frame_dummy+0x34>)
    4108:	2b00      	cmp	r3, #0
    410a:	d0fb      	beq.n	4104 <frame_dummy+0x14>
    410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4110:	4718      	bx	r3
    4112:	bf00      	nop
    4114:	00000000 	.word	0x00000000
    4118:	0000c9e0 	.word	0x0000c9e0
    411c:	10000964 	.word	0x10000964
    4120:	10000960 	.word	0x10000960
    4124:	00000000 	.word	0x00000000

00004128 <__libc_init_array>:
    4128:	b570      	push	{r4, r5, r6, lr}
    412a:	4e0f      	ldr	r6, [pc, #60]	; (4168 <__libc_init_array+0x40>)
    412c:	4d0f      	ldr	r5, [pc, #60]	; (416c <__libc_init_array+0x44>)
    412e:	1b76      	subs	r6, r6, r5
    4130:	10b6      	asrs	r6, r6, #2
    4132:	bf18      	it	ne
    4134:	2400      	movne	r4, #0
    4136:	d005      	beq.n	4144 <__libc_init_array+0x1c>
    4138:	3401      	adds	r4, #1
    413a:	f855 3b04 	ldr.w	r3, [r5], #4
    413e:	4798      	blx	r3
    4140:	42a6      	cmp	r6, r4
    4142:	d1f9      	bne.n	4138 <__libc_init_array+0x10>
    4144:	4e0a      	ldr	r6, [pc, #40]	; (4170 <__libc_init_array+0x48>)
    4146:	4d0b      	ldr	r5, [pc, #44]	; (4174 <__libc_init_array+0x4c>)
    4148:	f008 fc4a 	bl	c9e0 <_init>
    414c:	1b76      	subs	r6, r6, r5
    414e:	10b6      	asrs	r6, r6, #2
    4150:	bf18      	it	ne
    4152:	2400      	movne	r4, #0
    4154:	d006      	beq.n	4164 <__libc_init_array+0x3c>
    4156:	3401      	adds	r4, #1
    4158:	f855 3b04 	ldr.w	r3, [r5], #4
    415c:	4798      	blx	r3
    415e:	42a6      	cmp	r6, r4
    4160:	d1f9      	bne.n	4156 <__libc_init_array+0x2e>
    4162:	bd70      	pop	{r4, r5, r6, pc}
    4164:	bd70      	pop	{r4, r5, r6, pc}
    4166:	bf00      	nop
    4168:	0000c9ec 	.word	0x0000c9ec
    416c:	0000c9ec 	.word	0x0000c9ec
    4170:	0000c9f4 	.word	0x0000c9f4
    4174:	0000c9ec 	.word	0x0000c9ec

00004178 <memset>:
    4178:	b470      	push	{r4, r5, r6}
    417a:	0784      	lsls	r4, r0, #30
    417c:	d046      	beq.n	420c <memset+0x94>
    417e:	1e54      	subs	r4, r2, #1
    4180:	2a00      	cmp	r2, #0
    4182:	d041      	beq.n	4208 <memset+0x90>
    4184:	b2cd      	uxtb	r5, r1
    4186:	4603      	mov	r3, r0
    4188:	e002      	b.n	4190 <memset+0x18>
    418a:	1e62      	subs	r2, r4, #1
    418c:	b3e4      	cbz	r4, 4208 <memset+0x90>
    418e:	4614      	mov	r4, r2
    4190:	f803 5b01 	strb.w	r5, [r3], #1
    4194:	079a      	lsls	r2, r3, #30
    4196:	d1f8      	bne.n	418a <memset+0x12>
    4198:	2c03      	cmp	r4, #3
    419a:	d92e      	bls.n	41fa <memset+0x82>
    419c:	b2cd      	uxtb	r5, r1
    419e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    41a2:	2c0f      	cmp	r4, #15
    41a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    41a8:	d919      	bls.n	41de <memset+0x66>
    41aa:	4626      	mov	r6, r4
    41ac:	f103 0210 	add.w	r2, r3, #16
    41b0:	3e10      	subs	r6, #16
    41b2:	2e0f      	cmp	r6, #15
    41b4:	f842 5c10 	str.w	r5, [r2, #-16]
    41b8:	f842 5c0c 	str.w	r5, [r2, #-12]
    41bc:	f842 5c08 	str.w	r5, [r2, #-8]
    41c0:	f842 5c04 	str.w	r5, [r2, #-4]
    41c4:	f102 0210 	add.w	r2, r2, #16
    41c8:	d8f2      	bhi.n	41b0 <memset+0x38>
    41ca:	f1a4 0210 	sub.w	r2, r4, #16
    41ce:	f022 020f 	bic.w	r2, r2, #15
    41d2:	f004 040f 	and.w	r4, r4, #15
    41d6:	3210      	adds	r2, #16
    41d8:	2c03      	cmp	r4, #3
    41da:	4413      	add	r3, r2
    41dc:	d90d      	bls.n	41fa <memset+0x82>
    41de:	461e      	mov	r6, r3
    41e0:	4622      	mov	r2, r4
    41e2:	3a04      	subs	r2, #4
    41e4:	2a03      	cmp	r2, #3
    41e6:	f846 5b04 	str.w	r5, [r6], #4
    41ea:	d8fa      	bhi.n	41e2 <memset+0x6a>
    41ec:	1f22      	subs	r2, r4, #4
    41ee:	f022 0203 	bic.w	r2, r2, #3
    41f2:	3204      	adds	r2, #4
    41f4:	4413      	add	r3, r2
    41f6:	f004 0403 	and.w	r4, r4, #3
    41fa:	b12c      	cbz	r4, 4208 <memset+0x90>
    41fc:	b2c9      	uxtb	r1, r1
    41fe:	441c      	add	r4, r3
    4200:	f803 1b01 	strb.w	r1, [r3], #1
    4204:	42a3      	cmp	r3, r4
    4206:	d1fb      	bne.n	4200 <memset+0x88>
    4208:	bc70      	pop	{r4, r5, r6}
    420a:	4770      	bx	lr
    420c:	4614      	mov	r4, r2
    420e:	4603      	mov	r3, r0
    4210:	e7c2      	b.n	4198 <memset+0x20>
    4212:	bf00      	nop

00004214 <register_fini>:
    4214:	4b02      	ldr	r3, [pc, #8]	; (4220 <register_fini+0xc>)
    4216:	b113      	cbz	r3, 421e <register_fini+0xa>
    4218:	4802      	ldr	r0, [pc, #8]	; (4224 <register_fini+0x10>)
    421a:	f000 b805 	b.w	4228 <atexit>
    421e:	4770      	bx	lr
    4220:	00000000 	.word	0x00000000
    4224:	00004235 	.word	0x00004235

00004228 <atexit>:
    4228:	4601      	mov	r1, r0
    422a:	2000      	movs	r0, #0
    422c:	4602      	mov	r2, r0
    422e:	4603      	mov	r3, r0
    4230:	f000 b816 	b.w	4260 <__register_exitproc>

00004234 <__libc_fini_array>:
    4234:	b538      	push	{r3, r4, r5, lr}
    4236:	4b08      	ldr	r3, [pc, #32]	; (4258 <__libc_fini_array+0x24>)
    4238:	4d08      	ldr	r5, [pc, #32]	; (425c <__libc_fini_array+0x28>)
    423a:	1aed      	subs	r5, r5, r3
    423c:	10ac      	asrs	r4, r5, #2
    423e:	bf18      	it	ne
    4240:	18ed      	addne	r5, r5, r3
    4242:	d005      	beq.n	4250 <__libc_fini_array+0x1c>
    4244:	3c01      	subs	r4, #1
    4246:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    424a:	4798      	blx	r3
    424c:	2c00      	cmp	r4, #0
    424e:	d1f9      	bne.n	4244 <__libc_fini_array+0x10>
    4250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4254:	f008 bbce 	b.w	c9f4 <_fini>
    4258:	0000ca00 	.word	0x0000ca00
    425c:	0000ca04 	.word	0x0000ca04

00004260 <__register_exitproc>:
    4260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4264:	4c25      	ldr	r4, [pc, #148]	; (42fc <__register_exitproc+0x9c>)
    4266:	4606      	mov	r6, r0
    4268:	6825      	ldr	r5, [r4, #0]
    426a:	4688      	mov	r8, r1
    426c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    4270:	4692      	mov	sl, r2
    4272:	4699      	mov	r9, r3
    4274:	b3c4      	cbz	r4, 42e8 <__register_exitproc+0x88>
    4276:	6860      	ldr	r0, [r4, #4]
    4278:	281f      	cmp	r0, #31
    427a:	dc17      	bgt.n	42ac <__register_exitproc+0x4c>
    427c:	1c41      	adds	r1, r0, #1
    427e:	b176      	cbz	r6, 429e <__register_exitproc+0x3e>
    4280:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    4284:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    4288:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
    428c:	2201      	movs	r2, #1
    428e:	4082      	lsls	r2, r0
    4290:	4315      	orrs	r5, r2
    4292:	2e02      	cmp	r6, #2
    4294:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    4298:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
    429c:	d01e      	beq.n	42dc <__register_exitproc+0x7c>
    429e:	1c83      	adds	r3, r0, #2
    42a0:	6061      	str	r1, [r4, #4]
    42a2:	2000      	movs	r0, #0
    42a4:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
    42a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42ac:	4b14      	ldr	r3, [pc, #80]	; (4300 <__register_exitproc+0xa0>)
    42ae:	b303      	cbz	r3, 42f2 <__register_exitproc+0x92>
    42b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42b4:	f3af 8000 	nop.w
    42b8:	4604      	mov	r4, r0
    42ba:	b1d0      	cbz	r0, 42f2 <__register_exitproc+0x92>
    42bc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    42c0:	2700      	movs	r7, #0
    42c2:	e884 0088 	stmia.w	r4, {r3, r7}
    42c6:	4638      	mov	r0, r7
    42c8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42cc:	2101      	movs	r1, #1
    42ce:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    42d2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    42d6:	2e00      	cmp	r6, #0
    42d8:	d0e1      	beq.n	429e <__register_exitproc+0x3e>
    42da:	e7d1      	b.n	4280 <__register_exitproc+0x20>
    42dc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    42e0:	431a      	orrs	r2, r3
    42e2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    42e6:	e7da      	b.n	429e <__register_exitproc+0x3e>
    42e8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    42ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42f0:	e7c1      	b.n	4276 <__register_exitproc+0x16>
    42f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42fa:	bf00      	nop
    42fc:	0000bf54 	.word	0x0000bf54
    4300:	00000000 	.word	0x00000000

00004304 <rssi_reset>:
int8_t rssi_min;
uint8_t rssi_count = 0;
int32_t rssi_sum = 0;

static void rssi_reset(void)
{
    4304:	b480      	push	{r7}
    4306:	af00      	add	r7, sp, #0
	rssi_count = 0;
    4308:	4b07      	ldr	r3, [pc, #28]	; (4328 <rssi_reset+0x24>)
    430a:	2200      	movs	r2, #0
    430c:	701a      	strb	r2, [r3, #0]
	rssi_sum = 0;
    430e:	4b07      	ldr	r3, [pc, #28]	; (432c <rssi_reset+0x28>)
    4310:	2200      	movs	r2, #0
    4312:	601a      	str	r2, [r3, #0]
	rssi_max = INT8_MIN;
    4314:	4b06      	ldr	r3, [pc, #24]	; (4330 <rssi_reset+0x2c>)
    4316:	2280      	movs	r2, #128	; 0x80
    4318:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    431a:	4b06      	ldr	r3, [pc, #24]	; (4334 <rssi_reset+0x30>)
    431c:	227f      	movs	r2, #127	; 0x7f
    431e:	701a      	strb	r2, [r3, #0]
}
    4320:	46bd      	mov	sp, r7
    4322:	f85d 7b04 	ldr.w	r7, [sp], #4
    4326:	4770      	bx	lr
    4328:	10000a49 	.word	0x10000a49
    432c:	10000a4c 	.word	0x10000a4c
    4330:	10000b04 	.word	0x10000b04
    4334:	10000bb8 	.word	0x10000bb8

00004338 <rssi_add>:

static void rssi_add(int8_t v)
{
    4338:	b480      	push	{r7}
    433a:	b083      	sub	sp, #12
    433c:	af00      	add	r7, sp, #0
    433e:	4603      	mov	r3, r0
    4340:	71fb      	strb	r3, [r7, #7]
	rssi_max = (v > rssi_max) ? v : rssi_max;
    4342:	4b14      	ldr	r3, [pc, #80]	; (4394 <rssi_add+0x5c>)
    4344:	781b      	ldrb	r3, [r3, #0]
    4346:	b25a      	sxtb	r2, r3
    4348:	f997 3007 	ldrsb.w	r3, [r7, #7]
    434c:	4293      	cmp	r3, r2
    434e:	bfb8      	it	lt
    4350:	4613      	movlt	r3, r2
    4352:	b2da      	uxtb	r2, r3
    4354:	4b0f      	ldr	r3, [pc, #60]	; (4394 <rssi_add+0x5c>)
    4356:	701a      	strb	r2, [r3, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    4358:	4b0f      	ldr	r3, [pc, #60]	; (4398 <rssi_add+0x60>)
    435a:	781b      	ldrb	r3, [r3, #0]
    435c:	b25a      	sxtb	r2, r3
    435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4362:	4293      	cmp	r3, r2
    4364:	bfa8      	it	ge
    4366:	4613      	movge	r3, r2
    4368:	b2da      	uxtb	r2, r3
    436a:	4b0b      	ldr	r3, [pc, #44]	; (4398 <rssi_add+0x60>)
    436c:	701a      	strb	r2, [r3, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4372:	021a      	lsls	r2, r3, #8
    4374:	4b09      	ldr	r3, [pc, #36]	; (439c <rssi_add+0x64>)
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	4413      	add	r3, r2
    437a:	4a08      	ldr	r2, [pc, #32]	; (439c <rssi_add+0x64>)
    437c:	6013      	str	r3, [r2, #0]
	rssi_count += 1;
    437e:	4b08      	ldr	r3, [pc, #32]	; (43a0 <rssi_add+0x68>)
    4380:	781b      	ldrb	r3, [r3, #0]
    4382:	3301      	adds	r3, #1
    4384:	b2da      	uxtb	r2, r3
    4386:	4b06      	ldr	r3, [pc, #24]	; (43a0 <rssi_add+0x68>)
    4388:	701a      	strb	r2, [r3, #0]
}
    438a:	370c      	adds	r7, #12
    438c:	46bd      	mov	sp, r7
    438e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4392:	4770      	bx	lr
    4394:	10000b04 	.word	0x10000b04
    4398:	10000bb8 	.word	0x10000bb8
    439c:	10000a4c 	.word	0x10000a4c
    43a0:	10000a49 	.word	0x10000a49

000043a4 <rssi_iir_update>:

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
static void rssi_iir_update(void)
{
    43a4:	b480      	push	{r7}
    43a6:	b085      	sub	sp, #20
    43a8:	af00      	add	r7, sp, #0
	int32_t avg;
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first
	 * slot of array if not sweeping. */
	if (hop_mode > 0)
    43aa:	4b1f      	ldr	r3, [pc, #124]	; (4428 <rssi_iir_update+0x84>)
    43ac:	781b      	ldrb	r3, [r3, #0]
    43ae:	2b00      	cmp	r3, #0
    43b0:	d006      	beq.n	43c0 <rssi_iir_update+0x1c>
		i = channel - 2402;
    43b2:	4b1e      	ldr	r3, [pc, #120]	; (442c <rssi_iir_update+0x88>)
    43b4:	881b      	ldrh	r3, [r3, #0]
    43b6:	b29b      	uxth	r3, r3
    43b8:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    43bc:	60fb      	str	r3, [r7, #12]
    43be:	e001      	b.n	43c4 <rssi_iir_update+0x20>
	else
		i = 0;
    43c0:	2300      	movs	r3, #0
    43c2:	60fb      	str	r3, [r7, #12]

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    43c4:	4b1a      	ldr	r3, [pc, #104]	; (4430 <rssi_iir_update+0x8c>)
    43c6:	781b      	ldrb	r3, [r3, #0]
    43c8:	2b00      	cmp	r3, #0
    43ca:	d008      	beq.n	43de <rssi_iir_update+0x3a>
		avg = (rssi_sum  + 128) / rssi_count;
    43cc:	4b19      	ldr	r3, [pc, #100]	; (4434 <rssi_iir_update+0x90>)
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	3380      	adds	r3, #128	; 0x80
    43d2:	4a17      	ldr	r2, [pc, #92]	; (4430 <rssi_iir_update+0x8c>)
    43d4:	7812      	ldrb	r2, [r2, #0]
    43d6:	fb93 f3f2 	sdiv	r3, r3, r2
    43da:	60bb      	str	r3, [r7, #8]
    43dc:	e001      	b.n	43e2 <rssi_iir_update+0x3e>
	else
		avg = 0; // really an error
    43de:	2300      	movs	r3, #0
    43e0:	60bb      	str	r3, [r7, #8]
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    43e2:	4a15      	ldr	r2, [pc, #84]	; (4438 <rssi_iir_update+0x94>)
    43e4:	68fb      	ldr	r3, [r7, #12]
    43e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    43ea:	b21a      	sxth	r2, r3
    43ec:	4613      	mov	r3, r2
    43ee:	019b      	lsls	r3, r3, #6
    43f0:	1a9b      	subs	r3, r3, r2
    43f2:	009b      	lsls	r3, r3, #2
    43f4:	4413      	add	r3, r2
    43f6:	607b      	str	r3, [r7, #4]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    43f8:	68ba      	ldr	r2, [r7, #8]
    43fa:	4613      	mov	r3, r2
    43fc:	005b      	lsls	r3, r3, #1
    43fe:	4413      	add	r3, r2
    4400:	687a      	ldr	r2, [r7, #4]
    4402:	4413      	add	r3, r2
    4404:	607b      	str	r3, [r7, #4]
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	3380      	adds	r3, #128	; 0x80
    440a:	2b00      	cmp	r3, #0
    440c:	da00      	bge.n	4410 <rssi_iir_update+0x6c>
    440e:	33ff      	adds	r3, #255	; 0xff
    4410:	121b      	asrs	r3, r3, #8
    4412:	b299      	uxth	r1, r3
    4414:	4a08      	ldr	r2, [pc, #32]	; (4438 <rssi_iir_update+0x94>)
    4416:	68fb      	ldr	r3, [r7, #12]
    4418:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
    441c:	3714      	adds	r7, #20
    441e:	46bd      	mov	sp, r7
    4420:	f85d 7b04 	ldr.w	r7, [sp], #4
    4424:	4770      	bx	lr
    4426:	bf00      	nop
    4428:	1000097c 	.word	0x1000097c
    442c:	1000049c 	.word	0x1000049c
    4430:	10000a49 	.word	0x10000a49
    4434:	10000a4c 	.word	0x10000a4c
    4438:	100009a0 	.word	0x100009a0

0000443c <cs_threshold_set>:
/* Set CC2400 carrier sense threshold and store value to
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, u8 samples)
{
    443c:	b580      	push	{r7, lr}
    443e:	b082      	sub	sp, #8
    4440:	af00      	add	r7, sp, #0
    4442:	4603      	mov	r3, r0
    4444:	460a      	mov	r2, r1
    4446:	71fb      	strb	r3, [r7, #7]
    4448:	4613      	mov	r3, r2
    444a:	71bb      	strb	r3, [r7, #6]
	level = MIN(MAX(level,-120),(-20));
    444c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4450:	f113 0f14 	cmn.w	r3, #20
    4454:	d00d      	beq.n	4472 <cs_threshold_set+0x36>
    4456:	f997 3007 	ldrsb.w	r3, [r7, #7]
    445a:	f113 0f13 	cmn.w	r3, #19
    445e:	da08      	bge.n	4472 <cs_threshold_set+0x36>
    4460:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4464:	f06f 0277 	mvn.w	r2, #119	; 0x77
    4468:	4293      	cmp	r3, r2
    446a:	bfb8      	it	lt
    446c:	4613      	movlt	r3, r2
    446e:	b2db      	uxtb	r3, r3
    4470:	e000      	b.n	4474 <cs_threshold_set+0x38>
    4472:	23ec      	movs	r3, #236	; 0xec
    4474:	71fb      	strb	r3, [r7, #7]
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | (samples&3));
    4476:	79fb      	ldrb	r3, [r7, #7]
    4478:	3338      	adds	r3, #56	; 0x38
    447a:	b2db      	uxtb	r3, r3
    447c:	b29b      	uxth	r3, r3
    447e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    4482:	b29a      	uxth	r2, r3
    4484:	79bb      	ldrb	r3, [r7, #6]
    4486:	b29b      	uxth	r3, r3
    4488:	f003 0303 	and.w	r3, r3, #3
    448c:	b29b      	uxth	r3, r3
    448e:	4313      	orrs	r3, r2
    4490:	b29b      	uxth	r3, r3
    4492:	b29b      	uxth	r3, r3
    4494:	2006      	movs	r0, #6
    4496:	4619      	mov	r1, r3
    4498:	f005 fee2 	bl	a260 <cc2400_set>
	cs_threshold_cur = level;
    449c:	4a08      	ldr	r2, [pc, #32]	; (44c0 <cs_threshold_set+0x84>)
    449e:	79fb      	ldrb	r3, [r7, #7]
    44a0:	7013      	strb	r3, [r2, #0]
	cs_no_squelch = (level <= -120);
    44a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    44a6:	f113 0f77 	cmn.w	r3, #119	; 0x77
    44aa:	bfb4      	ite	lt
    44ac:	2301      	movlt	r3, #1
    44ae:	2300      	movge	r3, #0
    44b0:	b2db      	uxtb	r3, r3
    44b2:	461a      	mov	r2, r3
    44b4:	4b03      	ldr	r3, [pc, #12]	; (44c4 <cs_threshold_set+0x88>)
    44b6:	701a      	strb	r2, [r3, #0]
}
    44b8:	3708      	adds	r7, #8
    44ba:	46bd      	mov	sp, r7
    44bc:	bd80      	pop	{r7, pc}
    44be:	bf00      	nop
    44c0:	1000044d 	.word	0x1000044d
    44c4:	1000097e 	.word	0x1000097e

000044c8 <enqueue>:

static int enqueue(u8 type, u8 *buf)
{
    44c8:	b580      	push	{r7, lr}
    44ca:	b088      	sub	sp, #32
    44cc:	af00      	add	r7, sp, #0
    44ce:	4603      	mov	r3, r0
    44d0:	6039      	str	r1, [r7, #0]
    44d2:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    44d4:	f004 fc5c 	bl	8d90 <usb_enqueue>
    44d8:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    44da:	69fb      	ldr	r3, [r7, #28]
    44dc:	2b00      	cmp	r3, #0
    44de:	d109      	bne.n	44f4 <enqueue+0x2c>
		status |= FIFO_OVERFLOW;
    44e0:	4b4e      	ldr	r3, [pc, #312]	; (461c <enqueue+0x154>)
    44e2:	781b      	ldrb	r3, [r3, #0]
    44e4:	b2db      	uxtb	r3, r3
    44e6:	f043 0304 	orr.w	r3, r3, #4
    44ea:	b2da      	uxtb	r2, r3
    44ec:	4b4b      	ldr	r3, [pc, #300]	; (461c <enqueue+0x154>)
    44ee:	701a      	strb	r2, [r3, #0]
		return 0;
    44f0:	2300      	movs	r3, #0
    44f2:	e08e      	b.n	4612 <enqueue+0x14a>
	}

	f->pkt_type = type;
    44f4:	69fb      	ldr	r3, [r7, #28]
    44f6:	79fa      	ldrb	r2, [r7, #7]
    44f8:	701a      	strb	r2, [r3, #0]
	if(type == SPECAN) {
    44fa:	79fb      	ldrb	r3, [r7, #7]
    44fc:	2b04      	cmp	r3, #4
    44fe:	d113      	bne.n	4528 <enqueue+0x60>
		f->clkn_high = (clkn >> 20) & 0xff;
    4500:	4b47      	ldr	r3, [pc, #284]	; (4620 <enqueue+0x158>)
    4502:	681b      	ldr	r3, [r3, #0]
    4504:	0d1b      	lsrs	r3, r3, #20
    4506:	b2da      	uxtb	r2, r3
    4508:	69fb      	ldr	r3, [r7, #28]
    450a:	70da      	strb	r2, [r3, #3]
		f->clk100ns = CLK100NS;
    450c:	4b44      	ldr	r3, [pc, #272]	; (4620 <enqueue+0x158>)
    450e:	681b      	ldr	r3, [r3, #0]
    4510:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4514:	f640 4235 	movw	r2, #3125	; 0xc35
    4518:	fb02 f203 	mul.w	r2, r2, r3
    451c:	4b41      	ldr	r3, [pc, #260]	; (4624 <enqueue+0x15c>)
    451e:	681b      	ldr	r3, [r3, #0]
    4520:	441a      	add	r2, r3
    4522:	69fb      	ldr	r3, [r7, #28]
    4524:	605a      	str	r2, [r3, #4]
    4526:	e008      	b.n	453a <enqueue+0x72>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    4528:	4b3f      	ldr	r3, [pc, #252]	; (4628 <enqueue+0x160>)
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	b2da      	uxtb	r2, r3
    452e:	69fb      	ldr	r3, [r7, #28]
    4530:	70da      	strb	r2, [r3, #3]
		f->clk100ns = idle_buf_clk100ns;
    4532:	4b3e      	ldr	r3, [pc, #248]	; (462c <enqueue+0x164>)
    4534:	681a      	ldr	r2, [r3, #0]
    4536:	69fb      	ldr	r3, [r7, #28]
    4538:	605a      	str	r2, [r3, #4]
	}
	f->channel = idle_buf_channel - 2402;
    453a:	4b3d      	ldr	r3, [pc, #244]	; (4630 <enqueue+0x168>)
    453c:	881b      	ldrh	r3, [r3, #0]
    453e:	b29b      	uxth	r3, r3
    4540:	b2db      	uxtb	r3, r3
    4542:	3b62      	subs	r3, #98	; 0x62
    4544:	b2da      	uxtb	r2, r3
    4546:	69fb      	ldr	r3, [r7, #28]
    4548:	709a      	strb	r2, [r3, #2]
	f->rssi_min = rssi_min;
    454a:	4b3a      	ldr	r3, [pc, #232]	; (4634 <enqueue+0x16c>)
    454c:	781b      	ldrb	r3, [r3, #0]
    454e:	b2da      	uxtb	r2, r3
    4550:	69fb      	ldr	r3, [r7, #28]
    4552:	725a      	strb	r2, [r3, #9]
	f->rssi_max = rssi_max;
    4554:	4b38      	ldr	r3, [pc, #224]	; (4638 <enqueue+0x170>)
    4556:	781b      	ldrb	r3, [r3, #0]
    4558:	b2da      	uxtb	r2, r3
    455a:	69fb      	ldr	r3, [r7, #28]
    455c:	721a      	strb	r2, [r3, #8]
	f->reserved[0] = device_index;
    455e:	4b37      	ldr	r3, [pc, #220]	; (463c <enqueue+0x174>)
    4560:	781a      	ldrb	r2, [r3, #0]
    4562:	69fb      	ldr	r3, [r7, #28]
    4564:	731a      	strb	r2, [r3, #12]
//	f->rssi_avg = device_index;
	
//	f->rssi_count = device_index;

	USRLED_SET;
    4566:	4b36      	ldr	r3, [pc, #216]	; (4640 <enqueue+0x178>)
    4568:	2202      	movs	r2, #2
    456a:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    456c:	69fb      	ldr	r3, [r7, #28]
    456e:	330e      	adds	r3, #14
    4570:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    4572:	683b      	ldr	r3, [r7, #0]
    4574:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    4576:	697b      	ldr	r3, [r7, #20]
    4578:	681a      	ldr	r2, [r3, #0]
    457a:	69bb      	ldr	r3, [r7, #24]
    457c:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    457e:	69bb      	ldr	r3, [r7, #24]
    4580:	3304      	adds	r3, #4
    4582:	697a      	ldr	r2, [r7, #20]
    4584:	6852      	ldr	r2, [r2, #4]
    4586:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    4588:	69bb      	ldr	r3, [r7, #24]
    458a:	3308      	adds	r3, #8
    458c:	697a      	ldr	r2, [r7, #20]
    458e:	6892      	ldr	r2, [r2, #8]
    4590:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    4592:	69bb      	ldr	r3, [r7, #24]
    4594:	330c      	adds	r3, #12
    4596:	697a      	ldr	r2, [r7, #20]
    4598:	68d2      	ldr	r2, [r2, #12]
    459a:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    459c:	69bb      	ldr	r3, [r7, #24]
    459e:	3310      	adds	r3, #16
    45a0:	697a      	ldr	r2, [r7, #20]
    45a2:	6912      	ldr	r2, [r2, #16]
    45a4:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    45a6:	69bb      	ldr	r3, [r7, #24]
    45a8:	3314      	adds	r3, #20
    45aa:	697a      	ldr	r2, [r7, #20]
    45ac:	6952      	ldr	r2, [r2, #20]
    45ae:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    45b0:	69bb      	ldr	r3, [r7, #24]
    45b2:	3318      	adds	r3, #24
    45b4:	697a      	ldr	r2, [r7, #20]
    45b6:	6992      	ldr	r2, [r2, #24]
    45b8:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    45ba:	69bb      	ldr	r3, [r7, #24]
    45bc:	331c      	adds	r3, #28
    45be:	697a      	ldr	r2, [r7, #20]
    45c0:	69d2      	ldr	r2, [r2, #28]
    45c2:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    45c4:	69bb      	ldr	r3, [r7, #24]
    45c6:	3320      	adds	r3, #32
    45c8:	697a      	ldr	r2, [r7, #20]
    45ca:	6a12      	ldr	r2, [r2, #32]
    45cc:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    45ce:	69bb      	ldr	r3, [r7, #24]
    45d0:	3324      	adds	r3, #36	; 0x24
    45d2:	697a      	ldr	r2, [r7, #20]
    45d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
    45d6:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    45d8:	69bb      	ldr	r3, [r7, #24]
    45da:	3328      	adds	r3, #40	; 0x28
    45dc:	697a      	ldr	r2, [r7, #20]
    45de:	6a92      	ldr	r2, [r2, #40]	; 0x28
    45e0:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    45e2:	69bb      	ldr	r3, [r7, #24]
    45e4:	332c      	adds	r3, #44	; 0x2c
    45e6:	697a      	ldr	r2, [r7, #20]
    45e8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    45ea:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    45ec:	69fb      	ldr	r3, [r7, #28]
    45ee:	330e      	adds	r3, #14
    45f0:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    45f2:	683b      	ldr	r3, [r7, #0]
    45f4:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    45f6:	693b      	ldr	r3, [r7, #16]
    45f8:	3330      	adds	r3, #48	; 0x30
    45fa:	68fa      	ldr	r2, [r7, #12]
    45fc:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    45fe:	801a      	strh	r2, [r3, #0]

	f->status = status;
    4600:	4b06      	ldr	r3, [pc, #24]	; (461c <enqueue+0x154>)
    4602:	781b      	ldrb	r3, [r3, #0]
    4604:	b2da      	uxtb	r2, r3
    4606:	69fb      	ldr	r3, [r7, #28]
    4608:	705a      	strb	r2, [r3, #1]
	status = 0;
    460a:	4b04      	ldr	r3, [pc, #16]	; (461c <enqueue+0x154>)
    460c:	2200      	movs	r2, #0
    460e:	701a      	strb	r2, [r3, #0]

	return 1;
    4610:	2301      	movs	r3, #1
}
    4612:	4618      	mov	r0, r3
    4614:	3720      	adds	r7, #32
    4616:	46bd      	mov	sp, r7
    4618:	bd80      	pop	{r7, pc}
    461a:	bf00      	nop
    461c:	10000a48 	.word	0x10000a48
    4620:	10000be4 	.word	0x10000be4
    4624:	40004008 	.word	0x40004008
    4628:	10001030 	.word	0x10001030
    462c:	10000bc8 	.word	0x10000bc8
    4630:	10000988 	.word	0x10000988
    4634:	10000bb8 	.word	0x10000bb8
    4638:	10000b04 	.word	0x10000b04
    463c:	10000be8 	.word	0x10000be8
    4640:	2009c038 	.word	0x2009c038

00004644 <enqueue_with_ts>:

int enqueue_with_ts(u8 type, u8 *buf, u32 ts)
{
    4644:	b580      	push	{r7, lr}
    4646:	b086      	sub	sp, #24
    4648:	af00      	add	r7, sp, #0
    464a:	4603      	mov	r3, r0
    464c:	60b9      	str	r1, [r7, #8]
    464e:	607a      	str	r2, [r7, #4]
    4650:	73fb      	strb	r3, [r7, #15]
	usb_pkt_rx *f = usb_enqueue();
    4652:	f004 fb9d 	bl	8d90 <usb_enqueue>
    4656:	6178      	str	r0, [r7, #20]

	/* fail if queue is full */
	if (f == NULL) {
    4658:	697b      	ldr	r3, [r7, #20]
    465a:	2b00      	cmp	r3, #0
    465c:	d109      	bne.n	4672 <enqueue_with_ts+0x2e>
		status |= FIFO_OVERFLOW;
    465e:	4b14      	ldr	r3, [pc, #80]	; (46b0 <enqueue_with_ts+0x6c>)
    4660:	781b      	ldrb	r3, [r3, #0]
    4662:	b2db      	uxtb	r3, r3
    4664:	f043 0304 	orr.w	r3, r3, #4
    4668:	b2da      	uxtb	r2, r3
    466a:	4b11      	ldr	r3, [pc, #68]	; (46b0 <enqueue_with_ts+0x6c>)
    466c:	701a      	strb	r2, [r3, #0]
		return 0;
    466e:	2300      	movs	r3, #0
    4670:	e019      	b.n	46a6 <enqueue_with_ts+0x62>
	}

	f->pkt_type = type;
    4672:	697b      	ldr	r3, [r7, #20]
    4674:	7bfa      	ldrb	r2, [r7, #15]
    4676:	701a      	strb	r2, [r3, #0]
//	f->clkn_high = 0;
	f->clk100ns = ts;
    4678:	697b      	ldr	r3, [r7, #20]
    467a:	687a      	ldr	r2, [r7, #4]
    467c:	605a      	str	r2, [r3, #4]

//	f->channel = channel - 2402;
	f->rssi_avg = rssi_avg;
    467e:	4b0d      	ldr	r3, [pc, #52]	; (46b4 <enqueue_with_ts+0x70>)
    4680:	781a      	ldrb	r2, [r3, #0]
    4682:	697b      	ldr	r3, [r7, #20]
    4684:	729a      	strb	r2, [r3, #10]
	f->rssi_count = freq_avg;
    4686:	4b0c      	ldr	r3, [pc, #48]	; (46b8 <enqueue_with_ts+0x74>)
    4688:	781a      	ldrb	r2, [r3, #0]
    468a:	697b      	ldr	r3, [r7, #20]
    468c:	72da      	strb	r2, [r3, #11]

	USRLED_SET;
    468e:	4b0b      	ldr	r3, [pc, #44]	; (46bc <enqueue_with_ts+0x78>)
    4690:	2202      	movs	r2, #2
    4692:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
	u16 *p3 = (u16 *)f->data;
	u16 *p4 = (u16 *)buf;
	p3[24] = p4[24];
*/
	f->status = status;
    4694:	4b06      	ldr	r3, [pc, #24]	; (46b0 <enqueue_with_ts+0x6c>)
    4696:	781b      	ldrb	r3, [r3, #0]
    4698:	b2da      	uxtb	r2, r3
    469a:	697b      	ldr	r3, [r7, #20]
    469c:	705a      	strb	r2, [r3, #1]
	status = 0;
    469e:	4b04      	ldr	r3, [pc, #16]	; (46b0 <enqueue_with_ts+0x6c>)
    46a0:	2200      	movs	r2, #0
    46a2:	701a      	strb	r2, [r3, #0]

	return 1;
    46a4:	2301      	movs	r3, #1
}
    46a6:	4618      	mov	r0, r3
    46a8:	3718      	adds	r7, #24
    46aa:	46bd      	mov	sp, r7
    46ac:	bd80      	pop	{r7, pc}
    46ae:	bf00      	nop
    46b0:	10000a48 	.word	0x10000a48
    46b4:	1000102d 	.word	0x1000102d
    46b8:	10000be9 	.word	0x10000be9
    46bc:	2009c038 	.word	0x2009c038

000046c0 <cs_threshold_calc_and_set>:

static void cs_threshold_calc_and_set(void)
{
    46c0:	b580      	push	{r7, lr}
    46c2:	b082      	sub	sp, #8
    46c4:	af00      	add	r7, sp, #0

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    46c6:	4b17      	ldr	r3, [pc, #92]	; (4724 <cs_threshold_calc_and_set+0x64>)
    46c8:	781b      	ldrb	r3, [r3, #0]
    46ca:	2b00      	cmp	r3, #0
    46cc:	d01d      	beq.n	470a <cs_threshold_calc_and_set+0x4a>
    46ce:	4b16      	ldr	r3, [pc, #88]	; (4728 <cs_threshold_calc_and_set+0x68>)
    46d0:	781b      	ldrb	r3, [r3, #0]
    46d2:	b25b      	sxtb	r3, r3
    46d4:	2b00      	cmp	r3, #0
    46d6:	dd18      	ble.n	470a <cs_threshold_calc_and_set+0x4a>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
    46d8:	4b14      	ldr	r3, [pc, #80]	; (472c <cs_threshold_calc_and_set+0x6c>)
    46da:	881b      	ldrh	r3, [r3, #0]
    46dc:	b29b      	uxth	r3, r3
    46de:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    46e2:	4a13      	ldr	r2, [pc, #76]	; (4730 <cs_threshold_calc_and_set+0x70>)
    46e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    46e8:	b21b      	sxth	r3, r3
    46ea:	3380      	adds	r3, #128	; 0x80
    46ec:	2b00      	cmp	r3, #0
    46ee:	da00      	bge.n	46f2 <cs_threshold_calc_and_set+0x32>
    46f0:	33ff      	adds	r3, #255	; 0xff
    46f2:	121b      	asrs	r3, r3, #8
    46f4:	71bb      	strb	r3, [r7, #6]
		level = rssi - 54 + cs_threshold_req;
    46f6:	79ba      	ldrb	r2, [r7, #6]
    46f8:	4b0b      	ldr	r3, [pc, #44]	; (4728 <cs_threshold_calc_and_set+0x68>)
    46fa:	781b      	ldrb	r3, [r3, #0]
    46fc:	b2db      	uxtb	r3, r3
    46fe:	4413      	add	r3, r2
    4700:	b2db      	uxtb	r3, r3
    4702:	3b36      	subs	r3, #54	; 0x36
    4704:	b2db      	uxtb	r3, r3
    4706:	71fb      	strb	r3, [r7, #7]

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    4708:	e002      	b.n	4710 <cs_threshold_calc_and_set+0x50>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
		level = rssi - 54 + cs_threshold_req;
	}
	else {
		level = cs_threshold_req;
    470a:	4b07      	ldr	r3, [pc, #28]	; (4728 <cs_threshold_calc_and_set+0x68>)
    470c:	781b      	ldrb	r3, [r3, #0]
    470e:	71fb      	strb	r3, [r7, #7]
	}
	cs_threshold_set(level, CS_SAMPLES_4);
    4710:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4714:	4618      	mov	r0, r3
    4716:	2103      	movs	r1, #3
    4718:	f7ff fe90 	bl	443c <cs_threshold_set>
}
    471c:	3708      	adds	r7, #8
    471e:	46bd      	mov	sp, r7
    4720:	bd80      	pop	{r7, pc}
    4722:	bf00      	nop
    4724:	1000097c 	.word	0x1000097c
    4728:	1000044c 	.word	0x1000044c
    472c:	1000049c 	.word	0x1000049c
    4730:	100009a0 	.word	0x100009a0

00004734 <cs_trigger_enable>:
/* CS comes from CC2400 GIO6, which is LPC P2.2, active low. GPIO
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
static void cs_trigger_enable(void)
{
    4734:	b480      	push	{r7}
    4736:	af00      	add	r7, sp, #0
	cs_trigger = 0;
    4738:	4b09      	ldr	r3, [pc, #36]	; (4760 <cs_trigger_enable+0x2c>)
    473a:	2200      	movs	r2, #0
    473c:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    473e:	4b09      	ldr	r3, [pc, #36]	; (4764 <cs_trigger_enable+0x30>)
    4740:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4744:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4746:	4b08      	ldr	r3, [pc, #32]	; (4768 <cs_trigger_enable+0x34>)
    4748:	2204      	movs	r2, #4
    474a:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    474c:	4a07      	ldr	r2, [pc, #28]	; (476c <cs_trigger_enable+0x38>)
    474e:	4b07      	ldr	r3, [pc, #28]	; (476c <cs_trigger_enable+0x38>)
    4750:	681b      	ldr	r3, [r3, #0]
    4752:	f043 0304 	orr.w	r3, r3, #4
    4756:	6013      	str	r3, [r2, #0]
}
    4758:	46bd      	mov	sp, r7
    475a:	f85d 7b04 	ldr.w	r7, [sp], #4
    475e:	4770      	bx	lr
    4760:	100010c0 	.word	0x100010c0
    4764:	e000e100 	.word	0xe000e100
    4768:	400280ac 	.word	0x400280ac
    476c:	400280b4 	.word	0x400280b4

00004770 <cs_trigger_disable>:

static void cs_trigger_disable(void)
{
    4770:	b480      	push	{r7}
    4772:	af00      	add	r7, sp, #0
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    4774:	4a09      	ldr	r2, [pc, #36]	; (479c <cs_trigger_disable+0x2c>)
    4776:	4b09      	ldr	r3, [pc, #36]	; (479c <cs_trigger_disable+0x2c>)
    4778:	681b      	ldr	r3, [r3, #0]
    477a:	f023 0304 	bic.w	r3, r3, #4
    477e:	6013      	str	r3, [r2, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4780:	4b07      	ldr	r3, [pc, #28]	; (47a0 <cs_trigger_disable+0x30>)
    4782:	2204      	movs	r2, #4
    4784:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_EINT3;
    4786:	4b07      	ldr	r3, [pc, #28]	; (47a4 <cs_trigger_disable+0x34>)
    4788:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    478c:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    478e:	4b06      	ldr	r3, [pc, #24]	; (47a8 <cs_trigger_disable+0x38>)
    4790:	2200      	movs	r2, #0
    4792:	701a      	strb	r2, [r3, #0]
}
    4794:	46bd      	mov	sp, r7
    4796:	f85d 7b04 	ldr.w	r7, [sp], #4
    479a:	4770      	bx	lr
    479c:	400280b4 	.word	0x400280b4
    47a0:	400280ac 	.word	0x400280ac
    47a4:	e000e180 	.word	0xe000e180
    47a8:	100010c0 	.word	0x100010c0

000047ac <vendor_request_handler>:

static int vendor_request_handler(u8 request, u16 *request_params, u8 *data, int *data_len)
{
    47ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47b0:	b095      	sub	sp, #84	; 0x54
    47b2:	af00      	add	r7, sp, #0
    47b4:	60b9      	str	r1, [r7, #8]
    47b6:	607a      	str	r2, [r7, #4]
    47b8:	603b      	str	r3, [r7, #0]
    47ba:	4603      	mov	r3, r0
    47bc:	73fb      	strb	r3, [r7, #15]
	u64 ac_copy;
	int i; // loop counter
	u32 clock;
	int clock_offset;
	u8 length; // string length
	usb_pkt_rx *p = NULL;
    47be:	2300      	movs	r3, #0
    47c0:	647b      	str	r3, [r7, #68]	; 0x44
	u16 reg_val;

	switch (request) {
    47c2:	7bfb      	ldrb	r3, [r7, #15]
    47c4:	2b3e      	cmp	r3, #62	; 0x3e
    47c6:	f200 8563 	bhi.w	5290 <vendor_request_handler+0xae4>
    47ca:	a201      	add	r2, pc, #4	; (adr r2, 47d0 <vendor_request_handler+0x24>)
    47cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    47d0:	000048cd 	.word	0x000048cd
    47d4:	000048d7 	.word	0x000048d7
    47d8:	00005291 	.word	0x00005291
    47dc:	00004907 	.word	0x00004907
    47e0:	00004929 	.word	0x00004929
    47e4:	00004945 	.word	0x00004945
    47e8:	00004967 	.word	0x00004967
    47ec:	00004983 	.word	0x00004983
    47f0:	000049a5 	.word	0x000049a5
    47f4:	000049c5 	.word	0x000049c5
    47f8:	000049e7 	.word	0x000049e7
    47fc:	00004c87 	.word	0x00004c87
    4800:	00004cad 	.word	0x00004cad
    4804:	00004a5d 	.word	0x00004a5d
    4808:	00004a67 	.word	0x00004a67
    480c:	00004a07 	.word	0x00004a07
    4810:	00004b45 	.word	0x00004b45
    4814:	00004b65 	.word	0x00004b65
    4818:	00004b99 	.word	0x00004b99
    481c:	00004bb9 	.word	0x00004bb9
    4820:	00004bd5 	.word	0x00004bd5
    4824:	00004c61 	.word	0x00004c61
    4828:	00004c69 	.word	0x00004c69
    482c:	00004c7b 	.word	0x00004c7b
    4830:	00004d37 	.word	0x00004d37
    4834:	00004d55 	.word	0x00004d55
    4838:	00005291 	.word	0x00005291
    483c:	00004d61 	.word	0x00004d61
    4840:	00004bdd 	.word	0x00004bdd
    4844:	00004bf9 	.word	0x00004bf9
    4848:	00004c21 	.word	0x00004c21
    484c:	00004c19 	.word	0x00004c19
    4850:	00004c29 	.word	0x00004c29
    4854:	00004e25 	.word	0x00004e25
    4858:	00004dbd 	.word	0x00004dbd
    485c:	00004e99 	.word	0x00004e99
    4860:	00004ea7 	.word	0x00004ea7
    4864:	00004eb7 	.word	0x00004eb7
    4868:	00004ec9 	.word	0x00004ec9
    486c:	00004f95 	.word	0x00004f95
    4870:	00004fdb 	.word	0x00004fdb
    4874:	00005069 	.word	0x00005069
    4878:	0000509d 	.word	0x0000509d
    487c:	000050bf 	.word	0x000050bf
    4880:	00005117 	.word	0x00005117
    4884:	00005295 	.word	0x00005295
    4888:	00005149 	.word	0x00005149
    488c:	0000515f 	.word	0x0000515f
    4890:	0000517b 	.word	0x0000517b
    4894:	00005191 	.word	0x00005191
    4898:	000051bd 	.word	0x000051bd
    489c:	0000500d 	.word	0x0000500d
    48a0:	0000503f 	.word	0x0000503f
    48a4:	000051d9 	.word	0x000051d9
    48a8:	0000521d 	.word	0x0000521d
    48ac:	00004e67 	.word	0x00004e67
    48b0:	0000522f 	.word	0x0000522f
    48b4:	00005291 	.word	0x00005291
    48b8:	00005207 	.word	0x00005207
    48bc:	00005273 	.word	0x00005273
    48c0:	0000527f 	.word	0x0000527f
    48c4:	000048e7 	.word	0x000048e7
    48c8:	000048f7 	.word	0x000048f7

	case UBERTOOTH_PING:
		*data_len = 0;
    48cc:	683b      	ldr	r3, [r7, #0]
    48ce:	2200      	movs	r2, #0
    48d0:	601a      	str	r2, [r3, #0]
		break;
    48d2:	f000 bce0 	b.w	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    48d6:	4ba7      	ldr	r3, [pc, #668]	; (4b74 <vendor_request_handler+0x3c8>)
    48d8:	2201      	movs	r2, #1
    48da:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    48dc:	683b      	ldr	r3, [r7, #0]
    48de:	2200      	movs	r2, #0
    48e0:	601a      	str	r2, [r3, #0]
		break;
    48e2:	f000 bcd8 	b.w	5296 <vendor_request_handler+0xaea>
	
	case UBERTOOTH_RX_FREQ:
		requested_mode = MODE_RX_FREQ;
    48e6:	4ba3      	ldr	r3, [pc, #652]	; (4b74 <vendor_request_handler+0x3c8>)
    48e8:	220e      	movs	r2, #14
    48ea:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    48ec:	683b      	ldr	r3, [r7, #0]
    48ee:	2200      	movs	r2, #0
    48f0:	601a      	str	r2, [r3, #0]
		break;
    48f2:	f000 bcd0 	b.w	5296 <vendor_request_handler+0xaea>
	
	case UBERTOOTH_RX_PROPOSED:
		requested_mode = MODE_RX_PROPOSED;
    48f6:	4b9f      	ldr	r3, [pc, #636]	; (4b74 <vendor_request_handler+0x3c8>)
    48f8:	220f      	movs	r2, #15
    48fa:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    48fc:	683b      	ldr	r3, [r7, #0]
    48fe:	2200      	movs	r2, #0
    4900:	601a      	str	r2, [r3, #0]
		break;
    4902:	f000 bcc8 	b.w	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    4906:	4b9c      	ldr	r3, [pc, #624]	; (4b78 <vendor_request_handler+0x3cc>)
    4908:	681b      	ldr	r3, [r3, #0]
    490a:	f003 0302 	and.w	r3, r3, #2
    490e:	2b00      	cmp	r3, #0
    4910:	bf14      	ite	ne
    4912:	2301      	movne	r3, #1
    4914:	2300      	moveq	r3, #0
    4916:	b2db      	uxtb	r3, r3
    4918:	461a      	mov	r2, r3
    491a:	687b      	ldr	r3, [r7, #4]
    491c:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    491e:	683b      	ldr	r3, [r7, #0]
    4920:	2201      	movs	r2, #1
    4922:	601a      	str	r2, [r3, #0]
		break;
    4924:	f000 bcb7 	b.w	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    4928:	68bb      	ldr	r3, [r7, #8]
    492a:	881b      	ldrh	r3, [r3, #0]
    492c:	2b00      	cmp	r3, #0
    492e:	d004      	beq.n	493a <vendor_request_handler+0x18e>
			USRLED_SET;
    4930:	4b92      	ldr	r3, [pc, #584]	; (4b7c <vendor_request_handler+0x3d0>)
    4932:	2202      	movs	r2, #2
    4934:	601a      	str	r2, [r3, #0]
		else
			USRLED_CLR;
		break;
    4936:	f000 bcae 	b.w	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
			USRLED_SET;
		else
			USRLED_CLR;
    493a:	4b91      	ldr	r3, [pc, #580]	; (4b80 <vendor_request_handler+0x3d4>)
    493c:	2202      	movs	r2, #2
    493e:	601a      	str	r2, [r3, #0]
		break;
    4940:	f000 bca9 	b.w	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    4944:	4b8c      	ldr	r3, [pc, #560]	; (4b78 <vendor_request_handler+0x3cc>)
    4946:	681b      	ldr	r3, [r3, #0]
    4948:	f003 0310 	and.w	r3, r3, #16
    494c:	2b00      	cmp	r3, #0
    494e:	bf14      	ite	ne
    4950:	2301      	movne	r3, #1
    4952:	2300      	moveq	r3, #0
    4954:	b2db      	uxtb	r3, r3
    4956:	461a      	mov	r2, r3
    4958:	687b      	ldr	r3, [r7, #4]
    495a:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    495c:	683b      	ldr	r3, [r7, #0]
    495e:	2201      	movs	r2, #1
    4960:	601a      	str	r2, [r3, #0]
		break;
    4962:	f000 bc98 	b.w	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    4966:	68bb      	ldr	r3, [r7, #8]
    4968:	881b      	ldrh	r3, [r3, #0]
    496a:	2b00      	cmp	r3, #0
    496c:	d004      	beq.n	4978 <vendor_request_handler+0x1cc>
			RXLED_SET;
    496e:	4b83      	ldr	r3, [pc, #524]	; (4b7c <vendor_request_handler+0x3d0>)
    4970:	2210      	movs	r2, #16
    4972:	601a      	str	r2, [r3, #0]
		else
			RXLED_CLR;
		break;
    4974:	f000 bc8f 	b.w	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
			RXLED_SET;
		else
			RXLED_CLR;
    4978:	4b81      	ldr	r3, [pc, #516]	; (4b80 <vendor_request_handler+0x3d4>)
    497a:	2210      	movs	r2, #16
    497c:	601a      	str	r2, [r3, #0]
		break;
    497e:	f000 bc8a 	b.w	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    4982:	4b7d      	ldr	r3, [pc, #500]	; (4b78 <vendor_request_handler+0x3cc>)
    4984:	681b      	ldr	r3, [r3, #0]
    4986:	f403 7380 	and.w	r3, r3, #256	; 0x100
    498a:	2b00      	cmp	r3, #0
    498c:	bf14      	ite	ne
    498e:	2301      	movne	r3, #1
    4990:	2300      	moveq	r3, #0
    4992:	b2db      	uxtb	r3, r3
    4994:	461a      	mov	r2, r3
    4996:	687b      	ldr	r3, [r7, #4]
    4998:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    499a:	683b      	ldr	r3, [r7, #0]
    499c:	2201      	movs	r2, #1
    499e:	601a      	str	r2, [r3, #0]
		break;
    49a0:	f000 bc79 	b.w	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    49a4:	68bb      	ldr	r3, [r7, #8]
    49a6:	881b      	ldrh	r3, [r3, #0]
    49a8:	2b00      	cmp	r3, #0
    49aa:	d005      	beq.n	49b8 <vendor_request_handler+0x20c>
			TXLED_SET;
    49ac:	4b73      	ldr	r3, [pc, #460]	; (4b7c <vendor_request_handler+0x3d0>)
    49ae:	f44f 7280 	mov.w	r2, #256	; 0x100
    49b2:	601a      	str	r2, [r3, #0]
		else
			TXLED_CLR;
		break;
    49b4:	f000 bc6f 	b.w	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
			TXLED_SET;
		else
			TXLED_CLR;
    49b8:	4b71      	ldr	r3, [pc, #452]	; (4b80 <vendor_request_handler+0x3d4>)
    49ba:	f44f 7280 	mov.w	r2, #256	; 0x100
    49be:	601a      	str	r2, [r3, #0]
		break;
    49c0:	f000 bc69 	b.w	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    49c4:	4b6c      	ldr	r3, [pc, #432]	; (4b78 <vendor_request_handler+0x3cc>)
    49c6:	681b      	ldr	r3, [r3, #0]
    49c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
    49cc:	2b00      	cmp	r3, #0
    49ce:	bf14      	ite	ne
    49d0:	2301      	movne	r3, #1
    49d2:	2300      	moveq	r3, #0
    49d4:	b2db      	uxtb	r3, r3
    49d6:	461a      	mov	r2, r3
    49d8:	687b      	ldr	r3, [r7, #4]
    49da:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    49dc:	683b      	ldr	r3, [r7, #0]
    49de:	2201      	movs	r2, #1
    49e0:	601a      	str	r2, [r3, #0]
		break;
    49e2:	f000 bc58 	b.w	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    49e6:	68bb      	ldr	r3, [r7, #8]
    49e8:	881b      	ldrh	r3, [r3, #0]
    49ea:	2b00      	cmp	r3, #0
    49ec:	d005      	beq.n	49fa <vendor_request_handler+0x24e>
			CC1V8_SET;
    49ee:	4b63      	ldr	r3, [pc, #396]	; (4b7c <vendor_request_handler+0x3d0>)
    49f0:	f44f 7200 	mov.w	r2, #512	; 0x200
    49f4:	601a      	str	r2, [r3, #0]
		else
			CC1V8_CLR;
		break;
    49f6:	f000 bc4e 	b.w	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
			CC1V8_SET;
		else
			CC1V8_CLR;
    49fa:	4b61      	ldr	r3, [pc, #388]	; (4b80 <vendor_request_handler+0x3d4>)
    49fc:	f44f 7200 	mov.w	r2, #512	; 0x200
    4a00:	601a      	str	r2, [r3, #0]
		break;
    4a02:	f000 bc48 	b.w	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_PARTNUM:
		command[0] = 54; /* read part number */
    4a06:	2336      	movs	r3, #54	; 0x36
    4a08:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4a0a:	4b5e      	ldr	r3, [pc, #376]	; (4b84 <vendor_request_handler+0x3d8>)
    4a0c:	681b      	ldr	r3, [r3, #0]
    4a0e:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4a12:	f107 0210 	add.w	r2, r7, #16
    4a16:	4608      	mov	r0, r1
    4a18:	4611      	mov	r1, r2
    4a1a:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4a1c:	693b      	ldr	r3, [r7, #16]
    4a1e:	b2da      	uxtb	r2, r3
    4a20:	687b      	ldr	r3, [r7, #4]
    4a22:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4a24:	687b      	ldr	r3, [r7, #4]
    4a26:	3301      	adds	r3, #1
    4a28:	697a      	ldr	r2, [r7, #20]
    4a2a:	b2d2      	uxtb	r2, r2
    4a2c:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4a2e:	687b      	ldr	r3, [r7, #4]
    4a30:	3302      	adds	r3, #2
    4a32:	697a      	ldr	r2, [r7, #20]
    4a34:	0a12      	lsrs	r2, r2, #8
    4a36:	b2d2      	uxtb	r2, r2
    4a38:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4a3a:	687b      	ldr	r3, [r7, #4]
    4a3c:	3303      	adds	r3, #3
    4a3e:	697a      	ldr	r2, [r7, #20]
    4a40:	0c12      	lsrs	r2, r2, #16
    4a42:	b2d2      	uxtb	r2, r2
    4a44:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4a46:	687b      	ldr	r3, [r7, #4]
    4a48:	3304      	adds	r3, #4
    4a4a:	697a      	ldr	r2, [r7, #20]
    4a4c:	0e12      	lsrs	r2, r2, #24
    4a4e:	b2d2      	uxtb	r2, r2
    4a50:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4a52:	683b      	ldr	r3, [r7, #0]
    4a54:	2205      	movs	r2, #5
    4a56:	601a      	str	r2, [r3, #0]
		break;
    4a58:	f000 bc1d 	b.w	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
    4a5c:	4b45      	ldr	r3, [pc, #276]	; (4b74 <vendor_request_handler+0x3c8>)
    4a5e:	220b      	movs	r2, #11
    4a60:	701a      	strb	r2, [r3, #0]
		break;
    4a62:	f000 bc18 	b.w	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_SERIAL:
		command[0] = 58; /* read device serial number */
    4a66:	233a      	movs	r3, #58	; 0x3a
    4a68:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4a6a:	4b46      	ldr	r3, [pc, #280]	; (4b84 <vendor_request_handler+0x3d8>)
    4a6c:	681b      	ldr	r3, [r3, #0]
    4a6e:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4a72:	f107 0210 	add.w	r2, r7, #16
    4a76:	4608      	mov	r0, r1
    4a78:	4611      	mov	r1, r2
    4a7a:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4a7c:	693b      	ldr	r3, [r7, #16]
    4a7e:	b2da      	uxtb	r2, r3
    4a80:	687b      	ldr	r3, [r7, #4]
    4a82:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4a84:	687b      	ldr	r3, [r7, #4]
    4a86:	3301      	adds	r3, #1
    4a88:	697a      	ldr	r2, [r7, #20]
    4a8a:	b2d2      	uxtb	r2, r2
    4a8c:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4a8e:	687b      	ldr	r3, [r7, #4]
    4a90:	3302      	adds	r3, #2
    4a92:	697a      	ldr	r2, [r7, #20]
    4a94:	0a12      	lsrs	r2, r2, #8
    4a96:	b2d2      	uxtb	r2, r2
    4a98:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4a9a:	687b      	ldr	r3, [r7, #4]
    4a9c:	3303      	adds	r3, #3
    4a9e:	697a      	ldr	r2, [r7, #20]
    4aa0:	0c12      	lsrs	r2, r2, #16
    4aa2:	b2d2      	uxtb	r2, r2
    4aa4:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4aa6:	687b      	ldr	r3, [r7, #4]
    4aa8:	3304      	adds	r3, #4
    4aaa:	697a      	ldr	r2, [r7, #20]
    4aac:	0e12      	lsrs	r2, r2, #24
    4aae:	b2d2      	uxtb	r2, r2
    4ab0:	701a      	strb	r2, [r3, #0]
		data[5] = result[2] & 0xFF;
    4ab2:	687b      	ldr	r3, [r7, #4]
    4ab4:	3305      	adds	r3, #5
    4ab6:	69ba      	ldr	r2, [r7, #24]
    4ab8:	b2d2      	uxtb	r2, r2
    4aba:	701a      	strb	r2, [r3, #0]
		data[6] = (result[2] >> 8) & 0xFF;
    4abc:	687b      	ldr	r3, [r7, #4]
    4abe:	3306      	adds	r3, #6
    4ac0:	69ba      	ldr	r2, [r7, #24]
    4ac2:	0a12      	lsrs	r2, r2, #8
    4ac4:	b2d2      	uxtb	r2, r2
    4ac6:	701a      	strb	r2, [r3, #0]
		data[7] = (result[2] >> 16) & 0xFF;
    4ac8:	687b      	ldr	r3, [r7, #4]
    4aca:	3307      	adds	r3, #7
    4acc:	69ba      	ldr	r2, [r7, #24]
    4ace:	0c12      	lsrs	r2, r2, #16
    4ad0:	b2d2      	uxtb	r2, r2
    4ad2:	701a      	strb	r2, [r3, #0]
		data[8] = (result[2] >> 24) & 0xFF;
    4ad4:	687b      	ldr	r3, [r7, #4]
    4ad6:	3308      	adds	r3, #8
    4ad8:	69ba      	ldr	r2, [r7, #24]
    4ada:	0e12      	lsrs	r2, r2, #24
    4adc:	b2d2      	uxtb	r2, r2
    4ade:	701a      	strb	r2, [r3, #0]
		data[9] = result[3] & 0xFF;
    4ae0:	687b      	ldr	r3, [r7, #4]
    4ae2:	3309      	adds	r3, #9
    4ae4:	69fa      	ldr	r2, [r7, #28]
    4ae6:	b2d2      	uxtb	r2, r2
    4ae8:	701a      	strb	r2, [r3, #0]
		data[10] = (result[3] >> 8) & 0xFF;
    4aea:	687b      	ldr	r3, [r7, #4]
    4aec:	330a      	adds	r3, #10
    4aee:	69fa      	ldr	r2, [r7, #28]
    4af0:	0a12      	lsrs	r2, r2, #8
    4af2:	b2d2      	uxtb	r2, r2
    4af4:	701a      	strb	r2, [r3, #0]
		data[11] = (result[3] >> 16) & 0xFF;
    4af6:	687b      	ldr	r3, [r7, #4]
    4af8:	330b      	adds	r3, #11
    4afa:	69fa      	ldr	r2, [r7, #28]
    4afc:	0c12      	lsrs	r2, r2, #16
    4afe:	b2d2      	uxtb	r2, r2
    4b00:	701a      	strb	r2, [r3, #0]
		data[12] = (result[3] >> 24) & 0xFF;
    4b02:	687b      	ldr	r3, [r7, #4]
    4b04:	330c      	adds	r3, #12
    4b06:	69fa      	ldr	r2, [r7, #28]
    4b08:	0e12      	lsrs	r2, r2, #24
    4b0a:	b2d2      	uxtb	r2, r2
    4b0c:	701a      	strb	r2, [r3, #0]
		data[13] = result[4] & 0xFF;
    4b0e:	687b      	ldr	r3, [r7, #4]
    4b10:	330d      	adds	r3, #13
    4b12:	6a3a      	ldr	r2, [r7, #32]
    4b14:	b2d2      	uxtb	r2, r2
    4b16:	701a      	strb	r2, [r3, #0]
		data[14] = (result[4] >> 8) & 0xFF;
    4b18:	687b      	ldr	r3, [r7, #4]
    4b1a:	330e      	adds	r3, #14
    4b1c:	6a3a      	ldr	r2, [r7, #32]
    4b1e:	0a12      	lsrs	r2, r2, #8
    4b20:	b2d2      	uxtb	r2, r2
    4b22:	701a      	strb	r2, [r3, #0]
		data[15] = (result[4] >> 16) & 0xFF;
    4b24:	687b      	ldr	r3, [r7, #4]
    4b26:	330f      	adds	r3, #15
    4b28:	6a3a      	ldr	r2, [r7, #32]
    4b2a:	0c12      	lsrs	r2, r2, #16
    4b2c:	b2d2      	uxtb	r2, r2
    4b2e:	701a      	strb	r2, [r3, #0]
		data[16] = (result[4] >> 24) & 0xFF;
    4b30:	687b      	ldr	r3, [r7, #4]
    4b32:	3310      	adds	r3, #16
    4b34:	6a3a      	ldr	r2, [r7, #32]
    4b36:	0e12      	lsrs	r2, r2, #24
    4b38:	b2d2      	uxtb	r2, r2
    4b3a:	701a      	strb	r2, [r3, #0]
		*data_len = 17;
    4b3c:	683b      	ldr	r3, [r7, #0]
    4b3e:	2211      	movs	r2, #17
    4b40:	601a      	str	r2, [r3, #0]
		break;
    4b42:	e3a8      	b.n	5296 <vendor_request_handler+0xaea>

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    4b44:	4b10      	ldr	r3, [pc, #64]	; (4b88 <vendor_request_handler+0x3dc>)
    4b46:	681b      	ldr	r3, [r3, #0]
    4b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4b4c:	2b00      	cmp	r3, #0
    4b4e:	bf14      	ite	ne
    4b50:	2301      	movne	r3, #1
    4b52:	2300      	moveq	r3, #0
    4b54:	b2db      	uxtb	r3, r3
    4b56:	461a      	mov	r2, r3
    4b58:	687b      	ldr	r3, [r7, #4]
    4b5a:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4b5c:	683b      	ldr	r3, [r7, #0]
    4b5e:	2201      	movs	r2, #1
    4b60:	601a      	str	r2, [r3, #0]
		break;
    4b62:	e398      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    4b64:	68bb      	ldr	r3, [r7, #8]
    4b66:	881b      	ldrh	r3, [r3, #0]
    4b68:	2b00      	cmp	r3, #0
    4b6a:	d011      	beq.n	4b90 <vendor_request_handler+0x3e4>
			PAEN_SET;
    4b6c:	4b07      	ldr	r3, [pc, #28]	; (4b8c <vendor_request_handler+0x3e0>)
    4b6e:	2280      	movs	r2, #128	; 0x80
    4b70:	601a      	str	r2, [r3, #0]
		else
			PAEN_CLR;
		break;
    4b72:	e390      	b.n	5296 <vendor_request_handler+0xaea>
    4b74:	10000a3f 	.word	0x10000a3f
    4b78:	2009c034 	.word	0x2009c034
    4b7c:	2009c038 	.word	0x2009c038
    4b80:	2009c03c 	.word	0x2009c03c
    4b84:	10000448 	.word	0x10000448
    4b88:	2009c054 	.word	0x2009c054
    4b8c:	2009c058 	.word	0x2009c058

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
			PAEN_SET;
		else
			PAEN_CLR;
    4b90:	4b94      	ldr	r3, [pc, #592]	; (4de4 <vendor_request_handler+0x638>)
    4b92:	2280      	movs	r2, #128	; 0x80
    4b94:	601a      	str	r2, [r3, #0]
		break;
    4b96:	e37e      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    4b98:	4b93      	ldr	r3, [pc, #588]	; (4de8 <vendor_request_handler+0x63c>)
    4b9a:	681b      	ldr	r3, [r3, #0]
    4b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4ba0:	2b00      	cmp	r3, #0
    4ba2:	bf14      	ite	ne
    4ba4:	2301      	movne	r3, #1
    4ba6:	2300      	moveq	r3, #0
    4ba8:	b2db      	uxtb	r3, r3
    4baa:	461a      	mov	r2, r3
    4bac:	687b      	ldr	r3, [r7, #4]
    4bae:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4bb0:	683b      	ldr	r3, [r7, #0]
    4bb2:	2201      	movs	r2, #1
    4bb4:	601a      	str	r2, [r3, #0]
		break;
    4bb6:	e36e      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    4bb8:	68bb      	ldr	r3, [r7, #8]
    4bba:	881b      	ldrh	r3, [r3, #0]
    4bbc:	2b00      	cmp	r3, #0
    4bbe:	d004      	beq.n	4bca <vendor_request_handler+0x41e>
			HGM_SET;
    4bc0:	4b8a      	ldr	r3, [pc, #552]	; (4dec <vendor_request_handler+0x640>)
    4bc2:	f44f 7280 	mov.w	r2, #256	; 0x100
    4bc6:	601a      	str	r2, [r3, #0]
		else
			HGM_CLR;
		break;
    4bc8:	e365      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
			HGM_SET;
		else
			HGM_CLR;
    4bca:	4b86      	ldr	r3, [pc, #536]	; (4de4 <vendor_request_handler+0x638>)
    4bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
    4bd0:	601a      	str	r2, [r3, #0]
		break;
    4bd2:	e360      	b.n	5296 <vendor_request_handler+0xaea>
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    4bd4:	4b86      	ldr	r3, [pc, #536]	; (4df0 <vendor_request_handler+0x644>)
    4bd6:	2203      	movs	r2, #3
    4bd8:	701a      	strb	r2, [r3, #0]
		break;
    4bda:	e35c      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    4bdc:	2005      	movs	r0, #5
    4bde:	f005 fb29 	bl	a234 <cc2400_get>
    4be2:	4603      	mov	r3, r0
    4be4:	b2db      	uxtb	r3, r3
    4be6:	f003 0307 	and.w	r3, r3, #7
    4bea:	b2da      	uxtb	r2, r3
    4bec:	687b      	ldr	r3, [r7, #4]
    4bee:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4bf0:	683b      	ldr	r3, [r7, #0]
    4bf2:	2201      	movs	r2, #1
    4bf4:	601a      	str	r2, [r3, #0]
		break;
    4bf6:	e34e      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    4bf8:	68bb      	ldr	r3, [r7, #8]
    4bfa:	881b      	ldrh	r3, [r3, #0]
    4bfc:	2b07      	cmp	r3, #7
    4bfe:	d809      	bhi.n	4c14 <vendor_request_handler+0x468>
			cc2400_set(FREND, 8 | request_params[0]);
    4c00:	68bb      	ldr	r3, [r7, #8]
    4c02:	881b      	ldrh	r3, [r3, #0]
    4c04:	f043 0308 	orr.w	r3, r3, #8
    4c08:	b29b      	uxth	r3, r3
    4c0a:	2005      	movs	r0, #5
    4c0c:	4619      	mov	r1, r3
    4c0e:	f005 fb27 	bl	a260 <cc2400_set>
		} else {
			return 0;
		}
		break;
    4c12:	e340      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    4c14:	2300      	movs	r3, #0
    4c16:	e33f      	b.n	5298 <vendor_request_handler+0xaec>
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    4c18:	4b75      	ldr	r3, [pc, #468]	; (4df0 <vendor_request_handler+0x644>)
    4c1a:	2205      	movs	r2, #5
    4c1c:	701a      	strb	r2, [r3, #0]
		break;
    4c1e:	e33a      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    4c20:	4b73      	ldr	r3, [pc, #460]	; (4df0 <vendor_request_handler+0x644>)
    4c22:	2206      	movs	r2, #6
    4c24:	701a      	strb	r2, [r3, #0]
		break;
    4c26:	e336      	b.n	5296 <vendor_request_handler+0xaea>
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    4c28:	4b72      	ldr	r3, [pc, #456]	; (4df4 <vendor_request_handler+0x648>)
    4c2a:	781a      	ldrb	r2, [r3, #0]
    4c2c:	687b      	ldr	r3, [r7, #4]
    4c2e:	701a      	strb	r2, [r3, #0]
		data[1] = rr.request_pa;
    4c30:	687b      	ldr	r3, [r7, #4]
    4c32:	3301      	adds	r3, #1
    4c34:	4a6f      	ldr	r2, [pc, #444]	; (4df4 <vendor_request_handler+0x648>)
    4c36:	7852      	ldrb	r2, [r2, #1]
    4c38:	701a      	strb	r2, [r3, #0]
		data[2] = rr.request_num;
    4c3a:	687b      	ldr	r3, [r7, #4]
    4c3c:	3302      	adds	r3, #2
    4c3e:	4a6d      	ldr	r2, [pc, #436]	; (4df4 <vendor_request_handler+0x648>)
    4c40:	7892      	ldrb	r2, [r2, #2]
    4c42:	701a      	strb	r2, [r3, #0]
		data[3] = rr.reply_pa;
    4c44:	687b      	ldr	r3, [r7, #4]
    4c46:	3303      	adds	r3, #3
    4c48:	4a6a      	ldr	r2, [pc, #424]	; (4df4 <vendor_request_handler+0x648>)
    4c4a:	78d2      	ldrb	r2, [r2, #3]
    4c4c:	701a      	strb	r2, [r3, #0]
		data[4] = rr.reply_num;
    4c4e:	687b      	ldr	r3, [r7, #4]
    4c50:	3304      	adds	r3, #4
    4c52:	4a68      	ldr	r2, [pc, #416]	; (4df4 <vendor_request_handler+0x648>)
    4c54:	7912      	ldrb	r2, [r2, #4]
    4c56:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4c58:	683b      	ldr	r3, [r7, #0]
    4c5a:	2205      	movs	r2, #5
    4c5c:	601a      	str	r2, [r3, #0]
		break;
    4c5e:	e31a      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    4c60:	4b63      	ldr	r3, [pc, #396]	; (4df0 <vendor_request_handler+0x644>)
    4c62:	2200      	movs	r2, #0
    4c64:	701a      	strb	r2, [r3, #0]
		break;
    4c66:	e316      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    4c68:	4b63      	ldr	r3, [pc, #396]	; (4df8 <vendor_request_handler+0x64c>)
    4c6a:	781b      	ldrb	r3, [r3, #0]
    4c6c:	b2da      	uxtb	r2, r3
    4c6e:	687b      	ldr	r3, [r7, #4]
    4c70:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c72:	683b      	ldr	r3, [r7, #0]
    4c74:	2201      	movs	r2, #1
    4c76:	601a      	str	r2, [r3, #0]
		break;
    4c78:	e30d      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    4c7a:	68bb      	ldr	r3, [r7, #8]
    4c7c:	881b      	ldrh	r3, [r3, #0]
    4c7e:	b2da      	uxtb	r2, r3
    4c80:	4b5d      	ldr	r3, [pc, #372]	; (4df8 <vendor_request_handler+0x64c>)
    4c82:	701a      	strb	r2, [r3, #0]
		break;
    4c84:	e307      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    4c86:	4b5d      	ldr	r3, [pc, #372]	; (4dfc <vendor_request_handler+0x650>)
    4c88:	881b      	ldrh	r3, [r3, #0]
    4c8a:	b29b      	uxth	r3, r3
    4c8c:	b2da      	uxtb	r2, r3
    4c8e:	687b      	ldr	r3, [r7, #4]
    4c90:	701a      	strb	r2, [r3, #0]
		data[1] = (channel >> 8) & 0xFF;
    4c92:	687b      	ldr	r3, [r7, #4]
    4c94:	3301      	adds	r3, #1
    4c96:	4a59      	ldr	r2, [pc, #356]	; (4dfc <vendor_request_handler+0x650>)
    4c98:	8812      	ldrh	r2, [r2, #0]
    4c9a:	b292      	uxth	r2, r2
    4c9c:	0a12      	lsrs	r2, r2, #8
    4c9e:	b292      	uxth	r2, r2
    4ca0:	b2d2      	uxtb	r2, r2
    4ca2:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    4ca4:	683b      	ldr	r3, [r7, #0]
    4ca6:	2202      	movs	r2, #2
    4ca8:	601a      	str	r2, [r3, #0]
		break;
    4caa:	e2f4      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4cac:	68bb      	ldr	r3, [r7, #8]
    4cae:	881a      	ldrh	r2, [r3, #0]
    4cb0:	4b53      	ldr	r3, [pc, #332]	; (4e00 <vendor_request_handler+0x654>)
    4cb2:	801a      	strh	r2, [r3, #0]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4cb4:	4b52      	ldr	r3, [pc, #328]	; (4e00 <vendor_request_handler+0x654>)
    4cb6:	881b      	ldrh	r3, [r3, #0]
    4cb8:	b29b      	uxth	r3, r3
    4cba:	f640 22ea 	movw	r2, #2794	; 0xaea
    4cbe:	4293      	cmp	r3, r2
    4cc0:	d907      	bls.n	4cd2 <vendor_request_handler+0x526>
			hop_mode = HOP_SWEEP;
    4cc2:	4b50      	ldr	r3, [pc, #320]	; (4e04 <vendor_request_handler+0x658>)
    4cc4:	2201      	movs	r2, #1
    4cc6:	701a      	strb	r2, [r3, #0]
			requested_channel = 2402;
    4cc8:	4b4d      	ldr	r3, [pc, #308]	; (4e00 <vendor_request_handler+0x654>)
    4cca:	f640 1262 	movw	r2, #2402	; 0x962
    4cce:	801a      	strh	r2, [r3, #0]
    4cd0:	e020      	b.n	4d14 <vendor_request_handler+0x568>
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
    4cd2:	4b4c      	ldr	r3, [pc, #304]	; (4e04 <vendor_request_handler+0x658>)
    4cd4:	2200      	movs	r2, #0
    4cd6:	701a      	strb	r2, [r3, #0]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4cd8:	4b49      	ldr	r3, [pc, #292]	; (4e00 <vendor_request_handler+0x654>)
    4cda:	881b      	ldrh	r3, [r3, #0]
    4cdc:	b29b      	uxth	r3, r3
    4cde:	f640 02dc 	movw	r2, #2268	; 0x8dc
    4ce2:	4293      	cmp	r3, r2
    4ce4:	d903      	bls.n	4cee <vendor_request_handler+0x542>
    4ce6:	4b46      	ldr	r3, [pc, #280]	; (4e00 <vendor_request_handler+0x654>)
    4ce8:	881b      	ldrh	r3, [r3, #0]
    4cea:	b29b      	uxth	r3, r3
    4cec:	e001      	b.n	4cf2 <vendor_request_handler+0x546>
    4cee:	f640 03dc 	movw	r3, #2268	; 0x8dc
    4cf2:	4a43      	ldr	r2, [pc, #268]	; (4e00 <vendor_request_handler+0x654>)
    4cf4:	8013      	strh	r3, [r2, #0]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4cf6:	4b42      	ldr	r3, [pc, #264]	; (4e00 <vendor_request_handler+0x654>)
    4cf8:	881b      	ldrh	r3, [r3, #0]
    4cfa:	b29b      	uxth	r3, r3
    4cfc:	f640 22e9 	movw	r2, #2793	; 0xae9
    4d00:	4293      	cmp	r3, r2
    4d02:	d803      	bhi.n	4d0c <vendor_request_handler+0x560>
    4d04:	4b3e      	ldr	r3, [pc, #248]	; (4e00 <vendor_request_handler+0x654>)
    4d06:	881b      	ldrh	r3, [r3, #0]
    4d08:	b29b      	uxth	r3, r3
    4d0a:	e001      	b.n	4d10 <vendor_request_handler+0x564>
    4d0c:	f640 23ea 	movw	r3, #2794	; 0xaea
    4d10:	4a3b      	ldr	r2, [pc, #236]	; (4e00 <vendor_request_handler+0x654>)
    4d12:	8013      	strh	r3, [r2, #0]
		}

		if (mode != MODE_BT_FOLLOW_LE) {
    4d14:	4b3c      	ldr	r3, [pc, #240]	; (4e08 <vendor_request_handler+0x65c>)
    4d16:	781b      	ldrb	r3, [r3, #0]
    4d18:	b2db      	uxtb	r3, r3
    4d1a:	2b09      	cmp	r3, #9
    4d1c:	d00a      	beq.n	4d34 <vendor_request_handler+0x588>
			channel = requested_channel;
    4d1e:	4b38      	ldr	r3, [pc, #224]	; (4e00 <vendor_request_handler+0x654>)
    4d20:	881b      	ldrh	r3, [r3, #0]
    4d22:	b29a      	uxth	r2, r3
    4d24:	4b35      	ldr	r3, [pc, #212]	; (4dfc <vendor_request_handler+0x650>)
    4d26:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    4d28:	4b35      	ldr	r3, [pc, #212]	; (4e00 <vendor_request_handler+0x654>)
    4d2a:	2200      	movs	r2, #0
    4d2c:	801a      	strh	r2, [r3, #0]

			/* CS threshold is mode-dependent. Update it after
			 * possible mode change. TODO - kludgy. */
			cs_threshold_calc_and_set();
    4d2e:	f7ff fcc7 	bl	46c0 <cs_threshold_calc_and_set>
		}
		break;
    4d32:	e2b0      	b.n	5296 <vendor_request_handler+0xaea>
    4d34:	e2af      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_ISP:
		command[0] = 57;
    4d36:	2339      	movs	r3, #57	; 0x39
    4d38:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4d3a:	4b34      	ldr	r3, [pc, #208]	; (4e0c <vendor_request_handler+0x660>)
    4d3c:	681b      	ldr	r3, [r3, #0]
    4d3e:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4d42:	f107 0210 	add.w	r2, r7, #16
    4d46:	4608      	mov	r0, r1
    4d48:	4611      	mov	r1, r2
    4d4a:	4798      	blx	r3
		*data_len = 0; /* should never return */
    4d4c:	683b      	ldr	r3, [r7, #0]
    4d4e:	2200      	movs	r2, #0
    4d50:	601a      	str	r2, [r3, #0]
		break;
    4d52:	e2a0      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    4d54:	4b2e      	ldr	r3, [pc, #184]	; (4e10 <vendor_request_handler+0x664>)
    4d56:	4a2f      	ldr	r2, [pc, #188]	; (4e14 <vendor_request_handler+0x668>)
    4d58:	601a      	str	r2, [r3, #0]
		reset();
    4d5a:	f005 fc4d 	bl	a5f8 <reset>
		break;
    4d5e:	e29a      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    4d60:	68bb      	ldr	r3, [r7, #8]
    4d62:	881b      	ldrh	r3, [r3, #0]
    4d64:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4d68:	d917      	bls.n	4d9a <vendor_request_handler+0x5ee>
    4d6a:	68bb      	ldr	r3, [r7, #8]
    4d6c:	881b      	ldrh	r3, [r3, #0]
    4d6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    4d72:	d812      	bhi.n	4d9a <vendor_request_handler+0x5ee>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4d74:	68bb      	ldr	r3, [r7, #8]
    4d76:	3302      	adds	r3, #2
    4d78:	881b      	ldrh	r3, [r3, #0]
		bootloader_ctrl = DFU_MODE;
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    4d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4d7e:	d90c      	bls.n	4d9a <vendor_request_handler+0x5ee>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4d80:	68bb      	ldr	r3, [r7, #8]
    4d82:	3302      	adds	r3, #2
    4d84:	881b      	ldrh	r3, [r3, #0]
    4d86:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    4d8a:	d806      	bhi.n	4d9a <vendor_request_handler+0x5ee>
				request_params[1] < request_params[0])
    4d8c:	68bb      	ldr	r3, [r7, #8]
    4d8e:	3302      	adds	r3, #2
    4d90:	881a      	ldrh	r2, [r3, #0]
    4d92:	68bb      	ldr	r3, [r7, #8]
    4d94:	881b      	ldrh	r3, [r3, #0]
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4d96:	429a      	cmp	r2, r3
    4d98:	d201      	bcs.n	4d9e <vendor_request_handler+0x5f2>
				request_params[1] < request_params[0])
			return 0;
    4d9a:	2300      	movs	r3, #0
    4d9c:	e27c      	b.n	5298 <vendor_request_handler+0xaec>
		low_freq = request_params[0];
    4d9e:	68bb      	ldr	r3, [r7, #8]
    4da0:	881a      	ldrh	r2, [r3, #0]
    4da2:	4b1d      	ldr	r3, [pc, #116]	; (4e18 <vendor_request_handler+0x66c>)
    4da4:	801a      	strh	r2, [r3, #0]
		high_freq = request_params[1];
    4da6:	68bb      	ldr	r3, [r7, #8]
    4da8:	885a      	ldrh	r2, [r3, #2]
    4daa:	4b1c      	ldr	r3, [pc, #112]	; (4e1c <vendor_request_handler+0x670>)
    4dac:	801a      	strh	r2, [r3, #0]
		requested_mode = MODE_SPECAN;
    4dae:	4b10      	ldr	r3, [pc, #64]	; (4df0 <vendor_request_handler+0x644>)
    4db0:	2204      	movs	r2, #4
    4db2:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4db4:	683b      	ldr	r3, [r7, #0]
    4db6:	2200      	movs	r2, #0
    4db8:	601a      	str	r2, [r3, #0]
		break;
    4dba:	e26c      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    4dbc:	68bb      	ldr	r3, [r7, #8]
    4dbe:	881b      	ldrh	r3, [r3, #0]
    4dc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4dc4:	d901      	bls.n	4dca <vendor_request_handler+0x61e>
			return 0;
    4dc6:	2300      	movs	r3, #0
    4dc8:	e266      	b.n	5298 <vendor_request_handler+0xaec>
		rssi_threshold = (int8_t)request_params[0];
    4dca:	68bb      	ldr	r3, [r7, #8]
    4dcc:	881b      	ldrh	r3, [r3, #0]
    4dce:	b2da      	uxtb	r2, r3
    4dd0:	4b13      	ldr	r3, [pc, #76]	; (4e20 <vendor_request_handler+0x674>)
    4dd2:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_LED_SPECAN;
    4dd4:	4b06      	ldr	r3, [pc, #24]	; (4df0 <vendor_request_handler+0x644>)
    4dd6:	2207      	movs	r2, #7
    4dd8:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4dda:	683b      	ldr	r3, [r7, #0]
    4ddc:	2200      	movs	r2, #0
    4dde:	601a      	str	r2, [r3, #0]
		break;
    4de0:	e259      	b.n	5296 <vendor_request_handler+0xaea>
    4de2:	bf00      	nop
    4de4:	2009c05c 	.word	0x2009c05c
    4de8:	2009c054 	.word	0x2009c054
    4dec:	2009c058 	.word	0x2009c058
    4df0:	10000a3f 	.word	0x10000a3f
    4df4:	10001080 	.word	0x10001080
    4df8:	10000a42 	.word	0x10000a42
    4dfc:	1000049c 	.word	0x1000049c
    4e00:	10000a44 	.word	0x10000a44
    4e04:	1000097c 	.word	0x1000097c
    4e08:	10000a3e 	.word	0x10000a3e
    4e0c:	10000448 	.word	0x10000448
    4e10:	1000001c 	.word	0x1000001c
    4e14:	4305bb21 	.word	0x4305bb21
    4e18:	1000049e 	.word	0x1000049e
    4e1c:	100004a0 	.word	0x100004a0
    4e20:	100004a2 	.word	0x100004a2

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    4e24:	687b      	ldr	r3, [r7, #4]
    4e26:	2200      	movs	r2, #0
    4e28:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
    4e2a:	687b      	ldr	r3, [r7, #4]
    4e2c:	3301      	adds	r3, #1
    4e2e:	2200      	movs	r2, #0
    4e30:	701a      	strb	r2, [r3, #0]

		length = (u8)strlen(GIT_REVISION);
    4e32:	48a4      	ldr	r0, [pc, #656]	; (50c4 <vendor_request_handler+0x918>)
    4e34:	f007 f85e 	bl	bef4 <strlen>
    4e38:	4603      	mov	r3, r0
    4e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[2] = length;
    4e3e:	687b      	ldr	r3, [r7, #4]
    4e40:	3302      	adds	r3, #2
    4e42:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    4e46:	701a      	strb	r2, [r3, #0]

		memcpy(&data[3], GIT_REVISION, length);
    4e48:	687b      	ldr	r3, [r7, #4]
    4e4a:	1cda      	adds	r2, r3, #3
    4e4c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4e50:	4610      	mov	r0, r2
    4e52:	499c      	ldr	r1, [pc, #624]	; (50c4 <vendor_request_handler+0x918>)
    4e54:	461a      	mov	r2, r3
    4e56:	f006 ffd7 	bl	be08 <memcpy>

		*data_len = 2 + 1 + length;
    4e5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4e5e:	1cda      	adds	r2, r3, #3
    4e60:	683b      	ldr	r3, [r7, #0]
    4e62:	601a      	str	r2, [r3, #0]
		break;
    4e64:	e217      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    4e66:	4898      	ldr	r0, [pc, #608]	; (50c8 <vendor_request_handler+0x91c>)
    4e68:	f007 f844 	bl	bef4 <strlen>
    4e6c:	4603      	mov	r3, r0
    4e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[0] = length;
    4e72:	687b      	ldr	r3, [r7, #4]
    4e74:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    4e78:	701a      	strb	r2, [r3, #0]
		memcpy(&data[1], compile_info, length);
    4e7a:	687b      	ldr	r3, [r7, #4]
    4e7c:	1c5a      	adds	r2, r3, #1
    4e7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4e82:	4610      	mov	r0, r2
    4e84:	4990      	ldr	r1, [pc, #576]	; (50c8 <vendor_request_handler+0x91c>)
    4e86:	461a      	mov	r2, r3
    4e88:	f006 ffbe 	bl	be08 <memcpy>
		*data_len = 1 + length;
    4e8c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4e90:	1c5a      	adds	r2, r3, #1
    4e92:	683b      	ldr	r3, [r7, #0]
    4e94:	601a      	str	r2, [r3, #0]
		break;
    4e96:	e1fe      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    4e98:	687b      	ldr	r3, [r7, #4]
    4e9a:	2201      	movs	r2, #1
    4e9c:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4e9e:	683b      	ldr	r3, [r7, #0]
    4ea0:	2201      	movs	r2, #1
    4ea2:	601a      	str	r2, [r3, #0]
		break;
    4ea4:	e1f7      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    4ea6:	68bb      	ldr	r3, [r7, #8]
    4ea8:	881b      	ldrh	r3, [r3, #0]
    4eaa:	b2da      	uxtb	r2, r3
    4eac:	4b87      	ldr	r3, [pc, #540]	; (50cc <vendor_request_handler+0x920>)
    4eae:	701a      	strb	r2, [r3, #0]
		cs_threshold_calc_and_set();
    4eb0:	f7ff fc06 	bl	46c0 <cs_threshold_calc_and_set>
		break;
    4eb4:	e1ef      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    4eb6:	4b85      	ldr	r3, [pc, #532]	; (50cc <vendor_request_handler+0x920>)
    4eb8:	781b      	ldrb	r3, [r3, #0]
    4eba:	b2da      	uxtb	r2, r3
    4ebc:	687b      	ldr	r3, [r7, #4]
    4ebe:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4ec0:	683b      	ldr	r3, [r7, #0]
    4ec2:	2201      	movs	r2, #1
    4ec4:	601a      	str	r2, [r3, #0]
		break;
    4ec6:	e1e6      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    4ec8:	4981      	ldr	r1, [pc, #516]	; (50d0 <vendor_request_handler+0x924>)
    4eca:	f04f 0200 	mov.w	r2, #0
    4ece:	f04f 0300 	mov.w	r3, #0
    4ed2:	e9c1 2300 	strd	r2, r3, [r1]
		target.access_code = 0;
    4ed6:	497e      	ldr	r1, [pc, #504]	; (50d0 <vendor_request_handler+0x924>)
    4ed8:	f04f 0200 	mov.w	r2, #0
    4edc:	f04f 0300 	mov.w	r3, #0
    4ee0:	e9c1 2302 	strd	r2, r3, [r1, #8]
		for(i=0; i < 8; i++) {
    4ee4:	2300      	movs	r3, #0
    4ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
    4ee8:	e025      	b.n	4f36 <vendor_request_handler+0x78a>
			target.address |= (uint64_t)data[i] << 8*i;
    4eea:	4b79      	ldr	r3, [pc, #484]	; (50d0 <vendor_request_handler+0x924>)
    4eec:	e9d3 ab00 	ldrd	sl, fp, [r3]
    4ef0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4ef2:	687a      	ldr	r2, [r7, #4]
    4ef4:	4413      	add	r3, r2
    4ef6:	781b      	ldrb	r3, [r3, #0]
    4ef8:	b2da      	uxtb	r2, r3
    4efa:	f04f 0300 	mov.w	r3, #0
    4efe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    4f00:	00c9      	lsls	r1, r1, #3
    4f02:	f1a1 0620 	sub.w	r6, r1, #32
    4f06:	f1c1 0020 	rsb	r0, r1, #32
    4f0a:	fa03 f901 	lsl.w	r9, r3, r1
    4f0e:	fa02 f606 	lsl.w	r6, r2, r6
    4f12:	ea49 0906 	orr.w	r9, r9, r6
    4f16:	fa22 f000 	lsr.w	r0, r2, r0
    4f1a:	ea49 0900 	orr.w	r9, r9, r0
    4f1e:	fa02 f801 	lsl.w	r8, r2, r1
    4f22:	ea4a 0208 	orr.w	r2, sl, r8
    4f26:	ea4b 0309 	orr.w	r3, fp, r9
    4f2a:	4969      	ldr	r1, [pc, #420]	; (50d0 <vendor_request_handler+0x924>)
    4f2c:	e9c1 2300 	strd	r2, r3, [r1]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
    4f30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f32:	3301      	adds	r3, #1
    4f34:	64fb      	str	r3, [r7, #76]	; 0x4c
    4f36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f38:	2b07      	cmp	r3, #7
    4f3a:	ddd6      	ble.n	4eea <vendor_request_handler+0x73e>
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    4f3c:	2300      	movs	r3, #0
    4f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
    4f40:	e024      	b.n	4f8c <vendor_request_handler+0x7e0>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
    4f42:	4b63      	ldr	r3, [pc, #396]	; (50d0 <vendor_request_handler+0x924>)
    4f44:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
    4f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f4a:	3308      	adds	r3, #8
    4f4c:	687a      	ldr	r2, [r7, #4]
    4f4e:	4413      	add	r3, r2
    4f50:	781b      	ldrb	r3, [r3, #0]
    4f52:	b2da      	uxtb	r2, r3
    4f54:	f04f 0300 	mov.w	r3, #0
    4f58:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    4f5a:	00c9      	lsls	r1, r1, #3
    4f5c:	f1a1 0620 	sub.w	r6, r1, #32
    4f60:	f1c1 0020 	rsb	r0, r1, #32
    4f64:	fa03 f501 	lsl.w	r5, r3, r1
    4f68:	fa02 f606 	lsl.w	r6, r2, r6
    4f6c:	4335      	orrs	r5, r6
    4f6e:	fa22 f000 	lsr.w	r0, r2, r0
    4f72:	4305      	orrs	r5, r0
    4f74:	fa02 f401 	lsl.w	r4, r2, r1
    4f78:	ea48 0204 	orr.w	r2, r8, r4
    4f7c:	ea49 0305 	orr.w	r3, r9, r5
    4f80:	4953      	ldr	r1, [pc, #332]	; (50d0 <vendor_request_handler+0x924>)
    4f82:	e9c1 2302 	strd	r2, r3, [r1, #8]
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    4f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f88:	3301      	adds	r3, #1
    4f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    4f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f8e:	2b07      	cmp	r3, #7
    4f90:	ddd7      	ble.n	4f42 <vendor_request_handler+0x796>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
		}
		break;
    4f92:	e180      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
    4f94:	2300      	movs	r3, #0
    4f96:	64bb      	str	r3, [r7, #72]	; 0x48
		for(i=0; i < 4; i++) {
    4f98:	2300      	movs	r3, #0
    4f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
    4f9c:	e00d      	b.n	4fba <vendor_request_handler+0x80e>
			clock_offset <<= 8;
    4f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4fa0:	021b      	lsls	r3, r3, #8
    4fa2:	64bb      	str	r3, [r7, #72]	; 0x48
			clock_offset |= data[i];
    4fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4fa6:	687a      	ldr	r2, [r7, #4]
    4fa8:	4413      	add	r3, r2
    4faa:	781b      	ldrb	r3, [r3, #0]
    4fac:	461a      	mov	r2, r3
    4fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4fb0:	4313      	orrs	r3, r2
    4fb2:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		break;

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
		for(i=0; i < 4; i++) {
    4fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4fb6:	3301      	adds	r3, #1
    4fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
    4fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4fbc:	2b03      	cmp	r3, #3
    4fbe:	ddee      	ble.n	4f9e <vendor_request_handler+0x7f2>
			clock_offset <<= 8;
			clock_offset |= data[i];
		}
		clkn += clock_offset;
    4fc0:	4b44      	ldr	r3, [pc, #272]	; (50d4 <vendor_request_handler+0x928>)
    4fc2:	681a      	ldr	r2, [r3, #0]
    4fc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    4fc6:	4413      	add	r3, r2
    4fc8:	4a42      	ldr	r2, [pc, #264]	; (50d4 <vendor_request_handler+0x928>)
    4fca:	6013      	str	r3, [r2, #0]
		hop_mode = HOP_BLUETOOTH;
    4fcc:	4b42      	ldr	r3, [pc, #264]	; (50d8 <vendor_request_handler+0x92c>)
    4fce:	2202      	movs	r2, #2
    4fd0:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW;
    4fd2:	4b42      	ldr	r3, [pc, #264]	; (50dc <vendor_request_handler+0x930>)
    4fd4:	2208      	movs	r2, #8
    4fd6:	701a      	strb	r2, [r3, #0]
		break;
    4fd8:	e15d      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    4fda:	687b      	ldr	r3, [r7, #4]
    4fdc:	781b      	ldrb	r3, [r3, #0]
    4fde:	461a      	mov	r2, r3
    4fe0:	687b      	ldr	r3, [r7, #4]
    4fe2:	3301      	adds	r3, #1
    4fe4:	781b      	ldrb	r3, [r3, #0]
    4fe6:	021b      	lsls	r3, r3, #8
    4fe8:	431a      	orrs	r2, r3
    4fea:	687b      	ldr	r3, [r7, #4]
    4fec:	3302      	adds	r3, #2
    4fee:	781b      	ldrb	r3, [r3, #0]
    4ff0:	041b      	lsls	r3, r3, #16
    4ff2:	431a      	orrs	r2, r3
    4ff4:	687b      	ldr	r3, [r7, #4]
    4ff6:	3303      	adds	r3, #3
    4ff8:	781b      	ldrb	r3, [r3, #0]
    4ffa:	061b      	lsls	r3, r3, #24
    4ffc:	4313      	orrs	r3, r2
    4ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
		clkn = clock;
    5000:	4a34      	ldr	r2, [pc, #208]	; (50d4 <vendor_request_handler+0x928>)
    5002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5004:	6013      	str	r3, [r2, #0]
		cs_threshold_calc_and_set();
    5006:	f7ff fb5b 	bl	46c0 <cs_threshold_calc_and_set>
		break;
    500a:	e144      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    500c:	2300      	movs	r3, #0
    500e:	64fb      	str	r3, [r7, #76]	; 0x4c
    5010:	e00b      	b.n	502a <vendor_request_handler+0x87e>
			afh_map[i] = data[i];
    5012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5014:	687a      	ldr	r2, [r7, #4]
    5016:	4413      	add	r3, r2
    5018:	7819      	ldrb	r1, [r3, #0]
    501a:	4a31      	ldr	r2, [pc, #196]	; (50e0 <vendor_request_handler+0x934>)
    501c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    501e:	4413      	add	r3, r2
    5020:	460a      	mov	r2, r1
    5022:	701a      	strb	r2, [r3, #0]
		clkn = clock;
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    5024:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5026:	3301      	adds	r3, #1
    5028:	64fb      	str	r3, [r7, #76]	; 0x4c
    502a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    502c:	2b09      	cmp	r3, #9
    502e:	ddf0      	ble.n	5012 <vendor_request_handler+0x866>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    5030:	4b2c      	ldr	r3, [pc, #176]	; (50e4 <vendor_request_handler+0x938>)
    5032:	2201      	movs	r2, #1
    5034:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    5036:	683b      	ldr	r3, [r7, #0]
    5038:	220a      	movs	r2, #10
    503a:	601a      	str	r2, [r3, #0]
		break;
    503c:	e12b      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    503e:	2300      	movs	r3, #0
    5040:	64fb      	str	r3, [r7, #76]	; 0x4c
    5042:	e007      	b.n	5054 <vendor_request_handler+0x8a8>
			afh_map[i] = 0;
    5044:	4a26      	ldr	r2, [pc, #152]	; (50e0 <vendor_request_handler+0x934>)
    5046:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5048:	4413      	add	r3, r2
    504a:	2200      	movs	r2, #0
    504c:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    504e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5050:	3301      	adds	r3, #1
    5052:	64fb      	str	r3, [r7, #76]	; 0x4c
    5054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5056:	2b09      	cmp	r3, #9
    5058:	ddf4      	ble.n	5044 <vendor_request_handler+0x898>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    505a:	4b22      	ldr	r3, [pc, #136]	; (50e4 <vendor_request_handler+0x938>)
    505c:	2200      	movs	r2, #0
    505e:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    5060:	683b      	ldr	r3, [r7, #0]
    5062:	220a      	movs	r2, #10
    5064:	601a      	str	r2, [r3, #0]
		break;
    5066:	e116      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    5068:	4b1a      	ldr	r3, [pc, #104]	; (50d4 <vendor_request_handler+0x928>)
    506a:	681b      	ldr	r3, [r3, #0]
    506c:	63fb      	str	r3, [r7, #60]	; 0x3c
		for(i=0; i < 4; i++) {
    506e:	2300      	movs	r3, #0
    5070:	64fb      	str	r3, [r7, #76]	; 0x4c
    5072:	e00c      	b.n	508e <vendor_request_handler+0x8e2>
			data[i] = (clock >> (8*i)) & 0xff;
    5074:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5076:	687a      	ldr	r2, [r7, #4]
    5078:	4413      	add	r3, r2
    507a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    507c:	00d2      	lsls	r2, r2, #3
    507e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    5080:	fa21 f202 	lsr.w	r2, r1, r2
    5084:	b2d2      	uxtb	r2, r2
    5086:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(i=0; i < 4; i++) {
    5088:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    508a:	3301      	adds	r3, #1
    508c:	64fb      	str	r3, [r7, #76]	; 0x4c
    508e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5090:	2b03      	cmp	r3, #3
    5092:	ddef      	ble.n	5074 <vendor_request_handler+0x8c8>
			data[i] = (clock >> (8*i)) & 0xff;
		}
		*data_len = 4;
    5094:	683b      	ldr	r3, [r7, #0]
    5096:	2204      	movs	r2, #4
    5098:	601a      	str	r2, [r3, #0]
		break;
    509a:	e0fc      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;
    509c:	683b      	ldr	r3, [r7, #0]
    509e:	2200      	movs	r2, #0
    50a0:	601a      	str	r2, [r3, #0]

		do_hop = 0;
    50a2:	4b11      	ldr	r3, [pc, #68]	; (50e8 <vendor_request_handler+0x93c>)
    50a4:	2200      	movs	r2, #0
    50a6:	701a      	strb	r2, [r3, #0]
		hop_mode = HOP_BTLE;
    50a8:	4b0b      	ldr	r3, [pc, #44]	; (50d8 <vendor_request_handler+0x92c>)
    50aa:	2203      	movs	r2, #3
    50ac:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW_LE;
    50ae:	4b0b      	ldr	r3, [pc, #44]	; (50dc <vendor_request_handler+0x930>)
    50b0:	2209      	movs	r2, #9
    50b2:	701a      	strb	r2, [r3, #0]

		queue_init();
    50b4:	f003 fe5c 	bl	8d70 <queue_init>
		cs_threshold_calc_and_set();
    50b8:	f7ff fb02 	bl	46c0 <cs_threshold_calc_and_set>
		break;
    50bc:	e0eb      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    50be:	2300      	movs	r3, #0
    50c0:	64fb      	str	r3, [r7, #76]	; 0x4c
    50c2:	e021      	b.n	5108 <vendor_request_handler+0x95c>
    50c4:	0000c82c 	.word	0x0000c82c
    50c8:	0000c7e8 	.word	0x0000c7e8
    50cc:	1000044c 	.word	0x1000044c
    50d0:	100010c8 	.word	0x100010c8
    50d4:	10000be4 	.word	0x10000be4
    50d8:	1000097c 	.word	0x1000097c
    50dc:	10000a3f 	.word	0x10000a3f
    50e0:	10000bbc 	.word	0x10000bbc
    50e4:	1000102c 	.word	0x1000102c
    50e8:	1000097d 	.word	0x1000097d
			data[i] = (le.access_address >> (8*i)) & 0xff;
    50ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50ee:	687a      	ldr	r2, [r7, #4]
    50f0:	4413      	add	r3, r2
    50f2:	4a6c      	ldr	r2, [pc, #432]	; (52a4 <vendor_request_handler+0xaf8>)
    50f4:	6811      	ldr	r1, [r2, #0]
    50f6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    50f8:	00d2      	lsls	r2, r2, #3
    50fa:	fa21 f202 	lsr.w	r2, r1, r2
    50fe:	b2d2      	uxtb	r2, r2
    5100:	701a      	strb	r2, [r3, #0]
		queue_init();
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    5102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5104:	3301      	adds	r3, #1
    5106:	64fb      	str	r3, [r7, #76]	; 0x4c
    5108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    510a:	2b03      	cmp	r3, #3
    510c:	ddee      	ble.n	50ec <vendor_request_handler+0x940>
			data[i] = (le.access_address >> (8*i)) & 0xff;
		}
		*data_len = 4;
    510e:	683b      	ldr	r3, [r7, #0]
    5110:	2204      	movs	r2, #4
    5112:	601a      	str	r2, [r3, #0]
		break;
    5114:	e0bf      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    5116:	687b      	ldr	r3, [r7, #4]
    5118:	781b      	ldrb	r3, [r3, #0]
    511a:	461a      	mov	r2, r3
    511c:	687b      	ldr	r3, [r7, #4]
    511e:	3301      	adds	r3, #1
    5120:	781b      	ldrb	r3, [r3, #0]
    5122:	021b      	lsls	r3, r3, #8
    5124:	431a      	orrs	r2, r3
    5126:	687b      	ldr	r3, [r7, #4]
    5128:	3302      	adds	r3, #2
    512a:	781b      	ldrb	r3, [r3, #0]
    512c:	041b      	lsls	r3, r3, #16
    512e:	431a      	orrs	r2, r3
    5130:	687b      	ldr	r3, [r7, #4]
    5132:	3303      	adds	r3, #3
    5134:	781b      	ldrb	r3, [r3, #0]
    5136:	061b      	lsls	r3, r3, #24
    5138:	4313      	orrs	r3, r2
    513a:	4618      	mov	r0, r3
    513c:	f001 fd1e 	bl	6b7c <le_set_access_address>
		le.target_set = 1;
    5140:	4b58      	ldr	r3, [pc, #352]	; (52a4 <vendor_request_handler+0xaf8>)
    5142:	2201      	movs	r2, #1
    5144:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    5146:	e0a6      	b.n	5296 <vendor_request_handler+0xaea>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    5148:	687b      	ldr	r3, [r7, #4]
    514a:	2213      	movs	r2, #19
    514c:	701a      	strb	r2, [r3, #0]
		data[1] = 0x37;
    514e:	687b      	ldr	r3, [r7, #4]
    5150:	3301      	adds	r3, #1
    5152:	2237      	movs	r2, #55	; 0x37
    5154:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    5156:	683b      	ldr	r3, [r7, #0]
    5158:	2202      	movs	r2, #2
    515a:	601a      	str	r2, [r3, #0]
		break;
    515c:	e09b      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    515e:	4b51      	ldr	r3, [pc, #324]	; (52a4 <vendor_request_handler+0xaf8>)
    5160:	691b      	ldr	r3, [r3, #16]
    5162:	2b00      	cmp	r3, #0
    5164:	bf14      	ite	ne
    5166:	2301      	movne	r3, #1
    5168:	2300      	moveq	r3, #0
    516a:	b2db      	uxtb	r3, r3
    516c:	461a      	mov	r2, r3
    516e:	687b      	ldr	r3, [r7, #4]
    5170:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    5172:	683b      	ldr	r3, [r7, #0]
    5174:	2201      	movs	r2, #1
    5176:	601a      	str	r2, [r3, #0]
		break;
    5178:	e08d      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    517a:	68bb      	ldr	r3, [r7, #8]
    517c:	881b      	ldrh	r3, [r3, #0]
    517e:	2b00      	cmp	r3, #0
    5180:	bf14      	ite	ne
    5182:	2301      	movne	r3, #1
    5184:	2300      	moveq	r3, #0
    5186:	b2db      	uxtb	r3, r3
    5188:	461a      	mov	r2, r3
    518a:	4b46      	ldr	r3, [pc, #280]	; (52a4 <vendor_request_handler+0xaf8>)
    518c:	611a      	str	r2, [r3, #16]
		break;
    518e:	e082      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_POLL:
		p = dequeue();
    5190:	f003 fe2e 	bl	8df0 <dequeue>
    5194:	6478      	str	r0, [r7, #68]	; 0x44
		if (p != NULL) {
    5196:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5198:	2b00      	cmp	r3, #0
    519a:	d008      	beq.n	51ae <vendor_request_handler+0xa02>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    519c:	6878      	ldr	r0, [r7, #4]
    519e:	6c79      	ldr	r1, [r7, #68]	; 0x44
    51a0:	2240      	movs	r2, #64	; 0x40
    51a2:	f006 fe31 	bl	be08 <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    51a6:	683b      	ldr	r3, [r7, #0]
    51a8:	2240      	movs	r2, #64	; 0x40
    51aa:	601a      	str	r2, [r3, #0]
		} else {
			data[0] = 0;
			*data_len = 1;
		}
		break;
    51ac:	e073      	b.n	5296 <vendor_request_handler+0xaea>
		p = dequeue();
		if (p != NULL) {
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
			*data_len = sizeof(usb_pkt_rx);
		} else {
			data[0] = 0;
    51ae:	687b      	ldr	r3, [r7, #4]
    51b0:	2200      	movs	r2, #0
    51b2:	701a      	strb	r2, [r3, #0]
			*data_len = 1;
    51b4:	683b      	ldr	r3, [r7, #0]
    51b6:	2201      	movs	r2, #1
    51b8:	601a      	str	r2, [r3, #0]
		}
		break;
    51ba:	e06c      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    51bc:	683b      	ldr	r3, [r7, #0]
    51be:	2200      	movs	r2, #0
    51c0:	601a      	str	r2, [r3, #0]

		hop_mode = HOP_NONE;
    51c2:	4b39      	ldr	r3, [pc, #228]	; (52a8 <vendor_request_handler+0xafc>)
    51c4:	2200      	movs	r2, #0
    51c6:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_PROMISC_LE;
    51c8:	4b38      	ldr	r3, [pc, #224]	; (52ac <vendor_request_handler+0xb00>)
    51ca:	220a      	movs	r2, #10
    51cc:	701a      	strb	r2, [r3, #0]

		queue_init();
    51ce:	f003 fdcf 	bl	8d70 <queue_init>
		cs_threshold_calc_and_set();
    51d2:	f7ff fa75 	bl	46c0 <cs_threshold_calc_and_set>
		break;
    51d6:	e05e      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    51d8:	68bb      	ldr	r3, [r7, #8]
    51da:	881b      	ldrh	r3, [r3, #0]
    51dc:	b2db      	uxtb	r3, r3
    51de:	4618      	mov	r0, r3
    51e0:	f005 f828 	bl	a234 <cc2400_get>
    51e4:	4603      	mov	r3, r0
    51e6:	877b      	strh	r3, [r7, #58]	; 0x3a
		data[0] = (reg_val >> 8) & 0xff;
    51e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    51ea:	0a1b      	lsrs	r3, r3, #8
    51ec:	b29b      	uxth	r3, r3
    51ee:	b2da      	uxtb	r2, r3
    51f0:	687b      	ldr	r3, [r7, #4]
    51f2:	701a      	strb	r2, [r3, #0]
		data[1] = reg_val & 0xff;
    51f4:	687b      	ldr	r3, [r7, #4]
    51f6:	3301      	adds	r3, #1
    51f8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
    51fa:	b2d2      	uxtb	r2, r2
    51fc:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    51fe:	683b      	ldr	r3, [r7, #0]
    5200:	2202      	movs	r2, #2
    5202:	601a      	str	r2, [r3, #0]
		break;
    5204:	e047      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    5206:	68bb      	ldr	r3, [r7, #8]
    5208:	881b      	ldrh	r3, [r3, #0]
    520a:	b2da      	uxtb	r2, r3
    520c:	68bb      	ldr	r3, [r7, #8]
    520e:	3302      	adds	r3, #2
    5210:	881b      	ldrh	r3, [r3, #0]
    5212:	4610      	mov	r0, r2
    5214:	4619      	mov	r1, r3
    5216:	f005 f823 	bl	a260 <cc2400_set>
		break;
    521a:	e03c      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_BTLE_SLAVE:
		memcpy(slave_mac_address, data, 6);
    521c:	4824      	ldr	r0, [pc, #144]	; (52b0 <vendor_request_handler+0xb04>)
    521e:	6879      	ldr	r1, [r7, #4]
    5220:	2206      	movs	r2, #6
    5222:	f006 fdf1 	bl	be08 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    5226:	4b21      	ldr	r3, [pc, #132]	; (52ac <vendor_request_handler+0xb00>)
    5228:	220c      	movs	r2, #12
    522a:	701a      	strb	r2, [r3, #0]
		break;
    522c:	e033      	b.n	5296 <vendor_request_handler+0xaea>

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    522e:	687b      	ldr	r3, [r7, #4]
    5230:	795a      	ldrb	r2, [r3, #5]
    5232:	4b1c      	ldr	r3, [pc, #112]	; (52a4 <vendor_request_handler+0xaf8>)
    5234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		le.target[1] = data[4];
    5238:	687b      	ldr	r3, [r7, #4]
    523a:	791a      	ldrb	r2, [r3, #4]
    523c:	4b19      	ldr	r3, [pc, #100]	; (52a4 <vendor_request_handler+0xaf8>)
    523e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		le.target[2] = data[3];
    5242:	687b      	ldr	r3, [r7, #4]
    5244:	78da      	ldrb	r2, [r3, #3]
    5246:	4b17      	ldr	r3, [pc, #92]	; (52a4 <vendor_request_handler+0xaf8>)
    5248:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		le.target[3] = data[2];
    524c:	687b      	ldr	r3, [r7, #4]
    524e:	789a      	ldrb	r2, [r3, #2]
    5250:	4b14      	ldr	r3, [pc, #80]	; (52a4 <vendor_request_handler+0xaf8>)
    5252:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		le.target[4] = data[1];
    5256:	687b      	ldr	r3, [r7, #4]
    5258:	785a      	ldrb	r2, [r3, #1]
    525a:	4b12      	ldr	r3, [pc, #72]	; (52a4 <vendor_request_handler+0xaf8>)
    525c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		le.target[5] = data[0];
    5260:	687b      	ldr	r3, [r7, #4]
    5262:	781a      	ldrb	r2, [r3, #0]
    5264:	4b0f      	ldr	r3, [pc, #60]	; (52a4 <vendor_request_handler+0xaf8>)
    5266:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		le.target_set = 1;
    526a:	4b0e      	ldr	r3, [pc, #56]	; (52a4 <vendor_request_handler+0xaf8>)
    526c:	2201      	movs	r2, #1
    526e:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    5270:	e011      	b.n	5296 <vendor_request_handler+0xaea>

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    5272:	68bb      	ldr	r3, [r7, #8]
    5274:	881b      	ldrh	r3, [r3, #0]
    5276:	b2da      	uxtb	r2, r3
    5278:	4b0e      	ldr	r3, [pc, #56]	; (52b4 <vendor_request_handler+0xb08>)
    527a:	701a      	strb	r2, [r3, #0]
		break;
    527c:	e00b      	b.n	5296 <vendor_request_handler+0xaea>
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    527e:	4b0b      	ldr	r3, [pc, #44]	; (52ac <vendor_request_handler+0xb00>)
    5280:	220d      	movs	r2, #13
    5282:	701a      	strb	r2, [r3, #0]
		ego_mode = request_params[0];
    5284:	68bb      	ldr	r3, [r7, #8]
    5286:	881b      	ldrh	r3, [r3, #0]
    5288:	b2da      	uxtb	r2, r3
    528a:	4b0b      	ldr	r3, [pc, #44]	; (52b8 <vendor_request_handler+0xb0c>)
    528c:	701a      	strb	r2, [r3, #0]
		break;
    528e:	e002      	b.n	5296 <vendor_request_handler+0xaea>

	default:
		return 0;
    5290:	2300      	movs	r3, #0
    5292:	e001      	b.n	5298 <vendor_request_handler+0xaec>
		le.target_set = 1;
		break;

	case UBERTOOTH_DO_SOMETHING:
		// do something! just don't commit anything here
		break;
    5294:	bf00      	nop
		break;

	default:
		return 0;
	}
	return 1;
    5296:	2301      	movs	r3, #1
}
    5298:	4618      	mov	r0, r3
    529a:	3754      	adds	r7, #84	; 0x54
    529c:	46bd      	mov	sp, r7
    529e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    52a2:	bf00      	nop
    52a4:	10000458 	.word	0x10000458
    52a8:	1000097c 	.word	0x1000097c
    52ac:	10000a3f 	.word	0x10000a3f
    52b0:	1000098c 	.word	0x1000098c
    52b4:	10000a40 	.word	0x10000a40
    52b8:	10000a41 	.word	0x10000a41

000052bc <clkn_init>:

static void clkn_init()
{
    52bc:	b480      	push	{r7}
    52be:	af00      	add	r7, sp, #0
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    52c0:	4b0c      	ldr	r3, [pc, #48]	; (52f4 <clkn_init+0x38>)
    52c2:	2202      	movs	r2, #2
    52c4:	601a      	str	r2, [r3, #0]
	clkn = 0;
    52c6:	4b0c      	ldr	r3, [pc, #48]	; (52f8 <clkn_init+0x3c>)
    52c8:	2200      	movs	r2, #0
    52ca:	601a      	str	r2, [r3, #0]
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    52cc:	4b0b      	ldr	r3, [pc, #44]	; (52fc <clkn_init+0x40>)
    52ce:	2204      	movs	r2, #4
    52d0:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    52d2:	4b0b      	ldr	r3, [pc, #44]	; (5300 <clkn_init+0x44>)
    52d4:	f640 4234 	movw	r2, #3124	; 0xc34
    52d8:	601a      	str	r2, [r3, #0]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    52da:	4b0a      	ldr	r3, [pc, #40]	; (5304 <clkn_init+0x48>)
    52dc:	2203      	movs	r2, #3
    52de:	601a      	str	r2, [r3, #0]
	ISER0 = ISER0_ISE_TIMER0;
    52e0:	4b09      	ldr	r3, [pc, #36]	; (5308 <clkn_init+0x4c>)
    52e2:	2202      	movs	r2, #2
    52e4:	601a      	str	r2, [r3, #0]

	/* start timer */
	T0TCR = TCR_Counter_Enable;
    52e6:	4b03      	ldr	r3, [pc, #12]	; (52f4 <clkn_init+0x38>)
    52e8:	2201      	movs	r2, #1
    52ea:	601a      	str	r2, [r3, #0]
}
    52ec:	46bd      	mov	sp, r7
    52ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    52f2:	4770      	bx	lr
    52f4:	40004004 	.word	0x40004004
    52f8:	10000be4 	.word	0x10000be4
    52fc:	4000400c 	.word	0x4000400c
    5300:	40004018 	.word	0x40004018
    5304:	40004014 	.word	0x40004014
    5308:	e000e100 	.word	0xe000e100

0000530c <TIMER0_IRQHandler>:

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    530c:	b480      	push	{r7}
    530e:	b083      	sub	sp, #12
    5310:	af00      	add	r7, sp, #0
	// Use non-volatile working register to shave off a couple instructions
	u32 next;
	u32 le_clk;

	if (T0IR & TIR_MR0_Interrupt) {
    5312:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    5316:	681b      	ldr	r3, [r3, #0]
    5318:	f003 0301 	and.w	r3, r3, #1
    531c:	2b00      	cmp	r3, #0
    531e:	d06d      	beq.n	53fc <TIMER0_IRQHandler+0xf0>

		clkn++;
    5320:	4b39      	ldr	r3, [pc, #228]	; (5408 <TIMER0_IRQHandler+0xfc>)
    5322:	681b      	ldr	r3, [r3, #0]
    5324:	3301      	adds	r3, #1
    5326:	4a38      	ldr	r2, [pc, #224]	; (5408 <TIMER0_IRQHandler+0xfc>)
    5328:	6013      	str	r3, [r2, #0]
		next = clkn;
    532a:	4b37      	ldr	r3, [pc, #220]	; (5408 <TIMER0_IRQHandler+0xfc>)
    532c:	681b      	ldr	r3, [r3, #0]
    532e:	607b      	str	r3, [r7, #4]
		le_clk = (next - le.conn_epoch) & 0x03;
    5330:	4b36      	ldr	r3, [pc, #216]	; (540c <TIMER0_IRQHandler+0x100>)
    5332:	699b      	ldr	r3, [r3, #24]
    5334:	687a      	ldr	r2, [r7, #4]
    5336:	1ad3      	subs	r3, r2, r3
    5338:	f003 0303 	and.w	r3, r3, #3
    533c:	603b      	str	r3, [r7, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    533e:	4b34      	ldr	r3, [pc, #208]	; (5410 <TIMER0_IRQHandler+0x104>)
    5340:	781b      	ldrb	r3, [r3, #0]
    5342:	2b00      	cmp	r3, #0
    5344:	d003      	beq.n	534e <TIMER0_IRQHandler+0x42>
    5346:	4b32      	ldr	r3, [pc, #200]	; (5410 <TIMER0_IRQHandler+0x104>)
    5348:	781b      	ldrb	r3, [r3, #0]
    534a:	2b01      	cmp	r3, #1
    534c:	d109      	bne.n	5362 <TIMER0_IRQHandler+0x56>
			if ((next & 0x7f) == 0)
    534e:	687b      	ldr	r3, [r7, #4]
    5350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5354:	2b00      	cmp	r3, #0
    5356:	d103      	bne.n	5360 <TIMER0_IRQHandler+0x54>
				do_hop = 1;
    5358:	4b2e      	ldr	r3, [pc, #184]	; (5414 <TIMER0_IRQHandler+0x108>)
    535a:	2201      	movs	r2, #1
    535c:	701a      	strb	r2, [r3, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
			if ((next & 0x7f) == 0)
    535e:	e037      	b.n	53d0 <TIMER0_IRQHandler+0xc4>
    5360:	e036      	b.n	53d0 <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    5362:	4b2b      	ldr	r3, [pc, #172]	; (5410 <TIMER0_IRQHandler+0x104>)
    5364:	781b      	ldrb	r3, [r3, #0]
    5366:	2b02      	cmp	r3, #2
    5368:	d108      	bne.n	537c <TIMER0_IRQHandler+0x70>
			if ((next & 0x1) == 0)
    536a:	687b      	ldr	r3, [r7, #4]
    536c:	f003 0301 	and.w	r3, r3, #1
    5370:	2b00      	cmp	r3, #0
    5372:	d12d      	bne.n	53d0 <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
    5374:	4b27      	ldr	r3, [pc, #156]	; (5414 <TIMER0_IRQHandler+0x108>)
    5376:	2201      	movs	r2, #1
    5378:	701a      	strb	r2, [r3, #0]
    537a:	e029      	b.n	53d0 <TIMER0_IRQHandler+0xc4>
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    537c:	4b24      	ldr	r3, [pc, #144]	; (5410 <TIMER0_IRQHandler+0x104>)
    537e:	781b      	ldrb	r3, [r3, #0]
    5380:	2b03      	cmp	r3, #3
    5382:	d125      	bne.n	53d0 <TIMER0_IRQHandler+0xc4>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    5384:	4b21      	ldr	r3, [pc, #132]	; (540c <TIMER0_IRQHandler+0x100>)
    5386:	7d1b      	ldrb	r3, [r3, #20]
    5388:	2b03      	cmp	r3, #3
    538a:	d121      	bne.n	53d0 <TIMER0_IRQHandler+0xc4>
    538c:	683b      	ldr	r3, [r7, #0]
    538e:	2b00      	cmp	r3, #0
    5390:	d11e      	bne.n	53d0 <TIMER0_IRQHandler+0xc4>
				--le.interval_timer;
    5392:	4b1e      	ldr	r3, [pc, #120]	; (540c <TIMER0_IRQHandler+0x100>)
    5394:	8b9b      	ldrh	r3, [r3, #28]
    5396:	b29b      	uxth	r3, r3
    5398:	3b01      	subs	r3, #1
    539a:	b29a      	uxth	r2, r3
    539c:	4b1b      	ldr	r3, [pc, #108]	; (540c <TIMER0_IRQHandler+0x100>)
    539e:	839a      	strh	r2, [r3, #28]
				if (le.interval_timer == 0) {
    53a0:	4b1a      	ldr	r3, [pc, #104]	; (540c <TIMER0_IRQHandler+0x100>)
    53a2:	8b9b      	ldrh	r3, [r3, #28]
    53a4:	b29b      	uxth	r3, r3
    53a6:	2b00      	cmp	r3, #0
    53a8:	d10e      	bne.n	53c8 <TIMER0_IRQHandler+0xbc>
					do_hop = 1;
    53aa:	4b1a      	ldr	r3, [pc, #104]	; (5414 <TIMER0_IRQHandler+0x108>)
    53ac:	2201      	movs	r2, #1
    53ae:	701a      	strb	r2, [r3, #0]
					++le.conn_count;
    53b0:	4b16      	ldr	r3, [pc, #88]	; (540c <TIMER0_IRQHandler+0x100>)
    53b2:	8c1b      	ldrh	r3, [r3, #32]
    53b4:	b29b      	uxth	r3, r3
    53b6:	3301      	adds	r3, #1
    53b8:	b29a      	uxth	r2, r3
    53ba:	4b14      	ldr	r3, [pc, #80]	; (540c <TIMER0_IRQHandler+0x100>)
    53bc:	841a      	strh	r2, [r3, #32]
					le.interval_timer = le.conn_interval;
    53be:	4b13      	ldr	r3, [pc, #76]	; (540c <TIMER0_IRQHandler+0x100>)
    53c0:	8bda      	ldrh	r2, [r3, #30]
    53c2:	4b12      	ldr	r3, [pc, #72]	; (540c <TIMER0_IRQHandler+0x100>)
    53c4:	839a      	strh	r2, [r3, #28]
    53c6:	e003      	b.n	53d0 <TIMER0_IRQHandler+0xc4>
				} else {
					TXLED_CLR; // hack!
    53c8:	4b13      	ldr	r3, [pc, #76]	; (5418 <TIMER0_IRQHandler+0x10c>)
    53ca:	f44f 7280 	mov.w	r2, #256	; 0x100
    53ce:	601a      	str	r2, [r3, #0]
				}
			}
		}

		/* Keepalive trigger fires at 3200/2^9 = 6.25 Hz */
		if ((next & 0x1ff) == 0)
    53d0:	687b      	ldr	r3, [r7, #4]
    53d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    53d6:	2b00      	cmp	r3, #0
    53d8:	d102      	bne.n	53e0 <TIMER0_IRQHandler+0xd4>
			keepalive_trigger = 1;
    53da:	4b10      	ldr	r3, [pc, #64]	; (541c <TIMER0_IRQHandler+0x110>)
    53dc:	2201      	movs	r2, #1
    53de:	701a      	strb	r2, [r3, #0]

		/* Ack interrupt */
		T0MR0 = 3124 - clock_trim;
    53e0:	4a0f      	ldr	r2, [pc, #60]	; (5420 <TIMER0_IRQHandler+0x114>)
    53e2:	4b10      	ldr	r3, [pc, #64]	; (5424 <TIMER0_IRQHandler+0x118>)
    53e4:	681b      	ldr	r3, [r3, #0]
    53e6:	f5c3 6343 	rsb	r3, r3, #3120	; 0xc30
    53ea:	3304      	adds	r3, #4
    53ec:	6013      	str	r3, [r2, #0]
		clock_trim = 0;
    53ee:	4b0d      	ldr	r3, [pc, #52]	; (5424 <TIMER0_IRQHandler+0x118>)
    53f0:	2200      	movs	r2, #0
    53f2:	601a      	str	r2, [r3, #0]
		T0IR = TIR_MR0_Interrupt;
    53f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    53f8:	2201      	movs	r2, #1
    53fa:	601a      	str	r2, [r3, #0]
	}
}
    53fc:	370c      	adds	r7, #12
    53fe:	46bd      	mov	sp, r7
    5400:	f85d 7b04 	ldr.w	r7, [sp], #4
    5404:	4770      	bx	lr
    5406:	bf00      	nop
    5408:	10000be4 	.word	0x10000be4
    540c:	10000458 	.word	0x10000458
    5410:	1000097c 	.word	0x1000097c
    5414:	1000097d 	.word	0x1000097d
    5418:	2009c03c 	.word	0x2009c03c
    541c:	10000be0 	.word	0x10000be0
    5420:	40004018 	.word	0x40004018
    5424:	10000984 	.word	0x10000984

00005428 <EINT3_IRQHandler>:

/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
//static volatile u8 txledstate = 1;
void EINT3_IRQHandler()
{
    5428:	b480      	push	{r7}
    542a:	af00      	add	r7, sp, #0
	/* TODO - check specific source of shared interrupt */
	IO2IntClr = PIN_GIO6;            // clear interrupt
    542c:	4b0b      	ldr	r3, [pc, #44]	; (545c <EINT3_IRQHandler+0x34>)
    542e:	2204      	movs	r2, #4
    5430:	601a      	str	r2, [r3, #0]
	cs_trigger = 1;                  // signal trigger
    5432:	4b0b      	ldr	r3, [pc, #44]	; (5460 <EINT3_IRQHandler+0x38>)
    5434:	2201      	movs	r2, #1
    5436:	701a      	strb	r2, [r3, #0]
	cs_timestamp = CLK100NS;         // time at trigger
    5438:	4b0a      	ldr	r3, [pc, #40]	; (5464 <EINT3_IRQHandler+0x3c>)
    543a:	681b      	ldr	r3, [r3, #0]
    543c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5440:	f640 4235 	movw	r2, #3125	; 0xc35
    5444:	fb02 f203 	mul.w	r2, r2, r3
    5448:	4b07      	ldr	r3, [pc, #28]	; (5468 <EINT3_IRQHandler+0x40>)
    544a:	681b      	ldr	r3, [r3, #0]
    544c:	4413      	add	r3, r2
    544e:	4a07      	ldr	r2, [pc, #28]	; (546c <EINT3_IRQHandler+0x44>)
    5450:	6013      	str	r3, [r2, #0]
}
    5452:	46bd      	mov	sp, r7
    5454:	f85d 7b04 	ldr.w	r7, [sp], #4
    5458:	4770      	bx	lr
    545a:	bf00      	nop
    545c:	400280ac 	.word	0x400280ac
    5460:	100010c0 	.word	0x100010c0
    5464:	10000be4 	.word	0x10000be4
    5468:	40004008 	.word	0x40004008
    546c:	10000bdc 	.word	0x10000bdc

00005470 <msleep>:

/* Sleep (busy wait) for 'millis' milliseconds. The 'wait' routines in
 * ubertooth.c are matched to the clock setup at boot time and can not
 * be used while the board is running at 100MHz. */
static void msleep(uint32_t millis)
{
    5470:	b5b0      	push	{r4, r5, r7, lr}
    5472:	b084      	sub	sp, #16
    5474:	af00      	add	r7, sp, #0
    5476:	6078      	str	r0, [r7, #4]
	uint32_t stop_at = clkn + millis * 312.5 / 1000;  // millis -> clkn ticks
    5478:	4b1b      	ldr	r3, [pc, #108]	; (54e8 <msleep+0x78>)
    547a:	681b      	ldr	r3, [r3, #0]
    547c:	4618      	mov	r0, r3
    547e:	f006 f9e9 	bl	b854 <__aeabi_ui2d>
    5482:	4604      	mov	r4, r0
    5484:	460d      	mov	r5, r1
    5486:	6878      	ldr	r0, [r7, #4]
    5488:	f006 f9e4 	bl	b854 <__aeabi_ui2d>
    548c:	4602      	mov	r2, r0
    548e:	460b      	mov	r3, r1
    5490:	4610      	mov	r0, r2
    5492:	4619      	mov	r1, r3
    5494:	a312      	add	r3, pc, #72	; (adr r3, 54e0 <msleep+0x70>)
    5496:	e9d3 2300 	ldrd	r2, r3, [r3]
    549a:	f006 fa51 	bl	b940 <__aeabi_dmul>
    549e:	4602      	mov	r2, r0
    54a0:	460b      	mov	r3, r1
    54a2:	4610      	mov	r0, r2
    54a4:	4619      	mov	r1, r3
    54a6:	f04f 0200 	mov.w	r2, #0
    54aa:	4b10      	ldr	r3, [pc, #64]	; (54ec <msleep+0x7c>)
    54ac:	f006 fb72 	bl	bb94 <__aeabi_ddiv>
    54b0:	4602      	mov	r2, r0
    54b2:	460b      	mov	r3, r1
    54b4:	4620      	mov	r0, r4
    54b6:	4629      	mov	r1, r5
    54b8:	f006 f890 	bl	b5dc <__adddf3>
    54bc:	4602      	mov	r2, r0
    54be:	460b      	mov	r3, r1
    54c0:	4610      	mov	r0, r2
    54c2:	4619      	mov	r1, r3
    54c4:	f006 fc4e 	bl	bd64 <__aeabi_d2uiz>
    54c8:	4603      	mov	r3, r0
    54ca:	60fb      	str	r3, [r7, #12]
	do { } while (clkn < stop_at);                   // TODO: handle wrapping
    54cc:	4b06      	ldr	r3, [pc, #24]	; (54e8 <msleep+0x78>)
    54ce:	681a      	ldr	r2, [r3, #0]
    54d0:	68fb      	ldr	r3, [r7, #12]
    54d2:	429a      	cmp	r2, r3
    54d4:	d3fa      	bcc.n	54cc <msleep+0x5c>
}
    54d6:	3710      	adds	r7, #16
    54d8:	46bd      	mov	sp, r7
    54da:	bdb0      	pop	{r4, r5, r7, pc}
    54dc:	f3af 8000 	nop.w
    54e0:	00000000 	.word	0x00000000
    54e4:	40738800 	.word	0x40738800
    54e8:	10000be4 	.word	0x10000be4
    54ec:	408f4000 	.word	0x408f4000

000054f0 <dma_init>:

static void dma_init()
{
    54f0:	b480      	push	{r7}
    54f2:	af00      	add	r7, sp, #0
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    54f4:	4a3f      	ldr	r2, [pc, #252]	; (55f4 <dma_init+0x104>)
    54f6:	4b3f      	ldr	r3, [pc, #252]	; (55f4 <dma_init+0x104>)
    54f8:	681b      	ldr	r3, [r3, #0]
    54fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    54fe:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    5500:	4b3d      	ldr	r3, [pc, #244]	; (55f8 <dma_init+0x108>)
    5502:	2200      	movs	r2, #0
    5504:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5506:	4b3d      	ldr	r3, [pc, #244]	; (55fc <dma_init+0x10c>)
    5508:	2200      	movs	r2, #0
    550a:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    550c:	4b3c      	ldr	r3, [pc, #240]	; (5600 <dma_init+0x110>)
    550e:	2200      	movs	r2, #0
    5510:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5512:	4b3c      	ldr	r3, [pc, #240]	; (5604 <dma_init+0x114>)
    5514:	2200      	movs	r2, #0
    5516:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    5518:	4b3b      	ldr	r3, [pc, #236]	; (5608 <dma_init+0x118>)
    551a:	2200      	movs	r2, #0
    551c:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    551e:	4b3b      	ldr	r3, [pc, #236]	; (560c <dma_init+0x11c>)
    5520:	2200      	movs	r2, #0
    5522:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    5524:	4b3a      	ldr	r3, [pc, #232]	; (5610 <dma_init+0x120>)
    5526:	2200      	movs	r2, #0
    5528:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    552a:	4b3a      	ldr	r3, [pc, #232]	; (5614 <dma_init+0x124>)
    552c:	2200      	movs	r2, #0
    552e:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5530:	4b39      	ldr	r3, [pc, #228]	; (5618 <dma_init+0x128>)
    5532:	22ff      	movs	r2, #255	; 0xff
    5534:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5536:	4b39      	ldr	r3, [pc, #228]	; (561c <dma_init+0x12c>)
    5538:	22ff      	movs	r2, #255	; 0xff
    553a:	601a      	str	r2, [r3, #0]

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
    553c:	4b38      	ldr	r3, [pc, #224]	; (5620 <dma_init+0x130>)
    553e:	4a39      	ldr	r2, [pc, #228]	; (5624 <dma_init+0x134>)
    5540:	601a      	str	r2, [r3, #0]
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
    5542:	4a39      	ldr	r2, [pc, #228]	; (5628 <dma_init+0x138>)
    5544:	4b36      	ldr	r3, [pc, #216]	; (5620 <dma_init+0x130>)
    5546:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
    5548:	4a38      	ldr	r2, [pc, #224]	; (562c <dma_init+0x13c>)
    554a:	4b35      	ldr	r3, [pc, #212]	; (5620 <dma_init+0x130>)
    554c:	609a      	str	r2, [r3, #8]
	rx_dma_lli1.control = (DMA_SIZE) |
    554e:	4b34      	ldr	r3, [pc, #208]	; (5620 <dma_init+0x130>)
    5550:	4a37      	ldr	r2, [pc, #220]	; (5630 <dma_init+0x140>)
    5552:	60da      	str	r2, [r3, #12]
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
    5554:	4b35      	ldr	r3, [pc, #212]	; (562c <dma_init+0x13c>)
    5556:	4a33      	ldr	r2, [pc, #204]	; (5624 <dma_init+0x134>)
    5558:	601a      	str	r2, [r3, #0]
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
    555a:	4a36      	ldr	r2, [pc, #216]	; (5634 <dma_init+0x144>)
    555c:	4b33      	ldr	r3, [pc, #204]	; (562c <dma_init+0x13c>)
    555e:	605a      	str	r2, [r3, #4]
	rx_dma_lli2.next_lli = (u32)&rx_dma_lli1;
    5560:	4a2f      	ldr	r2, [pc, #188]	; (5620 <dma_init+0x130>)
    5562:	4b32      	ldr	r3, [pc, #200]	; (562c <dma_init+0x13c>)
    5564:	609a      	str	r2, [r3, #8]
	rx_dma_lli2.control = (DMA_SIZE) |
    5566:	4b31      	ldr	r3, [pc, #196]	; (562c <dma_init+0x13c>)
    5568:	4a31      	ldr	r2, [pc, #196]	; (5630 <dma_init+0x140>)
    556a:	60da      	str	r2, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* disable DMA interrupts */
	ICER0 = ICER0_ICE_DMA;
    556c:	4b32      	ldr	r3, [pc, #200]	; (5638 <dma_init+0x148>)
    556e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5572:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    5574:	4b31      	ldr	r3, [pc, #196]	; (563c <dma_init+0x14c>)
    5576:	2201      	movs	r2, #1
    5578:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    557a:	bf00      	nop
    557c:	4b2f      	ldr	r3, [pc, #188]	; (563c <dma_init+0x14c>)
    557e:	681b      	ldr	r3, [r3, #0]
    5580:	f003 0301 	and.w	r3, r3, #1
    5584:	2b00      	cmp	r3, #0
    5586:	d0f9      	beq.n	557c <dma_init+0x8c>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    5588:	4a2d      	ldr	r2, [pc, #180]	; (5640 <dma_init+0x150>)
    558a:	4b25      	ldr	r3, [pc, #148]	; (5620 <dma_init+0x130>)
    558c:	681b      	ldr	r3, [r3, #0]
    558e:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    5590:	4a2c      	ldr	r2, [pc, #176]	; (5644 <dma_init+0x154>)
    5592:	4b23      	ldr	r3, [pc, #140]	; (5620 <dma_init+0x130>)
    5594:	685b      	ldr	r3, [r3, #4]
    5596:	6013      	str	r3, [r2, #0]
	DMACC0LLI = rx_dma_lli1.next_lli;
    5598:	4a2b      	ldr	r2, [pc, #172]	; (5648 <dma_init+0x158>)
    559a:	4b21      	ldr	r3, [pc, #132]	; (5620 <dma_init+0x130>)
    559c:	689b      	ldr	r3, [r3, #8]
    559e:	6013      	str	r3, [r2, #0]
	DMACC0Control = rx_dma_lli1.control;
    55a0:	4a2a      	ldr	r2, [pc, #168]	; (564c <dma_init+0x15c>)
    55a2:	4b1f      	ldr	r3, [pc, #124]	; (5620 <dma_init+0x130>)
    55a4:	68db      	ldr	r3, [r3, #12]
    55a6:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    55a8:	4b13      	ldr	r3, [pc, #76]	; (55f8 <dma_init+0x108>)
    55aa:	f24d 0206 	movw	r2, #53254	; 0xd006
    55ae:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    55b0:	4b27      	ldr	r3, [pc, #156]	; (5650 <dma_init+0x160>)
    55b2:	681b      	ldr	r3, [r3, #0]
    55b4:	0d1b      	lsrs	r3, r3, #20
    55b6:	b2db      	uxtb	r3, r3
    55b8:	4a26      	ldr	r2, [pc, #152]	; (5654 <dma_init+0x164>)
    55ba:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    55bc:	4b24      	ldr	r3, [pc, #144]	; (5650 <dma_init+0x160>)
    55be:	681b      	ldr	r3, [r3, #0]
    55c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    55c4:	f640 4235 	movw	r2, #3125	; 0xc35
    55c8:	fb02 f203 	mul.w	r2, r2, r3
    55cc:	4b22      	ldr	r3, [pc, #136]	; (5658 <dma_init+0x168>)
    55ce:	681b      	ldr	r3, [r3, #0]
    55d0:	4413      	add	r3, r2
    55d2:	4a22      	ldr	r2, [pc, #136]	; (565c <dma_init+0x16c>)
    55d4:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    55d6:	4b22      	ldr	r3, [pc, #136]	; (5660 <dma_init+0x170>)
    55d8:	881b      	ldrh	r3, [r3, #0]
    55da:	b29a      	uxth	r2, r3
    55dc:	4b21      	ldr	r3, [pc, #132]	; (5664 <dma_init+0x174>)
    55de:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    55e0:	4b21      	ldr	r3, [pc, #132]	; (5668 <dma_init+0x178>)
    55e2:	2200      	movs	r2, #0
    55e4:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    55e6:	4b21      	ldr	r3, [pc, #132]	; (566c <dma_init+0x17c>)
    55e8:	2200      	movs	r2, #0
    55ea:	601a      	str	r2, [r3, #0]
}
    55ec:	46bd      	mov	sp, r7
    55ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    55f2:	4770      	bx	lr
    55f4:	400fc0c4 	.word	0x400fc0c4
    55f8:	50004110 	.word	0x50004110
    55fc:	50004130 	.word	0x50004130
    5600:	50004150 	.word	0x50004150
    5604:	50004170 	.word	0x50004170
    5608:	50004190 	.word	0x50004190
    560c:	500041b0 	.word	0x500041b0
    5610:	500041d0 	.word	0x500041d0
    5614:	500041f0 	.word	0x500041f0
    5618:	50004008 	.word	0x50004008
    561c:	50004010 	.word	0x50004010
    5620:	1000106c 	.word	0x1000106c
    5624:	40030008 	.word	0x40030008
    5628:	10001088 	.word	0x10001088
    562c:	10000bcc 	.word	0x10000bcc
    5630:	88009032 	.word	0x88009032
    5634:	10001034 	.word	0x10001034
    5638:	e000e180 	.word	0xe000e180
    563c:	50004030 	.word	0x50004030
    5640:	50004100 	.word	0x50004100
    5644:	50004104 	.word	0x50004104
    5648:	50004108 	.word	0x50004108
    564c:	5000410c 	.word	0x5000410c
    5650:	10000be4 	.word	0x10000be4
    5654:	10000bec 	.word	0x10000bec
    5658:	40004008 	.word	0x40004008
    565c:	10001028 	.word	0x10001028
    5660:	1000049c 	.word	0x1000049c
    5664:	1000098a 	.word	0x1000098a
    5668:	10000b00 	.word	0x10000b00
    566c:	100010bc 	.word	0x100010bc

00005670 <dma_init_le>:

static void dma_init_le()
{
    5670:	b480      	push	{r7}
    5672:	b083      	sub	sp, #12
    5674:	af00      	add	r7, sp, #0
	int i;

	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    5676:	4a4b      	ldr	r2, [pc, #300]	; (57a4 <dma_init_le+0x134>)
    5678:	4b4a      	ldr	r3, [pc, #296]	; (57a4 <dma_init_le+0x134>)
    567a:	681b      	ldr	r3, [r3, #0]
    567c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    5680:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    5682:	4b49      	ldr	r3, [pc, #292]	; (57a8 <dma_init_le+0x138>)
    5684:	2200      	movs	r2, #0
    5686:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5688:	4b48      	ldr	r3, [pc, #288]	; (57ac <dma_init_le+0x13c>)
    568a:	2200      	movs	r2, #0
    568c:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    568e:	4b48      	ldr	r3, [pc, #288]	; (57b0 <dma_init_le+0x140>)
    5690:	2200      	movs	r2, #0
    5692:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5694:	4b47      	ldr	r3, [pc, #284]	; (57b4 <dma_init_le+0x144>)
    5696:	2200      	movs	r2, #0
    5698:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    569a:	4b47      	ldr	r3, [pc, #284]	; (57b8 <dma_init_le+0x148>)
    569c:	2200      	movs	r2, #0
    569e:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    56a0:	4b46      	ldr	r3, [pc, #280]	; (57bc <dma_init_le+0x14c>)
    56a2:	2200      	movs	r2, #0
    56a4:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    56a6:	4b46      	ldr	r3, [pc, #280]	; (57c0 <dma_init_le+0x150>)
    56a8:	2200      	movs	r2, #0
    56aa:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    56ac:	4b45      	ldr	r3, [pc, #276]	; (57c4 <dma_init_le+0x154>)
    56ae:	2200      	movs	r2, #0
    56b0:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    56b2:	4b45      	ldr	r3, [pc, #276]	; (57c8 <dma_init_le+0x158>)
    56b4:	22ff      	movs	r2, #255	; 0xff
    56b6:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    56b8:	4b44      	ldr	r3, [pc, #272]	; (57cc <dma_init_le+0x15c>)
    56ba:	22ff      	movs	r2, #255	; 0xff
    56bc:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    56be:	4b44      	ldr	r3, [pc, #272]	; (57d0 <dma_init_le+0x160>)
    56c0:	2201      	movs	r2, #1
    56c2:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    56c4:	bf00      	nop
    56c6:	4b42      	ldr	r3, [pc, #264]	; (57d0 <dma_init_le+0x160>)
    56c8:	681b      	ldr	r3, [r3, #0]
    56ca:	f003 0301 	and.w	r3, r3, #1
    56ce:	2b00      	cmp	r3, #0
    56d0:	d0f9      	beq.n	56c6 <dma_init_le+0x56>

	for (i = 0; i < 11; ++i) {
    56d2:	2300      	movs	r3, #0
    56d4:	607b      	str	r3, [r7, #4]
    56d6:	e02a      	b.n	572e <dma_init_le+0xbe>
		le_dma_lli[i].src = (u32)&(DIO_SSP_DR);
    56d8:	4a3e      	ldr	r2, [pc, #248]	; (57d4 <dma_init_le+0x164>)
    56da:	687b      	ldr	r3, [r7, #4]
    56dc:	011b      	lsls	r3, r3, #4
    56de:	4413      	add	r3, r2
    56e0:	4a3d      	ldr	r2, [pc, #244]	; (57d8 <dma_init_le+0x168>)
    56e2:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].dest = (u32)&rxbuf1[4 * i];
    56e4:	687b      	ldr	r3, [r7, #4]
    56e6:	009b      	lsls	r3, r3, #2
    56e8:	4a3c      	ldr	r2, [pc, #240]	; (57dc <dma_init_le+0x16c>)
    56ea:	4413      	add	r3, r2
    56ec:	4619      	mov	r1, r3
    56ee:	4a39      	ldr	r2, [pc, #228]	; (57d4 <dma_init_le+0x164>)
    56f0:	687b      	ldr	r3, [r7, #4]
    56f2:	011b      	lsls	r3, r3, #4
    56f4:	4413      	add	r3, r2
    56f6:	6059      	str	r1, [r3, #4]
		le_dma_lli[i].next_lli = i < 10 ? (u32)&le_dma_lli[i+1] : 0;
    56f8:	687b      	ldr	r3, [r7, #4]
    56fa:	2b09      	cmp	r3, #9
    56fc:	dc06      	bgt.n	570c <dma_init_le+0x9c>
    56fe:	687b      	ldr	r3, [r7, #4]
    5700:	3301      	adds	r3, #1
    5702:	011b      	lsls	r3, r3, #4
    5704:	4a33      	ldr	r2, [pc, #204]	; (57d4 <dma_init_le+0x164>)
    5706:	4413      	add	r3, r2
    5708:	461a      	mov	r2, r3
    570a:	e000      	b.n	570e <dma_init_le+0x9e>
    570c:	2200      	movs	r2, #0
    570e:	4931      	ldr	r1, [pc, #196]	; (57d4 <dma_init_le+0x164>)
    5710:	687b      	ldr	r3, [r7, #4]
    5712:	011b      	lsls	r3, r3, #4
    5714:	440b      	add	r3, r1
    5716:	3308      	adds	r3, #8
    5718:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].control = 4 |
    571a:	4a2e      	ldr	r2, [pc, #184]	; (57d4 <dma_init_le+0x164>)
    571c:	687b      	ldr	r3, [r7, #4]
    571e:	011b      	lsls	r3, r3, #4
    5720:	4413      	add	r3, r2
    5722:	3308      	adds	r3, #8
    5724:	4a2e      	ldr	r2, [pc, #184]	; (57e0 <dma_init_le+0x170>)
    5726:	605a      	str	r2, [r3, #4]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    5728:	687b      	ldr	r3, [r7, #4]
    572a:	3301      	adds	r3, #1
    572c:	607b      	str	r3, [r7, #4]
    572e:	687b      	ldr	r3, [r7, #4]
    5730:	2b0a      	cmp	r3, #10
    5732:	ddd1      	ble.n	56d8 <dma_init_le+0x68>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    5734:	4a2b      	ldr	r2, [pc, #172]	; (57e4 <dma_init_le+0x174>)
    5736:	4b27      	ldr	r3, [pc, #156]	; (57d4 <dma_init_le+0x164>)
    5738:	681b      	ldr	r3, [r3, #0]
    573a:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    573c:	4a2a      	ldr	r2, [pc, #168]	; (57e8 <dma_init_le+0x178>)
    573e:	4b25      	ldr	r3, [pc, #148]	; (57d4 <dma_init_le+0x164>)
    5740:	685b      	ldr	r3, [r3, #4]
    5742:	6013      	str	r3, [r2, #0]
	DMACC0LLI = le_dma_lli[0].next_lli;
    5744:	4a29      	ldr	r2, [pc, #164]	; (57ec <dma_init_le+0x17c>)
    5746:	4b23      	ldr	r3, [pc, #140]	; (57d4 <dma_init_le+0x164>)
    5748:	689b      	ldr	r3, [r3, #8]
    574a:	6013      	str	r3, [r2, #0]
	DMACC0Control = le_dma_lli[0].control;
    574c:	4a28      	ldr	r2, [pc, #160]	; (57f0 <dma_init_le+0x180>)
    574e:	4b21      	ldr	r3, [pc, #132]	; (57d4 <dma_init_le+0x164>)
    5750:	68db      	ldr	r3, [r3, #12]
    5752:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    5754:	4b14      	ldr	r3, [pc, #80]	; (57a8 <dma_init_le+0x138>)
    5756:	f24d 0206 	movw	r2, #53254	; 0xd006
    575a:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    575c:	4b25      	ldr	r3, [pc, #148]	; (57f4 <dma_init_le+0x184>)
    575e:	681b      	ldr	r3, [r3, #0]
    5760:	0d1b      	lsrs	r3, r3, #20
    5762:	b2db      	uxtb	r3, r3
    5764:	4a24      	ldr	r2, [pc, #144]	; (57f8 <dma_init_le+0x188>)
    5766:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    5768:	4b22      	ldr	r3, [pc, #136]	; (57f4 <dma_init_le+0x184>)
    576a:	681b      	ldr	r3, [r3, #0]
    576c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5770:	f640 4235 	movw	r2, #3125	; 0xc35
    5774:	fb02 f203 	mul.w	r2, r2, r3
    5778:	4b20      	ldr	r3, [pc, #128]	; (57fc <dma_init_le+0x18c>)
    577a:	681b      	ldr	r3, [r3, #0]
    577c:	4413      	add	r3, r2
    577e:	4a20      	ldr	r2, [pc, #128]	; (5800 <dma_init_le+0x190>)
    5780:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    5782:	4b20      	ldr	r3, [pc, #128]	; (5804 <dma_init_le+0x194>)
    5784:	881b      	ldrh	r3, [r3, #0]
    5786:	b29a      	uxth	r2, r3
    5788:	4b1f      	ldr	r3, [pc, #124]	; (5808 <dma_init_le+0x198>)
    578a:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    578c:	4b1f      	ldr	r3, [pc, #124]	; (580c <dma_init_le+0x19c>)
    578e:	2200      	movs	r2, #0
    5790:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    5792:	4b1f      	ldr	r3, [pc, #124]	; (5810 <dma_init_le+0x1a0>)
    5794:	2200      	movs	r2, #0
    5796:	601a      	str	r2, [r3, #0]
}
    5798:	370c      	adds	r7, #12
    579a:	46bd      	mov	sp, r7
    579c:	f85d 7b04 	ldr.w	r7, [sp], #4
    57a0:	4770      	bx	lr
    57a2:	bf00      	nop
    57a4:	400fc0c4 	.word	0x400fc0c4
    57a8:	50004110 	.word	0x50004110
    57ac:	50004130 	.word	0x50004130
    57b0:	50004150 	.word	0x50004150
    57b4:	50004170 	.word	0x50004170
    57b8:	50004190 	.word	0x50004190
    57bc:	500041b0 	.word	0x500041b0
    57c0:	500041d0 	.word	0x500041d0
    57c4:	500041f0 	.word	0x500041f0
    57c8:	50004008 	.word	0x50004008
    57cc:	50004010 	.word	0x50004010
    57d0:	50004030 	.word	0x50004030
    57d4:	10000b08 	.word	0x10000b08
    57d8:	40030008 	.word	0x40030008
    57dc:	10001088 	.word	0x10001088
    57e0:	88001004 	.word	0x88001004
    57e4:	50004100 	.word	0x50004100
    57e8:	50004104 	.word	0x50004104
    57ec:	50004108 	.word	0x50004108
    57f0:	5000410c 	.word	0x5000410c
    57f4:	10000be4 	.word	0x10000be4
    57f8:	10000bec 	.word	0x10000bec
    57fc:	40004008 	.word	0x40004008
    5800:	10001028 	.word	0x10001028
    5804:	1000049c 	.word	0x1000049c
    5808:	1000098a 	.word	0x1000098a
    580c:	10000b00 	.word	0x10000b00
    5810:	100010bc 	.word	0x100010bc

00005814 <bt_stream_dma_handler>:

void bt_stream_dma_handler(void) {
    5814:	b480      	push	{r7}
    5816:	af00      	add	r7, sp, #0
	idle_buf_clkn_high = active_buf_clkn_high;
    5818:	4b25      	ldr	r3, [pc, #148]	; (58b0 <bt_stream_dma_handler+0x9c>)
    581a:	681b      	ldr	r3, [r3, #0]
    581c:	4a25      	ldr	r2, [pc, #148]	; (58b4 <bt_stream_dma_handler+0xa0>)
    581e:	6013      	str	r3, [r2, #0]
	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5820:	4b25      	ldr	r3, [pc, #148]	; (58b8 <bt_stream_dma_handler+0xa4>)
    5822:	681b      	ldr	r3, [r3, #0]
    5824:	0d1b      	lsrs	r3, r3, #20
    5826:	b2db      	uxtb	r3, r3
    5828:	4a21      	ldr	r2, [pc, #132]	; (58b0 <bt_stream_dma_handler+0x9c>)
    582a:	6013      	str	r3, [r2, #0]

	idle_buf_clk100ns = active_buf_clk100ns;
    582c:	4b23      	ldr	r3, [pc, #140]	; (58bc <bt_stream_dma_handler+0xa8>)
    582e:	681b      	ldr	r3, [r3, #0]
    5830:	4a23      	ldr	r2, [pc, #140]	; (58c0 <bt_stream_dma_handler+0xac>)
    5832:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    5834:	4b20      	ldr	r3, [pc, #128]	; (58b8 <bt_stream_dma_handler+0xa4>)
    5836:	681b      	ldr	r3, [r3, #0]
    5838:	f3c3 0313 	ubfx	r3, r3, #0, #20
    583c:	f640 4235 	movw	r2, #3125	; 0xc35
    5840:	fb02 f203 	mul.w	r2, r2, r3
    5844:	4b1f      	ldr	r3, [pc, #124]	; (58c4 <bt_stream_dma_handler+0xb0>)
    5846:	681b      	ldr	r3, [r3, #0]
    5848:	4413      	add	r3, r2
    584a:	4a1c      	ldr	r2, [pc, #112]	; (58bc <bt_stream_dma_handler+0xa8>)
    584c:	6013      	str	r3, [r2, #0]

	idle_buf_channel = active_buf_channel;
    584e:	4b1e      	ldr	r3, [pc, #120]	; (58c8 <bt_stream_dma_handler+0xb4>)
    5850:	881b      	ldrh	r3, [r3, #0]
    5852:	b29a      	uxth	r2, r3
    5854:	4b1d      	ldr	r3, [pc, #116]	; (58cc <bt_stream_dma_handler+0xb8>)
    5856:	801a      	strh	r2, [r3, #0]
	active_buf_channel = channel;
    5858:	4b1d      	ldr	r3, [pc, #116]	; (58d0 <bt_stream_dma_handler+0xbc>)
    585a:	881b      	ldrh	r3, [r3, #0]
    585c:	b29a      	uxth	r2, r3
    585e:	4b1a      	ldr	r3, [pc, #104]	; (58c8 <bt_stream_dma_handler+0xb4>)
    5860:	801a      	strh	r2, [r3, #0]

	/* interrupt on channel 0 */
	if (DMACIntStat & (1 << 0)) {
    5862:	4b1c      	ldr	r3, [pc, #112]	; (58d4 <bt_stream_dma_handler+0xc0>)
    5864:	681b      	ldr	r3, [r3, #0]
    5866:	f003 0301 	and.w	r3, r3, #1
    586a:	2b00      	cmp	r3, #0
    586c:	d01b      	beq.n	58a6 <bt_stream_dma_handler+0x92>
		if (DMACIntTCStat & (1 << 0)) {
    586e:	4b1a      	ldr	r3, [pc, #104]	; (58d8 <bt_stream_dma_handler+0xc4>)
    5870:	681b      	ldr	r3, [r3, #0]
    5872:	f003 0301 	and.w	r3, r3, #1
    5876:	2b00      	cmp	r3, #0
    5878:	d007      	beq.n	588a <bt_stream_dma_handler+0x76>
			DMACIntTCClear = (1 << 0);
    587a:	4b18      	ldr	r3, [pc, #96]	; (58dc <bt_stream_dma_handler+0xc8>)
    587c:	2201      	movs	r2, #1
    587e:	601a      	str	r2, [r3, #0]
			++rx_tc;
    5880:	4b17      	ldr	r3, [pc, #92]	; (58e0 <bt_stream_dma_handler+0xcc>)
    5882:	681b      	ldr	r3, [r3, #0]
    5884:	3301      	adds	r3, #1
    5886:	4a16      	ldr	r2, [pc, #88]	; (58e0 <bt_stream_dma_handler+0xcc>)
    5888:	6013      	str	r3, [r2, #0]
		}
		if (DMACIntErrStat & (1 << 0)) {
    588a:	4b16      	ldr	r3, [pc, #88]	; (58e4 <bt_stream_dma_handler+0xd0>)
    588c:	681b      	ldr	r3, [r3, #0]
    588e:	f003 0301 	and.w	r3, r3, #1
    5892:	2b00      	cmp	r3, #0
    5894:	d007      	beq.n	58a6 <bt_stream_dma_handler+0x92>
			DMACIntErrClr = (1 << 0);
    5896:	4b14      	ldr	r3, [pc, #80]	; (58e8 <bt_stream_dma_handler+0xd4>)
    5898:	2201      	movs	r2, #1
    589a:	601a      	str	r2, [r3, #0]
			++rx_err;
    589c:	4b13      	ldr	r3, [pc, #76]	; (58ec <bt_stream_dma_handler+0xd8>)
    589e:	681b      	ldr	r3, [r3, #0]
    58a0:	3301      	adds	r3, #1
    58a2:	4a12      	ldr	r2, [pc, #72]	; (58ec <bt_stream_dma_handler+0xd8>)
    58a4:	6013      	str	r3, [r2, #0]
		}
	}
}
    58a6:	46bd      	mov	sp, r7
    58a8:	f85d 7b04 	ldr.w	r7, [sp], #4
    58ac:	4770      	bx	lr
    58ae:	bf00      	nop
    58b0:	10000bec 	.word	0x10000bec
    58b4:	10001030 	.word	0x10001030
    58b8:	10000be4 	.word	0x10000be4
    58bc:	10001028 	.word	0x10001028
    58c0:	10000bc8 	.word	0x10000bc8
    58c4:	40004008 	.word	0x40004008
    58c8:	1000098a 	.word	0x1000098a
    58cc:	10000988 	.word	0x10000988
    58d0:	1000049c 	.word	0x1000049c
    58d4:	50004000 	.word	0x50004000
    58d8:	50004004 	.word	0x50004004
    58dc:	50004008 	.word	0x50004008
    58e0:	10000b00 	.word	0x10000b00
    58e4:	5000400c 	.word	0x5000400c
    58e8:	50004010 	.word	0x50004010
    58ec:	100010bc 	.word	0x100010bc

000058f0 <DMA_IRQHandler>:

void DMA_IRQHandler()
{
    58f0:	b580      	push	{r7, lr}
    58f2:	af00      	add	r7, sp, #0
	switch (mode) {
    58f4:	4b15      	ldr	r3, [pc, #84]	; (594c <DMA_IRQHandler+0x5c>)
    58f6:	781b      	ldrb	r3, [r3, #0]
    58f8:	b2db      	uxtb	r3, r3
    58fa:	3b01      	subs	r3, #1
    58fc:	2b0e      	cmp	r3, #14
    58fe:	d824      	bhi.n	594a <DMA_IRQHandler+0x5a>
    5900:	a201      	add	r2, pc, #4	; (adr r2, 5908 <DMA_IRQHandler+0x18>)
    5902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5906:	bf00      	nop
    5908:	00005945 	.word	0x00005945
    590c:	0000594b 	.word	0x0000594b
    5910:	0000594b 	.word	0x0000594b
    5914:	00005945 	.word	0x00005945
    5918:	0000594b 	.word	0x0000594b
    591c:	0000594b 	.word	0x0000594b
    5920:	0000594b 	.word	0x0000594b
    5924:	00005945 	.word	0x00005945
    5928:	00005945 	.word	0x00005945
    592c:	00005945 	.word	0x00005945
    5930:	0000594b 	.word	0x0000594b
    5934:	00005945 	.word	0x00005945
    5938:	0000594b 	.word	0x0000594b
    593c:	00005945 	.word	0x00005945
    5940:	00005945 	.word	0x00005945
		case MODE_SPECAN:
		case MODE_BT_FOLLOW:
		case MODE_BT_FOLLOW_LE:
		case MODE_BT_PROMISC_LE:
		case MODE_BT_SLAVE_LE:
			bt_stream_dma_handler();
    5944:	f7ff ff66 	bl	5814 <bt_stream_dma_handler>
			break;
    5948:	bf00      	nop
	}
}
    594a:	bd80      	pop	{r7, pc}
    594c:	10000a3e 	.word	0x10000a3e

00005950 <dio_ssp_start>:

static void dio_ssp_start()
{
    5950:	b480      	push	{r7}
    5952:	af00      	add	r7, sp, #0
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    5954:	4b10      	ldr	r3, [pc, #64]	; (5998 <dio_ssp_start+0x48>)
    5956:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    595a:	601a      	str	r2, [r3, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    595c:	4a0f      	ldr	r2, [pc, #60]	; (599c <dio_ssp_start+0x4c>)
    595e:	4b0f      	ldr	r3, [pc, #60]	; (599c <dio_ssp_start+0x4c>)
    5960:	681b      	ldr	r3, [r3, #0]
    5962:	f043 0301 	orr.w	r3, r3, #1
    5966:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    5968:	4a0d      	ldr	r2, [pc, #52]	; (59a0 <dio_ssp_start+0x50>)
    596a:	4b0d      	ldr	r3, [pc, #52]	; (59a0 <dio_ssp_start+0x50>)
    596c:	681b      	ldr	r3, [r3, #0]
    596e:	f043 0302 	orr.w	r3, r3, #2
    5972:	6013      	str	r3, [r2, #0]
	
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
    5974:	4a0b      	ldr	r2, [pc, #44]	; (59a4 <dio_ssp_start+0x54>)
    5976:	4b0b      	ldr	r3, [pc, #44]	; (59a4 <dio_ssp_start+0x54>)
    5978:	681b      	ldr	r3, [r3, #0]
    597a:	f043 0301 	orr.w	r3, r3, #1
    597e:	6013      	str	r3, [r2, #0]
	ISER0 = ISER0_ISE_DMA;
    5980:	4b09      	ldr	r3, [pc, #36]	; (59a8 <dio_ssp_start+0x58>)
    5982:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5986:	601a      	str	r2, [r3, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
    5988:	4b08      	ldr	r3, [pc, #32]	; (59ac <dio_ssp_start+0x5c>)
    598a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    598e:	601a      	str	r2, [r3, #0]
}
    5990:	46bd      	mov	sp, r7
    5992:	f85d 7b04 	ldr.w	r7, [sp], #4
    5996:	4770      	bx	lr
    5998:	2009c098 	.word	0x2009c098
    599c:	40030024 	.word	0x40030024
    59a0:	40030004 	.word	0x40030004
    59a4:	50004110 	.word	0x50004110
    59a8:	e000e100 	.word	0xe000e100
    59ac:	2009c09c 	.word	0x2009c09c

000059b0 <dio_ssp_stop>:

static void dio_ssp_stop()
{
    59b0:	b480      	push	{r7}
    59b2:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    59b4:	4b21      	ldr	r3, [pc, #132]	; (5a3c <dio_ssp_stop+0x8c>)
    59b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    59ba:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    59bc:	4a20      	ldr	r2, [pc, #128]	; (5a40 <dio_ssp_stop+0x90>)
    59be:	4b20      	ldr	r3, [pc, #128]	; (5a40 <dio_ssp_stop+0x90>)
    59c0:	681b      	ldr	r3, [r3, #0]
    59c2:	f023 0301 	bic.w	r3, r3, #1
    59c6:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    59c8:	4a1e      	ldr	r2, [pc, #120]	; (5a44 <dio_ssp_stop+0x94>)
    59ca:	4b1e      	ldr	r3, [pc, #120]	; (5a44 <dio_ssp_stop+0x94>)
    59cc:	681b      	ldr	r3, [r3, #0]
    59ce:	f023 0302 	bic.w	r3, r3, #2
    59d2:	6013      	str	r3, [r2, #0]

	// disable DMA engine:
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 607

	// disable DMA interrupts
	ICER0 = ICER0_ICE_DMA;
    59d4:	4b1c      	ldr	r3, [pc, #112]	; (5a48 <dio_ssp_stop+0x98>)
    59d6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    59da:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    59dc:	4b1b      	ldr	r3, [pc, #108]	; (5a4c <dio_ssp_stop+0x9c>)
    59de:	2200      	movs	r2, #0
    59e0:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    59e2:	4b1b      	ldr	r3, [pc, #108]	; (5a50 <dio_ssp_stop+0xa0>)
    59e4:	2200      	movs	r2, #0
    59e6:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    59e8:	4b1a      	ldr	r3, [pc, #104]	; (5a54 <dio_ssp_stop+0xa4>)
    59ea:	2200      	movs	r2, #0
    59ec:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    59ee:	4b1a      	ldr	r3, [pc, #104]	; (5a58 <dio_ssp_stop+0xa8>)
    59f0:	2200      	movs	r2, #0
    59f2:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    59f4:	4b19      	ldr	r3, [pc, #100]	; (5a5c <dio_ssp_stop+0xac>)
    59f6:	2200      	movs	r2, #0
    59f8:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    59fa:	4b19      	ldr	r3, [pc, #100]	; (5a60 <dio_ssp_stop+0xb0>)
    59fc:	2200      	movs	r2, #0
    59fe:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    5a00:	4b18      	ldr	r3, [pc, #96]	; (5a64 <dio_ssp_stop+0xb4>)
    5a02:	2200      	movs	r2, #0
    5a04:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    5a06:	4b18      	ldr	r3, [pc, #96]	; (5a68 <dio_ssp_stop+0xb8>)
    5a08:	2200      	movs	r2, #0
    5a0a:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5a0c:	4b17      	ldr	r3, [pc, #92]	; (5a6c <dio_ssp_stop+0xbc>)
    5a0e:	22ff      	movs	r2, #255	; 0xff
    5a10:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5a12:	4b17      	ldr	r3, [pc, #92]	; (5a70 <dio_ssp_stop+0xc0>)
    5a14:	22ff      	movs	r2, #255	; 0xff
    5a16:	601a      	str	r2, [r3, #0]

	// Disable the DMA controller by writing 0 to the DMA Enable bit in the DMACConfig
	// register.
	DMACConfig &= ~DMACConfig_E;
    5a18:	4a16      	ldr	r2, [pc, #88]	; (5a74 <dio_ssp_stop+0xc4>)
    5a1a:	4b16      	ldr	r3, [pc, #88]	; (5a74 <dio_ssp_stop+0xc4>)
    5a1c:	681b      	ldr	r3, [r3, #0]
    5a1e:	f023 0301 	bic.w	r3, r3, #1
    5a22:	6013      	str	r3, [r2, #0]
	while (DMACConfig & DMACConfig_E);
    5a24:	bf00      	nop
    5a26:	4b13      	ldr	r3, [pc, #76]	; (5a74 <dio_ssp_stop+0xc4>)
    5a28:	681b      	ldr	r3, [r3, #0]
    5a2a:	f003 0301 	and.w	r3, r3, #1
    5a2e:	2b00      	cmp	r3, #0
    5a30:	d1f9      	bne.n	5a26 <dio_ssp_stop+0x76>
}
    5a32:	46bd      	mov	sp, r7
    5a34:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a38:	4770      	bx	lr
    5a3a:	bf00      	nop
    5a3c:	2009c098 	.word	0x2009c098
    5a40:	40030024 	.word	0x40030024
    5a44:	40030004 	.word	0x40030004
    5a48:	e000e180 	.word	0xe000e180
    5a4c:	50004110 	.word	0x50004110
    5a50:	50004130 	.word	0x50004130
    5a54:	50004150 	.word	0x50004150
    5a58:	50004170 	.word	0x50004170
    5a5c:	50004190 	.word	0x50004190
    5a60:	500041b0 	.word	0x500041b0
    5a64:	500041d0 	.word	0x500041d0
    5a68:	500041f0 	.word	0x500041f0
    5a6c:	50004008 	.word	0x50004008
    5a70:	50004010 	.word	0x50004010
    5a74:	50004030 	.word	0x50004030

00005a78 <cc2400_idle>:

static void cc2400_idle()
{
    5a78:	b580      	push	{r7, lr}
    5a7a:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    5a7c:	2064      	movs	r0, #100	; 0x64
    5a7e:	f004 fcb1 	bl	a3e4 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5a82:	bf00      	nop
    5a84:	f004 fca4 	bl	a3d0 <cc2400_status>
    5a88:	4603      	mov	r3, r0
    5a8a:	f003 0304 	and.w	r3, r3, #4
    5a8e:	2b00      	cmp	r3, #0
    5a90:	d1f8      	bne.n	5a84 <cc2400_idle+0xc>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5a92:	4b0a      	ldr	r3, [pc, #40]	; (5abc <cc2400_idle+0x44>)
    5a94:	2280      	movs	r2, #128	; 0x80
    5a96:	601a      	str	r2, [r3, #0]
	HGM_CLR;
    5a98:	4b08      	ldr	r3, [pc, #32]	; (5abc <cc2400_idle+0x44>)
    5a9a:	f44f 7280 	mov.w	r2, #256	; 0x100
    5a9e:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    5aa0:	4b07      	ldr	r3, [pc, #28]	; (5ac0 <cc2400_idle+0x48>)
    5aa2:	2210      	movs	r2, #16
    5aa4:	601a      	str	r2, [r3, #0]
	TXLED_CLR;
    5aa6:	4b06      	ldr	r3, [pc, #24]	; (5ac0 <cc2400_idle+0x48>)
    5aa8:	f44f 7280 	mov.w	r2, #256	; 0x100
    5aac:	601a      	str	r2, [r3, #0]
	USRLED_CLR;
    5aae:	4b04      	ldr	r3, [pc, #16]	; (5ac0 <cc2400_idle+0x48>)
    5ab0:	2202      	movs	r2, #2
    5ab2:	601a      	str	r2, [r3, #0]
	mode = MODE_IDLE;
    5ab4:	4b03      	ldr	r3, [pc, #12]	; (5ac4 <cc2400_idle+0x4c>)
    5ab6:	2200      	movs	r2, #0
    5ab8:	701a      	strb	r2, [r3, #0]
}
    5aba:	bd80      	pop	{r7, pc}
    5abc:	2009c05c 	.word	0x2009c05c
    5ac0:	2009c03c 	.word	0x2009c03c
    5ac4:	10000a3e 	.word	0x10000a3e

00005ac8 <cc2400_rx>:

/* start un-buffered rx */
static void cc2400_rx()
{
    5ac8:	b580      	push	{r7, lr}
    5aca:	b082      	sub	sp, #8
    5acc:	af00      	add	r7, sp, #0
	u16 mdmctrl;
	if (modulation == MOD_BT_BASIC_RATE) {
    5ace:	4b2a      	ldr	r3, [pc, #168]	; (5b78 <cc2400_rx+0xb0>)
    5ad0:	781b      	ldrb	r3, [r3, #0]
    5ad2:	b2db      	uxtb	r3, r3
    5ad4:	2b00      	cmp	r3, #0
    5ad6:	d102      	bne.n	5ade <cc2400_rx+0x16>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5ad8:	2329      	movs	r3, #41	; 0x29
    5ada:	80fb      	strh	r3, [r7, #6]
    5adc:	e008      	b.n	5af0 <cc2400_rx+0x28>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5ade:	4b26      	ldr	r3, [pc, #152]	; (5b78 <cc2400_rx+0xb0>)
    5ae0:	781b      	ldrb	r3, [r3, #0]
    5ae2:	b2db      	uxtb	r3, r3
    5ae4:	2b01      	cmp	r3, #1
    5ae6:	d102      	bne.n	5aee <cc2400_rx+0x26>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5ae8:	2340      	movs	r3, #64	; 0x40
    5aea:	80fb      	strh	r3, [r7, #6]
    5aec:	e000      	b.n	5af0 <cc2400_rx+0x28>
	} else {
		/* oops */
		return;
    5aee:	e040      	b.n	5b72 <cc2400_rx+0xaa>
	}

	cc2400_set(MANAND,  0x7fff);
    5af0:	200d      	movs	r0, #13
    5af2:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5af6:	f004 fbb3 	bl	a260 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5afa:	2012      	movs	r0, #18
    5afc:	f642 3122 	movw	r1, #11042	; 0x2b22
    5b00:	f004 fbae 	bl	a260 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    5b04:	2014      	movs	r0, #20
    5b06:	f241 314b 	movw	r1, #4939	; 0x134b
    5b0a:	f004 fba9 	bl	a260 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    5b0e:	2020      	movs	r0, #32
    5b10:	f240 1101 	movw	r1, #257	; 0x101
    5b14:	f004 fba4 	bl	a260 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 2 preamble bytes of 01010101
	//      |  +-----------------> not packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5b18:	4b18      	ldr	r3, [pc, #96]	; (5b7c <cc2400_rx+0xb4>)
    5b1a:	881b      	ldrh	r3, [r3, #0]
    5b1c:	b29b      	uxth	r3, r3
    5b1e:	3b01      	subs	r3, #1
    5b20:	b29b      	uxth	r3, r3
    5b22:	2002      	movs	r0, #2
    5b24:	4619      	mov	r1, r3
    5b26:	f004 fb9b 	bl	a260 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5b2a:	88fb      	ldrh	r3, [r7, #6]
    5b2c:	2003      	movs	r0, #3
    5b2e:	4619      	mov	r1, r3
    5b30:	f004 fb96 	bl	a260 <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5b34:	f7fe fdc4 	bl	46c0 <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5b38:	bf00      	nop
    5b3a:	f004 fc49 	bl	a3d0 <cc2400_status>
    5b3e:	4603      	mov	r3, r0
    5b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5b44:	2b00      	cmp	r3, #0
    5b46:	d0f8      	beq.n	5b3a <cc2400_rx+0x72>
	cc2400_strobe(SFSON);
    5b48:	2061      	movs	r0, #97	; 0x61
    5b4a:	f004 fc4b 	bl	a3e4 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5b4e:	bf00      	nop
    5b50:	f004 fc3e 	bl	a3d0 <cc2400_status>
    5b54:	4603      	mov	r3, r0
    5b56:	f003 0304 	and.w	r3, r3, #4
    5b5a:	2b00      	cmp	r3, #0
    5b5c:	d0f8      	beq.n	5b50 <cc2400_rx+0x88>
	cc2400_strobe(SRX);
    5b5e:	2062      	movs	r0, #98	; 0x62
    5b60:	f004 fc40 	bl	a3e4 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5b64:	4b06      	ldr	r3, [pc, #24]	; (5b80 <cc2400_rx+0xb8>)
    5b66:	2280      	movs	r2, #128	; 0x80
    5b68:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5b6a:	4b05      	ldr	r3, [pc, #20]	; (5b80 <cc2400_rx+0xb8>)
    5b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5b70:	601a      	str	r2, [r3, #0]
#endif
}
    5b72:	3708      	adds	r7, #8
    5b74:	46bd      	mov	sp, r7
    5b76:	bd80      	pop	{r7, pc}
    5b78:	10000a42 	.word	0x10000a42
    5b7c:	1000049c 	.word	0x1000049c
    5b80:	2009c058 	.word	0x2009c058

00005b84 <cc2400_rx_sync>:

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    5b84:	b580      	push	{r7, lr}
    5b86:	b084      	sub	sp, #16
    5b88:	af00      	add	r7, sp, #0
    5b8a:	6078      	str	r0, [r7, #4]
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    5b8c:	4b33      	ldr	r3, [pc, #204]	; (5c5c <cc2400_rx_sync+0xd8>)
    5b8e:	781b      	ldrb	r3, [r3, #0]
    5b90:	b2db      	uxtb	r3, r3
    5b92:	2b00      	cmp	r3, #0
    5b94:	d105      	bne.n	5ba2 <cc2400_rx_sync+0x1e>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5b96:	2329      	movs	r3, #41	; 0x29
    5b98:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    5b9a:	f240 4361 	movw	r3, #1121	; 0x461
    5b9e:	81fb      	strh	r3, [r7, #14]
    5ba0:	e00b      	b.n	5bba <cc2400_rx_sync+0x36>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5ba2:	4b2e      	ldr	r3, [pc, #184]	; (5c5c <cc2400_rx_sync+0xd8>)
    5ba4:	781b      	ldrb	r3, [r3, #0]
    5ba6:	b2db      	uxtb	r3, r3
    5ba8:	2b01      	cmp	r3, #1
    5baa:	d105      	bne.n	5bb8 <cc2400_rx_sync+0x34>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5bac:	2340      	movs	r3, #64	; 0x40
    5bae:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    5bb0:	f240 5361 	movw	r3, #1377	; 0x561
    5bb4:	81fb      	strh	r3, [r7, #14]
    5bb6:	e000      	b.n	5bba <cc2400_rx_sync+0x36>
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else {
		/* oops */
		return;
    5bb8:	e04d      	b.n	5c56 <cc2400_rx_sync+0xd2>
	}

	cc2400_set(MANAND,  0x7fff);
    5bba:	200d      	movs	r0, #13
    5bbc:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5bc0:	f004 fb4e 	bl	a260 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5bc4:	2012      	movs	r0, #18
    5bc6:	f642 3122 	movw	r1, #11042	; 0x2b22
    5bca:	f004 fb49 	bl	a260 <cc2400_set>

	cc2400_set(MDMTST0, 0x124b);
    5bce:	2014      	movs	r0, #20
    5bd0:	f241 214b 	movw	r1, #4683	; 0x124b
    5bd4:	f004 fb44 	bl	a260 <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    5bd8:	89fb      	ldrh	r3, [r7, #14]
    5bda:	2020      	movs	r0, #32
    5bdc:	4619      	mov	r1, r3
    5bde:	f004 fb3f 	bl	a260 <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    5be2:	687b      	ldr	r3, [r7, #4]
    5be4:	b29b      	uxth	r3, r3
    5be6:	202c      	movs	r0, #44	; 0x2c
    5be8:	4619      	mov	r1, r3
    5bea:	f004 fb39 	bl	a260 <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    5bee:	687b      	ldr	r3, [r7, #4]
    5bf0:	0c1b      	lsrs	r3, r3, #16
    5bf2:	b29b      	uxth	r3, r3
    5bf4:	202d      	movs	r0, #45	; 0x2d
    5bf6:	4619      	mov	r1, r3
    5bf8:	f004 fb32 	bl	a260 <cc2400_set>
	
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5bfc:	4b18      	ldr	r3, [pc, #96]	; (5c60 <cc2400_rx_sync+0xdc>)
    5bfe:	881b      	ldrh	r3, [r3, #0]
    5c00:	b29b      	uxth	r3, r3
    5c02:	3b01      	subs	r3, #1
    5c04:	b29b      	uxth	r3, r3
    5c06:	2002      	movs	r0, #2
    5c08:	4619      	mov	r1, r3
    5c0a:	f004 fb29 	bl	a260 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5c0e:	89bb      	ldrh	r3, [r7, #12]
    5c10:	2003      	movs	r0, #3
    5c12:	4619      	mov	r1, r3
    5c14:	f004 fb24 	bl	a260 <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5c18:	f7fe fd52 	bl	46c0 <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5c1c:	bf00      	nop
    5c1e:	f004 fbd7 	bl	a3d0 <cc2400_status>
    5c22:	4603      	mov	r3, r0
    5c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5c28:	2b00      	cmp	r3, #0
    5c2a:	d0f8      	beq.n	5c1e <cc2400_rx_sync+0x9a>
	cc2400_strobe(SFSON);
    5c2c:	2061      	movs	r0, #97	; 0x61
    5c2e:	f004 fbd9 	bl	a3e4 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5c32:	bf00      	nop
    5c34:	f004 fbcc 	bl	a3d0 <cc2400_status>
    5c38:	4603      	mov	r3, r0
    5c3a:	f003 0304 	and.w	r3, r3, #4
    5c3e:	2b00      	cmp	r3, #0
    5c40:	d0f8      	beq.n	5c34 <cc2400_rx_sync+0xb0>
	cc2400_strobe(SRX);
    5c42:	2062      	movs	r0, #98	; 0x62
    5c44:	f004 fbce 	bl	a3e4 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5c48:	4b06      	ldr	r3, [pc, #24]	; (5c64 <cc2400_rx_sync+0xe0>)
    5c4a:	2280      	movs	r2, #128	; 0x80
    5c4c:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5c4e:	4b05      	ldr	r3, [pc, #20]	; (5c64 <cc2400_rx_sync+0xe0>)
    5c50:	f44f 7280 	mov.w	r2, #256	; 0x100
    5c54:	601a      	str	r2, [r3, #0]
#endif
}
    5c56:	3710      	adds	r7, #16
    5c58:	46bd      	mov	sp, r7
    5c5a:	bd80      	pop	{r7, pc}
    5c5c:	10000a42 	.word	0x10000a42
    5c60:	1000049c 	.word	0x1000049c
    5c64:	2009c058 	.word	0x2009c058

00005c68 <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data)
{
    5c68:	b580      	push	{r7, lr}
    5c6a:	b09a      	sub	sp, #104	; 0x68
    5c6c:	af00      	add	r7, sp, #0
    5c6e:	60f8      	str	r0, [r7, #12]
    5c70:	460b      	mov	r3, r1
    5c72:	607a      	str	r2, [r7, #4]
    5c74:	72fb      	strb	r3, [r7, #11]
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5c76:	2300      	movs	r3, #0
    5c78:	667b      	str	r3, [r7, #100]	; 0x64
    5c7a:	e035      	b.n	5ce8 <le_transmit+0x80>
		byte = aa & 0xff;
    5c7c:	68fb      	ldr	r3, [r7, #12]
    5c7e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		aa >>= 8;
    5c82:	68fb      	ldr	r3, [r7, #12]
    5c84:	0a1b      	lsrs	r3, r3, #8
    5c86:	60fb      	str	r3, [r7, #12]
		txbuf[i] = 0;
    5c88:	f107 0210 	add.w	r2, r7, #16
    5c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5c8e:	4413      	add	r3, r2
    5c90:	2200      	movs	r2, #0
    5c92:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; ++j) {
    5c94:	2300      	movs	r3, #0
    5c96:	663b      	str	r3, [r7, #96]	; 0x60
    5c98:	e020      	b.n	5cdc <le_transmit+0x74>
			txbuf[i] |= (byte & 1) << (7 - j);
    5c9a:	f107 0210 	add.w	r2, r7, #16
    5c9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5ca0:	4413      	add	r3, r2
    5ca2:	781b      	ldrb	r3, [r3, #0]
    5ca4:	b2d9      	uxtb	r1, r3
    5ca6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5caa:	f003 0301 	and.w	r3, r3, #1
    5cae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5cb0:	f1c2 0207 	rsb	r2, r2, #7
    5cb4:	4093      	lsls	r3, r2
    5cb6:	b2db      	uxtb	r3, r3
    5cb8:	460a      	mov	r2, r1
    5cba:	4313      	orrs	r3, r2
    5cbc:	b2db      	uxtb	r3, r3
    5cbe:	b2d9      	uxtb	r1, r3
    5cc0:	f107 0210 	add.w	r2, r7, #16
    5cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5cc6:	4413      	add	r3, r2
    5cc8:	460a      	mov	r2, r1
    5cca:	701a      	strb	r2, [r3, #0]
			byte >>= 1;
    5ccc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5cd0:	085b      	lsrs	r3, r3, #1
    5cd2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    5cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5cd8:	3301      	adds	r3, #1
    5cda:	663b      	str	r3, [r7, #96]	; 0x60
    5cdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5cde:	2b07      	cmp	r3, #7
    5ce0:	d9db      	bls.n	5c9a <le_transmit+0x32>
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5ce2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5ce4:	3301      	adds	r3, #1
    5ce6:	667b      	str	r3, [r7, #100]	; 0x64
    5ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5cea:	2b03      	cmp	r3, #3
    5cec:	d9c6      	bls.n	5c7c <le_transmit+0x14>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
    5cee:	4b93      	ldr	r3, [pc, #588]	; (5f3c <le_transmit+0x2d4>)
    5cf0:	881b      	ldrh	r3, [r3, #0]
    5cf2:	b29b      	uxth	r3, r3
    5cf4:	b2db      	uxtb	r3, r3
    5cf6:	3b62      	subs	r3, #98	; 0x62
    5cf8:	b2db      	uxtb	r3, r3
    5cfa:	4618      	mov	r0, r3
    5cfc:	f002 feb8 	bl	8a70 <btle_channel_index>
    5d00:	4603      	mov	r3, r0
    5d02:	461a      	mov	r2, r3
    5d04:	4b8e      	ldr	r3, [pc, #568]	; (5f40 <le_transmit+0x2d8>)
    5d06:	5c9b      	ldrb	r3, [r3, r2]
    5d08:	65bb      	str	r3, [r7, #88]	; 0x58
	for (i = 0; i < len; ++i) {
    5d0a:	2300      	movs	r3, #0
    5d0c:	667b      	str	r3, [r7, #100]	; 0x64
    5d0e:	e050      	b.n	5db2 <le_transmit+0x14a>
		byte = data[i];
    5d10:	687a      	ldr	r2, [r7, #4]
    5d12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d14:	4413      	add	r3, r2
    5d16:	781b      	ldrb	r3, [r3, #0]
    5d18:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		txbuf[i+4] = 0;
    5d1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d1e:	3304      	adds	r3, #4
    5d20:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5d24:	4413      	add	r3, r2
    5d26:	2200      	movs	r2, #0
    5d28:	f803 2c58 	strb.w	r2, [r3, #-88]
		for (j = 0; j < 8; ++j) {
    5d2c:	2300      	movs	r3, #0
    5d2e:	663b      	str	r3, [r7, #96]	; 0x60
    5d30:	e039      	b.n	5da6 <le_transmit+0x13e>
			bit = (byte & 1) ^ whitening[idx];
    5d32:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5d36:	f003 0301 	and.w	r3, r3, #1
    5d3a:	4982      	ldr	r1, [pc, #520]	; (5f44 <le_transmit+0x2dc>)
    5d3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
    5d3e:	440a      	add	r2, r1
    5d40:	7812      	ldrb	r2, [r2, #0]
    5d42:	4053      	eors	r3, r2
    5d44:	657b      	str	r3, [r7, #84]	; 0x54
			idx = (idx + 1) % sizeof(whitening);
    5d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5d48:	3301      	adds	r3, #1
    5d4a:	4619      	mov	r1, r3
    5d4c:	4b7e      	ldr	r3, [pc, #504]	; (5f48 <le_transmit+0x2e0>)
    5d4e:	fba1 2303 	umull	r2, r3, r1, r3
    5d52:	1ac8      	subs	r0, r1, r3
    5d54:	0840      	lsrs	r0, r0, #1
    5d56:	4403      	add	r3, r0
    5d58:	099a      	lsrs	r2, r3, #6
    5d5a:	4613      	mov	r3, r2
    5d5c:	01db      	lsls	r3, r3, #7
    5d5e:	1a9b      	subs	r3, r3, r2
    5d60:	1aca      	subs	r2, r1, r3
    5d62:	65ba      	str	r2, [r7, #88]	; 0x58
			byte >>= 1;
    5d64:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5d68:	085b      	lsrs	r3, r3, #1
    5d6a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			txbuf[i+4] |= bit << (7 - j);
    5d6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d70:	3304      	adds	r3, #4
    5d72:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    5d74:	3204      	adds	r2, #4
    5d76:	f107 0168 	add.w	r1, r7, #104	; 0x68
    5d7a:	440a      	add	r2, r1
    5d7c:	f812 2c58 	ldrb.w	r2, [r2, #-88]
    5d80:	b2d1      	uxtb	r1, r2
    5d82:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5d84:	f1c2 0207 	rsb	r2, r2, #7
    5d88:	4610      	mov	r0, r2
    5d8a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5d8c:	4082      	lsls	r2, r0
    5d8e:	b2d2      	uxtb	r2, r2
    5d90:	430a      	orrs	r2, r1
    5d92:	b2d2      	uxtb	r2, r2
    5d94:	b2d2      	uxtb	r2, r2
    5d96:	f107 0168 	add.w	r1, r7, #104	; 0x68
    5d9a:	440b      	add	r3, r1
    5d9c:	f803 2c58 	strb.w	r2, [r3, #-88]
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    5da0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5da2:	3301      	adds	r3, #1
    5da4:	663b      	str	r3, [r7, #96]	; 0x60
    5da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5da8:	2b07      	cmp	r3, #7
    5daa:	d9c2      	bls.n	5d32 <le_transmit+0xca>
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
    5dac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5dae:	3301      	adds	r3, #1
    5db0:	667b      	str	r3, [r7, #100]	; 0x64
    5db2:	7afa      	ldrb	r2, [r7, #11]
    5db4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5db6:	429a      	cmp	r2, r3
    5db8:	d8aa      	bhi.n	5d10 <le_transmit+0xa8>
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    5dba:	7afb      	ldrb	r3, [r7, #11]
    5dbc:	3304      	adds	r3, #4
    5dbe:	72fb      	strb	r3, [r7, #11]

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    5dc0:	200d      	movs	r0, #13
    5dc2:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5dc6:	f004 fa4b 	bl	a260 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5dca:	2012      	movs	r0, #18
    5dcc:	f642 3122 	movw	r1, #11042	; 0x2b22
    5dd0:	f004 fa46 	bl	a260 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5dd4:	2014      	movs	r0, #20
    5dd6:	f241 314b 	movw	r1, #4939	; 0x134b
    5dda:	f004 fa41 	bl	a260 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5dde:	2020      	movs	r0, #32
    5de0:	f640 4101 	movw	r1, #3073	; 0xc01
    5de4:	f004 fa3c 	bl	a260 <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   channel);
    5de8:	4b54      	ldr	r3, [pc, #336]	; (5f3c <le_transmit+0x2d4>)
    5dea:	881b      	ldrh	r3, [r3, #0]
    5dec:	b29b      	uxth	r3, r3
    5dee:	2002      	movs	r0, #2
    5df0:	4619      	mov	r1, r3
    5df2:	f004 fa35 	bl	a260 <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5df6:	2005      	movs	r0, #5
    5df8:	210b      	movs	r1, #11
    5dfa:	f004 fa31 	bl	a260 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5dfe:	2003      	movs	r0, #3
    5e00:	2140      	movs	r1, #64	; 0x40
    5e02:	f004 fa2d 	bl	a260 <cc2400_set>
	cc2400_set(INT,     0x0014);	// FIFO_THRESHOLD: 20 bytes
    5e06:	2023      	movs	r0, #35	; 0x23
    5e08:	2114      	movs	r1, #20
    5e0a:	f004 fa29 	bl	a260 <cc2400_set>

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    5e0e:	68fb      	ldr	r3, [r7, #12]
    5e10:	f003 0301 	and.w	r3, r3, #1
    5e14:	2b00      	cmp	r3, #0
    5e16:	d005      	beq.n	5e24 <le_transmit+0x1bc>
		cc2400_set(SYNCH,   0xaaaa);
    5e18:	202d      	movs	r0, #45	; 0x2d
    5e1a:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
    5e1e:	f004 fa1f 	bl	a260 <cc2400_set>
    5e22:	e004      	b.n	5e2e <le_transmit+0x1c6>
	else
		cc2400_set(SYNCH,   0x5555);
    5e24:	202d      	movs	r0, #45	; 0x2d
    5e26:	f245 5155 	movw	r1, #21845	; 0x5555
    5e2a:	f004 fa19 	bl	a260 <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5e2e:	2008      	movs	r0, #8
    5e30:	f004 fa00 	bl	a234 <cc2400_get>
    5e34:	4603      	mov	r3, r0
    5e36:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5e3a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    5e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5e42:	b29b      	uxth	r3, r3
    5e44:	f443 439c 	orr.w	r3, r3, #19968	; 0x4e00
    5e48:	b29b      	uxth	r3, r3
    5e4a:	b29b      	uxth	r3, r3
    5e4c:	2008      	movs	r0, #8
    5e4e:	4619      	mov	r1, r3
    5e50:	f004 fa06 	bl	a260 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5e54:	bf00      	nop
    5e56:	f004 fabb 	bl	a3d0 <cc2400_status>
    5e5a:	4603      	mov	r3, r0
    5e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5e60:	2b00      	cmp	r3, #0
    5e62:	d0f8      	beq.n	5e56 <le_transmit+0x1ee>
	cc2400_strobe(SFSON);
    5e64:	2061      	movs	r0, #97	; 0x61
    5e66:	f004 fabd 	bl	a3e4 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5e6a:	bf00      	nop
    5e6c:	f004 fab0 	bl	a3d0 <cc2400_status>
    5e70:	4603      	mov	r3, r0
    5e72:	f003 0304 	and.w	r3, r3, #4
    5e76:	2b00      	cmp	r3, #0
    5e78:	d0f8      	beq.n	5e6c <le_transmit+0x204>
	TXLED_SET;
    5e7a:	4b34      	ldr	r3, [pc, #208]	; (5f4c <le_transmit+0x2e4>)
    5e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e80:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5e82:	4b33      	ldr	r3, [pc, #204]	; (5f50 <le_transmit+0x2e8>)
    5e84:	2280      	movs	r2, #128	; 0x80
    5e86:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5e88:	bf00      	nop
    5e8a:	200e      	movs	r0, #14
    5e8c:	f004 f9d2 	bl	a234 <cc2400_get>
    5e90:	4603      	mov	r3, r0
    5e92:	f003 031f 	and.w	r3, r3, #31
    5e96:	2b0f      	cmp	r3, #15
    5e98:	d1f7      	bne.n	5e8a <le_transmit+0x222>
	cc2400_strobe(STX);
    5e9a:	2063      	movs	r0, #99	; 0x63
    5e9c:	f004 faa2 	bl	a3e4 <cc2400_strobe>

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    5ea0:	2300      	movs	r3, #0
    5ea2:	667b      	str	r3, [r7, #100]	; 0x64
    5ea4:	e021      	b.n	5eea <le_transmit+0x282>
		while (GIO6) ; // wait for the FIFO to drain (FIFO_FULL false)
    5ea6:	bf00      	nop
    5ea8:	4b2a      	ldr	r3, [pc, #168]	; (5f54 <le_transmit+0x2ec>)
    5eaa:	681b      	ldr	r3, [r3, #0]
    5eac:	f003 0304 	and.w	r3, r3, #4
    5eb0:	2b00      	cmp	r3, #0
    5eb2:	d1f9      	bne.n	5ea8 <le_transmit+0x240>
		tx_len = len - i;
    5eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5eb6:	b2db      	uxtb	r3, r3
    5eb8:	7afa      	ldrb	r2, [r7, #11]
    5eba:	1ad3      	subs	r3, r2, r3
    5ebc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (tx_len > 16)
    5ec0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    5ec4:	2b10      	cmp	r3, #16
    5ec6:	d902      	bls.n	5ece <le_transmit+0x266>
			tx_len = 16;
    5ec8:	2310      	movs	r3, #16
    5eca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
    5ece:	f107 0210 	add.w	r2, r7, #16
    5ed2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5ed4:	4413      	add	r3, r2
    5ed6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
    5eda:	2070      	movs	r0, #112	; 0x70
    5edc:	4611      	mov	r1, r2
    5ede:	461a      	mov	r2, r3
    5ee0:	f004 fa00 	bl	a2e4 <cc2400_spi_buf>
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    5ee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5ee6:	3310      	adds	r3, #16
    5ee8:	667b      	str	r3, [r7, #100]	; 0x64
    5eea:	7afa      	ldrb	r2, [r7, #11]
    5eec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5eee:	429a      	cmp	r2, r3
    5ef0:	d8d9      	bhi.n	5ea6 <le_transmit+0x23e>
		if (tx_len > 16)
			tx_len = 16;
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
	}

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5ef2:	bf00      	nop
    5ef4:	200e      	movs	r0, #14
    5ef6:	f004 f99d 	bl	a234 <cc2400_get>
    5efa:	4603      	mov	r3, r0
    5efc:	f003 031f 	and.w	r3, r3, #31
    5f00:	2b0f      	cmp	r3, #15
    5f02:	d1f7      	bne.n	5ef4 <le_transmit+0x28c>
	TXLED_CLR;
    5f04:	4b14      	ldr	r3, [pc, #80]	; (5f58 <le_transmit+0x2f0>)
    5f06:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f0a:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    5f0c:	2064      	movs	r0, #100	; 0x64
    5f0e:	f004 fa69 	bl	a3e4 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    5f12:	bf00      	nop
    5f14:	f004 fa5c 	bl	a3d0 <cc2400_status>
    5f18:	4603      	mov	r3, r0
    5f1a:	f003 0304 	and.w	r3, r3, #4
    5f1e:	2b00      	cmp	r3, #0
    5f20:	d1f8      	bne.n	5f14 <le_transmit+0x2ac>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5f22:	4b0e      	ldr	r3, [pc, #56]	; (5f5c <le_transmit+0x2f4>)
    5f24:	2280      	movs	r2, #128	; 0x80
    5f26:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    5f28:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    5f2c:	2008      	movs	r0, #8
    5f2e:	4619      	mov	r1, r3
    5f30:	f004 f996 	bl	a260 <cc2400_set>
}
    5f34:	3768      	adds	r7, #104	; 0x68
    5f36:	46bd      	mov	sp, r7
    5f38:	bd80      	pop	{r7, pc}
    5f3a:	bf00      	nop
    5f3c:	1000049c 	.word	0x1000049c
    5f40:	0000c018 	.word	0x0000c018
    5f44:	0000bf98 	.word	0x0000bf98
    5f48:	02040811 	.word	0x02040811
    5f4c:	2009c038 	.word	0x2009c038
    5f50:	2009c058 	.word	0x2009c058
    5f54:	2009c054 	.word	0x2009c054
    5f58:	2009c03c 	.word	0x2009c03c
    5f5c:	2009c05c 	.word	0x2009c05c

00005f60 <le_jam>:

void le_jam(void) {
    5f60:	b580      	push	{r7, lr}
    5f62:	af00      	add	r7, sp, #0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    5f64:	200d      	movs	r0, #13
    5f66:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5f6a:	f004 f979 	bl	a260 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5f6e:	2012      	movs	r0, #18
    5f70:	f642 3122 	movw	r1, #11042	; 0x2b22
    5f74:	f004 f974 	bl	a260 <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    5f78:	2014      	movs	r0, #20
    5f7a:	f242 314b 	movw	r1, #9035	; 0x234b
    5f7e:	f004 f96f 	bl	a260 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5f82:	2020      	movs	r0, #32
    5f84:	f640 4101 	movw	r1, #3073	; 0xc01
    5f88:	f004 f96a 	bl	a260 <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5f8c:	2005      	movs	r0, #5
    5f8e:	210b      	movs	r1, #11
    5f90:	f004 f966 	bl	a260 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5f94:	2003      	movs	r0, #3
    5f96:	2140      	movs	r1, #64	; 0x40
    5f98:	f004 f962 	bl	a260 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5f9c:	bf00      	nop
    5f9e:	f004 fa17 	bl	a3d0 <cc2400_status>
    5fa2:	4603      	mov	r3, r0
    5fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5fa8:	2b00      	cmp	r3, #0
    5faa:	d0f8      	beq.n	5f9e <le_jam+0x3e>
	cc2400_strobe(SFSON);
    5fac:	2061      	movs	r0, #97	; 0x61
    5fae:	f004 fa19 	bl	a3e4 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5fb2:	bf00      	nop
    5fb4:	f004 fa0c 	bl	a3d0 <cc2400_status>
    5fb8:	4603      	mov	r3, r0
    5fba:	f003 0304 	and.w	r3, r3, #4
    5fbe:	2b00      	cmp	r3, #0
    5fc0:	d0f8      	beq.n	5fb4 <le_jam+0x54>
	TXLED_SET;
    5fc2:	4b0a      	ldr	r3, [pc, #40]	; (5fec <le_jam+0x8c>)
    5fc4:	f44f 7280 	mov.w	r2, #256	; 0x100
    5fc8:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5fca:	4b09      	ldr	r3, [pc, #36]	; (5ff0 <le_jam+0x90>)
    5fcc:	2280      	movs	r2, #128	; 0x80
    5fce:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5fd0:	bf00      	nop
    5fd2:	200e      	movs	r0, #14
    5fd4:	f004 f92e 	bl	a234 <cc2400_get>
    5fd8:	4603      	mov	r3, r0
    5fda:	f003 031f 	and.w	r3, r3, #31
    5fde:	2b0f      	cmp	r3, #15
    5fe0:	d1f7      	bne.n	5fd2 <le_jam+0x72>
	cc2400_strobe(STX);
    5fe2:	2063      	movs	r0, #99	; 0x63
    5fe4:	f004 f9fe 	bl	a3e4 <cc2400_strobe>
#endif
}
    5fe8:	bd80      	pop	{r7, pc}
    5fea:	bf00      	nop
    5fec:	2009c038 	.word	0x2009c038
    5ff0:	2009c058 	.word	0x2009c058

00005ff4 <hop>:

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    5ff4:	b580      	push	{r7, lr}
    5ff6:	af00      	add	r7, sp, #0
	do_hop = 0;
    5ff8:	4b41      	ldr	r3, [pc, #260]	; (6100 <hop+0x10c>)
    5ffa:	2200      	movs	r2, #0
    5ffc:	701a      	strb	r2, [r3, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    5ffe:	4b41      	ldr	r3, [pc, #260]	; (6104 <hop+0x110>)
    6000:	781b      	ldrb	r3, [r3, #0]
    6002:	2b00      	cmp	r3, #0
    6004:	d10b      	bne.n	601e <hop+0x2a>
		if (cc2400_get(FSDIV) == (channel - 1))
    6006:	2002      	movs	r0, #2
    6008:	f004 f914 	bl	a234 <cc2400_get>
    600c:	4603      	mov	r3, r0
    600e:	461a      	mov	r2, r3
    6010:	4b3d      	ldr	r3, [pc, #244]	; (6108 <hop+0x114>)
    6012:	881b      	ldrh	r3, [r3, #0]
    6014:	b29b      	uxth	r3, r3
    6016:	3b01      	subs	r3, #1
    6018:	429a      	cmp	r2, r3
    601a:	d147      	bne.n	60ac <hop+0xb8>
			return;
    601c:	e06e      	b.n	60fc <hop+0x108>
	}

	// Slow sweep (100 hops/sec)
	else if (hop_mode == HOP_SWEEP) {
    601e:	4b39      	ldr	r3, [pc, #228]	; (6104 <hop+0x110>)
    6020:	781b      	ldrb	r3, [r3, #0]
    6022:	2b01      	cmp	r3, #1
    6024:	d114      	bne.n	6050 <hop+0x5c>
		channel += 32;
    6026:	4b38      	ldr	r3, [pc, #224]	; (6108 <hop+0x114>)
    6028:	881b      	ldrh	r3, [r3, #0]
    602a:	b29b      	uxth	r3, r3
    602c:	3320      	adds	r3, #32
    602e:	b29a      	uxth	r2, r3
    6030:	4b35      	ldr	r3, [pc, #212]	; (6108 <hop+0x114>)
    6032:	801a      	strh	r2, [r3, #0]
		if (channel > 2480)
    6034:	4b34      	ldr	r3, [pc, #208]	; (6108 <hop+0x114>)
    6036:	881b      	ldrh	r3, [r3, #0]
    6038:	b29b      	uxth	r3, r3
    603a:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
    603e:	d935      	bls.n	60ac <hop+0xb8>
			channel -= 79;
    6040:	4b31      	ldr	r3, [pc, #196]	; (6108 <hop+0x114>)
    6042:	881b      	ldrh	r3, [r3, #0]
    6044:	b29b      	uxth	r3, r3
    6046:	3b4f      	subs	r3, #79	; 0x4f
    6048:	b29a      	uxth	r2, r3
    604a:	4b2f      	ldr	r3, [pc, #188]	; (6108 <hop+0x114>)
    604c:	801a      	strh	r2, [r3, #0]
    604e:	e02d      	b.n	60ac <hop+0xb8>
	}

	else if (hop_mode == HOP_BLUETOOTH) {
    6050:	4b2c      	ldr	r3, [pc, #176]	; (6104 <hop+0x110>)
    6052:	781b      	ldrb	r3, [r3, #0]
    6054:	2b02      	cmp	r3, #2
    6056:	d10d      	bne.n	6074 <hop+0x80>
		TXLED_SET;
    6058:	4b2c      	ldr	r3, [pc, #176]	; (610c <hop+0x118>)
    605a:	f44f 7280 	mov.w	r2, #256	; 0x100
    605e:	601a      	str	r2, [r3, #0]
		channel = next_hop(clkn);
    6060:	4b2b      	ldr	r3, [pc, #172]	; (6110 <hop+0x11c>)
    6062:	681b      	ldr	r3, [r3, #0]
    6064:	4618      	mov	r0, r3
    6066:	f002 fc15 	bl	8894 <next_hop>
    606a:	4603      	mov	r3, r0
    606c:	461a      	mov	r2, r3
    606e:	4b26      	ldr	r3, [pc, #152]	; (6108 <hop+0x114>)
    6070:	801a      	strh	r2, [r3, #0]
    6072:	e01b      	b.n	60ac <hop+0xb8>
	}

	else if (hop_mode == HOP_BTLE) {
    6074:	4b23      	ldr	r3, [pc, #140]	; (6104 <hop+0x110>)
    6076:	781b      	ldrb	r3, [r3, #0]
    6078:	2b03      	cmp	r3, #3
    607a:	d10b      	bne.n	6094 <hop+0xa0>
		TXLED_SET;
    607c:	4b23      	ldr	r3, [pc, #140]	; (610c <hop+0x118>)
    607e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6082:	601a      	str	r2, [r3, #0]
		channel = btle_next_hop(&le);
    6084:	4823      	ldr	r0, [pc, #140]	; (6114 <hop+0x120>)
    6086:	f002 fccb 	bl	8a20 <btle_next_hop>
    608a:	4603      	mov	r3, r0
    608c:	461a      	mov	r2, r3
    608e:	4b1e      	ldr	r3, [pc, #120]	; (6108 <hop+0x114>)
    6090:	801a      	strh	r2, [r3, #0]
    6092:	e00b      	b.n	60ac <hop+0xb8>
	}

	else if (hop_mode == HOP_DIRECT) {
    6094:	4b1b      	ldr	r3, [pc, #108]	; (6104 <hop+0x110>)
    6096:	781b      	ldrb	r3, [r3, #0]
    6098:	2b04      	cmp	r3, #4
    609a:	d107      	bne.n	60ac <hop+0xb8>
		TXLED_SET;
    609c:	4b1b      	ldr	r3, [pc, #108]	; (610c <hop+0x118>)
    609e:	f44f 7280 	mov.w	r2, #256	; 0x100
    60a2:	601a      	str	r2, [r3, #0]
		channel = hop_direct_channel;
    60a4:	4b1c      	ldr	r3, [pc, #112]	; (6118 <hop+0x124>)
    60a6:	881a      	ldrh	r2, [r3, #0]
    60a8:	4b17      	ldr	r3, [pc, #92]	; (6108 <hop+0x114>)
    60aa:	801a      	strh	r2, [r3, #0]
	}

        /* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    60ac:	2064      	movs	r0, #100	; 0x64
    60ae:	f004 f999 	bl	a3e4 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    60b2:	bf00      	nop
    60b4:	f004 f98c 	bl	a3d0 <cc2400_status>
    60b8:	4603      	mov	r3, r0
    60ba:	f003 0304 	and.w	r3, r3, #4
    60be:	2b00      	cmp	r3, #0
    60c0:	d1f8      	bne.n	60b4 <hop+0xc0>

	/* Retune */
	cc2400_set(FSDIV, channel - 1);
    60c2:	4b11      	ldr	r3, [pc, #68]	; (6108 <hop+0x114>)
    60c4:	881b      	ldrh	r3, [r3, #0]
    60c6:	b29b      	uxth	r3, r3
    60c8:	3b01      	subs	r3, #1
    60ca:	b29b      	uxth	r3, r3
    60cc:	2002      	movs	r0, #2
    60ce:	4619      	mov	r1, r3
    60d0:	f004 f8c6 	bl	a260 <cc2400_set>
	
	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    60d4:	4b0b      	ldr	r3, [pc, #44]	; (6104 <hop+0x110>)
    60d6:	781b      	ldrb	r3, [r3, #0]
    60d8:	2b00      	cmp	r3, #0
    60da:	d001      	beq.n	60e0 <hop+0xec>
		cs_threshold_calc_and_set();
    60dc:	f7fe faf0 	bl	46c0 <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    60e0:	2061      	movs	r0, #97	; 0x61
    60e2:	f004 f97f 	bl	a3e4 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    60e6:	bf00      	nop
    60e8:	f004 f972 	bl	a3d0 <cc2400_status>
    60ec:	4603      	mov	r3, r0
    60ee:	f003 0304 	and.w	r3, r3, #4
    60f2:	2b00      	cmp	r3, #0
    60f4:	d0f8      	beq.n	60e8 <hop+0xf4>
	
	/* RX mode */
	cc2400_strobe(SRX);
    60f6:	2062      	movs	r0, #98	; 0x62
    60f8:	f004 f974 	bl	a3e4 <cc2400_strobe>

}
    60fc:	bd80      	pop	{r7, pc}
    60fe:	bf00      	nop
    6100:	1000097d 	.word	0x1000097d
    6104:	1000097c 	.word	0x1000097c
    6108:	1000049c 	.word	0x1000049c
    610c:	2009c038 	.word	0x2009c038
    6110:	10000be4 	.word	0x10000be4
    6114:	10000458 	.word	0x10000458
    6118:	10000980 	.word	0x10000980

0000611c <cc2400_spi_rev>:


u32 cc2400_spi_rev(u8 len, u32 data)
{
    611c:	b480      	push	{r7}
    611e:	b085      	sub	sp, #20
    6120:	af00      	add	r7, sp, #0
    6122:	4603      	mov	r3, r0
    6124:	6039      	str	r1, [r7, #0]
    6126:	71fb      	strb	r3, [r7, #7]
    //    u32 first_ts, second_ts, diff;


        u32 msb = 1 << (len - 1);
    6128:	79fb      	ldrb	r3, [r7, #7]
    612a:	3b01      	subs	r3, #1
    612c:	2201      	movs	r2, #1
    612e:	fa02 f303 	lsl.w	r3, r2, r3
    6132:	60fb      	str	r3, [r7, #12]

        /* start transaction by dropping CSN */
        CSN_CLR;
    6134:	4b18      	ldr	r3, [pc, #96]	; (6198 <cc2400_spi_rev+0x7c>)
    6136:	2220      	movs	r2, #32
    6138:	601a      	str	r2, [r3, #0]

//      first_ts = CLK100NS;
        while (len--) {
    613a:	e01e      	b.n	617a <cc2400_spi_rev+0x5e>
                if (data & msb)
    613c:	683a      	ldr	r2, [r7, #0]
    613e:	68fb      	ldr	r3, [r7, #12]
    6140:	4013      	ands	r3, r2
    6142:	2b00      	cmp	r3, #0
    6144:	d003      	beq.n	614e <cc2400_spi_rev+0x32>
                        MOSI_SET;
    6146:	4b15      	ldr	r3, [pc, #84]	; (619c <cc2400_spi_rev+0x80>)
    6148:	2201      	movs	r2, #1
    614a:	601a      	str	r2, [r3, #0]
    614c:	e002      	b.n	6154 <cc2400_spi_rev+0x38>
                else
                        MOSI_CLR;
    614e:	4b12      	ldr	r3, [pc, #72]	; (6198 <cc2400_spi_rev+0x7c>)
    6150:	2201      	movs	r2, #1
    6152:	601a      	str	r2, [r3, #0]
                data <<= 1;
    6154:	683b      	ldr	r3, [r7, #0]
    6156:	005b      	lsls	r3, r3, #1
    6158:	603b      	str	r3, [r7, #0]

                SCLK_SET;
    615a:	4b10      	ldr	r3, [pc, #64]	; (619c <cc2400_spi_rev+0x80>)
    615c:	2210      	movs	r2, #16
    615e:	601a      	str	r2, [r3, #0]
                if (MISO)
    6160:	4b0f      	ldr	r3, [pc, #60]	; (61a0 <cc2400_spi_rev+0x84>)
    6162:	681b      	ldr	r3, [r3, #0]
    6164:	f003 0302 	and.w	r3, r3, #2
    6168:	2b00      	cmp	r3, #0
    616a:	d003      	beq.n	6174 <cc2400_spi_rev+0x58>
                        data |= 1;
    616c:	683b      	ldr	r3, [r7, #0]
    616e:	f043 0301 	orr.w	r3, r3, #1
    6172:	603b      	str	r3, [r7, #0]

                SCLK_CLR;
    6174:	4b08      	ldr	r3, [pc, #32]	; (6198 <cc2400_spi_rev+0x7c>)
    6176:	2210      	movs	r2, #16
    6178:	601a      	str	r2, [r3, #0]

        /* start transaction by dropping CSN */
        CSN_CLR;

//      first_ts = CLK100NS;
        while (len--) {
    617a:	79fb      	ldrb	r3, [r7, #7]
    617c:	1e5a      	subs	r2, r3, #1
    617e:	71fa      	strb	r2, [r7, #7]
    6180:	2b00      	cmp	r3, #0
    6182:	d1db      	bne.n	613c <cc2400_spi_rev+0x20>
                SCLK_CLR;
        }
//      second_ts = CLK100NS;
//      diff_ts = second_ts - first_ts;

        CSN_SET;
    6184:	4b05      	ldr	r3, [pc, #20]	; (619c <cc2400_spi_rev+0x80>)
    6186:	2220      	movs	r2, #32
    6188:	601a      	str	r2, [r3, #0]
        return data;
    618a:	683b      	ldr	r3, [r7, #0]
}
    618c:	4618      	mov	r0, r3
    618e:	3714      	adds	r7, #20
    6190:	46bd      	mov	sp, r7
    6192:	f85d 7b04 	ldr.w	r7, [sp], #4
    6196:	4770      	bx	lr
    6198:	2009c05c 	.word	0x2009c05c
    619c:	2009c058 	.word	0x2009c058
    61a0:	2009c054 	.word	0x2009c054

000061a4 <cc2400_get_rev>:

u8 cc2400_get_rev(u8 reg)
{
    61a4:	b580      	push	{r7, lr}
    61a6:	b084      	sub	sp, #16
    61a8:	af00      	add	r7, sp, #0
    61aa:	4603      	mov	r3, r0
    61ac:	71fb      	strb	r3, [r7, #7]
        u32 in;

        u32 out = (reg | 0x80) << 8;
    61ae:	79fb      	ldrb	r3, [r7, #7]
    61b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    61b4:	b2db      	uxtb	r3, r3
    61b6:	021b      	lsls	r3, r3, #8
    61b8:	60fb      	str	r3, [r7, #12]
        in = cc2400_spi_rev(16, out);
    61ba:	2010      	movs	r0, #16
    61bc:	68f9      	ldr	r1, [r7, #12]
    61be:	f7ff ffad 	bl	611c <cc2400_spi_rev>
    61c2:	60b8      	str	r0, [r7, #8]
        return in & 0xFF;
    61c4:	68bb      	ldr	r3, [r7, #8]
    61c6:	b2db      	uxtb	r3, r3
}
    61c8:	4618      	mov	r0, r3
    61ca:	3710      	adds	r7, #16
    61cc:	46bd      	mov	sp, r7
    61ce:	bd80      	pop	{r7, pc}

000061d0 <add>:

u8 add (u8 x, u8 y)
{
    61d0:	b480      	push	{r7}
    61d2:	b085      	sub	sp, #20
    61d4:	af00      	add	r7, sp, #0
    61d6:	4603      	mov	r3, r0
    61d8:	460a      	mov	r2, r1
    61da:	71fb      	strb	r3, [r7, #7]
    61dc:	4613      	mov	r3, r2
    61de:	71bb      	strb	r3, [r7, #6]
  while (y)
    61e0:	e00a      	b.n	61f8 <add+0x28>
  {
    u8 carry = x & y;
    61e2:	79fa      	ldrb	r2, [r7, #7]
    61e4:	79bb      	ldrb	r3, [r7, #6]
    61e6:	4013      	ands	r3, r2
    61e8:	73fb      	strb	r3, [r7, #15]
    x = x ^ y;
    61ea:	79fa      	ldrb	r2, [r7, #7]
    61ec:	79bb      	ldrb	r3, [r7, #6]
    61ee:	4053      	eors	r3, r2
    61f0:	71fb      	strb	r3, [r7, #7]
    y = carry << 1;
    61f2:	7bfb      	ldrb	r3, [r7, #15]
    61f4:	005b      	lsls	r3, r3, #1
    61f6:	71bb      	strb	r3, [r7, #6]
        return in & 0xFF;
}

u8 add (u8 x, u8 y)
{
  while (y)
    61f8:	79bb      	ldrb	r3, [r7, #6]
    61fa:	2b00      	cmp	r3, #0
    61fc:	d1f1      	bne.n	61e2 <add+0x12>
  {
    u8 carry = x & y;
    x = x ^ y;
    y = carry << 1;
  }
  return x;
    61fe:	79fb      	ldrb	r3, [r7, #7]
}
    6200:	4618      	mov	r0, r3
    6202:	3714      	adds	r7, #20
    6204:	46bd      	mov	sp, r7
    6206:	f85d 7b04 	ldr.w	r7, [sp], #4
    620a:	4770      	bx	lr

0000620c <bt_stream_proposed>:

// wpson
void bt_stream_proposed()
{
    620c:	b590      	push	{r4, r7, lr}
    620e:	b091      	sub	sp, #68	; 0x44
    6210:	af00      	add	r7, sp, #0

	u8 epstat;
//	u16 f;
//	u8 buf[DMA_SIZE];
	u8 rssi[50];
	int i = 0;
    6212:	2300      	movs	r3, #0
    6214:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (i = 0; i < 50; i++)
    6216:	2300      	movs	r3, #0
    6218:	63fb      	str	r3, [r7, #60]	; 0x3c
    621a:	e007      	b.n	622c <bt_stream_proposed+0x20>
		rssi[i] = 0;
    621c:	463a      	mov	r2, r7
    621e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6220:	4413      	add	r3, r2
    6222:	2200      	movs	r2, #0
    6224:	701a      	strb	r2, [r3, #0]
	u8 epstat;
//	u16 f;
//	u8 buf[DMA_SIZE];
	u8 rssi[50];
	int i = 0;
	for (i = 0; i < 50; i++)
    6226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6228:	3301      	adds	r3, #1
    622a:	63fb      	str	r3, [r7, #60]	; 0x3c
    622c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    622e:	2b31      	cmp	r3, #49	; 0x31
    6230:	ddf4      	ble.n	621c <bt_stream_proposed+0x10>
		rssi[i] = 0;
//	u8 length = 50;
	int window = 0;
    6232:	2300      	movs	r3, #0
    6234:	63bb      	str	r3, [r7, #56]	; 0x38
//	u8 index = 0;
	u8 old = 0;
    6236:	2300      	movs	r3, #0
    6238:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	u8 now = 0;
    623c:	2300      	movs	r3, #0
    623e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	u8 diff = 0;
    6242:	2300      	movs	r3, #0
    6244:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	u8 k = 0;
    6248:	2300      	movs	r3, #0
    624a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	u8 temp = 0;
    624e:	2300      	movs	r3, #0
    6250:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	u8 outage = 0;
    6254:	2300      	movs	r3, #0
    6256:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//	TXLED_SET;
	queue_init();
    625a:	f002 fd89 	bl	8d70 <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    625e:	4b75      	ldr	r3, [pc, #468]	; (6434 <bt_stream_proposed+0x228>)
    6260:	2280      	movs	r2, #128	; 0x80
    6262:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif
	cc2400_set(MANAND, 0x7fff);
    6264:	200d      	movs	r0, #13
    6266:	f647 71ff 	movw	r1, #32767	; 0x7fff
    626a:	f003 fff9 	bl	a260 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    626e:	2012      	movs	r0, #18
    6270:	f642 3122 	movw	r1, #11042	; 0x2b22
    6274:	f003 fff4 	bl	a260 <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    6278:	2014      	movs	r0, #20
    627a:	f241 214b 	movw	r1, #4683	; 0x124b
    627e:	f003 ffef 	bl	a260 <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    6282:	2020      	movs	r0, #32
    6284:	f240 5161 	movw	r1, #1377	; 0x561
    6288:	f003 ffea 	bl	a260 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    628c:	2003      	movs	r0, #3
    628e:	2140      	movs	r1, #64	; 0x40
    6290:	f003 ffe6 	bl	a260 <cc2400_set>
//	cc2400_set(SYNCL, 0x00ff);
	
//	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
//	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
	
	while (!(cc2400_status() & XOSC16M_STABLE));
    6294:	bf00      	nop
    6296:	f004 f89b 	bl	a3d0 <cc2400_status>
    629a:	4603      	mov	r3, r0
    629c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    62a0:	2b00      	cmp	r3, #0
    62a2:	d0f8      	beq.n	6296 <bt_stream_proposed+0x8a>
	while ((cc2400_status() & FS_LOCK));
    62a4:	bf00      	nop
    62a6:	f004 f893 	bl	a3d0 <cc2400_status>
    62aa:	4603      	mov	r3, r0
    62ac:	f003 0304 	and.w	r3, r3, #4
    62b0:	2b00      	cmp	r3, #0
    62b2:	d1f8      	bne.n	62a6 <bt_stream_proposed+0x9a>

	cc2400_set(FSDIV, channel - 1);
    62b4:	4b60      	ldr	r3, [pc, #384]	; (6438 <bt_stream_proposed+0x22c>)
    62b6:	881b      	ldrh	r3, [r3, #0]
    62b8:	b29b      	uxth	r3, r3
    62ba:	3b01      	subs	r3, #1
    62bc:	b29b      	uxth	r3, r3
    62be:	2002      	movs	r0, #2
    62c0:	4619      	mov	r1, r3
    62c2:	f003 ffcd 	bl	a260 <cc2400_set>
	cc2400_strobe(SFSON);
    62c6:	2061      	movs	r0, #97	; 0x61
    62c8:	f004 f88c 	bl	a3e4 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    62cc:	bf00      	nop
    62ce:	f004 f87f 	bl	a3d0 <cc2400_status>
    62d2:	4603      	mov	r3, r0
    62d4:	f003 0304 	and.w	r3, r3, #4
    62d8:	2b00      	cmp	r3, #0
    62da:	d0f8      	beq.n	62ce <bt_stream_proposed+0xc2>
	cc2400_strobe(SRX);
    62dc:	2062      	movs	r0, #98	; 0x62
    62de:	f004 f881 	bl	a3e4 <cc2400_strobe>
	
	while (requested_mode == MODE_RX_PROPOSED)
    62e2:	e09a      	b.n	641a <bt_stream_proposed+0x20e>
	{

			
//		while (!(cc2400_status () & SYNC_RECEIVED));	
		window = 0;
    62e4:	2300      	movs	r3, #0
    62e6:	63bb      	str	r3, [r7, #56]	; 0x38
		old = 0;
    62e8:	2300      	movs	r3, #0
    62ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		now = 0;
    62ee:	2300      	movs	r3, #0
    62f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		diff = 0;
    62f4:	2300      	movs	r3, #0
    62f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		

//		diff_ts = CLK100NS - first_ts;
//wpson
		while (window < 8)
    62fa:	e060      	b.n	63be <bt_stream_proposed+0x1b2>
		{	
			first_ts = CLK100NS;
    62fc:	4b4f      	ldr	r3, [pc, #316]	; (643c <bt_stream_proposed+0x230>)
    62fe:	681b      	ldr	r3, [r3, #0]
    6300:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6304:	f640 4235 	movw	r2, #3125	; 0xc35
    6308:	fb02 f203 	mul.w	r2, r2, r3
    630c:	4b4c      	ldr	r3, [pc, #304]	; (6440 <bt_stream_proposed+0x234>)
    630e:	681b      	ldr	r3, [r3, #0]
    6310:	4413      	add	r3, r2
    6312:	4a4c      	ldr	r2, [pc, #304]	; (6444 <bt_stream_proposed+0x238>)
    6314:	6013      	str	r3, [r2, #0]
			now = cc2400_get_rev(FREQEST);	 
    6316:	2007      	movs	r0, #7
    6318:	f7ff ff44 	bl	61a4 <cc2400_get_rev>
    631c:	4603      	mov	r3, r0
    631e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			diff = add (now, add (~old, 1)); // 5->8
    6322:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    6326:	43db      	mvns	r3, r3
    6328:	b2db      	uxtb	r3, r3
    632a:	4618      	mov	r0, r3
    632c:	2101      	movs	r1, #1
    632e:	f7ff ff4f 	bl	61d0 <add>
    6332:	4603      	mov	r3, r0
    6334:	461a      	mov	r2, r3
    6336:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    633a:	4618      	mov	r0, r3
    633c:	4611      	mov	r1, r2
    633e:	f7ff ff47 	bl	61d0 <add>
    6342:	4603      	mov	r3, r0
    6344:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			if (diff & 0x80) 
    6348:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    634c:	b25b      	sxtb	r3, r3
    634e:	2b00      	cmp	r3, #0
    6350:	da0a      	bge.n	6368 <bt_stream_proposed+0x15c>
				diff = add (~diff, 1);	
    6352:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    6356:	43db      	mvns	r3, r3
    6358:	b2db      	uxtb	r3, r3
    635a:	4618      	mov	r0, r3
    635c:	2101      	movs	r1, #1
    635e:	f7ff ff37 	bl	61d0 <add>
    6362:	4603      	mov	r3, r0
    6364:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

			if (diff < 0x03)
    6368:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    636c:	2b02      	cmp	r3, #2
    636e:	d803      	bhi.n	6378 <bt_stream_proposed+0x16c>
				window++;
    6370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6372:	3301      	adds	r3, #1
    6374:	63bb      	str	r3, [r7, #56]	; 0x38
    6376:	e011      	b.n	639c <bt_stream_proposed+0x190>
			else
			{
				outage = add (outage, 1);
    6378:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    637c:	4618      	mov	r0, r3
    637e:	2101      	movs	r1, #1
    6380:	f7ff ff26 	bl	61d0 <add>
    6384:	4603      	mov	r3, r0
    6386:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				if (outage > 1)
    638a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    638e:	2b01      	cmp	r3, #1
    6390:	d904      	bls.n	639c <bt_stream_proposed+0x190>
				{
					outage = 0;
    6392:	2300      	movs	r3, #0
    6394:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					window = 0;
    6398:	2300      	movs	r3, #0
    639a:	63bb      	str	r3, [r7, #56]	; 0x38
				}
			}
			old = now;
    639c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    63a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			second_ts = CLK100NS;
    63a4:	4b25      	ldr	r3, [pc, #148]	; (643c <bt_stream_proposed+0x230>)
    63a6:	681b      	ldr	r3, [r3, #0]
    63a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    63ac:	f640 4235 	movw	r2, #3125	; 0xc35
    63b0:	fb02 f203 	mul.w	r2, r2, r3
    63b4:	4b22      	ldr	r3, [pc, #136]	; (6440 <bt_stream_proposed+0x234>)
    63b6:	681b      	ldr	r3, [r3, #0]
    63b8:	4413      	add	r3, r2
    63ba:	4a23      	ldr	r2, [pc, #140]	; (6448 <bt_stream_proposed+0x23c>)
    63bc:	6013      	str	r3, [r2, #0]
		diff = 0;
		

//		diff_ts = CLK100NS - first_ts;
//wpson
		while (window < 8)
    63be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    63c0:	2b07      	cmp	r3, #7
    63c2:	dd9b      	ble.n	62fc <bt_stream_proposed+0xf0>
			}
			old = now;
			second_ts = CLK100NS;
		}
	
		rssi_avg = ((int8_t)cc2400_get_rev(RSSI) + (int8_t)cc2400_get_rev(RSSI))/2;
    63c4:	2006      	movs	r0, #6
    63c6:	f7ff feed 	bl	61a4 <cc2400_get_rev>
    63ca:	4603      	mov	r3, r0
    63cc:	b2db      	uxtb	r3, r3
    63ce:	b25c      	sxtb	r4, r3
    63d0:	2006      	movs	r0, #6
    63d2:	f7ff fee7 	bl	61a4 <cc2400_get_rev>
    63d6:	4603      	mov	r3, r0
    63d8:	b2db      	uxtb	r3, r3
    63da:	b25b      	sxtb	r3, r3
    63dc:	4423      	add	r3, r4
    63de:	0fda      	lsrs	r2, r3, #31
    63e0:	4413      	add	r3, r2
    63e2:	105b      	asrs	r3, r3, #1
    63e4:	b2da      	uxtb	r2, r3
    63e6:	4b19      	ldr	r3, [pc, #100]	; (644c <bt_stream_proposed+0x240>)
    63e8:	701a      	strb	r2, [r3, #0]
		freq_avg = now;
    63ea:	4a19      	ldr	r2, [pc, #100]	; (6450 <bt_stream_proposed+0x244>)
    63ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    63f0:	7013      	strb	r3, [r2, #0]
	
		diff_ts = second_ts - first_ts;
    63f2:	4b15      	ldr	r3, [pc, #84]	; (6448 <bt_stream_proposed+0x23c>)
    63f4:	681a      	ldr	r2, [r3, #0]
    63f6:	4b13      	ldr	r3, [pc, #76]	; (6444 <bt_stream_proposed+0x238>)
    63f8:	681b      	ldr	r3, [r3, #0]
    63fa:	1ad3      	subs	r3, r2, r3
    63fc:	4a15      	ldr	r2, [pc, #84]	; (6454 <bt_stream_proposed+0x248>)
    63fe:	6013      	str	r3, [r2, #0]
		enqueue_with_ts(FREQ_PACKET, rssi, diff_ts);
    6400:	4b14      	ldr	r3, [pc, #80]	; (6454 <bt_stream_proposed+0x248>)
    6402:	681b      	ldr	r3, [r3, #0]
    6404:	463a      	mov	r2, r7
    6406:	2007      	movs	r0, #7
    6408:	4611      	mov	r1, r2
    640a:	461a      	mov	r2, r3
    640c:	f7fe f91a 	bl	4644 <enqueue_with_ts>
//		enqueue(FREQ_PACKET, rssi);
		handle_usb(clkn);
    6410:	4b0a      	ldr	r3, [pc, #40]	; (643c <bt_stream_proposed+0x230>)
    6412:	681b      	ldr	r3, [r3, #0]
    6414:	4618      	mov	r0, r3
    6416:	f002 fd4b 	bl	8eb0 <handle_usb>
	cc2400_set(FSDIV, channel - 1);
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
	while (requested_mode == MODE_RX_PROPOSED)
    641a:	4b0f      	ldr	r3, [pc, #60]	; (6458 <bt_stream_proposed+0x24c>)
    641c:	781b      	ldrb	r3, [r3, #0]
    641e:	b2db      	uxtb	r3, r3
    6420:	2b0f      	cmp	r3, #15
    6422:	f43f af5f 	beq.w	62e4 <bt_stream_proposed+0xd8>
	
//		msleep(500);	
		cc2400_strobe (SRX);
*/
	}
	mode = MODE_IDLE;
    6426:	4b0d      	ldr	r3, [pc, #52]	; (645c <bt_stream_proposed+0x250>)
    6428:	2200      	movs	r2, #0
    642a:	701a      	strb	r2, [r3, #0]
//	dio_ssp_stop ();
//	cs_trigger_disable ();
}
    642c:	3744      	adds	r7, #68	; 0x44
    642e:	46bd      	mov	sp, r7
    6430:	bd90      	pop	{r4, r7, pc}
    6432:	bf00      	nop
    6434:	2009c058 	.word	0x2009c058
    6438:	1000049c 	.word	0x1000049c
    643c:	10000be4 	.word	0x10000be4
    6440:	40004008 	.word	0x40004008
    6444:	10000cf8 	.word	0x10000cf8
    6448:	1000107c 	.word	0x1000107c
    644c:	1000102d 	.word	0x1000102d
    6450:	10000be9 	.word	0x10000be9
    6454:	10001068 	.word	0x10001068
    6458:	10000a3f 	.word	0x10000a3f
    645c:	10000a3e 	.word	0x10000a3e

00006460 <bt_stream_freq>:



// wpson
void bt_stream_freq()
{
    6460:	b590      	push	{r4, r7, lr}
    6462:	b0a1      	sub	sp, #132	; 0x84
    6464:	af00      	add	r7, sp, #0
//	TXLED_SET;
	RXLED_CLR;
    6466:	4bb8      	ldr	r3, [pc, #736]	; (6748 <bt_stream_freq+0x2e8>)
    6468:	2210      	movs	r2, #16
    646a:	601a      	str	r2, [r3, #0]
	int i;
	
	u8 freq_buf[45];
	queue_init();
    646c:	f002 fc80 	bl	8d70 <queue_init>
	dio_ssp_init();
    6470:	f003 fe24 	bl	a0bc <dio_ssp_init>
	dma_init_le();
    6474:	f7ff f8fc 	bl	5670 <dma_init_le>
	dio_ssp_start();
    6478:	f7ff fa6a 	bl	5950 <dio_ssp_start>
	
	cc2400_set(MANAND, 0x7fff);
    647c:	200d      	movs	r0, #13
    647e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    6482:	f003 feed 	bl	a260 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    6486:	2012      	movs	r0, #18
    6488:	f642 3122 	movw	r1, #11042	; 0x2b22
    648c:	f003 fee8 	bl	a260 <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    6490:	2014      	movs	r0, #20
    6492:	f241 214b 	movw	r1, #4683	; 0x124b
    6496:	f003 fee3 	bl	a260 <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    649a:	2020      	movs	r0, #32
    649c:	f240 5161 	movw	r1, #1377	; 0x561
    64a0:	f003 fede 	bl	a260 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    64a4:	2003      	movs	r0, #3
    64a6:	2140      	movs	r1, #64	; 0x40
    64a8:	f003 feda 	bl	a260 <cc2400_set>

//	cc2400_set(SYNCH, 0xf9ae);
//	cc2400_set(SYNCL, 0x1584);
	
	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
    64ac:	48a7      	ldr	r0, [pc, #668]	; (674c <bt_stream_freq+0x2ec>)
    64ae:	f003 fd05 	bl	9ebc <rbit>
    64b2:	4603      	mov	r3, r0
    64b4:	b29b      	uxth	r3, r3
    64b6:	202c      	movs	r0, #44	; 0x2c
    64b8:	4619      	mov	r1, r3
    64ba:	f003 fed1 	bl	a260 <cc2400_set>
	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
    64be:	48a3      	ldr	r0, [pc, #652]	; (674c <bt_stream_freq+0x2ec>)
    64c0:	f003 fcfc 	bl	9ebc <rbit>
    64c4:	4603      	mov	r3, r0
    64c6:	0c1b      	lsrs	r3, r3, #16
    64c8:	b29b      	uxth	r3, r3
    64ca:	202d      	movs	r0, #45	; 0x2d
    64cc:	4619      	mov	r1, r3
    64ce:	f003 fec7 	bl	a260 <cc2400_set>
	
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    64d2:	4b9f      	ldr	r3, [pc, #636]	; (6750 <bt_stream_freq+0x2f0>)
    64d4:	2280      	movs	r2, #128	; 0x80
    64d6:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif

	while (!(cc2400_status() & XOSC16M_STABLE));
    64d8:	bf00      	nop
    64da:	f003 ff79 	bl	a3d0 <cc2400_status>
    64de:	4603      	mov	r3, r0
    64e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    64e4:	2b00      	cmp	r3, #0
    64e6:	d0f8      	beq.n	64da <bt_stream_freq+0x7a>
	while ((cc2400_status() & FS_LOCK));
    64e8:	bf00      	nop
    64ea:	f003 ff71 	bl	a3d0 <cc2400_status>
    64ee:	4603      	mov	r3, r0
    64f0:	f003 0304 	and.w	r3, r3, #4
    64f4:	2b00      	cmp	r3, #0
    64f6:	d1f8      	bne.n	64ea <bt_stream_freq+0x8a>

	cc2400_set(FSDIV, channel - 1);
    64f8:	4b96      	ldr	r3, [pc, #600]	; (6754 <bt_stream_freq+0x2f4>)
    64fa:	881b      	ldrh	r3, [r3, #0]
    64fc:	b29b      	uxth	r3, r3
    64fe:	3b01      	subs	r3, #1
    6500:	b29b      	uxth	r3, r3
    6502:	2002      	movs	r0, #2
    6504:	4619      	mov	r1, r3
    6506:	f003 feab 	bl	a260 <cc2400_set>
	cc2400_strobe(SFSON);
    650a:	2061      	movs	r0, #97	; 0x61
    650c:	f003 ff6a 	bl	a3e4 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6510:	bf00      	nop
    6512:	f003 ff5d 	bl	a3d0 <cc2400_status>
    6516:	4603      	mov	r3, r0
    6518:	f003 0304 	and.w	r3, r3, #4
    651c:	2b00      	cmp	r3, #0
    651e:	d0f8      	beq.n	6512 <bt_stream_freq+0xb2>
	cc2400_strobe(SRX);
    6520:	2062      	movs	r0, #98	; 0x62
    6522:	f003 ff5f 	bl	a3e4 <cc2400_strobe>
	
//	cc2400_rx();
	while (requested_mode == MODE_RX_FREQ) {
    6526:	e144      	b.n	67b2 <bt_stream_freq+0x352>
		
		while (!(cc2400_status () & SYNC_RECEIVED));
    6528:	bf00      	nop
    652a:	f003 ff51 	bl	a3d0 <cc2400_status>
    652e:	4603      	mov	r3, r0
    6530:	f003 0310 	and.w	r3, r3, #16
    6534:	2b00      	cmp	r3, #0
    6536:	d0f8      	beq.n	652a <bt_stream_freq+0xca>
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/

		for (i = 0; i < 45; i++)
    6538:	2300      	movs	r3, #0
    653a:	67fb      	str	r3, [r7, #124]	; 0x7c
    653c:	e00d      	b.n	655a <bt_stream_freq+0xfa>
		{
			freq_buf[i] = cc2400_get_rev(FREQEST);	
    653e:	2007      	movs	r0, #7
    6540:	f7ff fe30 	bl	61a4 <cc2400_get_rev>
    6544:	4603      	mov	r3, r0
    6546:	4619      	mov	r1, r3
    6548:	f107 0234 	add.w	r2, r7, #52	; 0x34
    654c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    654e:	4413      	add	r3, r2
    6550:	460a      	mov	r2, r1
    6552:	701a      	strb	r2, [r3, #0]
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/

		for (i = 0; i < 45; i++)
    6554:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    6556:	3301      	adds	r3, #1
    6558:	67fb      	str	r3, [r7, #124]	; 0x7c
    655a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    655c:	2b2c      	cmp	r3, #44	; 0x2c
    655e:	ddee      	ble.n	653e <bt_stream_freq+0xde>
		{
			freq_buf[i] = cc2400_get_rev(FREQEST);	
		}


		while (!rx_tc);
    6560:	bf00      	nop
    6562:	4b7d      	ldr	r3, [pc, #500]	; (6758 <bt_stream_freq+0x2f8>)
    6564:	681b      	ldr	r3, [r3, #0]
    6566:	2b00      	cmp	r3, #0
    6568:	d0fb      	beq.n	6562 <bt_stream_freq+0x102>
	
		RXLED_SET;
    656a:	4b7c      	ldr	r3, [pc, #496]	; (675c <bt_stream_freq+0x2fc>)
    656c:	2210      	movs	r2, #16
    656e:	601a      	str	r2, [r3, #0]
		if (rx_err) {
    6570:	4b7b      	ldr	r3, [pc, #492]	; (6760 <bt_stream_freq+0x300>)
    6572:	681b      	ldr	r3, [r3, #0]
    6574:	2b00      	cmp	r3, #0
    6576:	d007      	beq.n	6588 <bt_stream_freq+0x128>
		status |= DMA_ERROR;
    6578:	4b7a      	ldr	r3, [pc, #488]	; (6764 <bt_stream_freq+0x304>)
    657a:	781b      	ldrb	r3, [r3, #0]
    657c:	b2db      	uxtb	r3, r3
    657e:	f043 0302 	orr.w	r3, r3, #2
    6582:	b2da      	uxtb	r2, r3
    6584:	4b77      	ldr	r3, [pc, #476]	; (6764 <bt_stream_freq+0x304>)
    6586:	701a      	strb	r2, [r3, #0]
		}	
		if (rx_tc > 1)
    6588:	4b73      	ldr	r3, [pc, #460]	; (6758 <bt_stream_freq+0x2f8>)
    658a:	681b      	ldr	r3, [r3, #0]
    658c:	2b01      	cmp	r3, #1
    658e:	d907      	bls.n	65a0 <bt_stream_freq+0x140>
			status |= DMA_OVERFLOW;
    6590:	4b74      	ldr	r3, [pc, #464]	; (6764 <bt_stream_freq+0x304>)
    6592:	781b      	ldrb	r3, [r3, #0]
    6594:	b2db      	uxtb	r3, r3
    6596:	f043 0301 	orr.w	r3, r3, #1
    659a:	b2da      	uxtb	r2, r3
    659c:	4b71      	ldr	r3, [pc, #452]	; (6764 <bt_stream_freq+0x304>)
    659e:	701a      	strb	r2, [r3, #0]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    65a0:	463b      	mov	r3, r7
    65a2:	67bb      	str	r3, [r7, #120]	; 0x78
		packet[0] = le.access_address;
    65a4:	4b70      	ldr	r3, [pc, #448]	; (6768 <bt_stream_freq+0x308>)
    65a6:	681b      	ldr	r3, [r3, #0]
    65a8:	603b      	str	r3, [r7, #0]

                while (DMACC0Config & DMACCxConfig_E && rx_err == 0);
    65aa:	bf00      	nop
    65ac:	4b6f      	ldr	r3, [pc, #444]	; (676c <bt_stream_freq+0x30c>)
    65ae:	681b      	ldr	r3, [r3, #0]
    65b0:	f003 0301 	and.w	r3, r3, #1
    65b4:	2b00      	cmp	r3, #0
    65b6:	d003      	beq.n	65c0 <bt_stream_freq+0x160>
    65b8:	4b69      	ldr	r3, [pc, #420]	; (6760 <bt_stream_freq+0x300>)
    65ba:	681b      	ldr	r3, [r3, #0]
    65bc:	2b00      	cmp	r3, #0
    65be:	d0f5      	beq.n	65ac <bt_stream_freq+0x14c>
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    65c0:	4a6b      	ldr	r2, [pc, #428]	; (6770 <bt_stream_freq+0x310>)
    65c2:	4b6b      	ldr	r3, [pc, #428]	; (6770 <bt_stream_freq+0x310>)
    65c4:	681b      	ldr	r3, [r3, #0]
    65c6:	f023 0301 	bic.w	r3, r3, #1
    65ca:	6013      	str	r3, [r2, #0]
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    65cc:	4b61      	ldr	r3, [pc, #388]	; (6754 <bt_stream_freq+0x2f4>)
    65ce:	881b      	ldrh	r3, [r3, #0]
    65d0:	b29b      	uxth	r3, r3
    65d2:	b2db      	uxtb	r3, r3
    65d4:	3b62      	subs	r3, #98	; 0x62
    65d6:	b2db      	uxtb	r3, r3
    65d8:	4618      	mov	r0, r3
    65da:	f002 fa49 	bl	8a70 <btle_channel_index>
    65de:	4603      	mov	r3, r0
    65e0:	461a      	mov	r2, r3
    65e2:	4613      	mov	r3, r2
    65e4:	005b      	lsls	r3, r3, #1
    65e6:	4413      	add	r3, r2
    65e8:	011b      	lsls	r3, r3, #4
    65ea:	4a62      	ldr	r2, [pc, #392]	; (6774 <bt_stream_freq+0x314>)
    65ec:	4413      	add	r3, r2
    65ee:	677b      	str	r3, [r7, #116]	; 0x74
		for (i = 0; i < 44; i += 4) {
    65f0:	2300      	movs	r3, #0
    65f2:	67fb      	str	r3, [r7, #124]	; 0x7c
    65f4:	e034      	b.n	6660 <bt_stream_freq+0x200>
			uint32_t v = rxbuf1[i+0] << 24
    65f6:	4a60      	ldr	r2, [pc, #384]	; (6778 <bt_stream_freq+0x318>)
    65f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    65fa:	4413      	add	r3, r2
    65fc:	781b      	ldrb	r3, [r3, #0]
    65fe:	061a      	lsls	r2, r3, #24
                                          | rxbuf1[i+1] << 16
    6600:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    6602:	3301      	adds	r3, #1
    6604:	495c      	ldr	r1, [pc, #368]	; (6778 <bt_stream_freq+0x318>)
    6606:	5ccb      	ldrb	r3, [r1, r3]
    6608:	041b      	lsls	r3, r3, #16
    660a:	431a      	orrs	r2, r3
                                      | rxbuf1[i+2] << 8
    660c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    660e:	3302      	adds	r3, #2
    6610:	4959      	ldr	r1, [pc, #356]	; (6778 <bt_stream_freq+0x318>)
    6612:	5ccb      	ldrb	r3, [r1, r3]
    6614:	021b      	lsls	r3, r3, #8
    6616:	4313      	orrs	r3, r2
                                          | rxbuf1[i+3] << 0;
    6618:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    661a:	3203      	adds	r2, #3
    661c:	4956      	ldr	r1, [pc, #344]	; (6778 <bt_stream_freq+0x318>)
    661e:	5c8a      	ldrb	r2, [r1, r2]
    6620:	4313      	orrs	r3, r2
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6622:	673b      	str	r3, [r7, #112]	; 0x70
                                          | rxbuf1[i+1] << 16
                                      | rxbuf1[i+2] << 8
                                          | rxbuf1[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
    6624:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    6626:	2b00      	cmp	r3, #0
    6628:	da00      	bge.n	662c <bt_stream_freq+0x1cc>
    662a:	3303      	adds	r3, #3
    662c:	109b      	asrs	r3, r3, #2
    662e:	1c5c      	adds	r4, r3, #1
    6630:	6f38      	ldr	r0, [r7, #112]	; 0x70
    6632:	f003 fc43 	bl	9ebc <rbit>
    6636:	4601      	mov	r1, r0
    6638:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    663a:	2b00      	cmp	r3, #0
    663c:	da00      	bge.n	6640 <bt_stream_freq+0x1e0>
    663e:	3303      	adds	r3, #3
    6640:	109b      	asrs	r3, r3, #2
    6642:	009b      	lsls	r3, r3, #2
    6644:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    6646:	4413      	add	r3, r2
    6648:	681b      	ldr	r3, [r3, #0]
    664a:	ea81 0203 	eor.w	r2, r1, r3
    664e:	00a3      	lsls	r3, r4, #2
    6650:	f107 0180 	add.w	r1, r7, #128	; 0x80
    6654:	440b      	add	r3, r1
    6656:	f843 2c80 	str.w	r2, [r3, #-128]
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
    665a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    665c:	3304      	adds	r3, #4
    665e:	67fb      	str	r3, [r7, #124]	; 0x7c
    6660:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    6662:	2b2b      	cmp	r3, #43	; 0x2b
    6664:	ddc7      	ble.n	65f6 <bt_stream_freq+0x196>
                                      | eddystone[i+2] << 8
                                          | eddystone[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
		}
*/
		unsigned len = (p[5] & 0x3f) + 2;
    6666:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    6668:	3305      	adds	r3, #5
    666a:	781b      	ldrb	r3, [r3, #0]
    666c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6670:	3302      	adds	r3, #2
    6672:	66fb      	str	r3, [r7, #108]	; 0x6c
		
		if (len > 39)
    6674:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6676:	2b27      	cmp	r3, #39	; 0x27
    6678:	d900      	bls.n	667c <bt_stream_freq+0x21c>
			goto rx_flush;
    667a:	e040      	b.n	66fe <bt_stream_freq+0x29e>

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    667c:	4b3a      	ldr	r3, [pc, #232]	; (6768 <bt_stream_freq+0x308>)
    667e:	68d9      	ldr	r1, [r3, #12]
    6680:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    6682:	1d1a      	adds	r2, r3, #4
    6684:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6686:	4608      	mov	r0, r1
    6688:	4611      	mov	r1, r2
    668a:	461a      	mov	r2, r3
    668c:	f002 faf4 	bl	8c78 <btle_crcgen_lut>
    6690:	66b8      	str	r0, [r7, #104]	; 0x68
		u32 wire_crc = (p[4+len+2] << 16)
    6692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6694:	3306      	adds	r3, #6
    6696:	6fba      	ldr	r2, [r7, #120]	; 0x78
    6698:	4413      	add	r3, r2
    669a:	781b      	ldrb	r3, [r3, #0]
    669c:	041a      	lsls	r2, r3, #16
                                                 | (p[4+len+1] << 8)
    669e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    66a0:	3305      	adds	r3, #5
    66a2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
    66a4:	440b      	add	r3, r1
    66a6:	781b      	ldrb	r3, [r3, #0]
    66a8:	021b      	lsls	r3, r3, #8
    66aa:	4313      	orrs	r3, r2
                                                 | (p[4+len+0] << 0);
    66ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    66ae:	3204      	adds	r2, #4
    66b0:	6fb9      	ldr	r1, [r7, #120]	; 0x78
    66b2:	440a      	add	r2, r1
    66b4:	7812      	ldrb	r2, [r2, #0]
    66b6:	4313      	orrs	r3, r2
		
		if (len > 39)
			goto rx_flush;

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
		u32 wire_crc = (p[4+len+2] << 16)
    66b8:	667b      	str	r3, [r7, #100]	; 0x64
                                                 | (p[4+len+1] << 8)
                                                 | (p[4+len+0] << 0);
                if (calc_crc != wire_crc) // skip packets with a bad CRC
    66ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
    66bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    66be:	429a      	cmp	r2, r3
    66c0:	d000      	beq.n	66c4 <bt_stream_freq+0x264>
                        goto rx_flush;
    66c2:	e01c      	b.n	66fe <bt_stream_freq+0x29e>

		
		if (p[38] == 0x00 && p[39] == 0x3d)
    66c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    66c6:	3326      	adds	r3, #38	; 0x26
    66c8:	781b      	ldrb	r3, [r3, #0]
    66ca:	2b00      	cmp	r3, #0
    66cc:	d114      	bne.n	66f8 <bt_stream_freq+0x298>
    66ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    66d0:	3327      	adds	r3, #39	; 0x27
    66d2:	781b      	ldrb	r3, [r3, #0]
    66d4:	2b3d      	cmp	r3, #61	; 0x3d
    66d6:	d10f      	bne.n	66f8 <bt_stream_freq+0x298>
		{
			device_index = p[40];
    66d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    66da:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    66de:	4b27      	ldr	r3, [pc, #156]	; (677c <bt_stream_freq+0x31c>)
    66e0:	701a      	strb	r2, [r3, #0]
			enqueue (MESSAGE, freq_buf);
    66e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
    66e6:	2002      	movs	r0, #2
    66e8:	4619      	mov	r1, r3
    66ea:	f7fd feed 	bl	44c8 <enqueue>
			handle_usb(clkn);
    66ee:	4b24      	ldr	r3, [pc, #144]	; (6780 <bt_stream_freq+0x320>)
    66f0:	681b      	ldr	r3, [r3, #0]
    66f2:	4618      	mov	r0, r3
    66f4:	f002 fbdc 	bl	8eb0 <handle_usb>
		}
		RXLED_CLR;
    66f8:	4b13      	ldr	r3, [pc, #76]	; (6748 <bt_stream_freq+0x2e8>)
    66fa:	2210      	movs	r2, #16
    66fc:	601a      	str	r2, [r3, #0]
	       
	rx_flush:
		cc2400_strobe (SRFOFF);
    66fe:	2064      	movs	r0, #100	; 0x64
    6700:	f003 fe70 	bl	a3e4 <cc2400_strobe>
                while ((cc2400_status () & FS_LOCK));
    6704:	bf00      	nop
    6706:	f003 fe63 	bl	a3d0 <cc2400_status>
    670a:	4603      	mov	r3, r0
    670c:	f003 0304 	and.w	r3, r3, #4
    6710:	2b00      	cmp	r3, #0
    6712:	d1f8      	bne.n	6706 <bt_stream_freq+0x2a6>

                while (!(cc2400_status () & XOSC16M_STABLE));
    6714:	bf00      	nop
    6716:	f003 fe5b 	bl	a3d0 <cc2400_status>
    671a:	4603      	mov	r3, r0
    671c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6720:	2b00      	cmp	r3, #0
    6722:	d0f8      	beq.n	6716 <bt_stream_freq+0x2b6>

                cc2400_strobe (SFSON);
    6724:	2061      	movs	r0, #97	; 0x61
    6726:	f003 fe5d 	bl	a3e4 <cc2400_strobe>
                while (!(cc2400_status () & FS_LOCK));
    672a:	bf00      	nop
    672c:	f003 fe50 	bl	a3d0 <cc2400_status>
    6730:	4603      	mov	r3, r0
    6732:	f003 0304 	and.w	r3, r3, #4
    6736:	2b00      	cmp	r3, #0
    6738:	d0f8      	beq.n	672c <bt_stream_freq+0x2cc>

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    673a:	4a0d      	ldr	r2, [pc, #52]	; (6770 <bt_stream_freq+0x310>)
    673c:	4b0c      	ldr	r3, [pc, #48]	; (6770 <bt_stream_freq+0x310>)
    673e:	681b      	ldr	r3, [r3, #0]
    6740:	f023 0301 	bic.w	r3, r3, #1
    6744:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    6746:	e021      	b.n	678c <bt_stream_freq+0x32c>
    6748:	2009c03c 	.word	0x2009c03c
    674c:	8e89bed6 	.word	0x8e89bed6
    6750:	2009c058 	.word	0x2009c058
    6754:	1000049c 	.word	0x1000049c
    6758:	10000b00 	.word	0x10000b00
    675c:	2009c038 	.word	0x2009c038
    6760:	100010bc 	.word	0x100010bc
    6764:	10000a48 	.word	0x10000a48
    6768:	10000458 	.word	0x10000458
    676c:	50004110 	.word	0x50004110
    6770:	40030024 	.word	0x40030024
    6774:	0000c068 	.word	0x0000c068
    6778:	10001088 	.word	0x10001088
    677c:	10000be8 	.word	0x10000be8
    6780:	10000be4 	.word	0x10000be4
                        u8 tmp = (u8)DIO_SSP_DR;
    6784:	4b0f      	ldr	r3, [pc, #60]	; (67c4 <bt_stream_freq+0x364>)
    6786:	681b      	ldr	r3, [r3, #0]
    6788:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

                cc2400_strobe (SFSON);
                while (!(cc2400_status () & FS_LOCK));

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    678c:	4b0e      	ldr	r3, [pc, #56]	; (67c8 <bt_stream_freq+0x368>)
    678e:	681b      	ldr	r3, [r3, #0]
    6790:	f003 0304 	and.w	r3, r3, #4
    6794:	2b00      	cmp	r3, #0
    6796:	d1f5      	bne.n	6784 <bt_stream_freq+0x324>
                        u8 tmp = (u8)DIO_SSP_DR;
                }
		dma_init_le();
    6798:	f7fe ff6a 	bl	5670 <dma_init_le>
		dio_ssp_start();
    679c:	f7ff f8d8 	bl	5950 <dio_ssp_start>
		
                cc2400_strobe (SRX);
    67a0:	2062      	movs	r0, #98	; 0x62
    67a2:	f003 fe1f 	bl	a3e4 <cc2400_strobe>
		rx_tc = 0;
    67a6:	4b09      	ldr	r3, [pc, #36]	; (67cc <bt_stream_freq+0x36c>)
    67a8:	2200      	movs	r2, #0
    67aa:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    67ac:	4b08      	ldr	r3, [pc, #32]	; (67d0 <bt_stream_freq+0x370>)
    67ae:	2200      	movs	r2, #0
    67b0:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
//	cc2400_rx();
	while (requested_mode == MODE_RX_FREQ) {
    67b2:	4b08      	ldr	r3, [pc, #32]	; (67d4 <bt_stream_freq+0x374>)
    67b4:	781b      	ldrb	r3, [r3, #0]
    67b6:	b2db      	uxtb	r3, r3
    67b8:	2b0e      	cmp	r3, #14
    67ba:	f43f aeb5 	beq.w	6528 <bt_stream_freq+0xc8>
	 
	
	}
//	dio_ssp_stop ();
//	cs_trigger_disable ();
}
    67be:	3784      	adds	r7, #132	; 0x84
    67c0:	46bd      	mov	sp, r7
    67c2:	bd90      	pop	{r4, r7, pc}
    67c4:	40030008 	.word	0x40030008
    67c8:	4003000c 	.word	0x4003000c
    67cc:	10000b00 	.word	0x10000b00
    67d0:	100010bc 	.word	0x100010bc
    67d4:	10000a3f 	.word	0x10000a3f

000067d8 <bt_stream_rx>:

// wpson
void bt_stream_rx()
{
    67d8:	b590      	push	{r4, r7, lr}
    67da:	b0a3      	sub	sp, #140	; 0x8c
    67dc:	af00      	add	r7, sp, #0
//	TXLED_SET;
	RXLED_CLR;
    67de:	4bc0      	ldr	r3, [pc, #768]	; (6ae0 <bt_stream_rx+0x308>)
    67e0:	2210      	movs	r2, #16
    67e2:	601a      	str	r2, [r3, #0]
	int i;
	
	u8 rssi_buf[DMA_SIZE];
	queue_init();
    67e4:	f002 fac4 	bl	8d70 <queue_init>
	dio_ssp_init();
    67e8:	f003 fc68 	bl	a0bc <dio_ssp_init>
	dma_init_le();
    67ec:	f7fe ff40 	bl	5670 <dma_init_le>
	dio_ssp_start();
    67f0:	f7ff f8ae 	bl	5950 <dio_ssp_start>
	
	cc2400_set(MANAND, 0x7fff);
    67f4:	200d      	movs	r0, #13
    67f6:	f647 71ff 	movw	r1, #32767	; 0x7fff
    67fa:	f003 fd31 	bl	a260 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    67fe:	2012      	movs	r0, #18
    6800:	f642 3122 	movw	r1, #11042	; 0x2b22
    6804:	f003 fd2c 	bl	a260 <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    6808:	2014      	movs	r0, #20
    680a:	f241 214b 	movw	r1, #4683	; 0x124b
    680e:	f003 fd27 	bl	a260 <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    6812:	2020      	movs	r0, #32
    6814:	f240 5161 	movw	r1, #1377	; 0x561
    6818:	f003 fd22 	bl	a260 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    681c:	2003      	movs	r0, #3
    681e:	2140      	movs	r1, #64	; 0x40
    6820:	f003 fd1e 	bl	a260 <cc2400_set>

//	cc2400_set(SYNCH, 0xf9ae);
//	cc2400_set(SYNCL, 0x1584);
	
	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
    6824:	48af      	ldr	r0, [pc, #700]	; (6ae4 <bt_stream_rx+0x30c>)
    6826:	f003 fb49 	bl	9ebc <rbit>
    682a:	4603      	mov	r3, r0
    682c:	b29b      	uxth	r3, r3
    682e:	202c      	movs	r0, #44	; 0x2c
    6830:	4619      	mov	r1, r3
    6832:	f003 fd15 	bl	a260 <cc2400_set>
	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
    6836:	48ab      	ldr	r0, [pc, #684]	; (6ae4 <bt_stream_rx+0x30c>)
    6838:	f003 fb40 	bl	9ebc <rbit>
    683c:	4603      	mov	r3, r0
    683e:	0c1b      	lsrs	r3, r3, #16
    6840:	b29b      	uxth	r3, r3
    6842:	202d      	movs	r0, #45	; 0x2d
    6844:	4619      	mov	r1, r3
    6846:	f003 fd0b 	bl	a260 <cc2400_set>
	
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    684a:	4ba7      	ldr	r3, [pc, #668]	; (6ae8 <bt_stream_rx+0x310>)
    684c:	2280      	movs	r2, #128	; 0x80
    684e:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif

	while (!(cc2400_status() & XOSC16M_STABLE));
    6850:	bf00      	nop
    6852:	f003 fdbd 	bl	a3d0 <cc2400_status>
    6856:	4603      	mov	r3, r0
    6858:	f003 0340 	and.w	r3, r3, #64	; 0x40
    685c:	2b00      	cmp	r3, #0
    685e:	d0f8      	beq.n	6852 <bt_stream_rx+0x7a>
	while ((cc2400_status() & FS_LOCK));
    6860:	bf00      	nop
    6862:	f003 fdb5 	bl	a3d0 <cc2400_status>
    6866:	4603      	mov	r3, r0
    6868:	f003 0304 	and.w	r3, r3, #4
    686c:	2b00      	cmp	r3, #0
    686e:	d1f8      	bne.n	6862 <bt_stream_rx+0x8a>

	cc2400_set(FSDIV, channel - 1);
    6870:	4b9e      	ldr	r3, [pc, #632]	; (6aec <bt_stream_rx+0x314>)
    6872:	881b      	ldrh	r3, [r3, #0]
    6874:	b29b      	uxth	r3, r3
    6876:	3b01      	subs	r3, #1
    6878:	b29b      	uxth	r3, r3
    687a:	2002      	movs	r0, #2
    687c:	4619      	mov	r1, r3
    687e:	f003 fcef 	bl	a260 <cc2400_set>
	cc2400_strobe(SFSON);
    6882:	2061      	movs	r0, #97	; 0x61
    6884:	f003 fdae 	bl	a3e4 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6888:	bf00      	nop
    688a:	f003 fda1 	bl	a3d0 <cc2400_status>
    688e:	4603      	mov	r3, r0
    6890:	f003 0304 	and.w	r3, r3, #4
    6894:	2b00      	cmp	r3, #0
    6896:	d0f8      	beq.n	688a <bt_stream_rx+0xb2>
	cc2400_strobe(SRX);
    6898:	2062      	movs	r0, #98	; 0x62
    689a:	f003 fda3 	bl	a3e4 <cc2400_strobe>
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    689e:	e156      	b.n	6b4e <bt_stream_rx+0x376>
		
		while (!(cc2400_status () & SYNC_RECEIVED));
    68a0:	bf00      	nop
    68a2:	f003 fd95 	bl	a3d0 <cc2400_status>
    68a6:	4603      	mov	r3, r0
    68a8:	f003 0310 	and.w	r3, r3, #16
    68ac:	2b00      	cmp	r3, #0
    68ae:	d0f8      	beq.n	68a2 <bt_stream_rx+0xca>
                else
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
    68b0:	4b8f      	ldr	r3, [pc, #572]	; (6af0 <bt_stream_rx+0x318>)
    68b2:	2200      	movs	r2, #0
    68b4:	601a      	str	r2, [r3, #0]
		rssi_count = 5;
    68b6:	4b8f      	ldr	r3, [pc, #572]	; (6af4 <bt_stream_rx+0x31c>)
    68b8:	2205      	movs	r2, #5
    68ba:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < rssi_count; i++)
    68bc:	2300      	movs	r3, #0
    68be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    68c2:	e011      	b.n	68e8 <bt_stream_rx+0x110>
		{
			rssi_sum += (int8_t)(cc2400_get(RSSI) >> 8);
    68c4:	2006      	movs	r0, #6
    68c6:	f003 fcb5 	bl	a234 <cc2400_get>
    68ca:	4603      	mov	r3, r0
    68cc:	0a1b      	lsrs	r3, r3, #8
    68ce:	b29b      	uxth	r3, r3
    68d0:	b2db      	uxtb	r3, r3
    68d2:	b25a      	sxtb	r2, r3
    68d4:	4b86      	ldr	r3, [pc, #536]	; (6af0 <bt_stream_rx+0x318>)
    68d6:	681b      	ldr	r3, [r3, #0]
    68d8:	4413      	add	r3, r2
    68da:	4a85      	ldr	r2, [pc, #532]	; (6af0 <bt_stream_rx+0x318>)
    68dc:	6013      	str	r3, [r2, #0]
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
		rssi_count = 5;
		for (i = 0; i < rssi_count; i++)
    68de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    68e2:	3301      	adds	r3, #1
    68e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    68e8:	4b82      	ldr	r3, [pc, #520]	; (6af4 <bt_stream_rx+0x31c>)
    68ea:	781b      	ldrb	r3, [r3, #0]
    68ec:	461a      	mov	r2, r3
    68ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    68f2:	429a      	cmp	r2, r3
    68f4:	dce6      	bgt.n	68c4 <bt_stream_rx+0xec>
		{
			rssi_sum += (int8_t)(cc2400_get(RSSI) >> 8);
		}
	
		while (!rx_tc);
    68f6:	bf00      	nop
    68f8:	4b7f      	ldr	r3, [pc, #508]	; (6af8 <bt_stream_rx+0x320>)
    68fa:	681b      	ldr	r3, [r3, #0]
    68fc:	2b00      	cmp	r3, #0
    68fe:	d0fb      	beq.n	68f8 <bt_stream_rx+0x120>
	
		RXLED_SET;
    6900:	4b7e      	ldr	r3, [pc, #504]	; (6afc <bt_stream_rx+0x324>)
    6902:	2210      	movs	r2, #16
    6904:	601a      	str	r2, [r3, #0]
		if (rx_err) {
    6906:	4b7e      	ldr	r3, [pc, #504]	; (6b00 <bt_stream_rx+0x328>)
    6908:	681b      	ldr	r3, [r3, #0]
    690a:	2b00      	cmp	r3, #0
    690c:	d007      	beq.n	691e <bt_stream_rx+0x146>
		status |= DMA_ERROR;
    690e:	4b7d      	ldr	r3, [pc, #500]	; (6b04 <bt_stream_rx+0x32c>)
    6910:	781b      	ldrb	r3, [r3, #0]
    6912:	b2db      	uxtb	r3, r3
    6914:	f043 0302 	orr.w	r3, r3, #2
    6918:	b2da      	uxtb	r2, r3
    691a:	4b7a      	ldr	r3, [pc, #488]	; (6b04 <bt_stream_rx+0x32c>)
    691c:	701a      	strb	r2, [r3, #0]
		}	
		if (rx_tc > 1)
    691e:	4b76      	ldr	r3, [pc, #472]	; (6af8 <bt_stream_rx+0x320>)
    6920:	681b      	ldr	r3, [r3, #0]
    6922:	2b01      	cmp	r3, #1
    6924:	d907      	bls.n	6936 <bt_stream_rx+0x15e>
			status |= DMA_OVERFLOW;
    6926:	4b77      	ldr	r3, [pc, #476]	; (6b04 <bt_stream_rx+0x32c>)
    6928:	781b      	ldrb	r3, [r3, #0]
    692a:	b2db      	uxtb	r3, r3
    692c:	f043 0301 	orr.w	r3, r3, #1
    6930:	b2da      	uxtb	r2, r3
    6932:	4b74      	ldr	r3, [pc, #464]	; (6b04 <bt_stream_rx+0x32c>)
    6934:	701a      	strb	r2, [r3, #0]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    6936:	1d3b      	adds	r3, r7, #4
    6938:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		packet[0] = le.access_address;
    693c:	4b72      	ldr	r3, [pc, #456]	; (6b08 <bt_stream_rx+0x330>)
    693e:	681b      	ldr	r3, [r3, #0]
    6940:	607b      	str	r3, [r7, #4]

                while (DMACC0Config & DMACCxConfig_E && rx_err == 0);
    6942:	bf00      	nop
    6944:	4b71      	ldr	r3, [pc, #452]	; (6b0c <bt_stream_rx+0x334>)
    6946:	681b      	ldr	r3, [r3, #0]
    6948:	f003 0301 	and.w	r3, r3, #1
    694c:	2b00      	cmp	r3, #0
    694e:	d003      	beq.n	6958 <bt_stream_rx+0x180>
    6950:	4b6b      	ldr	r3, [pc, #428]	; (6b00 <bt_stream_rx+0x328>)
    6952:	681b      	ldr	r3, [r3, #0]
    6954:	2b00      	cmp	r3, #0
    6956:	d0f5      	beq.n	6944 <bt_stream_rx+0x16c>
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6958:	4a6d      	ldr	r2, [pc, #436]	; (6b10 <bt_stream_rx+0x338>)
    695a:	4b6d      	ldr	r3, [pc, #436]	; (6b10 <bt_stream_rx+0x338>)
    695c:	681b      	ldr	r3, [r3, #0]
    695e:	f023 0301 	bic.w	r3, r3, #1
    6962:	6013      	str	r3, [r2, #0]
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    6964:	4b61      	ldr	r3, [pc, #388]	; (6aec <bt_stream_rx+0x314>)
    6966:	881b      	ldrh	r3, [r3, #0]
    6968:	b29b      	uxth	r3, r3
    696a:	b2db      	uxtb	r3, r3
    696c:	3b62      	subs	r3, #98	; 0x62
    696e:	b2db      	uxtb	r3, r3
    6970:	4618      	mov	r0, r3
    6972:	f002 f87d 	bl	8a70 <btle_channel_index>
    6976:	4603      	mov	r3, r0
    6978:	461a      	mov	r2, r3
    697a:	4613      	mov	r3, r2
    697c:	005b      	lsls	r3, r3, #1
    697e:	4413      	add	r3, r2
    6980:	011b      	lsls	r3, r3, #4
    6982:	4a64      	ldr	r2, [pc, #400]	; (6b14 <bt_stream_rx+0x33c>)
    6984:	4413      	add	r3, r2
    6986:	67fb      	str	r3, [r7, #124]	; 0x7c
		for (i = 0; i < 44; i += 4) {
    6988:	2300      	movs	r3, #0
    698a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    698e:	e03c      	b.n	6a0a <bt_stream_rx+0x232>
			uint32_t v = rxbuf1[i+0] << 24
    6990:	4a61      	ldr	r2, [pc, #388]	; (6b18 <bt_stream_rx+0x340>)
    6992:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6996:	4413      	add	r3, r2
    6998:	781b      	ldrb	r3, [r3, #0]
    699a:	061a      	lsls	r2, r3, #24
                                          | rxbuf1[i+1] << 16
    699c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    69a0:	3301      	adds	r3, #1
    69a2:	495d      	ldr	r1, [pc, #372]	; (6b18 <bt_stream_rx+0x340>)
    69a4:	5ccb      	ldrb	r3, [r1, r3]
    69a6:	041b      	lsls	r3, r3, #16
    69a8:	431a      	orrs	r2, r3
                                      | rxbuf1[i+2] << 8
    69aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    69ae:	3302      	adds	r3, #2
    69b0:	4959      	ldr	r1, [pc, #356]	; (6b18 <bt_stream_rx+0x340>)
    69b2:	5ccb      	ldrb	r3, [r1, r3]
    69b4:	021b      	lsls	r3, r3, #8
    69b6:	4313      	orrs	r3, r2
                                          | rxbuf1[i+3] << 0;
    69b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    69bc:	3203      	adds	r2, #3
    69be:	4956      	ldr	r1, [pc, #344]	; (6b18 <bt_stream_rx+0x340>)
    69c0:	5c8a      	ldrb	r2, [r1, r2]
    69c2:	4313      	orrs	r3, r2
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    69c4:	67bb      	str	r3, [r7, #120]	; 0x78
                                          | rxbuf1[i+1] << 16
                                      | rxbuf1[i+2] << 8
                                          | rxbuf1[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
    69c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    69ca:	2b00      	cmp	r3, #0
    69cc:	da00      	bge.n	69d0 <bt_stream_rx+0x1f8>
    69ce:	3303      	adds	r3, #3
    69d0:	109b      	asrs	r3, r3, #2
    69d2:	1c5c      	adds	r4, r3, #1
    69d4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
    69d6:	f003 fa71 	bl	9ebc <rbit>
    69da:	4601      	mov	r1, r0
    69dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    69e0:	2b00      	cmp	r3, #0
    69e2:	da00      	bge.n	69e6 <bt_stream_rx+0x20e>
    69e4:	3303      	adds	r3, #3
    69e6:	109b      	asrs	r3, r3, #2
    69e8:	009b      	lsls	r3, r3, #2
    69ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    69ec:	4413      	add	r3, r2
    69ee:	681b      	ldr	r3, [r3, #0]
    69f0:	ea81 0203 	eor.w	r2, r1, r3
    69f4:	00a3      	lsls	r3, r4, #2
    69f6:	f107 0188 	add.w	r1, r7, #136	; 0x88
    69fa:	440b      	add	r3, r1
    69fc:	f843 2c84 	str.w	r2, [r3, #-132]
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
    6a00:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6a04:	3304      	adds	r3, #4
    6a06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    6a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6a0e:	2b2b      	cmp	r3, #43	; 0x2b
    6a10:	ddbe      	ble.n	6990 <bt_stream_rx+0x1b8>
                                      | eddystone[i+2] << 8
                                          | eddystone[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
		}
*/
		unsigned len = (p[5] & 0x3f) + 2;
    6a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    6a16:	3305      	adds	r3, #5
    6a18:	781b      	ldrb	r3, [r3, #0]
    6a1a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6a1e:	3302      	adds	r3, #2
    6a20:	677b      	str	r3, [r7, #116]	; 0x74
		
		if (len > 39)
    6a22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    6a24:	2b27      	cmp	r3, #39	; 0x27
    6a26:	d900      	bls.n	6a2a <bt_stream_rx+0x252>
			goto rx_flush;
    6a28:	e034      	b.n	6a94 <bt_stream_rx+0x2bc>

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    6a2a:	4b37      	ldr	r3, [pc, #220]	; (6b08 <bt_stream_rx+0x330>)
    6a2c:	68d9      	ldr	r1, [r3, #12]
    6a2e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    6a32:	1d1a      	adds	r2, r3, #4
    6a34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    6a36:	4608      	mov	r0, r1
    6a38:	4611      	mov	r1, r2
    6a3a:	461a      	mov	r2, r3
    6a3c:	f002 f91c 	bl	8c78 <btle_crcgen_lut>
    6a40:	6738      	str	r0, [r7, #112]	; 0x70
		u32 wire_crc = (p[4+len+2] << 16)
    6a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    6a44:	3306      	adds	r3, #6
    6a46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    6a4a:	4413      	add	r3, r2
    6a4c:	781b      	ldrb	r3, [r3, #0]
    6a4e:	041a      	lsls	r2, r3, #16
                                                 | (p[4+len+1] << 8)
    6a50:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    6a52:	3305      	adds	r3, #5
    6a54:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    6a58:	440b      	add	r3, r1
    6a5a:	781b      	ldrb	r3, [r3, #0]
    6a5c:	021b      	lsls	r3, r3, #8
    6a5e:	4313      	orrs	r3, r2
                                                 | (p[4+len+0] << 0);
    6a60:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    6a62:	3204      	adds	r2, #4
    6a64:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    6a68:	440a      	add	r2, r1
    6a6a:	7812      	ldrb	r2, [r2, #0]
    6a6c:	4313      	orrs	r3, r2
		
		if (len > 39)
			goto rx_flush;

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
		u32 wire_crc = (p[4+len+2] << 16)
    6a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
                                                 | (p[4+len+1] << 8)
                                                 | (p[4+len+0] << 0);
                if (calc_crc != wire_crc) // skip packets with a bad CRC
    6a70:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    6a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6a74:	429a      	cmp	r2, r3
    6a76:	d000      	beq.n	6a7a <bt_stream_rx+0x2a2>
                        goto rx_flush;
    6a78:	e00c      	b.n	6a94 <bt_stream_rx+0x2bc>


		enqueue (BR_PACKET, (uint8_t*)packet);
    6a7a:	1d3b      	adds	r3, r7, #4
    6a7c:	2000      	movs	r0, #0
    6a7e:	4619      	mov	r1, r3
    6a80:	f7fd fd22 	bl	44c8 <enqueue>
//		enqueue (BR_PACKET, (uint8_t*)rxbuf1);
		handle_usb(clkn);
    6a84:	4b25      	ldr	r3, [pc, #148]	; (6b1c <bt_stream_rx+0x344>)
    6a86:	681b      	ldr	r3, [r3, #0]
    6a88:	4618      	mov	r0, r3
    6a8a:	f002 fa11 	bl	8eb0 <handle_usb>
//		enqueue (MESSAGE, rssi_buf);
//		handle_usb(clkn);
		RXLED_CLR;
    6a8e:	4b14      	ldr	r3, [pc, #80]	; (6ae0 <bt_stream_rx+0x308>)
    6a90:	2210      	movs	r2, #16
    6a92:	601a      	str	r2, [r3, #0]
	       
	rx_flush:
		cc2400_strobe (SRFOFF);
    6a94:	2064      	movs	r0, #100	; 0x64
    6a96:	f003 fca5 	bl	a3e4 <cc2400_strobe>
                while ((cc2400_status () & FS_LOCK));
    6a9a:	bf00      	nop
    6a9c:	f003 fc98 	bl	a3d0 <cc2400_status>
    6aa0:	4603      	mov	r3, r0
    6aa2:	f003 0304 	and.w	r3, r3, #4
    6aa6:	2b00      	cmp	r3, #0
    6aa8:	d1f8      	bne.n	6a9c <bt_stream_rx+0x2c4>

                while (!(cc2400_status () & XOSC16M_STABLE));
    6aaa:	bf00      	nop
    6aac:	f003 fc90 	bl	a3d0 <cc2400_status>
    6ab0:	4603      	mov	r3, r0
    6ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6ab6:	2b00      	cmp	r3, #0
    6ab8:	d0f8      	beq.n	6aac <bt_stream_rx+0x2d4>

                cc2400_strobe (SFSON);
    6aba:	2061      	movs	r0, #97	; 0x61
    6abc:	f003 fc92 	bl	a3e4 <cc2400_strobe>
                while (!(cc2400_status () & FS_LOCK));
    6ac0:	bf00      	nop
    6ac2:	f003 fc85 	bl	a3d0 <cc2400_status>
    6ac6:	4603      	mov	r3, r0
    6ac8:	f003 0304 	and.w	r3, r3, #4
    6acc:	2b00      	cmp	r3, #0
    6ace:	d0f8      	beq.n	6ac2 <bt_stream_rx+0x2ea>

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6ad0:	4a0f      	ldr	r2, [pc, #60]	; (6b10 <bt_stream_rx+0x338>)
    6ad2:	4b0f      	ldr	r3, [pc, #60]	; (6b10 <bt_stream_rx+0x338>)
    6ad4:	681b      	ldr	r3, [r3, #0]
    6ad6:	f023 0301 	bic.w	r3, r3, #1
    6ada:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    6adc:	e024      	b.n	6b28 <bt_stream_rx+0x350>
    6ade:	bf00      	nop
    6ae0:	2009c03c 	.word	0x2009c03c
    6ae4:	8e89bed6 	.word	0x8e89bed6
    6ae8:	2009c058 	.word	0x2009c058
    6aec:	1000049c 	.word	0x1000049c
    6af0:	10000a4c 	.word	0x10000a4c
    6af4:	10000a49 	.word	0x10000a49
    6af8:	10000b00 	.word	0x10000b00
    6afc:	2009c038 	.word	0x2009c038
    6b00:	100010bc 	.word	0x100010bc
    6b04:	10000a48 	.word	0x10000a48
    6b08:	10000458 	.word	0x10000458
    6b0c:	50004110 	.word	0x50004110
    6b10:	40030024 	.word	0x40030024
    6b14:	0000c068 	.word	0x0000c068
    6b18:	10001088 	.word	0x10001088
    6b1c:	10000be4 	.word	0x10000be4
                        u8 tmp = (u8)DIO_SSP_DR;
    6b20:	4b11      	ldr	r3, [pc, #68]	; (6b68 <bt_stream_rx+0x390>)
    6b22:	681b      	ldr	r3, [r3, #0]
    6b24:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                cc2400_strobe (SFSON);
                while (!(cc2400_status () & FS_LOCK));

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    6b28:	4b10      	ldr	r3, [pc, #64]	; (6b6c <bt_stream_rx+0x394>)
    6b2a:	681b      	ldr	r3, [r3, #0]
    6b2c:	f003 0304 	and.w	r3, r3, #4
    6b30:	2b00      	cmp	r3, #0
    6b32:	d1f5      	bne.n	6b20 <bt_stream_rx+0x348>
                        u8 tmp = (u8)DIO_SSP_DR;
                }
		dma_init_le();
    6b34:	f7fe fd9c 	bl	5670 <dma_init_le>
		dio_ssp_start();
    6b38:	f7fe ff0a 	bl	5950 <dio_ssp_start>
		
//              msleep(500);    
                cc2400_strobe (SRX);
    6b3c:	2062      	movs	r0, #98	; 0x62
    6b3e:	f003 fc51 	bl	a3e4 <cc2400_strobe>
		rx_tc = 0;
    6b42:	4b0b      	ldr	r3, [pc, #44]	; (6b70 <bt_stream_rx+0x398>)
    6b44:	2200      	movs	r2, #0
    6b46:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6b48:	4b0a      	ldr	r3, [pc, #40]	; (6b74 <bt_stream_rx+0x39c>)
    6b4a:	2200      	movs	r2, #0
    6b4c:	601a      	str	r2, [r3, #0]
	cc2400_set(FSDIV, channel - 1);
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    6b4e:	4b0a      	ldr	r3, [pc, #40]	; (6b78 <bt_stream_rx+0x3a0>)
    6b50:	781b      	ldrb	r3, [r3, #0]
    6b52:	b2db      	uxtb	r3, r3
    6b54:	2b01      	cmp	r3, #1
    6b56:	f43f aea3 	beq.w	68a0 <bt_stream_rx+0xc8>
		rx_tc = 0;
		rx_err = 0;
	 
	
	}
	dio_ssp_stop ();
    6b5a:	f7fe ff29 	bl	59b0 <dio_ssp_stop>
	cs_trigger_disable ();
    6b5e:	f7fd fe07 	bl	4770 <cs_trigger_disable>
}
    6b62:	378c      	adds	r7, #140	; 0x8c
    6b64:	46bd      	mov	sp, r7
    6b66:	bd90      	pop	{r4, r7, pc}
    6b68:	40030008 	.word	0x40030008
    6b6c:	4003000c 	.word	0x4003000c
    6b70:	10000b00 	.word	0x10000b00
    6b74:	100010bc 	.word	0x100010bc
    6b78:	10000a3f 	.word	0x10000a3f

00006b7c <le_set_access_address>:



/* set LE access address */
static void le_set_access_address(u32 aa) {
    6b7c:	b580      	push	{r7, lr}
    6b7e:	b084      	sub	sp, #16
    6b80:	af00      	add	r7, sp, #0
    6b82:	6078      	str	r0, [r7, #4]
	u32 aa_rev;

	le.access_address = aa;
    6b84:	4a09      	ldr	r2, [pc, #36]	; (6bac <le_set_access_address+0x30>)
    6b86:	687b      	ldr	r3, [r7, #4]
    6b88:	6013      	str	r3, [r2, #0]
	aa_rev = rbit(aa);
    6b8a:	6878      	ldr	r0, [r7, #4]
    6b8c:	f003 f996 	bl	9ebc <rbit>
    6b90:	60f8      	str	r0, [r7, #12]
	le.syncl = aa_rev & 0xffff;
    6b92:	68fb      	ldr	r3, [r7, #12]
    6b94:	b29a      	uxth	r2, r3
    6b96:	4b05      	ldr	r3, [pc, #20]	; (6bac <le_set_access_address+0x30>)
    6b98:	80da      	strh	r2, [r3, #6]
	le.synch = aa_rev >> 16;
    6b9a:	68fb      	ldr	r3, [r7, #12]
    6b9c:	0c1b      	lsrs	r3, r3, #16
    6b9e:	b29a      	uxth	r2, r3
    6ba0:	4b02      	ldr	r3, [pc, #8]	; (6bac <le_set_access_address+0x30>)
    6ba2:	809a      	strh	r2, [r3, #4]
}
    6ba4:	3710      	adds	r7, #16
    6ba6:	46bd      	mov	sp, r7
    6ba8:	bd80      	pop	{r7, pc}
    6baa:	bf00      	nop
    6bac:	10000458 	.word	0x10000458

00006bb0 <reset_le>:

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    6bb0:	b580      	push	{r7, lr}
    6bb2:	af00      	add	r7, sp, #0
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    6bb4:	481f      	ldr	r0, [pc, #124]	; (6c34 <reset_le+0x84>)
    6bb6:	f7ff ffe1 	bl	6b7c <le_set_access_address>
	le.crc_init  = 0x555555;	       // advertising channel CRCInit
    6bba:	4b1f      	ldr	r3, [pc, #124]	; (6c38 <reset_le+0x88>)
    6bbc:	4a1f      	ldr	r2, [pc, #124]	; (6c3c <reset_le+0x8c>)
    6bbe:	609a      	str	r2, [r3, #8]
	le.crc_init_reversed = 0xAAAAAA;
    6bc0:	4b1d      	ldr	r3, [pc, #116]	; (6c38 <reset_le+0x88>)
    6bc2:	4a1f      	ldr	r2, [pc, #124]	; (6c40 <reset_le+0x90>)
    6bc4:	60da      	str	r2, [r3, #12]
	le.crc_verify = 1;
    6bc6:	4b1c      	ldr	r3, [pc, #112]	; (6c38 <reset_le+0x88>)
    6bc8:	2201      	movs	r2, #1
    6bca:	611a      	str	r2, [r3, #16]
	le.last_packet = 0;
    6bcc:	4b1a      	ldr	r3, [pc, #104]	; (6c38 <reset_le+0x88>)
    6bce:	2200      	movs	r2, #0
    6bd0:	641a      	str	r2, [r3, #64]	; 0x40

	le.link_state = LINK_INACTIVE;
    6bd2:	4b19      	ldr	r3, [pc, #100]	; (6c38 <reset_le+0x88>)
    6bd4:	2200      	movs	r2, #0
    6bd6:	751a      	strb	r2, [r3, #20]

	le.channel_idx = 0;
    6bd8:	4b17      	ldr	r3, [pc, #92]	; (6c38 <reset_le+0x88>)
    6bda:	2200      	movs	r2, #0
    6bdc:	755a      	strb	r2, [r3, #21]
	le.channel_increment = 0;
    6bde:	4b16      	ldr	r3, [pc, #88]	; (6c38 <reset_le+0x88>)
    6be0:	2200      	movs	r2, #0
    6be2:	759a      	strb	r2, [r3, #22]

	le.conn_epoch = 0;
    6be4:	4b14      	ldr	r3, [pc, #80]	; (6c38 <reset_le+0x88>)
    6be6:	2200      	movs	r2, #0
    6be8:	619a      	str	r2, [r3, #24]
	le.interval_timer = 0;
    6bea:	4b13      	ldr	r3, [pc, #76]	; (6c38 <reset_le+0x88>)
    6bec:	2200      	movs	r2, #0
    6bee:	839a      	strh	r2, [r3, #28]
	le.conn_interval = 0;
    6bf0:	4b11      	ldr	r3, [pc, #68]	; (6c38 <reset_le+0x88>)
    6bf2:	2200      	movs	r2, #0
    6bf4:	83da      	strh	r2, [r3, #30]
	le.conn_interval = 0;
    6bf6:	4b10      	ldr	r3, [pc, #64]	; (6c38 <reset_le+0x88>)
    6bf8:	2200      	movs	r2, #0
    6bfa:	83da      	strh	r2, [r3, #30]
	le.conn_count = 0;
    6bfc:	4b0e      	ldr	r3, [pc, #56]	; (6c38 <reset_le+0x88>)
    6bfe:	2200      	movs	r2, #0
    6c00:	841a      	strh	r2, [r3, #32]

	le.win_size = 0;
    6c02:	4b0d      	ldr	r3, [pc, #52]	; (6c38 <reset_le+0x88>)
    6c04:	2200      	movs	r2, #0
    6c06:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	le.win_offset = 0;
    6c0a:	4b0b      	ldr	r3, [pc, #44]	; (6c38 <reset_le+0x88>)
    6c0c:	2200      	movs	r2, #0
    6c0e:	849a      	strh	r2, [r3, #36]	; 0x24

	le.update_pending = 0;
    6c10:	4b09      	ldr	r3, [pc, #36]	; (6c38 <reset_le+0x88>)
    6c12:	2200      	movs	r2, #0
    6c14:	629a      	str	r2, [r3, #40]	; 0x28
	le.update_instant = 0;
    6c16:	4b08      	ldr	r3, [pc, #32]	; (6c38 <reset_le+0x88>)
    6c18:	2200      	movs	r2, #0
    6c1a:	859a      	strh	r2, [r3, #44]	; 0x2c
	le.interval_update = 0;
    6c1c:	4b06      	ldr	r3, [pc, #24]	; (6c38 <reset_le+0x88>)
    6c1e:	2200      	movs	r2, #0
    6c20:	85da      	strh	r2, [r3, #46]	; 0x2e
	le.win_size_update = 0;
    6c22:	4b05      	ldr	r3, [pc, #20]	; (6c38 <reset_le+0x88>)
    6c24:	2200      	movs	r2, #0
    6c26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	le.win_offset_update;

	do_hop = 0;
    6c2a:	4b06      	ldr	r3, [pc, #24]	; (6c44 <reset_le+0x94>)
    6c2c:	2200      	movs	r2, #0
    6c2e:	701a      	strb	r2, [r3, #0]
}
    6c30:	bd80      	pop	{r7, pc}
    6c32:	bf00      	nop
    6c34:	8e89bed6 	.word	0x8e89bed6
    6c38:	10000458 	.word	0x10000458
    6c3c:	00555555 	.word	0x00555555
    6c40:	00aaaaaa 	.word	0x00aaaaaa
    6c44:	1000097d 	.word	0x1000097d

00006c48 <reset_le_promisc>:

// reset LE Promisc state
void reset_le_promisc(void) {
    6c48:	b580      	push	{r7, lr}
    6c4a:	af00      	add	r7, sp, #0
	memset(&le_promisc, 0, sizeof(le_promisc));
    6c4c:	4805      	ldr	r0, [pc, #20]	; (6c64 <reset_le_promisc+0x1c>)
    6c4e:	2100      	movs	r1, #0
    6c50:	f44f 7284 	mov.w	r2, #264	; 0x108
    6c54:	f7fd fa90 	bl	4178 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    6c58:	4b02      	ldr	r3, [pc, #8]	; (6c64 <reset_le_promisc+0x1c>)
    6c5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6c5e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    6c62:	bd80      	pop	{r7, pc}
    6c64:	10000bf0 	.word	0x10000bf0

00006c68 <bt_generic_le>:

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    6c68:	b580      	push	{r7, lr}
    6c6a:	b088      	sub	sp, #32
    6c6c:	af00      	add	r7, sp, #0
    6c6e:	4603      	mov	r3, r0
    6c70:	71fb      	strb	r3, [r7, #7]
	u8 *tmp = NULL;
    6c72:	2300      	movs	r3, #0
    6c74:	60fb      	str	r3, [r7, #12]
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    6c76:	4ba4      	ldr	r3, [pc, #656]	; (6f08 <bt_generic_le+0x2a0>)
    6c78:	2201      	movs	r2, #1
    6c7a:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    6c7c:	4aa3      	ldr	r2, [pc, #652]	; (6f0c <bt_generic_le+0x2a4>)
    6c7e:	79fb      	ldrb	r3, [r7, #7]
    6c80:	7013      	strb	r3, [r2, #0]

	reset_le();
    6c82:	f7ff ff95 	bl	6bb0 <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    6c86:	4ba2      	ldr	r3, [pc, #648]	; (6f10 <bt_generic_le+0x2a8>)
    6c88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6c8c:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    6c8e:	4ba1      	ldr	r3, [pc, #644]	; (6f14 <bt_generic_le+0x2ac>)
    6c90:	2210      	movs	r2, #16
    6c92:	601a      	str	r2, [r3, #0]

	queue_init();
    6c94:	f002 f86c 	bl	8d70 <queue_init>
	dio_ssp_init();
    6c98:	f003 fa10 	bl	a0bc <dio_ssp_init>
	dma_init();
    6c9c:	f7fe fc28 	bl	54f0 <dma_init>
	dio_ssp_start();
    6ca0:	f7fe fe56 	bl	5950 <dio_ssp_start>
	cc2400_rx();
    6ca4:	f7fe ff10 	bl	5ac8 <cc2400_rx>

	cs_trigger_enable();
    6ca8:	f7fd fd44 	bl	4734 <cs_trigger_enable>

	hold = 0;
    6cac:	2300      	movs	r3, #0
    6cae:	77fb      	strb	r3, [r7, #31]

	while (requested_mode == active_mode) {
    6cb0:	e115      	b.n	6ede <bt_generic_le+0x276>
		if (requested_channel != 0) {
    6cb2:	4b99      	ldr	r3, [pc, #612]	; (6f18 <bt_generic_le+0x2b0>)
    6cb4:	881b      	ldrh	r3, [r3, #0]
    6cb6:	b29b      	uxth	r3, r3
    6cb8:	2b00      	cmp	r3, #0
    6cba:	d024      	beq.n	6d06 <bt_generic_le+0x9e>
			cc2400_strobe(SRFOFF);
    6cbc:	2064      	movs	r0, #100	; 0x64
    6cbe:	f003 fb91 	bl	a3e4 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    6cc2:	bf00      	nop
    6cc4:	f003 fb84 	bl	a3d0 <cc2400_status>
    6cc8:	4603      	mov	r3, r0
    6cca:	f003 0304 	and.w	r3, r3, #4
    6cce:	2b00      	cmp	r3, #0
    6cd0:	d1f8      	bne.n	6cc4 <bt_generic_le+0x5c>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    6cd2:	4b92      	ldr	r3, [pc, #584]	; (6f1c <bt_generic_le+0x2b4>)
    6cd4:	881b      	ldrh	r3, [r3, #0]
    6cd6:	b29b      	uxth	r3, r3
    6cd8:	3b01      	subs	r3, #1
    6cda:	b29b      	uxth	r3, r3
    6cdc:	2002      	movs	r0, #2
    6cde:	4619      	mov	r1, r3
    6ce0:	f003 fabe 	bl	a260 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    6ce4:	2061      	movs	r0, #97	; 0x61
    6ce6:	f003 fb7d 	bl	a3e4 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6cea:	bf00      	nop
    6cec:	f003 fb70 	bl	a3d0 <cc2400_status>
    6cf0:	4603      	mov	r3, r0
    6cf2:	f003 0304 	and.w	r3, r3, #4
    6cf6:	2b00      	cmp	r3, #0
    6cf8:	d0f8      	beq.n	6cec <bt_generic_le+0x84>

			/* RX mode */
			cc2400_strobe(SRX);
    6cfa:	2062      	movs	r0, #98	; 0x62
    6cfc:	f003 fb72 	bl	a3e4 <cc2400_strobe>

			requested_channel = 0;
    6d00:	4b85      	ldr	r3, [pc, #532]	; (6f18 <bt_generic_le+0x2b0>)
    6d02:	2200      	movs	r2, #0
    6d04:	801a      	strh	r2, [r3, #0]
		}

		if (do_hop) {
    6d06:	4b86      	ldr	r3, [pc, #536]	; (6f20 <bt_generic_le+0x2b8>)
    6d08:	781b      	ldrb	r3, [r3, #0]
    6d0a:	b2db      	uxtb	r3, r3
    6d0c:	2b00      	cmp	r3, #0
    6d0e:	d002      	beq.n	6d16 <bt_generic_le+0xae>
			hop();
    6d10:	f7ff f970 	bl	5ff4 <hop>
    6d14:	e003      	b.n	6d1e <bt_generic_le+0xb6>
		} else {
			TXLED_CLR;
    6d16:	4b7f      	ldr	r3, [pc, #508]	; (6f14 <bt_generic_le+0x2ac>)
    6d18:	f44f 7280 	mov.w	r2, #256	; 0x100
    6d1c:	601a      	str	r2, [r3, #0]
		}

		RXLED_CLR;
    6d1e:	4b7d      	ldr	r3, [pc, #500]	; (6f14 <bt_generic_le+0x2ac>)
    6d20:	2210      	movs	r2, #16
    6d22:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    6d24:	f7fd faee 	bl	4304 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    6d28:	2380      	movs	r3, #128	; 0x80
    6d2a:	74bb      	strb	r3, [r7, #18]
		while ((rx_tc == 0) && (rx_err == 0))
    6d2c:	e022      	b.n	6d74 <bt_generic_le+0x10c>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    6d2e:	2006      	movs	r0, #6
    6d30:	f003 fa80 	bl	a234 <cc2400_get>
    6d34:	4603      	mov	r3, r0
    6d36:	0a1b      	lsrs	r3, r3, #8
    6d38:	b29b      	uxth	r3, r3
    6d3a:	74fb      	strb	r3, [r7, #19]
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    6d3c:	4b79      	ldr	r3, [pc, #484]	; (6f24 <bt_generic_le+0x2bc>)
    6d3e:	781b      	ldrb	r3, [r3, #0]
    6d40:	b2db      	uxtb	r3, r3
    6d42:	2b00      	cmp	r3, #0
    6d44:	d011      	beq.n	6d6a <bt_generic_le+0x102>
    6d46:	f997 3012 	ldrsb.w	r3, [r7, #18]
    6d4a:	f113 0f80 	cmn.w	r3, #128	; 0x80
    6d4e:	d10c      	bne.n	6d6a <bt_generic_le+0x102>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    6d50:	4b75      	ldr	r3, [pc, #468]	; (6f28 <bt_generic_le+0x2c0>)
    6d52:	781b      	ldrb	r3, [r3, #0]
    6d54:	b25b      	sxtb	r3, r3
    6d56:	f103 0236 	add.w	r2, r3, #54	; 0x36
    6d5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
    6d5e:	4293      	cmp	r3, r2
    6d60:	bfb8      	it	lt
    6d62:	4613      	movlt	r3, r2
    6d64:	74fb      	strb	r3, [r7, #19]
				rssi_at_trigger = rssi;
    6d66:	7cfb      	ldrb	r3, [r7, #19]
    6d68:	74bb      	strb	r3, [r7, #18]
			}
			rssi_add(rssi);
    6d6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
    6d6e:	4618      	mov	r0, r3
    6d70:	f7fd fae2 	bl	4338 <rssi_add>
		RXLED_CLR;

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
    6d74:	4b6d      	ldr	r3, [pc, #436]	; (6f2c <bt_generic_le+0x2c4>)
    6d76:	681b      	ldr	r3, [r3, #0]
    6d78:	2b00      	cmp	r3, #0
    6d7a:	d103      	bne.n	6d84 <bt_generic_le+0x11c>
    6d7c:	4b6c      	ldr	r3, [pc, #432]	; (6f30 <bt_generic_le+0x2c8>)
    6d7e:	681b      	ldr	r3, [r3, #0]
    6d80:	2b00      	cmp	r3, #0
    6d82:	d0d4      	beq.n	6d2e <bt_generic_le+0xc6>
			}
			rssi_add(rssi);
		}

		/* Keep buffer swapping in sync with DMA. */
		if (rx_tc % 2) {
    6d84:	4b69      	ldr	r3, [pc, #420]	; (6f2c <bt_generic_le+0x2c4>)
    6d86:	681b      	ldr	r3, [r3, #0]
    6d88:	f003 0301 	and.w	r3, r3, #1
    6d8c:	2b00      	cmp	r3, #0
    6d8e:	d009      	beq.n	6da4 <bt_generic_le+0x13c>
			tmp = active_rxbuf;
    6d90:	4b68      	ldr	r3, [pc, #416]	; (6f34 <bt_generic_le+0x2cc>)
    6d92:	681b      	ldr	r3, [r3, #0]
    6d94:	60fb      	str	r3, [r7, #12]
			active_rxbuf = idle_rxbuf;
    6d96:	4b68      	ldr	r3, [pc, #416]	; (6f38 <bt_generic_le+0x2d0>)
    6d98:	681b      	ldr	r3, [r3, #0]
    6d9a:	4a66      	ldr	r2, [pc, #408]	; (6f34 <bt_generic_le+0x2cc>)
    6d9c:	6013      	str	r3, [r2, #0]
			idle_rxbuf = tmp;
    6d9e:	4a66      	ldr	r2, [pc, #408]	; (6f38 <bt_generic_le+0x2d0>)
    6da0:	68fb      	ldr	r3, [r7, #12]
    6da2:	6013      	str	r3, [r2, #0]
		}

		if (rx_err) {
    6da4:	4b62      	ldr	r3, [pc, #392]	; (6f30 <bt_generic_le+0x2c8>)
    6da6:	681b      	ldr	r3, [r3, #0]
    6da8:	2b00      	cmp	r3, #0
    6daa:	d007      	beq.n	6dbc <bt_generic_le+0x154>
			status |= DMA_ERROR;
    6dac:	4b63      	ldr	r3, [pc, #396]	; (6f3c <bt_generic_le+0x2d4>)
    6dae:	781b      	ldrb	r3, [r3, #0]
    6db0:	b2db      	uxtb	r3, r3
    6db2:	f043 0302 	orr.w	r3, r3, #2
    6db6:	b2da      	uxtb	r2, r3
    6db8:	4b60      	ldr	r3, [pc, #384]	; (6f3c <bt_generic_le+0x2d4>)
    6dba:	701a      	strb	r2, [r3, #0]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    6dbc:	4b5b      	ldr	r3, [pc, #364]	; (6f2c <bt_generic_le+0x2c4>)
    6dbe:	681b      	ldr	r3, [r3, #0]
    6dc0:	2b00      	cmp	r3, #0
    6dc2:	d100      	bne.n	6dc6 <bt_generic_le+0x15e>
			goto rx_continue;
    6dc4:	e085      	b.n	6ed2 <bt_generic_le+0x26a>

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    6dc6:	4b59      	ldr	r3, [pc, #356]	; (6f2c <bt_generic_le+0x2c4>)
    6dc8:	681b      	ldr	r3, [r3, #0]
    6dca:	2b01      	cmp	r3, #1
    6dcc:	d907      	bls.n	6dde <bt_generic_le+0x176>
			status |= DMA_OVERFLOW;
    6dce:	4b5b      	ldr	r3, [pc, #364]	; (6f3c <bt_generic_le+0x2d4>)
    6dd0:	781b      	ldrb	r3, [r3, #0]
    6dd2:	b2db      	uxtb	r3, r3
    6dd4:	f043 0301 	orr.w	r3, r3, #1
    6dd8:	b2da      	uxtb	r2, r3
    6dda:	4b58      	ldr	r3, [pc, #352]	; (6f3c <bt_generic_le+0x2d4>)
    6ddc:	701a      	strb	r2, [r3, #0]

		rssi_iir_update();
    6dde:	f7fd fae1 	bl	43a4 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    6de2:	4b50      	ldr	r3, [pc, #320]	; (6f24 <bt_generic_le+0x2bc>)
    6de4:	781b      	ldrb	r3, [r3, #0]
    6de6:	b2db      	uxtb	r3, r3
    6de8:	2b00      	cmp	r3, #0
    6dea:	d103      	bne.n	6df4 <bt_generic_le+0x18c>
    6dec:	4b54      	ldr	r3, [pc, #336]	; (6f40 <bt_generic_le+0x2d8>)
    6dee:	781b      	ldrb	r3, [r3, #0]
    6df0:	2b00      	cmp	r3, #0
    6df2:	d00c      	beq.n	6e0e <bt_generic_le+0x1a6>
			status |= CS_TRIGGER;
    6df4:	4b51      	ldr	r3, [pc, #324]	; (6f3c <bt_generic_le+0x2d4>)
    6df6:	781b      	ldrb	r3, [r3, #0]
    6df8:	b2db      	uxtb	r3, r3
    6dfa:	f043 0308 	orr.w	r3, r3, #8
    6dfe:	b2da      	uxtb	r2, r3
    6e00:	4b4e      	ldr	r3, [pc, #312]	; (6f3c <bt_generic_le+0x2d4>)
    6e02:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    6e04:	2302      	movs	r3, #2
    6e06:	77fb      	strb	r3, [r7, #31]
			cs_trigger = 0;
    6e08:	4b46      	ldr	r3, [pc, #280]	; (6f24 <bt_generic_le+0x2bc>)
    6e0a:	2200      	movs	r2, #0
    6e0c:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    6e0e:	4b4d      	ldr	r3, [pc, #308]	; (6f44 <bt_generic_le+0x2dc>)
    6e10:	781b      	ldrb	r3, [r3, #0]
    6e12:	b25a      	sxtb	r2, r3
    6e14:	4b44      	ldr	r3, [pc, #272]	; (6f28 <bt_generic_le+0x2c0>)
    6e16:	781b      	ldrb	r3, [r3, #0]
    6e18:	b25b      	sxtb	r3, r3
    6e1a:	3336      	adds	r3, #54	; 0x36
    6e1c:	429a      	cmp	r2, r3
    6e1e:	db09      	blt.n	6e34 <bt_generic_le+0x1cc>
			status |= RSSI_TRIGGER;
    6e20:	4b46      	ldr	r3, [pc, #280]	; (6f3c <bt_generic_le+0x2d4>)
    6e22:	781b      	ldrb	r3, [r3, #0]
    6e24:	b2db      	uxtb	r3, r3
    6e26:	f043 0310 	orr.w	r3, r3, #16
    6e2a:	b2da      	uxtb	r2, r3
    6e2c:	4b43      	ldr	r3, [pc, #268]	; (6f3c <bt_generic_le+0x2d4>)
    6e2e:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    6e30:	2302      	movs	r3, #2
    6e32:	77fb      	strb	r3, [r7, #31]
		}

		/* Send a packet once in a while (6.25 Hz) to keep
		 * host USB reads from timing out. */
		if (keepalive_trigger) {
    6e34:	4b44      	ldr	r3, [pc, #272]	; (6f48 <bt_generic_le+0x2e0>)
    6e36:	781b      	ldrb	r3, [r3, #0]
    6e38:	b2db      	uxtb	r3, r3
    6e3a:	2b00      	cmp	r3, #0
    6e3c:	d007      	beq.n	6e4e <bt_generic_le+0x1e6>
			if (hold == 0)
    6e3e:	7ffb      	ldrb	r3, [r7, #31]
    6e40:	2b00      	cmp	r3, #0
    6e42:	d101      	bne.n	6e48 <bt_generic_le+0x1e0>
				hold = 1;
    6e44:	2301      	movs	r3, #1
    6e46:	77fb      	strb	r3, [r7, #31]
			keepalive_trigger = 0;
    6e48:	4b3f      	ldr	r3, [pc, #252]	; (6f48 <bt_generic_le+0x2e0>)
    6e4a:	2200      	movs	r2, #0
    6e4c:	701a      	strb	r2, [r3, #0]
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    6e4e:	7ffb      	ldrb	r3, [r7, #31]
    6e50:	2b00      	cmp	r3, #0
    6e52:	d100      	bne.n	6e56 <bt_generic_le+0x1ee>
			goto rx_continue;
    6e54:	e03d      	b.n	6ed2 <bt_generic_le+0x26a>
		}
		hold--;
    6e56:	7ffb      	ldrb	r3, [r7, #31]
    6e58:	3b01      	subs	r3, #1
    6e5a:	77fb      	strb	r3, [r7, #31]

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    6e5c:	483b      	ldr	r0, [pc, #236]	; (6f4c <bt_generic_le+0x2e4>)
    6e5e:	493c      	ldr	r1, [pc, #240]	; (6f50 <bt_generic_le+0x2e8>)
    6e60:	f44f 72c8 	mov.w	r2, #400	; 0x190
    6e64:	f004 ffd0 	bl	be08 <memcpy>

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    6e68:	2300      	movs	r3, #0
    6e6a:	61bb      	str	r3, [r7, #24]
    6e6c:	e025      	b.n	6eba <bt_generic_le+0x252>
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    6e6e:	2300      	movs	r3, #0
    6e70:	617b      	str	r3, [r7, #20]
    6e72:	e01c      	b.n	6eae <bt_generic_le+0x246>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    6e74:	69bb      	ldr	r3, [r7, #24]
    6e76:	3332      	adds	r3, #50	; 0x32
    6e78:	00da      	lsls	r2, r3, #3
    6e7a:	697b      	ldr	r3, [r7, #20]
    6e7c:	4413      	add	r3, r2
    6e7e:	4a2e      	ldr	r2, [pc, #184]	; (6f38 <bt_generic_le+0x2d0>)
    6e80:	6811      	ldr	r1, [r2, #0]
    6e82:	69ba      	ldr	r2, [r7, #24]
    6e84:	440a      	add	r2, r1
    6e86:	7812      	ldrb	r2, [r2, #0]
    6e88:	09d2      	lsrs	r2, r2, #7
    6e8a:	b2d1      	uxtb	r1, r2
    6e8c:	4a2f      	ldr	r2, [pc, #188]	; (6f4c <bt_generic_le+0x2e4>)
    6e8e:	54d1      	strb	r1, [r2, r3]
				idle_rxbuf[i] <<= 1;
    6e90:	4b29      	ldr	r3, [pc, #164]	; (6f38 <bt_generic_le+0x2d0>)
    6e92:	681a      	ldr	r2, [r3, #0]
    6e94:	69bb      	ldr	r3, [r7, #24]
    6e96:	4413      	add	r3, r2
    6e98:	4a27      	ldr	r2, [pc, #156]	; (6f38 <bt_generic_le+0x2d0>)
    6e9a:	6811      	ldr	r1, [r2, #0]
    6e9c:	69ba      	ldr	r2, [r7, #24]
    6e9e:	440a      	add	r2, r1
    6ea0:	7812      	ldrb	r2, [r2, #0]
    6ea2:	0052      	lsls	r2, r2, #1
    6ea4:	b2d2      	uxtb	r2, r2
    6ea6:	701a      	strb	r2, [r3, #0]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    6ea8:	697b      	ldr	r3, [r7, #20]
    6eaa:	3301      	adds	r3, #1
    6eac:	617b      	str	r3, [r7, #20]
    6eae:	697b      	ldr	r3, [r7, #20]
    6eb0:	2b07      	cmp	r3, #7
    6eb2:	dddf      	ble.n	6e74 <bt_generic_le+0x20c>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    6eb4:	69bb      	ldr	r3, [r7, #24]
    6eb6:	3301      	adds	r3, #1
    6eb8:	61bb      	str	r3, [r7, #24]
    6eba:	69bb      	ldr	r3, [r7, #24]
    6ebc:	2b31      	cmp	r3, #49	; 0x31
    6ebe:	ddd6      	ble.n	6e6e <bt_generic_le+0x206>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    6ec0:	4b24      	ldr	r3, [pc, #144]	; (6f54 <bt_generic_le+0x2ec>)
    6ec2:	681b      	ldr	r3, [r3, #0]
    6ec4:	4821      	ldr	r0, [pc, #132]	; (6f4c <bt_generic_le+0x2e4>)
    6ec6:	4798      	blx	r3
    6ec8:	60b8      	str	r0, [r7, #8]
		if (!ret) break;
    6eca:	68bb      	ldr	r3, [r7, #8]
    6ecc:	2b00      	cmp	r3, #0
    6ece:	d100      	bne.n	6ed2 <bt_generic_le+0x26a>
    6ed0:	e00c      	b.n	6eec <bt_generic_le+0x284>

	rx_continue:
		rx_tc = 0;
    6ed2:	4b16      	ldr	r3, [pc, #88]	; (6f2c <bt_generic_le+0x2c4>)
    6ed4:	2200      	movs	r2, #0
    6ed6:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6ed8:	4b15      	ldr	r3, [pc, #84]	; (6f30 <bt_generic_le+0x2c8>)
    6eda:	2200      	movs	r2, #0
    6edc:	601a      	str	r2, [r3, #0]

	cs_trigger_enable();

	hold = 0;

	while (requested_mode == active_mode) {
    6ede:	4b1e      	ldr	r3, [pc, #120]	; (6f58 <bt_generic_le+0x2f0>)
    6ee0:	781b      	ldrb	r3, [r3, #0]
    6ee2:	b2db      	uxtb	r3, r3
    6ee4:	79fa      	ldrb	r2, [r7, #7]
    6ee6:	429a      	cmp	r2, r3
    6ee8:	f43f aee3 	beq.w	6cb2 <bt_generic_le+0x4a>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6eec:	4b1b      	ldr	r3, [pc, #108]	; (6f5c <bt_generic_le+0x2f4>)
    6eee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6ef2:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    6ef4:	f7fe fdc0 	bl	5a78 <cc2400_idle>
	dio_ssp_stop();
    6ef8:	f7fe fd5a 	bl	59b0 <dio_ssp_stop>
	cs_trigger_disable();
    6efc:	f7fd fc38 	bl	4770 <cs_trigger_disable>
}
    6f00:	3720      	adds	r7, #32
    6f02:	46bd      	mov	sp, r7
    6f04:	bd80      	pop	{r7, pc}
    6f06:	bf00      	nop
    6f08:	10000a42 	.word	0x10000a42
    6f0c:	10000a3e 	.word	0x10000a3e
    6f10:	e000e100 	.word	0xe000e100
    6f14:	2009c03c 	.word	0x2009c03c
    6f18:	10000a44 	.word	0x10000a44
    6f1c:	1000049c 	.word	0x1000049c
    6f20:	1000097d 	.word	0x1000097d
    6f24:	100010c0 	.word	0x100010c0
    6f28:	1000044d 	.word	0x1000044d
    6f2c:	10000b00 	.word	0x10000b00
    6f30:	100010bc 	.word	0x100010bc
    6f34:	10000450 	.word	0x10000450
    6f38:	10000454 	.word	0x10000454
    6f3c:	10000a48 	.word	0x10000a48
    6f40:	1000097e 	.word	0x1000097e
    6f44:	10000b04 	.word	0x10000b04
    6f48:	10000be0 	.word	0x10000be0
    6f4c:	10000d08 	.word	0x10000d08
    6f50:	10000e98 	.word	0x10000e98
    6f54:	10000998 	.word	0x10000998
    6f58:	10000a3f 	.word	0x10000a3f
    6f5c:	e000e180 	.word	0xe000e180

00006f60 <bt_le_sync>:


void bt_le_sync(u8 active_mode)
{
    6f60:	b590      	push	{r4, r7, lr}
    6f62:	b09b      	sub	sp, #108	; 0x6c
    6f64:	af00      	add	r7, sp, #0
    6f66:	4603      	mov	r3, r0
    6f68:	71fb      	strb	r3, [r7, #7]
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    6f6a:	4b87      	ldr	r3, [pc, #540]	; (7188 <bt_le_sync+0x228>)
    6f6c:	2201      	movs	r2, #1
    6f6e:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    6f70:	4a86      	ldr	r2, [pc, #536]	; (718c <bt_le_sync+0x22c>)
    6f72:	79fb      	ldrb	r3, [r7, #7]
    6f74:	7013      	strb	r3, [r2, #0]

	le.link_state = LINK_LISTENING;
    6f76:	4b86      	ldr	r3, [pc, #536]	; (7190 <bt_le_sync+0x230>)
    6f78:	2201      	movs	r2, #1
    6f7a:	751a      	strb	r2, [r3, #20]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    6f7c:	4b85      	ldr	r3, [pc, #532]	; (7194 <bt_le_sync+0x234>)
    6f7e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6f82:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    6f84:	4b84      	ldr	r3, [pc, #528]	; (7198 <bt_le_sync+0x238>)
    6f86:	2210      	movs	r2, #16
    6f88:	601a      	str	r2, [r3, #0]

	queue_init();
    6f8a:	f001 fef1 	bl	8d70 <queue_init>
	dio_ssp_init();
    6f8e:	f003 f895 	bl	a0bc <dio_ssp_init>
	dma_init_le();
    6f92:	f7fe fb6d 	bl	5670 <dma_init_le>
	dio_ssp_start();
    6f96:	f7fe fcdb 	bl	5950 <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    6f9a:	4b7d      	ldr	r3, [pc, #500]	; (7190 <bt_le_sync+0x230>)
    6f9c:	681b      	ldr	r3, [r3, #0]
    6f9e:	4618      	mov	r0, r3
    6fa0:	f002 ff8c 	bl	9ebc <rbit>
    6fa4:	4603      	mov	r3, r0
    6fa6:	4618      	mov	r0, r3
    6fa8:	f7fe fdec 	bl	5b84 <cc2400_rx_sync>

	while (requested_mode == active_mode) {
    6fac:	e247      	b.n	743e <bt_le_sync+0x4de>
		if (requested_channel != 0) {
    6fae:	4b7b      	ldr	r3, [pc, #492]	; (719c <bt_le_sync+0x23c>)
    6fb0:	881b      	ldrh	r3, [r3, #0]
    6fb2:	b29b      	uxth	r3, r3
    6fb4:	2b00      	cmp	r3, #0
    6fb6:	d029      	beq.n	700c <bt_le_sync+0xac>
			cc2400_strobe(SRFOFF);
    6fb8:	2064      	movs	r0, #100	; 0x64
    6fba:	f003 fa13 	bl	a3e4 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    6fbe:	bf00      	nop
    6fc0:	f003 fa06 	bl	a3d0 <cc2400_status>
    6fc4:	4603      	mov	r3, r0
    6fc6:	f003 0304 	and.w	r3, r3, #4
    6fca:	2b00      	cmp	r3, #0
    6fcc:	d1f8      	bne.n	6fc0 <bt_le_sync+0x60>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    6fce:	4b74      	ldr	r3, [pc, #464]	; (71a0 <bt_le_sync+0x240>)
    6fd0:	881b      	ldrh	r3, [r3, #0]
    6fd2:	b29b      	uxth	r3, r3
    6fd4:	3b01      	subs	r3, #1
    6fd6:	b29b      	uxth	r3, r3
    6fd8:	2002      	movs	r0, #2
    6fda:	4619      	mov	r1, r3
    6fdc:	f003 f940 	bl	a260 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    6fe0:	2061      	movs	r0, #97	; 0x61
    6fe2:	f003 f9ff 	bl	a3e4 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    6fe6:	bf00      	nop
    6fe8:	f003 f9f2 	bl	a3d0 <cc2400_status>
    6fec:	4603      	mov	r3, r0
    6fee:	f003 0304 	and.w	r3, r3, #4
    6ff2:	2b00      	cmp	r3, #0
    6ff4:	d0f8      	beq.n	6fe8 <bt_le_sync+0x88>

			/* RX mode */
			cc2400_strobe(SRX);
    6ff6:	2062      	movs	r0, #98	; 0x62
    6ff8:	f003 f9f4 	bl	a3e4 <cc2400_strobe>

			saved_request = requested_channel;
    6ffc:	4b67      	ldr	r3, [pc, #412]	; (719c <bt_le_sync+0x23c>)
    6ffe:	881b      	ldrh	r3, [r3, #0]
    7000:	b29a      	uxth	r2, r3
    7002:	4b68      	ldr	r3, [pc, #416]	; (71a4 <bt_le_sync+0x244>)
    7004:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    7006:	4b65      	ldr	r3, [pc, #404]	; (719c <bt_le_sync+0x23c>)
    7008:	2200      	movs	r2, #0
    700a:	801a      	strh	r2, [r3, #0]
		}

		RXLED_CLR;
    700c:	4b62      	ldr	r3, [pc, #392]	; (7198 <bt_le_sync+0x238>)
    700e:	2210      	movs	r2, #16
    7010:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    7012:	f7fd f977 	bl	4304 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    7016:	bf00      	nop
    7018:	4b63      	ldr	r3, [pc, #396]	; (71a8 <bt_le_sync+0x248>)
    701a:	681b      	ldr	r3, [r3, #0]
    701c:	2b00      	cmp	r3, #0
    701e:	d10e      	bne.n	703e <bt_le_sync+0xde>
    7020:	4b62      	ldr	r3, [pc, #392]	; (71ac <bt_le_sync+0x24c>)
    7022:	681b      	ldr	r3, [r3, #0]
    7024:	2b00      	cmp	r3, #0
    7026:	d10a      	bne.n	703e <bt_le_sync+0xde>
    7028:	4b61      	ldr	r3, [pc, #388]	; (71b0 <bt_le_sync+0x250>)
    702a:	781b      	ldrb	r3, [r3, #0]
    702c:	b2db      	uxtb	r3, r3
    702e:	2b00      	cmp	r3, #0
    7030:	d105      	bne.n	703e <bt_le_sync+0xde>
    7032:	4b60      	ldr	r3, [pc, #384]	; (71b4 <bt_le_sync+0x254>)
    7034:	781b      	ldrb	r3, [r3, #0]
    7036:	b2db      	uxtb	r3, r3
    7038:	79fa      	ldrb	r2, [r7, #7]
    703a:	429a      	cmp	r2, r3
    703c:	d0ec      	beq.n	7018 <bt_le_sync+0xb8>
			;

		if (requested_mode != active_mode) {
    703e:	4b5d      	ldr	r3, [pc, #372]	; (71b4 <bt_le_sync+0x254>)
    7040:	781b      	ldrb	r3, [r3, #0]
    7042:	b2db      	uxtb	r3, r3
    7044:	79fa      	ldrb	r2, [r7, #7]
    7046:	429a      	cmp	r2, r3
    7048:	d000      	beq.n	704c <bt_le_sync+0xec>
			goto cleanup;
    704a:	e1ff      	b.n	744c <bt_le_sync+0x4ec>
		}

		if (rx_err) {
    704c:	4b57      	ldr	r3, [pc, #348]	; (71ac <bt_le_sync+0x24c>)
    704e:	681b      	ldr	r3, [r3, #0]
    7050:	2b00      	cmp	r3, #0
    7052:	d007      	beq.n	7064 <bt_le_sync+0x104>
			status |= DMA_ERROR;
    7054:	4b58      	ldr	r3, [pc, #352]	; (71b8 <bt_le_sync+0x258>)
    7056:	781b      	ldrb	r3, [r3, #0]
    7058:	b2db      	uxtb	r3, r3
    705a:	f043 0302 	orr.w	r3, r3, #2
    705e:	b2da      	uxtb	r2, r3
    7060:	4b55      	ldr	r3, [pc, #340]	; (71b8 <bt_le_sync+0x258>)
    7062:	701a      	strb	r2, [r3, #0]
		}

		if (do_hop)
    7064:	4b52      	ldr	r3, [pc, #328]	; (71b0 <bt_le_sync+0x250>)
    7066:	781b      	ldrb	r3, [r3, #0]
    7068:	b2db      	uxtb	r3, r3
    706a:	2b00      	cmp	r3, #0
    706c:	d000      	beq.n	7070 <bt_le_sync+0x110>
			goto rx_flush;
    706e:	e12b      	b.n	72c8 <bt_le_sync+0x368>

		/* No DMA transfer? */
		if (!rx_tc)
    7070:	4b4d      	ldr	r3, [pc, #308]	; (71a8 <bt_le_sync+0x248>)
    7072:	681b      	ldr	r3, [r3, #0]
    7074:	2b00      	cmp	r3, #0
    7076:	d100      	bne.n	707a <bt_le_sync+0x11a>
    7078:	e1e1      	b.n	743e <bt_le_sync+0x4de>

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    707a:	f107 0308 	add.w	r3, r7, #8
    707e:	65fb      	str	r3, [r7, #92]	; 0x5c
		packet[0] = le.access_address;
    7080:	4b43      	ldr	r3, [pc, #268]	; (7190 <bt_le_sync+0x230>)
    7082:	681b      	ldr	r3, [r3, #0]
    7084:	60bb      	str	r3, [r7, #8]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    7086:	4b46      	ldr	r3, [pc, #280]	; (71a0 <bt_le_sync+0x240>)
    7088:	881b      	ldrh	r3, [r3, #0]
    708a:	b29b      	uxth	r3, r3
    708c:	b2db      	uxtb	r3, r3
    708e:	3b62      	subs	r3, #98	; 0x62
    7090:	b2db      	uxtb	r3, r3
    7092:	4618      	mov	r0, r3
    7094:	f001 fcec 	bl	8a70 <btle_channel_index>
    7098:	4603      	mov	r3, r0
    709a:	461a      	mov	r2, r3
    709c:	4613      	mov	r3, r2
    709e:	005b      	lsls	r3, r3, #1
    70a0:	4413      	add	r3, r2
    70a2:	011b      	lsls	r3, r3, #4
    70a4:	4a45      	ldr	r2, [pc, #276]	; (71bc <bt_le_sync+0x25c>)
    70a6:	4413      	add	r3, r2
    70a8:	65bb      	str	r3, [r7, #88]	; 0x58
		for (i = 0; i < 4; i+= 4) {
    70aa:	2300      	movs	r3, #0
    70ac:	667b      	str	r3, [r7, #100]	; 0x64
    70ae:	e034      	b.n	711a <bt_le_sync+0x1ba>
			uint32_t v = rxbuf1[i+0] << 24
    70b0:	4a43      	ldr	r2, [pc, #268]	; (71c0 <bt_le_sync+0x260>)
    70b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    70b4:	4413      	add	r3, r2
    70b6:	781b      	ldrb	r3, [r3, #0]
    70b8:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    70ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    70bc:	3301      	adds	r3, #1
    70be:	4940      	ldr	r1, [pc, #256]	; (71c0 <bt_le_sync+0x260>)
    70c0:	5ccb      	ldrb	r3, [r1, r3]
    70c2:	041b      	lsls	r3, r3, #16
    70c4:	431a      	orrs	r2, r3
					   | rxbuf1[i+2] << 8
    70c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    70c8:	3302      	adds	r3, #2
    70ca:	493d      	ldr	r1, [pc, #244]	; (71c0 <bt_le_sync+0x260>)
    70cc:	5ccb      	ldrb	r3, [r1, r3]
    70ce:	021b      	lsls	r3, r3, #8
    70d0:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    70d2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    70d4:	3203      	adds	r2, #3
    70d6:	493a      	ldr	r1, [pc, #232]	; (71c0 <bt_le_sync+0x260>)
    70d8:	5c8a      	ldrb	r2, [r1, r2]
    70da:	4313      	orrs	r3, r2
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    70dc:	657b      	str	r3, [r7, #84]	; 0x54
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    70de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    70e0:	2b00      	cmp	r3, #0
    70e2:	da00      	bge.n	70e6 <bt_le_sync+0x186>
    70e4:	3303      	adds	r3, #3
    70e6:	109b      	asrs	r3, r3, #2
    70e8:	1c5c      	adds	r4, r3, #1
    70ea:	6d78      	ldr	r0, [r7, #84]	; 0x54
    70ec:	f002 fee6 	bl	9ebc <rbit>
    70f0:	4601      	mov	r1, r0
    70f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    70f4:	2b00      	cmp	r3, #0
    70f6:	da00      	bge.n	70fa <bt_le_sync+0x19a>
    70f8:	3303      	adds	r3, #3
    70fa:	109b      	asrs	r3, r3, #2
    70fc:	009b      	lsls	r3, r3, #2
    70fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
    7100:	4413      	add	r3, r2
    7102:	681b      	ldr	r3, [r3, #0]
    7104:	ea81 0203 	eor.w	r2, r1, r3
    7108:	00a3      	lsls	r3, r4, #2
    710a:	f107 0168 	add.w	r1, r7, #104	; 0x68
    710e:	440b      	add	r3, r1
    7110:	f843 2c60 	str.w	r2, [r3, #-96]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
    7114:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7116:	3304      	adds	r3, #4
    7118:	667b      	str	r3, [r7, #100]	; 0x64
    711a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    711c:	2b03      	cmp	r3, #3
    711e:	ddc7      	ble.n	70b0 <bt_le_sync+0x150>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		unsigned len = (p[5] & 0x3f) + 2;
    7120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    7122:	3305      	adds	r3, #5
    7124:	781b      	ldrb	r3, [r3, #0]
    7126:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    712a:	3302      	adds	r3, #2
    712c:	653b      	str	r3, [r7, #80]	; 0x50
		if (len > 39)
    712e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7130:	2b27      	cmp	r3, #39	; 0x27
    7132:	d900      	bls.n	7136 <bt_le_sync+0x1d6>
			goto rx_flush;
    7134:	e0c8      	b.n	72c8 <bt_le_sync+0x368>

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    7136:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7138:	3306      	adds	r3, #6
    713a:	089b      	lsrs	r3, r3, #2
    713c:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (total_transfers < 11) {
    713e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    7140:	2b0a      	cmp	r3, #10
    7142:	d80d      	bhi.n	7160 <bt_le_sync+0x200>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    7144:	bf00      	nop
    7146:	4b1f      	ldr	r3, [pc, #124]	; (71c4 <bt_le_sync+0x264>)
    7148:	681a      	ldr	r2, [r3, #0]
    714a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    714c:	009b      	lsls	r3, r3, #2
    714e:	491c      	ldr	r1, [pc, #112]	; (71c0 <bt_le_sync+0x260>)
    7150:	440b      	add	r3, r1
    7152:	429a      	cmp	r2, r3
    7154:	d20f      	bcs.n	7176 <bt_le_sync+0x216>
    7156:	4b15      	ldr	r3, [pc, #84]	; (71ac <bt_le_sync+0x24c>)
    7158:	681b      	ldr	r3, [r3, #0]
    715a:	2b00      	cmp	r3, #0
    715c:	d0f3      	beq.n	7146 <bt_le_sync+0x1e6>
    715e:	e00a      	b.n	7176 <bt_le_sync+0x216>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    7160:	bf00      	nop
    7162:	4b19      	ldr	r3, [pc, #100]	; (71c8 <bt_le_sync+0x268>)
    7164:	681b      	ldr	r3, [r3, #0]
    7166:	f003 0301 	and.w	r3, r3, #1
    716a:	2b00      	cmp	r3, #0
    716c:	d003      	beq.n	7176 <bt_le_sync+0x216>
    716e:	4b0f      	ldr	r3, [pc, #60]	; (71ac <bt_le_sync+0x24c>)
    7170:	681b      	ldr	r3, [r3, #0]
    7172:	2b00      	cmp	r3, #0
    7174:	d0f5      	beq.n	7162 <bt_le_sync+0x202>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7176:	4a15      	ldr	r2, [pc, #84]	; (71cc <bt_le_sync+0x26c>)
    7178:	4b14      	ldr	r3, [pc, #80]	; (71cc <bt_le_sync+0x26c>)
    717a:	681b      	ldr	r3, [r3, #0]
    717c:	f023 0301 	bic.w	r3, r3, #1
    7180:	6013      	str	r3, [r2, #0]

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    7182:	2304      	movs	r3, #4
    7184:	667b      	str	r3, [r7, #100]	; 0x64
    7186:	e058      	b.n	723a <bt_le_sync+0x2da>
    7188:	10000a42 	.word	0x10000a42
    718c:	10000a3e 	.word	0x10000a3e
    7190:	10000458 	.word	0x10000458
    7194:	e000e100 	.word	0xe000e100
    7198:	2009c03c 	.word	0x2009c03c
    719c:	10000a44 	.word	0x10000a44
    71a0:	1000049c 	.word	0x1000049c
    71a4:	10000a46 	.word	0x10000a46
    71a8:	10000b00 	.word	0x10000b00
    71ac:	100010bc 	.word	0x100010bc
    71b0:	1000097d 	.word	0x1000097d
    71b4:	10000a3f 	.word	0x10000a3f
    71b8:	10000a48 	.word	0x10000a48
    71bc:	0000c068 	.word	0x0000c068
    71c0:	10001088 	.word	0x10001088
    71c4:	50004104 	.word	0x50004104
    71c8:	50004110 	.word	0x50004110
    71cc:	40030024 	.word	0x40030024
			uint32_t v = rxbuf1[i+0] << 24
    71d0:	4aa5      	ldr	r2, [pc, #660]	; (7468 <bt_le_sync+0x508>)
    71d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    71d4:	4413      	add	r3, r2
    71d6:	781b      	ldrb	r3, [r3, #0]
    71d8:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    71da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    71dc:	3301      	adds	r3, #1
    71de:	49a2      	ldr	r1, [pc, #648]	; (7468 <bt_le_sync+0x508>)
    71e0:	5ccb      	ldrb	r3, [r1, r3]
    71e2:	041b      	lsls	r3, r3, #16
    71e4:	431a      	orrs	r2, r3
				       | rxbuf1[i+2] << 8
    71e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    71e8:	3302      	adds	r3, #2
    71ea:	499f      	ldr	r1, [pc, #636]	; (7468 <bt_le_sync+0x508>)
    71ec:	5ccb      	ldrb	r3, [r1, r3]
    71ee:	021b      	lsls	r3, r3, #8
    71f0:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    71f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    71f4:	3203      	adds	r2, #3
    71f6:	499c      	ldr	r1, [pc, #624]	; (7468 <bt_le_sync+0x508>)
    71f8:	5c8a      	ldrb	r2, [r1, r2]
    71fa:	4313      	orrs	r3, r2
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    71fc:	64bb      	str	r3, [r7, #72]	; 0x48
					   | rxbuf1[i+1] << 16
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    71fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7200:	2b00      	cmp	r3, #0
    7202:	da00      	bge.n	7206 <bt_le_sync+0x2a6>
    7204:	3303      	adds	r3, #3
    7206:	109b      	asrs	r3, r3, #2
    7208:	1c5c      	adds	r4, r3, #1
    720a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    720c:	f002 fe56 	bl	9ebc <rbit>
    7210:	4601      	mov	r1, r0
    7212:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7214:	2b00      	cmp	r3, #0
    7216:	da00      	bge.n	721a <bt_le_sync+0x2ba>
    7218:	3303      	adds	r3, #3
    721a:	109b      	asrs	r3, r3, #2
    721c:	009b      	lsls	r3, r3, #2
    721e:	6dba      	ldr	r2, [r7, #88]	; 0x58
    7220:	4413      	add	r3, r2
    7222:	681b      	ldr	r3, [r3, #0]
    7224:	ea81 0203 	eor.w	r2, r1, r3
    7228:	00a3      	lsls	r3, r4, #2
    722a:	f107 0168 	add.w	r1, r7, #104	; 0x68
    722e:	440b      	add	r3, r1
    7230:	f843 2c60 	str.w	r2, [r3, #-96]
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    7234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7236:	3304      	adds	r3, #4
    7238:	667b      	str	r3, [r7, #100]	; 0x64
    723a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    723c:	2b2b      	cmp	r3, #43	; 0x2b
    723e:	ddc7      	ble.n	71d0 <bt_le_sync+0x270>
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    7240:	4b8a      	ldr	r3, [pc, #552]	; (746c <bt_le_sync+0x50c>)
    7242:	691b      	ldr	r3, [r3, #16]
    7244:	2b00      	cmp	r3, #0
    7246:	d023      	beq.n	7290 <bt_le_sync+0x330>
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    7248:	4b88      	ldr	r3, [pc, #544]	; (746c <bt_le_sync+0x50c>)
    724a:	68d9      	ldr	r1, [r3, #12]
    724c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    724e:	1d1a      	adds	r2, r3, #4
    7250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7252:	4608      	mov	r0, r1
    7254:	4611      	mov	r1, r2
    7256:	461a      	mov	r2, r3
    7258:	f001 fd0e 	bl	8c78 <btle_crcgen_lut>
    725c:	6478      	str	r0, [r7, #68]	; 0x44
			u32 wire_crc = (p[4+len+2] << 16)
    725e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7260:	3306      	adds	r3, #6
    7262:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    7264:	4413      	add	r3, r2
    7266:	781b      	ldrb	r3, [r3, #0]
    7268:	041a      	lsls	r2, r3, #16
						 | (p[4+len+1] << 8)
    726a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    726c:	3305      	adds	r3, #5
    726e:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    7270:	440b      	add	r3, r1
    7272:	781b      	ldrb	r3, [r3, #0]
    7274:	021b      	lsls	r3, r3, #8
    7276:	4313      	orrs	r3, r2
						 | (p[4+len+0] << 0);
    7278:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    727a:	3204      	adds	r2, #4
    727c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    727e:	440a      	add	r2, r1
    7280:	7812      	ldrb	r2, [r2, #0]
    7282:	4313      	orrs	r3, r2
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
			u32 wire_crc = (p[4+len+2] << 16)
    7284:	643b      	str	r3, [r7, #64]	; 0x40
						 | (p[4+len+1] << 8)
						 | (p[4+len+0] << 0);
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    7286:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    7288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    728a:	429a      	cmp	r2, r3
    728c:	d000      	beq.n	7290 <bt_le_sync+0x330>
				goto rx_flush;
    728e:	e01b      	b.n	72c8 <bt_le_sync+0x368>
		}


		RXLED_SET;
    7290:	4b77      	ldr	r3, [pc, #476]	; (7470 <bt_le_sync+0x510>)
    7292:	2210      	movs	r2, #16
    7294:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    7296:	4b77      	ldr	r3, [pc, #476]	; (7474 <bt_le_sync+0x514>)
    7298:	681b      	ldr	r3, [r3, #0]
    729a:	f107 0208 	add.w	r2, r7, #8
    729e:	4610      	mov	r0, r2
    72a0:	4798      	blx	r3
		enqueue(LE_PACKET, (uint8_t *)packet);
    72a2:	f107 0308 	add.w	r3, r7, #8
    72a6:	2001      	movs	r0, #1
    72a8:	4619      	mov	r1, r3
    72aa:	f7fd f90d 	bl	44c8 <enqueue>
		le.last_packet = CLK100NS;
    72ae:	4b72      	ldr	r3, [pc, #456]	; (7478 <bt_le_sync+0x518>)
    72b0:	681b      	ldr	r3, [r3, #0]
    72b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    72b6:	f640 4235 	movw	r2, #3125	; 0xc35
    72ba:	fb02 f203 	mul.w	r2, r2, r3
    72be:	4b6f      	ldr	r3, [pc, #444]	; (747c <bt_le_sync+0x51c>)
    72c0:	681b      	ldr	r3, [r3, #0]
    72c2:	4413      	add	r3, r2
    72c4:	4a69      	ldr	r2, [pc, #420]	; (746c <bt_le_sync+0x50c>)
    72c6:	6413      	str	r3, [r2, #64]	; 0x40

	rx_flush:
		cc2400_strobe(SFSON);
    72c8:	2061      	movs	r0, #97	; 0x61
    72ca:	f003 f88b 	bl	a3e4 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    72ce:	bf00      	nop
    72d0:	f003 f87e 	bl	a3d0 <cc2400_status>
    72d4:	4603      	mov	r3, r0
    72d6:	f003 0304 	and.w	r3, r3, #4
    72da:	2b00      	cmp	r3, #0
    72dc:	d0f8      	beq.n	72d0 <bt_le_sync+0x370>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    72de:	4a68      	ldr	r2, [pc, #416]	; (7480 <bt_le_sync+0x520>)
    72e0:	4b67      	ldr	r3, [pc, #412]	; (7480 <bt_le_sync+0x520>)
    72e2:	681b      	ldr	r3, [r3, #0]
    72e4:	f023 0301 	bic.w	r3, r3, #1
    72e8:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    72ea:	e003      	b.n	72f4 <bt_le_sync+0x394>
			u8 tmp = (u8)DIO_SSP_DR;
    72ec:	4b65      	ldr	r3, [pc, #404]	; (7484 <bt_le_sync+0x524>)
    72ee:	681b      	ldr	r3, [r3, #0]
    72f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    72f4:	4b64      	ldr	r3, [pc, #400]	; (7488 <bt_le_sync+0x528>)
    72f6:	681b      	ldr	r3, [r3, #0]
    72f8:	f003 0304 	and.w	r3, r3, #4
    72fc:	2b00      	cmp	r3, #0
    72fe:	d1f5      	bne.n	72ec <bt_le_sync+0x38c>
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    7300:	4b5d      	ldr	r3, [pc, #372]	; (7478 <bt_le_sync+0x518>)
    7302:	681b      	ldr	r3, [r3, #0]
    7304:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7308:	f640 4235 	movw	r2, #3125	; 0xc35
    730c:	fb02 f203 	mul.w	r2, r2, r3
    7310:	4b5a      	ldr	r3, [pc, #360]	; (747c <bt_le_sync+0x51c>)
    7312:	681b      	ldr	r3, [r3, #0]
    7314:	4413      	add	r3, r2
    7316:	663b      	str	r3, [r7, #96]	; 0x60
		if (now < le.last_packet)
    7318:	4b54      	ldr	r3, [pc, #336]	; (746c <bt_le_sync+0x50c>)
    731a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    731c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    731e:	429a      	cmp	r2, r3
    7320:	d905      	bls.n	732e <bt_le_sync+0x3ce>
			now += 3276800000; // handle rollover
    7322:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7324:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    7328:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    732c:	663b      	str	r3, [r7, #96]	; 0x60
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    732e:	4b4f      	ldr	r3, [pc, #316]	; (746c <bt_le_sync+0x50c>)
    7330:	7d1b      	ldrb	r3, [r3, #20]

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
		if  ( // timeout
    7332:	2b03      	cmp	r3, #3
    7334:	d003      	beq.n	733e <bt_le_sync+0x3de>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    7336:	4b4d      	ldr	r3, [pc, #308]	; (746c <bt_le_sync+0x50c>)
    7338:	7d1b      	ldrb	r3, [r3, #20]
    733a:	2b02      	cmp	r3, #2
    733c:	d106      	bne.n	734c <bt_le_sync+0x3ec>
			&& (now - le.last_packet > 50000000))
    733e:	4b4b      	ldr	r3, [pc, #300]	; (746c <bt_le_sync+0x50c>)
    7340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7342:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    7344:	1ad3      	subs	r3, r2, r3
    7346:	4a51      	ldr	r2, [pc, #324]	; (748c <bt_le_sync+0x52c>)
    7348:	4293      	cmp	r3, r2
    734a:	d803      	bhi.n	7354 <bt_le_sync+0x3f4>
			// jam finished
			|| (le_jam_count == 1)
    734c:	4b50      	ldr	r3, [pc, #320]	; (7490 <bt_le_sync+0x530>)
    734e:	681b      	ldr	r3, [r3, #0]
    7350:	2b01      	cmp	r3, #1
    7352:	d137      	bne.n	73c4 <bt_le_sync+0x464>
			)
		{
			reset_le();
    7354:	f7ff fc2c 	bl	6bb0 <reset_le>
			le_jam_count = 0;
    7358:	4b4d      	ldr	r3, [pc, #308]	; (7490 <bt_le_sync+0x530>)
    735a:	2200      	movs	r2, #0
    735c:	601a      	str	r2, [r3, #0]
			TXLED_CLR;
    735e:	4b4d      	ldr	r3, [pc, #308]	; (7494 <bt_le_sync+0x534>)
    7360:	f44f 7280 	mov.w	r2, #256	; 0x100
    7364:	601a      	str	r2, [r3, #0]

			if (jam_mode == JAM_ONCE) {
    7366:	4b4c      	ldr	r3, [pc, #304]	; (7498 <bt_le_sync+0x538>)
    7368:	781b      	ldrb	r3, [r3, #0]
    736a:	b2db      	uxtb	r3, r3
    736c:	2b01      	cmp	r3, #1
    736e:	d106      	bne.n	737e <bt_le_sync+0x41e>
				jam_mode = JAM_NONE;
    7370:	4b49      	ldr	r3, [pc, #292]	; (7498 <bt_le_sync+0x538>)
    7372:	2200      	movs	r2, #0
    7374:	701a      	strb	r2, [r3, #0]
				requested_mode = MODE_IDLE;
    7376:	4b49      	ldr	r3, [pc, #292]	; (749c <bt_le_sync+0x53c>)
    7378:	2200      	movs	r2, #0
    737a:	701a      	strb	r2, [r3, #0]
				goto cleanup;
    737c:	e066      	b.n	744c <bt_le_sync+0x4ec>
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    737e:	79fb      	ldrb	r3, [r7, #7]
    7380:	2b0a      	cmp	r3, #10
    7382:	d101      	bne.n	7388 <bt_le_sync+0x428>
				goto cleanup;
    7384:	bf00      	nop
    7386:	e061      	b.n	744c <bt_le_sync+0x4ec>

			le.link_state = LINK_LISTENING;
    7388:	4b38      	ldr	r3, [pc, #224]	; (746c <bt_le_sync+0x50c>)
    738a:	2201      	movs	r2, #1
    738c:	751a      	strb	r2, [r3, #20]

			cc2400_strobe(SRFOFF);
    738e:	2064      	movs	r0, #100	; 0x64
    7390:	f003 f828 	bl	a3e4 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    7394:	bf00      	nop
    7396:	f003 f81b 	bl	a3d0 <cc2400_status>
    739a:	4603      	mov	r3, r0
    739c:	f003 0304 	and.w	r3, r3, #4
    73a0:	2b00      	cmp	r3, #0
    73a2:	d1f8      	bne.n	7396 <bt_le_sync+0x436>

			/* Retune */
			channel = saved_request != 0 ? saved_request : 2402;
    73a4:	4b3e      	ldr	r3, [pc, #248]	; (74a0 <bt_le_sync+0x540>)
    73a6:	881b      	ldrh	r3, [r3, #0]
    73a8:	b29b      	uxth	r3, r3
    73aa:	2b00      	cmp	r3, #0
    73ac:	d003      	beq.n	73b6 <bt_le_sync+0x456>
    73ae:	4b3c      	ldr	r3, [pc, #240]	; (74a0 <bt_le_sync+0x540>)
    73b0:	881b      	ldrh	r3, [r3, #0]
    73b2:	b29b      	uxth	r3, r3
    73b4:	e001      	b.n	73ba <bt_le_sync+0x45a>
    73b6:	f640 1362 	movw	r3, #2402	; 0x962
    73ba:	4a3a      	ldr	r2, [pc, #232]	; (74a4 <bt_le_sync+0x544>)
    73bc:	8013      	strh	r3, [r2, #0]
			restart_jamming = 1;
    73be:	4b3a      	ldr	r3, [pc, #232]	; (74a8 <bt_le_sync+0x548>)
    73c0:	2201      	movs	r2, #1
    73c2:	601a      	str	r2, [r3, #0]
		}

		cc2400_set(SYNCL, le.syncl);
    73c4:	4b29      	ldr	r3, [pc, #164]	; (746c <bt_le_sync+0x50c>)
    73c6:	88db      	ldrh	r3, [r3, #6]
    73c8:	202c      	movs	r0, #44	; 0x2c
    73ca:	4619      	mov	r1, r3
    73cc:	f002 ff48 	bl	a260 <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    73d0:	4b26      	ldr	r3, [pc, #152]	; (746c <bt_le_sync+0x50c>)
    73d2:	889b      	ldrh	r3, [r3, #4]
    73d4:	202d      	movs	r0, #45	; 0x2d
    73d6:	4619      	mov	r1, r3
    73d8:	f002 ff42 	bl	a260 <cc2400_set>

		if (do_hop)
    73dc:	4b33      	ldr	r3, [pc, #204]	; (74ac <bt_le_sync+0x54c>)
    73de:	781b      	ldrb	r3, [r3, #0]
    73e0:	b2db      	uxtb	r3, r3
    73e2:	2b00      	cmp	r3, #0
    73e4:	d001      	beq.n	73ea <bt_le_sync+0x48a>
			hop();
    73e6:	f7fe fe05 	bl	5ff4 <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    73ea:	4b29      	ldr	r3, [pc, #164]	; (7490 <bt_le_sync+0x530>)
    73ec:	681b      	ldr	r3, [r3, #0]
    73ee:	2b00      	cmp	r3, #0
    73f0:	dd07      	ble.n	7402 <bt_le_sync+0x4a2>
			le_jam();
    73f2:	f7fe fdb5 	bl	5f60 <le_jam>
			--le_jam_count;
    73f6:	4b26      	ldr	r3, [pc, #152]	; (7490 <bt_le_sync+0x530>)
    73f8:	681b      	ldr	r3, [r3, #0]
    73fa:	3b01      	subs	r3, #1
    73fc:	4a24      	ldr	r2, [pc, #144]	; (7490 <bt_le_sync+0x530>)
    73fe:	6013      	str	r3, [r2, #0]
    7400:	e017      	b.n	7432 <bt_le_sync+0x4d2>
		} else {
			/* RX mode */
			dma_init_le();
    7402:	f7fe f935 	bl	5670 <dma_init_le>
			dio_ssp_start();
    7406:	f7fe faa3 	bl	5950 <dio_ssp_start>

			if (restart_jamming) {
    740a:	4b27      	ldr	r3, [pc, #156]	; (74a8 <bt_le_sync+0x548>)
    740c:	681b      	ldr	r3, [r3, #0]
    740e:	2b00      	cmp	r3, #0
    7410:	d00c      	beq.n	742c <bt_le_sync+0x4cc>
				cc2400_rx_sync(rbit(le.access_address));
    7412:	4b16      	ldr	r3, [pc, #88]	; (746c <bt_le_sync+0x50c>)
    7414:	681b      	ldr	r3, [r3, #0]
    7416:	4618      	mov	r0, r3
    7418:	f002 fd50 	bl	9ebc <rbit>
    741c:	4603      	mov	r3, r0
    741e:	4618      	mov	r0, r3
    7420:	f7fe fbb0 	bl	5b84 <cc2400_rx_sync>
				restart_jamming = 0;
    7424:	4b20      	ldr	r3, [pc, #128]	; (74a8 <bt_le_sync+0x548>)
    7426:	2200      	movs	r2, #0
    7428:	601a      	str	r2, [r3, #0]
    742a:	e002      	b.n	7432 <bt_le_sync+0x4d2>
			} else {
				cc2400_strobe(SRX);
    742c:	2062      	movs	r0, #98	; 0x62
    742e:	f002 ffd9 	bl	a3e4 <cc2400_strobe>
			}
		}

		rx_tc = 0;
    7432:	4b1f      	ldr	r3, [pc, #124]	; (74b0 <bt_le_sync+0x550>)
    7434:	2200      	movs	r2, #0
    7436:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    7438:	4b1e      	ldr	r3, [pc, #120]	; (74b4 <bt_le_sync+0x554>)
    743a:	2200      	movs	r2, #0
    743c:	601a      	str	r2, [r3, #0]
	dma_init_le();
	dio_ssp_start();

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address

	while (requested_mode == active_mode) {
    743e:	4b17      	ldr	r3, [pc, #92]	; (749c <bt_le_sync+0x53c>)
    7440:	781b      	ldrb	r3, [r3, #0]
    7442:	b2db      	uxtb	r3, r3
    7444:	79fa      	ldrb	r2, [r7, #7]
    7446:	429a      	cmp	r2, r3
    7448:	f43f adb1 	beq.w	6fae <bt_le_sync+0x4e>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    744c:	4b1a      	ldr	r3, [pc, #104]	; (74b8 <bt_le_sync+0x558>)
    744e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7452:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    7454:	f7fe fb10 	bl	5a78 <cc2400_idle>
	dio_ssp_stop();
    7458:	f7fe faaa 	bl	59b0 <dio_ssp_stop>
	cs_trigger_disable();
    745c:	f7fd f988 	bl	4770 <cs_trigger_disable>
}
    7460:	376c      	adds	r7, #108	; 0x6c
    7462:	46bd      	mov	sp, r7
    7464:	bd90      	pop	{r4, r7, pc}
    7466:	bf00      	nop
    7468:	10001088 	.word	0x10001088
    746c:	10000458 	.word	0x10000458
    7470:	2009c038 	.word	0x2009c038
    7474:	1000099c 	.word	0x1000099c
    7478:	10000be4 	.word	0x10000be4
    747c:	40004008 	.word	0x40004008
    7480:	40030024 	.word	0x40030024
    7484:	40030008 	.word	0x40030008
    7488:	4003000c 	.word	0x4003000c
    748c:	02faf080 	.word	0x02faf080
    7490:	10000994 	.word	0x10000994
    7494:	2009c03c 	.word	0x2009c03c
    7498:	10000a40 	.word	0x10000a40
    749c:	10000a3f 	.word	0x10000a3f
    74a0:	10000a46 	.word	0x10000a46
    74a4:	1000049c 	.word	0x1000049c
    74a8:	10000a50 	.word	0x10000a50
    74ac:	1000097d 	.word	0x1000097d
    74b0:	10000b00 	.word	0x10000b00
    74b4:	100010bc 	.word	0x100010bc
    74b8:	e000e180 	.word	0xe000e180

000074bc <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    74bc:	b580      	push	{r7, lr}
    74be:	b08c      	sub	sp, #48	; 0x30
    74c0:	af00      	add	r7, sp, #0
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    74c2:	4b6c      	ldr	r3, [pc, #432]	; (7674 <cb_follow_le+0x1b8>)
    74c4:	881b      	ldrh	r3, [r3, #0]
    74c6:	b29b      	uxth	r3, r3
    74c8:	b2db      	uxtb	r3, r3
    74ca:	3b62      	subs	r3, #98	; 0x62
    74cc:	b2db      	uxtb	r3, r3
    74ce:	4618      	mov	r0, r3
    74d0:	f001 face 	bl	8a70 <btle_channel_index>
    74d4:	4603      	mov	r3, r0
    74d6:	461a      	mov	r2, r3
    74d8:	4b67      	ldr	r3, [pc, #412]	; (7678 <cb_follow_le+0x1bc>)
    74da:	5c9b      	ldrb	r3, [r3, r2]
    74dc:	623b      	str	r3, [r7, #32]

	u32 access_address = 0;
    74de:	2300      	movs	r3, #0
    74e0:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < 31; ++i) {
    74e2:	2300      	movs	r3, #0
    74e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    74e6:	e00e      	b.n	7506 <cb_follow_le+0x4a>
		access_address >>= 1;
    74e8:	69fb      	ldr	r3, [r7, #28]
    74ea:	085b      	lsrs	r3, r3, #1
    74ec:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    74ee:	4a63      	ldr	r2, [pc, #396]	; (767c <cb_follow_le+0x1c0>)
    74f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    74f2:	4413      	add	r3, r2
    74f4:	781b      	ldrb	r3, [r3, #0]
    74f6:	07db      	lsls	r3, r3, #31
    74f8:	461a      	mov	r2, r3
    74fa:	69fb      	ldr	r3, [r7, #28]
    74fc:	4313      	orrs	r3, r2
    74fe:	61fb      	str	r3, [r7, #28]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    7500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7502:	3301      	adds	r3, #1
    7504:	62fb      	str	r3, [r7, #44]	; 0x2c
    7506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7508:	2b1e      	cmp	r3, #30
    750a:	dded      	ble.n	74e8 <cb_follow_le+0x2c>
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    750c:	231f      	movs	r3, #31
    750e:	62fb      	str	r3, [r7, #44]	; 0x2c
    7510:	e0a6      	b.n	7660 <cb_follow_le+0x1a4>
		access_address >>= 1;
    7512:	69fb      	ldr	r3, [r7, #28]
    7514:	085b      	lsrs	r3, r3, #1
    7516:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    7518:	4a58      	ldr	r2, [pc, #352]	; (767c <cb_follow_le+0x1c0>)
    751a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    751c:	4413      	add	r3, r2
    751e:	781b      	ldrb	r3, [r3, #0]
    7520:	07db      	lsls	r3, r3, #31
    7522:	461a      	mov	r2, r3
    7524:	69fb      	ldr	r3, [r7, #28]
    7526:	4313      	orrs	r3, r2
    7528:	61fb      	str	r3, [r7, #28]
		if (access_address == le.access_address) {
    752a:	4b55      	ldr	r3, [pc, #340]	; (7680 <cb_follow_le+0x1c4>)
    752c:	681a      	ldr	r2, [r3, #0]
    752e:	69fb      	ldr	r3, [r7, #28]
    7530:	429a      	cmp	r2, r3
    7532:	f040 8092 	bne.w	765a <cb_follow_le+0x19e>
			for (j = 0; j < 46; ++j) {
    7536:	2300      	movs	r3, #0
    7538:	62bb      	str	r3, [r7, #40]	; 0x28
    753a:	e048      	b.n	75ce <cb_follow_le+0x112>
				u8 byte = 0;
    753c:	2300      	movs	r3, #0
    753e:	76fb      	strb	r3, [r7, #27]
				for (k = 0; k < 8; k++) {
    7540:	2300      	movs	r3, #0
    7542:	627b      	str	r3, [r7, #36]	; 0x24
    7544:	e037      	b.n	75b6 <cb_follow_le+0xfa>
					int offset = k + (j * 8) + i - 31;
    7546:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7548:	00da      	lsls	r2, r3, #3
    754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    754c:	441a      	add	r2, r3
    754e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7550:	4413      	add	r3, r2
    7552:	3b1f      	subs	r3, #31
    7554:	613b      	str	r3, [r7, #16]
					if (offset >= DMA_SIZE*8*2) break;
    7556:	693b      	ldr	r3, [r7, #16]
    7558:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    755c:	db00      	blt.n	7560 <cb_follow_le+0xa4>
    755e:	e02d      	b.n	75bc <cb_follow_le+0x100>
					int bit = unpacked[offset];
    7560:	4a46      	ldr	r2, [pc, #280]	; (767c <cb_follow_le+0x1c0>)
    7562:	693b      	ldr	r3, [r7, #16]
    7564:	4413      	add	r3, r2
    7566:	781b      	ldrb	r3, [r3, #0]
    7568:	617b      	str	r3, [r7, #20]
					if (j >= 4) { // unwhiten data bytes
    756a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    756c:	2b03      	cmp	r3, #3
    756e:	dd16      	ble.n	759e <cb_follow_le+0xe2>
						bit ^= whitening[idx];
    7570:	4a44      	ldr	r2, [pc, #272]	; (7684 <cb_follow_le+0x1c8>)
    7572:	6a3b      	ldr	r3, [r7, #32]
    7574:	4413      	add	r3, r2
    7576:	781b      	ldrb	r3, [r3, #0]
    7578:	461a      	mov	r2, r3
    757a:	697b      	ldr	r3, [r7, #20]
    757c:	4053      	eors	r3, r2
    757e:	617b      	str	r3, [r7, #20]
						idx = (idx + 1) % sizeof(whitening);
    7580:	6a3b      	ldr	r3, [r7, #32]
    7582:	3301      	adds	r3, #1
    7584:	4619      	mov	r1, r3
    7586:	4b40      	ldr	r3, [pc, #256]	; (7688 <cb_follow_le+0x1cc>)
    7588:	fba1 2303 	umull	r2, r3, r1, r3
    758c:	1ac8      	subs	r0, r1, r3
    758e:	0840      	lsrs	r0, r0, #1
    7590:	4403      	add	r3, r0
    7592:	099a      	lsrs	r2, r3, #6
    7594:	4613      	mov	r3, r2
    7596:	01db      	lsls	r3, r3, #7
    7598:	1a9b      	subs	r3, r3, r2
    759a:	1aca      	subs	r2, r1, r3
    759c:	623a      	str	r2, [r7, #32]
					}
					byte |= bit << k;
    759e:	697a      	ldr	r2, [r7, #20]
    75a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    75a2:	fa02 f303 	lsl.w	r3, r2, r3
    75a6:	b2da      	uxtb	r2, r3
    75a8:	7efb      	ldrb	r3, [r7, #27]
    75aa:	4313      	orrs	r3, r2
    75ac:	b2db      	uxtb	r3, r3
    75ae:	76fb      	strb	r3, [r7, #27]
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    75b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    75b2:	3301      	adds	r3, #1
    75b4:	627b      	str	r3, [r7, #36]	; 0x24
    75b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    75b8:	2b07      	cmp	r3, #7
    75ba:	ddc4      	ble.n	7546 <cb_follow_le+0x8a>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    75bc:	4b33      	ldr	r3, [pc, #204]	; (768c <cb_follow_le+0x1d0>)
    75be:	681a      	ldr	r2, [r3, #0]
    75c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    75c2:	4413      	add	r3, r2
    75c4:	7efa      	ldrb	r2, [r7, #27]
    75c6:	701a      	strb	r2, [r3, #0]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    75c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    75ca:	3301      	adds	r3, #1
    75cc:	62bb      	str	r3, [r7, #40]	; 0x28
    75ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    75d0:	2b2d      	cmp	r3, #45	; 0x2d
    75d2:	ddb3      	ble.n	753c <cb_follow_le+0x80>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    75d4:	4b2a      	ldr	r3, [pc, #168]	; (7680 <cb_follow_le+0x1c4>)
    75d6:	691b      	ldr	r3, [r3, #16]
    75d8:	2b00      	cmp	r3, #0
    75da:	d02e      	beq.n	763a <cb_follow_le+0x17e>
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    75dc:	4b2b      	ldr	r3, [pc, #172]	; (768c <cb_follow_le+0x1d0>)
    75de:	681b      	ldr	r3, [r3, #0]
    75e0:	3305      	adds	r3, #5
    75e2:	781b      	ldrb	r3, [r3, #0]
    75e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    75e8:	3302      	adds	r3, #2
    75ea:	60fb      	str	r3, [r7, #12]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
    75ec:	4b24      	ldr	r3, [pc, #144]	; (7680 <cb_follow_le+0x1c4>)
    75ee:	68da      	ldr	r2, [r3, #12]
    75f0:	4b26      	ldr	r3, [pc, #152]	; (768c <cb_follow_le+0x1d0>)
    75f2:	681b      	ldr	r3, [r3, #0]
    75f4:	3304      	adds	r3, #4
    75f6:	4610      	mov	r0, r2
    75f8:	4619      	mov	r1, r3
    75fa:	68fa      	ldr	r2, [r7, #12]
    75fc:	f001 fb3c 	bl	8c78 <btle_crcgen_lut>
    7600:	60b8      	str	r0, [r7, #8]
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    7602:	4b22      	ldr	r3, [pc, #136]	; (768c <cb_follow_le+0x1d0>)
    7604:	681a      	ldr	r2, [r3, #0]
    7606:	68fb      	ldr	r3, [r7, #12]
    7608:	3306      	adds	r3, #6
    760a:	4413      	add	r3, r2
    760c:	781b      	ldrb	r3, [r3, #0]
    760e:	041a      	lsls	r2, r3, #16
							 | (idle_rxbuf[4+len+1] << 8)
    7610:	4b1e      	ldr	r3, [pc, #120]	; (768c <cb_follow_le+0x1d0>)
    7612:	6819      	ldr	r1, [r3, #0]
    7614:	68fb      	ldr	r3, [r7, #12]
    7616:	3305      	adds	r3, #5
    7618:	440b      	add	r3, r1
    761a:	781b      	ldrb	r3, [r3, #0]
    761c:	021b      	lsls	r3, r3, #8
    761e:	4313      	orrs	r3, r2
							 |  idle_rxbuf[4+len+0];
    7620:	4a1a      	ldr	r2, [pc, #104]	; (768c <cb_follow_le+0x1d0>)
    7622:	6812      	ldr	r2, [r2, #0]
    7624:	68f9      	ldr	r1, [r7, #12]
    7626:	3104      	adds	r1, #4
    7628:	440a      	add	r2, r1
    762a:	7812      	ldrb	r2, [r2, #0]
    762c:	4313      	orrs	r3, r2

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    762e:	607b      	str	r3, [r7, #4]
							 | (idle_rxbuf[4+len+1] << 8)
							 |  idle_rxbuf[4+len+0];
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    7630:	68ba      	ldr	r2, [r7, #8]
    7632:	687b      	ldr	r3, [r7, #4]
    7634:	429a      	cmp	r2, r3
    7636:	d000      	beq.n	763a <cb_follow_le+0x17e>
					break;
    7638:	e017      	b.n	766a <cb_follow_le+0x1ae>
			}

			// send to PC
			enqueue(LE_PACKET, idle_rxbuf);
    763a:	4b14      	ldr	r3, [pc, #80]	; (768c <cb_follow_le+0x1d0>)
    763c:	681b      	ldr	r3, [r3, #0]
    763e:	2001      	movs	r0, #1
    7640:	4619      	mov	r1, r3
    7642:	f7fc ff41 	bl	44c8 <enqueue>
			RXLED_SET;
    7646:	4b12      	ldr	r3, [pc, #72]	; (7690 <cb_follow_le+0x1d4>)
    7648:	2210      	movs	r2, #16
    764a:	601a      	str	r2, [r3, #0]

			packet_cb(idle_rxbuf);
    764c:	4b11      	ldr	r3, [pc, #68]	; (7694 <cb_follow_le+0x1d8>)
    764e:	681b      	ldr	r3, [r3, #0]
    7650:	4a0e      	ldr	r2, [pc, #56]	; (768c <cb_follow_le+0x1d0>)
    7652:	6812      	ldr	r2, [r2, #0]
    7654:	4610      	mov	r0, r2
    7656:	4798      	blx	r3

			break;
    7658:	e007      	b.n	766a <cb_follow_le+0x1ae>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    765a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    765c:	3301      	adds	r3, #1
    765e:	62fb      	str	r3, [r7, #44]	; 0x2c
    7660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7662:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    7666:	f6ff af54 	blt.w	7512 <cb_follow_le+0x56>

			break;
		}
	}

	return 1;
    766a:	2301      	movs	r3, #1
}
    766c:	4618      	mov	r0, r3
    766e:	3730      	adds	r7, #48	; 0x30
    7670:	46bd      	mov	sp, r7
    7672:	bd80      	pop	{r7, pc}
    7674:	1000049c 	.word	0x1000049c
    7678:	0000c018 	.word	0x0000c018
    767c:	10000d08 	.word	0x10000d08
    7680:	10000458 	.word	0x10000458
    7684:	0000bf98 	.word	0x0000bf98
    7688:	02040811 	.word	0x02040811
    768c:	10000454 	.word	0x10000454
    7690:	2009c038 	.word	0x2009c038
    7694:	1000099c 	.word	0x1000099c

00007698 <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    7698:	b580      	push	{r7, lr}
    769a:	b08a      	sub	sp, #40	; 0x28
    769c:	af00      	add	r7, sp, #0
    769e:	6078      	str	r0, [r7, #4]
	int i;
	u32 aa = 0;
    76a0:	2300      	movs	r3, #0
    76a2:	623b      	str	r3, [r7, #32]
#define ADV_ADDRESS_IDX 0
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
    76a4:	687b      	ldr	r3, [r7, #4]
    76a6:	61fb      	str	r3, [r7, #28]
	u8 header = packet[HEADER_IDX];
    76a8:	687b      	ldr	r3, [r7, #4]
    76aa:	791b      	ldrb	r3, [r3, #4]
    76ac:	76fb      	strb	r3, [r7, #27]
	u8 *data_len = &packet[DATA_LEN_IDX];
    76ae:	687b      	ldr	r3, [r7, #4]
    76b0:	3305      	adds	r3, #5
    76b2:	617b      	str	r3, [r7, #20]
	u8 *data = &packet[DATA_START_IDX];
    76b4:	687b      	ldr	r3, [r7, #4]
    76b6:	3306      	adds	r3, #6
    76b8:	613b      	str	r3, [r7, #16]
	u8 *crc = &packet[DATA_START_IDX + *data_len];
    76ba:	697b      	ldr	r3, [r7, #20]
    76bc:	781b      	ldrb	r3, [r3, #0]
    76be:	3306      	adds	r3, #6
    76c0:	461a      	mov	r2, r3
    76c2:	687b      	ldr	r3, [r7, #4]
    76c4:	4413      	add	r3, r2
    76c6:	60fb      	str	r3, [r7, #12]

	if (le.link_state == LINK_CONN_PENDING) {
    76c8:	4b8b      	ldr	r3, [pc, #556]	; (78f8 <connection_follow_cb+0x260>)
    76ca:	7d1b      	ldrb	r3, [r3, #20]
    76cc:	2b02      	cmp	r3, #2
    76ce:	d11c      	bne.n	770a <connection_follow_cb+0x72>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    76d0:	4b89      	ldr	r3, [pc, #548]	; (78f8 <connection_follow_cb+0x260>)
    76d2:	2203      	movs	r2, #3
    76d4:	751a      	strb	r2, [r3, #20]
		le.conn_epoch = clkn;
    76d6:	4b89      	ldr	r3, [pc, #548]	; (78fc <connection_follow_cb+0x264>)
    76d8:	681b      	ldr	r3, [r3, #0]
    76da:	4a87      	ldr	r2, [pc, #540]	; (78f8 <connection_follow_cb+0x260>)
    76dc:	6193      	str	r3, [r2, #24]
		le.interval_timer = le.conn_interval - 1;
    76de:	4b86      	ldr	r3, [pc, #536]	; (78f8 <connection_follow_cb+0x260>)
    76e0:	8bdb      	ldrh	r3, [r3, #30]
    76e2:	3b01      	subs	r3, #1
    76e4:	b29a      	uxth	r2, r3
    76e6:	4b84      	ldr	r3, [pc, #528]	; (78f8 <connection_follow_cb+0x260>)
    76e8:	839a      	strh	r2, [r3, #28]
		le.conn_count = 0;
    76ea:	4b83      	ldr	r3, [pc, #524]	; (78f8 <connection_follow_cb+0x260>)
    76ec:	2200      	movs	r2, #0
    76ee:	841a      	strh	r2, [r3, #32]
		le.update_pending = 0;
    76f0:	4b81      	ldr	r3, [pc, #516]	; (78f8 <connection_follow_cb+0x260>)
    76f2:	2200      	movs	r2, #0
    76f4:	629a      	str	r2, [r3, #40]	; 0x28

		// hue hue hue
		if (jam_mode != JAM_NONE)
    76f6:	4b82      	ldr	r3, [pc, #520]	; (7900 <connection_follow_cb+0x268>)
    76f8:	781b      	ldrb	r3, [r3, #0]
    76fa:	b2db      	uxtb	r3, r3
    76fc:	2b00      	cmp	r3, #0
    76fe:	f000 80f7 	beq.w	78f0 <connection_follow_cb+0x258>
			le_jam_count = JAM_COUNT_DEFAULT;
    7702:	4b80      	ldr	r3, [pc, #512]	; (7904 <connection_follow_cb+0x26c>)
    7704:	2228      	movs	r2, #40	; 0x28
    7706:	601a      	str	r2, [r3, #0]
    7708:	e0f2      	b.n	78f0 <connection_follow_cb+0x258>

	} else if (le.link_state == LINK_CONNECTED) {
    770a:	4b7b      	ldr	r3, [pc, #492]	; (78f8 <connection_follow_cb+0x260>)
    770c:	7d1b      	ldrb	r3, [r3, #20]
    770e:	2b03      	cmp	r3, #3
    7710:	d16f      	bne.n	77f2 <connection_follow_cb+0x15a>
		u8 llid =  header & 0x03;
    7712:	7efb      	ldrb	r3, [r7, #27]
    7714:	f003 0303 	and.w	r3, r3, #3
    7718:	72fb      	strb	r3, [r7, #11]

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    771a:	4b77      	ldr	r3, [pc, #476]	; (78f8 <connection_follow_cb+0x260>)
    771c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    771e:	2b00      	cmp	r3, #0
    7720:	d021      	beq.n	7766 <connection_follow_cb+0xce>
    7722:	4b75      	ldr	r3, [pc, #468]	; (78f8 <connection_follow_cb+0x260>)
    7724:	8c1b      	ldrh	r3, [r3, #32]
    7726:	b29a      	uxth	r2, r3
    7728:	4b73      	ldr	r3, [pc, #460]	; (78f8 <connection_follow_cb+0x260>)
    772a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    772c:	429a      	cmp	r2, r3
    772e:	d11a      	bne.n	7766 <connection_follow_cb+0xce>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    7730:	4b72      	ldr	r3, [pc, #456]	; (78fc <connection_follow_cb+0x264>)
    7732:	681b      	ldr	r3, [r3, #0]
    7734:	4a70      	ldr	r2, [pc, #448]	; (78f8 <connection_follow_cb+0x260>)
    7736:	6193      	str	r3, [r2, #24]
			le.conn_interval = le.interval_update;
    7738:	4b6f      	ldr	r3, [pc, #444]	; (78f8 <connection_follow_cb+0x260>)
    773a:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    773c:	4b6e      	ldr	r3, [pc, #440]	; (78f8 <connection_follow_cb+0x260>)
    773e:	83da      	strh	r2, [r3, #30]
			le.interval_timer = le.interval_update - 1;
    7740:	4b6d      	ldr	r3, [pc, #436]	; (78f8 <connection_follow_cb+0x260>)
    7742:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    7744:	3b01      	subs	r3, #1
    7746:	b29a      	uxth	r2, r3
    7748:	4b6b      	ldr	r3, [pc, #428]	; (78f8 <connection_follow_cb+0x260>)
    774a:	839a      	strh	r2, [r3, #28]
			le.win_size = le.win_size_update;
    774c:	4b6a      	ldr	r3, [pc, #424]	; (78f8 <connection_follow_cb+0x260>)
    774e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    7752:	4b69      	ldr	r3, [pc, #420]	; (78f8 <connection_follow_cb+0x260>)
    7754:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			le.win_offset = le.win_offset_update;
    7758:	4b67      	ldr	r3, [pc, #412]	; (78f8 <connection_follow_cb+0x260>)
    775a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    775c:	4b66      	ldr	r3, [pc, #408]	; (78f8 <connection_follow_cb+0x260>)
    775e:	849a      	strh	r2, [r3, #36]	; 0x24
			le.update_pending = 0;
    7760:	4b65      	ldr	r3, [pc, #404]	; (78f8 <connection_follow_cb+0x260>)
    7762:	2200      	movs	r2, #0
    7764:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if (llid == 0x03 && data[0] == 0x00) {
    7766:	7afb      	ldrb	r3, [r7, #11]
    7768:	2b03      	cmp	r3, #3
    776a:	d141      	bne.n	77f0 <connection_follow_cb+0x158>
    776c:	693b      	ldr	r3, [r7, #16]
    776e:	781b      	ldrb	r3, [r3, #0]
    7770:	2b00      	cmp	r3, #0
    7772:	d13d      	bne.n	77f0 <connection_follow_cb+0x158>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    7774:	687b      	ldr	r3, [r7, #4]
    7776:	79da      	ldrb	r2, [r3, #7]
    7778:	4b5f      	ldr	r3, [pc, #380]	; (78f8 <connection_follow_cb+0x260>)
    777a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    777e:	687b      	ldr	r3, [r7, #4]
    7780:	3308      	adds	r3, #8
    7782:	781b      	ldrb	r3, [r3, #0]
    7784:	b29a      	uxth	r2, r3
    7786:	687b      	ldr	r3, [r7, #4]
    7788:	3309      	adds	r3, #9
    778a:	781b      	ldrb	r3, [r3, #0]
    778c:	b29b      	uxth	r3, r3
    778e:	021b      	lsls	r3, r3, #8
    7790:	b29b      	uxth	r3, r3
    7792:	4413      	add	r3, r2
    7794:	b29a      	uxth	r2, r3
    7796:	4b58      	ldr	r3, [pc, #352]	; (78f8 <connection_follow_cb+0x260>)
    7798:	865a      	strh	r2, [r3, #50]	; 0x32
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    779a:	687b      	ldr	r3, [r7, #4]
    779c:	330a      	adds	r3, #10
    779e:	781b      	ldrb	r3, [r3, #0]
    77a0:	b29a      	uxth	r2, r3
    77a2:	687b      	ldr	r3, [r7, #4]
    77a4:	330b      	adds	r3, #11
    77a6:	781b      	ldrb	r3, [r3, #0]
    77a8:	b29b      	uxth	r3, r3
    77aa:	021b      	lsls	r3, r3, #8
    77ac:	b29b      	uxth	r3, r3
    77ae:	4413      	add	r3, r2
    77b0:	b29a      	uxth	r2, r3
    77b2:	4b51      	ldr	r3, [pc, #324]	; (78f8 <connection_follow_cb+0x260>)
    77b4:	85da      	strh	r2, [r3, #46]	; 0x2e
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    77b6:	687b      	ldr	r3, [r7, #4]
    77b8:	3310      	adds	r3, #16
    77ba:	781b      	ldrb	r3, [r3, #0]
    77bc:	b29a      	uxth	r2, r3
    77be:	687b      	ldr	r3, [r7, #4]
    77c0:	3311      	adds	r3, #17
    77c2:	781b      	ldrb	r3, [r3, #0]
    77c4:	b29b      	uxth	r3, r3
    77c6:	021b      	lsls	r3, r3, #8
    77c8:	b29b      	uxth	r3, r3
    77ca:	4413      	add	r3, r2
    77cc:	b29a      	uxth	r2, r3
    77ce:	4b4a      	ldr	r3, [pc, #296]	; (78f8 <connection_follow_cb+0x260>)
    77d0:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (le.update_instant - le.conn_count < 32767)
    77d2:	4b49      	ldr	r3, [pc, #292]	; (78f8 <connection_follow_cb+0x260>)
    77d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    77d6:	461a      	mov	r2, r3
    77d8:	4b47      	ldr	r3, [pc, #284]	; (78f8 <connection_follow_cb+0x260>)
    77da:	8c1b      	ldrh	r3, [r3, #32]
    77dc:	b29b      	uxth	r3, r3
    77de:	1ad3      	subs	r3, r2, r3
    77e0:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    77e4:	4293      	cmp	r3, r2
    77e6:	dc03      	bgt.n	77f0 <connection_follow_cb+0x158>
				le.update_pending = 1;
    77e8:	4b43      	ldr	r3, [pc, #268]	; (78f8 <connection_follow_cb+0x260>)
    77ea:	2201      	movs	r2, #1
    77ec:	629a      	str	r2, [r3, #40]	; 0x28
    77ee:	e07f      	b.n	78f0 <connection_follow_cb+0x258>
    77f0:	e07e      	b.n	78f0 <connection_follow_cb+0x258>
		}

	} else if (le.link_state == LINK_LISTENING) {
    77f2:	4b41      	ldr	r3, [pc, #260]	; (78f8 <connection_follow_cb+0x260>)
    77f4:	7d1b      	ldrb	r3, [r3, #20]
    77f6:	2b01      	cmp	r3, #1
    77f8:	d17a      	bne.n	78f0 <connection_follow_cb+0x258>
		u8 pkt_type = packet[4] & 0x0F;
    77fa:	687b      	ldr	r3, [r7, #4]
    77fc:	3304      	adds	r3, #4
    77fe:	781b      	ldrb	r3, [r3, #0]
    7800:	f003 030f 	and.w	r3, r3, #15
    7804:	72bb      	strb	r3, [r7, #10]
		if (pkt_type == 0x05) {
    7806:	7abb      	ldrb	r3, [r7, #10]
    7808:	2b05      	cmp	r3, #5
    780a:	d171      	bne.n	78f0 <connection_follow_cb+0x258>
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    780c:	4b3a      	ldr	r3, [pc, #232]	; (78f8 <connection_follow_cb+0x260>)
    780e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7810:	2b00      	cmp	r3, #0
    7812:	d014      	beq.n	783e <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    7814:	687b      	ldr	r3, [r7, #4]
    7816:	3306      	adds	r3, #6
    7818:	483b      	ldr	r0, [pc, #236]	; (7908 <connection_follow_cb+0x270>)
    781a:	4619      	mov	r1, r3
    781c:	2206      	movs	r2, #6
    781e:	f004 fac1 	bl	bda4 <memcmp>
    7822:	4603      	mov	r3, r0
	} else if (le.link_state == LINK_LISTENING) {
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    7824:	2b00      	cmp	r3, #0
    7826:	d00a      	beq.n	783e <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    7828:	687b      	ldr	r3, [r7, #4]
    782a:	330c      	adds	r3, #12
    782c:	4836      	ldr	r0, [pc, #216]	; (7908 <connection_follow_cb+0x270>)
    782e:	4619      	mov	r1, r3
    7830:	2206      	movs	r2, #6
    7832:	f004 fab7 	bl	bda4 <memcmp>
    7836:	4603      	mov	r3, r0
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    7838:	2b00      	cmp	r3, #0
    783a:	d000      	beq.n	783e <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
    783c:	e058      	b.n	78f0 <connection_follow_cb+0x258>
			}

			le.link_state = LINK_CONN_PENDING;
    783e:	4b2e      	ldr	r3, [pc, #184]	; (78f8 <connection_follow_cb+0x260>)
    7840:	2202      	movs	r2, #2
    7842:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    7844:	4b2c      	ldr	r3, [pc, #176]	; (78f8 <connection_follow_cb+0x260>)
    7846:	2200      	movs	r2, #0
    7848:	611a      	str	r2, [r3, #16]

			for (i = 0; i < 4; ++i)
    784a:	2300      	movs	r3, #0
    784c:	627b      	str	r3, [r7, #36]	; 0x24
    784e:	e011      	b.n	7874 <connection_follow_cb+0x1dc>
				aa |= packet[18+i] << (i*8);
    7850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7852:	3312      	adds	r3, #18
    7854:	461a      	mov	r2, r3
    7856:	687b      	ldr	r3, [r7, #4]
    7858:	4413      	add	r3, r2
    785a:	781b      	ldrb	r3, [r3, #0]
    785c:	461a      	mov	r2, r3
    785e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7860:	00db      	lsls	r3, r3, #3
    7862:	fa02 f303 	lsl.w	r3, r2, r3
    7866:	461a      	mov	r2, r3
    7868:	6a3b      	ldr	r3, [r7, #32]
    786a:	4313      	orrs	r3, r2
    786c:	623b      	str	r3, [r7, #32]
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    786e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7870:	3301      	adds	r3, #1
    7872:	627b      	str	r3, [r7, #36]	; 0x24
    7874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7876:	2b03      	cmp	r3, #3
    7878:	ddea      	ble.n	7850 <connection_follow_cb+0x1b8>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    787a:	6a38      	ldr	r0, [r7, #32]
    787c:	f7ff f97e 	bl	6b7c <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    7880:	687b      	ldr	r3, [r7, #4]
    7882:	3318      	adds	r3, #24
    7884:	781b      	ldrb	r3, [r3, #0]
    7886:	041a      	lsls	r2, r3, #16
						| (packet[CRC_INIT+1] << 8)
    7888:	687b      	ldr	r3, [r7, #4]
    788a:	3317      	adds	r3, #23
    788c:	781b      	ldrb	r3, [r3, #0]
    788e:	021b      	lsls	r3, r3, #8
    7890:	4313      	orrs	r3, r2
						|  packet[CRC_INIT+0];
    7892:	687a      	ldr	r2, [r7, #4]
    7894:	3216      	adds	r2, #22
    7896:	7812      	ldrb	r2, [r2, #0]
    7898:	4313      	orrs	r3, r2
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    789a:	461a      	mov	r2, r3
    789c:	4b16      	ldr	r3, [pc, #88]	; (78f8 <connection_follow_cb+0x260>)
    789e:	609a      	str	r2, [r3, #8]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    78a0:	4b15      	ldr	r3, [pc, #84]	; (78f8 <connection_follow_cb+0x260>)
    78a2:	689b      	ldr	r3, [r3, #8]
    78a4:	4618      	mov	r0, r3
    78a6:	f002 fb09 	bl	9ebc <rbit>
    78aa:	4602      	mov	r2, r0
    78ac:	4b12      	ldr	r3, [pc, #72]	; (78f8 <connection_follow_cb+0x260>)
    78ae:	60da      	str	r2, [r3, #12]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    78b0:	687b      	ldr	r3, [r7, #4]
    78b2:	7e5a      	ldrb	r2, [r3, #25]
    78b4:	4b10      	ldr	r3, [pc, #64]	; (78f8 <connection_follow_cb+0x260>)
    78b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    78ba:	687b      	ldr	r3, [r7, #4]
    78bc:	331a      	adds	r3, #26
    78be:	781b      	ldrb	r3, [r3, #0]
    78c0:	b29a      	uxth	r2, r3
    78c2:	4b0d      	ldr	r3, [pc, #52]	; (78f8 <connection_follow_cb+0x260>)
    78c4:	849a      	strh	r2, [r3, #36]	; 0x24

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = packet[CONN_INTERVAL];
    78c6:	687b      	ldr	r3, [r7, #4]
    78c8:	331c      	adds	r3, #28
    78ca:	781b      	ldrb	r3, [r3, #0]
    78cc:	b29a      	uxth	r2, r3
    78ce:	4b0a      	ldr	r3, [pc, #40]	; (78f8 <connection_follow_cb+0x260>)
    78d0:	83da      	strh	r2, [r3, #30]

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    78d2:	687b      	ldr	r3, [r7, #4]
    78d4:	3327      	adds	r3, #39	; 0x27
    78d6:	781b      	ldrb	r3, [r3, #0]
    78d8:	f003 031f 	and.w	r3, r3, #31
    78dc:	b2da      	uxtb	r2, r3
    78de:	4b06      	ldr	r3, [pc, #24]	; (78f8 <connection_follow_cb+0x260>)
    78e0:	759a      	strb	r2, [r3, #22]
			le.channel_idx = le.channel_increment;
    78e2:	4b05      	ldr	r3, [pc, #20]	; (78f8 <connection_follow_cb+0x260>)
    78e4:	7d9a      	ldrb	r2, [r3, #22]
    78e6:	4b04      	ldr	r3, [pc, #16]	; (78f8 <connection_follow_cb+0x260>)
    78e8:	755a      	strb	r2, [r3, #21]

			// Hop to the initial channel immediately
			do_hop = 1;
    78ea:	4b08      	ldr	r3, [pc, #32]	; (790c <connection_follow_cb+0x274>)
    78ec:	2201      	movs	r2, #1
    78ee:	701a      	strb	r2, [r3, #0]
		}
	}
}
    78f0:	3728      	adds	r7, #40	; 0x28
    78f2:	46bd      	mov	sp, r7
    78f4:	bd80      	pop	{r7, pc}
    78f6:	bf00      	nop
    78f8:	10000458 	.word	0x10000458
    78fc:	10000be4 	.word	0x10000be4
    7900:	10000a40 	.word	0x10000a40
    7904:	10000994 	.word	0x10000994
    7908:	1000048c 	.word	0x1000048c
    790c:	1000097d 	.word	0x1000097d

00007910 <bt_follow_le>:

void bt_follow_le() {
    7910:	b580      	push	{r7, lr}
    7912:	af00      	add	r7, sp, #0
	reset_le();
    7914:	f7ff f94c 	bl	6bb0 <reset_le>
	packet_cb = connection_follow_cb;
    7918:	4b04      	ldr	r3, [pc, #16]	; (792c <bt_follow_le+0x1c>)
    791a:	4a05      	ldr	r2, [pc, #20]	; (7930 <bt_follow_le+0x20>)
    791c:	601a      	str	r2, [r3, #0]
	bt_le_sync(MODE_BT_FOLLOW_LE);
    791e:	2009      	movs	r0, #9
    7920:	f7ff fb1e 	bl	6f60 <bt_le_sync>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    7924:	4b03      	ldr	r3, [pc, #12]	; (7934 <bt_follow_le+0x24>)
    7926:	2200      	movs	r2, #0
    7928:	701a      	strb	r2, [r3, #0]
}
    792a:	bd80      	pop	{r7, pc}
    792c:	1000099c 	.word	0x1000099c
    7930:	00007699 	.word	0x00007699
    7934:	10000a3e 	.word	0x10000a3e

00007938 <le_promisc_state>:

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    7938:	b580      	push	{r7, lr}
    793a:	b092      	sub	sp, #72	; 0x48
    793c:	af00      	add	r7, sp, #0
    793e:	4603      	mov	r3, r0
    7940:	60b9      	str	r1, [r7, #8]
    7942:	607a      	str	r2, [r7, #4]
    7944:	73fb      	strb	r3, [r7, #15]
	u8 buf[50] = { 0, };
    7946:	f107 0314 	add.w	r3, r7, #20
    794a:	2200      	movs	r2, #0
    794c:	601a      	str	r2, [r3, #0]
    794e:	3304      	adds	r3, #4
    7950:	2200      	movs	r2, #0
    7952:	601a      	str	r2, [r3, #0]
    7954:	3304      	adds	r3, #4
    7956:	2200      	movs	r2, #0
    7958:	601a      	str	r2, [r3, #0]
    795a:	3304      	adds	r3, #4
    795c:	2200      	movs	r2, #0
    795e:	601a      	str	r2, [r3, #0]
    7960:	3304      	adds	r3, #4
    7962:	2200      	movs	r2, #0
    7964:	601a      	str	r2, [r3, #0]
    7966:	3304      	adds	r3, #4
    7968:	2200      	movs	r2, #0
    796a:	601a      	str	r2, [r3, #0]
    796c:	3304      	adds	r3, #4
    796e:	2200      	movs	r2, #0
    7970:	601a      	str	r2, [r3, #0]
    7972:	3304      	adds	r3, #4
    7974:	2200      	movs	r2, #0
    7976:	601a      	str	r2, [r3, #0]
    7978:	3304      	adds	r3, #4
    797a:	2200      	movs	r2, #0
    797c:	601a      	str	r2, [r3, #0]
    797e:	3304      	adds	r3, #4
    7980:	2200      	movs	r2, #0
    7982:	601a      	str	r2, [r3, #0]
    7984:	3304      	adds	r3, #4
    7986:	2200      	movs	r2, #0
    7988:	601a      	str	r2, [r3, #0]
    798a:	3304      	adds	r3, #4
    798c:	2200      	movs	r2, #0
    798e:	601a      	str	r2, [r3, #0]
    7990:	3304      	adds	r3, #4
    7992:	2200      	movs	r2, #0
    7994:	801a      	strh	r2, [r3, #0]
    7996:	3302      	adds	r3, #2
	if (len > 49)
    7998:	687b      	ldr	r3, [r7, #4]
    799a:	2b31      	cmp	r3, #49	; 0x31
    799c:	d901      	bls.n	79a2 <le_promisc_state+0x6a>
		len = 49;
    799e:	2331      	movs	r3, #49	; 0x31
    79a0:	607b      	str	r3, [r7, #4]

	buf[0] = type;
    79a2:	7bfb      	ldrb	r3, [r7, #15]
    79a4:	753b      	strb	r3, [r7, #20]
	memcpy(&buf[1], data, len);
    79a6:	f107 0314 	add.w	r3, r7, #20
    79aa:	3301      	adds	r3, #1
    79ac:	4618      	mov	r0, r3
    79ae:	68b9      	ldr	r1, [r7, #8]
    79b0:	687a      	ldr	r2, [r7, #4]
    79b2:	f004 fa29 	bl	be08 <memcpy>
	enqueue(LE_PROMISC, buf);
    79b6:	f107 0314 	add.w	r3, r7, #20
    79ba:	2005      	movs	r0, #5
    79bc:	4619      	mov	r1, r3
    79be:	f7fc fd83 	bl	44c8 <enqueue>
}
    79c2:	3748      	adds	r7, #72	; 0x48
    79c4:	46bd      	mov	sp, r7
    79c6:	bd80      	pop	{r7, pc}

000079c8 <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    79c8:	b580      	push	{r7, lr}
    79ca:	b084      	sub	sp, #16
    79cc:	af00      	add	r7, sp, #0
    79ce:	6078      	str	r0, [r7, #4]
	static u32 first_ts = 0;
	if (channel == 2404) {
    79d0:	4b55      	ldr	r3, [pc, #340]	; (7b28 <promisc_recover_hop_increment+0x160>)
    79d2:	881b      	ldrh	r3, [r3, #0]
    79d4:	b29b      	uxth	r3, r3
    79d6:	f640 1264 	movw	r2, #2404	; 0x964
    79da:	4293      	cmp	r3, r2
    79dc:	d114      	bne.n	7a08 <promisc_recover_hop_increment+0x40>
		first_ts = CLK100NS;
    79de:	4b53      	ldr	r3, [pc, #332]	; (7b2c <promisc_recover_hop_increment+0x164>)
    79e0:	681b      	ldr	r3, [r3, #0]
    79e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    79e6:	f640 4235 	movw	r2, #3125	; 0xc35
    79ea:	fb02 f203 	mul.w	r2, r2, r3
    79ee:	4b50      	ldr	r3, [pc, #320]	; (7b30 <promisc_recover_hop_increment+0x168>)
    79f0:	681b      	ldr	r3, [r3, #0]
    79f2:	4413      	add	r3, r2
    79f4:	4a4f      	ldr	r2, [pc, #316]	; (7b34 <promisc_recover_hop_increment+0x16c>)
    79f6:	6013      	str	r3, [r2, #0]
		hop_direct_channel = 2406;
    79f8:	4b4f      	ldr	r3, [pc, #316]	; (7b38 <promisc_recover_hop_increment+0x170>)
    79fa:	f640 1266 	movw	r2, #2406	; 0x966
    79fe:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    7a00:	4b4e      	ldr	r3, [pc, #312]	; (7b3c <promisc_recover_hop_increment+0x174>)
    7a02:	2201      	movs	r2, #1
    7a04:	701a      	strb	r2, [r3, #0]
    7a06:	e08b      	b.n	7b20 <promisc_recover_hop_increment+0x158>
	} else if (channel == 2406) {
    7a08:	4b47      	ldr	r3, [pc, #284]	; (7b28 <promisc_recover_hop_increment+0x160>)
    7a0a:	881b      	ldrh	r3, [r3, #0]
    7a0c:	b29b      	uxth	r3, r3
    7a0e:	f640 1266 	movw	r2, #2406	; 0x966
    7a12:	4293      	cmp	r3, r2
    7a14:	d17d      	bne.n	7b12 <promisc_recover_hop_increment+0x14a>
		u32 second_ts = CLK100NS;
    7a16:	4b45      	ldr	r3, [pc, #276]	; (7b2c <promisc_recover_hop_increment+0x164>)
    7a18:	681b      	ldr	r3, [r3, #0]
    7a1a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7a1e:	f640 4235 	movw	r2, #3125	; 0xc35
    7a22:	fb02 f203 	mul.w	r2, r2, r3
    7a26:	4b42      	ldr	r3, [pc, #264]	; (7b30 <promisc_recover_hop_increment+0x168>)
    7a28:	681b      	ldr	r3, [r3, #0]
    7a2a:	4413      	add	r3, r2
    7a2c:	60fb      	str	r3, [r7, #12]
		if (second_ts < first_ts)
    7a2e:	4b41      	ldr	r3, [pc, #260]	; (7b34 <promisc_recover_hop_increment+0x16c>)
    7a30:	681b      	ldr	r3, [r3, #0]
    7a32:	68fa      	ldr	r2, [r7, #12]
    7a34:	429a      	cmp	r2, r3
    7a36:	d205      	bcs.n	7a44 <promisc_recover_hop_increment+0x7c>
			second_ts += 3276800000; // handle rollover
    7a38:	68fb      	ldr	r3, [r7, #12]
    7a3a:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    7a3e:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    7a42:	60fb      	str	r3, [r7, #12]
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    7a44:	4b3b      	ldr	r3, [pc, #236]	; (7b34 <promisc_recover_hop_increment+0x16c>)
    7a46:	681b      	ldr	r3, [r3, #0]
    7a48:	68fa      	ldr	r2, [r7, #12]
    7a4a:	1ad2      	subs	r2, r2, r3
    7a4c:	4b3c      	ldr	r3, [pc, #240]	; (7b40 <promisc_recover_hop_increment+0x178>)
    7a4e:	8bdb      	ldrh	r3, [r3, #30]
    7a50:	4619      	mov	r1, r3
    7a52:	f243 03d4 	movw	r3, #12500	; 0x30d4
    7a56:	fb03 f301 	mul.w	r3, r3, r1
    7a5a:	0fd9      	lsrs	r1, r3, #31
    7a5c:	440b      	add	r3, r1
    7a5e:	105b      	asrs	r3, r3, #1
    7a60:	4413      	add	r3, r2
    7a62:	4a37      	ldr	r2, [pc, #220]	; (7b40 <promisc_recover_hop_increment+0x178>)
    7a64:	8bd2      	ldrh	r2, [r2, #30]
    7a66:	4611      	mov	r1, r2
    7a68:	f243 02d4 	movw	r2, #12500	; 0x30d4
    7a6c:	fb02 f201 	mul.w	r2, r2, r1
    7a70:	fbb3 f3f2 	udiv	r3, r3, r2
    7a74:	60bb      	str	r3, [r7, #8]
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    7a76:	68bb      	ldr	r3, [r7, #8]
    7a78:	2b24      	cmp	r3, #36	; 0x24
    7a7a:	d842      	bhi.n	7b02 <promisc_recover_hop_increment+0x13a>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    7a7c:	4a31      	ldr	r2, [pc, #196]	; (7b44 <promisc_recover_hop_increment+0x17c>)
    7a7e:	68bb      	ldr	r3, [r7, #8]
    7a80:	4413      	add	r3, r2
    7a82:	781a      	ldrb	r2, [r3, #0]
    7a84:	4b2e      	ldr	r3, [pc, #184]	; (7b40 <promisc_recover_hop_increment+0x178>)
    7a86:	759a      	strb	r2, [r3, #22]
			le.interval_timer = le.conn_interval / 2;
    7a88:	4b2d      	ldr	r3, [pc, #180]	; (7b40 <promisc_recover_hop_increment+0x178>)
    7a8a:	8bdb      	ldrh	r3, [r3, #30]
    7a8c:	085b      	lsrs	r3, r3, #1
    7a8e:	b29a      	uxth	r2, r3
    7a90:	4b2b      	ldr	r3, [pc, #172]	; (7b40 <promisc_recover_hop_increment+0x178>)
    7a92:	839a      	strh	r2, [r3, #28]
			le.conn_count = 0;
    7a94:	4b2a      	ldr	r3, [pc, #168]	; (7b40 <promisc_recover_hop_increment+0x178>)
    7a96:	2200      	movs	r2, #0
    7a98:	841a      	strh	r2, [r3, #32]
			le.conn_epoch = 0;
    7a9a:	4b29      	ldr	r3, [pc, #164]	; (7b40 <promisc_recover_hop_increment+0x178>)
    7a9c:	2200      	movs	r2, #0
    7a9e:	619a      	str	r2, [r3, #24]
			do_hop = 0;
    7aa0:	4b26      	ldr	r3, [pc, #152]	; (7b3c <promisc_recover_hop_increment+0x174>)
    7aa2:	2200      	movs	r2, #0
    7aa4:	701a      	strb	r2, [r3, #0]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    7aa6:	4b26      	ldr	r3, [pc, #152]	; (7b40 <promisc_recover_hop_increment+0x178>)
    7aa8:	7d9b      	ldrb	r3, [r3, #22]
    7aaa:	1c5a      	adds	r2, r3, #1
    7aac:	4b26      	ldr	r3, [pc, #152]	; (7b48 <promisc_recover_hop_increment+0x180>)
    7aae:	fb82 0103 	smull	r0, r1, r2, r3
    7ab2:	1853      	adds	r3, r2, r1
    7ab4:	1159      	asrs	r1, r3, #5
    7ab6:	17d3      	asrs	r3, r2, #31
    7ab8:	1ac9      	subs	r1, r1, r3
    7aba:	460b      	mov	r3, r1
    7abc:	00db      	lsls	r3, r3, #3
    7abe:	440b      	add	r3, r1
    7ac0:	009b      	lsls	r3, r3, #2
    7ac2:	440b      	add	r3, r1
    7ac4:	1ad1      	subs	r1, r2, r3
    7ac6:	b2ca      	uxtb	r2, r1
    7ac8:	4b1d      	ldr	r3, [pc, #116]	; (7b40 <promisc_recover_hop_increment+0x178>)
    7aca:	755a      	strb	r2, [r3, #21]
			le.link_state = LINK_CONNECTED;
    7acc:	4b1c      	ldr	r3, [pc, #112]	; (7b40 <promisc_recover_hop_increment+0x178>)
    7ace:	2203      	movs	r2, #3
    7ad0:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0;
    7ad2:	4b1b      	ldr	r3, [pc, #108]	; (7b40 <promisc_recover_hop_increment+0x178>)
    7ad4:	2200      	movs	r2, #0
    7ad6:	611a      	str	r2, [r3, #16]
			hop_mode = HOP_BTLE;
    7ad8:	4b1c      	ldr	r3, [pc, #112]	; (7b4c <promisc_recover_hop_increment+0x184>)
    7ada:	2203      	movs	r2, #3
    7adc:	701a      	strb	r2, [r3, #0]
			packet_cb = connection_follow_cb;
    7ade:	4b1c      	ldr	r3, [pc, #112]	; (7b50 <promisc_recover_hop_increment+0x188>)
    7ae0:	4a1c      	ldr	r2, [pc, #112]	; (7b54 <promisc_recover_hop_increment+0x18c>)
    7ae2:	601a      	str	r2, [r3, #0]
			le_promisc_state(3, &le.channel_increment, 1);
    7ae4:	2003      	movs	r0, #3
    7ae6:	491c      	ldr	r1, [pc, #112]	; (7b58 <promisc_recover_hop_increment+0x190>)
    7ae8:	2201      	movs	r2, #1
    7aea:	f7ff ff25 	bl	7938 <le_promisc_state>

			if (jam_mode != JAM_NONE)
    7aee:	4b1b      	ldr	r3, [pc, #108]	; (7b5c <promisc_recover_hop_increment+0x194>)
    7af0:	781b      	ldrb	r3, [r3, #0]
    7af2:	b2db      	uxtb	r3, r3
    7af4:	2b00      	cmp	r3, #0
    7af6:	d003      	beq.n	7b00 <promisc_recover_hop_increment+0x138>
				le_jam_count = JAM_COUNT_DEFAULT;
    7af8:	4b19      	ldr	r3, [pc, #100]	; (7b60 <promisc_recover_hop_increment+0x198>)
    7afa:	2228      	movs	r2, #40	; 0x28
    7afc:	601a      	str	r2, [r3, #0]

			return;
    7afe:	e00f      	b.n	7b20 <promisc_recover_hop_increment+0x158>
    7b00:	e00e      	b.n	7b20 <promisc_recover_hop_increment+0x158>
		}
		hop_direct_channel = 2404;
    7b02:	4b0d      	ldr	r3, [pc, #52]	; (7b38 <promisc_recover_hop_increment+0x170>)
    7b04:	f640 1264 	movw	r2, #2404	; 0x964
    7b08:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    7b0a:	4b0c      	ldr	r3, [pc, #48]	; (7b3c <promisc_recover_hop_increment+0x174>)
    7b0c:	2201      	movs	r2, #1
    7b0e:	701a      	strb	r2, [r3, #0]
    7b10:	e006      	b.n	7b20 <promisc_recover_hop_increment+0x158>
	}
	else {
		hop_direct_channel = 2404;
    7b12:	4b09      	ldr	r3, [pc, #36]	; (7b38 <promisc_recover_hop_increment+0x170>)
    7b14:	f640 1264 	movw	r2, #2404	; 0x964
    7b18:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    7b1a:	4b08      	ldr	r3, [pc, #32]	; (7b3c <promisc_recover_hop_increment+0x174>)
    7b1c:	2201      	movs	r2, #1
    7b1e:	701a      	strb	r2, [r3, #0]
	}
}
    7b20:	3710      	adds	r7, #16
    7b22:	46bd      	mov	sp, r7
    7b24:	bd80      	pop	{r7, pc}
    7b26:	bf00      	nop
    7b28:	1000049c 	.word	0x1000049c
    7b2c:	10000be4 	.word	0x10000be4
    7b30:	40004008 	.word	0x40004008
    7b34:	10000a54 	.word	0x10000a54
    7b38:	10000980 	.word	0x10000980
    7b3c:	1000097d 	.word	0x1000097d
    7b40:	10000458 	.word	0x10000458
    7b44:	0000c040 	.word	0x0000c040
    7b48:	dd67c8a7 	.word	0xdd67c8a7
    7b4c:	1000097c 	.word	0x1000097c
    7b50:	1000099c 	.word	0x1000099c
    7b54:	00007699 	.word	0x00007699
    7b58:	1000046e 	.word	0x1000046e
    7b5c:	10000a40 	.word	0x10000a40
    7b60:	10000994 	.word	0x10000994

00007b64 <promisc_recover_hop_interval>:

void promisc_recover_hop_interval(u8 *packet) {
    7b64:	b580      	push	{r7, lr}
    7b66:	b086      	sub	sp, #24
    7b68:	af00      	add	r7, sp, #0
    7b6a:	6078      	str	r0, [r7, #4]
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    7b6c:	4b33      	ldr	r3, [pc, #204]	; (7c3c <promisc_recover_hop_interval+0xd8>)
    7b6e:	681b      	ldr	r3, [r3, #0]
    7b70:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7b74:	f640 4235 	movw	r2, #3125	; 0xc35
    7b78:	fb02 f203 	mul.w	r2, r2, r3
    7b7c:	4b30      	ldr	r3, [pc, #192]	; (7c40 <promisc_recover_hop_interval+0xdc>)
    7b7e:	681b      	ldr	r3, [r3, #0]
    7b80:	4413      	add	r3, r2
    7b82:	617b      	str	r3, [r7, #20]
	if (cur_clk < prev_clk)
    7b84:	4b2f      	ldr	r3, [pc, #188]	; (7c44 <promisc_recover_hop_interval+0xe0>)
    7b86:	681b      	ldr	r3, [r3, #0]
    7b88:	697a      	ldr	r2, [r7, #20]
    7b8a:	429a      	cmp	r2, r3
    7b8c:	d203      	bcs.n	7b96 <promisc_recover_hop_interval+0x32>
		cur_clk += 3267800000; // handle rollover
    7b8e:	697a      	ldr	r2, [r7, #20]
    7b90:	4b2d      	ldr	r3, [pc, #180]	; (7c48 <promisc_recover_hop_interval+0xe4>)
    7b92:	4413      	add	r3, r2
    7b94:	617b      	str	r3, [r7, #20]
	u32 clk_diff = cur_clk - prev_clk;
    7b96:	4b2b      	ldr	r3, [pc, #172]	; (7c44 <promisc_recover_hop_interval+0xe0>)
    7b98:	681b      	ldr	r3, [r3, #0]
    7b9a:	697a      	ldr	r2, [r7, #20]
    7b9c:	1ad3      	subs	r3, r2, r3
    7b9e:	613b      	str	r3, [r7, #16]
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    7ba0:	693b      	ldr	r3, [r7, #16]
    7ba2:	f246 12a7 	movw	r2, #24999	; 0x61a7
    7ba6:	4293      	cmp	r3, r2
    7ba8:	d800      	bhi.n	7bac <promisc_recover_hop_interval+0x48>
		return;
    7baa:	e043      	b.n	7c34 <promisc_recover_hop_interval+0xd0>

	if (clk_diff < le_promisc.smallest_hop_interval)
    7bac:	4b27      	ldr	r3, [pc, #156]	; (7c4c <promisc_recover_hop_interval+0xe8>)
    7bae:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    7bb2:	693b      	ldr	r3, [r7, #16]
    7bb4:	429a      	cmp	r2, r3
    7bb6:	d903      	bls.n	7bc0 <promisc_recover_hop_interval+0x5c>
		le_promisc.smallest_hop_interval = clk_diff;
    7bb8:	4a24      	ldr	r2, [pc, #144]	; (7c4c <promisc_recover_hop_interval+0xe8>)
    7bba:	693b      	ldr	r3, [r7, #16]
    7bbc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    7bc0:	4b22      	ldr	r3, [pc, #136]	; (7c4c <promisc_recover_hop_interval+0xe8>)
    7bc2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    7bc6:	f503 3361 	add.w	r3, r3, #230400	; 0x38400
    7bca:	f203 3352 	addw	r3, r3, #850	; 0x352
    7bce:	4a20      	ldr	r2, [pc, #128]	; (7c50 <promisc_recover_hop_interval+0xec>)
    7bd0:	fba2 2303 	umull	r2, r3, r2, r3
    7bd4:	0c9b      	lsrs	r3, r3, #18
    7bd6:	81fb      	strh	r3, [r7, #14]

	if (le.conn_interval == obsv_hop_interval) {
    7bd8:	4b1e      	ldr	r3, [pc, #120]	; (7c54 <promisc_recover_hop_interval+0xf0>)
    7bda:	8bdb      	ldrh	r3, [r3, #30]
    7bdc:	89fa      	ldrh	r2, [r7, #14]
    7bde:	429a      	cmp	r2, r3
    7be0:	d11e      	bne.n	7c20 <promisc_recover_hop_interval+0xbc>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    7be2:	4b1a      	ldr	r3, [pc, #104]	; (7c4c <promisc_recover_hop_interval+0xe8>)
    7be4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    7be8:	3301      	adds	r3, #1
    7bea:	4a18      	ldr	r2, [pc, #96]	; (7c4c <promisc_recover_hop_interval+0xe8>)
    7bec:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    7bf0:	4b16      	ldr	r3, [pc, #88]	; (7c4c <promisc_recover_hop_interval+0xe8>)
    7bf2:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    7bf6:	2b05      	cmp	r3, #5
    7bf8:	d119      	bne.n	7c2e <promisc_recover_hop_interval+0xca>
			packet_cb = promisc_recover_hop_increment;
    7bfa:	4b17      	ldr	r3, [pc, #92]	; (7c58 <promisc_recover_hop_interval+0xf4>)
    7bfc:	4a17      	ldr	r2, [pc, #92]	; (7c5c <promisc_recover_hop_interval+0xf8>)
    7bfe:	601a      	str	r2, [r3, #0]
			hop_direct_channel = 2404;
    7c00:	4b17      	ldr	r3, [pc, #92]	; (7c60 <promisc_recover_hop_interval+0xfc>)
    7c02:	f640 1264 	movw	r2, #2404	; 0x964
    7c06:	801a      	strh	r2, [r3, #0]
			hop_mode = HOP_DIRECT;
    7c08:	4b16      	ldr	r3, [pc, #88]	; (7c64 <promisc_recover_hop_interval+0x100>)
    7c0a:	2204      	movs	r2, #4
    7c0c:	701a      	strb	r2, [r3, #0]
			do_hop = 1;
    7c0e:	4b16      	ldr	r3, [pc, #88]	; (7c68 <promisc_recover_hop_interval+0x104>)
    7c10:	2201      	movs	r2, #1
    7c12:	701a      	strb	r2, [r3, #0]
			le_promisc_state(2, &le.conn_interval, 2);
    7c14:	2002      	movs	r0, #2
    7c16:	4915      	ldr	r1, [pc, #84]	; (7c6c <promisc_recover_hop_interval+0x108>)
    7c18:	2202      	movs	r2, #2
    7c1a:	f7ff fe8d 	bl	7938 <le_promisc_state>
    7c1e:	e006      	b.n	7c2e <promisc_recover_hop_interval+0xca>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    7c20:	4a0c      	ldr	r2, [pc, #48]	; (7c54 <promisc_recover_hop_interval+0xf0>)
    7c22:	89fb      	ldrh	r3, [r7, #14]
    7c24:	83d3      	strh	r3, [r2, #30]
		le_promisc.consec_intervals = 0;
    7c26:	4b09      	ldr	r3, [pc, #36]	; (7c4c <promisc_recover_hop_interval+0xe8>)
    7c28:	2200      	movs	r2, #0
    7c2a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	prev_clk = cur_clk;
    7c2e:	4a05      	ldr	r2, [pc, #20]	; (7c44 <promisc_recover_hop_interval+0xe0>)
    7c30:	697b      	ldr	r3, [r7, #20]
    7c32:	6013      	str	r3, [r2, #0]
}
    7c34:	3718      	adds	r7, #24
    7c36:	46bd      	mov	sp, r7
    7c38:	bd80      	pop	{r7, pc}
    7c3a:	bf00      	nop
    7c3c:	10000be4 	.word	0x10000be4
    7c40:	40004008 	.word	0x40004008
    7c44:	10000a58 	.word	0x10000a58
    7c48:	c2c6abc0 	.word	0xc2c6abc0
    7c4c:	10000bf0 	.word	0x10000bf0
    7c50:	9119a9c1 	.word	0x9119a9c1
    7c54:	10000458 	.word	0x10000458
    7c58:	1000099c 	.word	0x1000099c
    7c5c:	000079c9 	.word	0x000079c9
    7c60:	10000980 	.word	0x10000980
    7c64:	1000097c 	.word	0x1000097c
    7c68:	1000097d 	.word	0x1000097d
    7c6c:	10000476 	.word	0x10000476

00007c70 <promisc_follow_cb>:

void promisc_follow_cb(u8 *packet) {
    7c70:	b580      	push	{r7, lr}
    7c72:	b084      	sub	sp, #16
    7c74:	af00      	add	r7, sp, #0
    7c76:	6078      	str	r0, [r7, #4]
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    7c78:	4b28      	ldr	r3, [pc, #160]	; (7d1c <promisc_follow_cb+0xac>)
    7c7a:	691b      	ldr	r3, [r3, #16]
    7c7c:	2b00      	cmp	r3, #0
    7c7e:	d149      	bne.n	7d14 <promisc_follow_cb+0xa4>
    7c80:	687b      	ldr	r3, [r7, #4]
    7c82:	3304      	adds	r3, #4
    7c84:	781b      	ldrb	r3, [r3, #0]
    7c86:	2b01      	cmp	r3, #1
    7c88:	d144      	bne.n	7d14 <promisc_follow_cb+0xa4>
    7c8a:	687b      	ldr	r3, [r7, #4]
    7c8c:	3305      	adds	r3, #5
    7c8e:	781b      	ldrb	r3, [r3, #0]
    7c90:	2b00      	cmp	r3, #0
    7c92:	d13f      	bne.n	7d14 <promisc_follow_cb+0xa4>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    7c94:	687b      	ldr	r3, [r7, #4]
    7c96:	3308      	adds	r3, #8
    7c98:	781b      	ldrb	r3, [r3, #0]
    7c9a:	041a      	lsls	r2, r3, #16
    7c9c:	687b      	ldr	r3, [r7, #4]
    7c9e:	3307      	adds	r3, #7
    7ca0:	781b      	ldrb	r3, [r3, #0]
    7ca2:	021b      	lsls	r3, r3, #8
    7ca4:	4313      	orrs	r3, r2
    7ca6:	687a      	ldr	r2, [r7, #4]
    7ca8:	3206      	adds	r2, #6
    7caa:	7812      	ldrb	r2, [r2, #0]
    7cac:	4313      	orrs	r3, r2
    7cae:	60bb      	str	r3, [r7, #8]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    7cb0:	687b      	ldr	r3, [r7, #4]
    7cb2:	3304      	adds	r3, #4
    7cb4:	68b8      	ldr	r0, [r7, #8]
    7cb6:	4619      	mov	r1, r3
    7cb8:	2202      	movs	r2, #2
    7cba:	f000 ff7b 	bl	8bb4 <btle_reverse_crc>
    7cbe:	4602      	mov	r2, r0
    7cc0:	4b16      	ldr	r3, [pc, #88]	; (7d1c <promisc_follow_cb+0xac>)
    7cc2:	609a      	str	r2, [r3, #8]
		le.crc_init_reversed = 0;
    7cc4:	4b15      	ldr	r3, [pc, #84]	; (7d1c <promisc_follow_cb+0xac>)
    7cc6:	2200      	movs	r2, #0
    7cc8:	60da      	str	r2, [r3, #12]
		for (i = 0; i < 24; ++i)
    7cca:	2300      	movs	r3, #0
    7ccc:	60fb      	str	r3, [r7, #12]
    7cce:	e013      	b.n	7cf8 <promisc_follow_cb+0x88>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    7cd0:	4b12      	ldr	r3, [pc, #72]	; (7d1c <promisc_follow_cb+0xac>)
    7cd2:	68da      	ldr	r2, [r3, #12]
    7cd4:	4b11      	ldr	r3, [pc, #68]	; (7d1c <promisc_follow_cb+0xac>)
    7cd6:	6899      	ldr	r1, [r3, #8]
    7cd8:	68fb      	ldr	r3, [r7, #12]
    7cda:	fa21 f303 	lsr.w	r3, r1, r3
    7cde:	f003 0101 	and.w	r1, r3, #1
    7ce2:	68fb      	ldr	r3, [r7, #12]
    7ce4:	f1c3 0317 	rsb	r3, r3, #23
    7ce8:	fa01 f303 	lsl.w	r3, r1, r3
    7cec:	4313      	orrs	r3, r2
    7cee:	4a0b      	ldr	r2, [pc, #44]	; (7d1c <promisc_follow_cb+0xac>)
    7cf0:	60d3      	str	r3, [r2, #12]
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    7cf2:	68fb      	ldr	r3, [r7, #12]
    7cf4:	3301      	adds	r3, #1
    7cf6:	60fb      	str	r3, [r7, #12]
    7cf8:	68fb      	ldr	r3, [r7, #12]
    7cfa:	2b17      	cmp	r3, #23
    7cfc:	dde8      	ble.n	7cd0 <promisc_follow_cb+0x60>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    7cfe:	4b07      	ldr	r3, [pc, #28]	; (7d1c <promisc_follow_cb+0xac>)
    7d00:	2201      	movs	r2, #1
    7d02:	611a      	str	r2, [r3, #16]
		packet_cb = promisc_recover_hop_interval;
    7d04:	4b06      	ldr	r3, [pc, #24]	; (7d20 <promisc_follow_cb+0xb0>)
    7d06:	4a07      	ldr	r2, [pc, #28]	; (7d24 <promisc_follow_cb+0xb4>)
    7d08:	601a      	str	r2, [r3, #0]
		le_promisc_state(1, &le.crc_init, 3);
    7d0a:	2001      	movs	r0, #1
    7d0c:	4906      	ldr	r1, [pc, #24]	; (7d28 <promisc_follow_cb+0xb8>)
    7d0e:	2203      	movs	r2, #3
    7d10:	f7ff fe12 	bl	7938 <le_promisc_state>
	}
}
    7d14:	3710      	adds	r7, #16
    7d16:	46bd      	mov	sp, r7
    7d18:	bd80      	pop	{r7, pc}
    7d1a:	bf00      	nop
    7d1c:	10000458 	.word	0x10000458
    7d20:	1000099c 	.word	0x1000099c
    7d24:	00007b65 	.word	0x00007b65
    7d28:	10000460 	.word	0x10000460

00007d2c <see_aa>:

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    7d2c:	b480      	push	{r7}
    7d2e:	b087      	sub	sp, #28
    7d30:	af00      	add	r7, sp, #0
    7d32:	6078      	str	r0, [r7, #4]
	int i, max = -1, killme = -1;
    7d34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7d38:	613b      	str	r3, [r7, #16]
    7d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7d3e:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7d40:	2300      	movs	r3, #0
    7d42:	617b      	str	r3, [r7, #20]
    7d44:	e015      	b.n	7d72 <see_aa+0x46>
		if (le_promisc.active_aa[i].aa == aa) {
    7d46:	4a22      	ldr	r2, [pc, #136]	; (7dd0 <see_aa+0xa4>)
    7d48:	697b      	ldr	r3, [r7, #20]
    7d4a:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    7d4e:	687b      	ldr	r3, [r7, #4]
    7d50:	429a      	cmp	r2, r3
    7d52:	d10b      	bne.n	7d6c <see_aa+0x40>
			++le_promisc.active_aa[i].count;
    7d54:	4a1e      	ldr	r2, [pc, #120]	; (7dd0 <see_aa+0xa4>)
    7d56:	697b      	ldr	r3, [r7, #20]
    7d58:	00db      	lsls	r3, r3, #3
    7d5a:	4413      	add	r3, r2
    7d5c:	685b      	ldr	r3, [r3, #4]
    7d5e:	1c5a      	adds	r2, r3, #1
    7d60:	491b      	ldr	r1, [pc, #108]	; (7dd0 <see_aa+0xa4>)
    7d62:	697b      	ldr	r3, [r7, #20]
    7d64:	00db      	lsls	r3, r3, #3
    7d66:	440b      	add	r3, r1
    7d68:	605a      	str	r2, [r3, #4]
			return;
    7d6a:	e02c      	b.n	7dc6 <see_aa+0x9a>
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7d6c:	697b      	ldr	r3, [r7, #20]
    7d6e:	3301      	adds	r3, #1
    7d70:	617b      	str	r3, [r7, #20]
    7d72:	697b      	ldr	r3, [r7, #20]
    7d74:	2b1f      	cmp	r3, #31
    7d76:	dde6      	ble.n	7d46 <see_aa+0x1a>
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7d78:	2300      	movs	r3, #0
    7d7a:	617b      	str	r3, [r7, #20]
    7d7c:	e015      	b.n	7daa <see_aa+0x7e>
		if (le_promisc.active_aa[i].count < max || max < 0) {
    7d7e:	4a14      	ldr	r2, [pc, #80]	; (7dd0 <see_aa+0xa4>)
    7d80:	697b      	ldr	r3, [r7, #20]
    7d82:	00db      	lsls	r3, r3, #3
    7d84:	4413      	add	r3, r2
    7d86:	685a      	ldr	r2, [r3, #4]
    7d88:	693b      	ldr	r3, [r7, #16]
    7d8a:	429a      	cmp	r2, r3
    7d8c:	db02      	blt.n	7d94 <see_aa+0x68>
    7d8e:	693b      	ldr	r3, [r7, #16]
    7d90:	2b00      	cmp	r3, #0
    7d92:	da07      	bge.n	7da4 <see_aa+0x78>
			killme = i;
    7d94:	697b      	ldr	r3, [r7, #20]
    7d96:	60fb      	str	r3, [r7, #12]
			max = le_promisc.active_aa[i].count;
    7d98:	4a0d      	ldr	r2, [pc, #52]	; (7dd0 <see_aa+0xa4>)
    7d9a:	697b      	ldr	r3, [r7, #20]
    7d9c:	00db      	lsls	r3, r3, #3
    7d9e:	4413      	add	r3, r2
    7da0:	685b      	ldr	r3, [r3, #4]
    7da2:	613b      	str	r3, [r7, #16]
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7da4:	697b      	ldr	r3, [r7, #20]
    7da6:	3301      	adds	r3, #1
    7da8:	617b      	str	r3, [r7, #20]
    7daa:	697b      	ldr	r3, [r7, #20]
    7dac:	2b1f      	cmp	r3, #31
    7dae:	dde6      	ble.n	7d7e <see_aa+0x52>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    7db0:	4907      	ldr	r1, [pc, #28]	; (7dd0 <see_aa+0xa4>)
    7db2:	68fb      	ldr	r3, [r7, #12]
    7db4:	687a      	ldr	r2, [r7, #4]
    7db6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    7dba:	4a05      	ldr	r2, [pc, #20]	; (7dd0 <see_aa+0xa4>)
    7dbc:	68fb      	ldr	r3, [r7, #12]
    7dbe:	00db      	lsls	r3, r3, #3
    7dc0:	4413      	add	r3, r2
    7dc2:	2201      	movs	r2, #1
    7dc4:	605a      	str	r2, [r3, #4]
}
    7dc6:	371c      	adds	r7, #28
    7dc8:	46bd      	mov	sp, r7
    7dca:	f85d 7b04 	ldr.w	r7, [sp], #4
    7dce:	4770      	bx	lr
    7dd0:	10000bf0 	.word	0x10000bf0

00007dd4 <cb_le_promisc>:

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    7dd4:	b590      	push	{r4, r7, lr}
    7dd6:	b0a1      	sub	sp, #132	; 0x84
    7dd8:	af00      	add	r7, sp, #0
    7dda:	6078      	str	r0, [r7, #4]
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    7ddc:	f107 031c 	add.w	r3, r7, #28
    7de0:	2240      	movs	r2, #64	; 0x40
    7de2:	4618      	mov	r0, r3
    7de4:	2100      	movs	r1, #0
    7de6:	f7fc f9c7 	bl	4178 <memset>
    7dea:	2301      	movs	r3, #1
    7dec:	773b      	strb	r3, [r7, #28]
    7dee:	2301      	movs	r3, #1
    7df0:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    7df4:	2301      	movs	r3, #1
    7df6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    7dfa:	2301      	movs	r3, #1
    7dfc:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    7e00:	2301      	movs	r3, #1
    7e02:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    7e06:	2301      	movs	r3, #1
    7e08:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    7e0c:	2301      	movs	r3, #1
    7e0e:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    7e12:	2301      	movs	r3, #1
    7e14:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    7e18:	2300      	movs	r3, #0
    7e1a:	67fb      	str	r3, [r7, #124]	; 0x7c
    7e1c:	e041      	b.n	7ea2 <cb_le_promisc+0xce>
		idx = whitening_index[btle_channel_index(channel-2402)];
    7e1e:	4ba5      	ldr	r3, [pc, #660]	; (80b4 <cb_le_promisc+0x2e0>)
    7e20:	881b      	ldrh	r3, [r3, #0]
    7e22:	b29b      	uxth	r3, r3
    7e24:	b2db      	uxtb	r3, r3
    7e26:	3b62      	subs	r3, #98	; 0x62
    7e28:	b2db      	uxtb	r3, r3
    7e2a:	4618      	mov	r0, r3
    7e2c:	f000 fe20 	bl	8a70 <btle_channel_index>
    7e30:	4603      	mov	r3, r0
    7e32:	461a      	mov	r2, r3
    7e34:	4ba0      	ldr	r3, [pc, #640]	; (80b8 <cb_le_promisc+0x2e4>)
    7e36:	5c9b      	ldrb	r3, [r3, r2]
    7e38:	673b      	str	r3, [r7, #112]	; 0x70

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    7e3a:	2300      	movs	r3, #0
    7e3c:	67bb      	str	r3, [r7, #120]	; 0x78
    7e3e:	e02a      	b.n	7e96 <cb_le_promisc+0xc2>
			desired[i][j] ^= whitening[idx];
    7e40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7e42:	011b      	lsls	r3, r3, #4
    7e44:	f107 0280 	add.w	r2, r7, #128	; 0x80
    7e48:	441a      	add	r2, r3
    7e4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7e4c:	4413      	add	r3, r2
    7e4e:	3b64      	subs	r3, #100	; 0x64
    7e50:	781a      	ldrb	r2, [r3, #0]
    7e52:	499a      	ldr	r1, [pc, #616]	; (80bc <cb_le_promisc+0x2e8>)
    7e54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7e56:	440b      	add	r3, r1
    7e58:	781b      	ldrb	r3, [r3, #0]
    7e5a:	4053      	eors	r3, r2
    7e5c:	b2d9      	uxtb	r1, r3
    7e5e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7e60:	011b      	lsls	r3, r3, #4
    7e62:	f107 0280 	add.w	r2, r7, #128	; 0x80
    7e66:	441a      	add	r2, r3
    7e68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7e6a:	4413      	add	r3, r2
    7e6c:	3b64      	subs	r3, #100	; 0x64
    7e6e:	460a      	mov	r2, r1
    7e70:	701a      	strb	r2, [r3, #0]
			idx = (idx + 1) % sizeof(whitening);
    7e72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7e74:	3301      	adds	r3, #1
    7e76:	4619      	mov	r1, r3
    7e78:	4b91      	ldr	r3, [pc, #580]	; (80c0 <cb_le_promisc+0x2ec>)
    7e7a:	fba1 2303 	umull	r2, r3, r1, r3
    7e7e:	1ac8      	subs	r0, r1, r3
    7e80:	0840      	lsrs	r0, r0, #1
    7e82:	4403      	add	r3, r0
    7e84:	099a      	lsrs	r2, r3, #6
    7e86:	4613      	mov	r3, r2
    7e88:	01db      	lsls	r3, r3, #7
    7e8a:	1a9b      	subs	r3, r3, r2
    7e8c:	1aca      	subs	r2, r1, r3
    7e8e:	673a      	str	r2, [r7, #112]	; 0x70

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    7e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7e92:	3301      	adds	r3, #1
    7e94:	67bb      	str	r3, [r7, #120]	; 0x78
    7e96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7e98:	2b0f      	cmp	r3, #15
    7e9a:	ddd1      	ble.n	7e40 <cb_le_promisc+0x6c>
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    7e9c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7e9e:	3301      	adds	r3, #1
    7ea0:	67fb      	str	r3, [r7, #124]	; 0x7c
    7ea2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7ea4:	2b03      	cmp	r3, #3
    7ea6:	ddba      	ble.n	7e1e <cb_le_promisc+0x4a>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    7ea8:	2320      	movs	r3, #32
    7eaa:	67fb      	str	r3, [r7, #124]	; 0x7c
    7eac:	e0d0      	b.n	8050 <cb_le_promisc+0x27c>
		int ok[4] = { 1, 1, 1, 1 };
    7eae:	4b85      	ldr	r3, [pc, #532]	; (80c4 <cb_le_promisc+0x2f0>)
    7eb0:	f107 040c 	add.w	r4, r7, #12
    7eb4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    7eb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		int matching = -1;
    7eba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7ebe:	66fb      	str	r3, [r7, #108]	; 0x6c

		for (j = 0; j < 4; ++j) {
    7ec0:	2300      	movs	r3, #0
    7ec2:	67bb      	str	r3, [r7, #120]	; 0x78
    7ec4:	e026      	b.n	7f14 <cb_le_promisc+0x140>
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    7ec6:	2300      	movs	r3, #0
    7ec8:	677b      	str	r3, [r7, #116]	; 0x74
    7eca:	e01d      	b.n	7f08 <cb_le_promisc+0x134>
				if (unpacked[i+k] != desired[j][k]) {
    7ecc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    7ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7ed0:	4413      	add	r3, r2
    7ed2:	461a      	mov	r2, r3
    7ed4:	687b      	ldr	r3, [r7, #4]
    7ed6:	4413      	add	r3, r2
    7ed8:	781a      	ldrb	r2, [r3, #0]
    7eda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7edc:	011b      	lsls	r3, r3, #4
    7ede:	f107 0180 	add.w	r1, r7, #128	; 0x80
    7ee2:	4419      	add	r1, r3
    7ee4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7ee6:	440b      	add	r3, r1
    7ee8:	3b64      	subs	r3, #100	; 0x64
    7eea:	781b      	ldrb	r3, [r3, #0]
    7eec:	429a      	cmp	r2, r3
    7eee:	d008      	beq.n	7f02 <cb_le_promisc+0x12e>
					ok[j] = 0;
    7ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7ef2:	009b      	lsls	r3, r3, #2
    7ef4:	f107 0280 	add.w	r2, r7, #128	; 0x80
    7ef8:	4413      	add	r3, r2
    7efa:	2200      	movs	r2, #0
    7efc:	f843 2c74 	str.w	r2, [r3, #-116]
					break;
    7f00:	e005      	b.n	7f0e <cb_le_promisc+0x13a>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    7f02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7f04:	3301      	adds	r3, #1
    7f06:	677b      	str	r3, [r7, #116]	; 0x74
    7f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7f0a:	2b0f      	cmp	r3, #15
    7f0c:	ddde      	ble.n	7ecc <cb_le_promisc+0xf8>
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    7f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7f10:	3301      	adds	r3, #1
    7f12:	67bb      	str	r3, [r7, #120]	; 0x78
    7f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7f16:	2b03      	cmp	r3, #3
    7f18:	ddd5      	ble.n	7ec6 <cb_le_promisc+0xf2>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    7f1a:	2300      	movs	r3, #0
    7f1c:	67bb      	str	r3, [r7, #120]	; 0x78
    7f1e:	e00e      	b.n	7f3e <cb_le_promisc+0x16a>
			if (ok[j]) {
    7f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7f22:	009b      	lsls	r3, r3, #2
    7f24:	f107 0280 	add.w	r2, r7, #128	; 0x80
    7f28:	4413      	add	r3, r2
    7f2a:	f853 3c74 	ldr.w	r3, [r3, #-116]
    7f2e:	2b00      	cmp	r3, #0
    7f30:	d002      	beq.n	7f38 <cb_le_promisc+0x164>
				matching = j;
    7f32:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7f34:	66fb      	str	r3, [r7, #108]	; 0x6c
				break;
    7f36:	e005      	b.n	7f44 <cb_le_promisc+0x170>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    7f38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7f3a:	3301      	adds	r3, #1
    7f3c:	67bb      	str	r3, [r7, #120]	; 0x78
    7f3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7f40:	2b03      	cmp	r3, #3
    7f42:	dded      	ble.n	7f20 <cb_le_promisc+0x14c>
				break;
			}
		}

		// skip if no match
		if (matching < 0)
    7f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    7f46:	2b00      	cmp	r3, #0
    7f48:	db7f      	blt.n	804a <cb_le_promisc+0x276>
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
    7f4a:	4b5a      	ldr	r3, [pc, #360]	; (80b4 <cb_le_promisc+0x2e0>)
    7f4c:	881b      	ldrh	r3, [r3, #0]
    7f4e:	b29b      	uxth	r3, r3
    7f50:	b2db      	uxtb	r3, r3
    7f52:	3b62      	subs	r3, #98	; 0x62
    7f54:	b2db      	uxtb	r3, r3
    7f56:	4618      	mov	r0, r3
    7f58:	f000 fd8a 	bl	8a70 <btle_channel_index>
    7f5c:	4603      	mov	r3, r0
    7f5e:	461a      	mov	r2, r3
    7f60:	4b55      	ldr	r3, [pc, #340]	; (80b8 <cb_le_promisc+0x2e4>)
    7f62:	5c9b      	ldrb	r3, [r3, r2]
    7f64:	673b      	str	r3, [r7, #112]	; 0x70
		for (j = 0; j < 4+3+3; ++j) {
    7f66:	2300      	movs	r3, #0
    7f68:	67bb      	str	r3, [r7, #120]	; 0x78
    7f6a:	e04c      	b.n	8006 <cb_le_promisc+0x232>
			u8 byte = 0;
    7f6c:	2300      	movs	r3, #0
    7f6e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			for (k = 0; k < 8; k++) {
    7f72:	2300      	movs	r3, #0
    7f74:	677b      	str	r3, [r7, #116]	; 0x74
    7f76:	e039      	b.n	7fec <cb_le_promisc+0x218>
				int offset = k + (j * 8) + i - 32;
    7f78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7f7a:	00da      	lsls	r2, r3, #3
    7f7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7f7e:	441a      	add	r2, r3
    7f80:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7f82:	4413      	add	r3, r2
    7f84:	3b20      	subs	r3, #32
    7f86:	663b      	str	r3, [r7, #96]	; 0x60
				if (offset >= DMA_SIZE*8*2) break;
    7f88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7f8a:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    7f8e:	db00      	blt.n	7f92 <cb_le_promisc+0x1be>
    7f90:	e02f      	b.n	7ff2 <cb_le_promisc+0x21e>
				int bit = unpacked[offset];
    7f92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7f94:	687a      	ldr	r2, [r7, #4]
    7f96:	4413      	add	r3, r2
    7f98:	781b      	ldrb	r3, [r3, #0]
    7f9a:	667b      	str	r3, [r7, #100]	; 0x64
				if (j >= 4) { // unwhiten data bytes
    7f9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7f9e:	2b03      	cmp	r3, #3
    7fa0:	dd16      	ble.n	7fd0 <cb_le_promisc+0x1fc>
					bit ^= whitening[idx];
    7fa2:	4a46      	ldr	r2, [pc, #280]	; (80bc <cb_le_promisc+0x2e8>)
    7fa4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7fa6:	4413      	add	r3, r2
    7fa8:	781b      	ldrb	r3, [r3, #0]
    7faa:	461a      	mov	r2, r3
    7fac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7fae:	4053      	eors	r3, r2
    7fb0:	667b      	str	r3, [r7, #100]	; 0x64
					idx = (idx + 1) % sizeof(whitening);
    7fb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7fb4:	3301      	adds	r3, #1
    7fb6:	4619      	mov	r1, r3
    7fb8:	4b41      	ldr	r3, [pc, #260]	; (80c0 <cb_le_promisc+0x2ec>)
    7fba:	fba1 2303 	umull	r2, r3, r1, r3
    7fbe:	1ac8      	subs	r0, r1, r3
    7fc0:	0840      	lsrs	r0, r0, #1
    7fc2:	4403      	add	r3, r0
    7fc4:	099a      	lsrs	r2, r3, #6
    7fc6:	4613      	mov	r3, r2
    7fc8:	01db      	lsls	r3, r3, #7
    7fca:	1a9b      	subs	r3, r3, r2
    7fcc:	1aca      	subs	r2, r1, r3
    7fce:	673a      	str	r2, [r7, #112]	; 0x70
				}
				byte |= bit << k;
    7fd0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    7fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7fd4:	fa02 f303 	lsl.w	r3, r2, r3
    7fd8:	b2da      	uxtb	r2, r3
    7fda:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
    7fde:	4313      	orrs	r3, r2
    7fe0:	b2db      	uxtb	r3, r3
    7fe2:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    7fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7fe8:	3301      	adds	r3, #1
    7fea:	677b      	str	r3, [r7, #116]	; 0x74
    7fec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7fee:	2b07      	cmp	r3, #7
    7ff0:	ddc2      	ble.n	7f78 <cb_le_promisc+0x1a4>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    7ff2:	4b35      	ldr	r3, [pc, #212]	; (80c8 <cb_le_promisc+0x2f4>)
    7ff4:	681a      	ldr	r2, [r3, #0]
    7ff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7ff8:	4413      	add	r3, r2
    7ffa:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
    7ffe:	701a      	strb	r2, [r3, #0]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
    8000:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8002:	3301      	adds	r3, #1
    8004:	67bb      	str	r3, [r7, #120]	; 0x78
    8006:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8008:	2b09      	cmp	r3, #9
    800a:	ddaf      	ble.n	7f6c <cb_le_promisc+0x198>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    800c:	4b2e      	ldr	r3, [pc, #184]	; (80c8 <cb_le_promisc+0x2f4>)
    800e:	681b      	ldr	r3, [r3, #0]
    8010:	3303      	adds	r3, #3
    8012:	781b      	ldrb	r3, [r3, #0]
    8014:	061a      	lsls	r2, r3, #24
				 (idle_rxbuf[2] << 16) |
    8016:	4b2c      	ldr	r3, [pc, #176]	; (80c8 <cb_le_promisc+0x2f4>)
    8018:	681b      	ldr	r3, [r3, #0]
    801a:	3302      	adds	r3, #2
    801c:	781b      	ldrb	r3, [r3, #0]
    801e:	041b      	lsls	r3, r3, #16
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    8020:	431a      	orrs	r2, r3
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    8022:	4b29      	ldr	r3, [pc, #164]	; (80c8 <cb_le_promisc+0x2f4>)
    8024:	681b      	ldr	r3, [r3, #0]
    8026:	3301      	adds	r3, #1
    8028:	781b      	ldrb	r3, [r3, #0]
    802a:	021b      	lsls	r3, r3, #8
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    802c:	4313      	orrs	r3, r2
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    802e:	4a26      	ldr	r2, [pc, #152]	; (80c8 <cb_le_promisc+0x2f4>)
    8030:	6812      	ldr	r2, [r2, #0]
    8032:	7812      	ldrb	r2, [r2, #0]
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    8034:	4313      	orrs	r3, r2
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    8036:	65fb      	str	r3, [r7, #92]	; 0x5c
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
		see_aa(aa);
    8038:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    803a:	f7ff fe77 	bl	7d2c <see_aa>

		enqueue(LE_PACKET, idle_rxbuf);
    803e:	4b22      	ldr	r3, [pc, #136]	; (80c8 <cb_le_promisc+0x2f4>)
    8040:	681b      	ldr	r3, [r3, #0]
    8042:	2001      	movs	r0, #1
    8044:	4619      	mov	r1, r3
    8046:	f7fc fa3f 	bl	44c8 <enqueue>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    804a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    804c:	3301      	adds	r3, #1
    804e:	67fb      	str	r3, [r7, #124]	; 0x7c
    8050:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8052:	f5b3 7f3c 	cmp.w	r3, #752	; 0x2f0
    8056:	f6ff af2a 	blt.w	7eae <cb_le_promisc+0xda>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    805a:	2300      	movs	r3, #0
    805c:	67fb      	str	r3, [r7, #124]	; 0x7c
    805e:	e020      	b.n	80a2 <cb_le_promisc+0x2ce>
		if (le_promisc.active_aa[i].count > 3) {
    8060:	4a1a      	ldr	r2, [pc, #104]	; (80cc <cb_le_promisc+0x2f8>)
    8062:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8064:	00db      	lsls	r3, r3, #3
    8066:	4413      	add	r3, r2
    8068:	685b      	ldr	r3, [r3, #4]
    806a:	2b03      	cmp	r3, #3
    806c:	dd16      	ble.n	809c <cb_le_promisc+0x2c8>
			le_set_access_address(le_promisc.active_aa[i].aa);
    806e:	4a17      	ldr	r2, [pc, #92]	; (80cc <cb_le_promisc+0x2f8>)
    8070:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8072:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    8076:	4618      	mov	r0, r3
    8078:	f7fe fd80 	bl	6b7c <le_set_access_address>
			data_cb = cb_follow_le;
    807c:	4b14      	ldr	r3, [pc, #80]	; (80d0 <cb_le_promisc+0x2fc>)
    807e:	4a15      	ldr	r2, [pc, #84]	; (80d4 <cb_le_promisc+0x300>)
    8080:	601a      	str	r2, [r3, #0]
			packet_cb = promisc_follow_cb;
    8082:	4b15      	ldr	r3, [pc, #84]	; (80d8 <cb_le_promisc+0x304>)
    8084:	4a15      	ldr	r2, [pc, #84]	; (80dc <cb_le_promisc+0x308>)
    8086:	601a      	str	r2, [r3, #0]
			le.crc_verify = 0;
    8088:	4b15      	ldr	r3, [pc, #84]	; (80e0 <cb_le_promisc+0x30c>)
    808a:	2200      	movs	r2, #0
    808c:	611a      	str	r2, [r3, #16]
			le_promisc_state(0, &le.access_address, 4);
    808e:	2000      	movs	r0, #0
    8090:	4913      	ldr	r1, [pc, #76]	; (80e0 <cb_le_promisc+0x30c>)
    8092:	2204      	movs	r2, #4
    8094:	f7ff fc50 	bl	7938 <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    8098:	2300      	movs	r3, #0
    809a:	e006      	b.n	80aa <cb_le_promisc+0x2d6>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    809c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    809e:	3301      	adds	r3, #1
    80a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    80a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    80a4:	2b1f      	cmp	r3, #31
    80a6:	dddb      	ble.n	8060 <cb_le_promisc+0x28c>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    80a8:	2301      	movs	r3, #1
}
    80aa:	4618      	mov	r0, r3
    80ac:	3784      	adds	r7, #132	; 0x84
    80ae:	46bd      	mov	sp, r7
    80b0:	bd90      	pop	{r4, r7, pc}
    80b2:	bf00      	nop
    80b4:	1000049c 	.word	0x1000049c
    80b8:	0000c018 	.word	0x0000c018
    80bc:	0000bf98 	.word	0x0000bf98
    80c0:	02040811 	.word	0x02040811
    80c4:	0000c838 	.word	0x0000c838
    80c8:	10000454 	.word	0x10000454
    80cc:	10000bf0 	.word	0x10000bf0
    80d0:	10000998 	.word	0x10000998
    80d4:	000074bd 	.word	0x000074bd
    80d8:	1000099c 	.word	0x1000099c
    80dc:	00007c71 	.word	0x00007c71
    80e0:	10000458 	.word	0x10000458

000080e4 <bt_promisc_le>:

void bt_promisc_le() {
    80e4:	b580      	push	{r7, lr}
    80e6:	af00      	add	r7, sp, #0
	while (requested_mode == MODE_BT_PROMISC_LE) {
    80e8:	e02c      	b.n	8144 <bt_promisc_le+0x60>
		reset_le_promisc();
    80ea:	f7fe fdad 	bl	6c48 <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    80ee:	4b18      	ldr	r3, [pc, #96]	; (8150 <bt_promisc_le+0x6c>)
    80f0:	881b      	ldrh	r3, [r3, #0]
    80f2:	b29b      	uxth	r3, r3
    80f4:	f003 0301 	and.w	r3, r3, #1
    80f8:	2b00      	cmp	r3, #0
    80fa:	d003      	beq.n	8104 <bt_promisc_le+0x20>
			channel = 2440;
    80fc:	4b14      	ldr	r3, [pc, #80]	; (8150 <bt_promisc_le+0x6c>)
    80fe:	f640 1288 	movw	r2, #2440	; 0x988
    8102:	801a      	strh	r2, [r3, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    8104:	4b13      	ldr	r3, [pc, #76]	; (8154 <bt_promisc_le+0x70>)
    8106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8108:	2b00      	cmp	r3, #0
    810a:	d107      	bne.n	811c <bt_promisc_le+0x38>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set();
    810c:	f7fc fad8 	bl	46c0 <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    8110:	4b11      	ldr	r3, [pc, #68]	; (8158 <bt_promisc_le+0x74>)
    8112:	4a12      	ldr	r2, [pc, #72]	; (815c <bt_promisc_le+0x78>)
    8114:	601a      	str	r2, [r3, #0]
			bt_generic_le(MODE_BT_PROMISC_LE);
    8116:	200a      	movs	r0, #10
    8118:	f7fe fda6 	bl	6c68 <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    811c:	4b10      	ldr	r3, [pc, #64]	; (8160 <bt_promisc_le+0x7c>)
    811e:	781b      	ldrb	r3, [r3, #0]
    8120:	b2db      	uxtb	r3, r3
    8122:	2b0a      	cmp	r3, #10
    8124:	d000      	beq.n	8128 <bt_promisc_le+0x44>
			break;
    8126:	e012      	b.n	814e <bt_promisc_le+0x6a>

		le_promisc_state(0, &le.access_address, 4);
    8128:	2000      	movs	r0, #0
    812a:	490a      	ldr	r1, [pc, #40]	; (8154 <bt_promisc_le+0x70>)
    812c:	2204      	movs	r2, #4
    812e:	f7ff fc03 	bl	7938 <le_promisc_state>
		packet_cb = promisc_follow_cb;
    8132:	4b0c      	ldr	r3, [pc, #48]	; (8164 <bt_promisc_le+0x80>)
    8134:	4a0c      	ldr	r2, [pc, #48]	; (8168 <bt_promisc_le+0x84>)
    8136:	601a      	str	r2, [r3, #0]
		le.crc_verify = 0;
    8138:	4b06      	ldr	r3, [pc, #24]	; (8154 <bt_promisc_le+0x70>)
    813a:	2200      	movs	r2, #0
    813c:	611a      	str	r2, [r3, #16]
		bt_le_sync(MODE_BT_PROMISC_LE);
    813e:	200a      	movs	r0, #10
    8140:	f7fe ff0e 	bl	6f60 <bt_le_sync>

	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
    8144:	4b06      	ldr	r3, [pc, #24]	; (8160 <bt_promisc_le+0x7c>)
    8146:	781b      	ldrb	r3, [r3, #0]
    8148:	b2db      	uxtb	r3, r3
    814a:	2b0a      	cmp	r3, #10
    814c:	d0cd      	beq.n	80ea <bt_promisc_le+0x6>
		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
	}
}
    814e:	bd80      	pop	{r7, pc}
    8150:	1000049c 	.word	0x1000049c
    8154:	10000458 	.word	0x10000458
    8158:	10000998 	.word	0x10000998
    815c:	00007dd5 	.word	0x00007dd5
    8160:	10000a3f 	.word	0x10000a3f
    8164:	1000099c 	.word	0x1000099c
    8168:	00007c71 	.word	0x00007c71

0000816c <bt_slave_le>:

void bt_slave_le() {
    816c:	b590      	push	{r4, r7, lr}
    816e:	b089      	sub	sp, #36	; 0x24
    8170:	af00      	add	r7, sp, #0
	u32 calc_crc;
	int i;

	u8 adv_ind[] = {
    8172:	4a35      	ldr	r2, [pc, #212]	; (8248 <bt_slave_le+0xdc>)
    8174:	1d3b      	adds	r3, r7, #4
    8176:	4614      	mov	r4, r2
    8178:	6820      	ldr	r0, [r4, #0]
    817a:	6861      	ldr	r1, [r4, #4]
    817c:	68a2      	ldr	r2, [r4, #8]
    817e:	c307      	stmia	r3!, {r0, r1, r2}
    8180:	89a2      	ldrh	r2, [r4, #12]
    8182:	801a      	strh	r2, [r3, #0]

		// CRC (calc)
		0xff, 0xff, 0xff,
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;
    8184:	230b      	movs	r3, #11
    8186:	76fb      	strb	r3, [r7, #27]

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    8188:	2300      	movs	r3, #0
    818a:	61fb      	str	r3, [r7, #28]
    818c:	e00e      	b.n	81ac <bt_slave_le+0x40>
		adv_ind[i+2] = slave_mac_address[5-i];
    818e:	69fb      	ldr	r3, [r7, #28]
    8190:	3302      	adds	r3, #2
    8192:	69fa      	ldr	r2, [r7, #28]
    8194:	f1c2 0205 	rsb	r2, r2, #5
    8198:	492c      	ldr	r1, [pc, #176]	; (824c <bt_slave_le+0xe0>)
    819a:	5c8a      	ldrb	r2, [r1, r2]
    819c:	f107 0120 	add.w	r1, r7, #32
    81a0:	440b      	add	r3, r1
    81a2:	f803 2c1c 	strb.w	r2, [r3, #-28]
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    81a6:	69fb      	ldr	r3, [r7, #28]
    81a8:	3301      	adds	r3, #1
    81aa:	61fb      	str	r3, [r7, #28]
    81ac:	69fb      	ldr	r3, [r7, #28]
    81ae:	2b05      	cmp	r3, #5
    81b0:	dded      	ble.n	818e <bt_slave_le+0x22>
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
    81b2:	4b27      	ldr	r3, [pc, #156]	; (8250 <bt_slave_le+0xe4>)
    81b4:	68d9      	ldr	r1, [r3, #12]
    81b6:	7efb      	ldrb	r3, [r7, #27]
    81b8:	1d3a      	adds	r2, r7, #4
    81ba:	4608      	mov	r0, r1
    81bc:	4611      	mov	r1, r2
    81be:	461a      	mov	r2, r3
    81c0:	f000 fcb4 	bl	8b2c <btle_calc_crc>
    81c4:	6178      	str	r0, [r7, #20]
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
    81c6:	7efb      	ldrb	r3, [r7, #27]
    81c8:	697a      	ldr	r2, [r7, #20]
    81ca:	b2d2      	uxtb	r2, r2
    81cc:	f107 0120 	add.w	r1, r7, #32
    81d0:	440b      	add	r3, r1
    81d2:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    81d6:	7efb      	ldrb	r3, [r7, #27]
    81d8:	3301      	adds	r3, #1
    81da:	697a      	ldr	r2, [r7, #20]
    81dc:	0a12      	lsrs	r2, r2, #8
    81de:	b2d2      	uxtb	r2, r2
    81e0:	f107 0120 	add.w	r1, r7, #32
    81e4:	440b      	add	r3, r1
    81e6:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    81ea:	7efb      	ldrb	r3, [r7, #27]
    81ec:	3302      	adds	r3, #2
    81ee:	697a      	ldr	r2, [r7, #20]
    81f0:	0c12      	lsrs	r2, r2, #16
    81f2:	b2d2      	uxtb	r2, r2
    81f4:	f107 0120 	add.w	r1, r7, #32
    81f8:	440b      	add	r3, r1
    81fa:	f803 2c1c 	strb.w	r2, [r3, #-28]

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    81fe:	e01b      	b.n	8238 <bt_slave_le+0xcc>
		ICER0 = ICER0_ICE_USB;
    8200:	4b14      	ldr	r3, [pc, #80]	; (8254 <bt_slave_le+0xe8>)
    8202:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8206:	601a      	str	r2, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
    8208:	4b12      	ldr	r3, [pc, #72]	; (8254 <bt_slave_le+0xe8>)
    820a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    820e:	601a      	str	r2, [r3, #0]
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    8210:	7efb      	ldrb	r3, [r7, #27]
    8212:	3303      	adds	r3, #3
    8214:	b2da      	uxtb	r2, r3
    8216:	1d3b      	adds	r3, r7, #4
    8218:	480f      	ldr	r0, [pc, #60]	; (8258 <bt_slave_le+0xec>)
    821a:	4611      	mov	r1, r2
    821c:	461a      	mov	r2, r3
    821e:	f7fd fd23 	bl	5c68 <le_transmit>
		ISER0 = ISER0_ISE_USB;
    8222:	4b0e      	ldr	r3, [pc, #56]	; (825c <bt_slave_le+0xf0>)
    8224:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8228:	601a      	str	r2, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    822a:	4b0c      	ldr	r3, [pc, #48]	; (825c <bt_slave_le+0xf0>)
    822c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    8230:	601a      	str	r2, [r3, #0]
		msleep(100);
    8232:	2064      	movs	r0, #100	; 0x64
    8234:	f7fd f91c 	bl	5470 <msleep>
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    8238:	4b09      	ldr	r3, [pc, #36]	; (8260 <bt_slave_le+0xf4>)
    823a:	781b      	ldrb	r3, [r3, #0]
    823c:	b2db      	uxtb	r3, r3
    823e:	2b0c      	cmp	r3, #12
    8240:	d0de      	beq.n	8200 <bt_slave_le+0x94>
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
		msleep(100);
	}
}
    8242:	3724      	adds	r7, #36	; 0x24
    8244:	46bd      	mov	sp, r7
    8246:	bd90      	pop	{r4, r7, pc}
    8248:	0000c848 	.word	0x0000c848
    824c:	1000098c 	.word	0x1000098c
    8250:	10000458 	.word	0x10000458
    8254:	e000e180 	.word	0xe000e180
    8258:	8e89bed6 	.word	0x8e89bed6
    825c:	e000e100 	.word	0xe000e100
    8260:	10000a3f 	.word	0x10000a3f

00008264 <specan>:

/* spectrum analysis */
void specan()
{
    8264:	b590      	push	{r4, r7, lr}
    8266:	b091      	sub	sp, #68	; 0x44
    8268:	af00      	add	r7, sp, #0
	u8 epstat;
	u16 f;
	u8 i = 0;
    826a:	2300      	movs	r3, #0
    826c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	u8 buf[DMA_SIZE];

	RXLED_SET;
    8270:	4b5a      	ldr	r3, [pc, #360]	; (83dc <specan+0x178>)
    8272:	2210      	movs	r2, #16
    8274:	601a      	str	r2, [r3, #0]

	queue_init();
    8276:	f000 fd7b 	bl	8d70 <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    827a:	4b59      	ldr	r3, [pc, #356]	; (83e0 <specan+0x17c>)
    827c:	2280      	movs	r2, #128	; 0x80
    827e:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    8280:	2012      	movs	r0, #18
    8282:	f642 3122 	movw	r1, #11042	; 0x2b22
    8286:	f001 ffeb 	bl	a260 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    828a:	2014      	movs	r0, #20
    828c:	f241 314b 	movw	r1, #4939	; 0x134b
    8290:	f001 ffe6 	bl	a260 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    8294:	2020      	movs	r0, #32
    8296:	f240 1101 	movw	r1, #257	; 0x101
    829a:	f001 ffe1 	bl	a260 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    829e:	2003      	movs	r0, #3
    82a0:	2129      	movs	r1, #41	; 0x29
    82a2:	f001 ffdd 	bl	a260 <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    82a6:	bf00      	nop
    82a8:	f002 f892 	bl	a3d0 <cc2400_status>
    82ac:	4603      	mov	r3, r0
    82ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
    82b2:	2b00      	cmp	r3, #0
    82b4:	d0f8      	beq.n	82a8 <specan+0x44>
	while ((cc2400_status() & FS_LOCK));
    82b6:	bf00      	nop
    82b8:	f002 f88a 	bl	a3d0 <cc2400_status>
    82bc:	4603      	mov	r3, r0
    82be:	f003 0304 	and.w	r3, r3, #4
    82c2:	2b00      	cmp	r3, #0
    82c4:	d1f8      	bne.n	82b8 <specan+0x54>

	while (requested_mode == MODE_SPECAN) {
    82c6:	e07a      	b.n	83be <specan+0x15a>
		for (f = low_freq; f < high_freq + 1; f++) {
    82c8:	4b46      	ldr	r3, [pc, #280]	; (83e4 <specan+0x180>)
    82ca:	881b      	ldrh	r3, [r3, #0]
    82cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
    82ce:	e06f      	b.n	83b0 <specan+0x14c>
			cc2400_set(FSDIV, f - 1);
    82d0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    82d2:	3b01      	subs	r3, #1
    82d4:	b29b      	uxth	r3, r3
    82d6:	2002      	movs	r0, #2
    82d8:	4619      	mov	r1, r3
    82da:	f001 ffc1 	bl	a260 <cc2400_set>
			cc2400_strobe(SFSON);
    82de:	2061      	movs	r0, #97	; 0x61
    82e0:	f002 f880 	bl	a3e4 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    82e4:	bf00      	nop
    82e6:	f002 f873 	bl	a3d0 <cc2400_status>
    82ea:	4603      	mov	r3, r0
    82ec:	f003 0304 	and.w	r3, r3, #4
    82f0:	2b00      	cmp	r3, #0
    82f2:	d0f8      	beq.n	82e6 <specan+0x82>
			cc2400_strobe(SRX);
    82f4:	2062      	movs	r0, #98	; 0x62
    82f6:	f002 f875 	bl	a3e4 <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    82fa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    82fe:	607b      	str	r3, [r7, #4]
    8300:	bf00      	nop
    8302:	687b      	ldr	r3, [r7, #4]
    8304:	3b01      	subs	r3, #1
    8306:	607b      	str	r3, [r7, #4]
    8308:	2b00      	cmp	r3, #0
    830a:	d1fa      	bne.n	8302 <specan+0x9e>
			buf[3 * i] = (f >> 8) & 0xFF;
    830c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    8310:	4613      	mov	r3, r2
    8312:	005b      	lsls	r3, r3, #1
    8314:	4413      	add	r3, r2
    8316:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    8318:	0a12      	lsrs	r2, r2, #8
    831a:	b292      	uxth	r2, r2
    831c:	b2d2      	uxtb	r2, r2
    831e:	f107 0140 	add.w	r1, r7, #64	; 0x40
    8322:	440b      	add	r3, r1
    8324:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 1] = f  & 0xFF;
    8328:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    832c:	4613      	mov	r3, r2
    832e:	005b      	lsls	r3, r3, #1
    8330:	4413      	add	r3, r2
    8332:	3301      	adds	r3, #1
    8334:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    8336:	b2d2      	uxtb	r2, r2
    8338:	f107 0140 	add.w	r1, r7, #64	; 0x40
    833c:	440b      	add	r3, r1
    833e:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    8342:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    8346:	4613      	mov	r3, r2
    8348:	005b      	lsls	r3, r3, #1
    834a:	4413      	add	r3, r2
    834c:	1c9c      	adds	r4, r3, #2
    834e:	2006      	movs	r0, #6
    8350:	f001 ff70 	bl	a234 <cc2400_get>
    8354:	4603      	mov	r3, r0
    8356:	0a1b      	lsrs	r3, r3, #8
    8358:	b29b      	uxth	r3, r3
    835a:	b2da      	uxtb	r2, r3
    835c:	f107 0340 	add.w	r3, r7, #64	; 0x40
    8360:	4423      	add	r3, r4
    8362:	f803 2c38 	strb.w	r2, [r3, #-56]
			i++;
    8366:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    836a:	3301      	adds	r3, #1
    836c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (i == 16) {
    8370:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    8374:	2b10      	cmp	r3, #16
    8376:	d10d      	bne.n	8394 <specan+0x130>
				enqueue(SPECAN, buf);
    8378:	f107 0308 	add.w	r3, r7, #8
    837c:	2004      	movs	r0, #4
    837e:	4619      	mov	r1, r3
    8380:	f7fc f8a2 	bl	44c8 <enqueue>
				i = 0;
    8384:	2300      	movs	r3, #0
    8386:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				handle_usb(clkn);
    838a:	4b17      	ldr	r3, [pc, #92]	; (83e8 <specan+0x184>)
    838c:	681b      	ldr	r3, [r3, #0]
    838e:	4618      	mov	r0, r3
    8390:	f000 fd8e 	bl	8eb0 <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    8394:	2064      	movs	r0, #100	; 0x64
    8396:	f002 f825 	bl	a3e4 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    839a:	bf00      	nop
    839c:	f002 f818 	bl	a3d0 <cc2400_status>
    83a0:	4603      	mov	r3, r0
    83a2:	f003 0304 	and.w	r3, r3, #4
    83a6:	2b00      	cmp	r3, #0
    83a8:	d1f8      	bne.n	839c <specan+0x138>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    83aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    83ac:	3301      	adds	r3, #1
    83ae:	87fb      	strh	r3, [r7, #62]	; 0x3e
    83b0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    83b2:	4b0e      	ldr	r3, [pc, #56]	; (83ec <specan+0x188>)
    83b4:	881b      	ldrh	r3, [r3, #0]
    83b6:	b29b      	uxth	r3, r3
    83b8:	3301      	adds	r3, #1
    83ba:	429a      	cmp	r2, r3
    83bc:	db88      	blt.n	82d0 <specan+0x6c>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
    83be:	4b0c      	ldr	r3, [pc, #48]	; (83f0 <specan+0x18c>)
    83c0:	781b      	ldrb	r3, [r3, #0]
    83c2:	b2db      	uxtb	r3, r3
    83c4:	2b04      	cmp	r3, #4
    83c6:	f43f af7f 	beq.w	82c8 <specan+0x64>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	mode = MODE_IDLE;
    83ca:	4b0a      	ldr	r3, [pc, #40]	; (83f4 <specan+0x190>)
    83cc:	2200      	movs	r2, #0
    83ce:	701a      	strb	r2, [r3, #0]
	RXLED_CLR;
    83d0:	4b09      	ldr	r3, [pc, #36]	; (83f8 <specan+0x194>)
    83d2:	2210      	movs	r2, #16
    83d4:	601a      	str	r2, [r3, #0]
}
    83d6:	3744      	adds	r7, #68	; 0x44
    83d8:	46bd      	mov	sp, r7
    83da:	bd90      	pop	{r4, r7, pc}
    83dc:	2009c038 	.word	0x2009c038
    83e0:	2009c058 	.word	0x2009c058
    83e4:	1000049e 	.word	0x1000049e
    83e8:	10000be4 	.word	0x10000be4
    83ec:	100004a0 	.word	0x100004a0
    83f0:	10000a3f 	.word	0x10000a3f
    83f4:	10000a3e 	.word	0x10000a3e
    83f8:	2009c03c 	.word	0x2009c03c

000083fc <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    83fc:	b580      	push	{r7, lr}
    83fe:	b084      	sub	sp, #16
    8400:	af00      	add	r7, sp, #0
	int8_t lvl;
	u8 i = 0;
    8402:	2300      	movs	r3, #0
    8404:	73fb      	strb	r3, [r7, #15]
	u16 channels[3] = {2412, 2437, 2462};
    8406:	4a5b      	ldr	r2, [pc, #364]	; (8574 <led_specan+0x178>)
    8408:	f107 0308 	add.w	r3, r7, #8
    840c:	6810      	ldr	r0, [r2, #0]
    840e:	6018      	str	r0, [r3, #0]
    8410:	8892      	ldrh	r2, [r2, #4]
    8412:	809a      	strh	r2, [r3, #4]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8414:	4b58      	ldr	r3, [pc, #352]	; (8578 <led_specan+0x17c>)
    8416:	2280      	movs	r2, #128	; 0x80
    8418:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    841a:	2012      	movs	r0, #18
    841c:	f642 3122 	movw	r1, #11042	; 0x2b22
    8420:	f001 ff1e 	bl	a260 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    8424:	2014      	movs	r0, #20
    8426:	f241 314b 	movw	r1, #4939	; 0x134b
    842a:	f001 ff19 	bl	a260 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    842e:	2020      	movs	r0, #32
    8430:	f240 1101 	movw	r1, #257	; 0x101
    8434:	f001 ff14 	bl	a260 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    8438:	2003      	movs	r0, #3
    843a:	2129      	movs	r1, #41	; 0x29
    843c:	f001 ff10 	bl	a260 <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    8440:	2006      	movs	r0, #6
    8442:	21f1      	movs	r1, #241	; 0xf1
    8444:	f001 ff0c 	bl	a260 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    8448:	bf00      	nop
    844a:	f001 ffc1 	bl	a3d0 <cc2400_status>
    844e:	4603      	mov	r3, r0
    8450:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8454:	2b00      	cmp	r3, #0
    8456:	d0f8      	beq.n	844a <led_specan+0x4e>
	while ((cc2400_status() & FS_LOCK));
    8458:	bf00      	nop
    845a:	f001 ffb9 	bl	a3d0 <cc2400_status>
    845e:	4603      	mov	r3, r0
    8460:	f003 0304 	and.w	r3, r3, #4
    8464:	2b00      	cmp	r3, #0
    8466:	d1f8      	bne.n	845a <led_specan+0x5e>

	while (requested_mode == MODE_LED_SPECAN) {
    8468:	e079      	b.n	855e <led_specan+0x162>
		cc2400_set(FSDIV, channels[i] - 1);
    846a:	7bfb      	ldrb	r3, [r7, #15]
    846c:	005b      	lsls	r3, r3, #1
    846e:	f107 0210 	add.w	r2, r7, #16
    8472:	4413      	add	r3, r2
    8474:	f833 3c08 	ldrh.w	r3, [r3, #-8]
    8478:	3b01      	subs	r3, #1
    847a:	b29b      	uxth	r3, r3
    847c:	2002      	movs	r0, #2
    847e:	4619      	mov	r1, r3
    8480:	f001 feee 	bl	a260 <cc2400_set>
		cc2400_strobe(SFSON);
    8484:	2061      	movs	r0, #97	; 0x61
    8486:	f001 ffad 	bl	a3e4 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    848a:	bf00      	nop
    848c:	f001 ffa0 	bl	a3d0 <cc2400_status>
    8490:	4603      	mov	r3, r0
    8492:	f003 0304 	and.w	r3, r3, #4
    8496:	2b00      	cmp	r3, #0
    8498:	d0f8      	beq.n	848c <led_specan+0x90>
		cc2400_strobe(SRX);
    849a:	2062      	movs	r0, #98	; 0x62
    849c:	f001 ffa2 	bl	a3e4 <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    84a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    84a4:	607b      	str	r3, [r7, #4]
    84a6:	bf00      	nop
    84a8:	687b      	ldr	r3, [r7, #4]
    84aa:	3b01      	subs	r3, #1
    84ac:	607b      	str	r3, [r7, #4]
    84ae:	2b00      	cmp	r3, #0
    84b0:	d1fa      	bne.n	84a8 <led_specan+0xac>
		lvl = cc2400_get(RSSI) >> 8;
    84b2:	2006      	movs	r0, #6
    84b4:	f001 febe 	bl	a234 <cc2400_get>
    84b8:	4603      	mov	r3, r0
    84ba:	0a1b      	lsrs	r3, r3, #8
    84bc:	b29b      	uxth	r3, r3
    84be:	73bb      	strb	r3, [r7, #14]
        if (lvl > rssi_threshold) {
    84c0:	4b2e      	ldr	r3, [pc, #184]	; (857c <led_specan+0x180>)
    84c2:	781b      	ldrb	r3, [r3, #0]
    84c4:	b2db      	uxtb	r3, r3
    84c6:	f997 200e 	ldrsb.w	r2, [r7, #14]
    84ca:	b25b      	sxtb	r3, r3
    84cc:	429a      	cmp	r2, r3
    84ce:	dd15      	ble.n	84fc <led_specan+0x100>
            switch (i) {
    84d0:	7bfb      	ldrb	r3, [r7, #15]
    84d2:	2b01      	cmp	r3, #1
    84d4:	d009      	beq.n	84ea <led_specan+0xee>
    84d6:	2b02      	cmp	r3, #2
    84d8:	d00b      	beq.n	84f2 <led_specan+0xf6>
    84da:	2b00      	cmp	r3, #0
    84dc:	d000      	beq.n	84e0 <led_specan+0xe4>
    84de:	e021      	b.n	8524 <led_specan+0x128>
                case 0:
                    TXLED_SET;
    84e0:	4b27      	ldr	r3, [pc, #156]	; (8580 <led_specan+0x184>)
    84e2:	f44f 7280 	mov.w	r2, #256	; 0x100
    84e6:	601a      	str	r2, [r3, #0]
                    break;
    84e8:	e007      	b.n	84fa <led_specan+0xfe>
                case 1:
                    RXLED_SET;
    84ea:	4b25      	ldr	r3, [pc, #148]	; (8580 <led_specan+0x184>)
    84ec:	2210      	movs	r2, #16
    84ee:	601a      	str	r2, [r3, #0]
                    break;
    84f0:	e003      	b.n	84fa <led_specan+0xfe>
                case 2:
                    USRLED_SET;
    84f2:	4b23      	ldr	r3, [pc, #140]	; (8580 <led_specan+0x184>)
    84f4:	2202      	movs	r2, #2
    84f6:	601a      	str	r2, [r3, #0]
                    break;
    84f8:	bf00      	nop
    84fa:	e013      	b.n	8524 <led_specan+0x128>
            }
        }
        else {
            switch (i) {
    84fc:	7bfb      	ldrb	r3, [r7, #15]
    84fe:	2b01      	cmp	r3, #1
    8500:	d008      	beq.n	8514 <led_specan+0x118>
    8502:	2b02      	cmp	r3, #2
    8504:	d00a      	beq.n	851c <led_specan+0x120>
    8506:	2b00      	cmp	r3, #0
    8508:	d10c      	bne.n	8524 <led_specan+0x128>
                case 0:
                    TXLED_CLR;
    850a:	4b1e      	ldr	r3, [pc, #120]	; (8584 <led_specan+0x188>)
    850c:	f44f 7280 	mov.w	r2, #256	; 0x100
    8510:	601a      	str	r2, [r3, #0]
                    break;
    8512:	e007      	b.n	8524 <led_specan+0x128>
                case 1:
                    RXLED_CLR;
    8514:	4b1b      	ldr	r3, [pc, #108]	; (8584 <led_specan+0x188>)
    8516:	2210      	movs	r2, #16
    8518:	601a      	str	r2, [r3, #0]
                    break;
    851a:	e003      	b.n	8524 <led_specan+0x128>
                case 2:
                    USRLED_CLR;
    851c:	4b19      	ldr	r3, [pc, #100]	; (8584 <led_specan+0x188>)
    851e:	2202      	movs	r2, #2
    8520:	601a      	str	r2, [r3, #0]
                    break;
    8522:	bf00      	nop
            }
        }

		i = (i+1) % 3;
    8524:	7bfb      	ldrb	r3, [r7, #15]
    8526:	1c5a      	adds	r2, r3, #1
    8528:	4b17      	ldr	r3, [pc, #92]	; (8588 <led_specan+0x18c>)
    852a:	fb83 3102 	smull	r3, r1, r3, r2
    852e:	17d3      	asrs	r3, r2, #31
    8530:	1ac9      	subs	r1, r1, r3
    8532:	460b      	mov	r3, r1
    8534:	005b      	lsls	r3, r3, #1
    8536:	440b      	add	r3, r1
    8538:	1ad1      	subs	r1, r2, r3
    853a:	460b      	mov	r3, r1
    853c:	73fb      	strb	r3, [r7, #15]

		handle_usb(clkn);
    853e:	4b13      	ldr	r3, [pc, #76]	; (858c <led_specan+0x190>)
    8540:	681b      	ldr	r3, [r3, #0]
    8542:	4618      	mov	r0, r3
    8544:	f000 fcb4 	bl	8eb0 <handle_usb>
        //wait(1);
		cc2400_strobe(SRFOFF);
    8548:	2064      	movs	r0, #100	; 0x64
    854a:	f001 ff4b 	bl	a3e4 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    854e:	bf00      	nop
    8550:	f001 ff3e 	bl	a3d0 <cc2400_status>
    8554:	4603      	mov	r3, r0
    8556:	f003 0304 	and.w	r3, r3, #4
    855a:	2b00      	cmp	r3, #0
    855c:	d1f8      	bne.n	8550 <led_specan+0x154>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols

	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_LED_SPECAN) {
    855e:	4b0c      	ldr	r3, [pc, #48]	; (8590 <led_specan+0x194>)
    8560:	781b      	ldrb	r3, [r3, #0]
    8562:	b2db      	uxtb	r3, r3
    8564:	2b07      	cmp	r3, #7
    8566:	d080      	beq.n	846a <led_specan+0x6e>
		handle_usb(clkn);
        //wait(1);
		cc2400_strobe(SRFOFF);
		while ((cc2400_status() & FS_LOCK));
	}
	mode = MODE_IDLE;
    8568:	4b0a      	ldr	r3, [pc, #40]	; (8594 <led_specan+0x198>)
    856a:	2200      	movs	r2, #0
    856c:	701a      	strb	r2, [r3, #0]
}
    856e:	3710      	adds	r7, #16
    8570:	46bd      	mov	sp, r7
    8572:	bd80      	pop	{r7, pc}
    8574:	0000c858 	.word	0x0000c858
    8578:	2009c058 	.word	0x2009c058
    857c:	100004a2 	.word	0x100004a2
    8580:	2009c038 	.word	0x2009c038
    8584:	2009c03c 	.word	0x2009c03c
    8588:	55555556 	.word	0x55555556
    858c:	10000be4 	.word	0x10000be4
    8590:	10000a3f 	.word	0x10000a3f
    8594:	10000a3e 	.word	0x10000a3e

00008598 <main>:

int main()
{
    8598:	b580      	push	{r7, lr}
    859a:	af00      	add	r7, sp, #0
	ubertooth_init();
    859c:	f001 fd84 	bl	a0a8 <ubertooth_init>
	clkn_init();
    85a0:	f7fc fe8c 	bl	52bc <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    85a4:	484b      	ldr	r0, [pc, #300]	; (86d4 <main+0x13c>)
    85a6:	f000 fbbb 	bl	8d20 <ubertooth_usb_init>

	while (1) {
		handle_usb(clkn);
    85aa:	4b4b      	ldr	r3, [pc, #300]	; (86d8 <main+0x140>)
    85ac:	681b      	ldr	r3, [r3, #0]
    85ae:	4618      	mov	r0, r3
    85b0:	f000 fc7e 	bl	8eb0 <handle_usb>
		if(requested_mode != mode)
    85b4:	4b49      	ldr	r3, [pc, #292]	; (86dc <main+0x144>)
    85b6:	781b      	ldrb	r3, [r3, #0]
    85b8:	b2da      	uxtb	r2, r3
    85ba:	4b49      	ldr	r3, [pc, #292]	; (86e0 <main+0x148>)
    85bc:	781b      	ldrb	r3, [r3, #0]
    85be:	b2db      	uxtb	r3, r3
    85c0:	429a      	cmp	r2, r3
    85c2:	f000 8086 	beq.w	86d2 <main+0x13a>
			switch (requested_mode) {
    85c6:	4b45      	ldr	r3, [pc, #276]	; (86dc <main+0x144>)
    85c8:	781b      	ldrb	r3, [r3, #0]
    85ca:	b2db      	uxtb	r3, r3
    85cc:	2b0f      	cmp	r3, #15
    85ce:	d87f      	bhi.n	86d0 <main+0x138>
    85d0:	a201      	add	r2, pc, #4	; (adr r2, 85d8 <main+0x40>)
    85d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    85d6:	bf00      	nop
    85d8:	000086cb 	.word	0x000086cb
    85dc:	00008625 	.word	0x00008625
    85e0:	000086d1 	.word	0x000086d1
    85e4:	00008667 	.word	0x00008667
    85e8:	000086ab 	.word	0x000086ab
    85ec:	00008677 	.word	0x00008677
    85f0:	0000869d 	.word	0x0000869d
    85f4:	000086b1 	.word	0x000086b1
    85f8:	00008649 	.word	0x00008649
    85fc:	00008655 	.word	0x00008655
    8600:	0000865b 	.word	0x0000865b
    8604:	00008619 	.word	0x00008619
    8608:	00008661 	.word	0x00008661
    860c:	000086b7 	.word	0x000086b7
    8610:	00008631 	.word	0x00008631
    8614:	0000863d 	.word	0x0000863d
				 case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    8618:	2001      	movs	r0, #1
    861a:	f001 fc3d 	bl	9e98 <wait>
					reset();
    861e:	f001 ffeb 	bl	a5f8 <reset>
					break;
    8622:	e056      	b.n	86d2 <main+0x13a>
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    8624:	4b2e      	ldr	r3, [pc, #184]	; (86e0 <main+0x148>)
    8626:	2201      	movs	r2, #1
    8628:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    862a:	f7fe f8d5 	bl	67d8 <bt_stream_rx>
					break;
    862e:	e050      	b.n	86d2 <main+0x13a>
				case MODE_RX_FREQ:
					mode = MODE_RX_FREQ;
    8630:	4b2b      	ldr	r3, [pc, #172]	; (86e0 <main+0x148>)
    8632:	220e      	movs	r2, #14
    8634:	701a      	strb	r2, [r3, #0]
					bt_stream_freq();
    8636:	f7fd ff13 	bl	6460 <bt_stream_freq>
					break;
    863a:	e04a      	b.n	86d2 <main+0x13a>
				case MODE_RX_PROPOSED:
					mode = MODE_RX_PROPOSED;
    863c:	4b28      	ldr	r3, [pc, #160]	; (86e0 <main+0x148>)
    863e:	220f      	movs	r2, #15
    8640:	701a      	strb	r2, [r3, #0]
					bt_stream_proposed();
    8642:	f7fd fde3 	bl	620c <bt_stream_proposed>
					break;
    8646:	e044      	b.n	86d2 <main+0x13a>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    8648:	4b25      	ldr	r3, [pc, #148]	; (86e0 <main+0x148>)
    864a:	2208      	movs	r2, #8
    864c:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    864e:	f7fe f8c3 	bl	67d8 <bt_stream_rx>
					break;
    8652:	e03e      	b.n	86d2 <main+0x13a>
				case MODE_BT_FOLLOW_LE:
					bt_follow_le();
    8654:	f7ff f95c 	bl	7910 <bt_follow_le>
					break;
    8658:	e03b      	b.n	86d2 <main+0x13a>
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    865a:	f7ff fd43 	bl	80e4 <bt_promisc_le>
					break;
    865e:	e038      	b.n	86d2 <main+0x13a>
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
    8660:	f7ff fd84 	bl	816c <bt_slave_le>
					break;
    8664:	e035      	b.n	86d2 <main+0x13a>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    8666:	4b1e      	ldr	r3, [pc, #120]	; (86e0 <main+0x148>)
    8668:	2203      	movs	r2, #3
    866a:	701a      	strb	r2, [r3, #0]
					cc2400_txtest(&modulation, &channel);
    866c:	481d      	ldr	r0, [pc, #116]	; (86e4 <main+0x14c>)
    866e:	491e      	ldr	r1, [pc, #120]	; (86e8 <main+0x150>)
    8670:	f000 ff92 	bl	9598 <cc2400_txtest>
					break;
    8674:	e02d      	b.n	86d2 <main+0x13a>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    8676:	4b1a      	ldr	r3, [pc, #104]	; (86e0 <main+0x148>)
    8678:	2205      	movs	r2, #5
    867a:	701a      	strb	r2, [r3, #0]
					cc2400_rangetest(&channel);
    867c:	481a      	ldr	r0, [pc, #104]	; (86e8 <main+0x150>)
    867e:	f000 fc35 	bl	8eec <cc2400_rangetest>
					mode = MODE_IDLE;
    8682:	4b17      	ldr	r3, [pc, #92]	; (86e0 <main+0x148>)
    8684:	2200      	movs	r2, #0
    8686:	701a      	strb	r2, [r3, #0]
					if (requested_mode == MODE_RANGE_TEST)
    8688:	4b14      	ldr	r3, [pc, #80]	; (86dc <main+0x144>)
    868a:	781b      	ldrb	r3, [r3, #0]
    868c:	b2db      	uxtb	r3, r3
    868e:	2b05      	cmp	r3, #5
    8690:	d103      	bne.n	869a <main+0x102>
						requested_mode = MODE_IDLE;
    8692:	4b12      	ldr	r3, [pc, #72]	; (86dc <main+0x144>)
    8694:	2200      	movs	r2, #0
    8696:	701a      	strb	r2, [r3, #0]
					break;
    8698:	e01b      	b.n	86d2 <main+0x13a>
    869a:	e01a      	b.n	86d2 <main+0x13a>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    869c:	4b10      	ldr	r3, [pc, #64]	; (86e0 <main+0x148>)
    869e:	2206      	movs	r2, #6
    86a0:	701a      	strb	r2, [r3, #0]
					cc2400_repeater(&channel);
    86a2:	4811      	ldr	r0, [pc, #68]	; (86e8 <main+0x150>)
    86a4:	f000 fe40 	bl	9328 <cc2400_repeater>
					break;
    86a8:	e013      	b.n	86d2 <main+0x13a>
				case MODE_SPECAN:
					specan();
    86aa:	f7ff fddb 	bl	8264 <specan>
					break;
    86ae:	e010      	b.n	86d2 <main+0x13a>
				case MODE_LED_SPECAN:
					led_specan();
    86b0:	f7ff fea4 	bl	83fc <led_specan>
					break;
    86b4:	e00d      	b.n	86d2 <main+0x13a>
				case MODE_EGO:
					mode = MODE_EGO;
    86b6:	4b0a      	ldr	r3, [pc, #40]	; (86e0 <main+0x148>)
    86b8:	220d      	movs	r2, #13
    86ba:	701a      	strb	r2, [r3, #0]
					ego_main(ego_mode);
    86bc:	4b0b      	ldr	r3, [pc, #44]	; (86ec <main+0x154>)
    86be:	781b      	ldrb	r3, [r3, #0]
    86c0:	b2db      	uxtb	r3, r3
    86c2:	4618      	mov	r0, r3
    86c4:	f001 fb36 	bl	9d34 <ego_main>
					break;
    86c8:	e003      	b.n	86d2 <main+0x13a>
				case MODE_IDLE:
					cc2400_idle();
    86ca:	f7fd f9d5 	bl	5a78 <cc2400_idle>
					break;
    86ce:	e000      	b.n	86d2 <main+0x13a>
				default:
					/* This is really an error state, but what can you do? */
					break;
    86d0:	bf00      	nop
			}
	}
    86d2:	e76a      	b.n	85aa <main+0x12>
    86d4:	000047ad 	.word	0x000047ad
    86d8:	10000be4 	.word	0x10000be4
    86dc:	10000a3f 	.word	0x10000a3f
    86e0:	10000a3e 	.word	0x10000a3e
    86e4:	10000a42 	.word	0x10000a42
    86e8:	1000049c 	.word	0x1000049c
    86ec:	10000a41 	.word	0x10000a41

000086f0 <perm5>:
	}
}

/* 5 bit permutation */
u8 perm5(u8 z, u8 p_high, u16 p_low)
{
    86f0:	b490      	push	{r4, r7}
    86f2:	b092      	sub	sp, #72	; 0x48
    86f4:	af00      	add	r7, sp, #0
    86f6:	4603      	mov	r3, r0
    86f8:	71fb      	strb	r3, [r7, #7]
    86fa:	460b      	mov	r3, r1
    86fc:	71bb      	strb	r3, [r7, #6]
    86fe:	4613      	mov	r3, r2
    8700:	80bb      	strh	r3, [r7, #4]
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
    8702:	79fb      	ldrb	r3, [r7, #7]
    8704:	f003 031f 	and.w	r3, r3, #31
    8708:	71fb      	strb	r3, [r7, #7]
	p_high &= 0x1f;
    870a:	79bb      	ldrb	r3, [r7, #6]
    870c:	f003 031f 	and.w	r3, r3, #31
    8710:	71bb      	strb	r3, [r7, #6]
	p_low &= 0x1ff;
    8712:	88bb      	ldrh	r3, [r7, #4]
    8714:	f3c3 0308 	ubfx	r3, r3, #0, #9
    8718:	80bb      	strh	r3, [r7, #4]

	int i;
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
    871a:	4a5c      	ldr	r2, [pc, #368]	; (888c <perm5+0x19c>)
    871c:	f107 031c 	add.w	r3, r7, #28
    8720:	4614      	mov	r4, r2
    8722:	6820      	ldr	r0, [r4, #0]
    8724:	6861      	ldr	r1, [r4, #4]
    8726:	68a2      	ldr	r2, [r4, #8]
    8728:	c307      	stmia	r3!, {r0, r1, r2}
    872a:	89a2      	ldrh	r2, [r4, #12]
    872c:	801a      	strh	r2, [r3, #0]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};
    872e:	4a58      	ldr	r2, [pc, #352]	; (8890 <perm5+0x1a0>)
    8730:	f107 030c 	add.w	r3, r7, #12
    8734:	4614      	mov	r4, r2
    8736:	6820      	ldr	r0, [r4, #0]
    8738:	6861      	ldr	r1, [r4, #4]
    873a:	68a2      	ldr	r2, [r4, #8]
    873c:	c307      	stmia	r3!, {r0, r1, r2}
    873e:	89a2      	ldrh	r2, [r4, #12]
    8740:	801a      	strh	r2, [r3, #0]

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    8742:	2300      	movs	r3, #0
    8744:	647b      	str	r3, [r7, #68]	; 0x44
    8746:	e010      	b.n	876a <perm5+0x7a>
		p[i] = (p_low >> i) & 0x01;
    8748:	88ba      	ldrh	r2, [r7, #4]
    874a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    874c:	fa42 f303 	asr.w	r3, r2, r3
    8750:	b2db      	uxtb	r3, r3
    8752:	f003 0301 	and.w	r3, r3, #1
    8756:	b2d9      	uxtb	r1, r3
    8758:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    875c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    875e:	4413      	add	r3, r2
    8760:	460a      	mov	r2, r1
    8762:	701a      	strb	r2, [r3, #0]
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    8764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8766:	3301      	adds	r3, #1
    8768:	647b      	str	r3, [r7, #68]	; 0x44
    876a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    876c:	2b08      	cmp	r3, #8
    876e:	ddeb      	ble.n	8748 <perm5+0x58>
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    8770:	2300      	movs	r3, #0
    8772:	647b      	str	r3, [r7, #68]	; 0x44
    8774:	e011      	b.n	879a <perm5+0xaa>
		p[i+9] = (p_high >> i) & 0x01;
    8776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8778:	3309      	adds	r3, #9
    877a:	79b9      	ldrb	r1, [r7, #6]
    877c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    877e:	fa41 f202 	asr.w	r2, r1, r2
    8782:	b2d2      	uxtb	r2, r2
    8784:	f002 0201 	and.w	r2, r2, #1
    8788:	b2d2      	uxtb	r2, r2
    878a:	f107 0148 	add.w	r1, r7, #72	; 0x48
    878e:	440b      	add	r3, r1
    8790:	f803 2c1c 	strb.w	r2, [r3, #-28]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    8794:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8796:	3301      	adds	r3, #1
    8798:	647b      	str	r3, [r7, #68]	; 0x44
    879a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    879c:	2b04      	cmp	r3, #4
    879e:	ddea      	ble.n	8776 <perm5+0x86>
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    87a0:	2300      	movs	r3, #0
    87a2:	647b      	str	r3, [r7, #68]	; 0x44
    87a4:	e010      	b.n	87c8 <perm5+0xd8>
		z_bit[i] = (z >> i) & 0x01;
    87a6:	79fa      	ldrb	r2, [r7, #7]
    87a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    87aa:	fa42 f303 	asr.w	r3, r2, r3
    87ae:	b2db      	uxtb	r3, r3
    87b0:	f003 0301 	and.w	r3, r3, #1
    87b4:	b2d9      	uxtb	r1, r3
    87b6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    87ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    87bc:	4413      	add	r3, r2
    87be:	460a      	mov	r2, r1
    87c0:	701a      	strb	r2, [r3, #0]
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    87c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    87c4:	3301      	adds	r3, #1
    87c6:	647b      	str	r3, [r7, #68]	; 0x44
    87c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    87ca:	2b04      	cmp	r3, #4
    87cc:	ddeb      	ble.n	87a6 <perm5+0xb6>
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    87ce:	230d      	movs	r3, #13
    87d0:	647b      	str	r3, [r7, #68]	; 0x44
    87d2:	e036      	b.n	8842 <perm5+0x152>
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
    87d4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    87d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    87da:	4413      	add	r3, r2
    87dc:	781b      	ldrb	r3, [r3, #0]
    87de:	2b00      	cmp	r3, #0
    87e0:	d02c      	beq.n	883c <perm5+0x14c>
			tmp = z_bit[index1[i]];
    87e2:	f107 021c 	add.w	r2, r7, #28
    87e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    87e8:	4413      	add	r3, r2
    87ea:	781b      	ldrb	r3, [r3, #0]
    87ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
    87f0:	4413      	add	r3, r2
    87f2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    87f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			z_bit[index1[i]] = z_bit[index2[i]];
    87fa:	f107 021c 	add.w	r2, r7, #28
    87fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8800:	4413      	add	r3, r2
    8802:	781b      	ldrb	r3, [r3, #0]
    8804:	4619      	mov	r1, r3
    8806:	f107 020c 	add.w	r2, r7, #12
    880a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    880c:	4413      	add	r3, r2
    880e:	781b      	ldrb	r3, [r3, #0]
    8810:	f107 0248 	add.w	r2, r7, #72	; 0x48
    8814:	4413      	add	r3, r2
    8816:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
    881a:	f107 0348 	add.w	r3, r7, #72	; 0x48
    881e:	440b      	add	r3, r1
    8820:	f803 2c0c 	strb.w	r2, [r3, #-12]
			z_bit[index2[i]] = tmp;
    8824:	f107 020c 	add.w	r2, r7, #12
    8828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    882a:	4413      	add	r3, r2
    882c:	781b      	ldrb	r3, [r3, #0]
    882e:	f107 0248 	add.w	r2, r7, #72	; 0x48
    8832:	4413      	add	r3, r2
    8834:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
    8838:	f803 2c0c 	strb.w	r2, [r3, #-12]
	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    883c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    883e:	3b01      	subs	r3, #1
    8840:	647b      	str	r3, [r7, #68]	; 0x44
    8842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8844:	2b00      	cmp	r3, #0
    8846:	dac5      	bge.n	87d4 <perm5+0xe4>
			z_bit[index2[i]] = tmp;
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
    8848:	2300      	movs	r3, #0
    884a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	for (i = 0; i < 5; i++)
    884e:	2300      	movs	r3, #0
    8850:	647b      	str	r3, [r7, #68]	; 0x44
    8852:	e011      	b.n	8878 <perm5+0x188>
		output += z_bit[i] << i;
    8854:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    8858:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    885a:	4413      	add	r3, r2
    885c:	781b      	ldrb	r3, [r3, #0]
    885e:	461a      	mov	r2, r3
    8860:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8862:	fa02 f303 	lsl.w	r3, r2, r3
    8866:	b2da      	uxtb	r2, r3
    8868:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    886c:	4413      	add	r3, r2
    886e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    8872:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8874:	3301      	adds	r3, #1
    8876:	647b      	str	r3, [r7, #68]	; 0x44
    8878:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    887a:	2b04      	cmp	r3, #4
    887c:	ddea      	ble.n	8854 <perm5+0x164>
		output += z_bit[i] << i;

	return output;
    887e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
}
    8882:	4618      	mov	r0, r3
    8884:	3748      	adds	r7, #72	; 0x48
    8886:	46bd      	mov	sp, r7
    8888:	bc90      	pop	{r4, r7}
    888a:	4770      	bx	lr
    888c:	0000c860 	.word	0x0000c860
    8890:	0000c870 	.word	0x0000c870

00008894 <next_hop>:

u16 next_hop(u32 clock)
{
    8894:	b580      	push	{r7, lr}
    8896:	b08a      	sub	sp, #40	; 0x28
    8898:	af00      	add	r7, sp, #0
    889a:	6078      	str	r0, [r7, #4]
	u16 d, y2;
	u32 base_f, f, f_dash;

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
    889c:	687b      	ldr	r3, [r7, #4]
    889e:	089b      	lsrs	r3, r3, #2
    88a0:	b2db      	uxtb	r3, r3
    88a2:	f003 031f 	and.w	r3, r3, #31
    88a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	y1 = (clock >> 1) & 0x01;
    88aa:	687b      	ldr	r3, [r7, #4]
    88ac:	085b      	lsrs	r3, r3, #1
    88ae:	b2db      	uxtb	r3, r3
    88b0:	f003 0301 	and.w	r3, r3, #1
    88b4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	y2 = y1 << 5;
    88b8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    88bc:	b29b      	uxth	r3, r3
    88be:	015b      	lsls	r3, r3, #5
    88c0:	847b      	strh	r3, [r7, #34]	; 0x22
	a = (a1 ^ (clock >> 21)) & 0x1f;
    88c2:	687b      	ldr	r3, [r7, #4]
    88c4:	0d5b      	lsrs	r3, r3, #21
    88c6:	b2da      	uxtb	r2, r3
    88c8:	4b4b      	ldr	r3, [pc, #300]	; (89f8 <next_hop+0x164>)
    88ca:	781b      	ldrb	r3, [r3, #0]
    88cc:	4053      	eors	r3, r2
    88ce:	b2db      	uxtb	r3, r3
    88d0:	f003 031f 	and.w	r3, r3, #31
    88d4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    88d8:	687b      	ldr	r3, [r7, #4]
    88da:	0c1b      	lsrs	r3, r3, #16
    88dc:	b2da      	uxtb	r2, r3
    88de:	4b47      	ldr	r3, [pc, #284]	; (89fc <next_hop+0x168>)
    88e0:	781b      	ldrb	r3, [r3, #0]
    88e2:	4053      	eors	r3, r2
    88e4:	b2db      	uxtb	r3, r3
    88e6:	f003 031f 	and.w	r3, r3, #31
    88ea:	f887 3020 	strb.w	r3, [r7, #32]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    88ee:	687b      	ldr	r3, [r7, #4]
    88f0:	09db      	lsrs	r3, r3, #7
    88f2:	b29a      	uxth	r2, r3
    88f4:	4b42      	ldr	r3, [pc, #264]	; (8a00 <next_hop+0x16c>)
    88f6:	881b      	ldrh	r3, [r3, #0]
    88f8:	4053      	eors	r3, r2
    88fa:	b29b      	uxth	r3, r3
    88fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
    8900:	83fb      	strh	r3, [r7, #30]
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    8902:	687b      	ldr	r3, [r7, #4]
    8904:	08db      	lsrs	r3, r3, #3
    8906:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    890a:	f023 030f 	bic.w	r3, r3, #15
    890e:	61bb      	str	r3, [r7, #24]
	f = base_f % 79;
    8910:	69b9      	ldr	r1, [r7, #24]
    8912:	4b3c      	ldr	r3, [pc, #240]	; (8a04 <next_hop+0x170>)
    8914:	fba3 2301 	umull	r2, r3, r3, r1
    8918:	099a      	lsrs	r2, r3, #6
    891a:	4613      	mov	r3, r2
    891c:	009b      	lsls	r3, r3, #2
    891e:	4413      	add	r3, r2
    8920:	011b      	lsls	r3, r3, #4
    8922:	1a9b      	subs	r3, r3, r2
    8924:	1acb      	subs	r3, r1, r3
    8926:	617b      	str	r3, [r7, #20]

	perm = perm5(
    8928:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    892c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    8930:	4413      	add	r3, r2
    8932:	b2db      	uxtb	r3, r3
    8934:	b2db      	uxtb	r3, r3
    8936:	f003 031f 	and.w	r3, r3, #31
    893a:	b2da      	uxtb	r2, r3
    893c:	4b32      	ldr	r3, [pc, #200]	; (8a08 <next_hop+0x174>)
    893e:	781b      	ldrb	r3, [r3, #0]
    8940:	b2db      	uxtb	r3, r3
    8942:	4053      	eors	r3, r2
    8944:	b2db      	uxtb	r3, r3
    8946:	b2d9      	uxtb	r1, r3
    8948:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    894c:	461a      	mov	r2, r3
    894e:	0152      	lsls	r2, r2, #5
    8950:	1ad3      	subs	r3, r2, r3
    8952:	b2db      	uxtb	r3, r3
    8954:	b2da      	uxtb	r2, r3
    8956:	f897 3020 	ldrb.w	r3, [r7, #32]
    895a:	4053      	eors	r3, r2
    895c:	b2db      	uxtb	r3, r3
    895e:	b2da      	uxtb	r2, r3
    8960:	8bfb      	ldrh	r3, [r7, #30]
    8962:	4608      	mov	r0, r1
    8964:	4611      	mov	r1, r2
    8966:	461a      	mov	r2, r3
    8968:	f7ff fec2 	bl	86f0 <perm5>
    896c:	4603      	mov	r3, r0
    896e:	74fb      	strb	r3, [r7, #19]
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % CHANNELS];
    8970:	7cfb      	ldrb	r3, [r7, #19]
    8972:	4a26      	ldr	r2, [pc, #152]	; (8a0c <next_hop+0x178>)
    8974:	7812      	ldrb	r2, [r2, #0]
    8976:	4413      	add	r3, r2
    8978:	461a      	mov	r2, r3
    897a:	697b      	ldr	r3, [r7, #20]
    897c:	441a      	add	r2, r3
    897e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    8980:	18d1      	adds	r1, r2, r3
    8982:	4b20      	ldr	r3, [pc, #128]	; (8a04 <next_hop+0x170>)
    8984:	fba3 2301 	umull	r2, r3, r3, r1
    8988:	099a      	lsrs	r2, r3, #6
    898a:	4613      	mov	r3, r2
    898c:	009b      	lsls	r3, r3, #2
    898e:	4413      	add	r3, r2
    8990:	011b      	lsls	r3, r3, #4
    8992:	1a9b      	subs	r3, r3, r2
    8994:	1aca      	subs	r2, r1, r3
    8996:	4b1e      	ldr	r3, [pc, #120]	; (8a10 <next_hop+0x17c>)
    8998:	5c9b      	ldrb	r3, [r3, r2]
    899a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(afh_enabled) {
    899e:	4b1d      	ldr	r3, [pc, #116]	; (8a14 <next_hop+0x180>)
    89a0:	781b      	ldrb	r3, [r3, #0]
    89a2:	2b00      	cmp	r3, #0
    89a4:	d01d      	beq.n	89e2 <next_hop+0x14e>
		f_dash = base_f % used_channels;
    89a6:	4b1c      	ldr	r3, [pc, #112]	; (8a18 <next_hop+0x184>)
    89a8:	781b      	ldrb	r3, [r3, #0]
    89aa:	461a      	mov	r2, r3
    89ac:	69bb      	ldr	r3, [r7, #24]
    89ae:	fbb3 f1f2 	udiv	r1, r3, r2
    89b2:	fb02 f201 	mul.w	r2, r2, r1
    89b6:	1a9b      	subs	r3, r3, r2
    89b8:	60fb      	str	r3, [r7, #12]
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    89ba:	7cfb      	ldrb	r3, [r7, #19]
    89bc:	4a13      	ldr	r2, [pc, #76]	; (8a0c <next_hop+0x178>)
    89be:	7812      	ldrb	r2, [r2, #0]
    89c0:	4413      	add	r3, r2
    89c2:	461a      	mov	r2, r3
    89c4:	68fb      	ldr	r3, [r7, #12]
    89c6:	441a      	add	r2, r3
    89c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    89ca:	4413      	add	r3, r2
    89cc:	4a12      	ldr	r2, [pc, #72]	; (8a18 <next_hop+0x184>)
    89ce:	7812      	ldrb	r2, [r2, #0]
    89d0:	fbb3 f1f2 	udiv	r1, r3, r2
    89d4:	fb02 f201 	mul.w	r2, r2, r1
    89d8:	1a9b      	subs	r3, r3, r2
    89da:	4a10      	ldr	r2, [pc, #64]	; (8a1c <next_hop+0x188>)
    89dc:	5cd3      	ldrb	r3, [r2, r3]
    89de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return (2402 + next_channel);
    89e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    89e6:	b29b      	uxth	r3, r3
    89e8:	f603 1362 	addw	r3, r3, #2402	; 0x962
    89ec:	b29b      	uxth	r3, r3

}
    89ee:	4618      	mov	r0, r3
    89f0:	3728      	adds	r7, #40	; 0x28
    89f2:	46bd      	mov	sp, r7
    89f4:	bd80      	pop	{r7, pc}
    89f6:	bf00      	nop
    89f8:	1000112b 	.word	0x1000112b
    89fc:	1000112c 	.word	0x1000112c
    8a00:	100010da 	.word	0x100010da
    8a04:	cf6474a9 	.word	0xcf6474a9
    8a08:	100010d8 	.word	0x100010d8
    8a0c:	1000117f 	.word	0x1000117f
    8a10:	10001130 	.word	0x10001130
    8a14:	1000102c 	.word	0x1000102c
    8a18:	100010d9 	.word	0x100010d9
    8a1c:	100010dc 	.word	0x100010dc

00008a20 <btle_next_hop>:

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    8a20:	b580      	push	{r7, lr}
    8a22:	b084      	sub	sp, #16
    8a24:	af00      	add	r7, sp, #0
    8a26:	6078      	str	r0, [r7, #4]
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    8a28:	687b      	ldr	r3, [r7, #4]
    8a2a:	7d5b      	ldrb	r3, [r3, #21]
    8a2c:	4618      	mov	r0, r3
    8a2e:	f000 f84b 	bl	8ac8 <btle_channel_index_to_phys>
    8a32:	4603      	mov	r3, r0
    8a34:	81fb      	strh	r3, [r7, #14]
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    8a36:	687b      	ldr	r3, [r7, #4]
    8a38:	7d5b      	ldrb	r3, [r3, #21]
    8a3a:	461a      	mov	r2, r3
    8a3c:	687b      	ldr	r3, [r7, #4]
    8a3e:	7d9b      	ldrb	r3, [r3, #22]
    8a40:	441a      	add	r2, r3
    8a42:	4b0a      	ldr	r3, [pc, #40]	; (8a6c <btle_next_hop+0x4c>)
    8a44:	fb82 0103 	smull	r0, r1, r2, r3
    8a48:	1853      	adds	r3, r2, r1
    8a4a:	1159      	asrs	r1, r3, #5
    8a4c:	17d3      	asrs	r3, r2, #31
    8a4e:	1ac9      	subs	r1, r1, r3
    8a50:	460b      	mov	r3, r1
    8a52:	00db      	lsls	r3, r3, #3
    8a54:	440b      	add	r3, r1
    8a56:	009b      	lsls	r3, r3, #2
    8a58:	440b      	add	r3, r1
    8a5a:	1ad1      	subs	r1, r2, r3
    8a5c:	b2ca      	uxtb	r2, r1
    8a5e:	687b      	ldr	r3, [r7, #4]
    8a60:	755a      	strb	r2, [r3, #21]
	return phys;
    8a62:	89fb      	ldrh	r3, [r7, #14]
}
    8a64:	4618      	mov	r0, r3
    8a66:	3710      	adds	r7, #16
    8a68:	46bd      	mov	sp, r7
    8a6a:	bd80      	pop	{r7, pc}
    8a6c:	dd67c8a7 	.word	0xdd67c8a7

00008a70 <btle_channel_index>:

u32 received_data = 0;

u8 btle_channel_index(u8 channel) {
    8a70:	b480      	push	{r7}
    8a72:	b085      	sub	sp, #20
    8a74:	af00      	add	r7, sp, #0
    8a76:	4603      	mov	r3, r0
    8a78:	71fb      	strb	r3, [r7, #7]
	u8 idx;
	channel /= 2;
    8a7a:	79fb      	ldrb	r3, [r7, #7]
    8a7c:	085b      	lsrs	r3, r3, #1
    8a7e:	71fb      	strb	r3, [r7, #7]
	if (channel == 0)
    8a80:	79fb      	ldrb	r3, [r7, #7]
    8a82:	2b00      	cmp	r3, #0
    8a84:	d102      	bne.n	8a8c <btle_channel_index+0x1c>
		idx = 37;
    8a86:	2325      	movs	r3, #37	; 0x25
    8a88:	73fb      	strb	r3, [r7, #15]
    8a8a:	e015      	b.n	8ab8 <btle_channel_index+0x48>
	else if (channel < 12)
    8a8c:	79fb      	ldrb	r3, [r7, #7]
    8a8e:	2b0b      	cmp	r3, #11
    8a90:	d803      	bhi.n	8a9a <btle_channel_index+0x2a>
		idx = channel - 1;
    8a92:	79fb      	ldrb	r3, [r7, #7]
    8a94:	3b01      	subs	r3, #1
    8a96:	73fb      	strb	r3, [r7, #15]
    8a98:	e00e      	b.n	8ab8 <btle_channel_index+0x48>
	else if (channel == 12)
    8a9a:	79fb      	ldrb	r3, [r7, #7]
    8a9c:	2b0c      	cmp	r3, #12
    8a9e:	d102      	bne.n	8aa6 <btle_channel_index+0x36>
		idx = 38;
    8aa0:	2326      	movs	r3, #38	; 0x26
    8aa2:	73fb      	strb	r3, [r7, #15]
    8aa4:	e008      	b.n	8ab8 <btle_channel_index+0x48>
	else if (channel < 39)
    8aa6:	79fb      	ldrb	r3, [r7, #7]
    8aa8:	2b26      	cmp	r3, #38	; 0x26
    8aaa:	d803      	bhi.n	8ab4 <btle_channel_index+0x44>
		idx = channel - 2;
    8aac:	79fb      	ldrb	r3, [r7, #7]
    8aae:	3b02      	subs	r3, #2
    8ab0:	73fb      	strb	r3, [r7, #15]
    8ab2:	e001      	b.n	8ab8 <btle_channel_index+0x48>
	else
		idx = 39;
    8ab4:	2327      	movs	r3, #39	; 0x27
    8ab6:	73fb      	strb	r3, [r7, #15]
	return idx;
    8ab8:	7bfb      	ldrb	r3, [r7, #15]
}
    8aba:	4618      	mov	r0, r3
    8abc:	3714      	adds	r7, #20
    8abe:	46bd      	mov	sp, r7
    8ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ac4:	4770      	bx	lr
    8ac6:	bf00      	nop

00008ac8 <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
    8ac8:	b480      	push	{r7}
    8aca:	b085      	sub	sp, #20
    8acc:	af00      	add	r7, sp, #0
    8ace:	4603      	mov	r3, r0
    8ad0:	71fb      	strb	r3, [r7, #7]
	u16 phys;
	if (idx < 11)
    8ad2:	79fb      	ldrb	r3, [r7, #7]
    8ad4:	2b0a      	cmp	r3, #10
    8ad6:	d806      	bhi.n	8ae6 <btle_channel_index_to_phys+0x1e>
		phys = 2404 + 2 * idx;
    8ad8:	79fb      	ldrb	r3, [r7, #7]
    8ada:	f203 43b2 	addw	r3, r3, #1202	; 0x4b2
    8ade:	b29b      	uxth	r3, r3
    8ae0:	005b      	lsls	r3, r3, #1
    8ae2:	81fb      	strh	r3, [r7, #14]
    8ae4:	e01a      	b.n	8b1c <btle_channel_index_to_phys+0x54>
	else if (idx < 37)
    8ae6:	79fb      	ldrb	r3, [r7, #7]
    8ae8:	2b24      	cmp	r3, #36	; 0x24
    8aea:	d806      	bhi.n	8afa <btle_channel_index_to_phys+0x32>
		phys = 2428 + 2 * (idx - 11);
    8aec:	79fb      	ldrb	r3, [r7, #7]
    8aee:	f203 43b3 	addw	r3, r3, #1203	; 0x4b3
    8af2:	b29b      	uxth	r3, r3
    8af4:	005b      	lsls	r3, r3, #1
    8af6:	81fb      	strh	r3, [r7, #14]
    8af8:	e010      	b.n	8b1c <btle_channel_index_to_phys+0x54>
	else if (idx == 37)
    8afa:	79fb      	ldrb	r3, [r7, #7]
    8afc:	2b25      	cmp	r3, #37	; 0x25
    8afe:	d103      	bne.n	8b08 <btle_channel_index_to_phys+0x40>
		phys = 2402;
    8b00:	f640 1362 	movw	r3, #2402	; 0x962
    8b04:	81fb      	strh	r3, [r7, #14]
    8b06:	e009      	b.n	8b1c <btle_channel_index_to_phys+0x54>
	else if (idx == 38)
    8b08:	79fb      	ldrb	r3, [r7, #7]
    8b0a:	2b26      	cmp	r3, #38	; 0x26
    8b0c:	d103      	bne.n	8b16 <btle_channel_index_to_phys+0x4e>
		phys = 2426;
    8b0e:	f640 137a 	movw	r3, #2426	; 0x97a
    8b12:	81fb      	strh	r3, [r7, #14]
    8b14:	e002      	b.n	8b1c <btle_channel_index_to_phys+0x54>
	else
		phys = 2480;
    8b16:	f44f 631b 	mov.w	r3, #2480	; 0x9b0
    8b1a:	81fb      	strh	r3, [r7, #14]
	return phys;
    8b1c:	89fb      	ldrh	r3, [r7, #14]
}
    8b1e:	4618      	mov	r0, r3
    8b20:	3714      	adds	r7, #20
    8b22:	46bd      	mov	sp, r7
    8b24:	f85d 7b04 	ldr.w	r7, [sp], #4
    8b28:	4770      	bx	lr
    8b2a:	bf00      	nop

00008b2c <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    8b2c:	b480      	push	{r7}
    8b2e:	b08b      	sub	sp, #44	; 0x2c
    8b30:	af00      	add	r7, sp, #0
    8b32:	60f8      	str	r0, [r7, #12]
    8b34:	60b9      	str	r1, [r7, #8]
    8b36:	607a      	str	r2, [r7, #4]
	u32 state = crc_init & 0xffffff;
    8b38:	68fb      	ldr	r3, [r7, #12]
    8b3a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8b3e:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
    8b40:	4b1b      	ldr	r3, [pc, #108]	; (8bb0 <btle_calc_crc+0x84>)
    8b42:	617b      	str	r3, [r7, #20]
	int i, j;

	for (i = 0; i < len; ++i) {
    8b44:	2300      	movs	r3, #0
    8b46:	623b      	str	r3, [r7, #32]
    8b48:	e027      	b.n	8b9a <btle_calc_crc+0x6e>
		u8 cur = data[i];
    8b4a:	6a3b      	ldr	r3, [r7, #32]
    8b4c:	68ba      	ldr	r2, [r7, #8]
    8b4e:	4413      	add	r3, r2
    8b50:	781b      	ldrb	r3, [r3, #0]
    8b52:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    8b54:	2300      	movs	r3, #0
    8b56:	61fb      	str	r3, [r7, #28]
    8b58:	e019      	b.n	8b8e <btle_calc_crc+0x62>
			int next_bit = (state ^ cur) & 1;
    8b5a:	7efa      	ldrb	r2, [r7, #27]
    8b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8b5e:	4053      	eors	r3, r2
    8b60:	f003 0301 	and.w	r3, r3, #1
    8b64:	613b      	str	r3, [r7, #16]
			cur >>= 1;
    8b66:	7efb      	ldrb	r3, [r7, #27]
    8b68:	085b      	lsrs	r3, r3, #1
    8b6a:	76fb      	strb	r3, [r7, #27]
			state >>= 1;
    8b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8b6e:	085b      	lsrs	r3, r3, #1
    8b70:	627b      	str	r3, [r7, #36]	; 0x24
			if (next_bit) {
    8b72:	693b      	ldr	r3, [r7, #16]
    8b74:	2b00      	cmp	r3, #0
    8b76:	d007      	beq.n	8b88 <btle_calc_crc+0x5c>
				state |= 1 << 23;
    8b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8b7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    8b7e:	627b      	str	r3, [r7, #36]	; 0x24
				state ^= lfsr_mask;
    8b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    8b82:	697b      	ldr	r3, [r7, #20]
    8b84:	4053      	eors	r3, r2
    8b86:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    8b88:	69fb      	ldr	r3, [r7, #28]
    8b8a:	3301      	adds	r3, #1
    8b8c:	61fb      	str	r3, [r7, #28]
    8b8e:	69fb      	ldr	r3, [r7, #28]
    8b90:	2b07      	cmp	r3, #7
    8b92:	dde2      	ble.n	8b5a <btle_calc_crc+0x2e>
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    8b94:	6a3b      	ldr	r3, [r7, #32]
    8b96:	3301      	adds	r3, #1
    8b98:	623b      	str	r3, [r7, #32]
    8b9a:	6a3a      	ldr	r2, [r7, #32]
    8b9c:	687b      	ldr	r3, [r7, #4]
    8b9e:	429a      	cmp	r2, r3
    8ba0:	dbd3      	blt.n	8b4a <btle_calc_crc+0x1e>
				state ^= lfsr_mask;
			}
		}
	}

	return state;
    8ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    8ba4:	4618      	mov	r0, r3
    8ba6:	372c      	adds	r7, #44	; 0x2c
    8ba8:	46bd      	mov	sp, r7
    8baa:	f85d 7b04 	ldr.w	r7, [sp], #4
    8bae:	4770      	bx	lr
    8bb0:	005a6000 	.word	0x005a6000

00008bb4 <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    8bb4:	b480      	push	{r7}
    8bb6:	b08d      	sub	sp, #52	; 0x34
    8bb8:	af00      	add	r7, sp, #0
    8bba:	60f8      	str	r0, [r7, #12]
    8bbc:	60b9      	str	r1, [r7, #8]
    8bbe:	607a      	str	r2, [r7, #4]
	u32 state = crc;
    8bc0:	68fb      	ldr	r3, [r7, #12]
    8bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
    8bc4:	4b2b      	ldr	r3, [pc, #172]	; (8c74 <btle_reverse_crc+0xc0>)
    8bc6:	61fb      	str	r3, [r7, #28]
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    8bc8:	687b      	ldr	r3, [r7, #4]
    8bca:	3b01      	subs	r3, #1
    8bcc:	627b      	str	r3, [r7, #36]	; 0x24
    8bce:	e02d      	b.n	8c2c <btle_reverse_crc+0x78>
		u8 cur = data[i];
    8bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8bd2:	68ba      	ldr	r2, [r7, #8]
    8bd4:	4413      	add	r3, r2
    8bd6:	781b      	ldrb	r3, [r3, #0]
    8bd8:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    8bda:	2300      	movs	r3, #0
    8bdc:	623b      	str	r3, [r7, #32]
    8bde:	e01f      	b.n	8c20 <btle_reverse_crc+0x6c>
			int top_bit = state >> 23;
    8be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8be2:	0ddb      	lsrs	r3, r3, #23
    8be4:	617b      	str	r3, [r7, #20]
			state = (state << 1) & 0xffffff;
    8be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8be8:	005b      	lsls	r3, r3, #1
    8bea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8bee:	62fb      	str	r3, [r7, #44]	; 0x2c
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    8bf0:	7efa      	ldrb	r2, [r7, #27]
    8bf2:	6a3b      	ldr	r3, [r7, #32]
    8bf4:	f1c3 0307 	rsb	r3, r3, #7
    8bf8:	fa42 f303 	asr.w	r3, r2, r3
    8bfc:	f003 0201 	and.w	r2, r3, #1
    8c00:	697b      	ldr	r3, [r7, #20]
    8c02:	4053      	eors	r3, r2
    8c04:	461a      	mov	r2, r3
    8c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8c08:	4313      	orrs	r3, r2
    8c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (top_bit)
    8c0c:	697b      	ldr	r3, [r7, #20]
    8c0e:	2b00      	cmp	r3, #0
    8c10:	d003      	beq.n	8c1a <btle_reverse_crc+0x66>
				state ^= lfsr_mask;
    8c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8c14:	69fb      	ldr	r3, [r7, #28]
    8c16:	4053      	eors	r3, r2
    8c18:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    8c1a:	6a3b      	ldr	r3, [r7, #32]
    8c1c:	3301      	adds	r3, #1
    8c1e:	623b      	str	r3, [r7, #32]
    8c20:	6a3b      	ldr	r3, [r7, #32]
    8c22:	2b07      	cmp	r3, #7
    8c24:	dddc      	ble.n	8be0 <btle_reverse_crc+0x2c>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    8c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8c28:	3b01      	subs	r3, #1
    8c2a:	627b      	str	r3, [r7, #36]	; 0x24
    8c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8c2e:	2b00      	cmp	r3, #0
    8c30:	dace      	bge.n	8bd0 <btle_reverse_crc+0x1c>
			if (top_bit)
				state ^= lfsr_mask;
		}
	}

	ret = 0;
    8c32:	2300      	movs	r3, #0
    8c34:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < 24; ++i)
    8c36:	2300      	movs	r3, #0
    8c38:	627b      	str	r3, [r7, #36]	; 0x24
    8c3a:	e010      	b.n	8c5e <btle_reverse_crc+0xaa>
		ret |= ((state >> i) & 1) << (23 - i);
    8c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8c40:	fa22 f303 	lsr.w	r3, r2, r3
    8c44:	f003 0201 	and.w	r2, r3, #1
    8c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8c4a:	f1c3 0317 	rsb	r3, r3, #23
    8c4e:	fa02 f303 	lsl.w	r3, r2, r3
    8c52:	6aba      	ldr	r2, [r7, #40]	; 0x28
    8c54:	4313      	orrs	r3, r2
    8c56:	62bb      	str	r3, [r7, #40]	; 0x28
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    8c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8c5a:	3301      	adds	r3, #1
    8c5c:	627b      	str	r3, [r7, #36]	; 0x24
    8c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8c60:	2b17      	cmp	r3, #23
    8c62:	ddeb      	ble.n	8c3c <btle_reverse_crc+0x88>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
    8c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    8c66:	4618      	mov	r0, r3
    8c68:	3734      	adds	r7, #52	; 0x34
    8c6a:	46bd      	mov	sp, r7
    8c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
    8c70:	4770      	bx	lr
    8c72:	bf00      	nop
    8c74:	00b4c000 	.word	0x00b4c000

00008c78 <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    8c78:	b480      	push	{r7}
    8c7a:	b089      	sub	sp, #36	; 0x24
    8c7c:	af00      	add	r7, sp, #0
    8c7e:	60f8      	str	r0, [r7, #12]
    8c80:	60b9      	str	r1, [r7, #8]
    8c82:	607a      	str	r2, [r7, #4]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    8c84:	68fb      	ldr	r3, [r7, #12]
    8c86:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    8c8a:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < len; ++i) {
    8c8c:	2300      	movs	r3, #0
    8c8e:	61bb      	str	r3, [r7, #24]
    8c90:	e012      	b.n	8cb8 <btle_crcgen_lut+0x40>
		key = data[i] ^ (state & 0xff);
    8c92:	69bb      	ldr	r3, [r7, #24]
    8c94:	68ba      	ldr	r2, [r7, #8]
    8c96:	4413      	add	r3, r2
    8c98:	781a      	ldrb	r2, [r3, #0]
    8c9a:	69fb      	ldr	r3, [r7, #28]
    8c9c:	b2db      	uxtb	r3, r3
    8c9e:	4053      	eors	r3, r2
    8ca0:	75fb      	strb	r3, [r7, #23]
		state = (state >> 8) ^ btle_crc_lut[key];
    8ca2:	69fb      	ldr	r3, [r7, #28]
    8ca4:	0a1a      	lsrs	r2, r3, #8
    8ca6:	7dfb      	ldrb	r3, [r7, #23]
    8ca8:	4909      	ldr	r1, [pc, #36]	; (8cd0 <btle_crcgen_lut+0x58>)
    8caa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    8cae:	4053      	eors	r3, r2
    8cb0:	61fb      	str	r3, [r7, #28]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    8cb2:	69bb      	ldr	r3, [r7, #24]
    8cb4:	3301      	adds	r3, #1
    8cb6:	61bb      	str	r3, [r7, #24]
    8cb8:	69ba      	ldr	r2, [r7, #24]
    8cba:	687b      	ldr	r3, [r7, #4]
    8cbc:	429a      	cmp	r2, r3
    8cbe:	dbe8      	blt.n	8c92 <btle_crcgen_lut+0x1a>
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
	}
	return state;
    8cc0:	69fb      	ldr	r3, [r7, #28]
}
    8cc2:	4618      	mov	r0, r3
    8cc4:	3724      	adds	r7, #36	; 0x24
    8cc6:	46bd      	mov	sp, r7
    8cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ccc:	4770      	bx	lr
    8cce:	bf00      	nop
    8cd0:	100004a8 	.word	0x100004a8

00008cd4 <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    8cd4:	b590      	push	{r4, r7, lr}
    8cd6:	b087      	sub	sp, #28
    8cd8:	af00      	add	r7, sp, #0
    8cda:	60f8      	str	r0, [r7, #12]
    8cdc:	60b9      	str	r1, [r7, #8]
    8cde:	607a      	str	r2, [r7, #4]
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    8ce0:	68fb      	ldr	r3, [r7, #12]
    8ce2:	885b      	ldrh	r3, [r3, #2]
    8ce4:	823b      	strh	r3, [r7, #16]
    8ce6:	68fb      	ldr	r3, [r7, #12]
    8ce8:	889b      	ldrh	r3, [r3, #4]
    8cea:	827b      	strh	r3, [r7, #18]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    8cec:	4b0b      	ldr	r3, [pc, #44]	; (8d1c <usb_vendor_request_handler+0x48>)
    8cee:	681c      	ldr	r4, [r3, #0]
    8cf0:	68fb      	ldr	r3, [r7, #12]
    8cf2:	7859      	ldrb	r1, [r3, #1]
    8cf4:	687b      	ldr	r3, [r7, #4]
    8cf6:	681b      	ldr	r3, [r3, #0]
    8cf8:	f107 0210 	add.w	r2, r7, #16
    8cfc:	4608      	mov	r0, r1
    8cfe:	4611      	mov	r1, r2
    8d00:	461a      	mov	r2, r3
    8d02:	68bb      	ldr	r3, [r7, #8]
    8d04:	47a0      	blx	r4
    8d06:	6178      	str	r0, [r7, #20]
	return (BOOL) (rv==1);
    8d08:	697b      	ldr	r3, [r7, #20]
    8d0a:	2b01      	cmp	r3, #1
    8d0c:	bf0c      	ite	eq
    8d0e:	2301      	moveq	r3, #1
    8d10:	2300      	movne	r3, #0
    8d12:	b2db      	uxtb	r3, r3
}
    8d14:	4618      	mov	r0, r3
    8d16:	371c      	adds	r7, #28
    8d18:	46bd      	mov	sp, r7
    8d1a:	bd90      	pop	{r4, r7, pc}
    8d1c:	10003284 	.word	0x10003284

00008d20 <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    8d20:	b580      	push	{r7, lr}
    8d22:	b082      	sub	sp, #8
    8d24:	af00      	add	r7, sp, #0
    8d26:	6078      	str	r0, [r7, #4]
	// initialise stack
	USBInit();
    8d28:	f001 fdcc 	bl	a8c4 <USBInit>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    8d2c:	480b      	ldr	r0, [pc, #44]	; (8d5c <ubertooth_usb_init+0x3c>)
    8d2e:	f002 fa2b 	bl	b188 <USBRegisterDescriptors>

	// Request handler 
	v_req_handler = vendor_req_handler;
    8d32:	4a0b      	ldr	r2, [pc, #44]	; (8d60 <ubertooth_usb_init+0x40>)
    8d34:	687b      	ldr	r3, [r7, #4]
    8d36:	6013      	str	r3, [r2, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    8d38:	2002      	movs	r0, #2
    8d3a:	490a      	ldr	r1, [pc, #40]	; (8d64 <ubertooth_usb_init+0x44>)
    8d3c:	4a0a      	ldr	r2, [pc, #40]	; (8d68 <ubertooth_usb_init+0x48>)
    8d3e:	f001 fd9d 	bl	a87c <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    8d42:	20ff      	movs	r0, #255	; 0xff
    8d44:	4909      	ldr	r1, [pc, #36]	; (8d6c <ubertooth_usb_init+0x4c>)
    8d46:	f002 f9c9 	bl	b0dc <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    8d4a:	2001      	movs	r0, #1
    8d4c:	f001 fefc 	bl	ab48 <USBHwConnect>

	return 0;
    8d50:	2300      	movs	r3, #0
}
    8d52:	4618      	mov	r0, r3
    8d54:	3708      	adds	r7, #8
    8d56:	46bd      	mov	sp, r7
    8d58:	bd80      	pop	{r7, pc}
    8d5a:	bf00      	nop
    8d5c:	0000c880 	.word	0x0000c880
    8d60:	10003284 	.word	0x10003284
    8d64:	00008cd5 	.word	0x00008cd5
    8d68:	10003180 	.word	0x10003180
    8d6c:	0000c944 	.word	0x0000c944

00008d70 <queue_init>:

volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init()
{
    8d70:	b480      	push	{r7}
    8d72:	af00      	add	r7, sp, #0
	head = 0;
    8d74:	4b04      	ldr	r3, [pc, #16]	; (8d88 <queue_init+0x18>)
    8d76:	2200      	movs	r2, #0
    8d78:	601a      	str	r2, [r3, #0]
	tail = 0;
    8d7a:	4b04      	ldr	r3, [pc, #16]	; (8d8c <queue_init+0x1c>)
    8d7c:	2200      	movs	r2, #0
    8d7e:	601a      	str	r2, [r3, #0]
}
    8d80:	46bd      	mov	sp, r7
    8d82:	f85d 7b04 	ldr.w	r7, [sp], #4
    8d86:	4770      	bx	lr
    8d88:	10000a5c 	.word	0x10000a5c
    8d8c:	10000a60 	.word	0x10000a60

00008d90 <usb_enqueue>:

usb_pkt_rx *usb_enqueue()
{
    8d90:	b480      	push	{r7}
    8d92:	b083      	sub	sp, #12
    8d94:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    8d96:	4b13      	ldr	r3, [pc, #76]	; (8de4 <usb_enqueue+0x54>)
    8d98:	681b      	ldr	r3, [r3, #0]
    8d9a:	b2db      	uxtb	r3, r3
    8d9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8da0:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    8da2:	4b11      	ldr	r3, [pc, #68]	; (8de8 <usb_enqueue+0x58>)
    8da4:	681b      	ldr	r3, [r3, #0]
    8da6:	b2db      	uxtb	r3, r3
    8da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8dac:	71bb      	strb	r3, [r7, #6]
	u8 n = (t + 1) & 0x7F;
    8dae:	79bb      	ldrb	r3, [r7, #6]
    8db0:	3301      	adds	r3, #1
    8db2:	b2db      	uxtb	r3, r3
    8db4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8db8:	717b      	strb	r3, [r7, #5]

	/* fail if queue is full */
	if (h == n) {
    8dba:	79fa      	ldrb	r2, [r7, #7]
    8dbc:	797b      	ldrb	r3, [r7, #5]
    8dbe:	429a      	cmp	r2, r3
    8dc0:	d101      	bne.n	8dc6 <usb_enqueue+0x36>
		return NULL;
    8dc2:	2300      	movs	r3, #0
    8dc4:	e008      	b.n	8dd8 <usb_enqueue+0x48>
	}

	++tail;
    8dc6:	4b08      	ldr	r3, [pc, #32]	; (8de8 <usb_enqueue+0x58>)
    8dc8:	681b      	ldr	r3, [r3, #0]
    8dca:	3301      	adds	r3, #1
    8dcc:	4a06      	ldr	r2, [pc, #24]	; (8de8 <usb_enqueue+0x58>)
    8dce:	6013      	str	r3, [r2, #0]
	return &fifo[t];
    8dd0:	79bb      	ldrb	r3, [r7, #6]
    8dd2:	019b      	lsls	r3, r3, #6
    8dd4:	4a05      	ldr	r2, [pc, #20]	; (8dec <usb_enqueue+0x5c>)
    8dd6:	4413      	add	r3, r2
	
}
    8dd8:	4618      	mov	r0, r3
    8dda:	370c      	adds	r7, #12
    8ddc:	46bd      	mov	sp, r7
    8dde:	f85d 7b04 	ldr.w	r7, [sp], #4
    8de2:	4770      	bx	lr
    8de4:	10000a5c 	.word	0x10000a5c
    8de8:	10000a60 	.word	0x10000a60
    8dec:	10001180 	.word	0x10001180

00008df0 <dequeue>:

usb_pkt_rx *dequeue()
{
    8df0:	b480      	push	{r7}
    8df2:	b083      	sub	sp, #12
    8df4:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    8df6:	4b10      	ldr	r3, [pc, #64]	; (8e38 <dequeue+0x48>)
    8df8:	681b      	ldr	r3, [r3, #0]
    8dfa:	b2db      	uxtb	r3, r3
    8dfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8e00:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    8e02:	4b0e      	ldr	r3, [pc, #56]	; (8e3c <dequeue+0x4c>)
    8e04:	681b      	ldr	r3, [r3, #0]
    8e06:	b2db      	uxtb	r3, r3
    8e08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8e0c:	71bb      	strb	r3, [r7, #6]

	/* fail if queue is empty */
	if (h == t) {
    8e0e:	79fa      	ldrb	r2, [r7, #7]
    8e10:	79bb      	ldrb	r3, [r7, #6]
    8e12:	429a      	cmp	r2, r3
    8e14:	d101      	bne.n	8e1a <dequeue+0x2a>
		return NULL;
    8e16:	2300      	movs	r3, #0
    8e18:	e008      	b.n	8e2c <dequeue+0x3c>
	}

	++head;
    8e1a:	4b07      	ldr	r3, [pc, #28]	; (8e38 <dequeue+0x48>)
    8e1c:	681b      	ldr	r3, [r3, #0]
    8e1e:	3301      	adds	r3, #1
    8e20:	4a05      	ldr	r2, [pc, #20]	; (8e38 <dequeue+0x48>)
    8e22:	6013      	str	r3, [r2, #0]
	return &fifo[h];
    8e24:	79fb      	ldrb	r3, [r7, #7]
    8e26:	019b      	lsls	r3, r3, #6
    8e28:	4a05      	ldr	r2, [pc, #20]	; (8e40 <dequeue+0x50>)
    8e2a:	4413      	add	r3, r2
}
    8e2c:	4618      	mov	r0, r3
    8e2e:	370c      	adds	r7, #12
    8e30:	46bd      	mov	sp, r7
    8e32:	f85d 7b04 	ldr.w	r7, [sp], #4
    8e36:	4770      	bx	lr
    8e38:	10000a5c 	.word	0x10000a5c
    8e3c:	10000a60 	.word	0x10000a60
    8e40:	10001180 	.word	0x10001180

00008e44 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    8e44:	b580      	push	{r7, lr}
    8e46:	b084      	sub	sp, #16
    8e48:	af00      	add	r7, sp, #0
    8e4a:	6078      	str	r0, [r7, #4]
	usb_pkt_rx *pkt = dequeue(&pkt);
    8e4c:	f107 030c 	add.w	r3, r7, #12
    8e50:	4618      	mov	r0, r3
    8e52:	f7ff ffcd 	bl	8df0 <dequeue>
    8e56:	4603      	mov	r3, r0
    8e58:	60fb      	str	r3, [r7, #12]
	if (pkt != NULL) {
    8e5a:	68fb      	ldr	r3, [r7, #12]
    8e5c:	2b00      	cmp	r3, #0
    8e5e:	d00a      	beq.n	8e76 <dequeue_send+0x32>
		last_usb_pkt = clkn;
    8e60:	4a11      	ldr	r2, [pc, #68]	; (8ea8 <dequeue_send+0x64>)
    8e62:	687b      	ldr	r3, [r7, #4]
    8e64:	6013      	str	r3, [r2, #0]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    8e66:	68fb      	ldr	r3, [r7, #12]
    8e68:	2082      	movs	r0, #130	; 0x82
    8e6a:	4619      	mov	r1, r3
    8e6c:	2240      	movs	r2, #64	; 0x40
    8e6e:	f001 fec7 	bl	ac00 <USBHwEPWrite>
		return 1;
    8e72:	2301      	movs	r3, #1
    8e74:	e013      	b.n	8e9e <dequeue_send+0x5a>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    8e76:	4b0c      	ldr	r3, [pc, #48]	; (8ea8 <dequeue_send+0x64>)
    8e78:	681b      	ldr	r3, [r3, #0]
    8e7a:	687a      	ldr	r2, [r7, #4]
    8e7c:	1ad3      	subs	r3, r2, r3
    8e7e:	4a0b      	ldr	r2, [pc, #44]	; (8eac <dequeue_send+0x68>)
    8e80:	4293      	cmp	r3, r2
    8e82:	d90b      	bls.n	8e9c <dequeue_send+0x58>
			u8 pkt_type = KEEP_ALIVE;
    8e84:	2303      	movs	r3, #3
    8e86:	72fb      	strb	r3, [r7, #11]
			last_usb_pkt = clkn;
    8e88:	4a07      	ldr	r2, [pc, #28]	; (8ea8 <dequeue_send+0x64>)
    8e8a:	687b      	ldr	r3, [r7, #4]
    8e8c:	6013      	str	r3, [r2, #0]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    8e8e:	f107 030b 	add.w	r3, r7, #11
    8e92:	2082      	movs	r0, #130	; 0x82
    8e94:	4619      	mov	r1, r3
    8e96:	2201      	movs	r2, #1
    8e98:	f001 feb2 	bl	ac00 <USBHwEPWrite>
		}
		return 0;
    8e9c:	2300      	movs	r3, #0
	}
}
    8e9e:	4618      	mov	r0, r3
    8ea0:	3710      	adds	r7, #16
    8ea2:	46bd      	mov	sp, r7
    8ea4:	bd80      	pop	{r7, pc}
    8ea6:	bf00      	nop
    8ea8:	10000a64 	.word	0x10000a64
    8eac:	00061a80 	.word	0x00061a80

00008eb0 <handle_usb>:

void handle_usb(u32 clkn)
{
    8eb0:	b580      	push	{r7, lr}
    8eb2:	b084      	sub	sp, #16
    8eb4:	af00      	add	r7, sp, #0
    8eb6:	6078      	str	r0, [r7, #4]
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    8eb8:	2082      	movs	r0, #130	; 0x82
    8eba:	f001 fe65 	bl	ab88 <USBHwEPGetStatus>
    8ebe:	4603      	mov	r3, r0
    8ec0:	73fb      	strb	r3, [r7, #15]
	if (!(epstat & EPSTAT_B1FULL)) {
    8ec2:	7bfb      	ldrb	r3, [r7, #15]
    8ec4:	f003 0320 	and.w	r3, r3, #32
    8ec8:	2b00      	cmp	r3, #0
    8eca:	d102      	bne.n	8ed2 <handle_usb+0x22>
		dequeue_send(clkn);
    8ecc:	6878      	ldr	r0, [r7, #4]
    8ece:	f7ff ffb9 	bl	8e44 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    8ed2:	7bfb      	ldrb	r3, [r7, #15]
    8ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8ed8:	2b00      	cmp	r3, #0
    8eda:	d102      	bne.n	8ee2 <handle_usb+0x32>
		dequeue_send(clkn);
    8edc:	6878      	ldr	r0, [r7, #4]
    8ede:	f7ff ffb1 	bl	8e44 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
    8ee2:	f001 ff53 	bl	ad8c <USBHwISR>
}
    8ee6:	3710      	adds	r7, #16
    8ee8:	46bd      	mov	sp, r7
    8eea:	bd80      	pop	{r7, pc}

00008eec <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    8eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8ef0:	b095      	sub	sp, #84	; 0x54
    8ef2:	af00      	add	r7, sp, #0
    8ef4:	6078      	str	r0, [r7, #4]
    8ef6:	4669      	mov	r1, sp
    8ef8:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u32 command[5];
	u32 result[5];
	int i;
	int j;
	u8 len = 22;
    8efa:	2116      	movs	r1, #22
    8efc:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
	u8 pa = 0;
    8f00:	2100      	movs	r1, #0
    8f02:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
	u8 txbuf[len];
    8f06:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    8f0a:	4631      	mov	r1, r6
    8f0c:	3901      	subs	r1, #1
    8f0e:	6439      	str	r1, [r7, #64]	; 0x40
    8f10:	b2f0      	uxtb	r0, r6
    8f12:	f04f 0100 	mov.w	r1, #0
    8f16:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
    8f1a:	ea4b 7b50 	orr.w	fp, fp, r0, lsr #29
    8f1e:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
    8f22:	b2f0      	uxtb	r0, r6
    8f24:	f04f 0100 	mov.w	r1, #0
    8f28:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    8f2c:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
    8f30:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    8f34:	4631      	mov	r1, r6
    8f36:	3107      	adds	r1, #7
    8f38:	08c9      	lsrs	r1, r1, #3
    8f3a:	00c9      	lsls	r1, r1, #3
    8f3c:	ebad 0d01 	sub.w	sp, sp, r1
    8f40:	4669      	mov	r1, sp
    8f42:	3100      	adds	r1, #0
    8f44:	63f9      	str	r1, [r7, #60]	; 0x3c
	u8 rxbuf[len];
    8f46:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    8f4a:	4631      	mov	r1, r6
    8f4c:	3901      	subs	r1, #1
    8f4e:	63b9      	str	r1, [r7, #56]	; 0x38
    8f50:	b2f0      	uxtb	r0, r6
    8f52:	f04f 0100 	mov.w	r1, #0
    8f56:	00cd      	lsls	r5, r1, #3
    8f58:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    8f5c:	00c4      	lsls	r4, r0, #3
    8f5e:	b2f0      	uxtb	r0, r6
    8f60:	f04f 0100 	mov.w	r1, #0
    8f64:	00cb      	lsls	r3, r1, #3
    8f66:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    8f6a:	00c2      	lsls	r2, r0, #3
    8f6c:	4633      	mov	r3, r6
    8f6e:	3307      	adds	r3, #7
    8f70:	08db      	lsrs	r3, r3, #3
    8f72:	00db      	lsls	r3, r3, #3
    8f74:	ebad 0d03 	sub.w	sp, sp, r3
    8f78:	466b      	mov	r3, sp
    8f7a:	3300      	adds	r3, #0
    8f7c:	637b      	str	r3, [r7, #52]	; 0x34

	txbuf[0] = len - 1; // length of data (rest of payload)
    8f7e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
    8f82:	3b01      	subs	r3, #1
    8f84:	b2da      	uxtb	r2, r3
    8f86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8f88:	701a      	strb	r2, [r3, #0]
	txbuf[1] = 0; // request
    8f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8f8c:	2200      	movs	r2, #0
    8f8e:	705a      	strb	r2, [r3, #1]

	// read device serial number
	command[0] = 58;
    8f90:	233a      	movs	r3, #58	; 0x3a
    8f92:	623b      	str	r3, [r7, #32]
	iap_entry(command, result);
    8f94:	4bb3      	ldr	r3, [pc, #716]	; (9264 <cc2400_rangetest+0x378>)
    8f96:	681b      	ldr	r3, [r3, #0]
    8f98:	f107 0120 	add.w	r1, r7, #32
    8f9c:	f107 020c 	add.w	r2, r7, #12
    8fa0:	4608      	mov	r0, r1
    8fa2:	4611      	mov	r1, r2
    8fa4:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    8fa6:	68fb      	ldr	r3, [r7, #12]
    8fa8:	b2db      	uxtb	r3, r3
    8faa:	2b00      	cmp	r3, #0
    8fac:	d001      	beq.n	8fb2 <cc2400_rangetest+0xc6>
    8fae:	2300      	movs	r3, #0
		return;
    8fb0:	e1ac      	b.n	930c <cc2400_rangetest+0x420>
	txbuf[2] = (result[1] >> 24) & 0xFF;
    8fb2:	693b      	ldr	r3, [r7, #16]
    8fb4:	0e1b      	lsrs	r3, r3, #24
    8fb6:	b2da      	uxtb	r2, r3
    8fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8fba:	709a      	strb	r2, [r3, #2]
	txbuf[3] = (result[1] >> 16) & 0xFF;
    8fbc:	693b      	ldr	r3, [r7, #16]
    8fbe:	0c1b      	lsrs	r3, r3, #16
    8fc0:	b2da      	uxtb	r2, r3
    8fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8fc4:	70da      	strb	r2, [r3, #3]
	txbuf[4] = (result[1] >> 8) & 0xFF;
    8fc6:	693b      	ldr	r3, [r7, #16]
    8fc8:	0a1b      	lsrs	r3, r3, #8
    8fca:	b2da      	uxtb	r2, r3
    8fcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8fce:	711a      	strb	r2, [r3, #4]
	txbuf[5] = result[1] & 0xFF;
    8fd0:	693b      	ldr	r3, [r7, #16]
    8fd2:	b2da      	uxtb	r2, r3
    8fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8fd6:	715a      	strb	r2, [r3, #5]
	txbuf[6] = (result[2] >> 24) & 0xFF;
    8fd8:	697b      	ldr	r3, [r7, #20]
    8fda:	0e1b      	lsrs	r3, r3, #24
    8fdc:	b2da      	uxtb	r2, r3
    8fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8fe0:	719a      	strb	r2, [r3, #6]
	txbuf[7] = (result[2] >> 16) & 0xFF;
    8fe2:	697b      	ldr	r3, [r7, #20]
    8fe4:	0c1b      	lsrs	r3, r3, #16
    8fe6:	b2da      	uxtb	r2, r3
    8fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8fea:	71da      	strb	r2, [r3, #7]
	txbuf[8] = (result[2] >> 8) & 0xFF;
    8fec:	697b      	ldr	r3, [r7, #20]
    8fee:	0a1b      	lsrs	r3, r3, #8
    8ff0:	b2da      	uxtb	r2, r3
    8ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8ff4:	721a      	strb	r2, [r3, #8]
	txbuf[9] = result[2] & 0xFF;
    8ff6:	697b      	ldr	r3, [r7, #20]
    8ff8:	b2da      	uxtb	r2, r3
    8ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8ffc:	725a      	strb	r2, [r3, #9]
	txbuf[10] = (result[3] >> 24) & 0xFF;
    8ffe:	69bb      	ldr	r3, [r7, #24]
    9000:	0e1b      	lsrs	r3, r3, #24
    9002:	b2da      	uxtb	r2, r3
    9004:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9006:	729a      	strb	r2, [r3, #10]
	txbuf[11] = (result[3] >> 16) & 0xFF;
    9008:	69bb      	ldr	r3, [r7, #24]
    900a:	0c1b      	lsrs	r3, r3, #16
    900c:	b2da      	uxtb	r2, r3
    900e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9010:	72da      	strb	r2, [r3, #11]
	txbuf[12] = (result[3] >> 8) & 0xFF;
    9012:	69bb      	ldr	r3, [r7, #24]
    9014:	0a1b      	lsrs	r3, r3, #8
    9016:	b2da      	uxtb	r2, r3
    9018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    901a:	731a      	strb	r2, [r3, #12]
	txbuf[13] = result[3] & 0xFF;
    901c:	69bb      	ldr	r3, [r7, #24]
    901e:	b2da      	uxtb	r2, r3
    9020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9022:	735a      	strb	r2, [r3, #13]
	txbuf[14] = (result[4] >> 24) & 0xFF;
    9024:	69fb      	ldr	r3, [r7, #28]
    9026:	0e1b      	lsrs	r3, r3, #24
    9028:	b2da      	uxtb	r2, r3
    902a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    902c:	739a      	strb	r2, [r3, #14]
	txbuf[15] = (result[4] >> 16) & 0xFF;
    902e:	69fb      	ldr	r3, [r7, #28]
    9030:	0c1b      	lsrs	r3, r3, #16
    9032:	b2da      	uxtb	r2, r3
    9034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9036:	73da      	strb	r2, [r3, #15]
	txbuf[16] = (result[4] >> 8) & 0xFF;
    9038:	69fb      	ldr	r3, [r7, #28]
    903a:	0a1b      	lsrs	r3, r3, #8
    903c:	b2da      	uxtb	r2, r3
    903e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9040:	741a      	strb	r2, [r3, #16]
	txbuf[17] = result[4] & 0xFF;
    9042:	69fb      	ldr	r3, [r7, #28]
    9044:	b2da      	uxtb	r2, r3
    9046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9048:	745a      	strb	r2, [r3, #17]

	txbuf[18] = pa; // request pa
    904a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    904c:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    9050:	749a      	strb	r2, [r3, #18]
	txbuf[19] = 0; // request number
    9052:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9054:	2200      	movs	r2, #0
    9056:	74da      	strb	r2, [r3, #19]
	txbuf[20] = 0xff; // reply pa
    9058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    905a:	22ff      	movs	r2, #255	; 0xff
    905c:	751a      	strb	r2, [r3, #20]
	txbuf[21] = 0xff; // reply number
    905e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9060:	22ff      	movs	r2, #255	; 0xff
    9062:	755a      	strb	r2, [r3, #21]

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    9064:	2012      	movs	r0, #18
    9066:	f642 3122 	movw	r1, #11042	; 0x2b22
    906a:	f001 f8f9 	bl	a260 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    906e:	2014      	movs	r0, #20
    9070:	f241 314b 	movw	r1, #4939	; 0x134b
    9074:	f001 f8f4 	bl	a260 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    9078:	2020      	movs	r0, #32
    907a:	f640 51f1 	movw	r1, #3569	; 0xdf1
    907e:	f001 f8ef 	bl	a260 <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    9082:	687b      	ldr	r3, [r7, #4]
    9084:	881b      	ldrh	r3, [r3, #0]
    9086:	b29b      	uxth	r3, r3
    9088:	2002      	movs	r0, #2
    908a:	4619      	mov	r1, r3
    908c:	f001 f8e8 	bl	a260 <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    9090:	202d      	movs	r0, #45	; 0x2d
    9092:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    9096:	f001 f8e3 	bl	a260 <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    909a:	202c      	movs	r0, #44	; 0x2c
    909c:	f241 5184 	movw	r1, #5508	; 0x1584
    90a0:	f001 f8de 	bl	a260 <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    90a4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    90a8:	f043 0308 	orr.w	r3, r3, #8
    90ac:	b2db      	uxtb	r3, r3
    90ae:	b29b      	uxth	r3, r3
    90b0:	2005      	movs	r0, #5
    90b2:	4619      	mov	r1, r3
    90b4:	f001 f8d4 	bl	a260 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    90b8:	2003      	movs	r0, #3
    90ba:	2129      	movs	r1, #41	; 0x29
    90bc:	f001 f8d0 	bl	a260 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    90c0:	bf00      	nop
    90c2:	f001 f985 	bl	a3d0 <cc2400_status>
    90c6:	4603      	mov	r3, r0
    90c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    90cc:	2b00      	cmp	r3, #0
    90ce:	d0f8      	beq.n	90c2 <cc2400_rangetest+0x1d6>
	cc2400_strobe(SFSON);
    90d0:	2061      	movs	r0, #97	; 0x61
    90d2:	f001 f987 	bl	a3e4 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    90d6:	bf00      	nop
    90d8:	f001 f97a 	bl	a3d0 <cc2400_status>
    90dc:	4603      	mov	r3, r0
    90de:	f003 0304 	and.w	r3, r3, #4
    90e2:	2b00      	cmp	r3, #0
    90e4:	d0f8      	beq.n	90d8 <cc2400_rangetest+0x1ec>
	TXLED_SET;
    90e6:	4b60      	ldr	r3, [pc, #384]	; (9268 <cc2400_rangetest+0x37c>)
    90e8:	f44f 7280 	mov.w	r2, #256	; 0x100
    90ec:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    90ee:	4b5f      	ldr	r3, [pc, #380]	; (926c <cc2400_rangetest+0x380>)
    90f0:	2280      	movs	r2, #128	; 0x80
    90f2:	601a      	str	r2, [r3, #0]
#endif
	for (pa = 0; pa < 8; pa++) {
    90f4:	2300      	movs	r3, #0
    90f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    90fa:	e03e      	b.n	917a <cc2400_rangetest+0x28e>
		cc2400_set(FREND, 8 | pa);
    90fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    9100:	f043 0308 	orr.w	r3, r3, #8
    9104:	b2db      	uxtb	r3, r3
    9106:	b29b      	uxth	r3, r3
    9108:	2005      	movs	r0, #5
    910a:	4619      	mov	r1, r3
    910c:	f001 f8a8 	bl	a260 <cc2400_set>
		txbuf[18] = pa;
    9110:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9112:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    9116:	749a      	strb	r2, [r3, #18]
		for (i = 0; i < 16; i++) {
    9118:	2300      	movs	r3, #0
    911a:	64fb      	str	r3, [r7, #76]	; 0x4c
    911c:	e025      	b.n	916a <cc2400_rangetest+0x27e>
			txbuf[19] = i;
    911e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9120:	b2da      	uxtb	r2, r3
    9122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9124:	74da      	strb	r2, [r3, #19]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9126:	bf00      	nop
    9128:	200e      	movs	r0, #14
    912a:	f001 f883 	bl	a234 <cc2400_get>
    912e:	4603      	mov	r3, r0
    9130:	f003 031f 	and.w	r3, r3, #31
    9134:	2b0f      	cmp	r3, #15
    9136:	d1f7      	bne.n	9128 <cc2400_rangetest+0x23c>
			// transmit a packet
			for (j = 0; j < len; j++)
    9138:	2300      	movs	r3, #0
    913a:	64bb      	str	r3, [r7, #72]	; 0x48
    913c:	e00a      	b.n	9154 <cc2400_rangetest+0x268>
				cc2400_set8(FIFOREG, txbuf[j]);
    913e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    9140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9142:	4413      	add	r3, r2
    9144:	781b      	ldrb	r3, [r3, #0]
    9146:	2070      	movs	r0, #112	; 0x70
    9148:	4619      	mov	r1, r3
    914a:	f001 f8b7 	bl	a2bc <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    914e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9150:	3301      	adds	r3, #1
    9152:	64bb      	str	r3, [r7, #72]	; 0x48
    9154:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    9158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    915a:	429a      	cmp	r2, r3
    915c:	dcef      	bgt.n	913e <cc2400_rangetest+0x252>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    915e:	2063      	movs	r0, #99	; 0x63
    9160:	f001 f940 	bl	a3e4 <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    9164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9166:	3301      	adds	r3, #1
    9168:	64fb      	str	r3, [r7, #76]	; 0x4c
    916a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    916c:	2b0f      	cmp	r3, #15
    916e:	ddd6      	ble.n	911e <cc2400_rangetest+0x232>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    9170:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    9174:	3301      	adds	r3, #1
    9176:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    917a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    917e:	2b07      	cmp	r3, #7
    9180:	d9bc      	bls.n	90fc <cc2400_rangetest+0x210>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9182:	bf00      	nop
    9184:	200e      	movs	r0, #14
    9186:	f001 f855 	bl	a234 <cc2400_get>
    918a:	4603      	mov	r3, r0
    918c:	f003 031f 	and.w	r3, r3, #31
    9190:	2b0f      	cmp	r3, #15
    9192:	d1f7      	bne.n	9184 <cc2400_rangetest+0x298>
	TXLED_CLR;
    9194:	4b36      	ldr	r3, [pc, #216]	; (9270 <cc2400_rangetest+0x384>)
    9196:	f44f 7280 	mov.w	r2, #256	; 0x100
    919a:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    919c:	2064      	movs	r0, #100	; 0x64
    919e:	f001 f921 	bl	a3e4 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    91a2:	bf00      	nop
    91a4:	f001 f914 	bl	a3d0 <cc2400_status>
    91a8:	4603      	mov	r3, r0
    91aa:	f003 0304 	and.w	r3, r3, #4
    91ae:	2b00      	cmp	r3, #0
    91b0:	d1f8      	bne.n	91a4 <cc2400_rangetest+0x2b8>
	cc2400_set(FSDIV, *chan_ptr - 1);
    91b2:	687b      	ldr	r3, [r7, #4]
    91b4:	881b      	ldrh	r3, [r3, #0]
    91b6:	b29b      	uxth	r3, r3
    91b8:	3b01      	subs	r3, #1
    91ba:	b29b      	uxth	r3, r3
    91bc:	2002      	movs	r0, #2
    91be:	4619      	mov	r1, r3
    91c0:	f001 f84e 	bl	a260 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    91c4:	bf00      	nop
    91c6:	f001 f903 	bl	a3d0 <cc2400_status>
    91ca:	4603      	mov	r3, r0
    91cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    91d0:	2b00      	cmp	r3, #0
    91d2:	d0f8      	beq.n	91c6 <cc2400_rangetest+0x2da>
	cc2400_strobe(SFSON);
    91d4:	2061      	movs	r0, #97	; 0x61
    91d6:	f001 f905 	bl	a3e4 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    91da:	bf00      	nop
    91dc:	f001 f8f8 	bl	a3d0 <cc2400_status>
    91e0:	4603      	mov	r3, r0
    91e2:	f003 0304 	and.w	r3, r3, #4
    91e6:	2b00      	cmp	r3, #0
    91e8:	d0f8      	beq.n	91dc <cc2400_rangetest+0x2f0>
	RXLED_SET;
    91ea:	4b1f      	ldr	r3, [pc, #124]	; (9268 <cc2400_rangetest+0x37c>)
    91ec:	2210      	movs	r2, #16
    91ee:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    91f0:	bf00      	nop
    91f2:	200e      	movs	r0, #14
    91f4:	f001 f81e 	bl	a234 <cc2400_get>
    91f8:	4603      	mov	r3, r0
    91fa:	f003 031f 	and.w	r3, r3, #31
    91fe:	2b0f      	cmp	r3, #15
    9200:	d1f7      	bne.n	91f2 <cc2400_rangetest+0x306>
		cc2400_strobe(SRX);
    9202:	2062      	movs	r0, #98	; 0x62
    9204:	f001 f8ee 	bl	a3e4 <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    9208:	bf00      	nop
    920a:	f001 f8e1 	bl	a3d0 <cc2400_status>
    920e:	4603      	mov	r3, r0
    9210:	f003 0310 	and.w	r3, r3, #16
    9214:	2b00      	cmp	r3, #0
    9216:	d0f8      	beq.n	920a <cc2400_rangetest+0x31e>
		USRLED_SET;
    9218:	4b13      	ldr	r3, [pc, #76]	; (9268 <cc2400_rangetest+0x37c>)
    921a:	2202      	movs	r2, #2
    921c:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
    921e:	2300      	movs	r3, #0
    9220:	64bb      	str	r3, [r7, #72]	; 0x48
    9222:	e00c      	b.n	923e <cc2400_rangetest+0x352>
			rxbuf[j] = cc2400_get8(FIFOREG);
    9224:	2070      	movs	r0, #112	; 0x70
    9226:	f001 f82f 	bl	a288 <cc2400_get8>
    922a:	4603      	mov	r3, r0
    922c:	4619      	mov	r1, r3
    922e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9230:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9232:	4413      	add	r3, r2
    9234:	460a      	mov	r2, r1
    9236:	701a      	strb	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    9238:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    923a:	3301      	adds	r3, #1
    923c:	64bb      	str	r3, [r7, #72]	; 0x48
    923e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    9242:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9244:	429a      	cmp	r2, r3
    9246:	dced      	bgt.n	9224 <cc2400_rangetest+0x338>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    9248:	f001 f8c2 	bl	a3d0 <cc2400_status>
    924c:	4603      	mov	r3, r0
    924e:	f003 0308 	and.w	r3, r3, #8
    9252:	2b00      	cmp	r3, #0
    9254:	d001      	beq.n	925a <cc2400_rangetest+0x36e>
			break;
    9256:	bf00      	nop
		USRLED_CLR;
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9258:	e00c      	b.n	9274 <cc2400_rangetest+0x388>
		USRLED_SET;
		for (j = 0; j < len; j++)
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
			break;
		USRLED_CLR;
    925a:	4b05      	ldr	r3, [pc, #20]	; (9270 <cc2400_rangetest+0x384>)
    925c:	2202      	movs	r2, #2
    925e:	601a      	str	r2, [r3, #0]
	}
    9260:	e7c6      	b.n	91f0 <cc2400_rangetest+0x304>
    9262:	bf00      	nop
    9264:	100008a8 	.word	0x100008a8
    9268:	2009c038 	.word	0x2009c038
    926c:	2009c058 	.word	0x2009c058
    9270:	2009c03c 	.word	0x2009c03c

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9274:	200e      	movs	r0, #14
    9276:	f000 ffdd 	bl	a234 <cc2400_get>
    927a:	4603      	mov	r3, r0
    927c:	f003 031f 	and.w	r3, r3, #31
    9280:	2b0f      	cmp	r3, #15
    9282:	d1f7      	bne.n	9274 <cc2400_rangetest+0x388>
	cc2400_strobe(SRFOFF);
    9284:	2064      	movs	r0, #100	; 0x64
    9286:	f001 f8ad 	bl	a3e4 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    928a:	bf00      	nop
    928c:	f001 f8a0 	bl	a3d0 <cc2400_status>
    9290:	4603      	mov	r3, r0
    9292:	f003 0304 	and.w	r3, r3, #4
    9296:	2b00      	cmp	r3, #0
    9298:	d1f8      	bne.n	928c <cc2400_rangetest+0x3a0>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    929a:	4b20      	ldr	r3, [pc, #128]	; (931c <cc2400_rangetest+0x430>)
    929c:	2280      	movs	r2, #128	; 0x80
    929e:	601a      	str	r2, [r3, #0]
#endif
	RXLED_CLR;
    92a0:	4b1f      	ldr	r3, [pc, #124]	; (9320 <cc2400_rangetest+0x434>)
    92a2:	2210      	movs	r2, #16
    92a4:	601a      	str	r2, [r3, #0]

	// get test result
	rr.valid       = 1;
    92a6:	4b1f      	ldr	r3, [pc, #124]	; (9324 <cc2400_rangetest+0x438>)
    92a8:	2201      	movs	r2, #1
    92aa:	701a      	strb	r2, [r3, #0]
	rr.request_pa  = rxbuf[18];
    92ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    92ae:	7c9a      	ldrb	r2, [r3, #18]
    92b0:	4b1c      	ldr	r3, [pc, #112]	; (9324 <cc2400_rangetest+0x438>)
    92b2:	705a      	strb	r2, [r3, #1]
	rr.request_num = rxbuf[19];
    92b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    92b6:	7cda      	ldrb	r2, [r3, #19]
    92b8:	4b1a      	ldr	r3, [pc, #104]	; (9324 <cc2400_rangetest+0x438>)
    92ba:	709a      	strb	r2, [r3, #2]
	rr.reply_pa    = rxbuf[20];
    92bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    92be:	7d1a      	ldrb	r2, [r3, #20]
    92c0:	4b18      	ldr	r3, [pc, #96]	; (9324 <cc2400_rangetest+0x438>)
    92c2:	70da      	strb	r2, [r3, #3]
	rr.reply_num   = rxbuf[21];
    92c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    92c6:	7d5a      	ldrb	r2, [r3, #21]
    92c8:	4b16      	ldr	r3, [pc, #88]	; (9324 <cc2400_rangetest+0x438>)
    92ca:	711a      	strb	r2, [r3, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    92cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    92ce:	2201      	movs	r2, #1
    92d0:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 18; i++)
    92d2:	2300      	movs	r3, #0
    92d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    92d6:	e012      	b.n	92fe <cc2400_rangetest+0x412>
		if (rxbuf[i] != txbuf[i])
    92d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    92da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    92dc:	4413      	add	r3, r2
    92de:	781a      	ldrb	r2, [r3, #0]
    92e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    92e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    92e4:	440b      	add	r3, r1
    92e6:	781b      	ldrb	r3, [r3, #0]
    92e8:	429a      	cmp	r2, r3
    92ea:	d005      	beq.n	92f8 <cc2400_rangetest+0x40c>
			rr.valid = 2 + i;
    92ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    92ee:	b2db      	uxtb	r3, r3
    92f0:	3302      	adds	r3, #2
    92f2:	b2da      	uxtb	r2, r3
    92f4:	4b0b      	ldr	r3, [pc, #44]	; (9324 <cc2400_rangetest+0x438>)
    92f6:	701a      	strb	r2, [r3, #0]
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    92f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    92fa:	3301      	adds	r3, #1
    92fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    92fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9300:	2b11      	cmp	r3, #17
    9302:	dde9      	ble.n	92d8 <cc2400_rangetest+0x3ec>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    9304:	4b06      	ldr	r3, [pc, #24]	; (9320 <cc2400_rangetest+0x434>)
    9306:	2202      	movs	r2, #2
    9308:	601a      	str	r2, [r3, #0]
    930a:	2301      	movs	r3, #1
    930c:	f8d7 d000 	ldr.w	sp, [r7]
    9310:	2b01      	cmp	r3, #1
#endif
}
    9312:	3754      	adds	r7, #84	; 0x54
    9314:	46bd      	mov	sp, r7
    9316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    931a:	bf00      	nop
    931c:	2009c05c 	.word	0x2009c05c
    9320:	2009c03c 	.word	0x2009c03c
    9324:	10001080 	.word	0x10001080

00009328 <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    9328:	b5f0      	push	{r4, r5, r6, r7, lr}
    932a:	b089      	sub	sp, #36	; 0x24
    932c:	af00      	add	r7, sp, #0
    932e:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	int i;
	int j;
	u8 len = 22;
    9330:	2116      	movs	r1, #22
    9332:	75b9      	strb	r1, [r7, #22]
	u8 pa = 0;
    9334:	2100      	movs	r1, #0
    9336:	75f9      	strb	r1, [r7, #23]
	u8 buf[len];
    9338:	7dbe      	ldrb	r6, [r7, #22]
    933a:	4631      	mov	r1, r6
    933c:	3901      	subs	r1, #1
    933e:	6139      	str	r1, [r7, #16]
    9340:	b2f0      	uxtb	r0, r6
    9342:	f04f 0100 	mov.w	r1, #0
    9346:	00cd      	lsls	r5, r1, #3
    9348:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    934c:	00c4      	lsls	r4, r0, #3
    934e:	b2f0      	uxtb	r0, r6
    9350:	f04f 0100 	mov.w	r1, #0
    9354:	00cb      	lsls	r3, r1, #3
    9356:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    935a:	00c2      	lsls	r2, r0, #3
    935c:	4633      	mov	r3, r6
    935e:	3307      	adds	r3, #7
    9360:	08db      	lsrs	r3, r3, #3
    9362:	00db      	lsls	r3, r3, #3
    9364:	ebad 0d03 	sub.w	sp, sp, r3
    9368:	466b      	mov	r3, sp
    936a:	3300      	adds	r3, #0
    936c:	60fb      	str	r3, [r7, #12]

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(LMTST,   0x2b22);
    936e:	2012      	movs	r0, #18
    9370:	f642 3122 	movw	r1, #11042	; 0x2b22
    9374:	f000 ff74 	bl	a260 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    9378:	2014      	movs	r0, #20
    937a:	f241 314b 	movw	r1, #4939	; 0x134b
    937e:	f000 ff6f 	bl	a260 <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    9382:	687b      	ldr	r3, [r7, #4]
    9384:	881b      	ldrh	r3, [r3, #0]
    9386:	b29b      	uxth	r3, r3
    9388:	3b01      	subs	r3, #1
    938a:	b29b      	uxth	r3, r3
    938c:	2002      	movs	r0, #2
    938e:	4619      	mov	r1, r3
    9390:	f000 ff66 	bl	a260 <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    9394:	202d      	movs	r0, #45	; 0x2d
    9396:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    939a:	f000 ff61 	bl	a260 <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    939e:	202c      	movs	r0, #44	; 0x2c
    93a0:	f241 5184 	movw	r1, #5508	; 0x1584
    93a4:	f000 ff5c 	bl	a260 <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    93a8:	2005      	movs	r0, #5
    93aa:	2108      	movs	r1, #8
    93ac:	f000 ff58 	bl	a260 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    93b0:	2003      	movs	r0, #3
    93b2:	2129      	movs	r1, #41	; 0x29
    93b4:	f000 ff54 	bl	a260 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    93b8:	bf00      	nop
    93ba:	f001 f809 	bl	a3d0 <cc2400_status>
    93be:	4603      	mov	r3, r0
    93c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    93c4:	2b00      	cmp	r3, #0
    93c6:	d0f8      	beq.n	93ba <cc2400_repeater+0x92>
		cc2400_strobe(SFSON);
    93c8:	2061      	movs	r0, #97	; 0x61
    93ca:	f001 f80b 	bl	a3e4 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    93ce:	bf00      	nop
    93d0:	f000 fffe 	bl	a3d0 <cc2400_status>
    93d4:	4603      	mov	r3, r0
    93d6:	f003 0304 	and.w	r3, r3, #4
    93da:	2b00      	cmp	r3, #0
    93dc:	d0f8      	beq.n	93d0 <cc2400_repeater+0xa8>
		RXLED_SET;
    93de:	4b6a      	ldr	r3, [pc, #424]	; (9588 <cc2400_repeater+0x260>)
    93e0:	2210      	movs	r2, #16
    93e2:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    93e4:	4b69      	ldr	r3, [pc, #420]	; (958c <cc2400_repeater+0x264>)
    93e6:	f44f 7280 	mov.w	r2, #256	; 0x100
    93ea:	601a      	str	r2, [r3, #0]
		USRLED_CLR;
    93ec:	4b67      	ldr	r3, [pc, #412]	; (958c <cc2400_repeater+0x264>)
    93ee:	2202      	movs	r2, #2
    93f0:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    93f2:	4b67      	ldr	r3, [pc, #412]	; (9590 <cc2400_repeater+0x268>)
    93f4:	2280      	movs	r2, #128	; 0x80
    93f6:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    93f8:	bf00      	nop
    93fa:	200e      	movs	r0, #14
    93fc:	f000 ff1a 	bl	a234 <cc2400_get>
    9400:	4603      	mov	r3, r0
    9402:	f003 031f 	and.w	r3, r3, #31
    9406:	2b0f      	cmp	r3, #15
    9408:	d1f7      	bne.n	93fa <cc2400_repeater+0xd2>
			USRLED_CLR;
    940a:	4b60      	ldr	r3, [pc, #384]	; (958c <cc2400_repeater+0x264>)
    940c:	2202      	movs	r2, #2
    940e:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRX);
    9410:	2062      	movs	r0, #98	; 0x62
    9412:	f000 ffe7 	bl	a3e4 <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    9416:	bf00      	nop
    9418:	f000 ffda 	bl	a3d0 <cc2400_status>
    941c:	4603      	mov	r3, r0
    941e:	f003 0310 	and.w	r3, r3, #16
    9422:	2b00      	cmp	r3, #0
    9424:	d0f8      	beq.n	9418 <cc2400_repeater+0xf0>
			USRLED_SET;
    9426:	4b58      	ldr	r3, [pc, #352]	; (9588 <cc2400_repeater+0x260>)
    9428:	2202      	movs	r2, #2
    942a:	601a      	str	r2, [r3, #0]
			for (i = 0; i < len; i++)
    942c:	2300      	movs	r3, #0
    942e:	61fb      	str	r3, [r7, #28]
    9430:	e00c      	b.n	944c <cc2400_repeater+0x124>
				buf[i] = cc2400_get8(FIFOREG);
    9432:	2070      	movs	r0, #112	; 0x70
    9434:	f000 ff28 	bl	a288 <cc2400_get8>
    9438:	4603      	mov	r3, r0
    943a:	4619      	mov	r1, r3
    943c:	68fa      	ldr	r2, [r7, #12]
    943e:	69fb      	ldr	r3, [r7, #28]
    9440:	4413      	add	r3, r2
    9442:	460a      	mov	r2, r1
    9444:	701a      	strb	r2, [r3, #0]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    9446:	69fb      	ldr	r3, [r7, #28]
    9448:	3301      	adds	r3, #1
    944a:	61fb      	str	r3, [r7, #28]
    944c:	7dba      	ldrb	r2, [r7, #22]
    944e:	69fb      	ldr	r3, [r7, #28]
    9450:	429a      	cmp	r2, r3
    9452:	dcee      	bgt.n	9432 <cc2400_repeater+0x10a>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    9454:	f000 ffbc 	bl	a3d0 <cc2400_status>
    9458:	4603      	mov	r3, r0
    945a:	f003 0308 	and.w	r3, r3, #8
    945e:	2b00      	cmp	r3, #0
    9460:	d003      	beq.n	946a <cc2400_repeater+0x142>
				break;
    9462:	bf00      	nop
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    9464:	4b4b      	ldr	r3, [pc, #300]	; (9594 <cc2400_repeater+0x26c>)
    9466:	61fb      	str	r3, [r7, #28]
    9468:	e000      	b.n	946c <cc2400_repeater+0x144>
			USRLED_SET;
			for (i = 0; i < len; i++)
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
				break;
		}
    946a:	e7c5      	b.n	93f8 <cc2400_repeater+0xd0>
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    946c:	69fb      	ldr	r3, [r7, #28]
    946e:	3b01      	subs	r3, #1
    9470:	61fb      	str	r3, [r7, #28]
    9472:	69fb      	ldr	r3, [r7, #28]
    9474:	2b00      	cmp	r3, #0
    9476:	d1f9      	bne.n	946c <cc2400_repeater+0x144>
		USRLED_CLR;
    9478:	4b44      	ldr	r3, [pc, #272]	; (958c <cc2400_repeater+0x264>)
    947a:	2202      	movs	r2, #2
    947c:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    947e:	4b43      	ldr	r3, [pc, #268]	; (958c <cc2400_repeater+0x264>)
    9480:	2210      	movs	r2, #16
    9482:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    9484:	2064      	movs	r0, #100	; 0x64
    9486:	f000 ffad 	bl	a3e4 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    948a:	bf00      	nop
    948c:	f000 ffa0 	bl	a3d0 <cc2400_status>
    9490:	4603      	mov	r3, r0
    9492:	f003 0304 	and.w	r3, r3, #4
    9496:	2b00      	cmp	r3, #0
    9498:	d1f8      	bne.n	948c <cc2400_repeater+0x164>
		while (!(cc2400_status() & XOSC16M_STABLE));
    949a:	bf00      	nop
    949c:	f000 ff98 	bl	a3d0 <cc2400_status>
    94a0:	4603      	mov	r3, r0
    94a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
    94a6:	2b00      	cmp	r3, #0
    94a8:	d0f8      	beq.n	949c <cc2400_repeater+0x174>
		cc2400_set(FSDIV, *chan_ptr);
    94aa:	687b      	ldr	r3, [r7, #4]
    94ac:	881b      	ldrh	r3, [r3, #0]
    94ae:	b29b      	uxth	r3, r3
    94b0:	2002      	movs	r0, #2
    94b2:	4619      	mov	r1, r3
    94b4:	f000 fed4 	bl	a260 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    94b8:	bf00      	nop
    94ba:	f000 ff89 	bl	a3d0 <cc2400_status>
    94be:	4603      	mov	r3, r0
    94c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    94c4:	2b00      	cmp	r3, #0
    94c6:	d0f8      	beq.n	94ba <cc2400_repeater+0x192>
		cc2400_strobe(SFSON);
    94c8:	2061      	movs	r0, #97	; 0x61
    94ca:	f000 ff8b 	bl	a3e4 <cc2400_strobe>
		TXLED_SET;
    94ce:	4b2e      	ldr	r3, [pc, #184]	; (9588 <cc2400_repeater+0x260>)
    94d0:	f44f 7280 	mov.w	r2, #256	; 0x100
    94d4:	601a      	str	r2, [r3, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    94d6:	7dbb      	ldrb	r3, [r7, #22]
    94d8:	3b01      	subs	r3, #1
    94da:	b2da      	uxtb	r2, r3
    94dc:	68fb      	ldr	r3, [r7, #12]
    94de:	701a      	strb	r2, [r3, #0]
		buf[1] = 1; // reply
    94e0:	68fb      	ldr	r3, [r7, #12]
    94e2:	2201      	movs	r2, #1
    94e4:	705a      	strb	r2, [r3, #1]
		for (pa = 0; pa < 8; pa++) {
    94e6:	2300      	movs	r3, #0
    94e8:	75fb      	strb	r3, [r7, #23]
    94ea:	e039      	b.n	9560 <cc2400_repeater+0x238>
			cc2400_set(FREND, 8 | pa);
    94ec:	7dfb      	ldrb	r3, [r7, #23]
    94ee:	f043 0308 	orr.w	r3, r3, #8
    94f2:	b2db      	uxtb	r3, r3
    94f4:	b29b      	uxth	r3, r3
    94f6:	2005      	movs	r0, #5
    94f8:	4619      	mov	r1, r3
    94fa:	f000 feb1 	bl	a260 <cc2400_set>
			buf[20] = pa;
    94fe:	68fb      	ldr	r3, [r7, #12]
    9500:	7dfa      	ldrb	r2, [r7, #23]
    9502:	751a      	strb	r2, [r3, #20]
			for (i = 0; i < 16; i++) {
    9504:	2300      	movs	r3, #0
    9506:	61fb      	str	r3, [r7, #28]
    9508:	e024      	b.n	9554 <cc2400_repeater+0x22c>
				buf[21] = i;
    950a:	69fb      	ldr	r3, [r7, #28]
    950c:	b2da      	uxtb	r2, r3
    950e:	68fb      	ldr	r3, [r7, #12]
    9510:	755a      	strb	r2, [r3, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9512:	bf00      	nop
    9514:	200e      	movs	r0, #14
    9516:	f000 fe8d 	bl	a234 <cc2400_get>
    951a:	4603      	mov	r3, r0
    951c:	f003 031f 	and.w	r3, r3, #31
    9520:	2b0f      	cmp	r3, #15
    9522:	d1f7      	bne.n	9514 <cc2400_repeater+0x1ec>
					for (j = 0; j < len; j++)
    9524:	2300      	movs	r3, #0
    9526:	61bb      	str	r3, [r7, #24]
    9528:	e00a      	b.n	9540 <cc2400_repeater+0x218>
						cc2400_set8(FIFOREG, buf[j]);
    952a:	68fa      	ldr	r2, [r7, #12]
    952c:	69bb      	ldr	r3, [r7, #24]
    952e:	4413      	add	r3, r2
    9530:	781b      	ldrb	r3, [r3, #0]
    9532:	2070      	movs	r0, #112	; 0x70
    9534:	4619      	mov	r1, r3
    9536:	f000 fec1 	bl	a2bc <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
					for (j = 0; j < len; j++)
    953a:	69bb      	ldr	r3, [r7, #24]
    953c:	3301      	adds	r3, #1
    953e:	61bb      	str	r3, [r7, #24]
    9540:	7dba      	ldrb	r2, [r7, #22]
    9542:	69bb      	ldr	r3, [r7, #24]
    9544:	429a      	cmp	r2, r3
    9546:	dcf0      	bgt.n	952a <cc2400_repeater+0x202>
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    9548:	2063      	movs	r0, #99	; 0x63
    954a:	f000 ff4b 	bl	a3e4 <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    954e:	69fb      	ldr	r3, [r7, #28]
    9550:	3301      	adds	r3, #1
    9552:	61fb      	str	r3, [r7, #28]
    9554:	69fb      	ldr	r3, [r7, #28]
    9556:	2b0f      	cmp	r3, #15
    9558:	ddd7      	ble.n	950a <cc2400_repeater+0x1e2>
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    955a:	7dfb      	ldrb	r3, [r7, #23]
    955c:	3301      	adds	r3, #1
    955e:	75fb      	strb	r3, [r7, #23]
    9560:	7dfb      	ldrb	r3, [r7, #23]
    9562:	2b07      	cmp	r3, #7
    9564:	d9c2      	bls.n	94ec <cc2400_repeater+0x1c4>
					for (j = 0; j < len; j++)
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    9566:	4b09      	ldr	r3, [pc, #36]	; (958c <cc2400_repeater+0x264>)
    9568:	f44f 7280 	mov.w	r2, #256	; 0x100
    956c:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    956e:	2064      	movs	r0, #100	; 0x64
    9570:	f000 ff38 	bl	a3e4 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    9574:	bf00      	nop
    9576:	f000 ff2b 	bl	a3d0 <cc2400_status>
    957a:	4603      	mov	r3, r0
    957c:	f003 0304 	and.w	r3, r3, #4
    9580:	2b00      	cmp	r3, #0
    9582:	d1f8      	bne.n	9576 <cc2400_repeater+0x24e>
	}
    9584:	e6f3      	b.n	936e <cc2400_repeater+0x46>
    9586:	bf00      	nop
    9588:	2009c038 	.word	0x2009c038
    958c:	2009c03c 	.word	0x2009c03c
    9590:	2009c058 	.word	0x2009c058
    9594:	001e8480 	.word	0x001e8480

00009598 <cc2400_txtest>:
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    9598:	b580      	push	{r7, lr}
    959a:	b084      	sub	sp, #16
    959c:	af00      	add	r7, sp, #0
    959e:	6078      	str	r0, [r7, #4]
    95a0:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    95a2:	687b      	ldr	r3, [r7, #4]
    95a4:	781b      	ldrb	r3, [r3, #0]
    95a6:	b2db      	uxtb	r3, r3
    95a8:	2b00      	cmp	r3, #0
    95aa:	d102      	bne.n	95b2 <cc2400_txtest+0x1a>
		mdmctrl = 0x0040; // 160 kHz frequency deviation
    95ac:	2340      	movs	r3, #64	; 0x40
    95ae:	81fb      	strh	r3, [r7, #14]
    95b0:	e008      	b.n	95c4 <cc2400_txtest+0x2c>
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    95b2:	687b      	ldr	r3, [r7, #4]
    95b4:	781b      	ldrb	r3, [r3, #0]
    95b6:	b2db      	uxtb	r3, r3
    95b8:	2b01      	cmp	r3, #1
    95ba:	d102      	bne.n	95c2 <cc2400_txtest+0x2a>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    95bc:	2340      	movs	r3, #64	; 0x40
    95be:	81fb      	strh	r3, [r7, #14]
    95c0:	e000      	b.n	95c4 <cc2400_txtest+0x2c>
	} else {
		/* oops */
		return;
    95c2:	e035      	b.n	9630 <cc2400_txtest+0x98>
	}
	cc2400_set(LMTST,   0x2b22);
    95c4:	2012      	movs	r0, #18
    95c6:	f642 3122 	movw	r1, #11042	; 0x2b22
    95ca:	f000 fe49 	bl	a260 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    95ce:	2014      	movs	r0, #20
    95d0:	f243 314b 	movw	r1, #13131	; 0x334b
    95d4:	f000 fe44 	bl	a260 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    95d8:	2020      	movs	r0, #32
    95da:	f640 51f1 	movw	r1, #3569	; 0xdf1
    95de:	f000 fe3f 	bl	a260 <cc2400_set>
	cc2400_set(FSDIV,   2435);
    95e2:	2002      	movs	r0, #2
    95e4:	f640 1183 	movw	r1, #2435	; 0x983
    95e8:	f000 fe3a 	bl	a260 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl); 
    95ec:	89fb      	ldrh	r3, [r7, #14]
    95ee:	2003      	movs	r0, #3
    95f0:	4619      	mov	r1, r3
    95f2:	f000 fe35 	bl	a260 <cc2400_set>
	
//	cc2400_set(FREND, 8 | 0);
	
	while (!(cc2400_status() & XOSC16M_STABLE));
    95f6:	bf00      	nop
    95f8:	f000 feea 	bl	a3d0 <cc2400_status>
    95fc:	4603      	mov	r3, r0
    95fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9602:	2b00      	cmp	r3, #0
    9604:	d0f8      	beq.n	95f8 <cc2400_txtest+0x60>
	cc2400_strobe(SFSON);
    9606:	2061      	movs	r0, #97	; 0x61
    9608:	f000 feec 	bl	a3e4 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    960c:	bf00      	nop
    960e:	f000 fedf 	bl	a3d0 <cc2400_status>
    9612:	4603      	mov	r3, r0
    9614:	f003 0304 	and.w	r3, r3, #4
    9618:	2b00      	cmp	r3, #0
    961a:	d0f8      	beq.n	960e <cc2400_txtest+0x76>
	TXLED_SET;
    961c:	4b06      	ldr	r3, [pc, #24]	; (9638 <cc2400_txtest+0xa0>)
    961e:	f44f 7280 	mov.w	r2, #256	; 0x100
    9622:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    9624:	2063      	movs	r0, #99	; 0x63
    9626:	f000 fedd 	bl	a3e4 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    962a:	4b04      	ldr	r3, [pc, #16]	; (963c <cc2400_txtest+0xa4>)
    962c:	2280      	movs	r2, #128	; 0x80
    962e:	601a      	str	r2, [r3, #0]
#endif
#endif
}
    9630:	3710      	adds	r7, #16
    9632:	46bd      	mov	sp, r7
    9634:	bd80      	pop	{r7, pc}
    9636:	bf00      	nop
    9638:	2009c038 	.word	0x2009c038
    963c:	2009c058 	.word	0x2009c058

00009640 <ssp_start>:
typedef struct _ego_packet_t {
	u8 rxbuf[EGO_PACKET_LEN];
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
    9640:	b480      	push	{r7}
    9642:	af00      	add	r7, sp, #0
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    9644:	4b08      	ldr	r3, [pc, #32]	; (9668 <ssp_start+0x28>)
    9646:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    964a:	601a      	str	r2, [r3, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    964c:	4a07      	ldr	r2, [pc, #28]	; (966c <ssp_start+0x2c>)
    964e:	4b07      	ldr	r3, [pc, #28]	; (966c <ssp_start+0x2c>)
    9650:	681b      	ldr	r3, [r3, #0]
    9652:	f043 0302 	orr.w	r3, r3, #2
    9656:	6013      	str	r3, [r2, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    9658:	4b05      	ldr	r3, [pc, #20]	; (9670 <ssp_start+0x30>)
    965a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    965e:	601a      	str	r2, [r3, #0]
}
    9660:	46bd      	mov	sp, r7
    9662:	f85d 7b04 	ldr.w	r7, [sp], #4
    9666:	4770      	bx	lr
    9668:	2009c098 	.word	0x2009c098
    966c:	40030004 	.word	0x40030004
    9670:	2009c09c 	.word	0x2009c09c

00009674 <ssp_stop>:

static void ssp_stop() {
    9674:	b480      	push	{r7}
    9676:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    9678:	4b06      	ldr	r3, [pc, #24]	; (9694 <ssp_stop+0x20>)
    967a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    967e:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    9680:	4a05      	ldr	r2, [pc, #20]	; (9698 <ssp_stop+0x24>)
    9682:	4b05      	ldr	r3, [pc, #20]	; (9698 <ssp_stop+0x24>)
    9684:	681b      	ldr	r3, [r3, #0]
    9686:	f023 0302 	bic.w	r3, r3, #2
    968a:	6013      	str	r3, [r2, #0]
}
    968c:	46bd      	mov	sp, r7
    968e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9692:	4770      	bx	lr
    9694:	2009c098 	.word	0x2009c098
    9698:	40030004 	.word	0x40030004

0000969c <ego_init>:

static void ego_init(void) {
    969c:	b580      	push	{r7, lr}
    969e:	af00      	add	r7, sp, #0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    96a0:	4b03      	ldr	r3, [pc, #12]	; (96b0 <ego_init+0x14>)
    96a2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    96a6:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    96a8:	f000 fd08 	bl	a0bc <dio_ssp_init>
}
    96ac:	bd80      	pop	{r7, pc}
    96ae:	bf00      	nop
    96b0:	e000e100 	.word	0xe000e100

000096b4 <ego_deinit>:

static void ego_deinit(void) {
    96b4:	b580      	push	{r7, lr}
    96b6:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    96b8:	2064      	movs	r0, #100	; 0x64
    96ba:	f000 fe93 	bl	a3e4 <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    96be:	f7ff ffd9 	bl	9674 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    96c2:	4b02      	ldr	r3, [pc, #8]	; (96cc <ego_deinit+0x18>)
    96c4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    96c8:	601a      	str	r2, [r3, #0]
}
    96ca:	bd80      	pop	{r7, pc}
    96cc:	e000e180 	.word	0xe000e180

000096d0 <rf_on>:

static void rf_on(void) {
    96d0:	b580      	push	{r7, lr}
    96d2:	af00      	add	r7, sp, #0
	cc2400_set(MANAND,  0x7fff);
    96d4:	200d      	movs	r0, #13
    96d6:	f647 71ff 	movw	r1, #32767	; 0x7fff
    96da:	f000 fdc1 	bl	a260 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    96de:	2012      	movs	r0, #18
    96e0:	f642 3122 	movw	r1, #11042	; 0x2b22
    96e4:	f000 fdbc 	bl	a260 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    96e8:	2014      	movs	r0, #20
    96ea:	f241 314b 	movw	r1, #4939	; 0x134b
    96ee:	f000 fdb7 	bl	a260 <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    96f2:	2020      	movs	r0, #32
    96f4:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    96f8:	f000 fdb2 	bl	a260 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    96fc:	4b1e      	ldr	r3, [pc, #120]	; (9778 <rf_on+0xa8>)
    96fe:	881b      	ldrh	r3, [r3, #0]
    9700:	b29b      	uxth	r3, r3
    9702:	3b01      	subs	r3, #1
    9704:	b29b      	uxth	r3, r3
    9706:	2002      	movs	r0, #2
    9708:	4619      	mov	r1, r3
    970a:	f000 fda9 	bl	a260 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    970e:	2003      	movs	r0, #3
    9710:	2126      	movs	r1, #38	; 0x26
    9712:	f000 fda5 	bl	a260 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    9716:	2021      	movs	r0, #33	; 0x21
    9718:	2103      	movs	r1, #3
    971a:	f000 fda1 	bl	a260 <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    971e:	202d      	movs	r0, #45	; 0x2d
    9720:	f246 310f 	movw	r1, #25359	; 0x630f
    9724:	f000 fd9c 	bl	a260 <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    9728:	202c      	movs	r0, #44	; 0x2c
    972a:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    972e:	f000 fd97 	bl	a260 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    9732:	bf00      	nop
    9734:	f000 fe4c 	bl	a3d0 <cc2400_status>
    9738:	4603      	mov	r3, r0
    973a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    973e:	2b00      	cmp	r3, #0
    9740:	d0f8      	beq.n	9734 <rf_on+0x64>

	ssp_start();
    9742:	f7ff ff7d 	bl	9640 <ssp_start>

	cc2400_strobe(SFSON);
    9746:	2061      	movs	r0, #97	; 0x61
    9748:	f000 fe4c 	bl	a3e4 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    974c:	bf00      	nop
    974e:	f000 fe3f 	bl	a3d0 <cc2400_status>
    9752:	4603      	mov	r3, r0
    9754:	f003 0304 	and.w	r3, r3, #4
    9758:	2b00      	cmp	r3, #0
    975a:	d0f8      	beq.n	974e <rf_on+0x7e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    975c:	bf00      	nop
    975e:	200e      	movs	r0, #14
    9760:	f000 fd68 	bl	a234 <cc2400_get>
    9764:	4603      	mov	r3, r0
    9766:	f003 031f 	and.w	r3, r3, #31
    976a:	2b0f      	cmp	r3, #15
    976c:	d1f7      	bne.n	975e <rf_on+0x8e>

	cc2400_strobe(SRX);
    976e:	2062      	movs	r0, #98	; 0x62
    9770:	f000 fe38 	bl	a3e4 <cc2400_strobe>
}
    9774:	bd80      	pop	{r7, pc}
    9776:	bf00      	nop
    9778:	1000049c 	.word	0x1000049c

0000977c <do_rx>:

void do_rx(ego_packet_t *packet) {
    977c:	b480      	push	{r7}
    977e:	b085      	sub	sp, #20
    9780:	af00      	add	r7, sp, #0
    9782:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    9784:	2300      	movs	r3, #0
    9786:	60fb      	str	r3, [r7, #12]
    9788:	e011      	b.n	97ae <do_rx+0x32>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    978a:	bf00      	nop
    978c:	4b0c      	ldr	r3, [pc, #48]	; (97c0 <do_rx+0x44>)
    978e:	681b      	ldr	r3, [r3, #0]
    9790:	f003 0304 	and.w	r3, r3, #4
    9794:	2b00      	cmp	r3, #0
    9796:	d0f9      	beq.n	978c <do_rx+0x10>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    9798:	4b0a      	ldr	r3, [pc, #40]	; (97c4 <do_rx+0x48>)
    979a:	681b      	ldr	r3, [r3, #0]
    979c:	b2d9      	uxtb	r1, r3
    979e:	687a      	ldr	r2, [r7, #4]
    97a0:	68fb      	ldr	r3, [r7, #12]
    97a2:	4413      	add	r3, r2
    97a4:	460a      	mov	r2, r1
    97a6:	701a      	strb	r2, [r3, #0]
	cc2400_strobe(SRX);
}

void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    97a8:	68fb      	ldr	r3, [r7, #12]
    97aa:	3301      	adds	r3, #1
    97ac:	60fb      	str	r3, [r7, #12]
    97ae:	68fb      	ldr	r3, [r7, #12]
    97b0:	2b23      	cmp	r3, #35	; 0x23
    97b2:	ddea      	ble.n	978a <do_rx+0xe>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    97b4:	3714      	adds	r7, #20
    97b6:	46bd      	mov	sp, r7
    97b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    97bc:	4770      	bx	lr
    97be:	bf00      	nop
    97c0:	4003000c 	.word	0x4003000c
    97c4:	40030008 	.word	0x40030008

000097c8 <sync_received>:

static inline int sync_received(void) {
    97c8:	b580      	push	{r7, lr}
    97ca:	af00      	add	r7, sp, #0
	return cc2400_status() & SYNC_RECEIVED;
    97cc:	f000 fe00 	bl	a3d0 <cc2400_status>
    97d0:	4603      	mov	r3, r0
    97d2:	f003 0310 	and.w	r3, r3, #16
}
    97d6:	4618      	mov	r0, r3
    97d8:	bd80      	pop	{r7, pc}
    97da:	bf00      	nop

000097dc <sleep_ms>:

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    97dc:	b480      	push	{r7}
    97de:	b083      	sub	sp, #12
    97e0:	af00      	add	r7, sp, #0
    97e2:	6078      	str	r0, [r7, #4]
    97e4:	6039      	str	r1, [r7, #0]
	state->sleep_start = CLK100NS;
    97e6:	4b0c      	ldr	r3, [pc, #48]	; (9818 <sleep_ms+0x3c>)
    97e8:	681b      	ldr	r3, [r3, #0]
    97ea:	f3c3 0313 	ubfx	r3, r3, #0, #20
    97ee:	f640 4235 	movw	r2, #3125	; 0xc35
    97f2:	fb02 f203 	mul.w	r2, r2, r3
    97f6:	4b09      	ldr	r3, [pc, #36]	; (981c <sleep_ms+0x40>)
    97f8:	681b      	ldr	r3, [r3, #0]
    97fa:	441a      	add	r2, r3
    97fc:	687b      	ldr	r3, [r7, #4]
    97fe:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    9800:	683b      	ldr	r3, [r7, #0]
    9802:	f242 7210 	movw	r2, #10000	; 0x2710
    9806:	fb02 f203 	mul.w	r2, r2, r3
    980a:	687b      	ldr	r3, [r7, #4]
    980c:	60da      	str	r2, [r3, #12]
}
    980e:	370c      	adds	r7, #12
    9810:	46bd      	mov	sp, r7
    9812:	f85d 7b04 	ldr.w	r7, [sp], #4
    9816:	4770      	bx	lr
    9818:	10000be4 	.word	0x10000be4
    981c:	40004008 	.word	0x40004008

00009820 <sleep_ms_anchor>:

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
    9820:	b480      	push	{r7}
    9822:	b083      	sub	sp, #12
    9824:	af00      	add	r7, sp, #0
    9826:	6078      	str	r0, [r7, #4]
    9828:	6039      	str	r1, [r7, #0]
	state->sleep_start = state->anchor;
    982a:	687b      	ldr	r3, [r7, #4]
    982c:	699a      	ldr	r2, [r3, #24]
    982e:	687b      	ldr	r3, [r7, #4]
    9830:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    9832:	683b      	ldr	r3, [r7, #0]
    9834:	f242 7210 	movw	r2, #10000	; 0x2710
    9838:	fb02 f203 	mul.w	r2, r2, r3
    983c:	687b      	ldr	r3, [r7, #4]
    983e:	60da      	str	r2, [r3, #12]
}
    9840:	370c      	adds	r7, #12
    9842:	46bd      	mov	sp, r7
    9844:	f85d 7b04 	ldr.w	r7, [sp], #4
    9848:	4770      	bx	lr
    984a:	bf00      	nop

0000984c <sleep_elapsed>:

static inline int sleep_elapsed(ego_fsm_state_t *state) {
    984c:	b480      	push	{r7}
    984e:	b085      	sub	sp, #20
    9850:	af00      	add	r7, sp, #0
    9852:	6078      	str	r0, [r7, #4]
	u32 now = CLK100NS;
    9854:	4b13      	ldr	r3, [pc, #76]	; (98a4 <sleep_elapsed+0x58>)
    9856:	681b      	ldr	r3, [r3, #0]
    9858:	f3c3 0313 	ubfx	r3, r3, #0, #20
    985c:	f640 4235 	movw	r2, #3125	; 0xc35
    9860:	fb02 f203 	mul.w	r2, r2, r3
    9864:	4b10      	ldr	r3, [pc, #64]	; (98a8 <sleep_elapsed+0x5c>)
    9866:	681b      	ldr	r3, [r3, #0]
    9868:	4413      	add	r3, r2
    986a:	60fb      	str	r3, [r7, #12]
	if (now < state->sleep_start)
    986c:	687b      	ldr	r3, [r7, #4]
    986e:	689a      	ldr	r2, [r3, #8]
    9870:	68fb      	ldr	r3, [r7, #12]
    9872:	429a      	cmp	r2, r3
    9874:	d905      	bls.n	9882 <sleep_elapsed+0x36>
		now += 3276800000;
    9876:	68fb      	ldr	r3, [r7, #12]
    9878:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    987c:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    9880:	60fb      	str	r3, [r7, #12]
	return (now - state->sleep_start) >= state->sleep_duration;
    9882:	687b      	ldr	r3, [r7, #4]
    9884:	689b      	ldr	r3, [r3, #8]
    9886:	68fa      	ldr	r2, [r7, #12]
    9888:	1ad2      	subs	r2, r2, r3
    988a:	687b      	ldr	r3, [r7, #4]
    988c:	68db      	ldr	r3, [r3, #12]
    988e:	429a      	cmp	r2, r3
    9890:	bf2c      	ite	cs
    9892:	2301      	movcs	r3, #1
    9894:	2300      	movcc	r3, #0
    9896:	b2db      	uxtb	r3, r3
}
    9898:	4618      	mov	r0, r3
    989a:	3714      	adds	r7, #20
    989c:	46bd      	mov	sp, r7
    989e:	f85d 7b04 	ldr.w	r7, [sp], #4
    98a2:	4770      	bx	lr
    98a4:	10000be4 	.word	0x10000be4
    98a8:	40004008 	.word	0x40004008

000098ac <nop_state>:

/////////////
// states

// do nothing
void nop_state(ego_fsm_state_t *state) {
    98ac:	b480      	push	{r7}
    98ae:	b083      	sub	sp, #12
    98b0:	af00      	add	r7, sp, #0
    98b2:	6078      	str	r0, [r7, #4]
}
    98b4:	370c      	adds	r7, #12
    98b6:	46bd      	mov	sp, r7
    98b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    98bc:	4770      	bx	lr
    98be:	bf00      	nop

000098c0 <init_state>:

// used in follow and jam mode, override the channel supplied by user
void init_state(ego_fsm_state_t *state) {
    98c0:	b480      	push	{r7}
    98c2:	b083      	sub	sp, #12
    98c4:	af00      	add	r7, sp, #0
    98c6:	6078      	str	r0, [r7, #4]
	state->channel_index = 0;
    98c8:	687b      	ldr	r3, [r7, #4]
    98ca:	2200      	movs	r2, #0
    98cc:	605a      	str	r2, [r3, #4]
	channel = channels[state->channel_index];
    98ce:	687b      	ldr	r3, [r7, #4]
    98d0:	685b      	ldr	r3, [r3, #4]
    98d2:	4a06      	ldr	r2, [pc, #24]	; (98ec <init_state+0x2c>)
    98d4:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    98d8:	4b05      	ldr	r3, [pc, #20]	; (98f0 <init_state+0x30>)
    98da:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    98dc:	687b      	ldr	r3, [r7, #4]
    98de:	2201      	movs	r2, #1
    98e0:	701a      	strb	r2, [r3, #0]
}
    98e2:	370c      	adds	r7, #12
    98e4:	46bd      	mov	sp, r7
    98e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    98ea:	4770      	bx	lr
    98ec:	100008b0 	.word	0x100008b0
    98f0:	1000049c 	.word	0x1000049c

000098f4 <start_rf_state>:

void start_rf_state(ego_fsm_state_t *state) {
    98f4:	b580      	push	{r7, lr}
    98f6:	b082      	sub	sp, #8
    98f8:	af00      	add	r7, sp, #0
    98fa:	6078      	str	r0, [r7, #4]
	rf_on();
    98fc:	f7ff fee8 	bl	96d0 <rf_on>
	state->state = EGO_ST_CAP;
    9900:	687b      	ldr	r3, [r7, #4]
    9902:	2202      	movs	r2, #2
    9904:	701a      	strb	r2, [r3, #0]
}
    9906:	3708      	adds	r7, #8
    9908:	46bd      	mov	sp, r7
    990a:	bd80      	pop	{r7, pc}

0000990c <cap_state>:

void cap_state(ego_fsm_state_t *state) {
    990c:	b580      	push	{r7, lr}
    990e:	b08c      	sub	sp, #48	; 0x30
    9910:	af00      	add	r7, sp, #0
    9912:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    9914:	f107 0308 	add.w	r3, r7, #8
    9918:	2200      	movs	r2, #0
    991a:	601a      	str	r2, [r3, #0]
    991c:	3304      	adds	r3, #4
    991e:	2200      	movs	r2, #0
    9920:	601a      	str	r2, [r3, #0]
    9922:	3304      	adds	r3, #4
    9924:	2200      	movs	r2, #0
    9926:	601a      	str	r2, [r3, #0]
    9928:	3304      	adds	r3, #4
    992a:	2200      	movs	r2, #0
    992c:	601a      	str	r2, [r3, #0]
    992e:	3304      	adds	r3, #4
    9930:	2200      	movs	r2, #0
    9932:	601a      	str	r2, [r3, #0]
    9934:	3304      	adds	r3, #4
    9936:	2200      	movs	r2, #0
    9938:	601a      	str	r2, [r3, #0]
    993a:	3304      	adds	r3, #4
    993c:	2200      	movs	r2, #0
    993e:	601a      	str	r2, [r3, #0]
    9940:	3304      	adds	r3, #4
    9942:	2200      	movs	r2, #0
    9944:	601a      	str	r2, [r3, #0]
    9946:	3304      	adds	r3, #4
    9948:	2200      	movs	r2, #0
    994a:	601a      	str	r2, [r3, #0]
    994c:	3304      	adds	r3, #4
    994e:	2200      	movs	r2, #0
    9950:	601a      	str	r2, [r3, #0]
    9952:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    9954:	4b23      	ldr	r3, [pc, #140]	; (99e4 <cap_state+0xd8>)
    9956:	681b      	ldr	r3, [r3, #0]
    9958:	f3c3 0313 	ubfx	r3, r3, #0, #20
    995c:	f640 4235 	movw	r2, #3125	; 0xc35
    9960:	fb02 f203 	mul.w	r2, r2, r3
    9964:	4b20      	ldr	r3, [pc, #128]	; (99e8 <cap_state+0xdc>)
    9966:	681b      	ldr	r3, [r3, #0]
    9968:	4413      	add	r3, r2
	rf_on();
	state->state = EGO_ST_CAP;
}

void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    996a:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    996c:	6878      	ldr	r0, [r7, #4]
    996e:	f7ff ff6d 	bl	984c <sleep_elapsed>
    9972:	4603      	mov	r3, r0
    9974:	2b00      	cmp	r3, #0
    9976:	d006      	beq.n	9986 <cap_state+0x7a>
		sleep_ms(state, 4);
    9978:	6878      	ldr	r0, [r7, #4]
    997a:	2104      	movs	r1, #4
    997c:	f7ff ff2e 	bl	97dc <sleep_ms>
		state->state = EGO_ST_SLEEP;
    9980:	687b      	ldr	r3, [r7, #4]
    9982:	2203      	movs	r2, #3
    9984:	701a      	strb	r2, [r3, #0]
	}

	if (sync_received()) {
    9986:	f7ff ff1f 	bl	97c8 <sync_received>
    998a:	4603      	mov	r3, r0
    998c:	2b00      	cmp	r3, #0
    998e:	d019      	beq.n	99c4 <cap_state+0xb8>
		RXLED_SET;
    9990:	4b16      	ldr	r3, [pc, #88]	; (99ec <cap_state+0xe0>)
    9992:	2210      	movs	r2, #16
    9994:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    9996:	f107 0308 	add.w	r3, r7, #8
    999a:	4618      	mov	r0, r3
    999c:	f7ff feee 	bl	977c <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    99a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    99a2:	f107 0208 	add.w	r2, r7, #8
    99a6:	2006      	movs	r0, #6
    99a8:	4611      	mov	r1, r2
    99aa:	461a      	mov	r2, r3
    99ac:	f7fa fe4a 	bl	4644 <enqueue_with_ts>
		RXLED_CLR;
    99b0:	4b0f      	ldr	r3, [pc, #60]	; (99f0 <cap_state+0xe4>)
    99b2:	2210      	movs	r2, #16
    99b4:	601a      	str	r2, [r3, #0]

		sleep_ms(state, 6);
    99b6:	6878      	ldr	r0, [r7, #4]
    99b8:	2106      	movs	r1, #6
    99ba:	f7ff ff0f 	bl	97dc <sleep_ms>
		state->state = EGO_ST_SLEEP;
    99be:	687b      	ldr	r3, [r7, #4]
    99c0:	2203      	movs	r2, #3
    99c2:	701a      	strb	r2, [r3, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    99c4:	687b      	ldr	r3, [r7, #4]
    99c6:	781b      	ldrb	r3, [r3, #0]
    99c8:	2b02      	cmp	r3, #2
    99ca:	d007      	beq.n	99dc <cap_state+0xd0>
		cc2400_strobe(SRFOFF);
    99cc:	2064      	movs	r0, #100	; 0x64
    99ce:	f000 fd09 	bl	a3e4 <cc2400_strobe>
		ssp_stop();
    99d2:	f7ff fe4f 	bl	9674 <ssp_stop>
		state->timer_active = 1;
    99d6:	687b      	ldr	r3, [r7, #4]
    99d8:	2201      	movs	r2, #1
    99da:	611a      	str	r2, [r3, #16]
	}
}
    99dc:	3730      	adds	r7, #48	; 0x30
    99de:	46bd      	mov	sp, r7
    99e0:	bd80      	pop	{r7, pc}
    99e2:	bf00      	nop
    99e4:	10000be4 	.word	0x10000be4
    99e8:	40004008 	.word	0x40004008
    99ec:	2009c038 	.word	0x2009c038
    99f0:	2009c03c 	.word	0x2009c03c

000099f4 <sleep_state>:

void sleep_state(ego_fsm_state_t *state) {
    99f4:	b580      	push	{r7, lr}
    99f6:	b082      	sub	sp, #8
    99f8:	af00      	add	r7, sp, #0
    99fa:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    99fc:	6878      	ldr	r0, [r7, #4]
    99fe:	f7ff ff25 	bl	984c <sleep_elapsed>
    9a02:	4603      	mov	r3, r0
    9a04:	2b00      	cmp	r3, #0
    9a06:	d01e      	beq.n	9a46 <sleep_state+0x52>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    9a08:	687b      	ldr	r3, [r7, #4]
    9a0a:	685b      	ldr	r3, [r3, #4]
    9a0c:	1c5a      	adds	r2, r3, #1
    9a0e:	4b0f      	ldr	r3, [pc, #60]	; (9a4c <sleep_state+0x58>)
    9a10:	4013      	ands	r3, r2
    9a12:	2b00      	cmp	r3, #0
    9a14:	da03      	bge.n	9a1e <sleep_state+0x2a>
    9a16:	3b01      	subs	r3, #1
    9a18:	f063 0303 	orn	r3, r3, #3
    9a1c:	3301      	adds	r3, #1
    9a1e:	461a      	mov	r2, r3
    9a20:	687b      	ldr	r3, [r7, #4]
    9a22:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    9a24:	687b      	ldr	r3, [r7, #4]
    9a26:	685b      	ldr	r3, [r3, #4]
    9a28:	4a09      	ldr	r2, [pc, #36]	; (9a50 <sleep_state+0x5c>)
    9a2a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    9a2e:	4b09      	ldr	r3, [pc, #36]	; (9a54 <sleep_state+0x60>)
    9a30:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    9a32:	6878      	ldr	r0, [r7, #4]
    9a34:	2107      	movs	r1, #7
    9a36:	f7ff fed1 	bl	97dc <sleep_ms>
		state->timer_active = 1;
    9a3a:	687b      	ldr	r3, [r7, #4]
    9a3c:	2201      	movs	r2, #1
    9a3e:	611a      	str	r2, [r3, #16]

		state->state = EGO_ST_START_RX;
    9a40:	687b      	ldr	r3, [r7, #4]
    9a42:	2201      	movs	r2, #1
    9a44:	701a      	strb	r2, [r3, #0]
	}
}
    9a46:	3708      	adds	r7, #8
    9a48:	46bd      	mov	sp, r7
    9a4a:	bd80      	pop	{r7, pc}
    9a4c:	80000003 	.word	0x80000003
    9a50:	100008b0 	.word	0x100008b0
    9a54:	1000049c 	.word	0x1000049c

00009a58 <continuous_init_state>:

// continuous cap states (reuses START_RX state)
void continuous_init_state(ego_fsm_state_t *state) {
    9a58:	b480      	push	{r7}
    9a5a:	b083      	sub	sp, #12
    9a5c:	af00      	add	r7, sp, #0
    9a5e:	6078      	str	r0, [r7, #4]
	state->state = EGO_ST_START_RX;
    9a60:	687b      	ldr	r3, [r7, #4]
    9a62:	2201      	movs	r2, #1
    9a64:	701a      	strb	r2, [r3, #0]
}
    9a66:	370c      	adds	r7, #12
    9a68:	46bd      	mov	sp, r7
    9a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a6e:	4770      	bx	lr

00009a70 <continuous_cap_state>:

void continuous_cap_state(ego_fsm_state_t *state) {
    9a70:	b580      	push	{r7, lr}
    9a72:	b08c      	sub	sp, #48	; 0x30
    9a74:	af00      	add	r7, sp, #0
    9a76:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    9a78:	f107 0308 	add.w	r3, r7, #8
    9a7c:	2200      	movs	r2, #0
    9a7e:	601a      	str	r2, [r3, #0]
    9a80:	3304      	adds	r3, #4
    9a82:	2200      	movs	r2, #0
    9a84:	601a      	str	r2, [r3, #0]
    9a86:	3304      	adds	r3, #4
    9a88:	2200      	movs	r2, #0
    9a8a:	601a      	str	r2, [r3, #0]
    9a8c:	3304      	adds	r3, #4
    9a8e:	2200      	movs	r2, #0
    9a90:	601a      	str	r2, [r3, #0]
    9a92:	3304      	adds	r3, #4
    9a94:	2200      	movs	r2, #0
    9a96:	601a      	str	r2, [r3, #0]
    9a98:	3304      	adds	r3, #4
    9a9a:	2200      	movs	r2, #0
    9a9c:	601a      	str	r2, [r3, #0]
    9a9e:	3304      	adds	r3, #4
    9aa0:	2200      	movs	r2, #0
    9aa2:	601a      	str	r2, [r3, #0]
    9aa4:	3304      	adds	r3, #4
    9aa6:	2200      	movs	r2, #0
    9aa8:	601a      	str	r2, [r3, #0]
    9aaa:	3304      	adds	r3, #4
    9aac:	2200      	movs	r2, #0
    9aae:	601a      	str	r2, [r3, #0]
    9ab0:	3304      	adds	r3, #4
    9ab2:	2200      	movs	r2, #0
    9ab4:	601a      	str	r2, [r3, #0]
    9ab6:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    9ab8:	4b1e      	ldr	r3, [pc, #120]	; (9b34 <continuous_cap_state+0xc4>)
    9aba:	681b      	ldr	r3, [r3, #0]
    9abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9ac0:	f640 4235 	movw	r2, #3125	; 0xc35
    9ac4:	fb02 f203 	mul.w	r2, r2, r3
    9ac8:	4b1b      	ldr	r3, [pc, #108]	; (9b38 <continuous_cap_state+0xc8>)
    9aca:	681b      	ldr	r3, [r3, #0]
    9acc:	4413      	add	r3, r2
void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    9ace:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    9ad0:	f7ff fe7a 	bl	97c8 <sync_received>
    9ad4:	4603      	mov	r3, r0
    9ad6:	2b00      	cmp	r3, #0
    9ad8:	d029      	beq.n	9b2e <continuous_cap_state+0xbe>
		RXLED_SET;
    9ada:	4b18      	ldr	r3, [pc, #96]	; (9b3c <continuous_cap_state+0xcc>)
    9adc:	2210      	movs	r2, #16
    9ade:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    9ae0:	f107 0308 	add.w	r3, r7, #8
    9ae4:	4618      	mov	r0, r3
    9ae6:	f7ff fe49 	bl	977c <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    9aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9aec:	f107 0208 	add.w	r2, r7, #8
    9af0:	2006      	movs	r0, #6
    9af2:	4611      	mov	r1, r2
    9af4:	461a      	mov	r2, r3
    9af6:	f7fa fda5 	bl	4644 <enqueue_with_ts>
		RXLED_CLR;
    9afa:	4b11      	ldr	r3, [pc, #68]	; (9b40 <continuous_cap_state+0xd0>)
    9afc:	2210      	movs	r2, #16
    9afe:	601a      	str	r2, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    9b00:	2061      	movs	r0, #97	; 0x61
    9b02:	f000 fc6f 	bl	a3e4 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    9b06:	bf00      	nop
    9b08:	f000 fc62 	bl	a3d0 <cc2400_status>
    9b0c:	4603      	mov	r3, r0
    9b0e:	f003 0304 	and.w	r3, r3, #4
    9b12:	2b00      	cmp	r3, #0
    9b14:	d0f8      	beq.n	9b08 <continuous_cap_state+0x98>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9b16:	bf00      	nop
    9b18:	200e      	movs	r0, #14
    9b1a:	f000 fb8b 	bl	a234 <cc2400_get>
    9b1e:	4603      	mov	r3, r0
    9b20:	f003 031f 	and.w	r3, r3, #31
    9b24:	2b0f      	cmp	r3, #15
    9b26:	d1f7      	bne.n	9b18 <continuous_cap_state+0xa8>
		cc2400_strobe(SRX);
    9b28:	2062      	movs	r0, #98	; 0x62
    9b2a:	f000 fc5b 	bl	a3e4 <cc2400_strobe>
	}
}
    9b2e:	3730      	adds	r7, #48	; 0x30
    9b30:	46bd      	mov	sp, r7
    9b32:	bd80      	pop	{r7, pc}
    9b34:	10000be4 	.word	0x10000be4
    9b38:	40004008 	.word	0x40004008
    9b3c:	2009c038 	.word	0x2009c038
    9b40:	2009c03c 	.word	0x2009c03c

00009b44 <jam_cap_state>:

// jammer states
void jam_cap_state(ego_fsm_state_t *state) {
    9b44:	b580      	push	{r7, lr}
    9b46:	b082      	sub	sp, #8
    9b48:	af00      	add	r7, sp, #0
    9b4a:	6078      	str	r0, [r7, #4]
	if (sync_received()) {
    9b4c:	f7ff fe3c 	bl	97c8 <sync_received>
    9b50:	4603      	mov	r3, r0
    9b52:	2b00      	cmp	r3, #0
    9b54:	d012      	beq.n	9b7c <jam_cap_state+0x38>
		state->state = EGO_ST_START_JAMMING;
    9b56:	687b      	ldr	r3, [r7, #4]
    9b58:	2204      	movs	r2, #4
    9b5a:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 1;
    9b5c:	687b      	ldr	r3, [r7, #4]
    9b5e:	2201      	movs	r2, #1
    9b60:	615a      	str	r2, [r3, #20]
		state->anchor = CLK100NS;
    9b62:	4b16      	ldr	r3, [pc, #88]	; (9bbc <jam_cap_state+0x78>)
    9b64:	681b      	ldr	r3, [r3, #0]
    9b66:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9b6a:	f640 4235 	movw	r2, #3125	; 0xc35
    9b6e:	fb02 f203 	mul.w	r2, r2, r3
    9b72:	4b13      	ldr	r3, [pc, #76]	; (9bc0 <jam_cap_state+0x7c>)
    9b74:	681b      	ldr	r3, [r3, #0]
    9b76:	441a      	add	r2, r3
    9b78:	687b      	ldr	r3, [r7, #4]
    9b7a:	619a      	str	r2, [r3, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    9b7c:	687b      	ldr	r3, [r7, #4]
    9b7e:	691b      	ldr	r3, [r3, #16]
    9b80:	2b00      	cmp	r3, #0
    9b82:	d00f      	beq.n	9ba4 <jam_cap_state+0x60>
    9b84:	6878      	ldr	r0, [r7, #4]
    9b86:	f7ff fe61 	bl	984c <sleep_elapsed>
    9b8a:	4603      	mov	r3, r0
    9b8c:	2b00      	cmp	r3, #0
    9b8e:	d009      	beq.n	9ba4 <jam_cap_state+0x60>
		state->state = EGO_ST_START_JAMMING;
    9b90:	687b      	ldr	r3, [r7, #4]
    9b92:	2204      	movs	r2, #4
    9b94:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 0;
    9b96:	687b      	ldr	r3, [r7, #4]
    9b98:	2200      	movs	r2, #0
    9b9a:	615a      	str	r2, [r3, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    9b9c:	6878      	ldr	r0, [r7, #4]
    9b9e:	210b      	movs	r1, #11
    9ba0:	f7ff fe1c 	bl	97dc <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    9ba4:	687b      	ldr	r3, [r7, #4]
    9ba6:	781b      	ldrb	r3, [r3, #0]
    9ba8:	2b02      	cmp	r3, #2
    9baa:	d004      	beq.n	9bb6 <jam_cap_state+0x72>
		cc2400_strobe(SRFOFF);
    9bac:	2064      	movs	r0, #100	; 0x64
    9bae:	f000 fc19 	bl	a3e4 <cc2400_strobe>
		ssp_stop();
    9bb2:	f7ff fd5f 	bl	9674 <ssp_stop>
	}
}
    9bb6:	3708      	adds	r7, #8
    9bb8:	46bd      	mov	sp, r7
    9bba:	bd80      	pop	{r7, pc}
    9bbc:	10000be4 	.word	0x10000be4
    9bc0:	40004008 	.word	0x40004008

00009bc4 <start_jamming_state>:

void start_jamming_state(ego_fsm_state_t *state) {
    9bc4:	b580      	push	{r7, lr}
    9bc6:	b082      	sub	sp, #8
    9bc8:	af00      	add	r7, sp, #0
    9bca:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    9bcc:	200d      	movs	r0, #13
    9bce:	f647 71ff 	movw	r1, #32767	; 0x7fff
    9bd2:	f000 fb45 	bl	a260 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    9bd6:	2012      	movs	r0, #18
    9bd8:	f642 3122 	movw	r1, #11042	; 0x2b22
    9bdc:	f000 fb40 	bl	a260 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    9be0:	2014      	movs	r0, #20
    9be2:	f243 314b 	movw	r1, #13131	; 0x334b
    9be6:	f000 fb3b 	bl	a260 <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    9bea:	2020      	movs	r0, #32
    9bec:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    9bf0:	f000 fb36 	bl	a260 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    9bf4:	4b21      	ldr	r3, [pc, #132]	; (9c7c <start_jamming_state+0xb8>)
    9bf6:	881b      	ldrh	r3, [r3, #0]
    9bf8:	b29b      	uxth	r3, r3
    9bfa:	2002      	movs	r0, #2
    9bfc:	4619      	mov	r1, r3
    9bfe:	f000 fb2f 	bl	a260 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    9c02:	2003      	movs	r0, #3
    9c04:	2126      	movs	r1, #38	; 0x26
    9c06:	f000 fb2b 	bl	a260 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    9c0a:	2021      	movs	r0, #33	; 0x21
    9c0c:	2103      	movs	r1, #3
    9c0e:	f000 fb27 	bl	a260 <cc2400_set>
	cc2400_set(FREND, 0xf);
    9c12:	2005      	movs	r0, #5
    9c14:	210f      	movs	r1, #15
    9c16:	f000 fb23 	bl	a260 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    9c1a:	bf00      	nop
    9c1c:	f000 fbd8 	bl	a3d0 <cc2400_status>
    9c20:	4603      	mov	r3, r0
    9c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9c26:	2b00      	cmp	r3, #0
    9c28:	d0f8      	beq.n	9c1c <start_jamming_state+0x58>

	cc2400_strobe(SFSON);
    9c2a:	2061      	movs	r0, #97	; 0x61
    9c2c:	f000 fbda 	bl	a3e4 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    9c30:	bf00      	nop
    9c32:	f000 fbcd 	bl	a3d0 <cc2400_status>
    9c36:	4603      	mov	r3, r0
    9c38:	f003 0304 	and.w	r3, r3, #4
    9c3c:	2b00      	cmp	r3, #0
    9c3e:	d0f8      	beq.n	9c32 <start_jamming_state+0x6e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9c40:	bf00      	nop
    9c42:	200e      	movs	r0, #14
    9c44:	f000 faf6 	bl	a234 <cc2400_get>
    9c48:	4603      	mov	r3, r0
    9c4a:	f003 031f 	and.w	r3, r3, #31
    9c4e:	2b0f      	cmp	r3, #15
    9c50:	d1f7      	bne.n	9c42 <start_jamming_state+0x7e>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    9c52:	4b0b      	ldr	r3, [pc, #44]	; (9c80 <start_jamming_state+0xbc>)
    9c54:	2280      	movs	r2, #128	; 0x80
    9c56:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    9c58:	2063      	movs	r0, #99	; 0x63
    9c5a:	f000 fbc3 	bl	a3e4 <cc2400_strobe>
	TXLED_SET;
    9c5e:	4b09      	ldr	r3, [pc, #36]	; (9c84 <start_jamming_state+0xc0>)
    9c60:	f44f 7280 	mov.w	r2, #256	; 0x100
    9c64:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    9c66:	687b      	ldr	r3, [r7, #4]
    9c68:	2205      	movs	r2, #5
    9c6a:	701a      	strb	r2, [r3, #0]
	sleep_ms_anchor(state, 2);
    9c6c:	6878      	ldr	r0, [r7, #4]
    9c6e:	2102      	movs	r1, #2
    9c70:	f7ff fdd6 	bl	9820 <sleep_ms_anchor>
}
    9c74:	3708      	adds	r7, #8
    9c76:	46bd      	mov	sp, r7
    9c78:	bd80      	pop	{r7, pc}
    9c7a:	bf00      	nop
    9c7c:	1000049c 	.word	0x1000049c
    9c80:	2009c058 	.word	0x2009c058
    9c84:	2009c038 	.word	0x2009c038

00009c88 <jamming_state>:

void jamming_state(ego_fsm_state_t *state) {
    9c88:	b580      	push	{r7, lr}
    9c8a:	b082      	sub	sp, #8
    9c8c:	af00      	add	r7, sp, #0
    9c8e:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    9c90:	6878      	ldr	r0, [r7, #4]
    9c92:	f7ff fddb 	bl	984c <sleep_elapsed>
    9c96:	4603      	mov	r3, r0
    9c98:	2b00      	cmp	r3, #0
    9c9a:	d025      	beq.n	9ce8 <jamming_state+0x60>
		cc2400_strobe(SRFOFF);
    9c9c:	2064      	movs	r0, #100	; 0x64
    9c9e:	f000 fba1 	bl	a3e4 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    9ca2:	4b13      	ldr	r3, [pc, #76]	; (9cf0 <jamming_state+0x68>)
    9ca4:	2280      	movs	r2, #128	; 0x80
    9ca6:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    9ca8:	4b12      	ldr	r3, [pc, #72]	; (9cf4 <jamming_state+0x6c>)
    9caa:	f44f 7280 	mov.w	r2, #256	; 0x100
    9cae:	601a      	str	r2, [r3, #0]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    9cb0:	687b      	ldr	r3, [r7, #4]
    9cb2:	685b      	ldr	r3, [r3, #4]
    9cb4:	1c5a      	adds	r2, r3, #1
    9cb6:	4b10      	ldr	r3, [pc, #64]	; (9cf8 <jamming_state+0x70>)
    9cb8:	4013      	ands	r3, r2
    9cba:	2b00      	cmp	r3, #0
    9cbc:	da03      	bge.n	9cc6 <jamming_state+0x3e>
    9cbe:	3b01      	subs	r3, #1
    9cc0:	f063 0303 	orn	r3, r3, #3
    9cc4:	3301      	adds	r3, #1
    9cc6:	461a      	mov	r2, r3
    9cc8:	687b      	ldr	r3, [r7, #4]
    9cca:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    9ccc:	687b      	ldr	r3, [r7, #4]
    9cce:	685b      	ldr	r3, [r3, #4]
    9cd0:	4a0a      	ldr	r2, [pc, #40]	; (9cfc <jamming_state+0x74>)
    9cd2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    9cd6:	4b0a      	ldr	r3, [pc, #40]	; (9d00 <jamming_state+0x78>)
    9cd8:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    9cda:	687b      	ldr	r3, [r7, #4]
    9cdc:	2203      	movs	r2, #3
    9cde:	701a      	strb	r2, [r3, #0]
		sleep_ms_anchor(state, 6);
    9ce0:	6878      	ldr	r0, [r7, #4]
    9ce2:	2106      	movs	r1, #6
    9ce4:	f7ff fd9c 	bl	9820 <sleep_ms_anchor>
	}
}
    9ce8:	3708      	adds	r7, #8
    9cea:	46bd      	mov	sp, r7
    9cec:	bd80      	pop	{r7, pc}
    9cee:	bf00      	nop
    9cf0:	2009c05c 	.word	0x2009c05c
    9cf4:	2009c03c 	.word	0x2009c03c
    9cf8:	80000003 	.word	0x80000003
    9cfc:	100008b0 	.word	0x100008b0
    9d00:	1000049c 	.word	0x1000049c

00009d04 <jam_sleep_state>:

void jam_sleep_state(ego_fsm_state_t *state) {
    9d04:	b580      	push	{r7, lr}
    9d06:	b082      	sub	sp, #8
    9d08:	af00      	add	r7, sp, #0
    9d0a:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    9d0c:	6878      	ldr	r0, [r7, #4]
    9d0e:	f7ff fd9d 	bl	984c <sleep_elapsed>
    9d12:	4603      	mov	r3, r0
    9d14:	2b00      	cmp	r3, #0
    9d16:	d009      	beq.n	9d2c <jam_sleep_state+0x28>
		state->state = EGO_ST_START_RX;
    9d18:	687b      	ldr	r3, [r7, #4]
    9d1a:	2201      	movs	r2, #1
    9d1c:	701a      	strb	r2, [r3, #0]
		state->timer_active = 1;
    9d1e:	687b      	ldr	r3, [r7, #4]
    9d20:	2201      	movs	r2, #1
    9d22:	611a      	str	r2, [r3, #16]
		sleep_ms_anchor(state, 11);
    9d24:	6878      	ldr	r0, [r7, #4]
    9d26:	210b      	movs	r1, #11
    9d28:	f7ff fd7a 	bl	9820 <sleep_ms_anchor>
	}
}
    9d2c:	3708      	adds	r7, #8
    9d2e:	46bd      	mov	sp, r7
    9d30:	bd80      	pop	{r7, pc}
    9d32:	bf00      	nop

00009d34 <ego_main>:

void ego_main(ego_mode_t mode) {
    9d34:	b5b0      	push	{r4, r5, r7, lr}
    9d36:	b09e      	sub	sp, #120	; 0x78
    9d38:	af00      	add	r7, sp, #0
    9d3a:	4603      	mov	r3, r0
    9d3c:	71fb      	strb	r3, [r7, #7]
	ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    9d3e:	f107 0358 	add.w	r3, r7, #88	; 0x58
    9d42:	2200      	movs	r2, #0
    9d44:	601a      	str	r2, [r3, #0]
    9d46:	3304      	adds	r3, #4
    9d48:	2200      	movs	r2, #0
    9d4a:	601a      	str	r2, [r3, #0]
    9d4c:	3304      	adds	r3, #4
    9d4e:	2200      	movs	r2, #0
    9d50:	601a      	str	r2, [r3, #0]
    9d52:	3304      	adds	r3, #4
    9d54:	2200      	movs	r2, #0
    9d56:	601a      	str	r2, [r3, #0]
    9d58:	3304      	adds	r3, #4
    9d5a:	2200      	movs	r2, #0
    9d5c:	601a      	str	r2, [r3, #0]
    9d5e:	3304      	adds	r3, #4
    9d60:	2200      	movs	r2, #0
    9d62:	601a      	str	r2, [r3, #0]
    9d64:	3304      	adds	r3, #4
    9d66:	2200      	movs	r2, #0
    9d68:	601a      	str	r2, [r3, #0]
    9d6a:	3304      	adds	r3, #4
		.channel_index = 0,
		.timer_active = 0,
	};

	// hopping connection following
	ego_st_handler follow_handler[] = {
    9d6c:	4b26      	ldr	r3, [pc, #152]	; (9e08 <ego_main+0xd4>)
    9d6e:	f107 043c 	add.w	r4, r7, #60	; 0x3c
    9d72:	461d      	mov	r5, r3
    9d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9d78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    9d7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		nop_state,
		nop_state,
	};

	// continuous rx on a single channel
	ego_st_handler continuous_rx_handler[] = {
    9d80:	4b22      	ldr	r3, [pc, #136]	; (9e0c <ego_main+0xd8>)
    9d82:	f107 0424 	add.w	r4, r7, #36	; 0x24
    9d86:	461d      	mov	r5, r3
    9d88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9d8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9d8c:	e895 0003 	ldmia.w	r5, {r0, r1}
    9d90:	e884 0003 	stmia.w	r4, {r0, r1}
		nop_state,
		nop_state,
	};

	// jamming
	ego_st_handler jam_handler[] = {
    9d94:	4b1e      	ldr	r3, [pc, #120]	; (9e10 <ego_main+0xdc>)
    9d96:	f107 040c 	add.w	r4, r7, #12
    9d9a:	461d      	mov	r5, r3
    9d9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    9d9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9da0:	e895 0003 	ldmia.w	r5, {r0, r1}
    9da4:	e884 0003 	stmia.w	r4, {r0, r1}
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    9da8:	79fb      	ldrb	r3, [r7, #7]
    9daa:	2b01      	cmp	r3, #1
    9dac:	d007      	beq.n	9dbe <ego_main+0x8a>
    9dae:	2b02      	cmp	r3, #2
    9db0:	d009      	beq.n	9dc6 <ego_main+0x92>
    9db2:	2b00      	cmp	r3, #0
    9db4:	d10b      	bne.n	9dce <ego_main+0x9a>
		case EGO_FOLLOW:
			handler = follow_handler;
    9db6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    9dba:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9dbc:	e00b      	b.n	9dd6 <ego_main+0xa2>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    9dbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
    9dc2:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9dc4:	e007      	b.n	9dd6 <ego_main+0xa2>
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    9dc6:	f107 030c 	add.w	r3, r7, #12
    9dca:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9dcc:	e003      	b.n	9dd6 <ego_main+0xa2>
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    9dce:	4b11      	ldr	r3, [pc, #68]	; (9e14 <ego_main+0xe0>)
    9dd0:	2200      	movs	r2, #0
    9dd2:	701a      	strb	r2, [r3, #0]
    9dd4:	e015      	b.n	9e02 <ego_main+0xce>
			return;
	}

	ego_init();
    9dd6:	f7ff fc61 	bl	969c <ego_init>

	while (1) {
		if (requested_mode != MODE_EGO)
    9dda:	4b0e      	ldr	r3, [pc, #56]	; (9e14 <ego_main+0xe0>)
    9ddc:	781b      	ldrb	r3, [r3, #0]
    9dde:	b2db      	uxtb	r3, r3
    9de0:	2b0d      	cmp	r3, #13
    9de2:	d003      	beq.n	9dec <ego_main+0xb8>
			break;
    9de4:	bf00      	nop
		handler[state.state](&state);
	}

	ego_deinit();
    9de6:	f7ff fc65 	bl	96b4 <ego_deinit>
    9dea:	e00a      	b.n	9e02 <ego_main+0xce>
	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
			break;
		handler[state.state](&state);
    9dec:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    9df0:	009b      	lsls	r3, r3, #2
    9df2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    9df4:	4413      	add	r3, r2
    9df6:	681b      	ldr	r3, [r3, #0]
    9df8:	f107 0258 	add.w	r2, r7, #88	; 0x58
    9dfc:	4610      	mov	r0, r2
    9dfe:	4798      	blx	r3
	}
    9e00:	e7eb      	b.n	9dda <ego_main+0xa6>

	ego_deinit();
}
    9e02:	3778      	adds	r7, #120	; 0x78
    9e04:	46bd      	mov	sp, r7
    9e06:	bdb0      	pop	{r4, r5, r7, pc}
    9e08:	0000c96c 	.word	0x0000c96c
    9e0c:	0000c988 	.word	0x0000c988
    9e10:	0000c9a0 	.word	0x0000c9a0
    9e14:	10000a3f 	.word	0x10000a3f

00009e18 <USB_IRQHandler>:
	
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
    9e18:	b580      	push	{r7, lr}
    9e1a:	af00      	add	r7, sp, #0
	USBHwISR();
    9e1c:	f000 ffb6 	bl	ad8c <USBHwISR>
}
    9e20:	bd80      	pop	{r7, pc}
    9e22:	bf00      	nop

00009e24 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    9e24:	b580      	push	{r7, lr}
    9e26:	b082      	sub	sp, #8
    9e28:	af00      	add	r7, sp, #0
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
    9e2a:	4b12      	ldr	r3, [pc, #72]	; (9e74 <Reset_Handler+0x50>)
    9e2c:	607b      	str	r3, [r7, #4]
	for(dest = &_data; dest < &_edata; )
    9e2e:	4b12      	ldr	r3, [pc, #72]	; (9e78 <Reset_Handler+0x54>)
    9e30:	603b      	str	r3, [r7, #0]
    9e32:	e007      	b.n	9e44 <Reset_Handler+0x20>
	{
		*dest++ = *src++;
    9e34:	683b      	ldr	r3, [r7, #0]
    9e36:	1d1a      	adds	r2, r3, #4
    9e38:	603a      	str	r2, [r7, #0]
    9e3a:	687a      	ldr	r2, [r7, #4]
    9e3c:	1d11      	adds	r1, r2, #4
    9e3e:	6079      	str	r1, [r7, #4]
    9e40:	6812      	ldr	r2, [r2, #0]
    9e42:	601a      	str	r2, [r3, #0]
{
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    9e44:	683b      	ldr	r3, [r7, #0]
    9e46:	4a0d      	ldr	r2, [pc, #52]	; (9e7c <Reset_Handler+0x58>)
    9e48:	4293      	cmp	r3, r2
    9e4a:	d3f3      	bcc.n	9e34 <Reset_Handler+0x10>
	{
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
    9e4c:	4b0c      	ldr	r3, [pc, #48]	; (9e80 <Reset_Handler+0x5c>)
    9e4e:	607b      	str	r3, [r7, #4]
	while (src < &_ebss)
    9e50:	e004      	b.n	9e5c <Reset_Handler+0x38>
	{
		*src++ = 0;
    9e52:	687b      	ldr	r3, [r7, #4]
    9e54:	1d1a      	adds	r2, r3, #4
    9e56:	607a      	str	r2, [r7, #4]
    9e58:	2200      	movs	r2, #0
    9e5a:	601a      	str	r2, [r3, #0]
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    9e5c:	687b      	ldr	r3, [r7, #4]
    9e5e:	4a09      	ldr	r2, [pc, #36]	; (9e84 <Reset_Handler+0x60>)
    9e60:	4293      	cmp	r3, r2
    9e62:	d3f6      	bcc.n	9e52 <Reset_Handler+0x2e>
	{
		*src++ = 0;
	}

    __libc_init_array();
    9e64:	f7fa f960 	bl	4128 <__libc_init_array>
    
    // Set the vector table location.
    SCB_VTOR = &_interrupt_vector_table;
    9e68:	4b07      	ldr	r3, [pc, #28]	; (9e88 <Reset_Handler+0x64>)
    9e6a:	4a08      	ldr	r2, [pc, #32]	; (9e8c <Reset_Handler+0x68>)
    9e6c:	601a      	str	r2, [r3, #0]
    
	main();
    9e6e:	f7fe fb93 	bl	8598 <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    9e72:	e7fe      	b.n	9e72 <Reset_Handler+0x4e>
    9e74:	0000ca08 	.word	0x0000ca08
    9e78:	10000020 	.word	0x10000020
    9e7c:	1000095e 	.word	0x1000095e
    9e80:	10000960 	.word	0x10000960
    9e84:	10003288 	.word	0x10003288
    9e88:	e000ed08 	.word	0xe000ed08
    9e8c:	00004000 	.word	0x00004000

00009e90 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    9e90:	b480      	push	{r7}
    9e92:	af00      	add	r7, sp, #0
    9e94:	e7fe      	b.n	9e94 <ADC_IRQHandler+0x4>
    9e96:	bf00      	nop

00009e98 <wait>:
 */

#include "ubertooth.h"
/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
    9e98:	b580      	push	{r7, lr}
    9e9a:	b082      	sub	sp, #8
    9e9c:	af00      	add	r7, sp, #0
    9e9e:	4603      	mov	r3, r0
    9ea0:	71fb      	strb	r3, [r7, #7]
	wait_us(seconds * 1000000);
    9ea2:	79fb      	ldrb	r3, [r7, #7]
    9ea4:	4a04      	ldr	r2, [pc, #16]	; (9eb8 <wait+0x20>)
    9ea6:	fb02 f303 	mul.w	r3, r2, r3
    9eaa:	4618      	mov	r0, r3
    9eac:	f000 f818 	bl	9ee0 <wait_us>
}
    9eb0:	3708      	adds	r7, #8
    9eb2:	46bd      	mov	sp, r7
    9eb4:	bd80      	pop	{r7, pc}
    9eb6:	bf00      	nop
    9eb8:	000f4240 	.word	0x000f4240

00009ebc <rbit>:
{
	wait_us(ms * 1000);
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
    9ebc:	b480      	push	{r7}
    9ebe:	b085      	sub	sp, #20
    9ec0:	af00      	add	r7, sp, #0
    9ec2:	6078      	str	r0, [r7, #4]
  u32 result = 0;
    9ec4:	2300      	movs	r3, #0
    9ec6:	60fb      	str	r3, [r7, #12]
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    9ec8:	687b      	ldr	r3, [r7, #4]
    9eca:	fa93 f3a3 	rbit	r3, r3
    9ece:	60fb      	str	r3, [r7, #12]
  return result;
    9ed0:	68fb      	ldr	r3, [r7, #12]
}
    9ed2:	4618      	mov	r0, r3
    9ed4:	3714      	adds	r7, #20
    9ed6:	46bd      	mov	sp, r7
    9ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9edc:	4770      	bx	lr
    9ede:	bf00      	nop

00009ee0 <wait_us>:

/* delay a number of microseconds while on internal oscillator (4 MHz) */
/* we only have a resolution of 1000/400, so to the nearest 2.5        */
static volatile u32 wait_us_counter;
void wait_us(u32 us)
{
    9ee0:	b480      	push	{r7}
    9ee2:	b083      	sub	sp, #12
    9ee4:	af00      	add	r7, sp, #0
    9ee6:	6078      	str	r0, [r7, #4]
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    9ee8:	687b      	ldr	r3, [r7, #4]
    9eea:	089a      	lsrs	r2, r3, #2
    9eec:	687b      	ldr	r3, [r7, #4]
    9eee:	08db      	lsrs	r3, r3, #3
    9ef0:	441a      	add	r2, r3
    9ef2:	687b      	ldr	r3, [r7, #4]
    9ef4:	099b      	lsrs	r3, r3, #6
    9ef6:	441a      	add	r2, r3
    9ef8:	687b      	ldr	r3, [r7, #4]
    9efa:	09db      	lsrs	r3, r3, #7
    9efc:	441a      	add	r2, r3
    9efe:	687b      	ldr	r3, [r7, #4]
    9f00:	0a9b      	lsrs	r3, r3, #10
    9f02:	441a      	add	r2, r3
    9f04:	687b      	ldr	r3, [r7, #4]
    9f06:	0adb      	lsrs	r3, r3, #11
    9f08:	4413      	add	r3, r2
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    9f0a:	4a07      	ldr	r2, [pc, #28]	; (9f28 <wait_us+0x48>)
    9f0c:	6013      	str	r3, [r2, #0]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    9f0e:	bf00      	nop
    9f10:	4b05      	ldr	r3, [pc, #20]	; (9f28 <wait_us+0x48>)
    9f12:	681b      	ldr	r3, [r3, #0]
    9f14:	3b01      	subs	r3, #1
    9f16:	4a04      	ldr	r2, [pc, #16]	; (9f28 <wait_us+0x48>)
    9f18:	6013      	str	r3, [r2, #0]
    9f1a:	2b00      	cmp	r3, #0
    9f1c:	d1f8      	bne.n	9f10 <wait_us+0x30>
}
    9f1e:	370c      	adds	r7, #12
    9f20:	46bd      	mov	sp, r7
    9f22:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f26:	4770      	bx	lr
    9f28:	10000a68 	.word	0x10000a68

00009f2c <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    9f2c:	b580      	push	{r7, lr}
    9f2e:	af00      	add	r7, sp, #0
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    9f30:	f000 f836 	bl	9fa0 <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    9f34:	4b10      	ldr	r3, [pc, #64]	; (9f78 <gpio_init+0x4c>)
    9f36:	2200      	movs	r2, #0
    9f38:	601a      	str	r2, [r3, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    9f3a:	4b10      	ldr	r3, [pc, #64]	; (9f7c <gpio_init+0x50>)
    9f3c:	f24c 7212 	movw	r2, #50962	; 0xc712
    9f40:	601a      	str	r2, [r3, #0]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    9f42:	4b0f      	ldr	r3, [pc, #60]	; (9f80 <gpio_init+0x54>)
    9f44:	f240 12b1 	movw	r2, #433	; 0x1b1
    9f48:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    9f4a:	4b0e      	ldr	r3, [pc, #56]	; (9f84 <gpio_init+0x58>)
    9f4c:	2200      	movs	r2, #0
    9f4e:	601a      	str	r2, [r3, #0]
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    9f50:	4b0d      	ldr	r3, [pc, #52]	; (9f88 <gpio_init+0x5c>)
    9f52:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    9f56:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    9f58:	4b0c      	ldr	r3, [pc, #48]	; (9f8c <gpio_init+0x60>)
    9f5a:	2200      	movs	r2, #0
    9f5c:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    9f5e:	4b0c      	ldr	r3, [pc, #48]	; (9f90 <gpio_init+0x64>)
    9f60:	2200      	movs	r2, #0
    9f62:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    9f64:	4b0b      	ldr	r3, [pc, #44]	; (9f94 <gpio_init+0x68>)
    9f66:	2200      	movs	r2, #0
    9f68:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    9f6a:	4b0b      	ldr	r3, [pc, #44]	; (9f98 <gpio_init+0x6c>)
    9f6c:	2200      	movs	r2, #0
    9f6e:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    9f70:	4b0a      	ldr	r3, [pc, #40]	; (9f9c <gpio_init+0x70>)
    9f72:	2200      	movs	r2, #0
    9f74:	601a      	str	r2, [r3, #0]

#ifdef TC13BADGE
	/* R8C_CTL is active low */
	R8C_CTL_SET;
#endif
}
    9f76:	bd80      	pop	{r7, pc}
    9f78:	2009c000 	.word	0x2009c000
    9f7c:	2009c020 	.word	0x2009c020
    9f80:	2009c040 	.word	0x2009c040
    9f84:	2009c060 	.word	0x2009c060
    9f88:	2009c080 	.word	0x2009c080
    9f8c:	2009c014 	.word	0x2009c014
    9f90:	2009c034 	.word	0x2009c034
    9f94:	2009c054 	.word	0x2009c054
    9f98:	2009c074 	.word	0x2009c074
    9f9c:	2009c094 	.word	0x2009c094

00009fa0 <all_pins_off>:

void all_pins_off(void)
{
    9fa0:	b480      	push	{r7}
    9fa2:	af00      	add	r7, sp, #0
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    9fa4:	4b27      	ldr	r3, [pc, #156]	; (a044 <all_pins_off+0xa4>)
    9fa6:	2200      	movs	r2, #0
    9fa8:	601a      	str	r2, [r3, #0]
	PINSEL1 = 0;
    9faa:	4b27      	ldr	r3, [pc, #156]	; (a048 <all_pins_off+0xa8>)
    9fac:	2200      	movs	r2, #0
    9fae:	601a      	str	r2, [r3, #0]
	PINSEL2 = 0;
    9fb0:	4b26      	ldr	r3, [pc, #152]	; (a04c <all_pins_off+0xac>)
    9fb2:	2200      	movs	r2, #0
    9fb4:	601a      	str	r2, [r3, #0]
	PINSEL3 = 0;
    9fb6:	4b26      	ldr	r3, [pc, #152]	; (a050 <all_pins_off+0xb0>)
    9fb8:	2200      	movs	r2, #0
    9fba:	601a      	str	r2, [r3, #0]
	PINSEL4 = 0;
    9fbc:	4b25      	ldr	r3, [pc, #148]	; (a054 <all_pins_off+0xb4>)
    9fbe:	2200      	movs	r2, #0
    9fc0:	601a      	str	r2, [r3, #0]
	PINSEL7 = 0;
    9fc2:	4b25      	ldr	r3, [pc, #148]	; (a058 <all_pins_off+0xb8>)
    9fc4:	2200      	movs	r2, #0
    9fc6:	601a      	str	r2, [r3, #0]
	PINSEL9 = 0;
    9fc8:	4b24      	ldr	r3, [pc, #144]	; (a05c <all_pins_off+0xbc>)
    9fca:	2200      	movs	r2, #0
    9fcc:	601a      	str	r2, [r3, #0]
	PINSEL10 = 0;
    9fce:	4b24      	ldr	r3, [pc, #144]	; (a060 <all_pins_off+0xc0>)
    9fd0:	2200      	movs	r2, #0
    9fd2:	601a      	str	r2, [r3, #0]

	/* configure all pins as inputs */
	FIO0DIR = 0;
    9fd4:	4b23      	ldr	r3, [pc, #140]	; (a064 <all_pins_off+0xc4>)
    9fd6:	2200      	movs	r2, #0
    9fd8:	601a      	str	r2, [r3, #0]
	FIO1DIR = 0;
    9fda:	4b23      	ldr	r3, [pc, #140]	; (a068 <all_pins_off+0xc8>)
    9fdc:	2200      	movs	r2, #0
    9fde:	601a      	str	r2, [r3, #0]
	FIO2DIR = 0;
    9fe0:	4b22      	ldr	r3, [pc, #136]	; (a06c <all_pins_off+0xcc>)
    9fe2:	2200      	movs	r2, #0
    9fe4:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    9fe6:	4b22      	ldr	r3, [pc, #136]	; (a070 <all_pins_off+0xd0>)
    9fe8:	2200      	movs	r2, #0
    9fea:	601a      	str	r2, [r3, #0]
	FIO4DIR = 0;
    9fec:	4b21      	ldr	r3, [pc, #132]	; (a074 <all_pins_off+0xd4>)
    9fee:	2200      	movs	r2, #0
    9ff0:	601a      	str	r2, [r3, #0]

	/* pull-up on every pin */
	PINMODE0 = 0;
    9ff2:	4b21      	ldr	r3, [pc, #132]	; (a078 <all_pins_off+0xd8>)
    9ff4:	2200      	movs	r2, #0
    9ff6:	601a      	str	r2, [r3, #0]
	PINMODE1 = 0;
    9ff8:	4b20      	ldr	r3, [pc, #128]	; (a07c <all_pins_off+0xdc>)
    9ffa:	2200      	movs	r2, #0
    9ffc:	601a      	str	r2, [r3, #0]
	PINMODE2 = 0;
    9ffe:	4b20      	ldr	r3, [pc, #128]	; (a080 <all_pins_off+0xe0>)
    a000:	2200      	movs	r2, #0
    a002:	601a      	str	r2, [r3, #0]
	PINMODE3 = 0;
    a004:	4b1f      	ldr	r3, [pc, #124]	; (a084 <all_pins_off+0xe4>)
    a006:	2200      	movs	r2, #0
    a008:	601a      	str	r2, [r3, #0]
	PINMODE4 = 0;
    a00a:	4b1f      	ldr	r3, [pc, #124]	; (a088 <all_pins_off+0xe8>)
    a00c:	2200      	movs	r2, #0
    a00e:	601a      	str	r2, [r3, #0]
	PINMODE7 = 0;
    a010:	4b1e      	ldr	r3, [pc, #120]	; (a08c <all_pins_off+0xec>)
    a012:	2200      	movs	r2, #0
    a014:	601a      	str	r2, [r3, #0]
	PINMODE9 = 0;
    a016:	4b1e      	ldr	r3, [pc, #120]	; (a090 <all_pins_off+0xf0>)
    a018:	2200      	movs	r2, #0
    a01a:	601a      	str	r2, [r3, #0]

	/* set all outputs low */
	FIO0PIN = 0;
    a01c:	4b1d      	ldr	r3, [pc, #116]	; (a094 <all_pins_off+0xf4>)
    a01e:	2200      	movs	r2, #0
    a020:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    a022:	4b1d      	ldr	r3, [pc, #116]	; (a098 <all_pins_off+0xf8>)
    a024:	2200      	movs	r2, #0
    a026:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    a028:	4b1c      	ldr	r3, [pc, #112]	; (a09c <all_pins_off+0xfc>)
    a02a:	2200      	movs	r2, #0
    a02c:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    a02e:	4b1c      	ldr	r3, [pc, #112]	; (a0a0 <all_pins_off+0x100>)
    a030:	2200      	movs	r2, #0
    a032:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    a034:	4b1b      	ldr	r3, [pc, #108]	; (a0a4 <all_pins_off+0x104>)
    a036:	2200      	movs	r2, #0
    a038:	601a      	str	r2, [r3, #0]
}
    a03a:	46bd      	mov	sp, r7
    a03c:	f85d 7b04 	ldr.w	r7, [sp], #4
    a040:	4770      	bx	lr
    a042:	bf00      	nop
    a044:	4002c000 	.word	0x4002c000
    a048:	4002c004 	.word	0x4002c004
    a04c:	4002c008 	.word	0x4002c008
    a050:	4002c00c 	.word	0x4002c00c
    a054:	4002c010 	.word	0x4002c010
    a058:	4002c01c 	.word	0x4002c01c
    a05c:	4002c024 	.word	0x4002c024
    a060:	4002c028 	.word	0x4002c028
    a064:	2009c000 	.word	0x2009c000
    a068:	2009c020 	.word	0x2009c020
    a06c:	2009c040 	.word	0x2009c040
    a070:	2009c060 	.word	0x2009c060
    a074:	2009c080 	.word	0x2009c080
    a078:	4002c040 	.word	0x4002c040
    a07c:	4002c044 	.word	0x4002c044
    a080:	4002c048 	.word	0x4002c048
    a084:	4002c04c 	.word	0x4002c04c
    a088:	4002c050 	.word	0x4002c050
    a08c:	4002c05c 	.word	0x4002c05c
    a090:	4002c064 	.word	0x4002c064
    a094:	2009c014 	.word	0x2009c014
    a098:	2009c034 	.word	0x2009c034
    a09c:	2009c054 	.word	0x2009c054
    a0a0:	2009c074 	.word	0x2009c074
    a0a4:	2009c094 	.word	0x2009c094

0000a0a8 <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    a0a8:	b580      	push	{r7, lr}
    a0aa:	af00      	add	r7, sp, #0
	gpio_init();
    a0ac:	f7ff ff3e 	bl	9f2c <gpio_init>
	cc2400_init();
    a0b0:	f000 f860 	bl	a174 <cc2400_init>
	clock_start();
    a0b4:	f000 f9c2 	bl	a43c <clock_start>
}
    a0b8:	bd80      	pop	{r7, pc}
    a0ba:	bf00      	nop

0000a0bc <dio_ssp_init>:

/* configure SSP for CC2400's secondary serial data interface */
void dio_ssp_init()
{
    a0bc:	b480      	push	{r7}
    a0be:	af00      	add	r7, sp, #0
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    a0c0:	4a16      	ldr	r2, [pc, #88]	; (a11c <dio_ssp_init+0x60>)
    a0c2:	4b16      	ldr	r3, [pc, #88]	; (a11c <dio_ssp_init+0x60>)
    a0c4:	681b      	ldr	r3, [r3, #0]
    a0c6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    a0ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    a0ce:	6013      	str	r3, [r2, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    a0d0:	4a12      	ldr	r2, [pc, #72]	; (a11c <dio_ssp_init+0x60>)
    a0d2:	4b12      	ldr	r3, [pc, #72]	; (a11c <dio_ssp_init+0x60>)
    a0d4:	681b      	ldr	r3, [r3, #0]
    a0d6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    a0da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    a0de:	6013      	str	r3, [r2, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    a0e0:	4a0e      	ldr	r2, [pc, #56]	; (a11c <dio_ssp_init+0x60>)
    a0e2:	4b0e      	ldr	r3, [pc, #56]	; (a11c <dio_ssp_init+0x60>)
    a0e4:	681b      	ldr	r3, [r3, #0]
    a0e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    a0ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a0ee:	6013      	str	r3, [r2, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    a0f0:	4a0a      	ldr	r2, [pc, #40]	; (a11c <dio_ssp_init+0x60>)
    a0f2:	4b0a      	ldr	r3, [pc, #40]	; (a11c <dio_ssp_init+0x60>)
    a0f4:	681b      	ldr	r3, [r3, #0]
    a0f6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    a0fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    a0fe:	6013      	str	r3, [r2, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    a100:	4b07      	ldr	r3, [pc, #28]	; (a120 <dio_ssp_init+0x64>)
    a102:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a106:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    a108:	4b06      	ldr	r3, [pc, #24]	; (a124 <dio_ssp_init+0x68>)
    a10a:	22c7      	movs	r2, #199	; 0xc7
    a10c:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    a10e:	4b06      	ldr	r3, [pc, #24]	; (a128 <dio_ssp_init+0x6c>)
    a110:	220c      	movs	r2, #12
    a112:	601a      	str	r2, [r3, #0]
}
    a114:	46bd      	mov	sp, r7
    a116:	f85d 7b04 	ldr.w	r7, [sp], #4
    a11a:	4770      	bx	lr
    a11c:	4002c000 	.word	0x4002c000
    a120:	2009c098 	.word	0x2009c098
    a124:	40030000 	.word	0x40030000
    a128:	40030004 	.word	0x40030004

0000a12c <atest_init>:

void atest_init()
{
    a12c:	b480      	push	{r7}
    a12e:	af00      	add	r7, sp, #0
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    a130:	4a0d      	ldr	r2, [pc, #52]	; (a168 <atest_init+0x3c>)
    a132:	4b0d      	ldr	r3, [pc, #52]	; (a168 <atest_init+0x3c>)
    a134:	681b      	ldr	r3, [r3, #0]
    a136:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    a13a:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    a13c:	4a0b      	ldr	r2, [pc, #44]	; (a16c <atest_init+0x40>)
    a13e:	4b0b      	ldr	r3, [pc, #44]	; (a16c <atest_init+0x40>)
    a140:	681b      	ldr	r3, [r3, #0]
    a142:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    a146:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    a148:	4a09      	ldr	r2, [pc, #36]	; (a170 <atest_init+0x44>)
    a14a:	4b09      	ldr	r3, [pc, #36]	; (a170 <atest_init+0x44>)
    a14c:	681b      	ldr	r3, [r3, #0]
    a14e:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
    a152:	6013      	str	r3, [r2, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    a154:	4a06      	ldr	r2, [pc, #24]	; (a170 <atest_init+0x44>)
    a156:	4b06      	ldr	r3, [pc, #24]	; (a170 <atest_init+0x44>)
    a158:	681b      	ldr	r3, [r3, #0]
    a15a:	f423 13a0 	bic.w	r3, r3, #1310720	; 0x140000
    a15e:	6013      	str	r3, [r2, #0]
}
    a160:	46bd      	mov	sp, r7
    a162:	f85d 7b04 	ldr.w	r7, [sp], #4
    a166:	4770      	bx	lr
    a168:	4002c004 	.word	0x4002c004
    a16c:	2009c000 	.word	0x2009c000
    a170:	4002c044 	.word	0x4002c044

0000a174 <cc2400_init>:

void cc2400_init()
{
    a174:	b580      	push	{r7, lr}
    a176:	af00      	add	r7, sp, #0
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    a178:	f7ff ffd8 	bl	a12c <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    a17c:	4b09      	ldr	r3, [pc, #36]	; (a1a4 <cc2400_init+0x30>)
    a17e:	f44f 7200 	mov.w	r2, #512	; 0x200
    a182:	601a      	str	r2, [r3, #0]
	wait_us(50);
    a184:	2032      	movs	r0, #50	; 0x32
    a186:	f7ff feab 	bl	9ee0 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    a18a:	4b07      	ldr	r3, [pc, #28]	; (a1a8 <cc2400_init+0x34>)
    a18c:	2220      	movs	r2, #32
    a18e:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    a190:	4b04      	ldr	r3, [pc, #16]	; (a1a4 <cc2400_init+0x30>)
    a192:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a196:	601a      	str	r2, [r3, #0]

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
    a198:	200d      	movs	r0, #13
    a19a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    a19e:	f000 f85f 	bl	a260 <cc2400_set>
}
    a1a2:	bd80      	pop	{r7, pc}
    a1a4:	2009c038 	.word	0x2009c038
    a1a8:	2009c058 	.word	0x2009c058

0000a1ac <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    a1ac:	b480      	push	{r7}
    a1ae:	b085      	sub	sp, #20
    a1b0:	af00      	add	r7, sp, #0
    a1b2:	4603      	mov	r3, r0
    a1b4:	6039      	str	r1, [r7, #0]
    a1b6:	71fb      	strb	r3, [r7, #7]
	u32 msb = 1 << (len - 1);
    a1b8:	79fb      	ldrb	r3, [r7, #7]
    a1ba:	3b01      	subs	r3, #1
    a1bc:	2201      	movs	r2, #1
    a1be:	fa02 f303 	lsl.w	r3, r2, r3
    a1c2:	60fb      	str	r3, [r7, #12]

	/* start transaction by dropping CSN */
	CSN_CLR;
    a1c4:	4b18      	ldr	r3, [pc, #96]	; (a228 <cc2400_spi+0x7c>)
    a1c6:	2220      	movs	r2, #32
    a1c8:	601a      	str	r2, [r3, #0]

	while (len--) {
    a1ca:	e01e      	b.n	a20a <cc2400_spi+0x5e>
		if (data & msb)
    a1cc:	683a      	ldr	r2, [r7, #0]
    a1ce:	68fb      	ldr	r3, [r7, #12]
    a1d0:	4013      	ands	r3, r2
    a1d2:	2b00      	cmp	r3, #0
    a1d4:	d003      	beq.n	a1de <cc2400_spi+0x32>
			MOSI_SET;
    a1d6:	4b15      	ldr	r3, [pc, #84]	; (a22c <cc2400_spi+0x80>)
    a1d8:	2201      	movs	r2, #1
    a1da:	601a      	str	r2, [r3, #0]
    a1dc:	e002      	b.n	a1e4 <cc2400_spi+0x38>
		else
			MOSI_CLR;
    a1de:	4b12      	ldr	r3, [pc, #72]	; (a228 <cc2400_spi+0x7c>)
    a1e0:	2201      	movs	r2, #1
    a1e2:	601a      	str	r2, [r3, #0]
		data <<= 1;
    a1e4:	683b      	ldr	r3, [r7, #0]
    a1e6:	005b      	lsls	r3, r3, #1
    a1e8:	603b      	str	r3, [r7, #0]

		SCLK_SET;
    a1ea:	4b10      	ldr	r3, [pc, #64]	; (a22c <cc2400_spi+0x80>)
    a1ec:	2210      	movs	r2, #16
    a1ee:	601a      	str	r2, [r3, #0]
		if (MISO)
    a1f0:	4b0f      	ldr	r3, [pc, #60]	; (a230 <cc2400_spi+0x84>)
    a1f2:	681b      	ldr	r3, [r3, #0]
    a1f4:	f003 0302 	and.w	r3, r3, #2
    a1f8:	2b00      	cmp	r3, #0
    a1fa:	d003      	beq.n	a204 <cc2400_spi+0x58>
			data |= 1;
    a1fc:	683b      	ldr	r3, [r7, #0]
    a1fe:	f043 0301 	orr.w	r3, r3, #1
    a202:	603b      	str	r3, [r7, #0]

		SCLK_CLR;
    a204:	4b08      	ldr	r3, [pc, #32]	; (a228 <cc2400_spi+0x7c>)
    a206:	2210      	movs	r2, #16
    a208:	601a      	str	r2, [r3, #0]
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    a20a:	79fb      	ldrb	r3, [r7, #7]
    a20c:	1e5a      	subs	r2, r3, #1
    a20e:	71fa      	strb	r2, [r7, #7]
    a210:	2b00      	cmp	r3, #0
    a212:	d1db      	bne.n	a1cc <cc2400_spi+0x20>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    a214:	4b05      	ldr	r3, [pc, #20]	; (a22c <cc2400_spi+0x80>)
    a216:	2220      	movs	r2, #32
    a218:	601a      	str	r2, [r3, #0]

	return data;
    a21a:	683b      	ldr	r3, [r7, #0]
}
    a21c:	4618      	mov	r0, r3
    a21e:	3714      	adds	r7, #20
    a220:	46bd      	mov	sp, r7
    a222:	f85d 7b04 	ldr.w	r7, [sp], #4
    a226:	4770      	bx	lr
    a228:	2009c05c 	.word	0x2009c05c
    a22c:	2009c058 	.word	0x2009c058
    a230:	2009c054 	.word	0x2009c054

0000a234 <cc2400_get>:

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    a234:	b580      	push	{r7, lr}
    a236:	b084      	sub	sp, #16
    a238:	af00      	add	r7, sp, #0
    a23a:	4603      	mov	r3, r0
    a23c:	71fb      	strb	r3, [r7, #7]
	u32 in;

	u32 out = (reg | 0x80) << 16;
    a23e:	79fb      	ldrb	r3, [r7, #7]
    a240:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a244:	b2db      	uxtb	r3, r3
    a246:	041b      	lsls	r3, r3, #16
    a248:	60fb      	str	r3, [r7, #12]
	in = cc2400_spi(24, out);
    a24a:	2018      	movs	r0, #24
    a24c:	68f9      	ldr	r1, [r7, #12]
    a24e:	f7ff ffad 	bl	a1ac <cc2400_spi>
    a252:	60b8      	str	r0, [r7, #8]
	return in & 0xFFFF;
    a254:	68bb      	ldr	r3, [r7, #8]
    a256:	b29b      	uxth	r3, r3
}
    a258:	4618      	mov	r0, r3
    a25a:	3710      	adds	r7, #16
    a25c:	46bd      	mov	sp, r7
    a25e:	bd80      	pop	{r7, pc}

0000a260 <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
    a260:	b580      	push	{r7, lr}
    a262:	b084      	sub	sp, #16
    a264:	af00      	add	r7, sp, #0
    a266:	4603      	mov	r3, r0
    a268:	460a      	mov	r2, r1
    a26a:	71fb      	strb	r3, [r7, #7]
    a26c:	4613      	mov	r3, r2
    a26e:	80bb      	strh	r3, [r7, #4]
	u32 out = (reg << 16) | val;
    a270:	79fb      	ldrb	r3, [r7, #7]
    a272:	041a      	lsls	r2, r3, #16
    a274:	88bb      	ldrh	r3, [r7, #4]
    a276:	4313      	orrs	r3, r2
    a278:	60fb      	str	r3, [r7, #12]
	cc2400_spi(24, out);
    a27a:	2018      	movs	r0, #24
    a27c:	68f9      	ldr	r1, [r7, #12]
    a27e:	f7ff ff95 	bl	a1ac <cc2400_spi>
}
    a282:	3710      	adds	r7, #16
    a284:	46bd      	mov	sp, r7
    a286:	bd80      	pop	{r7, pc}

0000a288 <cc2400_get8>:

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    a288:	b580      	push	{r7, lr}
    a28a:	b084      	sub	sp, #16
    a28c:	af00      	add	r7, sp, #0
    a28e:	4603      	mov	r3, r0
    a290:	71fb      	strb	r3, [r7, #7]
	u16 in;

	u16 out = (reg | 0x80) << 8;
    a292:	79fb      	ldrb	r3, [r7, #7]
    a294:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a298:	b2db      	uxtb	r3, r3
    a29a:	b29b      	uxth	r3, r3
    a29c:	021b      	lsls	r3, r3, #8
    a29e:	81fb      	strh	r3, [r7, #14]
	in = cc2400_spi(16, out);
    a2a0:	89fb      	ldrh	r3, [r7, #14]
    a2a2:	2010      	movs	r0, #16
    a2a4:	4619      	mov	r1, r3
    a2a6:	f7ff ff81 	bl	a1ac <cc2400_spi>
    a2aa:	4603      	mov	r3, r0
    a2ac:	81bb      	strh	r3, [r7, #12]
	return in & 0xFF;
    a2ae:	89bb      	ldrh	r3, [r7, #12]
    a2b0:	b2db      	uxtb	r3, r3
}
    a2b2:	4618      	mov	r0, r3
    a2b4:	3710      	adds	r7, #16
    a2b6:	46bd      	mov	sp, r7
    a2b8:	bd80      	pop	{r7, pc}
    a2ba:	bf00      	nop

0000a2bc <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
    a2bc:	b580      	push	{r7, lr}
    a2be:	b084      	sub	sp, #16
    a2c0:	af00      	add	r7, sp, #0
    a2c2:	4603      	mov	r3, r0
    a2c4:	460a      	mov	r2, r1
    a2c6:	71fb      	strb	r3, [r7, #7]
    a2c8:	4613      	mov	r3, r2
    a2ca:	71bb      	strb	r3, [r7, #6]
	u32 out = (reg << 8) | val;
    a2cc:	79fb      	ldrb	r3, [r7, #7]
    a2ce:	021a      	lsls	r2, r3, #8
    a2d0:	79bb      	ldrb	r3, [r7, #6]
    a2d2:	4313      	orrs	r3, r2
    a2d4:	60fb      	str	r3, [r7, #12]
	cc2400_spi(16, out);
    a2d6:	2010      	movs	r0, #16
    a2d8:	68f9      	ldr	r1, [r7, #12]
    a2da:	f7ff ff67 	bl	a1ac <cc2400_spi>
}
    a2de:	3710      	adds	r7, #16
    a2e0:	46bd      	mov	sp, r7
    a2e2:	bd80      	pop	{r7, pc}

0000a2e4 <cc2400_spi_buf>:

/* write multiple bytes to SPI */
void cc2400_spi_buf(u8 reg, u8 len, u8 *data)
{
    a2e4:	b480      	push	{r7}
    a2e6:	b085      	sub	sp, #20
    a2e8:	af00      	add	r7, sp, #0
    a2ea:	4603      	mov	r3, r0
    a2ec:	603a      	str	r2, [r7, #0]
    a2ee:	71fb      	strb	r3, [r7, #7]
    a2f0:	460b      	mov	r3, r1
    a2f2:	71bb      	strb	r3, [r7, #6]
	u8 msb = 1 << 7;
    a2f4:	2380      	movs	r3, #128	; 0x80
    a2f6:	733b      	strb	r3, [r7, #12]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    a2f8:	4b33      	ldr	r3, [pc, #204]	; (a3c8 <cc2400_spi_buf+0xe4>)
    a2fa:	2220      	movs	r2, #32
    a2fc:	601a      	str	r2, [r3, #0]

	for (i = 0; i < 8; ++i) {
    a2fe:	2300      	movs	r3, #0
    a300:	73fb      	strb	r3, [r7, #15]
    a302:	e018      	b.n	a336 <cc2400_spi_buf+0x52>
		if (reg & msb)
    a304:	79fa      	ldrb	r2, [r7, #7]
    a306:	7b3b      	ldrb	r3, [r7, #12]
    a308:	4013      	ands	r3, r2
    a30a:	b2db      	uxtb	r3, r3
    a30c:	2b00      	cmp	r3, #0
    a30e:	d003      	beq.n	a318 <cc2400_spi_buf+0x34>
			MOSI_SET;
    a310:	4b2e      	ldr	r3, [pc, #184]	; (a3cc <cc2400_spi_buf+0xe8>)
    a312:	2201      	movs	r2, #1
    a314:	601a      	str	r2, [r3, #0]
    a316:	e002      	b.n	a31e <cc2400_spi_buf+0x3a>
		else
			MOSI_CLR;
    a318:	4b2b      	ldr	r3, [pc, #172]	; (a3c8 <cc2400_spi_buf+0xe4>)
    a31a:	2201      	movs	r2, #1
    a31c:	601a      	str	r2, [r3, #0]
		reg <<= 1;
    a31e:	79fb      	ldrb	r3, [r7, #7]
    a320:	005b      	lsls	r3, r3, #1
    a322:	71fb      	strb	r3, [r7, #7]
		SCLK_SET;
    a324:	4b29      	ldr	r3, [pc, #164]	; (a3cc <cc2400_spi_buf+0xe8>)
    a326:	2210      	movs	r2, #16
    a328:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    a32a:	4b27      	ldr	r3, [pc, #156]	; (a3c8 <cc2400_spi_buf+0xe4>)
    a32c:	2210      	movs	r2, #16
    a32e:	601a      	str	r2, [r3, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    a330:	7bfb      	ldrb	r3, [r7, #15]
    a332:	3301      	adds	r3, #1
    a334:	73fb      	strb	r3, [r7, #15]
    a336:	7bfb      	ldrb	r3, [r7, #15]
    a338:	2b07      	cmp	r3, #7
    a33a:	d9e3      	bls.n	a304 <cc2400_spi_buf+0x20>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    a33c:	2300      	movs	r3, #0
    a33e:	73fb      	strb	r3, [r7, #15]
    a340:	e026      	b.n	a390 <cc2400_spi_buf+0xac>
		temp = data[i];
    a342:	7bfb      	ldrb	r3, [r7, #15]
    a344:	683a      	ldr	r2, [r7, #0]
    a346:	4413      	add	r3, r2
    a348:	781b      	ldrb	r3, [r3, #0]
    a34a:	737b      	strb	r3, [r7, #13]
		for (j = 0; j < 8; ++j) {
    a34c:	2300      	movs	r3, #0
    a34e:	73bb      	strb	r3, [r7, #14]
    a350:	e018      	b.n	a384 <cc2400_spi_buf+0xa0>
			if (temp & msb)
    a352:	7b7a      	ldrb	r2, [r7, #13]
    a354:	7b3b      	ldrb	r3, [r7, #12]
    a356:	4013      	ands	r3, r2
    a358:	b2db      	uxtb	r3, r3
    a35a:	2b00      	cmp	r3, #0
    a35c:	d003      	beq.n	a366 <cc2400_spi_buf+0x82>
				MOSI_SET;
    a35e:	4b1b      	ldr	r3, [pc, #108]	; (a3cc <cc2400_spi_buf+0xe8>)
    a360:	2201      	movs	r2, #1
    a362:	601a      	str	r2, [r3, #0]
    a364:	e002      	b.n	a36c <cc2400_spi_buf+0x88>
			else
				MOSI_CLR;
    a366:	4b18      	ldr	r3, [pc, #96]	; (a3c8 <cc2400_spi_buf+0xe4>)
    a368:	2201      	movs	r2, #1
    a36a:	601a      	str	r2, [r3, #0]
			temp <<= 1;
    a36c:	7b7b      	ldrb	r3, [r7, #13]
    a36e:	005b      	lsls	r3, r3, #1
    a370:	737b      	strb	r3, [r7, #13]
			SCLK_SET;
    a372:	4b16      	ldr	r3, [pc, #88]	; (a3cc <cc2400_spi_buf+0xe8>)
    a374:	2210      	movs	r2, #16
    a376:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
    a378:	4b13      	ldr	r3, [pc, #76]	; (a3c8 <cc2400_spi_buf+0xe4>)
    a37a:	2210      	movs	r2, #16
    a37c:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    a37e:	7bbb      	ldrb	r3, [r7, #14]
    a380:	3301      	adds	r3, #1
    a382:	73bb      	strb	r3, [r7, #14]
    a384:	7bbb      	ldrb	r3, [r7, #14]
    a386:	2b07      	cmp	r3, #7
    a388:	d9e3      	bls.n	a352 <cc2400_spi_buf+0x6e>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    a38a:	7bfb      	ldrb	r3, [r7, #15]
    a38c:	3301      	adds	r3, #1
    a38e:	73fb      	strb	r3, [r7, #15]
    a390:	7bfa      	ldrb	r2, [r7, #15]
    a392:	79bb      	ldrb	r3, [r7, #6]
    a394:	429a      	cmp	r2, r3
    a396:	d3d4      	bcc.n	a342 <cc2400_spi_buf+0x5e>
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    a398:	2300      	movs	r3, #0
    a39a:	73fb      	strb	r3, [r7, #15]
    a39c:	e008      	b.n	a3b0 <cc2400_spi_buf+0xcc>
		SCLK_SET;
    a39e:	4b0b      	ldr	r3, [pc, #44]	; (a3cc <cc2400_spi_buf+0xe8>)
    a3a0:	2210      	movs	r2, #16
    a3a2:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    a3a4:	4b08      	ldr	r3, [pc, #32]	; (a3c8 <cc2400_spi_buf+0xe4>)
    a3a6:	2210      	movs	r2, #16
    a3a8:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    a3aa:	7bfb      	ldrb	r3, [r7, #15]
    a3ac:	3301      	adds	r3, #1
    a3ae:	73fb      	strb	r3, [r7, #15]
    a3b0:	7bfb      	ldrb	r3, [r7, #15]
    a3b2:	2b07      	cmp	r3, #7
    a3b4:	d9f3      	bls.n	a39e <cc2400_spi_buf+0xba>
		SCLK_SET;
		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    a3b6:	4b05      	ldr	r3, [pc, #20]	; (a3cc <cc2400_spi_buf+0xe8>)
    a3b8:	2220      	movs	r2, #32
    a3ba:	601a      	str	r2, [r3, #0]
}
    a3bc:	3714      	adds	r7, #20
    a3be:	46bd      	mov	sp, r7
    a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a3c4:	4770      	bx	lr
    a3c6:	bf00      	nop
    a3c8:	2009c05c 	.word	0x2009c05c
    a3cc:	2009c058 	.word	0x2009c058

0000a3d0 <cc2400_status>:

/* get the status */
u8 cc2400_status()
{
    a3d0:	b580      	push	{r7, lr}
    a3d2:	af00      	add	r7, sp, #0
	return cc2400_spi(8, 0);
    a3d4:	2008      	movs	r0, #8
    a3d6:	2100      	movs	r1, #0
    a3d8:	f7ff fee8 	bl	a1ac <cc2400_spi>
    a3dc:	4603      	mov	r3, r0
    a3de:	b2db      	uxtb	r3, r3
}
    a3e0:	4618      	mov	r0, r3
    a3e2:	bd80      	pop	{r7, pc}

0000a3e4 <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    a3e4:	b580      	push	{r7, lr}
    a3e6:	b082      	sub	sp, #8
    a3e8:	af00      	add	r7, sp, #0
    a3ea:	4603      	mov	r3, r0
    a3ec:	71fb      	strb	r3, [r7, #7]
	return cc2400_spi(8, reg);
    a3ee:	79fb      	ldrb	r3, [r7, #7]
    a3f0:	2008      	movs	r0, #8
    a3f2:	4619      	mov	r1, r3
    a3f4:	f7ff feda 	bl	a1ac <cc2400_spi>
    a3f8:	4603      	mov	r3, r0
    a3fa:	b2db      	uxtb	r3, r3
}
    a3fc:	4618      	mov	r0, r3
    a3fe:	3708      	adds	r7, #8
    a400:	46bd      	mov	sp, r7
    a402:	bd80      	pop	{r7, pc}

0000a404 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    a404:	b580      	push	{r7, lr}
    a406:	af00      	add	r7, sp, #0
	cc2400_set(MAIN, 0x0000);
    a408:	2000      	movs	r0, #0
    a40a:	2100      	movs	r1, #0
    a40c:	f7ff ff28 	bl	a260 <cc2400_set>
	while (cc2400_get(MAIN) != 0x0000);
    a410:	bf00      	nop
    a412:	2000      	movs	r0, #0
    a414:	f7ff ff0e 	bl	a234 <cc2400_get>
    a418:	4603      	mov	r3, r0
    a41a:	2b00      	cmp	r3, #0
    a41c:	d1f9      	bne.n	a412 <cc2400_reset+0xe>
	cc2400_set(MAIN, 0x8000);
    a41e:	2000      	movs	r0, #0
    a420:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    a424:	f7ff ff1c 	bl	a260 <cc2400_set>
	while (cc2400_get(MAIN) != 0x8000);
    a428:	bf00      	nop
    a42a:	2000      	movs	r0, #0
    a42c:	f7ff ff02 	bl	a234 <cc2400_get>
    a430:	4603      	mov	r3, r0
    a432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    a436:	d1f8      	bne.n	a42a <cc2400_reset+0x26>
}
    a438:	bd80      	pop	{r7, pc}
    a43a:	bf00      	nop

0000a43c <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    a43c:	b580      	push	{r7, lr}
    a43e:	af00      	add	r7, sp, #0
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    a440:	4b5e      	ldr	r3, [pc, #376]	; (a5bc <clock_start+0x180>)
    a442:	f244 023a 	movw	r2, #16442	; 0x403a
    a446:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    a448:	4b5d      	ldr	r3, [pc, #372]	; (a5c0 <clock_start+0x184>)
    a44a:	2200      	movs	r2, #0
    a44c:	601a      	str	r2, [r3, #0]

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    a44e:	4a5d      	ldr	r2, [pc, #372]	; (a5c4 <clock_start+0x188>)
    a450:	4b5c      	ldr	r3, [pc, #368]	; (a5c4 <clock_start+0x188>)
    a452:	681b      	ldr	r3, [r3, #0]
    a454:	f023 0302 	bic.w	r3, r3, #2
    a458:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    a45a:	4b5b      	ldr	r3, [pc, #364]	; (a5c8 <clock_start+0x18c>)
    a45c:	22aa      	movs	r2, #170	; 0xaa
    a45e:	601a      	str	r2, [r3, #0]
    a460:	4b59      	ldr	r3, [pc, #356]	; (a5c8 <clock_start+0x18c>)
    a462:	2255      	movs	r2, #85	; 0x55
    a464:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    a466:	bf00      	nop
    a468:	4b58      	ldr	r3, [pc, #352]	; (a5cc <clock_start+0x190>)
    a46a:	681b      	ldr	r3, [r3, #0]
    a46c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    a470:	2b00      	cmp	r3, #0
    a472:	d1f9      	bne.n	a468 <clock_start+0x2c>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    a474:	4a53      	ldr	r2, [pc, #332]	; (a5c4 <clock_start+0x188>)
    a476:	4b53      	ldr	r3, [pc, #332]	; (a5c4 <clock_start+0x188>)
    a478:	681b      	ldr	r3, [r3, #0]
    a47a:	f023 0301 	bic.w	r3, r3, #1
    a47e:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    a480:	4b51      	ldr	r3, [pc, #324]	; (a5c8 <clock_start+0x18c>)
    a482:	22aa      	movs	r2, #170	; 0xaa
    a484:	601a      	str	r2, [r3, #0]
    a486:	4b50      	ldr	r3, [pc, #320]	; (a5c8 <clock_start+0x18c>)
    a488:	2255      	movs	r2, #85	; 0x55
    a48a:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    a48c:	bf00      	nop
    a48e:	4b4f      	ldr	r3, [pc, #316]	; (a5cc <clock_start+0x190>)
    a490:	681b      	ldr	r3, [r3, #0]
    a492:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    a496:	2b00      	cmp	r3, #0
    a498:	d1f9      	bne.n	a48e <clock_start+0x52>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    a49a:	4b4d      	ldr	r3, [pc, #308]	; (a5d0 <clock_start+0x194>)
    a49c:	2200      	movs	r2, #0
    a49e:	601a      	str	r2, [r3, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    a4a0:	f7ff ffb0 	bl	a404 <cc2400_reset>
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
    a4a4:	2008      	movs	r0, #8
    a4a6:	f241 5170 	movw	r1, #5488	; 0x1570
    a4aa:	f7ff fed9 	bl	a260 <cc2400_set>
	cc2400_strobe(SXOSCON);
    a4ae:	2060      	movs	r0, #96	; 0x60
    a4b0:	f7ff ff98 	bl	a3e4 <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    a4b4:	bf00      	nop
    a4b6:	f7ff ff8b 	bl	a3d0 <cc2400_status>
    a4ba:	4603      	mov	r3, r0
    a4bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a4c0:	2b00      	cmp	r3, #0
    a4c2:	d0f8      	beq.n	a4b6 <clock_start+0x7a>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    a4c4:	4b43      	ldr	r3, [pc, #268]	; (a5d4 <clock_start+0x198>)
    a4c6:	2220      	movs	r2, #32
    a4c8:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    a4ca:	bf00      	nop
    a4cc:	4b41      	ldr	r3, [pc, #260]	; (a5d4 <clock_start+0x198>)
    a4ce:	681b      	ldr	r3, [r3, #0]
    a4d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a4d4:	2b00      	cmp	r3, #0
    a4d6:	d0f9      	beq.n	a4cc <clock_start+0x90>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    a4d8:	4b3f      	ldr	r3, [pc, #252]	; (a5d8 <clock_start+0x19c>)
    a4da:	2208      	movs	r2, #8
    a4dc:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    a4de:	4b3f      	ldr	r3, [pc, #252]	; (a5dc <clock_start+0x1a0>)
    a4e0:	2200      	movs	r2, #0
    a4e2:	601a      	str	r2, [r3, #0]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    a4e4:	4b36      	ldr	r3, [pc, #216]	; (a5c0 <clock_start+0x184>)
    a4e6:	2201      	movs	r2, #1
    a4e8:	601a      	str	r2, [r3, #0]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    a4ea:	4b3d      	ldr	r3, [pc, #244]	; (a5e0 <clock_start+0x1a4>)
    a4ec:	4a3d      	ldr	r2, [pc, #244]	; (a5e4 <clock_start+0x1a8>)
    a4ee:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    a4f0:	4b35      	ldr	r3, [pc, #212]	; (a5c8 <clock_start+0x18c>)
    a4f2:	22aa      	movs	r2, #170	; 0xaa
    a4f4:	601a      	str	r2, [r3, #0]
    a4f6:	4b34      	ldr	r3, [pc, #208]	; (a5c8 <clock_start+0x18c>)
    a4f8:	2255      	movs	r2, #85	; 0x55
    a4fa:	601a      	str	r2, [r3, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    a4fc:	4a31      	ldr	r2, [pc, #196]	; (a5c4 <clock_start+0x188>)
    a4fe:	4b31      	ldr	r3, [pc, #196]	; (a5c4 <clock_start+0x188>)
    a500:	681b      	ldr	r3, [r3, #0]
    a502:	f043 0301 	orr.w	r3, r3, #1
    a506:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    a508:	4b2f      	ldr	r3, [pc, #188]	; (a5c8 <clock_start+0x18c>)
    a50a:	22aa      	movs	r2, #170	; 0xaa
    a50c:	601a      	str	r2, [r3, #0]
    a50e:	4b2e      	ldr	r3, [pc, #184]	; (a5c8 <clock_start+0x18c>)
    a510:	2255      	movs	r2, #85	; 0x55
    a512:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    a514:	bf00      	nop
    a516:	4b2d      	ldr	r3, [pc, #180]	; (a5cc <clock_start+0x190>)
    a518:	681b      	ldr	r3, [r3, #0]
    a51a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    a51e:	2b00      	cmp	r3, #0
    a520:	d0f9      	beq.n	a516 <clock_start+0xda>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    a522:	4b2b      	ldr	r3, [pc, #172]	; (a5d0 <clock_start+0x194>)
    a524:	2203      	movs	r2, #3
    a526:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    a528:	4a26      	ldr	r2, [pc, #152]	; (a5c4 <clock_start+0x188>)
    a52a:	4b26      	ldr	r3, [pc, #152]	; (a5c4 <clock_start+0x188>)
    a52c:	681b      	ldr	r3, [r3, #0]
    a52e:	f043 0302 	orr.w	r3, r3, #2
    a532:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    a534:	4b24      	ldr	r3, [pc, #144]	; (a5c8 <clock_start+0x18c>)
    a536:	22aa      	movs	r2, #170	; 0xaa
    a538:	601a      	str	r2, [r3, #0]
    a53a:	4b23      	ldr	r3, [pc, #140]	; (a5c8 <clock_start+0x18c>)
    a53c:	2255      	movs	r2, #85	; 0x55
    a53e:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    a540:	bf00      	nop
    a542:	4b22      	ldr	r3, [pc, #136]	; (a5cc <clock_start+0x190>)
    a544:	681b      	ldr	r3, [r3, #0]
    a546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    a54a:	2b00      	cmp	r3, #0
    a54c:	d0f9      	beq.n	a542 <clock_start+0x106>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    a54e:	4b26      	ldr	r3, [pc, #152]	; (a5e8 <clock_start+0x1ac>)
    a550:	2222      	movs	r2, #34	; 0x22
    a552:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    a554:	4b25      	ldr	r3, [pc, #148]	; (a5ec <clock_start+0x1b0>)
    a556:	22aa      	movs	r2, #170	; 0xaa
    a558:	601a      	str	r2, [r3, #0]
    a55a:	4b24      	ldr	r3, [pc, #144]	; (a5ec <clock_start+0x1b0>)
    a55c:	2255      	movs	r2, #85	; 0x55
    a55e:	601a      	str	r2, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    a560:	4a23      	ldr	r2, [pc, #140]	; (a5f0 <clock_start+0x1b4>)
    a562:	4b23      	ldr	r3, [pc, #140]	; (a5f0 <clock_start+0x1b4>)
    a564:	681b      	ldr	r3, [r3, #0]
    a566:	f043 0301 	orr.w	r3, r3, #1
    a56a:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    a56c:	4b1f      	ldr	r3, [pc, #124]	; (a5ec <clock_start+0x1b0>)
    a56e:	22aa      	movs	r2, #170	; 0xaa
    a570:	601a      	str	r2, [r3, #0]
    a572:	4b1e      	ldr	r3, [pc, #120]	; (a5ec <clock_start+0x1b0>)
    a574:	2255      	movs	r2, #85	; 0x55
    a576:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    a578:	bf00      	nop
    a57a:	4b1e      	ldr	r3, [pc, #120]	; (a5f4 <clock_start+0x1b8>)
    a57c:	681b      	ldr	r3, [r3, #0]
    a57e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    a582:	2b00      	cmp	r3, #0
    a584:	d0f9      	beq.n	a57a <clock_start+0x13e>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    a586:	bf00      	nop
    a588:	4b1a      	ldr	r3, [pc, #104]	; (a5f4 <clock_start+0x1b8>)
    a58a:	681b      	ldr	r3, [r3, #0]
    a58c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a590:	2b00      	cmp	r3, #0
    a592:	d0f9      	beq.n	a588 <clock_start+0x14c>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    a594:	4a16      	ldr	r2, [pc, #88]	; (a5f0 <clock_start+0x1b4>)
    a596:	4b16      	ldr	r3, [pc, #88]	; (a5f0 <clock_start+0x1b4>)
    a598:	681b      	ldr	r3, [r3, #0]
    a59a:	f043 0302 	orr.w	r3, r3, #2
    a59e:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    a5a0:	4b12      	ldr	r3, [pc, #72]	; (a5ec <clock_start+0x1b0>)
    a5a2:	22aa      	movs	r2, #170	; 0xaa
    a5a4:	601a      	str	r2, [r3, #0]
    a5a6:	4b11      	ldr	r3, [pc, #68]	; (a5ec <clock_start+0x1b0>)
    a5a8:	2255      	movs	r2, #85	; 0x55
    a5aa:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    a5ac:	bf00      	nop
    a5ae:	4b11      	ldr	r3, [pc, #68]	; (a5f4 <clock_start+0x1b8>)
    a5b0:	681b      	ldr	r3, [r3, #0]
    a5b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
    a5b6:	2b00      	cmp	r3, #0
    a5b8:	d0f9      	beq.n	a5ae <clock_start+0x172>
}
    a5ba:	bd80      	pop	{r7, pc}
    a5bc:	400fc000 	.word	0x400fc000
    a5c0:	400fc10c 	.word	0x400fc10c
    a5c4:	400fc080 	.word	0x400fc080
    a5c8:	400fc08c 	.word	0x400fc08c
    a5cc:	400fc088 	.word	0x400fc088
    a5d0:	400fc104 	.word	0x400fc104
    a5d4:	400fc1a0 	.word	0x400fc1a0
    a5d8:	400fc1a8 	.word	0x400fc1a8
    a5dc:	400fc1ac 	.word	0x400fc1ac
    a5e0:	400fc084 	.word	0x400fc084
    a5e4:	00010018 	.word	0x00010018
    a5e8:	400fc0a4 	.word	0x400fc0a4
    a5ec:	400fc0ac 	.word	0x400fc0ac
    a5f0:	400fc0a0 	.word	0x400fc0a0
    a5f4:	400fc0a8 	.word	0x400fc0a8

0000a5f8 <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    a5f8:	b580      	push	{r7, lr}
    a5fa:	af00      	add	r7, sp, #0
	all_pins_off();
    a5fc:	f7ff fcd0 	bl	9fa0 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    a600:	4b0a      	ldr	r3, [pc, #40]	; (a62c <reset+0x34>)
    a602:	2202      	movs	r2, #2
    a604:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    a606:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    a60a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a60e:	681b      	ldr	r3, [r3, #0]
    a610:	f043 0303 	orr.w	r3, r3, #3
    a614:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    a616:	4b06      	ldr	r3, [pc, #24]	; (a630 <reset+0x38>)
    a618:	22aa      	movs	r2, #170	; 0xaa
    a61a:	601a      	str	r2, [r3, #0]
    a61c:	4b04      	ldr	r3, [pc, #16]	; (a630 <reset+0x38>)
    a61e:	2255      	movs	r2, #85	; 0x55
    a620:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
    a622:	2001      	movs	r0, #1
    a624:	f7ff fc38 	bl	9e98 <wait>
}
    a628:	bd80      	pop	{r7, pc}
    a62a:	bf00      	nop
    a62c:	2009c03c 	.word	0x2009c03c
    a630:	40000008 	.word	0x40000008

0000a634 <_HandleRequest>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    a634:	b580      	push	{r7, lr}
    a636:	b088      	sub	sp, #32
    a638:	af00      	add	r7, sp, #0
    a63a:	60f8      	str	r0, [r7, #12]
    a63c:	60b9      	str	r1, [r7, #8]
    a63e:	607a      	str	r2, [r7, #4]
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    a640:	68fb      	ldr	r3, [r7, #12]
    a642:	781b      	ldrb	r3, [r3, #0]
    a644:	095b      	lsrs	r3, r3, #5
    a646:	b2db      	uxtb	r3, r3
    a648:	f003 0303 	and.w	r3, r3, #3
    a64c:	61fb      	str	r3, [r7, #28]
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    a64e:	69fb      	ldr	r3, [r7, #28]
    a650:	2b02      	cmp	r3, #2
    a652:	d10e      	bne.n	a672 <_HandleRequest+0x3e>
		BOOL fFilterStatus = FALSE;
    a654:	2300      	movs	r3, #0
    a656:	617b      	str	r3, [r7, #20]
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    a658:	f107 0314 	add.w	r3, r7, #20
    a65c:	68f8      	ldr	r0, [r7, #12]
    a65e:	4619      	mov	r1, r3
    a660:	68ba      	ldr	r2, [r7, #8]
    a662:	687b      	ldr	r3, [r7, #4]
    a664:	f000 fcd2 	bl	b00c <USBFilterOsVendorMessage>
    a668:	4603      	mov	r3, r0
    a66a:	2b00      	cmp	r3, #0
    a66c:	d001      	beq.n	a672 <_HandleRequest+0x3e>
			return fFilterStatus;
    a66e:	697b      	ldr	r3, [r7, #20]
    a670:	e00f      	b.n	a692 <_HandleRequest+0x5e>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    a672:	4a0a      	ldr	r2, [pc, #40]	; (a69c <_HandleRequest+0x68>)
    a674:	69fb      	ldr	r3, [r7, #28]
    a676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a67a:	61bb      	str	r3, [r7, #24]
	if (pfnHandler == NULL) {
    a67c:	69bb      	ldr	r3, [r7, #24]
    a67e:	2b00      	cmp	r3, #0
    a680:	d101      	bne.n	a686 <_HandleRequest+0x52>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    a682:	2300      	movs	r3, #0
    a684:	e005      	b.n	a692 <_HandleRequest+0x5e>
	}

	return pfnHandler(pSetup, piLen, ppbData);
    a686:	69bb      	ldr	r3, [r7, #24]
    a688:	68f8      	ldr	r0, [r7, #12]
    a68a:	68b9      	ldr	r1, [r7, #8]
    a68c:	687a      	ldr	r2, [r7, #4]
    a68e:	4798      	blx	r3
    a690:	4603      	mov	r3, r0
}
    a692:	4618      	mov	r0, r3
    a694:	3720      	adds	r7, #32
    a696:	46bd      	mov	sp, r7
    a698:	bd80      	pop	{r7, pc}
    a69a:	bf00      	nop
    a69c:	10000a80 	.word	0x10000a80

0000a6a0 <StallControlPipe>:
	Local function to stall the control endpoint
	
	@param [in]	bEPStat	Endpoint status
 */
static void StallControlPipe(U8 bEPStat)
{
    a6a0:	b580      	push	{r7, lr}
    a6a2:	b084      	sub	sp, #16
    a6a4:	af00      	add	r7, sp, #0
    a6a6:	4603      	mov	r3, r0
    a6a8:	71fb      	strb	r3, [r7, #7]
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    a6aa:	2080      	movs	r0, #128	; 0x80
    a6ac:	2101      	movs	r1, #1
    a6ae:	f000 fa83 	bl	abb8 <USBHwEPStall>

// dump setup packet
	DBG("STALL on [");
	pb = (U8 *)&Setup;
    a6b2:	4b07      	ldr	r3, [pc, #28]	; (a6d0 <StallControlPipe+0x30>)
    a6b4:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
    a6b6:	2300      	movs	r3, #0
    a6b8:	60fb      	str	r3, [r7, #12]
    a6ba:	e002      	b.n	a6c2 <StallControlPipe+0x22>
    a6bc:	68fb      	ldr	r3, [r7, #12]
    a6be:	3301      	adds	r3, #1
    a6c0:	60fb      	str	r3, [r7, #12]
    a6c2:	68fb      	ldr	r3, [r7, #12]
    a6c4:	2b07      	cmp	r3, #7
    a6c6:	ddf9      	ble.n	a6bc <StallControlPipe+0x1c>
		DBG(" %02x", *pb++);
	}
	DBG("] stat=%x\n", bEPStat);
}
    a6c8:	3710      	adds	r7, #16
    a6ca:	46bd      	mov	sp, r7
    a6cc:	bd80      	pop	{r7, pc}
    a6ce:	bf00      	nop
    a6d0:	10000a6c 	.word	0x10000a6c

0000a6d4 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    a6d4:	b580      	push	{r7, lr}
    a6d6:	b082      	sub	sp, #8
    a6d8:	af00      	add	r7, sp, #0
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    a6da:	4b0e      	ldr	r3, [pc, #56]	; (a714 <DataIn+0x40>)
    a6dc:	681b      	ldr	r3, [r3, #0]
    a6de:	2b40      	cmp	r3, #64	; 0x40
    a6e0:	bfa8      	it	ge
    a6e2:	2340      	movge	r3, #64	; 0x40
    a6e4:	607b      	str	r3, [r7, #4]
	USBHwEPWrite(0x80, pbData, iChunk);
    a6e6:	4b0c      	ldr	r3, [pc, #48]	; (a718 <DataIn+0x44>)
    a6e8:	681a      	ldr	r2, [r3, #0]
    a6ea:	687b      	ldr	r3, [r7, #4]
    a6ec:	2080      	movs	r0, #128	; 0x80
    a6ee:	4611      	mov	r1, r2
    a6f0:	461a      	mov	r2, r3
    a6f2:	f000 fa85 	bl	ac00 <USBHwEPWrite>
	pbData += iChunk;
    a6f6:	4b08      	ldr	r3, [pc, #32]	; (a718 <DataIn+0x44>)
    a6f8:	681a      	ldr	r2, [r3, #0]
    a6fa:	687b      	ldr	r3, [r7, #4]
    a6fc:	4413      	add	r3, r2
    a6fe:	4a06      	ldr	r2, [pc, #24]	; (a718 <DataIn+0x44>)
    a700:	6013      	str	r3, [r2, #0]
	iResidue -= iChunk;
    a702:	4b04      	ldr	r3, [pc, #16]	; (a714 <DataIn+0x40>)
    a704:	681a      	ldr	r2, [r3, #0]
    a706:	687b      	ldr	r3, [r7, #4]
    a708:	1ad3      	subs	r3, r2, r3
    a70a:	4a02      	ldr	r2, [pc, #8]	; (a714 <DataIn+0x40>)
    a70c:	6013      	str	r3, [r2, #0]
}
    a70e:	3708      	adds	r7, #8
    a710:	46bd      	mov	sp, r7
    a712:	bd80      	pop	{r7, pc}
    a714:	10000a78 	.word	0x10000a78
    a718:	10000a74 	.word	0x10000a74

0000a71c <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    a71c:	b580      	push	{r7, lr}
    a71e:	b084      	sub	sp, #16
    a720:	af00      	add	r7, sp, #0
    a722:	4603      	mov	r3, r0
    a724:	460a      	mov	r2, r1
    a726:	71fb      	strb	r3, [r7, #7]
    a728:	4613      	mov	r3, r2
    a72a:	71bb      	strb	r3, [r7, #6]
	int iChunk, iType;

	if (bEP == 0x00) {
    a72c:	79fb      	ldrb	r3, [r7, #7]
    a72e:	2b00      	cmp	r3, #0
    a730:	f040 8091 	bne.w	a856 <USBHandleControlTransfer+0x13a>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    a734:	79bb      	ldrb	r3, [r7, #6]
    a736:	f003 0304 	and.w	r3, r3, #4
    a73a:	2b00      	cmp	r3, #0
    a73c:	d041      	beq.n	a7c2 <USBHandleControlTransfer+0xa6>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    a73e:	2000      	movs	r0, #0
    a740:	4949      	ldr	r1, [pc, #292]	; (a868 <USBHandleControlTransfer+0x14c>)
    a742:	2208      	movs	r2, #8
    a744:	f000 faaa 	bl	ac9c <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    a748:	4b47      	ldr	r3, [pc, #284]	; (a868 <USBHandleControlTransfer+0x14c>)
    a74a:	781b      	ldrb	r3, [r3, #0]
    a74c:	095b      	lsrs	r3, r3, #5
    a74e:	b2db      	uxtb	r3, r3
    a750:	f003 0303 	and.w	r3, r3, #3
    a754:	60fb      	str	r3, [r7, #12]
			pbData = apbDataStore[iType];
    a756:	4a45      	ldr	r2, [pc, #276]	; (a86c <USBHandleControlTransfer+0x150>)
    a758:	68fb      	ldr	r3, [r7, #12]
    a75a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a75e:	4a44      	ldr	r2, [pc, #272]	; (a870 <USBHandleControlTransfer+0x154>)
    a760:	6013      	str	r3, [r2, #0]
			iResidue = Setup.wLength;
    a762:	4b41      	ldr	r3, [pc, #260]	; (a868 <USBHandleControlTransfer+0x14c>)
    a764:	88db      	ldrh	r3, [r3, #6]
    a766:	461a      	mov	r2, r3
    a768:	4b42      	ldr	r3, [pc, #264]	; (a874 <USBHandleControlTransfer+0x158>)
    a76a:	601a      	str	r2, [r3, #0]
			iLen = Setup.wLength;
    a76c:	4b3e      	ldr	r3, [pc, #248]	; (a868 <USBHandleControlTransfer+0x14c>)
    a76e:	88db      	ldrh	r3, [r3, #6]
    a770:	461a      	mov	r2, r3
    a772:	4b41      	ldr	r3, [pc, #260]	; (a878 <USBHandleControlTransfer+0x15c>)
    a774:	601a      	str	r2, [r3, #0]

			if ((Setup.wLength == 0) ||
    a776:	4b3c      	ldr	r3, [pc, #240]	; (a868 <USBHandleControlTransfer+0x14c>)
    a778:	88db      	ldrh	r3, [r3, #6]
    a77a:	2b00      	cmp	r3, #0
    a77c:	d007      	beq.n	a78e <USBHandleControlTransfer+0x72>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
    a77e:	4b3a      	ldr	r3, [pc, #232]	; (a868 <USBHandleControlTransfer+0x14c>)
    a780:	781b      	ldrb	r3, [r3, #0]
    a782:	09db      	lsrs	r3, r3, #7
    a784:	b2db      	uxtb	r3, r3
    a786:	f003 0301 	and.w	r3, r3, #1
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
			pbData = apbDataStore[iType];
			iResidue = Setup.wLength;
			iLen = Setup.wLength;

			if ((Setup.wLength == 0) ||
    a78a:	2b00      	cmp	r3, #0
    a78c:	d068      	beq.n	a860 <USBHandleControlTransfer+0x144>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    a78e:	4836      	ldr	r0, [pc, #216]	; (a868 <USBHandleControlTransfer+0x14c>)
    a790:	4939      	ldr	r1, [pc, #228]	; (a878 <USBHandleControlTransfer+0x15c>)
    a792:	4a37      	ldr	r2, [pc, #220]	; (a870 <USBHandleControlTransfer+0x154>)
    a794:	f7ff ff4e 	bl	a634 <_HandleRequest>
    a798:	4603      	mov	r3, r0
    a79a:	2b00      	cmp	r3, #0
    a79c:	d104      	bne.n	a7a8 <USBHandleControlTransfer+0x8c>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
    a79e:	79bb      	ldrb	r3, [r7, #6]
    a7a0:	4618      	mov	r0, r3
    a7a2:	f7ff ff7d 	bl	a6a0 <StallControlPipe>
					return;
    a7a6:	e05b      	b.n	a860 <USBHandleControlTransfer+0x144>
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    a7a8:	4b2f      	ldr	r3, [pc, #188]	; (a868 <USBHandleControlTransfer+0x14c>)
    a7aa:	88db      	ldrh	r3, [r3, #6]
    a7ac:	461a      	mov	r2, r3
    a7ae:	4b32      	ldr	r3, [pc, #200]	; (a878 <USBHandleControlTransfer+0x15c>)
    a7b0:	681b      	ldr	r3, [r3, #0]
    a7b2:	4293      	cmp	r3, r2
    a7b4:	bfa8      	it	ge
    a7b6:	4613      	movge	r3, r2
    a7b8:	4a2e      	ldr	r2, [pc, #184]	; (a874 <USBHandleControlTransfer+0x158>)
    a7ba:	6013      	str	r3, [r2, #0]
				// send first part (possibly a zero-length status message)
				DataIn();
    a7bc:	f7ff ff8a 	bl	a6d4 <DataIn>
    a7c0:	e04e      	b.n	a860 <USBHandleControlTransfer+0x144>
			}
		}
		else {		
			if (iResidue > 0) {
    a7c2:	4b2c      	ldr	r3, [pc, #176]	; (a874 <USBHandleControlTransfer+0x158>)
    a7c4:	681b      	ldr	r3, [r3, #0]
    a7c6:	2b00      	cmp	r3, #0
    a7c8:	dd3e      	ble.n	a848 <USBHandleControlTransfer+0x12c>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    a7ca:	4b29      	ldr	r3, [pc, #164]	; (a870 <USBHandleControlTransfer+0x154>)
    a7cc:	681a      	ldr	r2, [r3, #0]
    a7ce:	4b29      	ldr	r3, [pc, #164]	; (a874 <USBHandleControlTransfer+0x158>)
    a7d0:	681b      	ldr	r3, [r3, #0]
    a7d2:	2000      	movs	r0, #0
    a7d4:	4611      	mov	r1, r2
    a7d6:	461a      	mov	r2, r3
    a7d8:	f000 fa60 	bl	ac9c <USBHwEPRead>
    a7dc:	60b8      	str	r0, [r7, #8]
				if (iChunk < 0) {
    a7de:	68bb      	ldr	r3, [r7, #8]
    a7e0:	2b00      	cmp	r3, #0
    a7e2:	da04      	bge.n	a7ee <USBHandleControlTransfer+0xd2>
					StallControlPipe(bEPStat);
    a7e4:	79bb      	ldrb	r3, [r7, #6]
    a7e6:	4618      	mov	r0, r3
    a7e8:	f7ff ff5a 	bl	a6a0 <StallControlPipe>
					return;
    a7ec:	e038      	b.n	a860 <USBHandleControlTransfer+0x144>
				}
				pbData += iChunk;
    a7ee:	4b20      	ldr	r3, [pc, #128]	; (a870 <USBHandleControlTransfer+0x154>)
    a7f0:	681a      	ldr	r2, [r3, #0]
    a7f2:	68bb      	ldr	r3, [r7, #8]
    a7f4:	4413      	add	r3, r2
    a7f6:	4a1e      	ldr	r2, [pc, #120]	; (a870 <USBHandleControlTransfer+0x154>)
    a7f8:	6013      	str	r3, [r2, #0]
				iResidue -= iChunk;
    a7fa:	4b1e      	ldr	r3, [pc, #120]	; (a874 <USBHandleControlTransfer+0x158>)
    a7fc:	681a      	ldr	r2, [r3, #0]
    a7fe:	68bb      	ldr	r3, [r7, #8]
    a800:	1ad3      	subs	r3, r2, r3
    a802:	4a1c      	ldr	r2, [pc, #112]	; (a874 <USBHandleControlTransfer+0x158>)
    a804:	6013      	str	r3, [r2, #0]
				if (iResidue == 0) {
    a806:	4b1b      	ldr	r3, [pc, #108]	; (a874 <USBHandleControlTransfer+0x158>)
    a808:	681b      	ldr	r3, [r3, #0]
    a80a:	2b00      	cmp	r3, #0
    a80c:	d128      	bne.n	a860 <USBHandleControlTransfer+0x144>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    a80e:	4b16      	ldr	r3, [pc, #88]	; (a868 <USBHandleControlTransfer+0x14c>)
    a810:	781b      	ldrb	r3, [r3, #0]
    a812:	095b      	lsrs	r3, r3, #5
    a814:	b2db      	uxtb	r3, r3
    a816:	f003 0303 	and.w	r3, r3, #3
    a81a:	60fb      	str	r3, [r7, #12]
					pbData = apbDataStore[iType];
    a81c:	4a13      	ldr	r2, [pc, #76]	; (a86c <USBHandleControlTransfer+0x150>)
    a81e:	68fb      	ldr	r3, [r7, #12]
    a820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a824:	4a12      	ldr	r2, [pc, #72]	; (a870 <USBHandleControlTransfer+0x154>)
    a826:	6013      	str	r3, [r2, #0]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    a828:	480f      	ldr	r0, [pc, #60]	; (a868 <USBHandleControlTransfer+0x14c>)
    a82a:	4913      	ldr	r1, [pc, #76]	; (a878 <USBHandleControlTransfer+0x15c>)
    a82c:	4a10      	ldr	r2, [pc, #64]	; (a870 <USBHandleControlTransfer+0x154>)
    a82e:	f7ff ff01 	bl	a634 <_HandleRequest>
    a832:	4603      	mov	r3, r0
    a834:	2b00      	cmp	r3, #0
    a836:	d104      	bne.n	a842 <USBHandleControlTransfer+0x126>
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
    a838:	79bb      	ldrb	r3, [r7, #6]
    a83a:	4618      	mov	r0, r3
    a83c:	f7ff ff30 	bl	a6a0 <StallControlPipe>
						return;
    a840:	e00e      	b.n	a860 <USBHandleControlTransfer+0x144>
					}
					// send status to host
					DataIn();
    a842:	f7ff ff47 	bl	a6d4 <DataIn>
    a846:	e00b      	b.n	a860 <USBHandleControlTransfer+0x144>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    a848:	2000      	movs	r0, #0
    a84a:	2100      	movs	r1, #0
    a84c:	2200      	movs	r2, #0
    a84e:	f000 fa25 	bl	ac9c <USBHwEPRead>
    a852:	60b8      	str	r0, [r7, #8]
    a854:	e004      	b.n	a860 <USBHandleControlTransfer+0x144>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    a856:	79fb      	ldrb	r3, [r7, #7]
    a858:	2b80      	cmp	r3, #128	; 0x80
    a85a:	d101      	bne.n	a860 <USBHandleControlTransfer+0x144>
		// IN transfer
		// send more data if available (possibly a 0-length packet)
		DataIn();
    a85c:	f7ff ff3a 	bl	a6d4 <DataIn>
	}
	else {
		ASSERT(FALSE);
	}
}
    a860:	3710      	adds	r7, #16
    a862:	46bd      	mov	sp, r7
    a864:	bd80      	pop	{r7, pc}
    a866:	bf00      	nop
    a868:	10000a6c 	.word	0x10000a6c
    a86c:	10000a90 	.word	0x10000a90
    a870:	10000a74 	.word	0x10000a74
    a874:	10000a78 	.word	0x10000a78
    a878:	10000a7c 	.word	0x10000a7c

0000a87c <USBRegisterRequestHandler>:
	@param [in]	iType			Type of request, e.g. REQTYPE_TYPE_STANDARD
	@param [in]	*pfnHandler		Callback function pointer
	@param [in]	*pbDataStore	Data storage area for this type of request
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
    a87c:	b480      	push	{r7}
    a87e:	b085      	sub	sp, #20
    a880:	af00      	add	r7, sp, #0
    a882:	60f8      	str	r0, [r7, #12]
    a884:	60b9      	str	r1, [r7, #8]
    a886:	607a      	str	r2, [r7, #4]
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    a888:	4907      	ldr	r1, [pc, #28]	; (a8a8 <USBRegisterRequestHandler+0x2c>)
    a88a:	68fb      	ldr	r3, [r7, #12]
    a88c:	68ba      	ldr	r2, [r7, #8]
    a88e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	apbDataStore[iType] = pbDataStore;
    a892:	4906      	ldr	r1, [pc, #24]	; (a8ac <USBRegisterRequestHandler+0x30>)
    a894:	68fb      	ldr	r3, [r7, #12]
    a896:	687a      	ldr	r2, [r7, #4]
    a898:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a89c:	3714      	adds	r7, #20
    a89e:	46bd      	mov	sp, r7
    a8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8a4:	4770      	bx	lr
    a8a6:	bf00      	nop
    a8a8:	10000a80 	.word	0x10000a80
    a8ac:	10000a90 	.word	0x10000a90

0000a8b0 <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    a8b0:	b480      	push	{r7}
    a8b2:	b083      	sub	sp, #12
    a8b4:	af00      	add	r7, sp, #0
    a8b6:	4603      	mov	r3, r0
    a8b8:	71fb      	strb	r3, [r7, #7]
	if (bDevStatus & DEV_STATUS_RESET) {
		DBG("\n!");
	}
}
    a8ba:	370c      	adds	r7, #12
    a8bc:	46bd      	mov	sp, r7
    a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8c2:	4770      	bx	lr

0000a8c4 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    a8c4:	b580      	push	{r7, lr}
    a8c6:	af00      	add	r7, sp, #0
	// init hardware
	USBHwInit();
    a8c8:	f000 fb2a 	bl	af20 <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    a8cc:	480d      	ldr	r0, [pc, #52]	; (a904 <USBInit+0x40>)
    a8ce:	f000 f913 	bl	aaf8 <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    a8d2:	2000      	movs	r0, #0
    a8d4:	490c      	ldr	r1, [pc, #48]	; (a908 <USBInit+0x44>)
    a8d6:	f000 f8dd 	bl	aa94 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    a8da:	2080      	movs	r0, #128	; 0x80
    a8dc:	490a      	ldr	r1, [pc, #40]	; (a908 <USBInit+0x44>)
    a8de:	f000 f8d9 	bl	aa94 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    a8e2:	2000      	movs	r0, #0
    a8e4:	2140      	movs	r1, #64	; 0x40
    a8e6:	f000 f8b7 	bl	aa58 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    a8ea:	2080      	movs	r0, #128	; 0x80
    a8ec:	2140      	movs	r1, #64	; 0x40
    a8ee:	f000 f8b3 	bl	aa58 <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    a8f2:	2000      	movs	r0, #0
    a8f4:	4905      	ldr	r1, [pc, #20]	; (a90c <USBInit+0x48>)
    a8f6:	4a06      	ldr	r2, [pc, #24]	; (a910 <USBInit+0x4c>)
    a8f8:	f7ff ffc0 	bl	a87c <USBRegisterRequestHandler>

	return TRUE;
    a8fc:	2301      	movs	r3, #1
}
    a8fe:	4618      	mov	r0, r3
    a900:	bd80      	pop	{r7, pc}
    a902:	bf00      	nop
    a904:	0000a8b1 	.word	0x0000a8b1
    a908:	0000a71d 	.word	0x0000a71d
    a90c:	0000b559 	.word	0x0000b559
    a910:	10000aa0 	.word	0x10000aa0

0000a914 <Wait4DevInt>:
    Local function to wait for a device interrupt (and clear it)
        
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    a914:	b480      	push	{r7}
    a916:	b083      	sub	sp, #12
    a918:	af00      	add	r7, sp, #0
    a91a:	6078      	str	r0, [r7, #4]
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    a91c:	bf00      	nop
    a91e:	4b07      	ldr	r3, [pc, #28]	; (a93c <Wait4DevInt+0x28>)
    a920:	681a      	ldr	r2, [r3, #0]
    a922:	687b      	ldr	r3, [r7, #4]
    a924:	401a      	ands	r2, r3
    a926:	687b      	ldr	r3, [r7, #4]
    a928:	429a      	cmp	r2, r3
    a92a:	d1f8      	bne.n	a91e <Wait4DevInt+0xa>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    a92c:	4a04      	ldr	r2, [pc, #16]	; (a940 <Wait4DevInt+0x2c>)
    a92e:	687b      	ldr	r3, [r7, #4]
    a930:	6013      	str	r3, [r2, #0]
}
    a932:	370c      	adds	r7, #12
    a934:	46bd      	mov	sp, r7
    a936:	f85d 7b04 	ldr.w	r7, [sp], #4
    a93a:	4770      	bx	lr
    a93c:	5000c200 	.word	0x5000c200
    a940:	5000c208 	.word	0x5000c208

0000a944 <USBHwCmd>:
    Local function to send a command to the USB protocol engine
        
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    a944:	b580      	push	{r7, lr}
    a946:	b082      	sub	sp, #8
    a948:	af00      	add	r7, sp, #0
    a94a:	4603      	mov	r3, r0
    a94c:	71fb      	strb	r3, [r7, #7]
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    a94e:	4b07      	ldr	r3, [pc, #28]	; (a96c <USBHwCmd+0x28>)
    a950:	2230      	movs	r2, #48	; 0x30
    a952:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    a954:	4a06      	ldr	r2, [pc, #24]	; (a970 <USBHwCmd+0x2c>)
    a956:	79fb      	ldrb	r3, [r7, #7]
    a958:	041b      	lsls	r3, r3, #16
    a95a:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    a95e:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    a960:	2010      	movs	r0, #16
    a962:	f7ff ffd7 	bl	a914 <Wait4DevInt>
}
    a966:	3708      	adds	r7, #8
    a968:	46bd      	mov	sp, r7
    a96a:	bd80      	pop	{r7, pc}
    a96c:	5000c208 	.word	0x5000c208
    a970:	5000c210 	.word	0x5000c210

0000a974 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    a974:	b580      	push	{r7, lr}
    a976:	b082      	sub	sp, #8
    a978:	af00      	add	r7, sp, #0
    a97a:	4603      	mov	r3, r0
    a97c:	460a      	mov	r2, r1
    a97e:	71fb      	strb	r3, [r7, #7]
    a980:	4613      	mov	r3, r2
    a982:	80bb      	strh	r3, [r7, #4]
    // write command code
    USBHwCmd(bCmd);
    a984:	79fb      	ldrb	r3, [r7, #7]
    a986:	4618      	mov	r0, r3
    a988:	f7ff ffdc 	bl	a944 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    a98c:	4a05      	ldr	r2, [pc, #20]	; (a9a4 <USBHwCmdWrite+0x30>)
    a98e:	88bb      	ldrh	r3, [r7, #4]
    a990:	041b      	lsls	r3, r3, #16
    a992:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a996:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    a998:	2010      	movs	r0, #16
    a99a:	f7ff ffbb 	bl	a914 <Wait4DevInt>
}
    a99e:	3708      	adds	r7, #8
    a9a0:	46bd      	mov	sp, r7
    a9a2:	bd80      	pop	{r7, pc}
    a9a4:	5000c210 	.word	0x5000c210

0000a9a8 <USBHwCmdRead>:
    @param [in] bCmd        Command to send

    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    a9a8:	b580      	push	{r7, lr}
    a9aa:	b082      	sub	sp, #8
    a9ac:	af00      	add	r7, sp, #0
    a9ae:	4603      	mov	r3, r0
    a9b0:	71fb      	strb	r3, [r7, #7]
    // write command code
    USBHwCmd(bCmd);
    a9b2:	79fb      	ldrb	r3, [r7, #7]
    a9b4:	4618      	mov	r0, r3
    a9b6:	f7ff ffc5 	bl	a944 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    a9ba:	4a08      	ldr	r2, [pc, #32]	; (a9dc <USBHwCmdRead+0x34>)
    a9bc:	79fb      	ldrb	r3, [r7, #7]
    a9be:	041b      	lsls	r3, r3, #16
    a9c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a9c4:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CDFULL);
    a9c6:	2020      	movs	r0, #32
    a9c8:	f7ff ffa4 	bl	a914 <Wait4DevInt>
    return USBCmdData;
    a9cc:	4b04      	ldr	r3, [pc, #16]	; (a9e0 <USBHwCmdRead+0x38>)
    a9ce:	681b      	ldr	r3, [r3, #0]
    a9d0:	b2db      	uxtb	r3, r3
}
    a9d2:	4618      	mov	r0, r3
    a9d4:	3708      	adds	r7, #8
    a9d6:	46bd      	mov	sp, r7
    a9d8:	bd80      	pop	{r7, pc}
    a9da:	bf00      	nop
    a9dc:	5000c210 	.word	0x5000c210
    a9e0:	5000c214 	.word	0x5000c214

0000a9e4 <USBHwEPRealize>:
        
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    a9e4:	b580      	push	{r7, lr}
    a9e6:	b082      	sub	sp, #8
    a9e8:	af00      	add	r7, sp, #0
    a9ea:	6078      	str	r0, [r7, #4]
    a9ec:	460b      	mov	r3, r1
    a9ee:	807b      	strh	r3, [r7, #2]
    USBReEp |= (1 << idx);
    a9f0:	490a      	ldr	r1, [pc, #40]	; (aa1c <USBHwEPRealize+0x38>)
    a9f2:	4b0a      	ldr	r3, [pc, #40]	; (aa1c <USBHwEPRealize+0x38>)
    a9f4:	681b      	ldr	r3, [r3, #0]
    a9f6:	2001      	movs	r0, #1
    a9f8:	687a      	ldr	r2, [r7, #4]
    a9fa:	fa00 f202 	lsl.w	r2, r0, r2
    a9fe:	4313      	orrs	r3, r2
    aa00:	600b      	str	r3, [r1, #0]
#ifdef LPC17xx
    USBEpIn = idx;
    aa02:	4a07      	ldr	r2, [pc, #28]	; (aa20 <USBHwEPRealize+0x3c>)
    aa04:	687b      	ldr	r3, [r7, #4]
    aa06:	6013      	str	r3, [r2, #0]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    aa08:	4a06      	ldr	r2, [pc, #24]	; (aa24 <USBHwEPRealize+0x40>)
    aa0a:	887b      	ldrh	r3, [r7, #2]
    aa0c:	6013      	str	r3, [r2, #0]
    Wait4DevInt(EP_RLZED);
    aa0e:	f44f 7080 	mov.w	r0, #256	; 0x100
    aa12:	f7ff ff7f 	bl	a914 <Wait4DevInt>
}
    aa16:	3708      	adds	r7, #8
    aa18:	46bd      	mov	sp, r7
    aa1a:	bd80      	pop	{r7, pc}
    aa1c:	5000c244 	.word	0x5000c244
    aa20:	5000c248 	.word	0x5000c248
    aa24:	5000c24c 	.word	0x5000c24c

0000aa28 <USBHwEPEnable>:
        
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    aa28:	b580      	push	{r7, lr}
    aa2a:	b082      	sub	sp, #8
    aa2c:	af00      	add	r7, sp, #0
    aa2e:	6078      	str	r0, [r7, #4]
    aa30:	6039      	str	r1, [r7, #0]
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    aa32:	687b      	ldr	r3, [r7, #4]
    aa34:	b2db      	uxtb	r3, r3
    aa36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    aa3a:	b2db      	uxtb	r3, r3
    aa3c:	b2da      	uxtb	r2, r3
    aa3e:	683b      	ldr	r3, [r7, #0]
    aa40:	2b00      	cmp	r3, #0
    aa42:	d001      	beq.n	aa48 <USBHwEPEnable+0x20>
    aa44:	2300      	movs	r3, #0
    aa46:	e000      	b.n	aa4a <USBHwEPEnable+0x22>
    aa48:	2320      	movs	r3, #32
    aa4a:	4610      	mov	r0, r2
    aa4c:	4619      	mov	r1, r3
    aa4e:	f7ff ff91 	bl	a974 <USBHwCmdWrite>
}
    aa52:	3708      	adds	r7, #8
    aa54:	46bd      	mov	sp, r7
    aa56:	bd80      	pop	{r7, pc}

0000aa58 <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    aa58:	b580      	push	{r7, lr}
    aa5a:	b084      	sub	sp, #16
    aa5c:	af00      	add	r7, sp, #0
    aa5e:	4603      	mov	r3, r0
    aa60:	460a      	mov	r2, r1
    aa62:	71fb      	strb	r3, [r7, #7]
    aa64:	4613      	mov	r3, r2
    aa66:	80bb      	strh	r3, [r7, #4]
    int idx;
    
    idx = EP2IDX(bEP);
    aa68:	79fb      	ldrb	r3, [r7, #7]
    aa6a:	f003 030f 	and.w	r3, r3, #15
    aa6e:	005b      	lsls	r3, r3, #1
    aa70:	79fa      	ldrb	r2, [r7, #7]
    aa72:	09d2      	lsrs	r2, r2, #7
    aa74:	b2d2      	uxtb	r2, r2
    aa76:	4313      	orrs	r3, r2
    aa78:	60fb      	str	r3, [r7, #12]
    
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);
    aa7a:	88bb      	ldrh	r3, [r7, #4]
    aa7c:	68f8      	ldr	r0, [r7, #12]
    aa7e:	4619      	mov	r1, r3
    aa80:	f7ff ffb0 	bl	a9e4 <USBHwEPRealize>

    // enable EP
    USBHwEPEnable(idx, TRUE);
    aa84:	68f8      	ldr	r0, [r7, #12]
    aa86:	2101      	movs	r1, #1
    aa88:	f7ff ffce 	bl	aa28 <USBHwEPEnable>
}
    aa8c:	3710      	adds	r7, #16
    aa8e:	46bd      	mov	sp, r7
    aa90:	bd80      	pop	{r7, pc}
    aa92:	bf00      	nop

0000aa94 <USBHwRegisterEPIntHandler>:
        
    @param [in] bEP             Endpoint number
    @param [in] pfnHandler      Callback function
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    aa94:	b480      	push	{r7}
    aa96:	b085      	sub	sp, #20
    aa98:	af00      	add	r7, sp, #0
    aa9a:	4603      	mov	r3, r0
    aa9c:	6039      	str	r1, [r7, #0]
    aa9e:	71fb      	strb	r3, [r7, #7]
    int idx;
    
    idx = EP2IDX(bEP);
    aaa0:	79fb      	ldrb	r3, [r7, #7]
    aaa2:	f003 030f 	and.w	r3, r3, #15
    aaa6:	005b      	lsls	r3, r3, #1
    aaa8:	79fa      	ldrb	r2, [r7, #7]
    aaaa:	09d2      	lsrs	r2, r2, #7
    aaac:	b2d2      	uxtb	r2, r2
    aaae:	4313      	orrs	r3, r2
    aab0:	60fb      	str	r3, [r7, #12]

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    aab2:	68fb      	ldr	r3, [r7, #12]
    aab4:	0fda      	lsrs	r2, r3, #31
    aab6:	4413      	add	r3, r2
    aab8:	105b      	asrs	r3, r3, #1
    aaba:	4619      	mov	r1, r3
    aabc:	4a0b      	ldr	r2, [pc, #44]	; (aaec <USBHwRegisterEPIntHandler+0x58>)
    aabe:	683b      	ldr	r3, [r7, #0]
    aac0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    aac4:	490a      	ldr	r1, [pc, #40]	; (aaf0 <USBHwRegisterEPIntHandler+0x5c>)
    aac6:	4b0a      	ldr	r3, [pc, #40]	; (aaf0 <USBHwRegisterEPIntHandler+0x5c>)
    aac8:	681b      	ldr	r3, [r3, #0]
    aaca:	2001      	movs	r0, #1
    aacc:	68fa      	ldr	r2, [r7, #12]
    aace:	fa00 f202 	lsl.w	r2, r0, r2
    aad2:	4313      	orrs	r3, r2
    aad4:	600b      	str	r3, [r1, #0]
    USBDevIntEn |= EP_SLOW;
    aad6:	4a07      	ldr	r2, [pc, #28]	; (aaf4 <USBHwRegisterEPIntHandler+0x60>)
    aad8:	4b06      	ldr	r3, [pc, #24]	; (aaf4 <USBHwRegisterEPIntHandler+0x60>)
    aada:	681b      	ldr	r3, [r3, #0]
    aadc:	f043 0304 	orr.w	r3, r3, #4
    aae0:	6013      	str	r3, [r2, #0]
    
    DBG("Registered handler for EP 0x%x\n", bEP);
}
    aae2:	3714      	adds	r7, #20
    aae4:	46bd      	mov	sp, r7
    aae6:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaea:	4770      	bx	lr
    aaec:	10000aac 	.word	0x10000aac
    aaf0:	5000c234 	.word	0x5000c234
    aaf4:	5000c204 	.word	0x5000c204

0000aaf8 <USBHwRegisterDevIntHandler>:
    Registers an device status callback
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    aaf8:	b480      	push	{r7}
    aafa:	b083      	sub	sp, #12
    aafc:	af00      	add	r7, sp, #0
    aafe:	6078      	str	r0, [r7, #4]
    _pfnDevIntHandler = pfnHandler;
    ab00:	4a06      	ldr	r2, [pc, #24]	; (ab1c <USBHwRegisterDevIntHandler+0x24>)
    ab02:	687b      	ldr	r3, [r7, #4]
    ab04:	6013      	str	r3, [r2, #0]
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    ab06:	4a06      	ldr	r2, [pc, #24]	; (ab20 <USBHwRegisterDevIntHandler+0x28>)
    ab08:	4b05      	ldr	r3, [pc, #20]	; (ab20 <USBHwRegisterDevIntHandler+0x28>)
    ab0a:	681b      	ldr	r3, [r3, #0]
    ab0c:	f043 0308 	orr.w	r3, r3, #8
    ab10:	6013      	str	r3, [r2, #0]

    DBG("Registered handler for device status\n");
}
    ab12:	370c      	adds	r7, #12
    ab14:	46bd      	mov	sp, r7
    ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab1a:	4770      	bx	lr
    ab1c:	10000aa8 	.word	0x10000aa8
    ab20:	5000c204 	.word	0x5000c204

0000ab24 <USBHwSetAddress>:
    Sets the USB address.
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    ab24:	b580      	push	{r7, lr}
    ab26:	b082      	sub	sp, #8
    ab28:	af00      	add	r7, sp, #0
    ab2a:	4603      	mov	r3, r0
    ab2c:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    ab2e:	79fb      	ldrb	r3, [r7, #7]
    ab30:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ab34:	b2db      	uxtb	r3, r3
    ab36:	b29b      	uxth	r3, r3
    ab38:	20d0      	movs	r0, #208	; 0xd0
    ab3a:	4619      	mov	r1, r3
    ab3c:	f7ff ff1a 	bl	a974 <USBHwCmdWrite>
}
    ab40:	3708      	adds	r7, #8
    ab42:	46bd      	mov	sp, r7
    ab44:	bd80      	pop	{r7, pc}
    ab46:	bf00      	nop

0000ab48 <USBHwConnect>:
    Connects or disconnects from the USB bus
        
    @param [in] fConnect    If TRUE, connect, otherwise disconnect
 */
void USBHwConnect(BOOL fConnect)
{
    ab48:	b580      	push	{r7, lr}
    ab4a:	b082      	sub	sp, #8
    ab4c:	af00      	add	r7, sp, #0
    ab4e:	6078      	str	r0, [r7, #4]
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    ab50:	687b      	ldr	r3, [r7, #4]
    ab52:	2b00      	cmp	r3, #0
    ab54:	bf14      	ite	ne
    ab56:	2301      	movne	r3, #1
    ab58:	2300      	moveq	r3, #0
    ab5a:	b2db      	uxtb	r3, r3
    ab5c:	b29b      	uxth	r3, r3
    ab5e:	20fe      	movs	r0, #254	; 0xfe
    ab60:	4619      	mov	r1, r3
    ab62:	f7ff ff07 	bl	a974 <USBHwCmdWrite>
}
    ab66:	3708      	adds	r7, #8
    ab68:	46bd      	mov	sp, r7
    ab6a:	bd80      	pop	{r7, pc}

0000ab6c <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    ab6c:	b580      	push	{r7, lr}
    ab6e:	b082      	sub	sp, #8
    ab70:	af00      	add	r7, sp, #0
    ab72:	4603      	mov	r3, r0
    ab74:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    ab76:	79fb      	ldrb	r3, [r7, #7]
    ab78:	b29b      	uxth	r3, r3
    ab7a:	20f3      	movs	r0, #243	; 0xf3
    ab7c:	4619      	mov	r1, r3
    ab7e:	f7ff fef9 	bl	a974 <USBHwCmdWrite>
}
    ab82:	3708      	adds	r7, #8
    ab84:	46bd      	mov	sp, r7
    ab86:	bd80      	pop	{r7, pc}

0000ab88 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    ab88:	b580      	push	{r7, lr}
    ab8a:	b084      	sub	sp, #16
    ab8c:	af00      	add	r7, sp, #0
    ab8e:	4603      	mov	r3, r0
    ab90:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    ab92:	79fb      	ldrb	r3, [r7, #7]
    ab94:	f003 030f 	and.w	r3, r3, #15
    ab98:	005b      	lsls	r3, r3, #1
    ab9a:	79fa      	ldrb	r2, [r7, #7]
    ab9c:	09d2      	lsrs	r2, r2, #7
    ab9e:	b2d2      	uxtb	r2, r2
    aba0:	4313      	orrs	r3, r2
    aba2:	60fb      	str	r3, [r7, #12]

    return USBHwCmdRead(CMD_EP_SELECT | idx);
    aba4:	68fb      	ldr	r3, [r7, #12]
    aba6:	b2db      	uxtb	r3, r3
    aba8:	4618      	mov	r0, r3
    abaa:	f7ff fefd 	bl	a9a8 <USBHwCmdRead>
    abae:	4603      	mov	r3, r0
}
    abb0:	4618      	mov	r0, r3
    abb2:	3710      	adds	r7, #16
    abb4:	46bd      	mov	sp, r7
    abb6:	bd80      	pop	{r7, pc}

0000abb8 <USBHwEPStall>:
        
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    abb8:	b580      	push	{r7, lr}
    abba:	b084      	sub	sp, #16
    abbc:	af00      	add	r7, sp, #0
    abbe:	4603      	mov	r3, r0
    abc0:	6039      	str	r1, [r7, #0]
    abc2:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    abc4:	79fb      	ldrb	r3, [r7, #7]
    abc6:	f003 030f 	and.w	r3, r3, #15
    abca:	005b      	lsls	r3, r3, #1
    abcc:	79fa      	ldrb	r2, [r7, #7]
    abce:	09d2      	lsrs	r2, r2, #7
    abd0:	b2d2      	uxtb	r2, r2
    abd2:	4313      	orrs	r3, r2
    abd4:	60fb      	str	r3, [r7, #12]

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    abd6:	68fb      	ldr	r3, [r7, #12]
    abd8:	b2db      	uxtb	r3, r3
    abda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    abde:	b2db      	uxtb	r3, r3
    abe0:	b2da      	uxtb	r2, r3
    abe2:	683b      	ldr	r3, [r7, #0]
    abe4:	2b00      	cmp	r3, #0
    abe6:	bf14      	ite	ne
    abe8:	2301      	movne	r3, #1
    abea:	2300      	moveq	r3, #0
    abec:	b2db      	uxtb	r3, r3
    abee:	b29b      	uxth	r3, r3
    abf0:	4610      	mov	r0, r2
    abf2:	4619      	mov	r1, r3
    abf4:	f7ff febe 	bl	a974 <USBHwCmdWrite>
}
    abf8:	3710      	adds	r7, #16
    abfa:	46bd      	mov	sp, r7
    abfc:	bd80      	pop	{r7, pc}
    abfe:	bf00      	nop

0000ac00 <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    ac00:	b580      	push	{r7, lr}
    ac02:	b086      	sub	sp, #24
    ac04:	af00      	add	r7, sp, #0
    ac06:	4603      	mov	r3, r0
    ac08:	60b9      	str	r1, [r7, #8]
    ac0a:	607a      	str	r2, [r7, #4]
    ac0c:	73fb      	strb	r3, [r7, #15]
    U32 idx;
    
    idx = EP2IDX(bEP);
    ac0e:	7bfb      	ldrb	r3, [r7, #15]
    ac10:	f003 030f 	and.w	r3, r3, #15
    ac14:	005b      	lsls	r3, r3, #1
    ac16:	7bfa      	ldrb	r2, [r7, #15]
    ac18:	09d2      	lsrs	r2, r2, #7
    ac1a:	b2d2      	uxtb	r2, r2
    ac1c:	4313      	orrs	r3, r2
    ac1e:	617b      	str	r3, [r7, #20]
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    ac20:	4a1b      	ldr	r2, [pc, #108]	; (ac90 <USBHwEPWrite+0x90>)
    ac22:	7bfb      	ldrb	r3, [r7, #15]
    ac24:	f003 030f 	and.w	r3, r3, #15
    ac28:	009b      	lsls	r3, r3, #2
    ac2a:	f043 0302 	orr.w	r3, r3, #2
    ac2e:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    ac30:	4a18      	ldr	r2, [pc, #96]	; (ac94 <USBHwEPWrite+0x94>)
    ac32:	687b      	ldr	r3, [r7, #4]
    ac34:	6013      	str	r3, [r2, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    ac36:	e015      	b.n	ac64 <USBHwEPWrite+0x64>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    ac38:	4917      	ldr	r1, [pc, #92]	; (ac98 <USBHwEPWrite+0x98>)
    ac3a:	68bb      	ldr	r3, [r7, #8]
    ac3c:	3303      	adds	r3, #3
    ac3e:	781b      	ldrb	r3, [r3, #0]
    ac40:	061a      	lsls	r2, r3, #24
    ac42:	68bb      	ldr	r3, [r7, #8]
    ac44:	3302      	adds	r3, #2
    ac46:	781b      	ldrb	r3, [r3, #0]
    ac48:	041b      	lsls	r3, r3, #16
    ac4a:	431a      	orrs	r2, r3
    ac4c:	68bb      	ldr	r3, [r7, #8]
    ac4e:	3301      	adds	r3, #1
    ac50:	781b      	ldrb	r3, [r3, #0]
    ac52:	021b      	lsls	r3, r3, #8
    ac54:	4313      	orrs	r3, r2
    ac56:	68ba      	ldr	r2, [r7, #8]
    ac58:	7812      	ldrb	r2, [r2, #0]
    ac5a:	4313      	orrs	r3, r2
    ac5c:	600b      	str	r3, [r1, #0]
        pbBuf += 4;
    ac5e:	68bb      	ldr	r3, [r7, #8]
    ac60:	3304      	adds	r3, #4
    ac62:	60bb      	str	r3, [r7, #8]
    
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
    ac64:	4b0a      	ldr	r3, [pc, #40]	; (ac90 <USBHwEPWrite+0x90>)
    ac66:	681b      	ldr	r3, [r3, #0]
    ac68:	f003 0302 	and.w	r3, r3, #2
    ac6c:	2b00      	cmp	r3, #0
    ac6e:	d1e3      	bne.n	ac38 <USBHwEPWrite+0x38>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
        pbBuf += 4;
    }

    USBCtrl = 0;
    ac70:	4b07      	ldr	r3, [pc, #28]	; (ac90 <USBHwEPWrite+0x90>)
    ac72:	2200      	movs	r2, #0
    ac74:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    ac76:	697b      	ldr	r3, [r7, #20]
    ac78:	b2db      	uxtb	r3, r3
    ac7a:	4618      	mov	r0, r3
    ac7c:	f7ff fe62 	bl	a944 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    ac80:	20fa      	movs	r0, #250	; 0xfa
    ac82:	f7ff fe5f 	bl	a944 <USBHwCmd>
    
    return iLen;
    ac86:	687b      	ldr	r3, [r7, #4]
}
    ac88:	4618      	mov	r0, r3
    ac8a:	3718      	adds	r7, #24
    ac8c:	46bd      	mov	sp, r7
    ac8e:	bd80      	pop	{r7, pc}
    ac90:	5000c228 	.word	0x5000c228
    ac94:	5000c224 	.word	0x5000c224
    ac98:	5000c21c 	.word	0x5000c21c

0000ac9c <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    ac9c:	b580      	push	{r7, lr}
    ac9e:	b088      	sub	sp, #32
    aca0:	af00      	add	r7, sp, #0
    aca2:	4603      	mov	r3, r0
    aca4:	60b9      	str	r1, [r7, #8]
    aca6:	607a      	str	r2, [r7, #4]
    aca8:	73fb      	strb	r3, [r7, #15]
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    acaa:	7bfb      	ldrb	r3, [r7, #15]
    acac:	f003 030f 	and.w	r3, r3, #15
    acb0:	005b      	lsls	r3, r3, #1
    acb2:	7bfa      	ldrb	r2, [r7, #15]
    acb4:	09d2      	lsrs	r2, r2, #7
    acb6:	b2d2      	uxtb	r2, r2
    acb8:	4313      	orrs	r3, r2
    acba:	617b      	str	r3, [r7, #20]
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    acbc:	4a27      	ldr	r2, [pc, #156]	; (ad5c <USBHwEPRead+0xc0>)
    acbe:	7bfb      	ldrb	r3, [r7, #15]
    acc0:	f003 030f 	and.w	r3, r3, #15
    acc4:	009b      	lsls	r3, r3, #2
    acc6:	f043 0301 	orr.w	r3, r3, #1
    acca:	6013      	str	r3, [r2, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    accc:	4b24      	ldr	r3, [pc, #144]	; (ad60 <USBHwEPRead+0xc4>)
    acce:	681b      	ldr	r3, [r3, #0]
    acd0:	613b      	str	r3, [r7, #16]
    } while ((dwLen & PKT_RDY) == 0);
    acd2:	693b      	ldr	r3, [r7, #16]
    acd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    acd8:	2b00      	cmp	r3, #0
    acda:	d0f7      	beq.n	accc <USBHwEPRead+0x30>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    acdc:	693b      	ldr	r3, [r7, #16]
    acde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ace2:	2b00      	cmp	r3, #0
    ace4:	d102      	bne.n	acec <USBHwEPRead+0x50>
        return -1;
    ace6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    acea:	e033      	b.n	ad54 <USBHwEPRead+0xb8>
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    acec:	693b      	ldr	r3, [r7, #16]
    acee:	f3c3 0309 	ubfx	r3, r3, #0, #10
    acf2:	613b      	str	r3, [r7, #16]
    
    // get data
    dwData = 0;
    acf4:	2300      	movs	r3, #0
    acf6:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < dwLen; i++) {
    acf8:	2300      	movs	r3, #0
    acfa:	61fb      	str	r3, [r7, #28]
    acfc:	e01a      	b.n	ad34 <USBHwEPRead+0x98>
        if ((i % 4) == 0) {
    acfe:	69fb      	ldr	r3, [r7, #28]
    ad00:	f003 0303 	and.w	r3, r3, #3
    ad04:	2b00      	cmp	r3, #0
    ad06:	d102      	bne.n	ad0e <USBHwEPRead+0x72>
            dwData = USBRxData;
    ad08:	4b16      	ldr	r3, [pc, #88]	; (ad64 <USBHwEPRead+0xc8>)
    ad0a:	681b      	ldr	r3, [r3, #0]
    ad0c:	61bb      	str	r3, [r7, #24]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    ad0e:	68bb      	ldr	r3, [r7, #8]
    ad10:	2b00      	cmp	r3, #0
    ad12:	d009      	beq.n	ad28 <USBHwEPRead+0x8c>
    ad14:	69fa      	ldr	r2, [r7, #28]
    ad16:	687b      	ldr	r3, [r7, #4]
    ad18:	429a      	cmp	r2, r3
    ad1a:	d205      	bcs.n	ad28 <USBHwEPRead+0x8c>
            pbBuf[i] = dwData & 0xFF;
    ad1c:	68ba      	ldr	r2, [r7, #8]
    ad1e:	69fb      	ldr	r3, [r7, #28]
    ad20:	4413      	add	r3, r2
    ad22:	69ba      	ldr	r2, [r7, #24]
    ad24:	b2d2      	uxtb	r2, r2
    ad26:	701a      	strb	r2, [r3, #0]
        }
        dwData >>= 8;
    ad28:	69bb      	ldr	r3, [r7, #24]
    ad2a:	0a1b      	lsrs	r3, r3, #8
    ad2c:	61bb      	str	r3, [r7, #24]
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    ad2e:	69fb      	ldr	r3, [r7, #28]
    ad30:	3301      	adds	r3, #1
    ad32:	61fb      	str	r3, [r7, #28]
    ad34:	69fa      	ldr	r2, [r7, #28]
    ad36:	693b      	ldr	r3, [r7, #16]
    ad38:	429a      	cmp	r2, r3
    ad3a:	d3e0      	bcc.n	acfe <USBHwEPRead+0x62>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    ad3c:	4b07      	ldr	r3, [pc, #28]	; (ad5c <USBHwEPRead+0xc0>)
    ad3e:	2200      	movs	r2, #0
    ad40:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    ad42:	697b      	ldr	r3, [r7, #20]
    ad44:	b2db      	uxtb	r3, r3
    ad46:	4618      	mov	r0, r3
    ad48:	f7ff fdfc 	bl	a944 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    ad4c:	20f2      	movs	r0, #242	; 0xf2
    ad4e:	f7ff fdf9 	bl	a944 <USBHwCmd>
    
    return dwLen;
    ad52:	693b      	ldr	r3, [r7, #16]
}
    ad54:	4618      	mov	r0, r3
    ad56:	3720      	adds	r7, #32
    ad58:	46bd      	mov	sp, r7
    ad5a:	bd80      	pop	{r7, pc}
    ad5c:	5000c228 	.word	0x5000c228
    ad60:	5000c220 	.word	0x5000c220
    ad64:	5000c218 	.word	0x5000c218

0000ad68 <USBHwConfigDevice>:
    'configured' bit is set in the device status register.
        
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    ad68:	b580      	push	{r7, lr}
    ad6a:	b082      	sub	sp, #8
    ad6c:	af00      	add	r7, sp, #0
    ad6e:	6078      	str	r0, [r7, #4]
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    ad70:	687b      	ldr	r3, [r7, #4]
    ad72:	2b00      	cmp	r3, #0
    ad74:	bf14      	ite	ne
    ad76:	2301      	movne	r3, #1
    ad78:	2300      	moveq	r3, #0
    ad7a:	b2db      	uxtb	r3, r3
    ad7c:	b29b      	uxth	r3, r3
    ad7e:	20d8      	movs	r0, #216	; 0xd8
    ad80:	4619      	mov	r1, r3
    ad82:	f7ff fdf7 	bl	a974 <USBHwCmdWrite>
}
    ad86:	3708      	adds	r7, #8
    ad88:	46bd      	mov	sp, r7
    ad8a:	bd80      	pop	{r7, pc}

0000ad8c <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    ad8c:	b580      	push	{r7, lr}
    ad8e:	b086      	sub	sp, #24
    ad90:	af00      	add	r7, sp, #0

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    ad92:	4b5b      	ldr	r3, [pc, #364]	; (af00 <USBHwISR+0x174>)
    ad94:	681b      	ldr	r3, [r3, #0]
    ad96:	613b      	str	r3, [r7, #16]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    ad98:	693b      	ldr	r3, [r7, #16]
    ad9a:	f003 0301 	and.w	r3, r3, #1
    ad9e:	2b00      	cmp	r3, #0
    ada0:	d010      	beq.n	adc4 <USBHwISR+0x38>
        // clear int
        USBDevIntClr = FRAME;
    ada2:	4b58      	ldr	r3, [pc, #352]	; (af04 <USBHwISR+0x178>)
    ada4:	2201      	movs	r2, #1
    ada6:	601a      	str	r2, [r3, #0]
        // call handler
        if (_pfnFrameHandler != NULL) {
    ada8:	4b57      	ldr	r3, [pc, #348]	; (af08 <USBHwISR+0x17c>)
    adaa:	681b      	ldr	r3, [r3, #0]
    adac:	2b00      	cmp	r3, #0
    adae:	d009      	beq.n	adc4 <USBHwISR+0x38>
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
    adb0:	20f5      	movs	r0, #245	; 0xf5
    adb2:	f7ff fdf9 	bl	a9a8 <USBHwCmdRead>
    adb6:	4603      	mov	r3, r0
    adb8:	81fb      	strh	r3, [r7, #14]
            _pfnFrameHandler(wFrame);
    adba:	4b53      	ldr	r3, [pc, #332]	; (af08 <USBHwISR+0x17c>)
    adbc:	681b      	ldr	r3, [r3, #0]
    adbe:	89fa      	ldrh	r2, [r7, #14]
    adc0:	4610      	mov	r0, r2
    adc2:	4798      	blx	r3
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    adc4:	693b      	ldr	r3, [r7, #16]
    adc6:	f003 0308 	and.w	r3, r3, #8
    adca:	2b00      	cmp	r3, #0
    adcc:	d02b      	beq.n	ae26 <USBHwISR+0x9a>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    adce:	4b4d      	ldr	r3, [pc, #308]	; (af04 <USBHwISR+0x178>)
    add0:	2208      	movs	r2, #8
    add2:	601a      	str	r2, [r3, #0]
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
    add4:	20fe      	movs	r0, #254	; 0xfe
    add6:	f7ff fde7 	bl	a9a8 <USBHwCmdRead>
    adda:	4603      	mov	r3, r0
    addc:	737b      	strb	r3, [r7, #13]
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    adde:	7b7b      	ldrb	r3, [r7, #13]
    ade0:	f003 031a 	and.w	r3, r3, #26
    ade4:	2b00      	cmp	r3, #0
    ade6:	d01e      	beq.n	ae26 <USBHwISR+0x9a>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
    ade8:	7b7b      	ldrb	r3, [r7, #13]
    adea:	f003 0301 	and.w	r3, r3, #1
    adee:	2b00      	cmp	r3, #0
    adf0:	bf14      	ite	ne
    adf2:	2301      	movne	r3, #1
    adf4:	2300      	moveq	r3, #0
    adf6:	b2db      	uxtb	r3, r3
    adf8:	b2da      	uxtb	r2, r3
    adfa:	7b7b      	ldrb	r3, [r7, #13]
    adfc:	f003 0304 	and.w	r3, r3, #4
    ae00:	b2db      	uxtb	r3, r3
    ae02:	4313      	orrs	r3, r2
    ae04:	b2da      	uxtb	r2, r3
    ae06:	7b7b      	ldrb	r3, [r7, #13]
    ae08:	f003 0310 	and.w	r3, r3, #16
    ae0c:	b2db      	uxtb	r3, r3
    ae0e:	4313      	orrs	r3, r2
    ae10:	b2db      	uxtb	r3, r3
    ae12:	733b      	strb	r3, [r7, #12]
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    ae14:	4b3d      	ldr	r3, [pc, #244]	; (af0c <USBHwISR+0x180>)
    ae16:	681b      	ldr	r3, [r3, #0]
    ae18:	2b00      	cmp	r3, #0
    ae1a:	d004      	beq.n	ae26 <USBHwISR+0x9a>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    ae1c:	4b3b      	ldr	r3, [pc, #236]	; (af0c <USBHwISR+0x180>)
    ae1e:	681b      	ldr	r3, [r3, #0]
    ae20:	7b3a      	ldrb	r2, [r7, #12]
    ae22:	4610      	mov	r0, r2
    ae24:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    ae26:	693b      	ldr	r3, [r7, #16]
    ae28:	f003 0304 	and.w	r3, r3, #4
    ae2c:	2b00      	cmp	r3, #0
    ae2e:	d063      	beq.n	aef8 <USBHwISR+0x16c>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    ae30:	4b34      	ldr	r3, [pc, #208]	; (af04 <USBHwISR+0x178>)
    ae32:	2204      	movs	r2, #4
    ae34:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    ae36:	2300      	movs	r3, #0
    ae38:	617b      	str	r3, [r7, #20]
    ae3a:	e05a      	b.n	aef2 <USBHwISR+0x166>
            dwIntBit = (1 << i);
    ae3c:	2201      	movs	r2, #1
    ae3e:	697b      	ldr	r3, [r7, #20]
    ae40:	fa02 f303 	lsl.w	r3, r2, r3
    ae44:	60bb      	str	r3, [r7, #8]
            if (USBEpIntSt & dwIntBit) {
    ae46:	4b32      	ldr	r3, [pc, #200]	; (af10 <USBHwISR+0x184>)
    ae48:	681a      	ldr	r2, [r3, #0]
    ae4a:	68bb      	ldr	r3, [r7, #8]
    ae4c:	4013      	ands	r3, r2
    ae4e:	2b00      	cmp	r3, #0
    ae50:	d04c      	beq.n	aeec <USBHwISR+0x160>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    ae52:	4a30      	ldr	r2, [pc, #192]	; (af14 <USBHwISR+0x188>)
    ae54:	68bb      	ldr	r3, [r7, #8]
    ae56:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    ae58:	2020      	movs	r0, #32
    ae5a:	f7ff fd5b 	bl	a914 <Wait4DevInt>
                bEPStat = USBCmdData;
    ae5e:	4b2e      	ldr	r3, [pc, #184]	; (af18 <USBHwISR+0x18c>)
    ae60:	681b      	ldr	r3, [r3, #0]
    ae62:	71fb      	strb	r3, [r7, #7]
                // convert EP pipe stat into something HW independent
                bStat = ((bEPStat & EPSTAT_FE) ? EP_STATUS_DATA : 0) |
    ae64:	79fb      	ldrb	r3, [r7, #7]
    ae66:	f003 0301 	and.w	r3, r3, #1
    ae6a:	2b00      	cmp	r3, #0
    ae6c:	bf14      	ite	ne
    ae6e:	2301      	movne	r3, #1
    ae70:	2300      	moveq	r3, #0
    ae72:	b2db      	uxtb	r3, r3
    ae74:	b2da      	uxtb	r2, r3
    ae76:	79fb      	ldrb	r3, [r7, #7]
    ae78:	f003 0302 	and.w	r3, r3, #2
    ae7c:	b2db      	uxtb	r3, r3
    ae7e:	4313      	orrs	r3, r2
    ae80:	b2da      	uxtb	r2, r3
    ae82:	79fb      	ldrb	r3, [r7, #7]
    ae84:	f003 0304 	and.w	r3, r3, #4
    ae88:	b2db      	uxtb	r3, r3
    ae8a:	4313      	orrs	r3, r2
    ae8c:	b2da      	uxtb	r2, r3
    ae8e:	79fb      	ldrb	r3, [r7, #7]
    ae90:	f003 0310 	and.w	r3, r3, #16
    ae94:	b2db      	uxtb	r3, r3
    ae96:	4313      	orrs	r3, r2
    ae98:	b2da      	uxtb	r2, r3
    ae9a:	79fb      	ldrb	r3, [r7, #7]
    ae9c:	f003 0308 	and.w	r3, r3, #8
    aea0:	b2db      	uxtb	r3, r3
    aea2:	4313      	orrs	r3, r2
    aea4:	b2db      	uxtb	r3, r3
    aea6:	733b      	strb	r3, [r7, #12]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    aea8:	697b      	ldr	r3, [r7, #20]
    aeaa:	0fda      	lsrs	r2, r3, #31
    aeac:	4413      	add	r3, r2
    aeae:	105b      	asrs	r3, r3, #1
    aeb0:	461a      	mov	r2, r3
    aeb2:	4b1a      	ldr	r3, [pc, #104]	; (af1c <USBHwISR+0x190>)
    aeb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    aeb8:	2b00      	cmp	r3, #0
    aeba:	d017      	beq.n	aeec <USBHwISR+0x160>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    aebc:	697b      	ldr	r3, [r7, #20]
    aebe:	0fda      	lsrs	r2, r3, #31
    aec0:	4413      	add	r3, r2
    aec2:	105b      	asrs	r3, r3, #1
    aec4:	461a      	mov	r2, r3
    aec6:	4b15      	ldr	r3, [pc, #84]	; (af1c <USBHwISR+0x190>)
    aec8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    aecc:	697a      	ldr	r2, [r7, #20]
    aece:	01d2      	lsls	r2, r2, #7
    aed0:	b2d1      	uxtb	r1, r2
    aed2:	697a      	ldr	r2, [r7, #20]
    aed4:	1052      	asrs	r2, r2, #1
    aed6:	b2d2      	uxtb	r2, r2
    aed8:	f002 020f 	and.w	r2, r2, #15
    aedc:	b2d2      	uxtb	r2, r2
    aede:	430a      	orrs	r2, r1
    aee0:	b2d2      	uxtb	r2, r2
    aee2:	b2d1      	uxtb	r1, r2
    aee4:	7b3a      	ldrb	r2, [r7, #12]
    aee6:	4608      	mov	r0, r1
    aee8:	4611      	mov	r1, r2
    aeea:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    aeec:	697b      	ldr	r3, [r7, #20]
    aeee:	3301      	adds	r3, #1
    aef0:	617b      	str	r3, [r7, #20]
    aef2:	697b      	ldr	r3, [r7, #20]
    aef4:	2b1f      	cmp	r3, #31
    aef6:	dda1      	ble.n	ae3c <USBHwISR+0xb0>
            }
        }
    }
    
DEBUG_LED_OFF(9);       
}
    aef8:	3718      	adds	r7, #24
    aefa:	46bd      	mov	sp, r7
    aefc:	bd80      	pop	{r7, pc}
    aefe:	bf00      	nop
    af00:	5000c200 	.word	0x5000c200
    af04:	5000c208 	.word	0x5000c208
    af08:	10000aec 	.word	0x10000aec
    af0c:	10000aa8 	.word	0x10000aa8
    af10:	5000c230 	.word	0x5000c230
    af14:	5000c238 	.word	0x5000c238
    af18:	5000c214 	.word	0x5000c214
    af1c:	10000aac 	.word	0x10000aac

0000af20 <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    af20:	b580      	push	{r7, lr}
    af22:	af00      	add	r7, sp, #0
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    af24:	4a2d      	ldr	r2, [pc, #180]	; (afdc <USBHwInit+0xbc>)
    af26:	4b2d      	ldr	r3, [pc, #180]	; (afdc <USBHwInit+0xbc>)
    af28:	681b      	ldr	r3, [r3, #0]
    af2a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    af2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    af32:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    af34:	4a2a      	ldr	r2, [pc, #168]	; (afe0 <USBHwInit+0xc0>)
    af36:	4b2a      	ldr	r3, [pc, #168]	; (afe0 <USBHwInit+0xc0>)
    af38:	681b      	ldr	r3, [r3, #0]
    af3a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    af3e:	f043 0310 	orr.w	r3, r3, #16
    af42:	6013      	str	r3, [r2, #0]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    af44:	4a26      	ldr	r2, [pc, #152]	; (afe0 <USBHwInit+0xc0>)
    af46:	4b26      	ldr	r3, [pc, #152]	; (afe0 <USBHwInit+0xc0>)
    af48:	681b      	ldr	r3, [r3, #0]
    af4a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    af4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    af52:	6013      	str	r3, [r2, #0]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    af54:	4a23      	ldr	r2, [pc, #140]	; (afe4 <USBHwInit+0xc4>)
    af56:	4b23      	ldr	r3, [pc, #140]	; (afe4 <USBHwInit+0xc4>)
    af58:	681b      	ldr	r3, [r3, #0]
    af5a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    af5e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    af62:	6013      	str	r3, [r2, #0]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    af64:	4a1f      	ldr	r2, [pc, #124]	; (afe4 <USBHwInit+0xc4>)
    af66:	4b1f      	ldr	r3, [pc, #124]	; (afe4 <USBHwInit+0xc4>)
    af68:	681b      	ldr	r3, [r3, #0]
    af6a:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    af6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    af72:	6013      	str	r3, [r2, #0]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    af74:	4a1c      	ldr	r2, [pc, #112]	; (afe8 <USBHwInit+0xc8>)
    af76:	4b1c      	ldr	r3, [pc, #112]	; (afe8 <USBHwInit+0xc8>)
    af78:	681b      	ldr	r3, [r3, #0]
    af7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    af7e:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    af80:	4a1a      	ldr	r2, [pc, #104]	; (afec <USBHwInit+0xcc>)
    af82:	4b1a      	ldr	r3, [pc, #104]	; (afec <USBHwInit+0xcc>)
    af84:	681b      	ldr	r3, [r3, #0]
    af86:	f043 0312 	orr.w	r3, r3, #18
    af8a:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    af8c:	bf00      	nop
    af8e:	4b18      	ldr	r3, [pc, #96]	; (aff0 <USBHwInit+0xd0>)
    af90:	681b      	ldr	r3, [r3, #0]
    af92:	f003 0302 	and.w	r3, r3, #2
    af96:	2b00      	cmp	r3, #0
    af98:	d0f9      	beq.n	af8e <USBHwInit+0x6e>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    af9a:	bf00      	nop
    af9c:	4b14      	ldr	r3, [pc, #80]	; (aff0 <USBHwInit+0xd0>)
    af9e:	681b      	ldr	r3, [r3, #0]
    afa0:	f003 0310 	and.w	r3, r3, #16
    afa4:	2b00      	cmp	r3, #0
    afa6:	d0f9      	beq.n	af9c <USBHwInit+0x7c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    afa8:	4b12      	ldr	r3, [pc, #72]	; (aff4 <USBHwInit+0xd4>)
    afaa:	2200      	movs	r2, #0
    afac:	601a      	str	r2, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    afae:	4b12      	ldr	r3, [pc, #72]	; (aff8 <USBHwInit+0xd8>)
    afb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    afb4:	601a      	str	r2, [r3, #0]
    USBDevIntPri = 0;
    afb6:	4b11      	ldr	r3, [pc, #68]	; (affc <USBHwInit+0xdc>)
    afb8:	2200      	movs	r2, #0
    afba:	601a      	str	r2, [r3, #0]

    USBEpIntEn = 0;
    afbc:	4b10      	ldr	r3, [pc, #64]	; (b000 <USBHwInit+0xe0>)
    afbe:	2200      	movs	r2, #0
    afc0:	601a      	str	r2, [r3, #0]
    USBEpIntClr = 0xFFFFFFFF;
    afc2:	4b10      	ldr	r3, [pc, #64]	; (b004 <USBHwInit+0xe4>)
    afc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    afc8:	601a      	str	r2, [r3, #0]
    USBEpIntPri = 0;
    afca:	4b0f      	ldr	r3, [pc, #60]	; (b008 <USBHwInit+0xe8>)
    afcc:	2200      	movs	r2, #0
    afce:	601a      	str	r2, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    afd0:	2000      	movs	r0, #0
    afd2:	f7ff fdcb 	bl	ab6c <USBHwNakIntEnable>
    // init debug leds
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
    afd6:	2301      	movs	r3, #1
}
    afd8:	4618      	mov	r0, r3
    afda:	bd80      	pop	{r7, pc}
    afdc:	4002c010 	.word	0x4002c010
    afe0:	4002c00c 	.word	0x4002c00c
    afe4:	4002c004 	.word	0x4002c004
    afe8:	400fc0c4 	.word	0x400fc0c4
    afec:	5000cff4 	.word	0x5000cff4
    aff0:	5000cff8 	.word	0x5000cff8
    aff4:	5000c204 	.word	0x5000c204
    aff8:	5000c208 	.word	0x5000c208
    affc:	5000c22c 	.word	0x5000c22c
    b000:	5000c234 	.word	0x5000c234
    b004:	5000c238 	.word	0x5000c238
    b008:	5000c240 	.word	0x5000c240

0000b00c <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    b00c:	b480      	push	{r7}
    b00e:	b089      	sub	sp, #36	; 0x24
    b010:	af00      	add	r7, sp, #0
    b012:	60f8      	str	r0, [r7, #12]
    b014:	60b9      	str	r1, [r7, #8]
    b016:	607a      	str	r2, [r7, #4]
    b018:	603b      	str	r3, [r7, #0]
	if(bMsVendorIndex == 0)	{
    b01a:	4b2d      	ldr	r3, [pc, #180]	; (b0d0 <USBFilterOsVendorMessage+0xc4>)
    b01c:	781b      	ldrb	r3, [r3, #0]
    b01e:	2b00      	cmp	r3, #0
    b020:	d101      	bne.n	b026 <USBFilterOsVendorMessage+0x1a>
		// Feature is disabled.
		return FALSE;
    b022:	2300      	movs	r3, #0
    b024:	e04e      	b.n	b0c4 <USBFilterOsVendorMessage+0xb8>
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    b026:	68fb      	ldr	r3, [r7, #12]
    b028:	785a      	ldrb	r2, [r3, #1]
    b02a:	4b29      	ldr	r3, [pc, #164]	; (b0d0 <USBFilterOsVendorMessage+0xc4>)
    b02c:	781b      	ldrb	r3, [r3, #0]
    b02e:	429a      	cmp	r2, r3
    b030:	d147      	bne.n	b0c2 <USBFilterOsVendorMessage+0xb6>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    b032:	68bb      	ldr	r3, [r7, #8]
    b034:	2200      	movs	r2, #0
    b036:	601a      	str	r2, [r3, #0]
	
		int iRequestLength = pSetup->wLength;
    b038:	68fb      	ldr	r3, [r7, #12]
    b03a:	88db      	ldrh	r3, [r3, #6]
    b03c:	61fb      	str	r3, [r7, #28]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
    b03e:	68fb      	ldr	r3, [r7, #12]
    b040:	885b      	ldrh	r3, [r3, #2]
    b042:	76fb      	strb	r3, [r7, #27]
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    b044:	68fb      	ldr	r3, [r7, #12]
    b046:	885b      	ldrh	r3, [r3, #2]
    b048:	0a1b      	lsrs	r3, r3, #8
    b04a:	b29b      	uxth	r3, r3
    b04c:	76bb      	strb	r3, [r7, #26]
	
		switch (pSetup->wIndex) {
    b04e:	68fb      	ldr	r3, [r7, #12]
    b050:	889b      	ldrh	r3, [r3, #4]
    b052:	2b04      	cmp	r3, #4
    b054:	d002      	beq.n	b05c <USBFilterOsVendorMessage+0x50>
    b056:	2b05      	cmp	r3, #5
    b058:	d007      	beq.n	b06a <USBFilterOsVendorMessage+0x5e>
    b05a:	e00d      	b.n	b078 <USBFilterOsVendorMessage+0x6c>
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    b05c:	683b      	ldr	r3, [r7, #0]
    b05e:	4a1d      	ldr	r2, [pc, #116]	; (b0d4 <USBFilterOsVendorMessage+0xc8>)
    b060:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    b062:	687b      	ldr	r3, [r7, #4]
    b064:	2228      	movs	r2, #40	; 0x28
    b066:	601a      	str	r2, [r3, #0]
			break;
    b068:	e008      	b.n	b07c <USBFilterOsVendorMessage+0x70>
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    b06a:	683b      	ldr	r3, [r7, #0]
    b06c:	4a1a      	ldr	r2, [pc, #104]	; (b0d8 <USBFilterOsVendorMessage+0xcc>)
    b06e:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    b070:	687b      	ldr	r3, [r7, #4]
    b072:	2292      	movs	r2, #146	; 0x92
    b074:	601a      	str	r2, [r3, #0]
			break;
    b076:	e001      	b.n	b07c <USBFilterOsVendorMessage+0x70>

		default:
			return TRUE;
    b078:	2301      	movs	r3, #1
    b07a:	e023      	b.n	b0c4 <USBFilterOsVendorMessage+0xb8>
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    b07c:	7ebb      	ldrb	r3, [r7, #26]
    b07e:	041b      	lsls	r3, r3, #16
    b080:	617b      	str	r3, [r7, #20]
		if (*piLen < iPageOffset) {
    b082:	687b      	ldr	r3, [r7, #4]
    b084:	681a      	ldr	r2, [r3, #0]
    b086:	697b      	ldr	r3, [r7, #20]
    b088:	429a      	cmp	r2, r3
    b08a:	da01      	bge.n	b090 <USBFilterOsVendorMessage+0x84>
			// Not enough data for the requested offset.
			return TRUE;
    b08c:	2301      	movs	r3, #1
    b08e:	e019      	b.n	b0c4 <USBFilterOsVendorMessage+0xb8>
		}
		*ppbData += iPageOffset;
    b090:	683b      	ldr	r3, [r7, #0]
    b092:	681a      	ldr	r2, [r3, #0]
    b094:	697b      	ldr	r3, [r7, #20]
    b096:	441a      	add	r2, r3
    b098:	683b      	ldr	r3, [r7, #0]
    b09a:	601a      	str	r2, [r3, #0]
		*piLen -= iPageOffset;
    b09c:	687b      	ldr	r3, [r7, #4]
    b09e:	681a      	ldr	r2, [r3, #0]
    b0a0:	697b      	ldr	r3, [r7, #20]
    b0a2:	1ad2      	subs	r2, r2, r3
    b0a4:	687b      	ldr	r3, [r7, #4]
    b0a6:	601a      	str	r2, [r3, #0]
		
		if (*piLen > iRequestLength) {
    b0a8:	687b      	ldr	r3, [r7, #4]
    b0aa:	681a      	ldr	r2, [r3, #0]
    b0ac:	69fb      	ldr	r3, [r7, #28]
    b0ae:	429a      	cmp	r2, r3
    b0b0:	dd02      	ble.n	b0b8 <USBFilterOsVendorMessage+0xac>
			// Clip data longer than the requested length
			*piLen = iRequestLength;
    b0b2:	687b      	ldr	r3, [r7, #4]
    b0b4:	69fa      	ldr	r2, [r7, #28]
    b0b6:	601a      	str	r2, [r3, #0]
		}
	
		*pfSuccess = TRUE;
    b0b8:	68bb      	ldr	r3, [r7, #8]
    b0ba:	2201      	movs	r2, #1
    b0bc:	601a      	str	r2, [r3, #0]
		return TRUE;
    b0be:	2301      	movs	r3, #1
    b0c0:	e000      	b.n	b0c4 <USBFilterOsVendorMessage+0xb8>
	}
	
	// These are not the requests you are looking for
	return FALSE;
    b0c2:	2300      	movs	r3, #0
}
    b0c4:	4618      	mov	r0, r3
    b0c6:	3724      	adds	r7, #36	; 0x24
    b0c8:	46bd      	mov	sp, r7
    b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
    b0ce:	4770      	bx	lr
    b0d0:	10000afc 	.word	0x10000afc
    b0d4:	0000c9b8 	.word	0x0000c9b8
    b0d8:	100008cc 	.word	0x100008cc

0000b0dc <USBRegisterWinusbInterface>:
	@param [in]		pcInterfaceGuid			ASCII String GUID in curly braces
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
    b0dc:	b480      	push	{r7}
    b0de:	b087      	sub	sp, #28
    b0e0:	af00      	add	r7, sp, #0
    b0e2:	4603      	mov	r3, r0
    b0e4:	6039      	str	r1, [r7, #0]
    b0e6:	71fb      	strb	r3, [r7, #7]
	bMsVendorIndex = bVendorRequestIndex;
    b0e8:	4a18      	ldr	r2, [pc, #96]	; (b14c <USBRegisterWinusbInterface+0x70>)
    b0ea:	79fb      	ldrb	r3, [r7, #7]
    b0ec:	7013      	strb	r3, [r2, #0]
	
	if(!pcInterfaceGuid) {
    b0ee:	683b      	ldr	r3, [r7, #0]
    b0f0:	2b00      	cmp	r3, #0
    b0f2:	d100      	bne.n	b0f6 <USBRegisterWinusbInterface+0x1a>
		return; // Trust that caller is actually specifying this with nonzero RequestIndex.
    b0f4:	e024      	b.n	b140 <USBRegisterWinusbInterface+0x64>
	}
	
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
    b0f6:	4b16      	ldr	r3, [pc, #88]	; (b150 <USBRegisterWinusbInterface+0x74>)
    b0f8:	617b      	str	r3, [r7, #20]
	const int ciMaxLength = 38;
    b0fa:	2326      	movs	r3, #38	; 0x26
    b0fc:	60fb      	str	r3, [r7, #12]
	
	for(int i = 0; i < ciMaxLength; i++) {
    b0fe:	2300      	movs	r3, #0
    b100:	613b      	str	r3, [r7, #16]
    b102:	e012      	b.n	b12a <USBRegisterWinusbInterface+0x4e>
		if(!pcInterfaceGuid[i]) break;
    b104:	693b      	ldr	r3, [r7, #16]
    b106:	683a      	ldr	r2, [r7, #0]
    b108:	4413      	add	r3, r2
    b10a:	781b      	ldrb	r3, [r3, #0]
    b10c:	2b00      	cmp	r3, #0
    b10e:	d100      	bne.n	b112 <USBRegisterWinusbInterface+0x36>
    b110:	e00f      	b.n	b132 <USBRegisterWinusbInterface+0x56>
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    b112:	693b      	ldr	r3, [r7, #16]
    b114:	683a      	ldr	r2, [r7, #0]
    b116:	4413      	add	r3, r2
    b118:	781a      	ldrb	r2, [r3, #0]
    b11a:	697b      	ldr	r3, [r7, #20]
    b11c:	701a      	strb	r2, [r3, #0]
		pbWriteCursor += 2;
    b11e:	697b      	ldr	r3, [r7, #20]
    b120:	3302      	adds	r3, #2
    b122:	617b      	str	r3, [r7, #20]
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    b124:	693b      	ldr	r3, [r7, #16]
    b126:	3301      	adds	r3, #1
    b128:	613b      	str	r3, [r7, #16]
    b12a:	693a      	ldr	r2, [r7, #16]
    b12c:	68fb      	ldr	r3, [r7, #12]
    b12e:	429a      	cmp	r2, r3
    b130:	dbe8      	blt.n	b104 <USBRegisterWinusbInterface+0x28>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    b132:	697b      	ldr	r3, [r7, #20]
    b134:	2200      	movs	r2, #0
    b136:	701a      	strb	r2, [r3, #0]
	pbWriteCursor[2] = 0;
    b138:	697b      	ldr	r3, [r7, #20]
    b13a:	3302      	adds	r3, #2
    b13c:	2200      	movs	r2, #0
    b13e:	701a      	strb	r2, [r3, #0]
	
}
    b140:	371c      	adds	r7, #28
    b142:	46bd      	mov	sp, r7
    b144:	f85d 7b04 	ldr.w	r7, [sp], #4
    b148:	4770      	bx	lr
    b14a:	bf00      	nop
    b14c:	10000afc 	.word	0x10000afc
    b150:	1000090e 	.word	0x1000090e

0000b154 <USBGetOsStringDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
    b154:	b480      	push	{r7}
    b156:	b083      	sub	sp, #12
    b158:	af00      	add	r7, sp, #0
    b15a:	6078      	str	r0, [r7, #4]
    b15c:	6039      	str	r1, [r7, #0]
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    b15e:	4b08      	ldr	r3, [pc, #32]	; (b180 <USBGetOsStringDescriptor+0x2c>)
    b160:	781a      	ldrb	r2, [r3, #0]
    b162:	4b08      	ldr	r3, [pc, #32]	; (b184 <USBGetOsStringDescriptor+0x30>)
    b164:	741a      	strb	r2, [r3, #16]
	
	*ppbData = abOsStringDescriptor;
    b166:	683b      	ldr	r3, [r7, #0]
    b168:	4a06      	ldr	r2, [pc, #24]	; (b184 <USBGetOsStringDescriptor+0x30>)
    b16a:	601a      	str	r2, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    b16c:	687b      	ldr	r3, [r7, #4]
    b16e:	2212      	movs	r2, #18
    b170:	601a      	str	r2, [r3, #0]
	return TRUE;
    b172:	2301      	movs	r3, #1
}
    b174:	4618      	mov	r0, r3
    b176:	370c      	adds	r7, #12
    b178:	46bd      	mov	sp, r7
    b17a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b17e:	4770      	bx	lr
    b180:	10000afc 	.word	0x10000afc
    b184:	100008b8 	.word	0x100008b8

0000b188 <USBRegisterDescriptors>:
	for the device.

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(const U8 *pabDescriptors)
{
    b188:	b480      	push	{r7}
    b18a:	b083      	sub	sp, #12
    b18c:	af00      	add	r7, sp, #0
    b18e:	6078      	str	r0, [r7, #4]
	pabDescrip = pabDescriptors;
    b190:	4a03      	ldr	r2, [pc, #12]	; (b1a0 <USBRegisterDescriptors+0x18>)
    b192:	687b      	ldr	r3, [r7, #4]
    b194:	6013      	str	r3, [r2, #0]
}
    b196:	370c      	adds	r7, #12
    b198:	46bd      	mov	sp, r7
    b19a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b19e:	4770      	bx	lr
    b1a0:	10000af8 	.word	0x10000af8

0000b1a4 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    b1a4:	b580      	push	{r7, lr}
    b1a6:	b088      	sub	sp, #32
    b1a8:	af00      	add	r7, sp, #0
    b1aa:	60ba      	str	r2, [r7, #8]
    b1ac:	607b      	str	r3, [r7, #4]
    b1ae:	4603      	mov	r3, r0
    b1b0:	81fb      	strh	r3, [r7, #14]
    b1b2:	460b      	mov	r3, r1
    b1b4:	81bb      	strh	r3, [r7, #12]
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    b1b6:	89fb      	ldrh	r3, [r7, #14]
    b1b8:	0a1b      	lsrs	r3, r3, #8
    b1ba:	b29b      	uxth	r3, r3
    b1bc:	75fb      	strb	r3, [r7, #23]
	bIndex = GET_DESC_INDEX(wTypeIndex);
    b1be:	89fb      	ldrh	r3, [r7, #14]
    b1c0:	75bb      	strb	r3, [r7, #22]
	
    if (bType == DESC_STRING &&
    b1c2:	7dfb      	ldrb	r3, [r7, #23]
    b1c4:	2b03      	cmp	r3, #3
    b1c6:	d10b      	bne.n	b1e0 <USBGetDescriptor+0x3c>
    b1c8:	7dbb      	ldrb	r3, [r7, #22]
    b1ca:	2bee      	cmp	r3, #238	; 0xee
    b1cc:	d108      	bne.n	b1e0 <USBGetDescriptor+0x3c>
        bIndex == DESC_STRING_OS) {
        
        if (USBGetOsStringDescriptor(piLen, ppbData)) {
    b1ce:	68b8      	ldr	r0, [r7, #8]
    b1d0:	6879      	ldr	r1, [r7, #4]
    b1d2:	f7ff ffbf 	bl	b154 <USBGetOsStringDescriptor>
    b1d6:	4603      	mov	r3, r0
    b1d8:	2b00      	cmp	r3, #0
    b1da:	d001      	beq.n	b1e0 <USBGetDescriptor+0x3c>
            
            return TRUE;
    b1dc:	2301      	movs	r3, #1
    b1de:	e036      	b.n	b24e <USBGetDescriptor+0xaa>
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    b1e0:	4b1d      	ldr	r3, [pc, #116]	; (b258 <USBGetDescriptor+0xb4>)
    b1e2:	681b      	ldr	r3, [r3, #0]
    b1e4:	61fb      	str	r3, [r7, #28]
	iCurIndex = 0;
    b1e6:	2300      	movs	r3, #0
    b1e8:	61bb      	str	r3, [r7, #24]
	
	while (pab[DESC_bLength] != 0) {
    b1ea:	e02b      	b.n	b244 <USBGetDescriptor+0xa0>
		if (pab[DESC_bDescriptorType] == bType) {
    b1ec:	69fb      	ldr	r3, [r7, #28]
    b1ee:	3301      	adds	r3, #1
    b1f0:	781b      	ldrb	r3, [r3, #0]
    b1f2:	7dfa      	ldrb	r2, [r7, #23]
    b1f4:	429a      	cmp	r2, r3
    b1f6:	d11f      	bne.n	b238 <USBGetDescriptor+0x94>
			if (iCurIndex == bIndex) {
    b1f8:	7dba      	ldrb	r2, [r7, #22]
    b1fa:	69bb      	ldr	r3, [r7, #24]
    b1fc:	429a      	cmp	r2, r3
    b1fe:	d118      	bne.n	b232 <USBGetDescriptor+0x8e>
				// set data pointer
				*ppbData = pab;
    b200:	687b      	ldr	r3, [r7, #4]
    b202:	69fa      	ldr	r2, [r7, #28]
    b204:	601a      	str	r2, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    b206:	7dfb      	ldrb	r3, [r7, #23]
    b208:	2b02      	cmp	r3, #2
    b20a:	d10b      	bne.n	b224 <USBGetDescriptor+0x80>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    b20c:	69fb      	ldr	r3, [r7, #28]
    b20e:	3302      	adds	r3, #2
    b210:	781b      	ldrb	r3, [r3, #0]
    b212:	461a      	mov	r2, r3
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    b214:	69fb      	ldr	r3, [r7, #28]
    b216:	3303      	adds	r3, #3
    b218:	781b      	ldrb	r3, [r3, #0]
    b21a:	021b      	lsls	r3, r3, #8
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    b21c:	431a      	orrs	r2, r3
    b21e:	68bb      	ldr	r3, [r7, #8]
    b220:	601a      	str	r2, [r3, #0]
    b222:	e004      	b.n	b22e <USBGetDescriptor+0x8a>
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    b224:	69fb      	ldr	r3, [r7, #28]
    b226:	781b      	ldrb	r3, [r3, #0]
    b228:	461a      	mov	r2, r3
    b22a:	68bb      	ldr	r3, [r7, #8]
    b22c:	601a      	str	r2, [r3, #0]
				}
				return TRUE;
    b22e:	2301      	movs	r3, #1
    b230:	e00d      	b.n	b24e <USBGetDescriptor+0xaa>
			}
			iCurIndex++;
    b232:	69bb      	ldr	r3, [r7, #24]
    b234:	3301      	adds	r3, #1
    b236:	61bb      	str	r3, [r7, #24]
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    b238:	69fb      	ldr	r3, [r7, #28]
    b23a:	781b      	ldrb	r3, [r3, #0]
    b23c:	461a      	mov	r2, r3
    b23e:	69fb      	ldr	r3, [r7, #28]
    b240:	4413      	add	r3, r2
    b242:	61fb      	str	r3, [r7, #28]
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    b244:	69fb      	ldr	r3, [r7, #28]
    b246:	781b      	ldrb	r3, [r3, #0]
    b248:	2b00      	cmp	r3, #0
    b24a:	d1cf      	bne.n	b1ec <USBGetDescriptor+0x48>
		// skip to next descriptor
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
    b24c:	2300      	movs	r3, #0
}
    b24e:	4618      	mov	r0, r3
    b250:	3720      	adds	r7, #32
    b252:	46bd      	mov	sp, r7
    b254:	bd80      	pop	{r7, pc}
    b256:	bf00      	nop
    b258:	10000af8 	.word	0x10000af8

0000b25c <USBSetConfiguration>:
	@todo function always returns TRUE, add stricter checking?
	
	@return TRUE if successfully configured, FALSE otherwise
 */
static BOOL USBSetConfiguration(U8 bConfigIndex, U8 bAltSetting)
{
    b25c:	b580      	push	{r7, lr}
    b25e:	b086      	sub	sp, #24
    b260:	af00      	add	r7, sp, #0
    b262:	4603      	mov	r3, r0
    b264:	460a      	mov	r2, r1
    b266:	71fb      	strb	r3, [r7, #7]
    b268:	4613      	mov	r3, r2
    b26a:	71bb      	strb	r3, [r7, #6]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    b26c:	79fb      	ldrb	r3, [r7, #7]
    b26e:	2b00      	cmp	r3, #0
    b270:	d103      	bne.n	b27a <USBSetConfiguration+0x1e>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    b272:	2000      	movs	r0, #0
    b274:	f7ff fd78 	bl	ad68 <USBHwConfigDevice>
    b278:	e045      	b.n	b306 <USBSetConfiguration+0xaa>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    b27a:	4b25      	ldr	r3, [pc, #148]	; (b310 <USBSetConfiguration+0xb4>)
    b27c:	681b      	ldr	r3, [r3, #0]
    b27e:	617b      	str	r3, [r7, #20]
		bCurConfig = 0xFF;
    b280:	23ff      	movs	r3, #255	; 0xff
    b282:	74fb      	strb	r3, [r7, #19]
		bCurAltSetting = 0xFF;
    b284:	23ff      	movs	r3, #255	; 0xff
    b286:	74bb      	strb	r3, [r7, #18]

		while (pab[DESC_bLength] != 0) {
    b288:	e036      	b.n	b2f8 <USBSetConfiguration+0x9c>

			switch (pab[DESC_bDescriptorType]) {
    b28a:	697b      	ldr	r3, [r7, #20]
    b28c:	3301      	adds	r3, #1
    b28e:	781b      	ldrb	r3, [r3, #0]
    b290:	2b04      	cmp	r3, #4
    b292:	d008      	beq.n	b2a6 <USBSetConfiguration+0x4a>
    b294:	2b05      	cmp	r3, #5
    b296:	d00a      	beq.n	b2ae <USBSetConfiguration+0x52>
    b298:	2b02      	cmp	r3, #2
    b29a:	d000      	beq.n	b29e <USBSetConfiguration+0x42>
					USBHwEPConfig(bEP, wMaxPktSize);
				}
				break;

			default:
				break;
    b29c:	e026      	b.n	b2ec <USBSetConfiguration+0x90>

			switch (pab[DESC_bDescriptorType]) {

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    b29e:	697b      	ldr	r3, [r7, #20]
    b2a0:	795b      	ldrb	r3, [r3, #5]
    b2a2:	74fb      	strb	r3, [r7, #19]
				break;
    b2a4:	e022      	b.n	b2ec <USBSetConfiguration+0x90>

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    b2a6:	697b      	ldr	r3, [r7, #20]
    b2a8:	78db      	ldrb	r3, [r3, #3]
    b2aa:	74bb      	strb	r3, [r7, #18]
				break;
    b2ac:	e01e      	b.n	b2ec <USBSetConfiguration+0x90>

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    b2ae:	7cfa      	ldrb	r2, [r7, #19]
    b2b0:	79fb      	ldrb	r3, [r7, #7]
    b2b2:	429a      	cmp	r2, r3
    b2b4:	d119      	bne.n	b2ea <USBSetConfiguration+0x8e>
    b2b6:	7cba      	ldrb	r2, [r7, #18]
    b2b8:	79bb      	ldrb	r3, [r7, #6]
    b2ba:	429a      	cmp	r2, r3
    b2bc:	d115      	bne.n	b2ea <USBSetConfiguration+0x8e>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
    b2be:	697b      	ldr	r3, [r7, #20]
    b2c0:	789b      	ldrb	r3, [r3, #2]
    b2c2:	747b      	strb	r3, [r7, #17]
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    b2c4:	697b      	ldr	r3, [r7, #20]
    b2c6:	3304      	adds	r3, #4
    b2c8:	781b      	ldrb	r3, [r3, #0]
    b2ca:	b29a      	uxth	r2, r3
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    b2cc:	697b      	ldr	r3, [r7, #20]
    b2ce:	3305      	adds	r3, #5
    b2d0:	781b      	ldrb	r3, [r3, #0]
    b2d2:	021b      	lsls	r3, r3, #8
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    b2d4:	b29b      	uxth	r3, r3
    b2d6:	4313      	orrs	r3, r2
    b2d8:	b29b      	uxth	r3, r3
    b2da:	81fb      	strh	r3, [r7, #14]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    b2dc:	7c7a      	ldrb	r2, [r7, #17]
    b2de:	89fb      	ldrh	r3, [r7, #14]
    b2e0:	4610      	mov	r0, r2
    b2e2:	4619      	mov	r1, r3
    b2e4:	f7ff fbb8 	bl	aa58 <USBHwEPConfig>
				}
				break;
    b2e8:	e7ff      	b.n	b2ea <USBSetConfiguration+0x8e>
    b2ea:	bf00      	nop

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    b2ec:	697b      	ldr	r3, [r7, #20]
    b2ee:	781b      	ldrb	r3, [r3, #0]
    b2f0:	461a      	mov	r2, r3
    b2f2:	697b      	ldr	r3, [r7, #20]
    b2f4:	4413      	add	r3, r2
    b2f6:	617b      	str	r3, [r7, #20]
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    b2f8:	697b      	ldr	r3, [r7, #20]
    b2fa:	781b      	ldrb	r3, [r3, #0]
    b2fc:	2b00      	cmp	r3, #0
    b2fe:	d1c4      	bne.n	b28a <USBSetConfiguration+0x2e>
			// skip to next descriptor
			pab += pab[DESC_bLength];
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    b300:	2001      	movs	r0, #1
    b302:	f7ff fd31 	bl	ad68 <USBHwConfigDevice>
	}

	return TRUE;
    b306:	2301      	movs	r3, #1
}
    b308:	4618      	mov	r0, r3
    b30a:	3718      	adds	r7, #24
    b30c:	46bd      	mov	sp, r7
    b30e:	bd80      	pop	{r7, pc}
    b310:	10000af8 	.word	0x10000af8

0000b314 <HandleStdDeviceReq>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    b314:	b580      	push	{r7, lr}
    b316:	b086      	sub	sp, #24
    b318:	af00      	add	r7, sp, #0
    b31a:	60f8      	str	r0, [r7, #12]
    b31c:	60b9      	str	r1, [r7, #8]
    b31e:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    b320:	687b      	ldr	r3, [r7, #4]
    b322:	681b      	ldr	r3, [r3, #0]
    b324:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    b326:	68fb      	ldr	r3, [r7, #12]
    b328:	785b      	ldrb	r3, [r3, #1]
    b32a:	2b09      	cmp	r3, #9
    b32c:	d852      	bhi.n	b3d4 <HandleStdDeviceReq+0xc0>
    b32e:	a201      	add	r2, pc, #4	; (adr r2, b334 <HandleStdDeviceReq+0x20>)
    b330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b334:	0000b35d 	.word	0x0000b35d
    b338:	0000b3cd 	.word	0x0000b3cd
    b33c:	0000b3d5 	.word	0x0000b3d5
    b340:	0000b3cd 	.word	0x0000b3cd
    b344:	0000b3d5 	.word	0x0000b3d5
    b348:	0000b373 	.word	0x0000b373
    b34c:	0000b381 	.word	0x0000b381
    b350:	0000b3d1 	.word	0x0000b3d1
    b354:	0000b399 	.word	0x0000b399
    b358:	0000b3a9 	.word	0x0000b3a9
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    b35c:	697b      	ldr	r3, [r7, #20]
    b35e:	2200      	movs	r2, #0
    b360:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    b362:	697b      	ldr	r3, [r7, #20]
    b364:	3301      	adds	r3, #1
    b366:	2200      	movs	r2, #0
    b368:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    b36a:	68bb      	ldr	r3, [r7, #8]
    b36c:	2202      	movs	r2, #2
    b36e:	601a      	str	r2, [r3, #0]
		break;
    b370:	e032      	b.n	b3d8 <HandleStdDeviceReq+0xc4>
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    b372:	68fb      	ldr	r3, [r7, #12]
    b374:	885b      	ldrh	r3, [r3, #2]
    b376:	b2db      	uxtb	r3, r3
    b378:	4618      	mov	r0, r3
    b37a:	f7ff fbd3 	bl	ab24 <USBHwSetAddress>
		break;
    b37e:	e02b      	b.n	b3d8 <HandleStdDeviceReq+0xc4>

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    b380:	68fb      	ldr	r3, [r7, #12]
    b382:	885a      	ldrh	r2, [r3, #2]
    b384:	68fb      	ldr	r3, [r7, #12]
    b386:	889b      	ldrh	r3, [r3, #4]
    b388:	4610      	mov	r0, r2
    b38a:	4619      	mov	r1, r3
    b38c:	68ba      	ldr	r2, [r7, #8]
    b38e:	687b      	ldr	r3, [r7, #4]
    b390:	f7ff ff08 	bl	b1a4 <USBGetDescriptor>
    b394:	4603      	mov	r3, r0
    b396:	e020      	b.n	b3da <HandleStdDeviceReq+0xc6>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    b398:	4b12      	ldr	r3, [pc, #72]	; (b3e4 <HandleStdDeviceReq+0xd0>)
    b39a:	781a      	ldrb	r2, [r3, #0]
    b39c:	697b      	ldr	r3, [r7, #20]
    b39e:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    b3a0:	68bb      	ldr	r3, [r7, #8]
    b3a2:	2201      	movs	r2, #1
    b3a4:	601a      	str	r2, [r3, #0]
		break;
    b3a6:	e017      	b.n	b3d8 <HandleStdDeviceReq+0xc4>

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    b3a8:	68fb      	ldr	r3, [r7, #12]
    b3aa:	885b      	ldrh	r3, [r3, #2]
    b3ac:	b2db      	uxtb	r3, r3
    b3ae:	4618      	mov	r0, r3
    b3b0:	2100      	movs	r1, #0
    b3b2:	f7ff ff53 	bl	b25c <USBSetConfiguration>
    b3b6:	4603      	mov	r3, r0
    b3b8:	2b00      	cmp	r3, #0
    b3ba:	d101      	bne.n	b3c0 <HandleStdDeviceReq+0xac>
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
    b3bc:	2300      	movs	r3, #0
    b3be:	e00c      	b.n	b3da <HandleStdDeviceReq+0xc6>
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    b3c0:	68fb      	ldr	r3, [r7, #12]
    b3c2:	885b      	ldrh	r3, [r3, #2]
    b3c4:	b2da      	uxtb	r2, r3
    b3c6:	4b07      	ldr	r3, [pc, #28]	; (b3e4 <HandleStdDeviceReq+0xd0>)
    b3c8:	701a      	strb	r2, [r3, #0]
		break;
    b3ca:	e005      	b.n	b3d8 <HandleStdDeviceReq+0xc4>
			// put DEVICE_REMOTE_WAKEUP code here
		}
		if (pSetup->wValue == FEA_TEST_MODE) {
			// put TEST_MODE code here
		}
		return FALSE;
    b3cc:	2300      	movs	r3, #0
    b3ce:	e004      	b.n	b3da <HandleStdDeviceReq+0xc6>

	case REQ_SET_DESCRIPTOR:
		DBG("Device req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    b3d0:	2300      	movs	r3, #0
    b3d2:	e002      	b.n	b3da <HandleStdDeviceReq+0xc6>

	default:
		DBG("Illegal device req %d\n", pSetup->bRequest);
		return FALSE;
    b3d4:	2300      	movs	r3, #0
    b3d6:	e000      	b.n	b3da <HandleStdDeviceReq+0xc6>
	}
	
	return TRUE;
    b3d8:	2301      	movs	r3, #1
}
    b3da:	4618      	mov	r0, r3
    b3dc:	3718      	adds	r7, #24
    b3de:	46bd      	mov	sp, r7
    b3e0:	bd80      	pop	{r7, pc}
    b3e2:	bf00      	nop
    b3e4:	10000af0 	.word	0x10000af0

0000b3e8 <HandleStdInterfaceReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    b3e8:	b480      	push	{r7}
    b3ea:	b087      	sub	sp, #28
    b3ec:	af00      	add	r7, sp, #0
    b3ee:	60f8      	str	r0, [r7, #12]
    b3f0:	60b9      	str	r1, [r7, #8]
    b3f2:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    b3f4:	687b      	ldr	r3, [r7, #4]
    b3f6:	681b      	ldr	r3, [r3, #0]
    b3f8:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    b3fa:	68fb      	ldr	r3, [r7, #12]
    b3fc:	785b      	ldrb	r3, [r3, #1]
    b3fe:	2b0b      	cmp	r3, #11
    b400:	d838      	bhi.n	b474 <HandleStdInterfaceReq+0x8c>
    b402:	a201      	add	r2, pc, #4	; (adr r2, b408 <HandleStdInterfaceReq+0x20>)
    b404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b408:	0000b439 	.word	0x0000b439
    b40c:	0000b44f 	.word	0x0000b44f
    b410:	0000b475 	.word	0x0000b475
    b414:	0000b44f 	.word	0x0000b44f
    b418:	0000b475 	.word	0x0000b475
    b41c:	0000b475 	.word	0x0000b475
    b420:	0000b475 	.word	0x0000b475
    b424:	0000b475 	.word	0x0000b475
    b428:	0000b475 	.word	0x0000b475
    b42c:	0000b475 	.word	0x0000b475
    b430:	0000b453 	.word	0x0000b453
    b434:	0000b461 	.word	0x0000b461

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    b438:	697b      	ldr	r3, [r7, #20]
    b43a:	2200      	movs	r2, #0
    b43c:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    b43e:	697b      	ldr	r3, [r7, #20]
    b440:	3301      	adds	r3, #1
    b442:	2200      	movs	r2, #0
    b444:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    b446:	68bb      	ldr	r3, [r7, #8]
    b448:	2202      	movs	r2, #2
    b44a:	601a      	str	r2, [r3, #0]
		break;
    b44c:	e014      	b.n	b478 <HandleStdInterfaceReq+0x90>

	case REQ_CLEAR_FEATURE:
	case REQ_SET_FEATURE:
		// not defined for interface
		return FALSE;
    b44e:	2300      	movs	r3, #0
    b450:	e013      	b.n	b47a <HandleStdInterfaceReq+0x92>
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    b452:	697b      	ldr	r3, [r7, #20]
    b454:	2200      	movs	r2, #0
    b456:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    b458:	68bb      	ldr	r3, [r7, #8]
    b45a:	2201      	movs	r2, #1
    b45c:	601a      	str	r2, [r3, #0]
		break;
    b45e:	e00b      	b.n	b478 <HandleStdInterfaceReq+0x90>
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    b460:	68fb      	ldr	r3, [r7, #12]
    b462:	885b      	ldrh	r3, [r3, #2]
    b464:	2b00      	cmp	r3, #0
    b466:	d001      	beq.n	b46c <HandleStdInterfaceReq+0x84>
			return FALSE;
    b468:	2300      	movs	r3, #0
    b46a:	e006      	b.n	b47a <HandleStdInterfaceReq+0x92>
		}
		*piLen = 0;
    b46c:	68bb      	ldr	r3, [r7, #8]
    b46e:	2200      	movs	r2, #0
    b470:	601a      	str	r2, [r3, #0]
		break;
    b472:	e001      	b.n	b478 <HandleStdInterfaceReq+0x90>

	default:
		DBG("Illegal interface req %d\n", pSetup->bRequest);
		return FALSE;
    b474:	2300      	movs	r3, #0
    b476:	e000      	b.n	b47a <HandleStdInterfaceReq+0x92>
	}

	return TRUE;
    b478:	2301      	movs	r3, #1
}
    b47a:	4618      	mov	r0, r3
    b47c:	371c      	adds	r7, #28
    b47e:	46bd      	mov	sp, r7
    b480:	f85d 7b04 	ldr.w	r7, [sp], #4
    b484:	4770      	bx	lr
    b486:	bf00      	nop

0000b488 <HandleStdEndPointReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    b488:	b580      	push	{r7, lr}
    b48a:	b086      	sub	sp, #24
    b48c:	af00      	add	r7, sp, #0
    b48e:	60f8      	str	r0, [r7, #12]
    b490:	60b9      	str	r1, [r7, #8]
    b492:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    b494:	687b      	ldr	r3, [r7, #4]
    b496:	681b      	ldr	r3, [r3, #0]
    b498:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    b49a:	68fb      	ldr	r3, [r7, #12]
    b49c:	785b      	ldrb	r3, [r3, #1]
    b49e:	2b0c      	cmp	r3, #12
    b4a0:	d853      	bhi.n	b54a <HandleStdEndPointReq+0xc2>
    b4a2:	a201      	add	r2, pc, #4	; (adr r2, b4a8 <HandleStdEndPointReq+0x20>)
    b4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b4a8:	0000b4dd 	.word	0x0000b4dd
    b4ac:	0000b50f 	.word	0x0000b50f
    b4b0:	0000b54b 	.word	0x0000b54b
    b4b4:	0000b52b 	.word	0x0000b52b
    b4b8:	0000b54b 	.word	0x0000b54b
    b4bc:	0000b54b 	.word	0x0000b54b
    b4c0:	0000b54b 	.word	0x0000b54b
    b4c4:	0000b54b 	.word	0x0000b54b
    b4c8:	0000b54b 	.word	0x0000b54b
    b4cc:	0000b54b 	.word	0x0000b54b
    b4d0:	0000b54b 	.word	0x0000b54b
    b4d4:	0000b54b 	.word	0x0000b54b
    b4d8:	0000b547 	.word	0x0000b547
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    b4dc:	68fb      	ldr	r3, [r7, #12]
    b4de:	889b      	ldrh	r3, [r3, #4]
    b4e0:	b2db      	uxtb	r3, r3
    b4e2:	4618      	mov	r0, r3
    b4e4:	f7ff fb50 	bl	ab88 <USBHwEPGetStatus>
    b4e8:	4603      	mov	r3, r0
    b4ea:	f003 0302 	and.w	r3, r3, #2
    b4ee:	2b00      	cmp	r3, #0
    b4f0:	bf14      	ite	ne
    b4f2:	2301      	movne	r3, #1
    b4f4:	2300      	moveq	r3, #0
    b4f6:	b2db      	uxtb	r3, r3
    b4f8:	461a      	mov	r2, r3
    b4fa:	697b      	ldr	r3, [r7, #20]
    b4fc:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    b4fe:	697b      	ldr	r3, [r7, #20]
    b500:	3301      	adds	r3, #1
    b502:	2200      	movs	r2, #0
    b504:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    b506:	68bb      	ldr	r3, [r7, #8]
    b508:	2202      	movs	r2, #2
    b50a:	601a      	str	r2, [r3, #0]
		break;
    b50c:	e01f      	b.n	b54e <HandleStdEndPointReq+0xc6>
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    b50e:	68fb      	ldr	r3, [r7, #12]
    b510:	885b      	ldrh	r3, [r3, #2]
    b512:	2b00      	cmp	r3, #0
    b514:	d107      	bne.n	b526 <HandleStdEndPointReq+0x9e>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    b516:	68fb      	ldr	r3, [r7, #12]
    b518:	889b      	ldrh	r3, [r3, #4]
    b51a:	b2db      	uxtb	r3, r3
    b51c:	4618      	mov	r0, r3
    b51e:	2100      	movs	r1, #0
    b520:	f7ff fb4a 	bl	abb8 <USBHwEPStall>
			break;
    b524:	e013      	b.n	b54e <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    b526:	2300      	movs	r3, #0
    b528:	e012      	b.n	b550 <HandleStdEndPointReq+0xc8>
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    b52a:	68fb      	ldr	r3, [r7, #12]
    b52c:	885b      	ldrh	r3, [r3, #2]
    b52e:	2b00      	cmp	r3, #0
    b530:	d107      	bne.n	b542 <HandleStdEndPointReq+0xba>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    b532:	68fb      	ldr	r3, [r7, #12]
    b534:	889b      	ldrh	r3, [r3, #4]
    b536:	b2db      	uxtb	r3, r3
    b538:	4618      	mov	r0, r3
    b53a:	2101      	movs	r1, #1
    b53c:	f7ff fb3c 	bl	abb8 <USBHwEPStall>
			break;
    b540:	e005      	b.n	b54e <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    b542:	2300      	movs	r3, #0
    b544:	e004      	b.n	b550 <HandleStdEndPointReq+0xc8>

	case REQ_SYNCH_FRAME:
		DBG("EP req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    b546:	2300      	movs	r3, #0
    b548:	e002      	b.n	b550 <HandleStdEndPointReq+0xc8>

	default:
		DBG("Illegal EP req %d\n", pSetup->bRequest);
		return FALSE;
    b54a:	2300      	movs	r3, #0
    b54c:	e000      	b.n	b550 <HandleStdEndPointReq+0xc8>
	}
	
	return TRUE;
    b54e:	2301      	movs	r3, #1
}
    b550:	4618      	mov	r0, r3
    b552:	3718      	adds	r7, #24
    b554:	46bd      	mov	sp, r7
    b556:	bd80      	pop	{r7, pc}

0000b558 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    b558:	b580      	push	{r7, lr}
    b55a:	b084      	sub	sp, #16
    b55c:	af00      	add	r7, sp, #0
    b55e:	60f8      	str	r0, [r7, #12]
    b560:	60b9      	str	r1, [r7, #8]
    b562:	607a      	str	r2, [r7, #4]
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    b564:	4b19      	ldr	r3, [pc, #100]	; (b5cc <USBHandleStandardRequest+0x74>)
    b566:	681b      	ldr	r3, [r3, #0]
    b568:	2b00      	cmp	r3, #0
    b56a:	d00a      	beq.n	b582 <USBHandleStandardRequest+0x2a>
    b56c:	4b17      	ldr	r3, [pc, #92]	; (b5cc <USBHandleStandardRequest+0x74>)
    b56e:	681b      	ldr	r3, [r3, #0]
    b570:	68f8      	ldr	r0, [r7, #12]
    b572:	68b9      	ldr	r1, [r7, #8]
    b574:	687a      	ldr	r2, [r7, #4]
    b576:	4798      	blx	r3
    b578:	4603      	mov	r3, r0
    b57a:	2b00      	cmp	r3, #0
    b57c:	d001      	beq.n	b582 <USBHandleStandardRequest+0x2a>
		return TRUE;
    b57e:	2301      	movs	r3, #1
    b580:	e01f      	b.n	b5c2 <USBHandleStandardRequest+0x6a>
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    b582:	68fb      	ldr	r3, [r7, #12]
    b584:	781b      	ldrb	r3, [r3, #0]
    b586:	f003 031f 	and.w	r3, r3, #31
    b58a:	2b01      	cmp	r3, #1
    b58c:	d00a      	beq.n	b5a4 <USBHandleStandardRequest+0x4c>
    b58e:	2b02      	cmp	r3, #2
    b590:	d00f      	beq.n	b5b2 <USBHandleStandardRequest+0x5a>
    b592:	2b00      	cmp	r3, #0
    b594:	d114      	bne.n	b5c0 <USBHandleStandardRequest+0x68>
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
    b596:	68f8      	ldr	r0, [r7, #12]
    b598:	68b9      	ldr	r1, [r7, #8]
    b59a:	687a      	ldr	r2, [r7, #4]
    b59c:	f7ff feba 	bl	b314 <HandleStdDeviceReq>
    b5a0:	4603      	mov	r3, r0
    b5a2:	e00e      	b.n	b5c2 <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
    b5a4:	68f8      	ldr	r0, [r7, #12]
    b5a6:	68b9      	ldr	r1, [r7, #8]
    b5a8:	687a      	ldr	r2, [r7, #4]
    b5aa:	f7ff ff1d 	bl	b3e8 <HandleStdInterfaceReq>
    b5ae:	4603      	mov	r3, r0
    b5b0:	e007      	b.n	b5c2 <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
    b5b2:	68f8      	ldr	r0, [r7, #12]
    b5b4:	68b9      	ldr	r1, [r7, #8]
    b5b6:	687a      	ldr	r2, [r7, #4]
    b5b8:	f7ff ff66 	bl	b488 <HandleStdEndPointReq>
    b5bc:	4603      	mov	r3, r0
    b5be:	e000      	b.n	b5c2 <USBHandleStandardRequest+0x6a>
	default: 						return FALSE;
    b5c0:	2300      	movs	r3, #0
	}
}
    b5c2:	4618      	mov	r0, r3
    b5c4:	3710      	adds	r7, #16
    b5c6:	46bd      	mov	sp, r7
    b5c8:	bd80      	pop	{r7, pc}
    b5ca:	bf00      	nop
    b5cc:	10000af4 	.word	0x10000af4

0000b5d0 <__aeabi_drsub>:
    b5d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    b5d4:	e002      	b.n	b5dc <__adddf3>
    b5d6:	bf00      	nop

0000b5d8 <__aeabi_dsub>:
    b5d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000b5dc <__adddf3>:
    b5dc:	b530      	push	{r4, r5, lr}
    b5de:	ea4f 0441 	mov.w	r4, r1, lsl #1
    b5e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
    b5e6:	ea94 0f05 	teq	r4, r5
    b5ea:	bf08      	it	eq
    b5ec:	ea90 0f02 	teqeq	r0, r2
    b5f0:	bf1f      	itttt	ne
    b5f2:	ea54 0c00 	orrsne.w	ip, r4, r0
    b5f6:	ea55 0c02 	orrsne.w	ip, r5, r2
    b5fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    b5fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b602:	f000 80e2 	beq.w	b7ca <__adddf3+0x1ee>
    b606:	ea4f 5454 	mov.w	r4, r4, lsr #21
    b60a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    b60e:	bfb8      	it	lt
    b610:	426d      	neglt	r5, r5
    b612:	dd0c      	ble.n	b62e <__adddf3+0x52>
    b614:	442c      	add	r4, r5
    b616:	ea80 0202 	eor.w	r2, r0, r2
    b61a:	ea81 0303 	eor.w	r3, r1, r3
    b61e:	ea82 0000 	eor.w	r0, r2, r0
    b622:	ea83 0101 	eor.w	r1, r3, r1
    b626:	ea80 0202 	eor.w	r2, r0, r2
    b62a:	ea81 0303 	eor.w	r3, r1, r3
    b62e:	2d36      	cmp	r5, #54	; 0x36
    b630:	bf88      	it	hi
    b632:	bd30      	pophi	{r4, r5, pc}
    b634:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    b638:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b63c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    b640:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    b644:	d002      	beq.n	b64c <__adddf3+0x70>
    b646:	4240      	negs	r0, r0
    b648:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b64c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    b650:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b654:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    b658:	d002      	beq.n	b660 <__adddf3+0x84>
    b65a:	4252      	negs	r2, r2
    b65c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    b660:	ea94 0f05 	teq	r4, r5
    b664:	f000 80a7 	beq.w	b7b6 <__adddf3+0x1da>
    b668:	f1a4 0401 	sub.w	r4, r4, #1
    b66c:	f1d5 0e20 	rsbs	lr, r5, #32
    b670:	db0d      	blt.n	b68e <__adddf3+0xb2>
    b672:	fa02 fc0e 	lsl.w	ip, r2, lr
    b676:	fa22 f205 	lsr.w	r2, r2, r5
    b67a:	1880      	adds	r0, r0, r2
    b67c:	f141 0100 	adc.w	r1, r1, #0
    b680:	fa03 f20e 	lsl.w	r2, r3, lr
    b684:	1880      	adds	r0, r0, r2
    b686:	fa43 f305 	asr.w	r3, r3, r5
    b68a:	4159      	adcs	r1, r3
    b68c:	e00e      	b.n	b6ac <__adddf3+0xd0>
    b68e:	f1a5 0520 	sub.w	r5, r5, #32
    b692:	f10e 0e20 	add.w	lr, lr, #32
    b696:	2a01      	cmp	r2, #1
    b698:	fa03 fc0e 	lsl.w	ip, r3, lr
    b69c:	bf28      	it	cs
    b69e:	f04c 0c02 	orrcs.w	ip, ip, #2
    b6a2:	fa43 f305 	asr.w	r3, r3, r5
    b6a6:	18c0      	adds	r0, r0, r3
    b6a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    b6ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b6b0:	d507      	bpl.n	b6c2 <__adddf3+0xe6>
    b6b2:	f04f 0e00 	mov.w	lr, #0
    b6b6:	f1dc 0c00 	rsbs	ip, ip, #0
    b6ba:	eb7e 0000 	sbcs.w	r0, lr, r0
    b6be:	eb6e 0101 	sbc.w	r1, lr, r1
    b6c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    b6c6:	d31b      	bcc.n	b700 <__adddf3+0x124>
    b6c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    b6cc:	d30c      	bcc.n	b6e8 <__adddf3+0x10c>
    b6ce:	0849      	lsrs	r1, r1, #1
    b6d0:	ea5f 0030 	movs.w	r0, r0, rrx
    b6d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
    b6d8:	f104 0401 	add.w	r4, r4, #1
    b6dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
    b6e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    b6e4:	f080 809a 	bcs.w	b81c <__adddf3+0x240>
    b6e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    b6ec:	bf08      	it	eq
    b6ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b6f2:	f150 0000 	adcs.w	r0, r0, #0
    b6f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b6fa:	ea41 0105 	orr.w	r1, r1, r5
    b6fe:	bd30      	pop	{r4, r5, pc}
    b700:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    b704:	4140      	adcs	r0, r0
    b706:	eb41 0101 	adc.w	r1, r1, r1
    b70a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b70e:	f1a4 0401 	sub.w	r4, r4, #1
    b712:	d1e9      	bne.n	b6e8 <__adddf3+0x10c>
    b714:	f091 0f00 	teq	r1, #0
    b718:	bf04      	itt	eq
    b71a:	4601      	moveq	r1, r0
    b71c:	2000      	moveq	r0, #0
    b71e:	fab1 f381 	clz	r3, r1
    b722:	bf08      	it	eq
    b724:	3320      	addeq	r3, #32
    b726:	f1a3 030b 	sub.w	r3, r3, #11
    b72a:	f1b3 0220 	subs.w	r2, r3, #32
    b72e:	da0c      	bge.n	b74a <__adddf3+0x16e>
    b730:	320c      	adds	r2, #12
    b732:	dd08      	ble.n	b746 <__adddf3+0x16a>
    b734:	f102 0c14 	add.w	ip, r2, #20
    b738:	f1c2 020c 	rsb	r2, r2, #12
    b73c:	fa01 f00c 	lsl.w	r0, r1, ip
    b740:	fa21 f102 	lsr.w	r1, r1, r2
    b744:	e00c      	b.n	b760 <__adddf3+0x184>
    b746:	f102 0214 	add.w	r2, r2, #20
    b74a:	bfd8      	it	le
    b74c:	f1c2 0c20 	rsble	ip, r2, #32
    b750:	fa01 f102 	lsl.w	r1, r1, r2
    b754:	fa20 fc0c 	lsr.w	ip, r0, ip
    b758:	bfdc      	itt	le
    b75a:	ea41 010c 	orrle.w	r1, r1, ip
    b75e:	4090      	lslle	r0, r2
    b760:	1ae4      	subs	r4, r4, r3
    b762:	bfa2      	ittt	ge
    b764:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    b768:	4329      	orrge	r1, r5
    b76a:	bd30      	popge	{r4, r5, pc}
    b76c:	ea6f 0404 	mvn.w	r4, r4
    b770:	3c1f      	subs	r4, #31
    b772:	da1c      	bge.n	b7ae <__adddf3+0x1d2>
    b774:	340c      	adds	r4, #12
    b776:	dc0e      	bgt.n	b796 <__adddf3+0x1ba>
    b778:	f104 0414 	add.w	r4, r4, #20
    b77c:	f1c4 0220 	rsb	r2, r4, #32
    b780:	fa20 f004 	lsr.w	r0, r0, r4
    b784:	fa01 f302 	lsl.w	r3, r1, r2
    b788:	ea40 0003 	orr.w	r0, r0, r3
    b78c:	fa21 f304 	lsr.w	r3, r1, r4
    b790:	ea45 0103 	orr.w	r1, r5, r3
    b794:	bd30      	pop	{r4, r5, pc}
    b796:	f1c4 040c 	rsb	r4, r4, #12
    b79a:	f1c4 0220 	rsb	r2, r4, #32
    b79e:	fa20 f002 	lsr.w	r0, r0, r2
    b7a2:	fa01 f304 	lsl.w	r3, r1, r4
    b7a6:	ea40 0003 	orr.w	r0, r0, r3
    b7aa:	4629      	mov	r1, r5
    b7ac:	bd30      	pop	{r4, r5, pc}
    b7ae:	fa21 f004 	lsr.w	r0, r1, r4
    b7b2:	4629      	mov	r1, r5
    b7b4:	bd30      	pop	{r4, r5, pc}
    b7b6:	f094 0f00 	teq	r4, #0
    b7ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    b7be:	bf06      	itte	eq
    b7c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    b7c4:	3401      	addeq	r4, #1
    b7c6:	3d01      	subne	r5, #1
    b7c8:	e74e      	b.n	b668 <__adddf3+0x8c>
    b7ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b7ce:	bf18      	it	ne
    b7d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b7d4:	d029      	beq.n	b82a <__adddf3+0x24e>
    b7d6:	ea94 0f05 	teq	r4, r5
    b7da:	bf08      	it	eq
    b7dc:	ea90 0f02 	teqeq	r0, r2
    b7e0:	d005      	beq.n	b7ee <__adddf3+0x212>
    b7e2:	ea54 0c00 	orrs.w	ip, r4, r0
    b7e6:	bf04      	itt	eq
    b7e8:	4619      	moveq	r1, r3
    b7ea:	4610      	moveq	r0, r2
    b7ec:	bd30      	pop	{r4, r5, pc}
    b7ee:	ea91 0f03 	teq	r1, r3
    b7f2:	bf1e      	ittt	ne
    b7f4:	2100      	movne	r1, #0
    b7f6:	2000      	movne	r0, #0
    b7f8:	bd30      	popne	{r4, r5, pc}
    b7fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    b7fe:	d105      	bne.n	b80c <__adddf3+0x230>
    b800:	0040      	lsls	r0, r0, #1
    b802:	4149      	adcs	r1, r1
    b804:	bf28      	it	cs
    b806:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b80a:	bd30      	pop	{r4, r5, pc}
    b80c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    b810:	bf3c      	itt	cc
    b812:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    b816:	bd30      	popcc	{r4, r5, pc}
    b818:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b81c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    b820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b824:	f04f 0000 	mov.w	r0, #0
    b828:	bd30      	pop	{r4, r5, pc}
    b82a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b82e:	bf1a      	itte	ne
    b830:	4619      	movne	r1, r3
    b832:	4610      	movne	r0, r2
    b834:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    b838:	bf1c      	itt	ne
    b83a:	460b      	movne	r3, r1
    b83c:	4602      	movne	r2, r0
    b83e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b842:	bf06      	itte	eq
    b844:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    b848:	ea91 0f03 	teqeq	r1, r3
    b84c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    b850:	bd30      	pop	{r4, r5, pc}
    b852:	bf00      	nop

0000b854 <__aeabi_ui2d>:
    b854:	f090 0f00 	teq	r0, #0
    b858:	bf04      	itt	eq
    b85a:	2100      	moveq	r1, #0
    b85c:	4770      	bxeq	lr
    b85e:	b530      	push	{r4, r5, lr}
    b860:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b864:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b868:	f04f 0500 	mov.w	r5, #0
    b86c:	f04f 0100 	mov.w	r1, #0
    b870:	e750      	b.n	b714 <__adddf3+0x138>
    b872:	bf00      	nop

0000b874 <__aeabi_i2d>:
    b874:	f090 0f00 	teq	r0, #0
    b878:	bf04      	itt	eq
    b87a:	2100      	moveq	r1, #0
    b87c:	4770      	bxeq	lr
    b87e:	b530      	push	{r4, r5, lr}
    b880:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b884:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b888:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    b88c:	bf48      	it	mi
    b88e:	4240      	negmi	r0, r0
    b890:	f04f 0100 	mov.w	r1, #0
    b894:	e73e      	b.n	b714 <__adddf3+0x138>
    b896:	bf00      	nop

0000b898 <__aeabi_f2d>:
    b898:	0042      	lsls	r2, r0, #1
    b89a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    b89e:	ea4f 0131 	mov.w	r1, r1, rrx
    b8a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
    b8a6:	bf1f      	itttt	ne
    b8a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    b8ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b8b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    b8b4:	4770      	bxne	lr
    b8b6:	f092 0f00 	teq	r2, #0
    b8ba:	bf14      	ite	ne
    b8bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b8c0:	4770      	bxeq	lr
    b8c2:	b530      	push	{r4, r5, lr}
    b8c4:	f44f 7460 	mov.w	r4, #896	; 0x380
    b8c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b8cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b8d0:	e720      	b.n	b714 <__adddf3+0x138>
    b8d2:	bf00      	nop

0000b8d4 <__aeabi_ul2d>:
    b8d4:	ea50 0201 	orrs.w	r2, r0, r1
    b8d8:	bf08      	it	eq
    b8da:	4770      	bxeq	lr
    b8dc:	b530      	push	{r4, r5, lr}
    b8de:	f04f 0500 	mov.w	r5, #0
    b8e2:	e00a      	b.n	b8fa <__aeabi_l2d+0x16>

0000b8e4 <__aeabi_l2d>:
    b8e4:	ea50 0201 	orrs.w	r2, r0, r1
    b8e8:	bf08      	it	eq
    b8ea:	4770      	bxeq	lr
    b8ec:	b530      	push	{r4, r5, lr}
    b8ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    b8f2:	d502      	bpl.n	b8fa <__aeabi_l2d+0x16>
    b8f4:	4240      	negs	r0, r0
    b8f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b8fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b8fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b902:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    b906:	f43f aedc 	beq.w	b6c2 <__adddf3+0xe6>
    b90a:	f04f 0203 	mov.w	r2, #3
    b90e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b912:	bf18      	it	ne
    b914:	3203      	addne	r2, #3
    b916:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b91a:	bf18      	it	ne
    b91c:	3203      	addne	r2, #3
    b91e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    b922:	f1c2 0320 	rsb	r3, r2, #32
    b926:	fa00 fc03 	lsl.w	ip, r0, r3
    b92a:	fa20 f002 	lsr.w	r0, r0, r2
    b92e:	fa01 fe03 	lsl.w	lr, r1, r3
    b932:	ea40 000e 	orr.w	r0, r0, lr
    b936:	fa21 f102 	lsr.w	r1, r1, r2
    b93a:	4414      	add	r4, r2
    b93c:	e6c1      	b.n	b6c2 <__adddf3+0xe6>
    b93e:	bf00      	nop

0000b940 <__aeabi_dmul>:
    b940:	b570      	push	{r4, r5, r6, lr}
    b942:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b946:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b94a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b94e:	bf1d      	ittte	ne
    b950:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b954:	ea94 0f0c 	teqne	r4, ip
    b958:	ea95 0f0c 	teqne	r5, ip
    b95c:	f000 f8de 	bleq	bb1c <__aeabi_dmul+0x1dc>
    b960:	442c      	add	r4, r5
    b962:	ea81 0603 	eor.w	r6, r1, r3
    b966:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    b96a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    b96e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    b972:	bf18      	it	ne
    b974:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    b978:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b97c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b980:	d038      	beq.n	b9f4 <__aeabi_dmul+0xb4>
    b982:	fba0 ce02 	umull	ip, lr, r0, r2
    b986:	f04f 0500 	mov.w	r5, #0
    b98a:	fbe1 e502 	umlal	lr, r5, r1, r2
    b98e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    b992:	fbe0 e503 	umlal	lr, r5, r0, r3
    b996:	f04f 0600 	mov.w	r6, #0
    b99a:	fbe1 5603 	umlal	r5, r6, r1, r3
    b99e:	f09c 0f00 	teq	ip, #0
    b9a2:	bf18      	it	ne
    b9a4:	f04e 0e01 	orrne.w	lr, lr, #1
    b9a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    b9ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    b9b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    b9b4:	d204      	bcs.n	b9c0 <__aeabi_dmul+0x80>
    b9b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    b9ba:	416d      	adcs	r5, r5
    b9bc:	eb46 0606 	adc.w	r6, r6, r6
    b9c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    b9c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    b9c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    b9cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    b9d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    b9d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b9d8:	bf88      	it	hi
    b9da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b9de:	d81e      	bhi.n	ba1e <__aeabi_dmul+0xde>
    b9e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    b9e4:	bf08      	it	eq
    b9e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    b9ea:	f150 0000 	adcs.w	r0, r0, #0
    b9ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b9f2:	bd70      	pop	{r4, r5, r6, pc}
    b9f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    b9f8:	ea46 0101 	orr.w	r1, r6, r1
    b9fc:	ea40 0002 	orr.w	r0, r0, r2
    ba00:	ea81 0103 	eor.w	r1, r1, r3
    ba04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    ba08:	bfc2      	ittt	gt
    ba0a:	ebd4 050c 	rsbsgt	r5, r4, ip
    ba0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    ba12:	bd70      	popgt	{r4, r5, r6, pc}
    ba14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    ba18:	f04f 0e00 	mov.w	lr, #0
    ba1c:	3c01      	subs	r4, #1
    ba1e:	f300 80ab 	bgt.w	bb78 <__aeabi_dmul+0x238>
    ba22:	f114 0f36 	cmn.w	r4, #54	; 0x36
    ba26:	bfde      	ittt	le
    ba28:	2000      	movle	r0, #0
    ba2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    ba2e:	bd70      	pople	{r4, r5, r6, pc}
    ba30:	f1c4 0400 	rsb	r4, r4, #0
    ba34:	3c20      	subs	r4, #32
    ba36:	da35      	bge.n	baa4 <__aeabi_dmul+0x164>
    ba38:	340c      	adds	r4, #12
    ba3a:	dc1b      	bgt.n	ba74 <__aeabi_dmul+0x134>
    ba3c:	f104 0414 	add.w	r4, r4, #20
    ba40:	f1c4 0520 	rsb	r5, r4, #32
    ba44:	fa00 f305 	lsl.w	r3, r0, r5
    ba48:	fa20 f004 	lsr.w	r0, r0, r4
    ba4c:	fa01 f205 	lsl.w	r2, r1, r5
    ba50:	ea40 0002 	orr.w	r0, r0, r2
    ba54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    ba58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    ba5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    ba60:	fa21 f604 	lsr.w	r6, r1, r4
    ba64:	eb42 0106 	adc.w	r1, r2, r6
    ba68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ba6c:	bf08      	it	eq
    ba6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    ba72:	bd70      	pop	{r4, r5, r6, pc}
    ba74:	f1c4 040c 	rsb	r4, r4, #12
    ba78:	f1c4 0520 	rsb	r5, r4, #32
    ba7c:	fa00 f304 	lsl.w	r3, r0, r4
    ba80:	fa20 f005 	lsr.w	r0, r0, r5
    ba84:	fa01 f204 	lsl.w	r2, r1, r4
    ba88:	ea40 0002 	orr.w	r0, r0, r2
    ba8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    ba90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    ba94:	f141 0100 	adc.w	r1, r1, #0
    ba98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    ba9c:	bf08      	it	eq
    ba9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    baa2:	bd70      	pop	{r4, r5, r6, pc}
    baa4:	f1c4 0520 	rsb	r5, r4, #32
    baa8:	fa00 f205 	lsl.w	r2, r0, r5
    baac:	ea4e 0e02 	orr.w	lr, lr, r2
    bab0:	fa20 f304 	lsr.w	r3, r0, r4
    bab4:	fa01 f205 	lsl.w	r2, r1, r5
    bab8:	ea43 0302 	orr.w	r3, r3, r2
    babc:	fa21 f004 	lsr.w	r0, r1, r4
    bac0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    bac4:	fa21 f204 	lsr.w	r2, r1, r4
    bac8:	ea20 0002 	bic.w	r0, r0, r2
    bacc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    bad0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    bad4:	bf08      	it	eq
    bad6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    bada:	bd70      	pop	{r4, r5, r6, pc}
    badc:	f094 0f00 	teq	r4, #0
    bae0:	d10f      	bne.n	bb02 <__aeabi_dmul+0x1c2>
    bae2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    bae6:	0040      	lsls	r0, r0, #1
    bae8:	eb41 0101 	adc.w	r1, r1, r1
    baec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    baf0:	bf08      	it	eq
    baf2:	3c01      	subeq	r4, #1
    baf4:	d0f7      	beq.n	bae6 <__aeabi_dmul+0x1a6>
    baf6:	ea41 0106 	orr.w	r1, r1, r6
    bafa:	f095 0f00 	teq	r5, #0
    bafe:	bf18      	it	ne
    bb00:	4770      	bxne	lr
    bb02:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    bb06:	0052      	lsls	r2, r2, #1
    bb08:	eb43 0303 	adc.w	r3, r3, r3
    bb0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    bb10:	bf08      	it	eq
    bb12:	3d01      	subeq	r5, #1
    bb14:	d0f7      	beq.n	bb06 <__aeabi_dmul+0x1c6>
    bb16:	ea43 0306 	orr.w	r3, r3, r6
    bb1a:	4770      	bx	lr
    bb1c:	ea94 0f0c 	teq	r4, ip
    bb20:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    bb24:	bf18      	it	ne
    bb26:	ea95 0f0c 	teqne	r5, ip
    bb2a:	d00c      	beq.n	bb46 <__aeabi_dmul+0x206>
    bb2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    bb30:	bf18      	it	ne
    bb32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    bb36:	d1d1      	bne.n	badc <__aeabi_dmul+0x19c>
    bb38:	ea81 0103 	eor.w	r1, r1, r3
    bb3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    bb40:	f04f 0000 	mov.w	r0, #0
    bb44:	bd70      	pop	{r4, r5, r6, pc}
    bb46:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    bb4a:	bf06      	itte	eq
    bb4c:	4610      	moveq	r0, r2
    bb4e:	4619      	moveq	r1, r3
    bb50:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    bb54:	d019      	beq.n	bb8a <__aeabi_dmul+0x24a>
    bb56:	ea94 0f0c 	teq	r4, ip
    bb5a:	d102      	bne.n	bb62 <__aeabi_dmul+0x222>
    bb5c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    bb60:	d113      	bne.n	bb8a <__aeabi_dmul+0x24a>
    bb62:	ea95 0f0c 	teq	r5, ip
    bb66:	d105      	bne.n	bb74 <__aeabi_dmul+0x234>
    bb68:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    bb6c:	bf1c      	itt	ne
    bb6e:	4610      	movne	r0, r2
    bb70:	4619      	movne	r1, r3
    bb72:	d10a      	bne.n	bb8a <__aeabi_dmul+0x24a>
    bb74:	ea81 0103 	eor.w	r1, r1, r3
    bb78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    bb7c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    bb80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    bb84:	f04f 0000 	mov.w	r0, #0
    bb88:	bd70      	pop	{r4, r5, r6, pc}
    bb8a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    bb8e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    bb92:	bd70      	pop	{r4, r5, r6, pc}

0000bb94 <__aeabi_ddiv>:
    bb94:	b570      	push	{r4, r5, r6, lr}
    bb96:	f04f 0cff 	mov.w	ip, #255	; 0xff
    bb9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    bb9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    bba2:	bf1d      	ittte	ne
    bba4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    bba8:	ea94 0f0c 	teqne	r4, ip
    bbac:	ea95 0f0c 	teqne	r5, ip
    bbb0:	f000 f8a7 	bleq	bd02 <__aeabi_ddiv+0x16e>
    bbb4:	eba4 0405 	sub.w	r4, r4, r5
    bbb8:	ea81 0e03 	eor.w	lr, r1, r3
    bbbc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    bbc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
    bbc4:	f000 8088 	beq.w	bcd8 <__aeabi_ddiv+0x144>
    bbc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
    bbcc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    bbd0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    bbd4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    bbd8:	ea4f 2202 	mov.w	r2, r2, lsl #8
    bbdc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    bbe0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    bbe4:	ea4f 2600 	mov.w	r6, r0, lsl #8
    bbe8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    bbec:	429d      	cmp	r5, r3
    bbee:	bf08      	it	eq
    bbf0:	4296      	cmpeq	r6, r2
    bbf2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    bbf6:	f504 7440 	add.w	r4, r4, #768	; 0x300
    bbfa:	d202      	bcs.n	bc02 <__aeabi_ddiv+0x6e>
    bbfc:	085b      	lsrs	r3, r3, #1
    bbfe:	ea4f 0232 	mov.w	r2, r2, rrx
    bc02:	1ab6      	subs	r6, r6, r2
    bc04:	eb65 0503 	sbc.w	r5, r5, r3
    bc08:	085b      	lsrs	r3, r3, #1
    bc0a:	ea4f 0232 	mov.w	r2, r2, rrx
    bc0e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    bc12:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    bc16:	ebb6 0e02 	subs.w	lr, r6, r2
    bc1a:	eb75 0e03 	sbcs.w	lr, r5, r3
    bc1e:	bf22      	ittt	cs
    bc20:	1ab6      	subcs	r6, r6, r2
    bc22:	4675      	movcs	r5, lr
    bc24:	ea40 000c 	orrcs.w	r0, r0, ip
    bc28:	085b      	lsrs	r3, r3, #1
    bc2a:	ea4f 0232 	mov.w	r2, r2, rrx
    bc2e:	ebb6 0e02 	subs.w	lr, r6, r2
    bc32:	eb75 0e03 	sbcs.w	lr, r5, r3
    bc36:	bf22      	ittt	cs
    bc38:	1ab6      	subcs	r6, r6, r2
    bc3a:	4675      	movcs	r5, lr
    bc3c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    bc40:	085b      	lsrs	r3, r3, #1
    bc42:	ea4f 0232 	mov.w	r2, r2, rrx
    bc46:	ebb6 0e02 	subs.w	lr, r6, r2
    bc4a:	eb75 0e03 	sbcs.w	lr, r5, r3
    bc4e:	bf22      	ittt	cs
    bc50:	1ab6      	subcs	r6, r6, r2
    bc52:	4675      	movcs	r5, lr
    bc54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    bc58:	085b      	lsrs	r3, r3, #1
    bc5a:	ea4f 0232 	mov.w	r2, r2, rrx
    bc5e:	ebb6 0e02 	subs.w	lr, r6, r2
    bc62:	eb75 0e03 	sbcs.w	lr, r5, r3
    bc66:	bf22      	ittt	cs
    bc68:	1ab6      	subcs	r6, r6, r2
    bc6a:	4675      	movcs	r5, lr
    bc6c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    bc70:	ea55 0e06 	orrs.w	lr, r5, r6
    bc74:	d018      	beq.n	bca8 <__aeabi_ddiv+0x114>
    bc76:	ea4f 1505 	mov.w	r5, r5, lsl #4
    bc7a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    bc7e:	ea4f 1606 	mov.w	r6, r6, lsl #4
    bc82:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    bc86:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    bc8a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    bc8e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    bc92:	d1c0      	bne.n	bc16 <__aeabi_ddiv+0x82>
    bc94:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    bc98:	d10b      	bne.n	bcb2 <__aeabi_ddiv+0x11e>
    bc9a:	ea41 0100 	orr.w	r1, r1, r0
    bc9e:	f04f 0000 	mov.w	r0, #0
    bca2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    bca6:	e7b6      	b.n	bc16 <__aeabi_ddiv+0x82>
    bca8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    bcac:	bf04      	itt	eq
    bcae:	4301      	orreq	r1, r0
    bcb0:	2000      	moveq	r0, #0
    bcb2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    bcb6:	bf88      	it	hi
    bcb8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    bcbc:	f63f aeaf 	bhi.w	ba1e <__aeabi_dmul+0xde>
    bcc0:	ebb5 0c03 	subs.w	ip, r5, r3
    bcc4:	bf04      	itt	eq
    bcc6:	ebb6 0c02 	subseq.w	ip, r6, r2
    bcca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    bcce:	f150 0000 	adcs.w	r0, r0, #0
    bcd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    bcd6:	bd70      	pop	{r4, r5, r6, pc}
    bcd8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    bcdc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    bce0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    bce4:	bfc2      	ittt	gt
    bce6:	ebd4 050c 	rsbsgt	r5, r4, ip
    bcea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    bcee:	bd70      	popgt	{r4, r5, r6, pc}
    bcf0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    bcf4:	f04f 0e00 	mov.w	lr, #0
    bcf8:	3c01      	subs	r4, #1
    bcfa:	e690      	b.n	ba1e <__aeabi_dmul+0xde>
    bcfc:	ea45 0e06 	orr.w	lr, r5, r6
    bd00:	e68d      	b.n	ba1e <__aeabi_dmul+0xde>
    bd02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    bd06:	ea94 0f0c 	teq	r4, ip
    bd0a:	bf08      	it	eq
    bd0c:	ea95 0f0c 	teqeq	r5, ip
    bd10:	f43f af3b 	beq.w	bb8a <__aeabi_dmul+0x24a>
    bd14:	ea94 0f0c 	teq	r4, ip
    bd18:	d10a      	bne.n	bd30 <__aeabi_ddiv+0x19c>
    bd1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    bd1e:	f47f af34 	bne.w	bb8a <__aeabi_dmul+0x24a>
    bd22:	ea95 0f0c 	teq	r5, ip
    bd26:	f47f af25 	bne.w	bb74 <__aeabi_dmul+0x234>
    bd2a:	4610      	mov	r0, r2
    bd2c:	4619      	mov	r1, r3
    bd2e:	e72c      	b.n	bb8a <__aeabi_dmul+0x24a>
    bd30:	ea95 0f0c 	teq	r5, ip
    bd34:	d106      	bne.n	bd44 <__aeabi_ddiv+0x1b0>
    bd36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    bd3a:	f43f aefd 	beq.w	bb38 <__aeabi_dmul+0x1f8>
    bd3e:	4610      	mov	r0, r2
    bd40:	4619      	mov	r1, r3
    bd42:	e722      	b.n	bb8a <__aeabi_dmul+0x24a>
    bd44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    bd48:	bf18      	it	ne
    bd4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    bd4e:	f47f aec5 	bne.w	badc <__aeabi_dmul+0x19c>
    bd52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    bd56:	f47f af0d 	bne.w	bb74 <__aeabi_dmul+0x234>
    bd5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    bd5e:	f47f aeeb 	bne.w	bb38 <__aeabi_dmul+0x1f8>
    bd62:	e712      	b.n	bb8a <__aeabi_dmul+0x24a>

0000bd64 <__aeabi_d2uiz>:
    bd64:	004a      	lsls	r2, r1, #1
    bd66:	d211      	bcs.n	bd8c <__aeabi_d2uiz+0x28>
    bd68:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    bd6c:	d211      	bcs.n	bd92 <__aeabi_d2uiz+0x2e>
    bd6e:	d50d      	bpl.n	bd8c <__aeabi_d2uiz+0x28>
    bd70:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    bd74:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    bd78:	d40e      	bmi.n	bd98 <__aeabi_d2uiz+0x34>
    bd7a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    bd7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    bd82:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    bd86:	fa23 f002 	lsr.w	r0, r3, r2
    bd8a:	4770      	bx	lr
    bd8c:	f04f 0000 	mov.w	r0, #0
    bd90:	4770      	bx	lr
    bd92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    bd96:	d102      	bne.n	bd9e <__aeabi_d2uiz+0x3a>
    bd98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    bd9c:	4770      	bx	lr
    bd9e:	f04f 0000 	mov.w	r0, #0
    bda2:	4770      	bx	lr

0000bda4 <memcmp>:
    bda4:	2a03      	cmp	r2, #3
    bda6:	b470      	push	{r4, r5, r6}
    bda8:	d926      	bls.n	bdf8 <memcmp+0x54>
    bdaa:	ea40 0301 	orr.w	r3, r0, r1
    bdae:	079b      	lsls	r3, r3, #30
    bdb0:	d011      	beq.n	bdd6 <memcmp+0x32>
    bdb2:	7804      	ldrb	r4, [r0, #0]
    bdb4:	780d      	ldrb	r5, [r1, #0]
    bdb6:	42ac      	cmp	r4, r5
    bdb8:	d122      	bne.n	be00 <memcmp+0x5c>
    bdba:	4402      	add	r2, r0
    bdbc:	1c43      	adds	r3, r0, #1
    bdbe:	e005      	b.n	bdcc <memcmp+0x28>
    bdc0:	f813 4b01 	ldrb.w	r4, [r3], #1
    bdc4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    bdc8:	42ac      	cmp	r4, r5
    bdca:	d119      	bne.n	be00 <memcmp+0x5c>
    bdcc:	4293      	cmp	r3, r2
    bdce:	d1f7      	bne.n	bdc0 <memcmp+0x1c>
    bdd0:	2000      	movs	r0, #0
    bdd2:	bc70      	pop	{r4, r5, r6}
    bdd4:	4770      	bx	lr
    bdd6:	460c      	mov	r4, r1
    bdd8:	4603      	mov	r3, r0
    bdda:	681e      	ldr	r6, [r3, #0]
    bddc:	6825      	ldr	r5, [r4, #0]
    bdde:	4618      	mov	r0, r3
    bde0:	42ae      	cmp	r6, r5
    bde2:	4621      	mov	r1, r4
    bde4:	f103 0304 	add.w	r3, r3, #4
    bde8:	f104 0404 	add.w	r4, r4, #4
    bdec:	d104      	bne.n	bdf8 <memcmp+0x54>
    bdee:	3a04      	subs	r2, #4
    bdf0:	2a03      	cmp	r2, #3
    bdf2:	4618      	mov	r0, r3
    bdf4:	4621      	mov	r1, r4
    bdf6:	d8f0      	bhi.n	bdda <memcmp+0x36>
    bdf8:	2a00      	cmp	r2, #0
    bdfa:	d1da      	bne.n	bdb2 <memcmp+0xe>
    bdfc:	4610      	mov	r0, r2
    bdfe:	e7e8      	b.n	bdd2 <memcmp+0x2e>
    be00:	1b60      	subs	r0, r4, r5
    be02:	bc70      	pop	{r4, r5, r6}
    be04:	4770      	bx	lr
    be06:	bf00      	nop

0000be08 <memcpy>:
    be08:	4684      	mov	ip, r0
    be0a:	ea41 0300 	orr.w	r3, r1, r0
    be0e:	f013 0303 	ands.w	r3, r3, #3
    be12:	d149      	bne.n	bea8 <memcpy+0xa0>
    be14:	3a40      	subs	r2, #64	; 0x40
    be16:	d323      	bcc.n	be60 <memcpy+0x58>
    be18:	680b      	ldr	r3, [r1, #0]
    be1a:	6003      	str	r3, [r0, #0]
    be1c:	684b      	ldr	r3, [r1, #4]
    be1e:	6043      	str	r3, [r0, #4]
    be20:	688b      	ldr	r3, [r1, #8]
    be22:	6083      	str	r3, [r0, #8]
    be24:	68cb      	ldr	r3, [r1, #12]
    be26:	60c3      	str	r3, [r0, #12]
    be28:	690b      	ldr	r3, [r1, #16]
    be2a:	6103      	str	r3, [r0, #16]
    be2c:	694b      	ldr	r3, [r1, #20]
    be2e:	6143      	str	r3, [r0, #20]
    be30:	698b      	ldr	r3, [r1, #24]
    be32:	6183      	str	r3, [r0, #24]
    be34:	69cb      	ldr	r3, [r1, #28]
    be36:	61c3      	str	r3, [r0, #28]
    be38:	6a0b      	ldr	r3, [r1, #32]
    be3a:	6203      	str	r3, [r0, #32]
    be3c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    be3e:	6243      	str	r3, [r0, #36]	; 0x24
    be40:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    be42:	6283      	str	r3, [r0, #40]	; 0x28
    be44:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    be46:	62c3      	str	r3, [r0, #44]	; 0x2c
    be48:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    be4a:	6303      	str	r3, [r0, #48]	; 0x30
    be4c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    be4e:	6343      	str	r3, [r0, #52]	; 0x34
    be50:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    be52:	6383      	str	r3, [r0, #56]	; 0x38
    be54:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    be56:	63c3      	str	r3, [r0, #60]	; 0x3c
    be58:	3040      	adds	r0, #64	; 0x40
    be5a:	3140      	adds	r1, #64	; 0x40
    be5c:	3a40      	subs	r2, #64	; 0x40
    be5e:	d2db      	bcs.n	be18 <memcpy+0x10>
    be60:	3230      	adds	r2, #48	; 0x30
    be62:	d30b      	bcc.n	be7c <memcpy+0x74>
    be64:	680b      	ldr	r3, [r1, #0]
    be66:	6003      	str	r3, [r0, #0]
    be68:	684b      	ldr	r3, [r1, #4]
    be6a:	6043      	str	r3, [r0, #4]
    be6c:	688b      	ldr	r3, [r1, #8]
    be6e:	6083      	str	r3, [r0, #8]
    be70:	68cb      	ldr	r3, [r1, #12]
    be72:	60c3      	str	r3, [r0, #12]
    be74:	3010      	adds	r0, #16
    be76:	3110      	adds	r1, #16
    be78:	3a10      	subs	r2, #16
    be7a:	d2f3      	bcs.n	be64 <memcpy+0x5c>
    be7c:	320c      	adds	r2, #12
    be7e:	d305      	bcc.n	be8c <memcpy+0x84>
    be80:	f851 3b04 	ldr.w	r3, [r1], #4
    be84:	f840 3b04 	str.w	r3, [r0], #4
    be88:	3a04      	subs	r2, #4
    be8a:	d2f9      	bcs.n	be80 <memcpy+0x78>
    be8c:	3204      	adds	r2, #4
    be8e:	d008      	beq.n	bea2 <memcpy+0x9a>
    be90:	07d2      	lsls	r2, r2, #31
    be92:	bf1c      	itt	ne
    be94:	f811 3b01 	ldrbne.w	r3, [r1], #1
    be98:	f800 3b01 	strbne.w	r3, [r0], #1
    be9c:	d301      	bcc.n	bea2 <memcpy+0x9a>
    be9e:	880b      	ldrh	r3, [r1, #0]
    bea0:	8003      	strh	r3, [r0, #0]
    bea2:	4660      	mov	r0, ip
    bea4:	4770      	bx	lr
    bea6:	bf00      	nop
    bea8:	2a08      	cmp	r2, #8
    beaa:	d313      	bcc.n	bed4 <memcpy+0xcc>
    beac:	078b      	lsls	r3, r1, #30
    beae:	d0b1      	beq.n	be14 <memcpy+0xc>
    beb0:	f010 0303 	ands.w	r3, r0, #3
    beb4:	d0ae      	beq.n	be14 <memcpy+0xc>
    beb6:	f1c3 0304 	rsb	r3, r3, #4
    beba:	1ad2      	subs	r2, r2, r3
    bebc:	07db      	lsls	r3, r3, #31
    bebe:	bf1c      	itt	ne
    bec0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    bec4:	f800 3b01 	strbne.w	r3, [r0], #1
    bec8:	d3a4      	bcc.n	be14 <memcpy+0xc>
    beca:	f831 3b02 	ldrh.w	r3, [r1], #2
    bece:	f820 3b02 	strh.w	r3, [r0], #2
    bed2:	e79f      	b.n	be14 <memcpy+0xc>
    bed4:	3a04      	subs	r2, #4
    bed6:	d3d9      	bcc.n	be8c <memcpy+0x84>
    bed8:	3a01      	subs	r2, #1
    beda:	f811 3b01 	ldrb.w	r3, [r1], #1
    bede:	f800 3b01 	strb.w	r3, [r0], #1
    bee2:	d2f9      	bcs.n	bed8 <memcpy+0xd0>
    bee4:	780b      	ldrb	r3, [r1, #0]
    bee6:	7003      	strb	r3, [r0, #0]
    bee8:	784b      	ldrb	r3, [r1, #1]
    beea:	7043      	strb	r3, [r0, #1]
    beec:	788b      	ldrb	r3, [r1, #2]
    beee:	7083      	strb	r3, [r0, #2]
    bef0:	4660      	mov	r0, ip
    bef2:	4770      	bx	lr

0000bef4 <strlen>:
    bef4:	f020 0103 	bic.w	r1, r0, #3
    bef8:	f010 0003 	ands.w	r0, r0, #3
    befc:	f1c0 0000 	rsb	r0, r0, #0
    bf00:	f851 3b04 	ldr.w	r3, [r1], #4
    bf04:	f100 0c04 	add.w	ip, r0, #4
    bf08:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    bf0c:	f06f 0200 	mvn.w	r2, #0
    bf10:	bf1c      	itt	ne
    bf12:	fa22 f20c 	lsrne.w	r2, r2, ip
    bf16:	4313      	orrne	r3, r2
    bf18:	f04f 0c01 	mov.w	ip, #1
    bf1c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    bf20:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    bf24:	eba3 020c 	sub.w	r2, r3, ip
    bf28:	ea22 0203 	bic.w	r2, r2, r3
    bf2c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    bf30:	bf04      	itt	eq
    bf32:	f851 3b04 	ldreq.w	r3, [r1], #4
    bf36:	3004      	addeq	r0, #4
    bf38:	d0f4      	beq.n	bf24 <strlen+0x30>
    bf3a:	f1c2 0100 	rsb	r1, r2, #0
    bf3e:	ea02 0201 	and.w	r2, r2, r1
    bf42:	fab2 f282 	clz	r2, r2
    bf46:	f1c2 021f 	rsb	r2, r2, #31
    bf4a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    bf4e:	4770      	bx	lr
    bf50:	00000043 	.word	0x00000043

0000bf54 <_global_impure_ptr>:
    bf54:	10000020                                 ...

0000bf58 <advertising_channels>:
    bf58:	00270c00                                ..'.

0000bf5c <data_channels>:
    bf5c:	04030201 08070605 0d0b0a09 11100f0e     ................
    bf6c:	15141312 19181716 1d1c1b1a 21201f1e     .............. !
    bf7c:	25242322 00000026                       "#$%&...

0000bf84 <payload>:
    bf84:	aaaaaaca aaaaaaaa aaaaaaaa aaaaaaaa     ................
    bf94:	aaaaaaaa                                ....

0000bf98 <whitening>:
    bf98:	01010101 01000100 00000100 00010000     ................
    bfa8:	01000101 00010101 01010100 00010000     ................
    bfb8:	01010001 01010000 00000000 00010100     ................
    bfc8:	01000101 01010100 00000100 00010100     ................
    bfd8:	00000100 00000100 00000000 01000001     ................
    bfe8:	01010000 00000100 01010101 01010100     ................
    bff8:	00000000 01010101 00010101 01010000     ................
    c008:	01010001 01000000 00000100 00010001     ................

0000c018 <whitening_index>:
    c018:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    c028:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    c038:	5a541b28 662f703f                       (.TZ?p/f

0000c040 <hop_interval_lut>:
    c040:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    c050:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    c060:	120c0916 00000024                       ....$...

0000c068 <whitening_word>:
    c068:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    c078:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    c088:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    c098:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    c0a8:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    c0b8:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    c0c8:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    c0d8:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    c0e8:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    c0f8:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    c108:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    c118:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    c128:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    c138:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    c148:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    c158:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    c168:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    c178:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    c188:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    c198:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    c1a8:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    c1b8:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    c1c8:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    c1d8:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    c1e8:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    c1f8:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    c208:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    c218:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    c228:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    c238:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    c248:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    c258:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    c268:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    c278:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    c288:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    c298:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    c2a8:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    c2b8:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    c2c8:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    c2d8:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    c2e8:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    c2f8:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    c308:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    c318:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    c328:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    c338:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    c348:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    c358:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    c368:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    c378:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    c388:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    c398:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    c3a8:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    c3b8:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    c3c8:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    c3d8:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    c3e8:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    c3f8:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    c408:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    c418:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    c428:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    c438:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    c448:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    c458:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    c468:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    c478:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    c488:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    c498:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    c4a8:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    c4b8:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    c4c8:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    c4d8:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    c4e8:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    c4f8:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    c508:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    c518:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    c528:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    c538:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    c548:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    c558:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    c568:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    c578:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    c588:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    c598:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    c5a8:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    c5b8:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    c5c8:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    c5d8:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    c5e8:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    c5f8:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    c608:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    c618:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    c628:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    c638:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    c648:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    c658:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    c668:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    c678:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    c688:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    c698:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    c6a8:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    c6b8:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    c6c8:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    c6d8:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    c6e8:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    c6f8:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    c708:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    c718:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    c728:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    c738:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    c748:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    c758:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    c768:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    c778:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    c788:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    c798:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    c7a8:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    c7b8:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    c7c8:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    c7d8:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

0000c7e8 <compile_info>:
    c7e8:	72656275 746f6f74 30322068 312d3531     ubertooth 2015-1
    c7f8:	31522d30 6f722820 7740746f 69706965     0-R1 (root@weipi
    c808:	2029676e 206e6f4d 20766f4e 30203720     ng) Mon Nov  7 0
    c818:	32353a31 2038343a 2054534b 36313032     1:52:48 KST 2016
    c828:	00000000 35313032 2d30312d 00003152     ....2015-10-R1..
    c838:	00000001 00000001 00000001 00000001     ................
    c848:	ffff0900 ffffffff ff050102 0000ffff     ................
    c858:	0985096c 0000099e 03010200 03000100     l...............
    c868:	01020001 00000100 04020301 04020304     ................
    c878:	03040304 00000203                       ........

0000c880 <abDescriptors>:
    c880:	02000112 400000ff 60021d50 02010101     .......@P..`....
    c890:	02090103 01010020 096e8000 02000004     .... .....n.....
    c8a0:	000000ff 02820507 07000040 40020505     ........@......@
    c8b0:	03040000 035c0409 00740068 00700074     ......\.h.t.t.p.
    c8c0:	002f003a 0067002f 00740069 00750068     :././.g.i.t.h.u.
    c8d0:	002e0062 006f0063 002f006d 00720067     b...c.o.m./.g.r.
    c8e0:	00610065 00730074 006f0063 00740074     e.a.t.s.c.o.t.t.
    c8f0:	00610067 00670064 00740065 002f0073     g.a.d.g.e.t.s./.
    c900:	00620075 00720065 006f0074 0074006f     u.b.e.r.t.o.o.t.
    c910:	031e0068 006c0062 00650075 006f0074     h...b.l.u.e.t.o.
    c920:	0074006f 005f0068 00780072 00780074     o.t.h._.r.x.t.x.
    c930:	00300312 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
    c940:	00000031 6361387b 38613734 63632d38     1...{8ac47a88-cc
    c950:	342d3632 2d396161 62373838 6332342d     26-4aa9-887b-42c
    c960:	66633861 36613730 00007d33 000098c1     a8cf07a63}......
    c970:	000098f5 0000990d 000099f5 000098ad     ................
    c980:	000098ad 000098ad 00009a59 000098f5     ........Y.......
    c990:	00009a71 000098ad 000098ad 000098ad     q...............
    c9a0:	000098c1 000098f5 00009b45 00009d05     ........E.......
    c9b0:	00009bc5 00009c89                       ........

0000c9b8 <abExtendedOsFeatureDescriptor>:
    c9b8:	00000028 00040100 00000001 00000000     (...............
    c9c8:	49570100 4253554e 00000000 00000000     ..WINUSB........
    c9d8:	00000000 00000000                       ........

0000c9e0 <_init>:
    c9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9e2:	bf00      	nop
    c9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c9e6:	bc08      	pop	{r3}
    c9e8:	469e      	mov	lr, r3
    c9ea:	4770      	bx	lr

0000c9ec <__init_array_start>:
    c9ec:	00004215 	.word	0x00004215

0000c9f0 <__frame_dummy_init_array_entry>:
    c9f0:	000040f1                                .@..

0000c9f4 <_fini>:
    c9f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9f6:	bf00      	nop
    c9f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c9fa:	bc08      	pop	{r3}
    c9fc:	469e      	mov	lr, r3
    c9fe:	4770      	bx	lr

0000ca00 <__fini_array_start>:
    ca00:	000040cd 	.word	0x000040cd

0000ca04 <__fini_array_end>:
    ca04:	00000000 	.word	0x00000000
