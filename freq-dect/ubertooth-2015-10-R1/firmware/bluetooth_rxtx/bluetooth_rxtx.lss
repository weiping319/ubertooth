
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009ca8  00004000  00004000  00004000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         0000093e  10000020  0000dca8  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002938  10000960  0000e5e6  00010960  2**3
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0001095e  2**0
                  CONTENTS, READONLY
  5 .comment      00000070  00000000  00000000  00010987  2**0
                  CONTENTS, READONLY
  6 .debug_frame  00001ee4  00000000  00000000  000109f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000589e  00000000  00000000  000128dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000152a  00000000  00000000  0001817a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000738  00000000  00000000  000196a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000658  00000000  00000000  00019ddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002e10  00000000  00000000  0001a434  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002414  00000000  00000000  0001d244  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 b9 b0 00 00 25 b1 00 00 25 b1 00 00     .?......%...%...
    4010:	25 b1 00 00 25 b1 00 00 25 b1 00 00 00 00 00 00     %...%...%.......
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 25 b1 00 00     ............%...
    4030:	25 b1 00 00 00 00 00 00 25 b1 00 00 25 b1 00 00     %.......%...%...
    4040:	25 b1 00 00 25 56 00 00 25 b1 00 00 25 b1 00 00     %...%V..%...%...
    4050:	25 b1 00 00 25 b1 00 00 25 b1 00 00 25 b1 00 00     %...%...%...%...
    4060:	25 b1 00 00 25 b1 00 00 25 b1 00 00 25 b1 00 00     %...%...%...%...
    4070:	25 b1 00 00 25 b1 00 00 25 b1 00 00 25 b1 00 00     %...%...%...%...
    4080:	25 b1 00 00 25 b1 00 00 25 b1 00 00 25 b1 00 00     %...%...%...%...
    4090:	25 b1 00 00 41 57 00 00 25 b1 00 00 25 b1 00 00     %...AW..%...%...
    40a0:	ad b0 00 00 25 b1 00 00 09 5c 00 00 25 b1 00 00     ....%....\..%...
    40b0:	25 b1 00 00 25 b1 00 00 25 b1 00 00 25 b1 00 00     %...%...%...%...
    40c0:	25 b1 00 00 25 b1 00 00 25 b1 00 00                 %...%...%...

000040cc <__do_global_dtors_aux>:
    40cc:	b510      	push	{r4, lr}
    40ce:	4c05      	ldr	r4, [pc, #20]	; (40e4 <__do_global_dtors_aux+0x18>)
    40d0:	7823      	ldrb	r3, [r4, #0]
    40d2:	b933      	cbnz	r3, 40e2 <__do_global_dtors_aux+0x16>
    40d4:	4b04      	ldr	r3, [pc, #16]	; (40e8 <__do_global_dtors_aux+0x1c>)
    40d6:	b113      	cbz	r3, 40de <__do_global_dtors_aux+0x12>
    40d8:	4804      	ldr	r0, [pc, #16]	; (40ec <__do_global_dtors_aux+0x20>)
    40da:	f3af 8000 	nop.w
    40de:	2301      	movs	r3, #1
    40e0:	7023      	strb	r3, [r4, #0]
    40e2:	bd10      	pop	{r4, pc}
    40e4:	10000960 	.word	0x10000960
    40e8:	00000000 	.word	0x00000000
    40ec:	0000dc80 	.word	0x0000dc80

000040f0 <frame_dummy>:
    40f0:	4b08      	ldr	r3, [pc, #32]	; (4114 <frame_dummy+0x24>)
    40f2:	b510      	push	{r4, lr}
    40f4:	b11b      	cbz	r3, 40fe <frame_dummy+0xe>
    40f6:	4808      	ldr	r0, [pc, #32]	; (4118 <frame_dummy+0x28>)
    40f8:	4908      	ldr	r1, [pc, #32]	; (411c <frame_dummy+0x2c>)
    40fa:	f3af 8000 	nop.w
    40fe:	4808      	ldr	r0, [pc, #32]	; (4120 <frame_dummy+0x30>)
    4100:	6803      	ldr	r3, [r0, #0]
    4102:	b903      	cbnz	r3, 4106 <frame_dummy+0x16>
    4104:	bd10      	pop	{r4, pc}
    4106:	4b07      	ldr	r3, [pc, #28]	; (4124 <frame_dummy+0x34>)
    4108:	2b00      	cmp	r3, #0
    410a:	d0fb      	beq.n	4104 <frame_dummy+0x14>
    410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4110:	4718      	bx	r3
    4112:	bf00      	nop
    4114:	00000000 	.word	0x00000000
    4118:	0000dc80 	.word	0x0000dc80
    411c:	10000964 	.word	0x10000964
    4120:	10000960 	.word	0x10000960
    4124:	00000000 	.word	0x00000000

00004128 <__libc_init_array>:
    4128:	b570      	push	{r4, r5, r6, lr}
    412a:	4e0f      	ldr	r6, [pc, #60]	; (4168 <__libc_init_array+0x40>)
    412c:	4d0f      	ldr	r5, [pc, #60]	; (416c <__libc_init_array+0x44>)
    412e:	1b76      	subs	r6, r6, r5
    4130:	10b6      	asrs	r6, r6, #2
    4132:	bf18      	it	ne
    4134:	2400      	movne	r4, #0
    4136:	d005      	beq.n	4144 <__libc_init_array+0x1c>
    4138:	3401      	adds	r4, #1
    413a:	f855 3b04 	ldr.w	r3, [r5], #4
    413e:	4798      	blx	r3
    4140:	42a6      	cmp	r6, r4
    4142:	d1f9      	bne.n	4138 <__libc_init_array+0x10>
    4144:	4e0a      	ldr	r6, [pc, #40]	; (4170 <__libc_init_array+0x48>)
    4146:	4d0b      	ldr	r5, [pc, #44]	; (4174 <__libc_init_array+0x4c>)
    4148:	f009 fd9a 	bl	dc80 <_init>
    414c:	1b76      	subs	r6, r6, r5
    414e:	10b6      	asrs	r6, r6, #2
    4150:	bf18      	it	ne
    4152:	2400      	movne	r4, #0
    4154:	d006      	beq.n	4164 <__libc_init_array+0x3c>
    4156:	3401      	adds	r4, #1
    4158:	f855 3b04 	ldr.w	r3, [r5], #4
    415c:	4798      	blx	r3
    415e:	42a6      	cmp	r6, r4
    4160:	d1f9      	bne.n	4156 <__libc_init_array+0x2e>
    4162:	bd70      	pop	{r4, r5, r6, pc}
    4164:	bd70      	pop	{r4, r5, r6, pc}
    4166:	bf00      	nop
    4168:	0000dc8c 	.word	0x0000dc8c
    416c:	0000dc8c 	.word	0x0000dc8c
    4170:	0000dc94 	.word	0x0000dc94
    4174:	0000dc8c 	.word	0x0000dc8c

00004178 <memset>:
    4178:	b470      	push	{r4, r5, r6}
    417a:	0784      	lsls	r4, r0, #30
    417c:	d046      	beq.n	420c <memset+0x94>
    417e:	1e54      	subs	r4, r2, #1
    4180:	2a00      	cmp	r2, #0
    4182:	d041      	beq.n	4208 <memset+0x90>
    4184:	b2cd      	uxtb	r5, r1
    4186:	4603      	mov	r3, r0
    4188:	e002      	b.n	4190 <memset+0x18>
    418a:	1e62      	subs	r2, r4, #1
    418c:	b3e4      	cbz	r4, 4208 <memset+0x90>
    418e:	4614      	mov	r4, r2
    4190:	f803 5b01 	strb.w	r5, [r3], #1
    4194:	079a      	lsls	r2, r3, #30
    4196:	d1f8      	bne.n	418a <memset+0x12>
    4198:	2c03      	cmp	r4, #3
    419a:	d92e      	bls.n	41fa <memset+0x82>
    419c:	b2cd      	uxtb	r5, r1
    419e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    41a2:	2c0f      	cmp	r4, #15
    41a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    41a8:	d919      	bls.n	41de <memset+0x66>
    41aa:	4626      	mov	r6, r4
    41ac:	f103 0210 	add.w	r2, r3, #16
    41b0:	3e10      	subs	r6, #16
    41b2:	2e0f      	cmp	r6, #15
    41b4:	f842 5c10 	str.w	r5, [r2, #-16]
    41b8:	f842 5c0c 	str.w	r5, [r2, #-12]
    41bc:	f842 5c08 	str.w	r5, [r2, #-8]
    41c0:	f842 5c04 	str.w	r5, [r2, #-4]
    41c4:	f102 0210 	add.w	r2, r2, #16
    41c8:	d8f2      	bhi.n	41b0 <memset+0x38>
    41ca:	f1a4 0210 	sub.w	r2, r4, #16
    41ce:	f022 020f 	bic.w	r2, r2, #15
    41d2:	f004 040f 	and.w	r4, r4, #15
    41d6:	3210      	adds	r2, #16
    41d8:	2c03      	cmp	r4, #3
    41da:	4413      	add	r3, r2
    41dc:	d90d      	bls.n	41fa <memset+0x82>
    41de:	461e      	mov	r6, r3
    41e0:	4622      	mov	r2, r4
    41e2:	3a04      	subs	r2, #4
    41e4:	2a03      	cmp	r2, #3
    41e6:	f846 5b04 	str.w	r5, [r6], #4
    41ea:	d8fa      	bhi.n	41e2 <memset+0x6a>
    41ec:	1f22      	subs	r2, r4, #4
    41ee:	f022 0203 	bic.w	r2, r2, #3
    41f2:	3204      	adds	r2, #4
    41f4:	4413      	add	r3, r2
    41f6:	f004 0403 	and.w	r4, r4, #3
    41fa:	b12c      	cbz	r4, 4208 <memset+0x90>
    41fc:	b2c9      	uxtb	r1, r1
    41fe:	441c      	add	r4, r3
    4200:	f803 1b01 	strb.w	r1, [r3], #1
    4204:	42a3      	cmp	r3, r4
    4206:	d1fb      	bne.n	4200 <memset+0x88>
    4208:	bc70      	pop	{r4, r5, r6}
    420a:	4770      	bx	lr
    420c:	4614      	mov	r4, r2
    420e:	4603      	mov	r3, r0
    4210:	e7c2      	b.n	4198 <memset+0x20>
    4212:	bf00      	nop

00004214 <register_fini>:
    4214:	4b02      	ldr	r3, [pc, #8]	; (4220 <register_fini+0xc>)
    4216:	b113      	cbz	r3, 421e <register_fini+0xa>
    4218:	4802      	ldr	r0, [pc, #8]	; (4224 <register_fini+0x10>)
    421a:	f000 b805 	b.w	4228 <atexit>
    421e:	4770      	bx	lr
    4220:	00000000 	.word	0x00000000
    4224:	00004235 	.word	0x00004235

00004228 <atexit>:
    4228:	4601      	mov	r1, r0
    422a:	2000      	movs	r0, #0
    422c:	4602      	mov	r2, r0
    422e:	4603      	mov	r3, r0
    4230:	f000 b816 	b.w	4260 <__register_exitproc>

00004234 <__libc_fini_array>:
    4234:	b538      	push	{r3, r4, r5, lr}
    4236:	4b08      	ldr	r3, [pc, #32]	; (4258 <__libc_fini_array+0x24>)
    4238:	4d08      	ldr	r5, [pc, #32]	; (425c <__libc_fini_array+0x28>)
    423a:	1aed      	subs	r5, r5, r3
    423c:	10ac      	asrs	r4, r5, #2
    423e:	bf18      	it	ne
    4240:	18ed      	addne	r5, r5, r3
    4242:	d005      	beq.n	4250 <__libc_fini_array+0x1c>
    4244:	3c01      	subs	r4, #1
    4246:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    424a:	4798      	blx	r3
    424c:	2c00      	cmp	r4, #0
    424e:	d1f9      	bne.n	4244 <__libc_fini_array+0x10>
    4250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4254:	f009 bd1e 	b.w	dc94 <_fini>
    4258:	0000dca0 	.word	0x0000dca0
    425c:	0000dca4 	.word	0x0000dca4

00004260 <__register_exitproc>:
    4260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4264:	4c25      	ldr	r4, [pc, #148]	; (42fc <__register_exitproc+0x9c>)
    4266:	4606      	mov	r6, r0
    4268:	6825      	ldr	r5, [r4, #0]
    426a:	4688      	mov	r8, r1
    426c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    4270:	4692      	mov	sl, r2
    4272:	4699      	mov	r9, r3
    4274:	b3c4      	cbz	r4, 42e8 <__register_exitproc+0x88>
    4276:	6860      	ldr	r0, [r4, #4]
    4278:	281f      	cmp	r0, #31
    427a:	dc17      	bgt.n	42ac <__register_exitproc+0x4c>
    427c:	1c41      	adds	r1, r0, #1
    427e:	b176      	cbz	r6, 429e <__register_exitproc+0x3e>
    4280:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    4284:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    4288:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
    428c:	2201      	movs	r2, #1
    428e:	4082      	lsls	r2, r0
    4290:	4315      	orrs	r5, r2
    4292:	2e02      	cmp	r6, #2
    4294:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    4298:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
    429c:	d01e      	beq.n	42dc <__register_exitproc+0x7c>
    429e:	1c83      	adds	r3, r0, #2
    42a0:	6061      	str	r1, [r4, #4]
    42a2:	2000      	movs	r0, #0
    42a4:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
    42a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42ac:	4b14      	ldr	r3, [pc, #80]	; (4300 <__register_exitproc+0xa0>)
    42ae:	b303      	cbz	r3, 42f2 <__register_exitproc+0x92>
    42b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42b4:	f3af 8000 	nop.w
    42b8:	4604      	mov	r4, r0
    42ba:	b1d0      	cbz	r0, 42f2 <__register_exitproc+0x92>
    42bc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    42c0:	2700      	movs	r7, #0
    42c2:	e884 0088 	stmia.w	r4, {r3, r7}
    42c6:	4638      	mov	r0, r7
    42c8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42cc:	2101      	movs	r1, #1
    42ce:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    42d2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    42d6:	2e00      	cmp	r6, #0
    42d8:	d0e1      	beq.n	429e <__register_exitproc+0x3e>
    42da:	e7d1      	b.n	4280 <__register_exitproc+0x20>
    42dc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    42e0:	431a      	orrs	r2, r3
    42e2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    42e6:	e7da      	b.n	429e <__register_exitproc+0x3e>
    42e8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    42ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42f0:	e7c1      	b.n	4276 <__register_exitproc+0x16>
    42f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42fa:	bf00      	nop
    42fc:	0000d1c8 	.word	0x0000d1c8
    4300:	00000000 	.word	0x00000000

00004304 <rssi_reset>:
int8_t rssi_min;
uint8_t rssi_count = 0;
int32_t rssi_sum = 0;

static void rssi_reset(void)
{
    4304:	b480      	push	{r7}
    4306:	af00      	add	r7, sp, #0
	rssi_count = 0;
    4308:	4b07      	ldr	r3, [pc, #28]	; (4328 <rssi_reset+0x24>)
    430a:	2200      	movs	r2, #0
    430c:	701a      	strb	r2, [r3, #0]
	rssi_sum = 0;
    430e:	4b07      	ldr	r3, [pc, #28]	; (432c <rssi_reset+0x28>)
    4310:	2200      	movs	r2, #0
    4312:	601a      	str	r2, [r3, #0]
	rssi_max = INT8_MIN;
    4314:	4b06      	ldr	r3, [pc, #24]	; (4330 <rssi_reset+0x2c>)
    4316:	2280      	movs	r2, #128	; 0x80
    4318:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    431a:	4b06      	ldr	r3, [pc, #24]	; (4334 <rssi_reset+0x30>)
    431c:	227f      	movs	r2, #127	; 0x7f
    431e:	701a      	strb	r2, [r3, #0]
}
    4320:	46bd      	mov	sp, r7
    4322:	f85d 7b04 	ldr.w	r7, [sp], #4
    4326:	4770      	bx	lr
    4328:	10000a49 	.word	0x10000a49
    432c:	10000a4c 	.word	0x10000a4c
    4330:	10000b14 	.word	0x10000b14
    4334:	10000bc8 	.word	0x10000bc8

00004338 <rssi_add>:

static void rssi_add(int8_t v)
{
    4338:	b480      	push	{r7}
    433a:	b083      	sub	sp, #12
    433c:	af00      	add	r7, sp, #0
    433e:	4603      	mov	r3, r0
    4340:	71fb      	strb	r3, [r7, #7]
	rssi_max = (v > rssi_max) ? v : rssi_max;
    4342:	4b14      	ldr	r3, [pc, #80]	; (4394 <rssi_add+0x5c>)
    4344:	781b      	ldrb	r3, [r3, #0]
    4346:	b25a      	sxtb	r2, r3
    4348:	f997 3007 	ldrsb.w	r3, [r7, #7]
    434c:	4293      	cmp	r3, r2
    434e:	bfb8      	it	lt
    4350:	4613      	movlt	r3, r2
    4352:	b2da      	uxtb	r2, r3
    4354:	4b0f      	ldr	r3, [pc, #60]	; (4394 <rssi_add+0x5c>)
    4356:	701a      	strb	r2, [r3, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    4358:	4b0f      	ldr	r3, [pc, #60]	; (4398 <rssi_add+0x60>)
    435a:	781b      	ldrb	r3, [r3, #0]
    435c:	b25a      	sxtb	r2, r3
    435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4362:	4293      	cmp	r3, r2
    4364:	bfa8      	it	ge
    4366:	4613      	movge	r3, r2
    4368:	b2da      	uxtb	r2, r3
    436a:	4b0b      	ldr	r3, [pc, #44]	; (4398 <rssi_add+0x60>)
    436c:	701a      	strb	r2, [r3, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4372:	021a      	lsls	r2, r3, #8
    4374:	4b09      	ldr	r3, [pc, #36]	; (439c <rssi_add+0x64>)
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	4413      	add	r3, r2
    437a:	4a08      	ldr	r2, [pc, #32]	; (439c <rssi_add+0x64>)
    437c:	6013      	str	r3, [r2, #0]
	rssi_count += 1;
    437e:	4b08      	ldr	r3, [pc, #32]	; (43a0 <rssi_add+0x68>)
    4380:	781b      	ldrb	r3, [r3, #0]
    4382:	3301      	adds	r3, #1
    4384:	b2da      	uxtb	r2, r3
    4386:	4b06      	ldr	r3, [pc, #24]	; (43a0 <rssi_add+0x68>)
    4388:	701a      	strb	r2, [r3, #0]
}
    438a:	370c      	adds	r7, #12
    438c:	46bd      	mov	sp, r7
    438e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4392:	4770      	bx	lr
    4394:	10000b14 	.word	0x10000b14
    4398:	10000bc8 	.word	0x10000bc8
    439c:	10000a4c 	.word	0x10000a4c
    43a0:	10000a49 	.word	0x10000a49

000043a4 <rssi_iir_update>:
        }

}

static void rssi_iir_update(void)
{
    43a4:	b480      	push	{r7}
    43a6:	b085      	sub	sp, #20
    43a8:	af00      	add	r7, sp, #0
	int32_t avg;
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first
	 * slot of array if not sweeping. */
	if (hop_mode > 0)
    43aa:	4b1f      	ldr	r3, [pc, #124]	; (4428 <rssi_iir_update+0x84>)
    43ac:	781b      	ldrb	r3, [r3, #0]
    43ae:	2b00      	cmp	r3, #0
    43b0:	d006      	beq.n	43c0 <rssi_iir_update+0x1c>
		i = channel - 2402;
    43b2:	4b1e      	ldr	r3, [pc, #120]	; (442c <rssi_iir_update+0x88>)
    43b4:	881b      	ldrh	r3, [r3, #0]
    43b6:	b29b      	uxth	r3, r3
    43b8:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    43bc:	60fb      	str	r3, [r7, #12]
    43be:	e001      	b.n	43c4 <rssi_iir_update+0x20>
	else
		i = 0;
    43c0:	2300      	movs	r3, #0
    43c2:	60fb      	str	r3, [r7, #12]

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    43c4:	4b1a      	ldr	r3, [pc, #104]	; (4430 <rssi_iir_update+0x8c>)
    43c6:	781b      	ldrb	r3, [r3, #0]
    43c8:	2b00      	cmp	r3, #0
    43ca:	d008      	beq.n	43de <rssi_iir_update+0x3a>
		avg = (rssi_sum  + 128) / rssi_count;
    43cc:	4b19      	ldr	r3, [pc, #100]	; (4434 <rssi_iir_update+0x90>)
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	3380      	adds	r3, #128	; 0x80
    43d2:	4a17      	ldr	r2, [pc, #92]	; (4430 <rssi_iir_update+0x8c>)
    43d4:	7812      	ldrb	r2, [r2, #0]
    43d6:	fb93 f3f2 	sdiv	r3, r3, r2
    43da:	60bb      	str	r3, [r7, #8]
    43dc:	e001      	b.n	43e2 <rssi_iir_update+0x3e>
	else
		avg = 0; // really an error
    43de:	2300      	movs	r3, #0
    43e0:	60bb      	str	r3, [r7, #8]
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    43e2:	4a15      	ldr	r2, [pc, #84]	; (4438 <rssi_iir_update+0x94>)
    43e4:	68fb      	ldr	r3, [r7, #12]
    43e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    43ea:	b21a      	sxth	r2, r3
    43ec:	4613      	mov	r3, r2
    43ee:	019b      	lsls	r3, r3, #6
    43f0:	1a9b      	subs	r3, r3, r2
    43f2:	009b      	lsls	r3, r3, #2
    43f4:	4413      	add	r3, r2
    43f6:	607b      	str	r3, [r7, #4]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    43f8:	68ba      	ldr	r2, [r7, #8]
    43fa:	4613      	mov	r3, r2
    43fc:	005b      	lsls	r3, r3, #1
    43fe:	4413      	add	r3, r2
    4400:	687a      	ldr	r2, [r7, #4]
    4402:	4413      	add	r3, r2
    4404:	607b      	str	r3, [r7, #4]
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	3380      	adds	r3, #128	; 0x80
    440a:	2b00      	cmp	r3, #0
    440c:	da00      	bge.n	4410 <rssi_iir_update+0x6c>
    440e:	33ff      	adds	r3, #255	; 0xff
    4410:	121b      	asrs	r3, r3, #8
    4412:	b299      	uxth	r1, r3
    4414:	4a08      	ldr	r2, [pc, #32]	; (4438 <rssi_iir_update+0x94>)
    4416:	68fb      	ldr	r3, [r7, #12]
    4418:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
    441c:	3714      	adds	r7, #20
    441e:	46bd      	mov	sp, r7
    4420:	f85d 7b04 	ldr.w	r7, [sp], #4
    4424:	4770      	bx	lr
    4426:	bf00      	nop
    4428:	1000097c 	.word	0x1000097c
    442c:	1000049c 	.word	0x1000049c
    4430:	10000a49 	.word	0x10000a49
    4434:	10000a4c 	.word	0x10000a4c
    4438:	100009a0 	.word	0x100009a0

0000443c <cs_threshold_set>:
/* Set CC2400 carrier sense threshold and store value to
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, u8 samples)
{
    443c:	b580      	push	{r7, lr}
    443e:	b082      	sub	sp, #8
    4440:	af00      	add	r7, sp, #0
    4442:	4603      	mov	r3, r0
    4444:	460a      	mov	r2, r1
    4446:	71fb      	strb	r3, [r7, #7]
    4448:	4613      	mov	r3, r2
    444a:	71bb      	strb	r3, [r7, #6]
	level = MIN(MAX(level,-120),(-20));
    444c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4450:	f113 0f14 	cmn.w	r3, #20
    4454:	d00d      	beq.n	4472 <cs_threshold_set+0x36>
    4456:	f997 3007 	ldrsb.w	r3, [r7, #7]
    445a:	f113 0f13 	cmn.w	r3, #19
    445e:	da08      	bge.n	4472 <cs_threshold_set+0x36>
    4460:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4464:	f06f 0277 	mvn.w	r2, #119	; 0x77
    4468:	4293      	cmp	r3, r2
    446a:	bfb8      	it	lt
    446c:	4613      	movlt	r3, r2
    446e:	b2db      	uxtb	r3, r3
    4470:	e000      	b.n	4474 <cs_threshold_set+0x38>
    4472:	23ec      	movs	r3, #236	; 0xec
    4474:	71fb      	strb	r3, [r7, #7]
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | (samples&3));
    4476:	79fb      	ldrb	r3, [r7, #7]
    4478:	3338      	adds	r3, #56	; 0x38
    447a:	b2db      	uxtb	r3, r3
    447c:	b29b      	uxth	r3, r3
    447e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    4482:	b29a      	uxth	r2, r3
    4484:	79bb      	ldrb	r3, [r7, #6]
    4486:	b29b      	uxth	r3, r3
    4488:	f003 0303 	and.w	r3, r3, #3
    448c:	b29b      	uxth	r3, r3
    448e:	4313      	orrs	r3, r2
    4490:	b29b      	uxth	r3, r3
    4492:	b29b      	uxth	r3, r3
    4494:	2006      	movs	r0, #6
    4496:	4619      	mov	r1, r3
    4498:	f007 f82c 	bl	b4f4 <cc2400_set>
	cs_threshold_cur = level;
    449c:	4a08      	ldr	r2, [pc, #32]	; (44c0 <cs_threshold_set+0x84>)
    449e:	79fb      	ldrb	r3, [r7, #7]
    44a0:	7013      	strb	r3, [r2, #0]
	cs_no_squelch = (level <= -120);
    44a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    44a6:	f113 0f77 	cmn.w	r3, #119	; 0x77
    44aa:	bfb4      	ite	lt
    44ac:	2301      	movlt	r3, #1
    44ae:	2300      	movge	r3, #0
    44b0:	b2db      	uxtb	r3, r3
    44b2:	461a      	mov	r2, r3
    44b4:	4b03      	ldr	r3, [pc, #12]	; (44c4 <cs_threshold_set+0x88>)
    44b6:	701a      	strb	r2, [r3, #0]
}
    44b8:	3708      	adds	r7, #8
    44ba:	46bd      	mov	sp, r7
    44bc:	bd80      	pop	{r7, pc}
    44be:	bf00      	nop
    44c0:	1000044d 	.word	0x1000044d
    44c4:	1000097e 	.word	0x1000097e

000044c8 <enqueue>:

static int enqueue(u8 type, u8 *buf)
{
    44c8:	b580      	push	{r7, lr}
    44ca:	b088      	sub	sp, #32
    44cc:	af00      	add	r7, sp, #0
    44ce:	4603      	mov	r3, r0
    44d0:	6039      	str	r1, [r7, #0]
    44d2:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    44d4:	f005 fdfa 	bl	a0cc <usb_enqueue>
    44d8:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    44da:	69fb      	ldr	r3, [r7, #28]
    44dc:	2b00      	cmp	r3, #0
    44de:	d109      	bne.n	44f4 <enqueue+0x2c>
		status |= FIFO_OVERFLOW;
    44e0:	4b52      	ldr	r3, [pc, #328]	; (462c <enqueue+0x164>)
    44e2:	781b      	ldrb	r3, [r3, #0]
    44e4:	b2db      	uxtb	r3, r3
    44e6:	f043 0304 	orr.w	r3, r3, #4
    44ea:	b2da      	uxtb	r2, r3
    44ec:	4b4f      	ldr	r3, [pc, #316]	; (462c <enqueue+0x164>)
    44ee:	701a      	strb	r2, [r3, #0]
		return 0;
    44f0:	2300      	movs	r3, #0
    44f2:	e097      	b.n	4624 <enqueue+0x15c>
	}

	f->pkt_type = type;
    44f4:	69fb      	ldr	r3, [r7, #28]
    44f6:	79fa      	ldrb	r2, [r7, #7]
    44f8:	701a      	strb	r2, [r3, #0]
	if(type == SPECAN) {
    44fa:	79fb      	ldrb	r3, [r7, #7]
    44fc:	2b04      	cmp	r3, #4
    44fe:	d113      	bne.n	4528 <enqueue+0x60>
		f->clkn_high = (clkn >> 20) & 0xff;
    4500:	4b4b      	ldr	r3, [pc, #300]	; (4630 <enqueue+0x168>)
    4502:	681b      	ldr	r3, [r3, #0]
    4504:	0d1b      	lsrs	r3, r3, #20
    4506:	b2da      	uxtb	r2, r3
    4508:	69fb      	ldr	r3, [r7, #28]
    450a:	70da      	strb	r2, [r3, #3]
		f->clk100ns = CLK100NS;
    450c:	4b48      	ldr	r3, [pc, #288]	; (4630 <enqueue+0x168>)
    450e:	681b      	ldr	r3, [r3, #0]
    4510:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4514:	f640 4235 	movw	r2, #3125	; 0xc35
    4518:	fb02 f203 	mul.w	r2, r2, r3
    451c:	4b45      	ldr	r3, [pc, #276]	; (4634 <enqueue+0x16c>)
    451e:	681b      	ldr	r3, [r3, #0]
    4520:	441a      	add	r2, r3
    4522:	69fb      	ldr	r3, [r7, #28]
    4524:	605a      	str	r2, [r3, #4]
    4526:	e008      	b.n	453a <enqueue+0x72>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    4528:	4b43      	ldr	r3, [pc, #268]	; (4638 <enqueue+0x170>)
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	b2da      	uxtb	r2, r3
    452e:	69fb      	ldr	r3, [r7, #28]
    4530:	70da      	strb	r2, [r3, #3]
		f->clk100ns = idle_buf_clk100ns;
    4532:	4b42      	ldr	r3, [pc, #264]	; (463c <enqueue+0x174>)
    4534:	681a      	ldr	r2, [r3, #0]
    4536:	69fb      	ldr	r3, [r7, #28]
    4538:	605a      	str	r2, [r3, #4]
	}
	f->channel = idle_buf_channel - 2402;
    453a:	4b41      	ldr	r3, [pc, #260]	; (4640 <enqueue+0x178>)
    453c:	881b      	ldrh	r3, [r3, #0]
    453e:	b29b      	uxth	r3, r3
    4540:	b2db      	uxtb	r3, r3
    4542:	3b62      	subs	r3, #98	; 0x62
    4544:	b2da      	uxtb	r2, r3
    4546:	69fb      	ldr	r3, [r7, #28]
    4548:	709a      	strb	r2, [r3, #2]
	f->rssi_min = rssi_min;
    454a:	4b3e      	ldr	r3, [pc, #248]	; (4644 <enqueue+0x17c>)
    454c:	781b      	ldrb	r3, [r3, #0]
    454e:	b2da      	uxtb	r2, r3
    4550:	69fb      	ldr	r3, [r7, #28]
    4552:	725a      	strb	r2, [r3, #9]
	f->rssi_max = rssi_max;
    4554:	4b3c      	ldr	r3, [pc, #240]	; (4648 <enqueue+0x180>)
    4556:	781b      	ldrb	r3, [r3, #0]
    4558:	b2da      	uxtb	r2, r3
    455a:	69fb      	ldr	r3, [r7, #28]
    455c:	721a      	strb	r2, [r3, #8]
	f->reserved[0] = device_index;
    455e:	4b3b      	ldr	r3, [pc, #236]	; (464c <enqueue+0x184>)
    4560:	781a      	ldrb	r2, [r3, #0]
    4562:	69fb      	ldr	r3, [r7, #28]
    4564:	731a      	strb	r2, [r3, #12]
	f->rssi_avg = rssi_sum/rssi_count;
    4566:	4b3a      	ldr	r3, [pc, #232]	; (4650 <enqueue+0x188>)
    4568:	681b      	ldr	r3, [r3, #0]
    456a:	4a3a      	ldr	r2, [pc, #232]	; (4654 <enqueue+0x18c>)
    456c:	7812      	ldrb	r2, [r2, #0]
    456e:	fb93 f3f2 	sdiv	r3, r3, r2
    4572:	b2da      	uxtb	r2, r3
    4574:	69fb      	ldr	r3, [r7, #28]
    4576:	729a      	strb	r2, [r3, #10]
	
//	f->rssi_count = device_index;

	USRLED_SET;
    4578:	4b37      	ldr	r3, [pc, #220]	; (4658 <enqueue+0x190>)
    457a:	2202      	movs	r2, #2
    457c:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    457e:	69fb      	ldr	r3, [r7, #28]
    4580:	330e      	adds	r3, #14
    4582:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    4584:	683b      	ldr	r3, [r7, #0]
    4586:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    4588:	697b      	ldr	r3, [r7, #20]
    458a:	681a      	ldr	r2, [r3, #0]
    458c:	69bb      	ldr	r3, [r7, #24]
    458e:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    4590:	69bb      	ldr	r3, [r7, #24]
    4592:	3304      	adds	r3, #4
    4594:	697a      	ldr	r2, [r7, #20]
    4596:	6852      	ldr	r2, [r2, #4]
    4598:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    459a:	69bb      	ldr	r3, [r7, #24]
    459c:	3308      	adds	r3, #8
    459e:	697a      	ldr	r2, [r7, #20]
    45a0:	6892      	ldr	r2, [r2, #8]
    45a2:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    45a4:	69bb      	ldr	r3, [r7, #24]
    45a6:	330c      	adds	r3, #12
    45a8:	697a      	ldr	r2, [r7, #20]
    45aa:	68d2      	ldr	r2, [r2, #12]
    45ac:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    45ae:	69bb      	ldr	r3, [r7, #24]
    45b0:	3310      	adds	r3, #16
    45b2:	697a      	ldr	r2, [r7, #20]
    45b4:	6912      	ldr	r2, [r2, #16]
    45b6:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    45b8:	69bb      	ldr	r3, [r7, #24]
    45ba:	3314      	adds	r3, #20
    45bc:	697a      	ldr	r2, [r7, #20]
    45be:	6952      	ldr	r2, [r2, #20]
    45c0:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    45c2:	69bb      	ldr	r3, [r7, #24]
    45c4:	3318      	adds	r3, #24
    45c6:	697a      	ldr	r2, [r7, #20]
    45c8:	6992      	ldr	r2, [r2, #24]
    45ca:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    45cc:	69bb      	ldr	r3, [r7, #24]
    45ce:	331c      	adds	r3, #28
    45d0:	697a      	ldr	r2, [r7, #20]
    45d2:	69d2      	ldr	r2, [r2, #28]
    45d4:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    45d6:	69bb      	ldr	r3, [r7, #24]
    45d8:	3320      	adds	r3, #32
    45da:	697a      	ldr	r2, [r7, #20]
    45dc:	6a12      	ldr	r2, [r2, #32]
    45de:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    45e0:	69bb      	ldr	r3, [r7, #24]
    45e2:	3324      	adds	r3, #36	; 0x24
    45e4:	697a      	ldr	r2, [r7, #20]
    45e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
    45e8:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    45ea:	69bb      	ldr	r3, [r7, #24]
    45ec:	3328      	adds	r3, #40	; 0x28
    45ee:	697a      	ldr	r2, [r7, #20]
    45f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    45f2:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    45f4:	69bb      	ldr	r3, [r7, #24]
    45f6:	332c      	adds	r3, #44	; 0x2c
    45f8:	697a      	ldr	r2, [r7, #20]
    45fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    45fc:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    45fe:	69fb      	ldr	r3, [r7, #28]
    4600:	330e      	adds	r3, #14
    4602:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    4604:	683b      	ldr	r3, [r7, #0]
    4606:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    4608:	693b      	ldr	r3, [r7, #16]
    460a:	3330      	adds	r3, #48	; 0x30
    460c:	68fa      	ldr	r2, [r7, #12]
    460e:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    4610:	801a      	strh	r2, [r3, #0]

	f->status = status;
    4612:	4b06      	ldr	r3, [pc, #24]	; (462c <enqueue+0x164>)
    4614:	781b      	ldrb	r3, [r3, #0]
    4616:	b2da      	uxtb	r2, r3
    4618:	69fb      	ldr	r3, [r7, #28]
    461a:	705a      	strb	r2, [r3, #1]
	status = 0;
    461c:	4b03      	ldr	r3, [pc, #12]	; (462c <enqueue+0x164>)
    461e:	2200      	movs	r2, #0
    4620:	701a      	strb	r2, [r3, #0]

	return 1;
    4622:	2301      	movs	r3, #1
}
    4624:	4618      	mov	r0, r3
    4626:	3720      	adds	r7, #32
    4628:	46bd      	mov	sp, r7
    462a:	bd80      	pop	{r7, pc}
    462c:	10000a48 	.word	0x10000a48
    4630:	10000bf4 	.word	0x10000bf4
    4634:	40004008 	.word	0x40004008
    4638:	10001044 	.word	0x10001044
    463c:	10000bd8 	.word	0x10000bd8
    4640:	10000988 	.word	0x10000988
    4644:	10000bc8 	.word	0x10000bc8
    4648:	10000b14 	.word	0x10000b14
    464c:	10000bf8 	.word	0x10000bf8
    4650:	10000a4c 	.word	0x10000a4c
    4654:	10000a49 	.word	0x10000a49
    4658:	2009c038 	.word	0x2009c038

0000465c <enqueue_legacy>:


static int enqueue_legacy(u8 type, u8 *buf)
{
    465c:	b580      	push	{r7, lr}
    465e:	b088      	sub	sp, #32
    4660:	af00      	add	r7, sp, #0
    4662:	4603      	mov	r3, r0
    4664:	6039      	str	r1, [r7, #0]
    4666:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    4668:	f005 fd30 	bl	a0cc <usb_enqueue>
    466c:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    466e:	69fb      	ldr	r3, [r7, #28]
    4670:	2b00      	cmp	r3, #0
    4672:	d109      	bne.n	4688 <enqueue_legacy+0x2c>
		status |= FIFO_OVERFLOW;
    4674:	4b3d      	ldr	r3, [pc, #244]	; (476c <enqueue_legacy+0x110>)
    4676:	781b      	ldrb	r3, [r3, #0]
    4678:	b2db      	uxtb	r3, r3
    467a:	f043 0304 	orr.w	r3, r3, #4
    467e:	b2da      	uxtb	r2, r3
    4680:	4b3a      	ldr	r3, [pc, #232]	; (476c <enqueue_legacy+0x110>)
    4682:	701a      	strb	r2, [r3, #0]
		return 0;
    4684:	2300      	movs	r3, #0
    4686:	e06d      	b.n	4764 <enqueue_legacy+0x108>
	}

	f->pkt_type = type;
    4688:	69fb      	ldr	r3, [r7, #28]
    468a:	79fa      	ldrb	r2, [r7, #7]
    468c:	701a      	strb	r2, [r3, #0]
//	f->clkn_high = idle_buf_clkn_high;
	f->clk100ns = clkn_legacy;
    468e:	4b38      	ldr	r3, [pc, #224]	; (4770 <enqueue_legacy+0x114>)
    4690:	681a      	ldr	r2, [r3, #0]
    4692:	69fb      	ldr	r3, [r7, #28]
    4694:	605a      	str	r2, [r3, #4]
	
	f->channel = channel - 2402;
    4696:	4b37      	ldr	r3, [pc, #220]	; (4774 <enqueue_legacy+0x118>)
    4698:	881b      	ldrh	r3, [r3, #0]
    469a:	b29b      	uxth	r3, r3
    469c:	b2db      	uxtb	r3, r3
    469e:	3b62      	subs	r3, #98	; 0x62
    46a0:	b2da      	uxtb	r2, r3
    46a2:	69fb      	ldr	r3, [r7, #28]
    46a4:	709a      	strb	r2, [r3, #2]
//	f->rssi_min = rssi_min;
//	f->rssi_max = rssi_max;
//	f->reserved[0] = device_index;
	f->rssi_avg = rssi_sum/rssi_count;
    46a6:	4b34      	ldr	r3, [pc, #208]	; (4778 <enqueue_legacy+0x11c>)
    46a8:	681b      	ldr	r3, [r3, #0]
    46aa:	4a34      	ldr	r2, [pc, #208]	; (477c <enqueue_legacy+0x120>)
    46ac:	7812      	ldrb	r2, [r2, #0]
    46ae:	fb93 f3f2 	sdiv	r3, r3, r2
    46b2:	b2da      	uxtb	r2, r3
    46b4:	69fb      	ldr	r3, [r7, #28]
    46b6:	729a      	strb	r2, [r3, #10]
	
//	f->rssi_count = device_index;

	USRLED_SET;
    46b8:	4b31      	ldr	r3, [pc, #196]	; (4780 <enqueue_legacy+0x124>)
    46ba:	2202      	movs	r2, #2
    46bc:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    46be:	69fb      	ldr	r3, [r7, #28]
    46c0:	330e      	adds	r3, #14
    46c2:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    46c4:	683b      	ldr	r3, [r7, #0]
    46c6:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    46c8:	697b      	ldr	r3, [r7, #20]
    46ca:	681a      	ldr	r2, [r3, #0]
    46cc:	69bb      	ldr	r3, [r7, #24]
    46ce:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    46d0:	69bb      	ldr	r3, [r7, #24]
    46d2:	3304      	adds	r3, #4
    46d4:	697a      	ldr	r2, [r7, #20]
    46d6:	6852      	ldr	r2, [r2, #4]
    46d8:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    46da:	69bb      	ldr	r3, [r7, #24]
    46dc:	3308      	adds	r3, #8
    46de:	697a      	ldr	r2, [r7, #20]
    46e0:	6892      	ldr	r2, [r2, #8]
    46e2:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    46e4:	69bb      	ldr	r3, [r7, #24]
    46e6:	330c      	adds	r3, #12
    46e8:	697a      	ldr	r2, [r7, #20]
    46ea:	68d2      	ldr	r2, [r2, #12]
    46ec:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    46ee:	69bb      	ldr	r3, [r7, #24]
    46f0:	3310      	adds	r3, #16
    46f2:	697a      	ldr	r2, [r7, #20]
    46f4:	6912      	ldr	r2, [r2, #16]
    46f6:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    46f8:	69bb      	ldr	r3, [r7, #24]
    46fa:	3314      	adds	r3, #20
    46fc:	697a      	ldr	r2, [r7, #20]
    46fe:	6952      	ldr	r2, [r2, #20]
    4700:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    4702:	69bb      	ldr	r3, [r7, #24]
    4704:	3318      	adds	r3, #24
    4706:	697a      	ldr	r2, [r7, #20]
    4708:	6992      	ldr	r2, [r2, #24]
    470a:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    470c:	69bb      	ldr	r3, [r7, #24]
    470e:	331c      	adds	r3, #28
    4710:	697a      	ldr	r2, [r7, #20]
    4712:	69d2      	ldr	r2, [r2, #28]
    4714:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    4716:	69bb      	ldr	r3, [r7, #24]
    4718:	3320      	adds	r3, #32
    471a:	697a      	ldr	r2, [r7, #20]
    471c:	6a12      	ldr	r2, [r2, #32]
    471e:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    4720:	69bb      	ldr	r3, [r7, #24]
    4722:	3324      	adds	r3, #36	; 0x24
    4724:	697a      	ldr	r2, [r7, #20]
    4726:	6a52      	ldr	r2, [r2, #36]	; 0x24
    4728:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    472a:	69bb      	ldr	r3, [r7, #24]
    472c:	3328      	adds	r3, #40	; 0x28
    472e:	697a      	ldr	r2, [r7, #20]
    4730:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4732:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    4734:	69bb      	ldr	r3, [r7, #24]
    4736:	332c      	adds	r3, #44	; 0x2c
    4738:	697a      	ldr	r2, [r7, #20]
    473a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    473c:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    473e:	69fb      	ldr	r3, [r7, #28]
    4740:	330e      	adds	r3, #14
    4742:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    4744:	683b      	ldr	r3, [r7, #0]
    4746:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    4748:	693b      	ldr	r3, [r7, #16]
    474a:	3330      	adds	r3, #48	; 0x30
    474c:	68fa      	ldr	r2, [r7, #12]
    474e:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    4750:	801a      	strh	r2, [r3, #0]

	f->status = status;
    4752:	4b06      	ldr	r3, [pc, #24]	; (476c <enqueue_legacy+0x110>)
    4754:	781b      	ldrb	r3, [r3, #0]
    4756:	b2da      	uxtb	r2, r3
    4758:	69fb      	ldr	r3, [r7, #28]
    475a:	705a      	strb	r2, [r3, #1]
	status = 0;
    475c:	4b03      	ldr	r3, [pc, #12]	; (476c <enqueue_legacy+0x110>)
    475e:	2200      	movs	r2, #0
    4760:	701a      	strb	r2, [r3, #0]

	return 1;
    4762:	2301      	movs	r3, #1
}
    4764:	4618      	mov	r0, r3
    4766:	3720      	adds	r7, #32
    4768:	46bd      	mov	sp, r7
    476a:	bd80      	pop	{r7, pc}
    476c:	10000a48 	.word	0x10000a48
    4770:	1000103c 	.word	0x1000103c
    4774:	1000049c 	.word	0x1000049c
    4778:	10000a4c 	.word	0x10000a4c
    477c:	10000a49 	.word	0x10000a49
    4780:	2009c038 	.word	0x2009c038

00004784 <enqueue_freq>:



static int enqueue_freq(u8 type, u8 *buf)
{
    4784:	b580      	push	{r7, lr}
    4786:	b088      	sub	sp, #32
    4788:	af00      	add	r7, sp, #0
    478a:	4603      	mov	r3, r0
    478c:	6039      	str	r1, [r7, #0]
    478e:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    4790:	f005 fc9c 	bl	a0cc <usb_enqueue>
    4794:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    4796:	69fb      	ldr	r3, [r7, #28]
    4798:	2b00      	cmp	r3, #0
    479a:	d109      	bne.n	47b0 <enqueue_freq+0x2c>
		status |= FIFO_OVERFLOW;
    479c:	4b3d      	ldr	r3, [pc, #244]	; (4894 <enqueue_freq+0x110>)
    479e:	781b      	ldrb	r3, [r3, #0]
    47a0:	b2db      	uxtb	r3, r3
    47a2:	f043 0304 	orr.w	r3, r3, #4
    47a6:	b2da      	uxtb	r2, r3
    47a8:	4b3a      	ldr	r3, [pc, #232]	; (4894 <enqueue_freq+0x110>)
    47aa:	701a      	strb	r2, [r3, #0]
		return 0;
    47ac:	2300      	movs	r3, #0
    47ae:	e06d      	b.n	488c <enqueue_freq+0x108>
	}

	f->pkt_type = type;
    47b0:	69fb      	ldr	r3, [r7, #28]
    47b2:	79fa      	ldrb	r2, [r7, #7]
    47b4:	701a      	strb	r2, [r3, #0]
	
	f->clkn_high = idle_buf_clkn_high;
    47b6:	4b38      	ldr	r3, [pc, #224]	; (4898 <enqueue_freq+0x114>)
    47b8:	681b      	ldr	r3, [r3, #0]
    47ba:	b2da      	uxtb	r2, r3
    47bc:	69fb      	ldr	r3, [r7, #28]
    47be:	70da      	strb	r2, [r3, #3]
	f->clk100ns = clkn_freq;
    47c0:	4b36      	ldr	r3, [pc, #216]	; (489c <enqueue_freq+0x118>)
    47c2:	681a      	ldr	r2, [r3, #0]
    47c4:	69fb      	ldr	r3, [r7, #28]
    47c6:	605a      	str	r2, [r3, #4]
	
	f->channel = idle_buf_channel - 2402;
    47c8:	4b35      	ldr	r3, [pc, #212]	; (48a0 <enqueue_freq+0x11c>)
    47ca:	881b      	ldrh	r3, [r3, #0]
    47cc:	b29b      	uxth	r3, r3
    47ce:	b2db      	uxtb	r3, r3
    47d0:	3b62      	subs	r3, #98	; 0x62
    47d2:	b2da      	uxtb	r2, r3
    47d4:	69fb      	ldr	r3, [r7, #28]
    47d6:	709a      	strb	r2, [r3, #2]
//	f->rssi_min = rssi_min;
//	f->rssi_max = rssi_max;
	f->reserved[0] = device_index;
    47d8:	4b32      	ldr	r3, [pc, #200]	; (48a4 <enqueue_freq+0x120>)
    47da:	781a      	ldrb	r2, [r3, #0]
    47dc:	69fb      	ldr	r3, [r7, #28]
    47de:	731a      	strb	r2, [r3, #12]
//	f->rssi_avg = rssi_sum/rssi_count;

	USRLED_SET;
    47e0:	4b31      	ldr	r3, [pc, #196]	; (48a8 <enqueue_freq+0x124>)
    47e2:	2202      	movs	r2, #2
    47e4:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    47e6:	69fb      	ldr	r3, [r7, #28]
    47e8:	330e      	adds	r3, #14
    47ea:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    47ec:	683b      	ldr	r3, [r7, #0]
    47ee:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    47f0:	697b      	ldr	r3, [r7, #20]
    47f2:	681a      	ldr	r2, [r3, #0]
    47f4:	69bb      	ldr	r3, [r7, #24]
    47f6:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    47f8:	69bb      	ldr	r3, [r7, #24]
    47fa:	3304      	adds	r3, #4
    47fc:	697a      	ldr	r2, [r7, #20]
    47fe:	6852      	ldr	r2, [r2, #4]
    4800:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    4802:	69bb      	ldr	r3, [r7, #24]
    4804:	3308      	adds	r3, #8
    4806:	697a      	ldr	r2, [r7, #20]
    4808:	6892      	ldr	r2, [r2, #8]
    480a:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    480c:	69bb      	ldr	r3, [r7, #24]
    480e:	330c      	adds	r3, #12
    4810:	697a      	ldr	r2, [r7, #20]
    4812:	68d2      	ldr	r2, [r2, #12]
    4814:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    4816:	69bb      	ldr	r3, [r7, #24]
    4818:	3310      	adds	r3, #16
    481a:	697a      	ldr	r2, [r7, #20]
    481c:	6912      	ldr	r2, [r2, #16]
    481e:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    4820:	69bb      	ldr	r3, [r7, #24]
    4822:	3314      	adds	r3, #20
    4824:	697a      	ldr	r2, [r7, #20]
    4826:	6952      	ldr	r2, [r2, #20]
    4828:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    482a:	69bb      	ldr	r3, [r7, #24]
    482c:	3318      	adds	r3, #24
    482e:	697a      	ldr	r2, [r7, #20]
    4830:	6992      	ldr	r2, [r2, #24]
    4832:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    4834:	69bb      	ldr	r3, [r7, #24]
    4836:	331c      	adds	r3, #28
    4838:	697a      	ldr	r2, [r7, #20]
    483a:	69d2      	ldr	r2, [r2, #28]
    483c:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    483e:	69bb      	ldr	r3, [r7, #24]
    4840:	3320      	adds	r3, #32
    4842:	697a      	ldr	r2, [r7, #20]
    4844:	6a12      	ldr	r2, [r2, #32]
    4846:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    4848:	69bb      	ldr	r3, [r7, #24]
    484a:	3324      	adds	r3, #36	; 0x24
    484c:	697a      	ldr	r2, [r7, #20]
    484e:	6a52      	ldr	r2, [r2, #36]	; 0x24
    4850:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    4852:	69bb      	ldr	r3, [r7, #24]
    4854:	3328      	adds	r3, #40	; 0x28
    4856:	697a      	ldr	r2, [r7, #20]
    4858:	6a92      	ldr	r2, [r2, #40]	; 0x28
    485a:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    485c:	69bb      	ldr	r3, [r7, #24]
    485e:	332c      	adds	r3, #44	; 0x2c
    4860:	697a      	ldr	r2, [r7, #20]
    4862:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4864:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    4866:	69fb      	ldr	r3, [r7, #28]
    4868:	330e      	adds	r3, #14
    486a:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    486c:	683b      	ldr	r3, [r7, #0]
    486e:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    4870:	693b      	ldr	r3, [r7, #16]
    4872:	3330      	adds	r3, #48	; 0x30
    4874:	68fa      	ldr	r2, [r7, #12]
    4876:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    4878:	801a      	strh	r2, [r3, #0]

	f->status = status;
    487a:	4b06      	ldr	r3, [pc, #24]	; (4894 <enqueue_freq+0x110>)
    487c:	781b      	ldrb	r3, [r3, #0]
    487e:	b2da      	uxtb	r2, r3
    4880:	69fb      	ldr	r3, [r7, #28]
    4882:	705a      	strb	r2, [r3, #1]
	status = 0;
    4884:	4b03      	ldr	r3, [pc, #12]	; (4894 <enqueue_freq+0x110>)
    4886:	2200      	movs	r2, #0
    4888:	701a      	strb	r2, [r3, #0]

	return 1;
    488a:	2301      	movs	r3, #1
}
    488c:	4618      	mov	r0, r3
    488e:	3720      	adds	r7, #32
    4890:	46bd      	mov	sp, r7
    4892:	bd80      	pop	{r7, pc}
    4894:	10000a48 	.word	0x10000a48
    4898:	10001044 	.word	0x10001044
    489c:	10000b08 	.word	0x10000b08
    48a0:	10000988 	.word	0x10000988
    48a4:	10000bf8 	.word	0x10000bf8
    48a8:	2009c038 	.word	0x2009c038

000048ac <enqueue_proposed>:



static int enqueue_proposed(u8 type, u8 *buf)
{
    48ac:	b580      	push	{r7, lr}
    48ae:	b088      	sub	sp, #32
    48b0:	af00      	add	r7, sp, #0
    48b2:	4603      	mov	r3, r0
    48b4:	6039      	str	r1, [r7, #0]
    48b6:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    48b8:	f005 fc08 	bl	a0cc <usb_enqueue>
    48bc:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    48be:	69fb      	ldr	r3, [r7, #28]
    48c0:	2b00      	cmp	r3, #0
    48c2:	d109      	bne.n	48d8 <enqueue_proposed+0x2c>
		status |= FIFO_OVERFLOW;
    48c4:	4b3d      	ldr	r3, [pc, #244]	; (49bc <enqueue_proposed+0x110>)
    48c6:	781b      	ldrb	r3, [r3, #0]
    48c8:	b2db      	uxtb	r3, r3
    48ca:	f043 0304 	orr.w	r3, r3, #4
    48ce:	b2da      	uxtb	r2, r3
    48d0:	4b3a      	ldr	r3, [pc, #232]	; (49bc <enqueue_proposed+0x110>)
    48d2:	701a      	strb	r2, [r3, #0]
		return 0;
    48d4:	2300      	movs	r3, #0
    48d6:	e06c      	b.n	49b2 <enqueue_proposed+0x106>
	}

	f->pkt_type = type;
    48d8:	69fb      	ldr	r3, [r7, #28]
    48da:	79fa      	ldrb	r2, [r7, #7]
    48dc:	701a      	strb	r2, [r3, #0]
//	f->clkn_high = idle_buf_clkn_high;
	f->clk100ns = clkn_proposed;
    48de:	4b38      	ldr	r3, [pc, #224]	; (49c0 <enqueue_proposed+0x114>)
    48e0:	681a      	ldr	r2, [r3, #0]
    48e2:	69fb      	ldr	r3, [r7, #28]
    48e4:	605a      	str	r2, [r3, #4]
	f->channel = idle_buf_channel - 2402;
    48e6:	4b37      	ldr	r3, [pc, #220]	; (49c4 <enqueue_proposed+0x118>)
    48e8:	881b      	ldrh	r3, [r3, #0]
    48ea:	b29b      	uxth	r3, r3
    48ec:	b2db      	uxtb	r3, r3
    48ee:	3b62      	subs	r3, #98	; 0x62
    48f0:	b2da      	uxtb	r2, r3
    48f2:	69fb      	ldr	r3, [r7, #28]
    48f4:	709a      	strb	r2, [r3, #2]
//	f->rssi_min = rssi_min;
//	f->rssi_max = rssi_max;
	f->rssi_avg = rssi_avg;
    48f6:	4b34      	ldr	r3, [pc, #208]	; (49c8 <enqueue_proposed+0x11c>)
    48f8:	781a      	ldrb	r2, [r3, #0]
    48fa:	69fb      	ldr	r3, [r7, #28]
    48fc:	729a      	strb	r2, [r3, #10]
	
	f->reserved[1] = freq_avg;
    48fe:	4b33      	ldr	r3, [pc, #204]	; (49cc <enqueue_proposed+0x120>)
    4900:	781a      	ldrb	r2, [r3, #0]
    4902:	69fb      	ldr	r3, [r7, #28]
    4904:	735a      	strb	r2, [r3, #13]
//	f->rssi_count = device_index;

	USRLED_SET;
    4906:	4b32      	ldr	r3, [pc, #200]	; (49d0 <enqueue_proposed+0x124>)
    4908:	2202      	movs	r2, #2
    490a:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    490c:	69fb      	ldr	r3, [r7, #28]
    490e:	330e      	adds	r3, #14
    4910:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    4912:	683b      	ldr	r3, [r7, #0]
    4914:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    4916:	697b      	ldr	r3, [r7, #20]
    4918:	681a      	ldr	r2, [r3, #0]
    491a:	69bb      	ldr	r3, [r7, #24]
    491c:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    491e:	69bb      	ldr	r3, [r7, #24]
    4920:	3304      	adds	r3, #4
    4922:	697a      	ldr	r2, [r7, #20]
    4924:	6852      	ldr	r2, [r2, #4]
    4926:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    4928:	69bb      	ldr	r3, [r7, #24]
    492a:	3308      	adds	r3, #8
    492c:	697a      	ldr	r2, [r7, #20]
    492e:	6892      	ldr	r2, [r2, #8]
    4930:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    4932:	69bb      	ldr	r3, [r7, #24]
    4934:	330c      	adds	r3, #12
    4936:	697a      	ldr	r2, [r7, #20]
    4938:	68d2      	ldr	r2, [r2, #12]
    493a:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    493c:	69bb      	ldr	r3, [r7, #24]
    493e:	3310      	adds	r3, #16
    4940:	697a      	ldr	r2, [r7, #20]
    4942:	6912      	ldr	r2, [r2, #16]
    4944:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    4946:	69bb      	ldr	r3, [r7, #24]
    4948:	3314      	adds	r3, #20
    494a:	697a      	ldr	r2, [r7, #20]
    494c:	6952      	ldr	r2, [r2, #20]
    494e:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    4950:	69bb      	ldr	r3, [r7, #24]
    4952:	3318      	adds	r3, #24
    4954:	697a      	ldr	r2, [r7, #20]
    4956:	6992      	ldr	r2, [r2, #24]
    4958:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    495a:	69bb      	ldr	r3, [r7, #24]
    495c:	331c      	adds	r3, #28
    495e:	697a      	ldr	r2, [r7, #20]
    4960:	69d2      	ldr	r2, [r2, #28]
    4962:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    4964:	69bb      	ldr	r3, [r7, #24]
    4966:	3320      	adds	r3, #32
    4968:	697a      	ldr	r2, [r7, #20]
    496a:	6a12      	ldr	r2, [r2, #32]
    496c:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    496e:	69bb      	ldr	r3, [r7, #24]
    4970:	3324      	adds	r3, #36	; 0x24
    4972:	697a      	ldr	r2, [r7, #20]
    4974:	6a52      	ldr	r2, [r2, #36]	; 0x24
    4976:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    4978:	69bb      	ldr	r3, [r7, #24]
    497a:	3328      	adds	r3, #40	; 0x28
    497c:	697a      	ldr	r2, [r7, #20]
    497e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4980:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    4982:	69bb      	ldr	r3, [r7, #24]
    4984:	332c      	adds	r3, #44	; 0x2c
    4986:	697a      	ldr	r2, [r7, #20]
    4988:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    498a:	601a      	str	r2, [r3, #0]
	u16 *p3 = (u16 *)f->data;
    498c:	69fb      	ldr	r3, [r7, #28]
    498e:	330e      	adds	r3, #14
    4990:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    4992:	683b      	ldr	r3, [r7, #0]
    4994:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    4996:	693b      	ldr	r3, [r7, #16]
    4998:	3330      	adds	r3, #48	; 0x30
    499a:	68fa      	ldr	r2, [r7, #12]
    499c:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    499e:	801a      	strh	r2, [r3, #0]

	f->status = status;
    49a0:	4b06      	ldr	r3, [pc, #24]	; (49bc <enqueue_proposed+0x110>)
    49a2:	781b      	ldrb	r3, [r3, #0]
    49a4:	b2da      	uxtb	r2, r3
    49a6:	69fb      	ldr	r3, [r7, #28]
    49a8:	705a      	strb	r2, [r3, #1]
	status = 0;
    49aa:	4b04      	ldr	r3, [pc, #16]	; (49bc <enqueue_proposed+0x110>)
    49ac:	2200      	movs	r2, #0
    49ae:	701a      	strb	r2, [r3, #0]

	return 1;
    49b0:	2301      	movs	r3, #1
}
    49b2:	4618      	mov	r0, r3
    49b4:	3720      	adds	r7, #32
    49b6:	46bd      	mov	sp, r7
    49b8:	bd80      	pop	{r7, pc}
    49ba:	bf00      	nop
    49bc:	10000a48 	.word	0x10000a48
    49c0:	10000b10 	.word	0x10000b10
    49c4:	10000988 	.word	0x10000988
    49c8:	10001041 	.word	0x10001041
    49cc:	10000bf9 	.word	0x10000bf9
    49d0:	2009c038 	.word	0x2009c038

000049d4 <enqueue_with_ts>:



int enqueue_with_ts(u8 type, u8 *buf, u32 ts)
{
    49d4:	b580      	push	{r7, lr}
    49d6:	b086      	sub	sp, #24
    49d8:	af00      	add	r7, sp, #0
    49da:	4603      	mov	r3, r0
    49dc:	60b9      	str	r1, [r7, #8]
    49de:	607a      	str	r2, [r7, #4]
    49e0:	73fb      	strb	r3, [r7, #15]
	usb_pkt_rx *f = usb_enqueue();
    49e2:	f005 fb73 	bl	a0cc <usb_enqueue>
    49e6:	6178      	str	r0, [r7, #20]

	/* fail if queue is full */
	if (f == NULL) {
    49e8:	697b      	ldr	r3, [r7, #20]
    49ea:	2b00      	cmp	r3, #0
    49ec:	d109      	bne.n	4a02 <enqueue_with_ts+0x2e>
		status |= FIFO_OVERFLOW;
    49ee:	4b14      	ldr	r3, [pc, #80]	; (4a40 <enqueue_with_ts+0x6c>)
    49f0:	781b      	ldrb	r3, [r3, #0]
    49f2:	b2db      	uxtb	r3, r3
    49f4:	f043 0304 	orr.w	r3, r3, #4
    49f8:	b2da      	uxtb	r2, r3
    49fa:	4b11      	ldr	r3, [pc, #68]	; (4a40 <enqueue_with_ts+0x6c>)
    49fc:	701a      	strb	r2, [r3, #0]
		return 0;
    49fe:	2300      	movs	r3, #0
    4a00:	e019      	b.n	4a36 <enqueue_with_ts+0x62>
	}

	f->pkt_type = type;
    4a02:	697b      	ldr	r3, [r7, #20]
    4a04:	7bfa      	ldrb	r2, [r7, #15]
    4a06:	701a      	strb	r2, [r3, #0]
//	f->clkn_high = 0;
	f->clk100ns = ts;
    4a08:	697b      	ldr	r3, [r7, #20]
    4a0a:	687a      	ldr	r2, [r7, #4]
    4a0c:	605a      	str	r2, [r3, #4]

//	f->channel = channel - 2402;
	f->rssi_avg = rssi_avg;
    4a0e:	4b0d      	ldr	r3, [pc, #52]	; (4a44 <enqueue_with_ts+0x70>)
    4a10:	781a      	ldrb	r2, [r3, #0]
    4a12:	697b      	ldr	r3, [r7, #20]
    4a14:	729a      	strb	r2, [r3, #10]
	f->rssi_count = freq_avg;
    4a16:	4b0c      	ldr	r3, [pc, #48]	; (4a48 <enqueue_with_ts+0x74>)
    4a18:	781a      	ldrb	r2, [r3, #0]
    4a1a:	697b      	ldr	r3, [r7, #20]
    4a1c:	72da      	strb	r2, [r3, #11]

	USRLED_SET;
    4a1e:	4b0b      	ldr	r3, [pc, #44]	; (4a4c <enqueue_with_ts+0x78>)
    4a20:	2202      	movs	r2, #2
    4a22:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
	u16 *p3 = (u16 *)f->data;
	u16 *p4 = (u16 *)buf;
	p3[24] = p4[24];
*/
	f->status = status;
    4a24:	4b06      	ldr	r3, [pc, #24]	; (4a40 <enqueue_with_ts+0x6c>)
    4a26:	781b      	ldrb	r3, [r3, #0]
    4a28:	b2da      	uxtb	r2, r3
    4a2a:	697b      	ldr	r3, [r7, #20]
    4a2c:	705a      	strb	r2, [r3, #1]
	status = 0;
    4a2e:	4b04      	ldr	r3, [pc, #16]	; (4a40 <enqueue_with_ts+0x6c>)
    4a30:	2200      	movs	r2, #0
    4a32:	701a      	strb	r2, [r3, #0]

	return 1;
    4a34:	2301      	movs	r3, #1
}
    4a36:	4618      	mov	r0, r3
    4a38:	3718      	adds	r7, #24
    4a3a:	46bd      	mov	sp, r7
    4a3c:	bd80      	pop	{r7, pc}
    4a3e:	bf00      	nop
    4a40:	10000a48 	.word	0x10000a48
    4a44:	10001041 	.word	0x10001041
    4a48:	10000bf9 	.word	0x10000bf9
    4a4c:	2009c038 	.word	0x2009c038

00004a50 <cs_threshold_calc_and_set>:

static void cs_threshold_calc_and_set(void)
{
    4a50:	b580      	push	{r7, lr}
    4a52:	b082      	sub	sp, #8
    4a54:	af00      	add	r7, sp, #0

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    4a56:	4b17      	ldr	r3, [pc, #92]	; (4ab4 <cs_threshold_calc_and_set+0x64>)
    4a58:	781b      	ldrb	r3, [r3, #0]
    4a5a:	2b00      	cmp	r3, #0
    4a5c:	d01d      	beq.n	4a9a <cs_threshold_calc_and_set+0x4a>
    4a5e:	4b16      	ldr	r3, [pc, #88]	; (4ab8 <cs_threshold_calc_and_set+0x68>)
    4a60:	781b      	ldrb	r3, [r3, #0]
    4a62:	b25b      	sxtb	r3, r3
    4a64:	2b00      	cmp	r3, #0
    4a66:	dd18      	ble.n	4a9a <cs_threshold_calc_and_set+0x4a>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
    4a68:	4b14      	ldr	r3, [pc, #80]	; (4abc <cs_threshold_calc_and_set+0x6c>)
    4a6a:	881b      	ldrh	r3, [r3, #0]
    4a6c:	b29b      	uxth	r3, r3
    4a6e:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    4a72:	4a13      	ldr	r2, [pc, #76]	; (4ac0 <cs_threshold_calc_and_set+0x70>)
    4a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4a78:	b21b      	sxth	r3, r3
    4a7a:	3380      	adds	r3, #128	; 0x80
    4a7c:	2b00      	cmp	r3, #0
    4a7e:	da00      	bge.n	4a82 <cs_threshold_calc_and_set+0x32>
    4a80:	33ff      	adds	r3, #255	; 0xff
    4a82:	121b      	asrs	r3, r3, #8
    4a84:	71bb      	strb	r3, [r7, #6]
		level = rssi - 54 + cs_threshold_req;
    4a86:	79ba      	ldrb	r2, [r7, #6]
    4a88:	4b0b      	ldr	r3, [pc, #44]	; (4ab8 <cs_threshold_calc_and_set+0x68>)
    4a8a:	781b      	ldrb	r3, [r3, #0]
    4a8c:	b2db      	uxtb	r3, r3
    4a8e:	4413      	add	r3, r2
    4a90:	b2db      	uxtb	r3, r3
    4a92:	3b36      	subs	r3, #54	; 0x36
    4a94:	b2db      	uxtb	r3, r3
    4a96:	71fb      	strb	r3, [r7, #7]

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    4a98:	e002      	b.n	4aa0 <cs_threshold_calc_and_set+0x50>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
		level = rssi - 54 + cs_threshold_req;
	}
	else {
		level = cs_threshold_req;
    4a9a:	4b07      	ldr	r3, [pc, #28]	; (4ab8 <cs_threshold_calc_and_set+0x68>)
    4a9c:	781b      	ldrb	r3, [r3, #0]
    4a9e:	71fb      	strb	r3, [r7, #7]
	}
	cs_threshold_set(level, CS_SAMPLES_4);
    4aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4aa4:	4618      	mov	r0, r3
    4aa6:	2103      	movs	r1, #3
    4aa8:	f7ff fcc8 	bl	443c <cs_threshold_set>
}
    4aac:	3708      	adds	r7, #8
    4aae:	46bd      	mov	sp, r7
    4ab0:	bd80      	pop	{r7, pc}
    4ab2:	bf00      	nop
    4ab4:	1000097c 	.word	0x1000097c
    4ab8:	1000044c 	.word	0x1000044c
    4abc:	1000049c 	.word	0x1000049c
    4ac0:	100009a0 	.word	0x100009a0

00004ac4 <cs_trigger_enable>:
/* CS comes from CC2400 GIO6, which is LPC P2.2, active low. GPIO
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
static void cs_trigger_enable(void)
{
    4ac4:	b480      	push	{r7}
    4ac6:	af00      	add	r7, sp, #0
	cs_trigger = 0;
    4ac8:	4b09      	ldr	r3, [pc, #36]	; (4af0 <cs_trigger_enable+0x2c>)
    4aca:	2200      	movs	r2, #0
    4acc:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    4ace:	4b09      	ldr	r3, [pc, #36]	; (4af4 <cs_trigger_enable+0x30>)
    4ad0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4ad4:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4ad6:	4b08      	ldr	r3, [pc, #32]	; (4af8 <cs_trigger_enable+0x34>)
    4ad8:	2204      	movs	r2, #4
    4ada:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    4adc:	4a07      	ldr	r2, [pc, #28]	; (4afc <cs_trigger_enable+0x38>)
    4ade:	4b07      	ldr	r3, [pc, #28]	; (4afc <cs_trigger_enable+0x38>)
    4ae0:	681b      	ldr	r3, [r3, #0]
    4ae2:	f043 0304 	orr.w	r3, r3, #4
    4ae6:	6013      	str	r3, [r2, #0]
}
    4ae8:	46bd      	mov	sp, r7
    4aea:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aee:	4770      	bx	lr
    4af0:	100010d4 	.word	0x100010d4
    4af4:	e000e100 	.word	0xe000e100
    4af8:	400280ac 	.word	0x400280ac
    4afc:	400280b4 	.word	0x400280b4

00004b00 <cs_trigger_disable>:

static void cs_trigger_disable(void)
{
    4b00:	b480      	push	{r7}
    4b02:	af00      	add	r7, sp, #0
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    4b04:	4a09      	ldr	r2, [pc, #36]	; (4b2c <cs_trigger_disable+0x2c>)
    4b06:	4b09      	ldr	r3, [pc, #36]	; (4b2c <cs_trigger_disable+0x2c>)
    4b08:	681b      	ldr	r3, [r3, #0]
    4b0a:	f023 0304 	bic.w	r3, r3, #4
    4b0e:	6013      	str	r3, [r2, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4b10:	4b07      	ldr	r3, [pc, #28]	; (4b30 <cs_trigger_disable+0x30>)
    4b12:	2204      	movs	r2, #4
    4b14:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_EINT3;
    4b16:	4b07      	ldr	r3, [pc, #28]	; (4b34 <cs_trigger_disable+0x34>)
    4b18:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4b1c:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    4b1e:	4b06      	ldr	r3, [pc, #24]	; (4b38 <cs_trigger_disable+0x38>)
    4b20:	2200      	movs	r2, #0
    4b22:	701a      	strb	r2, [r3, #0]
}
    4b24:	46bd      	mov	sp, r7
    4b26:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b2a:	4770      	bx	lr
    4b2c:	400280b4 	.word	0x400280b4
    4b30:	400280ac 	.word	0x400280ac
    4b34:	e000e180 	.word	0xe000e180
    4b38:	100010d4 	.word	0x100010d4

00004b3c <vendor_request_handler>:

static int vendor_request_handler(u8 request, u16 *request_params, u8 *data, int *data_len)
{
    4b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b40:	b095      	sub	sp, #84	; 0x54
    4b42:	af00      	add	r7, sp, #0
    4b44:	60b9      	str	r1, [r7, #8]
    4b46:	607a      	str	r2, [r7, #4]
    4b48:	603b      	str	r3, [r7, #0]
    4b4a:	4603      	mov	r3, r0
    4b4c:	73fb      	strb	r3, [r7, #15]
	u64 ac_copy;
	int i; // loop counter
	u32 clock;
	int clock_offset;
	u8 length; // string length
	usb_pkt_rx *p = NULL;
    4b4e:	2300      	movs	r3, #0
    4b50:	647b      	str	r3, [r7, #68]	; 0x44
	u16 reg_val;

	switch (request) {
    4b52:	7bfb      	ldrb	r3, [r7, #15]
    4b54:	2b42      	cmp	r3, #66	; 0x42
    4b56:	f200 854d 	bhi.w	55f4 <vendor_request_handler+0xab8>
    4b5a:	a201      	add	r2, pc, #4	; (adr r2, 4b60 <vendor_request_handler+0x24>)
    4b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4b60:	00004c6d 	.word	0x00004c6d
    4b64:	00004c77 	.word	0x00004c77
    4b68:	000055f5 	.word	0x000055f5
    4b6c:	00004cf9 	.word	0x00004cf9
    4b70:	00004d1b 	.word	0x00004d1b
    4b74:	00004d37 	.word	0x00004d37
    4b78:	00004d59 	.word	0x00004d59
    4b7c:	00004d75 	.word	0x00004d75
    4b80:	00004d97 	.word	0x00004d97
    4b84:	00004db7 	.word	0x00004db7
    4b88:	00004dd9 	.word	0x00004dd9
    4b8c:	00005075 	.word	0x00005075
    4b90:	0000509b 	.word	0x0000509b
    4b94:	00004e4d 	.word	0x00004e4d
    4b98:	00004e71 	.word	0x00004e71
    4b9c:	00004df9 	.word	0x00004df9
    4ba0:	00004f4f 	.word	0x00004f4f
    4ba4:	00004f6f 	.word	0x00004f6f
    4ba8:	00004f87 	.word	0x00004f87
    4bac:	00004fa7 	.word	0x00004fa7
    4bb0:	00004fc3 	.word	0x00004fc3
    4bb4:	0000504f 	.word	0x0000504f
    4bb8:	00005057 	.word	0x00005057
    4bbc:	00005069 	.word	0x00005069
    4bc0:	000050a5 	.word	0x000050a5
    4bc4:	000050c3 	.word	0x000050c3
    4bc8:	000055f5 	.word	0x000055f5
    4bcc:	000050fd 	.word	0x000050fd
    4bd0:	00004fcb 	.word	0x00004fcb
    4bd4:	00004fe7 	.word	0x00004fe7
    4bd8:	0000500f 	.word	0x0000500f
    4bdc:	00005007 	.word	0x00005007
    4be0:	00005017 	.word	0x00005017
    4be4:	0000517f 	.word	0x0000517f
    4be8:	00005159 	.word	0x00005159
    4bec:	000051f3 	.word	0x000051f3
    4bf0:	00005201 	.word	0x00005201
    4bf4:	00005211 	.word	0x00005211
    4bf8:	00005223 	.word	0x00005223
    4bfc:	000052ef 	.word	0x000052ef
    4c00:	00005335 	.word	0x00005335
    4c04:	000053c3 	.word	0x000053c3
    4c08:	00005429 	.word	0x00005429
    4c0c:	0000544b 	.word	0x0000544b
    4c10:	0000547b 	.word	0x0000547b
    4c14:	000055f9 	.word	0x000055f9
    4c18:	000054ad 	.word	0x000054ad
    4c1c:	000054c3 	.word	0x000054c3
    4c20:	000054df 	.word	0x000054df
    4c24:	000054f5 	.word	0x000054f5
    4c28:	00005521 	.word	0x00005521
    4c2c:	00005367 	.word	0x00005367
    4c30:	00005399 	.word	0x00005399
    4c34:	0000553d 	.word	0x0000553d
    4c38:	00005581 	.word	0x00005581
    4c3c:	000051c1 	.word	0x000051c1
    4c40:	00005593 	.word	0x00005593
    4c44:	000055f5 	.word	0x000055f5
    4c48:	0000556b 	.word	0x0000556b
    4c4c:	000055d7 	.word	0x000055d7
    4c50:	000055e3 	.word	0x000055e3
    4c54:	00004ca9 	.word	0x00004ca9
    4c58:	00004ce9 	.word	0x00004ce9
    4c5c:	00004c87 	.word	0x00004c87
    4c60:	00004cc9 	.word	0x00004cc9
    4c64:	00004cb9 	.word	0x00004cb9
    4c68:	00004cd9 	.word	0x00004cd9

	case UBERTOOTH_PING:
		*data_len = 0;
    4c6c:	683b      	ldr	r3, [r7, #0]
    4c6e:	2200      	movs	r2, #0
    4c70:	601a      	str	r2, [r3, #0]
		break;
    4c72:	f000 bcc2 	b.w	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    4c76:	4b77      	ldr	r3, [pc, #476]	; (4e54 <vendor_request_handler+0x318>)
    4c78:	2201      	movs	r2, #1
    4c7a:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4c7c:	683b      	ldr	r3, [r7, #0]
    4c7e:	2200      	movs	r2, #0
    4c80:	601a      	str	r2, [r3, #0]
		break;
    4c82:	f000 bcba 	b.w	55fa <vendor_request_handler+0xabe>
	
	case UBERTOOTH_RX_HOP:
		requested_mode = MODE_RX_HOP;
    4c86:	4b73      	ldr	r3, [pc, #460]	; (4e54 <vendor_request_handler+0x318>)
    4c88:	2210      	movs	r2, #16
    4c8a:	701a      	strb	r2, [r3, #0]
		requested_channel = request_params[0];
    4c8c:	68bb      	ldr	r3, [r7, #8]
    4c8e:	881a      	ldrh	r2, [r3, #0]
    4c90:	4b71      	ldr	r3, [pc, #452]	; (4e58 <vendor_request_handler+0x31c>)
    4c92:	801a      	strh	r2, [r3, #0]
		channel = requested_channel;
    4c94:	4b70      	ldr	r3, [pc, #448]	; (4e58 <vendor_request_handler+0x31c>)
    4c96:	881b      	ldrh	r3, [r3, #0]
    4c98:	b29a      	uxth	r2, r3
    4c9a:	4b70      	ldr	r3, [pc, #448]	; (4e5c <vendor_request_handler+0x320>)
    4c9c:	801a      	strh	r2, [r3, #0]
		*data_len = 0;
    4c9e:	683b      	ldr	r3, [r7, #0]
    4ca0:	2200      	movs	r2, #0
    4ca2:	601a      	str	r2, [r3, #0]
		break;
    4ca4:	f000 bca9 	b.w	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_RX_FREQ:
		requested_mode = MODE_RX_FREQ;
    4ca8:	4b6a      	ldr	r3, [pc, #424]	; (4e54 <vendor_request_handler+0x318>)
    4caa:	220e      	movs	r2, #14
    4cac:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4cae:	683b      	ldr	r3, [r7, #0]
    4cb0:	2200      	movs	r2, #0
    4cb2:	601a      	str	r2, [r3, #0]
		break;
    4cb4:	f000 bca1 	b.w	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_RX_CFO:
		requested_mode = MODE_RX_CFO;
    4cb8:	4b66      	ldr	r3, [pc, #408]	; (4e54 <vendor_request_handler+0x318>)
    4cba:	2212      	movs	r2, #18
    4cbc:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4cbe:	683b      	ldr	r3, [r7, #0]
    4cc0:	2200      	movs	r2, #0
    4cc2:	601a      	str	r2, [r3, #0]
		break;
    4cc4:	f000 bc99 	b.w	55fa <vendor_request_handler+0xabe>


	case UBERTOOTH_RX_RSSI:
		requested_mode = MODE_RX_RSSI;
    4cc8:	4b62      	ldr	r3, [pc, #392]	; (4e54 <vendor_request_handler+0x318>)
    4cca:	2211      	movs	r2, #17
    4ccc:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4cce:	683b      	ldr	r3, [r7, #0]
    4cd0:	2200      	movs	r2, #0
    4cd2:	601a      	str	r2, [r3, #0]
		break;
    4cd4:	f000 bc91 	b.w	55fa <vendor_request_handler+0xabe>
	
	case UBERTOOTH_RX_SNIFF:
		requested_mode = MODE_RX_SNIFF;
    4cd8:	4b5e      	ldr	r3, [pc, #376]	; (4e54 <vendor_request_handler+0x318>)
    4cda:	2213      	movs	r2, #19
    4cdc:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4cde:	683b      	ldr	r3, [r7, #0]
    4ce0:	2200      	movs	r2, #0
    4ce2:	601a      	str	r2, [r3, #0]
		break;
    4ce4:	f000 bc89 	b.w	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_RX_PROPOSED:
		requested_mode = MODE_RX_PROPOSED;
    4ce8:	4b5a      	ldr	r3, [pc, #360]	; (4e54 <vendor_request_handler+0x318>)
    4cea:	220f      	movs	r2, #15
    4cec:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4cee:	683b      	ldr	r3, [r7, #0]
    4cf0:	2200      	movs	r2, #0
    4cf2:	601a      	str	r2, [r3, #0]
		break;
    4cf4:	f000 bc81 	b.w	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    4cf8:	4b59      	ldr	r3, [pc, #356]	; (4e60 <vendor_request_handler+0x324>)
    4cfa:	681b      	ldr	r3, [r3, #0]
    4cfc:	f003 0302 	and.w	r3, r3, #2
    4d00:	2b00      	cmp	r3, #0
    4d02:	bf14      	ite	ne
    4d04:	2301      	movne	r3, #1
    4d06:	2300      	moveq	r3, #0
    4d08:	b2db      	uxtb	r3, r3
    4d0a:	461a      	mov	r2, r3
    4d0c:	687b      	ldr	r3, [r7, #4]
    4d0e:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4d10:	683b      	ldr	r3, [r7, #0]
    4d12:	2201      	movs	r2, #1
    4d14:	601a      	str	r2, [r3, #0]
		break;
    4d16:	f000 bc70 	b.w	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    4d1a:	68bb      	ldr	r3, [r7, #8]
    4d1c:	881b      	ldrh	r3, [r3, #0]
    4d1e:	2b00      	cmp	r3, #0
    4d20:	d004      	beq.n	4d2c <vendor_request_handler+0x1f0>
			USRLED_SET;
    4d22:	4b50      	ldr	r3, [pc, #320]	; (4e64 <vendor_request_handler+0x328>)
    4d24:	2202      	movs	r2, #2
    4d26:	601a      	str	r2, [r3, #0]
		else
			USRLED_CLR;
		break;
    4d28:	f000 bc67 	b.w	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
			USRLED_SET;
		else
			USRLED_CLR;
    4d2c:	4b4e      	ldr	r3, [pc, #312]	; (4e68 <vendor_request_handler+0x32c>)
    4d2e:	2202      	movs	r2, #2
    4d30:	601a      	str	r2, [r3, #0]
		break;
    4d32:	f000 bc62 	b.w	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    4d36:	4b4a      	ldr	r3, [pc, #296]	; (4e60 <vendor_request_handler+0x324>)
    4d38:	681b      	ldr	r3, [r3, #0]
    4d3a:	f003 0310 	and.w	r3, r3, #16
    4d3e:	2b00      	cmp	r3, #0
    4d40:	bf14      	ite	ne
    4d42:	2301      	movne	r3, #1
    4d44:	2300      	moveq	r3, #0
    4d46:	b2db      	uxtb	r3, r3
    4d48:	461a      	mov	r2, r3
    4d4a:	687b      	ldr	r3, [r7, #4]
    4d4c:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4d4e:	683b      	ldr	r3, [r7, #0]
    4d50:	2201      	movs	r2, #1
    4d52:	601a      	str	r2, [r3, #0]
		break;
    4d54:	f000 bc51 	b.w	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    4d58:	68bb      	ldr	r3, [r7, #8]
    4d5a:	881b      	ldrh	r3, [r3, #0]
    4d5c:	2b00      	cmp	r3, #0
    4d5e:	d004      	beq.n	4d6a <vendor_request_handler+0x22e>
			RXLED_SET;
    4d60:	4b40      	ldr	r3, [pc, #256]	; (4e64 <vendor_request_handler+0x328>)
    4d62:	2210      	movs	r2, #16
    4d64:	601a      	str	r2, [r3, #0]
		else
			RXLED_CLR;
		break;
    4d66:	f000 bc48 	b.w	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
			RXLED_SET;
		else
			RXLED_CLR;
    4d6a:	4b3f      	ldr	r3, [pc, #252]	; (4e68 <vendor_request_handler+0x32c>)
    4d6c:	2210      	movs	r2, #16
    4d6e:	601a      	str	r2, [r3, #0]
		break;
    4d70:	f000 bc43 	b.w	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    4d74:	4b3a      	ldr	r3, [pc, #232]	; (4e60 <vendor_request_handler+0x324>)
    4d76:	681b      	ldr	r3, [r3, #0]
    4d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4d7c:	2b00      	cmp	r3, #0
    4d7e:	bf14      	ite	ne
    4d80:	2301      	movne	r3, #1
    4d82:	2300      	moveq	r3, #0
    4d84:	b2db      	uxtb	r3, r3
    4d86:	461a      	mov	r2, r3
    4d88:	687b      	ldr	r3, [r7, #4]
    4d8a:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4d8c:	683b      	ldr	r3, [r7, #0]
    4d8e:	2201      	movs	r2, #1
    4d90:	601a      	str	r2, [r3, #0]
		break;
    4d92:	f000 bc32 	b.w	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    4d96:	68bb      	ldr	r3, [r7, #8]
    4d98:	881b      	ldrh	r3, [r3, #0]
    4d9a:	2b00      	cmp	r3, #0
    4d9c:	d005      	beq.n	4daa <vendor_request_handler+0x26e>
			TXLED_SET;
    4d9e:	4b31      	ldr	r3, [pc, #196]	; (4e64 <vendor_request_handler+0x328>)
    4da0:	f44f 7280 	mov.w	r2, #256	; 0x100
    4da4:	601a      	str	r2, [r3, #0]
		else
			TXLED_CLR;
		break;
    4da6:	f000 bc28 	b.w	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
			TXLED_SET;
		else
			TXLED_CLR;
    4daa:	4b2f      	ldr	r3, [pc, #188]	; (4e68 <vendor_request_handler+0x32c>)
    4dac:	f44f 7280 	mov.w	r2, #256	; 0x100
    4db0:	601a      	str	r2, [r3, #0]
		break;
    4db2:	f000 bc22 	b.w	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    4db6:	4b2a      	ldr	r3, [pc, #168]	; (4e60 <vendor_request_handler+0x324>)
    4db8:	681b      	ldr	r3, [r3, #0]
    4dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4dbe:	2b00      	cmp	r3, #0
    4dc0:	bf14      	ite	ne
    4dc2:	2301      	movne	r3, #1
    4dc4:	2300      	moveq	r3, #0
    4dc6:	b2db      	uxtb	r3, r3
    4dc8:	461a      	mov	r2, r3
    4dca:	687b      	ldr	r3, [r7, #4]
    4dcc:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4dce:	683b      	ldr	r3, [r7, #0]
    4dd0:	2201      	movs	r2, #1
    4dd2:	601a      	str	r2, [r3, #0]
		break;
    4dd4:	f000 bc11 	b.w	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    4dd8:	68bb      	ldr	r3, [r7, #8]
    4dda:	881b      	ldrh	r3, [r3, #0]
    4ddc:	2b00      	cmp	r3, #0
    4dde:	d005      	beq.n	4dec <vendor_request_handler+0x2b0>
			CC1V8_SET;
    4de0:	4b20      	ldr	r3, [pc, #128]	; (4e64 <vendor_request_handler+0x328>)
    4de2:	f44f 7200 	mov.w	r2, #512	; 0x200
    4de6:	601a      	str	r2, [r3, #0]
		else
			CC1V8_CLR;
		break;
    4de8:	f000 bc07 	b.w	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
			CC1V8_SET;
		else
			CC1V8_CLR;
    4dec:	4b1e      	ldr	r3, [pc, #120]	; (4e68 <vendor_request_handler+0x32c>)
    4dee:	f44f 7200 	mov.w	r2, #512	; 0x200
    4df2:	601a      	str	r2, [r3, #0]
		break;
    4df4:	f000 bc01 	b.w	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_GET_PARTNUM:
		command[0] = 54; /* read part number */
    4df8:	2336      	movs	r3, #54	; 0x36
    4dfa:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4dfc:	4b1b      	ldr	r3, [pc, #108]	; (4e6c <vendor_request_handler+0x330>)
    4dfe:	681b      	ldr	r3, [r3, #0]
    4e00:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4e04:	f107 0210 	add.w	r2, r7, #16
    4e08:	4608      	mov	r0, r1
    4e0a:	4611      	mov	r1, r2
    4e0c:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4e0e:	693b      	ldr	r3, [r7, #16]
    4e10:	b2da      	uxtb	r2, r3
    4e12:	687b      	ldr	r3, [r7, #4]
    4e14:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4e16:	687b      	ldr	r3, [r7, #4]
    4e18:	3301      	adds	r3, #1
    4e1a:	697a      	ldr	r2, [r7, #20]
    4e1c:	b2d2      	uxtb	r2, r2
    4e1e:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4e20:	687b      	ldr	r3, [r7, #4]
    4e22:	3302      	adds	r3, #2
    4e24:	697a      	ldr	r2, [r7, #20]
    4e26:	0a12      	lsrs	r2, r2, #8
    4e28:	b2d2      	uxtb	r2, r2
    4e2a:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4e2c:	687b      	ldr	r3, [r7, #4]
    4e2e:	3303      	adds	r3, #3
    4e30:	697a      	ldr	r2, [r7, #20]
    4e32:	0c12      	lsrs	r2, r2, #16
    4e34:	b2d2      	uxtb	r2, r2
    4e36:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4e38:	687b      	ldr	r3, [r7, #4]
    4e3a:	3304      	adds	r3, #4
    4e3c:	697a      	ldr	r2, [r7, #20]
    4e3e:	0e12      	lsrs	r2, r2, #24
    4e40:	b2d2      	uxtb	r2, r2
    4e42:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4e44:	683b      	ldr	r3, [r7, #0]
    4e46:	2205      	movs	r2, #5
    4e48:	601a      	str	r2, [r3, #0]
		break;
    4e4a:	e3d6      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
    4e4c:	4b01      	ldr	r3, [pc, #4]	; (4e54 <vendor_request_handler+0x318>)
    4e4e:	220b      	movs	r2, #11
    4e50:	701a      	strb	r2, [r3, #0]
		break;
    4e52:	e3d2      	b.n	55fa <vendor_request_handler+0xabe>
    4e54:	10000a3f 	.word	0x10000a3f
    4e58:	10000a44 	.word	0x10000a44
    4e5c:	1000049c 	.word	0x1000049c
    4e60:	2009c034 	.word	0x2009c034
    4e64:	2009c038 	.word	0x2009c038
    4e68:	2009c03c 	.word	0x2009c03c
    4e6c:	10000448 	.word	0x10000448

	case UBERTOOTH_GET_SERIAL:
		command[0] = 58; /* read device serial number */
    4e70:	233a      	movs	r3, #58	; 0x3a
    4e72:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4e74:	4b96      	ldr	r3, [pc, #600]	; (50d0 <vendor_request_handler+0x594>)
    4e76:	681b      	ldr	r3, [r3, #0]
    4e78:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4e7c:	f107 0210 	add.w	r2, r7, #16
    4e80:	4608      	mov	r0, r1
    4e82:	4611      	mov	r1, r2
    4e84:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4e86:	693b      	ldr	r3, [r7, #16]
    4e88:	b2da      	uxtb	r2, r3
    4e8a:	687b      	ldr	r3, [r7, #4]
    4e8c:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4e8e:	687b      	ldr	r3, [r7, #4]
    4e90:	3301      	adds	r3, #1
    4e92:	697a      	ldr	r2, [r7, #20]
    4e94:	b2d2      	uxtb	r2, r2
    4e96:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4e98:	687b      	ldr	r3, [r7, #4]
    4e9a:	3302      	adds	r3, #2
    4e9c:	697a      	ldr	r2, [r7, #20]
    4e9e:	0a12      	lsrs	r2, r2, #8
    4ea0:	b2d2      	uxtb	r2, r2
    4ea2:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4ea4:	687b      	ldr	r3, [r7, #4]
    4ea6:	3303      	adds	r3, #3
    4ea8:	697a      	ldr	r2, [r7, #20]
    4eaa:	0c12      	lsrs	r2, r2, #16
    4eac:	b2d2      	uxtb	r2, r2
    4eae:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4eb0:	687b      	ldr	r3, [r7, #4]
    4eb2:	3304      	adds	r3, #4
    4eb4:	697a      	ldr	r2, [r7, #20]
    4eb6:	0e12      	lsrs	r2, r2, #24
    4eb8:	b2d2      	uxtb	r2, r2
    4eba:	701a      	strb	r2, [r3, #0]
		data[5] = result[2] & 0xFF;
    4ebc:	687b      	ldr	r3, [r7, #4]
    4ebe:	3305      	adds	r3, #5
    4ec0:	69ba      	ldr	r2, [r7, #24]
    4ec2:	b2d2      	uxtb	r2, r2
    4ec4:	701a      	strb	r2, [r3, #0]
		data[6] = (result[2] >> 8) & 0xFF;
    4ec6:	687b      	ldr	r3, [r7, #4]
    4ec8:	3306      	adds	r3, #6
    4eca:	69ba      	ldr	r2, [r7, #24]
    4ecc:	0a12      	lsrs	r2, r2, #8
    4ece:	b2d2      	uxtb	r2, r2
    4ed0:	701a      	strb	r2, [r3, #0]
		data[7] = (result[2] >> 16) & 0xFF;
    4ed2:	687b      	ldr	r3, [r7, #4]
    4ed4:	3307      	adds	r3, #7
    4ed6:	69ba      	ldr	r2, [r7, #24]
    4ed8:	0c12      	lsrs	r2, r2, #16
    4eda:	b2d2      	uxtb	r2, r2
    4edc:	701a      	strb	r2, [r3, #0]
		data[8] = (result[2] >> 24) & 0xFF;
    4ede:	687b      	ldr	r3, [r7, #4]
    4ee0:	3308      	adds	r3, #8
    4ee2:	69ba      	ldr	r2, [r7, #24]
    4ee4:	0e12      	lsrs	r2, r2, #24
    4ee6:	b2d2      	uxtb	r2, r2
    4ee8:	701a      	strb	r2, [r3, #0]
		data[9] = result[3] & 0xFF;
    4eea:	687b      	ldr	r3, [r7, #4]
    4eec:	3309      	adds	r3, #9
    4eee:	69fa      	ldr	r2, [r7, #28]
    4ef0:	b2d2      	uxtb	r2, r2
    4ef2:	701a      	strb	r2, [r3, #0]
		data[10] = (result[3] >> 8) & 0xFF;
    4ef4:	687b      	ldr	r3, [r7, #4]
    4ef6:	330a      	adds	r3, #10
    4ef8:	69fa      	ldr	r2, [r7, #28]
    4efa:	0a12      	lsrs	r2, r2, #8
    4efc:	b2d2      	uxtb	r2, r2
    4efe:	701a      	strb	r2, [r3, #0]
		data[11] = (result[3] >> 16) & 0xFF;
    4f00:	687b      	ldr	r3, [r7, #4]
    4f02:	330b      	adds	r3, #11
    4f04:	69fa      	ldr	r2, [r7, #28]
    4f06:	0c12      	lsrs	r2, r2, #16
    4f08:	b2d2      	uxtb	r2, r2
    4f0a:	701a      	strb	r2, [r3, #0]
		data[12] = (result[3] >> 24) & 0xFF;
    4f0c:	687b      	ldr	r3, [r7, #4]
    4f0e:	330c      	adds	r3, #12
    4f10:	69fa      	ldr	r2, [r7, #28]
    4f12:	0e12      	lsrs	r2, r2, #24
    4f14:	b2d2      	uxtb	r2, r2
    4f16:	701a      	strb	r2, [r3, #0]
		data[13] = result[4] & 0xFF;
    4f18:	687b      	ldr	r3, [r7, #4]
    4f1a:	330d      	adds	r3, #13
    4f1c:	6a3a      	ldr	r2, [r7, #32]
    4f1e:	b2d2      	uxtb	r2, r2
    4f20:	701a      	strb	r2, [r3, #0]
		data[14] = (result[4] >> 8) & 0xFF;
    4f22:	687b      	ldr	r3, [r7, #4]
    4f24:	330e      	adds	r3, #14
    4f26:	6a3a      	ldr	r2, [r7, #32]
    4f28:	0a12      	lsrs	r2, r2, #8
    4f2a:	b2d2      	uxtb	r2, r2
    4f2c:	701a      	strb	r2, [r3, #0]
		data[15] = (result[4] >> 16) & 0xFF;
    4f2e:	687b      	ldr	r3, [r7, #4]
    4f30:	330f      	adds	r3, #15
    4f32:	6a3a      	ldr	r2, [r7, #32]
    4f34:	0c12      	lsrs	r2, r2, #16
    4f36:	b2d2      	uxtb	r2, r2
    4f38:	701a      	strb	r2, [r3, #0]
		data[16] = (result[4] >> 24) & 0xFF;
    4f3a:	687b      	ldr	r3, [r7, #4]
    4f3c:	3310      	adds	r3, #16
    4f3e:	6a3a      	ldr	r2, [r7, #32]
    4f40:	0e12      	lsrs	r2, r2, #24
    4f42:	b2d2      	uxtb	r2, r2
    4f44:	701a      	strb	r2, [r3, #0]
		*data_len = 17;
    4f46:	683b      	ldr	r3, [r7, #0]
    4f48:	2211      	movs	r2, #17
    4f4a:	601a      	str	r2, [r3, #0]
		break;
    4f4c:	e355      	b.n	55fa <vendor_request_handler+0xabe>

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    4f4e:	4b61      	ldr	r3, [pc, #388]	; (50d4 <vendor_request_handler+0x598>)
    4f50:	681b      	ldr	r3, [r3, #0]
    4f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4f56:	2b00      	cmp	r3, #0
    4f58:	bf14      	ite	ne
    4f5a:	2301      	movne	r3, #1
    4f5c:	2300      	moveq	r3, #0
    4f5e:	b2db      	uxtb	r3, r3
    4f60:	461a      	mov	r2, r3
    4f62:	687b      	ldr	r3, [r7, #4]
    4f64:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4f66:	683b      	ldr	r3, [r7, #0]
    4f68:	2201      	movs	r2, #1
    4f6a:	601a      	str	r2, [r3, #0]
		break;
    4f6c:	e345      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    4f6e:	68bb      	ldr	r3, [r7, #8]
    4f70:	881b      	ldrh	r3, [r3, #0]
    4f72:	2b00      	cmp	r3, #0
    4f74:	d003      	beq.n	4f7e <vendor_request_handler+0x442>
			PAEN_SET;
    4f76:	4b58      	ldr	r3, [pc, #352]	; (50d8 <vendor_request_handler+0x59c>)
    4f78:	2280      	movs	r2, #128	; 0x80
    4f7a:	601a      	str	r2, [r3, #0]
		else
			PAEN_CLR;
		break;
    4f7c:	e33d      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
			PAEN_SET;
		else
			PAEN_CLR;
    4f7e:	4b57      	ldr	r3, [pc, #348]	; (50dc <vendor_request_handler+0x5a0>)
    4f80:	2280      	movs	r2, #128	; 0x80
    4f82:	601a      	str	r2, [r3, #0]
		break;
    4f84:	e339      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    4f86:	4b53      	ldr	r3, [pc, #332]	; (50d4 <vendor_request_handler+0x598>)
    4f88:	681b      	ldr	r3, [r3, #0]
    4f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4f8e:	2b00      	cmp	r3, #0
    4f90:	bf14      	ite	ne
    4f92:	2301      	movne	r3, #1
    4f94:	2300      	moveq	r3, #0
    4f96:	b2db      	uxtb	r3, r3
    4f98:	461a      	mov	r2, r3
    4f9a:	687b      	ldr	r3, [r7, #4]
    4f9c:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4f9e:	683b      	ldr	r3, [r7, #0]
    4fa0:	2201      	movs	r2, #1
    4fa2:	601a      	str	r2, [r3, #0]
		break;
    4fa4:	e329      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    4fa6:	68bb      	ldr	r3, [r7, #8]
    4fa8:	881b      	ldrh	r3, [r3, #0]
    4faa:	2b00      	cmp	r3, #0
    4fac:	d004      	beq.n	4fb8 <vendor_request_handler+0x47c>
			HGM_SET;
    4fae:	4b4a      	ldr	r3, [pc, #296]	; (50d8 <vendor_request_handler+0x59c>)
    4fb0:	f44f 7280 	mov.w	r2, #256	; 0x100
    4fb4:	601a      	str	r2, [r3, #0]
		else
			HGM_CLR;
		break;
    4fb6:	e320      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
			HGM_SET;
		else
			HGM_CLR;
    4fb8:	4b48      	ldr	r3, [pc, #288]	; (50dc <vendor_request_handler+0x5a0>)
    4fba:	f44f 7280 	mov.w	r2, #256	; 0x100
    4fbe:	601a      	str	r2, [r3, #0]
		break;
    4fc0:	e31b      	b.n	55fa <vendor_request_handler+0xabe>
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    4fc2:	4b47      	ldr	r3, [pc, #284]	; (50e0 <vendor_request_handler+0x5a4>)
    4fc4:	2203      	movs	r2, #3
    4fc6:	701a      	strb	r2, [r3, #0]
		break;
    4fc8:	e317      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    4fca:	2005      	movs	r0, #5
    4fcc:	f006 fa7c 	bl	b4c8 <cc2400_get>
    4fd0:	4603      	mov	r3, r0
    4fd2:	b2db      	uxtb	r3, r3
    4fd4:	f003 0307 	and.w	r3, r3, #7
    4fd8:	b2da      	uxtb	r2, r3
    4fda:	687b      	ldr	r3, [r7, #4]
    4fdc:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4fde:	683b      	ldr	r3, [r7, #0]
    4fe0:	2201      	movs	r2, #1
    4fe2:	601a      	str	r2, [r3, #0]
		break;
    4fe4:	e309      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    4fe6:	68bb      	ldr	r3, [r7, #8]
    4fe8:	881b      	ldrh	r3, [r3, #0]
    4fea:	2b07      	cmp	r3, #7
    4fec:	d809      	bhi.n	5002 <vendor_request_handler+0x4c6>
			cc2400_set(FREND, 8 | request_params[0]);
    4fee:	68bb      	ldr	r3, [r7, #8]
    4ff0:	881b      	ldrh	r3, [r3, #0]
    4ff2:	f043 0308 	orr.w	r3, r3, #8
    4ff6:	b29b      	uxth	r3, r3
    4ff8:	2005      	movs	r0, #5
    4ffa:	4619      	mov	r1, r3
    4ffc:	f006 fa7a 	bl	b4f4 <cc2400_set>
		} else {
			return 0;
		}
		break;
    5000:	e2fb      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    5002:	2300      	movs	r3, #0
    5004:	e2fa      	b.n	55fc <vendor_request_handler+0xac0>
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    5006:	4b36      	ldr	r3, [pc, #216]	; (50e0 <vendor_request_handler+0x5a4>)
    5008:	2205      	movs	r2, #5
    500a:	701a      	strb	r2, [r3, #0]
		break;
    500c:	e2f5      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    500e:	4b34      	ldr	r3, [pc, #208]	; (50e0 <vendor_request_handler+0x5a4>)
    5010:	2206      	movs	r2, #6
    5012:	701a      	strb	r2, [r3, #0]
		break;
    5014:	e2f1      	b.n	55fa <vendor_request_handler+0xabe>
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    5016:	4b33      	ldr	r3, [pc, #204]	; (50e4 <vendor_request_handler+0x5a8>)
    5018:	781a      	ldrb	r2, [r3, #0]
    501a:	687b      	ldr	r3, [r7, #4]
    501c:	701a      	strb	r2, [r3, #0]
		data[1] = rr.request_pa;
    501e:	687b      	ldr	r3, [r7, #4]
    5020:	3301      	adds	r3, #1
    5022:	4a30      	ldr	r2, [pc, #192]	; (50e4 <vendor_request_handler+0x5a8>)
    5024:	7852      	ldrb	r2, [r2, #1]
    5026:	701a      	strb	r2, [r3, #0]
		data[2] = rr.request_num;
    5028:	687b      	ldr	r3, [r7, #4]
    502a:	3302      	adds	r3, #2
    502c:	4a2d      	ldr	r2, [pc, #180]	; (50e4 <vendor_request_handler+0x5a8>)
    502e:	7892      	ldrb	r2, [r2, #2]
    5030:	701a      	strb	r2, [r3, #0]
		data[3] = rr.reply_pa;
    5032:	687b      	ldr	r3, [r7, #4]
    5034:	3303      	adds	r3, #3
    5036:	4a2b      	ldr	r2, [pc, #172]	; (50e4 <vendor_request_handler+0x5a8>)
    5038:	78d2      	ldrb	r2, [r2, #3]
    503a:	701a      	strb	r2, [r3, #0]
		data[4] = rr.reply_num;
    503c:	687b      	ldr	r3, [r7, #4]
    503e:	3304      	adds	r3, #4
    5040:	4a28      	ldr	r2, [pc, #160]	; (50e4 <vendor_request_handler+0x5a8>)
    5042:	7912      	ldrb	r2, [r2, #4]
    5044:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    5046:	683b      	ldr	r3, [r7, #0]
    5048:	2205      	movs	r2, #5
    504a:	601a      	str	r2, [r3, #0]
		break;
    504c:	e2d5      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    504e:	4b24      	ldr	r3, [pc, #144]	; (50e0 <vendor_request_handler+0x5a4>)
    5050:	2200      	movs	r2, #0
    5052:	701a      	strb	r2, [r3, #0]
		break;
    5054:	e2d1      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    5056:	4b24      	ldr	r3, [pc, #144]	; (50e8 <vendor_request_handler+0x5ac>)
    5058:	781b      	ldrb	r3, [r3, #0]
    505a:	b2da      	uxtb	r2, r3
    505c:	687b      	ldr	r3, [r7, #4]
    505e:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    5060:	683b      	ldr	r3, [r7, #0]
    5062:	2201      	movs	r2, #1
    5064:	601a      	str	r2, [r3, #0]
		break;
    5066:	e2c8      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    5068:	68bb      	ldr	r3, [r7, #8]
    506a:	881b      	ldrh	r3, [r3, #0]
    506c:	b2da      	uxtb	r2, r3
    506e:	4b1e      	ldr	r3, [pc, #120]	; (50e8 <vendor_request_handler+0x5ac>)
    5070:	701a      	strb	r2, [r3, #0]
		break;
    5072:	e2c2      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    5074:	4b1d      	ldr	r3, [pc, #116]	; (50ec <vendor_request_handler+0x5b0>)
    5076:	881b      	ldrh	r3, [r3, #0]
    5078:	b29b      	uxth	r3, r3
    507a:	b2da      	uxtb	r2, r3
    507c:	687b      	ldr	r3, [r7, #4]
    507e:	701a      	strb	r2, [r3, #0]
		data[1] = (channel >> 8) & 0xFF;
    5080:	687b      	ldr	r3, [r7, #4]
    5082:	3301      	adds	r3, #1
    5084:	4a19      	ldr	r2, [pc, #100]	; (50ec <vendor_request_handler+0x5b0>)
    5086:	8812      	ldrh	r2, [r2, #0]
    5088:	b292      	uxth	r2, r2
    508a:	0a12      	lsrs	r2, r2, #8
    508c:	b292      	uxth	r2, r2
    508e:	b2d2      	uxtb	r2, r2
    5090:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    5092:	683b      	ldr	r3, [r7, #0]
    5094:	2202      	movs	r2, #2
    5096:	601a      	str	r2, [r3, #0]
		break;
    5098:	e2af      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    509a:	68bb      	ldr	r3, [r7, #8]
    509c:	881a      	ldrh	r2, [r3, #0]
    509e:	4b14      	ldr	r3, [pc, #80]	; (50f0 <vendor_request_handler+0x5b4>)
    50a0:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;

			cs_threshold_calc_and_set();
		}
	*/
		break;
    50a2:	e2aa      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_ISP:
		command[0] = 57;
    50a4:	2339      	movs	r3, #57	; 0x39
    50a6:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    50a8:	4b09      	ldr	r3, [pc, #36]	; (50d0 <vendor_request_handler+0x594>)
    50aa:	681b      	ldr	r3, [r3, #0]
    50ac:	f107 0124 	add.w	r1, r7, #36	; 0x24
    50b0:	f107 0210 	add.w	r2, r7, #16
    50b4:	4608      	mov	r0, r1
    50b6:	4611      	mov	r1, r2
    50b8:	4798      	blx	r3
		*data_len = 0; /* should never return */
    50ba:	683b      	ldr	r3, [r7, #0]
    50bc:	2200      	movs	r2, #0
    50be:	601a      	str	r2, [r3, #0]
		break;
    50c0:	e29b      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    50c2:	4b0c      	ldr	r3, [pc, #48]	; (50f4 <vendor_request_handler+0x5b8>)
    50c4:	4a0c      	ldr	r2, [pc, #48]	; (50f8 <vendor_request_handler+0x5bc>)
    50c6:	601a      	str	r2, [r3, #0]
		reset();
    50c8:	f006 fbd0 	bl	b86c <reset>
		break;
    50cc:	e295      	b.n	55fa <vendor_request_handler+0xabe>
    50ce:	bf00      	nop
    50d0:	10000448 	.word	0x10000448
    50d4:	2009c054 	.word	0x2009c054
    50d8:	2009c058 	.word	0x2009c058
    50dc:	2009c05c 	.word	0x2009c05c
    50e0:	10000a3f 	.word	0x10000a3f
    50e4:	10001094 	.word	0x10001094
    50e8:	10000a42 	.word	0x10000a42
    50ec:	1000049c 	.word	0x1000049c
    50f0:	10000a44 	.word	0x10000a44
    50f4:	1000001c 	.word	0x1000001c
    50f8:	4305bb21 	.word	0x4305bb21

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    50fc:	68bb      	ldr	r3, [r7, #8]
    50fe:	881b      	ldrh	r3, [r3, #0]
    5100:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    5104:	d917      	bls.n	5136 <vendor_request_handler+0x5fa>
    5106:	68bb      	ldr	r3, [r7, #8]
    5108:	881b      	ldrh	r3, [r3, #0]
    510a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    510e:	d812      	bhi.n	5136 <vendor_request_handler+0x5fa>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    5110:	68bb      	ldr	r3, [r7, #8]
    5112:	3302      	adds	r3, #2
    5114:	881b      	ldrh	r3, [r3, #0]
		bootloader_ctrl = DFU_MODE;
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    5116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    511a:	d90c      	bls.n	5136 <vendor_request_handler+0x5fa>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    511c:	68bb      	ldr	r3, [r7, #8]
    511e:	3302      	adds	r3, #2
    5120:	881b      	ldrh	r3, [r3, #0]
    5122:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    5126:	d806      	bhi.n	5136 <vendor_request_handler+0x5fa>
				request_params[1] < request_params[0])
    5128:	68bb      	ldr	r3, [r7, #8]
    512a:	3302      	adds	r3, #2
    512c:	881a      	ldrh	r2, [r3, #0]
    512e:	68bb      	ldr	r3, [r7, #8]
    5130:	881b      	ldrh	r3, [r3, #0]
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
				request_params[1] < 2049 || request_params[1] > 3072 ||
    5132:	429a      	cmp	r2, r3
    5134:	d201      	bcs.n	513a <vendor_request_handler+0x5fe>
				request_params[1] < request_params[0])
			return 0;
    5136:	2300      	movs	r3, #0
    5138:	e260      	b.n	55fc <vendor_request_handler+0xac0>
		low_freq = request_params[0];
    513a:	68bb      	ldr	r3, [r7, #8]
    513c:	881a      	ldrh	r2, [r3, #0]
    513e:	4ba4      	ldr	r3, [pc, #656]	; (53d0 <vendor_request_handler+0x894>)
    5140:	801a      	strh	r2, [r3, #0]
		high_freq = request_params[1];
    5142:	68bb      	ldr	r3, [r7, #8]
    5144:	885a      	ldrh	r2, [r3, #2]
    5146:	4ba3      	ldr	r3, [pc, #652]	; (53d4 <vendor_request_handler+0x898>)
    5148:	801a      	strh	r2, [r3, #0]
		requested_mode = MODE_SPECAN;
    514a:	4ba3      	ldr	r3, [pc, #652]	; (53d8 <vendor_request_handler+0x89c>)
    514c:	2204      	movs	r2, #4
    514e:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    5150:	683b      	ldr	r3, [r7, #0]
    5152:	2200      	movs	r2, #0
    5154:	601a      	str	r2, [r3, #0]
		break;
    5156:	e250      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    5158:	68bb      	ldr	r3, [r7, #8]
    515a:	881b      	ldrh	r3, [r3, #0]
    515c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5160:	d901      	bls.n	5166 <vendor_request_handler+0x62a>
			return 0;
    5162:	2300      	movs	r3, #0
    5164:	e24a      	b.n	55fc <vendor_request_handler+0xac0>
		rssi_threshold = (int8_t)request_params[0];
    5166:	68bb      	ldr	r3, [r7, #8]
    5168:	881b      	ldrh	r3, [r3, #0]
    516a:	b2da      	uxtb	r2, r3
    516c:	4b9b      	ldr	r3, [pc, #620]	; (53dc <vendor_request_handler+0x8a0>)
    516e:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_LED_SPECAN;
    5170:	4b99      	ldr	r3, [pc, #612]	; (53d8 <vendor_request_handler+0x89c>)
    5172:	2207      	movs	r2, #7
    5174:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    5176:	683b      	ldr	r3, [r7, #0]
    5178:	2200      	movs	r2, #0
    517a:	601a      	str	r2, [r3, #0]
		break;
    517c:	e23d      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    517e:	687b      	ldr	r3, [r7, #4]
    5180:	2200      	movs	r2, #0
    5182:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
    5184:	687b      	ldr	r3, [r7, #4]
    5186:	3301      	adds	r3, #1
    5188:	2200      	movs	r2, #0
    518a:	701a      	strb	r2, [r3, #0]

		length = (u8)strlen(GIT_REVISION);
    518c:	4894      	ldr	r0, [pc, #592]	; (53e0 <vendor_request_handler+0x8a4>)
    518e:	f007 ffeb 	bl	d168 <strlen>
    5192:	4603      	mov	r3, r0
    5194:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[2] = length;
    5198:	687b      	ldr	r3, [r7, #4]
    519a:	3302      	adds	r3, #2
    519c:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    51a0:	701a      	strb	r2, [r3, #0]

		memcpy(&data[3], GIT_REVISION, length);
    51a2:	687b      	ldr	r3, [r7, #4]
    51a4:	1cda      	adds	r2, r3, #3
    51a6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    51aa:	4610      	mov	r0, r2
    51ac:	498c      	ldr	r1, [pc, #560]	; (53e0 <vendor_request_handler+0x8a4>)
    51ae:	461a      	mov	r2, r3
    51b0:	f007 ff64 	bl	d07c <memcpy>

		*data_len = 2 + 1 + length;
    51b4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    51b8:	1cda      	adds	r2, r3, #3
    51ba:	683b      	ldr	r3, [r7, #0]
    51bc:	601a      	str	r2, [r3, #0]
		break;
    51be:	e21c      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    51c0:	4888      	ldr	r0, [pc, #544]	; (53e4 <vendor_request_handler+0x8a8>)
    51c2:	f007 ffd1 	bl	d168 <strlen>
    51c6:	4603      	mov	r3, r0
    51c8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[0] = length;
    51cc:	687b      	ldr	r3, [r7, #4]
    51ce:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    51d2:	701a      	strb	r2, [r3, #0]
		memcpy(&data[1], compile_info, length);
    51d4:	687b      	ldr	r3, [r7, #4]
    51d6:	1c5a      	adds	r2, r3, #1
    51d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    51dc:	4610      	mov	r0, r2
    51de:	4981      	ldr	r1, [pc, #516]	; (53e4 <vendor_request_handler+0x8a8>)
    51e0:	461a      	mov	r2, r3
    51e2:	f007 ff4b 	bl	d07c <memcpy>
		*data_len = 1 + length;
    51e6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    51ea:	1c5a      	adds	r2, r3, #1
    51ec:	683b      	ldr	r3, [r7, #0]
    51ee:	601a      	str	r2, [r3, #0]
		break;
    51f0:	e203      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    51f2:	687b      	ldr	r3, [r7, #4]
    51f4:	2201      	movs	r2, #1
    51f6:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    51f8:	683b      	ldr	r3, [r7, #0]
    51fa:	2201      	movs	r2, #1
    51fc:	601a      	str	r2, [r3, #0]
		break;
    51fe:	e1fc      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    5200:	68bb      	ldr	r3, [r7, #8]
    5202:	881b      	ldrh	r3, [r3, #0]
    5204:	b2da      	uxtb	r2, r3
    5206:	4b78      	ldr	r3, [pc, #480]	; (53e8 <vendor_request_handler+0x8ac>)
    5208:	701a      	strb	r2, [r3, #0]
		cs_threshold_calc_and_set();
    520a:	f7ff fc21 	bl	4a50 <cs_threshold_calc_and_set>
		break;
    520e:	e1f4      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    5210:	4b75      	ldr	r3, [pc, #468]	; (53e8 <vendor_request_handler+0x8ac>)
    5212:	781b      	ldrb	r3, [r3, #0]
    5214:	b2da      	uxtb	r2, r3
    5216:	687b      	ldr	r3, [r7, #4]
    5218:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    521a:	683b      	ldr	r3, [r7, #0]
    521c:	2201      	movs	r2, #1
    521e:	601a      	str	r2, [r3, #0]
		break;
    5220:	e1eb      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    5222:	4972      	ldr	r1, [pc, #456]	; (53ec <vendor_request_handler+0x8b0>)
    5224:	f04f 0200 	mov.w	r2, #0
    5228:	f04f 0300 	mov.w	r3, #0
    522c:	e9c1 2300 	strd	r2, r3, [r1]
		target.access_code = 0;
    5230:	496e      	ldr	r1, [pc, #440]	; (53ec <vendor_request_handler+0x8b0>)
    5232:	f04f 0200 	mov.w	r2, #0
    5236:	f04f 0300 	mov.w	r3, #0
    523a:	e9c1 2302 	strd	r2, r3, [r1, #8]
		for(i=0; i < 8; i++) {
    523e:	2300      	movs	r3, #0
    5240:	64fb      	str	r3, [r7, #76]	; 0x4c
    5242:	e025      	b.n	5290 <vendor_request_handler+0x754>
			target.address |= (uint64_t)data[i] << 8*i;
    5244:	4b69      	ldr	r3, [pc, #420]	; (53ec <vendor_request_handler+0x8b0>)
    5246:	e9d3 ab00 	ldrd	sl, fp, [r3]
    524a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    524c:	687a      	ldr	r2, [r7, #4]
    524e:	4413      	add	r3, r2
    5250:	781b      	ldrb	r3, [r3, #0]
    5252:	b2da      	uxtb	r2, r3
    5254:	f04f 0300 	mov.w	r3, #0
    5258:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    525a:	00c9      	lsls	r1, r1, #3
    525c:	f1a1 0620 	sub.w	r6, r1, #32
    5260:	f1c1 0020 	rsb	r0, r1, #32
    5264:	fa03 f901 	lsl.w	r9, r3, r1
    5268:	fa02 f606 	lsl.w	r6, r2, r6
    526c:	ea49 0906 	orr.w	r9, r9, r6
    5270:	fa22 f000 	lsr.w	r0, r2, r0
    5274:	ea49 0900 	orr.w	r9, r9, r0
    5278:	fa02 f801 	lsl.w	r8, r2, r1
    527c:	ea4a 0208 	orr.w	r2, sl, r8
    5280:	ea4b 0309 	orr.w	r3, fp, r9
    5284:	4959      	ldr	r1, [pc, #356]	; (53ec <vendor_request_handler+0x8b0>)
    5286:	e9c1 2300 	strd	r2, r3, [r1]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
    528a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    528c:	3301      	adds	r3, #1
    528e:	64fb      	str	r3, [r7, #76]	; 0x4c
    5290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5292:	2b07      	cmp	r3, #7
    5294:	ddd6      	ble.n	5244 <vendor_request_handler+0x708>
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    5296:	2300      	movs	r3, #0
    5298:	64fb      	str	r3, [r7, #76]	; 0x4c
    529a:	e024      	b.n	52e6 <vendor_request_handler+0x7aa>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
    529c:	4b53      	ldr	r3, [pc, #332]	; (53ec <vendor_request_handler+0x8b0>)
    529e:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
    52a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    52a4:	3308      	adds	r3, #8
    52a6:	687a      	ldr	r2, [r7, #4]
    52a8:	4413      	add	r3, r2
    52aa:	781b      	ldrb	r3, [r3, #0]
    52ac:	b2da      	uxtb	r2, r3
    52ae:	f04f 0300 	mov.w	r3, #0
    52b2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    52b4:	00c9      	lsls	r1, r1, #3
    52b6:	f1a1 0620 	sub.w	r6, r1, #32
    52ba:	f1c1 0020 	rsb	r0, r1, #32
    52be:	fa03 f501 	lsl.w	r5, r3, r1
    52c2:	fa02 f606 	lsl.w	r6, r2, r6
    52c6:	4335      	orrs	r5, r6
    52c8:	fa22 f000 	lsr.w	r0, r2, r0
    52cc:	4305      	orrs	r5, r0
    52ce:	fa02 f401 	lsl.w	r4, r2, r1
    52d2:	ea48 0204 	orr.w	r2, r8, r4
    52d6:	ea49 0305 	orr.w	r3, r9, r5
    52da:	4944      	ldr	r1, [pc, #272]	; (53ec <vendor_request_handler+0x8b0>)
    52dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    52e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    52e2:	3301      	adds	r3, #1
    52e4:	64fb      	str	r3, [r7, #76]	; 0x4c
    52e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    52e8:	2b07      	cmp	r3, #7
    52ea:	ddd7      	ble.n	529c <vendor_request_handler+0x760>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
		}
		break;
    52ec:	e185      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
    52ee:	2300      	movs	r3, #0
    52f0:	64bb      	str	r3, [r7, #72]	; 0x48
		for(i=0; i < 4; i++) {
    52f2:	2300      	movs	r3, #0
    52f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    52f6:	e00d      	b.n	5314 <vendor_request_handler+0x7d8>
			clock_offset <<= 8;
    52f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    52fa:	021b      	lsls	r3, r3, #8
    52fc:	64bb      	str	r3, [r7, #72]	; 0x48
			clock_offset |= data[i];
    52fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5300:	687a      	ldr	r2, [r7, #4]
    5302:	4413      	add	r3, r2
    5304:	781b      	ldrb	r3, [r3, #0]
    5306:	461a      	mov	r2, r3
    5308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    530a:	4313      	orrs	r3, r2
    530c:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		break;

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
		for(i=0; i < 4; i++) {
    530e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5310:	3301      	adds	r3, #1
    5312:	64fb      	str	r3, [r7, #76]	; 0x4c
    5314:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5316:	2b03      	cmp	r3, #3
    5318:	ddee      	ble.n	52f8 <vendor_request_handler+0x7bc>
			clock_offset <<= 8;
			clock_offset |= data[i];
		}
		clkn += clock_offset;
    531a:	4b35      	ldr	r3, [pc, #212]	; (53f0 <vendor_request_handler+0x8b4>)
    531c:	681a      	ldr	r2, [r3, #0]
    531e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5320:	4413      	add	r3, r2
    5322:	4a33      	ldr	r2, [pc, #204]	; (53f0 <vendor_request_handler+0x8b4>)
    5324:	6013      	str	r3, [r2, #0]
		hop_mode = HOP_BLUETOOTH;
    5326:	4b33      	ldr	r3, [pc, #204]	; (53f4 <vendor_request_handler+0x8b8>)
    5328:	2202      	movs	r2, #2
    532a:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW;
    532c:	4b2a      	ldr	r3, [pc, #168]	; (53d8 <vendor_request_handler+0x89c>)
    532e:	2208      	movs	r2, #8
    5330:	701a      	strb	r2, [r3, #0]
		break;
    5332:	e162      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    5334:	687b      	ldr	r3, [r7, #4]
    5336:	781b      	ldrb	r3, [r3, #0]
    5338:	461a      	mov	r2, r3
    533a:	687b      	ldr	r3, [r7, #4]
    533c:	3301      	adds	r3, #1
    533e:	781b      	ldrb	r3, [r3, #0]
    5340:	021b      	lsls	r3, r3, #8
    5342:	431a      	orrs	r2, r3
    5344:	687b      	ldr	r3, [r7, #4]
    5346:	3302      	adds	r3, #2
    5348:	781b      	ldrb	r3, [r3, #0]
    534a:	041b      	lsls	r3, r3, #16
    534c:	431a      	orrs	r2, r3
    534e:	687b      	ldr	r3, [r7, #4]
    5350:	3303      	adds	r3, #3
    5352:	781b      	ldrb	r3, [r3, #0]
    5354:	061b      	lsls	r3, r3, #24
    5356:	4313      	orrs	r3, r2
    5358:	63fb      	str	r3, [r7, #60]	; 0x3c
		clkn = clock;
    535a:	4a25      	ldr	r2, [pc, #148]	; (53f0 <vendor_request_handler+0x8b4>)
    535c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    535e:	6013      	str	r3, [r2, #0]
		cs_threshold_calc_and_set();
    5360:	f7ff fb76 	bl	4a50 <cs_threshold_calc_and_set>
		break;
    5364:	e149      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    5366:	2300      	movs	r3, #0
    5368:	64fb      	str	r3, [r7, #76]	; 0x4c
    536a:	e00b      	b.n	5384 <vendor_request_handler+0x848>
			afh_map[i] = data[i];
    536c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    536e:	687a      	ldr	r2, [r7, #4]
    5370:	4413      	add	r3, r2
    5372:	7819      	ldrb	r1, [r3, #0]
    5374:	4a20      	ldr	r2, [pc, #128]	; (53f8 <vendor_request_handler+0x8bc>)
    5376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5378:	4413      	add	r3, r2
    537a:	460a      	mov	r2, r1
    537c:	701a      	strb	r2, [r3, #0]
		clkn = clock;
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    537e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5380:	3301      	adds	r3, #1
    5382:	64fb      	str	r3, [r7, #76]	; 0x4c
    5384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5386:	2b09      	cmp	r3, #9
    5388:	ddf0      	ble.n	536c <vendor_request_handler+0x830>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    538a:	4b1c      	ldr	r3, [pc, #112]	; (53fc <vendor_request_handler+0x8c0>)
    538c:	2201      	movs	r2, #1
    538e:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    5390:	683b      	ldr	r3, [r7, #0]
    5392:	220a      	movs	r2, #10
    5394:	601a      	str	r2, [r3, #0]
		break;
    5396:	e130      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    5398:	2300      	movs	r3, #0
    539a:	64fb      	str	r3, [r7, #76]	; 0x4c
    539c:	e007      	b.n	53ae <vendor_request_handler+0x872>
			afh_map[i] = 0;
    539e:	4a16      	ldr	r2, [pc, #88]	; (53f8 <vendor_request_handler+0x8bc>)
    53a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    53a2:	4413      	add	r3, r2
    53a4:	2200      	movs	r2, #0
    53a6:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    53a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    53aa:	3301      	adds	r3, #1
    53ac:	64fb      	str	r3, [r7, #76]	; 0x4c
    53ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    53b0:	2b09      	cmp	r3, #9
    53b2:	ddf4      	ble.n	539e <vendor_request_handler+0x862>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    53b4:	4b11      	ldr	r3, [pc, #68]	; (53fc <vendor_request_handler+0x8c0>)
    53b6:	2200      	movs	r2, #0
    53b8:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    53ba:	683b      	ldr	r3, [r7, #0]
    53bc:	220a      	movs	r2, #10
    53be:	601a      	str	r2, [r3, #0]
		break;
    53c0:	e11b      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    53c2:	4b0b      	ldr	r3, [pc, #44]	; (53f0 <vendor_request_handler+0x8b4>)
    53c4:	681b      	ldr	r3, [r3, #0]
    53c6:	63fb      	str	r3, [r7, #60]	; 0x3c
		for(i=0; i < 4; i++) {
    53c8:	2300      	movs	r3, #0
    53ca:	64fb      	str	r3, [r7, #76]	; 0x4c
    53cc:	e025      	b.n	541a <vendor_request_handler+0x8de>
    53ce:	bf00      	nop
    53d0:	1000049e 	.word	0x1000049e
    53d4:	100004a0 	.word	0x100004a0
    53d8:	10000a3f 	.word	0x10000a3f
    53dc:	100004a2 	.word	0x100004a2
    53e0:	0000daa0 	.word	0x0000daa0
    53e4:	0000da5c 	.word	0x0000da5c
    53e8:	1000044c 	.word	0x1000044c
    53ec:	100010d8 	.word	0x100010d8
    53f0:	10000bf4 	.word	0x10000bf4
    53f4:	1000097c 	.word	0x1000097c
    53f8:	10000bcc 	.word	0x10000bcc
    53fc:	10001040 	.word	0x10001040
			data[i] = (clock >> (8*i)) & 0xff;
    5400:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5402:	687a      	ldr	r2, [r7, #4]
    5404:	4413      	add	r3, r2
    5406:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5408:	00d2      	lsls	r2, r2, #3
    540a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    540c:	fa21 f202 	lsr.w	r2, r1, r2
    5410:	b2d2      	uxtb	r2, r2
    5412:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(i=0; i < 4; i++) {
    5414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5416:	3301      	adds	r3, #1
    5418:	64fb      	str	r3, [r7, #76]	; 0x4c
    541a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    541c:	2b03      	cmp	r3, #3
    541e:	ddef      	ble.n	5400 <vendor_request_handler+0x8c4>
			data[i] = (clock >> (8*i)) & 0xff;
		}
		*data_len = 4;
    5420:	683b      	ldr	r3, [r7, #0]
    5422:	2204      	movs	r2, #4
    5424:	601a      	str	r2, [r3, #0]
		break;
    5426:	e0e8      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;
    5428:	683b      	ldr	r3, [r7, #0]
    542a:	2200      	movs	r2, #0
    542c:	601a      	str	r2, [r3, #0]

		do_hop = 0;
    542e:	4b76      	ldr	r3, [pc, #472]	; (5608 <vendor_request_handler+0xacc>)
    5430:	2200      	movs	r2, #0
    5432:	701a      	strb	r2, [r3, #0]
		hop_mode = HOP_BTLE;
    5434:	4b75      	ldr	r3, [pc, #468]	; (560c <vendor_request_handler+0xad0>)
    5436:	2203      	movs	r2, #3
    5438:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW_LE;
    543a:	4b75      	ldr	r3, [pc, #468]	; (5610 <vendor_request_handler+0xad4>)
    543c:	2209      	movs	r2, #9
    543e:	701a      	strb	r2, [r3, #0]

		queue_init();
    5440:	f004 fe34 	bl	a0ac <queue_init>
		cs_threshold_calc_and_set();
    5444:	f7ff fb04 	bl	4a50 <cs_threshold_calc_and_set>
		break;
    5448:	e0d7      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    544a:	2300      	movs	r3, #0
    544c:	64fb      	str	r3, [r7, #76]	; 0x4c
    544e:	e00d      	b.n	546c <vendor_request_handler+0x930>
			data[i] = (le.access_address >> (8*i)) & 0xff;
    5450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5452:	687a      	ldr	r2, [r7, #4]
    5454:	4413      	add	r3, r2
    5456:	4a6f      	ldr	r2, [pc, #444]	; (5614 <vendor_request_handler+0xad8>)
    5458:	6811      	ldr	r1, [r2, #0]
    545a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    545c:	00d2      	lsls	r2, r2, #3
    545e:	fa21 f202 	lsr.w	r2, r1, r2
    5462:	b2d2      	uxtb	r2, r2
    5464:	701a      	strb	r2, [r3, #0]
		queue_init();
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    5466:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5468:	3301      	adds	r3, #1
    546a:	64fb      	str	r3, [r7, #76]	; 0x4c
    546c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    546e:	2b03      	cmp	r3, #3
    5470:	ddee      	ble.n	5450 <vendor_request_handler+0x914>
			data[i] = (le.access_address >> (8*i)) & 0xff;
		}
		*data_len = 4;
    5472:	683b      	ldr	r3, [r7, #0]
    5474:	2204      	movs	r2, #4
    5476:	601a      	str	r2, [r3, #0]
		break;
    5478:	e0bf      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    547a:	687b      	ldr	r3, [r7, #4]
    547c:	781b      	ldrb	r3, [r3, #0]
    547e:	461a      	mov	r2, r3
    5480:	687b      	ldr	r3, [r7, #4]
    5482:	3301      	adds	r3, #1
    5484:	781b      	ldrb	r3, [r3, #0]
    5486:	021b      	lsls	r3, r3, #8
    5488:	431a      	orrs	r2, r3
    548a:	687b      	ldr	r3, [r7, #4]
    548c:	3302      	adds	r3, #2
    548e:	781b      	ldrb	r3, [r3, #0]
    5490:	041b      	lsls	r3, r3, #16
    5492:	431a      	orrs	r2, r3
    5494:	687b      	ldr	r3, [r7, #4]
    5496:	3303      	adds	r3, #3
    5498:	781b      	ldrb	r3, [r3, #0]
    549a:	061b      	lsls	r3, r3, #24
    549c:	4313      	orrs	r3, r2
    549e:	4618      	mov	r0, r3
    54a0:	f002 fbf0 	bl	7c84 <le_set_access_address>
		le.target_set = 1;
    54a4:	4b5b      	ldr	r3, [pc, #364]	; (5614 <vendor_request_handler+0xad8>)
    54a6:	2201      	movs	r2, #1
    54a8:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    54aa:	e0a6      	b.n	55fa <vendor_request_handler+0xabe>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    54ac:	687b      	ldr	r3, [r7, #4]
    54ae:	2213      	movs	r2, #19
    54b0:	701a      	strb	r2, [r3, #0]
		data[1] = 0x37;
    54b2:	687b      	ldr	r3, [r7, #4]
    54b4:	3301      	adds	r3, #1
    54b6:	2237      	movs	r2, #55	; 0x37
    54b8:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    54ba:	683b      	ldr	r3, [r7, #0]
    54bc:	2202      	movs	r2, #2
    54be:	601a      	str	r2, [r3, #0]
		break;
    54c0:	e09b      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    54c2:	4b54      	ldr	r3, [pc, #336]	; (5614 <vendor_request_handler+0xad8>)
    54c4:	691b      	ldr	r3, [r3, #16]
    54c6:	2b00      	cmp	r3, #0
    54c8:	bf14      	ite	ne
    54ca:	2301      	movne	r3, #1
    54cc:	2300      	moveq	r3, #0
    54ce:	b2db      	uxtb	r3, r3
    54d0:	461a      	mov	r2, r3
    54d2:	687b      	ldr	r3, [r7, #4]
    54d4:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    54d6:	683b      	ldr	r3, [r7, #0]
    54d8:	2201      	movs	r2, #1
    54da:	601a      	str	r2, [r3, #0]
		break;
    54dc:	e08d      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    54de:	68bb      	ldr	r3, [r7, #8]
    54e0:	881b      	ldrh	r3, [r3, #0]
    54e2:	2b00      	cmp	r3, #0
    54e4:	bf14      	ite	ne
    54e6:	2301      	movne	r3, #1
    54e8:	2300      	moveq	r3, #0
    54ea:	b2db      	uxtb	r3, r3
    54ec:	461a      	mov	r2, r3
    54ee:	4b49      	ldr	r3, [pc, #292]	; (5614 <vendor_request_handler+0xad8>)
    54f0:	611a      	str	r2, [r3, #16]
		break;
    54f2:	e082      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_POLL:
		p = dequeue();
    54f4:	f004 fe1a 	bl	a12c <dequeue>
    54f8:	6478      	str	r0, [r7, #68]	; 0x44
		if (p != NULL) {
    54fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    54fc:	2b00      	cmp	r3, #0
    54fe:	d008      	beq.n	5512 <vendor_request_handler+0x9d6>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    5500:	6878      	ldr	r0, [r7, #4]
    5502:	6c79      	ldr	r1, [r7, #68]	; 0x44
    5504:	2240      	movs	r2, #64	; 0x40
    5506:	f007 fdb9 	bl	d07c <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    550a:	683b      	ldr	r3, [r7, #0]
    550c:	2240      	movs	r2, #64	; 0x40
    550e:	601a      	str	r2, [r3, #0]
		} else {
			data[0] = 0;
			*data_len = 1;
		}
		break;
    5510:	e073      	b.n	55fa <vendor_request_handler+0xabe>
		p = dequeue();
		if (p != NULL) {
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
			*data_len = sizeof(usb_pkt_rx);
		} else {
			data[0] = 0;
    5512:	687b      	ldr	r3, [r7, #4]
    5514:	2200      	movs	r2, #0
    5516:	701a      	strb	r2, [r3, #0]
			*data_len = 1;
    5518:	683b      	ldr	r3, [r7, #0]
    551a:	2201      	movs	r2, #1
    551c:	601a      	str	r2, [r3, #0]
		}
		break;
    551e:	e06c      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    5520:	683b      	ldr	r3, [r7, #0]
    5522:	2200      	movs	r2, #0
    5524:	601a      	str	r2, [r3, #0]

		hop_mode = HOP_NONE;
    5526:	4b39      	ldr	r3, [pc, #228]	; (560c <vendor_request_handler+0xad0>)
    5528:	2200      	movs	r2, #0
    552a:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_PROMISC_LE;
    552c:	4b38      	ldr	r3, [pc, #224]	; (5610 <vendor_request_handler+0xad4>)
    552e:	220a      	movs	r2, #10
    5530:	701a      	strb	r2, [r3, #0]

		queue_init();
    5532:	f004 fdbb 	bl	a0ac <queue_init>
		cs_threshold_calc_and_set();
    5536:	f7ff fa8b 	bl	4a50 <cs_threshold_calc_and_set>
		break;
    553a:	e05e      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    553c:	68bb      	ldr	r3, [r7, #8]
    553e:	881b      	ldrh	r3, [r3, #0]
    5540:	b2db      	uxtb	r3, r3
    5542:	4618      	mov	r0, r3
    5544:	f005 ffc0 	bl	b4c8 <cc2400_get>
    5548:	4603      	mov	r3, r0
    554a:	877b      	strh	r3, [r7, #58]	; 0x3a
		data[0] = (reg_val >> 8) & 0xff;
    554c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    554e:	0a1b      	lsrs	r3, r3, #8
    5550:	b29b      	uxth	r3, r3
    5552:	b2da      	uxtb	r2, r3
    5554:	687b      	ldr	r3, [r7, #4]
    5556:	701a      	strb	r2, [r3, #0]
		data[1] = reg_val & 0xff;
    5558:	687b      	ldr	r3, [r7, #4]
    555a:	3301      	adds	r3, #1
    555c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
    555e:	b2d2      	uxtb	r2, r2
    5560:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    5562:	683b      	ldr	r3, [r7, #0]
    5564:	2202      	movs	r2, #2
    5566:	601a      	str	r2, [r3, #0]
		break;
    5568:	e047      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    556a:	68bb      	ldr	r3, [r7, #8]
    556c:	881b      	ldrh	r3, [r3, #0]
    556e:	b2da      	uxtb	r2, r3
    5570:	68bb      	ldr	r3, [r7, #8]
    5572:	3302      	adds	r3, #2
    5574:	881b      	ldrh	r3, [r3, #0]
    5576:	4610      	mov	r0, r2
    5578:	4619      	mov	r1, r3
    557a:	f005 ffbb 	bl	b4f4 <cc2400_set>
		break;
    557e:	e03c      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_BTLE_SLAVE:
		memcpy(slave_mac_address, data, 6);
    5580:	4825      	ldr	r0, [pc, #148]	; (5618 <vendor_request_handler+0xadc>)
    5582:	6879      	ldr	r1, [r7, #4]
    5584:	2206      	movs	r2, #6
    5586:	f007 fd79 	bl	d07c <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    558a:	4b21      	ldr	r3, [pc, #132]	; (5610 <vendor_request_handler+0xad4>)
    558c:	220c      	movs	r2, #12
    558e:	701a      	strb	r2, [r3, #0]
		break;
    5590:	e033      	b.n	55fa <vendor_request_handler+0xabe>

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    5592:	687b      	ldr	r3, [r7, #4]
    5594:	795a      	ldrb	r2, [r3, #5]
    5596:	4b1f      	ldr	r3, [pc, #124]	; (5614 <vendor_request_handler+0xad8>)
    5598:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		le.target[1] = data[4];
    559c:	687b      	ldr	r3, [r7, #4]
    559e:	791a      	ldrb	r2, [r3, #4]
    55a0:	4b1c      	ldr	r3, [pc, #112]	; (5614 <vendor_request_handler+0xad8>)
    55a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		le.target[2] = data[3];
    55a6:	687b      	ldr	r3, [r7, #4]
    55a8:	78da      	ldrb	r2, [r3, #3]
    55aa:	4b1a      	ldr	r3, [pc, #104]	; (5614 <vendor_request_handler+0xad8>)
    55ac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		le.target[3] = data[2];
    55b0:	687b      	ldr	r3, [r7, #4]
    55b2:	789a      	ldrb	r2, [r3, #2]
    55b4:	4b17      	ldr	r3, [pc, #92]	; (5614 <vendor_request_handler+0xad8>)
    55b6:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		le.target[4] = data[1];
    55ba:	687b      	ldr	r3, [r7, #4]
    55bc:	785a      	ldrb	r2, [r3, #1]
    55be:	4b15      	ldr	r3, [pc, #84]	; (5614 <vendor_request_handler+0xad8>)
    55c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		le.target[5] = data[0];
    55c4:	687b      	ldr	r3, [r7, #4]
    55c6:	781a      	ldrb	r2, [r3, #0]
    55c8:	4b12      	ldr	r3, [pc, #72]	; (5614 <vendor_request_handler+0xad8>)
    55ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		le.target_set = 1;
    55ce:	4b11      	ldr	r3, [pc, #68]	; (5614 <vendor_request_handler+0xad8>)
    55d0:	2201      	movs	r2, #1
    55d2:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    55d4:	e011      	b.n	55fa <vendor_request_handler+0xabe>

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    55d6:	68bb      	ldr	r3, [r7, #8]
    55d8:	881b      	ldrh	r3, [r3, #0]
    55da:	b2da      	uxtb	r2, r3
    55dc:	4b0f      	ldr	r3, [pc, #60]	; (561c <vendor_request_handler+0xae0>)
    55de:	701a      	strb	r2, [r3, #0]
		break;
    55e0:	e00b      	b.n	55fa <vendor_request_handler+0xabe>
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    55e2:	4b0b      	ldr	r3, [pc, #44]	; (5610 <vendor_request_handler+0xad4>)
    55e4:	220d      	movs	r2, #13
    55e6:	701a      	strb	r2, [r3, #0]
		ego_mode = request_params[0];
    55e8:	68bb      	ldr	r3, [r7, #8]
    55ea:	881b      	ldrh	r3, [r3, #0]
    55ec:	b2da      	uxtb	r2, r3
    55ee:	4b0c      	ldr	r3, [pc, #48]	; (5620 <vendor_request_handler+0xae4>)
    55f0:	701a      	strb	r2, [r3, #0]
		break;
    55f2:	e002      	b.n	55fa <vendor_request_handler+0xabe>

	default:
		return 0;
    55f4:	2300      	movs	r3, #0
    55f6:	e001      	b.n	55fc <vendor_request_handler+0xac0>
		le.target_set = 1;
		break;

	case UBERTOOTH_DO_SOMETHING:
		// do something! just don't commit anything here
		break;
    55f8:	bf00      	nop
		break;

	default:
		return 0;
	}
	return 1;
    55fa:	2301      	movs	r3, #1
}
    55fc:	4618      	mov	r0, r3
    55fe:	3754      	adds	r7, #84	; 0x54
    5600:	46bd      	mov	sp, r7
    5602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5606:	bf00      	nop
    5608:	1000097d 	.word	0x1000097d
    560c:	1000097c 	.word	0x1000097c
    5610:	10000a3f 	.word	0x10000a3f
    5614:	10000458 	.word	0x10000458
    5618:	1000098c 	.word	0x1000098c
    561c:	10000a40 	.word	0x10000a40
    5620:	10000a41 	.word	0x10000a41

00005624 <TIMER0_IRQHandler>:
	T0TCR = TCR_Counter_Enable;
}

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    5624:	b480      	push	{r7}
    5626:	b083      	sub	sp, #12
    5628:	af00      	add	r7, sp, #0
	// Use non-volatile working register to shave off a couple instructions
	u32 next;
	u32 le_clk;

	if (T0IR & TIR_MR0_Interrupt) {
    562a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    562e:	681b      	ldr	r3, [r3, #0]
    5630:	f003 0301 	and.w	r3, r3, #1
    5634:	2b00      	cmp	r3, #0
    5636:	d06d      	beq.n	5714 <TIMER0_IRQHandler+0xf0>

		clkn++;
    5638:	4b39      	ldr	r3, [pc, #228]	; (5720 <TIMER0_IRQHandler+0xfc>)
    563a:	681b      	ldr	r3, [r3, #0]
    563c:	3301      	adds	r3, #1
    563e:	4a38      	ldr	r2, [pc, #224]	; (5720 <TIMER0_IRQHandler+0xfc>)
    5640:	6013      	str	r3, [r2, #0]
		next = clkn;
    5642:	4b37      	ldr	r3, [pc, #220]	; (5720 <TIMER0_IRQHandler+0xfc>)
    5644:	681b      	ldr	r3, [r3, #0]
    5646:	607b      	str	r3, [r7, #4]
		le_clk = (next - le.conn_epoch) & 0x03;
    5648:	4b36      	ldr	r3, [pc, #216]	; (5724 <TIMER0_IRQHandler+0x100>)
    564a:	699b      	ldr	r3, [r3, #24]
    564c:	687a      	ldr	r2, [r7, #4]
    564e:	1ad3      	subs	r3, r2, r3
    5650:	f003 0303 	and.w	r3, r3, #3
    5654:	603b      	str	r3, [r7, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    5656:	4b34      	ldr	r3, [pc, #208]	; (5728 <TIMER0_IRQHandler+0x104>)
    5658:	781b      	ldrb	r3, [r3, #0]
    565a:	2b00      	cmp	r3, #0
    565c:	d003      	beq.n	5666 <TIMER0_IRQHandler+0x42>
    565e:	4b32      	ldr	r3, [pc, #200]	; (5728 <TIMER0_IRQHandler+0x104>)
    5660:	781b      	ldrb	r3, [r3, #0]
    5662:	2b01      	cmp	r3, #1
    5664:	d109      	bne.n	567a <TIMER0_IRQHandler+0x56>
			if ((next & 0x7f) == 0)
    5666:	687b      	ldr	r3, [r7, #4]
    5668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    566c:	2b00      	cmp	r3, #0
    566e:	d103      	bne.n	5678 <TIMER0_IRQHandler+0x54>
				do_hop = 1;
    5670:	4b2e      	ldr	r3, [pc, #184]	; (572c <TIMER0_IRQHandler+0x108>)
    5672:	2201      	movs	r2, #1
    5674:	701a      	strb	r2, [r3, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
			if ((next & 0x7f) == 0)
    5676:	e037      	b.n	56e8 <TIMER0_IRQHandler+0xc4>
    5678:	e036      	b.n	56e8 <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    567a:	4b2b      	ldr	r3, [pc, #172]	; (5728 <TIMER0_IRQHandler+0x104>)
    567c:	781b      	ldrb	r3, [r3, #0]
    567e:	2b02      	cmp	r3, #2
    5680:	d108      	bne.n	5694 <TIMER0_IRQHandler+0x70>
			if ((next & 0x1) == 0)
    5682:	687b      	ldr	r3, [r7, #4]
    5684:	f003 0301 	and.w	r3, r3, #1
    5688:	2b00      	cmp	r3, #0
    568a:	d12d      	bne.n	56e8 <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
    568c:	4b27      	ldr	r3, [pc, #156]	; (572c <TIMER0_IRQHandler+0x108>)
    568e:	2201      	movs	r2, #1
    5690:	701a      	strb	r2, [r3, #0]
    5692:	e029      	b.n	56e8 <TIMER0_IRQHandler+0xc4>
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    5694:	4b24      	ldr	r3, [pc, #144]	; (5728 <TIMER0_IRQHandler+0x104>)
    5696:	781b      	ldrb	r3, [r3, #0]
    5698:	2b03      	cmp	r3, #3
    569a:	d125      	bne.n	56e8 <TIMER0_IRQHandler+0xc4>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    569c:	4b21      	ldr	r3, [pc, #132]	; (5724 <TIMER0_IRQHandler+0x100>)
    569e:	7d1b      	ldrb	r3, [r3, #20]
    56a0:	2b03      	cmp	r3, #3
    56a2:	d121      	bne.n	56e8 <TIMER0_IRQHandler+0xc4>
    56a4:	683b      	ldr	r3, [r7, #0]
    56a6:	2b00      	cmp	r3, #0
    56a8:	d11e      	bne.n	56e8 <TIMER0_IRQHandler+0xc4>
				--le.interval_timer;
    56aa:	4b1e      	ldr	r3, [pc, #120]	; (5724 <TIMER0_IRQHandler+0x100>)
    56ac:	8b9b      	ldrh	r3, [r3, #28]
    56ae:	b29b      	uxth	r3, r3
    56b0:	3b01      	subs	r3, #1
    56b2:	b29a      	uxth	r2, r3
    56b4:	4b1b      	ldr	r3, [pc, #108]	; (5724 <TIMER0_IRQHandler+0x100>)
    56b6:	839a      	strh	r2, [r3, #28]
				if (le.interval_timer == 0) {
    56b8:	4b1a      	ldr	r3, [pc, #104]	; (5724 <TIMER0_IRQHandler+0x100>)
    56ba:	8b9b      	ldrh	r3, [r3, #28]
    56bc:	b29b      	uxth	r3, r3
    56be:	2b00      	cmp	r3, #0
    56c0:	d10e      	bne.n	56e0 <TIMER0_IRQHandler+0xbc>
					do_hop = 1;
    56c2:	4b1a      	ldr	r3, [pc, #104]	; (572c <TIMER0_IRQHandler+0x108>)
    56c4:	2201      	movs	r2, #1
    56c6:	701a      	strb	r2, [r3, #0]
					++le.conn_count;
    56c8:	4b16      	ldr	r3, [pc, #88]	; (5724 <TIMER0_IRQHandler+0x100>)
    56ca:	8c1b      	ldrh	r3, [r3, #32]
    56cc:	b29b      	uxth	r3, r3
    56ce:	3301      	adds	r3, #1
    56d0:	b29a      	uxth	r2, r3
    56d2:	4b14      	ldr	r3, [pc, #80]	; (5724 <TIMER0_IRQHandler+0x100>)
    56d4:	841a      	strh	r2, [r3, #32]
					le.interval_timer = le.conn_interval;
    56d6:	4b13      	ldr	r3, [pc, #76]	; (5724 <TIMER0_IRQHandler+0x100>)
    56d8:	8bda      	ldrh	r2, [r3, #30]
    56da:	4b12      	ldr	r3, [pc, #72]	; (5724 <TIMER0_IRQHandler+0x100>)
    56dc:	839a      	strh	r2, [r3, #28]
    56de:	e003      	b.n	56e8 <TIMER0_IRQHandler+0xc4>
				} else {
					TXLED_CLR; // hack!
    56e0:	4b13      	ldr	r3, [pc, #76]	; (5730 <TIMER0_IRQHandler+0x10c>)
    56e2:	f44f 7280 	mov.w	r2, #256	; 0x100
    56e6:	601a      	str	r2, [r3, #0]
				}
			}
		}

		/* Keepalive trigger fires at 3200/2^9 = 6.25 Hz */
		if ((next & 0x1ff) == 0)
    56e8:	687b      	ldr	r3, [r7, #4]
    56ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
    56ee:	2b00      	cmp	r3, #0
    56f0:	d102      	bne.n	56f8 <TIMER0_IRQHandler+0xd4>
			keepalive_trigger = 1;
    56f2:	4b10      	ldr	r3, [pc, #64]	; (5734 <TIMER0_IRQHandler+0x110>)
    56f4:	2201      	movs	r2, #1
    56f6:	701a      	strb	r2, [r3, #0]

		/* Ack interrupt */
		T0MR0 = 3124 - clock_trim;
    56f8:	4a0f      	ldr	r2, [pc, #60]	; (5738 <TIMER0_IRQHandler+0x114>)
    56fa:	4b10      	ldr	r3, [pc, #64]	; (573c <TIMER0_IRQHandler+0x118>)
    56fc:	681b      	ldr	r3, [r3, #0]
    56fe:	f5c3 6343 	rsb	r3, r3, #3120	; 0xc30
    5702:	3304      	adds	r3, #4
    5704:	6013      	str	r3, [r2, #0]
		clock_trim = 0;
    5706:	4b0d      	ldr	r3, [pc, #52]	; (573c <TIMER0_IRQHandler+0x118>)
    5708:	2200      	movs	r2, #0
    570a:	601a      	str	r2, [r3, #0]
		T0IR = TIR_MR0_Interrupt;
    570c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    5710:	2201      	movs	r2, #1
    5712:	601a      	str	r2, [r3, #0]
	}
}
    5714:	370c      	adds	r7, #12
    5716:	46bd      	mov	sp, r7
    5718:	f85d 7b04 	ldr.w	r7, [sp], #4
    571c:	4770      	bx	lr
    571e:	bf00      	nop
    5720:	10000bf4 	.word	0x10000bf4
    5724:	10000458 	.word	0x10000458
    5728:	1000097c 	.word	0x1000097c
    572c:	1000097d 	.word	0x1000097d
    5730:	2009c03c 	.word	0x2009c03c
    5734:	10000bf0 	.word	0x10000bf0
    5738:	40004018 	.word	0x40004018
    573c:	10000984 	.word	0x10000984

00005740 <EINT3_IRQHandler>:

/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
//static volatile u8 txledstate = 1;
void EINT3_IRQHandler()
{
    5740:	b480      	push	{r7}
    5742:	af00      	add	r7, sp, #0
	/* TODO - check specific source of shared interrupt */
	IO2IntClr = PIN_GIO6;            // clear interrupt
    5744:	4b0b      	ldr	r3, [pc, #44]	; (5774 <EINT3_IRQHandler+0x34>)
    5746:	2204      	movs	r2, #4
    5748:	601a      	str	r2, [r3, #0]
	cs_trigger = 1;                  // signal trigger
    574a:	4b0b      	ldr	r3, [pc, #44]	; (5778 <EINT3_IRQHandler+0x38>)
    574c:	2201      	movs	r2, #1
    574e:	701a      	strb	r2, [r3, #0]
	cs_timestamp = CLK100NS;         // time at trigger
    5750:	4b0a      	ldr	r3, [pc, #40]	; (577c <EINT3_IRQHandler+0x3c>)
    5752:	681b      	ldr	r3, [r3, #0]
    5754:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5758:	f640 4235 	movw	r2, #3125	; 0xc35
    575c:	fb02 f203 	mul.w	r2, r2, r3
    5760:	4b07      	ldr	r3, [pc, #28]	; (5780 <EINT3_IRQHandler+0x40>)
    5762:	681b      	ldr	r3, [r3, #0]
    5764:	4413      	add	r3, r2
    5766:	4a07      	ldr	r2, [pc, #28]	; (5784 <EINT3_IRQHandler+0x44>)
    5768:	6013      	str	r3, [r2, #0]
}
    576a:	46bd      	mov	sp, r7
    576c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5770:	4770      	bx	lr
    5772:	bf00      	nop
    5774:	400280ac 	.word	0x400280ac
    5778:	100010d4 	.word	0x100010d4
    577c:	10000bf4 	.word	0x10000bf4
    5780:	40004008 	.word	0x40004008
    5784:	10000bec 	.word	0x10000bec

00005788 <msleep>:

/* Sleep (busy wait) for 'millis' milliseconds. The 'wait' routines in
 * ubertooth.c are matched to the clock setup at boot time and can not
 * be used while the board is running at 100MHz. */
static void msleep(uint32_t millis)
{
    5788:	b5b0      	push	{r4, r5, r7, lr}
    578a:	b084      	sub	sp, #16
    578c:	af00      	add	r7, sp, #0
    578e:	6078      	str	r0, [r7, #4]
	uint32_t stop_at = clkn + millis * 312.5 / 1000;  // millis -> clkn ticks
    5790:	4b1b      	ldr	r3, [pc, #108]	; (5800 <msleep+0x78>)
    5792:	681b      	ldr	r3, [r3, #0]
    5794:	4618      	mov	r0, r3
    5796:	f007 f997 	bl	cac8 <__aeabi_ui2d>
    579a:	4604      	mov	r4, r0
    579c:	460d      	mov	r5, r1
    579e:	6878      	ldr	r0, [r7, #4]
    57a0:	f007 f992 	bl	cac8 <__aeabi_ui2d>
    57a4:	4602      	mov	r2, r0
    57a6:	460b      	mov	r3, r1
    57a8:	4610      	mov	r0, r2
    57aa:	4619      	mov	r1, r3
    57ac:	a312      	add	r3, pc, #72	; (adr r3, 57f8 <msleep+0x70>)
    57ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    57b2:	f007 f9ff 	bl	cbb4 <__aeabi_dmul>
    57b6:	4602      	mov	r2, r0
    57b8:	460b      	mov	r3, r1
    57ba:	4610      	mov	r0, r2
    57bc:	4619      	mov	r1, r3
    57be:	f04f 0200 	mov.w	r2, #0
    57c2:	4b10      	ldr	r3, [pc, #64]	; (5804 <msleep+0x7c>)
    57c4:	f007 fb20 	bl	ce08 <__aeabi_ddiv>
    57c8:	4602      	mov	r2, r0
    57ca:	460b      	mov	r3, r1
    57cc:	4620      	mov	r0, r4
    57ce:	4629      	mov	r1, r5
    57d0:	f007 f83e 	bl	c850 <__adddf3>
    57d4:	4602      	mov	r2, r0
    57d6:	460b      	mov	r3, r1
    57d8:	4610      	mov	r0, r2
    57da:	4619      	mov	r1, r3
    57dc:	f007 fbfc 	bl	cfd8 <__aeabi_d2uiz>
    57e0:	4603      	mov	r3, r0
    57e2:	60fb      	str	r3, [r7, #12]
	do { } while (clkn < stop_at);                   // TODO: handle wrapping
    57e4:	4b06      	ldr	r3, [pc, #24]	; (5800 <msleep+0x78>)
    57e6:	681a      	ldr	r2, [r3, #0]
    57e8:	68fb      	ldr	r3, [r7, #12]
    57ea:	429a      	cmp	r2, r3
    57ec:	d3fa      	bcc.n	57e4 <msleep+0x5c>
}
    57ee:	3710      	adds	r7, #16
    57f0:	46bd      	mov	sp, r7
    57f2:	bdb0      	pop	{r4, r5, r7, pc}
    57f4:	f3af 8000 	nop.w
    57f8:	00000000 	.word	0x00000000
    57fc:	40738800 	.word	0x40738800
    5800:	10000bf4 	.word	0x10000bf4
    5804:	408f4000 	.word	0x408f4000

00005808 <dma_init>:

static void dma_init()
{
    5808:	b480      	push	{r7}
    580a:	af00      	add	r7, sp, #0
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    580c:	4a3f      	ldr	r2, [pc, #252]	; (590c <dma_init+0x104>)
    580e:	4b3f      	ldr	r3, [pc, #252]	; (590c <dma_init+0x104>)
    5810:	681b      	ldr	r3, [r3, #0]
    5812:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    5816:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    5818:	4b3d      	ldr	r3, [pc, #244]	; (5910 <dma_init+0x108>)
    581a:	2200      	movs	r2, #0
    581c:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    581e:	4b3d      	ldr	r3, [pc, #244]	; (5914 <dma_init+0x10c>)
    5820:	2200      	movs	r2, #0
    5822:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    5824:	4b3c      	ldr	r3, [pc, #240]	; (5918 <dma_init+0x110>)
    5826:	2200      	movs	r2, #0
    5828:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    582a:	4b3c      	ldr	r3, [pc, #240]	; (591c <dma_init+0x114>)
    582c:	2200      	movs	r2, #0
    582e:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    5830:	4b3b      	ldr	r3, [pc, #236]	; (5920 <dma_init+0x118>)
    5832:	2200      	movs	r2, #0
    5834:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5836:	4b3b      	ldr	r3, [pc, #236]	; (5924 <dma_init+0x11c>)
    5838:	2200      	movs	r2, #0
    583a:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    583c:	4b3a      	ldr	r3, [pc, #232]	; (5928 <dma_init+0x120>)
    583e:	2200      	movs	r2, #0
    5840:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    5842:	4b3a      	ldr	r3, [pc, #232]	; (592c <dma_init+0x124>)
    5844:	2200      	movs	r2, #0
    5846:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5848:	4b39      	ldr	r3, [pc, #228]	; (5930 <dma_init+0x128>)
    584a:	22ff      	movs	r2, #255	; 0xff
    584c:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    584e:	4b39      	ldr	r3, [pc, #228]	; (5934 <dma_init+0x12c>)
    5850:	22ff      	movs	r2, #255	; 0xff
    5852:	601a      	str	r2, [r3, #0]

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
    5854:	4b38      	ldr	r3, [pc, #224]	; (5938 <dma_init+0x130>)
    5856:	4a39      	ldr	r2, [pc, #228]	; (593c <dma_init+0x134>)
    5858:	601a      	str	r2, [r3, #0]
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
    585a:	4a39      	ldr	r2, [pc, #228]	; (5940 <dma_init+0x138>)
    585c:	4b36      	ldr	r3, [pc, #216]	; (5938 <dma_init+0x130>)
    585e:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
    5860:	4a38      	ldr	r2, [pc, #224]	; (5944 <dma_init+0x13c>)
    5862:	4b35      	ldr	r3, [pc, #212]	; (5938 <dma_init+0x130>)
    5864:	609a      	str	r2, [r3, #8]
	rx_dma_lli1.control = (DMA_SIZE) |
    5866:	4b34      	ldr	r3, [pc, #208]	; (5938 <dma_init+0x130>)
    5868:	4a37      	ldr	r2, [pc, #220]	; (5948 <dma_init+0x140>)
    586a:	60da      	str	r2, [r3, #12]
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
    586c:	4b35      	ldr	r3, [pc, #212]	; (5944 <dma_init+0x13c>)
    586e:	4a33      	ldr	r2, [pc, #204]	; (593c <dma_init+0x134>)
    5870:	601a      	str	r2, [r3, #0]
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
    5872:	4a36      	ldr	r2, [pc, #216]	; (594c <dma_init+0x144>)
    5874:	4b33      	ldr	r3, [pc, #204]	; (5944 <dma_init+0x13c>)
    5876:	605a      	str	r2, [r3, #4]
	rx_dma_lli2.next_lli = (u32)&rx_dma_lli1;
    5878:	4a2f      	ldr	r2, [pc, #188]	; (5938 <dma_init+0x130>)
    587a:	4b32      	ldr	r3, [pc, #200]	; (5944 <dma_init+0x13c>)
    587c:	609a      	str	r2, [r3, #8]
	rx_dma_lli2.control = (DMA_SIZE) |
    587e:	4b31      	ldr	r3, [pc, #196]	; (5944 <dma_init+0x13c>)
    5880:	4a31      	ldr	r2, [pc, #196]	; (5948 <dma_init+0x140>)
    5882:	60da      	str	r2, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* disable DMA interrupts */
	ICER0 = ICER0_ICE_DMA;
    5884:	4b32      	ldr	r3, [pc, #200]	; (5950 <dma_init+0x148>)
    5886:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    588a:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    588c:	4b31      	ldr	r3, [pc, #196]	; (5954 <dma_init+0x14c>)
    588e:	2201      	movs	r2, #1
    5890:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    5892:	bf00      	nop
    5894:	4b2f      	ldr	r3, [pc, #188]	; (5954 <dma_init+0x14c>)
    5896:	681b      	ldr	r3, [r3, #0]
    5898:	f003 0301 	and.w	r3, r3, #1
    589c:	2b00      	cmp	r3, #0
    589e:	d0f9      	beq.n	5894 <dma_init+0x8c>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    58a0:	4a2d      	ldr	r2, [pc, #180]	; (5958 <dma_init+0x150>)
    58a2:	4b25      	ldr	r3, [pc, #148]	; (5938 <dma_init+0x130>)
    58a4:	681b      	ldr	r3, [r3, #0]
    58a6:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    58a8:	4a2c      	ldr	r2, [pc, #176]	; (595c <dma_init+0x154>)
    58aa:	4b23      	ldr	r3, [pc, #140]	; (5938 <dma_init+0x130>)
    58ac:	685b      	ldr	r3, [r3, #4]
    58ae:	6013      	str	r3, [r2, #0]
	DMACC0LLI = rx_dma_lli1.next_lli;
    58b0:	4a2b      	ldr	r2, [pc, #172]	; (5960 <dma_init+0x158>)
    58b2:	4b21      	ldr	r3, [pc, #132]	; (5938 <dma_init+0x130>)
    58b4:	689b      	ldr	r3, [r3, #8]
    58b6:	6013      	str	r3, [r2, #0]
	DMACC0Control = rx_dma_lli1.control;
    58b8:	4a2a      	ldr	r2, [pc, #168]	; (5964 <dma_init+0x15c>)
    58ba:	4b1f      	ldr	r3, [pc, #124]	; (5938 <dma_init+0x130>)
    58bc:	68db      	ldr	r3, [r3, #12]
    58be:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    58c0:	4b13      	ldr	r3, [pc, #76]	; (5910 <dma_init+0x108>)
    58c2:	f24d 0206 	movw	r2, #53254	; 0xd006
    58c6:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    58c8:	4b27      	ldr	r3, [pc, #156]	; (5968 <dma_init+0x160>)
    58ca:	681b      	ldr	r3, [r3, #0]
    58cc:	0d1b      	lsrs	r3, r3, #20
    58ce:	b2db      	uxtb	r3, r3
    58d0:	4a26      	ldr	r2, [pc, #152]	; (596c <dma_init+0x164>)
    58d2:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    58d4:	4b24      	ldr	r3, [pc, #144]	; (5968 <dma_init+0x160>)
    58d6:	681b      	ldr	r3, [r3, #0]
    58d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    58dc:	f640 4235 	movw	r2, #3125	; 0xc35
    58e0:	fb02 f203 	mul.w	r2, r2, r3
    58e4:	4b22      	ldr	r3, [pc, #136]	; (5970 <dma_init+0x168>)
    58e6:	681b      	ldr	r3, [r3, #0]
    58e8:	4413      	add	r3, r2
    58ea:	4a22      	ldr	r2, [pc, #136]	; (5974 <dma_init+0x16c>)
    58ec:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    58ee:	4b22      	ldr	r3, [pc, #136]	; (5978 <dma_init+0x170>)
    58f0:	881b      	ldrh	r3, [r3, #0]
    58f2:	b29a      	uxth	r2, r3
    58f4:	4b21      	ldr	r3, [pc, #132]	; (597c <dma_init+0x174>)
    58f6:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    58f8:	4b21      	ldr	r3, [pc, #132]	; (5980 <dma_init+0x178>)
    58fa:	2200      	movs	r2, #0
    58fc:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    58fe:	4b21      	ldr	r3, [pc, #132]	; (5984 <dma_init+0x17c>)
    5900:	2200      	movs	r2, #0
    5902:	601a      	str	r2, [r3, #0]
}
    5904:	46bd      	mov	sp, r7
    5906:	f85d 7b04 	ldr.w	r7, [sp], #4
    590a:	4770      	bx	lr
    590c:	400fc0c4 	.word	0x400fc0c4
    5910:	50004110 	.word	0x50004110
    5914:	50004130 	.word	0x50004130
    5918:	50004150 	.word	0x50004150
    591c:	50004170 	.word	0x50004170
    5920:	50004190 	.word	0x50004190
    5924:	500041b0 	.word	0x500041b0
    5928:	500041d0 	.word	0x500041d0
    592c:	500041f0 	.word	0x500041f0
    5930:	50004008 	.word	0x50004008
    5934:	50004010 	.word	0x50004010
    5938:	10001080 	.word	0x10001080
    593c:	40030008 	.word	0x40030008
    5940:	1000109c 	.word	0x1000109c
    5944:	10000bdc 	.word	0x10000bdc
    5948:	88009032 	.word	0x88009032
    594c:	10001048 	.word	0x10001048
    5950:	e000e180 	.word	0xe000e180
    5954:	50004030 	.word	0x50004030
    5958:	50004100 	.word	0x50004100
    595c:	50004104 	.word	0x50004104
    5960:	50004108 	.word	0x50004108
    5964:	5000410c 	.word	0x5000410c
    5968:	10000bf4 	.word	0x10000bf4
    596c:	10000bfc 	.word	0x10000bfc
    5970:	40004008 	.word	0x40004008
    5974:	10001038 	.word	0x10001038
    5978:	1000049c 	.word	0x1000049c
    597c:	1000098a 	.word	0x1000098a
    5980:	10000b0c 	.word	0x10000b0c
    5984:	100010d0 	.word	0x100010d0

00005988 <dma_init_le>:

static void dma_init_le()
{
    5988:	b480      	push	{r7}
    598a:	b083      	sub	sp, #12
    598c:	af00      	add	r7, sp, #0
	int i;

	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    598e:	4a4b      	ldr	r2, [pc, #300]	; (5abc <dma_init_le+0x134>)
    5990:	4b4a      	ldr	r3, [pc, #296]	; (5abc <dma_init_le+0x134>)
    5992:	681b      	ldr	r3, [r3, #0]
    5994:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    5998:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    599a:	4b49      	ldr	r3, [pc, #292]	; (5ac0 <dma_init_le+0x138>)
    599c:	2200      	movs	r2, #0
    599e:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    59a0:	4b48      	ldr	r3, [pc, #288]	; (5ac4 <dma_init_le+0x13c>)
    59a2:	2200      	movs	r2, #0
    59a4:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    59a6:	4b48      	ldr	r3, [pc, #288]	; (5ac8 <dma_init_le+0x140>)
    59a8:	2200      	movs	r2, #0
    59aa:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    59ac:	4b47      	ldr	r3, [pc, #284]	; (5acc <dma_init_le+0x144>)
    59ae:	2200      	movs	r2, #0
    59b0:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    59b2:	4b47      	ldr	r3, [pc, #284]	; (5ad0 <dma_init_le+0x148>)
    59b4:	2200      	movs	r2, #0
    59b6:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    59b8:	4b46      	ldr	r3, [pc, #280]	; (5ad4 <dma_init_le+0x14c>)
    59ba:	2200      	movs	r2, #0
    59bc:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    59be:	4b46      	ldr	r3, [pc, #280]	; (5ad8 <dma_init_le+0x150>)
    59c0:	2200      	movs	r2, #0
    59c2:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    59c4:	4b45      	ldr	r3, [pc, #276]	; (5adc <dma_init_le+0x154>)
    59c6:	2200      	movs	r2, #0
    59c8:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    59ca:	4b45      	ldr	r3, [pc, #276]	; (5ae0 <dma_init_le+0x158>)
    59cc:	22ff      	movs	r2, #255	; 0xff
    59ce:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    59d0:	4b44      	ldr	r3, [pc, #272]	; (5ae4 <dma_init_le+0x15c>)
    59d2:	22ff      	movs	r2, #255	; 0xff
    59d4:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    59d6:	4b44      	ldr	r3, [pc, #272]	; (5ae8 <dma_init_le+0x160>)
    59d8:	2201      	movs	r2, #1
    59da:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    59dc:	bf00      	nop
    59de:	4b42      	ldr	r3, [pc, #264]	; (5ae8 <dma_init_le+0x160>)
    59e0:	681b      	ldr	r3, [r3, #0]
    59e2:	f003 0301 	and.w	r3, r3, #1
    59e6:	2b00      	cmp	r3, #0
    59e8:	d0f9      	beq.n	59de <dma_init_le+0x56>

	for (i = 0; i < 11; ++i) {
    59ea:	2300      	movs	r3, #0
    59ec:	607b      	str	r3, [r7, #4]
    59ee:	e02a      	b.n	5a46 <dma_init_le+0xbe>
		le_dma_lli[i].src = (u32)&(DIO_SSP_DR);
    59f0:	4a3e      	ldr	r2, [pc, #248]	; (5aec <dma_init_le+0x164>)
    59f2:	687b      	ldr	r3, [r7, #4]
    59f4:	011b      	lsls	r3, r3, #4
    59f6:	4413      	add	r3, r2
    59f8:	4a3d      	ldr	r2, [pc, #244]	; (5af0 <dma_init_le+0x168>)
    59fa:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].dest = (u32)&rxbuf1[4 * i];
    59fc:	687b      	ldr	r3, [r7, #4]
    59fe:	009b      	lsls	r3, r3, #2
    5a00:	4a3c      	ldr	r2, [pc, #240]	; (5af4 <dma_init_le+0x16c>)
    5a02:	4413      	add	r3, r2
    5a04:	4619      	mov	r1, r3
    5a06:	4a39      	ldr	r2, [pc, #228]	; (5aec <dma_init_le+0x164>)
    5a08:	687b      	ldr	r3, [r7, #4]
    5a0a:	011b      	lsls	r3, r3, #4
    5a0c:	4413      	add	r3, r2
    5a0e:	6059      	str	r1, [r3, #4]
		le_dma_lli[i].next_lli = i < 10 ? (u32)&le_dma_lli[i+1] : 0;
    5a10:	687b      	ldr	r3, [r7, #4]
    5a12:	2b09      	cmp	r3, #9
    5a14:	dc06      	bgt.n	5a24 <dma_init_le+0x9c>
    5a16:	687b      	ldr	r3, [r7, #4]
    5a18:	3301      	adds	r3, #1
    5a1a:	011b      	lsls	r3, r3, #4
    5a1c:	4a33      	ldr	r2, [pc, #204]	; (5aec <dma_init_le+0x164>)
    5a1e:	4413      	add	r3, r2
    5a20:	461a      	mov	r2, r3
    5a22:	e000      	b.n	5a26 <dma_init_le+0x9e>
    5a24:	2200      	movs	r2, #0
    5a26:	4931      	ldr	r1, [pc, #196]	; (5aec <dma_init_le+0x164>)
    5a28:	687b      	ldr	r3, [r7, #4]
    5a2a:	011b      	lsls	r3, r3, #4
    5a2c:	440b      	add	r3, r1
    5a2e:	3308      	adds	r3, #8
    5a30:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].control = 4 |
    5a32:	4a2e      	ldr	r2, [pc, #184]	; (5aec <dma_init_le+0x164>)
    5a34:	687b      	ldr	r3, [r7, #4]
    5a36:	011b      	lsls	r3, r3, #4
    5a38:	4413      	add	r3, r2
    5a3a:	3308      	adds	r3, #8
    5a3c:	4a2e      	ldr	r2, [pc, #184]	; (5af8 <dma_init_le+0x170>)
    5a3e:	605a      	str	r2, [r3, #4]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    5a40:	687b      	ldr	r3, [r7, #4]
    5a42:	3301      	adds	r3, #1
    5a44:	607b      	str	r3, [r7, #4]
    5a46:	687b      	ldr	r3, [r7, #4]
    5a48:	2b0a      	cmp	r3, #10
    5a4a:	ddd1      	ble.n	59f0 <dma_init_le+0x68>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    5a4c:	4a2b      	ldr	r2, [pc, #172]	; (5afc <dma_init_le+0x174>)
    5a4e:	4b27      	ldr	r3, [pc, #156]	; (5aec <dma_init_le+0x164>)
    5a50:	681b      	ldr	r3, [r3, #0]
    5a52:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    5a54:	4a2a      	ldr	r2, [pc, #168]	; (5b00 <dma_init_le+0x178>)
    5a56:	4b25      	ldr	r3, [pc, #148]	; (5aec <dma_init_le+0x164>)
    5a58:	685b      	ldr	r3, [r3, #4]
    5a5a:	6013      	str	r3, [r2, #0]
	DMACC0LLI = le_dma_lli[0].next_lli;
    5a5c:	4a29      	ldr	r2, [pc, #164]	; (5b04 <dma_init_le+0x17c>)
    5a5e:	4b23      	ldr	r3, [pc, #140]	; (5aec <dma_init_le+0x164>)
    5a60:	689b      	ldr	r3, [r3, #8]
    5a62:	6013      	str	r3, [r2, #0]
	DMACC0Control = le_dma_lli[0].control;
    5a64:	4a28      	ldr	r2, [pc, #160]	; (5b08 <dma_init_le+0x180>)
    5a66:	4b21      	ldr	r3, [pc, #132]	; (5aec <dma_init_le+0x164>)
    5a68:	68db      	ldr	r3, [r3, #12]
    5a6a:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    5a6c:	4b14      	ldr	r3, [pc, #80]	; (5ac0 <dma_init_le+0x138>)
    5a6e:	f24d 0206 	movw	r2, #53254	; 0xd006
    5a72:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5a74:	4b25      	ldr	r3, [pc, #148]	; (5b0c <dma_init_le+0x184>)
    5a76:	681b      	ldr	r3, [r3, #0]
    5a78:	0d1b      	lsrs	r3, r3, #20
    5a7a:	b2db      	uxtb	r3, r3
    5a7c:	4a24      	ldr	r2, [pc, #144]	; (5b10 <dma_init_le+0x188>)
    5a7e:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    5a80:	4b22      	ldr	r3, [pc, #136]	; (5b0c <dma_init_le+0x184>)
    5a82:	681b      	ldr	r3, [r3, #0]
    5a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5a88:	f640 4235 	movw	r2, #3125	; 0xc35
    5a8c:	fb02 f203 	mul.w	r2, r2, r3
    5a90:	4b20      	ldr	r3, [pc, #128]	; (5b14 <dma_init_le+0x18c>)
    5a92:	681b      	ldr	r3, [r3, #0]
    5a94:	4413      	add	r3, r2
    5a96:	4a20      	ldr	r2, [pc, #128]	; (5b18 <dma_init_le+0x190>)
    5a98:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    5a9a:	4b20      	ldr	r3, [pc, #128]	; (5b1c <dma_init_le+0x194>)
    5a9c:	881b      	ldrh	r3, [r3, #0]
    5a9e:	b29a      	uxth	r2, r3
    5aa0:	4b1f      	ldr	r3, [pc, #124]	; (5b20 <dma_init_le+0x198>)
    5aa2:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    5aa4:	4b1f      	ldr	r3, [pc, #124]	; (5b24 <dma_init_le+0x19c>)
    5aa6:	2200      	movs	r2, #0
    5aa8:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    5aaa:	4b1f      	ldr	r3, [pc, #124]	; (5b28 <dma_init_le+0x1a0>)
    5aac:	2200      	movs	r2, #0
    5aae:	601a      	str	r2, [r3, #0]
}
    5ab0:	370c      	adds	r7, #12
    5ab2:	46bd      	mov	sp, r7
    5ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5ab8:	4770      	bx	lr
    5aba:	bf00      	nop
    5abc:	400fc0c4 	.word	0x400fc0c4
    5ac0:	50004110 	.word	0x50004110
    5ac4:	50004130 	.word	0x50004130
    5ac8:	50004150 	.word	0x50004150
    5acc:	50004170 	.word	0x50004170
    5ad0:	50004190 	.word	0x50004190
    5ad4:	500041b0 	.word	0x500041b0
    5ad8:	500041d0 	.word	0x500041d0
    5adc:	500041f0 	.word	0x500041f0
    5ae0:	50004008 	.word	0x50004008
    5ae4:	50004010 	.word	0x50004010
    5ae8:	50004030 	.word	0x50004030
    5aec:	10000b18 	.word	0x10000b18
    5af0:	40030008 	.word	0x40030008
    5af4:	1000109c 	.word	0x1000109c
    5af8:	88001004 	.word	0x88001004
    5afc:	50004100 	.word	0x50004100
    5b00:	50004104 	.word	0x50004104
    5b04:	50004108 	.word	0x50004108
    5b08:	5000410c 	.word	0x5000410c
    5b0c:	10000bf4 	.word	0x10000bf4
    5b10:	10000bfc 	.word	0x10000bfc
    5b14:	40004008 	.word	0x40004008
    5b18:	10001038 	.word	0x10001038
    5b1c:	1000049c 	.word	0x1000049c
    5b20:	1000098a 	.word	0x1000098a
    5b24:	10000b0c 	.word	0x10000b0c
    5b28:	100010d0 	.word	0x100010d0

00005b2c <bt_stream_dma_handler>:

void bt_stream_dma_handler(void) {
    5b2c:	b480      	push	{r7}
    5b2e:	af00      	add	r7, sp, #0
	idle_buf_clkn_high = active_buf_clkn_high;
    5b30:	4b25      	ldr	r3, [pc, #148]	; (5bc8 <bt_stream_dma_handler+0x9c>)
    5b32:	681b      	ldr	r3, [r3, #0]
    5b34:	4a25      	ldr	r2, [pc, #148]	; (5bcc <bt_stream_dma_handler+0xa0>)
    5b36:	6013      	str	r3, [r2, #0]
	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5b38:	4b25      	ldr	r3, [pc, #148]	; (5bd0 <bt_stream_dma_handler+0xa4>)
    5b3a:	681b      	ldr	r3, [r3, #0]
    5b3c:	0d1b      	lsrs	r3, r3, #20
    5b3e:	b2db      	uxtb	r3, r3
    5b40:	4a21      	ldr	r2, [pc, #132]	; (5bc8 <bt_stream_dma_handler+0x9c>)
    5b42:	6013      	str	r3, [r2, #0]

	idle_buf_clk100ns = active_buf_clk100ns;
    5b44:	4b23      	ldr	r3, [pc, #140]	; (5bd4 <bt_stream_dma_handler+0xa8>)
    5b46:	681b      	ldr	r3, [r3, #0]
    5b48:	4a23      	ldr	r2, [pc, #140]	; (5bd8 <bt_stream_dma_handler+0xac>)
    5b4a:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    5b4c:	4b20      	ldr	r3, [pc, #128]	; (5bd0 <bt_stream_dma_handler+0xa4>)
    5b4e:	681b      	ldr	r3, [r3, #0]
    5b50:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5b54:	f640 4235 	movw	r2, #3125	; 0xc35
    5b58:	fb02 f203 	mul.w	r2, r2, r3
    5b5c:	4b1f      	ldr	r3, [pc, #124]	; (5bdc <bt_stream_dma_handler+0xb0>)
    5b5e:	681b      	ldr	r3, [r3, #0]
    5b60:	4413      	add	r3, r2
    5b62:	4a1c      	ldr	r2, [pc, #112]	; (5bd4 <bt_stream_dma_handler+0xa8>)
    5b64:	6013      	str	r3, [r2, #0]

	idle_buf_channel = active_buf_channel;
    5b66:	4b1e      	ldr	r3, [pc, #120]	; (5be0 <bt_stream_dma_handler+0xb4>)
    5b68:	881b      	ldrh	r3, [r3, #0]
    5b6a:	b29a      	uxth	r2, r3
    5b6c:	4b1d      	ldr	r3, [pc, #116]	; (5be4 <bt_stream_dma_handler+0xb8>)
    5b6e:	801a      	strh	r2, [r3, #0]
	active_buf_channel = channel;
    5b70:	4b1d      	ldr	r3, [pc, #116]	; (5be8 <bt_stream_dma_handler+0xbc>)
    5b72:	881b      	ldrh	r3, [r3, #0]
    5b74:	b29a      	uxth	r2, r3
    5b76:	4b1a      	ldr	r3, [pc, #104]	; (5be0 <bt_stream_dma_handler+0xb4>)
    5b78:	801a      	strh	r2, [r3, #0]

	/* interrupt on channel 0 */
	if (DMACIntStat & (1 << 0)) {
    5b7a:	4b1c      	ldr	r3, [pc, #112]	; (5bec <bt_stream_dma_handler+0xc0>)
    5b7c:	681b      	ldr	r3, [r3, #0]
    5b7e:	f003 0301 	and.w	r3, r3, #1
    5b82:	2b00      	cmp	r3, #0
    5b84:	d01b      	beq.n	5bbe <bt_stream_dma_handler+0x92>
		if (DMACIntTCStat & (1 << 0)) {
    5b86:	4b1a      	ldr	r3, [pc, #104]	; (5bf0 <bt_stream_dma_handler+0xc4>)
    5b88:	681b      	ldr	r3, [r3, #0]
    5b8a:	f003 0301 	and.w	r3, r3, #1
    5b8e:	2b00      	cmp	r3, #0
    5b90:	d007      	beq.n	5ba2 <bt_stream_dma_handler+0x76>
			DMACIntTCClear = (1 << 0);
    5b92:	4b18      	ldr	r3, [pc, #96]	; (5bf4 <bt_stream_dma_handler+0xc8>)
    5b94:	2201      	movs	r2, #1
    5b96:	601a      	str	r2, [r3, #0]
			++rx_tc;
    5b98:	4b17      	ldr	r3, [pc, #92]	; (5bf8 <bt_stream_dma_handler+0xcc>)
    5b9a:	681b      	ldr	r3, [r3, #0]
    5b9c:	3301      	adds	r3, #1
    5b9e:	4a16      	ldr	r2, [pc, #88]	; (5bf8 <bt_stream_dma_handler+0xcc>)
    5ba0:	6013      	str	r3, [r2, #0]
		}
		if (DMACIntErrStat & (1 << 0)) {
    5ba2:	4b16      	ldr	r3, [pc, #88]	; (5bfc <bt_stream_dma_handler+0xd0>)
    5ba4:	681b      	ldr	r3, [r3, #0]
    5ba6:	f003 0301 	and.w	r3, r3, #1
    5baa:	2b00      	cmp	r3, #0
    5bac:	d007      	beq.n	5bbe <bt_stream_dma_handler+0x92>
			DMACIntErrClr = (1 << 0);
    5bae:	4b14      	ldr	r3, [pc, #80]	; (5c00 <bt_stream_dma_handler+0xd4>)
    5bb0:	2201      	movs	r2, #1
    5bb2:	601a      	str	r2, [r3, #0]
			++rx_err;
    5bb4:	4b13      	ldr	r3, [pc, #76]	; (5c04 <bt_stream_dma_handler+0xd8>)
    5bb6:	681b      	ldr	r3, [r3, #0]
    5bb8:	3301      	adds	r3, #1
    5bba:	4a12      	ldr	r2, [pc, #72]	; (5c04 <bt_stream_dma_handler+0xd8>)
    5bbc:	6013      	str	r3, [r2, #0]
		}
	}
}
    5bbe:	46bd      	mov	sp, r7
    5bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bc4:	4770      	bx	lr
    5bc6:	bf00      	nop
    5bc8:	10000bfc 	.word	0x10000bfc
    5bcc:	10001044 	.word	0x10001044
    5bd0:	10000bf4 	.word	0x10000bf4
    5bd4:	10001038 	.word	0x10001038
    5bd8:	10000bd8 	.word	0x10000bd8
    5bdc:	40004008 	.word	0x40004008
    5be0:	1000098a 	.word	0x1000098a
    5be4:	10000988 	.word	0x10000988
    5be8:	1000049c 	.word	0x1000049c
    5bec:	50004000 	.word	0x50004000
    5bf0:	50004004 	.word	0x50004004
    5bf4:	50004008 	.word	0x50004008
    5bf8:	10000b0c 	.word	0x10000b0c
    5bfc:	5000400c 	.word	0x5000400c
    5c00:	50004010 	.word	0x50004010
    5c04:	100010d0 	.word	0x100010d0

00005c08 <DMA_IRQHandler>:

void DMA_IRQHandler()
{
    5c08:	b580      	push	{r7, lr}
    5c0a:	af00      	add	r7, sp, #0
	switch (mode) {
    5c0c:	4b19      	ldr	r3, [pc, #100]	; (5c74 <DMA_IRQHandler+0x6c>)
    5c0e:	781b      	ldrb	r3, [r3, #0]
    5c10:	b2db      	uxtb	r3, r3
    5c12:	3b01      	subs	r3, #1
    5c14:	2b12      	cmp	r3, #18
    5c16:	d82c      	bhi.n	5c72 <DMA_IRQHandler+0x6a>
    5c18:	a201      	add	r2, pc, #4	; (adr r2, 5c20 <DMA_IRQHandler+0x18>)
    5c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5c1e:	bf00      	nop
    5c20:	00005c6d 	.word	0x00005c6d
    5c24:	00005c73 	.word	0x00005c73
    5c28:	00005c73 	.word	0x00005c73
    5c2c:	00005c6d 	.word	0x00005c6d
    5c30:	00005c73 	.word	0x00005c73
    5c34:	00005c73 	.word	0x00005c73
    5c38:	00005c73 	.word	0x00005c73
    5c3c:	00005c6d 	.word	0x00005c6d
    5c40:	00005c6d 	.word	0x00005c6d
    5c44:	00005c6d 	.word	0x00005c6d
    5c48:	00005c73 	.word	0x00005c73
    5c4c:	00005c6d 	.word	0x00005c6d
    5c50:	00005c73 	.word	0x00005c73
    5c54:	00005c6d 	.word	0x00005c6d
    5c58:	00005c73 	.word	0x00005c73
    5c5c:	00005c6d 	.word	0x00005c6d
    5c60:	00005c73 	.word	0x00005c73
    5c64:	00005c73 	.word	0x00005c73
    5c68:	00005c6d 	.word	0x00005c6d
		case MODE_SPECAN:
		case MODE_BT_FOLLOW:
		case MODE_BT_FOLLOW_LE:
		case MODE_BT_PROMISC_LE:
		case MODE_BT_SLAVE_LE:
			bt_stream_dma_handler();
    5c6c:	f7ff ff5e 	bl	5b2c <bt_stream_dma_handler>
			break;
    5c70:	bf00      	nop
	}
}
    5c72:	bd80      	pop	{r7, pc}
    5c74:	10000a3e 	.word	0x10000a3e

00005c78 <dio_ssp_start>:

static void dio_ssp_start()
{
    5c78:	b480      	push	{r7}
    5c7a:	af00      	add	r7, sp, #0
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    5c7c:	4b10      	ldr	r3, [pc, #64]	; (5cc0 <dio_ssp_start+0x48>)
    5c7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5c82:	601a      	str	r2, [r3, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    5c84:	4a0f      	ldr	r2, [pc, #60]	; (5cc4 <dio_ssp_start+0x4c>)
    5c86:	4b0f      	ldr	r3, [pc, #60]	; (5cc4 <dio_ssp_start+0x4c>)
    5c88:	681b      	ldr	r3, [r3, #0]
    5c8a:	f043 0301 	orr.w	r3, r3, #1
    5c8e:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    5c90:	4a0d      	ldr	r2, [pc, #52]	; (5cc8 <dio_ssp_start+0x50>)
    5c92:	4b0d      	ldr	r3, [pc, #52]	; (5cc8 <dio_ssp_start+0x50>)
    5c94:	681b      	ldr	r3, [r3, #0]
    5c96:	f043 0302 	orr.w	r3, r3, #2
    5c9a:	6013      	str	r3, [r2, #0]
	
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
    5c9c:	4a0b      	ldr	r2, [pc, #44]	; (5ccc <dio_ssp_start+0x54>)
    5c9e:	4b0b      	ldr	r3, [pc, #44]	; (5ccc <dio_ssp_start+0x54>)
    5ca0:	681b      	ldr	r3, [r3, #0]
    5ca2:	f043 0301 	orr.w	r3, r3, #1
    5ca6:	6013      	str	r3, [r2, #0]
	ISER0 = ISER0_ISE_DMA;
    5ca8:	4b09      	ldr	r3, [pc, #36]	; (5cd0 <dio_ssp_start+0x58>)
    5caa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5cae:	601a      	str	r2, [r3, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
    5cb0:	4b08      	ldr	r3, [pc, #32]	; (5cd4 <dio_ssp_start+0x5c>)
    5cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5cb6:	601a      	str	r2, [r3, #0]
}
    5cb8:	46bd      	mov	sp, r7
    5cba:	f85d 7b04 	ldr.w	r7, [sp], #4
    5cbe:	4770      	bx	lr
    5cc0:	2009c098 	.word	0x2009c098
    5cc4:	40030024 	.word	0x40030024
    5cc8:	40030004 	.word	0x40030004
    5ccc:	50004110 	.word	0x50004110
    5cd0:	e000e100 	.word	0xe000e100
    5cd4:	2009c09c 	.word	0x2009c09c

00005cd8 <dio_ssp_stop>:

static void dio_ssp_stop()
{
    5cd8:	b480      	push	{r7}
    5cda:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    5cdc:	4b21      	ldr	r3, [pc, #132]	; (5d64 <dio_ssp_stop+0x8c>)
    5cde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5ce2:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5ce4:	4a20      	ldr	r2, [pc, #128]	; (5d68 <dio_ssp_stop+0x90>)
    5ce6:	4b20      	ldr	r3, [pc, #128]	; (5d68 <dio_ssp_stop+0x90>)
    5ce8:	681b      	ldr	r3, [r3, #0]
    5cea:	f023 0301 	bic.w	r3, r3, #1
    5cee:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    5cf0:	4a1e      	ldr	r2, [pc, #120]	; (5d6c <dio_ssp_stop+0x94>)
    5cf2:	4b1e      	ldr	r3, [pc, #120]	; (5d6c <dio_ssp_stop+0x94>)
    5cf4:	681b      	ldr	r3, [r3, #0]
    5cf6:	f023 0302 	bic.w	r3, r3, #2
    5cfa:	6013      	str	r3, [r2, #0]

	// disable DMA engine:
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 607

	// disable DMA interrupts
	ICER0 = ICER0_ICE_DMA;
    5cfc:	4b1c      	ldr	r3, [pc, #112]	; (5d70 <dio_ssp_stop+0x98>)
    5cfe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5d02:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    5d04:	4b1b      	ldr	r3, [pc, #108]	; (5d74 <dio_ssp_stop+0x9c>)
    5d06:	2200      	movs	r2, #0
    5d08:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5d0a:	4b1b      	ldr	r3, [pc, #108]	; (5d78 <dio_ssp_stop+0xa0>)
    5d0c:	2200      	movs	r2, #0
    5d0e:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    5d10:	4b1a      	ldr	r3, [pc, #104]	; (5d7c <dio_ssp_stop+0xa4>)
    5d12:	2200      	movs	r2, #0
    5d14:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5d16:	4b1a      	ldr	r3, [pc, #104]	; (5d80 <dio_ssp_stop+0xa8>)
    5d18:	2200      	movs	r2, #0
    5d1a:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    5d1c:	4b19      	ldr	r3, [pc, #100]	; (5d84 <dio_ssp_stop+0xac>)
    5d1e:	2200      	movs	r2, #0
    5d20:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5d22:	4b19      	ldr	r3, [pc, #100]	; (5d88 <dio_ssp_stop+0xb0>)
    5d24:	2200      	movs	r2, #0
    5d26:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    5d28:	4b18      	ldr	r3, [pc, #96]	; (5d8c <dio_ssp_stop+0xb4>)
    5d2a:	2200      	movs	r2, #0
    5d2c:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    5d2e:	4b18      	ldr	r3, [pc, #96]	; (5d90 <dio_ssp_stop+0xb8>)
    5d30:	2200      	movs	r2, #0
    5d32:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5d34:	4b17      	ldr	r3, [pc, #92]	; (5d94 <dio_ssp_stop+0xbc>)
    5d36:	22ff      	movs	r2, #255	; 0xff
    5d38:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5d3a:	4b17      	ldr	r3, [pc, #92]	; (5d98 <dio_ssp_stop+0xc0>)
    5d3c:	22ff      	movs	r2, #255	; 0xff
    5d3e:	601a      	str	r2, [r3, #0]

	// Disable the DMA controller by writing 0 to the DMA Enable bit in the DMACConfig
	// register.
	DMACConfig &= ~DMACConfig_E;
    5d40:	4a16      	ldr	r2, [pc, #88]	; (5d9c <dio_ssp_stop+0xc4>)
    5d42:	4b16      	ldr	r3, [pc, #88]	; (5d9c <dio_ssp_stop+0xc4>)
    5d44:	681b      	ldr	r3, [r3, #0]
    5d46:	f023 0301 	bic.w	r3, r3, #1
    5d4a:	6013      	str	r3, [r2, #0]
	while (DMACConfig & DMACConfig_E);
    5d4c:	bf00      	nop
    5d4e:	4b13      	ldr	r3, [pc, #76]	; (5d9c <dio_ssp_stop+0xc4>)
    5d50:	681b      	ldr	r3, [r3, #0]
    5d52:	f003 0301 	and.w	r3, r3, #1
    5d56:	2b00      	cmp	r3, #0
    5d58:	d1f9      	bne.n	5d4e <dio_ssp_stop+0x76>
}
    5d5a:	46bd      	mov	sp, r7
    5d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d60:	4770      	bx	lr
    5d62:	bf00      	nop
    5d64:	2009c098 	.word	0x2009c098
    5d68:	40030024 	.word	0x40030024
    5d6c:	40030004 	.word	0x40030004
    5d70:	e000e180 	.word	0xe000e180
    5d74:	50004110 	.word	0x50004110
    5d78:	50004130 	.word	0x50004130
    5d7c:	50004150 	.word	0x50004150
    5d80:	50004170 	.word	0x50004170
    5d84:	50004190 	.word	0x50004190
    5d88:	500041b0 	.word	0x500041b0
    5d8c:	500041d0 	.word	0x500041d0
    5d90:	500041f0 	.word	0x500041f0
    5d94:	50004008 	.word	0x50004008
    5d98:	50004010 	.word	0x50004010
    5d9c:	50004030 	.word	0x50004030

00005da0 <cc2400_idle>:

static void cc2400_idle()
{
    5da0:	b580      	push	{r7, lr}
    5da2:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    5da4:	2064      	movs	r0, #100	; 0x64
    5da6:	f005 fc57 	bl	b658 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5daa:	bf00      	nop
    5dac:	f005 fc4a 	bl	b644 <cc2400_status>
    5db0:	4603      	mov	r3, r0
    5db2:	f003 0304 	and.w	r3, r3, #4
    5db6:	2b00      	cmp	r3, #0
    5db8:	d1f8      	bne.n	5dac <cc2400_idle+0xc>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5dba:	4b0a      	ldr	r3, [pc, #40]	; (5de4 <cc2400_idle+0x44>)
    5dbc:	2280      	movs	r2, #128	; 0x80
    5dbe:	601a      	str	r2, [r3, #0]
	HGM_CLR;
    5dc0:	4b08      	ldr	r3, [pc, #32]	; (5de4 <cc2400_idle+0x44>)
    5dc2:	f44f 7280 	mov.w	r2, #256	; 0x100
    5dc6:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    5dc8:	4b07      	ldr	r3, [pc, #28]	; (5de8 <cc2400_idle+0x48>)
    5dca:	2210      	movs	r2, #16
    5dcc:	601a      	str	r2, [r3, #0]
	TXLED_CLR;
    5dce:	4b06      	ldr	r3, [pc, #24]	; (5de8 <cc2400_idle+0x48>)
    5dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
    5dd4:	601a      	str	r2, [r3, #0]
	USRLED_CLR;
    5dd6:	4b04      	ldr	r3, [pc, #16]	; (5de8 <cc2400_idle+0x48>)
    5dd8:	2202      	movs	r2, #2
    5dda:	601a      	str	r2, [r3, #0]
	mode = MODE_IDLE;
    5ddc:	4b03      	ldr	r3, [pc, #12]	; (5dec <cc2400_idle+0x4c>)
    5dde:	2200      	movs	r2, #0
    5de0:	701a      	strb	r2, [r3, #0]
}
    5de2:	bd80      	pop	{r7, pc}
    5de4:	2009c05c 	.word	0x2009c05c
    5de8:	2009c03c 	.word	0x2009c03c
    5dec:	10000a3e 	.word	0x10000a3e

00005df0 <cc2400_rx>:

/* start un-buffered rx */
static void cc2400_rx()
{
    5df0:	b580      	push	{r7, lr}
    5df2:	b082      	sub	sp, #8
    5df4:	af00      	add	r7, sp, #0
	u16 mdmctrl;
	if (modulation == MOD_BT_BASIC_RATE) {
    5df6:	4b2a      	ldr	r3, [pc, #168]	; (5ea0 <cc2400_rx+0xb0>)
    5df8:	781b      	ldrb	r3, [r3, #0]
    5dfa:	b2db      	uxtb	r3, r3
    5dfc:	2b00      	cmp	r3, #0
    5dfe:	d102      	bne.n	5e06 <cc2400_rx+0x16>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5e00:	2329      	movs	r3, #41	; 0x29
    5e02:	80fb      	strh	r3, [r7, #6]
    5e04:	e008      	b.n	5e18 <cc2400_rx+0x28>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5e06:	4b26      	ldr	r3, [pc, #152]	; (5ea0 <cc2400_rx+0xb0>)
    5e08:	781b      	ldrb	r3, [r3, #0]
    5e0a:	b2db      	uxtb	r3, r3
    5e0c:	2b01      	cmp	r3, #1
    5e0e:	d102      	bne.n	5e16 <cc2400_rx+0x26>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5e10:	2340      	movs	r3, #64	; 0x40
    5e12:	80fb      	strh	r3, [r7, #6]
    5e14:	e000      	b.n	5e18 <cc2400_rx+0x28>
	} else {
		/* oops */
		return;
    5e16:	e040      	b.n	5e9a <cc2400_rx+0xaa>
	}

	cc2400_set(MANAND,  0x7fff);
    5e18:	200d      	movs	r0, #13
    5e1a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5e1e:	f005 fb69 	bl	b4f4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5e22:	2012      	movs	r0, #18
    5e24:	f642 3122 	movw	r1, #11042	; 0x2b22
    5e28:	f005 fb64 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    5e2c:	2014      	movs	r0, #20
    5e2e:	f241 314b 	movw	r1, #4939	; 0x134b
    5e32:	f005 fb5f 	bl	b4f4 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    5e36:	2020      	movs	r0, #32
    5e38:	f240 1101 	movw	r1, #257	; 0x101
    5e3c:	f005 fb5a 	bl	b4f4 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 2 preamble bytes of 01010101
	//      |  +-----------------> not packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5e40:	4b18      	ldr	r3, [pc, #96]	; (5ea4 <cc2400_rx+0xb4>)
    5e42:	881b      	ldrh	r3, [r3, #0]
    5e44:	b29b      	uxth	r3, r3
    5e46:	3b01      	subs	r3, #1
    5e48:	b29b      	uxth	r3, r3
    5e4a:	2002      	movs	r0, #2
    5e4c:	4619      	mov	r1, r3
    5e4e:	f005 fb51 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5e52:	88fb      	ldrh	r3, [r7, #6]
    5e54:	2003      	movs	r0, #3
    5e56:	4619      	mov	r1, r3
    5e58:	f005 fb4c 	bl	b4f4 <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5e5c:	f7fe fdf8 	bl	4a50 <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5e60:	bf00      	nop
    5e62:	f005 fbef 	bl	b644 <cc2400_status>
    5e66:	4603      	mov	r3, r0
    5e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5e6c:	2b00      	cmp	r3, #0
    5e6e:	d0f8      	beq.n	5e62 <cc2400_rx+0x72>
	cc2400_strobe(SFSON);
    5e70:	2061      	movs	r0, #97	; 0x61
    5e72:	f005 fbf1 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5e76:	bf00      	nop
    5e78:	f005 fbe4 	bl	b644 <cc2400_status>
    5e7c:	4603      	mov	r3, r0
    5e7e:	f003 0304 	and.w	r3, r3, #4
    5e82:	2b00      	cmp	r3, #0
    5e84:	d0f8      	beq.n	5e78 <cc2400_rx+0x88>
	cc2400_strobe(SRX);
    5e86:	2062      	movs	r0, #98	; 0x62
    5e88:	f005 fbe6 	bl	b658 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5e8c:	4b06      	ldr	r3, [pc, #24]	; (5ea8 <cc2400_rx+0xb8>)
    5e8e:	2280      	movs	r2, #128	; 0x80
    5e90:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5e92:	4b05      	ldr	r3, [pc, #20]	; (5ea8 <cc2400_rx+0xb8>)
    5e94:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e98:	601a      	str	r2, [r3, #0]
#endif
}
    5e9a:	3708      	adds	r7, #8
    5e9c:	46bd      	mov	sp, r7
    5e9e:	bd80      	pop	{r7, pc}
    5ea0:	10000a42 	.word	0x10000a42
    5ea4:	1000049c 	.word	0x1000049c
    5ea8:	2009c058 	.word	0x2009c058

00005eac <cc2400_rx_sync>:

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    5eac:	b580      	push	{r7, lr}
    5eae:	b084      	sub	sp, #16
    5eb0:	af00      	add	r7, sp, #0
    5eb2:	6078      	str	r0, [r7, #4]
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    5eb4:	4b33      	ldr	r3, [pc, #204]	; (5f84 <cc2400_rx_sync+0xd8>)
    5eb6:	781b      	ldrb	r3, [r3, #0]
    5eb8:	b2db      	uxtb	r3, r3
    5eba:	2b00      	cmp	r3, #0
    5ebc:	d105      	bne.n	5eca <cc2400_rx_sync+0x1e>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5ebe:	2329      	movs	r3, #41	; 0x29
    5ec0:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    5ec2:	f240 4361 	movw	r3, #1121	; 0x461
    5ec6:	81fb      	strh	r3, [r7, #14]
    5ec8:	e00b      	b.n	5ee2 <cc2400_rx_sync+0x36>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5eca:	4b2e      	ldr	r3, [pc, #184]	; (5f84 <cc2400_rx_sync+0xd8>)
    5ecc:	781b      	ldrb	r3, [r3, #0]
    5ece:	b2db      	uxtb	r3, r3
    5ed0:	2b01      	cmp	r3, #1
    5ed2:	d105      	bne.n	5ee0 <cc2400_rx_sync+0x34>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5ed4:	2340      	movs	r3, #64	; 0x40
    5ed6:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    5ed8:	f240 5361 	movw	r3, #1377	; 0x561
    5edc:	81fb      	strh	r3, [r7, #14]
    5ede:	e000      	b.n	5ee2 <cc2400_rx_sync+0x36>
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else {
		/* oops */
		return;
    5ee0:	e04d      	b.n	5f7e <cc2400_rx_sync+0xd2>
	}

	cc2400_set(MANAND,  0x7fff);
    5ee2:	200d      	movs	r0, #13
    5ee4:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5ee8:	f005 fb04 	bl	b4f4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5eec:	2012      	movs	r0, #18
    5eee:	f642 3122 	movw	r1, #11042	; 0x2b22
    5ef2:	f005 faff 	bl	b4f4 <cc2400_set>

	cc2400_set(MDMTST0, 0x124b);
    5ef6:	2014      	movs	r0, #20
    5ef8:	f241 214b 	movw	r1, #4683	; 0x124b
    5efc:	f005 fafa 	bl	b4f4 <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    5f00:	89fb      	ldrh	r3, [r7, #14]
    5f02:	2020      	movs	r0, #32
    5f04:	4619      	mov	r1, r3
    5f06:	f005 faf5 	bl	b4f4 <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    5f0a:	687b      	ldr	r3, [r7, #4]
    5f0c:	b29b      	uxth	r3, r3
    5f0e:	202c      	movs	r0, #44	; 0x2c
    5f10:	4619      	mov	r1, r3
    5f12:	f005 faef 	bl	b4f4 <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    5f16:	687b      	ldr	r3, [r7, #4]
    5f18:	0c1b      	lsrs	r3, r3, #16
    5f1a:	b29b      	uxth	r3, r3
    5f1c:	202d      	movs	r0, #45	; 0x2d
    5f1e:	4619      	mov	r1, r3
    5f20:	f005 fae8 	bl	b4f4 <cc2400_set>
	
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5f24:	4b18      	ldr	r3, [pc, #96]	; (5f88 <cc2400_rx_sync+0xdc>)
    5f26:	881b      	ldrh	r3, [r3, #0]
    5f28:	b29b      	uxth	r3, r3
    5f2a:	3b01      	subs	r3, #1
    5f2c:	b29b      	uxth	r3, r3
    5f2e:	2002      	movs	r0, #2
    5f30:	4619      	mov	r1, r3
    5f32:	f005 fadf 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5f36:	89bb      	ldrh	r3, [r7, #12]
    5f38:	2003      	movs	r0, #3
    5f3a:	4619      	mov	r1, r3
    5f3c:	f005 fada 	bl	b4f4 <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5f40:	f7fe fd86 	bl	4a50 <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5f44:	bf00      	nop
    5f46:	f005 fb7d 	bl	b644 <cc2400_status>
    5f4a:	4603      	mov	r3, r0
    5f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5f50:	2b00      	cmp	r3, #0
    5f52:	d0f8      	beq.n	5f46 <cc2400_rx_sync+0x9a>
	cc2400_strobe(SFSON);
    5f54:	2061      	movs	r0, #97	; 0x61
    5f56:	f005 fb7f 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5f5a:	bf00      	nop
    5f5c:	f005 fb72 	bl	b644 <cc2400_status>
    5f60:	4603      	mov	r3, r0
    5f62:	f003 0304 	and.w	r3, r3, #4
    5f66:	2b00      	cmp	r3, #0
    5f68:	d0f8      	beq.n	5f5c <cc2400_rx_sync+0xb0>
	cc2400_strobe(SRX);
    5f6a:	2062      	movs	r0, #98	; 0x62
    5f6c:	f005 fb74 	bl	b658 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5f70:	4b06      	ldr	r3, [pc, #24]	; (5f8c <cc2400_rx_sync+0xe0>)
    5f72:	2280      	movs	r2, #128	; 0x80
    5f74:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5f76:	4b05      	ldr	r3, [pc, #20]	; (5f8c <cc2400_rx_sync+0xe0>)
    5f78:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f7c:	601a      	str	r2, [r3, #0]
#endif
}
    5f7e:	3710      	adds	r7, #16
    5f80:	46bd      	mov	sp, r7
    5f82:	bd80      	pop	{r7, pc}
    5f84:	10000a42 	.word	0x10000a42
    5f88:	1000049c 	.word	0x1000049c
    5f8c:	2009c058 	.word	0x2009c058

00005f90 <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data)
{
    5f90:	b580      	push	{r7, lr}
    5f92:	b09a      	sub	sp, #104	; 0x68
    5f94:	af00      	add	r7, sp, #0
    5f96:	60f8      	str	r0, [r7, #12]
    5f98:	460b      	mov	r3, r1
    5f9a:	607a      	str	r2, [r7, #4]
    5f9c:	72fb      	strb	r3, [r7, #11]
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5f9e:	2300      	movs	r3, #0
    5fa0:	667b      	str	r3, [r7, #100]	; 0x64
    5fa2:	e035      	b.n	6010 <le_transmit+0x80>
		byte = aa & 0xff;
    5fa4:	68fb      	ldr	r3, [r7, #12]
    5fa6:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		aa >>= 8;
    5faa:	68fb      	ldr	r3, [r7, #12]
    5fac:	0a1b      	lsrs	r3, r3, #8
    5fae:	60fb      	str	r3, [r7, #12]
		txbuf[i] = 0;
    5fb0:	f107 0210 	add.w	r2, r7, #16
    5fb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5fb6:	4413      	add	r3, r2
    5fb8:	2200      	movs	r2, #0
    5fba:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; ++j) {
    5fbc:	2300      	movs	r3, #0
    5fbe:	663b      	str	r3, [r7, #96]	; 0x60
    5fc0:	e020      	b.n	6004 <le_transmit+0x74>
			txbuf[i] |= (byte & 1) << (7 - j);
    5fc2:	f107 0210 	add.w	r2, r7, #16
    5fc6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5fc8:	4413      	add	r3, r2
    5fca:	781b      	ldrb	r3, [r3, #0]
    5fcc:	b2d9      	uxtb	r1, r3
    5fce:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5fd2:	f003 0301 	and.w	r3, r3, #1
    5fd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5fd8:	f1c2 0207 	rsb	r2, r2, #7
    5fdc:	4093      	lsls	r3, r2
    5fde:	b2db      	uxtb	r3, r3
    5fe0:	460a      	mov	r2, r1
    5fe2:	4313      	orrs	r3, r2
    5fe4:	b2db      	uxtb	r3, r3
    5fe6:	b2d9      	uxtb	r1, r3
    5fe8:	f107 0210 	add.w	r2, r7, #16
    5fec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5fee:	4413      	add	r3, r2
    5ff0:	460a      	mov	r2, r1
    5ff2:	701a      	strb	r2, [r3, #0]
			byte >>= 1;
    5ff4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5ff8:	085b      	lsrs	r3, r3, #1
    5ffa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    5ffe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6000:	3301      	adds	r3, #1
    6002:	663b      	str	r3, [r7, #96]	; 0x60
    6004:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6006:	2b07      	cmp	r3, #7
    6008:	d9db      	bls.n	5fc2 <le_transmit+0x32>
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    600a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    600c:	3301      	adds	r3, #1
    600e:	667b      	str	r3, [r7, #100]	; 0x64
    6010:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6012:	2b03      	cmp	r3, #3
    6014:	d9c6      	bls.n	5fa4 <le_transmit+0x14>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
    6016:	4b93      	ldr	r3, [pc, #588]	; (6264 <le_transmit+0x2d4>)
    6018:	881b      	ldrh	r3, [r3, #0]
    601a:	b29b      	uxth	r3, r3
    601c:	b2db      	uxtb	r3, r3
    601e:	3b62      	subs	r3, #98	; 0x62
    6020:	b2db      	uxtb	r3, r3
    6022:	4618      	mov	r0, r3
    6024:	f003 fec2 	bl	9dac <btle_channel_index>
    6028:	4603      	mov	r3, r0
    602a:	461a      	mov	r2, r3
    602c:	4b8e      	ldr	r3, [pc, #568]	; (6268 <le_transmit+0x2d8>)
    602e:	5c9b      	ldrb	r3, [r3, r2]
    6030:	65bb      	str	r3, [r7, #88]	; 0x58
	for (i = 0; i < len; ++i) {
    6032:	2300      	movs	r3, #0
    6034:	667b      	str	r3, [r7, #100]	; 0x64
    6036:	e050      	b.n	60da <le_transmit+0x14a>
		byte = data[i];
    6038:	687a      	ldr	r2, [r7, #4]
    603a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    603c:	4413      	add	r3, r2
    603e:	781b      	ldrb	r3, [r3, #0]
    6040:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		txbuf[i+4] = 0;
    6044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6046:	3304      	adds	r3, #4
    6048:	f107 0268 	add.w	r2, r7, #104	; 0x68
    604c:	4413      	add	r3, r2
    604e:	2200      	movs	r2, #0
    6050:	f803 2c58 	strb.w	r2, [r3, #-88]
		for (j = 0; j < 8; ++j) {
    6054:	2300      	movs	r3, #0
    6056:	663b      	str	r3, [r7, #96]	; 0x60
    6058:	e039      	b.n	60ce <le_transmit+0x13e>
			bit = (byte & 1) ^ whitening[idx];
    605a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    605e:	f003 0301 	and.w	r3, r3, #1
    6062:	4982      	ldr	r1, [pc, #520]	; (626c <le_transmit+0x2dc>)
    6064:	6dba      	ldr	r2, [r7, #88]	; 0x58
    6066:	440a      	add	r2, r1
    6068:	7812      	ldrb	r2, [r2, #0]
    606a:	4053      	eors	r3, r2
    606c:	657b      	str	r3, [r7, #84]	; 0x54
			idx = (idx + 1) % sizeof(whitening);
    606e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    6070:	3301      	adds	r3, #1
    6072:	4619      	mov	r1, r3
    6074:	4b7e      	ldr	r3, [pc, #504]	; (6270 <le_transmit+0x2e0>)
    6076:	fba1 2303 	umull	r2, r3, r1, r3
    607a:	1ac8      	subs	r0, r1, r3
    607c:	0840      	lsrs	r0, r0, #1
    607e:	4403      	add	r3, r0
    6080:	099a      	lsrs	r2, r3, #6
    6082:	4613      	mov	r3, r2
    6084:	01db      	lsls	r3, r3, #7
    6086:	1a9b      	subs	r3, r3, r2
    6088:	1aca      	subs	r2, r1, r3
    608a:	65ba      	str	r2, [r7, #88]	; 0x58
			byte >>= 1;
    608c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    6090:	085b      	lsrs	r3, r3, #1
    6092:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			txbuf[i+4] |= bit << (7 - j);
    6096:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6098:	3304      	adds	r3, #4
    609a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    609c:	3204      	adds	r2, #4
    609e:	f107 0168 	add.w	r1, r7, #104	; 0x68
    60a2:	440a      	add	r2, r1
    60a4:	f812 2c58 	ldrb.w	r2, [r2, #-88]
    60a8:	b2d1      	uxtb	r1, r2
    60aa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    60ac:	f1c2 0207 	rsb	r2, r2, #7
    60b0:	4610      	mov	r0, r2
    60b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    60b4:	4082      	lsls	r2, r0
    60b6:	b2d2      	uxtb	r2, r2
    60b8:	430a      	orrs	r2, r1
    60ba:	b2d2      	uxtb	r2, r2
    60bc:	b2d2      	uxtb	r2, r2
    60be:	f107 0168 	add.w	r1, r7, #104	; 0x68
    60c2:	440b      	add	r3, r1
    60c4:	f803 2c58 	strb.w	r2, [r3, #-88]
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    60c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    60ca:	3301      	adds	r3, #1
    60cc:	663b      	str	r3, [r7, #96]	; 0x60
    60ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    60d0:	2b07      	cmp	r3, #7
    60d2:	d9c2      	bls.n	605a <le_transmit+0xca>
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
    60d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    60d6:	3301      	adds	r3, #1
    60d8:	667b      	str	r3, [r7, #100]	; 0x64
    60da:	7afa      	ldrb	r2, [r7, #11]
    60dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    60de:	429a      	cmp	r2, r3
    60e0:	d8aa      	bhi.n	6038 <le_transmit+0xa8>
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    60e2:	7afb      	ldrb	r3, [r7, #11]
    60e4:	3304      	adds	r3, #4
    60e6:	72fb      	strb	r3, [r7, #11]

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    60e8:	200d      	movs	r0, #13
    60ea:	f647 71ff 	movw	r1, #32767	; 0x7fff
    60ee:	f005 fa01 	bl	b4f4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    60f2:	2012      	movs	r0, #18
    60f4:	f642 3122 	movw	r1, #11042	; 0x2b22
    60f8:	f005 f9fc 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    60fc:	2014      	movs	r0, #20
    60fe:	f241 314b 	movw	r1, #4939	; 0x134b
    6102:	f005 f9f7 	bl	b4f4 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    6106:	2020      	movs	r0, #32
    6108:	f640 4101 	movw	r1, #3073	; 0xc01
    610c:	f005 f9f2 	bl	b4f4 <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   channel);
    6110:	4b54      	ldr	r3, [pc, #336]	; (6264 <le_transmit+0x2d4>)
    6112:	881b      	ldrh	r3, [r3, #0]
    6114:	b29b      	uxth	r3, r3
    6116:	2002      	movs	r0, #2
    6118:	4619      	mov	r1, r3
    611a:	f005 f9eb 	bl	b4f4 <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    611e:	2005      	movs	r0, #5
    6120:	210b      	movs	r1, #11
    6122:	f005 f9e7 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    6126:	2003      	movs	r0, #3
    6128:	2140      	movs	r1, #64	; 0x40
    612a:	f005 f9e3 	bl	b4f4 <cc2400_set>
	cc2400_set(INT,     0x0014);	// FIFO_THRESHOLD: 20 bytes
    612e:	2023      	movs	r0, #35	; 0x23
    6130:	2114      	movs	r1, #20
    6132:	f005 f9df 	bl	b4f4 <cc2400_set>

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    6136:	68fb      	ldr	r3, [r7, #12]
    6138:	f003 0301 	and.w	r3, r3, #1
    613c:	2b00      	cmp	r3, #0
    613e:	d005      	beq.n	614c <le_transmit+0x1bc>
		cc2400_set(SYNCH,   0xaaaa);
    6140:	202d      	movs	r0, #45	; 0x2d
    6142:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
    6146:	f005 f9d5 	bl	b4f4 <cc2400_set>
    614a:	e004      	b.n	6156 <le_transmit+0x1c6>
	else
		cc2400_set(SYNCH,   0x5555);
    614c:	202d      	movs	r0, #45	; 0x2d
    614e:	f245 5155 	movw	r1, #21845	; 0x5555
    6152:	f005 f9cf 	bl	b4f4 <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    6156:	2008      	movs	r0, #8
    6158:	f005 f9b6 	bl	b4c8 <cc2400_get>
    615c:	4603      	mov	r3, r0
    615e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    6162:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    6166:	f3c3 0308 	ubfx	r3, r3, #0, #9
    616a:	b29b      	uxth	r3, r3
    616c:	f443 439c 	orr.w	r3, r3, #19968	; 0x4e00
    6170:	b29b      	uxth	r3, r3
    6172:	b29b      	uxth	r3, r3
    6174:	2008      	movs	r0, #8
    6176:	4619      	mov	r1, r3
    6178:	f005 f9bc 	bl	b4f4 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    617c:	bf00      	nop
    617e:	f005 fa61 	bl	b644 <cc2400_status>
    6182:	4603      	mov	r3, r0
    6184:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6188:	2b00      	cmp	r3, #0
    618a:	d0f8      	beq.n	617e <le_transmit+0x1ee>
	cc2400_strobe(SFSON);
    618c:	2061      	movs	r0, #97	; 0x61
    618e:	f005 fa63 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6192:	bf00      	nop
    6194:	f005 fa56 	bl	b644 <cc2400_status>
    6198:	4603      	mov	r3, r0
    619a:	f003 0304 	and.w	r3, r3, #4
    619e:	2b00      	cmp	r3, #0
    61a0:	d0f8      	beq.n	6194 <le_transmit+0x204>
	TXLED_SET;
    61a2:	4b34      	ldr	r3, [pc, #208]	; (6274 <le_transmit+0x2e4>)
    61a4:	f44f 7280 	mov.w	r2, #256	; 0x100
    61a8:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    61aa:	4b33      	ldr	r3, [pc, #204]	; (6278 <le_transmit+0x2e8>)
    61ac:	2280      	movs	r2, #128	; 0x80
    61ae:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    61b0:	bf00      	nop
    61b2:	200e      	movs	r0, #14
    61b4:	f005 f988 	bl	b4c8 <cc2400_get>
    61b8:	4603      	mov	r3, r0
    61ba:	f003 031f 	and.w	r3, r3, #31
    61be:	2b0f      	cmp	r3, #15
    61c0:	d1f7      	bne.n	61b2 <le_transmit+0x222>
	cc2400_strobe(STX);
    61c2:	2063      	movs	r0, #99	; 0x63
    61c4:	f005 fa48 	bl	b658 <cc2400_strobe>

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    61c8:	2300      	movs	r3, #0
    61ca:	667b      	str	r3, [r7, #100]	; 0x64
    61cc:	e021      	b.n	6212 <le_transmit+0x282>
		while (GIO6) ; // wait for the FIFO to drain (FIFO_FULL false)
    61ce:	bf00      	nop
    61d0:	4b2a      	ldr	r3, [pc, #168]	; (627c <le_transmit+0x2ec>)
    61d2:	681b      	ldr	r3, [r3, #0]
    61d4:	f003 0304 	and.w	r3, r3, #4
    61d8:	2b00      	cmp	r3, #0
    61da:	d1f9      	bne.n	61d0 <le_transmit+0x240>
		tx_len = len - i;
    61dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    61de:	b2db      	uxtb	r3, r3
    61e0:	7afa      	ldrb	r2, [r7, #11]
    61e2:	1ad3      	subs	r3, r2, r3
    61e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (tx_len > 16)
    61e8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    61ec:	2b10      	cmp	r3, #16
    61ee:	d902      	bls.n	61f6 <le_transmit+0x266>
			tx_len = 16;
    61f0:	2310      	movs	r3, #16
    61f2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
    61f6:	f107 0210 	add.w	r2, r7, #16
    61fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    61fc:	4413      	add	r3, r2
    61fe:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
    6202:	2070      	movs	r0, #112	; 0x70
    6204:	4611      	mov	r1, r2
    6206:	461a      	mov	r2, r3
    6208:	f005 f9b6 	bl	b578 <cc2400_spi_buf>
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    620c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    620e:	3310      	adds	r3, #16
    6210:	667b      	str	r3, [r7, #100]	; 0x64
    6212:	7afa      	ldrb	r2, [r7, #11]
    6214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6216:	429a      	cmp	r2, r3
    6218:	d8d9      	bhi.n	61ce <le_transmit+0x23e>
		if (tx_len > 16)
			tx_len = 16;
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
	}

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    621a:	bf00      	nop
    621c:	200e      	movs	r0, #14
    621e:	f005 f953 	bl	b4c8 <cc2400_get>
    6222:	4603      	mov	r3, r0
    6224:	f003 031f 	and.w	r3, r3, #31
    6228:	2b0f      	cmp	r3, #15
    622a:	d1f7      	bne.n	621c <le_transmit+0x28c>
	TXLED_CLR;
    622c:	4b14      	ldr	r3, [pc, #80]	; (6280 <le_transmit+0x2f0>)
    622e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6232:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    6234:	2064      	movs	r0, #100	; 0x64
    6236:	f005 fa0f 	bl	b658 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    623a:	bf00      	nop
    623c:	f005 fa02 	bl	b644 <cc2400_status>
    6240:	4603      	mov	r3, r0
    6242:	f003 0304 	and.w	r3, r3, #4
    6246:	2b00      	cmp	r3, #0
    6248:	d1f8      	bne.n	623c <le_transmit+0x2ac>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    624a:	4b0e      	ldr	r3, [pc, #56]	; (6284 <le_transmit+0x2f4>)
    624c:	2280      	movs	r2, #128	; 0x80
    624e:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    6250:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    6254:	2008      	movs	r0, #8
    6256:	4619      	mov	r1, r3
    6258:	f005 f94c 	bl	b4f4 <cc2400_set>
}
    625c:	3768      	adds	r7, #104	; 0x68
    625e:	46bd      	mov	sp, r7
    6260:	bd80      	pop	{r7, pc}
    6262:	bf00      	nop
    6264:	1000049c 	.word	0x1000049c
    6268:	0000d28c 	.word	0x0000d28c
    626c:	0000d20c 	.word	0x0000d20c
    6270:	02040811 	.word	0x02040811
    6274:	2009c038 	.word	0x2009c038
    6278:	2009c058 	.word	0x2009c058
    627c:	2009c054 	.word	0x2009c054
    6280:	2009c03c 	.word	0x2009c03c
    6284:	2009c05c 	.word	0x2009c05c

00006288 <le_jam>:

void le_jam(void) {
    6288:	b580      	push	{r7, lr}
    628a:	af00      	add	r7, sp, #0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    628c:	200d      	movs	r0, #13
    628e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    6292:	f005 f92f 	bl	b4f4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    6296:	2012      	movs	r0, #18
    6298:	f642 3122 	movw	r1, #11042	; 0x2b22
    629c:	f005 f92a 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    62a0:	2014      	movs	r0, #20
    62a2:	f242 314b 	movw	r1, #9035	; 0x234b
    62a6:	f005 f925 	bl	b4f4 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    62aa:	2020      	movs	r0, #32
    62ac:	f640 4101 	movw	r1, #3073	; 0xc01
    62b0:	f005 f920 	bl	b4f4 <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    62b4:	2005      	movs	r0, #5
    62b6:	210b      	movs	r1, #11
    62b8:	f005 f91c 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    62bc:	2003      	movs	r0, #3
    62be:	2140      	movs	r1, #64	; 0x40
    62c0:	f005 f918 	bl	b4f4 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    62c4:	bf00      	nop
    62c6:	f005 f9bd 	bl	b644 <cc2400_status>
    62ca:	4603      	mov	r3, r0
    62cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    62d0:	2b00      	cmp	r3, #0
    62d2:	d0f8      	beq.n	62c6 <le_jam+0x3e>
	cc2400_strobe(SFSON);
    62d4:	2061      	movs	r0, #97	; 0x61
    62d6:	f005 f9bf 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    62da:	bf00      	nop
    62dc:	f005 f9b2 	bl	b644 <cc2400_status>
    62e0:	4603      	mov	r3, r0
    62e2:	f003 0304 	and.w	r3, r3, #4
    62e6:	2b00      	cmp	r3, #0
    62e8:	d0f8      	beq.n	62dc <le_jam+0x54>
	TXLED_SET;
    62ea:	4b0a      	ldr	r3, [pc, #40]	; (6314 <le_jam+0x8c>)
    62ec:	f44f 7280 	mov.w	r2, #256	; 0x100
    62f0:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    62f2:	4b09      	ldr	r3, [pc, #36]	; (6318 <le_jam+0x90>)
    62f4:	2280      	movs	r2, #128	; 0x80
    62f6:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    62f8:	bf00      	nop
    62fa:	200e      	movs	r0, #14
    62fc:	f005 f8e4 	bl	b4c8 <cc2400_get>
    6300:	4603      	mov	r3, r0
    6302:	f003 031f 	and.w	r3, r3, #31
    6306:	2b0f      	cmp	r3, #15
    6308:	d1f7      	bne.n	62fa <le_jam+0x72>
	cc2400_strobe(STX);
    630a:	2063      	movs	r0, #99	; 0x63
    630c:	f005 f9a4 	bl	b658 <cc2400_strobe>
#endif
}
    6310:	bd80      	pop	{r7, pc}
    6312:	bf00      	nop
    6314:	2009c038 	.word	0x2009c038
    6318:	2009c058 	.word	0x2009c058

0000631c <hop>:

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    631c:	b580      	push	{r7, lr}
    631e:	af00      	add	r7, sp, #0
	do_hop = 0;
    6320:	4b41      	ldr	r3, [pc, #260]	; (6428 <hop+0x10c>)
    6322:	2200      	movs	r2, #0
    6324:	701a      	strb	r2, [r3, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    6326:	4b41      	ldr	r3, [pc, #260]	; (642c <hop+0x110>)
    6328:	781b      	ldrb	r3, [r3, #0]
    632a:	2b00      	cmp	r3, #0
    632c:	d10b      	bne.n	6346 <hop+0x2a>
		if (cc2400_get(FSDIV) == (channel - 1))
    632e:	2002      	movs	r0, #2
    6330:	f005 f8ca 	bl	b4c8 <cc2400_get>
    6334:	4603      	mov	r3, r0
    6336:	461a      	mov	r2, r3
    6338:	4b3d      	ldr	r3, [pc, #244]	; (6430 <hop+0x114>)
    633a:	881b      	ldrh	r3, [r3, #0]
    633c:	b29b      	uxth	r3, r3
    633e:	3b01      	subs	r3, #1
    6340:	429a      	cmp	r2, r3
    6342:	d147      	bne.n	63d4 <hop+0xb8>
			return;
    6344:	e06e      	b.n	6424 <hop+0x108>
	}

	// Slow sweep (100 hops/sec)
	else if (hop_mode == HOP_SWEEP) {
    6346:	4b39      	ldr	r3, [pc, #228]	; (642c <hop+0x110>)
    6348:	781b      	ldrb	r3, [r3, #0]
    634a:	2b01      	cmp	r3, #1
    634c:	d114      	bne.n	6378 <hop+0x5c>
		channel += 32;
    634e:	4b38      	ldr	r3, [pc, #224]	; (6430 <hop+0x114>)
    6350:	881b      	ldrh	r3, [r3, #0]
    6352:	b29b      	uxth	r3, r3
    6354:	3320      	adds	r3, #32
    6356:	b29a      	uxth	r2, r3
    6358:	4b35      	ldr	r3, [pc, #212]	; (6430 <hop+0x114>)
    635a:	801a      	strh	r2, [r3, #0]
		if (channel > 2480)
    635c:	4b34      	ldr	r3, [pc, #208]	; (6430 <hop+0x114>)
    635e:	881b      	ldrh	r3, [r3, #0]
    6360:	b29b      	uxth	r3, r3
    6362:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
    6366:	d935      	bls.n	63d4 <hop+0xb8>
			channel -= 79;
    6368:	4b31      	ldr	r3, [pc, #196]	; (6430 <hop+0x114>)
    636a:	881b      	ldrh	r3, [r3, #0]
    636c:	b29b      	uxth	r3, r3
    636e:	3b4f      	subs	r3, #79	; 0x4f
    6370:	b29a      	uxth	r2, r3
    6372:	4b2f      	ldr	r3, [pc, #188]	; (6430 <hop+0x114>)
    6374:	801a      	strh	r2, [r3, #0]
    6376:	e02d      	b.n	63d4 <hop+0xb8>
	}

	else if (hop_mode == HOP_BLUETOOTH) {
    6378:	4b2c      	ldr	r3, [pc, #176]	; (642c <hop+0x110>)
    637a:	781b      	ldrb	r3, [r3, #0]
    637c:	2b02      	cmp	r3, #2
    637e:	d10d      	bne.n	639c <hop+0x80>
		TXLED_SET;
    6380:	4b2c      	ldr	r3, [pc, #176]	; (6434 <hop+0x118>)
    6382:	f44f 7280 	mov.w	r2, #256	; 0x100
    6386:	601a      	str	r2, [r3, #0]
		channel = next_hop(clkn);
    6388:	4b2b      	ldr	r3, [pc, #172]	; (6438 <hop+0x11c>)
    638a:	681b      	ldr	r3, [r3, #0]
    638c:	4618      	mov	r0, r3
    638e:	f003 fc1f 	bl	9bd0 <next_hop>
    6392:	4603      	mov	r3, r0
    6394:	461a      	mov	r2, r3
    6396:	4b26      	ldr	r3, [pc, #152]	; (6430 <hop+0x114>)
    6398:	801a      	strh	r2, [r3, #0]
    639a:	e01b      	b.n	63d4 <hop+0xb8>
	}

	else if (hop_mode == HOP_BTLE) {
    639c:	4b23      	ldr	r3, [pc, #140]	; (642c <hop+0x110>)
    639e:	781b      	ldrb	r3, [r3, #0]
    63a0:	2b03      	cmp	r3, #3
    63a2:	d10b      	bne.n	63bc <hop+0xa0>
		TXLED_SET;
    63a4:	4b23      	ldr	r3, [pc, #140]	; (6434 <hop+0x118>)
    63a6:	f44f 7280 	mov.w	r2, #256	; 0x100
    63aa:	601a      	str	r2, [r3, #0]
		channel = btle_next_hop(&le);
    63ac:	4823      	ldr	r0, [pc, #140]	; (643c <hop+0x120>)
    63ae:	f003 fcd5 	bl	9d5c <btle_next_hop>
    63b2:	4603      	mov	r3, r0
    63b4:	461a      	mov	r2, r3
    63b6:	4b1e      	ldr	r3, [pc, #120]	; (6430 <hop+0x114>)
    63b8:	801a      	strh	r2, [r3, #0]
    63ba:	e00b      	b.n	63d4 <hop+0xb8>
	}

	else if (hop_mode == HOP_DIRECT) {
    63bc:	4b1b      	ldr	r3, [pc, #108]	; (642c <hop+0x110>)
    63be:	781b      	ldrb	r3, [r3, #0]
    63c0:	2b04      	cmp	r3, #4
    63c2:	d107      	bne.n	63d4 <hop+0xb8>
		TXLED_SET;
    63c4:	4b1b      	ldr	r3, [pc, #108]	; (6434 <hop+0x118>)
    63c6:	f44f 7280 	mov.w	r2, #256	; 0x100
    63ca:	601a      	str	r2, [r3, #0]
		channel = hop_direct_channel;
    63cc:	4b1c      	ldr	r3, [pc, #112]	; (6440 <hop+0x124>)
    63ce:	881a      	ldrh	r2, [r3, #0]
    63d0:	4b17      	ldr	r3, [pc, #92]	; (6430 <hop+0x114>)
    63d2:	801a      	strh	r2, [r3, #0]
	}

        /* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    63d4:	2064      	movs	r0, #100	; 0x64
    63d6:	f005 f93f 	bl	b658 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    63da:	bf00      	nop
    63dc:	f005 f932 	bl	b644 <cc2400_status>
    63e0:	4603      	mov	r3, r0
    63e2:	f003 0304 	and.w	r3, r3, #4
    63e6:	2b00      	cmp	r3, #0
    63e8:	d1f8      	bne.n	63dc <hop+0xc0>

	/* Retune */
	cc2400_set(FSDIV, channel - 1);
    63ea:	4b11      	ldr	r3, [pc, #68]	; (6430 <hop+0x114>)
    63ec:	881b      	ldrh	r3, [r3, #0]
    63ee:	b29b      	uxth	r3, r3
    63f0:	3b01      	subs	r3, #1
    63f2:	b29b      	uxth	r3, r3
    63f4:	2002      	movs	r0, #2
    63f6:	4619      	mov	r1, r3
    63f8:	f005 f87c 	bl	b4f4 <cc2400_set>
	
	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    63fc:	4b0b      	ldr	r3, [pc, #44]	; (642c <hop+0x110>)
    63fe:	781b      	ldrb	r3, [r3, #0]
    6400:	2b00      	cmp	r3, #0
    6402:	d001      	beq.n	6408 <hop+0xec>
		cs_threshold_calc_and_set();
    6404:	f7fe fb24 	bl	4a50 <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    6408:	2061      	movs	r0, #97	; 0x61
    640a:	f005 f925 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    640e:	bf00      	nop
    6410:	f005 f918 	bl	b644 <cc2400_status>
    6414:	4603      	mov	r3, r0
    6416:	f003 0304 	and.w	r3, r3, #4
    641a:	2b00      	cmp	r3, #0
    641c:	d0f8      	beq.n	6410 <hop+0xf4>
	
	/* RX mode */
	cc2400_strobe(SRX);
    641e:	2062      	movs	r0, #98	; 0x62
    6420:	f005 f91a 	bl	b658 <cc2400_strobe>

}
    6424:	bd80      	pop	{r7, pc}
    6426:	bf00      	nop
    6428:	1000097d 	.word	0x1000097d
    642c:	1000097c 	.word	0x1000097c
    6430:	1000049c 	.word	0x1000049c
    6434:	2009c038 	.word	0x2009c038
    6438:	10000bf4 	.word	0x10000bf4
    643c:	10000458 	.word	0x10000458
    6440:	10000980 	.word	0x10000980

00006444 <cc2400_get_rev>:
        in = cc2400_spi_rev(16, out);
        return in & 0xFF;
}
*/
u8 cc2400_get_rev(u8 reg)
{
    6444:	b480      	push	{r7}
    6446:	b087      	sub	sp, #28
    6448:	af00      	add	r7, sp, #0
    644a:	4603      	mov	r3, r0
    644c:	71fb      	strb	r3, [r7, #7]
//        u32 in;

        u32 out = (reg | 0x80) << 8;
    644e:	79fb      	ldrb	r3, [r7, #7]
    6450:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6454:	b2db      	uxtb	r3, r3
    6456:	021b      	lsls	r3, r3, #8
    6458:	617b      	str	r3, [r7, #20]
//        in = cc2400_spi_rev(16, out);
        u32 msb = 1 << 15;
    645a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    645e:	60fb      	str	r3, [r7, #12]
	
	u8 len = 16;
    6460:	2310      	movs	r3, #16
    6462:	74fb      	strb	r3, [r7, #19]
        /* start transaction by dropping CSN */
        CSN_CLR;
    6464:	4b19      	ldr	r3, [pc, #100]	; (64cc <cc2400_get_rev+0x88>)
    6466:	2220      	movs	r2, #32
    6468:	601a      	str	r2, [r3, #0]
//      first_ts = CLK100NS;
        while (len--) {
    646a:	e01e      	b.n	64aa <cc2400_get_rev+0x66>
                if (out & msb)
    646c:	697a      	ldr	r2, [r7, #20]
    646e:	68fb      	ldr	r3, [r7, #12]
    6470:	4013      	ands	r3, r2
    6472:	2b00      	cmp	r3, #0
    6474:	d003      	beq.n	647e <cc2400_get_rev+0x3a>
                        MOSI_SET;
    6476:	4b16      	ldr	r3, [pc, #88]	; (64d0 <cc2400_get_rev+0x8c>)
    6478:	2201      	movs	r2, #1
    647a:	601a      	str	r2, [r3, #0]
    647c:	e002      	b.n	6484 <cc2400_get_rev+0x40>
                else
                        MOSI_CLR;
    647e:	4b13      	ldr	r3, [pc, #76]	; (64cc <cc2400_get_rev+0x88>)
    6480:	2201      	movs	r2, #1
    6482:	601a      	str	r2, [r3, #0]
              
		out <<= 1;
    6484:	697b      	ldr	r3, [r7, #20]
    6486:	005b      	lsls	r3, r3, #1
    6488:	617b      	str	r3, [r7, #20]

                SCLK_SET;
    648a:	4b11      	ldr	r3, [pc, #68]	; (64d0 <cc2400_get_rev+0x8c>)
    648c:	2210      	movs	r2, #16
    648e:	601a      	str	r2, [r3, #0]
                if (MISO)
    6490:	4b10      	ldr	r3, [pc, #64]	; (64d4 <cc2400_get_rev+0x90>)
    6492:	681b      	ldr	r3, [r3, #0]
    6494:	f003 0302 	and.w	r3, r3, #2
    6498:	2b00      	cmp	r3, #0
    649a:	d003      	beq.n	64a4 <cc2400_get_rev+0x60>
                        out |= 1;
    649c:	697b      	ldr	r3, [r7, #20]
    649e:	f043 0301 	orr.w	r3, r3, #1
    64a2:	617b      	str	r3, [r7, #20]

                SCLK_CLR;
    64a4:	4b09      	ldr	r3, [pc, #36]	; (64cc <cc2400_get_rev+0x88>)
    64a6:	2210      	movs	r2, #16
    64a8:	601a      	str	r2, [r3, #0]
	
	u8 len = 16;
        /* start transaction by dropping CSN */
        CSN_CLR;
//      first_ts = CLK100NS;
        while (len--) {
    64aa:	7cfb      	ldrb	r3, [r7, #19]
    64ac:	1e5a      	subs	r2, r3, #1
    64ae:	74fa      	strb	r2, [r7, #19]
    64b0:	2b00      	cmp	r3, #0
    64b2:	d1db      	bne.n	646c <cc2400_get_rev+0x28>
                SCLK_CLR;
        }
//      second_ts = CLK100NS;
//      diff_ts = second_ts - first_ts;

        CSN_SET;
    64b4:	4b06      	ldr	r3, [pc, #24]	; (64d0 <cc2400_get_rev+0x8c>)
    64b6:	2220      	movs	r2, #32
    64b8:	601a      	str	r2, [r3, #0]
  

        return out & 0xFF;
    64ba:	697b      	ldr	r3, [r7, #20]
    64bc:	b2db      	uxtb	r3, r3
}
    64be:	4618      	mov	r0, r3
    64c0:	371c      	adds	r7, #28
    64c2:	46bd      	mov	sp, r7
    64c4:	f85d 7b04 	ldr.w	r7, [sp], #4
    64c8:	4770      	bx	lr
    64ca:	bf00      	nop
    64cc:	2009c05c 	.word	0x2009c05c
    64d0:	2009c058 	.word	0x2009c058
    64d4:	2009c054 	.word	0x2009c054

000064d8 <add>:


u8 add (u8 x, u8 y)
{
    64d8:	b480      	push	{r7}
    64da:	b085      	sub	sp, #20
    64dc:	af00      	add	r7, sp, #0
    64de:	4603      	mov	r3, r0
    64e0:	460a      	mov	r2, r1
    64e2:	71fb      	strb	r3, [r7, #7]
    64e4:	4613      	mov	r3, r2
    64e6:	71bb      	strb	r3, [r7, #6]
  while (y)
    64e8:	e00a      	b.n	6500 <add+0x28>
  {
    u8 carry = x & y;
    64ea:	79fa      	ldrb	r2, [r7, #7]
    64ec:	79bb      	ldrb	r3, [r7, #6]
    64ee:	4013      	ands	r3, r2
    64f0:	73fb      	strb	r3, [r7, #15]
    x = x ^ y;
    64f2:	79fa      	ldrb	r2, [r7, #7]
    64f4:	79bb      	ldrb	r3, [r7, #6]
    64f6:	4053      	eors	r3, r2
    64f8:	71fb      	strb	r3, [r7, #7]
    y = carry << 1;
    64fa:	7bfb      	ldrb	r3, [r7, #15]
    64fc:	005b      	lsls	r3, r3, #1
    64fe:	71bb      	strb	r3, [r7, #6]
}


u8 add (u8 x, u8 y)
{
  while (y)
    6500:	79bb      	ldrb	r3, [r7, #6]
    6502:	2b00      	cmp	r3, #0
    6504:	d1f1      	bne.n	64ea <add+0x12>
  {
    u8 carry = x & y;
    x = x ^ y;
    y = carry << 1;
  }
  return x;
    6506:	79fb      	ldrb	r3, [r7, #7]
}
    6508:	4618      	mov	r0, r3
    650a:	3714      	adds	r7, #20
    650c:	46bd      	mov	sp, r7
    650e:	f85d 7b04 	ldr.w	r7, [sp], #4
    6512:	4770      	bx	lr

00006514 <bt_stream_hop>:

//wpson hop
void bt_stream_hop ()
{
    6514:	b590      	push	{r4, r7, lr}
    6516:	b097      	sub	sp, #92	; 0x5c
    6518:	af00      	add	r7, sp, #0
	RXLED_CLR;
    651a:	4bab      	ldr	r3, [pc, #684]	; (67c8 <bt_stream_hop+0x2b4>)
    651c:	2210      	movs	r2, #16
    651e:	601a      	str	r2, [r3, #0]
	int i ;

	ISER0 = ISER0_ISE_USB;
    6520:	4baa      	ldr	r3, [pc, #680]	; (67cc <bt_stream_hop+0x2b8>)
    6522:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6526:	601a      	str	r2, [r3, #0]
	
	queue_init();
    6528:	f003 fdc0 	bl	a0ac <queue_init>
	dio_ssp_init();
    652c:	f004 ff10 	bl	b350 <dio_ssp_init>
	dma_init_le();
    6530:	f7ff fa2a 	bl	5988 <dma_init_le>
	dio_ssp_start();
    6534:	f7ff fba0 	bl	5c78 <dio_ssp_start>
	
	cc2400_set(MANAND, 0x7fff);
    6538:	200d      	movs	r0, #13
    653a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    653e:	f004 ffd9 	bl	b4f4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    6542:	2012      	movs	r0, #18
    6544:	f642 3122 	movw	r1, #11042	; 0x2b22
    6548:	f004 ffd4 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    654c:	2014      	movs	r0, #20
    654e:	f241 214b 	movw	r1, #4683	; 0x124b
    6552:	f004 ffcf 	bl	b4f4 <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    6556:	2020      	movs	r0, #32
    6558:	f240 5161 	movw	r1, #1377	; 0x561
    655c:	f004 ffca 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    6560:	2003      	movs	r0, #3
    6562:	2140      	movs	r1, #64	; 0x40
    6564:	f004 ffc6 	bl	b4f4 <cc2400_set>

//	cc2400_set(SYNCH, 0xf9ae);
//	cc2400_set(SYNCL, 0x1584);
	
	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
    6568:	4899      	ldr	r0, [pc, #612]	; (67d0 <bt_stream_hop+0x2bc>)
    656a:	f004 fdf1 	bl	b150 <rbit>
    656e:	4603      	mov	r3, r0
    6570:	b29b      	uxth	r3, r3
    6572:	202c      	movs	r0, #44	; 0x2c
    6574:	4619      	mov	r1, r3
    6576:	f004 ffbd 	bl	b4f4 <cc2400_set>
	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
    657a:	4895      	ldr	r0, [pc, #596]	; (67d0 <bt_stream_hop+0x2bc>)
    657c:	f004 fde8 	bl	b150 <rbit>
    6580:	4603      	mov	r3, r0
    6582:	0c1b      	lsrs	r3, r3, #16
    6584:	b29b      	uxth	r3, r3
    6586:	202d      	movs	r0, #45	; 0x2d
    6588:	4619      	mov	r1, r3
    658a:	f004 ffb3 	bl	b4f4 <cc2400_set>
	
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    658e:	4b91      	ldr	r3, [pc, #580]	; (67d4 <bt_stream_hop+0x2c0>)
    6590:	2280      	movs	r2, #128	; 0x80
    6592:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif

	while (!(cc2400_status() & XOSC16M_STABLE));
    6594:	bf00      	nop
    6596:	f005 f855 	bl	b644 <cc2400_status>
    659a:	4603      	mov	r3, r0
    659c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    65a0:	2b00      	cmp	r3, #0
    65a2:	d0f8      	beq.n	6596 <bt_stream_hop+0x82>
	while ((cc2400_status() & FS_LOCK));
    65a4:	bf00      	nop
    65a6:	f005 f84d 	bl	b644 <cc2400_status>
    65aa:	4603      	mov	r3, r0
    65ac:	f003 0304 	and.w	r3, r3, #4
    65b0:	2b00      	cmp	r3, #0
    65b2:	d1f8      	bne.n	65a6 <bt_stream_hop+0x92>

	cc2400_set(FSDIV, channel - 1);
    65b4:	4b88      	ldr	r3, [pc, #544]	; (67d8 <bt_stream_hop+0x2c4>)
    65b6:	881b      	ldrh	r3, [r3, #0]
    65b8:	b29b      	uxth	r3, r3
    65ba:	3b01      	subs	r3, #1
    65bc:	b29b      	uxth	r3, r3
    65be:	2002      	movs	r0, #2
    65c0:	4619      	mov	r1, r3
    65c2:	f004 ff97 	bl	b4f4 <cc2400_set>
	cc2400_strobe(SFSON);
    65c6:	2061      	movs	r0, #97	; 0x61
    65c8:	f005 f846 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    65cc:	bf00      	nop
    65ce:	f005 f839 	bl	b644 <cc2400_status>
    65d2:	4603      	mov	r3, r0
    65d4:	f003 0304 	and.w	r3, r3, #4
    65d8:	2b00      	cmp	r3, #0
    65da:	d0f8      	beq.n	65ce <bt_stream_hop+0xba>
	cc2400_strobe(SRX);
    65dc:	2062      	movs	r0, #98	; 0x62
    65de:	f005 f83b 	bl	b658 <cc2400_strobe>
	
	while (requested_mode == MODE_RX_HOP) {
    65e2:	e171      	b.n	68c8 <bt_stream_hop+0x3b4>

//		ICER0 = ICER0_ICE_USB;		
		while ((!(cc2400_status () & SYNC_RECEIVED)) && (requested_channel == channel));
    65e4:	bf00      	nop
    65e6:	f005 f82d 	bl	b644 <cc2400_status>
    65ea:	4603      	mov	r3, r0
    65ec:	f003 0310 	and.w	r3, r3, #16
    65f0:	2b00      	cmp	r3, #0
    65f2:	d107      	bne.n	6604 <bt_stream_hop+0xf0>
    65f4:	4b79      	ldr	r3, [pc, #484]	; (67dc <bt_stream_hop+0x2c8>)
    65f6:	881b      	ldrh	r3, [r3, #0]
    65f8:	b29a      	uxth	r2, r3
    65fa:	4b77      	ldr	r3, [pc, #476]	; (67d8 <bt_stream_hop+0x2c4>)
    65fc:	881b      	ldrh	r3, [r3, #0]
    65fe:	b29b      	uxth	r3, r3
    6600:	429a      	cmp	r2, r3
    6602:	d0f0      	beq.n	65e6 <bt_stream_hop+0xd2>
                else
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/
		if (requested_channel != channel)
    6604:	4b75      	ldr	r3, [pc, #468]	; (67dc <bt_stream_hop+0x2c8>)
    6606:	881b      	ldrh	r3, [r3, #0]
    6608:	b29a      	uxth	r2, r3
    660a:	4b73      	ldr	r3, [pc, #460]	; (67d8 <bt_stream_hop+0x2c4>)
    660c:	881b      	ldrh	r3, [r3, #0]
    660e:	b29b      	uxth	r3, r3
    6610:	429a      	cmp	r2, r3
    6612:	d000      	beq.n	6616 <bt_stream_hop+0x102>
			goto rx_flush;
    6614:	e106      	b.n	6824 <bt_stream_hop+0x310>


		rssi_sum = 0;
    6616:	4b72      	ldr	r3, [pc, #456]	; (67e0 <bt_stream_hop+0x2cc>)
    6618:	2200      	movs	r2, #0
    661a:	601a      	str	r2, [r3, #0]
		rssi_count = 2;
    661c:	4b71      	ldr	r3, [pc, #452]	; (67e4 <bt_stream_hop+0x2d0>)
    661e:	2202      	movs	r2, #2
    6620:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < rssi_count; i++)
    6622:	2300      	movs	r3, #0
    6624:	657b      	str	r3, [r7, #84]	; 0x54
    6626:	e00f      	b.n	6648 <bt_stream_hop+0x134>
		{
			rssi_sum += (int8_t)(cc2400_get(RSSI) >> 8);
    6628:	2006      	movs	r0, #6
    662a:	f004 ff4d 	bl	b4c8 <cc2400_get>
    662e:	4603      	mov	r3, r0
    6630:	0a1b      	lsrs	r3, r3, #8
    6632:	b29b      	uxth	r3, r3
    6634:	b2db      	uxtb	r3, r3
    6636:	b25a      	sxtb	r2, r3
    6638:	4b69      	ldr	r3, [pc, #420]	; (67e0 <bt_stream_hop+0x2cc>)
    663a:	681b      	ldr	r3, [r3, #0]
    663c:	4413      	add	r3, r2
    663e:	4a68      	ldr	r2, [pc, #416]	; (67e0 <bt_stream_hop+0x2cc>)
    6640:	6013      	str	r3, [r2, #0]
			goto rx_flush;


		rssi_sum = 0;
		rssi_count = 2;
		for (i = 0; i < rssi_count; i++)
    6642:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6644:	3301      	adds	r3, #1
    6646:	657b      	str	r3, [r7, #84]	; 0x54
    6648:	4b66      	ldr	r3, [pc, #408]	; (67e4 <bt_stream_hop+0x2d0>)
    664a:	781b      	ldrb	r3, [r3, #0]
    664c:	461a      	mov	r2, r3
    664e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6650:	429a      	cmp	r2, r3
    6652:	dce9      	bgt.n	6628 <bt_stream_hop+0x114>
		{
			rssi_sum += (int8_t)(cc2400_get(RSSI) >> 8);
		}
	
//		ISER0 = ISER0_ISE_USB;
		clkn_legacy = clkn;
    6654:	4b64      	ldr	r3, [pc, #400]	; (67e8 <bt_stream_hop+0x2d4>)
    6656:	681b      	ldr	r3, [r3, #0]
    6658:	4a64      	ldr	r2, [pc, #400]	; (67ec <bt_stream_hop+0x2d8>)
    665a:	6013      	str	r3, [r2, #0]
		while (!rx_tc);
    665c:	bf00      	nop
    665e:	4b64      	ldr	r3, [pc, #400]	; (67f0 <bt_stream_hop+0x2dc>)
    6660:	681b      	ldr	r3, [r3, #0]
    6662:	2b00      	cmp	r3, #0
    6664:	d0fb      	beq.n	665e <bt_stream_hop+0x14a>
	
		if (requested_mode != MODE_RX_HOP)
    6666:	4b63      	ldr	r3, [pc, #396]	; (67f4 <bt_stream_hop+0x2e0>)
    6668:	781b      	ldrb	r3, [r3, #0]
    666a:	b2db      	uxtb	r3, r3
    666c:	2b10      	cmp	r3, #16
    666e:	f040 8131 	bne.w	68d4 <bt_stream_hop+0x3c0>
			goto cleanup;

		
		if (rx_err) {
    6672:	4b61      	ldr	r3, [pc, #388]	; (67f8 <bt_stream_hop+0x2e4>)
    6674:	681b      	ldr	r3, [r3, #0]
    6676:	2b00      	cmp	r3, #0
    6678:	d007      	beq.n	668a <bt_stream_hop+0x176>
		status |= DMA_ERROR;
    667a:	4b60      	ldr	r3, [pc, #384]	; (67fc <bt_stream_hop+0x2e8>)
    667c:	781b      	ldrb	r3, [r3, #0]
    667e:	b2db      	uxtb	r3, r3
    6680:	f043 0302 	orr.w	r3, r3, #2
    6684:	b2da      	uxtb	r2, r3
    6686:	4b5d      	ldr	r3, [pc, #372]	; (67fc <bt_stream_hop+0x2e8>)
    6688:	701a      	strb	r2, [r3, #0]
		}	
		if (rx_tc > 1)
    668a:	4b59      	ldr	r3, [pc, #356]	; (67f0 <bt_stream_hop+0x2dc>)
    668c:	681b      	ldr	r3, [r3, #0]
    668e:	2b01      	cmp	r3, #1
    6690:	d907      	bls.n	66a2 <bt_stream_hop+0x18e>
			status |= DMA_OVERFLOW;
    6692:	4b5a      	ldr	r3, [pc, #360]	; (67fc <bt_stream_hop+0x2e8>)
    6694:	781b      	ldrb	r3, [r3, #0]
    6696:	b2db      	uxtb	r3, r3
    6698:	f043 0301 	orr.w	r3, r3, #1
    669c:	b2da      	uxtb	r2, r3
    669e:	4b57      	ldr	r3, [pc, #348]	; (67fc <bt_stream_hop+0x2e8>)
    66a0:	701a      	strb	r2, [r3, #0]

		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    66a2:	1d3b      	adds	r3, r7, #4
    66a4:	64fb      	str	r3, [r7, #76]	; 0x4c
		packet[0] = le.access_address;
    66a6:	4b56      	ldr	r3, [pc, #344]	; (6800 <bt_stream_hop+0x2ec>)
    66a8:	681b      	ldr	r3, [r3, #0]
    66aa:	607b      	str	r3, [r7, #4]

                while (DMACC0Config & DMACCxConfig_E && rx_err == 0);
    66ac:	bf00      	nop
    66ae:	4b55      	ldr	r3, [pc, #340]	; (6804 <bt_stream_hop+0x2f0>)
    66b0:	681b      	ldr	r3, [r3, #0]
    66b2:	f003 0301 	and.w	r3, r3, #1
    66b6:	2b00      	cmp	r3, #0
    66b8:	d003      	beq.n	66c2 <bt_stream_hop+0x1ae>
    66ba:	4b4f      	ldr	r3, [pc, #316]	; (67f8 <bt_stream_hop+0x2e4>)
    66bc:	681b      	ldr	r3, [r3, #0]
    66be:	2b00      	cmp	r3, #0
    66c0:	d0f5      	beq.n	66ae <bt_stream_hop+0x19a>
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    66c2:	4a51      	ldr	r2, [pc, #324]	; (6808 <bt_stream_hop+0x2f4>)
    66c4:	4b50      	ldr	r3, [pc, #320]	; (6808 <bt_stream_hop+0x2f4>)
    66c6:	681b      	ldr	r3, [r3, #0]
    66c8:	f023 0301 	bic.w	r3, r3, #1
    66cc:	6013      	str	r3, [r2, #0]
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    66ce:	4b42      	ldr	r3, [pc, #264]	; (67d8 <bt_stream_hop+0x2c4>)
    66d0:	881b      	ldrh	r3, [r3, #0]
    66d2:	b29b      	uxth	r3, r3
    66d4:	b2db      	uxtb	r3, r3
    66d6:	3b62      	subs	r3, #98	; 0x62
    66d8:	b2db      	uxtb	r3, r3
    66da:	4618      	mov	r0, r3
    66dc:	f003 fb66 	bl	9dac <btle_channel_index>
    66e0:	4603      	mov	r3, r0
    66e2:	461a      	mov	r2, r3
    66e4:	4613      	mov	r3, r2
    66e6:	005b      	lsls	r3, r3, #1
    66e8:	4413      	add	r3, r2
    66ea:	011b      	lsls	r3, r3, #4
    66ec:	4a47      	ldr	r2, [pc, #284]	; (680c <bt_stream_hop+0x2f8>)
    66ee:	4413      	add	r3, r2
    66f0:	64bb      	str	r3, [r7, #72]	; 0x48
		for (i = 0; i < 44; i += 4) {
    66f2:	2300      	movs	r3, #0
    66f4:	657b      	str	r3, [r7, #84]	; 0x54
    66f6:	e034      	b.n	6762 <bt_stream_hop+0x24e>
			uint32_t v = rxbuf1[i+0] << 24
    66f8:	4a45      	ldr	r2, [pc, #276]	; (6810 <bt_stream_hop+0x2fc>)
    66fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    66fc:	4413      	add	r3, r2
    66fe:	781b      	ldrb	r3, [r3, #0]
    6700:	061a      	lsls	r2, r3, #24
                                          | rxbuf1[i+1] << 16
    6702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6704:	3301      	adds	r3, #1
    6706:	4942      	ldr	r1, [pc, #264]	; (6810 <bt_stream_hop+0x2fc>)
    6708:	5ccb      	ldrb	r3, [r1, r3]
    670a:	041b      	lsls	r3, r3, #16
    670c:	431a      	orrs	r2, r3
                                      | rxbuf1[i+2] << 8
    670e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6710:	3302      	adds	r3, #2
    6712:	493f      	ldr	r1, [pc, #252]	; (6810 <bt_stream_hop+0x2fc>)
    6714:	5ccb      	ldrb	r3, [r1, r3]
    6716:	021b      	lsls	r3, r3, #8
    6718:	4313      	orrs	r3, r2
                                          | rxbuf1[i+3] << 0;
    671a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    671c:	3203      	adds	r2, #3
    671e:	493c      	ldr	r1, [pc, #240]	; (6810 <bt_stream_hop+0x2fc>)
    6720:	5c8a      	ldrb	r2, [r1, r2]
    6722:	4313      	orrs	r3, r2
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6724:	647b      	str	r3, [r7, #68]	; 0x44
                                          | rxbuf1[i+1] << 16
                                      | rxbuf1[i+2] << 8
                                          | rxbuf1[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
    6726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6728:	2b00      	cmp	r3, #0
    672a:	da00      	bge.n	672e <bt_stream_hop+0x21a>
    672c:	3303      	adds	r3, #3
    672e:	109b      	asrs	r3, r3, #2
    6730:	1c5c      	adds	r4, r3, #1
    6732:	6c78      	ldr	r0, [r7, #68]	; 0x44
    6734:	f004 fd0c 	bl	b150 <rbit>
    6738:	4601      	mov	r1, r0
    673a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    673c:	2b00      	cmp	r3, #0
    673e:	da00      	bge.n	6742 <bt_stream_hop+0x22e>
    6740:	3303      	adds	r3, #3
    6742:	109b      	asrs	r3, r3, #2
    6744:	009b      	lsls	r3, r3, #2
    6746:	6cba      	ldr	r2, [r7, #72]	; 0x48
    6748:	4413      	add	r3, r2
    674a:	681b      	ldr	r3, [r3, #0]
    674c:	ea81 0203 	eor.w	r2, r1, r3
    6750:	00a3      	lsls	r3, r4, #2
    6752:	f107 0158 	add.w	r1, r7, #88	; 0x58
    6756:	440b      	add	r3, r1
    6758:	f843 2c54 	str.w	r2, [r3, #-84]
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
    675c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    675e:	3304      	adds	r3, #4
    6760:	657b      	str	r3, [r7, #84]	; 0x54
    6762:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6764:	2b2b      	cmp	r3, #43	; 0x2b
    6766:	ddc7      	ble.n	66f8 <bt_stream_hop+0x1e4>
                                      | eddystone[i+2] << 8
                                          | eddystone[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
		}
*/
		unsigned len = (p[5] & 0x3f) + 2;
    6768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    676a:	3305      	adds	r3, #5
    676c:	781b      	ldrb	r3, [r3, #0]
    676e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6772:	3302      	adds	r3, #2
    6774:	643b      	str	r3, [r7, #64]	; 0x40
		
		if (len > 39)
    6776:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6778:	2b27      	cmp	r3, #39	; 0x27
    677a:	d900      	bls.n	677e <bt_stream_hop+0x26a>
			goto rx_flush;
    677c:	e052      	b.n	6824 <bt_stream_hop+0x310>

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    677e:	4b20      	ldr	r3, [pc, #128]	; (6800 <bt_stream_hop+0x2ec>)
    6780:	68d9      	ldr	r1, [r3, #12]
    6782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    6784:	1d1a      	adds	r2, r3, #4
    6786:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6788:	4608      	mov	r0, r1
    678a:	4611      	mov	r1, r2
    678c:	461a      	mov	r2, r3
    678e:	f003 fc11 	bl	9fb4 <btle_crcgen_lut>
    6792:	63f8      	str	r0, [r7, #60]	; 0x3c
		u32 wire_crc = (p[4+len+2] << 16)
    6794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6796:	3306      	adds	r3, #6
    6798:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    679a:	4413      	add	r3, r2
    679c:	781b      	ldrb	r3, [r3, #0]
    679e:	041a      	lsls	r2, r3, #16
                                                 | (p[4+len+1] << 8)
    67a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    67a2:	3305      	adds	r3, #5
    67a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    67a6:	440b      	add	r3, r1
    67a8:	781b      	ldrb	r3, [r3, #0]
    67aa:	021b      	lsls	r3, r3, #8
    67ac:	4313      	orrs	r3, r2
                                                 | (p[4+len+0] << 0);
    67ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    67b0:	3204      	adds	r2, #4
    67b2:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    67b4:	440a      	add	r2, r1
    67b6:	7812      	ldrb	r2, [r2, #0]
    67b8:	4313      	orrs	r3, r2
		
		if (len > 39)
			goto rx_flush;

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
		u32 wire_crc = (p[4+len+2] << 16)
    67ba:	63bb      	str	r3, [r7, #56]	; 0x38
                                                 | (p[4+len+1] << 8)
                                                 | (p[4+len+0] << 0);
                if (calc_crc != wire_crc) // skip packets with a bad CRC
    67bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    67be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    67c0:	429a      	cmp	r2, r3
    67c2:	d027      	beq.n	6814 <bt_stream_hop+0x300>
                        goto rx_flush;
    67c4:	e02e      	b.n	6824 <bt_stream_hop+0x310>
    67c6:	bf00      	nop
    67c8:	2009c03c 	.word	0x2009c03c
    67cc:	e000e100 	.word	0xe000e100
    67d0:	8e89bed6 	.word	0x8e89bed6
    67d4:	2009c058 	.word	0x2009c058
    67d8:	1000049c 	.word	0x1000049c
    67dc:	10000a44 	.word	0x10000a44
    67e0:	10000a4c 	.word	0x10000a4c
    67e4:	10000a49 	.word	0x10000a49
    67e8:	10000bf4 	.word	0x10000bf4
    67ec:	1000103c 	.word	0x1000103c
    67f0:	10000b0c 	.word	0x10000b0c
    67f4:	10000a3f 	.word	0x10000a3f
    67f8:	100010d0 	.word	0x100010d0
    67fc:	10000a48 	.word	0x10000a48
    6800:	10000458 	.word	0x10000458
    6804:	50004110 	.word	0x50004110
    6808:	40030024 	.word	0x40030024
    680c:	0000d2dc 	.word	0x0000d2dc
    6810:	1000109c 	.word	0x1000109c

		RXLED_SET;
    6814:	4b34      	ldr	r3, [pc, #208]	; (68e8 <bt_stream_hop+0x3d4>)
    6816:	2210      	movs	r2, #16
    6818:	601a      	str	r2, [r3, #0]

		enqueue_legacy (BR_PACKET, (uint8_t*)packet);
    681a:	1d3b      	adds	r3, r7, #4
    681c:	2000      	movs	r0, #0
    681e:	4619      	mov	r1, r3
    6820:	f7fd ff1c 	bl	465c <enqueue_legacy>
	       
	rx_flush:
		cc2400_strobe (SRFOFF);
    6824:	2064      	movs	r0, #100	; 0x64
    6826:	f004 ff17 	bl	b658 <cc2400_strobe>
                while ((cc2400_status () & FS_LOCK));
    682a:	bf00      	nop
    682c:	f004 ff0a 	bl	b644 <cc2400_status>
    6830:	4603      	mov	r3, r0
    6832:	f003 0304 	and.w	r3, r3, #4
    6836:	2b00      	cmp	r3, #0
    6838:	d1f8      	bne.n	682c <bt_stream_hop+0x318>

		if (requested_channel != channel)
    683a:	4b2c      	ldr	r3, [pc, #176]	; (68ec <bt_stream_hop+0x3d8>)
    683c:	881b      	ldrh	r3, [r3, #0]
    683e:	b29a      	uxth	r2, r3
    6840:	4b2b      	ldr	r3, [pc, #172]	; (68f0 <bt_stream_hop+0x3dc>)
    6842:	881b      	ldrh	r3, [r3, #0]
    6844:	b29b      	uxth	r3, r3
    6846:	429a      	cmp	r2, r3
    6848:	d00d      	beq.n	6866 <bt_stream_hop+0x352>
		{
			channel = requested_channel;
    684a:	4b28      	ldr	r3, [pc, #160]	; (68ec <bt_stream_hop+0x3d8>)
    684c:	881b      	ldrh	r3, [r3, #0]
    684e:	b29a      	uxth	r2, r3
    6850:	4b27      	ldr	r3, [pc, #156]	; (68f0 <bt_stream_hop+0x3dc>)
    6852:	801a      	strh	r2, [r3, #0]
			cc2400_set (FSDIV, channel - 1);
    6854:	4b26      	ldr	r3, [pc, #152]	; (68f0 <bt_stream_hop+0x3dc>)
    6856:	881b      	ldrh	r3, [r3, #0]
    6858:	b29b      	uxth	r3, r3
    685a:	3b01      	subs	r3, #1
    685c:	b29b      	uxth	r3, r3
    685e:	2002      	movs	r0, #2
    6860:	4619      	mov	r1, r3
    6862:	f004 fe47 	bl	b4f4 <cc2400_set>
		}

                while (!(cc2400_status () & XOSC16M_STABLE));
    6866:	bf00      	nop
    6868:	f004 feec 	bl	b644 <cc2400_status>
    686c:	4603      	mov	r3, r0
    686e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6872:	2b00      	cmp	r3, #0
    6874:	d0f8      	beq.n	6868 <bt_stream_hop+0x354>

                cc2400_strobe (SFSON);
    6876:	2061      	movs	r0, #97	; 0x61
    6878:	f004 feee 	bl	b658 <cc2400_strobe>
                while (!(cc2400_status () & FS_LOCK));
    687c:	bf00      	nop
    687e:	f004 fee1 	bl	b644 <cc2400_status>
    6882:	4603      	mov	r3, r0
    6884:	f003 0304 	and.w	r3, r3, #4
    6888:	2b00      	cmp	r3, #0
    688a:	d0f8      	beq.n	687e <bt_stream_hop+0x36a>

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    688c:	4a19      	ldr	r2, [pc, #100]	; (68f4 <bt_stream_hop+0x3e0>)
    688e:	4b19      	ldr	r3, [pc, #100]	; (68f4 <bt_stream_hop+0x3e0>)
    6890:	681b      	ldr	r3, [r3, #0]
    6892:	f023 0301 	bic.w	r3, r3, #1
    6896:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    6898:	e003      	b.n	68a2 <bt_stream_hop+0x38e>
                        u8 tmp = (u8)DIO_SSP_DR;
    689a:	4b17      	ldr	r3, [pc, #92]	; (68f8 <bt_stream_hop+0x3e4>)
    689c:	681b      	ldr	r3, [r3, #0]
    689e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

                cc2400_strobe (SFSON);
                while (!(cc2400_status () & FS_LOCK));

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    68a2:	4b16      	ldr	r3, [pc, #88]	; (68fc <bt_stream_hop+0x3e8>)
    68a4:	681b      	ldr	r3, [r3, #0]
    68a6:	f003 0304 	and.w	r3, r3, #4
    68aa:	2b00      	cmp	r3, #0
    68ac:	d1f5      	bne.n	689a <bt_stream_hop+0x386>
                        u8 tmp = (u8)DIO_SSP_DR;
                }
		dma_init_le();
    68ae:	f7ff f86b 	bl	5988 <dma_init_le>
		dio_ssp_start();
    68b2:	f7ff f9e1 	bl	5c78 <dio_ssp_start>
		
//              msleep(500);    
                cc2400_strobe (SRX);
    68b6:	2062      	movs	r0, #98	; 0x62
    68b8:	f004 fece 	bl	b658 <cc2400_strobe>
		rx_tc = 0;
    68bc:	4b10      	ldr	r3, [pc, #64]	; (6900 <bt_stream_hop+0x3ec>)
    68be:	2200      	movs	r2, #0
    68c0:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    68c2:	4b10      	ldr	r3, [pc, #64]	; (6904 <bt_stream_hop+0x3f0>)
    68c4:	2200      	movs	r2, #0
    68c6:	601a      	str	r2, [r3, #0]
	cc2400_set(FSDIV, channel - 1);
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
	while (requested_mode == MODE_RX_HOP) {
    68c8:	4b0f      	ldr	r3, [pc, #60]	; (6908 <bt_stream_hop+0x3f4>)
    68ca:	781b      	ldrb	r3, [r3, #0]
    68cc:	b2db      	uxtb	r3, r3
    68ce:	2b10      	cmp	r3, #16
    68d0:	f43f ae88 	beq.w	65e4 <bt_stream_hop+0xd0>
		rx_err = 0;
	 
	
	}
cleanup:
	cc2400_idle();
    68d4:	f7ff fa64 	bl	5da0 <cc2400_idle>
	dio_ssp_stop ();
    68d8:	f7ff f9fe 	bl	5cd8 <dio_ssp_stop>
	cs_trigger_disable ();
    68dc:	f7fe f910 	bl	4b00 <cs_trigger_disable>
}
    68e0:	375c      	adds	r7, #92	; 0x5c
    68e2:	46bd      	mov	sp, r7
    68e4:	bd90      	pop	{r4, r7, pc}
    68e6:	bf00      	nop
    68e8:	2009c038 	.word	0x2009c038
    68ec:	10000a44 	.word	0x10000a44
    68f0:	1000049c 	.word	0x1000049c
    68f4:	40030024 	.word	0x40030024
    68f8:	40030008 	.word	0x40030008
    68fc:	4003000c 	.word	0x4003000c
    6900:	10000b0c 	.word	0x10000b0c
    6904:	100010d0 	.word	0x100010d0
    6908:	10000a3f 	.word	0x10000a3f

0000690c <bt_stream_proposed>:

// wpson proposed
void bt_stream_proposed()
{
    690c:	b580      	push	{r7, lr}
    690e:	b092      	sub	sp, #72	; 0x48
    6910:	af00      	add	r7, sp, #0

	u8 epstat;
//	u16 f;
//	u8 buf[DMA_SIZE];
	u8 rssi[50] = {0};
    6912:	1d3b      	adds	r3, r7, #4
    6914:	2200      	movs	r2, #0
    6916:	601a      	str	r2, [r3, #0]
    6918:	3304      	adds	r3, #4
    691a:	2200      	movs	r2, #0
    691c:	601a      	str	r2, [r3, #0]
    691e:	3304      	adds	r3, #4
    6920:	2200      	movs	r2, #0
    6922:	601a      	str	r2, [r3, #0]
    6924:	3304      	adds	r3, #4
    6926:	2200      	movs	r2, #0
    6928:	601a      	str	r2, [r3, #0]
    692a:	3304      	adds	r3, #4
    692c:	2200      	movs	r2, #0
    692e:	601a      	str	r2, [r3, #0]
    6930:	3304      	adds	r3, #4
    6932:	2200      	movs	r2, #0
    6934:	601a      	str	r2, [r3, #0]
    6936:	3304      	adds	r3, #4
    6938:	2200      	movs	r2, #0
    693a:	601a      	str	r2, [r3, #0]
    693c:	3304      	adds	r3, #4
    693e:	2200      	movs	r2, #0
    6940:	601a      	str	r2, [r3, #0]
    6942:	3304      	adds	r3, #4
    6944:	2200      	movs	r2, #0
    6946:	601a      	str	r2, [r3, #0]
    6948:	3304      	adds	r3, #4
    694a:	2200      	movs	r2, #0
    694c:	601a      	str	r2, [r3, #0]
    694e:	3304      	adds	r3, #4
    6950:	2200      	movs	r2, #0
    6952:	601a      	str	r2, [r3, #0]
    6954:	3304      	adds	r3, #4
    6956:	2200      	movs	r2, #0
    6958:	601a      	str	r2, [r3, #0]
    695a:	3304      	adds	r3, #4
    695c:	2200      	movs	r2, #0
    695e:	801a      	strh	r2, [r3, #0]
    6960:	3302      	adds	r3, #2
	int i = 0;
    6962:	2300      	movs	r3, #0
    6964:	63fb      	str	r3, [r7, #60]	; 0x3c
	int window = 0;
    6966:	2300      	movs	r3, #0
    6968:	647b      	str	r3, [r7, #68]	; 0x44
	u8 old = 0;
    696a:	2300      	movs	r3, #0
    696c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	u8 now = 0;
    6970:	2300      	movs	r3, #0
    6972:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	int8_t diff = 0;
    6976:	2300      	movs	r3, #0
    6978:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	u8 k = 0;
    697c:	2300      	movs	r3, #0
    697e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	u8 temp = 0;
    6982:	2300      	movs	r3, #0
    6984:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	u8 outage = 0;
    6988:	2300      	movs	r3, #0
    698a:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	queue_init();
    698e:	f003 fb8d 	bl	a0ac <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6992:	4b50      	ldr	r3, [pc, #320]	; (6ad4 <bt_stream_proposed+0x1c8>)
    6994:	2280      	movs	r2, #128	; 0x80
    6996:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif
	cc2400_set(MANAND, 0x7fff);
    6998:	200d      	movs	r0, #13
    699a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    699e:	f004 fda9 	bl	b4f4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    69a2:	2012      	movs	r0, #18
    69a4:	f642 3122 	movw	r1, #11042	; 0x2b22
    69a8:	f004 fda4 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    69ac:	2014      	movs	r0, #20
    69ae:	f241 314b 	movw	r1, #4939	; 0x134b
    69b2:	f004 fd9f 	bl	b4f4 <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    69b6:	2020      	movs	r0, #32
    69b8:	f240 5161 	movw	r1, #1377	; 0x561
    69bc:	f004 fd9a 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    69c0:	2003      	movs	r0, #3
    69c2:	2140      	movs	r1, #64	; 0x40
    69c4:	f004 fd96 	bl	b4f4 <cc2400_set>
//	cc2400_set(SYNCL, 0x00ff);
	
//	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
//	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
	
	while (!(cc2400_status() & XOSC16M_STABLE));
    69c8:	bf00      	nop
    69ca:	f004 fe3b 	bl	b644 <cc2400_status>
    69ce:	4603      	mov	r3, r0
    69d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    69d4:	2b00      	cmp	r3, #0
    69d6:	d0f8      	beq.n	69ca <bt_stream_proposed+0xbe>
	while ((cc2400_status() & FS_LOCK));
    69d8:	bf00      	nop
    69da:	f004 fe33 	bl	b644 <cc2400_status>
    69de:	4603      	mov	r3, r0
    69e0:	f003 0304 	and.w	r3, r3, #4
    69e4:	2b00      	cmp	r3, #0
    69e6:	d1f8      	bne.n	69da <bt_stream_proposed+0xce>

	cc2400_set(FSDIV, channel - 1);
    69e8:	4b3b      	ldr	r3, [pc, #236]	; (6ad8 <bt_stream_proposed+0x1cc>)
    69ea:	881b      	ldrh	r3, [r3, #0]
    69ec:	b29b      	uxth	r3, r3
    69ee:	3b01      	subs	r3, #1
    69f0:	b29b      	uxth	r3, r3
    69f2:	2002      	movs	r0, #2
    69f4:	4619      	mov	r1, r3
    69f6:	f004 fd7d 	bl	b4f4 <cc2400_set>
	cc2400_strobe(SFSON);
    69fa:	2061      	movs	r0, #97	; 0x61
    69fc:	f004 fe2c 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6a00:	bf00      	nop
    6a02:	f004 fe1f 	bl	b644 <cc2400_status>
    6a06:	4603      	mov	r3, r0
    6a08:	f003 0304 	and.w	r3, r3, #4
    6a0c:	2b00      	cmp	r3, #0
    6a0e:	d0f8      	beq.n	6a02 <bt_stream_proposed+0xf6>
	cc2400_strobe(SRX);
    6a10:	2062      	movs	r0, #98	; 0x62
    6a12:	f004 fe21 	bl	b658 <cc2400_strobe>
	
	while (requested_mode == MODE_RX_PROPOSED)
    6a16:	e04f      	b.n	6ab8 <bt_stream_proposed+0x1ac>
	{

			
	//	while (!(cc2400_status () & SYNC_RECEIVED));	
		window = 0;
    6a18:	2300      	movs	r3, #0
    6a1a:	647b      	str	r3, [r7, #68]	; 0x44
		old = 0;
    6a1c:	2300      	movs	r3, #0
    6a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		now = 0;
    6a22:	2300      	movs	r3, #0
    6a24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
		diff = 0;
    6a28:	2300      	movs	r3, #0
    6a2a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		

//		diff_ts = CLK100NS - first_ts;
//wpson
		while ( window < 6)
    6a2e:	e02b      	b.n	6a88 <bt_stream_proposed+0x17c>
		{	
//			first_ts = CLK100NS;
			now = cc2400_get_rev(FREQEST);
    6a30:	2007      	movs	r0, #7
    6a32:	f7ff fd07 	bl	6444 <cc2400_get_rev>
    6a36:	4603      	mov	r3, r0
    6a38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			diff = add (now, add (~old, 1));	 
    6a3c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    6a40:	43db      	mvns	r3, r3
    6a42:	b2db      	uxtb	r3, r3
    6a44:	4618      	mov	r0, r3
    6a46:	2101      	movs	r1, #1
    6a48:	f7ff fd46 	bl	64d8 <add>
    6a4c:	4603      	mov	r3, r0
    6a4e:	461a      	mov	r2, r3
    6a50:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
    6a54:	4618      	mov	r0, r3
    6a56:	4611      	mov	r1, r2
    6a58:	f7ff fd3e 	bl	64d8 <add>
    6a5c:	4603      	mov	r3, r0
    6a5e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
/*			if (diff & 0x80) 
				diff = add (~diff, 1);	
*/
			if (diff < 4 && diff > -4)
    6a62:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
    6a66:	2b03      	cmp	r3, #3
    6a68:	dc08      	bgt.n	6a7c <bt_stream_proposed+0x170>
    6a6a:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
    6a6e:	f113 0f03 	cmn.w	r3, #3
    6a72:	db03      	blt.n	6a7c <bt_stream_proposed+0x170>
				window++;
    6a74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6a76:	3301      	adds	r3, #1
    6a78:	647b      	str	r3, [r7, #68]	; 0x44
    6a7a:	e001      	b.n	6a80 <bt_stream_proposed+0x174>
			else
				window = 0;
    6a7c:	2300      	movs	r3, #0
    6a7e:	647b      	str	r3, [r7, #68]	; 0x44
			old = now;
    6a80:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
    6a84:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		diff = 0;
		

//		diff_ts = CLK100NS - first_ts;
//wpson
		while ( window < 6)
    6a88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    6a8a:	2b05      	cmp	r3, #5
    6a8c:	ddd0      	ble.n	6a30 <bt_stream_proposed+0x124>
				window = 0;
			old = now;
//			second_ts = CLK100NS;
		}

		rssi_avg = (int8_t)cc2400_get_rev(RSSI);
    6a8e:	2006      	movs	r0, #6
    6a90:	f7ff fcd8 	bl	6444 <cc2400_get_rev>
    6a94:	4603      	mov	r3, r0
    6a96:	461a      	mov	r2, r3
    6a98:	4b10      	ldr	r3, [pc, #64]	; (6adc <bt_stream_proposed+0x1d0>)
    6a9a:	701a      	strb	r2, [r3, #0]
		freq_avg = now;
    6a9c:	4a10      	ldr	r2, [pc, #64]	; (6ae0 <bt_stream_proposed+0x1d4>)
    6a9e:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
    6aa2:	7013      	strb	r3, [r2, #0]
	
	//	clkn_proposed = clkn;
//		diff_ts = second_ts - first_ts;
		enqueue_proposed(FREQ_PACKET, rssi);
    6aa4:	1d3b      	adds	r3, r7, #4
    6aa6:	2007      	movs	r0, #7
    6aa8:	4619      	mov	r1, r3
    6aaa:	f7fd feff 	bl	48ac <enqueue_proposed>
//		enqueue(FREQ_PACKET, rssi);
		handle_usb(clkn);
    6aae:	4b0d      	ldr	r3, [pc, #52]	; (6ae4 <bt_stream_proposed+0x1d8>)
    6ab0:	681b      	ldr	r3, [r3, #0]
    6ab2:	4618      	mov	r0, r3
    6ab4:	f003 fb9a 	bl	a1ec <handle_usb>
	cc2400_set(FSDIV, channel - 1);
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
	while (requested_mode == MODE_RX_PROPOSED)
    6ab8:	4b0b      	ldr	r3, [pc, #44]	; (6ae8 <bt_stream_proposed+0x1dc>)
    6aba:	781b      	ldrb	r3, [r3, #0]
    6abc:	b2db      	uxtb	r3, r3
    6abe:	2b0f      	cmp	r3, #15
    6ac0:	d0aa      	beq.n	6a18 <bt_stream_proposed+0x10c>
	
//		msleep(500);	
		cc2400_strobe (SRX);
*/
	}
	cc2400_idle();
    6ac2:	f7ff f96d 	bl	5da0 <cc2400_idle>
	dio_ssp_stop ();
    6ac6:	f7ff f907 	bl	5cd8 <dio_ssp_stop>
	cs_trigger_disable ();
    6aca:	f7fe f819 	bl	4b00 <cs_trigger_disable>
}
    6ace:	3748      	adds	r7, #72	; 0x48
    6ad0:	46bd      	mov	sp, r7
    6ad2:	bd80      	pop	{r7, pc}
    6ad4:	2009c058 	.word	0x2009c058
    6ad8:	1000049c 	.word	0x1000049c
    6adc:	10001041 	.word	0x10001041
    6ae0:	10000bf9 	.word	0x10000bf9
    6ae4:	10000bf4 	.word	0x10000bf4
    6ae8:	10000a3f 	.word	0x10000a3f

00006aec <bt_stream_freq>:



// wpson freq
void bt_stream_freq()
{
    6aec:	b590      	push	{r4, r7, lr}
    6aee:	b0a3      	sub	sp, #140	; 0x8c
    6af0:	af00      	add	r7, sp, #0
//	TXLED_SET;
	RXLED_CLR;
    6af2:	4bb3      	ldr	r3, [pc, #716]	; (6dc0 <bt_stream_freq+0x2d4>)
    6af4:	2210      	movs	r2, #16
    6af6:	601a      	str	r2, [r3, #0]
	int i;
	
	u8 freq_buf[50] = {0};
    6af8:	f107 0338 	add.w	r3, r7, #56	; 0x38
    6afc:	2200      	movs	r2, #0
    6afe:	601a      	str	r2, [r3, #0]
    6b00:	3304      	adds	r3, #4
    6b02:	2200      	movs	r2, #0
    6b04:	601a      	str	r2, [r3, #0]
    6b06:	3304      	adds	r3, #4
    6b08:	2200      	movs	r2, #0
    6b0a:	601a      	str	r2, [r3, #0]
    6b0c:	3304      	adds	r3, #4
    6b0e:	2200      	movs	r2, #0
    6b10:	601a      	str	r2, [r3, #0]
    6b12:	3304      	adds	r3, #4
    6b14:	2200      	movs	r2, #0
    6b16:	601a      	str	r2, [r3, #0]
    6b18:	3304      	adds	r3, #4
    6b1a:	2200      	movs	r2, #0
    6b1c:	601a      	str	r2, [r3, #0]
    6b1e:	3304      	adds	r3, #4
    6b20:	2200      	movs	r2, #0
    6b22:	601a      	str	r2, [r3, #0]
    6b24:	3304      	adds	r3, #4
    6b26:	2200      	movs	r2, #0
    6b28:	601a      	str	r2, [r3, #0]
    6b2a:	3304      	adds	r3, #4
    6b2c:	2200      	movs	r2, #0
    6b2e:	601a      	str	r2, [r3, #0]
    6b30:	3304      	adds	r3, #4
    6b32:	2200      	movs	r2, #0
    6b34:	601a      	str	r2, [r3, #0]
    6b36:	3304      	adds	r3, #4
    6b38:	2200      	movs	r2, #0
    6b3a:	601a      	str	r2, [r3, #0]
    6b3c:	3304      	adds	r3, #4
    6b3e:	2200      	movs	r2, #0
    6b40:	601a      	str	r2, [r3, #0]
    6b42:	3304      	adds	r3, #4
    6b44:	2200      	movs	r2, #0
    6b46:	801a      	strh	r2, [r3, #0]
    6b48:	3302      	adds	r3, #2
	queue_init();
    6b4a:	f003 faaf 	bl	a0ac <queue_init>
	dio_ssp_init();
    6b4e:	f004 fbff 	bl	b350 <dio_ssp_init>
	dma_init_le();
    6b52:	f7fe ff19 	bl	5988 <dma_init_le>
	dio_ssp_start();
    6b56:	f7ff f88f 	bl	5c78 <dio_ssp_start>
	
	cc2400_set(MANAND, 0x7fff);
    6b5a:	200d      	movs	r0, #13
    6b5c:	f647 71ff 	movw	r1, #32767	; 0x7fff
    6b60:	f004 fcc8 	bl	b4f4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    6b64:	2012      	movs	r0, #18
    6b66:	f642 3122 	movw	r1, #11042	; 0x2b22
    6b6a:	f004 fcc3 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    6b6e:	2014      	movs	r0, #20
    6b70:	f241 314b 	movw	r1, #4939	; 0x134b
    6b74:	f004 fcbe 	bl	b4f4 <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    6b78:	2020      	movs	r0, #32
    6b7a:	f240 5161 	movw	r1, #1377	; 0x561
    6b7e:	f004 fcb9 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    6b82:	2003      	movs	r0, #3
    6b84:	2140      	movs	r1, #64	; 0x40
    6b86:	f004 fcb5 	bl	b4f4 <cc2400_set>

//	cc2400_set(SYNCH, 0xf9ae);
//	cc2400_set(SYNCL, 0x1584);
	
	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
    6b8a:	488e      	ldr	r0, [pc, #568]	; (6dc4 <bt_stream_freq+0x2d8>)
    6b8c:	f004 fae0 	bl	b150 <rbit>
    6b90:	4603      	mov	r3, r0
    6b92:	b29b      	uxth	r3, r3
    6b94:	202c      	movs	r0, #44	; 0x2c
    6b96:	4619      	mov	r1, r3
    6b98:	f004 fcac 	bl	b4f4 <cc2400_set>
	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
    6b9c:	4889      	ldr	r0, [pc, #548]	; (6dc4 <bt_stream_freq+0x2d8>)
    6b9e:	f004 fad7 	bl	b150 <rbit>
    6ba2:	4603      	mov	r3, r0
    6ba4:	0c1b      	lsrs	r3, r3, #16
    6ba6:	b29b      	uxth	r3, r3
    6ba8:	202d      	movs	r0, #45	; 0x2d
    6baa:	4619      	mov	r1, r3
    6bac:	f004 fca2 	bl	b4f4 <cc2400_set>
	
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6bb0:	4b85      	ldr	r3, [pc, #532]	; (6dc8 <bt_stream_freq+0x2dc>)
    6bb2:	2280      	movs	r2, #128	; 0x80
    6bb4:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif

	while (!(cc2400_status() & XOSC16M_STABLE));
    6bb6:	bf00      	nop
    6bb8:	f004 fd44 	bl	b644 <cc2400_status>
    6bbc:	4603      	mov	r3, r0
    6bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6bc2:	2b00      	cmp	r3, #0
    6bc4:	d0f8      	beq.n	6bb8 <bt_stream_freq+0xcc>
	while ((cc2400_status() & FS_LOCK));
    6bc6:	bf00      	nop
    6bc8:	f004 fd3c 	bl	b644 <cc2400_status>
    6bcc:	4603      	mov	r3, r0
    6bce:	f003 0304 	and.w	r3, r3, #4
    6bd2:	2b00      	cmp	r3, #0
    6bd4:	d1f8      	bne.n	6bc8 <bt_stream_freq+0xdc>

	cc2400_set(FSDIV, channel - 1);
    6bd6:	4b7d      	ldr	r3, [pc, #500]	; (6dcc <bt_stream_freq+0x2e0>)
    6bd8:	881b      	ldrh	r3, [r3, #0]
    6bda:	b29b      	uxth	r3, r3
    6bdc:	3b01      	subs	r3, #1
    6bde:	b29b      	uxth	r3, r3
    6be0:	2002      	movs	r0, #2
    6be2:	4619      	mov	r1, r3
    6be4:	f004 fc86 	bl	b4f4 <cc2400_set>
	cc2400_strobe(SFSON);
    6be8:	2061      	movs	r0, #97	; 0x61
    6bea:	f004 fd35 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6bee:	bf00      	nop
    6bf0:	f004 fd28 	bl	b644 <cc2400_status>
    6bf4:	4603      	mov	r3, r0
    6bf6:	f003 0304 	and.w	r3, r3, #4
    6bfa:	2b00      	cmp	r3, #0
    6bfc:	d0f8      	beq.n	6bf0 <bt_stream_freq+0x104>
	cc2400_strobe(SRX);
    6bfe:	2062      	movs	r0, #98	; 0x62
    6c00:	f004 fd2a 	bl	b658 <cc2400_strobe>
	
//	cc2400_rx();
	while (requested_mode == MODE_RX_FREQ) {
    6c04:	e152      	b.n	6eac <bt_stream_freq+0x3c0>
		
		while (!(cc2400_status () & SYNC_RECEIVED));
    6c06:	bf00      	nop
    6c08:	f004 fd1c 	bl	b644 <cc2400_status>
    6c0c:	4603      	mov	r3, r0
    6c0e:	f003 0310 	and.w	r3, r3, #16
    6c12:	2b00      	cmp	r3, #0
    6c14:	d0f8      	beq.n	6c08 <bt_stream_freq+0x11c>
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/

		for (i = 0; i < 40; i++)
    6c16:	2300      	movs	r3, #0
    6c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    6c1c:	e010      	b.n	6c40 <bt_stream_freq+0x154>
		{
			freq_buf[i] = cc2400_get_rev(FREQEST);	
    6c1e:	2007      	movs	r0, #7
    6c20:	f7ff fc10 	bl	6444 <cc2400_get_rev>
    6c24:	4603      	mov	r3, r0
    6c26:	4619      	mov	r1, r3
    6c28:	f107 0238 	add.w	r2, r7, #56	; 0x38
    6c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6c30:	4413      	add	r3, r2
    6c32:	460a      	mov	r2, r1
    6c34:	701a      	strb	r2, [r3, #0]
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/

		for (i = 0; i < 40; i++)
    6c36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6c3a:	3301      	adds	r3, #1
    6c3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    6c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6c44:	2b27      	cmp	r3, #39	; 0x27
    6c46:	ddea      	ble.n	6c1e <bt_stream_freq+0x132>
		{
			freq_buf[i] = cc2400_get_rev(FREQEST);	
		}
//		clkn_freq = clkn;
		
		while (!rx_tc);
    6c48:	bf00      	nop
    6c4a:	4b61      	ldr	r3, [pc, #388]	; (6dd0 <bt_stream_freq+0x2e4>)
    6c4c:	681b      	ldr	r3, [r3, #0]
    6c4e:	2b00      	cmp	r3, #0
    6c50:	d0fb      	beq.n	6c4a <bt_stream_freq+0x15e>
	
		RXLED_SET;
    6c52:	4b60      	ldr	r3, [pc, #384]	; (6dd4 <bt_stream_freq+0x2e8>)
    6c54:	2210      	movs	r2, #16
    6c56:	601a      	str	r2, [r3, #0]
		if (rx_err) {
    6c58:	4b5f      	ldr	r3, [pc, #380]	; (6dd8 <bt_stream_freq+0x2ec>)
    6c5a:	681b      	ldr	r3, [r3, #0]
    6c5c:	2b00      	cmp	r3, #0
    6c5e:	d007      	beq.n	6c70 <bt_stream_freq+0x184>
		status |= DMA_ERROR;
    6c60:	4b5e      	ldr	r3, [pc, #376]	; (6ddc <bt_stream_freq+0x2f0>)
    6c62:	781b      	ldrb	r3, [r3, #0]
    6c64:	b2db      	uxtb	r3, r3
    6c66:	f043 0302 	orr.w	r3, r3, #2
    6c6a:	b2da      	uxtb	r2, r3
    6c6c:	4b5b      	ldr	r3, [pc, #364]	; (6ddc <bt_stream_freq+0x2f0>)
    6c6e:	701a      	strb	r2, [r3, #0]
		}	
		if (rx_tc > 1)
    6c70:	4b57      	ldr	r3, [pc, #348]	; (6dd0 <bt_stream_freq+0x2e4>)
    6c72:	681b      	ldr	r3, [r3, #0]
    6c74:	2b01      	cmp	r3, #1
    6c76:	d907      	bls.n	6c88 <bt_stream_freq+0x19c>
			status |= DMA_OVERFLOW;
    6c78:	4b58      	ldr	r3, [pc, #352]	; (6ddc <bt_stream_freq+0x2f0>)
    6c7a:	781b      	ldrb	r3, [r3, #0]
    6c7c:	b2db      	uxtb	r3, r3
    6c7e:	f043 0301 	orr.w	r3, r3, #1
    6c82:	b2da      	uxtb	r2, r3
    6c84:	4b55      	ldr	r3, [pc, #340]	; (6ddc <bt_stream_freq+0x2f0>)
    6c86:	701a      	strb	r2, [r3, #0]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    6c88:	1d3b      	adds	r3, r7, #4
    6c8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		packet[0] = le.access_address;
    6c8e:	4b54      	ldr	r3, [pc, #336]	; (6de0 <bt_stream_freq+0x2f4>)
    6c90:	681b      	ldr	r3, [r3, #0]
    6c92:	607b      	str	r3, [r7, #4]

                while (DMACC0Config & DMACCxConfig_E && rx_err == 0);
    6c94:	bf00      	nop
    6c96:	4b53      	ldr	r3, [pc, #332]	; (6de4 <bt_stream_freq+0x2f8>)
    6c98:	681b      	ldr	r3, [r3, #0]
    6c9a:	f003 0301 	and.w	r3, r3, #1
    6c9e:	2b00      	cmp	r3, #0
    6ca0:	d003      	beq.n	6caa <bt_stream_freq+0x1be>
    6ca2:	4b4d      	ldr	r3, [pc, #308]	; (6dd8 <bt_stream_freq+0x2ec>)
    6ca4:	681b      	ldr	r3, [r3, #0]
    6ca6:	2b00      	cmp	r3, #0
    6ca8:	d0f5      	beq.n	6c96 <bt_stream_freq+0x1aa>
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6caa:	4a4f      	ldr	r2, [pc, #316]	; (6de8 <bt_stream_freq+0x2fc>)
    6cac:	4b4e      	ldr	r3, [pc, #312]	; (6de8 <bt_stream_freq+0x2fc>)
    6cae:	681b      	ldr	r3, [r3, #0]
    6cb0:	f023 0301 	bic.w	r3, r3, #1
    6cb4:	6013      	str	r3, [r2, #0]
	
		const uint32_t *whit = whitening_word[btle_channel_index(2402-2402)];
    6cb6:	2000      	movs	r0, #0
    6cb8:	f003 f878 	bl	9dac <btle_channel_index>
    6cbc:	4603      	mov	r3, r0
    6cbe:	461a      	mov	r2, r3
    6cc0:	4613      	mov	r3, r2
    6cc2:	005b      	lsls	r3, r3, #1
    6cc4:	4413      	add	r3, r2
    6cc6:	011b      	lsls	r3, r3, #4
    6cc8:	4a48      	ldr	r2, [pc, #288]	; (6dec <bt_stream_freq+0x300>)
    6cca:	4413      	add	r3, r2
    6ccc:	67fb      	str	r3, [r7, #124]	; 0x7c
		for (i = 0; i < 44; i += 4) {
    6cce:	2300      	movs	r3, #0
    6cd0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    6cd4:	e03c      	b.n	6d50 <bt_stream_freq+0x264>
			uint32_t v = rxbuf1[i+0] << 24
    6cd6:	4a46      	ldr	r2, [pc, #280]	; (6df0 <bt_stream_freq+0x304>)
    6cd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6cdc:	4413      	add	r3, r2
    6cde:	781b      	ldrb	r3, [r3, #0]
    6ce0:	061a      	lsls	r2, r3, #24
                                          | rxbuf1[i+1] << 16
    6ce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6ce6:	3301      	adds	r3, #1
    6ce8:	4941      	ldr	r1, [pc, #260]	; (6df0 <bt_stream_freq+0x304>)
    6cea:	5ccb      	ldrb	r3, [r1, r3]
    6cec:	041b      	lsls	r3, r3, #16
    6cee:	431a      	orrs	r2, r3
                                      | rxbuf1[i+2] << 8
    6cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6cf4:	3302      	adds	r3, #2
    6cf6:	493e      	ldr	r1, [pc, #248]	; (6df0 <bt_stream_freq+0x304>)
    6cf8:	5ccb      	ldrb	r3, [r1, r3]
    6cfa:	021b      	lsls	r3, r3, #8
    6cfc:	4313      	orrs	r3, r2
                                          | rxbuf1[i+3] << 0;
    6cfe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    6d02:	3203      	adds	r2, #3
    6d04:	493a      	ldr	r1, [pc, #232]	; (6df0 <bt_stream_freq+0x304>)
    6d06:	5c8a      	ldrb	r2, [r1, r2]
    6d08:	4313      	orrs	r3, r2
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(2402-2402)];
		for (i = 0; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6d0a:	67bb      	str	r3, [r7, #120]	; 0x78
                                          | rxbuf1[i+1] << 16
                                      | rxbuf1[i+2] << 8
                                          | rxbuf1[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
    6d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6d10:	2b00      	cmp	r3, #0
    6d12:	da00      	bge.n	6d16 <bt_stream_freq+0x22a>
    6d14:	3303      	adds	r3, #3
    6d16:	109b      	asrs	r3, r3, #2
    6d18:	1c5c      	adds	r4, r3, #1
    6d1a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
    6d1c:	f004 fa18 	bl	b150 <rbit>
    6d20:	4601      	mov	r1, r0
    6d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6d26:	2b00      	cmp	r3, #0
    6d28:	da00      	bge.n	6d2c <bt_stream_freq+0x240>
    6d2a:	3303      	adds	r3, #3
    6d2c:	109b      	asrs	r3, r3, #2
    6d2e:	009b      	lsls	r3, r3, #2
    6d30:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    6d32:	4413      	add	r3, r2
    6d34:	681b      	ldr	r3, [r3, #0]
    6d36:	ea81 0203 	eor.w	r2, r1, r3
    6d3a:	00a3      	lsls	r3, r4, #2
    6d3c:	f107 0188 	add.w	r1, r7, #136	; 0x88
    6d40:	440b      	add	r3, r1
    6d42:	f843 2c84 	str.w	r2, [r3, #-132]
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(2402-2402)];
		for (i = 0; i < 44; i += 4) {
    6d46:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6d4a:	3304      	adds	r3, #4
    6d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    6d50:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6d54:	2b2b      	cmp	r3, #43	; 0x2b
    6d56:	ddbe      	ble.n	6cd6 <bt_stream_freq+0x1ea>
                                      | eddystone[i+2] << 8
                                          | eddystone[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
		}
*/
		unsigned len = (p[5] & 0x3f) + 2;
    6d58:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    6d5c:	3305      	adds	r3, #5
    6d5e:	781b      	ldrb	r3, [r3, #0]
    6d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d64:	3302      	adds	r3, #2
    6d66:	677b      	str	r3, [r7, #116]	; 0x74
		
		if (len > 39)
    6d68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    6d6a:	2b27      	cmp	r3, #39	; 0x27
    6d6c:	d900      	bls.n	6d70 <bt_stream_freq+0x284>
			goto rx_flush;
    6d6e:	e061      	b.n	6e34 <bt_stream_freq+0x348>

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    6d70:	4b1b      	ldr	r3, [pc, #108]	; (6de0 <bt_stream_freq+0x2f4>)
    6d72:	68d9      	ldr	r1, [r3, #12]
    6d74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    6d78:	1d1a      	adds	r2, r3, #4
    6d7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    6d7c:	4608      	mov	r0, r1
    6d7e:	4611      	mov	r1, r2
    6d80:	461a      	mov	r2, r3
    6d82:	f003 f917 	bl	9fb4 <btle_crcgen_lut>
    6d86:	6738      	str	r0, [r7, #112]	; 0x70
		u32 wire_crc = (p[4+len+2] << 16)
    6d88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    6d8a:	3306      	adds	r3, #6
    6d8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    6d90:	4413      	add	r3, r2
    6d92:	781b      	ldrb	r3, [r3, #0]
    6d94:	041a      	lsls	r2, r3, #16
                                                 | (p[4+len+1] << 8)
    6d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    6d98:	3305      	adds	r3, #5
    6d9a:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    6d9e:	440b      	add	r3, r1
    6da0:	781b      	ldrb	r3, [r3, #0]
    6da2:	021b      	lsls	r3, r3, #8
    6da4:	4313      	orrs	r3, r2
                                                 | (p[4+len+0] << 0);
    6da6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    6da8:	3204      	adds	r2, #4
    6daa:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    6dae:	440a      	add	r2, r1
    6db0:	7812      	ldrb	r2, [r2, #0]
    6db2:	4313      	orrs	r3, r2
		
		if (len > 39)
			goto rx_flush;

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
		u32 wire_crc = (p[4+len+2] << 16)
    6db4:	66fb      	str	r3, [r7, #108]	; 0x6c
                                                 | (p[4+len+1] << 8)
                                                 | (p[4+len+0] << 0);
                if (calc_crc != wire_crc) // skip packets with a bad CRC
    6db6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    6db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6dba:	429a      	cmp	r2, r3
    6dbc:	d01a      	beq.n	6df4 <bt_stream_freq+0x308>
                        goto rx_flush;
    6dbe:	e039      	b.n	6e34 <bt_stream_freq+0x348>
    6dc0:	2009c03c 	.word	0x2009c03c
    6dc4:	8e89bed6 	.word	0x8e89bed6
    6dc8:	2009c058 	.word	0x2009c058
    6dcc:	1000049c 	.word	0x1000049c
    6dd0:	10000b0c 	.word	0x10000b0c
    6dd4:	2009c038 	.word	0x2009c038
    6dd8:	100010d0 	.word	0x100010d0
    6ddc:	10000a48 	.word	0x10000a48
    6de0:	10000458 	.word	0x10000458
    6de4:	50004110 	.word	0x50004110
    6de8:	40030024 	.word	0x40030024
    6dec:	0000d2dc 	.word	0x0000d2dc
    6df0:	1000109c 	.word	0x1000109c

		
		if (p[38] == 0x00 && p[39] == 0x3d) // 37
    6df4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    6df8:	3326      	adds	r3, #38	; 0x26
    6dfa:	781b      	ldrb	r3, [r3, #0]
    6dfc:	2b00      	cmp	r3, #0
    6dfe:	d116      	bne.n	6e2e <bt_stream_freq+0x342>
    6e00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    6e04:	3327      	adds	r3, #39	; 0x27
    6e06:	781b      	ldrb	r3, [r3, #0]
    6e08:	2b3d      	cmp	r3, #61	; 0x3d
    6e0a:	d110      	bne.n	6e2e <bt_stream_freq+0x342>
	//	if (p[38] == 0x44 && p[39] == 0x1d) // 38
	//	if (p[38] == 0x87 && p[39] == 0x02) // 39
		{
			device_index = p[40];
    6e0c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    6e10:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    6e14:	4b2d      	ldr	r3, [pc, #180]	; (6ecc <bt_stream_freq+0x3e0>)
    6e16:	701a      	strb	r2, [r3, #0]
			enqueue_freq (MESSAGE, freq_buf);
    6e18:	f107 0338 	add.w	r3, r7, #56	; 0x38
    6e1c:	2002      	movs	r0, #2
    6e1e:	4619      	mov	r1, r3
    6e20:	f7fd fcb0 	bl	4784 <enqueue_freq>
			handle_usb(clkn);
    6e24:	4b2a      	ldr	r3, [pc, #168]	; (6ed0 <bt_stream_freq+0x3e4>)
    6e26:	681b      	ldr	r3, [r3, #0]
    6e28:	4618      	mov	r0, r3
    6e2a:	f003 f9df 	bl	a1ec <handle_usb>
		}
		RXLED_CLR;
    6e2e:	4b29      	ldr	r3, [pc, #164]	; (6ed4 <bt_stream_freq+0x3e8>)
    6e30:	2210      	movs	r2, #16
    6e32:	601a      	str	r2, [r3, #0]
	       
	rx_flush:
		cc2400_strobe (SRFOFF);
    6e34:	2064      	movs	r0, #100	; 0x64
    6e36:	f004 fc0f 	bl	b658 <cc2400_strobe>
                while ((cc2400_status () & FS_LOCK));
    6e3a:	bf00      	nop
    6e3c:	f004 fc02 	bl	b644 <cc2400_status>
    6e40:	4603      	mov	r3, r0
    6e42:	f003 0304 	and.w	r3, r3, #4
    6e46:	2b00      	cmp	r3, #0
    6e48:	d1f8      	bne.n	6e3c <bt_stream_freq+0x350>

                while (!(cc2400_status () & XOSC16M_STABLE));
    6e4a:	bf00      	nop
    6e4c:	f004 fbfa 	bl	b644 <cc2400_status>
    6e50:	4603      	mov	r3, r0
    6e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6e56:	2b00      	cmp	r3, #0
    6e58:	d0f8      	beq.n	6e4c <bt_stream_freq+0x360>

                cc2400_strobe (SFSON);
    6e5a:	2061      	movs	r0, #97	; 0x61
    6e5c:	f004 fbfc 	bl	b658 <cc2400_strobe>
                while (!(cc2400_status () & FS_LOCK));
    6e60:	bf00      	nop
    6e62:	f004 fbef 	bl	b644 <cc2400_status>
    6e66:	4603      	mov	r3, r0
    6e68:	f003 0304 	and.w	r3, r3, #4
    6e6c:	2b00      	cmp	r3, #0
    6e6e:	d0f8      	beq.n	6e62 <bt_stream_freq+0x376>

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6e70:	4a19      	ldr	r2, [pc, #100]	; (6ed8 <bt_stream_freq+0x3ec>)
    6e72:	4b19      	ldr	r3, [pc, #100]	; (6ed8 <bt_stream_freq+0x3ec>)
    6e74:	681b      	ldr	r3, [r3, #0]
    6e76:	f023 0301 	bic.w	r3, r3, #1
    6e7a:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    6e7c:	e003      	b.n	6e86 <bt_stream_freq+0x39a>
                        u8 tmp = (u8)DIO_SSP_DR;
    6e7e:	4b17      	ldr	r3, [pc, #92]	; (6edc <bt_stream_freq+0x3f0>)
    6e80:	681b      	ldr	r3, [r3, #0]
    6e82:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                cc2400_strobe (SFSON);
                while (!(cc2400_status () & FS_LOCK));

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    6e86:	4b16      	ldr	r3, [pc, #88]	; (6ee0 <bt_stream_freq+0x3f4>)
    6e88:	681b      	ldr	r3, [r3, #0]
    6e8a:	f003 0304 	and.w	r3, r3, #4
    6e8e:	2b00      	cmp	r3, #0
    6e90:	d1f5      	bne.n	6e7e <bt_stream_freq+0x392>
                        u8 tmp = (u8)DIO_SSP_DR;
                }
		dma_init_le();
    6e92:	f7fe fd79 	bl	5988 <dma_init_le>
		dio_ssp_start();
    6e96:	f7fe feef 	bl	5c78 <dio_ssp_start>
		
                cc2400_strobe (SRX);
    6e9a:	2062      	movs	r0, #98	; 0x62
    6e9c:	f004 fbdc 	bl	b658 <cc2400_strobe>
		rx_tc = 0;
    6ea0:	4b10      	ldr	r3, [pc, #64]	; (6ee4 <bt_stream_freq+0x3f8>)
    6ea2:	2200      	movs	r2, #0
    6ea4:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6ea6:	4b10      	ldr	r3, [pc, #64]	; (6ee8 <bt_stream_freq+0x3fc>)
    6ea8:	2200      	movs	r2, #0
    6eaa:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
//	cc2400_rx();
	while (requested_mode == MODE_RX_FREQ) {
    6eac:	4b0f      	ldr	r3, [pc, #60]	; (6eec <bt_stream_freq+0x400>)
    6eae:	781b      	ldrb	r3, [r3, #0]
    6eb0:	b2db      	uxtb	r3, r3
    6eb2:	2b0e      	cmp	r3, #14
    6eb4:	f43f aea7 	beq.w	6c06 <bt_stream_freq+0x11a>
		rx_tc = 0;
		rx_err = 0;
	 
	
	}
	cc2400_idle();
    6eb8:	f7fe ff72 	bl	5da0 <cc2400_idle>
	dio_ssp_stop ();
    6ebc:	f7fe ff0c 	bl	5cd8 <dio_ssp_stop>
	cs_trigger_disable ();
    6ec0:	f7fd fe1e 	bl	4b00 <cs_trigger_disable>
}
    6ec4:	378c      	adds	r7, #140	; 0x8c
    6ec6:	46bd      	mov	sp, r7
    6ec8:	bd90      	pop	{r4, r7, pc}
    6eca:	bf00      	nop
    6ecc:	10000bf8 	.word	0x10000bf8
    6ed0:	10000bf4 	.word	0x10000bf4
    6ed4:	2009c03c 	.word	0x2009c03c
    6ed8:	40030024 	.word	0x40030024
    6edc:	40030008 	.word	0x40030008
    6ee0:	4003000c 	.word	0x4003000c
    6ee4:	10000b0c 	.word	0x10000b0c
    6ee8:	100010d0 	.word	0x100010d0
    6eec:	10000a3f 	.word	0x10000a3f

00006ef0 <bt_stream_legacy>:


// wpson legacy mode
void bt_stream_legacy()
{
    6ef0:	b590      	push	{r4, r7, lr}
    6ef2:	b097      	sub	sp, #92	; 0x5c
    6ef4:	af00      	add	r7, sp, #0
//	TXLED_SET;
	RXLED_CLR;
    6ef6:	4b9e      	ldr	r3, [pc, #632]	; (7170 <bt_stream_legacy+0x280>)
    6ef8:	2210      	movs	r2, #16
    6efa:	601a      	str	r2, [r3, #0]
	int i;
	
	queue_init();
    6efc:	f003 f8d6 	bl	a0ac <queue_init>
	dio_ssp_init();
    6f00:	f004 fa26 	bl	b350 <dio_ssp_init>
	dma_init_le();
    6f04:	f7fe fd40 	bl	5988 <dma_init_le>
	dio_ssp_start();
    6f08:	f7fe feb6 	bl	5c78 <dio_ssp_start>
	
	cc2400_set(MANAND, 0x7fff);
    6f0c:	200d      	movs	r0, #13
    6f0e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    6f12:	f004 faef 	bl	b4f4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    6f16:	2012      	movs	r0, #18
    6f18:	f642 3122 	movw	r1, #11042	; 0x2b22
    6f1c:	f004 faea 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    6f20:	2014      	movs	r0, #20
    6f22:	f241 214b 	movw	r1, #4683	; 0x124b
    6f26:	f004 fae5 	bl	b4f4 <cc2400_set>
	cc2400_set(GRMDM,   0x6561); // un-buffered mode, GFSK
    6f2a:	2020      	movs	r0, #32
    6f2c:	f246 5161 	movw	r1, #25953	; 0x6561
    6f30:	f004 fae0 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    6f34:	2003      	movs	r0, #3
    6f36:	2140      	movs	r1, #64	; 0x40
    6f38:	f004 fadc 	bl	b4f4 <cc2400_set>

//	cc2400_set(SYNCH, 0xf9ae);
//	cc2400_set(SYNCL, 0x1584);
	
	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
    6f3c:	488d      	ldr	r0, [pc, #564]	; (7174 <bt_stream_legacy+0x284>)
    6f3e:	f004 f907 	bl	b150 <rbit>
    6f42:	4603      	mov	r3, r0
    6f44:	b29b      	uxth	r3, r3
    6f46:	202c      	movs	r0, #44	; 0x2c
    6f48:	4619      	mov	r1, r3
    6f4a:	f004 fad3 	bl	b4f4 <cc2400_set>
	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
    6f4e:	4889      	ldr	r0, [pc, #548]	; (7174 <bt_stream_legacy+0x284>)
    6f50:	f004 f8fe 	bl	b150 <rbit>
    6f54:	4603      	mov	r3, r0
    6f56:	0c1b      	lsrs	r3, r3, #16
    6f58:	b29b      	uxth	r3, r3
    6f5a:	202d      	movs	r0, #45	; 0x2d
    6f5c:	4619      	mov	r1, r3
    6f5e:	f004 fac9 	bl	b4f4 <cc2400_set>
	
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6f62:	4b85      	ldr	r3, [pc, #532]	; (7178 <bt_stream_legacy+0x288>)
    6f64:	2280      	movs	r2, #128	; 0x80
    6f66:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif

	while (!(cc2400_status() & XOSC16M_STABLE));
    6f68:	bf00      	nop
    6f6a:	f004 fb6b 	bl	b644 <cc2400_status>
    6f6e:	4603      	mov	r3, r0
    6f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6f74:	2b00      	cmp	r3, #0
    6f76:	d0f8      	beq.n	6f6a <bt_stream_legacy+0x7a>
	while ((cc2400_status() & FS_LOCK));
    6f78:	bf00      	nop
    6f7a:	f004 fb63 	bl	b644 <cc2400_status>
    6f7e:	4603      	mov	r3, r0
    6f80:	f003 0304 	and.w	r3, r3, #4
    6f84:	2b00      	cmp	r3, #0
    6f86:	d1f8      	bne.n	6f7a <bt_stream_legacy+0x8a>

	cc2400_set(FSDIV, channel - 1);
    6f88:	4b7c      	ldr	r3, [pc, #496]	; (717c <bt_stream_legacy+0x28c>)
    6f8a:	881b      	ldrh	r3, [r3, #0]
    6f8c:	b29b      	uxth	r3, r3
    6f8e:	3b01      	subs	r3, #1
    6f90:	b29b      	uxth	r3, r3
    6f92:	2002      	movs	r0, #2
    6f94:	4619      	mov	r1, r3
    6f96:	f004 faad 	bl	b4f4 <cc2400_set>
	cc2400_strobe(SFSON);
    6f9a:	2061      	movs	r0, #97	; 0x61
    6f9c:	f004 fb5c 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6fa0:	bf00      	nop
    6fa2:	f004 fb4f 	bl	b644 <cc2400_status>
    6fa6:	4603      	mov	r3, r0
    6fa8:	f003 0304 	and.w	r3, r3, #4
    6fac:	2b00      	cmp	r3, #0
    6fae:	d0f8      	beq.n	6fa2 <bt_stream_legacy+0xb2>
	cc2400_strobe(SRX);
    6fb0:	2062      	movs	r0, #98	; 0x62
    6fb2:	f004 fb51 	bl	b658 <cc2400_strobe>
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    6fb6:	e150      	b.n	725a <bt_stream_legacy+0x36a>
		
		while (!(cc2400_status () & SYNC_RECEIVED));
    6fb8:	bf00      	nop
    6fba:	f004 fb43 	bl	b644 <cc2400_status>
    6fbe:	4603      	mov	r3, r0
    6fc0:	f003 0310 	and.w	r3, r3, #16
    6fc4:	2b00      	cmp	r3, #0
    6fc6:	d0f8      	beq.n	6fba <bt_stream_legacy+0xca>
                else
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
    6fc8:	4b6d      	ldr	r3, [pc, #436]	; (7180 <bt_stream_legacy+0x290>)
    6fca:	2200      	movs	r2, #0
    6fcc:	601a      	str	r2, [r3, #0]
		rssi_count = 5;
    6fce:	4b6d      	ldr	r3, [pc, #436]	; (7184 <bt_stream_legacy+0x294>)
    6fd0:	2205      	movs	r2, #5
    6fd2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < rssi_count; i++)
    6fd4:	2300      	movs	r3, #0
    6fd6:	657b      	str	r3, [r7, #84]	; 0x54
    6fd8:	e00d      	b.n	6ff6 <bt_stream_legacy+0x106>
		{
			rssi_sum += (int8_t)cc2400_get_rev(RSSI);
    6fda:	2006      	movs	r0, #6
    6fdc:	f7ff fa32 	bl	6444 <cc2400_get_rev>
    6fe0:	4603      	mov	r3, r0
    6fe2:	b2db      	uxtb	r3, r3
    6fe4:	b25a      	sxtb	r2, r3
    6fe6:	4b66      	ldr	r3, [pc, #408]	; (7180 <bt_stream_legacy+0x290>)
    6fe8:	681b      	ldr	r3, [r3, #0]
    6fea:	4413      	add	r3, r2
    6fec:	4a64      	ldr	r2, [pc, #400]	; (7180 <bt_stream_legacy+0x290>)
    6fee:	6013      	str	r3, [r2, #0]
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
		rssi_count = 5;
		for (i = 0; i < rssi_count; i++)
    6ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6ff2:	3301      	adds	r3, #1
    6ff4:	657b      	str	r3, [r7, #84]	; 0x54
    6ff6:	4b63      	ldr	r3, [pc, #396]	; (7184 <bt_stream_legacy+0x294>)
    6ff8:	781b      	ldrb	r3, [r3, #0]
    6ffa:	461a      	mov	r2, r3
    6ffc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    6ffe:	429a      	cmp	r2, r3
    7000:	dceb      	bgt.n	6fda <bt_stream_legacy+0xea>
		{
			rssi_sum += (int8_t)cc2400_get_rev(RSSI);
		}
	
		clkn_legacy = clkn;
    7002:	4b61      	ldr	r3, [pc, #388]	; (7188 <bt_stream_legacy+0x298>)
    7004:	681b      	ldr	r3, [r3, #0]
    7006:	4a61      	ldr	r2, [pc, #388]	; (718c <bt_stream_legacy+0x29c>)
    7008:	6013      	str	r3, [r2, #0]
		while (!rx_tc);
    700a:	bf00      	nop
    700c:	4b60      	ldr	r3, [pc, #384]	; (7190 <bt_stream_legacy+0x2a0>)
    700e:	681b      	ldr	r3, [r3, #0]
    7010:	2b00      	cmp	r3, #0
    7012:	d0fb      	beq.n	700c <bt_stream_legacy+0x11c>
	
		RXLED_SET;
    7014:	4b5f      	ldr	r3, [pc, #380]	; (7194 <bt_stream_legacy+0x2a4>)
    7016:	2210      	movs	r2, #16
    7018:	601a      	str	r2, [r3, #0]
		if (rx_err) {
    701a:	4b5f      	ldr	r3, [pc, #380]	; (7198 <bt_stream_legacy+0x2a8>)
    701c:	681b      	ldr	r3, [r3, #0]
    701e:	2b00      	cmp	r3, #0
    7020:	d007      	beq.n	7032 <bt_stream_legacy+0x142>
		status |= DMA_ERROR;
    7022:	4b5e      	ldr	r3, [pc, #376]	; (719c <bt_stream_legacy+0x2ac>)
    7024:	781b      	ldrb	r3, [r3, #0]
    7026:	b2db      	uxtb	r3, r3
    7028:	f043 0302 	orr.w	r3, r3, #2
    702c:	b2da      	uxtb	r2, r3
    702e:	4b5b      	ldr	r3, [pc, #364]	; (719c <bt_stream_legacy+0x2ac>)
    7030:	701a      	strb	r2, [r3, #0]
		}	
		if (rx_tc > 1)
    7032:	4b57      	ldr	r3, [pc, #348]	; (7190 <bt_stream_legacy+0x2a0>)
    7034:	681b      	ldr	r3, [r3, #0]
    7036:	2b01      	cmp	r3, #1
    7038:	d907      	bls.n	704a <bt_stream_legacy+0x15a>
			status |= DMA_OVERFLOW;
    703a:	4b58      	ldr	r3, [pc, #352]	; (719c <bt_stream_legacy+0x2ac>)
    703c:	781b      	ldrb	r3, [r3, #0]
    703e:	b2db      	uxtb	r3, r3
    7040:	f043 0301 	orr.w	r3, r3, #1
    7044:	b2da      	uxtb	r2, r3
    7046:	4b55      	ldr	r3, [pc, #340]	; (719c <bt_stream_legacy+0x2ac>)
    7048:	701a      	strb	r2, [r3, #0]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    704a:	1d3b      	adds	r3, r7, #4
    704c:	653b      	str	r3, [r7, #80]	; 0x50
		packet[0] = le.access_address;
    704e:	4b54      	ldr	r3, [pc, #336]	; (71a0 <bt_stream_legacy+0x2b0>)
    7050:	681b      	ldr	r3, [r3, #0]
    7052:	607b      	str	r3, [r7, #4]

                while (DMACC0Config & DMACCxConfig_E && rx_err == 0);
    7054:	bf00      	nop
    7056:	4b53      	ldr	r3, [pc, #332]	; (71a4 <bt_stream_legacy+0x2b4>)
    7058:	681b      	ldr	r3, [r3, #0]
    705a:	f003 0301 	and.w	r3, r3, #1
    705e:	2b00      	cmp	r3, #0
    7060:	d003      	beq.n	706a <bt_stream_legacy+0x17a>
    7062:	4b4d      	ldr	r3, [pc, #308]	; (7198 <bt_stream_legacy+0x2a8>)
    7064:	681b      	ldr	r3, [r3, #0]
    7066:	2b00      	cmp	r3, #0
    7068:	d0f5      	beq.n	7056 <bt_stream_legacy+0x166>
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    706a:	4a4f      	ldr	r2, [pc, #316]	; (71a8 <bt_stream_legacy+0x2b8>)
    706c:	4b4e      	ldr	r3, [pc, #312]	; (71a8 <bt_stream_legacy+0x2b8>)
    706e:	681b      	ldr	r3, [r3, #0]
    7070:	f023 0301 	bic.w	r3, r3, #1
    7074:	6013      	str	r3, [r2, #0]
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    7076:	4b41      	ldr	r3, [pc, #260]	; (717c <bt_stream_legacy+0x28c>)
    7078:	881b      	ldrh	r3, [r3, #0]
    707a:	b29b      	uxth	r3, r3
    707c:	b2db      	uxtb	r3, r3
    707e:	3b62      	subs	r3, #98	; 0x62
    7080:	b2db      	uxtb	r3, r3
    7082:	4618      	mov	r0, r3
    7084:	f002 fe92 	bl	9dac <btle_channel_index>
    7088:	4603      	mov	r3, r0
    708a:	461a      	mov	r2, r3
    708c:	4613      	mov	r3, r2
    708e:	005b      	lsls	r3, r3, #1
    7090:	4413      	add	r3, r2
    7092:	011b      	lsls	r3, r3, #4
    7094:	4a45      	ldr	r2, [pc, #276]	; (71ac <bt_stream_legacy+0x2bc>)
    7096:	4413      	add	r3, r2
    7098:	64fb      	str	r3, [r7, #76]	; 0x4c
		for (i = 0; i < 44; i += 4) {
    709a:	2300      	movs	r3, #0
    709c:	657b      	str	r3, [r7, #84]	; 0x54
    709e:	e034      	b.n	710a <bt_stream_legacy+0x21a>
			uint32_t v = rxbuf1[i+0] << 24
    70a0:	4a43      	ldr	r2, [pc, #268]	; (71b0 <bt_stream_legacy+0x2c0>)
    70a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    70a4:	4413      	add	r3, r2
    70a6:	781b      	ldrb	r3, [r3, #0]
    70a8:	061a      	lsls	r2, r3, #24
                                          | rxbuf1[i+1] << 16
    70aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    70ac:	3301      	adds	r3, #1
    70ae:	4940      	ldr	r1, [pc, #256]	; (71b0 <bt_stream_legacy+0x2c0>)
    70b0:	5ccb      	ldrb	r3, [r1, r3]
    70b2:	041b      	lsls	r3, r3, #16
    70b4:	431a      	orrs	r2, r3
                                      | rxbuf1[i+2] << 8
    70b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    70b8:	3302      	adds	r3, #2
    70ba:	493d      	ldr	r1, [pc, #244]	; (71b0 <bt_stream_legacy+0x2c0>)
    70bc:	5ccb      	ldrb	r3, [r1, r3]
    70be:	021b      	lsls	r3, r3, #8
    70c0:	4313      	orrs	r3, r2
                                          | rxbuf1[i+3] << 0;
    70c2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    70c4:	3203      	adds	r2, #3
    70c6:	493a      	ldr	r1, [pc, #232]	; (71b0 <bt_stream_legacy+0x2c0>)
    70c8:	5c8a      	ldrb	r2, [r1, r2]
    70ca:	4313      	orrs	r3, r2
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    70cc:	64bb      	str	r3, [r7, #72]	; 0x48
                                          | rxbuf1[i+1] << 16
                                      | rxbuf1[i+2] << 8
                                          | rxbuf1[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
    70ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    70d0:	2b00      	cmp	r3, #0
    70d2:	da00      	bge.n	70d6 <bt_stream_legacy+0x1e6>
    70d4:	3303      	adds	r3, #3
    70d6:	109b      	asrs	r3, r3, #2
    70d8:	1c5c      	adds	r4, r3, #1
    70da:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    70dc:	f004 f838 	bl	b150 <rbit>
    70e0:	4601      	mov	r1, r0
    70e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    70e4:	2b00      	cmp	r3, #0
    70e6:	da00      	bge.n	70ea <bt_stream_legacy+0x1fa>
    70e8:	3303      	adds	r3, #3
    70ea:	109b      	asrs	r3, r3, #2
    70ec:	009b      	lsls	r3, r3, #2
    70ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    70f0:	4413      	add	r3, r2
    70f2:	681b      	ldr	r3, [r3, #0]
    70f4:	ea81 0203 	eor.w	r2, r1, r3
    70f8:	00a3      	lsls	r3, r4, #2
    70fa:	f107 0158 	add.w	r1, r7, #88	; 0x58
    70fe:	440b      	add	r3, r1
    7100:	f843 2c54 	str.w	r2, [r3, #-84]
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
    7104:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    7106:	3304      	adds	r3, #4
    7108:	657b      	str	r3, [r7, #84]	; 0x54
    710a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    710c:	2b2b      	cmp	r3, #43	; 0x2b
    710e:	ddc7      	ble.n	70a0 <bt_stream_legacy+0x1b0>
                                      | eddystone[i+2] << 8
                                          | eddystone[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
		}
*/
		unsigned len = (p[5] & 0x3f) + 2;
    7110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7112:	3305      	adds	r3, #5
    7114:	781b      	ldrb	r3, [r3, #0]
    7116:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    711a:	3302      	adds	r3, #2
    711c:	647b      	str	r3, [r7, #68]	; 0x44
		
		if (len > 39)
    711e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7120:	2b27      	cmp	r3, #39	; 0x27
    7122:	d900      	bls.n	7126 <bt_stream_legacy+0x236>
			goto rx_flush;
    7124:	e05d      	b.n	71e2 <bt_stream_legacy+0x2f2>

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    7126:	4b1e      	ldr	r3, [pc, #120]	; (71a0 <bt_stream_legacy+0x2b0>)
    7128:	68d9      	ldr	r1, [r3, #12]
    712a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    712c:	1d1a      	adds	r2, r3, #4
    712e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7130:	4608      	mov	r0, r1
    7132:	4611      	mov	r1, r2
    7134:	461a      	mov	r2, r3
    7136:	f002 ff3d 	bl	9fb4 <btle_crcgen_lut>
    713a:	6438      	str	r0, [r7, #64]	; 0x40
		u32 wire_crc = (p[4+len+2] << 16)
    713c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    713e:	3306      	adds	r3, #6
    7140:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    7142:	4413      	add	r3, r2
    7144:	781b      	ldrb	r3, [r3, #0]
    7146:	041a      	lsls	r2, r3, #16
                                                 | (p[4+len+1] << 8)
    7148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    714a:	3305      	adds	r3, #5
    714c:	6d39      	ldr	r1, [r7, #80]	; 0x50
    714e:	440b      	add	r3, r1
    7150:	781b      	ldrb	r3, [r3, #0]
    7152:	021b      	lsls	r3, r3, #8
    7154:	4313      	orrs	r3, r2
                                                 | (p[4+len+0] << 0);
    7156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    7158:	3204      	adds	r2, #4
    715a:	6d39      	ldr	r1, [r7, #80]	; 0x50
    715c:	440a      	add	r2, r1
    715e:	7812      	ldrb	r2, [r2, #0]
    7160:	4313      	orrs	r3, r2
		
		if (len > 39)
			goto rx_flush;

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
		u32 wire_crc = (p[4+len+2] << 16)
    7162:	63fb      	str	r3, [r7, #60]	; 0x3c
                                                 | (p[4+len+1] << 8)
                                                 | (p[4+len+0] << 0);
                if (calc_crc != wire_crc) // skip packets with a bad CRC
    7164:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    7166:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7168:	429a      	cmp	r2, r3
    716a:	d023      	beq.n	71b4 <bt_stream_legacy+0x2c4>
                        goto rx_flush;
    716c:	e039      	b.n	71e2 <bt_stream_legacy+0x2f2>
    716e:	bf00      	nop
    7170:	2009c03c 	.word	0x2009c03c
    7174:	8e89bed6 	.word	0x8e89bed6
    7178:	2009c058 	.word	0x2009c058
    717c:	1000049c 	.word	0x1000049c
    7180:	10000a4c 	.word	0x10000a4c
    7184:	10000a49 	.word	0x10000a49
    7188:	10000bf4 	.word	0x10000bf4
    718c:	1000103c 	.word	0x1000103c
    7190:	10000b0c 	.word	0x10000b0c
    7194:	2009c038 	.word	0x2009c038
    7198:	100010d0 	.word	0x100010d0
    719c:	10000a48 	.word	0x10000a48
    71a0:	10000458 	.word	0x10000458
    71a4:	50004110 	.word	0x50004110
    71a8:	40030024 	.word	0x40030024
    71ac:	0000d2dc 	.word	0x0000d2dc
    71b0:	1000109c 	.word	0x1000109c


		if (p[38] == 0x00 && p[39] == 0x3d) // 37
    71b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    71b6:	3326      	adds	r3, #38	; 0x26
    71b8:	781b      	ldrb	r3, [r3, #0]
    71ba:	2b00      	cmp	r3, #0
    71bc:	d109      	bne.n	71d2 <bt_stream_legacy+0x2e2>
    71be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    71c0:	3327      	adds	r3, #39	; 0x27
    71c2:	781b      	ldrb	r3, [r3, #0]
    71c4:	2b3d      	cmp	r3, #61	; 0x3d
    71c6:	d104      	bne.n	71d2 <bt_stream_legacy+0x2e2>
		enqueue_legacy (BR_PACKET, (uint8_t*)packet);
    71c8:	1d3b      	adds	r3, r7, #4
    71ca:	2000      	movs	r0, #0
    71cc:	4619      	mov	r1, r3
    71ce:	f7fd fa45 	bl	465c <enqueue_legacy>
//		enqueue (BR_PACKET, (uint8_t*)rxbuf1);
		handle_usb(clkn);
    71d2:	4b29      	ldr	r3, [pc, #164]	; (7278 <bt_stream_legacy+0x388>)
    71d4:	681b      	ldr	r3, [r3, #0]
    71d6:	4618      	mov	r0, r3
    71d8:	f003 f808 	bl	a1ec <handle_usb>
//		enqueue (MESSAGE, rssi_buf);
//		handle_usb(clkn);
		RXLED_CLR;
    71dc:	4b27      	ldr	r3, [pc, #156]	; (727c <bt_stream_legacy+0x38c>)
    71de:	2210      	movs	r2, #16
    71e0:	601a      	str	r2, [r3, #0]
	       
	rx_flush:
		cc2400_strobe (SRFOFF);
    71e2:	2064      	movs	r0, #100	; 0x64
    71e4:	f004 fa38 	bl	b658 <cc2400_strobe>
                while ((cc2400_status () & FS_LOCK));
    71e8:	bf00      	nop
    71ea:	f004 fa2b 	bl	b644 <cc2400_status>
    71ee:	4603      	mov	r3, r0
    71f0:	f003 0304 	and.w	r3, r3, #4
    71f4:	2b00      	cmp	r3, #0
    71f6:	d1f8      	bne.n	71ea <bt_stream_legacy+0x2fa>

                while (!(cc2400_status () & XOSC16M_STABLE));
    71f8:	bf00      	nop
    71fa:	f004 fa23 	bl	b644 <cc2400_status>
    71fe:	4603      	mov	r3, r0
    7200:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7204:	2b00      	cmp	r3, #0
    7206:	d0f8      	beq.n	71fa <bt_stream_legacy+0x30a>

                cc2400_strobe (SFSON);
    7208:	2061      	movs	r0, #97	; 0x61
    720a:	f004 fa25 	bl	b658 <cc2400_strobe>
                while (!(cc2400_status () & FS_LOCK));
    720e:	bf00      	nop
    7210:	f004 fa18 	bl	b644 <cc2400_status>
    7214:	4603      	mov	r3, r0
    7216:	f003 0304 	and.w	r3, r3, #4
    721a:	2b00      	cmp	r3, #0
    721c:	d0f8      	beq.n	7210 <bt_stream_legacy+0x320>

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    721e:	4a18      	ldr	r2, [pc, #96]	; (7280 <bt_stream_legacy+0x390>)
    7220:	4b17      	ldr	r3, [pc, #92]	; (7280 <bt_stream_legacy+0x390>)
    7222:	681b      	ldr	r3, [r3, #0]
    7224:	f023 0301 	bic.w	r3, r3, #1
    7228:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    722a:	e003      	b.n	7234 <bt_stream_legacy+0x344>
                        u8 tmp = (u8)DIO_SSP_DR;
    722c:	4b15      	ldr	r3, [pc, #84]	; (7284 <bt_stream_legacy+0x394>)
    722e:	681b      	ldr	r3, [r3, #0]
    7230:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

                cc2400_strobe (SFSON);
                while (!(cc2400_status () & FS_LOCK));

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    7234:	4b14      	ldr	r3, [pc, #80]	; (7288 <bt_stream_legacy+0x398>)
    7236:	681b      	ldr	r3, [r3, #0]
    7238:	f003 0304 	and.w	r3, r3, #4
    723c:	2b00      	cmp	r3, #0
    723e:	d1f5      	bne.n	722c <bt_stream_legacy+0x33c>
                        u8 tmp = (u8)DIO_SSP_DR;
                }
		dma_init_le();
    7240:	f7fe fba2 	bl	5988 <dma_init_le>
		dio_ssp_start();
    7244:	f7fe fd18 	bl	5c78 <dio_ssp_start>
		
//              msleep(500);    
                cc2400_strobe (SRX);
    7248:	2062      	movs	r0, #98	; 0x62
    724a:	f004 fa05 	bl	b658 <cc2400_strobe>
		rx_tc = 0;
    724e:	4b0f      	ldr	r3, [pc, #60]	; (728c <bt_stream_legacy+0x39c>)
    7250:	2200      	movs	r2, #0
    7252:	601a      	str	r2, [r3, #0]
		rx_err = 0;	
    7254:	4b0e      	ldr	r3, [pc, #56]	; (7290 <bt_stream_legacy+0x3a0>)
    7256:	2200      	movs	r2, #0
    7258:	601a      	str	r2, [r3, #0]
	cc2400_set(FSDIV, channel - 1);
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    725a:	4b0e      	ldr	r3, [pc, #56]	; (7294 <bt_stream_legacy+0x3a4>)
    725c:	781b      	ldrb	r3, [r3, #0]
    725e:	b2db      	uxtb	r3, r3
    7260:	2b01      	cmp	r3, #1
    7262:	f43f aea9 	beq.w	6fb8 <bt_stream_legacy+0xc8>
                cc2400_strobe (SRX);
		rx_tc = 0;
		rx_err = 0;	
	}

	cc2400_idle();
    7266:	f7fe fd9b 	bl	5da0 <cc2400_idle>
	dio_ssp_stop ();
    726a:	f7fe fd35 	bl	5cd8 <dio_ssp_stop>
	cs_trigger_disable ();
    726e:	f7fd fc47 	bl	4b00 <cs_trigger_disable>
}
    7272:	375c      	adds	r7, #92	; 0x5c
    7274:	46bd      	mov	sp, r7
    7276:	bd90      	pop	{r4, r7, pc}
    7278:	10000bf4 	.word	0x10000bf4
    727c:	2009c03c 	.word	0x2009c03c
    7280:	40030024 	.word	0x40030024
    7284:	40030008 	.word	0x40030008
    7288:	4003000c 	.word	0x4003000c
    728c:	10000b0c 	.word	0x10000b0c
    7290:	100010d0 	.word	0x100010d0
    7294:	10000a3f 	.word	0x10000a3f

00007298 <bt_stream_sniff>:


// wpson sniff mode
void bt_stream_sniff()
{
    7298:	b590      	push	{r4, r7, lr}
    729a:	b097      	sub	sp, #92	; 0x5c
    729c:	af00      	add	r7, sp, #0
//	TXLED_SET;
	RXLED_CLR;
    729e:	4bb7      	ldr	r3, [pc, #732]	; (757c <bt_stream_sniff+0x2e4>)
    72a0:	2210      	movs	r2, #16
    72a2:	601a      	str	r2, [r3, #0]
	int i;
	
	queue_init();
    72a4:	f002 ff02 	bl	a0ac <queue_init>
	dio_ssp_init();
    72a8:	f004 f852 	bl	b350 <dio_ssp_init>
	dma_init_le();
    72ac:	f7fe fb6c 	bl	5988 <dma_init_le>
	dio_ssp_start();
    72b0:	f7fe fce2 	bl	5c78 <dio_ssp_start>
	
	cc2400_set(MANAND, 0x7fff);
    72b4:	200d      	movs	r0, #13
    72b6:	f647 71ff 	movw	r1, #32767	; 0x7fff
    72ba:	f004 f91b 	bl	b4f4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    72be:	2012      	movs	r0, #18
    72c0:	f642 3122 	movw	r1, #11042	; 0x2b22
    72c4:	f004 f916 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    72c8:	2014      	movs	r0, #20
    72ca:	f241 214b 	movw	r1, #4683	; 0x124b
    72ce:	f004 f911 	bl	b4f4 <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    72d2:	2020      	movs	r0, #32
    72d4:	f240 5161 	movw	r1, #1377	; 0x561
    72d8:	f004 f90c 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    72dc:	2003      	movs	r0, #3
    72de:	2140      	movs	r1, #64	; 0x40
    72e0:	f004 f908 	bl	b4f4 <cc2400_set>

//	cc2400_set(SYNCH, 0xf9ae);
//	cc2400_set(SYNCL, 0x1584);
	
	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
    72e4:	48a6      	ldr	r0, [pc, #664]	; (7580 <bt_stream_sniff+0x2e8>)
    72e6:	f003 ff33 	bl	b150 <rbit>
    72ea:	4603      	mov	r3, r0
    72ec:	b29b      	uxth	r3, r3
    72ee:	202c      	movs	r0, #44	; 0x2c
    72f0:	4619      	mov	r1, r3
    72f2:	f004 f8ff 	bl	b4f4 <cc2400_set>
	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
    72f6:	48a2      	ldr	r0, [pc, #648]	; (7580 <bt_stream_sniff+0x2e8>)
    72f8:	f003 ff2a 	bl	b150 <rbit>
    72fc:	4603      	mov	r3, r0
    72fe:	0c1b      	lsrs	r3, r3, #16
    7300:	b29b      	uxth	r3, r3
    7302:	202d      	movs	r0, #45	; 0x2d
    7304:	4619      	mov	r1, r3
    7306:	f004 f8f5 	bl	b4f4 <cc2400_set>
	
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    730a:	4b9e      	ldr	r3, [pc, #632]	; (7584 <bt_stream_sniff+0x2ec>)
    730c:	2280      	movs	r2, #128	; 0x80
    730e:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif

	while (!(cc2400_status() & XOSC16M_STABLE));
    7310:	bf00      	nop
    7312:	f004 f997 	bl	b644 <cc2400_status>
    7316:	4603      	mov	r3, r0
    7318:	f003 0340 	and.w	r3, r3, #64	; 0x40
    731c:	2b00      	cmp	r3, #0
    731e:	d0f8      	beq.n	7312 <bt_stream_sniff+0x7a>
	while ((cc2400_status() & FS_LOCK));
    7320:	bf00      	nop
    7322:	f004 f98f 	bl	b644 <cc2400_status>
    7326:	4603      	mov	r3, r0
    7328:	f003 0304 	and.w	r3, r3, #4
    732c:	2b00      	cmp	r3, #0
    732e:	d1f8      	bne.n	7322 <bt_stream_sniff+0x8a>

	cc2400_set(FSDIV, channel - 1);
    7330:	4b95      	ldr	r3, [pc, #596]	; (7588 <bt_stream_sniff+0x2f0>)
    7332:	881b      	ldrh	r3, [r3, #0]
    7334:	b29b      	uxth	r3, r3
    7336:	3b01      	subs	r3, #1
    7338:	b29b      	uxth	r3, r3
    733a:	2002      	movs	r0, #2
    733c:	4619      	mov	r1, r3
    733e:	f004 f8d9 	bl	b4f4 <cc2400_set>
	cc2400_strobe(SFSON);
    7342:	2061      	movs	r0, #97	; 0x61
    7344:	f004 f988 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7348:	bf00      	nop
    734a:	f004 f97b 	bl	b644 <cc2400_status>
    734e:	4603      	mov	r3, r0
    7350:	f003 0304 	and.w	r3, r3, #4
    7354:	2b00      	cmp	r3, #0
    7356:	d0f8      	beq.n	734a <bt_stream_sniff+0xb2>
	cc2400_strobe(SRX);
    7358:	2062      	movs	r0, #98	; 0x62
    735a:	f004 f97d 	bl	b658 <cc2400_strobe>
	
	while (requested_mode == MODE_RX_SNIFF) {
    735e:	e146      	b.n	75ee <bt_stream_sniff+0x356>
		
		while (!(cc2400_status () & SYNC_RECEIVED));
    7360:	bf00      	nop
    7362:	f004 f96f 	bl	b644 <cc2400_status>
    7366:	4603      	mov	r3, r0
    7368:	f003 0310 	and.w	r3, r3, #16
    736c:	2b00      	cmp	r3, #0
    736e:	d0f8      	beq.n	7362 <bt_stream_sniff+0xca>
                else
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
    7370:	4b86      	ldr	r3, [pc, #536]	; (758c <bt_stream_sniff+0x2f4>)
    7372:	2200      	movs	r2, #0
    7374:	601a      	str	r2, [r3, #0]
		rssi_count = 5;
    7376:	4b86      	ldr	r3, [pc, #536]	; (7590 <bt_stream_sniff+0x2f8>)
    7378:	2205      	movs	r2, #5
    737a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < rssi_count; i++)
    737c:	2300      	movs	r3, #0
    737e:	657b      	str	r3, [r7, #84]	; 0x54
    7380:	e00d      	b.n	739e <bt_stream_sniff+0x106>
		{
			rssi_sum += (int8_t)cc2400_get_rev(RSSI);
    7382:	2006      	movs	r0, #6
    7384:	f7ff f85e 	bl	6444 <cc2400_get_rev>
    7388:	4603      	mov	r3, r0
    738a:	b2db      	uxtb	r3, r3
    738c:	b25a      	sxtb	r2, r3
    738e:	4b7f      	ldr	r3, [pc, #508]	; (758c <bt_stream_sniff+0x2f4>)
    7390:	681b      	ldr	r3, [r3, #0]
    7392:	4413      	add	r3, r2
    7394:	4a7d      	ldr	r2, [pc, #500]	; (758c <bt_stream_sniff+0x2f4>)
    7396:	6013      	str	r3, [r2, #0]
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
		rssi_count = 5;
		for (i = 0; i < rssi_count; i++)
    7398:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    739a:	3301      	adds	r3, #1
    739c:	657b      	str	r3, [r7, #84]	; 0x54
    739e:	4b7c      	ldr	r3, [pc, #496]	; (7590 <bt_stream_sniff+0x2f8>)
    73a0:	781b      	ldrb	r3, [r3, #0]
    73a2:	461a      	mov	r2, r3
    73a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    73a6:	429a      	cmp	r2, r3
    73a8:	dceb      	bgt.n	7382 <bt_stream_sniff+0xea>
		{
			rssi_sum += (int8_t)cc2400_get_rev(RSSI);
		}
	
		clkn_legacy = clkn;
    73aa:	4b7a      	ldr	r3, [pc, #488]	; (7594 <bt_stream_sniff+0x2fc>)
    73ac:	681b      	ldr	r3, [r3, #0]
    73ae:	4a7a      	ldr	r2, [pc, #488]	; (7598 <bt_stream_sniff+0x300>)
    73b0:	6013      	str	r3, [r2, #0]
		while (!rx_tc);
    73b2:	bf00      	nop
    73b4:	4b79      	ldr	r3, [pc, #484]	; (759c <bt_stream_sniff+0x304>)
    73b6:	681b      	ldr	r3, [r3, #0]
    73b8:	2b00      	cmp	r3, #0
    73ba:	d0fb      	beq.n	73b4 <bt_stream_sniff+0x11c>
	
		RXLED_SET;
    73bc:	4b78      	ldr	r3, [pc, #480]	; (75a0 <bt_stream_sniff+0x308>)
    73be:	2210      	movs	r2, #16
    73c0:	601a      	str	r2, [r3, #0]
		if (rx_err) {
    73c2:	4b78      	ldr	r3, [pc, #480]	; (75a4 <bt_stream_sniff+0x30c>)
    73c4:	681b      	ldr	r3, [r3, #0]
    73c6:	2b00      	cmp	r3, #0
    73c8:	d007      	beq.n	73da <bt_stream_sniff+0x142>
		status |= DMA_ERROR;
    73ca:	4b77      	ldr	r3, [pc, #476]	; (75a8 <bt_stream_sniff+0x310>)
    73cc:	781b      	ldrb	r3, [r3, #0]
    73ce:	b2db      	uxtb	r3, r3
    73d0:	f043 0302 	orr.w	r3, r3, #2
    73d4:	b2da      	uxtb	r2, r3
    73d6:	4b74      	ldr	r3, [pc, #464]	; (75a8 <bt_stream_sniff+0x310>)
    73d8:	701a      	strb	r2, [r3, #0]
		}	
		if (rx_tc > 1)
    73da:	4b70      	ldr	r3, [pc, #448]	; (759c <bt_stream_sniff+0x304>)
    73dc:	681b      	ldr	r3, [r3, #0]
    73de:	2b01      	cmp	r3, #1
    73e0:	d907      	bls.n	73f2 <bt_stream_sniff+0x15a>
			status |= DMA_OVERFLOW;
    73e2:	4b71      	ldr	r3, [pc, #452]	; (75a8 <bt_stream_sniff+0x310>)
    73e4:	781b      	ldrb	r3, [r3, #0]
    73e6:	b2db      	uxtb	r3, r3
    73e8:	f043 0301 	orr.w	r3, r3, #1
    73ec:	b2da      	uxtb	r2, r3
    73ee:	4b6e      	ldr	r3, [pc, #440]	; (75a8 <bt_stream_sniff+0x310>)
    73f0:	701a      	strb	r2, [r3, #0]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    73f2:	1d3b      	adds	r3, r7, #4
    73f4:	653b      	str	r3, [r7, #80]	; 0x50
		packet[0] = le.access_address;
    73f6:	4b6d      	ldr	r3, [pc, #436]	; (75ac <bt_stream_sniff+0x314>)
    73f8:	681b      	ldr	r3, [r3, #0]
    73fa:	607b      	str	r3, [r7, #4]

                while (DMACC0Config & DMACCxConfig_E && rx_err == 0);
    73fc:	bf00      	nop
    73fe:	4b6c      	ldr	r3, [pc, #432]	; (75b0 <bt_stream_sniff+0x318>)
    7400:	681b      	ldr	r3, [r3, #0]
    7402:	f003 0301 	and.w	r3, r3, #1
    7406:	2b00      	cmp	r3, #0
    7408:	d003      	beq.n	7412 <bt_stream_sniff+0x17a>
    740a:	4b66      	ldr	r3, [pc, #408]	; (75a4 <bt_stream_sniff+0x30c>)
    740c:	681b      	ldr	r3, [r3, #0]
    740e:	2b00      	cmp	r3, #0
    7410:	d0f5      	beq.n	73fe <bt_stream_sniff+0x166>
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7412:	4a68      	ldr	r2, [pc, #416]	; (75b4 <bt_stream_sniff+0x31c>)
    7414:	4b67      	ldr	r3, [pc, #412]	; (75b4 <bt_stream_sniff+0x31c>)
    7416:	681b      	ldr	r3, [r3, #0]
    7418:	f023 0301 	bic.w	r3, r3, #1
    741c:	6013      	str	r3, [r2, #0]
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    741e:	4b5a      	ldr	r3, [pc, #360]	; (7588 <bt_stream_sniff+0x2f0>)
    7420:	881b      	ldrh	r3, [r3, #0]
    7422:	b29b      	uxth	r3, r3
    7424:	b2db      	uxtb	r3, r3
    7426:	3b62      	subs	r3, #98	; 0x62
    7428:	b2db      	uxtb	r3, r3
    742a:	4618      	mov	r0, r3
    742c:	f002 fcbe 	bl	9dac <btle_channel_index>
    7430:	4603      	mov	r3, r0
    7432:	461a      	mov	r2, r3
    7434:	4613      	mov	r3, r2
    7436:	005b      	lsls	r3, r3, #1
    7438:	4413      	add	r3, r2
    743a:	011b      	lsls	r3, r3, #4
    743c:	4a5e      	ldr	r2, [pc, #376]	; (75b8 <bt_stream_sniff+0x320>)
    743e:	4413      	add	r3, r2
    7440:	64fb      	str	r3, [r7, #76]	; 0x4c
		for (i = 0; i < 44; i += 4) {
    7442:	2300      	movs	r3, #0
    7444:	657b      	str	r3, [r7, #84]	; 0x54
    7446:	e034      	b.n	74b2 <bt_stream_sniff+0x21a>
			uint32_t v = rxbuf1[i+0] << 24
    7448:	4a5c      	ldr	r2, [pc, #368]	; (75bc <bt_stream_sniff+0x324>)
    744a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    744c:	4413      	add	r3, r2
    744e:	781b      	ldrb	r3, [r3, #0]
    7450:	061a      	lsls	r2, r3, #24
                                          | rxbuf1[i+1] << 16
    7452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    7454:	3301      	adds	r3, #1
    7456:	4959      	ldr	r1, [pc, #356]	; (75bc <bt_stream_sniff+0x324>)
    7458:	5ccb      	ldrb	r3, [r1, r3]
    745a:	041b      	lsls	r3, r3, #16
    745c:	431a      	orrs	r2, r3
                                      | rxbuf1[i+2] << 8
    745e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    7460:	3302      	adds	r3, #2
    7462:	4956      	ldr	r1, [pc, #344]	; (75bc <bt_stream_sniff+0x324>)
    7464:	5ccb      	ldrb	r3, [r1, r3]
    7466:	021b      	lsls	r3, r3, #8
    7468:	4313      	orrs	r3, r2
                                          | rxbuf1[i+3] << 0;
    746a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    746c:	3203      	adds	r2, #3
    746e:	4953      	ldr	r1, [pc, #332]	; (75bc <bt_stream_sniff+0x324>)
    7470:	5c8a      	ldrb	r2, [r1, r2]
    7472:	4313      	orrs	r3, r2
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    7474:	64bb      	str	r3, [r7, #72]	; 0x48
                                          | rxbuf1[i+1] << 16
                                      | rxbuf1[i+2] << 8
                                          | rxbuf1[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
    7476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    7478:	2b00      	cmp	r3, #0
    747a:	da00      	bge.n	747e <bt_stream_sniff+0x1e6>
    747c:	3303      	adds	r3, #3
    747e:	109b      	asrs	r3, r3, #2
    7480:	1c5c      	adds	r4, r3, #1
    7482:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    7484:	f003 fe64 	bl	b150 <rbit>
    7488:	4601      	mov	r1, r0
    748a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    748c:	2b00      	cmp	r3, #0
    748e:	da00      	bge.n	7492 <bt_stream_sniff+0x1fa>
    7490:	3303      	adds	r3, #3
    7492:	109b      	asrs	r3, r3, #2
    7494:	009b      	lsls	r3, r3, #2
    7496:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    7498:	4413      	add	r3, r2
    749a:	681b      	ldr	r3, [r3, #0]
    749c:	ea81 0203 	eor.w	r2, r1, r3
    74a0:	00a3      	lsls	r3, r4, #2
    74a2:	f107 0158 	add.w	r1, r7, #88	; 0x58
    74a6:	440b      	add	r3, r1
    74a8:	f843 2c54 	str.w	r2, [r3, #-84]
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
    74ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    74ae:	3304      	adds	r3, #4
    74b0:	657b      	str	r3, [r7, #84]	; 0x54
    74b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    74b4:	2b2b      	cmp	r3, #43	; 0x2b
    74b6:	ddc7      	ble.n	7448 <bt_stream_sniff+0x1b0>
                                      | eddystone[i+2] << 8
                                          | eddystone[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
		}
*/
		unsigned len = (p[5] & 0x3f) + 2;
    74b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    74ba:	3305      	adds	r3, #5
    74bc:	781b      	ldrb	r3, [r3, #0]
    74be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    74c2:	3302      	adds	r3, #2
    74c4:	647b      	str	r3, [r7, #68]	; 0x44
		
		if (len > 39)
    74c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    74c8:	2b27      	cmp	r3, #39	; 0x27
    74ca:	d900      	bls.n	74ce <bt_stream_sniff+0x236>
			goto rx_flush;
    74cc:	e030      	b.n	7530 <bt_stream_sniff+0x298>

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    74ce:	4b37      	ldr	r3, [pc, #220]	; (75ac <bt_stream_sniff+0x314>)
    74d0:	68d9      	ldr	r1, [r3, #12]
    74d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    74d4:	1d1a      	adds	r2, r3, #4
    74d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    74d8:	4608      	mov	r0, r1
    74da:	4611      	mov	r1, r2
    74dc:	461a      	mov	r2, r3
    74de:	f002 fd69 	bl	9fb4 <btle_crcgen_lut>
    74e2:	6438      	str	r0, [r7, #64]	; 0x40
		u32 wire_crc = (p[4+len+2] << 16)
    74e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    74e6:	3306      	adds	r3, #6
    74e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    74ea:	4413      	add	r3, r2
    74ec:	781b      	ldrb	r3, [r3, #0]
    74ee:	041a      	lsls	r2, r3, #16
                                                 | (p[4+len+1] << 8)
    74f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    74f2:	3305      	adds	r3, #5
    74f4:	6d39      	ldr	r1, [r7, #80]	; 0x50
    74f6:	440b      	add	r3, r1
    74f8:	781b      	ldrb	r3, [r3, #0]
    74fa:	021b      	lsls	r3, r3, #8
    74fc:	4313      	orrs	r3, r2
                                                 | (p[4+len+0] << 0);
    74fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    7500:	3204      	adds	r2, #4
    7502:	6d39      	ldr	r1, [r7, #80]	; 0x50
    7504:	440a      	add	r2, r1
    7506:	7812      	ldrb	r2, [r2, #0]
    7508:	4313      	orrs	r3, r2
		
		if (len > 39)
			goto rx_flush;

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
		u32 wire_crc = (p[4+len+2] << 16)
    750a:	63fb      	str	r3, [r7, #60]	; 0x3c
                                                 | (p[4+len+1] << 8)
                                                 | (p[4+len+0] << 0);
                if (calc_crc != wire_crc) // skip packets with a bad CRC
    750c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    750e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7510:	429a      	cmp	r2, r3
    7512:	d000      	beq.n	7516 <bt_stream_sniff+0x27e>
                        goto rx_flush;
    7514:	e00c      	b.n	7530 <bt_stream_sniff+0x298>


		enqueue_legacy (BR_PACKET, (uint8_t*)packet);
    7516:	1d3b      	adds	r3, r7, #4
    7518:	2000      	movs	r0, #0
    751a:	4619      	mov	r1, r3
    751c:	f7fd f89e 	bl	465c <enqueue_legacy>
//		enqueue (BR_PACKET, (uint8_t*)rxbuf1);
		handle_usb(clkn);
    7520:	4b1c      	ldr	r3, [pc, #112]	; (7594 <bt_stream_sniff+0x2fc>)
    7522:	681b      	ldr	r3, [r3, #0]
    7524:	4618      	mov	r0, r3
    7526:	f002 fe61 	bl	a1ec <handle_usb>
//		enqueue (MESSAGE, rssi_buf);
//		handle_usb(clkn);
		RXLED_CLR;
    752a:	4b14      	ldr	r3, [pc, #80]	; (757c <bt_stream_sniff+0x2e4>)
    752c:	2210      	movs	r2, #16
    752e:	601a      	str	r2, [r3, #0]
	       
	rx_flush:
		cc2400_strobe (SRFOFF);
    7530:	2064      	movs	r0, #100	; 0x64
    7532:	f004 f891 	bl	b658 <cc2400_strobe>
                while ((cc2400_status () & FS_LOCK));
    7536:	bf00      	nop
    7538:	f004 f884 	bl	b644 <cc2400_status>
    753c:	4603      	mov	r3, r0
    753e:	f003 0304 	and.w	r3, r3, #4
    7542:	2b00      	cmp	r3, #0
    7544:	d1f8      	bne.n	7538 <bt_stream_sniff+0x2a0>

                while (!(cc2400_status () & XOSC16M_STABLE));
    7546:	bf00      	nop
    7548:	f004 f87c 	bl	b644 <cc2400_status>
    754c:	4603      	mov	r3, r0
    754e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7552:	2b00      	cmp	r3, #0
    7554:	d0f8      	beq.n	7548 <bt_stream_sniff+0x2b0>

                cc2400_strobe (SFSON);
    7556:	2061      	movs	r0, #97	; 0x61
    7558:	f004 f87e 	bl	b658 <cc2400_strobe>
                while (!(cc2400_status () & FS_LOCK));
    755c:	bf00      	nop
    755e:	f004 f871 	bl	b644 <cc2400_status>
    7562:	4603      	mov	r3, r0
    7564:	f003 0304 	and.w	r3, r3, #4
    7568:	2b00      	cmp	r3, #0
    756a:	d0f8      	beq.n	755e <bt_stream_sniff+0x2c6>

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    756c:	4a11      	ldr	r2, [pc, #68]	; (75b4 <bt_stream_sniff+0x31c>)
    756e:	4b11      	ldr	r3, [pc, #68]	; (75b4 <bt_stream_sniff+0x31c>)
    7570:	681b      	ldr	r3, [r3, #0]
    7572:	f023 0301 	bic.w	r3, r3, #1
    7576:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    7578:	e026      	b.n	75c8 <bt_stream_sniff+0x330>
    757a:	bf00      	nop
    757c:	2009c03c 	.word	0x2009c03c
    7580:	8e89bed6 	.word	0x8e89bed6
    7584:	2009c058 	.word	0x2009c058
    7588:	1000049c 	.word	0x1000049c
    758c:	10000a4c 	.word	0x10000a4c
    7590:	10000a49 	.word	0x10000a49
    7594:	10000bf4 	.word	0x10000bf4
    7598:	1000103c 	.word	0x1000103c
    759c:	10000b0c 	.word	0x10000b0c
    75a0:	2009c038 	.word	0x2009c038
    75a4:	100010d0 	.word	0x100010d0
    75a8:	10000a48 	.word	0x10000a48
    75ac:	10000458 	.word	0x10000458
    75b0:	50004110 	.word	0x50004110
    75b4:	40030024 	.word	0x40030024
    75b8:	0000d2dc 	.word	0x0000d2dc
    75bc:	1000109c 	.word	0x1000109c
                        u8 tmp = (u8)DIO_SSP_DR;
    75c0:	4b12      	ldr	r3, [pc, #72]	; (760c <bt_stream_sniff+0x374>)
    75c2:	681b      	ldr	r3, [r3, #0]
    75c4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

                cc2400_strobe (SFSON);
                while (!(cc2400_status () & FS_LOCK));

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    75c8:	4b11      	ldr	r3, [pc, #68]	; (7610 <bt_stream_sniff+0x378>)
    75ca:	681b      	ldr	r3, [r3, #0]
    75cc:	f003 0304 	and.w	r3, r3, #4
    75d0:	2b00      	cmp	r3, #0
    75d2:	d1f5      	bne.n	75c0 <bt_stream_sniff+0x328>
                        u8 tmp = (u8)DIO_SSP_DR;
                }
		dma_init_le();
    75d4:	f7fe f9d8 	bl	5988 <dma_init_le>
		dio_ssp_start();
    75d8:	f7fe fb4e 	bl	5c78 <dio_ssp_start>
		
//              msleep(500);    
                cc2400_strobe (SRX);
    75dc:	2062      	movs	r0, #98	; 0x62
    75de:	f004 f83b 	bl	b658 <cc2400_strobe>
		rx_tc = 0;
    75e2:	4b0c      	ldr	r3, [pc, #48]	; (7614 <bt_stream_sniff+0x37c>)
    75e4:	2200      	movs	r2, #0
    75e6:	601a      	str	r2, [r3, #0]
		rx_err = 0;	
    75e8:	4b0b      	ldr	r3, [pc, #44]	; (7618 <bt_stream_sniff+0x380>)
    75ea:	2200      	movs	r2, #0
    75ec:	601a      	str	r2, [r3, #0]
	cc2400_set(FSDIV, channel - 1);
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
	while (requested_mode == MODE_RX_SNIFF) {
    75ee:	4b0b      	ldr	r3, [pc, #44]	; (761c <bt_stream_sniff+0x384>)
    75f0:	781b      	ldrb	r3, [r3, #0]
    75f2:	b2db      	uxtb	r3, r3
    75f4:	2b13      	cmp	r3, #19
    75f6:	f43f aeb3 	beq.w	7360 <bt_stream_sniff+0xc8>
                cc2400_strobe (SRX);
		rx_tc = 0;
		rx_err = 0;	
	}

	cc2400_idle();
    75fa:	f7fe fbd1 	bl	5da0 <cc2400_idle>
	dio_ssp_stop ();
    75fe:	f7fe fb6b 	bl	5cd8 <dio_ssp_stop>
	cs_trigger_disable ();
    7602:	f7fd fa7d 	bl	4b00 <cs_trigger_disable>
}
    7606:	375c      	adds	r7, #92	; 0x5c
    7608:	46bd      	mov	sp, r7
    760a:	bd90      	pop	{r4, r7, pc}
    760c:	40030008 	.word	0x40030008
    7610:	4003000c 	.word	0x4003000c
    7614:	10000b0c 	.word	0x10000b0c
    7618:	100010d0 	.word	0x100010d0
    761c:	10000a3f 	.word	0x10000a3f

00007620 <bt_stream_cfo>:


// wpson cfo mode -F: raw cfo samples transfer to host
void bt_stream_cfo()
{
    7620:	b580      	push	{r7, lr}
    7622:	b090      	sub	sp, #64	; 0x40
    7624:	af00      	add	r7, sp, #0
//	TXLED_SET;
	RXLED_CLR;
    7626:	4b5f      	ldr	r3, [pc, #380]	; (77a4 <bt_stream_cfo+0x184>)
    7628:	2210      	movs	r2, #16
    762a:	601a      	str	r2, [r3, #0]
	int i;
	
	u8 cfo_buf[DMA_SIZE];
	queue_init();
    762c:	f002 fd3e 	bl	a0ac <queue_init>
	
	cc2400_set(MANAND, 0x7fff);
    7630:	200d      	movs	r0, #13
    7632:	f647 71ff 	movw	r1, #32767	; 0x7fff
    7636:	f003 ff5d 	bl	b4f4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    763a:	2012      	movs	r0, #18
    763c:	f642 3122 	movw	r1, #11042	; 0x2b22
    7640:	f003 ff58 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMTST0, 0x104b); // without PRNG
    7644:	2014      	movs	r0, #20
    7646:	f241 014b 	movw	r1, #4171	; 0x104b
    764a:	f003 ff53 	bl	b4f4 <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    764e:	2020      	movs	r0, #32
    7650:	f240 5161 	movw	r1, #1377	; 0x561
    7654:	f003 ff4e 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    7658:	2003      	movs	r0, #3
    765a:	2140      	movs	r1, #64	; 0x40
    765c:	f003 ff4a 	bl	b4f4 <cc2400_set>

//	cc2400_set(SYNCH, 0xf9ae);
//	cc2400_set(SYNCL, 0x1584);
	
	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff); // BLE sync
    7660:	4851      	ldr	r0, [pc, #324]	; (77a8 <bt_stream_cfo+0x188>)
    7662:	f003 fd75 	bl	b150 <rbit>
    7666:	4603      	mov	r3, r0
    7668:	b29b      	uxth	r3, r3
    766a:	202c      	movs	r0, #44	; 0x2c
    766c:	4619      	mov	r1, r3
    766e:	f003 ff41 	bl	b4f4 <cc2400_set>
	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff); // BLE sync
    7672:	484d      	ldr	r0, [pc, #308]	; (77a8 <bt_stream_cfo+0x188>)
    7674:	f003 fd6c 	bl	b150 <rbit>
    7678:	4603      	mov	r3, r0
    767a:	0c1b      	lsrs	r3, r3, #16
    767c:	b29b      	uxth	r3, r3
    767e:	202d      	movs	r0, #45	; 0x2d
    7680:	4619      	mov	r1, r3
    7682:	f003 ff37 	bl	b4f4 <cc2400_set>
	
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7686:	4b49      	ldr	r3, [pc, #292]	; (77ac <bt_stream_cfo+0x18c>)
    7688:	2280      	movs	r2, #128	; 0x80
    768a:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif

	while (!(cc2400_status() & XOSC16M_STABLE));
    768c:	bf00      	nop
    768e:	f003 ffd9 	bl	b644 <cc2400_status>
    7692:	4603      	mov	r3, r0
    7694:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7698:	2b00      	cmp	r3, #0
    769a:	d0f8      	beq.n	768e <bt_stream_cfo+0x6e>
	while ((cc2400_status() & FS_LOCK));
    769c:	bf00      	nop
    769e:	f003 ffd1 	bl	b644 <cc2400_status>
    76a2:	4603      	mov	r3, r0
    76a4:	f003 0304 	and.w	r3, r3, #4
    76a8:	2b00      	cmp	r3, #0
    76aa:	d1f8      	bne.n	769e <bt_stream_cfo+0x7e>

	cc2400_set(FSDIV, channel - 1);
    76ac:	4b40      	ldr	r3, [pc, #256]	; (77b0 <bt_stream_cfo+0x190>)
    76ae:	881b      	ldrh	r3, [r3, #0]
    76b0:	b29b      	uxth	r3, r3
    76b2:	3b01      	subs	r3, #1
    76b4:	b29b      	uxth	r3, r3
    76b6:	2002      	movs	r0, #2
    76b8:	4619      	mov	r1, r3
    76ba:	f003 ff1b 	bl	b4f4 <cc2400_set>
	cc2400_strobe(SFSON);
    76be:	2061      	movs	r0, #97	; 0x61
    76c0:	f003 ffca 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    76c4:	bf00      	nop
    76c6:	f003 ffbd 	bl	b644 <cc2400_status>
    76ca:	4603      	mov	r3, r0
    76cc:	f003 0304 	and.w	r3, r3, #4
    76d0:	2b00      	cmp	r3, #0
    76d2:	d0f8      	beq.n	76c6 <bt_stream_cfo+0xa6>
	cc2400_strobe(SRX);
    76d4:	2062      	movs	r0, #98	; 0x62
    76d6:	f003 ffbf 	bl	b658 <cc2400_strobe>
	
	int out = -100;
    76da:	f06f 0363 	mvn.w	r3, #99	; 0x63
    76de:	637b      	str	r3, [r7, #52]	; 0x34
	u8 rssi;

	while (requested_mode == MODE_RX_CFO) {
    76e0:	e054      	b.n	778c <bt_stream_cfo+0x16c>
		
		while (!(cc2400_status () & SYNC_RECEIVED));
    76e2:	bf00      	nop
    76e4:	f003 ffae 	bl	b644 <cc2400_status>
    76e8:	4603      	mov	r3, r0
    76ea:	f003 0310 	and.w	r3, r3, #16
    76ee:	2b00      	cmp	r3, #0
    76f0:	d0f8      	beq.n	76e4 <bt_stream_cfo+0xc4>
				out = rssi - 256;
			else
				out = rssi;
		}
*/		
		for (i = 0; i < DMA_SIZE; i++)
    76f2:	2300      	movs	r3, #0
    76f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    76f6:	e00c      	b.n	7712 <bt_stream_cfo+0xf2>
		{
			cfo_buf[i] = cc2400_get_rev(FREQEST);
    76f8:	2007      	movs	r0, #7
    76fa:	f7fe fea3 	bl	6444 <cc2400_get_rev>
    76fe:	4603      	mov	r3, r0
    7700:	4619      	mov	r1, r3
    7702:	463a      	mov	r2, r7
    7704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7706:	4413      	add	r3, r2
    7708:	460a      	mov	r2, r1
    770a:	701a      	strb	r2, [r3, #0]
				out = rssi - 256;
			else
				out = rssi;
		}
*/		
		for (i = 0; i < DMA_SIZE; i++)
    770c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    770e:	3301      	adds	r3, #1
    7710:	63fb      	str	r3, [r7, #60]	; 0x3c
    7712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    7714:	2b31      	cmp	r3, #49	; 0x31
    7716:	ddef      	ble.n	76f8 <bt_stream_cfo+0xd8>
                        out = rssi;

		if (out >= 0)
*/
		{
			RXLED_SET;
    7718:	4b26      	ldr	r3, [pc, #152]	; (77b4 <bt_stream_cfo+0x194>)
    771a:	2210      	movs	r2, #16
    771c:	601a      	str	r2, [r3, #0]

			
			enqueue (MESSAGE, cfo_buf);
    771e:	463b      	mov	r3, r7
    7720:	2002      	movs	r0, #2
    7722:	4619      	mov	r1, r3
    7724:	f7fc fed0 	bl	44c8 <enqueue>
			handle_usb(clkn);
    7728:	4b23      	ldr	r3, [pc, #140]	; (77b8 <bt_stream_cfo+0x198>)
    772a:	681b      	ldr	r3, [r3, #0]
    772c:	4618      	mov	r0, r3
    772e:	f002 fd5d 	bl	a1ec <handle_usb>
			RXLED_CLR;
    7732:	4b1c      	ldr	r3, [pc, #112]	; (77a4 <bt_stream_cfo+0x184>)
    7734:	2210      	movs	r2, #16
    7736:	601a      	str	r2, [r3, #0]
		}

		cc2400_strobe (SRFOFF);
    7738:	2064      	movs	r0, #100	; 0x64
    773a:	f003 ff8d 	bl	b658 <cc2400_strobe>
                while ((cc2400_status () & FS_LOCK));
    773e:	bf00      	nop
    7740:	f003 ff80 	bl	b644 <cc2400_status>
    7744:	4603      	mov	r3, r0
    7746:	f003 0304 	and.w	r3, r3, #4
    774a:	2b00      	cmp	r3, #0
    774c:	d1f8      	bne.n	7740 <bt_stream_cfo+0x120>

                while (!(cc2400_status () & XOSC16M_STABLE));
    774e:	bf00      	nop
    7750:	f003 ff78 	bl	b644 <cc2400_status>
    7754:	4603      	mov	r3, r0
    7756:	f003 0340 	and.w	r3, r3, #64	; 0x40
    775a:	2b00      	cmp	r3, #0
    775c:	d0f8      	beq.n	7750 <bt_stream_cfo+0x130>

                cc2400_strobe (SFSON);
    775e:	2061      	movs	r0, #97	; 0x61
    7760:	f003 ff7a 	bl	b658 <cc2400_strobe>
                while (!(cc2400_status () & FS_LOCK));
    7764:	bf00      	nop
    7766:	f003 ff6d 	bl	b644 <cc2400_status>
    776a:	4603      	mov	r3, r0
    776c:	f003 0304 	and.w	r3, r3, #4
    7770:	2b00      	cmp	r3, #0
    7772:	d0f8      	beq.n	7766 <bt_stream_cfo+0x146>

		int k = 1000; while (--k);	
    7774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    7778:	63bb      	str	r3, [r7, #56]	; 0x38
    777a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    777c:	3b01      	subs	r3, #1
    777e:	63bb      	str	r3, [r7, #56]	; 0x38
    7780:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7782:	2b00      	cmp	r3, #0
    7784:	d1f9      	bne.n	777a <bt_stream_cfo+0x15a>
                cc2400_strobe (SRX);
    7786:	2062      	movs	r0, #98	; 0x62
    7788:	f003 ff66 	bl	b658 <cc2400_strobe>
	cc2400_strobe(SRX);
	
	int out = -100;
	u8 rssi;

	while (requested_mode == MODE_RX_CFO) {
    778c:	4b0b      	ldr	r3, [pc, #44]	; (77bc <bt_stream_cfo+0x19c>)
    778e:	781b      	ldrb	r3, [r3, #0]
    7790:	b2db      	uxtb	r3, r3
    7792:	2b12      	cmp	r3, #18
    7794:	d0a5      	beq.n	76e2 <bt_stream_cfo+0xc2>

		int k = 1000; while (--k);	
                cc2400_strobe (SRX);

	}
	dio_ssp_stop ();
    7796:	f7fe fa9f 	bl	5cd8 <dio_ssp_stop>
	cs_trigger_disable ();
    779a:	f7fd f9b1 	bl	4b00 <cs_trigger_disable>
}
    779e:	3740      	adds	r7, #64	; 0x40
    77a0:	46bd      	mov	sp, r7
    77a2:	bd80      	pop	{r7, pc}
    77a4:	2009c03c 	.word	0x2009c03c
    77a8:	8e89bed6 	.word	0x8e89bed6
    77ac:	2009c058 	.word	0x2009c058
    77b0:	1000049c 	.word	0x1000049c
    77b4:	2009c038 	.word	0x2009c038
    77b8:	10000bf4 	.word	0x10000bf4
    77bc:	10000a3f 	.word	0x10000a3f

000077c0 <bt_stream_rssi>:


// wpson -R: rssi mode, transfer rssi samples to host 
void bt_stream_rssi()
{
    77c0:	b580      	push	{r7, lr}
    77c2:	b090      	sub	sp, #64	; 0x40
    77c4:	af00      	add	r7, sp, #0
//	TXLED_SET;
	RXLED_CLR;
    77c6:	4b57      	ldr	r3, [pc, #348]	; (7924 <bt_stream_rssi+0x164>)
    77c8:	2210      	movs	r2, #16
    77ca:	601a      	str	r2, [r3, #0]
	int i = 0;
    77cc:	2300      	movs	r3, #0
    77ce:	63fb      	str	r3, [r7, #60]	; 0x3c

	u8 rssi_buf[DMA_SIZE];
	queue_init();
    77d0:	f002 fc6c 	bl	a0ac <queue_init>
	
	cc2400_set(MANAND, 0x7fff);
    77d4:	200d      	movs	r0, #13
    77d6:	f647 71ff 	movw	r1, #32767	; 0x7fff
    77da:	f003 fe8b 	bl	b4f4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    77de:	2012      	movs	r0, #18
    77e0:	f642 3122 	movw	r1, #11042	; 0x2b22
    77e4:	f003 fe86 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    77e8:	2014      	movs	r0, #20
    77ea:	f241 214b 	movw	r1, #4683	; 0x124b
    77ee:	f003 fe81 	bl	b4f4 <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    77f2:	2020      	movs	r0, #32
    77f4:	f240 5161 	movw	r1, #1377	; 0x561
    77f8:	f003 fe7c 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    77fc:	2003      	movs	r0, #3
    77fe:	2140      	movs	r1, #64	; 0x40
    7800:	f003 fe78 	bl	b4f4 <cc2400_set>
	
//	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff); // BLE
//	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff); // BLE
	
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7804:	4b48      	ldr	r3, [pc, #288]	; (7928 <bt_stream_rssi+0x168>)
    7806:	2280      	movs	r2, #128	; 0x80
    7808:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif

	while (!(cc2400_status() & XOSC16M_STABLE));
    780a:	bf00      	nop
    780c:	f003 ff1a 	bl	b644 <cc2400_status>
    7810:	4603      	mov	r3, r0
    7812:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7816:	2b00      	cmp	r3, #0
    7818:	d0f8      	beq.n	780c <bt_stream_rssi+0x4c>
	while ((cc2400_status() & FS_LOCK));
    781a:	bf00      	nop
    781c:	f003 ff12 	bl	b644 <cc2400_status>
    7820:	4603      	mov	r3, r0
    7822:	f003 0304 	and.w	r3, r3, #4
    7826:	2b00      	cmp	r3, #0
    7828:	d1f8      	bne.n	781c <bt_stream_rssi+0x5c>

	cc2400_set(FSDIV, channel - 1);
    782a:	4b40      	ldr	r3, [pc, #256]	; (792c <bt_stream_rssi+0x16c>)
    782c:	881b      	ldrh	r3, [r3, #0]
    782e:	b29b      	uxth	r3, r3
    7830:	3b01      	subs	r3, #1
    7832:	b29b      	uxth	r3, r3
    7834:	2002      	movs	r0, #2
    7836:	4619      	mov	r1, r3
    7838:	f003 fe5c 	bl	b4f4 <cc2400_set>
	cc2400_strobe(SFSON);
    783c:	2061      	movs	r0, #97	; 0x61
    783e:	f003 ff0b 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    7842:	bf00      	nop
    7844:	f003 fefe 	bl	b644 <cc2400_status>
    7848:	4603      	mov	r3, r0
    784a:	f003 0304 	and.w	r3, r3, #4
    784e:	2b00      	cmp	r3, #0
    7850:	d0f8      	beq.n	7844 <bt_stream_rssi+0x84>
	cc2400_strobe(SRX);
    7852:	2062      	movs	r0, #98	; 0x62
    7854:	f003 ff00 	bl	b658 <cc2400_strobe>
	u8 rssi;
	int out = -100;
    7858:	f06f 0363 	mvn.w	r3, #99	; 0x63
    785c:	63bb      	str	r3, [r7, #56]	; 0x38
	while (requested_mode == MODE_RX_RSSI) {
    785e:	e054      	b.n	790a <bt_stream_rssi+0x14a>
		
		out = -100;
    7860:	f06f 0363 	mvn.w	r3, #99	; 0x63
    7864:	63bb      	str	r3, [r7, #56]	; 0x38
		while (out < 0)
    7866:	e013      	b.n	7890 <bt_stream_rssi+0xd0>
		{
			rssi = (int8_t)cc2400_get_rev(RSSI);
    7868:	2006      	movs	r0, #6
    786a:	f7fe fdeb 	bl	6444 <cc2400_get_rev>
    786e:	4603      	mov	r3, r0
    7870:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			
			if (rssi >= 128)
    7874:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    7878:	b25b      	sxtb	r3, r3
    787a:	2b00      	cmp	r3, #0
    787c:	da05      	bge.n	788a <bt_stream_rssi+0xca>
                        	out = rssi - 256;
    787e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    7882:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
    7886:	63bb      	str	r3, [r7, #56]	; 0x38
    7888:	e002      	b.n	7890 <bt_stream_rssi+0xd0>
                	else
                        	out = rssi;
    788a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    788e:	63bb      	str	r3, [r7, #56]	; 0x38
	u8 rssi;
	int out = -100;
	while (requested_mode == MODE_RX_RSSI) {
		
		out = -100;
		while (out < 0)
    7890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    7892:	2b00      	cmp	r3, #0
    7894:	dbe8      	blt.n	7868 <bt_stream_rssi+0xa8>
                        	out = rssi - 256;
                	else
                        	out = rssi;
		}
	
		for (i = 0; i < DMA_SIZE; i++)
    7896:	2300      	movs	r3, #0
    7898:	63fb      	str	r3, [r7, #60]	; 0x3c
    789a:	e00c      	b.n	78b6 <bt_stream_rssi+0xf6>
		{
			rssi_buf[i] = cc2400_get_rev(RSSI);
    789c:	2006      	movs	r0, #6
    789e:	f7fe fdd1 	bl	6444 <cc2400_get_rev>
    78a2:	4603      	mov	r3, r0
    78a4:	4619      	mov	r1, r3
    78a6:	1d3a      	adds	r2, r7, #4
    78a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    78aa:	4413      	add	r3, r2
    78ac:	460a      	mov	r2, r1
    78ae:	701a      	strb	r2, [r3, #0]
                        	out = rssi - 256;
                	else
                        	out = rssi;
		}
	
		for (i = 0; i < DMA_SIZE; i++)
    78b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    78b2:	3301      	adds	r3, #1
    78b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    78b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    78b8:	2b31      	cmp	r3, #49	; 0x31
    78ba:	ddef      	ble.n	789c <bt_stream_rssi+0xdc>
		{
			rssi_buf[i] = cc2400_get_rev(RSSI);
		}

//		i = 0;
		rssi = (int8_t)cc2400_get_rev(RSSI);
    78bc:	2006      	movs	r0, #6
    78be:	f7fe fdc1 	bl	6444 <cc2400_get_rev>
    78c2:	4603      	mov	r3, r0
    78c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			
		if (rssi >= 128)
    78c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    78cc:	b25b      	sxtb	r3, r3
    78ce:	2b00      	cmp	r3, #0
    78d0:	da05      	bge.n	78de <bt_stream_rssi+0x11e>
                        out = rssi - 256;
    78d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    78d6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
    78da:	63bb      	str	r3, [r7, #56]	; 0x38
    78dc:	e002      	b.n	78e4 <bt_stream_rssi+0x124>
                else
                        out = rssi;
    78de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    78e2:	63bb      	str	r3, [r7, #56]	; 0x38

		if (out >= 0)
    78e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    78e6:	2b00      	cmp	r3, #0
    78e8:	db0f      	blt.n	790a <bt_stream_rssi+0x14a>
		{
			RXLED_SET;
    78ea:	4b11      	ldr	r3, [pc, #68]	; (7930 <bt_stream_rssi+0x170>)
    78ec:	2210      	movs	r2, #16
    78ee:	601a      	str	r2, [r3, #0]

			
			enqueue (MESSAGE, rssi_buf);
    78f0:	1d3b      	adds	r3, r7, #4
    78f2:	2002      	movs	r0, #2
    78f4:	4619      	mov	r1, r3
    78f6:	f7fc fde7 	bl	44c8 <enqueue>
			handle_usb(clkn);
    78fa:	4b0e      	ldr	r3, [pc, #56]	; (7934 <bt_stream_rssi+0x174>)
    78fc:	681b      	ldr	r3, [r3, #0]
    78fe:	4618      	mov	r0, r3
    7900:	f002 fc74 	bl	a1ec <handle_usb>
			RXLED_CLR;
    7904:	4b07      	ldr	r3, [pc, #28]	; (7924 <bt_stream_rssi+0x164>)
    7906:	2210      	movs	r2, #16
    7908:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	u8 rssi;
	int out = -100;
	while (requested_mode == MODE_RX_RSSI) {
    790a:	4b0b      	ldr	r3, [pc, #44]	; (7938 <bt_stream_rssi+0x178>)
    790c:	781b      	ldrb	r3, [r3, #0]
    790e:	b2db      	uxtb	r3, r3
    7910:	2b11      	cmp	r3, #17
    7912:	d0a5      	beq.n	7860 <bt_stream_rssi+0xa0>
			enqueue (MESSAGE, rssi_buf);
			handle_usb(clkn);
			RXLED_CLR;
		}
	}
	dio_ssp_stop ();
    7914:	f7fe f9e0 	bl	5cd8 <dio_ssp_stop>
	cs_trigger_disable ();
    7918:	f7fd f8f2 	bl	4b00 <cs_trigger_disable>

}
    791c:	3740      	adds	r7, #64	; 0x40
    791e:	46bd      	mov	sp, r7
    7920:	bd80      	pop	{r7, pc}
    7922:	bf00      	nop
    7924:	2009c03c 	.word	0x2009c03c
    7928:	2009c058 	.word	0x2009c058
    792c:	1000049c 	.word	0x1000049c
    7930:	2009c038 	.word	0x2009c038
    7934:	10000bf4 	.word	0x10000bf4
    7938:	10000a3f 	.word	0x10000a3f

0000793c <bt_stream_rx>:

void bt_stream_rx()
{
    793c:	b590      	push	{r4, r7, lr}
    793e:	b097      	sub	sp, #92	; 0x5c
    7940:	af00      	add	r7, sp, #0
	RXLED_CLR;
    7942:	4baa      	ldr	r3, [pc, #680]	; (7bec <bt_stream_rx+0x2b0>)
    7944:	2210      	movs	r2, #16
    7946:	601a      	str	r2, [r3, #0]
	int i;

	queue_init();
    7948:	f002 fbb0 	bl	a0ac <queue_init>
	dio_ssp_init();
    794c:	f003 fd00 	bl	b350 <dio_ssp_init>
	dma_init_le();
    7950:	f7fe f81a 	bl	5988 <dma_init_le>
	dio_ssp_start();
    7954:	f7fe f990 	bl	5c78 <dio_ssp_start>
	
	cc2400_set(MANAND, 0x7fff);
    7958:	200d      	movs	r0, #13
    795a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    795e:	f003 fdc9 	bl	b4f4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    7962:	2012      	movs	r0, #18
    7964:	f642 3122 	movw	r1, #11042	; 0x2b22
    7968:	f003 fdc4 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    796c:	2014      	movs	r0, #20
    796e:	f241 214b 	movw	r1, #4683	; 0x124b
    7972:	f003 fdbf 	bl	b4f4 <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    7976:	2020      	movs	r0, #32
    7978:	f240 5161 	movw	r1, #1377	; 0x561
    797c:	f003 fdba 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    7980:	2003      	movs	r0, #3
    7982:	2140      	movs	r1, #64	; 0x40
    7984:	f003 fdb6 	bl	b4f4 <cc2400_set>
	
//	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
//	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
	
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7988:	4b99      	ldr	r3, [pc, #612]	; (7bf0 <bt_stream_rx+0x2b4>)
    798a:	2280      	movs	r2, #128	; 0x80
    798c:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif

	while (!(cc2400_status() & XOSC16M_STABLE));
    798e:	bf00      	nop
    7990:	f003 fe58 	bl	b644 <cc2400_status>
    7994:	4603      	mov	r3, r0
    7996:	f003 0340 	and.w	r3, r3, #64	; 0x40
    799a:	2b00      	cmp	r3, #0
    799c:	d0f8      	beq.n	7990 <bt_stream_rx+0x54>
	while ((cc2400_status() & FS_LOCK));
    799e:	bf00      	nop
    79a0:	f003 fe50 	bl	b644 <cc2400_status>
    79a4:	4603      	mov	r3, r0
    79a6:	f003 0304 	and.w	r3, r3, #4
    79aa:	2b00      	cmp	r3, #0
    79ac:	d1f8      	bne.n	79a0 <bt_stream_rx+0x64>

	cc2400_set(FSDIV, channel - 1);
    79ae:	4b91      	ldr	r3, [pc, #580]	; (7bf4 <bt_stream_rx+0x2b8>)
    79b0:	881b      	ldrh	r3, [r3, #0]
    79b2:	b29b      	uxth	r3, r3
    79b4:	3b01      	subs	r3, #1
    79b6:	b29b      	uxth	r3, r3
    79b8:	2002      	movs	r0, #2
    79ba:	4619      	mov	r1, r3
    79bc:	f003 fd9a 	bl	b4f4 <cc2400_set>
	cc2400_strobe(SFSON);
    79c0:	2061      	movs	r0, #97	; 0x61
    79c2:	f003 fe49 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    79c6:	bf00      	nop
    79c8:	f003 fe3c 	bl	b644 <cc2400_status>
    79cc:	4603      	mov	r3, r0
    79ce:	f003 0304 	and.w	r3, r3, #4
    79d2:	2b00      	cmp	r3, #0
    79d4:	d0f8      	beq.n	79c8 <bt_stream_rx+0x8c>
	cc2400_strobe(SRX);
    79d6:	2062      	movs	r0, #98	; 0x62
    79d8:	f003 fe3e 	bl	b658 <cc2400_strobe>
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    79dc:	e13b      	b.n	7c56 <bt_stream_rx+0x31a>
		
		while (!(cc2400_status () & SYNC_RECEIVED));
    79de:	bf00      	nop
    79e0:	f003 fe30 	bl	b644 <cc2400_status>
    79e4:	4603      	mov	r3, r0
    79e6:	f003 0310 	and.w	r3, r3, #16
    79ea:	2b00      	cmp	r3, #0
    79ec:	d0f8      	beq.n	79e0 <bt_stream_rx+0xa4>
                else
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
    79ee:	4b82      	ldr	r3, [pc, #520]	; (7bf8 <bt_stream_rx+0x2bc>)
    79f0:	2200      	movs	r2, #0
    79f2:	601a      	str	r2, [r3, #0]
		rssi_count = 5;
    79f4:	4b81      	ldr	r3, [pc, #516]	; (7bfc <bt_stream_rx+0x2c0>)
    79f6:	2205      	movs	r2, #5
    79f8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < rssi_count; i++)
    79fa:	2300      	movs	r3, #0
    79fc:	657b      	str	r3, [r7, #84]	; 0x54
    79fe:	e00f      	b.n	7a20 <bt_stream_rx+0xe4>
		{
			rssi_sum += (int8_t)(cc2400_get(RSSI) >> 8);
    7a00:	2006      	movs	r0, #6
    7a02:	f003 fd61 	bl	b4c8 <cc2400_get>
    7a06:	4603      	mov	r3, r0
    7a08:	0a1b      	lsrs	r3, r3, #8
    7a0a:	b29b      	uxth	r3, r3
    7a0c:	b2db      	uxtb	r3, r3
    7a0e:	b25a      	sxtb	r2, r3
    7a10:	4b79      	ldr	r3, [pc, #484]	; (7bf8 <bt_stream_rx+0x2bc>)
    7a12:	681b      	ldr	r3, [r3, #0]
    7a14:	4413      	add	r3, r2
    7a16:	4a78      	ldr	r2, [pc, #480]	; (7bf8 <bt_stream_rx+0x2bc>)
    7a18:	6013      	str	r3, [r2, #0]
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
		rssi_count = 5;
		for (i = 0; i < rssi_count; i++)
    7a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    7a1c:	3301      	adds	r3, #1
    7a1e:	657b      	str	r3, [r7, #84]	; 0x54
    7a20:	4b76      	ldr	r3, [pc, #472]	; (7bfc <bt_stream_rx+0x2c0>)
    7a22:	781b      	ldrb	r3, [r3, #0]
    7a24:	461a      	mov	r2, r3
    7a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    7a28:	429a      	cmp	r2, r3
    7a2a:	dce9      	bgt.n	7a00 <bt_stream_rx+0xc4>
		{
			rssi_sum += (int8_t)(cc2400_get(RSSI) >> 8);
		}
	
		while (!rx_tc);
    7a2c:	bf00      	nop
    7a2e:	4b74      	ldr	r3, [pc, #464]	; (7c00 <bt_stream_rx+0x2c4>)
    7a30:	681b      	ldr	r3, [r3, #0]
    7a32:	2b00      	cmp	r3, #0
    7a34:	d0fb      	beq.n	7a2e <bt_stream_rx+0xf2>
	
		RXLED_SET;
    7a36:	4b73      	ldr	r3, [pc, #460]	; (7c04 <bt_stream_rx+0x2c8>)
    7a38:	2210      	movs	r2, #16
    7a3a:	601a      	str	r2, [r3, #0]
		if (rx_err) {
    7a3c:	4b72      	ldr	r3, [pc, #456]	; (7c08 <bt_stream_rx+0x2cc>)
    7a3e:	681b      	ldr	r3, [r3, #0]
    7a40:	2b00      	cmp	r3, #0
    7a42:	d007      	beq.n	7a54 <bt_stream_rx+0x118>
		status |= DMA_ERROR;
    7a44:	4b71      	ldr	r3, [pc, #452]	; (7c0c <bt_stream_rx+0x2d0>)
    7a46:	781b      	ldrb	r3, [r3, #0]
    7a48:	b2db      	uxtb	r3, r3
    7a4a:	f043 0302 	orr.w	r3, r3, #2
    7a4e:	b2da      	uxtb	r2, r3
    7a50:	4b6e      	ldr	r3, [pc, #440]	; (7c0c <bt_stream_rx+0x2d0>)
    7a52:	701a      	strb	r2, [r3, #0]
		}	
		if (rx_tc > 1)
    7a54:	4b6a      	ldr	r3, [pc, #424]	; (7c00 <bt_stream_rx+0x2c4>)
    7a56:	681b      	ldr	r3, [r3, #0]
    7a58:	2b01      	cmp	r3, #1
    7a5a:	d907      	bls.n	7a6c <bt_stream_rx+0x130>
			status |= DMA_OVERFLOW;
    7a5c:	4b6b      	ldr	r3, [pc, #428]	; (7c0c <bt_stream_rx+0x2d0>)
    7a5e:	781b      	ldrb	r3, [r3, #0]
    7a60:	b2db      	uxtb	r3, r3
    7a62:	f043 0301 	orr.w	r3, r3, #1
    7a66:	b2da      	uxtb	r2, r3
    7a68:	4b68      	ldr	r3, [pc, #416]	; (7c0c <bt_stream_rx+0x2d0>)
    7a6a:	701a      	strb	r2, [r3, #0]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    7a6c:	1d3b      	adds	r3, r7, #4
    7a6e:	653b      	str	r3, [r7, #80]	; 0x50
		packet[0] = le.access_address;
    7a70:	4b67      	ldr	r3, [pc, #412]	; (7c10 <bt_stream_rx+0x2d4>)
    7a72:	681b      	ldr	r3, [r3, #0]
    7a74:	607b      	str	r3, [r7, #4]

                while (DMACC0Config & DMACCxConfig_E && rx_err == 0);
    7a76:	bf00      	nop
    7a78:	4b66      	ldr	r3, [pc, #408]	; (7c14 <bt_stream_rx+0x2d8>)
    7a7a:	681b      	ldr	r3, [r3, #0]
    7a7c:	f003 0301 	and.w	r3, r3, #1
    7a80:	2b00      	cmp	r3, #0
    7a82:	d003      	beq.n	7a8c <bt_stream_rx+0x150>
    7a84:	4b60      	ldr	r3, [pc, #384]	; (7c08 <bt_stream_rx+0x2cc>)
    7a86:	681b      	ldr	r3, [r3, #0]
    7a88:	2b00      	cmp	r3, #0
    7a8a:	d0f5      	beq.n	7a78 <bt_stream_rx+0x13c>
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7a8c:	4a62      	ldr	r2, [pc, #392]	; (7c18 <bt_stream_rx+0x2dc>)
    7a8e:	4b62      	ldr	r3, [pc, #392]	; (7c18 <bt_stream_rx+0x2dc>)
    7a90:	681b      	ldr	r3, [r3, #0]
    7a92:	f023 0301 	bic.w	r3, r3, #1
    7a96:	6013      	str	r3, [r2, #0]
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    7a98:	4b56      	ldr	r3, [pc, #344]	; (7bf4 <bt_stream_rx+0x2b8>)
    7a9a:	881b      	ldrh	r3, [r3, #0]
    7a9c:	b29b      	uxth	r3, r3
    7a9e:	b2db      	uxtb	r3, r3
    7aa0:	3b62      	subs	r3, #98	; 0x62
    7aa2:	b2db      	uxtb	r3, r3
    7aa4:	4618      	mov	r0, r3
    7aa6:	f002 f981 	bl	9dac <btle_channel_index>
    7aaa:	4603      	mov	r3, r0
    7aac:	461a      	mov	r2, r3
    7aae:	4613      	mov	r3, r2
    7ab0:	005b      	lsls	r3, r3, #1
    7ab2:	4413      	add	r3, r2
    7ab4:	011b      	lsls	r3, r3, #4
    7ab6:	4a59      	ldr	r2, [pc, #356]	; (7c1c <bt_stream_rx+0x2e0>)
    7ab8:	4413      	add	r3, r2
    7aba:	64fb      	str	r3, [r7, #76]	; 0x4c
		for (i = 0; i < 44; i += 4) {
    7abc:	2300      	movs	r3, #0
    7abe:	657b      	str	r3, [r7, #84]	; 0x54
    7ac0:	e034      	b.n	7b2c <bt_stream_rx+0x1f0>
			uint32_t v = rxbuf1[i+0] << 24
    7ac2:	4a57      	ldr	r2, [pc, #348]	; (7c20 <bt_stream_rx+0x2e4>)
    7ac4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    7ac6:	4413      	add	r3, r2
    7ac8:	781b      	ldrb	r3, [r3, #0]
    7aca:	061a      	lsls	r2, r3, #24
                                          | rxbuf1[i+1] << 16
    7acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    7ace:	3301      	adds	r3, #1
    7ad0:	4953      	ldr	r1, [pc, #332]	; (7c20 <bt_stream_rx+0x2e4>)
    7ad2:	5ccb      	ldrb	r3, [r1, r3]
    7ad4:	041b      	lsls	r3, r3, #16
    7ad6:	431a      	orrs	r2, r3
                                      | rxbuf1[i+2] << 8
    7ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    7ada:	3302      	adds	r3, #2
    7adc:	4950      	ldr	r1, [pc, #320]	; (7c20 <bt_stream_rx+0x2e4>)
    7ade:	5ccb      	ldrb	r3, [r1, r3]
    7ae0:	021b      	lsls	r3, r3, #8
    7ae2:	4313      	orrs	r3, r2
                                          | rxbuf1[i+3] << 0;
    7ae4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    7ae6:	3203      	adds	r2, #3
    7ae8:	494d      	ldr	r1, [pc, #308]	; (7c20 <bt_stream_rx+0x2e4>)
    7aea:	5c8a      	ldrb	r2, [r1, r2]
    7aec:	4313      	orrs	r3, r2
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    7aee:	64bb      	str	r3, [r7, #72]	; 0x48
                                          | rxbuf1[i+1] << 16
                                      | rxbuf1[i+2] << 8
                                          | rxbuf1[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
    7af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    7af2:	2b00      	cmp	r3, #0
    7af4:	da00      	bge.n	7af8 <bt_stream_rx+0x1bc>
    7af6:	3303      	adds	r3, #3
    7af8:	109b      	asrs	r3, r3, #2
    7afa:	1c5c      	adds	r4, r3, #1
    7afc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    7afe:	f003 fb27 	bl	b150 <rbit>
    7b02:	4601      	mov	r1, r0
    7b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    7b06:	2b00      	cmp	r3, #0
    7b08:	da00      	bge.n	7b0c <bt_stream_rx+0x1d0>
    7b0a:	3303      	adds	r3, #3
    7b0c:	109b      	asrs	r3, r3, #2
    7b0e:	009b      	lsls	r3, r3, #2
    7b10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    7b12:	4413      	add	r3, r2
    7b14:	681b      	ldr	r3, [r3, #0]
    7b16:	ea81 0203 	eor.w	r2, r1, r3
    7b1a:	00a3      	lsls	r3, r4, #2
    7b1c:	f107 0158 	add.w	r1, r7, #88	; 0x58
    7b20:	440b      	add	r3, r1
    7b22:	f843 2c54 	str.w	r2, [r3, #-84]
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
    7b26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    7b28:	3304      	adds	r3, #4
    7b2a:	657b      	str	r3, [r7, #84]	; 0x54
    7b2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    7b2e:	2b2b      	cmp	r3, #43	; 0x2b
    7b30:	ddc7      	ble.n	7ac2 <bt_stream_rx+0x186>
                                      | eddystone[i+2] << 8
                                          | eddystone[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
		}
*/
		unsigned len = (p[5] & 0x3f) + 2;
    7b32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7b34:	3305      	adds	r3, #5
    7b36:	781b      	ldrb	r3, [r3, #0]
    7b38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7b3c:	3302      	adds	r3, #2
    7b3e:	647b      	str	r3, [r7, #68]	; 0x44
		
		if (len > 39)
    7b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7b42:	2b27      	cmp	r3, #39	; 0x27
    7b44:	d900      	bls.n	7b48 <bt_stream_rx+0x20c>
			goto rx_flush;
    7b46:	e02b      	b.n	7ba0 <bt_stream_rx+0x264>

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    7b48:	4b31      	ldr	r3, [pc, #196]	; (7c10 <bt_stream_rx+0x2d4>)
    7b4a:	68d9      	ldr	r1, [r3, #12]
    7b4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7b4e:	1d1a      	adds	r2, r3, #4
    7b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7b52:	4608      	mov	r0, r1
    7b54:	4611      	mov	r1, r2
    7b56:	461a      	mov	r2, r3
    7b58:	f002 fa2c 	bl	9fb4 <btle_crcgen_lut>
    7b5c:	6438      	str	r0, [r7, #64]	; 0x40
		u32 wire_crc = (p[4+len+2] << 16)
    7b5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7b60:	3306      	adds	r3, #6
    7b62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    7b64:	4413      	add	r3, r2
    7b66:	781b      	ldrb	r3, [r3, #0]
    7b68:	041a      	lsls	r2, r3, #16
                                                 | (p[4+len+1] << 8)
    7b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7b6c:	3305      	adds	r3, #5
    7b6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
    7b70:	440b      	add	r3, r1
    7b72:	781b      	ldrb	r3, [r3, #0]
    7b74:	021b      	lsls	r3, r3, #8
    7b76:	4313      	orrs	r3, r2
                                                 | (p[4+len+0] << 0);
    7b78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    7b7a:	3204      	adds	r2, #4
    7b7c:	6d39      	ldr	r1, [r7, #80]	; 0x50
    7b7e:	440a      	add	r2, r1
    7b80:	7812      	ldrb	r2, [r2, #0]
    7b82:	4313      	orrs	r3, r2
		
		if (len > 39)
			goto rx_flush;

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
		u32 wire_crc = (p[4+len+2] << 16)
    7b84:	63fb      	str	r3, [r7, #60]	; 0x3c
                                                 | (p[4+len+0] << 0);
//                if (calc_crc != wire_crc) // skip packets with a bad CRC
//                        goto rx_flush;


		enqueue (BR_PACKET, (uint8_t*)packet);
    7b86:	1d3b      	adds	r3, r7, #4
    7b88:	2000      	movs	r0, #0
    7b8a:	4619      	mov	r1, r3
    7b8c:	f7fc fc9c 	bl	44c8 <enqueue>
//		enqueue (BR_PACKET, (uint8_t*)rxbuf1);
		handle_usb(clkn);
    7b90:	4b24      	ldr	r3, [pc, #144]	; (7c24 <bt_stream_rx+0x2e8>)
    7b92:	681b      	ldr	r3, [r3, #0]
    7b94:	4618      	mov	r0, r3
    7b96:	f002 fb29 	bl	a1ec <handle_usb>
//		enqueue (MESSAGE, rssi_buf);
//		handle_usb(clkn);
		RXLED_CLR;
    7b9a:	4b14      	ldr	r3, [pc, #80]	; (7bec <bt_stream_rx+0x2b0>)
    7b9c:	2210      	movs	r2, #16
    7b9e:	601a      	str	r2, [r3, #0]
	       
	rx_flush:
		cc2400_strobe (SRFOFF);
    7ba0:	2064      	movs	r0, #100	; 0x64
    7ba2:	f003 fd59 	bl	b658 <cc2400_strobe>
                while ((cc2400_status () & FS_LOCK));
    7ba6:	bf00      	nop
    7ba8:	f003 fd4c 	bl	b644 <cc2400_status>
    7bac:	4603      	mov	r3, r0
    7bae:	f003 0304 	and.w	r3, r3, #4
    7bb2:	2b00      	cmp	r3, #0
    7bb4:	d1f8      	bne.n	7ba8 <bt_stream_rx+0x26c>

                while (!(cc2400_status () & XOSC16M_STABLE));
    7bb6:	bf00      	nop
    7bb8:	f003 fd44 	bl	b644 <cc2400_status>
    7bbc:	4603      	mov	r3, r0
    7bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7bc2:	2b00      	cmp	r3, #0
    7bc4:	d0f8      	beq.n	7bb8 <bt_stream_rx+0x27c>

                cc2400_strobe (SFSON);
    7bc6:	2061      	movs	r0, #97	; 0x61
    7bc8:	f003 fd46 	bl	b658 <cc2400_strobe>
                while (!(cc2400_status () & FS_LOCK));
    7bcc:	bf00      	nop
    7bce:	f003 fd39 	bl	b644 <cc2400_status>
    7bd2:	4603      	mov	r3, r0
    7bd4:	f003 0304 	and.w	r3, r3, #4
    7bd8:	2b00      	cmp	r3, #0
    7bda:	d0f8      	beq.n	7bce <bt_stream_rx+0x292>

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7bdc:	4a0e      	ldr	r2, [pc, #56]	; (7c18 <bt_stream_rx+0x2dc>)
    7bde:	4b0e      	ldr	r3, [pc, #56]	; (7c18 <bt_stream_rx+0x2dc>)
    7be0:	681b      	ldr	r3, [r3, #0]
    7be2:	f023 0301 	bic.w	r3, r3, #1
    7be6:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    7be8:	e022      	b.n	7c30 <bt_stream_rx+0x2f4>
    7bea:	bf00      	nop
    7bec:	2009c03c 	.word	0x2009c03c
    7bf0:	2009c058 	.word	0x2009c058
    7bf4:	1000049c 	.word	0x1000049c
    7bf8:	10000a4c 	.word	0x10000a4c
    7bfc:	10000a49 	.word	0x10000a49
    7c00:	10000b0c 	.word	0x10000b0c
    7c04:	2009c038 	.word	0x2009c038
    7c08:	100010d0 	.word	0x100010d0
    7c0c:	10000a48 	.word	0x10000a48
    7c10:	10000458 	.word	0x10000458
    7c14:	50004110 	.word	0x50004110
    7c18:	40030024 	.word	0x40030024
    7c1c:	0000d2dc 	.word	0x0000d2dc
    7c20:	1000109c 	.word	0x1000109c
    7c24:	10000bf4 	.word	0x10000bf4
                        u8 tmp = (u8)DIO_SSP_DR;
    7c28:	4b11      	ldr	r3, [pc, #68]	; (7c70 <bt_stream_rx+0x334>)
    7c2a:	681b      	ldr	r3, [r3, #0]
    7c2c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

                cc2400_strobe (SFSON);
                while (!(cc2400_status () & FS_LOCK));

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    7c30:	4b10      	ldr	r3, [pc, #64]	; (7c74 <bt_stream_rx+0x338>)
    7c32:	681b      	ldr	r3, [r3, #0]
    7c34:	f003 0304 	and.w	r3, r3, #4
    7c38:	2b00      	cmp	r3, #0
    7c3a:	d1f5      	bne.n	7c28 <bt_stream_rx+0x2ec>
                        u8 tmp = (u8)DIO_SSP_DR;
                }
		dma_init_le();
    7c3c:	f7fd fea4 	bl	5988 <dma_init_le>
		dio_ssp_start();
    7c40:	f7fe f81a 	bl	5c78 <dio_ssp_start>
		
//              msleep(500);    
                cc2400_strobe (SRX);
    7c44:	2062      	movs	r0, #98	; 0x62
    7c46:	f003 fd07 	bl	b658 <cc2400_strobe>
		rx_tc = 0;
    7c4a:	4b0b      	ldr	r3, [pc, #44]	; (7c78 <bt_stream_rx+0x33c>)
    7c4c:	2200      	movs	r2, #0
    7c4e:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    7c50:	4b0a      	ldr	r3, [pc, #40]	; (7c7c <bt_stream_rx+0x340>)
    7c52:	2200      	movs	r2, #0
    7c54:	601a      	str	r2, [r3, #0]
	cc2400_set(FSDIV, channel - 1);
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    7c56:	4b0a      	ldr	r3, [pc, #40]	; (7c80 <bt_stream_rx+0x344>)
    7c58:	781b      	ldrb	r3, [r3, #0]
    7c5a:	b2db      	uxtb	r3, r3
    7c5c:	2b01      	cmp	r3, #1
    7c5e:	f43f aebe 	beq.w	79de <bt_stream_rx+0xa2>
		rx_tc = 0;
		rx_err = 0;
	 
	
	}
	dio_ssp_stop ();
    7c62:	f7fe f839 	bl	5cd8 <dio_ssp_stop>
	cs_trigger_disable ();
    7c66:	f7fc ff4b 	bl	4b00 <cs_trigger_disable>
}
    7c6a:	375c      	adds	r7, #92	; 0x5c
    7c6c:	46bd      	mov	sp, r7
    7c6e:	bd90      	pop	{r4, r7, pc}
    7c70:	40030008 	.word	0x40030008
    7c74:	4003000c 	.word	0x4003000c
    7c78:	10000b0c 	.word	0x10000b0c
    7c7c:	100010d0 	.word	0x100010d0
    7c80:	10000a3f 	.word	0x10000a3f

00007c84 <le_set_access_address>:



/* set LE access address */
static void le_set_access_address(u32 aa) {
    7c84:	b580      	push	{r7, lr}
    7c86:	b084      	sub	sp, #16
    7c88:	af00      	add	r7, sp, #0
    7c8a:	6078      	str	r0, [r7, #4]
	u32 aa_rev;

	le.access_address = aa;
    7c8c:	4a09      	ldr	r2, [pc, #36]	; (7cb4 <le_set_access_address+0x30>)
    7c8e:	687b      	ldr	r3, [r7, #4]
    7c90:	6013      	str	r3, [r2, #0]
	aa_rev = rbit(aa);
    7c92:	6878      	ldr	r0, [r7, #4]
    7c94:	f003 fa5c 	bl	b150 <rbit>
    7c98:	60f8      	str	r0, [r7, #12]
	le.syncl = aa_rev & 0xffff;
    7c9a:	68fb      	ldr	r3, [r7, #12]
    7c9c:	b29a      	uxth	r2, r3
    7c9e:	4b05      	ldr	r3, [pc, #20]	; (7cb4 <le_set_access_address+0x30>)
    7ca0:	80da      	strh	r2, [r3, #6]
	le.synch = aa_rev >> 16;
    7ca2:	68fb      	ldr	r3, [r7, #12]
    7ca4:	0c1b      	lsrs	r3, r3, #16
    7ca6:	b29a      	uxth	r2, r3
    7ca8:	4b02      	ldr	r3, [pc, #8]	; (7cb4 <le_set_access_address+0x30>)
    7caa:	809a      	strh	r2, [r3, #4]
}
    7cac:	3710      	adds	r7, #16
    7cae:	46bd      	mov	sp, r7
    7cb0:	bd80      	pop	{r7, pc}
    7cb2:	bf00      	nop
    7cb4:	10000458 	.word	0x10000458

00007cb8 <reset_le>:

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    7cb8:	b580      	push	{r7, lr}
    7cba:	af00      	add	r7, sp, #0
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    7cbc:	481f      	ldr	r0, [pc, #124]	; (7d3c <reset_le+0x84>)
    7cbe:	f7ff ffe1 	bl	7c84 <le_set_access_address>
	le.crc_init  = 0x555555;	       // advertising channel CRCInit
    7cc2:	4b1f      	ldr	r3, [pc, #124]	; (7d40 <reset_le+0x88>)
    7cc4:	4a1f      	ldr	r2, [pc, #124]	; (7d44 <reset_le+0x8c>)
    7cc6:	609a      	str	r2, [r3, #8]
	le.crc_init_reversed = 0xAAAAAA;
    7cc8:	4b1d      	ldr	r3, [pc, #116]	; (7d40 <reset_le+0x88>)
    7cca:	4a1f      	ldr	r2, [pc, #124]	; (7d48 <reset_le+0x90>)
    7ccc:	60da      	str	r2, [r3, #12]
	le.crc_verify = 1;
    7cce:	4b1c      	ldr	r3, [pc, #112]	; (7d40 <reset_le+0x88>)
    7cd0:	2201      	movs	r2, #1
    7cd2:	611a      	str	r2, [r3, #16]
	le.last_packet = 0;
    7cd4:	4b1a      	ldr	r3, [pc, #104]	; (7d40 <reset_le+0x88>)
    7cd6:	2200      	movs	r2, #0
    7cd8:	641a      	str	r2, [r3, #64]	; 0x40

	le.link_state = LINK_INACTIVE;
    7cda:	4b19      	ldr	r3, [pc, #100]	; (7d40 <reset_le+0x88>)
    7cdc:	2200      	movs	r2, #0
    7cde:	751a      	strb	r2, [r3, #20]

	le.channel_idx = 0;
    7ce0:	4b17      	ldr	r3, [pc, #92]	; (7d40 <reset_le+0x88>)
    7ce2:	2200      	movs	r2, #0
    7ce4:	755a      	strb	r2, [r3, #21]
	le.channel_increment = 0;
    7ce6:	4b16      	ldr	r3, [pc, #88]	; (7d40 <reset_le+0x88>)
    7ce8:	2200      	movs	r2, #0
    7cea:	759a      	strb	r2, [r3, #22]

	le.conn_epoch = 0;
    7cec:	4b14      	ldr	r3, [pc, #80]	; (7d40 <reset_le+0x88>)
    7cee:	2200      	movs	r2, #0
    7cf0:	619a      	str	r2, [r3, #24]
	le.interval_timer = 0;
    7cf2:	4b13      	ldr	r3, [pc, #76]	; (7d40 <reset_le+0x88>)
    7cf4:	2200      	movs	r2, #0
    7cf6:	839a      	strh	r2, [r3, #28]
	le.conn_interval = 0;
    7cf8:	4b11      	ldr	r3, [pc, #68]	; (7d40 <reset_le+0x88>)
    7cfa:	2200      	movs	r2, #0
    7cfc:	83da      	strh	r2, [r3, #30]
	le.conn_interval = 0;
    7cfe:	4b10      	ldr	r3, [pc, #64]	; (7d40 <reset_le+0x88>)
    7d00:	2200      	movs	r2, #0
    7d02:	83da      	strh	r2, [r3, #30]
	le.conn_count = 0;
    7d04:	4b0e      	ldr	r3, [pc, #56]	; (7d40 <reset_le+0x88>)
    7d06:	2200      	movs	r2, #0
    7d08:	841a      	strh	r2, [r3, #32]

	le.win_size = 0;
    7d0a:	4b0d      	ldr	r3, [pc, #52]	; (7d40 <reset_le+0x88>)
    7d0c:	2200      	movs	r2, #0
    7d0e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	le.win_offset = 0;
    7d12:	4b0b      	ldr	r3, [pc, #44]	; (7d40 <reset_le+0x88>)
    7d14:	2200      	movs	r2, #0
    7d16:	849a      	strh	r2, [r3, #36]	; 0x24

	le.update_pending = 0;
    7d18:	4b09      	ldr	r3, [pc, #36]	; (7d40 <reset_le+0x88>)
    7d1a:	2200      	movs	r2, #0
    7d1c:	629a      	str	r2, [r3, #40]	; 0x28
	le.update_instant = 0;
    7d1e:	4b08      	ldr	r3, [pc, #32]	; (7d40 <reset_le+0x88>)
    7d20:	2200      	movs	r2, #0
    7d22:	859a      	strh	r2, [r3, #44]	; 0x2c
	le.interval_update = 0;
    7d24:	4b06      	ldr	r3, [pc, #24]	; (7d40 <reset_le+0x88>)
    7d26:	2200      	movs	r2, #0
    7d28:	85da      	strh	r2, [r3, #46]	; 0x2e
	le.win_size_update = 0;
    7d2a:	4b05      	ldr	r3, [pc, #20]	; (7d40 <reset_le+0x88>)
    7d2c:	2200      	movs	r2, #0
    7d2e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	le.win_offset_update;

	do_hop = 0;
    7d32:	4b06      	ldr	r3, [pc, #24]	; (7d4c <reset_le+0x94>)
    7d34:	2200      	movs	r2, #0
    7d36:	701a      	strb	r2, [r3, #0]
}
    7d38:	bd80      	pop	{r7, pc}
    7d3a:	bf00      	nop
    7d3c:	8e89bed6 	.word	0x8e89bed6
    7d40:	10000458 	.word	0x10000458
    7d44:	00555555 	.word	0x00555555
    7d48:	00aaaaaa 	.word	0x00aaaaaa
    7d4c:	1000097d 	.word	0x1000097d

00007d50 <reset_le_promisc>:

// reset LE Promisc state
void reset_le_promisc(void) {
    7d50:	b580      	push	{r7, lr}
    7d52:	af00      	add	r7, sp, #0
	memset(&le_promisc, 0, sizeof(le_promisc));
    7d54:	4805      	ldr	r0, [pc, #20]	; (7d6c <reset_le_promisc+0x1c>)
    7d56:	2100      	movs	r1, #0
    7d58:	f44f 7284 	mov.w	r2, #264	; 0x108
    7d5c:	f7fc fa0c 	bl	4178 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    7d60:	4b02      	ldr	r3, [pc, #8]	; (7d6c <reset_le_promisc+0x1c>)
    7d62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7d66:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    7d6a:	bd80      	pop	{r7, pc}
    7d6c:	10000c00 	.word	0x10000c00

00007d70 <bt_generic_le>:

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    7d70:	b580      	push	{r7, lr}
    7d72:	b088      	sub	sp, #32
    7d74:	af00      	add	r7, sp, #0
    7d76:	4603      	mov	r3, r0
    7d78:	71fb      	strb	r3, [r7, #7]
	u8 *tmp = NULL;
    7d7a:	2300      	movs	r3, #0
    7d7c:	60fb      	str	r3, [r7, #12]
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    7d7e:	4ba4      	ldr	r3, [pc, #656]	; (8010 <bt_generic_le+0x2a0>)
    7d80:	2201      	movs	r2, #1
    7d82:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    7d84:	4aa3      	ldr	r2, [pc, #652]	; (8014 <bt_generic_le+0x2a4>)
    7d86:	79fb      	ldrb	r3, [r7, #7]
    7d88:	7013      	strb	r3, [r2, #0]

	reset_le();
    7d8a:	f7ff ff95 	bl	7cb8 <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    7d8e:	4ba2      	ldr	r3, [pc, #648]	; (8018 <bt_generic_le+0x2a8>)
    7d90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7d94:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    7d96:	4ba1      	ldr	r3, [pc, #644]	; (801c <bt_generic_le+0x2ac>)
    7d98:	2210      	movs	r2, #16
    7d9a:	601a      	str	r2, [r3, #0]

	queue_init();
    7d9c:	f002 f986 	bl	a0ac <queue_init>
	dio_ssp_init();
    7da0:	f003 fad6 	bl	b350 <dio_ssp_init>
	dma_init();
    7da4:	f7fd fd30 	bl	5808 <dma_init>
	dio_ssp_start();
    7da8:	f7fd ff66 	bl	5c78 <dio_ssp_start>
	cc2400_rx();
    7dac:	f7fe f820 	bl	5df0 <cc2400_rx>

	cs_trigger_enable();
    7db0:	f7fc fe88 	bl	4ac4 <cs_trigger_enable>

	hold = 0;
    7db4:	2300      	movs	r3, #0
    7db6:	77fb      	strb	r3, [r7, #31]

	while (requested_mode == active_mode) {
    7db8:	e115      	b.n	7fe6 <bt_generic_le+0x276>
		if (requested_channel != 0) {
    7dba:	4b99      	ldr	r3, [pc, #612]	; (8020 <bt_generic_le+0x2b0>)
    7dbc:	881b      	ldrh	r3, [r3, #0]
    7dbe:	b29b      	uxth	r3, r3
    7dc0:	2b00      	cmp	r3, #0
    7dc2:	d024      	beq.n	7e0e <bt_generic_le+0x9e>
			cc2400_strobe(SRFOFF);
    7dc4:	2064      	movs	r0, #100	; 0x64
    7dc6:	f003 fc47 	bl	b658 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    7dca:	bf00      	nop
    7dcc:	f003 fc3a 	bl	b644 <cc2400_status>
    7dd0:	4603      	mov	r3, r0
    7dd2:	f003 0304 	and.w	r3, r3, #4
    7dd6:	2b00      	cmp	r3, #0
    7dd8:	d1f8      	bne.n	7dcc <bt_generic_le+0x5c>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    7dda:	4b92      	ldr	r3, [pc, #584]	; (8024 <bt_generic_le+0x2b4>)
    7ddc:	881b      	ldrh	r3, [r3, #0]
    7dde:	b29b      	uxth	r3, r3
    7de0:	3b01      	subs	r3, #1
    7de2:	b29b      	uxth	r3, r3
    7de4:	2002      	movs	r0, #2
    7de6:	4619      	mov	r1, r3
    7de8:	f003 fb84 	bl	b4f4 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    7dec:	2061      	movs	r0, #97	; 0x61
    7dee:	f003 fc33 	bl	b658 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    7df2:	bf00      	nop
    7df4:	f003 fc26 	bl	b644 <cc2400_status>
    7df8:	4603      	mov	r3, r0
    7dfa:	f003 0304 	and.w	r3, r3, #4
    7dfe:	2b00      	cmp	r3, #0
    7e00:	d0f8      	beq.n	7df4 <bt_generic_le+0x84>

			/* RX mode */
			cc2400_strobe(SRX);
    7e02:	2062      	movs	r0, #98	; 0x62
    7e04:	f003 fc28 	bl	b658 <cc2400_strobe>

			requested_channel = 0;
    7e08:	4b85      	ldr	r3, [pc, #532]	; (8020 <bt_generic_le+0x2b0>)
    7e0a:	2200      	movs	r2, #0
    7e0c:	801a      	strh	r2, [r3, #0]
		}

		if (do_hop) {
    7e0e:	4b86      	ldr	r3, [pc, #536]	; (8028 <bt_generic_le+0x2b8>)
    7e10:	781b      	ldrb	r3, [r3, #0]
    7e12:	b2db      	uxtb	r3, r3
    7e14:	2b00      	cmp	r3, #0
    7e16:	d002      	beq.n	7e1e <bt_generic_le+0xae>
			hop();
    7e18:	f7fe fa80 	bl	631c <hop>
    7e1c:	e003      	b.n	7e26 <bt_generic_le+0xb6>
		} else {
			TXLED_CLR;
    7e1e:	4b7f      	ldr	r3, [pc, #508]	; (801c <bt_generic_le+0x2ac>)
    7e20:	f44f 7280 	mov.w	r2, #256	; 0x100
    7e24:	601a      	str	r2, [r3, #0]
		}

		RXLED_CLR;
    7e26:	4b7d      	ldr	r3, [pc, #500]	; (801c <bt_generic_le+0x2ac>)
    7e28:	2210      	movs	r2, #16
    7e2a:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    7e2c:	f7fc fa6a 	bl	4304 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    7e30:	2380      	movs	r3, #128	; 0x80
    7e32:	74bb      	strb	r3, [r7, #18]
		while ((rx_tc == 0) && (rx_err == 0))
    7e34:	e022      	b.n	7e7c <bt_generic_le+0x10c>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    7e36:	2006      	movs	r0, #6
    7e38:	f003 fb46 	bl	b4c8 <cc2400_get>
    7e3c:	4603      	mov	r3, r0
    7e3e:	0a1b      	lsrs	r3, r3, #8
    7e40:	b29b      	uxth	r3, r3
    7e42:	74fb      	strb	r3, [r7, #19]
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    7e44:	4b79      	ldr	r3, [pc, #484]	; (802c <bt_generic_le+0x2bc>)
    7e46:	781b      	ldrb	r3, [r3, #0]
    7e48:	b2db      	uxtb	r3, r3
    7e4a:	2b00      	cmp	r3, #0
    7e4c:	d011      	beq.n	7e72 <bt_generic_le+0x102>
    7e4e:	f997 3012 	ldrsb.w	r3, [r7, #18]
    7e52:	f113 0f80 	cmn.w	r3, #128	; 0x80
    7e56:	d10c      	bne.n	7e72 <bt_generic_le+0x102>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    7e58:	4b75      	ldr	r3, [pc, #468]	; (8030 <bt_generic_le+0x2c0>)
    7e5a:	781b      	ldrb	r3, [r3, #0]
    7e5c:	b25b      	sxtb	r3, r3
    7e5e:	f103 0236 	add.w	r2, r3, #54	; 0x36
    7e62:	f997 3013 	ldrsb.w	r3, [r7, #19]
    7e66:	4293      	cmp	r3, r2
    7e68:	bfb8      	it	lt
    7e6a:	4613      	movlt	r3, r2
    7e6c:	74fb      	strb	r3, [r7, #19]
				rssi_at_trigger = rssi;
    7e6e:	7cfb      	ldrb	r3, [r7, #19]
    7e70:	74bb      	strb	r3, [r7, #18]
			}
			rssi_add(rssi);
    7e72:	f997 3013 	ldrsb.w	r3, [r7, #19]
    7e76:	4618      	mov	r0, r3
    7e78:	f7fc fa5e 	bl	4338 <rssi_add>
		RXLED_CLR;

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
    7e7c:	4b6d      	ldr	r3, [pc, #436]	; (8034 <bt_generic_le+0x2c4>)
    7e7e:	681b      	ldr	r3, [r3, #0]
    7e80:	2b00      	cmp	r3, #0
    7e82:	d103      	bne.n	7e8c <bt_generic_le+0x11c>
    7e84:	4b6c      	ldr	r3, [pc, #432]	; (8038 <bt_generic_le+0x2c8>)
    7e86:	681b      	ldr	r3, [r3, #0]
    7e88:	2b00      	cmp	r3, #0
    7e8a:	d0d4      	beq.n	7e36 <bt_generic_le+0xc6>
			}
			rssi_add(rssi);
		}

		/* Keep buffer swapping in sync with DMA. */
		if (rx_tc % 2) {
    7e8c:	4b69      	ldr	r3, [pc, #420]	; (8034 <bt_generic_le+0x2c4>)
    7e8e:	681b      	ldr	r3, [r3, #0]
    7e90:	f003 0301 	and.w	r3, r3, #1
    7e94:	2b00      	cmp	r3, #0
    7e96:	d009      	beq.n	7eac <bt_generic_le+0x13c>
			tmp = active_rxbuf;
    7e98:	4b68      	ldr	r3, [pc, #416]	; (803c <bt_generic_le+0x2cc>)
    7e9a:	681b      	ldr	r3, [r3, #0]
    7e9c:	60fb      	str	r3, [r7, #12]
			active_rxbuf = idle_rxbuf;
    7e9e:	4b68      	ldr	r3, [pc, #416]	; (8040 <bt_generic_le+0x2d0>)
    7ea0:	681b      	ldr	r3, [r3, #0]
    7ea2:	4a66      	ldr	r2, [pc, #408]	; (803c <bt_generic_le+0x2cc>)
    7ea4:	6013      	str	r3, [r2, #0]
			idle_rxbuf = tmp;
    7ea6:	4a66      	ldr	r2, [pc, #408]	; (8040 <bt_generic_le+0x2d0>)
    7ea8:	68fb      	ldr	r3, [r7, #12]
    7eaa:	6013      	str	r3, [r2, #0]
		}

		if (rx_err) {
    7eac:	4b62      	ldr	r3, [pc, #392]	; (8038 <bt_generic_le+0x2c8>)
    7eae:	681b      	ldr	r3, [r3, #0]
    7eb0:	2b00      	cmp	r3, #0
    7eb2:	d007      	beq.n	7ec4 <bt_generic_le+0x154>
			status |= DMA_ERROR;
    7eb4:	4b63      	ldr	r3, [pc, #396]	; (8044 <bt_generic_le+0x2d4>)
    7eb6:	781b      	ldrb	r3, [r3, #0]
    7eb8:	b2db      	uxtb	r3, r3
    7eba:	f043 0302 	orr.w	r3, r3, #2
    7ebe:	b2da      	uxtb	r2, r3
    7ec0:	4b60      	ldr	r3, [pc, #384]	; (8044 <bt_generic_le+0x2d4>)
    7ec2:	701a      	strb	r2, [r3, #0]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    7ec4:	4b5b      	ldr	r3, [pc, #364]	; (8034 <bt_generic_le+0x2c4>)
    7ec6:	681b      	ldr	r3, [r3, #0]
    7ec8:	2b00      	cmp	r3, #0
    7eca:	d100      	bne.n	7ece <bt_generic_le+0x15e>
			goto rx_continue;
    7ecc:	e085      	b.n	7fda <bt_generic_le+0x26a>

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    7ece:	4b59      	ldr	r3, [pc, #356]	; (8034 <bt_generic_le+0x2c4>)
    7ed0:	681b      	ldr	r3, [r3, #0]
    7ed2:	2b01      	cmp	r3, #1
    7ed4:	d907      	bls.n	7ee6 <bt_generic_le+0x176>
			status |= DMA_OVERFLOW;
    7ed6:	4b5b      	ldr	r3, [pc, #364]	; (8044 <bt_generic_le+0x2d4>)
    7ed8:	781b      	ldrb	r3, [r3, #0]
    7eda:	b2db      	uxtb	r3, r3
    7edc:	f043 0301 	orr.w	r3, r3, #1
    7ee0:	b2da      	uxtb	r2, r3
    7ee2:	4b58      	ldr	r3, [pc, #352]	; (8044 <bt_generic_le+0x2d4>)
    7ee4:	701a      	strb	r2, [r3, #0]

		rssi_iir_update();
    7ee6:	f7fc fa5d 	bl	43a4 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    7eea:	4b50      	ldr	r3, [pc, #320]	; (802c <bt_generic_le+0x2bc>)
    7eec:	781b      	ldrb	r3, [r3, #0]
    7eee:	b2db      	uxtb	r3, r3
    7ef0:	2b00      	cmp	r3, #0
    7ef2:	d103      	bne.n	7efc <bt_generic_le+0x18c>
    7ef4:	4b54      	ldr	r3, [pc, #336]	; (8048 <bt_generic_le+0x2d8>)
    7ef6:	781b      	ldrb	r3, [r3, #0]
    7ef8:	2b00      	cmp	r3, #0
    7efa:	d00c      	beq.n	7f16 <bt_generic_le+0x1a6>
			status |= CS_TRIGGER;
    7efc:	4b51      	ldr	r3, [pc, #324]	; (8044 <bt_generic_le+0x2d4>)
    7efe:	781b      	ldrb	r3, [r3, #0]
    7f00:	b2db      	uxtb	r3, r3
    7f02:	f043 0308 	orr.w	r3, r3, #8
    7f06:	b2da      	uxtb	r2, r3
    7f08:	4b4e      	ldr	r3, [pc, #312]	; (8044 <bt_generic_le+0x2d4>)
    7f0a:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    7f0c:	2302      	movs	r3, #2
    7f0e:	77fb      	strb	r3, [r7, #31]
			cs_trigger = 0;
    7f10:	4b46      	ldr	r3, [pc, #280]	; (802c <bt_generic_le+0x2bc>)
    7f12:	2200      	movs	r2, #0
    7f14:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    7f16:	4b4d      	ldr	r3, [pc, #308]	; (804c <bt_generic_le+0x2dc>)
    7f18:	781b      	ldrb	r3, [r3, #0]
    7f1a:	b25a      	sxtb	r2, r3
    7f1c:	4b44      	ldr	r3, [pc, #272]	; (8030 <bt_generic_le+0x2c0>)
    7f1e:	781b      	ldrb	r3, [r3, #0]
    7f20:	b25b      	sxtb	r3, r3
    7f22:	3336      	adds	r3, #54	; 0x36
    7f24:	429a      	cmp	r2, r3
    7f26:	db09      	blt.n	7f3c <bt_generic_le+0x1cc>
			status |= RSSI_TRIGGER;
    7f28:	4b46      	ldr	r3, [pc, #280]	; (8044 <bt_generic_le+0x2d4>)
    7f2a:	781b      	ldrb	r3, [r3, #0]
    7f2c:	b2db      	uxtb	r3, r3
    7f2e:	f043 0310 	orr.w	r3, r3, #16
    7f32:	b2da      	uxtb	r2, r3
    7f34:	4b43      	ldr	r3, [pc, #268]	; (8044 <bt_generic_le+0x2d4>)
    7f36:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    7f38:	2302      	movs	r3, #2
    7f3a:	77fb      	strb	r3, [r7, #31]
		}

		/* Send a packet once in a while (6.25 Hz) to keep
		 * host USB reads from timing out. */
		if (keepalive_trigger) {
    7f3c:	4b44      	ldr	r3, [pc, #272]	; (8050 <bt_generic_le+0x2e0>)
    7f3e:	781b      	ldrb	r3, [r3, #0]
    7f40:	b2db      	uxtb	r3, r3
    7f42:	2b00      	cmp	r3, #0
    7f44:	d007      	beq.n	7f56 <bt_generic_le+0x1e6>
			if (hold == 0)
    7f46:	7ffb      	ldrb	r3, [r7, #31]
    7f48:	2b00      	cmp	r3, #0
    7f4a:	d101      	bne.n	7f50 <bt_generic_le+0x1e0>
				hold = 1;
    7f4c:	2301      	movs	r3, #1
    7f4e:	77fb      	strb	r3, [r7, #31]
			keepalive_trigger = 0;
    7f50:	4b3f      	ldr	r3, [pc, #252]	; (8050 <bt_generic_le+0x2e0>)
    7f52:	2200      	movs	r2, #0
    7f54:	701a      	strb	r2, [r3, #0]
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    7f56:	7ffb      	ldrb	r3, [r7, #31]
    7f58:	2b00      	cmp	r3, #0
    7f5a:	d100      	bne.n	7f5e <bt_generic_le+0x1ee>
			goto rx_continue;
    7f5c:	e03d      	b.n	7fda <bt_generic_le+0x26a>
		}
		hold--;
    7f5e:	7ffb      	ldrb	r3, [r7, #31]
    7f60:	3b01      	subs	r3, #1
    7f62:	77fb      	strb	r3, [r7, #31]

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    7f64:	483b      	ldr	r0, [pc, #236]	; (8054 <bt_generic_le+0x2e4>)
    7f66:	493c      	ldr	r1, [pc, #240]	; (8058 <bt_generic_le+0x2e8>)
    7f68:	f44f 72c8 	mov.w	r2, #400	; 0x190
    7f6c:	f005 f886 	bl	d07c <memcpy>

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    7f70:	2300      	movs	r3, #0
    7f72:	61bb      	str	r3, [r7, #24]
    7f74:	e025      	b.n	7fc2 <bt_generic_le+0x252>
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    7f76:	2300      	movs	r3, #0
    7f78:	617b      	str	r3, [r7, #20]
    7f7a:	e01c      	b.n	7fb6 <bt_generic_le+0x246>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    7f7c:	69bb      	ldr	r3, [r7, #24]
    7f7e:	3332      	adds	r3, #50	; 0x32
    7f80:	00da      	lsls	r2, r3, #3
    7f82:	697b      	ldr	r3, [r7, #20]
    7f84:	4413      	add	r3, r2
    7f86:	4a2e      	ldr	r2, [pc, #184]	; (8040 <bt_generic_le+0x2d0>)
    7f88:	6811      	ldr	r1, [r2, #0]
    7f8a:	69ba      	ldr	r2, [r7, #24]
    7f8c:	440a      	add	r2, r1
    7f8e:	7812      	ldrb	r2, [r2, #0]
    7f90:	09d2      	lsrs	r2, r2, #7
    7f92:	b2d1      	uxtb	r1, r2
    7f94:	4a2f      	ldr	r2, [pc, #188]	; (8054 <bt_generic_le+0x2e4>)
    7f96:	54d1      	strb	r1, [r2, r3]
				idle_rxbuf[i] <<= 1;
    7f98:	4b29      	ldr	r3, [pc, #164]	; (8040 <bt_generic_le+0x2d0>)
    7f9a:	681a      	ldr	r2, [r3, #0]
    7f9c:	69bb      	ldr	r3, [r7, #24]
    7f9e:	4413      	add	r3, r2
    7fa0:	4a27      	ldr	r2, [pc, #156]	; (8040 <bt_generic_le+0x2d0>)
    7fa2:	6811      	ldr	r1, [r2, #0]
    7fa4:	69ba      	ldr	r2, [r7, #24]
    7fa6:	440a      	add	r2, r1
    7fa8:	7812      	ldrb	r2, [r2, #0]
    7faa:	0052      	lsls	r2, r2, #1
    7fac:	b2d2      	uxtb	r2, r2
    7fae:	701a      	strb	r2, [r3, #0]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    7fb0:	697b      	ldr	r3, [r7, #20]
    7fb2:	3301      	adds	r3, #1
    7fb4:	617b      	str	r3, [r7, #20]
    7fb6:	697b      	ldr	r3, [r7, #20]
    7fb8:	2b07      	cmp	r3, #7
    7fba:	dddf      	ble.n	7f7c <bt_generic_le+0x20c>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    7fbc:	69bb      	ldr	r3, [r7, #24]
    7fbe:	3301      	adds	r3, #1
    7fc0:	61bb      	str	r3, [r7, #24]
    7fc2:	69bb      	ldr	r3, [r7, #24]
    7fc4:	2b31      	cmp	r3, #49	; 0x31
    7fc6:	ddd6      	ble.n	7f76 <bt_generic_le+0x206>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    7fc8:	4b24      	ldr	r3, [pc, #144]	; (805c <bt_generic_le+0x2ec>)
    7fca:	681b      	ldr	r3, [r3, #0]
    7fcc:	4821      	ldr	r0, [pc, #132]	; (8054 <bt_generic_le+0x2e4>)
    7fce:	4798      	blx	r3
    7fd0:	60b8      	str	r0, [r7, #8]
		if (!ret) break;
    7fd2:	68bb      	ldr	r3, [r7, #8]
    7fd4:	2b00      	cmp	r3, #0
    7fd6:	d100      	bne.n	7fda <bt_generic_le+0x26a>
    7fd8:	e00c      	b.n	7ff4 <bt_generic_le+0x284>

	rx_continue:
		rx_tc = 0;
    7fda:	4b16      	ldr	r3, [pc, #88]	; (8034 <bt_generic_le+0x2c4>)
    7fdc:	2200      	movs	r2, #0
    7fde:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    7fe0:	4b15      	ldr	r3, [pc, #84]	; (8038 <bt_generic_le+0x2c8>)
    7fe2:	2200      	movs	r2, #0
    7fe4:	601a      	str	r2, [r3, #0]

	cs_trigger_enable();

	hold = 0;

	while (requested_mode == active_mode) {
    7fe6:	4b1e      	ldr	r3, [pc, #120]	; (8060 <bt_generic_le+0x2f0>)
    7fe8:	781b      	ldrb	r3, [r3, #0]
    7fea:	b2db      	uxtb	r3, r3
    7fec:	79fa      	ldrb	r2, [r7, #7]
    7fee:	429a      	cmp	r2, r3
    7ff0:	f43f aee3 	beq.w	7dba <bt_generic_le+0x4a>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    7ff4:	4b1b      	ldr	r3, [pc, #108]	; (8064 <bt_generic_le+0x2f4>)
    7ff6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7ffa:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    7ffc:	f7fd fed0 	bl	5da0 <cc2400_idle>
	dio_ssp_stop();
    8000:	f7fd fe6a 	bl	5cd8 <dio_ssp_stop>
	cs_trigger_disable();
    8004:	f7fc fd7c 	bl	4b00 <cs_trigger_disable>
}
    8008:	3720      	adds	r7, #32
    800a:	46bd      	mov	sp, r7
    800c:	bd80      	pop	{r7, pc}
    800e:	bf00      	nop
    8010:	10000a42 	.word	0x10000a42
    8014:	10000a3e 	.word	0x10000a3e
    8018:	e000e100 	.word	0xe000e100
    801c:	2009c03c 	.word	0x2009c03c
    8020:	10000a44 	.word	0x10000a44
    8024:	1000049c 	.word	0x1000049c
    8028:	1000097d 	.word	0x1000097d
    802c:	100010d4 	.word	0x100010d4
    8030:	1000044d 	.word	0x1000044d
    8034:	10000b0c 	.word	0x10000b0c
    8038:	100010d0 	.word	0x100010d0
    803c:	10000450 	.word	0x10000450
    8040:	10000454 	.word	0x10000454
    8044:	10000a48 	.word	0x10000a48
    8048:	1000097e 	.word	0x1000097e
    804c:	10000b14 	.word	0x10000b14
    8050:	10000bf0 	.word	0x10000bf0
    8054:	10000d18 	.word	0x10000d18
    8058:	10000ea8 	.word	0x10000ea8
    805c:	10000998 	.word	0x10000998
    8060:	10000a3f 	.word	0x10000a3f
    8064:	e000e180 	.word	0xe000e180

00008068 <bt_le_sync>:


void bt_le_sync(u8 active_mode)
{
    8068:	b590      	push	{r4, r7, lr}
    806a:	b09b      	sub	sp, #108	; 0x6c
    806c:	af00      	add	r7, sp, #0
    806e:	4603      	mov	r3, r0
    8070:	71fb      	strb	r3, [r7, #7]
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    8072:	4b87      	ldr	r3, [pc, #540]	; (8290 <bt_le_sync+0x228>)
    8074:	2201      	movs	r2, #1
    8076:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    8078:	4a86      	ldr	r2, [pc, #536]	; (8294 <bt_le_sync+0x22c>)
    807a:	79fb      	ldrb	r3, [r7, #7]
    807c:	7013      	strb	r3, [r2, #0]

	le.link_state = LINK_LISTENING;
    807e:	4b86      	ldr	r3, [pc, #536]	; (8298 <bt_le_sync+0x230>)
    8080:	2201      	movs	r2, #1
    8082:	751a      	strb	r2, [r3, #20]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    8084:	4b85      	ldr	r3, [pc, #532]	; (829c <bt_le_sync+0x234>)
    8086:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    808a:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    808c:	4b84      	ldr	r3, [pc, #528]	; (82a0 <bt_le_sync+0x238>)
    808e:	2210      	movs	r2, #16
    8090:	601a      	str	r2, [r3, #0]

	queue_init();
    8092:	f002 f80b 	bl	a0ac <queue_init>
	dio_ssp_init();
    8096:	f003 f95b 	bl	b350 <dio_ssp_init>
	dma_init_le();
    809a:	f7fd fc75 	bl	5988 <dma_init_le>
	dio_ssp_start();
    809e:	f7fd fdeb 	bl	5c78 <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    80a2:	4b7d      	ldr	r3, [pc, #500]	; (8298 <bt_le_sync+0x230>)
    80a4:	681b      	ldr	r3, [r3, #0]
    80a6:	4618      	mov	r0, r3
    80a8:	f003 f852 	bl	b150 <rbit>
    80ac:	4603      	mov	r3, r0
    80ae:	4618      	mov	r0, r3
    80b0:	f7fd fefc 	bl	5eac <cc2400_rx_sync>

	while (requested_mode == active_mode) {
    80b4:	e247      	b.n	8546 <bt_le_sync+0x4de>
		if (requested_channel != 0) {
    80b6:	4b7b      	ldr	r3, [pc, #492]	; (82a4 <bt_le_sync+0x23c>)
    80b8:	881b      	ldrh	r3, [r3, #0]
    80ba:	b29b      	uxth	r3, r3
    80bc:	2b00      	cmp	r3, #0
    80be:	d029      	beq.n	8114 <bt_le_sync+0xac>
			cc2400_strobe(SRFOFF);
    80c0:	2064      	movs	r0, #100	; 0x64
    80c2:	f003 fac9 	bl	b658 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    80c6:	bf00      	nop
    80c8:	f003 fabc 	bl	b644 <cc2400_status>
    80cc:	4603      	mov	r3, r0
    80ce:	f003 0304 	and.w	r3, r3, #4
    80d2:	2b00      	cmp	r3, #0
    80d4:	d1f8      	bne.n	80c8 <bt_le_sync+0x60>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    80d6:	4b74      	ldr	r3, [pc, #464]	; (82a8 <bt_le_sync+0x240>)
    80d8:	881b      	ldrh	r3, [r3, #0]
    80da:	b29b      	uxth	r3, r3
    80dc:	3b01      	subs	r3, #1
    80de:	b29b      	uxth	r3, r3
    80e0:	2002      	movs	r0, #2
    80e2:	4619      	mov	r1, r3
    80e4:	f003 fa06 	bl	b4f4 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    80e8:	2061      	movs	r0, #97	; 0x61
    80ea:	f003 fab5 	bl	b658 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    80ee:	bf00      	nop
    80f0:	f003 faa8 	bl	b644 <cc2400_status>
    80f4:	4603      	mov	r3, r0
    80f6:	f003 0304 	and.w	r3, r3, #4
    80fa:	2b00      	cmp	r3, #0
    80fc:	d0f8      	beq.n	80f0 <bt_le_sync+0x88>

			/* RX mode */
			cc2400_strobe(SRX);
    80fe:	2062      	movs	r0, #98	; 0x62
    8100:	f003 faaa 	bl	b658 <cc2400_strobe>

			saved_request = requested_channel;
    8104:	4b67      	ldr	r3, [pc, #412]	; (82a4 <bt_le_sync+0x23c>)
    8106:	881b      	ldrh	r3, [r3, #0]
    8108:	b29a      	uxth	r2, r3
    810a:	4b68      	ldr	r3, [pc, #416]	; (82ac <bt_le_sync+0x244>)
    810c:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    810e:	4b65      	ldr	r3, [pc, #404]	; (82a4 <bt_le_sync+0x23c>)
    8110:	2200      	movs	r2, #0
    8112:	801a      	strh	r2, [r3, #0]
		}

		RXLED_CLR;
    8114:	4b62      	ldr	r3, [pc, #392]	; (82a0 <bt_le_sync+0x238>)
    8116:	2210      	movs	r2, #16
    8118:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    811a:	f7fc f8f3 	bl	4304 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    811e:	bf00      	nop
    8120:	4b63      	ldr	r3, [pc, #396]	; (82b0 <bt_le_sync+0x248>)
    8122:	681b      	ldr	r3, [r3, #0]
    8124:	2b00      	cmp	r3, #0
    8126:	d10e      	bne.n	8146 <bt_le_sync+0xde>
    8128:	4b62      	ldr	r3, [pc, #392]	; (82b4 <bt_le_sync+0x24c>)
    812a:	681b      	ldr	r3, [r3, #0]
    812c:	2b00      	cmp	r3, #0
    812e:	d10a      	bne.n	8146 <bt_le_sync+0xde>
    8130:	4b61      	ldr	r3, [pc, #388]	; (82b8 <bt_le_sync+0x250>)
    8132:	781b      	ldrb	r3, [r3, #0]
    8134:	b2db      	uxtb	r3, r3
    8136:	2b00      	cmp	r3, #0
    8138:	d105      	bne.n	8146 <bt_le_sync+0xde>
    813a:	4b60      	ldr	r3, [pc, #384]	; (82bc <bt_le_sync+0x254>)
    813c:	781b      	ldrb	r3, [r3, #0]
    813e:	b2db      	uxtb	r3, r3
    8140:	79fa      	ldrb	r2, [r7, #7]
    8142:	429a      	cmp	r2, r3
    8144:	d0ec      	beq.n	8120 <bt_le_sync+0xb8>
			;

		if (requested_mode != active_mode) {
    8146:	4b5d      	ldr	r3, [pc, #372]	; (82bc <bt_le_sync+0x254>)
    8148:	781b      	ldrb	r3, [r3, #0]
    814a:	b2db      	uxtb	r3, r3
    814c:	79fa      	ldrb	r2, [r7, #7]
    814e:	429a      	cmp	r2, r3
    8150:	d000      	beq.n	8154 <bt_le_sync+0xec>
			goto cleanup;
    8152:	e1ff      	b.n	8554 <bt_le_sync+0x4ec>
		}

		if (rx_err) {
    8154:	4b57      	ldr	r3, [pc, #348]	; (82b4 <bt_le_sync+0x24c>)
    8156:	681b      	ldr	r3, [r3, #0]
    8158:	2b00      	cmp	r3, #0
    815a:	d007      	beq.n	816c <bt_le_sync+0x104>
			status |= DMA_ERROR;
    815c:	4b58      	ldr	r3, [pc, #352]	; (82c0 <bt_le_sync+0x258>)
    815e:	781b      	ldrb	r3, [r3, #0]
    8160:	b2db      	uxtb	r3, r3
    8162:	f043 0302 	orr.w	r3, r3, #2
    8166:	b2da      	uxtb	r2, r3
    8168:	4b55      	ldr	r3, [pc, #340]	; (82c0 <bt_le_sync+0x258>)
    816a:	701a      	strb	r2, [r3, #0]
		}

		if (do_hop)
    816c:	4b52      	ldr	r3, [pc, #328]	; (82b8 <bt_le_sync+0x250>)
    816e:	781b      	ldrb	r3, [r3, #0]
    8170:	b2db      	uxtb	r3, r3
    8172:	2b00      	cmp	r3, #0
    8174:	d000      	beq.n	8178 <bt_le_sync+0x110>
			goto rx_flush;
    8176:	e12b      	b.n	83d0 <bt_le_sync+0x368>

		/* No DMA transfer? */
		if (!rx_tc)
    8178:	4b4d      	ldr	r3, [pc, #308]	; (82b0 <bt_le_sync+0x248>)
    817a:	681b      	ldr	r3, [r3, #0]
    817c:	2b00      	cmp	r3, #0
    817e:	d100      	bne.n	8182 <bt_le_sync+0x11a>
    8180:	e1e1      	b.n	8546 <bt_le_sync+0x4de>

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    8182:	f107 0308 	add.w	r3, r7, #8
    8186:	65fb      	str	r3, [r7, #92]	; 0x5c
		packet[0] = le.access_address;
    8188:	4b43      	ldr	r3, [pc, #268]	; (8298 <bt_le_sync+0x230>)
    818a:	681b      	ldr	r3, [r3, #0]
    818c:	60bb      	str	r3, [r7, #8]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    818e:	4b46      	ldr	r3, [pc, #280]	; (82a8 <bt_le_sync+0x240>)
    8190:	881b      	ldrh	r3, [r3, #0]
    8192:	b29b      	uxth	r3, r3
    8194:	b2db      	uxtb	r3, r3
    8196:	3b62      	subs	r3, #98	; 0x62
    8198:	b2db      	uxtb	r3, r3
    819a:	4618      	mov	r0, r3
    819c:	f001 fe06 	bl	9dac <btle_channel_index>
    81a0:	4603      	mov	r3, r0
    81a2:	461a      	mov	r2, r3
    81a4:	4613      	mov	r3, r2
    81a6:	005b      	lsls	r3, r3, #1
    81a8:	4413      	add	r3, r2
    81aa:	011b      	lsls	r3, r3, #4
    81ac:	4a45      	ldr	r2, [pc, #276]	; (82c4 <bt_le_sync+0x25c>)
    81ae:	4413      	add	r3, r2
    81b0:	65bb      	str	r3, [r7, #88]	; 0x58
		for (i = 0; i < 4; i+= 4) {
    81b2:	2300      	movs	r3, #0
    81b4:	667b      	str	r3, [r7, #100]	; 0x64
    81b6:	e034      	b.n	8222 <bt_le_sync+0x1ba>
			uint32_t v = rxbuf1[i+0] << 24
    81b8:	4a43      	ldr	r2, [pc, #268]	; (82c8 <bt_le_sync+0x260>)
    81ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    81bc:	4413      	add	r3, r2
    81be:	781b      	ldrb	r3, [r3, #0]
    81c0:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    81c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    81c4:	3301      	adds	r3, #1
    81c6:	4940      	ldr	r1, [pc, #256]	; (82c8 <bt_le_sync+0x260>)
    81c8:	5ccb      	ldrb	r3, [r1, r3]
    81ca:	041b      	lsls	r3, r3, #16
    81cc:	431a      	orrs	r2, r3
					   | rxbuf1[i+2] << 8
    81ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    81d0:	3302      	adds	r3, #2
    81d2:	493d      	ldr	r1, [pc, #244]	; (82c8 <bt_le_sync+0x260>)
    81d4:	5ccb      	ldrb	r3, [r1, r3]
    81d6:	021b      	lsls	r3, r3, #8
    81d8:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    81da:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    81dc:	3203      	adds	r2, #3
    81de:	493a      	ldr	r1, [pc, #232]	; (82c8 <bt_le_sync+0x260>)
    81e0:	5c8a      	ldrb	r2, [r1, r2]
    81e2:	4313      	orrs	r3, r2
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    81e4:	657b      	str	r3, [r7, #84]	; 0x54
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    81e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    81e8:	2b00      	cmp	r3, #0
    81ea:	da00      	bge.n	81ee <bt_le_sync+0x186>
    81ec:	3303      	adds	r3, #3
    81ee:	109b      	asrs	r3, r3, #2
    81f0:	1c5c      	adds	r4, r3, #1
    81f2:	6d78      	ldr	r0, [r7, #84]	; 0x54
    81f4:	f002 ffac 	bl	b150 <rbit>
    81f8:	4601      	mov	r1, r0
    81fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    81fc:	2b00      	cmp	r3, #0
    81fe:	da00      	bge.n	8202 <bt_le_sync+0x19a>
    8200:	3303      	adds	r3, #3
    8202:	109b      	asrs	r3, r3, #2
    8204:	009b      	lsls	r3, r3, #2
    8206:	6dba      	ldr	r2, [r7, #88]	; 0x58
    8208:	4413      	add	r3, r2
    820a:	681b      	ldr	r3, [r3, #0]
    820c:	ea81 0203 	eor.w	r2, r1, r3
    8210:	00a3      	lsls	r3, r4, #2
    8212:	f107 0168 	add.w	r1, r7, #104	; 0x68
    8216:	440b      	add	r3, r1
    8218:	f843 2c60 	str.w	r2, [r3, #-96]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
    821c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    821e:	3304      	adds	r3, #4
    8220:	667b      	str	r3, [r7, #100]	; 0x64
    8222:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    8224:	2b03      	cmp	r3, #3
    8226:	ddc7      	ble.n	81b8 <bt_le_sync+0x150>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		unsigned len = (p[5] & 0x3f) + 2;
    8228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    822a:	3305      	adds	r3, #5
    822c:	781b      	ldrb	r3, [r3, #0]
    822e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    8232:	3302      	adds	r3, #2
    8234:	653b      	str	r3, [r7, #80]	; 0x50
		if (len > 39)
    8236:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    8238:	2b27      	cmp	r3, #39	; 0x27
    823a:	d900      	bls.n	823e <bt_le_sync+0x1d6>
			goto rx_flush;
    823c:	e0c8      	b.n	83d0 <bt_le_sync+0x368>

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    823e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    8240:	3306      	adds	r3, #6
    8242:	089b      	lsrs	r3, r3, #2
    8244:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (total_transfers < 11) {
    8246:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8248:	2b0a      	cmp	r3, #10
    824a:	d80d      	bhi.n	8268 <bt_le_sync+0x200>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    824c:	bf00      	nop
    824e:	4b1f      	ldr	r3, [pc, #124]	; (82cc <bt_le_sync+0x264>)
    8250:	681a      	ldr	r2, [r3, #0]
    8252:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8254:	009b      	lsls	r3, r3, #2
    8256:	491c      	ldr	r1, [pc, #112]	; (82c8 <bt_le_sync+0x260>)
    8258:	440b      	add	r3, r1
    825a:	429a      	cmp	r2, r3
    825c:	d20f      	bcs.n	827e <bt_le_sync+0x216>
    825e:	4b15      	ldr	r3, [pc, #84]	; (82b4 <bt_le_sync+0x24c>)
    8260:	681b      	ldr	r3, [r3, #0]
    8262:	2b00      	cmp	r3, #0
    8264:	d0f3      	beq.n	824e <bt_le_sync+0x1e6>
    8266:	e00a      	b.n	827e <bt_le_sync+0x216>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    8268:	bf00      	nop
    826a:	4b19      	ldr	r3, [pc, #100]	; (82d0 <bt_le_sync+0x268>)
    826c:	681b      	ldr	r3, [r3, #0]
    826e:	f003 0301 	and.w	r3, r3, #1
    8272:	2b00      	cmp	r3, #0
    8274:	d003      	beq.n	827e <bt_le_sync+0x216>
    8276:	4b0f      	ldr	r3, [pc, #60]	; (82b4 <bt_le_sync+0x24c>)
    8278:	681b      	ldr	r3, [r3, #0]
    827a:	2b00      	cmp	r3, #0
    827c:	d0f5      	beq.n	826a <bt_le_sync+0x202>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    827e:	4a15      	ldr	r2, [pc, #84]	; (82d4 <bt_le_sync+0x26c>)
    8280:	4b14      	ldr	r3, [pc, #80]	; (82d4 <bt_le_sync+0x26c>)
    8282:	681b      	ldr	r3, [r3, #0]
    8284:	f023 0301 	bic.w	r3, r3, #1
    8288:	6013      	str	r3, [r2, #0]

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    828a:	2304      	movs	r3, #4
    828c:	667b      	str	r3, [r7, #100]	; 0x64
    828e:	e058      	b.n	8342 <bt_le_sync+0x2da>
    8290:	10000a42 	.word	0x10000a42
    8294:	10000a3e 	.word	0x10000a3e
    8298:	10000458 	.word	0x10000458
    829c:	e000e100 	.word	0xe000e100
    82a0:	2009c03c 	.word	0x2009c03c
    82a4:	10000a44 	.word	0x10000a44
    82a8:	1000049c 	.word	0x1000049c
    82ac:	10000a46 	.word	0x10000a46
    82b0:	10000b0c 	.word	0x10000b0c
    82b4:	100010d0 	.word	0x100010d0
    82b8:	1000097d 	.word	0x1000097d
    82bc:	10000a3f 	.word	0x10000a3f
    82c0:	10000a48 	.word	0x10000a48
    82c4:	0000d2dc 	.word	0x0000d2dc
    82c8:	1000109c 	.word	0x1000109c
    82cc:	50004104 	.word	0x50004104
    82d0:	50004110 	.word	0x50004110
    82d4:	40030024 	.word	0x40030024
			uint32_t v = rxbuf1[i+0] << 24
    82d8:	4aa5      	ldr	r2, [pc, #660]	; (8570 <bt_le_sync+0x508>)
    82da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    82dc:	4413      	add	r3, r2
    82de:	781b      	ldrb	r3, [r3, #0]
    82e0:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    82e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    82e4:	3301      	adds	r3, #1
    82e6:	49a2      	ldr	r1, [pc, #648]	; (8570 <bt_le_sync+0x508>)
    82e8:	5ccb      	ldrb	r3, [r1, r3]
    82ea:	041b      	lsls	r3, r3, #16
    82ec:	431a      	orrs	r2, r3
				       | rxbuf1[i+2] << 8
    82ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    82f0:	3302      	adds	r3, #2
    82f2:	499f      	ldr	r1, [pc, #636]	; (8570 <bt_le_sync+0x508>)
    82f4:	5ccb      	ldrb	r3, [r1, r3]
    82f6:	021b      	lsls	r3, r3, #8
    82f8:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    82fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    82fc:	3203      	adds	r2, #3
    82fe:	499c      	ldr	r1, [pc, #624]	; (8570 <bt_le_sync+0x508>)
    8300:	5c8a      	ldrb	r2, [r1, r2]
    8302:	4313      	orrs	r3, r2
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    8304:	64bb      	str	r3, [r7, #72]	; 0x48
					   | rxbuf1[i+1] << 16
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    8306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    8308:	2b00      	cmp	r3, #0
    830a:	da00      	bge.n	830e <bt_le_sync+0x2a6>
    830c:	3303      	adds	r3, #3
    830e:	109b      	asrs	r3, r3, #2
    8310:	1c5c      	adds	r4, r3, #1
    8312:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    8314:	f002 ff1c 	bl	b150 <rbit>
    8318:	4601      	mov	r1, r0
    831a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    831c:	2b00      	cmp	r3, #0
    831e:	da00      	bge.n	8322 <bt_le_sync+0x2ba>
    8320:	3303      	adds	r3, #3
    8322:	109b      	asrs	r3, r3, #2
    8324:	009b      	lsls	r3, r3, #2
    8326:	6dba      	ldr	r2, [r7, #88]	; 0x58
    8328:	4413      	add	r3, r2
    832a:	681b      	ldr	r3, [r3, #0]
    832c:	ea81 0203 	eor.w	r2, r1, r3
    8330:	00a3      	lsls	r3, r4, #2
    8332:	f107 0168 	add.w	r1, r7, #104	; 0x68
    8336:	440b      	add	r3, r1
    8338:	f843 2c60 	str.w	r2, [r3, #-96]
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    833c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    833e:	3304      	adds	r3, #4
    8340:	667b      	str	r3, [r7, #100]	; 0x64
    8342:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    8344:	2b2b      	cmp	r3, #43	; 0x2b
    8346:	ddc7      	ble.n	82d8 <bt_le_sync+0x270>
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    8348:	4b8a      	ldr	r3, [pc, #552]	; (8574 <bt_le_sync+0x50c>)
    834a:	691b      	ldr	r3, [r3, #16]
    834c:	2b00      	cmp	r3, #0
    834e:	d023      	beq.n	8398 <bt_le_sync+0x330>
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    8350:	4b88      	ldr	r3, [pc, #544]	; (8574 <bt_le_sync+0x50c>)
    8352:	68d9      	ldr	r1, [r3, #12]
    8354:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    8356:	1d1a      	adds	r2, r3, #4
    8358:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    835a:	4608      	mov	r0, r1
    835c:	4611      	mov	r1, r2
    835e:	461a      	mov	r2, r3
    8360:	f001 fe28 	bl	9fb4 <btle_crcgen_lut>
    8364:	6478      	str	r0, [r7, #68]	; 0x44
			u32 wire_crc = (p[4+len+2] << 16)
    8366:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    8368:	3306      	adds	r3, #6
    836a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    836c:	4413      	add	r3, r2
    836e:	781b      	ldrb	r3, [r3, #0]
    8370:	041a      	lsls	r2, r3, #16
						 | (p[4+len+1] << 8)
    8372:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    8374:	3305      	adds	r3, #5
    8376:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    8378:	440b      	add	r3, r1
    837a:	781b      	ldrb	r3, [r3, #0]
    837c:	021b      	lsls	r3, r3, #8
    837e:	4313      	orrs	r3, r2
						 | (p[4+len+0] << 0);
    8380:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    8382:	3204      	adds	r2, #4
    8384:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    8386:	440a      	add	r2, r1
    8388:	7812      	ldrb	r2, [r2, #0]
    838a:	4313      	orrs	r3, r2
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
			u32 wire_crc = (p[4+len+2] << 16)
    838c:	643b      	str	r3, [r7, #64]	; 0x40
						 | (p[4+len+1] << 8)
						 | (p[4+len+0] << 0);
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    838e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    8390:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    8392:	429a      	cmp	r2, r3
    8394:	d000      	beq.n	8398 <bt_le_sync+0x330>
				goto rx_flush;
    8396:	e01b      	b.n	83d0 <bt_le_sync+0x368>
		}


		RXLED_SET;
    8398:	4b77      	ldr	r3, [pc, #476]	; (8578 <bt_le_sync+0x510>)
    839a:	2210      	movs	r2, #16
    839c:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    839e:	4b77      	ldr	r3, [pc, #476]	; (857c <bt_le_sync+0x514>)
    83a0:	681b      	ldr	r3, [r3, #0]
    83a2:	f107 0208 	add.w	r2, r7, #8
    83a6:	4610      	mov	r0, r2
    83a8:	4798      	blx	r3
		enqueue(LE_PACKET, (uint8_t *)packet);
    83aa:	f107 0308 	add.w	r3, r7, #8
    83ae:	2001      	movs	r0, #1
    83b0:	4619      	mov	r1, r3
    83b2:	f7fc f889 	bl	44c8 <enqueue>
		le.last_packet = CLK100NS;
    83b6:	4b72      	ldr	r3, [pc, #456]	; (8580 <bt_le_sync+0x518>)
    83b8:	681b      	ldr	r3, [r3, #0]
    83ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
    83be:	f640 4235 	movw	r2, #3125	; 0xc35
    83c2:	fb02 f203 	mul.w	r2, r2, r3
    83c6:	4b6f      	ldr	r3, [pc, #444]	; (8584 <bt_le_sync+0x51c>)
    83c8:	681b      	ldr	r3, [r3, #0]
    83ca:	4413      	add	r3, r2
    83cc:	4a69      	ldr	r2, [pc, #420]	; (8574 <bt_le_sync+0x50c>)
    83ce:	6413      	str	r3, [r2, #64]	; 0x40

	rx_flush:
		cc2400_strobe(SFSON);
    83d0:	2061      	movs	r0, #97	; 0x61
    83d2:	f003 f941 	bl	b658 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    83d6:	bf00      	nop
    83d8:	f003 f934 	bl	b644 <cc2400_status>
    83dc:	4603      	mov	r3, r0
    83de:	f003 0304 	and.w	r3, r3, #4
    83e2:	2b00      	cmp	r3, #0
    83e4:	d0f8      	beq.n	83d8 <bt_le_sync+0x370>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    83e6:	4a68      	ldr	r2, [pc, #416]	; (8588 <bt_le_sync+0x520>)
    83e8:	4b67      	ldr	r3, [pc, #412]	; (8588 <bt_le_sync+0x520>)
    83ea:	681b      	ldr	r3, [r3, #0]
    83ec:	f023 0301 	bic.w	r3, r3, #1
    83f0:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    83f2:	e003      	b.n	83fc <bt_le_sync+0x394>
			u8 tmp = (u8)DIO_SSP_DR;
    83f4:	4b65      	ldr	r3, [pc, #404]	; (858c <bt_le_sync+0x524>)
    83f6:	681b      	ldr	r3, [r3, #0]
    83f8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    83fc:	4b64      	ldr	r3, [pc, #400]	; (8590 <bt_le_sync+0x528>)
    83fe:	681b      	ldr	r3, [r3, #0]
    8400:	f003 0304 	and.w	r3, r3, #4
    8404:	2b00      	cmp	r3, #0
    8406:	d1f5      	bne.n	83f4 <bt_le_sync+0x38c>
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    8408:	4b5d      	ldr	r3, [pc, #372]	; (8580 <bt_le_sync+0x518>)
    840a:	681b      	ldr	r3, [r3, #0]
    840c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8410:	f640 4235 	movw	r2, #3125	; 0xc35
    8414:	fb02 f203 	mul.w	r2, r2, r3
    8418:	4b5a      	ldr	r3, [pc, #360]	; (8584 <bt_le_sync+0x51c>)
    841a:	681b      	ldr	r3, [r3, #0]
    841c:	4413      	add	r3, r2
    841e:	663b      	str	r3, [r7, #96]	; 0x60
		if (now < le.last_packet)
    8420:	4b54      	ldr	r3, [pc, #336]	; (8574 <bt_le_sync+0x50c>)
    8422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    8424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    8426:	429a      	cmp	r2, r3
    8428:	d905      	bls.n	8436 <bt_le_sync+0x3ce>
			now += 3276800000; // handle rollover
    842a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    842c:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    8430:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    8434:	663b      	str	r3, [r7, #96]	; 0x60
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    8436:	4b4f      	ldr	r3, [pc, #316]	; (8574 <bt_le_sync+0x50c>)
    8438:	7d1b      	ldrb	r3, [r3, #20]

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
		if  ( // timeout
    843a:	2b03      	cmp	r3, #3
    843c:	d003      	beq.n	8446 <bt_le_sync+0x3de>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    843e:	4b4d      	ldr	r3, [pc, #308]	; (8574 <bt_le_sync+0x50c>)
    8440:	7d1b      	ldrb	r3, [r3, #20]
    8442:	2b02      	cmp	r3, #2
    8444:	d106      	bne.n	8454 <bt_le_sync+0x3ec>
			&& (now - le.last_packet > 50000000))
    8446:	4b4b      	ldr	r3, [pc, #300]	; (8574 <bt_le_sync+0x50c>)
    8448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    844a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    844c:	1ad3      	subs	r3, r2, r3
    844e:	4a51      	ldr	r2, [pc, #324]	; (8594 <bt_le_sync+0x52c>)
    8450:	4293      	cmp	r3, r2
    8452:	d803      	bhi.n	845c <bt_le_sync+0x3f4>
			// jam finished
			|| (le_jam_count == 1)
    8454:	4b50      	ldr	r3, [pc, #320]	; (8598 <bt_le_sync+0x530>)
    8456:	681b      	ldr	r3, [r3, #0]
    8458:	2b01      	cmp	r3, #1
    845a:	d137      	bne.n	84cc <bt_le_sync+0x464>
			)
		{
			reset_le();
    845c:	f7ff fc2c 	bl	7cb8 <reset_le>
			le_jam_count = 0;
    8460:	4b4d      	ldr	r3, [pc, #308]	; (8598 <bt_le_sync+0x530>)
    8462:	2200      	movs	r2, #0
    8464:	601a      	str	r2, [r3, #0]
			TXLED_CLR;
    8466:	4b4d      	ldr	r3, [pc, #308]	; (859c <bt_le_sync+0x534>)
    8468:	f44f 7280 	mov.w	r2, #256	; 0x100
    846c:	601a      	str	r2, [r3, #0]

			if (jam_mode == JAM_ONCE) {
    846e:	4b4c      	ldr	r3, [pc, #304]	; (85a0 <bt_le_sync+0x538>)
    8470:	781b      	ldrb	r3, [r3, #0]
    8472:	b2db      	uxtb	r3, r3
    8474:	2b01      	cmp	r3, #1
    8476:	d106      	bne.n	8486 <bt_le_sync+0x41e>
				jam_mode = JAM_NONE;
    8478:	4b49      	ldr	r3, [pc, #292]	; (85a0 <bt_le_sync+0x538>)
    847a:	2200      	movs	r2, #0
    847c:	701a      	strb	r2, [r3, #0]
				requested_mode = MODE_IDLE;
    847e:	4b49      	ldr	r3, [pc, #292]	; (85a4 <bt_le_sync+0x53c>)
    8480:	2200      	movs	r2, #0
    8482:	701a      	strb	r2, [r3, #0]
				goto cleanup;
    8484:	e066      	b.n	8554 <bt_le_sync+0x4ec>
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    8486:	79fb      	ldrb	r3, [r7, #7]
    8488:	2b0a      	cmp	r3, #10
    848a:	d101      	bne.n	8490 <bt_le_sync+0x428>
				goto cleanup;
    848c:	bf00      	nop
    848e:	e061      	b.n	8554 <bt_le_sync+0x4ec>

			le.link_state = LINK_LISTENING;
    8490:	4b38      	ldr	r3, [pc, #224]	; (8574 <bt_le_sync+0x50c>)
    8492:	2201      	movs	r2, #1
    8494:	751a      	strb	r2, [r3, #20]

			cc2400_strobe(SRFOFF);
    8496:	2064      	movs	r0, #100	; 0x64
    8498:	f003 f8de 	bl	b658 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    849c:	bf00      	nop
    849e:	f003 f8d1 	bl	b644 <cc2400_status>
    84a2:	4603      	mov	r3, r0
    84a4:	f003 0304 	and.w	r3, r3, #4
    84a8:	2b00      	cmp	r3, #0
    84aa:	d1f8      	bne.n	849e <bt_le_sync+0x436>

			/* Retune */
			channel = saved_request != 0 ? saved_request : 2402;
    84ac:	4b3e      	ldr	r3, [pc, #248]	; (85a8 <bt_le_sync+0x540>)
    84ae:	881b      	ldrh	r3, [r3, #0]
    84b0:	b29b      	uxth	r3, r3
    84b2:	2b00      	cmp	r3, #0
    84b4:	d003      	beq.n	84be <bt_le_sync+0x456>
    84b6:	4b3c      	ldr	r3, [pc, #240]	; (85a8 <bt_le_sync+0x540>)
    84b8:	881b      	ldrh	r3, [r3, #0]
    84ba:	b29b      	uxth	r3, r3
    84bc:	e001      	b.n	84c2 <bt_le_sync+0x45a>
    84be:	f640 1362 	movw	r3, #2402	; 0x962
    84c2:	4a3a      	ldr	r2, [pc, #232]	; (85ac <bt_le_sync+0x544>)
    84c4:	8013      	strh	r3, [r2, #0]
			restart_jamming = 1;
    84c6:	4b3a      	ldr	r3, [pc, #232]	; (85b0 <bt_le_sync+0x548>)
    84c8:	2201      	movs	r2, #1
    84ca:	601a      	str	r2, [r3, #0]
		}

		cc2400_set(SYNCL, le.syncl);
    84cc:	4b29      	ldr	r3, [pc, #164]	; (8574 <bt_le_sync+0x50c>)
    84ce:	88db      	ldrh	r3, [r3, #6]
    84d0:	202c      	movs	r0, #44	; 0x2c
    84d2:	4619      	mov	r1, r3
    84d4:	f003 f80e 	bl	b4f4 <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    84d8:	4b26      	ldr	r3, [pc, #152]	; (8574 <bt_le_sync+0x50c>)
    84da:	889b      	ldrh	r3, [r3, #4]
    84dc:	202d      	movs	r0, #45	; 0x2d
    84de:	4619      	mov	r1, r3
    84e0:	f003 f808 	bl	b4f4 <cc2400_set>

		if (do_hop)
    84e4:	4b33      	ldr	r3, [pc, #204]	; (85b4 <bt_le_sync+0x54c>)
    84e6:	781b      	ldrb	r3, [r3, #0]
    84e8:	b2db      	uxtb	r3, r3
    84ea:	2b00      	cmp	r3, #0
    84ec:	d001      	beq.n	84f2 <bt_le_sync+0x48a>
			hop();
    84ee:	f7fd ff15 	bl	631c <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    84f2:	4b29      	ldr	r3, [pc, #164]	; (8598 <bt_le_sync+0x530>)
    84f4:	681b      	ldr	r3, [r3, #0]
    84f6:	2b00      	cmp	r3, #0
    84f8:	dd07      	ble.n	850a <bt_le_sync+0x4a2>
			le_jam();
    84fa:	f7fd fec5 	bl	6288 <le_jam>
			--le_jam_count;
    84fe:	4b26      	ldr	r3, [pc, #152]	; (8598 <bt_le_sync+0x530>)
    8500:	681b      	ldr	r3, [r3, #0]
    8502:	3b01      	subs	r3, #1
    8504:	4a24      	ldr	r2, [pc, #144]	; (8598 <bt_le_sync+0x530>)
    8506:	6013      	str	r3, [r2, #0]
    8508:	e017      	b.n	853a <bt_le_sync+0x4d2>
		} else {
			/* RX mode */
			dma_init_le();
    850a:	f7fd fa3d 	bl	5988 <dma_init_le>
			dio_ssp_start();
    850e:	f7fd fbb3 	bl	5c78 <dio_ssp_start>

			if (restart_jamming) {
    8512:	4b27      	ldr	r3, [pc, #156]	; (85b0 <bt_le_sync+0x548>)
    8514:	681b      	ldr	r3, [r3, #0]
    8516:	2b00      	cmp	r3, #0
    8518:	d00c      	beq.n	8534 <bt_le_sync+0x4cc>
				cc2400_rx_sync(rbit(le.access_address));
    851a:	4b16      	ldr	r3, [pc, #88]	; (8574 <bt_le_sync+0x50c>)
    851c:	681b      	ldr	r3, [r3, #0]
    851e:	4618      	mov	r0, r3
    8520:	f002 fe16 	bl	b150 <rbit>
    8524:	4603      	mov	r3, r0
    8526:	4618      	mov	r0, r3
    8528:	f7fd fcc0 	bl	5eac <cc2400_rx_sync>
				restart_jamming = 0;
    852c:	4b20      	ldr	r3, [pc, #128]	; (85b0 <bt_le_sync+0x548>)
    852e:	2200      	movs	r2, #0
    8530:	601a      	str	r2, [r3, #0]
    8532:	e002      	b.n	853a <bt_le_sync+0x4d2>
			} else {
				cc2400_strobe(SRX);
    8534:	2062      	movs	r0, #98	; 0x62
    8536:	f003 f88f 	bl	b658 <cc2400_strobe>
			}
		}

		rx_tc = 0;
    853a:	4b1f      	ldr	r3, [pc, #124]	; (85b8 <bt_le_sync+0x550>)
    853c:	2200      	movs	r2, #0
    853e:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    8540:	4b1e      	ldr	r3, [pc, #120]	; (85bc <bt_le_sync+0x554>)
    8542:	2200      	movs	r2, #0
    8544:	601a      	str	r2, [r3, #0]
	dma_init_le();
	dio_ssp_start();

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address

	while (requested_mode == active_mode) {
    8546:	4b17      	ldr	r3, [pc, #92]	; (85a4 <bt_le_sync+0x53c>)
    8548:	781b      	ldrb	r3, [r3, #0]
    854a:	b2db      	uxtb	r3, r3
    854c:	79fa      	ldrb	r2, [r7, #7]
    854e:	429a      	cmp	r2, r3
    8550:	f43f adb1 	beq.w	80b6 <bt_le_sync+0x4e>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    8554:	4b1a      	ldr	r3, [pc, #104]	; (85c0 <bt_le_sync+0x558>)
    8556:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    855a:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    855c:	f7fd fc20 	bl	5da0 <cc2400_idle>
	dio_ssp_stop();
    8560:	f7fd fbba 	bl	5cd8 <dio_ssp_stop>
	cs_trigger_disable();
    8564:	f7fc facc 	bl	4b00 <cs_trigger_disable>
}
    8568:	376c      	adds	r7, #108	; 0x6c
    856a:	46bd      	mov	sp, r7
    856c:	bd90      	pop	{r4, r7, pc}
    856e:	bf00      	nop
    8570:	1000109c 	.word	0x1000109c
    8574:	10000458 	.word	0x10000458
    8578:	2009c038 	.word	0x2009c038
    857c:	1000099c 	.word	0x1000099c
    8580:	10000bf4 	.word	0x10000bf4
    8584:	40004008 	.word	0x40004008
    8588:	40030024 	.word	0x40030024
    858c:	40030008 	.word	0x40030008
    8590:	4003000c 	.word	0x4003000c
    8594:	02faf080 	.word	0x02faf080
    8598:	10000994 	.word	0x10000994
    859c:	2009c03c 	.word	0x2009c03c
    85a0:	10000a40 	.word	0x10000a40
    85a4:	10000a3f 	.word	0x10000a3f
    85a8:	10000a46 	.word	0x10000a46
    85ac:	1000049c 	.word	0x1000049c
    85b0:	10000a50 	.word	0x10000a50
    85b4:	1000097d 	.word	0x1000097d
    85b8:	10000b0c 	.word	0x10000b0c
    85bc:	100010d0 	.word	0x100010d0
    85c0:	e000e180 	.word	0xe000e180

000085c4 <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    85c4:	b580      	push	{r7, lr}
    85c6:	b08c      	sub	sp, #48	; 0x30
    85c8:	af00      	add	r7, sp, #0
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    85ca:	4b6c      	ldr	r3, [pc, #432]	; (877c <cb_follow_le+0x1b8>)
    85cc:	881b      	ldrh	r3, [r3, #0]
    85ce:	b29b      	uxth	r3, r3
    85d0:	b2db      	uxtb	r3, r3
    85d2:	3b62      	subs	r3, #98	; 0x62
    85d4:	b2db      	uxtb	r3, r3
    85d6:	4618      	mov	r0, r3
    85d8:	f001 fbe8 	bl	9dac <btle_channel_index>
    85dc:	4603      	mov	r3, r0
    85de:	461a      	mov	r2, r3
    85e0:	4b67      	ldr	r3, [pc, #412]	; (8780 <cb_follow_le+0x1bc>)
    85e2:	5c9b      	ldrb	r3, [r3, r2]
    85e4:	623b      	str	r3, [r7, #32]

	u32 access_address = 0;
    85e6:	2300      	movs	r3, #0
    85e8:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < 31; ++i) {
    85ea:	2300      	movs	r3, #0
    85ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    85ee:	e00e      	b.n	860e <cb_follow_le+0x4a>
		access_address >>= 1;
    85f0:	69fb      	ldr	r3, [r7, #28]
    85f2:	085b      	lsrs	r3, r3, #1
    85f4:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    85f6:	4a63      	ldr	r2, [pc, #396]	; (8784 <cb_follow_le+0x1c0>)
    85f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    85fa:	4413      	add	r3, r2
    85fc:	781b      	ldrb	r3, [r3, #0]
    85fe:	07db      	lsls	r3, r3, #31
    8600:	461a      	mov	r2, r3
    8602:	69fb      	ldr	r3, [r7, #28]
    8604:	4313      	orrs	r3, r2
    8606:	61fb      	str	r3, [r7, #28]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    8608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    860a:	3301      	adds	r3, #1
    860c:	62fb      	str	r3, [r7, #44]	; 0x2c
    860e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8610:	2b1e      	cmp	r3, #30
    8612:	dded      	ble.n	85f0 <cb_follow_le+0x2c>
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    8614:	231f      	movs	r3, #31
    8616:	62fb      	str	r3, [r7, #44]	; 0x2c
    8618:	e0a6      	b.n	8768 <cb_follow_le+0x1a4>
		access_address >>= 1;
    861a:	69fb      	ldr	r3, [r7, #28]
    861c:	085b      	lsrs	r3, r3, #1
    861e:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    8620:	4a58      	ldr	r2, [pc, #352]	; (8784 <cb_follow_le+0x1c0>)
    8622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8624:	4413      	add	r3, r2
    8626:	781b      	ldrb	r3, [r3, #0]
    8628:	07db      	lsls	r3, r3, #31
    862a:	461a      	mov	r2, r3
    862c:	69fb      	ldr	r3, [r7, #28]
    862e:	4313      	orrs	r3, r2
    8630:	61fb      	str	r3, [r7, #28]
		if (access_address == le.access_address) {
    8632:	4b55      	ldr	r3, [pc, #340]	; (8788 <cb_follow_le+0x1c4>)
    8634:	681a      	ldr	r2, [r3, #0]
    8636:	69fb      	ldr	r3, [r7, #28]
    8638:	429a      	cmp	r2, r3
    863a:	f040 8092 	bne.w	8762 <cb_follow_le+0x19e>
			for (j = 0; j < 46; ++j) {
    863e:	2300      	movs	r3, #0
    8640:	62bb      	str	r3, [r7, #40]	; 0x28
    8642:	e048      	b.n	86d6 <cb_follow_le+0x112>
				u8 byte = 0;
    8644:	2300      	movs	r3, #0
    8646:	76fb      	strb	r3, [r7, #27]
				for (k = 0; k < 8; k++) {
    8648:	2300      	movs	r3, #0
    864a:	627b      	str	r3, [r7, #36]	; 0x24
    864c:	e037      	b.n	86be <cb_follow_le+0xfa>
					int offset = k + (j * 8) + i - 31;
    864e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8650:	00da      	lsls	r2, r3, #3
    8652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8654:	441a      	add	r2, r3
    8656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8658:	4413      	add	r3, r2
    865a:	3b1f      	subs	r3, #31
    865c:	613b      	str	r3, [r7, #16]
					if (offset >= DMA_SIZE*8*2) break;
    865e:	693b      	ldr	r3, [r7, #16]
    8660:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    8664:	db00      	blt.n	8668 <cb_follow_le+0xa4>
    8666:	e02d      	b.n	86c4 <cb_follow_le+0x100>
					int bit = unpacked[offset];
    8668:	4a46      	ldr	r2, [pc, #280]	; (8784 <cb_follow_le+0x1c0>)
    866a:	693b      	ldr	r3, [r7, #16]
    866c:	4413      	add	r3, r2
    866e:	781b      	ldrb	r3, [r3, #0]
    8670:	617b      	str	r3, [r7, #20]
					if (j >= 4) { // unwhiten data bytes
    8672:	6abb      	ldr	r3, [r7, #40]	; 0x28
    8674:	2b03      	cmp	r3, #3
    8676:	dd16      	ble.n	86a6 <cb_follow_le+0xe2>
						bit ^= whitening[idx];
    8678:	4a44      	ldr	r2, [pc, #272]	; (878c <cb_follow_le+0x1c8>)
    867a:	6a3b      	ldr	r3, [r7, #32]
    867c:	4413      	add	r3, r2
    867e:	781b      	ldrb	r3, [r3, #0]
    8680:	461a      	mov	r2, r3
    8682:	697b      	ldr	r3, [r7, #20]
    8684:	4053      	eors	r3, r2
    8686:	617b      	str	r3, [r7, #20]
						idx = (idx + 1) % sizeof(whitening);
    8688:	6a3b      	ldr	r3, [r7, #32]
    868a:	3301      	adds	r3, #1
    868c:	4619      	mov	r1, r3
    868e:	4b40      	ldr	r3, [pc, #256]	; (8790 <cb_follow_le+0x1cc>)
    8690:	fba1 2303 	umull	r2, r3, r1, r3
    8694:	1ac8      	subs	r0, r1, r3
    8696:	0840      	lsrs	r0, r0, #1
    8698:	4403      	add	r3, r0
    869a:	099a      	lsrs	r2, r3, #6
    869c:	4613      	mov	r3, r2
    869e:	01db      	lsls	r3, r3, #7
    86a0:	1a9b      	subs	r3, r3, r2
    86a2:	1aca      	subs	r2, r1, r3
    86a4:	623a      	str	r2, [r7, #32]
					}
					byte |= bit << k;
    86a6:	697a      	ldr	r2, [r7, #20]
    86a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    86aa:	fa02 f303 	lsl.w	r3, r2, r3
    86ae:	b2da      	uxtb	r2, r3
    86b0:	7efb      	ldrb	r3, [r7, #27]
    86b2:	4313      	orrs	r3, r2
    86b4:	b2db      	uxtb	r3, r3
    86b6:	76fb      	strb	r3, [r7, #27]
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    86b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    86ba:	3301      	adds	r3, #1
    86bc:	627b      	str	r3, [r7, #36]	; 0x24
    86be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    86c0:	2b07      	cmp	r3, #7
    86c2:	ddc4      	ble.n	864e <cb_follow_le+0x8a>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    86c4:	4b33      	ldr	r3, [pc, #204]	; (8794 <cb_follow_le+0x1d0>)
    86c6:	681a      	ldr	r2, [r3, #0]
    86c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    86ca:	4413      	add	r3, r2
    86cc:	7efa      	ldrb	r2, [r7, #27]
    86ce:	701a      	strb	r2, [r3, #0]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    86d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    86d2:	3301      	adds	r3, #1
    86d4:	62bb      	str	r3, [r7, #40]	; 0x28
    86d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    86d8:	2b2d      	cmp	r3, #45	; 0x2d
    86da:	ddb3      	ble.n	8644 <cb_follow_le+0x80>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    86dc:	4b2a      	ldr	r3, [pc, #168]	; (8788 <cb_follow_le+0x1c4>)
    86de:	691b      	ldr	r3, [r3, #16]
    86e0:	2b00      	cmp	r3, #0
    86e2:	d02e      	beq.n	8742 <cb_follow_le+0x17e>
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    86e4:	4b2b      	ldr	r3, [pc, #172]	; (8794 <cb_follow_le+0x1d0>)
    86e6:	681b      	ldr	r3, [r3, #0]
    86e8:	3305      	adds	r3, #5
    86ea:	781b      	ldrb	r3, [r3, #0]
    86ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    86f0:	3302      	adds	r3, #2
    86f2:	60fb      	str	r3, [r7, #12]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
    86f4:	4b24      	ldr	r3, [pc, #144]	; (8788 <cb_follow_le+0x1c4>)
    86f6:	68da      	ldr	r2, [r3, #12]
    86f8:	4b26      	ldr	r3, [pc, #152]	; (8794 <cb_follow_le+0x1d0>)
    86fa:	681b      	ldr	r3, [r3, #0]
    86fc:	3304      	adds	r3, #4
    86fe:	4610      	mov	r0, r2
    8700:	4619      	mov	r1, r3
    8702:	68fa      	ldr	r2, [r7, #12]
    8704:	f001 fc56 	bl	9fb4 <btle_crcgen_lut>
    8708:	60b8      	str	r0, [r7, #8]
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    870a:	4b22      	ldr	r3, [pc, #136]	; (8794 <cb_follow_le+0x1d0>)
    870c:	681a      	ldr	r2, [r3, #0]
    870e:	68fb      	ldr	r3, [r7, #12]
    8710:	3306      	adds	r3, #6
    8712:	4413      	add	r3, r2
    8714:	781b      	ldrb	r3, [r3, #0]
    8716:	041a      	lsls	r2, r3, #16
							 | (idle_rxbuf[4+len+1] << 8)
    8718:	4b1e      	ldr	r3, [pc, #120]	; (8794 <cb_follow_le+0x1d0>)
    871a:	6819      	ldr	r1, [r3, #0]
    871c:	68fb      	ldr	r3, [r7, #12]
    871e:	3305      	adds	r3, #5
    8720:	440b      	add	r3, r1
    8722:	781b      	ldrb	r3, [r3, #0]
    8724:	021b      	lsls	r3, r3, #8
    8726:	4313      	orrs	r3, r2
							 |  idle_rxbuf[4+len+0];
    8728:	4a1a      	ldr	r2, [pc, #104]	; (8794 <cb_follow_le+0x1d0>)
    872a:	6812      	ldr	r2, [r2, #0]
    872c:	68f9      	ldr	r1, [r7, #12]
    872e:	3104      	adds	r1, #4
    8730:	440a      	add	r2, r1
    8732:	7812      	ldrb	r2, [r2, #0]
    8734:	4313      	orrs	r3, r2

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    8736:	607b      	str	r3, [r7, #4]
							 | (idle_rxbuf[4+len+1] << 8)
							 |  idle_rxbuf[4+len+0];
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    8738:	68ba      	ldr	r2, [r7, #8]
    873a:	687b      	ldr	r3, [r7, #4]
    873c:	429a      	cmp	r2, r3
    873e:	d000      	beq.n	8742 <cb_follow_le+0x17e>
					break;
    8740:	e017      	b.n	8772 <cb_follow_le+0x1ae>
			}

			// send to PC
			enqueue(LE_PACKET, idle_rxbuf);
    8742:	4b14      	ldr	r3, [pc, #80]	; (8794 <cb_follow_le+0x1d0>)
    8744:	681b      	ldr	r3, [r3, #0]
    8746:	2001      	movs	r0, #1
    8748:	4619      	mov	r1, r3
    874a:	f7fb febd 	bl	44c8 <enqueue>
			RXLED_SET;
    874e:	4b12      	ldr	r3, [pc, #72]	; (8798 <cb_follow_le+0x1d4>)
    8750:	2210      	movs	r2, #16
    8752:	601a      	str	r2, [r3, #0]

			packet_cb(idle_rxbuf);
    8754:	4b11      	ldr	r3, [pc, #68]	; (879c <cb_follow_le+0x1d8>)
    8756:	681b      	ldr	r3, [r3, #0]
    8758:	4a0e      	ldr	r2, [pc, #56]	; (8794 <cb_follow_le+0x1d0>)
    875a:	6812      	ldr	r2, [r2, #0]
    875c:	4610      	mov	r0, r2
    875e:	4798      	blx	r3

			break;
    8760:	e007      	b.n	8772 <cb_follow_le+0x1ae>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    8762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8764:	3301      	adds	r3, #1
    8766:	62fb      	str	r3, [r7, #44]	; 0x2c
    8768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    876a:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    876e:	f6ff af54 	blt.w	861a <cb_follow_le+0x56>

			break;
		}
	}

	return 1;
    8772:	2301      	movs	r3, #1
}
    8774:	4618      	mov	r0, r3
    8776:	3730      	adds	r7, #48	; 0x30
    8778:	46bd      	mov	sp, r7
    877a:	bd80      	pop	{r7, pc}
    877c:	1000049c 	.word	0x1000049c
    8780:	0000d28c 	.word	0x0000d28c
    8784:	10000d18 	.word	0x10000d18
    8788:	10000458 	.word	0x10000458
    878c:	0000d20c 	.word	0x0000d20c
    8790:	02040811 	.word	0x02040811
    8794:	10000454 	.word	0x10000454
    8798:	2009c038 	.word	0x2009c038
    879c:	1000099c 	.word	0x1000099c

000087a0 <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    87a0:	b580      	push	{r7, lr}
    87a2:	b08a      	sub	sp, #40	; 0x28
    87a4:	af00      	add	r7, sp, #0
    87a6:	6078      	str	r0, [r7, #4]
	int i;
	u32 aa = 0;
    87a8:	2300      	movs	r3, #0
    87aa:	623b      	str	r3, [r7, #32]
#define ADV_ADDRESS_IDX 0
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
    87ac:	687b      	ldr	r3, [r7, #4]
    87ae:	61fb      	str	r3, [r7, #28]
	u8 header = packet[HEADER_IDX];
    87b0:	687b      	ldr	r3, [r7, #4]
    87b2:	791b      	ldrb	r3, [r3, #4]
    87b4:	76fb      	strb	r3, [r7, #27]
	u8 *data_len = &packet[DATA_LEN_IDX];
    87b6:	687b      	ldr	r3, [r7, #4]
    87b8:	3305      	adds	r3, #5
    87ba:	617b      	str	r3, [r7, #20]
	u8 *data = &packet[DATA_START_IDX];
    87bc:	687b      	ldr	r3, [r7, #4]
    87be:	3306      	adds	r3, #6
    87c0:	613b      	str	r3, [r7, #16]
	u8 *crc = &packet[DATA_START_IDX + *data_len];
    87c2:	697b      	ldr	r3, [r7, #20]
    87c4:	781b      	ldrb	r3, [r3, #0]
    87c6:	3306      	adds	r3, #6
    87c8:	461a      	mov	r2, r3
    87ca:	687b      	ldr	r3, [r7, #4]
    87cc:	4413      	add	r3, r2
    87ce:	60fb      	str	r3, [r7, #12]

	if (le.link_state == LINK_CONN_PENDING) {
    87d0:	4b8b      	ldr	r3, [pc, #556]	; (8a00 <connection_follow_cb+0x260>)
    87d2:	7d1b      	ldrb	r3, [r3, #20]
    87d4:	2b02      	cmp	r3, #2
    87d6:	d11c      	bne.n	8812 <connection_follow_cb+0x72>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    87d8:	4b89      	ldr	r3, [pc, #548]	; (8a00 <connection_follow_cb+0x260>)
    87da:	2203      	movs	r2, #3
    87dc:	751a      	strb	r2, [r3, #20]
		le.conn_epoch = clkn;
    87de:	4b89      	ldr	r3, [pc, #548]	; (8a04 <connection_follow_cb+0x264>)
    87e0:	681b      	ldr	r3, [r3, #0]
    87e2:	4a87      	ldr	r2, [pc, #540]	; (8a00 <connection_follow_cb+0x260>)
    87e4:	6193      	str	r3, [r2, #24]
		le.interval_timer = le.conn_interval - 1;
    87e6:	4b86      	ldr	r3, [pc, #536]	; (8a00 <connection_follow_cb+0x260>)
    87e8:	8bdb      	ldrh	r3, [r3, #30]
    87ea:	3b01      	subs	r3, #1
    87ec:	b29a      	uxth	r2, r3
    87ee:	4b84      	ldr	r3, [pc, #528]	; (8a00 <connection_follow_cb+0x260>)
    87f0:	839a      	strh	r2, [r3, #28]
		le.conn_count = 0;
    87f2:	4b83      	ldr	r3, [pc, #524]	; (8a00 <connection_follow_cb+0x260>)
    87f4:	2200      	movs	r2, #0
    87f6:	841a      	strh	r2, [r3, #32]
		le.update_pending = 0;
    87f8:	4b81      	ldr	r3, [pc, #516]	; (8a00 <connection_follow_cb+0x260>)
    87fa:	2200      	movs	r2, #0
    87fc:	629a      	str	r2, [r3, #40]	; 0x28

		// hue hue hue
		if (jam_mode != JAM_NONE)
    87fe:	4b82      	ldr	r3, [pc, #520]	; (8a08 <connection_follow_cb+0x268>)
    8800:	781b      	ldrb	r3, [r3, #0]
    8802:	b2db      	uxtb	r3, r3
    8804:	2b00      	cmp	r3, #0
    8806:	f000 80f7 	beq.w	89f8 <connection_follow_cb+0x258>
			le_jam_count = JAM_COUNT_DEFAULT;
    880a:	4b80      	ldr	r3, [pc, #512]	; (8a0c <connection_follow_cb+0x26c>)
    880c:	2228      	movs	r2, #40	; 0x28
    880e:	601a      	str	r2, [r3, #0]
    8810:	e0f2      	b.n	89f8 <connection_follow_cb+0x258>

	} else if (le.link_state == LINK_CONNECTED) {
    8812:	4b7b      	ldr	r3, [pc, #492]	; (8a00 <connection_follow_cb+0x260>)
    8814:	7d1b      	ldrb	r3, [r3, #20]
    8816:	2b03      	cmp	r3, #3
    8818:	d16f      	bne.n	88fa <connection_follow_cb+0x15a>
		u8 llid =  header & 0x03;
    881a:	7efb      	ldrb	r3, [r7, #27]
    881c:	f003 0303 	and.w	r3, r3, #3
    8820:	72fb      	strb	r3, [r7, #11]

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    8822:	4b77      	ldr	r3, [pc, #476]	; (8a00 <connection_follow_cb+0x260>)
    8824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    8826:	2b00      	cmp	r3, #0
    8828:	d021      	beq.n	886e <connection_follow_cb+0xce>
    882a:	4b75      	ldr	r3, [pc, #468]	; (8a00 <connection_follow_cb+0x260>)
    882c:	8c1b      	ldrh	r3, [r3, #32]
    882e:	b29a      	uxth	r2, r3
    8830:	4b73      	ldr	r3, [pc, #460]	; (8a00 <connection_follow_cb+0x260>)
    8832:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    8834:	429a      	cmp	r2, r3
    8836:	d11a      	bne.n	886e <connection_follow_cb+0xce>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    8838:	4b72      	ldr	r3, [pc, #456]	; (8a04 <connection_follow_cb+0x264>)
    883a:	681b      	ldr	r3, [r3, #0]
    883c:	4a70      	ldr	r2, [pc, #448]	; (8a00 <connection_follow_cb+0x260>)
    883e:	6193      	str	r3, [r2, #24]
			le.conn_interval = le.interval_update;
    8840:	4b6f      	ldr	r3, [pc, #444]	; (8a00 <connection_follow_cb+0x260>)
    8842:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    8844:	4b6e      	ldr	r3, [pc, #440]	; (8a00 <connection_follow_cb+0x260>)
    8846:	83da      	strh	r2, [r3, #30]
			le.interval_timer = le.interval_update - 1;
    8848:	4b6d      	ldr	r3, [pc, #436]	; (8a00 <connection_follow_cb+0x260>)
    884a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    884c:	3b01      	subs	r3, #1
    884e:	b29a      	uxth	r2, r3
    8850:	4b6b      	ldr	r3, [pc, #428]	; (8a00 <connection_follow_cb+0x260>)
    8852:	839a      	strh	r2, [r3, #28]
			le.win_size = le.win_size_update;
    8854:	4b6a      	ldr	r3, [pc, #424]	; (8a00 <connection_follow_cb+0x260>)
    8856:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    885a:	4b69      	ldr	r3, [pc, #420]	; (8a00 <connection_follow_cb+0x260>)
    885c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			le.win_offset = le.win_offset_update;
    8860:	4b67      	ldr	r3, [pc, #412]	; (8a00 <connection_follow_cb+0x260>)
    8862:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    8864:	4b66      	ldr	r3, [pc, #408]	; (8a00 <connection_follow_cb+0x260>)
    8866:	849a      	strh	r2, [r3, #36]	; 0x24
			le.update_pending = 0;
    8868:	4b65      	ldr	r3, [pc, #404]	; (8a00 <connection_follow_cb+0x260>)
    886a:	2200      	movs	r2, #0
    886c:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if (llid == 0x03 && data[0] == 0x00) {
    886e:	7afb      	ldrb	r3, [r7, #11]
    8870:	2b03      	cmp	r3, #3
    8872:	d141      	bne.n	88f8 <connection_follow_cb+0x158>
    8874:	693b      	ldr	r3, [r7, #16]
    8876:	781b      	ldrb	r3, [r3, #0]
    8878:	2b00      	cmp	r3, #0
    887a:	d13d      	bne.n	88f8 <connection_follow_cb+0x158>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    887c:	687b      	ldr	r3, [r7, #4]
    887e:	79da      	ldrb	r2, [r3, #7]
    8880:	4b5f      	ldr	r3, [pc, #380]	; (8a00 <connection_follow_cb+0x260>)
    8882:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    8886:	687b      	ldr	r3, [r7, #4]
    8888:	3308      	adds	r3, #8
    888a:	781b      	ldrb	r3, [r3, #0]
    888c:	b29a      	uxth	r2, r3
    888e:	687b      	ldr	r3, [r7, #4]
    8890:	3309      	adds	r3, #9
    8892:	781b      	ldrb	r3, [r3, #0]
    8894:	b29b      	uxth	r3, r3
    8896:	021b      	lsls	r3, r3, #8
    8898:	b29b      	uxth	r3, r3
    889a:	4413      	add	r3, r2
    889c:	b29a      	uxth	r2, r3
    889e:	4b58      	ldr	r3, [pc, #352]	; (8a00 <connection_follow_cb+0x260>)
    88a0:	865a      	strh	r2, [r3, #50]	; 0x32
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    88a2:	687b      	ldr	r3, [r7, #4]
    88a4:	330a      	adds	r3, #10
    88a6:	781b      	ldrb	r3, [r3, #0]
    88a8:	b29a      	uxth	r2, r3
    88aa:	687b      	ldr	r3, [r7, #4]
    88ac:	330b      	adds	r3, #11
    88ae:	781b      	ldrb	r3, [r3, #0]
    88b0:	b29b      	uxth	r3, r3
    88b2:	021b      	lsls	r3, r3, #8
    88b4:	b29b      	uxth	r3, r3
    88b6:	4413      	add	r3, r2
    88b8:	b29a      	uxth	r2, r3
    88ba:	4b51      	ldr	r3, [pc, #324]	; (8a00 <connection_follow_cb+0x260>)
    88bc:	85da      	strh	r2, [r3, #46]	; 0x2e
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    88be:	687b      	ldr	r3, [r7, #4]
    88c0:	3310      	adds	r3, #16
    88c2:	781b      	ldrb	r3, [r3, #0]
    88c4:	b29a      	uxth	r2, r3
    88c6:	687b      	ldr	r3, [r7, #4]
    88c8:	3311      	adds	r3, #17
    88ca:	781b      	ldrb	r3, [r3, #0]
    88cc:	b29b      	uxth	r3, r3
    88ce:	021b      	lsls	r3, r3, #8
    88d0:	b29b      	uxth	r3, r3
    88d2:	4413      	add	r3, r2
    88d4:	b29a      	uxth	r2, r3
    88d6:	4b4a      	ldr	r3, [pc, #296]	; (8a00 <connection_follow_cb+0x260>)
    88d8:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (le.update_instant - le.conn_count < 32767)
    88da:	4b49      	ldr	r3, [pc, #292]	; (8a00 <connection_follow_cb+0x260>)
    88dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    88de:	461a      	mov	r2, r3
    88e0:	4b47      	ldr	r3, [pc, #284]	; (8a00 <connection_follow_cb+0x260>)
    88e2:	8c1b      	ldrh	r3, [r3, #32]
    88e4:	b29b      	uxth	r3, r3
    88e6:	1ad3      	subs	r3, r2, r3
    88e8:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    88ec:	4293      	cmp	r3, r2
    88ee:	dc03      	bgt.n	88f8 <connection_follow_cb+0x158>
				le.update_pending = 1;
    88f0:	4b43      	ldr	r3, [pc, #268]	; (8a00 <connection_follow_cb+0x260>)
    88f2:	2201      	movs	r2, #1
    88f4:	629a      	str	r2, [r3, #40]	; 0x28
    88f6:	e07f      	b.n	89f8 <connection_follow_cb+0x258>
    88f8:	e07e      	b.n	89f8 <connection_follow_cb+0x258>
		}

	} else if (le.link_state == LINK_LISTENING) {
    88fa:	4b41      	ldr	r3, [pc, #260]	; (8a00 <connection_follow_cb+0x260>)
    88fc:	7d1b      	ldrb	r3, [r3, #20]
    88fe:	2b01      	cmp	r3, #1
    8900:	d17a      	bne.n	89f8 <connection_follow_cb+0x258>
		u8 pkt_type = packet[4] & 0x0F;
    8902:	687b      	ldr	r3, [r7, #4]
    8904:	3304      	adds	r3, #4
    8906:	781b      	ldrb	r3, [r3, #0]
    8908:	f003 030f 	and.w	r3, r3, #15
    890c:	72bb      	strb	r3, [r7, #10]
		if (pkt_type == 0x05) {
    890e:	7abb      	ldrb	r3, [r7, #10]
    8910:	2b05      	cmp	r3, #5
    8912:	d171      	bne.n	89f8 <connection_follow_cb+0x258>
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    8914:	4b3a      	ldr	r3, [pc, #232]	; (8a00 <connection_follow_cb+0x260>)
    8916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8918:	2b00      	cmp	r3, #0
    891a:	d014      	beq.n	8946 <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    891c:	687b      	ldr	r3, [r7, #4]
    891e:	3306      	adds	r3, #6
    8920:	483b      	ldr	r0, [pc, #236]	; (8a10 <connection_follow_cb+0x270>)
    8922:	4619      	mov	r1, r3
    8924:	2206      	movs	r2, #6
    8926:	f004 fb77 	bl	d018 <memcmp>
    892a:	4603      	mov	r3, r0
	} else if (le.link_state == LINK_LISTENING) {
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    892c:	2b00      	cmp	r3, #0
    892e:	d00a      	beq.n	8946 <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    8930:	687b      	ldr	r3, [r7, #4]
    8932:	330c      	adds	r3, #12
    8934:	4836      	ldr	r0, [pc, #216]	; (8a10 <connection_follow_cb+0x270>)
    8936:	4619      	mov	r1, r3
    8938:	2206      	movs	r2, #6
    893a:	f004 fb6d 	bl	d018 <memcmp>
    893e:	4603      	mov	r3, r0
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    8940:	2b00      	cmp	r3, #0
    8942:	d000      	beq.n	8946 <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
    8944:	e058      	b.n	89f8 <connection_follow_cb+0x258>
			}

			le.link_state = LINK_CONN_PENDING;
    8946:	4b2e      	ldr	r3, [pc, #184]	; (8a00 <connection_follow_cb+0x260>)
    8948:	2202      	movs	r2, #2
    894a:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    894c:	4b2c      	ldr	r3, [pc, #176]	; (8a00 <connection_follow_cb+0x260>)
    894e:	2200      	movs	r2, #0
    8950:	611a      	str	r2, [r3, #16]

			for (i = 0; i < 4; ++i)
    8952:	2300      	movs	r3, #0
    8954:	627b      	str	r3, [r7, #36]	; 0x24
    8956:	e011      	b.n	897c <connection_follow_cb+0x1dc>
				aa |= packet[18+i] << (i*8);
    8958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    895a:	3312      	adds	r3, #18
    895c:	461a      	mov	r2, r3
    895e:	687b      	ldr	r3, [r7, #4]
    8960:	4413      	add	r3, r2
    8962:	781b      	ldrb	r3, [r3, #0]
    8964:	461a      	mov	r2, r3
    8966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8968:	00db      	lsls	r3, r3, #3
    896a:	fa02 f303 	lsl.w	r3, r2, r3
    896e:	461a      	mov	r2, r3
    8970:	6a3b      	ldr	r3, [r7, #32]
    8972:	4313      	orrs	r3, r2
    8974:	623b      	str	r3, [r7, #32]
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    8976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8978:	3301      	adds	r3, #1
    897a:	627b      	str	r3, [r7, #36]	; 0x24
    897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    897e:	2b03      	cmp	r3, #3
    8980:	ddea      	ble.n	8958 <connection_follow_cb+0x1b8>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    8982:	6a38      	ldr	r0, [r7, #32]
    8984:	f7ff f97e 	bl	7c84 <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    8988:	687b      	ldr	r3, [r7, #4]
    898a:	3318      	adds	r3, #24
    898c:	781b      	ldrb	r3, [r3, #0]
    898e:	041a      	lsls	r2, r3, #16
						| (packet[CRC_INIT+1] << 8)
    8990:	687b      	ldr	r3, [r7, #4]
    8992:	3317      	adds	r3, #23
    8994:	781b      	ldrb	r3, [r3, #0]
    8996:	021b      	lsls	r3, r3, #8
    8998:	4313      	orrs	r3, r2
						|  packet[CRC_INIT+0];
    899a:	687a      	ldr	r2, [r7, #4]
    899c:	3216      	adds	r2, #22
    899e:	7812      	ldrb	r2, [r2, #0]
    89a0:	4313      	orrs	r3, r2
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    89a2:	461a      	mov	r2, r3
    89a4:	4b16      	ldr	r3, [pc, #88]	; (8a00 <connection_follow_cb+0x260>)
    89a6:	609a      	str	r2, [r3, #8]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    89a8:	4b15      	ldr	r3, [pc, #84]	; (8a00 <connection_follow_cb+0x260>)
    89aa:	689b      	ldr	r3, [r3, #8]
    89ac:	4618      	mov	r0, r3
    89ae:	f002 fbcf 	bl	b150 <rbit>
    89b2:	4602      	mov	r2, r0
    89b4:	4b12      	ldr	r3, [pc, #72]	; (8a00 <connection_follow_cb+0x260>)
    89b6:	60da      	str	r2, [r3, #12]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    89b8:	687b      	ldr	r3, [r7, #4]
    89ba:	7e5a      	ldrb	r2, [r3, #25]
    89bc:	4b10      	ldr	r3, [pc, #64]	; (8a00 <connection_follow_cb+0x260>)
    89be:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    89c2:	687b      	ldr	r3, [r7, #4]
    89c4:	331a      	adds	r3, #26
    89c6:	781b      	ldrb	r3, [r3, #0]
    89c8:	b29a      	uxth	r2, r3
    89ca:	4b0d      	ldr	r3, [pc, #52]	; (8a00 <connection_follow_cb+0x260>)
    89cc:	849a      	strh	r2, [r3, #36]	; 0x24

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = packet[CONN_INTERVAL];
    89ce:	687b      	ldr	r3, [r7, #4]
    89d0:	331c      	adds	r3, #28
    89d2:	781b      	ldrb	r3, [r3, #0]
    89d4:	b29a      	uxth	r2, r3
    89d6:	4b0a      	ldr	r3, [pc, #40]	; (8a00 <connection_follow_cb+0x260>)
    89d8:	83da      	strh	r2, [r3, #30]

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    89da:	687b      	ldr	r3, [r7, #4]
    89dc:	3327      	adds	r3, #39	; 0x27
    89de:	781b      	ldrb	r3, [r3, #0]
    89e0:	f003 031f 	and.w	r3, r3, #31
    89e4:	b2da      	uxtb	r2, r3
    89e6:	4b06      	ldr	r3, [pc, #24]	; (8a00 <connection_follow_cb+0x260>)
    89e8:	759a      	strb	r2, [r3, #22]
			le.channel_idx = le.channel_increment;
    89ea:	4b05      	ldr	r3, [pc, #20]	; (8a00 <connection_follow_cb+0x260>)
    89ec:	7d9a      	ldrb	r2, [r3, #22]
    89ee:	4b04      	ldr	r3, [pc, #16]	; (8a00 <connection_follow_cb+0x260>)
    89f0:	755a      	strb	r2, [r3, #21]

			// Hop to the initial channel immediately
			do_hop = 1;
    89f2:	4b08      	ldr	r3, [pc, #32]	; (8a14 <connection_follow_cb+0x274>)
    89f4:	2201      	movs	r2, #1
    89f6:	701a      	strb	r2, [r3, #0]
		}
	}
}
    89f8:	3728      	adds	r7, #40	; 0x28
    89fa:	46bd      	mov	sp, r7
    89fc:	bd80      	pop	{r7, pc}
    89fe:	bf00      	nop
    8a00:	10000458 	.word	0x10000458
    8a04:	10000bf4 	.word	0x10000bf4
    8a08:	10000a40 	.word	0x10000a40
    8a0c:	10000994 	.word	0x10000994
    8a10:	1000048c 	.word	0x1000048c
    8a14:	1000097d 	.word	0x1000097d

00008a18 <bt_follow_le>:

void bt_follow_le() {
    8a18:	b580      	push	{r7, lr}
    8a1a:	af00      	add	r7, sp, #0
	reset_le();
    8a1c:	f7ff f94c 	bl	7cb8 <reset_le>
	packet_cb = connection_follow_cb;
    8a20:	4b04      	ldr	r3, [pc, #16]	; (8a34 <bt_follow_le+0x1c>)
    8a22:	4a05      	ldr	r2, [pc, #20]	; (8a38 <bt_follow_le+0x20>)
    8a24:	601a      	str	r2, [r3, #0]
	bt_le_sync(MODE_BT_FOLLOW_LE);
    8a26:	2009      	movs	r0, #9
    8a28:	f7ff fb1e 	bl	8068 <bt_le_sync>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    8a2c:	4b03      	ldr	r3, [pc, #12]	; (8a3c <bt_follow_le+0x24>)
    8a2e:	2200      	movs	r2, #0
    8a30:	701a      	strb	r2, [r3, #0]
}
    8a32:	bd80      	pop	{r7, pc}
    8a34:	1000099c 	.word	0x1000099c
    8a38:	000087a1 	.word	0x000087a1
    8a3c:	10000a3e 	.word	0x10000a3e

00008a40 <le_promisc_state>:

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    8a40:	b580      	push	{r7, lr}
    8a42:	b092      	sub	sp, #72	; 0x48
    8a44:	af00      	add	r7, sp, #0
    8a46:	4603      	mov	r3, r0
    8a48:	60b9      	str	r1, [r7, #8]
    8a4a:	607a      	str	r2, [r7, #4]
    8a4c:	73fb      	strb	r3, [r7, #15]
	u8 buf[50] = { 0, };
    8a4e:	f107 0314 	add.w	r3, r7, #20
    8a52:	2200      	movs	r2, #0
    8a54:	601a      	str	r2, [r3, #0]
    8a56:	3304      	adds	r3, #4
    8a58:	2200      	movs	r2, #0
    8a5a:	601a      	str	r2, [r3, #0]
    8a5c:	3304      	adds	r3, #4
    8a5e:	2200      	movs	r2, #0
    8a60:	601a      	str	r2, [r3, #0]
    8a62:	3304      	adds	r3, #4
    8a64:	2200      	movs	r2, #0
    8a66:	601a      	str	r2, [r3, #0]
    8a68:	3304      	adds	r3, #4
    8a6a:	2200      	movs	r2, #0
    8a6c:	601a      	str	r2, [r3, #0]
    8a6e:	3304      	adds	r3, #4
    8a70:	2200      	movs	r2, #0
    8a72:	601a      	str	r2, [r3, #0]
    8a74:	3304      	adds	r3, #4
    8a76:	2200      	movs	r2, #0
    8a78:	601a      	str	r2, [r3, #0]
    8a7a:	3304      	adds	r3, #4
    8a7c:	2200      	movs	r2, #0
    8a7e:	601a      	str	r2, [r3, #0]
    8a80:	3304      	adds	r3, #4
    8a82:	2200      	movs	r2, #0
    8a84:	601a      	str	r2, [r3, #0]
    8a86:	3304      	adds	r3, #4
    8a88:	2200      	movs	r2, #0
    8a8a:	601a      	str	r2, [r3, #0]
    8a8c:	3304      	adds	r3, #4
    8a8e:	2200      	movs	r2, #0
    8a90:	601a      	str	r2, [r3, #0]
    8a92:	3304      	adds	r3, #4
    8a94:	2200      	movs	r2, #0
    8a96:	601a      	str	r2, [r3, #0]
    8a98:	3304      	adds	r3, #4
    8a9a:	2200      	movs	r2, #0
    8a9c:	801a      	strh	r2, [r3, #0]
    8a9e:	3302      	adds	r3, #2
	if (len > 49)
    8aa0:	687b      	ldr	r3, [r7, #4]
    8aa2:	2b31      	cmp	r3, #49	; 0x31
    8aa4:	d901      	bls.n	8aaa <le_promisc_state+0x6a>
		len = 49;
    8aa6:	2331      	movs	r3, #49	; 0x31
    8aa8:	607b      	str	r3, [r7, #4]

	buf[0] = type;
    8aaa:	7bfb      	ldrb	r3, [r7, #15]
    8aac:	753b      	strb	r3, [r7, #20]
	memcpy(&buf[1], data, len);
    8aae:	f107 0314 	add.w	r3, r7, #20
    8ab2:	3301      	adds	r3, #1
    8ab4:	4618      	mov	r0, r3
    8ab6:	68b9      	ldr	r1, [r7, #8]
    8ab8:	687a      	ldr	r2, [r7, #4]
    8aba:	f004 fadf 	bl	d07c <memcpy>
	enqueue(LE_PROMISC, buf);
    8abe:	f107 0314 	add.w	r3, r7, #20
    8ac2:	2005      	movs	r0, #5
    8ac4:	4619      	mov	r1, r3
    8ac6:	f7fb fcff 	bl	44c8 <enqueue>
}
    8aca:	3748      	adds	r7, #72	; 0x48
    8acc:	46bd      	mov	sp, r7
    8ace:	bd80      	pop	{r7, pc}

00008ad0 <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    8ad0:	b580      	push	{r7, lr}
    8ad2:	b084      	sub	sp, #16
    8ad4:	af00      	add	r7, sp, #0
    8ad6:	6078      	str	r0, [r7, #4]
	static u32 first_ts = 0;
	if (channel == 2404) {
    8ad8:	4b55      	ldr	r3, [pc, #340]	; (8c30 <promisc_recover_hop_increment+0x160>)
    8ada:	881b      	ldrh	r3, [r3, #0]
    8adc:	b29b      	uxth	r3, r3
    8ade:	f640 1264 	movw	r2, #2404	; 0x964
    8ae2:	4293      	cmp	r3, r2
    8ae4:	d114      	bne.n	8b10 <promisc_recover_hop_increment+0x40>
		first_ts = CLK100NS;
    8ae6:	4b53      	ldr	r3, [pc, #332]	; (8c34 <promisc_recover_hop_increment+0x164>)
    8ae8:	681b      	ldr	r3, [r3, #0]
    8aea:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8aee:	f640 4235 	movw	r2, #3125	; 0xc35
    8af2:	fb02 f203 	mul.w	r2, r2, r3
    8af6:	4b50      	ldr	r3, [pc, #320]	; (8c38 <promisc_recover_hop_increment+0x168>)
    8af8:	681b      	ldr	r3, [r3, #0]
    8afa:	4413      	add	r3, r2
    8afc:	4a4f      	ldr	r2, [pc, #316]	; (8c3c <promisc_recover_hop_increment+0x16c>)
    8afe:	6013      	str	r3, [r2, #0]
		hop_direct_channel = 2406;
    8b00:	4b4f      	ldr	r3, [pc, #316]	; (8c40 <promisc_recover_hop_increment+0x170>)
    8b02:	f640 1266 	movw	r2, #2406	; 0x966
    8b06:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    8b08:	4b4e      	ldr	r3, [pc, #312]	; (8c44 <promisc_recover_hop_increment+0x174>)
    8b0a:	2201      	movs	r2, #1
    8b0c:	701a      	strb	r2, [r3, #0]
    8b0e:	e08b      	b.n	8c28 <promisc_recover_hop_increment+0x158>
	} else if (channel == 2406) {
    8b10:	4b47      	ldr	r3, [pc, #284]	; (8c30 <promisc_recover_hop_increment+0x160>)
    8b12:	881b      	ldrh	r3, [r3, #0]
    8b14:	b29b      	uxth	r3, r3
    8b16:	f640 1266 	movw	r2, #2406	; 0x966
    8b1a:	4293      	cmp	r3, r2
    8b1c:	d17d      	bne.n	8c1a <promisc_recover_hop_increment+0x14a>
		u32 second_ts = CLK100NS;
    8b1e:	4b45      	ldr	r3, [pc, #276]	; (8c34 <promisc_recover_hop_increment+0x164>)
    8b20:	681b      	ldr	r3, [r3, #0]
    8b22:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8b26:	f640 4235 	movw	r2, #3125	; 0xc35
    8b2a:	fb02 f203 	mul.w	r2, r2, r3
    8b2e:	4b42      	ldr	r3, [pc, #264]	; (8c38 <promisc_recover_hop_increment+0x168>)
    8b30:	681b      	ldr	r3, [r3, #0]
    8b32:	4413      	add	r3, r2
    8b34:	60fb      	str	r3, [r7, #12]
		if (second_ts < first_ts)
    8b36:	4b41      	ldr	r3, [pc, #260]	; (8c3c <promisc_recover_hop_increment+0x16c>)
    8b38:	681b      	ldr	r3, [r3, #0]
    8b3a:	68fa      	ldr	r2, [r7, #12]
    8b3c:	429a      	cmp	r2, r3
    8b3e:	d205      	bcs.n	8b4c <promisc_recover_hop_increment+0x7c>
			second_ts += 3276800000; // handle rollover
    8b40:	68fb      	ldr	r3, [r7, #12]
    8b42:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    8b46:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    8b4a:	60fb      	str	r3, [r7, #12]
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    8b4c:	4b3b      	ldr	r3, [pc, #236]	; (8c3c <promisc_recover_hop_increment+0x16c>)
    8b4e:	681b      	ldr	r3, [r3, #0]
    8b50:	68fa      	ldr	r2, [r7, #12]
    8b52:	1ad2      	subs	r2, r2, r3
    8b54:	4b3c      	ldr	r3, [pc, #240]	; (8c48 <promisc_recover_hop_increment+0x178>)
    8b56:	8bdb      	ldrh	r3, [r3, #30]
    8b58:	4619      	mov	r1, r3
    8b5a:	f243 03d4 	movw	r3, #12500	; 0x30d4
    8b5e:	fb03 f301 	mul.w	r3, r3, r1
    8b62:	0fd9      	lsrs	r1, r3, #31
    8b64:	440b      	add	r3, r1
    8b66:	105b      	asrs	r3, r3, #1
    8b68:	4413      	add	r3, r2
    8b6a:	4a37      	ldr	r2, [pc, #220]	; (8c48 <promisc_recover_hop_increment+0x178>)
    8b6c:	8bd2      	ldrh	r2, [r2, #30]
    8b6e:	4611      	mov	r1, r2
    8b70:	f243 02d4 	movw	r2, #12500	; 0x30d4
    8b74:	fb02 f201 	mul.w	r2, r2, r1
    8b78:	fbb3 f3f2 	udiv	r3, r3, r2
    8b7c:	60bb      	str	r3, [r7, #8]
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    8b7e:	68bb      	ldr	r3, [r7, #8]
    8b80:	2b24      	cmp	r3, #36	; 0x24
    8b82:	d842      	bhi.n	8c0a <promisc_recover_hop_increment+0x13a>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    8b84:	4a31      	ldr	r2, [pc, #196]	; (8c4c <promisc_recover_hop_increment+0x17c>)
    8b86:	68bb      	ldr	r3, [r7, #8]
    8b88:	4413      	add	r3, r2
    8b8a:	781a      	ldrb	r2, [r3, #0]
    8b8c:	4b2e      	ldr	r3, [pc, #184]	; (8c48 <promisc_recover_hop_increment+0x178>)
    8b8e:	759a      	strb	r2, [r3, #22]
			le.interval_timer = le.conn_interval / 2;
    8b90:	4b2d      	ldr	r3, [pc, #180]	; (8c48 <promisc_recover_hop_increment+0x178>)
    8b92:	8bdb      	ldrh	r3, [r3, #30]
    8b94:	085b      	lsrs	r3, r3, #1
    8b96:	b29a      	uxth	r2, r3
    8b98:	4b2b      	ldr	r3, [pc, #172]	; (8c48 <promisc_recover_hop_increment+0x178>)
    8b9a:	839a      	strh	r2, [r3, #28]
			le.conn_count = 0;
    8b9c:	4b2a      	ldr	r3, [pc, #168]	; (8c48 <promisc_recover_hop_increment+0x178>)
    8b9e:	2200      	movs	r2, #0
    8ba0:	841a      	strh	r2, [r3, #32]
			le.conn_epoch = 0;
    8ba2:	4b29      	ldr	r3, [pc, #164]	; (8c48 <promisc_recover_hop_increment+0x178>)
    8ba4:	2200      	movs	r2, #0
    8ba6:	619a      	str	r2, [r3, #24]
			do_hop = 0;
    8ba8:	4b26      	ldr	r3, [pc, #152]	; (8c44 <promisc_recover_hop_increment+0x174>)
    8baa:	2200      	movs	r2, #0
    8bac:	701a      	strb	r2, [r3, #0]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    8bae:	4b26      	ldr	r3, [pc, #152]	; (8c48 <promisc_recover_hop_increment+0x178>)
    8bb0:	7d9b      	ldrb	r3, [r3, #22]
    8bb2:	1c5a      	adds	r2, r3, #1
    8bb4:	4b26      	ldr	r3, [pc, #152]	; (8c50 <promisc_recover_hop_increment+0x180>)
    8bb6:	fb82 0103 	smull	r0, r1, r2, r3
    8bba:	1853      	adds	r3, r2, r1
    8bbc:	1159      	asrs	r1, r3, #5
    8bbe:	17d3      	asrs	r3, r2, #31
    8bc0:	1ac9      	subs	r1, r1, r3
    8bc2:	460b      	mov	r3, r1
    8bc4:	00db      	lsls	r3, r3, #3
    8bc6:	440b      	add	r3, r1
    8bc8:	009b      	lsls	r3, r3, #2
    8bca:	440b      	add	r3, r1
    8bcc:	1ad1      	subs	r1, r2, r3
    8bce:	b2ca      	uxtb	r2, r1
    8bd0:	4b1d      	ldr	r3, [pc, #116]	; (8c48 <promisc_recover_hop_increment+0x178>)
    8bd2:	755a      	strb	r2, [r3, #21]
			le.link_state = LINK_CONNECTED;
    8bd4:	4b1c      	ldr	r3, [pc, #112]	; (8c48 <promisc_recover_hop_increment+0x178>)
    8bd6:	2203      	movs	r2, #3
    8bd8:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0;
    8bda:	4b1b      	ldr	r3, [pc, #108]	; (8c48 <promisc_recover_hop_increment+0x178>)
    8bdc:	2200      	movs	r2, #0
    8bde:	611a      	str	r2, [r3, #16]
			hop_mode = HOP_BTLE;
    8be0:	4b1c      	ldr	r3, [pc, #112]	; (8c54 <promisc_recover_hop_increment+0x184>)
    8be2:	2203      	movs	r2, #3
    8be4:	701a      	strb	r2, [r3, #0]
			packet_cb = connection_follow_cb;
    8be6:	4b1c      	ldr	r3, [pc, #112]	; (8c58 <promisc_recover_hop_increment+0x188>)
    8be8:	4a1c      	ldr	r2, [pc, #112]	; (8c5c <promisc_recover_hop_increment+0x18c>)
    8bea:	601a      	str	r2, [r3, #0]
			le_promisc_state(3, &le.channel_increment, 1);
    8bec:	2003      	movs	r0, #3
    8bee:	491c      	ldr	r1, [pc, #112]	; (8c60 <promisc_recover_hop_increment+0x190>)
    8bf0:	2201      	movs	r2, #1
    8bf2:	f7ff ff25 	bl	8a40 <le_promisc_state>

			if (jam_mode != JAM_NONE)
    8bf6:	4b1b      	ldr	r3, [pc, #108]	; (8c64 <promisc_recover_hop_increment+0x194>)
    8bf8:	781b      	ldrb	r3, [r3, #0]
    8bfa:	b2db      	uxtb	r3, r3
    8bfc:	2b00      	cmp	r3, #0
    8bfe:	d003      	beq.n	8c08 <promisc_recover_hop_increment+0x138>
				le_jam_count = JAM_COUNT_DEFAULT;
    8c00:	4b19      	ldr	r3, [pc, #100]	; (8c68 <promisc_recover_hop_increment+0x198>)
    8c02:	2228      	movs	r2, #40	; 0x28
    8c04:	601a      	str	r2, [r3, #0]

			return;
    8c06:	e00f      	b.n	8c28 <promisc_recover_hop_increment+0x158>
    8c08:	e00e      	b.n	8c28 <promisc_recover_hop_increment+0x158>
		}
		hop_direct_channel = 2404;
    8c0a:	4b0d      	ldr	r3, [pc, #52]	; (8c40 <promisc_recover_hop_increment+0x170>)
    8c0c:	f640 1264 	movw	r2, #2404	; 0x964
    8c10:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    8c12:	4b0c      	ldr	r3, [pc, #48]	; (8c44 <promisc_recover_hop_increment+0x174>)
    8c14:	2201      	movs	r2, #1
    8c16:	701a      	strb	r2, [r3, #0]
    8c18:	e006      	b.n	8c28 <promisc_recover_hop_increment+0x158>
	}
	else {
		hop_direct_channel = 2404;
    8c1a:	4b09      	ldr	r3, [pc, #36]	; (8c40 <promisc_recover_hop_increment+0x170>)
    8c1c:	f640 1264 	movw	r2, #2404	; 0x964
    8c20:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    8c22:	4b08      	ldr	r3, [pc, #32]	; (8c44 <promisc_recover_hop_increment+0x174>)
    8c24:	2201      	movs	r2, #1
    8c26:	701a      	strb	r2, [r3, #0]
	}
}
    8c28:	3710      	adds	r7, #16
    8c2a:	46bd      	mov	sp, r7
    8c2c:	bd80      	pop	{r7, pc}
    8c2e:	bf00      	nop
    8c30:	1000049c 	.word	0x1000049c
    8c34:	10000bf4 	.word	0x10000bf4
    8c38:	40004008 	.word	0x40004008
    8c3c:	10000a54 	.word	0x10000a54
    8c40:	10000980 	.word	0x10000980
    8c44:	1000097d 	.word	0x1000097d
    8c48:	10000458 	.word	0x10000458
    8c4c:	0000d2b4 	.word	0x0000d2b4
    8c50:	dd67c8a7 	.word	0xdd67c8a7
    8c54:	1000097c 	.word	0x1000097c
    8c58:	1000099c 	.word	0x1000099c
    8c5c:	000087a1 	.word	0x000087a1
    8c60:	1000046e 	.word	0x1000046e
    8c64:	10000a40 	.word	0x10000a40
    8c68:	10000994 	.word	0x10000994

00008c6c <promisc_recover_hop_interval>:

void promisc_recover_hop_interval(u8 *packet) {
    8c6c:	b580      	push	{r7, lr}
    8c6e:	b086      	sub	sp, #24
    8c70:	af00      	add	r7, sp, #0
    8c72:	6078      	str	r0, [r7, #4]
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    8c74:	4b33      	ldr	r3, [pc, #204]	; (8d44 <promisc_recover_hop_interval+0xd8>)
    8c76:	681b      	ldr	r3, [r3, #0]
    8c78:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8c7c:	f640 4235 	movw	r2, #3125	; 0xc35
    8c80:	fb02 f203 	mul.w	r2, r2, r3
    8c84:	4b30      	ldr	r3, [pc, #192]	; (8d48 <promisc_recover_hop_interval+0xdc>)
    8c86:	681b      	ldr	r3, [r3, #0]
    8c88:	4413      	add	r3, r2
    8c8a:	617b      	str	r3, [r7, #20]
	if (cur_clk < prev_clk)
    8c8c:	4b2f      	ldr	r3, [pc, #188]	; (8d4c <promisc_recover_hop_interval+0xe0>)
    8c8e:	681b      	ldr	r3, [r3, #0]
    8c90:	697a      	ldr	r2, [r7, #20]
    8c92:	429a      	cmp	r2, r3
    8c94:	d203      	bcs.n	8c9e <promisc_recover_hop_interval+0x32>
		cur_clk += 3267800000; // handle rollover
    8c96:	697a      	ldr	r2, [r7, #20]
    8c98:	4b2d      	ldr	r3, [pc, #180]	; (8d50 <promisc_recover_hop_interval+0xe4>)
    8c9a:	4413      	add	r3, r2
    8c9c:	617b      	str	r3, [r7, #20]
	u32 clk_diff = cur_clk - prev_clk;
    8c9e:	4b2b      	ldr	r3, [pc, #172]	; (8d4c <promisc_recover_hop_interval+0xe0>)
    8ca0:	681b      	ldr	r3, [r3, #0]
    8ca2:	697a      	ldr	r2, [r7, #20]
    8ca4:	1ad3      	subs	r3, r2, r3
    8ca6:	613b      	str	r3, [r7, #16]
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    8ca8:	693b      	ldr	r3, [r7, #16]
    8caa:	f246 12a7 	movw	r2, #24999	; 0x61a7
    8cae:	4293      	cmp	r3, r2
    8cb0:	d800      	bhi.n	8cb4 <promisc_recover_hop_interval+0x48>
		return;
    8cb2:	e043      	b.n	8d3c <promisc_recover_hop_interval+0xd0>

	if (clk_diff < le_promisc.smallest_hop_interval)
    8cb4:	4b27      	ldr	r3, [pc, #156]	; (8d54 <promisc_recover_hop_interval+0xe8>)
    8cb6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    8cba:	693b      	ldr	r3, [r7, #16]
    8cbc:	429a      	cmp	r2, r3
    8cbe:	d903      	bls.n	8cc8 <promisc_recover_hop_interval+0x5c>
		le_promisc.smallest_hop_interval = clk_diff;
    8cc0:	4a24      	ldr	r2, [pc, #144]	; (8d54 <promisc_recover_hop_interval+0xe8>)
    8cc2:	693b      	ldr	r3, [r7, #16]
    8cc4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    8cc8:	4b22      	ldr	r3, [pc, #136]	; (8d54 <promisc_recover_hop_interval+0xe8>)
    8cca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    8cce:	f503 3361 	add.w	r3, r3, #230400	; 0x38400
    8cd2:	f203 3352 	addw	r3, r3, #850	; 0x352
    8cd6:	4a20      	ldr	r2, [pc, #128]	; (8d58 <promisc_recover_hop_interval+0xec>)
    8cd8:	fba2 2303 	umull	r2, r3, r2, r3
    8cdc:	0c9b      	lsrs	r3, r3, #18
    8cde:	81fb      	strh	r3, [r7, #14]

	if (le.conn_interval == obsv_hop_interval) {
    8ce0:	4b1e      	ldr	r3, [pc, #120]	; (8d5c <promisc_recover_hop_interval+0xf0>)
    8ce2:	8bdb      	ldrh	r3, [r3, #30]
    8ce4:	89fa      	ldrh	r2, [r7, #14]
    8ce6:	429a      	cmp	r2, r3
    8ce8:	d11e      	bne.n	8d28 <promisc_recover_hop_interval+0xbc>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    8cea:	4b1a      	ldr	r3, [pc, #104]	; (8d54 <promisc_recover_hop_interval+0xe8>)
    8cec:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    8cf0:	3301      	adds	r3, #1
    8cf2:	4a18      	ldr	r2, [pc, #96]	; (8d54 <promisc_recover_hop_interval+0xe8>)
    8cf4:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    8cf8:	4b16      	ldr	r3, [pc, #88]	; (8d54 <promisc_recover_hop_interval+0xe8>)
    8cfa:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    8cfe:	2b05      	cmp	r3, #5
    8d00:	d119      	bne.n	8d36 <promisc_recover_hop_interval+0xca>
			packet_cb = promisc_recover_hop_increment;
    8d02:	4b17      	ldr	r3, [pc, #92]	; (8d60 <promisc_recover_hop_interval+0xf4>)
    8d04:	4a17      	ldr	r2, [pc, #92]	; (8d64 <promisc_recover_hop_interval+0xf8>)
    8d06:	601a      	str	r2, [r3, #0]
			hop_direct_channel = 2404;
    8d08:	4b17      	ldr	r3, [pc, #92]	; (8d68 <promisc_recover_hop_interval+0xfc>)
    8d0a:	f640 1264 	movw	r2, #2404	; 0x964
    8d0e:	801a      	strh	r2, [r3, #0]
			hop_mode = HOP_DIRECT;
    8d10:	4b16      	ldr	r3, [pc, #88]	; (8d6c <promisc_recover_hop_interval+0x100>)
    8d12:	2204      	movs	r2, #4
    8d14:	701a      	strb	r2, [r3, #0]
			do_hop = 1;
    8d16:	4b16      	ldr	r3, [pc, #88]	; (8d70 <promisc_recover_hop_interval+0x104>)
    8d18:	2201      	movs	r2, #1
    8d1a:	701a      	strb	r2, [r3, #0]
			le_promisc_state(2, &le.conn_interval, 2);
    8d1c:	2002      	movs	r0, #2
    8d1e:	4915      	ldr	r1, [pc, #84]	; (8d74 <promisc_recover_hop_interval+0x108>)
    8d20:	2202      	movs	r2, #2
    8d22:	f7ff fe8d 	bl	8a40 <le_promisc_state>
    8d26:	e006      	b.n	8d36 <promisc_recover_hop_interval+0xca>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    8d28:	4a0c      	ldr	r2, [pc, #48]	; (8d5c <promisc_recover_hop_interval+0xf0>)
    8d2a:	89fb      	ldrh	r3, [r7, #14]
    8d2c:	83d3      	strh	r3, [r2, #30]
		le_promisc.consec_intervals = 0;
    8d2e:	4b09      	ldr	r3, [pc, #36]	; (8d54 <promisc_recover_hop_interval+0xe8>)
    8d30:	2200      	movs	r2, #0
    8d32:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	prev_clk = cur_clk;
    8d36:	4a05      	ldr	r2, [pc, #20]	; (8d4c <promisc_recover_hop_interval+0xe0>)
    8d38:	697b      	ldr	r3, [r7, #20]
    8d3a:	6013      	str	r3, [r2, #0]
}
    8d3c:	3718      	adds	r7, #24
    8d3e:	46bd      	mov	sp, r7
    8d40:	bd80      	pop	{r7, pc}
    8d42:	bf00      	nop
    8d44:	10000bf4 	.word	0x10000bf4
    8d48:	40004008 	.word	0x40004008
    8d4c:	10000a58 	.word	0x10000a58
    8d50:	c2c6abc0 	.word	0xc2c6abc0
    8d54:	10000c00 	.word	0x10000c00
    8d58:	9119a9c1 	.word	0x9119a9c1
    8d5c:	10000458 	.word	0x10000458
    8d60:	1000099c 	.word	0x1000099c
    8d64:	00008ad1 	.word	0x00008ad1
    8d68:	10000980 	.word	0x10000980
    8d6c:	1000097c 	.word	0x1000097c
    8d70:	1000097d 	.word	0x1000097d
    8d74:	10000476 	.word	0x10000476

00008d78 <promisc_follow_cb>:

void promisc_follow_cb(u8 *packet) {
    8d78:	b580      	push	{r7, lr}
    8d7a:	b084      	sub	sp, #16
    8d7c:	af00      	add	r7, sp, #0
    8d7e:	6078      	str	r0, [r7, #4]
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    8d80:	4b28      	ldr	r3, [pc, #160]	; (8e24 <promisc_follow_cb+0xac>)
    8d82:	691b      	ldr	r3, [r3, #16]
    8d84:	2b00      	cmp	r3, #0
    8d86:	d149      	bne.n	8e1c <promisc_follow_cb+0xa4>
    8d88:	687b      	ldr	r3, [r7, #4]
    8d8a:	3304      	adds	r3, #4
    8d8c:	781b      	ldrb	r3, [r3, #0]
    8d8e:	2b01      	cmp	r3, #1
    8d90:	d144      	bne.n	8e1c <promisc_follow_cb+0xa4>
    8d92:	687b      	ldr	r3, [r7, #4]
    8d94:	3305      	adds	r3, #5
    8d96:	781b      	ldrb	r3, [r3, #0]
    8d98:	2b00      	cmp	r3, #0
    8d9a:	d13f      	bne.n	8e1c <promisc_follow_cb+0xa4>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    8d9c:	687b      	ldr	r3, [r7, #4]
    8d9e:	3308      	adds	r3, #8
    8da0:	781b      	ldrb	r3, [r3, #0]
    8da2:	041a      	lsls	r2, r3, #16
    8da4:	687b      	ldr	r3, [r7, #4]
    8da6:	3307      	adds	r3, #7
    8da8:	781b      	ldrb	r3, [r3, #0]
    8daa:	021b      	lsls	r3, r3, #8
    8dac:	4313      	orrs	r3, r2
    8dae:	687a      	ldr	r2, [r7, #4]
    8db0:	3206      	adds	r2, #6
    8db2:	7812      	ldrb	r2, [r2, #0]
    8db4:	4313      	orrs	r3, r2
    8db6:	60bb      	str	r3, [r7, #8]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    8db8:	687b      	ldr	r3, [r7, #4]
    8dba:	3304      	adds	r3, #4
    8dbc:	68b8      	ldr	r0, [r7, #8]
    8dbe:	4619      	mov	r1, r3
    8dc0:	2202      	movs	r2, #2
    8dc2:	f001 f895 	bl	9ef0 <btle_reverse_crc>
    8dc6:	4602      	mov	r2, r0
    8dc8:	4b16      	ldr	r3, [pc, #88]	; (8e24 <promisc_follow_cb+0xac>)
    8dca:	609a      	str	r2, [r3, #8]
		le.crc_init_reversed = 0;
    8dcc:	4b15      	ldr	r3, [pc, #84]	; (8e24 <promisc_follow_cb+0xac>)
    8dce:	2200      	movs	r2, #0
    8dd0:	60da      	str	r2, [r3, #12]
		for (i = 0; i < 24; ++i)
    8dd2:	2300      	movs	r3, #0
    8dd4:	60fb      	str	r3, [r7, #12]
    8dd6:	e013      	b.n	8e00 <promisc_follow_cb+0x88>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    8dd8:	4b12      	ldr	r3, [pc, #72]	; (8e24 <promisc_follow_cb+0xac>)
    8dda:	68da      	ldr	r2, [r3, #12]
    8ddc:	4b11      	ldr	r3, [pc, #68]	; (8e24 <promisc_follow_cb+0xac>)
    8dde:	6899      	ldr	r1, [r3, #8]
    8de0:	68fb      	ldr	r3, [r7, #12]
    8de2:	fa21 f303 	lsr.w	r3, r1, r3
    8de6:	f003 0101 	and.w	r1, r3, #1
    8dea:	68fb      	ldr	r3, [r7, #12]
    8dec:	f1c3 0317 	rsb	r3, r3, #23
    8df0:	fa01 f303 	lsl.w	r3, r1, r3
    8df4:	4313      	orrs	r3, r2
    8df6:	4a0b      	ldr	r2, [pc, #44]	; (8e24 <promisc_follow_cb+0xac>)
    8df8:	60d3      	str	r3, [r2, #12]
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    8dfa:	68fb      	ldr	r3, [r7, #12]
    8dfc:	3301      	adds	r3, #1
    8dfe:	60fb      	str	r3, [r7, #12]
    8e00:	68fb      	ldr	r3, [r7, #12]
    8e02:	2b17      	cmp	r3, #23
    8e04:	dde8      	ble.n	8dd8 <promisc_follow_cb+0x60>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    8e06:	4b07      	ldr	r3, [pc, #28]	; (8e24 <promisc_follow_cb+0xac>)
    8e08:	2201      	movs	r2, #1
    8e0a:	611a      	str	r2, [r3, #16]
		packet_cb = promisc_recover_hop_interval;
    8e0c:	4b06      	ldr	r3, [pc, #24]	; (8e28 <promisc_follow_cb+0xb0>)
    8e0e:	4a07      	ldr	r2, [pc, #28]	; (8e2c <promisc_follow_cb+0xb4>)
    8e10:	601a      	str	r2, [r3, #0]
		le_promisc_state(1, &le.crc_init, 3);
    8e12:	2001      	movs	r0, #1
    8e14:	4906      	ldr	r1, [pc, #24]	; (8e30 <promisc_follow_cb+0xb8>)
    8e16:	2203      	movs	r2, #3
    8e18:	f7ff fe12 	bl	8a40 <le_promisc_state>
	}
}
    8e1c:	3710      	adds	r7, #16
    8e1e:	46bd      	mov	sp, r7
    8e20:	bd80      	pop	{r7, pc}
    8e22:	bf00      	nop
    8e24:	10000458 	.word	0x10000458
    8e28:	1000099c 	.word	0x1000099c
    8e2c:	00008c6d 	.word	0x00008c6d
    8e30:	10000460 	.word	0x10000460

00008e34 <see_aa>:

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    8e34:	b480      	push	{r7}
    8e36:	b087      	sub	sp, #28
    8e38:	af00      	add	r7, sp, #0
    8e3a:	6078      	str	r0, [r7, #4]
	int i, max = -1, killme = -1;
    8e3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8e40:	613b      	str	r3, [r7, #16]
    8e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8e46:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < AA_LIST_SIZE; ++i)
    8e48:	2300      	movs	r3, #0
    8e4a:	617b      	str	r3, [r7, #20]
    8e4c:	e015      	b.n	8e7a <see_aa+0x46>
		if (le_promisc.active_aa[i].aa == aa) {
    8e4e:	4a22      	ldr	r2, [pc, #136]	; (8ed8 <see_aa+0xa4>)
    8e50:	697b      	ldr	r3, [r7, #20]
    8e52:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    8e56:	687b      	ldr	r3, [r7, #4]
    8e58:	429a      	cmp	r2, r3
    8e5a:	d10b      	bne.n	8e74 <see_aa+0x40>
			++le_promisc.active_aa[i].count;
    8e5c:	4a1e      	ldr	r2, [pc, #120]	; (8ed8 <see_aa+0xa4>)
    8e5e:	697b      	ldr	r3, [r7, #20]
    8e60:	00db      	lsls	r3, r3, #3
    8e62:	4413      	add	r3, r2
    8e64:	685b      	ldr	r3, [r3, #4]
    8e66:	1c5a      	adds	r2, r3, #1
    8e68:	491b      	ldr	r1, [pc, #108]	; (8ed8 <see_aa+0xa4>)
    8e6a:	697b      	ldr	r3, [r7, #20]
    8e6c:	00db      	lsls	r3, r3, #3
    8e6e:	440b      	add	r3, r1
    8e70:	605a      	str	r2, [r3, #4]
			return;
    8e72:	e02c      	b.n	8ece <see_aa+0x9a>
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    8e74:	697b      	ldr	r3, [r7, #20]
    8e76:	3301      	adds	r3, #1
    8e78:	617b      	str	r3, [r7, #20]
    8e7a:	697b      	ldr	r3, [r7, #20]
    8e7c:	2b1f      	cmp	r3, #31
    8e7e:	dde6      	ble.n	8e4e <see_aa+0x1a>
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    8e80:	2300      	movs	r3, #0
    8e82:	617b      	str	r3, [r7, #20]
    8e84:	e015      	b.n	8eb2 <see_aa+0x7e>
		if (le_promisc.active_aa[i].count < max || max < 0) {
    8e86:	4a14      	ldr	r2, [pc, #80]	; (8ed8 <see_aa+0xa4>)
    8e88:	697b      	ldr	r3, [r7, #20]
    8e8a:	00db      	lsls	r3, r3, #3
    8e8c:	4413      	add	r3, r2
    8e8e:	685a      	ldr	r2, [r3, #4]
    8e90:	693b      	ldr	r3, [r7, #16]
    8e92:	429a      	cmp	r2, r3
    8e94:	db02      	blt.n	8e9c <see_aa+0x68>
    8e96:	693b      	ldr	r3, [r7, #16]
    8e98:	2b00      	cmp	r3, #0
    8e9a:	da07      	bge.n	8eac <see_aa+0x78>
			killme = i;
    8e9c:	697b      	ldr	r3, [r7, #20]
    8e9e:	60fb      	str	r3, [r7, #12]
			max = le_promisc.active_aa[i].count;
    8ea0:	4a0d      	ldr	r2, [pc, #52]	; (8ed8 <see_aa+0xa4>)
    8ea2:	697b      	ldr	r3, [r7, #20]
    8ea4:	00db      	lsls	r3, r3, #3
    8ea6:	4413      	add	r3, r2
    8ea8:	685b      	ldr	r3, [r3, #4]
    8eaa:	613b      	str	r3, [r7, #16]
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    8eac:	697b      	ldr	r3, [r7, #20]
    8eae:	3301      	adds	r3, #1
    8eb0:	617b      	str	r3, [r7, #20]
    8eb2:	697b      	ldr	r3, [r7, #20]
    8eb4:	2b1f      	cmp	r3, #31
    8eb6:	dde6      	ble.n	8e86 <see_aa+0x52>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    8eb8:	4907      	ldr	r1, [pc, #28]	; (8ed8 <see_aa+0xa4>)
    8eba:	68fb      	ldr	r3, [r7, #12]
    8ebc:	687a      	ldr	r2, [r7, #4]
    8ebe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    8ec2:	4a05      	ldr	r2, [pc, #20]	; (8ed8 <see_aa+0xa4>)
    8ec4:	68fb      	ldr	r3, [r7, #12]
    8ec6:	00db      	lsls	r3, r3, #3
    8ec8:	4413      	add	r3, r2
    8eca:	2201      	movs	r2, #1
    8ecc:	605a      	str	r2, [r3, #4]
}
    8ece:	371c      	adds	r7, #28
    8ed0:	46bd      	mov	sp, r7
    8ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ed6:	4770      	bx	lr
    8ed8:	10000c00 	.word	0x10000c00

00008edc <cb_le_promisc>:

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    8edc:	b590      	push	{r4, r7, lr}
    8ede:	b0a1      	sub	sp, #132	; 0x84
    8ee0:	af00      	add	r7, sp, #0
    8ee2:	6078      	str	r0, [r7, #4]
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    8ee4:	f107 031c 	add.w	r3, r7, #28
    8ee8:	2240      	movs	r2, #64	; 0x40
    8eea:	4618      	mov	r0, r3
    8eec:	2100      	movs	r1, #0
    8eee:	f7fb f943 	bl	4178 <memset>
    8ef2:	2301      	movs	r3, #1
    8ef4:	773b      	strb	r3, [r7, #28]
    8ef6:	2301      	movs	r3, #1
    8ef8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    8efc:	2301      	movs	r3, #1
    8efe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    8f02:	2301      	movs	r3, #1
    8f04:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    8f08:	2301      	movs	r3, #1
    8f0a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    8f0e:	2301      	movs	r3, #1
    8f10:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    8f14:	2301      	movs	r3, #1
    8f16:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    8f1a:	2301      	movs	r3, #1
    8f1c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    8f20:	2300      	movs	r3, #0
    8f22:	67fb      	str	r3, [r7, #124]	; 0x7c
    8f24:	e041      	b.n	8faa <cb_le_promisc+0xce>
		idx = whitening_index[btle_channel_index(channel-2402)];
    8f26:	4ba5      	ldr	r3, [pc, #660]	; (91bc <cb_le_promisc+0x2e0>)
    8f28:	881b      	ldrh	r3, [r3, #0]
    8f2a:	b29b      	uxth	r3, r3
    8f2c:	b2db      	uxtb	r3, r3
    8f2e:	3b62      	subs	r3, #98	; 0x62
    8f30:	b2db      	uxtb	r3, r3
    8f32:	4618      	mov	r0, r3
    8f34:	f000 ff3a 	bl	9dac <btle_channel_index>
    8f38:	4603      	mov	r3, r0
    8f3a:	461a      	mov	r2, r3
    8f3c:	4ba0      	ldr	r3, [pc, #640]	; (91c0 <cb_le_promisc+0x2e4>)
    8f3e:	5c9b      	ldrb	r3, [r3, r2]
    8f40:	673b      	str	r3, [r7, #112]	; 0x70

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    8f42:	2300      	movs	r3, #0
    8f44:	67bb      	str	r3, [r7, #120]	; 0x78
    8f46:	e02a      	b.n	8f9e <cb_le_promisc+0xc2>
			desired[i][j] ^= whitening[idx];
    8f48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8f4a:	011b      	lsls	r3, r3, #4
    8f4c:	f107 0280 	add.w	r2, r7, #128	; 0x80
    8f50:	441a      	add	r2, r3
    8f52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8f54:	4413      	add	r3, r2
    8f56:	3b64      	subs	r3, #100	; 0x64
    8f58:	781a      	ldrb	r2, [r3, #0]
    8f5a:	499a      	ldr	r1, [pc, #616]	; (91c4 <cb_le_promisc+0x2e8>)
    8f5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    8f5e:	440b      	add	r3, r1
    8f60:	781b      	ldrb	r3, [r3, #0]
    8f62:	4053      	eors	r3, r2
    8f64:	b2d9      	uxtb	r1, r3
    8f66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8f68:	011b      	lsls	r3, r3, #4
    8f6a:	f107 0280 	add.w	r2, r7, #128	; 0x80
    8f6e:	441a      	add	r2, r3
    8f70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8f72:	4413      	add	r3, r2
    8f74:	3b64      	subs	r3, #100	; 0x64
    8f76:	460a      	mov	r2, r1
    8f78:	701a      	strb	r2, [r3, #0]
			idx = (idx + 1) % sizeof(whitening);
    8f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    8f7c:	3301      	adds	r3, #1
    8f7e:	4619      	mov	r1, r3
    8f80:	4b91      	ldr	r3, [pc, #580]	; (91c8 <cb_le_promisc+0x2ec>)
    8f82:	fba1 2303 	umull	r2, r3, r1, r3
    8f86:	1ac8      	subs	r0, r1, r3
    8f88:	0840      	lsrs	r0, r0, #1
    8f8a:	4403      	add	r3, r0
    8f8c:	099a      	lsrs	r2, r3, #6
    8f8e:	4613      	mov	r3, r2
    8f90:	01db      	lsls	r3, r3, #7
    8f92:	1a9b      	subs	r3, r3, r2
    8f94:	1aca      	subs	r2, r1, r3
    8f96:	673a      	str	r2, [r7, #112]	; 0x70

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    8f98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8f9a:	3301      	adds	r3, #1
    8f9c:	67bb      	str	r3, [r7, #120]	; 0x78
    8f9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8fa0:	2b0f      	cmp	r3, #15
    8fa2:	ddd1      	ble.n	8f48 <cb_le_promisc+0x6c>
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    8fa4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8fa6:	3301      	adds	r3, #1
    8fa8:	67fb      	str	r3, [r7, #124]	; 0x7c
    8faa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8fac:	2b03      	cmp	r3, #3
    8fae:	ddba      	ble.n	8f26 <cb_le_promisc+0x4a>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    8fb0:	2320      	movs	r3, #32
    8fb2:	67fb      	str	r3, [r7, #124]	; 0x7c
    8fb4:	e0d0      	b.n	9158 <cb_le_promisc+0x27c>
		int ok[4] = { 1, 1, 1, 1 };
    8fb6:	4b85      	ldr	r3, [pc, #532]	; (91cc <cb_le_promisc+0x2f0>)
    8fb8:	f107 040c 	add.w	r4, r7, #12
    8fbc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    8fbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		int matching = -1;
    8fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8fc6:	66fb      	str	r3, [r7, #108]	; 0x6c

		for (j = 0; j < 4; ++j) {
    8fc8:	2300      	movs	r3, #0
    8fca:	67bb      	str	r3, [r7, #120]	; 0x78
    8fcc:	e026      	b.n	901c <cb_le_promisc+0x140>
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    8fce:	2300      	movs	r3, #0
    8fd0:	677b      	str	r3, [r7, #116]	; 0x74
    8fd2:	e01d      	b.n	9010 <cb_le_promisc+0x134>
				if (unpacked[i+k] != desired[j][k]) {
    8fd4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    8fd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8fd8:	4413      	add	r3, r2
    8fda:	461a      	mov	r2, r3
    8fdc:	687b      	ldr	r3, [r7, #4]
    8fde:	4413      	add	r3, r2
    8fe0:	781a      	ldrb	r2, [r3, #0]
    8fe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8fe4:	011b      	lsls	r3, r3, #4
    8fe6:	f107 0180 	add.w	r1, r7, #128	; 0x80
    8fea:	4419      	add	r1, r3
    8fec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8fee:	440b      	add	r3, r1
    8ff0:	3b64      	subs	r3, #100	; 0x64
    8ff2:	781b      	ldrb	r3, [r3, #0]
    8ff4:	429a      	cmp	r2, r3
    8ff6:	d008      	beq.n	900a <cb_le_promisc+0x12e>
					ok[j] = 0;
    8ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8ffa:	009b      	lsls	r3, r3, #2
    8ffc:	f107 0280 	add.w	r2, r7, #128	; 0x80
    9000:	4413      	add	r3, r2
    9002:	2200      	movs	r2, #0
    9004:	f843 2c74 	str.w	r2, [r3, #-116]
					break;
    9008:	e005      	b.n	9016 <cb_le_promisc+0x13a>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    900a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    900c:	3301      	adds	r3, #1
    900e:	677b      	str	r3, [r7, #116]	; 0x74
    9010:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    9012:	2b0f      	cmp	r3, #15
    9014:	ddde      	ble.n	8fd4 <cb_le_promisc+0xf8>
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    9016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    9018:	3301      	adds	r3, #1
    901a:	67bb      	str	r3, [r7, #120]	; 0x78
    901c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    901e:	2b03      	cmp	r3, #3
    9020:	ddd5      	ble.n	8fce <cb_le_promisc+0xf2>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    9022:	2300      	movs	r3, #0
    9024:	67bb      	str	r3, [r7, #120]	; 0x78
    9026:	e00e      	b.n	9046 <cb_le_promisc+0x16a>
			if (ok[j]) {
    9028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    902a:	009b      	lsls	r3, r3, #2
    902c:	f107 0280 	add.w	r2, r7, #128	; 0x80
    9030:	4413      	add	r3, r2
    9032:	f853 3c74 	ldr.w	r3, [r3, #-116]
    9036:	2b00      	cmp	r3, #0
    9038:	d002      	beq.n	9040 <cb_le_promisc+0x164>
				matching = j;
    903a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    903c:	66fb      	str	r3, [r7, #108]	; 0x6c
				break;
    903e:	e005      	b.n	904c <cb_le_promisc+0x170>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    9040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    9042:	3301      	adds	r3, #1
    9044:	67bb      	str	r3, [r7, #120]	; 0x78
    9046:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    9048:	2b03      	cmp	r3, #3
    904a:	dded      	ble.n	9028 <cb_le_promisc+0x14c>
				break;
			}
		}

		// skip if no match
		if (matching < 0)
    904c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    904e:	2b00      	cmp	r3, #0
    9050:	db7f      	blt.n	9152 <cb_le_promisc+0x276>
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
    9052:	4b5a      	ldr	r3, [pc, #360]	; (91bc <cb_le_promisc+0x2e0>)
    9054:	881b      	ldrh	r3, [r3, #0]
    9056:	b29b      	uxth	r3, r3
    9058:	b2db      	uxtb	r3, r3
    905a:	3b62      	subs	r3, #98	; 0x62
    905c:	b2db      	uxtb	r3, r3
    905e:	4618      	mov	r0, r3
    9060:	f000 fea4 	bl	9dac <btle_channel_index>
    9064:	4603      	mov	r3, r0
    9066:	461a      	mov	r2, r3
    9068:	4b55      	ldr	r3, [pc, #340]	; (91c0 <cb_le_promisc+0x2e4>)
    906a:	5c9b      	ldrb	r3, [r3, r2]
    906c:	673b      	str	r3, [r7, #112]	; 0x70
		for (j = 0; j < 4+3+3; ++j) {
    906e:	2300      	movs	r3, #0
    9070:	67bb      	str	r3, [r7, #120]	; 0x78
    9072:	e04c      	b.n	910e <cb_le_promisc+0x232>
			u8 byte = 0;
    9074:	2300      	movs	r3, #0
    9076:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			for (k = 0; k < 8; k++) {
    907a:	2300      	movs	r3, #0
    907c:	677b      	str	r3, [r7, #116]	; 0x74
    907e:	e039      	b.n	90f4 <cb_le_promisc+0x218>
				int offset = k + (j * 8) + i - 32;
    9080:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    9082:	00da      	lsls	r2, r3, #3
    9084:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    9086:	441a      	add	r2, r3
    9088:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    908a:	4413      	add	r3, r2
    908c:	3b20      	subs	r3, #32
    908e:	663b      	str	r3, [r7, #96]	; 0x60
				if (offset >= DMA_SIZE*8*2) break;
    9090:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    9092:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    9096:	db00      	blt.n	909a <cb_le_promisc+0x1be>
    9098:	e02f      	b.n	90fa <cb_le_promisc+0x21e>
				int bit = unpacked[offset];
    909a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    909c:	687a      	ldr	r2, [r7, #4]
    909e:	4413      	add	r3, r2
    90a0:	781b      	ldrb	r3, [r3, #0]
    90a2:	667b      	str	r3, [r7, #100]	; 0x64
				if (j >= 4) { // unwhiten data bytes
    90a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    90a6:	2b03      	cmp	r3, #3
    90a8:	dd16      	ble.n	90d8 <cb_le_promisc+0x1fc>
					bit ^= whitening[idx];
    90aa:	4a46      	ldr	r2, [pc, #280]	; (91c4 <cb_le_promisc+0x2e8>)
    90ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    90ae:	4413      	add	r3, r2
    90b0:	781b      	ldrb	r3, [r3, #0]
    90b2:	461a      	mov	r2, r3
    90b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    90b6:	4053      	eors	r3, r2
    90b8:	667b      	str	r3, [r7, #100]	; 0x64
					idx = (idx + 1) % sizeof(whitening);
    90ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    90bc:	3301      	adds	r3, #1
    90be:	4619      	mov	r1, r3
    90c0:	4b41      	ldr	r3, [pc, #260]	; (91c8 <cb_le_promisc+0x2ec>)
    90c2:	fba1 2303 	umull	r2, r3, r1, r3
    90c6:	1ac8      	subs	r0, r1, r3
    90c8:	0840      	lsrs	r0, r0, #1
    90ca:	4403      	add	r3, r0
    90cc:	099a      	lsrs	r2, r3, #6
    90ce:	4613      	mov	r3, r2
    90d0:	01db      	lsls	r3, r3, #7
    90d2:	1a9b      	subs	r3, r3, r2
    90d4:	1aca      	subs	r2, r1, r3
    90d6:	673a      	str	r2, [r7, #112]	; 0x70
				}
				byte |= bit << k;
    90d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    90da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    90dc:	fa02 f303 	lsl.w	r3, r2, r3
    90e0:	b2da      	uxtb	r2, r3
    90e2:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
    90e6:	4313      	orrs	r3, r2
    90e8:	b2db      	uxtb	r3, r3
    90ea:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    90ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    90f0:	3301      	adds	r3, #1
    90f2:	677b      	str	r3, [r7, #116]	; 0x74
    90f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    90f6:	2b07      	cmp	r3, #7
    90f8:	ddc2      	ble.n	9080 <cb_le_promisc+0x1a4>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    90fa:	4b35      	ldr	r3, [pc, #212]	; (91d0 <cb_le_promisc+0x2f4>)
    90fc:	681a      	ldr	r2, [r3, #0]
    90fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    9100:	4413      	add	r3, r2
    9102:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
    9106:	701a      	strb	r2, [r3, #0]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
    9108:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    910a:	3301      	adds	r3, #1
    910c:	67bb      	str	r3, [r7, #120]	; 0x78
    910e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    9110:	2b09      	cmp	r3, #9
    9112:	ddaf      	ble.n	9074 <cb_le_promisc+0x198>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    9114:	4b2e      	ldr	r3, [pc, #184]	; (91d0 <cb_le_promisc+0x2f4>)
    9116:	681b      	ldr	r3, [r3, #0]
    9118:	3303      	adds	r3, #3
    911a:	781b      	ldrb	r3, [r3, #0]
    911c:	061a      	lsls	r2, r3, #24
				 (idle_rxbuf[2] << 16) |
    911e:	4b2c      	ldr	r3, [pc, #176]	; (91d0 <cb_le_promisc+0x2f4>)
    9120:	681b      	ldr	r3, [r3, #0]
    9122:	3302      	adds	r3, #2
    9124:	781b      	ldrb	r3, [r3, #0]
    9126:	041b      	lsls	r3, r3, #16
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    9128:	431a      	orrs	r2, r3
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    912a:	4b29      	ldr	r3, [pc, #164]	; (91d0 <cb_le_promisc+0x2f4>)
    912c:	681b      	ldr	r3, [r3, #0]
    912e:	3301      	adds	r3, #1
    9130:	781b      	ldrb	r3, [r3, #0]
    9132:	021b      	lsls	r3, r3, #8
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    9134:	4313      	orrs	r3, r2
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    9136:	4a26      	ldr	r2, [pc, #152]	; (91d0 <cb_le_promisc+0x2f4>)
    9138:	6812      	ldr	r2, [r2, #0]
    913a:	7812      	ldrb	r2, [r2, #0]
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    913c:	4313      	orrs	r3, r2
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    913e:	65fb      	str	r3, [r7, #92]	; 0x5c
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
		see_aa(aa);
    9140:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    9142:	f7ff fe77 	bl	8e34 <see_aa>

		enqueue(LE_PACKET, idle_rxbuf);
    9146:	4b22      	ldr	r3, [pc, #136]	; (91d0 <cb_le_promisc+0x2f4>)
    9148:	681b      	ldr	r3, [r3, #0]
    914a:	2001      	movs	r0, #1
    914c:	4619      	mov	r1, r3
    914e:	f7fb f9bb 	bl	44c8 <enqueue>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    9152:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9154:	3301      	adds	r3, #1
    9156:	67fb      	str	r3, [r7, #124]	; 0x7c
    9158:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    915a:	f5b3 7f3c 	cmp.w	r3, #752	; 0x2f0
    915e:	f6ff af2a 	blt.w	8fb6 <cb_le_promisc+0xda>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    9162:	2300      	movs	r3, #0
    9164:	67fb      	str	r3, [r7, #124]	; 0x7c
    9166:	e020      	b.n	91aa <cb_le_promisc+0x2ce>
		if (le_promisc.active_aa[i].count > 3) {
    9168:	4a1a      	ldr	r2, [pc, #104]	; (91d4 <cb_le_promisc+0x2f8>)
    916a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    916c:	00db      	lsls	r3, r3, #3
    916e:	4413      	add	r3, r2
    9170:	685b      	ldr	r3, [r3, #4]
    9172:	2b03      	cmp	r3, #3
    9174:	dd16      	ble.n	91a4 <cb_le_promisc+0x2c8>
			le_set_access_address(le_promisc.active_aa[i].aa);
    9176:	4a17      	ldr	r2, [pc, #92]	; (91d4 <cb_le_promisc+0x2f8>)
    9178:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    917a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    917e:	4618      	mov	r0, r3
    9180:	f7fe fd80 	bl	7c84 <le_set_access_address>
			data_cb = cb_follow_le;
    9184:	4b14      	ldr	r3, [pc, #80]	; (91d8 <cb_le_promisc+0x2fc>)
    9186:	4a15      	ldr	r2, [pc, #84]	; (91dc <cb_le_promisc+0x300>)
    9188:	601a      	str	r2, [r3, #0]
			packet_cb = promisc_follow_cb;
    918a:	4b15      	ldr	r3, [pc, #84]	; (91e0 <cb_le_promisc+0x304>)
    918c:	4a15      	ldr	r2, [pc, #84]	; (91e4 <cb_le_promisc+0x308>)
    918e:	601a      	str	r2, [r3, #0]
			le.crc_verify = 0;
    9190:	4b15      	ldr	r3, [pc, #84]	; (91e8 <cb_le_promisc+0x30c>)
    9192:	2200      	movs	r2, #0
    9194:	611a      	str	r2, [r3, #16]
			le_promisc_state(0, &le.access_address, 4);
    9196:	2000      	movs	r0, #0
    9198:	4913      	ldr	r1, [pc, #76]	; (91e8 <cb_le_promisc+0x30c>)
    919a:	2204      	movs	r2, #4
    919c:	f7ff fc50 	bl	8a40 <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    91a0:	2300      	movs	r3, #0
    91a2:	e006      	b.n	91b2 <cb_le_promisc+0x2d6>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    91a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    91a6:	3301      	adds	r3, #1
    91a8:	67fb      	str	r3, [r7, #124]	; 0x7c
    91aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    91ac:	2b1f      	cmp	r3, #31
    91ae:	dddb      	ble.n	9168 <cb_le_promisc+0x28c>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    91b0:	2301      	movs	r3, #1
}
    91b2:	4618      	mov	r0, r3
    91b4:	3784      	adds	r7, #132	; 0x84
    91b6:	46bd      	mov	sp, r7
    91b8:	bd90      	pop	{r4, r7, pc}
    91ba:	bf00      	nop
    91bc:	1000049c 	.word	0x1000049c
    91c0:	0000d28c 	.word	0x0000d28c
    91c4:	0000d20c 	.word	0x0000d20c
    91c8:	02040811 	.word	0x02040811
    91cc:	0000daac 	.word	0x0000daac
    91d0:	10000454 	.word	0x10000454
    91d4:	10000c00 	.word	0x10000c00
    91d8:	10000998 	.word	0x10000998
    91dc:	000085c5 	.word	0x000085c5
    91e0:	1000099c 	.word	0x1000099c
    91e4:	00008d79 	.word	0x00008d79
    91e8:	10000458 	.word	0x10000458

000091ec <bt_promisc_le>:

void bt_promisc_le() {
    91ec:	b580      	push	{r7, lr}
    91ee:	af00      	add	r7, sp, #0
	while (requested_mode == MODE_BT_PROMISC_LE) {
    91f0:	e02c      	b.n	924c <bt_promisc_le+0x60>
		reset_le_promisc();
    91f2:	f7fe fdad 	bl	7d50 <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    91f6:	4b18      	ldr	r3, [pc, #96]	; (9258 <bt_promisc_le+0x6c>)
    91f8:	881b      	ldrh	r3, [r3, #0]
    91fa:	b29b      	uxth	r3, r3
    91fc:	f003 0301 	and.w	r3, r3, #1
    9200:	2b00      	cmp	r3, #0
    9202:	d003      	beq.n	920c <bt_promisc_le+0x20>
			channel = 2440;
    9204:	4b14      	ldr	r3, [pc, #80]	; (9258 <bt_promisc_le+0x6c>)
    9206:	f640 1288 	movw	r2, #2440	; 0x988
    920a:	801a      	strh	r2, [r3, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    920c:	4b13      	ldr	r3, [pc, #76]	; (925c <bt_promisc_le+0x70>)
    920e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    9210:	2b00      	cmp	r3, #0
    9212:	d107      	bne.n	9224 <bt_promisc_le+0x38>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set();
    9214:	f7fb fc1c 	bl	4a50 <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    9218:	4b11      	ldr	r3, [pc, #68]	; (9260 <bt_promisc_le+0x74>)
    921a:	4a12      	ldr	r2, [pc, #72]	; (9264 <bt_promisc_le+0x78>)
    921c:	601a      	str	r2, [r3, #0]
			bt_generic_le(MODE_BT_PROMISC_LE);
    921e:	200a      	movs	r0, #10
    9220:	f7fe fda6 	bl	7d70 <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    9224:	4b10      	ldr	r3, [pc, #64]	; (9268 <bt_promisc_le+0x7c>)
    9226:	781b      	ldrb	r3, [r3, #0]
    9228:	b2db      	uxtb	r3, r3
    922a:	2b0a      	cmp	r3, #10
    922c:	d000      	beq.n	9230 <bt_promisc_le+0x44>
			break;
    922e:	e012      	b.n	9256 <bt_promisc_le+0x6a>

		le_promisc_state(0, &le.access_address, 4);
    9230:	2000      	movs	r0, #0
    9232:	490a      	ldr	r1, [pc, #40]	; (925c <bt_promisc_le+0x70>)
    9234:	2204      	movs	r2, #4
    9236:	f7ff fc03 	bl	8a40 <le_promisc_state>
		packet_cb = promisc_follow_cb;
    923a:	4b0c      	ldr	r3, [pc, #48]	; (926c <bt_promisc_le+0x80>)
    923c:	4a0c      	ldr	r2, [pc, #48]	; (9270 <bt_promisc_le+0x84>)
    923e:	601a      	str	r2, [r3, #0]
		le.crc_verify = 0;
    9240:	4b06      	ldr	r3, [pc, #24]	; (925c <bt_promisc_le+0x70>)
    9242:	2200      	movs	r2, #0
    9244:	611a      	str	r2, [r3, #16]
		bt_le_sync(MODE_BT_PROMISC_LE);
    9246:	200a      	movs	r0, #10
    9248:	f7fe ff0e 	bl	8068 <bt_le_sync>

	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
    924c:	4b06      	ldr	r3, [pc, #24]	; (9268 <bt_promisc_le+0x7c>)
    924e:	781b      	ldrb	r3, [r3, #0]
    9250:	b2db      	uxtb	r3, r3
    9252:	2b0a      	cmp	r3, #10
    9254:	d0cd      	beq.n	91f2 <bt_promisc_le+0x6>
		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
	}
}
    9256:	bd80      	pop	{r7, pc}
    9258:	1000049c 	.word	0x1000049c
    925c:	10000458 	.word	0x10000458
    9260:	10000998 	.word	0x10000998
    9264:	00008edd 	.word	0x00008edd
    9268:	10000a3f 	.word	0x10000a3f
    926c:	1000099c 	.word	0x1000099c
    9270:	00008d79 	.word	0x00008d79

00009274 <bt_slave_le>:

void bt_slave_le() {
    9274:	b590      	push	{r4, r7, lr}
    9276:	b089      	sub	sp, #36	; 0x24
    9278:	af00      	add	r7, sp, #0
	u32 calc_crc;
	int i;

	u8 adv_ind[] = {
    927a:	4a35      	ldr	r2, [pc, #212]	; (9350 <bt_slave_le+0xdc>)
    927c:	1d3b      	adds	r3, r7, #4
    927e:	4614      	mov	r4, r2
    9280:	6820      	ldr	r0, [r4, #0]
    9282:	6861      	ldr	r1, [r4, #4]
    9284:	68a2      	ldr	r2, [r4, #8]
    9286:	c307      	stmia	r3!, {r0, r1, r2}
    9288:	89a2      	ldrh	r2, [r4, #12]
    928a:	801a      	strh	r2, [r3, #0]

		// CRC (calc)
		0xff, 0xff, 0xff,
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;
    928c:	230b      	movs	r3, #11
    928e:	76fb      	strb	r3, [r7, #27]

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    9290:	2300      	movs	r3, #0
    9292:	61fb      	str	r3, [r7, #28]
    9294:	e00e      	b.n	92b4 <bt_slave_le+0x40>
		adv_ind[i+2] = slave_mac_address[5-i];
    9296:	69fb      	ldr	r3, [r7, #28]
    9298:	3302      	adds	r3, #2
    929a:	69fa      	ldr	r2, [r7, #28]
    929c:	f1c2 0205 	rsb	r2, r2, #5
    92a0:	492c      	ldr	r1, [pc, #176]	; (9354 <bt_slave_le+0xe0>)
    92a2:	5c8a      	ldrb	r2, [r1, r2]
    92a4:	f107 0120 	add.w	r1, r7, #32
    92a8:	440b      	add	r3, r1
    92aa:	f803 2c1c 	strb.w	r2, [r3, #-28]
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    92ae:	69fb      	ldr	r3, [r7, #28]
    92b0:	3301      	adds	r3, #1
    92b2:	61fb      	str	r3, [r7, #28]
    92b4:	69fb      	ldr	r3, [r7, #28]
    92b6:	2b05      	cmp	r3, #5
    92b8:	dded      	ble.n	9296 <bt_slave_le+0x22>
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
    92ba:	4b27      	ldr	r3, [pc, #156]	; (9358 <bt_slave_le+0xe4>)
    92bc:	68d9      	ldr	r1, [r3, #12]
    92be:	7efb      	ldrb	r3, [r7, #27]
    92c0:	1d3a      	adds	r2, r7, #4
    92c2:	4608      	mov	r0, r1
    92c4:	4611      	mov	r1, r2
    92c6:	461a      	mov	r2, r3
    92c8:	f000 fdce 	bl	9e68 <btle_calc_crc>
    92cc:	6178      	str	r0, [r7, #20]
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
    92ce:	7efb      	ldrb	r3, [r7, #27]
    92d0:	697a      	ldr	r2, [r7, #20]
    92d2:	b2d2      	uxtb	r2, r2
    92d4:	f107 0120 	add.w	r1, r7, #32
    92d8:	440b      	add	r3, r1
    92da:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    92de:	7efb      	ldrb	r3, [r7, #27]
    92e0:	3301      	adds	r3, #1
    92e2:	697a      	ldr	r2, [r7, #20]
    92e4:	0a12      	lsrs	r2, r2, #8
    92e6:	b2d2      	uxtb	r2, r2
    92e8:	f107 0120 	add.w	r1, r7, #32
    92ec:	440b      	add	r3, r1
    92ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    92f2:	7efb      	ldrb	r3, [r7, #27]
    92f4:	3302      	adds	r3, #2
    92f6:	697a      	ldr	r2, [r7, #20]
    92f8:	0c12      	lsrs	r2, r2, #16
    92fa:	b2d2      	uxtb	r2, r2
    92fc:	f107 0120 	add.w	r1, r7, #32
    9300:	440b      	add	r3, r1
    9302:	f803 2c1c 	strb.w	r2, [r3, #-28]

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    9306:	e01b      	b.n	9340 <bt_slave_le+0xcc>
		ICER0 = ICER0_ICE_USB;
    9308:	4b14      	ldr	r3, [pc, #80]	; (935c <bt_slave_le+0xe8>)
    930a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    930e:	601a      	str	r2, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
    9310:	4b12      	ldr	r3, [pc, #72]	; (935c <bt_slave_le+0xe8>)
    9312:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    9316:	601a      	str	r2, [r3, #0]
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    9318:	7efb      	ldrb	r3, [r7, #27]
    931a:	3303      	adds	r3, #3
    931c:	b2da      	uxtb	r2, r3
    931e:	1d3b      	adds	r3, r7, #4
    9320:	480f      	ldr	r0, [pc, #60]	; (9360 <bt_slave_le+0xec>)
    9322:	4611      	mov	r1, r2
    9324:	461a      	mov	r2, r3
    9326:	f7fc fe33 	bl	5f90 <le_transmit>
		ISER0 = ISER0_ISE_USB;
    932a:	4b0e      	ldr	r3, [pc, #56]	; (9364 <bt_slave_le+0xf0>)
    932c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    9330:	601a      	str	r2, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    9332:	4b0c      	ldr	r3, [pc, #48]	; (9364 <bt_slave_le+0xf0>)
    9334:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    9338:	601a      	str	r2, [r3, #0]
		msleep(100);
    933a:	2064      	movs	r0, #100	; 0x64
    933c:	f7fc fa24 	bl	5788 <msleep>
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    9340:	4b09      	ldr	r3, [pc, #36]	; (9368 <bt_slave_le+0xf4>)
    9342:	781b      	ldrb	r3, [r3, #0]
    9344:	b2db      	uxtb	r3, r3
    9346:	2b0c      	cmp	r3, #12
    9348:	d0de      	beq.n	9308 <bt_slave_le+0x94>
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
		msleep(100);
	}
}
    934a:	3724      	adds	r7, #36	; 0x24
    934c:	46bd      	mov	sp, r7
    934e:	bd90      	pop	{r4, r7, pc}
    9350:	0000dabc 	.word	0x0000dabc
    9354:	1000098c 	.word	0x1000098c
    9358:	10000458 	.word	0x10000458
    935c:	e000e180 	.word	0xe000e180
    9360:	8e89bed6 	.word	0x8e89bed6
    9364:	e000e100 	.word	0xe000e100
    9368:	10000a3f 	.word	0x10000a3f

0000936c <specan>:

/* spectrum analysis */
void specan()
{
    936c:	b590      	push	{r4, r7, lr}
    936e:	b091      	sub	sp, #68	; 0x44
    9370:	af00      	add	r7, sp, #0
	u8 epstat;
	u16 f;
	u8 i = 0;
    9372:	2300      	movs	r3, #0
    9374:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	u8 buf[DMA_SIZE];

	RXLED_SET;
    9378:	4b5a      	ldr	r3, [pc, #360]	; (94e4 <specan+0x178>)
    937a:	2210      	movs	r2, #16
    937c:	601a      	str	r2, [r3, #0]

	queue_init();
    937e:	f000 fe95 	bl	a0ac <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    9382:	4b59      	ldr	r3, [pc, #356]	; (94e8 <specan+0x17c>)
    9384:	2280      	movs	r2, #128	; 0x80
    9386:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    9388:	2012      	movs	r0, #18
    938a:	f642 3122 	movw	r1, #11042	; 0x2b22
    938e:	f002 f8b1 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    9392:	2014      	movs	r0, #20
    9394:	f241 314b 	movw	r1, #4939	; 0x134b
    9398:	f002 f8ac 	bl	b4f4 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    939c:	2020      	movs	r0, #32
    939e:	f240 1101 	movw	r1, #257	; 0x101
    93a2:	f002 f8a7 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    93a6:	2003      	movs	r0, #3
    93a8:	2129      	movs	r1, #41	; 0x29
    93aa:	f002 f8a3 	bl	b4f4 <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    93ae:	bf00      	nop
    93b0:	f002 f948 	bl	b644 <cc2400_status>
    93b4:	4603      	mov	r3, r0
    93b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    93ba:	2b00      	cmp	r3, #0
    93bc:	d0f8      	beq.n	93b0 <specan+0x44>
	while ((cc2400_status() & FS_LOCK));
    93be:	bf00      	nop
    93c0:	f002 f940 	bl	b644 <cc2400_status>
    93c4:	4603      	mov	r3, r0
    93c6:	f003 0304 	and.w	r3, r3, #4
    93ca:	2b00      	cmp	r3, #0
    93cc:	d1f8      	bne.n	93c0 <specan+0x54>

	while (requested_mode == MODE_SPECAN) {
    93ce:	e07a      	b.n	94c6 <specan+0x15a>
		for (f = low_freq; f < high_freq + 1; f++) {
    93d0:	4b46      	ldr	r3, [pc, #280]	; (94ec <specan+0x180>)
    93d2:	881b      	ldrh	r3, [r3, #0]
    93d4:	87fb      	strh	r3, [r7, #62]	; 0x3e
    93d6:	e06f      	b.n	94b8 <specan+0x14c>
			cc2400_set(FSDIV, f - 1);
    93d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    93da:	3b01      	subs	r3, #1
    93dc:	b29b      	uxth	r3, r3
    93de:	2002      	movs	r0, #2
    93e0:	4619      	mov	r1, r3
    93e2:	f002 f887 	bl	b4f4 <cc2400_set>
			cc2400_strobe(SFSON);
    93e6:	2061      	movs	r0, #97	; 0x61
    93e8:	f002 f936 	bl	b658 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    93ec:	bf00      	nop
    93ee:	f002 f929 	bl	b644 <cc2400_status>
    93f2:	4603      	mov	r3, r0
    93f4:	f003 0304 	and.w	r3, r3, #4
    93f8:	2b00      	cmp	r3, #0
    93fa:	d0f8      	beq.n	93ee <specan+0x82>
			cc2400_strobe(SRX);
    93fc:	2062      	movs	r0, #98	; 0x62
    93fe:	f002 f92b 	bl	b658 <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    9402:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    9406:	607b      	str	r3, [r7, #4]
    9408:	bf00      	nop
    940a:	687b      	ldr	r3, [r7, #4]
    940c:	3b01      	subs	r3, #1
    940e:	607b      	str	r3, [r7, #4]
    9410:	2b00      	cmp	r3, #0
    9412:	d1fa      	bne.n	940a <specan+0x9e>
			buf[3 * i] = (f >> 8) & 0xFF;
    9414:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    9418:	4613      	mov	r3, r2
    941a:	005b      	lsls	r3, r3, #1
    941c:	4413      	add	r3, r2
    941e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    9420:	0a12      	lsrs	r2, r2, #8
    9422:	b292      	uxth	r2, r2
    9424:	b2d2      	uxtb	r2, r2
    9426:	f107 0140 	add.w	r1, r7, #64	; 0x40
    942a:	440b      	add	r3, r1
    942c:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 1] = f  & 0xFF;
    9430:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    9434:	4613      	mov	r3, r2
    9436:	005b      	lsls	r3, r3, #1
    9438:	4413      	add	r3, r2
    943a:	3301      	adds	r3, #1
    943c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    943e:	b2d2      	uxtb	r2, r2
    9440:	f107 0140 	add.w	r1, r7, #64	; 0x40
    9444:	440b      	add	r3, r1
    9446:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    944a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    944e:	4613      	mov	r3, r2
    9450:	005b      	lsls	r3, r3, #1
    9452:	4413      	add	r3, r2
    9454:	1c9c      	adds	r4, r3, #2
    9456:	2006      	movs	r0, #6
    9458:	f002 f836 	bl	b4c8 <cc2400_get>
    945c:	4603      	mov	r3, r0
    945e:	0a1b      	lsrs	r3, r3, #8
    9460:	b29b      	uxth	r3, r3
    9462:	b2da      	uxtb	r2, r3
    9464:	f107 0340 	add.w	r3, r7, #64	; 0x40
    9468:	4423      	add	r3, r4
    946a:	f803 2c38 	strb.w	r2, [r3, #-56]
			i++;
    946e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    9472:	3301      	adds	r3, #1
    9474:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (i == 16) {
    9478:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    947c:	2b10      	cmp	r3, #16
    947e:	d10d      	bne.n	949c <specan+0x130>
				enqueue(SPECAN, buf);
    9480:	f107 0308 	add.w	r3, r7, #8
    9484:	2004      	movs	r0, #4
    9486:	4619      	mov	r1, r3
    9488:	f7fb f81e 	bl	44c8 <enqueue>
				i = 0;
    948c:	2300      	movs	r3, #0
    948e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				handle_usb(clkn);
    9492:	4b17      	ldr	r3, [pc, #92]	; (94f0 <specan+0x184>)
    9494:	681b      	ldr	r3, [r3, #0]
    9496:	4618      	mov	r0, r3
    9498:	f000 fea8 	bl	a1ec <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    949c:	2064      	movs	r0, #100	; 0x64
    949e:	f002 f8db 	bl	b658 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    94a2:	bf00      	nop
    94a4:	f002 f8ce 	bl	b644 <cc2400_status>
    94a8:	4603      	mov	r3, r0
    94aa:	f003 0304 	and.w	r3, r3, #4
    94ae:	2b00      	cmp	r3, #0
    94b0:	d1f8      	bne.n	94a4 <specan+0x138>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    94b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    94b4:	3301      	adds	r3, #1
    94b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
    94b8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    94ba:	4b0e      	ldr	r3, [pc, #56]	; (94f4 <specan+0x188>)
    94bc:	881b      	ldrh	r3, [r3, #0]
    94be:	b29b      	uxth	r3, r3
    94c0:	3301      	adds	r3, #1
    94c2:	429a      	cmp	r2, r3
    94c4:	db88      	blt.n	93d8 <specan+0x6c>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
    94c6:	4b0c      	ldr	r3, [pc, #48]	; (94f8 <specan+0x18c>)
    94c8:	781b      	ldrb	r3, [r3, #0]
    94ca:	b2db      	uxtb	r3, r3
    94cc:	2b04      	cmp	r3, #4
    94ce:	f43f af7f 	beq.w	93d0 <specan+0x64>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	mode = MODE_IDLE;
    94d2:	4b0a      	ldr	r3, [pc, #40]	; (94fc <specan+0x190>)
    94d4:	2200      	movs	r2, #0
    94d6:	701a      	strb	r2, [r3, #0]
	RXLED_CLR;
    94d8:	4b09      	ldr	r3, [pc, #36]	; (9500 <specan+0x194>)
    94da:	2210      	movs	r2, #16
    94dc:	601a      	str	r2, [r3, #0]
}
    94de:	3744      	adds	r7, #68	; 0x44
    94e0:	46bd      	mov	sp, r7
    94e2:	bd90      	pop	{r4, r7, pc}
    94e4:	2009c038 	.word	0x2009c038
    94e8:	2009c058 	.word	0x2009c058
    94ec:	1000049e 	.word	0x1000049e
    94f0:	10000bf4 	.word	0x10000bf4
    94f4:	100004a0 	.word	0x100004a0
    94f8:	10000a3f 	.word	0x10000a3f
    94fc:	10000a3e 	.word	0x10000a3e
    9500:	2009c03c 	.word	0x2009c03c

00009504 <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    9504:	b580      	push	{r7, lr}
    9506:	b084      	sub	sp, #16
    9508:	af00      	add	r7, sp, #0
	int8_t lvl;
	u8 i = 0;
    950a:	2300      	movs	r3, #0
    950c:	73fb      	strb	r3, [r7, #15]
	u16 channels[3] = {2412, 2437, 2462};
    950e:	4a5b      	ldr	r2, [pc, #364]	; (967c <led_specan+0x178>)
    9510:	f107 0308 	add.w	r3, r7, #8
    9514:	6810      	ldr	r0, [r2, #0]
    9516:	6018      	str	r0, [r3, #0]
    9518:	8892      	ldrh	r2, [r2, #4]
    951a:	809a      	strh	r2, [r3, #4]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    951c:	4b58      	ldr	r3, [pc, #352]	; (9680 <led_specan+0x17c>)
    951e:	2280      	movs	r2, #128	; 0x80
    9520:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    9522:	2012      	movs	r0, #18
    9524:	f642 3122 	movw	r1, #11042	; 0x2b22
    9528:	f001 ffe4 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    952c:	2014      	movs	r0, #20
    952e:	f241 314b 	movw	r1, #4939	; 0x134b
    9532:	f001 ffdf 	bl	b4f4 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    9536:	2020      	movs	r0, #32
    9538:	f240 1101 	movw	r1, #257	; 0x101
    953c:	f001 ffda 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    9540:	2003      	movs	r0, #3
    9542:	2129      	movs	r1, #41	; 0x29
    9544:	f001 ffd6 	bl	b4f4 <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    9548:	2006      	movs	r0, #6
    954a:	21f1      	movs	r1, #241	; 0xf1
    954c:	f001 ffd2 	bl	b4f4 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    9550:	bf00      	nop
    9552:	f002 f877 	bl	b644 <cc2400_status>
    9556:	4603      	mov	r3, r0
    9558:	f003 0340 	and.w	r3, r3, #64	; 0x40
    955c:	2b00      	cmp	r3, #0
    955e:	d0f8      	beq.n	9552 <led_specan+0x4e>
	while ((cc2400_status() & FS_LOCK));
    9560:	bf00      	nop
    9562:	f002 f86f 	bl	b644 <cc2400_status>
    9566:	4603      	mov	r3, r0
    9568:	f003 0304 	and.w	r3, r3, #4
    956c:	2b00      	cmp	r3, #0
    956e:	d1f8      	bne.n	9562 <led_specan+0x5e>

	while (requested_mode == MODE_LED_SPECAN) {
    9570:	e079      	b.n	9666 <led_specan+0x162>
		cc2400_set(FSDIV, channels[i] - 1);
    9572:	7bfb      	ldrb	r3, [r7, #15]
    9574:	005b      	lsls	r3, r3, #1
    9576:	f107 0210 	add.w	r2, r7, #16
    957a:	4413      	add	r3, r2
    957c:	f833 3c08 	ldrh.w	r3, [r3, #-8]
    9580:	3b01      	subs	r3, #1
    9582:	b29b      	uxth	r3, r3
    9584:	2002      	movs	r0, #2
    9586:	4619      	mov	r1, r3
    9588:	f001 ffb4 	bl	b4f4 <cc2400_set>
		cc2400_strobe(SFSON);
    958c:	2061      	movs	r0, #97	; 0x61
    958e:	f002 f863 	bl	b658 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    9592:	bf00      	nop
    9594:	f002 f856 	bl	b644 <cc2400_status>
    9598:	4603      	mov	r3, r0
    959a:	f003 0304 	and.w	r3, r3, #4
    959e:	2b00      	cmp	r3, #0
    95a0:	d0f8      	beq.n	9594 <led_specan+0x90>
		cc2400_strobe(SRX);
    95a2:	2062      	movs	r0, #98	; 0x62
    95a4:	f002 f858 	bl	b658 <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    95a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    95ac:	607b      	str	r3, [r7, #4]
    95ae:	bf00      	nop
    95b0:	687b      	ldr	r3, [r7, #4]
    95b2:	3b01      	subs	r3, #1
    95b4:	607b      	str	r3, [r7, #4]
    95b6:	2b00      	cmp	r3, #0
    95b8:	d1fa      	bne.n	95b0 <led_specan+0xac>
		lvl = cc2400_get(RSSI) >> 8;
    95ba:	2006      	movs	r0, #6
    95bc:	f001 ff84 	bl	b4c8 <cc2400_get>
    95c0:	4603      	mov	r3, r0
    95c2:	0a1b      	lsrs	r3, r3, #8
    95c4:	b29b      	uxth	r3, r3
    95c6:	73bb      	strb	r3, [r7, #14]
        if (lvl > rssi_threshold) {
    95c8:	4b2e      	ldr	r3, [pc, #184]	; (9684 <led_specan+0x180>)
    95ca:	781b      	ldrb	r3, [r3, #0]
    95cc:	b2db      	uxtb	r3, r3
    95ce:	f997 200e 	ldrsb.w	r2, [r7, #14]
    95d2:	b25b      	sxtb	r3, r3
    95d4:	429a      	cmp	r2, r3
    95d6:	dd15      	ble.n	9604 <led_specan+0x100>
            switch (i) {
    95d8:	7bfb      	ldrb	r3, [r7, #15]
    95da:	2b01      	cmp	r3, #1
    95dc:	d009      	beq.n	95f2 <led_specan+0xee>
    95de:	2b02      	cmp	r3, #2
    95e0:	d00b      	beq.n	95fa <led_specan+0xf6>
    95e2:	2b00      	cmp	r3, #0
    95e4:	d000      	beq.n	95e8 <led_specan+0xe4>
    95e6:	e021      	b.n	962c <led_specan+0x128>
                case 0:
                    TXLED_SET;
    95e8:	4b27      	ldr	r3, [pc, #156]	; (9688 <led_specan+0x184>)
    95ea:	f44f 7280 	mov.w	r2, #256	; 0x100
    95ee:	601a      	str	r2, [r3, #0]
                    break;
    95f0:	e007      	b.n	9602 <led_specan+0xfe>
                case 1:
                    RXLED_SET;
    95f2:	4b25      	ldr	r3, [pc, #148]	; (9688 <led_specan+0x184>)
    95f4:	2210      	movs	r2, #16
    95f6:	601a      	str	r2, [r3, #0]
                    break;
    95f8:	e003      	b.n	9602 <led_specan+0xfe>
                case 2:
                    USRLED_SET;
    95fa:	4b23      	ldr	r3, [pc, #140]	; (9688 <led_specan+0x184>)
    95fc:	2202      	movs	r2, #2
    95fe:	601a      	str	r2, [r3, #0]
                    break;
    9600:	bf00      	nop
    9602:	e013      	b.n	962c <led_specan+0x128>
            }
        }
        else {
            switch (i) {
    9604:	7bfb      	ldrb	r3, [r7, #15]
    9606:	2b01      	cmp	r3, #1
    9608:	d008      	beq.n	961c <led_specan+0x118>
    960a:	2b02      	cmp	r3, #2
    960c:	d00a      	beq.n	9624 <led_specan+0x120>
    960e:	2b00      	cmp	r3, #0
    9610:	d10c      	bne.n	962c <led_specan+0x128>
                case 0:
                    TXLED_CLR;
    9612:	4b1e      	ldr	r3, [pc, #120]	; (968c <led_specan+0x188>)
    9614:	f44f 7280 	mov.w	r2, #256	; 0x100
    9618:	601a      	str	r2, [r3, #0]
                    break;
    961a:	e007      	b.n	962c <led_specan+0x128>
                case 1:
                    RXLED_CLR;
    961c:	4b1b      	ldr	r3, [pc, #108]	; (968c <led_specan+0x188>)
    961e:	2210      	movs	r2, #16
    9620:	601a      	str	r2, [r3, #0]
                    break;
    9622:	e003      	b.n	962c <led_specan+0x128>
                case 2:
                    USRLED_CLR;
    9624:	4b19      	ldr	r3, [pc, #100]	; (968c <led_specan+0x188>)
    9626:	2202      	movs	r2, #2
    9628:	601a      	str	r2, [r3, #0]
                    break;
    962a:	bf00      	nop
            }
        }

		i = (i+1) % 3;
    962c:	7bfb      	ldrb	r3, [r7, #15]
    962e:	1c5a      	adds	r2, r3, #1
    9630:	4b17      	ldr	r3, [pc, #92]	; (9690 <led_specan+0x18c>)
    9632:	fb83 3102 	smull	r3, r1, r3, r2
    9636:	17d3      	asrs	r3, r2, #31
    9638:	1ac9      	subs	r1, r1, r3
    963a:	460b      	mov	r3, r1
    963c:	005b      	lsls	r3, r3, #1
    963e:	440b      	add	r3, r1
    9640:	1ad1      	subs	r1, r2, r3
    9642:	460b      	mov	r3, r1
    9644:	73fb      	strb	r3, [r7, #15]

		handle_usb(clkn);
    9646:	4b13      	ldr	r3, [pc, #76]	; (9694 <led_specan+0x190>)
    9648:	681b      	ldr	r3, [r3, #0]
    964a:	4618      	mov	r0, r3
    964c:	f000 fdce 	bl	a1ec <handle_usb>
        //wait(1);
		cc2400_strobe(SRFOFF);
    9650:	2064      	movs	r0, #100	; 0x64
    9652:	f002 f801 	bl	b658 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    9656:	bf00      	nop
    9658:	f001 fff4 	bl	b644 <cc2400_status>
    965c:	4603      	mov	r3, r0
    965e:	f003 0304 	and.w	r3, r3, #4
    9662:	2b00      	cmp	r3, #0
    9664:	d1f8      	bne.n	9658 <led_specan+0x154>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols

	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_LED_SPECAN) {
    9666:	4b0c      	ldr	r3, [pc, #48]	; (9698 <led_specan+0x194>)
    9668:	781b      	ldrb	r3, [r3, #0]
    966a:	b2db      	uxtb	r3, r3
    966c:	2b07      	cmp	r3, #7
    966e:	d080      	beq.n	9572 <led_specan+0x6e>
		handle_usb(clkn);
        //wait(1);
		cc2400_strobe(SRFOFF);
		while ((cc2400_status() & FS_LOCK));
	}
	mode = MODE_IDLE;
    9670:	4b0a      	ldr	r3, [pc, #40]	; (969c <led_specan+0x198>)
    9672:	2200      	movs	r2, #0
    9674:	701a      	strb	r2, [r3, #0]
}
    9676:	3710      	adds	r7, #16
    9678:	46bd      	mov	sp, r7
    967a:	bd80      	pop	{r7, pc}
    967c:	0000dacc 	.word	0x0000dacc
    9680:	2009c058 	.word	0x2009c058
    9684:	100004a2 	.word	0x100004a2
    9688:	2009c038 	.word	0x2009c038
    968c:	2009c03c 	.word	0x2009c03c
    9690:	55555556 	.word	0x55555556
    9694:	10000bf4 	.word	0x10000bf4
    9698:	10000a3f 	.word	0x10000a3f
    969c:	10000a3e 	.word	0x10000a3e

000096a0 <cc2400_txtest>:

void cc2400_txtest(volatile u8 *mod_ptr)
{
    96a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    96a2:	b0a3      	sub	sp, #140	; 0x8c
    96a4:	af00      	add	r7, sp, #0
    96a6:	6078      	str	r0, [r7, #4]
  unsigned i, j;
  int numPkt = 10;
    96a8:	230a      	movs	r3, #10
    96aa:	67bb      	str	r3, [r7, #120]	; 0x78
  u8 payload[41] = {0xb3, 0x6f, 0x00, 0x4b,
    96ac:	4b71      	ldr	r3, [pc, #452]	; (9874 <cc2400_txtest+0x1d4>)
    96ae:	461c      	mov	r4, r3
    96b0:	f107 0648 	add.w	r6, r7, #72	; 0x48
    96b4:	f104 0e20 	add.w	lr, r4, #32
    96b8:	4635      	mov	r5, r6
    96ba:	4623      	mov	r3, r4
    96bc:	6818      	ldr	r0, [r3, #0]
    96be:	6859      	ldr	r1, [r3, #4]
    96c0:	689a      	ldr	r2, [r3, #8]
    96c2:	68db      	ldr	r3, [r3, #12]
    96c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    96c6:	3410      	adds	r4, #16
    96c8:	3610      	adds	r6, #16
    96ca:	4574      	cmp	r4, lr
    96cc:	d1f4      	bne.n	96b8 <cc2400_txtest+0x18>
    96ce:	4633      	mov	r3, r6
    96d0:	4622      	mov	r2, r4
    96d2:	6810      	ldr	r0, [r2, #0]
    96d4:	6851      	ldr	r1, [r2, #4]
    96d6:	c303      	stmia	r3!, {r0, r1}
    96d8:	7a12      	ldrb	r2, [r2, #8]
    96da:	701a      	strb	r2, [r3, #0]
		0xf3, 0xb6, 0x51, 0x30, 
		0xe0};
  u8 txbuf[64];
  u8 tx_len;
  u16 gio_save;
  u8 len = 41;
    96dc:	2329      	movs	r3, #41	; 0x29
    96de:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
		byte >>= 1; 
	}
 	
  }
*/
  cc2400_set(MANAND, 0x7fff);
    96e2:	200d      	movs	r0, #13
    96e4:	f647 71ff 	movw	r1, #32767	; 0x7fff
    96e8:	f001 ff04 	bl	b4f4 <cc2400_set>
  cc2400_set(LMTST, 0x2b22);  
    96ec:	2012      	movs	r0, #18
    96ee:	f642 3122 	movw	r1, #11042	; 0x2b22
    96f2:	f001 feff 	bl	b4f4 <cc2400_set>
  cc2400_set(MDMTST0, 0x124b);  
    96f6:	2014      	movs	r0, #20
    96f8:	f241 214b 	movw	r1, #4683	; 0x124b
    96fc:	f001 fefa 	bl	b4f4 <cc2400_set>
  cc2400_set(GRMDM, 0x0d61);  
    9700:	2020      	movs	r0, #32
    9702:	f640 5161 	movw	r1, #3425	; 0xd61
    9706:	f001 fef5 	bl	b4f4 <cc2400_set>
  cc2400_set(FSDIV, channel);  
    970a:	4b5b      	ldr	r3, [pc, #364]	; (9878 <cc2400_txtest+0x1d8>)
    970c:	881b      	ldrh	r3, [r3, #0]
    970e:	b29b      	uxth	r3, r3
    9710:	2002      	movs	r0, #2
    9712:	4619      	mov	r1, r3
    9714:	f001 feee 	bl	b4f4 <cc2400_set>
  cc2400_set(FREND, 8 | 0);  
    9718:	2005      	movs	r0, #5
    971a:	2108      	movs	r1, #8
    971c:	f001 feea 	bl	b4f4 <cc2400_set>
  cc2400_set(MDMCTRL, 0x0040);  
    9720:	2003      	movs	r0, #3
    9722:	2140      	movs	r1, #64	; 0x40
    9724:	f001 fee6 	bl	b4f4 <cc2400_set>
//  cc2400_set(INT, 0x0010); // FIFO_Threshold: 16 bytes
  cc2400_set(INT, 0x0014); // FIFO_Threshold: 20 bytes
    9728:	2023      	movs	r0, #35	; 0x23
    972a:	2114      	movs	r1, #20
    972c:	f001 fee2 	bl	b4f4 <cc2400_set>
//  cc2400_set(INT, 0x000c); // FIFO_Threshold: 12 bytes
  
  gio_save = cc2400_get(IOCFG);
    9730:	2008      	movs	r0, #8
    9732:	f001 fec9 	bl	b4c8 <cc2400_get>
    9736:	4603      	mov	r3, r0
    9738:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
  cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));  
    973c:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
    9740:	f3c3 0308 	ubfx	r3, r3, #0, #9
    9744:	b29b      	uxth	r3, r3
    9746:	f443 439c 	orr.w	r3, r3, #19968	; 0x4e00
    974a:	b29b      	uxth	r3, r3
    974c:	b29b      	uxth	r3, r3
    974e:	2008      	movs	r0, #8
    9750:	4619      	mov	r1, r3
    9752:	f001 fecf 	bl	b4f4 <cc2400_set>

  while (!(cc2400_status() & XOSC16M_STABLE));
    9756:	bf00      	nop
    9758:	f001 ff74 	bl	b644 <cc2400_status>
    975c:	4603      	mov	r3, r0
    975e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9762:	2b00      	cmp	r3, #0
    9764:	d0f8      	beq.n	9758 <cc2400_txtest+0xb8>
  cc2400_strobe(SFSON);
    9766:	2061      	movs	r0, #97	; 0x61
    9768:	f001 ff76 	bl	b658 <cc2400_strobe>
  while (!(cc2400_status() & FS_LOCK));
    976c:	bf00      	nop
    976e:	f001 ff69 	bl	b644 <cc2400_status>
    9772:	4603      	mov	r3, r0
    9774:	f003 0304 	and.w	r3, r3, #4
    9778:	2b00      	cmp	r3, #0
    977a:	d0f8      	beq.n	976e <cc2400_txtest+0xce>
  TXLED_SET;
    977c:	4b3f      	ldr	r3, [pc, #252]	; (987c <cc2400_txtest+0x1dc>)
    977e:	f44f 7280 	mov.w	r2, #256	; 0x100
    9782:	601a      	str	r2, [r3, #0]
  PAEN_SET;
    9784:	4b3e      	ldr	r3, [pc, #248]	; (9880 <cc2400_txtest+0x1e0>)
    9786:	2280      	movs	r2, #128	; 0x80
    9788:	601a      	str	r2, [r3, #0]

  while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    978a:	bf00      	nop
    978c:	200e      	movs	r0, #14
    978e:	f001 fe9b 	bl	b4c8 <cc2400_get>
    9792:	4603      	mov	r3, r0
    9794:	f003 031f 	and.w	r3, r3, #31
    9798:	2b0f      	cmp	r3, #15
    979a:	d1f7      	bne.n	978c <cc2400_txtest+0xec>

 
  for (j = 0; j < numPkt; j++)
    979c:	2300      	movs	r3, #0
    979e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    97a2:	e047      	b.n	9834 <cc2400_txtest+0x194>
  {
  	cc2400_strobe(STX);
    97a4:	2063      	movs	r0, #99	; 0x63
    97a6:	f001 ff57 	bl	b658 <cc2400_strobe>
  
 	for (i = 0; i < len; i += 16)
    97aa:	2300      	movs	r3, #0
    97ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    97b0:	e024      	b.n	97fc <cc2400_txtest+0x15c>
  	{
		while (GIO6);
    97b2:	bf00      	nop
    97b4:	4b33      	ldr	r3, [pc, #204]	; (9884 <cc2400_txtest+0x1e4>)
    97b6:	681b      	ldr	r3, [r3, #0]
    97b8:	f003 0304 	and.w	r3, r3, #4
    97bc:	2b00      	cmp	r3, #0
    97be:	d1f9      	bne.n	97b4 <cc2400_txtest+0x114>
		tx_len = len - i;
    97c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    97c4:	b2db      	uxtb	r3, r3
    97c6:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
    97ca:	1ad3      	subs	r3, r2, r3
    97cc:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
    		if (tx_len > 16)
    97d0:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
    97d4:	2b10      	cmp	r3, #16
    97d6:	d902      	bls.n	97de <cc2400_txtest+0x13e>
			tx_len = 16;
    97d8:	2310      	movs	r3, #16
    97da:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
//	cc2400_fifo_write(tx_len, payload + i);
		cc2400_spi_buf(FIFOREG, 16, payload + i);
    97de:	f107 0248 	add.w	r2, r7, #72	; 0x48
    97e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    97e6:	4413      	add	r3, r2
    97e8:	2070      	movs	r0, #112	; 0x70
    97ea:	2110      	movs	r1, #16
    97ec:	461a      	mov	r2, r3
    97ee:	f001 fec3 	bl	b578 <cc2400_spi_buf>
 
  for (j = 0; j < numPkt; j++)
  {
  	cc2400_strobe(STX);
  
 	for (i = 0; i < len; i += 16)
    97f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    97f6:	3310      	adds	r3, #16
    97f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    97fc:	f897 2077 	ldrb.w	r2, [r7, #119]	; 0x77
    9800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    9804:	429a      	cmp	r2, r3
    9806:	d8d4      	bhi.n	97b2 <cc2400_txtest+0x112>
			tx_len = 16;
//	cc2400_fifo_write(tx_len, payload + i);
		cc2400_spi_buf(FIFOREG, 16, payload + i);
 	}
  
  	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9808:	bf00      	nop
    980a:	200e      	movs	r0, #14
    980c:	f001 fe5c 	bl	b4c8 <cc2400_get>
    9810:	4603      	mov	r3, r0
    9812:	f003 031f 	and.w	r3, r3, #31
    9816:	2b0f      	cmp	r3, #15
    9818:	d1f7      	bne.n	980a <cc2400_txtest+0x16a>
//	int k = 1428571; while (k--);
	int k = 100000; while (k--);
    981a:	4b1b      	ldr	r3, [pc, #108]	; (9888 <cc2400_txtest+0x1e8>)
    981c:	67fb      	str	r3, [r7, #124]	; 0x7c
    981e:	bf00      	nop
    9820:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    9822:	1e5a      	subs	r2, r3, #1
    9824:	67fa      	str	r2, [r7, #124]	; 0x7c
    9826:	2b00      	cmp	r3, #0
    9828:	d1fa      	bne.n	9820 <cc2400_txtest+0x180>
  PAEN_SET;

  while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);

 
  for (j = 0; j < numPkt; j++)
    982a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    982e:	3301      	adds	r3, #1
    9830:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    9834:	6fba      	ldr	r2, [r7, #120]	; 0x78
    9836:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    983a:	429a      	cmp	r2, r3
    983c:	d8b2      	bhi.n	97a4 <cc2400_txtest+0x104>
  
  	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
//	int k = 1428571; while (k--);
	int k = 100000; while (k--);
  }
  TXLED_CLR;
    983e:	4b13      	ldr	r3, [pc, #76]	; (988c <cc2400_txtest+0x1ec>)
    9840:	f44f 7280 	mov.w	r2, #256	; 0x100
    9844:	601a      	str	r2, [r3, #0]
  
  cc2400_strobe(SRFOFF);
    9846:	2064      	movs	r0, #100	; 0x64
    9848:	f001 ff06 	bl	b658 <cc2400_strobe>
  while ((cc2400_status() & FS_LOCK));
    984c:	bf00      	nop
    984e:	f001 fef9 	bl	b644 <cc2400_status>
    9852:	4603      	mov	r3, r0
    9854:	f003 0304 	and.w	r3, r3, #4
    9858:	2b00      	cmp	r3, #0
    985a:	d1f8      	bne.n	984e <cc2400_txtest+0x1ae>
  PAEN_CLR;
    985c:	4b0c      	ldr	r3, [pc, #48]	; (9890 <cc2400_txtest+0x1f0>)
    985e:	2280      	movs	r2, #128	; 0x80
    9860:	601a      	str	r2, [r3, #0]
  cc2400_set(IOCFG, gio_save);
    9862:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
    9866:	2008      	movs	r0, #8
    9868:	4619      	mov	r1, r3
    986a:	f001 fe43 	bl	b4f4 <cc2400_set>
}
    986e:	378c      	adds	r7, #140	; 0x8c
    9870:	46bd      	mov	sp, r7
    9872:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9874:	0000dad4 	.word	0x0000dad4
    9878:	1000049c 	.word	0x1000049c
    987c:	2009c038 	.word	0x2009c038
    9880:	2009c058 	.word	0x2009c058
    9884:	2009c054 	.word	0x2009c054
    9888:	000186a0 	.word	0x000186a0
    988c:	2009c03c 	.word	0x2009c03c
    9890:	2009c05c 	.word	0x2009c05c

00009894 <main>:

int main()
{
    9894:	b580      	push	{r7, lr}
    9896:	af00      	add	r7, sp, #0
	ubertooth_init();
    9898:	f001 fd50 	bl	b33c <ubertooth_init>
//	clkn_init();
	ubertooth_usb_init(vendor_request_handler);
    989c:	485c      	ldr	r0, [pc, #368]	; (9a10 <main+0x17c>)
    989e:	f000 fbdd 	bl	a05c <ubertooth_usb_init>

	while (1) {
		handle_usb(clkn);
    98a2:	4b5c      	ldr	r3, [pc, #368]	; (9a14 <main+0x180>)
    98a4:	681b      	ldr	r3, [r3, #0]
    98a6:	4618      	mov	r0, r3
    98a8:	f000 fca0 	bl	a1ec <handle_usb>
		if(requested_mode != mode)
    98ac:	4b5a      	ldr	r3, [pc, #360]	; (9a18 <main+0x184>)
    98ae:	781b      	ldrb	r3, [r3, #0]
    98b0:	b2da      	uxtb	r2, r3
    98b2:	4b5a      	ldr	r3, [pc, #360]	; (9a1c <main+0x188>)
    98b4:	781b      	ldrb	r3, [r3, #0]
    98b6:	b2db      	uxtb	r3, r3
    98b8:	429a      	cmp	r2, r3
    98ba:	f000 80a8 	beq.w	9a0e <main+0x17a>
			switch (requested_mode) {
    98be:	4b56      	ldr	r3, [pc, #344]	; (9a18 <main+0x184>)
    98c0:	781b      	ldrb	r3, [r3, #0]
    98c2:	b2db      	uxtb	r3, r3
    98c4:	2b13      	cmp	r3, #19
    98c6:	f200 80a1 	bhi.w	9a0c <main+0x178>
    98ca:	a201      	add	r2, pc, #4	; (adr r2, 98d0 <main+0x3c>)
    98cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    98d0:	00009a07 	.word	0x00009a07
    98d4:	0000992d 	.word	0x0000992d
    98d8:	00009a0d 	.word	0x00009a0d
    98dc:	0000999f 	.word	0x0000999f
    98e0:	000099e7 	.word	0x000099e7
    98e4:	000099b3 	.word	0x000099b3
    98e8:	000099d9 	.word	0x000099d9
    98ec:	000099ed 	.word	0x000099ed
    98f0:	00009981 	.word	0x00009981
    98f4:	0000998d 	.word	0x0000998d
    98f8:	00009993 	.word	0x00009993
    98fc:	00009921 	.word	0x00009921
    9900:	00009999 	.word	0x00009999
    9904:	000099f3 	.word	0x000099f3
    9908:	00009951 	.word	0x00009951
    990c:	00009969 	.word	0x00009969
    9910:	00009975 	.word	0x00009975
    9914:	00009945 	.word	0x00009945
    9918:	0000995d 	.word	0x0000995d
    991c:	00009939 	.word	0x00009939
				 case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    9920:	2001      	movs	r0, #1
    9922:	f001 fc03 	bl	b12c <wait>
					reset();
    9926:	f001 ffa1 	bl	b86c <reset>
					break;
    992a:	e070      	b.n	9a0e <main+0x17a>
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    992c:	4b3b      	ldr	r3, [pc, #236]	; (9a1c <main+0x188>)
    992e:	2201      	movs	r2, #1
    9930:	701a      	strb	r2, [r3, #0]
					bt_stream_legacy();
    9932:	f7fd fadd 	bl	6ef0 <bt_stream_legacy>
					break;
    9936:	e06a      	b.n	9a0e <main+0x17a>
				case MODE_RX_SNIFF:
					mode = MODE_RX_SNIFF;
    9938:	4b38      	ldr	r3, [pc, #224]	; (9a1c <main+0x188>)
    993a:	2213      	movs	r2, #19
    993c:	701a      	strb	r2, [r3, #0]
					bt_stream_sniff();
    993e:	f7fd fcab 	bl	7298 <bt_stream_sniff>
					break;
    9942:	e064      	b.n	9a0e <main+0x17a>

				case MODE_RX_RSSI:
					mode = MODE_RX_RSSI;
    9944:	4b35      	ldr	r3, [pc, #212]	; (9a1c <main+0x188>)
    9946:	2211      	movs	r2, #17
    9948:	701a      	strb	r2, [r3, #0]
					bt_stream_rssi();
    994a:	f7fd ff39 	bl	77c0 <bt_stream_rssi>
					break;
    994e:	e05e      	b.n	9a0e <main+0x17a>
				case MODE_RX_FREQ:
					mode = MODE_RX_FREQ;
    9950:	4b32      	ldr	r3, [pc, #200]	; (9a1c <main+0x188>)
    9952:	220e      	movs	r2, #14
    9954:	701a      	strb	r2, [r3, #0]
					bt_stream_freq();
    9956:	f7fd f8c9 	bl	6aec <bt_stream_freq>
					break;
    995a:	e058      	b.n	9a0e <main+0x17a>
				case MODE_RX_CFO:
					mode = MODE_RX_CFO;
    995c:	4b2f      	ldr	r3, [pc, #188]	; (9a1c <main+0x188>)
    995e:	2212      	movs	r2, #18
    9960:	701a      	strb	r2, [r3, #0]
					bt_stream_cfo();
    9962:	f7fd fe5d 	bl	7620 <bt_stream_cfo>
					break;
    9966:	e052      	b.n	9a0e <main+0x17a>

				case MODE_RX_PROPOSED:
					mode = MODE_RX_PROPOSED;
    9968:	4b2c      	ldr	r3, [pc, #176]	; (9a1c <main+0x188>)
    996a:	220f      	movs	r2, #15
    996c:	701a      	strb	r2, [r3, #0]
					bt_stream_proposed();
    996e:	f7fc ffcd 	bl	690c <bt_stream_proposed>
					break;
    9972:	e04c      	b.n	9a0e <main+0x17a>
				case MODE_RX_HOP:
					mode = MODE_RX_HOP;
    9974:	4b29      	ldr	r3, [pc, #164]	; (9a1c <main+0x188>)
    9976:	2210      	movs	r2, #16
    9978:	701a      	strb	r2, [r3, #0]
					bt_stream_hop ();
    997a:	f7fc fdcb 	bl	6514 <bt_stream_hop>
					break;
    997e:	e046      	b.n	9a0e <main+0x17a>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    9980:	4b26      	ldr	r3, [pc, #152]	; (9a1c <main+0x188>)
    9982:	2208      	movs	r2, #8
    9984:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    9986:	f7fd ffd9 	bl	793c <bt_stream_rx>
					break;
    998a:	e040      	b.n	9a0e <main+0x17a>
				case MODE_BT_FOLLOW_LE:
					bt_follow_le();
    998c:	f7ff f844 	bl	8a18 <bt_follow_le>
					break;
    9990:	e03d      	b.n	9a0e <main+0x17a>
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    9992:	f7ff fc2b 	bl	91ec <bt_promisc_le>
					break;
    9996:	e03a      	b.n	9a0e <main+0x17a>
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
    9998:	f7ff fc6c 	bl	9274 <bt_slave_le>
					break;
    999c:	e037      	b.n	9a0e <main+0x17a>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    999e:	4b1f      	ldr	r3, [pc, #124]	; (9a1c <main+0x188>)
    99a0:	2203      	movs	r2, #3
    99a2:	701a      	strb	r2, [r3, #0]
					cc2400_txtest(&modulation);
    99a4:	481e      	ldr	r0, [pc, #120]	; (9a20 <main+0x18c>)
    99a6:	f7ff fe7b 	bl	96a0 <cc2400_txtest>
					requested_mode = MODE_IDLE;
    99aa:	4b1b      	ldr	r3, [pc, #108]	; (9a18 <main+0x184>)
    99ac:	2200      	movs	r2, #0
    99ae:	701a      	strb	r2, [r3, #0]
					break;
    99b0:	e02d      	b.n	9a0e <main+0x17a>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    99b2:	4b1a      	ldr	r3, [pc, #104]	; (9a1c <main+0x188>)
    99b4:	2205      	movs	r2, #5
    99b6:	701a      	strb	r2, [r3, #0]
					cc2400_rangetest(&channel);
    99b8:	481a      	ldr	r0, [pc, #104]	; (9a24 <main+0x190>)
    99ba:	f000 fc35 	bl	a228 <cc2400_rangetest>
					mode = MODE_IDLE;
    99be:	4b17      	ldr	r3, [pc, #92]	; (9a1c <main+0x188>)
    99c0:	2200      	movs	r2, #0
    99c2:	701a      	strb	r2, [r3, #0]
					if (requested_mode == MODE_RANGE_TEST)
    99c4:	4b14      	ldr	r3, [pc, #80]	; (9a18 <main+0x184>)
    99c6:	781b      	ldrb	r3, [r3, #0]
    99c8:	b2db      	uxtb	r3, r3
    99ca:	2b05      	cmp	r3, #5
    99cc:	d103      	bne.n	99d6 <main+0x142>
						requested_mode = MODE_IDLE;
    99ce:	4b12      	ldr	r3, [pc, #72]	; (9a18 <main+0x184>)
    99d0:	2200      	movs	r2, #0
    99d2:	701a      	strb	r2, [r3, #0]
					break;
    99d4:	e01b      	b.n	9a0e <main+0x17a>
    99d6:	e01a      	b.n	9a0e <main+0x17a>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    99d8:	4b10      	ldr	r3, [pc, #64]	; (9a1c <main+0x188>)
    99da:	2206      	movs	r2, #6
    99dc:	701a      	strb	r2, [r3, #0]
					cc2400_repeater(&channel);
    99de:	4811      	ldr	r0, [pc, #68]	; (9a24 <main+0x190>)
    99e0:	f000 fe40 	bl	a664 <cc2400_repeater>
					break;
    99e4:	e013      	b.n	9a0e <main+0x17a>
				case MODE_SPECAN:
					specan();
    99e6:	f7ff fcc1 	bl	936c <specan>
					break;
    99ea:	e010      	b.n	9a0e <main+0x17a>
				case MODE_LED_SPECAN:
					led_specan();
    99ec:	f7ff fd8a 	bl	9504 <led_specan>
					break;
    99f0:	e00d      	b.n	9a0e <main+0x17a>
				case MODE_EGO:
					mode = MODE_EGO;
    99f2:	4b0a      	ldr	r3, [pc, #40]	; (9a1c <main+0x188>)
    99f4:	220d      	movs	r2, #13
    99f6:	701a      	strb	r2, [r3, #0]
					ego_main(ego_mode);
    99f8:	4b0b      	ldr	r3, [pc, #44]	; (9a28 <main+0x194>)
    99fa:	781b      	ldrb	r3, [r3, #0]
    99fc:	b2db      	uxtb	r3, r3
    99fe:	4618      	mov	r0, r3
    9a00:	f001 fae2 	bl	afc8 <ego_main>
					break;
    9a04:	e003      	b.n	9a0e <main+0x17a>
				case MODE_IDLE:
					cc2400_idle();
    9a06:	f7fc f9cb 	bl	5da0 <cc2400_idle>
					break;
    9a0a:	e000      	b.n	9a0e <main+0x17a>
				default:
					/* This is really an error state, but what can you do? */
					break;
    9a0c:	bf00      	nop
			}
	}
    9a0e:	e748      	b.n	98a2 <main+0xe>
    9a10:	00004b3d 	.word	0x00004b3d
    9a14:	10000bf4 	.word	0x10000bf4
    9a18:	10000a3f 	.word	0x10000a3f
    9a1c:	10000a3e 	.word	0x10000a3e
    9a20:	10000a42 	.word	0x10000a42
    9a24:	1000049c 	.word	0x1000049c
    9a28:	10000a41 	.word	0x10000a41

00009a2c <perm5>:
	}
}

/* 5 bit permutation */
u8 perm5(u8 z, u8 p_high, u16 p_low)
{
    9a2c:	b490      	push	{r4, r7}
    9a2e:	b092      	sub	sp, #72	; 0x48
    9a30:	af00      	add	r7, sp, #0
    9a32:	4603      	mov	r3, r0
    9a34:	71fb      	strb	r3, [r7, #7]
    9a36:	460b      	mov	r3, r1
    9a38:	71bb      	strb	r3, [r7, #6]
    9a3a:	4613      	mov	r3, r2
    9a3c:	80bb      	strh	r3, [r7, #4]
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
    9a3e:	79fb      	ldrb	r3, [r7, #7]
    9a40:	f003 031f 	and.w	r3, r3, #31
    9a44:	71fb      	strb	r3, [r7, #7]
	p_high &= 0x1f;
    9a46:	79bb      	ldrb	r3, [r7, #6]
    9a48:	f003 031f 	and.w	r3, r3, #31
    9a4c:	71bb      	strb	r3, [r7, #6]
	p_low &= 0x1ff;
    9a4e:	88bb      	ldrh	r3, [r7, #4]
    9a50:	f3c3 0308 	ubfx	r3, r3, #0, #9
    9a54:	80bb      	strh	r3, [r7, #4]

	int i;
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
    9a56:	4a5c      	ldr	r2, [pc, #368]	; (9bc8 <perm5+0x19c>)
    9a58:	f107 031c 	add.w	r3, r7, #28
    9a5c:	4614      	mov	r4, r2
    9a5e:	6820      	ldr	r0, [r4, #0]
    9a60:	6861      	ldr	r1, [r4, #4]
    9a62:	68a2      	ldr	r2, [r4, #8]
    9a64:	c307      	stmia	r3!, {r0, r1, r2}
    9a66:	89a2      	ldrh	r2, [r4, #12]
    9a68:	801a      	strh	r2, [r3, #0]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};
    9a6a:	4a58      	ldr	r2, [pc, #352]	; (9bcc <perm5+0x1a0>)
    9a6c:	f107 030c 	add.w	r3, r7, #12
    9a70:	4614      	mov	r4, r2
    9a72:	6820      	ldr	r0, [r4, #0]
    9a74:	6861      	ldr	r1, [r4, #4]
    9a76:	68a2      	ldr	r2, [r4, #8]
    9a78:	c307      	stmia	r3!, {r0, r1, r2}
    9a7a:	89a2      	ldrh	r2, [r4, #12]
    9a7c:	801a      	strh	r2, [r3, #0]

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    9a7e:	2300      	movs	r3, #0
    9a80:	647b      	str	r3, [r7, #68]	; 0x44
    9a82:	e010      	b.n	9aa6 <perm5+0x7a>
		p[i] = (p_low >> i) & 0x01;
    9a84:	88ba      	ldrh	r2, [r7, #4]
    9a86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9a88:	fa42 f303 	asr.w	r3, r2, r3
    9a8c:	b2db      	uxtb	r3, r3
    9a8e:	f003 0301 	and.w	r3, r3, #1
    9a92:	b2d9      	uxtb	r1, r3
    9a94:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    9a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9a9a:	4413      	add	r3, r2
    9a9c:	460a      	mov	r2, r1
    9a9e:	701a      	strb	r2, [r3, #0]
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    9aa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9aa2:	3301      	adds	r3, #1
    9aa4:	647b      	str	r3, [r7, #68]	; 0x44
    9aa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9aa8:	2b08      	cmp	r3, #8
    9aaa:	ddeb      	ble.n	9a84 <perm5+0x58>
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    9aac:	2300      	movs	r3, #0
    9aae:	647b      	str	r3, [r7, #68]	; 0x44
    9ab0:	e011      	b.n	9ad6 <perm5+0xaa>
		p[i+9] = (p_high >> i) & 0x01;
    9ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9ab4:	3309      	adds	r3, #9
    9ab6:	79b9      	ldrb	r1, [r7, #6]
    9ab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    9aba:	fa41 f202 	asr.w	r2, r1, r2
    9abe:	b2d2      	uxtb	r2, r2
    9ac0:	f002 0201 	and.w	r2, r2, #1
    9ac4:	b2d2      	uxtb	r2, r2
    9ac6:	f107 0148 	add.w	r1, r7, #72	; 0x48
    9aca:	440b      	add	r3, r1
    9acc:	f803 2c1c 	strb.w	r2, [r3, #-28]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    9ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9ad2:	3301      	adds	r3, #1
    9ad4:	647b      	str	r3, [r7, #68]	; 0x44
    9ad6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9ad8:	2b04      	cmp	r3, #4
    9ada:	ddea      	ble.n	9ab2 <perm5+0x86>
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    9adc:	2300      	movs	r3, #0
    9ade:	647b      	str	r3, [r7, #68]	; 0x44
    9ae0:	e010      	b.n	9b04 <perm5+0xd8>
		z_bit[i] = (z >> i) & 0x01;
    9ae2:	79fa      	ldrb	r2, [r7, #7]
    9ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9ae6:	fa42 f303 	asr.w	r3, r2, r3
    9aea:	b2db      	uxtb	r3, r3
    9aec:	f003 0301 	and.w	r3, r3, #1
    9af0:	b2d9      	uxtb	r1, r3
    9af2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    9af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9af8:	4413      	add	r3, r2
    9afa:	460a      	mov	r2, r1
    9afc:	701a      	strb	r2, [r3, #0]
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    9afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9b00:	3301      	adds	r3, #1
    9b02:	647b      	str	r3, [r7, #68]	; 0x44
    9b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9b06:	2b04      	cmp	r3, #4
    9b08:	ddeb      	ble.n	9ae2 <perm5+0xb6>
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    9b0a:	230d      	movs	r3, #13
    9b0c:	647b      	str	r3, [r7, #68]	; 0x44
    9b0e:	e036      	b.n	9b7e <perm5+0x152>
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
    9b10:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    9b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9b16:	4413      	add	r3, r2
    9b18:	781b      	ldrb	r3, [r3, #0]
    9b1a:	2b00      	cmp	r3, #0
    9b1c:	d02c      	beq.n	9b78 <perm5+0x14c>
			tmp = z_bit[index1[i]];
    9b1e:	f107 021c 	add.w	r2, r7, #28
    9b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9b24:	4413      	add	r3, r2
    9b26:	781b      	ldrb	r3, [r3, #0]
    9b28:	f107 0248 	add.w	r2, r7, #72	; 0x48
    9b2c:	4413      	add	r3, r2
    9b2e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    9b32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			z_bit[index1[i]] = z_bit[index2[i]];
    9b36:	f107 021c 	add.w	r2, r7, #28
    9b3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9b3c:	4413      	add	r3, r2
    9b3e:	781b      	ldrb	r3, [r3, #0]
    9b40:	4619      	mov	r1, r3
    9b42:	f107 020c 	add.w	r2, r7, #12
    9b46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9b48:	4413      	add	r3, r2
    9b4a:	781b      	ldrb	r3, [r3, #0]
    9b4c:	f107 0248 	add.w	r2, r7, #72	; 0x48
    9b50:	4413      	add	r3, r2
    9b52:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
    9b56:	f107 0348 	add.w	r3, r7, #72	; 0x48
    9b5a:	440b      	add	r3, r1
    9b5c:	f803 2c0c 	strb.w	r2, [r3, #-12]
			z_bit[index2[i]] = tmp;
    9b60:	f107 020c 	add.w	r2, r7, #12
    9b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9b66:	4413      	add	r3, r2
    9b68:	781b      	ldrb	r3, [r3, #0]
    9b6a:	f107 0248 	add.w	r2, r7, #72	; 0x48
    9b6e:	4413      	add	r3, r2
    9b70:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
    9b74:	f803 2c0c 	strb.w	r2, [r3, #-12]
	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    9b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9b7a:	3b01      	subs	r3, #1
    9b7c:	647b      	str	r3, [r7, #68]	; 0x44
    9b7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9b80:	2b00      	cmp	r3, #0
    9b82:	dac5      	bge.n	9b10 <perm5+0xe4>
			z_bit[index2[i]] = tmp;
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
    9b84:	2300      	movs	r3, #0
    9b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	for (i = 0; i < 5; i++)
    9b8a:	2300      	movs	r3, #0
    9b8c:	647b      	str	r3, [r7, #68]	; 0x44
    9b8e:	e011      	b.n	9bb4 <perm5+0x188>
		output += z_bit[i] << i;
    9b90:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    9b94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9b96:	4413      	add	r3, r2
    9b98:	781b      	ldrb	r3, [r3, #0]
    9b9a:	461a      	mov	r2, r3
    9b9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9b9e:	fa02 f303 	lsl.w	r3, r2, r3
    9ba2:	b2da      	uxtb	r2, r3
    9ba4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    9ba8:	4413      	add	r3, r2
    9baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    9bae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9bb0:	3301      	adds	r3, #1
    9bb2:	647b      	str	r3, [r7, #68]	; 0x44
    9bb4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    9bb6:	2b04      	cmp	r3, #4
    9bb8:	ddea      	ble.n	9b90 <perm5+0x164>
		output += z_bit[i] << i;

	return output;
    9bba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
}
    9bbe:	4618      	mov	r0, r3
    9bc0:	3748      	adds	r7, #72	; 0x48
    9bc2:	46bd      	mov	sp, r7
    9bc4:	bc90      	pop	{r4, r7}
    9bc6:	4770      	bx	lr
    9bc8:	0000db00 	.word	0x0000db00
    9bcc:	0000db10 	.word	0x0000db10

00009bd0 <next_hop>:

u16 next_hop(u32 clock)
{
    9bd0:	b580      	push	{r7, lr}
    9bd2:	b08a      	sub	sp, #40	; 0x28
    9bd4:	af00      	add	r7, sp, #0
    9bd6:	6078      	str	r0, [r7, #4]
	u16 d, y2;
	u32 base_f, f, f_dash;

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
    9bd8:	687b      	ldr	r3, [r7, #4]
    9bda:	089b      	lsrs	r3, r3, #2
    9bdc:	b2db      	uxtb	r3, r3
    9bde:	f003 031f 	and.w	r3, r3, #31
    9be2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	y1 = (clock >> 1) & 0x01;
    9be6:	687b      	ldr	r3, [r7, #4]
    9be8:	085b      	lsrs	r3, r3, #1
    9bea:	b2db      	uxtb	r3, r3
    9bec:	f003 0301 	and.w	r3, r3, #1
    9bf0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	y2 = y1 << 5;
    9bf4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    9bf8:	b29b      	uxth	r3, r3
    9bfa:	015b      	lsls	r3, r3, #5
    9bfc:	847b      	strh	r3, [r7, #34]	; 0x22
	a = (a1 ^ (clock >> 21)) & 0x1f;
    9bfe:	687b      	ldr	r3, [r7, #4]
    9c00:	0d5b      	lsrs	r3, r3, #21
    9c02:	b2da      	uxtb	r2, r3
    9c04:	4b4b      	ldr	r3, [pc, #300]	; (9d34 <next_hop+0x164>)
    9c06:	781b      	ldrb	r3, [r3, #0]
    9c08:	4053      	eors	r3, r2
    9c0a:	b2db      	uxtb	r3, r3
    9c0c:	f003 031f 	and.w	r3, r3, #31
    9c10:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    9c14:	687b      	ldr	r3, [r7, #4]
    9c16:	0c1b      	lsrs	r3, r3, #16
    9c18:	b2da      	uxtb	r2, r3
    9c1a:	4b47      	ldr	r3, [pc, #284]	; (9d38 <next_hop+0x168>)
    9c1c:	781b      	ldrb	r3, [r3, #0]
    9c1e:	4053      	eors	r3, r2
    9c20:	b2db      	uxtb	r3, r3
    9c22:	f003 031f 	and.w	r3, r3, #31
    9c26:	f887 3020 	strb.w	r3, [r7, #32]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    9c2a:	687b      	ldr	r3, [r7, #4]
    9c2c:	09db      	lsrs	r3, r3, #7
    9c2e:	b29a      	uxth	r2, r3
    9c30:	4b42      	ldr	r3, [pc, #264]	; (9d3c <next_hop+0x16c>)
    9c32:	881b      	ldrh	r3, [r3, #0]
    9c34:	4053      	eors	r3, r2
    9c36:	b29b      	uxth	r3, r3
    9c38:	f3c3 0308 	ubfx	r3, r3, #0, #9
    9c3c:	83fb      	strh	r3, [r7, #30]
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    9c3e:	687b      	ldr	r3, [r7, #4]
    9c40:	08db      	lsrs	r3, r3, #3
    9c42:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    9c46:	f023 030f 	bic.w	r3, r3, #15
    9c4a:	61bb      	str	r3, [r7, #24]
	f = base_f % 79;
    9c4c:	69b9      	ldr	r1, [r7, #24]
    9c4e:	4b3c      	ldr	r3, [pc, #240]	; (9d40 <next_hop+0x170>)
    9c50:	fba3 2301 	umull	r2, r3, r3, r1
    9c54:	099a      	lsrs	r2, r3, #6
    9c56:	4613      	mov	r3, r2
    9c58:	009b      	lsls	r3, r3, #2
    9c5a:	4413      	add	r3, r2
    9c5c:	011b      	lsls	r3, r3, #4
    9c5e:	1a9b      	subs	r3, r3, r2
    9c60:	1acb      	subs	r3, r1, r3
    9c62:	617b      	str	r3, [r7, #20]

	perm = perm5(
    9c64:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    9c68:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    9c6c:	4413      	add	r3, r2
    9c6e:	b2db      	uxtb	r3, r3
    9c70:	b2db      	uxtb	r3, r3
    9c72:	f003 031f 	and.w	r3, r3, #31
    9c76:	b2da      	uxtb	r2, r3
    9c78:	4b32      	ldr	r3, [pc, #200]	; (9d44 <next_hop+0x174>)
    9c7a:	781b      	ldrb	r3, [r3, #0]
    9c7c:	b2db      	uxtb	r3, r3
    9c7e:	4053      	eors	r3, r2
    9c80:	b2db      	uxtb	r3, r3
    9c82:	b2d9      	uxtb	r1, r3
    9c84:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    9c88:	461a      	mov	r2, r3
    9c8a:	0152      	lsls	r2, r2, #5
    9c8c:	1ad3      	subs	r3, r2, r3
    9c8e:	b2db      	uxtb	r3, r3
    9c90:	b2da      	uxtb	r2, r3
    9c92:	f897 3020 	ldrb.w	r3, [r7, #32]
    9c96:	4053      	eors	r3, r2
    9c98:	b2db      	uxtb	r3, r3
    9c9a:	b2da      	uxtb	r2, r3
    9c9c:	8bfb      	ldrh	r3, [r7, #30]
    9c9e:	4608      	mov	r0, r1
    9ca0:	4611      	mov	r1, r2
    9ca2:	461a      	mov	r2, r3
    9ca4:	f7ff fec2 	bl	9a2c <perm5>
    9ca8:	4603      	mov	r3, r0
    9caa:	74fb      	strb	r3, [r7, #19]
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % CHANNELS];
    9cac:	7cfb      	ldrb	r3, [r7, #19]
    9cae:	4a26      	ldr	r2, [pc, #152]	; (9d48 <next_hop+0x178>)
    9cb0:	7812      	ldrb	r2, [r2, #0]
    9cb2:	4413      	add	r3, r2
    9cb4:	461a      	mov	r2, r3
    9cb6:	697b      	ldr	r3, [r7, #20]
    9cb8:	441a      	add	r2, r3
    9cba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    9cbc:	18d1      	adds	r1, r2, r3
    9cbe:	4b20      	ldr	r3, [pc, #128]	; (9d40 <next_hop+0x170>)
    9cc0:	fba3 2301 	umull	r2, r3, r3, r1
    9cc4:	099a      	lsrs	r2, r3, #6
    9cc6:	4613      	mov	r3, r2
    9cc8:	009b      	lsls	r3, r3, #2
    9cca:	4413      	add	r3, r2
    9ccc:	011b      	lsls	r3, r3, #4
    9cce:	1a9b      	subs	r3, r3, r2
    9cd0:	1aca      	subs	r2, r1, r3
    9cd2:	4b1e      	ldr	r3, [pc, #120]	; (9d4c <next_hop+0x17c>)
    9cd4:	5c9b      	ldrb	r3, [r3, r2]
    9cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(afh_enabled) {
    9cda:	4b1d      	ldr	r3, [pc, #116]	; (9d50 <next_hop+0x180>)
    9cdc:	781b      	ldrb	r3, [r3, #0]
    9cde:	2b00      	cmp	r3, #0
    9ce0:	d01d      	beq.n	9d1e <next_hop+0x14e>
		f_dash = base_f % used_channels;
    9ce2:	4b1c      	ldr	r3, [pc, #112]	; (9d54 <next_hop+0x184>)
    9ce4:	781b      	ldrb	r3, [r3, #0]
    9ce6:	461a      	mov	r2, r3
    9ce8:	69bb      	ldr	r3, [r7, #24]
    9cea:	fbb3 f1f2 	udiv	r1, r3, r2
    9cee:	fb02 f201 	mul.w	r2, r2, r1
    9cf2:	1a9b      	subs	r3, r3, r2
    9cf4:	60fb      	str	r3, [r7, #12]
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    9cf6:	7cfb      	ldrb	r3, [r7, #19]
    9cf8:	4a13      	ldr	r2, [pc, #76]	; (9d48 <next_hop+0x178>)
    9cfa:	7812      	ldrb	r2, [r2, #0]
    9cfc:	4413      	add	r3, r2
    9cfe:	461a      	mov	r2, r3
    9d00:	68fb      	ldr	r3, [r7, #12]
    9d02:	441a      	add	r2, r3
    9d04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    9d06:	4413      	add	r3, r2
    9d08:	4a12      	ldr	r2, [pc, #72]	; (9d54 <next_hop+0x184>)
    9d0a:	7812      	ldrb	r2, [r2, #0]
    9d0c:	fbb3 f1f2 	udiv	r1, r3, r2
    9d10:	fb02 f201 	mul.w	r2, r2, r1
    9d14:	1a9b      	subs	r3, r3, r2
    9d16:	4a10      	ldr	r2, [pc, #64]	; (9d58 <next_hop+0x188>)
    9d18:	5cd3      	ldrb	r3, [r2, r3]
    9d1a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return (2402 + next_channel);
    9d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    9d22:	b29b      	uxth	r3, r3
    9d24:	f603 1362 	addw	r3, r3, #2402	; 0x962
    9d28:	b29b      	uxth	r3, r3

}
    9d2a:	4618      	mov	r0, r3
    9d2c:	3728      	adds	r7, #40	; 0x28
    9d2e:	46bd      	mov	sp, r7
    9d30:	bd80      	pop	{r7, pc}
    9d32:	bf00      	nop
    9d34:	1000113b 	.word	0x1000113b
    9d38:	1000113c 	.word	0x1000113c
    9d3c:	100010ea 	.word	0x100010ea
    9d40:	cf6474a9 	.word	0xcf6474a9
    9d44:	100010e8 	.word	0x100010e8
    9d48:	1000118f 	.word	0x1000118f
    9d4c:	10001140 	.word	0x10001140
    9d50:	10001040 	.word	0x10001040
    9d54:	100010e9 	.word	0x100010e9
    9d58:	100010ec 	.word	0x100010ec

00009d5c <btle_next_hop>:

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    9d5c:	b580      	push	{r7, lr}
    9d5e:	b084      	sub	sp, #16
    9d60:	af00      	add	r7, sp, #0
    9d62:	6078      	str	r0, [r7, #4]
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    9d64:	687b      	ldr	r3, [r7, #4]
    9d66:	7d5b      	ldrb	r3, [r3, #21]
    9d68:	4618      	mov	r0, r3
    9d6a:	f000 f84b 	bl	9e04 <btle_channel_index_to_phys>
    9d6e:	4603      	mov	r3, r0
    9d70:	81fb      	strh	r3, [r7, #14]
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    9d72:	687b      	ldr	r3, [r7, #4]
    9d74:	7d5b      	ldrb	r3, [r3, #21]
    9d76:	461a      	mov	r2, r3
    9d78:	687b      	ldr	r3, [r7, #4]
    9d7a:	7d9b      	ldrb	r3, [r3, #22]
    9d7c:	441a      	add	r2, r3
    9d7e:	4b0a      	ldr	r3, [pc, #40]	; (9da8 <btle_next_hop+0x4c>)
    9d80:	fb82 0103 	smull	r0, r1, r2, r3
    9d84:	1853      	adds	r3, r2, r1
    9d86:	1159      	asrs	r1, r3, #5
    9d88:	17d3      	asrs	r3, r2, #31
    9d8a:	1ac9      	subs	r1, r1, r3
    9d8c:	460b      	mov	r3, r1
    9d8e:	00db      	lsls	r3, r3, #3
    9d90:	440b      	add	r3, r1
    9d92:	009b      	lsls	r3, r3, #2
    9d94:	440b      	add	r3, r1
    9d96:	1ad1      	subs	r1, r2, r3
    9d98:	b2ca      	uxtb	r2, r1
    9d9a:	687b      	ldr	r3, [r7, #4]
    9d9c:	755a      	strb	r2, [r3, #21]
	return phys;
    9d9e:	89fb      	ldrh	r3, [r7, #14]
}
    9da0:	4618      	mov	r0, r3
    9da2:	3710      	adds	r7, #16
    9da4:	46bd      	mov	sp, r7
    9da6:	bd80      	pop	{r7, pc}
    9da8:	dd67c8a7 	.word	0xdd67c8a7

00009dac <btle_channel_index>:

u32 received_data = 0;

u8 btle_channel_index(u8 channel) {
    9dac:	b480      	push	{r7}
    9dae:	b085      	sub	sp, #20
    9db0:	af00      	add	r7, sp, #0
    9db2:	4603      	mov	r3, r0
    9db4:	71fb      	strb	r3, [r7, #7]
	u8 idx;
	channel /= 2;
    9db6:	79fb      	ldrb	r3, [r7, #7]
    9db8:	085b      	lsrs	r3, r3, #1
    9dba:	71fb      	strb	r3, [r7, #7]
	if (channel == 0)
    9dbc:	79fb      	ldrb	r3, [r7, #7]
    9dbe:	2b00      	cmp	r3, #0
    9dc0:	d102      	bne.n	9dc8 <btle_channel_index+0x1c>
		idx = 37;
    9dc2:	2325      	movs	r3, #37	; 0x25
    9dc4:	73fb      	strb	r3, [r7, #15]
    9dc6:	e015      	b.n	9df4 <btle_channel_index+0x48>
	else if (channel < 12)
    9dc8:	79fb      	ldrb	r3, [r7, #7]
    9dca:	2b0b      	cmp	r3, #11
    9dcc:	d803      	bhi.n	9dd6 <btle_channel_index+0x2a>
		idx = channel - 1;
    9dce:	79fb      	ldrb	r3, [r7, #7]
    9dd0:	3b01      	subs	r3, #1
    9dd2:	73fb      	strb	r3, [r7, #15]
    9dd4:	e00e      	b.n	9df4 <btle_channel_index+0x48>
	else if (channel == 12)
    9dd6:	79fb      	ldrb	r3, [r7, #7]
    9dd8:	2b0c      	cmp	r3, #12
    9dda:	d102      	bne.n	9de2 <btle_channel_index+0x36>
		idx = 38;
    9ddc:	2326      	movs	r3, #38	; 0x26
    9dde:	73fb      	strb	r3, [r7, #15]
    9de0:	e008      	b.n	9df4 <btle_channel_index+0x48>
	else if (channel < 39)
    9de2:	79fb      	ldrb	r3, [r7, #7]
    9de4:	2b26      	cmp	r3, #38	; 0x26
    9de6:	d803      	bhi.n	9df0 <btle_channel_index+0x44>
		idx = channel - 2;
    9de8:	79fb      	ldrb	r3, [r7, #7]
    9dea:	3b02      	subs	r3, #2
    9dec:	73fb      	strb	r3, [r7, #15]
    9dee:	e001      	b.n	9df4 <btle_channel_index+0x48>
	else
		idx = 39;
    9df0:	2327      	movs	r3, #39	; 0x27
    9df2:	73fb      	strb	r3, [r7, #15]
	return idx;
    9df4:	7bfb      	ldrb	r3, [r7, #15]
}
    9df6:	4618      	mov	r0, r3
    9df8:	3714      	adds	r7, #20
    9dfa:	46bd      	mov	sp, r7
    9dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e00:	4770      	bx	lr
    9e02:	bf00      	nop

00009e04 <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
    9e04:	b480      	push	{r7}
    9e06:	b085      	sub	sp, #20
    9e08:	af00      	add	r7, sp, #0
    9e0a:	4603      	mov	r3, r0
    9e0c:	71fb      	strb	r3, [r7, #7]
	u16 phys;
	if (idx < 11)
    9e0e:	79fb      	ldrb	r3, [r7, #7]
    9e10:	2b0a      	cmp	r3, #10
    9e12:	d806      	bhi.n	9e22 <btle_channel_index_to_phys+0x1e>
		phys = 2404 + 2 * idx;
    9e14:	79fb      	ldrb	r3, [r7, #7]
    9e16:	f203 43b2 	addw	r3, r3, #1202	; 0x4b2
    9e1a:	b29b      	uxth	r3, r3
    9e1c:	005b      	lsls	r3, r3, #1
    9e1e:	81fb      	strh	r3, [r7, #14]
    9e20:	e01a      	b.n	9e58 <btle_channel_index_to_phys+0x54>
	else if (idx < 37)
    9e22:	79fb      	ldrb	r3, [r7, #7]
    9e24:	2b24      	cmp	r3, #36	; 0x24
    9e26:	d806      	bhi.n	9e36 <btle_channel_index_to_phys+0x32>
		phys = 2428 + 2 * (idx - 11);
    9e28:	79fb      	ldrb	r3, [r7, #7]
    9e2a:	f203 43b3 	addw	r3, r3, #1203	; 0x4b3
    9e2e:	b29b      	uxth	r3, r3
    9e30:	005b      	lsls	r3, r3, #1
    9e32:	81fb      	strh	r3, [r7, #14]
    9e34:	e010      	b.n	9e58 <btle_channel_index_to_phys+0x54>
	else if (idx == 37)
    9e36:	79fb      	ldrb	r3, [r7, #7]
    9e38:	2b25      	cmp	r3, #37	; 0x25
    9e3a:	d103      	bne.n	9e44 <btle_channel_index_to_phys+0x40>
		phys = 2402;
    9e3c:	f640 1362 	movw	r3, #2402	; 0x962
    9e40:	81fb      	strh	r3, [r7, #14]
    9e42:	e009      	b.n	9e58 <btle_channel_index_to_phys+0x54>
	else if (idx == 38)
    9e44:	79fb      	ldrb	r3, [r7, #7]
    9e46:	2b26      	cmp	r3, #38	; 0x26
    9e48:	d103      	bne.n	9e52 <btle_channel_index_to_phys+0x4e>
		phys = 2426;
    9e4a:	f640 137a 	movw	r3, #2426	; 0x97a
    9e4e:	81fb      	strh	r3, [r7, #14]
    9e50:	e002      	b.n	9e58 <btle_channel_index_to_phys+0x54>
	else
		phys = 2480;
    9e52:	f44f 631b 	mov.w	r3, #2480	; 0x9b0
    9e56:	81fb      	strh	r3, [r7, #14]
	return phys;
    9e58:	89fb      	ldrh	r3, [r7, #14]
}
    9e5a:	4618      	mov	r0, r3
    9e5c:	3714      	adds	r7, #20
    9e5e:	46bd      	mov	sp, r7
    9e60:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e64:	4770      	bx	lr
    9e66:	bf00      	nop

00009e68 <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    9e68:	b480      	push	{r7}
    9e6a:	b08b      	sub	sp, #44	; 0x2c
    9e6c:	af00      	add	r7, sp, #0
    9e6e:	60f8      	str	r0, [r7, #12]
    9e70:	60b9      	str	r1, [r7, #8]
    9e72:	607a      	str	r2, [r7, #4]
	u32 state = crc_init & 0xffffff;
    9e74:	68fb      	ldr	r3, [r7, #12]
    9e76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9e7a:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
    9e7c:	4b1b      	ldr	r3, [pc, #108]	; (9eec <btle_calc_crc+0x84>)
    9e7e:	617b      	str	r3, [r7, #20]
	int i, j;

	for (i = 0; i < len; ++i) {
    9e80:	2300      	movs	r3, #0
    9e82:	623b      	str	r3, [r7, #32]
    9e84:	e027      	b.n	9ed6 <btle_calc_crc+0x6e>
		u8 cur = data[i];
    9e86:	6a3b      	ldr	r3, [r7, #32]
    9e88:	68ba      	ldr	r2, [r7, #8]
    9e8a:	4413      	add	r3, r2
    9e8c:	781b      	ldrb	r3, [r3, #0]
    9e8e:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    9e90:	2300      	movs	r3, #0
    9e92:	61fb      	str	r3, [r7, #28]
    9e94:	e019      	b.n	9eca <btle_calc_crc+0x62>
			int next_bit = (state ^ cur) & 1;
    9e96:	7efa      	ldrb	r2, [r7, #27]
    9e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9e9a:	4053      	eors	r3, r2
    9e9c:	f003 0301 	and.w	r3, r3, #1
    9ea0:	613b      	str	r3, [r7, #16]
			cur >>= 1;
    9ea2:	7efb      	ldrb	r3, [r7, #27]
    9ea4:	085b      	lsrs	r3, r3, #1
    9ea6:	76fb      	strb	r3, [r7, #27]
			state >>= 1;
    9ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9eaa:	085b      	lsrs	r3, r3, #1
    9eac:	627b      	str	r3, [r7, #36]	; 0x24
			if (next_bit) {
    9eae:	693b      	ldr	r3, [r7, #16]
    9eb0:	2b00      	cmp	r3, #0
    9eb2:	d007      	beq.n	9ec4 <btle_calc_crc+0x5c>
				state |= 1 << 23;
    9eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9eb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    9eba:	627b      	str	r3, [r7, #36]	; 0x24
				state ^= lfsr_mask;
    9ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    9ebe:	697b      	ldr	r3, [r7, #20]
    9ec0:	4053      	eors	r3, r2
    9ec2:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    9ec4:	69fb      	ldr	r3, [r7, #28]
    9ec6:	3301      	adds	r3, #1
    9ec8:	61fb      	str	r3, [r7, #28]
    9eca:	69fb      	ldr	r3, [r7, #28]
    9ecc:	2b07      	cmp	r3, #7
    9ece:	dde2      	ble.n	9e96 <btle_calc_crc+0x2e>
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    9ed0:	6a3b      	ldr	r3, [r7, #32]
    9ed2:	3301      	adds	r3, #1
    9ed4:	623b      	str	r3, [r7, #32]
    9ed6:	6a3a      	ldr	r2, [r7, #32]
    9ed8:	687b      	ldr	r3, [r7, #4]
    9eda:	429a      	cmp	r2, r3
    9edc:	dbd3      	blt.n	9e86 <btle_calc_crc+0x1e>
				state ^= lfsr_mask;
			}
		}
	}

	return state;
    9ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    9ee0:	4618      	mov	r0, r3
    9ee2:	372c      	adds	r7, #44	; 0x2c
    9ee4:	46bd      	mov	sp, r7
    9ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
    9eea:	4770      	bx	lr
    9eec:	005a6000 	.word	0x005a6000

00009ef0 <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    9ef0:	b480      	push	{r7}
    9ef2:	b08d      	sub	sp, #52	; 0x34
    9ef4:	af00      	add	r7, sp, #0
    9ef6:	60f8      	str	r0, [r7, #12]
    9ef8:	60b9      	str	r1, [r7, #8]
    9efa:	607a      	str	r2, [r7, #4]
	u32 state = crc;
    9efc:	68fb      	ldr	r3, [r7, #12]
    9efe:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
    9f00:	4b2b      	ldr	r3, [pc, #172]	; (9fb0 <btle_reverse_crc+0xc0>)
    9f02:	61fb      	str	r3, [r7, #28]
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    9f04:	687b      	ldr	r3, [r7, #4]
    9f06:	3b01      	subs	r3, #1
    9f08:	627b      	str	r3, [r7, #36]	; 0x24
    9f0a:	e02d      	b.n	9f68 <btle_reverse_crc+0x78>
		u8 cur = data[i];
    9f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f0e:	68ba      	ldr	r2, [r7, #8]
    9f10:	4413      	add	r3, r2
    9f12:	781b      	ldrb	r3, [r3, #0]
    9f14:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    9f16:	2300      	movs	r3, #0
    9f18:	623b      	str	r3, [r7, #32]
    9f1a:	e01f      	b.n	9f5c <btle_reverse_crc+0x6c>
			int top_bit = state >> 23;
    9f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9f1e:	0ddb      	lsrs	r3, r3, #23
    9f20:	617b      	str	r3, [r7, #20]
			state = (state << 1) & 0xffffff;
    9f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9f24:	005b      	lsls	r3, r3, #1
    9f26:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    9f2c:	7efa      	ldrb	r2, [r7, #27]
    9f2e:	6a3b      	ldr	r3, [r7, #32]
    9f30:	f1c3 0307 	rsb	r3, r3, #7
    9f34:	fa42 f303 	asr.w	r3, r2, r3
    9f38:	f003 0201 	and.w	r2, r3, #1
    9f3c:	697b      	ldr	r3, [r7, #20]
    9f3e:	4053      	eors	r3, r2
    9f40:	461a      	mov	r2, r3
    9f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9f44:	4313      	orrs	r3, r2
    9f46:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (top_bit)
    9f48:	697b      	ldr	r3, [r7, #20]
    9f4a:	2b00      	cmp	r3, #0
    9f4c:	d003      	beq.n	9f56 <btle_reverse_crc+0x66>
				state ^= lfsr_mask;
    9f4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9f50:	69fb      	ldr	r3, [r7, #28]
    9f52:	4053      	eors	r3, r2
    9f54:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    9f56:	6a3b      	ldr	r3, [r7, #32]
    9f58:	3301      	adds	r3, #1
    9f5a:	623b      	str	r3, [r7, #32]
    9f5c:	6a3b      	ldr	r3, [r7, #32]
    9f5e:	2b07      	cmp	r3, #7
    9f60:	dddc      	ble.n	9f1c <btle_reverse_crc+0x2c>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    9f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f64:	3b01      	subs	r3, #1
    9f66:	627b      	str	r3, [r7, #36]	; 0x24
    9f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f6a:	2b00      	cmp	r3, #0
    9f6c:	dace      	bge.n	9f0c <btle_reverse_crc+0x1c>
			if (top_bit)
				state ^= lfsr_mask;
		}
	}

	ret = 0;
    9f6e:	2300      	movs	r3, #0
    9f70:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < 24; ++i)
    9f72:	2300      	movs	r3, #0
    9f74:	627b      	str	r3, [r7, #36]	; 0x24
    9f76:	e010      	b.n	9f9a <btle_reverse_crc+0xaa>
		ret |= ((state >> i) & 1) << (23 - i);
    9f78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f7c:	fa22 f303 	lsr.w	r3, r2, r3
    9f80:	f003 0201 	and.w	r2, r3, #1
    9f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f86:	f1c3 0317 	rsb	r3, r3, #23
    9f8a:	fa02 f303 	lsl.w	r3, r2, r3
    9f8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    9f90:	4313      	orrs	r3, r2
    9f92:	62bb      	str	r3, [r7, #40]	; 0x28
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    9f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f96:	3301      	adds	r3, #1
    9f98:	627b      	str	r3, [r7, #36]	; 0x24
    9f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9f9c:	2b17      	cmp	r3, #23
    9f9e:	ddeb      	ble.n	9f78 <btle_reverse_crc+0x88>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
    9fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    9fa2:	4618      	mov	r0, r3
    9fa4:	3734      	adds	r7, #52	; 0x34
    9fa6:	46bd      	mov	sp, r7
    9fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
    9fac:	4770      	bx	lr
    9fae:	bf00      	nop
    9fb0:	00b4c000 	.word	0x00b4c000

00009fb4 <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    9fb4:	b480      	push	{r7}
    9fb6:	b089      	sub	sp, #36	; 0x24
    9fb8:	af00      	add	r7, sp, #0
    9fba:	60f8      	str	r0, [r7, #12]
    9fbc:	60b9      	str	r1, [r7, #8]
    9fbe:	607a      	str	r2, [r7, #4]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    9fc0:	68fb      	ldr	r3, [r7, #12]
    9fc2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9fc6:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < len; ++i) {
    9fc8:	2300      	movs	r3, #0
    9fca:	61bb      	str	r3, [r7, #24]
    9fcc:	e012      	b.n	9ff4 <btle_crcgen_lut+0x40>
		key = data[i] ^ (state & 0xff);
    9fce:	69bb      	ldr	r3, [r7, #24]
    9fd0:	68ba      	ldr	r2, [r7, #8]
    9fd2:	4413      	add	r3, r2
    9fd4:	781a      	ldrb	r2, [r3, #0]
    9fd6:	69fb      	ldr	r3, [r7, #28]
    9fd8:	b2db      	uxtb	r3, r3
    9fda:	4053      	eors	r3, r2
    9fdc:	75fb      	strb	r3, [r7, #23]
		state = (state >> 8) ^ btle_crc_lut[key];
    9fde:	69fb      	ldr	r3, [r7, #28]
    9fe0:	0a1a      	lsrs	r2, r3, #8
    9fe2:	7dfb      	ldrb	r3, [r7, #23]
    9fe4:	4909      	ldr	r1, [pc, #36]	; (a00c <btle_crcgen_lut+0x58>)
    9fe6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    9fea:	4053      	eors	r3, r2
    9fec:	61fb      	str	r3, [r7, #28]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    9fee:	69bb      	ldr	r3, [r7, #24]
    9ff0:	3301      	adds	r3, #1
    9ff2:	61bb      	str	r3, [r7, #24]
    9ff4:	69ba      	ldr	r2, [r7, #24]
    9ff6:	687b      	ldr	r3, [r7, #4]
    9ff8:	429a      	cmp	r2, r3
    9ffa:	dbe8      	blt.n	9fce <btle_crcgen_lut+0x1a>
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
	}
	return state;
    9ffc:	69fb      	ldr	r3, [r7, #28]
}
    9ffe:	4618      	mov	r0, r3
    a000:	3724      	adds	r7, #36	; 0x24
    a002:	46bd      	mov	sp, r7
    a004:	f85d 7b04 	ldr.w	r7, [sp], #4
    a008:	4770      	bx	lr
    a00a:	bf00      	nop
    a00c:	100004a8 	.word	0x100004a8

0000a010 <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    a010:	b590      	push	{r4, r7, lr}
    a012:	b087      	sub	sp, #28
    a014:	af00      	add	r7, sp, #0
    a016:	60f8      	str	r0, [r7, #12]
    a018:	60b9      	str	r1, [r7, #8]
    a01a:	607a      	str	r2, [r7, #4]
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    a01c:	68fb      	ldr	r3, [r7, #12]
    a01e:	885b      	ldrh	r3, [r3, #2]
    a020:	823b      	strh	r3, [r7, #16]
    a022:	68fb      	ldr	r3, [r7, #12]
    a024:	889b      	ldrh	r3, [r3, #4]
    a026:	827b      	strh	r3, [r7, #18]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    a028:	4b0b      	ldr	r3, [pc, #44]	; (a058 <usb_vendor_request_handler+0x48>)
    a02a:	681c      	ldr	r4, [r3, #0]
    a02c:	68fb      	ldr	r3, [r7, #12]
    a02e:	7859      	ldrb	r1, [r3, #1]
    a030:	687b      	ldr	r3, [r7, #4]
    a032:	681b      	ldr	r3, [r3, #0]
    a034:	f107 0210 	add.w	r2, r7, #16
    a038:	4608      	mov	r0, r1
    a03a:	4611      	mov	r1, r2
    a03c:	461a      	mov	r2, r3
    a03e:	68bb      	ldr	r3, [r7, #8]
    a040:	47a0      	blx	r4
    a042:	6178      	str	r0, [r7, #20]
	return (BOOL) (rv==1);
    a044:	697b      	ldr	r3, [r7, #20]
    a046:	2b01      	cmp	r3, #1
    a048:	bf0c      	ite	eq
    a04a:	2301      	moveq	r3, #1
    a04c:	2300      	movne	r3, #0
    a04e:	b2db      	uxtb	r3, r3
}
    a050:	4618      	mov	r0, r3
    a052:	371c      	adds	r7, #28
    a054:	46bd      	mov	sp, r7
    a056:	bd90      	pop	{r4, r7, pc}
    a058:	10003294 	.word	0x10003294

0000a05c <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    a05c:	b580      	push	{r7, lr}
    a05e:	b082      	sub	sp, #8
    a060:	af00      	add	r7, sp, #0
    a062:	6078      	str	r0, [r7, #4]
	// initialise stack
	USBInit();
    a064:	f001 fd68 	bl	bb38 <USBInit>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    a068:	480b      	ldr	r0, [pc, #44]	; (a098 <ubertooth_usb_init+0x3c>)
    a06a:	f002 f9c7 	bl	c3fc <USBRegisterDescriptors>

	// Request handler 
	v_req_handler = vendor_req_handler;
    a06e:	4a0b      	ldr	r2, [pc, #44]	; (a09c <ubertooth_usb_init+0x40>)
    a070:	687b      	ldr	r3, [r7, #4]
    a072:	6013      	str	r3, [r2, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    a074:	2002      	movs	r0, #2
    a076:	490a      	ldr	r1, [pc, #40]	; (a0a0 <ubertooth_usb_init+0x44>)
    a078:	4a0a      	ldr	r2, [pc, #40]	; (a0a4 <ubertooth_usb_init+0x48>)
    a07a:	f001 fd39 	bl	baf0 <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    a07e:	20ff      	movs	r0, #255	; 0xff
    a080:	4909      	ldr	r1, [pc, #36]	; (a0a8 <ubertooth_usb_init+0x4c>)
    a082:	f002 f965 	bl	c350 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    a086:	2001      	movs	r0, #1
    a088:	f001 fe98 	bl	bdbc <USBHwConnect>

	return 0;
    a08c:	2300      	movs	r3, #0
}
    a08e:	4618      	mov	r0, r3
    a090:	3708      	adds	r7, #8
    a092:	46bd      	mov	sp, r7
    a094:	bd80      	pop	{r7, pc}
    a096:	bf00      	nop
    a098:	0000db20 	.word	0x0000db20
    a09c:	10003294 	.word	0x10003294
    a0a0:	0000a011 	.word	0x0000a011
    a0a4:	10003190 	.word	0x10003190
    a0a8:	0000dbe4 	.word	0x0000dbe4

0000a0ac <queue_init>:

volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init()
{
    a0ac:	b480      	push	{r7}
    a0ae:	af00      	add	r7, sp, #0
	head = 0;
    a0b0:	4b04      	ldr	r3, [pc, #16]	; (a0c4 <queue_init+0x18>)
    a0b2:	2200      	movs	r2, #0
    a0b4:	601a      	str	r2, [r3, #0]
	tail = 0;
    a0b6:	4b04      	ldr	r3, [pc, #16]	; (a0c8 <queue_init+0x1c>)
    a0b8:	2200      	movs	r2, #0
    a0ba:	601a      	str	r2, [r3, #0]
}
    a0bc:	46bd      	mov	sp, r7
    a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
    a0c2:	4770      	bx	lr
    a0c4:	10000a5c 	.word	0x10000a5c
    a0c8:	10000a60 	.word	0x10000a60

0000a0cc <usb_enqueue>:

usb_pkt_rx *usb_enqueue()
{
    a0cc:	b480      	push	{r7}
    a0ce:	b083      	sub	sp, #12
    a0d0:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    a0d2:	4b13      	ldr	r3, [pc, #76]	; (a120 <usb_enqueue+0x54>)
    a0d4:	681b      	ldr	r3, [r3, #0]
    a0d6:	b2db      	uxtb	r3, r3
    a0d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a0dc:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    a0de:	4b11      	ldr	r3, [pc, #68]	; (a124 <usb_enqueue+0x58>)
    a0e0:	681b      	ldr	r3, [r3, #0]
    a0e2:	b2db      	uxtb	r3, r3
    a0e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a0e8:	71bb      	strb	r3, [r7, #6]
	u8 n = (t + 1) & 0x7F;
    a0ea:	79bb      	ldrb	r3, [r7, #6]
    a0ec:	3301      	adds	r3, #1
    a0ee:	b2db      	uxtb	r3, r3
    a0f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a0f4:	717b      	strb	r3, [r7, #5]

	/* fail if queue is full */
	if (h == n) {
    a0f6:	79fa      	ldrb	r2, [r7, #7]
    a0f8:	797b      	ldrb	r3, [r7, #5]
    a0fa:	429a      	cmp	r2, r3
    a0fc:	d101      	bne.n	a102 <usb_enqueue+0x36>
		return NULL;
    a0fe:	2300      	movs	r3, #0
    a100:	e008      	b.n	a114 <usb_enqueue+0x48>
	}

	++tail;
    a102:	4b08      	ldr	r3, [pc, #32]	; (a124 <usb_enqueue+0x58>)
    a104:	681b      	ldr	r3, [r3, #0]
    a106:	3301      	adds	r3, #1
    a108:	4a06      	ldr	r2, [pc, #24]	; (a124 <usb_enqueue+0x58>)
    a10a:	6013      	str	r3, [r2, #0]
	return &fifo[t];
    a10c:	79bb      	ldrb	r3, [r7, #6]
    a10e:	019b      	lsls	r3, r3, #6
    a110:	4a05      	ldr	r2, [pc, #20]	; (a128 <usb_enqueue+0x5c>)
    a112:	4413      	add	r3, r2
	
}
    a114:	4618      	mov	r0, r3
    a116:	370c      	adds	r7, #12
    a118:	46bd      	mov	sp, r7
    a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a11e:	4770      	bx	lr
    a120:	10000a5c 	.word	0x10000a5c
    a124:	10000a60 	.word	0x10000a60
    a128:	10001190 	.word	0x10001190

0000a12c <dequeue>:

usb_pkt_rx *dequeue()
{
    a12c:	b480      	push	{r7}
    a12e:	b083      	sub	sp, #12
    a130:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    a132:	4b10      	ldr	r3, [pc, #64]	; (a174 <dequeue+0x48>)
    a134:	681b      	ldr	r3, [r3, #0]
    a136:	b2db      	uxtb	r3, r3
    a138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a13c:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    a13e:	4b0e      	ldr	r3, [pc, #56]	; (a178 <dequeue+0x4c>)
    a140:	681b      	ldr	r3, [r3, #0]
    a142:	b2db      	uxtb	r3, r3
    a144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a148:	71bb      	strb	r3, [r7, #6]

	/* fail if queue is empty */
	if (h == t) {
    a14a:	79fa      	ldrb	r2, [r7, #7]
    a14c:	79bb      	ldrb	r3, [r7, #6]
    a14e:	429a      	cmp	r2, r3
    a150:	d101      	bne.n	a156 <dequeue+0x2a>
		return NULL;
    a152:	2300      	movs	r3, #0
    a154:	e008      	b.n	a168 <dequeue+0x3c>
	}

	++head;
    a156:	4b07      	ldr	r3, [pc, #28]	; (a174 <dequeue+0x48>)
    a158:	681b      	ldr	r3, [r3, #0]
    a15a:	3301      	adds	r3, #1
    a15c:	4a05      	ldr	r2, [pc, #20]	; (a174 <dequeue+0x48>)
    a15e:	6013      	str	r3, [r2, #0]
	return &fifo[h];
    a160:	79fb      	ldrb	r3, [r7, #7]
    a162:	019b      	lsls	r3, r3, #6
    a164:	4a05      	ldr	r2, [pc, #20]	; (a17c <dequeue+0x50>)
    a166:	4413      	add	r3, r2
}
    a168:	4618      	mov	r0, r3
    a16a:	370c      	adds	r7, #12
    a16c:	46bd      	mov	sp, r7
    a16e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a172:	4770      	bx	lr
    a174:	10000a5c 	.word	0x10000a5c
    a178:	10000a60 	.word	0x10000a60
    a17c:	10001190 	.word	0x10001190

0000a180 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    a180:	b580      	push	{r7, lr}
    a182:	b084      	sub	sp, #16
    a184:	af00      	add	r7, sp, #0
    a186:	6078      	str	r0, [r7, #4]
	usb_pkt_rx *pkt = dequeue(&pkt);
    a188:	f107 030c 	add.w	r3, r7, #12
    a18c:	4618      	mov	r0, r3
    a18e:	f7ff ffcd 	bl	a12c <dequeue>
    a192:	4603      	mov	r3, r0
    a194:	60fb      	str	r3, [r7, #12]
	if (pkt != NULL) {
    a196:	68fb      	ldr	r3, [r7, #12]
    a198:	2b00      	cmp	r3, #0
    a19a:	d00a      	beq.n	a1b2 <dequeue_send+0x32>
		last_usb_pkt = clkn;
    a19c:	4a11      	ldr	r2, [pc, #68]	; (a1e4 <dequeue_send+0x64>)
    a19e:	687b      	ldr	r3, [r7, #4]
    a1a0:	6013      	str	r3, [r2, #0]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    a1a2:	68fb      	ldr	r3, [r7, #12]
    a1a4:	2082      	movs	r0, #130	; 0x82
    a1a6:	4619      	mov	r1, r3
    a1a8:	2240      	movs	r2, #64	; 0x40
    a1aa:	f001 fe63 	bl	be74 <USBHwEPWrite>
		return 1;
    a1ae:	2301      	movs	r3, #1
    a1b0:	e013      	b.n	a1da <dequeue_send+0x5a>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    a1b2:	4b0c      	ldr	r3, [pc, #48]	; (a1e4 <dequeue_send+0x64>)
    a1b4:	681b      	ldr	r3, [r3, #0]
    a1b6:	687a      	ldr	r2, [r7, #4]
    a1b8:	1ad3      	subs	r3, r2, r3
    a1ba:	4a0b      	ldr	r2, [pc, #44]	; (a1e8 <dequeue_send+0x68>)
    a1bc:	4293      	cmp	r3, r2
    a1be:	d90b      	bls.n	a1d8 <dequeue_send+0x58>
			u8 pkt_type = KEEP_ALIVE;
    a1c0:	2303      	movs	r3, #3
    a1c2:	72fb      	strb	r3, [r7, #11]
			last_usb_pkt = clkn;
    a1c4:	4a07      	ldr	r2, [pc, #28]	; (a1e4 <dequeue_send+0x64>)
    a1c6:	687b      	ldr	r3, [r7, #4]
    a1c8:	6013      	str	r3, [r2, #0]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    a1ca:	f107 030b 	add.w	r3, r7, #11
    a1ce:	2082      	movs	r0, #130	; 0x82
    a1d0:	4619      	mov	r1, r3
    a1d2:	2201      	movs	r2, #1
    a1d4:	f001 fe4e 	bl	be74 <USBHwEPWrite>
		}
		return 0;
    a1d8:	2300      	movs	r3, #0
	}
}
    a1da:	4618      	mov	r0, r3
    a1dc:	3710      	adds	r7, #16
    a1de:	46bd      	mov	sp, r7
    a1e0:	bd80      	pop	{r7, pc}
    a1e2:	bf00      	nop
    a1e4:	10000a64 	.word	0x10000a64
    a1e8:	00061a80 	.word	0x00061a80

0000a1ec <handle_usb>:

void handle_usb(u32 clkn)
{
    a1ec:	b580      	push	{r7, lr}
    a1ee:	b084      	sub	sp, #16
    a1f0:	af00      	add	r7, sp, #0
    a1f2:	6078      	str	r0, [r7, #4]
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    a1f4:	2082      	movs	r0, #130	; 0x82
    a1f6:	f001 fe01 	bl	bdfc <USBHwEPGetStatus>
    a1fa:	4603      	mov	r3, r0
    a1fc:	73fb      	strb	r3, [r7, #15]
	if (!(epstat & EPSTAT_B1FULL)) {
    a1fe:	7bfb      	ldrb	r3, [r7, #15]
    a200:	f003 0320 	and.w	r3, r3, #32
    a204:	2b00      	cmp	r3, #0
    a206:	d102      	bne.n	a20e <handle_usb+0x22>
		dequeue_send(clkn);
    a208:	6878      	ldr	r0, [r7, #4]
    a20a:	f7ff ffb9 	bl	a180 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    a20e:	7bfb      	ldrb	r3, [r7, #15]
    a210:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a214:	2b00      	cmp	r3, #0
    a216:	d102      	bne.n	a21e <handle_usb+0x32>
		dequeue_send(clkn);
    a218:	6878      	ldr	r0, [r7, #4]
    a21a:	f7ff ffb1 	bl	a180 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
    a21e:	f001 feef 	bl	c000 <USBHwISR>
}
    a222:	3710      	adds	r7, #16
    a224:	46bd      	mov	sp, r7
    a226:	bd80      	pop	{r7, pc}

0000a228 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a22c:	b095      	sub	sp, #84	; 0x54
    a22e:	af00      	add	r7, sp, #0
    a230:	6078      	str	r0, [r7, #4]
    a232:	4669      	mov	r1, sp
    a234:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u32 command[5];
	u32 result[5];
	int i;
	int j;
	u8 len = 22;
    a236:	2116      	movs	r1, #22
    a238:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
	u8 pa = 0;
    a23c:	2100      	movs	r1, #0
    a23e:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
	u8 txbuf[len];
    a242:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    a246:	4631      	mov	r1, r6
    a248:	3901      	subs	r1, #1
    a24a:	6439      	str	r1, [r7, #64]	; 0x40
    a24c:	b2f0      	uxtb	r0, r6
    a24e:	f04f 0100 	mov.w	r1, #0
    a252:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
    a256:	ea4b 7b50 	orr.w	fp, fp, r0, lsr #29
    a25a:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
    a25e:	b2f0      	uxtb	r0, r6
    a260:	f04f 0100 	mov.w	r1, #0
    a264:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    a268:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
    a26c:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    a270:	4631      	mov	r1, r6
    a272:	3107      	adds	r1, #7
    a274:	08c9      	lsrs	r1, r1, #3
    a276:	00c9      	lsls	r1, r1, #3
    a278:	ebad 0d01 	sub.w	sp, sp, r1
    a27c:	4669      	mov	r1, sp
    a27e:	3100      	adds	r1, #0
    a280:	63f9      	str	r1, [r7, #60]	; 0x3c
	u8 rxbuf[len];
    a282:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    a286:	4631      	mov	r1, r6
    a288:	3901      	subs	r1, #1
    a28a:	63b9      	str	r1, [r7, #56]	; 0x38
    a28c:	b2f0      	uxtb	r0, r6
    a28e:	f04f 0100 	mov.w	r1, #0
    a292:	00cd      	lsls	r5, r1, #3
    a294:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    a298:	00c4      	lsls	r4, r0, #3
    a29a:	b2f0      	uxtb	r0, r6
    a29c:	f04f 0100 	mov.w	r1, #0
    a2a0:	00cb      	lsls	r3, r1, #3
    a2a2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    a2a6:	00c2      	lsls	r2, r0, #3
    a2a8:	4633      	mov	r3, r6
    a2aa:	3307      	adds	r3, #7
    a2ac:	08db      	lsrs	r3, r3, #3
    a2ae:	00db      	lsls	r3, r3, #3
    a2b0:	ebad 0d03 	sub.w	sp, sp, r3
    a2b4:	466b      	mov	r3, sp
    a2b6:	3300      	adds	r3, #0
    a2b8:	637b      	str	r3, [r7, #52]	; 0x34

	txbuf[0] = len - 1; // length of data (rest of payload)
    a2ba:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
    a2be:	3b01      	subs	r3, #1
    a2c0:	b2da      	uxtb	r2, r3
    a2c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a2c4:	701a      	strb	r2, [r3, #0]
	txbuf[1] = 0; // request
    a2c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a2c8:	2200      	movs	r2, #0
    a2ca:	705a      	strb	r2, [r3, #1]

	// read device serial number
	command[0] = 58;
    a2cc:	233a      	movs	r3, #58	; 0x3a
    a2ce:	623b      	str	r3, [r7, #32]
	iap_entry(command, result);
    a2d0:	4bb3      	ldr	r3, [pc, #716]	; (a5a0 <cc2400_rangetest+0x378>)
    a2d2:	681b      	ldr	r3, [r3, #0]
    a2d4:	f107 0120 	add.w	r1, r7, #32
    a2d8:	f107 020c 	add.w	r2, r7, #12
    a2dc:	4608      	mov	r0, r1
    a2de:	4611      	mov	r1, r2
    a2e0:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    a2e2:	68fb      	ldr	r3, [r7, #12]
    a2e4:	b2db      	uxtb	r3, r3
    a2e6:	2b00      	cmp	r3, #0
    a2e8:	d001      	beq.n	a2ee <cc2400_rangetest+0xc6>
    a2ea:	2300      	movs	r3, #0
		return;
    a2ec:	e1ac      	b.n	a648 <cc2400_rangetest+0x420>
	txbuf[2] = (result[1] >> 24) & 0xFF;
    a2ee:	693b      	ldr	r3, [r7, #16]
    a2f0:	0e1b      	lsrs	r3, r3, #24
    a2f2:	b2da      	uxtb	r2, r3
    a2f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a2f6:	709a      	strb	r2, [r3, #2]
	txbuf[3] = (result[1] >> 16) & 0xFF;
    a2f8:	693b      	ldr	r3, [r7, #16]
    a2fa:	0c1b      	lsrs	r3, r3, #16
    a2fc:	b2da      	uxtb	r2, r3
    a2fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a300:	70da      	strb	r2, [r3, #3]
	txbuf[4] = (result[1] >> 8) & 0xFF;
    a302:	693b      	ldr	r3, [r7, #16]
    a304:	0a1b      	lsrs	r3, r3, #8
    a306:	b2da      	uxtb	r2, r3
    a308:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a30a:	711a      	strb	r2, [r3, #4]
	txbuf[5] = result[1] & 0xFF;
    a30c:	693b      	ldr	r3, [r7, #16]
    a30e:	b2da      	uxtb	r2, r3
    a310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a312:	715a      	strb	r2, [r3, #5]
	txbuf[6] = (result[2] >> 24) & 0xFF;
    a314:	697b      	ldr	r3, [r7, #20]
    a316:	0e1b      	lsrs	r3, r3, #24
    a318:	b2da      	uxtb	r2, r3
    a31a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a31c:	719a      	strb	r2, [r3, #6]
	txbuf[7] = (result[2] >> 16) & 0xFF;
    a31e:	697b      	ldr	r3, [r7, #20]
    a320:	0c1b      	lsrs	r3, r3, #16
    a322:	b2da      	uxtb	r2, r3
    a324:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a326:	71da      	strb	r2, [r3, #7]
	txbuf[8] = (result[2] >> 8) & 0xFF;
    a328:	697b      	ldr	r3, [r7, #20]
    a32a:	0a1b      	lsrs	r3, r3, #8
    a32c:	b2da      	uxtb	r2, r3
    a32e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a330:	721a      	strb	r2, [r3, #8]
	txbuf[9] = result[2] & 0xFF;
    a332:	697b      	ldr	r3, [r7, #20]
    a334:	b2da      	uxtb	r2, r3
    a336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a338:	725a      	strb	r2, [r3, #9]
	txbuf[10] = (result[3] >> 24) & 0xFF;
    a33a:	69bb      	ldr	r3, [r7, #24]
    a33c:	0e1b      	lsrs	r3, r3, #24
    a33e:	b2da      	uxtb	r2, r3
    a340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a342:	729a      	strb	r2, [r3, #10]
	txbuf[11] = (result[3] >> 16) & 0xFF;
    a344:	69bb      	ldr	r3, [r7, #24]
    a346:	0c1b      	lsrs	r3, r3, #16
    a348:	b2da      	uxtb	r2, r3
    a34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a34c:	72da      	strb	r2, [r3, #11]
	txbuf[12] = (result[3] >> 8) & 0xFF;
    a34e:	69bb      	ldr	r3, [r7, #24]
    a350:	0a1b      	lsrs	r3, r3, #8
    a352:	b2da      	uxtb	r2, r3
    a354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a356:	731a      	strb	r2, [r3, #12]
	txbuf[13] = result[3] & 0xFF;
    a358:	69bb      	ldr	r3, [r7, #24]
    a35a:	b2da      	uxtb	r2, r3
    a35c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a35e:	735a      	strb	r2, [r3, #13]
	txbuf[14] = (result[4] >> 24) & 0xFF;
    a360:	69fb      	ldr	r3, [r7, #28]
    a362:	0e1b      	lsrs	r3, r3, #24
    a364:	b2da      	uxtb	r2, r3
    a366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a368:	739a      	strb	r2, [r3, #14]
	txbuf[15] = (result[4] >> 16) & 0xFF;
    a36a:	69fb      	ldr	r3, [r7, #28]
    a36c:	0c1b      	lsrs	r3, r3, #16
    a36e:	b2da      	uxtb	r2, r3
    a370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a372:	73da      	strb	r2, [r3, #15]
	txbuf[16] = (result[4] >> 8) & 0xFF;
    a374:	69fb      	ldr	r3, [r7, #28]
    a376:	0a1b      	lsrs	r3, r3, #8
    a378:	b2da      	uxtb	r2, r3
    a37a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a37c:	741a      	strb	r2, [r3, #16]
	txbuf[17] = result[4] & 0xFF;
    a37e:	69fb      	ldr	r3, [r7, #28]
    a380:	b2da      	uxtb	r2, r3
    a382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a384:	745a      	strb	r2, [r3, #17]

	txbuf[18] = pa; // request pa
    a386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a388:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    a38c:	749a      	strb	r2, [r3, #18]
	txbuf[19] = 0; // request number
    a38e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a390:	2200      	movs	r2, #0
    a392:	74da      	strb	r2, [r3, #19]
	txbuf[20] = 0xff; // reply pa
    a394:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a396:	22ff      	movs	r2, #255	; 0xff
    a398:	751a      	strb	r2, [r3, #20]
	txbuf[21] = 0xff; // reply number
    a39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a39c:	22ff      	movs	r2, #255	; 0xff
    a39e:	755a      	strb	r2, [r3, #21]

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    a3a0:	2012      	movs	r0, #18
    a3a2:	f642 3122 	movw	r1, #11042	; 0x2b22
    a3a6:	f001 f8a5 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    a3aa:	2014      	movs	r0, #20
    a3ac:	f241 314b 	movw	r1, #4939	; 0x134b
    a3b0:	f001 f8a0 	bl	b4f4 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    a3b4:	2020      	movs	r0, #32
    a3b6:	f640 51f1 	movw	r1, #3569	; 0xdf1
    a3ba:	f001 f89b 	bl	b4f4 <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    a3be:	687b      	ldr	r3, [r7, #4]
    a3c0:	881b      	ldrh	r3, [r3, #0]
    a3c2:	b29b      	uxth	r3, r3
    a3c4:	2002      	movs	r0, #2
    a3c6:	4619      	mov	r1, r3
    a3c8:	f001 f894 	bl	b4f4 <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    a3cc:	202d      	movs	r0, #45	; 0x2d
    a3ce:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    a3d2:	f001 f88f 	bl	b4f4 <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    a3d6:	202c      	movs	r0, #44	; 0x2c
    a3d8:	f241 5184 	movw	r1, #5508	; 0x1584
    a3dc:	f001 f88a 	bl	b4f4 <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    a3e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    a3e4:	f043 0308 	orr.w	r3, r3, #8
    a3e8:	b2db      	uxtb	r3, r3
    a3ea:	b29b      	uxth	r3, r3
    a3ec:	2005      	movs	r0, #5
    a3ee:	4619      	mov	r1, r3
    a3f0:	f001 f880 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    a3f4:	2003      	movs	r0, #3
    a3f6:	2129      	movs	r1, #41	; 0x29
    a3f8:	f001 f87c 	bl	b4f4 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    a3fc:	bf00      	nop
    a3fe:	f001 f921 	bl	b644 <cc2400_status>
    a402:	4603      	mov	r3, r0
    a404:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a408:	2b00      	cmp	r3, #0
    a40a:	d0f8      	beq.n	a3fe <cc2400_rangetest+0x1d6>
	cc2400_strobe(SFSON);
    a40c:	2061      	movs	r0, #97	; 0x61
    a40e:	f001 f923 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    a412:	bf00      	nop
    a414:	f001 f916 	bl	b644 <cc2400_status>
    a418:	4603      	mov	r3, r0
    a41a:	f003 0304 	and.w	r3, r3, #4
    a41e:	2b00      	cmp	r3, #0
    a420:	d0f8      	beq.n	a414 <cc2400_rangetest+0x1ec>
	TXLED_SET;
    a422:	4b60      	ldr	r3, [pc, #384]	; (a5a4 <cc2400_rangetest+0x37c>)
    a424:	f44f 7280 	mov.w	r2, #256	; 0x100
    a428:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    a42a:	4b5f      	ldr	r3, [pc, #380]	; (a5a8 <cc2400_rangetest+0x380>)
    a42c:	2280      	movs	r2, #128	; 0x80
    a42e:	601a      	str	r2, [r3, #0]
#endif
	for (pa = 0; pa < 8; pa++) {
    a430:	2300      	movs	r3, #0
    a432:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    a436:	e03e      	b.n	a4b6 <cc2400_rangetest+0x28e>
		cc2400_set(FREND, 8 | pa);
    a438:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    a43c:	f043 0308 	orr.w	r3, r3, #8
    a440:	b2db      	uxtb	r3, r3
    a442:	b29b      	uxth	r3, r3
    a444:	2005      	movs	r0, #5
    a446:	4619      	mov	r1, r3
    a448:	f001 f854 	bl	b4f4 <cc2400_set>
		txbuf[18] = pa;
    a44c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a44e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    a452:	749a      	strb	r2, [r3, #18]
		for (i = 0; i < 16; i++) {
    a454:	2300      	movs	r3, #0
    a456:	64fb      	str	r3, [r7, #76]	; 0x4c
    a458:	e025      	b.n	a4a6 <cc2400_rangetest+0x27e>
			txbuf[19] = i;
    a45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a45c:	b2da      	uxtb	r2, r3
    a45e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a460:	74da      	strb	r2, [r3, #19]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    a462:	bf00      	nop
    a464:	200e      	movs	r0, #14
    a466:	f001 f82f 	bl	b4c8 <cc2400_get>
    a46a:	4603      	mov	r3, r0
    a46c:	f003 031f 	and.w	r3, r3, #31
    a470:	2b0f      	cmp	r3, #15
    a472:	d1f7      	bne.n	a464 <cc2400_rangetest+0x23c>
			// transmit a packet
			for (j = 0; j < len; j++)
    a474:	2300      	movs	r3, #0
    a476:	64bb      	str	r3, [r7, #72]	; 0x48
    a478:	e00a      	b.n	a490 <cc2400_rangetest+0x268>
				cc2400_set8(FIFOREG, txbuf[j]);
    a47a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    a47c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a47e:	4413      	add	r3, r2
    a480:	781b      	ldrb	r3, [r3, #0]
    a482:	2070      	movs	r0, #112	; 0x70
    a484:	4619      	mov	r1, r3
    a486:	f001 f863 	bl	b550 <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    a48a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a48c:	3301      	adds	r3, #1
    a48e:	64bb      	str	r3, [r7, #72]	; 0x48
    a490:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    a494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a496:	429a      	cmp	r2, r3
    a498:	dcef      	bgt.n	a47a <cc2400_rangetest+0x252>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    a49a:	2063      	movs	r0, #99	; 0x63
    a49c:	f001 f8dc 	bl	b658 <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    a4a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a4a2:	3301      	adds	r3, #1
    a4a4:	64fb      	str	r3, [r7, #76]	; 0x4c
    a4a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a4a8:	2b0f      	cmp	r3, #15
    a4aa:	ddd6      	ble.n	a45a <cc2400_rangetest+0x232>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    a4ac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    a4b0:	3301      	adds	r3, #1
    a4b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    a4b6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    a4ba:	2b07      	cmp	r3, #7
    a4bc:	d9bc      	bls.n	a438 <cc2400_rangetest+0x210>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    a4be:	bf00      	nop
    a4c0:	200e      	movs	r0, #14
    a4c2:	f001 f801 	bl	b4c8 <cc2400_get>
    a4c6:	4603      	mov	r3, r0
    a4c8:	f003 031f 	and.w	r3, r3, #31
    a4cc:	2b0f      	cmp	r3, #15
    a4ce:	d1f7      	bne.n	a4c0 <cc2400_rangetest+0x298>
	TXLED_CLR;
    a4d0:	4b36      	ldr	r3, [pc, #216]	; (a5ac <cc2400_rangetest+0x384>)
    a4d2:	f44f 7280 	mov.w	r2, #256	; 0x100
    a4d6:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    a4d8:	2064      	movs	r0, #100	; 0x64
    a4da:	f001 f8bd 	bl	b658 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    a4de:	bf00      	nop
    a4e0:	f001 f8b0 	bl	b644 <cc2400_status>
    a4e4:	4603      	mov	r3, r0
    a4e6:	f003 0304 	and.w	r3, r3, #4
    a4ea:	2b00      	cmp	r3, #0
    a4ec:	d1f8      	bne.n	a4e0 <cc2400_rangetest+0x2b8>
	cc2400_set(FSDIV, *chan_ptr - 1);
    a4ee:	687b      	ldr	r3, [r7, #4]
    a4f0:	881b      	ldrh	r3, [r3, #0]
    a4f2:	b29b      	uxth	r3, r3
    a4f4:	3b01      	subs	r3, #1
    a4f6:	b29b      	uxth	r3, r3
    a4f8:	2002      	movs	r0, #2
    a4fa:	4619      	mov	r1, r3
    a4fc:	f000 fffa 	bl	b4f4 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    a500:	bf00      	nop
    a502:	f001 f89f 	bl	b644 <cc2400_status>
    a506:	4603      	mov	r3, r0
    a508:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a50c:	2b00      	cmp	r3, #0
    a50e:	d0f8      	beq.n	a502 <cc2400_rangetest+0x2da>
	cc2400_strobe(SFSON);
    a510:	2061      	movs	r0, #97	; 0x61
    a512:	f001 f8a1 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    a516:	bf00      	nop
    a518:	f001 f894 	bl	b644 <cc2400_status>
    a51c:	4603      	mov	r3, r0
    a51e:	f003 0304 	and.w	r3, r3, #4
    a522:	2b00      	cmp	r3, #0
    a524:	d0f8      	beq.n	a518 <cc2400_rangetest+0x2f0>
	RXLED_SET;
    a526:	4b1f      	ldr	r3, [pc, #124]	; (a5a4 <cc2400_rangetest+0x37c>)
    a528:	2210      	movs	r2, #16
    a52a:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    a52c:	bf00      	nop
    a52e:	200e      	movs	r0, #14
    a530:	f000 ffca 	bl	b4c8 <cc2400_get>
    a534:	4603      	mov	r3, r0
    a536:	f003 031f 	and.w	r3, r3, #31
    a53a:	2b0f      	cmp	r3, #15
    a53c:	d1f7      	bne.n	a52e <cc2400_rangetest+0x306>
		cc2400_strobe(SRX);
    a53e:	2062      	movs	r0, #98	; 0x62
    a540:	f001 f88a 	bl	b658 <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    a544:	bf00      	nop
    a546:	f001 f87d 	bl	b644 <cc2400_status>
    a54a:	4603      	mov	r3, r0
    a54c:	f003 0310 	and.w	r3, r3, #16
    a550:	2b00      	cmp	r3, #0
    a552:	d0f8      	beq.n	a546 <cc2400_rangetest+0x31e>
		USRLED_SET;
    a554:	4b13      	ldr	r3, [pc, #76]	; (a5a4 <cc2400_rangetest+0x37c>)
    a556:	2202      	movs	r2, #2
    a558:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
    a55a:	2300      	movs	r3, #0
    a55c:	64bb      	str	r3, [r7, #72]	; 0x48
    a55e:	e00c      	b.n	a57a <cc2400_rangetest+0x352>
			rxbuf[j] = cc2400_get8(FIFOREG);
    a560:	2070      	movs	r0, #112	; 0x70
    a562:	f000 ffdb 	bl	b51c <cc2400_get8>
    a566:	4603      	mov	r3, r0
    a568:	4619      	mov	r1, r3
    a56a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    a56c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a56e:	4413      	add	r3, r2
    a570:	460a      	mov	r2, r1
    a572:	701a      	strb	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    a574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a576:	3301      	adds	r3, #1
    a578:	64bb      	str	r3, [r7, #72]	; 0x48
    a57a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    a57e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    a580:	429a      	cmp	r2, r3
    a582:	dced      	bgt.n	a560 <cc2400_rangetest+0x338>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    a584:	f001 f85e 	bl	b644 <cc2400_status>
    a588:	4603      	mov	r3, r0
    a58a:	f003 0308 	and.w	r3, r3, #8
    a58e:	2b00      	cmp	r3, #0
    a590:	d001      	beq.n	a596 <cc2400_rangetest+0x36e>
			break;
    a592:	bf00      	nop
		USRLED_CLR;
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    a594:	e00c      	b.n	a5b0 <cc2400_rangetest+0x388>
		USRLED_SET;
		for (j = 0; j < len; j++)
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
			break;
		USRLED_CLR;
    a596:	4b05      	ldr	r3, [pc, #20]	; (a5ac <cc2400_rangetest+0x384>)
    a598:	2202      	movs	r2, #2
    a59a:	601a      	str	r2, [r3, #0]
	}
    a59c:	e7c6      	b.n	a52c <cc2400_rangetest+0x304>
    a59e:	bf00      	nop
    a5a0:	100008a8 	.word	0x100008a8
    a5a4:	2009c038 	.word	0x2009c038
    a5a8:	2009c058 	.word	0x2009c058
    a5ac:	2009c03c 	.word	0x2009c03c

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    a5b0:	200e      	movs	r0, #14
    a5b2:	f000 ff89 	bl	b4c8 <cc2400_get>
    a5b6:	4603      	mov	r3, r0
    a5b8:	f003 031f 	and.w	r3, r3, #31
    a5bc:	2b0f      	cmp	r3, #15
    a5be:	d1f7      	bne.n	a5b0 <cc2400_rangetest+0x388>
	cc2400_strobe(SRFOFF);
    a5c0:	2064      	movs	r0, #100	; 0x64
    a5c2:	f001 f849 	bl	b658 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    a5c6:	bf00      	nop
    a5c8:	f001 f83c 	bl	b644 <cc2400_status>
    a5cc:	4603      	mov	r3, r0
    a5ce:	f003 0304 	and.w	r3, r3, #4
    a5d2:	2b00      	cmp	r3, #0
    a5d4:	d1f8      	bne.n	a5c8 <cc2400_rangetest+0x3a0>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    a5d6:	4b20      	ldr	r3, [pc, #128]	; (a658 <cc2400_rangetest+0x430>)
    a5d8:	2280      	movs	r2, #128	; 0x80
    a5da:	601a      	str	r2, [r3, #0]
#endif
	RXLED_CLR;
    a5dc:	4b1f      	ldr	r3, [pc, #124]	; (a65c <cc2400_rangetest+0x434>)
    a5de:	2210      	movs	r2, #16
    a5e0:	601a      	str	r2, [r3, #0]

	// get test result
	rr.valid       = 1;
    a5e2:	4b1f      	ldr	r3, [pc, #124]	; (a660 <cc2400_rangetest+0x438>)
    a5e4:	2201      	movs	r2, #1
    a5e6:	701a      	strb	r2, [r3, #0]
	rr.request_pa  = rxbuf[18];
    a5e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a5ea:	7c9a      	ldrb	r2, [r3, #18]
    a5ec:	4b1c      	ldr	r3, [pc, #112]	; (a660 <cc2400_rangetest+0x438>)
    a5ee:	705a      	strb	r2, [r3, #1]
	rr.request_num = rxbuf[19];
    a5f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a5f2:	7cda      	ldrb	r2, [r3, #19]
    a5f4:	4b1a      	ldr	r3, [pc, #104]	; (a660 <cc2400_rangetest+0x438>)
    a5f6:	709a      	strb	r2, [r3, #2]
	rr.reply_pa    = rxbuf[20];
    a5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a5fa:	7d1a      	ldrb	r2, [r3, #20]
    a5fc:	4b18      	ldr	r3, [pc, #96]	; (a660 <cc2400_rangetest+0x438>)
    a5fe:	70da      	strb	r2, [r3, #3]
	rr.reply_num   = rxbuf[21];
    a600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    a602:	7d5a      	ldrb	r2, [r3, #21]
    a604:	4b16      	ldr	r3, [pc, #88]	; (a660 <cc2400_rangetest+0x438>)
    a606:	711a      	strb	r2, [r3, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    a608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    a60a:	2201      	movs	r2, #1
    a60c:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 18; i++)
    a60e:	2300      	movs	r3, #0
    a610:	64fb      	str	r3, [r7, #76]	; 0x4c
    a612:	e012      	b.n	a63a <cc2400_rangetest+0x412>
		if (rxbuf[i] != txbuf[i])
    a614:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    a616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a618:	4413      	add	r3, r2
    a61a:	781a      	ldrb	r2, [r3, #0]
    a61c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    a61e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a620:	440b      	add	r3, r1
    a622:	781b      	ldrb	r3, [r3, #0]
    a624:	429a      	cmp	r2, r3
    a626:	d005      	beq.n	a634 <cc2400_rangetest+0x40c>
			rr.valid = 2 + i;
    a628:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a62a:	b2db      	uxtb	r3, r3
    a62c:	3302      	adds	r3, #2
    a62e:	b2da      	uxtb	r2, r3
    a630:	4b0b      	ldr	r3, [pc, #44]	; (a660 <cc2400_rangetest+0x438>)
    a632:	701a      	strb	r2, [r3, #0]
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    a634:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a636:	3301      	adds	r3, #1
    a638:	64fb      	str	r3, [r7, #76]	; 0x4c
    a63a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    a63c:	2b11      	cmp	r3, #17
    a63e:	dde9      	ble.n	a614 <cc2400_rangetest+0x3ec>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    a640:	4b06      	ldr	r3, [pc, #24]	; (a65c <cc2400_rangetest+0x434>)
    a642:	2202      	movs	r2, #2
    a644:	601a      	str	r2, [r3, #0]
    a646:	2301      	movs	r3, #1
    a648:	f8d7 d000 	ldr.w	sp, [r7]
    a64c:	2b01      	cmp	r3, #1
#endif
}
    a64e:	3754      	adds	r7, #84	; 0x54
    a650:	46bd      	mov	sp, r7
    a652:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a656:	bf00      	nop
    a658:	2009c05c 	.word	0x2009c05c
    a65c:	2009c03c 	.word	0x2009c03c
    a660:	10001094 	.word	0x10001094

0000a664 <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    a664:	b5f0      	push	{r4, r5, r6, r7, lr}
    a666:	b089      	sub	sp, #36	; 0x24
    a668:	af00      	add	r7, sp, #0
    a66a:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	int i;
	int j;
	u8 len = 22;
    a66c:	2116      	movs	r1, #22
    a66e:	75b9      	strb	r1, [r7, #22]
	u8 pa = 0;
    a670:	2100      	movs	r1, #0
    a672:	75f9      	strb	r1, [r7, #23]
	u8 buf[len];
    a674:	7dbe      	ldrb	r6, [r7, #22]
    a676:	4631      	mov	r1, r6
    a678:	3901      	subs	r1, #1
    a67a:	6139      	str	r1, [r7, #16]
    a67c:	b2f0      	uxtb	r0, r6
    a67e:	f04f 0100 	mov.w	r1, #0
    a682:	00cd      	lsls	r5, r1, #3
    a684:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    a688:	00c4      	lsls	r4, r0, #3
    a68a:	b2f0      	uxtb	r0, r6
    a68c:	f04f 0100 	mov.w	r1, #0
    a690:	00cb      	lsls	r3, r1, #3
    a692:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    a696:	00c2      	lsls	r2, r0, #3
    a698:	4633      	mov	r3, r6
    a69a:	3307      	adds	r3, #7
    a69c:	08db      	lsrs	r3, r3, #3
    a69e:	00db      	lsls	r3, r3, #3
    a6a0:	ebad 0d03 	sub.w	sp, sp, r3
    a6a4:	466b      	mov	r3, sp
    a6a6:	3300      	adds	r3, #0
    a6a8:	60fb      	str	r3, [r7, #12]

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(LMTST,   0x2b22);
    a6aa:	2012      	movs	r0, #18
    a6ac:	f642 3122 	movw	r1, #11042	; 0x2b22
    a6b0:	f000 ff20 	bl	b4f4 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    a6b4:	2014      	movs	r0, #20
    a6b6:	f241 314b 	movw	r1, #4939	; 0x134b
    a6ba:	f000 ff1b 	bl	b4f4 <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    a6be:	687b      	ldr	r3, [r7, #4]
    a6c0:	881b      	ldrh	r3, [r3, #0]
    a6c2:	b29b      	uxth	r3, r3
    a6c4:	3b01      	subs	r3, #1
    a6c6:	b29b      	uxth	r3, r3
    a6c8:	2002      	movs	r0, #2
    a6ca:	4619      	mov	r1, r3
    a6cc:	f000 ff12 	bl	b4f4 <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    a6d0:	202d      	movs	r0, #45	; 0x2d
    a6d2:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    a6d6:	f000 ff0d 	bl	b4f4 <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    a6da:	202c      	movs	r0, #44	; 0x2c
    a6dc:	f241 5184 	movw	r1, #5508	; 0x1584
    a6e0:	f000 ff08 	bl	b4f4 <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    a6e4:	2005      	movs	r0, #5
    a6e6:	2108      	movs	r1, #8
    a6e8:	f000 ff04 	bl	b4f4 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    a6ec:	2003      	movs	r0, #3
    a6ee:	2129      	movs	r1, #41	; 0x29
    a6f0:	f000 ff00 	bl	b4f4 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    a6f4:	bf00      	nop
    a6f6:	f000 ffa5 	bl	b644 <cc2400_status>
    a6fa:	4603      	mov	r3, r0
    a6fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a700:	2b00      	cmp	r3, #0
    a702:	d0f8      	beq.n	a6f6 <cc2400_repeater+0x92>
		cc2400_strobe(SFSON);
    a704:	2061      	movs	r0, #97	; 0x61
    a706:	f000 ffa7 	bl	b658 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    a70a:	bf00      	nop
    a70c:	f000 ff9a 	bl	b644 <cc2400_status>
    a710:	4603      	mov	r3, r0
    a712:	f003 0304 	and.w	r3, r3, #4
    a716:	2b00      	cmp	r3, #0
    a718:	d0f8      	beq.n	a70c <cc2400_repeater+0xa8>
		RXLED_SET;
    a71a:	4b6a      	ldr	r3, [pc, #424]	; (a8c4 <cc2400_repeater+0x260>)
    a71c:	2210      	movs	r2, #16
    a71e:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    a720:	4b69      	ldr	r3, [pc, #420]	; (a8c8 <cc2400_repeater+0x264>)
    a722:	f44f 7280 	mov.w	r2, #256	; 0x100
    a726:	601a      	str	r2, [r3, #0]
		USRLED_CLR;
    a728:	4b67      	ldr	r3, [pc, #412]	; (a8c8 <cc2400_repeater+0x264>)
    a72a:	2202      	movs	r2, #2
    a72c:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    a72e:	4b67      	ldr	r3, [pc, #412]	; (a8cc <cc2400_repeater+0x268>)
    a730:	2280      	movs	r2, #128	; 0x80
    a732:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    a734:	bf00      	nop
    a736:	200e      	movs	r0, #14
    a738:	f000 fec6 	bl	b4c8 <cc2400_get>
    a73c:	4603      	mov	r3, r0
    a73e:	f003 031f 	and.w	r3, r3, #31
    a742:	2b0f      	cmp	r3, #15
    a744:	d1f7      	bne.n	a736 <cc2400_repeater+0xd2>
			USRLED_CLR;
    a746:	4b60      	ldr	r3, [pc, #384]	; (a8c8 <cc2400_repeater+0x264>)
    a748:	2202      	movs	r2, #2
    a74a:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRX);
    a74c:	2062      	movs	r0, #98	; 0x62
    a74e:	f000 ff83 	bl	b658 <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    a752:	bf00      	nop
    a754:	f000 ff76 	bl	b644 <cc2400_status>
    a758:	4603      	mov	r3, r0
    a75a:	f003 0310 	and.w	r3, r3, #16
    a75e:	2b00      	cmp	r3, #0
    a760:	d0f8      	beq.n	a754 <cc2400_repeater+0xf0>
			USRLED_SET;
    a762:	4b58      	ldr	r3, [pc, #352]	; (a8c4 <cc2400_repeater+0x260>)
    a764:	2202      	movs	r2, #2
    a766:	601a      	str	r2, [r3, #0]
			for (i = 0; i < len; i++)
    a768:	2300      	movs	r3, #0
    a76a:	61fb      	str	r3, [r7, #28]
    a76c:	e00c      	b.n	a788 <cc2400_repeater+0x124>
				buf[i] = cc2400_get8(FIFOREG);
    a76e:	2070      	movs	r0, #112	; 0x70
    a770:	f000 fed4 	bl	b51c <cc2400_get8>
    a774:	4603      	mov	r3, r0
    a776:	4619      	mov	r1, r3
    a778:	68fa      	ldr	r2, [r7, #12]
    a77a:	69fb      	ldr	r3, [r7, #28]
    a77c:	4413      	add	r3, r2
    a77e:	460a      	mov	r2, r1
    a780:	701a      	strb	r2, [r3, #0]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    a782:	69fb      	ldr	r3, [r7, #28]
    a784:	3301      	adds	r3, #1
    a786:	61fb      	str	r3, [r7, #28]
    a788:	7dba      	ldrb	r2, [r7, #22]
    a78a:	69fb      	ldr	r3, [r7, #28]
    a78c:	429a      	cmp	r2, r3
    a78e:	dcee      	bgt.n	a76e <cc2400_repeater+0x10a>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    a790:	f000 ff58 	bl	b644 <cc2400_status>
    a794:	4603      	mov	r3, r0
    a796:	f003 0308 	and.w	r3, r3, #8
    a79a:	2b00      	cmp	r3, #0
    a79c:	d003      	beq.n	a7a6 <cc2400_repeater+0x142>
				break;
    a79e:	bf00      	nop
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    a7a0:	4b4b      	ldr	r3, [pc, #300]	; (a8d0 <cc2400_repeater+0x26c>)
    a7a2:	61fb      	str	r3, [r7, #28]
    a7a4:	e000      	b.n	a7a8 <cc2400_repeater+0x144>
			USRLED_SET;
			for (i = 0; i < len; i++)
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
				break;
		}
    a7a6:	e7c5      	b.n	a734 <cc2400_repeater+0xd0>
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    a7a8:	69fb      	ldr	r3, [r7, #28]
    a7aa:	3b01      	subs	r3, #1
    a7ac:	61fb      	str	r3, [r7, #28]
    a7ae:	69fb      	ldr	r3, [r7, #28]
    a7b0:	2b00      	cmp	r3, #0
    a7b2:	d1f9      	bne.n	a7a8 <cc2400_repeater+0x144>
		USRLED_CLR;
    a7b4:	4b44      	ldr	r3, [pc, #272]	; (a8c8 <cc2400_repeater+0x264>)
    a7b6:	2202      	movs	r2, #2
    a7b8:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    a7ba:	4b43      	ldr	r3, [pc, #268]	; (a8c8 <cc2400_repeater+0x264>)
    a7bc:	2210      	movs	r2, #16
    a7be:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    a7c0:	2064      	movs	r0, #100	; 0x64
    a7c2:	f000 ff49 	bl	b658 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    a7c6:	bf00      	nop
    a7c8:	f000 ff3c 	bl	b644 <cc2400_status>
    a7cc:	4603      	mov	r3, r0
    a7ce:	f003 0304 	and.w	r3, r3, #4
    a7d2:	2b00      	cmp	r3, #0
    a7d4:	d1f8      	bne.n	a7c8 <cc2400_repeater+0x164>
		while (!(cc2400_status() & XOSC16M_STABLE));
    a7d6:	bf00      	nop
    a7d8:	f000 ff34 	bl	b644 <cc2400_status>
    a7dc:	4603      	mov	r3, r0
    a7de:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a7e2:	2b00      	cmp	r3, #0
    a7e4:	d0f8      	beq.n	a7d8 <cc2400_repeater+0x174>
		cc2400_set(FSDIV, *chan_ptr);
    a7e6:	687b      	ldr	r3, [r7, #4]
    a7e8:	881b      	ldrh	r3, [r3, #0]
    a7ea:	b29b      	uxth	r3, r3
    a7ec:	2002      	movs	r0, #2
    a7ee:	4619      	mov	r1, r3
    a7f0:	f000 fe80 	bl	b4f4 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    a7f4:	bf00      	nop
    a7f6:	f000 ff25 	bl	b644 <cc2400_status>
    a7fa:	4603      	mov	r3, r0
    a7fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a800:	2b00      	cmp	r3, #0
    a802:	d0f8      	beq.n	a7f6 <cc2400_repeater+0x192>
		cc2400_strobe(SFSON);
    a804:	2061      	movs	r0, #97	; 0x61
    a806:	f000 ff27 	bl	b658 <cc2400_strobe>
		TXLED_SET;
    a80a:	4b2e      	ldr	r3, [pc, #184]	; (a8c4 <cc2400_repeater+0x260>)
    a80c:	f44f 7280 	mov.w	r2, #256	; 0x100
    a810:	601a      	str	r2, [r3, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    a812:	7dbb      	ldrb	r3, [r7, #22]
    a814:	3b01      	subs	r3, #1
    a816:	b2da      	uxtb	r2, r3
    a818:	68fb      	ldr	r3, [r7, #12]
    a81a:	701a      	strb	r2, [r3, #0]
		buf[1] = 1; // reply
    a81c:	68fb      	ldr	r3, [r7, #12]
    a81e:	2201      	movs	r2, #1
    a820:	705a      	strb	r2, [r3, #1]
		for (pa = 0; pa < 8; pa++) {
    a822:	2300      	movs	r3, #0
    a824:	75fb      	strb	r3, [r7, #23]
    a826:	e039      	b.n	a89c <cc2400_repeater+0x238>
			cc2400_set(FREND, 8 | pa);
    a828:	7dfb      	ldrb	r3, [r7, #23]
    a82a:	f043 0308 	orr.w	r3, r3, #8
    a82e:	b2db      	uxtb	r3, r3
    a830:	b29b      	uxth	r3, r3
    a832:	2005      	movs	r0, #5
    a834:	4619      	mov	r1, r3
    a836:	f000 fe5d 	bl	b4f4 <cc2400_set>
			buf[20] = pa;
    a83a:	68fb      	ldr	r3, [r7, #12]
    a83c:	7dfa      	ldrb	r2, [r7, #23]
    a83e:	751a      	strb	r2, [r3, #20]
			for (i = 0; i < 16; i++) {
    a840:	2300      	movs	r3, #0
    a842:	61fb      	str	r3, [r7, #28]
    a844:	e024      	b.n	a890 <cc2400_repeater+0x22c>
				buf[21] = i;
    a846:	69fb      	ldr	r3, [r7, #28]
    a848:	b2da      	uxtb	r2, r3
    a84a:	68fb      	ldr	r3, [r7, #12]
    a84c:	755a      	strb	r2, [r3, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    a84e:	bf00      	nop
    a850:	200e      	movs	r0, #14
    a852:	f000 fe39 	bl	b4c8 <cc2400_get>
    a856:	4603      	mov	r3, r0
    a858:	f003 031f 	and.w	r3, r3, #31
    a85c:	2b0f      	cmp	r3, #15
    a85e:	d1f7      	bne.n	a850 <cc2400_repeater+0x1ec>
					for (j = 0; j < len; j++)
    a860:	2300      	movs	r3, #0
    a862:	61bb      	str	r3, [r7, #24]
    a864:	e00a      	b.n	a87c <cc2400_repeater+0x218>
						cc2400_set8(FIFOREG, buf[j]);
    a866:	68fa      	ldr	r2, [r7, #12]
    a868:	69bb      	ldr	r3, [r7, #24]
    a86a:	4413      	add	r3, r2
    a86c:	781b      	ldrb	r3, [r3, #0]
    a86e:	2070      	movs	r0, #112	; 0x70
    a870:	4619      	mov	r1, r3
    a872:	f000 fe6d 	bl	b550 <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
					for (j = 0; j < len; j++)
    a876:	69bb      	ldr	r3, [r7, #24]
    a878:	3301      	adds	r3, #1
    a87a:	61bb      	str	r3, [r7, #24]
    a87c:	7dba      	ldrb	r2, [r7, #22]
    a87e:	69bb      	ldr	r3, [r7, #24]
    a880:	429a      	cmp	r2, r3
    a882:	dcf0      	bgt.n	a866 <cc2400_repeater+0x202>
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    a884:	2063      	movs	r0, #99	; 0x63
    a886:	f000 fee7 	bl	b658 <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    a88a:	69fb      	ldr	r3, [r7, #28]
    a88c:	3301      	adds	r3, #1
    a88e:	61fb      	str	r3, [r7, #28]
    a890:	69fb      	ldr	r3, [r7, #28]
    a892:	2b0f      	cmp	r3, #15
    a894:	ddd7      	ble.n	a846 <cc2400_repeater+0x1e2>
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    a896:	7dfb      	ldrb	r3, [r7, #23]
    a898:	3301      	adds	r3, #1
    a89a:	75fb      	strb	r3, [r7, #23]
    a89c:	7dfb      	ldrb	r3, [r7, #23]
    a89e:	2b07      	cmp	r3, #7
    a8a0:	d9c2      	bls.n	a828 <cc2400_repeater+0x1c4>
					for (j = 0; j < len; j++)
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    a8a2:	4b09      	ldr	r3, [pc, #36]	; (a8c8 <cc2400_repeater+0x264>)
    a8a4:	f44f 7280 	mov.w	r2, #256	; 0x100
    a8a8:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    a8aa:	2064      	movs	r0, #100	; 0x64
    a8ac:	f000 fed4 	bl	b658 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    a8b0:	bf00      	nop
    a8b2:	f000 fec7 	bl	b644 <cc2400_status>
    a8b6:	4603      	mov	r3, r0
    a8b8:	f003 0304 	and.w	r3, r3, #4
    a8bc:	2b00      	cmp	r3, #0
    a8be:	d1f8      	bne.n	a8b2 <cc2400_repeater+0x24e>
	}
    a8c0:	e6f3      	b.n	a6aa <cc2400_repeater+0x46>
    a8c2:	bf00      	nop
    a8c4:	2009c038 	.word	0x2009c038
    a8c8:	2009c03c 	.word	0x2009c03c
    a8cc:	2009c058 	.word	0x2009c058
    a8d0:	001e8480 	.word	0x001e8480

0000a8d4 <ssp_start>:
typedef struct _ego_packet_t {
	u8 rxbuf[EGO_PACKET_LEN];
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
    a8d4:	b480      	push	{r7}
    a8d6:	af00      	add	r7, sp, #0
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    a8d8:	4b08      	ldr	r3, [pc, #32]	; (a8fc <ssp_start+0x28>)
    a8da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a8de:	601a      	str	r2, [r3, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    a8e0:	4a07      	ldr	r2, [pc, #28]	; (a900 <ssp_start+0x2c>)
    a8e2:	4b07      	ldr	r3, [pc, #28]	; (a900 <ssp_start+0x2c>)
    a8e4:	681b      	ldr	r3, [r3, #0]
    a8e6:	f043 0302 	orr.w	r3, r3, #2
    a8ea:	6013      	str	r3, [r2, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    a8ec:	4b05      	ldr	r3, [pc, #20]	; (a904 <ssp_start+0x30>)
    a8ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a8f2:	601a      	str	r2, [r3, #0]
}
    a8f4:	46bd      	mov	sp, r7
    a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8fa:	4770      	bx	lr
    a8fc:	2009c098 	.word	0x2009c098
    a900:	40030004 	.word	0x40030004
    a904:	2009c09c 	.word	0x2009c09c

0000a908 <ssp_stop>:

static void ssp_stop() {
    a908:	b480      	push	{r7}
    a90a:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    a90c:	4b06      	ldr	r3, [pc, #24]	; (a928 <ssp_stop+0x20>)
    a90e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a912:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    a914:	4a05      	ldr	r2, [pc, #20]	; (a92c <ssp_stop+0x24>)
    a916:	4b05      	ldr	r3, [pc, #20]	; (a92c <ssp_stop+0x24>)
    a918:	681b      	ldr	r3, [r3, #0]
    a91a:	f023 0302 	bic.w	r3, r3, #2
    a91e:	6013      	str	r3, [r2, #0]
}
    a920:	46bd      	mov	sp, r7
    a922:	f85d 7b04 	ldr.w	r7, [sp], #4
    a926:	4770      	bx	lr
    a928:	2009c098 	.word	0x2009c098
    a92c:	40030004 	.word	0x40030004

0000a930 <ego_init>:

static void ego_init(void) {
    a930:	b580      	push	{r7, lr}
    a932:	af00      	add	r7, sp, #0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    a934:	4b03      	ldr	r3, [pc, #12]	; (a944 <ego_init+0x14>)
    a936:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    a93a:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    a93c:	f000 fd08 	bl	b350 <dio_ssp_init>
}
    a940:	bd80      	pop	{r7, pc}
    a942:	bf00      	nop
    a944:	e000e100 	.word	0xe000e100

0000a948 <ego_deinit>:

static void ego_deinit(void) {
    a948:	b580      	push	{r7, lr}
    a94a:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    a94c:	2064      	movs	r0, #100	; 0x64
    a94e:	f000 fe83 	bl	b658 <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    a952:	f7ff ffd9 	bl	a908 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    a956:	4b02      	ldr	r3, [pc, #8]	; (a960 <ego_deinit+0x18>)
    a958:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    a95c:	601a      	str	r2, [r3, #0]
}
    a95e:	bd80      	pop	{r7, pc}
    a960:	e000e180 	.word	0xe000e180

0000a964 <rf_on>:

static void rf_on(void) {
    a964:	b580      	push	{r7, lr}
    a966:	af00      	add	r7, sp, #0
	cc2400_set(MANAND,  0x7fff);
    a968:	200d      	movs	r0, #13
    a96a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    a96e:	f000 fdc1 	bl	b4f4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    a972:	2012      	movs	r0, #18
    a974:	f642 3122 	movw	r1, #11042	; 0x2b22
    a978:	f000 fdbc 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    a97c:	2014      	movs	r0, #20
    a97e:	f241 314b 	movw	r1, #4939	; 0x134b
    a982:	f000 fdb7 	bl	b4f4 <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    a986:	2020      	movs	r0, #32
    a988:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    a98c:	f000 fdb2 	bl	b4f4 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    a990:	4b1e      	ldr	r3, [pc, #120]	; (aa0c <rf_on+0xa8>)
    a992:	881b      	ldrh	r3, [r3, #0]
    a994:	b29b      	uxth	r3, r3
    a996:	3b01      	subs	r3, #1
    a998:	b29b      	uxth	r3, r3
    a99a:	2002      	movs	r0, #2
    a99c:	4619      	mov	r1, r3
    a99e:	f000 fda9 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    a9a2:	2003      	movs	r0, #3
    a9a4:	2126      	movs	r1, #38	; 0x26
    a9a6:	f000 fda5 	bl	b4f4 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    a9aa:	2021      	movs	r0, #33	; 0x21
    a9ac:	2103      	movs	r1, #3
    a9ae:	f000 fda1 	bl	b4f4 <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    a9b2:	202d      	movs	r0, #45	; 0x2d
    a9b4:	f246 310f 	movw	r1, #25359	; 0x630f
    a9b8:	f000 fd9c 	bl	b4f4 <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    a9bc:	202c      	movs	r0, #44	; 0x2c
    a9be:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    a9c2:	f000 fd97 	bl	b4f4 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    a9c6:	bf00      	nop
    a9c8:	f000 fe3c 	bl	b644 <cc2400_status>
    a9cc:	4603      	mov	r3, r0
    a9ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a9d2:	2b00      	cmp	r3, #0
    a9d4:	d0f8      	beq.n	a9c8 <rf_on+0x64>

	ssp_start();
    a9d6:	f7ff ff7d 	bl	a8d4 <ssp_start>

	cc2400_strobe(SFSON);
    a9da:	2061      	movs	r0, #97	; 0x61
    a9dc:	f000 fe3c 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    a9e0:	bf00      	nop
    a9e2:	f000 fe2f 	bl	b644 <cc2400_status>
    a9e6:	4603      	mov	r3, r0
    a9e8:	f003 0304 	and.w	r3, r3, #4
    a9ec:	2b00      	cmp	r3, #0
    a9ee:	d0f8      	beq.n	a9e2 <rf_on+0x7e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    a9f0:	bf00      	nop
    a9f2:	200e      	movs	r0, #14
    a9f4:	f000 fd68 	bl	b4c8 <cc2400_get>
    a9f8:	4603      	mov	r3, r0
    a9fa:	f003 031f 	and.w	r3, r3, #31
    a9fe:	2b0f      	cmp	r3, #15
    aa00:	d1f7      	bne.n	a9f2 <rf_on+0x8e>

	cc2400_strobe(SRX);
    aa02:	2062      	movs	r0, #98	; 0x62
    aa04:	f000 fe28 	bl	b658 <cc2400_strobe>
}
    aa08:	bd80      	pop	{r7, pc}
    aa0a:	bf00      	nop
    aa0c:	1000049c 	.word	0x1000049c

0000aa10 <do_rx>:

void do_rx(ego_packet_t *packet) {
    aa10:	b480      	push	{r7}
    aa12:	b085      	sub	sp, #20
    aa14:	af00      	add	r7, sp, #0
    aa16:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    aa18:	2300      	movs	r3, #0
    aa1a:	60fb      	str	r3, [r7, #12]
    aa1c:	e011      	b.n	aa42 <do_rx+0x32>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    aa1e:	bf00      	nop
    aa20:	4b0c      	ldr	r3, [pc, #48]	; (aa54 <do_rx+0x44>)
    aa22:	681b      	ldr	r3, [r3, #0]
    aa24:	f003 0304 	and.w	r3, r3, #4
    aa28:	2b00      	cmp	r3, #0
    aa2a:	d0f9      	beq.n	aa20 <do_rx+0x10>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    aa2c:	4b0a      	ldr	r3, [pc, #40]	; (aa58 <do_rx+0x48>)
    aa2e:	681b      	ldr	r3, [r3, #0]
    aa30:	b2d9      	uxtb	r1, r3
    aa32:	687a      	ldr	r2, [r7, #4]
    aa34:	68fb      	ldr	r3, [r7, #12]
    aa36:	4413      	add	r3, r2
    aa38:	460a      	mov	r2, r1
    aa3a:	701a      	strb	r2, [r3, #0]
	cc2400_strobe(SRX);
}

void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    aa3c:	68fb      	ldr	r3, [r7, #12]
    aa3e:	3301      	adds	r3, #1
    aa40:	60fb      	str	r3, [r7, #12]
    aa42:	68fb      	ldr	r3, [r7, #12]
    aa44:	2b23      	cmp	r3, #35	; 0x23
    aa46:	ddea      	ble.n	aa1e <do_rx+0xe>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    aa48:	3714      	adds	r7, #20
    aa4a:	46bd      	mov	sp, r7
    aa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa50:	4770      	bx	lr
    aa52:	bf00      	nop
    aa54:	4003000c 	.word	0x4003000c
    aa58:	40030008 	.word	0x40030008

0000aa5c <sync_received>:

static inline int sync_received(void) {
    aa5c:	b580      	push	{r7, lr}
    aa5e:	af00      	add	r7, sp, #0
	return cc2400_status() & SYNC_RECEIVED;
    aa60:	f000 fdf0 	bl	b644 <cc2400_status>
    aa64:	4603      	mov	r3, r0
    aa66:	f003 0310 	and.w	r3, r3, #16
}
    aa6a:	4618      	mov	r0, r3
    aa6c:	bd80      	pop	{r7, pc}
    aa6e:	bf00      	nop

0000aa70 <sleep_ms>:

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    aa70:	b480      	push	{r7}
    aa72:	b083      	sub	sp, #12
    aa74:	af00      	add	r7, sp, #0
    aa76:	6078      	str	r0, [r7, #4]
    aa78:	6039      	str	r1, [r7, #0]
	state->sleep_start = CLK100NS;
    aa7a:	4b0c      	ldr	r3, [pc, #48]	; (aaac <sleep_ms+0x3c>)
    aa7c:	681b      	ldr	r3, [r3, #0]
    aa7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    aa82:	f640 4235 	movw	r2, #3125	; 0xc35
    aa86:	fb02 f203 	mul.w	r2, r2, r3
    aa8a:	4b09      	ldr	r3, [pc, #36]	; (aab0 <sleep_ms+0x40>)
    aa8c:	681b      	ldr	r3, [r3, #0]
    aa8e:	441a      	add	r2, r3
    aa90:	687b      	ldr	r3, [r7, #4]
    aa92:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    aa94:	683b      	ldr	r3, [r7, #0]
    aa96:	f242 7210 	movw	r2, #10000	; 0x2710
    aa9a:	fb02 f203 	mul.w	r2, r2, r3
    aa9e:	687b      	ldr	r3, [r7, #4]
    aaa0:	60da      	str	r2, [r3, #12]
}
    aaa2:	370c      	adds	r7, #12
    aaa4:	46bd      	mov	sp, r7
    aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
    aaaa:	4770      	bx	lr
    aaac:	10000bf4 	.word	0x10000bf4
    aab0:	40004008 	.word	0x40004008

0000aab4 <sleep_ms_anchor>:

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
    aab4:	b480      	push	{r7}
    aab6:	b083      	sub	sp, #12
    aab8:	af00      	add	r7, sp, #0
    aaba:	6078      	str	r0, [r7, #4]
    aabc:	6039      	str	r1, [r7, #0]
	state->sleep_start = state->anchor;
    aabe:	687b      	ldr	r3, [r7, #4]
    aac0:	699a      	ldr	r2, [r3, #24]
    aac2:	687b      	ldr	r3, [r7, #4]
    aac4:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    aac6:	683b      	ldr	r3, [r7, #0]
    aac8:	f242 7210 	movw	r2, #10000	; 0x2710
    aacc:	fb02 f203 	mul.w	r2, r2, r3
    aad0:	687b      	ldr	r3, [r7, #4]
    aad2:	60da      	str	r2, [r3, #12]
}
    aad4:	370c      	adds	r7, #12
    aad6:	46bd      	mov	sp, r7
    aad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    aadc:	4770      	bx	lr
    aade:	bf00      	nop

0000aae0 <sleep_elapsed>:

static inline int sleep_elapsed(ego_fsm_state_t *state) {
    aae0:	b480      	push	{r7}
    aae2:	b085      	sub	sp, #20
    aae4:	af00      	add	r7, sp, #0
    aae6:	6078      	str	r0, [r7, #4]
	u32 now = CLK100NS;
    aae8:	4b13      	ldr	r3, [pc, #76]	; (ab38 <sleep_elapsed+0x58>)
    aaea:	681b      	ldr	r3, [r3, #0]
    aaec:	f3c3 0313 	ubfx	r3, r3, #0, #20
    aaf0:	f640 4235 	movw	r2, #3125	; 0xc35
    aaf4:	fb02 f203 	mul.w	r2, r2, r3
    aaf8:	4b10      	ldr	r3, [pc, #64]	; (ab3c <sleep_elapsed+0x5c>)
    aafa:	681b      	ldr	r3, [r3, #0]
    aafc:	4413      	add	r3, r2
    aafe:	60fb      	str	r3, [r7, #12]
	if (now < state->sleep_start)
    ab00:	687b      	ldr	r3, [r7, #4]
    ab02:	689a      	ldr	r2, [r3, #8]
    ab04:	68fb      	ldr	r3, [r7, #12]
    ab06:	429a      	cmp	r2, r3
    ab08:	d905      	bls.n	ab16 <sleep_elapsed+0x36>
		now += 3276800000;
    ab0a:	68fb      	ldr	r3, [r7, #12]
    ab0c:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    ab10:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    ab14:	60fb      	str	r3, [r7, #12]
	return (now - state->sleep_start) >= state->sleep_duration;
    ab16:	687b      	ldr	r3, [r7, #4]
    ab18:	689b      	ldr	r3, [r3, #8]
    ab1a:	68fa      	ldr	r2, [r7, #12]
    ab1c:	1ad2      	subs	r2, r2, r3
    ab1e:	687b      	ldr	r3, [r7, #4]
    ab20:	68db      	ldr	r3, [r3, #12]
    ab22:	429a      	cmp	r2, r3
    ab24:	bf2c      	ite	cs
    ab26:	2301      	movcs	r3, #1
    ab28:	2300      	movcc	r3, #0
    ab2a:	b2db      	uxtb	r3, r3
}
    ab2c:	4618      	mov	r0, r3
    ab2e:	3714      	adds	r7, #20
    ab30:	46bd      	mov	sp, r7
    ab32:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab36:	4770      	bx	lr
    ab38:	10000bf4 	.word	0x10000bf4
    ab3c:	40004008 	.word	0x40004008

0000ab40 <nop_state>:

/////////////
// states

// do nothing
void nop_state(ego_fsm_state_t *state) {
    ab40:	b480      	push	{r7}
    ab42:	b083      	sub	sp, #12
    ab44:	af00      	add	r7, sp, #0
    ab46:	6078      	str	r0, [r7, #4]
}
    ab48:	370c      	adds	r7, #12
    ab4a:	46bd      	mov	sp, r7
    ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab50:	4770      	bx	lr
    ab52:	bf00      	nop

0000ab54 <init_state>:

// used in follow and jam mode, override the channel supplied by user
void init_state(ego_fsm_state_t *state) {
    ab54:	b480      	push	{r7}
    ab56:	b083      	sub	sp, #12
    ab58:	af00      	add	r7, sp, #0
    ab5a:	6078      	str	r0, [r7, #4]
	state->channel_index = 0;
    ab5c:	687b      	ldr	r3, [r7, #4]
    ab5e:	2200      	movs	r2, #0
    ab60:	605a      	str	r2, [r3, #4]
	channel = channels[state->channel_index];
    ab62:	687b      	ldr	r3, [r7, #4]
    ab64:	685b      	ldr	r3, [r3, #4]
    ab66:	4a06      	ldr	r2, [pc, #24]	; (ab80 <init_state+0x2c>)
    ab68:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    ab6c:	4b05      	ldr	r3, [pc, #20]	; (ab84 <init_state+0x30>)
    ab6e:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    ab70:	687b      	ldr	r3, [r7, #4]
    ab72:	2201      	movs	r2, #1
    ab74:	701a      	strb	r2, [r3, #0]
}
    ab76:	370c      	adds	r7, #12
    ab78:	46bd      	mov	sp, r7
    ab7a:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab7e:	4770      	bx	lr
    ab80:	100008b0 	.word	0x100008b0
    ab84:	1000049c 	.word	0x1000049c

0000ab88 <start_rf_state>:

void start_rf_state(ego_fsm_state_t *state) {
    ab88:	b580      	push	{r7, lr}
    ab8a:	b082      	sub	sp, #8
    ab8c:	af00      	add	r7, sp, #0
    ab8e:	6078      	str	r0, [r7, #4]
	rf_on();
    ab90:	f7ff fee8 	bl	a964 <rf_on>
	state->state = EGO_ST_CAP;
    ab94:	687b      	ldr	r3, [r7, #4]
    ab96:	2202      	movs	r2, #2
    ab98:	701a      	strb	r2, [r3, #0]
}
    ab9a:	3708      	adds	r7, #8
    ab9c:	46bd      	mov	sp, r7
    ab9e:	bd80      	pop	{r7, pc}

0000aba0 <cap_state>:

void cap_state(ego_fsm_state_t *state) {
    aba0:	b580      	push	{r7, lr}
    aba2:	b08c      	sub	sp, #48	; 0x30
    aba4:	af00      	add	r7, sp, #0
    aba6:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    aba8:	f107 0308 	add.w	r3, r7, #8
    abac:	2200      	movs	r2, #0
    abae:	601a      	str	r2, [r3, #0]
    abb0:	3304      	adds	r3, #4
    abb2:	2200      	movs	r2, #0
    abb4:	601a      	str	r2, [r3, #0]
    abb6:	3304      	adds	r3, #4
    abb8:	2200      	movs	r2, #0
    abba:	601a      	str	r2, [r3, #0]
    abbc:	3304      	adds	r3, #4
    abbe:	2200      	movs	r2, #0
    abc0:	601a      	str	r2, [r3, #0]
    abc2:	3304      	adds	r3, #4
    abc4:	2200      	movs	r2, #0
    abc6:	601a      	str	r2, [r3, #0]
    abc8:	3304      	adds	r3, #4
    abca:	2200      	movs	r2, #0
    abcc:	601a      	str	r2, [r3, #0]
    abce:	3304      	adds	r3, #4
    abd0:	2200      	movs	r2, #0
    abd2:	601a      	str	r2, [r3, #0]
    abd4:	3304      	adds	r3, #4
    abd6:	2200      	movs	r2, #0
    abd8:	601a      	str	r2, [r3, #0]
    abda:	3304      	adds	r3, #4
    abdc:	2200      	movs	r2, #0
    abde:	601a      	str	r2, [r3, #0]
    abe0:	3304      	adds	r3, #4
    abe2:	2200      	movs	r2, #0
    abe4:	601a      	str	r2, [r3, #0]
    abe6:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    abe8:	4b23      	ldr	r3, [pc, #140]	; (ac78 <cap_state+0xd8>)
    abea:	681b      	ldr	r3, [r3, #0]
    abec:	f3c3 0313 	ubfx	r3, r3, #0, #20
    abf0:	f640 4235 	movw	r2, #3125	; 0xc35
    abf4:	fb02 f203 	mul.w	r2, r2, r3
    abf8:	4b20      	ldr	r3, [pc, #128]	; (ac7c <cap_state+0xdc>)
    abfa:	681b      	ldr	r3, [r3, #0]
    abfc:	4413      	add	r3, r2
	rf_on();
	state->state = EGO_ST_CAP;
}

void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    abfe:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    ac00:	6878      	ldr	r0, [r7, #4]
    ac02:	f7ff ff6d 	bl	aae0 <sleep_elapsed>
    ac06:	4603      	mov	r3, r0
    ac08:	2b00      	cmp	r3, #0
    ac0a:	d006      	beq.n	ac1a <cap_state+0x7a>
		sleep_ms(state, 4);
    ac0c:	6878      	ldr	r0, [r7, #4]
    ac0e:	2104      	movs	r1, #4
    ac10:	f7ff ff2e 	bl	aa70 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    ac14:	687b      	ldr	r3, [r7, #4]
    ac16:	2203      	movs	r2, #3
    ac18:	701a      	strb	r2, [r3, #0]
	}

	if (sync_received()) {
    ac1a:	f7ff ff1f 	bl	aa5c <sync_received>
    ac1e:	4603      	mov	r3, r0
    ac20:	2b00      	cmp	r3, #0
    ac22:	d019      	beq.n	ac58 <cap_state+0xb8>
		RXLED_SET;
    ac24:	4b16      	ldr	r3, [pc, #88]	; (ac80 <cap_state+0xe0>)
    ac26:	2210      	movs	r2, #16
    ac28:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    ac2a:	f107 0308 	add.w	r3, r7, #8
    ac2e:	4618      	mov	r0, r3
    ac30:	f7ff feee 	bl	aa10 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    ac34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ac36:	f107 0208 	add.w	r2, r7, #8
    ac3a:	2006      	movs	r0, #6
    ac3c:	4611      	mov	r1, r2
    ac3e:	461a      	mov	r2, r3
    ac40:	f7f9 fec8 	bl	49d4 <enqueue_with_ts>
		RXLED_CLR;
    ac44:	4b0f      	ldr	r3, [pc, #60]	; (ac84 <cap_state+0xe4>)
    ac46:	2210      	movs	r2, #16
    ac48:	601a      	str	r2, [r3, #0]

		sleep_ms(state, 6);
    ac4a:	6878      	ldr	r0, [r7, #4]
    ac4c:	2106      	movs	r1, #6
    ac4e:	f7ff ff0f 	bl	aa70 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    ac52:	687b      	ldr	r3, [r7, #4]
    ac54:	2203      	movs	r2, #3
    ac56:	701a      	strb	r2, [r3, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    ac58:	687b      	ldr	r3, [r7, #4]
    ac5a:	781b      	ldrb	r3, [r3, #0]
    ac5c:	2b02      	cmp	r3, #2
    ac5e:	d007      	beq.n	ac70 <cap_state+0xd0>
		cc2400_strobe(SRFOFF);
    ac60:	2064      	movs	r0, #100	; 0x64
    ac62:	f000 fcf9 	bl	b658 <cc2400_strobe>
		ssp_stop();
    ac66:	f7ff fe4f 	bl	a908 <ssp_stop>
		state->timer_active = 1;
    ac6a:	687b      	ldr	r3, [r7, #4]
    ac6c:	2201      	movs	r2, #1
    ac6e:	611a      	str	r2, [r3, #16]
	}
}
    ac70:	3730      	adds	r7, #48	; 0x30
    ac72:	46bd      	mov	sp, r7
    ac74:	bd80      	pop	{r7, pc}
    ac76:	bf00      	nop
    ac78:	10000bf4 	.word	0x10000bf4
    ac7c:	40004008 	.word	0x40004008
    ac80:	2009c038 	.word	0x2009c038
    ac84:	2009c03c 	.word	0x2009c03c

0000ac88 <sleep_state>:

void sleep_state(ego_fsm_state_t *state) {
    ac88:	b580      	push	{r7, lr}
    ac8a:	b082      	sub	sp, #8
    ac8c:	af00      	add	r7, sp, #0
    ac8e:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    ac90:	6878      	ldr	r0, [r7, #4]
    ac92:	f7ff ff25 	bl	aae0 <sleep_elapsed>
    ac96:	4603      	mov	r3, r0
    ac98:	2b00      	cmp	r3, #0
    ac9a:	d01e      	beq.n	acda <sleep_state+0x52>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    ac9c:	687b      	ldr	r3, [r7, #4]
    ac9e:	685b      	ldr	r3, [r3, #4]
    aca0:	1c5a      	adds	r2, r3, #1
    aca2:	4b0f      	ldr	r3, [pc, #60]	; (ace0 <sleep_state+0x58>)
    aca4:	4013      	ands	r3, r2
    aca6:	2b00      	cmp	r3, #0
    aca8:	da03      	bge.n	acb2 <sleep_state+0x2a>
    acaa:	3b01      	subs	r3, #1
    acac:	f063 0303 	orn	r3, r3, #3
    acb0:	3301      	adds	r3, #1
    acb2:	461a      	mov	r2, r3
    acb4:	687b      	ldr	r3, [r7, #4]
    acb6:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    acb8:	687b      	ldr	r3, [r7, #4]
    acba:	685b      	ldr	r3, [r3, #4]
    acbc:	4a09      	ldr	r2, [pc, #36]	; (ace4 <sleep_state+0x5c>)
    acbe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    acc2:	4b09      	ldr	r3, [pc, #36]	; (ace8 <sleep_state+0x60>)
    acc4:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    acc6:	6878      	ldr	r0, [r7, #4]
    acc8:	2107      	movs	r1, #7
    acca:	f7ff fed1 	bl	aa70 <sleep_ms>
		state->timer_active = 1;
    acce:	687b      	ldr	r3, [r7, #4]
    acd0:	2201      	movs	r2, #1
    acd2:	611a      	str	r2, [r3, #16]

		state->state = EGO_ST_START_RX;
    acd4:	687b      	ldr	r3, [r7, #4]
    acd6:	2201      	movs	r2, #1
    acd8:	701a      	strb	r2, [r3, #0]
	}
}
    acda:	3708      	adds	r7, #8
    acdc:	46bd      	mov	sp, r7
    acde:	bd80      	pop	{r7, pc}
    ace0:	80000003 	.word	0x80000003
    ace4:	100008b0 	.word	0x100008b0
    ace8:	1000049c 	.word	0x1000049c

0000acec <continuous_init_state>:

// continuous cap states (reuses START_RX state)
void continuous_init_state(ego_fsm_state_t *state) {
    acec:	b480      	push	{r7}
    acee:	b083      	sub	sp, #12
    acf0:	af00      	add	r7, sp, #0
    acf2:	6078      	str	r0, [r7, #4]
	state->state = EGO_ST_START_RX;
    acf4:	687b      	ldr	r3, [r7, #4]
    acf6:	2201      	movs	r2, #1
    acf8:	701a      	strb	r2, [r3, #0]
}
    acfa:	370c      	adds	r7, #12
    acfc:	46bd      	mov	sp, r7
    acfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    ad02:	4770      	bx	lr

0000ad04 <continuous_cap_state>:

void continuous_cap_state(ego_fsm_state_t *state) {
    ad04:	b580      	push	{r7, lr}
    ad06:	b08c      	sub	sp, #48	; 0x30
    ad08:	af00      	add	r7, sp, #0
    ad0a:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    ad0c:	f107 0308 	add.w	r3, r7, #8
    ad10:	2200      	movs	r2, #0
    ad12:	601a      	str	r2, [r3, #0]
    ad14:	3304      	adds	r3, #4
    ad16:	2200      	movs	r2, #0
    ad18:	601a      	str	r2, [r3, #0]
    ad1a:	3304      	adds	r3, #4
    ad1c:	2200      	movs	r2, #0
    ad1e:	601a      	str	r2, [r3, #0]
    ad20:	3304      	adds	r3, #4
    ad22:	2200      	movs	r2, #0
    ad24:	601a      	str	r2, [r3, #0]
    ad26:	3304      	adds	r3, #4
    ad28:	2200      	movs	r2, #0
    ad2a:	601a      	str	r2, [r3, #0]
    ad2c:	3304      	adds	r3, #4
    ad2e:	2200      	movs	r2, #0
    ad30:	601a      	str	r2, [r3, #0]
    ad32:	3304      	adds	r3, #4
    ad34:	2200      	movs	r2, #0
    ad36:	601a      	str	r2, [r3, #0]
    ad38:	3304      	adds	r3, #4
    ad3a:	2200      	movs	r2, #0
    ad3c:	601a      	str	r2, [r3, #0]
    ad3e:	3304      	adds	r3, #4
    ad40:	2200      	movs	r2, #0
    ad42:	601a      	str	r2, [r3, #0]
    ad44:	3304      	adds	r3, #4
    ad46:	2200      	movs	r2, #0
    ad48:	601a      	str	r2, [r3, #0]
    ad4a:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    ad4c:	4b1e      	ldr	r3, [pc, #120]	; (adc8 <continuous_cap_state+0xc4>)
    ad4e:	681b      	ldr	r3, [r3, #0]
    ad50:	f3c3 0313 	ubfx	r3, r3, #0, #20
    ad54:	f640 4235 	movw	r2, #3125	; 0xc35
    ad58:	fb02 f203 	mul.w	r2, r2, r3
    ad5c:	4b1b      	ldr	r3, [pc, #108]	; (adcc <continuous_cap_state+0xc8>)
    ad5e:	681b      	ldr	r3, [r3, #0]
    ad60:	4413      	add	r3, r2
void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    ad62:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    ad64:	f7ff fe7a 	bl	aa5c <sync_received>
    ad68:	4603      	mov	r3, r0
    ad6a:	2b00      	cmp	r3, #0
    ad6c:	d029      	beq.n	adc2 <continuous_cap_state+0xbe>
		RXLED_SET;
    ad6e:	4b18      	ldr	r3, [pc, #96]	; (add0 <continuous_cap_state+0xcc>)
    ad70:	2210      	movs	r2, #16
    ad72:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    ad74:	f107 0308 	add.w	r3, r7, #8
    ad78:	4618      	mov	r0, r3
    ad7a:	f7ff fe49 	bl	aa10 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    ad7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    ad80:	f107 0208 	add.w	r2, r7, #8
    ad84:	2006      	movs	r0, #6
    ad86:	4611      	mov	r1, r2
    ad88:	461a      	mov	r2, r3
    ad8a:	f7f9 fe23 	bl	49d4 <enqueue_with_ts>
		RXLED_CLR;
    ad8e:	4b11      	ldr	r3, [pc, #68]	; (add4 <continuous_cap_state+0xd0>)
    ad90:	2210      	movs	r2, #16
    ad92:	601a      	str	r2, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    ad94:	2061      	movs	r0, #97	; 0x61
    ad96:	f000 fc5f 	bl	b658 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    ad9a:	bf00      	nop
    ad9c:	f000 fc52 	bl	b644 <cc2400_status>
    ada0:	4603      	mov	r3, r0
    ada2:	f003 0304 	and.w	r3, r3, #4
    ada6:	2b00      	cmp	r3, #0
    ada8:	d0f8      	beq.n	ad9c <continuous_cap_state+0x98>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    adaa:	bf00      	nop
    adac:	200e      	movs	r0, #14
    adae:	f000 fb8b 	bl	b4c8 <cc2400_get>
    adb2:	4603      	mov	r3, r0
    adb4:	f003 031f 	and.w	r3, r3, #31
    adb8:	2b0f      	cmp	r3, #15
    adba:	d1f7      	bne.n	adac <continuous_cap_state+0xa8>
		cc2400_strobe(SRX);
    adbc:	2062      	movs	r0, #98	; 0x62
    adbe:	f000 fc4b 	bl	b658 <cc2400_strobe>
	}
}
    adc2:	3730      	adds	r7, #48	; 0x30
    adc4:	46bd      	mov	sp, r7
    adc6:	bd80      	pop	{r7, pc}
    adc8:	10000bf4 	.word	0x10000bf4
    adcc:	40004008 	.word	0x40004008
    add0:	2009c038 	.word	0x2009c038
    add4:	2009c03c 	.word	0x2009c03c

0000add8 <jam_cap_state>:

// jammer states
void jam_cap_state(ego_fsm_state_t *state) {
    add8:	b580      	push	{r7, lr}
    adda:	b082      	sub	sp, #8
    addc:	af00      	add	r7, sp, #0
    adde:	6078      	str	r0, [r7, #4]
	if (sync_received()) {
    ade0:	f7ff fe3c 	bl	aa5c <sync_received>
    ade4:	4603      	mov	r3, r0
    ade6:	2b00      	cmp	r3, #0
    ade8:	d012      	beq.n	ae10 <jam_cap_state+0x38>
		state->state = EGO_ST_START_JAMMING;
    adea:	687b      	ldr	r3, [r7, #4]
    adec:	2204      	movs	r2, #4
    adee:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 1;
    adf0:	687b      	ldr	r3, [r7, #4]
    adf2:	2201      	movs	r2, #1
    adf4:	615a      	str	r2, [r3, #20]
		state->anchor = CLK100NS;
    adf6:	4b16      	ldr	r3, [pc, #88]	; (ae50 <jam_cap_state+0x78>)
    adf8:	681b      	ldr	r3, [r3, #0]
    adfa:	f3c3 0313 	ubfx	r3, r3, #0, #20
    adfe:	f640 4235 	movw	r2, #3125	; 0xc35
    ae02:	fb02 f203 	mul.w	r2, r2, r3
    ae06:	4b13      	ldr	r3, [pc, #76]	; (ae54 <jam_cap_state+0x7c>)
    ae08:	681b      	ldr	r3, [r3, #0]
    ae0a:	441a      	add	r2, r3
    ae0c:	687b      	ldr	r3, [r7, #4]
    ae0e:	619a      	str	r2, [r3, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    ae10:	687b      	ldr	r3, [r7, #4]
    ae12:	691b      	ldr	r3, [r3, #16]
    ae14:	2b00      	cmp	r3, #0
    ae16:	d00f      	beq.n	ae38 <jam_cap_state+0x60>
    ae18:	6878      	ldr	r0, [r7, #4]
    ae1a:	f7ff fe61 	bl	aae0 <sleep_elapsed>
    ae1e:	4603      	mov	r3, r0
    ae20:	2b00      	cmp	r3, #0
    ae22:	d009      	beq.n	ae38 <jam_cap_state+0x60>
		state->state = EGO_ST_START_JAMMING;
    ae24:	687b      	ldr	r3, [r7, #4]
    ae26:	2204      	movs	r2, #4
    ae28:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 0;
    ae2a:	687b      	ldr	r3, [r7, #4]
    ae2c:	2200      	movs	r2, #0
    ae2e:	615a      	str	r2, [r3, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    ae30:	6878      	ldr	r0, [r7, #4]
    ae32:	210b      	movs	r1, #11
    ae34:	f7ff fe1c 	bl	aa70 <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    ae38:	687b      	ldr	r3, [r7, #4]
    ae3a:	781b      	ldrb	r3, [r3, #0]
    ae3c:	2b02      	cmp	r3, #2
    ae3e:	d004      	beq.n	ae4a <jam_cap_state+0x72>
		cc2400_strobe(SRFOFF);
    ae40:	2064      	movs	r0, #100	; 0x64
    ae42:	f000 fc09 	bl	b658 <cc2400_strobe>
		ssp_stop();
    ae46:	f7ff fd5f 	bl	a908 <ssp_stop>
	}
}
    ae4a:	3708      	adds	r7, #8
    ae4c:	46bd      	mov	sp, r7
    ae4e:	bd80      	pop	{r7, pc}
    ae50:	10000bf4 	.word	0x10000bf4
    ae54:	40004008 	.word	0x40004008

0000ae58 <start_jamming_state>:

void start_jamming_state(ego_fsm_state_t *state) {
    ae58:	b580      	push	{r7, lr}
    ae5a:	b082      	sub	sp, #8
    ae5c:	af00      	add	r7, sp, #0
    ae5e:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    ae60:	200d      	movs	r0, #13
    ae62:	f647 71ff 	movw	r1, #32767	; 0x7fff
    ae66:	f000 fb45 	bl	b4f4 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    ae6a:	2012      	movs	r0, #18
    ae6c:	f642 3122 	movw	r1, #11042	; 0x2b22
    ae70:	f000 fb40 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    ae74:	2014      	movs	r0, #20
    ae76:	f243 314b 	movw	r1, #13131	; 0x334b
    ae7a:	f000 fb3b 	bl	b4f4 <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    ae7e:	2020      	movs	r0, #32
    ae80:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    ae84:	f000 fb36 	bl	b4f4 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    ae88:	4b21      	ldr	r3, [pc, #132]	; (af10 <start_jamming_state+0xb8>)
    ae8a:	881b      	ldrh	r3, [r3, #0]
    ae8c:	b29b      	uxth	r3, r3
    ae8e:	2002      	movs	r0, #2
    ae90:	4619      	mov	r1, r3
    ae92:	f000 fb2f 	bl	b4f4 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    ae96:	2003      	movs	r0, #3
    ae98:	2126      	movs	r1, #38	; 0x26
    ae9a:	f000 fb2b 	bl	b4f4 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    ae9e:	2021      	movs	r0, #33	; 0x21
    aea0:	2103      	movs	r1, #3
    aea2:	f000 fb27 	bl	b4f4 <cc2400_set>
	cc2400_set(FREND, 0xf);
    aea6:	2005      	movs	r0, #5
    aea8:	210f      	movs	r1, #15
    aeaa:	f000 fb23 	bl	b4f4 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    aeae:	bf00      	nop
    aeb0:	f000 fbc8 	bl	b644 <cc2400_status>
    aeb4:	4603      	mov	r3, r0
    aeb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    aeba:	2b00      	cmp	r3, #0
    aebc:	d0f8      	beq.n	aeb0 <start_jamming_state+0x58>

	cc2400_strobe(SFSON);
    aebe:	2061      	movs	r0, #97	; 0x61
    aec0:	f000 fbca 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    aec4:	bf00      	nop
    aec6:	f000 fbbd 	bl	b644 <cc2400_status>
    aeca:	4603      	mov	r3, r0
    aecc:	f003 0304 	and.w	r3, r3, #4
    aed0:	2b00      	cmp	r3, #0
    aed2:	d0f8      	beq.n	aec6 <start_jamming_state+0x6e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    aed4:	bf00      	nop
    aed6:	200e      	movs	r0, #14
    aed8:	f000 faf6 	bl	b4c8 <cc2400_get>
    aedc:	4603      	mov	r3, r0
    aede:	f003 031f 	and.w	r3, r3, #31
    aee2:	2b0f      	cmp	r3, #15
    aee4:	d1f7      	bne.n	aed6 <start_jamming_state+0x7e>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    aee6:	4b0b      	ldr	r3, [pc, #44]	; (af14 <start_jamming_state+0xbc>)
    aee8:	2280      	movs	r2, #128	; 0x80
    aeea:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    aeec:	2063      	movs	r0, #99	; 0x63
    aeee:	f000 fbb3 	bl	b658 <cc2400_strobe>
	TXLED_SET;
    aef2:	4b09      	ldr	r3, [pc, #36]	; (af18 <start_jamming_state+0xc0>)
    aef4:	f44f 7280 	mov.w	r2, #256	; 0x100
    aef8:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    aefa:	687b      	ldr	r3, [r7, #4]
    aefc:	2205      	movs	r2, #5
    aefe:	701a      	strb	r2, [r3, #0]
	sleep_ms_anchor(state, 2);
    af00:	6878      	ldr	r0, [r7, #4]
    af02:	2102      	movs	r1, #2
    af04:	f7ff fdd6 	bl	aab4 <sleep_ms_anchor>
}
    af08:	3708      	adds	r7, #8
    af0a:	46bd      	mov	sp, r7
    af0c:	bd80      	pop	{r7, pc}
    af0e:	bf00      	nop
    af10:	1000049c 	.word	0x1000049c
    af14:	2009c058 	.word	0x2009c058
    af18:	2009c038 	.word	0x2009c038

0000af1c <jamming_state>:

void jamming_state(ego_fsm_state_t *state) {
    af1c:	b580      	push	{r7, lr}
    af1e:	b082      	sub	sp, #8
    af20:	af00      	add	r7, sp, #0
    af22:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    af24:	6878      	ldr	r0, [r7, #4]
    af26:	f7ff fddb 	bl	aae0 <sleep_elapsed>
    af2a:	4603      	mov	r3, r0
    af2c:	2b00      	cmp	r3, #0
    af2e:	d025      	beq.n	af7c <jamming_state+0x60>
		cc2400_strobe(SRFOFF);
    af30:	2064      	movs	r0, #100	; 0x64
    af32:	f000 fb91 	bl	b658 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    af36:	4b13      	ldr	r3, [pc, #76]	; (af84 <jamming_state+0x68>)
    af38:	2280      	movs	r2, #128	; 0x80
    af3a:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    af3c:	4b12      	ldr	r3, [pc, #72]	; (af88 <jamming_state+0x6c>)
    af3e:	f44f 7280 	mov.w	r2, #256	; 0x100
    af42:	601a      	str	r2, [r3, #0]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    af44:	687b      	ldr	r3, [r7, #4]
    af46:	685b      	ldr	r3, [r3, #4]
    af48:	1c5a      	adds	r2, r3, #1
    af4a:	4b10      	ldr	r3, [pc, #64]	; (af8c <jamming_state+0x70>)
    af4c:	4013      	ands	r3, r2
    af4e:	2b00      	cmp	r3, #0
    af50:	da03      	bge.n	af5a <jamming_state+0x3e>
    af52:	3b01      	subs	r3, #1
    af54:	f063 0303 	orn	r3, r3, #3
    af58:	3301      	adds	r3, #1
    af5a:	461a      	mov	r2, r3
    af5c:	687b      	ldr	r3, [r7, #4]
    af5e:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    af60:	687b      	ldr	r3, [r7, #4]
    af62:	685b      	ldr	r3, [r3, #4]
    af64:	4a0a      	ldr	r2, [pc, #40]	; (af90 <jamming_state+0x74>)
    af66:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    af6a:	4b0a      	ldr	r3, [pc, #40]	; (af94 <jamming_state+0x78>)
    af6c:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    af6e:	687b      	ldr	r3, [r7, #4]
    af70:	2203      	movs	r2, #3
    af72:	701a      	strb	r2, [r3, #0]
		sleep_ms_anchor(state, 6);
    af74:	6878      	ldr	r0, [r7, #4]
    af76:	2106      	movs	r1, #6
    af78:	f7ff fd9c 	bl	aab4 <sleep_ms_anchor>
	}
}
    af7c:	3708      	adds	r7, #8
    af7e:	46bd      	mov	sp, r7
    af80:	bd80      	pop	{r7, pc}
    af82:	bf00      	nop
    af84:	2009c05c 	.word	0x2009c05c
    af88:	2009c03c 	.word	0x2009c03c
    af8c:	80000003 	.word	0x80000003
    af90:	100008b0 	.word	0x100008b0
    af94:	1000049c 	.word	0x1000049c

0000af98 <jam_sleep_state>:

void jam_sleep_state(ego_fsm_state_t *state) {
    af98:	b580      	push	{r7, lr}
    af9a:	b082      	sub	sp, #8
    af9c:	af00      	add	r7, sp, #0
    af9e:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    afa0:	6878      	ldr	r0, [r7, #4]
    afa2:	f7ff fd9d 	bl	aae0 <sleep_elapsed>
    afa6:	4603      	mov	r3, r0
    afa8:	2b00      	cmp	r3, #0
    afaa:	d009      	beq.n	afc0 <jam_sleep_state+0x28>
		state->state = EGO_ST_START_RX;
    afac:	687b      	ldr	r3, [r7, #4]
    afae:	2201      	movs	r2, #1
    afb0:	701a      	strb	r2, [r3, #0]
		state->timer_active = 1;
    afb2:	687b      	ldr	r3, [r7, #4]
    afb4:	2201      	movs	r2, #1
    afb6:	611a      	str	r2, [r3, #16]
		sleep_ms_anchor(state, 11);
    afb8:	6878      	ldr	r0, [r7, #4]
    afba:	210b      	movs	r1, #11
    afbc:	f7ff fd7a 	bl	aab4 <sleep_ms_anchor>
	}
}
    afc0:	3708      	adds	r7, #8
    afc2:	46bd      	mov	sp, r7
    afc4:	bd80      	pop	{r7, pc}
    afc6:	bf00      	nop

0000afc8 <ego_main>:

void ego_main(ego_mode_t mode) {
    afc8:	b5b0      	push	{r4, r5, r7, lr}
    afca:	b09e      	sub	sp, #120	; 0x78
    afcc:	af00      	add	r7, sp, #0
    afce:	4603      	mov	r3, r0
    afd0:	71fb      	strb	r3, [r7, #7]
	ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    afd2:	f107 0358 	add.w	r3, r7, #88	; 0x58
    afd6:	2200      	movs	r2, #0
    afd8:	601a      	str	r2, [r3, #0]
    afda:	3304      	adds	r3, #4
    afdc:	2200      	movs	r2, #0
    afde:	601a      	str	r2, [r3, #0]
    afe0:	3304      	adds	r3, #4
    afe2:	2200      	movs	r2, #0
    afe4:	601a      	str	r2, [r3, #0]
    afe6:	3304      	adds	r3, #4
    afe8:	2200      	movs	r2, #0
    afea:	601a      	str	r2, [r3, #0]
    afec:	3304      	adds	r3, #4
    afee:	2200      	movs	r2, #0
    aff0:	601a      	str	r2, [r3, #0]
    aff2:	3304      	adds	r3, #4
    aff4:	2200      	movs	r2, #0
    aff6:	601a      	str	r2, [r3, #0]
    aff8:	3304      	adds	r3, #4
    affa:	2200      	movs	r2, #0
    affc:	601a      	str	r2, [r3, #0]
    affe:	3304      	adds	r3, #4
		.channel_index = 0,
		.timer_active = 0,
	};

	// hopping connection following
	ego_st_handler follow_handler[] = {
    b000:	4b26      	ldr	r3, [pc, #152]	; (b09c <ego_main+0xd4>)
    b002:	f107 043c 	add.w	r4, r7, #60	; 0x3c
    b006:	461d      	mov	r5, r3
    b008:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b00a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b00c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    b010:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		nop_state,
		nop_state,
	};

	// continuous rx on a single channel
	ego_st_handler continuous_rx_handler[] = {
    b014:	4b22      	ldr	r3, [pc, #136]	; (b0a0 <ego_main+0xd8>)
    b016:	f107 0424 	add.w	r4, r7, #36	; 0x24
    b01a:	461d      	mov	r5, r3
    b01c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b01e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b020:	e895 0003 	ldmia.w	r5, {r0, r1}
    b024:	e884 0003 	stmia.w	r4, {r0, r1}
		nop_state,
		nop_state,
	};

	// jamming
	ego_st_handler jam_handler[] = {
    b028:	4b1e      	ldr	r3, [pc, #120]	; (b0a4 <ego_main+0xdc>)
    b02a:	f107 040c 	add.w	r4, r7, #12
    b02e:	461d      	mov	r5, r3
    b030:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    b032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    b034:	e895 0003 	ldmia.w	r5, {r0, r1}
    b038:	e884 0003 	stmia.w	r4, {r0, r1}
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    b03c:	79fb      	ldrb	r3, [r7, #7]
    b03e:	2b01      	cmp	r3, #1
    b040:	d007      	beq.n	b052 <ego_main+0x8a>
    b042:	2b02      	cmp	r3, #2
    b044:	d009      	beq.n	b05a <ego_main+0x92>
    b046:	2b00      	cmp	r3, #0
    b048:	d10b      	bne.n	b062 <ego_main+0x9a>
		case EGO_FOLLOW:
			handler = follow_handler;
    b04a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    b04e:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    b050:	e00b      	b.n	b06a <ego_main+0xa2>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    b052:	f107 0324 	add.w	r3, r7, #36	; 0x24
    b056:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    b058:	e007      	b.n	b06a <ego_main+0xa2>
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    b05a:	f107 030c 	add.w	r3, r7, #12
    b05e:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    b060:	e003      	b.n	b06a <ego_main+0xa2>
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    b062:	4b11      	ldr	r3, [pc, #68]	; (b0a8 <ego_main+0xe0>)
    b064:	2200      	movs	r2, #0
    b066:	701a      	strb	r2, [r3, #0]
    b068:	e015      	b.n	b096 <ego_main+0xce>
			return;
	}

	ego_init();
    b06a:	f7ff fc61 	bl	a930 <ego_init>

	while (1) {
		if (requested_mode != MODE_EGO)
    b06e:	4b0e      	ldr	r3, [pc, #56]	; (b0a8 <ego_main+0xe0>)
    b070:	781b      	ldrb	r3, [r3, #0]
    b072:	b2db      	uxtb	r3, r3
    b074:	2b0d      	cmp	r3, #13
    b076:	d003      	beq.n	b080 <ego_main+0xb8>
			break;
    b078:	bf00      	nop
		handler[state.state](&state);
	}

	ego_deinit();
    b07a:	f7ff fc65 	bl	a948 <ego_deinit>
    b07e:	e00a      	b.n	b096 <ego_main+0xce>
	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
			break;
		handler[state.state](&state);
    b080:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    b084:	009b      	lsls	r3, r3, #2
    b086:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    b088:	4413      	add	r3, r2
    b08a:	681b      	ldr	r3, [r3, #0]
    b08c:	f107 0258 	add.w	r2, r7, #88	; 0x58
    b090:	4610      	mov	r0, r2
    b092:	4798      	blx	r3
	}
    b094:	e7eb      	b.n	b06e <ego_main+0xa6>

	ego_deinit();
}
    b096:	3778      	adds	r7, #120	; 0x78
    b098:	46bd      	mov	sp, r7
    b09a:	bdb0      	pop	{r4, r5, r7, pc}
    b09c:	0000dc0c 	.word	0x0000dc0c
    b0a0:	0000dc28 	.word	0x0000dc28
    b0a4:	0000dc40 	.word	0x0000dc40
    b0a8:	10000a3f 	.word	0x10000a3f

0000b0ac <USB_IRQHandler>:
	
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
    b0ac:	b580      	push	{r7, lr}
    b0ae:	af00      	add	r7, sp, #0
	USBHwISR();
    b0b0:	f000 ffa6 	bl	c000 <USBHwISR>
}
    b0b4:	bd80      	pop	{r7, pc}
    b0b6:	bf00      	nop

0000b0b8 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    b0b8:	b580      	push	{r7, lr}
    b0ba:	b082      	sub	sp, #8
    b0bc:	af00      	add	r7, sp, #0
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
    b0be:	4b12      	ldr	r3, [pc, #72]	; (b108 <Reset_Handler+0x50>)
    b0c0:	607b      	str	r3, [r7, #4]
	for(dest = &_data; dest < &_edata; )
    b0c2:	4b12      	ldr	r3, [pc, #72]	; (b10c <Reset_Handler+0x54>)
    b0c4:	603b      	str	r3, [r7, #0]
    b0c6:	e007      	b.n	b0d8 <Reset_Handler+0x20>
	{
		*dest++ = *src++;
    b0c8:	683b      	ldr	r3, [r7, #0]
    b0ca:	1d1a      	adds	r2, r3, #4
    b0cc:	603a      	str	r2, [r7, #0]
    b0ce:	687a      	ldr	r2, [r7, #4]
    b0d0:	1d11      	adds	r1, r2, #4
    b0d2:	6079      	str	r1, [r7, #4]
    b0d4:	6812      	ldr	r2, [r2, #0]
    b0d6:	601a      	str	r2, [r3, #0]
{
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    b0d8:	683b      	ldr	r3, [r7, #0]
    b0da:	4a0d      	ldr	r2, [pc, #52]	; (b110 <Reset_Handler+0x58>)
    b0dc:	4293      	cmp	r3, r2
    b0de:	d3f3      	bcc.n	b0c8 <Reset_Handler+0x10>
	{
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
    b0e0:	4b0c      	ldr	r3, [pc, #48]	; (b114 <Reset_Handler+0x5c>)
    b0e2:	607b      	str	r3, [r7, #4]
	while (src < &_ebss)
    b0e4:	e004      	b.n	b0f0 <Reset_Handler+0x38>
	{
		*src++ = 0;
    b0e6:	687b      	ldr	r3, [r7, #4]
    b0e8:	1d1a      	adds	r2, r3, #4
    b0ea:	607a      	str	r2, [r7, #4]
    b0ec:	2200      	movs	r2, #0
    b0ee:	601a      	str	r2, [r3, #0]
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    b0f0:	687b      	ldr	r3, [r7, #4]
    b0f2:	4a09      	ldr	r2, [pc, #36]	; (b118 <Reset_Handler+0x60>)
    b0f4:	4293      	cmp	r3, r2
    b0f6:	d3f6      	bcc.n	b0e6 <Reset_Handler+0x2e>
	{
		*src++ = 0;
	}

    __libc_init_array();
    b0f8:	f7f9 f816 	bl	4128 <__libc_init_array>
    
    // Set the vector table location.
    SCB_VTOR = &_interrupt_vector_table;
    b0fc:	4b07      	ldr	r3, [pc, #28]	; (b11c <Reset_Handler+0x64>)
    b0fe:	4a08      	ldr	r2, [pc, #32]	; (b120 <Reset_Handler+0x68>)
    b100:	601a      	str	r2, [r3, #0]
    
	main();
    b102:	f7fe fbc7 	bl	9894 <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    b106:	e7fe      	b.n	b106 <Reset_Handler+0x4e>
    b108:	0000dca8 	.word	0x0000dca8
    b10c:	10000020 	.word	0x10000020
    b110:	1000095e 	.word	0x1000095e
    b114:	10000960 	.word	0x10000960
    b118:	10003298 	.word	0x10003298
    b11c:	e000ed08 	.word	0xe000ed08
    b120:	00004000 	.word	0x00004000

0000b124 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    b124:	b480      	push	{r7}
    b126:	af00      	add	r7, sp, #0
    b128:	e7fe      	b.n	b128 <ADC_IRQHandler+0x4>
    b12a:	bf00      	nop

0000b12c <wait>:
 */

#include "ubertooth.h"
/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
    b12c:	b580      	push	{r7, lr}
    b12e:	b082      	sub	sp, #8
    b130:	af00      	add	r7, sp, #0
    b132:	4603      	mov	r3, r0
    b134:	71fb      	strb	r3, [r7, #7]
	wait_us(seconds * 1000000);
    b136:	79fb      	ldrb	r3, [r7, #7]
    b138:	4a04      	ldr	r2, [pc, #16]	; (b14c <wait+0x20>)
    b13a:	fb02 f303 	mul.w	r3, r2, r3
    b13e:	4618      	mov	r0, r3
    b140:	f000 f818 	bl	b174 <wait_us>
}
    b144:	3708      	adds	r7, #8
    b146:	46bd      	mov	sp, r7
    b148:	bd80      	pop	{r7, pc}
    b14a:	bf00      	nop
    b14c:	000f4240 	.word	0x000f4240

0000b150 <rbit>:
{
	wait_us(ms * 1000);
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
    b150:	b480      	push	{r7}
    b152:	b085      	sub	sp, #20
    b154:	af00      	add	r7, sp, #0
    b156:	6078      	str	r0, [r7, #4]
  u32 result = 0;
    b158:	2300      	movs	r3, #0
    b15a:	60fb      	str	r3, [r7, #12]
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    b15c:	687b      	ldr	r3, [r7, #4]
    b15e:	fa93 f3a3 	rbit	r3, r3
    b162:	60fb      	str	r3, [r7, #12]
  return result;
    b164:	68fb      	ldr	r3, [r7, #12]
}
    b166:	4618      	mov	r0, r3
    b168:	3714      	adds	r7, #20
    b16a:	46bd      	mov	sp, r7
    b16c:	f85d 7b04 	ldr.w	r7, [sp], #4
    b170:	4770      	bx	lr
    b172:	bf00      	nop

0000b174 <wait_us>:

/* delay a number of microseconds while on internal oscillator (4 MHz) */
/* we only have a resolution of 1000/400, so to the nearest 2.5        */
static volatile u32 wait_us_counter;
void wait_us(u32 us)
{
    b174:	b480      	push	{r7}
    b176:	b083      	sub	sp, #12
    b178:	af00      	add	r7, sp, #0
    b17a:	6078      	str	r0, [r7, #4]
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    b17c:	687b      	ldr	r3, [r7, #4]
    b17e:	089a      	lsrs	r2, r3, #2
    b180:	687b      	ldr	r3, [r7, #4]
    b182:	08db      	lsrs	r3, r3, #3
    b184:	441a      	add	r2, r3
    b186:	687b      	ldr	r3, [r7, #4]
    b188:	099b      	lsrs	r3, r3, #6
    b18a:	441a      	add	r2, r3
    b18c:	687b      	ldr	r3, [r7, #4]
    b18e:	09db      	lsrs	r3, r3, #7
    b190:	441a      	add	r2, r3
    b192:	687b      	ldr	r3, [r7, #4]
    b194:	0a9b      	lsrs	r3, r3, #10
    b196:	441a      	add	r2, r3
    b198:	687b      	ldr	r3, [r7, #4]
    b19a:	0adb      	lsrs	r3, r3, #11
    b19c:	4413      	add	r3, r2
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    b19e:	4a07      	ldr	r2, [pc, #28]	; (b1bc <wait_us+0x48>)
    b1a0:	6013      	str	r3, [r2, #0]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    b1a2:	bf00      	nop
    b1a4:	4b05      	ldr	r3, [pc, #20]	; (b1bc <wait_us+0x48>)
    b1a6:	681b      	ldr	r3, [r3, #0]
    b1a8:	3b01      	subs	r3, #1
    b1aa:	4a04      	ldr	r2, [pc, #16]	; (b1bc <wait_us+0x48>)
    b1ac:	6013      	str	r3, [r2, #0]
    b1ae:	2b00      	cmp	r3, #0
    b1b0:	d1f8      	bne.n	b1a4 <wait_us+0x30>
}
    b1b2:	370c      	adds	r7, #12
    b1b4:	46bd      	mov	sp, r7
    b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1ba:	4770      	bx	lr
    b1bc:	10000a68 	.word	0x10000a68

0000b1c0 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    b1c0:	b580      	push	{r7, lr}
    b1c2:	af00      	add	r7, sp, #0
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    b1c4:	f000 f836 	bl	b234 <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    b1c8:	4b10      	ldr	r3, [pc, #64]	; (b20c <gpio_init+0x4c>)
    b1ca:	2200      	movs	r2, #0
    b1cc:	601a      	str	r2, [r3, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    b1ce:	4b10      	ldr	r3, [pc, #64]	; (b210 <gpio_init+0x50>)
    b1d0:	f24c 7212 	movw	r2, #50962	; 0xc712
    b1d4:	601a      	str	r2, [r3, #0]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    b1d6:	4b0f      	ldr	r3, [pc, #60]	; (b214 <gpio_init+0x54>)
    b1d8:	f240 12b1 	movw	r2, #433	; 0x1b1
    b1dc:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    b1de:	4b0e      	ldr	r3, [pc, #56]	; (b218 <gpio_init+0x58>)
    b1e0:	2200      	movs	r2, #0
    b1e2:	601a      	str	r2, [r3, #0]
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    b1e4:	4b0d      	ldr	r3, [pc, #52]	; (b21c <gpio_init+0x5c>)
    b1e6:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    b1ea:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    b1ec:	4b0c      	ldr	r3, [pc, #48]	; (b220 <gpio_init+0x60>)
    b1ee:	2200      	movs	r2, #0
    b1f0:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    b1f2:	4b0c      	ldr	r3, [pc, #48]	; (b224 <gpio_init+0x64>)
    b1f4:	2200      	movs	r2, #0
    b1f6:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    b1f8:	4b0b      	ldr	r3, [pc, #44]	; (b228 <gpio_init+0x68>)
    b1fa:	2200      	movs	r2, #0
    b1fc:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    b1fe:	4b0b      	ldr	r3, [pc, #44]	; (b22c <gpio_init+0x6c>)
    b200:	2200      	movs	r2, #0
    b202:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    b204:	4b0a      	ldr	r3, [pc, #40]	; (b230 <gpio_init+0x70>)
    b206:	2200      	movs	r2, #0
    b208:	601a      	str	r2, [r3, #0]

#ifdef TC13BADGE
	/* R8C_CTL is active low */
	R8C_CTL_SET;
#endif
}
    b20a:	bd80      	pop	{r7, pc}
    b20c:	2009c000 	.word	0x2009c000
    b210:	2009c020 	.word	0x2009c020
    b214:	2009c040 	.word	0x2009c040
    b218:	2009c060 	.word	0x2009c060
    b21c:	2009c080 	.word	0x2009c080
    b220:	2009c014 	.word	0x2009c014
    b224:	2009c034 	.word	0x2009c034
    b228:	2009c054 	.word	0x2009c054
    b22c:	2009c074 	.word	0x2009c074
    b230:	2009c094 	.word	0x2009c094

0000b234 <all_pins_off>:

void all_pins_off(void)
{
    b234:	b480      	push	{r7}
    b236:	af00      	add	r7, sp, #0
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    b238:	4b27      	ldr	r3, [pc, #156]	; (b2d8 <all_pins_off+0xa4>)
    b23a:	2200      	movs	r2, #0
    b23c:	601a      	str	r2, [r3, #0]
	PINSEL1 = 0;
    b23e:	4b27      	ldr	r3, [pc, #156]	; (b2dc <all_pins_off+0xa8>)
    b240:	2200      	movs	r2, #0
    b242:	601a      	str	r2, [r3, #0]
	PINSEL2 = 0;
    b244:	4b26      	ldr	r3, [pc, #152]	; (b2e0 <all_pins_off+0xac>)
    b246:	2200      	movs	r2, #0
    b248:	601a      	str	r2, [r3, #0]
	PINSEL3 = 0;
    b24a:	4b26      	ldr	r3, [pc, #152]	; (b2e4 <all_pins_off+0xb0>)
    b24c:	2200      	movs	r2, #0
    b24e:	601a      	str	r2, [r3, #0]
	PINSEL4 = 0;
    b250:	4b25      	ldr	r3, [pc, #148]	; (b2e8 <all_pins_off+0xb4>)
    b252:	2200      	movs	r2, #0
    b254:	601a      	str	r2, [r3, #0]
	PINSEL7 = 0;
    b256:	4b25      	ldr	r3, [pc, #148]	; (b2ec <all_pins_off+0xb8>)
    b258:	2200      	movs	r2, #0
    b25a:	601a      	str	r2, [r3, #0]
	PINSEL9 = 0;
    b25c:	4b24      	ldr	r3, [pc, #144]	; (b2f0 <all_pins_off+0xbc>)
    b25e:	2200      	movs	r2, #0
    b260:	601a      	str	r2, [r3, #0]
	PINSEL10 = 0;
    b262:	4b24      	ldr	r3, [pc, #144]	; (b2f4 <all_pins_off+0xc0>)
    b264:	2200      	movs	r2, #0
    b266:	601a      	str	r2, [r3, #0]

	/* configure all pins as inputs */
	FIO0DIR = 0;
    b268:	4b23      	ldr	r3, [pc, #140]	; (b2f8 <all_pins_off+0xc4>)
    b26a:	2200      	movs	r2, #0
    b26c:	601a      	str	r2, [r3, #0]
	FIO1DIR = 0;
    b26e:	4b23      	ldr	r3, [pc, #140]	; (b2fc <all_pins_off+0xc8>)
    b270:	2200      	movs	r2, #0
    b272:	601a      	str	r2, [r3, #0]
	FIO2DIR = 0;
    b274:	4b22      	ldr	r3, [pc, #136]	; (b300 <all_pins_off+0xcc>)
    b276:	2200      	movs	r2, #0
    b278:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    b27a:	4b22      	ldr	r3, [pc, #136]	; (b304 <all_pins_off+0xd0>)
    b27c:	2200      	movs	r2, #0
    b27e:	601a      	str	r2, [r3, #0]
	FIO4DIR = 0;
    b280:	4b21      	ldr	r3, [pc, #132]	; (b308 <all_pins_off+0xd4>)
    b282:	2200      	movs	r2, #0
    b284:	601a      	str	r2, [r3, #0]

	/* pull-up on every pin */
	PINMODE0 = 0;
    b286:	4b21      	ldr	r3, [pc, #132]	; (b30c <all_pins_off+0xd8>)
    b288:	2200      	movs	r2, #0
    b28a:	601a      	str	r2, [r3, #0]
	PINMODE1 = 0;
    b28c:	4b20      	ldr	r3, [pc, #128]	; (b310 <all_pins_off+0xdc>)
    b28e:	2200      	movs	r2, #0
    b290:	601a      	str	r2, [r3, #0]
	PINMODE2 = 0;
    b292:	4b20      	ldr	r3, [pc, #128]	; (b314 <all_pins_off+0xe0>)
    b294:	2200      	movs	r2, #0
    b296:	601a      	str	r2, [r3, #0]
	PINMODE3 = 0;
    b298:	4b1f      	ldr	r3, [pc, #124]	; (b318 <all_pins_off+0xe4>)
    b29a:	2200      	movs	r2, #0
    b29c:	601a      	str	r2, [r3, #0]
	PINMODE4 = 0;
    b29e:	4b1f      	ldr	r3, [pc, #124]	; (b31c <all_pins_off+0xe8>)
    b2a0:	2200      	movs	r2, #0
    b2a2:	601a      	str	r2, [r3, #0]
	PINMODE7 = 0;
    b2a4:	4b1e      	ldr	r3, [pc, #120]	; (b320 <all_pins_off+0xec>)
    b2a6:	2200      	movs	r2, #0
    b2a8:	601a      	str	r2, [r3, #0]
	PINMODE9 = 0;
    b2aa:	4b1e      	ldr	r3, [pc, #120]	; (b324 <all_pins_off+0xf0>)
    b2ac:	2200      	movs	r2, #0
    b2ae:	601a      	str	r2, [r3, #0]

	/* set all outputs low */
	FIO0PIN = 0;
    b2b0:	4b1d      	ldr	r3, [pc, #116]	; (b328 <all_pins_off+0xf4>)
    b2b2:	2200      	movs	r2, #0
    b2b4:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    b2b6:	4b1d      	ldr	r3, [pc, #116]	; (b32c <all_pins_off+0xf8>)
    b2b8:	2200      	movs	r2, #0
    b2ba:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    b2bc:	4b1c      	ldr	r3, [pc, #112]	; (b330 <all_pins_off+0xfc>)
    b2be:	2200      	movs	r2, #0
    b2c0:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    b2c2:	4b1c      	ldr	r3, [pc, #112]	; (b334 <all_pins_off+0x100>)
    b2c4:	2200      	movs	r2, #0
    b2c6:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    b2c8:	4b1b      	ldr	r3, [pc, #108]	; (b338 <all_pins_off+0x104>)
    b2ca:	2200      	movs	r2, #0
    b2cc:	601a      	str	r2, [r3, #0]
}
    b2ce:	46bd      	mov	sp, r7
    b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b2d4:	4770      	bx	lr
    b2d6:	bf00      	nop
    b2d8:	4002c000 	.word	0x4002c000
    b2dc:	4002c004 	.word	0x4002c004
    b2e0:	4002c008 	.word	0x4002c008
    b2e4:	4002c00c 	.word	0x4002c00c
    b2e8:	4002c010 	.word	0x4002c010
    b2ec:	4002c01c 	.word	0x4002c01c
    b2f0:	4002c024 	.word	0x4002c024
    b2f4:	4002c028 	.word	0x4002c028
    b2f8:	2009c000 	.word	0x2009c000
    b2fc:	2009c020 	.word	0x2009c020
    b300:	2009c040 	.word	0x2009c040
    b304:	2009c060 	.word	0x2009c060
    b308:	2009c080 	.word	0x2009c080
    b30c:	4002c040 	.word	0x4002c040
    b310:	4002c044 	.word	0x4002c044
    b314:	4002c048 	.word	0x4002c048
    b318:	4002c04c 	.word	0x4002c04c
    b31c:	4002c050 	.word	0x4002c050
    b320:	4002c05c 	.word	0x4002c05c
    b324:	4002c064 	.word	0x4002c064
    b328:	2009c014 	.word	0x2009c014
    b32c:	2009c034 	.word	0x2009c034
    b330:	2009c054 	.word	0x2009c054
    b334:	2009c074 	.word	0x2009c074
    b338:	2009c094 	.word	0x2009c094

0000b33c <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    b33c:	b580      	push	{r7, lr}
    b33e:	af00      	add	r7, sp, #0
	gpio_init();
    b340:	f7ff ff3e 	bl	b1c0 <gpio_init>
	cc2400_init();
    b344:	f000 f860 	bl	b408 <cc2400_init>
	clock_start();
    b348:	f000 f9b2 	bl	b6b0 <clock_start>
}
    b34c:	bd80      	pop	{r7, pc}
    b34e:	bf00      	nop

0000b350 <dio_ssp_init>:

/* configure SSP for CC2400's secondary serial data interface */
void dio_ssp_init()
{
    b350:	b480      	push	{r7}
    b352:	af00      	add	r7, sp, #0
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    b354:	4a16      	ldr	r2, [pc, #88]	; (b3b0 <dio_ssp_init+0x60>)
    b356:	4b16      	ldr	r3, [pc, #88]	; (b3b0 <dio_ssp_init+0x60>)
    b358:	681b      	ldr	r3, [r3, #0]
    b35a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    b35e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    b362:	6013      	str	r3, [r2, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    b364:	4a12      	ldr	r2, [pc, #72]	; (b3b0 <dio_ssp_init+0x60>)
    b366:	4b12      	ldr	r3, [pc, #72]	; (b3b0 <dio_ssp_init+0x60>)
    b368:	681b      	ldr	r3, [r3, #0]
    b36a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    b36e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    b372:	6013      	str	r3, [r2, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    b374:	4a0e      	ldr	r2, [pc, #56]	; (b3b0 <dio_ssp_init+0x60>)
    b376:	4b0e      	ldr	r3, [pc, #56]	; (b3b0 <dio_ssp_init+0x60>)
    b378:	681b      	ldr	r3, [r3, #0]
    b37a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    b37e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    b382:	6013      	str	r3, [r2, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    b384:	4a0a      	ldr	r2, [pc, #40]	; (b3b0 <dio_ssp_init+0x60>)
    b386:	4b0a      	ldr	r3, [pc, #40]	; (b3b0 <dio_ssp_init+0x60>)
    b388:	681b      	ldr	r3, [r3, #0]
    b38a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    b38e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    b392:	6013      	str	r3, [r2, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    b394:	4b07      	ldr	r3, [pc, #28]	; (b3b4 <dio_ssp_init+0x64>)
    b396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    b39a:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    b39c:	4b06      	ldr	r3, [pc, #24]	; (b3b8 <dio_ssp_init+0x68>)
    b39e:	22c7      	movs	r2, #199	; 0xc7
    b3a0:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    b3a2:	4b06      	ldr	r3, [pc, #24]	; (b3bc <dio_ssp_init+0x6c>)
    b3a4:	220c      	movs	r2, #12
    b3a6:	601a      	str	r2, [r3, #0]
}
    b3a8:	46bd      	mov	sp, r7
    b3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3ae:	4770      	bx	lr
    b3b0:	4002c000 	.word	0x4002c000
    b3b4:	2009c098 	.word	0x2009c098
    b3b8:	40030000 	.word	0x40030000
    b3bc:	40030004 	.word	0x40030004

0000b3c0 <atest_init>:

void atest_init()
{
    b3c0:	b480      	push	{r7}
    b3c2:	af00      	add	r7, sp, #0
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    b3c4:	4a0d      	ldr	r2, [pc, #52]	; (b3fc <atest_init+0x3c>)
    b3c6:	4b0d      	ldr	r3, [pc, #52]	; (b3fc <atest_init+0x3c>)
    b3c8:	681b      	ldr	r3, [r3, #0]
    b3ca:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    b3ce:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    b3d0:	4a0b      	ldr	r2, [pc, #44]	; (b400 <atest_init+0x40>)
    b3d2:	4b0b      	ldr	r3, [pc, #44]	; (b400 <atest_init+0x40>)
    b3d4:	681b      	ldr	r3, [r3, #0]
    b3d6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    b3da:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    b3dc:	4a09      	ldr	r2, [pc, #36]	; (b404 <atest_init+0x44>)
    b3de:	4b09      	ldr	r3, [pc, #36]	; (b404 <atest_init+0x44>)
    b3e0:	681b      	ldr	r3, [r3, #0]
    b3e2:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
    b3e6:	6013      	str	r3, [r2, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    b3e8:	4a06      	ldr	r2, [pc, #24]	; (b404 <atest_init+0x44>)
    b3ea:	4b06      	ldr	r3, [pc, #24]	; (b404 <atest_init+0x44>)
    b3ec:	681b      	ldr	r3, [r3, #0]
    b3ee:	f423 13a0 	bic.w	r3, r3, #1310720	; 0x140000
    b3f2:	6013      	str	r3, [r2, #0]
}
    b3f4:	46bd      	mov	sp, r7
    b3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b3fa:	4770      	bx	lr
    b3fc:	4002c004 	.word	0x4002c004
    b400:	2009c000 	.word	0x2009c000
    b404:	4002c044 	.word	0x4002c044

0000b408 <cc2400_init>:

void cc2400_init()
{
    b408:	b580      	push	{r7, lr}
    b40a:	af00      	add	r7, sp, #0
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    b40c:	f7ff ffd8 	bl	b3c0 <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    b410:	4b09      	ldr	r3, [pc, #36]	; (b438 <cc2400_init+0x30>)
    b412:	f44f 7200 	mov.w	r2, #512	; 0x200
    b416:	601a      	str	r2, [r3, #0]
	wait_us(50);
    b418:	2032      	movs	r0, #50	; 0x32
    b41a:	f7ff feab 	bl	b174 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    b41e:	4b07      	ldr	r3, [pc, #28]	; (b43c <cc2400_init+0x34>)
    b420:	2220      	movs	r2, #32
    b422:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    b424:	4b04      	ldr	r3, [pc, #16]	; (b438 <cc2400_init+0x30>)
    b426:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    b42a:	601a      	str	r2, [r3, #0]

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
    b42c:	200d      	movs	r0, #13
    b42e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    b432:	f000 f85f 	bl	b4f4 <cc2400_set>
}
    b436:	bd80      	pop	{r7, pc}
    b438:	2009c038 	.word	0x2009c038
    b43c:	2009c058 	.word	0x2009c058

0000b440 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    b440:	b480      	push	{r7}
    b442:	b085      	sub	sp, #20
    b444:	af00      	add	r7, sp, #0
    b446:	4603      	mov	r3, r0
    b448:	6039      	str	r1, [r7, #0]
    b44a:	71fb      	strb	r3, [r7, #7]
	u32 msb = 1 << (len - 1);
    b44c:	79fb      	ldrb	r3, [r7, #7]
    b44e:	3b01      	subs	r3, #1
    b450:	2201      	movs	r2, #1
    b452:	fa02 f303 	lsl.w	r3, r2, r3
    b456:	60fb      	str	r3, [r7, #12]

	/* start transaction by dropping CSN */
	CSN_CLR;
    b458:	4b18      	ldr	r3, [pc, #96]	; (b4bc <cc2400_spi+0x7c>)
    b45a:	2220      	movs	r2, #32
    b45c:	601a      	str	r2, [r3, #0]

	while (len--) {
    b45e:	e01e      	b.n	b49e <cc2400_spi+0x5e>
		if (data & msb)
    b460:	683a      	ldr	r2, [r7, #0]
    b462:	68fb      	ldr	r3, [r7, #12]
    b464:	4013      	ands	r3, r2
    b466:	2b00      	cmp	r3, #0
    b468:	d003      	beq.n	b472 <cc2400_spi+0x32>
			MOSI_SET;
    b46a:	4b15      	ldr	r3, [pc, #84]	; (b4c0 <cc2400_spi+0x80>)
    b46c:	2201      	movs	r2, #1
    b46e:	601a      	str	r2, [r3, #0]
    b470:	e002      	b.n	b478 <cc2400_spi+0x38>
		else
			MOSI_CLR;
    b472:	4b12      	ldr	r3, [pc, #72]	; (b4bc <cc2400_spi+0x7c>)
    b474:	2201      	movs	r2, #1
    b476:	601a      	str	r2, [r3, #0]
		data <<= 1;
    b478:	683b      	ldr	r3, [r7, #0]
    b47a:	005b      	lsls	r3, r3, #1
    b47c:	603b      	str	r3, [r7, #0]

		SCLK_SET;
    b47e:	4b10      	ldr	r3, [pc, #64]	; (b4c0 <cc2400_spi+0x80>)
    b480:	2210      	movs	r2, #16
    b482:	601a      	str	r2, [r3, #0]
		if (MISO)
    b484:	4b0f      	ldr	r3, [pc, #60]	; (b4c4 <cc2400_spi+0x84>)
    b486:	681b      	ldr	r3, [r3, #0]
    b488:	f003 0302 	and.w	r3, r3, #2
    b48c:	2b00      	cmp	r3, #0
    b48e:	d003      	beq.n	b498 <cc2400_spi+0x58>
			data |= 1;
    b490:	683b      	ldr	r3, [r7, #0]
    b492:	f043 0301 	orr.w	r3, r3, #1
    b496:	603b      	str	r3, [r7, #0]

		SCLK_CLR;
    b498:	4b08      	ldr	r3, [pc, #32]	; (b4bc <cc2400_spi+0x7c>)
    b49a:	2210      	movs	r2, #16
    b49c:	601a      	str	r2, [r3, #0]
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    b49e:	79fb      	ldrb	r3, [r7, #7]
    b4a0:	1e5a      	subs	r2, r3, #1
    b4a2:	71fa      	strb	r2, [r7, #7]
    b4a4:	2b00      	cmp	r3, #0
    b4a6:	d1db      	bne.n	b460 <cc2400_spi+0x20>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    b4a8:	4b05      	ldr	r3, [pc, #20]	; (b4c0 <cc2400_spi+0x80>)
    b4aa:	2220      	movs	r2, #32
    b4ac:	601a      	str	r2, [r3, #0]

	return data;
    b4ae:	683b      	ldr	r3, [r7, #0]
}
    b4b0:	4618      	mov	r0, r3
    b4b2:	3714      	adds	r7, #20
    b4b4:	46bd      	mov	sp, r7
    b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b4ba:	4770      	bx	lr
    b4bc:	2009c05c 	.word	0x2009c05c
    b4c0:	2009c058 	.word	0x2009c058
    b4c4:	2009c054 	.word	0x2009c054

0000b4c8 <cc2400_get>:

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    b4c8:	b580      	push	{r7, lr}
    b4ca:	b084      	sub	sp, #16
    b4cc:	af00      	add	r7, sp, #0
    b4ce:	4603      	mov	r3, r0
    b4d0:	71fb      	strb	r3, [r7, #7]
	u32 in;

	u32 out = (reg | 0x80) << 16;
    b4d2:	79fb      	ldrb	r3, [r7, #7]
    b4d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b4d8:	b2db      	uxtb	r3, r3
    b4da:	041b      	lsls	r3, r3, #16
    b4dc:	60fb      	str	r3, [r7, #12]
	in = cc2400_spi(24, out);
    b4de:	2018      	movs	r0, #24
    b4e0:	68f9      	ldr	r1, [r7, #12]
    b4e2:	f7ff ffad 	bl	b440 <cc2400_spi>
    b4e6:	60b8      	str	r0, [r7, #8]
	return in & 0xFFFF;
    b4e8:	68bb      	ldr	r3, [r7, #8]
    b4ea:	b29b      	uxth	r3, r3
}
    b4ec:	4618      	mov	r0, r3
    b4ee:	3710      	adds	r7, #16
    b4f0:	46bd      	mov	sp, r7
    b4f2:	bd80      	pop	{r7, pc}

0000b4f4 <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
    b4f4:	b580      	push	{r7, lr}
    b4f6:	b084      	sub	sp, #16
    b4f8:	af00      	add	r7, sp, #0
    b4fa:	4603      	mov	r3, r0
    b4fc:	460a      	mov	r2, r1
    b4fe:	71fb      	strb	r3, [r7, #7]
    b500:	4613      	mov	r3, r2
    b502:	80bb      	strh	r3, [r7, #4]
	u32 out = (reg << 16) | val;
    b504:	79fb      	ldrb	r3, [r7, #7]
    b506:	041a      	lsls	r2, r3, #16
    b508:	88bb      	ldrh	r3, [r7, #4]
    b50a:	4313      	orrs	r3, r2
    b50c:	60fb      	str	r3, [r7, #12]
	cc2400_spi(24, out);
    b50e:	2018      	movs	r0, #24
    b510:	68f9      	ldr	r1, [r7, #12]
    b512:	f7ff ff95 	bl	b440 <cc2400_spi>
}
    b516:	3710      	adds	r7, #16
    b518:	46bd      	mov	sp, r7
    b51a:	bd80      	pop	{r7, pc}

0000b51c <cc2400_get8>:

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    b51c:	b580      	push	{r7, lr}
    b51e:	b084      	sub	sp, #16
    b520:	af00      	add	r7, sp, #0
    b522:	4603      	mov	r3, r0
    b524:	71fb      	strb	r3, [r7, #7]
	u16 in;

	u16 out = (reg | 0x80) << 8;
    b526:	79fb      	ldrb	r3, [r7, #7]
    b528:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b52c:	b2db      	uxtb	r3, r3
    b52e:	b29b      	uxth	r3, r3
    b530:	021b      	lsls	r3, r3, #8
    b532:	81fb      	strh	r3, [r7, #14]
	in = cc2400_spi(16, out);
    b534:	89fb      	ldrh	r3, [r7, #14]
    b536:	2010      	movs	r0, #16
    b538:	4619      	mov	r1, r3
    b53a:	f7ff ff81 	bl	b440 <cc2400_spi>
    b53e:	4603      	mov	r3, r0
    b540:	81bb      	strh	r3, [r7, #12]
	return in & 0xFF;
    b542:	89bb      	ldrh	r3, [r7, #12]
    b544:	b2db      	uxtb	r3, r3
}
    b546:	4618      	mov	r0, r3
    b548:	3710      	adds	r7, #16
    b54a:	46bd      	mov	sp, r7
    b54c:	bd80      	pop	{r7, pc}
    b54e:	bf00      	nop

0000b550 <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
    b550:	b580      	push	{r7, lr}
    b552:	b084      	sub	sp, #16
    b554:	af00      	add	r7, sp, #0
    b556:	4603      	mov	r3, r0
    b558:	460a      	mov	r2, r1
    b55a:	71fb      	strb	r3, [r7, #7]
    b55c:	4613      	mov	r3, r2
    b55e:	71bb      	strb	r3, [r7, #6]
	u32 out = (reg << 8) | val;
    b560:	79fb      	ldrb	r3, [r7, #7]
    b562:	021a      	lsls	r2, r3, #8
    b564:	79bb      	ldrb	r3, [r7, #6]
    b566:	4313      	orrs	r3, r2
    b568:	60fb      	str	r3, [r7, #12]
	cc2400_spi(16, out);
    b56a:	2010      	movs	r0, #16
    b56c:	68f9      	ldr	r1, [r7, #12]
    b56e:	f7ff ff67 	bl	b440 <cc2400_spi>
}
    b572:	3710      	adds	r7, #16
    b574:	46bd      	mov	sp, r7
    b576:	bd80      	pop	{r7, pc}

0000b578 <cc2400_spi_buf>:

/* write multiple bytes to SPI */
void cc2400_spi_buf(u8 reg, u8 len, u8 *data)
{
    b578:	b480      	push	{r7}
    b57a:	b085      	sub	sp, #20
    b57c:	af00      	add	r7, sp, #0
    b57e:	4603      	mov	r3, r0
    b580:	603a      	str	r2, [r7, #0]
    b582:	71fb      	strb	r3, [r7, #7]
    b584:	460b      	mov	r3, r1
    b586:	71bb      	strb	r3, [r7, #6]
	u8 msb = 1 << 7;
    b588:	2380      	movs	r3, #128	; 0x80
    b58a:	733b      	strb	r3, [r7, #12]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    b58c:	4b2b      	ldr	r3, [pc, #172]	; (b63c <cc2400_spi_buf+0xc4>)
    b58e:	2220      	movs	r2, #32
    b590:	601a      	str	r2, [r3, #0]

	for (i = 0; i < 8; ++i) {
    b592:	2300      	movs	r3, #0
    b594:	73fb      	strb	r3, [r7, #15]
    b596:	e018      	b.n	b5ca <cc2400_spi_buf+0x52>
		if (reg & msb)
    b598:	79fa      	ldrb	r2, [r7, #7]
    b59a:	7b3b      	ldrb	r3, [r7, #12]
    b59c:	4013      	ands	r3, r2
    b59e:	b2db      	uxtb	r3, r3
    b5a0:	2b00      	cmp	r3, #0
    b5a2:	d003      	beq.n	b5ac <cc2400_spi_buf+0x34>
			MOSI_SET;
    b5a4:	4b26      	ldr	r3, [pc, #152]	; (b640 <cc2400_spi_buf+0xc8>)
    b5a6:	2201      	movs	r2, #1
    b5a8:	601a      	str	r2, [r3, #0]
    b5aa:	e002      	b.n	b5b2 <cc2400_spi_buf+0x3a>
		else
			MOSI_CLR;
    b5ac:	4b23      	ldr	r3, [pc, #140]	; (b63c <cc2400_spi_buf+0xc4>)
    b5ae:	2201      	movs	r2, #1
    b5b0:	601a      	str	r2, [r3, #0]
		reg <<= 1;
    b5b2:	79fb      	ldrb	r3, [r7, #7]
    b5b4:	005b      	lsls	r3, r3, #1
    b5b6:	71fb      	strb	r3, [r7, #7]
		SCLK_SET;
    b5b8:	4b21      	ldr	r3, [pc, #132]	; (b640 <cc2400_spi_buf+0xc8>)
    b5ba:	2210      	movs	r2, #16
    b5bc:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    b5be:	4b1f      	ldr	r3, [pc, #124]	; (b63c <cc2400_spi_buf+0xc4>)
    b5c0:	2210      	movs	r2, #16
    b5c2:	601a      	str	r2, [r3, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    b5c4:	7bfb      	ldrb	r3, [r7, #15]
    b5c6:	3301      	adds	r3, #1
    b5c8:	73fb      	strb	r3, [r7, #15]
    b5ca:	7bfb      	ldrb	r3, [r7, #15]
    b5cc:	2b07      	cmp	r3, #7
    b5ce:	d9e3      	bls.n	b598 <cc2400_spi_buf+0x20>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    b5d0:	2300      	movs	r3, #0
    b5d2:	73fb      	strb	r3, [r7, #15]
    b5d4:	e026      	b.n	b624 <cc2400_spi_buf+0xac>
		temp = data[i];
    b5d6:	7bfb      	ldrb	r3, [r7, #15]
    b5d8:	683a      	ldr	r2, [r7, #0]
    b5da:	4413      	add	r3, r2
    b5dc:	781b      	ldrb	r3, [r3, #0]
    b5de:	737b      	strb	r3, [r7, #13]
		for (j = 0; j < 8; ++j) {
    b5e0:	2300      	movs	r3, #0
    b5e2:	73bb      	strb	r3, [r7, #14]
    b5e4:	e018      	b.n	b618 <cc2400_spi_buf+0xa0>
			if (temp & msb)
    b5e6:	7b7a      	ldrb	r2, [r7, #13]
    b5e8:	7b3b      	ldrb	r3, [r7, #12]
    b5ea:	4013      	ands	r3, r2
    b5ec:	b2db      	uxtb	r3, r3
    b5ee:	2b00      	cmp	r3, #0
    b5f0:	d003      	beq.n	b5fa <cc2400_spi_buf+0x82>
				MOSI_SET;
    b5f2:	4b13      	ldr	r3, [pc, #76]	; (b640 <cc2400_spi_buf+0xc8>)
    b5f4:	2201      	movs	r2, #1
    b5f6:	601a      	str	r2, [r3, #0]
    b5f8:	e002      	b.n	b600 <cc2400_spi_buf+0x88>
			else
				MOSI_CLR;
    b5fa:	4b10      	ldr	r3, [pc, #64]	; (b63c <cc2400_spi_buf+0xc4>)
    b5fc:	2201      	movs	r2, #1
    b5fe:	601a      	str	r2, [r3, #0]
			temp <<= 1;
    b600:	7b7b      	ldrb	r3, [r7, #13]
    b602:	005b      	lsls	r3, r3, #1
    b604:	737b      	strb	r3, [r7, #13]
			SCLK_SET;
    b606:	4b0e      	ldr	r3, [pc, #56]	; (b640 <cc2400_spi_buf+0xc8>)
    b608:	2210      	movs	r2, #16
    b60a:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
    b60c:	4b0b      	ldr	r3, [pc, #44]	; (b63c <cc2400_spi_buf+0xc4>)
    b60e:	2210      	movs	r2, #16
    b610:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    b612:	7bbb      	ldrb	r3, [r7, #14]
    b614:	3301      	adds	r3, #1
    b616:	73bb      	strb	r3, [r7, #14]
    b618:	7bbb      	ldrb	r3, [r7, #14]
    b61a:	2b07      	cmp	r3, #7
    b61c:	d9e3      	bls.n	b5e6 <cc2400_spi_buf+0x6e>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    b61e:	7bfb      	ldrb	r3, [r7, #15]
    b620:	3301      	adds	r3, #1
    b622:	73fb      	strb	r3, [r7, #15]
    b624:	7bfa      	ldrb	r2, [r7, #15]
    b626:	79bb      	ldrb	r3, [r7, #6]
    b628:	429a      	cmp	r2, r3
    b62a:	d3d4      	bcc.n	b5d6 <cc2400_spi_buf+0x5e>
		SCLK_SET;
		SCLK_CLR;
	}
*/
	/* end transaction by raising CSN */
	CSN_SET;
    b62c:	4b04      	ldr	r3, [pc, #16]	; (b640 <cc2400_spi_buf+0xc8>)
    b62e:	2220      	movs	r2, #32
    b630:	601a      	str	r2, [r3, #0]
}
    b632:	3714      	adds	r7, #20
    b634:	46bd      	mov	sp, r7
    b636:	f85d 7b04 	ldr.w	r7, [sp], #4
    b63a:	4770      	bx	lr
    b63c:	2009c05c 	.word	0x2009c05c
    b640:	2009c058 	.word	0x2009c058

0000b644 <cc2400_status>:
  CSN_SET;
}

/* get the status */
u8 cc2400_status()
{
    b644:	b580      	push	{r7, lr}
    b646:	af00      	add	r7, sp, #0
	return cc2400_spi(8, 0);
    b648:	2008      	movs	r0, #8
    b64a:	2100      	movs	r1, #0
    b64c:	f7ff fef8 	bl	b440 <cc2400_spi>
    b650:	4603      	mov	r3, r0
    b652:	b2db      	uxtb	r3, r3
}
    b654:	4618      	mov	r0, r3
    b656:	bd80      	pop	{r7, pc}

0000b658 <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    b658:	b580      	push	{r7, lr}
    b65a:	b082      	sub	sp, #8
    b65c:	af00      	add	r7, sp, #0
    b65e:	4603      	mov	r3, r0
    b660:	71fb      	strb	r3, [r7, #7]
	return cc2400_spi(8, reg);
    b662:	79fb      	ldrb	r3, [r7, #7]
    b664:	2008      	movs	r0, #8
    b666:	4619      	mov	r1, r3
    b668:	f7ff feea 	bl	b440 <cc2400_spi>
    b66c:	4603      	mov	r3, r0
    b66e:	b2db      	uxtb	r3, r3
}
    b670:	4618      	mov	r0, r3
    b672:	3708      	adds	r7, #8
    b674:	46bd      	mov	sp, r7
    b676:	bd80      	pop	{r7, pc}

0000b678 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    b678:	b580      	push	{r7, lr}
    b67a:	af00      	add	r7, sp, #0
	cc2400_set(MAIN, 0x0000);
    b67c:	2000      	movs	r0, #0
    b67e:	2100      	movs	r1, #0
    b680:	f7ff ff38 	bl	b4f4 <cc2400_set>
	while (cc2400_get(MAIN) != 0x0000);
    b684:	bf00      	nop
    b686:	2000      	movs	r0, #0
    b688:	f7ff ff1e 	bl	b4c8 <cc2400_get>
    b68c:	4603      	mov	r3, r0
    b68e:	2b00      	cmp	r3, #0
    b690:	d1f9      	bne.n	b686 <cc2400_reset+0xe>
	cc2400_set(MAIN, 0x8000);
    b692:	2000      	movs	r0, #0
    b694:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    b698:	f7ff ff2c 	bl	b4f4 <cc2400_set>
	while (cc2400_get(MAIN) != 0x8000);
    b69c:	bf00      	nop
    b69e:	2000      	movs	r0, #0
    b6a0:	f7ff ff12 	bl	b4c8 <cc2400_get>
    b6a4:	4603      	mov	r3, r0
    b6a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    b6aa:	d1f8      	bne.n	b69e <cc2400_reset+0x26>
}
    b6ac:	bd80      	pop	{r7, pc}
    b6ae:	bf00      	nop

0000b6b0 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    b6b0:	b580      	push	{r7, lr}
    b6b2:	af00      	add	r7, sp, #0
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    b6b4:	4b5e      	ldr	r3, [pc, #376]	; (b830 <clock_start+0x180>)
    b6b6:	f244 023a 	movw	r2, #16442	; 0x403a
    b6ba:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    b6bc:	4b5d      	ldr	r3, [pc, #372]	; (b834 <clock_start+0x184>)
    b6be:	2200      	movs	r2, #0
    b6c0:	601a      	str	r2, [r3, #0]

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    b6c2:	4a5d      	ldr	r2, [pc, #372]	; (b838 <clock_start+0x188>)
    b6c4:	4b5c      	ldr	r3, [pc, #368]	; (b838 <clock_start+0x188>)
    b6c6:	681b      	ldr	r3, [r3, #0]
    b6c8:	f023 0302 	bic.w	r3, r3, #2
    b6cc:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    b6ce:	4b5b      	ldr	r3, [pc, #364]	; (b83c <clock_start+0x18c>)
    b6d0:	22aa      	movs	r2, #170	; 0xaa
    b6d2:	601a      	str	r2, [r3, #0]
    b6d4:	4b59      	ldr	r3, [pc, #356]	; (b83c <clock_start+0x18c>)
    b6d6:	2255      	movs	r2, #85	; 0x55
    b6d8:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    b6da:	bf00      	nop
    b6dc:	4b58      	ldr	r3, [pc, #352]	; (b840 <clock_start+0x190>)
    b6de:	681b      	ldr	r3, [r3, #0]
    b6e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    b6e4:	2b00      	cmp	r3, #0
    b6e6:	d1f9      	bne.n	b6dc <clock_start+0x2c>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    b6e8:	4a53      	ldr	r2, [pc, #332]	; (b838 <clock_start+0x188>)
    b6ea:	4b53      	ldr	r3, [pc, #332]	; (b838 <clock_start+0x188>)
    b6ec:	681b      	ldr	r3, [r3, #0]
    b6ee:	f023 0301 	bic.w	r3, r3, #1
    b6f2:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    b6f4:	4b51      	ldr	r3, [pc, #324]	; (b83c <clock_start+0x18c>)
    b6f6:	22aa      	movs	r2, #170	; 0xaa
    b6f8:	601a      	str	r2, [r3, #0]
    b6fa:	4b50      	ldr	r3, [pc, #320]	; (b83c <clock_start+0x18c>)
    b6fc:	2255      	movs	r2, #85	; 0x55
    b6fe:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    b700:	bf00      	nop
    b702:	4b4f      	ldr	r3, [pc, #316]	; (b840 <clock_start+0x190>)
    b704:	681b      	ldr	r3, [r3, #0]
    b706:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    b70a:	2b00      	cmp	r3, #0
    b70c:	d1f9      	bne.n	b702 <clock_start+0x52>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    b70e:	4b4d      	ldr	r3, [pc, #308]	; (b844 <clock_start+0x194>)
    b710:	2200      	movs	r2, #0
    b712:	601a      	str	r2, [r3, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    b714:	f7ff ffb0 	bl	b678 <cc2400_reset>
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
    b718:	2008      	movs	r0, #8
    b71a:	f241 5170 	movw	r1, #5488	; 0x1570
    b71e:	f7ff fee9 	bl	b4f4 <cc2400_set>
	cc2400_strobe(SXOSCON);
    b722:	2060      	movs	r0, #96	; 0x60
    b724:	f7ff ff98 	bl	b658 <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    b728:	bf00      	nop
    b72a:	f7ff ff8b 	bl	b644 <cc2400_status>
    b72e:	4603      	mov	r3, r0
    b730:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b734:	2b00      	cmp	r3, #0
    b736:	d0f8      	beq.n	b72a <clock_start+0x7a>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    b738:	4b43      	ldr	r3, [pc, #268]	; (b848 <clock_start+0x198>)
    b73a:	2220      	movs	r2, #32
    b73c:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    b73e:	bf00      	nop
    b740:	4b41      	ldr	r3, [pc, #260]	; (b848 <clock_start+0x198>)
    b742:	681b      	ldr	r3, [r3, #0]
    b744:	f003 0340 	and.w	r3, r3, #64	; 0x40
    b748:	2b00      	cmp	r3, #0
    b74a:	d0f9      	beq.n	b740 <clock_start+0x90>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    b74c:	4b3f      	ldr	r3, [pc, #252]	; (b84c <clock_start+0x19c>)
    b74e:	2208      	movs	r2, #8
    b750:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    b752:	4b3f      	ldr	r3, [pc, #252]	; (b850 <clock_start+0x1a0>)
    b754:	2200      	movs	r2, #0
    b756:	601a      	str	r2, [r3, #0]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    b758:	4b36      	ldr	r3, [pc, #216]	; (b834 <clock_start+0x184>)
    b75a:	2201      	movs	r2, #1
    b75c:	601a      	str	r2, [r3, #0]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    b75e:	4b3d      	ldr	r3, [pc, #244]	; (b854 <clock_start+0x1a4>)
    b760:	4a3d      	ldr	r2, [pc, #244]	; (b858 <clock_start+0x1a8>)
    b762:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    b764:	4b35      	ldr	r3, [pc, #212]	; (b83c <clock_start+0x18c>)
    b766:	22aa      	movs	r2, #170	; 0xaa
    b768:	601a      	str	r2, [r3, #0]
    b76a:	4b34      	ldr	r3, [pc, #208]	; (b83c <clock_start+0x18c>)
    b76c:	2255      	movs	r2, #85	; 0x55
    b76e:	601a      	str	r2, [r3, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    b770:	4a31      	ldr	r2, [pc, #196]	; (b838 <clock_start+0x188>)
    b772:	4b31      	ldr	r3, [pc, #196]	; (b838 <clock_start+0x188>)
    b774:	681b      	ldr	r3, [r3, #0]
    b776:	f043 0301 	orr.w	r3, r3, #1
    b77a:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    b77c:	4b2f      	ldr	r3, [pc, #188]	; (b83c <clock_start+0x18c>)
    b77e:	22aa      	movs	r2, #170	; 0xaa
    b780:	601a      	str	r2, [r3, #0]
    b782:	4b2e      	ldr	r3, [pc, #184]	; (b83c <clock_start+0x18c>)
    b784:	2255      	movs	r2, #85	; 0x55
    b786:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    b788:	bf00      	nop
    b78a:	4b2d      	ldr	r3, [pc, #180]	; (b840 <clock_start+0x190>)
    b78c:	681b      	ldr	r3, [r3, #0]
    b78e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    b792:	2b00      	cmp	r3, #0
    b794:	d0f9      	beq.n	b78a <clock_start+0xda>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    b796:	4b2b      	ldr	r3, [pc, #172]	; (b844 <clock_start+0x194>)
    b798:	2203      	movs	r2, #3
    b79a:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    b79c:	4a26      	ldr	r2, [pc, #152]	; (b838 <clock_start+0x188>)
    b79e:	4b26      	ldr	r3, [pc, #152]	; (b838 <clock_start+0x188>)
    b7a0:	681b      	ldr	r3, [r3, #0]
    b7a2:	f043 0302 	orr.w	r3, r3, #2
    b7a6:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    b7a8:	4b24      	ldr	r3, [pc, #144]	; (b83c <clock_start+0x18c>)
    b7aa:	22aa      	movs	r2, #170	; 0xaa
    b7ac:	601a      	str	r2, [r3, #0]
    b7ae:	4b23      	ldr	r3, [pc, #140]	; (b83c <clock_start+0x18c>)
    b7b0:	2255      	movs	r2, #85	; 0x55
    b7b2:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    b7b4:	bf00      	nop
    b7b6:	4b22      	ldr	r3, [pc, #136]	; (b840 <clock_start+0x190>)
    b7b8:	681b      	ldr	r3, [r3, #0]
    b7ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    b7be:	2b00      	cmp	r3, #0
    b7c0:	d0f9      	beq.n	b7b6 <clock_start+0x106>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    b7c2:	4b26      	ldr	r3, [pc, #152]	; (b85c <clock_start+0x1ac>)
    b7c4:	2222      	movs	r2, #34	; 0x22
    b7c6:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    b7c8:	4b25      	ldr	r3, [pc, #148]	; (b860 <clock_start+0x1b0>)
    b7ca:	22aa      	movs	r2, #170	; 0xaa
    b7cc:	601a      	str	r2, [r3, #0]
    b7ce:	4b24      	ldr	r3, [pc, #144]	; (b860 <clock_start+0x1b0>)
    b7d0:	2255      	movs	r2, #85	; 0x55
    b7d2:	601a      	str	r2, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    b7d4:	4a23      	ldr	r2, [pc, #140]	; (b864 <clock_start+0x1b4>)
    b7d6:	4b23      	ldr	r3, [pc, #140]	; (b864 <clock_start+0x1b4>)
    b7d8:	681b      	ldr	r3, [r3, #0]
    b7da:	f043 0301 	orr.w	r3, r3, #1
    b7de:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    b7e0:	4b1f      	ldr	r3, [pc, #124]	; (b860 <clock_start+0x1b0>)
    b7e2:	22aa      	movs	r2, #170	; 0xaa
    b7e4:	601a      	str	r2, [r3, #0]
    b7e6:	4b1e      	ldr	r3, [pc, #120]	; (b860 <clock_start+0x1b0>)
    b7e8:	2255      	movs	r2, #85	; 0x55
    b7ea:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    b7ec:	bf00      	nop
    b7ee:	4b1e      	ldr	r3, [pc, #120]	; (b868 <clock_start+0x1b8>)
    b7f0:	681b      	ldr	r3, [r3, #0]
    b7f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
    b7f6:	2b00      	cmp	r3, #0
    b7f8:	d0f9      	beq.n	b7ee <clock_start+0x13e>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    b7fa:	bf00      	nop
    b7fc:	4b1a      	ldr	r3, [pc, #104]	; (b868 <clock_start+0x1b8>)
    b7fe:	681b      	ldr	r3, [r3, #0]
    b800:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b804:	2b00      	cmp	r3, #0
    b806:	d0f9      	beq.n	b7fc <clock_start+0x14c>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    b808:	4a16      	ldr	r2, [pc, #88]	; (b864 <clock_start+0x1b4>)
    b80a:	4b16      	ldr	r3, [pc, #88]	; (b864 <clock_start+0x1b4>)
    b80c:	681b      	ldr	r3, [r3, #0]
    b80e:	f043 0302 	orr.w	r3, r3, #2
    b812:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    b814:	4b12      	ldr	r3, [pc, #72]	; (b860 <clock_start+0x1b0>)
    b816:	22aa      	movs	r2, #170	; 0xaa
    b818:	601a      	str	r2, [r3, #0]
    b81a:	4b11      	ldr	r3, [pc, #68]	; (b860 <clock_start+0x1b0>)
    b81c:	2255      	movs	r2, #85	; 0x55
    b81e:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    b820:	bf00      	nop
    b822:	4b11      	ldr	r3, [pc, #68]	; (b868 <clock_start+0x1b8>)
    b824:	681b      	ldr	r3, [r3, #0]
    b826:	f403 7300 	and.w	r3, r3, #512	; 0x200
    b82a:	2b00      	cmp	r3, #0
    b82c:	d0f9      	beq.n	b822 <clock_start+0x172>
}
    b82e:	bd80      	pop	{r7, pc}
    b830:	400fc000 	.word	0x400fc000
    b834:	400fc10c 	.word	0x400fc10c
    b838:	400fc080 	.word	0x400fc080
    b83c:	400fc08c 	.word	0x400fc08c
    b840:	400fc088 	.word	0x400fc088
    b844:	400fc104 	.word	0x400fc104
    b848:	400fc1a0 	.word	0x400fc1a0
    b84c:	400fc1a8 	.word	0x400fc1a8
    b850:	400fc1ac 	.word	0x400fc1ac
    b854:	400fc084 	.word	0x400fc084
    b858:	00010018 	.word	0x00010018
    b85c:	400fc0a4 	.word	0x400fc0a4
    b860:	400fc0ac 	.word	0x400fc0ac
    b864:	400fc0a0 	.word	0x400fc0a0
    b868:	400fc0a8 	.word	0x400fc0a8

0000b86c <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    b86c:	b580      	push	{r7, lr}
    b86e:	af00      	add	r7, sp, #0
	all_pins_off();
    b870:	f7ff fce0 	bl	b234 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    b874:	4b0a      	ldr	r3, [pc, #40]	; (b8a0 <reset+0x34>)
    b876:	2202      	movs	r2, #2
    b878:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    b87a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    b87e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b882:	681b      	ldr	r3, [r3, #0]
    b884:	f043 0303 	orr.w	r3, r3, #3
    b888:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    b88a:	4b06      	ldr	r3, [pc, #24]	; (b8a4 <reset+0x38>)
    b88c:	22aa      	movs	r2, #170	; 0xaa
    b88e:	601a      	str	r2, [r3, #0]
    b890:	4b04      	ldr	r3, [pc, #16]	; (b8a4 <reset+0x38>)
    b892:	2255      	movs	r2, #85	; 0x55
    b894:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
    b896:	2001      	movs	r0, #1
    b898:	f7ff fc48 	bl	b12c <wait>
}
    b89c:	bd80      	pop	{r7, pc}
    b89e:	bf00      	nop
    b8a0:	2009c03c 	.word	0x2009c03c
    b8a4:	40000008 	.word	0x40000008

0000b8a8 <_HandleRequest>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    b8a8:	b580      	push	{r7, lr}
    b8aa:	b088      	sub	sp, #32
    b8ac:	af00      	add	r7, sp, #0
    b8ae:	60f8      	str	r0, [r7, #12]
    b8b0:	60b9      	str	r1, [r7, #8]
    b8b2:	607a      	str	r2, [r7, #4]
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    b8b4:	68fb      	ldr	r3, [r7, #12]
    b8b6:	781b      	ldrb	r3, [r3, #0]
    b8b8:	095b      	lsrs	r3, r3, #5
    b8ba:	b2db      	uxtb	r3, r3
    b8bc:	f003 0303 	and.w	r3, r3, #3
    b8c0:	61fb      	str	r3, [r7, #28]
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    b8c2:	69fb      	ldr	r3, [r7, #28]
    b8c4:	2b02      	cmp	r3, #2
    b8c6:	d10e      	bne.n	b8e6 <_HandleRequest+0x3e>
		BOOL fFilterStatus = FALSE;
    b8c8:	2300      	movs	r3, #0
    b8ca:	617b      	str	r3, [r7, #20]
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    b8cc:	f107 0314 	add.w	r3, r7, #20
    b8d0:	68f8      	ldr	r0, [r7, #12]
    b8d2:	4619      	mov	r1, r3
    b8d4:	68ba      	ldr	r2, [r7, #8]
    b8d6:	687b      	ldr	r3, [r7, #4]
    b8d8:	f000 fcd2 	bl	c280 <USBFilterOsVendorMessage>
    b8dc:	4603      	mov	r3, r0
    b8de:	2b00      	cmp	r3, #0
    b8e0:	d001      	beq.n	b8e6 <_HandleRequest+0x3e>
			return fFilterStatus;
    b8e2:	697b      	ldr	r3, [r7, #20]
    b8e4:	e00f      	b.n	b906 <_HandleRequest+0x5e>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    b8e6:	4a0a      	ldr	r2, [pc, #40]	; (b910 <_HandleRequest+0x68>)
    b8e8:	69fb      	ldr	r3, [r7, #28]
    b8ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b8ee:	61bb      	str	r3, [r7, #24]
	if (pfnHandler == NULL) {
    b8f0:	69bb      	ldr	r3, [r7, #24]
    b8f2:	2b00      	cmp	r3, #0
    b8f4:	d101      	bne.n	b8fa <_HandleRequest+0x52>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    b8f6:	2300      	movs	r3, #0
    b8f8:	e005      	b.n	b906 <_HandleRequest+0x5e>
	}

	return pfnHandler(pSetup, piLen, ppbData);
    b8fa:	69bb      	ldr	r3, [r7, #24]
    b8fc:	68f8      	ldr	r0, [r7, #12]
    b8fe:	68b9      	ldr	r1, [r7, #8]
    b900:	687a      	ldr	r2, [r7, #4]
    b902:	4798      	blx	r3
    b904:	4603      	mov	r3, r0
}
    b906:	4618      	mov	r0, r3
    b908:	3720      	adds	r7, #32
    b90a:	46bd      	mov	sp, r7
    b90c:	bd80      	pop	{r7, pc}
    b90e:	bf00      	nop
    b910:	10000a84 	.word	0x10000a84

0000b914 <StallControlPipe>:
	Local function to stall the control endpoint
	
	@param [in]	bEPStat	Endpoint status
 */
static void StallControlPipe(U8 bEPStat)
{
    b914:	b580      	push	{r7, lr}
    b916:	b084      	sub	sp, #16
    b918:	af00      	add	r7, sp, #0
    b91a:	4603      	mov	r3, r0
    b91c:	71fb      	strb	r3, [r7, #7]
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    b91e:	2080      	movs	r0, #128	; 0x80
    b920:	2101      	movs	r1, #1
    b922:	f000 fa83 	bl	be2c <USBHwEPStall>

// dump setup packet
	DBG("STALL on [");
	pb = (U8 *)&Setup;
    b926:	4b07      	ldr	r3, [pc, #28]	; (b944 <StallControlPipe+0x30>)
    b928:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
    b92a:	2300      	movs	r3, #0
    b92c:	60fb      	str	r3, [r7, #12]
    b92e:	e002      	b.n	b936 <StallControlPipe+0x22>
    b930:	68fb      	ldr	r3, [r7, #12]
    b932:	3301      	adds	r3, #1
    b934:	60fb      	str	r3, [r7, #12]
    b936:	68fb      	ldr	r3, [r7, #12]
    b938:	2b07      	cmp	r3, #7
    b93a:	ddf9      	ble.n	b930 <StallControlPipe+0x1c>
		DBG(" %02x", *pb++);
	}
	DBG("] stat=%x\n", bEPStat);
}
    b93c:	3710      	adds	r7, #16
    b93e:	46bd      	mov	sp, r7
    b940:	bd80      	pop	{r7, pc}
    b942:	bf00      	nop
    b944:	10000a70 	.word	0x10000a70

0000b948 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    b948:	b580      	push	{r7, lr}
    b94a:	b082      	sub	sp, #8
    b94c:	af00      	add	r7, sp, #0
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    b94e:	4b0e      	ldr	r3, [pc, #56]	; (b988 <DataIn+0x40>)
    b950:	681b      	ldr	r3, [r3, #0]
    b952:	2b40      	cmp	r3, #64	; 0x40
    b954:	bfa8      	it	ge
    b956:	2340      	movge	r3, #64	; 0x40
    b958:	607b      	str	r3, [r7, #4]
	USBHwEPWrite(0x80, pbData, iChunk);
    b95a:	4b0c      	ldr	r3, [pc, #48]	; (b98c <DataIn+0x44>)
    b95c:	681a      	ldr	r2, [r3, #0]
    b95e:	687b      	ldr	r3, [r7, #4]
    b960:	2080      	movs	r0, #128	; 0x80
    b962:	4611      	mov	r1, r2
    b964:	461a      	mov	r2, r3
    b966:	f000 fa85 	bl	be74 <USBHwEPWrite>
	pbData += iChunk;
    b96a:	4b08      	ldr	r3, [pc, #32]	; (b98c <DataIn+0x44>)
    b96c:	681a      	ldr	r2, [r3, #0]
    b96e:	687b      	ldr	r3, [r7, #4]
    b970:	4413      	add	r3, r2
    b972:	4a06      	ldr	r2, [pc, #24]	; (b98c <DataIn+0x44>)
    b974:	6013      	str	r3, [r2, #0]
	iResidue -= iChunk;
    b976:	4b04      	ldr	r3, [pc, #16]	; (b988 <DataIn+0x40>)
    b978:	681a      	ldr	r2, [r3, #0]
    b97a:	687b      	ldr	r3, [r7, #4]
    b97c:	1ad3      	subs	r3, r2, r3
    b97e:	4a02      	ldr	r2, [pc, #8]	; (b988 <DataIn+0x40>)
    b980:	6013      	str	r3, [r2, #0]
}
    b982:	3708      	adds	r7, #8
    b984:	46bd      	mov	sp, r7
    b986:	bd80      	pop	{r7, pc}
    b988:	10000a7c 	.word	0x10000a7c
    b98c:	10000a78 	.word	0x10000a78

0000b990 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    b990:	b580      	push	{r7, lr}
    b992:	b084      	sub	sp, #16
    b994:	af00      	add	r7, sp, #0
    b996:	4603      	mov	r3, r0
    b998:	460a      	mov	r2, r1
    b99a:	71fb      	strb	r3, [r7, #7]
    b99c:	4613      	mov	r3, r2
    b99e:	71bb      	strb	r3, [r7, #6]
	int iChunk, iType;

	if (bEP == 0x00) {
    b9a0:	79fb      	ldrb	r3, [r7, #7]
    b9a2:	2b00      	cmp	r3, #0
    b9a4:	f040 8091 	bne.w	baca <USBHandleControlTransfer+0x13a>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    b9a8:	79bb      	ldrb	r3, [r7, #6]
    b9aa:	f003 0304 	and.w	r3, r3, #4
    b9ae:	2b00      	cmp	r3, #0
    b9b0:	d041      	beq.n	ba36 <USBHandleControlTransfer+0xa6>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    b9b2:	2000      	movs	r0, #0
    b9b4:	4949      	ldr	r1, [pc, #292]	; (badc <USBHandleControlTransfer+0x14c>)
    b9b6:	2208      	movs	r2, #8
    b9b8:	f000 faaa 	bl	bf10 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    b9bc:	4b47      	ldr	r3, [pc, #284]	; (badc <USBHandleControlTransfer+0x14c>)
    b9be:	781b      	ldrb	r3, [r3, #0]
    b9c0:	095b      	lsrs	r3, r3, #5
    b9c2:	b2db      	uxtb	r3, r3
    b9c4:	f003 0303 	and.w	r3, r3, #3
    b9c8:	60fb      	str	r3, [r7, #12]
			pbData = apbDataStore[iType];
    b9ca:	4a45      	ldr	r2, [pc, #276]	; (bae0 <USBHandleControlTransfer+0x150>)
    b9cc:	68fb      	ldr	r3, [r7, #12]
    b9ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    b9d2:	4a44      	ldr	r2, [pc, #272]	; (bae4 <USBHandleControlTransfer+0x154>)
    b9d4:	6013      	str	r3, [r2, #0]
			iResidue = Setup.wLength;
    b9d6:	4b41      	ldr	r3, [pc, #260]	; (badc <USBHandleControlTransfer+0x14c>)
    b9d8:	88db      	ldrh	r3, [r3, #6]
    b9da:	461a      	mov	r2, r3
    b9dc:	4b42      	ldr	r3, [pc, #264]	; (bae8 <USBHandleControlTransfer+0x158>)
    b9de:	601a      	str	r2, [r3, #0]
			iLen = Setup.wLength;
    b9e0:	4b3e      	ldr	r3, [pc, #248]	; (badc <USBHandleControlTransfer+0x14c>)
    b9e2:	88db      	ldrh	r3, [r3, #6]
    b9e4:	461a      	mov	r2, r3
    b9e6:	4b41      	ldr	r3, [pc, #260]	; (baec <USBHandleControlTransfer+0x15c>)
    b9e8:	601a      	str	r2, [r3, #0]

			if ((Setup.wLength == 0) ||
    b9ea:	4b3c      	ldr	r3, [pc, #240]	; (badc <USBHandleControlTransfer+0x14c>)
    b9ec:	88db      	ldrh	r3, [r3, #6]
    b9ee:	2b00      	cmp	r3, #0
    b9f0:	d007      	beq.n	ba02 <USBHandleControlTransfer+0x72>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
    b9f2:	4b3a      	ldr	r3, [pc, #232]	; (badc <USBHandleControlTransfer+0x14c>)
    b9f4:	781b      	ldrb	r3, [r3, #0]
    b9f6:	09db      	lsrs	r3, r3, #7
    b9f8:	b2db      	uxtb	r3, r3
    b9fa:	f003 0301 	and.w	r3, r3, #1
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
			pbData = apbDataStore[iType];
			iResidue = Setup.wLength;
			iLen = Setup.wLength;

			if ((Setup.wLength == 0) ||
    b9fe:	2b00      	cmp	r3, #0
    ba00:	d068      	beq.n	bad4 <USBHandleControlTransfer+0x144>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    ba02:	4836      	ldr	r0, [pc, #216]	; (badc <USBHandleControlTransfer+0x14c>)
    ba04:	4939      	ldr	r1, [pc, #228]	; (baec <USBHandleControlTransfer+0x15c>)
    ba06:	4a37      	ldr	r2, [pc, #220]	; (bae4 <USBHandleControlTransfer+0x154>)
    ba08:	f7ff ff4e 	bl	b8a8 <_HandleRequest>
    ba0c:	4603      	mov	r3, r0
    ba0e:	2b00      	cmp	r3, #0
    ba10:	d104      	bne.n	ba1c <USBHandleControlTransfer+0x8c>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
    ba12:	79bb      	ldrb	r3, [r7, #6]
    ba14:	4618      	mov	r0, r3
    ba16:	f7ff ff7d 	bl	b914 <StallControlPipe>
					return;
    ba1a:	e05b      	b.n	bad4 <USBHandleControlTransfer+0x144>
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    ba1c:	4b2f      	ldr	r3, [pc, #188]	; (badc <USBHandleControlTransfer+0x14c>)
    ba1e:	88db      	ldrh	r3, [r3, #6]
    ba20:	461a      	mov	r2, r3
    ba22:	4b32      	ldr	r3, [pc, #200]	; (baec <USBHandleControlTransfer+0x15c>)
    ba24:	681b      	ldr	r3, [r3, #0]
    ba26:	4293      	cmp	r3, r2
    ba28:	bfa8      	it	ge
    ba2a:	4613      	movge	r3, r2
    ba2c:	4a2e      	ldr	r2, [pc, #184]	; (bae8 <USBHandleControlTransfer+0x158>)
    ba2e:	6013      	str	r3, [r2, #0]
				// send first part (possibly a zero-length status message)
				DataIn();
    ba30:	f7ff ff8a 	bl	b948 <DataIn>
    ba34:	e04e      	b.n	bad4 <USBHandleControlTransfer+0x144>
			}
		}
		else {		
			if (iResidue > 0) {
    ba36:	4b2c      	ldr	r3, [pc, #176]	; (bae8 <USBHandleControlTransfer+0x158>)
    ba38:	681b      	ldr	r3, [r3, #0]
    ba3a:	2b00      	cmp	r3, #0
    ba3c:	dd3e      	ble.n	babc <USBHandleControlTransfer+0x12c>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    ba3e:	4b29      	ldr	r3, [pc, #164]	; (bae4 <USBHandleControlTransfer+0x154>)
    ba40:	681a      	ldr	r2, [r3, #0]
    ba42:	4b29      	ldr	r3, [pc, #164]	; (bae8 <USBHandleControlTransfer+0x158>)
    ba44:	681b      	ldr	r3, [r3, #0]
    ba46:	2000      	movs	r0, #0
    ba48:	4611      	mov	r1, r2
    ba4a:	461a      	mov	r2, r3
    ba4c:	f000 fa60 	bl	bf10 <USBHwEPRead>
    ba50:	60b8      	str	r0, [r7, #8]
				if (iChunk < 0) {
    ba52:	68bb      	ldr	r3, [r7, #8]
    ba54:	2b00      	cmp	r3, #0
    ba56:	da04      	bge.n	ba62 <USBHandleControlTransfer+0xd2>
					StallControlPipe(bEPStat);
    ba58:	79bb      	ldrb	r3, [r7, #6]
    ba5a:	4618      	mov	r0, r3
    ba5c:	f7ff ff5a 	bl	b914 <StallControlPipe>
					return;
    ba60:	e038      	b.n	bad4 <USBHandleControlTransfer+0x144>
				}
				pbData += iChunk;
    ba62:	4b20      	ldr	r3, [pc, #128]	; (bae4 <USBHandleControlTransfer+0x154>)
    ba64:	681a      	ldr	r2, [r3, #0]
    ba66:	68bb      	ldr	r3, [r7, #8]
    ba68:	4413      	add	r3, r2
    ba6a:	4a1e      	ldr	r2, [pc, #120]	; (bae4 <USBHandleControlTransfer+0x154>)
    ba6c:	6013      	str	r3, [r2, #0]
				iResidue -= iChunk;
    ba6e:	4b1e      	ldr	r3, [pc, #120]	; (bae8 <USBHandleControlTransfer+0x158>)
    ba70:	681a      	ldr	r2, [r3, #0]
    ba72:	68bb      	ldr	r3, [r7, #8]
    ba74:	1ad3      	subs	r3, r2, r3
    ba76:	4a1c      	ldr	r2, [pc, #112]	; (bae8 <USBHandleControlTransfer+0x158>)
    ba78:	6013      	str	r3, [r2, #0]
				if (iResidue == 0) {
    ba7a:	4b1b      	ldr	r3, [pc, #108]	; (bae8 <USBHandleControlTransfer+0x158>)
    ba7c:	681b      	ldr	r3, [r3, #0]
    ba7e:	2b00      	cmp	r3, #0
    ba80:	d128      	bne.n	bad4 <USBHandleControlTransfer+0x144>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    ba82:	4b16      	ldr	r3, [pc, #88]	; (badc <USBHandleControlTransfer+0x14c>)
    ba84:	781b      	ldrb	r3, [r3, #0]
    ba86:	095b      	lsrs	r3, r3, #5
    ba88:	b2db      	uxtb	r3, r3
    ba8a:	f003 0303 	and.w	r3, r3, #3
    ba8e:	60fb      	str	r3, [r7, #12]
					pbData = apbDataStore[iType];
    ba90:	4a13      	ldr	r2, [pc, #76]	; (bae0 <USBHandleControlTransfer+0x150>)
    ba92:	68fb      	ldr	r3, [r7, #12]
    ba94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ba98:	4a12      	ldr	r2, [pc, #72]	; (bae4 <USBHandleControlTransfer+0x154>)
    ba9a:	6013      	str	r3, [r2, #0]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    ba9c:	480f      	ldr	r0, [pc, #60]	; (badc <USBHandleControlTransfer+0x14c>)
    ba9e:	4913      	ldr	r1, [pc, #76]	; (baec <USBHandleControlTransfer+0x15c>)
    baa0:	4a10      	ldr	r2, [pc, #64]	; (bae4 <USBHandleControlTransfer+0x154>)
    baa2:	f7ff ff01 	bl	b8a8 <_HandleRequest>
    baa6:	4603      	mov	r3, r0
    baa8:	2b00      	cmp	r3, #0
    baaa:	d104      	bne.n	bab6 <USBHandleControlTransfer+0x126>
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
    baac:	79bb      	ldrb	r3, [r7, #6]
    baae:	4618      	mov	r0, r3
    bab0:	f7ff ff30 	bl	b914 <StallControlPipe>
						return;
    bab4:	e00e      	b.n	bad4 <USBHandleControlTransfer+0x144>
					}
					// send status to host
					DataIn();
    bab6:	f7ff ff47 	bl	b948 <DataIn>
    baba:	e00b      	b.n	bad4 <USBHandleControlTransfer+0x144>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    babc:	2000      	movs	r0, #0
    babe:	2100      	movs	r1, #0
    bac0:	2200      	movs	r2, #0
    bac2:	f000 fa25 	bl	bf10 <USBHwEPRead>
    bac6:	60b8      	str	r0, [r7, #8]
    bac8:	e004      	b.n	bad4 <USBHandleControlTransfer+0x144>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    baca:	79fb      	ldrb	r3, [r7, #7]
    bacc:	2b80      	cmp	r3, #128	; 0x80
    bace:	d101      	bne.n	bad4 <USBHandleControlTransfer+0x144>
		// IN transfer
		// send more data if available (possibly a 0-length packet)
		DataIn();
    bad0:	f7ff ff3a 	bl	b948 <DataIn>
	}
	else {
		ASSERT(FALSE);
	}
}
    bad4:	3710      	adds	r7, #16
    bad6:	46bd      	mov	sp, r7
    bad8:	bd80      	pop	{r7, pc}
    bada:	bf00      	nop
    badc:	10000a70 	.word	0x10000a70
    bae0:	10000a94 	.word	0x10000a94
    bae4:	10000a78 	.word	0x10000a78
    bae8:	10000a7c 	.word	0x10000a7c
    baec:	10000a80 	.word	0x10000a80

0000baf0 <USBRegisterRequestHandler>:
	@param [in]	iType			Type of request, e.g. REQTYPE_TYPE_STANDARD
	@param [in]	*pfnHandler		Callback function pointer
	@param [in]	*pbDataStore	Data storage area for this type of request
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
    baf0:	b480      	push	{r7}
    baf2:	b085      	sub	sp, #20
    baf4:	af00      	add	r7, sp, #0
    baf6:	60f8      	str	r0, [r7, #12]
    baf8:	60b9      	str	r1, [r7, #8]
    bafa:	607a      	str	r2, [r7, #4]
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    bafc:	4907      	ldr	r1, [pc, #28]	; (bb1c <USBRegisterRequestHandler+0x2c>)
    bafe:	68fb      	ldr	r3, [r7, #12]
    bb00:	68ba      	ldr	r2, [r7, #8]
    bb02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	apbDataStore[iType] = pbDataStore;
    bb06:	4906      	ldr	r1, [pc, #24]	; (bb20 <USBRegisterRequestHandler+0x30>)
    bb08:	68fb      	ldr	r3, [r7, #12]
    bb0a:	687a      	ldr	r2, [r7, #4]
    bb0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    bb10:	3714      	adds	r7, #20
    bb12:	46bd      	mov	sp, r7
    bb14:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb18:	4770      	bx	lr
    bb1a:	bf00      	nop
    bb1c:	10000a84 	.word	0x10000a84
    bb20:	10000a94 	.word	0x10000a94

0000bb24 <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    bb24:	b480      	push	{r7}
    bb26:	b083      	sub	sp, #12
    bb28:	af00      	add	r7, sp, #0
    bb2a:	4603      	mov	r3, r0
    bb2c:	71fb      	strb	r3, [r7, #7]
	if (bDevStatus & DEV_STATUS_RESET) {
		DBG("\n!");
	}
}
    bb2e:	370c      	adds	r7, #12
    bb30:	46bd      	mov	sp, r7
    bb32:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb36:	4770      	bx	lr

0000bb38 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    bb38:	b580      	push	{r7, lr}
    bb3a:	af00      	add	r7, sp, #0
	// init hardware
	USBHwInit();
    bb3c:	f000 fb2a 	bl	c194 <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    bb40:	480d      	ldr	r0, [pc, #52]	; (bb78 <USBInit+0x40>)
    bb42:	f000 f913 	bl	bd6c <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    bb46:	2000      	movs	r0, #0
    bb48:	490c      	ldr	r1, [pc, #48]	; (bb7c <USBInit+0x44>)
    bb4a:	f000 f8dd 	bl	bd08 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    bb4e:	2080      	movs	r0, #128	; 0x80
    bb50:	490a      	ldr	r1, [pc, #40]	; (bb7c <USBInit+0x44>)
    bb52:	f000 f8d9 	bl	bd08 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    bb56:	2000      	movs	r0, #0
    bb58:	2140      	movs	r1, #64	; 0x40
    bb5a:	f000 f8b7 	bl	bccc <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    bb5e:	2080      	movs	r0, #128	; 0x80
    bb60:	2140      	movs	r1, #64	; 0x40
    bb62:	f000 f8b3 	bl	bccc <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    bb66:	2000      	movs	r0, #0
    bb68:	4905      	ldr	r1, [pc, #20]	; (bb80 <USBInit+0x48>)
    bb6a:	4a06      	ldr	r2, [pc, #24]	; (bb84 <USBInit+0x4c>)
    bb6c:	f7ff ffc0 	bl	baf0 <USBRegisterRequestHandler>

	return TRUE;
    bb70:	2301      	movs	r3, #1
}
    bb72:	4618      	mov	r0, r3
    bb74:	bd80      	pop	{r7, pc}
    bb76:	bf00      	nop
    bb78:	0000bb25 	.word	0x0000bb25
    bb7c:	0000b991 	.word	0x0000b991
    bb80:	0000c7cd 	.word	0x0000c7cd
    bb84:	10000aa4 	.word	0x10000aa4

0000bb88 <Wait4DevInt>:
    Local function to wait for a device interrupt (and clear it)
        
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    bb88:	b480      	push	{r7}
    bb8a:	b083      	sub	sp, #12
    bb8c:	af00      	add	r7, sp, #0
    bb8e:	6078      	str	r0, [r7, #4]
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    bb90:	bf00      	nop
    bb92:	4b07      	ldr	r3, [pc, #28]	; (bbb0 <Wait4DevInt+0x28>)
    bb94:	681a      	ldr	r2, [r3, #0]
    bb96:	687b      	ldr	r3, [r7, #4]
    bb98:	401a      	ands	r2, r3
    bb9a:	687b      	ldr	r3, [r7, #4]
    bb9c:	429a      	cmp	r2, r3
    bb9e:	d1f8      	bne.n	bb92 <Wait4DevInt+0xa>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    bba0:	4a04      	ldr	r2, [pc, #16]	; (bbb4 <Wait4DevInt+0x2c>)
    bba2:	687b      	ldr	r3, [r7, #4]
    bba4:	6013      	str	r3, [r2, #0]
}
    bba6:	370c      	adds	r7, #12
    bba8:	46bd      	mov	sp, r7
    bbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    bbae:	4770      	bx	lr
    bbb0:	5000c200 	.word	0x5000c200
    bbb4:	5000c208 	.word	0x5000c208

0000bbb8 <USBHwCmd>:
    Local function to send a command to the USB protocol engine
        
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    bbb8:	b580      	push	{r7, lr}
    bbba:	b082      	sub	sp, #8
    bbbc:	af00      	add	r7, sp, #0
    bbbe:	4603      	mov	r3, r0
    bbc0:	71fb      	strb	r3, [r7, #7]
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    bbc2:	4b07      	ldr	r3, [pc, #28]	; (bbe0 <USBHwCmd+0x28>)
    bbc4:	2230      	movs	r2, #48	; 0x30
    bbc6:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    bbc8:	4a06      	ldr	r2, [pc, #24]	; (bbe4 <USBHwCmd+0x2c>)
    bbca:	79fb      	ldrb	r3, [r7, #7]
    bbcc:	041b      	lsls	r3, r3, #16
    bbce:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    bbd2:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    bbd4:	2010      	movs	r0, #16
    bbd6:	f7ff ffd7 	bl	bb88 <Wait4DevInt>
}
    bbda:	3708      	adds	r7, #8
    bbdc:	46bd      	mov	sp, r7
    bbde:	bd80      	pop	{r7, pc}
    bbe0:	5000c208 	.word	0x5000c208
    bbe4:	5000c210 	.word	0x5000c210

0000bbe8 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    bbe8:	b580      	push	{r7, lr}
    bbea:	b082      	sub	sp, #8
    bbec:	af00      	add	r7, sp, #0
    bbee:	4603      	mov	r3, r0
    bbf0:	460a      	mov	r2, r1
    bbf2:	71fb      	strb	r3, [r7, #7]
    bbf4:	4613      	mov	r3, r2
    bbf6:	80bb      	strh	r3, [r7, #4]
    // write command code
    USBHwCmd(bCmd);
    bbf8:	79fb      	ldrb	r3, [r7, #7]
    bbfa:	4618      	mov	r0, r3
    bbfc:	f7ff ffdc 	bl	bbb8 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    bc00:	4a05      	ldr	r2, [pc, #20]	; (bc18 <USBHwCmdWrite+0x30>)
    bc02:	88bb      	ldrh	r3, [r7, #4]
    bc04:	041b      	lsls	r3, r3, #16
    bc06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bc0a:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    bc0c:	2010      	movs	r0, #16
    bc0e:	f7ff ffbb 	bl	bb88 <Wait4DevInt>
}
    bc12:	3708      	adds	r7, #8
    bc14:	46bd      	mov	sp, r7
    bc16:	bd80      	pop	{r7, pc}
    bc18:	5000c210 	.word	0x5000c210

0000bc1c <USBHwCmdRead>:
    @param [in] bCmd        Command to send

    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    bc1c:	b580      	push	{r7, lr}
    bc1e:	b082      	sub	sp, #8
    bc20:	af00      	add	r7, sp, #0
    bc22:	4603      	mov	r3, r0
    bc24:	71fb      	strb	r3, [r7, #7]
    // write command code
    USBHwCmd(bCmd);
    bc26:	79fb      	ldrb	r3, [r7, #7]
    bc28:	4618      	mov	r0, r3
    bc2a:	f7ff ffc5 	bl	bbb8 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    bc2e:	4a08      	ldr	r2, [pc, #32]	; (bc50 <USBHwCmdRead+0x34>)
    bc30:	79fb      	ldrb	r3, [r7, #7]
    bc32:	041b      	lsls	r3, r3, #16
    bc34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bc38:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CDFULL);
    bc3a:	2020      	movs	r0, #32
    bc3c:	f7ff ffa4 	bl	bb88 <Wait4DevInt>
    return USBCmdData;
    bc40:	4b04      	ldr	r3, [pc, #16]	; (bc54 <USBHwCmdRead+0x38>)
    bc42:	681b      	ldr	r3, [r3, #0]
    bc44:	b2db      	uxtb	r3, r3
}
    bc46:	4618      	mov	r0, r3
    bc48:	3708      	adds	r7, #8
    bc4a:	46bd      	mov	sp, r7
    bc4c:	bd80      	pop	{r7, pc}
    bc4e:	bf00      	nop
    bc50:	5000c210 	.word	0x5000c210
    bc54:	5000c214 	.word	0x5000c214

0000bc58 <USBHwEPRealize>:
        
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    bc58:	b580      	push	{r7, lr}
    bc5a:	b082      	sub	sp, #8
    bc5c:	af00      	add	r7, sp, #0
    bc5e:	6078      	str	r0, [r7, #4]
    bc60:	460b      	mov	r3, r1
    bc62:	807b      	strh	r3, [r7, #2]
    USBReEp |= (1 << idx);
    bc64:	490a      	ldr	r1, [pc, #40]	; (bc90 <USBHwEPRealize+0x38>)
    bc66:	4b0a      	ldr	r3, [pc, #40]	; (bc90 <USBHwEPRealize+0x38>)
    bc68:	681b      	ldr	r3, [r3, #0]
    bc6a:	2001      	movs	r0, #1
    bc6c:	687a      	ldr	r2, [r7, #4]
    bc6e:	fa00 f202 	lsl.w	r2, r0, r2
    bc72:	4313      	orrs	r3, r2
    bc74:	600b      	str	r3, [r1, #0]
#ifdef LPC17xx
    USBEpIn = idx;
    bc76:	4a07      	ldr	r2, [pc, #28]	; (bc94 <USBHwEPRealize+0x3c>)
    bc78:	687b      	ldr	r3, [r7, #4]
    bc7a:	6013      	str	r3, [r2, #0]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    bc7c:	4a06      	ldr	r2, [pc, #24]	; (bc98 <USBHwEPRealize+0x40>)
    bc7e:	887b      	ldrh	r3, [r7, #2]
    bc80:	6013      	str	r3, [r2, #0]
    Wait4DevInt(EP_RLZED);
    bc82:	f44f 7080 	mov.w	r0, #256	; 0x100
    bc86:	f7ff ff7f 	bl	bb88 <Wait4DevInt>
}
    bc8a:	3708      	adds	r7, #8
    bc8c:	46bd      	mov	sp, r7
    bc8e:	bd80      	pop	{r7, pc}
    bc90:	5000c244 	.word	0x5000c244
    bc94:	5000c248 	.word	0x5000c248
    bc98:	5000c24c 	.word	0x5000c24c

0000bc9c <USBHwEPEnable>:
        
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    bc9c:	b580      	push	{r7, lr}
    bc9e:	b082      	sub	sp, #8
    bca0:	af00      	add	r7, sp, #0
    bca2:	6078      	str	r0, [r7, #4]
    bca4:	6039      	str	r1, [r7, #0]
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    bca6:	687b      	ldr	r3, [r7, #4]
    bca8:	b2db      	uxtb	r3, r3
    bcaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    bcae:	b2db      	uxtb	r3, r3
    bcb0:	b2da      	uxtb	r2, r3
    bcb2:	683b      	ldr	r3, [r7, #0]
    bcb4:	2b00      	cmp	r3, #0
    bcb6:	d001      	beq.n	bcbc <USBHwEPEnable+0x20>
    bcb8:	2300      	movs	r3, #0
    bcba:	e000      	b.n	bcbe <USBHwEPEnable+0x22>
    bcbc:	2320      	movs	r3, #32
    bcbe:	4610      	mov	r0, r2
    bcc0:	4619      	mov	r1, r3
    bcc2:	f7ff ff91 	bl	bbe8 <USBHwCmdWrite>
}
    bcc6:	3708      	adds	r7, #8
    bcc8:	46bd      	mov	sp, r7
    bcca:	bd80      	pop	{r7, pc}

0000bccc <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    bccc:	b580      	push	{r7, lr}
    bcce:	b084      	sub	sp, #16
    bcd0:	af00      	add	r7, sp, #0
    bcd2:	4603      	mov	r3, r0
    bcd4:	460a      	mov	r2, r1
    bcd6:	71fb      	strb	r3, [r7, #7]
    bcd8:	4613      	mov	r3, r2
    bcda:	80bb      	strh	r3, [r7, #4]
    int idx;
    
    idx = EP2IDX(bEP);
    bcdc:	79fb      	ldrb	r3, [r7, #7]
    bcde:	f003 030f 	and.w	r3, r3, #15
    bce2:	005b      	lsls	r3, r3, #1
    bce4:	79fa      	ldrb	r2, [r7, #7]
    bce6:	09d2      	lsrs	r2, r2, #7
    bce8:	b2d2      	uxtb	r2, r2
    bcea:	4313      	orrs	r3, r2
    bcec:	60fb      	str	r3, [r7, #12]
    
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);
    bcee:	88bb      	ldrh	r3, [r7, #4]
    bcf0:	68f8      	ldr	r0, [r7, #12]
    bcf2:	4619      	mov	r1, r3
    bcf4:	f7ff ffb0 	bl	bc58 <USBHwEPRealize>

    // enable EP
    USBHwEPEnable(idx, TRUE);
    bcf8:	68f8      	ldr	r0, [r7, #12]
    bcfa:	2101      	movs	r1, #1
    bcfc:	f7ff ffce 	bl	bc9c <USBHwEPEnable>
}
    bd00:	3710      	adds	r7, #16
    bd02:	46bd      	mov	sp, r7
    bd04:	bd80      	pop	{r7, pc}
    bd06:	bf00      	nop

0000bd08 <USBHwRegisterEPIntHandler>:
        
    @param [in] bEP             Endpoint number
    @param [in] pfnHandler      Callback function
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    bd08:	b480      	push	{r7}
    bd0a:	b085      	sub	sp, #20
    bd0c:	af00      	add	r7, sp, #0
    bd0e:	4603      	mov	r3, r0
    bd10:	6039      	str	r1, [r7, #0]
    bd12:	71fb      	strb	r3, [r7, #7]
    int idx;
    
    idx = EP2IDX(bEP);
    bd14:	79fb      	ldrb	r3, [r7, #7]
    bd16:	f003 030f 	and.w	r3, r3, #15
    bd1a:	005b      	lsls	r3, r3, #1
    bd1c:	79fa      	ldrb	r2, [r7, #7]
    bd1e:	09d2      	lsrs	r2, r2, #7
    bd20:	b2d2      	uxtb	r2, r2
    bd22:	4313      	orrs	r3, r2
    bd24:	60fb      	str	r3, [r7, #12]

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    bd26:	68fb      	ldr	r3, [r7, #12]
    bd28:	0fda      	lsrs	r2, r3, #31
    bd2a:	4413      	add	r3, r2
    bd2c:	105b      	asrs	r3, r3, #1
    bd2e:	4619      	mov	r1, r3
    bd30:	4a0b      	ldr	r2, [pc, #44]	; (bd60 <USBHwRegisterEPIntHandler+0x58>)
    bd32:	683b      	ldr	r3, [r7, #0]
    bd34:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    bd38:	490a      	ldr	r1, [pc, #40]	; (bd64 <USBHwRegisterEPIntHandler+0x5c>)
    bd3a:	4b0a      	ldr	r3, [pc, #40]	; (bd64 <USBHwRegisterEPIntHandler+0x5c>)
    bd3c:	681b      	ldr	r3, [r3, #0]
    bd3e:	2001      	movs	r0, #1
    bd40:	68fa      	ldr	r2, [r7, #12]
    bd42:	fa00 f202 	lsl.w	r2, r0, r2
    bd46:	4313      	orrs	r3, r2
    bd48:	600b      	str	r3, [r1, #0]
    USBDevIntEn |= EP_SLOW;
    bd4a:	4a07      	ldr	r2, [pc, #28]	; (bd68 <USBHwRegisterEPIntHandler+0x60>)
    bd4c:	4b06      	ldr	r3, [pc, #24]	; (bd68 <USBHwRegisterEPIntHandler+0x60>)
    bd4e:	681b      	ldr	r3, [r3, #0]
    bd50:	f043 0304 	orr.w	r3, r3, #4
    bd54:	6013      	str	r3, [r2, #0]
    
    DBG("Registered handler for EP 0x%x\n", bEP);
}
    bd56:	3714      	adds	r7, #20
    bd58:	46bd      	mov	sp, r7
    bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd5e:	4770      	bx	lr
    bd60:	10000ab0 	.word	0x10000ab0
    bd64:	5000c234 	.word	0x5000c234
    bd68:	5000c204 	.word	0x5000c204

0000bd6c <USBHwRegisterDevIntHandler>:
    Registers an device status callback
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    bd6c:	b480      	push	{r7}
    bd6e:	b083      	sub	sp, #12
    bd70:	af00      	add	r7, sp, #0
    bd72:	6078      	str	r0, [r7, #4]
    _pfnDevIntHandler = pfnHandler;
    bd74:	4a06      	ldr	r2, [pc, #24]	; (bd90 <USBHwRegisterDevIntHandler+0x24>)
    bd76:	687b      	ldr	r3, [r7, #4]
    bd78:	6013      	str	r3, [r2, #0]
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    bd7a:	4a06      	ldr	r2, [pc, #24]	; (bd94 <USBHwRegisterDevIntHandler+0x28>)
    bd7c:	4b05      	ldr	r3, [pc, #20]	; (bd94 <USBHwRegisterDevIntHandler+0x28>)
    bd7e:	681b      	ldr	r3, [r3, #0]
    bd80:	f043 0308 	orr.w	r3, r3, #8
    bd84:	6013      	str	r3, [r2, #0]

    DBG("Registered handler for device status\n");
}
    bd86:	370c      	adds	r7, #12
    bd88:	46bd      	mov	sp, r7
    bd8a:	f85d 7b04 	ldr.w	r7, [sp], #4
    bd8e:	4770      	bx	lr
    bd90:	10000aac 	.word	0x10000aac
    bd94:	5000c204 	.word	0x5000c204

0000bd98 <USBHwSetAddress>:
    Sets the USB address.
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    bd98:	b580      	push	{r7, lr}
    bd9a:	b082      	sub	sp, #8
    bd9c:	af00      	add	r7, sp, #0
    bd9e:	4603      	mov	r3, r0
    bda0:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    bda2:	79fb      	ldrb	r3, [r7, #7]
    bda4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bda8:	b2db      	uxtb	r3, r3
    bdaa:	b29b      	uxth	r3, r3
    bdac:	20d0      	movs	r0, #208	; 0xd0
    bdae:	4619      	mov	r1, r3
    bdb0:	f7ff ff1a 	bl	bbe8 <USBHwCmdWrite>
}
    bdb4:	3708      	adds	r7, #8
    bdb6:	46bd      	mov	sp, r7
    bdb8:	bd80      	pop	{r7, pc}
    bdba:	bf00      	nop

0000bdbc <USBHwConnect>:
    Connects or disconnects from the USB bus
        
    @param [in] fConnect    If TRUE, connect, otherwise disconnect
 */
void USBHwConnect(BOOL fConnect)
{
    bdbc:	b580      	push	{r7, lr}
    bdbe:	b082      	sub	sp, #8
    bdc0:	af00      	add	r7, sp, #0
    bdc2:	6078      	str	r0, [r7, #4]
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    bdc4:	687b      	ldr	r3, [r7, #4]
    bdc6:	2b00      	cmp	r3, #0
    bdc8:	bf14      	ite	ne
    bdca:	2301      	movne	r3, #1
    bdcc:	2300      	moveq	r3, #0
    bdce:	b2db      	uxtb	r3, r3
    bdd0:	b29b      	uxth	r3, r3
    bdd2:	20fe      	movs	r0, #254	; 0xfe
    bdd4:	4619      	mov	r1, r3
    bdd6:	f7ff ff07 	bl	bbe8 <USBHwCmdWrite>
}
    bdda:	3708      	adds	r7, #8
    bddc:	46bd      	mov	sp, r7
    bdde:	bd80      	pop	{r7, pc}

0000bde0 <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    bde0:	b580      	push	{r7, lr}
    bde2:	b082      	sub	sp, #8
    bde4:	af00      	add	r7, sp, #0
    bde6:	4603      	mov	r3, r0
    bde8:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    bdea:	79fb      	ldrb	r3, [r7, #7]
    bdec:	b29b      	uxth	r3, r3
    bdee:	20f3      	movs	r0, #243	; 0xf3
    bdf0:	4619      	mov	r1, r3
    bdf2:	f7ff fef9 	bl	bbe8 <USBHwCmdWrite>
}
    bdf6:	3708      	adds	r7, #8
    bdf8:	46bd      	mov	sp, r7
    bdfa:	bd80      	pop	{r7, pc}

0000bdfc <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    bdfc:	b580      	push	{r7, lr}
    bdfe:	b084      	sub	sp, #16
    be00:	af00      	add	r7, sp, #0
    be02:	4603      	mov	r3, r0
    be04:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    be06:	79fb      	ldrb	r3, [r7, #7]
    be08:	f003 030f 	and.w	r3, r3, #15
    be0c:	005b      	lsls	r3, r3, #1
    be0e:	79fa      	ldrb	r2, [r7, #7]
    be10:	09d2      	lsrs	r2, r2, #7
    be12:	b2d2      	uxtb	r2, r2
    be14:	4313      	orrs	r3, r2
    be16:	60fb      	str	r3, [r7, #12]

    return USBHwCmdRead(CMD_EP_SELECT | idx);
    be18:	68fb      	ldr	r3, [r7, #12]
    be1a:	b2db      	uxtb	r3, r3
    be1c:	4618      	mov	r0, r3
    be1e:	f7ff fefd 	bl	bc1c <USBHwCmdRead>
    be22:	4603      	mov	r3, r0
}
    be24:	4618      	mov	r0, r3
    be26:	3710      	adds	r7, #16
    be28:	46bd      	mov	sp, r7
    be2a:	bd80      	pop	{r7, pc}

0000be2c <USBHwEPStall>:
        
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    be2c:	b580      	push	{r7, lr}
    be2e:	b084      	sub	sp, #16
    be30:	af00      	add	r7, sp, #0
    be32:	4603      	mov	r3, r0
    be34:	6039      	str	r1, [r7, #0]
    be36:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    be38:	79fb      	ldrb	r3, [r7, #7]
    be3a:	f003 030f 	and.w	r3, r3, #15
    be3e:	005b      	lsls	r3, r3, #1
    be40:	79fa      	ldrb	r2, [r7, #7]
    be42:	09d2      	lsrs	r2, r2, #7
    be44:	b2d2      	uxtb	r2, r2
    be46:	4313      	orrs	r3, r2
    be48:	60fb      	str	r3, [r7, #12]

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    be4a:	68fb      	ldr	r3, [r7, #12]
    be4c:	b2db      	uxtb	r3, r3
    be4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    be52:	b2db      	uxtb	r3, r3
    be54:	b2da      	uxtb	r2, r3
    be56:	683b      	ldr	r3, [r7, #0]
    be58:	2b00      	cmp	r3, #0
    be5a:	bf14      	ite	ne
    be5c:	2301      	movne	r3, #1
    be5e:	2300      	moveq	r3, #0
    be60:	b2db      	uxtb	r3, r3
    be62:	b29b      	uxth	r3, r3
    be64:	4610      	mov	r0, r2
    be66:	4619      	mov	r1, r3
    be68:	f7ff febe 	bl	bbe8 <USBHwCmdWrite>
}
    be6c:	3710      	adds	r7, #16
    be6e:	46bd      	mov	sp, r7
    be70:	bd80      	pop	{r7, pc}
    be72:	bf00      	nop

0000be74 <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    be74:	b580      	push	{r7, lr}
    be76:	b086      	sub	sp, #24
    be78:	af00      	add	r7, sp, #0
    be7a:	4603      	mov	r3, r0
    be7c:	60b9      	str	r1, [r7, #8]
    be7e:	607a      	str	r2, [r7, #4]
    be80:	73fb      	strb	r3, [r7, #15]
    U32 idx;
    
    idx = EP2IDX(bEP);
    be82:	7bfb      	ldrb	r3, [r7, #15]
    be84:	f003 030f 	and.w	r3, r3, #15
    be88:	005b      	lsls	r3, r3, #1
    be8a:	7bfa      	ldrb	r2, [r7, #15]
    be8c:	09d2      	lsrs	r2, r2, #7
    be8e:	b2d2      	uxtb	r2, r2
    be90:	4313      	orrs	r3, r2
    be92:	617b      	str	r3, [r7, #20]
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    be94:	4a1b      	ldr	r2, [pc, #108]	; (bf04 <USBHwEPWrite+0x90>)
    be96:	7bfb      	ldrb	r3, [r7, #15]
    be98:	f003 030f 	and.w	r3, r3, #15
    be9c:	009b      	lsls	r3, r3, #2
    be9e:	f043 0302 	orr.w	r3, r3, #2
    bea2:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    bea4:	4a18      	ldr	r2, [pc, #96]	; (bf08 <USBHwEPWrite+0x94>)
    bea6:	687b      	ldr	r3, [r7, #4]
    bea8:	6013      	str	r3, [r2, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    beaa:	e015      	b.n	bed8 <USBHwEPWrite+0x64>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    beac:	4917      	ldr	r1, [pc, #92]	; (bf0c <USBHwEPWrite+0x98>)
    beae:	68bb      	ldr	r3, [r7, #8]
    beb0:	3303      	adds	r3, #3
    beb2:	781b      	ldrb	r3, [r3, #0]
    beb4:	061a      	lsls	r2, r3, #24
    beb6:	68bb      	ldr	r3, [r7, #8]
    beb8:	3302      	adds	r3, #2
    beba:	781b      	ldrb	r3, [r3, #0]
    bebc:	041b      	lsls	r3, r3, #16
    bebe:	431a      	orrs	r2, r3
    bec0:	68bb      	ldr	r3, [r7, #8]
    bec2:	3301      	adds	r3, #1
    bec4:	781b      	ldrb	r3, [r3, #0]
    bec6:	021b      	lsls	r3, r3, #8
    bec8:	4313      	orrs	r3, r2
    beca:	68ba      	ldr	r2, [r7, #8]
    becc:	7812      	ldrb	r2, [r2, #0]
    bece:	4313      	orrs	r3, r2
    bed0:	600b      	str	r3, [r1, #0]
        pbBuf += 4;
    bed2:	68bb      	ldr	r3, [r7, #8]
    bed4:	3304      	adds	r3, #4
    bed6:	60bb      	str	r3, [r7, #8]
    
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
    bed8:	4b0a      	ldr	r3, [pc, #40]	; (bf04 <USBHwEPWrite+0x90>)
    beda:	681b      	ldr	r3, [r3, #0]
    bedc:	f003 0302 	and.w	r3, r3, #2
    bee0:	2b00      	cmp	r3, #0
    bee2:	d1e3      	bne.n	beac <USBHwEPWrite+0x38>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
        pbBuf += 4;
    }

    USBCtrl = 0;
    bee4:	4b07      	ldr	r3, [pc, #28]	; (bf04 <USBHwEPWrite+0x90>)
    bee6:	2200      	movs	r2, #0
    bee8:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    beea:	697b      	ldr	r3, [r7, #20]
    beec:	b2db      	uxtb	r3, r3
    beee:	4618      	mov	r0, r3
    bef0:	f7ff fe62 	bl	bbb8 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    bef4:	20fa      	movs	r0, #250	; 0xfa
    bef6:	f7ff fe5f 	bl	bbb8 <USBHwCmd>
    
    return iLen;
    befa:	687b      	ldr	r3, [r7, #4]
}
    befc:	4618      	mov	r0, r3
    befe:	3718      	adds	r7, #24
    bf00:	46bd      	mov	sp, r7
    bf02:	bd80      	pop	{r7, pc}
    bf04:	5000c228 	.word	0x5000c228
    bf08:	5000c224 	.word	0x5000c224
    bf0c:	5000c21c 	.word	0x5000c21c

0000bf10 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    bf10:	b580      	push	{r7, lr}
    bf12:	b088      	sub	sp, #32
    bf14:	af00      	add	r7, sp, #0
    bf16:	4603      	mov	r3, r0
    bf18:	60b9      	str	r1, [r7, #8]
    bf1a:	607a      	str	r2, [r7, #4]
    bf1c:	73fb      	strb	r3, [r7, #15]
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    bf1e:	7bfb      	ldrb	r3, [r7, #15]
    bf20:	f003 030f 	and.w	r3, r3, #15
    bf24:	005b      	lsls	r3, r3, #1
    bf26:	7bfa      	ldrb	r2, [r7, #15]
    bf28:	09d2      	lsrs	r2, r2, #7
    bf2a:	b2d2      	uxtb	r2, r2
    bf2c:	4313      	orrs	r3, r2
    bf2e:	617b      	str	r3, [r7, #20]
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    bf30:	4a27      	ldr	r2, [pc, #156]	; (bfd0 <USBHwEPRead+0xc0>)
    bf32:	7bfb      	ldrb	r3, [r7, #15]
    bf34:	f003 030f 	and.w	r3, r3, #15
    bf38:	009b      	lsls	r3, r3, #2
    bf3a:	f043 0301 	orr.w	r3, r3, #1
    bf3e:	6013      	str	r3, [r2, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    bf40:	4b24      	ldr	r3, [pc, #144]	; (bfd4 <USBHwEPRead+0xc4>)
    bf42:	681b      	ldr	r3, [r3, #0]
    bf44:	613b      	str	r3, [r7, #16]
    } while ((dwLen & PKT_RDY) == 0);
    bf46:	693b      	ldr	r3, [r7, #16]
    bf48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    bf4c:	2b00      	cmp	r3, #0
    bf4e:	d0f7      	beq.n	bf40 <USBHwEPRead+0x30>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    bf50:	693b      	ldr	r3, [r7, #16]
    bf52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    bf56:	2b00      	cmp	r3, #0
    bf58:	d102      	bne.n	bf60 <USBHwEPRead+0x50>
        return -1;
    bf5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    bf5e:	e033      	b.n	bfc8 <USBHwEPRead+0xb8>
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    bf60:	693b      	ldr	r3, [r7, #16]
    bf62:	f3c3 0309 	ubfx	r3, r3, #0, #10
    bf66:	613b      	str	r3, [r7, #16]
    
    // get data
    dwData = 0;
    bf68:	2300      	movs	r3, #0
    bf6a:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < dwLen; i++) {
    bf6c:	2300      	movs	r3, #0
    bf6e:	61fb      	str	r3, [r7, #28]
    bf70:	e01a      	b.n	bfa8 <USBHwEPRead+0x98>
        if ((i % 4) == 0) {
    bf72:	69fb      	ldr	r3, [r7, #28]
    bf74:	f003 0303 	and.w	r3, r3, #3
    bf78:	2b00      	cmp	r3, #0
    bf7a:	d102      	bne.n	bf82 <USBHwEPRead+0x72>
            dwData = USBRxData;
    bf7c:	4b16      	ldr	r3, [pc, #88]	; (bfd8 <USBHwEPRead+0xc8>)
    bf7e:	681b      	ldr	r3, [r3, #0]
    bf80:	61bb      	str	r3, [r7, #24]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    bf82:	68bb      	ldr	r3, [r7, #8]
    bf84:	2b00      	cmp	r3, #0
    bf86:	d009      	beq.n	bf9c <USBHwEPRead+0x8c>
    bf88:	69fa      	ldr	r2, [r7, #28]
    bf8a:	687b      	ldr	r3, [r7, #4]
    bf8c:	429a      	cmp	r2, r3
    bf8e:	d205      	bcs.n	bf9c <USBHwEPRead+0x8c>
            pbBuf[i] = dwData & 0xFF;
    bf90:	68ba      	ldr	r2, [r7, #8]
    bf92:	69fb      	ldr	r3, [r7, #28]
    bf94:	4413      	add	r3, r2
    bf96:	69ba      	ldr	r2, [r7, #24]
    bf98:	b2d2      	uxtb	r2, r2
    bf9a:	701a      	strb	r2, [r3, #0]
        }
        dwData >>= 8;
    bf9c:	69bb      	ldr	r3, [r7, #24]
    bf9e:	0a1b      	lsrs	r3, r3, #8
    bfa0:	61bb      	str	r3, [r7, #24]
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    bfa2:	69fb      	ldr	r3, [r7, #28]
    bfa4:	3301      	adds	r3, #1
    bfa6:	61fb      	str	r3, [r7, #28]
    bfa8:	69fa      	ldr	r2, [r7, #28]
    bfaa:	693b      	ldr	r3, [r7, #16]
    bfac:	429a      	cmp	r2, r3
    bfae:	d3e0      	bcc.n	bf72 <USBHwEPRead+0x62>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    bfb0:	4b07      	ldr	r3, [pc, #28]	; (bfd0 <USBHwEPRead+0xc0>)
    bfb2:	2200      	movs	r2, #0
    bfb4:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    bfb6:	697b      	ldr	r3, [r7, #20]
    bfb8:	b2db      	uxtb	r3, r3
    bfba:	4618      	mov	r0, r3
    bfbc:	f7ff fdfc 	bl	bbb8 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    bfc0:	20f2      	movs	r0, #242	; 0xf2
    bfc2:	f7ff fdf9 	bl	bbb8 <USBHwCmd>
    
    return dwLen;
    bfc6:	693b      	ldr	r3, [r7, #16]
}
    bfc8:	4618      	mov	r0, r3
    bfca:	3720      	adds	r7, #32
    bfcc:	46bd      	mov	sp, r7
    bfce:	bd80      	pop	{r7, pc}
    bfd0:	5000c228 	.word	0x5000c228
    bfd4:	5000c220 	.word	0x5000c220
    bfd8:	5000c218 	.word	0x5000c218

0000bfdc <USBHwConfigDevice>:
    'configured' bit is set in the device status register.
        
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    bfdc:	b580      	push	{r7, lr}
    bfde:	b082      	sub	sp, #8
    bfe0:	af00      	add	r7, sp, #0
    bfe2:	6078      	str	r0, [r7, #4]
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    bfe4:	687b      	ldr	r3, [r7, #4]
    bfe6:	2b00      	cmp	r3, #0
    bfe8:	bf14      	ite	ne
    bfea:	2301      	movne	r3, #1
    bfec:	2300      	moveq	r3, #0
    bfee:	b2db      	uxtb	r3, r3
    bff0:	b29b      	uxth	r3, r3
    bff2:	20d8      	movs	r0, #216	; 0xd8
    bff4:	4619      	mov	r1, r3
    bff6:	f7ff fdf7 	bl	bbe8 <USBHwCmdWrite>
}
    bffa:	3708      	adds	r7, #8
    bffc:	46bd      	mov	sp, r7
    bffe:	bd80      	pop	{r7, pc}

0000c000 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    c000:	b580      	push	{r7, lr}
    c002:	b086      	sub	sp, #24
    c004:	af00      	add	r7, sp, #0

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    c006:	4b5b      	ldr	r3, [pc, #364]	; (c174 <USBHwISR+0x174>)
    c008:	681b      	ldr	r3, [r3, #0]
    c00a:	613b      	str	r3, [r7, #16]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    c00c:	693b      	ldr	r3, [r7, #16]
    c00e:	f003 0301 	and.w	r3, r3, #1
    c012:	2b00      	cmp	r3, #0
    c014:	d010      	beq.n	c038 <USBHwISR+0x38>
        // clear int
        USBDevIntClr = FRAME;
    c016:	4b58      	ldr	r3, [pc, #352]	; (c178 <USBHwISR+0x178>)
    c018:	2201      	movs	r2, #1
    c01a:	601a      	str	r2, [r3, #0]
        // call handler
        if (_pfnFrameHandler != NULL) {
    c01c:	4b57      	ldr	r3, [pc, #348]	; (c17c <USBHwISR+0x17c>)
    c01e:	681b      	ldr	r3, [r3, #0]
    c020:	2b00      	cmp	r3, #0
    c022:	d009      	beq.n	c038 <USBHwISR+0x38>
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
    c024:	20f5      	movs	r0, #245	; 0xf5
    c026:	f7ff fdf9 	bl	bc1c <USBHwCmdRead>
    c02a:	4603      	mov	r3, r0
    c02c:	81fb      	strh	r3, [r7, #14]
            _pfnFrameHandler(wFrame);
    c02e:	4b53      	ldr	r3, [pc, #332]	; (c17c <USBHwISR+0x17c>)
    c030:	681b      	ldr	r3, [r3, #0]
    c032:	89fa      	ldrh	r2, [r7, #14]
    c034:	4610      	mov	r0, r2
    c036:	4798      	blx	r3
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    c038:	693b      	ldr	r3, [r7, #16]
    c03a:	f003 0308 	and.w	r3, r3, #8
    c03e:	2b00      	cmp	r3, #0
    c040:	d02b      	beq.n	c09a <USBHwISR+0x9a>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    c042:	4b4d      	ldr	r3, [pc, #308]	; (c178 <USBHwISR+0x178>)
    c044:	2208      	movs	r2, #8
    c046:	601a      	str	r2, [r3, #0]
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
    c048:	20fe      	movs	r0, #254	; 0xfe
    c04a:	f7ff fde7 	bl	bc1c <USBHwCmdRead>
    c04e:	4603      	mov	r3, r0
    c050:	737b      	strb	r3, [r7, #13]
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    c052:	7b7b      	ldrb	r3, [r7, #13]
    c054:	f003 031a 	and.w	r3, r3, #26
    c058:	2b00      	cmp	r3, #0
    c05a:	d01e      	beq.n	c09a <USBHwISR+0x9a>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
    c05c:	7b7b      	ldrb	r3, [r7, #13]
    c05e:	f003 0301 	and.w	r3, r3, #1
    c062:	2b00      	cmp	r3, #0
    c064:	bf14      	ite	ne
    c066:	2301      	movne	r3, #1
    c068:	2300      	moveq	r3, #0
    c06a:	b2db      	uxtb	r3, r3
    c06c:	b2da      	uxtb	r2, r3
    c06e:	7b7b      	ldrb	r3, [r7, #13]
    c070:	f003 0304 	and.w	r3, r3, #4
    c074:	b2db      	uxtb	r3, r3
    c076:	4313      	orrs	r3, r2
    c078:	b2da      	uxtb	r2, r3
    c07a:	7b7b      	ldrb	r3, [r7, #13]
    c07c:	f003 0310 	and.w	r3, r3, #16
    c080:	b2db      	uxtb	r3, r3
    c082:	4313      	orrs	r3, r2
    c084:	b2db      	uxtb	r3, r3
    c086:	733b      	strb	r3, [r7, #12]
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    c088:	4b3d      	ldr	r3, [pc, #244]	; (c180 <USBHwISR+0x180>)
    c08a:	681b      	ldr	r3, [r3, #0]
    c08c:	2b00      	cmp	r3, #0
    c08e:	d004      	beq.n	c09a <USBHwISR+0x9a>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    c090:	4b3b      	ldr	r3, [pc, #236]	; (c180 <USBHwISR+0x180>)
    c092:	681b      	ldr	r3, [r3, #0]
    c094:	7b3a      	ldrb	r2, [r7, #12]
    c096:	4610      	mov	r0, r2
    c098:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    c09a:	693b      	ldr	r3, [r7, #16]
    c09c:	f003 0304 	and.w	r3, r3, #4
    c0a0:	2b00      	cmp	r3, #0
    c0a2:	d063      	beq.n	c16c <USBHwISR+0x16c>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    c0a4:	4b34      	ldr	r3, [pc, #208]	; (c178 <USBHwISR+0x178>)
    c0a6:	2204      	movs	r2, #4
    c0a8:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    c0aa:	2300      	movs	r3, #0
    c0ac:	617b      	str	r3, [r7, #20]
    c0ae:	e05a      	b.n	c166 <USBHwISR+0x166>
            dwIntBit = (1 << i);
    c0b0:	2201      	movs	r2, #1
    c0b2:	697b      	ldr	r3, [r7, #20]
    c0b4:	fa02 f303 	lsl.w	r3, r2, r3
    c0b8:	60bb      	str	r3, [r7, #8]
            if (USBEpIntSt & dwIntBit) {
    c0ba:	4b32      	ldr	r3, [pc, #200]	; (c184 <USBHwISR+0x184>)
    c0bc:	681a      	ldr	r2, [r3, #0]
    c0be:	68bb      	ldr	r3, [r7, #8]
    c0c0:	4013      	ands	r3, r2
    c0c2:	2b00      	cmp	r3, #0
    c0c4:	d04c      	beq.n	c160 <USBHwISR+0x160>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    c0c6:	4a30      	ldr	r2, [pc, #192]	; (c188 <USBHwISR+0x188>)
    c0c8:	68bb      	ldr	r3, [r7, #8]
    c0ca:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    c0cc:	2020      	movs	r0, #32
    c0ce:	f7ff fd5b 	bl	bb88 <Wait4DevInt>
                bEPStat = USBCmdData;
    c0d2:	4b2e      	ldr	r3, [pc, #184]	; (c18c <USBHwISR+0x18c>)
    c0d4:	681b      	ldr	r3, [r3, #0]
    c0d6:	71fb      	strb	r3, [r7, #7]
                // convert EP pipe stat into something HW independent
                bStat = ((bEPStat & EPSTAT_FE) ? EP_STATUS_DATA : 0) |
    c0d8:	79fb      	ldrb	r3, [r7, #7]
    c0da:	f003 0301 	and.w	r3, r3, #1
    c0de:	2b00      	cmp	r3, #0
    c0e0:	bf14      	ite	ne
    c0e2:	2301      	movne	r3, #1
    c0e4:	2300      	moveq	r3, #0
    c0e6:	b2db      	uxtb	r3, r3
    c0e8:	b2da      	uxtb	r2, r3
    c0ea:	79fb      	ldrb	r3, [r7, #7]
    c0ec:	f003 0302 	and.w	r3, r3, #2
    c0f0:	b2db      	uxtb	r3, r3
    c0f2:	4313      	orrs	r3, r2
    c0f4:	b2da      	uxtb	r2, r3
    c0f6:	79fb      	ldrb	r3, [r7, #7]
    c0f8:	f003 0304 	and.w	r3, r3, #4
    c0fc:	b2db      	uxtb	r3, r3
    c0fe:	4313      	orrs	r3, r2
    c100:	b2da      	uxtb	r2, r3
    c102:	79fb      	ldrb	r3, [r7, #7]
    c104:	f003 0310 	and.w	r3, r3, #16
    c108:	b2db      	uxtb	r3, r3
    c10a:	4313      	orrs	r3, r2
    c10c:	b2da      	uxtb	r2, r3
    c10e:	79fb      	ldrb	r3, [r7, #7]
    c110:	f003 0308 	and.w	r3, r3, #8
    c114:	b2db      	uxtb	r3, r3
    c116:	4313      	orrs	r3, r2
    c118:	b2db      	uxtb	r3, r3
    c11a:	733b      	strb	r3, [r7, #12]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    c11c:	697b      	ldr	r3, [r7, #20]
    c11e:	0fda      	lsrs	r2, r3, #31
    c120:	4413      	add	r3, r2
    c122:	105b      	asrs	r3, r3, #1
    c124:	461a      	mov	r2, r3
    c126:	4b1a      	ldr	r3, [pc, #104]	; (c190 <USBHwISR+0x190>)
    c128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c12c:	2b00      	cmp	r3, #0
    c12e:	d017      	beq.n	c160 <USBHwISR+0x160>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    c130:	697b      	ldr	r3, [r7, #20]
    c132:	0fda      	lsrs	r2, r3, #31
    c134:	4413      	add	r3, r2
    c136:	105b      	asrs	r3, r3, #1
    c138:	461a      	mov	r2, r3
    c13a:	4b15      	ldr	r3, [pc, #84]	; (c190 <USBHwISR+0x190>)
    c13c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    c140:	697a      	ldr	r2, [r7, #20]
    c142:	01d2      	lsls	r2, r2, #7
    c144:	b2d1      	uxtb	r1, r2
    c146:	697a      	ldr	r2, [r7, #20]
    c148:	1052      	asrs	r2, r2, #1
    c14a:	b2d2      	uxtb	r2, r2
    c14c:	f002 020f 	and.w	r2, r2, #15
    c150:	b2d2      	uxtb	r2, r2
    c152:	430a      	orrs	r2, r1
    c154:	b2d2      	uxtb	r2, r2
    c156:	b2d1      	uxtb	r1, r2
    c158:	7b3a      	ldrb	r2, [r7, #12]
    c15a:	4608      	mov	r0, r1
    c15c:	4611      	mov	r1, r2
    c15e:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    c160:	697b      	ldr	r3, [r7, #20]
    c162:	3301      	adds	r3, #1
    c164:	617b      	str	r3, [r7, #20]
    c166:	697b      	ldr	r3, [r7, #20]
    c168:	2b1f      	cmp	r3, #31
    c16a:	dda1      	ble.n	c0b0 <USBHwISR+0xb0>
            }
        }
    }
    
DEBUG_LED_OFF(9);       
}
    c16c:	3718      	adds	r7, #24
    c16e:	46bd      	mov	sp, r7
    c170:	bd80      	pop	{r7, pc}
    c172:	bf00      	nop
    c174:	5000c200 	.word	0x5000c200
    c178:	5000c208 	.word	0x5000c208
    c17c:	10000af0 	.word	0x10000af0
    c180:	10000aac 	.word	0x10000aac
    c184:	5000c230 	.word	0x5000c230
    c188:	5000c238 	.word	0x5000c238
    c18c:	5000c214 	.word	0x5000c214
    c190:	10000ab0 	.word	0x10000ab0

0000c194 <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    c194:	b580      	push	{r7, lr}
    c196:	af00      	add	r7, sp, #0
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    c198:	4a2d      	ldr	r2, [pc, #180]	; (c250 <USBHwInit+0xbc>)
    c19a:	4b2d      	ldr	r3, [pc, #180]	; (c250 <USBHwInit+0xbc>)
    c19c:	681b      	ldr	r3, [r3, #0]
    c19e:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    c1a2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    c1a6:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    c1a8:	4a2a      	ldr	r2, [pc, #168]	; (c254 <USBHwInit+0xc0>)
    c1aa:	4b2a      	ldr	r3, [pc, #168]	; (c254 <USBHwInit+0xc0>)
    c1ac:	681b      	ldr	r3, [r3, #0]
    c1ae:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    c1b2:	f043 0310 	orr.w	r3, r3, #16
    c1b6:	6013      	str	r3, [r2, #0]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    c1b8:	4a26      	ldr	r2, [pc, #152]	; (c254 <USBHwInit+0xc0>)
    c1ba:	4b26      	ldr	r3, [pc, #152]	; (c254 <USBHwInit+0xc0>)
    c1bc:	681b      	ldr	r3, [r3, #0]
    c1be:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    c1c2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    c1c6:	6013      	str	r3, [r2, #0]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    c1c8:	4a23      	ldr	r2, [pc, #140]	; (c258 <USBHwInit+0xc4>)
    c1ca:	4b23      	ldr	r3, [pc, #140]	; (c258 <USBHwInit+0xc4>)
    c1cc:	681b      	ldr	r3, [r3, #0]
    c1ce:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    c1d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    c1d6:	6013      	str	r3, [r2, #0]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    c1d8:	4a1f      	ldr	r2, [pc, #124]	; (c258 <USBHwInit+0xc4>)
    c1da:	4b1f      	ldr	r3, [pc, #124]	; (c258 <USBHwInit+0xc4>)
    c1dc:	681b      	ldr	r3, [r3, #0]
    c1de:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    c1e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    c1e6:	6013      	str	r3, [r2, #0]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    c1e8:	4a1c      	ldr	r2, [pc, #112]	; (c25c <USBHwInit+0xc8>)
    c1ea:	4b1c      	ldr	r3, [pc, #112]	; (c25c <USBHwInit+0xc8>)
    c1ec:	681b      	ldr	r3, [r3, #0]
    c1ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c1f2:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    c1f4:	4a1a      	ldr	r2, [pc, #104]	; (c260 <USBHwInit+0xcc>)
    c1f6:	4b1a      	ldr	r3, [pc, #104]	; (c260 <USBHwInit+0xcc>)
    c1f8:	681b      	ldr	r3, [r3, #0]
    c1fa:	f043 0312 	orr.w	r3, r3, #18
    c1fe:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    c200:	bf00      	nop
    c202:	4b18      	ldr	r3, [pc, #96]	; (c264 <USBHwInit+0xd0>)
    c204:	681b      	ldr	r3, [r3, #0]
    c206:	f003 0302 	and.w	r3, r3, #2
    c20a:	2b00      	cmp	r3, #0
    c20c:	d0f9      	beq.n	c202 <USBHwInit+0x6e>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    c20e:	bf00      	nop
    c210:	4b14      	ldr	r3, [pc, #80]	; (c264 <USBHwInit+0xd0>)
    c212:	681b      	ldr	r3, [r3, #0]
    c214:	f003 0310 	and.w	r3, r3, #16
    c218:	2b00      	cmp	r3, #0
    c21a:	d0f9      	beq.n	c210 <USBHwInit+0x7c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    c21c:	4b12      	ldr	r3, [pc, #72]	; (c268 <USBHwInit+0xd4>)
    c21e:	2200      	movs	r2, #0
    c220:	601a      	str	r2, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    c222:	4b12      	ldr	r3, [pc, #72]	; (c26c <USBHwInit+0xd8>)
    c224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c228:	601a      	str	r2, [r3, #0]
    USBDevIntPri = 0;
    c22a:	4b11      	ldr	r3, [pc, #68]	; (c270 <USBHwInit+0xdc>)
    c22c:	2200      	movs	r2, #0
    c22e:	601a      	str	r2, [r3, #0]

    USBEpIntEn = 0;
    c230:	4b10      	ldr	r3, [pc, #64]	; (c274 <USBHwInit+0xe0>)
    c232:	2200      	movs	r2, #0
    c234:	601a      	str	r2, [r3, #0]
    USBEpIntClr = 0xFFFFFFFF;
    c236:	4b10      	ldr	r3, [pc, #64]	; (c278 <USBHwInit+0xe4>)
    c238:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    c23c:	601a      	str	r2, [r3, #0]
    USBEpIntPri = 0;
    c23e:	4b0f      	ldr	r3, [pc, #60]	; (c27c <USBHwInit+0xe8>)
    c240:	2200      	movs	r2, #0
    c242:	601a      	str	r2, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    c244:	2000      	movs	r0, #0
    c246:	f7ff fdcb 	bl	bde0 <USBHwNakIntEnable>
    // init debug leds
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
    c24a:	2301      	movs	r3, #1
}
    c24c:	4618      	mov	r0, r3
    c24e:	bd80      	pop	{r7, pc}
    c250:	4002c010 	.word	0x4002c010
    c254:	4002c00c 	.word	0x4002c00c
    c258:	4002c004 	.word	0x4002c004
    c25c:	400fc0c4 	.word	0x400fc0c4
    c260:	5000cff4 	.word	0x5000cff4
    c264:	5000cff8 	.word	0x5000cff8
    c268:	5000c204 	.word	0x5000c204
    c26c:	5000c208 	.word	0x5000c208
    c270:	5000c22c 	.word	0x5000c22c
    c274:	5000c234 	.word	0x5000c234
    c278:	5000c238 	.word	0x5000c238
    c27c:	5000c240 	.word	0x5000c240

0000c280 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    c280:	b480      	push	{r7}
    c282:	b089      	sub	sp, #36	; 0x24
    c284:	af00      	add	r7, sp, #0
    c286:	60f8      	str	r0, [r7, #12]
    c288:	60b9      	str	r1, [r7, #8]
    c28a:	607a      	str	r2, [r7, #4]
    c28c:	603b      	str	r3, [r7, #0]
	if(bMsVendorIndex == 0)	{
    c28e:	4b2d      	ldr	r3, [pc, #180]	; (c344 <USBFilterOsVendorMessage+0xc4>)
    c290:	781b      	ldrb	r3, [r3, #0]
    c292:	2b00      	cmp	r3, #0
    c294:	d101      	bne.n	c29a <USBFilterOsVendorMessage+0x1a>
		// Feature is disabled.
		return FALSE;
    c296:	2300      	movs	r3, #0
    c298:	e04e      	b.n	c338 <USBFilterOsVendorMessage+0xb8>
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    c29a:	68fb      	ldr	r3, [r7, #12]
    c29c:	785a      	ldrb	r2, [r3, #1]
    c29e:	4b29      	ldr	r3, [pc, #164]	; (c344 <USBFilterOsVendorMessage+0xc4>)
    c2a0:	781b      	ldrb	r3, [r3, #0]
    c2a2:	429a      	cmp	r2, r3
    c2a4:	d147      	bne.n	c336 <USBFilterOsVendorMessage+0xb6>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    c2a6:	68bb      	ldr	r3, [r7, #8]
    c2a8:	2200      	movs	r2, #0
    c2aa:	601a      	str	r2, [r3, #0]
	
		int iRequestLength = pSetup->wLength;
    c2ac:	68fb      	ldr	r3, [r7, #12]
    c2ae:	88db      	ldrh	r3, [r3, #6]
    c2b0:	61fb      	str	r3, [r7, #28]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
    c2b2:	68fb      	ldr	r3, [r7, #12]
    c2b4:	885b      	ldrh	r3, [r3, #2]
    c2b6:	76fb      	strb	r3, [r7, #27]
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    c2b8:	68fb      	ldr	r3, [r7, #12]
    c2ba:	885b      	ldrh	r3, [r3, #2]
    c2bc:	0a1b      	lsrs	r3, r3, #8
    c2be:	b29b      	uxth	r3, r3
    c2c0:	76bb      	strb	r3, [r7, #26]
	
		switch (pSetup->wIndex) {
    c2c2:	68fb      	ldr	r3, [r7, #12]
    c2c4:	889b      	ldrh	r3, [r3, #4]
    c2c6:	2b04      	cmp	r3, #4
    c2c8:	d002      	beq.n	c2d0 <USBFilterOsVendorMessage+0x50>
    c2ca:	2b05      	cmp	r3, #5
    c2cc:	d007      	beq.n	c2de <USBFilterOsVendorMessage+0x5e>
    c2ce:	e00d      	b.n	c2ec <USBFilterOsVendorMessage+0x6c>
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    c2d0:	683b      	ldr	r3, [r7, #0]
    c2d2:	4a1d      	ldr	r2, [pc, #116]	; (c348 <USBFilterOsVendorMessage+0xc8>)
    c2d4:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    c2d6:	687b      	ldr	r3, [r7, #4]
    c2d8:	2228      	movs	r2, #40	; 0x28
    c2da:	601a      	str	r2, [r3, #0]
			break;
    c2dc:	e008      	b.n	c2f0 <USBFilterOsVendorMessage+0x70>
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    c2de:	683b      	ldr	r3, [r7, #0]
    c2e0:	4a1a      	ldr	r2, [pc, #104]	; (c34c <USBFilterOsVendorMessage+0xcc>)
    c2e2:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    c2e4:	687b      	ldr	r3, [r7, #4]
    c2e6:	2292      	movs	r2, #146	; 0x92
    c2e8:	601a      	str	r2, [r3, #0]
			break;
    c2ea:	e001      	b.n	c2f0 <USBFilterOsVendorMessage+0x70>

		default:
			return TRUE;
    c2ec:	2301      	movs	r3, #1
    c2ee:	e023      	b.n	c338 <USBFilterOsVendorMessage+0xb8>
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    c2f0:	7ebb      	ldrb	r3, [r7, #26]
    c2f2:	041b      	lsls	r3, r3, #16
    c2f4:	617b      	str	r3, [r7, #20]
		if (*piLen < iPageOffset) {
    c2f6:	687b      	ldr	r3, [r7, #4]
    c2f8:	681a      	ldr	r2, [r3, #0]
    c2fa:	697b      	ldr	r3, [r7, #20]
    c2fc:	429a      	cmp	r2, r3
    c2fe:	da01      	bge.n	c304 <USBFilterOsVendorMessage+0x84>
			// Not enough data for the requested offset.
			return TRUE;
    c300:	2301      	movs	r3, #1
    c302:	e019      	b.n	c338 <USBFilterOsVendorMessage+0xb8>
		}
		*ppbData += iPageOffset;
    c304:	683b      	ldr	r3, [r7, #0]
    c306:	681a      	ldr	r2, [r3, #0]
    c308:	697b      	ldr	r3, [r7, #20]
    c30a:	441a      	add	r2, r3
    c30c:	683b      	ldr	r3, [r7, #0]
    c30e:	601a      	str	r2, [r3, #0]
		*piLen -= iPageOffset;
    c310:	687b      	ldr	r3, [r7, #4]
    c312:	681a      	ldr	r2, [r3, #0]
    c314:	697b      	ldr	r3, [r7, #20]
    c316:	1ad2      	subs	r2, r2, r3
    c318:	687b      	ldr	r3, [r7, #4]
    c31a:	601a      	str	r2, [r3, #0]
		
		if (*piLen > iRequestLength) {
    c31c:	687b      	ldr	r3, [r7, #4]
    c31e:	681a      	ldr	r2, [r3, #0]
    c320:	69fb      	ldr	r3, [r7, #28]
    c322:	429a      	cmp	r2, r3
    c324:	dd02      	ble.n	c32c <USBFilterOsVendorMessage+0xac>
			// Clip data longer than the requested length
			*piLen = iRequestLength;
    c326:	687b      	ldr	r3, [r7, #4]
    c328:	69fa      	ldr	r2, [r7, #28]
    c32a:	601a      	str	r2, [r3, #0]
		}
	
		*pfSuccess = TRUE;
    c32c:	68bb      	ldr	r3, [r7, #8]
    c32e:	2201      	movs	r2, #1
    c330:	601a      	str	r2, [r3, #0]
		return TRUE;
    c332:	2301      	movs	r3, #1
    c334:	e000      	b.n	c338 <USBFilterOsVendorMessage+0xb8>
	}
	
	// These are not the requests you are looking for
	return FALSE;
    c336:	2300      	movs	r3, #0
}
    c338:	4618      	mov	r0, r3
    c33a:	3724      	adds	r7, #36	; 0x24
    c33c:	46bd      	mov	sp, r7
    c33e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c342:	4770      	bx	lr
    c344:	10000b00 	.word	0x10000b00
    c348:	0000dc58 	.word	0x0000dc58
    c34c:	100008cc 	.word	0x100008cc

0000c350 <USBRegisterWinusbInterface>:
	@param [in]		pcInterfaceGuid			ASCII String GUID in curly braces
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
    c350:	b480      	push	{r7}
    c352:	b087      	sub	sp, #28
    c354:	af00      	add	r7, sp, #0
    c356:	4603      	mov	r3, r0
    c358:	6039      	str	r1, [r7, #0]
    c35a:	71fb      	strb	r3, [r7, #7]
	bMsVendorIndex = bVendorRequestIndex;
    c35c:	4a18      	ldr	r2, [pc, #96]	; (c3c0 <USBRegisterWinusbInterface+0x70>)
    c35e:	79fb      	ldrb	r3, [r7, #7]
    c360:	7013      	strb	r3, [r2, #0]
	
	if(!pcInterfaceGuid) {
    c362:	683b      	ldr	r3, [r7, #0]
    c364:	2b00      	cmp	r3, #0
    c366:	d100      	bne.n	c36a <USBRegisterWinusbInterface+0x1a>
		return; // Trust that caller is actually specifying this with nonzero RequestIndex.
    c368:	e024      	b.n	c3b4 <USBRegisterWinusbInterface+0x64>
	}
	
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
    c36a:	4b16      	ldr	r3, [pc, #88]	; (c3c4 <USBRegisterWinusbInterface+0x74>)
    c36c:	617b      	str	r3, [r7, #20]
	const int ciMaxLength = 38;
    c36e:	2326      	movs	r3, #38	; 0x26
    c370:	60fb      	str	r3, [r7, #12]
	
	for(int i = 0; i < ciMaxLength; i++) {
    c372:	2300      	movs	r3, #0
    c374:	613b      	str	r3, [r7, #16]
    c376:	e012      	b.n	c39e <USBRegisterWinusbInterface+0x4e>
		if(!pcInterfaceGuid[i]) break;
    c378:	693b      	ldr	r3, [r7, #16]
    c37a:	683a      	ldr	r2, [r7, #0]
    c37c:	4413      	add	r3, r2
    c37e:	781b      	ldrb	r3, [r3, #0]
    c380:	2b00      	cmp	r3, #0
    c382:	d100      	bne.n	c386 <USBRegisterWinusbInterface+0x36>
    c384:	e00f      	b.n	c3a6 <USBRegisterWinusbInterface+0x56>
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    c386:	693b      	ldr	r3, [r7, #16]
    c388:	683a      	ldr	r2, [r7, #0]
    c38a:	4413      	add	r3, r2
    c38c:	781a      	ldrb	r2, [r3, #0]
    c38e:	697b      	ldr	r3, [r7, #20]
    c390:	701a      	strb	r2, [r3, #0]
		pbWriteCursor += 2;
    c392:	697b      	ldr	r3, [r7, #20]
    c394:	3302      	adds	r3, #2
    c396:	617b      	str	r3, [r7, #20]
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    c398:	693b      	ldr	r3, [r7, #16]
    c39a:	3301      	adds	r3, #1
    c39c:	613b      	str	r3, [r7, #16]
    c39e:	693a      	ldr	r2, [r7, #16]
    c3a0:	68fb      	ldr	r3, [r7, #12]
    c3a2:	429a      	cmp	r2, r3
    c3a4:	dbe8      	blt.n	c378 <USBRegisterWinusbInterface+0x28>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    c3a6:	697b      	ldr	r3, [r7, #20]
    c3a8:	2200      	movs	r2, #0
    c3aa:	701a      	strb	r2, [r3, #0]
	pbWriteCursor[2] = 0;
    c3ac:	697b      	ldr	r3, [r7, #20]
    c3ae:	3302      	adds	r3, #2
    c3b0:	2200      	movs	r2, #0
    c3b2:	701a      	strb	r2, [r3, #0]
	
}
    c3b4:	371c      	adds	r7, #28
    c3b6:	46bd      	mov	sp, r7
    c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3bc:	4770      	bx	lr
    c3be:	bf00      	nop
    c3c0:	10000b00 	.word	0x10000b00
    c3c4:	1000090e 	.word	0x1000090e

0000c3c8 <USBGetOsStringDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
    c3c8:	b480      	push	{r7}
    c3ca:	b083      	sub	sp, #12
    c3cc:	af00      	add	r7, sp, #0
    c3ce:	6078      	str	r0, [r7, #4]
    c3d0:	6039      	str	r1, [r7, #0]
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    c3d2:	4b08      	ldr	r3, [pc, #32]	; (c3f4 <USBGetOsStringDescriptor+0x2c>)
    c3d4:	781a      	ldrb	r2, [r3, #0]
    c3d6:	4b08      	ldr	r3, [pc, #32]	; (c3f8 <USBGetOsStringDescriptor+0x30>)
    c3d8:	741a      	strb	r2, [r3, #16]
	
	*ppbData = abOsStringDescriptor;
    c3da:	683b      	ldr	r3, [r7, #0]
    c3dc:	4a06      	ldr	r2, [pc, #24]	; (c3f8 <USBGetOsStringDescriptor+0x30>)
    c3de:	601a      	str	r2, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    c3e0:	687b      	ldr	r3, [r7, #4]
    c3e2:	2212      	movs	r2, #18
    c3e4:	601a      	str	r2, [r3, #0]
	return TRUE;
    c3e6:	2301      	movs	r3, #1
}
    c3e8:	4618      	mov	r0, r3
    c3ea:	370c      	adds	r7, #12
    c3ec:	46bd      	mov	sp, r7
    c3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    c3f2:	4770      	bx	lr
    c3f4:	10000b00 	.word	0x10000b00
    c3f8:	100008b8 	.word	0x100008b8

0000c3fc <USBRegisterDescriptors>:
	for the device.

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(const U8 *pabDescriptors)
{
    c3fc:	b480      	push	{r7}
    c3fe:	b083      	sub	sp, #12
    c400:	af00      	add	r7, sp, #0
    c402:	6078      	str	r0, [r7, #4]
	pabDescrip = pabDescriptors;
    c404:	4a03      	ldr	r2, [pc, #12]	; (c414 <USBRegisterDescriptors+0x18>)
    c406:	687b      	ldr	r3, [r7, #4]
    c408:	6013      	str	r3, [r2, #0]
}
    c40a:	370c      	adds	r7, #12
    c40c:	46bd      	mov	sp, r7
    c40e:	f85d 7b04 	ldr.w	r7, [sp], #4
    c412:	4770      	bx	lr
    c414:	10000afc 	.word	0x10000afc

0000c418 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    c418:	b580      	push	{r7, lr}
    c41a:	b088      	sub	sp, #32
    c41c:	af00      	add	r7, sp, #0
    c41e:	60ba      	str	r2, [r7, #8]
    c420:	607b      	str	r3, [r7, #4]
    c422:	4603      	mov	r3, r0
    c424:	81fb      	strh	r3, [r7, #14]
    c426:	460b      	mov	r3, r1
    c428:	81bb      	strh	r3, [r7, #12]
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    c42a:	89fb      	ldrh	r3, [r7, #14]
    c42c:	0a1b      	lsrs	r3, r3, #8
    c42e:	b29b      	uxth	r3, r3
    c430:	75fb      	strb	r3, [r7, #23]
	bIndex = GET_DESC_INDEX(wTypeIndex);
    c432:	89fb      	ldrh	r3, [r7, #14]
    c434:	75bb      	strb	r3, [r7, #22]
	
    if (bType == DESC_STRING &&
    c436:	7dfb      	ldrb	r3, [r7, #23]
    c438:	2b03      	cmp	r3, #3
    c43a:	d10b      	bne.n	c454 <USBGetDescriptor+0x3c>
    c43c:	7dbb      	ldrb	r3, [r7, #22]
    c43e:	2bee      	cmp	r3, #238	; 0xee
    c440:	d108      	bne.n	c454 <USBGetDescriptor+0x3c>
        bIndex == DESC_STRING_OS) {
        
        if (USBGetOsStringDescriptor(piLen, ppbData)) {
    c442:	68b8      	ldr	r0, [r7, #8]
    c444:	6879      	ldr	r1, [r7, #4]
    c446:	f7ff ffbf 	bl	c3c8 <USBGetOsStringDescriptor>
    c44a:	4603      	mov	r3, r0
    c44c:	2b00      	cmp	r3, #0
    c44e:	d001      	beq.n	c454 <USBGetDescriptor+0x3c>
            
            return TRUE;
    c450:	2301      	movs	r3, #1
    c452:	e036      	b.n	c4c2 <USBGetDescriptor+0xaa>
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    c454:	4b1d      	ldr	r3, [pc, #116]	; (c4cc <USBGetDescriptor+0xb4>)
    c456:	681b      	ldr	r3, [r3, #0]
    c458:	61fb      	str	r3, [r7, #28]
	iCurIndex = 0;
    c45a:	2300      	movs	r3, #0
    c45c:	61bb      	str	r3, [r7, #24]
	
	while (pab[DESC_bLength] != 0) {
    c45e:	e02b      	b.n	c4b8 <USBGetDescriptor+0xa0>
		if (pab[DESC_bDescriptorType] == bType) {
    c460:	69fb      	ldr	r3, [r7, #28]
    c462:	3301      	adds	r3, #1
    c464:	781b      	ldrb	r3, [r3, #0]
    c466:	7dfa      	ldrb	r2, [r7, #23]
    c468:	429a      	cmp	r2, r3
    c46a:	d11f      	bne.n	c4ac <USBGetDescriptor+0x94>
			if (iCurIndex == bIndex) {
    c46c:	7dba      	ldrb	r2, [r7, #22]
    c46e:	69bb      	ldr	r3, [r7, #24]
    c470:	429a      	cmp	r2, r3
    c472:	d118      	bne.n	c4a6 <USBGetDescriptor+0x8e>
				// set data pointer
				*ppbData = pab;
    c474:	687b      	ldr	r3, [r7, #4]
    c476:	69fa      	ldr	r2, [r7, #28]
    c478:	601a      	str	r2, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    c47a:	7dfb      	ldrb	r3, [r7, #23]
    c47c:	2b02      	cmp	r3, #2
    c47e:	d10b      	bne.n	c498 <USBGetDescriptor+0x80>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    c480:	69fb      	ldr	r3, [r7, #28]
    c482:	3302      	adds	r3, #2
    c484:	781b      	ldrb	r3, [r3, #0]
    c486:	461a      	mov	r2, r3
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    c488:	69fb      	ldr	r3, [r7, #28]
    c48a:	3303      	adds	r3, #3
    c48c:	781b      	ldrb	r3, [r3, #0]
    c48e:	021b      	lsls	r3, r3, #8
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    c490:	431a      	orrs	r2, r3
    c492:	68bb      	ldr	r3, [r7, #8]
    c494:	601a      	str	r2, [r3, #0]
    c496:	e004      	b.n	c4a2 <USBGetDescriptor+0x8a>
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    c498:	69fb      	ldr	r3, [r7, #28]
    c49a:	781b      	ldrb	r3, [r3, #0]
    c49c:	461a      	mov	r2, r3
    c49e:	68bb      	ldr	r3, [r7, #8]
    c4a0:	601a      	str	r2, [r3, #0]
				}
				return TRUE;
    c4a2:	2301      	movs	r3, #1
    c4a4:	e00d      	b.n	c4c2 <USBGetDescriptor+0xaa>
			}
			iCurIndex++;
    c4a6:	69bb      	ldr	r3, [r7, #24]
    c4a8:	3301      	adds	r3, #1
    c4aa:	61bb      	str	r3, [r7, #24]
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    c4ac:	69fb      	ldr	r3, [r7, #28]
    c4ae:	781b      	ldrb	r3, [r3, #0]
    c4b0:	461a      	mov	r2, r3
    c4b2:	69fb      	ldr	r3, [r7, #28]
    c4b4:	4413      	add	r3, r2
    c4b6:	61fb      	str	r3, [r7, #28]
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    c4b8:	69fb      	ldr	r3, [r7, #28]
    c4ba:	781b      	ldrb	r3, [r3, #0]
    c4bc:	2b00      	cmp	r3, #0
    c4be:	d1cf      	bne.n	c460 <USBGetDescriptor+0x48>
		// skip to next descriptor
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
    c4c0:	2300      	movs	r3, #0
}
    c4c2:	4618      	mov	r0, r3
    c4c4:	3720      	adds	r7, #32
    c4c6:	46bd      	mov	sp, r7
    c4c8:	bd80      	pop	{r7, pc}
    c4ca:	bf00      	nop
    c4cc:	10000afc 	.word	0x10000afc

0000c4d0 <USBSetConfiguration>:
	@todo function always returns TRUE, add stricter checking?
	
	@return TRUE if successfully configured, FALSE otherwise
 */
static BOOL USBSetConfiguration(U8 bConfigIndex, U8 bAltSetting)
{
    c4d0:	b580      	push	{r7, lr}
    c4d2:	b086      	sub	sp, #24
    c4d4:	af00      	add	r7, sp, #0
    c4d6:	4603      	mov	r3, r0
    c4d8:	460a      	mov	r2, r1
    c4da:	71fb      	strb	r3, [r7, #7]
    c4dc:	4613      	mov	r3, r2
    c4de:	71bb      	strb	r3, [r7, #6]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    c4e0:	79fb      	ldrb	r3, [r7, #7]
    c4e2:	2b00      	cmp	r3, #0
    c4e4:	d103      	bne.n	c4ee <USBSetConfiguration+0x1e>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    c4e6:	2000      	movs	r0, #0
    c4e8:	f7ff fd78 	bl	bfdc <USBHwConfigDevice>
    c4ec:	e045      	b.n	c57a <USBSetConfiguration+0xaa>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    c4ee:	4b25      	ldr	r3, [pc, #148]	; (c584 <USBSetConfiguration+0xb4>)
    c4f0:	681b      	ldr	r3, [r3, #0]
    c4f2:	617b      	str	r3, [r7, #20]
		bCurConfig = 0xFF;
    c4f4:	23ff      	movs	r3, #255	; 0xff
    c4f6:	74fb      	strb	r3, [r7, #19]
		bCurAltSetting = 0xFF;
    c4f8:	23ff      	movs	r3, #255	; 0xff
    c4fa:	74bb      	strb	r3, [r7, #18]

		while (pab[DESC_bLength] != 0) {
    c4fc:	e036      	b.n	c56c <USBSetConfiguration+0x9c>

			switch (pab[DESC_bDescriptorType]) {
    c4fe:	697b      	ldr	r3, [r7, #20]
    c500:	3301      	adds	r3, #1
    c502:	781b      	ldrb	r3, [r3, #0]
    c504:	2b04      	cmp	r3, #4
    c506:	d008      	beq.n	c51a <USBSetConfiguration+0x4a>
    c508:	2b05      	cmp	r3, #5
    c50a:	d00a      	beq.n	c522 <USBSetConfiguration+0x52>
    c50c:	2b02      	cmp	r3, #2
    c50e:	d000      	beq.n	c512 <USBSetConfiguration+0x42>
					USBHwEPConfig(bEP, wMaxPktSize);
				}
				break;

			default:
				break;
    c510:	e026      	b.n	c560 <USBSetConfiguration+0x90>

			switch (pab[DESC_bDescriptorType]) {

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    c512:	697b      	ldr	r3, [r7, #20]
    c514:	795b      	ldrb	r3, [r3, #5]
    c516:	74fb      	strb	r3, [r7, #19]
				break;
    c518:	e022      	b.n	c560 <USBSetConfiguration+0x90>

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    c51a:	697b      	ldr	r3, [r7, #20]
    c51c:	78db      	ldrb	r3, [r3, #3]
    c51e:	74bb      	strb	r3, [r7, #18]
				break;
    c520:	e01e      	b.n	c560 <USBSetConfiguration+0x90>

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    c522:	7cfa      	ldrb	r2, [r7, #19]
    c524:	79fb      	ldrb	r3, [r7, #7]
    c526:	429a      	cmp	r2, r3
    c528:	d119      	bne.n	c55e <USBSetConfiguration+0x8e>
    c52a:	7cba      	ldrb	r2, [r7, #18]
    c52c:	79bb      	ldrb	r3, [r7, #6]
    c52e:	429a      	cmp	r2, r3
    c530:	d115      	bne.n	c55e <USBSetConfiguration+0x8e>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
    c532:	697b      	ldr	r3, [r7, #20]
    c534:	789b      	ldrb	r3, [r3, #2]
    c536:	747b      	strb	r3, [r7, #17]
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    c538:	697b      	ldr	r3, [r7, #20]
    c53a:	3304      	adds	r3, #4
    c53c:	781b      	ldrb	r3, [r3, #0]
    c53e:	b29a      	uxth	r2, r3
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    c540:	697b      	ldr	r3, [r7, #20]
    c542:	3305      	adds	r3, #5
    c544:	781b      	ldrb	r3, [r3, #0]
    c546:	021b      	lsls	r3, r3, #8
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    c548:	b29b      	uxth	r3, r3
    c54a:	4313      	orrs	r3, r2
    c54c:	b29b      	uxth	r3, r3
    c54e:	81fb      	strh	r3, [r7, #14]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    c550:	7c7a      	ldrb	r2, [r7, #17]
    c552:	89fb      	ldrh	r3, [r7, #14]
    c554:	4610      	mov	r0, r2
    c556:	4619      	mov	r1, r3
    c558:	f7ff fbb8 	bl	bccc <USBHwEPConfig>
				}
				break;
    c55c:	e7ff      	b.n	c55e <USBSetConfiguration+0x8e>
    c55e:	bf00      	nop

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    c560:	697b      	ldr	r3, [r7, #20]
    c562:	781b      	ldrb	r3, [r3, #0]
    c564:	461a      	mov	r2, r3
    c566:	697b      	ldr	r3, [r7, #20]
    c568:	4413      	add	r3, r2
    c56a:	617b      	str	r3, [r7, #20]
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    c56c:	697b      	ldr	r3, [r7, #20]
    c56e:	781b      	ldrb	r3, [r3, #0]
    c570:	2b00      	cmp	r3, #0
    c572:	d1c4      	bne.n	c4fe <USBSetConfiguration+0x2e>
			// skip to next descriptor
			pab += pab[DESC_bLength];
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    c574:	2001      	movs	r0, #1
    c576:	f7ff fd31 	bl	bfdc <USBHwConfigDevice>
	}

	return TRUE;
    c57a:	2301      	movs	r3, #1
}
    c57c:	4618      	mov	r0, r3
    c57e:	3718      	adds	r7, #24
    c580:	46bd      	mov	sp, r7
    c582:	bd80      	pop	{r7, pc}
    c584:	10000afc 	.word	0x10000afc

0000c588 <HandleStdDeviceReq>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    c588:	b580      	push	{r7, lr}
    c58a:	b086      	sub	sp, #24
    c58c:	af00      	add	r7, sp, #0
    c58e:	60f8      	str	r0, [r7, #12]
    c590:	60b9      	str	r1, [r7, #8]
    c592:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    c594:	687b      	ldr	r3, [r7, #4]
    c596:	681b      	ldr	r3, [r3, #0]
    c598:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    c59a:	68fb      	ldr	r3, [r7, #12]
    c59c:	785b      	ldrb	r3, [r3, #1]
    c59e:	2b09      	cmp	r3, #9
    c5a0:	d852      	bhi.n	c648 <HandleStdDeviceReq+0xc0>
    c5a2:	a201      	add	r2, pc, #4	; (adr r2, c5a8 <HandleStdDeviceReq+0x20>)
    c5a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c5a8:	0000c5d1 	.word	0x0000c5d1
    c5ac:	0000c641 	.word	0x0000c641
    c5b0:	0000c649 	.word	0x0000c649
    c5b4:	0000c641 	.word	0x0000c641
    c5b8:	0000c649 	.word	0x0000c649
    c5bc:	0000c5e7 	.word	0x0000c5e7
    c5c0:	0000c5f5 	.word	0x0000c5f5
    c5c4:	0000c645 	.word	0x0000c645
    c5c8:	0000c60d 	.word	0x0000c60d
    c5cc:	0000c61d 	.word	0x0000c61d
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    c5d0:	697b      	ldr	r3, [r7, #20]
    c5d2:	2200      	movs	r2, #0
    c5d4:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    c5d6:	697b      	ldr	r3, [r7, #20]
    c5d8:	3301      	adds	r3, #1
    c5da:	2200      	movs	r2, #0
    c5dc:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    c5de:	68bb      	ldr	r3, [r7, #8]
    c5e0:	2202      	movs	r2, #2
    c5e2:	601a      	str	r2, [r3, #0]
		break;
    c5e4:	e032      	b.n	c64c <HandleStdDeviceReq+0xc4>
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    c5e6:	68fb      	ldr	r3, [r7, #12]
    c5e8:	885b      	ldrh	r3, [r3, #2]
    c5ea:	b2db      	uxtb	r3, r3
    c5ec:	4618      	mov	r0, r3
    c5ee:	f7ff fbd3 	bl	bd98 <USBHwSetAddress>
		break;
    c5f2:	e02b      	b.n	c64c <HandleStdDeviceReq+0xc4>

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    c5f4:	68fb      	ldr	r3, [r7, #12]
    c5f6:	885a      	ldrh	r2, [r3, #2]
    c5f8:	68fb      	ldr	r3, [r7, #12]
    c5fa:	889b      	ldrh	r3, [r3, #4]
    c5fc:	4610      	mov	r0, r2
    c5fe:	4619      	mov	r1, r3
    c600:	68ba      	ldr	r2, [r7, #8]
    c602:	687b      	ldr	r3, [r7, #4]
    c604:	f7ff ff08 	bl	c418 <USBGetDescriptor>
    c608:	4603      	mov	r3, r0
    c60a:	e020      	b.n	c64e <HandleStdDeviceReq+0xc6>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    c60c:	4b12      	ldr	r3, [pc, #72]	; (c658 <HandleStdDeviceReq+0xd0>)
    c60e:	781a      	ldrb	r2, [r3, #0]
    c610:	697b      	ldr	r3, [r7, #20]
    c612:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    c614:	68bb      	ldr	r3, [r7, #8]
    c616:	2201      	movs	r2, #1
    c618:	601a      	str	r2, [r3, #0]
		break;
    c61a:	e017      	b.n	c64c <HandleStdDeviceReq+0xc4>

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    c61c:	68fb      	ldr	r3, [r7, #12]
    c61e:	885b      	ldrh	r3, [r3, #2]
    c620:	b2db      	uxtb	r3, r3
    c622:	4618      	mov	r0, r3
    c624:	2100      	movs	r1, #0
    c626:	f7ff ff53 	bl	c4d0 <USBSetConfiguration>
    c62a:	4603      	mov	r3, r0
    c62c:	2b00      	cmp	r3, #0
    c62e:	d101      	bne.n	c634 <HandleStdDeviceReq+0xac>
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
    c630:	2300      	movs	r3, #0
    c632:	e00c      	b.n	c64e <HandleStdDeviceReq+0xc6>
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    c634:	68fb      	ldr	r3, [r7, #12]
    c636:	885b      	ldrh	r3, [r3, #2]
    c638:	b2da      	uxtb	r2, r3
    c63a:	4b07      	ldr	r3, [pc, #28]	; (c658 <HandleStdDeviceReq+0xd0>)
    c63c:	701a      	strb	r2, [r3, #0]
		break;
    c63e:	e005      	b.n	c64c <HandleStdDeviceReq+0xc4>
			// put DEVICE_REMOTE_WAKEUP code here
		}
		if (pSetup->wValue == FEA_TEST_MODE) {
			// put TEST_MODE code here
		}
		return FALSE;
    c640:	2300      	movs	r3, #0
    c642:	e004      	b.n	c64e <HandleStdDeviceReq+0xc6>

	case REQ_SET_DESCRIPTOR:
		DBG("Device req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    c644:	2300      	movs	r3, #0
    c646:	e002      	b.n	c64e <HandleStdDeviceReq+0xc6>

	default:
		DBG("Illegal device req %d\n", pSetup->bRequest);
		return FALSE;
    c648:	2300      	movs	r3, #0
    c64a:	e000      	b.n	c64e <HandleStdDeviceReq+0xc6>
	}
	
	return TRUE;
    c64c:	2301      	movs	r3, #1
}
    c64e:	4618      	mov	r0, r3
    c650:	3718      	adds	r7, #24
    c652:	46bd      	mov	sp, r7
    c654:	bd80      	pop	{r7, pc}
    c656:	bf00      	nop
    c658:	10000af4 	.word	0x10000af4

0000c65c <HandleStdInterfaceReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    c65c:	b480      	push	{r7}
    c65e:	b087      	sub	sp, #28
    c660:	af00      	add	r7, sp, #0
    c662:	60f8      	str	r0, [r7, #12]
    c664:	60b9      	str	r1, [r7, #8]
    c666:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    c668:	687b      	ldr	r3, [r7, #4]
    c66a:	681b      	ldr	r3, [r3, #0]
    c66c:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    c66e:	68fb      	ldr	r3, [r7, #12]
    c670:	785b      	ldrb	r3, [r3, #1]
    c672:	2b0b      	cmp	r3, #11
    c674:	d838      	bhi.n	c6e8 <HandleStdInterfaceReq+0x8c>
    c676:	a201      	add	r2, pc, #4	; (adr r2, c67c <HandleStdInterfaceReq+0x20>)
    c678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c67c:	0000c6ad 	.word	0x0000c6ad
    c680:	0000c6c3 	.word	0x0000c6c3
    c684:	0000c6e9 	.word	0x0000c6e9
    c688:	0000c6c3 	.word	0x0000c6c3
    c68c:	0000c6e9 	.word	0x0000c6e9
    c690:	0000c6e9 	.word	0x0000c6e9
    c694:	0000c6e9 	.word	0x0000c6e9
    c698:	0000c6e9 	.word	0x0000c6e9
    c69c:	0000c6e9 	.word	0x0000c6e9
    c6a0:	0000c6e9 	.word	0x0000c6e9
    c6a4:	0000c6c7 	.word	0x0000c6c7
    c6a8:	0000c6d5 	.word	0x0000c6d5

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    c6ac:	697b      	ldr	r3, [r7, #20]
    c6ae:	2200      	movs	r2, #0
    c6b0:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    c6b2:	697b      	ldr	r3, [r7, #20]
    c6b4:	3301      	adds	r3, #1
    c6b6:	2200      	movs	r2, #0
    c6b8:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    c6ba:	68bb      	ldr	r3, [r7, #8]
    c6bc:	2202      	movs	r2, #2
    c6be:	601a      	str	r2, [r3, #0]
		break;
    c6c0:	e014      	b.n	c6ec <HandleStdInterfaceReq+0x90>

	case REQ_CLEAR_FEATURE:
	case REQ_SET_FEATURE:
		// not defined for interface
		return FALSE;
    c6c2:	2300      	movs	r3, #0
    c6c4:	e013      	b.n	c6ee <HandleStdInterfaceReq+0x92>
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    c6c6:	697b      	ldr	r3, [r7, #20]
    c6c8:	2200      	movs	r2, #0
    c6ca:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    c6cc:	68bb      	ldr	r3, [r7, #8]
    c6ce:	2201      	movs	r2, #1
    c6d0:	601a      	str	r2, [r3, #0]
		break;
    c6d2:	e00b      	b.n	c6ec <HandleStdInterfaceReq+0x90>
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    c6d4:	68fb      	ldr	r3, [r7, #12]
    c6d6:	885b      	ldrh	r3, [r3, #2]
    c6d8:	2b00      	cmp	r3, #0
    c6da:	d001      	beq.n	c6e0 <HandleStdInterfaceReq+0x84>
			return FALSE;
    c6dc:	2300      	movs	r3, #0
    c6de:	e006      	b.n	c6ee <HandleStdInterfaceReq+0x92>
		}
		*piLen = 0;
    c6e0:	68bb      	ldr	r3, [r7, #8]
    c6e2:	2200      	movs	r2, #0
    c6e4:	601a      	str	r2, [r3, #0]
		break;
    c6e6:	e001      	b.n	c6ec <HandleStdInterfaceReq+0x90>

	default:
		DBG("Illegal interface req %d\n", pSetup->bRequest);
		return FALSE;
    c6e8:	2300      	movs	r3, #0
    c6ea:	e000      	b.n	c6ee <HandleStdInterfaceReq+0x92>
	}

	return TRUE;
    c6ec:	2301      	movs	r3, #1
}
    c6ee:	4618      	mov	r0, r3
    c6f0:	371c      	adds	r7, #28
    c6f2:	46bd      	mov	sp, r7
    c6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
    c6f8:	4770      	bx	lr
    c6fa:	bf00      	nop

0000c6fc <HandleStdEndPointReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    c6fc:	b580      	push	{r7, lr}
    c6fe:	b086      	sub	sp, #24
    c700:	af00      	add	r7, sp, #0
    c702:	60f8      	str	r0, [r7, #12]
    c704:	60b9      	str	r1, [r7, #8]
    c706:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    c708:	687b      	ldr	r3, [r7, #4]
    c70a:	681b      	ldr	r3, [r3, #0]
    c70c:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    c70e:	68fb      	ldr	r3, [r7, #12]
    c710:	785b      	ldrb	r3, [r3, #1]
    c712:	2b0c      	cmp	r3, #12
    c714:	d853      	bhi.n	c7be <HandleStdEndPointReq+0xc2>
    c716:	a201      	add	r2, pc, #4	; (adr r2, c71c <HandleStdEndPointReq+0x20>)
    c718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    c71c:	0000c751 	.word	0x0000c751
    c720:	0000c783 	.word	0x0000c783
    c724:	0000c7bf 	.word	0x0000c7bf
    c728:	0000c79f 	.word	0x0000c79f
    c72c:	0000c7bf 	.word	0x0000c7bf
    c730:	0000c7bf 	.word	0x0000c7bf
    c734:	0000c7bf 	.word	0x0000c7bf
    c738:	0000c7bf 	.word	0x0000c7bf
    c73c:	0000c7bf 	.word	0x0000c7bf
    c740:	0000c7bf 	.word	0x0000c7bf
    c744:	0000c7bf 	.word	0x0000c7bf
    c748:	0000c7bf 	.word	0x0000c7bf
    c74c:	0000c7bb 	.word	0x0000c7bb
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    c750:	68fb      	ldr	r3, [r7, #12]
    c752:	889b      	ldrh	r3, [r3, #4]
    c754:	b2db      	uxtb	r3, r3
    c756:	4618      	mov	r0, r3
    c758:	f7ff fb50 	bl	bdfc <USBHwEPGetStatus>
    c75c:	4603      	mov	r3, r0
    c75e:	f003 0302 	and.w	r3, r3, #2
    c762:	2b00      	cmp	r3, #0
    c764:	bf14      	ite	ne
    c766:	2301      	movne	r3, #1
    c768:	2300      	moveq	r3, #0
    c76a:	b2db      	uxtb	r3, r3
    c76c:	461a      	mov	r2, r3
    c76e:	697b      	ldr	r3, [r7, #20]
    c770:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    c772:	697b      	ldr	r3, [r7, #20]
    c774:	3301      	adds	r3, #1
    c776:	2200      	movs	r2, #0
    c778:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    c77a:	68bb      	ldr	r3, [r7, #8]
    c77c:	2202      	movs	r2, #2
    c77e:	601a      	str	r2, [r3, #0]
		break;
    c780:	e01f      	b.n	c7c2 <HandleStdEndPointReq+0xc6>
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    c782:	68fb      	ldr	r3, [r7, #12]
    c784:	885b      	ldrh	r3, [r3, #2]
    c786:	2b00      	cmp	r3, #0
    c788:	d107      	bne.n	c79a <HandleStdEndPointReq+0x9e>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    c78a:	68fb      	ldr	r3, [r7, #12]
    c78c:	889b      	ldrh	r3, [r3, #4]
    c78e:	b2db      	uxtb	r3, r3
    c790:	4618      	mov	r0, r3
    c792:	2100      	movs	r1, #0
    c794:	f7ff fb4a 	bl	be2c <USBHwEPStall>
			break;
    c798:	e013      	b.n	c7c2 <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    c79a:	2300      	movs	r3, #0
    c79c:	e012      	b.n	c7c4 <HandleStdEndPointReq+0xc8>
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    c79e:	68fb      	ldr	r3, [r7, #12]
    c7a0:	885b      	ldrh	r3, [r3, #2]
    c7a2:	2b00      	cmp	r3, #0
    c7a4:	d107      	bne.n	c7b6 <HandleStdEndPointReq+0xba>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    c7a6:	68fb      	ldr	r3, [r7, #12]
    c7a8:	889b      	ldrh	r3, [r3, #4]
    c7aa:	b2db      	uxtb	r3, r3
    c7ac:	4618      	mov	r0, r3
    c7ae:	2101      	movs	r1, #1
    c7b0:	f7ff fb3c 	bl	be2c <USBHwEPStall>
			break;
    c7b4:	e005      	b.n	c7c2 <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    c7b6:	2300      	movs	r3, #0
    c7b8:	e004      	b.n	c7c4 <HandleStdEndPointReq+0xc8>

	case REQ_SYNCH_FRAME:
		DBG("EP req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    c7ba:	2300      	movs	r3, #0
    c7bc:	e002      	b.n	c7c4 <HandleStdEndPointReq+0xc8>

	default:
		DBG("Illegal EP req %d\n", pSetup->bRequest);
		return FALSE;
    c7be:	2300      	movs	r3, #0
    c7c0:	e000      	b.n	c7c4 <HandleStdEndPointReq+0xc8>
	}
	
	return TRUE;
    c7c2:	2301      	movs	r3, #1
}
    c7c4:	4618      	mov	r0, r3
    c7c6:	3718      	adds	r7, #24
    c7c8:	46bd      	mov	sp, r7
    c7ca:	bd80      	pop	{r7, pc}

0000c7cc <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    c7cc:	b580      	push	{r7, lr}
    c7ce:	b084      	sub	sp, #16
    c7d0:	af00      	add	r7, sp, #0
    c7d2:	60f8      	str	r0, [r7, #12]
    c7d4:	60b9      	str	r1, [r7, #8]
    c7d6:	607a      	str	r2, [r7, #4]
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    c7d8:	4b19      	ldr	r3, [pc, #100]	; (c840 <USBHandleStandardRequest+0x74>)
    c7da:	681b      	ldr	r3, [r3, #0]
    c7dc:	2b00      	cmp	r3, #0
    c7de:	d00a      	beq.n	c7f6 <USBHandleStandardRequest+0x2a>
    c7e0:	4b17      	ldr	r3, [pc, #92]	; (c840 <USBHandleStandardRequest+0x74>)
    c7e2:	681b      	ldr	r3, [r3, #0]
    c7e4:	68f8      	ldr	r0, [r7, #12]
    c7e6:	68b9      	ldr	r1, [r7, #8]
    c7e8:	687a      	ldr	r2, [r7, #4]
    c7ea:	4798      	blx	r3
    c7ec:	4603      	mov	r3, r0
    c7ee:	2b00      	cmp	r3, #0
    c7f0:	d001      	beq.n	c7f6 <USBHandleStandardRequest+0x2a>
		return TRUE;
    c7f2:	2301      	movs	r3, #1
    c7f4:	e01f      	b.n	c836 <USBHandleStandardRequest+0x6a>
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    c7f6:	68fb      	ldr	r3, [r7, #12]
    c7f8:	781b      	ldrb	r3, [r3, #0]
    c7fa:	f003 031f 	and.w	r3, r3, #31
    c7fe:	2b01      	cmp	r3, #1
    c800:	d00a      	beq.n	c818 <USBHandleStandardRequest+0x4c>
    c802:	2b02      	cmp	r3, #2
    c804:	d00f      	beq.n	c826 <USBHandleStandardRequest+0x5a>
    c806:	2b00      	cmp	r3, #0
    c808:	d114      	bne.n	c834 <USBHandleStandardRequest+0x68>
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
    c80a:	68f8      	ldr	r0, [r7, #12]
    c80c:	68b9      	ldr	r1, [r7, #8]
    c80e:	687a      	ldr	r2, [r7, #4]
    c810:	f7ff feba 	bl	c588 <HandleStdDeviceReq>
    c814:	4603      	mov	r3, r0
    c816:	e00e      	b.n	c836 <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
    c818:	68f8      	ldr	r0, [r7, #12]
    c81a:	68b9      	ldr	r1, [r7, #8]
    c81c:	687a      	ldr	r2, [r7, #4]
    c81e:	f7ff ff1d 	bl	c65c <HandleStdInterfaceReq>
    c822:	4603      	mov	r3, r0
    c824:	e007      	b.n	c836 <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
    c826:	68f8      	ldr	r0, [r7, #12]
    c828:	68b9      	ldr	r1, [r7, #8]
    c82a:	687a      	ldr	r2, [r7, #4]
    c82c:	f7ff ff66 	bl	c6fc <HandleStdEndPointReq>
    c830:	4603      	mov	r3, r0
    c832:	e000      	b.n	c836 <USBHandleStandardRequest+0x6a>
	default: 						return FALSE;
    c834:	2300      	movs	r3, #0
	}
}
    c836:	4618      	mov	r0, r3
    c838:	3710      	adds	r7, #16
    c83a:	46bd      	mov	sp, r7
    c83c:	bd80      	pop	{r7, pc}
    c83e:	bf00      	nop
    c840:	10000af8 	.word	0x10000af8

0000c844 <__aeabi_drsub>:
    c844:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    c848:	e002      	b.n	c850 <__adddf3>
    c84a:	bf00      	nop

0000c84c <__aeabi_dsub>:
    c84c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000c850 <__adddf3>:
    c850:	b530      	push	{r4, r5, lr}
    c852:	ea4f 0441 	mov.w	r4, r1, lsl #1
    c856:	ea4f 0543 	mov.w	r5, r3, lsl #1
    c85a:	ea94 0f05 	teq	r4, r5
    c85e:	bf08      	it	eq
    c860:	ea90 0f02 	teqeq	r0, r2
    c864:	bf1f      	itttt	ne
    c866:	ea54 0c00 	orrsne.w	ip, r4, r0
    c86a:	ea55 0c02 	orrsne.w	ip, r5, r2
    c86e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    c872:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    c876:	f000 80e2 	beq.w	ca3e <__adddf3+0x1ee>
    c87a:	ea4f 5454 	mov.w	r4, r4, lsr #21
    c87e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    c882:	bfb8      	it	lt
    c884:	426d      	neglt	r5, r5
    c886:	dd0c      	ble.n	c8a2 <__adddf3+0x52>
    c888:	442c      	add	r4, r5
    c88a:	ea80 0202 	eor.w	r2, r0, r2
    c88e:	ea81 0303 	eor.w	r3, r1, r3
    c892:	ea82 0000 	eor.w	r0, r2, r0
    c896:	ea83 0101 	eor.w	r1, r3, r1
    c89a:	ea80 0202 	eor.w	r2, r0, r2
    c89e:	ea81 0303 	eor.w	r3, r1, r3
    c8a2:	2d36      	cmp	r5, #54	; 0x36
    c8a4:	bf88      	it	hi
    c8a6:	bd30      	pophi	{r4, r5, pc}
    c8a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    c8ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c8b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    c8b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    c8b8:	d002      	beq.n	c8c0 <__adddf3+0x70>
    c8ba:	4240      	negs	r0, r0
    c8bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c8c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    c8c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c8c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    c8cc:	d002      	beq.n	c8d4 <__adddf3+0x84>
    c8ce:	4252      	negs	r2, r2
    c8d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    c8d4:	ea94 0f05 	teq	r4, r5
    c8d8:	f000 80a7 	beq.w	ca2a <__adddf3+0x1da>
    c8dc:	f1a4 0401 	sub.w	r4, r4, #1
    c8e0:	f1d5 0e20 	rsbs	lr, r5, #32
    c8e4:	db0d      	blt.n	c902 <__adddf3+0xb2>
    c8e6:	fa02 fc0e 	lsl.w	ip, r2, lr
    c8ea:	fa22 f205 	lsr.w	r2, r2, r5
    c8ee:	1880      	adds	r0, r0, r2
    c8f0:	f141 0100 	adc.w	r1, r1, #0
    c8f4:	fa03 f20e 	lsl.w	r2, r3, lr
    c8f8:	1880      	adds	r0, r0, r2
    c8fa:	fa43 f305 	asr.w	r3, r3, r5
    c8fe:	4159      	adcs	r1, r3
    c900:	e00e      	b.n	c920 <__adddf3+0xd0>
    c902:	f1a5 0520 	sub.w	r5, r5, #32
    c906:	f10e 0e20 	add.w	lr, lr, #32
    c90a:	2a01      	cmp	r2, #1
    c90c:	fa03 fc0e 	lsl.w	ip, r3, lr
    c910:	bf28      	it	cs
    c912:	f04c 0c02 	orrcs.w	ip, ip, #2
    c916:	fa43 f305 	asr.w	r3, r3, r5
    c91a:	18c0      	adds	r0, r0, r3
    c91c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    c920:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c924:	d507      	bpl.n	c936 <__adddf3+0xe6>
    c926:	f04f 0e00 	mov.w	lr, #0
    c92a:	f1dc 0c00 	rsbs	ip, ip, #0
    c92e:	eb7e 0000 	sbcs.w	r0, lr, r0
    c932:	eb6e 0101 	sbc.w	r1, lr, r1
    c936:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    c93a:	d31b      	bcc.n	c974 <__adddf3+0x124>
    c93c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    c940:	d30c      	bcc.n	c95c <__adddf3+0x10c>
    c942:	0849      	lsrs	r1, r1, #1
    c944:	ea5f 0030 	movs.w	r0, r0, rrx
    c948:	ea4f 0c3c 	mov.w	ip, ip, rrx
    c94c:	f104 0401 	add.w	r4, r4, #1
    c950:	ea4f 5244 	mov.w	r2, r4, lsl #21
    c954:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    c958:	f080 809a 	bcs.w	ca90 <__adddf3+0x240>
    c95c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    c960:	bf08      	it	eq
    c962:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c966:	f150 0000 	adcs.w	r0, r0, #0
    c96a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c96e:	ea41 0105 	orr.w	r1, r1, r5
    c972:	bd30      	pop	{r4, r5, pc}
    c974:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    c978:	4140      	adcs	r0, r0
    c97a:	eb41 0101 	adc.w	r1, r1, r1
    c97e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c982:	f1a4 0401 	sub.w	r4, r4, #1
    c986:	d1e9      	bne.n	c95c <__adddf3+0x10c>
    c988:	f091 0f00 	teq	r1, #0
    c98c:	bf04      	itt	eq
    c98e:	4601      	moveq	r1, r0
    c990:	2000      	moveq	r0, #0
    c992:	fab1 f381 	clz	r3, r1
    c996:	bf08      	it	eq
    c998:	3320      	addeq	r3, #32
    c99a:	f1a3 030b 	sub.w	r3, r3, #11
    c99e:	f1b3 0220 	subs.w	r2, r3, #32
    c9a2:	da0c      	bge.n	c9be <__adddf3+0x16e>
    c9a4:	320c      	adds	r2, #12
    c9a6:	dd08      	ble.n	c9ba <__adddf3+0x16a>
    c9a8:	f102 0c14 	add.w	ip, r2, #20
    c9ac:	f1c2 020c 	rsb	r2, r2, #12
    c9b0:	fa01 f00c 	lsl.w	r0, r1, ip
    c9b4:	fa21 f102 	lsr.w	r1, r1, r2
    c9b8:	e00c      	b.n	c9d4 <__adddf3+0x184>
    c9ba:	f102 0214 	add.w	r2, r2, #20
    c9be:	bfd8      	it	le
    c9c0:	f1c2 0c20 	rsble	ip, r2, #32
    c9c4:	fa01 f102 	lsl.w	r1, r1, r2
    c9c8:	fa20 fc0c 	lsr.w	ip, r0, ip
    c9cc:	bfdc      	itt	le
    c9ce:	ea41 010c 	orrle.w	r1, r1, ip
    c9d2:	4090      	lslle	r0, r2
    c9d4:	1ae4      	subs	r4, r4, r3
    c9d6:	bfa2      	ittt	ge
    c9d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    c9dc:	4329      	orrge	r1, r5
    c9de:	bd30      	popge	{r4, r5, pc}
    c9e0:	ea6f 0404 	mvn.w	r4, r4
    c9e4:	3c1f      	subs	r4, #31
    c9e6:	da1c      	bge.n	ca22 <__adddf3+0x1d2>
    c9e8:	340c      	adds	r4, #12
    c9ea:	dc0e      	bgt.n	ca0a <__adddf3+0x1ba>
    c9ec:	f104 0414 	add.w	r4, r4, #20
    c9f0:	f1c4 0220 	rsb	r2, r4, #32
    c9f4:	fa20 f004 	lsr.w	r0, r0, r4
    c9f8:	fa01 f302 	lsl.w	r3, r1, r2
    c9fc:	ea40 0003 	orr.w	r0, r0, r3
    ca00:	fa21 f304 	lsr.w	r3, r1, r4
    ca04:	ea45 0103 	orr.w	r1, r5, r3
    ca08:	bd30      	pop	{r4, r5, pc}
    ca0a:	f1c4 040c 	rsb	r4, r4, #12
    ca0e:	f1c4 0220 	rsb	r2, r4, #32
    ca12:	fa20 f002 	lsr.w	r0, r0, r2
    ca16:	fa01 f304 	lsl.w	r3, r1, r4
    ca1a:	ea40 0003 	orr.w	r0, r0, r3
    ca1e:	4629      	mov	r1, r5
    ca20:	bd30      	pop	{r4, r5, pc}
    ca22:	fa21 f004 	lsr.w	r0, r1, r4
    ca26:	4629      	mov	r1, r5
    ca28:	bd30      	pop	{r4, r5, pc}
    ca2a:	f094 0f00 	teq	r4, #0
    ca2e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    ca32:	bf06      	itte	eq
    ca34:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    ca38:	3401      	addeq	r4, #1
    ca3a:	3d01      	subne	r5, #1
    ca3c:	e74e      	b.n	c8dc <__adddf3+0x8c>
    ca3e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    ca42:	bf18      	it	ne
    ca44:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    ca48:	d029      	beq.n	ca9e <__adddf3+0x24e>
    ca4a:	ea94 0f05 	teq	r4, r5
    ca4e:	bf08      	it	eq
    ca50:	ea90 0f02 	teqeq	r0, r2
    ca54:	d005      	beq.n	ca62 <__adddf3+0x212>
    ca56:	ea54 0c00 	orrs.w	ip, r4, r0
    ca5a:	bf04      	itt	eq
    ca5c:	4619      	moveq	r1, r3
    ca5e:	4610      	moveq	r0, r2
    ca60:	bd30      	pop	{r4, r5, pc}
    ca62:	ea91 0f03 	teq	r1, r3
    ca66:	bf1e      	ittt	ne
    ca68:	2100      	movne	r1, #0
    ca6a:	2000      	movne	r0, #0
    ca6c:	bd30      	popne	{r4, r5, pc}
    ca6e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    ca72:	d105      	bne.n	ca80 <__adddf3+0x230>
    ca74:	0040      	lsls	r0, r0, #1
    ca76:	4149      	adcs	r1, r1
    ca78:	bf28      	it	cs
    ca7a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    ca7e:	bd30      	pop	{r4, r5, pc}
    ca80:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    ca84:	bf3c      	itt	cc
    ca86:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    ca8a:	bd30      	popcc	{r4, r5, pc}
    ca8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    ca90:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    ca94:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    ca98:	f04f 0000 	mov.w	r0, #0
    ca9c:	bd30      	pop	{r4, r5, pc}
    ca9e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    caa2:	bf1a      	itte	ne
    caa4:	4619      	movne	r1, r3
    caa6:	4610      	movne	r0, r2
    caa8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    caac:	bf1c      	itt	ne
    caae:	460b      	movne	r3, r1
    cab0:	4602      	movne	r2, r0
    cab2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cab6:	bf06      	itte	eq
    cab8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    cabc:	ea91 0f03 	teqeq	r1, r3
    cac0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    cac4:	bd30      	pop	{r4, r5, pc}
    cac6:	bf00      	nop

0000cac8 <__aeabi_ui2d>:
    cac8:	f090 0f00 	teq	r0, #0
    cacc:	bf04      	itt	eq
    cace:	2100      	moveq	r1, #0
    cad0:	4770      	bxeq	lr
    cad2:	b530      	push	{r4, r5, lr}
    cad4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cad8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cadc:	f04f 0500 	mov.w	r5, #0
    cae0:	f04f 0100 	mov.w	r1, #0
    cae4:	e750      	b.n	c988 <__adddf3+0x138>
    cae6:	bf00      	nop

0000cae8 <__aeabi_i2d>:
    cae8:	f090 0f00 	teq	r0, #0
    caec:	bf04      	itt	eq
    caee:	2100      	moveq	r1, #0
    caf0:	4770      	bxeq	lr
    caf2:	b530      	push	{r4, r5, lr}
    caf4:	f44f 6480 	mov.w	r4, #1024	; 0x400
    caf8:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cafc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    cb00:	bf48      	it	mi
    cb02:	4240      	negmi	r0, r0
    cb04:	f04f 0100 	mov.w	r1, #0
    cb08:	e73e      	b.n	c988 <__adddf3+0x138>
    cb0a:	bf00      	nop

0000cb0c <__aeabi_f2d>:
    cb0c:	0042      	lsls	r2, r0, #1
    cb0e:	ea4f 01e2 	mov.w	r1, r2, asr #3
    cb12:	ea4f 0131 	mov.w	r1, r1, rrx
    cb16:	ea4f 7002 	mov.w	r0, r2, lsl #28
    cb1a:	bf1f      	itttt	ne
    cb1c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    cb20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    cb24:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    cb28:	4770      	bxne	lr
    cb2a:	f092 0f00 	teq	r2, #0
    cb2e:	bf14      	ite	ne
    cb30:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    cb34:	4770      	bxeq	lr
    cb36:	b530      	push	{r4, r5, lr}
    cb38:	f44f 7460 	mov.w	r4, #896	; 0x380
    cb3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    cb40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    cb44:	e720      	b.n	c988 <__adddf3+0x138>
    cb46:	bf00      	nop

0000cb48 <__aeabi_ul2d>:
    cb48:	ea50 0201 	orrs.w	r2, r0, r1
    cb4c:	bf08      	it	eq
    cb4e:	4770      	bxeq	lr
    cb50:	b530      	push	{r4, r5, lr}
    cb52:	f04f 0500 	mov.w	r5, #0
    cb56:	e00a      	b.n	cb6e <__aeabi_l2d+0x16>

0000cb58 <__aeabi_l2d>:
    cb58:	ea50 0201 	orrs.w	r2, r0, r1
    cb5c:	bf08      	it	eq
    cb5e:	4770      	bxeq	lr
    cb60:	b530      	push	{r4, r5, lr}
    cb62:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    cb66:	d502      	bpl.n	cb6e <__aeabi_l2d+0x16>
    cb68:	4240      	negs	r0, r0
    cb6a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    cb6e:	f44f 6480 	mov.w	r4, #1024	; 0x400
    cb72:	f104 0432 	add.w	r4, r4, #50	; 0x32
    cb76:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    cb7a:	f43f aedc 	beq.w	c936 <__adddf3+0xe6>
    cb7e:	f04f 0203 	mov.w	r2, #3
    cb82:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    cb86:	bf18      	it	ne
    cb88:	3203      	addne	r2, #3
    cb8a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    cb8e:	bf18      	it	ne
    cb90:	3203      	addne	r2, #3
    cb92:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    cb96:	f1c2 0320 	rsb	r3, r2, #32
    cb9a:	fa00 fc03 	lsl.w	ip, r0, r3
    cb9e:	fa20 f002 	lsr.w	r0, r0, r2
    cba2:	fa01 fe03 	lsl.w	lr, r1, r3
    cba6:	ea40 000e 	orr.w	r0, r0, lr
    cbaa:	fa21 f102 	lsr.w	r1, r1, r2
    cbae:	4414      	add	r4, r2
    cbb0:	e6c1      	b.n	c936 <__adddf3+0xe6>
    cbb2:	bf00      	nop

0000cbb4 <__aeabi_dmul>:
    cbb4:	b570      	push	{r4, r5, r6, lr}
    cbb6:	f04f 0cff 	mov.w	ip, #255	; 0xff
    cbba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    cbbe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    cbc2:	bf1d      	ittte	ne
    cbc4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    cbc8:	ea94 0f0c 	teqne	r4, ip
    cbcc:	ea95 0f0c 	teqne	r5, ip
    cbd0:	f000 f8de 	bleq	cd90 <__aeabi_dmul+0x1dc>
    cbd4:	442c      	add	r4, r5
    cbd6:	ea81 0603 	eor.w	r6, r1, r3
    cbda:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    cbde:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    cbe2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    cbe6:	bf18      	it	ne
    cbe8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    cbec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cbf0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    cbf4:	d038      	beq.n	cc68 <__aeabi_dmul+0xb4>
    cbf6:	fba0 ce02 	umull	ip, lr, r0, r2
    cbfa:	f04f 0500 	mov.w	r5, #0
    cbfe:	fbe1 e502 	umlal	lr, r5, r1, r2
    cc02:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    cc06:	fbe0 e503 	umlal	lr, r5, r0, r3
    cc0a:	f04f 0600 	mov.w	r6, #0
    cc0e:	fbe1 5603 	umlal	r5, r6, r1, r3
    cc12:	f09c 0f00 	teq	ip, #0
    cc16:	bf18      	it	ne
    cc18:	f04e 0e01 	orrne.w	lr, lr, #1
    cc1c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    cc20:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    cc24:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    cc28:	d204      	bcs.n	cc34 <__aeabi_dmul+0x80>
    cc2a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    cc2e:	416d      	adcs	r5, r5
    cc30:	eb46 0606 	adc.w	r6, r6, r6
    cc34:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    cc38:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    cc3c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    cc40:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    cc44:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    cc48:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    cc4c:	bf88      	it	hi
    cc4e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    cc52:	d81e      	bhi.n	cc92 <__aeabi_dmul+0xde>
    cc54:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    cc58:	bf08      	it	eq
    cc5a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    cc5e:	f150 0000 	adcs.w	r0, r0, #0
    cc62:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cc66:	bd70      	pop	{r4, r5, r6, pc}
    cc68:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    cc6c:	ea46 0101 	orr.w	r1, r6, r1
    cc70:	ea40 0002 	orr.w	r0, r0, r2
    cc74:	ea81 0103 	eor.w	r1, r1, r3
    cc78:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    cc7c:	bfc2      	ittt	gt
    cc7e:	ebd4 050c 	rsbsgt	r5, r4, ip
    cc82:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cc86:	bd70      	popgt	{r4, r5, r6, pc}
    cc88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cc8c:	f04f 0e00 	mov.w	lr, #0
    cc90:	3c01      	subs	r4, #1
    cc92:	f300 80ab 	bgt.w	cdec <__aeabi_dmul+0x238>
    cc96:	f114 0f36 	cmn.w	r4, #54	; 0x36
    cc9a:	bfde      	ittt	le
    cc9c:	2000      	movle	r0, #0
    cc9e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    cca2:	bd70      	pople	{r4, r5, r6, pc}
    cca4:	f1c4 0400 	rsb	r4, r4, #0
    cca8:	3c20      	subs	r4, #32
    ccaa:	da35      	bge.n	cd18 <__aeabi_dmul+0x164>
    ccac:	340c      	adds	r4, #12
    ccae:	dc1b      	bgt.n	cce8 <__aeabi_dmul+0x134>
    ccb0:	f104 0414 	add.w	r4, r4, #20
    ccb4:	f1c4 0520 	rsb	r5, r4, #32
    ccb8:	fa00 f305 	lsl.w	r3, r0, r5
    ccbc:	fa20 f004 	lsr.w	r0, r0, r4
    ccc0:	fa01 f205 	lsl.w	r2, r1, r5
    ccc4:	ea40 0002 	orr.w	r0, r0, r2
    ccc8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    cccc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    ccd0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    ccd4:	fa21 f604 	lsr.w	r6, r1, r4
    ccd8:	eb42 0106 	adc.w	r1, r2, r6
    ccdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cce0:	bf08      	it	eq
    cce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cce6:	bd70      	pop	{r4, r5, r6, pc}
    cce8:	f1c4 040c 	rsb	r4, r4, #12
    ccec:	f1c4 0520 	rsb	r5, r4, #32
    ccf0:	fa00 f304 	lsl.w	r3, r0, r4
    ccf4:	fa20 f005 	lsr.w	r0, r0, r5
    ccf8:	fa01 f204 	lsl.w	r2, r1, r4
    ccfc:	ea40 0002 	orr.w	r0, r0, r2
    cd00:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cd04:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    cd08:	f141 0100 	adc.w	r1, r1, #0
    cd0c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cd10:	bf08      	it	eq
    cd12:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cd16:	bd70      	pop	{r4, r5, r6, pc}
    cd18:	f1c4 0520 	rsb	r5, r4, #32
    cd1c:	fa00 f205 	lsl.w	r2, r0, r5
    cd20:	ea4e 0e02 	orr.w	lr, lr, r2
    cd24:	fa20 f304 	lsr.w	r3, r0, r4
    cd28:	fa01 f205 	lsl.w	r2, r1, r5
    cd2c:	ea43 0302 	orr.w	r3, r3, r2
    cd30:	fa21 f004 	lsr.w	r0, r1, r4
    cd34:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cd38:	fa21 f204 	lsr.w	r2, r1, r4
    cd3c:	ea20 0002 	bic.w	r0, r0, r2
    cd40:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    cd44:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    cd48:	bf08      	it	eq
    cd4a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    cd4e:	bd70      	pop	{r4, r5, r6, pc}
    cd50:	f094 0f00 	teq	r4, #0
    cd54:	d10f      	bne.n	cd76 <__aeabi_dmul+0x1c2>
    cd56:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    cd5a:	0040      	lsls	r0, r0, #1
    cd5c:	eb41 0101 	adc.w	r1, r1, r1
    cd60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cd64:	bf08      	it	eq
    cd66:	3c01      	subeq	r4, #1
    cd68:	d0f7      	beq.n	cd5a <__aeabi_dmul+0x1a6>
    cd6a:	ea41 0106 	orr.w	r1, r1, r6
    cd6e:	f095 0f00 	teq	r5, #0
    cd72:	bf18      	it	ne
    cd74:	4770      	bxne	lr
    cd76:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    cd7a:	0052      	lsls	r2, r2, #1
    cd7c:	eb43 0303 	adc.w	r3, r3, r3
    cd80:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    cd84:	bf08      	it	eq
    cd86:	3d01      	subeq	r5, #1
    cd88:	d0f7      	beq.n	cd7a <__aeabi_dmul+0x1c6>
    cd8a:	ea43 0306 	orr.w	r3, r3, r6
    cd8e:	4770      	bx	lr
    cd90:	ea94 0f0c 	teq	r4, ip
    cd94:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cd98:	bf18      	it	ne
    cd9a:	ea95 0f0c 	teqne	r5, ip
    cd9e:	d00c      	beq.n	cdba <__aeabi_dmul+0x206>
    cda0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cda4:	bf18      	it	ne
    cda6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cdaa:	d1d1      	bne.n	cd50 <__aeabi_dmul+0x19c>
    cdac:	ea81 0103 	eor.w	r1, r1, r3
    cdb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cdb4:	f04f 0000 	mov.w	r0, #0
    cdb8:	bd70      	pop	{r4, r5, r6, pc}
    cdba:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cdbe:	bf06      	itte	eq
    cdc0:	4610      	moveq	r0, r2
    cdc2:	4619      	moveq	r1, r3
    cdc4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cdc8:	d019      	beq.n	cdfe <__aeabi_dmul+0x24a>
    cdca:	ea94 0f0c 	teq	r4, ip
    cdce:	d102      	bne.n	cdd6 <__aeabi_dmul+0x222>
    cdd0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    cdd4:	d113      	bne.n	cdfe <__aeabi_dmul+0x24a>
    cdd6:	ea95 0f0c 	teq	r5, ip
    cdda:	d105      	bne.n	cde8 <__aeabi_dmul+0x234>
    cddc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    cde0:	bf1c      	itt	ne
    cde2:	4610      	movne	r0, r2
    cde4:	4619      	movne	r1, r3
    cde6:	d10a      	bne.n	cdfe <__aeabi_dmul+0x24a>
    cde8:	ea81 0103 	eor.w	r1, r1, r3
    cdec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    cdf0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    cdf4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    cdf8:	f04f 0000 	mov.w	r0, #0
    cdfc:	bd70      	pop	{r4, r5, r6, pc}
    cdfe:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    ce02:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    ce06:	bd70      	pop	{r4, r5, r6, pc}

0000ce08 <__aeabi_ddiv>:
    ce08:	b570      	push	{r4, r5, r6, lr}
    ce0a:	f04f 0cff 	mov.w	ip, #255	; 0xff
    ce0e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    ce12:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    ce16:	bf1d      	ittte	ne
    ce18:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    ce1c:	ea94 0f0c 	teqne	r4, ip
    ce20:	ea95 0f0c 	teqne	r5, ip
    ce24:	f000 f8a7 	bleq	cf76 <__aeabi_ddiv+0x16e>
    ce28:	eba4 0405 	sub.w	r4, r4, r5
    ce2c:	ea81 0e03 	eor.w	lr, r1, r3
    ce30:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    ce34:	ea4f 3101 	mov.w	r1, r1, lsl #12
    ce38:	f000 8088 	beq.w	cf4c <__aeabi_ddiv+0x144>
    ce3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    ce40:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    ce44:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    ce48:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    ce4c:	ea4f 2202 	mov.w	r2, r2, lsl #8
    ce50:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    ce54:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    ce58:	ea4f 2600 	mov.w	r6, r0, lsl #8
    ce5c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    ce60:	429d      	cmp	r5, r3
    ce62:	bf08      	it	eq
    ce64:	4296      	cmpeq	r6, r2
    ce66:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    ce6a:	f504 7440 	add.w	r4, r4, #768	; 0x300
    ce6e:	d202      	bcs.n	ce76 <__aeabi_ddiv+0x6e>
    ce70:	085b      	lsrs	r3, r3, #1
    ce72:	ea4f 0232 	mov.w	r2, r2, rrx
    ce76:	1ab6      	subs	r6, r6, r2
    ce78:	eb65 0503 	sbc.w	r5, r5, r3
    ce7c:	085b      	lsrs	r3, r3, #1
    ce7e:	ea4f 0232 	mov.w	r2, r2, rrx
    ce82:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    ce86:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    ce8a:	ebb6 0e02 	subs.w	lr, r6, r2
    ce8e:	eb75 0e03 	sbcs.w	lr, r5, r3
    ce92:	bf22      	ittt	cs
    ce94:	1ab6      	subcs	r6, r6, r2
    ce96:	4675      	movcs	r5, lr
    ce98:	ea40 000c 	orrcs.w	r0, r0, ip
    ce9c:	085b      	lsrs	r3, r3, #1
    ce9e:	ea4f 0232 	mov.w	r2, r2, rrx
    cea2:	ebb6 0e02 	subs.w	lr, r6, r2
    cea6:	eb75 0e03 	sbcs.w	lr, r5, r3
    ceaa:	bf22      	ittt	cs
    ceac:	1ab6      	subcs	r6, r6, r2
    ceae:	4675      	movcs	r5, lr
    ceb0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    ceb4:	085b      	lsrs	r3, r3, #1
    ceb6:	ea4f 0232 	mov.w	r2, r2, rrx
    ceba:	ebb6 0e02 	subs.w	lr, r6, r2
    cebe:	eb75 0e03 	sbcs.w	lr, r5, r3
    cec2:	bf22      	ittt	cs
    cec4:	1ab6      	subcs	r6, r6, r2
    cec6:	4675      	movcs	r5, lr
    cec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    cecc:	085b      	lsrs	r3, r3, #1
    cece:	ea4f 0232 	mov.w	r2, r2, rrx
    ced2:	ebb6 0e02 	subs.w	lr, r6, r2
    ced6:	eb75 0e03 	sbcs.w	lr, r5, r3
    ceda:	bf22      	ittt	cs
    cedc:	1ab6      	subcs	r6, r6, r2
    cede:	4675      	movcs	r5, lr
    cee0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    cee4:	ea55 0e06 	orrs.w	lr, r5, r6
    cee8:	d018      	beq.n	cf1c <__aeabi_ddiv+0x114>
    ceea:	ea4f 1505 	mov.w	r5, r5, lsl #4
    ceee:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    cef2:	ea4f 1606 	mov.w	r6, r6, lsl #4
    cef6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    cefa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    cefe:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    cf02:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    cf06:	d1c0      	bne.n	ce8a <__aeabi_ddiv+0x82>
    cf08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cf0c:	d10b      	bne.n	cf26 <__aeabi_ddiv+0x11e>
    cf0e:	ea41 0100 	orr.w	r1, r1, r0
    cf12:	f04f 0000 	mov.w	r0, #0
    cf16:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    cf1a:	e7b6      	b.n	ce8a <__aeabi_ddiv+0x82>
    cf1c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    cf20:	bf04      	itt	eq
    cf22:	4301      	orreq	r1, r0
    cf24:	2000      	moveq	r0, #0
    cf26:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    cf2a:	bf88      	it	hi
    cf2c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    cf30:	f63f aeaf 	bhi.w	cc92 <__aeabi_dmul+0xde>
    cf34:	ebb5 0c03 	subs.w	ip, r5, r3
    cf38:	bf04      	itt	eq
    cf3a:	ebb6 0c02 	subseq.w	ip, r6, r2
    cf3e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    cf42:	f150 0000 	adcs.w	r0, r0, #0
    cf46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    cf4a:	bd70      	pop	{r4, r5, r6, pc}
    cf4c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    cf50:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    cf54:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    cf58:	bfc2      	ittt	gt
    cf5a:	ebd4 050c 	rsbsgt	r5, r4, ip
    cf5e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    cf62:	bd70      	popgt	{r4, r5, r6, pc}
    cf64:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    cf68:	f04f 0e00 	mov.w	lr, #0
    cf6c:	3c01      	subs	r4, #1
    cf6e:	e690      	b.n	cc92 <__aeabi_dmul+0xde>
    cf70:	ea45 0e06 	orr.w	lr, r5, r6
    cf74:	e68d      	b.n	cc92 <__aeabi_dmul+0xde>
    cf76:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    cf7a:	ea94 0f0c 	teq	r4, ip
    cf7e:	bf08      	it	eq
    cf80:	ea95 0f0c 	teqeq	r5, ip
    cf84:	f43f af3b 	beq.w	cdfe <__aeabi_dmul+0x24a>
    cf88:	ea94 0f0c 	teq	r4, ip
    cf8c:	d10a      	bne.n	cfa4 <__aeabi_ddiv+0x19c>
    cf8e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    cf92:	f47f af34 	bne.w	cdfe <__aeabi_dmul+0x24a>
    cf96:	ea95 0f0c 	teq	r5, ip
    cf9a:	f47f af25 	bne.w	cde8 <__aeabi_dmul+0x234>
    cf9e:	4610      	mov	r0, r2
    cfa0:	4619      	mov	r1, r3
    cfa2:	e72c      	b.n	cdfe <__aeabi_dmul+0x24a>
    cfa4:	ea95 0f0c 	teq	r5, ip
    cfa8:	d106      	bne.n	cfb8 <__aeabi_ddiv+0x1b0>
    cfaa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    cfae:	f43f aefd 	beq.w	cdac <__aeabi_dmul+0x1f8>
    cfb2:	4610      	mov	r0, r2
    cfb4:	4619      	mov	r1, r3
    cfb6:	e722      	b.n	cdfe <__aeabi_dmul+0x24a>
    cfb8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    cfbc:	bf18      	it	ne
    cfbe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    cfc2:	f47f aec5 	bne.w	cd50 <__aeabi_dmul+0x19c>
    cfc6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    cfca:	f47f af0d 	bne.w	cde8 <__aeabi_dmul+0x234>
    cfce:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    cfd2:	f47f aeeb 	bne.w	cdac <__aeabi_dmul+0x1f8>
    cfd6:	e712      	b.n	cdfe <__aeabi_dmul+0x24a>

0000cfd8 <__aeabi_d2uiz>:
    cfd8:	004a      	lsls	r2, r1, #1
    cfda:	d211      	bcs.n	d000 <__aeabi_d2uiz+0x28>
    cfdc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    cfe0:	d211      	bcs.n	d006 <__aeabi_d2uiz+0x2e>
    cfe2:	d50d      	bpl.n	d000 <__aeabi_d2uiz+0x28>
    cfe4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    cfe8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    cfec:	d40e      	bmi.n	d00c <__aeabi_d2uiz+0x34>
    cfee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    cff2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    cff6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    cffa:	fa23 f002 	lsr.w	r0, r3, r2
    cffe:	4770      	bx	lr
    d000:	f04f 0000 	mov.w	r0, #0
    d004:	4770      	bx	lr
    d006:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    d00a:	d102      	bne.n	d012 <__aeabi_d2uiz+0x3a>
    d00c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d010:	4770      	bx	lr
    d012:	f04f 0000 	mov.w	r0, #0
    d016:	4770      	bx	lr

0000d018 <memcmp>:
    d018:	2a03      	cmp	r2, #3
    d01a:	b470      	push	{r4, r5, r6}
    d01c:	d926      	bls.n	d06c <memcmp+0x54>
    d01e:	ea40 0301 	orr.w	r3, r0, r1
    d022:	079b      	lsls	r3, r3, #30
    d024:	d011      	beq.n	d04a <memcmp+0x32>
    d026:	7804      	ldrb	r4, [r0, #0]
    d028:	780d      	ldrb	r5, [r1, #0]
    d02a:	42ac      	cmp	r4, r5
    d02c:	d122      	bne.n	d074 <memcmp+0x5c>
    d02e:	4402      	add	r2, r0
    d030:	1c43      	adds	r3, r0, #1
    d032:	e005      	b.n	d040 <memcmp+0x28>
    d034:	f813 4b01 	ldrb.w	r4, [r3], #1
    d038:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    d03c:	42ac      	cmp	r4, r5
    d03e:	d119      	bne.n	d074 <memcmp+0x5c>
    d040:	4293      	cmp	r3, r2
    d042:	d1f7      	bne.n	d034 <memcmp+0x1c>
    d044:	2000      	movs	r0, #0
    d046:	bc70      	pop	{r4, r5, r6}
    d048:	4770      	bx	lr
    d04a:	460c      	mov	r4, r1
    d04c:	4603      	mov	r3, r0
    d04e:	681e      	ldr	r6, [r3, #0]
    d050:	6825      	ldr	r5, [r4, #0]
    d052:	4618      	mov	r0, r3
    d054:	42ae      	cmp	r6, r5
    d056:	4621      	mov	r1, r4
    d058:	f103 0304 	add.w	r3, r3, #4
    d05c:	f104 0404 	add.w	r4, r4, #4
    d060:	d104      	bne.n	d06c <memcmp+0x54>
    d062:	3a04      	subs	r2, #4
    d064:	2a03      	cmp	r2, #3
    d066:	4618      	mov	r0, r3
    d068:	4621      	mov	r1, r4
    d06a:	d8f0      	bhi.n	d04e <memcmp+0x36>
    d06c:	2a00      	cmp	r2, #0
    d06e:	d1da      	bne.n	d026 <memcmp+0xe>
    d070:	4610      	mov	r0, r2
    d072:	e7e8      	b.n	d046 <memcmp+0x2e>
    d074:	1b60      	subs	r0, r4, r5
    d076:	bc70      	pop	{r4, r5, r6}
    d078:	4770      	bx	lr
    d07a:	bf00      	nop

0000d07c <memcpy>:
    d07c:	4684      	mov	ip, r0
    d07e:	ea41 0300 	orr.w	r3, r1, r0
    d082:	f013 0303 	ands.w	r3, r3, #3
    d086:	d149      	bne.n	d11c <memcpy+0xa0>
    d088:	3a40      	subs	r2, #64	; 0x40
    d08a:	d323      	bcc.n	d0d4 <memcpy+0x58>
    d08c:	680b      	ldr	r3, [r1, #0]
    d08e:	6003      	str	r3, [r0, #0]
    d090:	684b      	ldr	r3, [r1, #4]
    d092:	6043      	str	r3, [r0, #4]
    d094:	688b      	ldr	r3, [r1, #8]
    d096:	6083      	str	r3, [r0, #8]
    d098:	68cb      	ldr	r3, [r1, #12]
    d09a:	60c3      	str	r3, [r0, #12]
    d09c:	690b      	ldr	r3, [r1, #16]
    d09e:	6103      	str	r3, [r0, #16]
    d0a0:	694b      	ldr	r3, [r1, #20]
    d0a2:	6143      	str	r3, [r0, #20]
    d0a4:	698b      	ldr	r3, [r1, #24]
    d0a6:	6183      	str	r3, [r0, #24]
    d0a8:	69cb      	ldr	r3, [r1, #28]
    d0aa:	61c3      	str	r3, [r0, #28]
    d0ac:	6a0b      	ldr	r3, [r1, #32]
    d0ae:	6203      	str	r3, [r0, #32]
    d0b0:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    d0b2:	6243      	str	r3, [r0, #36]	; 0x24
    d0b4:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    d0b6:	6283      	str	r3, [r0, #40]	; 0x28
    d0b8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    d0ba:	62c3      	str	r3, [r0, #44]	; 0x2c
    d0bc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    d0be:	6303      	str	r3, [r0, #48]	; 0x30
    d0c0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    d0c2:	6343      	str	r3, [r0, #52]	; 0x34
    d0c4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    d0c6:	6383      	str	r3, [r0, #56]	; 0x38
    d0c8:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    d0ca:	63c3      	str	r3, [r0, #60]	; 0x3c
    d0cc:	3040      	adds	r0, #64	; 0x40
    d0ce:	3140      	adds	r1, #64	; 0x40
    d0d0:	3a40      	subs	r2, #64	; 0x40
    d0d2:	d2db      	bcs.n	d08c <memcpy+0x10>
    d0d4:	3230      	adds	r2, #48	; 0x30
    d0d6:	d30b      	bcc.n	d0f0 <memcpy+0x74>
    d0d8:	680b      	ldr	r3, [r1, #0]
    d0da:	6003      	str	r3, [r0, #0]
    d0dc:	684b      	ldr	r3, [r1, #4]
    d0de:	6043      	str	r3, [r0, #4]
    d0e0:	688b      	ldr	r3, [r1, #8]
    d0e2:	6083      	str	r3, [r0, #8]
    d0e4:	68cb      	ldr	r3, [r1, #12]
    d0e6:	60c3      	str	r3, [r0, #12]
    d0e8:	3010      	adds	r0, #16
    d0ea:	3110      	adds	r1, #16
    d0ec:	3a10      	subs	r2, #16
    d0ee:	d2f3      	bcs.n	d0d8 <memcpy+0x5c>
    d0f0:	320c      	adds	r2, #12
    d0f2:	d305      	bcc.n	d100 <memcpy+0x84>
    d0f4:	f851 3b04 	ldr.w	r3, [r1], #4
    d0f8:	f840 3b04 	str.w	r3, [r0], #4
    d0fc:	3a04      	subs	r2, #4
    d0fe:	d2f9      	bcs.n	d0f4 <memcpy+0x78>
    d100:	3204      	adds	r2, #4
    d102:	d008      	beq.n	d116 <memcpy+0x9a>
    d104:	07d2      	lsls	r2, r2, #31
    d106:	bf1c      	itt	ne
    d108:	f811 3b01 	ldrbne.w	r3, [r1], #1
    d10c:	f800 3b01 	strbne.w	r3, [r0], #1
    d110:	d301      	bcc.n	d116 <memcpy+0x9a>
    d112:	880b      	ldrh	r3, [r1, #0]
    d114:	8003      	strh	r3, [r0, #0]
    d116:	4660      	mov	r0, ip
    d118:	4770      	bx	lr
    d11a:	bf00      	nop
    d11c:	2a08      	cmp	r2, #8
    d11e:	d313      	bcc.n	d148 <memcpy+0xcc>
    d120:	078b      	lsls	r3, r1, #30
    d122:	d0b1      	beq.n	d088 <memcpy+0xc>
    d124:	f010 0303 	ands.w	r3, r0, #3
    d128:	d0ae      	beq.n	d088 <memcpy+0xc>
    d12a:	f1c3 0304 	rsb	r3, r3, #4
    d12e:	1ad2      	subs	r2, r2, r3
    d130:	07db      	lsls	r3, r3, #31
    d132:	bf1c      	itt	ne
    d134:	f811 3b01 	ldrbne.w	r3, [r1], #1
    d138:	f800 3b01 	strbne.w	r3, [r0], #1
    d13c:	d3a4      	bcc.n	d088 <memcpy+0xc>
    d13e:	f831 3b02 	ldrh.w	r3, [r1], #2
    d142:	f820 3b02 	strh.w	r3, [r0], #2
    d146:	e79f      	b.n	d088 <memcpy+0xc>
    d148:	3a04      	subs	r2, #4
    d14a:	d3d9      	bcc.n	d100 <memcpy+0x84>
    d14c:	3a01      	subs	r2, #1
    d14e:	f811 3b01 	ldrb.w	r3, [r1], #1
    d152:	f800 3b01 	strb.w	r3, [r0], #1
    d156:	d2f9      	bcs.n	d14c <memcpy+0xd0>
    d158:	780b      	ldrb	r3, [r1, #0]
    d15a:	7003      	strb	r3, [r0, #0]
    d15c:	784b      	ldrb	r3, [r1, #1]
    d15e:	7043      	strb	r3, [r0, #1]
    d160:	788b      	ldrb	r3, [r1, #2]
    d162:	7083      	strb	r3, [r0, #2]
    d164:	4660      	mov	r0, ip
    d166:	4770      	bx	lr

0000d168 <strlen>:
    d168:	f020 0103 	bic.w	r1, r0, #3
    d16c:	f010 0003 	ands.w	r0, r0, #3
    d170:	f1c0 0000 	rsb	r0, r0, #0
    d174:	f851 3b04 	ldr.w	r3, [r1], #4
    d178:	f100 0c04 	add.w	ip, r0, #4
    d17c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    d180:	f06f 0200 	mvn.w	r2, #0
    d184:	bf1c      	itt	ne
    d186:	fa22 f20c 	lsrne.w	r2, r2, ip
    d18a:	4313      	orrne	r3, r2
    d18c:	f04f 0c01 	mov.w	ip, #1
    d190:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    d194:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    d198:	eba3 020c 	sub.w	r2, r3, ip
    d19c:	ea22 0203 	bic.w	r2, r2, r3
    d1a0:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    d1a4:	bf04      	itt	eq
    d1a6:	f851 3b04 	ldreq.w	r3, [r1], #4
    d1aa:	3004      	addeq	r0, #4
    d1ac:	d0f4      	beq.n	d198 <strlen+0x30>
    d1ae:	f1c2 0100 	rsb	r1, r2, #0
    d1b2:	ea02 0201 	and.w	r2, r2, r1
    d1b6:	fab2 f282 	clz	r2, r2
    d1ba:	f1c2 021f 	rsb	r2, r2, #31
    d1be:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    d1c2:	4770      	bx	lr
    d1c4:	00000043 	.word	0x00000043

0000d1c8 <_global_impure_ptr>:
    d1c8:	10000020                                 ...

0000d1cc <advertising_channels>:
    d1cc:	00270c00                                ..'.

0000d1d0 <data_channels>:
    d1d0:	04030201 08070605 0d0b0a09 11100f0e     ................
    d1e0:	15141312 19181716 1d1c1b1a 21201f1e     .............. !
    d1f0:	25242322 00000026                       "#$%&...

0000d1f8 <payload>:
    d1f8:	aaaaaaca aaaaaaaa aaaaaaaa aaaaaaaa     ................
    d208:	aaaaaaaa                                ....

0000d20c <whitening>:
    d20c:	01010101 01000100 00000100 00010000     ................
    d21c:	01000101 00010101 01010100 00010000     ................
    d22c:	01010001 01010000 00000000 00010100     ................
    d23c:	01000101 01010100 00000100 00010100     ................
    d24c:	00000100 00000100 00000000 01000001     ................
    d25c:	01010000 00000100 01010101 01010100     ................
    d26c:	00000000 01010101 00010101 01010000     ................
    d27c:	01010001 01000000 00000100 00010001     ................

0000d28c <whitening_index>:
    d28c:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    d29c:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    d2ac:	5a541b28 662f703f                       (.TZ?p/f

0000d2b4 <hop_interval_lut>:
    d2b4:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    d2c4:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    d2d4:	120c0916 00000024                       ....$...

0000d2dc <whitening_word>:
    d2dc:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    d2ec:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    d2fc:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    d30c:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    d31c:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    d32c:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    d33c:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    d34c:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    d35c:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    d36c:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    d37c:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    d38c:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    d39c:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    d3ac:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    d3bc:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    d3cc:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    d3dc:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    d3ec:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    d3fc:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    d40c:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    d41c:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    d42c:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    d43c:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    d44c:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    d45c:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    d46c:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    d47c:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    d48c:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    d49c:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    d4ac:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    d4bc:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    d4cc:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    d4dc:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    d4ec:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    d4fc:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    d50c:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    d51c:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    d52c:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    d53c:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    d54c:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    d55c:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    d56c:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    d57c:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    d58c:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    d59c:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    d5ac:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    d5bc:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    d5cc:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    d5dc:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    d5ec:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    d5fc:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    d60c:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    d61c:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    d62c:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    d63c:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    d64c:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    d65c:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    d66c:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    d67c:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    d68c:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    d69c:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    d6ac:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    d6bc:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    d6cc:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    d6dc:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    d6ec:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    d6fc:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    d70c:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    d71c:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    d72c:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    d73c:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    d74c:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    d75c:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    d76c:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    d77c:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    d78c:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    d79c:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    d7ac:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    d7bc:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    d7cc:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    d7dc:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    d7ec:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    d7fc:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    d80c:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    d81c:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    d82c:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    d83c:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    d84c:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    d85c:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    d86c:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    d87c:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    d88c:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    d89c:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    d8ac:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    d8bc:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    d8cc:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    d8dc:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    d8ec:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    d8fc:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    d90c:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    d91c:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    d92c:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    d93c:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    d94c:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    d95c:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    d96c:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    d97c:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    d98c:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    d99c:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    d9ac:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    d9bc:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    d9cc:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    d9dc:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    d9ec:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    d9fc:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    da0c:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    da1c:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    da2c:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    da3c:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    da4c:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

0000da5c <compile_info>:
    da5c:	72656275 746f6f74 30322068 312d3531     ubertooth 2015-1
    da6c:	31522d30 6f722820 7740746f 69706965     0-R1 (root@weipi
    da7c:	2029676e 206e6f4d 206c754a 30203731     ng) Mon Jul 17 0
    da8c:	37313a36 2035303a 2054534b 37313032     6:17:05 KST 2017
    da9c:	00000000 35313032 2d30312d 00003152     ....2015-10-R1..
    daac:	00000001 00000001 00000001 00000001     ................
    dabc:	ffff0900 ffffffff ff050102 0000ffff     ................
    dacc:	0985096c 0000099e 4b006fb3 7210e485     l........o.K...r
    dadc:	4ae80cee 871fdc96 aaaaaaca aaaaaaaa     ...J............
    daec:	aaaaaaaa aaaaaaaa aaaaaaaa 3051b6f3     ..............Q0
    dafc:	000000e0 03010200 03000100 01020001     ................
    db0c:	00000100 04020301 04020304 03040304     ................
    db1c:	00000203                                ....

0000db20 <abDescriptors>:
    db20:	02000112 400000ff 60021d50 02010101     .......@P..`....
    db30:	02090103 01010020 096e8000 02000004     .... .....n.....
    db40:	000000ff 02820507 07000040 40020505     ........@......@
    db50:	03040000 035c0409 00740068 00700074     ......\.h.t.t.p.
    db60:	002f003a 0067002f 00740069 00750068     :././.g.i.t.h.u.
    db70:	002e0062 006f0063 002f006d 00720067     b...c.o.m./.g.r.
    db80:	00610065 00730074 006f0063 00740074     e.a.t.s.c.o.t.t.
    db90:	00610067 00670064 00740065 002f0073     g.a.d.g.e.t.s./.
    dba0:	00620075 00720065 006f0074 0074006f     u.b.e.r.t.o.o.t.
    dbb0:	031e0068 006c0062 00650075 006f0074     h...b.l.u.e.t.o.
    dbc0:	0074006f 005f0068 00780072 00780074     o.t.h._.r.x.t.x.
    dbd0:	00300312 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
    dbe0:	00000031 6361387b 38613734 63632d38     1...{8ac47a88-cc
    dbf0:	342d3632 2d396161 62373838 6332342d     26-4aa9-887b-42c
    dc00:	66633861 36613730 00007d33 0000ab55     a8cf07a63}..U...
    dc10:	0000ab89 0000aba1 0000ac89 0000ab41     ............A...
    dc20:	0000ab41 0000ab41 0000aced 0000ab89     A...A...........
    dc30:	0000ad05 0000ab41 0000ab41 0000ab41     ....A...A...A...
    dc40:	0000ab55 0000ab89 0000add9 0000af99     U...............
    dc50:	0000ae59 0000af1d                       Y.......

0000dc58 <abExtendedOsFeatureDescriptor>:
    dc58:	00000028 00040100 00000001 00000000     (...............
    dc68:	49570100 4253554e 00000000 00000000     ..WINUSB........
    dc78:	00000000 00000000                       ........

0000dc80 <_init>:
    dc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc82:	bf00      	nop
    dc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
    dc86:	bc08      	pop	{r3}
    dc88:	469e      	mov	lr, r3
    dc8a:	4770      	bx	lr

0000dc8c <__init_array_start>:
    dc8c:	00004215 	.word	0x00004215

0000dc90 <__frame_dummy_init_array_entry>:
    dc90:	000040f1                                .@..

0000dc94 <_fini>:
    dc94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc96:	bf00      	nop
    dc98:	bcf8      	pop	{r3, r4, r5, r6, r7}
    dc9a:	bc08      	pop	{r3}
    dc9c:	469e      	mov	lr, r3
    dc9e:	4770      	bx	lr

0000dca0 <__fini_array_start>:
    dca0:	000040cd 	.word	0x000040cd

0000dca4 <__fini_array_end>:
    dca4:	00000000 	.word	0x00000000
