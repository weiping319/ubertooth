
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00009150  00004000  00004000  00004000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         0000093e  10000020  0000d150  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002930  10000960  0000da8e  00010960  2**3
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0001095e  2**0
                  CONTENTS, READONLY
  5 .comment      00000070  00000000  00000000  00010987  2**0
                  CONTENTS, READONLY
  6 .debug_frame  00001dc4  00000000  00000000  000109f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000054e5  00000000  00000000  000127bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000152c  00000000  00000000  00017ca1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000700  00000000  00000000  000191cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000620  00000000  00000000  000198cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002a73  00000000  00000000  00019eed  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002318  00000000  00000000  0001c960  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 71 a5 00 00 dd a5 00 00 dd a5 00 00     .?..q...........
    4010:	dd a5 00 00 dd a5 00 00 dd a5 00 00 00 00 00 00     ................
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 dd a5 00 00     ................
    4030:	dd a5 00 00 00 00 00 00 dd a5 00 00 dd a5 00 00     ................
    4040:	dd a5 00 00 9d 56 00 00 dd a5 00 00 dd a5 00 00     .....V..........
    4050:	dd a5 00 00 dd a5 00 00 dd a5 00 00 dd a5 00 00     ................
    4060:	dd a5 00 00 dd a5 00 00 dd a5 00 00 dd a5 00 00     ................
    4070:	dd a5 00 00 dd a5 00 00 dd a5 00 00 dd a5 00 00     ................
    4080:	dd a5 00 00 dd a5 00 00 dd a5 00 00 dd a5 00 00     ................
    4090:	dd a5 00 00 b9 57 00 00 dd a5 00 00 dd a5 00 00     .....W..........
    40a0:	65 a5 00 00 dd a5 00 00 81 5c 00 00 dd a5 00 00     e........\......
    40b0:	dd a5 00 00 dd a5 00 00 dd a5 00 00 dd a5 00 00     ................
    40c0:	dd a5 00 00 dd a5 00 00 dd a5 00 00                 ............

000040cc <__do_global_dtors_aux>:
    40cc:	b510      	push	{r4, lr}
    40ce:	4c05      	ldr	r4, [pc, #20]	; (40e4 <__do_global_dtors_aux+0x18>)
    40d0:	7823      	ldrb	r3, [r4, #0]
    40d2:	b933      	cbnz	r3, 40e2 <__do_global_dtors_aux+0x16>
    40d4:	4b04      	ldr	r3, [pc, #16]	; (40e8 <__do_global_dtors_aux+0x1c>)
    40d6:	b113      	cbz	r3, 40de <__do_global_dtors_aux+0x12>
    40d8:	4804      	ldr	r0, [pc, #16]	; (40ec <__do_global_dtors_aux+0x20>)
    40da:	f3af 8000 	nop.w
    40de:	2301      	movs	r3, #1
    40e0:	7023      	strb	r3, [r4, #0]
    40e2:	bd10      	pop	{r4, pc}
    40e4:	10000960 	.word	0x10000960
    40e8:	00000000 	.word	0x00000000
    40ec:	0000d12c 	.word	0x0000d12c

000040f0 <frame_dummy>:
    40f0:	4b08      	ldr	r3, [pc, #32]	; (4114 <frame_dummy+0x24>)
    40f2:	b510      	push	{r4, lr}
    40f4:	b11b      	cbz	r3, 40fe <frame_dummy+0xe>
    40f6:	4808      	ldr	r0, [pc, #32]	; (4118 <frame_dummy+0x28>)
    40f8:	4908      	ldr	r1, [pc, #32]	; (411c <frame_dummy+0x2c>)
    40fa:	f3af 8000 	nop.w
    40fe:	4808      	ldr	r0, [pc, #32]	; (4120 <frame_dummy+0x30>)
    4100:	6803      	ldr	r3, [r0, #0]
    4102:	b903      	cbnz	r3, 4106 <frame_dummy+0x16>
    4104:	bd10      	pop	{r4, pc}
    4106:	4b07      	ldr	r3, [pc, #28]	; (4124 <frame_dummy+0x34>)
    4108:	2b00      	cmp	r3, #0
    410a:	d0fb      	beq.n	4104 <frame_dummy+0x14>
    410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4110:	4718      	bx	r3
    4112:	bf00      	nop
    4114:	00000000 	.word	0x00000000
    4118:	0000d12c 	.word	0x0000d12c
    411c:	10000964 	.word	0x10000964
    4120:	10000960 	.word	0x10000960
    4124:	00000000 	.word	0x00000000

00004128 <__libc_init_array>:
    4128:	b570      	push	{r4, r5, r6, lr}
    412a:	4e0f      	ldr	r6, [pc, #60]	; (4168 <__libc_init_array+0x40>)
    412c:	4d0f      	ldr	r5, [pc, #60]	; (416c <__libc_init_array+0x44>)
    412e:	1b76      	subs	r6, r6, r5
    4130:	10b6      	asrs	r6, r6, #2
    4132:	bf18      	it	ne
    4134:	2400      	movne	r4, #0
    4136:	d005      	beq.n	4144 <__libc_init_array+0x1c>
    4138:	3401      	adds	r4, #1
    413a:	f855 3b04 	ldr.w	r3, [r5], #4
    413e:	4798      	blx	r3
    4140:	42a6      	cmp	r6, r4
    4142:	d1f9      	bne.n	4138 <__libc_init_array+0x10>
    4144:	4e0a      	ldr	r6, [pc, #40]	; (4170 <__libc_init_array+0x48>)
    4146:	4d0b      	ldr	r5, [pc, #44]	; (4174 <__libc_init_array+0x4c>)
    4148:	f008 fff0 	bl	d12c <_init>
    414c:	1b76      	subs	r6, r6, r5
    414e:	10b6      	asrs	r6, r6, #2
    4150:	bf18      	it	ne
    4152:	2400      	movne	r4, #0
    4154:	d006      	beq.n	4164 <__libc_init_array+0x3c>
    4156:	3401      	adds	r4, #1
    4158:	f855 3b04 	ldr.w	r3, [r5], #4
    415c:	4798      	blx	r3
    415e:	42a6      	cmp	r6, r4
    4160:	d1f9      	bne.n	4156 <__libc_init_array+0x2e>
    4162:	bd70      	pop	{r4, r5, r6, pc}
    4164:	bd70      	pop	{r4, r5, r6, pc}
    4166:	bf00      	nop
    4168:	0000d138 	.word	0x0000d138
    416c:	0000d138 	.word	0x0000d138
    4170:	0000d140 	.word	0x0000d140
    4174:	0000d138 	.word	0x0000d138

00004178 <memset>:
    4178:	b470      	push	{r4, r5, r6}
    417a:	0784      	lsls	r4, r0, #30
    417c:	d046      	beq.n	420c <memset+0x94>
    417e:	1e54      	subs	r4, r2, #1
    4180:	2a00      	cmp	r2, #0
    4182:	d041      	beq.n	4208 <memset+0x90>
    4184:	b2cd      	uxtb	r5, r1
    4186:	4603      	mov	r3, r0
    4188:	e002      	b.n	4190 <memset+0x18>
    418a:	1e62      	subs	r2, r4, #1
    418c:	b3e4      	cbz	r4, 4208 <memset+0x90>
    418e:	4614      	mov	r4, r2
    4190:	f803 5b01 	strb.w	r5, [r3], #1
    4194:	079a      	lsls	r2, r3, #30
    4196:	d1f8      	bne.n	418a <memset+0x12>
    4198:	2c03      	cmp	r4, #3
    419a:	d92e      	bls.n	41fa <memset+0x82>
    419c:	b2cd      	uxtb	r5, r1
    419e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    41a2:	2c0f      	cmp	r4, #15
    41a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    41a8:	d919      	bls.n	41de <memset+0x66>
    41aa:	4626      	mov	r6, r4
    41ac:	f103 0210 	add.w	r2, r3, #16
    41b0:	3e10      	subs	r6, #16
    41b2:	2e0f      	cmp	r6, #15
    41b4:	f842 5c10 	str.w	r5, [r2, #-16]
    41b8:	f842 5c0c 	str.w	r5, [r2, #-12]
    41bc:	f842 5c08 	str.w	r5, [r2, #-8]
    41c0:	f842 5c04 	str.w	r5, [r2, #-4]
    41c4:	f102 0210 	add.w	r2, r2, #16
    41c8:	d8f2      	bhi.n	41b0 <memset+0x38>
    41ca:	f1a4 0210 	sub.w	r2, r4, #16
    41ce:	f022 020f 	bic.w	r2, r2, #15
    41d2:	f004 040f 	and.w	r4, r4, #15
    41d6:	3210      	adds	r2, #16
    41d8:	2c03      	cmp	r4, #3
    41da:	4413      	add	r3, r2
    41dc:	d90d      	bls.n	41fa <memset+0x82>
    41de:	461e      	mov	r6, r3
    41e0:	4622      	mov	r2, r4
    41e2:	3a04      	subs	r2, #4
    41e4:	2a03      	cmp	r2, #3
    41e6:	f846 5b04 	str.w	r5, [r6], #4
    41ea:	d8fa      	bhi.n	41e2 <memset+0x6a>
    41ec:	1f22      	subs	r2, r4, #4
    41ee:	f022 0203 	bic.w	r2, r2, #3
    41f2:	3204      	adds	r2, #4
    41f4:	4413      	add	r3, r2
    41f6:	f004 0403 	and.w	r4, r4, #3
    41fa:	b12c      	cbz	r4, 4208 <memset+0x90>
    41fc:	b2c9      	uxtb	r1, r1
    41fe:	441c      	add	r4, r3
    4200:	f803 1b01 	strb.w	r1, [r3], #1
    4204:	42a3      	cmp	r3, r4
    4206:	d1fb      	bne.n	4200 <memset+0x88>
    4208:	bc70      	pop	{r4, r5, r6}
    420a:	4770      	bx	lr
    420c:	4614      	mov	r4, r2
    420e:	4603      	mov	r3, r0
    4210:	e7c2      	b.n	4198 <memset+0x20>
    4212:	bf00      	nop

00004214 <register_fini>:
    4214:	4b02      	ldr	r3, [pc, #8]	; (4220 <register_fini+0xc>)
    4216:	b113      	cbz	r3, 421e <register_fini+0xa>
    4218:	4802      	ldr	r0, [pc, #8]	; (4224 <register_fini+0x10>)
    421a:	f000 b805 	b.w	4228 <atexit>
    421e:	4770      	bx	lr
    4220:	00000000 	.word	0x00000000
    4224:	00004235 	.word	0x00004235

00004228 <atexit>:
    4228:	4601      	mov	r1, r0
    422a:	2000      	movs	r0, #0
    422c:	4602      	mov	r2, r0
    422e:	4603      	mov	r3, r0
    4230:	f000 b816 	b.w	4260 <__register_exitproc>

00004234 <__libc_fini_array>:
    4234:	b538      	push	{r3, r4, r5, lr}
    4236:	4b08      	ldr	r3, [pc, #32]	; (4258 <__libc_fini_array+0x24>)
    4238:	4d08      	ldr	r5, [pc, #32]	; (425c <__libc_fini_array+0x28>)
    423a:	1aed      	subs	r5, r5, r3
    423c:	10ac      	asrs	r4, r5, #2
    423e:	bf18      	it	ne
    4240:	18ed      	addne	r5, r5, r3
    4242:	d005      	beq.n	4250 <__libc_fini_array+0x1c>
    4244:	3c01      	subs	r4, #1
    4246:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    424a:	4798      	blx	r3
    424c:	2c00      	cmp	r4, #0
    424e:	d1f9      	bne.n	4244 <__libc_fini_array+0x10>
    4250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4254:	f008 bf74 	b.w	d140 <_fini>
    4258:	0000d14c 	.word	0x0000d14c
    425c:	0000d150 	.word	0x0000d150

00004260 <__register_exitproc>:
    4260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4264:	4c25      	ldr	r4, [pc, #148]	; (42fc <__register_exitproc+0x9c>)
    4266:	4606      	mov	r6, r0
    4268:	6825      	ldr	r5, [r4, #0]
    426a:	4688      	mov	r8, r1
    426c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    4270:	4692      	mov	sl, r2
    4272:	4699      	mov	r9, r3
    4274:	b3c4      	cbz	r4, 42e8 <__register_exitproc+0x88>
    4276:	6860      	ldr	r0, [r4, #4]
    4278:	281f      	cmp	r0, #31
    427a:	dc17      	bgt.n	42ac <__register_exitproc+0x4c>
    427c:	1c41      	adds	r1, r0, #1
    427e:	b176      	cbz	r6, 429e <__register_exitproc+0x3e>
    4280:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    4284:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    4288:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
    428c:	2201      	movs	r2, #1
    428e:	4082      	lsls	r2, r0
    4290:	4315      	orrs	r5, r2
    4292:	2e02      	cmp	r6, #2
    4294:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    4298:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
    429c:	d01e      	beq.n	42dc <__register_exitproc+0x7c>
    429e:	1c83      	adds	r3, r0, #2
    42a0:	6061      	str	r1, [r4, #4]
    42a2:	2000      	movs	r0, #0
    42a4:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
    42a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42ac:	4b14      	ldr	r3, [pc, #80]	; (4300 <__register_exitproc+0xa0>)
    42ae:	b303      	cbz	r3, 42f2 <__register_exitproc+0x92>
    42b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42b4:	f3af 8000 	nop.w
    42b8:	4604      	mov	r4, r0
    42ba:	b1d0      	cbz	r0, 42f2 <__register_exitproc+0x92>
    42bc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    42c0:	2700      	movs	r7, #0
    42c2:	e884 0088 	stmia.w	r4, {r3, r7}
    42c6:	4638      	mov	r0, r7
    42c8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42cc:	2101      	movs	r1, #1
    42ce:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    42d2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    42d6:	2e00      	cmp	r6, #0
    42d8:	d0e1      	beq.n	429e <__register_exitproc+0x3e>
    42da:	e7d1      	b.n	4280 <__register_exitproc+0x20>
    42dc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    42e0:	431a      	orrs	r2, r3
    42e2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    42e6:	e7da      	b.n	429e <__register_exitproc+0x3e>
    42e8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    42ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42f0:	e7c1      	b.n	4276 <__register_exitproc+0x16>
    42f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42fa:	bf00      	nop
    42fc:	0000c6a0 	.word	0x0000c6a0
    4300:	00000000 	.word	0x00000000

00004304 <rssi_reset>:
int8_t rssi_min;
uint8_t rssi_count = 0;
int32_t rssi_sum = 0;

static void rssi_reset(void)
{
    4304:	b480      	push	{r7}
    4306:	af00      	add	r7, sp, #0
	rssi_count = 0;
    4308:	4b07      	ldr	r3, [pc, #28]	; (4328 <rssi_reset+0x24>)
    430a:	2200      	movs	r2, #0
    430c:	701a      	strb	r2, [r3, #0]
	rssi_sum = 0;
    430e:	4b07      	ldr	r3, [pc, #28]	; (432c <rssi_reset+0x28>)
    4310:	2200      	movs	r2, #0
    4312:	601a      	str	r2, [r3, #0]
	rssi_max = INT8_MIN;
    4314:	4b06      	ldr	r3, [pc, #24]	; (4330 <rssi_reset+0x2c>)
    4316:	2280      	movs	r2, #128	; 0x80
    4318:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    431a:	4b06      	ldr	r3, [pc, #24]	; (4334 <rssi_reset+0x30>)
    431c:	227f      	movs	r2, #127	; 0x7f
    431e:	701a      	strb	r2, [r3, #0]
}
    4320:	46bd      	mov	sp, r7
    4322:	f85d 7b04 	ldr.w	r7, [sp], #4
    4326:	4770      	bx	lr
    4328:	10000a49 	.word	0x10000a49
    432c:	10000a4c 	.word	0x10000a4c
    4330:	10000b0c 	.word	0x10000b0c
    4334:	10000bc0 	.word	0x10000bc0

00004338 <rssi_add>:

static void rssi_add(int8_t v)
{
    4338:	b480      	push	{r7}
    433a:	b083      	sub	sp, #12
    433c:	af00      	add	r7, sp, #0
    433e:	4603      	mov	r3, r0
    4340:	71fb      	strb	r3, [r7, #7]
	rssi_max = (v > rssi_max) ? v : rssi_max;
    4342:	4b14      	ldr	r3, [pc, #80]	; (4394 <rssi_add+0x5c>)
    4344:	781b      	ldrb	r3, [r3, #0]
    4346:	b25a      	sxtb	r2, r3
    4348:	f997 3007 	ldrsb.w	r3, [r7, #7]
    434c:	4293      	cmp	r3, r2
    434e:	bfb8      	it	lt
    4350:	4613      	movlt	r3, r2
    4352:	b2da      	uxtb	r2, r3
    4354:	4b0f      	ldr	r3, [pc, #60]	; (4394 <rssi_add+0x5c>)
    4356:	701a      	strb	r2, [r3, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    4358:	4b0f      	ldr	r3, [pc, #60]	; (4398 <rssi_add+0x60>)
    435a:	781b      	ldrb	r3, [r3, #0]
    435c:	b25a      	sxtb	r2, r3
    435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4362:	4293      	cmp	r3, r2
    4364:	bfa8      	it	ge
    4366:	4613      	movge	r3, r2
    4368:	b2da      	uxtb	r2, r3
    436a:	4b0b      	ldr	r3, [pc, #44]	; (4398 <rssi_add+0x60>)
    436c:	701a      	strb	r2, [r3, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4372:	021a      	lsls	r2, r3, #8
    4374:	4b09      	ldr	r3, [pc, #36]	; (439c <rssi_add+0x64>)
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	4413      	add	r3, r2
    437a:	4a08      	ldr	r2, [pc, #32]	; (439c <rssi_add+0x64>)
    437c:	6013      	str	r3, [r2, #0]
	rssi_count += 1;
    437e:	4b08      	ldr	r3, [pc, #32]	; (43a0 <rssi_add+0x68>)
    4380:	781b      	ldrb	r3, [r3, #0]
    4382:	3301      	adds	r3, #1
    4384:	b2da      	uxtb	r2, r3
    4386:	4b06      	ldr	r3, [pc, #24]	; (43a0 <rssi_add+0x68>)
    4388:	701a      	strb	r2, [r3, #0]
}
    438a:	370c      	adds	r7, #12
    438c:	46bd      	mov	sp, r7
    438e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4392:	4770      	bx	lr
    4394:	10000b0c 	.word	0x10000b0c
    4398:	10000bc0 	.word	0x10000bc0
    439c:	10000a4c 	.word	0x10000a4c
    43a0:	10000a49 	.word	0x10000a49

000043a4 <rssi_iir_update>:

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
static void rssi_iir_update(void)
{
    43a4:	b480      	push	{r7}
    43a6:	b085      	sub	sp, #20
    43a8:	af00      	add	r7, sp, #0
	int32_t avg;
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first
	 * slot of array if not sweeping. */
	if (hop_mode > 0)
    43aa:	4b1f      	ldr	r3, [pc, #124]	; (4428 <rssi_iir_update+0x84>)
    43ac:	781b      	ldrb	r3, [r3, #0]
    43ae:	2b00      	cmp	r3, #0
    43b0:	d006      	beq.n	43c0 <rssi_iir_update+0x1c>
		i = channel - 2402;
    43b2:	4b1e      	ldr	r3, [pc, #120]	; (442c <rssi_iir_update+0x88>)
    43b4:	881b      	ldrh	r3, [r3, #0]
    43b6:	b29b      	uxth	r3, r3
    43b8:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    43bc:	60fb      	str	r3, [r7, #12]
    43be:	e001      	b.n	43c4 <rssi_iir_update+0x20>
	else
		i = 0;
    43c0:	2300      	movs	r3, #0
    43c2:	60fb      	str	r3, [r7, #12]

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    43c4:	4b1a      	ldr	r3, [pc, #104]	; (4430 <rssi_iir_update+0x8c>)
    43c6:	781b      	ldrb	r3, [r3, #0]
    43c8:	2b00      	cmp	r3, #0
    43ca:	d008      	beq.n	43de <rssi_iir_update+0x3a>
		avg = (rssi_sum  + 128) / rssi_count;
    43cc:	4b19      	ldr	r3, [pc, #100]	; (4434 <rssi_iir_update+0x90>)
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	3380      	adds	r3, #128	; 0x80
    43d2:	4a17      	ldr	r2, [pc, #92]	; (4430 <rssi_iir_update+0x8c>)
    43d4:	7812      	ldrb	r2, [r2, #0]
    43d6:	fb93 f3f2 	sdiv	r3, r3, r2
    43da:	60bb      	str	r3, [r7, #8]
    43dc:	e001      	b.n	43e2 <rssi_iir_update+0x3e>
	else
		avg = 0; // really an error
    43de:	2300      	movs	r3, #0
    43e0:	60bb      	str	r3, [r7, #8]
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    43e2:	4a15      	ldr	r2, [pc, #84]	; (4438 <rssi_iir_update+0x94>)
    43e4:	68fb      	ldr	r3, [r7, #12]
    43e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    43ea:	b21a      	sxth	r2, r3
    43ec:	4613      	mov	r3, r2
    43ee:	019b      	lsls	r3, r3, #6
    43f0:	1a9b      	subs	r3, r3, r2
    43f2:	009b      	lsls	r3, r3, #2
    43f4:	4413      	add	r3, r2
    43f6:	607b      	str	r3, [r7, #4]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    43f8:	68ba      	ldr	r2, [r7, #8]
    43fa:	4613      	mov	r3, r2
    43fc:	005b      	lsls	r3, r3, #1
    43fe:	4413      	add	r3, r2
    4400:	687a      	ldr	r2, [r7, #4]
    4402:	4413      	add	r3, r2
    4404:	607b      	str	r3, [r7, #4]
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	3380      	adds	r3, #128	; 0x80
    440a:	2b00      	cmp	r3, #0
    440c:	da00      	bge.n	4410 <rssi_iir_update+0x6c>
    440e:	33ff      	adds	r3, #255	; 0xff
    4410:	121b      	asrs	r3, r3, #8
    4412:	b299      	uxth	r1, r3
    4414:	4a08      	ldr	r2, [pc, #32]	; (4438 <rssi_iir_update+0x94>)
    4416:	68fb      	ldr	r3, [r7, #12]
    4418:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
    441c:	3714      	adds	r7, #20
    441e:	46bd      	mov	sp, r7
    4420:	f85d 7b04 	ldr.w	r7, [sp], #4
    4424:	4770      	bx	lr
    4426:	bf00      	nop
    4428:	1000097c 	.word	0x1000097c
    442c:	1000049c 	.word	0x1000049c
    4430:	10000a49 	.word	0x10000a49
    4434:	10000a4c 	.word	0x10000a4c
    4438:	100009a0 	.word	0x100009a0

0000443c <cs_threshold_set>:
/* Set CC2400 carrier sense threshold and store value to
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, u8 samples)
{
    443c:	b580      	push	{r7, lr}
    443e:	b082      	sub	sp, #8
    4440:	af00      	add	r7, sp, #0
    4442:	4603      	mov	r3, r0
    4444:	460a      	mov	r2, r1
    4446:	71fb      	strb	r3, [r7, #7]
    4448:	4613      	mov	r3, r2
    444a:	71bb      	strb	r3, [r7, #6]
	level = MIN(MAX(level,-120),(-20));
    444c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4450:	f113 0f14 	cmn.w	r3, #20
    4454:	d00d      	beq.n	4472 <cs_threshold_set+0x36>
    4456:	f997 3007 	ldrsb.w	r3, [r7, #7]
    445a:	f113 0f13 	cmn.w	r3, #19
    445e:	da08      	bge.n	4472 <cs_threshold_set+0x36>
    4460:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4464:	f06f 0277 	mvn.w	r2, #119	; 0x77
    4468:	4293      	cmp	r3, r2
    446a:	bfb8      	it	lt
    446c:	4613      	movlt	r3, r2
    446e:	b2db      	uxtb	r3, r3
    4470:	e000      	b.n	4474 <cs_threshold_set+0x38>
    4472:	23ec      	movs	r3, #236	; 0xec
    4474:	71fb      	strb	r3, [r7, #7]
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | (samples&3));
    4476:	79fb      	ldrb	r3, [r7, #7]
    4478:	3338      	adds	r3, #56	; 0x38
    447a:	b2db      	uxtb	r3, r3
    447c:	b29b      	uxth	r3, r3
    447e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    4482:	b29a      	uxth	r2, r3
    4484:	79bb      	ldrb	r3, [r7, #6]
    4486:	b29b      	uxth	r3, r3
    4488:	f003 0303 	and.w	r3, r3, #3
    448c:	b29b      	uxth	r3, r3
    448e:	4313      	orrs	r3, r2
    4490:	b29b      	uxth	r3, r3
    4492:	b29b      	uxth	r3, r3
    4494:	2006      	movs	r0, #6
    4496:	4619      	mov	r1, r3
    4498:	f006 fa88 	bl	a9ac <cc2400_set>
	cs_threshold_cur = level;
    449c:	4a08      	ldr	r2, [pc, #32]	; (44c0 <cs_threshold_set+0x84>)
    449e:	79fb      	ldrb	r3, [r7, #7]
    44a0:	7013      	strb	r3, [r2, #0]
	cs_no_squelch = (level <= -120);
    44a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    44a6:	f113 0f77 	cmn.w	r3, #119	; 0x77
    44aa:	bfb4      	ite	lt
    44ac:	2301      	movlt	r3, #1
    44ae:	2300      	movge	r3, #0
    44b0:	b2db      	uxtb	r3, r3
    44b2:	461a      	mov	r2, r3
    44b4:	4b03      	ldr	r3, [pc, #12]	; (44c4 <cs_threshold_set+0x88>)
    44b6:	701a      	strb	r2, [r3, #0]
}
    44b8:	3708      	adds	r7, #8
    44ba:	46bd      	mov	sp, r7
    44bc:	bd80      	pop	{r7, pc}
    44be:	bf00      	nop
    44c0:	1000044d 	.word	0x1000044d
    44c4:	1000097e 	.word	0x1000097e

000044c8 <enqueue>:

static int enqueue(u8 type, u8 *buf)
{
    44c8:	b580      	push	{r7, lr}
    44ca:	b088      	sub	sp, #32
    44cc:	af00      	add	r7, sp, #0
    44ce:	4603      	mov	r3, r0
    44d0:	6039      	str	r1, [r7, #0]
    44d2:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    44d4:	f005 f802 	bl	94dc <usb_enqueue>
    44d8:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    44da:	69fb      	ldr	r3, [r7, #28]
    44dc:	2b00      	cmp	r3, #0
    44de:	d109      	bne.n	44f4 <enqueue+0x2c>
		status |= FIFO_OVERFLOW;
    44e0:	4b52      	ldr	r3, [pc, #328]	; (462c <enqueue+0x164>)
    44e2:	781b      	ldrb	r3, [r3, #0]
    44e4:	b2db      	uxtb	r3, r3
    44e6:	f043 0304 	orr.w	r3, r3, #4
    44ea:	b2da      	uxtb	r2, r3
    44ec:	4b4f      	ldr	r3, [pc, #316]	; (462c <enqueue+0x164>)
    44ee:	701a      	strb	r2, [r3, #0]
		return 0;
    44f0:	2300      	movs	r3, #0
    44f2:	e097      	b.n	4624 <enqueue+0x15c>
	}

	f->pkt_type = type;
    44f4:	69fb      	ldr	r3, [r7, #28]
    44f6:	79fa      	ldrb	r2, [r7, #7]
    44f8:	701a      	strb	r2, [r3, #0]
	if(type == SPECAN) {
    44fa:	79fb      	ldrb	r3, [r7, #7]
    44fc:	2b04      	cmp	r3, #4
    44fe:	d113      	bne.n	4528 <enqueue+0x60>
		f->clkn_high = (clkn >> 20) & 0xff;
    4500:	4b4b      	ldr	r3, [pc, #300]	; (4630 <enqueue+0x168>)
    4502:	681b      	ldr	r3, [r3, #0]
    4504:	0d1b      	lsrs	r3, r3, #20
    4506:	b2da      	uxtb	r2, r3
    4508:	69fb      	ldr	r3, [r7, #28]
    450a:	70da      	strb	r2, [r3, #3]
		f->clk100ns = CLK100NS;
    450c:	4b48      	ldr	r3, [pc, #288]	; (4630 <enqueue+0x168>)
    450e:	681b      	ldr	r3, [r3, #0]
    4510:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4514:	f640 4235 	movw	r2, #3125	; 0xc35
    4518:	fb02 f203 	mul.w	r2, r2, r3
    451c:	4b45      	ldr	r3, [pc, #276]	; (4634 <enqueue+0x16c>)
    451e:	681b      	ldr	r3, [r3, #0]
    4520:	441a      	add	r2, r3
    4522:	69fb      	ldr	r3, [r7, #28]
    4524:	605a      	str	r2, [r3, #4]
    4526:	e008      	b.n	453a <enqueue+0x72>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    4528:	4b43      	ldr	r3, [pc, #268]	; (4638 <enqueue+0x170>)
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	b2da      	uxtb	r2, r3
    452e:	69fb      	ldr	r3, [r7, #28]
    4530:	70da      	strb	r2, [r3, #3]
		f->clk100ns = idle_buf_clk100ns;
    4532:	4b42      	ldr	r3, [pc, #264]	; (463c <enqueue+0x174>)
    4534:	681a      	ldr	r2, [r3, #0]
    4536:	69fb      	ldr	r3, [r7, #28]
    4538:	605a      	str	r2, [r3, #4]
	}
	f->channel = idle_buf_channel - 2402;
    453a:	4b41      	ldr	r3, [pc, #260]	; (4640 <enqueue+0x178>)
    453c:	881b      	ldrh	r3, [r3, #0]
    453e:	b29b      	uxth	r3, r3
    4540:	b2db      	uxtb	r3, r3
    4542:	3b62      	subs	r3, #98	; 0x62
    4544:	b2da      	uxtb	r2, r3
    4546:	69fb      	ldr	r3, [r7, #28]
    4548:	709a      	strb	r2, [r3, #2]
	f->rssi_min = rssi_min;
    454a:	4b3e      	ldr	r3, [pc, #248]	; (4644 <enqueue+0x17c>)
    454c:	781b      	ldrb	r3, [r3, #0]
    454e:	b2da      	uxtb	r2, r3
    4550:	69fb      	ldr	r3, [r7, #28]
    4552:	725a      	strb	r2, [r3, #9]
	f->rssi_max = rssi_max;
    4554:	4b3c      	ldr	r3, [pc, #240]	; (4648 <enqueue+0x180>)
    4556:	781b      	ldrb	r3, [r3, #0]
    4558:	b2da      	uxtb	r2, r3
    455a:	69fb      	ldr	r3, [r7, #28]
    455c:	721a      	strb	r2, [r3, #8]
	f->reserved[0] = device_index;
    455e:	4b3b      	ldr	r3, [pc, #236]	; (464c <enqueue+0x184>)
    4560:	781a      	ldrb	r2, [r3, #0]
    4562:	69fb      	ldr	r3, [r7, #28]
    4564:	731a      	strb	r2, [r3, #12]
	f->rssi_avg = rssi_sum/rssi_count;
    4566:	4b3a      	ldr	r3, [pc, #232]	; (4650 <enqueue+0x188>)
    4568:	681b      	ldr	r3, [r3, #0]
    456a:	4a3a      	ldr	r2, [pc, #232]	; (4654 <enqueue+0x18c>)
    456c:	7812      	ldrb	r2, [r2, #0]
    456e:	fb93 f3f2 	sdiv	r3, r3, r2
    4572:	b2da      	uxtb	r2, r3
    4574:	69fb      	ldr	r3, [r7, #28]
    4576:	729a      	strb	r2, [r3, #10]
	
//	f->rssi_count = device_index;

	USRLED_SET;
    4578:	4b37      	ldr	r3, [pc, #220]	; (4658 <enqueue+0x190>)
    457a:	2202      	movs	r2, #2
    457c:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    457e:	69fb      	ldr	r3, [r7, #28]
    4580:	330e      	adds	r3, #14
    4582:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    4584:	683b      	ldr	r3, [r7, #0]
    4586:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    4588:	697b      	ldr	r3, [r7, #20]
    458a:	681a      	ldr	r2, [r3, #0]
    458c:	69bb      	ldr	r3, [r7, #24]
    458e:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    4590:	69bb      	ldr	r3, [r7, #24]
    4592:	3304      	adds	r3, #4
    4594:	697a      	ldr	r2, [r7, #20]
    4596:	6852      	ldr	r2, [r2, #4]
    4598:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    459a:	69bb      	ldr	r3, [r7, #24]
    459c:	3308      	adds	r3, #8
    459e:	697a      	ldr	r2, [r7, #20]
    45a0:	6892      	ldr	r2, [r2, #8]
    45a2:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    45a4:	69bb      	ldr	r3, [r7, #24]
    45a6:	330c      	adds	r3, #12
    45a8:	697a      	ldr	r2, [r7, #20]
    45aa:	68d2      	ldr	r2, [r2, #12]
    45ac:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    45ae:	69bb      	ldr	r3, [r7, #24]
    45b0:	3310      	adds	r3, #16
    45b2:	697a      	ldr	r2, [r7, #20]
    45b4:	6912      	ldr	r2, [r2, #16]
    45b6:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    45b8:	69bb      	ldr	r3, [r7, #24]
    45ba:	3314      	adds	r3, #20
    45bc:	697a      	ldr	r2, [r7, #20]
    45be:	6952      	ldr	r2, [r2, #20]
    45c0:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    45c2:	69bb      	ldr	r3, [r7, #24]
    45c4:	3318      	adds	r3, #24
    45c6:	697a      	ldr	r2, [r7, #20]
    45c8:	6992      	ldr	r2, [r2, #24]
    45ca:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    45cc:	69bb      	ldr	r3, [r7, #24]
    45ce:	331c      	adds	r3, #28
    45d0:	697a      	ldr	r2, [r7, #20]
    45d2:	69d2      	ldr	r2, [r2, #28]
    45d4:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    45d6:	69bb      	ldr	r3, [r7, #24]
    45d8:	3320      	adds	r3, #32
    45da:	697a      	ldr	r2, [r7, #20]
    45dc:	6a12      	ldr	r2, [r2, #32]
    45de:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    45e0:	69bb      	ldr	r3, [r7, #24]
    45e2:	3324      	adds	r3, #36	; 0x24
    45e4:	697a      	ldr	r2, [r7, #20]
    45e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
    45e8:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    45ea:	69bb      	ldr	r3, [r7, #24]
    45ec:	3328      	adds	r3, #40	; 0x28
    45ee:	697a      	ldr	r2, [r7, #20]
    45f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    45f2:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    45f4:	69bb      	ldr	r3, [r7, #24]
    45f6:	332c      	adds	r3, #44	; 0x2c
    45f8:	697a      	ldr	r2, [r7, #20]
    45fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    45fc:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    45fe:	69fb      	ldr	r3, [r7, #28]
    4600:	330e      	adds	r3, #14
    4602:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    4604:	683b      	ldr	r3, [r7, #0]
    4606:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    4608:	693b      	ldr	r3, [r7, #16]
    460a:	3330      	adds	r3, #48	; 0x30
    460c:	68fa      	ldr	r2, [r7, #12]
    460e:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    4610:	801a      	strh	r2, [r3, #0]

	f->status = status;
    4612:	4b06      	ldr	r3, [pc, #24]	; (462c <enqueue+0x164>)
    4614:	781b      	ldrb	r3, [r3, #0]
    4616:	b2da      	uxtb	r2, r3
    4618:	69fb      	ldr	r3, [r7, #28]
    461a:	705a      	strb	r2, [r3, #1]
	status = 0;
    461c:	4b03      	ldr	r3, [pc, #12]	; (462c <enqueue+0x164>)
    461e:	2200      	movs	r2, #0
    4620:	701a      	strb	r2, [r3, #0]

	return 1;
    4622:	2301      	movs	r3, #1
}
    4624:	4618      	mov	r0, r3
    4626:	3720      	adds	r7, #32
    4628:	46bd      	mov	sp, r7
    462a:	bd80      	pop	{r7, pc}
    462c:	10000a48 	.word	0x10000a48
    4630:	10000bec 	.word	0x10000bec
    4634:	40004008 	.word	0x40004008
    4638:	1000103c 	.word	0x1000103c
    463c:	10000bd0 	.word	0x10000bd0
    4640:	10000988 	.word	0x10000988
    4644:	10000bc0 	.word	0x10000bc0
    4648:	10000b0c 	.word	0x10000b0c
    464c:	10000bf0 	.word	0x10000bf0
    4650:	10000a4c 	.word	0x10000a4c
    4654:	10000a49 	.word	0x10000a49
    4658:	2009c038 	.word	0x2009c038

0000465c <enqueue_legacy>:


static int enqueue_legacy(u8 type, u8 *buf)
{
    465c:	b580      	push	{r7, lr}
    465e:	b088      	sub	sp, #32
    4660:	af00      	add	r7, sp, #0
    4662:	4603      	mov	r3, r0
    4664:	6039      	str	r1, [r7, #0]
    4666:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    4668:	f004 ff38 	bl	94dc <usb_enqueue>
    466c:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    466e:	69fb      	ldr	r3, [r7, #28]
    4670:	2b00      	cmp	r3, #0
    4672:	d109      	bne.n	4688 <enqueue_legacy+0x2c>
		status |= FIFO_OVERFLOW;
    4674:	4b3d      	ldr	r3, [pc, #244]	; (476c <enqueue_legacy+0x110>)
    4676:	781b      	ldrb	r3, [r3, #0]
    4678:	b2db      	uxtb	r3, r3
    467a:	f043 0304 	orr.w	r3, r3, #4
    467e:	b2da      	uxtb	r2, r3
    4680:	4b3a      	ldr	r3, [pc, #232]	; (476c <enqueue_legacy+0x110>)
    4682:	701a      	strb	r2, [r3, #0]
		return 0;
    4684:	2300      	movs	r3, #0
    4686:	e06d      	b.n	4764 <enqueue_legacy+0x108>
	}

	f->pkt_type = type;
    4688:	69fb      	ldr	r3, [r7, #28]
    468a:	79fa      	ldrb	r2, [r7, #7]
    468c:	701a      	strb	r2, [r3, #0]
//	f->clkn_high = idle_buf_clkn_high;
	f->clk100ns = clkn_legacy;
    468e:	4b38      	ldr	r3, [pc, #224]	; (4770 <enqueue_legacy+0x114>)
    4690:	681a      	ldr	r2, [r3, #0]
    4692:	69fb      	ldr	r3, [r7, #28]
    4694:	605a      	str	r2, [r3, #4]
	
	f->channel = idle_buf_channel - 2402;
    4696:	4b37      	ldr	r3, [pc, #220]	; (4774 <enqueue_legacy+0x118>)
    4698:	881b      	ldrh	r3, [r3, #0]
    469a:	b29b      	uxth	r3, r3
    469c:	b2db      	uxtb	r3, r3
    469e:	3b62      	subs	r3, #98	; 0x62
    46a0:	b2da      	uxtb	r2, r3
    46a2:	69fb      	ldr	r3, [r7, #28]
    46a4:	709a      	strb	r2, [r3, #2]
//	f->rssi_min = rssi_min;
//	f->rssi_max = rssi_max;
//	f->reserved[0] = device_index;
	f->rssi_avg = rssi_sum/rssi_count;
    46a6:	4b34      	ldr	r3, [pc, #208]	; (4778 <enqueue_legacy+0x11c>)
    46a8:	681b      	ldr	r3, [r3, #0]
    46aa:	4a34      	ldr	r2, [pc, #208]	; (477c <enqueue_legacy+0x120>)
    46ac:	7812      	ldrb	r2, [r2, #0]
    46ae:	fb93 f3f2 	sdiv	r3, r3, r2
    46b2:	b2da      	uxtb	r2, r3
    46b4:	69fb      	ldr	r3, [r7, #28]
    46b6:	729a      	strb	r2, [r3, #10]
	
//	f->rssi_count = device_index;

	USRLED_SET;
    46b8:	4b31      	ldr	r3, [pc, #196]	; (4780 <enqueue_legacy+0x124>)
    46ba:	2202      	movs	r2, #2
    46bc:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    46be:	69fb      	ldr	r3, [r7, #28]
    46c0:	330e      	adds	r3, #14
    46c2:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    46c4:	683b      	ldr	r3, [r7, #0]
    46c6:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    46c8:	697b      	ldr	r3, [r7, #20]
    46ca:	681a      	ldr	r2, [r3, #0]
    46cc:	69bb      	ldr	r3, [r7, #24]
    46ce:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    46d0:	69bb      	ldr	r3, [r7, #24]
    46d2:	3304      	adds	r3, #4
    46d4:	697a      	ldr	r2, [r7, #20]
    46d6:	6852      	ldr	r2, [r2, #4]
    46d8:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    46da:	69bb      	ldr	r3, [r7, #24]
    46dc:	3308      	adds	r3, #8
    46de:	697a      	ldr	r2, [r7, #20]
    46e0:	6892      	ldr	r2, [r2, #8]
    46e2:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    46e4:	69bb      	ldr	r3, [r7, #24]
    46e6:	330c      	adds	r3, #12
    46e8:	697a      	ldr	r2, [r7, #20]
    46ea:	68d2      	ldr	r2, [r2, #12]
    46ec:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    46ee:	69bb      	ldr	r3, [r7, #24]
    46f0:	3310      	adds	r3, #16
    46f2:	697a      	ldr	r2, [r7, #20]
    46f4:	6912      	ldr	r2, [r2, #16]
    46f6:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    46f8:	69bb      	ldr	r3, [r7, #24]
    46fa:	3314      	adds	r3, #20
    46fc:	697a      	ldr	r2, [r7, #20]
    46fe:	6952      	ldr	r2, [r2, #20]
    4700:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    4702:	69bb      	ldr	r3, [r7, #24]
    4704:	3318      	adds	r3, #24
    4706:	697a      	ldr	r2, [r7, #20]
    4708:	6992      	ldr	r2, [r2, #24]
    470a:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    470c:	69bb      	ldr	r3, [r7, #24]
    470e:	331c      	adds	r3, #28
    4710:	697a      	ldr	r2, [r7, #20]
    4712:	69d2      	ldr	r2, [r2, #28]
    4714:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    4716:	69bb      	ldr	r3, [r7, #24]
    4718:	3320      	adds	r3, #32
    471a:	697a      	ldr	r2, [r7, #20]
    471c:	6a12      	ldr	r2, [r2, #32]
    471e:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    4720:	69bb      	ldr	r3, [r7, #24]
    4722:	3324      	adds	r3, #36	; 0x24
    4724:	697a      	ldr	r2, [r7, #20]
    4726:	6a52      	ldr	r2, [r2, #36]	; 0x24
    4728:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    472a:	69bb      	ldr	r3, [r7, #24]
    472c:	3328      	adds	r3, #40	; 0x28
    472e:	697a      	ldr	r2, [r7, #20]
    4730:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4732:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    4734:	69bb      	ldr	r3, [r7, #24]
    4736:	332c      	adds	r3, #44	; 0x2c
    4738:	697a      	ldr	r2, [r7, #20]
    473a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    473c:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    473e:	69fb      	ldr	r3, [r7, #28]
    4740:	330e      	adds	r3, #14
    4742:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    4744:	683b      	ldr	r3, [r7, #0]
    4746:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    4748:	693b      	ldr	r3, [r7, #16]
    474a:	3330      	adds	r3, #48	; 0x30
    474c:	68fa      	ldr	r2, [r7, #12]
    474e:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    4750:	801a      	strh	r2, [r3, #0]

	f->status = status;
    4752:	4b06      	ldr	r3, [pc, #24]	; (476c <enqueue_legacy+0x110>)
    4754:	781b      	ldrb	r3, [r3, #0]
    4756:	b2da      	uxtb	r2, r3
    4758:	69fb      	ldr	r3, [r7, #28]
    475a:	705a      	strb	r2, [r3, #1]
	status = 0;
    475c:	4b03      	ldr	r3, [pc, #12]	; (476c <enqueue_legacy+0x110>)
    475e:	2200      	movs	r2, #0
    4760:	701a      	strb	r2, [r3, #0]

	return 1;
    4762:	2301      	movs	r3, #1
}
    4764:	4618      	mov	r0, r3
    4766:	3720      	adds	r7, #32
    4768:	46bd      	mov	sp, r7
    476a:	bd80      	pop	{r7, pc}
    476c:	10000a48 	.word	0x10000a48
    4770:	10001034 	.word	0x10001034
    4774:	10000988 	.word	0x10000988
    4778:	10000a4c 	.word	0x10000a4c
    477c:	10000a49 	.word	0x10000a49
    4780:	2009c038 	.word	0x2009c038

00004784 <enqueue_freq>:



static int enqueue_freq(u8 type, u8 *buf)
{
    4784:	b580      	push	{r7, lr}
    4786:	b088      	sub	sp, #32
    4788:	af00      	add	r7, sp, #0
    478a:	4603      	mov	r3, r0
    478c:	6039      	str	r1, [r7, #0]
    478e:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    4790:	f004 fea4 	bl	94dc <usb_enqueue>
    4794:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    4796:	69fb      	ldr	r3, [r7, #28]
    4798:	2b00      	cmp	r3, #0
    479a:	d109      	bne.n	47b0 <enqueue_freq+0x2c>
		status |= FIFO_OVERFLOW;
    479c:	4b3d      	ldr	r3, [pc, #244]	; (4894 <enqueue_freq+0x110>)
    479e:	781b      	ldrb	r3, [r3, #0]
    47a0:	b2db      	uxtb	r3, r3
    47a2:	f043 0304 	orr.w	r3, r3, #4
    47a6:	b2da      	uxtb	r2, r3
    47a8:	4b3a      	ldr	r3, [pc, #232]	; (4894 <enqueue_freq+0x110>)
    47aa:	701a      	strb	r2, [r3, #0]
		return 0;
    47ac:	2300      	movs	r3, #0
    47ae:	e06d      	b.n	488c <enqueue_freq+0x108>
	}

	f->pkt_type = type;
    47b0:	69fb      	ldr	r3, [r7, #28]
    47b2:	79fa      	ldrb	r2, [r7, #7]
    47b4:	701a      	strb	r2, [r3, #0]
	
	f->clkn_high = idle_buf_clkn_high;
    47b6:	4b38      	ldr	r3, [pc, #224]	; (4898 <enqueue_freq+0x114>)
    47b8:	681b      	ldr	r3, [r3, #0]
    47ba:	b2da      	uxtb	r2, r3
    47bc:	69fb      	ldr	r3, [r7, #28]
    47be:	70da      	strb	r2, [r3, #3]
	f->clk100ns = clkn_freq;
    47c0:	4b36      	ldr	r3, [pc, #216]	; (489c <enqueue_freq+0x118>)
    47c2:	681a      	ldr	r2, [r3, #0]
    47c4:	69fb      	ldr	r3, [r7, #28]
    47c6:	605a      	str	r2, [r3, #4]
	
	f->channel = idle_buf_channel - 2402;
    47c8:	4b35      	ldr	r3, [pc, #212]	; (48a0 <enqueue_freq+0x11c>)
    47ca:	881b      	ldrh	r3, [r3, #0]
    47cc:	b29b      	uxth	r3, r3
    47ce:	b2db      	uxtb	r3, r3
    47d0:	3b62      	subs	r3, #98	; 0x62
    47d2:	b2da      	uxtb	r2, r3
    47d4:	69fb      	ldr	r3, [r7, #28]
    47d6:	709a      	strb	r2, [r3, #2]
//	f->rssi_min = rssi_min;
//	f->rssi_max = rssi_max;
	f->reserved[0] = device_index;
    47d8:	4b32      	ldr	r3, [pc, #200]	; (48a4 <enqueue_freq+0x120>)
    47da:	781a      	ldrb	r2, [r3, #0]
    47dc:	69fb      	ldr	r3, [r7, #28]
    47de:	731a      	strb	r2, [r3, #12]
//	f->rssi_avg = rssi_sum/rssi_count;

	USRLED_SET;
    47e0:	4b31      	ldr	r3, [pc, #196]	; (48a8 <enqueue_freq+0x124>)
    47e2:	2202      	movs	r2, #2
    47e4:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    47e6:	69fb      	ldr	r3, [r7, #28]
    47e8:	330e      	adds	r3, #14
    47ea:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    47ec:	683b      	ldr	r3, [r7, #0]
    47ee:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    47f0:	697b      	ldr	r3, [r7, #20]
    47f2:	681a      	ldr	r2, [r3, #0]
    47f4:	69bb      	ldr	r3, [r7, #24]
    47f6:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    47f8:	69bb      	ldr	r3, [r7, #24]
    47fa:	3304      	adds	r3, #4
    47fc:	697a      	ldr	r2, [r7, #20]
    47fe:	6852      	ldr	r2, [r2, #4]
    4800:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    4802:	69bb      	ldr	r3, [r7, #24]
    4804:	3308      	adds	r3, #8
    4806:	697a      	ldr	r2, [r7, #20]
    4808:	6892      	ldr	r2, [r2, #8]
    480a:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    480c:	69bb      	ldr	r3, [r7, #24]
    480e:	330c      	adds	r3, #12
    4810:	697a      	ldr	r2, [r7, #20]
    4812:	68d2      	ldr	r2, [r2, #12]
    4814:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    4816:	69bb      	ldr	r3, [r7, #24]
    4818:	3310      	adds	r3, #16
    481a:	697a      	ldr	r2, [r7, #20]
    481c:	6912      	ldr	r2, [r2, #16]
    481e:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    4820:	69bb      	ldr	r3, [r7, #24]
    4822:	3314      	adds	r3, #20
    4824:	697a      	ldr	r2, [r7, #20]
    4826:	6952      	ldr	r2, [r2, #20]
    4828:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    482a:	69bb      	ldr	r3, [r7, #24]
    482c:	3318      	adds	r3, #24
    482e:	697a      	ldr	r2, [r7, #20]
    4830:	6992      	ldr	r2, [r2, #24]
    4832:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    4834:	69bb      	ldr	r3, [r7, #24]
    4836:	331c      	adds	r3, #28
    4838:	697a      	ldr	r2, [r7, #20]
    483a:	69d2      	ldr	r2, [r2, #28]
    483c:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    483e:	69bb      	ldr	r3, [r7, #24]
    4840:	3320      	adds	r3, #32
    4842:	697a      	ldr	r2, [r7, #20]
    4844:	6a12      	ldr	r2, [r2, #32]
    4846:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    4848:	69bb      	ldr	r3, [r7, #24]
    484a:	3324      	adds	r3, #36	; 0x24
    484c:	697a      	ldr	r2, [r7, #20]
    484e:	6a52      	ldr	r2, [r2, #36]	; 0x24
    4850:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    4852:	69bb      	ldr	r3, [r7, #24]
    4854:	3328      	adds	r3, #40	; 0x28
    4856:	697a      	ldr	r2, [r7, #20]
    4858:	6a92      	ldr	r2, [r2, #40]	; 0x28
    485a:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    485c:	69bb      	ldr	r3, [r7, #24]
    485e:	332c      	adds	r3, #44	; 0x2c
    4860:	697a      	ldr	r2, [r7, #20]
    4862:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4864:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    4866:	69fb      	ldr	r3, [r7, #28]
    4868:	330e      	adds	r3, #14
    486a:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    486c:	683b      	ldr	r3, [r7, #0]
    486e:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    4870:	693b      	ldr	r3, [r7, #16]
    4872:	3330      	adds	r3, #48	; 0x30
    4874:	68fa      	ldr	r2, [r7, #12]
    4876:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    4878:	801a      	strh	r2, [r3, #0]

	f->status = status;
    487a:	4b06      	ldr	r3, [pc, #24]	; (4894 <enqueue_freq+0x110>)
    487c:	781b      	ldrb	r3, [r3, #0]
    487e:	b2da      	uxtb	r2, r3
    4880:	69fb      	ldr	r3, [r7, #28]
    4882:	705a      	strb	r2, [r3, #1]
	status = 0;
    4884:	4b03      	ldr	r3, [pc, #12]	; (4894 <enqueue_freq+0x110>)
    4886:	2200      	movs	r2, #0
    4888:	701a      	strb	r2, [r3, #0]

	return 1;
    488a:	2301      	movs	r3, #1
}
    488c:	4618      	mov	r0, r3
    488e:	3720      	adds	r7, #32
    4890:	46bd      	mov	sp, r7
    4892:	bd80      	pop	{r7, pc}
    4894:	10000a48 	.word	0x10000a48
    4898:	1000103c 	.word	0x1000103c
    489c:	10000b00 	.word	0x10000b00
    48a0:	10000988 	.word	0x10000988
    48a4:	10000bf0 	.word	0x10000bf0
    48a8:	2009c038 	.word	0x2009c038

000048ac <enqueue_proposed>:



static int enqueue_proposed(u8 type, u8 *buf)
{
    48ac:	b580      	push	{r7, lr}
    48ae:	b088      	sub	sp, #32
    48b0:	af00      	add	r7, sp, #0
    48b2:	4603      	mov	r3, r0
    48b4:	6039      	str	r1, [r7, #0]
    48b6:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    48b8:	f004 fe10 	bl	94dc <usb_enqueue>
    48bc:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    48be:	69fb      	ldr	r3, [r7, #28]
    48c0:	2b00      	cmp	r3, #0
    48c2:	d109      	bne.n	48d8 <enqueue_proposed+0x2c>
		status |= FIFO_OVERFLOW;
    48c4:	4b3d      	ldr	r3, [pc, #244]	; (49bc <enqueue_proposed+0x110>)
    48c6:	781b      	ldrb	r3, [r3, #0]
    48c8:	b2db      	uxtb	r3, r3
    48ca:	f043 0304 	orr.w	r3, r3, #4
    48ce:	b2da      	uxtb	r2, r3
    48d0:	4b3a      	ldr	r3, [pc, #232]	; (49bc <enqueue_proposed+0x110>)
    48d2:	701a      	strb	r2, [r3, #0]
		return 0;
    48d4:	2300      	movs	r3, #0
    48d6:	e06c      	b.n	49b2 <enqueue_proposed+0x106>
	}

	f->pkt_type = type;
    48d8:	69fb      	ldr	r3, [r7, #28]
    48da:	79fa      	ldrb	r2, [r7, #7]
    48dc:	701a      	strb	r2, [r3, #0]
//	f->clkn_high = idle_buf_clkn_high;
	f->clk100ns = clkn_proposed;
    48de:	4b38      	ldr	r3, [pc, #224]	; (49c0 <enqueue_proposed+0x114>)
    48e0:	681a      	ldr	r2, [r3, #0]
    48e2:	69fb      	ldr	r3, [r7, #28]
    48e4:	605a      	str	r2, [r3, #4]
	f->channel = idle_buf_channel - 2402;
    48e6:	4b37      	ldr	r3, [pc, #220]	; (49c4 <enqueue_proposed+0x118>)
    48e8:	881b      	ldrh	r3, [r3, #0]
    48ea:	b29b      	uxth	r3, r3
    48ec:	b2db      	uxtb	r3, r3
    48ee:	3b62      	subs	r3, #98	; 0x62
    48f0:	b2da      	uxtb	r2, r3
    48f2:	69fb      	ldr	r3, [r7, #28]
    48f4:	709a      	strb	r2, [r3, #2]
//	f->rssi_min = rssi_min;
//	f->rssi_max = rssi_max;
	f->rssi_avg = rssi_avg;
    48f6:	4b34      	ldr	r3, [pc, #208]	; (49c8 <enqueue_proposed+0x11c>)
    48f8:	781a      	ldrb	r2, [r3, #0]
    48fa:	69fb      	ldr	r3, [r7, #28]
    48fc:	729a      	strb	r2, [r3, #10]
	
	f->reserved[1] = freq_avg;
    48fe:	4b33      	ldr	r3, [pc, #204]	; (49cc <enqueue_proposed+0x120>)
    4900:	781a      	ldrb	r2, [r3, #0]
    4902:	69fb      	ldr	r3, [r7, #28]
    4904:	735a      	strb	r2, [r3, #13]
//	f->rssi_count = device_index;

	USRLED_SET;
    4906:	4b32      	ldr	r3, [pc, #200]	; (49d0 <enqueue_proposed+0x124>)
    4908:	2202      	movs	r2, #2
    490a:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    490c:	69fb      	ldr	r3, [r7, #28]
    490e:	330e      	adds	r3, #14
    4910:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    4912:	683b      	ldr	r3, [r7, #0]
    4914:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    4916:	697b      	ldr	r3, [r7, #20]
    4918:	681a      	ldr	r2, [r3, #0]
    491a:	69bb      	ldr	r3, [r7, #24]
    491c:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    491e:	69bb      	ldr	r3, [r7, #24]
    4920:	3304      	adds	r3, #4
    4922:	697a      	ldr	r2, [r7, #20]
    4924:	6852      	ldr	r2, [r2, #4]
    4926:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    4928:	69bb      	ldr	r3, [r7, #24]
    492a:	3308      	adds	r3, #8
    492c:	697a      	ldr	r2, [r7, #20]
    492e:	6892      	ldr	r2, [r2, #8]
    4930:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    4932:	69bb      	ldr	r3, [r7, #24]
    4934:	330c      	adds	r3, #12
    4936:	697a      	ldr	r2, [r7, #20]
    4938:	68d2      	ldr	r2, [r2, #12]
    493a:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    493c:	69bb      	ldr	r3, [r7, #24]
    493e:	3310      	adds	r3, #16
    4940:	697a      	ldr	r2, [r7, #20]
    4942:	6912      	ldr	r2, [r2, #16]
    4944:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    4946:	69bb      	ldr	r3, [r7, #24]
    4948:	3314      	adds	r3, #20
    494a:	697a      	ldr	r2, [r7, #20]
    494c:	6952      	ldr	r2, [r2, #20]
    494e:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    4950:	69bb      	ldr	r3, [r7, #24]
    4952:	3318      	adds	r3, #24
    4954:	697a      	ldr	r2, [r7, #20]
    4956:	6992      	ldr	r2, [r2, #24]
    4958:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    495a:	69bb      	ldr	r3, [r7, #24]
    495c:	331c      	adds	r3, #28
    495e:	697a      	ldr	r2, [r7, #20]
    4960:	69d2      	ldr	r2, [r2, #28]
    4962:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    4964:	69bb      	ldr	r3, [r7, #24]
    4966:	3320      	adds	r3, #32
    4968:	697a      	ldr	r2, [r7, #20]
    496a:	6a12      	ldr	r2, [r2, #32]
    496c:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    496e:	69bb      	ldr	r3, [r7, #24]
    4970:	3324      	adds	r3, #36	; 0x24
    4972:	697a      	ldr	r2, [r7, #20]
    4974:	6a52      	ldr	r2, [r2, #36]	; 0x24
    4976:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    4978:	69bb      	ldr	r3, [r7, #24]
    497a:	3328      	adds	r3, #40	; 0x28
    497c:	697a      	ldr	r2, [r7, #20]
    497e:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4980:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    4982:	69bb      	ldr	r3, [r7, #24]
    4984:	332c      	adds	r3, #44	; 0x2c
    4986:	697a      	ldr	r2, [r7, #20]
    4988:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    498a:	601a      	str	r2, [r3, #0]
	u16 *p3 = (u16 *)f->data;
    498c:	69fb      	ldr	r3, [r7, #28]
    498e:	330e      	adds	r3, #14
    4990:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    4992:	683b      	ldr	r3, [r7, #0]
    4994:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    4996:	693b      	ldr	r3, [r7, #16]
    4998:	3330      	adds	r3, #48	; 0x30
    499a:	68fa      	ldr	r2, [r7, #12]
    499c:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    499e:	801a      	strh	r2, [r3, #0]

	f->status = status;
    49a0:	4b06      	ldr	r3, [pc, #24]	; (49bc <enqueue_proposed+0x110>)
    49a2:	781b      	ldrb	r3, [r3, #0]
    49a4:	b2da      	uxtb	r2, r3
    49a6:	69fb      	ldr	r3, [r7, #28]
    49a8:	705a      	strb	r2, [r3, #1]
	status = 0;
    49aa:	4b04      	ldr	r3, [pc, #16]	; (49bc <enqueue_proposed+0x110>)
    49ac:	2200      	movs	r2, #0
    49ae:	701a      	strb	r2, [r3, #0]

	return 1;
    49b0:	2301      	movs	r3, #1
}
    49b2:	4618      	mov	r0, r3
    49b4:	3720      	adds	r7, #32
    49b6:	46bd      	mov	sp, r7
    49b8:	bd80      	pop	{r7, pc}
    49ba:	bf00      	nop
    49bc:	10000a48 	.word	0x10000a48
    49c0:	10000b08 	.word	0x10000b08
    49c4:	10000988 	.word	0x10000988
    49c8:	10001039 	.word	0x10001039
    49cc:	10000bf1 	.word	0x10000bf1
    49d0:	2009c038 	.word	0x2009c038

000049d4 <enqueue_with_ts>:



int enqueue_with_ts(u8 type, u8 *buf, u32 ts)
{
    49d4:	b580      	push	{r7, lr}
    49d6:	b086      	sub	sp, #24
    49d8:	af00      	add	r7, sp, #0
    49da:	4603      	mov	r3, r0
    49dc:	60b9      	str	r1, [r7, #8]
    49de:	607a      	str	r2, [r7, #4]
    49e0:	73fb      	strb	r3, [r7, #15]
	usb_pkt_rx *f = usb_enqueue();
    49e2:	f004 fd7b 	bl	94dc <usb_enqueue>
    49e6:	6178      	str	r0, [r7, #20]

	/* fail if queue is full */
	if (f == NULL) {
    49e8:	697b      	ldr	r3, [r7, #20]
    49ea:	2b00      	cmp	r3, #0
    49ec:	d109      	bne.n	4a02 <enqueue_with_ts+0x2e>
		status |= FIFO_OVERFLOW;
    49ee:	4b14      	ldr	r3, [pc, #80]	; (4a40 <enqueue_with_ts+0x6c>)
    49f0:	781b      	ldrb	r3, [r3, #0]
    49f2:	b2db      	uxtb	r3, r3
    49f4:	f043 0304 	orr.w	r3, r3, #4
    49f8:	b2da      	uxtb	r2, r3
    49fa:	4b11      	ldr	r3, [pc, #68]	; (4a40 <enqueue_with_ts+0x6c>)
    49fc:	701a      	strb	r2, [r3, #0]
		return 0;
    49fe:	2300      	movs	r3, #0
    4a00:	e019      	b.n	4a36 <enqueue_with_ts+0x62>
	}

	f->pkt_type = type;
    4a02:	697b      	ldr	r3, [r7, #20]
    4a04:	7bfa      	ldrb	r2, [r7, #15]
    4a06:	701a      	strb	r2, [r3, #0]
//	f->clkn_high = 0;
	f->clk100ns = ts;
    4a08:	697b      	ldr	r3, [r7, #20]
    4a0a:	687a      	ldr	r2, [r7, #4]
    4a0c:	605a      	str	r2, [r3, #4]

//	f->channel = channel - 2402;
	f->rssi_avg = rssi_avg;
    4a0e:	4b0d      	ldr	r3, [pc, #52]	; (4a44 <enqueue_with_ts+0x70>)
    4a10:	781a      	ldrb	r2, [r3, #0]
    4a12:	697b      	ldr	r3, [r7, #20]
    4a14:	729a      	strb	r2, [r3, #10]
	f->rssi_count = freq_avg;
    4a16:	4b0c      	ldr	r3, [pc, #48]	; (4a48 <enqueue_with_ts+0x74>)
    4a18:	781a      	ldrb	r2, [r3, #0]
    4a1a:	697b      	ldr	r3, [r7, #20]
    4a1c:	72da      	strb	r2, [r3, #11]

	USRLED_SET;
    4a1e:	4b0b      	ldr	r3, [pc, #44]	; (4a4c <enqueue_with_ts+0x78>)
    4a20:	2202      	movs	r2, #2
    4a22:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
	u16 *p3 = (u16 *)f->data;
	u16 *p4 = (u16 *)buf;
	p3[24] = p4[24];
*/
	f->status = status;
    4a24:	4b06      	ldr	r3, [pc, #24]	; (4a40 <enqueue_with_ts+0x6c>)
    4a26:	781b      	ldrb	r3, [r3, #0]
    4a28:	b2da      	uxtb	r2, r3
    4a2a:	697b      	ldr	r3, [r7, #20]
    4a2c:	705a      	strb	r2, [r3, #1]
	status = 0;
    4a2e:	4b04      	ldr	r3, [pc, #16]	; (4a40 <enqueue_with_ts+0x6c>)
    4a30:	2200      	movs	r2, #0
    4a32:	701a      	strb	r2, [r3, #0]

	return 1;
    4a34:	2301      	movs	r3, #1
}
    4a36:	4618      	mov	r0, r3
    4a38:	3718      	adds	r7, #24
    4a3a:	46bd      	mov	sp, r7
    4a3c:	bd80      	pop	{r7, pc}
    4a3e:	bf00      	nop
    4a40:	10000a48 	.word	0x10000a48
    4a44:	10001039 	.word	0x10001039
    4a48:	10000bf1 	.word	0x10000bf1
    4a4c:	2009c038 	.word	0x2009c038

00004a50 <cs_threshold_calc_and_set>:

static void cs_threshold_calc_and_set(void)
{
    4a50:	b580      	push	{r7, lr}
    4a52:	b082      	sub	sp, #8
    4a54:	af00      	add	r7, sp, #0

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    4a56:	4b17      	ldr	r3, [pc, #92]	; (4ab4 <cs_threshold_calc_and_set+0x64>)
    4a58:	781b      	ldrb	r3, [r3, #0]
    4a5a:	2b00      	cmp	r3, #0
    4a5c:	d01d      	beq.n	4a9a <cs_threshold_calc_and_set+0x4a>
    4a5e:	4b16      	ldr	r3, [pc, #88]	; (4ab8 <cs_threshold_calc_and_set+0x68>)
    4a60:	781b      	ldrb	r3, [r3, #0]
    4a62:	b25b      	sxtb	r3, r3
    4a64:	2b00      	cmp	r3, #0
    4a66:	dd18      	ble.n	4a9a <cs_threshold_calc_and_set+0x4a>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
    4a68:	4b14      	ldr	r3, [pc, #80]	; (4abc <cs_threshold_calc_and_set+0x6c>)
    4a6a:	881b      	ldrh	r3, [r3, #0]
    4a6c:	b29b      	uxth	r3, r3
    4a6e:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    4a72:	4a13      	ldr	r2, [pc, #76]	; (4ac0 <cs_threshold_calc_and_set+0x70>)
    4a74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    4a78:	b21b      	sxth	r3, r3
    4a7a:	3380      	adds	r3, #128	; 0x80
    4a7c:	2b00      	cmp	r3, #0
    4a7e:	da00      	bge.n	4a82 <cs_threshold_calc_and_set+0x32>
    4a80:	33ff      	adds	r3, #255	; 0xff
    4a82:	121b      	asrs	r3, r3, #8
    4a84:	71bb      	strb	r3, [r7, #6]
		level = rssi - 54 + cs_threshold_req;
    4a86:	79ba      	ldrb	r2, [r7, #6]
    4a88:	4b0b      	ldr	r3, [pc, #44]	; (4ab8 <cs_threshold_calc_and_set+0x68>)
    4a8a:	781b      	ldrb	r3, [r3, #0]
    4a8c:	b2db      	uxtb	r3, r3
    4a8e:	4413      	add	r3, r2
    4a90:	b2db      	uxtb	r3, r3
    4a92:	3b36      	subs	r3, #54	; 0x36
    4a94:	b2db      	uxtb	r3, r3
    4a96:	71fb      	strb	r3, [r7, #7]

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    4a98:	e002      	b.n	4aa0 <cs_threshold_calc_and_set+0x50>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
		level = rssi - 54 + cs_threshold_req;
	}
	else {
		level = cs_threshold_req;
    4a9a:	4b07      	ldr	r3, [pc, #28]	; (4ab8 <cs_threshold_calc_and_set+0x68>)
    4a9c:	781b      	ldrb	r3, [r3, #0]
    4a9e:	71fb      	strb	r3, [r7, #7]
	}
	cs_threshold_set(level, CS_SAMPLES_4);
    4aa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4aa4:	4618      	mov	r0, r3
    4aa6:	2103      	movs	r1, #3
    4aa8:	f7ff fcc8 	bl	443c <cs_threshold_set>
}
    4aac:	3708      	adds	r7, #8
    4aae:	46bd      	mov	sp, r7
    4ab0:	bd80      	pop	{r7, pc}
    4ab2:	bf00      	nop
    4ab4:	1000097c 	.word	0x1000097c
    4ab8:	1000044c 	.word	0x1000044c
    4abc:	1000049c 	.word	0x1000049c
    4ac0:	100009a0 	.word	0x100009a0

00004ac4 <cs_trigger_enable>:
/* CS comes from CC2400 GIO6, which is LPC P2.2, active low. GPIO
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
static void cs_trigger_enable(void)
{
    4ac4:	b480      	push	{r7}
    4ac6:	af00      	add	r7, sp, #0
	cs_trigger = 0;
    4ac8:	4b09      	ldr	r3, [pc, #36]	; (4af0 <cs_trigger_enable+0x2c>)
    4aca:	2200      	movs	r2, #0
    4acc:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    4ace:	4b09      	ldr	r3, [pc, #36]	; (4af4 <cs_trigger_enable+0x30>)
    4ad0:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4ad4:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4ad6:	4b08      	ldr	r3, [pc, #32]	; (4af8 <cs_trigger_enable+0x34>)
    4ad8:	2204      	movs	r2, #4
    4ada:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    4adc:	4a07      	ldr	r2, [pc, #28]	; (4afc <cs_trigger_enable+0x38>)
    4ade:	4b07      	ldr	r3, [pc, #28]	; (4afc <cs_trigger_enable+0x38>)
    4ae0:	681b      	ldr	r3, [r3, #0]
    4ae2:	f043 0304 	orr.w	r3, r3, #4
    4ae6:	6013      	str	r3, [r2, #0]
}
    4ae8:	46bd      	mov	sp, r7
    4aea:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aee:	4770      	bx	lr
    4af0:	100010cc 	.word	0x100010cc
    4af4:	e000e100 	.word	0xe000e100
    4af8:	400280ac 	.word	0x400280ac
    4afc:	400280b4 	.word	0x400280b4

00004b00 <cs_trigger_disable>:

static void cs_trigger_disable(void)
{
    4b00:	b480      	push	{r7}
    4b02:	af00      	add	r7, sp, #0
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    4b04:	4a09      	ldr	r2, [pc, #36]	; (4b2c <cs_trigger_disable+0x2c>)
    4b06:	4b09      	ldr	r3, [pc, #36]	; (4b2c <cs_trigger_disable+0x2c>)
    4b08:	681b      	ldr	r3, [r3, #0]
    4b0a:	f023 0304 	bic.w	r3, r3, #4
    4b0e:	6013      	str	r3, [r2, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4b10:	4b07      	ldr	r3, [pc, #28]	; (4b30 <cs_trigger_disable+0x30>)
    4b12:	2204      	movs	r2, #4
    4b14:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_EINT3;
    4b16:	4b07      	ldr	r3, [pc, #28]	; (4b34 <cs_trigger_disable+0x34>)
    4b18:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4b1c:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    4b1e:	4b06      	ldr	r3, [pc, #24]	; (4b38 <cs_trigger_disable+0x38>)
    4b20:	2200      	movs	r2, #0
    4b22:	701a      	strb	r2, [r3, #0]
}
    4b24:	46bd      	mov	sp, r7
    4b26:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b2a:	4770      	bx	lr
    4b2c:	400280b4 	.word	0x400280b4
    4b30:	400280ac 	.word	0x400280ac
    4b34:	e000e180 	.word	0xe000e180
    4b38:	100010cc 	.word	0x100010cc

00004b3c <vendor_request_handler>:

static int vendor_request_handler(u8 request, u16 *request_params, u8 *data, int *data_len)
{
    4b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4b40:	b095      	sub	sp, #84	; 0x54
    4b42:	af00      	add	r7, sp, #0
    4b44:	60b9      	str	r1, [r7, #8]
    4b46:	607a      	str	r2, [r7, #4]
    4b48:	603b      	str	r3, [r7, #0]
    4b4a:	4603      	mov	r3, r0
    4b4c:	73fb      	strb	r3, [r7, #15]
	u64 ac_copy;
	int i; // loop counter
	u32 clock;
	int clock_offset;
	u8 length; // string length
	usb_pkt_rx *p = NULL;
    4b4e:	2300      	movs	r3, #0
    4b50:	647b      	str	r3, [r7, #68]	; 0x44
	u16 reg_val;

	switch (request) {
    4b52:	7bfb      	ldrb	r3, [r7, #15]
    4b54:	2b3e      	cmp	r3, #62	; 0x3e
    4b56:	f200 8563 	bhi.w	5620 <vendor_request_handler+0xae4>
    4b5a:	a201      	add	r2, pc, #4	; (adr r2, 4b60 <vendor_request_handler+0x24>)
    4b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4b60:	00004c5d 	.word	0x00004c5d
    4b64:	00004c67 	.word	0x00004c67
    4b68:	00005621 	.word	0x00005621
    4b6c:	00004c97 	.word	0x00004c97
    4b70:	00004cb9 	.word	0x00004cb9
    4b74:	00004cd5 	.word	0x00004cd5
    4b78:	00004cf7 	.word	0x00004cf7
    4b7c:	00004d13 	.word	0x00004d13
    4b80:	00004d35 	.word	0x00004d35
    4b84:	00004d55 	.word	0x00004d55
    4b88:	00004d77 	.word	0x00004d77
    4b8c:	00005017 	.word	0x00005017
    4b90:	0000503d 	.word	0x0000503d
    4b94:	00004ded 	.word	0x00004ded
    4b98:	00004df7 	.word	0x00004df7
    4b9c:	00004d97 	.word	0x00004d97
    4ba0:	00004ed5 	.word	0x00004ed5
    4ba4:	00004ef5 	.word	0x00004ef5
    4ba8:	00004f29 	.word	0x00004f29
    4bac:	00004f49 	.word	0x00004f49
    4bb0:	00004f65 	.word	0x00004f65
    4bb4:	00004ff1 	.word	0x00004ff1
    4bb8:	00004ff9 	.word	0x00004ff9
    4bbc:	0000500b 	.word	0x0000500b
    4bc0:	000050c7 	.word	0x000050c7
    4bc4:	000050e5 	.word	0x000050e5
    4bc8:	00005621 	.word	0x00005621
    4bcc:	000050f1 	.word	0x000050f1
    4bd0:	00004f6d 	.word	0x00004f6d
    4bd4:	00004f89 	.word	0x00004f89
    4bd8:	00004fb1 	.word	0x00004fb1
    4bdc:	00004fa9 	.word	0x00004fa9
    4be0:	00004fb9 	.word	0x00004fb9
    4be4:	000051b5 	.word	0x000051b5
    4be8:	0000514d 	.word	0x0000514d
    4bec:	00005229 	.word	0x00005229
    4bf0:	00005237 	.word	0x00005237
    4bf4:	00005247 	.word	0x00005247
    4bf8:	00005259 	.word	0x00005259
    4bfc:	00005325 	.word	0x00005325
    4c00:	0000536b 	.word	0x0000536b
    4c04:	000053f9 	.word	0x000053f9
    4c08:	0000542d 	.word	0x0000542d
    4c0c:	0000544f 	.word	0x0000544f
    4c10:	000054a7 	.word	0x000054a7
    4c14:	00005625 	.word	0x00005625
    4c18:	000054d9 	.word	0x000054d9
    4c1c:	000054ef 	.word	0x000054ef
    4c20:	0000550b 	.word	0x0000550b
    4c24:	00005521 	.word	0x00005521
    4c28:	0000554d 	.word	0x0000554d
    4c2c:	0000539d 	.word	0x0000539d
    4c30:	000053cf 	.word	0x000053cf
    4c34:	00005569 	.word	0x00005569
    4c38:	000055ad 	.word	0x000055ad
    4c3c:	000051f7 	.word	0x000051f7
    4c40:	000055bf 	.word	0x000055bf
    4c44:	00005621 	.word	0x00005621
    4c48:	00005597 	.word	0x00005597
    4c4c:	00005603 	.word	0x00005603
    4c50:	0000560f 	.word	0x0000560f
    4c54:	00004c77 	.word	0x00004c77
    4c58:	00004c87 	.word	0x00004c87

	case UBERTOOTH_PING:
		*data_len = 0;
    4c5c:	683b      	ldr	r3, [r7, #0]
    4c5e:	2200      	movs	r2, #0
    4c60:	601a      	str	r2, [r3, #0]
		break;
    4c62:	f000 bce0 	b.w	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    4c66:	4ba7      	ldr	r3, [pc, #668]	; (4f04 <vendor_request_handler+0x3c8>)
    4c68:	2201      	movs	r2, #1
    4c6a:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4c6c:	683b      	ldr	r3, [r7, #0]
    4c6e:	2200      	movs	r2, #0
    4c70:	601a      	str	r2, [r3, #0]
		break;
    4c72:	f000 bcd8 	b.w	5626 <vendor_request_handler+0xaea>
	
	case UBERTOOTH_RX_FREQ:
		requested_mode = MODE_RX_FREQ;
    4c76:	4ba3      	ldr	r3, [pc, #652]	; (4f04 <vendor_request_handler+0x3c8>)
    4c78:	220e      	movs	r2, #14
    4c7a:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4c7c:	683b      	ldr	r3, [r7, #0]
    4c7e:	2200      	movs	r2, #0
    4c80:	601a      	str	r2, [r3, #0]
		break;
    4c82:	f000 bcd0 	b.w	5626 <vendor_request_handler+0xaea>
	
	case UBERTOOTH_RX_PROPOSED:
		requested_mode = MODE_RX_PROPOSED;
    4c86:	4b9f      	ldr	r3, [pc, #636]	; (4f04 <vendor_request_handler+0x3c8>)
    4c88:	220f      	movs	r2, #15
    4c8a:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4c8c:	683b      	ldr	r3, [r7, #0]
    4c8e:	2200      	movs	r2, #0
    4c90:	601a      	str	r2, [r3, #0]
		break;
    4c92:	f000 bcc8 	b.w	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    4c96:	4b9c      	ldr	r3, [pc, #624]	; (4f08 <vendor_request_handler+0x3cc>)
    4c98:	681b      	ldr	r3, [r3, #0]
    4c9a:	f003 0302 	and.w	r3, r3, #2
    4c9e:	2b00      	cmp	r3, #0
    4ca0:	bf14      	ite	ne
    4ca2:	2301      	movne	r3, #1
    4ca4:	2300      	moveq	r3, #0
    4ca6:	b2db      	uxtb	r3, r3
    4ca8:	461a      	mov	r2, r3
    4caa:	687b      	ldr	r3, [r7, #4]
    4cac:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4cae:	683b      	ldr	r3, [r7, #0]
    4cb0:	2201      	movs	r2, #1
    4cb2:	601a      	str	r2, [r3, #0]
		break;
    4cb4:	f000 bcb7 	b.w	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    4cb8:	68bb      	ldr	r3, [r7, #8]
    4cba:	881b      	ldrh	r3, [r3, #0]
    4cbc:	2b00      	cmp	r3, #0
    4cbe:	d004      	beq.n	4cca <vendor_request_handler+0x18e>
			USRLED_SET;
    4cc0:	4b92      	ldr	r3, [pc, #584]	; (4f0c <vendor_request_handler+0x3d0>)
    4cc2:	2202      	movs	r2, #2
    4cc4:	601a      	str	r2, [r3, #0]
		else
			USRLED_CLR;
		break;
    4cc6:	f000 bcae 	b.w	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
			USRLED_SET;
		else
			USRLED_CLR;
    4cca:	4b91      	ldr	r3, [pc, #580]	; (4f10 <vendor_request_handler+0x3d4>)
    4ccc:	2202      	movs	r2, #2
    4cce:	601a      	str	r2, [r3, #0]
		break;
    4cd0:	f000 bca9 	b.w	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    4cd4:	4b8c      	ldr	r3, [pc, #560]	; (4f08 <vendor_request_handler+0x3cc>)
    4cd6:	681b      	ldr	r3, [r3, #0]
    4cd8:	f003 0310 	and.w	r3, r3, #16
    4cdc:	2b00      	cmp	r3, #0
    4cde:	bf14      	ite	ne
    4ce0:	2301      	movne	r3, #1
    4ce2:	2300      	moveq	r3, #0
    4ce4:	b2db      	uxtb	r3, r3
    4ce6:	461a      	mov	r2, r3
    4ce8:	687b      	ldr	r3, [r7, #4]
    4cea:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4cec:	683b      	ldr	r3, [r7, #0]
    4cee:	2201      	movs	r2, #1
    4cf0:	601a      	str	r2, [r3, #0]
		break;
    4cf2:	f000 bc98 	b.w	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    4cf6:	68bb      	ldr	r3, [r7, #8]
    4cf8:	881b      	ldrh	r3, [r3, #0]
    4cfa:	2b00      	cmp	r3, #0
    4cfc:	d004      	beq.n	4d08 <vendor_request_handler+0x1cc>
			RXLED_SET;
    4cfe:	4b83      	ldr	r3, [pc, #524]	; (4f0c <vendor_request_handler+0x3d0>)
    4d00:	2210      	movs	r2, #16
    4d02:	601a      	str	r2, [r3, #0]
		else
			RXLED_CLR;
		break;
    4d04:	f000 bc8f 	b.w	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
			RXLED_SET;
		else
			RXLED_CLR;
    4d08:	4b81      	ldr	r3, [pc, #516]	; (4f10 <vendor_request_handler+0x3d4>)
    4d0a:	2210      	movs	r2, #16
    4d0c:	601a      	str	r2, [r3, #0]
		break;
    4d0e:	f000 bc8a 	b.w	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    4d12:	4b7d      	ldr	r3, [pc, #500]	; (4f08 <vendor_request_handler+0x3cc>)
    4d14:	681b      	ldr	r3, [r3, #0]
    4d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4d1a:	2b00      	cmp	r3, #0
    4d1c:	bf14      	ite	ne
    4d1e:	2301      	movne	r3, #1
    4d20:	2300      	moveq	r3, #0
    4d22:	b2db      	uxtb	r3, r3
    4d24:	461a      	mov	r2, r3
    4d26:	687b      	ldr	r3, [r7, #4]
    4d28:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4d2a:	683b      	ldr	r3, [r7, #0]
    4d2c:	2201      	movs	r2, #1
    4d2e:	601a      	str	r2, [r3, #0]
		break;
    4d30:	f000 bc79 	b.w	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    4d34:	68bb      	ldr	r3, [r7, #8]
    4d36:	881b      	ldrh	r3, [r3, #0]
    4d38:	2b00      	cmp	r3, #0
    4d3a:	d005      	beq.n	4d48 <vendor_request_handler+0x20c>
			TXLED_SET;
    4d3c:	4b73      	ldr	r3, [pc, #460]	; (4f0c <vendor_request_handler+0x3d0>)
    4d3e:	f44f 7280 	mov.w	r2, #256	; 0x100
    4d42:	601a      	str	r2, [r3, #0]
		else
			TXLED_CLR;
		break;
    4d44:	f000 bc6f 	b.w	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
			TXLED_SET;
		else
			TXLED_CLR;
    4d48:	4b71      	ldr	r3, [pc, #452]	; (4f10 <vendor_request_handler+0x3d4>)
    4d4a:	f44f 7280 	mov.w	r2, #256	; 0x100
    4d4e:	601a      	str	r2, [r3, #0]
		break;
    4d50:	f000 bc69 	b.w	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    4d54:	4b6c      	ldr	r3, [pc, #432]	; (4f08 <vendor_request_handler+0x3cc>)
    4d56:	681b      	ldr	r3, [r3, #0]
    4d58:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4d5c:	2b00      	cmp	r3, #0
    4d5e:	bf14      	ite	ne
    4d60:	2301      	movne	r3, #1
    4d62:	2300      	moveq	r3, #0
    4d64:	b2db      	uxtb	r3, r3
    4d66:	461a      	mov	r2, r3
    4d68:	687b      	ldr	r3, [r7, #4]
    4d6a:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4d6c:	683b      	ldr	r3, [r7, #0]
    4d6e:	2201      	movs	r2, #1
    4d70:	601a      	str	r2, [r3, #0]
		break;
    4d72:	f000 bc58 	b.w	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    4d76:	68bb      	ldr	r3, [r7, #8]
    4d78:	881b      	ldrh	r3, [r3, #0]
    4d7a:	2b00      	cmp	r3, #0
    4d7c:	d005      	beq.n	4d8a <vendor_request_handler+0x24e>
			CC1V8_SET;
    4d7e:	4b63      	ldr	r3, [pc, #396]	; (4f0c <vendor_request_handler+0x3d0>)
    4d80:	f44f 7200 	mov.w	r2, #512	; 0x200
    4d84:	601a      	str	r2, [r3, #0]
		else
			CC1V8_CLR;
		break;
    4d86:	f000 bc4e 	b.w	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
			CC1V8_SET;
		else
			CC1V8_CLR;
    4d8a:	4b61      	ldr	r3, [pc, #388]	; (4f10 <vendor_request_handler+0x3d4>)
    4d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
    4d90:	601a      	str	r2, [r3, #0]
		break;
    4d92:	f000 bc48 	b.w	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_PARTNUM:
		command[0] = 54; /* read part number */
    4d96:	2336      	movs	r3, #54	; 0x36
    4d98:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4d9a:	4b5e      	ldr	r3, [pc, #376]	; (4f14 <vendor_request_handler+0x3d8>)
    4d9c:	681b      	ldr	r3, [r3, #0]
    4d9e:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4da2:	f107 0210 	add.w	r2, r7, #16
    4da6:	4608      	mov	r0, r1
    4da8:	4611      	mov	r1, r2
    4daa:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4dac:	693b      	ldr	r3, [r7, #16]
    4dae:	b2da      	uxtb	r2, r3
    4db0:	687b      	ldr	r3, [r7, #4]
    4db2:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4db4:	687b      	ldr	r3, [r7, #4]
    4db6:	3301      	adds	r3, #1
    4db8:	697a      	ldr	r2, [r7, #20]
    4dba:	b2d2      	uxtb	r2, r2
    4dbc:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4dbe:	687b      	ldr	r3, [r7, #4]
    4dc0:	3302      	adds	r3, #2
    4dc2:	697a      	ldr	r2, [r7, #20]
    4dc4:	0a12      	lsrs	r2, r2, #8
    4dc6:	b2d2      	uxtb	r2, r2
    4dc8:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4dca:	687b      	ldr	r3, [r7, #4]
    4dcc:	3303      	adds	r3, #3
    4dce:	697a      	ldr	r2, [r7, #20]
    4dd0:	0c12      	lsrs	r2, r2, #16
    4dd2:	b2d2      	uxtb	r2, r2
    4dd4:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4dd6:	687b      	ldr	r3, [r7, #4]
    4dd8:	3304      	adds	r3, #4
    4dda:	697a      	ldr	r2, [r7, #20]
    4ddc:	0e12      	lsrs	r2, r2, #24
    4dde:	b2d2      	uxtb	r2, r2
    4de0:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4de2:	683b      	ldr	r3, [r7, #0]
    4de4:	2205      	movs	r2, #5
    4de6:	601a      	str	r2, [r3, #0]
		break;
    4de8:	f000 bc1d 	b.w	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
    4dec:	4b45      	ldr	r3, [pc, #276]	; (4f04 <vendor_request_handler+0x3c8>)
    4dee:	220b      	movs	r2, #11
    4df0:	701a      	strb	r2, [r3, #0]
		break;
    4df2:	f000 bc18 	b.w	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_SERIAL:
		command[0] = 58; /* read device serial number */
    4df6:	233a      	movs	r3, #58	; 0x3a
    4df8:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4dfa:	4b46      	ldr	r3, [pc, #280]	; (4f14 <vendor_request_handler+0x3d8>)
    4dfc:	681b      	ldr	r3, [r3, #0]
    4dfe:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4e02:	f107 0210 	add.w	r2, r7, #16
    4e06:	4608      	mov	r0, r1
    4e08:	4611      	mov	r1, r2
    4e0a:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4e0c:	693b      	ldr	r3, [r7, #16]
    4e0e:	b2da      	uxtb	r2, r3
    4e10:	687b      	ldr	r3, [r7, #4]
    4e12:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4e14:	687b      	ldr	r3, [r7, #4]
    4e16:	3301      	adds	r3, #1
    4e18:	697a      	ldr	r2, [r7, #20]
    4e1a:	b2d2      	uxtb	r2, r2
    4e1c:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4e1e:	687b      	ldr	r3, [r7, #4]
    4e20:	3302      	adds	r3, #2
    4e22:	697a      	ldr	r2, [r7, #20]
    4e24:	0a12      	lsrs	r2, r2, #8
    4e26:	b2d2      	uxtb	r2, r2
    4e28:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4e2a:	687b      	ldr	r3, [r7, #4]
    4e2c:	3303      	adds	r3, #3
    4e2e:	697a      	ldr	r2, [r7, #20]
    4e30:	0c12      	lsrs	r2, r2, #16
    4e32:	b2d2      	uxtb	r2, r2
    4e34:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4e36:	687b      	ldr	r3, [r7, #4]
    4e38:	3304      	adds	r3, #4
    4e3a:	697a      	ldr	r2, [r7, #20]
    4e3c:	0e12      	lsrs	r2, r2, #24
    4e3e:	b2d2      	uxtb	r2, r2
    4e40:	701a      	strb	r2, [r3, #0]
		data[5] = result[2] & 0xFF;
    4e42:	687b      	ldr	r3, [r7, #4]
    4e44:	3305      	adds	r3, #5
    4e46:	69ba      	ldr	r2, [r7, #24]
    4e48:	b2d2      	uxtb	r2, r2
    4e4a:	701a      	strb	r2, [r3, #0]
		data[6] = (result[2] >> 8) & 0xFF;
    4e4c:	687b      	ldr	r3, [r7, #4]
    4e4e:	3306      	adds	r3, #6
    4e50:	69ba      	ldr	r2, [r7, #24]
    4e52:	0a12      	lsrs	r2, r2, #8
    4e54:	b2d2      	uxtb	r2, r2
    4e56:	701a      	strb	r2, [r3, #0]
		data[7] = (result[2] >> 16) & 0xFF;
    4e58:	687b      	ldr	r3, [r7, #4]
    4e5a:	3307      	adds	r3, #7
    4e5c:	69ba      	ldr	r2, [r7, #24]
    4e5e:	0c12      	lsrs	r2, r2, #16
    4e60:	b2d2      	uxtb	r2, r2
    4e62:	701a      	strb	r2, [r3, #0]
		data[8] = (result[2] >> 24) & 0xFF;
    4e64:	687b      	ldr	r3, [r7, #4]
    4e66:	3308      	adds	r3, #8
    4e68:	69ba      	ldr	r2, [r7, #24]
    4e6a:	0e12      	lsrs	r2, r2, #24
    4e6c:	b2d2      	uxtb	r2, r2
    4e6e:	701a      	strb	r2, [r3, #0]
		data[9] = result[3] & 0xFF;
    4e70:	687b      	ldr	r3, [r7, #4]
    4e72:	3309      	adds	r3, #9
    4e74:	69fa      	ldr	r2, [r7, #28]
    4e76:	b2d2      	uxtb	r2, r2
    4e78:	701a      	strb	r2, [r3, #0]
		data[10] = (result[3] >> 8) & 0xFF;
    4e7a:	687b      	ldr	r3, [r7, #4]
    4e7c:	330a      	adds	r3, #10
    4e7e:	69fa      	ldr	r2, [r7, #28]
    4e80:	0a12      	lsrs	r2, r2, #8
    4e82:	b2d2      	uxtb	r2, r2
    4e84:	701a      	strb	r2, [r3, #0]
		data[11] = (result[3] >> 16) & 0xFF;
    4e86:	687b      	ldr	r3, [r7, #4]
    4e88:	330b      	adds	r3, #11
    4e8a:	69fa      	ldr	r2, [r7, #28]
    4e8c:	0c12      	lsrs	r2, r2, #16
    4e8e:	b2d2      	uxtb	r2, r2
    4e90:	701a      	strb	r2, [r3, #0]
		data[12] = (result[3] >> 24) & 0xFF;
    4e92:	687b      	ldr	r3, [r7, #4]
    4e94:	330c      	adds	r3, #12
    4e96:	69fa      	ldr	r2, [r7, #28]
    4e98:	0e12      	lsrs	r2, r2, #24
    4e9a:	b2d2      	uxtb	r2, r2
    4e9c:	701a      	strb	r2, [r3, #0]
		data[13] = result[4] & 0xFF;
    4e9e:	687b      	ldr	r3, [r7, #4]
    4ea0:	330d      	adds	r3, #13
    4ea2:	6a3a      	ldr	r2, [r7, #32]
    4ea4:	b2d2      	uxtb	r2, r2
    4ea6:	701a      	strb	r2, [r3, #0]
		data[14] = (result[4] >> 8) & 0xFF;
    4ea8:	687b      	ldr	r3, [r7, #4]
    4eaa:	330e      	adds	r3, #14
    4eac:	6a3a      	ldr	r2, [r7, #32]
    4eae:	0a12      	lsrs	r2, r2, #8
    4eb0:	b2d2      	uxtb	r2, r2
    4eb2:	701a      	strb	r2, [r3, #0]
		data[15] = (result[4] >> 16) & 0xFF;
    4eb4:	687b      	ldr	r3, [r7, #4]
    4eb6:	330f      	adds	r3, #15
    4eb8:	6a3a      	ldr	r2, [r7, #32]
    4eba:	0c12      	lsrs	r2, r2, #16
    4ebc:	b2d2      	uxtb	r2, r2
    4ebe:	701a      	strb	r2, [r3, #0]
		data[16] = (result[4] >> 24) & 0xFF;
    4ec0:	687b      	ldr	r3, [r7, #4]
    4ec2:	3310      	adds	r3, #16
    4ec4:	6a3a      	ldr	r2, [r7, #32]
    4ec6:	0e12      	lsrs	r2, r2, #24
    4ec8:	b2d2      	uxtb	r2, r2
    4eca:	701a      	strb	r2, [r3, #0]
		*data_len = 17;
    4ecc:	683b      	ldr	r3, [r7, #0]
    4ece:	2211      	movs	r2, #17
    4ed0:	601a      	str	r2, [r3, #0]
		break;
    4ed2:	e3a8      	b.n	5626 <vendor_request_handler+0xaea>

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    4ed4:	4b10      	ldr	r3, [pc, #64]	; (4f18 <vendor_request_handler+0x3dc>)
    4ed6:	681b      	ldr	r3, [r3, #0]
    4ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4edc:	2b00      	cmp	r3, #0
    4ede:	bf14      	ite	ne
    4ee0:	2301      	movne	r3, #1
    4ee2:	2300      	moveq	r3, #0
    4ee4:	b2db      	uxtb	r3, r3
    4ee6:	461a      	mov	r2, r3
    4ee8:	687b      	ldr	r3, [r7, #4]
    4eea:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4eec:	683b      	ldr	r3, [r7, #0]
    4eee:	2201      	movs	r2, #1
    4ef0:	601a      	str	r2, [r3, #0]
		break;
    4ef2:	e398      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    4ef4:	68bb      	ldr	r3, [r7, #8]
    4ef6:	881b      	ldrh	r3, [r3, #0]
    4ef8:	2b00      	cmp	r3, #0
    4efa:	d011      	beq.n	4f20 <vendor_request_handler+0x3e4>
			PAEN_SET;
    4efc:	4b07      	ldr	r3, [pc, #28]	; (4f1c <vendor_request_handler+0x3e0>)
    4efe:	2280      	movs	r2, #128	; 0x80
    4f00:	601a      	str	r2, [r3, #0]
		else
			PAEN_CLR;
		break;
    4f02:	e390      	b.n	5626 <vendor_request_handler+0xaea>
    4f04:	10000a3f 	.word	0x10000a3f
    4f08:	2009c034 	.word	0x2009c034
    4f0c:	2009c038 	.word	0x2009c038
    4f10:	2009c03c 	.word	0x2009c03c
    4f14:	10000448 	.word	0x10000448
    4f18:	2009c054 	.word	0x2009c054
    4f1c:	2009c058 	.word	0x2009c058

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
			PAEN_SET;
		else
			PAEN_CLR;
    4f20:	4b94      	ldr	r3, [pc, #592]	; (5174 <vendor_request_handler+0x638>)
    4f22:	2280      	movs	r2, #128	; 0x80
    4f24:	601a      	str	r2, [r3, #0]
		break;
    4f26:	e37e      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    4f28:	4b93      	ldr	r3, [pc, #588]	; (5178 <vendor_request_handler+0x63c>)
    4f2a:	681b      	ldr	r3, [r3, #0]
    4f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4f30:	2b00      	cmp	r3, #0
    4f32:	bf14      	ite	ne
    4f34:	2301      	movne	r3, #1
    4f36:	2300      	moveq	r3, #0
    4f38:	b2db      	uxtb	r3, r3
    4f3a:	461a      	mov	r2, r3
    4f3c:	687b      	ldr	r3, [r7, #4]
    4f3e:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4f40:	683b      	ldr	r3, [r7, #0]
    4f42:	2201      	movs	r2, #1
    4f44:	601a      	str	r2, [r3, #0]
		break;
    4f46:	e36e      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    4f48:	68bb      	ldr	r3, [r7, #8]
    4f4a:	881b      	ldrh	r3, [r3, #0]
    4f4c:	2b00      	cmp	r3, #0
    4f4e:	d004      	beq.n	4f5a <vendor_request_handler+0x41e>
			HGM_SET;
    4f50:	4b8a      	ldr	r3, [pc, #552]	; (517c <vendor_request_handler+0x640>)
    4f52:	f44f 7280 	mov.w	r2, #256	; 0x100
    4f56:	601a      	str	r2, [r3, #0]
		else
			HGM_CLR;
		break;
    4f58:	e365      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
			HGM_SET;
		else
			HGM_CLR;
    4f5a:	4b86      	ldr	r3, [pc, #536]	; (5174 <vendor_request_handler+0x638>)
    4f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
    4f60:	601a      	str	r2, [r3, #0]
		break;
    4f62:	e360      	b.n	5626 <vendor_request_handler+0xaea>
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    4f64:	4b86      	ldr	r3, [pc, #536]	; (5180 <vendor_request_handler+0x644>)
    4f66:	2203      	movs	r2, #3
    4f68:	701a      	strb	r2, [r3, #0]
		break;
    4f6a:	e35c      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    4f6c:	2005      	movs	r0, #5
    4f6e:	f005 fd07 	bl	a980 <cc2400_get>
    4f72:	4603      	mov	r3, r0
    4f74:	b2db      	uxtb	r3, r3
    4f76:	f003 0307 	and.w	r3, r3, #7
    4f7a:	b2da      	uxtb	r2, r3
    4f7c:	687b      	ldr	r3, [r7, #4]
    4f7e:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4f80:	683b      	ldr	r3, [r7, #0]
    4f82:	2201      	movs	r2, #1
    4f84:	601a      	str	r2, [r3, #0]
		break;
    4f86:	e34e      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    4f88:	68bb      	ldr	r3, [r7, #8]
    4f8a:	881b      	ldrh	r3, [r3, #0]
    4f8c:	2b07      	cmp	r3, #7
    4f8e:	d809      	bhi.n	4fa4 <vendor_request_handler+0x468>
			cc2400_set(FREND, 8 | request_params[0]);
    4f90:	68bb      	ldr	r3, [r7, #8]
    4f92:	881b      	ldrh	r3, [r3, #0]
    4f94:	f043 0308 	orr.w	r3, r3, #8
    4f98:	b29b      	uxth	r3, r3
    4f9a:	2005      	movs	r0, #5
    4f9c:	4619      	mov	r1, r3
    4f9e:	f005 fd05 	bl	a9ac <cc2400_set>
		} else {
			return 0;
		}
		break;
    4fa2:	e340      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    4fa4:	2300      	movs	r3, #0
    4fa6:	e33f      	b.n	5628 <vendor_request_handler+0xaec>
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    4fa8:	4b75      	ldr	r3, [pc, #468]	; (5180 <vendor_request_handler+0x644>)
    4faa:	2205      	movs	r2, #5
    4fac:	701a      	strb	r2, [r3, #0]
		break;
    4fae:	e33a      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    4fb0:	4b73      	ldr	r3, [pc, #460]	; (5180 <vendor_request_handler+0x644>)
    4fb2:	2206      	movs	r2, #6
    4fb4:	701a      	strb	r2, [r3, #0]
		break;
    4fb6:	e336      	b.n	5626 <vendor_request_handler+0xaea>
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    4fb8:	4b72      	ldr	r3, [pc, #456]	; (5184 <vendor_request_handler+0x648>)
    4fba:	781a      	ldrb	r2, [r3, #0]
    4fbc:	687b      	ldr	r3, [r7, #4]
    4fbe:	701a      	strb	r2, [r3, #0]
		data[1] = rr.request_pa;
    4fc0:	687b      	ldr	r3, [r7, #4]
    4fc2:	3301      	adds	r3, #1
    4fc4:	4a6f      	ldr	r2, [pc, #444]	; (5184 <vendor_request_handler+0x648>)
    4fc6:	7852      	ldrb	r2, [r2, #1]
    4fc8:	701a      	strb	r2, [r3, #0]
		data[2] = rr.request_num;
    4fca:	687b      	ldr	r3, [r7, #4]
    4fcc:	3302      	adds	r3, #2
    4fce:	4a6d      	ldr	r2, [pc, #436]	; (5184 <vendor_request_handler+0x648>)
    4fd0:	7892      	ldrb	r2, [r2, #2]
    4fd2:	701a      	strb	r2, [r3, #0]
		data[3] = rr.reply_pa;
    4fd4:	687b      	ldr	r3, [r7, #4]
    4fd6:	3303      	adds	r3, #3
    4fd8:	4a6a      	ldr	r2, [pc, #424]	; (5184 <vendor_request_handler+0x648>)
    4fda:	78d2      	ldrb	r2, [r2, #3]
    4fdc:	701a      	strb	r2, [r3, #0]
		data[4] = rr.reply_num;
    4fde:	687b      	ldr	r3, [r7, #4]
    4fe0:	3304      	adds	r3, #4
    4fe2:	4a68      	ldr	r2, [pc, #416]	; (5184 <vendor_request_handler+0x648>)
    4fe4:	7912      	ldrb	r2, [r2, #4]
    4fe6:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4fe8:	683b      	ldr	r3, [r7, #0]
    4fea:	2205      	movs	r2, #5
    4fec:	601a      	str	r2, [r3, #0]
		break;
    4fee:	e31a      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    4ff0:	4b63      	ldr	r3, [pc, #396]	; (5180 <vendor_request_handler+0x644>)
    4ff2:	2200      	movs	r2, #0
    4ff4:	701a      	strb	r2, [r3, #0]
		break;
    4ff6:	e316      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    4ff8:	4b63      	ldr	r3, [pc, #396]	; (5188 <vendor_request_handler+0x64c>)
    4ffa:	781b      	ldrb	r3, [r3, #0]
    4ffc:	b2da      	uxtb	r2, r3
    4ffe:	687b      	ldr	r3, [r7, #4]
    5000:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    5002:	683b      	ldr	r3, [r7, #0]
    5004:	2201      	movs	r2, #1
    5006:	601a      	str	r2, [r3, #0]
		break;
    5008:	e30d      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    500a:	68bb      	ldr	r3, [r7, #8]
    500c:	881b      	ldrh	r3, [r3, #0]
    500e:	b2da      	uxtb	r2, r3
    5010:	4b5d      	ldr	r3, [pc, #372]	; (5188 <vendor_request_handler+0x64c>)
    5012:	701a      	strb	r2, [r3, #0]
		break;
    5014:	e307      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    5016:	4b5d      	ldr	r3, [pc, #372]	; (518c <vendor_request_handler+0x650>)
    5018:	881b      	ldrh	r3, [r3, #0]
    501a:	b29b      	uxth	r3, r3
    501c:	b2da      	uxtb	r2, r3
    501e:	687b      	ldr	r3, [r7, #4]
    5020:	701a      	strb	r2, [r3, #0]
		data[1] = (channel >> 8) & 0xFF;
    5022:	687b      	ldr	r3, [r7, #4]
    5024:	3301      	adds	r3, #1
    5026:	4a59      	ldr	r2, [pc, #356]	; (518c <vendor_request_handler+0x650>)
    5028:	8812      	ldrh	r2, [r2, #0]
    502a:	b292      	uxth	r2, r2
    502c:	0a12      	lsrs	r2, r2, #8
    502e:	b292      	uxth	r2, r2
    5030:	b2d2      	uxtb	r2, r2
    5032:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    5034:	683b      	ldr	r3, [r7, #0]
    5036:	2202      	movs	r2, #2
    5038:	601a      	str	r2, [r3, #0]
		break;
    503a:	e2f4      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    503c:	68bb      	ldr	r3, [r7, #8]
    503e:	881a      	ldrh	r2, [r3, #0]
    5040:	4b53      	ldr	r3, [pc, #332]	; (5190 <vendor_request_handler+0x654>)
    5042:	801a      	strh	r2, [r3, #0]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    5044:	4b52      	ldr	r3, [pc, #328]	; (5190 <vendor_request_handler+0x654>)
    5046:	881b      	ldrh	r3, [r3, #0]
    5048:	b29b      	uxth	r3, r3
    504a:	f640 22ea 	movw	r2, #2794	; 0xaea
    504e:	4293      	cmp	r3, r2
    5050:	d907      	bls.n	5062 <vendor_request_handler+0x526>
			hop_mode = HOP_SWEEP;
    5052:	4b50      	ldr	r3, [pc, #320]	; (5194 <vendor_request_handler+0x658>)
    5054:	2201      	movs	r2, #1
    5056:	701a      	strb	r2, [r3, #0]
			requested_channel = 2402;
    5058:	4b4d      	ldr	r3, [pc, #308]	; (5190 <vendor_request_handler+0x654>)
    505a:	f640 1262 	movw	r2, #2402	; 0x962
    505e:	801a      	strh	r2, [r3, #0]
    5060:	e020      	b.n	50a4 <vendor_request_handler+0x568>
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
    5062:	4b4c      	ldr	r3, [pc, #304]	; (5194 <vendor_request_handler+0x658>)
    5064:	2200      	movs	r2, #0
    5066:	701a      	strb	r2, [r3, #0]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    5068:	4b49      	ldr	r3, [pc, #292]	; (5190 <vendor_request_handler+0x654>)
    506a:	881b      	ldrh	r3, [r3, #0]
    506c:	b29b      	uxth	r3, r3
    506e:	f640 02dc 	movw	r2, #2268	; 0x8dc
    5072:	4293      	cmp	r3, r2
    5074:	d903      	bls.n	507e <vendor_request_handler+0x542>
    5076:	4b46      	ldr	r3, [pc, #280]	; (5190 <vendor_request_handler+0x654>)
    5078:	881b      	ldrh	r3, [r3, #0]
    507a:	b29b      	uxth	r3, r3
    507c:	e001      	b.n	5082 <vendor_request_handler+0x546>
    507e:	f640 03dc 	movw	r3, #2268	; 0x8dc
    5082:	4a43      	ldr	r2, [pc, #268]	; (5190 <vendor_request_handler+0x654>)
    5084:	8013      	strh	r3, [r2, #0]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    5086:	4b42      	ldr	r3, [pc, #264]	; (5190 <vendor_request_handler+0x654>)
    5088:	881b      	ldrh	r3, [r3, #0]
    508a:	b29b      	uxth	r3, r3
    508c:	f640 22e9 	movw	r2, #2793	; 0xae9
    5090:	4293      	cmp	r3, r2
    5092:	d803      	bhi.n	509c <vendor_request_handler+0x560>
    5094:	4b3e      	ldr	r3, [pc, #248]	; (5190 <vendor_request_handler+0x654>)
    5096:	881b      	ldrh	r3, [r3, #0]
    5098:	b29b      	uxth	r3, r3
    509a:	e001      	b.n	50a0 <vendor_request_handler+0x564>
    509c:	f640 23ea 	movw	r3, #2794	; 0xaea
    50a0:	4a3b      	ldr	r2, [pc, #236]	; (5190 <vendor_request_handler+0x654>)
    50a2:	8013      	strh	r3, [r2, #0]
		}

		if (mode != MODE_BT_FOLLOW_LE) {
    50a4:	4b3c      	ldr	r3, [pc, #240]	; (5198 <vendor_request_handler+0x65c>)
    50a6:	781b      	ldrb	r3, [r3, #0]
    50a8:	b2db      	uxtb	r3, r3
    50aa:	2b09      	cmp	r3, #9
    50ac:	d00a      	beq.n	50c4 <vendor_request_handler+0x588>
			channel = requested_channel;
    50ae:	4b38      	ldr	r3, [pc, #224]	; (5190 <vendor_request_handler+0x654>)
    50b0:	881b      	ldrh	r3, [r3, #0]
    50b2:	b29a      	uxth	r2, r3
    50b4:	4b35      	ldr	r3, [pc, #212]	; (518c <vendor_request_handler+0x650>)
    50b6:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    50b8:	4b35      	ldr	r3, [pc, #212]	; (5190 <vendor_request_handler+0x654>)
    50ba:	2200      	movs	r2, #0
    50bc:	801a      	strh	r2, [r3, #0]

			/* CS threshold is mode-dependent. Update it after
			 * possible mode change. TODO - kludgy. */
			cs_threshold_calc_and_set();
    50be:	f7ff fcc7 	bl	4a50 <cs_threshold_calc_and_set>
		}
		break;
    50c2:	e2b0      	b.n	5626 <vendor_request_handler+0xaea>
    50c4:	e2af      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_ISP:
		command[0] = 57;
    50c6:	2339      	movs	r3, #57	; 0x39
    50c8:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    50ca:	4b34      	ldr	r3, [pc, #208]	; (519c <vendor_request_handler+0x660>)
    50cc:	681b      	ldr	r3, [r3, #0]
    50ce:	f107 0124 	add.w	r1, r7, #36	; 0x24
    50d2:	f107 0210 	add.w	r2, r7, #16
    50d6:	4608      	mov	r0, r1
    50d8:	4611      	mov	r1, r2
    50da:	4798      	blx	r3
		*data_len = 0; /* should never return */
    50dc:	683b      	ldr	r3, [r7, #0]
    50de:	2200      	movs	r2, #0
    50e0:	601a      	str	r2, [r3, #0]
		break;
    50e2:	e2a0      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    50e4:	4b2e      	ldr	r3, [pc, #184]	; (51a0 <vendor_request_handler+0x664>)
    50e6:	4a2f      	ldr	r2, [pc, #188]	; (51a4 <vendor_request_handler+0x668>)
    50e8:	601a      	str	r2, [r3, #0]
		reset();
    50ea:	f005 fe2b 	bl	ad44 <reset>
		break;
    50ee:	e29a      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    50f0:	68bb      	ldr	r3, [r7, #8]
    50f2:	881b      	ldrh	r3, [r3, #0]
    50f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    50f8:	d917      	bls.n	512a <vendor_request_handler+0x5ee>
    50fa:	68bb      	ldr	r3, [r7, #8]
    50fc:	881b      	ldrh	r3, [r3, #0]
    50fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    5102:	d812      	bhi.n	512a <vendor_request_handler+0x5ee>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    5104:	68bb      	ldr	r3, [r7, #8]
    5106:	3302      	adds	r3, #2
    5108:	881b      	ldrh	r3, [r3, #0]
		bootloader_ctrl = DFU_MODE;
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    510a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    510e:	d90c      	bls.n	512a <vendor_request_handler+0x5ee>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    5110:	68bb      	ldr	r3, [r7, #8]
    5112:	3302      	adds	r3, #2
    5114:	881b      	ldrh	r3, [r3, #0]
    5116:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    511a:	d806      	bhi.n	512a <vendor_request_handler+0x5ee>
				request_params[1] < request_params[0])
    511c:	68bb      	ldr	r3, [r7, #8]
    511e:	3302      	adds	r3, #2
    5120:	881a      	ldrh	r2, [r3, #0]
    5122:	68bb      	ldr	r3, [r7, #8]
    5124:	881b      	ldrh	r3, [r3, #0]
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
				request_params[1] < 2049 || request_params[1] > 3072 ||
    5126:	429a      	cmp	r2, r3
    5128:	d201      	bcs.n	512e <vendor_request_handler+0x5f2>
				request_params[1] < request_params[0])
			return 0;
    512a:	2300      	movs	r3, #0
    512c:	e27c      	b.n	5628 <vendor_request_handler+0xaec>
		low_freq = request_params[0];
    512e:	68bb      	ldr	r3, [r7, #8]
    5130:	881a      	ldrh	r2, [r3, #0]
    5132:	4b1d      	ldr	r3, [pc, #116]	; (51a8 <vendor_request_handler+0x66c>)
    5134:	801a      	strh	r2, [r3, #0]
		high_freq = request_params[1];
    5136:	68bb      	ldr	r3, [r7, #8]
    5138:	885a      	ldrh	r2, [r3, #2]
    513a:	4b1c      	ldr	r3, [pc, #112]	; (51ac <vendor_request_handler+0x670>)
    513c:	801a      	strh	r2, [r3, #0]
		requested_mode = MODE_SPECAN;
    513e:	4b10      	ldr	r3, [pc, #64]	; (5180 <vendor_request_handler+0x644>)
    5140:	2204      	movs	r2, #4
    5142:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    5144:	683b      	ldr	r3, [r7, #0]
    5146:	2200      	movs	r2, #0
    5148:	601a      	str	r2, [r3, #0]
		break;
    514a:	e26c      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    514c:	68bb      	ldr	r3, [r7, #8]
    514e:	881b      	ldrh	r3, [r3, #0]
    5150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5154:	d901      	bls.n	515a <vendor_request_handler+0x61e>
			return 0;
    5156:	2300      	movs	r3, #0
    5158:	e266      	b.n	5628 <vendor_request_handler+0xaec>
		rssi_threshold = (int8_t)request_params[0];
    515a:	68bb      	ldr	r3, [r7, #8]
    515c:	881b      	ldrh	r3, [r3, #0]
    515e:	b2da      	uxtb	r2, r3
    5160:	4b13      	ldr	r3, [pc, #76]	; (51b0 <vendor_request_handler+0x674>)
    5162:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_LED_SPECAN;
    5164:	4b06      	ldr	r3, [pc, #24]	; (5180 <vendor_request_handler+0x644>)
    5166:	2207      	movs	r2, #7
    5168:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    516a:	683b      	ldr	r3, [r7, #0]
    516c:	2200      	movs	r2, #0
    516e:	601a      	str	r2, [r3, #0]
		break;
    5170:	e259      	b.n	5626 <vendor_request_handler+0xaea>
    5172:	bf00      	nop
    5174:	2009c05c 	.word	0x2009c05c
    5178:	2009c054 	.word	0x2009c054
    517c:	2009c058 	.word	0x2009c058
    5180:	10000a3f 	.word	0x10000a3f
    5184:	1000108c 	.word	0x1000108c
    5188:	10000a42 	.word	0x10000a42
    518c:	1000049c 	.word	0x1000049c
    5190:	10000a44 	.word	0x10000a44
    5194:	1000097c 	.word	0x1000097c
    5198:	10000a3e 	.word	0x10000a3e
    519c:	10000448 	.word	0x10000448
    51a0:	1000001c 	.word	0x1000001c
    51a4:	4305bb21 	.word	0x4305bb21
    51a8:	1000049e 	.word	0x1000049e
    51ac:	100004a0 	.word	0x100004a0
    51b0:	100004a2 	.word	0x100004a2

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    51b4:	687b      	ldr	r3, [r7, #4]
    51b6:	2200      	movs	r2, #0
    51b8:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
    51ba:	687b      	ldr	r3, [r7, #4]
    51bc:	3301      	adds	r3, #1
    51be:	2200      	movs	r2, #0
    51c0:	701a      	strb	r2, [r3, #0]

		length = (u8)strlen(GIT_REVISION);
    51c2:	48a4      	ldr	r0, [pc, #656]	; (5454 <vendor_request_handler+0x918>)
    51c4:	f007 fa3c 	bl	c640 <strlen>
    51c8:	4603      	mov	r3, r0
    51ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[2] = length;
    51ce:	687b      	ldr	r3, [r7, #4]
    51d0:	3302      	adds	r3, #2
    51d2:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    51d6:	701a      	strb	r2, [r3, #0]

		memcpy(&data[3], GIT_REVISION, length);
    51d8:	687b      	ldr	r3, [r7, #4]
    51da:	1cda      	adds	r2, r3, #3
    51dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    51e0:	4610      	mov	r0, r2
    51e2:	499c      	ldr	r1, [pc, #624]	; (5454 <vendor_request_handler+0x918>)
    51e4:	461a      	mov	r2, r3
    51e6:	f007 f9b5 	bl	c554 <memcpy>

		*data_len = 2 + 1 + length;
    51ea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    51ee:	1cda      	adds	r2, r3, #3
    51f0:	683b      	ldr	r3, [r7, #0]
    51f2:	601a      	str	r2, [r3, #0]
		break;
    51f4:	e217      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    51f6:	4898      	ldr	r0, [pc, #608]	; (5458 <vendor_request_handler+0x91c>)
    51f8:	f007 fa22 	bl	c640 <strlen>
    51fc:	4603      	mov	r3, r0
    51fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[0] = length;
    5202:	687b      	ldr	r3, [r7, #4]
    5204:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    5208:	701a      	strb	r2, [r3, #0]
		memcpy(&data[1], compile_info, length);
    520a:	687b      	ldr	r3, [r7, #4]
    520c:	1c5a      	adds	r2, r3, #1
    520e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    5212:	4610      	mov	r0, r2
    5214:	4990      	ldr	r1, [pc, #576]	; (5458 <vendor_request_handler+0x91c>)
    5216:	461a      	mov	r2, r3
    5218:	f007 f99c 	bl	c554 <memcpy>
		*data_len = 1 + length;
    521c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    5220:	1c5a      	adds	r2, r3, #1
    5222:	683b      	ldr	r3, [r7, #0]
    5224:	601a      	str	r2, [r3, #0]
		break;
    5226:	e1fe      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    5228:	687b      	ldr	r3, [r7, #4]
    522a:	2201      	movs	r2, #1
    522c:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    522e:	683b      	ldr	r3, [r7, #0]
    5230:	2201      	movs	r2, #1
    5232:	601a      	str	r2, [r3, #0]
		break;
    5234:	e1f7      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    5236:	68bb      	ldr	r3, [r7, #8]
    5238:	881b      	ldrh	r3, [r3, #0]
    523a:	b2da      	uxtb	r2, r3
    523c:	4b87      	ldr	r3, [pc, #540]	; (545c <vendor_request_handler+0x920>)
    523e:	701a      	strb	r2, [r3, #0]
		cs_threshold_calc_and_set();
    5240:	f7ff fc06 	bl	4a50 <cs_threshold_calc_and_set>
		break;
    5244:	e1ef      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    5246:	4b85      	ldr	r3, [pc, #532]	; (545c <vendor_request_handler+0x920>)
    5248:	781b      	ldrb	r3, [r3, #0]
    524a:	b2da      	uxtb	r2, r3
    524c:	687b      	ldr	r3, [r7, #4]
    524e:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    5250:	683b      	ldr	r3, [r7, #0]
    5252:	2201      	movs	r2, #1
    5254:	601a      	str	r2, [r3, #0]
		break;
    5256:	e1e6      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    5258:	4981      	ldr	r1, [pc, #516]	; (5460 <vendor_request_handler+0x924>)
    525a:	f04f 0200 	mov.w	r2, #0
    525e:	f04f 0300 	mov.w	r3, #0
    5262:	e9c1 2300 	strd	r2, r3, [r1]
		target.access_code = 0;
    5266:	497e      	ldr	r1, [pc, #504]	; (5460 <vendor_request_handler+0x924>)
    5268:	f04f 0200 	mov.w	r2, #0
    526c:	f04f 0300 	mov.w	r3, #0
    5270:	e9c1 2302 	strd	r2, r3, [r1, #8]
		for(i=0; i < 8; i++) {
    5274:	2300      	movs	r3, #0
    5276:	64fb      	str	r3, [r7, #76]	; 0x4c
    5278:	e025      	b.n	52c6 <vendor_request_handler+0x78a>
			target.address |= (uint64_t)data[i] << 8*i;
    527a:	4b79      	ldr	r3, [pc, #484]	; (5460 <vendor_request_handler+0x924>)
    527c:	e9d3 ab00 	ldrd	sl, fp, [r3]
    5280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5282:	687a      	ldr	r2, [r7, #4]
    5284:	4413      	add	r3, r2
    5286:	781b      	ldrb	r3, [r3, #0]
    5288:	b2da      	uxtb	r2, r3
    528a:	f04f 0300 	mov.w	r3, #0
    528e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    5290:	00c9      	lsls	r1, r1, #3
    5292:	f1a1 0620 	sub.w	r6, r1, #32
    5296:	f1c1 0020 	rsb	r0, r1, #32
    529a:	fa03 f901 	lsl.w	r9, r3, r1
    529e:	fa02 f606 	lsl.w	r6, r2, r6
    52a2:	ea49 0906 	orr.w	r9, r9, r6
    52a6:	fa22 f000 	lsr.w	r0, r2, r0
    52aa:	ea49 0900 	orr.w	r9, r9, r0
    52ae:	fa02 f801 	lsl.w	r8, r2, r1
    52b2:	ea4a 0208 	orr.w	r2, sl, r8
    52b6:	ea4b 0309 	orr.w	r3, fp, r9
    52ba:	4969      	ldr	r1, [pc, #420]	; (5460 <vendor_request_handler+0x924>)
    52bc:	e9c1 2300 	strd	r2, r3, [r1]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
    52c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    52c2:	3301      	adds	r3, #1
    52c4:	64fb      	str	r3, [r7, #76]	; 0x4c
    52c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    52c8:	2b07      	cmp	r3, #7
    52ca:	ddd6      	ble.n	527a <vendor_request_handler+0x73e>
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    52cc:	2300      	movs	r3, #0
    52ce:	64fb      	str	r3, [r7, #76]	; 0x4c
    52d0:	e024      	b.n	531c <vendor_request_handler+0x7e0>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
    52d2:	4b63      	ldr	r3, [pc, #396]	; (5460 <vendor_request_handler+0x924>)
    52d4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
    52d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    52da:	3308      	adds	r3, #8
    52dc:	687a      	ldr	r2, [r7, #4]
    52de:	4413      	add	r3, r2
    52e0:	781b      	ldrb	r3, [r3, #0]
    52e2:	b2da      	uxtb	r2, r3
    52e4:	f04f 0300 	mov.w	r3, #0
    52e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    52ea:	00c9      	lsls	r1, r1, #3
    52ec:	f1a1 0620 	sub.w	r6, r1, #32
    52f0:	f1c1 0020 	rsb	r0, r1, #32
    52f4:	fa03 f501 	lsl.w	r5, r3, r1
    52f8:	fa02 f606 	lsl.w	r6, r2, r6
    52fc:	4335      	orrs	r5, r6
    52fe:	fa22 f000 	lsr.w	r0, r2, r0
    5302:	4305      	orrs	r5, r0
    5304:	fa02 f401 	lsl.w	r4, r2, r1
    5308:	ea48 0204 	orr.w	r2, r8, r4
    530c:	ea49 0305 	orr.w	r3, r9, r5
    5310:	4953      	ldr	r1, [pc, #332]	; (5460 <vendor_request_handler+0x924>)
    5312:	e9c1 2302 	strd	r2, r3, [r1, #8]
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    5316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5318:	3301      	adds	r3, #1
    531a:	64fb      	str	r3, [r7, #76]	; 0x4c
    531c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    531e:	2b07      	cmp	r3, #7
    5320:	ddd7      	ble.n	52d2 <vendor_request_handler+0x796>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
		}
		break;
    5322:	e180      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
    5324:	2300      	movs	r3, #0
    5326:	64bb      	str	r3, [r7, #72]	; 0x48
		for(i=0; i < 4; i++) {
    5328:	2300      	movs	r3, #0
    532a:	64fb      	str	r3, [r7, #76]	; 0x4c
    532c:	e00d      	b.n	534a <vendor_request_handler+0x80e>
			clock_offset <<= 8;
    532e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5330:	021b      	lsls	r3, r3, #8
    5332:	64bb      	str	r3, [r7, #72]	; 0x48
			clock_offset |= data[i];
    5334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5336:	687a      	ldr	r2, [r7, #4]
    5338:	4413      	add	r3, r2
    533a:	781b      	ldrb	r3, [r3, #0]
    533c:	461a      	mov	r2, r3
    533e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5340:	4313      	orrs	r3, r2
    5342:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		break;

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
		for(i=0; i < 4; i++) {
    5344:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5346:	3301      	adds	r3, #1
    5348:	64fb      	str	r3, [r7, #76]	; 0x4c
    534a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    534c:	2b03      	cmp	r3, #3
    534e:	ddee      	ble.n	532e <vendor_request_handler+0x7f2>
			clock_offset <<= 8;
			clock_offset |= data[i];
		}
		clkn += clock_offset;
    5350:	4b44      	ldr	r3, [pc, #272]	; (5464 <vendor_request_handler+0x928>)
    5352:	681a      	ldr	r2, [r3, #0]
    5354:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5356:	4413      	add	r3, r2
    5358:	4a42      	ldr	r2, [pc, #264]	; (5464 <vendor_request_handler+0x928>)
    535a:	6013      	str	r3, [r2, #0]
		hop_mode = HOP_BLUETOOTH;
    535c:	4b42      	ldr	r3, [pc, #264]	; (5468 <vendor_request_handler+0x92c>)
    535e:	2202      	movs	r2, #2
    5360:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW;
    5362:	4b42      	ldr	r3, [pc, #264]	; (546c <vendor_request_handler+0x930>)
    5364:	2208      	movs	r2, #8
    5366:	701a      	strb	r2, [r3, #0]
		break;
    5368:	e15d      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    536a:	687b      	ldr	r3, [r7, #4]
    536c:	781b      	ldrb	r3, [r3, #0]
    536e:	461a      	mov	r2, r3
    5370:	687b      	ldr	r3, [r7, #4]
    5372:	3301      	adds	r3, #1
    5374:	781b      	ldrb	r3, [r3, #0]
    5376:	021b      	lsls	r3, r3, #8
    5378:	431a      	orrs	r2, r3
    537a:	687b      	ldr	r3, [r7, #4]
    537c:	3302      	adds	r3, #2
    537e:	781b      	ldrb	r3, [r3, #0]
    5380:	041b      	lsls	r3, r3, #16
    5382:	431a      	orrs	r2, r3
    5384:	687b      	ldr	r3, [r7, #4]
    5386:	3303      	adds	r3, #3
    5388:	781b      	ldrb	r3, [r3, #0]
    538a:	061b      	lsls	r3, r3, #24
    538c:	4313      	orrs	r3, r2
    538e:	63fb      	str	r3, [r7, #60]	; 0x3c
		clkn = clock;
    5390:	4a34      	ldr	r2, [pc, #208]	; (5464 <vendor_request_handler+0x928>)
    5392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5394:	6013      	str	r3, [r2, #0]
		cs_threshold_calc_and_set();
    5396:	f7ff fb5b 	bl	4a50 <cs_threshold_calc_and_set>
		break;
    539a:	e144      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    539c:	2300      	movs	r3, #0
    539e:	64fb      	str	r3, [r7, #76]	; 0x4c
    53a0:	e00b      	b.n	53ba <vendor_request_handler+0x87e>
			afh_map[i] = data[i];
    53a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    53a4:	687a      	ldr	r2, [r7, #4]
    53a6:	4413      	add	r3, r2
    53a8:	7819      	ldrb	r1, [r3, #0]
    53aa:	4a31      	ldr	r2, [pc, #196]	; (5470 <vendor_request_handler+0x934>)
    53ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    53ae:	4413      	add	r3, r2
    53b0:	460a      	mov	r2, r1
    53b2:	701a      	strb	r2, [r3, #0]
		clkn = clock;
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    53b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    53b6:	3301      	adds	r3, #1
    53b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    53ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    53bc:	2b09      	cmp	r3, #9
    53be:	ddf0      	ble.n	53a2 <vendor_request_handler+0x866>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    53c0:	4b2c      	ldr	r3, [pc, #176]	; (5474 <vendor_request_handler+0x938>)
    53c2:	2201      	movs	r2, #1
    53c4:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    53c6:	683b      	ldr	r3, [r7, #0]
    53c8:	220a      	movs	r2, #10
    53ca:	601a      	str	r2, [r3, #0]
		break;
    53cc:	e12b      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    53ce:	2300      	movs	r3, #0
    53d0:	64fb      	str	r3, [r7, #76]	; 0x4c
    53d2:	e007      	b.n	53e4 <vendor_request_handler+0x8a8>
			afh_map[i] = 0;
    53d4:	4a26      	ldr	r2, [pc, #152]	; (5470 <vendor_request_handler+0x934>)
    53d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    53d8:	4413      	add	r3, r2
    53da:	2200      	movs	r2, #0
    53dc:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    53de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    53e0:	3301      	adds	r3, #1
    53e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    53e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    53e6:	2b09      	cmp	r3, #9
    53e8:	ddf4      	ble.n	53d4 <vendor_request_handler+0x898>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    53ea:	4b22      	ldr	r3, [pc, #136]	; (5474 <vendor_request_handler+0x938>)
    53ec:	2200      	movs	r2, #0
    53ee:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    53f0:	683b      	ldr	r3, [r7, #0]
    53f2:	220a      	movs	r2, #10
    53f4:	601a      	str	r2, [r3, #0]
		break;
    53f6:	e116      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    53f8:	4b1a      	ldr	r3, [pc, #104]	; (5464 <vendor_request_handler+0x928>)
    53fa:	681b      	ldr	r3, [r3, #0]
    53fc:	63fb      	str	r3, [r7, #60]	; 0x3c
		for(i=0; i < 4; i++) {
    53fe:	2300      	movs	r3, #0
    5400:	64fb      	str	r3, [r7, #76]	; 0x4c
    5402:	e00c      	b.n	541e <vendor_request_handler+0x8e2>
			data[i] = (clock >> (8*i)) & 0xff;
    5404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5406:	687a      	ldr	r2, [r7, #4]
    5408:	4413      	add	r3, r2
    540a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    540c:	00d2      	lsls	r2, r2, #3
    540e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    5410:	fa21 f202 	lsr.w	r2, r1, r2
    5414:	b2d2      	uxtb	r2, r2
    5416:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(i=0; i < 4; i++) {
    5418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    541a:	3301      	adds	r3, #1
    541c:	64fb      	str	r3, [r7, #76]	; 0x4c
    541e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5420:	2b03      	cmp	r3, #3
    5422:	ddef      	ble.n	5404 <vendor_request_handler+0x8c8>
			data[i] = (clock >> (8*i)) & 0xff;
		}
		*data_len = 4;
    5424:	683b      	ldr	r3, [r7, #0]
    5426:	2204      	movs	r2, #4
    5428:	601a      	str	r2, [r3, #0]
		break;
    542a:	e0fc      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;
    542c:	683b      	ldr	r3, [r7, #0]
    542e:	2200      	movs	r2, #0
    5430:	601a      	str	r2, [r3, #0]

		do_hop = 0;
    5432:	4b11      	ldr	r3, [pc, #68]	; (5478 <vendor_request_handler+0x93c>)
    5434:	2200      	movs	r2, #0
    5436:	701a      	strb	r2, [r3, #0]
		hop_mode = HOP_BTLE;
    5438:	4b0b      	ldr	r3, [pc, #44]	; (5468 <vendor_request_handler+0x92c>)
    543a:	2203      	movs	r2, #3
    543c:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW_LE;
    543e:	4b0b      	ldr	r3, [pc, #44]	; (546c <vendor_request_handler+0x930>)
    5440:	2209      	movs	r2, #9
    5442:	701a      	strb	r2, [r3, #0]

		queue_init();
    5444:	f004 f83a 	bl	94bc <queue_init>
		cs_threshold_calc_and_set();
    5448:	f7ff fb02 	bl	4a50 <cs_threshold_calc_and_set>
		break;
    544c:	e0eb      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    544e:	2300      	movs	r3, #0
    5450:	64fb      	str	r3, [r7, #76]	; 0x4c
    5452:	e021      	b.n	5498 <vendor_request_handler+0x95c>
    5454:	0000cf78 	.word	0x0000cf78
    5458:	0000cf34 	.word	0x0000cf34
    545c:	1000044c 	.word	0x1000044c
    5460:	100010d0 	.word	0x100010d0
    5464:	10000bec 	.word	0x10000bec
    5468:	1000097c 	.word	0x1000097c
    546c:	10000a3f 	.word	0x10000a3f
    5470:	10000bc4 	.word	0x10000bc4
    5474:	10001038 	.word	0x10001038
    5478:	1000097d 	.word	0x1000097d
			data[i] = (le.access_address >> (8*i)) & 0xff;
    547c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    547e:	687a      	ldr	r2, [r7, #4]
    5480:	4413      	add	r3, r2
    5482:	4a6c      	ldr	r2, [pc, #432]	; (5634 <vendor_request_handler+0xaf8>)
    5484:	6811      	ldr	r1, [r2, #0]
    5486:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5488:	00d2      	lsls	r2, r2, #3
    548a:	fa21 f202 	lsr.w	r2, r1, r2
    548e:	b2d2      	uxtb	r2, r2
    5490:	701a      	strb	r2, [r3, #0]
		queue_init();
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    5492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5494:	3301      	adds	r3, #1
    5496:	64fb      	str	r3, [r7, #76]	; 0x4c
    5498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    549a:	2b03      	cmp	r3, #3
    549c:	ddee      	ble.n	547c <vendor_request_handler+0x940>
			data[i] = (le.access_address >> (8*i)) & 0xff;
		}
		*data_len = 4;
    549e:	683b      	ldr	r3, [r7, #0]
    54a0:	2204      	movs	r2, #4
    54a2:	601a      	str	r2, [r3, #0]
		break;
    54a4:	e0bf      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    54a6:	687b      	ldr	r3, [r7, #4]
    54a8:	781b      	ldrb	r3, [r3, #0]
    54aa:	461a      	mov	r2, r3
    54ac:	687b      	ldr	r3, [r7, #4]
    54ae:	3301      	adds	r3, #1
    54b0:	781b      	ldrb	r3, [r3, #0]
    54b2:	021b      	lsls	r3, r3, #8
    54b4:	431a      	orrs	r2, r3
    54b6:	687b      	ldr	r3, [r7, #4]
    54b8:	3302      	adds	r3, #2
    54ba:	781b      	ldrb	r3, [r3, #0]
    54bc:	041b      	lsls	r3, r3, #16
    54be:	431a      	orrs	r2, r3
    54c0:	687b      	ldr	r3, [r7, #4]
    54c2:	3303      	adds	r3, #3
    54c4:	781b      	ldrb	r3, [r3, #0]
    54c6:	061b      	lsls	r3, r3, #24
    54c8:	4313      	orrs	r3, r2
    54ca:	4618      	mov	r0, r3
    54cc:	f001 fefc 	bl	72c8 <le_set_access_address>
		le.target_set = 1;
    54d0:	4b58      	ldr	r3, [pc, #352]	; (5634 <vendor_request_handler+0xaf8>)
    54d2:	2201      	movs	r2, #1
    54d4:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    54d6:	e0a6      	b.n	5626 <vendor_request_handler+0xaea>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    54d8:	687b      	ldr	r3, [r7, #4]
    54da:	2213      	movs	r2, #19
    54dc:	701a      	strb	r2, [r3, #0]
		data[1] = 0x37;
    54de:	687b      	ldr	r3, [r7, #4]
    54e0:	3301      	adds	r3, #1
    54e2:	2237      	movs	r2, #55	; 0x37
    54e4:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    54e6:	683b      	ldr	r3, [r7, #0]
    54e8:	2202      	movs	r2, #2
    54ea:	601a      	str	r2, [r3, #0]
		break;
    54ec:	e09b      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    54ee:	4b51      	ldr	r3, [pc, #324]	; (5634 <vendor_request_handler+0xaf8>)
    54f0:	691b      	ldr	r3, [r3, #16]
    54f2:	2b00      	cmp	r3, #0
    54f4:	bf14      	ite	ne
    54f6:	2301      	movne	r3, #1
    54f8:	2300      	moveq	r3, #0
    54fa:	b2db      	uxtb	r3, r3
    54fc:	461a      	mov	r2, r3
    54fe:	687b      	ldr	r3, [r7, #4]
    5500:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    5502:	683b      	ldr	r3, [r7, #0]
    5504:	2201      	movs	r2, #1
    5506:	601a      	str	r2, [r3, #0]
		break;
    5508:	e08d      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    550a:	68bb      	ldr	r3, [r7, #8]
    550c:	881b      	ldrh	r3, [r3, #0]
    550e:	2b00      	cmp	r3, #0
    5510:	bf14      	ite	ne
    5512:	2301      	movne	r3, #1
    5514:	2300      	moveq	r3, #0
    5516:	b2db      	uxtb	r3, r3
    5518:	461a      	mov	r2, r3
    551a:	4b46      	ldr	r3, [pc, #280]	; (5634 <vendor_request_handler+0xaf8>)
    551c:	611a      	str	r2, [r3, #16]
		break;
    551e:	e082      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_POLL:
		p = dequeue();
    5520:	f004 f80c 	bl	953c <dequeue>
    5524:	6478      	str	r0, [r7, #68]	; 0x44
		if (p != NULL) {
    5526:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5528:	2b00      	cmp	r3, #0
    552a:	d008      	beq.n	553e <vendor_request_handler+0xa02>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    552c:	6878      	ldr	r0, [r7, #4]
    552e:	6c79      	ldr	r1, [r7, #68]	; 0x44
    5530:	2240      	movs	r2, #64	; 0x40
    5532:	f007 f80f 	bl	c554 <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    5536:	683b      	ldr	r3, [r7, #0]
    5538:	2240      	movs	r2, #64	; 0x40
    553a:	601a      	str	r2, [r3, #0]
		} else {
			data[0] = 0;
			*data_len = 1;
		}
		break;
    553c:	e073      	b.n	5626 <vendor_request_handler+0xaea>
		p = dequeue();
		if (p != NULL) {
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
			*data_len = sizeof(usb_pkt_rx);
		} else {
			data[0] = 0;
    553e:	687b      	ldr	r3, [r7, #4]
    5540:	2200      	movs	r2, #0
    5542:	701a      	strb	r2, [r3, #0]
			*data_len = 1;
    5544:	683b      	ldr	r3, [r7, #0]
    5546:	2201      	movs	r2, #1
    5548:	601a      	str	r2, [r3, #0]
		}
		break;
    554a:	e06c      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    554c:	683b      	ldr	r3, [r7, #0]
    554e:	2200      	movs	r2, #0
    5550:	601a      	str	r2, [r3, #0]

		hop_mode = HOP_NONE;
    5552:	4b39      	ldr	r3, [pc, #228]	; (5638 <vendor_request_handler+0xafc>)
    5554:	2200      	movs	r2, #0
    5556:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_PROMISC_LE;
    5558:	4b38      	ldr	r3, [pc, #224]	; (563c <vendor_request_handler+0xb00>)
    555a:	220a      	movs	r2, #10
    555c:	701a      	strb	r2, [r3, #0]

		queue_init();
    555e:	f003 ffad 	bl	94bc <queue_init>
		cs_threshold_calc_and_set();
    5562:	f7ff fa75 	bl	4a50 <cs_threshold_calc_and_set>
		break;
    5566:	e05e      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    5568:	68bb      	ldr	r3, [r7, #8]
    556a:	881b      	ldrh	r3, [r3, #0]
    556c:	b2db      	uxtb	r3, r3
    556e:	4618      	mov	r0, r3
    5570:	f005 fa06 	bl	a980 <cc2400_get>
    5574:	4603      	mov	r3, r0
    5576:	877b      	strh	r3, [r7, #58]	; 0x3a
		data[0] = (reg_val >> 8) & 0xff;
    5578:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    557a:	0a1b      	lsrs	r3, r3, #8
    557c:	b29b      	uxth	r3, r3
    557e:	b2da      	uxtb	r2, r3
    5580:	687b      	ldr	r3, [r7, #4]
    5582:	701a      	strb	r2, [r3, #0]
		data[1] = reg_val & 0xff;
    5584:	687b      	ldr	r3, [r7, #4]
    5586:	3301      	adds	r3, #1
    5588:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
    558a:	b2d2      	uxtb	r2, r2
    558c:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    558e:	683b      	ldr	r3, [r7, #0]
    5590:	2202      	movs	r2, #2
    5592:	601a      	str	r2, [r3, #0]
		break;
    5594:	e047      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    5596:	68bb      	ldr	r3, [r7, #8]
    5598:	881b      	ldrh	r3, [r3, #0]
    559a:	b2da      	uxtb	r2, r3
    559c:	68bb      	ldr	r3, [r7, #8]
    559e:	3302      	adds	r3, #2
    55a0:	881b      	ldrh	r3, [r3, #0]
    55a2:	4610      	mov	r0, r2
    55a4:	4619      	mov	r1, r3
    55a6:	f005 fa01 	bl	a9ac <cc2400_set>
		break;
    55aa:	e03c      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_BTLE_SLAVE:
		memcpy(slave_mac_address, data, 6);
    55ac:	4824      	ldr	r0, [pc, #144]	; (5640 <vendor_request_handler+0xb04>)
    55ae:	6879      	ldr	r1, [r7, #4]
    55b0:	2206      	movs	r2, #6
    55b2:	f006 ffcf 	bl	c554 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    55b6:	4b21      	ldr	r3, [pc, #132]	; (563c <vendor_request_handler+0xb00>)
    55b8:	220c      	movs	r2, #12
    55ba:	701a      	strb	r2, [r3, #0]
		break;
    55bc:	e033      	b.n	5626 <vendor_request_handler+0xaea>

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    55be:	687b      	ldr	r3, [r7, #4]
    55c0:	795a      	ldrb	r2, [r3, #5]
    55c2:	4b1c      	ldr	r3, [pc, #112]	; (5634 <vendor_request_handler+0xaf8>)
    55c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		le.target[1] = data[4];
    55c8:	687b      	ldr	r3, [r7, #4]
    55ca:	791a      	ldrb	r2, [r3, #4]
    55cc:	4b19      	ldr	r3, [pc, #100]	; (5634 <vendor_request_handler+0xaf8>)
    55ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		le.target[2] = data[3];
    55d2:	687b      	ldr	r3, [r7, #4]
    55d4:	78da      	ldrb	r2, [r3, #3]
    55d6:	4b17      	ldr	r3, [pc, #92]	; (5634 <vendor_request_handler+0xaf8>)
    55d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		le.target[3] = data[2];
    55dc:	687b      	ldr	r3, [r7, #4]
    55de:	789a      	ldrb	r2, [r3, #2]
    55e0:	4b14      	ldr	r3, [pc, #80]	; (5634 <vendor_request_handler+0xaf8>)
    55e2:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		le.target[4] = data[1];
    55e6:	687b      	ldr	r3, [r7, #4]
    55e8:	785a      	ldrb	r2, [r3, #1]
    55ea:	4b12      	ldr	r3, [pc, #72]	; (5634 <vendor_request_handler+0xaf8>)
    55ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		le.target[5] = data[0];
    55f0:	687b      	ldr	r3, [r7, #4]
    55f2:	781a      	ldrb	r2, [r3, #0]
    55f4:	4b0f      	ldr	r3, [pc, #60]	; (5634 <vendor_request_handler+0xaf8>)
    55f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		le.target_set = 1;
    55fa:	4b0e      	ldr	r3, [pc, #56]	; (5634 <vendor_request_handler+0xaf8>)
    55fc:	2201      	movs	r2, #1
    55fe:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    5600:	e011      	b.n	5626 <vendor_request_handler+0xaea>

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    5602:	68bb      	ldr	r3, [r7, #8]
    5604:	881b      	ldrh	r3, [r3, #0]
    5606:	b2da      	uxtb	r2, r3
    5608:	4b0e      	ldr	r3, [pc, #56]	; (5644 <vendor_request_handler+0xb08>)
    560a:	701a      	strb	r2, [r3, #0]
		break;
    560c:	e00b      	b.n	5626 <vendor_request_handler+0xaea>
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    560e:	4b0b      	ldr	r3, [pc, #44]	; (563c <vendor_request_handler+0xb00>)
    5610:	220d      	movs	r2, #13
    5612:	701a      	strb	r2, [r3, #0]
		ego_mode = request_params[0];
    5614:	68bb      	ldr	r3, [r7, #8]
    5616:	881b      	ldrh	r3, [r3, #0]
    5618:	b2da      	uxtb	r2, r3
    561a:	4b0b      	ldr	r3, [pc, #44]	; (5648 <vendor_request_handler+0xb0c>)
    561c:	701a      	strb	r2, [r3, #0]
		break;
    561e:	e002      	b.n	5626 <vendor_request_handler+0xaea>

	default:
		return 0;
    5620:	2300      	movs	r3, #0
    5622:	e001      	b.n	5628 <vendor_request_handler+0xaec>
		le.target_set = 1;
		break;

	case UBERTOOTH_DO_SOMETHING:
		// do something! just don't commit anything here
		break;
    5624:	bf00      	nop
		break;

	default:
		return 0;
	}
	return 1;
    5626:	2301      	movs	r3, #1
}
    5628:	4618      	mov	r0, r3
    562a:	3754      	adds	r7, #84	; 0x54
    562c:	46bd      	mov	sp, r7
    562e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5632:	bf00      	nop
    5634:	10000458 	.word	0x10000458
    5638:	1000097c 	.word	0x1000097c
    563c:	10000a3f 	.word	0x10000a3f
    5640:	1000098c 	.word	0x1000098c
    5644:	10000a40 	.word	0x10000a40
    5648:	10000a41 	.word	0x10000a41

0000564c <clkn_init>:

static void clkn_init()
{
    564c:	b480      	push	{r7}
    564e:	af00      	add	r7, sp, #0
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    5650:	4b0c      	ldr	r3, [pc, #48]	; (5684 <clkn_init+0x38>)
    5652:	2202      	movs	r2, #2
    5654:	601a      	str	r2, [r3, #0]
	clkn = 0;
    5656:	4b0c      	ldr	r3, [pc, #48]	; (5688 <clkn_init+0x3c>)
    5658:	2200      	movs	r2, #0
    565a:	601a      	str	r2, [r3, #0]
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    565c:	4b0b      	ldr	r3, [pc, #44]	; (568c <clkn_init+0x40>)
    565e:	2204      	movs	r2, #4
    5660:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    5662:	4b0b      	ldr	r3, [pc, #44]	; (5690 <clkn_init+0x44>)
    5664:	f640 4234 	movw	r2, #3124	; 0xc34
    5668:	601a      	str	r2, [r3, #0]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    566a:	4b0a      	ldr	r3, [pc, #40]	; (5694 <clkn_init+0x48>)
    566c:	2203      	movs	r2, #3
    566e:	601a      	str	r2, [r3, #0]
	ISER0 = ISER0_ISE_TIMER0;
    5670:	4b09      	ldr	r3, [pc, #36]	; (5698 <clkn_init+0x4c>)
    5672:	2202      	movs	r2, #2
    5674:	601a      	str	r2, [r3, #0]

	/* start timer */
	T0TCR = TCR_Counter_Enable;
    5676:	4b03      	ldr	r3, [pc, #12]	; (5684 <clkn_init+0x38>)
    5678:	2201      	movs	r2, #1
    567a:	601a      	str	r2, [r3, #0]
}
    567c:	46bd      	mov	sp, r7
    567e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5682:	4770      	bx	lr
    5684:	40004004 	.word	0x40004004
    5688:	10000bec 	.word	0x10000bec
    568c:	4000400c 	.word	0x4000400c
    5690:	40004018 	.word	0x40004018
    5694:	40004014 	.word	0x40004014
    5698:	e000e100 	.word	0xe000e100

0000569c <TIMER0_IRQHandler>:

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    569c:	b480      	push	{r7}
    569e:	b083      	sub	sp, #12
    56a0:	af00      	add	r7, sp, #0
	// Use non-volatile working register to shave off a couple instructions
	u32 next;
	u32 le_clk;

	if (T0IR & TIR_MR0_Interrupt) {
    56a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    56a6:	681b      	ldr	r3, [r3, #0]
    56a8:	f003 0301 	and.w	r3, r3, #1
    56ac:	2b00      	cmp	r3, #0
    56ae:	d06d      	beq.n	578c <TIMER0_IRQHandler+0xf0>

		clkn++;
    56b0:	4b39      	ldr	r3, [pc, #228]	; (5798 <TIMER0_IRQHandler+0xfc>)
    56b2:	681b      	ldr	r3, [r3, #0]
    56b4:	3301      	adds	r3, #1
    56b6:	4a38      	ldr	r2, [pc, #224]	; (5798 <TIMER0_IRQHandler+0xfc>)
    56b8:	6013      	str	r3, [r2, #0]
		next = clkn;
    56ba:	4b37      	ldr	r3, [pc, #220]	; (5798 <TIMER0_IRQHandler+0xfc>)
    56bc:	681b      	ldr	r3, [r3, #0]
    56be:	607b      	str	r3, [r7, #4]
		le_clk = (next - le.conn_epoch) & 0x03;
    56c0:	4b36      	ldr	r3, [pc, #216]	; (579c <TIMER0_IRQHandler+0x100>)
    56c2:	699b      	ldr	r3, [r3, #24]
    56c4:	687a      	ldr	r2, [r7, #4]
    56c6:	1ad3      	subs	r3, r2, r3
    56c8:	f003 0303 	and.w	r3, r3, #3
    56cc:	603b      	str	r3, [r7, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    56ce:	4b34      	ldr	r3, [pc, #208]	; (57a0 <TIMER0_IRQHandler+0x104>)
    56d0:	781b      	ldrb	r3, [r3, #0]
    56d2:	2b00      	cmp	r3, #0
    56d4:	d003      	beq.n	56de <TIMER0_IRQHandler+0x42>
    56d6:	4b32      	ldr	r3, [pc, #200]	; (57a0 <TIMER0_IRQHandler+0x104>)
    56d8:	781b      	ldrb	r3, [r3, #0]
    56da:	2b01      	cmp	r3, #1
    56dc:	d109      	bne.n	56f2 <TIMER0_IRQHandler+0x56>
			if ((next & 0x7f) == 0)
    56de:	687b      	ldr	r3, [r7, #4]
    56e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    56e4:	2b00      	cmp	r3, #0
    56e6:	d103      	bne.n	56f0 <TIMER0_IRQHandler+0x54>
				do_hop = 1;
    56e8:	4b2e      	ldr	r3, [pc, #184]	; (57a4 <TIMER0_IRQHandler+0x108>)
    56ea:	2201      	movs	r2, #1
    56ec:	701a      	strb	r2, [r3, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
			if ((next & 0x7f) == 0)
    56ee:	e037      	b.n	5760 <TIMER0_IRQHandler+0xc4>
    56f0:	e036      	b.n	5760 <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    56f2:	4b2b      	ldr	r3, [pc, #172]	; (57a0 <TIMER0_IRQHandler+0x104>)
    56f4:	781b      	ldrb	r3, [r3, #0]
    56f6:	2b02      	cmp	r3, #2
    56f8:	d108      	bne.n	570c <TIMER0_IRQHandler+0x70>
			if ((next & 0x1) == 0)
    56fa:	687b      	ldr	r3, [r7, #4]
    56fc:	f003 0301 	and.w	r3, r3, #1
    5700:	2b00      	cmp	r3, #0
    5702:	d12d      	bne.n	5760 <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
    5704:	4b27      	ldr	r3, [pc, #156]	; (57a4 <TIMER0_IRQHandler+0x108>)
    5706:	2201      	movs	r2, #1
    5708:	701a      	strb	r2, [r3, #0]
    570a:	e029      	b.n	5760 <TIMER0_IRQHandler+0xc4>
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    570c:	4b24      	ldr	r3, [pc, #144]	; (57a0 <TIMER0_IRQHandler+0x104>)
    570e:	781b      	ldrb	r3, [r3, #0]
    5710:	2b03      	cmp	r3, #3
    5712:	d125      	bne.n	5760 <TIMER0_IRQHandler+0xc4>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    5714:	4b21      	ldr	r3, [pc, #132]	; (579c <TIMER0_IRQHandler+0x100>)
    5716:	7d1b      	ldrb	r3, [r3, #20]
    5718:	2b03      	cmp	r3, #3
    571a:	d121      	bne.n	5760 <TIMER0_IRQHandler+0xc4>
    571c:	683b      	ldr	r3, [r7, #0]
    571e:	2b00      	cmp	r3, #0
    5720:	d11e      	bne.n	5760 <TIMER0_IRQHandler+0xc4>
				--le.interval_timer;
    5722:	4b1e      	ldr	r3, [pc, #120]	; (579c <TIMER0_IRQHandler+0x100>)
    5724:	8b9b      	ldrh	r3, [r3, #28]
    5726:	b29b      	uxth	r3, r3
    5728:	3b01      	subs	r3, #1
    572a:	b29a      	uxth	r2, r3
    572c:	4b1b      	ldr	r3, [pc, #108]	; (579c <TIMER0_IRQHandler+0x100>)
    572e:	839a      	strh	r2, [r3, #28]
				if (le.interval_timer == 0) {
    5730:	4b1a      	ldr	r3, [pc, #104]	; (579c <TIMER0_IRQHandler+0x100>)
    5732:	8b9b      	ldrh	r3, [r3, #28]
    5734:	b29b      	uxth	r3, r3
    5736:	2b00      	cmp	r3, #0
    5738:	d10e      	bne.n	5758 <TIMER0_IRQHandler+0xbc>
					do_hop = 1;
    573a:	4b1a      	ldr	r3, [pc, #104]	; (57a4 <TIMER0_IRQHandler+0x108>)
    573c:	2201      	movs	r2, #1
    573e:	701a      	strb	r2, [r3, #0]
					++le.conn_count;
    5740:	4b16      	ldr	r3, [pc, #88]	; (579c <TIMER0_IRQHandler+0x100>)
    5742:	8c1b      	ldrh	r3, [r3, #32]
    5744:	b29b      	uxth	r3, r3
    5746:	3301      	adds	r3, #1
    5748:	b29a      	uxth	r2, r3
    574a:	4b14      	ldr	r3, [pc, #80]	; (579c <TIMER0_IRQHandler+0x100>)
    574c:	841a      	strh	r2, [r3, #32]
					le.interval_timer = le.conn_interval;
    574e:	4b13      	ldr	r3, [pc, #76]	; (579c <TIMER0_IRQHandler+0x100>)
    5750:	8bda      	ldrh	r2, [r3, #30]
    5752:	4b12      	ldr	r3, [pc, #72]	; (579c <TIMER0_IRQHandler+0x100>)
    5754:	839a      	strh	r2, [r3, #28]
    5756:	e003      	b.n	5760 <TIMER0_IRQHandler+0xc4>
				} else {
					TXLED_CLR; // hack!
    5758:	4b13      	ldr	r3, [pc, #76]	; (57a8 <TIMER0_IRQHandler+0x10c>)
    575a:	f44f 7280 	mov.w	r2, #256	; 0x100
    575e:	601a      	str	r2, [r3, #0]
				}
			}
		}

		/* Keepalive trigger fires at 3200/2^9 = 6.25 Hz */
		if ((next & 0x1ff) == 0)
    5760:	687b      	ldr	r3, [r7, #4]
    5762:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5766:	2b00      	cmp	r3, #0
    5768:	d102      	bne.n	5770 <TIMER0_IRQHandler+0xd4>
			keepalive_trigger = 1;
    576a:	4b10      	ldr	r3, [pc, #64]	; (57ac <TIMER0_IRQHandler+0x110>)
    576c:	2201      	movs	r2, #1
    576e:	701a      	strb	r2, [r3, #0]

		/* Ack interrupt */
		T0MR0 = 3124 - clock_trim;
    5770:	4a0f      	ldr	r2, [pc, #60]	; (57b0 <TIMER0_IRQHandler+0x114>)
    5772:	4b10      	ldr	r3, [pc, #64]	; (57b4 <TIMER0_IRQHandler+0x118>)
    5774:	681b      	ldr	r3, [r3, #0]
    5776:	f5c3 6343 	rsb	r3, r3, #3120	; 0xc30
    577a:	3304      	adds	r3, #4
    577c:	6013      	str	r3, [r2, #0]
		clock_trim = 0;
    577e:	4b0d      	ldr	r3, [pc, #52]	; (57b4 <TIMER0_IRQHandler+0x118>)
    5780:	2200      	movs	r2, #0
    5782:	601a      	str	r2, [r3, #0]
		T0IR = TIR_MR0_Interrupt;
    5784:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    5788:	2201      	movs	r2, #1
    578a:	601a      	str	r2, [r3, #0]
	}
}
    578c:	370c      	adds	r7, #12
    578e:	46bd      	mov	sp, r7
    5790:	f85d 7b04 	ldr.w	r7, [sp], #4
    5794:	4770      	bx	lr
    5796:	bf00      	nop
    5798:	10000bec 	.word	0x10000bec
    579c:	10000458 	.word	0x10000458
    57a0:	1000097c 	.word	0x1000097c
    57a4:	1000097d 	.word	0x1000097d
    57a8:	2009c03c 	.word	0x2009c03c
    57ac:	10000be8 	.word	0x10000be8
    57b0:	40004018 	.word	0x40004018
    57b4:	10000984 	.word	0x10000984

000057b8 <EINT3_IRQHandler>:

/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
//static volatile u8 txledstate = 1;
void EINT3_IRQHandler()
{
    57b8:	b480      	push	{r7}
    57ba:	af00      	add	r7, sp, #0
	/* TODO - check specific source of shared interrupt */
	IO2IntClr = PIN_GIO6;            // clear interrupt
    57bc:	4b0b      	ldr	r3, [pc, #44]	; (57ec <EINT3_IRQHandler+0x34>)
    57be:	2204      	movs	r2, #4
    57c0:	601a      	str	r2, [r3, #0]
	cs_trigger = 1;                  // signal trigger
    57c2:	4b0b      	ldr	r3, [pc, #44]	; (57f0 <EINT3_IRQHandler+0x38>)
    57c4:	2201      	movs	r2, #1
    57c6:	701a      	strb	r2, [r3, #0]
	cs_timestamp = CLK100NS;         // time at trigger
    57c8:	4b0a      	ldr	r3, [pc, #40]	; (57f4 <EINT3_IRQHandler+0x3c>)
    57ca:	681b      	ldr	r3, [r3, #0]
    57cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    57d0:	f640 4235 	movw	r2, #3125	; 0xc35
    57d4:	fb02 f203 	mul.w	r2, r2, r3
    57d8:	4b07      	ldr	r3, [pc, #28]	; (57f8 <EINT3_IRQHandler+0x40>)
    57da:	681b      	ldr	r3, [r3, #0]
    57dc:	4413      	add	r3, r2
    57de:	4a07      	ldr	r2, [pc, #28]	; (57fc <EINT3_IRQHandler+0x44>)
    57e0:	6013      	str	r3, [r2, #0]
}
    57e2:	46bd      	mov	sp, r7
    57e4:	f85d 7b04 	ldr.w	r7, [sp], #4
    57e8:	4770      	bx	lr
    57ea:	bf00      	nop
    57ec:	400280ac 	.word	0x400280ac
    57f0:	100010cc 	.word	0x100010cc
    57f4:	10000bec 	.word	0x10000bec
    57f8:	40004008 	.word	0x40004008
    57fc:	10000be4 	.word	0x10000be4

00005800 <msleep>:

/* Sleep (busy wait) for 'millis' milliseconds. The 'wait' routines in
 * ubertooth.c are matched to the clock setup at boot time and can not
 * be used while the board is running at 100MHz. */
static void msleep(uint32_t millis)
{
    5800:	b5b0      	push	{r4, r5, r7, lr}
    5802:	b084      	sub	sp, #16
    5804:	af00      	add	r7, sp, #0
    5806:	6078      	str	r0, [r7, #4]
	uint32_t stop_at = clkn + millis * 312.5 / 1000;  // millis -> clkn ticks
    5808:	4b1b      	ldr	r3, [pc, #108]	; (5878 <msleep+0x78>)
    580a:	681b      	ldr	r3, [r3, #0]
    580c:	4618      	mov	r0, r3
    580e:	f006 fbc7 	bl	bfa0 <__aeabi_ui2d>
    5812:	4604      	mov	r4, r0
    5814:	460d      	mov	r5, r1
    5816:	6878      	ldr	r0, [r7, #4]
    5818:	f006 fbc2 	bl	bfa0 <__aeabi_ui2d>
    581c:	4602      	mov	r2, r0
    581e:	460b      	mov	r3, r1
    5820:	4610      	mov	r0, r2
    5822:	4619      	mov	r1, r3
    5824:	a312      	add	r3, pc, #72	; (adr r3, 5870 <msleep+0x70>)
    5826:	e9d3 2300 	ldrd	r2, r3, [r3]
    582a:	f006 fc2f 	bl	c08c <__aeabi_dmul>
    582e:	4602      	mov	r2, r0
    5830:	460b      	mov	r3, r1
    5832:	4610      	mov	r0, r2
    5834:	4619      	mov	r1, r3
    5836:	f04f 0200 	mov.w	r2, #0
    583a:	4b10      	ldr	r3, [pc, #64]	; (587c <msleep+0x7c>)
    583c:	f006 fd50 	bl	c2e0 <__aeabi_ddiv>
    5840:	4602      	mov	r2, r0
    5842:	460b      	mov	r3, r1
    5844:	4620      	mov	r0, r4
    5846:	4629      	mov	r1, r5
    5848:	f006 fa6e 	bl	bd28 <__adddf3>
    584c:	4602      	mov	r2, r0
    584e:	460b      	mov	r3, r1
    5850:	4610      	mov	r0, r2
    5852:	4619      	mov	r1, r3
    5854:	f006 fe2c 	bl	c4b0 <__aeabi_d2uiz>
    5858:	4603      	mov	r3, r0
    585a:	60fb      	str	r3, [r7, #12]
	do { } while (clkn < stop_at);                   // TODO: handle wrapping
    585c:	4b06      	ldr	r3, [pc, #24]	; (5878 <msleep+0x78>)
    585e:	681a      	ldr	r2, [r3, #0]
    5860:	68fb      	ldr	r3, [r7, #12]
    5862:	429a      	cmp	r2, r3
    5864:	d3fa      	bcc.n	585c <msleep+0x5c>
}
    5866:	3710      	adds	r7, #16
    5868:	46bd      	mov	sp, r7
    586a:	bdb0      	pop	{r4, r5, r7, pc}
    586c:	f3af 8000 	nop.w
    5870:	00000000 	.word	0x00000000
    5874:	40738800 	.word	0x40738800
    5878:	10000bec 	.word	0x10000bec
    587c:	408f4000 	.word	0x408f4000

00005880 <dma_init>:

static void dma_init()
{
    5880:	b480      	push	{r7}
    5882:	af00      	add	r7, sp, #0
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    5884:	4a3f      	ldr	r2, [pc, #252]	; (5984 <dma_init+0x104>)
    5886:	4b3f      	ldr	r3, [pc, #252]	; (5984 <dma_init+0x104>)
    5888:	681b      	ldr	r3, [r3, #0]
    588a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    588e:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    5890:	4b3d      	ldr	r3, [pc, #244]	; (5988 <dma_init+0x108>)
    5892:	2200      	movs	r2, #0
    5894:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5896:	4b3d      	ldr	r3, [pc, #244]	; (598c <dma_init+0x10c>)
    5898:	2200      	movs	r2, #0
    589a:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    589c:	4b3c      	ldr	r3, [pc, #240]	; (5990 <dma_init+0x110>)
    589e:	2200      	movs	r2, #0
    58a0:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    58a2:	4b3c      	ldr	r3, [pc, #240]	; (5994 <dma_init+0x114>)
    58a4:	2200      	movs	r2, #0
    58a6:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    58a8:	4b3b      	ldr	r3, [pc, #236]	; (5998 <dma_init+0x118>)
    58aa:	2200      	movs	r2, #0
    58ac:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    58ae:	4b3b      	ldr	r3, [pc, #236]	; (599c <dma_init+0x11c>)
    58b0:	2200      	movs	r2, #0
    58b2:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    58b4:	4b3a      	ldr	r3, [pc, #232]	; (59a0 <dma_init+0x120>)
    58b6:	2200      	movs	r2, #0
    58b8:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    58ba:	4b3a      	ldr	r3, [pc, #232]	; (59a4 <dma_init+0x124>)
    58bc:	2200      	movs	r2, #0
    58be:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    58c0:	4b39      	ldr	r3, [pc, #228]	; (59a8 <dma_init+0x128>)
    58c2:	22ff      	movs	r2, #255	; 0xff
    58c4:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    58c6:	4b39      	ldr	r3, [pc, #228]	; (59ac <dma_init+0x12c>)
    58c8:	22ff      	movs	r2, #255	; 0xff
    58ca:	601a      	str	r2, [r3, #0]

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
    58cc:	4b38      	ldr	r3, [pc, #224]	; (59b0 <dma_init+0x130>)
    58ce:	4a39      	ldr	r2, [pc, #228]	; (59b4 <dma_init+0x134>)
    58d0:	601a      	str	r2, [r3, #0]
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
    58d2:	4a39      	ldr	r2, [pc, #228]	; (59b8 <dma_init+0x138>)
    58d4:	4b36      	ldr	r3, [pc, #216]	; (59b0 <dma_init+0x130>)
    58d6:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
    58d8:	4a38      	ldr	r2, [pc, #224]	; (59bc <dma_init+0x13c>)
    58da:	4b35      	ldr	r3, [pc, #212]	; (59b0 <dma_init+0x130>)
    58dc:	609a      	str	r2, [r3, #8]
	rx_dma_lli1.control = (DMA_SIZE) |
    58de:	4b34      	ldr	r3, [pc, #208]	; (59b0 <dma_init+0x130>)
    58e0:	4a37      	ldr	r2, [pc, #220]	; (59c0 <dma_init+0x140>)
    58e2:	60da      	str	r2, [r3, #12]
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
    58e4:	4b35      	ldr	r3, [pc, #212]	; (59bc <dma_init+0x13c>)
    58e6:	4a33      	ldr	r2, [pc, #204]	; (59b4 <dma_init+0x134>)
    58e8:	601a      	str	r2, [r3, #0]
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
    58ea:	4a36      	ldr	r2, [pc, #216]	; (59c4 <dma_init+0x144>)
    58ec:	4b33      	ldr	r3, [pc, #204]	; (59bc <dma_init+0x13c>)
    58ee:	605a      	str	r2, [r3, #4]
	rx_dma_lli2.next_lli = (u32)&rx_dma_lli1;
    58f0:	4a2f      	ldr	r2, [pc, #188]	; (59b0 <dma_init+0x130>)
    58f2:	4b32      	ldr	r3, [pc, #200]	; (59bc <dma_init+0x13c>)
    58f4:	609a      	str	r2, [r3, #8]
	rx_dma_lli2.control = (DMA_SIZE) |
    58f6:	4b31      	ldr	r3, [pc, #196]	; (59bc <dma_init+0x13c>)
    58f8:	4a31      	ldr	r2, [pc, #196]	; (59c0 <dma_init+0x140>)
    58fa:	60da      	str	r2, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* disable DMA interrupts */
	ICER0 = ICER0_ICE_DMA;
    58fc:	4b32      	ldr	r3, [pc, #200]	; (59c8 <dma_init+0x148>)
    58fe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5902:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    5904:	4b31      	ldr	r3, [pc, #196]	; (59cc <dma_init+0x14c>)
    5906:	2201      	movs	r2, #1
    5908:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    590a:	bf00      	nop
    590c:	4b2f      	ldr	r3, [pc, #188]	; (59cc <dma_init+0x14c>)
    590e:	681b      	ldr	r3, [r3, #0]
    5910:	f003 0301 	and.w	r3, r3, #1
    5914:	2b00      	cmp	r3, #0
    5916:	d0f9      	beq.n	590c <dma_init+0x8c>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    5918:	4a2d      	ldr	r2, [pc, #180]	; (59d0 <dma_init+0x150>)
    591a:	4b25      	ldr	r3, [pc, #148]	; (59b0 <dma_init+0x130>)
    591c:	681b      	ldr	r3, [r3, #0]
    591e:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    5920:	4a2c      	ldr	r2, [pc, #176]	; (59d4 <dma_init+0x154>)
    5922:	4b23      	ldr	r3, [pc, #140]	; (59b0 <dma_init+0x130>)
    5924:	685b      	ldr	r3, [r3, #4]
    5926:	6013      	str	r3, [r2, #0]
	DMACC0LLI = rx_dma_lli1.next_lli;
    5928:	4a2b      	ldr	r2, [pc, #172]	; (59d8 <dma_init+0x158>)
    592a:	4b21      	ldr	r3, [pc, #132]	; (59b0 <dma_init+0x130>)
    592c:	689b      	ldr	r3, [r3, #8]
    592e:	6013      	str	r3, [r2, #0]
	DMACC0Control = rx_dma_lli1.control;
    5930:	4a2a      	ldr	r2, [pc, #168]	; (59dc <dma_init+0x15c>)
    5932:	4b1f      	ldr	r3, [pc, #124]	; (59b0 <dma_init+0x130>)
    5934:	68db      	ldr	r3, [r3, #12]
    5936:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    5938:	4b13      	ldr	r3, [pc, #76]	; (5988 <dma_init+0x108>)
    593a:	f24d 0206 	movw	r2, #53254	; 0xd006
    593e:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5940:	4b27      	ldr	r3, [pc, #156]	; (59e0 <dma_init+0x160>)
    5942:	681b      	ldr	r3, [r3, #0]
    5944:	0d1b      	lsrs	r3, r3, #20
    5946:	b2db      	uxtb	r3, r3
    5948:	4a26      	ldr	r2, [pc, #152]	; (59e4 <dma_init+0x164>)
    594a:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    594c:	4b24      	ldr	r3, [pc, #144]	; (59e0 <dma_init+0x160>)
    594e:	681b      	ldr	r3, [r3, #0]
    5950:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5954:	f640 4235 	movw	r2, #3125	; 0xc35
    5958:	fb02 f203 	mul.w	r2, r2, r3
    595c:	4b22      	ldr	r3, [pc, #136]	; (59e8 <dma_init+0x168>)
    595e:	681b      	ldr	r3, [r3, #0]
    5960:	4413      	add	r3, r2
    5962:	4a22      	ldr	r2, [pc, #136]	; (59ec <dma_init+0x16c>)
    5964:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    5966:	4b22      	ldr	r3, [pc, #136]	; (59f0 <dma_init+0x170>)
    5968:	881b      	ldrh	r3, [r3, #0]
    596a:	b29a      	uxth	r2, r3
    596c:	4b21      	ldr	r3, [pc, #132]	; (59f4 <dma_init+0x174>)
    596e:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    5970:	4b21      	ldr	r3, [pc, #132]	; (59f8 <dma_init+0x178>)
    5972:	2200      	movs	r2, #0
    5974:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    5976:	4b21      	ldr	r3, [pc, #132]	; (59fc <dma_init+0x17c>)
    5978:	2200      	movs	r2, #0
    597a:	601a      	str	r2, [r3, #0]
}
    597c:	46bd      	mov	sp, r7
    597e:	f85d 7b04 	ldr.w	r7, [sp], #4
    5982:	4770      	bx	lr
    5984:	400fc0c4 	.word	0x400fc0c4
    5988:	50004110 	.word	0x50004110
    598c:	50004130 	.word	0x50004130
    5990:	50004150 	.word	0x50004150
    5994:	50004170 	.word	0x50004170
    5998:	50004190 	.word	0x50004190
    599c:	500041b0 	.word	0x500041b0
    59a0:	500041d0 	.word	0x500041d0
    59a4:	500041f0 	.word	0x500041f0
    59a8:	50004008 	.word	0x50004008
    59ac:	50004010 	.word	0x50004010
    59b0:	10001078 	.word	0x10001078
    59b4:	40030008 	.word	0x40030008
    59b8:	10001094 	.word	0x10001094
    59bc:	10000bd4 	.word	0x10000bd4
    59c0:	88009032 	.word	0x88009032
    59c4:	10001040 	.word	0x10001040
    59c8:	e000e180 	.word	0xe000e180
    59cc:	50004030 	.word	0x50004030
    59d0:	50004100 	.word	0x50004100
    59d4:	50004104 	.word	0x50004104
    59d8:	50004108 	.word	0x50004108
    59dc:	5000410c 	.word	0x5000410c
    59e0:	10000bec 	.word	0x10000bec
    59e4:	10000bf4 	.word	0x10000bf4
    59e8:	40004008 	.word	0x40004008
    59ec:	10001030 	.word	0x10001030
    59f0:	1000049c 	.word	0x1000049c
    59f4:	1000098a 	.word	0x1000098a
    59f8:	10000b04 	.word	0x10000b04
    59fc:	100010c8 	.word	0x100010c8

00005a00 <dma_init_le>:

static void dma_init_le()
{
    5a00:	b480      	push	{r7}
    5a02:	b083      	sub	sp, #12
    5a04:	af00      	add	r7, sp, #0
	int i;

	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    5a06:	4a4b      	ldr	r2, [pc, #300]	; (5b34 <dma_init_le+0x134>)
    5a08:	4b4a      	ldr	r3, [pc, #296]	; (5b34 <dma_init_le+0x134>)
    5a0a:	681b      	ldr	r3, [r3, #0]
    5a0c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    5a10:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    5a12:	4b49      	ldr	r3, [pc, #292]	; (5b38 <dma_init_le+0x138>)
    5a14:	2200      	movs	r2, #0
    5a16:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5a18:	4b48      	ldr	r3, [pc, #288]	; (5b3c <dma_init_le+0x13c>)
    5a1a:	2200      	movs	r2, #0
    5a1c:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    5a1e:	4b48      	ldr	r3, [pc, #288]	; (5b40 <dma_init_le+0x140>)
    5a20:	2200      	movs	r2, #0
    5a22:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5a24:	4b47      	ldr	r3, [pc, #284]	; (5b44 <dma_init_le+0x144>)
    5a26:	2200      	movs	r2, #0
    5a28:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    5a2a:	4b47      	ldr	r3, [pc, #284]	; (5b48 <dma_init_le+0x148>)
    5a2c:	2200      	movs	r2, #0
    5a2e:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5a30:	4b46      	ldr	r3, [pc, #280]	; (5b4c <dma_init_le+0x14c>)
    5a32:	2200      	movs	r2, #0
    5a34:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    5a36:	4b46      	ldr	r3, [pc, #280]	; (5b50 <dma_init_le+0x150>)
    5a38:	2200      	movs	r2, #0
    5a3a:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    5a3c:	4b45      	ldr	r3, [pc, #276]	; (5b54 <dma_init_le+0x154>)
    5a3e:	2200      	movs	r2, #0
    5a40:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5a42:	4b45      	ldr	r3, [pc, #276]	; (5b58 <dma_init_le+0x158>)
    5a44:	22ff      	movs	r2, #255	; 0xff
    5a46:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5a48:	4b44      	ldr	r3, [pc, #272]	; (5b5c <dma_init_le+0x15c>)
    5a4a:	22ff      	movs	r2, #255	; 0xff
    5a4c:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    5a4e:	4b44      	ldr	r3, [pc, #272]	; (5b60 <dma_init_le+0x160>)
    5a50:	2201      	movs	r2, #1
    5a52:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    5a54:	bf00      	nop
    5a56:	4b42      	ldr	r3, [pc, #264]	; (5b60 <dma_init_le+0x160>)
    5a58:	681b      	ldr	r3, [r3, #0]
    5a5a:	f003 0301 	and.w	r3, r3, #1
    5a5e:	2b00      	cmp	r3, #0
    5a60:	d0f9      	beq.n	5a56 <dma_init_le+0x56>

	for (i = 0; i < 11; ++i) {
    5a62:	2300      	movs	r3, #0
    5a64:	607b      	str	r3, [r7, #4]
    5a66:	e02a      	b.n	5abe <dma_init_le+0xbe>
		le_dma_lli[i].src = (u32)&(DIO_SSP_DR);
    5a68:	4a3e      	ldr	r2, [pc, #248]	; (5b64 <dma_init_le+0x164>)
    5a6a:	687b      	ldr	r3, [r7, #4]
    5a6c:	011b      	lsls	r3, r3, #4
    5a6e:	4413      	add	r3, r2
    5a70:	4a3d      	ldr	r2, [pc, #244]	; (5b68 <dma_init_le+0x168>)
    5a72:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].dest = (u32)&rxbuf1[4 * i];
    5a74:	687b      	ldr	r3, [r7, #4]
    5a76:	009b      	lsls	r3, r3, #2
    5a78:	4a3c      	ldr	r2, [pc, #240]	; (5b6c <dma_init_le+0x16c>)
    5a7a:	4413      	add	r3, r2
    5a7c:	4619      	mov	r1, r3
    5a7e:	4a39      	ldr	r2, [pc, #228]	; (5b64 <dma_init_le+0x164>)
    5a80:	687b      	ldr	r3, [r7, #4]
    5a82:	011b      	lsls	r3, r3, #4
    5a84:	4413      	add	r3, r2
    5a86:	6059      	str	r1, [r3, #4]
		le_dma_lli[i].next_lli = i < 10 ? (u32)&le_dma_lli[i+1] : 0;
    5a88:	687b      	ldr	r3, [r7, #4]
    5a8a:	2b09      	cmp	r3, #9
    5a8c:	dc06      	bgt.n	5a9c <dma_init_le+0x9c>
    5a8e:	687b      	ldr	r3, [r7, #4]
    5a90:	3301      	adds	r3, #1
    5a92:	011b      	lsls	r3, r3, #4
    5a94:	4a33      	ldr	r2, [pc, #204]	; (5b64 <dma_init_le+0x164>)
    5a96:	4413      	add	r3, r2
    5a98:	461a      	mov	r2, r3
    5a9a:	e000      	b.n	5a9e <dma_init_le+0x9e>
    5a9c:	2200      	movs	r2, #0
    5a9e:	4931      	ldr	r1, [pc, #196]	; (5b64 <dma_init_le+0x164>)
    5aa0:	687b      	ldr	r3, [r7, #4]
    5aa2:	011b      	lsls	r3, r3, #4
    5aa4:	440b      	add	r3, r1
    5aa6:	3308      	adds	r3, #8
    5aa8:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].control = 4 |
    5aaa:	4a2e      	ldr	r2, [pc, #184]	; (5b64 <dma_init_le+0x164>)
    5aac:	687b      	ldr	r3, [r7, #4]
    5aae:	011b      	lsls	r3, r3, #4
    5ab0:	4413      	add	r3, r2
    5ab2:	3308      	adds	r3, #8
    5ab4:	4a2e      	ldr	r2, [pc, #184]	; (5b70 <dma_init_le+0x170>)
    5ab6:	605a      	str	r2, [r3, #4]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    5ab8:	687b      	ldr	r3, [r7, #4]
    5aba:	3301      	adds	r3, #1
    5abc:	607b      	str	r3, [r7, #4]
    5abe:	687b      	ldr	r3, [r7, #4]
    5ac0:	2b0a      	cmp	r3, #10
    5ac2:	ddd1      	ble.n	5a68 <dma_init_le+0x68>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    5ac4:	4a2b      	ldr	r2, [pc, #172]	; (5b74 <dma_init_le+0x174>)
    5ac6:	4b27      	ldr	r3, [pc, #156]	; (5b64 <dma_init_le+0x164>)
    5ac8:	681b      	ldr	r3, [r3, #0]
    5aca:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    5acc:	4a2a      	ldr	r2, [pc, #168]	; (5b78 <dma_init_le+0x178>)
    5ace:	4b25      	ldr	r3, [pc, #148]	; (5b64 <dma_init_le+0x164>)
    5ad0:	685b      	ldr	r3, [r3, #4]
    5ad2:	6013      	str	r3, [r2, #0]
	DMACC0LLI = le_dma_lli[0].next_lli;
    5ad4:	4a29      	ldr	r2, [pc, #164]	; (5b7c <dma_init_le+0x17c>)
    5ad6:	4b23      	ldr	r3, [pc, #140]	; (5b64 <dma_init_le+0x164>)
    5ad8:	689b      	ldr	r3, [r3, #8]
    5ada:	6013      	str	r3, [r2, #0]
	DMACC0Control = le_dma_lli[0].control;
    5adc:	4a28      	ldr	r2, [pc, #160]	; (5b80 <dma_init_le+0x180>)
    5ade:	4b21      	ldr	r3, [pc, #132]	; (5b64 <dma_init_le+0x164>)
    5ae0:	68db      	ldr	r3, [r3, #12]
    5ae2:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    5ae4:	4b14      	ldr	r3, [pc, #80]	; (5b38 <dma_init_le+0x138>)
    5ae6:	f24d 0206 	movw	r2, #53254	; 0xd006
    5aea:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5aec:	4b25      	ldr	r3, [pc, #148]	; (5b84 <dma_init_le+0x184>)
    5aee:	681b      	ldr	r3, [r3, #0]
    5af0:	0d1b      	lsrs	r3, r3, #20
    5af2:	b2db      	uxtb	r3, r3
    5af4:	4a24      	ldr	r2, [pc, #144]	; (5b88 <dma_init_le+0x188>)
    5af6:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    5af8:	4b22      	ldr	r3, [pc, #136]	; (5b84 <dma_init_le+0x184>)
    5afa:	681b      	ldr	r3, [r3, #0]
    5afc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5b00:	f640 4235 	movw	r2, #3125	; 0xc35
    5b04:	fb02 f203 	mul.w	r2, r2, r3
    5b08:	4b20      	ldr	r3, [pc, #128]	; (5b8c <dma_init_le+0x18c>)
    5b0a:	681b      	ldr	r3, [r3, #0]
    5b0c:	4413      	add	r3, r2
    5b0e:	4a20      	ldr	r2, [pc, #128]	; (5b90 <dma_init_le+0x190>)
    5b10:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    5b12:	4b20      	ldr	r3, [pc, #128]	; (5b94 <dma_init_le+0x194>)
    5b14:	881b      	ldrh	r3, [r3, #0]
    5b16:	b29a      	uxth	r2, r3
    5b18:	4b1f      	ldr	r3, [pc, #124]	; (5b98 <dma_init_le+0x198>)
    5b1a:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    5b1c:	4b1f      	ldr	r3, [pc, #124]	; (5b9c <dma_init_le+0x19c>)
    5b1e:	2200      	movs	r2, #0
    5b20:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    5b22:	4b1f      	ldr	r3, [pc, #124]	; (5ba0 <dma_init_le+0x1a0>)
    5b24:	2200      	movs	r2, #0
    5b26:	601a      	str	r2, [r3, #0]
}
    5b28:	370c      	adds	r7, #12
    5b2a:	46bd      	mov	sp, r7
    5b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5b30:	4770      	bx	lr
    5b32:	bf00      	nop
    5b34:	400fc0c4 	.word	0x400fc0c4
    5b38:	50004110 	.word	0x50004110
    5b3c:	50004130 	.word	0x50004130
    5b40:	50004150 	.word	0x50004150
    5b44:	50004170 	.word	0x50004170
    5b48:	50004190 	.word	0x50004190
    5b4c:	500041b0 	.word	0x500041b0
    5b50:	500041d0 	.word	0x500041d0
    5b54:	500041f0 	.word	0x500041f0
    5b58:	50004008 	.word	0x50004008
    5b5c:	50004010 	.word	0x50004010
    5b60:	50004030 	.word	0x50004030
    5b64:	10000b10 	.word	0x10000b10
    5b68:	40030008 	.word	0x40030008
    5b6c:	10001094 	.word	0x10001094
    5b70:	88001004 	.word	0x88001004
    5b74:	50004100 	.word	0x50004100
    5b78:	50004104 	.word	0x50004104
    5b7c:	50004108 	.word	0x50004108
    5b80:	5000410c 	.word	0x5000410c
    5b84:	10000bec 	.word	0x10000bec
    5b88:	10000bf4 	.word	0x10000bf4
    5b8c:	40004008 	.word	0x40004008
    5b90:	10001030 	.word	0x10001030
    5b94:	1000049c 	.word	0x1000049c
    5b98:	1000098a 	.word	0x1000098a
    5b9c:	10000b04 	.word	0x10000b04
    5ba0:	100010c8 	.word	0x100010c8

00005ba4 <bt_stream_dma_handler>:

void bt_stream_dma_handler(void) {
    5ba4:	b480      	push	{r7}
    5ba6:	af00      	add	r7, sp, #0
	idle_buf_clkn_high = active_buf_clkn_high;
    5ba8:	4b25      	ldr	r3, [pc, #148]	; (5c40 <bt_stream_dma_handler+0x9c>)
    5baa:	681b      	ldr	r3, [r3, #0]
    5bac:	4a25      	ldr	r2, [pc, #148]	; (5c44 <bt_stream_dma_handler+0xa0>)
    5bae:	6013      	str	r3, [r2, #0]
	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5bb0:	4b25      	ldr	r3, [pc, #148]	; (5c48 <bt_stream_dma_handler+0xa4>)
    5bb2:	681b      	ldr	r3, [r3, #0]
    5bb4:	0d1b      	lsrs	r3, r3, #20
    5bb6:	b2db      	uxtb	r3, r3
    5bb8:	4a21      	ldr	r2, [pc, #132]	; (5c40 <bt_stream_dma_handler+0x9c>)
    5bba:	6013      	str	r3, [r2, #0]

	idle_buf_clk100ns = active_buf_clk100ns;
    5bbc:	4b23      	ldr	r3, [pc, #140]	; (5c4c <bt_stream_dma_handler+0xa8>)
    5bbe:	681b      	ldr	r3, [r3, #0]
    5bc0:	4a23      	ldr	r2, [pc, #140]	; (5c50 <bt_stream_dma_handler+0xac>)
    5bc2:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    5bc4:	4b20      	ldr	r3, [pc, #128]	; (5c48 <bt_stream_dma_handler+0xa4>)
    5bc6:	681b      	ldr	r3, [r3, #0]
    5bc8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5bcc:	f640 4235 	movw	r2, #3125	; 0xc35
    5bd0:	fb02 f203 	mul.w	r2, r2, r3
    5bd4:	4b1f      	ldr	r3, [pc, #124]	; (5c54 <bt_stream_dma_handler+0xb0>)
    5bd6:	681b      	ldr	r3, [r3, #0]
    5bd8:	4413      	add	r3, r2
    5bda:	4a1c      	ldr	r2, [pc, #112]	; (5c4c <bt_stream_dma_handler+0xa8>)
    5bdc:	6013      	str	r3, [r2, #0]

	idle_buf_channel = active_buf_channel;
    5bde:	4b1e      	ldr	r3, [pc, #120]	; (5c58 <bt_stream_dma_handler+0xb4>)
    5be0:	881b      	ldrh	r3, [r3, #0]
    5be2:	b29a      	uxth	r2, r3
    5be4:	4b1d      	ldr	r3, [pc, #116]	; (5c5c <bt_stream_dma_handler+0xb8>)
    5be6:	801a      	strh	r2, [r3, #0]
	active_buf_channel = channel;
    5be8:	4b1d      	ldr	r3, [pc, #116]	; (5c60 <bt_stream_dma_handler+0xbc>)
    5bea:	881b      	ldrh	r3, [r3, #0]
    5bec:	b29a      	uxth	r2, r3
    5bee:	4b1a      	ldr	r3, [pc, #104]	; (5c58 <bt_stream_dma_handler+0xb4>)
    5bf0:	801a      	strh	r2, [r3, #0]

	/* interrupt on channel 0 */
	if (DMACIntStat & (1 << 0)) {
    5bf2:	4b1c      	ldr	r3, [pc, #112]	; (5c64 <bt_stream_dma_handler+0xc0>)
    5bf4:	681b      	ldr	r3, [r3, #0]
    5bf6:	f003 0301 	and.w	r3, r3, #1
    5bfa:	2b00      	cmp	r3, #0
    5bfc:	d01b      	beq.n	5c36 <bt_stream_dma_handler+0x92>
		if (DMACIntTCStat & (1 << 0)) {
    5bfe:	4b1a      	ldr	r3, [pc, #104]	; (5c68 <bt_stream_dma_handler+0xc4>)
    5c00:	681b      	ldr	r3, [r3, #0]
    5c02:	f003 0301 	and.w	r3, r3, #1
    5c06:	2b00      	cmp	r3, #0
    5c08:	d007      	beq.n	5c1a <bt_stream_dma_handler+0x76>
			DMACIntTCClear = (1 << 0);
    5c0a:	4b18      	ldr	r3, [pc, #96]	; (5c6c <bt_stream_dma_handler+0xc8>)
    5c0c:	2201      	movs	r2, #1
    5c0e:	601a      	str	r2, [r3, #0]
			++rx_tc;
    5c10:	4b17      	ldr	r3, [pc, #92]	; (5c70 <bt_stream_dma_handler+0xcc>)
    5c12:	681b      	ldr	r3, [r3, #0]
    5c14:	3301      	adds	r3, #1
    5c16:	4a16      	ldr	r2, [pc, #88]	; (5c70 <bt_stream_dma_handler+0xcc>)
    5c18:	6013      	str	r3, [r2, #0]
		}
		if (DMACIntErrStat & (1 << 0)) {
    5c1a:	4b16      	ldr	r3, [pc, #88]	; (5c74 <bt_stream_dma_handler+0xd0>)
    5c1c:	681b      	ldr	r3, [r3, #0]
    5c1e:	f003 0301 	and.w	r3, r3, #1
    5c22:	2b00      	cmp	r3, #0
    5c24:	d007      	beq.n	5c36 <bt_stream_dma_handler+0x92>
			DMACIntErrClr = (1 << 0);
    5c26:	4b14      	ldr	r3, [pc, #80]	; (5c78 <bt_stream_dma_handler+0xd4>)
    5c28:	2201      	movs	r2, #1
    5c2a:	601a      	str	r2, [r3, #0]
			++rx_err;
    5c2c:	4b13      	ldr	r3, [pc, #76]	; (5c7c <bt_stream_dma_handler+0xd8>)
    5c2e:	681b      	ldr	r3, [r3, #0]
    5c30:	3301      	adds	r3, #1
    5c32:	4a12      	ldr	r2, [pc, #72]	; (5c7c <bt_stream_dma_handler+0xd8>)
    5c34:	6013      	str	r3, [r2, #0]
		}
	}
}
    5c36:	46bd      	mov	sp, r7
    5c38:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c3c:	4770      	bx	lr
    5c3e:	bf00      	nop
    5c40:	10000bf4 	.word	0x10000bf4
    5c44:	1000103c 	.word	0x1000103c
    5c48:	10000bec 	.word	0x10000bec
    5c4c:	10001030 	.word	0x10001030
    5c50:	10000bd0 	.word	0x10000bd0
    5c54:	40004008 	.word	0x40004008
    5c58:	1000098a 	.word	0x1000098a
    5c5c:	10000988 	.word	0x10000988
    5c60:	1000049c 	.word	0x1000049c
    5c64:	50004000 	.word	0x50004000
    5c68:	50004004 	.word	0x50004004
    5c6c:	50004008 	.word	0x50004008
    5c70:	10000b04 	.word	0x10000b04
    5c74:	5000400c 	.word	0x5000400c
    5c78:	50004010 	.word	0x50004010
    5c7c:	100010c8 	.word	0x100010c8

00005c80 <DMA_IRQHandler>:

void DMA_IRQHandler()
{
    5c80:	b580      	push	{r7, lr}
    5c82:	af00      	add	r7, sp, #0
	switch (mode) {
    5c84:	4b15      	ldr	r3, [pc, #84]	; (5cdc <DMA_IRQHandler+0x5c>)
    5c86:	781b      	ldrb	r3, [r3, #0]
    5c88:	b2db      	uxtb	r3, r3
    5c8a:	3b01      	subs	r3, #1
    5c8c:	2b0e      	cmp	r3, #14
    5c8e:	d824      	bhi.n	5cda <DMA_IRQHandler+0x5a>
    5c90:	a201      	add	r2, pc, #4	; (adr r2, 5c98 <DMA_IRQHandler+0x18>)
    5c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5c96:	bf00      	nop
    5c98:	00005cd5 	.word	0x00005cd5
    5c9c:	00005cdb 	.word	0x00005cdb
    5ca0:	00005cdb 	.word	0x00005cdb
    5ca4:	00005cd5 	.word	0x00005cd5
    5ca8:	00005cdb 	.word	0x00005cdb
    5cac:	00005cdb 	.word	0x00005cdb
    5cb0:	00005cdb 	.word	0x00005cdb
    5cb4:	00005cd5 	.word	0x00005cd5
    5cb8:	00005cd5 	.word	0x00005cd5
    5cbc:	00005cd5 	.word	0x00005cd5
    5cc0:	00005cdb 	.word	0x00005cdb
    5cc4:	00005cd5 	.word	0x00005cd5
    5cc8:	00005cdb 	.word	0x00005cdb
    5ccc:	00005cd5 	.word	0x00005cd5
    5cd0:	00005cd5 	.word	0x00005cd5
		case MODE_SPECAN:
		case MODE_BT_FOLLOW:
		case MODE_BT_FOLLOW_LE:
		case MODE_BT_PROMISC_LE:
		case MODE_BT_SLAVE_LE:
			bt_stream_dma_handler();
    5cd4:	f7ff ff66 	bl	5ba4 <bt_stream_dma_handler>
			break;
    5cd8:	bf00      	nop
	}
}
    5cda:	bd80      	pop	{r7, pc}
    5cdc:	10000a3e 	.word	0x10000a3e

00005ce0 <dio_ssp_start>:

static void dio_ssp_start()
{
    5ce0:	b480      	push	{r7}
    5ce2:	af00      	add	r7, sp, #0
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    5ce4:	4b10      	ldr	r3, [pc, #64]	; (5d28 <dio_ssp_start+0x48>)
    5ce6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5cea:	601a      	str	r2, [r3, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    5cec:	4a0f      	ldr	r2, [pc, #60]	; (5d2c <dio_ssp_start+0x4c>)
    5cee:	4b0f      	ldr	r3, [pc, #60]	; (5d2c <dio_ssp_start+0x4c>)
    5cf0:	681b      	ldr	r3, [r3, #0]
    5cf2:	f043 0301 	orr.w	r3, r3, #1
    5cf6:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    5cf8:	4a0d      	ldr	r2, [pc, #52]	; (5d30 <dio_ssp_start+0x50>)
    5cfa:	4b0d      	ldr	r3, [pc, #52]	; (5d30 <dio_ssp_start+0x50>)
    5cfc:	681b      	ldr	r3, [r3, #0]
    5cfe:	f043 0302 	orr.w	r3, r3, #2
    5d02:	6013      	str	r3, [r2, #0]
	
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
    5d04:	4a0b      	ldr	r2, [pc, #44]	; (5d34 <dio_ssp_start+0x54>)
    5d06:	4b0b      	ldr	r3, [pc, #44]	; (5d34 <dio_ssp_start+0x54>)
    5d08:	681b      	ldr	r3, [r3, #0]
    5d0a:	f043 0301 	orr.w	r3, r3, #1
    5d0e:	6013      	str	r3, [r2, #0]
	ISER0 = ISER0_ISE_DMA;
    5d10:	4b09      	ldr	r3, [pc, #36]	; (5d38 <dio_ssp_start+0x58>)
    5d12:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5d16:	601a      	str	r2, [r3, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
    5d18:	4b08      	ldr	r3, [pc, #32]	; (5d3c <dio_ssp_start+0x5c>)
    5d1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5d1e:	601a      	str	r2, [r3, #0]
}
    5d20:	46bd      	mov	sp, r7
    5d22:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d26:	4770      	bx	lr
    5d28:	2009c098 	.word	0x2009c098
    5d2c:	40030024 	.word	0x40030024
    5d30:	40030004 	.word	0x40030004
    5d34:	50004110 	.word	0x50004110
    5d38:	e000e100 	.word	0xe000e100
    5d3c:	2009c09c 	.word	0x2009c09c

00005d40 <dio_ssp_stop>:

static void dio_ssp_stop()
{
    5d40:	b480      	push	{r7}
    5d42:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    5d44:	4b21      	ldr	r3, [pc, #132]	; (5dcc <dio_ssp_stop+0x8c>)
    5d46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5d4a:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5d4c:	4a20      	ldr	r2, [pc, #128]	; (5dd0 <dio_ssp_stop+0x90>)
    5d4e:	4b20      	ldr	r3, [pc, #128]	; (5dd0 <dio_ssp_stop+0x90>)
    5d50:	681b      	ldr	r3, [r3, #0]
    5d52:	f023 0301 	bic.w	r3, r3, #1
    5d56:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    5d58:	4a1e      	ldr	r2, [pc, #120]	; (5dd4 <dio_ssp_stop+0x94>)
    5d5a:	4b1e      	ldr	r3, [pc, #120]	; (5dd4 <dio_ssp_stop+0x94>)
    5d5c:	681b      	ldr	r3, [r3, #0]
    5d5e:	f023 0302 	bic.w	r3, r3, #2
    5d62:	6013      	str	r3, [r2, #0]

	// disable DMA engine:
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 607

	// disable DMA interrupts
	ICER0 = ICER0_ICE_DMA;
    5d64:	4b1c      	ldr	r3, [pc, #112]	; (5dd8 <dio_ssp_stop+0x98>)
    5d66:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5d6a:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    5d6c:	4b1b      	ldr	r3, [pc, #108]	; (5ddc <dio_ssp_stop+0x9c>)
    5d6e:	2200      	movs	r2, #0
    5d70:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5d72:	4b1b      	ldr	r3, [pc, #108]	; (5de0 <dio_ssp_stop+0xa0>)
    5d74:	2200      	movs	r2, #0
    5d76:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    5d78:	4b1a      	ldr	r3, [pc, #104]	; (5de4 <dio_ssp_stop+0xa4>)
    5d7a:	2200      	movs	r2, #0
    5d7c:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5d7e:	4b1a      	ldr	r3, [pc, #104]	; (5de8 <dio_ssp_stop+0xa8>)
    5d80:	2200      	movs	r2, #0
    5d82:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    5d84:	4b19      	ldr	r3, [pc, #100]	; (5dec <dio_ssp_stop+0xac>)
    5d86:	2200      	movs	r2, #0
    5d88:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5d8a:	4b19      	ldr	r3, [pc, #100]	; (5df0 <dio_ssp_stop+0xb0>)
    5d8c:	2200      	movs	r2, #0
    5d8e:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    5d90:	4b18      	ldr	r3, [pc, #96]	; (5df4 <dio_ssp_stop+0xb4>)
    5d92:	2200      	movs	r2, #0
    5d94:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    5d96:	4b18      	ldr	r3, [pc, #96]	; (5df8 <dio_ssp_stop+0xb8>)
    5d98:	2200      	movs	r2, #0
    5d9a:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5d9c:	4b17      	ldr	r3, [pc, #92]	; (5dfc <dio_ssp_stop+0xbc>)
    5d9e:	22ff      	movs	r2, #255	; 0xff
    5da0:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5da2:	4b17      	ldr	r3, [pc, #92]	; (5e00 <dio_ssp_stop+0xc0>)
    5da4:	22ff      	movs	r2, #255	; 0xff
    5da6:	601a      	str	r2, [r3, #0]

	// Disable the DMA controller by writing 0 to the DMA Enable bit in the DMACConfig
	// register.
	DMACConfig &= ~DMACConfig_E;
    5da8:	4a16      	ldr	r2, [pc, #88]	; (5e04 <dio_ssp_stop+0xc4>)
    5daa:	4b16      	ldr	r3, [pc, #88]	; (5e04 <dio_ssp_stop+0xc4>)
    5dac:	681b      	ldr	r3, [r3, #0]
    5dae:	f023 0301 	bic.w	r3, r3, #1
    5db2:	6013      	str	r3, [r2, #0]
	while (DMACConfig & DMACConfig_E);
    5db4:	bf00      	nop
    5db6:	4b13      	ldr	r3, [pc, #76]	; (5e04 <dio_ssp_stop+0xc4>)
    5db8:	681b      	ldr	r3, [r3, #0]
    5dba:	f003 0301 	and.w	r3, r3, #1
    5dbe:	2b00      	cmp	r3, #0
    5dc0:	d1f9      	bne.n	5db6 <dio_ssp_stop+0x76>
}
    5dc2:	46bd      	mov	sp, r7
    5dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    5dc8:	4770      	bx	lr
    5dca:	bf00      	nop
    5dcc:	2009c098 	.word	0x2009c098
    5dd0:	40030024 	.word	0x40030024
    5dd4:	40030004 	.word	0x40030004
    5dd8:	e000e180 	.word	0xe000e180
    5ddc:	50004110 	.word	0x50004110
    5de0:	50004130 	.word	0x50004130
    5de4:	50004150 	.word	0x50004150
    5de8:	50004170 	.word	0x50004170
    5dec:	50004190 	.word	0x50004190
    5df0:	500041b0 	.word	0x500041b0
    5df4:	500041d0 	.word	0x500041d0
    5df8:	500041f0 	.word	0x500041f0
    5dfc:	50004008 	.word	0x50004008
    5e00:	50004010 	.word	0x50004010
    5e04:	50004030 	.word	0x50004030

00005e08 <cc2400_idle>:

static void cc2400_idle()
{
    5e08:	b580      	push	{r7, lr}
    5e0a:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    5e0c:	2064      	movs	r0, #100	; 0x64
    5e0e:	f004 fe8f 	bl	ab30 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5e12:	bf00      	nop
    5e14:	f004 fe82 	bl	ab1c <cc2400_status>
    5e18:	4603      	mov	r3, r0
    5e1a:	f003 0304 	and.w	r3, r3, #4
    5e1e:	2b00      	cmp	r3, #0
    5e20:	d1f8      	bne.n	5e14 <cc2400_idle+0xc>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5e22:	4b0a      	ldr	r3, [pc, #40]	; (5e4c <cc2400_idle+0x44>)
    5e24:	2280      	movs	r2, #128	; 0x80
    5e26:	601a      	str	r2, [r3, #0]
	HGM_CLR;
    5e28:	4b08      	ldr	r3, [pc, #32]	; (5e4c <cc2400_idle+0x44>)
    5e2a:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e2e:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    5e30:	4b07      	ldr	r3, [pc, #28]	; (5e50 <cc2400_idle+0x48>)
    5e32:	2210      	movs	r2, #16
    5e34:	601a      	str	r2, [r3, #0]
	TXLED_CLR;
    5e36:	4b06      	ldr	r3, [pc, #24]	; (5e50 <cc2400_idle+0x48>)
    5e38:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e3c:	601a      	str	r2, [r3, #0]
	USRLED_CLR;
    5e3e:	4b04      	ldr	r3, [pc, #16]	; (5e50 <cc2400_idle+0x48>)
    5e40:	2202      	movs	r2, #2
    5e42:	601a      	str	r2, [r3, #0]
	mode = MODE_IDLE;
    5e44:	4b03      	ldr	r3, [pc, #12]	; (5e54 <cc2400_idle+0x4c>)
    5e46:	2200      	movs	r2, #0
    5e48:	701a      	strb	r2, [r3, #0]
}
    5e4a:	bd80      	pop	{r7, pc}
    5e4c:	2009c05c 	.word	0x2009c05c
    5e50:	2009c03c 	.word	0x2009c03c
    5e54:	10000a3e 	.word	0x10000a3e

00005e58 <cc2400_rx>:

/* start un-buffered rx */
static void cc2400_rx()
{
    5e58:	b580      	push	{r7, lr}
    5e5a:	b082      	sub	sp, #8
    5e5c:	af00      	add	r7, sp, #0
	u16 mdmctrl;
	if (modulation == MOD_BT_BASIC_RATE) {
    5e5e:	4b2a      	ldr	r3, [pc, #168]	; (5f08 <cc2400_rx+0xb0>)
    5e60:	781b      	ldrb	r3, [r3, #0]
    5e62:	b2db      	uxtb	r3, r3
    5e64:	2b00      	cmp	r3, #0
    5e66:	d102      	bne.n	5e6e <cc2400_rx+0x16>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5e68:	2329      	movs	r3, #41	; 0x29
    5e6a:	80fb      	strh	r3, [r7, #6]
    5e6c:	e008      	b.n	5e80 <cc2400_rx+0x28>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5e6e:	4b26      	ldr	r3, [pc, #152]	; (5f08 <cc2400_rx+0xb0>)
    5e70:	781b      	ldrb	r3, [r3, #0]
    5e72:	b2db      	uxtb	r3, r3
    5e74:	2b01      	cmp	r3, #1
    5e76:	d102      	bne.n	5e7e <cc2400_rx+0x26>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5e78:	2340      	movs	r3, #64	; 0x40
    5e7a:	80fb      	strh	r3, [r7, #6]
    5e7c:	e000      	b.n	5e80 <cc2400_rx+0x28>
	} else {
		/* oops */
		return;
    5e7e:	e040      	b.n	5f02 <cc2400_rx+0xaa>
	}

	cc2400_set(MANAND,  0x7fff);
    5e80:	200d      	movs	r0, #13
    5e82:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5e86:	f004 fd91 	bl	a9ac <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5e8a:	2012      	movs	r0, #18
    5e8c:	f642 3122 	movw	r1, #11042	; 0x2b22
    5e90:	f004 fd8c 	bl	a9ac <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    5e94:	2014      	movs	r0, #20
    5e96:	f241 314b 	movw	r1, #4939	; 0x134b
    5e9a:	f004 fd87 	bl	a9ac <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    5e9e:	2020      	movs	r0, #32
    5ea0:	f240 1101 	movw	r1, #257	; 0x101
    5ea4:	f004 fd82 	bl	a9ac <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 2 preamble bytes of 01010101
	//      |  +-----------------> not packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5ea8:	4b18      	ldr	r3, [pc, #96]	; (5f0c <cc2400_rx+0xb4>)
    5eaa:	881b      	ldrh	r3, [r3, #0]
    5eac:	b29b      	uxth	r3, r3
    5eae:	3b01      	subs	r3, #1
    5eb0:	b29b      	uxth	r3, r3
    5eb2:	2002      	movs	r0, #2
    5eb4:	4619      	mov	r1, r3
    5eb6:	f004 fd79 	bl	a9ac <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5eba:	88fb      	ldrh	r3, [r7, #6]
    5ebc:	2003      	movs	r0, #3
    5ebe:	4619      	mov	r1, r3
    5ec0:	f004 fd74 	bl	a9ac <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5ec4:	f7fe fdc4 	bl	4a50 <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5ec8:	bf00      	nop
    5eca:	f004 fe27 	bl	ab1c <cc2400_status>
    5ece:	4603      	mov	r3, r0
    5ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5ed4:	2b00      	cmp	r3, #0
    5ed6:	d0f8      	beq.n	5eca <cc2400_rx+0x72>
	cc2400_strobe(SFSON);
    5ed8:	2061      	movs	r0, #97	; 0x61
    5eda:	f004 fe29 	bl	ab30 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5ede:	bf00      	nop
    5ee0:	f004 fe1c 	bl	ab1c <cc2400_status>
    5ee4:	4603      	mov	r3, r0
    5ee6:	f003 0304 	and.w	r3, r3, #4
    5eea:	2b00      	cmp	r3, #0
    5eec:	d0f8      	beq.n	5ee0 <cc2400_rx+0x88>
	cc2400_strobe(SRX);
    5eee:	2062      	movs	r0, #98	; 0x62
    5ef0:	f004 fe1e 	bl	ab30 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5ef4:	4b06      	ldr	r3, [pc, #24]	; (5f10 <cc2400_rx+0xb8>)
    5ef6:	2280      	movs	r2, #128	; 0x80
    5ef8:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5efa:	4b05      	ldr	r3, [pc, #20]	; (5f10 <cc2400_rx+0xb8>)
    5efc:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f00:	601a      	str	r2, [r3, #0]
#endif
}
    5f02:	3708      	adds	r7, #8
    5f04:	46bd      	mov	sp, r7
    5f06:	bd80      	pop	{r7, pc}
    5f08:	10000a42 	.word	0x10000a42
    5f0c:	1000049c 	.word	0x1000049c
    5f10:	2009c058 	.word	0x2009c058

00005f14 <cc2400_rx_sync>:

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    5f14:	b580      	push	{r7, lr}
    5f16:	b084      	sub	sp, #16
    5f18:	af00      	add	r7, sp, #0
    5f1a:	6078      	str	r0, [r7, #4]
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    5f1c:	4b33      	ldr	r3, [pc, #204]	; (5fec <cc2400_rx_sync+0xd8>)
    5f1e:	781b      	ldrb	r3, [r3, #0]
    5f20:	b2db      	uxtb	r3, r3
    5f22:	2b00      	cmp	r3, #0
    5f24:	d105      	bne.n	5f32 <cc2400_rx_sync+0x1e>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5f26:	2329      	movs	r3, #41	; 0x29
    5f28:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    5f2a:	f240 4361 	movw	r3, #1121	; 0x461
    5f2e:	81fb      	strh	r3, [r7, #14]
    5f30:	e00b      	b.n	5f4a <cc2400_rx_sync+0x36>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5f32:	4b2e      	ldr	r3, [pc, #184]	; (5fec <cc2400_rx_sync+0xd8>)
    5f34:	781b      	ldrb	r3, [r3, #0]
    5f36:	b2db      	uxtb	r3, r3
    5f38:	2b01      	cmp	r3, #1
    5f3a:	d105      	bne.n	5f48 <cc2400_rx_sync+0x34>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5f3c:	2340      	movs	r3, #64	; 0x40
    5f3e:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    5f40:	f240 5361 	movw	r3, #1377	; 0x561
    5f44:	81fb      	strh	r3, [r7, #14]
    5f46:	e000      	b.n	5f4a <cc2400_rx_sync+0x36>
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else {
		/* oops */
		return;
    5f48:	e04d      	b.n	5fe6 <cc2400_rx_sync+0xd2>
	}

	cc2400_set(MANAND,  0x7fff);
    5f4a:	200d      	movs	r0, #13
    5f4c:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5f50:	f004 fd2c 	bl	a9ac <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5f54:	2012      	movs	r0, #18
    5f56:	f642 3122 	movw	r1, #11042	; 0x2b22
    5f5a:	f004 fd27 	bl	a9ac <cc2400_set>

	cc2400_set(MDMTST0, 0x124b);
    5f5e:	2014      	movs	r0, #20
    5f60:	f241 214b 	movw	r1, #4683	; 0x124b
    5f64:	f004 fd22 	bl	a9ac <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    5f68:	89fb      	ldrh	r3, [r7, #14]
    5f6a:	2020      	movs	r0, #32
    5f6c:	4619      	mov	r1, r3
    5f6e:	f004 fd1d 	bl	a9ac <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    5f72:	687b      	ldr	r3, [r7, #4]
    5f74:	b29b      	uxth	r3, r3
    5f76:	202c      	movs	r0, #44	; 0x2c
    5f78:	4619      	mov	r1, r3
    5f7a:	f004 fd17 	bl	a9ac <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    5f7e:	687b      	ldr	r3, [r7, #4]
    5f80:	0c1b      	lsrs	r3, r3, #16
    5f82:	b29b      	uxth	r3, r3
    5f84:	202d      	movs	r0, #45	; 0x2d
    5f86:	4619      	mov	r1, r3
    5f88:	f004 fd10 	bl	a9ac <cc2400_set>
	
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5f8c:	4b18      	ldr	r3, [pc, #96]	; (5ff0 <cc2400_rx_sync+0xdc>)
    5f8e:	881b      	ldrh	r3, [r3, #0]
    5f90:	b29b      	uxth	r3, r3
    5f92:	3b01      	subs	r3, #1
    5f94:	b29b      	uxth	r3, r3
    5f96:	2002      	movs	r0, #2
    5f98:	4619      	mov	r1, r3
    5f9a:	f004 fd07 	bl	a9ac <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5f9e:	89bb      	ldrh	r3, [r7, #12]
    5fa0:	2003      	movs	r0, #3
    5fa2:	4619      	mov	r1, r3
    5fa4:	f004 fd02 	bl	a9ac <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5fa8:	f7fe fd52 	bl	4a50 <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5fac:	bf00      	nop
    5fae:	f004 fdb5 	bl	ab1c <cc2400_status>
    5fb2:	4603      	mov	r3, r0
    5fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5fb8:	2b00      	cmp	r3, #0
    5fba:	d0f8      	beq.n	5fae <cc2400_rx_sync+0x9a>
	cc2400_strobe(SFSON);
    5fbc:	2061      	movs	r0, #97	; 0x61
    5fbe:	f004 fdb7 	bl	ab30 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5fc2:	bf00      	nop
    5fc4:	f004 fdaa 	bl	ab1c <cc2400_status>
    5fc8:	4603      	mov	r3, r0
    5fca:	f003 0304 	and.w	r3, r3, #4
    5fce:	2b00      	cmp	r3, #0
    5fd0:	d0f8      	beq.n	5fc4 <cc2400_rx_sync+0xb0>
	cc2400_strobe(SRX);
    5fd2:	2062      	movs	r0, #98	; 0x62
    5fd4:	f004 fdac 	bl	ab30 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5fd8:	4b06      	ldr	r3, [pc, #24]	; (5ff4 <cc2400_rx_sync+0xe0>)
    5fda:	2280      	movs	r2, #128	; 0x80
    5fdc:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5fde:	4b05      	ldr	r3, [pc, #20]	; (5ff4 <cc2400_rx_sync+0xe0>)
    5fe0:	f44f 7280 	mov.w	r2, #256	; 0x100
    5fe4:	601a      	str	r2, [r3, #0]
#endif
}
    5fe6:	3710      	adds	r7, #16
    5fe8:	46bd      	mov	sp, r7
    5fea:	bd80      	pop	{r7, pc}
    5fec:	10000a42 	.word	0x10000a42
    5ff0:	1000049c 	.word	0x1000049c
    5ff4:	2009c058 	.word	0x2009c058

00005ff8 <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data)
{
    5ff8:	b580      	push	{r7, lr}
    5ffa:	b09a      	sub	sp, #104	; 0x68
    5ffc:	af00      	add	r7, sp, #0
    5ffe:	60f8      	str	r0, [r7, #12]
    6000:	460b      	mov	r3, r1
    6002:	607a      	str	r2, [r7, #4]
    6004:	72fb      	strb	r3, [r7, #11]
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    6006:	2300      	movs	r3, #0
    6008:	667b      	str	r3, [r7, #100]	; 0x64
    600a:	e035      	b.n	6078 <le_transmit+0x80>
		byte = aa & 0xff;
    600c:	68fb      	ldr	r3, [r7, #12]
    600e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		aa >>= 8;
    6012:	68fb      	ldr	r3, [r7, #12]
    6014:	0a1b      	lsrs	r3, r3, #8
    6016:	60fb      	str	r3, [r7, #12]
		txbuf[i] = 0;
    6018:	f107 0210 	add.w	r2, r7, #16
    601c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    601e:	4413      	add	r3, r2
    6020:	2200      	movs	r2, #0
    6022:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; ++j) {
    6024:	2300      	movs	r3, #0
    6026:	663b      	str	r3, [r7, #96]	; 0x60
    6028:	e020      	b.n	606c <le_transmit+0x74>
			txbuf[i] |= (byte & 1) << (7 - j);
    602a:	f107 0210 	add.w	r2, r7, #16
    602e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6030:	4413      	add	r3, r2
    6032:	781b      	ldrb	r3, [r3, #0]
    6034:	b2d9      	uxtb	r1, r3
    6036:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    603a:	f003 0301 	and.w	r3, r3, #1
    603e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    6040:	f1c2 0207 	rsb	r2, r2, #7
    6044:	4093      	lsls	r3, r2
    6046:	b2db      	uxtb	r3, r3
    6048:	460a      	mov	r2, r1
    604a:	4313      	orrs	r3, r2
    604c:	b2db      	uxtb	r3, r3
    604e:	b2d9      	uxtb	r1, r3
    6050:	f107 0210 	add.w	r2, r7, #16
    6054:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6056:	4413      	add	r3, r2
    6058:	460a      	mov	r2, r1
    605a:	701a      	strb	r2, [r3, #0]
			byte >>= 1;
    605c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    6060:	085b      	lsrs	r3, r3, #1
    6062:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    6066:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6068:	3301      	adds	r3, #1
    606a:	663b      	str	r3, [r7, #96]	; 0x60
    606c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    606e:	2b07      	cmp	r3, #7
    6070:	d9db      	bls.n	602a <le_transmit+0x32>
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    6072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6074:	3301      	adds	r3, #1
    6076:	667b      	str	r3, [r7, #100]	; 0x64
    6078:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    607a:	2b03      	cmp	r3, #3
    607c:	d9c6      	bls.n	600c <le_transmit+0x14>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
    607e:	4b93      	ldr	r3, [pc, #588]	; (62cc <le_transmit+0x2d4>)
    6080:	881b      	ldrh	r3, [r3, #0]
    6082:	b29b      	uxth	r3, r3
    6084:	b2db      	uxtb	r3, r3
    6086:	3b62      	subs	r3, #98	; 0x62
    6088:	b2db      	uxtb	r3, r3
    608a:	4618      	mov	r0, r3
    608c:	f003 f896 	bl	91bc <btle_channel_index>
    6090:	4603      	mov	r3, r0
    6092:	461a      	mov	r2, r3
    6094:	4b8e      	ldr	r3, [pc, #568]	; (62d0 <le_transmit+0x2d8>)
    6096:	5c9b      	ldrb	r3, [r3, r2]
    6098:	65bb      	str	r3, [r7, #88]	; 0x58
	for (i = 0; i < len; ++i) {
    609a:	2300      	movs	r3, #0
    609c:	667b      	str	r3, [r7, #100]	; 0x64
    609e:	e050      	b.n	6142 <le_transmit+0x14a>
		byte = data[i];
    60a0:	687a      	ldr	r2, [r7, #4]
    60a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    60a4:	4413      	add	r3, r2
    60a6:	781b      	ldrb	r3, [r3, #0]
    60a8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		txbuf[i+4] = 0;
    60ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    60ae:	3304      	adds	r3, #4
    60b0:	f107 0268 	add.w	r2, r7, #104	; 0x68
    60b4:	4413      	add	r3, r2
    60b6:	2200      	movs	r2, #0
    60b8:	f803 2c58 	strb.w	r2, [r3, #-88]
		for (j = 0; j < 8; ++j) {
    60bc:	2300      	movs	r3, #0
    60be:	663b      	str	r3, [r7, #96]	; 0x60
    60c0:	e039      	b.n	6136 <le_transmit+0x13e>
			bit = (byte & 1) ^ whitening[idx];
    60c2:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    60c6:	f003 0301 	and.w	r3, r3, #1
    60ca:	4982      	ldr	r1, [pc, #520]	; (62d4 <le_transmit+0x2dc>)
    60cc:	6dba      	ldr	r2, [r7, #88]	; 0x58
    60ce:	440a      	add	r2, r1
    60d0:	7812      	ldrb	r2, [r2, #0]
    60d2:	4053      	eors	r3, r2
    60d4:	657b      	str	r3, [r7, #84]	; 0x54
			idx = (idx + 1) % sizeof(whitening);
    60d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    60d8:	3301      	adds	r3, #1
    60da:	4619      	mov	r1, r3
    60dc:	4b7e      	ldr	r3, [pc, #504]	; (62d8 <le_transmit+0x2e0>)
    60de:	fba1 2303 	umull	r2, r3, r1, r3
    60e2:	1ac8      	subs	r0, r1, r3
    60e4:	0840      	lsrs	r0, r0, #1
    60e6:	4403      	add	r3, r0
    60e8:	099a      	lsrs	r2, r3, #6
    60ea:	4613      	mov	r3, r2
    60ec:	01db      	lsls	r3, r3, #7
    60ee:	1a9b      	subs	r3, r3, r2
    60f0:	1aca      	subs	r2, r1, r3
    60f2:	65ba      	str	r2, [r7, #88]	; 0x58
			byte >>= 1;
    60f4:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    60f8:	085b      	lsrs	r3, r3, #1
    60fa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			txbuf[i+4] |= bit << (7 - j);
    60fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6100:	3304      	adds	r3, #4
    6102:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    6104:	3204      	adds	r2, #4
    6106:	f107 0168 	add.w	r1, r7, #104	; 0x68
    610a:	440a      	add	r2, r1
    610c:	f812 2c58 	ldrb.w	r2, [r2, #-88]
    6110:	b2d1      	uxtb	r1, r2
    6112:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    6114:	f1c2 0207 	rsb	r2, r2, #7
    6118:	4610      	mov	r0, r2
    611a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    611c:	4082      	lsls	r2, r0
    611e:	b2d2      	uxtb	r2, r2
    6120:	430a      	orrs	r2, r1
    6122:	b2d2      	uxtb	r2, r2
    6124:	b2d2      	uxtb	r2, r2
    6126:	f107 0168 	add.w	r1, r7, #104	; 0x68
    612a:	440b      	add	r3, r1
    612c:	f803 2c58 	strb.w	r2, [r3, #-88]
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    6130:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6132:	3301      	adds	r3, #1
    6134:	663b      	str	r3, [r7, #96]	; 0x60
    6136:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6138:	2b07      	cmp	r3, #7
    613a:	d9c2      	bls.n	60c2 <le_transmit+0xca>
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
    613c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    613e:	3301      	adds	r3, #1
    6140:	667b      	str	r3, [r7, #100]	; 0x64
    6142:	7afa      	ldrb	r2, [r7, #11]
    6144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6146:	429a      	cmp	r2, r3
    6148:	d8aa      	bhi.n	60a0 <le_transmit+0xa8>
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    614a:	7afb      	ldrb	r3, [r7, #11]
    614c:	3304      	adds	r3, #4
    614e:	72fb      	strb	r3, [r7, #11]

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    6150:	200d      	movs	r0, #13
    6152:	f647 71ff 	movw	r1, #32767	; 0x7fff
    6156:	f004 fc29 	bl	a9ac <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    615a:	2012      	movs	r0, #18
    615c:	f642 3122 	movw	r1, #11042	; 0x2b22
    6160:	f004 fc24 	bl	a9ac <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    6164:	2014      	movs	r0, #20
    6166:	f241 314b 	movw	r1, #4939	; 0x134b
    616a:	f004 fc1f 	bl	a9ac <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    616e:	2020      	movs	r0, #32
    6170:	f640 4101 	movw	r1, #3073	; 0xc01
    6174:	f004 fc1a 	bl	a9ac <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   channel);
    6178:	4b54      	ldr	r3, [pc, #336]	; (62cc <le_transmit+0x2d4>)
    617a:	881b      	ldrh	r3, [r3, #0]
    617c:	b29b      	uxth	r3, r3
    617e:	2002      	movs	r0, #2
    6180:	4619      	mov	r1, r3
    6182:	f004 fc13 	bl	a9ac <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    6186:	2005      	movs	r0, #5
    6188:	210b      	movs	r1, #11
    618a:	f004 fc0f 	bl	a9ac <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    618e:	2003      	movs	r0, #3
    6190:	2140      	movs	r1, #64	; 0x40
    6192:	f004 fc0b 	bl	a9ac <cc2400_set>
	cc2400_set(INT,     0x0014);	// FIFO_THRESHOLD: 20 bytes
    6196:	2023      	movs	r0, #35	; 0x23
    6198:	2114      	movs	r1, #20
    619a:	f004 fc07 	bl	a9ac <cc2400_set>

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    619e:	68fb      	ldr	r3, [r7, #12]
    61a0:	f003 0301 	and.w	r3, r3, #1
    61a4:	2b00      	cmp	r3, #0
    61a6:	d005      	beq.n	61b4 <le_transmit+0x1bc>
		cc2400_set(SYNCH,   0xaaaa);
    61a8:	202d      	movs	r0, #45	; 0x2d
    61aa:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
    61ae:	f004 fbfd 	bl	a9ac <cc2400_set>
    61b2:	e004      	b.n	61be <le_transmit+0x1c6>
	else
		cc2400_set(SYNCH,   0x5555);
    61b4:	202d      	movs	r0, #45	; 0x2d
    61b6:	f245 5155 	movw	r1, #21845	; 0x5555
    61ba:	f004 fbf7 	bl	a9ac <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    61be:	2008      	movs	r0, #8
    61c0:	f004 fbde 	bl	a980 <cc2400_get>
    61c4:	4603      	mov	r3, r0
    61c6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    61ca:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    61ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
    61d2:	b29b      	uxth	r3, r3
    61d4:	f443 439c 	orr.w	r3, r3, #19968	; 0x4e00
    61d8:	b29b      	uxth	r3, r3
    61da:	b29b      	uxth	r3, r3
    61dc:	2008      	movs	r0, #8
    61de:	4619      	mov	r1, r3
    61e0:	f004 fbe4 	bl	a9ac <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    61e4:	bf00      	nop
    61e6:	f004 fc99 	bl	ab1c <cc2400_status>
    61ea:	4603      	mov	r3, r0
    61ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
    61f0:	2b00      	cmp	r3, #0
    61f2:	d0f8      	beq.n	61e6 <le_transmit+0x1ee>
	cc2400_strobe(SFSON);
    61f4:	2061      	movs	r0, #97	; 0x61
    61f6:	f004 fc9b 	bl	ab30 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    61fa:	bf00      	nop
    61fc:	f004 fc8e 	bl	ab1c <cc2400_status>
    6200:	4603      	mov	r3, r0
    6202:	f003 0304 	and.w	r3, r3, #4
    6206:	2b00      	cmp	r3, #0
    6208:	d0f8      	beq.n	61fc <le_transmit+0x204>
	TXLED_SET;
    620a:	4b34      	ldr	r3, [pc, #208]	; (62dc <le_transmit+0x2e4>)
    620c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6210:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6212:	4b33      	ldr	r3, [pc, #204]	; (62e0 <le_transmit+0x2e8>)
    6214:	2280      	movs	r2, #128	; 0x80
    6216:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6218:	bf00      	nop
    621a:	200e      	movs	r0, #14
    621c:	f004 fbb0 	bl	a980 <cc2400_get>
    6220:	4603      	mov	r3, r0
    6222:	f003 031f 	and.w	r3, r3, #31
    6226:	2b0f      	cmp	r3, #15
    6228:	d1f7      	bne.n	621a <le_transmit+0x222>
	cc2400_strobe(STX);
    622a:	2063      	movs	r0, #99	; 0x63
    622c:	f004 fc80 	bl	ab30 <cc2400_strobe>

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    6230:	2300      	movs	r3, #0
    6232:	667b      	str	r3, [r7, #100]	; 0x64
    6234:	e021      	b.n	627a <le_transmit+0x282>
		while (GIO6) ; // wait for the FIFO to drain (FIFO_FULL false)
    6236:	bf00      	nop
    6238:	4b2a      	ldr	r3, [pc, #168]	; (62e4 <le_transmit+0x2ec>)
    623a:	681b      	ldr	r3, [r3, #0]
    623c:	f003 0304 	and.w	r3, r3, #4
    6240:	2b00      	cmp	r3, #0
    6242:	d1f9      	bne.n	6238 <le_transmit+0x240>
		tx_len = len - i;
    6244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6246:	b2db      	uxtb	r3, r3
    6248:	7afa      	ldrb	r2, [r7, #11]
    624a:	1ad3      	subs	r3, r2, r3
    624c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (tx_len > 16)
    6250:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    6254:	2b10      	cmp	r3, #16
    6256:	d902      	bls.n	625e <le_transmit+0x266>
			tx_len = 16;
    6258:	2310      	movs	r3, #16
    625a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
    625e:	f107 0210 	add.w	r2, r7, #16
    6262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6264:	4413      	add	r3, r2
    6266:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
    626a:	2070      	movs	r0, #112	; 0x70
    626c:	4611      	mov	r1, r2
    626e:	461a      	mov	r2, r3
    6270:	f004 fbde 	bl	aa30 <cc2400_spi_buf>
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    6274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6276:	3310      	adds	r3, #16
    6278:	667b      	str	r3, [r7, #100]	; 0x64
    627a:	7afa      	ldrb	r2, [r7, #11]
    627c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    627e:	429a      	cmp	r2, r3
    6280:	d8d9      	bhi.n	6236 <le_transmit+0x23e>
		if (tx_len > 16)
			tx_len = 16;
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
	}

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6282:	bf00      	nop
    6284:	200e      	movs	r0, #14
    6286:	f004 fb7b 	bl	a980 <cc2400_get>
    628a:	4603      	mov	r3, r0
    628c:	f003 031f 	and.w	r3, r3, #31
    6290:	2b0f      	cmp	r3, #15
    6292:	d1f7      	bne.n	6284 <le_transmit+0x28c>
	TXLED_CLR;
    6294:	4b14      	ldr	r3, [pc, #80]	; (62e8 <le_transmit+0x2f0>)
    6296:	f44f 7280 	mov.w	r2, #256	; 0x100
    629a:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    629c:	2064      	movs	r0, #100	; 0x64
    629e:	f004 fc47 	bl	ab30 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    62a2:	bf00      	nop
    62a4:	f004 fc3a 	bl	ab1c <cc2400_status>
    62a8:	4603      	mov	r3, r0
    62aa:	f003 0304 	and.w	r3, r3, #4
    62ae:	2b00      	cmp	r3, #0
    62b0:	d1f8      	bne.n	62a4 <le_transmit+0x2ac>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    62b2:	4b0e      	ldr	r3, [pc, #56]	; (62ec <le_transmit+0x2f4>)
    62b4:	2280      	movs	r2, #128	; 0x80
    62b6:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    62b8:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    62bc:	2008      	movs	r0, #8
    62be:	4619      	mov	r1, r3
    62c0:	f004 fb74 	bl	a9ac <cc2400_set>
}
    62c4:	3768      	adds	r7, #104	; 0x68
    62c6:	46bd      	mov	sp, r7
    62c8:	bd80      	pop	{r7, pc}
    62ca:	bf00      	nop
    62cc:	1000049c 	.word	0x1000049c
    62d0:	0000c764 	.word	0x0000c764
    62d4:	0000c6e4 	.word	0x0000c6e4
    62d8:	02040811 	.word	0x02040811
    62dc:	2009c038 	.word	0x2009c038
    62e0:	2009c058 	.word	0x2009c058
    62e4:	2009c054 	.word	0x2009c054
    62e8:	2009c03c 	.word	0x2009c03c
    62ec:	2009c05c 	.word	0x2009c05c

000062f0 <le_jam>:

void le_jam(void) {
    62f0:	b580      	push	{r7, lr}
    62f2:	af00      	add	r7, sp, #0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    62f4:	200d      	movs	r0, #13
    62f6:	f647 71ff 	movw	r1, #32767	; 0x7fff
    62fa:	f004 fb57 	bl	a9ac <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    62fe:	2012      	movs	r0, #18
    6300:	f642 3122 	movw	r1, #11042	; 0x2b22
    6304:	f004 fb52 	bl	a9ac <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    6308:	2014      	movs	r0, #20
    630a:	f242 314b 	movw	r1, #9035	; 0x234b
    630e:	f004 fb4d 	bl	a9ac <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    6312:	2020      	movs	r0, #32
    6314:	f640 4101 	movw	r1, #3073	; 0xc01
    6318:	f004 fb48 	bl	a9ac <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    631c:	2005      	movs	r0, #5
    631e:	210b      	movs	r1, #11
    6320:	f004 fb44 	bl	a9ac <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    6324:	2003      	movs	r0, #3
    6326:	2140      	movs	r1, #64	; 0x40
    6328:	f004 fb40 	bl	a9ac <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    632c:	bf00      	nop
    632e:	f004 fbf5 	bl	ab1c <cc2400_status>
    6332:	4603      	mov	r3, r0
    6334:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6338:	2b00      	cmp	r3, #0
    633a:	d0f8      	beq.n	632e <le_jam+0x3e>
	cc2400_strobe(SFSON);
    633c:	2061      	movs	r0, #97	; 0x61
    633e:	f004 fbf7 	bl	ab30 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6342:	bf00      	nop
    6344:	f004 fbea 	bl	ab1c <cc2400_status>
    6348:	4603      	mov	r3, r0
    634a:	f003 0304 	and.w	r3, r3, #4
    634e:	2b00      	cmp	r3, #0
    6350:	d0f8      	beq.n	6344 <le_jam+0x54>
	TXLED_SET;
    6352:	4b0a      	ldr	r3, [pc, #40]	; (637c <le_jam+0x8c>)
    6354:	f44f 7280 	mov.w	r2, #256	; 0x100
    6358:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    635a:	4b09      	ldr	r3, [pc, #36]	; (6380 <le_jam+0x90>)
    635c:	2280      	movs	r2, #128	; 0x80
    635e:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6360:	bf00      	nop
    6362:	200e      	movs	r0, #14
    6364:	f004 fb0c 	bl	a980 <cc2400_get>
    6368:	4603      	mov	r3, r0
    636a:	f003 031f 	and.w	r3, r3, #31
    636e:	2b0f      	cmp	r3, #15
    6370:	d1f7      	bne.n	6362 <le_jam+0x72>
	cc2400_strobe(STX);
    6372:	2063      	movs	r0, #99	; 0x63
    6374:	f004 fbdc 	bl	ab30 <cc2400_strobe>
#endif
}
    6378:	bd80      	pop	{r7, pc}
    637a:	bf00      	nop
    637c:	2009c038 	.word	0x2009c038
    6380:	2009c058 	.word	0x2009c058

00006384 <hop>:

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    6384:	b580      	push	{r7, lr}
    6386:	af00      	add	r7, sp, #0
	do_hop = 0;
    6388:	4b41      	ldr	r3, [pc, #260]	; (6490 <hop+0x10c>)
    638a:	2200      	movs	r2, #0
    638c:	701a      	strb	r2, [r3, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    638e:	4b41      	ldr	r3, [pc, #260]	; (6494 <hop+0x110>)
    6390:	781b      	ldrb	r3, [r3, #0]
    6392:	2b00      	cmp	r3, #0
    6394:	d10b      	bne.n	63ae <hop+0x2a>
		if (cc2400_get(FSDIV) == (channel - 1))
    6396:	2002      	movs	r0, #2
    6398:	f004 faf2 	bl	a980 <cc2400_get>
    639c:	4603      	mov	r3, r0
    639e:	461a      	mov	r2, r3
    63a0:	4b3d      	ldr	r3, [pc, #244]	; (6498 <hop+0x114>)
    63a2:	881b      	ldrh	r3, [r3, #0]
    63a4:	b29b      	uxth	r3, r3
    63a6:	3b01      	subs	r3, #1
    63a8:	429a      	cmp	r2, r3
    63aa:	d147      	bne.n	643c <hop+0xb8>
			return;
    63ac:	e06e      	b.n	648c <hop+0x108>
	}

	// Slow sweep (100 hops/sec)
	else if (hop_mode == HOP_SWEEP) {
    63ae:	4b39      	ldr	r3, [pc, #228]	; (6494 <hop+0x110>)
    63b0:	781b      	ldrb	r3, [r3, #0]
    63b2:	2b01      	cmp	r3, #1
    63b4:	d114      	bne.n	63e0 <hop+0x5c>
		channel += 32;
    63b6:	4b38      	ldr	r3, [pc, #224]	; (6498 <hop+0x114>)
    63b8:	881b      	ldrh	r3, [r3, #0]
    63ba:	b29b      	uxth	r3, r3
    63bc:	3320      	adds	r3, #32
    63be:	b29a      	uxth	r2, r3
    63c0:	4b35      	ldr	r3, [pc, #212]	; (6498 <hop+0x114>)
    63c2:	801a      	strh	r2, [r3, #0]
		if (channel > 2480)
    63c4:	4b34      	ldr	r3, [pc, #208]	; (6498 <hop+0x114>)
    63c6:	881b      	ldrh	r3, [r3, #0]
    63c8:	b29b      	uxth	r3, r3
    63ca:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
    63ce:	d935      	bls.n	643c <hop+0xb8>
			channel -= 79;
    63d0:	4b31      	ldr	r3, [pc, #196]	; (6498 <hop+0x114>)
    63d2:	881b      	ldrh	r3, [r3, #0]
    63d4:	b29b      	uxth	r3, r3
    63d6:	3b4f      	subs	r3, #79	; 0x4f
    63d8:	b29a      	uxth	r2, r3
    63da:	4b2f      	ldr	r3, [pc, #188]	; (6498 <hop+0x114>)
    63dc:	801a      	strh	r2, [r3, #0]
    63de:	e02d      	b.n	643c <hop+0xb8>
	}

	else if (hop_mode == HOP_BLUETOOTH) {
    63e0:	4b2c      	ldr	r3, [pc, #176]	; (6494 <hop+0x110>)
    63e2:	781b      	ldrb	r3, [r3, #0]
    63e4:	2b02      	cmp	r3, #2
    63e6:	d10d      	bne.n	6404 <hop+0x80>
		TXLED_SET;
    63e8:	4b2c      	ldr	r3, [pc, #176]	; (649c <hop+0x118>)
    63ea:	f44f 7280 	mov.w	r2, #256	; 0x100
    63ee:	601a      	str	r2, [r3, #0]
		channel = next_hop(clkn);
    63f0:	4b2b      	ldr	r3, [pc, #172]	; (64a0 <hop+0x11c>)
    63f2:	681b      	ldr	r3, [r3, #0]
    63f4:	4618      	mov	r0, r3
    63f6:	f002 fdf3 	bl	8fe0 <next_hop>
    63fa:	4603      	mov	r3, r0
    63fc:	461a      	mov	r2, r3
    63fe:	4b26      	ldr	r3, [pc, #152]	; (6498 <hop+0x114>)
    6400:	801a      	strh	r2, [r3, #0]
    6402:	e01b      	b.n	643c <hop+0xb8>
	}

	else if (hop_mode == HOP_BTLE) {
    6404:	4b23      	ldr	r3, [pc, #140]	; (6494 <hop+0x110>)
    6406:	781b      	ldrb	r3, [r3, #0]
    6408:	2b03      	cmp	r3, #3
    640a:	d10b      	bne.n	6424 <hop+0xa0>
		TXLED_SET;
    640c:	4b23      	ldr	r3, [pc, #140]	; (649c <hop+0x118>)
    640e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6412:	601a      	str	r2, [r3, #0]
		channel = btle_next_hop(&le);
    6414:	4823      	ldr	r0, [pc, #140]	; (64a4 <hop+0x120>)
    6416:	f002 fea9 	bl	916c <btle_next_hop>
    641a:	4603      	mov	r3, r0
    641c:	461a      	mov	r2, r3
    641e:	4b1e      	ldr	r3, [pc, #120]	; (6498 <hop+0x114>)
    6420:	801a      	strh	r2, [r3, #0]
    6422:	e00b      	b.n	643c <hop+0xb8>
	}

	else if (hop_mode == HOP_DIRECT) {
    6424:	4b1b      	ldr	r3, [pc, #108]	; (6494 <hop+0x110>)
    6426:	781b      	ldrb	r3, [r3, #0]
    6428:	2b04      	cmp	r3, #4
    642a:	d107      	bne.n	643c <hop+0xb8>
		TXLED_SET;
    642c:	4b1b      	ldr	r3, [pc, #108]	; (649c <hop+0x118>)
    642e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6432:	601a      	str	r2, [r3, #0]
		channel = hop_direct_channel;
    6434:	4b1c      	ldr	r3, [pc, #112]	; (64a8 <hop+0x124>)
    6436:	881a      	ldrh	r2, [r3, #0]
    6438:	4b17      	ldr	r3, [pc, #92]	; (6498 <hop+0x114>)
    643a:	801a      	strh	r2, [r3, #0]
	}

        /* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    643c:	2064      	movs	r0, #100	; 0x64
    643e:	f004 fb77 	bl	ab30 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    6442:	bf00      	nop
    6444:	f004 fb6a 	bl	ab1c <cc2400_status>
    6448:	4603      	mov	r3, r0
    644a:	f003 0304 	and.w	r3, r3, #4
    644e:	2b00      	cmp	r3, #0
    6450:	d1f8      	bne.n	6444 <hop+0xc0>

	/* Retune */
	cc2400_set(FSDIV, channel - 1);
    6452:	4b11      	ldr	r3, [pc, #68]	; (6498 <hop+0x114>)
    6454:	881b      	ldrh	r3, [r3, #0]
    6456:	b29b      	uxth	r3, r3
    6458:	3b01      	subs	r3, #1
    645a:	b29b      	uxth	r3, r3
    645c:	2002      	movs	r0, #2
    645e:	4619      	mov	r1, r3
    6460:	f004 faa4 	bl	a9ac <cc2400_set>
	
	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    6464:	4b0b      	ldr	r3, [pc, #44]	; (6494 <hop+0x110>)
    6466:	781b      	ldrb	r3, [r3, #0]
    6468:	2b00      	cmp	r3, #0
    646a:	d001      	beq.n	6470 <hop+0xec>
		cs_threshold_calc_and_set();
    646c:	f7fe faf0 	bl	4a50 <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    6470:	2061      	movs	r0, #97	; 0x61
    6472:	f004 fb5d 	bl	ab30 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6476:	bf00      	nop
    6478:	f004 fb50 	bl	ab1c <cc2400_status>
    647c:	4603      	mov	r3, r0
    647e:	f003 0304 	and.w	r3, r3, #4
    6482:	2b00      	cmp	r3, #0
    6484:	d0f8      	beq.n	6478 <hop+0xf4>
	
	/* RX mode */
	cc2400_strobe(SRX);
    6486:	2062      	movs	r0, #98	; 0x62
    6488:	f004 fb52 	bl	ab30 <cc2400_strobe>

}
    648c:	bd80      	pop	{r7, pc}
    648e:	bf00      	nop
    6490:	1000097d 	.word	0x1000097d
    6494:	1000097c 	.word	0x1000097c
    6498:	1000049c 	.word	0x1000049c
    649c:	2009c038 	.word	0x2009c038
    64a0:	10000bec 	.word	0x10000bec
    64a4:	10000458 	.word	0x10000458
    64a8:	10000980 	.word	0x10000980

000064ac <cc2400_spi_rev>:


u32 cc2400_spi_rev(u8 len, u32 data)
{
    64ac:	b480      	push	{r7}
    64ae:	b085      	sub	sp, #20
    64b0:	af00      	add	r7, sp, #0
    64b2:	4603      	mov	r3, r0
    64b4:	6039      	str	r1, [r7, #0]
    64b6:	71fb      	strb	r3, [r7, #7]
    //    u32 first_ts, second_ts, diff;


        u32 msb = 1 << (len - 1);
    64b8:	79fb      	ldrb	r3, [r7, #7]
    64ba:	3b01      	subs	r3, #1
    64bc:	2201      	movs	r2, #1
    64be:	fa02 f303 	lsl.w	r3, r2, r3
    64c2:	60fb      	str	r3, [r7, #12]

        /* start transaction by dropping CSN */
        CSN_CLR;
    64c4:	4b18      	ldr	r3, [pc, #96]	; (6528 <cc2400_spi_rev+0x7c>)
    64c6:	2220      	movs	r2, #32
    64c8:	601a      	str	r2, [r3, #0]

//      first_ts = CLK100NS;
        while (len--) {
    64ca:	e01e      	b.n	650a <cc2400_spi_rev+0x5e>
                if (data & msb)
    64cc:	683a      	ldr	r2, [r7, #0]
    64ce:	68fb      	ldr	r3, [r7, #12]
    64d0:	4013      	ands	r3, r2
    64d2:	2b00      	cmp	r3, #0
    64d4:	d003      	beq.n	64de <cc2400_spi_rev+0x32>
                        MOSI_SET;
    64d6:	4b15      	ldr	r3, [pc, #84]	; (652c <cc2400_spi_rev+0x80>)
    64d8:	2201      	movs	r2, #1
    64da:	601a      	str	r2, [r3, #0]
    64dc:	e002      	b.n	64e4 <cc2400_spi_rev+0x38>
                else
                        MOSI_CLR;
    64de:	4b12      	ldr	r3, [pc, #72]	; (6528 <cc2400_spi_rev+0x7c>)
    64e0:	2201      	movs	r2, #1
    64e2:	601a      	str	r2, [r3, #0]
                data <<= 1;
    64e4:	683b      	ldr	r3, [r7, #0]
    64e6:	005b      	lsls	r3, r3, #1
    64e8:	603b      	str	r3, [r7, #0]

                SCLK_SET;
    64ea:	4b10      	ldr	r3, [pc, #64]	; (652c <cc2400_spi_rev+0x80>)
    64ec:	2210      	movs	r2, #16
    64ee:	601a      	str	r2, [r3, #0]
                if (MISO)
    64f0:	4b0f      	ldr	r3, [pc, #60]	; (6530 <cc2400_spi_rev+0x84>)
    64f2:	681b      	ldr	r3, [r3, #0]
    64f4:	f003 0302 	and.w	r3, r3, #2
    64f8:	2b00      	cmp	r3, #0
    64fa:	d003      	beq.n	6504 <cc2400_spi_rev+0x58>
                        data |= 1;
    64fc:	683b      	ldr	r3, [r7, #0]
    64fe:	f043 0301 	orr.w	r3, r3, #1
    6502:	603b      	str	r3, [r7, #0]

                SCLK_CLR;
    6504:	4b08      	ldr	r3, [pc, #32]	; (6528 <cc2400_spi_rev+0x7c>)
    6506:	2210      	movs	r2, #16
    6508:	601a      	str	r2, [r3, #0]

        /* start transaction by dropping CSN */
        CSN_CLR;

//      first_ts = CLK100NS;
        while (len--) {
    650a:	79fb      	ldrb	r3, [r7, #7]
    650c:	1e5a      	subs	r2, r3, #1
    650e:	71fa      	strb	r2, [r7, #7]
    6510:	2b00      	cmp	r3, #0
    6512:	d1db      	bne.n	64cc <cc2400_spi_rev+0x20>
                SCLK_CLR;
        }
//      second_ts = CLK100NS;
//      diff_ts = second_ts - first_ts;

        CSN_SET;
    6514:	4b05      	ldr	r3, [pc, #20]	; (652c <cc2400_spi_rev+0x80>)
    6516:	2220      	movs	r2, #32
    6518:	601a      	str	r2, [r3, #0]
        return data;
    651a:	683b      	ldr	r3, [r7, #0]
}
    651c:	4618      	mov	r0, r3
    651e:	3714      	adds	r7, #20
    6520:	46bd      	mov	sp, r7
    6522:	f85d 7b04 	ldr.w	r7, [sp], #4
    6526:	4770      	bx	lr
    6528:	2009c05c 	.word	0x2009c05c
    652c:	2009c058 	.word	0x2009c058
    6530:	2009c054 	.word	0x2009c054

00006534 <cc2400_get_rev>:

u8 cc2400_get_rev(u8 reg)
{
    6534:	b580      	push	{r7, lr}
    6536:	b084      	sub	sp, #16
    6538:	af00      	add	r7, sp, #0
    653a:	4603      	mov	r3, r0
    653c:	71fb      	strb	r3, [r7, #7]
        u32 in;

        u32 out = (reg | 0x80) << 8;
    653e:	79fb      	ldrb	r3, [r7, #7]
    6540:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6544:	b2db      	uxtb	r3, r3
    6546:	021b      	lsls	r3, r3, #8
    6548:	60fb      	str	r3, [r7, #12]
        in = cc2400_spi_rev(16, out);
    654a:	2010      	movs	r0, #16
    654c:	68f9      	ldr	r1, [r7, #12]
    654e:	f7ff ffad 	bl	64ac <cc2400_spi_rev>
    6552:	60b8      	str	r0, [r7, #8]
        return in & 0xFF;
    6554:	68bb      	ldr	r3, [r7, #8]
    6556:	b2db      	uxtb	r3, r3
}
    6558:	4618      	mov	r0, r3
    655a:	3710      	adds	r7, #16
    655c:	46bd      	mov	sp, r7
    655e:	bd80      	pop	{r7, pc}

00006560 <add>:

u8 add (u8 x, u8 y)
{
    6560:	b480      	push	{r7}
    6562:	b085      	sub	sp, #20
    6564:	af00      	add	r7, sp, #0
    6566:	4603      	mov	r3, r0
    6568:	460a      	mov	r2, r1
    656a:	71fb      	strb	r3, [r7, #7]
    656c:	4613      	mov	r3, r2
    656e:	71bb      	strb	r3, [r7, #6]
  while (y)
    6570:	e00a      	b.n	6588 <add+0x28>
  {
    u8 carry = x & y;
    6572:	79fa      	ldrb	r2, [r7, #7]
    6574:	79bb      	ldrb	r3, [r7, #6]
    6576:	4013      	ands	r3, r2
    6578:	73fb      	strb	r3, [r7, #15]
    x = x ^ y;
    657a:	79fa      	ldrb	r2, [r7, #7]
    657c:	79bb      	ldrb	r3, [r7, #6]
    657e:	4053      	eors	r3, r2
    6580:	71fb      	strb	r3, [r7, #7]
    y = carry << 1;
    6582:	7bfb      	ldrb	r3, [r7, #15]
    6584:	005b      	lsls	r3, r3, #1
    6586:	71bb      	strb	r3, [r7, #6]
        return in & 0xFF;
}

u8 add (u8 x, u8 y)
{
  while (y)
    6588:	79bb      	ldrb	r3, [r7, #6]
    658a:	2b00      	cmp	r3, #0
    658c:	d1f1      	bne.n	6572 <add+0x12>
  {
    u8 carry = x & y;
    x = x ^ y;
    y = carry << 1;
  }
  return x;
    658e:	79fb      	ldrb	r3, [r7, #7]
}
    6590:	4618      	mov	r0, r3
    6592:	3714      	adds	r7, #20
    6594:	46bd      	mov	sp, r7
    6596:	f85d 7b04 	ldr.w	r7, [sp], #4
    659a:	4770      	bx	lr

0000659c <bt_stream_proposed>:

// wpson proposed
void bt_stream_proposed()
{
    659c:	b590      	push	{r4, r7, lr}
    659e:	b091      	sub	sp, #68	; 0x44
    65a0:	af00      	add	r7, sp, #0

	u8 epstat;
//	u16 f;
//	u8 buf[DMA_SIZE];
	u8 rssi[50];
	int i = 0;
    65a2:	2300      	movs	r3, #0
    65a4:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (i = 0; i < 50; i++)
    65a6:	2300      	movs	r3, #0
    65a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    65aa:	e007      	b.n	65bc <bt_stream_proposed+0x20>
		rssi[i] = 0;
    65ac:	463a      	mov	r2, r7
    65ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    65b0:	4413      	add	r3, r2
    65b2:	2200      	movs	r2, #0
    65b4:	701a      	strb	r2, [r3, #0]
	u8 epstat;
//	u16 f;
//	u8 buf[DMA_SIZE];
	u8 rssi[50];
	int i = 0;
	for (i = 0; i < 50; i++)
    65b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    65b8:	3301      	adds	r3, #1
    65ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    65bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    65be:	2b31      	cmp	r3, #49	; 0x31
    65c0:	ddf4      	ble.n	65ac <bt_stream_proposed+0x10>
		rssi[i] = 0;
//	u8 length = 50;
	int window = 0;
    65c2:	2300      	movs	r3, #0
    65c4:	63bb      	str	r3, [r7, #56]	; 0x38
//	u8 index = 0;
	u8 old = 0;
    65c6:	2300      	movs	r3, #0
    65c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	u8 now = 0;
    65cc:	2300      	movs	r3, #0
    65ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	u8 diff = 0;
    65d2:	2300      	movs	r3, #0
    65d4:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	u8 k = 0;
    65d8:	2300      	movs	r3, #0
    65da:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	u8 temp = 0;
    65de:	2300      	movs	r3, #0
    65e0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	u8 outage = 0;
    65e4:	2300      	movs	r3, #0
    65e6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
//	TXLED_SET;
	queue_init();
    65ea:	f002 ff67 	bl	94bc <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    65ee:	4b6e      	ldr	r3, [pc, #440]	; (67a8 <bt_stream_proposed+0x20c>)
    65f0:	2280      	movs	r2, #128	; 0x80
    65f2:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif
	cc2400_set(MANAND, 0x7fff);
    65f4:	200d      	movs	r0, #13
    65f6:	f647 71ff 	movw	r1, #32767	; 0x7fff
    65fa:	f004 f9d7 	bl	a9ac <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    65fe:	2012      	movs	r0, #18
    6600:	f642 3122 	movw	r1, #11042	; 0x2b22
    6604:	f004 f9d2 	bl	a9ac <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    6608:	2014      	movs	r0, #20
    660a:	f241 214b 	movw	r1, #4683	; 0x124b
    660e:	f004 f9cd 	bl	a9ac <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    6612:	2020      	movs	r0, #32
    6614:	f240 5161 	movw	r1, #1377	; 0x561
    6618:	f004 f9c8 	bl	a9ac <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    661c:	2003      	movs	r0, #3
    661e:	2140      	movs	r1, #64	; 0x40
    6620:	f004 f9c4 	bl	a9ac <cc2400_set>
//	cc2400_set(SYNCL, 0x00ff);
	
//	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
//	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
	
	while (!(cc2400_status() & XOSC16M_STABLE));
    6624:	bf00      	nop
    6626:	f004 fa79 	bl	ab1c <cc2400_status>
    662a:	4603      	mov	r3, r0
    662c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6630:	2b00      	cmp	r3, #0
    6632:	d0f8      	beq.n	6626 <bt_stream_proposed+0x8a>
	while ((cc2400_status() & FS_LOCK));
    6634:	bf00      	nop
    6636:	f004 fa71 	bl	ab1c <cc2400_status>
    663a:	4603      	mov	r3, r0
    663c:	f003 0304 	and.w	r3, r3, #4
    6640:	2b00      	cmp	r3, #0
    6642:	d1f8      	bne.n	6636 <bt_stream_proposed+0x9a>

	cc2400_set(FSDIV, channel - 1);
    6644:	4b59      	ldr	r3, [pc, #356]	; (67ac <bt_stream_proposed+0x210>)
    6646:	881b      	ldrh	r3, [r3, #0]
    6648:	b29b      	uxth	r3, r3
    664a:	3b01      	subs	r3, #1
    664c:	b29b      	uxth	r3, r3
    664e:	2002      	movs	r0, #2
    6650:	4619      	mov	r1, r3
    6652:	f004 f9ab 	bl	a9ac <cc2400_set>
	cc2400_strobe(SFSON);
    6656:	2061      	movs	r0, #97	; 0x61
    6658:	f004 fa6a 	bl	ab30 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    665c:	bf00      	nop
    665e:	f004 fa5d 	bl	ab1c <cc2400_status>
    6662:	4603      	mov	r3, r0
    6664:	f003 0304 	and.w	r3, r3, #4
    6668:	2b00      	cmp	r3, #0
    666a:	d0f8      	beq.n	665e <bt_stream_proposed+0xc2>
	cc2400_strobe(SRX);
    666c:	2062      	movs	r0, #98	; 0x62
    666e:	f004 fa5f 	bl	ab30 <cc2400_strobe>
	
	while (requested_mode == MODE_RX_PROPOSED)
    6672:	e089      	b.n	6788 <bt_stream_proposed+0x1ec>
	{

			
	//	while (!(cc2400_status () & SYNC_RECEIVED));	
		window = 0;
    6674:	2300      	movs	r3, #0
    6676:	63bb      	str	r3, [r7, #56]	; 0x38
		old = 0;
    6678:	2300      	movs	r3, #0
    667a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		now = 0;
    667e:	2300      	movs	r3, #0
    6680:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		diff = 0;
    6684:	2300      	movs	r3, #0
    6686:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		

//		diff_ts = CLK100NS - first_ts;
//wpson
		while ( window < 5)
    668a:	e036      	b.n	66fa <bt_stream_proposed+0x15e>
		{	
//			first_ts = CLK100NS;
			now = cc2400_get_rev(FREQEST);	 
    668c:	2007      	movs	r0, #7
    668e:	f7ff ff51 	bl	6534 <cc2400_get_rev>
    6692:	4603      	mov	r3, r0
    6694:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			diff = add (now, add (~old, 1)); // 5->8
    6698:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    669c:	43db      	mvns	r3, r3
    669e:	b2db      	uxtb	r3, r3
    66a0:	4618      	mov	r0, r3
    66a2:	2101      	movs	r1, #1
    66a4:	f7ff ff5c 	bl	6560 <add>
    66a8:	4603      	mov	r3, r0
    66aa:	461a      	mov	r2, r3
    66ac:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    66b0:	4618      	mov	r0, r3
    66b2:	4611      	mov	r1, r2
    66b4:	f7ff ff54 	bl	6560 <add>
    66b8:	4603      	mov	r3, r0
    66ba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			if (diff & 0x80) 
    66be:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    66c2:	b25b      	sxtb	r3, r3
    66c4:	2b00      	cmp	r3, #0
    66c6:	da0a      	bge.n	66de <bt_stream_proposed+0x142>
				diff = add (~diff, 1);	
    66c8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    66cc:	43db      	mvns	r3, r3
    66ce:	b2db      	uxtb	r3, r3
    66d0:	4618      	mov	r0, r3
    66d2:	2101      	movs	r1, #1
    66d4:	f7ff ff44 	bl	6560 <add>
    66d8:	4603      	mov	r3, r0
    66da:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

			if (diff < 0x05)
    66de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    66e2:	2b04      	cmp	r3, #4
    66e4:	d803      	bhi.n	66ee <bt_stream_proposed+0x152>
				window++;
    66e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    66e8:	3301      	adds	r3, #1
    66ea:	63bb      	str	r3, [r7, #56]	; 0x38
    66ec:	e001      	b.n	66f2 <bt_stream_proposed+0x156>
			{
			//	outage = add (outage, 1);
			//	if (outage > 1)
		//		{
			//		outage = 0;
					window = 0;
    66ee:	2300      	movs	r3, #0
    66f0:	63bb      	str	r3, [r7, #56]	; 0x38
		//		}
			}
			old = now;
    66f2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    66f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		diff = 0;
		

//		diff_ts = CLK100NS - first_ts;
//wpson
		while ( window < 5)
    66fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    66fc:	2b04      	cmp	r3, #4
    66fe:	ddc5      	ble.n	668c <bt_stream_proposed+0xf0>
			}
			old = now;
//			second_ts = CLK100NS;
		}

		rssi_avg = ((int8_t)cc2400_get_rev(RSSI) + (int8_t)cc2400_get_rev(RSSI))/2;
    6700:	2006      	movs	r0, #6
    6702:	f7ff ff17 	bl	6534 <cc2400_get_rev>
    6706:	4603      	mov	r3, r0
    6708:	b2db      	uxtb	r3, r3
    670a:	b25c      	sxtb	r4, r3
    670c:	2006      	movs	r0, #6
    670e:	f7ff ff11 	bl	6534 <cc2400_get_rev>
    6712:	4603      	mov	r3, r0
    6714:	b2db      	uxtb	r3, r3
    6716:	b25b      	sxtb	r3, r3
    6718:	4423      	add	r3, r4
    671a:	0fda      	lsrs	r2, r3, #31
    671c:	4413      	add	r3, r2
    671e:	105b      	asrs	r3, r3, #1
    6720:	b2da      	uxtb	r2, r3
    6722:	4b23      	ldr	r3, [pc, #140]	; (67b0 <bt_stream_proposed+0x214>)
    6724:	701a      	strb	r2, [r3, #0]
		freq_avg = now;
    6726:	4a23      	ldr	r2, [pc, #140]	; (67b4 <bt_stream_proposed+0x218>)
    6728:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    672c:	7013      	strb	r3, [r2, #0]
	
		clkn_proposed = clkn;
    672e:	4b22      	ldr	r3, [pc, #136]	; (67b8 <bt_stream_proposed+0x21c>)
    6730:	681b      	ldr	r3, [r3, #0]
    6732:	4a22      	ldr	r2, [pc, #136]	; (67bc <bt_stream_proposed+0x220>)
    6734:	6013      	str	r3, [r2, #0]
//		diff_ts = second_ts - first_ts;
		enqueue_proposed(FREQ_PACKET, rssi);
    6736:	463b      	mov	r3, r7
    6738:	2007      	movs	r0, #7
    673a:	4619      	mov	r1, r3
    673c:	f7fe f8b6 	bl	48ac <enqueue_proposed>
//		enqueue(FREQ_PACKET, rssi);
		handle_usb(clkn);
    6740:	4b1d      	ldr	r3, [pc, #116]	; (67b8 <bt_stream_proposed+0x21c>)
    6742:	681b      	ldr	r3, [r3, #0]
    6744:	4618      	mov	r0, r3
    6746:	f002 ff59 	bl	95fc <handle_usb>

		first_ts = CLK100NS;
    674a:	4b1b      	ldr	r3, [pc, #108]	; (67b8 <bt_stream_proposed+0x21c>)
    674c:	681b      	ldr	r3, [r3, #0]
    674e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6752:	f640 4235 	movw	r2, #3125	; 0xc35
    6756:	fb02 f203 	mul.w	r2, r2, r3
    675a:	4b19      	ldr	r3, [pc, #100]	; (67c0 <bt_stream_proposed+0x224>)
    675c:	681b      	ldr	r3, [r3, #0]
    675e:	4413      	add	r3, r2
    6760:	4a18      	ldr	r2, [pc, #96]	; (67c4 <bt_stream_proposed+0x228>)
    6762:	6013      	str	r3, [r2, #0]
		while ((CLK100NS-first_ts)<500)
    6764:	bf00      	nop
    6766:	4b14      	ldr	r3, [pc, #80]	; (67b8 <bt_stream_proposed+0x21c>)
    6768:	681b      	ldr	r3, [r3, #0]
    676a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    676e:	f640 4235 	movw	r2, #3125	; 0xc35
    6772:	fb02 f203 	mul.w	r2, r2, r3
    6776:	4b12      	ldr	r3, [pc, #72]	; (67c0 <bt_stream_proposed+0x224>)
    6778:	681b      	ldr	r3, [r3, #0]
    677a:	441a      	add	r2, r3
    677c:	4b11      	ldr	r3, [pc, #68]	; (67c4 <bt_stream_proposed+0x228>)
    677e:	681b      	ldr	r3, [r3, #0]
    6780:	1ad3      	subs	r3, r2, r3
    6782:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
    6786:	d3ee      	bcc.n	6766 <bt_stream_proposed+0x1ca>
	cc2400_set(FSDIV, channel - 1);
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
	while (requested_mode == MODE_RX_PROPOSED)
    6788:	4b0f      	ldr	r3, [pc, #60]	; (67c8 <bt_stream_proposed+0x22c>)
    678a:	781b      	ldrb	r3, [r3, #0]
    678c:	b2db      	uxtb	r3, r3
    678e:	2b0f      	cmp	r3, #15
    6790:	f43f af70 	beq.w	6674 <bt_stream_proposed+0xd8>
	
//		msleep(500);	
		cc2400_strobe (SRX);
*/
	}
	mode = MODE_IDLE;
    6794:	4b0d      	ldr	r3, [pc, #52]	; (67cc <bt_stream_proposed+0x230>)
    6796:	2200      	movs	r2, #0
    6798:	701a      	strb	r2, [r3, #0]
	dio_ssp_stop ();
    679a:	f7ff fad1 	bl	5d40 <dio_ssp_stop>
	cs_trigger_disable ();
    679e:	f7fe f9af 	bl	4b00 <cs_trigger_disable>
}
    67a2:	3744      	adds	r7, #68	; 0x44
    67a4:	46bd      	mov	sp, r7
    67a6:	bd90      	pop	{r4, r7, pc}
    67a8:	2009c058 	.word	0x2009c058
    67ac:	1000049c 	.word	0x1000049c
    67b0:	10001039 	.word	0x10001039
    67b4:	10000bf1 	.word	0x10000bf1
    67b8:	10000bec 	.word	0x10000bec
    67bc:	10000b08 	.word	0x10000b08
    67c0:	40004008 	.word	0x40004008
    67c4:	10000d00 	.word	0x10000d00
    67c8:	10000a3f 	.word	0x10000a3f
    67cc:	10000a3e 	.word	0x10000a3e

000067d0 <bt_stream_freq>:



// wpson
void bt_stream_freq()
{
    67d0:	b590      	push	{r4, r7, lr}
    67d2:	b0a1      	sub	sp, #132	; 0x84
    67d4:	af00      	add	r7, sp, #0
//	TXLED_SET;
	RXLED_CLR;
    67d6:	4b99      	ldr	r3, [pc, #612]	; (6a3c <bt_stream_freq+0x26c>)
    67d8:	2210      	movs	r2, #16
    67da:	601a      	str	r2, [r3, #0]
	int i;
	
	u8 freq_buf[45];
	queue_init();
    67dc:	f002 fe6e 	bl	94bc <queue_init>
	dio_ssp_init();
    67e0:	f004 f812 	bl	a808 <dio_ssp_init>
	dma_init_le();
    67e4:	f7ff f90c 	bl	5a00 <dma_init_le>
	dio_ssp_start();
    67e8:	f7ff fa7a 	bl	5ce0 <dio_ssp_start>
	
	cc2400_set(MANAND, 0x7fff);
    67ec:	200d      	movs	r0, #13
    67ee:	f647 71ff 	movw	r1, #32767	; 0x7fff
    67f2:	f004 f8db 	bl	a9ac <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    67f6:	2012      	movs	r0, #18
    67f8:	f642 3122 	movw	r1, #11042	; 0x2b22
    67fc:	f004 f8d6 	bl	a9ac <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    6800:	2014      	movs	r0, #20
    6802:	f241 214b 	movw	r1, #4683	; 0x124b
    6806:	f004 f8d1 	bl	a9ac <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    680a:	2020      	movs	r0, #32
    680c:	f240 5161 	movw	r1, #1377	; 0x561
    6810:	f004 f8cc 	bl	a9ac <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    6814:	2003      	movs	r0, #3
    6816:	2140      	movs	r1, #64	; 0x40
    6818:	f004 f8c8 	bl	a9ac <cc2400_set>

//	cc2400_set(SYNCH, 0xf9ae);
//	cc2400_set(SYNCL, 0x1584);
	
	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
    681c:	4888      	ldr	r0, [pc, #544]	; (6a40 <bt_stream_freq+0x270>)
    681e:	f003 fef3 	bl	a608 <rbit>
    6822:	4603      	mov	r3, r0
    6824:	b29b      	uxth	r3, r3
    6826:	202c      	movs	r0, #44	; 0x2c
    6828:	4619      	mov	r1, r3
    682a:	f004 f8bf 	bl	a9ac <cc2400_set>
	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
    682e:	4884      	ldr	r0, [pc, #528]	; (6a40 <bt_stream_freq+0x270>)
    6830:	f003 feea 	bl	a608 <rbit>
    6834:	4603      	mov	r3, r0
    6836:	0c1b      	lsrs	r3, r3, #16
    6838:	b29b      	uxth	r3, r3
    683a:	202d      	movs	r0, #45	; 0x2d
    683c:	4619      	mov	r1, r3
    683e:	f004 f8b5 	bl	a9ac <cc2400_set>
	
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6842:	4b80      	ldr	r3, [pc, #512]	; (6a44 <bt_stream_freq+0x274>)
    6844:	2280      	movs	r2, #128	; 0x80
    6846:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif

	while (!(cc2400_status() & XOSC16M_STABLE));
    6848:	bf00      	nop
    684a:	f004 f967 	bl	ab1c <cc2400_status>
    684e:	4603      	mov	r3, r0
    6850:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6854:	2b00      	cmp	r3, #0
    6856:	d0f8      	beq.n	684a <bt_stream_freq+0x7a>
	while ((cc2400_status() & FS_LOCK));
    6858:	bf00      	nop
    685a:	f004 f95f 	bl	ab1c <cc2400_status>
    685e:	4603      	mov	r3, r0
    6860:	f003 0304 	and.w	r3, r3, #4
    6864:	2b00      	cmp	r3, #0
    6866:	d1f8      	bne.n	685a <bt_stream_freq+0x8a>

	cc2400_set(FSDIV, channel - 1);
    6868:	4b77      	ldr	r3, [pc, #476]	; (6a48 <bt_stream_freq+0x278>)
    686a:	881b      	ldrh	r3, [r3, #0]
    686c:	b29b      	uxth	r3, r3
    686e:	3b01      	subs	r3, #1
    6870:	b29b      	uxth	r3, r3
    6872:	2002      	movs	r0, #2
    6874:	4619      	mov	r1, r3
    6876:	f004 f899 	bl	a9ac <cc2400_set>
	cc2400_strobe(SFSON);
    687a:	2061      	movs	r0, #97	; 0x61
    687c:	f004 f958 	bl	ab30 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6880:	bf00      	nop
    6882:	f004 f94b 	bl	ab1c <cc2400_status>
    6886:	4603      	mov	r3, r0
    6888:	f003 0304 	and.w	r3, r3, #4
    688c:	2b00      	cmp	r3, #0
    688e:	d0f8      	beq.n	6882 <bt_stream_freq+0xb2>
	cc2400_strobe(SRX);
    6890:	2062      	movs	r0, #98	; 0x62
    6892:	f004 f94d 	bl	ab30 <cc2400_strobe>
	
//	cc2400_rx();
	while (requested_mode == MODE_RX_FREQ) {
    6896:	e148      	b.n	6b2a <bt_stream_freq+0x35a>
		
		while (!(cc2400_status () & SYNC_RECEIVED));
    6898:	bf00      	nop
    689a:	f004 f93f 	bl	ab1c <cc2400_status>
    689e:	4603      	mov	r3, r0
    68a0:	f003 0310 	and.w	r3, r3, #16
    68a4:	2b00      	cmp	r3, #0
    68a6:	d0f8      	beq.n	689a <bt_stream_freq+0xca>
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/

		for (i = 0; i < 45; i++)
    68a8:	2300      	movs	r3, #0
    68aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    68ac:	e00d      	b.n	68ca <bt_stream_freq+0xfa>
		{
			freq_buf[i] = cc2400_get_rev(FREQEST);	
    68ae:	2007      	movs	r0, #7
    68b0:	f7ff fe40 	bl	6534 <cc2400_get_rev>
    68b4:	4603      	mov	r3, r0
    68b6:	4619      	mov	r1, r3
    68b8:	f107 0234 	add.w	r2, r7, #52	; 0x34
    68bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    68be:	4413      	add	r3, r2
    68c0:	460a      	mov	r2, r1
    68c2:	701a      	strb	r2, [r3, #0]
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/

		for (i = 0; i < 45; i++)
    68c4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    68c6:	3301      	adds	r3, #1
    68c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    68ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    68cc:	2b2c      	cmp	r3, #44	; 0x2c
    68ce:	ddee      	ble.n	68ae <bt_stream_freq+0xde>
		{
			freq_buf[i] = cc2400_get_rev(FREQEST);	
		}
		clkn_freq = clkn;
    68d0:	4b5e      	ldr	r3, [pc, #376]	; (6a4c <bt_stream_freq+0x27c>)
    68d2:	681b      	ldr	r3, [r3, #0]
    68d4:	4a5e      	ldr	r2, [pc, #376]	; (6a50 <bt_stream_freq+0x280>)
    68d6:	6013      	str	r3, [r2, #0]
		
		while (!rx_tc);
    68d8:	bf00      	nop
    68da:	4b5e      	ldr	r3, [pc, #376]	; (6a54 <bt_stream_freq+0x284>)
    68dc:	681b      	ldr	r3, [r3, #0]
    68de:	2b00      	cmp	r3, #0
    68e0:	d0fb      	beq.n	68da <bt_stream_freq+0x10a>
	
		RXLED_SET;
    68e2:	4b5d      	ldr	r3, [pc, #372]	; (6a58 <bt_stream_freq+0x288>)
    68e4:	2210      	movs	r2, #16
    68e6:	601a      	str	r2, [r3, #0]
		if (rx_err) {
    68e8:	4b5c      	ldr	r3, [pc, #368]	; (6a5c <bt_stream_freq+0x28c>)
    68ea:	681b      	ldr	r3, [r3, #0]
    68ec:	2b00      	cmp	r3, #0
    68ee:	d007      	beq.n	6900 <bt_stream_freq+0x130>
		status |= DMA_ERROR;
    68f0:	4b5b      	ldr	r3, [pc, #364]	; (6a60 <bt_stream_freq+0x290>)
    68f2:	781b      	ldrb	r3, [r3, #0]
    68f4:	b2db      	uxtb	r3, r3
    68f6:	f043 0302 	orr.w	r3, r3, #2
    68fa:	b2da      	uxtb	r2, r3
    68fc:	4b58      	ldr	r3, [pc, #352]	; (6a60 <bt_stream_freq+0x290>)
    68fe:	701a      	strb	r2, [r3, #0]
		}	
		if (rx_tc > 1)
    6900:	4b54      	ldr	r3, [pc, #336]	; (6a54 <bt_stream_freq+0x284>)
    6902:	681b      	ldr	r3, [r3, #0]
    6904:	2b01      	cmp	r3, #1
    6906:	d907      	bls.n	6918 <bt_stream_freq+0x148>
			status |= DMA_OVERFLOW;
    6908:	4b55      	ldr	r3, [pc, #340]	; (6a60 <bt_stream_freq+0x290>)
    690a:	781b      	ldrb	r3, [r3, #0]
    690c:	b2db      	uxtb	r3, r3
    690e:	f043 0301 	orr.w	r3, r3, #1
    6912:	b2da      	uxtb	r2, r3
    6914:	4b52      	ldr	r3, [pc, #328]	; (6a60 <bt_stream_freq+0x290>)
    6916:	701a      	strb	r2, [r3, #0]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    6918:	463b      	mov	r3, r7
    691a:	67bb      	str	r3, [r7, #120]	; 0x78
		packet[0] = le.access_address;
    691c:	4b51      	ldr	r3, [pc, #324]	; (6a64 <bt_stream_freq+0x294>)
    691e:	681b      	ldr	r3, [r3, #0]
    6920:	603b      	str	r3, [r7, #0]

                while (DMACC0Config & DMACCxConfig_E && rx_err == 0);
    6922:	bf00      	nop
    6924:	4b50      	ldr	r3, [pc, #320]	; (6a68 <bt_stream_freq+0x298>)
    6926:	681b      	ldr	r3, [r3, #0]
    6928:	f003 0301 	and.w	r3, r3, #1
    692c:	2b00      	cmp	r3, #0
    692e:	d003      	beq.n	6938 <bt_stream_freq+0x168>
    6930:	4b4a      	ldr	r3, [pc, #296]	; (6a5c <bt_stream_freq+0x28c>)
    6932:	681b      	ldr	r3, [r3, #0]
    6934:	2b00      	cmp	r3, #0
    6936:	d0f5      	beq.n	6924 <bt_stream_freq+0x154>
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6938:	4a4c      	ldr	r2, [pc, #304]	; (6a6c <bt_stream_freq+0x29c>)
    693a:	4b4c      	ldr	r3, [pc, #304]	; (6a6c <bt_stream_freq+0x29c>)
    693c:	681b      	ldr	r3, [r3, #0]
    693e:	f023 0301 	bic.w	r3, r3, #1
    6942:	6013      	str	r3, [r2, #0]
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    6944:	4b40      	ldr	r3, [pc, #256]	; (6a48 <bt_stream_freq+0x278>)
    6946:	881b      	ldrh	r3, [r3, #0]
    6948:	b29b      	uxth	r3, r3
    694a:	b2db      	uxtb	r3, r3
    694c:	3b62      	subs	r3, #98	; 0x62
    694e:	b2db      	uxtb	r3, r3
    6950:	4618      	mov	r0, r3
    6952:	f002 fc33 	bl	91bc <btle_channel_index>
    6956:	4603      	mov	r3, r0
    6958:	461a      	mov	r2, r3
    695a:	4613      	mov	r3, r2
    695c:	005b      	lsls	r3, r3, #1
    695e:	4413      	add	r3, r2
    6960:	011b      	lsls	r3, r3, #4
    6962:	4a43      	ldr	r2, [pc, #268]	; (6a70 <bt_stream_freq+0x2a0>)
    6964:	4413      	add	r3, r2
    6966:	677b      	str	r3, [r7, #116]	; 0x74
		for (i = 0; i < 44; i += 4) {
    6968:	2300      	movs	r3, #0
    696a:	67fb      	str	r3, [r7, #124]	; 0x7c
    696c:	e034      	b.n	69d8 <bt_stream_freq+0x208>
			uint32_t v = rxbuf1[i+0] << 24
    696e:	4a41      	ldr	r2, [pc, #260]	; (6a74 <bt_stream_freq+0x2a4>)
    6970:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    6972:	4413      	add	r3, r2
    6974:	781b      	ldrb	r3, [r3, #0]
    6976:	061a      	lsls	r2, r3, #24
                                          | rxbuf1[i+1] << 16
    6978:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    697a:	3301      	adds	r3, #1
    697c:	493d      	ldr	r1, [pc, #244]	; (6a74 <bt_stream_freq+0x2a4>)
    697e:	5ccb      	ldrb	r3, [r1, r3]
    6980:	041b      	lsls	r3, r3, #16
    6982:	431a      	orrs	r2, r3
                                      | rxbuf1[i+2] << 8
    6984:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    6986:	3302      	adds	r3, #2
    6988:	493a      	ldr	r1, [pc, #232]	; (6a74 <bt_stream_freq+0x2a4>)
    698a:	5ccb      	ldrb	r3, [r1, r3]
    698c:	021b      	lsls	r3, r3, #8
    698e:	4313      	orrs	r3, r2
                                          | rxbuf1[i+3] << 0;
    6990:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    6992:	3203      	adds	r2, #3
    6994:	4937      	ldr	r1, [pc, #220]	; (6a74 <bt_stream_freq+0x2a4>)
    6996:	5c8a      	ldrb	r2, [r1, r2]
    6998:	4313      	orrs	r3, r2
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    699a:	673b      	str	r3, [r7, #112]	; 0x70
                                          | rxbuf1[i+1] << 16
                                      | rxbuf1[i+2] << 8
                                          | rxbuf1[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
    699c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    699e:	2b00      	cmp	r3, #0
    69a0:	da00      	bge.n	69a4 <bt_stream_freq+0x1d4>
    69a2:	3303      	adds	r3, #3
    69a4:	109b      	asrs	r3, r3, #2
    69a6:	1c5c      	adds	r4, r3, #1
    69a8:	6f38      	ldr	r0, [r7, #112]	; 0x70
    69aa:	f003 fe2d 	bl	a608 <rbit>
    69ae:	4601      	mov	r1, r0
    69b0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    69b2:	2b00      	cmp	r3, #0
    69b4:	da00      	bge.n	69b8 <bt_stream_freq+0x1e8>
    69b6:	3303      	adds	r3, #3
    69b8:	109b      	asrs	r3, r3, #2
    69ba:	009b      	lsls	r3, r3, #2
    69bc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    69be:	4413      	add	r3, r2
    69c0:	681b      	ldr	r3, [r3, #0]
    69c2:	ea81 0203 	eor.w	r2, r1, r3
    69c6:	00a3      	lsls	r3, r4, #2
    69c8:	f107 0180 	add.w	r1, r7, #128	; 0x80
    69cc:	440b      	add	r3, r1
    69ce:	f843 2c80 	str.w	r2, [r3, #-128]
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
    69d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    69d4:	3304      	adds	r3, #4
    69d6:	67fb      	str	r3, [r7, #124]	; 0x7c
    69d8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    69da:	2b2b      	cmp	r3, #43	; 0x2b
    69dc:	ddc7      	ble.n	696e <bt_stream_freq+0x19e>
                                      | eddystone[i+2] << 8
                                          | eddystone[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
		}
*/
		unsigned len = (p[5] & 0x3f) + 2;
    69de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    69e0:	3305      	adds	r3, #5
    69e2:	781b      	ldrb	r3, [r3, #0]
    69e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    69e8:	3302      	adds	r3, #2
    69ea:	66fb      	str	r3, [r7, #108]	; 0x6c
		
		if (len > 39)
    69ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    69ee:	2b27      	cmp	r3, #39	; 0x27
    69f0:	d900      	bls.n	69f4 <bt_stream_freq+0x224>
			goto rx_flush;
    69f2:	e05e      	b.n	6ab2 <bt_stream_freq+0x2e2>

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    69f4:	4b1b      	ldr	r3, [pc, #108]	; (6a64 <bt_stream_freq+0x294>)
    69f6:	68d9      	ldr	r1, [r3, #12]
    69f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    69fa:	1d1a      	adds	r2, r3, #4
    69fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    69fe:	4608      	mov	r0, r1
    6a00:	4611      	mov	r1, r2
    6a02:	461a      	mov	r2, r3
    6a04:	f002 fcde 	bl	93c4 <btle_crcgen_lut>
    6a08:	66b8      	str	r0, [r7, #104]	; 0x68
		u32 wire_crc = (p[4+len+2] << 16)
    6a0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6a0c:	3306      	adds	r3, #6
    6a0e:	6fba      	ldr	r2, [r7, #120]	; 0x78
    6a10:	4413      	add	r3, r2
    6a12:	781b      	ldrb	r3, [r3, #0]
    6a14:	041a      	lsls	r2, r3, #16
                                                 | (p[4+len+1] << 8)
    6a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6a18:	3305      	adds	r3, #5
    6a1a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
    6a1c:	440b      	add	r3, r1
    6a1e:	781b      	ldrb	r3, [r3, #0]
    6a20:	021b      	lsls	r3, r3, #8
    6a22:	4313      	orrs	r3, r2
                                                 | (p[4+len+0] << 0);
    6a24:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    6a26:	3204      	adds	r2, #4
    6a28:	6fb9      	ldr	r1, [r7, #120]	; 0x78
    6a2a:	440a      	add	r2, r1
    6a2c:	7812      	ldrb	r2, [r2, #0]
    6a2e:	4313      	orrs	r3, r2
		
		if (len > 39)
			goto rx_flush;

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
		u32 wire_crc = (p[4+len+2] << 16)
    6a30:	667b      	str	r3, [r7, #100]	; 0x64
                                                 | (p[4+len+1] << 8)
                                                 | (p[4+len+0] << 0);
                if (calc_crc != wire_crc) // skip packets with a bad CRC
    6a32:	6eba      	ldr	r2, [r7, #104]	; 0x68
    6a34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6a36:	429a      	cmp	r2, r3
    6a38:	d01e      	beq.n	6a78 <bt_stream_freq+0x2a8>
                        goto rx_flush;
    6a3a:	e03a      	b.n	6ab2 <bt_stream_freq+0x2e2>
    6a3c:	2009c03c 	.word	0x2009c03c
    6a40:	8e89bed6 	.word	0x8e89bed6
    6a44:	2009c058 	.word	0x2009c058
    6a48:	1000049c 	.word	0x1000049c
    6a4c:	10000bec 	.word	0x10000bec
    6a50:	10000b00 	.word	0x10000b00
    6a54:	10000b04 	.word	0x10000b04
    6a58:	2009c038 	.word	0x2009c038
    6a5c:	100010c8 	.word	0x100010c8
    6a60:	10000a48 	.word	0x10000a48
    6a64:	10000458 	.word	0x10000458
    6a68:	50004110 	.word	0x50004110
    6a6c:	40030024 	.word	0x40030024
    6a70:	0000c7b4 	.word	0x0000c7b4
    6a74:	10001094 	.word	0x10001094

		
		if (p[38] == 0x00 && p[39] == 0x3d)
    6a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    6a7a:	3326      	adds	r3, #38	; 0x26
    6a7c:	781b      	ldrb	r3, [r3, #0]
    6a7e:	2b00      	cmp	r3, #0
    6a80:	d114      	bne.n	6aac <bt_stream_freq+0x2dc>
    6a82:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    6a84:	3327      	adds	r3, #39	; 0x27
    6a86:	781b      	ldrb	r3, [r3, #0]
    6a88:	2b3d      	cmp	r3, #61	; 0x3d
    6a8a:	d10f      	bne.n	6aac <bt_stream_freq+0x2dc>
		{
			device_index = p[40];
    6a8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    6a8e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    6a92:	4b2c      	ldr	r3, [pc, #176]	; (6b44 <bt_stream_freq+0x374>)
    6a94:	701a      	strb	r2, [r3, #0]
			enqueue_freq (MESSAGE, freq_buf);
    6a96:	f107 0334 	add.w	r3, r7, #52	; 0x34
    6a9a:	2002      	movs	r0, #2
    6a9c:	4619      	mov	r1, r3
    6a9e:	f7fd fe71 	bl	4784 <enqueue_freq>
			handle_usb(clkn);
    6aa2:	4b29      	ldr	r3, [pc, #164]	; (6b48 <bt_stream_freq+0x378>)
    6aa4:	681b      	ldr	r3, [r3, #0]
    6aa6:	4618      	mov	r0, r3
    6aa8:	f002 fda8 	bl	95fc <handle_usb>
		}
		RXLED_CLR;
    6aac:	4b27      	ldr	r3, [pc, #156]	; (6b4c <bt_stream_freq+0x37c>)
    6aae:	2210      	movs	r2, #16
    6ab0:	601a      	str	r2, [r3, #0]
	       
	rx_flush:
		cc2400_strobe (SRFOFF);
    6ab2:	2064      	movs	r0, #100	; 0x64
    6ab4:	f004 f83c 	bl	ab30 <cc2400_strobe>
                while ((cc2400_status () & FS_LOCK));
    6ab8:	bf00      	nop
    6aba:	f004 f82f 	bl	ab1c <cc2400_status>
    6abe:	4603      	mov	r3, r0
    6ac0:	f003 0304 	and.w	r3, r3, #4
    6ac4:	2b00      	cmp	r3, #0
    6ac6:	d1f8      	bne.n	6aba <bt_stream_freq+0x2ea>

                while (!(cc2400_status () & XOSC16M_STABLE));
    6ac8:	bf00      	nop
    6aca:	f004 f827 	bl	ab1c <cc2400_status>
    6ace:	4603      	mov	r3, r0
    6ad0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6ad4:	2b00      	cmp	r3, #0
    6ad6:	d0f8      	beq.n	6aca <bt_stream_freq+0x2fa>

                cc2400_strobe (SFSON);
    6ad8:	2061      	movs	r0, #97	; 0x61
    6ada:	f004 f829 	bl	ab30 <cc2400_strobe>
                while (!(cc2400_status () & FS_LOCK));
    6ade:	bf00      	nop
    6ae0:	f004 f81c 	bl	ab1c <cc2400_status>
    6ae4:	4603      	mov	r3, r0
    6ae6:	f003 0304 	and.w	r3, r3, #4
    6aea:	2b00      	cmp	r3, #0
    6aec:	d0f8      	beq.n	6ae0 <bt_stream_freq+0x310>

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6aee:	4a18      	ldr	r2, [pc, #96]	; (6b50 <bt_stream_freq+0x380>)
    6af0:	4b17      	ldr	r3, [pc, #92]	; (6b50 <bt_stream_freq+0x380>)
    6af2:	681b      	ldr	r3, [r3, #0]
    6af4:	f023 0301 	bic.w	r3, r3, #1
    6af8:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    6afa:	e003      	b.n	6b04 <bt_stream_freq+0x334>
                        u8 tmp = (u8)DIO_SSP_DR;
    6afc:	4b15      	ldr	r3, [pc, #84]	; (6b54 <bt_stream_freq+0x384>)
    6afe:	681b      	ldr	r3, [r3, #0]
    6b00:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

                cc2400_strobe (SFSON);
                while (!(cc2400_status () & FS_LOCK));

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    6b04:	4b14      	ldr	r3, [pc, #80]	; (6b58 <bt_stream_freq+0x388>)
    6b06:	681b      	ldr	r3, [r3, #0]
    6b08:	f003 0304 	and.w	r3, r3, #4
    6b0c:	2b00      	cmp	r3, #0
    6b0e:	d1f5      	bne.n	6afc <bt_stream_freq+0x32c>
                        u8 tmp = (u8)DIO_SSP_DR;
                }
		dma_init_le();
    6b10:	f7fe ff76 	bl	5a00 <dma_init_le>
		dio_ssp_start();
    6b14:	f7ff f8e4 	bl	5ce0 <dio_ssp_start>
		
                cc2400_strobe (SRX);
    6b18:	2062      	movs	r0, #98	; 0x62
    6b1a:	f004 f809 	bl	ab30 <cc2400_strobe>
		rx_tc = 0;
    6b1e:	4b0f      	ldr	r3, [pc, #60]	; (6b5c <bt_stream_freq+0x38c>)
    6b20:	2200      	movs	r2, #0
    6b22:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6b24:	4b0e      	ldr	r3, [pc, #56]	; (6b60 <bt_stream_freq+0x390>)
    6b26:	2200      	movs	r2, #0
    6b28:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
//	cc2400_rx();
	while (requested_mode == MODE_RX_FREQ) {
    6b2a:	4b0e      	ldr	r3, [pc, #56]	; (6b64 <bt_stream_freq+0x394>)
    6b2c:	781b      	ldrb	r3, [r3, #0]
    6b2e:	b2db      	uxtb	r3, r3
    6b30:	2b0e      	cmp	r3, #14
    6b32:	f43f aeb1 	beq.w	6898 <bt_stream_freq+0xc8>
		rx_tc = 0;
		rx_err = 0;
	 
	
	}
	dio_ssp_stop ();
    6b36:	f7ff f903 	bl	5d40 <dio_ssp_stop>
	cs_trigger_disable ();
    6b3a:	f7fd ffe1 	bl	4b00 <cs_trigger_disable>
}
    6b3e:	3784      	adds	r7, #132	; 0x84
    6b40:	46bd      	mov	sp, r7
    6b42:	bd90      	pop	{r4, r7, pc}
    6b44:	10000bf0 	.word	0x10000bf0
    6b48:	10000bec 	.word	0x10000bec
    6b4c:	2009c03c 	.word	0x2009c03c
    6b50:	40030024 	.word	0x40030024
    6b54:	40030008 	.word	0x40030008
    6b58:	4003000c 	.word	0x4003000c
    6b5c:	10000b04 	.word	0x10000b04
    6b60:	100010c8 	.word	0x100010c8
    6b64:	10000a3f 	.word	0x10000a3f

00006b68 <bt_stream_legacy>:


// wpson
void bt_stream_legacy()
{
    6b68:	b590      	push	{r4, r7, lr}
    6b6a:	b0a3      	sub	sp, #140	; 0x8c
    6b6c:	af00      	add	r7, sp, #0
//	TXLED_SET;
	RXLED_CLR;
    6b6e:	4ba9      	ldr	r3, [pc, #676]	; (6e14 <bt_stream_legacy+0x2ac>)
    6b70:	2210      	movs	r2, #16
    6b72:	601a      	str	r2, [r3, #0]
	int i;
	
	u8 rssi_buf[DMA_SIZE];
	queue_init();
    6b74:	f002 fca2 	bl	94bc <queue_init>
	dio_ssp_init();
    6b78:	f003 fe46 	bl	a808 <dio_ssp_init>
	dma_init_le();
    6b7c:	f7fe ff40 	bl	5a00 <dma_init_le>
	dio_ssp_start();
    6b80:	f7ff f8ae 	bl	5ce0 <dio_ssp_start>
	
	cc2400_set(MANAND, 0x7fff);
    6b84:	200d      	movs	r0, #13
    6b86:	f647 71ff 	movw	r1, #32767	; 0x7fff
    6b8a:	f003 ff0f 	bl	a9ac <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    6b8e:	2012      	movs	r0, #18
    6b90:	f642 3122 	movw	r1, #11042	; 0x2b22
    6b94:	f003 ff0a 	bl	a9ac <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    6b98:	2014      	movs	r0, #20
    6b9a:	f241 214b 	movw	r1, #4683	; 0x124b
    6b9e:	f003 ff05 	bl	a9ac <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    6ba2:	2020      	movs	r0, #32
    6ba4:	f240 5161 	movw	r1, #1377	; 0x561
    6ba8:	f003 ff00 	bl	a9ac <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    6bac:	2003      	movs	r0, #3
    6bae:	2140      	movs	r1, #64	; 0x40
    6bb0:	f003 fefc 	bl	a9ac <cc2400_set>

//	cc2400_set(SYNCH, 0xf9ae);
//	cc2400_set(SYNCL, 0x1584);
	
	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
    6bb4:	4898      	ldr	r0, [pc, #608]	; (6e18 <bt_stream_legacy+0x2b0>)
    6bb6:	f003 fd27 	bl	a608 <rbit>
    6bba:	4603      	mov	r3, r0
    6bbc:	b29b      	uxth	r3, r3
    6bbe:	202c      	movs	r0, #44	; 0x2c
    6bc0:	4619      	mov	r1, r3
    6bc2:	f003 fef3 	bl	a9ac <cc2400_set>
	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
    6bc6:	4894      	ldr	r0, [pc, #592]	; (6e18 <bt_stream_legacy+0x2b0>)
    6bc8:	f003 fd1e 	bl	a608 <rbit>
    6bcc:	4603      	mov	r3, r0
    6bce:	0c1b      	lsrs	r3, r3, #16
    6bd0:	b29b      	uxth	r3, r3
    6bd2:	202d      	movs	r0, #45	; 0x2d
    6bd4:	4619      	mov	r1, r3
    6bd6:	f003 fee9 	bl	a9ac <cc2400_set>
	
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6bda:	4b90      	ldr	r3, [pc, #576]	; (6e1c <bt_stream_legacy+0x2b4>)
    6bdc:	2280      	movs	r2, #128	; 0x80
    6bde:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif

	while (!(cc2400_status() & XOSC16M_STABLE));
    6be0:	bf00      	nop
    6be2:	f003 ff9b 	bl	ab1c <cc2400_status>
    6be6:	4603      	mov	r3, r0
    6be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6bec:	2b00      	cmp	r3, #0
    6bee:	d0f8      	beq.n	6be2 <bt_stream_legacy+0x7a>
	while ((cc2400_status() & FS_LOCK));
    6bf0:	bf00      	nop
    6bf2:	f003 ff93 	bl	ab1c <cc2400_status>
    6bf6:	4603      	mov	r3, r0
    6bf8:	f003 0304 	and.w	r3, r3, #4
    6bfc:	2b00      	cmp	r3, #0
    6bfe:	d1f8      	bne.n	6bf2 <bt_stream_legacy+0x8a>

	cc2400_set(FSDIV, channel - 1);
    6c00:	4b87      	ldr	r3, [pc, #540]	; (6e20 <bt_stream_legacy+0x2b8>)
    6c02:	881b      	ldrh	r3, [r3, #0]
    6c04:	b29b      	uxth	r3, r3
    6c06:	3b01      	subs	r3, #1
    6c08:	b29b      	uxth	r3, r3
    6c0a:	2002      	movs	r0, #2
    6c0c:	4619      	mov	r1, r3
    6c0e:	f003 fecd 	bl	a9ac <cc2400_set>
	cc2400_strobe(SFSON);
    6c12:	2061      	movs	r0, #97	; 0x61
    6c14:	f003 ff8c 	bl	ab30 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6c18:	bf00      	nop
    6c1a:	f003 ff7f 	bl	ab1c <cc2400_status>
    6c1e:	4603      	mov	r3, r0
    6c20:	f003 0304 	and.w	r3, r3, #4
    6c24:	2b00      	cmp	r3, #0
    6c26:	d0f8      	beq.n	6c1a <bt_stream_legacy+0xb2>
	cc2400_strobe(SRX);
    6c28:	2062      	movs	r0, #98	; 0x62
    6c2a:	f003 ff81 	bl	ab30 <cc2400_strobe>
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    6c2e:	e15c      	b.n	6eea <bt_stream_legacy+0x382>
		
		while (!(cc2400_status () & SYNC_RECEIVED));
    6c30:	bf00      	nop
    6c32:	f003 ff73 	bl	ab1c <cc2400_status>
    6c36:	4603      	mov	r3, r0
    6c38:	f003 0310 	and.w	r3, r3, #16
    6c3c:	2b00      	cmp	r3, #0
    6c3e:	d0f8      	beq.n	6c32 <bt_stream_legacy+0xca>
                else
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
    6c40:	4b78      	ldr	r3, [pc, #480]	; (6e24 <bt_stream_legacy+0x2bc>)
    6c42:	2200      	movs	r2, #0
    6c44:	601a      	str	r2, [r3, #0]
		rssi_count = 5;
    6c46:	4b78      	ldr	r3, [pc, #480]	; (6e28 <bt_stream_legacy+0x2c0>)
    6c48:	2205      	movs	r2, #5
    6c4a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < rssi_count; i++)
    6c4c:	2300      	movs	r3, #0
    6c4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    6c52:	e011      	b.n	6c78 <bt_stream_legacy+0x110>
		{
			rssi_sum += (int8_t)(cc2400_get(RSSI) >> 8);
    6c54:	2006      	movs	r0, #6
    6c56:	f003 fe93 	bl	a980 <cc2400_get>
    6c5a:	4603      	mov	r3, r0
    6c5c:	0a1b      	lsrs	r3, r3, #8
    6c5e:	b29b      	uxth	r3, r3
    6c60:	b2db      	uxtb	r3, r3
    6c62:	b25a      	sxtb	r2, r3
    6c64:	4b6f      	ldr	r3, [pc, #444]	; (6e24 <bt_stream_legacy+0x2bc>)
    6c66:	681b      	ldr	r3, [r3, #0]
    6c68:	4413      	add	r3, r2
    6c6a:	4a6e      	ldr	r2, [pc, #440]	; (6e24 <bt_stream_legacy+0x2bc>)
    6c6c:	6013      	str	r3, [r2, #0]
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
		rssi_count = 5;
		for (i = 0; i < rssi_count; i++)
    6c6e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6c72:	3301      	adds	r3, #1
    6c74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    6c78:	4b6b      	ldr	r3, [pc, #428]	; (6e28 <bt_stream_legacy+0x2c0>)
    6c7a:	781b      	ldrb	r3, [r3, #0]
    6c7c:	461a      	mov	r2, r3
    6c7e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6c82:	429a      	cmp	r2, r3
    6c84:	dce6      	bgt.n	6c54 <bt_stream_legacy+0xec>
		{
			rssi_sum += (int8_t)(cc2400_get(RSSI) >> 8);
		}
	
		clkn_legacy = clkn;
    6c86:	4b69      	ldr	r3, [pc, #420]	; (6e2c <bt_stream_legacy+0x2c4>)
    6c88:	681b      	ldr	r3, [r3, #0]
    6c8a:	4a69      	ldr	r2, [pc, #420]	; (6e30 <bt_stream_legacy+0x2c8>)
    6c8c:	6013      	str	r3, [r2, #0]
		while (!rx_tc);
    6c8e:	bf00      	nop
    6c90:	4b68      	ldr	r3, [pc, #416]	; (6e34 <bt_stream_legacy+0x2cc>)
    6c92:	681b      	ldr	r3, [r3, #0]
    6c94:	2b00      	cmp	r3, #0
    6c96:	d0fb      	beq.n	6c90 <bt_stream_legacy+0x128>
	
		RXLED_SET;
    6c98:	4b67      	ldr	r3, [pc, #412]	; (6e38 <bt_stream_legacy+0x2d0>)
    6c9a:	2210      	movs	r2, #16
    6c9c:	601a      	str	r2, [r3, #0]
		if (rx_err) {
    6c9e:	4b67      	ldr	r3, [pc, #412]	; (6e3c <bt_stream_legacy+0x2d4>)
    6ca0:	681b      	ldr	r3, [r3, #0]
    6ca2:	2b00      	cmp	r3, #0
    6ca4:	d007      	beq.n	6cb6 <bt_stream_legacy+0x14e>
		status |= DMA_ERROR;
    6ca6:	4b66      	ldr	r3, [pc, #408]	; (6e40 <bt_stream_legacy+0x2d8>)
    6ca8:	781b      	ldrb	r3, [r3, #0]
    6caa:	b2db      	uxtb	r3, r3
    6cac:	f043 0302 	orr.w	r3, r3, #2
    6cb0:	b2da      	uxtb	r2, r3
    6cb2:	4b63      	ldr	r3, [pc, #396]	; (6e40 <bt_stream_legacy+0x2d8>)
    6cb4:	701a      	strb	r2, [r3, #0]
		}	
		if (rx_tc > 1)
    6cb6:	4b5f      	ldr	r3, [pc, #380]	; (6e34 <bt_stream_legacy+0x2cc>)
    6cb8:	681b      	ldr	r3, [r3, #0]
    6cba:	2b01      	cmp	r3, #1
    6cbc:	d907      	bls.n	6cce <bt_stream_legacy+0x166>
			status |= DMA_OVERFLOW;
    6cbe:	4b60      	ldr	r3, [pc, #384]	; (6e40 <bt_stream_legacy+0x2d8>)
    6cc0:	781b      	ldrb	r3, [r3, #0]
    6cc2:	b2db      	uxtb	r3, r3
    6cc4:	f043 0301 	orr.w	r3, r3, #1
    6cc8:	b2da      	uxtb	r2, r3
    6cca:	4b5d      	ldr	r3, [pc, #372]	; (6e40 <bt_stream_legacy+0x2d8>)
    6ccc:	701a      	strb	r2, [r3, #0]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    6cce:	1d3b      	adds	r3, r7, #4
    6cd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		packet[0] = le.access_address;
    6cd4:	4b5b      	ldr	r3, [pc, #364]	; (6e44 <bt_stream_legacy+0x2dc>)
    6cd6:	681b      	ldr	r3, [r3, #0]
    6cd8:	607b      	str	r3, [r7, #4]

                while (DMACC0Config & DMACCxConfig_E && rx_err == 0);
    6cda:	bf00      	nop
    6cdc:	4b5a      	ldr	r3, [pc, #360]	; (6e48 <bt_stream_legacy+0x2e0>)
    6cde:	681b      	ldr	r3, [r3, #0]
    6ce0:	f003 0301 	and.w	r3, r3, #1
    6ce4:	2b00      	cmp	r3, #0
    6ce6:	d003      	beq.n	6cf0 <bt_stream_legacy+0x188>
    6ce8:	4b54      	ldr	r3, [pc, #336]	; (6e3c <bt_stream_legacy+0x2d4>)
    6cea:	681b      	ldr	r3, [r3, #0]
    6cec:	2b00      	cmp	r3, #0
    6cee:	d0f5      	beq.n	6cdc <bt_stream_legacy+0x174>
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6cf0:	4a56      	ldr	r2, [pc, #344]	; (6e4c <bt_stream_legacy+0x2e4>)
    6cf2:	4b56      	ldr	r3, [pc, #344]	; (6e4c <bt_stream_legacy+0x2e4>)
    6cf4:	681b      	ldr	r3, [r3, #0]
    6cf6:	f023 0301 	bic.w	r3, r3, #1
    6cfa:	6013      	str	r3, [r2, #0]
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    6cfc:	4b48      	ldr	r3, [pc, #288]	; (6e20 <bt_stream_legacy+0x2b8>)
    6cfe:	881b      	ldrh	r3, [r3, #0]
    6d00:	b29b      	uxth	r3, r3
    6d02:	b2db      	uxtb	r3, r3
    6d04:	3b62      	subs	r3, #98	; 0x62
    6d06:	b2db      	uxtb	r3, r3
    6d08:	4618      	mov	r0, r3
    6d0a:	f002 fa57 	bl	91bc <btle_channel_index>
    6d0e:	4603      	mov	r3, r0
    6d10:	461a      	mov	r2, r3
    6d12:	4613      	mov	r3, r2
    6d14:	005b      	lsls	r3, r3, #1
    6d16:	4413      	add	r3, r2
    6d18:	011b      	lsls	r3, r3, #4
    6d1a:	4a4d      	ldr	r2, [pc, #308]	; (6e50 <bt_stream_legacy+0x2e8>)
    6d1c:	4413      	add	r3, r2
    6d1e:	67fb      	str	r3, [r7, #124]	; 0x7c
		for (i = 0; i < 44; i += 4) {
    6d20:	2300      	movs	r3, #0
    6d22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    6d26:	e03c      	b.n	6da2 <bt_stream_legacy+0x23a>
			uint32_t v = rxbuf1[i+0] << 24
    6d28:	4a4a      	ldr	r2, [pc, #296]	; (6e54 <bt_stream_legacy+0x2ec>)
    6d2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6d2e:	4413      	add	r3, r2
    6d30:	781b      	ldrb	r3, [r3, #0]
    6d32:	061a      	lsls	r2, r3, #24
                                          | rxbuf1[i+1] << 16
    6d34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6d38:	3301      	adds	r3, #1
    6d3a:	4946      	ldr	r1, [pc, #280]	; (6e54 <bt_stream_legacy+0x2ec>)
    6d3c:	5ccb      	ldrb	r3, [r1, r3]
    6d3e:	041b      	lsls	r3, r3, #16
    6d40:	431a      	orrs	r2, r3
                                      | rxbuf1[i+2] << 8
    6d42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6d46:	3302      	adds	r3, #2
    6d48:	4942      	ldr	r1, [pc, #264]	; (6e54 <bt_stream_legacy+0x2ec>)
    6d4a:	5ccb      	ldrb	r3, [r1, r3]
    6d4c:	021b      	lsls	r3, r3, #8
    6d4e:	4313      	orrs	r3, r2
                                          | rxbuf1[i+3] << 0;
    6d50:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    6d54:	3203      	adds	r2, #3
    6d56:	493f      	ldr	r1, [pc, #252]	; (6e54 <bt_stream_legacy+0x2ec>)
    6d58:	5c8a      	ldrb	r2, [r1, r2]
    6d5a:	4313      	orrs	r3, r2
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6d5c:	67bb      	str	r3, [r7, #120]	; 0x78
                                          | rxbuf1[i+1] << 16
                                      | rxbuf1[i+2] << 8
                                          | rxbuf1[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
    6d5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6d62:	2b00      	cmp	r3, #0
    6d64:	da00      	bge.n	6d68 <bt_stream_legacy+0x200>
    6d66:	3303      	adds	r3, #3
    6d68:	109b      	asrs	r3, r3, #2
    6d6a:	1c5c      	adds	r4, r3, #1
    6d6c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
    6d6e:	f003 fc4b 	bl	a608 <rbit>
    6d72:	4601      	mov	r1, r0
    6d74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6d78:	2b00      	cmp	r3, #0
    6d7a:	da00      	bge.n	6d7e <bt_stream_legacy+0x216>
    6d7c:	3303      	adds	r3, #3
    6d7e:	109b      	asrs	r3, r3, #2
    6d80:	009b      	lsls	r3, r3, #2
    6d82:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    6d84:	4413      	add	r3, r2
    6d86:	681b      	ldr	r3, [r3, #0]
    6d88:	ea81 0203 	eor.w	r2, r1, r3
    6d8c:	00a3      	lsls	r3, r4, #2
    6d8e:	f107 0188 	add.w	r1, r7, #136	; 0x88
    6d92:	440b      	add	r3, r1
    6d94:	f843 2c84 	str.w	r2, [r3, #-132]
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
    6d98:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6d9c:	3304      	adds	r3, #4
    6d9e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    6da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6da6:	2b2b      	cmp	r3, #43	; 0x2b
    6da8:	ddbe      	ble.n	6d28 <bt_stream_legacy+0x1c0>
                                      | eddystone[i+2] << 8
                                          | eddystone[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
		}
*/
		unsigned len = (p[5] & 0x3f) + 2;
    6daa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    6dae:	3305      	adds	r3, #5
    6db0:	781b      	ldrb	r3, [r3, #0]
    6db2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6db6:	3302      	adds	r3, #2
    6db8:	677b      	str	r3, [r7, #116]	; 0x74
		
		if (len > 39)
    6dba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    6dbc:	2b27      	cmp	r3, #39	; 0x27
    6dbe:	d900      	bls.n	6dc2 <bt_stream_legacy+0x25a>
			goto rx_flush;
    6dc0:	e057      	b.n	6e72 <bt_stream_legacy+0x30a>

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    6dc2:	4b20      	ldr	r3, [pc, #128]	; (6e44 <bt_stream_legacy+0x2dc>)
    6dc4:	68d9      	ldr	r1, [r3, #12]
    6dc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    6dca:	1d1a      	adds	r2, r3, #4
    6dcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    6dce:	4608      	mov	r0, r1
    6dd0:	4611      	mov	r1, r2
    6dd2:	461a      	mov	r2, r3
    6dd4:	f002 faf6 	bl	93c4 <btle_crcgen_lut>
    6dd8:	6738      	str	r0, [r7, #112]	; 0x70
		u32 wire_crc = (p[4+len+2] << 16)
    6dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    6ddc:	3306      	adds	r3, #6
    6dde:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    6de2:	4413      	add	r3, r2
    6de4:	781b      	ldrb	r3, [r3, #0]
    6de6:	041a      	lsls	r2, r3, #16
                                                 | (p[4+len+1] << 8)
    6de8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    6dea:	3305      	adds	r3, #5
    6dec:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    6df0:	440b      	add	r3, r1
    6df2:	781b      	ldrb	r3, [r3, #0]
    6df4:	021b      	lsls	r3, r3, #8
    6df6:	4313      	orrs	r3, r2
                                                 | (p[4+len+0] << 0);
    6df8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    6dfa:	3204      	adds	r2, #4
    6dfc:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    6e00:	440a      	add	r2, r1
    6e02:	7812      	ldrb	r2, [r2, #0]
    6e04:	4313      	orrs	r3, r2
		
		if (len > 39)
			goto rx_flush;

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
		u32 wire_crc = (p[4+len+2] << 16)
    6e06:	66fb      	str	r3, [r7, #108]	; 0x6c
                                                 | (p[4+len+1] << 8)
                                                 | (p[4+len+0] << 0);
                if (calc_crc != wire_crc) // skip packets with a bad CRC
    6e08:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    6e0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6e0c:	429a      	cmp	r2, r3
    6e0e:	d023      	beq.n	6e58 <bt_stream_legacy+0x2f0>
                        goto rx_flush;
    6e10:	e02f      	b.n	6e72 <bt_stream_legacy+0x30a>
    6e12:	bf00      	nop
    6e14:	2009c03c 	.word	0x2009c03c
    6e18:	8e89bed6 	.word	0x8e89bed6
    6e1c:	2009c058 	.word	0x2009c058
    6e20:	1000049c 	.word	0x1000049c
    6e24:	10000a4c 	.word	0x10000a4c
    6e28:	10000a49 	.word	0x10000a49
    6e2c:	10000bec 	.word	0x10000bec
    6e30:	10001034 	.word	0x10001034
    6e34:	10000b04 	.word	0x10000b04
    6e38:	2009c038 	.word	0x2009c038
    6e3c:	100010c8 	.word	0x100010c8
    6e40:	10000a48 	.word	0x10000a48
    6e44:	10000458 	.word	0x10000458
    6e48:	50004110 	.word	0x50004110
    6e4c:	40030024 	.word	0x40030024
    6e50:	0000c7b4 	.word	0x0000c7b4
    6e54:	10001094 	.word	0x10001094


		enqueue_legacy (BR_PACKET, (uint8_t*)packet);
    6e58:	1d3b      	adds	r3, r7, #4
    6e5a:	2000      	movs	r0, #0
    6e5c:	4619      	mov	r1, r3
    6e5e:	f7fd fbfd 	bl	465c <enqueue_legacy>
//		enqueue (BR_PACKET, (uint8_t*)rxbuf1);
		handle_usb(clkn);
    6e62:	4b28      	ldr	r3, [pc, #160]	; (6f04 <bt_stream_legacy+0x39c>)
    6e64:	681b      	ldr	r3, [r3, #0]
    6e66:	4618      	mov	r0, r3
    6e68:	f002 fbc8 	bl	95fc <handle_usb>
//		enqueue (MESSAGE, rssi_buf);
//		handle_usb(clkn);
		RXLED_CLR;
    6e6c:	4b26      	ldr	r3, [pc, #152]	; (6f08 <bt_stream_legacy+0x3a0>)
    6e6e:	2210      	movs	r2, #16
    6e70:	601a      	str	r2, [r3, #0]
	       
	rx_flush:
		cc2400_strobe (SRFOFF);
    6e72:	2064      	movs	r0, #100	; 0x64
    6e74:	f003 fe5c 	bl	ab30 <cc2400_strobe>
                while ((cc2400_status () & FS_LOCK));
    6e78:	bf00      	nop
    6e7a:	f003 fe4f 	bl	ab1c <cc2400_status>
    6e7e:	4603      	mov	r3, r0
    6e80:	f003 0304 	and.w	r3, r3, #4
    6e84:	2b00      	cmp	r3, #0
    6e86:	d1f8      	bne.n	6e7a <bt_stream_legacy+0x312>

                while (!(cc2400_status () & XOSC16M_STABLE));
    6e88:	bf00      	nop
    6e8a:	f003 fe47 	bl	ab1c <cc2400_status>
    6e8e:	4603      	mov	r3, r0
    6e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6e94:	2b00      	cmp	r3, #0
    6e96:	d0f8      	beq.n	6e8a <bt_stream_legacy+0x322>

                cc2400_strobe (SFSON);
    6e98:	2061      	movs	r0, #97	; 0x61
    6e9a:	f003 fe49 	bl	ab30 <cc2400_strobe>
                while (!(cc2400_status () & FS_LOCK));
    6e9e:	bf00      	nop
    6ea0:	f003 fe3c 	bl	ab1c <cc2400_status>
    6ea4:	4603      	mov	r3, r0
    6ea6:	f003 0304 	and.w	r3, r3, #4
    6eaa:	2b00      	cmp	r3, #0
    6eac:	d0f8      	beq.n	6ea0 <bt_stream_legacy+0x338>

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6eae:	4a17      	ldr	r2, [pc, #92]	; (6f0c <bt_stream_legacy+0x3a4>)
    6eb0:	4b16      	ldr	r3, [pc, #88]	; (6f0c <bt_stream_legacy+0x3a4>)
    6eb2:	681b      	ldr	r3, [r3, #0]
    6eb4:	f023 0301 	bic.w	r3, r3, #1
    6eb8:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    6eba:	e003      	b.n	6ec4 <bt_stream_legacy+0x35c>
                        u8 tmp = (u8)DIO_SSP_DR;
    6ebc:	4b14      	ldr	r3, [pc, #80]	; (6f10 <bt_stream_legacy+0x3a8>)
    6ebe:	681b      	ldr	r3, [r3, #0]
    6ec0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                cc2400_strobe (SFSON);
                while (!(cc2400_status () & FS_LOCK));

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    6ec4:	4b13      	ldr	r3, [pc, #76]	; (6f14 <bt_stream_legacy+0x3ac>)
    6ec6:	681b      	ldr	r3, [r3, #0]
    6ec8:	f003 0304 	and.w	r3, r3, #4
    6ecc:	2b00      	cmp	r3, #0
    6ece:	d1f5      	bne.n	6ebc <bt_stream_legacy+0x354>
                        u8 tmp = (u8)DIO_SSP_DR;
                }
		dma_init_le();
    6ed0:	f7fe fd96 	bl	5a00 <dma_init_le>
		dio_ssp_start();
    6ed4:	f7fe ff04 	bl	5ce0 <dio_ssp_start>
		
//              msleep(500);    
                cc2400_strobe (SRX);
    6ed8:	2062      	movs	r0, #98	; 0x62
    6eda:	f003 fe29 	bl	ab30 <cc2400_strobe>
		rx_tc = 0;
    6ede:	4b0e      	ldr	r3, [pc, #56]	; (6f18 <bt_stream_legacy+0x3b0>)
    6ee0:	2200      	movs	r2, #0
    6ee2:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6ee4:	4b0d      	ldr	r3, [pc, #52]	; (6f1c <bt_stream_legacy+0x3b4>)
    6ee6:	2200      	movs	r2, #0
    6ee8:	601a      	str	r2, [r3, #0]
	cc2400_set(FSDIV, channel - 1);
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    6eea:	4b0d      	ldr	r3, [pc, #52]	; (6f20 <bt_stream_legacy+0x3b8>)
    6eec:	781b      	ldrb	r3, [r3, #0]
    6eee:	b2db      	uxtb	r3, r3
    6ef0:	2b01      	cmp	r3, #1
    6ef2:	f43f ae9d 	beq.w	6c30 <bt_stream_legacy+0xc8>
		rx_tc = 0;
		rx_err = 0;
	 
	
	}
	dio_ssp_stop ();
    6ef6:	f7fe ff23 	bl	5d40 <dio_ssp_stop>
	cs_trigger_disable ();
    6efa:	f7fd fe01 	bl	4b00 <cs_trigger_disable>
}
    6efe:	378c      	adds	r7, #140	; 0x8c
    6f00:	46bd      	mov	sp, r7
    6f02:	bd90      	pop	{r4, r7, pc}
    6f04:	10000bec 	.word	0x10000bec
    6f08:	2009c03c 	.word	0x2009c03c
    6f0c:	40030024 	.word	0x40030024
    6f10:	40030008 	.word	0x40030008
    6f14:	4003000c 	.word	0x4003000c
    6f18:	10000b04 	.word	0x10000b04
    6f1c:	100010c8 	.word	0x100010c8
    6f20:	10000a3f 	.word	0x10000a3f

00006f24 <bt_stream_rx>:



// wpson
void bt_stream_rx()
{
    6f24:	b590      	push	{r4, r7, lr}
    6f26:	b0a3      	sub	sp, #140	; 0x8c
    6f28:	af00      	add	r7, sp, #0
//	TXLED_SET;
	RXLED_CLR;
    6f2a:	4bc0      	ldr	r3, [pc, #768]	; (722c <bt_stream_rx+0x308>)
    6f2c:	2210      	movs	r2, #16
    6f2e:	601a      	str	r2, [r3, #0]
	int i;
	
	u8 rssi_buf[DMA_SIZE];
	queue_init();
    6f30:	f002 fac4 	bl	94bc <queue_init>
	dio_ssp_init();
    6f34:	f003 fc68 	bl	a808 <dio_ssp_init>
	dma_init_le();
    6f38:	f7fe fd62 	bl	5a00 <dma_init_le>
	dio_ssp_start();
    6f3c:	f7fe fed0 	bl	5ce0 <dio_ssp_start>
	
	cc2400_set(MANAND, 0x7fff);
    6f40:	200d      	movs	r0, #13
    6f42:	f647 71ff 	movw	r1, #32767	; 0x7fff
    6f46:	f003 fd31 	bl	a9ac <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    6f4a:	2012      	movs	r0, #18
    6f4c:	f642 3122 	movw	r1, #11042	; 0x2b22
    6f50:	f003 fd2c 	bl	a9ac <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    6f54:	2014      	movs	r0, #20
    6f56:	f241 214b 	movw	r1, #4683	; 0x124b
    6f5a:	f003 fd27 	bl	a9ac <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    6f5e:	2020      	movs	r0, #32
    6f60:	f240 5161 	movw	r1, #1377	; 0x561
    6f64:	f003 fd22 	bl	a9ac <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    6f68:	2003      	movs	r0, #3
    6f6a:	2140      	movs	r1, #64	; 0x40
    6f6c:	f003 fd1e 	bl	a9ac <cc2400_set>

//	cc2400_set(SYNCH, 0xf9ae);
//	cc2400_set(SYNCL, 0x1584);
	
	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
    6f70:	48af      	ldr	r0, [pc, #700]	; (7230 <bt_stream_rx+0x30c>)
    6f72:	f003 fb49 	bl	a608 <rbit>
    6f76:	4603      	mov	r3, r0
    6f78:	b29b      	uxth	r3, r3
    6f7a:	202c      	movs	r0, #44	; 0x2c
    6f7c:	4619      	mov	r1, r3
    6f7e:	f003 fd15 	bl	a9ac <cc2400_set>
	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
    6f82:	48ab      	ldr	r0, [pc, #684]	; (7230 <bt_stream_rx+0x30c>)
    6f84:	f003 fb40 	bl	a608 <rbit>
    6f88:	4603      	mov	r3, r0
    6f8a:	0c1b      	lsrs	r3, r3, #16
    6f8c:	b29b      	uxth	r3, r3
    6f8e:	202d      	movs	r0, #45	; 0x2d
    6f90:	4619      	mov	r1, r3
    6f92:	f003 fd0b 	bl	a9ac <cc2400_set>
	
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6f96:	4ba7      	ldr	r3, [pc, #668]	; (7234 <bt_stream_rx+0x310>)
    6f98:	2280      	movs	r2, #128	; 0x80
    6f9a:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif

	while (!(cc2400_status() & XOSC16M_STABLE));
    6f9c:	bf00      	nop
    6f9e:	f003 fdbd 	bl	ab1c <cc2400_status>
    6fa2:	4603      	mov	r3, r0
    6fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6fa8:	2b00      	cmp	r3, #0
    6faa:	d0f8      	beq.n	6f9e <bt_stream_rx+0x7a>
	while ((cc2400_status() & FS_LOCK));
    6fac:	bf00      	nop
    6fae:	f003 fdb5 	bl	ab1c <cc2400_status>
    6fb2:	4603      	mov	r3, r0
    6fb4:	f003 0304 	and.w	r3, r3, #4
    6fb8:	2b00      	cmp	r3, #0
    6fba:	d1f8      	bne.n	6fae <bt_stream_rx+0x8a>

	cc2400_set(FSDIV, channel - 1);
    6fbc:	4b9e      	ldr	r3, [pc, #632]	; (7238 <bt_stream_rx+0x314>)
    6fbe:	881b      	ldrh	r3, [r3, #0]
    6fc0:	b29b      	uxth	r3, r3
    6fc2:	3b01      	subs	r3, #1
    6fc4:	b29b      	uxth	r3, r3
    6fc6:	2002      	movs	r0, #2
    6fc8:	4619      	mov	r1, r3
    6fca:	f003 fcef 	bl	a9ac <cc2400_set>
	cc2400_strobe(SFSON);
    6fce:	2061      	movs	r0, #97	; 0x61
    6fd0:	f003 fdae 	bl	ab30 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6fd4:	bf00      	nop
    6fd6:	f003 fda1 	bl	ab1c <cc2400_status>
    6fda:	4603      	mov	r3, r0
    6fdc:	f003 0304 	and.w	r3, r3, #4
    6fe0:	2b00      	cmp	r3, #0
    6fe2:	d0f8      	beq.n	6fd6 <bt_stream_rx+0xb2>
	cc2400_strobe(SRX);
    6fe4:	2062      	movs	r0, #98	; 0x62
    6fe6:	f003 fda3 	bl	ab30 <cc2400_strobe>
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    6fea:	e156      	b.n	729a <bt_stream_rx+0x376>
		
		while (!(cc2400_status () & SYNC_RECEIVED));
    6fec:	bf00      	nop
    6fee:	f003 fd95 	bl	ab1c <cc2400_status>
    6ff2:	4603      	mov	r3, r0
    6ff4:	f003 0310 	and.w	r3, r3, #16
    6ff8:	2b00      	cmp	r3, #0
    6ffa:	d0f8      	beq.n	6fee <bt_stream_rx+0xca>
                else
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
    6ffc:	4b8f      	ldr	r3, [pc, #572]	; (723c <bt_stream_rx+0x318>)
    6ffe:	2200      	movs	r2, #0
    7000:	601a      	str	r2, [r3, #0]
		rssi_count = 5;
    7002:	4b8f      	ldr	r3, [pc, #572]	; (7240 <bt_stream_rx+0x31c>)
    7004:	2205      	movs	r2, #5
    7006:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < rssi_count; i++)
    7008:	2300      	movs	r3, #0
    700a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    700e:	e011      	b.n	7034 <bt_stream_rx+0x110>
		{
			rssi_sum += (int8_t)(cc2400_get(RSSI) >> 8);
    7010:	2006      	movs	r0, #6
    7012:	f003 fcb5 	bl	a980 <cc2400_get>
    7016:	4603      	mov	r3, r0
    7018:	0a1b      	lsrs	r3, r3, #8
    701a:	b29b      	uxth	r3, r3
    701c:	b2db      	uxtb	r3, r3
    701e:	b25a      	sxtb	r2, r3
    7020:	4b86      	ldr	r3, [pc, #536]	; (723c <bt_stream_rx+0x318>)
    7022:	681b      	ldr	r3, [r3, #0]
    7024:	4413      	add	r3, r2
    7026:	4a85      	ldr	r2, [pc, #532]	; (723c <bt_stream_rx+0x318>)
    7028:	6013      	str	r3, [r2, #0]
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
		rssi_count = 5;
		for (i = 0; i < rssi_count; i++)
    702a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    702e:	3301      	adds	r3, #1
    7030:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    7034:	4b82      	ldr	r3, [pc, #520]	; (7240 <bt_stream_rx+0x31c>)
    7036:	781b      	ldrb	r3, [r3, #0]
    7038:	461a      	mov	r2, r3
    703a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    703e:	429a      	cmp	r2, r3
    7040:	dce6      	bgt.n	7010 <bt_stream_rx+0xec>
		{
			rssi_sum += (int8_t)(cc2400_get(RSSI) >> 8);
		}
	
		while (!rx_tc);
    7042:	bf00      	nop
    7044:	4b7f      	ldr	r3, [pc, #508]	; (7244 <bt_stream_rx+0x320>)
    7046:	681b      	ldr	r3, [r3, #0]
    7048:	2b00      	cmp	r3, #0
    704a:	d0fb      	beq.n	7044 <bt_stream_rx+0x120>
	
		RXLED_SET;
    704c:	4b7e      	ldr	r3, [pc, #504]	; (7248 <bt_stream_rx+0x324>)
    704e:	2210      	movs	r2, #16
    7050:	601a      	str	r2, [r3, #0]
		if (rx_err) {
    7052:	4b7e      	ldr	r3, [pc, #504]	; (724c <bt_stream_rx+0x328>)
    7054:	681b      	ldr	r3, [r3, #0]
    7056:	2b00      	cmp	r3, #0
    7058:	d007      	beq.n	706a <bt_stream_rx+0x146>
		status |= DMA_ERROR;
    705a:	4b7d      	ldr	r3, [pc, #500]	; (7250 <bt_stream_rx+0x32c>)
    705c:	781b      	ldrb	r3, [r3, #0]
    705e:	b2db      	uxtb	r3, r3
    7060:	f043 0302 	orr.w	r3, r3, #2
    7064:	b2da      	uxtb	r2, r3
    7066:	4b7a      	ldr	r3, [pc, #488]	; (7250 <bt_stream_rx+0x32c>)
    7068:	701a      	strb	r2, [r3, #0]
		}	
		if (rx_tc > 1)
    706a:	4b76      	ldr	r3, [pc, #472]	; (7244 <bt_stream_rx+0x320>)
    706c:	681b      	ldr	r3, [r3, #0]
    706e:	2b01      	cmp	r3, #1
    7070:	d907      	bls.n	7082 <bt_stream_rx+0x15e>
			status |= DMA_OVERFLOW;
    7072:	4b77      	ldr	r3, [pc, #476]	; (7250 <bt_stream_rx+0x32c>)
    7074:	781b      	ldrb	r3, [r3, #0]
    7076:	b2db      	uxtb	r3, r3
    7078:	f043 0301 	orr.w	r3, r3, #1
    707c:	b2da      	uxtb	r2, r3
    707e:	4b74      	ldr	r3, [pc, #464]	; (7250 <bt_stream_rx+0x32c>)
    7080:	701a      	strb	r2, [r3, #0]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    7082:	1d3b      	adds	r3, r7, #4
    7084:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		packet[0] = le.access_address;
    7088:	4b72      	ldr	r3, [pc, #456]	; (7254 <bt_stream_rx+0x330>)
    708a:	681b      	ldr	r3, [r3, #0]
    708c:	607b      	str	r3, [r7, #4]

                while (DMACC0Config & DMACCxConfig_E && rx_err == 0);
    708e:	bf00      	nop
    7090:	4b71      	ldr	r3, [pc, #452]	; (7258 <bt_stream_rx+0x334>)
    7092:	681b      	ldr	r3, [r3, #0]
    7094:	f003 0301 	and.w	r3, r3, #1
    7098:	2b00      	cmp	r3, #0
    709a:	d003      	beq.n	70a4 <bt_stream_rx+0x180>
    709c:	4b6b      	ldr	r3, [pc, #428]	; (724c <bt_stream_rx+0x328>)
    709e:	681b      	ldr	r3, [r3, #0]
    70a0:	2b00      	cmp	r3, #0
    70a2:	d0f5      	beq.n	7090 <bt_stream_rx+0x16c>
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    70a4:	4a6d      	ldr	r2, [pc, #436]	; (725c <bt_stream_rx+0x338>)
    70a6:	4b6d      	ldr	r3, [pc, #436]	; (725c <bt_stream_rx+0x338>)
    70a8:	681b      	ldr	r3, [r3, #0]
    70aa:	f023 0301 	bic.w	r3, r3, #1
    70ae:	6013      	str	r3, [r2, #0]
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    70b0:	4b61      	ldr	r3, [pc, #388]	; (7238 <bt_stream_rx+0x314>)
    70b2:	881b      	ldrh	r3, [r3, #0]
    70b4:	b29b      	uxth	r3, r3
    70b6:	b2db      	uxtb	r3, r3
    70b8:	3b62      	subs	r3, #98	; 0x62
    70ba:	b2db      	uxtb	r3, r3
    70bc:	4618      	mov	r0, r3
    70be:	f002 f87d 	bl	91bc <btle_channel_index>
    70c2:	4603      	mov	r3, r0
    70c4:	461a      	mov	r2, r3
    70c6:	4613      	mov	r3, r2
    70c8:	005b      	lsls	r3, r3, #1
    70ca:	4413      	add	r3, r2
    70cc:	011b      	lsls	r3, r3, #4
    70ce:	4a64      	ldr	r2, [pc, #400]	; (7260 <bt_stream_rx+0x33c>)
    70d0:	4413      	add	r3, r2
    70d2:	67fb      	str	r3, [r7, #124]	; 0x7c
		for (i = 0; i < 44; i += 4) {
    70d4:	2300      	movs	r3, #0
    70d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    70da:	e03c      	b.n	7156 <bt_stream_rx+0x232>
			uint32_t v = rxbuf1[i+0] << 24
    70dc:	4a61      	ldr	r2, [pc, #388]	; (7264 <bt_stream_rx+0x340>)
    70de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    70e2:	4413      	add	r3, r2
    70e4:	781b      	ldrb	r3, [r3, #0]
    70e6:	061a      	lsls	r2, r3, #24
                                          | rxbuf1[i+1] << 16
    70e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    70ec:	3301      	adds	r3, #1
    70ee:	495d      	ldr	r1, [pc, #372]	; (7264 <bt_stream_rx+0x340>)
    70f0:	5ccb      	ldrb	r3, [r1, r3]
    70f2:	041b      	lsls	r3, r3, #16
    70f4:	431a      	orrs	r2, r3
                                      | rxbuf1[i+2] << 8
    70f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    70fa:	3302      	adds	r3, #2
    70fc:	4959      	ldr	r1, [pc, #356]	; (7264 <bt_stream_rx+0x340>)
    70fe:	5ccb      	ldrb	r3, [r1, r3]
    7100:	021b      	lsls	r3, r3, #8
    7102:	4313      	orrs	r3, r2
                                          | rxbuf1[i+3] << 0;
    7104:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    7108:	3203      	adds	r2, #3
    710a:	4956      	ldr	r1, [pc, #344]	; (7264 <bt_stream_rx+0x340>)
    710c:	5c8a      	ldrb	r2, [r1, r2]
    710e:	4313      	orrs	r3, r2
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    7110:	67bb      	str	r3, [r7, #120]	; 0x78
                                          | rxbuf1[i+1] << 16
                                      | rxbuf1[i+2] << 8
                                          | rxbuf1[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
    7112:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    7116:	2b00      	cmp	r3, #0
    7118:	da00      	bge.n	711c <bt_stream_rx+0x1f8>
    711a:	3303      	adds	r3, #3
    711c:	109b      	asrs	r3, r3, #2
    711e:	1c5c      	adds	r4, r3, #1
    7120:	6fb8      	ldr	r0, [r7, #120]	; 0x78
    7122:	f003 fa71 	bl	a608 <rbit>
    7126:	4601      	mov	r1, r0
    7128:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    712c:	2b00      	cmp	r3, #0
    712e:	da00      	bge.n	7132 <bt_stream_rx+0x20e>
    7130:	3303      	adds	r3, #3
    7132:	109b      	asrs	r3, r3, #2
    7134:	009b      	lsls	r3, r3, #2
    7136:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    7138:	4413      	add	r3, r2
    713a:	681b      	ldr	r3, [r3, #0]
    713c:	ea81 0203 	eor.w	r2, r1, r3
    7140:	00a3      	lsls	r3, r4, #2
    7142:	f107 0188 	add.w	r1, r7, #136	; 0x88
    7146:	440b      	add	r3, r1
    7148:	f843 2c84 	str.w	r2, [r3, #-132]
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
    714c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    7150:	3304      	adds	r3, #4
    7152:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    7156:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    715a:	2b2b      	cmp	r3, #43	; 0x2b
    715c:	ddbe      	ble.n	70dc <bt_stream_rx+0x1b8>
                                      | eddystone[i+2] << 8
                                          | eddystone[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
		}
*/
		unsigned len = (p[5] & 0x3f) + 2;
    715e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    7162:	3305      	adds	r3, #5
    7164:	781b      	ldrb	r3, [r3, #0]
    7166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    716a:	3302      	adds	r3, #2
    716c:	677b      	str	r3, [r7, #116]	; 0x74
		
		if (len > 39)
    716e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7170:	2b27      	cmp	r3, #39	; 0x27
    7172:	d900      	bls.n	7176 <bt_stream_rx+0x252>
			goto rx_flush;
    7174:	e034      	b.n	71e0 <bt_stream_rx+0x2bc>

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    7176:	4b37      	ldr	r3, [pc, #220]	; (7254 <bt_stream_rx+0x330>)
    7178:	68d9      	ldr	r1, [r3, #12]
    717a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    717e:	1d1a      	adds	r2, r3, #4
    7180:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7182:	4608      	mov	r0, r1
    7184:	4611      	mov	r1, r2
    7186:	461a      	mov	r2, r3
    7188:	f002 f91c 	bl	93c4 <btle_crcgen_lut>
    718c:	6738      	str	r0, [r7, #112]	; 0x70
		u32 wire_crc = (p[4+len+2] << 16)
    718e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7190:	3306      	adds	r3, #6
    7192:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    7196:	4413      	add	r3, r2
    7198:	781b      	ldrb	r3, [r3, #0]
    719a:	041a      	lsls	r2, r3, #16
                                                 | (p[4+len+1] << 8)
    719c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    719e:	3305      	adds	r3, #5
    71a0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    71a4:	440b      	add	r3, r1
    71a6:	781b      	ldrb	r3, [r3, #0]
    71a8:	021b      	lsls	r3, r3, #8
    71aa:	4313      	orrs	r3, r2
                                                 | (p[4+len+0] << 0);
    71ac:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    71ae:	3204      	adds	r2, #4
    71b0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    71b4:	440a      	add	r2, r1
    71b6:	7812      	ldrb	r2, [r2, #0]
    71b8:	4313      	orrs	r3, r2
		
		if (len > 39)
			goto rx_flush;

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
		u32 wire_crc = (p[4+len+2] << 16)
    71ba:	66fb      	str	r3, [r7, #108]	; 0x6c
                                                 | (p[4+len+1] << 8)
                                                 | (p[4+len+0] << 0);
                if (calc_crc != wire_crc) // skip packets with a bad CRC
    71bc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    71be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    71c0:	429a      	cmp	r2, r3
    71c2:	d000      	beq.n	71c6 <bt_stream_rx+0x2a2>
                        goto rx_flush;
    71c4:	e00c      	b.n	71e0 <bt_stream_rx+0x2bc>


		enqueue (BR_PACKET, (uint8_t*)packet);
    71c6:	1d3b      	adds	r3, r7, #4
    71c8:	2000      	movs	r0, #0
    71ca:	4619      	mov	r1, r3
    71cc:	f7fd f97c 	bl	44c8 <enqueue>
//		enqueue (BR_PACKET, (uint8_t*)rxbuf1);
		handle_usb(clkn);
    71d0:	4b25      	ldr	r3, [pc, #148]	; (7268 <bt_stream_rx+0x344>)
    71d2:	681b      	ldr	r3, [r3, #0]
    71d4:	4618      	mov	r0, r3
    71d6:	f002 fa11 	bl	95fc <handle_usb>
//		enqueue (MESSAGE, rssi_buf);
//		handle_usb(clkn);
		RXLED_CLR;
    71da:	4b14      	ldr	r3, [pc, #80]	; (722c <bt_stream_rx+0x308>)
    71dc:	2210      	movs	r2, #16
    71de:	601a      	str	r2, [r3, #0]
	       
	rx_flush:
		cc2400_strobe (SRFOFF);
    71e0:	2064      	movs	r0, #100	; 0x64
    71e2:	f003 fca5 	bl	ab30 <cc2400_strobe>
                while ((cc2400_status () & FS_LOCK));
    71e6:	bf00      	nop
    71e8:	f003 fc98 	bl	ab1c <cc2400_status>
    71ec:	4603      	mov	r3, r0
    71ee:	f003 0304 	and.w	r3, r3, #4
    71f2:	2b00      	cmp	r3, #0
    71f4:	d1f8      	bne.n	71e8 <bt_stream_rx+0x2c4>

                while (!(cc2400_status () & XOSC16M_STABLE));
    71f6:	bf00      	nop
    71f8:	f003 fc90 	bl	ab1c <cc2400_status>
    71fc:	4603      	mov	r3, r0
    71fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7202:	2b00      	cmp	r3, #0
    7204:	d0f8      	beq.n	71f8 <bt_stream_rx+0x2d4>

                cc2400_strobe (SFSON);
    7206:	2061      	movs	r0, #97	; 0x61
    7208:	f003 fc92 	bl	ab30 <cc2400_strobe>
                while (!(cc2400_status () & FS_LOCK));
    720c:	bf00      	nop
    720e:	f003 fc85 	bl	ab1c <cc2400_status>
    7212:	4603      	mov	r3, r0
    7214:	f003 0304 	and.w	r3, r3, #4
    7218:	2b00      	cmp	r3, #0
    721a:	d0f8      	beq.n	720e <bt_stream_rx+0x2ea>

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    721c:	4a0f      	ldr	r2, [pc, #60]	; (725c <bt_stream_rx+0x338>)
    721e:	4b0f      	ldr	r3, [pc, #60]	; (725c <bt_stream_rx+0x338>)
    7220:	681b      	ldr	r3, [r3, #0]
    7222:	f023 0301 	bic.w	r3, r3, #1
    7226:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    7228:	e024      	b.n	7274 <bt_stream_rx+0x350>
    722a:	bf00      	nop
    722c:	2009c03c 	.word	0x2009c03c
    7230:	8e89bed6 	.word	0x8e89bed6
    7234:	2009c058 	.word	0x2009c058
    7238:	1000049c 	.word	0x1000049c
    723c:	10000a4c 	.word	0x10000a4c
    7240:	10000a49 	.word	0x10000a49
    7244:	10000b04 	.word	0x10000b04
    7248:	2009c038 	.word	0x2009c038
    724c:	100010c8 	.word	0x100010c8
    7250:	10000a48 	.word	0x10000a48
    7254:	10000458 	.word	0x10000458
    7258:	50004110 	.word	0x50004110
    725c:	40030024 	.word	0x40030024
    7260:	0000c7b4 	.word	0x0000c7b4
    7264:	10001094 	.word	0x10001094
    7268:	10000bec 	.word	0x10000bec
                        u8 tmp = (u8)DIO_SSP_DR;
    726c:	4b11      	ldr	r3, [pc, #68]	; (72b4 <bt_stream_rx+0x390>)
    726e:	681b      	ldr	r3, [r3, #0]
    7270:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                cc2400_strobe (SFSON);
                while (!(cc2400_status () & FS_LOCK));

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    7274:	4b10      	ldr	r3, [pc, #64]	; (72b8 <bt_stream_rx+0x394>)
    7276:	681b      	ldr	r3, [r3, #0]
    7278:	f003 0304 	and.w	r3, r3, #4
    727c:	2b00      	cmp	r3, #0
    727e:	d1f5      	bne.n	726c <bt_stream_rx+0x348>
                        u8 tmp = (u8)DIO_SSP_DR;
                }
		dma_init_le();
    7280:	f7fe fbbe 	bl	5a00 <dma_init_le>
		dio_ssp_start();
    7284:	f7fe fd2c 	bl	5ce0 <dio_ssp_start>
		
//              msleep(500);    
                cc2400_strobe (SRX);
    7288:	2062      	movs	r0, #98	; 0x62
    728a:	f003 fc51 	bl	ab30 <cc2400_strobe>
		rx_tc = 0;
    728e:	4b0b      	ldr	r3, [pc, #44]	; (72bc <bt_stream_rx+0x398>)
    7290:	2200      	movs	r2, #0
    7292:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    7294:	4b0a      	ldr	r3, [pc, #40]	; (72c0 <bt_stream_rx+0x39c>)
    7296:	2200      	movs	r2, #0
    7298:	601a      	str	r2, [r3, #0]
	cc2400_set(FSDIV, channel - 1);
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    729a:	4b0a      	ldr	r3, [pc, #40]	; (72c4 <bt_stream_rx+0x3a0>)
    729c:	781b      	ldrb	r3, [r3, #0]
    729e:	b2db      	uxtb	r3, r3
    72a0:	2b01      	cmp	r3, #1
    72a2:	f43f aea3 	beq.w	6fec <bt_stream_rx+0xc8>
		rx_tc = 0;
		rx_err = 0;
	 
	
	}
	dio_ssp_stop ();
    72a6:	f7fe fd4b 	bl	5d40 <dio_ssp_stop>
	cs_trigger_disable ();
    72aa:	f7fd fc29 	bl	4b00 <cs_trigger_disable>
}
    72ae:	378c      	adds	r7, #140	; 0x8c
    72b0:	46bd      	mov	sp, r7
    72b2:	bd90      	pop	{r4, r7, pc}
    72b4:	40030008 	.word	0x40030008
    72b8:	4003000c 	.word	0x4003000c
    72bc:	10000b04 	.word	0x10000b04
    72c0:	100010c8 	.word	0x100010c8
    72c4:	10000a3f 	.word	0x10000a3f

000072c8 <le_set_access_address>:



/* set LE access address */
static void le_set_access_address(u32 aa) {
    72c8:	b580      	push	{r7, lr}
    72ca:	b084      	sub	sp, #16
    72cc:	af00      	add	r7, sp, #0
    72ce:	6078      	str	r0, [r7, #4]
	u32 aa_rev;

	le.access_address = aa;
    72d0:	4a09      	ldr	r2, [pc, #36]	; (72f8 <le_set_access_address+0x30>)
    72d2:	687b      	ldr	r3, [r7, #4]
    72d4:	6013      	str	r3, [r2, #0]
	aa_rev = rbit(aa);
    72d6:	6878      	ldr	r0, [r7, #4]
    72d8:	f003 f996 	bl	a608 <rbit>
    72dc:	60f8      	str	r0, [r7, #12]
	le.syncl = aa_rev & 0xffff;
    72de:	68fb      	ldr	r3, [r7, #12]
    72e0:	b29a      	uxth	r2, r3
    72e2:	4b05      	ldr	r3, [pc, #20]	; (72f8 <le_set_access_address+0x30>)
    72e4:	80da      	strh	r2, [r3, #6]
	le.synch = aa_rev >> 16;
    72e6:	68fb      	ldr	r3, [r7, #12]
    72e8:	0c1b      	lsrs	r3, r3, #16
    72ea:	b29a      	uxth	r2, r3
    72ec:	4b02      	ldr	r3, [pc, #8]	; (72f8 <le_set_access_address+0x30>)
    72ee:	809a      	strh	r2, [r3, #4]
}
    72f0:	3710      	adds	r7, #16
    72f2:	46bd      	mov	sp, r7
    72f4:	bd80      	pop	{r7, pc}
    72f6:	bf00      	nop
    72f8:	10000458 	.word	0x10000458

000072fc <reset_le>:

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    72fc:	b580      	push	{r7, lr}
    72fe:	af00      	add	r7, sp, #0
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    7300:	481f      	ldr	r0, [pc, #124]	; (7380 <reset_le+0x84>)
    7302:	f7ff ffe1 	bl	72c8 <le_set_access_address>
	le.crc_init  = 0x555555;	       // advertising channel CRCInit
    7306:	4b1f      	ldr	r3, [pc, #124]	; (7384 <reset_le+0x88>)
    7308:	4a1f      	ldr	r2, [pc, #124]	; (7388 <reset_le+0x8c>)
    730a:	609a      	str	r2, [r3, #8]
	le.crc_init_reversed = 0xAAAAAA;
    730c:	4b1d      	ldr	r3, [pc, #116]	; (7384 <reset_le+0x88>)
    730e:	4a1f      	ldr	r2, [pc, #124]	; (738c <reset_le+0x90>)
    7310:	60da      	str	r2, [r3, #12]
	le.crc_verify = 1;
    7312:	4b1c      	ldr	r3, [pc, #112]	; (7384 <reset_le+0x88>)
    7314:	2201      	movs	r2, #1
    7316:	611a      	str	r2, [r3, #16]
	le.last_packet = 0;
    7318:	4b1a      	ldr	r3, [pc, #104]	; (7384 <reset_le+0x88>)
    731a:	2200      	movs	r2, #0
    731c:	641a      	str	r2, [r3, #64]	; 0x40

	le.link_state = LINK_INACTIVE;
    731e:	4b19      	ldr	r3, [pc, #100]	; (7384 <reset_le+0x88>)
    7320:	2200      	movs	r2, #0
    7322:	751a      	strb	r2, [r3, #20]

	le.channel_idx = 0;
    7324:	4b17      	ldr	r3, [pc, #92]	; (7384 <reset_le+0x88>)
    7326:	2200      	movs	r2, #0
    7328:	755a      	strb	r2, [r3, #21]
	le.channel_increment = 0;
    732a:	4b16      	ldr	r3, [pc, #88]	; (7384 <reset_le+0x88>)
    732c:	2200      	movs	r2, #0
    732e:	759a      	strb	r2, [r3, #22]

	le.conn_epoch = 0;
    7330:	4b14      	ldr	r3, [pc, #80]	; (7384 <reset_le+0x88>)
    7332:	2200      	movs	r2, #0
    7334:	619a      	str	r2, [r3, #24]
	le.interval_timer = 0;
    7336:	4b13      	ldr	r3, [pc, #76]	; (7384 <reset_le+0x88>)
    7338:	2200      	movs	r2, #0
    733a:	839a      	strh	r2, [r3, #28]
	le.conn_interval = 0;
    733c:	4b11      	ldr	r3, [pc, #68]	; (7384 <reset_le+0x88>)
    733e:	2200      	movs	r2, #0
    7340:	83da      	strh	r2, [r3, #30]
	le.conn_interval = 0;
    7342:	4b10      	ldr	r3, [pc, #64]	; (7384 <reset_le+0x88>)
    7344:	2200      	movs	r2, #0
    7346:	83da      	strh	r2, [r3, #30]
	le.conn_count = 0;
    7348:	4b0e      	ldr	r3, [pc, #56]	; (7384 <reset_le+0x88>)
    734a:	2200      	movs	r2, #0
    734c:	841a      	strh	r2, [r3, #32]

	le.win_size = 0;
    734e:	4b0d      	ldr	r3, [pc, #52]	; (7384 <reset_le+0x88>)
    7350:	2200      	movs	r2, #0
    7352:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	le.win_offset = 0;
    7356:	4b0b      	ldr	r3, [pc, #44]	; (7384 <reset_le+0x88>)
    7358:	2200      	movs	r2, #0
    735a:	849a      	strh	r2, [r3, #36]	; 0x24

	le.update_pending = 0;
    735c:	4b09      	ldr	r3, [pc, #36]	; (7384 <reset_le+0x88>)
    735e:	2200      	movs	r2, #0
    7360:	629a      	str	r2, [r3, #40]	; 0x28
	le.update_instant = 0;
    7362:	4b08      	ldr	r3, [pc, #32]	; (7384 <reset_le+0x88>)
    7364:	2200      	movs	r2, #0
    7366:	859a      	strh	r2, [r3, #44]	; 0x2c
	le.interval_update = 0;
    7368:	4b06      	ldr	r3, [pc, #24]	; (7384 <reset_le+0x88>)
    736a:	2200      	movs	r2, #0
    736c:	85da      	strh	r2, [r3, #46]	; 0x2e
	le.win_size_update = 0;
    736e:	4b05      	ldr	r3, [pc, #20]	; (7384 <reset_le+0x88>)
    7370:	2200      	movs	r2, #0
    7372:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	le.win_offset_update;

	do_hop = 0;
    7376:	4b06      	ldr	r3, [pc, #24]	; (7390 <reset_le+0x94>)
    7378:	2200      	movs	r2, #0
    737a:	701a      	strb	r2, [r3, #0]
}
    737c:	bd80      	pop	{r7, pc}
    737e:	bf00      	nop
    7380:	8e89bed6 	.word	0x8e89bed6
    7384:	10000458 	.word	0x10000458
    7388:	00555555 	.word	0x00555555
    738c:	00aaaaaa 	.word	0x00aaaaaa
    7390:	1000097d 	.word	0x1000097d

00007394 <reset_le_promisc>:

// reset LE Promisc state
void reset_le_promisc(void) {
    7394:	b580      	push	{r7, lr}
    7396:	af00      	add	r7, sp, #0
	memset(&le_promisc, 0, sizeof(le_promisc));
    7398:	4805      	ldr	r0, [pc, #20]	; (73b0 <reset_le_promisc+0x1c>)
    739a:	2100      	movs	r1, #0
    739c:	f44f 7284 	mov.w	r2, #264	; 0x108
    73a0:	f7fc feea 	bl	4178 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    73a4:	4b02      	ldr	r3, [pc, #8]	; (73b0 <reset_le_promisc+0x1c>)
    73a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    73aa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    73ae:	bd80      	pop	{r7, pc}
    73b0:	10000bf8 	.word	0x10000bf8

000073b4 <bt_generic_le>:

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    73b4:	b580      	push	{r7, lr}
    73b6:	b088      	sub	sp, #32
    73b8:	af00      	add	r7, sp, #0
    73ba:	4603      	mov	r3, r0
    73bc:	71fb      	strb	r3, [r7, #7]
	u8 *tmp = NULL;
    73be:	2300      	movs	r3, #0
    73c0:	60fb      	str	r3, [r7, #12]
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    73c2:	4ba4      	ldr	r3, [pc, #656]	; (7654 <bt_generic_le+0x2a0>)
    73c4:	2201      	movs	r2, #1
    73c6:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    73c8:	4aa3      	ldr	r2, [pc, #652]	; (7658 <bt_generic_le+0x2a4>)
    73ca:	79fb      	ldrb	r3, [r7, #7]
    73cc:	7013      	strb	r3, [r2, #0]

	reset_le();
    73ce:	f7ff ff95 	bl	72fc <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    73d2:	4ba2      	ldr	r3, [pc, #648]	; (765c <bt_generic_le+0x2a8>)
    73d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    73d8:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    73da:	4ba1      	ldr	r3, [pc, #644]	; (7660 <bt_generic_le+0x2ac>)
    73dc:	2210      	movs	r2, #16
    73de:	601a      	str	r2, [r3, #0]

	queue_init();
    73e0:	f002 f86c 	bl	94bc <queue_init>
	dio_ssp_init();
    73e4:	f003 fa10 	bl	a808 <dio_ssp_init>
	dma_init();
    73e8:	f7fe fa4a 	bl	5880 <dma_init>
	dio_ssp_start();
    73ec:	f7fe fc78 	bl	5ce0 <dio_ssp_start>
	cc2400_rx();
    73f0:	f7fe fd32 	bl	5e58 <cc2400_rx>

	cs_trigger_enable();
    73f4:	f7fd fb66 	bl	4ac4 <cs_trigger_enable>

	hold = 0;
    73f8:	2300      	movs	r3, #0
    73fa:	77fb      	strb	r3, [r7, #31]

	while (requested_mode == active_mode) {
    73fc:	e115      	b.n	762a <bt_generic_le+0x276>
		if (requested_channel != 0) {
    73fe:	4b99      	ldr	r3, [pc, #612]	; (7664 <bt_generic_le+0x2b0>)
    7400:	881b      	ldrh	r3, [r3, #0]
    7402:	b29b      	uxth	r3, r3
    7404:	2b00      	cmp	r3, #0
    7406:	d024      	beq.n	7452 <bt_generic_le+0x9e>
			cc2400_strobe(SRFOFF);
    7408:	2064      	movs	r0, #100	; 0x64
    740a:	f003 fb91 	bl	ab30 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    740e:	bf00      	nop
    7410:	f003 fb84 	bl	ab1c <cc2400_status>
    7414:	4603      	mov	r3, r0
    7416:	f003 0304 	and.w	r3, r3, #4
    741a:	2b00      	cmp	r3, #0
    741c:	d1f8      	bne.n	7410 <bt_generic_le+0x5c>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    741e:	4b92      	ldr	r3, [pc, #584]	; (7668 <bt_generic_le+0x2b4>)
    7420:	881b      	ldrh	r3, [r3, #0]
    7422:	b29b      	uxth	r3, r3
    7424:	3b01      	subs	r3, #1
    7426:	b29b      	uxth	r3, r3
    7428:	2002      	movs	r0, #2
    742a:	4619      	mov	r1, r3
    742c:	f003 fabe 	bl	a9ac <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    7430:	2061      	movs	r0, #97	; 0x61
    7432:	f003 fb7d 	bl	ab30 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    7436:	bf00      	nop
    7438:	f003 fb70 	bl	ab1c <cc2400_status>
    743c:	4603      	mov	r3, r0
    743e:	f003 0304 	and.w	r3, r3, #4
    7442:	2b00      	cmp	r3, #0
    7444:	d0f8      	beq.n	7438 <bt_generic_le+0x84>

			/* RX mode */
			cc2400_strobe(SRX);
    7446:	2062      	movs	r0, #98	; 0x62
    7448:	f003 fb72 	bl	ab30 <cc2400_strobe>

			requested_channel = 0;
    744c:	4b85      	ldr	r3, [pc, #532]	; (7664 <bt_generic_le+0x2b0>)
    744e:	2200      	movs	r2, #0
    7450:	801a      	strh	r2, [r3, #0]
		}

		if (do_hop) {
    7452:	4b86      	ldr	r3, [pc, #536]	; (766c <bt_generic_le+0x2b8>)
    7454:	781b      	ldrb	r3, [r3, #0]
    7456:	b2db      	uxtb	r3, r3
    7458:	2b00      	cmp	r3, #0
    745a:	d002      	beq.n	7462 <bt_generic_le+0xae>
			hop();
    745c:	f7fe ff92 	bl	6384 <hop>
    7460:	e003      	b.n	746a <bt_generic_le+0xb6>
		} else {
			TXLED_CLR;
    7462:	4b7f      	ldr	r3, [pc, #508]	; (7660 <bt_generic_le+0x2ac>)
    7464:	f44f 7280 	mov.w	r2, #256	; 0x100
    7468:	601a      	str	r2, [r3, #0]
		}

		RXLED_CLR;
    746a:	4b7d      	ldr	r3, [pc, #500]	; (7660 <bt_generic_le+0x2ac>)
    746c:	2210      	movs	r2, #16
    746e:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    7470:	f7fc ff48 	bl	4304 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    7474:	2380      	movs	r3, #128	; 0x80
    7476:	74bb      	strb	r3, [r7, #18]
		while ((rx_tc == 0) && (rx_err == 0))
    7478:	e022      	b.n	74c0 <bt_generic_le+0x10c>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    747a:	2006      	movs	r0, #6
    747c:	f003 fa80 	bl	a980 <cc2400_get>
    7480:	4603      	mov	r3, r0
    7482:	0a1b      	lsrs	r3, r3, #8
    7484:	b29b      	uxth	r3, r3
    7486:	74fb      	strb	r3, [r7, #19]
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    7488:	4b79      	ldr	r3, [pc, #484]	; (7670 <bt_generic_le+0x2bc>)
    748a:	781b      	ldrb	r3, [r3, #0]
    748c:	b2db      	uxtb	r3, r3
    748e:	2b00      	cmp	r3, #0
    7490:	d011      	beq.n	74b6 <bt_generic_le+0x102>
    7492:	f997 3012 	ldrsb.w	r3, [r7, #18]
    7496:	f113 0f80 	cmn.w	r3, #128	; 0x80
    749a:	d10c      	bne.n	74b6 <bt_generic_le+0x102>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    749c:	4b75      	ldr	r3, [pc, #468]	; (7674 <bt_generic_le+0x2c0>)
    749e:	781b      	ldrb	r3, [r3, #0]
    74a0:	b25b      	sxtb	r3, r3
    74a2:	f103 0236 	add.w	r2, r3, #54	; 0x36
    74a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
    74aa:	4293      	cmp	r3, r2
    74ac:	bfb8      	it	lt
    74ae:	4613      	movlt	r3, r2
    74b0:	74fb      	strb	r3, [r7, #19]
				rssi_at_trigger = rssi;
    74b2:	7cfb      	ldrb	r3, [r7, #19]
    74b4:	74bb      	strb	r3, [r7, #18]
			}
			rssi_add(rssi);
    74b6:	f997 3013 	ldrsb.w	r3, [r7, #19]
    74ba:	4618      	mov	r0, r3
    74bc:	f7fc ff3c 	bl	4338 <rssi_add>
		RXLED_CLR;

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
    74c0:	4b6d      	ldr	r3, [pc, #436]	; (7678 <bt_generic_le+0x2c4>)
    74c2:	681b      	ldr	r3, [r3, #0]
    74c4:	2b00      	cmp	r3, #0
    74c6:	d103      	bne.n	74d0 <bt_generic_le+0x11c>
    74c8:	4b6c      	ldr	r3, [pc, #432]	; (767c <bt_generic_le+0x2c8>)
    74ca:	681b      	ldr	r3, [r3, #0]
    74cc:	2b00      	cmp	r3, #0
    74ce:	d0d4      	beq.n	747a <bt_generic_le+0xc6>
			}
			rssi_add(rssi);
		}

		/* Keep buffer swapping in sync with DMA. */
		if (rx_tc % 2) {
    74d0:	4b69      	ldr	r3, [pc, #420]	; (7678 <bt_generic_le+0x2c4>)
    74d2:	681b      	ldr	r3, [r3, #0]
    74d4:	f003 0301 	and.w	r3, r3, #1
    74d8:	2b00      	cmp	r3, #0
    74da:	d009      	beq.n	74f0 <bt_generic_le+0x13c>
			tmp = active_rxbuf;
    74dc:	4b68      	ldr	r3, [pc, #416]	; (7680 <bt_generic_le+0x2cc>)
    74de:	681b      	ldr	r3, [r3, #0]
    74e0:	60fb      	str	r3, [r7, #12]
			active_rxbuf = idle_rxbuf;
    74e2:	4b68      	ldr	r3, [pc, #416]	; (7684 <bt_generic_le+0x2d0>)
    74e4:	681b      	ldr	r3, [r3, #0]
    74e6:	4a66      	ldr	r2, [pc, #408]	; (7680 <bt_generic_le+0x2cc>)
    74e8:	6013      	str	r3, [r2, #0]
			idle_rxbuf = tmp;
    74ea:	4a66      	ldr	r2, [pc, #408]	; (7684 <bt_generic_le+0x2d0>)
    74ec:	68fb      	ldr	r3, [r7, #12]
    74ee:	6013      	str	r3, [r2, #0]
		}

		if (rx_err) {
    74f0:	4b62      	ldr	r3, [pc, #392]	; (767c <bt_generic_le+0x2c8>)
    74f2:	681b      	ldr	r3, [r3, #0]
    74f4:	2b00      	cmp	r3, #0
    74f6:	d007      	beq.n	7508 <bt_generic_le+0x154>
			status |= DMA_ERROR;
    74f8:	4b63      	ldr	r3, [pc, #396]	; (7688 <bt_generic_le+0x2d4>)
    74fa:	781b      	ldrb	r3, [r3, #0]
    74fc:	b2db      	uxtb	r3, r3
    74fe:	f043 0302 	orr.w	r3, r3, #2
    7502:	b2da      	uxtb	r2, r3
    7504:	4b60      	ldr	r3, [pc, #384]	; (7688 <bt_generic_le+0x2d4>)
    7506:	701a      	strb	r2, [r3, #0]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    7508:	4b5b      	ldr	r3, [pc, #364]	; (7678 <bt_generic_le+0x2c4>)
    750a:	681b      	ldr	r3, [r3, #0]
    750c:	2b00      	cmp	r3, #0
    750e:	d100      	bne.n	7512 <bt_generic_le+0x15e>
			goto rx_continue;
    7510:	e085      	b.n	761e <bt_generic_le+0x26a>

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    7512:	4b59      	ldr	r3, [pc, #356]	; (7678 <bt_generic_le+0x2c4>)
    7514:	681b      	ldr	r3, [r3, #0]
    7516:	2b01      	cmp	r3, #1
    7518:	d907      	bls.n	752a <bt_generic_le+0x176>
			status |= DMA_OVERFLOW;
    751a:	4b5b      	ldr	r3, [pc, #364]	; (7688 <bt_generic_le+0x2d4>)
    751c:	781b      	ldrb	r3, [r3, #0]
    751e:	b2db      	uxtb	r3, r3
    7520:	f043 0301 	orr.w	r3, r3, #1
    7524:	b2da      	uxtb	r2, r3
    7526:	4b58      	ldr	r3, [pc, #352]	; (7688 <bt_generic_le+0x2d4>)
    7528:	701a      	strb	r2, [r3, #0]

		rssi_iir_update();
    752a:	f7fc ff3b 	bl	43a4 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    752e:	4b50      	ldr	r3, [pc, #320]	; (7670 <bt_generic_le+0x2bc>)
    7530:	781b      	ldrb	r3, [r3, #0]
    7532:	b2db      	uxtb	r3, r3
    7534:	2b00      	cmp	r3, #0
    7536:	d103      	bne.n	7540 <bt_generic_le+0x18c>
    7538:	4b54      	ldr	r3, [pc, #336]	; (768c <bt_generic_le+0x2d8>)
    753a:	781b      	ldrb	r3, [r3, #0]
    753c:	2b00      	cmp	r3, #0
    753e:	d00c      	beq.n	755a <bt_generic_le+0x1a6>
			status |= CS_TRIGGER;
    7540:	4b51      	ldr	r3, [pc, #324]	; (7688 <bt_generic_le+0x2d4>)
    7542:	781b      	ldrb	r3, [r3, #0]
    7544:	b2db      	uxtb	r3, r3
    7546:	f043 0308 	orr.w	r3, r3, #8
    754a:	b2da      	uxtb	r2, r3
    754c:	4b4e      	ldr	r3, [pc, #312]	; (7688 <bt_generic_le+0x2d4>)
    754e:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    7550:	2302      	movs	r3, #2
    7552:	77fb      	strb	r3, [r7, #31]
			cs_trigger = 0;
    7554:	4b46      	ldr	r3, [pc, #280]	; (7670 <bt_generic_le+0x2bc>)
    7556:	2200      	movs	r2, #0
    7558:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    755a:	4b4d      	ldr	r3, [pc, #308]	; (7690 <bt_generic_le+0x2dc>)
    755c:	781b      	ldrb	r3, [r3, #0]
    755e:	b25a      	sxtb	r2, r3
    7560:	4b44      	ldr	r3, [pc, #272]	; (7674 <bt_generic_le+0x2c0>)
    7562:	781b      	ldrb	r3, [r3, #0]
    7564:	b25b      	sxtb	r3, r3
    7566:	3336      	adds	r3, #54	; 0x36
    7568:	429a      	cmp	r2, r3
    756a:	db09      	blt.n	7580 <bt_generic_le+0x1cc>
			status |= RSSI_TRIGGER;
    756c:	4b46      	ldr	r3, [pc, #280]	; (7688 <bt_generic_le+0x2d4>)
    756e:	781b      	ldrb	r3, [r3, #0]
    7570:	b2db      	uxtb	r3, r3
    7572:	f043 0310 	orr.w	r3, r3, #16
    7576:	b2da      	uxtb	r2, r3
    7578:	4b43      	ldr	r3, [pc, #268]	; (7688 <bt_generic_le+0x2d4>)
    757a:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    757c:	2302      	movs	r3, #2
    757e:	77fb      	strb	r3, [r7, #31]
		}

		/* Send a packet once in a while (6.25 Hz) to keep
		 * host USB reads from timing out. */
		if (keepalive_trigger) {
    7580:	4b44      	ldr	r3, [pc, #272]	; (7694 <bt_generic_le+0x2e0>)
    7582:	781b      	ldrb	r3, [r3, #0]
    7584:	b2db      	uxtb	r3, r3
    7586:	2b00      	cmp	r3, #0
    7588:	d007      	beq.n	759a <bt_generic_le+0x1e6>
			if (hold == 0)
    758a:	7ffb      	ldrb	r3, [r7, #31]
    758c:	2b00      	cmp	r3, #0
    758e:	d101      	bne.n	7594 <bt_generic_le+0x1e0>
				hold = 1;
    7590:	2301      	movs	r3, #1
    7592:	77fb      	strb	r3, [r7, #31]
			keepalive_trigger = 0;
    7594:	4b3f      	ldr	r3, [pc, #252]	; (7694 <bt_generic_le+0x2e0>)
    7596:	2200      	movs	r2, #0
    7598:	701a      	strb	r2, [r3, #0]
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    759a:	7ffb      	ldrb	r3, [r7, #31]
    759c:	2b00      	cmp	r3, #0
    759e:	d100      	bne.n	75a2 <bt_generic_le+0x1ee>
			goto rx_continue;
    75a0:	e03d      	b.n	761e <bt_generic_le+0x26a>
		}
		hold--;
    75a2:	7ffb      	ldrb	r3, [r7, #31]
    75a4:	3b01      	subs	r3, #1
    75a6:	77fb      	strb	r3, [r7, #31]

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    75a8:	483b      	ldr	r0, [pc, #236]	; (7698 <bt_generic_le+0x2e4>)
    75aa:	493c      	ldr	r1, [pc, #240]	; (769c <bt_generic_le+0x2e8>)
    75ac:	f44f 72c8 	mov.w	r2, #400	; 0x190
    75b0:	f004 ffd0 	bl	c554 <memcpy>

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    75b4:	2300      	movs	r3, #0
    75b6:	61bb      	str	r3, [r7, #24]
    75b8:	e025      	b.n	7606 <bt_generic_le+0x252>
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    75ba:	2300      	movs	r3, #0
    75bc:	617b      	str	r3, [r7, #20]
    75be:	e01c      	b.n	75fa <bt_generic_le+0x246>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    75c0:	69bb      	ldr	r3, [r7, #24]
    75c2:	3332      	adds	r3, #50	; 0x32
    75c4:	00da      	lsls	r2, r3, #3
    75c6:	697b      	ldr	r3, [r7, #20]
    75c8:	4413      	add	r3, r2
    75ca:	4a2e      	ldr	r2, [pc, #184]	; (7684 <bt_generic_le+0x2d0>)
    75cc:	6811      	ldr	r1, [r2, #0]
    75ce:	69ba      	ldr	r2, [r7, #24]
    75d0:	440a      	add	r2, r1
    75d2:	7812      	ldrb	r2, [r2, #0]
    75d4:	09d2      	lsrs	r2, r2, #7
    75d6:	b2d1      	uxtb	r1, r2
    75d8:	4a2f      	ldr	r2, [pc, #188]	; (7698 <bt_generic_le+0x2e4>)
    75da:	54d1      	strb	r1, [r2, r3]
				idle_rxbuf[i] <<= 1;
    75dc:	4b29      	ldr	r3, [pc, #164]	; (7684 <bt_generic_le+0x2d0>)
    75de:	681a      	ldr	r2, [r3, #0]
    75e0:	69bb      	ldr	r3, [r7, #24]
    75e2:	4413      	add	r3, r2
    75e4:	4a27      	ldr	r2, [pc, #156]	; (7684 <bt_generic_le+0x2d0>)
    75e6:	6811      	ldr	r1, [r2, #0]
    75e8:	69ba      	ldr	r2, [r7, #24]
    75ea:	440a      	add	r2, r1
    75ec:	7812      	ldrb	r2, [r2, #0]
    75ee:	0052      	lsls	r2, r2, #1
    75f0:	b2d2      	uxtb	r2, r2
    75f2:	701a      	strb	r2, [r3, #0]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    75f4:	697b      	ldr	r3, [r7, #20]
    75f6:	3301      	adds	r3, #1
    75f8:	617b      	str	r3, [r7, #20]
    75fa:	697b      	ldr	r3, [r7, #20]
    75fc:	2b07      	cmp	r3, #7
    75fe:	dddf      	ble.n	75c0 <bt_generic_le+0x20c>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    7600:	69bb      	ldr	r3, [r7, #24]
    7602:	3301      	adds	r3, #1
    7604:	61bb      	str	r3, [r7, #24]
    7606:	69bb      	ldr	r3, [r7, #24]
    7608:	2b31      	cmp	r3, #49	; 0x31
    760a:	ddd6      	ble.n	75ba <bt_generic_le+0x206>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    760c:	4b24      	ldr	r3, [pc, #144]	; (76a0 <bt_generic_le+0x2ec>)
    760e:	681b      	ldr	r3, [r3, #0]
    7610:	4821      	ldr	r0, [pc, #132]	; (7698 <bt_generic_le+0x2e4>)
    7612:	4798      	blx	r3
    7614:	60b8      	str	r0, [r7, #8]
		if (!ret) break;
    7616:	68bb      	ldr	r3, [r7, #8]
    7618:	2b00      	cmp	r3, #0
    761a:	d100      	bne.n	761e <bt_generic_le+0x26a>
    761c:	e00c      	b.n	7638 <bt_generic_le+0x284>

	rx_continue:
		rx_tc = 0;
    761e:	4b16      	ldr	r3, [pc, #88]	; (7678 <bt_generic_le+0x2c4>)
    7620:	2200      	movs	r2, #0
    7622:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    7624:	4b15      	ldr	r3, [pc, #84]	; (767c <bt_generic_le+0x2c8>)
    7626:	2200      	movs	r2, #0
    7628:	601a      	str	r2, [r3, #0]

	cs_trigger_enable();

	hold = 0;

	while (requested_mode == active_mode) {
    762a:	4b1e      	ldr	r3, [pc, #120]	; (76a4 <bt_generic_le+0x2f0>)
    762c:	781b      	ldrb	r3, [r3, #0]
    762e:	b2db      	uxtb	r3, r3
    7630:	79fa      	ldrb	r2, [r7, #7]
    7632:	429a      	cmp	r2, r3
    7634:	f43f aee3 	beq.w	73fe <bt_generic_le+0x4a>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    7638:	4b1b      	ldr	r3, [pc, #108]	; (76a8 <bt_generic_le+0x2f4>)
    763a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    763e:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    7640:	f7fe fbe2 	bl	5e08 <cc2400_idle>
	dio_ssp_stop();
    7644:	f7fe fb7c 	bl	5d40 <dio_ssp_stop>
	cs_trigger_disable();
    7648:	f7fd fa5a 	bl	4b00 <cs_trigger_disable>
}
    764c:	3720      	adds	r7, #32
    764e:	46bd      	mov	sp, r7
    7650:	bd80      	pop	{r7, pc}
    7652:	bf00      	nop
    7654:	10000a42 	.word	0x10000a42
    7658:	10000a3e 	.word	0x10000a3e
    765c:	e000e100 	.word	0xe000e100
    7660:	2009c03c 	.word	0x2009c03c
    7664:	10000a44 	.word	0x10000a44
    7668:	1000049c 	.word	0x1000049c
    766c:	1000097d 	.word	0x1000097d
    7670:	100010cc 	.word	0x100010cc
    7674:	1000044d 	.word	0x1000044d
    7678:	10000b04 	.word	0x10000b04
    767c:	100010c8 	.word	0x100010c8
    7680:	10000450 	.word	0x10000450
    7684:	10000454 	.word	0x10000454
    7688:	10000a48 	.word	0x10000a48
    768c:	1000097e 	.word	0x1000097e
    7690:	10000b0c 	.word	0x10000b0c
    7694:	10000be8 	.word	0x10000be8
    7698:	10000d10 	.word	0x10000d10
    769c:	10000ea0 	.word	0x10000ea0
    76a0:	10000998 	.word	0x10000998
    76a4:	10000a3f 	.word	0x10000a3f
    76a8:	e000e180 	.word	0xe000e180

000076ac <bt_le_sync>:


void bt_le_sync(u8 active_mode)
{
    76ac:	b590      	push	{r4, r7, lr}
    76ae:	b09b      	sub	sp, #108	; 0x6c
    76b0:	af00      	add	r7, sp, #0
    76b2:	4603      	mov	r3, r0
    76b4:	71fb      	strb	r3, [r7, #7]
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    76b6:	4b87      	ldr	r3, [pc, #540]	; (78d4 <bt_le_sync+0x228>)
    76b8:	2201      	movs	r2, #1
    76ba:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    76bc:	4a86      	ldr	r2, [pc, #536]	; (78d8 <bt_le_sync+0x22c>)
    76be:	79fb      	ldrb	r3, [r7, #7]
    76c0:	7013      	strb	r3, [r2, #0]

	le.link_state = LINK_LISTENING;
    76c2:	4b86      	ldr	r3, [pc, #536]	; (78dc <bt_le_sync+0x230>)
    76c4:	2201      	movs	r2, #1
    76c6:	751a      	strb	r2, [r3, #20]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    76c8:	4b85      	ldr	r3, [pc, #532]	; (78e0 <bt_le_sync+0x234>)
    76ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    76ce:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    76d0:	4b84      	ldr	r3, [pc, #528]	; (78e4 <bt_le_sync+0x238>)
    76d2:	2210      	movs	r2, #16
    76d4:	601a      	str	r2, [r3, #0]

	queue_init();
    76d6:	f001 fef1 	bl	94bc <queue_init>
	dio_ssp_init();
    76da:	f003 f895 	bl	a808 <dio_ssp_init>
	dma_init_le();
    76de:	f7fe f98f 	bl	5a00 <dma_init_le>
	dio_ssp_start();
    76e2:	f7fe fafd 	bl	5ce0 <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    76e6:	4b7d      	ldr	r3, [pc, #500]	; (78dc <bt_le_sync+0x230>)
    76e8:	681b      	ldr	r3, [r3, #0]
    76ea:	4618      	mov	r0, r3
    76ec:	f002 ff8c 	bl	a608 <rbit>
    76f0:	4603      	mov	r3, r0
    76f2:	4618      	mov	r0, r3
    76f4:	f7fe fc0e 	bl	5f14 <cc2400_rx_sync>

	while (requested_mode == active_mode) {
    76f8:	e247      	b.n	7b8a <bt_le_sync+0x4de>
		if (requested_channel != 0) {
    76fa:	4b7b      	ldr	r3, [pc, #492]	; (78e8 <bt_le_sync+0x23c>)
    76fc:	881b      	ldrh	r3, [r3, #0]
    76fe:	b29b      	uxth	r3, r3
    7700:	2b00      	cmp	r3, #0
    7702:	d029      	beq.n	7758 <bt_le_sync+0xac>
			cc2400_strobe(SRFOFF);
    7704:	2064      	movs	r0, #100	; 0x64
    7706:	f003 fa13 	bl	ab30 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    770a:	bf00      	nop
    770c:	f003 fa06 	bl	ab1c <cc2400_status>
    7710:	4603      	mov	r3, r0
    7712:	f003 0304 	and.w	r3, r3, #4
    7716:	2b00      	cmp	r3, #0
    7718:	d1f8      	bne.n	770c <bt_le_sync+0x60>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    771a:	4b74      	ldr	r3, [pc, #464]	; (78ec <bt_le_sync+0x240>)
    771c:	881b      	ldrh	r3, [r3, #0]
    771e:	b29b      	uxth	r3, r3
    7720:	3b01      	subs	r3, #1
    7722:	b29b      	uxth	r3, r3
    7724:	2002      	movs	r0, #2
    7726:	4619      	mov	r1, r3
    7728:	f003 f940 	bl	a9ac <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    772c:	2061      	movs	r0, #97	; 0x61
    772e:	f003 f9ff 	bl	ab30 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    7732:	bf00      	nop
    7734:	f003 f9f2 	bl	ab1c <cc2400_status>
    7738:	4603      	mov	r3, r0
    773a:	f003 0304 	and.w	r3, r3, #4
    773e:	2b00      	cmp	r3, #0
    7740:	d0f8      	beq.n	7734 <bt_le_sync+0x88>

			/* RX mode */
			cc2400_strobe(SRX);
    7742:	2062      	movs	r0, #98	; 0x62
    7744:	f003 f9f4 	bl	ab30 <cc2400_strobe>

			saved_request = requested_channel;
    7748:	4b67      	ldr	r3, [pc, #412]	; (78e8 <bt_le_sync+0x23c>)
    774a:	881b      	ldrh	r3, [r3, #0]
    774c:	b29a      	uxth	r2, r3
    774e:	4b68      	ldr	r3, [pc, #416]	; (78f0 <bt_le_sync+0x244>)
    7750:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    7752:	4b65      	ldr	r3, [pc, #404]	; (78e8 <bt_le_sync+0x23c>)
    7754:	2200      	movs	r2, #0
    7756:	801a      	strh	r2, [r3, #0]
		}

		RXLED_CLR;
    7758:	4b62      	ldr	r3, [pc, #392]	; (78e4 <bt_le_sync+0x238>)
    775a:	2210      	movs	r2, #16
    775c:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    775e:	f7fc fdd1 	bl	4304 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    7762:	bf00      	nop
    7764:	4b63      	ldr	r3, [pc, #396]	; (78f4 <bt_le_sync+0x248>)
    7766:	681b      	ldr	r3, [r3, #0]
    7768:	2b00      	cmp	r3, #0
    776a:	d10e      	bne.n	778a <bt_le_sync+0xde>
    776c:	4b62      	ldr	r3, [pc, #392]	; (78f8 <bt_le_sync+0x24c>)
    776e:	681b      	ldr	r3, [r3, #0]
    7770:	2b00      	cmp	r3, #0
    7772:	d10a      	bne.n	778a <bt_le_sync+0xde>
    7774:	4b61      	ldr	r3, [pc, #388]	; (78fc <bt_le_sync+0x250>)
    7776:	781b      	ldrb	r3, [r3, #0]
    7778:	b2db      	uxtb	r3, r3
    777a:	2b00      	cmp	r3, #0
    777c:	d105      	bne.n	778a <bt_le_sync+0xde>
    777e:	4b60      	ldr	r3, [pc, #384]	; (7900 <bt_le_sync+0x254>)
    7780:	781b      	ldrb	r3, [r3, #0]
    7782:	b2db      	uxtb	r3, r3
    7784:	79fa      	ldrb	r2, [r7, #7]
    7786:	429a      	cmp	r2, r3
    7788:	d0ec      	beq.n	7764 <bt_le_sync+0xb8>
			;

		if (requested_mode != active_mode) {
    778a:	4b5d      	ldr	r3, [pc, #372]	; (7900 <bt_le_sync+0x254>)
    778c:	781b      	ldrb	r3, [r3, #0]
    778e:	b2db      	uxtb	r3, r3
    7790:	79fa      	ldrb	r2, [r7, #7]
    7792:	429a      	cmp	r2, r3
    7794:	d000      	beq.n	7798 <bt_le_sync+0xec>
			goto cleanup;
    7796:	e1ff      	b.n	7b98 <bt_le_sync+0x4ec>
		}

		if (rx_err) {
    7798:	4b57      	ldr	r3, [pc, #348]	; (78f8 <bt_le_sync+0x24c>)
    779a:	681b      	ldr	r3, [r3, #0]
    779c:	2b00      	cmp	r3, #0
    779e:	d007      	beq.n	77b0 <bt_le_sync+0x104>
			status |= DMA_ERROR;
    77a0:	4b58      	ldr	r3, [pc, #352]	; (7904 <bt_le_sync+0x258>)
    77a2:	781b      	ldrb	r3, [r3, #0]
    77a4:	b2db      	uxtb	r3, r3
    77a6:	f043 0302 	orr.w	r3, r3, #2
    77aa:	b2da      	uxtb	r2, r3
    77ac:	4b55      	ldr	r3, [pc, #340]	; (7904 <bt_le_sync+0x258>)
    77ae:	701a      	strb	r2, [r3, #0]
		}

		if (do_hop)
    77b0:	4b52      	ldr	r3, [pc, #328]	; (78fc <bt_le_sync+0x250>)
    77b2:	781b      	ldrb	r3, [r3, #0]
    77b4:	b2db      	uxtb	r3, r3
    77b6:	2b00      	cmp	r3, #0
    77b8:	d000      	beq.n	77bc <bt_le_sync+0x110>
			goto rx_flush;
    77ba:	e12b      	b.n	7a14 <bt_le_sync+0x368>

		/* No DMA transfer? */
		if (!rx_tc)
    77bc:	4b4d      	ldr	r3, [pc, #308]	; (78f4 <bt_le_sync+0x248>)
    77be:	681b      	ldr	r3, [r3, #0]
    77c0:	2b00      	cmp	r3, #0
    77c2:	d100      	bne.n	77c6 <bt_le_sync+0x11a>
    77c4:	e1e1      	b.n	7b8a <bt_le_sync+0x4de>

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    77c6:	f107 0308 	add.w	r3, r7, #8
    77ca:	65fb      	str	r3, [r7, #92]	; 0x5c
		packet[0] = le.access_address;
    77cc:	4b43      	ldr	r3, [pc, #268]	; (78dc <bt_le_sync+0x230>)
    77ce:	681b      	ldr	r3, [r3, #0]
    77d0:	60bb      	str	r3, [r7, #8]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    77d2:	4b46      	ldr	r3, [pc, #280]	; (78ec <bt_le_sync+0x240>)
    77d4:	881b      	ldrh	r3, [r3, #0]
    77d6:	b29b      	uxth	r3, r3
    77d8:	b2db      	uxtb	r3, r3
    77da:	3b62      	subs	r3, #98	; 0x62
    77dc:	b2db      	uxtb	r3, r3
    77de:	4618      	mov	r0, r3
    77e0:	f001 fcec 	bl	91bc <btle_channel_index>
    77e4:	4603      	mov	r3, r0
    77e6:	461a      	mov	r2, r3
    77e8:	4613      	mov	r3, r2
    77ea:	005b      	lsls	r3, r3, #1
    77ec:	4413      	add	r3, r2
    77ee:	011b      	lsls	r3, r3, #4
    77f0:	4a45      	ldr	r2, [pc, #276]	; (7908 <bt_le_sync+0x25c>)
    77f2:	4413      	add	r3, r2
    77f4:	65bb      	str	r3, [r7, #88]	; 0x58
		for (i = 0; i < 4; i+= 4) {
    77f6:	2300      	movs	r3, #0
    77f8:	667b      	str	r3, [r7, #100]	; 0x64
    77fa:	e034      	b.n	7866 <bt_le_sync+0x1ba>
			uint32_t v = rxbuf1[i+0] << 24
    77fc:	4a43      	ldr	r2, [pc, #268]	; (790c <bt_le_sync+0x260>)
    77fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7800:	4413      	add	r3, r2
    7802:	781b      	ldrb	r3, [r3, #0]
    7804:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    7806:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7808:	3301      	adds	r3, #1
    780a:	4940      	ldr	r1, [pc, #256]	; (790c <bt_le_sync+0x260>)
    780c:	5ccb      	ldrb	r3, [r1, r3]
    780e:	041b      	lsls	r3, r3, #16
    7810:	431a      	orrs	r2, r3
					   | rxbuf1[i+2] << 8
    7812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7814:	3302      	adds	r3, #2
    7816:	493d      	ldr	r1, [pc, #244]	; (790c <bt_le_sync+0x260>)
    7818:	5ccb      	ldrb	r3, [r1, r3]
    781a:	021b      	lsls	r3, r3, #8
    781c:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    781e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    7820:	3203      	adds	r2, #3
    7822:	493a      	ldr	r1, [pc, #232]	; (790c <bt_le_sync+0x260>)
    7824:	5c8a      	ldrb	r2, [r1, r2]
    7826:	4313      	orrs	r3, r2
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    7828:	657b      	str	r3, [r7, #84]	; 0x54
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    782a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    782c:	2b00      	cmp	r3, #0
    782e:	da00      	bge.n	7832 <bt_le_sync+0x186>
    7830:	3303      	adds	r3, #3
    7832:	109b      	asrs	r3, r3, #2
    7834:	1c5c      	adds	r4, r3, #1
    7836:	6d78      	ldr	r0, [r7, #84]	; 0x54
    7838:	f002 fee6 	bl	a608 <rbit>
    783c:	4601      	mov	r1, r0
    783e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7840:	2b00      	cmp	r3, #0
    7842:	da00      	bge.n	7846 <bt_le_sync+0x19a>
    7844:	3303      	adds	r3, #3
    7846:	109b      	asrs	r3, r3, #2
    7848:	009b      	lsls	r3, r3, #2
    784a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    784c:	4413      	add	r3, r2
    784e:	681b      	ldr	r3, [r3, #0]
    7850:	ea81 0203 	eor.w	r2, r1, r3
    7854:	00a3      	lsls	r3, r4, #2
    7856:	f107 0168 	add.w	r1, r7, #104	; 0x68
    785a:	440b      	add	r3, r1
    785c:	f843 2c60 	str.w	r2, [r3, #-96]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
    7860:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7862:	3304      	adds	r3, #4
    7864:	667b      	str	r3, [r7, #100]	; 0x64
    7866:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7868:	2b03      	cmp	r3, #3
    786a:	ddc7      	ble.n	77fc <bt_le_sync+0x150>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		unsigned len = (p[5] & 0x3f) + 2;
    786c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    786e:	3305      	adds	r3, #5
    7870:	781b      	ldrb	r3, [r3, #0]
    7872:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7876:	3302      	adds	r3, #2
    7878:	653b      	str	r3, [r7, #80]	; 0x50
		if (len > 39)
    787a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    787c:	2b27      	cmp	r3, #39	; 0x27
    787e:	d900      	bls.n	7882 <bt_le_sync+0x1d6>
			goto rx_flush;
    7880:	e0c8      	b.n	7a14 <bt_le_sync+0x368>

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    7882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7884:	3306      	adds	r3, #6
    7886:	089b      	lsrs	r3, r3, #2
    7888:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (total_transfers < 11) {
    788a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    788c:	2b0a      	cmp	r3, #10
    788e:	d80d      	bhi.n	78ac <bt_le_sync+0x200>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    7890:	bf00      	nop
    7892:	4b1f      	ldr	r3, [pc, #124]	; (7910 <bt_le_sync+0x264>)
    7894:	681a      	ldr	r2, [r3, #0]
    7896:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    7898:	009b      	lsls	r3, r3, #2
    789a:	491c      	ldr	r1, [pc, #112]	; (790c <bt_le_sync+0x260>)
    789c:	440b      	add	r3, r1
    789e:	429a      	cmp	r2, r3
    78a0:	d20f      	bcs.n	78c2 <bt_le_sync+0x216>
    78a2:	4b15      	ldr	r3, [pc, #84]	; (78f8 <bt_le_sync+0x24c>)
    78a4:	681b      	ldr	r3, [r3, #0]
    78a6:	2b00      	cmp	r3, #0
    78a8:	d0f3      	beq.n	7892 <bt_le_sync+0x1e6>
    78aa:	e00a      	b.n	78c2 <bt_le_sync+0x216>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    78ac:	bf00      	nop
    78ae:	4b19      	ldr	r3, [pc, #100]	; (7914 <bt_le_sync+0x268>)
    78b0:	681b      	ldr	r3, [r3, #0]
    78b2:	f003 0301 	and.w	r3, r3, #1
    78b6:	2b00      	cmp	r3, #0
    78b8:	d003      	beq.n	78c2 <bt_le_sync+0x216>
    78ba:	4b0f      	ldr	r3, [pc, #60]	; (78f8 <bt_le_sync+0x24c>)
    78bc:	681b      	ldr	r3, [r3, #0]
    78be:	2b00      	cmp	r3, #0
    78c0:	d0f5      	beq.n	78ae <bt_le_sync+0x202>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    78c2:	4a15      	ldr	r2, [pc, #84]	; (7918 <bt_le_sync+0x26c>)
    78c4:	4b14      	ldr	r3, [pc, #80]	; (7918 <bt_le_sync+0x26c>)
    78c6:	681b      	ldr	r3, [r3, #0]
    78c8:	f023 0301 	bic.w	r3, r3, #1
    78cc:	6013      	str	r3, [r2, #0]

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    78ce:	2304      	movs	r3, #4
    78d0:	667b      	str	r3, [r7, #100]	; 0x64
    78d2:	e058      	b.n	7986 <bt_le_sync+0x2da>
    78d4:	10000a42 	.word	0x10000a42
    78d8:	10000a3e 	.word	0x10000a3e
    78dc:	10000458 	.word	0x10000458
    78e0:	e000e100 	.word	0xe000e100
    78e4:	2009c03c 	.word	0x2009c03c
    78e8:	10000a44 	.word	0x10000a44
    78ec:	1000049c 	.word	0x1000049c
    78f0:	10000a46 	.word	0x10000a46
    78f4:	10000b04 	.word	0x10000b04
    78f8:	100010c8 	.word	0x100010c8
    78fc:	1000097d 	.word	0x1000097d
    7900:	10000a3f 	.word	0x10000a3f
    7904:	10000a48 	.word	0x10000a48
    7908:	0000c7b4 	.word	0x0000c7b4
    790c:	10001094 	.word	0x10001094
    7910:	50004104 	.word	0x50004104
    7914:	50004110 	.word	0x50004110
    7918:	40030024 	.word	0x40030024
			uint32_t v = rxbuf1[i+0] << 24
    791c:	4aa5      	ldr	r2, [pc, #660]	; (7bb4 <bt_le_sync+0x508>)
    791e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7920:	4413      	add	r3, r2
    7922:	781b      	ldrb	r3, [r3, #0]
    7924:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    7926:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7928:	3301      	adds	r3, #1
    792a:	49a2      	ldr	r1, [pc, #648]	; (7bb4 <bt_le_sync+0x508>)
    792c:	5ccb      	ldrb	r3, [r1, r3]
    792e:	041b      	lsls	r3, r3, #16
    7930:	431a      	orrs	r2, r3
				       | rxbuf1[i+2] << 8
    7932:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7934:	3302      	adds	r3, #2
    7936:	499f      	ldr	r1, [pc, #636]	; (7bb4 <bt_le_sync+0x508>)
    7938:	5ccb      	ldrb	r3, [r1, r3]
    793a:	021b      	lsls	r3, r3, #8
    793c:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    793e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    7940:	3203      	adds	r2, #3
    7942:	499c      	ldr	r1, [pc, #624]	; (7bb4 <bt_le_sync+0x508>)
    7944:	5c8a      	ldrb	r2, [r1, r2]
    7946:	4313      	orrs	r3, r2
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    7948:	64bb      	str	r3, [r7, #72]	; 0x48
					   | rxbuf1[i+1] << 16
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    794a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    794c:	2b00      	cmp	r3, #0
    794e:	da00      	bge.n	7952 <bt_le_sync+0x2a6>
    7950:	3303      	adds	r3, #3
    7952:	109b      	asrs	r3, r3, #2
    7954:	1c5c      	adds	r4, r3, #1
    7956:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    7958:	f002 fe56 	bl	a608 <rbit>
    795c:	4601      	mov	r1, r0
    795e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7960:	2b00      	cmp	r3, #0
    7962:	da00      	bge.n	7966 <bt_le_sync+0x2ba>
    7964:	3303      	adds	r3, #3
    7966:	109b      	asrs	r3, r3, #2
    7968:	009b      	lsls	r3, r3, #2
    796a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    796c:	4413      	add	r3, r2
    796e:	681b      	ldr	r3, [r3, #0]
    7970:	ea81 0203 	eor.w	r2, r1, r3
    7974:	00a3      	lsls	r3, r4, #2
    7976:	f107 0168 	add.w	r1, r7, #104	; 0x68
    797a:	440b      	add	r3, r1
    797c:	f843 2c60 	str.w	r2, [r3, #-96]
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    7980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7982:	3304      	adds	r3, #4
    7984:	667b      	str	r3, [r7, #100]	; 0x64
    7986:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7988:	2b2b      	cmp	r3, #43	; 0x2b
    798a:	ddc7      	ble.n	791c <bt_le_sync+0x270>
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    798c:	4b8a      	ldr	r3, [pc, #552]	; (7bb8 <bt_le_sync+0x50c>)
    798e:	691b      	ldr	r3, [r3, #16]
    7990:	2b00      	cmp	r3, #0
    7992:	d023      	beq.n	79dc <bt_le_sync+0x330>
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    7994:	4b88      	ldr	r3, [pc, #544]	; (7bb8 <bt_le_sync+0x50c>)
    7996:	68d9      	ldr	r1, [r3, #12]
    7998:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    799a:	1d1a      	adds	r2, r3, #4
    799c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    799e:	4608      	mov	r0, r1
    79a0:	4611      	mov	r1, r2
    79a2:	461a      	mov	r2, r3
    79a4:	f001 fd0e 	bl	93c4 <btle_crcgen_lut>
    79a8:	6478      	str	r0, [r7, #68]	; 0x44
			u32 wire_crc = (p[4+len+2] << 16)
    79aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    79ac:	3306      	adds	r3, #6
    79ae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    79b0:	4413      	add	r3, r2
    79b2:	781b      	ldrb	r3, [r3, #0]
    79b4:	041a      	lsls	r2, r3, #16
						 | (p[4+len+1] << 8)
    79b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    79b8:	3305      	adds	r3, #5
    79ba:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    79bc:	440b      	add	r3, r1
    79be:	781b      	ldrb	r3, [r3, #0]
    79c0:	021b      	lsls	r3, r3, #8
    79c2:	4313      	orrs	r3, r2
						 | (p[4+len+0] << 0);
    79c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    79c6:	3204      	adds	r2, #4
    79c8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    79ca:	440a      	add	r2, r1
    79cc:	7812      	ldrb	r2, [r2, #0]
    79ce:	4313      	orrs	r3, r2
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
			u32 wire_crc = (p[4+len+2] << 16)
    79d0:	643b      	str	r3, [r7, #64]	; 0x40
						 | (p[4+len+1] << 8)
						 | (p[4+len+0] << 0);
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    79d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    79d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    79d6:	429a      	cmp	r2, r3
    79d8:	d000      	beq.n	79dc <bt_le_sync+0x330>
				goto rx_flush;
    79da:	e01b      	b.n	7a14 <bt_le_sync+0x368>
		}


		RXLED_SET;
    79dc:	4b77      	ldr	r3, [pc, #476]	; (7bbc <bt_le_sync+0x510>)
    79de:	2210      	movs	r2, #16
    79e0:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    79e2:	4b77      	ldr	r3, [pc, #476]	; (7bc0 <bt_le_sync+0x514>)
    79e4:	681b      	ldr	r3, [r3, #0]
    79e6:	f107 0208 	add.w	r2, r7, #8
    79ea:	4610      	mov	r0, r2
    79ec:	4798      	blx	r3
		enqueue(LE_PACKET, (uint8_t *)packet);
    79ee:	f107 0308 	add.w	r3, r7, #8
    79f2:	2001      	movs	r0, #1
    79f4:	4619      	mov	r1, r3
    79f6:	f7fc fd67 	bl	44c8 <enqueue>
		le.last_packet = CLK100NS;
    79fa:	4b72      	ldr	r3, [pc, #456]	; (7bc4 <bt_le_sync+0x518>)
    79fc:	681b      	ldr	r3, [r3, #0]
    79fe:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7a02:	f640 4235 	movw	r2, #3125	; 0xc35
    7a06:	fb02 f203 	mul.w	r2, r2, r3
    7a0a:	4b6f      	ldr	r3, [pc, #444]	; (7bc8 <bt_le_sync+0x51c>)
    7a0c:	681b      	ldr	r3, [r3, #0]
    7a0e:	4413      	add	r3, r2
    7a10:	4a69      	ldr	r2, [pc, #420]	; (7bb8 <bt_le_sync+0x50c>)
    7a12:	6413      	str	r3, [r2, #64]	; 0x40

	rx_flush:
		cc2400_strobe(SFSON);
    7a14:	2061      	movs	r0, #97	; 0x61
    7a16:	f003 f88b 	bl	ab30 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    7a1a:	bf00      	nop
    7a1c:	f003 f87e 	bl	ab1c <cc2400_status>
    7a20:	4603      	mov	r3, r0
    7a22:	f003 0304 	and.w	r3, r3, #4
    7a26:	2b00      	cmp	r3, #0
    7a28:	d0f8      	beq.n	7a1c <bt_le_sync+0x370>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7a2a:	4a68      	ldr	r2, [pc, #416]	; (7bcc <bt_le_sync+0x520>)
    7a2c:	4b67      	ldr	r3, [pc, #412]	; (7bcc <bt_le_sync+0x520>)
    7a2e:	681b      	ldr	r3, [r3, #0]
    7a30:	f023 0301 	bic.w	r3, r3, #1
    7a34:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    7a36:	e003      	b.n	7a40 <bt_le_sync+0x394>
			u8 tmp = (u8)DIO_SSP_DR;
    7a38:	4b65      	ldr	r3, [pc, #404]	; (7bd0 <bt_le_sync+0x524>)
    7a3a:	681b      	ldr	r3, [r3, #0]
    7a3c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    7a40:	4b64      	ldr	r3, [pc, #400]	; (7bd4 <bt_le_sync+0x528>)
    7a42:	681b      	ldr	r3, [r3, #0]
    7a44:	f003 0304 	and.w	r3, r3, #4
    7a48:	2b00      	cmp	r3, #0
    7a4a:	d1f5      	bne.n	7a38 <bt_le_sync+0x38c>
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    7a4c:	4b5d      	ldr	r3, [pc, #372]	; (7bc4 <bt_le_sync+0x518>)
    7a4e:	681b      	ldr	r3, [r3, #0]
    7a50:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7a54:	f640 4235 	movw	r2, #3125	; 0xc35
    7a58:	fb02 f203 	mul.w	r2, r2, r3
    7a5c:	4b5a      	ldr	r3, [pc, #360]	; (7bc8 <bt_le_sync+0x51c>)
    7a5e:	681b      	ldr	r3, [r3, #0]
    7a60:	4413      	add	r3, r2
    7a62:	663b      	str	r3, [r7, #96]	; 0x60
		if (now < le.last_packet)
    7a64:	4b54      	ldr	r3, [pc, #336]	; (7bb8 <bt_le_sync+0x50c>)
    7a66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    7a68:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7a6a:	429a      	cmp	r2, r3
    7a6c:	d905      	bls.n	7a7a <bt_le_sync+0x3ce>
			now += 3276800000; // handle rollover
    7a6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7a70:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    7a74:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    7a78:	663b      	str	r3, [r7, #96]	; 0x60
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    7a7a:	4b4f      	ldr	r3, [pc, #316]	; (7bb8 <bt_le_sync+0x50c>)
    7a7c:	7d1b      	ldrb	r3, [r3, #20]

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
		if  ( // timeout
    7a7e:	2b03      	cmp	r3, #3
    7a80:	d003      	beq.n	7a8a <bt_le_sync+0x3de>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    7a82:	4b4d      	ldr	r3, [pc, #308]	; (7bb8 <bt_le_sync+0x50c>)
    7a84:	7d1b      	ldrb	r3, [r3, #20]
    7a86:	2b02      	cmp	r3, #2
    7a88:	d106      	bne.n	7a98 <bt_le_sync+0x3ec>
			&& (now - le.last_packet > 50000000))
    7a8a:	4b4b      	ldr	r3, [pc, #300]	; (7bb8 <bt_le_sync+0x50c>)
    7a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    7a8e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    7a90:	1ad3      	subs	r3, r2, r3
    7a92:	4a51      	ldr	r2, [pc, #324]	; (7bd8 <bt_le_sync+0x52c>)
    7a94:	4293      	cmp	r3, r2
    7a96:	d803      	bhi.n	7aa0 <bt_le_sync+0x3f4>
			// jam finished
			|| (le_jam_count == 1)
    7a98:	4b50      	ldr	r3, [pc, #320]	; (7bdc <bt_le_sync+0x530>)
    7a9a:	681b      	ldr	r3, [r3, #0]
    7a9c:	2b01      	cmp	r3, #1
    7a9e:	d137      	bne.n	7b10 <bt_le_sync+0x464>
			)
		{
			reset_le();
    7aa0:	f7ff fc2c 	bl	72fc <reset_le>
			le_jam_count = 0;
    7aa4:	4b4d      	ldr	r3, [pc, #308]	; (7bdc <bt_le_sync+0x530>)
    7aa6:	2200      	movs	r2, #0
    7aa8:	601a      	str	r2, [r3, #0]
			TXLED_CLR;
    7aaa:	4b4d      	ldr	r3, [pc, #308]	; (7be0 <bt_le_sync+0x534>)
    7aac:	f44f 7280 	mov.w	r2, #256	; 0x100
    7ab0:	601a      	str	r2, [r3, #0]

			if (jam_mode == JAM_ONCE) {
    7ab2:	4b4c      	ldr	r3, [pc, #304]	; (7be4 <bt_le_sync+0x538>)
    7ab4:	781b      	ldrb	r3, [r3, #0]
    7ab6:	b2db      	uxtb	r3, r3
    7ab8:	2b01      	cmp	r3, #1
    7aba:	d106      	bne.n	7aca <bt_le_sync+0x41e>
				jam_mode = JAM_NONE;
    7abc:	4b49      	ldr	r3, [pc, #292]	; (7be4 <bt_le_sync+0x538>)
    7abe:	2200      	movs	r2, #0
    7ac0:	701a      	strb	r2, [r3, #0]
				requested_mode = MODE_IDLE;
    7ac2:	4b49      	ldr	r3, [pc, #292]	; (7be8 <bt_le_sync+0x53c>)
    7ac4:	2200      	movs	r2, #0
    7ac6:	701a      	strb	r2, [r3, #0]
				goto cleanup;
    7ac8:	e066      	b.n	7b98 <bt_le_sync+0x4ec>
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    7aca:	79fb      	ldrb	r3, [r7, #7]
    7acc:	2b0a      	cmp	r3, #10
    7ace:	d101      	bne.n	7ad4 <bt_le_sync+0x428>
				goto cleanup;
    7ad0:	bf00      	nop
    7ad2:	e061      	b.n	7b98 <bt_le_sync+0x4ec>

			le.link_state = LINK_LISTENING;
    7ad4:	4b38      	ldr	r3, [pc, #224]	; (7bb8 <bt_le_sync+0x50c>)
    7ad6:	2201      	movs	r2, #1
    7ad8:	751a      	strb	r2, [r3, #20]

			cc2400_strobe(SRFOFF);
    7ada:	2064      	movs	r0, #100	; 0x64
    7adc:	f003 f828 	bl	ab30 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    7ae0:	bf00      	nop
    7ae2:	f003 f81b 	bl	ab1c <cc2400_status>
    7ae6:	4603      	mov	r3, r0
    7ae8:	f003 0304 	and.w	r3, r3, #4
    7aec:	2b00      	cmp	r3, #0
    7aee:	d1f8      	bne.n	7ae2 <bt_le_sync+0x436>

			/* Retune */
			channel = saved_request != 0 ? saved_request : 2402;
    7af0:	4b3e      	ldr	r3, [pc, #248]	; (7bec <bt_le_sync+0x540>)
    7af2:	881b      	ldrh	r3, [r3, #0]
    7af4:	b29b      	uxth	r3, r3
    7af6:	2b00      	cmp	r3, #0
    7af8:	d003      	beq.n	7b02 <bt_le_sync+0x456>
    7afa:	4b3c      	ldr	r3, [pc, #240]	; (7bec <bt_le_sync+0x540>)
    7afc:	881b      	ldrh	r3, [r3, #0]
    7afe:	b29b      	uxth	r3, r3
    7b00:	e001      	b.n	7b06 <bt_le_sync+0x45a>
    7b02:	f640 1362 	movw	r3, #2402	; 0x962
    7b06:	4a3a      	ldr	r2, [pc, #232]	; (7bf0 <bt_le_sync+0x544>)
    7b08:	8013      	strh	r3, [r2, #0]
			restart_jamming = 1;
    7b0a:	4b3a      	ldr	r3, [pc, #232]	; (7bf4 <bt_le_sync+0x548>)
    7b0c:	2201      	movs	r2, #1
    7b0e:	601a      	str	r2, [r3, #0]
		}

		cc2400_set(SYNCL, le.syncl);
    7b10:	4b29      	ldr	r3, [pc, #164]	; (7bb8 <bt_le_sync+0x50c>)
    7b12:	88db      	ldrh	r3, [r3, #6]
    7b14:	202c      	movs	r0, #44	; 0x2c
    7b16:	4619      	mov	r1, r3
    7b18:	f002 ff48 	bl	a9ac <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    7b1c:	4b26      	ldr	r3, [pc, #152]	; (7bb8 <bt_le_sync+0x50c>)
    7b1e:	889b      	ldrh	r3, [r3, #4]
    7b20:	202d      	movs	r0, #45	; 0x2d
    7b22:	4619      	mov	r1, r3
    7b24:	f002 ff42 	bl	a9ac <cc2400_set>

		if (do_hop)
    7b28:	4b33      	ldr	r3, [pc, #204]	; (7bf8 <bt_le_sync+0x54c>)
    7b2a:	781b      	ldrb	r3, [r3, #0]
    7b2c:	b2db      	uxtb	r3, r3
    7b2e:	2b00      	cmp	r3, #0
    7b30:	d001      	beq.n	7b36 <bt_le_sync+0x48a>
			hop();
    7b32:	f7fe fc27 	bl	6384 <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    7b36:	4b29      	ldr	r3, [pc, #164]	; (7bdc <bt_le_sync+0x530>)
    7b38:	681b      	ldr	r3, [r3, #0]
    7b3a:	2b00      	cmp	r3, #0
    7b3c:	dd07      	ble.n	7b4e <bt_le_sync+0x4a2>
			le_jam();
    7b3e:	f7fe fbd7 	bl	62f0 <le_jam>
			--le_jam_count;
    7b42:	4b26      	ldr	r3, [pc, #152]	; (7bdc <bt_le_sync+0x530>)
    7b44:	681b      	ldr	r3, [r3, #0]
    7b46:	3b01      	subs	r3, #1
    7b48:	4a24      	ldr	r2, [pc, #144]	; (7bdc <bt_le_sync+0x530>)
    7b4a:	6013      	str	r3, [r2, #0]
    7b4c:	e017      	b.n	7b7e <bt_le_sync+0x4d2>
		} else {
			/* RX mode */
			dma_init_le();
    7b4e:	f7fd ff57 	bl	5a00 <dma_init_le>
			dio_ssp_start();
    7b52:	f7fe f8c5 	bl	5ce0 <dio_ssp_start>

			if (restart_jamming) {
    7b56:	4b27      	ldr	r3, [pc, #156]	; (7bf4 <bt_le_sync+0x548>)
    7b58:	681b      	ldr	r3, [r3, #0]
    7b5a:	2b00      	cmp	r3, #0
    7b5c:	d00c      	beq.n	7b78 <bt_le_sync+0x4cc>
				cc2400_rx_sync(rbit(le.access_address));
    7b5e:	4b16      	ldr	r3, [pc, #88]	; (7bb8 <bt_le_sync+0x50c>)
    7b60:	681b      	ldr	r3, [r3, #0]
    7b62:	4618      	mov	r0, r3
    7b64:	f002 fd50 	bl	a608 <rbit>
    7b68:	4603      	mov	r3, r0
    7b6a:	4618      	mov	r0, r3
    7b6c:	f7fe f9d2 	bl	5f14 <cc2400_rx_sync>
				restart_jamming = 0;
    7b70:	4b20      	ldr	r3, [pc, #128]	; (7bf4 <bt_le_sync+0x548>)
    7b72:	2200      	movs	r2, #0
    7b74:	601a      	str	r2, [r3, #0]
    7b76:	e002      	b.n	7b7e <bt_le_sync+0x4d2>
			} else {
				cc2400_strobe(SRX);
    7b78:	2062      	movs	r0, #98	; 0x62
    7b7a:	f002 ffd9 	bl	ab30 <cc2400_strobe>
			}
		}

		rx_tc = 0;
    7b7e:	4b1f      	ldr	r3, [pc, #124]	; (7bfc <bt_le_sync+0x550>)
    7b80:	2200      	movs	r2, #0
    7b82:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    7b84:	4b1e      	ldr	r3, [pc, #120]	; (7c00 <bt_le_sync+0x554>)
    7b86:	2200      	movs	r2, #0
    7b88:	601a      	str	r2, [r3, #0]
	dma_init_le();
	dio_ssp_start();

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address

	while (requested_mode == active_mode) {
    7b8a:	4b17      	ldr	r3, [pc, #92]	; (7be8 <bt_le_sync+0x53c>)
    7b8c:	781b      	ldrb	r3, [r3, #0]
    7b8e:	b2db      	uxtb	r3, r3
    7b90:	79fa      	ldrb	r2, [r7, #7]
    7b92:	429a      	cmp	r2, r3
    7b94:	f43f adb1 	beq.w	76fa <bt_le_sync+0x4e>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    7b98:	4b1a      	ldr	r3, [pc, #104]	; (7c04 <bt_le_sync+0x558>)
    7b9a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7b9e:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    7ba0:	f7fe f932 	bl	5e08 <cc2400_idle>
	dio_ssp_stop();
    7ba4:	f7fe f8cc 	bl	5d40 <dio_ssp_stop>
	cs_trigger_disable();
    7ba8:	f7fc ffaa 	bl	4b00 <cs_trigger_disable>
}
    7bac:	376c      	adds	r7, #108	; 0x6c
    7bae:	46bd      	mov	sp, r7
    7bb0:	bd90      	pop	{r4, r7, pc}
    7bb2:	bf00      	nop
    7bb4:	10001094 	.word	0x10001094
    7bb8:	10000458 	.word	0x10000458
    7bbc:	2009c038 	.word	0x2009c038
    7bc0:	1000099c 	.word	0x1000099c
    7bc4:	10000bec 	.word	0x10000bec
    7bc8:	40004008 	.word	0x40004008
    7bcc:	40030024 	.word	0x40030024
    7bd0:	40030008 	.word	0x40030008
    7bd4:	4003000c 	.word	0x4003000c
    7bd8:	02faf080 	.word	0x02faf080
    7bdc:	10000994 	.word	0x10000994
    7be0:	2009c03c 	.word	0x2009c03c
    7be4:	10000a40 	.word	0x10000a40
    7be8:	10000a3f 	.word	0x10000a3f
    7bec:	10000a46 	.word	0x10000a46
    7bf0:	1000049c 	.word	0x1000049c
    7bf4:	10000a50 	.word	0x10000a50
    7bf8:	1000097d 	.word	0x1000097d
    7bfc:	10000b04 	.word	0x10000b04
    7c00:	100010c8 	.word	0x100010c8
    7c04:	e000e180 	.word	0xe000e180

00007c08 <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    7c08:	b580      	push	{r7, lr}
    7c0a:	b08c      	sub	sp, #48	; 0x30
    7c0c:	af00      	add	r7, sp, #0
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    7c0e:	4b6c      	ldr	r3, [pc, #432]	; (7dc0 <cb_follow_le+0x1b8>)
    7c10:	881b      	ldrh	r3, [r3, #0]
    7c12:	b29b      	uxth	r3, r3
    7c14:	b2db      	uxtb	r3, r3
    7c16:	3b62      	subs	r3, #98	; 0x62
    7c18:	b2db      	uxtb	r3, r3
    7c1a:	4618      	mov	r0, r3
    7c1c:	f001 face 	bl	91bc <btle_channel_index>
    7c20:	4603      	mov	r3, r0
    7c22:	461a      	mov	r2, r3
    7c24:	4b67      	ldr	r3, [pc, #412]	; (7dc4 <cb_follow_le+0x1bc>)
    7c26:	5c9b      	ldrb	r3, [r3, r2]
    7c28:	623b      	str	r3, [r7, #32]

	u32 access_address = 0;
    7c2a:	2300      	movs	r3, #0
    7c2c:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < 31; ++i) {
    7c2e:	2300      	movs	r3, #0
    7c30:	62fb      	str	r3, [r7, #44]	; 0x2c
    7c32:	e00e      	b.n	7c52 <cb_follow_le+0x4a>
		access_address >>= 1;
    7c34:	69fb      	ldr	r3, [r7, #28]
    7c36:	085b      	lsrs	r3, r3, #1
    7c38:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    7c3a:	4a63      	ldr	r2, [pc, #396]	; (7dc8 <cb_follow_le+0x1c0>)
    7c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7c3e:	4413      	add	r3, r2
    7c40:	781b      	ldrb	r3, [r3, #0]
    7c42:	07db      	lsls	r3, r3, #31
    7c44:	461a      	mov	r2, r3
    7c46:	69fb      	ldr	r3, [r7, #28]
    7c48:	4313      	orrs	r3, r2
    7c4a:	61fb      	str	r3, [r7, #28]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    7c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7c4e:	3301      	adds	r3, #1
    7c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    7c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7c54:	2b1e      	cmp	r3, #30
    7c56:	dded      	ble.n	7c34 <cb_follow_le+0x2c>
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    7c58:	231f      	movs	r3, #31
    7c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    7c5c:	e0a6      	b.n	7dac <cb_follow_le+0x1a4>
		access_address >>= 1;
    7c5e:	69fb      	ldr	r3, [r7, #28]
    7c60:	085b      	lsrs	r3, r3, #1
    7c62:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    7c64:	4a58      	ldr	r2, [pc, #352]	; (7dc8 <cb_follow_le+0x1c0>)
    7c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7c68:	4413      	add	r3, r2
    7c6a:	781b      	ldrb	r3, [r3, #0]
    7c6c:	07db      	lsls	r3, r3, #31
    7c6e:	461a      	mov	r2, r3
    7c70:	69fb      	ldr	r3, [r7, #28]
    7c72:	4313      	orrs	r3, r2
    7c74:	61fb      	str	r3, [r7, #28]
		if (access_address == le.access_address) {
    7c76:	4b55      	ldr	r3, [pc, #340]	; (7dcc <cb_follow_le+0x1c4>)
    7c78:	681a      	ldr	r2, [r3, #0]
    7c7a:	69fb      	ldr	r3, [r7, #28]
    7c7c:	429a      	cmp	r2, r3
    7c7e:	f040 8092 	bne.w	7da6 <cb_follow_le+0x19e>
			for (j = 0; j < 46; ++j) {
    7c82:	2300      	movs	r3, #0
    7c84:	62bb      	str	r3, [r7, #40]	; 0x28
    7c86:	e048      	b.n	7d1a <cb_follow_le+0x112>
				u8 byte = 0;
    7c88:	2300      	movs	r3, #0
    7c8a:	76fb      	strb	r3, [r7, #27]
				for (k = 0; k < 8; k++) {
    7c8c:	2300      	movs	r3, #0
    7c8e:	627b      	str	r3, [r7, #36]	; 0x24
    7c90:	e037      	b.n	7d02 <cb_follow_le+0xfa>
					int offset = k + (j * 8) + i - 31;
    7c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7c94:	00da      	lsls	r2, r3, #3
    7c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7c98:	441a      	add	r2, r3
    7c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7c9c:	4413      	add	r3, r2
    7c9e:	3b1f      	subs	r3, #31
    7ca0:	613b      	str	r3, [r7, #16]
					if (offset >= DMA_SIZE*8*2) break;
    7ca2:	693b      	ldr	r3, [r7, #16]
    7ca4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    7ca8:	db00      	blt.n	7cac <cb_follow_le+0xa4>
    7caa:	e02d      	b.n	7d08 <cb_follow_le+0x100>
					int bit = unpacked[offset];
    7cac:	4a46      	ldr	r2, [pc, #280]	; (7dc8 <cb_follow_le+0x1c0>)
    7cae:	693b      	ldr	r3, [r7, #16]
    7cb0:	4413      	add	r3, r2
    7cb2:	781b      	ldrb	r3, [r3, #0]
    7cb4:	617b      	str	r3, [r7, #20]
					if (j >= 4) { // unwhiten data bytes
    7cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7cb8:	2b03      	cmp	r3, #3
    7cba:	dd16      	ble.n	7cea <cb_follow_le+0xe2>
						bit ^= whitening[idx];
    7cbc:	4a44      	ldr	r2, [pc, #272]	; (7dd0 <cb_follow_le+0x1c8>)
    7cbe:	6a3b      	ldr	r3, [r7, #32]
    7cc0:	4413      	add	r3, r2
    7cc2:	781b      	ldrb	r3, [r3, #0]
    7cc4:	461a      	mov	r2, r3
    7cc6:	697b      	ldr	r3, [r7, #20]
    7cc8:	4053      	eors	r3, r2
    7cca:	617b      	str	r3, [r7, #20]
						idx = (idx + 1) % sizeof(whitening);
    7ccc:	6a3b      	ldr	r3, [r7, #32]
    7cce:	3301      	adds	r3, #1
    7cd0:	4619      	mov	r1, r3
    7cd2:	4b40      	ldr	r3, [pc, #256]	; (7dd4 <cb_follow_le+0x1cc>)
    7cd4:	fba1 2303 	umull	r2, r3, r1, r3
    7cd8:	1ac8      	subs	r0, r1, r3
    7cda:	0840      	lsrs	r0, r0, #1
    7cdc:	4403      	add	r3, r0
    7cde:	099a      	lsrs	r2, r3, #6
    7ce0:	4613      	mov	r3, r2
    7ce2:	01db      	lsls	r3, r3, #7
    7ce4:	1a9b      	subs	r3, r3, r2
    7ce6:	1aca      	subs	r2, r1, r3
    7ce8:	623a      	str	r2, [r7, #32]
					}
					byte |= bit << k;
    7cea:	697a      	ldr	r2, [r7, #20]
    7cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7cee:	fa02 f303 	lsl.w	r3, r2, r3
    7cf2:	b2da      	uxtb	r2, r3
    7cf4:	7efb      	ldrb	r3, [r7, #27]
    7cf6:	4313      	orrs	r3, r2
    7cf8:	b2db      	uxtb	r3, r3
    7cfa:	76fb      	strb	r3, [r7, #27]
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    7cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7cfe:	3301      	adds	r3, #1
    7d00:	627b      	str	r3, [r7, #36]	; 0x24
    7d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7d04:	2b07      	cmp	r3, #7
    7d06:	ddc4      	ble.n	7c92 <cb_follow_le+0x8a>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    7d08:	4b33      	ldr	r3, [pc, #204]	; (7dd8 <cb_follow_le+0x1d0>)
    7d0a:	681a      	ldr	r2, [r3, #0]
    7d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d0e:	4413      	add	r3, r2
    7d10:	7efa      	ldrb	r2, [r7, #27]
    7d12:	701a      	strb	r2, [r3, #0]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    7d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d16:	3301      	adds	r3, #1
    7d18:	62bb      	str	r3, [r7, #40]	; 0x28
    7d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7d1c:	2b2d      	cmp	r3, #45	; 0x2d
    7d1e:	ddb3      	ble.n	7c88 <cb_follow_le+0x80>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    7d20:	4b2a      	ldr	r3, [pc, #168]	; (7dcc <cb_follow_le+0x1c4>)
    7d22:	691b      	ldr	r3, [r3, #16]
    7d24:	2b00      	cmp	r3, #0
    7d26:	d02e      	beq.n	7d86 <cb_follow_le+0x17e>
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    7d28:	4b2b      	ldr	r3, [pc, #172]	; (7dd8 <cb_follow_le+0x1d0>)
    7d2a:	681b      	ldr	r3, [r3, #0]
    7d2c:	3305      	adds	r3, #5
    7d2e:	781b      	ldrb	r3, [r3, #0]
    7d30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7d34:	3302      	adds	r3, #2
    7d36:	60fb      	str	r3, [r7, #12]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
    7d38:	4b24      	ldr	r3, [pc, #144]	; (7dcc <cb_follow_le+0x1c4>)
    7d3a:	68da      	ldr	r2, [r3, #12]
    7d3c:	4b26      	ldr	r3, [pc, #152]	; (7dd8 <cb_follow_le+0x1d0>)
    7d3e:	681b      	ldr	r3, [r3, #0]
    7d40:	3304      	adds	r3, #4
    7d42:	4610      	mov	r0, r2
    7d44:	4619      	mov	r1, r3
    7d46:	68fa      	ldr	r2, [r7, #12]
    7d48:	f001 fb3c 	bl	93c4 <btle_crcgen_lut>
    7d4c:	60b8      	str	r0, [r7, #8]
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    7d4e:	4b22      	ldr	r3, [pc, #136]	; (7dd8 <cb_follow_le+0x1d0>)
    7d50:	681a      	ldr	r2, [r3, #0]
    7d52:	68fb      	ldr	r3, [r7, #12]
    7d54:	3306      	adds	r3, #6
    7d56:	4413      	add	r3, r2
    7d58:	781b      	ldrb	r3, [r3, #0]
    7d5a:	041a      	lsls	r2, r3, #16
							 | (idle_rxbuf[4+len+1] << 8)
    7d5c:	4b1e      	ldr	r3, [pc, #120]	; (7dd8 <cb_follow_le+0x1d0>)
    7d5e:	6819      	ldr	r1, [r3, #0]
    7d60:	68fb      	ldr	r3, [r7, #12]
    7d62:	3305      	adds	r3, #5
    7d64:	440b      	add	r3, r1
    7d66:	781b      	ldrb	r3, [r3, #0]
    7d68:	021b      	lsls	r3, r3, #8
    7d6a:	4313      	orrs	r3, r2
							 |  idle_rxbuf[4+len+0];
    7d6c:	4a1a      	ldr	r2, [pc, #104]	; (7dd8 <cb_follow_le+0x1d0>)
    7d6e:	6812      	ldr	r2, [r2, #0]
    7d70:	68f9      	ldr	r1, [r7, #12]
    7d72:	3104      	adds	r1, #4
    7d74:	440a      	add	r2, r1
    7d76:	7812      	ldrb	r2, [r2, #0]
    7d78:	4313      	orrs	r3, r2

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    7d7a:	607b      	str	r3, [r7, #4]
							 | (idle_rxbuf[4+len+1] << 8)
							 |  idle_rxbuf[4+len+0];
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    7d7c:	68ba      	ldr	r2, [r7, #8]
    7d7e:	687b      	ldr	r3, [r7, #4]
    7d80:	429a      	cmp	r2, r3
    7d82:	d000      	beq.n	7d86 <cb_follow_le+0x17e>
					break;
    7d84:	e017      	b.n	7db6 <cb_follow_le+0x1ae>
			}

			// send to PC
			enqueue(LE_PACKET, idle_rxbuf);
    7d86:	4b14      	ldr	r3, [pc, #80]	; (7dd8 <cb_follow_le+0x1d0>)
    7d88:	681b      	ldr	r3, [r3, #0]
    7d8a:	2001      	movs	r0, #1
    7d8c:	4619      	mov	r1, r3
    7d8e:	f7fc fb9b 	bl	44c8 <enqueue>
			RXLED_SET;
    7d92:	4b12      	ldr	r3, [pc, #72]	; (7ddc <cb_follow_le+0x1d4>)
    7d94:	2210      	movs	r2, #16
    7d96:	601a      	str	r2, [r3, #0]

			packet_cb(idle_rxbuf);
    7d98:	4b11      	ldr	r3, [pc, #68]	; (7de0 <cb_follow_le+0x1d8>)
    7d9a:	681b      	ldr	r3, [r3, #0]
    7d9c:	4a0e      	ldr	r2, [pc, #56]	; (7dd8 <cb_follow_le+0x1d0>)
    7d9e:	6812      	ldr	r2, [r2, #0]
    7da0:	4610      	mov	r0, r2
    7da2:	4798      	blx	r3

			break;
    7da4:	e007      	b.n	7db6 <cb_follow_le+0x1ae>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    7da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7da8:	3301      	adds	r3, #1
    7daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    7dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7dae:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    7db2:	f6ff af54 	blt.w	7c5e <cb_follow_le+0x56>

			break;
		}
	}

	return 1;
    7db6:	2301      	movs	r3, #1
}
    7db8:	4618      	mov	r0, r3
    7dba:	3730      	adds	r7, #48	; 0x30
    7dbc:	46bd      	mov	sp, r7
    7dbe:	bd80      	pop	{r7, pc}
    7dc0:	1000049c 	.word	0x1000049c
    7dc4:	0000c764 	.word	0x0000c764
    7dc8:	10000d10 	.word	0x10000d10
    7dcc:	10000458 	.word	0x10000458
    7dd0:	0000c6e4 	.word	0x0000c6e4
    7dd4:	02040811 	.word	0x02040811
    7dd8:	10000454 	.word	0x10000454
    7ddc:	2009c038 	.word	0x2009c038
    7de0:	1000099c 	.word	0x1000099c

00007de4 <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    7de4:	b580      	push	{r7, lr}
    7de6:	b08a      	sub	sp, #40	; 0x28
    7de8:	af00      	add	r7, sp, #0
    7dea:	6078      	str	r0, [r7, #4]
	int i;
	u32 aa = 0;
    7dec:	2300      	movs	r3, #0
    7dee:	623b      	str	r3, [r7, #32]
#define ADV_ADDRESS_IDX 0
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
    7df0:	687b      	ldr	r3, [r7, #4]
    7df2:	61fb      	str	r3, [r7, #28]
	u8 header = packet[HEADER_IDX];
    7df4:	687b      	ldr	r3, [r7, #4]
    7df6:	791b      	ldrb	r3, [r3, #4]
    7df8:	76fb      	strb	r3, [r7, #27]
	u8 *data_len = &packet[DATA_LEN_IDX];
    7dfa:	687b      	ldr	r3, [r7, #4]
    7dfc:	3305      	adds	r3, #5
    7dfe:	617b      	str	r3, [r7, #20]
	u8 *data = &packet[DATA_START_IDX];
    7e00:	687b      	ldr	r3, [r7, #4]
    7e02:	3306      	adds	r3, #6
    7e04:	613b      	str	r3, [r7, #16]
	u8 *crc = &packet[DATA_START_IDX + *data_len];
    7e06:	697b      	ldr	r3, [r7, #20]
    7e08:	781b      	ldrb	r3, [r3, #0]
    7e0a:	3306      	adds	r3, #6
    7e0c:	461a      	mov	r2, r3
    7e0e:	687b      	ldr	r3, [r7, #4]
    7e10:	4413      	add	r3, r2
    7e12:	60fb      	str	r3, [r7, #12]

	if (le.link_state == LINK_CONN_PENDING) {
    7e14:	4b8b      	ldr	r3, [pc, #556]	; (8044 <connection_follow_cb+0x260>)
    7e16:	7d1b      	ldrb	r3, [r3, #20]
    7e18:	2b02      	cmp	r3, #2
    7e1a:	d11c      	bne.n	7e56 <connection_follow_cb+0x72>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    7e1c:	4b89      	ldr	r3, [pc, #548]	; (8044 <connection_follow_cb+0x260>)
    7e1e:	2203      	movs	r2, #3
    7e20:	751a      	strb	r2, [r3, #20]
		le.conn_epoch = clkn;
    7e22:	4b89      	ldr	r3, [pc, #548]	; (8048 <connection_follow_cb+0x264>)
    7e24:	681b      	ldr	r3, [r3, #0]
    7e26:	4a87      	ldr	r2, [pc, #540]	; (8044 <connection_follow_cb+0x260>)
    7e28:	6193      	str	r3, [r2, #24]
		le.interval_timer = le.conn_interval - 1;
    7e2a:	4b86      	ldr	r3, [pc, #536]	; (8044 <connection_follow_cb+0x260>)
    7e2c:	8bdb      	ldrh	r3, [r3, #30]
    7e2e:	3b01      	subs	r3, #1
    7e30:	b29a      	uxth	r2, r3
    7e32:	4b84      	ldr	r3, [pc, #528]	; (8044 <connection_follow_cb+0x260>)
    7e34:	839a      	strh	r2, [r3, #28]
		le.conn_count = 0;
    7e36:	4b83      	ldr	r3, [pc, #524]	; (8044 <connection_follow_cb+0x260>)
    7e38:	2200      	movs	r2, #0
    7e3a:	841a      	strh	r2, [r3, #32]
		le.update_pending = 0;
    7e3c:	4b81      	ldr	r3, [pc, #516]	; (8044 <connection_follow_cb+0x260>)
    7e3e:	2200      	movs	r2, #0
    7e40:	629a      	str	r2, [r3, #40]	; 0x28

		// hue hue hue
		if (jam_mode != JAM_NONE)
    7e42:	4b82      	ldr	r3, [pc, #520]	; (804c <connection_follow_cb+0x268>)
    7e44:	781b      	ldrb	r3, [r3, #0]
    7e46:	b2db      	uxtb	r3, r3
    7e48:	2b00      	cmp	r3, #0
    7e4a:	f000 80f7 	beq.w	803c <connection_follow_cb+0x258>
			le_jam_count = JAM_COUNT_DEFAULT;
    7e4e:	4b80      	ldr	r3, [pc, #512]	; (8050 <connection_follow_cb+0x26c>)
    7e50:	2228      	movs	r2, #40	; 0x28
    7e52:	601a      	str	r2, [r3, #0]
    7e54:	e0f2      	b.n	803c <connection_follow_cb+0x258>

	} else if (le.link_state == LINK_CONNECTED) {
    7e56:	4b7b      	ldr	r3, [pc, #492]	; (8044 <connection_follow_cb+0x260>)
    7e58:	7d1b      	ldrb	r3, [r3, #20]
    7e5a:	2b03      	cmp	r3, #3
    7e5c:	d16f      	bne.n	7f3e <connection_follow_cb+0x15a>
		u8 llid =  header & 0x03;
    7e5e:	7efb      	ldrb	r3, [r7, #27]
    7e60:	f003 0303 	and.w	r3, r3, #3
    7e64:	72fb      	strb	r3, [r7, #11]

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    7e66:	4b77      	ldr	r3, [pc, #476]	; (8044 <connection_follow_cb+0x260>)
    7e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7e6a:	2b00      	cmp	r3, #0
    7e6c:	d021      	beq.n	7eb2 <connection_follow_cb+0xce>
    7e6e:	4b75      	ldr	r3, [pc, #468]	; (8044 <connection_follow_cb+0x260>)
    7e70:	8c1b      	ldrh	r3, [r3, #32]
    7e72:	b29a      	uxth	r2, r3
    7e74:	4b73      	ldr	r3, [pc, #460]	; (8044 <connection_follow_cb+0x260>)
    7e76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    7e78:	429a      	cmp	r2, r3
    7e7a:	d11a      	bne.n	7eb2 <connection_follow_cb+0xce>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    7e7c:	4b72      	ldr	r3, [pc, #456]	; (8048 <connection_follow_cb+0x264>)
    7e7e:	681b      	ldr	r3, [r3, #0]
    7e80:	4a70      	ldr	r2, [pc, #448]	; (8044 <connection_follow_cb+0x260>)
    7e82:	6193      	str	r3, [r2, #24]
			le.conn_interval = le.interval_update;
    7e84:	4b6f      	ldr	r3, [pc, #444]	; (8044 <connection_follow_cb+0x260>)
    7e86:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    7e88:	4b6e      	ldr	r3, [pc, #440]	; (8044 <connection_follow_cb+0x260>)
    7e8a:	83da      	strh	r2, [r3, #30]
			le.interval_timer = le.interval_update - 1;
    7e8c:	4b6d      	ldr	r3, [pc, #436]	; (8044 <connection_follow_cb+0x260>)
    7e8e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    7e90:	3b01      	subs	r3, #1
    7e92:	b29a      	uxth	r2, r3
    7e94:	4b6b      	ldr	r3, [pc, #428]	; (8044 <connection_follow_cb+0x260>)
    7e96:	839a      	strh	r2, [r3, #28]
			le.win_size = le.win_size_update;
    7e98:	4b6a      	ldr	r3, [pc, #424]	; (8044 <connection_follow_cb+0x260>)
    7e9a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    7e9e:	4b69      	ldr	r3, [pc, #420]	; (8044 <connection_follow_cb+0x260>)
    7ea0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			le.win_offset = le.win_offset_update;
    7ea4:	4b67      	ldr	r3, [pc, #412]	; (8044 <connection_follow_cb+0x260>)
    7ea6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    7ea8:	4b66      	ldr	r3, [pc, #408]	; (8044 <connection_follow_cb+0x260>)
    7eaa:	849a      	strh	r2, [r3, #36]	; 0x24
			le.update_pending = 0;
    7eac:	4b65      	ldr	r3, [pc, #404]	; (8044 <connection_follow_cb+0x260>)
    7eae:	2200      	movs	r2, #0
    7eb0:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if (llid == 0x03 && data[0] == 0x00) {
    7eb2:	7afb      	ldrb	r3, [r7, #11]
    7eb4:	2b03      	cmp	r3, #3
    7eb6:	d141      	bne.n	7f3c <connection_follow_cb+0x158>
    7eb8:	693b      	ldr	r3, [r7, #16]
    7eba:	781b      	ldrb	r3, [r3, #0]
    7ebc:	2b00      	cmp	r3, #0
    7ebe:	d13d      	bne.n	7f3c <connection_follow_cb+0x158>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    7ec0:	687b      	ldr	r3, [r7, #4]
    7ec2:	79da      	ldrb	r2, [r3, #7]
    7ec4:	4b5f      	ldr	r3, [pc, #380]	; (8044 <connection_follow_cb+0x260>)
    7ec6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    7eca:	687b      	ldr	r3, [r7, #4]
    7ecc:	3308      	adds	r3, #8
    7ece:	781b      	ldrb	r3, [r3, #0]
    7ed0:	b29a      	uxth	r2, r3
    7ed2:	687b      	ldr	r3, [r7, #4]
    7ed4:	3309      	adds	r3, #9
    7ed6:	781b      	ldrb	r3, [r3, #0]
    7ed8:	b29b      	uxth	r3, r3
    7eda:	021b      	lsls	r3, r3, #8
    7edc:	b29b      	uxth	r3, r3
    7ede:	4413      	add	r3, r2
    7ee0:	b29a      	uxth	r2, r3
    7ee2:	4b58      	ldr	r3, [pc, #352]	; (8044 <connection_follow_cb+0x260>)
    7ee4:	865a      	strh	r2, [r3, #50]	; 0x32
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    7ee6:	687b      	ldr	r3, [r7, #4]
    7ee8:	330a      	adds	r3, #10
    7eea:	781b      	ldrb	r3, [r3, #0]
    7eec:	b29a      	uxth	r2, r3
    7eee:	687b      	ldr	r3, [r7, #4]
    7ef0:	330b      	adds	r3, #11
    7ef2:	781b      	ldrb	r3, [r3, #0]
    7ef4:	b29b      	uxth	r3, r3
    7ef6:	021b      	lsls	r3, r3, #8
    7ef8:	b29b      	uxth	r3, r3
    7efa:	4413      	add	r3, r2
    7efc:	b29a      	uxth	r2, r3
    7efe:	4b51      	ldr	r3, [pc, #324]	; (8044 <connection_follow_cb+0x260>)
    7f00:	85da      	strh	r2, [r3, #46]	; 0x2e
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    7f02:	687b      	ldr	r3, [r7, #4]
    7f04:	3310      	adds	r3, #16
    7f06:	781b      	ldrb	r3, [r3, #0]
    7f08:	b29a      	uxth	r2, r3
    7f0a:	687b      	ldr	r3, [r7, #4]
    7f0c:	3311      	adds	r3, #17
    7f0e:	781b      	ldrb	r3, [r3, #0]
    7f10:	b29b      	uxth	r3, r3
    7f12:	021b      	lsls	r3, r3, #8
    7f14:	b29b      	uxth	r3, r3
    7f16:	4413      	add	r3, r2
    7f18:	b29a      	uxth	r2, r3
    7f1a:	4b4a      	ldr	r3, [pc, #296]	; (8044 <connection_follow_cb+0x260>)
    7f1c:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (le.update_instant - le.conn_count < 32767)
    7f1e:	4b49      	ldr	r3, [pc, #292]	; (8044 <connection_follow_cb+0x260>)
    7f20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    7f22:	461a      	mov	r2, r3
    7f24:	4b47      	ldr	r3, [pc, #284]	; (8044 <connection_follow_cb+0x260>)
    7f26:	8c1b      	ldrh	r3, [r3, #32]
    7f28:	b29b      	uxth	r3, r3
    7f2a:	1ad3      	subs	r3, r2, r3
    7f2c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    7f30:	4293      	cmp	r3, r2
    7f32:	dc03      	bgt.n	7f3c <connection_follow_cb+0x158>
				le.update_pending = 1;
    7f34:	4b43      	ldr	r3, [pc, #268]	; (8044 <connection_follow_cb+0x260>)
    7f36:	2201      	movs	r2, #1
    7f38:	629a      	str	r2, [r3, #40]	; 0x28
    7f3a:	e07f      	b.n	803c <connection_follow_cb+0x258>
    7f3c:	e07e      	b.n	803c <connection_follow_cb+0x258>
		}

	} else if (le.link_state == LINK_LISTENING) {
    7f3e:	4b41      	ldr	r3, [pc, #260]	; (8044 <connection_follow_cb+0x260>)
    7f40:	7d1b      	ldrb	r3, [r3, #20]
    7f42:	2b01      	cmp	r3, #1
    7f44:	d17a      	bne.n	803c <connection_follow_cb+0x258>
		u8 pkt_type = packet[4] & 0x0F;
    7f46:	687b      	ldr	r3, [r7, #4]
    7f48:	3304      	adds	r3, #4
    7f4a:	781b      	ldrb	r3, [r3, #0]
    7f4c:	f003 030f 	and.w	r3, r3, #15
    7f50:	72bb      	strb	r3, [r7, #10]
		if (pkt_type == 0x05) {
    7f52:	7abb      	ldrb	r3, [r7, #10]
    7f54:	2b05      	cmp	r3, #5
    7f56:	d171      	bne.n	803c <connection_follow_cb+0x258>
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    7f58:	4b3a      	ldr	r3, [pc, #232]	; (8044 <connection_follow_cb+0x260>)
    7f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7f5c:	2b00      	cmp	r3, #0
    7f5e:	d014      	beq.n	7f8a <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    7f60:	687b      	ldr	r3, [r7, #4]
    7f62:	3306      	adds	r3, #6
    7f64:	483b      	ldr	r0, [pc, #236]	; (8054 <connection_follow_cb+0x270>)
    7f66:	4619      	mov	r1, r3
    7f68:	2206      	movs	r2, #6
    7f6a:	f004 fac1 	bl	c4f0 <memcmp>
    7f6e:	4603      	mov	r3, r0
	} else if (le.link_state == LINK_LISTENING) {
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    7f70:	2b00      	cmp	r3, #0
    7f72:	d00a      	beq.n	7f8a <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    7f74:	687b      	ldr	r3, [r7, #4]
    7f76:	330c      	adds	r3, #12
    7f78:	4836      	ldr	r0, [pc, #216]	; (8054 <connection_follow_cb+0x270>)
    7f7a:	4619      	mov	r1, r3
    7f7c:	2206      	movs	r2, #6
    7f7e:	f004 fab7 	bl	c4f0 <memcmp>
    7f82:	4603      	mov	r3, r0
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    7f84:	2b00      	cmp	r3, #0
    7f86:	d000      	beq.n	7f8a <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
    7f88:	e058      	b.n	803c <connection_follow_cb+0x258>
			}

			le.link_state = LINK_CONN_PENDING;
    7f8a:	4b2e      	ldr	r3, [pc, #184]	; (8044 <connection_follow_cb+0x260>)
    7f8c:	2202      	movs	r2, #2
    7f8e:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    7f90:	4b2c      	ldr	r3, [pc, #176]	; (8044 <connection_follow_cb+0x260>)
    7f92:	2200      	movs	r2, #0
    7f94:	611a      	str	r2, [r3, #16]

			for (i = 0; i < 4; ++i)
    7f96:	2300      	movs	r3, #0
    7f98:	627b      	str	r3, [r7, #36]	; 0x24
    7f9a:	e011      	b.n	7fc0 <connection_follow_cb+0x1dc>
				aa |= packet[18+i] << (i*8);
    7f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7f9e:	3312      	adds	r3, #18
    7fa0:	461a      	mov	r2, r3
    7fa2:	687b      	ldr	r3, [r7, #4]
    7fa4:	4413      	add	r3, r2
    7fa6:	781b      	ldrb	r3, [r3, #0]
    7fa8:	461a      	mov	r2, r3
    7faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7fac:	00db      	lsls	r3, r3, #3
    7fae:	fa02 f303 	lsl.w	r3, r2, r3
    7fb2:	461a      	mov	r2, r3
    7fb4:	6a3b      	ldr	r3, [r7, #32]
    7fb6:	4313      	orrs	r3, r2
    7fb8:	623b      	str	r3, [r7, #32]
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    7fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7fbc:	3301      	adds	r3, #1
    7fbe:	627b      	str	r3, [r7, #36]	; 0x24
    7fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7fc2:	2b03      	cmp	r3, #3
    7fc4:	ddea      	ble.n	7f9c <connection_follow_cb+0x1b8>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    7fc6:	6a38      	ldr	r0, [r7, #32]
    7fc8:	f7ff f97e 	bl	72c8 <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    7fcc:	687b      	ldr	r3, [r7, #4]
    7fce:	3318      	adds	r3, #24
    7fd0:	781b      	ldrb	r3, [r3, #0]
    7fd2:	041a      	lsls	r2, r3, #16
						| (packet[CRC_INIT+1] << 8)
    7fd4:	687b      	ldr	r3, [r7, #4]
    7fd6:	3317      	adds	r3, #23
    7fd8:	781b      	ldrb	r3, [r3, #0]
    7fda:	021b      	lsls	r3, r3, #8
    7fdc:	4313      	orrs	r3, r2
						|  packet[CRC_INIT+0];
    7fde:	687a      	ldr	r2, [r7, #4]
    7fe0:	3216      	adds	r2, #22
    7fe2:	7812      	ldrb	r2, [r2, #0]
    7fe4:	4313      	orrs	r3, r2
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    7fe6:	461a      	mov	r2, r3
    7fe8:	4b16      	ldr	r3, [pc, #88]	; (8044 <connection_follow_cb+0x260>)
    7fea:	609a      	str	r2, [r3, #8]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    7fec:	4b15      	ldr	r3, [pc, #84]	; (8044 <connection_follow_cb+0x260>)
    7fee:	689b      	ldr	r3, [r3, #8]
    7ff0:	4618      	mov	r0, r3
    7ff2:	f002 fb09 	bl	a608 <rbit>
    7ff6:	4602      	mov	r2, r0
    7ff8:	4b12      	ldr	r3, [pc, #72]	; (8044 <connection_follow_cb+0x260>)
    7ffa:	60da      	str	r2, [r3, #12]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    7ffc:	687b      	ldr	r3, [r7, #4]
    7ffe:	7e5a      	ldrb	r2, [r3, #25]
    8000:	4b10      	ldr	r3, [pc, #64]	; (8044 <connection_follow_cb+0x260>)
    8002:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    8006:	687b      	ldr	r3, [r7, #4]
    8008:	331a      	adds	r3, #26
    800a:	781b      	ldrb	r3, [r3, #0]
    800c:	b29a      	uxth	r2, r3
    800e:	4b0d      	ldr	r3, [pc, #52]	; (8044 <connection_follow_cb+0x260>)
    8010:	849a      	strh	r2, [r3, #36]	; 0x24

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = packet[CONN_INTERVAL];
    8012:	687b      	ldr	r3, [r7, #4]
    8014:	331c      	adds	r3, #28
    8016:	781b      	ldrb	r3, [r3, #0]
    8018:	b29a      	uxth	r2, r3
    801a:	4b0a      	ldr	r3, [pc, #40]	; (8044 <connection_follow_cb+0x260>)
    801c:	83da      	strh	r2, [r3, #30]

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    801e:	687b      	ldr	r3, [r7, #4]
    8020:	3327      	adds	r3, #39	; 0x27
    8022:	781b      	ldrb	r3, [r3, #0]
    8024:	f003 031f 	and.w	r3, r3, #31
    8028:	b2da      	uxtb	r2, r3
    802a:	4b06      	ldr	r3, [pc, #24]	; (8044 <connection_follow_cb+0x260>)
    802c:	759a      	strb	r2, [r3, #22]
			le.channel_idx = le.channel_increment;
    802e:	4b05      	ldr	r3, [pc, #20]	; (8044 <connection_follow_cb+0x260>)
    8030:	7d9a      	ldrb	r2, [r3, #22]
    8032:	4b04      	ldr	r3, [pc, #16]	; (8044 <connection_follow_cb+0x260>)
    8034:	755a      	strb	r2, [r3, #21]

			// Hop to the initial channel immediately
			do_hop = 1;
    8036:	4b08      	ldr	r3, [pc, #32]	; (8058 <connection_follow_cb+0x274>)
    8038:	2201      	movs	r2, #1
    803a:	701a      	strb	r2, [r3, #0]
		}
	}
}
    803c:	3728      	adds	r7, #40	; 0x28
    803e:	46bd      	mov	sp, r7
    8040:	bd80      	pop	{r7, pc}
    8042:	bf00      	nop
    8044:	10000458 	.word	0x10000458
    8048:	10000bec 	.word	0x10000bec
    804c:	10000a40 	.word	0x10000a40
    8050:	10000994 	.word	0x10000994
    8054:	1000048c 	.word	0x1000048c
    8058:	1000097d 	.word	0x1000097d

0000805c <bt_follow_le>:

void bt_follow_le() {
    805c:	b580      	push	{r7, lr}
    805e:	af00      	add	r7, sp, #0
	reset_le();
    8060:	f7ff f94c 	bl	72fc <reset_le>
	packet_cb = connection_follow_cb;
    8064:	4b04      	ldr	r3, [pc, #16]	; (8078 <bt_follow_le+0x1c>)
    8066:	4a05      	ldr	r2, [pc, #20]	; (807c <bt_follow_le+0x20>)
    8068:	601a      	str	r2, [r3, #0]
	bt_le_sync(MODE_BT_FOLLOW_LE);
    806a:	2009      	movs	r0, #9
    806c:	f7ff fb1e 	bl	76ac <bt_le_sync>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    8070:	4b03      	ldr	r3, [pc, #12]	; (8080 <bt_follow_le+0x24>)
    8072:	2200      	movs	r2, #0
    8074:	701a      	strb	r2, [r3, #0]
}
    8076:	bd80      	pop	{r7, pc}
    8078:	1000099c 	.word	0x1000099c
    807c:	00007de5 	.word	0x00007de5
    8080:	10000a3e 	.word	0x10000a3e

00008084 <le_promisc_state>:

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    8084:	b580      	push	{r7, lr}
    8086:	b092      	sub	sp, #72	; 0x48
    8088:	af00      	add	r7, sp, #0
    808a:	4603      	mov	r3, r0
    808c:	60b9      	str	r1, [r7, #8]
    808e:	607a      	str	r2, [r7, #4]
    8090:	73fb      	strb	r3, [r7, #15]
	u8 buf[50] = { 0, };
    8092:	f107 0314 	add.w	r3, r7, #20
    8096:	2200      	movs	r2, #0
    8098:	601a      	str	r2, [r3, #0]
    809a:	3304      	adds	r3, #4
    809c:	2200      	movs	r2, #0
    809e:	601a      	str	r2, [r3, #0]
    80a0:	3304      	adds	r3, #4
    80a2:	2200      	movs	r2, #0
    80a4:	601a      	str	r2, [r3, #0]
    80a6:	3304      	adds	r3, #4
    80a8:	2200      	movs	r2, #0
    80aa:	601a      	str	r2, [r3, #0]
    80ac:	3304      	adds	r3, #4
    80ae:	2200      	movs	r2, #0
    80b0:	601a      	str	r2, [r3, #0]
    80b2:	3304      	adds	r3, #4
    80b4:	2200      	movs	r2, #0
    80b6:	601a      	str	r2, [r3, #0]
    80b8:	3304      	adds	r3, #4
    80ba:	2200      	movs	r2, #0
    80bc:	601a      	str	r2, [r3, #0]
    80be:	3304      	adds	r3, #4
    80c0:	2200      	movs	r2, #0
    80c2:	601a      	str	r2, [r3, #0]
    80c4:	3304      	adds	r3, #4
    80c6:	2200      	movs	r2, #0
    80c8:	601a      	str	r2, [r3, #0]
    80ca:	3304      	adds	r3, #4
    80cc:	2200      	movs	r2, #0
    80ce:	601a      	str	r2, [r3, #0]
    80d0:	3304      	adds	r3, #4
    80d2:	2200      	movs	r2, #0
    80d4:	601a      	str	r2, [r3, #0]
    80d6:	3304      	adds	r3, #4
    80d8:	2200      	movs	r2, #0
    80da:	601a      	str	r2, [r3, #0]
    80dc:	3304      	adds	r3, #4
    80de:	2200      	movs	r2, #0
    80e0:	801a      	strh	r2, [r3, #0]
    80e2:	3302      	adds	r3, #2
	if (len > 49)
    80e4:	687b      	ldr	r3, [r7, #4]
    80e6:	2b31      	cmp	r3, #49	; 0x31
    80e8:	d901      	bls.n	80ee <le_promisc_state+0x6a>
		len = 49;
    80ea:	2331      	movs	r3, #49	; 0x31
    80ec:	607b      	str	r3, [r7, #4]

	buf[0] = type;
    80ee:	7bfb      	ldrb	r3, [r7, #15]
    80f0:	753b      	strb	r3, [r7, #20]
	memcpy(&buf[1], data, len);
    80f2:	f107 0314 	add.w	r3, r7, #20
    80f6:	3301      	adds	r3, #1
    80f8:	4618      	mov	r0, r3
    80fa:	68b9      	ldr	r1, [r7, #8]
    80fc:	687a      	ldr	r2, [r7, #4]
    80fe:	f004 fa29 	bl	c554 <memcpy>
	enqueue(LE_PROMISC, buf);
    8102:	f107 0314 	add.w	r3, r7, #20
    8106:	2005      	movs	r0, #5
    8108:	4619      	mov	r1, r3
    810a:	f7fc f9dd 	bl	44c8 <enqueue>
}
    810e:	3748      	adds	r7, #72	; 0x48
    8110:	46bd      	mov	sp, r7
    8112:	bd80      	pop	{r7, pc}

00008114 <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    8114:	b580      	push	{r7, lr}
    8116:	b084      	sub	sp, #16
    8118:	af00      	add	r7, sp, #0
    811a:	6078      	str	r0, [r7, #4]
	static u32 first_ts = 0;
	if (channel == 2404) {
    811c:	4b55      	ldr	r3, [pc, #340]	; (8274 <promisc_recover_hop_increment+0x160>)
    811e:	881b      	ldrh	r3, [r3, #0]
    8120:	b29b      	uxth	r3, r3
    8122:	f640 1264 	movw	r2, #2404	; 0x964
    8126:	4293      	cmp	r3, r2
    8128:	d114      	bne.n	8154 <promisc_recover_hop_increment+0x40>
		first_ts = CLK100NS;
    812a:	4b53      	ldr	r3, [pc, #332]	; (8278 <promisc_recover_hop_increment+0x164>)
    812c:	681b      	ldr	r3, [r3, #0]
    812e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8132:	f640 4235 	movw	r2, #3125	; 0xc35
    8136:	fb02 f203 	mul.w	r2, r2, r3
    813a:	4b50      	ldr	r3, [pc, #320]	; (827c <promisc_recover_hop_increment+0x168>)
    813c:	681b      	ldr	r3, [r3, #0]
    813e:	4413      	add	r3, r2
    8140:	4a4f      	ldr	r2, [pc, #316]	; (8280 <promisc_recover_hop_increment+0x16c>)
    8142:	6013      	str	r3, [r2, #0]
		hop_direct_channel = 2406;
    8144:	4b4f      	ldr	r3, [pc, #316]	; (8284 <promisc_recover_hop_increment+0x170>)
    8146:	f640 1266 	movw	r2, #2406	; 0x966
    814a:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    814c:	4b4e      	ldr	r3, [pc, #312]	; (8288 <promisc_recover_hop_increment+0x174>)
    814e:	2201      	movs	r2, #1
    8150:	701a      	strb	r2, [r3, #0]
    8152:	e08b      	b.n	826c <promisc_recover_hop_increment+0x158>
	} else if (channel == 2406) {
    8154:	4b47      	ldr	r3, [pc, #284]	; (8274 <promisc_recover_hop_increment+0x160>)
    8156:	881b      	ldrh	r3, [r3, #0]
    8158:	b29b      	uxth	r3, r3
    815a:	f640 1266 	movw	r2, #2406	; 0x966
    815e:	4293      	cmp	r3, r2
    8160:	d17d      	bne.n	825e <promisc_recover_hop_increment+0x14a>
		u32 second_ts = CLK100NS;
    8162:	4b45      	ldr	r3, [pc, #276]	; (8278 <promisc_recover_hop_increment+0x164>)
    8164:	681b      	ldr	r3, [r3, #0]
    8166:	f3c3 0313 	ubfx	r3, r3, #0, #20
    816a:	f640 4235 	movw	r2, #3125	; 0xc35
    816e:	fb02 f203 	mul.w	r2, r2, r3
    8172:	4b42      	ldr	r3, [pc, #264]	; (827c <promisc_recover_hop_increment+0x168>)
    8174:	681b      	ldr	r3, [r3, #0]
    8176:	4413      	add	r3, r2
    8178:	60fb      	str	r3, [r7, #12]
		if (second_ts < first_ts)
    817a:	4b41      	ldr	r3, [pc, #260]	; (8280 <promisc_recover_hop_increment+0x16c>)
    817c:	681b      	ldr	r3, [r3, #0]
    817e:	68fa      	ldr	r2, [r7, #12]
    8180:	429a      	cmp	r2, r3
    8182:	d205      	bcs.n	8190 <promisc_recover_hop_increment+0x7c>
			second_ts += 3276800000; // handle rollover
    8184:	68fb      	ldr	r3, [r7, #12]
    8186:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    818a:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    818e:	60fb      	str	r3, [r7, #12]
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    8190:	4b3b      	ldr	r3, [pc, #236]	; (8280 <promisc_recover_hop_increment+0x16c>)
    8192:	681b      	ldr	r3, [r3, #0]
    8194:	68fa      	ldr	r2, [r7, #12]
    8196:	1ad2      	subs	r2, r2, r3
    8198:	4b3c      	ldr	r3, [pc, #240]	; (828c <promisc_recover_hop_increment+0x178>)
    819a:	8bdb      	ldrh	r3, [r3, #30]
    819c:	4619      	mov	r1, r3
    819e:	f243 03d4 	movw	r3, #12500	; 0x30d4
    81a2:	fb03 f301 	mul.w	r3, r3, r1
    81a6:	0fd9      	lsrs	r1, r3, #31
    81a8:	440b      	add	r3, r1
    81aa:	105b      	asrs	r3, r3, #1
    81ac:	4413      	add	r3, r2
    81ae:	4a37      	ldr	r2, [pc, #220]	; (828c <promisc_recover_hop_increment+0x178>)
    81b0:	8bd2      	ldrh	r2, [r2, #30]
    81b2:	4611      	mov	r1, r2
    81b4:	f243 02d4 	movw	r2, #12500	; 0x30d4
    81b8:	fb02 f201 	mul.w	r2, r2, r1
    81bc:	fbb3 f3f2 	udiv	r3, r3, r2
    81c0:	60bb      	str	r3, [r7, #8]
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    81c2:	68bb      	ldr	r3, [r7, #8]
    81c4:	2b24      	cmp	r3, #36	; 0x24
    81c6:	d842      	bhi.n	824e <promisc_recover_hop_increment+0x13a>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    81c8:	4a31      	ldr	r2, [pc, #196]	; (8290 <promisc_recover_hop_increment+0x17c>)
    81ca:	68bb      	ldr	r3, [r7, #8]
    81cc:	4413      	add	r3, r2
    81ce:	781a      	ldrb	r2, [r3, #0]
    81d0:	4b2e      	ldr	r3, [pc, #184]	; (828c <promisc_recover_hop_increment+0x178>)
    81d2:	759a      	strb	r2, [r3, #22]
			le.interval_timer = le.conn_interval / 2;
    81d4:	4b2d      	ldr	r3, [pc, #180]	; (828c <promisc_recover_hop_increment+0x178>)
    81d6:	8bdb      	ldrh	r3, [r3, #30]
    81d8:	085b      	lsrs	r3, r3, #1
    81da:	b29a      	uxth	r2, r3
    81dc:	4b2b      	ldr	r3, [pc, #172]	; (828c <promisc_recover_hop_increment+0x178>)
    81de:	839a      	strh	r2, [r3, #28]
			le.conn_count = 0;
    81e0:	4b2a      	ldr	r3, [pc, #168]	; (828c <promisc_recover_hop_increment+0x178>)
    81e2:	2200      	movs	r2, #0
    81e4:	841a      	strh	r2, [r3, #32]
			le.conn_epoch = 0;
    81e6:	4b29      	ldr	r3, [pc, #164]	; (828c <promisc_recover_hop_increment+0x178>)
    81e8:	2200      	movs	r2, #0
    81ea:	619a      	str	r2, [r3, #24]
			do_hop = 0;
    81ec:	4b26      	ldr	r3, [pc, #152]	; (8288 <promisc_recover_hop_increment+0x174>)
    81ee:	2200      	movs	r2, #0
    81f0:	701a      	strb	r2, [r3, #0]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    81f2:	4b26      	ldr	r3, [pc, #152]	; (828c <promisc_recover_hop_increment+0x178>)
    81f4:	7d9b      	ldrb	r3, [r3, #22]
    81f6:	1c5a      	adds	r2, r3, #1
    81f8:	4b26      	ldr	r3, [pc, #152]	; (8294 <promisc_recover_hop_increment+0x180>)
    81fa:	fb82 0103 	smull	r0, r1, r2, r3
    81fe:	1853      	adds	r3, r2, r1
    8200:	1159      	asrs	r1, r3, #5
    8202:	17d3      	asrs	r3, r2, #31
    8204:	1ac9      	subs	r1, r1, r3
    8206:	460b      	mov	r3, r1
    8208:	00db      	lsls	r3, r3, #3
    820a:	440b      	add	r3, r1
    820c:	009b      	lsls	r3, r3, #2
    820e:	440b      	add	r3, r1
    8210:	1ad1      	subs	r1, r2, r3
    8212:	b2ca      	uxtb	r2, r1
    8214:	4b1d      	ldr	r3, [pc, #116]	; (828c <promisc_recover_hop_increment+0x178>)
    8216:	755a      	strb	r2, [r3, #21]
			le.link_state = LINK_CONNECTED;
    8218:	4b1c      	ldr	r3, [pc, #112]	; (828c <promisc_recover_hop_increment+0x178>)
    821a:	2203      	movs	r2, #3
    821c:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0;
    821e:	4b1b      	ldr	r3, [pc, #108]	; (828c <promisc_recover_hop_increment+0x178>)
    8220:	2200      	movs	r2, #0
    8222:	611a      	str	r2, [r3, #16]
			hop_mode = HOP_BTLE;
    8224:	4b1c      	ldr	r3, [pc, #112]	; (8298 <promisc_recover_hop_increment+0x184>)
    8226:	2203      	movs	r2, #3
    8228:	701a      	strb	r2, [r3, #0]
			packet_cb = connection_follow_cb;
    822a:	4b1c      	ldr	r3, [pc, #112]	; (829c <promisc_recover_hop_increment+0x188>)
    822c:	4a1c      	ldr	r2, [pc, #112]	; (82a0 <promisc_recover_hop_increment+0x18c>)
    822e:	601a      	str	r2, [r3, #0]
			le_promisc_state(3, &le.channel_increment, 1);
    8230:	2003      	movs	r0, #3
    8232:	491c      	ldr	r1, [pc, #112]	; (82a4 <promisc_recover_hop_increment+0x190>)
    8234:	2201      	movs	r2, #1
    8236:	f7ff ff25 	bl	8084 <le_promisc_state>

			if (jam_mode != JAM_NONE)
    823a:	4b1b      	ldr	r3, [pc, #108]	; (82a8 <promisc_recover_hop_increment+0x194>)
    823c:	781b      	ldrb	r3, [r3, #0]
    823e:	b2db      	uxtb	r3, r3
    8240:	2b00      	cmp	r3, #0
    8242:	d003      	beq.n	824c <promisc_recover_hop_increment+0x138>
				le_jam_count = JAM_COUNT_DEFAULT;
    8244:	4b19      	ldr	r3, [pc, #100]	; (82ac <promisc_recover_hop_increment+0x198>)
    8246:	2228      	movs	r2, #40	; 0x28
    8248:	601a      	str	r2, [r3, #0]

			return;
    824a:	e00f      	b.n	826c <promisc_recover_hop_increment+0x158>
    824c:	e00e      	b.n	826c <promisc_recover_hop_increment+0x158>
		}
		hop_direct_channel = 2404;
    824e:	4b0d      	ldr	r3, [pc, #52]	; (8284 <promisc_recover_hop_increment+0x170>)
    8250:	f640 1264 	movw	r2, #2404	; 0x964
    8254:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    8256:	4b0c      	ldr	r3, [pc, #48]	; (8288 <promisc_recover_hop_increment+0x174>)
    8258:	2201      	movs	r2, #1
    825a:	701a      	strb	r2, [r3, #0]
    825c:	e006      	b.n	826c <promisc_recover_hop_increment+0x158>
	}
	else {
		hop_direct_channel = 2404;
    825e:	4b09      	ldr	r3, [pc, #36]	; (8284 <promisc_recover_hop_increment+0x170>)
    8260:	f640 1264 	movw	r2, #2404	; 0x964
    8264:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    8266:	4b08      	ldr	r3, [pc, #32]	; (8288 <promisc_recover_hop_increment+0x174>)
    8268:	2201      	movs	r2, #1
    826a:	701a      	strb	r2, [r3, #0]
	}
}
    826c:	3710      	adds	r7, #16
    826e:	46bd      	mov	sp, r7
    8270:	bd80      	pop	{r7, pc}
    8272:	bf00      	nop
    8274:	1000049c 	.word	0x1000049c
    8278:	10000bec 	.word	0x10000bec
    827c:	40004008 	.word	0x40004008
    8280:	10000a54 	.word	0x10000a54
    8284:	10000980 	.word	0x10000980
    8288:	1000097d 	.word	0x1000097d
    828c:	10000458 	.word	0x10000458
    8290:	0000c78c 	.word	0x0000c78c
    8294:	dd67c8a7 	.word	0xdd67c8a7
    8298:	1000097c 	.word	0x1000097c
    829c:	1000099c 	.word	0x1000099c
    82a0:	00007de5 	.word	0x00007de5
    82a4:	1000046e 	.word	0x1000046e
    82a8:	10000a40 	.word	0x10000a40
    82ac:	10000994 	.word	0x10000994

000082b0 <promisc_recover_hop_interval>:

void promisc_recover_hop_interval(u8 *packet) {
    82b0:	b580      	push	{r7, lr}
    82b2:	b086      	sub	sp, #24
    82b4:	af00      	add	r7, sp, #0
    82b6:	6078      	str	r0, [r7, #4]
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    82b8:	4b33      	ldr	r3, [pc, #204]	; (8388 <promisc_recover_hop_interval+0xd8>)
    82ba:	681b      	ldr	r3, [r3, #0]
    82bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
    82c0:	f640 4235 	movw	r2, #3125	; 0xc35
    82c4:	fb02 f203 	mul.w	r2, r2, r3
    82c8:	4b30      	ldr	r3, [pc, #192]	; (838c <promisc_recover_hop_interval+0xdc>)
    82ca:	681b      	ldr	r3, [r3, #0]
    82cc:	4413      	add	r3, r2
    82ce:	617b      	str	r3, [r7, #20]
	if (cur_clk < prev_clk)
    82d0:	4b2f      	ldr	r3, [pc, #188]	; (8390 <promisc_recover_hop_interval+0xe0>)
    82d2:	681b      	ldr	r3, [r3, #0]
    82d4:	697a      	ldr	r2, [r7, #20]
    82d6:	429a      	cmp	r2, r3
    82d8:	d203      	bcs.n	82e2 <promisc_recover_hop_interval+0x32>
		cur_clk += 3267800000; // handle rollover
    82da:	697a      	ldr	r2, [r7, #20]
    82dc:	4b2d      	ldr	r3, [pc, #180]	; (8394 <promisc_recover_hop_interval+0xe4>)
    82de:	4413      	add	r3, r2
    82e0:	617b      	str	r3, [r7, #20]
	u32 clk_diff = cur_clk - prev_clk;
    82e2:	4b2b      	ldr	r3, [pc, #172]	; (8390 <promisc_recover_hop_interval+0xe0>)
    82e4:	681b      	ldr	r3, [r3, #0]
    82e6:	697a      	ldr	r2, [r7, #20]
    82e8:	1ad3      	subs	r3, r2, r3
    82ea:	613b      	str	r3, [r7, #16]
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    82ec:	693b      	ldr	r3, [r7, #16]
    82ee:	f246 12a7 	movw	r2, #24999	; 0x61a7
    82f2:	4293      	cmp	r3, r2
    82f4:	d800      	bhi.n	82f8 <promisc_recover_hop_interval+0x48>
		return;
    82f6:	e043      	b.n	8380 <promisc_recover_hop_interval+0xd0>

	if (clk_diff < le_promisc.smallest_hop_interval)
    82f8:	4b27      	ldr	r3, [pc, #156]	; (8398 <promisc_recover_hop_interval+0xe8>)
    82fa:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    82fe:	693b      	ldr	r3, [r7, #16]
    8300:	429a      	cmp	r2, r3
    8302:	d903      	bls.n	830c <promisc_recover_hop_interval+0x5c>
		le_promisc.smallest_hop_interval = clk_diff;
    8304:	4a24      	ldr	r2, [pc, #144]	; (8398 <promisc_recover_hop_interval+0xe8>)
    8306:	693b      	ldr	r3, [r7, #16]
    8308:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    830c:	4b22      	ldr	r3, [pc, #136]	; (8398 <promisc_recover_hop_interval+0xe8>)
    830e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    8312:	f503 3361 	add.w	r3, r3, #230400	; 0x38400
    8316:	f203 3352 	addw	r3, r3, #850	; 0x352
    831a:	4a20      	ldr	r2, [pc, #128]	; (839c <promisc_recover_hop_interval+0xec>)
    831c:	fba2 2303 	umull	r2, r3, r2, r3
    8320:	0c9b      	lsrs	r3, r3, #18
    8322:	81fb      	strh	r3, [r7, #14]

	if (le.conn_interval == obsv_hop_interval) {
    8324:	4b1e      	ldr	r3, [pc, #120]	; (83a0 <promisc_recover_hop_interval+0xf0>)
    8326:	8bdb      	ldrh	r3, [r3, #30]
    8328:	89fa      	ldrh	r2, [r7, #14]
    832a:	429a      	cmp	r2, r3
    832c:	d11e      	bne.n	836c <promisc_recover_hop_interval+0xbc>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    832e:	4b1a      	ldr	r3, [pc, #104]	; (8398 <promisc_recover_hop_interval+0xe8>)
    8330:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    8334:	3301      	adds	r3, #1
    8336:	4a18      	ldr	r2, [pc, #96]	; (8398 <promisc_recover_hop_interval+0xe8>)
    8338:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    833c:	4b16      	ldr	r3, [pc, #88]	; (8398 <promisc_recover_hop_interval+0xe8>)
    833e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    8342:	2b05      	cmp	r3, #5
    8344:	d119      	bne.n	837a <promisc_recover_hop_interval+0xca>
			packet_cb = promisc_recover_hop_increment;
    8346:	4b17      	ldr	r3, [pc, #92]	; (83a4 <promisc_recover_hop_interval+0xf4>)
    8348:	4a17      	ldr	r2, [pc, #92]	; (83a8 <promisc_recover_hop_interval+0xf8>)
    834a:	601a      	str	r2, [r3, #0]
			hop_direct_channel = 2404;
    834c:	4b17      	ldr	r3, [pc, #92]	; (83ac <promisc_recover_hop_interval+0xfc>)
    834e:	f640 1264 	movw	r2, #2404	; 0x964
    8352:	801a      	strh	r2, [r3, #0]
			hop_mode = HOP_DIRECT;
    8354:	4b16      	ldr	r3, [pc, #88]	; (83b0 <promisc_recover_hop_interval+0x100>)
    8356:	2204      	movs	r2, #4
    8358:	701a      	strb	r2, [r3, #0]
			do_hop = 1;
    835a:	4b16      	ldr	r3, [pc, #88]	; (83b4 <promisc_recover_hop_interval+0x104>)
    835c:	2201      	movs	r2, #1
    835e:	701a      	strb	r2, [r3, #0]
			le_promisc_state(2, &le.conn_interval, 2);
    8360:	2002      	movs	r0, #2
    8362:	4915      	ldr	r1, [pc, #84]	; (83b8 <promisc_recover_hop_interval+0x108>)
    8364:	2202      	movs	r2, #2
    8366:	f7ff fe8d 	bl	8084 <le_promisc_state>
    836a:	e006      	b.n	837a <promisc_recover_hop_interval+0xca>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    836c:	4a0c      	ldr	r2, [pc, #48]	; (83a0 <promisc_recover_hop_interval+0xf0>)
    836e:	89fb      	ldrh	r3, [r7, #14]
    8370:	83d3      	strh	r3, [r2, #30]
		le_promisc.consec_intervals = 0;
    8372:	4b09      	ldr	r3, [pc, #36]	; (8398 <promisc_recover_hop_interval+0xe8>)
    8374:	2200      	movs	r2, #0
    8376:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	prev_clk = cur_clk;
    837a:	4a05      	ldr	r2, [pc, #20]	; (8390 <promisc_recover_hop_interval+0xe0>)
    837c:	697b      	ldr	r3, [r7, #20]
    837e:	6013      	str	r3, [r2, #0]
}
    8380:	3718      	adds	r7, #24
    8382:	46bd      	mov	sp, r7
    8384:	bd80      	pop	{r7, pc}
    8386:	bf00      	nop
    8388:	10000bec 	.word	0x10000bec
    838c:	40004008 	.word	0x40004008
    8390:	10000a58 	.word	0x10000a58
    8394:	c2c6abc0 	.word	0xc2c6abc0
    8398:	10000bf8 	.word	0x10000bf8
    839c:	9119a9c1 	.word	0x9119a9c1
    83a0:	10000458 	.word	0x10000458
    83a4:	1000099c 	.word	0x1000099c
    83a8:	00008115 	.word	0x00008115
    83ac:	10000980 	.word	0x10000980
    83b0:	1000097c 	.word	0x1000097c
    83b4:	1000097d 	.word	0x1000097d
    83b8:	10000476 	.word	0x10000476

000083bc <promisc_follow_cb>:

void promisc_follow_cb(u8 *packet) {
    83bc:	b580      	push	{r7, lr}
    83be:	b084      	sub	sp, #16
    83c0:	af00      	add	r7, sp, #0
    83c2:	6078      	str	r0, [r7, #4]
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    83c4:	4b28      	ldr	r3, [pc, #160]	; (8468 <promisc_follow_cb+0xac>)
    83c6:	691b      	ldr	r3, [r3, #16]
    83c8:	2b00      	cmp	r3, #0
    83ca:	d149      	bne.n	8460 <promisc_follow_cb+0xa4>
    83cc:	687b      	ldr	r3, [r7, #4]
    83ce:	3304      	adds	r3, #4
    83d0:	781b      	ldrb	r3, [r3, #0]
    83d2:	2b01      	cmp	r3, #1
    83d4:	d144      	bne.n	8460 <promisc_follow_cb+0xa4>
    83d6:	687b      	ldr	r3, [r7, #4]
    83d8:	3305      	adds	r3, #5
    83da:	781b      	ldrb	r3, [r3, #0]
    83dc:	2b00      	cmp	r3, #0
    83de:	d13f      	bne.n	8460 <promisc_follow_cb+0xa4>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    83e0:	687b      	ldr	r3, [r7, #4]
    83e2:	3308      	adds	r3, #8
    83e4:	781b      	ldrb	r3, [r3, #0]
    83e6:	041a      	lsls	r2, r3, #16
    83e8:	687b      	ldr	r3, [r7, #4]
    83ea:	3307      	adds	r3, #7
    83ec:	781b      	ldrb	r3, [r3, #0]
    83ee:	021b      	lsls	r3, r3, #8
    83f0:	4313      	orrs	r3, r2
    83f2:	687a      	ldr	r2, [r7, #4]
    83f4:	3206      	adds	r2, #6
    83f6:	7812      	ldrb	r2, [r2, #0]
    83f8:	4313      	orrs	r3, r2
    83fa:	60bb      	str	r3, [r7, #8]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    83fc:	687b      	ldr	r3, [r7, #4]
    83fe:	3304      	adds	r3, #4
    8400:	68b8      	ldr	r0, [r7, #8]
    8402:	4619      	mov	r1, r3
    8404:	2202      	movs	r2, #2
    8406:	f000 ff7b 	bl	9300 <btle_reverse_crc>
    840a:	4602      	mov	r2, r0
    840c:	4b16      	ldr	r3, [pc, #88]	; (8468 <promisc_follow_cb+0xac>)
    840e:	609a      	str	r2, [r3, #8]
		le.crc_init_reversed = 0;
    8410:	4b15      	ldr	r3, [pc, #84]	; (8468 <promisc_follow_cb+0xac>)
    8412:	2200      	movs	r2, #0
    8414:	60da      	str	r2, [r3, #12]
		for (i = 0; i < 24; ++i)
    8416:	2300      	movs	r3, #0
    8418:	60fb      	str	r3, [r7, #12]
    841a:	e013      	b.n	8444 <promisc_follow_cb+0x88>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    841c:	4b12      	ldr	r3, [pc, #72]	; (8468 <promisc_follow_cb+0xac>)
    841e:	68da      	ldr	r2, [r3, #12]
    8420:	4b11      	ldr	r3, [pc, #68]	; (8468 <promisc_follow_cb+0xac>)
    8422:	6899      	ldr	r1, [r3, #8]
    8424:	68fb      	ldr	r3, [r7, #12]
    8426:	fa21 f303 	lsr.w	r3, r1, r3
    842a:	f003 0101 	and.w	r1, r3, #1
    842e:	68fb      	ldr	r3, [r7, #12]
    8430:	f1c3 0317 	rsb	r3, r3, #23
    8434:	fa01 f303 	lsl.w	r3, r1, r3
    8438:	4313      	orrs	r3, r2
    843a:	4a0b      	ldr	r2, [pc, #44]	; (8468 <promisc_follow_cb+0xac>)
    843c:	60d3      	str	r3, [r2, #12]
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    843e:	68fb      	ldr	r3, [r7, #12]
    8440:	3301      	adds	r3, #1
    8442:	60fb      	str	r3, [r7, #12]
    8444:	68fb      	ldr	r3, [r7, #12]
    8446:	2b17      	cmp	r3, #23
    8448:	dde8      	ble.n	841c <promisc_follow_cb+0x60>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    844a:	4b07      	ldr	r3, [pc, #28]	; (8468 <promisc_follow_cb+0xac>)
    844c:	2201      	movs	r2, #1
    844e:	611a      	str	r2, [r3, #16]
		packet_cb = promisc_recover_hop_interval;
    8450:	4b06      	ldr	r3, [pc, #24]	; (846c <promisc_follow_cb+0xb0>)
    8452:	4a07      	ldr	r2, [pc, #28]	; (8470 <promisc_follow_cb+0xb4>)
    8454:	601a      	str	r2, [r3, #0]
		le_promisc_state(1, &le.crc_init, 3);
    8456:	2001      	movs	r0, #1
    8458:	4906      	ldr	r1, [pc, #24]	; (8474 <promisc_follow_cb+0xb8>)
    845a:	2203      	movs	r2, #3
    845c:	f7ff fe12 	bl	8084 <le_promisc_state>
	}
}
    8460:	3710      	adds	r7, #16
    8462:	46bd      	mov	sp, r7
    8464:	bd80      	pop	{r7, pc}
    8466:	bf00      	nop
    8468:	10000458 	.word	0x10000458
    846c:	1000099c 	.word	0x1000099c
    8470:	000082b1 	.word	0x000082b1
    8474:	10000460 	.word	0x10000460

00008478 <see_aa>:

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    8478:	b480      	push	{r7}
    847a:	b087      	sub	sp, #28
    847c:	af00      	add	r7, sp, #0
    847e:	6078      	str	r0, [r7, #4]
	int i, max = -1, killme = -1;
    8480:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8484:	613b      	str	r3, [r7, #16]
    8486:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    848a:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < AA_LIST_SIZE; ++i)
    848c:	2300      	movs	r3, #0
    848e:	617b      	str	r3, [r7, #20]
    8490:	e015      	b.n	84be <see_aa+0x46>
		if (le_promisc.active_aa[i].aa == aa) {
    8492:	4a22      	ldr	r2, [pc, #136]	; (851c <see_aa+0xa4>)
    8494:	697b      	ldr	r3, [r7, #20]
    8496:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    849a:	687b      	ldr	r3, [r7, #4]
    849c:	429a      	cmp	r2, r3
    849e:	d10b      	bne.n	84b8 <see_aa+0x40>
			++le_promisc.active_aa[i].count;
    84a0:	4a1e      	ldr	r2, [pc, #120]	; (851c <see_aa+0xa4>)
    84a2:	697b      	ldr	r3, [r7, #20]
    84a4:	00db      	lsls	r3, r3, #3
    84a6:	4413      	add	r3, r2
    84a8:	685b      	ldr	r3, [r3, #4]
    84aa:	1c5a      	adds	r2, r3, #1
    84ac:	491b      	ldr	r1, [pc, #108]	; (851c <see_aa+0xa4>)
    84ae:	697b      	ldr	r3, [r7, #20]
    84b0:	00db      	lsls	r3, r3, #3
    84b2:	440b      	add	r3, r1
    84b4:	605a      	str	r2, [r3, #4]
			return;
    84b6:	e02c      	b.n	8512 <see_aa+0x9a>
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    84b8:	697b      	ldr	r3, [r7, #20]
    84ba:	3301      	adds	r3, #1
    84bc:	617b      	str	r3, [r7, #20]
    84be:	697b      	ldr	r3, [r7, #20]
    84c0:	2b1f      	cmp	r3, #31
    84c2:	dde6      	ble.n	8492 <see_aa+0x1a>
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    84c4:	2300      	movs	r3, #0
    84c6:	617b      	str	r3, [r7, #20]
    84c8:	e015      	b.n	84f6 <see_aa+0x7e>
		if (le_promisc.active_aa[i].count < max || max < 0) {
    84ca:	4a14      	ldr	r2, [pc, #80]	; (851c <see_aa+0xa4>)
    84cc:	697b      	ldr	r3, [r7, #20]
    84ce:	00db      	lsls	r3, r3, #3
    84d0:	4413      	add	r3, r2
    84d2:	685a      	ldr	r2, [r3, #4]
    84d4:	693b      	ldr	r3, [r7, #16]
    84d6:	429a      	cmp	r2, r3
    84d8:	db02      	blt.n	84e0 <see_aa+0x68>
    84da:	693b      	ldr	r3, [r7, #16]
    84dc:	2b00      	cmp	r3, #0
    84de:	da07      	bge.n	84f0 <see_aa+0x78>
			killme = i;
    84e0:	697b      	ldr	r3, [r7, #20]
    84e2:	60fb      	str	r3, [r7, #12]
			max = le_promisc.active_aa[i].count;
    84e4:	4a0d      	ldr	r2, [pc, #52]	; (851c <see_aa+0xa4>)
    84e6:	697b      	ldr	r3, [r7, #20]
    84e8:	00db      	lsls	r3, r3, #3
    84ea:	4413      	add	r3, r2
    84ec:	685b      	ldr	r3, [r3, #4]
    84ee:	613b      	str	r3, [r7, #16]
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    84f0:	697b      	ldr	r3, [r7, #20]
    84f2:	3301      	adds	r3, #1
    84f4:	617b      	str	r3, [r7, #20]
    84f6:	697b      	ldr	r3, [r7, #20]
    84f8:	2b1f      	cmp	r3, #31
    84fa:	dde6      	ble.n	84ca <see_aa+0x52>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    84fc:	4907      	ldr	r1, [pc, #28]	; (851c <see_aa+0xa4>)
    84fe:	68fb      	ldr	r3, [r7, #12]
    8500:	687a      	ldr	r2, [r7, #4]
    8502:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    8506:	4a05      	ldr	r2, [pc, #20]	; (851c <see_aa+0xa4>)
    8508:	68fb      	ldr	r3, [r7, #12]
    850a:	00db      	lsls	r3, r3, #3
    850c:	4413      	add	r3, r2
    850e:	2201      	movs	r2, #1
    8510:	605a      	str	r2, [r3, #4]
}
    8512:	371c      	adds	r7, #28
    8514:	46bd      	mov	sp, r7
    8516:	f85d 7b04 	ldr.w	r7, [sp], #4
    851a:	4770      	bx	lr
    851c:	10000bf8 	.word	0x10000bf8

00008520 <cb_le_promisc>:

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    8520:	b590      	push	{r4, r7, lr}
    8522:	b0a1      	sub	sp, #132	; 0x84
    8524:	af00      	add	r7, sp, #0
    8526:	6078      	str	r0, [r7, #4]
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    8528:	f107 031c 	add.w	r3, r7, #28
    852c:	2240      	movs	r2, #64	; 0x40
    852e:	4618      	mov	r0, r3
    8530:	2100      	movs	r1, #0
    8532:	f7fb fe21 	bl	4178 <memset>
    8536:	2301      	movs	r3, #1
    8538:	773b      	strb	r3, [r7, #28]
    853a:	2301      	movs	r3, #1
    853c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    8540:	2301      	movs	r3, #1
    8542:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    8546:	2301      	movs	r3, #1
    8548:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    854c:	2301      	movs	r3, #1
    854e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    8552:	2301      	movs	r3, #1
    8554:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    8558:	2301      	movs	r3, #1
    855a:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    855e:	2301      	movs	r3, #1
    8560:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    8564:	2300      	movs	r3, #0
    8566:	67fb      	str	r3, [r7, #124]	; 0x7c
    8568:	e041      	b.n	85ee <cb_le_promisc+0xce>
		idx = whitening_index[btle_channel_index(channel-2402)];
    856a:	4ba5      	ldr	r3, [pc, #660]	; (8800 <cb_le_promisc+0x2e0>)
    856c:	881b      	ldrh	r3, [r3, #0]
    856e:	b29b      	uxth	r3, r3
    8570:	b2db      	uxtb	r3, r3
    8572:	3b62      	subs	r3, #98	; 0x62
    8574:	b2db      	uxtb	r3, r3
    8576:	4618      	mov	r0, r3
    8578:	f000 fe20 	bl	91bc <btle_channel_index>
    857c:	4603      	mov	r3, r0
    857e:	461a      	mov	r2, r3
    8580:	4ba0      	ldr	r3, [pc, #640]	; (8804 <cb_le_promisc+0x2e4>)
    8582:	5c9b      	ldrb	r3, [r3, r2]
    8584:	673b      	str	r3, [r7, #112]	; 0x70

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    8586:	2300      	movs	r3, #0
    8588:	67bb      	str	r3, [r7, #120]	; 0x78
    858a:	e02a      	b.n	85e2 <cb_le_promisc+0xc2>
			desired[i][j] ^= whitening[idx];
    858c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    858e:	011b      	lsls	r3, r3, #4
    8590:	f107 0280 	add.w	r2, r7, #128	; 0x80
    8594:	441a      	add	r2, r3
    8596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8598:	4413      	add	r3, r2
    859a:	3b64      	subs	r3, #100	; 0x64
    859c:	781a      	ldrb	r2, [r3, #0]
    859e:	499a      	ldr	r1, [pc, #616]	; (8808 <cb_le_promisc+0x2e8>)
    85a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    85a2:	440b      	add	r3, r1
    85a4:	781b      	ldrb	r3, [r3, #0]
    85a6:	4053      	eors	r3, r2
    85a8:	b2d9      	uxtb	r1, r3
    85aa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    85ac:	011b      	lsls	r3, r3, #4
    85ae:	f107 0280 	add.w	r2, r7, #128	; 0x80
    85b2:	441a      	add	r2, r3
    85b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    85b6:	4413      	add	r3, r2
    85b8:	3b64      	subs	r3, #100	; 0x64
    85ba:	460a      	mov	r2, r1
    85bc:	701a      	strb	r2, [r3, #0]
			idx = (idx + 1) % sizeof(whitening);
    85be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    85c0:	3301      	adds	r3, #1
    85c2:	4619      	mov	r1, r3
    85c4:	4b91      	ldr	r3, [pc, #580]	; (880c <cb_le_promisc+0x2ec>)
    85c6:	fba1 2303 	umull	r2, r3, r1, r3
    85ca:	1ac8      	subs	r0, r1, r3
    85cc:	0840      	lsrs	r0, r0, #1
    85ce:	4403      	add	r3, r0
    85d0:	099a      	lsrs	r2, r3, #6
    85d2:	4613      	mov	r3, r2
    85d4:	01db      	lsls	r3, r3, #7
    85d6:	1a9b      	subs	r3, r3, r2
    85d8:	1aca      	subs	r2, r1, r3
    85da:	673a      	str	r2, [r7, #112]	; 0x70

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    85dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    85de:	3301      	adds	r3, #1
    85e0:	67bb      	str	r3, [r7, #120]	; 0x78
    85e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    85e4:	2b0f      	cmp	r3, #15
    85e6:	ddd1      	ble.n	858c <cb_le_promisc+0x6c>
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    85e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    85ea:	3301      	adds	r3, #1
    85ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    85ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    85f0:	2b03      	cmp	r3, #3
    85f2:	ddba      	ble.n	856a <cb_le_promisc+0x4a>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    85f4:	2320      	movs	r3, #32
    85f6:	67fb      	str	r3, [r7, #124]	; 0x7c
    85f8:	e0d0      	b.n	879c <cb_le_promisc+0x27c>
		int ok[4] = { 1, 1, 1, 1 };
    85fa:	4b85      	ldr	r3, [pc, #532]	; (8810 <cb_le_promisc+0x2f0>)
    85fc:	f107 040c 	add.w	r4, r7, #12
    8600:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    8602:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		int matching = -1;
    8606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    860a:	66fb      	str	r3, [r7, #108]	; 0x6c

		for (j = 0; j < 4; ++j) {
    860c:	2300      	movs	r3, #0
    860e:	67bb      	str	r3, [r7, #120]	; 0x78
    8610:	e026      	b.n	8660 <cb_le_promisc+0x140>
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    8612:	2300      	movs	r3, #0
    8614:	677b      	str	r3, [r7, #116]	; 0x74
    8616:	e01d      	b.n	8654 <cb_le_promisc+0x134>
				if (unpacked[i+k] != desired[j][k]) {
    8618:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    861a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    861c:	4413      	add	r3, r2
    861e:	461a      	mov	r2, r3
    8620:	687b      	ldr	r3, [r7, #4]
    8622:	4413      	add	r3, r2
    8624:	781a      	ldrb	r2, [r3, #0]
    8626:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8628:	011b      	lsls	r3, r3, #4
    862a:	f107 0180 	add.w	r1, r7, #128	; 0x80
    862e:	4419      	add	r1, r3
    8630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8632:	440b      	add	r3, r1
    8634:	3b64      	subs	r3, #100	; 0x64
    8636:	781b      	ldrb	r3, [r3, #0]
    8638:	429a      	cmp	r2, r3
    863a:	d008      	beq.n	864e <cb_le_promisc+0x12e>
					ok[j] = 0;
    863c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    863e:	009b      	lsls	r3, r3, #2
    8640:	f107 0280 	add.w	r2, r7, #128	; 0x80
    8644:	4413      	add	r3, r2
    8646:	2200      	movs	r2, #0
    8648:	f843 2c74 	str.w	r2, [r3, #-116]
					break;
    864c:	e005      	b.n	865a <cb_le_promisc+0x13a>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    864e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8650:	3301      	adds	r3, #1
    8652:	677b      	str	r3, [r7, #116]	; 0x74
    8654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8656:	2b0f      	cmp	r3, #15
    8658:	ddde      	ble.n	8618 <cb_le_promisc+0xf8>
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    865a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    865c:	3301      	adds	r3, #1
    865e:	67bb      	str	r3, [r7, #120]	; 0x78
    8660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8662:	2b03      	cmp	r3, #3
    8664:	ddd5      	ble.n	8612 <cb_le_promisc+0xf2>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    8666:	2300      	movs	r3, #0
    8668:	67bb      	str	r3, [r7, #120]	; 0x78
    866a:	e00e      	b.n	868a <cb_le_promisc+0x16a>
			if (ok[j]) {
    866c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    866e:	009b      	lsls	r3, r3, #2
    8670:	f107 0280 	add.w	r2, r7, #128	; 0x80
    8674:	4413      	add	r3, r2
    8676:	f853 3c74 	ldr.w	r3, [r3, #-116]
    867a:	2b00      	cmp	r3, #0
    867c:	d002      	beq.n	8684 <cb_le_promisc+0x164>
				matching = j;
    867e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8680:	66fb      	str	r3, [r7, #108]	; 0x6c
				break;
    8682:	e005      	b.n	8690 <cb_le_promisc+0x170>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    8684:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8686:	3301      	adds	r3, #1
    8688:	67bb      	str	r3, [r7, #120]	; 0x78
    868a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    868c:	2b03      	cmp	r3, #3
    868e:	dded      	ble.n	866c <cb_le_promisc+0x14c>
				break;
			}
		}

		// skip if no match
		if (matching < 0)
    8690:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    8692:	2b00      	cmp	r3, #0
    8694:	db7f      	blt.n	8796 <cb_le_promisc+0x276>
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
    8696:	4b5a      	ldr	r3, [pc, #360]	; (8800 <cb_le_promisc+0x2e0>)
    8698:	881b      	ldrh	r3, [r3, #0]
    869a:	b29b      	uxth	r3, r3
    869c:	b2db      	uxtb	r3, r3
    869e:	3b62      	subs	r3, #98	; 0x62
    86a0:	b2db      	uxtb	r3, r3
    86a2:	4618      	mov	r0, r3
    86a4:	f000 fd8a 	bl	91bc <btle_channel_index>
    86a8:	4603      	mov	r3, r0
    86aa:	461a      	mov	r2, r3
    86ac:	4b55      	ldr	r3, [pc, #340]	; (8804 <cb_le_promisc+0x2e4>)
    86ae:	5c9b      	ldrb	r3, [r3, r2]
    86b0:	673b      	str	r3, [r7, #112]	; 0x70
		for (j = 0; j < 4+3+3; ++j) {
    86b2:	2300      	movs	r3, #0
    86b4:	67bb      	str	r3, [r7, #120]	; 0x78
    86b6:	e04c      	b.n	8752 <cb_le_promisc+0x232>
			u8 byte = 0;
    86b8:	2300      	movs	r3, #0
    86ba:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			for (k = 0; k < 8; k++) {
    86be:	2300      	movs	r3, #0
    86c0:	677b      	str	r3, [r7, #116]	; 0x74
    86c2:	e039      	b.n	8738 <cb_le_promisc+0x218>
				int offset = k + (j * 8) + i - 32;
    86c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    86c6:	00da      	lsls	r2, r3, #3
    86c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    86ca:	441a      	add	r2, r3
    86cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    86ce:	4413      	add	r3, r2
    86d0:	3b20      	subs	r3, #32
    86d2:	663b      	str	r3, [r7, #96]	; 0x60
				if (offset >= DMA_SIZE*8*2) break;
    86d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    86d6:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    86da:	db00      	blt.n	86de <cb_le_promisc+0x1be>
    86dc:	e02f      	b.n	873e <cb_le_promisc+0x21e>
				int bit = unpacked[offset];
    86de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    86e0:	687a      	ldr	r2, [r7, #4]
    86e2:	4413      	add	r3, r2
    86e4:	781b      	ldrb	r3, [r3, #0]
    86e6:	667b      	str	r3, [r7, #100]	; 0x64
				if (j >= 4) { // unwhiten data bytes
    86e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    86ea:	2b03      	cmp	r3, #3
    86ec:	dd16      	ble.n	871c <cb_le_promisc+0x1fc>
					bit ^= whitening[idx];
    86ee:	4a46      	ldr	r2, [pc, #280]	; (8808 <cb_le_promisc+0x2e8>)
    86f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    86f2:	4413      	add	r3, r2
    86f4:	781b      	ldrb	r3, [r3, #0]
    86f6:	461a      	mov	r2, r3
    86f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    86fa:	4053      	eors	r3, r2
    86fc:	667b      	str	r3, [r7, #100]	; 0x64
					idx = (idx + 1) % sizeof(whitening);
    86fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    8700:	3301      	adds	r3, #1
    8702:	4619      	mov	r1, r3
    8704:	4b41      	ldr	r3, [pc, #260]	; (880c <cb_le_promisc+0x2ec>)
    8706:	fba1 2303 	umull	r2, r3, r1, r3
    870a:	1ac8      	subs	r0, r1, r3
    870c:	0840      	lsrs	r0, r0, #1
    870e:	4403      	add	r3, r0
    8710:	099a      	lsrs	r2, r3, #6
    8712:	4613      	mov	r3, r2
    8714:	01db      	lsls	r3, r3, #7
    8716:	1a9b      	subs	r3, r3, r2
    8718:	1aca      	subs	r2, r1, r3
    871a:	673a      	str	r2, [r7, #112]	; 0x70
				}
				byte |= bit << k;
    871c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    871e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8720:	fa02 f303 	lsl.w	r3, r2, r3
    8724:	b2da      	uxtb	r2, r3
    8726:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
    872a:	4313      	orrs	r3, r2
    872c:	b2db      	uxtb	r3, r3
    872e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    8732:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8734:	3301      	adds	r3, #1
    8736:	677b      	str	r3, [r7, #116]	; 0x74
    8738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    873a:	2b07      	cmp	r3, #7
    873c:	ddc2      	ble.n	86c4 <cb_le_promisc+0x1a4>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    873e:	4b35      	ldr	r3, [pc, #212]	; (8814 <cb_le_promisc+0x2f4>)
    8740:	681a      	ldr	r2, [r3, #0]
    8742:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8744:	4413      	add	r3, r2
    8746:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
    874a:	701a      	strb	r2, [r3, #0]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
    874c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    874e:	3301      	adds	r3, #1
    8750:	67bb      	str	r3, [r7, #120]	; 0x78
    8752:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8754:	2b09      	cmp	r3, #9
    8756:	ddaf      	ble.n	86b8 <cb_le_promisc+0x198>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    8758:	4b2e      	ldr	r3, [pc, #184]	; (8814 <cb_le_promisc+0x2f4>)
    875a:	681b      	ldr	r3, [r3, #0]
    875c:	3303      	adds	r3, #3
    875e:	781b      	ldrb	r3, [r3, #0]
    8760:	061a      	lsls	r2, r3, #24
				 (idle_rxbuf[2] << 16) |
    8762:	4b2c      	ldr	r3, [pc, #176]	; (8814 <cb_le_promisc+0x2f4>)
    8764:	681b      	ldr	r3, [r3, #0]
    8766:	3302      	adds	r3, #2
    8768:	781b      	ldrb	r3, [r3, #0]
    876a:	041b      	lsls	r3, r3, #16
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    876c:	431a      	orrs	r2, r3
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    876e:	4b29      	ldr	r3, [pc, #164]	; (8814 <cb_le_promisc+0x2f4>)
    8770:	681b      	ldr	r3, [r3, #0]
    8772:	3301      	adds	r3, #1
    8774:	781b      	ldrb	r3, [r3, #0]
    8776:	021b      	lsls	r3, r3, #8
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    8778:	4313      	orrs	r3, r2
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    877a:	4a26      	ldr	r2, [pc, #152]	; (8814 <cb_le_promisc+0x2f4>)
    877c:	6812      	ldr	r2, [r2, #0]
    877e:	7812      	ldrb	r2, [r2, #0]
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    8780:	4313      	orrs	r3, r2
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    8782:	65fb      	str	r3, [r7, #92]	; 0x5c
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
		see_aa(aa);
    8784:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    8786:	f7ff fe77 	bl	8478 <see_aa>

		enqueue(LE_PACKET, idle_rxbuf);
    878a:	4b22      	ldr	r3, [pc, #136]	; (8814 <cb_le_promisc+0x2f4>)
    878c:	681b      	ldr	r3, [r3, #0]
    878e:	2001      	movs	r0, #1
    8790:	4619      	mov	r1, r3
    8792:	f7fb fe99 	bl	44c8 <enqueue>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    8796:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8798:	3301      	adds	r3, #1
    879a:	67fb      	str	r3, [r7, #124]	; 0x7c
    879c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    879e:	f5b3 7f3c 	cmp.w	r3, #752	; 0x2f0
    87a2:	f6ff af2a 	blt.w	85fa <cb_le_promisc+0xda>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    87a6:	2300      	movs	r3, #0
    87a8:	67fb      	str	r3, [r7, #124]	; 0x7c
    87aa:	e020      	b.n	87ee <cb_le_promisc+0x2ce>
		if (le_promisc.active_aa[i].count > 3) {
    87ac:	4a1a      	ldr	r2, [pc, #104]	; (8818 <cb_le_promisc+0x2f8>)
    87ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    87b0:	00db      	lsls	r3, r3, #3
    87b2:	4413      	add	r3, r2
    87b4:	685b      	ldr	r3, [r3, #4]
    87b6:	2b03      	cmp	r3, #3
    87b8:	dd16      	ble.n	87e8 <cb_le_promisc+0x2c8>
			le_set_access_address(le_promisc.active_aa[i].aa);
    87ba:	4a17      	ldr	r2, [pc, #92]	; (8818 <cb_le_promisc+0x2f8>)
    87bc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    87be:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    87c2:	4618      	mov	r0, r3
    87c4:	f7fe fd80 	bl	72c8 <le_set_access_address>
			data_cb = cb_follow_le;
    87c8:	4b14      	ldr	r3, [pc, #80]	; (881c <cb_le_promisc+0x2fc>)
    87ca:	4a15      	ldr	r2, [pc, #84]	; (8820 <cb_le_promisc+0x300>)
    87cc:	601a      	str	r2, [r3, #0]
			packet_cb = promisc_follow_cb;
    87ce:	4b15      	ldr	r3, [pc, #84]	; (8824 <cb_le_promisc+0x304>)
    87d0:	4a15      	ldr	r2, [pc, #84]	; (8828 <cb_le_promisc+0x308>)
    87d2:	601a      	str	r2, [r3, #0]
			le.crc_verify = 0;
    87d4:	4b15      	ldr	r3, [pc, #84]	; (882c <cb_le_promisc+0x30c>)
    87d6:	2200      	movs	r2, #0
    87d8:	611a      	str	r2, [r3, #16]
			le_promisc_state(0, &le.access_address, 4);
    87da:	2000      	movs	r0, #0
    87dc:	4913      	ldr	r1, [pc, #76]	; (882c <cb_le_promisc+0x30c>)
    87de:	2204      	movs	r2, #4
    87e0:	f7ff fc50 	bl	8084 <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    87e4:	2300      	movs	r3, #0
    87e6:	e006      	b.n	87f6 <cb_le_promisc+0x2d6>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    87e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    87ea:	3301      	adds	r3, #1
    87ec:	67fb      	str	r3, [r7, #124]	; 0x7c
    87ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    87f0:	2b1f      	cmp	r3, #31
    87f2:	dddb      	ble.n	87ac <cb_le_promisc+0x28c>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    87f4:	2301      	movs	r3, #1
}
    87f6:	4618      	mov	r0, r3
    87f8:	3784      	adds	r7, #132	; 0x84
    87fa:	46bd      	mov	sp, r7
    87fc:	bd90      	pop	{r4, r7, pc}
    87fe:	bf00      	nop
    8800:	1000049c 	.word	0x1000049c
    8804:	0000c764 	.word	0x0000c764
    8808:	0000c6e4 	.word	0x0000c6e4
    880c:	02040811 	.word	0x02040811
    8810:	0000cf84 	.word	0x0000cf84
    8814:	10000454 	.word	0x10000454
    8818:	10000bf8 	.word	0x10000bf8
    881c:	10000998 	.word	0x10000998
    8820:	00007c09 	.word	0x00007c09
    8824:	1000099c 	.word	0x1000099c
    8828:	000083bd 	.word	0x000083bd
    882c:	10000458 	.word	0x10000458

00008830 <bt_promisc_le>:

void bt_promisc_le() {
    8830:	b580      	push	{r7, lr}
    8832:	af00      	add	r7, sp, #0
	while (requested_mode == MODE_BT_PROMISC_LE) {
    8834:	e02c      	b.n	8890 <bt_promisc_le+0x60>
		reset_le_promisc();
    8836:	f7fe fdad 	bl	7394 <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    883a:	4b18      	ldr	r3, [pc, #96]	; (889c <bt_promisc_le+0x6c>)
    883c:	881b      	ldrh	r3, [r3, #0]
    883e:	b29b      	uxth	r3, r3
    8840:	f003 0301 	and.w	r3, r3, #1
    8844:	2b00      	cmp	r3, #0
    8846:	d003      	beq.n	8850 <bt_promisc_le+0x20>
			channel = 2440;
    8848:	4b14      	ldr	r3, [pc, #80]	; (889c <bt_promisc_le+0x6c>)
    884a:	f640 1288 	movw	r2, #2440	; 0x988
    884e:	801a      	strh	r2, [r3, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    8850:	4b13      	ldr	r3, [pc, #76]	; (88a0 <bt_promisc_le+0x70>)
    8852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    8854:	2b00      	cmp	r3, #0
    8856:	d107      	bne.n	8868 <bt_promisc_le+0x38>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set();
    8858:	f7fc f8fa 	bl	4a50 <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    885c:	4b11      	ldr	r3, [pc, #68]	; (88a4 <bt_promisc_le+0x74>)
    885e:	4a12      	ldr	r2, [pc, #72]	; (88a8 <bt_promisc_le+0x78>)
    8860:	601a      	str	r2, [r3, #0]
			bt_generic_le(MODE_BT_PROMISC_LE);
    8862:	200a      	movs	r0, #10
    8864:	f7fe fda6 	bl	73b4 <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    8868:	4b10      	ldr	r3, [pc, #64]	; (88ac <bt_promisc_le+0x7c>)
    886a:	781b      	ldrb	r3, [r3, #0]
    886c:	b2db      	uxtb	r3, r3
    886e:	2b0a      	cmp	r3, #10
    8870:	d000      	beq.n	8874 <bt_promisc_le+0x44>
			break;
    8872:	e012      	b.n	889a <bt_promisc_le+0x6a>

		le_promisc_state(0, &le.access_address, 4);
    8874:	2000      	movs	r0, #0
    8876:	490a      	ldr	r1, [pc, #40]	; (88a0 <bt_promisc_le+0x70>)
    8878:	2204      	movs	r2, #4
    887a:	f7ff fc03 	bl	8084 <le_promisc_state>
		packet_cb = promisc_follow_cb;
    887e:	4b0c      	ldr	r3, [pc, #48]	; (88b0 <bt_promisc_le+0x80>)
    8880:	4a0c      	ldr	r2, [pc, #48]	; (88b4 <bt_promisc_le+0x84>)
    8882:	601a      	str	r2, [r3, #0]
		le.crc_verify = 0;
    8884:	4b06      	ldr	r3, [pc, #24]	; (88a0 <bt_promisc_le+0x70>)
    8886:	2200      	movs	r2, #0
    8888:	611a      	str	r2, [r3, #16]
		bt_le_sync(MODE_BT_PROMISC_LE);
    888a:	200a      	movs	r0, #10
    888c:	f7fe ff0e 	bl	76ac <bt_le_sync>

	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
    8890:	4b06      	ldr	r3, [pc, #24]	; (88ac <bt_promisc_le+0x7c>)
    8892:	781b      	ldrb	r3, [r3, #0]
    8894:	b2db      	uxtb	r3, r3
    8896:	2b0a      	cmp	r3, #10
    8898:	d0cd      	beq.n	8836 <bt_promisc_le+0x6>
		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
	}
}
    889a:	bd80      	pop	{r7, pc}
    889c:	1000049c 	.word	0x1000049c
    88a0:	10000458 	.word	0x10000458
    88a4:	10000998 	.word	0x10000998
    88a8:	00008521 	.word	0x00008521
    88ac:	10000a3f 	.word	0x10000a3f
    88b0:	1000099c 	.word	0x1000099c
    88b4:	000083bd 	.word	0x000083bd

000088b8 <bt_slave_le>:

void bt_slave_le() {
    88b8:	b590      	push	{r4, r7, lr}
    88ba:	b089      	sub	sp, #36	; 0x24
    88bc:	af00      	add	r7, sp, #0
	u32 calc_crc;
	int i;

	u8 adv_ind[] = {
    88be:	4a35      	ldr	r2, [pc, #212]	; (8994 <bt_slave_le+0xdc>)
    88c0:	1d3b      	adds	r3, r7, #4
    88c2:	4614      	mov	r4, r2
    88c4:	6820      	ldr	r0, [r4, #0]
    88c6:	6861      	ldr	r1, [r4, #4]
    88c8:	68a2      	ldr	r2, [r4, #8]
    88ca:	c307      	stmia	r3!, {r0, r1, r2}
    88cc:	89a2      	ldrh	r2, [r4, #12]
    88ce:	801a      	strh	r2, [r3, #0]

		// CRC (calc)
		0xff, 0xff, 0xff,
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;
    88d0:	230b      	movs	r3, #11
    88d2:	76fb      	strb	r3, [r7, #27]

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    88d4:	2300      	movs	r3, #0
    88d6:	61fb      	str	r3, [r7, #28]
    88d8:	e00e      	b.n	88f8 <bt_slave_le+0x40>
		adv_ind[i+2] = slave_mac_address[5-i];
    88da:	69fb      	ldr	r3, [r7, #28]
    88dc:	3302      	adds	r3, #2
    88de:	69fa      	ldr	r2, [r7, #28]
    88e0:	f1c2 0205 	rsb	r2, r2, #5
    88e4:	492c      	ldr	r1, [pc, #176]	; (8998 <bt_slave_le+0xe0>)
    88e6:	5c8a      	ldrb	r2, [r1, r2]
    88e8:	f107 0120 	add.w	r1, r7, #32
    88ec:	440b      	add	r3, r1
    88ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    88f2:	69fb      	ldr	r3, [r7, #28]
    88f4:	3301      	adds	r3, #1
    88f6:	61fb      	str	r3, [r7, #28]
    88f8:	69fb      	ldr	r3, [r7, #28]
    88fa:	2b05      	cmp	r3, #5
    88fc:	dded      	ble.n	88da <bt_slave_le+0x22>
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
    88fe:	4b27      	ldr	r3, [pc, #156]	; (899c <bt_slave_le+0xe4>)
    8900:	68d9      	ldr	r1, [r3, #12]
    8902:	7efb      	ldrb	r3, [r7, #27]
    8904:	1d3a      	adds	r2, r7, #4
    8906:	4608      	mov	r0, r1
    8908:	4611      	mov	r1, r2
    890a:	461a      	mov	r2, r3
    890c:	f000 fcb4 	bl	9278 <btle_calc_crc>
    8910:	6178      	str	r0, [r7, #20]
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
    8912:	7efb      	ldrb	r3, [r7, #27]
    8914:	697a      	ldr	r2, [r7, #20]
    8916:	b2d2      	uxtb	r2, r2
    8918:	f107 0120 	add.w	r1, r7, #32
    891c:	440b      	add	r3, r1
    891e:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    8922:	7efb      	ldrb	r3, [r7, #27]
    8924:	3301      	adds	r3, #1
    8926:	697a      	ldr	r2, [r7, #20]
    8928:	0a12      	lsrs	r2, r2, #8
    892a:	b2d2      	uxtb	r2, r2
    892c:	f107 0120 	add.w	r1, r7, #32
    8930:	440b      	add	r3, r1
    8932:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    8936:	7efb      	ldrb	r3, [r7, #27]
    8938:	3302      	adds	r3, #2
    893a:	697a      	ldr	r2, [r7, #20]
    893c:	0c12      	lsrs	r2, r2, #16
    893e:	b2d2      	uxtb	r2, r2
    8940:	f107 0120 	add.w	r1, r7, #32
    8944:	440b      	add	r3, r1
    8946:	f803 2c1c 	strb.w	r2, [r3, #-28]

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    894a:	e01b      	b.n	8984 <bt_slave_le+0xcc>
		ICER0 = ICER0_ICE_USB;
    894c:	4b14      	ldr	r3, [pc, #80]	; (89a0 <bt_slave_le+0xe8>)
    894e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8952:	601a      	str	r2, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
    8954:	4b12      	ldr	r3, [pc, #72]	; (89a0 <bt_slave_le+0xe8>)
    8956:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    895a:	601a      	str	r2, [r3, #0]
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    895c:	7efb      	ldrb	r3, [r7, #27]
    895e:	3303      	adds	r3, #3
    8960:	b2da      	uxtb	r2, r3
    8962:	1d3b      	adds	r3, r7, #4
    8964:	480f      	ldr	r0, [pc, #60]	; (89a4 <bt_slave_le+0xec>)
    8966:	4611      	mov	r1, r2
    8968:	461a      	mov	r2, r3
    896a:	f7fd fb45 	bl	5ff8 <le_transmit>
		ISER0 = ISER0_ISE_USB;
    896e:	4b0e      	ldr	r3, [pc, #56]	; (89a8 <bt_slave_le+0xf0>)
    8970:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8974:	601a      	str	r2, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    8976:	4b0c      	ldr	r3, [pc, #48]	; (89a8 <bt_slave_le+0xf0>)
    8978:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    897c:	601a      	str	r2, [r3, #0]
		msleep(100);
    897e:	2064      	movs	r0, #100	; 0x64
    8980:	f7fc ff3e 	bl	5800 <msleep>
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    8984:	4b09      	ldr	r3, [pc, #36]	; (89ac <bt_slave_le+0xf4>)
    8986:	781b      	ldrb	r3, [r3, #0]
    8988:	b2db      	uxtb	r3, r3
    898a:	2b0c      	cmp	r3, #12
    898c:	d0de      	beq.n	894c <bt_slave_le+0x94>
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
		msleep(100);
	}
}
    898e:	3724      	adds	r7, #36	; 0x24
    8990:	46bd      	mov	sp, r7
    8992:	bd90      	pop	{r4, r7, pc}
    8994:	0000cf94 	.word	0x0000cf94
    8998:	1000098c 	.word	0x1000098c
    899c:	10000458 	.word	0x10000458
    89a0:	e000e180 	.word	0xe000e180
    89a4:	8e89bed6 	.word	0x8e89bed6
    89a8:	e000e100 	.word	0xe000e100
    89ac:	10000a3f 	.word	0x10000a3f

000089b0 <specan>:

/* spectrum analysis */
void specan()
{
    89b0:	b590      	push	{r4, r7, lr}
    89b2:	b091      	sub	sp, #68	; 0x44
    89b4:	af00      	add	r7, sp, #0
	u8 epstat;
	u16 f;
	u8 i = 0;
    89b6:	2300      	movs	r3, #0
    89b8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	u8 buf[DMA_SIZE];

	RXLED_SET;
    89bc:	4b5a      	ldr	r3, [pc, #360]	; (8b28 <specan+0x178>)
    89be:	2210      	movs	r2, #16
    89c0:	601a      	str	r2, [r3, #0]

	queue_init();
    89c2:	f000 fd7b 	bl	94bc <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    89c6:	4b59      	ldr	r3, [pc, #356]	; (8b2c <specan+0x17c>)
    89c8:	2280      	movs	r2, #128	; 0x80
    89ca:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    89cc:	2012      	movs	r0, #18
    89ce:	f642 3122 	movw	r1, #11042	; 0x2b22
    89d2:	f001 ffeb 	bl	a9ac <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    89d6:	2014      	movs	r0, #20
    89d8:	f241 314b 	movw	r1, #4939	; 0x134b
    89dc:	f001 ffe6 	bl	a9ac <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    89e0:	2020      	movs	r0, #32
    89e2:	f240 1101 	movw	r1, #257	; 0x101
    89e6:	f001 ffe1 	bl	a9ac <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    89ea:	2003      	movs	r0, #3
    89ec:	2129      	movs	r1, #41	; 0x29
    89ee:	f001 ffdd 	bl	a9ac <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    89f2:	bf00      	nop
    89f4:	f002 f892 	bl	ab1c <cc2400_status>
    89f8:	4603      	mov	r3, r0
    89fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    89fe:	2b00      	cmp	r3, #0
    8a00:	d0f8      	beq.n	89f4 <specan+0x44>
	while ((cc2400_status() & FS_LOCK));
    8a02:	bf00      	nop
    8a04:	f002 f88a 	bl	ab1c <cc2400_status>
    8a08:	4603      	mov	r3, r0
    8a0a:	f003 0304 	and.w	r3, r3, #4
    8a0e:	2b00      	cmp	r3, #0
    8a10:	d1f8      	bne.n	8a04 <specan+0x54>

	while (requested_mode == MODE_SPECAN) {
    8a12:	e07a      	b.n	8b0a <specan+0x15a>
		for (f = low_freq; f < high_freq + 1; f++) {
    8a14:	4b46      	ldr	r3, [pc, #280]	; (8b30 <specan+0x180>)
    8a16:	881b      	ldrh	r3, [r3, #0]
    8a18:	87fb      	strh	r3, [r7, #62]	; 0x3e
    8a1a:	e06f      	b.n	8afc <specan+0x14c>
			cc2400_set(FSDIV, f - 1);
    8a1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    8a1e:	3b01      	subs	r3, #1
    8a20:	b29b      	uxth	r3, r3
    8a22:	2002      	movs	r0, #2
    8a24:	4619      	mov	r1, r3
    8a26:	f001 ffc1 	bl	a9ac <cc2400_set>
			cc2400_strobe(SFSON);
    8a2a:	2061      	movs	r0, #97	; 0x61
    8a2c:	f002 f880 	bl	ab30 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    8a30:	bf00      	nop
    8a32:	f002 f873 	bl	ab1c <cc2400_status>
    8a36:	4603      	mov	r3, r0
    8a38:	f003 0304 	and.w	r3, r3, #4
    8a3c:	2b00      	cmp	r3, #0
    8a3e:	d0f8      	beq.n	8a32 <specan+0x82>
			cc2400_strobe(SRX);
    8a40:	2062      	movs	r0, #98	; 0x62
    8a42:	f002 f875 	bl	ab30 <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    8a46:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    8a4a:	607b      	str	r3, [r7, #4]
    8a4c:	bf00      	nop
    8a4e:	687b      	ldr	r3, [r7, #4]
    8a50:	3b01      	subs	r3, #1
    8a52:	607b      	str	r3, [r7, #4]
    8a54:	2b00      	cmp	r3, #0
    8a56:	d1fa      	bne.n	8a4e <specan+0x9e>
			buf[3 * i] = (f >> 8) & 0xFF;
    8a58:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    8a5c:	4613      	mov	r3, r2
    8a5e:	005b      	lsls	r3, r3, #1
    8a60:	4413      	add	r3, r2
    8a62:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    8a64:	0a12      	lsrs	r2, r2, #8
    8a66:	b292      	uxth	r2, r2
    8a68:	b2d2      	uxtb	r2, r2
    8a6a:	f107 0140 	add.w	r1, r7, #64	; 0x40
    8a6e:	440b      	add	r3, r1
    8a70:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 1] = f  & 0xFF;
    8a74:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    8a78:	4613      	mov	r3, r2
    8a7a:	005b      	lsls	r3, r3, #1
    8a7c:	4413      	add	r3, r2
    8a7e:	3301      	adds	r3, #1
    8a80:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    8a82:	b2d2      	uxtb	r2, r2
    8a84:	f107 0140 	add.w	r1, r7, #64	; 0x40
    8a88:	440b      	add	r3, r1
    8a8a:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    8a8e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    8a92:	4613      	mov	r3, r2
    8a94:	005b      	lsls	r3, r3, #1
    8a96:	4413      	add	r3, r2
    8a98:	1c9c      	adds	r4, r3, #2
    8a9a:	2006      	movs	r0, #6
    8a9c:	f001 ff70 	bl	a980 <cc2400_get>
    8aa0:	4603      	mov	r3, r0
    8aa2:	0a1b      	lsrs	r3, r3, #8
    8aa4:	b29b      	uxth	r3, r3
    8aa6:	b2da      	uxtb	r2, r3
    8aa8:	f107 0340 	add.w	r3, r7, #64	; 0x40
    8aac:	4423      	add	r3, r4
    8aae:	f803 2c38 	strb.w	r2, [r3, #-56]
			i++;
    8ab2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    8ab6:	3301      	adds	r3, #1
    8ab8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (i == 16) {
    8abc:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    8ac0:	2b10      	cmp	r3, #16
    8ac2:	d10d      	bne.n	8ae0 <specan+0x130>
				enqueue(SPECAN, buf);
    8ac4:	f107 0308 	add.w	r3, r7, #8
    8ac8:	2004      	movs	r0, #4
    8aca:	4619      	mov	r1, r3
    8acc:	f7fb fcfc 	bl	44c8 <enqueue>
				i = 0;
    8ad0:	2300      	movs	r3, #0
    8ad2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				handle_usb(clkn);
    8ad6:	4b17      	ldr	r3, [pc, #92]	; (8b34 <specan+0x184>)
    8ad8:	681b      	ldr	r3, [r3, #0]
    8ada:	4618      	mov	r0, r3
    8adc:	f000 fd8e 	bl	95fc <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    8ae0:	2064      	movs	r0, #100	; 0x64
    8ae2:	f002 f825 	bl	ab30 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    8ae6:	bf00      	nop
    8ae8:	f002 f818 	bl	ab1c <cc2400_status>
    8aec:	4603      	mov	r3, r0
    8aee:	f003 0304 	and.w	r3, r3, #4
    8af2:	2b00      	cmp	r3, #0
    8af4:	d1f8      	bne.n	8ae8 <specan+0x138>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    8af6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    8af8:	3301      	adds	r3, #1
    8afa:	87fb      	strh	r3, [r7, #62]	; 0x3e
    8afc:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    8afe:	4b0e      	ldr	r3, [pc, #56]	; (8b38 <specan+0x188>)
    8b00:	881b      	ldrh	r3, [r3, #0]
    8b02:	b29b      	uxth	r3, r3
    8b04:	3301      	adds	r3, #1
    8b06:	429a      	cmp	r2, r3
    8b08:	db88      	blt.n	8a1c <specan+0x6c>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
    8b0a:	4b0c      	ldr	r3, [pc, #48]	; (8b3c <specan+0x18c>)
    8b0c:	781b      	ldrb	r3, [r3, #0]
    8b0e:	b2db      	uxtb	r3, r3
    8b10:	2b04      	cmp	r3, #4
    8b12:	f43f af7f 	beq.w	8a14 <specan+0x64>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	mode = MODE_IDLE;
    8b16:	4b0a      	ldr	r3, [pc, #40]	; (8b40 <specan+0x190>)
    8b18:	2200      	movs	r2, #0
    8b1a:	701a      	strb	r2, [r3, #0]
	RXLED_CLR;
    8b1c:	4b09      	ldr	r3, [pc, #36]	; (8b44 <specan+0x194>)
    8b1e:	2210      	movs	r2, #16
    8b20:	601a      	str	r2, [r3, #0]
}
    8b22:	3744      	adds	r7, #68	; 0x44
    8b24:	46bd      	mov	sp, r7
    8b26:	bd90      	pop	{r4, r7, pc}
    8b28:	2009c038 	.word	0x2009c038
    8b2c:	2009c058 	.word	0x2009c058
    8b30:	1000049e 	.word	0x1000049e
    8b34:	10000bec 	.word	0x10000bec
    8b38:	100004a0 	.word	0x100004a0
    8b3c:	10000a3f 	.word	0x10000a3f
    8b40:	10000a3e 	.word	0x10000a3e
    8b44:	2009c03c 	.word	0x2009c03c

00008b48 <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    8b48:	b580      	push	{r7, lr}
    8b4a:	b084      	sub	sp, #16
    8b4c:	af00      	add	r7, sp, #0
	int8_t lvl;
	u8 i = 0;
    8b4e:	2300      	movs	r3, #0
    8b50:	73fb      	strb	r3, [r7, #15]
	u16 channels[3] = {2412, 2437, 2462};
    8b52:	4a5b      	ldr	r2, [pc, #364]	; (8cc0 <led_specan+0x178>)
    8b54:	f107 0308 	add.w	r3, r7, #8
    8b58:	6810      	ldr	r0, [r2, #0]
    8b5a:	6018      	str	r0, [r3, #0]
    8b5c:	8892      	ldrh	r2, [r2, #4]
    8b5e:	809a      	strh	r2, [r3, #4]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8b60:	4b58      	ldr	r3, [pc, #352]	; (8cc4 <led_specan+0x17c>)
    8b62:	2280      	movs	r2, #128	; 0x80
    8b64:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    8b66:	2012      	movs	r0, #18
    8b68:	f642 3122 	movw	r1, #11042	; 0x2b22
    8b6c:	f001 ff1e 	bl	a9ac <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    8b70:	2014      	movs	r0, #20
    8b72:	f241 314b 	movw	r1, #4939	; 0x134b
    8b76:	f001 ff19 	bl	a9ac <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    8b7a:	2020      	movs	r0, #32
    8b7c:	f240 1101 	movw	r1, #257	; 0x101
    8b80:	f001 ff14 	bl	a9ac <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    8b84:	2003      	movs	r0, #3
    8b86:	2129      	movs	r1, #41	; 0x29
    8b88:	f001 ff10 	bl	a9ac <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    8b8c:	2006      	movs	r0, #6
    8b8e:	21f1      	movs	r1, #241	; 0xf1
    8b90:	f001 ff0c 	bl	a9ac <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    8b94:	bf00      	nop
    8b96:	f001 ffc1 	bl	ab1c <cc2400_status>
    8b9a:	4603      	mov	r3, r0
    8b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8ba0:	2b00      	cmp	r3, #0
    8ba2:	d0f8      	beq.n	8b96 <led_specan+0x4e>
	while ((cc2400_status() & FS_LOCK));
    8ba4:	bf00      	nop
    8ba6:	f001 ffb9 	bl	ab1c <cc2400_status>
    8baa:	4603      	mov	r3, r0
    8bac:	f003 0304 	and.w	r3, r3, #4
    8bb0:	2b00      	cmp	r3, #0
    8bb2:	d1f8      	bne.n	8ba6 <led_specan+0x5e>

	while (requested_mode == MODE_LED_SPECAN) {
    8bb4:	e079      	b.n	8caa <led_specan+0x162>
		cc2400_set(FSDIV, channels[i] - 1);
    8bb6:	7bfb      	ldrb	r3, [r7, #15]
    8bb8:	005b      	lsls	r3, r3, #1
    8bba:	f107 0210 	add.w	r2, r7, #16
    8bbe:	4413      	add	r3, r2
    8bc0:	f833 3c08 	ldrh.w	r3, [r3, #-8]
    8bc4:	3b01      	subs	r3, #1
    8bc6:	b29b      	uxth	r3, r3
    8bc8:	2002      	movs	r0, #2
    8bca:	4619      	mov	r1, r3
    8bcc:	f001 feee 	bl	a9ac <cc2400_set>
		cc2400_strobe(SFSON);
    8bd0:	2061      	movs	r0, #97	; 0x61
    8bd2:	f001 ffad 	bl	ab30 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    8bd6:	bf00      	nop
    8bd8:	f001 ffa0 	bl	ab1c <cc2400_status>
    8bdc:	4603      	mov	r3, r0
    8bde:	f003 0304 	and.w	r3, r3, #4
    8be2:	2b00      	cmp	r3, #0
    8be4:	d0f8      	beq.n	8bd8 <led_specan+0x90>
		cc2400_strobe(SRX);
    8be6:	2062      	movs	r0, #98	; 0x62
    8be8:	f001 ffa2 	bl	ab30 <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    8bec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    8bf0:	607b      	str	r3, [r7, #4]
    8bf2:	bf00      	nop
    8bf4:	687b      	ldr	r3, [r7, #4]
    8bf6:	3b01      	subs	r3, #1
    8bf8:	607b      	str	r3, [r7, #4]
    8bfa:	2b00      	cmp	r3, #0
    8bfc:	d1fa      	bne.n	8bf4 <led_specan+0xac>
		lvl = cc2400_get(RSSI) >> 8;
    8bfe:	2006      	movs	r0, #6
    8c00:	f001 febe 	bl	a980 <cc2400_get>
    8c04:	4603      	mov	r3, r0
    8c06:	0a1b      	lsrs	r3, r3, #8
    8c08:	b29b      	uxth	r3, r3
    8c0a:	73bb      	strb	r3, [r7, #14]
        if (lvl > rssi_threshold) {
    8c0c:	4b2e      	ldr	r3, [pc, #184]	; (8cc8 <led_specan+0x180>)
    8c0e:	781b      	ldrb	r3, [r3, #0]
    8c10:	b2db      	uxtb	r3, r3
    8c12:	f997 200e 	ldrsb.w	r2, [r7, #14]
    8c16:	b25b      	sxtb	r3, r3
    8c18:	429a      	cmp	r2, r3
    8c1a:	dd15      	ble.n	8c48 <led_specan+0x100>
            switch (i) {
    8c1c:	7bfb      	ldrb	r3, [r7, #15]
    8c1e:	2b01      	cmp	r3, #1
    8c20:	d009      	beq.n	8c36 <led_specan+0xee>
    8c22:	2b02      	cmp	r3, #2
    8c24:	d00b      	beq.n	8c3e <led_specan+0xf6>
    8c26:	2b00      	cmp	r3, #0
    8c28:	d000      	beq.n	8c2c <led_specan+0xe4>
    8c2a:	e021      	b.n	8c70 <led_specan+0x128>
                case 0:
                    TXLED_SET;
    8c2c:	4b27      	ldr	r3, [pc, #156]	; (8ccc <led_specan+0x184>)
    8c2e:	f44f 7280 	mov.w	r2, #256	; 0x100
    8c32:	601a      	str	r2, [r3, #0]
                    break;
    8c34:	e007      	b.n	8c46 <led_specan+0xfe>
                case 1:
                    RXLED_SET;
    8c36:	4b25      	ldr	r3, [pc, #148]	; (8ccc <led_specan+0x184>)
    8c38:	2210      	movs	r2, #16
    8c3a:	601a      	str	r2, [r3, #0]
                    break;
    8c3c:	e003      	b.n	8c46 <led_specan+0xfe>
                case 2:
                    USRLED_SET;
    8c3e:	4b23      	ldr	r3, [pc, #140]	; (8ccc <led_specan+0x184>)
    8c40:	2202      	movs	r2, #2
    8c42:	601a      	str	r2, [r3, #0]
                    break;
    8c44:	bf00      	nop
    8c46:	e013      	b.n	8c70 <led_specan+0x128>
            }
        }
        else {
            switch (i) {
    8c48:	7bfb      	ldrb	r3, [r7, #15]
    8c4a:	2b01      	cmp	r3, #1
    8c4c:	d008      	beq.n	8c60 <led_specan+0x118>
    8c4e:	2b02      	cmp	r3, #2
    8c50:	d00a      	beq.n	8c68 <led_specan+0x120>
    8c52:	2b00      	cmp	r3, #0
    8c54:	d10c      	bne.n	8c70 <led_specan+0x128>
                case 0:
                    TXLED_CLR;
    8c56:	4b1e      	ldr	r3, [pc, #120]	; (8cd0 <led_specan+0x188>)
    8c58:	f44f 7280 	mov.w	r2, #256	; 0x100
    8c5c:	601a      	str	r2, [r3, #0]
                    break;
    8c5e:	e007      	b.n	8c70 <led_specan+0x128>
                case 1:
                    RXLED_CLR;
    8c60:	4b1b      	ldr	r3, [pc, #108]	; (8cd0 <led_specan+0x188>)
    8c62:	2210      	movs	r2, #16
    8c64:	601a      	str	r2, [r3, #0]
                    break;
    8c66:	e003      	b.n	8c70 <led_specan+0x128>
                case 2:
                    USRLED_CLR;
    8c68:	4b19      	ldr	r3, [pc, #100]	; (8cd0 <led_specan+0x188>)
    8c6a:	2202      	movs	r2, #2
    8c6c:	601a      	str	r2, [r3, #0]
                    break;
    8c6e:	bf00      	nop
            }
        }

		i = (i+1) % 3;
    8c70:	7bfb      	ldrb	r3, [r7, #15]
    8c72:	1c5a      	adds	r2, r3, #1
    8c74:	4b17      	ldr	r3, [pc, #92]	; (8cd4 <led_specan+0x18c>)
    8c76:	fb83 3102 	smull	r3, r1, r3, r2
    8c7a:	17d3      	asrs	r3, r2, #31
    8c7c:	1ac9      	subs	r1, r1, r3
    8c7e:	460b      	mov	r3, r1
    8c80:	005b      	lsls	r3, r3, #1
    8c82:	440b      	add	r3, r1
    8c84:	1ad1      	subs	r1, r2, r3
    8c86:	460b      	mov	r3, r1
    8c88:	73fb      	strb	r3, [r7, #15]

		handle_usb(clkn);
    8c8a:	4b13      	ldr	r3, [pc, #76]	; (8cd8 <led_specan+0x190>)
    8c8c:	681b      	ldr	r3, [r3, #0]
    8c8e:	4618      	mov	r0, r3
    8c90:	f000 fcb4 	bl	95fc <handle_usb>
        //wait(1);
		cc2400_strobe(SRFOFF);
    8c94:	2064      	movs	r0, #100	; 0x64
    8c96:	f001 ff4b 	bl	ab30 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8c9a:	bf00      	nop
    8c9c:	f001 ff3e 	bl	ab1c <cc2400_status>
    8ca0:	4603      	mov	r3, r0
    8ca2:	f003 0304 	and.w	r3, r3, #4
    8ca6:	2b00      	cmp	r3, #0
    8ca8:	d1f8      	bne.n	8c9c <led_specan+0x154>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols

	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_LED_SPECAN) {
    8caa:	4b0c      	ldr	r3, [pc, #48]	; (8cdc <led_specan+0x194>)
    8cac:	781b      	ldrb	r3, [r3, #0]
    8cae:	b2db      	uxtb	r3, r3
    8cb0:	2b07      	cmp	r3, #7
    8cb2:	d080      	beq.n	8bb6 <led_specan+0x6e>
		handle_usb(clkn);
        //wait(1);
		cc2400_strobe(SRFOFF);
		while ((cc2400_status() & FS_LOCK));
	}
	mode = MODE_IDLE;
    8cb4:	4b0a      	ldr	r3, [pc, #40]	; (8ce0 <led_specan+0x198>)
    8cb6:	2200      	movs	r2, #0
    8cb8:	701a      	strb	r2, [r3, #0]
}
    8cba:	3710      	adds	r7, #16
    8cbc:	46bd      	mov	sp, r7
    8cbe:	bd80      	pop	{r7, pc}
    8cc0:	0000cfa4 	.word	0x0000cfa4
    8cc4:	2009c058 	.word	0x2009c058
    8cc8:	100004a2 	.word	0x100004a2
    8ccc:	2009c038 	.word	0x2009c038
    8cd0:	2009c03c 	.word	0x2009c03c
    8cd4:	55555556 	.word	0x55555556
    8cd8:	10000bec 	.word	0x10000bec
    8cdc:	10000a3f 	.word	0x10000a3f
    8ce0:	10000a3e 	.word	0x10000a3e

00008ce4 <main>:

int main()
{
    8ce4:	b580      	push	{r7, lr}
    8ce6:	af00      	add	r7, sp, #0
	ubertooth_init();
    8ce8:	f001 fd84 	bl	a7f4 <ubertooth_init>
	clkn_init();
    8cec:	f7fc fcae 	bl	564c <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    8cf0:	484b      	ldr	r0, [pc, #300]	; (8e20 <main+0x13c>)
    8cf2:	f000 fbbb 	bl	946c <ubertooth_usb_init>

	while (1) {
		handle_usb(clkn);
    8cf6:	4b4b      	ldr	r3, [pc, #300]	; (8e24 <main+0x140>)
    8cf8:	681b      	ldr	r3, [r3, #0]
    8cfa:	4618      	mov	r0, r3
    8cfc:	f000 fc7e 	bl	95fc <handle_usb>
		if(requested_mode != mode)
    8d00:	4b49      	ldr	r3, [pc, #292]	; (8e28 <main+0x144>)
    8d02:	781b      	ldrb	r3, [r3, #0]
    8d04:	b2da      	uxtb	r2, r3
    8d06:	4b49      	ldr	r3, [pc, #292]	; (8e2c <main+0x148>)
    8d08:	781b      	ldrb	r3, [r3, #0]
    8d0a:	b2db      	uxtb	r3, r3
    8d0c:	429a      	cmp	r2, r3
    8d0e:	f000 8086 	beq.w	8e1e <main+0x13a>
			switch (requested_mode) {
    8d12:	4b45      	ldr	r3, [pc, #276]	; (8e28 <main+0x144>)
    8d14:	781b      	ldrb	r3, [r3, #0]
    8d16:	b2db      	uxtb	r3, r3
    8d18:	2b0f      	cmp	r3, #15
    8d1a:	d87f      	bhi.n	8e1c <main+0x138>
    8d1c:	a201      	add	r2, pc, #4	; (adr r2, 8d24 <main+0x40>)
    8d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8d22:	bf00      	nop
    8d24:	00008e17 	.word	0x00008e17
    8d28:	00008d71 	.word	0x00008d71
    8d2c:	00008e1d 	.word	0x00008e1d
    8d30:	00008db3 	.word	0x00008db3
    8d34:	00008df7 	.word	0x00008df7
    8d38:	00008dc3 	.word	0x00008dc3
    8d3c:	00008de9 	.word	0x00008de9
    8d40:	00008dfd 	.word	0x00008dfd
    8d44:	00008d95 	.word	0x00008d95
    8d48:	00008da1 	.word	0x00008da1
    8d4c:	00008da7 	.word	0x00008da7
    8d50:	00008d65 	.word	0x00008d65
    8d54:	00008dad 	.word	0x00008dad
    8d58:	00008e03 	.word	0x00008e03
    8d5c:	00008d7d 	.word	0x00008d7d
    8d60:	00008d89 	.word	0x00008d89
				 case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    8d64:	2001      	movs	r0, #1
    8d66:	f001 fc3d 	bl	a5e4 <wait>
					reset();
    8d6a:	f001 ffeb 	bl	ad44 <reset>
					break;
    8d6e:	e056      	b.n	8e1e <main+0x13a>
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    8d70:	4b2e      	ldr	r3, [pc, #184]	; (8e2c <main+0x148>)
    8d72:	2201      	movs	r2, #1
    8d74:	701a      	strb	r2, [r3, #0]
					bt_stream_legacy();
    8d76:	f7fd fef7 	bl	6b68 <bt_stream_legacy>
					break;
    8d7a:	e050      	b.n	8e1e <main+0x13a>
				case MODE_RX_FREQ:
					mode = MODE_RX_FREQ;
    8d7c:	4b2b      	ldr	r3, [pc, #172]	; (8e2c <main+0x148>)
    8d7e:	220e      	movs	r2, #14
    8d80:	701a      	strb	r2, [r3, #0]
					bt_stream_freq();
    8d82:	f7fd fd25 	bl	67d0 <bt_stream_freq>
					break;
    8d86:	e04a      	b.n	8e1e <main+0x13a>
				case MODE_RX_PROPOSED:
					mode = MODE_RX_PROPOSED;
    8d88:	4b28      	ldr	r3, [pc, #160]	; (8e2c <main+0x148>)
    8d8a:	220f      	movs	r2, #15
    8d8c:	701a      	strb	r2, [r3, #0]
					bt_stream_proposed();
    8d8e:	f7fd fc05 	bl	659c <bt_stream_proposed>
					break;
    8d92:	e044      	b.n	8e1e <main+0x13a>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    8d94:	4b25      	ldr	r3, [pc, #148]	; (8e2c <main+0x148>)
    8d96:	2208      	movs	r2, #8
    8d98:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    8d9a:	f7fe f8c3 	bl	6f24 <bt_stream_rx>
					break;
    8d9e:	e03e      	b.n	8e1e <main+0x13a>
				case MODE_BT_FOLLOW_LE:
					bt_follow_le();
    8da0:	f7ff f95c 	bl	805c <bt_follow_le>
					break;
    8da4:	e03b      	b.n	8e1e <main+0x13a>
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    8da6:	f7ff fd43 	bl	8830 <bt_promisc_le>
					break;
    8daa:	e038      	b.n	8e1e <main+0x13a>
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
    8dac:	f7ff fd84 	bl	88b8 <bt_slave_le>
					break;
    8db0:	e035      	b.n	8e1e <main+0x13a>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    8db2:	4b1e      	ldr	r3, [pc, #120]	; (8e2c <main+0x148>)
    8db4:	2203      	movs	r2, #3
    8db6:	701a      	strb	r2, [r3, #0]
					cc2400_txtest(&modulation, &channel);
    8db8:	481d      	ldr	r0, [pc, #116]	; (8e30 <main+0x14c>)
    8dba:	491e      	ldr	r1, [pc, #120]	; (8e34 <main+0x150>)
    8dbc:	f000 ff92 	bl	9ce4 <cc2400_txtest>
					break;
    8dc0:	e02d      	b.n	8e1e <main+0x13a>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    8dc2:	4b1a      	ldr	r3, [pc, #104]	; (8e2c <main+0x148>)
    8dc4:	2205      	movs	r2, #5
    8dc6:	701a      	strb	r2, [r3, #0]
					cc2400_rangetest(&channel);
    8dc8:	481a      	ldr	r0, [pc, #104]	; (8e34 <main+0x150>)
    8dca:	f000 fc35 	bl	9638 <cc2400_rangetest>
					mode = MODE_IDLE;
    8dce:	4b17      	ldr	r3, [pc, #92]	; (8e2c <main+0x148>)
    8dd0:	2200      	movs	r2, #0
    8dd2:	701a      	strb	r2, [r3, #0]
					if (requested_mode == MODE_RANGE_TEST)
    8dd4:	4b14      	ldr	r3, [pc, #80]	; (8e28 <main+0x144>)
    8dd6:	781b      	ldrb	r3, [r3, #0]
    8dd8:	b2db      	uxtb	r3, r3
    8dda:	2b05      	cmp	r3, #5
    8ddc:	d103      	bne.n	8de6 <main+0x102>
						requested_mode = MODE_IDLE;
    8dde:	4b12      	ldr	r3, [pc, #72]	; (8e28 <main+0x144>)
    8de0:	2200      	movs	r2, #0
    8de2:	701a      	strb	r2, [r3, #0]
					break;
    8de4:	e01b      	b.n	8e1e <main+0x13a>
    8de6:	e01a      	b.n	8e1e <main+0x13a>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    8de8:	4b10      	ldr	r3, [pc, #64]	; (8e2c <main+0x148>)
    8dea:	2206      	movs	r2, #6
    8dec:	701a      	strb	r2, [r3, #0]
					cc2400_repeater(&channel);
    8dee:	4811      	ldr	r0, [pc, #68]	; (8e34 <main+0x150>)
    8df0:	f000 fe40 	bl	9a74 <cc2400_repeater>
					break;
    8df4:	e013      	b.n	8e1e <main+0x13a>
				case MODE_SPECAN:
					specan();
    8df6:	f7ff fddb 	bl	89b0 <specan>
					break;
    8dfa:	e010      	b.n	8e1e <main+0x13a>
				case MODE_LED_SPECAN:
					led_specan();
    8dfc:	f7ff fea4 	bl	8b48 <led_specan>
					break;
    8e00:	e00d      	b.n	8e1e <main+0x13a>
				case MODE_EGO:
					mode = MODE_EGO;
    8e02:	4b0a      	ldr	r3, [pc, #40]	; (8e2c <main+0x148>)
    8e04:	220d      	movs	r2, #13
    8e06:	701a      	strb	r2, [r3, #0]
					ego_main(ego_mode);
    8e08:	4b0b      	ldr	r3, [pc, #44]	; (8e38 <main+0x154>)
    8e0a:	781b      	ldrb	r3, [r3, #0]
    8e0c:	b2db      	uxtb	r3, r3
    8e0e:	4618      	mov	r0, r3
    8e10:	f001 fb36 	bl	a480 <ego_main>
					break;
    8e14:	e003      	b.n	8e1e <main+0x13a>
				case MODE_IDLE:
					cc2400_idle();
    8e16:	f7fc fff7 	bl	5e08 <cc2400_idle>
					break;
    8e1a:	e000      	b.n	8e1e <main+0x13a>
				default:
					/* This is really an error state, but what can you do? */
					break;
    8e1c:	bf00      	nop
			}
	}
    8e1e:	e76a      	b.n	8cf6 <main+0x12>
    8e20:	00004b3d 	.word	0x00004b3d
    8e24:	10000bec 	.word	0x10000bec
    8e28:	10000a3f 	.word	0x10000a3f
    8e2c:	10000a3e 	.word	0x10000a3e
    8e30:	10000a42 	.word	0x10000a42
    8e34:	1000049c 	.word	0x1000049c
    8e38:	10000a41 	.word	0x10000a41

00008e3c <perm5>:
	}
}

/* 5 bit permutation */
u8 perm5(u8 z, u8 p_high, u16 p_low)
{
    8e3c:	b490      	push	{r4, r7}
    8e3e:	b092      	sub	sp, #72	; 0x48
    8e40:	af00      	add	r7, sp, #0
    8e42:	4603      	mov	r3, r0
    8e44:	71fb      	strb	r3, [r7, #7]
    8e46:	460b      	mov	r3, r1
    8e48:	71bb      	strb	r3, [r7, #6]
    8e4a:	4613      	mov	r3, r2
    8e4c:	80bb      	strh	r3, [r7, #4]
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
    8e4e:	79fb      	ldrb	r3, [r7, #7]
    8e50:	f003 031f 	and.w	r3, r3, #31
    8e54:	71fb      	strb	r3, [r7, #7]
	p_high &= 0x1f;
    8e56:	79bb      	ldrb	r3, [r7, #6]
    8e58:	f003 031f 	and.w	r3, r3, #31
    8e5c:	71bb      	strb	r3, [r7, #6]
	p_low &= 0x1ff;
    8e5e:	88bb      	ldrh	r3, [r7, #4]
    8e60:	f3c3 0308 	ubfx	r3, r3, #0, #9
    8e64:	80bb      	strh	r3, [r7, #4]

	int i;
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
    8e66:	4a5c      	ldr	r2, [pc, #368]	; (8fd8 <perm5+0x19c>)
    8e68:	f107 031c 	add.w	r3, r7, #28
    8e6c:	4614      	mov	r4, r2
    8e6e:	6820      	ldr	r0, [r4, #0]
    8e70:	6861      	ldr	r1, [r4, #4]
    8e72:	68a2      	ldr	r2, [r4, #8]
    8e74:	c307      	stmia	r3!, {r0, r1, r2}
    8e76:	89a2      	ldrh	r2, [r4, #12]
    8e78:	801a      	strh	r2, [r3, #0]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};
    8e7a:	4a58      	ldr	r2, [pc, #352]	; (8fdc <perm5+0x1a0>)
    8e7c:	f107 030c 	add.w	r3, r7, #12
    8e80:	4614      	mov	r4, r2
    8e82:	6820      	ldr	r0, [r4, #0]
    8e84:	6861      	ldr	r1, [r4, #4]
    8e86:	68a2      	ldr	r2, [r4, #8]
    8e88:	c307      	stmia	r3!, {r0, r1, r2}
    8e8a:	89a2      	ldrh	r2, [r4, #12]
    8e8c:	801a      	strh	r2, [r3, #0]

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    8e8e:	2300      	movs	r3, #0
    8e90:	647b      	str	r3, [r7, #68]	; 0x44
    8e92:	e010      	b.n	8eb6 <perm5+0x7a>
		p[i] = (p_low >> i) & 0x01;
    8e94:	88ba      	ldrh	r2, [r7, #4]
    8e96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8e98:	fa42 f303 	asr.w	r3, r2, r3
    8e9c:	b2db      	uxtb	r3, r3
    8e9e:	f003 0301 	and.w	r3, r3, #1
    8ea2:	b2d9      	uxtb	r1, r3
    8ea4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    8ea8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8eaa:	4413      	add	r3, r2
    8eac:	460a      	mov	r2, r1
    8eae:	701a      	strb	r2, [r3, #0]
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    8eb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8eb2:	3301      	adds	r3, #1
    8eb4:	647b      	str	r3, [r7, #68]	; 0x44
    8eb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8eb8:	2b08      	cmp	r3, #8
    8eba:	ddeb      	ble.n	8e94 <perm5+0x58>
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    8ebc:	2300      	movs	r3, #0
    8ebe:	647b      	str	r3, [r7, #68]	; 0x44
    8ec0:	e011      	b.n	8ee6 <perm5+0xaa>
		p[i+9] = (p_high >> i) & 0x01;
    8ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8ec4:	3309      	adds	r3, #9
    8ec6:	79b9      	ldrb	r1, [r7, #6]
    8ec8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    8eca:	fa41 f202 	asr.w	r2, r1, r2
    8ece:	b2d2      	uxtb	r2, r2
    8ed0:	f002 0201 	and.w	r2, r2, #1
    8ed4:	b2d2      	uxtb	r2, r2
    8ed6:	f107 0148 	add.w	r1, r7, #72	; 0x48
    8eda:	440b      	add	r3, r1
    8edc:	f803 2c1c 	strb.w	r2, [r3, #-28]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    8ee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8ee2:	3301      	adds	r3, #1
    8ee4:	647b      	str	r3, [r7, #68]	; 0x44
    8ee6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8ee8:	2b04      	cmp	r3, #4
    8eea:	ddea      	ble.n	8ec2 <perm5+0x86>
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    8eec:	2300      	movs	r3, #0
    8eee:	647b      	str	r3, [r7, #68]	; 0x44
    8ef0:	e010      	b.n	8f14 <perm5+0xd8>
		z_bit[i] = (z >> i) & 0x01;
    8ef2:	79fa      	ldrb	r2, [r7, #7]
    8ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8ef6:	fa42 f303 	asr.w	r3, r2, r3
    8efa:	b2db      	uxtb	r3, r3
    8efc:	f003 0301 	and.w	r3, r3, #1
    8f00:	b2d9      	uxtb	r1, r3
    8f02:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    8f06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8f08:	4413      	add	r3, r2
    8f0a:	460a      	mov	r2, r1
    8f0c:	701a      	strb	r2, [r3, #0]
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    8f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8f10:	3301      	adds	r3, #1
    8f12:	647b      	str	r3, [r7, #68]	; 0x44
    8f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8f16:	2b04      	cmp	r3, #4
    8f18:	ddeb      	ble.n	8ef2 <perm5+0xb6>
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    8f1a:	230d      	movs	r3, #13
    8f1c:	647b      	str	r3, [r7, #68]	; 0x44
    8f1e:	e036      	b.n	8f8e <perm5+0x152>
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
    8f20:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    8f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8f26:	4413      	add	r3, r2
    8f28:	781b      	ldrb	r3, [r3, #0]
    8f2a:	2b00      	cmp	r3, #0
    8f2c:	d02c      	beq.n	8f88 <perm5+0x14c>
			tmp = z_bit[index1[i]];
    8f2e:	f107 021c 	add.w	r2, r7, #28
    8f32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8f34:	4413      	add	r3, r2
    8f36:	781b      	ldrb	r3, [r3, #0]
    8f38:	f107 0248 	add.w	r2, r7, #72	; 0x48
    8f3c:	4413      	add	r3, r2
    8f3e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    8f42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			z_bit[index1[i]] = z_bit[index2[i]];
    8f46:	f107 021c 	add.w	r2, r7, #28
    8f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8f4c:	4413      	add	r3, r2
    8f4e:	781b      	ldrb	r3, [r3, #0]
    8f50:	4619      	mov	r1, r3
    8f52:	f107 020c 	add.w	r2, r7, #12
    8f56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8f58:	4413      	add	r3, r2
    8f5a:	781b      	ldrb	r3, [r3, #0]
    8f5c:	f107 0248 	add.w	r2, r7, #72	; 0x48
    8f60:	4413      	add	r3, r2
    8f62:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
    8f66:	f107 0348 	add.w	r3, r7, #72	; 0x48
    8f6a:	440b      	add	r3, r1
    8f6c:	f803 2c0c 	strb.w	r2, [r3, #-12]
			z_bit[index2[i]] = tmp;
    8f70:	f107 020c 	add.w	r2, r7, #12
    8f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8f76:	4413      	add	r3, r2
    8f78:	781b      	ldrb	r3, [r3, #0]
    8f7a:	f107 0248 	add.w	r2, r7, #72	; 0x48
    8f7e:	4413      	add	r3, r2
    8f80:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
    8f84:	f803 2c0c 	strb.w	r2, [r3, #-12]
	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    8f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8f8a:	3b01      	subs	r3, #1
    8f8c:	647b      	str	r3, [r7, #68]	; 0x44
    8f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8f90:	2b00      	cmp	r3, #0
    8f92:	dac5      	bge.n	8f20 <perm5+0xe4>
			z_bit[index2[i]] = tmp;
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
    8f94:	2300      	movs	r3, #0
    8f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	for (i = 0; i < 5; i++)
    8f9a:	2300      	movs	r3, #0
    8f9c:	647b      	str	r3, [r7, #68]	; 0x44
    8f9e:	e011      	b.n	8fc4 <perm5+0x188>
		output += z_bit[i] << i;
    8fa0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    8fa4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8fa6:	4413      	add	r3, r2
    8fa8:	781b      	ldrb	r3, [r3, #0]
    8faa:	461a      	mov	r2, r3
    8fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8fae:	fa02 f303 	lsl.w	r3, r2, r3
    8fb2:	b2da      	uxtb	r2, r3
    8fb4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    8fb8:	4413      	add	r3, r2
    8fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    8fbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8fc0:	3301      	adds	r3, #1
    8fc2:	647b      	str	r3, [r7, #68]	; 0x44
    8fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8fc6:	2b04      	cmp	r3, #4
    8fc8:	ddea      	ble.n	8fa0 <perm5+0x164>
		output += z_bit[i] << i;

	return output;
    8fca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
}
    8fce:	4618      	mov	r0, r3
    8fd0:	3748      	adds	r7, #72	; 0x48
    8fd2:	46bd      	mov	sp, r7
    8fd4:	bc90      	pop	{r4, r7}
    8fd6:	4770      	bx	lr
    8fd8:	0000cfac 	.word	0x0000cfac
    8fdc:	0000cfbc 	.word	0x0000cfbc

00008fe0 <next_hop>:

u16 next_hop(u32 clock)
{
    8fe0:	b580      	push	{r7, lr}
    8fe2:	b08a      	sub	sp, #40	; 0x28
    8fe4:	af00      	add	r7, sp, #0
    8fe6:	6078      	str	r0, [r7, #4]
	u16 d, y2;
	u32 base_f, f, f_dash;

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
    8fe8:	687b      	ldr	r3, [r7, #4]
    8fea:	089b      	lsrs	r3, r3, #2
    8fec:	b2db      	uxtb	r3, r3
    8fee:	f003 031f 	and.w	r3, r3, #31
    8ff2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	y1 = (clock >> 1) & 0x01;
    8ff6:	687b      	ldr	r3, [r7, #4]
    8ff8:	085b      	lsrs	r3, r3, #1
    8ffa:	b2db      	uxtb	r3, r3
    8ffc:	f003 0301 	and.w	r3, r3, #1
    9000:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	y2 = y1 << 5;
    9004:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    9008:	b29b      	uxth	r3, r3
    900a:	015b      	lsls	r3, r3, #5
    900c:	847b      	strh	r3, [r7, #34]	; 0x22
	a = (a1 ^ (clock >> 21)) & 0x1f;
    900e:	687b      	ldr	r3, [r7, #4]
    9010:	0d5b      	lsrs	r3, r3, #21
    9012:	b2da      	uxtb	r2, r3
    9014:	4b4b      	ldr	r3, [pc, #300]	; (9144 <next_hop+0x164>)
    9016:	781b      	ldrb	r3, [r3, #0]
    9018:	4053      	eors	r3, r2
    901a:	b2db      	uxtb	r3, r3
    901c:	f003 031f 	and.w	r3, r3, #31
    9020:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    9024:	687b      	ldr	r3, [r7, #4]
    9026:	0c1b      	lsrs	r3, r3, #16
    9028:	b2da      	uxtb	r2, r3
    902a:	4b47      	ldr	r3, [pc, #284]	; (9148 <next_hop+0x168>)
    902c:	781b      	ldrb	r3, [r3, #0]
    902e:	4053      	eors	r3, r2
    9030:	b2db      	uxtb	r3, r3
    9032:	f003 031f 	and.w	r3, r3, #31
    9036:	f887 3020 	strb.w	r3, [r7, #32]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    903a:	687b      	ldr	r3, [r7, #4]
    903c:	09db      	lsrs	r3, r3, #7
    903e:	b29a      	uxth	r2, r3
    9040:	4b42      	ldr	r3, [pc, #264]	; (914c <next_hop+0x16c>)
    9042:	881b      	ldrh	r3, [r3, #0]
    9044:	4053      	eors	r3, r2
    9046:	b29b      	uxth	r3, r3
    9048:	f3c3 0308 	ubfx	r3, r3, #0, #9
    904c:	83fb      	strh	r3, [r7, #30]
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    904e:	687b      	ldr	r3, [r7, #4]
    9050:	08db      	lsrs	r3, r3, #3
    9052:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    9056:	f023 030f 	bic.w	r3, r3, #15
    905a:	61bb      	str	r3, [r7, #24]
	f = base_f % 79;
    905c:	69b9      	ldr	r1, [r7, #24]
    905e:	4b3c      	ldr	r3, [pc, #240]	; (9150 <next_hop+0x170>)
    9060:	fba3 2301 	umull	r2, r3, r3, r1
    9064:	099a      	lsrs	r2, r3, #6
    9066:	4613      	mov	r3, r2
    9068:	009b      	lsls	r3, r3, #2
    906a:	4413      	add	r3, r2
    906c:	011b      	lsls	r3, r3, #4
    906e:	1a9b      	subs	r3, r3, r2
    9070:	1acb      	subs	r3, r1, r3
    9072:	617b      	str	r3, [r7, #20]

	perm = perm5(
    9074:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    9078:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    907c:	4413      	add	r3, r2
    907e:	b2db      	uxtb	r3, r3
    9080:	b2db      	uxtb	r3, r3
    9082:	f003 031f 	and.w	r3, r3, #31
    9086:	b2da      	uxtb	r2, r3
    9088:	4b32      	ldr	r3, [pc, #200]	; (9154 <next_hop+0x174>)
    908a:	781b      	ldrb	r3, [r3, #0]
    908c:	b2db      	uxtb	r3, r3
    908e:	4053      	eors	r3, r2
    9090:	b2db      	uxtb	r3, r3
    9092:	b2d9      	uxtb	r1, r3
    9094:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    9098:	461a      	mov	r2, r3
    909a:	0152      	lsls	r2, r2, #5
    909c:	1ad3      	subs	r3, r2, r3
    909e:	b2db      	uxtb	r3, r3
    90a0:	b2da      	uxtb	r2, r3
    90a2:	f897 3020 	ldrb.w	r3, [r7, #32]
    90a6:	4053      	eors	r3, r2
    90a8:	b2db      	uxtb	r3, r3
    90aa:	b2da      	uxtb	r2, r3
    90ac:	8bfb      	ldrh	r3, [r7, #30]
    90ae:	4608      	mov	r0, r1
    90b0:	4611      	mov	r1, r2
    90b2:	461a      	mov	r2, r3
    90b4:	f7ff fec2 	bl	8e3c <perm5>
    90b8:	4603      	mov	r3, r0
    90ba:	74fb      	strb	r3, [r7, #19]
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % CHANNELS];
    90bc:	7cfb      	ldrb	r3, [r7, #19]
    90be:	4a26      	ldr	r2, [pc, #152]	; (9158 <next_hop+0x178>)
    90c0:	7812      	ldrb	r2, [r2, #0]
    90c2:	4413      	add	r3, r2
    90c4:	461a      	mov	r2, r3
    90c6:	697b      	ldr	r3, [r7, #20]
    90c8:	441a      	add	r2, r3
    90ca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    90cc:	18d1      	adds	r1, r2, r3
    90ce:	4b20      	ldr	r3, [pc, #128]	; (9150 <next_hop+0x170>)
    90d0:	fba3 2301 	umull	r2, r3, r3, r1
    90d4:	099a      	lsrs	r2, r3, #6
    90d6:	4613      	mov	r3, r2
    90d8:	009b      	lsls	r3, r3, #2
    90da:	4413      	add	r3, r2
    90dc:	011b      	lsls	r3, r3, #4
    90de:	1a9b      	subs	r3, r3, r2
    90e0:	1aca      	subs	r2, r1, r3
    90e2:	4b1e      	ldr	r3, [pc, #120]	; (915c <next_hop+0x17c>)
    90e4:	5c9b      	ldrb	r3, [r3, r2]
    90e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(afh_enabled) {
    90ea:	4b1d      	ldr	r3, [pc, #116]	; (9160 <next_hop+0x180>)
    90ec:	781b      	ldrb	r3, [r3, #0]
    90ee:	2b00      	cmp	r3, #0
    90f0:	d01d      	beq.n	912e <next_hop+0x14e>
		f_dash = base_f % used_channels;
    90f2:	4b1c      	ldr	r3, [pc, #112]	; (9164 <next_hop+0x184>)
    90f4:	781b      	ldrb	r3, [r3, #0]
    90f6:	461a      	mov	r2, r3
    90f8:	69bb      	ldr	r3, [r7, #24]
    90fa:	fbb3 f1f2 	udiv	r1, r3, r2
    90fe:	fb02 f201 	mul.w	r2, r2, r1
    9102:	1a9b      	subs	r3, r3, r2
    9104:	60fb      	str	r3, [r7, #12]
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    9106:	7cfb      	ldrb	r3, [r7, #19]
    9108:	4a13      	ldr	r2, [pc, #76]	; (9158 <next_hop+0x178>)
    910a:	7812      	ldrb	r2, [r2, #0]
    910c:	4413      	add	r3, r2
    910e:	461a      	mov	r2, r3
    9110:	68fb      	ldr	r3, [r7, #12]
    9112:	441a      	add	r2, r3
    9114:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    9116:	4413      	add	r3, r2
    9118:	4a12      	ldr	r2, [pc, #72]	; (9164 <next_hop+0x184>)
    911a:	7812      	ldrb	r2, [r2, #0]
    911c:	fbb3 f1f2 	udiv	r1, r3, r2
    9120:	fb02 f201 	mul.w	r2, r2, r1
    9124:	1a9b      	subs	r3, r3, r2
    9126:	4a10      	ldr	r2, [pc, #64]	; (9168 <next_hop+0x188>)
    9128:	5cd3      	ldrb	r3, [r2, r3]
    912a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return (2402 + next_channel);
    912e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    9132:	b29b      	uxth	r3, r3
    9134:	f603 1362 	addw	r3, r3, #2402	; 0x962
    9138:	b29b      	uxth	r3, r3

}
    913a:	4618      	mov	r0, r3
    913c:	3728      	adds	r7, #40	; 0x28
    913e:	46bd      	mov	sp, r7
    9140:	bd80      	pop	{r7, pc}
    9142:	bf00      	nop
    9144:	10001133 	.word	0x10001133
    9148:	10001134 	.word	0x10001134
    914c:	100010e2 	.word	0x100010e2
    9150:	cf6474a9 	.word	0xcf6474a9
    9154:	100010e0 	.word	0x100010e0
    9158:	10001187 	.word	0x10001187
    915c:	10001138 	.word	0x10001138
    9160:	10001038 	.word	0x10001038
    9164:	100010e1 	.word	0x100010e1
    9168:	100010e4 	.word	0x100010e4

0000916c <btle_next_hop>:

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    916c:	b580      	push	{r7, lr}
    916e:	b084      	sub	sp, #16
    9170:	af00      	add	r7, sp, #0
    9172:	6078      	str	r0, [r7, #4]
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    9174:	687b      	ldr	r3, [r7, #4]
    9176:	7d5b      	ldrb	r3, [r3, #21]
    9178:	4618      	mov	r0, r3
    917a:	f000 f84b 	bl	9214 <btle_channel_index_to_phys>
    917e:	4603      	mov	r3, r0
    9180:	81fb      	strh	r3, [r7, #14]
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    9182:	687b      	ldr	r3, [r7, #4]
    9184:	7d5b      	ldrb	r3, [r3, #21]
    9186:	461a      	mov	r2, r3
    9188:	687b      	ldr	r3, [r7, #4]
    918a:	7d9b      	ldrb	r3, [r3, #22]
    918c:	441a      	add	r2, r3
    918e:	4b0a      	ldr	r3, [pc, #40]	; (91b8 <btle_next_hop+0x4c>)
    9190:	fb82 0103 	smull	r0, r1, r2, r3
    9194:	1853      	adds	r3, r2, r1
    9196:	1159      	asrs	r1, r3, #5
    9198:	17d3      	asrs	r3, r2, #31
    919a:	1ac9      	subs	r1, r1, r3
    919c:	460b      	mov	r3, r1
    919e:	00db      	lsls	r3, r3, #3
    91a0:	440b      	add	r3, r1
    91a2:	009b      	lsls	r3, r3, #2
    91a4:	440b      	add	r3, r1
    91a6:	1ad1      	subs	r1, r2, r3
    91a8:	b2ca      	uxtb	r2, r1
    91aa:	687b      	ldr	r3, [r7, #4]
    91ac:	755a      	strb	r2, [r3, #21]
	return phys;
    91ae:	89fb      	ldrh	r3, [r7, #14]
}
    91b0:	4618      	mov	r0, r3
    91b2:	3710      	adds	r7, #16
    91b4:	46bd      	mov	sp, r7
    91b6:	bd80      	pop	{r7, pc}
    91b8:	dd67c8a7 	.word	0xdd67c8a7

000091bc <btle_channel_index>:

u32 received_data = 0;

u8 btle_channel_index(u8 channel) {
    91bc:	b480      	push	{r7}
    91be:	b085      	sub	sp, #20
    91c0:	af00      	add	r7, sp, #0
    91c2:	4603      	mov	r3, r0
    91c4:	71fb      	strb	r3, [r7, #7]
	u8 idx;
	channel /= 2;
    91c6:	79fb      	ldrb	r3, [r7, #7]
    91c8:	085b      	lsrs	r3, r3, #1
    91ca:	71fb      	strb	r3, [r7, #7]
	if (channel == 0)
    91cc:	79fb      	ldrb	r3, [r7, #7]
    91ce:	2b00      	cmp	r3, #0
    91d0:	d102      	bne.n	91d8 <btle_channel_index+0x1c>
		idx = 37;
    91d2:	2325      	movs	r3, #37	; 0x25
    91d4:	73fb      	strb	r3, [r7, #15]
    91d6:	e015      	b.n	9204 <btle_channel_index+0x48>
	else if (channel < 12)
    91d8:	79fb      	ldrb	r3, [r7, #7]
    91da:	2b0b      	cmp	r3, #11
    91dc:	d803      	bhi.n	91e6 <btle_channel_index+0x2a>
		idx = channel - 1;
    91de:	79fb      	ldrb	r3, [r7, #7]
    91e0:	3b01      	subs	r3, #1
    91e2:	73fb      	strb	r3, [r7, #15]
    91e4:	e00e      	b.n	9204 <btle_channel_index+0x48>
	else if (channel == 12)
    91e6:	79fb      	ldrb	r3, [r7, #7]
    91e8:	2b0c      	cmp	r3, #12
    91ea:	d102      	bne.n	91f2 <btle_channel_index+0x36>
		idx = 38;
    91ec:	2326      	movs	r3, #38	; 0x26
    91ee:	73fb      	strb	r3, [r7, #15]
    91f0:	e008      	b.n	9204 <btle_channel_index+0x48>
	else if (channel < 39)
    91f2:	79fb      	ldrb	r3, [r7, #7]
    91f4:	2b26      	cmp	r3, #38	; 0x26
    91f6:	d803      	bhi.n	9200 <btle_channel_index+0x44>
		idx = channel - 2;
    91f8:	79fb      	ldrb	r3, [r7, #7]
    91fa:	3b02      	subs	r3, #2
    91fc:	73fb      	strb	r3, [r7, #15]
    91fe:	e001      	b.n	9204 <btle_channel_index+0x48>
	else
		idx = 39;
    9200:	2327      	movs	r3, #39	; 0x27
    9202:	73fb      	strb	r3, [r7, #15]
	return idx;
    9204:	7bfb      	ldrb	r3, [r7, #15]
}
    9206:	4618      	mov	r0, r3
    9208:	3714      	adds	r7, #20
    920a:	46bd      	mov	sp, r7
    920c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9210:	4770      	bx	lr
    9212:	bf00      	nop

00009214 <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
    9214:	b480      	push	{r7}
    9216:	b085      	sub	sp, #20
    9218:	af00      	add	r7, sp, #0
    921a:	4603      	mov	r3, r0
    921c:	71fb      	strb	r3, [r7, #7]
	u16 phys;
	if (idx < 11)
    921e:	79fb      	ldrb	r3, [r7, #7]
    9220:	2b0a      	cmp	r3, #10
    9222:	d806      	bhi.n	9232 <btle_channel_index_to_phys+0x1e>
		phys = 2404 + 2 * idx;
    9224:	79fb      	ldrb	r3, [r7, #7]
    9226:	f203 43b2 	addw	r3, r3, #1202	; 0x4b2
    922a:	b29b      	uxth	r3, r3
    922c:	005b      	lsls	r3, r3, #1
    922e:	81fb      	strh	r3, [r7, #14]
    9230:	e01a      	b.n	9268 <btle_channel_index_to_phys+0x54>
	else if (idx < 37)
    9232:	79fb      	ldrb	r3, [r7, #7]
    9234:	2b24      	cmp	r3, #36	; 0x24
    9236:	d806      	bhi.n	9246 <btle_channel_index_to_phys+0x32>
		phys = 2428 + 2 * (idx - 11);
    9238:	79fb      	ldrb	r3, [r7, #7]
    923a:	f203 43b3 	addw	r3, r3, #1203	; 0x4b3
    923e:	b29b      	uxth	r3, r3
    9240:	005b      	lsls	r3, r3, #1
    9242:	81fb      	strh	r3, [r7, #14]
    9244:	e010      	b.n	9268 <btle_channel_index_to_phys+0x54>
	else if (idx == 37)
    9246:	79fb      	ldrb	r3, [r7, #7]
    9248:	2b25      	cmp	r3, #37	; 0x25
    924a:	d103      	bne.n	9254 <btle_channel_index_to_phys+0x40>
		phys = 2402;
    924c:	f640 1362 	movw	r3, #2402	; 0x962
    9250:	81fb      	strh	r3, [r7, #14]
    9252:	e009      	b.n	9268 <btle_channel_index_to_phys+0x54>
	else if (idx == 38)
    9254:	79fb      	ldrb	r3, [r7, #7]
    9256:	2b26      	cmp	r3, #38	; 0x26
    9258:	d103      	bne.n	9262 <btle_channel_index_to_phys+0x4e>
		phys = 2426;
    925a:	f640 137a 	movw	r3, #2426	; 0x97a
    925e:	81fb      	strh	r3, [r7, #14]
    9260:	e002      	b.n	9268 <btle_channel_index_to_phys+0x54>
	else
		phys = 2480;
    9262:	f44f 631b 	mov.w	r3, #2480	; 0x9b0
    9266:	81fb      	strh	r3, [r7, #14]
	return phys;
    9268:	89fb      	ldrh	r3, [r7, #14]
}
    926a:	4618      	mov	r0, r3
    926c:	3714      	adds	r7, #20
    926e:	46bd      	mov	sp, r7
    9270:	f85d 7b04 	ldr.w	r7, [sp], #4
    9274:	4770      	bx	lr
    9276:	bf00      	nop

00009278 <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    9278:	b480      	push	{r7}
    927a:	b08b      	sub	sp, #44	; 0x2c
    927c:	af00      	add	r7, sp, #0
    927e:	60f8      	str	r0, [r7, #12]
    9280:	60b9      	str	r1, [r7, #8]
    9282:	607a      	str	r2, [r7, #4]
	u32 state = crc_init & 0xffffff;
    9284:	68fb      	ldr	r3, [r7, #12]
    9286:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    928a:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
    928c:	4b1b      	ldr	r3, [pc, #108]	; (92fc <btle_calc_crc+0x84>)
    928e:	617b      	str	r3, [r7, #20]
	int i, j;

	for (i = 0; i < len; ++i) {
    9290:	2300      	movs	r3, #0
    9292:	623b      	str	r3, [r7, #32]
    9294:	e027      	b.n	92e6 <btle_calc_crc+0x6e>
		u8 cur = data[i];
    9296:	6a3b      	ldr	r3, [r7, #32]
    9298:	68ba      	ldr	r2, [r7, #8]
    929a:	4413      	add	r3, r2
    929c:	781b      	ldrb	r3, [r3, #0]
    929e:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    92a0:	2300      	movs	r3, #0
    92a2:	61fb      	str	r3, [r7, #28]
    92a4:	e019      	b.n	92da <btle_calc_crc+0x62>
			int next_bit = (state ^ cur) & 1;
    92a6:	7efa      	ldrb	r2, [r7, #27]
    92a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92aa:	4053      	eors	r3, r2
    92ac:	f003 0301 	and.w	r3, r3, #1
    92b0:	613b      	str	r3, [r7, #16]
			cur >>= 1;
    92b2:	7efb      	ldrb	r3, [r7, #27]
    92b4:	085b      	lsrs	r3, r3, #1
    92b6:	76fb      	strb	r3, [r7, #27]
			state >>= 1;
    92b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92ba:	085b      	lsrs	r3, r3, #1
    92bc:	627b      	str	r3, [r7, #36]	; 0x24
			if (next_bit) {
    92be:	693b      	ldr	r3, [r7, #16]
    92c0:	2b00      	cmp	r3, #0
    92c2:	d007      	beq.n	92d4 <btle_calc_crc+0x5c>
				state |= 1 << 23;
    92c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    92ca:	627b      	str	r3, [r7, #36]	; 0x24
				state ^= lfsr_mask;
    92cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    92ce:	697b      	ldr	r3, [r7, #20]
    92d0:	4053      	eors	r3, r2
    92d2:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    92d4:	69fb      	ldr	r3, [r7, #28]
    92d6:	3301      	adds	r3, #1
    92d8:	61fb      	str	r3, [r7, #28]
    92da:	69fb      	ldr	r3, [r7, #28]
    92dc:	2b07      	cmp	r3, #7
    92de:	dde2      	ble.n	92a6 <btle_calc_crc+0x2e>
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    92e0:	6a3b      	ldr	r3, [r7, #32]
    92e2:	3301      	adds	r3, #1
    92e4:	623b      	str	r3, [r7, #32]
    92e6:	6a3a      	ldr	r2, [r7, #32]
    92e8:	687b      	ldr	r3, [r7, #4]
    92ea:	429a      	cmp	r2, r3
    92ec:	dbd3      	blt.n	9296 <btle_calc_crc+0x1e>
				state ^= lfsr_mask;
			}
		}
	}

	return state;
    92ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    92f0:	4618      	mov	r0, r3
    92f2:	372c      	adds	r7, #44	; 0x2c
    92f4:	46bd      	mov	sp, r7
    92f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    92fa:	4770      	bx	lr
    92fc:	005a6000 	.word	0x005a6000

00009300 <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    9300:	b480      	push	{r7}
    9302:	b08d      	sub	sp, #52	; 0x34
    9304:	af00      	add	r7, sp, #0
    9306:	60f8      	str	r0, [r7, #12]
    9308:	60b9      	str	r1, [r7, #8]
    930a:	607a      	str	r2, [r7, #4]
	u32 state = crc;
    930c:	68fb      	ldr	r3, [r7, #12]
    930e:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
    9310:	4b2b      	ldr	r3, [pc, #172]	; (93c0 <btle_reverse_crc+0xc0>)
    9312:	61fb      	str	r3, [r7, #28]
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    9314:	687b      	ldr	r3, [r7, #4]
    9316:	3b01      	subs	r3, #1
    9318:	627b      	str	r3, [r7, #36]	; 0x24
    931a:	e02d      	b.n	9378 <btle_reverse_crc+0x78>
		u8 cur = data[i];
    931c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    931e:	68ba      	ldr	r2, [r7, #8]
    9320:	4413      	add	r3, r2
    9322:	781b      	ldrb	r3, [r3, #0]
    9324:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    9326:	2300      	movs	r3, #0
    9328:	623b      	str	r3, [r7, #32]
    932a:	e01f      	b.n	936c <btle_reverse_crc+0x6c>
			int top_bit = state >> 23;
    932c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    932e:	0ddb      	lsrs	r3, r3, #23
    9330:	617b      	str	r3, [r7, #20]
			state = (state << 1) & 0xffffff;
    9332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9334:	005b      	lsls	r3, r3, #1
    9336:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    933a:	62fb      	str	r3, [r7, #44]	; 0x2c
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    933c:	7efa      	ldrb	r2, [r7, #27]
    933e:	6a3b      	ldr	r3, [r7, #32]
    9340:	f1c3 0307 	rsb	r3, r3, #7
    9344:	fa42 f303 	asr.w	r3, r2, r3
    9348:	f003 0201 	and.w	r2, r3, #1
    934c:	697b      	ldr	r3, [r7, #20]
    934e:	4053      	eors	r3, r2
    9350:	461a      	mov	r2, r3
    9352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9354:	4313      	orrs	r3, r2
    9356:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (top_bit)
    9358:	697b      	ldr	r3, [r7, #20]
    935a:	2b00      	cmp	r3, #0
    935c:	d003      	beq.n	9366 <btle_reverse_crc+0x66>
				state ^= lfsr_mask;
    935e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    9360:	69fb      	ldr	r3, [r7, #28]
    9362:	4053      	eors	r3, r2
    9364:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    9366:	6a3b      	ldr	r3, [r7, #32]
    9368:	3301      	adds	r3, #1
    936a:	623b      	str	r3, [r7, #32]
    936c:	6a3b      	ldr	r3, [r7, #32]
    936e:	2b07      	cmp	r3, #7
    9370:	dddc      	ble.n	932c <btle_reverse_crc+0x2c>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    9372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9374:	3b01      	subs	r3, #1
    9376:	627b      	str	r3, [r7, #36]	; 0x24
    9378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    937a:	2b00      	cmp	r3, #0
    937c:	dace      	bge.n	931c <btle_reverse_crc+0x1c>
			if (top_bit)
				state ^= lfsr_mask;
		}
	}

	ret = 0;
    937e:	2300      	movs	r3, #0
    9380:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < 24; ++i)
    9382:	2300      	movs	r3, #0
    9384:	627b      	str	r3, [r7, #36]	; 0x24
    9386:	e010      	b.n	93aa <btle_reverse_crc+0xaa>
		ret |= ((state >> i) & 1) << (23 - i);
    9388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    938a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    938c:	fa22 f303 	lsr.w	r3, r2, r3
    9390:	f003 0201 	and.w	r2, r3, #1
    9394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9396:	f1c3 0317 	rsb	r3, r3, #23
    939a:	fa02 f303 	lsl.w	r3, r2, r3
    939e:	6aba      	ldr	r2, [r7, #40]	; 0x28
    93a0:	4313      	orrs	r3, r2
    93a2:	62bb      	str	r3, [r7, #40]	; 0x28
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    93a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    93a6:	3301      	adds	r3, #1
    93a8:	627b      	str	r3, [r7, #36]	; 0x24
    93aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    93ac:	2b17      	cmp	r3, #23
    93ae:	ddeb      	ble.n	9388 <btle_reverse_crc+0x88>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
    93b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    93b2:	4618      	mov	r0, r3
    93b4:	3734      	adds	r7, #52	; 0x34
    93b6:	46bd      	mov	sp, r7
    93b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    93bc:	4770      	bx	lr
    93be:	bf00      	nop
    93c0:	00b4c000 	.word	0x00b4c000

000093c4 <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    93c4:	b480      	push	{r7}
    93c6:	b089      	sub	sp, #36	; 0x24
    93c8:	af00      	add	r7, sp, #0
    93ca:	60f8      	str	r0, [r7, #12]
    93cc:	60b9      	str	r1, [r7, #8]
    93ce:	607a      	str	r2, [r7, #4]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    93d0:	68fb      	ldr	r3, [r7, #12]
    93d2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    93d6:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < len; ++i) {
    93d8:	2300      	movs	r3, #0
    93da:	61bb      	str	r3, [r7, #24]
    93dc:	e012      	b.n	9404 <btle_crcgen_lut+0x40>
		key = data[i] ^ (state & 0xff);
    93de:	69bb      	ldr	r3, [r7, #24]
    93e0:	68ba      	ldr	r2, [r7, #8]
    93e2:	4413      	add	r3, r2
    93e4:	781a      	ldrb	r2, [r3, #0]
    93e6:	69fb      	ldr	r3, [r7, #28]
    93e8:	b2db      	uxtb	r3, r3
    93ea:	4053      	eors	r3, r2
    93ec:	75fb      	strb	r3, [r7, #23]
		state = (state >> 8) ^ btle_crc_lut[key];
    93ee:	69fb      	ldr	r3, [r7, #28]
    93f0:	0a1a      	lsrs	r2, r3, #8
    93f2:	7dfb      	ldrb	r3, [r7, #23]
    93f4:	4909      	ldr	r1, [pc, #36]	; (941c <btle_crcgen_lut+0x58>)
    93f6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    93fa:	4053      	eors	r3, r2
    93fc:	61fb      	str	r3, [r7, #28]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    93fe:	69bb      	ldr	r3, [r7, #24]
    9400:	3301      	adds	r3, #1
    9402:	61bb      	str	r3, [r7, #24]
    9404:	69ba      	ldr	r2, [r7, #24]
    9406:	687b      	ldr	r3, [r7, #4]
    9408:	429a      	cmp	r2, r3
    940a:	dbe8      	blt.n	93de <btle_crcgen_lut+0x1a>
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
	}
	return state;
    940c:	69fb      	ldr	r3, [r7, #28]
}
    940e:	4618      	mov	r0, r3
    9410:	3724      	adds	r7, #36	; 0x24
    9412:	46bd      	mov	sp, r7
    9414:	f85d 7b04 	ldr.w	r7, [sp], #4
    9418:	4770      	bx	lr
    941a:	bf00      	nop
    941c:	100004a8 	.word	0x100004a8

00009420 <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    9420:	b590      	push	{r4, r7, lr}
    9422:	b087      	sub	sp, #28
    9424:	af00      	add	r7, sp, #0
    9426:	60f8      	str	r0, [r7, #12]
    9428:	60b9      	str	r1, [r7, #8]
    942a:	607a      	str	r2, [r7, #4]
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    942c:	68fb      	ldr	r3, [r7, #12]
    942e:	885b      	ldrh	r3, [r3, #2]
    9430:	823b      	strh	r3, [r7, #16]
    9432:	68fb      	ldr	r3, [r7, #12]
    9434:	889b      	ldrh	r3, [r3, #4]
    9436:	827b      	strh	r3, [r7, #18]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    9438:	4b0b      	ldr	r3, [pc, #44]	; (9468 <usb_vendor_request_handler+0x48>)
    943a:	681c      	ldr	r4, [r3, #0]
    943c:	68fb      	ldr	r3, [r7, #12]
    943e:	7859      	ldrb	r1, [r3, #1]
    9440:	687b      	ldr	r3, [r7, #4]
    9442:	681b      	ldr	r3, [r3, #0]
    9444:	f107 0210 	add.w	r2, r7, #16
    9448:	4608      	mov	r0, r1
    944a:	4611      	mov	r1, r2
    944c:	461a      	mov	r2, r3
    944e:	68bb      	ldr	r3, [r7, #8]
    9450:	47a0      	blx	r4
    9452:	6178      	str	r0, [r7, #20]
	return (BOOL) (rv==1);
    9454:	697b      	ldr	r3, [r7, #20]
    9456:	2b01      	cmp	r3, #1
    9458:	bf0c      	ite	eq
    945a:	2301      	moveq	r3, #1
    945c:	2300      	movne	r3, #0
    945e:	b2db      	uxtb	r3, r3
}
    9460:	4618      	mov	r0, r3
    9462:	371c      	adds	r7, #28
    9464:	46bd      	mov	sp, r7
    9466:	bd90      	pop	{r4, r7, pc}
    9468:	1000328c 	.word	0x1000328c

0000946c <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    946c:	b580      	push	{r7, lr}
    946e:	b082      	sub	sp, #8
    9470:	af00      	add	r7, sp, #0
    9472:	6078      	str	r0, [r7, #4]
	// initialise stack
	USBInit();
    9474:	f001 fdcc 	bl	b010 <USBInit>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    9478:	480b      	ldr	r0, [pc, #44]	; (94a8 <ubertooth_usb_init+0x3c>)
    947a:	f002 fa2b 	bl	b8d4 <USBRegisterDescriptors>

	// Request handler 
	v_req_handler = vendor_req_handler;
    947e:	4a0b      	ldr	r2, [pc, #44]	; (94ac <ubertooth_usb_init+0x40>)
    9480:	687b      	ldr	r3, [r7, #4]
    9482:	6013      	str	r3, [r2, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    9484:	2002      	movs	r0, #2
    9486:	490a      	ldr	r1, [pc, #40]	; (94b0 <ubertooth_usb_init+0x44>)
    9488:	4a0a      	ldr	r2, [pc, #40]	; (94b4 <ubertooth_usb_init+0x48>)
    948a:	f001 fd9d 	bl	afc8 <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    948e:	20ff      	movs	r0, #255	; 0xff
    9490:	4909      	ldr	r1, [pc, #36]	; (94b8 <ubertooth_usb_init+0x4c>)
    9492:	f002 f9c9 	bl	b828 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    9496:	2001      	movs	r0, #1
    9498:	f001 fefc 	bl	b294 <USBHwConnect>

	return 0;
    949c:	2300      	movs	r3, #0
}
    949e:	4618      	mov	r0, r3
    94a0:	3708      	adds	r7, #8
    94a2:	46bd      	mov	sp, r7
    94a4:	bd80      	pop	{r7, pc}
    94a6:	bf00      	nop
    94a8:	0000cfcc 	.word	0x0000cfcc
    94ac:	1000328c 	.word	0x1000328c
    94b0:	00009421 	.word	0x00009421
    94b4:	10003188 	.word	0x10003188
    94b8:	0000d090 	.word	0x0000d090

000094bc <queue_init>:

volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init()
{
    94bc:	b480      	push	{r7}
    94be:	af00      	add	r7, sp, #0
	head = 0;
    94c0:	4b04      	ldr	r3, [pc, #16]	; (94d4 <queue_init+0x18>)
    94c2:	2200      	movs	r2, #0
    94c4:	601a      	str	r2, [r3, #0]
	tail = 0;
    94c6:	4b04      	ldr	r3, [pc, #16]	; (94d8 <queue_init+0x1c>)
    94c8:	2200      	movs	r2, #0
    94ca:	601a      	str	r2, [r3, #0]
}
    94cc:	46bd      	mov	sp, r7
    94ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    94d2:	4770      	bx	lr
    94d4:	10000a5c 	.word	0x10000a5c
    94d8:	10000a60 	.word	0x10000a60

000094dc <usb_enqueue>:

usb_pkt_rx *usb_enqueue()
{
    94dc:	b480      	push	{r7}
    94de:	b083      	sub	sp, #12
    94e0:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    94e2:	4b13      	ldr	r3, [pc, #76]	; (9530 <usb_enqueue+0x54>)
    94e4:	681b      	ldr	r3, [r3, #0]
    94e6:	b2db      	uxtb	r3, r3
    94e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    94ec:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    94ee:	4b11      	ldr	r3, [pc, #68]	; (9534 <usb_enqueue+0x58>)
    94f0:	681b      	ldr	r3, [r3, #0]
    94f2:	b2db      	uxtb	r3, r3
    94f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    94f8:	71bb      	strb	r3, [r7, #6]
	u8 n = (t + 1) & 0x7F;
    94fa:	79bb      	ldrb	r3, [r7, #6]
    94fc:	3301      	adds	r3, #1
    94fe:	b2db      	uxtb	r3, r3
    9500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9504:	717b      	strb	r3, [r7, #5]

	/* fail if queue is full */
	if (h == n) {
    9506:	79fa      	ldrb	r2, [r7, #7]
    9508:	797b      	ldrb	r3, [r7, #5]
    950a:	429a      	cmp	r2, r3
    950c:	d101      	bne.n	9512 <usb_enqueue+0x36>
		return NULL;
    950e:	2300      	movs	r3, #0
    9510:	e008      	b.n	9524 <usb_enqueue+0x48>
	}

	++tail;
    9512:	4b08      	ldr	r3, [pc, #32]	; (9534 <usb_enqueue+0x58>)
    9514:	681b      	ldr	r3, [r3, #0]
    9516:	3301      	adds	r3, #1
    9518:	4a06      	ldr	r2, [pc, #24]	; (9534 <usb_enqueue+0x58>)
    951a:	6013      	str	r3, [r2, #0]
	return &fifo[t];
    951c:	79bb      	ldrb	r3, [r7, #6]
    951e:	019b      	lsls	r3, r3, #6
    9520:	4a05      	ldr	r2, [pc, #20]	; (9538 <usb_enqueue+0x5c>)
    9522:	4413      	add	r3, r2
	
}
    9524:	4618      	mov	r0, r3
    9526:	370c      	adds	r7, #12
    9528:	46bd      	mov	sp, r7
    952a:	f85d 7b04 	ldr.w	r7, [sp], #4
    952e:	4770      	bx	lr
    9530:	10000a5c 	.word	0x10000a5c
    9534:	10000a60 	.word	0x10000a60
    9538:	10001188 	.word	0x10001188

0000953c <dequeue>:

usb_pkt_rx *dequeue()
{
    953c:	b480      	push	{r7}
    953e:	b083      	sub	sp, #12
    9540:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    9542:	4b10      	ldr	r3, [pc, #64]	; (9584 <dequeue+0x48>)
    9544:	681b      	ldr	r3, [r3, #0]
    9546:	b2db      	uxtb	r3, r3
    9548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    954c:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    954e:	4b0e      	ldr	r3, [pc, #56]	; (9588 <dequeue+0x4c>)
    9550:	681b      	ldr	r3, [r3, #0]
    9552:	b2db      	uxtb	r3, r3
    9554:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9558:	71bb      	strb	r3, [r7, #6]

	/* fail if queue is empty */
	if (h == t) {
    955a:	79fa      	ldrb	r2, [r7, #7]
    955c:	79bb      	ldrb	r3, [r7, #6]
    955e:	429a      	cmp	r2, r3
    9560:	d101      	bne.n	9566 <dequeue+0x2a>
		return NULL;
    9562:	2300      	movs	r3, #0
    9564:	e008      	b.n	9578 <dequeue+0x3c>
	}

	++head;
    9566:	4b07      	ldr	r3, [pc, #28]	; (9584 <dequeue+0x48>)
    9568:	681b      	ldr	r3, [r3, #0]
    956a:	3301      	adds	r3, #1
    956c:	4a05      	ldr	r2, [pc, #20]	; (9584 <dequeue+0x48>)
    956e:	6013      	str	r3, [r2, #0]
	return &fifo[h];
    9570:	79fb      	ldrb	r3, [r7, #7]
    9572:	019b      	lsls	r3, r3, #6
    9574:	4a05      	ldr	r2, [pc, #20]	; (958c <dequeue+0x50>)
    9576:	4413      	add	r3, r2
}
    9578:	4618      	mov	r0, r3
    957a:	370c      	adds	r7, #12
    957c:	46bd      	mov	sp, r7
    957e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9582:	4770      	bx	lr
    9584:	10000a5c 	.word	0x10000a5c
    9588:	10000a60 	.word	0x10000a60
    958c:	10001188 	.word	0x10001188

00009590 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    9590:	b580      	push	{r7, lr}
    9592:	b084      	sub	sp, #16
    9594:	af00      	add	r7, sp, #0
    9596:	6078      	str	r0, [r7, #4]
	usb_pkt_rx *pkt = dequeue(&pkt);
    9598:	f107 030c 	add.w	r3, r7, #12
    959c:	4618      	mov	r0, r3
    959e:	f7ff ffcd 	bl	953c <dequeue>
    95a2:	4603      	mov	r3, r0
    95a4:	60fb      	str	r3, [r7, #12]
	if (pkt != NULL) {
    95a6:	68fb      	ldr	r3, [r7, #12]
    95a8:	2b00      	cmp	r3, #0
    95aa:	d00a      	beq.n	95c2 <dequeue_send+0x32>
		last_usb_pkt = clkn;
    95ac:	4a11      	ldr	r2, [pc, #68]	; (95f4 <dequeue_send+0x64>)
    95ae:	687b      	ldr	r3, [r7, #4]
    95b0:	6013      	str	r3, [r2, #0]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    95b2:	68fb      	ldr	r3, [r7, #12]
    95b4:	2082      	movs	r0, #130	; 0x82
    95b6:	4619      	mov	r1, r3
    95b8:	2240      	movs	r2, #64	; 0x40
    95ba:	f001 fec7 	bl	b34c <USBHwEPWrite>
		return 1;
    95be:	2301      	movs	r3, #1
    95c0:	e013      	b.n	95ea <dequeue_send+0x5a>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    95c2:	4b0c      	ldr	r3, [pc, #48]	; (95f4 <dequeue_send+0x64>)
    95c4:	681b      	ldr	r3, [r3, #0]
    95c6:	687a      	ldr	r2, [r7, #4]
    95c8:	1ad3      	subs	r3, r2, r3
    95ca:	4a0b      	ldr	r2, [pc, #44]	; (95f8 <dequeue_send+0x68>)
    95cc:	4293      	cmp	r3, r2
    95ce:	d90b      	bls.n	95e8 <dequeue_send+0x58>
			u8 pkt_type = KEEP_ALIVE;
    95d0:	2303      	movs	r3, #3
    95d2:	72fb      	strb	r3, [r7, #11]
			last_usb_pkt = clkn;
    95d4:	4a07      	ldr	r2, [pc, #28]	; (95f4 <dequeue_send+0x64>)
    95d6:	687b      	ldr	r3, [r7, #4]
    95d8:	6013      	str	r3, [r2, #0]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    95da:	f107 030b 	add.w	r3, r7, #11
    95de:	2082      	movs	r0, #130	; 0x82
    95e0:	4619      	mov	r1, r3
    95e2:	2201      	movs	r2, #1
    95e4:	f001 feb2 	bl	b34c <USBHwEPWrite>
		}
		return 0;
    95e8:	2300      	movs	r3, #0
	}
}
    95ea:	4618      	mov	r0, r3
    95ec:	3710      	adds	r7, #16
    95ee:	46bd      	mov	sp, r7
    95f0:	bd80      	pop	{r7, pc}
    95f2:	bf00      	nop
    95f4:	10000a64 	.word	0x10000a64
    95f8:	00061a80 	.word	0x00061a80

000095fc <handle_usb>:

void handle_usb(u32 clkn)
{
    95fc:	b580      	push	{r7, lr}
    95fe:	b084      	sub	sp, #16
    9600:	af00      	add	r7, sp, #0
    9602:	6078      	str	r0, [r7, #4]
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    9604:	2082      	movs	r0, #130	; 0x82
    9606:	f001 fe65 	bl	b2d4 <USBHwEPGetStatus>
    960a:	4603      	mov	r3, r0
    960c:	73fb      	strb	r3, [r7, #15]
	if (!(epstat & EPSTAT_B1FULL)) {
    960e:	7bfb      	ldrb	r3, [r7, #15]
    9610:	f003 0320 	and.w	r3, r3, #32
    9614:	2b00      	cmp	r3, #0
    9616:	d102      	bne.n	961e <handle_usb+0x22>
		dequeue_send(clkn);
    9618:	6878      	ldr	r0, [r7, #4]
    961a:	f7ff ffb9 	bl	9590 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    961e:	7bfb      	ldrb	r3, [r7, #15]
    9620:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9624:	2b00      	cmp	r3, #0
    9626:	d102      	bne.n	962e <handle_usb+0x32>
		dequeue_send(clkn);
    9628:	6878      	ldr	r0, [r7, #4]
    962a:	f7ff ffb1 	bl	9590 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
    962e:	f001 ff53 	bl	b4d8 <USBHwISR>
}
    9632:	3710      	adds	r7, #16
    9634:	46bd      	mov	sp, r7
    9636:	bd80      	pop	{r7, pc}

00009638 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    9638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    963c:	b095      	sub	sp, #84	; 0x54
    963e:	af00      	add	r7, sp, #0
    9640:	6078      	str	r0, [r7, #4]
    9642:	4669      	mov	r1, sp
    9644:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u32 command[5];
	u32 result[5];
	int i;
	int j;
	u8 len = 22;
    9646:	2116      	movs	r1, #22
    9648:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
	u8 pa = 0;
    964c:	2100      	movs	r1, #0
    964e:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
	u8 txbuf[len];
    9652:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    9656:	4631      	mov	r1, r6
    9658:	3901      	subs	r1, #1
    965a:	6439      	str	r1, [r7, #64]	; 0x40
    965c:	b2f0      	uxtb	r0, r6
    965e:	f04f 0100 	mov.w	r1, #0
    9662:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
    9666:	ea4b 7b50 	orr.w	fp, fp, r0, lsr #29
    966a:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
    966e:	b2f0      	uxtb	r0, r6
    9670:	f04f 0100 	mov.w	r1, #0
    9674:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    9678:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
    967c:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    9680:	4631      	mov	r1, r6
    9682:	3107      	adds	r1, #7
    9684:	08c9      	lsrs	r1, r1, #3
    9686:	00c9      	lsls	r1, r1, #3
    9688:	ebad 0d01 	sub.w	sp, sp, r1
    968c:	4669      	mov	r1, sp
    968e:	3100      	adds	r1, #0
    9690:	63f9      	str	r1, [r7, #60]	; 0x3c
	u8 rxbuf[len];
    9692:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    9696:	4631      	mov	r1, r6
    9698:	3901      	subs	r1, #1
    969a:	63b9      	str	r1, [r7, #56]	; 0x38
    969c:	b2f0      	uxtb	r0, r6
    969e:	f04f 0100 	mov.w	r1, #0
    96a2:	00cd      	lsls	r5, r1, #3
    96a4:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    96a8:	00c4      	lsls	r4, r0, #3
    96aa:	b2f0      	uxtb	r0, r6
    96ac:	f04f 0100 	mov.w	r1, #0
    96b0:	00cb      	lsls	r3, r1, #3
    96b2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    96b6:	00c2      	lsls	r2, r0, #3
    96b8:	4633      	mov	r3, r6
    96ba:	3307      	adds	r3, #7
    96bc:	08db      	lsrs	r3, r3, #3
    96be:	00db      	lsls	r3, r3, #3
    96c0:	ebad 0d03 	sub.w	sp, sp, r3
    96c4:	466b      	mov	r3, sp
    96c6:	3300      	adds	r3, #0
    96c8:	637b      	str	r3, [r7, #52]	; 0x34

	txbuf[0] = len - 1; // length of data (rest of payload)
    96ca:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
    96ce:	3b01      	subs	r3, #1
    96d0:	b2da      	uxtb	r2, r3
    96d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96d4:	701a      	strb	r2, [r3, #0]
	txbuf[1] = 0; // request
    96d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96d8:	2200      	movs	r2, #0
    96da:	705a      	strb	r2, [r3, #1]

	// read device serial number
	command[0] = 58;
    96dc:	233a      	movs	r3, #58	; 0x3a
    96de:	623b      	str	r3, [r7, #32]
	iap_entry(command, result);
    96e0:	4bb3      	ldr	r3, [pc, #716]	; (99b0 <cc2400_rangetest+0x378>)
    96e2:	681b      	ldr	r3, [r3, #0]
    96e4:	f107 0120 	add.w	r1, r7, #32
    96e8:	f107 020c 	add.w	r2, r7, #12
    96ec:	4608      	mov	r0, r1
    96ee:	4611      	mov	r1, r2
    96f0:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    96f2:	68fb      	ldr	r3, [r7, #12]
    96f4:	b2db      	uxtb	r3, r3
    96f6:	2b00      	cmp	r3, #0
    96f8:	d001      	beq.n	96fe <cc2400_rangetest+0xc6>
    96fa:	2300      	movs	r3, #0
		return;
    96fc:	e1ac      	b.n	9a58 <cc2400_rangetest+0x420>
	txbuf[2] = (result[1] >> 24) & 0xFF;
    96fe:	693b      	ldr	r3, [r7, #16]
    9700:	0e1b      	lsrs	r3, r3, #24
    9702:	b2da      	uxtb	r2, r3
    9704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9706:	709a      	strb	r2, [r3, #2]
	txbuf[3] = (result[1] >> 16) & 0xFF;
    9708:	693b      	ldr	r3, [r7, #16]
    970a:	0c1b      	lsrs	r3, r3, #16
    970c:	b2da      	uxtb	r2, r3
    970e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9710:	70da      	strb	r2, [r3, #3]
	txbuf[4] = (result[1] >> 8) & 0xFF;
    9712:	693b      	ldr	r3, [r7, #16]
    9714:	0a1b      	lsrs	r3, r3, #8
    9716:	b2da      	uxtb	r2, r3
    9718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    971a:	711a      	strb	r2, [r3, #4]
	txbuf[5] = result[1] & 0xFF;
    971c:	693b      	ldr	r3, [r7, #16]
    971e:	b2da      	uxtb	r2, r3
    9720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9722:	715a      	strb	r2, [r3, #5]
	txbuf[6] = (result[2] >> 24) & 0xFF;
    9724:	697b      	ldr	r3, [r7, #20]
    9726:	0e1b      	lsrs	r3, r3, #24
    9728:	b2da      	uxtb	r2, r3
    972a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    972c:	719a      	strb	r2, [r3, #6]
	txbuf[7] = (result[2] >> 16) & 0xFF;
    972e:	697b      	ldr	r3, [r7, #20]
    9730:	0c1b      	lsrs	r3, r3, #16
    9732:	b2da      	uxtb	r2, r3
    9734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9736:	71da      	strb	r2, [r3, #7]
	txbuf[8] = (result[2] >> 8) & 0xFF;
    9738:	697b      	ldr	r3, [r7, #20]
    973a:	0a1b      	lsrs	r3, r3, #8
    973c:	b2da      	uxtb	r2, r3
    973e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9740:	721a      	strb	r2, [r3, #8]
	txbuf[9] = result[2] & 0xFF;
    9742:	697b      	ldr	r3, [r7, #20]
    9744:	b2da      	uxtb	r2, r3
    9746:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9748:	725a      	strb	r2, [r3, #9]
	txbuf[10] = (result[3] >> 24) & 0xFF;
    974a:	69bb      	ldr	r3, [r7, #24]
    974c:	0e1b      	lsrs	r3, r3, #24
    974e:	b2da      	uxtb	r2, r3
    9750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9752:	729a      	strb	r2, [r3, #10]
	txbuf[11] = (result[3] >> 16) & 0xFF;
    9754:	69bb      	ldr	r3, [r7, #24]
    9756:	0c1b      	lsrs	r3, r3, #16
    9758:	b2da      	uxtb	r2, r3
    975a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    975c:	72da      	strb	r2, [r3, #11]
	txbuf[12] = (result[3] >> 8) & 0xFF;
    975e:	69bb      	ldr	r3, [r7, #24]
    9760:	0a1b      	lsrs	r3, r3, #8
    9762:	b2da      	uxtb	r2, r3
    9764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9766:	731a      	strb	r2, [r3, #12]
	txbuf[13] = result[3] & 0xFF;
    9768:	69bb      	ldr	r3, [r7, #24]
    976a:	b2da      	uxtb	r2, r3
    976c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    976e:	735a      	strb	r2, [r3, #13]
	txbuf[14] = (result[4] >> 24) & 0xFF;
    9770:	69fb      	ldr	r3, [r7, #28]
    9772:	0e1b      	lsrs	r3, r3, #24
    9774:	b2da      	uxtb	r2, r3
    9776:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9778:	739a      	strb	r2, [r3, #14]
	txbuf[15] = (result[4] >> 16) & 0xFF;
    977a:	69fb      	ldr	r3, [r7, #28]
    977c:	0c1b      	lsrs	r3, r3, #16
    977e:	b2da      	uxtb	r2, r3
    9780:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9782:	73da      	strb	r2, [r3, #15]
	txbuf[16] = (result[4] >> 8) & 0xFF;
    9784:	69fb      	ldr	r3, [r7, #28]
    9786:	0a1b      	lsrs	r3, r3, #8
    9788:	b2da      	uxtb	r2, r3
    978a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    978c:	741a      	strb	r2, [r3, #16]
	txbuf[17] = result[4] & 0xFF;
    978e:	69fb      	ldr	r3, [r7, #28]
    9790:	b2da      	uxtb	r2, r3
    9792:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9794:	745a      	strb	r2, [r3, #17]

	txbuf[18] = pa; // request pa
    9796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9798:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    979c:	749a      	strb	r2, [r3, #18]
	txbuf[19] = 0; // request number
    979e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    97a0:	2200      	movs	r2, #0
    97a2:	74da      	strb	r2, [r3, #19]
	txbuf[20] = 0xff; // reply pa
    97a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    97a6:	22ff      	movs	r2, #255	; 0xff
    97a8:	751a      	strb	r2, [r3, #20]
	txbuf[21] = 0xff; // reply number
    97aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    97ac:	22ff      	movs	r2, #255	; 0xff
    97ae:	755a      	strb	r2, [r3, #21]

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    97b0:	2012      	movs	r0, #18
    97b2:	f642 3122 	movw	r1, #11042	; 0x2b22
    97b6:	f001 f8f9 	bl	a9ac <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    97ba:	2014      	movs	r0, #20
    97bc:	f241 314b 	movw	r1, #4939	; 0x134b
    97c0:	f001 f8f4 	bl	a9ac <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    97c4:	2020      	movs	r0, #32
    97c6:	f640 51f1 	movw	r1, #3569	; 0xdf1
    97ca:	f001 f8ef 	bl	a9ac <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    97ce:	687b      	ldr	r3, [r7, #4]
    97d0:	881b      	ldrh	r3, [r3, #0]
    97d2:	b29b      	uxth	r3, r3
    97d4:	2002      	movs	r0, #2
    97d6:	4619      	mov	r1, r3
    97d8:	f001 f8e8 	bl	a9ac <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    97dc:	202d      	movs	r0, #45	; 0x2d
    97de:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    97e2:	f001 f8e3 	bl	a9ac <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    97e6:	202c      	movs	r0, #44	; 0x2c
    97e8:	f241 5184 	movw	r1, #5508	; 0x1584
    97ec:	f001 f8de 	bl	a9ac <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    97f0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    97f4:	f043 0308 	orr.w	r3, r3, #8
    97f8:	b2db      	uxtb	r3, r3
    97fa:	b29b      	uxth	r3, r3
    97fc:	2005      	movs	r0, #5
    97fe:	4619      	mov	r1, r3
    9800:	f001 f8d4 	bl	a9ac <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    9804:	2003      	movs	r0, #3
    9806:	2129      	movs	r1, #41	; 0x29
    9808:	f001 f8d0 	bl	a9ac <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    980c:	bf00      	nop
    980e:	f001 f985 	bl	ab1c <cc2400_status>
    9812:	4603      	mov	r3, r0
    9814:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9818:	2b00      	cmp	r3, #0
    981a:	d0f8      	beq.n	980e <cc2400_rangetest+0x1d6>
	cc2400_strobe(SFSON);
    981c:	2061      	movs	r0, #97	; 0x61
    981e:	f001 f987 	bl	ab30 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    9822:	bf00      	nop
    9824:	f001 f97a 	bl	ab1c <cc2400_status>
    9828:	4603      	mov	r3, r0
    982a:	f003 0304 	and.w	r3, r3, #4
    982e:	2b00      	cmp	r3, #0
    9830:	d0f8      	beq.n	9824 <cc2400_rangetest+0x1ec>
	TXLED_SET;
    9832:	4b60      	ldr	r3, [pc, #384]	; (99b4 <cc2400_rangetest+0x37c>)
    9834:	f44f 7280 	mov.w	r2, #256	; 0x100
    9838:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    983a:	4b5f      	ldr	r3, [pc, #380]	; (99b8 <cc2400_rangetest+0x380>)
    983c:	2280      	movs	r2, #128	; 0x80
    983e:	601a      	str	r2, [r3, #0]
#endif
	for (pa = 0; pa < 8; pa++) {
    9840:	2300      	movs	r3, #0
    9842:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    9846:	e03e      	b.n	98c6 <cc2400_rangetest+0x28e>
		cc2400_set(FREND, 8 | pa);
    9848:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    984c:	f043 0308 	orr.w	r3, r3, #8
    9850:	b2db      	uxtb	r3, r3
    9852:	b29b      	uxth	r3, r3
    9854:	2005      	movs	r0, #5
    9856:	4619      	mov	r1, r3
    9858:	f001 f8a8 	bl	a9ac <cc2400_set>
		txbuf[18] = pa;
    985c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    985e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    9862:	749a      	strb	r2, [r3, #18]
		for (i = 0; i < 16; i++) {
    9864:	2300      	movs	r3, #0
    9866:	64fb      	str	r3, [r7, #76]	; 0x4c
    9868:	e025      	b.n	98b6 <cc2400_rangetest+0x27e>
			txbuf[19] = i;
    986a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    986c:	b2da      	uxtb	r2, r3
    986e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9870:	74da      	strb	r2, [r3, #19]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9872:	bf00      	nop
    9874:	200e      	movs	r0, #14
    9876:	f001 f883 	bl	a980 <cc2400_get>
    987a:	4603      	mov	r3, r0
    987c:	f003 031f 	and.w	r3, r3, #31
    9880:	2b0f      	cmp	r3, #15
    9882:	d1f7      	bne.n	9874 <cc2400_rangetest+0x23c>
			// transmit a packet
			for (j = 0; j < len; j++)
    9884:	2300      	movs	r3, #0
    9886:	64bb      	str	r3, [r7, #72]	; 0x48
    9888:	e00a      	b.n	98a0 <cc2400_rangetest+0x268>
				cc2400_set8(FIFOREG, txbuf[j]);
    988a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    988c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    988e:	4413      	add	r3, r2
    9890:	781b      	ldrb	r3, [r3, #0]
    9892:	2070      	movs	r0, #112	; 0x70
    9894:	4619      	mov	r1, r3
    9896:	f001 f8b7 	bl	aa08 <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    989a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    989c:	3301      	adds	r3, #1
    989e:	64bb      	str	r3, [r7, #72]	; 0x48
    98a0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    98a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    98a6:	429a      	cmp	r2, r3
    98a8:	dcef      	bgt.n	988a <cc2400_rangetest+0x252>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    98aa:	2063      	movs	r0, #99	; 0x63
    98ac:	f001 f940 	bl	ab30 <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    98b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    98b2:	3301      	adds	r3, #1
    98b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    98b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    98b8:	2b0f      	cmp	r3, #15
    98ba:	ddd6      	ble.n	986a <cc2400_rangetest+0x232>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    98bc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    98c0:	3301      	adds	r3, #1
    98c2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    98c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    98ca:	2b07      	cmp	r3, #7
    98cc:	d9bc      	bls.n	9848 <cc2400_rangetest+0x210>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    98ce:	bf00      	nop
    98d0:	200e      	movs	r0, #14
    98d2:	f001 f855 	bl	a980 <cc2400_get>
    98d6:	4603      	mov	r3, r0
    98d8:	f003 031f 	and.w	r3, r3, #31
    98dc:	2b0f      	cmp	r3, #15
    98de:	d1f7      	bne.n	98d0 <cc2400_rangetest+0x298>
	TXLED_CLR;
    98e0:	4b36      	ldr	r3, [pc, #216]	; (99bc <cc2400_rangetest+0x384>)
    98e2:	f44f 7280 	mov.w	r2, #256	; 0x100
    98e6:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    98e8:	2064      	movs	r0, #100	; 0x64
    98ea:	f001 f921 	bl	ab30 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    98ee:	bf00      	nop
    98f0:	f001 f914 	bl	ab1c <cc2400_status>
    98f4:	4603      	mov	r3, r0
    98f6:	f003 0304 	and.w	r3, r3, #4
    98fa:	2b00      	cmp	r3, #0
    98fc:	d1f8      	bne.n	98f0 <cc2400_rangetest+0x2b8>
	cc2400_set(FSDIV, *chan_ptr - 1);
    98fe:	687b      	ldr	r3, [r7, #4]
    9900:	881b      	ldrh	r3, [r3, #0]
    9902:	b29b      	uxth	r3, r3
    9904:	3b01      	subs	r3, #1
    9906:	b29b      	uxth	r3, r3
    9908:	2002      	movs	r0, #2
    990a:	4619      	mov	r1, r3
    990c:	f001 f84e 	bl	a9ac <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    9910:	bf00      	nop
    9912:	f001 f903 	bl	ab1c <cc2400_status>
    9916:	4603      	mov	r3, r0
    9918:	f003 0340 	and.w	r3, r3, #64	; 0x40
    991c:	2b00      	cmp	r3, #0
    991e:	d0f8      	beq.n	9912 <cc2400_rangetest+0x2da>
	cc2400_strobe(SFSON);
    9920:	2061      	movs	r0, #97	; 0x61
    9922:	f001 f905 	bl	ab30 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    9926:	bf00      	nop
    9928:	f001 f8f8 	bl	ab1c <cc2400_status>
    992c:	4603      	mov	r3, r0
    992e:	f003 0304 	and.w	r3, r3, #4
    9932:	2b00      	cmp	r3, #0
    9934:	d0f8      	beq.n	9928 <cc2400_rangetest+0x2f0>
	RXLED_SET;
    9936:	4b1f      	ldr	r3, [pc, #124]	; (99b4 <cc2400_rangetest+0x37c>)
    9938:	2210      	movs	r2, #16
    993a:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    993c:	bf00      	nop
    993e:	200e      	movs	r0, #14
    9940:	f001 f81e 	bl	a980 <cc2400_get>
    9944:	4603      	mov	r3, r0
    9946:	f003 031f 	and.w	r3, r3, #31
    994a:	2b0f      	cmp	r3, #15
    994c:	d1f7      	bne.n	993e <cc2400_rangetest+0x306>
		cc2400_strobe(SRX);
    994e:	2062      	movs	r0, #98	; 0x62
    9950:	f001 f8ee 	bl	ab30 <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    9954:	bf00      	nop
    9956:	f001 f8e1 	bl	ab1c <cc2400_status>
    995a:	4603      	mov	r3, r0
    995c:	f003 0310 	and.w	r3, r3, #16
    9960:	2b00      	cmp	r3, #0
    9962:	d0f8      	beq.n	9956 <cc2400_rangetest+0x31e>
		USRLED_SET;
    9964:	4b13      	ldr	r3, [pc, #76]	; (99b4 <cc2400_rangetest+0x37c>)
    9966:	2202      	movs	r2, #2
    9968:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
    996a:	2300      	movs	r3, #0
    996c:	64bb      	str	r3, [r7, #72]	; 0x48
    996e:	e00c      	b.n	998a <cc2400_rangetest+0x352>
			rxbuf[j] = cc2400_get8(FIFOREG);
    9970:	2070      	movs	r0, #112	; 0x70
    9972:	f001 f82f 	bl	a9d4 <cc2400_get8>
    9976:	4603      	mov	r3, r0
    9978:	4619      	mov	r1, r3
    997a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    997c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    997e:	4413      	add	r3, r2
    9980:	460a      	mov	r2, r1
    9982:	701a      	strb	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    9984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9986:	3301      	adds	r3, #1
    9988:	64bb      	str	r3, [r7, #72]	; 0x48
    998a:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    998e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    9990:	429a      	cmp	r2, r3
    9992:	dced      	bgt.n	9970 <cc2400_rangetest+0x338>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    9994:	f001 f8c2 	bl	ab1c <cc2400_status>
    9998:	4603      	mov	r3, r0
    999a:	f003 0308 	and.w	r3, r3, #8
    999e:	2b00      	cmp	r3, #0
    99a0:	d001      	beq.n	99a6 <cc2400_rangetest+0x36e>
			break;
    99a2:	bf00      	nop
		USRLED_CLR;
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    99a4:	e00c      	b.n	99c0 <cc2400_rangetest+0x388>
		USRLED_SET;
		for (j = 0; j < len; j++)
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
			break;
		USRLED_CLR;
    99a6:	4b05      	ldr	r3, [pc, #20]	; (99bc <cc2400_rangetest+0x384>)
    99a8:	2202      	movs	r2, #2
    99aa:	601a      	str	r2, [r3, #0]
	}
    99ac:	e7c6      	b.n	993c <cc2400_rangetest+0x304>
    99ae:	bf00      	nop
    99b0:	100008a8 	.word	0x100008a8
    99b4:	2009c038 	.word	0x2009c038
    99b8:	2009c058 	.word	0x2009c058
    99bc:	2009c03c 	.word	0x2009c03c

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    99c0:	200e      	movs	r0, #14
    99c2:	f000 ffdd 	bl	a980 <cc2400_get>
    99c6:	4603      	mov	r3, r0
    99c8:	f003 031f 	and.w	r3, r3, #31
    99cc:	2b0f      	cmp	r3, #15
    99ce:	d1f7      	bne.n	99c0 <cc2400_rangetest+0x388>
	cc2400_strobe(SRFOFF);
    99d0:	2064      	movs	r0, #100	; 0x64
    99d2:	f001 f8ad 	bl	ab30 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    99d6:	bf00      	nop
    99d8:	f001 f8a0 	bl	ab1c <cc2400_status>
    99dc:	4603      	mov	r3, r0
    99de:	f003 0304 	and.w	r3, r3, #4
    99e2:	2b00      	cmp	r3, #0
    99e4:	d1f8      	bne.n	99d8 <cc2400_rangetest+0x3a0>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    99e6:	4b20      	ldr	r3, [pc, #128]	; (9a68 <cc2400_rangetest+0x430>)
    99e8:	2280      	movs	r2, #128	; 0x80
    99ea:	601a      	str	r2, [r3, #0]
#endif
	RXLED_CLR;
    99ec:	4b1f      	ldr	r3, [pc, #124]	; (9a6c <cc2400_rangetest+0x434>)
    99ee:	2210      	movs	r2, #16
    99f0:	601a      	str	r2, [r3, #0]

	// get test result
	rr.valid       = 1;
    99f2:	4b1f      	ldr	r3, [pc, #124]	; (9a70 <cc2400_rangetest+0x438>)
    99f4:	2201      	movs	r2, #1
    99f6:	701a      	strb	r2, [r3, #0]
	rr.request_pa  = rxbuf[18];
    99f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    99fa:	7c9a      	ldrb	r2, [r3, #18]
    99fc:	4b1c      	ldr	r3, [pc, #112]	; (9a70 <cc2400_rangetest+0x438>)
    99fe:	705a      	strb	r2, [r3, #1]
	rr.request_num = rxbuf[19];
    9a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9a02:	7cda      	ldrb	r2, [r3, #19]
    9a04:	4b1a      	ldr	r3, [pc, #104]	; (9a70 <cc2400_rangetest+0x438>)
    9a06:	709a      	strb	r2, [r3, #2]
	rr.reply_pa    = rxbuf[20];
    9a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9a0a:	7d1a      	ldrb	r2, [r3, #20]
    9a0c:	4b18      	ldr	r3, [pc, #96]	; (9a70 <cc2400_rangetest+0x438>)
    9a0e:	70da      	strb	r2, [r3, #3]
	rr.reply_num   = rxbuf[21];
    9a10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9a12:	7d5a      	ldrb	r2, [r3, #21]
    9a14:	4b16      	ldr	r3, [pc, #88]	; (9a70 <cc2400_rangetest+0x438>)
    9a16:	711a      	strb	r2, [r3, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    9a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9a1a:	2201      	movs	r2, #1
    9a1c:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 18; i++)
    9a1e:	2300      	movs	r3, #0
    9a20:	64fb      	str	r3, [r7, #76]	; 0x4c
    9a22:	e012      	b.n	9a4a <cc2400_rangetest+0x412>
		if (rxbuf[i] != txbuf[i])
    9a24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9a26:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9a28:	4413      	add	r3, r2
    9a2a:	781a      	ldrb	r2, [r3, #0]
    9a2c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    9a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9a30:	440b      	add	r3, r1
    9a32:	781b      	ldrb	r3, [r3, #0]
    9a34:	429a      	cmp	r2, r3
    9a36:	d005      	beq.n	9a44 <cc2400_rangetest+0x40c>
			rr.valid = 2 + i;
    9a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9a3a:	b2db      	uxtb	r3, r3
    9a3c:	3302      	adds	r3, #2
    9a3e:	b2da      	uxtb	r2, r3
    9a40:	4b0b      	ldr	r3, [pc, #44]	; (9a70 <cc2400_rangetest+0x438>)
    9a42:	701a      	strb	r2, [r3, #0]
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    9a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9a46:	3301      	adds	r3, #1
    9a48:	64fb      	str	r3, [r7, #76]	; 0x4c
    9a4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9a4c:	2b11      	cmp	r3, #17
    9a4e:	dde9      	ble.n	9a24 <cc2400_rangetest+0x3ec>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    9a50:	4b06      	ldr	r3, [pc, #24]	; (9a6c <cc2400_rangetest+0x434>)
    9a52:	2202      	movs	r2, #2
    9a54:	601a      	str	r2, [r3, #0]
    9a56:	2301      	movs	r3, #1
    9a58:	f8d7 d000 	ldr.w	sp, [r7]
    9a5c:	2b01      	cmp	r3, #1
#endif
}
    9a5e:	3754      	adds	r7, #84	; 0x54
    9a60:	46bd      	mov	sp, r7
    9a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a66:	bf00      	nop
    9a68:	2009c05c 	.word	0x2009c05c
    9a6c:	2009c03c 	.word	0x2009c03c
    9a70:	1000108c 	.word	0x1000108c

00009a74 <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    9a74:	b5f0      	push	{r4, r5, r6, r7, lr}
    9a76:	b089      	sub	sp, #36	; 0x24
    9a78:	af00      	add	r7, sp, #0
    9a7a:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	int i;
	int j;
	u8 len = 22;
    9a7c:	2116      	movs	r1, #22
    9a7e:	75b9      	strb	r1, [r7, #22]
	u8 pa = 0;
    9a80:	2100      	movs	r1, #0
    9a82:	75f9      	strb	r1, [r7, #23]
	u8 buf[len];
    9a84:	7dbe      	ldrb	r6, [r7, #22]
    9a86:	4631      	mov	r1, r6
    9a88:	3901      	subs	r1, #1
    9a8a:	6139      	str	r1, [r7, #16]
    9a8c:	b2f0      	uxtb	r0, r6
    9a8e:	f04f 0100 	mov.w	r1, #0
    9a92:	00cd      	lsls	r5, r1, #3
    9a94:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    9a98:	00c4      	lsls	r4, r0, #3
    9a9a:	b2f0      	uxtb	r0, r6
    9a9c:	f04f 0100 	mov.w	r1, #0
    9aa0:	00cb      	lsls	r3, r1, #3
    9aa2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    9aa6:	00c2      	lsls	r2, r0, #3
    9aa8:	4633      	mov	r3, r6
    9aaa:	3307      	adds	r3, #7
    9aac:	08db      	lsrs	r3, r3, #3
    9aae:	00db      	lsls	r3, r3, #3
    9ab0:	ebad 0d03 	sub.w	sp, sp, r3
    9ab4:	466b      	mov	r3, sp
    9ab6:	3300      	adds	r3, #0
    9ab8:	60fb      	str	r3, [r7, #12]

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(LMTST,   0x2b22);
    9aba:	2012      	movs	r0, #18
    9abc:	f642 3122 	movw	r1, #11042	; 0x2b22
    9ac0:	f000 ff74 	bl	a9ac <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    9ac4:	2014      	movs	r0, #20
    9ac6:	f241 314b 	movw	r1, #4939	; 0x134b
    9aca:	f000 ff6f 	bl	a9ac <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    9ace:	687b      	ldr	r3, [r7, #4]
    9ad0:	881b      	ldrh	r3, [r3, #0]
    9ad2:	b29b      	uxth	r3, r3
    9ad4:	3b01      	subs	r3, #1
    9ad6:	b29b      	uxth	r3, r3
    9ad8:	2002      	movs	r0, #2
    9ada:	4619      	mov	r1, r3
    9adc:	f000 ff66 	bl	a9ac <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    9ae0:	202d      	movs	r0, #45	; 0x2d
    9ae2:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    9ae6:	f000 ff61 	bl	a9ac <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    9aea:	202c      	movs	r0, #44	; 0x2c
    9aec:	f241 5184 	movw	r1, #5508	; 0x1584
    9af0:	f000 ff5c 	bl	a9ac <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    9af4:	2005      	movs	r0, #5
    9af6:	2108      	movs	r1, #8
    9af8:	f000 ff58 	bl	a9ac <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    9afc:	2003      	movs	r0, #3
    9afe:	2129      	movs	r1, #41	; 0x29
    9b00:	f000 ff54 	bl	a9ac <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    9b04:	bf00      	nop
    9b06:	f001 f809 	bl	ab1c <cc2400_status>
    9b0a:	4603      	mov	r3, r0
    9b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b10:	2b00      	cmp	r3, #0
    9b12:	d0f8      	beq.n	9b06 <cc2400_repeater+0x92>
		cc2400_strobe(SFSON);
    9b14:	2061      	movs	r0, #97	; 0x61
    9b16:	f001 f80b 	bl	ab30 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    9b1a:	bf00      	nop
    9b1c:	f000 fffe 	bl	ab1c <cc2400_status>
    9b20:	4603      	mov	r3, r0
    9b22:	f003 0304 	and.w	r3, r3, #4
    9b26:	2b00      	cmp	r3, #0
    9b28:	d0f8      	beq.n	9b1c <cc2400_repeater+0xa8>
		RXLED_SET;
    9b2a:	4b6a      	ldr	r3, [pc, #424]	; (9cd4 <cc2400_repeater+0x260>)
    9b2c:	2210      	movs	r2, #16
    9b2e:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    9b30:	4b69      	ldr	r3, [pc, #420]	; (9cd8 <cc2400_repeater+0x264>)
    9b32:	f44f 7280 	mov.w	r2, #256	; 0x100
    9b36:	601a      	str	r2, [r3, #0]
		USRLED_CLR;
    9b38:	4b67      	ldr	r3, [pc, #412]	; (9cd8 <cc2400_repeater+0x264>)
    9b3a:	2202      	movs	r2, #2
    9b3c:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    9b3e:	4b67      	ldr	r3, [pc, #412]	; (9cdc <cc2400_repeater+0x268>)
    9b40:	2280      	movs	r2, #128	; 0x80
    9b42:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9b44:	bf00      	nop
    9b46:	200e      	movs	r0, #14
    9b48:	f000 ff1a 	bl	a980 <cc2400_get>
    9b4c:	4603      	mov	r3, r0
    9b4e:	f003 031f 	and.w	r3, r3, #31
    9b52:	2b0f      	cmp	r3, #15
    9b54:	d1f7      	bne.n	9b46 <cc2400_repeater+0xd2>
			USRLED_CLR;
    9b56:	4b60      	ldr	r3, [pc, #384]	; (9cd8 <cc2400_repeater+0x264>)
    9b58:	2202      	movs	r2, #2
    9b5a:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRX);
    9b5c:	2062      	movs	r0, #98	; 0x62
    9b5e:	f000 ffe7 	bl	ab30 <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    9b62:	bf00      	nop
    9b64:	f000 ffda 	bl	ab1c <cc2400_status>
    9b68:	4603      	mov	r3, r0
    9b6a:	f003 0310 	and.w	r3, r3, #16
    9b6e:	2b00      	cmp	r3, #0
    9b70:	d0f8      	beq.n	9b64 <cc2400_repeater+0xf0>
			USRLED_SET;
    9b72:	4b58      	ldr	r3, [pc, #352]	; (9cd4 <cc2400_repeater+0x260>)
    9b74:	2202      	movs	r2, #2
    9b76:	601a      	str	r2, [r3, #0]
			for (i = 0; i < len; i++)
    9b78:	2300      	movs	r3, #0
    9b7a:	61fb      	str	r3, [r7, #28]
    9b7c:	e00c      	b.n	9b98 <cc2400_repeater+0x124>
				buf[i] = cc2400_get8(FIFOREG);
    9b7e:	2070      	movs	r0, #112	; 0x70
    9b80:	f000 ff28 	bl	a9d4 <cc2400_get8>
    9b84:	4603      	mov	r3, r0
    9b86:	4619      	mov	r1, r3
    9b88:	68fa      	ldr	r2, [r7, #12]
    9b8a:	69fb      	ldr	r3, [r7, #28]
    9b8c:	4413      	add	r3, r2
    9b8e:	460a      	mov	r2, r1
    9b90:	701a      	strb	r2, [r3, #0]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    9b92:	69fb      	ldr	r3, [r7, #28]
    9b94:	3301      	adds	r3, #1
    9b96:	61fb      	str	r3, [r7, #28]
    9b98:	7dba      	ldrb	r2, [r7, #22]
    9b9a:	69fb      	ldr	r3, [r7, #28]
    9b9c:	429a      	cmp	r2, r3
    9b9e:	dcee      	bgt.n	9b7e <cc2400_repeater+0x10a>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    9ba0:	f000 ffbc 	bl	ab1c <cc2400_status>
    9ba4:	4603      	mov	r3, r0
    9ba6:	f003 0308 	and.w	r3, r3, #8
    9baa:	2b00      	cmp	r3, #0
    9bac:	d003      	beq.n	9bb6 <cc2400_repeater+0x142>
				break;
    9bae:	bf00      	nop
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    9bb0:	4b4b      	ldr	r3, [pc, #300]	; (9ce0 <cc2400_repeater+0x26c>)
    9bb2:	61fb      	str	r3, [r7, #28]
    9bb4:	e000      	b.n	9bb8 <cc2400_repeater+0x144>
			USRLED_SET;
			for (i = 0; i < len; i++)
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
				break;
		}
    9bb6:	e7c5      	b.n	9b44 <cc2400_repeater+0xd0>
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    9bb8:	69fb      	ldr	r3, [r7, #28]
    9bba:	3b01      	subs	r3, #1
    9bbc:	61fb      	str	r3, [r7, #28]
    9bbe:	69fb      	ldr	r3, [r7, #28]
    9bc0:	2b00      	cmp	r3, #0
    9bc2:	d1f9      	bne.n	9bb8 <cc2400_repeater+0x144>
		USRLED_CLR;
    9bc4:	4b44      	ldr	r3, [pc, #272]	; (9cd8 <cc2400_repeater+0x264>)
    9bc6:	2202      	movs	r2, #2
    9bc8:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    9bca:	4b43      	ldr	r3, [pc, #268]	; (9cd8 <cc2400_repeater+0x264>)
    9bcc:	2210      	movs	r2, #16
    9bce:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    9bd0:	2064      	movs	r0, #100	; 0x64
    9bd2:	f000 ffad 	bl	ab30 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    9bd6:	bf00      	nop
    9bd8:	f000 ffa0 	bl	ab1c <cc2400_status>
    9bdc:	4603      	mov	r3, r0
    9bde:	f003 0304 	and.w	r3, r3, #4
    9be2:	2b00      	cmp	r3, #0
    9be4:	d1f8      	bne.n	9bd8 <cc2400_repeater+0x164>
		while (!(cc2400_status() & XOSC16M_STABLE));
    9be6:	bf00      	nop
    9be8:	f000 ff98 	bl	ab1c <cc2400_status>
    9bec:	4603      	mov	r3, r0
    9bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9bf2:	2b00      	cmp	r3, #0
    9bf4:	d0f8      	beq.n	9be8 <cc2400_repeater+0x174>
		cc2400_set(FSDIV, *chan_ptr);
    9bf6:	687b      	ldr	r3, [r7, #4]
    9bf8:	881b      	ldrh	r3, [r3, #0]
    9bfa:	b29b      	uxth	r3, r3
    9bfc:	2002      	movs	r0, #2
    9bfe:	4619      	mov	r1, r3
    9c00:	f000 fed4 	bl	a9ac <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    9c04:	bf00      	nop
    9c06:	f000 ff89 	bl	ab1c <cc2400_status>
    9c0a:	4603      	mov	r3, r0
    9c0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9c10:	2b00      	cmp	r3, #0
    9c12:	d0f8      	beq.n	9c06 <cc2400_repeater+0x192>
		cc2400_strobe(SFSON);
    9c14:	2061      	movs	r0, #97	; 0x61
    9c16:	f000 ff8b 	bl	ab30 <cc2400_strobe>
		TXLED_SET;
    9c1a:	4b2e      	ldr	r3, [pc, #184]	; (9cd4 <cc2400_repeater+0x260>)
    9c1c:	f44f 7280 	mov.w	r2, #256	; 0x100
    9c20:	601a      	str	r2, [r3, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    9c22:	7dbb      	ldrb	r3, [r7, #22]
    9c24:	3b01      	subs	r3, #1
    9c26:	b2da      	uxtb	r2, r3
    9c28:	68fb      	ldr	r3, [r7, #12]
    9c2a:	701a      	strb	r2, [r3, #0]
		buf[1] = 1; // reply
    9c2c:	68fb      	ldr	r3, [r7, #12]
    9c2e:	2201      	movs	r2, #1
    9c30:	705a      	strb	r2, [r3, #1]
		for (pa = 0; pa < 8; pa++) {
    9c32:	2300      	movs	r3, #0
    9c34:	75fb      	strb	r3, [r7, #23]
    9c36:	e039      	b.n	9cac <cc2400_repeater+0x238>
			cc2400_set(FREND, 8 | pa);
    9c38:	7dfb      	ldrb	r3, [r7, #23]
    9c3a:	f043 0308 	orr.w	r3, r3, #8
    9c3e:	b2db      	uxtb	r3, r3
    9c40:	b29b      	uxth	r3, r3
    9c42:	2005      	movs	r0, #5
    9c44:	4619      	mov	r1, r3
    9c46:	f000 feb1 	bl	a9ac <cc2400_set>
			buf[20] = pa;
    9c4a:	68fb      	ldr	r3, [r7, #12]
    9c4c:	7dfa      	ldrb	r2, [r7, #23]
    9c4e:	751a      	strb	r2, [r3, #20]
			for (i = 0; i < 16; i++) {
    9c50:	2300      	movs	r3, #0
    9c52:	61fb      	str	r3, [r7, #28]
    9c54:	e024      	b.n	9ca0 <cc2400_repeater+0x22c>
				buf[21] = i;
    9c56:	69fb      	ldr	r3, [r7, #28]
    9c58:	b2da      	uxtb	r2, r3
    9c5a:	68fb      	ldr	r3, [r7, #12]
    9c5c:	755a      	strb	r2, [r3, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9c5e:	bf00      	nop
    9c60:	200e      	movs	r0, #14
    9c62:	f000 fe8d 	bl	a980 <cc2400_get>
    9c66:	4603      	mov	r3, r0
    9c68:	f003 031f 	and.w	r3, r3, #31
    9c6c:	2b0f      	cmp	r3, #15
    9c6e:	d1f7      	bne.n	9c60 <cc2400_repeater+0x1ec>
					for (j = 0; j < len; j++)
    9c70:	2300      	movs	r3, #0
    9c72:	61bb      	str	r3, [r7, #24]
    9c74:	e00a      	b.n	9c8c <cc2400_repeater+0x218>
						cc2400_set8(FIFOREG, buf[j]);
    9c76:	68fa      	ldr	r2, [r7, #12]
    9c78:	69bb      	ldr	r3, [r7, #24]
    9c7a:	4413      	add	r3, r2
    9c7c:	781b      	ldrb	r3, [r3, #0]
    9c7e:	2070      	movs	r0, #112	; 0x70
    9c80:	4619      	mov	r1, r3
    9c82:	f000 fec1 	bl	aa08 <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
					for (j = 0; j < len; j++)
    9c86:	69bb      	ldr	r3, [r7, #24]
    9c88:	3301      	adds	r3, #1
    9c8a:	61bb      	str	r3, [r7, #24]
    9c8c:	7dba      	ldrb	r2, [r7, #22]
    9c8e:	69bb      	ldr	r3, [r7, #24]
    9c90:	429a      	cmp	r2, r3
    9c92:	dcf0      	bgt.n	9c76 <cc2400_repeater+0x202>
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    9c94:	2063      	movs	r0, #99	; 0x63
    9c96:	f000 ff4b 	bl	ab30 <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    9c9a:	69fb      	ldr	r3, [r7, #28]
    9c9c:	3301      	adds	r3, #1
    9c9e:	61fb      	str	r3, [r7, #28]
    9ca0:	69fb      	ldr	r3, [r7, #28]
    9ca2:	2b0f      	cmp	r3, #15
    9ca4:	ddd7      	ble.n	9c56 <cc2400_repeater+0x1e2>
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    9ca6:	7dfb      	ldrb	r3, [r7, #23]
    9ca8:	3301      	adds	r3, #1
    9caa:	75fb      	strb	r3, [r7, #23]
    9cac:	7dfb      	ldrb	r3, [r7, #23]
    9cae:	2b07      	cmp	r3, #7
    9cb0:	d9c2      	bls.n	9c38 <cc2400_repeater+0x1c4>
					for (j = 0; j < len; j++)
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    9cb2:	4b09      	ldr	r3, [pc, #36]	; (9cd8 <cc2400_repeater+0x264>)
    9cb4:	f44f 7280 	mov.w	r2, #256	; 0x100
    9cb8:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    9cba:	2064      	movs	r0, #100	; 0x64
    9cbc:	f000 ff38 	bl	ab30 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    9cc0:	bf00      	nop
    9cc2:	f000 ff2b 	bl	ab1c <cc2400_status>
    9cc6:	4603      	mov	r3, r0
    9cc8:	f003 0304 	and.w	r3, r3, #4
    9ccc:	2b00      	cmp	r3, #0
    9cce:	d1f8      	bne.n	9cc2 <cc2400_repeater+0x24e>
	}
    9cd0:	e6f3      	b.n	9aba <cc2400_repeater+0x46>
    9cd2:	bf00      	nop
    9cd4:	2009c038 	.word	0x2009c038
    9cd8:	2009c03c 	.word	0x2009c03c
    9cdc:	2009c058 	.word	0x2009c058
    9ce0:	001e8480 	.word	0x001e8480

00009ce4 <cc2400_txtest>:
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    9ce4:	b580      	push	{r7, lr}
    9ce6:	b084      	sub	sp, #16
    9ce8:	af00      	add	r7, sp, #0
    9cea:	6078      	str	r0, [r7, #4]
    9cec:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    9cee:	687b      	ldr	r3, [r7, #4]
    9cf0:	781b      	ldrb	r3, [r3, #0]
    9cf2:	b2db      	uxtb	r3, r3
    9cf4:	2b00      	cmp	r3, #0
    9cf6:	d102      	bne.n	9cfe <cc2400_txtest+0x1a>
		mdmctrl = 0x0040; // 160 kHz frequency deviation
    9cf8:	2340      	movs	r3, #64	; 0x40
    9cfa:	81fb      	strh	r3, [r7, #14]
    9cfc:	e008      	b.n	9d10 <cc2400_txtest+0x2c>
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    9cfe:	687b      	ldr	r3, [r7, #4]
    9d00:	781b      	ldrb	r3, [r3, #0]
    9d02:	b2db      	uxtb	r3, r3
    9d04:	2b01      	cmp	r3, #1
    9d06:	d102      	bne.n	9d0e <cc2400_txtest+0x2a>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    9d08:	2340      	movs	r3, #64	; 0x40
    9d0a:	81fb      	strh	r3, [r7, #14]
    9d0c:	e000      	b.n	9d10 <cc2400_txtest+0x2c>
	} else {
		/* oops */
		return;
    9d0e:	e035      	b.n	9d7c <cc2400_txtest+0x98>
	}
	cc2400_set(LMTST,   0x2b22);
    9d10:	2012      	movs	r0, #18
    9d12:	f642 3122 	movw	r1, #11042	; 0x2b22
    9d16:	f000 fe49 	bl	a9ac <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    9d1a:	2014      	movs	r0, #20
    9d1c:	f243 314b 	movw	r1, #13131	; 0x334b
    9d20:	f000 fe44 	bl	a9ac <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    9d24:	2020      	movs	r0, #32
    9d26:	f640 51f1 	movw	r1, #3569	; 0xdf1
    9d2a:	f000 fe3f 	bl	a9ac <cc2400_set>
	cc2400_set(FSDIV,   2435);
    9d2e:	2002      	movs	r0, #2
    9d30:	f640 1183 	movw	r1, #2435	; 0x983
    9d34:	f000 fe3a 	bl	a9ac <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl); 
    9d38:	89fb      	ldrh	r3, [r7, #14]
    9d3a:	2003      	movs	r0, #3
    9d3c:	4619      	mov	r1, r3
    9d3e:	f000 fe35 	bl	a9ac <cc2400_set>
	
//	cc2400_set(FREND, 8 | 0);
	
	while (!(cc2400_status() & XOSC16M_STABLE));
    9d42:	bf00      	nop
    9d44:	f000 feea 	bl	ab1c <cc2400_status>
    9d48:	4603      	mov	r3, r0
    9d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9d4e:	2b00      	cmp	r3, #0
    9d50:	d0f8      	beq.n	9d44 <cc2400_txtest+0x60>
	cc2400_strobe(SFSON);
    9d52:	2061      	movs	r0, #97	; 0x61
    9d54:	f000 feec 	bl	ab30 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    9d58:	bf00      	nop
    9d5a:	f000 fedf 	bl	ab1c <cc2400_status>
    9d5e:	4603      	mov	r3, r0
    9d60:	f003 0304 	and.w	r3, r3, #4
    9d64:	2b00      	cmp	r3, #0
    9d66:	d0f8      	beq.n	9d5a <cc2400_txtest+0x76>
	TXLED_SET;
    9d68:	4b06      	ldr	r3, [pc, #24]	; (9d84 <cc2400_txtest+0xa0>)
    9d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
    9d6e:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    9d70:	2063      	movs	r0, #99	; 0x63
    9d72:	f000 fedd 	bl	ab30 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    9d76:	4b04      	ldr	r3, [pc, #16]	; (9d88 <cc2400_txtest+0xa4>)
    9d78:	2280      	movs	r2, #128	; 0x80
    9d7a:	601a      	str	r2, [r3, #0]
#endif
#endif
}
    9d7c:	3710      	adds	r7, #16
    9d7e:	46bd      	mov	sp, r7
    9d80:	bd80      	pop	{r7, pc}
    9d82:	bf00      	nop
    9d84:	2009c038 	.word	0x2009c038
    9d88:	2009c058 	.word	0x2009c058

00009d8c <ssp_start>:
typedef struct _ego_packet_t {
	u8 rxbuf[EGO_PACKET_LEN];
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
    9d8c:	b480      	push	{r7}
    9d8e:	af00      	add	r7, sp, #0
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    9d90:	4b08      	ldr	r3, [pc, #32]	; (9db4 <ssp_start+0x28>)
    9d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9d96:	601a      	str	r2, [r3, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    9d98:	4a07      	ldr	r2, [pc, #28]	; (9db8 <ssp_start+0x2c>)
    9d9a:	4b07      	ldr	r3, [pc, #28]	; (9db8 <ssp_start+0x2c>)
    9d9c:	681b      	ldr	r3, [r3, #0]
    9d9e:	f043 0302 	orr.w	r3, r3, #2
    9da2:	6013      	str	r3, [r2, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    9da4:	4b05      	ldr	r3, [pc, #20]	; (9dbc <ssp_start+0x30>)
    9da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9daa:	601a      	str	r2, [r3, #0]
}
    9dac:	46bd      	mov	sp, r7
    9dae:	f85d 7b04 	ldr.w	r7, [sp], #4
    9db2:	4770      	bx	lr
    9db4:	2009c098 	.word	0x2009c098
    9db8:	40030004 	.word	0x40030004
    9dbc:	2009c09c 	.word	0x2009c09c

00009dc0 <ssp_stop>:

static void ssp_stop() {
    9dc0:	b480      	push	{r7}
    9dc2:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    9dc4:	4b06      	ldr	r3, [pc, #24]	; (9de0 <ssp_stop+0x20>)
    9dc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9dca:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    9dcc:	4a05      	ldr	r2, [pc, #20]	; (9de4 <ssp_stop+0x24>)
    9dce:	4b05      	ldr	r3, [pc, #20]	; (9de4 <ssp_stop+0x24>)
    9dd0:	681b      	ldr	r3, [r3, #0]
    9dd2:	f023 0302 	bic.w	r3, r3, #2
    9dd6:	6013      	str	r3, [r2, #0]
}
    9dd8:	46bd      	mov	sp, r7
    9dda:	f85d 7b04 	ldr.w	r7, [sp], #4
    9dde:	4770      	bx	lr
    9de0:	2009c098 	.word	0x2009c098
    9de4:	40030004 	.word	0x40030004

00009de8 <ego_init>:

static void ego_init(void) {
    9de8:	b580      	push	{r7, lr}
    9dea:	af00      	add	r7, sp, #0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    9dec:	4b03      	ldr	r3, [pc, #12]	; (9dfc <ego_init+0x14>)
    9dee:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    9df2:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    9df4:	f000 fd08 	bl	a808 <dio_ssp_init>
}
    9df8:	bd80      	pop	{r7, pc}
    9dfa:	bf00      	nop
    9dfc:	e000e100 	.word	0xe000e100

00009e00 <ego_deinit>:

static void ego_deinit(void) {
    9e00:	b580      	push	{r7, lr}
    9e02:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    9e04:	2064      	movs	r0, #100	; 0x64
    9e06:	f000 fe93 	bl	ab30 <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    9e0a:	f7ff ffd9 	bl	9dc0 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    9e0e:	4b02      	ldr	r3, [pc, #8]	; (9e18 <ego_deinit+0x18>)
    9e10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    9e14:	601a      	str	r2, [r3, #0]
}
    9e16:	bd80      	pop	{r7, pc}
    9e18:	e000e180 	.word	0xe000e180

00009e1c <rf_on>:

static void rf_on(void) {
    9e1c:	b580      	push	{r7, lr}
    9e1e:	af00      	add	r7, sp, #0
	cc2400_set(MANAND,  0x7fff);
    9e20:	200d      	movs	r0, #13
    9e22:	f647 71ff 	movw	r1, #32767	; 0x7fff
    9e26:	f000 fdc1 	bl	a9ac <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    9e2a:	2012      	movs	r0, #18
    9e2c:	f642 3122 	movw	r1, #11042	; 0x2b22
    9e30:	f000 fdbc 	bl	a9ac <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    9e34:	2014      	movs	r0, #20
    9e36:	f241 314b 	movw	r1, #4939	; 0x134b
    9e3a:	f000 fdb7 	bl	a9ac <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    9e3e:	2020      	movs	r0, #32
    9e40:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    9e44:	f000 fdb2 	bl	a9ac <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    9e48:	4b1e      	ldr	r3, [pc, #120]	; (9ec4 <rf_on+0xa8>)
    9e4a:	881b      	ldrh	r3, [r3, #0]
    9e4c:	b29b      	uxth	r3, r3
    9e4e:	3b01      	subs	r3, #1
    9e50:	b29b      	uxth	r3, r3
    9e52:	2002      	movs	r0, #2
    9e54:	4619      	mov	r1, r3
    9e56:	f000 fda9 	bl	a9ac <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    9e5a:	2003      	movs	r0, #3
    9e5c:	2126      	movs	r1, #38	; 0x26
    9e5e:	f000 fda5 	bl	a9ac <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    9e62:	2021      	movs	r0, #33	; 0x21
    9e64:	2103      	movs	r1, #3
    9e66:	f000 fda1 	bl	a9ac <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    9e6a:	202d      	movs	r0, #45	; 0x2d
    9e6c:	f246 310f 	movw	r1, #25359	; 0x630f
    9e70:	f000 fd9c 	bl	a9ac <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    9e74:	202c      	movs	r0, #44	; 0x2c
    9e76:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    9e7a:	f000 fd97 	bl	a9ac <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    9e7e:	bf00      	nop
    9e80:	f000 fe4c 	bl	ab1c <cc2400_status>
    9e84:	4603      	mov	r3, r0
    9e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9e8a:	2b00      	cmp	r3, #0
    9e8c:	d0f8      	beq.n	9e80 <rf_on+0x64>

	ssp_start();
    9e8e:	f7ff ff7d 	bl	9d8c <ssp_start>

	cc2400_strobe(SFSON);
    9e92:	2061      	movs	r0, #97	; 0x61
    9e94:	f000 fe4c 	bl	ab30 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    9e98:	bf00      	nop
    9e9a:	f000 fe3f 	bl	ab1c <cc2400_status>
    9e9e:	4603      	mov	r3, r0
    9ea0:	f003 0304 	and.w	r3, r3, #4
    9ea4:	2b00      	cmp	r3, #0
    9ea6:	d0f8      	beq.n	9e9a <rf_on+0x7e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9ea8:	bf00      	nop
    9eaa:	200e      	movs	r0, #14
    9eac:	f000 fd68 	bl	a980 <cc2400_get>
    9eb0:	4603      	mov	r3, r0
    9eb2:	f003 031f 	and.w	r3, r3, #31
    9eb6:	2b0f      	cmp	r3, #15
    9eb8:	d1f7      	bne.n	9eaa <rf_on+0x8e>

	cc2400_strobe(SRX);
    9eba:	2062      	movs	r0, #98	; 0x62
    9ebc:	f000 fe38 	bl	ab30 <cc2400_strobe>
}
    9ec0:	bd80      	pop	{r7, pc}
    9ec2:	bf00      	nop
    9ec4:	1000049c 	.word	0x1000049c

00009ec8 <do_rx>:

void do_rx(ego_packet_t *packet) {
    9ec8:	b480      	push	{r7}
    9eca:	b085      	sub	sp, #20
    9ecc:	af00      	add	r7, sp, #0
    9ece:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    9ed0:	2300      	movs	r3, #0
    9ed2:	60fb      	str	r3, [r7, #12]
    9ed4:	e011      	b.n	9efa <do_rx+0x32>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    9ed6:	bf00      	nop
    9ed8:	4b0c      	ldr	r3, [pc, #48]	; (9f0c <do_rx+0x44>)
    9eda:	681b      	ldr	r3, [r3, #0]
    9edc:	f003 0304 	and.w	r3, r3, #4
    9ee0:	2b00      	cmp	r3, #0
    9ee2:	d0f9      	beq.n	9ed8 <do_rx+0x10>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    9ee4:	4b0a      	ldr	r3, [pc, #40]	; (9f10 <do_rx+0x48>)
    9ee6:	681b      	ldr	r3, [r3, #0]
    9ee8:	b2d9      	uxtb	r1, r3
    9eea:	687a      	ldr	r2, [r7, #4]
    9eec:	68fb      	ldr	r3, [r7, #12]
    9eee:	4413      	add	r3, r2
    9ef0:	460a      	mov	r2, r1
    9ef2:	701a      	strb	r2, [r3, #0]
	cc2400_strobe(SRX);
}

void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    9ef4:	68fb      	ldr	r3, [r7, #12]
    9ef6:	3301      	adds	r3, #1
    9ef8:	60fb      	str	r3, [r7, #12]
    9efa:	68fb      	ldr	r3, [r7, #12]
    9efc:	2b23      	cmp	r3, #35	; 0x23
    9efe:	ddea      	ble.n	9ed6 <do_rx+0xe>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    9f00:	3714      	adds	r7, #20
    9f02:	46bd      	mov	sp, r7
    9f04:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f08:	4770      	bx	lr
    9f0a:	bf00      	nop
    9f0c:	4003000c 	.word	0x4003000c
    9f10:	40030008 	.word	0x40030008

00009f14 <sync_received>:

static inline int sync_received(void) {
    9f14:	b580      	push	{r7, lr}
    9f16:	af00      	add	r7, sp, #0
	return cc2400_status() & SYNC_RECEIVED;
    9f18:	f000 fe00 	bl	ab1c <cc2400_status>
    9f1c:	4603      	mov	r3, r0
    9f1e:	f003 0310 	and.w	r3, r3, #16
}
    9f22:	4618      	mov	r0, r3
    9f24:	bd80      	pop	{r7, pc}
    9f26:	bf00      	nop

00009f28 <sleep_ms>:

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    9f28:	b480      	push	{r7}
    9f2a:	b083      	sub	sp, #12
    9f2c:	af00      	add	r7, sp, #0
    9f2e:	6078      	str	r0, [r7, #4]
    9f30:	6039      	str	r1, [r7, #0]
	state->sleep_start = CLK100NS;
    9f32:	4b0c      	ldr	r3, [pc, #48]	; (9f64 <sleep_ms+0x3c>)
    9f34:	681b      	ldr	r3, [r3, #0]
    9f36:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9f3a:	f640 4235 	movw	r2, #3125	; 0xc35
    9f3e:	fb02 f203 	mul.w	r2, r2, r3
    9f42:	4b09      	ldr	r3, [pc, #36]	; (9f68 <sleep_ms+0x40>)
    9f44:	681b      	ldr	r3, [r3, #0]
    9f46:	441a      	add	r2, r3
    9f48:	687b      	ldr	r3, [r7, #4]
    9f4a:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    9f4c:	683b      	ldr	r3, [r7, #0]
    9f4e:	f242 7210 	movw	r2, #10000	; 0x2710
    9f52:	fb02 f203 	mul.w	r2, r2, r3
    9f56:	687b      	ldr	r3, [r7, #4]
    9f58:	60da      	str	r2, [r3, #12]
}
    9f5a:	370c      	adds	r7, #12
    9f5c:	46bd      	mov	sp, r7
    9f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f62:	4770      	bx	lr
    9f64:	10000bec 	.word	0x10000bec
    9f68:	40004008 	.word	0x40004008

00009f6c <sleep_ms_anchor>:

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
    9f6c:	b480      	push	{r7}
    9f6e:	b083      	sub	sp, #12
    9f70:	af00      	add	r7, sp, #0
    9f72:	6078      	str	r0, [r7, #4]
    9f74:	6039      	str	r1, [r7, #0]
	state->sleep_start = state->anchor;
    9f76:	687b      	ldr	r3, [r7, #4]
    9f78:	699a      	ldr	r2, [r3, #24]
    9f7a:	687b      	ldr	r3, [r7, #4]
    9f7c:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    9f7e:	683b      	ldr	r3, [r7, #0]
    9f80:	f242 7210 	movw	r2, #10000	; 0x2710
    9f84:	fb02 f203 	mul.w	r2, r2, r3
    9f88:	687b      	ldr	r3, [r7, #4]
    9f8a:	60da      	str	r2, [r3, #12]
}
    9f8c:	370c      	adds	r7, #12
    9f8e:	46bd      	mov	sp, r7
    9f90:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f94:	4770      	bx	lr
    9f96:	bf00      	nop

00009f98 <sleep_elapsed>:

static inline int sleep_elapsed(ego_fsm_state_t *state) {
    9f98:	b480      	push	{r7}
    9f9a:	b085      	sub	sp, #20
    9f9c:	af00      	add	r7, sp, #0
    9f9e:	6078      	str	r0, [r7, #4]
	u32 now = CLK100NS;
    9fa0:	4b13      	ldr	r3, [pc, #76]	; (9ff0 <sleep_elapsed+0x58>)
    9fa2:	681b      	ldr	r3, [r3, #0]
    9fa4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9fa8:	f640 4235 	movw	r2, #3125	; 0xc35
    9fac:	fb02 f203 	mul.w	r2, r2, r3
    9fb0:	4b10      	ldr	r3, [pc, #64]	; (9ff4 <sleep_elapsed+0x5c>)
    9fb2:	681b      	ldr	r3, [r3, #0]
    9fb4:	4413      	add	r3, r2
    9fb6:	60fb      	str	r3, [r7, #12]
	if (now < state->sleep_start)
    9fb8:	687b      	ldr	r3, [r7, #4]
    9fba:	689a      	ldr	r2, [r3, #8]
    9fbc:	68fb      	ldr	r3, [r7, #12]
    9fbe:	429a      	cmp	r2, r3
    9fc0:	d905      	bls.n	9fce <sleep_elapsed+0x36>
		now += 3276800000;
    9fc2:	68fb      	ldr	r3, [r7, #12]
    9fc4:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    9fc8:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    9fcc:	60fb      	str	r3, [r7, #12]
	return (now - state->sleep_start) >= state->sleep_duration;
    9fce:	687b      	ldr	r3, [r7, #4]
    9fd0:	689b      	ldr	r3, [r3, #8]
    9fd2:	68fa      	ldr	r2, [r7, #12]
    9fd4:	1ad2      	subs	r2, r2, r3
    9fd6:	687b      	ldr	r3, [r7, #4]
    9fd8:	68db      	ldr	r3, [r3, #12]
    9fda:	429a      	cmp	r2, r3
    9fdc:	bf2c      	ite	cs
    9fde:	2301      	movcs	r3, #1
    9fe0:	2300      	movcc	r3, #0
    9fe2:	b2db      	uxtb	r3, r3
}
    9fe4:	4618      	mov	r0, r3
    9fe6:	3714      	adds	r7, #20
    9fe8:	46bd      	mov	sp, r7
    9fea:	f85d 7b04 	ldr.w	r7, [sp], #4
    9fee:	4770      	bx	lr
    9ff0:	10000bec 	.word	0x10000bec
    9ff4:	40004008 	.word	0x40004008

00009ff8 <nop_state>:

/////////////
// states

// do nothing
void nop_state(ego_fsm_state_t *state) {
    9ff8:	b480      	push	{r7}
    9ffa:	b083      	sub	sp, #12
    9ffc:	af00      	add	r7, sp, #0
    9ffe:	6078      	str	r0, [r7, #4]
}
    a000:	370c      	adds	r7, #12
    a002:	46bd      	mov	sp, r7
    a004:	f85d 7b04 	ldr.w	r7, [sp], #4
    a008:	4770      	bx	lr
    a00a:	bf00      	nop

0000a00c <init_state>:

// used in follow and jam mode, override the channel supplied by user
void init_state(ego_fsm_state_t *state) {
    a00c:	b480      	push	{r7}
    a00e:	b083      	sub	sp, #12
    a010:	af00      	add	r7, sp, #0
    a012:	6078      	str	r0, [r7, #4]
	state->channel_index = 0;
    a014:	687b      	ldr	r3, [r7, #4]
    a016:	2200      	movs	r2, #0
    a018:	605a      	str	r2, [r3, #4]
	channel = channels[state->channel_index];
    a01a:	687b      	ldr	r3, [r7, #4]
    a01c:	685b      	ldr	r3, [r3, #4]
    a01e:	4a06      	ldr	r2, [pc, #24]	; (a038 <init_state+0x2c>)
    a020:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    a024:	4b05      	ldr	r3, [pc, #20]	; (a03c <init_state+0x30>)
    a026:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    a028:	687b      	ldr	r3, [r7, #4]
    a02a:	2201      	movs	r2, #1
    a02c:	701a      	strb	r2, [r3, #0]
}
    a02e:	370c      	adds	r7, #12
    a030:	46bd      	mov	sp, r7
    a032:	f85d 7b04 	ldr.w	r7, [sp], #4
    a036:	4770      	bx	lr
    a038:	100008b0 	.word	0x100008b0
    a03c:	1000049c 	.word	0x1000049c

0000a040 <start_rf_state>:

void start_rf_state(ego_fsm_state_t *state) {
    a040:	b580      	push	{r7, lr}
    a042:	b082      	sub	sp, #8
    a044:	af00      	add	r7, sp, #0
    a046:	6078      	str	r0, [r7, #4]
	rf_on();
    a048:	f7ff fee8 	bl	9e1c <rf_on>
	state->state = EGO_ST_CAP;
    a04c:	687b      	ldr	r3, [r7, #4]
    a04e:	2202      	movs	r2, #2
    a050:	701a      	strb	r2, [r3, #0]
}
    a052:	3708      	adds	r7, #8
    a054:	46bd      	mov	sp, r7
    a056:	bd80      	pop	{r7, pc}

0000a058 <cap_state>:

void cap_state(ego_fsm_state_t *state) {
    a058:	b580      	push	{r7, lr}
    a05a:	b08c      	sub	sp, #48	; 0x30
    a05c:	af00      	add	r7, sp, #0
    a05e:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    a060:	f107 0308 	add.w	r3, r7, #8
    a064:	2200      	movs	r2, #0
    a066:	601a      	str	r2, [r3, #0]
    a068:	3304      	adds	r3, #4
    a06a:	2200      	movs	r2, #0
    a06c:	601a      	str	r2, [r3, #0]
    a06e:	3304      	adds	r3, #4
    a070:	2200      	movs	r2, #0
    a072:	601a      	str	r2, [r3, #0]
    a074:	3304      	adds	r3, #4
    a076:	2200      	movs	r2, #0
    a078:	601a      	str	r2, [r3, #0]
    a07a:	3304      	adds	r3, #4
    a07c:	2200      	movs	r2, #0
    a07e:	601a      	str	r2, [r3, #0]
    a080:	3304      	adds	r3, #4
    a082:	2200      	movs	r2, #0
    a084:	601a      	str	r2, [r3, #0]
    a086:	3304      	adds	r3, #4
    a088:	2200      	movs	r2, #0
    a08a:	601a      	str	r2, [r3, #0]
    a08c:	3304      	adds	r3, #4
    a08e:	2200      	movs	r2, #0
    a090:	601a      	str	r2, [r3, #0]
    a092:	3304      	adds	r3, #4
    a094:	2200      	movs	r2, #0
    a096:	601a      	str	r2, [r3, #0]
    a098:	3304      	adds	r3, #4
    a09a:	2200      	movs	r2, #0
    a09c:	601a      	str	r2, [r3, #0]
    a09e:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    a0a0:	4b23      	ldr	r3, [pc, #140]	; (a130 <cap_state+0xd8>)
    a0a2:	681b      	ldr	r3, [r3, #0]
    a0a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a0a8:	f640 4235 	movw	r2, #3125	; 0xc35
    a0ac:	fb02 f203 	mul.w	r2, r2, r3
    a0b0:	4b20      	ldr	r3, [pc, #128]	; (a134 <cap_state+0xdc>)
    a0b2:	681b      	ldr	r3, [r3, #0]
    a0b4:	4413      	add	r3, r2
	rf_on();
	state->state = EGO_ST_CAP;
}

void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    a0b6:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    a0b8:	6878      	ldr	r0, [r7, #4]
    a0ba:	f7ff ff6d 	bl	9f98 <sleep_elapsed>
    a0be:	4603      	mov	r3, r0
    a0c0:	2b00      	cmp	r3, #0
    a0c2:	d006      	beq.n	a0d2 <cap_state+0x7a>
		sleep_ms(state, 4);
    a0c4:	6878      	ldr	r0, [r7, #4]
    a0c6:	2104      	movs	r1, #4
    a0c8:	f7ff ff2e 	bl	9f28 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    a0cc:	687b      	ldr	r3, [r7, #4]
    a0ce:	2203      	movs	r2, #3
    a0d0:	701a      	strb	r2, [r3, #0]
	}

	if (sync_received()) {
    a0d2:	f7ff ff1f 	bl	9f14 <sync_received>
    a0d6:	4603      	mov	r3, r0
    a0d8:	2b00      	cmp	r3, #0
    a0da:	d019      	beq.n	a110 <cap_state+0xb8>
		RXLED_SET;
    a0dc:	4b16      	ldr	r3, [pc, #88]	; (a138 <cap_state+0xe0>)
    a0de:	2210      	movs	r2, #16
    a0e0:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    a0e2:	f107 0308 	add.w	r3, r7, #8
    a0e6:	4618      	mov	r0, r3
    a0e8:	f7ff feee 	bl	9ec8 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    a0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a0ee:	f107 0208 	add.w	r2, r7, #8
    a0f2:	2006      	movs	r0, #6
    a0f4:	4611      	mov	r1, r2
    a0f6:	461a      	mov	r2, r3
    a0f8:	f7fa fc6c 	bl	49d4 <enqueue_with_ts>
		RXLED_CLR;
    a0fc:	4b0f      	ldr	r3, [pc, #60]	; (a13c <cap_state+0xe4>)
    a0fe:	2210      	movs	r2, #16
    a100:	601a      	str	r2, [r3, #0]

		sleep_ms(state, 6);
    a102:	6878      	ldr	r0, [r7, #4]
    a104:	2106      	movs	r1, #6
    a106:	f7ff ff0f 	bl	9f28 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    a10a:	687b      	ldr	r3, [r7, #4]
    a10c:	2203      	movs	r2, #3
    a10e:	701a      	strb	r2, [r3, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    a110:	687b      	ldr	r3, [r7, #4]
    a112:	781b      	ldrb	r3, [r3, #0]
    a114:	2b02      	cmp	r3, #2
    a116:	d007      	beq.n	a128 <cap_state+0xd0>
		cc2400_strobe(SRFOFF);
    a118:	2064      	movs	r0, #100	; 0x64
    a11a:	f000 fd09 	bl	ab30 <cc2400_strobe>
		ssp_stop();
    a11e:	f7ff fe4f 	bl	9dc0 <ssp_stop>
		state->timer_active = 1;
    a122:	687b      	ldr	r3, [r7, #4]
    a124:	2201      	movs	r2, #1
    a126:	611a      	str	r2, [r3, #16]
	}
}
    a128:	3730      	adds	r7, #48	; 0x30
    a12a:	46bd      	mov	sp, r7
    a12c:	bd80      	pop	{r7, pc}
    a12e:	bf00      	nop
    a130:	10000bec 	.word	0x10000bec
    a134:	40004008 	.word	0x40004008
    a138:	2009c038 	.word	0x2009c038
    a13c:	2009c03c 	.word	0x2009c03c

0000a140 <sleep_state>:

void sleep_state(ego_fsm_state_t *state) {
    a140:	b580      	push	{r7, lr}
    a142:	b082      	sub	sp, #8
    a144:	af00      	add	r7, sp, #0
    a146:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    a148:	6878      	ldr	r0, [r7, #4]
    a14a:	f7ff ff25 	bl	9f98 <sleep_elapsed>
    a14e:	4603      	mov	r3, r0
    a150:	2b00      	cmp	r3, #0
    a152:	d01e      	beq.n	a192 <sleep_state+0x52>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    a154:	687b      	ldr	r3, [r7, #4]
    a156:	685b      	ldr	r3, [r3, #4]
    a158:	1c5a      	adds	r2, r3, #1
    a15a:	4b0f      	ldr	r3, [pc, #60]	; (a198 <sleep_state+0x58>)
    a15c:	4013      	ands	r3, r2
    a15e:	2b00      	cmp	r3, #0
    a160:	da03      	bge.n	a16a <sleep_state+0x2a>
    a162:	3b01      	subs	r3, #1
    a164:	f063 0303 	orn	r3, r3, #3
    a168:	3301      	adds	r3, #1
    a16a:	461a      	mov	r2, r3
    a16c:	687b      	ldr	r3, [r7, #4]
    a16e:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    a170:	687b      	ldr	r3, [r7, #4]
    a172:	685b      	ldr	r3, [r3, #4]
    a174:	4a09      	ldr	r2, [pc, #36]	; (a19c <sleep_state+0x5c>)
    a176:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    a17a:	4b09      	ldr	r3, [pc, #36]	; (a1a0 <sleep_state+0x60>)
    a17c:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    a17e:	6878      	ldr	r0, [r7, #4]
    a180:	2107      	movs	r1, #7
    a182:	f7ff fed1 	bl	9f28 <sleep_ms>
		state->timer_active = 1;
    a186:	687b      	ldr	r3, [r7, #4]
    a188:	2201      	movs	r2, #1
    a18a:	611a      	str	r2, [r3, #16]

		state->state = EGO_ST_START_RX;
    a18c:	687b      	ldr	r3, [r7, #4]
    a18e:	2201      	movs	r2, #1
    a190:	701a      	strb	r2, [r3, #0]
	}
}
    a192:	3708      	adds	r7, #8
    a194:	46bd      	mov	sp, r7
    a196:	bd80      	pop	{r7, pc}
    a198:	80000003 	.word	0x80000003
    a19c:	100008b0 	.word	0x100008b0
    a1a0:	1000049c 	.word	0x1000049c

0000a1a4 <continuous_init_state>:

// continuous cap states (reuses START_RX state)
void continuous_init_state(ego_fsm_state_t *state) {
    a1a4:	b480      	push	{r7}
    a1a6:	b083      	sub	sp, #12
    a1a8:	af00      	add	r7, sp, #0
    a1aa:	6078      	str	r0, [r7, #4]
	state->state = EGO_ST_START_RX;
    a1ac:	687b      	ldr	r3, [r7, #4]
    a1ae:	2201      	movs	r2, #1
    a1b0:	701a      	strb	r2, [r3, #0]
}
    a1b2:	370c      	adds	r7, #12
    a1b4:	46bd      	mov	sp, r7
    a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1ba:	4770      	bx	lr

0000a1bc <continuous_cap_state>:

void continuous_cap_state(ego_fsm_state_t *state) {
    a1bc:	b580      	push	{r7, lr}
    a1be:	b08c      	sub	sp, #48	; 0x30
    a1c0:	af00      	add	r7, sp, #0
    a1c2:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    a1c4:	f107 0308 	add.w	r3, r7, #8
    a1c8:	2200      	movs	r2, #0
    a1ca:	601a      	str	r2, [r3, #0]
    a1cc:	3304      	adds	r3, #4
    a1ce:	2200      	movs	r2, #0
    a1d0:	601a      	str	r2, [r3, #0]
    a1d2:	3304      	adds	r3, #4
    a1d4:	2200      	movs	r2, #0
    a1d6:	601a      	str	r2, [r3, #0]
    a1d8:	3304      	adds	r3, #4
    a1da:	2200      	movs	r2, #0
    a1dc:	601a      	str	r2, [r3, #0]
    a1de:	3304      	adds	r3, #4
    a1e0:	2200      	movs	r2, #0
    a1e2:	601a      	str	r2, [r3, #0]
    a1e4:	3304      	adds	r3, #4
    a1e6:	2200      	movs	r2, #0
    a1e8:	601a      	str	r2, [r3, #0]
    a1ea:	3304      	adds	r3, #4
    a1ec:	2200      	movs	r2, #0
    a1ee:	601a      	str	r2, [r3, #0]
    a1f0:	3304      	adds	r3, #4
    a1f2:	2200      	movs	r2, #0
    a1f4:	601a      	str	r2, [r3, #0]
    a1f6:	3304      	adds	r3, #4
    a1f8:	2200      	movs	r2, #0
    a1fa:	601a      	str	r2, [r3, #0]
    a1fc:	3304      	adds	r3, #4
    a1fe:	2200      	movs	r2, #0
    a200:	601a      	str	r2, [r3, #0]
    a202:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    a204:	4b1e      	ldr	r3, [pc, #120]	; (a280 <continuous_cap_state+0xc4>)
    a206:	681b      	ldr	r3, [r3, #0]
    a208:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a20c:	f640 4235 	movw	r2, #3125	; 0xc35
    a210:	fb02 f203 	mul.w	r2, r2, r3
    a214:	4b1b      	ldr	r3, [pc, #108]	; (a284 <continuous_cap_state+0xc8>)
    a216:	681b      	ldr	r3, [r3, #0]
    a218:	4413      	add	r3, r2
void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    a21a:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    a21c:	f7ff fe7a 	bl	9f14 <sync_received>
    a220:	4603      	mov	r3, r0
    a222:	2b00      	cmp	r3, #0
    a224:	d029      	beq.n	a27a <continuous_cap_state+0xbe>
		RXLED_SET;
    a226:	4b18      	ldr	r3, [pc, #96]	; (a288 <continuous_cap_state+0xcc>)
    a228:	2210      	movs	r2, #16
    a22a:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    a22c:	f107 0308 	add.w	r3, r7, #8
    a230:	4618      	mov	r0, r3
    a232:	f7ff fe49 	bl	9ec8 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    a236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a238:	f107 0208 	add.w	r2, r7, #8
    a23c:	2006      	movs	r0, #6
    a23e:	4611      	mov	r1, r2
    a240:	461a      	mov	r2, r3
    a242:	f7fa fbc7 	bl	49d4 <enqueue_with_ts>
		RXLED_CLR;
    a246:	4b11      	ldr	r3, [pc, #68]	; (a28c <continuous_cap_state+0xd0>)
    a248:	2210      	movs	r2, #16
    a24a:	601a      	str	r2, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    a24c:	2061      	movs	r0, #97	; 0x61
    a24e:	f000 fc6f 	bl	ab30 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    a252:	bf00      	nop
    a254:	f000 fc62 	bl	ab1c <cc2400_status>
    a258:	4603      	mov	r3, r0
    a25a:	f003 0304 	and.w	r3, r3, #4
    a25e:	2b00      	cmp	r3, #0
    a260:	d0f8      	beq.n	a254 <continuous_cap_state+0x98>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    a262:	bf00      	nop
    a264:	200e      	movs	r0, #14
    a266:	f000 fb8b 	bl	a980 <cc2400_get>
    a26a:	4603      	mov	r3, r0
    a26c:	f003 031f 	and.w	r3, r3, #31
    a270:	2b0f      	cmp	r3, #15
    a272:	d1f7      	bne.n	a264 <continuous_cap_state+0xa8>
		cc2400_strobe(SRX);
    a274:	2062      	movs	r0, #98	; 0x62
    a276:	f000 fc5b 	bl	ab30 <cc2400_strobe>
	}
}
    a27a:	3730      	adds	r7, #48	; 0x30
    a27c:	46bd      	mov	sp, r7
    a27e:	bd80      	pop	{r7, pc}
    a280:	10000bec 	.word	0x10000bec
    a284:	40004008 	.word	0x40004008
    a288:	2009c038 	.word	0x2009c038
    a28c:	2009c03c 	.word	0x2009c03c

0000a290 <jam_cap_state>:

// jammer states
void jam_cap_state(ego_fsm_state_t *state) {
    a290:	b580      	push	{r7, lr}
    a292:	b082      	sub	sp, #8
    a294:	af00      	add	r7, sp, #0
    a296:	6078      	str	r0, [r7, #4]
	if (sync_received()) {
    a298:	f7ff fe3c 	bl	9f14 <sync_received>
    a29c:	4603      	mov	r3, r0
    a29e:	2b00      	cmp	r3, #0
    a2a0:	d012      	beq.n	a2c8 <jam_cap_state+0x38>
		state->state = EGO_ST_START_JAMMING;
    a2a2:	687b      	ldr	r3, [r7, #4]
    a2a4:	2204      	movs	r2, #4
    a2a6:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 1;
    a2a8:	687b      	ldr	r3, [r7, #4]
    a2aa:	2201      	movs	r2, #1
    a2ac:	615a      	str	r2, [r3, #20]
		state->anchor = CLK100NS;
    a2ae:	4b16      	ldr	r3, [pc, #88]	; (a308 <jam_cap_state+0x78>)
    a2b0:	681b      	ldr	r3, [r3, #0]
    a2b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a2b6:	f640 4235 	movw	r2, #3125	; 0xc35
    a2ba:	fb02 f203 	mul.w	r2, r2, r3
    a2be:	4b13      	ldr	r3, [pc, #76]	; (a30c <jam_cap_state+0x7c>)
    a2c0:	681b      	ldr	r3, [r3, #0]
    a2c2:	441a      	add	r2, r3
    a2c4:	687b      	ldr	r3, [r7, #4]
    a2c6:	619a      	str	r2, [r3, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    a2c8:	687b      	ldr	r3, [r7, #4]
    a2ca:	691b      	ldr	r3, [r3, #16]
    a2cc:	2b00      	cmp	r3, #0
    a2ce:	d00f      	beq.n	a2f0 <jam_cap_state+0x60>
    a2d0:	6878      	ldr	r0, [r7, #4]
    a2d2:	f7ff fe61 	bl	9f98 <sleep_elapsed>
    a2d6:	4603      	mov	r3, r0
    a2d8:	2b00      	cmp	r3, #0
    a2da:	d009      	beq.n	a2f0 <jam_cap_state+0x60>
		state->state = EGO_ST_START_JAMMING;
    a2dc:	687b      	ldr	r3, [r7, #4]
    a2de:	2204      	movs	r2, #4
    a2e0:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 0;
    a2e2:	687b      	ldr	r3, [r7, #4]
    a2e4:	2200      	movs	r2, #0
    a2e6:	615a      	str	r2, [r3, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    a2e8:	6878      	ldr	r0, [r7, #4]
    a2ea:	210b      	movs	r1, #11
    a2ec:	f7ff fe1c 	bl	9f28 <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    a2f0:	687b      	ldr	r3, [r7, #4]
    a2f2:	781b      	ldrb	r3, [r3, #0]
    a2f4:	2b02      	cmp	r3, #2
    a2f6:	d004      	beq.n	a302 <jam_cap_state+0x72>
		cc2400_strobe(SRFOFF);
    a2f8:	2064      	movs	r0, #100	; 0x64
    a2fa:	f000 fc19 	bl	ab30 <cc2400_strobe>
		ssp_stop();
    a2fe:	f7ff fd5f 	bl	9dc0 <ssp_stop>
	}
}
    a302:	3708      	adds	r7, #8
    a304:	46bd      	mov	sp, r7
    a306:	bd80      	pop	{r7, pc}
    a308:	10000bec 	.word	0x10000bec
    a30c:	40004008 	.word	0x40004008

0000a310 <start_jamming_state>:

void start_jamming_state(ego_fsm_state_t *state) {
    a310:	b580      	push	{r7, lr}
    a312:	b082      	sub	sp, #8
    a314:	af00      	add	r7, sp, #0
    a316:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    a318:	200d      	movs	r0, #13
    a31a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    a31e:	f000 fb45 	bl	a9ac <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    a322:	2012      	movs	r0, #18
    a324:	f642 3122 	movw	r1, #11042	; 0x2b22
    a328:	f000 fb40 	bl	a9ac <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    a32c:	2014      	movs	r0, #20
    a32e:	f243 314b 	movw	r1, #13131	; 0x334b
    a332:	f000 fb3b 	bl	a9ac <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    a336:	2020      	movs	r0, #32
    a338:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    a33c:	f000 fb36 	bl	a9ac <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    a340:	4b21      	ldr	r3, [pc, #132]	; (a3c8 <start_jamming_state+0xb8>)
    a342:	881b      	ldrh	r3, [r3, #0]
    a344:	b29b      	uxth	r3, r3
    a346:	2002      	movs	r0, #2
    a348:	4619      	mov	r1, r3
    a34a:	f000 fb2f 	bl	a9ac <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    a34e:	2003      	movs	r0, #3
    a350:	2126      	movs	r1, #38	; 0x26
    a352:	f000 fb2b 	bl	a9ac <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    a356:	2021      	movs	r0, #33	; 0x21
    a358:	2103      	movs	r1, #3
    a35a:	f000 fb27 	bl	a9ac <cc2400_set>
	cc2400_set(FREND, 0xf);
    a35e:	2005      	movs	r0, #5
    a360:	210f      	movs	r1, #15
    a362:	f000 fb23 	bl	a9ac <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    a366:	bf00      	nop
    a368:	f000 fbd8 	bl	ab1c <cc2400_status>
    a36c:	4603      	mov	r3, r0
    a36e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a372:	2b00      	cmp	r3, #0
    a374:	d0f8      	beq.n	a368 <start_jamming_state+0x58>

	cc2400_strobe(SFSON);
    a376:	2061      	movs	r0, #97	; 0x61
    a378:	f000 fbda 	bl	ab30 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    a37c:	bf00      	nop
    a37e:	f000 fbcd 	bl	ab1c <cc2400_status>
    a382:	4603      	mov	r3, r0
    a384:	f003 0304 	and.w	r3, r3, #4
    a388:	2b00      	cmp	r3, #0
    a38a:	d0f8      	beq.n	a37e <start_jamming_state+0x6e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    a38c:	bf00      	nop
    a38e:	200e      	movs	r0, #14
    a390:	f000 faf6 	bl	a980 <cc2400_get>
    a394:	4603      	mov	r3, r0
    a396:	f003 031f 	and.w	r3, r3, #31
    a39a:	2b0f      	cmp	r3, #15
    a39c:	d1f7      	bne.n	a38e <start_jamming_state+0x7e>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    a39e:	4b0b      	ldr	r3, [pc, #44]	; (a3cc <start_jamming_state+0xbc>)
    a3a0:	2280      	movs	r2, #128	; 0x80
    a3a2:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    a3a4:	2063      	movs	r0, #99	; 0x63
    a3a6:	f000 fbc3 	bl	ab30 <cc2400_strobe>
	TXLED_SET;
    a3aa:	4b09      	ldr	r3, [pc, #36]	; (a3d0 <start_jamming_state+0xc0>)
    a3ac:	f44f 7280 	mov.w	r2, #256	; 0x100
    a3b0:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    a3b2:	687b      	ldr	r3, [r7, #4]
    a3b4:	2205      	movs	r2, #5
    a3b6:	701a      	strb	r2, [r3, #0]
	sleep_ms_anchor(state, 2);
    a3b8:	6878      	ldr	r0, [r7, #4]
    a3ba:	2102      	movs	r1, #2
    a3bc:	f7ff fdd6 	bl	9f6c <sleep_ms_anchor>
}
    a3c0:	3708      	adds	r7, #8
    a3c2:	46bd      	mov	sp, r7
    a3c4:	bd80      	pop	{r7, pc}
    a3c6:	bf00      	nop
    a3c8:	1000049c 	.word	0x1000049c
    a3cc:	2009c058 	.word	0x2009c058
    a3d0:	2009c038 	.word	0x2009c038

0000a3d4 <jamming_state>:

void jamming_state(ego_fsm_state_t *state) {
    a3d4:	b580      	push	{r7, lr}
    a3d6:	b082      	sub	sp, #8
    a3d8:	af00      	add	r7, sp, #0
    a3da:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    a3dc:	6878      	ldr	r0, [r7, #4]
    a3de:	f7ff fddb 	bl	9f98 <sleep_elapsed>
    a3e2:	4603      	mov	r3, r0
    a3e4:	2b00      	cmp	r3, #0
    a3e6:	d025      	beq.n	a434 <jamming_state+0x60>
		cc2400_strobe(SRFOFF);
    a3e8:	2064      	movs	r0, #100	; 0x64
    a3ea:	f000 fba1 	bl	ab30 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    a3ee:	4b13      	ldr	r3, [pc, #76]	; (a43c <jamming_state+0x68>)
    a3f0:	2280      	movs	r2, #128	; 0x80
    a3f2:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    a3f4:	4b12      	ldr	r3, [pc, #72]	; (a440 <jamming_state+0x6c>)
    a3f6:	f44f 7280 	mov.w	r2, #256	; 0x100
    a3fa:	601a      	str	r2, [r3, #0]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    a3fc:	687b      	ldr	r3, [r7, #4]
    a3fe:	685b      	ldr	r3, [r3, #4]
    a400:	1c5a      	adds	r2, r3, #1
    a402:	4b10      	ldr	r3, [pc, #64]	; (a444 <jamming_state+0x70>)
    a404:	4013      	ands	r3, r2
    a406:	2b00      	cmp	r3, #0
    a408:	da03      	bge.n	a412 <jamming_state+0x3e>
    a40a:	3b01      	subs	r3, #1
    a40c:	f063 0303 	orn	r3, r3, #3
    a410:	3301      	adds	r3, #1
    a412:	461a      	mov	r2, r3
    a414:	687b      	ldr	r3, [r7, #4]
    a416:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    a418:	687b      	ldr	r3, [r7, #4]
    a41a:	685b      	ldr	r3, [r3, #4]
    a41c:	4a0a      	ldr	r2, [pc, #40]	; (a448 <jamming_state+0x74>)
    a41e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    a422:	4b0a      	ldr	r3, [pc, #40]	; (a44c <jamming_state+0x78>)
    a424:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    a426:	687b      	ldr	r3, [r7, #4]
    a428:	2203      	movs	r2, #3
    a42a:	701a      	strb	r2, [r3, #0]
		sleep_ms_anchor(state, 6);
    a42c:	6878      	ldr	r0, [r7, #4]
    a42e:	2106      	movs	r1, #6
    a430:	f7ff fd9c 	bl	9f6c <sleep_ms_anchor>
	}
}
    a434:	3708      	adds	r7, #8
    a436:	46bd      	mov	sp, r7
    a438:	bd80      	pop	{r7, pc}
    a43a:	bf00      	nop
    a43c:	2009c05c 	.word	0x2009c05c
    a440:	2009c03c 	.word	0x2009c03c
    a444:	80000003 	.word	0x80000003
    a448:	100008b0 	.word	0x100008b0
    a44c:	1000049c 	.word	0x1000049c

0000a450 <jam_sleep_state>:

void jam_sleep_state(ego_fsm_state_t *state) {
    a450:	b580      	push	{r7, lr}
    a452:	b082      	sub	sp, #8
    a454:	af00      	add	r7, sp, #0
    a456:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    a458:	6878      	ldr	r0, [r7, #4]
    a45a:	f7ff fd9d 	bl	9f98 <sleep_elapsed>
    a45e:	4603      	mov	r3, r0
    a460:	2b00      	cmp	r3, #0
    a462:	d009      	beq.n	a478 <jam_sleep_state+0x28>
		state->state = EGO_ST_START_RX;
    a464:	687b      	ldr	r3, [r7, #4]
    a466:	2201      	movs	r2, #1
    a468:	701a      	strb	r2, [r3, #0]
		state->timer_active = 1;
    a46a:	687b      	ldr	r3, [r7, #4]
    a46c:	2201      	movs	r2, #1
    a46e:	611a      	str	r2, [r3, #16]
		sleep_ms_anchor(state, 11);
    a470:	6878      	ldr	r0, [r7, #4]
    a472:	210b      	movs	r1, #11
    a474:	f7ff fd7a 	bl	9f6c <sleep_ms_anchor>
	}
}
    a478:	3708      	adds	r7, #8
    a47a:	46bd      	mov	sp, r7
    a47c:	bd80      	pop	{r7, pc}
    a47e:	bf00      	nop

0000a480 <ego_main>:

void ego_main(ego_mode_t mode) {
    a480:	b5b0      	push	{r4, r5, r7, lr}
    a482:	b09e      	sub	sp, #120	; 0x78
    a484:	af00      	add	r7, sp, #0
    a486:	4603      	mov	r3, r0
    a488:	71fb      	strb	r3, [r7, #7]
	ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    a48a:	f107 0358 	add.w	r3, r7, #88	; 0x58
    a48e:	2200      	movs	r2, #0
    a490:	601a      	str	r2, [r3, #0]
    a492:	3304      	adds	r3, #4
    a494:	2200      	movs	r2, #0
    a496:	601a      	str	r2, [r3, #0]
    a498:	3304      	adds	r3, #4
    a49a:	2200      	movs	r2, #0
    a49c:	601a      	str	r2, [r3, #0]
    a49e:	3304      	adds	r3, #4
    a4a0:	2200      	movs	r2, #0
    a4a2:	601a      	str	r2, [r3, #0]
    a4a4:	3304      	adds	r3, #4
    a4a6:	2200      	movs	r2, #0
    a4a8:	601a      	str	r2, [r3, #0]
    a4aa:	3304      	adds	r3, #4
    a4ac:	2200      	movs	r2, #0
    a4ae:	601a      	str	r2, [r3, #0]
    a4b0:	3304      	adds	r3, #4
    a4b2:	2200      	movs	r2, #0
    a4b4:	601a      	str	r2, [r3, #0]
    a4b6:	3304      	adds	r3, #4
		.channel_index = 0,
		.timer_active = 0,
	};

	// hopping connection following
	ego_st_handler follow_handler[] = {
    a4b8:	4b26      	ldr	r3, [pc, #152]	; (a554 <ego_main+0xd4>)
    a4ba:	f107 043c 	add.w	r4, r7, #60	; 0x3c
    a4be:	461d      	mov	r5, r3
    a4c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a4c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a4c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    a4c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		nop_state,
		nop_state,
	};

	// continuous rx on a single channel
	ego_st_handler continuous_rx_handler[] = {
    a4cc:	4b22      	ldr	r3, [pc, #136]	; (a558 <ego_main+0xd8>)
    a4ce:	f107 0424 	add.w	r4, r7, #36	; 0x24
    a4d2:	461d      	mov	r5, r3
    a4d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a4d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a4d8:	e895 0003 	ldmia.w	r5, {r0, r1}
    a4dc:	e884 0003 	stmia.w	r4, {r0, r1}
		nop_state,
		nop_state,
	};

	// jamming
	ego_st_handler jam_handler[] = {
    a4e0:	4b1e      	ldr	r3, [pc, #120]	; (a55c <ego_main+0xdc>)
    a4e2:	f107 040c 	add.w	r4, r7, #12
    a4e6:	461d      	mov	r5, r3
    a4e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a4ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a4ec:	e895 0003 	ldmia.w	r5, {r0, r1}
    a4f0:	e884 0003 	stmia.w	r4, {r0, r1}
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    a4f4:	79fb      	ldrb	r3, [r7, #7]
    a4f6:	2b01      	cmp	r3, #1
    a4f8:	d007      	beq.n	a50a <ego_main+0x8a>
    a4fa:	2b02      	cmp	r3, #2
    a4fc:	d009      	beq.n	a512 <ego_main+0x92>
    a4fe:	2b00      	cmp	r3, #0
    a500:	d10b      	bne.n	a51a <ego_main+0x9a>
		case EGO_FOLLOW:
			handler = follow_handler;
    a502:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    a506:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    a508:	e00b      	b.n	a522 <ego_main+0xa2>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    a50a:	f107 0324 	add.w	r3, r7, #36	; 0x24
    a50e:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    a510:	e007      	b.n	a522 <ego_main+0xa2>
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    a512:	f107 030c 	add.w	r3, r7, #12
    a516:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    a518:	e003      	b.n	a522 <ego_main+0xa2>
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    a51a:	4b11      	ldr	r3, [pc, #68]	; (a560 <ego_main+0xe0>)
    a51c:	2200      	movs	r2, #0
    a51e:	701a      	strb	r2, [r3, #0]
    a520:	e015      	b.n	a54e <ego_main+0xce>
			return;
	}

	ego_init();
    a522:	f7ff fc61 	bl	9de8 <ego_init>

	while (1) {
		if (requested_mode != MODE_EGO)
    a526:	4b0e      	ldr	r3, [pc, #56]	; (a560 <ego_main+0xe0>)
    a528:	781b      	ldrb	r3, [r3, #0]
    a52a:	b2db      	uxtb	r3, r3
    a52c:	2b0d      	cmp	r3, #13
    a52e:	d003      	beq.n	a538 <ego_main+0xb8>
			break;
    a530:	bf00      	nop
		handler[state.state](&state);
	}

	ego_deinit();
    a532:	f7ff fc65 	bl	9e00 <ego_deinit>
    a536:	e00a      	b.n	a54e <ego_main+0xce>
	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
			break;
		handler[state.state](&state);
    a538:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    a53c:	009b      	lsls	r3, r3, #2
    a53e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    a540:	4413      	add	r3, r2
    a542:	681b      	ldr	r3, [r3, #0]
    a544:	f107 0258 	add.w	r2, r7, #88	; 0x58
    a548:	4610      	mov	r0, r2
    a54a:	4798      	blx	r3
	}
    a54c:	e7eb      	b.n	a526 <ego_main+0xa6>

	ego_deinit();
}
    a54e:	3778      	adds	r7, #120	; 0x78
    a550:	46bd      	mov	sp, r7
    a552:	bdb0      	pop	{r4, r5, r7, pc}
    a554:	0000d0b8 	.word	0x0000d0b8
    a558:	0000d0d4 	.word	0x0000d0d4
    a55c:	0000d0ec 	.word	0x0000d0ec
    a560:	10000a3f 	.word	0x10000a3f

0000a564 <USB_IRQHandler>:
	
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
    a564:	b580      	push	{r7, lr}
    a566:	af00      	add	r7, sp, #0
	USBHwISR();
    a568:	f000 ffb6 	bl	b4d8 <USBHwISR>
}
    a56c:	bd80      	pop	{r7, pc}
    a56e:	bf00      	nop

0000a570 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    a570:	b580      	push	{r7, lr}
    a572:	b082      	sub	sp, #8
    a574:	af00      	add	r7, sp, #0
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
    a576:	4b12      	ldr	r3, [pc, #72]	; (a5c0 <Reset_Handler+0x50>)
    a578:	607b      	str	r3, [r7, #4]
	for(dest = &_data; dest < &_edata; )
    a57a:	4b12      	ldr	r3, [pc, #72]	; (a5c4 <Reset_Handler+0x54>)
    a57c:	603b      	str	r3, [r7, #0]
    a57e:	e007      	b.n	a590 <Reset_Handler+0x20>
	{
		*dest++ = *src++;
    a580:	683b      	ldr	r3, [r7, #0]
    a582:	1d1a      	adds	r2, r3, #4
    a584:	603a      	str	r2, [r7, #0]
    a586:	687a      	ldr	r2, [r7, #4]
    a588:	1d11      	adds	r1, r2, #4
    a58a:	6079      	str	r1, [r7, #4]
    a58c:	6812      	ldr	r2, [r2, #0]
    a58e:	601a      	str	r2, [r3, #0]
{
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    a590:	683b      	ldr	r3, [r7, #0]
    a592:	4a0d      	ldr	r2, [pc, #52]	; (a5c8 <Reset_Handler+0x58>)
    a594:	4293      	cmp	r3, r2
    a596:	d3f3      	bcc.n	a580 <Reset_Handler+0x10>
	{
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
    a598:	4b0c      	ldr	r3, [pc, #48]	; (a5cc <Reset_Handler+0x5c>)
    a59a:	607b      	str	r3, [r7, #4]
	while (src < &_ebss)
    a59c:	e004      	b.n	a5a8 <Reset_Handler+0x38>
	{
		*src++ = 0;
    a59e:	687b      	ldr	r3, [r7, #4]
    a5a0:	1d1a      	adds	r2, r3, #4
    a5a2:	607a      	str	r2, [r7, #4]
    a5a4:	2200      	movs	r2, #0
    a5a6:	601a      	str	r2, [r3, #0]
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    a5a8:	687b      	ldr	r3, [r7, #4]
    a5aa:	4a09      	ldr	r2, [pc, #36]	; (a5d0 <Reset_Handler+0x60>)
    a5ac:	4293      	cmp	r3, r2
    a5ae:	d3f6      	bcc.n	a59e <Reset_Handler+0x2e>
	{
		*src++ = 0;
	}

    __libc_init_array();
    a5b0:	f7f9 fdba 	bl	4128 <__libc_init_array>
    
    // Set the vector table location.
    SCB_VTOR = &_interrupt_vector_table;
    a5b4:	4b07      	ldr	r3, [pc, #28]	; (a5d4 <Reset_Handler+0x64>)
    a5b6:	4a08      	ldr	r2, [pc, #32]	; (a5d8 <Reset_Handler+0x68>)
    a5b8:	601a      	str	r2, [r3, #0]
    
	main();
    a5ba:	f7fe fb93 	bl	8ce4 <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    a5be:	e7fe      	b.n	a5be <Reset_Handler+0x4e>
    a5c0:	0000d150 	.word	0x0000d150
    a5c4:	10000020 	.word	0x10000020
    a5c8:	1000095e 	.word	0x1000095e
    a5cc:	10000960 	.word	0x10000960
    a5d0:	10003290 	.word	0x10003290
    a5d4:	e000ed08 	.word	0xe000ed08
    a5d8:	00004000 	.word	0x00004000

0000a5dc <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    a5dc:	b480      	push	{r7}
    a5de:	af00      	add	r7, sp, #0
    a5e0:	e7fe      	b.n	a5e0 <ADC_IRQHandler+0x4>
    a5e2:	bf00      	nop

0000a5e4 <wait>:
 */

#include "ubertooth.h"
/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
    a5e4:	b580      	push	{r7, lr}
    a5e6:	b082      	sub	sp, #8
    a5e8:	af00      	add	r7, sp, #0
    a5ea:	4603      	mov	r3, r0
    a5ec:	71fb      	strb	r3, [r7, #7]
	wait_us(seconds * 1000000);
    a5ee:	79fb      	ldrb	r3, [r7, #7]
    a5f0:	4a04      	ldr	r2, [pc, #16]	; (a604 <wait+0x20>)
    a5f2:	fb02 f303 	mul.w	r3, r2, r3
    a5f6:	4618      	mov	r0, r3
    a5f8:	f000 f818 	bl	a62c <wait_us>
}
    a5fc:	3708      	adds	r7, #8
    a5fe:	46bd      	mov	sp, r7
    a600:	bd80      	pop	{r7, pc}
    a602:	bf00      	nop
    a604:	000f4240 	.word	0x000f4240

0000a608 <rbit>:
{
	wait_us(ms * 1000);
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
    a608:	b480      	push	{r7}
    a60a:	b085      	sub	sp, #20
    a60c:	af00      	add	r7, sp, #0
    a60e:	6078      	str	r0, [r7, #4]
  u32 result = 0;
    a610:	2300      	movs	r3, #0
    a612:	60fb      	str	r3, [r7, #12]
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    a614:	687b      	ldr	r3, [r7, #4]
    a616:	fa93 f3a3 	rbit	r3, r3
    a61a:	60fb      	str	r3, [r7, #12]
  return result;
    a61c:	68fb      	ldr	r3, [r7, #12]
}
    a61e:	4618      	mov	r0, r3
    a620:	3714      	adds	r7, #20
    a622:	46bd      	mov	sp, r7
    a624:	f85d 7b04 	ldr.w	r7, [sp], #4
    a628:	4770      	bx	lr
    a62a:	bf00      	nop

0000a62c <wait_us>:

/* delay a number of microseconds while on internal oscillator (4 MHz) */
/* we only have a resolution of 1000/400, so to the nearest 2.5        */
static volatile u32 wait_us_counter;
void wait_us(u32 us)
{
    a62c:	b480      	push	{r7}
    a62e:	b083      	sub	sp, #12
    a630:	af00      	add	r7, sp, #0
    a632:	6078      	str	r0, [r7, #4]
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    a634:	687b      	ldr	r3, [r7, #4]
    a636:	089a      	lsrs	r2, r3, #2
    a638:	687b      	ldr	r3, [r7, #4]
    a63a:	08db      	lsrs	r3, r3, #3
    a63c:	441a      	add	r2, r3
    a63e:	687b      	ldr	r3, [r7, #4]
    a640:	099b      	lsrs	r3, r3, #6
    a642:	441a      	add	r2, r3
    a644:	687b      	ldr	r3, [r7, #4]
    a646:	09db      	lsrs	r3, r3, #7
    a648:	441a      	add	r2, r3
    a64a:	687b      	ldr	r3, [r7, #4]
    a64c:	0a9b      	lsrs	r3, r3, #10
    a64e:	441a      	add	r2, r3
    a650:	687b      	ldr	r3, [r7, #4]
    a652:	0adb      	lsrs	r3, r3, #11
    a654:	4413      	add	r3, r2
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    a656:	4a07      	ldr	r2, [pc, #28]	; (a674 <wait_us+0x48>)
    a658:	6013      	str	r3, [r2, #0]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    a65a:	bf00      	nop
    a65c:	4b05      	ldr	r3, [pc, #20]	; (a674 <wait_us+0x48>)
    a65e:	681b      	ldr	r3, [r3, #0]
    a660:	3b01      	subs	r3, #1
    a662:	4a04      	ldr	r2, [pc, #16]	; (a674 <wait_us+0x48>)
    a664:	6013      	str	r3, [r2, #0]
    a666:	2b00      	cmp	r3, #0
    a668:	d1f8      	bne.n	a65c <wait_us+0x30>
}
    a66a:	370c      	adds	r7, #12
    a66c:	46bd      	mov	sp, r7
    a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a672:	4770      	bx	lr
    a674:	10000a68 	.word	0x10000a68

0000a678 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    a678:	b580      	push	{r7, lr}
    a67a:	af00      	add	r7, sp, #0
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    a67c:	f000 f836 	bl	a6ec <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    a680:	4b10      	ldr	r3, [pc, #64]	; (a6c4 <gpio_init+0x4c>)
    a682:	2200      	movs	r2, #0
    a684:	601a      	str	r2, [r3, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    a686:	4b10      	ldr	r3, [pc, #64]	; (a6c8 <gpio_init+0x50>)
    a688:	f24c 7212 	movw	r2, #50962	; 0xc712
    a68c:	601a      	str	r2, [r3, #0]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    a68e:	4b0f      	ldr	r3, [pc, #60]	; (a6cc <gpio_init+0x54>)
    a690:	f240 12b1 	movw	r2, #433	; 0x1b1
    a694:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    a696:	4b0e      	ldr	r3, [pc, #56]	; (a6d0 <gpio_init+0x58>)
    a698:	2200      	movs	r2, #0
    a69a:	601a      	str	r2, [r3, #0]
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    a69c:	4b0d      	ldr	r3, [pc, #52]	; (a6d4 <gpio_init+0x5c>)
    a69e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    a6a2:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    a6a4:	4b0c      	ldr	r3, [pc, #48]	; (a6d8 <gpio_init+0x60>)
    a6a6:	2200      	movs	r2, #0
    a6a8:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    a6aa:	4b0c      	ldr	r3, [pc, #48]	; (a6dc <gpio_init+0x64>)
    a6ac:	2200      	movs	r2, #0
    a6ae:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    a6b0:	4b0b      	ldr	r3, [pc, #44]	; (a6e0 <gpio_init+0x68>)
    a6b2:	2200      	movs	r2, #0
    a6b4:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    a6b6:	4b0b      	ldr	r3, [pc, #44]	; (a6e4 <gpio_init+0x6c>)
    a6b8:	2200      	movs	r2, #0
    a6ba:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    a6bc:	4b0a      	ldr	r3, [pc, #40]	; (a6e8 <gpio_init+0x70>)
    a6be:	2200      	movs	r2, #0
    a6c0:	601a      	str	r2, [r3, #0]

#ifdef TC13BADGE
	/* R8C_CTL is active low */
	R8C_CTL_SET;
#endif
}
    a6c2:	bd80      	pop	{r7, pc}
    a6c4:	2009c000 	.word	0x2009c000
    a6c8:	2009c020 	.word	0x2009c020
    a6cc:	2009c040 	.word	0x2009c040
    a6d0:	2009c060 	.word	0x2009c060
    a6d4:	2009c080 	.word	0x2009c080
    a6d8:	2009c014 	.word	0x2009c014
    a6dc:	2009c034 	.word	0x2009c034
    a6e0:	2009c054 	.word	0x2009c054
    a6e4:	2009c074 	.word	0x2009c074
    a6e8:	2009c094 	.word	0x2009c094

0000a6ec <all_pins_off>:

void all_pins_off(void)
{
    a6ec:	b480      	push	{r7}
    a6ee:	af00      	add	r7, sp, #0
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    a6f0:	4b27      	ldr	r3, [pc, #156]	; (a790 <all_pins_off+0xa4>)
    a6f2:	2200      	movs	r2, #0
    a6f4:	601a      	str	r2, [r3, #0]
	PINSEL1 = 0;
    a6f6:	4b27      	ldr	r3, [pc, #156]	; (a794 <all_pins_off+0xa8>)
    a6f8:	2200      	movs	r2, #0
    a6fa:	601a      	str	r2, [r3, #0]
	PINSEL2 = 0;
    a6fc:	4b26      	ldr	r3, [pc, #152]	; (a798 <all_pins_off+0xac>)
    a6fe:	2200      	movs	r2, #0
    a700:	601a      	str	r2, [r3, #0]
	PINSEL3 = 0;
    a702:	4b26      	ldr	r3, [pc, #152]	; (a79c <all_pins_off+0xb0>)
    a704:	2200      	movs	r2, #0
    a706:	601a      	str	r2, [r3, #0]
	PINSEL4 = 0;
    a708:	4b25      	ldr	r3, [pc, #148]	; (a7a0 <all_pins_off+0xb4>)
    a70a:	2200      	movs	r2, #0
    a70c:	601a      	str	r2, [r3, #0]
	PINSEL7 = 0;
    a70e:	4b25      	ldr	r3, [pc, #148]	; (a7a4 <all_pins_off+0xb8>)
    a710:	2200      	movs	r2, #0
    a712:	601a      	str	r2, [r3, #0]
	PINSEL9 = 0;
    a714:	4b24      	ldr	r3, [pc, #144]	; (a7a8 <all_pins_off+0xbc>)
    a716:	2200      	movs	r2, #0
    a718:	601a      	str	r2, [r3, #0]
	PINSEL10 = 0;
    a71a:	4b24      	ldr	r3, [pc, #144]	; (a7ac <all_pins_off+0xc0>)
    a71c:	2200      	movs	r2, #0
    a71e:	601a      	str	r2, [r3, #0]

	/* configure all pins as inputs */
	FIO0DIR = 0;
    a720:	4b23      	ldr	r3, [pc, #140]	; (a7b0 <all_pins_off+0xc4>)
    a722:	2200      	movs	r2, #0
    a724:	601a      	str	r2, [r3, #0]
	FIO1DIR = 0;
    a726:	4b23      	ldr	r3, [pc, #140]	; (a7b4 <all_pins_off+0xc8>)
    a728:	2200      	movs	r2, #0
    a72a:	601a      	str	r2, [r3, #0]
	FIO2DIR = 0;
    a72c:	4b22      	ldr	r3, [pc, #136]	; (a7b8 <all_pins_off+0xcc>)
    a72e:	2200      	movs	r2, #0
    a730:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    a732:	4b22      	ldr	r3, [pc, #136]	; (a7bc <all_pins_off+0xd0>)
    a734:	2200      	movs	r2, #0
    a736:	601a      	str	r2, [r3, #0]
	FIO4DIR = 0;
    a738:	4b21      	ldr	r3, [pc, #132]	; (a7c0 <all_pins_off+0xd4>)
    a73a:	2200      	movs	r2, #0
    a73c:	601a      	str	r2, [r3, #0]

	/* pull-up on every pin */
	PINMODE0 = 0;
    a73e:	4b21      	ldr	r3, [pc, #132]	; (a7c4 <all_pins_off+0xd8>)
    a740:	2200      	movs	r2, #0
    a742:	601a      	str	r2, [r3, #0]
	PINMODE1 = 0;
    a744:	4b20      	ldr	r3, [pc, #128]	; (a7c8 <all_pins_off+0xdc>)
    a746:	2200      	movs	r2, #0
    a748:	601a      	str	r2, [r3, #0]
	PINMODE2 = 0;
    a74a:	4b20      	ldr	r3, [pc, #128]	; (a7cc <all_pins_off+0xe0>)
    a74c:	2200      	movs	r2, #0
    a74e:	601a      	str	r2, [r3, #0]
	PINMODE3 = 0;
    a750:	4b1f      	ldr	r3, [pc, #124]	; (a7d0 <all_pins_off+0xe4>)
    a752:	2200      	movs	r2, #0
    a754:	601a      	str	r2, [r3, #0]
	PINMODE4 = 0;
    a756:	4b1f      	ldr	r3, [pc, #124]	; (a7d4 <all_pins_off+0xe8>)
    a758:	2200      	movs	r2, #0
    a75a:	601a      	str	r2, [r3, #0]
	PINMODE7 = 0;
    a75c:	4b1e      	ldr	r3, [pc, #120]	; (a7d8 <all_pins_off+0xec>)
    a75e:	2200      	movs	r2, #0
    a760:	601a      	str	r2, [r3, #0]
	PINMODE9 = 0;
    a762:	4b1e      	ldr	r3, [pc, #120]	; (a7dc <all_pins_off+0xf0>)
    a764:	2200      	movs	r2, #0
    a766:	601a      	str	r2, [r3, #0]

	/* set all outputs low */
	FIO0PIN = 0;
    a768:	4b1d      	ldr	r3, [pc, #116]	; (a7e0 <all_pins_off+0xf4>)
    a76a:	2200      	movs	r2, #0
    a76c:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    a76e:	4b1d      	ldr	r3, [pc, #116]	; (a7e4 <all_pins_off+0xf8>)
    a770:	2200      	movs	r2, #0
    a772:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    a774:	4b1c      	ldr	r3, [pc, #112]	; (a7e8 <all_pins_off+0xfc>)
    a776:	2200      	movs	r2, #0
    a778:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    a77a:	4b1c      	ldr	r3, [pc, #112]	; (a7ec <all_pins_off+0x100>)
    a77c:	2200      	movs	r2, #0
    a77e:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    a780:	4b1b      	ldr	r3, [pc, #108]	; (a7f0 <all_pins_off+0x104>)
    a782:	2200      	movs	r2, #0
    a784:	601a      	str	r2, [r3, #0]
}
    a786:	46bd      	mov	sp, r7
    a788:	f85d 7b04 	ldr.w	r7, [sp], #4
    a78c:	4770      	bx	lr
    a78e:	bf00      	nop
    a790:	4002c000 	.word	0x4002c000
    a794:	4002c004 	.word	0x4002c004
    a798:	4002c008 	.word	0x4002c008
    a79c:	4002c00c 	.word	0x4002c00c
    a7a0:	4002c010 	.word	0x4002c010
    a7a4:	4002c01c 	.word	0x4002c01c
    a7a8:	4002c024 	.word	0x4002c024
    a7ac:	4002c028 	.word	0x4002c028
    a7b0:	2009c000 	.word	0x2009c000
    a7b4:	2009c020 	.word	0x2009c020
    a7b8:	2009c040 	.word	0x2009c040
    a7bc:	2009c060 	.word	0x2009c060
    a7c0:	2009c080 	.word	0x2009c080
    a7c4:	4002c040 	.word	0x4002c040
    a7c8:	4002c044 	.word	0x4002c044
    a7cc:	4002c048 	.word	0x4002c048
    a7d0:	4002c04c 	.word	0x4002c04c
    a7d4:	4002c050 	.word	0x4002c050
    a7d8:	4002c05c 	.word	0x4002c05c
    a7dc:	4002c064 	.word	0x4002c064
    a7e0:	2009c014 	.word	0x2009c014
    a7e4:	2009c034 	.word	0x2009c034
    a7e8:	2009c054 	.word	0x2009c054
    a7ec:	2009c074 	.word	0x2009c074
    a7f0:	2009c094 	.word	0x2009c094

0000a7f4 <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    a7f4:	b580      	push	{r7, lr}
    a7f6:	af00      	add	r7, sp, #0
	gpio_init();
    a7f8:	f7ff ff3e 	bl	a678 <gpio_init>
	cc2400_init();
    a7fc:	f000 f860 	bl	a8c0 <cc2400_init>
	clock_start();
    a800:	f000 f9c2 	bl	ab88 <clock_start>
}
    a804:	bd80      	pop	{r7, pc}
    a806:	bf00      	nop

0000a808 <dio_ssp_init>:

/* configure SSP for CC2400's secondary serial data interface */
void dio_ssp_init()
{
    a808:	b480      	push	{r7}
    a80a:	af00      	add	r7, sp, #0
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    a80c:	4a16      	ldr	r2, [pc, #88]	; (a868 <dio_ssp_init+0x60>)
    a80e:	4b16      	ldr	r3, [pc, #88]	; (a868 <dio_ssp_init+0x60>)
    a810:	681b      	ldr	r3, [r3, #0]
    a812:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    a816:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    a81a:	6013      	str	r3, [r2, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    a81c:	4a12      	ldr	r2, [pc, #72]	; (a868 <dio_ssp_init+0x60>)
    a81e:	4b12      	ldr	r3, [pc, #72]	; (a868 <dio_ssp_init+0x60>)
    a820:	681b      	ldr	r3, [r3, #0]
    a822:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    a826:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    a82a:	6013      	str	r3, [r2, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    a82c:	4a0e      	ldr	r2, [pc, #56]	; (a868 <dio_ssp_init+0x60>)
    a82e:	4b0e      	ldr	r3, [pc, #56]	; (a868 <dio_ssp_init+0x60>)
    a830:	681b      	ldr	r3, [r3, #0]
    a832:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    a836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a83a:	6013      	str	r3, [r2, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    a83c:	4a0a      	ldr	r2, [pc, #40]	; (a868 <dio_ssp_init+0x60>)
    a83e:	4b0a      	ldr	r3, [pc, #40]	; (a868 <dio_ssp_init+0x60>)
    a840:	681b      	ldr	r3, [r3, #0]
    a842:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    a846:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    a84a:	6013      	str	r3, [r2, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    a84c:	4b07      	ldr	r3, [pc, #28]	; (a86c <dio_ssp_init+0x64>)
    a84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a852:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    a854:	4b06      	ldr	r3, [pc, #24]	; (a870 <dio_ssp_init+0x68>)
    a856:	22c7      	movs	r2, #199	; 0xc7
    a858:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    a85a:	4b06      	ldr	r3, [pc, #24]	; (a874 <dio_ssp_init+0x6c>)
    a85c:	220c      	movs	r2, #12
    a85e:	601a      	str	r2, [r3, #0]
}
    a860:	46bd      	mov	sp, r7
    a862:	f85d 7b04 	ldr.w	r7, [sp], #4
    a866:	4770      	bx	lr
    a868:	4002c000 	.word	0x4002c000
    a86c:	2009c098 	.word	0x2009c098
    a870:	40030000 	.word	0x40030000
    a874:	40030004 	.word	0x40030004

0000a878 <atest_init>:

void atest_init()
{
    a878:	b480      	push	{r7}
    a87a:	af00      	add	r7, sp, #0
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    a87c:	4a0d      	ldr	r2, [pc, #52]	; (a8b4 <atest_init+0x3c>)
    a87e:	4b0d      	ldr	r3, [pc, #52]	; (a8b4 <atest_init+0x3c>)
    a880:	681b      	ldr	r3, [r3, #0]
    a882:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    a886:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    a888:	4a0b      	ldr	r2, [pc, #44]	; (a8b8 <atest_init+0x40>)
    a88a:	4b0b      	ldr	r3, [pc, #44]	; (a8b8 <atest_init+0x40>)
    a88c:	681b      	ldr	r3, [r3, #0]
    a88e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    a892:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    a894:	4a09      	ldr	r2, [pc, #36]	; (a8bc <atest_init+0x44>)
    a896:	4b09      	ldr	r3, [pc, #36]	; (a8bc <atest_init+0x44>)
    a898:	681b      	ldr	r3, [r3, #0]
    a89a:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
    a89e:	6013      	str	r3, [r2, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    a8a0:	4a06      	ldr	r2, [pc, #24]	; (a8bc <atest_init+0x44>)
    a8a2:	4b06      	ldr	r3, [pc, #24]	; (a8bc <atest_init+0x44>)
    a8a4:	681b      	ldr	r3, [r3, #0]
    a8a6:	f423 13a0 	bic.w	r3, r3, #1310720	; 0x140000
    a8aa:	6013      	str	r3, [r2, #0]
}
    a8ac:	46bd      	mov	sp, r7
    a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8b2:	4770      	bx	lr
    a8b4:	4002c004 	.word	0x4002c004
    a8b8:	2009c000 	.word	0x2009c000
    a8bc:	4002c044 	.word	0x4002c044

0000a8c0 <cc2400_init>:

void cc2400_init()
{
    a8c0:	b580      	push	{r7, lr}
    a8c2:	af00      	add	r7, sp, #0
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    a8c4:	f7ff ffd8 	bl	a878 <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    a8c8:	4b09      	ldr	r3, [pc, #36]	; (a8f0 <cc2400_init+0x30>)
    a8ca:	f44f 7200 	mov.w	r2, #512	; 0x200
    a8ce:	601a      	str	r2, [r3, #0]
	wait_us(50);
    a8d0:	2032      	movs	r0, #50	; 0x32
    a8d2:	f7ff feab 	bl	a62c <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    a8d6:	4b07      	ldr	r3, [pc, #28]	; (a8f4 <cc2400_init+0x34>)
    a8d8:	2220      	movs	r2, #32
    a8da:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    a8dc:	4b04      	ldr	r3, [pc, #16]	; (a8f0 <cc2400_init+0x30>)
    a8de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a8e2:	601a      	str	r2, [r3, #0]

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
    a8e4:	200d      	movs	r0, #13
    a8e6:	f647 71ff 	movw	r1, #32767	; 0x7fff
    a8ea:	f000 f85f 	bl	a9ac <cc2400_set>
}
    a8ee:	bd80      	pop	{r7, pc}
    a8f0:	2009c038 	.word	0x2009c038
    a8f4:	2009c058 	.word	0x2009c058

0000a8f8 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    a8f8:	b480      	push	{r7}
    a8fa:	b085      	sub	sp, #20
    a8fc:	af00      	add	r7, sp, #0
    a8fe:	4603      	mov	r3, r0
    a900:	6039      	str	r1, [r7, #0]
    a902:	71fb      	strb	r3, [r7, #7]
	u32 msb = 1 << (len - 1);
    a904:	79fb      	ldrb	r3, [r7, #7]
    a906:	3b01      	subs	r3, #1
    a908:	2201      	movs	r2, #1
    a90a:	fa02 f303 	lsl.w	r3, r2, r3
    a90e:	60fb      	str	r3, [r7, #12]

	/* start transaction by dropping CSN */
	CSN_CLR;
    a910:	4b18      	ldr	r3, [pc, #96]	; (a974 <cc2400_spi+0x7c>)
    a912:	2220      	movs	r2, #32
    a914:	601a      	str	r2, [r3, #0]

	while (len--) {
    a916:	e01e      	b.n	a956 <cc2400_spi+0x5e>
		if (data & msb)
    a918:	683a      	ldr	r2, [r7, #0]
    a91a:	68fb      	ldr	r3, [r7, #12]
    a91c:	4013      	ands	r3, r2
    a91e:	2b00      	cmp	r3, #0
    a920:	d003      	beq.n	a92a <cc2400_spi+0x32>
			MOSI_SET;
    a922:	4b15      	ldr	r3, [pc, #84]	; (a978 <cc2400_spi+0x80>)
    a924:	2201      	movs	r2, #1
    a926:	601a      	str	r2, [r3, #0]
    a928:	e002      	b.n	a930 <cc2400_spi+0x38>
		else
			MOSI_CLR;
    a92a:	4b12      	ldr	r3, [pc, #72]	; (a974 <cc2400_spi+0x7c>)
    a92c:	2201      	movs	r2, #1
    a92e:	601a      	str	r2, [r3, #0]
		data <<= 1;
    a930:	683b      	ldr	r3, [r7, #0]
    a932:	005b      	lsls	r3, r3, #1
    a934:	603b      	str	r3, [r7, #0]

		SCLK_SET;
    a936:	4b10      	ldr	r3, [pc, #64]	; (a978 <cc2400_spi+0x80>)
    a938:	2210      	movs	r2, #16
    a93a:	601a      	str	r2, [r3, #0]
		if (MISO)
    a93c:	4b0f      	ldr	r3, [pc, #60]	; (a97c <cc2400_spi+0x84>)
    a93e:	681b      	ldr	r3, [r3, #0]
    a940:	f003 0302 	and.w	r3, r3, #2
    a944:	2b00      	cmp	r3, #0
    a946:	d003      	beq.n	a950 <cc2400_spi+0x58>
			data |= 1;
    a948:	683b      	ldr	r3, [r7, #0]
    a94a:	f043 0301 	orr.w	r3, r3, #1
    a94e:	603b      	str	r3, [r7, #0]

		SCLK_CLR;
    a950:	4b08      	ldr	r3, [pc, #32]	; (a974 <cc2400_spi+0x7c>)
    a952:	2210      	movs	r2, #16
    a954:	601a      	str	r2, [r3, #0]
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    a956:	79fb      	ldrb	r3, [r7, #7]
    a958:	1e5a      	subs	r2, r3, #1
    a95a:	71fa      	strb	r2, [r7, #7]
    a95c:	2b00      	cmp	r3, #0
    a95e:	d1db      	bne.n	a918 <cc2400_spi+0x20>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    a960:	4b05      	ldr	r3, [pc, #20]	; (a978 <cc2400_spi+0x80>)
    a962:	2220      	movs	r2, #32
    a964:	601a      	str	r2, [r3, #0]

	return data;
    a966:	683b      	ldr	r3, [r7, #0]
}
    a968:	4618      	mov	r0, r3
    a96a:	3714      	adds	r7, #20
    a96c:	46bd      	mov	sp, r7
    a96e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a972:	4770      	bx	lr
    a974:	2009c05c 	.word	0x2009c05c
    a978:	2009c058 	.word	0x2009c058
    a97c:	2009c054 	.word	0x2009c054

0000a980 <cc2400_get>:

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    a980:	b580      	push	{r7, lr}
    a982:	b084      	sub	sp, #16
    a984:	af00      	add	r7, sp, #0
    a986:	4603      	mov	r3, r0
    a988:	71fb      	strb	r3, [r7, #7]
	u32 in;

	u32 out = (reg | 0x80) << 16;
    a98a:	79fb      	ldrb	r3, [r7, #7]
    a98c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a990:	b2db      	uxtb	r3, r3
    a992:	041b      	lsls	r3, r3, #16
    a994:	60fb      	str	r3, [r7, #12]
	in = cc2400_spi(24, out);
    a996:	2018      	movs	r0, #24
    a998:	68f9      	ldr	r1, [r7, #12]
    a99a:	f7ff ffad 	bl	a8f8 <cc2400_spi>
    a99e:	60b8      	str	r0, [r7, #8]
	return in & 0xFFFF;
    a9a0:	68bb      	ldr	r3, [r7, #8]
    a9a2:	b29b      	uxth	r3, r3
}
    a9a4:	4618      	mov	r0, r3
    a9a6:	3710      	adds	r7, #16
    a9a8:	46bd      	mov	sp, r7
    a9aa:	bd80      	pop	{r7, pc}

0000a9ac <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
    a9ac:	b580      	push	{r7, lr}
    a9ae:	b084      	sub	sp, #16
    a9b0:	af00      	add	r7, sp, #0
    a9b2:	4603      	mov	r3, r0
    a9b4:	460a      	mov	r2, r1
    a9b6:	71fb      	strb	r3, [r7, #7]
    a9b8:	4613      	mov	r3, r2
    a9ba:	80bb      	strh	r3, [r7, #4]
	u32 out = (reg << 16) | val;
    a9bc:	79fb      	ldrb	r3, [r7, #7]
    a9be:	041a      	lsls	r2, r3, #16
    a9c0:	88bb      	ldrh	r3, [r7, #4]
    a9c2:	4313      	orrs	r3, r2
    a9c4:	60fb      	str	r3, [r7, #12]
	cc2400_spi(24, out);
    a9c6:	2018      	movs	r0, #24
    a9c8:	68f9      	ldr	r1, [r7, #12]
    a9ca:	f7ff ff95 	bl	a8f8 <cc2400_spi>
}
    a9ce:	3710      	adds	r7, #16
    a9d0:	46bd      	mov	sp, r7
    a9d2:	bd80      	pop	{r7, pc}

0000a9d4 <cc2400_get8>:

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    a9d4:	b580      	push	{r7, lr}
    a9d6:	b084      	sub	sp, #16
    a9d8:	af00      	add	r7, sp, #0
    a9da:	4603      	mov	r3, r0
    a9dc:	71fb      	strb	r3, [r7, #7]
	u16 in;

	u16 out = (reg | 0x80) << 8;
    a9de:	79fb      	ldrb	r3, [r7, #7]
    a9e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a9e4:	b2db      	uxtb	r3, r3
    a9e6:	b29b      	uxth	r3, r3
    a9e8:	021b      	lsls	r3, r3, #8
    a9ea:	81fb      	strh	r3, [r7, #14]
	in = cc2400_spi(16, out);
    a9ec:	89fb      	ldrh	r3, [r7, #14]
    a9ee:	2010      	movs	r0, #16
    a9f0:	4619      	mov	r1, r3
    a9f2:	f7ff ff81 	bl	a8f8 <cc2400_spi>
    a9f6:	4603      	mov	r3, r0
    a9f8:	81bb      	strh	r3, [r7, #12]
	return in & 0xFF;
    a9fa:	89bb      	ldrh	r3, [r7, #12]
    a9fc:	b2db      	uxtb	r3, r3
}
    a9fe:	4618      	mov	r0, r3
    aa00:	3710      	adds	r7, #16
    aa02:	46bd      	mov	sp, r7
    aa04:	bd80      	pop	{r7, pc}
    aa06:	bf00      	nop

0000aa08 <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
    aa08:	b580      	push	{r7, lr}
    aa0a:	b084      	sub	sp, #16
    aa0c:	af00      	add	r7, sp, #0
    aa0e:	4603      	mov	r3, r0
    aa10:	460a      	mov	r2, r1
    aa12:	71fb      	strb	r3, [r7, #7]
    aa14:	4613      	mov	r3, r2
    aa16:	71bb      	strb	r3, [r7, #6]
	u32 out = (reg << 8) | val;
    aa18:	79fb      	ldrb	r3, [r7, #7]
    aa1a:	021a      	lsls	r2, r3, #8
    aa1c:	79bb      	ldrb	r3, [r7, #6]
    aa1e:	4313      	orrs	r3, r2
    aa20:	60fb      	str	r3, [r7, #12]
	cc2400_spi(16, out);
    aa22:	2010      	movs	r0, #16
    aa24:	68f9      	ldr	r1, [r7, #12]
    aa26:	f7ff ff67 	bl	a8f8 <cc2400_spi>
}
    aa2a:	3710      	adds	r7, #16
    aa2c:	46bd      	mov	sp, r7
    aa2e:	bd80      	pop	{r7, pc}

0000aa30 <cc2400_spi_buf>:

/* write multiple bytes to SPI */
void cc2400_spi_buf(u8 reg, u8 len, u8 *data)
{
    aa30:	b480      	push	{r7}
    aa32:	b085      	sub	sp, #20
    aa34:	af00      	add	r7, sp, #0
    aa36:	4603      	mov	r3, r0
    aa38:	603a      	str	r2, [r7, #0]
    aa3a:	71fb      	strb	r3, [r7, #7]
    aa3c:	460b      	mov	r3, r1
    aa3e:	71bb      	strb	r3, [r7, #6]
	u8 msb = 1 << 7;
    aa40:	2380      	movs	r3, #128	; 0x80
    aa42:	733b      	strb	r3, [r7, #12]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    aa44:	4b33      	ldr	r3, [pc, #204]	; (ab14 <cc2400_spi_buf+0xe4>)
    aa46:	2220      	movs	r2, #32
    aa48:	601a      	str	r2, [r3, #0]

	for (i = 0; i < 8; ++i) {
    aa4a:	2300      	movs	r3, #0
    aa4c:	73fb      	strb	r3, [r7, #15]
    aa4e:	e018      	b.n	aa82 <cc2400_spi_buf+0x52>
		if (reg & msb)
    aa50:	79fa      	ldrb	r2, [r7, #7]
    aa52:	7b3b      	ldrb	r3, [r7, #12]
    aa54:	4013      	ands	r3, r2
    aa56:	b2db      	uxtb	r3, r3
    aa58:	2b00      	cmp	r3, #0
    aa5a:	d003      	beq.n	aa64 <cc2400_spi_buf+0x34>
			MOSI_SET;
    aa5c:	4b2e      	ldr	r3, [pc, #184]	; (ab18 <cc2400_spi_buf+0xe8>)
    aa5e:	2201      	movs	r2, #1
    aa60:	601a      	str	r2, [r3, #0]
    aa62:	e002      	b.n	aa6a <cc2400_spi_buf+0x3a>
		else
			MOSI_CLR;
    aa64:	4b2b      	ldr	r3, [pc, #172]	; (ab14 <cc2400_spi_buf+0xe4>)
    aa66:	2201      	movs	r2, #1
    aa68:	601a      	str	r2, [r3, #0]
		reg <<= 1;
    aa6a:	79fb      	ldrb	r3, [r7, #7]
    aa6c:	005b      	lsls	r3, r3, #1
    aa6e:	71fb      	strb	r3, [r7, #7]
		SCLK_SET;
    aa70:	4b29      	ldr	r3, [pc, #164]	; (ab18 <cc2400_spi_buf+0xe8>)
    aa72:	2210      	movs	r2, #16
    aa74:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    aa76:	4b27      	ldr	r3, [pc, #156]	; (ab14 <cc2400_spi_buf+0xe4>)
    aa78:	2210      	movs	r2, #16
    aa7a:	601a      	str	r2, [r3, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    aa7c:	7bfb      	ldrb	r3, [r7, #15]
    aa7e:	3301      	adds	r3, #1
    aa80:	73fb      	strb	r3, [r7, #15]
    aa82:	7bfb      	ldrb	r3, [r7, #15]
    aa84:	2b07      	cmp	r3, #7
    aa86:	d9e3      	bls.n	aa50 <cc2400_spi_buf+0x20>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    aa88:	2300      	movs	r3, #0
    aa8a:	73fb      	strb	r3, [r7, #15]
    aa8c:	e026      	b.n	aadc <cc2400_spi_buf+0xac>
		temp = data[i];
    aa8e:	7bfb      	ldrb	r3, [r7, #15]
    aa90:	683a      	ldr	r2, [r7, #0]
    aa92:	4413      	add	r3, r2
    aa94:	781b      	ldrb	r3, [r3, #0]
    aa96:	737b      	strb	r3, [r7, #13]
		for (j = 0; j < 8; ++j) {
    aa98:	2300      	movs	r3, #0
    aa9a:	73bb      	strb	r3, [r7, #14]
    aa9c:	e018      	b.n	aad0 <cc2400_spi_buf+0xa0>
			if (temp & msb)
    aa9e:	7b7a      	ldrb	r2, [r7, #13]
    aaa0:	7b3b      	ldrb	r3, [r7, #12]
    aaa2:	4013      	ands	r3, r2
    aaa4:	b2db      	uxtb	r3, r3
    aaa6:	2b00      	cmp	r3, #0
    aaa8:	d003      	beq.n	aab2 <cc2400_spi_buf+0x82>
				MOSI_SET;
    aaaa:	4b1b      	ldr	r3, [pc, #108]	; (ab18 <cc2400_spi_buf+0xe8>)
    aaac:	2201      	movs	r2, #1
    aaae:	601a      	str	r2, [r3, #0]
    aab0:	e002      	b.n	aab8 <cc2400_spi_buf+0x88>
			else
				MOSI_CLR;
    aab2:	4b18      	ldr	r3, [pc, #96]	; (ab14 <cc2400_spi_buf+0xe4>)
    aab4:	2201      	movs	r2, #1
    aab6:	601a      	str	r2, [r3, #0]
			temp <<= 1;
    aab8:	7b7b      	ldrb	r3, [r7, #13]
    aaba:	005b      	lsls	r3, r3, #1
    aabc:	737b      	strb	r3, [r7, #13]
			SCLK_SET;
    aabe:	4b16      	ldr	r3, [pc, #88]	; (ab18 <cc2400_spi_buf+0xe8>)
    aac0:	2210      	movs	r2, #16
    aac2:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
    aac4:	4b13      	ldr	r3, [pc, #76]	; (ab14 <cc2400_spi_buf+0xe4>)
    aac6:	2210      	movs	r2, #16
    aac8:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    aaca:	7bbb      	ldrb	r3, [r7, #14]
    aacc:	3301      	adds	r3, #1
    aace:	73bb      	strb	r3, [r7, #14]
    aad0:	7bbb      	ldrb	r3, [r7, #14]
    aad2:	2b07      	cmp	r3, #7
    aad4:	d9e3      	bls.n	aa9e <cc2400_spi_buf+0x6e>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    aad6:	7bfb      	ldrb	r3, [r7, #15]
    aad8:	3301      	adds	r3, #1
    aada:	73fb      	strb	r3, [r7, #15]
    aadc:	7bfa      	ldrb	r2, [r7, #15]
    aade:	79bb      	ldrb	r3, [r7, #6]
    aae0:	429a      	cmp	r2, r3
    aae2:	d3d4      	bcc.n	aa8e <cc2400_spi_buf+0x5e>
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    aae4:	2300      	movs	r3, #0
    aae6:	73fb      	strb	r3, [r7, #15]
    aae8:	e008      	b.n	aafc <cc2400_spi_buf+0xcc>
		SCLK_SET;
    aaea:	4b0b      	ldr	r3, [pc, #44]	; (ab18 <cc2400_spi_buf+0xe8>)
    aaec:	2210      	movs	r2, #16
    aaee:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    aaf0:	4b08      	ldr	r3, [pc, #32]	; (ab14 <cc2400_spi_buf+0xe4>)
    aaf2:	2210      	movs	r2, #16
    aaf4:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    aaf6:	7bfb      	ldrb	r3, [r7, #15]
    aaf8:	3301      	adds	r3, #1
    aafa:	73fb      	strb	r3, [r7, #15]
    aafc:	7bfb      	ldrb	r3, [r7, #15]
    aafe:	2b07      	cmp	r3, #7
    ab00:	d9f3      	bls.n	aaea <cc2400_spi_buf+0xba>
		SCLK_SET;
		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    ab02:	4b05      	ldr	r3, [pc, #20]	; (ab18 <cc2400_spi_buf+0xe8>)
    ab04:	2220      	movs	r2, #32
    ab06:	601a      	str	r2, [r3, #0]
}
    ab08:	3714      	adds	r7, #20
    ab0a:	46bd      	mov	sp, r7
    ab0c:	f85d 7b04 	ldr.w	r7, [sp], #4
    ab10:	4770      	bx	lr
    ab12:	bf00      	nop
    ab14:	2009c05c 	.word	0x2009c05c
    ab18:	2009c058 	.word	0x2009c058

0000ab1c <cc2400_status>:

/* get the status */
u8 cc2400_status()
{
    ab1c:	b580      	push	{r7, lr}
    ab1e:	af00      	add	r7, sp, #0
	return cc2400_spi(8, 0);
    ab20:	2008      	movs	r0, #8
    ab22:	2100      	movs	r1, #0
    ab24:	f7ff fee8 	bl	a8f8 <cc2400_spi>
    ab28:	4603      	mov	r3, r0
    ab2a:	b2db      	uxtb	r3, r3
}
    ab2c:	4618      	mov	r0, r3
    ab2e:	bd80      	pop	{r7, pc}

0000ab30 <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    ab30:	b580      	push	{r7, lr}
    ab32:	b082      	sub	sp, #8
    ab34:	af00      	add	r7, sp, #0
    ab36:	4603      	mov	r3, r0
    ab38:	71fb      	strb	r3, [r7, #7]
	return cc2400_spi(8, reg);
    ab3a:	79fb      	ldrb	r3, [r7, #7]
    ab3c:	2008      	movs	r0, #8
    ab3e:	4619      	mov	r1, r3
    ab40:	f7ff feda 	bl	a8f8 <cc2400_spi>
    ab44:	4603      	mov	r3, r0
    ab46:	b2db      	uxtb	r3, r3
}
    ab48:	4618      	mov	r0, r3
    ab4a:	3708      	adds	r7, #8
    ab4c:	46bd      	mov	sp, r7
    ab4e:	bd80      	pop	{r7, pc}

0000ab50 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    ab50:	b580      	push	{r7, lr}
    ab52:	af00      	add	r7, sp, #0
	cc2400_set(MAIN, 0x0000);
    ab54:	2000      	movs	r0, #0
    ab56:	2100      	movs	r1, #0
    ab58:	f7ff ff28 	bl	a9ac <cc2400_set>
	while (cc2400_get(MAIN) != 0x0000);
    ab5c:	bf00      	nop
    ab5e:	2000      	movs	r0, #0
    ab60:	f7ff ff0e 	bl	a980 <cc2400_get>
    ab64:	4603      	mov	r3, r0
    ab66:	2b00      	cmp	r3, #0
    ab68:	d1f9      	bne.n	ab5e <cc2400_reset+0xe>
	cc2400_set(MAIN, 0x8000);
    ab6a:	2000      	movs	r0, #0
    ab6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    ab70:	f7ff ff1c 	bl	a9ac <cc2400_set>
	while (cc2400_get(MAIN) != 0x8000);
    ab74:	bf00      	nop
    ab76:	2000      	movs	r0, #0
    ab78:	f7ff ff02 	bl	a980 <cc2400_get>
    ab7c:	4603      	mov	r3, r0
    ab7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ab82:	d1f8      	bne.n	ab76 <cc2400_reset+0x26>
}
    ab84:	bd80      	pop	{r7, pc}
    ab86:	bf00      	nop

0000ab88 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    ab88:	b580      	push	{r7, lr}
    ab8a:	af00      	add	r7, sp, #0
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    ab8c:	4b5e      	ldr	r3, [pc, #376]	; (ad08 <clock_start+0x180>)
    ab8e:	f244 023a 	movw	r2, #16442	; 0x403a
    ab92:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    ab94:	4b5d      	ldr	r3, [pc, #372]	; (ad0c <clock_start+0x184>)
    ab96:	2200      	movs	r2, #0
    ab98:	601a      	str	r2, [r3, #0]

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    ab9a:	4a5d      	ldr	r2, [pc, #372]	; (ad10 <clock_start+0x188>)
    ab9c:	4b5c      	ldr	r3, [pc, #368]	; (ad10 <clock_start+0x188>)
    ab9e:	681b      	ldr	r3, [r3, #0]
    aba0:	f023 0302 	bic.w	r3, r3, #2
    aba4:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    aba6:	4b5b      	ldr	r3, [pc, #364]	; (ad14 <clock_start+0x18c>)
    aba8:	22aa      	movs	r2, #170	; 0xaa
    abaa:	601a      	str	r2, [r3, #0]
    abac:	4b59      	ldr	r3, [pc, #356]	; (ad14 <clock_start+0x18c>)
    abae:	2255      	movs	r2, #85	; 0x55
    abb0:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    abb2:	bf00      	nop
    abb4:	4b58      	ldr	r3, [pc, #352]	; (ad18 <clock_start+0x190>)
    abb6:	681b      	ldr	r3, [r3, #0]
    abb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    abbc:	2b00      	cmp	r3, #0
    abbe:	d1f9      	bne.n	abb4 <clock_start+0x2c>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    abc0:	4a53      	ldr	r2, [pc, #332]	; (ad10 <clock_start+0x188>)
    abc2:	4b53      	ldr	r3, [pc, #332]	; (ad10 <clock_start+0x188>)
    abc4:	681b      	ldr	r3, [r3, #0]
    abc6:	f023 0301 	bic.w	r3, r3, #1
    abca:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    abcc:	4b51      	ldr	r3, [pc, #324]	; (ad14 <clock_start+0x18c>)
    abce:	22aa      	movs	r2, #170	; 0xaa
    abd0:	601a      	str	r2, [r3, #0]
    abd2:	4b50      	ldr	r3, [pc, #320]	; (ad14 <clock_start+0x18c>)
    abd4:	2255      	movs	r2, #85	; 0x55
    abd6:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    abd8:	bf00      	nop
    abda:	4b4f      	ldr	r3, [pc, #316]	; (ad18 <clock_start+0x190>)
    abdc:	681b      	ldr	r3, [r3, #0]
    abde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    abe2:	2b00      	cmp	r3, #0
    abe4:	d1f9      	bne.n	abda <clock_start+0x52>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    abe6:	4b4d      	ldr	r3, [pc, #308]	; (ad1c <clock_start+0x194>)
    abe8:	2200      	movs	r2, #0
    abea:	601a      	str	r2, [r3, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    abec:	f7ff ffb0 	bl	ab50 <cc2400_reset>
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
    abf0:	2008      	movs	r0, #8
    abf2:	f241 5170 	movw	r1, #5488	; 0x1570
    abf6:	f7ff fed9 	bl	a9ac <cc2400_set>
	cc2400_strobe(SXOSCON);
    abfa:	2060      	movs	r0, #96	; 0x60
    abfc:	f7ff ff98 	bl	ab30 <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    ac00:	bf00      	nop
    ac02:	f7ff ff8b 	bl	ab1c <cc2400_status>
    ac06:	4603      	mov	r3, r0
    ac08:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ac0c:	2b00      	cmp	r3, #0
    ac0e:	d0f8      	beq.n	ac02 <clock_start+0x7a>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    ac10:	4b43      	ldr	r3, [pc, #268]	; (ad20 <clock_start+0x198>)
    ac12:	2220      	movs	r2, #32
    ac14:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    ac16:	bf00      	nop
    ac18:	4b41      	ldr	r3, [pc, #260]	; (ad20 <clock_start+0x198>)
    ac1a:	681b      	ldr	r3, [r3, #0]
    ac1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ac20:	2b00      	cmp	r3, #0
    ac22:	d0f9      	beq.n	ac18 <clock_start+0x90>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    ac24:	4b3f      	ldr	r3, [pc, #252]	; (ad24 <clock_start+0x19c>)
    ac26:	2208      	movs	r2, #8
    ac28:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    ac2a:	4b3f      	ldr	r3, [pc, #252]	; (ad28 <clock_start+0x1a0>)
    ac2c:	2200      	movs	r2, #0
    ac2e:	601a      	str	r2, [r3, #0]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    ac30:	4b36      	ldr	r3, [pc, #216]	; (ad0c <clock_start+0x184>)
    ac32:	2201      	movs	r2, #1
    ac34:	601a      	str	r2, [r3, #0]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    ac36:	4b3d      	ldr	r3, [pc, #244]	; (ad2c <clock_start+0x1a4>)
    ac38:	4a3d      	ldr	r2, [pc, #244]	; (ad30 <clock_start+0x1a8>)
    ac3a:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    ac3c:	4b35      	ldr	r3, [pc, #212]	; (ad14 <clock_start+0x18c>)
    ac3e:	22aa      	movs	r2, #170	; 0xaa
    ac40:	601a      	str	r2, [r3, #0]
    ac42:	4b34      	ldr	r3, [pc, #208]	; (ad14 <clock_start+0x18c>)
    ac44:	2255      	movs	r2, #85	; 0x55
    ac46:	601a      	str	r2, [r3, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    ac48:	4a31      	ldr	r2, [pc, #196]	; (ad10 <clock_start+0x188>)
    ac4a:	4b31      	ldr	r3, [pc, #196]	; (ad10 <clock_start+0x188>)
    ac4c:	681b      	ldr	r3, [r3, #0]
    ac4e:	f043 0301 	orr.w	r3, r3, #1
    ac52:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    ac54:	4b2f      	ldr	r3, [pc, #188]	; (ad14 <clock_start+0x18c>)
    ac56:	22aa      	movs	r2, #170	; 0xaa
    ac58:	601a      	str	r2, [r3, #0]
    ac5a:	4b2e      	ldr	r3, [pc, #184]	; (ad14 <clock_start+0x18c>)
    ac5c:	2255      	movs	r2, #85	; 0x55
    ac5e:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    ac60:	bf00      	nop
    ac62:	4b2d      	ldr	r3, [pc, #180]	; (ad18 <clock_start+0x190>)
    ac64:	681b      	ldr	r3, [r3, #0]
    ac66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    ac6a:	2b00      	cmp	r3, #0
    ac6c:	d0f9      	beq.n	ac62 <clock_start+0xda>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    ac6e:	4b2b      	ldr	r3, [pc, #172]	; (ad1c <clock_start+0x194>)
    ac70:	2203      	movs	r2, #3
    ac72:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    ac74:	4a26      	ldr	r2, [pc, #152]	; (ad10 <clock_start+0x188>)
    ac76:	4b26      	ldr	r3, [pc, #152]	; (ad10 <clock_start+0x188>)
    ac78:	681b      	ldr	r3, [r3, #0]
    ac7a:	f043 0302 	orr.w	r3, r3, #2
    ac7e:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    ac80:	4b24      	ldr	r3, [pc, #144]	; (ad14 <clock_start+0x18c>)
    ac82:	22aa      	movs	r2, #170	; 0xaa
    ac84:	601a      	str	r2, [r3, #0]
    ac86:	4b23      	ldr	r3, [pc, #140]	; (ad14 <clock_start+0x18c>)
    ac88:	2255      	movs	r2, #85	; 0x55
    ac8a:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    ac8c:	bf00      	nop
    ac8e:	4b22      	ldr	r3, [pc, #136]	; (ad18 <clock_start+0x190>)
    ac90:	681b      	ldr	r3, [r3, #0]
    ac92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    ac96:	2b00      	cmp	r3, #0
    ac98:	d0f9      	beq.n	ac8e <clock_start+0x106>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    ac9a:	4b26      	ldr	r3, [pc, #152]	; (ad34 <clock_start+0x1ac>)
    ac9c:	2222      	movs	r2, #34	; 0x22
    ac9e:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    aca0:	4b25      	ldr	r3, [pc, #148]	; (ad38 <clock_start+0x1b0>)
    aca2:	22aa      	movs	r2, #170	; 0xaa
    aca4:	601a      	str	r2, [r3, #0]
    aca6:	4b24      	ldr	r3, [pc, #144]	; (ad38 <clock_start+0x1b0>)
    aca8:	2255      	movs	r2, #85	; 0x55
    acaa:	601a      	str	r2, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    acac:	4a23      	ldr	r2, [pc, #140]	; (ad3c <clock_start+0x1b4>)
    acae:	4b23      	ldr	r3, [pc, #140]	; (ad3c <clock_start+0x1b4>)
    acb0:	681b      	ldr	r3, [r3, #0]
    acb2:	f043 0301 	orr.w	r3, r3, #1
    acb6:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    acb8:	4b1f      	ldr	r3, [pc, #124]	; (ad38 <clock_start+0x1b0>)
    acba:	22aa      	movs	r2, #170	; 0xaa
    acbc:	601a      	str	r2, [r3, #0]
    acbe:	4b1e      	ldr	r3, [pc, #120]	; (ad38 <clock_start+0x1b0>)
    acc0:	2255      	movs	r2, #85	; 0x55
    acc2:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    acc4:	bf00      	nop
    acc6:	4b1e      	ldr	r3, [pc, #120]	; (ad40 <clock_start+0x1b8>)
    acc8:	681b      	ldr	r3, [r3, #0]
    acca:	f403 7380 	and.w	r3, r3, #256	; 0x100
    acce:	2b00      	cmp	r3, #0
    acd0:	d0f9      	beq.n	acc6 <clock_start+0x13e>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    acd2:	bf00      	nop
    acd4:	4b1a      	ldr	r3, [pc, #104]	; (ad40 <clock_start+0x1b8>)
    acd6:	681b      	ldr	r3, [r3, #0]
    acd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    acdc:	2b00      	cmp	r3, #0
    acde:	d0f9      	beq.n	acd4 <clock_start+0x14c>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    ace0:	4a16      	ldr	r2, [pc, #88]	; (ad3c <clock_start+0x1b4>)
    ace2:	4b16      	ldr	r3, [pc, #88]	; (ad3c <clock_start+0x1b4>)
    ace4:	681b      	ldr	r3, [r3, #0]
    ace6:	f043 0302 	orr.w	r3, r3, #2
    acea:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    acec:	4b12      	ldr	r3, [pc, #72]	; (ad38 <clock_start+0x1b0>)
    acee:	22aa      	movs	r2, #170	; 0xaa
    acf0:	601a      	str	r2, [r3, #0]
    acf2:	4b11      	ldr	r3, [pc, #68]	; (ad38 <clock_start+0x1b0>)
    acf4:	2255      	movs	r2, #85	; 0x55
    acf6:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    acf8:	bf00      	nop
    acfa:	4b11      	ldr	r3, [pc, #68]	; (ad40 <clock_start+0x1b8>)
    acfc:	681b      	ldr	r3, [r3, #0]
    acfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
    ad02:	2b00      	cmp	r3, #0
    ad04:	d0f9      	beq.n	acfa <clock_start+0x172>
}
    ad06:	bd80      	pop	{r7, pc}
    ad08:	400fc000 	.word	0x400fc000
    ad0c:	400fc10c 	.word	0x400fc10c
    ad10:	400fc080 	.word	0x400fc080
    ad14:	400fc08c 	.word	0x400fc08c
    ad18:	400fc088 	.word	0x400fc088
    ad1c:	400fc104 	.word	0x400fc104
    ad20:	400fc1a0 	.word	0x400fc1a0
    ad24:	400fc1a8 	.word	0x400fc1a8
    ad28:	400fc1ac 	.word	0x400fc1ac
    ad2c:	400fc084 	.word	0x400fc084
    ad30:	00010018 	.word	0x00010018
    ad34:	400fc0a4 	.word	0x400fc0a4
    ad38:	400fc0ac 	.word	0x400fc0ac
    ad3c:	400fc0a0 	.word	0x400fc0a0
    ad40:	400fc0a8 	.word	0x400fc0a8

0000ad44 <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    ad44:	b580      	push	{r7, lr}
    ad46:	af00      	add	r7, sp, #0
	all_pins_off();
    ad48:	f7ff fcd0 	bl	a6ec <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    ad4c:	4b0a      	ldr	r3, [pc, #40]	; (ad78 <reset+0x34>)
    ad4e:	2202      	movs	r2, #2
    ad50:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    ad52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    ad56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ad5a:	681b      	ldr	r3, [r3, #0]
    ad5c:	f043 0303 	orr.w	r3, r3, #3
    ad60:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    ad62:	4b06      	ldr	r3, [pc, #24]	; (ad7c <reset+0x38>)
    ad64:	22aa      	movs	r2, #170	; 0xaa
    ad66:	601a      	str	r2, [r3, #0]
    ad68:	4b04      	ldr	r3, [pc, #16]	; (ad7c <reset+0x38>)
    ad6a:	2255      	movs	r2, #85	; 0x55
    ad6c:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
    ad6e:	2001      	movs	r0, #1
    ad70:	f7ff fc38 	bl	a5e4 <wait>
}
    ad74:	bd80      	pop	{r7, pc}
    ad76:	bf00      	nop
    ad78:	2009c03c 	.word	0x2009c03c
    ad7c:	40000008 	.word	0x40000008

0000ad80 <_HandleRequest>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    ad80:	b580      	push	{r7, lr}
    ad82:	b088      	sub	sp, #32
    ad84:	af00      	add	r7, sp, #0
    ad86:	60f8      	str	r0, [r7, #12]
    ad88:	60b9      	str	r1, [r7, #8]
    ad8a:	607a      	str	r2, [r7, #4]
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    ad8c:	68fb      	ldr	r3, [r7, #12]
    ad8e:	781b      	ldrb	r3, [r3, #0]
    ad90:	095b      	lsrs	r3, r3, #5
    ad92:	b2db      	uxtb	r3, r3
    ad94:	f003 0303 	and.w	r3, r3, #3
    ad98:	61fb      	str	r3, [r7, #28]
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    ad9a:	69fb      	ldr	r3, [r7, #28]
    ad9c:	2b02      	cmp	r3, #2
    ad9e:	d10e      	bne.n	adbe <_HandleRequest+0x3e>
		BOOL fFilterStatus = FALSE;
    ada0:	2300      	movs	r3, #0
    ada2:	617b      	str	r3, [r7, #20]
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    ada4:	f107 0314 	add.w	r3, r7, #20
    ada8:	68f8      	ldr	r0, [r7, #12]
    adaa:	4619      	mov	r1, r3
    adac:	68ba      	ldr	r2, [r7, #8]
    adae:	687b      	ldr	r3, [r7, #4]
    adb0:	f000 fcd2 	bl	b758 <USBFilterOsVendorMessage>
    adb4:	4603      	mov	r3, r0
    adb6:	2b00      	cmp	r3, #0
    adb8:	d001      	beq.n	adbe <_HandleRequest+0x3e>
			return fFilterStatus;
    adba:	697b      	ldr	r3, [r7, #20]
    adbc:	e00f      	b.n	adde <_HandleRequest+0x5e>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    adbe:	4a0a      	ldr	r2, [pc, #40]	; (ade8 <_HandleRequest+0x68>)
    adc0:	69fb      	ldr	r3, [r7, #28]
    adc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adc6:	61bb      	str	r3, [r7, #24]
	if (pfnHandler == NULL) {
    adc8:	69bb      	ldr	r3, [r7, #24]
    adca:	2b00      	cmp	r3, #0
    adcc:	d101      	bne.n	add2 <_HandleRequest+0x52>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    adce:	2300      	movs	r3, #0
    add0:	e005      	b.n	adde <_HandleRequest+0x5e>
	}

	return pfnHandler(pSetup, piLen, ppbData);
    add2:	69bb      	ldr	r3, [r7, #24]
    add4:	68f8      	ldr	r0, [r7, #12]
    add6:	68b9      	ldr	r1, [r7, #8]
    add8:	687a      	ldr	r2, [r7, #4]
    adda:	4798      	blx	r3
    addc:	4603      	mov	r3, r0
}
    adde:	4618      	mov	r0, r3
    ade0:	3720      	adds	r7, #32
    ade2:	46bd      	mov	sp, r7
    ade4:	bd80      	pop	{r7, pc}
    ade6:	bf00      	nop
    ade8:	10000a80 	.word	0x10000a80

0000adec <StallControlPipe>:
	Local function to stall the control endpoint
	
	@param [in]	bEPStat	Endpoint status
 */
static void StallControlPipe(U8 bEPStat)
{
    adec:	b580      	push	{r7, lr}
    adee:	b084      	sub	sp, #16
    adf0:	af00      	add	r7, sp, #0
    adf2:	4603      	mov	r3, r0
    adf4:	71fb      	strb	r3, [r7, #7]
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    adf6:	2080      	movs	r0, #128	; 0x80
    adf8:	2101      	movs	r1, #1
    adfa:	f000 fa83 	bl	b304 <USBHwEPStall>

// dump setup packet
	DBG("STALL on [");
	pb = (U8 *)&Setup;
    adfe:	4b07      	ldr	r3, [pc, #28]	; (ae1c <StallControlPipe+0x30>)
    ae00:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
    ae02:	2300      	movs	r3, #0
    ae04:	60fb      	str	r3, [r7, #12]
    ae06:	e002      	b.n	ae0e <StallControlPipe+0x22>
    ae08:	68fb      	ldr	r3, [r7, #12]
    ae0a:	3301      	adds	r3, #1
    ae0c:	60fb      	str	r3, [r7, #12]
    ae0e:	68fb      	ldr	r3, [r7, #12]
    ae10:	2b07      	cmp	r3, #7
    ae12:	ddf9      	ble.n	ae08 <StallControlPipe+0x1c>
		DBG(" %02x", *pb++);
	}
	DBG("] stat=%x\n", bEPStat);
}
    ae14:	3710      	adds	r7, #16
    ae16:	46bd      	mov	sp, r7
    ae18:	bd80      	pop	{r7, pc}
    ae1a:	bf00      	nop
    ae1c:	10000a6c 	.word	0x10000a6c

0000ae20 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    ae20:	b580      	push	{r7, lr}
    ae22:	b082      	sub	sp, #8
    ae24:	af00      	add	r7, sp, #0
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    ae26:	4b0e      	ldr	r3, [pc, #56]	; (ae60 <DataIn+0x40>)
    ae28:	681b      	ldr	r3, [r3, #0]
    ae2a:	2b40      	cmp	r3, #64	; 0x40
    ae2c:	bfa8      	it	ge
    ae2e:	2340      	movge	r3, #64	; 0x40
    ae30:	607b      	str	r3, [r7, #4]
	USBHwEPWrite(0x80, pbData, iChunk);
    ae32:	4b0c      	ldr	r3, [pc, #48]	; (ae64 <DataIn+0x44>)
    ae34:	681a      	ldr	r2, [r3, #0]
    ae36:	687b      	ldr	r3, [r7, #4]
    ae38:	2080      	movs	r0, #128	; 0x80
    ae3a:	4611      	mov	r1, r2
    ae3c:	461a      	mov	r2, r3
    ae3e:	f000 fa85 	bl	b34c <USBHwEPWrite>
	pbData += iChunk;
    ae42:	4b08      	ldr	r3, [pc, #32]	; (ae64 <DataIn+0x44>)
    ae44:	681a      	ldr	r2, [r3, #0]
    ae46:	687b      	ldr	r3, [r7, #4]
    ae48:	4413      	add	r3, r2
    ae4a:	4a06      	ldr	r2, [pc, #24]	; (ae64 <DataIn+0x44>)
    ae4c:	6013      	str	r3, [r2, #0]
	iResidue -= iChunk;
    ae4e:	4b04      	ldr	r3, [pc, #16]	; (ae60 <DataIn+0x40>)
    ae50:	681a      	ldr	r2, [r3, #0]
    ae52:	687b      	ldr	r3, [r7, #4]
    ae54:	1ad3      	subs	r3, r2, r3
    ae56:	4a02      	ldr	r2, [pc, #8]	; (ae60 <DataIn+0x40>)
    ae58:	6013      	str	r3, [r2, #0]
}
    ae5a:	3708      	adds	r7, #8
    ae5c:	46bd      	mov	sp, r7
    ae5e:	bd80      	pop	{r7, pc}
    ae60:	10000a78 	.word	0x10000a78
    ae64:	10000a74 	.word	0x10000a74

0000ae68 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    ae68:	b580      	push	{r7, lr}
    ae6a:	b084      	sub	sp, #16
    ae6c:	af00      	add	r7, sp, #0
    ae6e:	4603      	mov	r3, r0
    ae70:	460a      	mov	r2, r1
    ae72:	71fb      	strb	r3, [r7, #7]
    ae74:	4613      	mov	r3, r2
    ae76:	71bb      	strb	r3, [r7, #6]
	int iChunk, iType;

	if (bEP == 0x00) {
    ae78:	79fb      	ldrb	r3, [r7, #7]
    ae7a:	2b00      	cmp	r3, #0
    ae7c:	f040 8091 	bne.w	afa2 <USBHandleControlTransfer+0x13a>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    ae80:	79bb      	ldrb	r3, [r7, #6]
    ae82:	f003 0304 	and.w	r3, r3, #4
    ae86:	2b00      	cmp	r3, #0
    ae88:	d041      	beq.n	af0e <USBHandleControlTransfer+0xa6>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    ae8a:	2000      	movs	r0, #0
    ae8c:	4949      	ldr	r1, [pc, #292]	; (afb4 <USBHandleControlTransfer+0x14c>)
    ae8e:	2208      	movs	r2, #8
    ae90:	f000 faaa 	bl	b3e8 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    ae94:	4b47      	ldr	r3, [pc, #284]	; (afb4 <USBHandleControlTransfer+0x14c>)
    ae96:	781b      	ldrb	r3, [r3, #0]
    ae98:	095b      	lsrs	r3, r3, #5
    ae9a:	b2db      	uxtb	r3, r3
    ae9c:	f003 0303 	and.w	r3, r3, #3
    aea0:	60fb      	str	r3, [r7, #12]
			pbData = apbDataStore[iType];
    aea2:	4a45      	ldr	r2, [pc, #276]	; (afb8 <USBHandleControlTransfer+0x150>)
    aea4:	68fb      	ldr	r3, [r7, #12]
    aea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aeaa:	4a44      	ldr	r2, [pc, #272]	; (afbc <USBHandleControlTransfer+0x154>)
    aeac:	6013      	str	r3, [r2, #0]
			iResidue = Setup.wLength;
    aeae:	4b41      	ldr	r3, [pc, #260]	; (afb4 <USBHandleControlTransfer+0x14c>)
    aeb0:	88db      	ldrh	r3, [r3, #6]
    aeb2:	461a      	mov	r2, r3
    aeb4:	4b42      	ldr	r3, [pc, #264]	; (afc0 <USBHandleControlTransfer+0x158>)
    aeb6:	601a      	str	r2, [r3, #0]
			iLen = Setup.wLength;
    aeb8:	4b3e      	ldr	r3, [pc, #248]	; (afb4 <USBHandleControlTransfer+0x14c>)
    aeba:	88db      	ldrh	r3, [r3, #6]
    aebc:	461a      	mov	r2, r3
    aebe:	4b41      	ldr	r3, [pc, #260]	; (afc4 <USBHandleControlTransfer+0x15c>)
    aec0:	601a      	str	r2, [r3, #0]

			if ((Setup.wLength == 0) ||
    aec2:	4b3c      	ldr	r3, [pc, #240]	; (afb4 <USBHandleControlTransfer+0x14c>)
    aec4:	88db      	ldrh	r3, [r3, #6]
    aec6:	2b00      	cmp	r3, #0
    aec8:	d007      	beq.n	aeda <USBHandleControlTransfer+0x72>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
    aeca:	4b3a      	ldr	r3, [pc, #232]	; (afb4 <USBHandleControlTransfer+0x14c>)
    aecc:	781b      	ldrb	r3, [r3, #0]
    aece:	09db      	lsrs	r3, r3, #7
    aed0:	b2db      	uxtb	r3, r3
    aed2:	f003 0301 	and.w	r3, r3, #1
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
			pbData = apbDataStore[iType];
			iResidue = Setup.wLength;
			iLen = Setup.wLength;

			if ((Setup.wLength == 0) ||
    aed6:	2b00      	cmp	r3, #0
    aed8:	d068      	beq.n	afac <USBHandleControlTransfer+0x144>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    aeda:	4836      	ldr	r0, [pc, #216]	; (afb4 <USBHandleControlTransfer+0x14c>)
    aedc:	4939      	ldr	r1, [pc, #228]	; (afc4 <USBHandleControlTransfer+0x15c>)
    aede:	4a37      	ldr	r2, [pc, #220]	; (afbc <USBHandleControlTransfer+0x154>)
    aee0:	f7ff ff4e 	bl	ad80 <_HandleRequest>
    aee4:	4603      	mov	r3, r0
    aee6:	2b00      	cmp	r3, #0
    aee8:	d104      	bne.n	aef4 <USBHandleControlTransfer+0x8c>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
    aeea:	79bb      	ldrb	r3, [r7, #6]
    aeec:	4618      	mov	r0, r3
    aeee:	f7ff ff7d 	bl	adec <StallControlPipe>
					return;
    aef2:	e05b      	b.n	afac <USBHandleControlTransfer+0x144>
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    aef4:	4b2f      	ldr	r3, [pc, #188]	; (afb4 <USBHandleControlTransfer+0x14c>)
    aef6:	88db      	ldrh	r3, [r3, #6]
    aef8:	461a      	mov	r2, r3
    aefa:	4b32      	ldr	r3, [pc, #200]	; (afc4 <USBHandleControlTransfer+0x15c>)
    aefc:	681b      	ldr	r3, [r3, #0]
    aefe:	4293      	cmp	r3, r2
    af00:	bfa8      	it	ge
    af02:	4613      	movge	r3, r2
    af04:	4a2e      	ldr	r2, [pc, #184]	; (afc0 <USBHandleControlTransfer+0x158>)
    af06:	6013      	str	r3, [r2, #0]
				// send first part (possibly a zero-length status message)
				DataIn();
    af08:	f7ff ff8a 	bl	ae20 <DataIn>
    af0c:	e04e      	b.n	afac <USBHandleControlTransfer+0x144>
			}
		}
		else {		
			if (iResidue > 0) {
    af0e:	4b2c      	ldr	r3, [pc, #176]	; (afc0 <USBHandleControlTransfer+0x158>)
    af10:	681b      	ldr	r3, [r3, #0]
    af12:	2b00      	cmp	r3, #0
    af14:	dd3e      	ble.n	af94 <USBHandleControlTransfer+0x12c>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    af16:	4b29      	ldr	r3, [pc, #164]	; (afbc <USBHandleControlTransfer+0x154>)
    af18:	681a      	ldr	r2, [r3, #0]
    af1a:	4b29      	ldr	r3, [pc, #164]	; (afc0 <USBHandleControlTransfer+0x158>)
    af1c:	681b      	ldr	r3, [r3, #0]
    af1e:	2000      	movs	r0, #0
    af20:	4611      	mov	r1, r2
    af22:	461a      	mov	r2, r3
    af24:	f000 fa60 	bl	b3e8 <USBHwEPRead>
    af28:	60b8      	str	r0, [r7, #8]
				if (iChunk < 0) {
    af2a:	68bb      	ldr	r3, [r7, #8]
    af2c:	2b00      	cmp	r3, #0
    af2e:	da04      	bge.n	af3a <USBHandleControlTransfer+0xd2>
					StallControlPipe(bEPStat);
    af30:	79bb      	ldrb	r3, [r7, #6]
    af32:	4618      	mov	r0, r3
    af34:	f7ff ff5a 	bl	adec <StallControlPipe>
					return;
    af38:	e038      	b.n	afac <USBHandleControlTransfer+0x144>
				}
				pbData += iChunk;
    af3a:	4b20      	ldr	r3, [pc, #128]	; (afbc <USBHandleControlTransfer+0x154>)
    af3c:	681a      	ldr	r2, [r3, #0]
    af3e:	68bb      	ldr	r3, [r7, #8]
    af40:	4413      	add	r3, r2
    af42:	4a1e      	ldr	r2, [pc, #120]	; (afbc <USBHandleControlTransfer+0x154>)
    af44:	6013      	str	r3, [r2, #0]
				iResidue -= iChunk;
    af46:	4b1e      	ldr	r3, [pc, #120]	; (afc0 <USBHandleControlTransfer+0x158>)
    af48:	681a      	ldr	r2, [r3, #0]
    af4a:	68bb      	ldr	r3, [r7, #8]
    af4c:	1ad3      	subs	r3, r2, r3
    af4e:	4a1c      	ldr	r2, [pc, #112]	; (afc0 <USBHandleControlTransfer+0x158>)
    af50:	6013      	str	r3, [r2, #0]
				if (iResidue == 0) {
    af52:	4b1b      	ldr	r3, [pc, #108]	; (afc0 <USBHandleControlTransfer+0x158>)
    af54:	681b      	ldr	r3, [r3, #0]
    af56:	2b00      	cmp	r3, #0
    af58:	d128      	bne.n	afac <USBHandleControlTransfer+0x144>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    af5a:	4b16      	ldr	r3, [pc, #88]	; (afb4 <USBHandleControlTransfer+0x14c>)
    af5c:	781b      	ldrb	r3, [r3, #0]
    af5e:	095b      	lsrs	r3, r3, #5
    af60:	b2db      	uxtb	r3, r3
    af62:	f003 0303 	and.w	r3, r3, #3
    af66:	60fb      	str	r3, [r7, #12]
					pbData = apbDataStore[iType];
    af68:	4a13      	ldr	r2, [pc, #76]	; (afb8 <USBHandleControlTransfer+0x150>)
    af6a:	68fb      	ldr	r3, [r7, #12]
    af6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    af70:	4a12      	ldr	r2, [pc, #72]	; (afbc <USBHandleControlTransfer+0x154>)
    af72:	6013      	str	r3, [r2, #0]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    af74:	480f      	ldr	r0, [pc, #60]	; (afb4 <USBHandleControlTransfer+0x14c>)
    af76:	4913      	ldr	r1, [pc, #76]	; (afc4 <USBHandleControlTransfer+0x15c>)
    af78:	4a10      	ldr	r2, [pc, #64]	; (afbc <USBHandleControlTransfer+0x154>)
    af7a:	f7ff ff01 	bl	ad80 <_HandleRequest>
    af7e:	4603      	mov	r3, r0
    af80:	2b00      	cmp	r3, #0
    af82:	d104      	bne.n	af8e <USBHandleControlTransfer+0x126>
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
    af84:	79bb      	ldrb	r3, [r7, #6]
    af86:	4618      	mov	r0, r3
    af88:	f7ff ff30 	bl	adec <StallControlPipe>
						return;
    af8c:	e00e      	b.n	afac <USBHandleControlTransfer+0x144>
					}
					// send status to host
					DataIn();
    af8e:	f7ff ff47 	bl	ae20 <DataIn>
    af92:	e00b      	b.n	afac <USBHandleControlTransfer+0x144>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    af94:	2000      	movs	r0, #0
    af96:	2100      	movs	r1, #0
    af98:	2200      	movs	r2, #0
    af9a:	f000 fa25 	bl	b3e8 <USBHwEPRead>
    af9e:	60b8      	str	r0, [r7, #8]
    afa0:	e004      	b.n	afac <USBHandleControlTransfer+0x144>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    afa2:	79fb      	ldrb	r3, [r7, #7]
    afa4:	2b80      	cmp	r3, #128	; 0x80
    afa6:	d101      	bne.n	afac <USBHandleControlTransfer+0x144>
		// IN transfer
		// send more data if available (possibly a 0-length packet)
		DataIn();
    afa8:	f7ff ff3a 	bl	ae20 <DataIn>
	}
	else {
		ASSERT(FALSE);
	}
}
    afac:	3710      	adds	r7, #16
    afae:	46bd      	mov	sp, r7
    afb0:	bd80      	pop	{r7, pc}
    afb2:	bf00      	nop
    afb4:	10000a6c 	.word	0x10000a6c
    afb8:	10000a90 	.word	0x10000a90
    afbc:	10000a74 	.word	0x10000a74
    afc0:	10000a78 	.word	0x10000a78
    afc4:	10000a7c 	.word	0x10000a7c

0000afc8 <USBRegisterRequestHandler>:
	@param [in]	iType			Type of request, e.g. REQTYPE_TYPE_STANDARD
	@param [in]	*pfnHandler		Callback function pointer
	@param [in]	*pbDataStore	Data storage area for this type of request
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
    afc8:	b480      	push	{r7}
    afca:	b085      	sub	sp, #20
    afcc:	af00      	add	r7, sp, #0
    afce:	60f8      	str	r0, [r7, #12]
    afd0:	60b9      	str	r1, [r7, #8]
    afd2:	607a      	str	r2, [r7, #4]
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    afd4:	4907      	ldr	r1, [pc, #28]	; (aff4 <USBRegisterRequestHandler+0x2c>)
    afd6:	68fb      	ldr	r3, [r7, #12]
    afd8:	68ba      	ldr	r2, [r7, #8]
    afda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	apbDataStore[iType] = pbDataStore;
    afde:	4906      	ldr	r1, [pc, #24]	; (aff8 <USBRegisterRequestHandler+0x30>)
    afe0:	68fb      	ldr	r3, [r7, #12]
    afe2:	687a      	ldr	r2, [r7, #4]
    afe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    afe8:	3714      	adds	r7, #20
    afea:	46bd      	mov	sp, r7
    afec:	f85d 7b04 	ldr.w	r7, [sp], #4
    aff0:	4770      	bx	lr
    aff2:	bf00      	nop
    aff4:	10000a80 	.word	0x10000a80
    aff8:	10000a90 	.word	0x10000a90

0000affc <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    affc:	b480      	push	{r7}
    affe:	b083      	sub	sp, #12
    b000:	af00      	add	r7, sp, #0
    b002:	4603      	mov	r3, r0
    b004:	71fb      	strb	r3, [r7, #7]
	if (bDevStatus & DEV_STATUS_RESET) {
		DBG("\n!");
	}
}
    b006:	370c      	adds	r7, #12
    b008:	46bd      	mov	sp, r7
    b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
    b00e:	4770      	bx	lr

0000b010 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    b010:	b580      	push	{r7, lr}
    b012:	af00      	add	r7, sp, #0
	// init hardware
	USBHwInit();
    b014:	f000 fb2a 	bl	b66c <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    b018:	480d      	ldr	r0, [pc, #52]	; (b050 <USBInit+0x40>)
    b01a:	f000 f913 	bl	b244 <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    b01e:	2000      	movs	r0, #0
    b020:	490c      	ldr	r1, [pc, #48]	; (b054 <USBInit+0x44>)
    b022:	f000 f8dd 	bl	b1e0 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    b026:	2080      	movs	r0, #128	; 0x80
    b028:	490a      	ldr	r1, [pc, #40]	; (b054 <USBInit+0x44>)
    b02a:	f000 f8d9 	bl	b1e0 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    b02e:	2000      	movs	r0, #0
    b030:	2140      	movs	r1, #64	; 0x40
    b032:	f000 f8b7 	bl	b1a4 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    b036:	2080      	movs	r0, #128	; 0x80
    b038:	2140      	movs	r1, #64	; 0x40
    b03a:	f000 f8b3 	bl	b1a4 <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    b03e:	2000      	movs	r0, #0
    b040:	4905      	ldr	r1, [pc, #20]	; (b058 <USBInit+0x48>)
    b042:	4a06      	ldr	r2, [pc, #24]	; (b05c <USBInit+0x4c>)
    b044:	f7ff ffc0 	bl	afc8 <USBRegisterRequestHandler>

	return TRUE;
    b048:	2301      	movs	r3, #1
}
    b04a:	4618      	mov	r0, r3
    b04c:	bd80      	pop	{r7, pc}
    b04e:	bf00      	nop
    b050:	0000affd 	.word	0x0000affd
    b054:	0000ae69 	.word	0x0000ae69
    b058:	0000bca5 	.word	0x0000bca5
    b05c:	10000aa0 	.word	0x10000aa0

0000b060 <Wait4DevInt>:
    Local function to wait for a device interrupt (and clear it)
        
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    b060:	b480      	push	{r7}
    b062:	b083      	sub	sp, #12
    b064:	af00      	add	r7, sp, #0
    b066:	6078      	str	r0, [r7, #4]
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    b068:	bf00      	nop
    b06a:	4b07      	ldr	r3, [pc, #28]	; (b088 <Wait4DevInt+0x28>)
    b06c:	681a      	ldr	r2, [r3, #0]
    b06e:	687b      	ldr	r3, [r7, #4]
    b070:	401a      	ands	r2, r3
    b072:	687b      	ldr	r3, [r7, #4]
    b074:	429a      	cmp	r2, r3
    b076:	d1f8      	bne.n	b06a <Wait4DevInt+0xa>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    b078:	4a04      	ldr	r2, [pc, #16]	; (b08c <Wait4DevInt+0x2c>)
    b07a:	687b      	ldr	r3, [r7, #4]
    b07c:	6013      	str	r3, [r2, #0]
}
    b07e:	370c      	adds	r7, #12
    b080:	46bd      	mov	sp, r7
    b082:	f85d 7b04 	ldr.w	r7, [sp], #4
    b086:	4770      	bx	lr
    b088:	5000c200 	.word	0x5000c200
    b08c:	5000c208 	.word	0x5000c208

0000b090 <USBHwCmd>:
    Local function to send a command to the USB protocol engine
        
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    b090:	b580      	push	{r7, lr}
    b092:	b082      	sub	sp, #8
    b094:	af00      	add	r7, sp, #0
    b096:	4603      	mov	r3, r0
    b098:	71fb      	strb	r3, [r7, #7]
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    b09a:	4b07      	ldr	r3, [pc, #28]	; (b0b8 <USBHwCmd+0x28>)
    b09c:	2230      	movs	r2, #48	; 0x30
    b09e:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    b0a0:	4a06      	ldr	r2, [pc, #24]	; (b0bc <USBHwCmd+0x2c>)
    b0a2:	79fb      	ldrb	r3, [r7, #7]
    b0a4:	041b      	lsls	r3, r3, #16
    b0a6:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    b0aa:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    b0ac:	2010      	movs	r0, #16
    b0ae:	f7ff ffd7 	bl	b060 <Wait4DevInt>
}
    b0b2:	3708      	adds	r7, #8
    b0b4:	46bd      	mov	sp, r7
    b0b6:	bd80      	pop	{r7, pc}
    b0b8:	5000c208 	.word	0x5000c208
    b0bc:	5000c210 	.word	0x5000c210

0000b0c0 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    b0c0:	b580      	push	{r7, lr}
    b0c2:	b082      	sub	sp, #8
    b0c4:	af00      	add	r7, sp, #0
    b0c6:	4603      	mov	r3, r0
    b0c8:	460a      	mov	r2, r1
    b0ca:	71fb      	strb	r3, [r7, #7]
    b0cc:	4613      	mov	r3, r2
    b0ce:	80bb      	strh	r3, [r7, #4]
    // write command code
    USBHwCmd(bCmd);
    b0d0:	79fb      	ldrb	r3, [r7, #7]
    b0d2:	4618      	mov	r0, r3
    b0d4:	f7ff ffdc 	bl	b090 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    b0d8:	4a05      	ldr	r2, [pc, #20]	; (b0f0 <USBHwCmdWrite+0x30>)
    b0da:	88bb      	ldrh	r3, [r7, #4]
    b0dc:	041b      	lsls	r3, r3, #16
    b0de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b0e2:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    b0e4:	2010      	movs	r0, #16
    b0e6:	f7ff ffbb 	bl	b060 <Wait4DevInt>
}
    b0ea:	3708      	adds	r7, #8
    b0ec:	46bd      	mov	sp, r7
    b0ee:	bd80      	pop	{r7, pc}
    b0f0:	5000c210 	.word	0x5000c210

0000b0f4 <USBHwCmdRead>:
    @param [in] bCmd        Command to send

    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    b0f4:	b580      	push	{r7, lr}
    b0f6:	b082      	sub	sp, #8
    b0f8:	af00      	add	r7, sp, #0
    b0fa:	4603      	mov	r3, r0
    b0fc:	71fb      	strb	r3, [r7, #7]
    // write command code
    USBHwCmd(bCmd);
    b0fe:	79fb      	ldrb	r3, [r7, #7]
    b100:	4618      	mov	r0, r3
    b102:	f7ff ffc5 	bl	b090 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    b106:	4a08      	ldr	r2, [pc, #32]	; (b128 <USBHwCmdRead+0x34>)
    b108:	79fb      	ldrb	r3, [r7, #7]
    b10a:	041b      	lsls	r3, r3, #16
    b10c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b110:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CDFULL);
    b112:	2020      	movs	r0, #32
    b114:	f7ff ffa4 	bl	b060 <Wait4DevInt>
    return USBCmdData;
    b118:	4b04      	ldr	r3, [pc, #16]	; (b12c <USBHwCmdRead+0x38>)
    b11a:	681b      	ldr	r3, [r3, #0]
    b11c:	b2db      	uxtb	r3, r3
}
    b11e:	4618      	mov	r0, r3
    b120:	3708      	adds	r7, #8
    b122:	46bd      	mov	sp, r7
    b124:	bd80      	pop	{r7, pc}
    b126:	bf00      	nop
    b128:	5000c210 	.word	0x5000c210
    b12c:	5000c214 	.word	0x5000c214

0000b130 <USBHwEPRealize>:
        
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    b130:	b580      	push	{r7, lr}
    b132:	b082      	sub	sp, #8
    b134:	af00      	add	r7, sp, #0
    b136:	6078      	str	r0, [r7, #4]
    b138:	460b      	mov	r3, r1
    b13a:	807b      	strh	r3, [r7, #2]
    USBReEp |= (1 << idx);
    b13c:	490a      	ldr	r1, [pc, #40]	; (b168 <USBHwEPRealize+0x38>)
    b13e:	4b0a      	ldr	r3, [pc, #40]	; (b168 <USBHwEPRealize+0x38>)
    b140:	681b      	ldr	r3, [r3, #0]
    b142:	2001      	movs	r0, #1
    b144:	687a      	ldr	r2, [r7, #4]
    b146:	fa00 f202 	lsl.w	r2, r0, r2
    b14a:	4313      	orrs	r3, r2
    b14c:	600b      	str	r3, [r1, #0]
#ifdef LPC17xx
    USBEpIn = idx;
    b14e:	4a07      	ldr	r2, [pc, #28]	; (b16c <USBHwEPRealize+0x3c>)
    b150:	687b      	ldr	r3, [r7, #4]
    b152:	6013      	str	r3, [r2, #0]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    b154:	4a06      	ldr	r2, [pc, #24]	; (b170 <USBHwEPRealize+0x40>)
    b156:	887b      	ldrh	r3, [r7, #2]
    b158:	6013      	str	r3, [r2, #0]
    Wait4DevInt(EP_RLZED);
    b15a:	f44f 7080 	mov.w	r0, #256	; 0x100
    b15e:	f7ff ff7f 	bl	b060 <Wait4DevInt>
}
    b162:	3708      	adds	r7, #8
    b164:	46bd      	mov	sp, r7
    b166:	bd80      	pop	{r7, pc}
    b168:	5000c244 	.word	0x5000c244
    b16c:	5000c248 	.word	0x5000c248
    b170:	5000c24c 	.word	0x5000c24c

0000b174 <USBHwEPEnable>:
        
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    b174:	b580      	push	{r7, lr}
    b176:	b082      	sub	sp, #8
    b178:	af00      	add	r7, sp, #0
    b17a:	6078      	str	r0, [r7, #4]
    b17c:	6039      	str	r1, [r7, #0]
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    b17e:	687b      	ldr	r3, [r7, #4]
    b180:	b2db      	uxtb	r3, r3
    b182:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b186:	b2db      	uxtb	r3, r3
    b188:	b2da      	uxtb	r2, r3
    b18a:	683b      	ldr	r3, [r7, #0]
    b18c:	2b00      	cmp	r3, #0
    b18e:	d001      	beq.n	b194 <USBHwEPEnable+0x20>
    b190:	2300      	movs	r3, #0
    b192:	e000      	b.n	b196 <USBHwEPEnable+0x22>
    b194:	2320      	movs	r3, #32
    b196:	4610      	mov	r0, r2
    b198:	4619      	mov	r1, r3
    b19a:	f7ff ff91 	bl	b0c0 <USBHwCmdWrite>
}
    b19e:	3708      	adds	r7, #8
    b1a0:	46bd      	mov	sp, r7
    b1a2:	bd80      	pop	{r7, pc}

0000b1a4 <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    b1a4:	b580      	push	{r7, lr}
    b1a6:	b084      	sub	sp, #16
    b1a8:	af00      	add	r7, sp, #0
    b1aa:	4603      	mov	r3, r0
    b1ac:	460a      	mov	r2, r1
    b1ae:	71fb      	strb	r3, [r7, #7]
    b1b0:	4613      	mov	r3, r2
    b1b2:	80bb      	strh	r3, [r7, #4]
    int idx;
    
    idx = EP2IDX(bEP);
    b1b4:	79fb      	ldrb	r3, [r7, #7]
    b1b6:	f003 030f 	and.w	r3, r3, #15
    b1ba:	005b      	lsls	r3, r3, #1
    b1bc:	79fa      	ldrb	r2, [r7, #7]
    b1be:	09d2      	lsrs	r2, r2, #7
    b1c0:	b2d2      	uxtb	r2, r2
    b1c2:	4313      	orrs	r3, r2
    b1c4:	60fb      	str	r3, [r7, #12]
    
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);
    b1c6:	88bb      	ldrh	r3, [r7, #4]
    b1c8:	68f8      	ldr	r0, [r7, #12]
    b1ca:	4619      	mov	r1, r3
    b1cc:	f7ff ffb0 	bl	b130 <USBHwEPRealize>

    // enable EP
    USBHwEPEnable(idx, TRUE);
    b1d0:	68f8      	ldr	r0, [r7, #12]
    b1d2:	2101      	movs	r1, #1
    b1d4:	f7ff ffce 	bl	b174 <USBHwEPEnable>
}
    b1d8:	3710      	adds	r7, #16
    b1da:	46bd      	mov	sp, r7
    b1dc:	bd80      	pop	{r7, pc}
    b1de:	bf00      	nop

0000b1e0 <USBHwRegisterEPIntHandler>:
        
    @param [in] bEP             Endpoint number
    @param [in] pfnHandler      Callback function
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    b1e0:	b480      	push	{r7}
    b1e2:	b085      	sub	sp, #20
    b1e4:	af00      	add	r7, sp, #0
    b1e6:	4603      	mov	r3, r0
    b1e8:	6039      	str	r1, [r7, #0]
    b1ea:	71fb      	strb	r3, [r7, #7]
    int idx;
    
    idx = EP2IDX(bEP);
    b1ec:	79fb      	ldrb	r3, [r7, #7]
    b1ee:	f003 030f 	and.w	r3, r3, #15
    b1f2:	005b      	lsls	r3, r3, #1
    b1f4:	79fa      	ldrb	r2, [r7, #7]
    b1f6:	09d2      	lsrs	r2, r2, #7
    b1f8:	b2d2      	uxtb	r2, r2
    b1fa:	4313      	orrs	r3, r2
    b1fc:	60fb      	str	r3, [r7, #12]

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    b1fe:	68fb      	ldr	r3, [r7, #12]
    b200:	0fda      	lsrs	r2, r3, #31
    b202:	4413      	add	r3, r2
    b204:	105b      	asrs	r3, r3, #1
    b206:	4619      	mov	r1, r3
    b208:	4a0b      	ldr	r2, [pc, #44]	; (b238 <USBHwRegisterEPIntHandler+0x58>)
    b20a:	683b      	ldr	r3, [r7, #0]
    b20c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    b210:	490a      	ldr	r1, [pc, #40]	; (b23c <USBHwRegisterEPIntHandler+0x5c>)
    b212:	4b0a      	ldr	r3, [pc, #40]	; (b23c <USBHwRegisterEPIntHandler+0x5c>)
    b214:	681b      	ldr	r3, [r3, #0]
    b216:	2001      	movs	r0, #1
    b218:	68fa      	ldr	r2, [r7, #12]
    b21a:	fa00 f202 	lsl.w	r2, r0, r2
    b21e:	4313      	orrs	r3, r2
    b220:	600b      	str	r3, [r1, #0]
    USBDevIntEn |= EP_SLOW;
    b222:	4a07      	ldr	r2, [pc, #28]	; (b240 <USBHwRegisterEPIntHandler+0x60>)
    b224:	4b06      	ldr	r3, [pc, #24]	; (b240 <USBHwRegisterEPIntHandler+0x60>)
    b226:	681b      	ldr	r3, [r3, #0]
    b228:	f043 0304 	orr.w	r3, r3, #4
    b22c:	6013      	str	r3, [r2, #0]
    
    DBG("Registered handler for EP 0x%x\n", bEP);
}
    b22e:	3714      	adds	r7, #20
    b230:	46bd      	mov	sp, r7
    b232:	f85d 7b04 	ldr.w	r7, [sp], #4
    b236:	4770      	bx	lr
    b238:	10000aac 	.word	0x10000aac
    b23c:	5000c234 	.word	0x5000c234
    b240:	5000c204 	.word	0x5000c204

0000b244 <USBHwRegisterDevIntHandler>:
    Registers an device status callback
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    b244:	b480      	push	{r7}
    b246:	b083      	sub	sp, #12
    b248:	af00      	add	r7, sp, #0
    b24a:	6078      	str	r0, [r7, #4]
    _pfnDevIntHandler = pfnHandler;
    b24c:	4a06      	ldr	r2, [pc, #24]	; (b268 <USBHwRegisterDevIntHandler+0x24>)
    b24e:	687b      	ldr	r3, [r7, #4]
    b250:	6013      	str	r3, [r2, #0]
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    b252:	4a06      	ldr	r2, [pc, #24]	; (b26c <USBHwRegisterDevIntHandler+0x28>)
    b254:	4b05      	ldr	r3, [pc, #20]	; (b26c <USBHwRegisterDevIntHandler+0x28>)
    b256:	681b      	ldr	r3, [r3, #0]
    b258:	f043 0308 	orr.w	r3, r3, #8
    b25c:	6013      	str	r3, [r2, #0]

    DBG("Registered handler for device status\n");
}
    b25e:	370c      	adds	r7, #12
    b260:	46bd      	mov	sp, r7
    b262:	f85d 7b04 	ldr.w	r7, [sp], #4
    b266:	4770      	bx	lr
    b268:	10000aa8 	.word	0x10000aa8
    b26c:	5000c204 	.word	0x5000c204

0000b270 <USBHwSetAddress>:
    Sets the USB address.
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    b270:	b580      	push	{r7, lr}
    b272:	b082      	sub	sp, #8
    b274:	af00      	add	r7, sp, #0
    b276:	4603      	mov	r3, r0
    b278:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    b27a:	79fb      	ldrb	r3, [r7, #7]
    b27c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b280:	b2db      	uxtb	r3, r3
    b282:	b29b      	uxth	r3, r3
    b284:	20d0      	movs	r0, #208	; 0xd0
    b286:	4619      	mov	r1, r3
    b288:	f7ff ff1a 	bl	b0c0 <USBHwCmdWrite>
}
    b28c:	3708      	adds	r7, #8
    b28e:	46bd      	mov	sp, r7
    b290:	bd80      	pop	{r7, pc}
    b292:	bf00      	nop

0000b294 <USBHwConnect>:
    Connects or disconnects from the USB bus
        
    @param [in] fConnect    If TRUE, connect, otherwise disconnect
 */
void USBHwConnect(BOOL fConnect)
{
    b294:	b580      	push	{r7, lr}
    b296:	b082      	sub	sp, #8
    b298:	af00      	add	r7, sp, #0
    b29a:	6078      	str	r0, [r7, #4]
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    b29c:	687b      	ldr	r3, [r7, #4]
    b29e:	2b00      	cmp	r3, #0
    b2a0:	bf14      	ite	ne
    b2a2:	2301      	movne	r3, #1
    b2a4:	2300      	moveq	r3, #0
    b2a6:	b2db      	uxtb	r3, r3
    b2a8:	b29b      	uxth	r3, r3
    b2aa:	20fe      	movs	r0, #254	; 0xfe
    b2ac:	4619      	mov	r1, r3
    b2ae:	f7ff ff07 	bl	b0c0 <USBHwCmdWrite>
}
    b2b2:	3708      	adds	r7, #8
    b2b4:	46bd      	mov	sp, r7
    b2b6:	bd80      	pop	{r7, pc}

0000b2b8 <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    b2b8:	b580      	push	{r7, lr}
    b2ba:	b082      	sub	sp, #8
    b2bc:	af00      	add	r7, sp, #0
    b2be:	4603      	mov	r3, r0
    b2c0:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    b2c2:	79fb      	ldrb	r3, [r7, #7]
    b2c4:	b29b      	uxth	r3, r3
    b2c6:	20f3      	movs	r0, #243	; 0xf3
    b2c8:	4619      	mov	r1, r3
    b2ca:	f7ff fef9 	bl	b0c0 <USBHwCmdWrite>
}
    b2ce:	3708      	adds	r7, #8
    b2d0:	46bd      	mov	sp, r7
    b2d2:	bd80      	pop	{r7, pc}

0000b2d4 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    b2d4:	b580      	push	{r7, lr}
    b2d6:	b084      	sub	sp, #16
    b2d8:	af00      	add	r7, sp, #0
    b2da:	4603      	mov	r3, r0
    b2dc:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    b2de:	79fb      	ldrb	r3, [r7, #7]
    b2e0:	f003 030f 	and.w	r3, r3, #15
    b2e4:	005b      	lsls	r3, r3, #1
    b2e6:	79fa      	ldrb	r2, [r7, #7]
    b2e8:	09d2      	lsrs	r2, r2, #7
    b2ea:	b2d2      	uxtb	r2, r2
    b2ec:	4313      	orrs	r3, r2
    b2ee:	60fb      	str	r3, [r7, #12]

    return USBHwCmdRead(CMD_EP_SELECT | idx);
    b2f0:	68fb      	ldr	r3, [r7, #12]
    b2f2:	b2db      	uxtb	r3, r3
    b2f4:	4618      	mov	r0, r3
    b2f6:	f7ff fefd 	bl	b0f4 <USBHwCmdRead>
    b2fa:	4603      	mov	r3, r0
}
    b2fc:	4618      	mov	r0, r3
    b2fe:	3710      	adds	r7, #16
    b300:	46bd      	mov	sp, r7
    b302:	bd80      	pop	{r7, pc}

0000b304 <USBHwEPStall>:
        
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    b304:	b580      	push	{r7, lr}
    b306:	b084      	sub	sp, #16
    b308:	af00      	add	r7, sp, #0
    b30a:	4603      	mov	r3, r0
    b30c:	6039      	str	r1, [r7, #0]
    b30e:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    b310:	79fb      	ldrb	r3, [r7, #7]
    b312:	f003 030f 	and.w	r3, r3, #15
    b316:	005b      	lsls	r3, r3, #1
    b318:	79fa      	ldrb	r2, [r7, #7]
    b31a:	09d2      	lsrs	r2, r2, #7
    b31c:	b2d2      	uxtb	r2, r2
    b31e:	4313      	orrs	r3, r2
    b320:	60fb      	str	r3, [r7, #12]

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    b322:	68fb      	ldr	r3, [r7, #12]
    b324:	b2db      	uxtb	r3, r3
    b326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b32a:	b2db      	uxtb	r3, r3
    b32c:	b2da      	uxtb	r2, r3
    b32e:	683b      	ldr	r3, [r7, #0]
    b330:	2b00      	cmp	r3, #0
    b332:	bf14      	ite	ne
    b334:	2301      	movne	r3, #1
    b336:	2300      	moveq	r3, #0
    b338:	b2db      	uxtb	r3, r3
    b33a:	b29b      	uxth	r3, r3
    b33c:	4610      	mov	r0, r2
    b33e:	4619      	mov	r1, r3
    b340:	f7ff febe 	bl	b0c0 <USBHwCmdWrite>
}
    b344:	3710      	adds	r7, #16
    b346:	46bd      	mov	sp, r7
    b348:	bd80      	pop	{r7, pc}
    b34a:	bf00      	nop

0000b34c <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    b34c:	b580      	push	{r7, lr}
    b34e:	b086      	sub	sp, #24
    b350:	af00      	add	r7, sp, #0
    b352:	4603      	mov	r3, r0
    b354:	60b9      	str	r1, [r7, #8]
    b356:	607a      	str	r2, [r7, #4]
    b358:	73fb      	strb	r3, [r7, #15]
    U32 idx;
    
    idx = EP2IDX(bEP);
    b35a:	7bfb      	ldrb	r3, [r7, #15]
    b35c:	f003 030f 	and.w	r3, r3, #15
    b360:	005b      	lsls	r3, r3, #1
    b362:	7bfa      	ldrb	r2, [r7, #15]
    b364:	09d2      	lsrs	r2, r2, #7
    b366:	b2d2      	uxtb	r2, r2
    b368:	4313      	orrs	r3, r2
    b36a:	617b      	str	r3, [r7, #20]
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    b36c:	4a1b      	ldr	r2, [pc, #108]	; (b3dc <USBHwEPWrite+0x90>)
    b36e:	7bfb      	ldrb	r3, [r7, #15]
    b370:	f003 030f 	and.w	r3, r3, #15
    b374:	009b      	lsls	r3, r3, #2
    b376:	f043 0302 	orr.w	r3, r3, #2
    b37a:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    b37c:	4a18      	ldr	r2, [pc, #96]	; (b3e0 <USBHwEPWrite+0x94>)
    b37e:	687b      	ldr	r3, [r7, #4]
    b380:	6013      	str	r3, [r2, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    b382:	e015      	b.n	b3b0 <USBHwEPWrite+0x64>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    b384:	4917      	ldr	r1, [pc, #92]	; (b3e4 <USBHwEPWrite+0x98>)
    b386:	68bb      	ldr	r3, [r7, #8]
    b388:	3303      	adds	r3, #3
    b38a:	781b      	ldrb	r3, [r3, #0]
    b38c:	061a      	lsls	r2, r3, #24
    b38e:	68bb      	ldr	r3, [r7, #8]
    b390:	3302      	adds	r3, #2
    b392:	781b      	ldrb	r3, [r3, #0]
    b394:	041b      	lsls	r3, r3, #16
    b396:	431a      	orrs	r2, r3
    b398:	68bb      	ldr	r3, [r7, #8]
    b39a:	3301      	adds	r3, #1
    b39c:	781b      	ldrb	r3, [r3, #0]
    b39e:	021b      	lsls	r3, r3, #8
    b3a0:	4313      	orrs	r3, r2
    b3a2:	68ba      	ldr	r2, [r7, #8]
    b3a4:	7812      	ldrb	r2, [r2, #0]
    b3a6:	4313      	orrs	r3, r2
    b3a8:	600b      	str	r3, [r1, #0]
        pbBuf += 4;
    b3aa:	68bb      	ldr	r3, [r7, #8]
    b3ac:	3304      	adds	r3, #4
    b3ae:	60bb      	str	r3, [r7, #8]
    
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
    b3b0:	4b0a      	ldr	r3, [pc, #40]	; (b3dc <USBHwEPWrite+0x90>)
    b3b2:	681b      	ldr	r3, [r3, #0]
    b3b4:	f003 0302 	and.w	r3, r3, #2
    b3b8:	2b00      	cmp	r3, #0
    b3ba:	d1e3      	bne.n	b384 <USBHwEPWrite+0x38>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
        pbBuf += 4;
    }

    USBCtrl = 0;
    b3bc:	4b07      	ldr	r3, [pc, #28]	; (b3dc <USBHwEPWrite+0x90>)
    b3be:	2200      	movs	r2, #0
    b3c0:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    b3c2:	697b      	ldr	r3, [r7, #20]
    b3c4:	b2db      	uxtb	r3, r3
    b3c6:	4618      	mov	r0, r3
    b3c8:	f7ff fe62 	bl	b090 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    b3cc:	20fa      	movs	r0, #250	; 0xfa
    b3ce:	f7ff fe5f 	bl	b090 <USBHwCmd>
    
    return iLen;
    b3d2:	687b      	ldr	r3, [r7, #4]
}
    b3d4:	4618      	mov	r0, r3
    b3d6:	3718      	adds	r7, #24
    b3d8:	46bd      	mov	sp, r7
    b3da:	bd80      	pop	{r7, pc}
    b3dc:	5000c228 	.word	0x5000c228
    b3e0:	5000c224 	.word	0x5000c224
    b3e4:	5000c21c 	.word	0x5000c21c

0000b3e8 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    b3e8:	b580      	push	{r7, lr}
    b3ea:	b088      	sub	sp, #32
    b3ec:	af00      	add	r7, sp, #0
    b3ee:	4603      	mov	r3, r0
    b3f0:	60b9      	str	r1, [r7, #8]
    b3f2:	607a      	str	r2, [r7, #4]
    b3f4:	73fb      	strb	r3, [r7, #15]
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    b3f6:	7bfb      	ldrb	r3, [r7, #15]
    b3f8:	f003 030f 	and.w	r3, r3, #15
    b3fc:	005b      	lsls	r3, r3, #1
    b3fe:	7bfa      	ldrb	r2, [r7, #15]
    b400:	09d2      	lsrs	r2, r2, #7
    b402:	b2d2      	uxtb	r2, r2
    b404:	4313      	orrs	r3, r2
    b406:	617b      	str	r3, [r7, #20]
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    b408:	4a27      	ldr	r2, [pc, #156]	; (b4a8 <USBHwEPRead+0xc0>)
    b40a:	7bfb      	ldrb	r3, [r7, #15]
    b40c:	f003 030f 	and.w	r3, r3, #15
    b410:	009b      	lsls	r3, r3, #2
    b412:	f043 0301 	orr.w	r3, r3, #1
    b416:	6013      	str	r3, [r2, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    b418:	4b24      	ldr	r3, [pc, #144]	; (b4ac <USBHwEPRead+0xc4>)
    b41a:	681b      	ldr	r3, [r3, #0]
    b41c:	613b      	str	r3, [r7, #16]
    } while ((dwLen & PKT_RDY) == 0);
    b41e:	693b      	ldr	r3, [r7, #16]
    b420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    b424:	2b00      	cmp	r3, #0
    b426:	d0f7      	beq.n	b418 <USBHwEPRead+0x30>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    b428:	693b      	ldr	r3, [r7, #16]
    b42a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b42e:	2b00      	cmp	r3, #0
    b430:	d102      	bne.n	b438 <USBHwEPRead+0x50>
        return -1;
    b432:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b436:	e033      	b.n	b4a0 <USBHwEPRead+0xb8>
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    b438:	693b      	ldr	r3, [r7, #16]
    b43a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    b43e:	613b      	str	r3, [r7, #16]
    
    // get data
    dwData = 0;
    b440:	2300      	movs	r3, #0
    b442:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < dwLen; i++) {
    b444:	2300      	movs	r3, #0
    b446:	61fb      	str	r3, [r7, #28]
    b448:	e01a      	b.n	b480 <USBHwEPRead+0x98>
        if ((i % 4) == 0) {
    b44a:	69fb      	ldr	r3, [r7, #28]
    b44c:	f003 0303 	and.w	r3, r3, #3
    b450:	2b00      	cmp	r3, #0
    b452:	d102      	bne.n	b45a <USBHwEPRead+0x72>
            dwData = USBRxData;
    b454:	4b16      	ldr	r3, [pc, #88]	; (b4b0 <USBHwEPRead+0xc8>)
    b456:	681b      	ldr	r3, [r3, #0]
    b458:	61bb      	str	r3, [r7, #24]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    b45a:	68bb      	ldr	r3, [r7, #8]
    b45c:	2b00      	cmp	r3, #0
    b45e:	d009      	beq.n	b474 <USBHwEPRead+0x8c>
    b460:	69fa      	ldr	r2, [r7, #28]
    b462:	687b      	ldr	r3, [r7, #4]
    b464:	429a      	cmp	r2, r3
    b466:	d205      	bcs.n	b474 <USBHwEPRead+0x8c>
            pbBuf[i] = dwData & 0xFF;
    b468:	68ba      	ldr	r2, [r7, #8]
    b46a:	69fb      	ldr	r3, [r7, #28]
    b46c:	4413      	add	r3, r2
    b46e:	69ba      	ldr	r2, [r7, #24]
    b470:	b2d2      	uxtb	r2, r2
    b472:	701a      	strb	r2, [r3, #0]
        }
        dwData >>= 8;
    b474:	69bb      	ldr	r3, [r7, #24]
    b476:	0a1b      	lsrs	r3, r3, #8
    b478:	61bb      	str	r3, [r7, #24]
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    b47a:	69fb      	ldr	r3, [r7, #28]
    b47c:	3301      	adds	r3, #1
    b47e:	61fb      	str	r3, [r7, #28]
    b480:	69fa      	ldr	r2, [r7, #28]
    b482:	693b      	ldr	r3, [r7, #16]
    b484:	429a      	cmp	r2, r3
    b486:	d3e0      	bcc.n	b44a <USBHwEPRead+0x62>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    b488:	4b07      	ldr	r3, [pc, #28]	; (b4a8 <USBHwEPRead+0xc0>)
    b48a:	2200      	movs	r2, #0
    b48c:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    b48e:	697b      	ldr	r3, [r7, #20]
    b490:	b2db      	uxtb	r3, r3
    b492:	4618      	mov	r0, r3
    b494:	f7ff fdfc 	bl	b090 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    b498:	20f2      	movs	r0, #242	; 0xf2
    b49a:	f7ff fdf9 	bl	b090 <USBHwCmd>
    
    return dwLen;
    b49e:	693b      	ldr	r3, [r7, #16]
}
    b4a0:	4618      	mov	r0, r3
    b4a2:	3720      	adds	r7, #32
    b4a4:	46bd      	mov	sp, r7
    b4a6:	bd80      	pop	{r7, pc}
    b4a8:	5000c228 	.word	0x5000c228
    b4ac:	5000c220 	.word	0x5000c220
    b4b0:	5000c218 	.word	0x5000c218

0000b4b4 <USBHwConfigDevice>:
    'configured' bit is set in the device status register.
        
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    b4b4:	b580      	push	{r7, lr}
    b4b6:	b082      	sub	sp, #8
    b4b8:	af00      	add	r7, sp, #0
    b4ba:	6078      	str	r0, [r7, #4]
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    b4bc:	687b      	ldr	r3, [r7, #4]
    b4be:	2b00      	cmp	r3, #0
    b4c0:	bf14      	ite	ne
    b4c2:	2301      	movne	r3, #1
    b4c4:	2300      	moveq	r3, #0
    b4c6:	b2db      	uxtb	r3, r3
    b4c8:	b29b      	uxth	r3, r3
    b4ca:	20d8      	movs	r0, #216	; 0xd8
    b4cc:	4619      	mov	r1, r3
    b4ce:	f7ff fdf7 	bl	b0c0 <USBHwCmdWrite>
}
    b4d2:	3708      	adds	r7, #8
    b4d4:	46bd      	mov	sp, r7
    b4d6:	bd80      	pop	{r7, pc}

0000b4d8 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    b4d8:	b580      	push	{r7, lr}
    b4da:	b086      	sub	sp, #24
    b4dc:	af00      	add	r7, sp, #0

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    b4de:	4b5b      	ldr	r3, [pc, #364]	; (b64c <USBHwISR+0x174>)
    b4e0:	681b      	ldr	r3, [r3, #0]
    b4e2:	613b      	str	r3, [r7, #16]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    b4e4:	693b      	ldr	r3, [r7, #16]
    b4e6:	f003 0301 	and.w	r3, r3, #1
    b4ea:	2b00      	cmp	r3, #0
    b4ec:	d010      	beq.n	b510 <USBHwISR+0x38>
        // clear int
        USBDevIntClr = FRAME;
    b4ee:	4b58      	ldr	r3, [pc, #352]	; (b650 <USBHwISR+0x178>)
    b4f0:	2201      	movs	r2, #1
    b4f2:	601a      	str	r2, [r3, #0]
        // call handler
        if (_pfnFrameHandler != NULL) {
    b4f4:	4b57      	ldr	r3, [pc, #348]	; (b654 <USBHwISR+0x17c>)
    b4f6:	681b      	ldr	r3, [r3, #0]
    b4f8:	2b00      	cmp	r3, #0
    b4fa:	d009      	beq.n	b510 <USBHwISR+0x38>
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
    b4fc:	20f5      	movs	r0, #245	; 0xf5
    b4fe:	f7ff fdf9 	bl	b0f4 <USBHwCmdRead>
    b502:	4603      	mov	r3, r0
    b504:	81fb      	strh	r3, [r7, #14]
            _pfnFrameHandler(wFrame);
    b506:	4b53      	ldr	r3, [pc, #332]	; (b654 <USBHwISR+0x17c>)
    b508:	681b      	ldr	r3, [r3, #0]
    b50a:	89fa      	ldrh	r2, [r7, #14]
    b50c:	4610      	mov	r0, r2
    b50e:	4798      	blx	r3
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    b510:	693b      	ldr	r3, [r7, #16]
    b512:	f003 0308 	and.w	r3, r3, #8
    b516:	2b00      	cmp	r3, #0
    b518:	d02b      	beq.n	b572 <USBHwISR+0x9a>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    b51a:	4b4d      	ldr	r3, [pc, #308]	; (b650 <USBHwISR+0x178>)
    b51c:	2208      	movs	r2, #8
    b51e:	601a      	str	r2, [r3, #0]
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
    b520:	20fe      	movs	r0, #254	; 0xfe
    b522:	f7ff fde7 	bl	b0f4 <USBHwCmdRead>
    b526:	4603      	mov	r3, r0
    b528:	737b      	strb	r3, [r7, #13]
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    b52a:	7b7b      	ldrb	r3, [r7, #13]
    b52c:	f003 031a 	and.w	r3, r3, #26
    b530:	2b00      	cmp	r3, #0
    b532:	d01e      	beq.n	b572 <USBHwISR+0x9a>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
    b534:	7b7b      	ldrb	r3, [r7, #13]
    b536:	f003 0301 	and.w	r3, r3, #1
    b53a:	2b00      	cmp	r3, #0
    b53c:	bf14      	ite	ne
    b53e:	2301      	movne	r3, #1
    b540:	2300      	moveq	r3, #0
    b542:	b2db      	uxtb	r3, r3
    b544:	b2da      	uxtb	r2, r3
    b546:	7b7b      	ldrb	r3, [r7, #13]
    b548:	f003 0304 	and.w	r3, r3, #4
    b54c:	b2db      	uxtb	r3, r3
    b54e:	4313      	orrs	r3, r2
    b550:	b2da      	uxtb	r2, r3
    b552:	7b7b      	ldrb	r3, [r7, #13]
    b554:	f003 0310 	and.w	r3, r3, #16
    b558:	b2db      	uxtb	r3, r3
    b55a:	4313      	orrs	r3, r2
    b55c:	b2db      	uxtb	r3, r3
    b55e:	733b      	strb	r3, [r7, #12]
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    b560:	4b3d      	ldr	r3, [pc, #244]	; (b658 <USBHwISR+0x180>)
    b562:	681b      	ldr	r3, [r3, #0]
    b564:	2b00      	cmp	r3, #0
    b566:	d004      	beq.n	b572 <USBHwISR+0x9a>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    b568:	4b3b      	ldr	r3, [pc, #236]	; (b658 <USBHwISR+0x180>)
    b56a:	681b      	ldr	r3, [r3, #0]
    b56c:	7b3a      	ldrb	r2, [r7, #12]
    b56e:	4610      	mov	r0, r2
    b570:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    b572:	693b      	ldr	r3, [r7, #16]
    b574:	f003 0304 	and.w	r3, r3, #4
    b578:	2b00      	cmp	r3, #0
    b57a:	d063      	beq.n	b644 <USBHwISR+0x16c>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    b57c:	4b34      	ldr	r3, [pc, #208]	; (b650 <USBHwISR+0x178>)
    b57e:	2204      	movs	r2, #4
    b580:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    b582:	2300      	movs	r3, #0
    b584:	617b      	str	r3, [r7, #20]
    b586:	e05a      	b.n	b63e <USBHwISR+0x166>
            dwIntBit = (1 << i);
    b588:	2201      	movs	r2, #1
    b58a:	697b      	ldr	r3, [r7, #20]
    b58c:	fa02 f303 	lsl.w	r3, r2, r3
    b590:	60bb      	str	r3, [r7, #8]
            if (USBEpIntSt & dwIntBit) {
    b592:	4b32      	ldr	r3, [pc, #200]	; (b65c <USBHwISR+0x184>)
    b594:	681a      	ldr	r2, [r3, #0]
    b596:	68bb      	ldr	r3, [r7, #8]
    b598:	4013      	ands	r3, r2
    b59a:	2b00      	cmp	r3, #0
    b59c:	d04c      	beq.n	b638 <USBHwISR+0x160>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    b59e:	4a30      	ldr	r2, [pc, #192]	; (b660 <USBHwISR+0x188>)
    b5a0:	68bb      	ldr	r3, [r7, #8]
    b5a2:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    b5a4:	2020      	movs	r0, #32
    b5a6:	f7ff fd5b 	bl	b060 <Wait4DevInt>
                bEPStat = USBCmdData;
    b5aa:	4b2e      	ldr	r3, [pc, #184]	; (b664 <USBHwISR+0x18c>)
    b5ac:	681b      	ldr	r3, [r3, #0]
    b5ae:	71fb      	strb	r3, [r7, #7]
                // convert EP pipe stat into something HW independent
                bStat = ((bEPStat & EPSTAT_FE) ? EP_STATUS_DATA : 0) |
    b5b0:	79fb      	ldrb	r3, [r7, #7]
    b5b2:	f003 0301 	and.w	r3, r3, #1
    b5b6:	2b00      	cmp	r3, #0
    b5b8:	bf14      	ite	ne
    b5ba:	2301      	movne	r3, #1
    b5bc:	2300      	moveq	r3, #0
    b5be:	b2db      	uxtb	r3, r3
    b5c0:	b2da      	uxtb	r2, r3
    b5c2:	79fb      	ldrb	r3, [r7, #7]
    b5c4:	f003 0302 	and.w	r3, r3, #2
    b5c8:	b2db      	uxtb	r3, r3
    b5ca:	4313      	orrs	r3, r2
    b5cc:	b2da      	uxtb	r2, r3
    b5ce:	79fb      	ldrb	r3, [r7, #7]
    b5d0:	f003 0304 	and.w	r3, r3, #4
    b5d4:	b2db      	uxtb	r3, r3
    b5d6:	4313      	orrs	r3, r2
    b5d8:	b2da      	uxtb	r2, r3
    b5da:	79fb      	ldrb	r3, [r7, #7]
    b5dc:	f003 0310 	and.w	r3, r3, #16
    b5e0:	b2db      	uxtb	r3, r3
    b5e2:	4313      	orrs	r3, r2
    b5e4:	b2da      	uxtb	r2, r3
    b5e6:	79fb      	ldrb	r3, [r7, #7]
    b5e8:	f003 0308 	and.w	r3, r3, #8
    b5ec:	b2db      	uxtb	r3, r3
    b5ee:	4313      	orrs	r3, r2
    b5f0:	b2db      	uxtb	r3, r3
    b5f2:	733b      	strb	r3, [r7, #12]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    b5f4:	697b      	ldr	r3, [r7, #20]
    b5f6:	0fda      	lsrs	r2, r3, #31
    b5f8:	4413      	add	r3, r2
    b5fa:	105b      	asrs	r3, r3, #1
    b5fc:	461a      	mov	r2, r3
    b5fe:	4b1a      	ldr	r3, [pc, #104]	; (b668 <USBHwISR+0x190>)
    b600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b604:	2b00      	cmp	r3, #0
    b606:	d017      	beq.n	b638 <USBHwISR+0x160>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    b608:	697b      	ldr	r3, [r7, #20]
    b60a:	0fda      	lsrs	r2, r3, #31
    b60c:	4413      	add	r3, r2
    b60e:	105b      	asrs	r3, r3, #1
    b610:	461a      	mov	r2, r3
    b612:	4b15      	ldr	r3, [pc, #84]	; (b668 <USBHwISR+0x190>)
    b614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b618:	697a      	ldr	r2, [r7, #20]
    b61a:	01d2      	lsls	r2, r2, #7
    b61c:	b2d1      	uxtb	r1, r2
    b61e:	697a      	ldr	r2, [r7, #20]
    b620:	1052      	asrs	r2, r2, #1
    b622:	b2d2      	uxtb	r2, r2
    b624:	f002 020f 	and.w	r2, r2, #15
    b628:	b2d2      	uxtb	r2, r2
    b62a:	430a      	orrs	r2, r1
    b62c:	b2d2      	uxtb	r2, r2
    b62e:	b2d1      	uxtb	r1, r2
    b630:	7b3a      	ldrb	r2, [r7, #12]
    b632:	4608      	mov	r0, r1
    b634:	4611      	mov	r1, r2
    b636:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    b638:	697b      	ldr	r3, [r7, #20]
    b63a:	3301      	adds	r3, #1
    b63c:	617b      	str	r3, [r7, #20]
    b63e:	697b      	ldr	r3, [r7, #20]
    b640:	2b1f      	cmp	r3, #31
    b642:	dda1      	ble.n	b588 <USBHwISR+0xb0>
            }
        }
    }
    
DEBUG_LED_OFF(9);       
}
    b644:	3718      	adds	r7, #24
    b646:	46bd      	mov	sp, r7
    b648:	bd80      	pop	{r7, pc}
    b64a:	bf00      	nop
    b64c:	5000c200 	.word	0x5000c200
    b650:	5000c208 	.word	0x5000c208
    b654:	10000aec 	.word	0x10000aec
    b658:	10000aa8 	.word	0x10000aa8
    b65c:	5000c230 	.word	0x5000c230
    b660:	5000c238 	.word	0x5000c238
    b664:	5000c214 	.word	0x5000c214
    b668:	10000aac 	.word	0x10000aac

0000b66c <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    b66c:	b580      	push	{r7, lr}
    b66e:	af00      	add	r7, sp, #0
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    b670:	4a2d      	ldr	r2, [pc, #180]	; (b728 <USBHwInit+0xbc>)
    b672:	4b2d      	ldr	r3, [pc, #180]	; (b728 <USBHwInit+0xbc>)
    b674:	681b      	ldr	r3, [r3, #0]
    b676:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    b67a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    b67e:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    b680:	4a2a      	ldr	r2, [pc, #168]	; (b72c <USBHwInit+0xc0>)
    b682:	4b2a      	ldr	r3, [pc, #168]	; (b72c <USBHwInit+0xc0>)
    b684:	681b      	ldr	r3, [r3, #0]
    b686:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    b68a:	f043 0310 	orr.w	r3, r3, #16
    b68e:	6013      	str	r3, [r2, #0]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    b690:	4a26      	ldr	r2, [pc, #152]	; (b72c <USBHwInit+0xc0>)
    b692:	4b26      	ldr	r3, [pc, #152]	; (b72c <USBHwInit+0xc0>)
    b694:	681b      	ldr	r3, [r3, #0]
    b696:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    b69a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    b69e:	6013      	str	r3, [r2, #0]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    b6a0:	4a23      	ldr	r2, [pc, #140]	; (b730 <USBHwInit+0xc4>)
    b6a2:	4b23      	ldr	r3, [pc, #140]	; (b730 <USBHwInit+0xc4>)
    b6a4:	681b      	ldr	r3, [r3, #0]
    b6a6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    b6aa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    b6ae:	6013      	str	r3, [r2, #0]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    b6b0:	4a1f      	ldr	r2, [pc, #124]	; (b730 <USBHwInit+0xc4>)
    b6b2:	4b1f      	ldr	r3, [pc, #124]	; (b730 <USBHwInit+0xc4>)
    b6b4:	681b      	ldr	r3, [r3, #0]
    b6b6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    b6ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    b6be:	6013      	str	r3, [r2, #0]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    b6c0:	4a1c      	ldr	r2, [pc, #112]	; (b734 <USBHwInit+0xc8>)
    b6c2:	4b1c      	ldr	r3, [pc, #112]	; (b734 <USBHwInit+0xc8>)
    b6c4:	681b      	ldr	r3, [r3, #0]
    b6c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b6ca:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    b6cc:	4a1a      	ldr	r2, [pc, #104]	; (b738 <USBHwInit+0xcc>)
    b6ce:	4b1a      	ldr	r3, [pc, #104]	; (b738 <USBHwInit+0xcc>)
    b6d0:	681b      	ldr	r3, [r3, #0]
    b6d2:	f043 0312 	orr.w	r3, r3, #18
    b6d6:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    b6d8:	bf00      	nop
    b6da:	4b18      	ldr	r3, [pc, #96]	; (b73c <USBHwInit+0xd0>)
    b6dc:	681b      	ldr	r3, [r3, #0]
    b6de:	f003 0302 	and.w	r3, r3, #2
    b6e2:	2b00      	cmp	r3, #0
    b6e4:	d0f9      	beq.n	b6da <USBHwInit+0x6e>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    b6e6:	bf00      	nop
    b6e8:	4b14      	ldr	r3, [pc, #80]	; (b73c <USBHwInit+0xd0>)
    b6ea:	681b      	ldr	r3, [r3, #0]
    b6ec:	f003 0310 	and.w	r3, r3, #16
    b6f0:	2b00      	cmp	r3, #0
    b6f2:	d0f9      	beq.n	b6e8 <USBHwInit+0x7c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    b6f4:	4b12      	ldr	r3, [pc, #72]	; (b740 <USBHwInit+0xd4>)
    b6f6:	2200      	movs	r2, #0
    b6f8:	601a      	str	r2, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    b6fa:	4b12      	ldr	r3, [pc, #72]	; (b744 <USBHwInit+0xd8>)
    b6fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b700:	601a      	str	r2, [r3, #0]
    USBDevIntPri = 0;
    b702:	4b11      	ldr	r3, [pc, #68]	; (b748 <USBHwInit+0xdc>)
    b704:	2200      	movs	r2, #0
    b706:	601a      	str	r2, [r3, #0]

    USBEpIntEn = 0;
    b708:	4b10      	ldr	r3, [pc, #64]	; (b74c <USBHwInit+0xe0>)
    b70a:	2200      	movs	r2, #0
    b70c:	601a      	str	r2, [r3, #0]
    USBEpIntClr = 0xFFFFFFFF;
    b70e:	4b10      	ldr	r3, [pc, #64]	; (b750 <USBHwInit+0xe4>)
    b710:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b714:	601a      	str	r2, [r3, #0]
    USBEpIntPri = 0;
    b716:	4b0f      	ldr	r3, [pc, #60]	; (b754 <USBHwInit+0xe8>)
    b718:	2200      	movs	r2, #0
    b71a:	601a      	str	r2, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    b71c:	2000      	movs	r0, #0
    b71e:	f7ff fdcb 	bl	b2b8 <USBHwNakIntEnable>
    // init debug leds
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
    b722:	2301      	movs	r3, #1
}
    b724:	4618      	mov	r0, r3
    b726:	bd80      	pop	{r7, pc}
    b728:	4002c010 	.word	0x4002c010
    b72c:	4002c00c 	.word	0x4002c00c
    b730:	4002c004 	.word	0x4002c004
    b734:	400fc0c4 	.word	0x400fc0c4
    b738:	5000cff4 	.word	0x5000cff4
    b73c:	5000cff8 	.word	0x5000cff8
    b740:	5000c204 	.word	0x5000c204
    b744:	5000c208 	.word	0x5000c208
    b748:	5000c22c 	.word	0x5000c22c
    b74c:	5000c234 	.word	0x5000c234
    b750:	5000c238 	.word	0x5000c238
    b754:	5000c240 	.word	0x5000c240

0000b758 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    b758:	b480      	push	{r7}
    b75a:	b089      	sub	sp, #36	; 0x24
    b75c:	af00      	add	r7, sp, #0
    b75e:	60f8      	str	r0, [r7, #12]
    b760:	60b9      	str	r1, [r7, #8]
    b762:	607a      	str	r2, [r7, #4]
    b764:	603b      	str	r3, [r7, #0]
	if(bMsVendorIndex == 0)	{
    b766:	4b2d      	ldr	r3, [pc, #180]	; (b81c <USBFilterOsVendorMessage+0xc4>)
    b768:	781b      	ldrb	r3, [r3, #0]
    b76a:	2b00      	cmp	r3, #0
    b76c:	d101      	bne.n	b772 <USBFilterOsVendorMessage+0x1a>
		// Feature is disabled.
		return FALSE;
    b76e:	2300      	movs	r3, #0
    b770:	e04e      	b.n	b810 <USBFilterOsVendorMessage+0xb8>
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    b772:	68fb      	ldr	r3, [r7, #12]
    b774:	785a      	ldrb	r2, [r3, #1]
    b776:	4b29      	ldr	r3, [pc, #164]	; (b81c <USBFilterOsVendorMessage+0xc4>)
    b778:	781b      	ldrb	r3, [r3, #0]
    b77a:	429a      	cmp	r2, r3
    b77c:	d147      	bne.n	b80e <USBFilterOsVendorMessage+0xb6>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    b77e:	68bb      	ldr	r3, [r7, #8]
    b780:	2200      	movs	r2, #0
    b782:	601a      	str	r2, [r3, #0]
	
		int iRequestLength = pSetup->wLength;
    b784:	68fb      	ldr	r3, [r7, #12]
    b786:	88db      	ldrh	r3, [r3, #6]
    b788:	61fb      	str	r3, [r7, #28]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
    b78a:	68fb      	ldr	r3, [r7, #12]
    b78c:	885b      	ldrh	r3, [r3, #2]
    b78e:	76fb      	strb	r3, [r7, #27]
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    b790:	68fb      	ldr	r3, [r7, #12]
    b792:	885b      	ldrh	r3, [r3, #2]
    b794:	0a1b      	lsrs	r3, r3, #8
    b796:	b29b      	uxth	r3, r3
    b798:	76bb      	strb	r3, [r7, #26]
	
		switch (pSetup->wIndex) {
    b79a:	68fb      	ldr	r3, [r7, #12]
    b79c:	889b      	ldrh	r3, [r3, #4]
    b79e:	2b04      	cmp	r3, #4
    b7a0:	d002      	beq.n	b7a8 <USBFilterOsVendorMessage+0x50>
    b7a2:	2b05      	cmp	r3, #5
    b7a4:	d007      	beq.n	b7b6 <USBFilterOsVendorMessage+0x5e>
    b7a6:	e00d      	b.n	b7c4 <USBFilterOsVendorMessage+0x6c>
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    b7a8:	683b      	ldr	r3, [r7, #0]
    b7aa:	4a1d      	ldr	r2, [pc, #116]	; (b820 <USBFilterOsVendorMessage+0xc8>)
    b7ac:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    b7ae:	687b      	ldr	r3, [r7, #4]
    b7b0:	2228      	movs	r2, #40	; 0x28
    b7b2:	601a      	str	r2, [r3, #0]
			break;
    b7b4:	e008      	b.n	b7c8 <USBFilterOsVendorMessage+0x70>
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    b7b6:	683b      	ldr	r3, [r7, #0]
    b7b8:	4a1a      	ldr	r2, [pc, #104]	; (b824 <USBFilterOsVendorMessage+0xcc>)
    b7ba:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    b7bc:	687b      	ldr	r3, [r7, #4]
    b7be:	2292      	movs	r2, #146	; 0x92
    b7c0:	601a      	str	r2, [r3, #0]
			break;
    b7c2:	e001      	b.n	b7c8 <USBFilterOsVendorMessage+0x70>

		default:
			return TRUE;
    b7c4:	2301      	movs	r3, #1
    b7c6:	e023      	b.n	b810 <USBFilterOsVendorMessage+0xb8>
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    b7c8:	7ebb      	ldrb	r3, [r7, #26]
    b7ca:	041b      	lsls	r3, r3, #16
    b7cc:	617b      	str	r3, [r7, #20]
		if (*piLen < iPageOffset) {
    b7ce:	687b      	ldr	r3, [r7, #4]
    b7d0:	681a      	ldr	r2, [r3, #0]
    b7d2:	697b      	ldr	r3, [r7, #20]
    b7d4:	429a      	cmp	r2, r3
    b7d6:	da01      	bge.n	b7dc <USBFilterOsVendorMessage+0x84>
			// Not enough data for the requested offset.
			return TRUE;
    b7d8:	2301      	movs	r3, #1
    b7da:	e019      	b.n	b810 <USBFilterOsVendorMessage+0xb8>
		}
		*ppbData += iPageOffset;
    b7dc:	683b      	ldr	r3, [r7, #0]
    b7de:	681a      	ldr	r2, [r3, #0]
    b7e0:	697b      	ldr	r3, [r7, #20]
    b7e2:	441a      	add	r2, r3
    b7e4:	683b      	ldr	r3, [r7, #0]
    b7e6:	601a      	str	r2, [r3, #0]
		*piLen -= iPageOffset;
    b7e8:	687b      	ldr	r3, [r7, #4]
    b7ea:	681a      	ldr	r2, [r3, #0]
    b7ec:	697b      	ldr	r3, [r7, #20]
    b7ee:	1ad2      	subs	r2, r2, r3
    b7f0:	687b      	ldr	r3, [r7, #4]
    b7f2:	601a      	str	r2, [r3, #0]
		
		if (*piLen > iRequestLength) {
    b7f4:	687b      	ldr	r3, [r7, #4]
    b7f6:	681a      	ldr	r2, [r3, #0]
    b7f8:	69fb      	ldr	r3, [r7, #28]
    b7fa:	429a      	cmp	r2, r3
    b7fc:	dd02      	ble.n	b804 <USBFilterOsVendorMessage+0xac>
			// Clip data longer than the requested length
			*piLen = iRequestLength;
    b7fe:	687b      	ldr	r3, [r7, #4]
    b800:	69fa      	ldr	r2, [r7, #28]
    b802:	601a      	str	r2, [r3, #0]
		}
	
		*pfSuccess = TRUE;
    b804:	68bb      	ldr	r3, [r7, #8]
    b806:	2201      	movs	r2, #1
    b808:	601a      	str	r2, [r3, #0]
		return TRUE;
    b80a:	2301      	movs	r3, #1
    b80c:	e000      	b.n	b810 <USBFilterOsVendorMessage+0xb8>
	}
	
	// These are not the requests you are looking for
	return FALSE;
    b80e:	2300      	movs	r3, #0
}
    b810:	4618      	mov	r0, r3
    b812:	3724      	adds	r7, #36	; 0x24
    b814:	46bd      	mov	sp, r7
    b816:	f85d 7b04 	ldr.w	r7, [sp], #4
    b81a:	4770      	bx	lr
    b81c:	10000afc 	.word	0x10000afc
    b820:	0000d104 	.word	0x0000d104
    b824:	100008cc 	.word	0x100008cc

0000b828 <USBRegisterWinusbInterface>:
	@param [in]		pcInterfaceGuid			ASCII String GUID in curly braces
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
    b828:	b480      	push	{r7}
    b82a:	b087      	sub	sp, #28
    b82c:	af00      	add	r7, sp, #0
    b82e:	4603      	mov	r3, r0
    b830:	6039      	str	r1, [r7, #0]
    b832:	71fb      	strb	r3, [r7, #7]
	bMsVendorIndex = bVendorRequestIndex;
    b834:	4a18      	ldr	r2, [pc, #96]	; (b898 <USBRegisterWinusbInterface+0x70>)
    b836:	79fb      	ldrb	r3, [r7, #7]
    b838:	7013      	strb	r3, [r2, #0]
	
	if(!pcInterfaceGuid) {
    b83a:	683b      	ldr	r3, [r7, #0]
    b83c:	2b00      	cmp	r3, #0
    b83e:	d100      	bne.n	b842 <USBRegisterWinusbInterface+0x1a>
		return; // Trust that caller is actually specifying this with nonzero RequestIndex.
    b840:	e024      	b.n	b88c <USBRegisterWinusbInterface+0x64>
	}
	
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
    b842:	4b16      	ldr	r3, [pc, #88]	; (b89c <USBRegisterWinusbInterface+0x74>)
    b844:	617b      	str	r3, [r7, #20]
	const int ciMaxLength = 38;
    b846:	2326      	movs	r3, #38	; 0x26
    b848:	60fb      	str	r3, [r7, #12]
	
	for(int i = 0; i < ciMaxLength; i++) {
    b84a:	2300      	movs	r3, #0
    b84c:	613b      	str	r3, [r7, #16]
    b84e:	e012      	b.n	b876 <USBRegisterWinusbInterface+0x4e>
		if(!pcInterfaceGuid[i]) break;
    b850:	693b      	ldr	r3, [r7, #16]
    b852:	683a      	ldr	r2, [r7, #0]
    b854:	4413      	add	r3, r2
    b856:	781b      	ldrb	r3, [r3, #0]
    b858:	2b00      	cmp	r3, #0
    b85a:	d100      	bne.n	b85e <USBRegisterWinusbInterface+0x36>
    b85c:	e00f      	b.n	b87e <USBRegisterWinusbInterface+0x56>
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    b85e:	693b      	ldr	r3, [r7, #16]
    b860:	683a      	ldr	r2, [r7, #0]
    b862:	4413      	add	r3, r2
    b864:	781a      	ldrb	r2, [r3, #0]
    b866:	697b      	ldr	r3, [r7, #20]
    b868:	701a      	strb	r2, [r3, #0]
		pbWriteCursor += 2;
    b86a:	697b      	ldr	r3, [r7, #20]
    b86c:	3302      	adds	r3, #2
    b86e:	617b      	str	r3, [r7, #20]
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    b870:	693b      	ldr	r3, [r7, #16]
    b872:	3301      	adds	r3, #1
    b874:	613b      	str	r3, [r7, #16]
    b876:	693a      	ldr	r2, [r7, #16]
    b878:	68fb      	ldr	r3, [r7, #12]
    b87a:	429a      	cmp	r2, r3
    b87c:	dbe8      	blt.n	b850 <USBRegisterWinusbInterface+0x28>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    b87e:	697b      	ldr	r3, [r7, #20]
    b880:	2200      	movs	r2, #0
    b882:	701a      	strb	r2, [r3, #0]
	pbWriteCursor[2] = 0;
    b884:	697b      	ldr	r3, [r7, #20]
    b886:	3302      	adds	r3, #2
    b888:	2200      	movs	r2, #0
    b88a:	701a      	strb	r2, [r3, #0]
	
}
    b88c:	371c      	adds	r7, #28
    b88e:	46bd      	mov	sp, r7
    b890:	f85d 7b04 	ldr.w	r7, [sp], #4
    b894:	4770      	bx	lr
    b896:	bf00      	nop
    b898:	10000afc 	.word	0x10000afc
    b89c:	1000090e 	.word	0x1000090e

0000b8a0 <USBGetOsStringDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
    b8a0:	b480      	push	{r7}
    b8a2:	b083      	sub	sp, #12
    b8a4:	af00      	add	r7, sp, #0
    b8a6:	6078      	str	r0, [r7, #4]
    b8a8:	6039      	str	r1, [r7, #0]
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    b8aa:	4b08      	ldr	r3, [pc, #32]	; (b8cc <USBGetOsStringDescriptor+0x2c>)
    b8ac:	781a      	ldrb	r2, [r3, #0]
    b8ae:	4b08      	ldr	r3, [pc, #32]	; (b8d0 <USBGetOsStringDescriptor+0x30>)
    b8b0:	741a      	strb	r2, [r3, #16]
	
	*ppbData = abOsStringDescriptor;
    b8b2:	683b      	ldr	r3, [r7, #0]
    b8b4:	4a06      	ldr	r2, [pc, #24]	; (b8d0 <USBGetOsStringDescriptor+0x30>)
    b8b6:	601a      	str	r2, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    b8b8:	687b      	ldr	r3, [r7, #4]
    b8ba:	2212      	movs	r2, #18
    b8bc:	601a      	str	r2, [r3, #0]
	return TRUE;
    b8be:	2301      	movs	r3, #1
}
    b8c0:	4618      	mov	r0, r3
    b8c2:	370c      	adds	r7, #12
    b8c4:	46bd      	mov	sp, r7
    b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8ca:	4770      	bx	lr
    b8cc:	10000afc 	.word	0x10000afc
    b8d0:	100008b8 	.word	0x100008b8

0000b8d4 <USBRegisterDescriptors>:
	for the device.

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(const U8 *pabDescriptors)
{
    b8d4:	b480      	push	{r7}
    b8d6:	b083      	sub	sp, #12
    b8d8:	af00      	add	r7, sp, #0
    b8da:	6078      	str	r0, [r7, #4]
	pabDescrip = pabDescriptors;
    b8dc:	4a03      	ldr	r2, [pc, #12]	; (b8ec <USBRegisterDescriptors+0x18>)
    b8de:	687b      	ldr	r3, [r7, #4]
    b8e0:	6013      	str	r3, [r2, #0]
}
    b8e2:	370c      	adds	r7, #12
    b8e4:	46bd      	mov	sp, r7
    b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
    b8ea:	4770      	bx	lr
    b8ec:	10000af8 	.word	0x10000af8

0000b8f0 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    b8f0:	b580      	push	{r7, lr}
    b8f2:	b088      	sub	sp, #32
    b8f4:	af00      	add	r7, sp, #0
    b8f6:	60ba      	str	r2, [r7, #8]
    b8f8:	607b      	str	r3, [r7, #4]
    b8fa:	4603      	mov	r3, r0
    b8fc:	81fb      	strh	r3, [r7, #14]
    b8fe:	460b      	mov	r3, r1
    b900:	81bb      	strh	r3, [r7, #12]
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    b902:	89fb      	ldrh	r3, [r7, #14]
    b904:	0a1b      	lsrs	r3, r3, #8
    b906:	b29b      	uxth	r3, r3
    b908:	75fb      	strb	r3, [r7, #23]
	bIndex = GET_DESC_INDEX(wTypeIndex);
    b90a:	89fb      	ldrh	r3, [r7, #14]
    b90c:	75bb      	strb	r3, [r7, #22]
	
    if (bType == DESC_STRING &&
    b90e:	7dfb      	ldrb	r3, [r7, #23]
    b910:	2b03      	cmp	r3, #3
    b912:	d10b      	bne.n	b92c <USBGetDescriptor+0x3c>
    b914:	7dbb      	ldrb	r3, [r7, #22]
    b916:	2bee      	cmp	r3, #238	; 0xee
    b918:	d108      	bne.n	b92c <USBGetDescriptor+0x3c>
        bIndex == DESC_STRING_OS) {
        
        if (USBGetOsStringDescriptor(piLen, ppbData)) {
    b91a:	68b8      	ldr	r0, [r7, #8]
    b91c:	6879      	ldr	r1, [r7, #4]
    b91e:	f7ff ffbf 	bl	b8a0 <USBGetOsStringDescriptor>
    b922:	4603      	mov	r3, r0
    b924:	2b00      	cmp	r3, #0
    b926:	d001      	beq.n	b92c <USBGetDescriptor+0x3c>
            
            return TRUE;
    b928:	2301      	movs	r3, #1
    b92a:	e036      	b.n	b99a <USBGetDescriptor+0xaa>
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    b92c:	4b1d      	ldr	r3, [pc, #116]	; (b9a4 <USBGetDescriptor+0xb4>)
    b92e:	681b      	ldr	r3, [r3, #0]
    b930:	61fb      	str	r3, [r7, #28]
	iCurIndex = 0;
    b932:	2300      	movs	r3, #0
    b934:	61bb      	str	r3, [r7, #24]
	
	while (pab[DESC_bLength] != 0) {
    b936:	e02b      	b.n	b990 <USBGetDescriptor+0xa0>
		if (pab[DESC_bDescriptorType] == bType) {
    b938:	69fb      	ldr	r3, [r7, #28]
    b93a:	3301      	adds	r3, #1
    b93c:	781b      	ldrb	r3, [r3, #0]
    b93e:	7dfa      	ldrb	r2, [r7, #23]
    b940:	429a      	cmp	r2, r3
    b942:	d11f      	bne.n	b984 <USBGetDescriptor+0x94>
			if (iCurIndex == bIndex) {
    b944:	7dba      	ldrb	r2, [r7, #22]
    b946:	69bb      	ldr	r3, [r7, #24]
    b948:	429a      	cmp	r2, r3
    b94a:	d118      	bne.n	b97e <USBGetDescriptor+0x8e>
				// set data pointer
				*ppbData = pab;
    b94c:	687b      	ldr	r3, [r7, #4]
    b94e:	69fa      	ldr	r2, [r7, #28]
    b950:	601a      	str	r2, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    b952:	7dfb      	ldrb	r3, [r7, #23]
    b954:	2b02      	cmp	r3, #2
    b956:	d10b      	bne.n	b970 <USBGetDescriptor+0x80>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    b958:	69fb      	ldr	r3, [r7, #28]
    b95a:	3302      	adds	r3, #2
    b95c:	781b      	ldrb	r3, [r3, #0]
    b95e:	461a      	mov	r2, r3
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    b960:	69fb      	ldr	r3, [r7, #28]
    b962:	3303      	adds	r3, #3
    b964:	781b      	ldrb	r3, [r3, #0]
    b966:	021b      	lsls	r3, r3, #8
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    b968:	431a      	orrs	r2, r3
    b96a:	68bb      	ldr	r3, [r7, #8]
    b96c:	601a      	str	r2, [r3, #0]
    b96e:	e004      	b.n	b97a <USBGetDescriptor+0x8a>
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    b970:	69fb      	ldr	r3, [r7, #28]
    b972:	781b      	ldrb	r3, [r3, #0]
    b974:	461a      	mov	r2, r3
    b976:	68bb      	ldr	r3, [r7, #8]
    b978:	601a      	str	r2, [r3, #0]
				}
				return TRUE;
    b97a:	2301      	movs	r3, #1
    b97c:	e00d      	b.n	b99a <USBGetDescriptor+0xaa>
			}
			iCurIndex++;
    b97e:	69bb      	ldr	r3, [r7, #24]
    b980:	3301      	adds	r3, #1
    b982:	61bb      	str	r3, [r7, #24]
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    b984:	69fb      	ldr	r3, [r7, #28]
    b986:	781b      	ldrb	r3, [r3, #0]
    b988:	461a      	mov	r2, r3
    b98a:	69fb      	ldr	r3, [r7, #28]
    b98c:	4413      	add	r3, r2
    b98e:	61fb      	str	r3, [r7, #28]
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    b990:	69fb      	ldr	r3, [r7, #28]
    b992:	781b      	ldrb	r3, [r3, #0]
    b994:	2b00      	cmp	r3, #0
    b996:	d1cf      	bne.n	b938 <USBGetDescriptor+0x48>
		// skip to next descriptor
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
    b998:	2300      	movs	r3, #0
}
    b99a:	4618      	mov	r0, r3
    b99c:	3720      	adds	r7, #32
    b99e:	46bd      	mov	sp, r7
    b9a0:	bd80      	pop	{r7, pc}
    b9a2:	bf00      	nop
    b9a4:	10000af8 	.word	0x10000af8

0000b9a8 <USBSetConfiguration>:
	@todo function always returns TRUE, add stricter checking?
	
	@return TRUE if successfully configured, FALSE otherwise
 */
static BOOL USBSetConfiguration(U8 bConfigIndex, U8 bAltSetting)
{
    b9a8:	b580      	push	{r7, lr}
    b9aa:	b086      	sub	sp, #24
    b9ac:	af00      	add	r7, sp, #0
    b9ae:	4603      	mov	r3, r0
    b9b0:	460a      	mov	r2, r1
    b9b2:	71fb      	strb	r3, [r7, #7]
    b9b4:	4613      	mov	r3, r2
    b9b6:	71bb      	strb	r3, [r7, #6]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    b9b8:	79fb      	ldrb	r3, [r7, #7]
    b9ba:	2b00      	cmp	r3, #0
    b9bc:	d103      	bne.n	b9c6 <USBSetConfiguration+0x1e>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    b9be:	2000      	movs	r0, #0
    b9c0:	f7ff fd78 	bl	b4b4 <USBHwConfigDevice>
    b9c4:	e045      	b.n	ba52 <USBSetConfiguration+0xaa>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    b9c6:	4b25      	ldr	r3, [pc, #148]	; (ba5c <USBSetConfiguration+0xb4>)
    b9c8:	681b      	ldr	r3, [r3, #0]
    b9ca:	617b      	str	r3, [r7, #20]
		bCurConfig = 0xFF;
    b9cc:	23ff      	movs	r3, #255	; 0xff
    b9ce:	74fb      	strb	r3, [r7, #19]
		bCurAltSetting = 0xFF;
    b9d0:	23ff      	movs	r3, #255	; 0xff
    b9d2:	74bb      	strb	r3, [r7, #18]

		while (pab[DESC_bLength] != 0) {
    b9d4:	e036      	b.n	ba44 <USBSetConfiguration+0x9c>

			switch (pab[DESC_bDescriptorType]) {
    b9d6:	697b      	ldr	r3, [r7, #20]
    b9d8:	3301      	adds	r3, #1
    b9da:	781b      	ldrb	r3, [r3, #0]
    b9dc:	2b04      	cmp	r3, #4
    b9de:	d008      	beq.n	b9f2 <USBSetConfiguration+0x4a>
    b9e0:	2b05      	cmp	r3, #5
    b9e2:	d00a      	beq.n	b9fa <USBSetConfiguration+0x52>
    b9e4:	2b02      	cmp	r3, #2
    b9e6:	d000      	beq.n	b9ea <USBSetConfiguration+0x42>
					USBHwEPConfig(bEP, wMaxPktSize);
				}
				break;

			default:
				break;
    b9e8:	e026      	b.n	ba38 <USBSetConfiguration+0x90>

			switch (pab[DESC_bDescriptorType]) {

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    b9ea:	697b      	ldr	r3, [r7, #20]
    b9ec:	795b      	ldrb	r3, [r3, #5]
    b9ee:	74fb      	strb	r3, [r7, #19]
				break;
    b9f0:	e022      	b.n	ba38 <USBSetConfiguration+0x90>

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    b9f2:	697b      	ldr	r3, [r7, #20]
    b9f4:	78db      	ldrb	r3, [r3, #3]
    b9f6:	74bb      	strb	r3, [r7, #18]
				break;
    b9f8:	e01e      	b.n	ba38 <USBSetConfiguration+0x90>

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    b9fa:	7cfa      	ldrb	r2, [r7, #19]
    b9fc:	79fb      	ldrb	r3, [r7, #7]
    b9fe:	429a      	cmp	r2, r3
    ba00:	d119      	bne.n	ba36 <USBSetConfiguration+0x8e>
    ba02:	7cba      	ldrb	r2, [r7, #18]
    ba04:	79bb      	ldrb	r3, [r7, #6]
    ba06:	429a      	cmp	r2, r3
    ba08:	d115      	bne.n	ba36 <USBSetConfiguration+0x8e>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
    ba0a:	697b      	ldr	r3, [r7, #20]
    ba0c:	789b      	ldrb	r3, [r3, #2]
    ba0e:	747b      	strb	r3, [r7, #17]
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    ba10:	697b      	ldr	r3, [r7, #20]
    ba12:	3304      	adds	r3, #4
    ba14:	781b      	ldrb	r3, [r3, #0]
    ba16:	b29a      	uxth	r2, r3
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    ba18:	697b      	ldr	r3, [r7, #20]
    ba1a:	3305      	adds	r3, #5
    ba1c:	781b      	ldrb	r3, [r3, #0]
    ba1e:	021b      	lsls	r3, r3, #8
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    ba20:	b29b      	uxth	r3, r3
    ba22:	4313      	orrs	r3, r2
    ba24:	b29b      	uxth	r3, r3
    ba26:	81fb      	strh	r3, [r7, #14]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    ba28:	7c7a      	ldrb	r2, [r7, #17]
    ba2a:	89fb      	ldrh	r3, [r7, #14]
    ba2c:	4610      	mov	r0, r2
    ba2e:	4619      	mov	r1, r3
    ba30:	f7ff fbb8 	bl	b1a4 <USBHwEPConfig>
				}
				break;
    ba34:	e7ff      	b.n	ba36 <USBSetConfiguration+0x8e>
    ba36:	bf00      	nop

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    ba38:	697b      	ldr	r3, [r7, #20]
    ba3a:	781b      	ldrb	r3, [r3, #0]
    ba3c:	461a      	mov	r2, r3
    ba3e:	697b      	ldr	r3, [r7, #20]
    ba40:	4413      	add	r3, r2
    ba42:	617b      	str	r3, [r7, #20]
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    ba44:	697b      	ldr	r3, [r7, #20]
    ba46:	781b      	ldrb	r3, [r3, #0]
    ba48:	2b00      	cmp	r3, #0
    ba4a:	d1c4      	bne.n	b9d6 <USBSetConfiguration+0x2e>
			// skip to next descriptor
			pab += pab[DESC_bLength];
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    ba4c:	2001      	movs	r0, #1
    ba4e:	f7ff fd31 	bl	b4b4 <USBHwConfigDevice>
	}

	return TRUE;
    ba52:	2301      	movs	r3, #1
}
    ba54:	4618      	mov	r0, r3
    ba56:	3718      	adds	r7, #24
    ba58:	46bd      	mov	sp, r7
    ba5a:	bd80      	pop	{r7, pc}
    ba5c:	10000af8 	.word	0x10000af8

0000ba60 <HandleStdDeviceReq>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    ba60:	b580      	push	{r7, lr}
    ba62:	b086      	sub	sp, #24
    ba64:	af00      	add	r7, sp, #0
    ba66:	60f8      	str	r0, [r7, #12]
    ba68:	60b9      	str	r1, [r7, #8]
    ba6a:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    ba6c:	687b      	ldr	r3, [r7, #4]
    ba6e:	681b      	ldr	r3, [r3, #0]
    ba70:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    ba72:	68fb      	ldr	r3, [r7, #12]
    ba74:	785b      	ldrb	r3, [r3, #1]
    ba76:	2b09      	cmp	r3, #9
    ba78:	d852      	bhi.n	bb20 <HandleStdDeviceReq+0xc0>
    ba7a:	a201      	add	r2, pc, #4	; (adr r2, ba80 <HandleStdDeviceReq+0x20>)
    ba7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ba80:	0000baa9 	.word	0x0000baa9
    ba84:	0000bb19 	.word	0x0000bb19
    ba88:	0000bb21 	.word	0x0000bb21
    ba8c:	0000bb19 	.word	0x0000bb19
    ba90:	0000bb21 	.word	0x0000bb21
    ba94:	0000babf 	.word	0x0000babf
    ba98:	0000bacd 	.word	0x0000bacd
    ba9c:	0000bb1d 	.word	0x0000bb1d
    baa0:	0000bae5 	.word	0x0000bae5
    baa4:	0000baf5 	.word	0x0000baf5
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    baa8:	697b      	ldr	r3, [r7, #20]
    baaa:	2200      	movs	r2, #0
    baac:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    baae:	697b      	ldr	r3, [r7, #20]
    bab0:	3301      	adds	r3, #1
    bab2:	2200      	movs	r2, #0
    bab4:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    bab6:	68bb      	ldr	r3, [r7, #8]
    bab8:	2202      	movs	r2, #2
    baba:	601a      	str	r2, [r3, #0]
		break;
    babc:	e032      	b.n	bb24 <HandleStdDeviceReq+0xc4>
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    babe:	68fb      	ldr	r3, [r7, #12]
    bac0:	885b      	ldrh	r3, [r3, #2]
    bac2:	b2db      	uxtb	r3, r3
    bac4:	4618      	mov	r0, r3
    bac6:	f7ff fbd3 	bl	b270 <USBHwSetAddress>
		break;
    baca:	e02b      	b.n	bb24 <HandleStdDeviceReq+0xc4>

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    bacc:	68fb      	ldr	r3, [r7, #12]
    bace:	885a      	ldrh	r2, [r3, #2]
    bad0:	68fb      	ldr	r3, [r7, #12]
    bad2:	889b      	ldrh	r3, [r3, #4]
    bad4:	4610      	mov	r0, r2
    bad6:	4619      	mov	r1, r3
    bad8:	68ba      	ldr	r2, [r7, #8]
    bada:	687b      	ldr	r3, [r7, #4]
    badc:	f7ff ff08 	bl	b8f0 <USBGetDescriptor>
    bae0:	4603      	mov	r3, r0
    bae2:	e020      	b.n	bb26 <HandleStdDeviceReq+0xc6>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    bae4:	4b12      	ldr	r3, [pc, #72]	; (bb30 <HandleStdDeviceReq+0xd0>)
    bae6:	781a      	ldrb	r2, [r3, #0]
    bae8:	697b      	ldr	r3, [r7, #20]
    baea:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    baec:	68bb      	ldr	r3, [r7, #8]
    baee:	2201      	movs	r2, #1
    baf0:	601a      	str	r2, [r3, #0]
		break;
    baf2:	e017      	b.n	bb24 <HandleStdDeviceReq+0xc4>

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    baf4:	68fb      	ldr	r3, [r7, #12]
    baf6:	885b      	ldrh	r3, [r3, #2]
    baf8:	b2db      	uxtb	r3, r3
    bafa:	4618      	mov	r0, r3
    bafc:	2100      	movs	r1, #0
    bafe:	f7ff ff53 	bl	b9a8 <USBSetConfiguration>
    bb02:	4603      	mov	r3, r0
    bb04:	2b00      	cmp	r3, #0
    bb06:	d101      	bne.n	bb0c <HandleStdDeviceReq+0xac>
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
    bb08:	2300      	movs	r3, #0
    bb0a:	e00c      	b.n	bb26 <HandleStdDeviceReq+0xc6>
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    bb0c:	68fb      	ldr	r3, [r7, #12]
    bb0e:	885b      	ldrh	r3, [r3, #2]
    bb10:	b2da      	uxtb	r2, r3
    bb12:	4b07      	ldr	r3, [pc, #28]	; (bb30 <HandleStdDeviceReq+0xd0>)
    bb14:	701a      	strb	r2, [r3, #0]
		break;
    bb16:	e005      	b.n	bb24 <HandleStdDeviceReq+0xc4>
			// put DEVICE_REMOTE_WAKEUP code here
		}
		if (pSetup->wValue == FEA_TEST_MODE) {
			// put TEST_MODE code here
		}
		return FALSE;
    bb18:	2300      	movs	r3, #0
    bb1a:	e004      	b.n	bb26 <HandleStdDeviceReq+0xc6>

	case REQ_SET_DESCRIPTOR:
		DBG("Device req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    bb1c:	2300      	movs	r3, #0
    bb1e:	e002      	b.n	bb26 <HandleStdDeviceReq+0xc6>

	default:
		DBG("Illegal device req %d\n", pSetup->bRequest);
		return FALSE;
    bb20:	2300      	movs	r3, #0
    bb22:	e000      	b.n	bb26 <HandleStdDeviceReq+0xc6>
	}
	
	return TRUE;
    bb24:	2301      	movs	r3, #1
}
    bb26:	4618      	mov	r0, r3
    bb28:	3718      	adds	r7, #24
    bb2a:	46bd      	mov	sp, r7
    bb2c:	bd80      	pop	{r7, pc}
    bb2e:	bf00      	nop
    bb30:	10000af0 	.word	0x10000af0

0000bb34 <HandleStdInterfaceReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    bb34:	b480      	push	{r7}
    bb36:	b087      	sub	sp, #28
    bb38:	af00      	add	r7, sp, #0
    bb3a:	60f8      	str	r0, [r7, #12]
    bb3c:	60b9      	str	r1, [r7, #8]
    bb3e:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    bb40:	687b      	ldr	r3, [r7, #4]
    bb42:	681b      	ldr	r3, [r3, #0]
    bb44:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    bb46:	68fb      	ldr	r3, [r7, #12]
    bb48:	785b      	ldrb	r3, [r3, #1]
    bb4a:	2b0b      	cmp	r3, #11
    bb4c:	d838      	bhi.n	bbc0 <HandleStdInterfaceReq+0x8c>
    bb4e:	a201      	add	r2, pc, #4	; (adr r2, bb54 <HandleStdInterfaceReq+0x20>)
    bb50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bb54:	0000bb85 	.word	0x0000bb85
    bb58:	0000bb9b 	.word	0x0000bb9b
    bb5c:	0000bbc1 	.word	0x0000bbc1
    bb60:	0000bb9b 	.word	0x0000bb9b
    bb64:	0000bbc1 	.word	0x0000bbc1
    bb68:	0000bbc1 	.word	0x0000bbc1
    bb6c:	0000bbc1 	.word	0x0000bbc1
    bb70:	0000bbc1 	.word	0x0000bbc1
    bb74:	0000bbc1 	.word	0x0000bbc1
    bb78:	0000bbc1 	.word	0x0000bbc1
    bb7c:	0000bb9f 	.word	0x0000bb9f
    bb80:	0000bbad 	.word	0x0000bbad

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    bb84:	697b      	ldr	r3, [r7, #20]
    bb86:	2200      	movs	r2, #0
    bb88:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    bb8a:	697b      	ldr	r3, [r7, #20]
    bb8c:	3301      	adds	r3, #1
    bb8e:	2200      	movs	r2, #0
    bb90:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    bb92:	68bb      	ldr	r3, [r7, #8]
    bb94:	2202      	movs	r2, #2
    bb96:	601a      	str	r2, [r3, #0]
		break;
    bb98:	e014      	b.n	bbc4 <HandleStdInterfaceReq+0x90>

	case REQ_CLEAR_FEATURE:
	case REQ_SET_FEATURE:
		// not defined for interface
		return FALSE;
    bb9a:	2300      	movs	r3, #0
    bb9c:	e013      	b.n	bbc6 <HandleStdInterfaceReq+0x92>
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    bb9e:	697b      	ldr	r3, [r7, #20]
    bba0:	2200      	movs	r2, #0
    bba2:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    bba4:	68bb      	ldr	r3, [r7, #8]
    bba6:	2201      	movs	r2, #1
    bba8:	601a      	str	r2, [r3, #0]
		break;
    bbaa:	e00b      	b.n	bbc4 <HandleStdInterfaceReq+0x90>
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    bbac:	68fb      	ldr	r3, [r7, #12]
    bbae:	885b      	ldrh	r3, [r3, #2]
    bbb0:	2b00      	cmp	r3, #0
    bbb2:	d001      	beq.n	bbb8 <HandleStdInterfaceReq+0x84>
			return FALSE;
    bbb4:	2300      	movs	r3, #0
    bbb6:	e006      	b.n	bbc6 <HandleStdInterfaceReq+0x92>
		}
		*piLen = 0;
    bbb8:	68bb      	ldr	r3, [r7, #8]
    bbba:	2200      	movs	r2, #0
    bbbc:	601a      	str	r2, [r3, #0]
		break;
    bbbe:	e001      	b.n	bbc4 <HandleStdInterfaceReq+0x90>

	default:
		DBG("Illegal interface req %d\n", pSetup->bRequest);
		return FALSE;
    bbc0:	2300      	movs	r3, #0
    bbc2:	e000      	b.n	bbc6 <HandleStdInterfaceReq+0x92>
	}

	return TRUE;
    bbc4:	2301      	movs	r3, #1
}
    bbc6:	4618      	mov	r0, r3
    bbc8:	371c      	adds	r7, #28
    bbca:	46bd      	mov	sp, r7
    bbcc:	f85d 7b04 	ldr.w	r7, [sp], #4
    bbd0:	4770      	bx	lr
    bbd2:	bf00      	nop

0000bbd4 <HandleStdEndPointReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    bbd4:	b580      	push	{r7, lr}
    bbd6:	b086      	sub	sp, #24
    bbd8:	af00      	add	r7, sp, #0
    bbda:	60f8      	str	r0, [r7, #12]
    bbdc:	60b9      	str	r1, [r7, #8]
    bbde:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    bbe0:	687b      	ldr	r3, [r7, #4]
    bbe2:	681b      	ldr	r3, [r3, #0]
    bbe4:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    bbe6:	68fb      	ldr	r3, [r7, #12]
    bbe8:	785b      	ldrb	r3, [r3, #1]
    bbea:	2b0c      	cmp	r3, #12
    bbec:	d853      	bhi.n	bc96 <HandleStdEndPointReq+0xc2>
    bbee:	a201      	add	r2, pc, #4	; (adr r2, bbf4 <HandleStdEndPointReq+0x20>)
    bbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bbf4:	0000bc29 	.word	0x0000bc29
    bbf8:	0000bc5b 	.word	0x0000bc5b
    bbfc:	0000bc97 	.word	0x0000bc97
    bc00:	0000bc77 	.word	0x0000bc77
    bc04:	0000bc97 	.word	0x0000bc97
    bc08:	0000bc97 	.word	0x0000bc97
    bc0c:	0000bc97 	.word	0x0000bc97
    bc10:	0000bc97 	.word	0x0000bc97
    bc14:	0000bc97 	.word	0x0000bc97
    bc18:	0000bc97 	.word	0x0000bc97
    bc1c:	0000bc97 	.word	0x0000bc97
    bc20:	0000bc97 	.word	0x0000bc97
    bc24:	0000bc93 	.word	0x0000bc93
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    bc28:	68fb      	ldr	r3, [r7, #12]
    bc2a:	889b      	ldrh	r3, [r3, #4]
    bc2c:	b2db      	uxtb	r3, r3
    bc2e:	4618      	mov	r0, r3
    bc30:	f7ff fb50 	bl	b2d4 <USBHwEPGetStatus>
    bc34:	4603      	mov	r3, r0
    bc36:	f003 0302 	and.w	r3, r3, #2
    bc3a:	2b00      	cmp	r3, #0
    bc3c:	bf14      	ite	ne
    bc3e:	2301      	movne	r3, #1
    bc40:	2300      	moveq	r3, #0
    bc42:	b2db      	uxtb	r3, r3
    bc44:	461a      	mov	r2, r3
    bc46:	697b      	ldr	r3, [r7, #20]
    bc48:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    bc4a:	697b      	ldr	r3, [r7, #20]
    bc4c:	3301      	adds	r3, #1
    bc4e:	2200      	movs	r2, #0
    bc50:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    bc52:	68bb      	ldr	r3, [r7, #8]
    bc54:	2202      	movs	r2, #2
    bc56:	601a      	str	r2, [r3, #0]
		break;
    bc58:	e01f      	b.n	bc9a <HandleStdEndPointReq+0xc6>
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    bc5a:	68fb      	ldr	r3, [r7, #12]
    bc5c:	885b      	ldrh	r3, [r3, #2]
    bc5e:	2b00      	cmp	r3, #0
    bc60:	d107      	bne.n	bc72 <HandleStdEndPointReq+0x9e>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    bc62:	68fb      	ldr	r3, [r7, #12]
    bc64:	889b      	ldrh	r3, [r3, #4]
    bc66:	b2db      	uxtb	r3, r3
    bc68:	4618      	mov	r0, r3
    bc6a:	2100      	movs	r1, #0
    bc6c:	f7ff fb4a 	bl	b304 <USBHwEPStall>
			break;
    bc70:	e013      	b.n	bc9a <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    bc72:	2300      	movs	r3, #0
    bc74:	e012      	b.n	bc9c <HandleStdEndPointReq+0xc8>
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    bc76:	68fb      	ldr	r3, [r7, #12]
    bc78:	885b      	ldrh	r3, [r3, #2]
    bc7a:	2b00      	cmp	r3, #0
    bc7c:	d107      	bne.n	bc8e <HandleStdEndPointReq+0xba>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    bc7e:	68fb      	ldr	r3, [r7, #12]
    bc80:	889b      	ldrh	r3, [r3, #4]
    bc82:	b2db      	uxtb	r3, r3
    bc84:	4618      	mov	r0, r3
    bc86:	2101      	movs	r1, #1
    bc88:	f7ff fb3c 	bl	b304 <USBHwEPStall>
			break;
    bc8c:	e005      	b.n	bc9a <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    bc8e:	2300      	movs	r3, #0
    bc90:	e004      	b.n	bc9c <HandleStdEndPointReq+0xc8>

	case REQ_SYNCH_FRAME:
		DBG("EP req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    bc92:	2300      	movs	r3, #0
    bc94:	e002      	b.n	bc9c <HandleStdEndPointReq+0xc8>

	default:
		DBG("Illegal EP req %d\n", pSetup->bRequest);
		return FALSE;
    bc96:	2300      	movs	r3, #0
    bc98:	e000      	b.n	bc9c <HandleStdEndPointReq+0xc8>
	}
	
	return TRUE;
    bc9a:	2301      	movs	r3, #1
}
    bc9c:	4618      	mov	r0, r3
    bc9e:	3718      	adds	r7, #24
    bca0:	46bd      	mov	sp, r7
    bca2:	bd80      	pop	{r7, pc}

0000bca4 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    bca4:	b580      	push	{r7, lr}
    bca6:	b084      	sub	sp, #16
    bca8:	af00      	add	r7, sp, #0
    bcaa:	60f8      	str	r0, [r7, #12]
    bcac:	60b9      	str	r1, [r7, #8]
    bcae:	607a      	str	r2, [r7, #4]
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    bcb0:	4b19      	ldr	r3, [pc, #100]	; (bd18 <USBHandleStandardRequest+0x74>)
    bcb2:	681b      	ldr	r3, [r3, #0]
    bcb4:	2b00      	cmp	r3, #0
    bcb6:	d00a      	beq.n	bcce <USBHandleStandardRequest+0x2a>
    bcb8:	4b17      	ldr	r3, [pc, #92]	; (bd18 <USBHandleStandardRequest+0x74>)
    bcba:	681b      	ldr	r3, [r3, #0]
    bcbc:	68f8      	ldr	r0, [r7, #12]
    bcbe:	68b9      	ldr	r1, [r7, #8]
    bcc0:	687a      	ldr	r2, [r7, #4]
    bcc2:	4798      	blx	r3
    bcc4:	4603      	mov	r3, r0
    bcc6:	2b00      	cmp	r3, #0
    bcc8:	d001      	beq.n	bcce <USBHandleStandardRequest+0x2a>
		return TRUE;
    bcca:	2301      	movs	r3, #1
    bccc:	e01f      	b.n	bd0e <USBHandleStandardRequest+0x6a>
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    bcce:	68fb      	ldr	r3, [r7, #12]
    bcd0:	781b      	ldrb	r3, [r3, #0]
    bcd2:	f003 031f 	and.w	r3, r3, #31
    bcd6:	2b01      	cmp	r3, #1
    bcd8:	d00a      	beq.n	bcf0 <USBHandleStandardRequest+0x4c>
    bcda:	2b02      	cmp	r3, #2
    bcdc:	d00f      	beq.n	bcfe <USBHandleStandardRequest+0x5a>
    bcde:	2b00      	cmp	r3, #0
    bce0:	d114      	bne.n	bd0c <USBHandleStandardRequest+0x68>
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
    bce2:	68f8      	ldr	r0, [r7, #12]
    bce4:	68b9      	ldr	r1, [r7, #8]
    bce6:	687a      	ldr	r2, [r7, #4]
    bce8:	f7ff feba 	bl	ba60 <HandleStdDeviceReq>
    bcec:	4603      	mov	r3, r0
    bcee:	e00e      	b.n	bd0e <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
    bcf0:	68f8      	ldr	r0, [r7, #12]
    bcf2:	68b9      	ldr	r1, [r7, #8]
    bcf4:	687a      	ldr	r2, [r7, #4]
    bcf6:	f7ff ff1d 	bl	bb34 <HandleStdInterfaceReq>
    bcfa:	4603      	mov	r3, r0
    bcfc:	e007      	b.n	bd0e <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
    bcfe:	68f8      	ldr	r0, [r7, #12]
    bd00:	68b9      	ldr	r1, [r7, #8]
    bd02:	687a      	ldr	r2, [r7, #4]
    bd04:	f7ff ff66 	bl	bbd4 <HandleStdEndPointReq>
    bd08:	4603      	mov	r3, r0
    bd0a:	e000      	b.n	bd0e <USBHandleStandardRequest+0x6a>
	default: 						return FALSE;
    bd0c:	2300      	movs	r3, #0
	}
}
    bd0e:	4618      	mov	r0, r3
    bd10:	3710      	adds	r7, #16
    bd12:	46bd      	mov	sp, r7
    bd14:	bd80      	pop	{r7, pc}
    bd16:	bf00      	nop
    bd18:	10000af4 	.word	0x10000af4

0000bd1c <__aeabi_drsub>:
    bd1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    bd20:	e002      	b.n	bd28 <__adddf3>
    bd22:	bf00      	nop

0000bd24 <__aeabi_dsub>:
    bd24:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000bd28 <__adddf3>:
    bd28:	b530      	push	{r4, r5, lr}
    bd2a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    bd2e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    bd32:	ea94 0f05 	teq	r4, r5
    bd36:	bf08      	it	eq
    bd38:	ea90 0f02 	teqeq	r0, r2
    bd3c:	bf1f      	itttt	ne
    bd3e:	ea54 0c00 	orrsne.w	ip, r4, r0
    bd42:	ea55 0c02 	orrsne.w	ip, r5, r2
    bd46:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    bd4a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    bd4e:	f000 80e2 	beq.w	bf16 <__adddf3+0x1ee>
    bd52:	ea4f 5454 	mov.w	r4, r4, lsr #21
    bd56:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    bd5a:	bfb8      	it	lt
    bd5c:	426d      	neglt	r5, r5
    bd5e:	dd0c      	ble.n	bd7a <__adddf3+0x52>
    bd60:	442c      	add	r4, r5
    bd62:	ea80 0202 	eor.w	r2, r0, r2
    bd66:	ea81 0303 	eor.w	r3, r1, r3
    bd6a:	ea82 0000 	eor.w	r0, r2, r0
    bd6e:	ea83 0101 	eor.w	r1, r3, r1
    bd72:	ea80 0202 	eor.w	r2, r0, r2
    bd76:	ea81 0303 	eor.w	r3, r1, r3
    bd7a:	2d36      	cmp	r5, #54	; 0x36
    bd7c:	bf88      	it	hi
    bd7e:	bd30      	pophi	{r4, r5, pc}
    bd80:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    bd84:	ea4f 3101 	mov.w	r1, r1, lsl #12
    bd88:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    bd8c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    bd90:	d002      	beq.n	bd98 <__adddf3+0x70>
    bd92:	4240      	negs	r0, r0
    bd94:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    bd98:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    bd9c:	ea4f 3303 	mov.w	r3, r3, lsl #12
    bda0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    bda4:	d002      	beq.n	bdac <__adddf3+0x84>
    bda6:	4252      	negs	r2, r2
    bda8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    bdac:	ea94 0f05 	teq	r4, r5
    bdb0:	f000 80a7 	beq.w	bf02 <__adddf3+0x1da>
    bdb4:	f1a4 0401 	sub.w	r4, r4, #1
    bdb8:	f1d5 0e20 	rsbs	lr, r5, #32
    bdbc:	db0d      	blt.n	bdda <__adddf3+0xb2>
    bdbe:	fa02 fc0e 	lsl.w	ip, r2, lr
    bdc2:	fa22 f205 	lsr.w	r2, r2, r5
    bdc6:	1880      	adds	r0, r0, r2
    bdc8:	f141 0100 	adc.w	r1, r1, #0
    bdcc:	fa03 f20e 	lsl.w	r2, r3, lr
    bdd0:	1880      	adds	r0, r0, r2
    bdd2:	fa43 f305 	asr.w	r3, r3, r5
    bdd6:	4159      	adcs	r1, r3
    bdd8:	e00e      	b.n	bdf8 <__adddf3+0xd0>
    bdda:	f1a5 0520 	sub.w	r5, r5, #32
    bdde:	f10e 0e20 	add.w	lr, lr, #32
    bde2:	2a01      	cmp	r2, #1
    bde4:	fa03 fc0e 	lsl.w	ip, r3, lr
    bde8:	bf28      	it	cs
    bdea:	f04c 0c02 	orrcs.w	ip, ip, #2
    bdee:	fa43 f305 	asr.w	r3, r3, r5
    bdf2:	18c0      	adds	r0, r0, r3
    bdf4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    bdf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bdfc:	d507      	bpl.n	be0e <__adddf3+0xe6>
    bdfe:	f04f 0e00 	mov.w	lr, #0
    be02:	f1dc 0c00 	rsbs	ip, ip, #0
    be06:	eb7e 0000 	sbcs.w	r0, lr, r0
    be0a:	eb6e 0101 	sbc.w	r1, lr, r1
    be0e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    be12:	d31b      	bcc.n	be4c <__adddf3+0x124>
    be14:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    be18:	d30c      	bcc.n	be34 <__adddf3+0x10c>
    be1a:	0849      	lsrs	r1, r1, #1
    be1c:	ea5f 0030 	movs.w	r0, r0, rrx
    be20:	ea4f 0c3c 	mov.w	ip, ip, rrx
    be24:	f104 0401 	add.w	r4, r4, #1
    be28:	ea4f 5244 	mov.w	r2, r4, lsl #21
    be2c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    be30:	f080 809a 	bcs.w	bf68 <__adddf3+0x240>
    be34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    be38:	bf08      	it	eq
    be3a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    be3e:	f150 0000 	adcs.w	r0, r0, #0
    be42:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    be46:	ea41 0105 	orr.w	r1, r1, r5
    be4a:	bd30      	pop	{r4, r5, pc}
    be4c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    be50:	4140      	adcs	r0, r0
    be52:	eb41 0101 	adc.w	r1, r1, r1
    be56:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    be5a:	f1a4 0401 	sub.w	r4, r4, #1
    be5e:	d1e9      	bne.n	be34 <__adddf3+0x10c>
    be60:	f091 0f00 	teq	r1, #0
    be64:	bf04      	itt	eq
    be66:	4601      	moveq	r1, r0
    be68:	2000      	moveq	r0, #0
    be6a:	fab1 f381 	clz	r3, r1
    be6e:	bf08      	it	eq
    be70:	3320      	addeq	r3, #32
    be72:	f1a3 030b 	sub.w	r3, r3, #11
    be76:	f1b3 0220 	subs.w	r2, r3, #32
    be7a:	da0c      	bge.n	be96 <__adddf3+0x16e>
    be7c:	320c      	adds	r2, #12
    be7e:	dd08      	ble.n	be92 <__adddf3+0x16a>
    be80:	f102 0c14 	add.w	ip, r2, #20
    be84:	f1c2 020c 	rsb	r2, r2, #12
    be88:	fa01 f00c 	lsl.w	r0, r1, ip
    be8c:	fa21 f102 	lsr.w	r1, r1, r2
    be90:	e00c      	b.n	beac <__adddf3+0x184>
    be92:	f102 0214 	add.w	r2, r2, #20
    be96:	bfd8      	it	le
    be98:	f1c2 0c20 	rsble	ip, r2, #32
    be9c:	fa01 f102 	lsl.w	r1, r1, r2
    bea0:	fa20 fc0c 	lsr.w	ip, r0, ip
    bea4:	bfdc      	itt	le
    bea6:	ea41 010c 	orrle.w	r1, r1, ip
    beaa:	4090      	lslle	r0, r2
    beac:	1ae4      	subs	r4, r4, r3
    beae:	bfa2      	ittt	ge
    beb0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    beb4:	4329      	orrge	r1, r5
    beb6:	bd30      	popge	{r4, r5, pc}
    beb8:	ea6f 0404 	mvn.w	r4, r4
    bebc:	3c1f      	subs	r4, #31
    bebe:	da1c      	bge.n	befa <__adddf3+0x1d2>
    bec0:	340c      	adds	r4, #12
    bec2:	dc0e      	bgt.n	bee2 <__adddf3+0x1ba>
    bec4:	f104 0414 	add.w	r4, r4, #20
    bec8:	f1c4 0220 	rsb	r2, r4, #32
    becc:	fa20 f004 	lsr.w	r0, r0, r4
    bed0:	fa01 f302 	lsl.w	r3, r1, r2
    bed4:	ea40 0003 	orr.w	r0, r0, r3
    bed8:	fa21 f304 	lsr.w	r3, r1, r4
    bedc:	ea45 0103 	orr.w	r1, r5, r3
    bee0:	bd30      	pop	{r4, r5, pc}
    bee2:	f1c4 040c 	rsb	r4, r4, #12
    bee6:	f1c4 0220 	rsb	r2, r4, #32
    beea:	fa20 f002 	lsr.w	r0, r0, r2
    beee:	fa01 f304 	lsl.w	r3, r1, r4
    bef2:	ea40 0003 	orr.w	r0, r0, r3
    bef6:	4629      	mov	r1, r5
    bef8:	bd30      	pop	{r4, r5, pc}
    befa:	fa21 f004 	lsr.w	r0, r1, r4
    befe:	4629      	mov	r1, r5
    bf00:	bd30      	pop	{r4, r5, pc}
    bf02:	f094 0f00 	teq	r4, #0
    bf06:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    bf0a:	bf06      	itte	eq
    bf0c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    bf10:	3401      	addeq	r4, #1
    bf12:	3d01      	subne	r5, #1
    bf14:	e74e      	b.n	bdb4 <__adddf3+0x8c>
    bf16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    bf1a:	bf18      	it	ne
    bf1c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    bf20:	d029      	beq.n	bf76 <__adddf3+0x24e>
    bf22:	ea94 0f05 	teq	r4, r5
    bf26:	bf08      	it	eq
    bf28:	ea90 0f02 	teqeq	r0, r2
    bf2c:	d005      	beq.n	bf3a <__adddf3+0x212>
    bf2e:	ea54 0c00 	orrs.w	ip, r4, r0
    bf32:	bf04      	itt	eq
    bf34:	4619      	moveq	r1, r3
    bf36:	4610      	moveq	r0, r2
    bf38:	bd30      	pop	{r4, r5, pc}
    bf3a:	ea91 0f03 	teq	r1, r3
    bf3e:	bf1e      	ittt	ne
    bf40:	2100      	movne	r1, #0
    bf42:	2000      	movne	r0, #0
    bf44:	bd30      	popne	{r4, r5, pc}
    bf46:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    bf4a:	d105      	bne.n	bf58 <__adddf3+0x230>
    bf4c:	0040      	lsls	r0, r0, #1
    bf4e:	4149      	adcs	r1, r1
    bf50:	bf28      	it	cs
    bf52:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    bf56:	bd30      	pop	{r4, r5, pc}
    bf58:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    bf5c:	bf3c      	itt	cc
    bf5e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    bf62:	bd30      	popcc	{r4, r5, pc}
    bf64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bf68:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    bf6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    bf70:	f04f 0000 	mov.w	r0, #0
    bf74:	bd30      	pop	{r4, r5, pc}
    bf76:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    bf7a:	bf1a      	itte	ne
    bf7c:	4619      	movne	r1, r3
    bf7e:	4610      	movne	r0, r2
    bf80:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    bf84:	bf1c      	itt	ne
    bf86:	460b      	movne	r3, r1
    bf88:	4602      	movne	r2, r0
    bf8a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    bf8e:	bf06      	itte	eq
    bf90:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    bf94:	ea91 0f03 	teqeq	r1, r3
    bf98:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    bf9c:	bd30      	pop	{r4, r5, pc}
    bf9e:	bf00      	nop

0000bfa0 <__aeabi_ui2d>:
    bfa0:	f090 0f00 	teq	r0, #0
    bfa4:	bf04      	itt	eq
    bfa6:	2100      	moveq	r1, #0
    bfa8:	4770      	bxeq	lr
    bfaa:	b530      	push	{r4, r5, lr}
    bfac:	f44f 6480 	mov.w	r4, #1024	; 0x400
    bfb0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bfb4:	f04f 0500 	mov.w	r5, #0
    bfb8:	f04f 0100 	mov.w	r1, #0
    bfbc:	e750      	b.n	be60 <__adddf3+0x138>
    bfbe:	bf00      	nop

0000bfc0 <__aeabi_i2d>:
    bfc0:	f090 0f00 	teq	r0, #0
    bfc4:	bf04      	itt	eq
    bfc6:	2100      	moveq	r1, #0
    bfc8:	4770      	bxeq	lr
    bfca:	b530      	push	{r4, r5, lr}
    bfcc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    bfd0:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bfd4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    bfd8:	bf48      	it	mi
    bfda:	4240      	negmi	r0, r0
    bfdc:	f04f 0100 	mov.w	r1, #0
    bfe0:	e73e      	b.n	be60 <__adddf3+0x138>
    bfe2:	bf00      	nop

0000bfe4 <__aeabi_f2d>:
    bfe4:	0042      	lsls	r2, r0, #1
    bfe6:	ea4f 01e2 	mov.w	r1, r2, asr #3
    bfea:	ea4f 0131 	mov.w	r1, r1, rrx
    bfee:	ea4f 7002 	mov.w	r0, r2, lsl #28
    bff2:	bf1f      	itttt	ne
    bff4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    bff8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    bffc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    c000:	4770      	bxne	lr
    c002:	f092 0f00 	teq	r2, #0
    c006:	bf14      	ite	ne
    c008:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    c00c:	4770      	bxeq	lr
    c00e:	b530      	push	{r4, r5, lr}
    c010:	f44f 7460 	mov.w	r4, #896	; 0x380
    c014:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    c018:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c01c:	e720      	b.n	be60 <__adddf3+0x138>
    c01e:	bf00      	nop

0000c020 <__aeabi_ul2d>:
    c020:	ea50 0201 	orrs.w	r2, r0, r1
    c024:	bf08      	it	eq
    c026:	4770      	bxeq	lr
    c028:	b530      	push	{r4, r5, lr}
    c02a:	f04f 0500 	mov.w	r5, #0
    c02e:	e00a      	b.n	c046 <__aeabi_l2d+0x16>

0000c030 <__aeabi_l2d>:
    c030:	ea50 0201 	orrs.w	r2, r0, r1
    c034:	bf08      	it	eq
    c036:	4770      	bxeq	lr
    c038:	b530      	push	{r4, r5, lr}
    c03a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    c03e:	d502      	bpl.n	c046 <__aeabi_l2d+0x16>
    c040:	4240      	negs	r0, r0
    c042:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    c046:	f44f 6480 	mov.w	r4, #1024	; 0x400
    c04a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    c04e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    c052:	f43f aedc 	beq.w	be0e <__adddf3+0xe6>
    c056:	f04f 0203 	mov.w	r2, #3
    c05a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c05e:	bf18      	it	ne
    c060:	3203      	addne	r2, #3
    c062:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    c066:	bf18      	it	ne
    c068:	3203      	addne	r2, #3
    c06a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    c06e:	f1c2 0320 	rsb	r3, r2, #32
    c072:	fa00 fc03 	lsl.w	ip, r0, r3
    c076:	fa20 f002 	lsr.w	r0, r0, r2
    c07a:	fa01 fe03 	lsl.w	lr, r1, r3
    c07e:	ea40 000e 	orr.w	r0, r0, lr
    c082:	fa21 f102 	lsr.w	r1, r1, r2
    c086:	4414      	add	r4, r2
    c088:	e6c1      	b.n	be0e <__adddf3+0xe6>
    c08a:	bf00      	nop

0000c08c <__aeabi_dmul>:
    c08c:	b570      	push	{r4, r5, r6, lr}
    c08e:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c092:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c096:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c09a:	bf1d      	ittte	ne
    c09c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c0a0:	ea94 0f0c 	teqne	r4, ip
    c0a4:	ea95 0f0c 	teqne	r5, ip
    c0a8:	f000 f8de 	bleq	c268 <__aeabi_dmul+0x1dc>
    c0ac:	442c      	add	r4, r5
    c0ae:	ea81 0603 	eor.w	r6, r1, r3
    c0b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c0b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c0ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c0be:	bf18      	it	ne
    c0c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c0c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c0c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c0cc:	d038      	beq.n	c140 <__aeabi_dmul+0xb4>
    c0ce:	fba0 ce02 	umull	ip, lr, r0, r2
    c0d2:	f04f 0500 	mov.w	r5, #0
    c0d6:	fbe1 e502 	umlal	lr, r5, r1, r2
    c0da:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c0de:	fbe0 e503 	umlal	lr, r5, r0, r3
    c0e2:	f04f 0600 	mov.w	r6, #0
    c0e6:	fbe1 5603 	umlal	r5, r6, r1, r3
    c0ea:	f09c 0f00 	teq	ip, #0
    c0ee:	bf18      	it	ne
    c0f0:	f04e 0e01 	orrne.w	lr, lr, #1
    c0f4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c0f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c0fc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c100:	d204      	bcs.n	c10c <__aeabi_dmul+0x80>
    c102:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c106:	416d      	adcs	r5, r5
    c108:	eb46 0606 	adc.w	r6, r6, r6
    c10c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c110:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c114:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c118:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c11c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c120:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c124:	bf88      	it	hi
    c126:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c12a:	d81e      	bhi.n	c16a <__aeabi_dmul+0xde>
    c12c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c130:	bf08      	it	eq
    c132:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c136:	f150 0000 	adcs.w	r0, r0, #0
    c13a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c13e:	bd70      	pop	{r4, r5, r6, pc}
    c140:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c144:	ea46 0101 	orr.w	r1, r6, r1
    c148:	ea40 0002 	orr.w	r0, r0, r2
    c14c:	ea81 0103 	eor.w	r1, r1, r3
    c150:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c154:	bfc2      	ittt	gt
    c156:	ebd4 050c 	rsbsgt	r5, r4, ip
    c15a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c15e:	bd70      	popgt	{r4, r5, r6, pc}
    c160:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c164:	f04f 0e00 	mov.w	lr, #0
    c168:	3c01      	subs	r4, #1
    c16a:	f300 80ab 	bgt.w	c2c4 <__aeabi_dmul+0x238>
    c16e:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c172:	bfde      	ittt	le
    c174:	2000      	movle	r0, #0
    c176:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c17a:	bd70      	pople	{r4, r5, r6, pc}
    c17c:	f1c4 0400 	rsb	r4, r4, #0
    c180:	3c20      	subs	r4, #32
    c182:	da35      	bge.n	c1f0 <__aeabi_dmul+0x164>
    c184:	340c      	adds	r4, #12
    c186:	dc1b      	bgt.n	c1c0 <__aeabi_dmul+0x134>
    c188:	f104 0414 	add.w	r4, r4, #20
    c18c:	f1c4 0520 	rsb	r5, r4, #32
    c190:	fa00 f305 	lsl.w	r3, r0, r5
    c194:	fa20 f004 	lsr.w	r0, r0, r4
    c198:	fa01 f205 	lsl.w	r2, r1, r5
    c19c:	ea40 0002 	orr.w	r0, r0, r2
    c1a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c1a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c1a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c1ac:	fa21 f604 	lsr.w	r6, r1, r4
    c1b0:	eb42 0106 	adc.w	r1, r2, r6
    c1b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c1b8:	bf08      	it	eq
    c1ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c1be:	bd70      	pop	{r4, r5, r6, pc}
    c1c0:	f1c4 040c 	rsb	r4, r4, #12
    c1c4:	f1c4 0520 	rsb	r5, r4, #32
    c1c8:	fa00 f304 	lsl.w	r3, r0, r4
    c1cc:	fa20 f005 	lsr.w	r0, r0, r5
    c1d0:	fa01 f204 	lsl.w	r2, r1, r4
    c1d4:	ea40 0002 	orr.w	r0, r0, r2
    c1d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c1dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c1e0:	f141 0100 	adc.w	r1, r1, #0
    c1e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c1e8:	bf08      	it	eq
    c1ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c1ee:	bd70      	pop	{r4, r5, r6, pc}
    c1f0:	f1c4 0520 	rsb	r5, r4, #32
    c1f4:	fa00 f205 	lsl.w	r2, r0, r5
    c1f8:	ea4e 0e02 	orr.w	lr, lr, r2
    c1fc:	fa20 f304 	lsr.w	r3, r0, r4
    c200:	fa01 f205 	lsl.w	r2, r1, r5
    c204:	ea43 0302 	orr.w	r3, r3, r2
    c208:	fa21 f004 	lsr.w	r0, r1, r4
    c20c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c210:	fa21 f204 	lsr.w	r2, r1, r4
    c214:	ea20 0002 	bic.w	r0, r0, r2
    c218:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c21c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c220:	bf08      	it	eq
    c222:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c226:	bd70      	pop	{r4, r5, r6, pc}
    c228:	f094 0f00 	teq	r4, #0
    c22c:	d10f      	bne.n	c24e <__aeabi_dmul+0x1c2>
    c22e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c232:	0040      	lsls	r0, r0, #1
    c234:	eb41 0101 	adc.w	r1, r1, r1
    c238:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c23c:	bf08      	it	eq
    c23e:	3c01      	subeq	r4, #1
    c240:	d0f7      	beq.n	c232 <__aeabi_dmul+0x1a6>
    c242:	ea41 0106 	orr.w	r1, r1, r6
    c246:	f095 0f00 	teq	r5, #0
    c24a:	bf18      	it	ne
    c24c:	4770      	bxne	lr
    c24e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c252:	0052      	lsls	r2, r2, #1
    c254:	eb43 0303 	adc.w	r3, r3, r3
    c258:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c25c:	bf08      	it	eq
    c25e:	3d01      	subeq	r5, #1
    c260:	d0f7      	beq.n	c252 <__aeabi_dmul+0x1c6>
    c262:	ea43 0306 	orr.w	r3, r3, r6
    c266:	4770      	bx	lr
    c268:	ea94 0f0c 	teq	r4, ip
    c26c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c270:	bf18      	it	ne
    c272:	ea95 0f0c 	teqne	r5, ip
    c276:	d00c      	beq.n	c292 <__aeabi_dmul+0x206>
    c278:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c27c:	bf18      	it	ne
    c27e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c282:	d1d1      	bne.n	c228 <__aeabi_dmul+0x19c>
    c284:	ea81 0103 	eor.w	r1, r1, r3
    c288:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c28c:	f04f 0000 	mov.w	r0, #0
    c290:	bd70      	pop	{r4, r5, r6, pc}
    c292:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c296:	bf06      	itte	eq
    c298:	4610      	moveq	r0, r2
    c29a:	4619      	moveq	r1, r3
    c29c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c2a0:	d019      	beq.n	c2d6 <__aeabi_dmul+0x24a>
    c2a2:	ea94 0f0c 	teq	r4, ip
    c2a6:	d102      	bne.n	c2ae <__aeabi_dmul+0x222>
    c2a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c2ac:	d113      	bne.n	c2d6 <__aeabi_dmul+0x24a>
    c2ae:	ea95 0f0c 	teq	r5, ip
    c2b2:	d105      	bne.n	c2c0 <__aeabi_dmul+0x234>
    c2b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c2b8:	bf1c      	itt	ne
    c2ba:	4610      	movne	r0, r2
    c2bc:	4619      	movne	r1, r3
    c2be:	d10a      	bne.n	c2d6 <__aeabi_dmul+0x24a>
    c2c0:	ea81 0103 	eor.w	r1, r1, r3
    c2c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c2c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c2cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c2d0:	f04f 0000 	mov.w	r0, #0
    c2d4:	bd70      	pop	{r4, r5, r6, pc}
    c2d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c2da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c2de:	bd70      	pop	{r4, r5, r6, pc}

0000c2e0 <__aeabi_ddiv>:
    c2e0:	b570      	push	{r4, r5, r6, lr}
    c2e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c2e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c2ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c2ee:	bf1d      	ittte	ne
    c2f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c2f4:	ea94 0f0c 	teqne	r4, ip
    c2f8:	ea95 0f0c 	teqne	r5, ip
    c2fc:	f000 f8a7 	bleq	c44e <__aeabi_ddiv+0x16e>
    c300:	eba4 0405 	sub.w	r4, r4, r5
    c304:	ea81 0e03 	eor.w	lr, r1, r3
    c308:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c30c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c310:	f000 8088 	beq.w	c424 <__aeabi_ddiv+0x144>
    c314:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c318:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c31c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c320:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c324:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c328:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c32c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c330:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c334:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c338:	429d      	cmp	r5, r3
    c33a:	bf08      	it	eq
    c33c:	4296      	cmpeq	r6, r2
    c33e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c342:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c346:	d202      	bcs.n	c34e <__aeabi_ddiv+0x6e>
    c348:	085b      	lsrs	r3, r3, #1
    c34a:	ea4f 0232 	mov.w	r2, r2, rrx
    c34e:	1ab6      	subs	r6, r6, r2
    c350:	eb65 0503 	sbc.w	r5, r5, r3
    c354:	085b      	lsrs	r3, r3, #1
    c356:	ea4f 0232 	mov.w	r2, r2, rrx
    c35a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c35e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c362:	ebb6 0e02 	subs.w	lr, r6, r2
    c366:	eb75 0e03 	sbcs.w	lr, r5, r3
    c36a:	bf22      	ittt	cs
    c36c:	1ab6      	subcs	r6, r6, r2
    c36e:	4675      	movcs	r5, lr
    c370:	ea40 000c 	orrcs.w	r0, r0, ip
    c374:	085b      	lsrs	r3, r3, #1
    c376:	ea4f 0232 	mov.w	r2, r2, rrx
    c37a:	ebb6 0e02 	subs.w	lr, r6, r2
    c37e:	eb75 0e03 	sbcs.w	lr, r5, r3
    c382:	bf22      	ittt	cs
    c384:	1ab6      	subcs	r6, r6, r2
    c386:	4675      	movcs	r5, lr
    c388:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c38c:	085b      	lsrs	r3, r3, #1
    c38e:	ea4f 0232 	mov.w	r2, r2, rrx
    c392:	ebb6 0e02 	subs.w	lr, r6, r2
    c396:	eb75 0e03 	sbcs.w	lr, r5, r3
    c39a:	bf22      	ittt	cs
    c39c:	1ab6      	subcs	r6, r6, r2
    c39e:	4675      	movcs	r5, lr
    c3a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c3a4:	085b      	lsrs	r3, r3, #1
    c3a6:	ea4f 0232 	mov.w	r2, r2, rrx
    c3aa:	ebb6 0e02 	subs.w	lr, r6, r2
    c3ae:	eb75 0e03 	sbcs.w	lr, r5, r3
    c3b2:	bf22      	ittt	cs
    c3b4:	1ab6      	subcs	r6, r6, r2
    c3b6:	4675      	movcs	r5, lr
    c3b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c3bc:	ea55 0e06 	orrs.w	lr, r5, r6
    c3c0:	d018      	beq.n	c3f4 <__aeabi_ddiv+0x114>
    c3c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c3c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c3ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c3ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c3d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c3d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c3da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c3de:	d1c0      	bne.n	c362 <__aeabi_ddiv+0x82>
    c3e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c3e4:	d10b      	bne.n	c3fe <__aeabi_ddiv+0x11e>
    c3e6:	ea41 0100 	orr.w	r1, r1, r0
    c3ea:	f04f 0000 	mov.w	r0, #0
    c3ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c3f2:	e7b6      	b.n	c362 <__aeabi_ddiv+0x82>
    c3f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c3f8:	bf04      	itt	eq
    c3fa:	4301      	orreq	r1, r0
    c3fc:	2000      	moveq	r0, #0
    c3fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c402:	bf88      	it	hi
    c404:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c408:	f63f aeaf 	bhi.w	c16a <__aeabi_dmul+0xde>
    c40c:	ebb5 0c03 	subs.w	ip, r5, r3
    c410:	bf04      	itt	eq
    c412:	ebb6 0c02 	subseq.w	ip, r6, r2
    c416:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c41a:	f150 0000 	adcs.w	r0, r0, #0
    c41e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c422:	bd70      	pop	{r4, r5, r6, pc}
    c424:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c428:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c42c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c430:	bfc2      	ittt	gt
    c432:	ebd4 050c 	rsbsgt	r5, r4, ip
    c436:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c43a:	bd70      	popgt	{r4, r5, r6, pc}
    c43c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c440:	f04f 0e00 	mov.w	lr, #0
    c444:	3c01      	subs	r4, #1
    c446:	e690      	b.n	c16a <__aeabi_dmul+0xde>
    c448:	ea45 0e06 	orr.w	lr, r5, r6
    c44c:	e68d      	b.n	c16a <__aeabi_dmul+0xde>
    c44e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c452:	ea94 0f0c 	teq	r4, ip
    c456:	bf08      	it	eq
    c458:	ea95 0f0c 	teqeq	r5, ip
    c45c:	f43f af3b 	beq.w	c2d6 <__aeabi_dmul+0x24a>
    c460:	ea94 0f0c 	teq	r4, ip
    c464:	d10a      	bne.n	c47c <__aeabi_ddiv+0x19c>
    c466:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c46a:	f47f af34 	bne.w	c2d6 <__aeabi_dmul+0x24a>
    c46e:	ea95 0f0c 	teq	r5, ip
    c472:	f47f af25 	bne.w	c2c0 <__aeabi_dmul+0x234>
    c476:	4610      	mov	r0, r2
    c478:	4619      	mov	r1, r3
    c47a:	e72c      	b.n	c2d6 <__aeabi_dmul+0x24a>
    c47c:	ea95 0f0c 	teq	r5, ip
    c480:	d106      	bne.n	c490 <__aeabi_ddiv+0x1b0>
    c482:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c486:	f43f aefd 	beq.w	c284 <__aeabi_dmul+0x1f8>
    c48a:	4610      	mov	r0, r2
    c48c:	4619      	mov	r1, r3
    c48e:	e722      	b.n	c2d6 <__aeabi_dmul+0x24a>
    c490:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c494:	bf18      	it	ne
    c496:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c49a:	f47f aec5 	bne.w	c228 <__aeabi_dmul+0x19c>
    c49e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c4a2:	f47f af0d 	bne.w	c2c0 <__aeabi_dmul+0x234>
    c4a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c4aa:	f47f aeeb 	bne.w	c284 <__aeabi_dmul+0x1f8>
    c4ae:	e712      	b.n	c2d6 <__aeabi_dmul+0x24a>

0000c4b0 <__aeabi_d2uiz>:
    c4b0:	004a      	lsls	r2, r1, #1
    c4b2:	d211      	bcs.n	c4d8 <__aeabi_d2uiz+0x28>
    c4b4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c4b8:	d211      	bcs.n	c4de <__aeabi_d2uiz+0x2e>
    c4ba:	d50d      	bpl.n	c4d8 <__aeabi_d2uiz+0x28>
    c4bc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c4c0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c4c4:	d40e      	bmi.n	c4e4 <__aeabi_d2uiz+0x34>
    c4c6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c4ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c4ce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c4d2:	fa23 f002 	lsr.w	r0, r3, r2
    c4d6:	4770      	bx	lr
    c4d8:	f04f 0000 	mov.w	r0, #0
    c4dc:	4770      	bx	lr
    c4de:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c4e2:	d102      	bne.n	c4ea <__aeabi_d2uiz+0x3a>
    c4e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c4e8:	4770      	bx	lr
    c4ea:	f04f 0000 	mov.w	r0, #0
    c4ee:	4770      	bx	lr

0000c4f0 <memcmp>:
    c4f0:	2a03      	cmp	r2, #3
    c4f2:	b470      	push	{r4, r5, r6}
    c4f4:	d926      	bls.n	c544 <memcmp+0x54>
    c4f6:	ea40 0301 	orr.w	r3, r0, r1
    c4fa:	079b      	lsls	r3, r3, #30
    c4fc:	d011      	beq.n	c522 <memcmp+0x32>
    c4fe:	7804      	ldrb	r4, [r0, #0]
    c500:	780d      	ldrb	r5, [r1, #0]
    c502:	42ac      	cmp	r4, r5
    c504:	d122      	bne.n	c54c <memcmp+0x5c>
    c506:	4402      	add	r2, r0
    c508:	1c43      	adds	r3, r0, #1
    c50a:	e005      	b.n	c518 <memcmp+0x28>
    c50c:	f813 4b01 	ldrb.w	r4, [r3], #1
    c510:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    c514:	42ac      	cmp	r4, r5
    c516:	d119      	bne.n	c54c <memcmp+0x5c>
    c518:	4293      	cmp	r3, r2
    c51a:	d1f7      	bne.n	c50c <memcmp+0x1c>
    c51c:	2000      	movs	r0, #0
    c51e:	bc70      	pop	{r4, r5, r6}
    c520:	4770      	bx	lr
    c522:	460c      	mov	r4, r1
    c524:	4603      	mov	r3, r0
    c526:	681e      	ldr	r6, [r3, #0]
    c528:	6825      	ldr	r5, [r4, #0]
    c52a:	4618      	mov	r0, r3
    c52c:	42ae      	cmp	r6, r5
    c52e:	4621      	mov	r1, r4
    c530:	f103 0304 	add.w	r3, r3, #4
    c534:	f104 0404 	add.w	r4, r4, #4
    c538:	d104      	bne.n	c544 <memcmp+0x54>
    c53a:	3a04      	subs	r2, #4
    c53c:	2a03      	cmp	r2, #3
    c53e:	4618      	mov	r0, r3
    c540:	4621      	mov	r1, r4
    c542:	d8f0      	bhi.n	c526 <memcmp+0x36>
    c544:	2a00      	cmp	r2, #0
    c546:	d1da      	bne.n	c4fe <memcmp+0xe>
    c548:	4610      	mov	r0, r2
    c54a:	e7e8      	b.n	c51e <memcmp+0x2e>
    c54c:	1b60      	subs	r0, r4, r5
    c54e:	bc70      	pop	{r4, r5, r6}
    c550:	4770      	bx	lr
    c552:	bf00      	nop

0000c554 <memcpy>:
    c554:	4684      	mov	ip, r0
    c556:	ea41 0300 	orr.w	r3, r1, r0
    c55a:	f013 0303 	ands.w	r3, r3, #3
    c55e:	d149      	bne.n	c5f4 <memcpy+0xa0>
    c560:	3a40      	subs	r2, #64	; 0x40
    c562:	d323      	bcc.n	c5ac <memcpy+0x58>
    c564:	680b      	ldr	r3, [r1, #0]
    c566:	6003      	str	r3, [r0, #0]
    c568:	684b      	ldr	r3, [r1, #4]
    c56a:	6043      	str	r3, [r0, #4]
    c56c:	688b      	ldr	r3, [r1, #8]
    c56e:	6083      	str	r3, [r0, #8]
    c570:	68cb      	ldr	r3, [r1, #12]
    c572:	60c3      	str	r3, [r0, #12]
    c574:	690b      	ldr	r3, [r1, #16]
    c576:	6103      	str	r3, [r0, #16]
    c578:	694b      	ldr	r3, [r1, #20]
    c57a:	6143      	str	r3, [r0, #20]
    c57c:	698b      	ldr	r3, [r1, #24]
    c57e:	6183      	str	r3, [r0, #24]
    c580:	69cb      	ldr	r3, [r1, #28]
    c582:	61c3      	str	r3, [r0, #28]
    c584:	6a0b      	ldr	r3, [r1, #32]
    c586:	6203      	str	r3, [r0, #32]
    c588:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    c58a:	6243      	str	r3, [r0, #36]	; 0x24
    c58c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    c58e:	6283      	str	r3, [r0, #40]	; 0x28
    c590:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    c592:	62c3      	str	r3, [r0, #44]	; 0x2c
    c594:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    c596:	6303      	str	r3, [r0, #48]	; 0x30
    c598:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    c59a:	6343      	str	r3, [r0, #52]	; 0x34
    c59c:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    c59e:	6383      	str	r3, [r0, #56]	; 0x38
    c5a0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    c5a2:	63c3      	str	r3, [r0, #60]	; 0x3c
    c5a4:	3040      	adds	r0, #64	; 0x40
    c5a6:	3140      	adds	r1, #64	; 0x40
    c5a8:	3a40      	subs	r2, #64	; 0x40
    c5aa:	d2db      	bcs.n	c564 <memcpy+0x10>
    c5ac:	3230      	adds	r2, #48	; 0x30
    c5ae:	d30b      	bcc.n	c5c8 <memcpy+0x74>
    c5b0:	680b      	ldr	r3, [r1, #0]
    c5b2:	6003      	str	r3, [r0, #0]
    c5b4:	684b      	ldr	r3, [r1, #4]
    c5b6:	6043      	str	r3, [r0, #4]
    c5b8:	688b      	ldr	r3, [r1, #8]
    c5ba:	6083      	str	r3, [r0, #8]
    c5bc:	68cb      	ldr	r3, [r1, #12]
    c5be:	60c3      	str	r3, [r0, #12]
    c5c0:	3010      	adds	r0, #16
    c5c2:	3110      	adds	r1, #16
    c5c4:	3a10      	subs	r2, #16
    c5c6:	d2f3      	bcs.n	c5b0 <memcpy+0x5c>
    c5c8:	320c      	adds	r2, #12
    c5ca:	d305      	bcc.n	c5d8 <memcpy+0x84>
    c5cc:	f851 3b04 	ldr.w	r3, [r1], #4
    c5d0:	f840 3b04 	str.w	r3, [r0], #4
    c5d4:	3a04      	subs	r2, #4
    c5d6:	d2f9      	bcs.n	c5cc <memcpy+0x78>
    c5d8:	3204      	adds	r2, #4
    c5da:	d008      	beq.n	c5ee <memcpy+0x9a>
    c5dc:	07d2      	lsls	r2, r2, #31
    c5de:	bf1c      	itt	ne
    c5e0:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c5e4:	f800 3b01 	strbne.w	r3, [r0], #1
    c5e8:	d301      	bcc.n	c5ee <memcpy+0x9a>
    c5ea:	880b      	ldrh	r3, [r1, #0]
    c5ec:	8003      	strh	r3, [r0, #0]
    c5ee:	4660      	mov	r0, ip
    c5f0:	4770      	bx	lr
    c5f2:	bf00      	nop
    c5f4:	2a08      	cmp	r2, #8
    c5f6:	d313      	bcc.n	c620 <memcpy+0xcc>
    c5f8:	078b      	lsls	r3, r1, #30
    c5fa:	d0b1      	beq.n	c560 <memcpy+0xc>
    c5fc:	f010 0303 	ands.w	r3, r0, #3
    c600:	d0ae      	beq.n	c560 <memcpy+0xc>
    c602:	f1c3 0304 	rsb	r3, r3, #4
    c606:	1ad2      	subs	r2, r2, r3
    c608:	07db      	lsls	r3, r3, #31
    c60a:	bf1c      	itt	ne
    c60c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c610:	f800 3b01 	strbne.w	r3, [r0], #1
    c614:	d3a4      	bcc.n	c560 <memcpy+0xc>
    c616:	f831 3b02 	ldrh.w	r3, [r1], #2
    c61a:	f820 3b02 	strh.w	r3, [r0], #2
    c61e:	e79f      	b.n	c560 <memcpy+0xc>
    c620:	3a04      	subs	r2, #4
    c622:	d3d9      	bcc.n	c5d8 <memcpy+0x84>
    c624:	3a01      	subs	r2, #1
    c626:	f811 3b01 	ldrb.w	r3, [r1], #1
    c62a:	f800 3b01 	strb.w	r3, [r0], #1
    c62e:	d2f9      	bcs.n	c624 <memcpy+0xd0>
    c630:	780b      	ldrb	r3, [r1, #0]
    c632:	7003      	strb	r3, [r0, #0]
    c634:	784b      	ldrb	r3, [r1, #1]
    c636:	7043      	strb	r3, [r0, #1]
    c638:	788b      	ldrb	r3, [r1, #2]
    c63a:	7083      	strb	r3, [r0, #2]
    c63c:	4660      	mov	r0, ip
    c63e:	4770      	bx	lr

0000c640 <strlen>:
    c640:	f020 0103 	bic.w	r1, r0, #3
    c644:	f010 0003 	ands.w	r0, r0, #3
    c648:	f1c0 0000 	rsb	r0, r0, #0
    c64c:	f851 3b04 	ldr.w	r3, [r1], #4
    c650:	f100 0c04 	add.w	ip, r0, #4
    c654:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    c658:	f06f 0200 	mvn.w	r2, #0
    c65c:	bf1c      	itt	ne
    c65e:	fa22 f20c 	lsrne.w	r2, r2, ip
    c662:	4313      	orrne	r3, r2
    c664:	f04f 0c01 	mov.w	ip, #1
    c668:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    c66c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    c670:	eba3 020c 	sub.w	r2, r3, ip
    c674:	ea22 0203 	bic.w	r2, r2, r3
    c678:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    c67c:	bf04      	itt	eq
    c67e:	f851 3b04 	ldreq.w	r3, [r1], #4
    c682:	3004      	addeq	r0, #4
    c684:	d0f4      	beq.n	c670 <strlen+0x30>
    c686:	f1c2 0100 	rsb	r1, r2, #0
    c68a:	ea02 0201 	and.w	r2, r2, r1
    c68e:	fab2 f282 	clz	r2, r2
    c692:	f1c2 021f 	rsb	r2, r2, #31
    c696:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    c69a:	4770      	bx	lr
    c69c:	00000043 	.word	0x00000043

0000c6a0 <_global_impure_ptr>:
    c6a0:	10000020                                 ...

0000c6a4 <advertising_channels>:
    c6a4:	00270c00                                ..'.

0000c6a8 <data_channels>:
    c6a8:	04030201 08070605 0d0b0a09 11100f0e     ................
    c6b8:	15141312 19181716 1d1c1b1a 21201f1e     .............. !
    c6c8:	25242322 00000026                       "#$%&...

0000c6d0 <payload>:
    c6d0:	aaaaaaca aaaaaaaa aaaaaaaa aaaaaaaa     ................
    c6e0:	aaaaaaaa                                ....

0000c6e4 <whitening>:
    c6e4:	01010101 01000100 00000100 00010000     ................
    c6f4:	01000101 00010101 01010100 00010000     ................
    c704:	01010001 01010000 00000000 00010100     ................
    c714:	01000101 01010100 00000100 00010100     ................
    c724:	00000100 00000100 00000000 01000001     ................
    c734:	01010000 00000100 01010101 01010100     ................
    c744:	00000000 01010101 00010101 01010000     ................
    c754:	01010001 01000000 00000100 00010001     ................

0000c764 <whitening_index>:
    c764:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    c774:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    c784:	5a541b28 662f703f                       (.TZ?p/f

0000c78c <hop_interval_lut>:
    c78c:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    c79c:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    c7ac:	120c0916 00000024                       ....$...

0000c7b4 <whitening_word>:
    c7b4:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    c7c4:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    c7d4:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    c7e4:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    c7f4:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    c804:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    c814:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    c824:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    c834:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    c844:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    c854:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    c864:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    c874:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    c884:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    c894:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    c8a4:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    c8b4:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    c8c4:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    c8d4:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    c8e4:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    c8f4:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    c904:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    c914:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    c924:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    c934:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    c944:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    c954:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    c964:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    c974:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    c984:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    c994:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    c9a4:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    c9b4:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    c9c4:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    c9d4:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    c9e4:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    c9f4:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    ca04:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    ca14:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    ca24:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    ca34:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    ca44:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    ca54:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    ca64:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    ca74:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    ca84:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    ca94:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    caa4:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    cab4:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    cac4:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    cad4:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    cae4:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    caf4:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    cb04:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    cb14:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    cb24:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    cb34:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    cb44:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    cb54:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    cb64:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    cb74:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    cb84:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    cb94:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    cba4:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    cbb4:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    cbc4:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    cbd4:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    cbe4:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    cbf4:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    cc04:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    cc14:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    cc24:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    cc34:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    cc44:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    cc54:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    cc64:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    cc74:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    cc84:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    cc94:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    cca4:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    ccb4:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    ccc4:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    ccd4:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    cce4:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    ccf4:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    cd04:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    cd14:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    cd24:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    cd34:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    cd44:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    cd54:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    cd64:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    cd74:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    cd84:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    cd94:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    cda4:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    cdb4:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    cdc4:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    cdd4:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    cde4:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    cdf4:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    ce04:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    ce14:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    ce24:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    ce34:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    ce44:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    ce54:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    ce64:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    ce74:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    ce84:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    ce94:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    cea4:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    ceb4:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    cec4:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    ced4:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    cee4:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    cef4:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    cf04:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    cf14:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    cf24:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

0000cf34 <compile_info>:
    cf34:	72656275 746f6f74 30322068 312d3531     ubertooth 2015-1
    cf44:	31522d30 6f722820 7740746f 69706965     0-R1 (root@weipi
    cf54:	2029676e 20657554 20766f4e 31203820     ng) Tue Nov  8 1
    cf64:	38353a34 2037343a 2054534b 36313032     4:58:47 KST 2016
    cf74:	00000000 35313032 2d30312d 00003152     ....2015-10-R1..
    cf84:	00000001 00000001 00000001 00000001     ................
    cf94:	ffff0900 ffffffff ff050102 0000ffff     ................
    cfa4:	0985096c 0000099e 03010200 03000100     l...............
    cfb4:	01020001 00000100 04020301 04020304     ................
    cfc4:	03040304 00000203                       ........

0000cfcc <abDescriptors>:
    cfcc:	02000112 400000ff 60021d50 02010101     .......@P..`....
    cfdc:	02090103 01010020 096e8000 02000004     .... .....n.....
    cfec:	000000ff 02820507 07000040 40020505     ........@......@
    cffc:	03040000 035c0409 00740068 00700074     ......\.h.t.t.p.
    d00c:	002f003a 0067002f 00740069 00750068     :././.g.i.t.h.u.
    d01c:	002e0062 006f0063 002f006d 00720067     b...c.o.m./.g.r.
    d02c:	00610065 00730074 006f0063 00740074     e.a.t.s.c.o.t.t.
    d03c:	00610067 00670064 00740065 002f0073     g.a.d.g.e.t.s./.
    d04c:	00620075 00720065 006f0074 0074006f     u.b.e.r.t.o.o.t.
    d05c:	031e0068 006c0062 00650075 006f0074     h...b.l.u.e.t.o.
    d06c:	0074006f 005f0068 00780072 00780074     o.t.h._.r.x.t.x.
    d07c:	00300312 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
    d08c:	00000031 6361387b 38613734 63632d38     1...{8ac47a88-cc
    d09c:	342d3632 2d396161 62373838 6332342d     26-4aa9-887b-42c
    d0ac:	66633861 36613730 00007d33 0000a00d     a8cf07a63}......
    d0bc:	0000a041 0000a059 0000a141 00009ff9     A...Y...A.......
    d0cc:	00009ff9 00009ff9 0000a1a5 0000a041     ............A...
    d0dc:	0000a1bd 00009ff9 00009ff9 00009ff9     ................
    d0ec:	0000a00d 0000a041 0000a291 0000a451     ....A.......Q...
    d0fc:	0000a311 0000a3d5                       ........

0000d104 <abExtendedOsFeatureDescriptor>:
    d104:	00000028 00040100 00000001 00000000     (...............
    d114:	49570100 4253554e 00000000 00000000     ..WINUSB........
    d124:	00000000 00000000                       ........

0000d12c <_init>:
    d12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d12e:	bf00      	nop
    d130:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d132:	bc08      	pop	{r3}
    d134:	469e      	mov	lr, r3
    d136:	4770      	bx	lr

0000d138 <__init_array_start>:
    d138:	00004215 	.word	0x00004215

0000d13c <__frame_dummy_init_array_entry>:
    d13c:	000040f1                                .@..

0000d140 <_fini>:
    d140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d142:	bf00      	nop
    d144:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d146:	bc08      	pop	{r3}
    d148:	469e      	mov	lr, r3
    d14a:	4770      	bx	lr

0000d14c <__fini_array_start>:
    d14c:	000040cd 	.word	0x000040cd
