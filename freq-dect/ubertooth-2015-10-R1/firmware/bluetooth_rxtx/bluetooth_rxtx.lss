
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000090a0  00004000  00004000  00004000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         0000093e  10000020  0000d0a0  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002928  10000960  0000d9de  00010960  2**3
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0001095e  2**0
                  CONTENTS, READONLY
  5 .comment      00000070  00000000  00000000  00010987  2**0
                  CONTENTS, READONLY
  6 .debug_frame  00001dc4  00000000  00000000  000109f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005477  00000000  00000000  000127bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001546  00000000  00000000  00017c33  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000700  00000000  00000000  00019179  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000620  00000000  00000000  00019879  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002a59  00000000  00000000  00019e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000022f4  00000000  00000000  0001c8f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 c1 a4 00 00 2d a5 00 00 2d a5 00 00     .?......-...-...
    4010:	2d a5 00 00 2d a5 00 00 2d a5 00 00 00 00 00 00     -...-...-.......
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 2d a5 00 00     ............-...
    4030:	2d a5 00 00 00 00 00 00 2d a5 00 00 2d a5 00 00     -.......-...-...
    4040:	2d a5 00 00 09 56 00 00 2d a5 00 00 2d a5 00 00     -....V..-...-...
    4050:	2d a5 00 00 2d a5 00 00 2d a5 00 00 2d a5 00 00     -...-...-...-...
    4060:	2d a5 00 00 2d a5 00 00 2d a5 00 00 2d a5 00 00     -...-...-...-...
    4070:	2d a5 00 00 2d a5 00 00 2d a5 00 00 2d a5 00 00     -...-...-...-...
    4080:	2d a5 00 00 2d a5 00 00 2d a5 00 00 2d a5 00 00     -...-...-...-...
    4090:	2d a5 00 00 25 57 00 00 2d a5 00 00 2d a5 00 00     -...%W..-...-...
    40a0:	b5 a4 00 00 2d a5 00 00 f1 5b 00 00 2d a5 00 00     ....-....[..-...
    40b0:	2d a5 00 00 2d a5 00 00 2d a5 00 00 2d a5 00 00     -...-...-...-...
    40c0:	2d a5 00 00 2d a5 00 00 2d a5 00 00                 -...-...-...

000040cc <__do_global_dtors_aux>:
    40cc:	b510      	push	{r4, lr}
    40ce:	4c05      	ldr	r4, [pc, #20]	; (40e4 <__do_global_dtors_aux+0x18>)
    40d0:	7823      	ldrb	r3, [r4, #0]
    40d2:	b933      	cbnz	r3, 40e2 <__do_global_dtors_aux+0x16>
    40d4:	4b04      	ldr	r3, [pc, #16]	; (40e8 <__do_global_dtors_aux+0x1c>)
    40d6:	b113      	cbz	r3, 40de <__do_global_dtors_aux+0x12>
    40d8:	4804      	ldr	r0, [pc, #16]	; (40ec <__do_global_dtors_aux+0x20>)
    40da:	f3af 8000 	nop.w
    40de:	2301      	movs	r3, #1
    40e0:	7023      	strb	r3, [r4, #0]
    40e2:	bd10      	pop	{r4, pc}
    40e4:	10000960 	.word	0x10000960
    40e8:	00000000 	.word	0x00000000
    40ec:	0000d07c 	.word	0x0000d07c

000040f0 <frame_dummy>:
    40f0:	4b08      	ldr	r3, [pc, #32]	; (4114 <frame_dummy+0x24>)
    40f2:	b510      	push	{r4, lr}
    40f4:	b11b      	cbz	r3, 40fe <frame_dummy+0xe>
    40f6:	4808      	ldr	r0, [pc, #32]	; (4118 <frame_dummy+0x28>)
    40f8:	4908      	ldr	r1, [pc, #32]	; (411c <frame_dummy+0x2c>)
    40fa:	f3af 8000 	nop.w
    40fe:	4808      	ldr	r0, [pc, #32]	; (4120 <frame_dummy+0x30>)
    4100:	6803      	ldr	r3, [r0, #0]
    4102:	b903      	cbnz	r3, 4106 <frame_dummy+0x16>
    4104:	bd10      	pop	{r4, pc}
    4106:	4b07      	ldr	r3, [pc, #28]	; (4124 <frame_dummy+0x34>)
    4108:	2b00      	cmp	r3, #0
    410a:	d0fb      	beq.n	4104 <frame_dummy+0x14>
    410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4110:	4718      	bx	r3
    4112:	bf00      	nop
    4114:	00000000 	.word	0x00000000
    4118:	0000d07c 	.word	0x0000d07c
    411c:	10000964 	.word	0x10000964
    4120:	10000960 	.word	0x10000960
    4124:	00000000 	.word	0x00000000

00004128 <__libc_init_array>:
    4128:	b570      	push	{r4, r5, r6, lr}
    412a:	4e0f      	ldr	r6, [pc, #60]	; (4168 <__libc_init_array+0x40>)
    412c:	4d0f      	ldr	r5, [pc, #60]	; (416c <__libc_init_array+0x44>)
    412e:	1b76      	subs	r6, r6, r5
    4130:	10b6      	asrs	r6, r6, #2
    4132:	bf18      	it	ne
    4134:	2400      	movne	r4, #0
    4136:	d005      	beq.n	4144 <__libc_init_array+0x1c>
    4138:	3401      	adds	r4, #1
    413a:	f855 3b04 	ldr.w	r3, [r5], #4
    413e:	4798      	blx	r3
    4140:	42a6      	cmp	r6, r4
    4142:	d1f9      	bne.n	4138 <__libc_init_array+0x10>
    4144:	4e0a      	ldr	r6, [pc, #40]	; (4170 <__libc_init_array+0x48>)
    4146:	4d0b      	ldr	r5, [pc, #44]	; (4174 <__libc_init_array+0x4c>)
    4148:	f008 ff98 	bl	d07c <_init>
    414c:	1b76      	subs	r6, r6, r5
    414e:	10b6      	asrs	r6, r6, #2
    4150:	bf18      	it	ne
    4152:	2400      	movne	r4, #0
    4154:	d006      	beq.n	4164 <__libc_init_array+0x3c>
    4156:	3401      	adds	r4, #1
    4158:	f855 3b04 	ldr.w	r3, [r5], #4
    415c:	4798      	blx	r3
    415e:	42a6      	cmp	r6, r4
    4160:	d1f9      	bne.n	4156 <__libc_init_array+0x2e>
    4162:	bd70      	pop	{r4, r5, r6, pc}
    4164:	bd70      	pop	{r4, r5, r6, pc}
    4166:	bf00      	nop
    4168:	0000d088 	.word	0x0000d088
    416c:	0000d088 	.word	0x0000d088
    4170:	0000d090 	.word	0x0000d090
    4174:	0000d088 	.word	0x0000d088

00004178 <memset>:
    4178:	b470      	push	{r4, r5, r6}
    417a:	0784      	lsls	r4, r0, #30
    417c:	d046      	beq.n	420c <memset+0x94>
    417e:	1e54      	subs	r4, r2, #1
    4180:	2a00      	cmp	r2, #0
    4182:	d041      	beq.n	4208 <memset+0x90>
    4184:	b2cd      	uxtb	r5, r1
    4186:	4603      	mov	r3, r0
    4188:	e002      	b.n	4190 <memset+0x18>
    418a:	1e62      	subs	r2, r4, #1
    418c:	b3e4      	cbz	r4, 4208 <memset+0x90>
    418e:	4614      	mov	r4, r2
    4190:	f803 5b01 	strb.w	r5, [r3], #1
    4194:	079a      	lsls	r2, r3, #30
    4196:	d1f8      	bne.n	418a <memset+0x12>
    4198:	2c03      	cmp	r4, #3
    419a:	d92e      	bls.n	41fa <memset+0x82>
    419c:	b2cd      	uxtb	r5, r1
    419e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    41a2:	2c0f      	cmp	r4, #15
    41a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    41a8:	d919      	bls.n	41de <memset+0x66>
    41aa:	4626      	mov	r6, r4
    41ac:	f103 0210 	add.w	r2, r3, #16
    41b0:	3e10      	subs	r6, #16
    41b2:	2e0f      	cmp	r6, #15
    41b4:	f842 5c10 	str.w	r5, [r2, #-16]
    41b8:	f842 5c0c 	str.w	r5, [r2, #-12]
    41bc:	f842 5c08 	str.w	r5, [r2, #-8]
    41c0:	f842 5c04 	str.w	r5, [r2, #-4]
    41c4:	f102 0210 	add.w	r2, r2, #16
    41c8:	d8f2      	bhi.n	41b0 <memset+0x38>
    41ca:	f1a4 0210 	sub.w	r2, r4, #16
    41ce:	f022 020f 	bic.w	r2, r2, #15
    41d2:	f004 040f 	and.w	r4, r4, #15
    41d6:	3210      	adds	r2, #16
    41d8:	2c03      	cmp	r4, #3
    41da:	4413      	add	r3, r2
    41dc:	d90d      	bls.n	41fa <memset+0x82>
    41de:	461e      	mov	r6, r3
    41e0:	4622      	mov	r2, r4
    41e2:	3a04      	subs	r2, #4
    41e4:	2a03      	cmp	r2, #3
    41e6:	f846 5b04 	str.w	r5, [r6], #4
    41ea:	d8fa      	bhi.n	41e2 <memset+0x6a>
    41ec:	1f22      	subs	r2, r4, #4
    41ee:	f022 0203 	bic.w	r2, r2, #3
    41f2:	3204      	adds	r2, #4
    41f4:	4413      	add	r3, r2
    41f6:	f004 0403 	and.w	r4, r4, #3
    41fa:	b12c      	cbz	r4, 4208 <memset+0x90>
    41fc:	b2c9      	uxtb	r1, r1
    41fe:	441c      	add	r4, r3
    4200:	f803 1b01 	strb.w	r1, [r3], #1
    4204:	42a3      	cmp	r3, r4
    4206:	d1fb      	bne.n	4200 <memset+0x88>
    4208:	bc70      	pop	{r4, r5, r6}
    420a:	4770      	bx	lr
    420c:	4614      	mov	r4, r2
    420e:	4603      	mov	r3, r0
    4210:	e7c2      	b.n	4198 <memset+0x20>
    4212:	bf00      	nop

00004214 <register_fini>:
    4214:	4b02      	ldr	r3, [pc, #8]	; (4220 <register_fini+0xc>)
    4216:	b113      	cbz	r3, 421e <register_fini+0xa>
    4218:	4802      	ldr	r0, [pc, #8]	; (4224 <register_fini+0x10>)
    421a:	f000 b805 	b.w	4228 <atexit>
    421e:	4770      	bx	lr
    4220:	00000000 	.word	0x00000000
    4224:	00004235 	.word	0x00004235

00004228 <atexit>:
    4228:	4601      	mov	r1, r0
    422a:	2000      	movs	r0, #0
    422c:	4602      	mov	r2, r0
    422e:	4603      	mov	r3, r0
    4230:	f000 b816 	b.w	4260 <__register_exitproc>

00004234 <__libc_fini_array>:
    4234:	b538      	push	{r3, r4, r5, lr}
    4236:	4b08      	ldr	r3, [pc, #32]	; (4258 <__libc_fini_array+0x24>)
    4238:	4d08      	ldr	r5, [pc, #32]	; (425c <__libc_fini_array+0x28>)
    423a:	1aed      	subs	r5, r5, r3
    423c:	10ac      	asrs	r4, r5, #2
    423e:	bf18      	it	ne
    4240:	18ed      	addne	r5, r5, r3
    4242:	d005      	beq.n	4250 <__libc_fini_array+0x1c>
    4244:	3c01      	subs	r4, #1
    4246:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    424a:	4798      	blx	r3
    424c:	2c00      	cmp	r4, #0
    424e:	d1f9      	bne.n	4244 <__libc_fini_array+0x10>
    4250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4254:	f008 bf1c 	b.w	d090 <_fini>
    4258:	0000d09c 	.word	0x0000d09c
    425c:	0000d0a0 	.word	0x0000d0a0

00004260 <__register_exitproc>:
    4260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4264:	4c25      	ldr	r4, [pc, #148]	; (42fc <__register_exitproc+0x9c>)
    4266:	4606      	mov	r6, r0
    4268:	6825      	ldr	r5, [r4, #0]
    426a:	4688      	mov	r8, r1
    426c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    4270:	4692      	mov	sl, r2
    4272:	4699      	mov	r9, r3
    4274:	b3c4      	cbz	r4, 42e8 <__register_exitproc+0x88>
    4276:	6860      	ldr	r0, [r4, #4]
    4278:	281f      	cmp	r0, #31
    427a:	dc17      	bgt.n	42ac <__register_exitproc+0x4c>
    427c:	1c41      	adds	r1, r0, #1
    427e:	b176      	cbz	r6, 429e <__register_exitproc+0x3e>
    4280:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    4284:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    4288:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
    428c:	2201      	movs	r2, #1
    428e:	4082      	lsls	r2, r0
    4290:	4315      	orrs	r5, r2
    4292:	2e02      	cmp	r6, #2
    4294:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    4298:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
    429c:	d01e      	beq.n	42dc <__register_exitproc+0x7c>
    429e:	1c83      	adds	r3, r0, #2
    42a0:	6061      	str	r1, [r4, #4]
    42a2:	2000      	movs	r0, #0
    42a4:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
    42a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42ac:	4b14      	ldr	r3, [pc, #80]	; (4300 <__register_exitproc+0xa0>)
    42ae:	b303      	cbz	r3, 42f2 <__register_exitproc+0x92>
    42b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42b4:	f3af 8000 	nop.w
    42b8:	4604      	mov	r4, r0
    42ba:	b1d0      	cbz	r0, 42f2 <__register_exitproc+0x92>
    42bc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    42c0:	2700      	movs	r7, #0
    42c2:	e884 0088 	stmia.w	r4, {r3, r7}
    42c6:	4638      	mov	r0, r7
    42c8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42cc:	2101      	movs	r1, #1
    42ce:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    42d2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    42d6:	2e00      	cmp	r6, #0
    42d8:	d0e1      	beq.n	429e <__register_exitproc+0x3e>
    42da:	e7d1      	b.n	4280 <__register_exitproc+0x20>
    42dc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    42e0:	431a      	orrs	r2, r3
    42e2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    42e6:	e7da      	b.n	429e <__register_exitproc+0x3e>
    42e8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    42ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42f0:	e7c1      	b.n	4276 <__register_exitproc+0x16>
    42f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42fa:	bf00      	nop
    42fc:	0000c5f0 	.word	0x0000c5f0
    4300:	00000000 	.word	0x00000000

00004304 <rssi_reset>:
int8_t rssi_min;
uint8_t rssi_count = 0;
int32_t rssi_sum = 0;

static void rssi_reset(void)
{
    4304:	b480      	push	{r7}
    4306:	af00      	add	r7, sp, #0
	rssi_count = 0;
    4308:	4b07      	ldr	r3, [pc, #28]	; (4328 <rssi_reset+0x24>)
    430a:	2200      	movs	r2, #0
    430c:	701a      	strb	r2, [r3, #0]
	rssi_sum = 0;
    430e:	4b07      	ldr	r3, [pc, #28]	; (432c <rssi_reset+0x28>)
    4310:	2200      	movs	r2, #0
    4312:	601a      	str	r2, [r3, #0]
	rssi_max = INT8_MIN;
    4314:	4b06      	ldr	r3, [pc, #24]	; (4330 <rssi_reset+0x2c>)
    4316:	2280      	movs	r2, #128	; 0x80
    4318:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    431a:	4b06      	ldr	r3, [pc, #24]	; (4334 <rssi_reset+0x30>)
    431c:	227f      	movs	r2, #127	; 0x7f
    431e:	701a      	strb	r2, [r3, #0]
}
    4320:	46bd      	mov	sp, r7
    4322:	f85d 7b04 	ldr.w	r7, [sp], #4
    4326:	4770      	bx	lr
    4328:	10000a49 	.word	0x10000a49
    432c:	10000a4c 	.word	0x10000a4c
    4330:	10000b04 	.word	0x10000b04
    4334:	10000bb8 	.word	0x10000bb8

00004338 <rssi_add>:

static void rssi_add(int8_t v)
{
    4338:	b480      	push	{r7}
    433a:	b083      	sub	sp, #12
    433c:	af00      	add	r7, sp, #0
    433e:	4603      	mov	r3, r0
    4340:	71fb      	strb	r3, [r7, #7]
	rssi_max = (v > rssi_max) ? v : rssi_max;
    4342:	4b14      	ldr	r3, [pc, #80]	; (4394 <rssi_add+0x5c>)
    4344:	781b      	ldrb	r3, [r3, #0]
    4346:	b25a      	sxtb	r2, r3
    4348:	f997 3007 	ldrsb.w	r3, [r7, #7]
    434c:	4293      	cmp	r3, r2
    434e:	bfb8      	it	lt
    4350:	4613      	movlt	r3, r2
    4352:	b2da      	uxtb	r2, r3
    4354:	4b0f      	ldr	r3, [pc, #60]	; (4394 <rssi_add+0x5c>)
    4356:	701a      	strb	r2, [r3, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    4358:	4b0f      	ldr	r3, [pc, #60]	; (4398 <rssi_add+0x60>)
    435a:	781b      	ldrb	r3, [r3, #0]
    435c:	b25a      	sxtb	r2, r3
    435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4362:	4293      	cmp	r3, r2
    4364:	bfa8      	it	ge
    4366:	4613      	movge	r3, r2
    4368:	b2da      	uxtb	r2, r3
    436a:	4b0b      	ldr	r3, [pc, #44]	; (4398 <rssi_add+0x60>)
    436c:	701a      	strb	r2, [r3, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4372:	021a      	lsls	r2, r3, #8
    4374:	4b09      	ldr	r3, [pc, #36]	; (439c <rssi_add+0x64>)
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	4413      	add	r3, r2
    437a:	4a08      	ldr	r2, [pc, #32]	; (439c <rssi_add+0x64>)
    437c:	6013      	str	r3, [r2, #0]
	rssi_count += 1;
    437e:	4b08      	ldr	r3, [pc, #32]	; (43a0 <rssi_add+0x68>)
    4380:	781b      	ldrb	r3, [r3, #0]
    4382:	3301      	adds	r3, #1
    4384:	b2da      	uxtb	r2, r3
    4386:	4b06      	ldr	r3, [pc, #24]	; (43a0 <rssi_add+0x68>)
    4388:	701a      	strb	r2, [r3, #0]
}
    438a:	370c      	adds	r7, #12
    438c:	46bd      	mov	sp, r7
    438e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4392:	4770      	bx	lr
    4394:	10000b04 	.word	0x10000b04
    4398:	10000bb8 	.word	0x10000bb8
    439c:	10000a4c 	.word	0x10000a4c
    43a0:	10000a49 	.word	0x10000a49

000043a4 <rssi_iir_update>:

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
static void rssi_iir_update(void)
{
    43a4:	b480      	push	{r7}
    43a6:	b085      	sub	sp, #20
    43a8:	af00      	add	r7, sp, #0
	int32_t avg;
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first
	 * slot of array if not sweeping. */
	if (hop_mode > 0)
    43aa:	4b1f      	ldr	r3, [pc, #124]	; (4428 <rssi_iir_update+0x84>)
    43ac:	781b      	ldrb	r3, [r3, #0]
    43ae:	2b00      	cmp	r3, #0
    43b0:	d006      	beq.n	43c0 <rssi_iir_update+0x1c>
		i = channel - 2402;
    43b2:	4b1e      	ldr	r3, [pc, #120]	; (442c <rssi_iir_update+0x88>)
    43b4:	881b      	ldrh	r3, [r3, #0]
    43b6:	b29b      	uxth	r3, r3
    43b8:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    43bc:	60fb      	str	r3, [r7, #12]
    43be:	e001      	b.n	43c4 <rssi_iir_update+0x20>
	else
		i = 0;
    43c0:	2300      	movs	r3, #0
    43c2:	60fb      	str	r3, [r7, #12]

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    43c4:	4b1a      	ldr	r3, [pc, #104]	; (4430 <rssi_iir_update+0x8c>)
    43c6:	781b      	ldrb	r3, [r3, #0]
    43c8:	2b00      	cmp	r3, #0
    43ca:	d008      	beq.n	43de <rssi_iir_update+0x3a>
		avg = (rssi_sum  + 128) / rssi_count;
    43cc:	4b19      	ldr	r3, [pc, #100]	; (4434 <rssi_iir_update+0x90>)
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	3380      	adds	r3, #128	; 0x80
    43d2:	4a17      	ldr	r2, [pc, #92]	; (4430 <rssi_iir_update+0x8c>)
    43d4:	7812      	ldrb	r2, [r2, #0]
    43d6:	fb93 f3f2 	sdiv	r3, r3, r2
    43da:	60bb      	str	r3, [r7, #8]
    43dc:	e001      	b.n	43e2 <rssi_iir_update+0x3e>
	else
		avg = 0; // really an error
    43de:	2300      	movs	r3, #0
    43e0:	60bb      	str	r3, [r7, #8]
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    43e2:	4a15      	ldr	r2, [pc, #84]	; (4438 <rssi_iir_update+0x94>)
    43e4:	68fb      	ldr	r3, [r7, #12]
    43e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    43ea:	b21a      	sxth	r2, r3
    43ec:	4613      	mov	r3, r2
    43ee:	019b      	lsls	r3, r3, #6
    43f0:	1a9b      	subs	r3, r3, r2
    43f2:	009b      	lsls	r3, r3, #2
    43f4:	4413      	add	r3, r2
    43f6:	607b      	str	r3, [r7, #4]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    43f8:	68ba      	ldr	r2, [r7, #8]
    43fa:	4613      	mov	r3, r2
    43fc:	005b      	lsls	r3, r3, #1
    43fe:	4413      	add	r3, r2
    4400:	687a      	ldr	r2, [r7, #4]
    4402:	4413      	add	r3, r2
    4404:	607b      	str	r3, [r7, #4]
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	3380      	adds	r3, #128	; 0x80
    440a:	2b00      	cmp	r3, #0
    440c:	da00      	bge.n	4410 <rssi_iir_update+0x6c>
    440e:	33ff      	adds	r3, #255	; 0xff
    4410:	121b      	asrs	r3, r3, #8
    4412:	b299      	uxth	r1, r3
    4414:	4a08      	ldr	r2, [pc, #32]	; (4438 <rssi_iir_update+0x94>)
    4416:	68fb      	ldr	r3, [r7, #12]
    4418:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
    441c:	3714      	adds	r7, #20
    441e:	46bd      	mov	sp, r7
    4420:	f85d 7b04 	ldr.w	r7, [sp], #4
    4424:	4770      	bx	lr
    4426:	bf00      	nop
    4428:	1000097c 	.word	0x1000097c
    442c:	1000049c 	.word	0x1000049c
    4430:	10000a49 	.word	0x10000a49
    4434:	10000a4c 	.word	0x10000a4c
    4438:	100009a0 	.word	0x100009a0

0000443c <cs_threshold_set>:
/* Set CC2400 carrier sense threshold and store value to
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, u8 samples)
{
    443c:	b580      	push	{r7, lr}
    443e:	b082      	sub	sp, #8
    4440:	af00      	add	r7, sp, #0
    4442:	4603      	mov	r3, r0
    4444:	460a      	mov	r2, r1
    4446:	71fb      	strb	r3, [r7, #7]
    4448:	4613      	mov	r3, r2
    444a:	71bb      	strb	r3, [r7, #6]
	level = MIN(MAX(level,-120),(-20));
    444c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4450:	f113 0f14 	cmn.w	r3, #20
    4454:	d00d      	beq.n	4472 <cs_threshold_set+0x36>
    4456:	f997 3007 	ldrsb.w	r3, [r7, #7]
    445a:	f113 0f13 	cmn.w	r3, #19
    445e:	da08      	bge.n	4472 <cs_threshold_set+0x36>
    4460:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4464:	f06f 0277 	mvn.w	r2, #119	; 0x77
    4468:	4293      	cmp	r3, r2
    446a:	bfb8      	it	lt
    446c:	4613      	movlt	r3, r2
    446e:	b2db      	uxtb	r3, r3
    4470:	e000      	b.n	4474 <cs_threshold_set+0x38>
    4472:	23ec      	movs	r3, #236	; 0xec
    4474:	71fb      	strb	r3, [r7, #7]
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | (samples&3));
    4476:	79fb      	ldrb	r3, [r7, #7]
    4478:	3338      	adds	r3, #56	; 0x38
    447a:	b2db      	uxtb	r3, r3
    447c:	b29b      	uxth	r3, r3
    447e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    4482:	b29a      	uxth	r2, r3
    4484:	79bb      	ldrb	r3, [r7, #6]
    4486:	b29b      	uxth	r3, r3
    4488:	f003 0303 	and.w	r3, r3, #3
    448c:	b29b      	uxth	r3, r3
    448e:	4313      	orrs	r3, r2
    4490:	b29b      	uxth	r3, r3
    4492:	b29b      	uxth	r3, r3
    4494:	2006      	movs	r0, #6
    4496:	4619      	mov	r1, r3
    4498:	f006 fa30 	bl	a8fc <cc2400_set>
	cs_threshold_cur = level;
    449c:	4a08      	ldr	r2, [pc, #32]	; (44c0 <cs_threshold_set+0x84>)
    449e:	79fb      	ldrb	r3, [r7, #7]
    44a0:	7013      	strb	r3, [r2, #0]
	cs_no_squelch = (level <= -120);
    44a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    44a6:	f113 0f77 	cmn.w	r3, #119	; 0x77
    44aa:	bfb4      	ite	lt
    44ac:	2301      	movlt	r3, #1
    44ae:	2300      	movge	r3, #0
    44b0:	b2db      	uxtb	r3, r3
    44b2:	461a      	mov	r2, r3
    44b4:	4b03      	ldr	r3, [pc, #12]	; (44c4 <cs_threshold_set+0x88>)
    44b6:	701a      	strb	r2, [r3, #0]
}
    44b8:	3708      	adds	r7, #8
    44ba:	46bd      	mov	sp, r7
    44bc:	bd80      	pop	{r7, pc}
    44be:	bf00      	nop
    44c0:	1000044d 	.word	0x1000044d
    44c4:	1000097e 	.word	0x1000097e

000044c8 <enqueue>:

static int enqueue(u8 type, u8 *buf)
{
    44c8:	b580      	push	{r7, lr}
    44ca:	b088      	sub	sp, #32
    44cc:	af00      	add	r7, sp, #0
    44ce:	4603      	mov	r3, r0
    44d0:	6039      	str	r1, [r7, #0]
    44d2:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    44d4:	f004 ffaa 	bl	942c <usb_enqueue>
    44d8:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    44da:	69fb      	ldr	r3, [r7, #28]
    44dc:	2b00      	cmp	r3, #0
    44de:	d109      	bne.n	44f4 <enqueue+0x2c>
		status |= FIFO_OVERFLOW;
    44e0:	4b52      	ldr	r3, [pc, #328]	; (462c <enqueue+0x164>)
    44e2:	781b      	ldrb	r3, [r3, #0]
    44e4:	b2db      	uxtb	r3, r3
    44e6:	f043 0304 	orr.w	r3, r3, #4
    44ea:	b2da      	uxtb	r2, r3
    44ec:	4b4f      	ldr	r3, [pc, #316]	; (462c <enqueue+0x164>)
    44ee:	701a      	strb	r2, [r3, #0]
		return 0;
    44f0:	2300      	movs	r3, #0
    44f2:	e097      	b.n	4624 <enqueue+0x15c>
	}

	f->pkt_type = type;
    44f4:	69fb      	ldr	r3, [r7, #28]
    44f6:	79fa      	ldrb	r2, [r7, #7]
    44f8:	701a      	strb	r2, [r3, #0]
	if(type == SPECAN) {
    44fa:	79fb      	ldrb	r3, [r7, #7]
    44fc:	2b04      	cmp	r3, #4
    44fe:	d113      	bne.n	4528 <enqueue+0x60>
		f->clkn_high = (clkn >> 20) & 0xff;
    4500:	4b4b      	ldr	r3, [pc, #300]	; (4630 <enqueue+0x168>)
    4502:	681b      	ldr	r3, [r3, #0]
    4504:	0d1b      	lsrs	r3, r3, #20
    4506:	b2da      	uxtb	r2, r3
    4508:	69fb      	ldr	r3, [r7, #28]
    450a:	70da      	strb	r2, [r3, #3]
		f->clk100ns = CLK100NS;
    450c:	4b48      	ldr	r3, [pc, #288]	; (4630 <enqueue+0x168>)
    450e:	681b      	ldr	r3, [r3, #0]
    4510:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4514:	f640 4235 	movw	r2, #3125	; 0xc35
    4518:	fb02 f203 	mul.w	r2, r2, r3
    451c:	4b45      	ldr	r3, [pc, #276]	; (4634 <enqueue+0x16c>)
    451e:	681b      	ldr	r3, [r3, #0]
    4520:	441a      	add	r2, r3
    4522:	69fb      	ldr	r3, [r7, #28]
    4524:	605a      	str	r2, [r3, #4]
    4526:	e008      	b.n	453a <enqueue+0x72>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    4528:	4b43      	ldr	r3, [pc, #268]	; (4638 <enqueue+0x170>)
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	b2da      	uxtb	r2, r3
    452e:	69fb      	ldr	r3, [r7, #28]
    4530:	70da      	strb	r2, [r3, #3]
		f->clk100ns = idle_buf_clk100ns;
    4532:	4b42      	ldr	r3, [pc, #264]	; (463c <enqueue+0x174>)
    4534:	681a      	ldr	r2, [r3, #0]
    4536:	69fb      	ldr	r3, [r7, #28]
    4538:	605a      	str	r2, [r3, #4]
	}
	f->channel = idle_buf_channel - 2402;
    453a:	4b41      	ldr	r3, [pc, #260]	; (4640 <enqueue+0x178>)
    453c:	881b      	ldrh	r3, [r3, #0]
    453e:	b29b      	uxth	r3, r3
    4540:	b2db      	uxtb	r3, r3
    4542:	3b62      	subs	r3, #98	; 0x62
    4544:	b2da      	uxtb	r2, r3
    4546:	69fb      	ldr	r3, [r7, #28]
    4548:	709a      	strb	r2, [r3, #2]
	f->rssi_min = rssi_min;
    454a:	4b3e      	ldr	r3, [pc, #248]	; (4644 <enqueue+0x17c>)
    454c:	781b      	ldrb	r3, [r3, #0]
    454e:	b2da      	uxtb	r2, r3
    4550:	69fb      	ldr	r3, [r7, #28]
    4552:	725a      	strb	r2, [r3, #9]
	f->rssi_max = rssi_max;
    4554:	4b3c      	ldr	r3, [pc, #240]	; (4648 <enqueue+0x180>)
    4556:	781b      	ldrb	r3, [r3, #0]
    4558:	b2da      	uxtb	r2, r3
    455a:	69fb      	ldr	r3, [r7, #28]
    455c:	721a      	strb	r2, [r3, #8]
	f->reserved[0] = device_index;
    455e:	4b3b      	ldr	r3, [pc, #236]	; (464c <enqueue+0x184>)
    4560:	781a      	ldrb	r2, [r3, #0]
    4562:	69fb      	ldr	r3, [r7, #28]
    4564:	731a      	strb	r2, [r3, #12]
	f->rssi_avg = rssi_sum/rssi_count;
    4566:	4b3a      	ldr	r3, [pc, #232]	; (4650 <enqueue+0x188>)
    4568:	681b      	ldr	r3, [r3, #0]
    456a:	4a3a      	ldr	r2, [pc, #232]	; (4654 <enqueue+0x18c>)
    456c:	7812      	ldrb	r2, [r2, #0]
    456e:	fb93 f3f2 	sdiv	r3, r3, r2
    4572:	b2da      	uxtb	r2, r3
    4574:	69fb      	ldr	r3, [r7, #28]
    4576:	729a      	strb	r2, [r3, #10]
	
//	f->rssi_count = device_index;

	USRLED_SET;
    4578:	4b37      	ldr	r3, [pc, #220]	; (4658 <enqueue+0x190>)
    457a:	2202      	movs	r2, #2
    457c:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    457e:	69fb      	ldr	r3, [r7, #28]
    4580:	330e      	adds	r3, #14
    4582:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    4584:	683b      	ldr	r3, [r7, #0]
    4586:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    4588:	697b      	ldr	r3, [r7, #20]
    458a:	681a      	ldr	r2, [r3, #0]
    458c:	69bb      	ldr	r3, [r7, #24]
    458e:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    4590:	69bb      	ldr	r3, [r7, #24]
    4592:	3304      	adds	r3, #4
    4594:	697a      	ldr	r2, [r7, #20]
    4596:	6852      	ldr	r2, [r2, #4]
    4598:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    459a:	69bb      	ldr	r3, [r7, #24]
    459c:	3308      	adds	r3, #8
    459e:	697a      	ldr	r2, [r7, #20]
    45a0:	6892      	ldr	r2, [r2, #8]
    45a2:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    45a4:	69bb      	ldr	r3, [r7, #24]
    45a6:	330c      	adds	r3, #12
    45a8:	697a      	ldr	r2, [r7, #20]
    45aa:	68d2      	ldr	r2, [r2, #12]
    45ac:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    45ae:	69bb      	ldr	r3, [r7, #24]
    45b0:	3310      	adds	r3, #16
    45b2:	697a      	ldr	r2, [r7, #20]
    45b4:	6912      	ldr	r2, [r2, #16]
    45b6:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    45b8:	69bb      	ldr	r3, [r7, #24]
    45ba:	3314      	adds	r3, #20
    45bc:	697a      	ldr	r2, [r7, #20]
    45be:	6952      	ldr	r2, [r2, #20]
    45c0:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    45c2:	69bb      	ldr	r3, [r7, #24]
    45c4:	3318      	adds	r3, #24
    45c6:	697a      	ldr	r2, [r7, #20]
    45c8:	6992      	ldr	r2, [r2, #24]
    45ca:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    45cc:	69bb      	ldr	r3, [r7, #24]
    45ce:	331c      	adds	r3, #28
    45d0:	697a      	ldr	r2, [r7, #20]
    45d2:	69d2      	ldr	r2, [r2, #28]
    45d4:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    45d6:	69bb      	ldr	r3, [r7, #24]
    45d8:	3320      	adds	r3, #32
    45da:	697a      	ldr	r2, [r7, #20]
    45dc:	6a12      	ldr	r2, [r2, #32]
    45de:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    45e0:	69bb      	ldr	r3, [r7, #24]
    45e2:	3324      	adds	r3, #36	; 0x24
    45e4:	697a      	ldr	r2, [r7, #20]
    45e6:	6a52      	ldr	r2, [r2, #36]	; 0x24
    45e8:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    45ea:	69bb      	ldr	r3, [r7, #24]
    45ec:	3328      	adds	r3, #40	; 0x28
    45ee:	697a      	ldr	r2, [r7, #20]
    45f0:	6a92      	ldr	r2, [r2, #40]	; 0x28
    45f2:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    45f4:	69bb      	ldr	r3, [r7, #24]
    45f6:	332c      	adds	r3, #44	; 0x2c
    45f8:	697a      	ldr	r2, [r7, #20]
    45fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    45fc:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    45fe:	69fb      	ldr	r3, [r7, #28]
    4600:	330e      	adds	r3, #14
    4602:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    4604:	683b      	ldr	r3, [r7, #0]
    4606:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    4608:	693b      	ldr	r3, [r7, #16]
    460a:	3330      	adds	r3, #48	; 0x30
    460c:	68fa      	ldr	r2, [r7, #12]
    460e:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    4610:	801a      	strh	r2, [r3, #0]

	f->status = status;
    4612:	4b06      	ldr	r3, [pc, #24]	; (462c <enqueue+0x164>)
    4614:	781b      	ldrb	r3, [r3, #0]
    4616:	b2da      	uxtb	r2, r3
    4618:	69fb      	ldr	r3, [r7, #28]
    461a:	705a      	strb	r2, [r3, #1]
	status = 0;
    461c:	4b03      	ldr	r3, [pc, #12]	; (462c <enqueue+0x164>)
    461e:	2200      	movs	r2, #0
    4620:	701a      	strb	r2, [r3, #0]

	return 1;
    4622:	2301      	movs	r3, #1
}
    4624:	4618      	mov	r0, r3
    4626:	3720      	adds	r7, #32
    4628:	46bd      	mov	sp, r7
    462a:	bd80      	pop	{r7, pc}
    462c:	10000a48 	.word	0x10000a48
    4630:	10000be4 	.word	0x10000be4
    4634:	40004008 	.word	0x40004008
    4638:	10001030 	.word	0x10001030
    463c:	10000bc8 	.word	0x10000bc8
    4640:	10000988 	.word	0x10000988
    4644:	10000bb8 	.word	0x10000bb8
    4648:	10000b04 	.word	0x10000b04
    464c:	10000be8 	.word	0x10000be8
    4650:	10000a4c 	.word	0x10000a4c
    4654:	10000a49 	.word	0x10000a49
    4658:	2009c038 	.word	0x2009c038

0000465c <enqueue_legacy>:


static int enqueue_legacy(u8 type, u8 *buf)
{
    465c:	b580      	push	{r7, lr}
    465e:	b088      	sub	sp, #32
    4660:	af00      	add	r7, sp, #0
    4662:	4603      	mov	r3, r0
    4664:	6039      	str	r1, [r7, #0]
    4666:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    4668:	f004 fee0 	bl	942c <usb_enqueue>
    466c:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    466e:	69fb      	ldr	r3, [r7, #28]
    4670:	2b00      	cmp	r3, #0
    4672:	d109      	bne.n	4688 <enqueue_legacy+0x2c>
		status |= FIFO_OVERFLOW;
    4674:	4b3d      	ldr	r3, [pc, #244]	; (476c <enqueue_legacy+0x110>)
    4676:	781b      	ldrb	r3, [r3, #0]
    4678:	b2db      	uxtb	r3, r3
    467a:	f043 0304 	orr.w	r3, r3, #4
    467e:	b2da      	uxtb	r2, r3
    4680:	4b3a      	ldr	r3, [pc, #232]	; (476c <enqueue_legacy+0x110>)
    4682:	701a      	strb	r2, [r3, #0]
		return 0;
    4684:	2300      	movs	r3, #0
    4686:	e06d      	b.n	4764 <enqueue_legacy+0x108>
	}

	f->pkt_type = type;
    4688:	69fb      	ldr	r3, [r7, #28]
    468a:	79fa      	ldrb	r2, [r7, #7]
    468c:	701a      	strb	r2, [r3, #0]
//	f->clkn_high = idle_buf_clkn_high;
	f->clk100ns = clkn;
    468e:	4b38      	ldr	r3, [pc, #224]	; (4770 <enqueue_legacy+0x114>)
    4690:	681a      	ldr	r2, [r3, #0]
    4692:	69fb      	ldr	r3, [r7, #28]
    4694:	605a      	str	r2, [r3, #4]
	
	f->channel = idle_buf_channel - 2402;
    4696:	4b37      	ldr	r3, [pc, #220]	; (4774 <enqueue_legacy+0x118>)
    4698:	881b      	ldrh	r3, [r3, #0]
    469a:	b29b      	uxth	r3, r3
    469c:	b2db      	uxtb	r3, r3
    469e:	3b62      	subs	r3, #98	; 0x62
    46a0:	b2da      	uxtb	r2, r3
    46a2:	69fb      	ldr	r3, [r7, #28]
    46a4:	709a      	strb	r2, [r3, #2]
//	f->rssi_min = rssi_min;
//	f->rssi_max = rssi_max;
//	f->reserved[0] = device_index;
	f->rssi_avg = rssi_sum/rssi_count;
    46a6:	4b34      	ldr	r3, [pc, #208]	; (4778 <enqueue_legacy+0x11c>)
    46a8:	681b      	ldr	r3, [r3, #0]
    46aa:	4a34      	ldr	r2, [pc, #208]	; (477c <enqueue_legacy+0x120>)
    46ac:	7812      	ldrb	r2, [r2, #0]
    46ae:	fb93 f3f2 	sdiv	r3, r3, r2
    46b2:	b2da      	uxtb	r2, r3
    46b4:	69fb      	ldr	r3, [r7, #28]
    46b6:	729a      	strb	r2, [r3, #10]
	
//	f->rssi_count = device_index;

	USRLED_SET;
    46b8:	4b31      	ldr	r3, [pc, #196]	; (4780 <enqueue_legacy+0x124>)
    46ba:	2202      	movs	r2, #2
    46bc:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    46be:	69fb      	ldr	r3, [r7, #28]
    46c0:	330e      	adds	r3, #14
    46c2:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    46c4:	683b      	ldr	r3, [r7, #0]
    46c6:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    46c8:	697b      	ldr	r3, [r7, #20]
    46ca:	681a      	ldr	r2, [r3, #0]
    46cc:	69bb      	ldr	r3, [r7, #24]
    46ce:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    46d0:	69bb      	ldr	r3, [r7, #24]
    46d2:	3304      	adds	r3, #4
    46d4:	697a      	ldr	r2, [r7, #20]
    46d6:	6852      	ldr	r2, [r2, #4]
    46d8:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    46da:	69bb      	ldr	r3, [r7, #24]
    46dc:	3308      	adds	r3, #8
    46de:	697a      	ldr	r2, [r7, #20]
    46e0:	6892      	ldr	r2, [r2, #8]
    46e2:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    46e4:	69bb      	ldr	r3, [r7, #24]
    46e6:	330c      	adds	r3, #12
    46e8:	697a      	ldr	r2, [r7, #20]
    46ea:	68d2      	ldr	r2, [r2, #12]
    46ec:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    46ee:	69bb      	ldr	r3, [r7, #24]
    46f0:	3310      	adds	r3, #16
    46f2:	697a      	ldr	r2, [r7, #20]
    46f4:	6912      	ldr	r2, [r2, #16]
    46f6:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    46f8:	69bb      	ldr	r3, [r7, #24]
    46fa:	3314      	adds	r3, #20
    46fc:	697a      	ldr	r2, [r7, #20]
    46fe:	6952      	ldr	r2, [r2, #20]
    4700:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    4702:	69bb      	ldr	r3, [r7, #24]
    4704:	3318      	adds	r3, #24
    4706:	697a      	ldr	r2, [r7, #20]
    4708:	6992      	ldr	r2, [r2, #24]
    470a:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    470c:	69bb      	ldr	r3, [r7, #24]
    470e:	331c      	adds	r3, #28
    4710:	697a      	ldr	r2, [r7, #20]
    4712:	69d2      	ldr	r2, [r2, #28]
    4714:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    4716:	69bb      	ldr	r3, [r7, #24]
    4718:	3320      	adds	r3, #32
    471a:	697a      	ldr	r2, [r7, #20]
    471c:	6a12      	ldr	r2, [r2, #32]
    471e:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    4720:	69bb      	ldr	r3, [r7, #24]
    4722:	3324      	adds	r3, #36	; 0x24
    4724:	697a      	ldr	r2, [r7, #20]
    4726:	6a52      	ldr	r2, [r2, #36]	; 0x24
    4728:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    472a:	69bb      	ldr	r3, [r7, #24]
    472c:	3328      	adds	r3, #40	; 0x28
    472e:	697a      	ldr	r2, [r7, #20]
    4730:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4732:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    4734:	69bb      	ldr	r3, [r7, #24]
    4736:	332c      	adds	r3, #44	; 0x2c
    4738:	697a      	ldr	r2, [r7, #20]
    473a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    473c:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    473e:	69fb      	ldr	r3, [r7, #28]
    4740:	330e      	adds	r3, #14
    4742:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    4744:	683b      	ldr	r3, [r7, #0]
    4746:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    4748:	693b      	ldr	r3, [r7, #16]
    474a:	3330      	adds	r3, #48	; 0x30
    474c:	68fa      	ldr	r2, [r7, #12]
    474e:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    4750:	801a      	strh	r2, [r3, #0]

	f->status = status;
    4752:	4b06      	ldr	r3, [pc, #24]	; (476c <enqueue_legacy+0x110>)
    4754:	781b      	ldrb	r3, [r3, #0]
    4756:	b2da      	uxtb	r2, r3
    4758:	69fb      	ldr	r3, [r7, #28]
    475a:	705a      	strb	r2, [r3, #1]
	status = 0;
    475c:	4b03      	ldr	r3, [pc, #12]	; (476c <enqueue_legacy+0x110>)
    475e:	2200      	movs	r2, #0
    4760:	701a      	strb	r2, [r3, #0]

	return 1;
    4762:	2301      	movs	r3, #1
}
    4764:	4618      	mov	r0, r3
    4766:	3720      	adds	r7, #32
    4768:	46bd      	mov	sp, r7
    476a:	bd80      	pop	{r7, pc}
    476c:	10000a48 	.word	0x10000a48
    4770:	10000be4 	.word	0x10000be4
    4774:	10000988 	.word	0x10000988
    4778:	10000a4c 	.word	0x10000a4c
    477c:	10000a49 	.word	0x10000a49
    4780:	2009c038 	.word	0x2009c038

00004784 <enqueue_freq>:



static int enqueue_freq(u8 type, u8 *buf)
{
    4784:	b580      	push	{r7, lr}
    4786:	b088      	sub	sp, #32
    4788:	af00      	add	r7, sp, #0
    478a:	4603      	mov	r3, r0
    478c:	6039      	str	r1, [r7, #0]
    478e:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    4790:	f004 fe4c 	bl	942c <usb_enqueue>
    4794:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    4796:	69fb      	ldr	r3, [r7, #28]
    4798:	2b00      	cmp	r3, #0
    479a:	d109      	bne.n	47b0 <enqueue_freq+0x2c>
		status |= FIFO_OVERFLOW;
    479c:	4b3d      	ldr	r3, [pc, #244]	; (4894 <enqueue_freq+0x110>)
    479e:	781b      	ldrb	r3, [r3, #0]
    47a0:	b2db      	uxtb	r3, r3
    47a2:	f043 0304 	orr.w	r3, r3, #4
    47a6:	b2da      	uxtb	r2, r3
    47a8:	4b3a      	ldr	r3, [pc, #232]	; (4894 <enqueue_freq+0x110>)
    47aa:	701a      	strb	r2, [r3, #0]
		return 0;
    47ac:	2300      	movs	r3, #0
    47ae:	e06d      	b.n	488c <enqueue_freq+0x108>
	}

	f->pkt_type = type;
    47b0:	69fb      	ldr	r3, [r7, #28]
    47b2:	79fa      	ldrb	r2, [r7, #7]
    47b4:	701a      	strb	r2, [r3, #0]
	
	f->clkn_high = idle_buf_clkn_high;
    47b6:	4b38      	ldr	r3, [pc, #224]	; (4898 <enqueue_freq+0x114>)
    47b8:	681b      	ldr	r3, [r3, #0]
    47ba:	b2da      	uxtb	r2, r3
    47bc:	69fb      	ldr	r3, [r7, #28]
    47be:	70da      	strb	r2, [r3, #3]
	f->clk100ns = clkn;
    47c0:	4b36      	ldr	r3, [pc, #216]	; (489c <enqueue_freq+0x118>)
    47c2:	681a      	ldr	r2, [r3, #0]
    47c4:	69fb      	ldr	r3, [r7, #28]
    47c6:	605a      	str	r2, [r3, #4]
	
	f->channel = idle_buf_channel - 2402;
    47c8:	4b35      	ldr	r3, [pc, #212]	; (48a0 <enqueue_freq+0x11c>)
    47ca:	881b      	ldrh	r3, [r3, #0]
    47cc:	b29b      	uxth	r3, r3
    47ce:	b2db      	uxtb	r3, r3
    47d0:	3b62      	subs	r3, #98	; 0x62
    47d2:	b2da      	uxtb	r2, r3
    47d4:	69fb      	ldr	r3, [r7, #28]
    47d6:	709a      	strb	r2, [r3, #2]
//	f->rssi_min = rssi_min;
//	f->rssi_max = rssi_max;
	f->reserved[0] = device_index;
    47d8:	4b32      	ldr	r3, [pc, #200]	; (48a4 <enqueue_freq+0x120>)
    47da:	781a      	ldrb	r2, [r3, #0]
    47dc:	69fb      	ldr	r3, [r7, #28]
    47de:	731a      	strb	r2, [r3, #12]
//	f->rssi_avg = rssi_sum/rssi_count;

	USRLED_SET;
    47e0:	4b31      	ldr	r3, [pc, #196]	; (48a8 <enqueue_freq+0x124>)
    47e2:	2202      	movs	r2, #2
    47e4:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    47e6:	69fb      	ldr	r3, [r7, #28]
    47e8:	330e      	adds	r3, #14
    47ea:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    47ec:	683b      	ldr	r3, [r7, #0]
    47ee:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    47f0:	697b      	ldr	r3, [r7, #20]
    47f2:	681a      	ldr	r2, [r3, #0]
    47f4:	69bb      	ldr	r3, [r7, #24]
    47f6:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    47f8:	69bb      	ldr	r3, [r7, #24]
    47fa:	3304      	adds	r3, #4
    47fc:	697a      	ldr	r2, [r7, #20]
    47fe:	6852      	ldr	r2, [r2, #4]
    4800:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    4802:	69bb      	ldr	r3, [r7, #24]
    4804:	3308      	adds	r3, #8
    4806:	697a      	ldr	r2, [r7, #20]
    4808:	6892      	ldr	r2, [r2, #8]
    480a:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    480c:	69bb      	ldr	r3, [r7, #24]
    480e:	330c      	adds	r3, #12
    4810:	697a      	ldr	r2, [r7, #20]
    4812:	68d2      	ldr	r2, [r2, #12]
    4814:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    4816:	69bb      	ldr	r3, [r7, #24]
    4818:	3310      	adds	r3, #16
    481a:	697a      	ldr	r2, [r7, #20]
    481c:	6912      	ldr	r2, [r2, #16]
    481e:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    4820:	69bb      	ldr	r3, [r7, #24]
    4822:	3314      	adds	r3, #20
    4824:	697a      	ldr	r2, [r7, #20]
    4826:	6952      	ldr	r2, [r2, #20]
    4828:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    482a:	69bb      	ldr	r3, [r7, #24]
    482c:	3318      	adds	r3, #24
    482e:	697a      	ldr	r2, [r7, #20]
    4830:	6992      	ldr	r2, [r2, #24]
    4832:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    4834:	69bb      	ldr	r3, [r7, #24]
    4836:	331c      	adds	r3, #28
    4838:	697a      	ldr	r2, [r7, #20]
    483a:	69d2      	ldr	r2, [r2, #28]
    483c:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    483e:	69bb      	ldr	r3, [r7, #24]
    4840:	3320      	adds	r3, #32
    4842:	697a      	ldr	r2, [r7, #20]
    4844:	6a12      	ldr	r2, [r2, #32]
    4846:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    4848:	69bb      	ldr	r3, [r7, #24]
    484a:	3324      	adds	r3, #36	; 0x24
    484c:	697a      	ldr	r2, [r7, #20]
    484e:	6a52      	ldr	r2, [r2, #36]	; 0x24
    4850:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    4852:	69bb      	ldr	r3, [r7, #24]
    4854:	3328      	adds	r3, #40	; 0x28
    4856:	697a      	ldr	r2, [r7, #20]
    4858:	6a92      	ldr	r2, [r2, #40]	; 0x28
    485a:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    485c:	69bb      	ldr	r3, [r7, #24]
    485e:	332c      	adds	r3, #44	; 0x2c
    4860:	697a      	ldr	r2, [r7, #20]
    4862:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4864:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    4866:	69fb      	ldr	r3, [r7, #28]
    4868:	330e      	adds	r3, #14
    486a:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    486c:	683b      	ldr	r3, [r7, #0]
    486e:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    4870:	693b      	ldr	r3, [r7, #16]
    4872:	3330      	adds	r3, #48	; 0x30
    4874:	68fa      	ldr	r2, [r7, #12]
    4876:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    4878:	801a      	strh	r2, [r3, #0]

	f->status = status;
    487a:	4b06      	ldr	r3, [pc, #24]	; (4894 <enqueue_freq+0x110>)
    487c:	781b      	ldrb	r3, [r3, #0]
    487e:	b2da      	uxtb	r2, r3
    4880:	69fb      	ldr	r3, [r7, #28]
    4882:	705a      	strb	r2, [r3, #1]
	status = 0;
    4884:	4b03      	ldr	r3, [pc, #12]	; (4894 <enqueue_freq+0x110>)
    4886:	2200      	movs	r2, #0
    4888:	701a      	strb	r2, [r3, #0]

	return 1;
    488a:	2301      	movs	r3, #1
}
    488c:	4618      	mov	r0, r3
    488e:	3720      	adds	r7, #32
    4890:	46bd      	mov	sp, r7
    4892:	bd80      	pop	{r7, pc}
    4894:	10000a48 	.word	0x10000a48
    4898:	10001030 	.word	0x10001030
    489c:	10000be4 	.word	0x10000be4
    48a0:	10000988 	.word	0x10000988
    48a4:	10000be8 	.word	0x10000be8
    48a8:	2009c038 	.word	0x2009c038

000048ac <enqueue_proposed>:



static int enqueue_proposed(u8 type, u8 *buf)
{
    48ac:	b580      	push	{r7, lr}
    48ae:	b084      	sub	sp, #16
    48b0:	af00      	add	r7, sp, #0
    48b2:	4603      	mov	r3, r0
    48b4:	6039      	str	r1, [r7, #0]
    48b6:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    48b8:	f004 fdb8 	bl	942c <usb_enqueue>
    48bc:	60f8      	str	r0, [r7, #12]

	/* fail if queue is full */
	if (f == NULL) {
    48be:	68fb      	ldr	r3, [r7, #12]
    48c0:	2b00      	cmp	r3, #0
    48c2:	d109      	bne.n	48d8 <enqueue_proposed+0x2c>
		status |= FIFO_OVERFLOW;
    48c4:	4b18      	ldr	r3, [pc, #96]	; (4928 <enqueue_proposed+0x7c>)
    48c6:	781b      	ldrb	r3, [r3, #0]
    48c8:	b2db      	uxtb	r3, r3
    48ca:	f043 0304 	orr.w	r3, r3, #4
    48ce:	b2da      	uxtb	r2, r3
    48d0:	4b15      	ldr	r3, [pc, #84]	; (4928 <enqueue_proposed+0x7c>)
    48d2:	701a      	strb	r2, [r3, #0]
		return 0;
    48d4:	2300      	movs	r3, #0
    48d6:	e022      	b.n	491e <enqueue_proposed+0x72>
	}

	f->pkt_type = type;
    48d8:	68fb      	ldr	r3, [r7, #12]
    48da:	79fa      	ldrb	r2, [r7, #7]
    48dc:	701a      	strb	r2, [r3, #0]
//	f->clkn_high = idle_buf_clkn_high;
	f->clk100ns = clkn;
    48de:	4b13      	ldr	r3, [pc, #76]	; (492c <enqueue_proposed+0x80>)
    48e0:	681a      	ldr	r2, [r3, #0]
    48e2:	68fb      	ldr	r3, [r7, #12]
    48e4:	605a      	str	r2, [r3, #4]
	f->channel = idle_buf_channel - 2402;
    48e6:	4b12      	ldr	r3, [pc, #72]	; (4930 <enqueue_proposed+0x84>)
    48e8:	881b      	ldrh	r3, [r3, #0]
    48ea:	b29b      	uxth	r3, r3
    48ec:	b2db      	uxtb	r3, r3
    48ee:	3b62      	subs	r3, #98	; 0x62
    48f0:	b2da      	uxtb	r2, r3
    48f2:	68fb      	ldr	r3, [r7, #12]
    48f4:	709a      	strb	r2, [r3, #2]
//	f->rssi_min = rssi_min;
//	f->rssi_max = rssi_max;
	f->rssi_avg = rssi_avg;
    48f6:	4b0f      	ldr	r3, [pc, #60]	; (4934 <enqueue_proposed+0x88>)
    48f8:	781a      	ldrb	r2, [r3, #0]
    48fa:	68fb      	ldr	r3, [r7, #12]
    48fc:	729a      	strb	r2, [r3, #10]
	
	f->reserved[1] = freq_avg;
    48fe:	4b0e      	ldr	r3, [pc, #56]	; (4938 <enqueue_proposed+0x8c>)
    4900:	781a      	ldrb	r2, [r3, #0]
    4902:	68fb      	ldr	r3, [r7, #12]
    4904:	735a      	strb	r2, [r3, #13]
//	f->rssi_count = device_index;

	USRLED_SET;
    4906:	4b0d      	ldr	r3, [pc, #52]	; (493c <enqueue_proposed+0x90>)
    4908:	2202      	movs	r2, #2
    490a:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
	u16 *p3 = (u16 *)f->data;
	u16 *p4 = (u16 *)buf;
	p3[24] = p4[24];
*/
	f->status = status;
    490c:	4b06      	ldr	r3, [pc, #24]	; (4928 <enqueue_proposed+0x7c>)
    490e:	781b      	ldrb	r3, [r3, #0]
    4910:	b2da      	uxtb	r2, r3
    4912:	68fb      	ldr	r3, [r7, #12]
    4914:	705a      	strb	r2, [r3, #1]
	status = 0;
    4916:	4b04      	ldr	r3, [pc, #16]	; (4928 <enqueue_proposed+0x7c>)
    4918:	2200      	movs	r2, #0
    491a:	701a      	strb	r2, [r3, #0]

	return 1;
    491c:	2301      	movs	r3, #1
}
    491e:	4618      	mov	r0, r3
    4920:	3710      	adds	r7, #16
    4922:	46bd      	mov	sp, r7
    4924:	bd80      	pop	{r7, pc}
    4926:	bf00      	nop
    4928:	10000a48 	.word	0x10000a48
    492c:	10000be4 	.word	0x10000be4
    4930:	10000988 	.word	0x10000988
    4934:	1000102d 	.word	0x1000102d
    4938:	10000be9 	.word	0x10000be9
    493c:	2009c038 	.word	0x2009c038

00004940 <enqueue_with_ts>:



int enqueue_with_ts(u8 type, u8 *buf, u32 ts)
{
    4940:	b580      	push	{r7, lr}
    4942:	b086      	sub	sp, #24
    4944:	af00      	add	r7, sp, #0
    4946:	4603      	mov	r3, r0
    4948:	60b9      	str	r1, [r7, #8]
    494a:	607a      	str	r2, [r7, #4]
    494c:	73fb      	strb	r3, [r7, #15]
	usb_pkt_rx *f = usb_enqueue();
    494e:	f004 fd6d 	bl	942c <usb_enqueue>
    4952:	6178      	str	r0, [r7, #20]

	/* fail if queue is full */
	if (f == NULL) {
    4954:	697b      	ldr	r3, [r7, #20]
    4956:	2b00      	cmp	r3, #0
    4958:	d109      	bne.n	496e <enqueue_with_ts+0x2e>
		status |= FIFO_OVERFLOW;
    495a:	4b14      	ldr	r3, [pc, #80]	; (49ac <enqueue_with_ts+0x6c>)
    495c:	781b      	ldrb	r3, [r3, #0]
    495e:	b2db      	uxtb	r3, r3
    4960:	f043 0304 	orr.w	r3, r3, #4
    4964:	b2da      	uxtb	r2, r3
    4966:	4b11      	ldr	r3, [pc, #68]	; (49ac <enqueue_with_ts+0x6c>)
    4968:	701a      	strb	r2, [r3, #0]
		return 0;
    496a:	2300      	movs	r3, #0
    496c:	e019      	b.n	49a2 <enqueue_with_ts+0x62>
	}

	f->pkt_type = type;
    496e:	697b      	ldr	r3, [r7, #20]
    4970:	7bfa      	ldrb	r2, [r7, #15]
    4972:	701a      	strb	r2, [r3, #0]
//	f->clkn_high = 0;
	f->clk100ns = ts;
    4974:	697b      	ldr	r3, [r7, #20]
    4976:	687a      	ldr	r2, [r7, #4]
    4978:	605a      	str	r2, [r3, #4]

//	f->channel = channel - 2402;
	f->rssi_avg = rssi_avg;
    497a:	4b0d      	ldr	r3, [pc, #52]	; (49b0 <enqueue_with_ts+0x70>)
    497c:	781a      	ldrb	r2, [r3, #0]
    497e:	697b      	ldr	r3, [r7, #20]
    4980:	729a      	strb	r2, [r3, #10]
	f->rssi_count = freq_avg;
    4982:	4b0c      	ldr	r3, [pc, #48]	; (49b4 <enqueue_with_ts+0x74>)
    4984:	781a      	ldrb	r2, [r3, #0]
    4986:	697b      	ldr	r3, [r7, #20]
    4988:	72da      	strb	r2, [r3, #11]

	USRLED_SET;
    498a:	4b0b      	ldr	r3, [pc, #44]	; (49b8 <enqueue_with_ts+0x78>)
    498c:	2202      	movs	r2, #2
    498e:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
	u16 *p3 = (u16 *)f->data;
	u16 *p4 = (u16 *)buf;
	p3[24] = p4[24];
*/
	f->status = status;
    4990:	4b06      	ldr	r3, [pc, #24]	; (49ac <enqueue_with_ts+0x6c>)
    4992:	781b      	ldrb	r3, [r3, #0]
    4994:	b2da      	uxtb	r2, r3
    4996:	697b      	ldr	r3, [r7, #20]
    4998:	705a      	strb	r2, [r3, #1]
	status = 0;
    499a:	4b04      	ldr	r3, [pc, #16]	; (49ac <enqueue_with_ts+0x6c>)
    499c:	2200      	movs	r2, #0
    499e:	701a      	strb	r2, [r3, #0]

	return 1;
    49a0:	2301      	movs	r3, #1
}
    49a2:	4618      	mov	r0, r3
    49a4:	3718      	adds	r7, #24
    49a6:	46bd      	mov	sp, r7
    49a8:	bd80      	pop	{r7, pc}
    49aa:	bf00      	nop
    49ac:	10000a48 	.word	0x10000a48
    49b0:	1000102d 	.word	0x1000102d
    49b4:	10000be9 	.word	0x10000be9
    49b8:	2009c038 	.word	0x2009c038

000049bc <cs_threshold_calc_and_set>:

static void cs_threshold_calc_and_set(void)
{
    49bc:	b580      	push	{r7, lr}
    49be:	b082      	sub	sp, #8
    49c0:	af00      	add	r7, sp, #0

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    49c2:	4b17      	ldr	r3, [pc, #92]	; (4a20 <cs_threshold_calc_and_set+0x64>)
    49c4:	781b      	ldrb	r3, [r3, #0]
    49c6:	2b00      	cmp	r3, #0
    49c8:	d01d      	beq.n	4a06 <cs_threshold_calc_and_set+0x4a>
    49ca:	4b16      	ldr	r3, [pc, #88]	; (4a24 <cs_threshold_calc_and_set+0x68>)
    49cc:	781b      	ldrb	r3, [r3, #0]
    49ce:	b25b      	sxtb	r3, r3
    49d0:	2b00      	cmp	r3, #0
    49d2:	dd18      	ble.n	4a06 <cs_threshold_calc_and_set+0x4a>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
    49d4:	4b14      	ldr	r3, [pc, #80]	; (4a28 <cs_threshold_calc_and_set+0x6c>)
    49d6:	881b      	ldrh	r3, [r3, #0]
    49d8:	b29b      	uxth	r3, r3
    49da:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    49de:	4a13      	ldr	r2, [pc, #76]	; (4a2c <cs_threshold_calc_and_set+0x70>)
    49e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    49e4:	b21b      	sxth	r3, r3
    49e6:	3380      	adds	r3, #128	; 0x80
    49e8:	2b00      	cmp	r3, #0
    49ea:	da00      	bge.n	49ee <cs_threshold_calc_and_set+0x32>
    49ec:	33ff      	adds	r3, #255	; 0xff
    49ee:	121b      	asrs	r3, r3, #8
    49f0:	71bb      	strb	r3, [r7, #6]
		level = rssi - 54 + cs_threshold_req;
    49f2:	79ba      	ldrb	r2, [r7, #6]
    49f4:	4b0b      	ldr	r3, [pc, #44]	; (4a24 <cs_threshold_calc_and_set+0x68>)
    49f6:	781b      	ldrb	r3, [r3, #0]
    49f8:	b2db      	uxtb	r3, r3
    49fa:	4413      	add	r3, r2
    49fc:	b2db      	uxtb	r3, r3
    49fe:	3b36      	subs	r3, #54	; 0x36
    4a00:	b2db      	uxtb	r3, r3
    4a02:	71fb      	strb	r3, [r7, #7]

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    4a04:	e002      	b.n	4a0c <cs_threshold_calc_and_set+0x50>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
		level = rssi - 54 + cs_threshold_req;
	}
	else {
		level = cs_threshold_req;
    4a06:	4b07      	ldr	r3, [pc, #28]	; (4a24 <cs_threshold_calc_and_set+0x68>)
    4a08:	781b      	ldrb	r3, [r3, #0]
    4a0a:	71fb      	strb	r3, [r7, #7]
	}
	cs_threshold_set(level, CS_SAMPLES_4);
    4a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4a10:	4618      	mov	r0, r3
    4a12:	2103      	movs	r1, #3
    4a14:	f7ff fd12 	bl	443c <cs_threshold_set>
}
    4a18:	3708      	adds	r7, #8
    4a1a:	46bd      	mov	sp, r7
    4a1c:	bd80      	pop	{r7, pc}
    4a1e:	bf00      	nop
    4a20:	1000097c 	.word	0x1000097c
    4a24:	1000044c 	.word	0x1000044c
    4a28:	1000049c 	.word	0x1000049c
    4a2c:	100009a0 	.word	0x100009a0

00004a30 <cs_trigger_enable>:
/* CS comes from CC2400 GIO6, which is LPC P2.2, active low. GPIO
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
static void cs_trigger_enable(void)
{
    4a30:	b480      	push	{r7}
    4a32:	af00      	add	r7, sp, #0
	cs_trigger = 0;
    4a34:	4b09      	ldr	r3, [pc, #36]	; (4a5c <cs_trigger_enable+0x2c>)
    4a36:	2200      	movs	r2, #0
    4a38:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    4a3a:	4b09      	ldr	r3, [pc, #36]	; (4a60 <cs_trigger_enable+0x30>)
    4a3c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4a40:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4a42:	4b08      	ldr	r3, [pc, #32]	; (4a64 <cs_trigger_enable+0x34>)
    4a44:	2204      	movs	r2, #4
    4a46:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    4a48:	4a07      	ldr	r2, [pc, #28]	; (4a68 <cs_trigger_enable+0x38>)
    4a4a:	4b07      	ldr	r3, [pc, #28]	; (4a68 <cs_trigger_enable+0x38>)
    4a4c:	681b      	ldr	r3, [r3, #0]
    4a4e:	f043 0304 	orr.w	r3, r3, #4
    4a52:	6013      	str	r3, [r2, #0]
}
    4a54:	46bd      	mov	sp, r7
    4a56:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a5a:	4770      	bx	lr
    4a5c:	100010c0 	.word	0x100010c0
    4a60:	e000e100 	.word	0xe000e100
    4a64:	400280ac 	.word	0x400280ac
    4a68:	400280b4 	.word	0x400280b4

00004a6c <cs_trigger_disable>:

static void cs_trigger_disable(void)
{
    4a6c:	b480      	push	{r7}
    4a6e:	af00      	add	r7, sp, #0
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    4a70:	4a09      	ldr	r2, [pc, #36]	; (4a98 <cs_trigger_disable+0x2c>)
    4a72:	4b09      	ldr	r3, [pc, #36]	; (4a98 <cs_trigger_disable+0x2c>)
    4a74:	681b      	ldr	r3, [r3, #0]
    4a76:	f023 0304 	bic.w	r3, r3, #4
    4a7a:	6013      	str	r3, [r2, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4a7c:	4b07      	ldr	r3, [pc, #28]	; (4a9c <cs_trigger_disable+0x30>)
    4a7e:	2204      	movs	r2, #4
    4a80:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_EINT3;
    4a82:	4b07      	ldr	r3, [pc, #28]	; (4aa0 <cs_trigger_disable+0x34>)
    4a84:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4a88:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    4a8a:	4b06      	ldr	r3, [pc, #24]	; (4aa4 <cs_trigger_disable+0x38>)
    4a8c:	2200      	movs	r2, #0
    4a8e:	701a      	strb	r2, [r3, #0]
}
    4a90:	46bd      	mov	sp, r7
    4a92:	f85d 7b04 	ldr.w	r7, [sp], #4
    4a96:	4770      	bx	lr
    4a98:	400280b4 	.word	0x400280b4
    4a9c:	400280ac 	.word	0x400280ac
    4aa0:	e000e180 	.word	0xe000e180
    4aa4:	100010c0 	.word	0x100010c0

00004aa8 <vendor_request_handler>:

static int vendor_request_handler(u8 request, u16 *request_params, u8 *data, int *data_len)
{
    4aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4aac:	b095      	sub	sp, #84	; 0x54
    4aae:	af00      	add	r7, sp, #0
    4ab0:	60b9      	str	r1, [r7, #8]
    4ab2:	607a      	str	r2, [r7, #4]
    4ab4:	603b      	str	r3, [r7, #0]
    4ab6:	4603      	mov	r3, r0
    4ab8:	73fb      	strb	r3, [r7, #15]
	u64 ac_copy;
	int i; // loop counter
	u32 clock;
	int clock_offset;
	u8 length; // string length
	usb_pkt_rx *p = NULL;
    4aba:	2300      	movs	r3, #0
    4abc:	647b      	str	r3, [r7, #68]	; 0x44
	u16 reg_val;

	switch (request) {
    4abe:	7bfb      	ldrb	r3, [r7, #15]
    4ac0:	2b3e      	cmp	r3, #62	; 0x3e
    4ac2:	f200 8563 	bhi.w	558c <vendor_request_handler+0xae4>
    4ac6:	a201      	add	r2, pc, #4	; (adr r2, 4acc <vendor_request_handler+0x24>)
    4ac8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4acc:	00004bc9 	.word	0x00004bc9
    4ad0:	00004bd3 	.word	0x00004bd3
    4ad4:	0000558d 	.word	0x0000558d
    4ad8:	00004c03 	.word	0x00004c03
    4adc:	00004c25 	.word	0x00004c25
    4ae0:	00004c41 	.word	0x00004c41
    4ae4:	00004c63 	.word	0x00004c63
    4ae8:	00004c7f 	.word	0x00004c7f
    4aec:	00004ca1 	.word	0x00004ca1
    4af0:	00004cc1 	.word	0x00004cc1
    4af4:	00004ce3 	.word	0x00004ce3
    4af8:	00004f83 	.word	0x00004f83
    4afc:	00004fa9 	.word	0x00004fa9
    4b00:	00004d59 	.word	0x00004d59
    4b04:	00004d63 	.word	0x00004d63
    4b08:	00004d03 	.word	0x00004d03
    4b0c:	00004e41 	.word	0x00004e41
    4b10:	00004e61 	.word	0x00004e61
    4b14:	00004e95 	.word	0x00004e95
    4b18:	00004eb5 	.word	0x00004eb5
    4b1c:	00004ed1 	.word	0x00004ed1
    4b20:	00004f5d 	.word	0x00004f5d
    4b24:	00004f65 	.word	0x00004f65
    4b28:	00004f77 	.word	0x00004f77
    4b2c:	00005033 	.word	0x00005033
    4b30:	00005051 	.word	0x00005051
    4b34:	0000558d 	.word	0x0000558d
    4b38:	0000505d 	.word	0x0000505d
    4b3c:	00004ed9 	.word	0x00004ed9
    4b40:	00004ef5 	.word	0x00004ef5
    4b44:	00004f1d 	.word	0x00004f1d
    4b48:	00004f15 	.word	0x00004f15
    4b4c:	00004f25 	.word	0x00004f25
    4b50:	00005121 	.word	0x00005121
    4b54:	000050b9 	.word	0x000050b9
    4b58:	00005195 	.word	0x00005195
    4b5c:	000051a3 	.word	0x000051a3
    4b60:	000051b3 	.word	0x000051b3
    4b64:	000051c5 	.word	0x000051c5
    4b68:	00005291 	.word	0x00005291
    4b6c:	000052d7 	.word	0x000052d7
    4b70:	00005365 	.word	0x00005365
    4b74:	00005399 	.word	0x00005399
    4b78:	000053bb 	.word	0x000053bb
    4b7c:	00005413 	.word	0x00005413
    4b80:	00005591 	.word	0x00005591
    4b84:	00005445 	.word	0x00005445
    4b88:	0000545b 	.word	0x0000545b
    4b8c:	00005477 	.word	0x00005477
    4b90:	0000548d 	.word	0x0000548d
    4b94:	000054b9 	.word	0x000054b9
    4b98:	00005309 	.word	0x00005309
    4b9c:	0000533b 	.word	0x0000533b
    4ba0:	000054d5 	.word	0x000054d5
    4ba4:	00005519 	.word	0x00005519
    4ba8:	00005163 	.word	0x00005163
    4bac:	0000552b 	.word	0x0000552b
    4bb0:	0000558d 	.word	0x0000558d
    4bb4:	00005503 	.word	0x00005503
    4bb8:	0000556f 	.word	0x0000556f
    4bbc:	0000557b 	.word	0x0000557b
    4bc0:	00004be3 	.word	0x00004be3
    4bc4:	00004bf3 	.word	0x00004bf3

	case UBERTOOTH_PING:
		*data_len = 0;
    4bc8:	683b      	ldr	r3, [r7, #0]
    4bca:	2200      	movs	r2, #0
    4bcc:	601a      	str	r2, [r3, #0]
		break;
    4bce:	f000 bce0 	b.w	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    4bd2:	4ba7      	ldr	r3, [pc, #668]	; (4e70 <vendor_request_handler+0x3c8>)
    4bd4:	2201      	movs	r2, #1
    4bd6:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4bd8:	683b      	ldr	r3, [r7, #0]
    4bda:	2200      	movs	r2, #0
    4bdc:	601a      	str	r2, [r3, #0]
		break;
    4bde:	f000 bcd8 	b.w	5592 <vendor_request_handler+0xaea>
	
	case UBERTOOTH_RX_FREQ:
		requested_mode = MODE_RX_FREQ;
    4be2:	4ba3      	ldr	r3, [pc, #652]	; (4e70 <vendor_request_handler+0x3c8>)
    4be4:	220e      	movs	r2, #14
    4be6:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4be8:	683b      	ldr	r3, [r7, #0]
    4bea:	2200      	movs	r2, #0
    4bec:	601a      	str	r2, [r3, #0]
		break;
    4bee:	f000 bcd0 	b.w	5592 <vendor_request_handler+0xaea>
	
	case UBERTOOTH_RX_PROPOSED:
		requested_mode = MODE_RX_PROPOSED;
    4bf2:	4b9f      	ldr	r3, [pc, #636]	; (4e70 <vendor_request_handler+0x3c8>)
    4bf4:	220f      	movs	r2, #15
    4bf6:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4bf8:	683b      	ldr	r3, [r7, #0]
    4bfa:	2200      	movs	r2, #0
    4bfc:	601a      	str	r2, [r3, #0]
		break;
    4bfe:	f000 bcc8 	b.w	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    4c02:	4b9c      	ldr	r3, [pc, #624]	; (4e74 <vendor_request_handler+0x3cc>)
    4c04:	681b      	ldr	r3, [r3, #0]
    4c06:	f003 0302 	and.w	r3, r3, #2
    4c0a:	2b00      	cmp	r3, #0
    4c0c:	bf14      	ite	ne
    4c0e:	2301      	movne	r3, #1
    4c10:	2300      	moveq	r3, #0
    4c12:	b2db      	uxtb	r3, r3
    4c14:	461a      	mov	r2, r3
    4c16:	687b      	ldr	r3, [r7, #4]
    4c18:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c1a:	683b      	ldr	r3, [r7, #0]
    4c1c:	2201      	movs	r2, #1
    4c1e:	601a      	str	r2, [r3, #0]
		break;
    4c20:	f000 bcb7 	b.w	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    4c24:	68bb      	ldr	r3, [r7, #8]
    4c26:	881b      	ldrh	r3, [r3, #0]
    4c28:	2b00      	cmp	r3, #0
    4c2a:	d004      	beq.n	4c36 <vendor_request_handler+0x18e>
			USRLED_SET;
    4c2c:	4b92      	ldr	r3, [pc, #584]	; (4e78 <vendor_request_handler+0x3d0>)
    4c2e:	2202      	movs	r2, #2
    4c30:	601a      	str	r2, [r3, #0]
		else
			USRLED_CLR;
		break;
    4c32:	f000 bcae 	b.w	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
			USRLED_SET;
		else
			USRLED_CLR;
    4c36:	4b91      	ldr	r3, [pc, #580]	; (4e7c <vendor_request_handler+0x3d4>)
    4c38:	2202      	movs	r2, #2
    4c3a:	601a      	str	r2, [r3, #0]
		break;
    4c3c:	f000 bca9 	b.w	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    4c40:	4b8c      	ldr	r3, [pc, #560]	; (4e74 <vendor_request_handler+0x3cc>)
    4c42:	681b      	ldr	r3, [r3, #0]
    4c44:	f003 0310 	and.w	r3, r3, #16
    4c48:	2b00      	cmp	r3, #0
    4c4a:	bf14      	ite	ne
    4c4c:	2301      	movne	r3, #1
    4c4e:	2300      	moveq	r3, #0
    4c50:	b2db      	uxtb	r3, r3
    4c52:	461a      	mov	r2, r3
    4c54:	687b      	ldr	r3, [r7, #4]
    4c56:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c58:	683b      	ldr	r3, [r7, #0]
    4c5a:	2201      	movs	r2, #1
    4c5c:	601a      	str	r2, [r3, #0]
		break;
    4c5e:	f000 bc98 	b.w	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    4c62:	68bb      	ldr	r3, [r7, #8]
    4c64:	881b      	ldrh	r3, [r3, #0]
    4c66:	2b00      	cmp	r3, #0
    4c68:	d004      	beq.n	4c74 <vendor_request_handler+0x1cc>
			RXLED_SET;
    4c6a:	4b83      	ldr	r3, [pc, #524]	; (4e78 <vendor_request_handler+0x3d0>)
    4c6c:	2210      	movs	r2, #16
    4c6e:	601a      	str	r2, [r3, #0]
		else
			RXLED_CLR;
		break;
    4c70:	f000 bc8f 	b.w	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
			RXLED_SET;
		else
			RXLED_CLR;
    4c74:	4b81      	ldr	r3, [pc, #516]	; (4e7c <vendor_request_handler+0x3d4>)
    4c76:	2210      	movs	r2, #16
    4c78:	601a      	str	r2, [r3, #0]
		break;
    4c7a:	f000 bc8a 	b.w	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    4c7e:	4b7d      	ldr	r3, [pc, #500]	; (4e74 <vendor_request_handler+0x3cc>)
    4c80:	681b      	ldr	r3, [r3, #0]
    4c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4c86:	2b00      	cmp	r3, #0
    4c88:	bf14      	ite	ne
    4c8a:	2301      	movne	r3, #1
    4c8c:	2300      	moveq	r3, #0
    4c8e:	b2db      	uxtb	r3, r3
    4c90:	461a      	mov	r2, r3
    4c92:	687b      	ldr	r3, [r7, #4]
    4c94:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c96:	683b      	ldr	r3, [r7, #0]
    4c98:	2201      	movs	r2, #1
    4c9a:	601a      	str	r2, [r3, #0]
		break;
    4c9c:	f000 bc79 	b.w	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    4ca0:	68bb      	ldr	r3, [r7, #8]
    4ca2:	881b      	ldrh	r3, [r3, #0]
    4ca4:	2b00      	cmp	r3, #0
    4ca6:	d005      	beq.n	4cb4 <vendor_request_handler+0x20c>
			TXLED_SET;
    4ca8:	4b73      	ldr	r3, [pc, #460]	; (4e78 <vendor_request_handler+0x3d0>)
    4caa:	f44f 7280 	mov.w	r2, #256	; 0x100
    4cae:	601a      	str	r2, [r3, #0]
		else
			TXLED_CLR;
		break;
    4cb0:	f000 bc6f 	b.w	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
			TXLED_SET;
		else
			TXLED_CLR;
    4cb4:	4b71      	ldr	r3, [pc, #452]	; (4e7c <vendor_request_handler+0x3d4>)
    4cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
    4cba:	601a      	str	r2, [r3, #0]
		break;
    4cbc:	f000 bc69 	b.w	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    4cc0:	4b6c      	ldr	r3, [pc, #432]	; (4e74 <vendor_request_handler+0x3cc>)
    4cc2:	681b      	ldr	r3, [r3, #0]
    4cc4:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4cc8:	2b00      	cmp	r3, #0
    4cca:	bf14      	ite	ne
    4ccc:	2301      	movne	r3, #1
    4cce:	2300      	moveq	r3, #0
    4cd0:	b2db      	uxtb	r3, r3
    4cd2:	461a      	mov	r2, r3
    4cd4:	687b      	ldr	r3, [r7, #4]
    4cd6:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4cd8:	683b      	ldr	r3, [r7, #0]
    4cda:	2201      	movs	r2, #1
    4cdc:	601a      	str	r2, [r3, #0]
		break;
    4cde:	f000 bc58 	b.w	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    4ce2:	68bb      	ldr	r3, [r7, #8]
    4ce4:	881b      	ldrh	r3, [r3, #0]
    4ce6:	2b00      	cmp	r3, #0
    4ce8:	d005      	beq.n	4cf6 <vendor_request_handler+0x24e>
			CC1V8_SET;
    4cea:	4b63      	ldr	r3, [pc, #396]	; (4e78 <vendor_request_handler+0x3d0>)
    4cec:	f44f 7200 	mov.w	r2, #512	; 0x200
    4cf0:	601a      	str	r2, [r3, #0]
		else
			CC1V8_CLR;
		break;
    4cf2:	f000 bc4e 	b.w	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
			CC1V8_SET;
		else
			CC1V8_CLR;
    4cf6:	4b61      	ldr	r3, [pc, #388]	; (4e7c <vendor_request_handler+0x3d4>)
    4cf8:	f44f 7200 	mov.w	r2, #512	; 0x200
    4cfc:	601a      	str	r2, [r3, #0]
		break;
    4cfe:	f000 bc48 	b.w	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_PARTNUM:
		command[0] = 54; /* read part number */
    4d02:	2336      	movs	r3, #54	; 0x36
    4d04:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4d06:	4b5e      	ldr	r3, [pc, #376]	; (4e80 <vendor_request_handler+0x3d8>)
    4d08:	681b      	ldr	r3, [r3, #0]
    4d0a:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4d0e:	f107 0210 	add.w	r2, r7, #16
    4d12:	4608      	mov	r0, r1
    4d14:	4611      	mov	r1, r2
    4d16:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4d18:	693b      	ldr	r3, [r7, #16]
    4d1a:	b2da      	uxtb	r2, r3
    4d1c:	687b      	ldr	r3, [r7, #4]
    4d1e:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4d20:	687b      	ldr	r3, [r7, #4]
    4d22:	3301      	adds	r3, #1
    4d24:	697a      	ldr	r2, [r7, #20]
    4d26:	b2d2      	uxtb	r2, r2
    4d28:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4d2a:	687b      	ldr	r3, [r7, #4]
    4d2c:	3302      	adds	r3, #2
    4d2e:	697a      	ldr	r2, [r7, #20]
    4d30:	0a12      	lsrs	r2, r2, #8
    4d32:	b2d2      	uxtb	r2, r2
    4d34:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4d36:	687b      	ldr	r3, [r7, #4]
    4d38:	3303      	adds	r3, #3
    4d3a:	697a      	ldr	r2, [r7, #20]
    4d3c:	0c12      	lsrs	r2, r2, #16
    4d3e:	b2d2      	uxtb	r2, r2
    4d40:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4d42:	687b      	ldr	r3, [r7, #4]
    4d44:	3304      	adds	r3, #4
    4d46:	697a      	ldr	r2, [r7, #20]
    4d48:	0e12      	lsrs	r2, r2, #24
    4d4a:	b2d2      	uxtb	r2, r2
    4d4c:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4d4e:	683b      	ldr	r3, [r7, #0]
    4d50:	2205      	movs	r2, #5
    4d52:	601a      	str	r2, [r3, #0]
		break;
    4d54:	f000 bc1d 	b.w	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
    4d58:	4b45      	ldr	r3, [pc, #276]	; (4e70 <vendor_request_handler+0x3c8>)
    4d5a:	220b      	movs	r2, #11
    4d5c:	701a      	strb	r2, [r3, #0]
		break;
    4d5e:	f000 bc18 	b.w	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_SERIAL:
		command[0] = 58; /* read device serial number */
    4d62:	233a      	movs	r3, #58	; 0x3a
    4d64:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4d66:	4b46      	ldr	r3, [pc, #280]	; (4e80 <vendor_request_handler+0x3d8>)
    4d68:	681b      	ldr	r3, [r3, #0]
    4d6a:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4d6e:	f107 0210 	add.w	r2, r7, #16
    4d72:	4608      	mov	r0, r1
    4d74:	4611      	mov	r1, r2
    4d76:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4d78:	693b      	ldr	r3, [r7, #16]
    4d7a:	b2da      	uxtb	r2, r3
    4d7c:	687b      	ldr	r3, [r7, #4]
    4d7e:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4d80:	687b      	ldr	r3, [r7, #4]
    4d82:	3301      	adds	r3, #1
    4d84:	697a      	ldr	r2, [r7, #20]
    4d86:	b2d2      	uxtb	r2, r2
    4d88:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4d8a:	687b      	ldr	r3, [r7, #4]
    4d8c:	3302      	adds	r3, #2
    4d8e:	697a      	ldr	r2, [r7, #20]
    4d90:	0a12      	lsrs	r2, r2, #8
    4d92:	b2d2      	uxtb	r2, r2
    4d94:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4d96:	687b      	ldr	r3, [r7, #4]
    4d98:	3303      	adds	r3, #3
    4d9a:	697a      	ldr	r2, [r7, #20]
    4d9c:	0c12      	lsrs	r2, r2, #16
    4d9e:	b2d2      	uxtb	r2, r2
    4da0:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4da2:	687b      	ldr	r3, [r7, #4]
    4da4:	3304      	adds	r3, #4
    4da6:	697a      	ldr	r2, [r7, #20]
    4da8:	0e12      	lsrs	r2, r2, #24
    4daa:	b2d2      	uxtb	r2, r2
    4dac:	701a      	strb	r2, [r3, #0]
		data[5] = result[2] & 0xFF;
    4dae:	687b      	ldr	r3, [r7, #4]
    4db0:	3305      	adds	r3, #5
    4db2:	69ba      	ldr	r2, [r7, #24]
    4db4:	b2d2      	uxtb	r2, r2
    4db6:	701a      	strb	r2, [r3, #0]
		data[6] = (result[2] >> 8) & 0xFF;
    4db8:	687b      	ldr	r3, [r7, #4]
    4dba:	3306      	adds	r3, #6
    4dbc:	69ba      	ldr	r2, [r7, #24]
    4dbe:	0a12      	lsrs	r2, r2, #8
    4dc0:	b2d2      	uxtb	r2, r2
    4dc2:	701a      	strb	r2, [r3, #0]
		data[7] = (result[2] >> 16) & 0xFF;
    4dc4:	687b      	ldr	r3, [r7, #4]
    4dc6:	3307      	adds	r3, #7
    4dc8:	69ba      	ldr	r2, [r7, #24]
    4dca:	0c12      	lsrs	r2, r2, #16
    4dcc:	b2d2      	uxtb	r2, r2
    4dce:	701a      	strb	r2, [r3, #0]
		data[8] = (result[2] >> 24) & 0xFF;
    4dd0:	687b      	ldr	r3, [r7, #4]
    4dd2:	3308      	adds	r3, #8
    4dd4:	69ba      	ldr	r2, [r7, #24]
    4dd6:	0e12      	lsrs	r2, r2, #24
    4dd8:	b2d2      	uxtb	r2, r2
    4dda:	701a      	strb	r2, [r3, #0]
		data[9] = result[3] & 0xFF;
    4ddc:	687b      	ldr	r3, [r7, #4]
    4dde:	3309      	adds	r3, #9
    4de0:	69fa      	ldr	r2, [r7, #28]
    4de2:	b2d2      	uxtb	r2, r2
    4de4:	701a      	strb	r2, [r3, #0]
		data[10] = (result[3] >> 8) & 0xFF;
    4de6:	687b      	ldr	r3, [r7, #4]
    4de8:	330a      	adds	r3, #10
    4dea:	69fa      	ldr	r2, [r7, #28]
    4dec:	0a12      	lsrs	r2, r2, #8
    4dee:	b2d2      	uxtb	r2, r2
    4df0:	701a      	strb	r2, [r3, #0]
		data[11] = (result[3] >> 16) & 0xFF;
    4df2:	687b      	ldr	r3, [r7, #4]
    4df4:	330b      	adds	r3, #11
    4df6:	69fa      	ldr	r2, [r7, #28]
    4df8:	0c12      	lsrs	r2, r2, #16
    4dfa:	b2d2      	uxtb	r2, r2
    4dfc:	701a      	strb	r2, [r3, #0]
		data[12] = (result[3] >> 24) & 0xFF;
    4dfe:	687b      	ldr	r3, [r7, #4]
    4e00:	330c      	adds	r3, #12
    4e02:	69fa      	ldr	r2, [r7, #28]
    4e04:	0e12      	lsrs	r2, r2, #24
    4e06:	b2d2      	uxtb	r2, r2
    4e08:	701a      	strb	r2, [r3, #0]
		data[13] = result[4] & 0xFF;
    4e0a:	687b      	ldr	r3, [r7, #4]
    4e0c:	330d      	adds	r3, #13
    4e0e:	6a3a      	ldr	r2, [r7, #32]
    4e10:	b2d2      	uxtb	r2, r2
    4e12:	701a      	strb	r2, [r3, #0]
		data[14] = (result[4] >> 8) & 0xFF;
    4e14:	687b      	ldr	r3, [r7, #4]
    4e16:	330e      	adds	r3, #14
    4e18:	6a3a      	ldr	r2, [r7, #32]
    4e1a:	0a12      	lsrs	r2, r2, #8
    4e1c:	b2d2      	uxtb	r2, r2
    4e1e:	701a      	strb	r2, [r3, #0]
		data[15] = (result[4] >> 16) & 0xFF;
    4e20:	687b      	ldr	r3, [r7, #4]
    4e22:	330f      	adds	r3, #15
    4e24:	6a3a      	ldr	r2, [r7, #32]
    4e26:	0c12      	lsrs	r2, r2, #16
    4e28:	b2d2      	uxtb	r2, r2
    4e2a:	701a      	strb	r2, [r3, #0]
		data[16] = (result[4] >> 24) & 0xFF;
    4e2c:	687b      	ldr	r3, [r7, #4]
    4e2e:	3310      	adds	r3, #16
    4e30:	6a3a      	ldr	r2, [r7, #32]
    4e32:	0e12      	lsrs	r2, r2, #24
    4e34:	b2d2      	uxtb	r2, r2
    4e36:	701a      	strb	r2, [r3, #0]
		*data_len = 17;
    4e38:	683b      	ldr	r3, [r7, #0]
    4e3a:	2211      	movs	r2, #17
    4e3c:	601a      	str	r2, [r3, #0]
		break;
    4e3e:	e3a8      	b.n	5592 <vendor_request_handler+0xaea>

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    4e40:	4b10      	ldr	r3, [pc, #64]	; (4e84 <vendor_request_handler+0x3dc>)
    4e42:	681b      	ldr	r3, [r3, #0]
    4e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4e48:	2b00      	cmp	r3, #0
    4e4a:	bf14      	ite	ne
    4e4c:	2301      	movne	r3, #1
    4e4e:	2300      	moveq	r3, #0
    4e50:	b2db      	uxtb	r3, r3
    4e52:	461a      	mov	r2, r3
    4e54:	687b      	ldr	r3, [r7, #4]
    4e56:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4e58:	683b      	ldr	r3, [r7, #0]
    4e5a:	2201      	movs	r2, #1
    4e5c:	601a      	str	r2, [r3, #0]
		break;
    4e5e:	e398      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    4e60:	68bb      	ldr	r3, [r7, #8]
    4e62:	881b      	ldrh	r3, [r3, #0]
    4e64:	2b00      	cmp	r3, #0
    4e66:	d011      	beq.n	4e8c <vendor_request_handler+0x3e4>
			PAEN_SET;
    4e68:	4b07      	ldr	r3, [pc, #28]	; (4e88 <vendor_request_handler+0x3e0>)
    4e6a:	2280      	movs	r2, #128	; 0x80
    4e6c:	601a      	str	r2, [r3, #0]
		else
			PAEN_CLR;
		break;
    4e6e:	e390      	b.n	5592 <vendor_request_handler+0xaea>
    4e70:	10000a3f 	.word	0x10000a3f
    4e74:	2009c034 	.word	0x2009c034
    4e78:	2009c038 	.word	0x2009c038
    4e7c:	2009c03c 	.word	0x2009c03c
    4e80:	10000448 	.word	0x10000448
    4e84:	2009c054 	.word	0x2009c054
    4e88:	2009c058 	.word	0x2009c058

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
			PAEN_SET;
		else
			PAEN_CLR;
    4e8c:	4b94      	ldr	r3, [pc, #592]	; (50e0 <vendor_request_handler+0x638>)
    4e8e:	2280      	movs	r2, #128	; 0x80
    4e90:	601a      	str	r2, [r3, #0]
		break;
    4e92:	e37e      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    4e94:	4b93      	ldr	r3, [pc, #588]	; (50e4 <vendor_request_handler+0x63c>)
    4e96:	681b      	ldr	r3, [r3, #0]
    4e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4e9c:	2b00      	cmp	r3, #0
    4e9e:	bf14      	ite	ne
    4ea0:	2301      	movne	r3, #1
    4ea2:	2300      	moveq	r3, #0
    4ea4:	b2db      	uxtb	r3, r3
    4ea6:	461a      	mov	r2, r3
    4ea8:	687b      	ldr	r3, [r7, #4]
    4eaa:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4eac:	683b      	ldr	r3, [r7, #0]
    4eae:	2201      	movs	r2, #1
    4eb0:	601a      	str	r2, [r3, #0]
		break;
    4eb2:	e36e      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    4eb4:	68bb      	ldr	r3, [r7, #8]
    4eb6:	881b      	ldrh	r3, [r3, #0]
    4eb8:	2b00      	cmp	r3, #0
    4eba:	d004      	beq.n	4ec6 <vendor_request_handler+0x41e>
			HGM_SET;
    4ebc:	4b8a      	ldr	r3, [pc, #552]	; (50e8 <vendor_request_handler+0x640>)
    4ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
    4ec2:	601a      	str	r2, [r3, #0]
		else
			HGM_CLR;
		break;
    4ec4:	e365      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
			HGM_SET;
		else
			HGM_CLR;
    4ec6:	4b86      	ldr	r3, [pc, #536]	; (50e0 <vendor_request_handler+0x638>)
    4ec8:	f44f 7280 	mov.w	r2, #256	; 0x100
    4ecc:	601a      	str	r2, [r3, #0]
		break;
    4ece:	e360      	b.n	5592 <vendor_request_handler+0xaea>
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    4ed0:	4b86      	ldr	r3, [pc, #536]	; (50ec <vendor_request_handler+0x644>)
    4ed2:	2203      	movs	r2, #3
    4ed4:	701a      	strb	r2, [r3, #0]
		break;
    4ed6:	e35c      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    4ed8:	2005      	movs	r0, #5
    4eda:	f005 fcf9 	bl	a8d0 <cc2400_get>
    4ede:	4603      	mov	r3, r0
    4ee0:	b2db      	uxtb	r3, r3
    4ee2:	f003 0307 	and.w	r3, r3, #7
    4ee6:	b2da      	uxtb	r2, r3
    4ee8:	687b      	ldr	r3, [r7, #4]
    4eea:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4eec:	683b      	ldr	r3, [r7, #0]
    4eee:	2201      	movs	r2, #1
    4ef0:	601a      	str	r2, [r3, #0]
		break;
    4ef2:	e34e      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    4ef4:	68bb      	ldr	r3, [r7, #8]
    4ef6:	881b      	ldrh	r3, [r3, #0]
    4ef8:	2b07      	cmp	r3, #7
    4efa:	d809      	bhi.n	4f10 <vendor_request_handler+0x468>
			cc2400_set(FREND, 8 | request_params[0]);
    4efc:	68bb      	ldr	r3, [r7, #8]
    4efe:	881b      	ldrh	r3, [r3, #0]
    4f00:	f043 0308 	orr.w	r3, r3, #8
    4f04:	b29b      	uxth	r3, r3
    4f06:	2005      	movs	r0, #5
    4f08:	4619      	mov	r1, r3
    4f0a:	f005 fcf7 	bl	a8fc <cc2400_set>
		} else {
			return 0;
		}
		break;
    4f0e:	e340      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    4f10:	2300      	movs	r3, #0
    4f12:	e33f      	b.n	5594 <vendor_request_handler+0xaec>
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    4f14:	4b75      	ldr	r3, [pc, #468]	; (50ec <vendor_request_handler+0x644>)
    4f16:	2205      	movs	r2, #5
    4f18:	701a      	strb	r2, [r3, #0]
		break;
    4f1a:	e33a      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    4f1c:	4b73      	ldr	r3, [pc, #460]	; (50ec <vendor_request_handler+0x644>)
    4f1e:	2206      	movs	r2, #6
    4f20:	701a      	strb	r2, [r3, #0]
		break;
    4f22:	e336      	b.n	5592 <vendor_request_handler+0xaea>
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    4f24:	4b72      	ldr	r3, [pc, #456]	; (50f0 <vendor_request_handler+0x648>)
    4f26:	781a      	ldrb	r2, [r3, #0]
    4f28:	687b      	ldr	r3, [r7, #4]
    4f2a:	701a      	strb	r2, [r3, #0]
		data[1] = rr.request_pa;
    4f2c:	687b      	ldr	r3, [r7, #4]
    4f2e:	3301      	adds	r3, #1
    4f30:	4a6f      	ldr	r2, [pc, #444]	; (50f0 <vendor_request_handler+0x648>)
    4f32:	7852      	ldrb	r2, [r2, #1]
    4f34:	701a      	strb	r2, [r3, #0]
		data[2] = rr.request_num;
    4f36:	687b      	ldr	r3, [r7, #4]
    4f38:	3302      	adds	r3, #2
    4f3a:	4a6d      	ldr	r2, [pc, #436]	; (50f0 <vendor_request_handler+0x648>)
    4f3c:	7892      	ldrb	r2, [r2, #2]
    4f3e:	701a      	strb	r2, [r3, #0]
		data[3] = rr.reply_pa;
    4f40:	687b      	ldr	r3, [r7, #4]
    4f42:	3303      	adds	r3, #3
    4f44:	4a6a      	ldr	r2, [pc, #424]	; (50f0 <vendor_request_handler+0x648>)
    4f46:	78d2      	ldrb	r2, [r2, #3]
    4f48:	701a      	strb	r2, [r3, #0]
		data[4] = rr.reply_num;
    4f4a:	687b      	ldr	r3, [r7, #4]
    4f4c:	3304      	adds	r3, #4
    4f4e:	4a68      	ldr	r2, [pc, #416]	; (50f0 <vendor_request_handler+0x648>)
    4f50:	7912      	ldrb	r2, [r2, #4]
    4f52:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4f54:	683b      	ldr	r3, [r7, #0]
    4f56:	2205      	movs	r2, #5
    4f58:	601a      	str	r2, [r3, #0]
		break;
    4f5a:	e31a      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    4f5c:	4b63      	ldr	r3, [pc, #396]	; (50ec <vendor_request_handler+0x644>)
    4f5e:	2200      	movs	r2, #0
    4f60:	701a      	strb	r2, [r3, #0]
		break;
    4f62:	e316      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    4f64:	4b63      	ldr	r3, [pc, #396]	; (50f4 <vendor_request_handler+0x64c>)
    4f66:	781b      	ldrb	r3, [r3, #0]
    4f68:	b2da      	uxtb	r2, r3
    4f6a:	687b      	ldr	r3, [r7, #4]
    4f6c:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4f6e:	683b      	ldr	r3, [r7, #0]
    4f70:	2201      	movs	r2, #1
    4f72:	601a      	str	r2, [r3, #0]
		break;
    4f74:	e30d      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    4f76:	68bb      	ldr	r3, [r7, #8]
    4f78:	881b      	ldrh	r3, [r3, #0]
    4f7a:	b2da      	uxtb	r2, r3
    4f7c:	4b5d      	ldr	r3, [pc, #372]	; (50f4 <vendor_request_handler+0x64c>)
    4f7e:	701a      	strb	r2, [r3, #0]
		break;
    4f80:	e307      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    4f82:	4b5d      	ldr	r3, [pc, #372]	; (50f8 <vendor_request_handler+0x650>)
    4f84:	881b      	ldrh	r3, [r3, #0]
    4f86:	b29b      	uxth	r3, r3
    4f88:	b2da      	uxtb	r2, r3
    4f8a:	687b      	ldr	r3, [r7, #4]
    4f8c:	701a      	strb	r2, [r3, #0]
		data[1] = (channel >> 8) & 0xFF;
    4f8e:	687b      	ldr	r3, [r7, #4]
    4f90:	3301      	adds	r3, #1
    4f92:	4a59      	ldr	r2, [pc, #356]	; (50f8 <vendor_request_handler+0x650>)
    4f94:	8812      	ldrh	r2, [r2, #0]
    4f96:	b292      	uxth	r2, r2
    4f98:	0a12      	lsrs	r2, r2, #8
    4f9a:	b292      	uxth	r2, r2
    4f9c:	b2d2      	uxtb	r2, r2
    4f9e:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    4fa0:	683b      	ldr	r3, [r7, #0]
    4fa2:	2202      	movs	r2, #2
    4fa4:	601a      	str	r2, [r3, #0]
		break;
    4fa6:	e2f4      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4fa8:	68bb      	ldr	r3, [r7, #8]
    4faa:	881a      	ldrh	r2, [r3, #0]
    4fac:	4b53      	ldr	r3, [pc, #332]	; (50fc <vendor_request_handler+0x654>)
    4fae:	801a      	strh	r2, [r3, #0]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4fb0:	4b52      	ldr	r3, [pc, #328]	; (50fc <vendor_request_handler+0x654>)
    4fb2:	881b      	ldrh	r3, [r3, #0]
    4fb4:	b29b      	uxth	r3, r3
    4fb6:	f640 22ea 	movw	r2, #2794	; 0xaea
    4fba:	4293      	cmp	r3, r2
    4fbc:	d907      	bls.n	4fce <vendor_request_handler+0x526>
			hop_mode = HOP_SWEEP;
    4fbe:	4b50      	ldr	r3, [pc, #320]	; (5100 <vendor_request_handler+0x658>)
    4fc0:	2201      	movs	r2, #1
    4fc2:	701a      	strb	r2, [r3, #0]
			requested_channel = 2402;
    4fc4:	4b4d      	ldr	r3, [pc, #308]	; (50fc <vendor_request_handler+0x654>)
    4fc6:	f640 1262 	movw	r2, #2402	; 0x962
    4fca:	801a      	strh	r2, [r3, #0]
    4fcc:	e020      	b.n	5010 <vendor_request_handler+0x568>
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
    4fce:	4b4c      	ldr	r3, [pc, #304]	; (5100 <vendor_request_handler+0x658>)
    4fd0:	2200      	movs	r2, #0
    4fd2:	701a      	strb	r2, [r3, #0]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4fd4:	4b49      	ldr	r3, [pc, #292]	; (50fc <vendor_request_handler+0x654>)
    4fd6:	881b      	ldrh	r3, [r3, #0]
    4fd8:	b29b      	uxth	r3, r3
    4fda:	f640 02dc 	movw	r2, #2268	; 0x8dc
    4fde:	4293      	cmp	r3, r2
    4fe0:	d903      	bls.n	4fea <vendor_request_handler+0x542>
    4fe2:	4b46      	ldr	r3, [pc, #280]	; (50fc <vendor_request_handler+0x654>)
    4fe4:	881b      	ldrh	r3, [r3, #0]
    4fe6:	b29b      	uxth	r3, r3
    4fe8:	e001      	b.n	4fee <vendor_request_handler+0x546>
    4fea:	f640 03dc 	movw	r3, #2268	; 0x8dc
    4fee:	4a43      	ldr	r2, [pc, #268]	; (50fc <vendor_request_handler+0x654>)
    4ff0:	8013      	strh	r3, [r2, #0]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4ff2:	4b42      	ldr	r3, [pc, #264]	; (50fc <vendor_request_handler+0x654>)
    4ff4:	881b      	ldrh	r3, [r3, #0]
    4ff6:	b29b      	uxth	r3, r3
    4ff8:	f640 22e9 	movw	r2, #2793	; 0xae9
    4ffc:	4293      	cmp	r3, r2
    4ffe:	d803      	bhi.n	5008 <vendor_request_handler+0x560>
    5000:	4b3e      	ldr	r3, [pc, #248]	; (50fc <vendor_request_handler+0x654>)
    5002:	881b      	ldrh	r3, [r3, #0]
    5004:	b29b      	uxth	r3, r3
    5006:	e001      	b.n	500c <vendor_request_handler+0x564>
    5008:	f640 23ea 	movw	r3, #2794	; 0xaea
    500c:	4a3b      	ldr	r2, [pc, #236]	; (50fc <vendor_request_handler+0x654>)
    500e:	8013      	strh	r3, [r2, #0]
		}

		if (mode != MODE_BT_FOLLOW_LE) {
    5010:	4b3c      	ldr	r3, [pc, #240]	; (5104 <vendor_request_handler+0x65c>)
    5012:	781b      	ldrb	r3, [r3, #0]
    5014:	b2db      	uxtb	r3, r3
    5016:	2b09      	cmp	r3, #9
    5018:	d00a      	beq.n	5030 <vendor_request_handler+0x588>
			channel = requested_channel;
    501a:	4b38      	ldr	r3, [pc, #224]	; (50fc <vendor_request_handler+0x654>)
    501c:	881b      	ldrh	r3, [r3, #0]
    501e:	b29a      	uxth	r2, r3
    5020:	4b35      	ldr	r3, [pc, #212]	; (50f8 <vendor_request_handler+0x650>)
    5022:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    5024:	4b35      	ldr	r3, [pc, #212]	; (50fc <vendor_request_handler+0x654>)
    5026:	2200      	movs	r2, #0
    5028:	801a      	strh	r2, [r3, #0]

			/* CS threshold is mode-dependent. Update it after
			 * possible mode change. TODO - kludgy. */
			cs_threshold_calc_and_set();
    502a:	f7ff fcc7 	bl	49bc <cs_threshold_calc_and_set>
		}
		break;
    502e:	e2b0      	b.n	5592 <vendor_request_handler+0xaea>
    5030:	e2af      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_ISP:
		command[0] = 57;
    5032:	2339      	movs	r3, #57	; 0x39
    5034:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    5036:	4b34      	ldr	r3, [pc, #208]	; (5108 <vendor_request_handler+0x660>)
    5038:	681b      	ldr	r3, [r3, #0]
    503a:	f107 0124 	add.w	r1, r7, #36	; 0x24
    503e:	f107 0210 	add.w	r2, r7, #16
    5042:	4608      	mov	r0, r1
    5044:	4611      	mov	r1, r2
    5046:	4798      	blx	r3
		*data_len = 0; /* should never return */
    5048:	683b      	ldr	r3, [r7, #0]
    504a:	2200      	movs	r2, #0
    504c:	601a      	str	r2, [r3, #0]
		break;
    504e:	e2a0      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    5050:	4b2e      	ldr	r3, [pc, #184]	; (510c <vendor_request_handler+0x664>)
    5052:	4a2f      	ldr	r2, [pc, #188]	; (5110 <vendor_request_handler+0x668>)
    5054:	601a      	str	r2, [r3, #0]
		reset();
    5056:	f005 fe1d 	bl	ac94 <reset>
		break;
    505a:	e29a      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    505c:	68bb      	ldr	r3, [r7, #8]
    505e:	881b      	ldrh	r3, [r3, #0]
    5060:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    5064:	d917      	bls.n	5096 <vendor_request_handler+0x5ee>
    5066:	68bb      	ldr	r3, [r7, #8]
    5068:	881b      	ldrh	r3, [r3, #0]
    506a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    506e:	d812      	bhi.n	5096 <vendor_request_handler+0x5ee>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    5070:	68bb      	ldr	r3, [r7, #8]
    5072:	3302      	adds	r3, #2
    5074:	881b      	ldrh	r3, [r3, #0]
		bootloader_ctrl = DFU_MODE;
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    5076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    507a:	d90c      	bls.n	5096 <vendor_request_handler+0x5ee>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    507c:	68bb      	ldr	r3, [r7, #8]
    507e:	3302      	adds	r3, #2
    5080:	881b      	ldrh	r3, [r3, #0]
    5082:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    5086:	d806      	bhi.n	5096 <vendor_request_handler+0x5ee>
				request_params[1] < request_params[0])
    5088:	68bb      	ldr	r3, [r7, #8]
    508a:	3302      	adds	r3, #2
    508c:	881a      	ldrh	r2, [r3, #0]
    508e:	68bb      	ldr	r3, [r7, #8]
    5090:	881b      	ldrh	r3, [r3, #0]
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
				request_params[1] < 2049 || request_params[1] > 3072 ||
    5092:	429a      	cmp	r2, r3
    5094:	d201      	bcs.n	509a <vendor_request_handler+0x5f2>
				request_params[1] < request_params[0])
			return 0;
    5096:	2300      	movs	r3, #0
    5098:	e27c      	b.n	5594 <vendor_request_handler+0xaec>
		low_freq = request_params[0];
    509a:	68bb      	ldr	r3, [r7, #8]
    509c:	881a      	ldrh	r2, [r3, #0]
    509e:	4b1d      	ldr	r3, [pc, #116]	; (5114 <vendor_request_handler+0x66c>)
    50a0:	801a      	strh	r2, [r3, #0]
		high_freq = request_params[1];
    50a2:	68bb      	ldr	r3, [r7, #8]
    50a4:	885a      	ldrh	r2, [r3, #2]
    50a6:	4b1c      	ldr	r3, [pc, #112]	; (5118 <vendor_request_handler+0x670>)
    50a8:	801a      	strh	r2, [r3, #0]
		requested_mode = MODE_SPECAN;
    50aa:	4b10      	ldr	r3, [pc, #64]	; (50ec <vendor_request_handler+0x644>)
    50ac:	2204      	movs	r2, #4
    50ae:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    50b0:	683b      	ldr	r3, [r7, #0]
    50b2:	2200      	movs	r2, #0
    50b4:	601a      	str	r2, [r3, #0]
		break;
    50b6:	e26c      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    50b8:	68bb      	ldr	r3, [r7, #8]
    50ba:	881b      	ldrh	r3, [r3, #0]
    50bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    50c0:	d901      	bls.n	50c6 <vendor_request_handler+0x61e>
			return 0;
    50c2:	2300      	movs	r3, #0
    50c4:	e266      	b.n	5594 <vendor_request_handler+0xaec>
		rssi_threshold = (int8_t)request_params[0];
    50c6:	68bb      	ldr	r3, [r7, #8]
    50c8:	881b      	ldrh	r3, [r3, #0]
    50ca:	b2da      	uxtb	r2, r3
    50cc:	4b13      	ldr	r3, [pc, #76]	; (511c <vendor_request_handler+0x674>)
    50ce:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_LED_SPECAN;
    50d0:	4b06      	ldr	r3, [pc, #24]	; (50ec <vendor_request_handler+0x644>)
    50d2:	2207      	movs	r2, #7
    50d4:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    50d6:	683b      	ldr	r3, [r7, #0]
    50d8:	2200      	movs	r2, #0
    50da:	601a      	str	r2, [r3, #0]
		break;
    50dc:	e259      	b.n	5592 <vendor_request_handler+0xaea>
    50de:	bf00      	nop
    50e0:	2009c05c 	.word	0x2009c05c
    50e4:	2009c054 	.word	0x2009c054
    50e8:	2009c058 	.word	0x2009c058
    50ec:	10000a3f 	.word	0x10000a3f
    50f0:	10001080 	.word	0x10001080
    50f4:	10000a42 	.word	0x10000a42
    50f8:	1000049c 	.word	0x1000049c
    50fc:	10000a44 	.word	0x10000a44
    5100:	1000097c 	.word	0x1000097c
    5104:	10000a3e 	.word	0x10000a3e
    5108:	10000448 	.word	0x10000448
    510c:	1000001c 	.word	0x1000001c
    5110:	4305bb21 	.word	0x4305bb21
    5114:	1000049e 	.word	0x1000049e
    5118:	100004a0 	.word	0x100004a0
    511c:	100004a2 	.word	0x100004a2

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    5120:	687b      	ldr	r3, [r7, #4]
    5122:	2200      	movs	r2, #0
    5124:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
    5126:	687b      	ldr	r3, [r7, #4]
    5128:	3301      	adds	r3, #1
    512a:	2200      	movs	r2, #0
    512c:	701a      	strb	r2, [r3, #0]

		length = (u8)strlen(GIT_REVISION);
    512e:	48a4      	ldr	r0, [pc, #656]	; (53c0 <vendor_request_handler+0x918>)
    5130:	f007 fa2e 	bl	c590 <strlen>
    5134:	4603      	mov	r3, r0
    5136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[2] = length;
    513a:	687b      	ldr	r3, [r7, #4]
    513c:	3302      	adds	r3, #2
    513e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    5142:	701a      	strb	r2, [r3, #0]

		memcpy(&data[3], GIT_REVISION, length);
    5144:	687b      	ldr	r3, [r7, #4]
    5146:	1cda      	adds	r2, r3, #3
    5148:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    514c:	4610      	mov	r0, r2
    514e:	499c      	ldr	r1, [pc, #624]	; (53c0 <vendor_request_handler+0x918>)
    5150:	461a      	mov	r2, r3
    5152:	f007 f9a7 	bl	c4a4 <memcpy>

		*data_len = 2 + 1 + length;
    5156:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    515a:	1cda      	adds	r2, r3, #3
    515c:	683b      	ldr	r3, [r7, #0]
    515e:	601a      	str	r2, [r3, #0]
		break;
    5160:	e217      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    5162:	4898      	ldr	r0, [pc, #608]	; (53c4 <vendor_request_handler+0x91c>)
    5164:	f007 fa14 	bl	c590 <strlen>
    5168:	4603      	mov	r3, r0
    516a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[0] = length;
    516e:	687b      	ldr	r3, [r7, #4]
    5170:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    5174:	701a      	strb	r2, [r3, #0]
		memcpy(&data[1], compile_info, length);
    5176:	687b      	ldr	r3, [r7, #4]
    5178:	1c5a      	adds	r2, r3, #1
    517a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    517e:	4610      	mov	r0, r2
    5180:	4990      	ldr	r1, [pc, #576]	; (53c4 <vendor_request_handler+0x91c>)
    5182:	461a      	mov	r2, r3
    5184:	f007 f98e 	bl	c4a4 <memcpy>
		*data_len = 1 + length;
    5188:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    518c:	1c5a      	adds	r2, r3, #1
    518e:	683b      	ldr	r3, [r7, #0]
    5190:	601a      	str	r2, [r3, #0]
		break;
    5192:	e1fe      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    5194:	687b      	ldr	r3, [r7, #4]
    5196:	2201      	movs	r2, #1
    5198:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    519a:	683b      	ldr	r3, [r7, #0]
    519c:	2201      	movs	r2, #1
    519e:	601a      	str	r2, [r3, #0]
		break;
    51a0:	e1f7      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    51a2:	68bb      	ldr	r3, [r7, #8]
    51a4:	881b      	ldrh	r3, [r3, #0]
    51a6:	b2da      	uxtb	r2, r3
    51a8:	4b87      	ldr	r3, [pc, #540]	; (53c8 <vendor_request_handler+0x920>)
    51aa:	701a      	strb	r2, [r3, #0]
		cs_threshold_calc_and_set();
    51ac:	f7ff fc06 	bl	49bc <cs_threshold_calc_and_set>
		break;
    51b0:	e1ef      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    51b2:	4b85      	ldr	r3, [pc, #532]	; (53c8 <vendor_request_handler+0x920>)
    51b4:	781b      	ldrb	r3, [r3, #0]
    51b6:	b2da      	uxtb	r2, r3
    51b8:	687b      	ldr	r3, [r7, #4]
    51ba:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    51bc:	683b      	ldr	r3, [r7, #0]
    51be:	2201      	movs	r2, #1
    51c0:	601a      	str	r2, [r3, #0]
		break;
    51c2:	e1e6      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    51c4:	4981      	ldr	r1, [pc, #516]	; (53cc <vendor_request_handler+0x924>)
    51c6:	f04f 0200 	mov.w	r2, #0
    51ca:	f04f 0300 	mov.w	r3, #0
    51ce:	e9c1 2300 	strd	r2, r3, [r1]
		target.access_code = 0;
    51d2:	497e      	ldr	r1, [pc, #504]	; (53cc <vendor_request_handler+0x924>)
    51d4:	f04f 0200 	mov.w	r2, #0
    51d8:	f04f 0300 	mov.w	r3, #0
    51dc:	e9c1 2302 	strd	r2, r3, [r1, #8]
		for(i=0; i < 8; i++) {
    51e0:	2300      	movs	r3, #0
    51e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    51e4:	e025      	b.n	5232 <vendor_request_handler+0x78a>
			target.address |= (uint64_t)data[i] << 8*i;
    51e6:	4b79      	ldr	r3, [pc, #484]	; (53cc <vendor_request_handler+0x924>)
    51e8:	e9d3 ab00 	ldrd	sl, fp, [r3]
    51ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    51ee:	687a      	ldr	r2, [r7, #4]
    51f0:	4413      	add	r3, r2
    51f2:	781b      	ldrb	r3, [r3, #0]
    51f4:	b2da      	uxtb	r2, r3
    51f6:	f04f 0300 	mov.w	r3, #0
    51fa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    51fc:	00c9      	lsls	r1, r1, #3
    51fe:	f1a1 0620 	sub.w	r6, r1, #32
    5202:	f1c1 0020 	rsb	r0, r1, #32
    5206:	fa03 f901 	lsl.w	r9, r3, r1
    520a:	fa02 f606 	lsl.w	r6, r2, r6
    520e:	ea49 0906 	orr.w	r9, r9, r6
    5212:	fa22 f000 	lsr.w	r0, r2, r0
    5216:	ea49 0900 	orr.w	r9, r9, r0
    521a:	fa02 f801 	lsl.w	r8, r2, r1
    521e:	ea4a 0208 	orr.w	r2, sl, r8
    5222:	ea4b 0309 	orr.w	r3, fp, r9
    5226:	4969      	ldr	r1, [pc, #420]	; (53cc <vendor_request_handler+0x924>)
    5228:	e9c1 2300 	strd	r2, r3, [r1]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
    522c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    522e:	3301      	adds	r3, #1
    5230:	64fb      	str	r3, [r7, #76]	; 0x4c
    5232:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5234:	2b07      	cmp	r3, #7
    5236:	ddd6      	ble.n	51e6 <vendor_request_handler+0x73e>
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    5238:	2300      	movs	r3, #0
    523a:	64fb      	str	r3, [r7, #76]	; 0x4c
    523c:	e024      	b.n	5288 <vendor_request_handler+0x7e0>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
    523e:	4b63      	ldr	r3, [pc, #396]	; (53cc <vendor_request_handler+0x924>)
    5240:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
    5244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5246:	3308      	adds	r3, #8
    5248:	687a      	ldr	r2, [r7, #4]
    524a:	4413      	add	r3, r2
    524c:	781b      	ldrb	r3, [r3, #0]
    524e:	b2da      	uxtb	r2, r3
    5250:	f04f 0300 	mov.w	r3, #0
    5254:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    5256:	00c9      	lsls	r1, r1, #3
    5258:	f1a1 0620 	sub.w	r6, r1, #32
    525c:	f1c1 0020 	rsb	r0, r1, #32
    5260:	fa03 f501 	lsl.w	r5, r3, r1
    5264:	fa02 f606 	lsl.w	r6, r2, r6
    5268:	4335      	orrs	r5, r6
    526a:	fa22 f000 	lsr.w	r0, r2, r0
    526e:	4305      	orrs	r5, r0
    5270:	fa02 f401 	lsl.w	r4, r2, r1
    5274:	ea48 0204 	orr.w	r2, r8, r4
    5278:	ea49 0305 	orr.w	r3, r9, r5
    527c:	4953      	ldr	r1, [pc, #332]	; (53cc <vendor_request_handler+0x924>)
    527e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    5282:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5284:	3301      	adds	r3, #1
    5286:	64fb      	str	r3, [r7, #76]	; 0x4c
    5288:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    528a:	2b07      	cmp	r3, #7
    528c:	ddd7      	ble.n	523e <vendor_request_handler+0x796>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
		}
		break;
    528e:	e180      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
    5290:	2300      	movs	r3, #0
    5292:	64bb      	str	r3, [r7, #72]	; 0x48
		for(i=0; i < 4; i++) {
    5294:	2300      	movs	r3, #0
    5296:	64fb      	str	r3, [r7, #76]	; 0x4c
    5298:	e00d      	b.n	52b6 <vendor_request_handler+0x80e>
			clock_offset <<= 8;
    529a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    529c:	021b      	lsls	r3, r3, #8
    529e:	64bb      	str	r3, [r7, #72]	; 0x48
			clock_offset |= data[i];
    52a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    52a2:	687a      	ldr	r2, [r7, #4]
    52a4:	4413      	add	r3, r2
    52a6:	781b      	ldrb	r3, [r3, #0]
    52a8:	461a      	mov	r2, r3
    52aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    52ac:	4313      	orrs	r3, r2
    52ae:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		break;

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
		for(i=0; i < 4; i++) {
    52b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    52b2:	3301      	adds	r3, #1
    52b4:	64fb      	str	r3, [r7, #76]	; 0x4c
    52b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    52b8:	2b03      	cmp	r3, #3
    52ba:	ddee      	ble.n	529a <vendor_request_handler+0x7f2>
			clock_offset <<= 8;
			clock_offset |= data[i];
		}
		clkn += clock_offset;
    52bc:	4b44      	ldr	r3, [pc, #272]	; (53d0 <vendor_request_handler+0x928>)
    52be:	681a      	ldr	r2, [r3, #0]
    52c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    52c2:	4413      	add	r3, r2
    52c4:	4a42      	ldr	r2, [pc, #264]	; (53d0 <vendor_request_handler+0x928>)
    52c6:	6013      	str	r3, [r2, #0]
		hop_mode = HOP_BLUETOOTH;
    52c8:	4b42      	ldr	r3, [pc, #264]	; (53d4 <vendor_request_handler+0x92c>)
    52ca:	2202      	movs	r2, #2
    52cc:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW;
    52ce:	4b42      	ldr	r3, [pc, #264]	; (53d8 <vendor_request_handler+0x930>)
    52d0:	2208      	movs	r2, #8
    52d2:	701a      	strb	r2, [r3, #0]
		break;
    52d4:	e15d      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    52d6:	687b      	ldr	r3, [r7, #4]
    52d8:	781b      	ldrb	r3, [r3, #0]
    52da:	461a      	mov	r2, r3
    52dc:	687b      	ldr	r3, [r7, #4]
    52de:	3301      	adds	r3, #1
    52e0:	781b      	ldrb	r3, [r3, #0]
    52e2:	021b      	lsls	r3, r3, #8
    52e4:	431a      	orrs	r2, r3
    52e6:	687b      	ldr	r3, [r7, #4]
    52e8:	3302      	adds	r3, #2
    52ea:	781b      	ldrb	r3, [r3, #0]
    52ec:	041b      	lsls	r3, r3, #16
    52ee:	431a      	orrs	r2, r3
    52f0:	687b      	ldr	r3, [r7, #4]
    52f2:	3303      	adds	r3, #3
    52f4:	781b      	ldrb	r3, [r3, #0]
    52f6:	061b      	lsls	r3, r3, #24
    52f8:	4313      	orrs	r3, r2
    52fa:	63fb      	str	r3, [r7, #60]	; 0x3c
		clkn = clock;
    52fc:	4a34      	ldr	r2, [pc, #208]	; (53d0 <vendor_request_handler+0x928>)
    52fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    5300:	6013      	str	r3, [r2, #0]
		cs_threshold_calc_and_set();
    5302:	f7ff fb5b 	bl	49bc <cs_threshold_calc_and_set>
		break;
    5306:	e144      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    5308:	2300      	movs	r3, #0
    530a:	64fb      	str	r3, [r7, #76]	; 0x4c
    530c:	e00b      	b.n	5326 <vendor_request_handler+0x87e>
			afh_map[i] = data[i];
    530e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5310:	687a      	ldr	r2, [r7, #4]
    5312:	4413      	add	r3, r2
    5314:	7819      	ldrb	r1, [r3, #0]
    5316:	4a31      	ldr	r2, [pc, #196]	; (53dc <vendor_request_handler+0x934>)
    5318:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    531a:	4413      	add	r3, r2
    531c:	460a      	mov	r2, r1
    531e:	701a      	strb	r2, [r3, #0]
		clkn = clock;
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    5320:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5322:	3301      	adds	r3, #1
    5324:	64fb      	str	r3, [r7, #76]	; 0x4c
    5326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5328:	2b09      	cmp	r3, #9
    532a:	ddf0      	ble.n	530e <vendor_request_handler+0x866>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    532c:	4b2c      	ldr	r3, [pc, #176]	; (53e0 <vendor_request_handler+0x938>)
    532e:	2201      	movs	r2, #1
    5330:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    5332:	683b      	ldr	r3, [r7, #0]
    5334:	220a      	movs	r2, #10
    5336:	601a      	str	r2, [r3, #0]
		break;
    5338:	e12b      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    533a:	2300      	movs	r3, #0
    533c:	64fb      	str	r3, [r7, #76]	; 0x4c
    533e:	e007      	b.n	5350 <vendor_request_handler+0x8a8>
			afh_map[i] = 0;
    5340:	4a26      	ldr	r2, [pc, #152]	; (53dc <vendor_request_handler+0x934>)
    5342:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5344:	4413      	add	r3, r2
    5346:	2200      	movs	r2, #0
    5348:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    534a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    534c:	3301      	adds	r3, #1
    534e:	64fb      	str	r3, [r7, #76]	; 0x4c
    5350:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5352:	2b09      	cmp	r3, #9
    5354:	ddf4      	ble.n	5340 <vendor_request_handler+0x898>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    5356:	4b22      	ldr	r3, [pc, #136]	; (53e0 <vendor_request_handler+0x938>)
    5358:	2200      	movs	r2, #0
    535a:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    535c:	683b      	ldr	r3, [r7, #0]
    535e:	220a      	movs	r2, #10
    5360:	601a      	str	r2, [r3, #0]
		break;
    5362:	e116      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    5364:	4b1a      	ldr	r3, [pc, #104]	; (53d0 <vendor_request_handler+0x928>)
    5366:	681b      	ldr	r3, [r3, #0]
    5368:	63fb      	str	r3, [r7, #60]	; 0x3c
		for(i=0; i < 4; i++) {
    536a:	2300      	movs	r3, #0
    536c:	64fb      	str	r3, [r7, #76]	; 0x4c
    536e:	e00c      	b.n	538a <vendor_request_handler+0x8e2>
			data[i] = (clock >> (8*i)) & 0xff;
    5370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5372:	687a      	ldr	r2, [r7, #4]
    5374:	4413      	add	r3, r2
    5376:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5378:	00d2      	lsls	r2, r2, #3
    537a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    537c:	fa21 f202 	lsr.w	r2, r1, r2
    5380:	b2d2      	uxtb	r2, r2
    5382:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(i=0; i < 4; i++) {
    5384:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5386:	3301      	adds	r3, #1
    5388:	64fb      	str	r3, [r7, #76]	; 0x4c
    538a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    538c:	2b03      	cmp	r3, #3
    538e:	ddef      	ble.n	5370 <vendor_request_handler+0x8c8>
			data[i] = (clock >> (8*i)) & 0xff;
		}
		*data_len = 4;
    5390:	683b      	ldr	r3, [r7, #0]
    5392:	2204      	movs	r2, #4
    5394:	601a      	str	r2, [r3, #0]
		break;
    5396:	e0fc      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;
    5398:	683b      	ldr	r3, [r7, #0]
    539a:	2200      	movs	r2, #0
    539c:	601a      	str	r2, [r3, #0]

		do_hop = 0;
    539e:	4b11      	ldr	r3, [pc, #68]	; (53e4 <vendor_request_handler+0x93c>)
    53a0:	2200      	movs	r2, #0
    53a2:	701a      	strb	r2, [r3, #0]
		hop_mode = HOP_BTLE;
    53a4:	4b0b      	ldr	r3, [pc, #44]	; (53d4 <vendor_request_handler+0x92c>)
    53a6:	2203      	movs	r2, #3
    53a8:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW_LE;
    53aa:	4b0b      	ldr	r3, [pc, #44]	; (53d8 <vendor_request_handler+0x930>)
    53ac:	2209      	movs	r2, #9
    53ae:	701a      	strb	r2, [r3, #0]

		queue_init();
    53b0:	f004 f82c 	bl	940c <queue_init>
		cs_threshold_calc_and_set();
    53b4:	f7ff fb02 	bl	49bc <cs_threshold_calc_and_set>
		break;
    53b8:	e0eb      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    53ba:	2300      	movs	r3, #0
    53bc:	64fb      	str	r3, [r7, #76]	; 0x4c
    53be:	e021      	b.n	5404 <vendor_request_handler+0x95c>
    53c0:	0000cec8 	.word	0x0000cec8
    53c4:	0000ce84 	.word	0x0000ce84
    53c8:	1000044c 	.word	0x1000044c
    53cc:	100010c8 	.word	0x100010c8
    53d0:	10000be4 	.word	0x10000be4
    53d4:	1000097c 	.word	0x1000097c
    53d8:	10000a3f 	.word	0x10000a3f
    53dc:	10000bbc 	.word	0x10000bbc
    53e0:	1000102c 	.word	0x1000102c
    53e4:	1000097d 	.word	0x1000097d
			data[i] = (le.access_address >> (8*i)) & 0xff;
    53e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    53ea:	687a      	ldr	r2, [r7, #4]
    53ec:	4413      	add	r3, r2
    53ee:	4a6c      	ldr	r2, [pc, #432]	; (55a0 <vendor_request_handler+0xaf8>)
    53f0:	6811      	ldr	r1, [r2, #0]
    53f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    53f4:	00d2      	lsls	r2, r2, #3
    53f6:	fa21 f202 	lsr.w	r2, r1, r2
    53fa:	b2d2      	uxtb	r2, r2
    53fc:	701a      	strb	r2, [r3, #0]
		queue_init();
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    53fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5400:	3301      	adds	r3, #1
    5402:	64fb      	str	r3, [r7, #76]	; 0x4c
    5404:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5406:	2b03      	cmp	r3, #3
    5408:	ddee      	ble.n	53e8 <vendor_request_handler+0x940>
			data[i] = (le.access_address >> (8*i)) & 0xff;
		}
		*data_len = 4;
    540a:	683b      	ldr	r3, [r7, #0]
    540c:	2204      	movs	r2, #4
    540e:	601a      	str	r2, [r3, #0]
		break;
    5410:	e0bf      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    5412:	687b      	ldr	r3, [r7, #4]
    5414:	781b      	ldrb	r3, [r3, #0]
    5416:	461a      	mov	r2, r3
    5418:	687b      	ldr	r3, [r7, #4]
    541a:	3301      	adds	r3, #1
    541c:	781b      	ldrb	r3, [r3, #0]
    541e:	021b      	lsls	r3, r3, #8
    5420:	431a      	orrs	r2, r3
    5422:	687b      	ldr	r3, [r7, #4]
    5424:	3302      	adds	r3, #2
    5426:	781b      	ldrb	r3, [r3, #0]
    5428:	041b      	lsls	r3, r3, #16
    542a:	431a      	orrs	r2, r3
    542c:	687b      	ldr	r3, [r7, #4]
    542e:	3303      	adds	r3, #3
    5430:	781b      	ldrb	r3, [r3, #0]
    5432:	061b      	lsls	r3, r3, #24
    5434:	4313      	orrs	r3, r2
    5436:	4618      	mov	r0, r3
    5438:	f001 feee 	bl	7218 <le_set_access_address>
		le.target_set = 1;
    543c:	4b58      	ldr	r3, [pc, #352]	; (55a0 <vendor_request_handler+0xaf8>)
    543e:	2201      	movs	r2, #1
    5440:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    5442:	e0a6      	b.n	5592 <vendor_request_handler+0xaea>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    5444:	687b      	ldr	r3, [r7, #4]
    5446:	2213      	movs	r2, #19
    5448:	701a      	strb	r2, [r3, #0]
		data[1] = 0x37;
    544a:	687b      	ldr	r3, [r7, #4]
    544c:	3301      	adds	r3, #1
    544e:	2237      	movs	r2, #55	; 0x37
    5450:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    5452:	683b      	ldr	r3, [r7, #0]
    5454:	2202      	movs	r2, #2
    5456:	601a      	str	r2, [r3, #0]
		break;
    5458:	e09b      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    545a:	4b51      	ldr	r3, [pc, #324]	; (55a0 <vendor_request_handler+0xaf8>)
    545c:	691b      	ldr	r3, [r3, #16]
    545e:	2b00      	cmp	r3, #0
    5460:	bf14      	ite	ne
    5462:	2301      	movne	r3, #1
    5464:	2300      	moveq	r3, #0
    5466:	b2db      	uxtb	r3, r3
    5468:	461a      	mov	r2, r3
    546a:	687b      	ldr	r3, [r7, #4]
    546c:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    546e:	683b      	ldr	r3, [r7, #0]
    5470:	2201      	movs	r2, #1
    5472:	601a      	str	r2, [r3, #0]
		break;
    5474:	e08d      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    5476:	68bb      	ldr	r3, [r7, #8]
    5478:	881b      	ldrh	r3, [r3, #0]
    547a:	2b00      	cmp	r3, #0
    547c:	bf14      	ite	ne
    547e:	2301      	movne	r3, #1
    5480:	2300      	moveq	r3, #0
    5482:	b2db      	uxtb	r3, r3
    5484:	461a      	mov	r2, r3
    5486:	4b46      	ldr	r3, [pc, #280]	; (55a0 <vendor_request_handler+0xaf8>)
    5488:	611a      	str	r2, [r3, #16]
		break;
    548a:	e082      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_POLL:
		p = dequeue();
    548c:	f003 fffe 	bl	948c <dequeue>
    5490:	6478      	str	r0, [r7, #68]	; 0x44
		if (p != NULL) {
    5492:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5494:	2b00      	cmp	r3, #0
    5496:	d008      	beq.n	54aa <vendor_request_handler+0xa02>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    5498:	6878      	ldr	r0, [r7, #4]
    549a:	6c79      	ldr	r1, [r7, #68]	; 0x44
    549c:	2240      	movs	r2, #64	; 0x40
    549e:	f007 f801 	bl	c4a4 <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    54a2:	683b      	ldr	r3, [r7, #0]
    54a4:	2240      	movs	r2, #64	; 0x40
    54a6:	601a      	str	r2, [r3, #0]
		} else {
			data[0] = 0;
			*data_len = 1;
		}
		break;
    54a8:	e073      	b.n	5592 <vendor_request_handler+0xaea>
		p = dequeue();
		if (p != NULL) {
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
			*data_len = sizeof(usb_pkt_rx);
		} else {
			data[0] = 0;
    54aa:	687b      	ldr	r3, [r7, #4]
    54ac:	2200      	movs	r2, #0
    54ae:	701a      	strb	r2, [r3, #0]
			*data_len = 1;
    54b0:	683b      	ldr	r3, [r7, #0]
    54b2:	2201      	movs	r2, #1
    54b4:	601a      	str	r2, [r3, #0]
		}
		break;
    54b6:	e06c      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    54b8:	683b      	ldr	r3, [r7, #0]
    54ba:	2200      	movs	r2, #0
    54bc:	601a      	str	r2, [r3, #0]

		hop_mode = HOP_NONE;
    54be:	4b39      	ldr	r3, [pc, #228]	; (55a4 <vendor_request_handler+0xafc>)
    54c0:	2200      	movs	r2, #0
    54c2:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_PROMISC_LE;
    54c4:	4b38      	ldr	r3, [pc, #224]	; (55a8 <vendor_request_handler+0xb00>)
    54c6:	220a      	movs	r2, #10
    54c8:	701a      	strb	r2, [r3, #0]

		queue_init();
    54ca:	f003 ff9f 	bl	940c <queue_init>
		cs_threshold_calc_and_set();
    54ce:	f7ff fa75 	bl	49bc <cs_threshold_calc_and_set>
		break;
    54d2:	e05e      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    54d4:	68bb      	ldr	r3, [r7, #8]
    54d6:	881b      	ldrh	r3, [r3, #0]
    54d8:	b2db      	uxtb	r3, r3
    54da:	4618      	mov	r0, r3
    54dc:	f005 f9f8 	bl	a8d0 <cc2400_get>
    54e0:	4603      	mov	r3, r0
    54e2:	877b      	strh	r3, [r7, #58]	; 0x3a
		data[0] = (reg_val >> 8) & 0xff;
    54e4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    54e6:	0a1b      	lsrs	r3, r3, #8
    54e8:	b29b      	uxth	r3, r3
    54ea:	b2da      	uxtb	r2, r3
    54ec:	687b      	ldr	r3, [r7, #4]
    54ee:	701a      	strb	r2, [r3, #0]
		data[1] = reg_val & 0xff;
    54f0:	687b      	ldr	r3, [r7, #4]
    54f2:	3301      	adds	r3, #1
    54f4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
    54f6:	b2d2      	uxtb	r2, r2
    54f8:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    54fa:	683b      	ldr	r3, [r7, #0]
    54fc:	2202      	movs	r2, #2
    54fe:	601a      	str	r2, [r3, #0]
		break;
    5500:	e047      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    5502:	68bb      	ldr	r3, [r7, #8]
    5504:	881b      	ldrh	r3, [r3, #0]
    5506:	b2da      	uxtb	r2, r3
    5508:	68bb      	ldr	r3, [r7, #8]
    550a:	3302      	adds	r3, #2
    550c:	881b      	ldrh	r3, [r3, #0]
    550e:	4610      	mov	r0, r2
    5510:	4619      	mov	r1, r3
    5512:	f005 f9f3 	bl	a8fc <cc2400_set>
		break;
    5516:	e03c      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_BTLE_SLAVE:
		memcpy(slave_mac_address, data, 6);
    5518:	4824      	ldr	r0, [pc, #144]	; (55ac <vendor_request_handler+0xb04>)
    551a:	6879      	ldr	r1, [r7, #4]
    551c:	2206      	movs	r2, #6
    551e:	f006 ffc1 	bl	c4a4 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    5522:	4b21      	ldr	r3, [pc, #132]	; (55a8 <vendor_request_handler+0xb00>)
    5524:	220c      	movs	r2, #12
    5526:	701a      	strb	r2, [r3, #0]
		break;
    5528:	e033      	b.n	5592 <vendor_request_handler+0xaea>

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    552a:	687b      	ldr	r3, [r7, #4]
    552c:	795a      	ldrb	r2, [r3, #5]
    552e:	4b1c      	ldr	r3, [pc, #112]	; (55a0 <vendor_request_handler+0xaf8>)
    5530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		le.target[1] = data[4];
    5534:	687b      	ldr	r3, [r7, #4]
    5536:	791a      	ldrb	r2, [r3, #4]
    5538:	4b19      	ldr	r3, [pc, #100]	; (55a0 <vendor_request_handler+0xaf8>)
    553a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		le.target[2] = data[3];
    553e:	687b      	ldr	r3, [r7, #4]
    5540:	78da      	ldrb	r2, [r3, #3]
    5542:	4b17      	ldr	r3, [pc, #92]	; (55a0 <vendor_request_handler+0xaf8>)
    5544:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		le.target[3] = data[2];
    5548:	687b      	ldr	r3, [r7, #4]
    554a:	789a      	ldrb	r2, [r3, #2]
    554c:	4b14      	ldr	r3, [pc, #80]	; (55a0 <vendor_request_handler+0xaf8>)
    554e:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		le.target[4] = data[1];
    5552:	687b      	ldr	r3, [r7, #4]
    5554:	785a      	ldrb	r2, [r3, #1]
    5556:	4b12      	ldr	r3, [pc, #72]	; (55a0 <vendor_request_handler+0xaf8>)
    5558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		le.target[5] = data[0];
    555c:	687b      	ldr	r3, [r7, #4]
    555e:	781a      	ldrb	r2, [r3, #0]
    5560:	4b0f      	ldr	r3, [pc, #60]	; (55a0 <vendor_request_handler+0xaf8>)
    5562:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		le.target_set = 1;
    5566:	4b0e      	ldr	r3, [pc, #56]	; (55a0 <vendor_request_handler+0xaf8>)
    5568:	2201      	movs	r2, #1
    556a:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    556c:	e011      	b.n	5592 <vendor_request_handler+0xaea>

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    556e:	68bb      	ldr	r3, [r7, #8]
    5570:	881b      	ldrh	r3, [r3, #0]
    5572:	b2da      	uxtb	r2, r3
    5574:	4b0e      	ldr	r3, [pc, #56]	; (55b0 <vendor_request_handler+0xb08>)
    5576:	701a      	strb	r2, [r3, #0]
		break;
    5578:	e00b      	b.n	5592 <vendor_request_handler+0xaea>
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    557a:	4b0b      	ldr	r3, [pc, #44]	; (55a8 <vendor_request_handler+0xb00>)
    557c:	220d      	movs	r2, #13
    557e:	701a      	strb	r2, [r3, #0]
		ego_mode = request_params[0];
    5580:	68bb      	ldr	r3, [r7, #8]
    5582:	881b      	ldrh	r3, [r3, #0]
    5584:	b2da      	uxtb	r2, r3
    5586:	4b0b      	ldr	r3, [pc, #44]	; (55b4 <vendor_request_handler+0xb0c>)
    5588:	701a      	strb	r2, [r3, #0]
		break;
    558a:	e002      	b.n	5592 <vendor_request_handler+0xaea>

	default:
		return 0;
    558c:	2300      	movs	r3, #0
    558e:	e001      	b.n	5594 <vendor_request_handler+0xaec>
		le.target_set = 1;
		break;

	case UBERTOOTH_DO_SOMETHING:
		// do something! just don't commit anything here
		break;
    5590:	bf00      	nop
		break;

	default:
		return 0;
	}
	return 1;
    5592:	2301      	movs	r3, #1
}
    5594:	4618      	mov	r0, r3
    5596:	3754      	adds	r7, #84	; 0x54
    5598:	46bd      	mov	sp, r7
    559a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    559e:	bf00      	nop
    55a0:	10000458 	.word	0x10000458
    55a4:	1000097c 	.word	0x1000097c
    55a8:	10000a3f 	.word	0x10000a3f
    55ac:	1000098c 	.word	0x1000098c
    55b0:	10000a40 	.word	0x10000a40
    55b4:	10000a41 	.word	0x10000a41

000055b8 <clkn_init>:

static void clkn_init()
{
    55b8:	b480      	push	{r7}
    55ba:	af00      	add	r7, sp, #0
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    55bc:	4b0c      	ldr	r3, [pc, #48]	; (55f0 <clkn_init+0x38>)
    55be:	2202      	movs	r2, #2
    55c0:	601a      	str	r2, [r3, #0]
	clkn = 0;
    55c2:	4b0c      	ldr	r3, [pc, #48]	; (55f4 <clkn_init+0x3c>)
    55c4:	2200      	movs	r2, #0
    55c6:	601a      	str	r2, [r3, #0]
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    55c8:	4b0b      	ldr	r3, [pc, #44]	; (55f8 <clkn_init+0x40>)
    55ca:	2204      	movs	r2, #4
    55cc:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    55ce:	4b0b      	ldr	r3, [pc, #44]	; (55fc <clkn_init+0x44>)
    55d0:	f640 4234 	movw	r2, #3124	; 0xc34
    55d4:	601a      	str	r2, [r3, #0]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    55d6:	4b0a      	ldr	r3, [pc, #40]	; (5600 <clkn_init+0x48>)
    55d8:	2203      	movs	r2, #3
    55da:	601a      	str	r2, [r3, #0]
	ISER0 = ISER0_ISE_TIMER0;
    55dc:	4b09      	ldr	r3, [pc, #36]	; (5604 <clkn_init+0x4c>)
    55de:	2202      	movs	r2, #2
    55e0:	601a      	str	r2, [r3, #0]

	/* start timer */
	T0TCR = TCR_Counter_Enable;
    55e2:	4b03      	ldr	r3, [pc, #12]	; (55f0 <clkn_init+0x38>)
    55e4:	2201      	movs	r2, #1
    55e6:	601a      	str	r2, [r3, #0]
}
    55e8:	46bd      	mov	sp, r7
    55ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    55ee:	4770      	bx	lr
    55f0:	40004004 	.word	0x40004004
    55f4:	10000be4 	.word	0x10000be4
    55f8:	4000400c 	.word	0x4000400c
    55fc:	40004018 	.word	0x40004018
    5600:	40004014 	.word	0x40004014
    5604:	e000e100 	.word	0xe000e100

00005608 <TIMER0_IRQHandler>:

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    5608:	b480      	push	{r7}
    560a:	b083      	sub	sp, #12
    560c:	af00      	add	r7, sp, #0
	// Use non-volatile working register to shave off a couple instructions
	u32 next;
	u32 le_clk;

	if (T0IR & TIR_MR0_Interrupt) {
    560e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    5612:	681b      	ldr	r3, [r3, #0]
    5614:	f003 0301 	and.w	r3, r3, #1
    5618:	2b00      	cmp	r3, #0
    561a:	d06d      	beq.n	56f8 <TIMER0_IRQHandler+0xf0>

		clkn++;
    561c:	4b39      	ldr	r3, [pc, #228]	; (5704 <TIMER0_IRQHandler+0xfc>)
    561e:	681b      	ldr	r3, [r3, #0]
    5620:	3301      	adds	r3, #1
    5622:	4a38      	ldr	r2, [pc, #224]	; (5704 <TIMER0_IRQHandler+0xfc>)
    5624:	6013      	str	r3, [r2, #0]
		next = clkn;
    5626:	4b37      	ldr	r3, [pc, #220]	; (5704 <TIMER0_IRQHandler+0xfc>)
    5628:	681b      	ldr	r3, [r3, #0]
    562a:	607b      	str	r3, [r7, #4]
		le_clk = (next - le.conn_epoch) & 0x03;
    562c:	4b36      	ldr	r3, [pc, #216]	; (5708 <TIMER0_IRQHandler+0x100>)
    562e:	699b      	ldr	r3, [r3, #24]
    5630:	687a      	ldr	r2, [r7, #4]
    5632:	1ad3      	subs	r3, r2, r3
    5634:	f003 0303 	and.w	r3, r3, #3
    5638:	603b      	str	r3, [r7, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    563a:	4b34      	ldr	r3, [pc, #208]	; (570c <TIMER0_IRQHandler+0x104>)
    563c:	781b      	ldrb	r3, [r3, #0]
    563e:	2b00      	cmp	r3, #0
    5640:	d003      	beq.n	564a <TIMER0_IRQHandler+0x42>
    5642:	4b32      	ldr	r3, [pc, #200]	; (570c <TIMER0_IRQHandler+0x104>)
    5644:	781b      	ldrb	r3, [r3, #0]
    5646:	2b01      	cmp	r3, #1
    5648:	d109      	bne.n	565e <TIMER0_IRQHandler+0x56>
			if ((next & 0x7f) == 0)
    564a:	687b      	ldr	r3, [r7, #4]
    564c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5650:	2b00      	cmp	r3, #0
    5652:	d103      	bne.n	565c <TIMER0_IRQHandler+0x54>
				do_hop = 1;
    5654:	4b2e      	ldr	r3, [pc, #184]	; (5710 <TIMER0_IRQHandler+0x108>)
    5656:	2201      	movs	r2, #1
    5658:	701a      	strb	r2, [r3, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
			if ((next & 0x7f) == 0)
    565a:	e037      	b.n	56cc <TIMER0_IRQHandler+0xc4>
    565c:	e036      	b.n	56cc <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    565e:	4b2b      	ldr	r3, [pc, #172]	; (570c <TIMER0_IRQHandler+0x104>)
    5660:	781b      	ldrb	r3, [r3, #0]
    5662:	2b02      	cmp	r3, #2
    5664:	d108      	bne.n	5678 <TIMER0_IRQHandler+0x70>
			if ((next & 0x1) == 0)
    5666:	687b      	ldr	r3, [r7, #4]
    5668:	f003 0301 	and.w	r3, r3, #1
    566c:	2b00      	cmp	r3, #0
    566e:	d12d      	bne.n	56cc <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
    5670:	4b27      	ldr	r3, [pc, #156]	; (5710 <TIMER0_IRQHandler+0x108>)
    5672:	2201      	movs	r2, #1
    5674:	701a      	strb	r2, [r3, #0]
    5676:	e029      	b.n	56cc <TIMER0_IRQHandler+0xc4>
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    5678:	4b24      	ldr	r3, [pc, #144]	; (570c <TIMER0_IRQHandler+0x104>)
    567a:	781b      	ldrb	r3, [r3, #0]
    567c:	2b03      	cmp	r3, #3
    567e:	d125      	bne.n	56cc <TIMER0_IRQHandler+0xc4>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    5680:	4b21      	ldr	r3, [pc, #132]	; (5708 <TIMER0_IRQHandler+0x100>)
    5682:	7d1b      	ldrb	r3, [r3, #20]
    5684:	2b03      	cmp	r3, #3
    5686:	d121      	bne.n	56cc <TIMER0_IRQHandler+0xc4>
    5688:	683b      	ldr	r3, [r7, #0]
    568a:	2b00      	cmp	r3, #0
    568c:	d11e      	bne.n	56cc <TIMER0_IRQHandler+0xc4>
				--le.interval_timer;
    568e:	4b1e      	ldr	r3, [pc, #120]	; (5708 <TIMER0_IRQHandler+0x100>)
    5690:	8b9b      	ldrh	r3, [r3, #28]
    5692:	b29b      	uxth	r3, r3
    5694:	3b01      	subs	r3, #1
    5696:	b29a      	uxth	r2, r3
    5698:	4b1b      	ldr	r3, [pc, #108]	; (5708 <TIMER0_IRQHandler+0x100>)
    569a:	839a      	strh	r2, [r3, #28]
				if (le.interval_timer == 0) {
    569c:	4b1a      	ldr	r3, [pc, #104]	; (5708 <TIMER0_IRQHandler+0x100>)
    569e:	8b9b      	ldrh	r3, [r3, #28]
    56a0:	b29b      	uxth	r3, r3
    56a2:	2b00      	cmp	r3, #0
    56a4:	d10e      	bne.n	56c4 <TIMER0_IRQHandler+0xbc>
					do_hop = 1;
    56a6:	4b1a      	ldr	r3, [pc, #104]	; (5710 <TIMER0_IRQHandler+0x108>)
    56a8:	2201      	movs	r2, #1
    56aa:	701a      	strb	r2, [r3, #0]
					++le.conn_count;
    56ac:	4b16      	ldr	r3, [pc, #88]	; (5708 <TIMER0_IRQHandler+0x100>)
    56ae:	8c1b      	ldrh	r3, [r3, #32]
    56b0:	b29b      	uxth	r3, r3
    56b2:	3301      	adds	r3, #1
    56b4:	b29a      	uxth	r2, r3
    56b6:	4b14      	ldr	r3, [pc, #80]	; (5708 <TIMER0_IRQHandler+0x100>)
    56b8:	841a      	strh	r2, [r3, #32]
					le.interval_timer = le.conn_interval;
    56ba:	4b13      	ldr	r3, [pc, #76]	; (5708 <TIMER0_IRQHandler+0x100>)
    56bc:	8bda      	ldrh	r2, [r3, #30]
    56be:	4b12      	ldr	r3, [pc, #72]	; (5708 <TIMER0_IRQHandler+0x100>)
    56c0:	839a      	strh	r2, [r3, #28]
    56c2:	e003      	b.n	56cc <TIMER0_IRQHandler+0xc4>
				} else {
					TXLED_CLR; // hack!
    56c4:	4b13      	ldr	r3, [pc, #76]	; (5714 <TIMER0_IRQHandler+0x10c>)
    56c6:	f44f 7280 	mov.w	r2, #256	; 0x100
    56ca:	601a      	str	r2, [r3, #0]
				}
			}
		}

		/* Keepalive trigger fires at 3200/2^9 = 6.25 Hz */
		if ((next & 0x1ff) == 0)
    56cc:	687b      	ldr	r3, [r7, #4]
    56ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
    56d2:	2b00      	cmp	r3, #0
    56d4:	d102      	bne.n	56dc <TIMER0_IRQHandler+0xd4>
			keepalive_trigger = 1;
    56d6:	4b10      	ldr	r3, [pc, #64]	; (5718 <TIMER0_IRQHandler+0x110>)
    56d8:	2201      	movs	r2, #1
    56da:	701a      	strb	r2, [r3, #0]

		/* Ack interrupt */
		T0MR0 = 3124 - clock_trim;
    56dc:	4a0f      	ldr	r2, [pc, #60]	; (571c <TIMER0_IRQHandler+0x114>)
    56de:	4b10      	ldr	r3, [pc, #64]	; (5720 <TIMER0_IRQHandler+0x118>)
    56e0:	681b      	ldr	r3, [r3, #0]
    56e2:	f5c3 6343 	rsb	r3, r3, #3120	; 0xc30
    56e6:	3304      	adds	r3, #4
    56e8:	6013      	str	r3, [r2, #0]
		clock_trim = 0;
    56ea:	4b0d      	ldr	r3, [pc, #52]	; (5720 <TIMER0_IRQHandler+0x118>)
    56ec:	2200      	movs	r2, #0
    56ee:	601a      	str	r2, [r3, #0]
		T0IR = TIR_MR0_Interrupt;
    56f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    56f4:	2201      	movs	r2, #1
    56f6:	601a      	str	r2, [r3, #0]
	}
}
    56f8:	370c      	adds	r7, #12
    56fa:	46bd      	mov	sp, r7
    56fc:	f85d 7b04 	ldr.w	r7, [sp], #4
    5700:	4770      	bx	lr
    5702:	bf00      	nop
    5704:	10000be4 	.word	0x10000be4
    5708:	10000458 	.word	0x10000458
    570c:	1000097c 	.word	0x1000097c
    5710:	1000097d 	.word	0x1000097d
    5714:	2009c03c 	.word	0x2009c03c
    5718:	10000be0 	.word	0x10000be0
    571c:	40004018 	.word	0x40004018
    5720:	10000984 	.word	0x10000984

00005724 <EINT3_IRQHandler>:

/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
//static volatile u8 txledstate = 1;
void EINT3_IRQHandler()
{
    5724:	b480      	push	{r7}
    5726:	af00      	add	r7, sp, #0
	/* TODO - check specific source of shared interrupt */
	IO2IntClr = PIN_GIO6;            // clear interrupt
    5728:	4b0b      	ldr	r3, [pc, #44]	; (5758 <EINT3_IRQHandler+0x34>)
    572a:	2204      	movs	r2, #4
    572c:	601a      	str	r2, [r3, #0]
	cs_trigger = 1;                  // signal trigger
    572e:	4b0b      	ldr	r3, [pc, #44]	; (575c <EINT3_IRQHandler+0x38>)
    5730:	2201      	movs	r2, #1
    5732:	701a      	strb	r2, [r3, #0]
	cs_timestamp = CLK100NS;         // time at trigger
    5734:	4b0a      	ldr	r3, [pc, #40]	; (5760 <EINT3_IRQHandler+0x3c>)
    5736:	681b      	ldr	r3, [r3, #0]
    5738:	f3c3 0313 	ubfx	r3, r3, #0, #20
    573c:	f640 4235 	movw	r2, #3125	; 0xc35
    5740:	fb02 f203 	mul.w	r2, r2, r3
    5744:	4b07      	ldr	r3, [pc, #28]	; (5764 <EINT3_IRQHandler+0x40>)
    5746:	681b      	ldr	r3, [r3, #0]
    5748:	4413      	add	r3, r2
    574a:	4a07      	ldr	r2, [pc, #28]	; (5768 <EINT3_IRQHandler+0x44>)
    574c:	6013      	str	r3, [r2, #0]
}
    574e:	46bd      	mov	sp, r7
    5750:	f85d 7b04 	ldr.w	r7, [sp], #4
    5754:	4770      	bx	lr
    5756:	bf00      	nop
    5758:	400280ac 	.word	0x400280ac
    575c:	100010c0 	.word	0x100010c0
    5760:	10000be4 	.word	0x10000be4
    5764:	40004008 	.word	0x40004008
    5768:	10000bdc 	.word	0x10000bdc
    576c:	00000000 	.word	0x00000000

00005770 <msleep>:

/* Sleep (busy wait) for 'millis' milliseconds. The 'wait' routines in
 * ubertooth.c are matched to the clock setup at boot time and can not
 * be used while the board is running at 100MHz. */
static void msleep(uint32_t millis)
{
    5770:	b5b0      	push	{r4, r5, r7, lr}
    5772:	b084      	sub	sp, #16
    5774:	af00      	add	r7, sp, #0
    5776:	6078      	str	r0, [r7, #4]
	uint32_t stop_at = clkn + millis * 312.5 / 1000;  // millis -> clkn ticks
    5778:	4b1b      	ldr	r3, [pc, #108]	; (57e8 <msleep+0x78>)
    577a:	681b      	ldr	r3, [r3, #0]
    577c:	4618      	mov	r0, r3
    577e:	f006 fbb7 	bl	bef0 <__aeabi_ui2d>
    5782:	4604      	mov	r4, r0
    5784:	460d      	mov	r5, r1
    5786:	6878      	ldr	r0, [r7, #4]
    5788:	f006 fbb2 	bl	bef0 <__aeabi_ui2d>
    578c:	4602      	mov	r2, r0
    578e:	460b      	mov	r3, r1
    5790:	4610      	mov	r0, r2
    5792:	4619      	mov	r1, r3
    5794:	a312      	add	r3, pc, #72	; (adr r3, 57e0 <msleep+0x70>)
    5796:	e9d3 2300 	ldrd	r2, r3, [r3]
    579a:	f006 fc1f 	bl	bfdc <__aeabi_dmul>
    579e:	4602      	mov	r2, r0
    57a0:	460b      	mov	r3, r1
    57a2:	4610      	mov	r0, r2
    57a4:	4619      	mov	r1, r3
    57a6:	f04f 0200 	mov.w	r2, #0
    57aa:	4b10      	ldr	r3, [pc, #64]	; (57ec <msleep+0x7c>)
    57ac:	f006 fd40 	bl	c230 <__aeabi_ddiv>
    57b0:	4602      	mov	r2, r0
    57b2:	460b      	mov	r3, r1
    57b4:	4620      	mov	r0, r4
    57b6:	4629      	mov	r1, r5
    57b8:	f006 fa5e 	bl	bc78 <__adddf3>
    57bc:	4602      	mov	r2, r0
    57be:	460b      	mov	r3, r1
    57c0:	4610      	mov	r0, r2
    57c2:	4619      	mov	r1, r3
    57c4:	f006 fe1c 	bl	c400 <__aeabi_d2uiz>
    57c8:	4603      	mov	r3, r0
    57ca:	60fb      	str	r3, [r7, #12]
	do { } while (clkn < stop_at);                   // TODO: handle wrapping
    57cc:	4b06      	ldr	r3, [pc, #24]	; (57e8 <msleep+0x78>)
    57ce:	681a      	ldr	r2, [r3, #0]
    57d0:	68fb      	ldr	r3, [r7, #12]
    57d2:	429a      	cmp	r2, r3
    57d4:	d3fa      	bcc.n	57cc <msleep+0x5c>
}
    57d6:	3710      	adds	r7, #16
    57d8:	46bd      	mov	sp, r7
    57da:	bdb0      	pop	{r4, r5, r7, pc}
    57dc:	f3af 8000 	nop.w
    57e0:	00000000 	.word	0x00000000
    57e4:	40738800 	.word	0x40738800
    57e8:	10000be4 	.word	0x10000be4
    57ec:	408f4000 	.word	0x408f4000

000057f0 <dma_init>:

static void dma_init()
{
    57f0:	b480      	push	{r7}
    57f2:	af00      	add	r7, sp, #0
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    57f4:	4a3f      	ldr	r2, [pc, #252]	; (58f4 <dma_init+0x104>)
    57f6:	4b3f      	ldr	r3, [pc, #252]	; (58f4 <dma_init+0x104>)
    57f8:	681b      	ldr	r3, [r3, #0]
    57fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    57fe:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    5800:	4b3d      	ldr	r3, [pc, #244]	; (58f8 <dma_init+0x108>)
    5802:	2200      	movs	r2, #0
    5804:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5806:	4b3d      	ldr	r3, [pc, #244]	; (58fc <dma_init+0x10c>)
    5808:	2200      	movs	r2, #0
    580a:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    580c:	4b3c      	ldr	r3, [pc, #240]	; (5900 <dma_init+0x110>)
    580e:	2200      	movs	r2, #0
    5810:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5812:	4b3c      	ldr	r3, [pc, #240]	; (5904 <dma_init+0x114>)
    5814:	2200      	movs	r2, #0
    5816:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    5818:	4b3b      	ldr	r3, [pc, #236]	; (5908 <dma_init+0x118>)
    581a:	2200      	movs	r2, #0
    581c:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    581e:	4b3b      	ldr	r3, [pc, #236]	; (590c <dma_init+0x11c>)
    5820:	2200      	movs	r2, #0
    5822:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    5824:	4b3a      	ldr	r3, [pc, #232]	; (5910 <dma_init+0x120>)
    5826:	2200      	movs	r2, #0
    5828:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    582a:	4b3a      	ldr	r3, [pc, #232]	; (5914 <dma_init+0x124>)
    582c:	2200      	movs	r2, #0
    582e:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5830:	4b39      	ldr	r3, [pc, #228]	; (5918 <dma_init+0x128>)
    5832:	22ff      	movs	r2, #255	; 0xff
    5834:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5836:	4b39      	ldr	r3, [pc, #228]	; (591c <dma_init+0x12c>)
    5838:	22ff      	movs	r2, #255	; 0xff
    583a:	601a      	str	r2, [r3, #0]

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
    583c:	4b38      	ldr	r3, [pc, #224]	; (5920 <dma_init+0x130>)
    583e:	4a39      	ldr	r2, [pc, #228]	; (5924 <dma_init+0x134>)
    5840:	601a      	str	r2, [r3, #0]
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
    5842:	4a39      	ldr	r2, [pc, #228]	; (5928 <dma_init+0x138>)
    5844:	4b36      	ldr	r3, [pc, #216]	; (5920 <dma_init+0x130>)
    5846:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
    5848:	4a38      	ldr	r2, [pc, #224]	; (592c <dma_init+0x13c>)
    584a:	4b35      	ldr	r3, [pc, #212]	; (5920 <dma_init+0x130>)
    584c:	609a      	str	r2, [r3, #8]
	rx_dma_lli1.control = (DMA_SIZE) |
    584e:	4b34      	ldr	r3, [pc, #208]	; (5920 <dma_init+0x130>)
    5850:	4a37      	ldr	r2, [pc, #220]	; (5930 <dma_init+0x140>)
    5852:	60da      	str	r2, [r3, #12]
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
    5854:	4b35      	ldr	r3, [pc, #212]	; (592c <dma_init+0x13c>)
    5856:	4a33      	ldr	r2, [pc, #204]	; (5924 <dma_init+0x134>)
    5858:	601a      	str	r2, [r3, #0]
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
    585a:	4a36      	ldr	r2, [pc, #216]	; (5934 <dma_init+0x144>)
    585c:	4b33      	ldr	r3, [pc, #204]	; (592c <dma_init+0x13c>)
    585e:	605a      	str	r2, [r3, #4]
	rx_dma_lli2.next_lli = (u32)&rx_dma_lli1;
    5860:	4a2f      	ldr	r2, [pc, #188]	; (5920 <dma_init+0x130>)
    5862:	4b32      	ldr	r3, [pc, #200]	; (592c <dma_init+0x13c>)
    5864:	609a      	str	r2, [r3, #8]
	rx_dma_lli2.control = (DMA_SIZE) |
    5866:	4b31      	ldr	r3, [pc, #196]	; (592c <dma_init+0x13c>)
    5868:	4a31      	ldr	r2, [pc, #196]	; (5930 <dma_init+0x140>)
    586a:	60da      	str	r2, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* disable DMA interrupts */
	ICER0 = ICER0_ICE_DMA;
    586c:	4b32      	ldr	r3, [pc, #200]	; (5938 <dma_init+0x148>)
    586e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5872:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    5874:	4b31      	ldr	r3, [pc, #196]	; (593c <dma_init+0x14c>)
    5876:	2201      	movs	r2, #1
    5878:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    587a:	bf00      	nop
    587c:	4b2f      	ldr	r3, [pc, #188]	; (593c <dma_init+0x14c>)
    587e:	681b      	ldr	r3, [r3, #0]
    5880:	f003 0301 	and.w	r3, r3, #1
    5884:	2b00      	cmp	r3, #0
    5886:	d0f9      	beq.n	587c <dma_init+0x8c>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    5888:	4a2d      	ldr	r2, [pc, #180]	; (5940 <dma_init+0x150>)
    588a:	4b25      	ldr	r3, [pc, #148]	; (5920 <dma_init+0x130>)
    588c:	681b      	ldr	r3, [r3, #0]
    588e:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    5890:	4a2c      	ldr	r2, [pc, #176]	; (5944 <dma_init+0x154>)
    5892:	4b23      	ldr	r3, [pc, #140]	; (5920 <dma_init+0x130>)
    5894:	685b      	ldr	r3, [r3, #4]
    5896:	6013      	str	r3, [r2, #0]
	DMACC0LLI = rx_dma_lli1.next_lli;
    5898:	4a2b      	ldr	r2, [pc, #172]	; (5948 <dma_init+0x158>)
    589a:	4b21      	ldr	r3, [pc, #132]	; (5920 <dma_init+0x130>)
    589c:	689b      	ldr	r3, [r3, #8]
    589e:	6013      	str	r3, [r2, #0]
	DMACC0Control = rx_dma_lli1.control;
    58a0:	4a2a      	ldr	r2, [pc, #168]	; (594c <dma_init+0x15c>)
    58a2:	4b1f      	ldr	r3, [pc, #124]	; (5920 <dma_init+0x130>)
    58a4:	68db      	ldr	r3, [r3, #12]
    58a6:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    58a8:	4b13      	ldr	r3, [pc, #76]	; (58f8 <dma_init+0x108>)
    58aa:	f24d 0206 	movw	r2, #53254	; 0xd006
    58ae:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    58b0:	4b27      	ldr	r3, [pc, #156]	; (5950 <dma_init+0x160>)
    58b2:	681b      	ldr	r3, [r3, #0]
    58b4:	0d1b      	lsrs	r3, r3, #20
    58b6:	b2db      	uxtb	r3, r3
    58b8:	4a26      	ldr	r2, [pc, #152]	; (5954 <dma_init+0x164>)
    58ba:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    58bc:	4b24      	ldr	r3, [pc, #144]	; (5950 <dma_init+0x160>)
    58be:	681b      	ldr	r3, [r3, #0]
    58c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    58c4:	f640 4235 	movw	r2, #3125	; 0xc35
    58c8:	fb02 f203 	mul.w	r2, r2, r3
    58cc:	4b22      	ldr	r3, [pc, #136]	; (5958 <dma_init+0x168>)
    58ce:	681b      	ldr	r3, [r3, #0]
    58d0:	4413      	add	r3, r2
    58d2:	4a22      	ldr	r2, [pc, #136]	; (595c <dma_init+0x16c>)
    58d4:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    58d6:	4b22      	ldr	r3, [pc, #136]	; (5960 <dma_init+0x170>)
    58d8:	881b      	ldrh	r3, [r3, #0]
    58da:	b29a      	uxth	r2, r3
    58dc:	4b21      	ldr	r3, [pc, #132]	; (5964 <dma_init+0x174>)
    58de:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    58e0:	4b21      	ldr	r3, [pc, #132]	; (5968 <dma_init+0x178>)
    58e2:	2200      	movs	r2, #0
    58e4:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    58e6:	4b21      	ldr	r3, [pc, #132]	; (596c <dma_init+0x17c>)
    58e8:	2200      	movs	r2, #0
    58ea:	601a      	str	r2, [r3, #0]
}
    58ec:	46bd      	mov	sp, r7
    58ee:	f85d 7b04 	ldr.w	r7, [sp], #4
    58f2:	4770      	bx	lr
    58f4:	400fc0c4 	.word	0x400fc0c4
    58f8:	50004110 	.word	0x50004110
    58fc:	50004130 	.word	0x50004130
    5900:	50004150 	.word	0x50004150
    5904:	50004170 	.word	0x50004170
    5908:	50004190 	.word	0x50004190
    590c:	500041b0 	.word	0x500041b0
    5910:	500041d0 	.word	0x500041d0
    5914:	500041f0 	.word	0x500041f0
    5918:	50004008 	.word	0x50004008
    591c:	50004010 	.word	0x50004010
    5920:	1000106c 	.word	0x1000106c
    5924:	40030008 	.word	0x40030008
    5928:	10001088 	.word	0x10001088
    592c:	10000bcc 	.word	0x10000bcc
    5930:	88009032 	.word	0x88009032
    5934:	10001034 	.word	0x10001034
    5938:	e000e180 	.word	0xe000e180
    593c:	50004030 	.word	0x50004030
    5940:	50004100 	.word	0x50004100
    5944:	50004104 	.word	0x50004104
    5948:	50004108 	.word	0x50004108
    594c:	5000410c 	.word	0x5000410c
    5950:	10000be4 	.word	0x10000be4
    5954:	10000bec 	.word	0x10000bec
    5958:	40004008 	.word	0x40004008
    595c:	10001028 	.word	0x10001028
    5960:	1000049c 	.word	0x1000049c
    5964:	1000098a 	.word	0x1000098a
    5968:	10000b00 	.word	0x10000b00
    596c:	100010bc 	.word	0x100010bc

00005970 <dma_init_le>:

static void dma_init_le()
{
    5970:	b480      	push	{r7}
    5972:	b083      	sub	sp, #12
    5974:	af00      	add	r7, sp, #0
	int i;

	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    5976:	4a4b      	ldr	r2, [pc, #300]	; (5aa4 <dma_init_le+0x134>)
    5978:	4b4a      	ldr	r3, [pc, #296]	; (5aa4 <dma_init_le+0x134>)
    597a:	681b      	ldr	r3, [r3, #0]
    597c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    5980:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    5982:	4b49      	ldr	r3, [pc, #292]	; (5aa8 <dma_init_le+0x138>)
    5984:	2200      	movs	r2, #0
    5986:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5988:	4b48      	ldr	r3, [pc, #288]	; (5aac <dma_init_le+0x13c>)
    598a:	2200      	movs	r2, #0
    598c:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    598e:	4b48      	ldr	r3, [pc, #288]	; (5ab0 <dma_init_le+0x140>)
    5990:	2200      	movs	r2, #0
    5992:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5994:	4b47      	ldr	r3, [pc, #284]	; (5ab4 <dma_init_le+0x144>)
    5996:	2200      	movs	r2, #0
    5998:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    599a:	4b47      	ldr	r3, [pc, #284]	; (5ab8 <dma_init_le+0x148>)
    599c:	2200      	movs	r2, #0
    599e:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    59a0:	4b46      	ldr	r3, [pc, #280]	; (5abc <dma_init_le+0x14c>)
    59a2:	2200      	movs	r2, #0
    59a4:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    59a6:	4b46      	ldr	r3, [pc, #280]	; (5ac0 <dma_init_le+0x150>)
    59a8:	2200      	movs	r2, #0
    59aa:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    59ac:	4b45      	ldr	r3, [pc, #276]	; (5ac4 <dma_init_le+0x154>)
    59ae:	2200      	movs	r2, #0
    59b0:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    59b2:	4b45      	ldr	r3, [pc, #276]	; (5ac8 <dma_init_le+0x158>)
    59b4:	22ff      	movs	r2, #255	; 0xff
    59b6:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    59b8:	4b44      	ldr	r3, [pc, #272]	; (5acc <dma_init_le+0x15c>)
    59ba:	22ff      	movs	r2, #255	; 0xff
    59bc:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    59be:	4b44      	ldr	r3, [pc, #272]	; (5ad0 <dma_init_le+0x160>)
    59c0:	2201      	movs	r2, #1
    59c2:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    59c4:	bf00      	nop
    59c6:	4b42      	ldr	r3, [pc, #264]	; (5ad0 <dma_init_le+0x160>)
    59c8:	681b      	ldr	r3, [r3, #0]
    59ca:	f003 0301 	and.w	r3, r3, #1
    59ce:	2b00      	cmp	r3, #0
    59d0:	d0f9      	beq.n	59c6 <dma_init_le+0x56>

	for (i = 0; i < 11; ++i) {
    59d2:	2300      	movs	r3, #0
    59d4:	607b      	str	r3, [r7, #4]
    59d6:	e02a      	b.n	5a2e <dma_init_le+0xbe>
		le_dma_lli[i].src = (u32)&(DIO_SSP_DR);
    59d8:	4a3e      	ldr	r2, [pc, #248]	; (5ad4 <dma_init_le+0x164>)
    59da:	687b      	ldr	r3, [r7, #4]
    59dc:	011b      	lsls	r3, r3, #4
    59de:	4413      	add	r3, r2
    59e0:	4a3d      	ldr	r2, [pc, #244]	; (5ad8 <dma_init_le+0x168>)
    59e2:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].dest = (u32)&rxbuf1[4 * i];
    59e4:	687b      	ldr	r3, [r7, #4]
    59e6:	009b      	lsls	r3, r3, #2
    59e8:	4a3c      	ldr	r2, [pc, #240]	; (5adc <dma_init_le+0x16c>)
    59ea:	4413      	add	r3, r2
    59ec:	4619      	mov	r1, r3
    59ee:	4a39      	ldr	r2, [pc, #228]	; (5ad4 <dma_init_le+0x164>)
    59f0:	687b      	ldr	r3, [r7, #4]
    59f2:	011b      	lsls	r3, r3, #4
    59f4:	4413      	add	r3, r2
    59f6:	6059      	str	r1, [r3, #4]
		le_dma_lli[i].next_lli = i < 10 ? (u32)&le_dma_lli[i+1] : 0;
    59f8:	687b      	ldr	r3, [r7, #4]
    59fa:	2b09      	cmp	r3, #9
    59fc:	dc06      	bgt.n	5a0c <dma_init_le+0x9c>
    59fe:	687b      	ldr	r3, [r7, #4]
    5a00:	3301      	adds	r3, #1
    5a02:	011b      	lsls	r3, r3, #4
    5a04:	4a33      	ldr	r2, [pc, #204]	; (5ad4 <dma_init_le+0x164>)
    5a06:	4413      	add	r3, r2
    5a08:	461a      	mov	r2, r3
    5a0a:	e000      	b.n	5a0e <dma_init_le+0x9e>
    5a0c:	2200      	movs	r2, #0
    5a0e:	4931      	ldr	r1, [pc, #196]	; (5ad4 <dma_init_le+0x164>)
    5a10:	687b      	ldr	r3, [r7, #4]
    5a12:	011b      	lsls	r3, r3, #4
    5a14:	440b      	add	r3, r1
    5a16:	3308      	adds	r3, #8
    5a18:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].control = 4 |
    5a1a:	4a2e      	ldr	r2, [pc, #184]	; (5ad4 <dma_init_le+0x164>)
    5a1c:	687b      	ldr	r3, [r7, #4]
    5a1e:	011b      	lsls	r3, r3, #4
    5a20:	4413      	add	r3, r2
    5a22:	3308      	adds	r3, #8
    5a24:	4a2e      	ldr	r2, [pc, #184]	; (5ae0 <dma_init_le+0x170>)
    5a26:	605a      	str	r2, [r3, #4]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    5a28:	687b      	ldr	r3, [r7, #4]
    5a2a:	3301      	adds	r3, #1
    5a2c:	607b      	str	r3, [r7, #4]
    5a2e:	687b      	ldr	r3, [r7, #4]
    5a30:	2b0a      	cmp	r3, #10
    5a32:	ddd1      	ble.n	59d8 <dma_init_le+0x68>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    5a34:	4a2b      	ldr	r2, [pc, #172]	; (5ae4 <dma_init_le+0x174>)
    5a36:	4b27      	ldr	r3, [pc, #156]	; (5ad4 <dma_init_le+0x164>)
    5a38:	681b      	ldr	r3, [r3, #0]
    5a3a:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    5a3c:	4a2a      	ldr	r2, [pc, #168]	; (5ae8 <dma_init_le+0x178>)
    5a3e:	4b25      	ldr	r3, [pc, #148]	; (5ad4 <dma_init_le+0x164>)
    5a40:	685b      	ldr	r3, [r3, #4]
    5a42:	6013      	str	r3, [r2, #0]
	DMACC0LLI = le_dma_lli[0].next_lli;
    5a44:	4a29      	ldr	r2, [pc, #164]	; (5aec <dma_init_le+0x17c>)
    5a46:	4b23      	ldr	r3, [pc, #140]	; (5ad4 <dma_init_le+0x164>)
    5a48:	689b      	ldr	r3, [r3, #8]
    5a4a:	6013      	str	r3, [r2, #0]
	DMACC0Control = le_dma_lli[0].control;
    5a4c:	4a28      	ldr	r2, [pc, #160]	; (5af0 <dma_init_le+0x180>)
    5a4e:	4b21      	ldr	r3, [pc, #132]	; (5ad4 <dma_init_le+0x164>)
    5a50:	68db      	ldr	r3, [r3, #12]
    5a52:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    5a54:	4b14      	ldr	r3, [pc, #80]	; (5aa8 <dma_init_le+0x138>)
    5a56:	f24d 0206 	movw	r2, #53254	; 0xd006
    5a5a:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5a5c:	4b25      	ldr	r3, [pc, #148]	; (5af4 <dma_init_le+0x184>)
    5a5e:	681b      	ldr	r3, [r3, #0]
    5a60:	0d1b      	lsrs	r3, r3, #20
    5a62:	b2db      	uxtb	r3, r3
    5a64:	4a24      	ldr	r2, [pc, #144]	; (5af8 <dma_init_le+0x188>)
    5a66:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    5a68:	4b22      	ldr	r3, [pc, #136]	; (5af4 <dma_init_le+0x184>)
    5a6a:	681b      	ldr	r3, [r3, #0]
    5a6c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5a70:	f640 4235 	movw	r2, #3125	; 0xc35
    5a74:	fb02 f203 	mul.w	r2, r2, r3
    5a78:	4b20      	ldr	r3, [pc, #128]	; (5afc <dma_init_le+0x18c>)
    5a7a:	681b      	ldr	r3, [r3, #0]
    5a7c:	4413      	add	r3, r2
    5a7e:	4a20      	ldr	r2, [pc, #128]	; (5b00 <dma_init_le+0x190>)
    5a80:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    5a82:	4b20      	ldr	r3, [pc, #128]	; (5b04 <dma_init_le+0x194>)
    5a84:	881b      	ldrh	r3, [r3, #0]
    5a86:	b29a      	uxth	r2, r3
    5a88:	4b1f      	ldr	r3, [pc, #124]	; (5b08 <dma_init_le+0x198>)
    5a8a:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    5a8c:	4b1f      	ldr	r3, [pc, #124]	; (5b0c <dma_init_le+0x19c>)
    5a8e:	2200      	movs	r2, #0
    5a90:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    5a92:	4b1f      	ldr	r3, [pc, #124]	; (5b10 <dma_init_le+0x1a0>)
    5a94:	2200      	movs	r2, #0
    5a96:	601a      	str	r2, [r3, #0]
}
    5a98:	370c      	adds	r7, #12
    5a9a:	46bd      	mov	sp, r7
    5a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5aa0:	4770      	bx	lr
    5aa2:	bf00      	nop
    5aa4:	400fc0c4 	.word	0x400fc0c4
    5aa8:	50004110 	.word	0x50004110
    5aac:	50004130 	.word	0x50004130
    5ab0:	50004150 	.word	0x50004150
    5ab4:	50004170 	.word	0x50004170
    5ab8:	50004190 	.word	0x50004190
    5abc:	500041b0 	.word	0x500041b0
    5ac0:	500041d0 	.word	0x500041d0
    5ac4:	500041f0 	.word	0x500041f0
    5ac8:	50004008 	.word	0x50004008
    5acc:	50004010 	.word	0x50004010
    5ad0:	50004030 	.word	0x50004030
    5ad4:	10000b08 	.word	0x10000b08
    5ad8:	40030008 	.word	0x40030008
    5adc:	10001088 	.word	0x10001088
    5ae0:	88001004 	.word	0x88001004
    5ae4:	50004100 	.word	0x50004100
    5ae8:	50004104 	.word	0x50004104
    5aec:	50004108 	.word	0x50004108
    5af0:	5000410c 	.word	0x5000410c
    5af4:	10000be4 	.word	0x10000be4
    5af8:	10000bec 	.word	0x10000bec
    5afc:	40004008 	.word	0x40004008
    5b00:	10001028 	.word	0x10001028
    5b04:	1000049c 	.word	0x1000049c
    5b08:	1000098a 	.word	0x1000098a
    5b0c:	10000b00 	.word	0x10000b00
    5b10:	100010bc 	.word	0x100010bc

00005b14 <bt_stream_dma_handler>:

void bt_stream_dma_handler(void) {
    5b14:	b480      	push	{r7}
    5b16:	af00      	add	r7, sp, #0
	idle_buf_clkn_high = active_buf_clkn_high;
    5b18:	4b25      	ldr	r3, [pc, #148]	; (5bb0 <bt_stream_dma_handler+0x9c>)
    5b1a:	681b      	ldr	r3, [r3, #0]
    5b1c:	4a25      	ldr	r2, [pc, #148]	; (5bb4 <bt_stream_dma_handler+0xa0>)
    5b1e:	6013      	str	r3, [r2, #0]
	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5b20:	4b25      	ldr	r3, [pc, #148]	; (5bb8 <bt_stream_dma_handler+0xa4>)
    5b22:	681b      	ldr	r3, [r3, #0]
    5b24:	0d1b      	lsrs	r3, r3, #20
    5b26:	b2db      	uxtb	r3, r3
    5b28:	4a21      	ldr	r2, [pc, #132]	; (5bb0 <bt_stream_dma_handler+0x9c>)
    5b2a:	6013      	str	r3, [r2, #0]

	idle_buf_clk100ns = active_buf_clk100ns;
    5b2c:	4b23      	ldr	r3, [pc, #140]	; (5bbc <bt_stream_dma_handler+0xa8>)
    5b2e:	681b      	ldr	r3, [r3, #0]
    5b30:	4a23      	ldr	r2, [pc, #140]	; (5bc0 <bt_stream_dma_handler+0xac>)
    5b32:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    5b34:	4b20      	ldr	r3, [pc, #128]	; (5bb8 <bt_stream_dma_handler+0xa4>)
    5b36:	681b      	ldr	r3, [r3, #0]
    5b38:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5b3c:	f640 4235 	movw	r2, #3125	; 0xc35
    5b40:	fb02 f203 	mul.w	r2, r2, r3
    5b44:	4b1f      	ldr	r3, [pc, #124]	; (5bc4 <bt_stream_dma_handler+0xb0>)
    5b46:	681b      	ldr	r3, [r3, #0]
    5b48:	4413      	add	r3, r2
    5b4a:	4a1c      	ldr	r2, [pc, #112]	; (5bbc <bt_stream_dma_handler+0xa8>)
    5b4c:	6013      	str	r3, [r2, #0]

	idle_buf_channel = active_buf_channel;
    5b4e:	4b1e      	ldr	r3, [pc, #120]	; (5bc8 <bt_stream_dma_handler+0xb4>)
    5b50:	881b      	ldrh	r3, [r3, #0]
    5b52:	b29a      	uxth	r2, r3
    5b54:	4b1d      	ldr	r3, [pc, #116]	; (5bcc <bt_stream_dma_handler+0xb8>)
    5b56:	801a      	strh	r2, [r3, #0]
	active_buf_channel = channel;
    5b58:	4b1d      	ldr	r3, [pc, #116]	; (5bd0 <bt_stream_dma_handler+0xbc>)
    5b5a:	881b      	ldrh	r3, [r3, #0]
    5b5c:	b29a      	uxth	r2, r3
    5b5e:	4b1a      	ldr	r3, [pc, #104]	; (5bc8 <bt_stream_dma_handler+0xb4>)
    5b60:	801a      	strh	r2, [r3, #0]

	/* interrupt on channel 0 */
	if (DMACIntStat & (1 << 0)) {
    5b62:	4b1c      	ldr	r3, [pc, #112]	; (5bd4 <bt_stream_dma_handler+0xc0>)
    5b64:	681b      	ldr	r3, [r3, #0]
    5b66:	f003 0301 	and.w	r3, r3, #1
    5b6a:	2b00      	cmp	r3, #0
    5b6c:	d01b      	beq.n	5ba6 <bt_stream_dma_handler+0x92>
		if (DMACIntTCStat & (1 << 0)) {
    5b6e:	4b1a      	ldr	r3, [pc, #104]	; (5bd8 <bt_stream_dma_handler+0xc4>)
    5b70:	681b      	ldr	r3, [r3, #0]
    5b72:	f003 0301 	and.w	r3, r3, #1
    5b76:	2b00      	cmp	r3, #0
    5b78:	d007      	beq.n	5b8a <bt_stream_dma_handler+0x76>
			DMACIntTCClear = (1 << 0);
    5b7a:	4b18      	ldr	r3, [pc, #96]	; (5bdc <bt_stream_dma_handler+0xc8>)
    5b7c:	2201      	movs	r2, #1
    5b7e:	601a      	str	r2, [r3, #0]
			++rx_tc;
    5b80:	4b17      	ldr	r3, [pc, #92]	; (5be0 <bt_stream_dma_handler+0xcc>)
    5b82:	681b      	ldr	r3, [r3, #0]
    5b84:	3301      	adds	r3, #1
    5b86:	4a16      	ldr	r2, [pc, #88]	; (5be0 <bt_stream_dma_handler+0xcc>)
    5b88:	6013      	str	r3, [r2, #0]
		}
		if (DMACIntErrStat & (1 << 0)) {
    5b8a:	4b16      	ldr	r3, [pc, #88]	; (5be4 <bt_stream_dma_handler+0xd0>)
    5b8c:	681b      	ldr	r3, [r3, #0]
    5b8e:	f003 0301 	and.w	r3, r3, #1
    5b92:	2b00      	cmp	r3, #0
    5b94:	d007      	beq.n	5ba6 <bt_stream_dma_handler+0x92>
			DMACIntErrClr = (1 << 0);
    5b96:	4b14      	ldr	r3, [pc, #80]	; (5be8 <bt_stream_dma_handler+0xd4>)
    5b98:	2201      	movs	r2, #1
    5b9a:	601a      	str	r2, [r3, #0]
			++rx_err;
    5b9c:	4b13      	ldr	r3, [pc, #76]	; (5bec <bt_stream_dma_handler+0xd8>)
    5b9e:	681b      	ldr	r3, [r3, #0]
    5ba0:	3301      	adds	r3, #1
    5ba2:	4a12      	ldr	r2, [pc, #72]	; (5bec <bt_stream_dma_handler+0xd8>)
    5ba4:	6013      	str	r3, [r2, #0]
		}
	}
}
    5ba6:	46bd      	mov	sp, r7
    5ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5bac:	4770      	bx	lr
    5bae:	bf00      	nop
    5bb0:	10000bec 	.word	0x10000bec
    5bb4:	10001030 	.word	0x10001030
    5bb8:	10000be4 	.word	0x10000be4
    5bbc:	10001028 	.word	0x10001028
    5bc0:	10000bc8 	.word	0x10000bc8
    5bc4:	40004008 	.word	0x40004008
    5bc8:	1000098a 	.word	0x1000098a
    5bcc:	10000988 	.word	0x10000988
    5bd0:	1000049c 	.word	0x1000049c
    5bd4:	50004000 	.word	0x50004000
    5bd8:	50004004 	.word	0x50004004
    5bdc:	50004008 	.word	0x50004008
    5be0:	10000b00 	.word	0x10000b00
    5be4:	5000400c 	.word	0x5000400c
    5be8:	50004010 	.word	0x50004010
    5bec:	100010bc 	.word	0x100010bc

00005bf0 <DMA_IRQHandler>:

void DMA_IRQHandler()
{
    5bf0:	b580      	push	{r7, lr}
    5bf2:	af00      	add	r7, sp, #0
	switch (mode) {
    5bf4:	4b15      	ldr	r3, [pc, #84]	; (5c4c <DMA_IRQHandler+0x5c>)
    5bf6:	781b      	ldrb	r3, [r3, #0]
    5bf8:	b2db      	uxtb	r3, r3
    5bfa:	3b01      	subs	r3, #1
    5bfc:	2b0e      	cmp	r3, #14
    5bfe:	d824      	bhi.n	5c4a <DMA_IRQHandler+0x5a>
    5c00:	a201      	add	r2, pc, #4	; (adr r2, 5c08 <DMA_IRQHandler+0x18>)
    5c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    5c06:	bf00      	nop
    5c08:	00005c45 	.word	0x00005c45
    5c0c:	00005c4b 	.word	0x00005c4b
    5c10:	00005c4b 	.word	0x00005c4b
    5c14:	00005c45 	.word	0x00005c45
    5c18:	00005c4b 	.word	0x00005c4b
    5c1c:	00005c4b 	.word	0x00005c4b
    5c20:	00005c4b 	.word	0x00005c4b
    5c24:	00005c45 	.word	0x00005c45
    5c28:	00005c45 	.word	0x00005c45
    5c2c:	00005c45 	.word	0x00005c45
    5c30:	00005c4b 	.word	0x00005c4b
    5c34:	00005c45 	.word	0x00005c45
    5c38:	00005c4b 	.word	0x00005c4b
    5c3c:	00005c45 	.word	0x00005c45
    5c40:	00005c45 	.word	0x00005c45
		case MODE_SPECAN:
		case MODE_BT_FOLLOW:
		case MODE_BT_FOLLOW_LE:
		case MODE_BT_PROMISC_LE:
		case MODE_BT_SLAVE_LE:
			bt_stream_dma_handler();
    5c44:	f7ff ff66 	bl	5b14 <bt_stream_dma_handler>
			break;
    5c48:	bf00      	nop
	}
}
    5c4a:	bd80      	pop	{r7, pc}
    5c4c:	10000a3e 	.word	0x10000a3e

00005c50 <dio_ssp_start>:

static void dio_ssp_start()
{
    5c50:	b480      	push	{r7}
    5c52:	af00      	add	r7, sp, #0
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    5c54:	4b10      	ldr	r3, [pc, #64]	; (5c98 <dio_ssp_start+0x48>)
    5c56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5c5a:	601a      	str	r2, [r3, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    5c5c:	4a0f      	ldr	r2, [pc, #60]	; (5c9c <dio_ssp_start+0x4c>)
    5c5e:	4b0f      	ldr	r3, [pc, #60]	; (5c9c <dio_ssp_start+0x4c>)
    5c60:	681b      	ldr	r3, [r3, #0]
    5c62:	f043 0301 	orr.w	r3, r3, #1
    5c66:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    5c68:	4a0d      	ldr	r2, [pc, #52]	; (5ca0 <dio_ssp_start+0x50>)
    5c6a:	4b0d      	ldr	r3, [pc, #52]	; (5ca0 <dio_ssp_start+0x50>)
    5c6c:	681b      	ldr	r3, [r3, #0]
    5c6e:	f043 0302 	orr.w	r3, r3, #2
    5c72:	6013      	str	r3, [r2, #0]
	
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
    5c74:	4a0b      	ldr	r2, [pc, #44]	; (5ca4 <dio_ssp_start+0x54>)
    5c76:	4b0b      	ldr	r3, [pc, #44]	; (5ca4 <dio_ssp_start+0x54>)
    5c78:	681b      	ldr	r3, [r3, #0]
    5c7a:	f043 0301 	orr.w	r3, r3, #1
    5c7e:	6013      	str	r3, [r2, #0]
	ISER0 = ISER0_ISE_DMA;
    5c80:	4b09      	ldr	r3, [pc, #36]	; (5ca8 <dio_ssp_start+0x58>)
    5c82:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5c86:	601a      	str	r2, [r3, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
    5c88:	4b08      	ldr	r3, [pc, #32]	; (5cac <dio_ssp_start+0x5c>)
    5c8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5c8e:	601a      	str	r2, [r3, #0]
}
    5c90:	46bd      	mov	sp, r7
    5c92:	f85d 7b04 	ldr.w	r7, [sp], #4
    5c96:	4770      	bx	lr
    5c98:	2009c098 	.word	0x2009c098
    5c9c:	40030024 	.word	0x40030024
    5ca0:	40030004 	.word	0x40030004
    5ca4:	50004110 	.word	0x50004110
    5ca8:	e000e100 	.word	0xe000e100
    5cac:	2009c09c 	.word	0x2009c09c

00005cb0 <dio_ssp_stop>:

static void dio_ssp_stop()
{
    5cb0:	b480      	push	{r7}
    5cb2:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    5cb4:	4b21      	ldr	r3, [pc, #132]	; (5d3c <dio_ssp_stop+0x8c>)
    5cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5cba:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5cbc:	4a20      	ldr	r2, [pc, #128]	; (5d40 <dio_ssp_stop+0x90>)
    5cbe:	4b20      	ldr	r3, [pc, #128]	; (5d40 <dio_ssp_stop+0x90>)
    5cc0:	681b      	ldr	r3, [r3, #0]
    5cc2:	f023 0301 	bic.w	r3, r3, #1
    5cc6:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    5cc8:	4a1e      	ldr	r2, [pc, #120]	; (5d44 <dio_ssp_stop+0x94>)
    5cca:	4b1e      	ldr	r3, [pc, #120]	; (5d44 <dio_ssp_stop+0x94>)
    5ccc:	681b      	ldr	r3, [r3, #0]
    5cce:	f023 0302 	bic.w	r3, r3, #2
    5cd2:	6013      	str	r3, [r2, #0]

	// disable DMA engine:
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 607

	// disable DMA interrupts
	ICER0 = ICER0_ICE_DMA;
    5cd4:	4b1c      	ldr	r3, [pc, #112]	; (5d48 <dio_ssp_stop+0x98>)
    5cd6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5cda:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    5cdc:	4b1b      	ldr	r3, [pc, #108]	; (5d4c <dio_ssp_stop+0x9c>)
    5cde:	2200      	movs	r2, #0
    5ce0:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5ce2:	4b1b      	ldr	r3, [pc, #108]	; (5d50 <dio_ssp_stop+0xa0>)
    5ce4:	2200      	movs	r2, #0
    5ce6:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    5ce8:	4b1a      	ldr	r3, [pc, #104]	; (5d54 <dio_ssp_stop+0xa4>)
    5cea:	2200      	movs	r2, #0
    5cec:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5cee:	4b1a      	ldr	r3, [pc, #104]	; (5d58 <dio_ssp_stop+0xa8>)
    5cf0:	2200      	movs	r2, #0
    5cf2:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    5cf4:	4b19      	ldr	r3, [pc, #100]	; (5d5c <dio_ssp_stop+0xac>)
    5cf6:	2200      	movs	r2, #0
    5cf8:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5cfa:	4b19      	ldr	r3, [pc, #100]	; (5d60 <dio_ssp_stop+0xb0>)
    5cfc:	2200      	movs	r2, #0
    5cfe:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    5d00:	4b18      	ldr	r3, [pc, #96]	; (5d64 <dio_ssp_stop+0xb4>)
    5d02:	2200      	movs	r2, #0
    5d04:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    5d06:	4b18      	ldr	r3, [pc, #96]	; (5d68 <dio_ssp_stop+0xb8>)
    5d08:	2200      	movs	r2, #0
    5d0a:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5d0c:	4b17      	ldr	r3, [pc, #92]	; (5d6c <dio_ssp_stop+0xbc>)
    5d0e:	22ff      	movs	r2, #255	; 0xff
    5d10:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5d12:	4b17      	ldr	r3, [pc, #92]	; (5d70 <dio_ssp_stop+0xc0>)
    5d14:	22ff      	movs	r2, #255	; 0xff
    5d16:	601a      	str	r2, [r3, #0]

	// Disable the DMA controller by writing 0 to the DMA Enable bit in the DMACConfig
	// register.
	DMACConfig &= ~DMACConfig_E;
    5d18:	4a16      	ldr	r2, [pc, #88]	; (5d74 <dio_ssp_stop+0xc4>)
    5d1a:	4b16      	ldr	r3, [pc, #88]	; (5d74 <dio_ssp_stop+0xc4>)
    5d1c:	681b      	ldr	r3, [r3, #0]
    5d1e:	f023 0301 	bic.w	r3, r3, #1
    5d22:	6013      	str	r3, [r2, #0]
	while (DMACConfig & DMACConfig_E);
    5d24:	bf00      	nop
    5d26:	4b13      	ldr	r3, [pc, #76]	; (5d74 <dio_ssp_stop+0xc4>)
    5d28:	681b      	ldr	r3, [r3, #0]
    5d2a:	f003 0301 	and.w	r3, r3, #1
    5d2e:	2b00      	cmp	r3, #0
    5d30:	d1f9      	bne.n	5d26 <dio_ssp_stop+0x76>
}
    5d32:	46bd      	mov	sp, r7
    5d34:	f85d 7b04 	ldr.w	r7, [sp], #4
    5d38:	4770      	bx	lr
    5d3a:	bf00      	nop
    5d3c:	2009c098 	.word	0x2009c098
    5d40:	40030024 	.word	0x40030024
    5d44:	40030004 	.word	0x40030004
    5d48:	e000e180 	.word	0xe000e180
    5d4c:	50004110 	.word	0x50004110
    5d50:	50004130 	.word	0x50004130
    5d54:	50004150 	.word	0x50004150
    5d58:	50004170 	.word	0x50004170
    5d5c:	50004190 	.word	0x50004190
    5d60:	500041b0 	.word	0x500041b0
    5d64:	500041d0 	.word	0x500041d0
    5d68:	500041f0 	.word	0x500041f0
    5d6c:	50004008 	.word	0x50004008
    5d70:	50004010 	.word	0x50004010
    5d74:	50004030 	.word	0x50004030

00005d78 <cc2400_idle>:

static void cc2400_idle()
{
    5d78:	b580      	push	{r7, lr}
    5d7a:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    5d7c:	2064      	movs	r0, #100	; 0x64
    5d7e:	f004 fe7f 	bl	aa80 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5d82:	bf00      	nop
    5d84:	f004 fe72 	bl	aa6c <cc2400_status>
    5d88:	4603      	mov	r3, r0
    5d8a:	f003 0304 	and.w	r3, r3, #4
    5d8e:	2b00      	cmp	r3, #0
    5d90:	d1f8      	bne.n	5d84 <cc2400_idle+0xc>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5d92:	4b0a      	ldr	r3, [pc, #40]	; (5dbc <cc2400_idle+0x44>)
    5d94:	2280      	movs	r2, #128	; 0x80
    5d96:	601a      	str	r2, [r3, #0]
	HGM_CLR;
    5d98:	4b08      	ldr	r3, [pc, #32]	; (5dbc <cc2400_idle+0x44>)
    5d9a:	f44f 7280 	mov.w	r2, #256	; 0x100
    5d9e:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    5da0:	4b07      	ldr	r3, [pc, #28]	; (5dc0 <cc2400_idle+0x48>)
    5da2:	2210      	movs	r2, #16
    5da4:	601a      	str	r2, [r3, #0]
	TXLED_CLR;
    5da6:	4b06      	ldr	r3, [pc, #24]	; (5dc0 <cc2400_idle+0x48>)
    5da8:	f44f 7280 	mov.w	r2, #256	; 0x100
    5dac:	601a      	str	r2, [r3, #0]
	USRLED_CLR;
    5dae:	4b04      	ldr	r3, [pc, #16]	; (5dc0 <cc2400_idle+0x48>)
    5db0:	2202      	movs	r2, #2
    5db2:	601a      	str	r2, [r3, #0]
	mode = MODE_IDLE;
    5db4:	4b03      	ldr	r3, [pc, #12]	; (5dc4 <cc2400_idle+0x4c>)
    5db6:	2200      	movs	r2, #0
    5db8:	701a      	strb	r2, [r3, #0]
}
    5dba:	bd80      	pop	{r7, pc}
    5dbc:	2009c05c 	.word	0x2009c05c
    5dc0:	2009c03c 	.word	0x2009c03c
    5dc4:	10000a3e 	.word	0x10000a3e

00005dc8 <cc2400_rx>:

/* start un-buffered rx */
static void cc2400_rx()
{
    5dc8:	b580      	push	{r7, lr}
    5dca:	b082      	sub	sp, #8
    5dcc:	af00      	add	r7, sp, #0
	u16 mdmctrl;
	if (modulation == MOD_BT_BASIC_RATE) {
    5dce:	4b2a      	ldr	r3, [pc, #168]	; (5e78 <cc2400_rx+0xb0>)
    5dd0:	781b      	ldrb	r3, [r3, #0]
    5dd2:	b2db      	uxtb	r3, r3
    5dd4:	2b00      	cmp	r3, #0
    5dd6:	d102      	bne.n	5dde <cc2400_rx+0x16>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5dd8:	2329      	movs	r3, #41	; 0x29
    5dda:	80fb      	strh	r3, [r7, #6]
    5ddc:	e008      	b.n	5df0 <cc2400_rx+0x28>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5dde:	4b26      	ldr	r3, [pc, #152]	; (5e78 <cc2400_rx+0xb0>)
    5de0:	781b      	ldrb	r3, [r3, #0]
    5de2:	b2db      	uxtb	r3, r3
    5de4:	2b01      	cmp	r3, #1
    5de6:	d102      	bne.n	5dee <cc2400_rx+0x26>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5de8:	2340      	movs	r3, #64	; 0x40
    5dea:	80fb      	strh	r3, [r7, #6]
    5dec:	e000      	b.n	5df0 <cc2400_rx+0x28>
	} else {
		/* oops */
		return;
    5dee:	e040      	b.n	5e72 <cc2400_rx+0xaa>
	}

	cc2400_set(MANAND,  0x7fff);
    5df0:	200d      	movs	r0, #13
    5df2:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5df6:	f004 fd81 	bl	a8fc <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5dfa:	2012      	movs	r0, #18
    5dfc:	f642 3122 	movw	r1, #11042	; 0x2b22
    5e00:	f004 fd7c 	bl	a8fc <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    5e04:	2014      	movs	r0, #20
    5e06:	f241 314b 	movw	r1, #4939	; 0x134b
    5e0a:	f004 fd77 	bl	a8fc <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    5e0e:	2020      	movs	r0, #32
    5e10:	f240 1101 	movw	r1, #257	; 0x101
    5e14:	f004 fd72 	bl	a8fc <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 2 preamble bytes of 01010101
	//      |  +-----------------> not packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5e18:	4b18      	ldr	r3, [pc, #96]	; (5e7c <cc2400_rx+0xb4>)
    5e1a:	881b      	ldrh	r3, [r3, #0]
    5e1c:	b29b      	uxth	r3, r3
    5e1e:	3b01      	subs	r3, #1
    5e20:	b29b      	uxth	r3, r3
    5e22:	2002      	movs	r0, #2
    5e24:	4619      	mov	r1, r3
    5e26:	f004 fd69 	bl	a8fc <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5e2a:	88fb      	ldrh	r3, [r7, #6]
    5e2c:	2003      	movs	r0, #3
    5e2e:	4619      	mov	r1, r3
    5e30:	f004 fd64 	bl	a8fc <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5e34:	f7fe fdc2 	bl	49bc <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5e38:	bf00      	nop
    5e3a:	f004 fe17 	bl	aa6c <cc2400_status>
    5e3e:	4603      	mov	r3, r0
    5e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5e44:	2b00      	cmp	r3, #0
    5e46:	d0f8      	beq.n	5e3a <cc2400_rx+0x72>
	cc2400_strobe(SFSON);
    5e48:	2061      	movs	r0, #97	; 0x61
    5e4a:	f004 fe19 	bl	aa80 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5e4e:	bf00      	nop
    5e50:	f004 fe0c 	bl	aa6c <cc2400_status>
    5e54:	4603      	mov	r3, r0
    5e56:	f003 0304 	and.w	r3, r3, #4
    5e5a:	2b00      	cmp	r3, #0
    5e5c:	d0f8      	beq.n	5e50 <cc2400_rx+0x88>
	cc2400_strobe(SRX);
    5e5e:	2062      	movs	r0, #98	; 0x62
    5e60:	f004 fe0e 	bl	aa80 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5e64:	4b06      	ldr	r3, [pc, #24]	; (5e80 <cc2400_rx+0xb8>)
    5e66:	2280      	movs	r2, #128	; 0x80
    5e68:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5e6a:	4b05      	ldr	r3, [pc, #20]	; (5e80 <cc2400_rx+0xb8>)
    5e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5e70:	601a      	str	r2, [r3, #0]
#endif
}
    5e72:	3708      	adds	r7, #8
    5e74:	46bd      	mov	sp, r7
    5e76:	bd80      	pop	{r7, pc}
    5e78:	10000a42 	.word	0x10000a42
    5e7c:	1000049c 	.word	0x1000049c
    5e80:	2009c058 	.word	0x2009c058

00005e84 <cc2400_rx_sync>:

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    5e84:	b580      	push	{r7, lr}
    5e86:	b084      	sub	sp, #16
    5e88:	af00      	add	r7, sp, #0
    5e8a:	6078      	str	r0, [r7, #4]
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    5e8c:	4b33      	ldr	r3, [pc, #204]	; (5f5c <cc2400_rx_sync+0xd8>)
    5e8e:	781b      	ldrb	r3, [r3, #0]
    5e90:	b2db      	uxtb	r3, r3
    5e92:	2b00      	cmp	r3, #0
    5e94:	d105      	bne.n	5ea2 <cc2400_rx_sync+0x1e>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5e96:	2329      	movs	r3, #41	; 0x29
    5e98:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    5e9a:	f240 4361 	movw	r3, #1121	; 0x461
    5e9e:	81fb      	strh	r3, [r7, #14]
    5ea0:	e00b      	b.n	5eba <cc2400_rx_sync+0x36>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5ea2:	4b2e      	ldr	r3, [pc, #184]	; (5f5c <cc2400_rx_sync+0xd8>)
    5ea4:	781b      	ldrb	r3, [r3, #0]
    5ea6:	b2db      	uxtb	r3, r3
    5ea8:	2b01      	cmp	r3, #1
    5eaa:	d105      	bne.n	5eb8 <cc2400_rx_sync+0x34>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5eac:	2340      	movs	r3, #64	; 0x40
    5eae:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    5eb0:	f240 5361 	movw	r3, #1377	; 0x561
    5eb4:	81fb      	strh	r3, [r7, #14]
    5eb6:	e000      	b.n	5eba <cc2400_rx_sync+0x36>
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else {
		/* oops */
		return;
    5eb8:	e04d      	b.n	5f56 <cc2400_rx_sync+0xd2>
	}

	cc2400_set(MANAND,  0x7fff);
    5eba:	200d      	movs	r0, #13
    5ebc:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5ec0:	f004 fd1c 	bl	a8fc <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5ec4:	2012      	movs	r0, #18
    5ec6:	f642 3122 	movw	r1, #11042	; 0x2b22
    5eca:	f004 fd17 	bl	a8fc <cc2400_set>

	cc2400_set(MDMTST0, 0x124b);
    5ece:	2014      	movs	r0, #20
    5ed0:	f241 214b 	movw	r1, #4683	; 0x124b
    5ed4:	f004 fd12 	bl	a8fc <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    5ed8:	89fb      	ldrh	r3, [r7, #14]
    5eda:	2020      	movs	r0, #32
    5edc:	4619      	mov	r1, r3
    5ede:	f004 fd0d 	bl	a8fc <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    5ee2:	687b      	ldr	r3, [r7, #4]
    5ee4:	b29b      	uxth	r3, r3
    5ee6:	202c      	movs	r0, #44	; 0x2c
    5ee8:	4619      	mov	r1, r3
    5eea:	f004 fd07 	bl	a8fc <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    5eee:	687b      	ldr	r3, [r7, #4]
    5ef0:	0c1b      	lsrs	r3, r3, #16
    5ef2:	b29b      	uxth	r3, r3
    5ef4:	202d      	movs	r0, #45	; 0x2d
    5ef6:	4619      	mov	r1, r3
    5ef8:	f004 fd00 	bl	a8fc <cc2400_set>
	
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5efc:	4b18      	ldr	r3, [pc, #96]	; (5f60 <cc2400_rx_sync+0xdc>)
    5efe:	881b      	ldrh	r3, [r3, #0]
    5f00:	b29b      	uxth	r3, r3
    5f02:	3b01      	subs	r3, #1
    5f04:	b29b      	uxth	r3, r3
    5f06:	2002      	movs	r0, #2
    5f08:	4619      	mov	r1, r3
    5f0a:	f004 fcf7 	bl	a8fc <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5f0e:	89bb      	ldrh	r3, [r7, #12]
    5f10:	2003      	movs	r0, #3
    5f12:	4619      	mov	r1, r3
    5f14:	f004 fcf2 	bl	a8fc <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5f18:	f7fe fd50 	bl	49bc <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5f1c:	bf00      	nop
    5f1e:	f004 fda5 	bl	aa6c <cc2400_status>
    5f22:	4603      	mov	r3, r0
    5f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5f28:	2b00      	cmp	r3, #0
    5f2a:	d0f8      	beq.n	5f1e <cc2400_rx_sync+0x9a>
	cc2400_strobe(SFSON);
    5f2c:	2061      	movs	r0, #97	; 0x61
    5f2e:	f004 fda7 	bl	aa80 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5f32:	bf00      	nop
    5f34:	f004 fd9a 	bl	aa6c <cc2400_status>
    5f38:	4603      	mov	r3, r0
    5f3a:	f003 0304 	and.w	r3, r3, #4
    5f3e:	2b00      	cmp	r3, #0
    5f40:	d0f8      	beq.n	5f34 <cc2400_rx_sync+0xb0>
	cc2400_strobe(SRX);
    5f42:	2062      	movs	r0, #98	; 0x62
    5f44:	f004 fd9c 	bl	aa80 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5f48:	4b06      	ldr	r3, [pc, #24]	; (5f64 <cc2400_rx_sync+0xe0>)
    5f4a:	2280      	movs	r2, #128	; 0x80
    5f4c:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5f4e:	4b05      	ldr	r3, [pc, #20]	; (5f64 <cc2400_rx_sync+0xe0>)
    5f50:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f54:	601a      	str	r2, [r3, #0]
#endif
}
    5f56:	3710      	adds	r7, #16
    5f58:	46bd      	mov	sp, r7
    5f5a:	bd80      	pop	{r7, pc}
    5f5c:	10000a42 	.word	0x10000a42
    5f60:	1000049c 	.word	0x1000049c
    5f64:	2009c058 	.word	0x2009c058

00005f68 <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data)
{
    5f68:	b580      	push	{r7, lr}
    5f6a:	b09a      	sub	sp, #104	; 0x68
    5f6c:	af00      	add	r7, sp, #0
    5f6e:	60f8      	str	r0, [r7, #12]
    5f70:	460b      	mov	r3, r1
    5f72:	607a      	str	r2, [r7, #4]
    5f74:	72fb      	strb	r3, [r7, #11]
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5f76:	2300      	movs	r3, #0
    5f78:	667b      	str	r3, [r7, #100]	; 0x64
    5f7a:	e035      	b.n	5fe8 <le_transmit+0x80>
		byte = aa & 0xff;
    5f7c:	68fb      	ldr	r3, [r7, #12]
    5f7e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		aa >>= 8;
    5f82:	68fb      	ldr	r3, [r7, #12]
    5f84:	0a1b      	lsrs	r3, r3, #8
    5f86:	60fb      	str	r3, [r7, #12]
		txbuf[i] = 0;
    5f88:	f107 0210 	add.w	r2, r7, #16
    5f8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5f8e:	4413      	add	r3, r2
    5f90:	2200      	movs	r2, #0
    5f92:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; ++j) {
    5f94:	2300      	movs	r3, #0
    5f96:	663b      	str	r3, [r7, #96]	; 0x60
    5f98:	e020      	b.n	5fdc <le_transmit+0x74>
			txbuf[i] |= (byte & 1) << (7 - j);
    5f9a:	f107 0210 	add.w	r2, r7, #16
    5f9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5fa0:	4413      	add	r3, r2
    5fa2:	781b      	ldrb	r3, [r3, #0]
    5fa4:	b2d9      	uxtb	r1, r3
    5fa6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5faa:	f003 0301 	and.w	r3, r3, #1
    5fae:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5fb0:	f1c2 0207 	rsb	r2, r2, #7
    5fb4:	4093      	lsls	r3, r2
    5fb6:	b2db      	uxtb	r3, r3
    5fb8:	460a      	mov	r2, r1
    5fba:	4313      	orrs	r3, r2
    5fbc:	b2db      	uxtb	r3, r3
    5fbe:	b2d9      	uxtb	r1, r3
    5fc0:	f107 0210 	add.w	r2, r7, #16
    5fc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5fc6:	4413      	add	r3, r2
    5fc8:	460a      	mov	r2, r1
    5fca:	701a      	strb	r2, [r3, #0]
			byte >>= 1;
    5fcc:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5fd0:	085b      	lsrs	r3, r3, #1
    5fd2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    5fd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5fd8:	3301      	adds	r3, #1
    5fda:	663b      	str	r3, [r7, #96]	; 0x60
    5fdc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5fde:	2b07      	cmp	r3, #7
    5fe0:	d9db      	bls.n	5f9a <le_transmit+0x32>
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5fe2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5fe4:	3301      	adds	r3, #1
    5fe6:	667b      	str	r3, [r7, #100]	; 0x64
    5fe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5fea:	2b03      	cmp	r3, #3
    5fec:	d9c6      	bls.n	5f7c <le_transmit+0x14>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
    5fee:	4b93      	ldr	r3, [pc, #588]	; (623c <le_transmit+0x2d4>)
    5ff0:	881b      	ldrh	r3, [r3, #0]
    5ff2:	b29b      	uxth	r3, r3
    5ff4:	b2db      	uxtb	r3, r3
    5ff6:	3b62      	subs	r3, #98	; 0x62
    5ff8:	b2db      	uxtb	r3, r3
    5ffa:	4618      	mov	r0, r3
    5ffc:	f003 f886 	bl	910c <btle_channel_index>
    6000:	4603      	mov	r3, r0
    6002:	461a      	mov	r2, r3
    6004:	4b8e      	ldr	r3, [pc, #568]	; (6240 <le_transmit+0x2d8>)
    6006:	5c9b      	ldrb	r3, [r3, r2]
    6008:	65bb      	str	r3, [r7, #88]	; 0x58
	for (i = 0; i < len; ++i) {
    600a:	2300      	movs	r3, #0
    600c:	667b      	str	r3, [r7, #100]	; 0x64
    600e:	e050      	b.n	60b2 <le_transmit+0x14a>
		byte = data[i];
    6010:	687a      	ldr	r2, [r7, #4]
    6012:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6014:	4413      	add	r3, r2
    6016:	781b      	ldrb	r3, [r3, #0]
    6018:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		txbuf[i+4] = 0;
    601c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    601e:	3304      	adds	r3, #4
    6020:	f107 0268 	add.w	r2, r7, #104	; 0x68
    6024:	4413      	add	r3, r2
    6026:	2200      	movs	r2, #0
    6028:	f803 2c58 	strb.w	r2, [r3, #-88]
		for (j = 0; j < 8; ++j) {
    602c:	2300      	movs	r3, #0
    602e:	663b      	str	r3, [r7, #96]	; 0x60
    6030:	e039      	b.n	60a6 <le_transmit+0x13e>
			bit = (byte & 1) ^ whitening[idx];
    6032:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    6036:	f003 0301 	and.w	r3, r3, #1
    603a:	4982      	ldr	r1, [pc, #520]	; (6244 <le_transmit+0x2dc>)
    603c:	6dba      	ldr	r2, [r7, #88]	; 0x58
    603e:	440a      	add	r2, r1
    6040:	7812      	ldrb	r2, [r2, #0]
    6042:	4053      	eors	r3, r2
    6044:	657b      	str	r3, [r7, #84]	; 0x54
			idx = (idx + 1) % sizeof(whitening);
    6046:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    6048:	3301      	adds	r3, #1
    604a:	4619      	mov	r1, r3
    604c:	4b7e      	ldr	r3, [pc, #504]	; (6248 <le_transmit+0x2e0>)
    604e:	fba1 2303 	umull	r2, r3, r1, r3
    6052:	1ac8      	subs	r0, r1, r3
    6054:	0840      	lsrs	r0, r0, #1
    6056:	4403      	add	r3, r0
    6058:	099a      	lsrs	r2, r3, #6
    605a:	4613      	mov	r3, r2
    605c:	01db      	lsls	r3, r3, #7
    605e:	1a9b      	subs	r3, r3, r2
    6060:	1aca      	subs	r2, r1, r3
    6062:	65ba      	str	r2, [r7, #88]	; 0x58
			byte >>= 1;
    6064:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    6068:	085b      	lsrs	r3, r3, #1
    606a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			txbuf[i+4] |= bit << (7 - j);
    606e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6070:	3304      	adds	r3, #4
    6072:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    6074:	3204      	adds	r2, #4
    6076:	f107 0168 	add.w	r1, r7, #104	; 0x68
    607a:	440a      	add	r2, r1
    607c:	f812 2c58 	ldrb.w	r2, [r2, #-88]
    6080:	b2d1      	uxtb	r1, r2
    6082:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    6084:	f1c2 0207 	rsb	r2, r2, #7
    6088:	4610      	mov	r0, r2
    608a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    608c:	4082      	lsls	r2, r0
    608e:	b2d2      	uxtb	r2, r2
    6090:	430a      	orrs	r2, r1
    6092:	b2d2      	uxtb	r2, r2
    6094:	b2d2      	uxtb	r2, r2
    6096:	f107 0168 	add.w	r1, r7, #104	; 0x68
    609a:	440b      	add	r3, r1
    609c:	f803 2c58 	strb.w	r2, [r3, #-88]
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    60a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    60a2:	3301      	adds	r3, #1
    60a4:	663b      	str	r3, [r7, #96]	; 0x60
    60a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    60a8:	2b07      	cmp	r3, #7
    60aa:	d9c2      	bls.n	6032 <le_transmit+0xca>
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
    60ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    60ae:	3301      	adds	r3, #1
    60b0:	667b      	str	r3, [r7, #100]	; 0x64
    60b2:	7afa      	ldrb	r2, [r7, #11]
    60b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    60b6:	429a      	cmp	r2, r3
    60b8:	d8aa      	bhi.n	6010 <le_transmit+0xa8>
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    60ba:	7afb      	ldrb	r3, [r7, #11]
    60bc:	3304      	adds	r3, #4
    60be:	72fb      	strb	r3, [r7, #11]

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    60c0:	200d      	movs	r0, #13
    60c2:	f647 71ff 	movw	r1, #32767	; 0x7fff
    60c6:	f004 fc19 	bl	a8fc <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    60ca:	2012      	movs	r0, #18
    60cc:	f642 3122 	movw	r1, #11042	; 0x2b22
    60d0:	f004 fc14 	bl	a8fc <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    60d4:	2014      	movs	r0, #20
    60d6:	f241 314b 	movw	r1, #4939	; 0x134b
    60da:	f004 fc0f 	bl	a8fc <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    60de:	2020      	movs	r0, #32
    60e0:	f640 4101 	movw	r1, #3073	; 0xc01
    60e4:	f004 fc0a 	bl	a8fc <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   channel);
    60e8:	4b54      	ldr	r3, [pc, #336]	; (623c <le_transmit+0x2d4>)
    60ea:	881b      	ldrh	r3, [r3, #0]
    60ec:	b29b      	uxth	r3, r3
    60ee:	2002      	movs	r0, #2
    60f0:	4619      	mov	r1, r3
    60f2:	f004 fc03 	bl	a8fc <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    60f6:	2005      	movs	r0, #5
    60f8:	210b      	movs	r1, #11
    60fa:	f004 fbff 	bl	a8fc <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    60fe:	2003      	movs	r0, #3
    6100:	2140      	movs	r1, #64	; 0x40
    6102:	f004 fbfb 	bl	a8fc <cc2400_set>
	cc2400_set(INT,     0x0014);	// FIFO_THRESHOLD: 20 bytes
    6106:	2023      	movs	r0, #35	; 0x23
    6108:	2114      	movs	r1, #20
    610a:	f004 fbf7 	bl	a8fc <cc2400_set>

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    610e:	68fb      	ldr	r3, [r7, #12]
    6110:	f003 0301 	and.w	r3, r3, #1
    6114:	2b00      	cmp	r3, #0
    6116:	d005      	beq.n	6124 <le_transmit+0x1bc>
		cc2400_set(SYNCH,   0xaaaa);
    6118:	202d      	movs	r0, #45	; 0x2d
    611a:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
    611e:	f004 fbed 	bl	a8fc <cc2400_set>
    6122:	e004      	b.n	612e <le_transmit+0x1c6>
	else
		cc2400_set(SYNCH,   0x5555);
    6124:	202d      	movs	r0, #45	; 0x2d
    6126:	f245 5155 	movw	r1, #21845	; 0x5555
    612a:	f004 fbe7 	bl	a8fc <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    612e:	2008      	movs	r0, #8
    6130:	f004 fbce 	bl	a8d0 <cc2400_get>
    6134:	4603      	mov	r3, r0
    6136:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    613a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    613e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    6142:	b29b      	uxth	r3, r3
    6144:	f443 439c 	orr.w	r3, r3, #19968	; 0x4e00
    6148:	b29b      	uxth	r3, r3
    614a:	b29b      	uxth	r3, r3
    614c:	2008      	movs	r0, #8
    614e:	4619      	mov	r1, r3
    6150:	f004 fbd4 	bl	a8fc <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6154:	bf00      	nop
    6156:	f004 fc89 	bl	aa6c <cc2400_status>
    615a:	4603      	mov	r3, r0
    615c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6160:	2b00      	cmp	r3, #0
    6162:	d0f8      	beq.n	6156 <le_transmit+0x1ee>
	cc2400_strobe(SFSON);
    6164:	2061      	movs	r0, #97	; 0x61
    6166:	f004 fc8b 	bl	aa80 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    616a:	bf00      	nop
    616c:	f004 fc7e 	bl	aa6c <cc2400_status>
    6170:	4603      	mov	r3, r0
    6172:	f003 0304 	and.w	r3, r3, #4
    6176:	2b00      	cmp	r3, #0
    6178:	d0f8      	beq.n	616c <le_transmit+0x204>
	TXLED_SET;
    617a:	4b34      	ldr	r3, [pc, #208]	; (624c <le_transmit+0x2e4>)
    617c:	f44f 7280 	mov.w	r2, #256	; 0x100
    6180:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6182:	4b33      	ldr	r3, [pc, #204]	; (6250 <le_transmit+0x2e8>)
    6184:	2280      	movs	r2, #128	; 0x80
    6186:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6188:	bf00      	nop
    618a:	200e      	movs	r0, #14
    618c:	f004 fba0 	bl	a8d0 <cc2400_get>
    6190:	4603      	mov	r3, r0
    6192:	f003 031f 	and.w	r3, r3, #31
    6196:	2b0f      	cmp	r3, #15
    6198:	d1f7      	bne.n	618a <le_transmit+0x222>
	cc2400_strobe(STX);
    619a:	2063      	movs	r0, #99	; 0x63
    619c:	f004 fc70 	bl	aa80 <cc2400_strobe>

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    61a0:	2300      	movs	r3, #0
    61a2:	667b      	str	r3, [r7, #100]	; 0x64
    61a4:	e021      	b.n	61ea <le_transmit+0x282>
		while (GIO6) ; // wait for the FIFO to drain (FIFO_FULL false)
    61a6:	bf00      	nop
    61a8:	4b2a      	ldr	r3, [pc, #168]	; (6254 <le_transmit+0x2ec>)
    61aa:	681b      	ldr	r3, [r3, #0]
    61ac:	f003 0304 	and.w	r3, r3, #4
    61b0:	2b00      	cmp	r3, #0
    61b2:	d1f9      	bne.n	61a8 <le_transmit+0x240>
		tx_len = len - i;
    61b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    61b6:	b2db      	uxtb	r3, r3
    61b8:	7afa      	ldrb	r2, [r7, #11]
    61ba:	1ad3      	subs	r3, r2, r3
    61bc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (tx_len > 16)
    61c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    61c4:	2b10      	cmp	r3, #16
    61c6:	d902      	bls.n	61ce <le_transmit+0x266>
			tx_len = 16;
    61c8:	2310      	movs	r3, #16
    61ca:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
    61ce:	f107 0210 	add.w	r2, r7, #16
    61d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    61d4:	4413      	add	r3, r2
    61d6:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
    61da:	2070      	movs	r0, #112	; 0x70
    61dc:	4611      	mov	r1, r2
    61de:	461a      	mov	r2, r3
    61e0:	f004 fbce 	bl	a980 <cc2400_spi_buf>
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    61e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    61e6:	3310      	adds	r3, #16
    61e8:	667b      	str	r3, [r7, #100]	; 0x64
    61ea:	7afa      	ldrb	r2, [r7, #11]
    61ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    61ee:	429a      	cmp	r2, r3
    61f0:	d8d9      	bhi.n	61a6 <le_transmit+0x23e>
		if (tx_len > 16)
			tx_len = 16;
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
	}

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    61f2:	bf00      	nop
    61f4:	200e      	movs	r0, #14
    61f6:	f004 fb6b 	bl	a8d0 <cc2400_get>
    61fa:	4603      	mov	r3, r0
    61fc:	f003 031f 	and.w	r3, r3, #31
    6200:	2b0f      	cmp	r3, #15
    6202:	d1f7      	bne.n	61f4 <le_transmit+0x28c>
	TXLED_CLR;
    6204:	4b14      	ldr	r3, [pc, #80]	; (6258 <le_transmit+0x2f0>)
    6206:	f44f 7280 	mov.w	r2, #256	; 0x100
    620a:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    620c:	2064      	movs	r0, #100	; 0x64
    620e:	f004 fc37 	bl	aa80 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    6212:	bf00      	nop
    6214:	f004 fc2a 	bl	aa6c <cc2400_status>
    6218:	4603      	mov	r3, r0
    621a:	f003 0304 	and.w	r3, r3, #4
    621e:	2b00      	cmp	r3, #0
    6220:	d1f8      	bne.n	6214 <le_transmit+0x2ac>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    6222:	4b0e      	ldr	r3, [pc, #56]	; (625c <le_transmit+0x2f4>)
    6224:	2280      	movs	r2, #128	; 0x80
    6226:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    6228:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    622c:	2008      	movs	r0, #8
    622e:	4619      	mov	r1, r3
    6230:	f004 fb64 	bl	a8fc <cc2400_set>
}
    6234:	3768      	adds	r7, #104	; 0x68
    6236:	46bd      	mov	sp, r7
    6238:	bd80      	pop	{r7, pc}
    623a:	bf00      	nop
    623c:	1000049c 	.word	0x1000049c
    6240:	0000c6b4 	.word	0x0000c6b4
    6244:	0000c634 	.word	0x0000c634
    6248:	02040811 	.word	0x02040811
    624c:	2009c038 	.word	0x2009c038
    6250:	2009c058 	.word	0x2009c058
    6254:	2009c054 	.word	0x2009c054
    6258:	2009c03c 	.word	0x2009c03c
    625c:	2009c05c 	.word	0x2009c05c

00006260 <le_jam>:

void le_jam(void) {
    6260:	b580      	push	{r7, lr}
    6262:	af00      	add	r7, sp, #0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    6264:	200d      	movs	r0, #13
    6266:	f647 71ff 	movw	r1, #32767	; 0x7fff
    626a:	f004 fb47 	bl	a8fc <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    626e:	2012      	movs	r0, #18
    6270:	f642 3122 	movw	r1, #11042	; 0x2b22
    6274:	f004 fb42 	bl	a8fc <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    6278:	2014      	movs	r0, #20
    627a:	f242 314b 	movw	r1, #9035	; 0x234b
    627e:	f004 fb3d 	bl	a8fc <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    6282:	2020      	movs	r0, #32
    6284:	f640 4101 	movw	r1, #3073	; 0xc01
    6288:	f004 fb38 	bl	a8fc <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    628c:	2005      	movs	r0, #5
    628e:	210b      	movs	r1, #11
    6290:	f004 fb34 	bl	a8fc <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    6294:	2003      	movs	r0, #3
    6296:	2140      	movs	r1, #64	; 0x40
    6298:	f004 fb30 	bl	a8fc <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    629c:	bf00      	nop
    629e:	f004 fbe5 	bl	aa6c <cc2400_status>
    62a2:	4603      	mov	r3, r0
    62a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    62a8:	2b00      	cmp	r3, #0
    62aa:	d0f8      	beq.n	629e <le_jam+0x3e>
	cc2400_strobe(SFSON);
    62ac:	2061      	movs	r0, #97	; 0x61
    62ae:	f004 fbe7 	bl	aa80 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    62b2:	bf00      	nop
    62b4:	f004 fbda 	bl	aa6c <cc2400_status>
    62b8:	4603      	mov	r3, r0
    62ba:	f003 0304 	and.w	r3, r3, #4
    62be:	2b00      	cmp	r3, #0
    62c0:	d0f8      	beq.n	62b4 <le_jam+0x54>
	TXLED_SET;
    62c2:	4b0a      	ldr	r3, [pc, #40]	; (62ec <le_jam+0x8c>)
    62c4:	f44f 7280 	mov.w	r2, #256	; 0x100
    62c8:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    62ca:	4b09      	ldr	r3, [pc, #36]	; (62f0 <le_jam+0x90>)
    62cc:	2280      	movs	r2, #128	; 0x80
    62ce:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    62d0:	bf00      	nop
    62d2:	200e      	movs	r0, #14
    62d4:	f004 fafc 	bl	a8d0 <cc2400_get>
    62d8:	4603      	mov	r3, r0
    62da:	f003 031f 	and.w	r3, r3, #31
    62de:	2b0f      	cmp	r3, #15
    62e0:	d1f7      	bne.n	62d2 <le_jam+0x72>
	cc2400_strobe(STX);
    62e2:	2063      	movs	r0, #99	; 0x63
    62e4:	f004 fbcc 	bl	aa80 <cc2400_strobe>
#endif
}
    62e8:	bd80      	pop	{r7, pc}
    62ea:	bf00      	nop
    62ec:	2009c038 	.word	0x2009c038
    62f0:	2009c058 	.word	0x2009c058

000062f4 <hop>:

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    62f4:	b580      	push	{r7, lr}
    62f6:	af00      	add	r7, sp, #0
	do_hop = 0;
    62f8:	4b41      	ldr	r3, [pc, #260]	; (6400 <hop+0x10c>)
    62fa:	2200      	movs	r2, #0
    62fc:	701a      	strb	r2, [r3, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    62fe:	4b41      	ldr	r3, [pc, #260]	; (6404 <hop+0x110>)
    6300:	781b      	ldrb	r3, [r3, #0]
    6302:	2b00      	cmp	r3, #0
    6304:	d10b      	bne.n	631e <hop+0x2a>
		if (cc2400_get(FSDIV) == (channel - 1))
    6306:	2002      	movs	r0, #2
    6308:	f004 fae2 	bl	a8d0 <cc2400_get>
    630c:	4603      	mov	r3, r0
    630e:	461a      	mov	r2, r3
    6310:	4b3d      	ldr	r3, [pc, #244]	; (6408 <hop+0x114>)
    6312:	881b      	ldrh	r3, [r3, #0]
    6314:	b29b      	uxth	r3, r3
    6316:	3b01      	subs	r3, #1
    6318:	429a      	cmp	r2, r3
    631a:	d147      	bne.n	63ac <hop+0xb8>
			return;
    631c:	e06e      	b.n	63fc <hop+0x108>
	}

	// Slow sweep (100 hops/sec)
	else if (hop_mode == HOP_SWEEP) {
    631e:	4b39      	ldr	r3, [pc, #228]	; (6404 <hop+0x110>)
    6320:	781b      	ldrb	r3, [r3, #0]
    6322:	2b01      	cmp	r3, #1
    6324:	d114      	bne.n	6350 <hop+0x5c>
		channel += 32;
    6326:	4b38      	ldr	r3, [pc, #224]	; (6408 <hop+0x114>)
    6328:	881b      	ldrh	r3, [r3, #0]
    632a:	b29b      	uxth	r3, r3
    632c:	3320      	adds	r3, #32
    632e:	b29a      	uxth	r2, r3
    6330:	4b35      	ldr	r3, [pc, #212]	; (6408 <hop+0x114>)
    6332:	801a      	strh	r2, [r3, #0]
		if (channel > 2480)
    6334:	4b34      	ldr	r3, [pc, #208]	; (6408 <hop+0x114>)
    6336:	881b      	ldrh	r3, [r3, #0]
    6338:	b29b      	uxth	r3, r3
    633a:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
    633e:	d935      	bls.n	63ac <hop+0xb8>
			channel -= 79;
    6340:	4b31      	ldr	r3, [pc, #196]	; (6408 <hop+0x114>)
    6342:	881b      	ldrh	r3, [r3, #0]
    6344:	b29b      	uxth	r3, r3
    6346:	3b4f      	subs	r3, #79	; 0x4f
    6348:	b29a      	uxth	r2, r3
    634a:	4b2f      	ldr	r3, [pc, #188]	; (6408 <hop+0x114>)
    634c:	801a      	strh	r2, [r3, #0]
    634e:	e02d      	b.n	63ac <hop+0xb8>
	}

	else if (hop_mode == HOP_BLUETOOTH) {
    6350:	4b2c      	ldr	r3, [pc, #176]	; (6404 <hop+0x110>)
    6352:	781b      	ldrb	r3, [r3, #0]
    6354:	2b02      	cmp	r3, #2
    6356:	d10d      	bne.n	6374 <hop+0x80>
		TXLED_SET;
    6358:	4b2c      	ldr	r3, [pc, #176]	; (640c <hop+0x118>)
    635a:	f44f 7280 	mov.w	r2, #256	; 0x100
    635e:	601a      	str	r2, [r3, #0]
		channel = next_hop(clkn);
    6360:	4b2b      	ldr	r3, [pc, #172]	; (6410 <hop+0x11c>)
    6362:	681b      	ldr	r3, [r3, #0]
    6364:	4618      	mov	r0, r3
    6366:	f002 fde3 	bl	8f30 <next_hop>
    636a:	4603      	mov	r3, r0
    636c:	461a      	mov	r2, r3
    636e:	4b26      	ldr	r3, [pc, #152]	; (6408 <hop+0x114>)
    6370:	801a      	strh	r2, [r3, #0]
    6372:	e01b      	b.n	63ac <hop+0xb8>
	}

	else if (hop_mode == HOP_BTLE) {
    6374:	4b23      	ldr	r3, [pc, #140]	; (6404 <hop+0x110>)
    6376:	781b      	ldrb	r3, [r3, #0]
    6378:	2b03      	cmp	r3, #3
    637a:	d10b      	bne.n	6394 <hop+0xa0>
		TXLED_SET;
    637c:	4b23      	ldr	r3, [pc, #140]	; (640c <hop+0x118>)
    637e:	f44f 7280 	mov.w	r2, #256	; 0x100
    6382:	601a      	str	r2, [r3, #0]
		channel = btle_next_hop(&le);
    6384:	4823      	ldr	r0, [pc, #140]	; (6414 <hop+0x120>)
    6386:	f002 fe99 	bl	90bc <btle_next_hop>
    638a:	4603      	mov	r3, r0
    638c:	461a      	mov	r2, r3
    638e:	4b1e      	ldr	r3, [pc, #120]	; (6408 <hop+0x114>)
    6390:	801a      	strh	r2, [r3, #0]
    6392:	e00b      	b.n	63ac <hop+0xb8>
	}

	else if (hop_mode == HOP_DIRECT) {
    6394:	4b1b      	ldr	r3, [pc, #108]	; (6404 <hop+0x110>)
    6396:	781b      	ldrb	r3, [r3, #0]
    6398:	2b04      	cmp	r3, #4
    639a:	d107      	bne.n	63ac <hop+0xb8>
		TXLED_SET;
    639c:	4b1b      	ldr	r3, [pc, #108]	; (640c <hop+0x118>)
    639e:	f44f 7280 	mov.w	r2, #256	; 0x100
    63a2:	601a      	str	r2, [r3, #0]
		channel = hop_direct_channel;
    63a4:	4b1c      	ldr	r3, [pc, #112]	; (6418 <hop+0x124>)
    63a6:	881a      	ldrh	r2, [r3, #0]
    63a8:	4b17      	ldr	r3, [pc, #92]	; (6408 <hop+0x114>)
    63aa:	801a      	strh	r2, [r3, #0]
	}

        /* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    63ac:	2064      	movs	r0, #100	; 0x64
    63ae:	f004 fb67 	bl	aa80 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    63b2:	bf00      	nop
    63b4:	f004 fb5a 	bl	aa6c <cc2400_status>
    63b8:	4603      	mov	r3, r0
    63ba:	f003 0304 	and.w	r3, r3, #4
    63be:	2b00      	cmp	r3, #0
    63c0:	d1f8      	bne.n	63b4 <hop+0xc0>

	/* Retune */
	cc2400_set(FSDIV, channel - 1);
    63c2:	4b11      	ldr	r3, [pc, #68]	; (6408 <hop+0x114>)
    63c4:	881b      	ldrh	r3, [r3, #0]
    63c6:	b29b      	uxth	r3, r3
    63c8:	3b01      	subs	r3, #1
    63ca:	b29b      	uxth	r3, r3
    63cc:	2002      	movs	r0, #2
    63ce:	4619      	mov	r1, r3
    63d0:	f004 fa94 	bl	a8fc <cc2400_set>
	
	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    63d4:	4b0b      	ldr	r3, [pc, #44]	; (6404 <hop+0x110>)
    63d6:	781b      	ldrb	r3, [r3, #0]
    63d8:	2b00      	cmp	r3, #0
    63da:	d001      	beq.n	63e0 <hop+0xec>
		cs_threshold_calc_and_set();
    63dc:	f7fe faee 	bl	49bc <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    63e0:	2061      	movs	r0, #97	; 0x61
    63e2:	f004 fb4d 	bl	aa80 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    63e6:	bf00      	nop
    63e8:	f004 fb40 	bl	aa6c <cc2400_status>
    63ec:	4603      	mov	r3, r0
    63ee:	f003 0304 	and.w	r3, r3, #4
    63f2:	2b00      	cmp	r3, #0
    63f4:	d0f8      	beq.n	63e8 <hop+0xf4>
	
	/* RX mode */
	cc2400_strobe(SRX);
    63f6:	2062      	movs	r0, #98	; 0x62
    63f8:	f004 fb42 	bl	aa80 <cc2400_strobe>

}
    63fc:	bd80      	pop	{r7, pc}
    63fe:	bf00      	nop
    6400:	1000097d 	.word	0x1000097d
    6404:	1000097c 	.word	0x1000097c
    6408:	1000049c 	.word	0x1000049c
    640c:	2009c038 	.word	0x2009c038
    6410:	10000be4 	.word	0x10000be4
    6414:	10000458 	.word	0x10000458
    6418:	10000980 	.word	0x10000980

0000641c <cc2400_spi_rev>:


u32 cc2400_spi_rev(u8 len, u32 data)
{
    641c:	b480      	push	{r7}
    641e:	b085      	sub	sp, #20
    6420:	af00      	add	r7, sp, #0
    6422:	4603      	mov	r3, r0
    6424:	6039      	str	r1, [r7, #0]
    6426:	71fb      	strb	r3, [r7, #7]
    //    u32 first_ts, second_ts, diff;


        u32 msb = 1 << (len - 1);
    6428:	79fb      	ldrb	r3, [r7, #7]
    642a:	3b01      	subs	r3, #1
    642c:	2201      	movs	r2, #1
    642e:	fa02 f303 	lsl.w	r3, r2, r3
    6432:	60fb      	str	r3, [r7, #12]

        /* start transaction by dropping CSN */
        CSN_CLR;
    6434:	4b18      	ldr	r3, [pc, #96]	; (6498 <cc2400_spi_rev+0x7c>)
    6436:	2220      	movs	r2, #32
    6438:	601a      	str	r2, [r3, #0]

//      first_ts = CLK100NS;
        while (len--) {
    643a:	e01e      	b.n	647a <cc2400_spi_rev+0x5e>
                if (data & msb)
    643c:	683a      	ldr	r2, [r7, #0]
    643e:	68fb      	ldr	r3, [r7, #12]
    6440:	4013      	ands	r3, r2
    6442:	2b00      	cmp	r3, #0
    6444:	d003      	beq.n	644e <cc2400_spi_rev+0x32>
                        MOSI_SET;
    6446:	4b15      	ldr	r3, [pc, #84]	; (649c <cc2400_spi_rev+0x80>)
    6448:	2201      	movs	r2, #1
    644a:	601a      	str	r2, [r3, #0]
    644c:	e002      	b.n	6454 <cc2400_spi_rev+0x38>
                else
                        MOSI_CLR;
    644e:	4b12      	ldr	r3, [pc, #72]	; (6498 <cc2400_spi_rev+0x7c>)
    6450:	2201      	movs	r2, #1
    6452:	601a      	str	r2, [r3, #0]
                data <<= 1;
    6454:	683b      	ldr	r3, [r7, #0]
    6456:	005b      	lsls	r3, r3, #1
    6458:	603b      	str	r3, [r7, #0]

                SCLK_SET;
    645a:	4b10      	ldr	r3, [pc, #64]	; (649c <cc2400_spi_rev+0x80>)
    645c:	2210      	movs	r2, #16
    645e:	601a      	str	r2, [r3, #0]
                if (MISO)
    6460:	4b0f      	ldr	r3, [pc, #60]	; (64a0 <cc2400_spi_rev+0x84>)
    6462:	681b      	ldr	r3, [r3, #0]
    6464:	f003 0302 	and.w	r3, r3, #2
    6468:	2b00      	cmp	r3, #0
    646a:	d003      	beq.n	6474 <cc2400_spi_rev+0x58>
                        data |= 1;
    646c:	683b      	ldr	r3, [r7, #0]
    646e:	f043 0301 	orr.w	r3, r3, #1
    6472:	603b      	str	r3, [r7, #0]

                SCLK_CLR;
    6474:	4b08      	ldr	r3, [pc, #32]	; (6498 <cc2400_spi_rev+0x7c>)
    6476:	2210      	movs	r2, #16
    6478:	601a      	str	r2, [r3, #0]

        /* start transaction by dropping CSN */
        CSN_CLR;

//      first_ts = CLK100NS;
        while (len--) {
    647a:	79fb      	ldrb	r3, [r7, #7]
    647c:	1e5a      	subs	r2, r3, #1
    647e:	71fa      	strb	r2, [r7, #7]
    6480:	2b00      	cmp	r3, #0
    6482:	d1db      	bne.n	643c <cc2400_spi_rev+0x20>
                SCLK_CLR;
        }
//      second_ts = CLK100NS;
//      diff_ts = second_ts - first_ts;

        CSN_SET;
    6484:	4b05      	ldr	r3, [pc, #20]	; (649c <cc2400_spi_rev+0x80>)
    6486:	2220      	movs	r2, #32
    6488:	601a      	str	r2, [r3, #0]
        return data;
    648a:	683b      	ldr	r3, [r7, #0]
}
    648c:	4618      	mov	r0, r3
    648e:	3714      	adds	r7, #20
    6490:	46bd      	mov	sp, r7
    6492:	f85d 7b04 	ldr.w	r7, [sp], #4
    6496:	4770      	bx	lr
    6498:	2009c05c 	.word	0x2009c05c
    649c:	2009c058 	.word	0x2009c058
    64a0:	2009c054 	.word	0x2009c054

000064a4 <cc2400_get_rev>:

u8 cc2400_get_rev(u8 reg)
{
    64a4:	b580      	push	{r7, lr}
    64a6:	b084      	sub	sp, #16
    64a8:	af00      	add	r7, sp, #0
    64aa:	4603      	mov	r3, r0
    64ac:	71fb      	strb	r3, [r7, #7]
        u32 in;

        u32 out = (reg | 0x80) << 8;
    64ae:	79fb      	ldrb	r3, [r7, #7]
    64b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    64b4:	b2db      	uxtb	r3, r3
    64b6:	021b      	lsls	r3, r3, #8
    64b8:	60fb      	str	r3, [r7, #12]
        in = cc2400_spi_rev(16, out);
    64ba:	2010      	movs	r0, #16
    64bc:	68f9      	ldr	r1, [r7, #12]
    64be:	f7ff ffad 	bl	641c <cc2400_spi_rev>
    64c2:	60b8      	str	r0, [r7, #8]
        return in & 0xFF;
    64c4:	68bb      	ldr	r3, [r7, #8]
    64c6:	b2db      	uxtb	r3, r3
}
    64c8:	4618      	mov	r0, r3
    64ca:	3710      	adds	r7, #16
    64cc:	46bd      	mov	sp, r7
    64ce:	bd80      	pop	{r7, pc}

000064d0 <add>:

u8 add (u8 x, u8 y)
{
    64d0:	b480      	push	{r7}
    64d2:	b085      	sub	sp, #20
    64d4:	af00      	add	r7, sp, #0
    64d6:	4603      	mov	r3, r0
    64d8:	460a      	mov	r2, r1
    64da:	71fb      	strb	r3, [r7, #7]
    64dc:	4613      	mov	r3, r2
    64de:	71bb      	strb	r3, [r7, #6]
  while (y)
    64e0:	e00a      	b.n	64f8 <add+0x28>
  {
    u8 carry = x & y;
    64e2:	79fa      	ldrb	r2, [r7, #7]
    64e4:	79bb      	ldrb	r3, [r7, #6]
    64e6:	4013      	ands	r3, r2
    64e8:	73fb      	strb	r3, [r7, #15]
    x = x ^ y;
    64ea:	79fa      	ldrb	r2, [r7, #7]
    64ec:	79bb      	ldrb	r3, [r7, #6]
    64ee:	4053      	eors	r3, r2
    64f0:	71fb      	strb	r3, [r7, #7]
    y = carry << 1;
    64f2:	7bfb      	ldrb	r3, [r7, #15]
    64f4:	005b      	lsls	r3, r3, #1
    64f6:	71bb      	strb	r3, [r7, #6]
        return in & 0xFF;
}

u8 add (u8 x, u8 y)
{
  while (y)
    64f8:	79bb      	ldrb	r3, [r7, #6]
    64fa:	2b00      	cmp	r3, #0
    64fc:	d1f1      	bne.n	64e2 <add+0x12>
  {
    u8 carry = x & y;
    x = x ^ y;
    y = carry << 1;
  }
  return x;
    64fe:	79fb      	ldrb	r3, [r7, #7]
}
    6500:	4618      	mov	r0, r3
    6502:	3714      	adds	r7, #20
    6504:	46bd      	mov	sp, r7
    6506:	f85d 7b04 	ldr.w	r7, [sp], #4
    650a:	4770      	bx	lr

0000650c <bt_stream_proposed>:

// wpson
void bt_stream_proposed()
{
    650c:	b590      	push	{r4, r7, lr}
    650e:	b091      	sub	sp, #68	; 0x44
    6510:	af00      	add	r7, sp, #0

	u8 epstat;
//	u16 f;
//	u8 buf[DMA_SIZE];
	u8 rssi[50];
	int i = 0;
    6512:	2300      	movs	r3, #0
    6514:	63fb      	str	r3, [r7, #60]	; 0x3c
	for (i = 0; i < 50; i++)
    6516:	2300      	movs	r3, #0
    6518:	63fb      	str	r3, [r7, #60]	; 0x3c
    651a:	e007      	b.n	652c <bt_stream_proposed+0x20>
		rssi[i] = 0;
    651c:	463a      	mov	r2, r7
    651e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6520:	4413      	add	r3, r2
    6522:	2200      	movs	r2, #0
    6524:	701a      	strb	r2, [r3, #0]
	u8 epstat;
//	u16 f;
//	u8 buf[DMA_SIZE];
	u8 rssi[50];
	int i = 0;
	for (i = 0; i < 50; i++)
    6526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    6528:	3301      	adds	r3, #1
    652a:	63fb      	str	r3, [r7, #60]	; 0x3c
    652c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    652e:	2b31      	cmp	r3, #49	; 0x31
    6530:	ddf4      	ble.n	651c <bt_stream_proposed+0x10>
		rssi[i] = 0;
//	u8 length = 50;
	int window = 0;
    6532:	2300      	movs	r3, #0
    6534:	63bb      	str	r3, [r7, #56]	; 0x38
//	u8 index = 0;
	u8 old = 0;
    6536:	2300      	movs	r3, #0
    6538:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	u8 now = 0;
    653c:	2300      	movs	r3, #0
    653e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	u8 diff = 0;
    6542:	2300      	movs	r3, #0
    6544:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	u8 k = 0;
    6548:	2300      	movs	r3, #0
    654a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	u8 temp = 0;
    654e:	2300      	movs	r3, #0
    6550:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	u8 outage = 0;
    6554:	2300      	movs	r3, #0
    6556:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
//	TXLED_SET;
	queue_init();
    655a:	f002 ff57 	bl	940c <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    655e:	4b73      	ldr	r3, [pc, #460]	; (672c <bt_stream_proposed+0x220>)
    6560:	2280      	movs	r2, #128	; 0x80
    6562:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif
	cc2400_set(MANAND, 0x7fff);
    6564:	200d      	movs	r0, #13
    6566:	f647 71ff 	movw	r1, #32767	; 0x7fff
    656a:	f004 f9c7 	bl	a8fc <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    656e:	2012      	movs	r0, #18
    6570:	f642 3122 	movw	r1, #11042	; 0x2b22
    6574:	f004 f9c2 	bl	a8fc <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    6578:	2014      	movs	r0, #20
    657a:	f241 214b 	movw	r1, #4683	; 0x124b
    657e:	f004 f9bd 	bl	a8fc <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    6582:	2020      	movs	r0, #32
    6584:	f240 5161 	movw	r1, #1377	; 0x561
    6588:	f004 f9b8 	bl	a8fc <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    658c:	2003      	movs	r0, #3
    658e:	2140      	movs	r1, #64	; 0x40
    6590:	f004 f9b4 	bl	a8fc <cc2400_set>
//	cc2400_set(SYNCL, 0x00ff);
	
//	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
//	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
	
	while (!(cc2400_status() & XOSC16M_STABLE));
    6594:	bf00      	nop
    6596:	f004 fa69 	bl	aa6c <cc2400_status>
    659a:	4603      	mov	r3, r0
    659c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    65a0:	2b00      	cmp	r3, #0
    65a2:	d0f8      	beq.n	6596 <bt_stream_proposed+0x8a>
	while ((cc2400_status() & FS_LOCK));
    65a4:	bf00      	nop
    65a6:	f004 fa61 	bl	aa6c <cc2400_status>
    65aa:	4603      	mov	r3, r0
    65ac:	f003 0304 	and.w	r3, r3, #4
    65b0:	2b00      	cmp	r3, #0
    65b2:	d1f8      	bne.n	65a6 <bt_stream_proposed+0x9a>

	cc2400_set(FSDIV, channel - 1);
    65b4:	4b5e      	ldr	r3, [pc, #376]	; (6730 <bt_stream_proposed+0x224>)
    65b6:	881b      	ldrh	r3, [r3, #0]
    65b8:	b29b      	uxth	r3, r3
    65ba:	3b01      	subs	r3, #1
    65bc:	b29b      	uxth	r3, r3
    65be:	2002      	movs	r0, #2
    65c0:	4619      	mov	r1, r3
    65c2:	f004 f99b 	bl	a8fc <cc2400_set>
	cc2400_strobe(SFSON);
    65c6:	2061      	movs	r0, #97	; 0x61
    65c8:	f004 fa5a 	bl	aa80 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    65cc:	bf00      	nop
    65ce:	f004 fa4d 	bl	aa6c <cc2400_status>
    65d2:	4603      	mov	r3, r0
    65d4:	f003 0304 	and.w	r3, r3, #4
    65d8:	2b00      	cmp	r3, #0
    65da:	d0f8      	beq.n	65ce <bt_stream_proposed+0xc2>
	cc2400_strobe(SRX);
    65dc:	2062      	movs	r0, #98	; 0x62
    65de:	f004 fa4f 	bl	aa80 <cc2400_strobe>
	
	while (requested_mode == MODE_RX_PROPOSED)
    65e2:	e097      	b.n	6714 <bt_stream_proposed+0x208>
	{

			
//		while (!(cc2400_status () & SYNC_RECEIVED));	
		window = 0;
    65e4:	2300      	movs	r3, #0
    65e6:	63bb      	str	r3, [r7, #56]	; 0x38
		old = 0;
    65e8:	2300      	movs	r3, #0
    65ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		now = 0;
    65ee:	2300      	movs	r3, #0
    65f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
		diff = 0;
    65f4:	2300      	movs	r3, #0
    65f6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
		

//		diff_ts = CLK100NS - first_ts;
//wpson
		while (window < 8)
    65fa:	e060      	b.n	66be <bt_stream_proposed+0x1b2>
		{	
			first_ts = CLK100NS;
    65fc:	4b4d      	ldr	r3, [pc, #308]	; (6734 <bt_stream_proposed+0x228>)
    65fe:	681b      	ldr	r3, [r3, #0]
    6600:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6604:	f640 4235 	movw	r2, #3125	; 0xc35
    6608:	fb02 f203 	mul.w	r2, r2, r3
    660c:	4b4a      	ldr	r3, [pc, #296]	; (6738 <bt_stream_proposed+0x22c>)
    660e:	681b      	ldr	r3, [r3, #0]
    6610:	4413      	add	r3, r2
    6612:	4a4a      	ldr	r2, [pc, #296]	; (673c <bt_stream_proposed+0x230>)
    6614:	6013      	str	r3, [r2, #0]
			now = cc2400_get_rev(FREQEST);	 
    6616:	2007      	movs	r0, #7
    6618:	f7ff ff44 	bl	64a4 <cc2400_get_rev>
    661c:	4603      	mov	r3, r0
    661e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			diff = add (now, add (~old, 1)); // 5->8
    6622:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
    6626:	43db      	mvns	r3, r3
    6628:	b2db      	uxtb	r3, r3
    662a:	4618      	mov	r0, r3
    662c:	2101      	movs	r1, #1
    662e:	f7ff ff4f 	bl	64d0 <add>
    6632:	4603      	mov	r3, r0
    6634:	461a      	mov	r2, r3
    6636:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    663a:	4618      	mov	r0, r3
    663c:	4611      	mov	r1, r2
    663e:	f7ff ff47 	bl	64d0 <add>
    6642:	4603      	mov	r3, r0
    6644:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			if (diff & 0x80) 
    6648:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    664c:	b25b      	sxtb	r3, r3
    664e:	2b00      	cmp	r3, #0
    6650:	da0a      	bge.n	6668 <bt_stream_proposed+0x15c>
				diff = add (~diff, 1);	
    6652:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    6656:	43db      	mvns	r3, r3
    6658:	b2db      	uxtb	r3, r3
    665a:	4618      	mov	r0, r3
    665c:	2101      	movs	r1, #1
    665e:	f7ff ff37 	bl	64d0 <add>
    6662:	4603      	mov	r3, r0
    6664:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

			if (diff < 0x03)
    6668:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
    666c:	2b02      	cmp	r3, #2
    666e:	d803      	bhi.n	6678 <bt_stream_proposed+0x16c>
				window++;
    6670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    6672:	3301      	adds	r3, #1
    6674:	63bb      	str	r3, [r7, #56]	; 0x38
    6676:	e011      	b.n	669c <bt_stream_proposed+0x190>
			else
			{
				outage = add (outage, 1);
    6678:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    667c:	4618      	mov	r0, r3
    667e:	2101      	movs	r1, #1
    6680:	f7ff ff26 	bl	64d0 <add>
    6684:	4603      	mov	r3, r0
    6686:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				if (outage > 1)
    668a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
    668e:	2b01      	cmp	r3, #1
    6690:	d904      	bls.n	669c <bt_stream_proposed+0x190>
				{
					outage = 0;
    6692:	2300      	movs	r3, #0
    6694:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					window = 0;
    6698:	2300      	movs	r3, #0
    669a:	63bb      	str	r3, [r7, #56]	; 0x38
				}
			}
			old = now;
    669c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    66a0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			second_ts = CLK100NS;
    66a4:	4b23      	ldr	r3, [pc, #140]	; (6734 <bt_stream_proposed+0x228>)
    66a6:	681b      	ldr	r3, [r3, #0]
    66a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    66ac:	f640 4235 	movw	r2, #3125	; 0xc35
    66b0:	fb02 f203 	mul.w	r2, r2, r3
    66b4:	4b20      	ldr	r3, [pc, #128]	; (6738 <bt_stream_proposed+0x22c>)
    66b6:	681b      	ldr	r3, [r3, #0]
    66b8:	4413      	add	r3, r2
    66ba:	4a21      	ldr	r2, [pc, #132]	; (6740 <bt_stream_proposed+0x234>)
    66bc:	6013      	str	r3, [r2, #0]
		diff = 0;
		

//		diff_ts = CLK100NS - first_ts;
//wpson
		while (window < 8)
    66be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    66c0:	2b07      	cmp	r3, #7
    66c2:	dd9b      	ble.n	65fc <bt_stream_proposed+0xf0>
			}
			old = now;
			second_ts = CLK100NS;
		}
	
		rssi_avg = ((int8_t)cc2400_get_rev(RSSI) + (int8_t)cc2400_get_rev(RSSI))/2;
    66c4:	2006      	movs	r0, #6
    66c6:	f7ff feed 	bl	64a4 <cc2400_get_rev>
    66ca:	4603      	mov	r3, r0
    66cc:	b2db      	uxtb	r3, r3
    66ce:	b25c      	sxtb	r4, r3
    66d0:	2006      	movs	r0, #6
    66d2:	f7ff fee7 	bl	64a4 <cc2400_get_rev>
    66d6:	4603      	mov	r3, r0
    66d8:	b2db      	uxtb	r3, r3
    66da:	b25b      	sxtb	r3, r3
    66dc:	4423      	add	r3, r4
    66de:	0fda      	lsrs	r2, r3, #31
    66e0:	4413      	add	r3, r2
    66e2:	105b      	asrs	r3, r3, #1
    66e4:	b2da      	uxtb	r2, r3
    66e6:	4b17      	ldr	r3, [pc, #92]	; (6744 <bt_stream_proposed+0x238>)
    66e8:	701a      	strb	r2, [r3, #0]
		freq_avg = now;
    66ea:	4a17      	ldr	r2, [pc, #92]	; (6748 <bt_stream_proposed+0x23c>)
    66ec:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
    66f0:	7013      	strb	r3, [r2, #0]
	
		diff_ts = second_ts - first_ts;
    66f2:	4b13      	ldr	r3, [pc, #76]	; (6740 <bt_stream_proposed+0x234>)
    66f4:	681a      	ldr	r2, [r3, #0]
    66f6:	4b11      	ldr	r3, [pc, #68]	; (673c <bt_stream_proposed+0x230>)
    66f8:	681b      	ldr	r3, [r3, #0]
    66fa:	1ad3      	subs	r3, r2, r3
    66fc:	4a13      	ldr	r2, [pc, #76]	; (674c <bt_stream_proposed+0x240>)
    66fe:	6013      	str	r3, [r2, #0]
		enqueue_proposed(FREQ_PACKET, rssi);
    6700:	463b      	mov	r3, r7
    6702:	2007      	movs	r0, #7
    6704:	4619      	mov	r1, r3
    6706:	f7fe f8d1 	bl	48ac <enqueue_proposed>
//		enqueue(FREQ_PACKET, rssi);
		handle_usb(clkn);
    670a:	4b0a      	ldr	r3, [pc, #40]	; (6734 <bt_stream_proposed+0x228>)
    670c:	681b      	ldr	r3, [r3, #0]
    670e:	4618      	mov	r0, r3
    6710:	f002 ff1c 	bl	954c <handle_usb>
	cc2400_set(FSDIV, channel - 1);
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
	while (requested_mode == MODE_RX_PROPOSED)
    6714:	4b0e      	ldr	r3, [pc, #56]	; (6750 <bt_stream_proposed+0x244>)
    6716:	781b      	ldrb	r3, [r3, #0]
    6718:	b2db      	uxtb	r3, r3
    671a:	2b0f      	cmp	r3, #15
    671c:	f43f af62 	beq.w	65e4 <bt_stream_proposed+0xd8>
	
//		msleep(500);	
		cc2400_strobe (SRX);
*/
	}
	mode = MODE_IDLE;
    6720:	4b0c      	ldr	r3, [pc, #48]	; (6754 <bt_stream_proposed+0x248>)
    6722:	2200      	movs	r2, #0
    6724:	701a      	strb	r2, [r3, #0]
//	dio_ssp_stop ();
//	cs_trigger_disable ();
}
    6726:	3744      	adds	r7, #68	; 0x44
    6728:	46bd      	mov	sp, r7
    672a:	bd90      	pop	{r4, r7, pc}
    672c:	2009c058 	.word	0x2009c058
    6730:	1000049c 	.word	0x1000049c
    6734:	10000be4 	.word	0x10000be4
    6738:	40004008 	.word	0x40004008
    673c:	10000cf8 	.word	0x10000cf8
    6740:	1000107c 	.word	0x1000107c
    6744:	1000102d 	.word	0x1000102d
    6748:	10000be9 	.word	0x10000be9
    674c:	10001068 	.word	0x10001068
    6750:	10000a3f 	.word	0x10000a3f
    6754:	10000a3e 	.word	0x10000a3e

00006758 <bt_stream_freq>:



// wpson
void bt_stream_freq()
{
    6758:	b590      	push	{r4, r7, lr}
    675a:	b0a1      	sub	sp, #132	; 0x84
    675c:	af00      	add	r7, sp, #0
//	TXLED_SET;
	RXLED_CLR;
    675e:	4bb8      	ldr	r3, [pc, #736]	; (6a40 <bt_stream_freq+0x2e8>)
    6760:	2210      	movs	r2, #16
    6762:	601a      	str	r2, [r3, #0]
	int i;
	
	u8 freq_buf[45];
	queue_init();
    6764:	f002 fe52 	bl	940c <queue_init>
	dio_ssp_init();
    6768:	f003 fff6 	bl	a758 <dio_ssp_init>
	dma_init_le();
    676c:	f7ff f900 	bl	5970 <dma_init_le>
	dio_ssp_start();
    6770:	f7ff fa6e 	bl	5c50 <dio_ssp_start>
	
	cc2400_set(MANAND, 0x7fff);
    6774:	200d      	movs	r0, #13
    6776:	f647 71ff 	movw	r1, #32767	; 0x7fff
    677a:	f004 f8bf 	bl	a8fc <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    677e:	2012      	movs	r0, #18
    6780:	f642 3122 	movw	r1, #11042	; 0x2b22
    6784:	f004 f8ba 	bl	a8fc <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    6788:	2014      	movs	r0, #20
    678a:	f241 214b 	movw	r1, #4683	; 0x124b
    678e:	f004 f8b5 	bl	a8fc <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    6792:	2020      	movs	r0, #32
    6794:	f240 5161 	movw	r1, #1377	; 0x561
    6798:	f004 f8b0 	bl	a8fc <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    679c:	2003      	movs	r0, #3
    679e:	2140      	movs	r1, #64	; 0x40
    67a0:	f004 f8ac 	bl	a8fc <cc2400_set>

//	cc2400_set(SYNCH, 0xf9ae);
//	cc2400_set(SYNCL, 0x1584);
	
	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
    67a4:	48a7      	ldr	r0, [pc, #668]	; (6a44 <bt_stream_freq+0x2ec>)
    67a6:	f003 fed7 	bl	a558 <rbit>
    67aa:	4603      	mov	r3, r0
    67ac:	b29b      	uxth	r3, r3
    67ae:	202c      	movs	r0, #44	; 0x2c
    67b0:	4619      	mov	r1, r3
    67b2:	f004 f8a3 	bl	a8fc <cc2400_set>
	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
    67b6:	48a3      	ldr	r0, [pc, #652]	; (6a44 <bt_stream_freq+0x2ec>)
    67b8:	f003 fece 	bl	a558 <rbit>
    67bc:	4603      	mov	r3, r0
    67be:	0c1b      	lsrs	r3, r3, #16
    67c0:	b29b      	uxth	r3, r3
    67c2:	202d      	movs	r0, #45	; 0x2d
    67c4:	4619      	mov	r1, r3
    67c6:	f004 f899 	bl	a8fc <cc2400_set>
	
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    67ca:	4b9f      	ldr	r3, [pc, #636]	; (6a48 <bt_stream_freq+0x2f0>)
    67cc:	2280      	movs	r2, #128	; 0x80
    67ce:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif

	while (!(cc2400_status() & XOSC16M_STABLE));
    67d0:	bf00      	nop
    67d2:	f004 f94b 	bl	aa6c <cc2400_status>
    67d6:	4603      	mov	r3, r0
    67d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    67dc:	2b00      	cmp	r3, #0
    67de:	d0f8      	beq.n	67d2 <bt_stream_freq+0x7a>
	while ((cc2400_status() & FS_LOCK));
    67e0:	bf00      	nop
    67e2:	f004 f943 	bl	aa6c <cc2400_status>
    67e6:	4603      	mov	r3, r0
    67e8:	f003 0304 	and.w	r3, r3, #4
    67ec:	2b00      	cmp	r3, #0
    67ee:	d1f8      	bne.n	67e2 <bt_stream_freq+0x8a>

	cc2400_set(FSDIV, channel - 1);
    67f0:	4b96      	ldr	r3, [pc, #600]	; (6a4c <bt_stream_freq+0x2f4>)
    67f2:	881b      	ldrh	r3, [r3, #0]
    67f4:	b29b      	uxth	r3, r3
    67f6:	3b01      	subs	r3, #1
    67f8:	b29b      	uxth	r3, r3
    67fa:	2002      	movs	r0, #2
    67fc:	4619      	mov	r1, r3
    67fe:	f004 f87d 	bl	a8fc <cc2400_set>
	cc2400_strobe(SFSON);
    6802:	2061      	movs	r0, #97	; 0x61
    6804:	f004 f93c 	bl	aa80 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6808:	bf00      	nop
    680a:	f004 f92f 	bl	aa6c <cc2400_status>
    680e:	4603      	mov	r3, r0
    6810:	f003 0304 	and.w	r3, r3, #4
    6814:	2b00      	cmp	r3, #0
    6816:	d0f8      	beq.n	680a <bt_stream_freq+0xb2>
	cc2400_strobe(SRX);
    6818:	2062      	movs	r0, #98	; 0x62
    681a:	f004 f931 	bl	aa80 <cc2400_strobe>
	
//	cc2400_rx();
	while (requested_mode == MODE_RX_FREQ) {
    681e:	e144      	b.n	6aaa <bt_stream_freq+0x352>
		
		while (!(cc2400_status () & SYNC_RECEIVED));
    6820:	bf00      	nop
    6822:	f004 f923 	bl	aa6c <cc2400_status>
    6826:	4603      	mov	r3, r0
    6828:	f003 0310 	and.w	r3, r3, #16
    682c:	2b00      	cmp	r3, #0
    682e:	d0f8      	beq.n	6822 <bt_stream_freq+0xca>
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/

		for (i = 0; i < 45; i++)
    6830:	2300      	movs	r3, #0
    6832:	67fb      	str	r3, [r7, #124]	; 0x7c
    6834:	e00d      	b.n	6852 <bt_stream_freq+0xfa>
		{
			freq_buf[i] = cc2400_get_rev(FREQEST);	
    6836:	2007      	movs	r0, #7
    6838:	f7ff fe34 	bl	64a4 <cc2400_get_rev>
    683c:	4603      	mov	r3, r0
    683e:	4619      	mov	r1, r3
    6840:	f107 0234 	add.w	r2, r7, #52	; 0x34
    6844:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    6846:	4413      	add	r3, r2
    6848:	460a      	mov	r2, r1
    684a:	701a      	strb	r2, [r3, #0]
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/

		for (i = 0; i < 45; i++)
    684c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    684e:	3301      	adds	r3, #1
    6850:	67fb      	str	r3, [r7, #124]	; 0x7c
    6852:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    6854:	2b2c      	cmp	r3, #44	; 0x2c
    6856:	ddee      	ble.n	6836 <bt_stream_freq+0xde>
		{
			freq_buf[i] = cc2400_get_rev(FREQEST);	
		}


		while (!rx_tc);
    6858:	bf00      	nop
    685a:	4b7d      	ldr	r3, [pc, #500]	; (6a50 <bt_stream_freq+0x2f8>)
    685c:	681b      	ldr	r3, [r3, #0]
    685e:	2b00      	cmp	r3, #0
    6860:	d0fb      	beq.n	685a <bt_stream_freq+0x102>
	
		RXLED_SET;
    6862:	4b7c      	ldr	r3, [pc, #496]	; (6a54 <bt_stream_freq+0x2fc>)
    6864:	2210      	movs	r2, #16
    6866:	601a      	str	r2, [r3, #0]
		if (rx_err) {
    6868:	4b7b      	ldr	r3, [pc, #492]	; (6a58 <bt_stream_freq+0x300>)
    686a:	681b      	ldr	r3, [r3, #0]
    686c:	2b00      	cmp	r3, #0
    686e:	d007      	beq.n	6880 <bt_stream_freq+0x128>
		status |= DMA_ERROR;
    6870:	4b7a      	ldr	r3, [pc, #488]	; (6a5c <bt_stream_freq+0x304>)
    6872:	781b      	ldrb	r3, [r3, #0]
    6874:	b2db      	uxtb	r3, r3
    6876:	f043 0302 	orr.w	r3, r3, #2
    687a:	b2da      	uxtb	r2, r3
    687c:	4b77      	ldr	r3, [pc, #476]	; (6a5c <bt_stream_freq+0x304>)
    687e:	701a      	strb	r2, [r3, #0]
		}	
		if (rx_tc > 1)
    6880:	4b73      	ldr	r3, [pc, #460]	; (6a50 <bt_stream_freq+0x2f8>)
    6882:	681b      	ldr	r3, [r3, #0]
    6884:	2b01      	cmp	r3, #1
    6886:	d907      	bls.n	6898 <bt_stream_freq+0x140>
			status |= DMA_OVERFLOW;
    6888:	4b74      	ldr	r3, [pc, #464]	; (6a5c <bt_stream_freq+0x304>)
    688a:	781b      	ldrb	r3, [r3, #0]
    688c:	b2db      	uxtb	r3, r3
    688e:	f043 0301 	orr.w	r3, r3, #1
    6892:	b2da      	uxtb	r2, r3
    6894:	4b71      	ldr	r3, [pc, #452]	; (6a5c <bt_stream_freq+0x304>)
    6896:	701a      	strb	r2, [r3, #0]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    6898:	463b      	mov	r3, r7
    689a:	67bb      	str	r3, [r7, #120]	; 0x78
		packet[0] = le.access_address;
    689c:	4b70      	ldr	r3, [pc, #448]	; (6a60 <bt_stream_freq+0x308>)
    689e:	681b      	ldr	r3, [r3, #0]
    68a0:	603b      	str	r3, [r7, #0]

                while (DMACC0Config & DMACCxConfig_E && rx_err == 0);
    68a2:	bf00      	nop
    68a4:	4b6f      	ldr	r3, [pc, #444]	; (6a64 <bt_stream_freq+0x30c>)
    68a6:	681b      	ldr	r3, [r3, #0]
    68a8:	f003 0301 	and.w	r3, r3, #1
    68ac:	2b00      	cmp	r3, #0
    68ae:	d003      	beq.n	68b8 <bt_stream_freq+0x160>
    68b0:	4b69      	ldr	r3, [pc, #420]	; (6a58 <bt_stream_freq+0x300>)
    68b2:	681b      	ldr	r3, [r3, #0]
    68b4:	2b00      	cmp	r3, #0
    68b6:	d0f5      	beq.n	68a4 <bt_stream_freq+0x14c>
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    68b8:	4a6b      	ldr	r2, [pc, #428]	; (6a68 <bt_stream_freq+0x310>)
    68ba:	4b6b      	ldr	r3, [pc, #428]	; (6a68 <bt_stream_freq+0x310>)
    68bc:	681b      	ldr	r3, [r3, #0]
    68be:	f023 0301 	bic.w	r3, r3, #1
    68c2:	6013      	str	r3, [r2, #0]
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    68c4:	4b61      	ldr	r3, [pc, #388]	; (6a4c <bt_stream_freq+0x2f4>)
    68c6:	881b      	ldrh	r3, [r3, #0]
    68c8:	b29b      	uxth	r3, r3
    68ca:	b2db      	uxtb	r3, r3
    68cc:	3b62      	subs	r3, #98	; 0x62
    68ce:	b2db      	uxtb	r3, r3
    68d0:	4618      	mov	r0, r3
    68d2:	f002 fc1b 	bl	910c <btle_channel_index>
    68d6:	4603      	mov	r3, r0
    68d8:	461a      	mov	r2, r3
    68da:	4613      	mov	r3, r2
    68dc:	005b      	lsls	r3, r3, #1
    68de:	4413      	add	r3, r2
    68e0:	011b      	lsls	r3, r3, #4
    68e2:	4a62      	ldr	r2, [pc, #392]	; (6a6c <bt_stream_freq+0x314>)
    68e4:	4413      	add	r3, r2
    68e6:	677b      	str	r3, [r7, #116]	; 0x74
		for (i = 0; i < 44; i += 4) {
    68e8:	2300      	movs	r3, #0
    68ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    68ec:	e034      	b.n	6958 <bt_stream_freq+0x200>
			uint32_t v = rxbuf1[i+0] << 24
    68ee:	4a60      	ldr	r2, [pc, #384]	; (6a70 <bt_stream_freq+0x318>)
    68f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    68f2:	4413      	add	r3, r2
    68f4:	781b      	ldrb	r3, [r3, #0]
    68f6:	061a      	lsls	r2, r3, #24
                                          | rxbuf1[i+1] << 16
    68f8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    68fa:	3301      	adds	r3, #1
    68fc:	495c      	ldr	r1, [pc, #368]	; (6a70 <bt_stream_freq+0x318>)
    68fe:	5ccb      	ldrb	r3, [r1, r3]
    6900:	041b      	lsls	r3, r3, #16
    6902:	431a      	orrs	r2, r3
                                      | rxbuf1[i+2] << 8
    6904:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    6906:	3302      	adds	r3, #2
    6908:	4959      	ldr	r1, [pc, #356]	; (6a70 <bt_stream_freq+0x318>)
    690a:	5ccb      	ldrb	r3, [r1, r3]
    690c:	021b      	lsls	r3, r3, #8
    690e:	4313      	orrs	r3, r2
                                          | rxbuf1[i+3] << 0;
    6910:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    6912:	3203      	adds	r2, #3
    6914:	4956      	ldr	r1, [pc, #344]	; (6a70 <bt_stream_freq+0x318>)
    6916:	5c8a      	ldrb	r2, [r1, r2]
    6918:	4313      	orrs	r3, r2
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    691a:	673b      	str	r3, [r7, #112]	; 0x70
                                          | rxbuf1[i+1] << 16
                                      | rxbuf1[i+2] << 8
                                          | rxbuf1[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
    691c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    691e:	2b00      	cmp	r3, #0
    6920:	da00      	bge.n	6924 <bt_stream_freq+0x1cc>
    6922:	3303      	adds	r3, #3
    6924:	109b      	asrs	r3, r3, #2
    6926:	1c5c      	adds	r4, r3, #1
    6928:	6f38      	ldr	r0, [r7, #112]	; 0x70
    692a:	f003 fe15 	bl	a558 <rbit>
    692e:	4601      	mov	r1, r0
    6930:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    6932:	2b00      	cmp	r3, #0
    6934:	da00      	bge.n	6938 <bt_stream_freq+0x1e0>
    6936:	3303      	adds	r3, #3
    6938:	109b      	asrs	r3, r3, #2
    693a:	009b      	lsls	r3, r3, #2
    693c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    693e:	4413      	add	r3, r2
    6940:	681b      	ldr	r3, [r3, #0]
    6942:	ea81 0203 	eor.w	r2, r1, r3
    6946:	00a3      	lsls	r3, r4, #2
    6948:	f107 0180 	add.w	r1, r7, #128	; 0x80
    694c:	440b      	add	r3, r1
    694e:	f843 2c80 	str.w	r2, [r3, #-128]
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
    6952:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    6954:	3304      	adds	r3, #4
    6956:	67fb      	str	r3, [r7, #124]	; 0x7c
    6958:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    695a:	2b2b      	cmp	r3, #43	; 0x2b
    695c:	ddc7      	ble.n	68ee <bt_stream_freq+0x196>
                                      | eddystone[i+2] << 8
                                          | eddystone[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
		}
*/
		unsigned len = (p[5] & 0x3f) + 2;
    695e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    6960:	3305      	adds	r3, #5
    6962:	781b      	ldrb	r3, [r3, #0]
    6964:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6968:	3302      	adds	r3, #2
    696a:	66fb      	str	r3, [r7, #108]	; 0x6c
		
		if (len > 39)
    696c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    696e:	2b27      	cmp	r3, #39	; 0x27
    6970:	d900      	bls.n	6974 <bt_stream_freq+0x21c>
			goto rx_flush;
    6972:	e040      	b.n	69f6 <bt_stream_freq+0x29e>

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    6974:	4b3a      	ldr	r3, [pc, #232]	; (6a60 <bt_stream_freq+0x308>)
    6976:	68d9      	ldr	r1, [r3, #12]
    6978:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    697a:	1d1a      	adds	r2, r3, #4
    697c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    697e:	4608      	mov	r0, r1
    6980:	4611      	mov	r1, r2
    6982:	461a      	mov	r2, r3
    6984:	f002 fcc6 	bl	9314 <btle_crcgen_lut>
    6988:	66b8      	str	r0, [r7, #104]	; 0x68
		u32 wire_crc = (p[4+len+2] << 16)
    698a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    698c:	3306      	adds	r3, #6
    698e:	6fba      	ldr	r2, [r7, #120]	; 0x78
    6990:	4413      	add	r3, r2
    6992:	781b      	ldrb	r3, [r3, #0]
    6994:	041a      	lsls	r2, r3, #16
                                                 | (p[4+len+1] << 8)
    6996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6998:	3305      	adds	r3, #5
    699a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
    699c:	440b      	add	r3, r1
    699e:	781b      	ldrb	r3, [r3, #0]
    69a0:	021b      	lsls	r3, r3, #8
    69a2:	4313      	orrs	r3, r2
                                                 | (p[4+len+0] << 0);
    69a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
    69a6:	3204      	adds	r2, #4
    69a8:	6fb9      	ldr	r1, [r7, #120]	; 0x78
    69aa:	440a      	add	r2, r1
    69ac:	7812      	ldrb	r2, [r2, #0]
    69ae:	4313      	orrs	r3, r2
		
		if (len > 39)
			goto rx_flush;

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
		u32 wire_crc = (p[4+len+2] << 16)
    69b0:	667b      	str	r3, [r7, #100]	; 0x64
                                                 | (p[4+len+1] << 8)
                                                 | (p[4+len+0] << 0);
                if (calc_crc != wire_crc) // skip packets with a bad CRC
    69b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
    69b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    69b6:	429a      	cmp	r2, r3
    69b8:	d000      	beq.n	69bc <bt_stream_freq+0x264>
                        goto rx_flush;
    69ba:	e01c      	b.n	69f6 <bt_stream_freq+0x29e>

		
		if (p[38] == 0x00 && p[39] == 0x3d)
    69bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    69be:	3326      	adds	r3, #38	; 0x26
    69c0:	781b      	ldrb	r3, [r3, #0]
    69c2:	2b00      	cmp	r3, #0
    69c4:	d114      	bne.n	69f0 <bt_stream_freq+0x298>
    69c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    69c8:	3327      	adds	r3, #39	; 0x27
    69ca:	781b      	ldrb	r3, [r3, #0]
    69cc:	2b3d      	cmp	r3, #61	; 0x3d
    69ce:	d10f      	bne.n	69f0 <bt_stream_freq+0x298>
		{
			device_index = p[40];
    69d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    69d2:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    69d6:	4b27      	ldr	r3, [pc, #156]	; (6a74 <bt_stream_freq+0x31c>)
    69d8:	701a      	strb	r2, [r3, #0]
			enqueue_freq (MESSAGE, freq_buf);
    69da:	f107 0334 	add.w	r3, r7, #52	; 0x34
    69de:	2002      	movs	r0, #2
    69e0:	4619      	mov	r1, r3
    69e2:	f7fd fecf 	bl	4784 <enqueue_freq>
			handle_usb(clkn);
    69e6:	4b24      	ldr	r3, [pc, #144]	; (6a78 <bt_stream_freq+0x320>)
    69e8:	681b      	ldr	r3, [r3, #0]
    69ea:	4618      	mov	r0, r3
    69ec:	f002 fdae 	bl	954c <handle_usb>
		}
		RXLED_CLR;
    69f0:	4b13      	ldr	r3, [pc, #76]	; (6a40 <bt_stream_freq+0x2e8>)
    69f2:	2210      	movs	r2, #16
    69f4:	601a      	str	r2, [r3, #0]
	       
	rx_flush:
		cc2400_strobe (SRFOFF);
    69f6:	2064      	movs	r0, #100	; 0x64
    69f8:	f004 f842 	bl	aa80 <cc2400_strobe>
                while ((cc2400_status () & FS_LOCK));
    69fc:	bf00      	nop
    69fe:	f004 f835 	bl	aa6c <cc2400_status>
    6a02:	4603      	mov	r3, r0
    6a04:	f003 0304 	and.w	r3, r3, #4
    6a08:	2b00      	cmp	r3, #0
    6a0a:	d1f8      	bne.n	69fe <bt_stream_freq+0x2a6>

                while (!(cc2400_status () & XOSC16M_STABLE));
    6a0c:	bf00      	nop
    6a0e:	f004 f82d 	bl	aa6c <cc2400_status>
    6a12:	4603      	mov	r3, r0
    6a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6a18:	2b00      	cmp	r3, #0
    6a1a:	d0f8      	beq.n	6a0e <bt_stream_freq+0x2b6>

                cc2400_strobe (SFSON);
    6a1c:	2061      	movs	r0, #97	; 0x61
    6a1e:	f004 f82f 	bl	aa80 <cc2400_strobe>
                while (!(cc2400_status () & FS_LOCK));
    6a22:	bf00      	nop
    6a24:	f004 f822 	bl	aa6c <cc2400_status>
    6a28:	4603      	mov	r3, r0
    6a2a:	f003 0304 	and.w	r3, r3, #4
    6a2e:	2b00      	cmp	r3, #0
    6a30:	d0f8      	beq.n	6a24 <bt_stream_freq+0x2cc>

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6a32:	4a0d      	ldr	r2, [pc, #52]	; (6a68 <bt_stream_freq+0x310>)
    6a34:	4b0c      	ldr	r3, [pc, #48]	; (6a68 <bt_stream_freq+0x310>)
    6a36:	681b      	ldr	r3, [r3, #0]
    6a38:	f023 0301 	bic.w	r3, r3, #1
    6a3c:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    6a3e:	e021      	b.n	6a84 <bt_stream_freq+0x32c>
    6a40:	2009c03c 	.word	0x2009c03c
    6a44:	8e89bed6 	.word	0x8e89bed6
    6a48:	2009c058 	.word	0x2009c058
    6a4c:	1000049c 	.word	0x1000049c
    6a50:	10000b00 	.word	0x10000b00
    6a54:	2009c038 	.word	0x2009c038
    6a58:	100010bc 	.word	0x100010bc
    6a5c:	10000a48 	.word	0x10000a48
    6a60:	10000458 	.word	0x10000458
    6a64:	50004110 	.word	0x50004110
    6a68:	40030024 	.word	0x40030024
    6a6c:	0000c704 	.word	0x0000c704
    6a70:	10001088 	.word	0x10001088
    6a74:	10000be8 	.word	0x10000be8
    6a78:	10000be4 	.word	0x10000be4
                        u8 tmp = (u8)DIO_SSP_DR;
    6a7c:	4b0f      	ldr	r3, [pc, #60]	; (6abc <bt_stream_freq+0x364>)
    6a7e:	681b      	ldr	r3, [r3, #0]
    6a80:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

                cc2400_strobe (SFSON);
                while (!(cc2400_status () & FS_LOCK));

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    6a84:	4b0e      	ldr	r3, [pc, #56]	; (6ac0 <bt_stream_freq+0x368>)
    6a86:	681b      	ldr	r3, [r3, #0]
    6a88:	f003 0304 	and.w	r3, r3, #4
    6a8c:	2b00      	cmp	r3, #0
    6a8e:	d1f5      	bne.n	6a7c <bt_stream_freq+0x324>
                        u8 tmp = (u8)DIO_SSP_DR;
                }
		dma_init_le();
    6a90:	f7fe ff6e 	bl	5970 <dma_init_le>
		dio_ssp_start();
    6a94:	f7ff f8dc 	bl	5c50 <dio_ssp_start>
		
                cc2400_strobe (SRX);
    6a98:	2062      	movs	r0, #98	; 0x62
    6a9a:	f003 fff1 	bl	aa80 <cc2400_strobe>
		rx_tc = 0;
    6a9e:	4b09      	ldr	r3, [pc, #36]	; (6ac4 <bt_stream_freq+0x36c>)
    6aa0:	2200      	movs	r2, #0
    6aa2:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6aa4:	4b08      	ldr	r3, [pc, #32]	; (6ac8 <bt_stream_freq+0x370>)
    6aa6:	2200      	movs	r2, #0
    6aa8:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
//	cc2400_rx();
	while (requested_mode == MODE_RX_FREQ) {
    6aaa:	4b08      	ldr	r3, [pc, #32]	; (6acc <bt_stream_freq+0x374>)
    6aac:	781b      	ldrb	r3, [r3, #0]
    6aae:	b2db      	uxtb	r3, r3
    6ab0:	2b0e      	cmp	r3, #14
    6ab2:	f43f aeb5 	beq.w	6820 <bt_stream_freq+0xc8>
	 
	
	}
//	dio_ssp_stop ();
//	cs_trigger_disable ();
}
    6ab6:	3784      	adds	r7, #132	; 0x84
    6ab8:	46bd      	mov	sp, r7
    6aba:	bd90      	pop	{r4, r7, pc}
    6abc:	40030008 	.word	0x40030008
    6ac0:	4003000c 	.word	0x4003000c
    6ac4:	10000b00 	.word	0x10000b00
    6ac8:	100010bc 	.word	0x100010bc
    6acc:	10000a3f 	.word	0x10000a3f

00006ad0 <bt_stream_legacy>:


// wpson
void bt_stream_legacy()
{
    6ad0:	b590      	push	{r4, r7, lr}
    6ad2:	b0a3      	sub	sp, #140	; 0x8c
    6ad4:	af00      	add	r7, sp, #0
//	TXLED_SET;
	RXLED_CLR;
    6ad6:	4bc0      	ldr	r3, [pc, #768]	; (6dd8 <bt_stream_legacy+0x308>)
    6ad8:	2210      	movs	r2, #16
    6ada:	601a      	str	r2, [r3, #0]
	int i;
	
	u8 rssi_buf[DMA_SIZE];
	queue_init();
    6adc:	f002 fc96 	bl	940c <queue_init>
	dio_ssp_init();
    6ae0:	f003 fe3a 	bl	a758 <dio_ssp_init>
	dma_init_le();
    6ae4:	f7fe ff44 	bl	5970 <dma_init_le>
	dio_ssp_start();
    6ae8:	f7ff f8b2 	bl	5c50 <dio_ssp_start>
	
	cc2400_set(MANAND, 0x7fff);
    6aec:	200d      	movs	r0, #13
    6aee:	f647 71ff 	movw	r1, #32767	; 0x7fff
    6af2:	f003 ff03 	bl	a8fc <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    6af6:	2012      	movs	r0, #18
    6af8:	f642 3122 	movw	r1, #11042	; 0x2b22
    6afc:	f003 fefe 	bl	a8fc <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    6b00:	2014      	movs	r0, #20
    6b02:	f241 214b 	movw	r1, #4683	; 0x124b
    6b06:	f003 fef9 	bl	a8fc <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    6b0a:	2020      	movs	r0, #32
    6b0c:	f240 5161 	movw	r1, #1377	; 0x561
    6b10:	f003 fef4 	bl	a8fc <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    6b14:	2003      	movs	r0, #3
    6b16:	2140      	movs	r1, #64	; 0x40
    6b18:	f003 fef0 	bl	a8fc <cc2400_set>

//	cc2400_set(SYNCH, 0xf9ae);
//	cc2400_set(SYNCL, 0x1584);
	
	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
    6b1c:	48af      	ldr	r0, [pc, #700]	; (6ddc <bt_stream_legacy+0x30c>)
    6b1e:	f003 fd1b 	bl	a558 <rbit>
    6b22:	4603      	mov	r3, r0
    6b24:	b29b      	uxth	r3, r3
    6b26:	202c      	movs	r0, #44	; 0x2c
    6b28:	4619      	mov	r1, r3
    6b2a:	f003 fee7 	bl	a8fc <cc2400_set>
	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
    6b2e:	48ab      	ldr	r0, [pc, #684]	; (6ddc <bt_stream_legacy+0x30c>)
    6b30:	f003 fd12 	bl	a558 <rbit>
    6b34:	4603      	mov	r3, r0
    6b36:	0c1b      	lsrs	r3, r3, #16
    6b38:	b29b      	uxth	r3, r3
    6b3a:	202d      	movs	r0, #45	; 0x2d
    6b3c:	4619      	mov	r1, r3
    6b3e:	f003 fedd 	bl	a8fc <cc2400_set>
	
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6b42:	4ba7      	ldr	r3, [pc, #668]	; (6de0 <bt_stream_legacy+0x310>)
    6b44:	2280      	movs	r2, #128	; 0x80
    6b46:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif

	while (!(cc2400_status() & XOSC16M_STABLE));
    6b48:	bf00      	nop
    6b4a:	f003 ff8f 	bl	aa6c <cc2400_status>
    6b4e:	4603      	mov	r3, r0
    6b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6b54:	2b00      	cmp	r3, #0
    6b56:	d0f8      	beq.n	6b4a <bt_stream_legacy+0x7a>
	while ((cc2400_status() & FS_LOCK));
    6b58:	bf00      	nop
    6b5a:	f003 ff87 	bl	aa6c <cc2400_status>
    6b5e:	4603      	mov	r3, r0
    6b60:	f003 0304 	and.w	r3, r3, #4
    6b64:	2b00      	cmp	r3, #0
    6b66:	d1f8      	bne.n	6b5a <bt_stream_legacy+0x8a>

	cc2400_set(FSDIV, channel - 1);
    6b68:	4b9e      	ldr	r3, [pc, #632]	; (6de4 <bt_stream_legacy+0x314>)
    6b6a:	881b      	ldrh	r3, [r3, #0]
    6b6c:	b29b      	uxth	r3, r3
    6b6e:	3b01      	subs	r3, #1
    6b70:	b29b      	uxth	r3, r3
    6b72:	2002      	movs	r0, #2
    6b74:	4619      	mov	r1, r3
    6b76:	f003 fec1 	bl	a8fc <cc2400_set>
	cc2400_strobe(SFSON);
    6b7a:	2061      	movs	r0, #97	; 0x61
    6b7c:	f003 ff80 	bl	aa80 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6b80:	bf00      	nop
    6b82:	f003 ff73 	bl	aa6c <cc2400_status>
    6b86:	4603      	mov	r3, r0
    6b88:	f003 0304 	and.w	r3, r3, #4
    6b8c:	2b00      	cmp	r3, #0
    6b8e:	d0f8      	beq.n	6b82 <bt_stream_legacy+0xb2>
	cc2400_strobe(SRX);
    6b90:	2062      	movs	r0, #98	; 0x62
    6b92:	f003 ff75 	bl	aa80 <cc2400_strobe>
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    6b96:	e156      	b.n	6e46 <bt_stream_legacy+0x376>
		
		while (!(cc2400_status () & SYNC_RECEIVED));
    6b98:	bf00      	nop
    6b9a:	f003 ff67 	bl	aa6c <cc2400_status>
    6b9e:	4603      	mov	r3, r0
    6ba0:	f003 0310 	and.w	r3, r3, #16
    6ba4:	2b00      	cmp	r3, #0
    6ba6:	d0f8      	beq.n	6b9a <bt_stream_legacy+0xca>
                else
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
    6ba8:	4b8f      	ldr	r3, [pc, #572]	; (6de8 <bt_stream_legacy+0x318>)
    6baa:	2200      	movs	r2, #0
    6bac:	601a      	str	r2, [r3, #0]
		rssi_count = 5;
    6bae:	4b8f      	ldr	r3, [pc, #572]	; (6dec <bt_stream_legacy+0x31c>)
    6bb0:	2205      	movs	r2, #5
    6bb2:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < rssi_count; i++)
    6bb4:	2300      	movs	r3, #0
    6bb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    6bba:	e011      	b.n	6be0 <bt_stream_legacy+0x110>
		{
			rssi_sum += (int8_t)(cc2400_get(RSSI) >> 8);
    6bbc:	2006      	movs	r0, #6
    6bbe:	f003 fe87 	bl	a8d0 <cc2400_get>
    6bc2:	4603      	mov	r3, r0
    6bc4:	0a1b      	lsrs	r3, r3, #8
    6bc6:	b29b      	uxth	r3, r3
    6bc8:	b2db      	uxtb	r3, r3
    6bca:	b25a      	sxtb	r2, r3
    6bcc:	4b86      	ldr	r3, [pc, #536]	; (6de8 <bt_stream_legacy+0x318>)
    6bce:	681b      	ldr	r3, [r3, #0]
    6bd0:	4413      	add	r3, r2
    6bd2:	4a85      	ldr	r2, [pc, #532]	; (6de8 <bt_stream_legacy+0x318>)
    6bd4:	6013      	str	r3, [r2, #0]
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
		rssi_count = 5;
		for (i = 0; i < rssi_count; i++)
    6bd6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6bda:	3301      	adds	r3, #1
    6bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    6be0:	4b82      	ldr	r3, [pc, #520]	; (6dec <bt_stream_legacy+0x31c>)
    6be2:	781b      	ldrb	r3, [r3, #0]
    6be4:	461a      	mov	r2, r3
    6be6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6bea:	429a      	cmp	r2, r3
    6bec:	dce6      	bgt.n	6bbc <bt_stream_legacy+0xec>
		{
			rssi_sum += (int8_t)(cc2400_get(RSSI) >> 8);
		}
	
		while (!rx_tc);
    6bee:	bf00      	nop
    6bf0:	4b7f      	ldr	r3, [pc, #508]	; (6df0 <bt_stream_legacy+0x320>)
    6bf2:	681b      	ldr	r3, [r3, #0]
    6bf4:	2b00      	cmp	r3, #0
    6bf6:	d0fb      	beq.n	6bf0 <bt_stream_legacy+0x120>
	
		RXLED_SET;
    6bf8:	4b7e      	ldr	r3, [pc, #504]	; (6df4 <bt_stream_legacy+0x324>)
    6bfa:	2210      	movs	r2, #16
    6bfc:	601a      	str	r2, [r3, #0]
		if (rx_err) {
    6bfe:	4b7e      	ldr	r3, [pc, #504]	; (6df8 <bt_stream_legacy+0x328>)
    6c00:	681b      	ldr	r3, [r3, #0]
    6c02:	2b00      	cmp	r3, #0
    6c04:	d007      	beq.n	6c16 <bt_stream_legacy+0x146>
		status |= DMA_ERROR;
    6c06:	4b7d      	ldr	r3, [pc, #500]	; (6dfc <bt_stream_legacy+0x32c>)
    6c08:	781b      	ldrb	r3, [r3, #0]
    6c0a:	b2db      	uxtb	r3, r3
    6c0c:	f043 0302 	orr.w	r3, r3, #2
    6c10:	b2da      	uxtb	r2, r3
    6c12:	4b7a      	ldr	r3, [pc, #488]	; (6dfc <bt_stream_legacy+0x32c>)
    6c14:	701a      	strb	r2, [r3, #0]
		}	
		if (rx_tc > 1)
    6c16:	4b76      	ldr	r3, [pc, #472]	; (6df0 <bt_stream_legacy+0x320>)
    6c18:	681b      	ldr	r3, [r3, #0]
    6c1a:	2b01      	cmp	r3, #1
    6c1c:	d907      	bls.n	6c2e <bt_stream_legacy+0x15e>
			status |= DMA_OVERFLOW;
    6c1e:	4b77      	ldr	r3, [pc, #476]	; (6dfc <bt_stream_legacy+0x32c>)
    6c20:	781b      	ldrb	r3, [r3, #0]
    6c22:	b2db      	uxtb	r3, r3
    6c24:	f043 0301 	orr.w	r3, r3, #1
    6c28:	b2da      	uxtb	r2, r3
    6c2a:	4b74      	ldr	r3, [pc, #464]	; (6dfc <bt_stream_legacy+0x32c>)
    6c2c:	701a      	strb	r2, [r3, #0]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    6c2e:	1d3b      	adds	r3, r7, #4
    6c30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		packet[0] = le.access_address;
    6c34:	4b72      	ldr	r3, [pc, #456]	; (6e00 <bt_stream_legacy+0x330>)
    6c36:	681b      	ldr	r3, [r3, #0]
    6c38:	607b      	str	r3, [r7, #4]

                while (DMACC0Config & DMACCxConfig_E && rx_err == 0);
    6c3a:	bf00      	nop
    6c3c:	4b71      	ldr	r3, [pc, #452]	; (6e04 <bt_stream_legacy+0x334>)
    6c3e:	681b      	ldr	r3, [r3, #0]
    6c40:	f003 0301 	and.w	r3, r3, #1
    6c44:	2b00      	cmp	r3, #0
    6c46:	d003      	beq.n	6c50 <bt_stream_legacy+0x180>
    6c48:	4b6b      	ldr	r3, [pc, #428]	; (6df8 <bt_stream_legacy+0x328>)
    6c4a:	681b      	ldr	r3, [r3, #0]
    6c4c:	2b00      	cmp	r3, #0
    6c4e:	d0f5      	beq.n	6c3c <bt_stream_legacy+0x16c>
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6c50:	4a6d      	ldr	r2, [pc, #436]	; (6e08 <bt_stream_legacy+0x338>)
    6c52:	4b6d      	ldr	r3, [pc, #436]	; (6e08 <bt_stream_legacy+0x338>)
    6c54:	681b      	ldr	r3, [r3, #0]
    6c56:	f023 0301 	bic.w	r3, r3, #1
    6c5a:	6013      	str	r3, [r2, #0]
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    6c5c:	4b61      	ldr	r3, [pc, #388]	; (6de4 <bt_stream_legacy+0x314>)
    6c5e:	881b      	ldrh	r3, [r3, #0]
    6c60:	b29b      	uxth	r3, r3
    6c62:	b2db      	uxtb	r3, r3
    6c64:	3b62      	subs	r3, #98	; 0x62
    6c66:	b2db      	uxtb	r3, r3
    6c68:	4618      	mov	r0, r3
    6c6a:	f002 fa4f 	bl	910c <btle_channel_index>
    6c6e:	4603      	mov	r3, r0
    6c70:	461a      	mov	r2, r3
    6c72:	4613      	mov	r3, r2
    6c74:	005b      	lsls	r3, r3, #1
    6c76:	4413      	add	r3, r2
    6c78:	011b      	lsls	r3, r3, #4
    6c7a:	4a64      	ldr	r2, [pc, #400]	; (6e0c <bt_stream_legacy+0x33c>)
    6c7c:	4413      	add	r3, r2
    6c7e:	67fb      	str	r3, [r7, #124]	; 0x7c
		for (i = 0; i < 44; i += 4) {
    6c80:	2300      	movs	r3, #0
    6c82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    6c86:	e03c      	b.n	6d02 <bt_stream_legacy+0x232>
			uint32_t v = rxbuf1[i+0] << 24
    6c88:	4a61      	ldr	r2, [pc, #388]	; (6e10 <bt_stream_legacy+0x340>)
    6c8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6c8e:	4413      	add	r3, r2
    6c90:	781b      	ldrb	r3, [r3, #0]
    6c92:	061a      	lsls	r2, r3, #24
                                          | rxbuf1[i+1] << 16
    6c94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6c98:	3301      	adds	r3, #1
    6c9a:	495d      	ldr	r1, [pc, #372]	; (6e10 <bt_stream_legacy+0x340>)
    6c9c:	5ccb      	ldrb	r3, [r1, r3]
    6c9e:	041b      	lsls	r3, r3, #16
    6ca0:	431a      	orrs	r2, r3
                                      | rxbuf1[i+2] << 8
    6ca2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6ca6:	3302      	adds	r3, #2
    6ca8:	4959      	ldr	r1, [pc, #356]	; (6e10 <bt_stream_legacy+0x340>)
    6caa:	5ccb      	ldrb	r3, [r1, r3]
    6cac:	021b      	lsls	r3, r3, #8
    6cae:	4313      	orrs	r3, r2
                                          | rxbuf1[i+3] << 0;
    6cb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    6cb4:	3203      	adds	r2, #3
    6cb6:	4956      	ldr	r1, [pc, #344]	; (6e10 <bt_stream_legacy+0x340>)
    6cb8:	5c8a      	ldrb	r2, [r1, r2]
    6cba:	4313      	orrs	r3, r2
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6cbc:	67bb      	str	r3, [r7, #120]	; 0x78
                                          | rxbuf1[i+1] << 16
                                      | rxbuf1[i+2] << 8
                                          | rxbuf1[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
    6cbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6cc2:	2b00      	cmp	r3, #0
    6cc4:	da00      	bge.n	6cc8 <bt_stream_legacy+0x1f8>
    6cc6:	3303      	adds	r3, #3
    6cc8:	109b      	asrs	r3, r3, #2
    6cca:	1c5c      	adds	r4, r3, #1
    6ccc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
    6cce:	f003 fc43 	bl	a558 <rbit>
    6cd2:	4601      	mov	r1, r0
    6cd4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6cd8:	2b00      	cmp	r3, #0
    6cda:	da00      	bge.n	6cde <bt_stream_legacy+0x20e>
    6cdc:	3303      	adds	r3, #3
    6cde:	109b      	asrs	r3, r3, #2
    6ce0:	009b      	lsls	r3, r3, #2
    6ce2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    6ce4:	4413      	add	r3, r2
    6ce6:	681b      	ldr	r3, [r3, #0]
    6ce8:	ea81 0203 	eor.w	r2, r1, r3
    6cec:	00a3      	lsls	r3, r4, #2
    6cee:	f107 0188 	add.w	r1, r7, #136	; 0x88
    6cf2:	440b      	add	r3, r1
    6cf4:	f843 2c84 	str.w	r2, [r3, #-132]
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
    6cf8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6cfc:	3304      	adds	r3, #4
    6cfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    6d02:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6d06:	2b2b      	cmp	r3, #43	; 0x2b
    6d08:	ddbe      	ble.n	6c88 <bt_stream_legacy+0x1b8>
                                      | eddystone[i+2] << 8
                                          | eddystone[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
		}
*/
		unsigned len = (p[5] & 0x3f) + 2;
    6d0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    6d0e:	3305      	adds	r3, #5
    6d10:	781b      	ldrb	r3, [r3, #0]
    6d12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6d16:	3302      	adds	r3, #2
    6d18:	677b      	str	r3, [r7, #116]	; 0x74
		
		if (len > 39)
    6d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    6d1c:	2b27      	cmp	r3, #39	; 0x27
    6d1e:	d900      	bls.n	6d22 <bt_stream_legacy+0x252>
			goto rx_flush;
    6d20:	e034      	b.n	6d8c <bt_stream_legacy+0x2bc>

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    6d22:	4b37      	ldr	r3, [pc, #220]	; (6e00 <bt_stream_legacy+0x330>)
    6d24:	68d9      	ldr	r1, [r3, #12]
    6d26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    6d2a:	1d1a      	adds	r2, r3, #4
    6d2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    6d2e:	4608      	mov	r0, r1
    6d30:	4611      	mov	r1, r2
    6d32:	461a      	mov	r2, r3
    6d34:	f002 faee 	bl	9314 <btle_crcgen_lut>
    6d38:	6738      	str	r0, [r7, #112]	; 0x70
		u32 wire_crc = (p[4+len+2] << 16)
    6d3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    6d3c:	3306      	adds	r3, #6
    6d3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    6d42:	4413      	add	r3, r2
    6d44:	781b      	ldrb	r3, [r3, #0]
    6d46:	041a      	lsls	r2, r3, #16
                                                 | (p[4+len+1] << 8)
    6d48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    6d4a:	3305      	adds	r3, #5
    6d4c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    6d50:	440b      	add	r3, r1
    6d52:	781b      	ldrb	r3, [r3, #0]
    6d54:	021b      	lsls	r3, r3, #8
    6d56:	4313      	orrs	r3, r2
                                                 | (p[4+len+0] << 0);
    6d58:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    6d5a:	3204      	adds	r2, #4
    6d5c:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    6d60:	440a      	add	r2, r1
    6d62:	7812      	ldrb	r2, [r2, #0]
    6d64:	4313      	orrs	r3, r2
		
		if (len > 39)
			goto rx_flush;

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
		u32 wire_crc = (p[4+len+2] << 16)
    6d66:	66fb      	str	r3, [r7, #108]	; 0x6c
                                                 | (p[4+len+1] << 8)
                                                 | (p[4+len+0] << 0);
                if (calc_crc != wire_crc) // skip packets with a bad CRC
    6d68:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    6d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    6d6c:	429a      	cmp	r2, r3
    6d6e:	d000      	beq.n	6d72 <bt_stream_legacy+0x2a2>
                        goto rx_flush;
    6d70:	e00c      	b.n	6d8c <bt_stream_legacy+0x2bc>


		enqueue_legacy (BR_PACKET, (uint8_t*)packet);
    6d72:	1d3b      	adds	r3, r7, #4
    6d74:	2000      	movs	r0, #0
    6d76:	4619      	mov	r1, r3
    6d78:	f7fd fc70 	bl	465c <enqueue_legacy>
//		enqueue (BR_PACKET, (uint8_t*)rxbuf1);
		handle_usb(clkn);
    6d7c:	4b25      	ldr	r3, [pc, #148]	; (6e14 <bt_stream_legacy+0x344>)
    6d7e:	681b      	ldr	r3, [r3, #0]
    6d80:	4618      	mov	r0, r3
    6d82:	f002 fbe3 	bl	954c <handle_usb>
//		enqueue (MESSAGE, rssi_buf);
//		handle_usb(clkn);
		RXLED_CLR;
    6d86:	4b14      	ldr	r3, [pc, #80]	; (6dd8 <bt_stream_legacy+0x308>)
    6d88:	2210      	movs	r2, #16
    6d8a:	601a      	str	r2, [r3, #0]
	       
	rx_flush:
		cc2400_strobe (SRFOFF);
    6d8c:	2064      	movs	r0, #100	; 0x64
    6d8e:	f003 fe77 	bl	aa80 <cc2400_strobe>
                while ((cc2400_status () & FS_LOCK));
    6d92:	bf00      	nop
    6d94:	f003 fe6a 	bl	aa6c <cc2400_status>
    6d98:	4603      	mov	r3, r0
    6d9a:	f003 0304 	and.w	r3, r3, #4
    6d9e:	2b00      	cmp	r3, #0
    6da0:	d1f8      	bne.n	6d94 <bt_stream_legacy+0x2c4>

                while (!(cc2400_status () & XOSC16M_STABLE));
    6da2:	bf00      	nop
    6da4:	f003 fe62 	bl	aa6c <cc2400_status>
    6da8:	4603      	mov	r3, r0
    6daa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6dae:	2b00      	cmp	r3, #0
    6db0:	d0f8      	beq.n	6da4 <bt_stream_legacy+0x2d4>

                cc2400_strobe (SFSON);
    6db2:	2061      	movs	r0, #97	; 0x61
    6db4:	f003 fe64 	bl	aa80 <cc2400_strobe>
                while (!(cc2400_status () & FS_LOCK));
    6db8:	bf00      	nop
    6dba:	f003 fe57 	bl	aa6c <cc2400_status>
    6dbe:	4603      	mov	r3, r0
    6dc0:	f003 0304 	and.w	r3, r3, #4
    6dc4:	2b00      	cmp	r3, #0
    6dc6:	d0f8      	beq.n	6dba <bt_stream_legacy+0x2ea>

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6dc8:	4a0f      	ldr	r2, [pc, #60]	; (6e08 <bt_stream_legacy+0x338>)
    6dca:	4b0f      	ldr	r3, [pc, #60]	; (6e08 <bt_stream_legacy+0x338>)
    6dcc:	681b      	ldr	r3, [r3, #0]
    6dce:	f023 0301 	bic.w	r3, r3, #1
    6dd2:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    6dd4:	e024      	b.n	6e20 <bt_stream_legacy+0x350>
    6dd6:	bf00      	nop
    6dd8:	2009c03c 	.word	0x2009c03c
    6ddc:	8e89bed6 	.word	0x8e89bed6
    6de0:	2009c058 	.word	0x2009c058
    6de4:	1000049c 	.word	0x1000049c
    6de8:	10000a4c 	.word	0x10000a4c
    6dec:	10000a49 	.word	0x10000a49
    6df0:	10000b00 	.word	0x10000b00
    6df4:	2009c038 	.word	0x2009c038
    6df8:	100010bc 	.word	0x100010bc
    6dfc:	10000a48 	.word	0x10000a48
    6e00:	10000458 	.word	0x10000458
    6e04:	50004110 	.word	0x50004110
    6e08:	40030024 	.word	0x40030024
    6e0c:	0000c704 	.word	0x0000c704
    6e10:	10001088 	.word	0x10001088
    6e14:	10000be4 	.word	0x10000be4
                        u8 tmp = (u8)DIO_SSP_DR;
    6e18:	4b11      	ldr	r3, [pc, #68]	; (6e60 <bt_stream_legacy+0x390>)
    6e1a:	681b      	ldr	r3, [r3, #0]
    6e1c:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                cc2400_strobe (SFSON);
                while (!(cc2400_status () & FS_LOCK));

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    6e20:	4b10      	ldr	r3, [pc, #64]	; (6e64 <bt_stream_legacy+0x394>)
    6e22:	681b      	ldr	r3, [r3, #0]
    6e24:	f003 0304 	and.w	r3, r3, #4
    6e28:	2b00      	cmp	r3, #0
    6e2a:	d1f5      	bne.n	6e18 <bt_stream_legacy+0x348>
                        u8 tmp = (u8)DIO_SSP_DR;
                }
		dma_init_le();
    6e2c:	f7fe fda0 	bl	5970 <dma_init_le>
		dio_ssp_start();
    6e30:	f7fe ff0e 	bl	5c50 <dio_ssp_start>
		
//              msleep(500);    
                cc2400_strobe (SRX);
    6e34:	2062      	movs	r0, #98	; 0x62
    6e36:	f003 fe23 	bl	aa80 <cc2400_strobe>
		rx_tc = 0;
    6e3a:	4b0b      	ldr	r3, [pc, #44]	; (6e68 <bt_stream_legacy+0x398>)
    6e3c:	2200      	movs	r2, #0
    6e3e:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6e40:	4b0a      	ldr	r3, [pc, #40]	; (6e6c <bt_stream_legacy+0x39c>)
    6e42:	2200      	movs	r2, #0
    6e44:	601a      	str	r2, [r3, #0]
	cc2400_set(FSDIV, channel - 1);
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    6e46:	4b0a      	ldr	r3, [pc, #40]	; (6e70 <bt_stream_legacy+0x3a0>)
    6e48:	781b      	ldrb	r3, [r3, #0]
    6e4a:	b2db      	uxtb	r3, r3
    6e4c:	2b01      	cmp	r3, #1
    6e4e:	f43f aea3 	beq.w	6b98 <bt_stream_legacy+0xc8>
		rx_tc = 0;
		rx_err = 0;
	 
	
	}
	dio_ssp_stop ();
    6e52:	f7fe ff2d 	bl	5cb0 <dio_ssp_stop>
	cs_trigger_disable ();
    6e56:	f7fd fe09 	bl	4a6c <cs_trigger_disable>
}
    6e5a:	378c      	adds	r7, #140	; 0x8c
    6e5c:	46bd      	mov	sp, r7
    6e5e:	bd90      	pop	{r4, r7, pc}
    6e60:	40030008 	.word	0x40030008
    6e64:	4003000c 	.word	0x4003000c
    6e68:	10000b00 	.word	0x10000b00
    6e6c:	100010bc 	.word	0x100010bc
    6e70:	10000a3f 	.word	0x10000a3f

00006e74 <bt_stream_rx>:



// wpson
void bt_stream_rx()
{
    6e74:	b590      	push	{r4, r7, lr}
    6e76:	b0a3      	sub	sp, #140	; 0x8c
    6e78:	af00      	add	r7, sp, #0
//	TXLED_SET;
	RXLED_CLR;
    6e7a:	4bc0      	ldr	r3, [pc, #768]	; (717c <bt_stream_rx+0x308>)
    6e7c:	2210      	movs	r2, #16
    6e7e:	601a      	str	r2, [r3, #0]
	int i;
	
	u8 rssi_buf[DMA_SIZE];
	queue_init();
    6e80:	f002 fac4 	bl	940c <queue_init>
	dio_ssp_init();
    6e84:	f003 fc68 	bl	a758 <dio_ssp_init>
	dma_init_le();
    6e88:	f7fe fd72 	bl	5970 <dma_init_le>
	dio_ssp_start();
    6e8c:	f7fe fee0 	bl	5c50 <dio_ssp_start>
	
	cc2400_set(MANAND, 0x7fff);
    6e90:	200d      	movs	r0, #13
    6e92:	f647 71ff 	movw	r1, #32767	; 0x7fff
    6e96:	f003 fd31 	bl	a8fc <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    6e9a:	2012      	movs	r0, #18
    6e9c:	f642 3122 	movw	r1, #11042	; 0x2b22
    6ea0:	f003 fd2c 	bl	a8fc <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    6ea4:	2014      	movs	r0, #20
    6ea6:	f241 214b 	movw	r1, #4683	; 0x124b
    6eaa:	f003 fd27 	bl	a8fc <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    6eae:	2020      	movs	r0, #32
    6eb0:	f240 5161 	movw	r1, #1377	; 0x561
    6eb4:	f003 fd22 	bl	a8fc <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    6eb8:	2003      	movs	r0, #3
    6eba:	2140      	movs	r1, #64	; 0x40
    6ebc:	f003 fd1e 	bl	a8fc <cc2400_set>

//	cc2400_set(SYNCH, 0xf9ae);
//	cc2400_set(SYNCL, 0x1584);
	
	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
    6ec0:	48af      	ldr	r0, [pc, #700]	; (7180 <bt_stream_rx+0x30c>)
    6ec2:	f003 fb49 	bl	a558 <rbit>
    6ec6:	4603      	mov	r3, r0
    6ec8:	b29b      	uxth	r3, r3
    6eca:	202c      	movs	r0, #44	; 0x2c
    6ecc:	4619      	mov	r1, r3
    6ece:	f003 fd15 	bl	a8fc <cc2400_set>
	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
    6ed2:	48ab      	ldr	r0, [pc, #684]	; (7180 <bt_stream_rx+0x30c>)
    6ed4:	f003 fb40 	bl	a558 <rbit>
    6ed8:	4603      	mov	r3, r0
    6eda:	0c1b      	lsrs	r3, r3, #16
    6edc:	b29b      	uxth	r3, r3
    6ede:	202d      	movs	r0, #45	; 0x2d
    6ee0:	4619      	mov	r1, r3
    6ee2:	f003 fd0b 	bl	a8fc <cc2400_set>
	
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6ee6:	4ba7      	ldr	r3, [pc, #668]	; (7184 <bt_stream_rx+0x310>)
    6ee8:	2280      	movs	r2, #128	; 0x80
    6eea:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif

	while (!(cc2400_status() & XOSC16M_STABLE));
    6eec:	bf00      	nop
    6eee:	f003 fdbd 	bl	aa6c <cc2400_status>
    6ef2:	4603      	mov	r3, r0
    6ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    6ef8:	2b00      	cmp	r3, #0
    6efa:	d0f8      	beq.n	6eee <bt_stream_rx+0x7a>
	while ((cc2400_status() & FS_LOCK));
    6efc:	bf00      	nop
    6efe:	f003 fdb5 	bl	aa6c <cc2400_status>
    6f02:	4603      	mov	r3, r0
    6f04:	f003 0304 	and.w	r3, r3, #4
    6f08:	2b00      	cmp	r3, #0
    6f0a:	d1f8      	bne.n	6efe <bt_stream_rx+0x8a>

	cc2400_set(FSDIV, channel - 1);
    6f0c:	4b9e      	ldr	r3, [pc, #632]	; (7188 <bt_stream_rx+0x314>)
    6f0e:	881b      	ldrh	r3, [r3, #0]
    6f10:	b29b      	uxth	r3, r3
    6f12:	3b01      	subs	r3, #1
    6f14:	b29b      	uxth	r3, r3
    6f16:	2002      	movs	r0, #2
    6f18:	4619      	mov	r1, r3
    6f1a:	f003 fcef 	bl	a8fc <cc2400_set>
	cc2400_strobe(SFSON);
    6f1e:	2061      	movs	r0, #97	; 0x61
    6f20:	f003 fdae 	bl	aa80 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6f24:	bf00      	nop
    6f26:	f003 fda1 	bl	aa6c <cc2400_status>
    6f2a:	4603      	mov	r3, r0
    6f2c:	f003 0304 	and.w	r3, r3, #4
    6f30:	2b00      	cmp	r3, #0
    6f32:	d0f8      	beq.n	6f26 <bt_stream_rx+0xb2>
	cc2400_strobe(SRX);
    6f34:	2062      	movs	r0, #98	; 0x62
    6f36:	f003 fda3 	bl	aa80 <cc2400_strobe>
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    6f3a:	e156      	b.n	71ea <bt_stream_rx+0x376>
		
		while (!(cc2400_status () & SYNC_RECEIVED));
    6f3c:	bf00      	nop
    6f3e:	f003 fd95 	bl	aa6c <cc2400_status>
    6f42:	4603      	mov	r3, r0
    6f44:	f003 0310 	and.w	r3, r3, #16
    6f48:	2b00      	cmp	r3, #0
    6f4a:	d0f8      	beq.n	6f3e <bt_stream_rx+0xca>
                else
                        out = rssi;
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
    6f4c:	4b8f      	ldr	r3, [pc, #572]	; (718c <bt_stream_rx+0x318>)
    6f4e:	2200      	movs	r2, #0
    6f50:	601a      	str	r2, [r3, #0]
		rssi_count = 5;
    6f52:	4b8f      	ldr	r3, [pc, #572]	; (7190 <bt_stream_rx+0x31c>)
    6f54:	2205      	movs	r2, #5
    6f56:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < rssi_count; i++)
    6f58:	2300      	movs	r3, #0
    6f5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    6f5e:	e011      	b.n	6f84 <bt_stream_rx+0x110>
		{
			rssi_sum += (int8_t)(cc2400_get(RSSI) >> 8);
    6f60:	2006      	movs	r0, #6
    6f62:	f003 fcb5 	bl	a8d0 <cc2400_get>
    6f66:	4603      	mov	r3, r0
    6f68:	0a1b      	lsrs	r3, r3, #8
    6f6a:	b29b      	uxth	r3, r3
    6f6c:	b2db      	uxtb	r3, r3
    6f6e:	b25a      	sxtb	r2, r3
    6f70:	4b86      	ldr	r3, [pc, #536]	; (718c <bt_stream_rx+0x318>)
    6f72:	681b      	ldr	r3, [r3, #0]
    6f74:	4413      	add	r3, r2
    6f76:	4a85      	ldr	r2, [pc, #532]	; (718c <bt_stream_rx+0x318>)
    6f78:	6013      	str	r3, [r2, #0]
                if (out < 0)
		  goto rx_flush;
*/
		rssi_sum = 0;
		rssi_count = 5;
		for (i = 0; i < rssi_count; i++)
    6f7a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6f7e:	3301      	adds	r3, #1
    6f80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    6f84:	4b82      	ldr	r3, [pc, #520]	; (7190 <bt_stream_rx+0x31c>)
    6f86:	781b      	ldrb	r3, [r3, #0]
    6f88:	461a      	mov	r2, r3
    6f8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    6f8e:	429a      	cmp	r2, r3
    6f90:	dce6      	bgt.n	6f60 <bt_stream_rx+0xec>
		{
			rssi_sum += (int8_t)(cc2400_get(RSSI) >> 8);
		}
	
		while (!rx_tc);
    6f92:	bf00      	nop
    6f94:	4b7f      	ldr	r3, [pc, #508]	; (7194 <bt_stream_rx+0x320>)
    6f96:	681b      	ldr	r3, [r3, #0]
    6f98:	2b00      	cmp	r3, #0
    6f9a:	d0fb      	beq.n	6f94 <bt_stream_rx+0x120>
	
		RXLED_SET;
    6f9c:	4b7e      	ldr	r3, [pc, #504]	; (7198 <bt_stream_rx+0x324>)
    6f9e:	2210      	movs	r2, #16
    6fa0:	601a      	str	r2, [r3, #0]
		if (rx_err) {
    6fa2:	4b7e      	ldr	r3, [pc, #504]	; (719c <bt_stream_rx+0x328>)
    6fa4:	681b      	ldr	r3, [r3, #0]
    6fa6:	2b00      	cmp	r3, #0
    6fa8:	d007      	beq.n	6fba <bt_stream_rx+0x146>
		status |= DMA_ERROR;
    6faa:	4b7d      	ldr	r3, [pc, #500]	; (71a0 <bt_stream_rx+0x32c>)
    6fac:	781b      	ldrb	r3, [r3, #0]
    6fae:	b2db      	uxtb	r3, r3
    6fb0:	f043 0302 	orr.w	r3, r3, #2
    6fb4:	b2da      	uxtb	r2, r3
    6fb6:	4b7a      	ldr	r3, [pc, #488]	; (71a0 <bt_stream_rx+0x32c>)
    6fb8:	701a      	strb	r2, [r3, #0]
		}	
		if (rx_tc > 1)
    6fba:	4b76      	ldr	r3, [pc, #472]	; (7194 <bt_stream_rx+0x320>)
    6fbc:	681b      	ldr	r3, [r3, #0]
    6fbe:	2b01      	cmp	r3, #1
    6fc0:	d907      	bls.n	6fd2 <bt_stream_rx+0x15e>
			status |= DMA_OVERFLOW;
    6fc2:	4b77      	ldr	r3, [pc, #476]	; (71a0 <bt_stream_rx+0x32c>)
    6fc4:	781b      	ldrb	r3, [r3, #0]
    6fc6:	b2db      	uxtb	r3, r3
    6fc8:	f043 0301 	orr.w	r3, r3, #1
    6fcc:	b2da      	uxtb	r2, r3
    6fce:	4b74      	ldr	r3, [pc, #464]	; (71a0 <bt_stream_rx+0x32c>)
    6fd0:	701a      	strb	r2, [r3, #0]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    6fd2:	1d3b      	adds	r3, r7, #4
    6fd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
		packet[0] = le.access_address;
    6fd8:	4b72      	ldr	r3, [pc, #456]	; (71a4 <bt_stream_rx+0x330>)
    6fda:	681b      	ldr	r3, [r3, #0]
    6fdc:	607b      	str	r3, [r7, #4]

                while (DMACC0Config & DMACCxConfig_E && rx_err == 0);
    6fde:	bf00      	nop
    6fe0:	4b71      	ldr	r3, [pc, #452]	; (71a8 <bt_stream_rx+0x334>)
    6fe2:	681b      	ldr	r3, [r3, #0]
    6fe4:	f003 0301 	and.w	r3, r3, #1
    6fe8:	2b00      	cmp	r3, #0
    6fea:	d003      	beq.n	6ff4 <bt_stream_rx+0x180>
    6fec:	4b6b      	ldr	r3, [pc, #428]	; (719c <bt_stream_rx+0x328>)
    6fee:	681b      	ldr	r3, [r3, #0]
    6ff0:	2b00      	cmp	r3, #0
    6ff2:	d0f5      	beq.n	6fe0 <bt_stream_rx+0x16c>
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6ff4:	4a6d      	ldr	r2, [pc, #436]	; (71ac <bt_stream_rx+0x338>)
    6ff6:	4b6d      	ldr	r3, [pc, #436]	; (71ac <bt_stream_rx+0x338>)
    6ff8:	681b      	ldr	r3, [r3, #0]
    6ffa:	f023 0301 	bic.w	r3, r3, #1
    6ffe:	6013      	str	r3, [r2, #0]
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    7000:	4b61      	ldr	r3, [pc, #388]	; (7188 <bt_stream_rx+0x314>)
    7002:	881b      	ldrh	r3, [r3, #0]
    7004:	b29b      	uxth	r3, r3
    7006:	b2db      	uxtb	r3, r3
    7008:	3b62      	subs	r3, #98	; 0x62
    700a:	b2db      	uxtb	r3, r3
    700c:	4618      	mov	r0, r3
    700e:	f002 f87d 	bl	910c <btle_channel_index>
    7012:	4603      	mov	r3, r0
    7014:	461a      	mov	r2, r3
    7016:	4613      	mov	r3, r2
    7018:	005b      	lsls	r3, r3, #1
    701a:	4413      	add	r3, r2
    701c:	011b      	lsls	r3, r3, #4
    701e:	4a64      	ldr	r2, [pc, #400]	; (71b0 <bt_stream_rx+0x33c>)
    7020:	4413      	add	r3, r2
    7022:	67fb      	str	r3, [r7, #124]	; 0x7c
		for (i = 0; i < 44; i += 4) {
    7024:	2300      	movs	r3, #0
    7026:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    702a:	e03c      	b.n	70a6 <bt_stream_rx+0x232>
			uint32_t v = rxbuf1[i+0] << 24
    702c:	4a61      	ldr	r2, [pc, #388]	; (71b4 <bt_stream_rx+0x340>)
    702e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    7032:	4413      	add	r3, r2
    7034:	781b      	ldrb	r3, [r3, #0]
    7036:	061a      	lsls	r2, r3, #24
                                          | rxbuf1[i+1] << 16
    7038:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    703c:	3301      	adds	r3, #1
    703e:	495d      	ldr	r1, [pc, #372]	; (71b4 <bt_stream_rx+0x340>)
    7040:	5ccb      	ldrb	r3, [r1, r3]
    7042:	041b      	lsls	r3, r3, #16
    7044:	431a      	orrs	r2, r3
                                      | rxbuf1[i+2] << 8
    7046:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    704a:	3302      	adds	r3, #2
    704c:	4959      	ldr	r1, [pc, #356]	; (71b4 <bt_stream_rx+0x340>)
    704e:	5ccb      	ldrb	r3, [r1, r3]
    7050:	021b      	lsls	r3, r3, #8
    7052:	4313      	orrs	r3, r2
                                          | rxbuf1[i+3] << 0;
    7054:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
    7058:	3203      	adds	r2, #3
    705a:	4956      	ldr	r1, [pc, #344]	; (71b4 <bt_stream_rx+0x340>)
    705c:	5c8a      	ldrb	r2, [r1, r2]
    705e:	4313      	orrs	r3, r2
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    7060:	67bb      	str	r3, [r7, #120]	; 0x78
                                          | rxbuf1[i+1] << 16
                                      | rxbuf1[i+2] << 8
                                          | rxbuf1[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
    7062:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    7066:	2b00      	cmp	r3, #0
    7068:	da00      	bge.n	706c <bt_stream_rx+0x1f8>
    706a:	3303      	adds	r3, #3
    706c:	109b      	asrs	r3, r3, #2
    706e:	1c5c      	adds	r4, r3, #1
    7070:	6fb8      	ldr	r0, [r7, #120]	; 0x78
    7072:	f003 fa71 	bl	a558 <rbit>
    7076:	4601      	mov	r1, r0
    7078:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    707c:	2b00      	cmp	r3, #0
    707e:	da00      	bge.n	7082 <bt_stream_rx+0x20e>
    7080:	3303      	adds	r3, #3
    7082:	109b      	asrs	r3, r3, #2
    7084:	009b      	lsls	r3, r3, #2
    7086:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    7088:	4413      	add	r3, r2
    708a:	681b      	ldr	r3, [r3, #0]
    708c:	ea81 0203 	eor.w	r2, r1, r3
    7090:	00a3      	lsls	r3, r4, #2
    7092:	f107 0188 	add.w	r1, r7, #136	; 0x88
    7096:	440b      	add	r3, r1
    7098:	f843 2c84 	str.w	r2, [r3, #-132]
                
			
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
	
		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 44; i += 4) {
    709c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    70a0:	3304      	adds	r3, #4
    70a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    70a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    70aa:	2b2b      	cmp	r3, #43	; 0x2b
    70ac:	ddbe      	ble.n	702c <bt_stream_rx+0x1b8>
                                      | eddystone[i+2] << 8
                                          | eddystone[i+3] << 0;
                        packet[i/4+1] = rbit(v) ^ whit[i/4];
		}
*/
		unsigned len = (p[5] & 0x3f) + 2;
    70ae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    70b2:	3305      	adds	r3, #5
    70b4:	781b      	ldrb	r3, [r3, #0]
    70b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    70ba:	3302      	adds	r3, #2
    70bc:	677b      	str	r3, [r7, #116]	; 0x74
		
		if (len > 39)
    70be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    70c0:	2b27      	cmp	r3, #39	; 0x27
    70c2:	d900      	bls.n	70c6 <bt_stream_rx+0x252>
			goto rx_flush;
    70c4:	e034      	b.n	7130 <bt_stream_rx+0x2bc>

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    70c6:	4b37      	ldr	r3, [pc, #220]	; (71a4 <bt_stream_rx+0x330>)
    70c8:	68d9      	ldr	r1, [r3, #12]
    70ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    70ce:	1d1a      	adds	r2, r3, #4
    70d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    70d2:	4608      	mov	r0, r1
    70d4:	4611      	mov	r1, r2
    70d6:	461a      	mov	r2, r3
    70d8:	f002 f91c 	bl	9314 <btle_crcgen_lut>
    70dc:	6738      	str	r0, [r7, #112]	; 0x70
		u32 wire_crc = (p[4+len+2] << 16)
    70de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    70e0:	3306      	adds	r3, #6
    70e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    70e6:	4413      	add	r3, r2
    70e8:	781b      	ldrb	r3, [r3, #0]
    70ea:	041a      	lsls	r2, r3, #16
                                                 | (p[4+len+1] << 8)
    70ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    70ee:	3305      	adds	r3, #5
    70f0:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    70f4:	440b      	add	r3, r1
    70f6:	781b      	ldrb	r3, [r3, #0]
    70f8:	021b      	lsls	r3, r3, #8
    70fa:	4313      	orrs	r3, r2
                                                 | (p[4+len+0] << 0);
    70fc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    70fe:	3204      	adds	r2, #4
    7100:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
    7104:	440a      	add	r2, r1
    7106:	7812      	ldrb	r2, [r2, #0]
    7108:	4313      	orrs	r3, r2
		
		if (len > 39)
			goto rx_flush;

		u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
		u32 wire_crc = (p[4+len+2] << 16)
    710a:	66fb      	str	r3, [r7, #108]	; 0x6c
                                                 | (p[4+len+1] << 8)
                                                 | (p[4+len+0] << 0);
                if (calc_crc != wire_crc) // skip packets with a bad CRC
    710c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
    710e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    7110:	429a      	cmp	r2, r3
    7112:	d000      	beq.n	7116 <bt_stream_rx+0x2a2>
                        goto rx_flush;
    7114:	e00c      	b.n	7130 <bt_stream_rx+0x2bc>


		enqueue (BR_PACKET, (uint8_t*)packet);
    7116:	1d3b      	adds	r3, r7, #4
    7118:	2000      	movs	r0, #0
    711a:	4619      	mov	r1, r3
    711c:	f7fd f9d4 	bl	44c8 <enqueue>
//		enqueue (BR_PACKET, (uint8_t*)rxbuf1);
		handle_usb(clkn);
    7120:	4b25      	ldr	r3, [pc, #148]	; (71b8 <bt_stream_rx+0x344>)
    7122:	681b      	ldr	r3, [r3, #0]
    7124:	4618      	mov	r0, r3
    7126:	f002 fa11 	bl	954c <handle_usb>
//		enqueue (MESSAGE, rssi_buf);
//		handle_usb(clkn);
		RXLED_CLR;
    712a:	4b14      	ldr	r3, [pc, #80]	; (717c <bt_stream_rx+0x308>)
    712c:	2210      	movs	r2, #16
    712e:	601a      	str	r2, [r3, #0]
	       
	rx_flush:
		cc2400_strobe (SRFOFF);
    7130:	2064      	movs	r0, #100	; 0x64
    7132:	f003 fca5 	bl	aa80 <cc2400_strobe>
                while ((cc2400_status () & FS_LOCK));
    7136:	bf00      	nop
    7138:	f003 fc98 	bl	aa6c <cc2400_status>
    713c:	4603      	mov	r3, r0
    713e:	f003 0304 	and.w	r3, r3, #4
    7142:	2b00      	cmp	r3, #0
    7144:	d1f8      	bne.n	7138 <bt_stream_rx+0x2c4>

                while (!(cc2400_status () & XOSC16M_STABLE));
    7146:	bf00      	nop
    7148:	f003 fc90 	bl	aa6c <cc2400_status>
    714c:	4603      	mov	r3, r0
    714e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7152:	2b00      	cmp	r3, #0
    7154:	d0f8      	beq.n	7148 <bt_stream_rx+0x2d4>

                cc2400_strobe (SFSON);
    7156:	2061      	movs	r0, #97	; 0x61
    7158:	f003 fc92 	bl	aa80 <cc2400_strobe>
                while (!(cc2400_status () & FS_LOCK));
    715c:	bf00      	nop
    715e:	f003 fc85 	bl	aa6c <cc2400_status>
    7162:	4603      	mov	r3, r0
    7164:	f003 0304 	and.w	r3, r3, #4
    7168:	2b00      	cmp	r3, #0
    716a:	d0f8      	beq.n	715e <bt_stream_rx+0x2ea>

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    716c:	4a0f      	ldr	r2, [pc, #60]	; (71ac <bt_stream_rx+0x338>)
    716e:	4b0f      	ldr	r3, [pc, #60]	; (71ac <bt_stream_rx+0x338>)
    7170:	681b      	ldr	r3, [r3, #0]
    7172:	f023 0301 	bic.w	r3, r3, #1
    7176:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    7178:	e024      	b.n	71c4 <bt_stream_rx+0x350>
    717a:	bf00      	nop
    717c:	2009c03c 	.word	0x2009c03c
    7180:	8e89bed6 	.word	0x8e89bed6
    7184:	2009c058 	.word	0x2009c058
    7188:	1000049c 	.word	0x1000049c
    718c:	10000a4c 	.word	0x10000a4c
    7190:	10000a49 	.word	0x10000a49
    7194:	10000b00 	.word	0x10000b00
    7198:	2009c038 	.word	0x2009c038
    719c:	100010bc 	.word	0x100010bc
    71a0:	10000a48 	.word	0x10000a48
    71a4:	10000458 	.word	0x10000458
    71a8:	50004110 	.word	0x50004110
    71ac:	40030024 	.word	0x40030024
    71b0:	0000c704 	.word	0x0000c704
    71b4:	10001088 	.word	0x10001088
    71b8:	10000be4 	.word	0x10000be4
                        u8 tmp = (u8)DIO_SSP_DR;
    71bc:	4b11      	ldr	r3, [pc, #68]	; (7204 <bt_stream_rx+0x390>)
    71be:	681b      	ldr	r3, [r3, #0]
    71c0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

                cc2400_strobe (SFSON);
                while (!(cc2400_status () & FS_LOCK));

		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    71c4:	4b10      	ldr	r3, [pc, #64]	; (7208 <bt_stream_rx+0x394>)
    71c6:	681b      	ldr	r3, [r3, #0]
    71c8:	f003 0304 	and.w	r3, r3, #4
    71cc:	2b00      	cmp	r3, #0
    71ce:	d1f5      	bne.n	71bc <bt_stream_rx+0x348>
                        u8 tmp = (u8)DIO_SSP_DR;
                }
		dma_init_le();
    71d0:	f7fe fbce 	bl	5970 <dma_init_le>
		dio_ssp_start();
    71d4:	f7fe fd3c 	bl	5c50 <dio_ssp_start>
		
//              msleep(500);    
                cc2400_strobe (SRX);
    71d8:	2062      	movs	r0, #98	; 0x62
    71da:	f003 fc51 	bl	aa80 <cc2400_strobe>
		rx_tc = 0;
    71de:	4b0b      	ldr	r3, [pc, #44]	; (720c <bt_stream_rx+0x398>)
    71e0:	2200      	movs	r2, #0
    71e2:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    71e4:	4b0a      	ldr	r3, [pc, #40]	; (7210 <bt_stream_rx+0x39c>)
    71e6:	2200      	movs	r2, #0
    71e8:	601a      	str	r2, [r3, #0]
	cc2400_set(FSDIV, channel - 1);
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    71ea:	4b0a      	ldr	r3, [pc, #40]	; (7214 <bt_stream_rx+0x3a0>)
    71ec:	781b      	ldrb	r3, [r3, #0]
    71ee:	b2db      	uxtb	r3, r3
    71f0:	2b01      	cmp	r3, #1
    71f2:	f43f aea3 	beq.w	6f3c <bt_stream_rx+0xc8>
		rx_tc = 0;
		rx_err = 0;
	 
	
	}
	dio_ssp_stop ();
    71f6:	f7fe fd5b 	bl	5cb0 <dio_ssp_stop>
	cs_trigger_disable ();
    71fa:	f7fd fc37 	bl	4a6c <cs_trigger_disable>
}
    71fe:	378c      	adds	r7, #140	; 0x8c
    7200:	46bd      	mov	sp, r7
    7202:	bd90      	pop	{r4, r7, pc}
    7204:	40030008 	.word	0x40030008
    7208:	4003000c 	.word	0x4003000c
    720c:	10000b00 	.word	0x10000b00
    7210:	100010bc 	.word	0x100010bc
    7214:	10000a3f 	.word	0x10000a3f

00007218 <le_set_access_address>:



/* set LE access address */
static void le_set_access_address(u32 aa) {
    7218:	b580      	push	{r7, lr}
    721a:	b084      	sub	sp, #16
    721c:	af00      	add	r7, sp, #0
    721e:	6078      	str	r0, [r7, #4]
	u32 aa_rev;

	le.access_address = aa;
    7220:	4a09      	ldr	r2, [pc, #36]	; (7248 <le_set_access_address+0x30>)
    7222:	687b      	ldr	r3, [r7, #4]
    7224:	6013      	str	r3, [r2, #0]
	aa_rev = rbit(aa);
    7226:	6878      	ldr	r0, [r7, #4]
    7228:	f003 f996 	bl	a558 <rbit>
    722c:	60f8      	str	r0, [r7, #12]
	le.syncl = aa_rev & 0xffff;
    722e:	68fb      	ldr	r3, [r7, #12]
    7230:	b29a      	uxth	r2, r3
    7232:	4b05      	ldr	r3, [pc, #20]	; (7248 <le_set_access_address+0x30>)
    7234:	80da      	strh	r2, [r3, #6]
	le.synch = aa_rev >> 16;
    7236:	68fb      	ldr	r3, [r7, #12]
    7238:	0c1b      	lsrs	r3, r3, #16
    723a:	b29a      	uxth	r2, r3
    723c:	4b02      	ldr	r3, [pc, #8]	; (7248 <le_set_access_address+0x30>)
    723e:	809a      	strh	r2, [r3, #4]
}
    7240:	3710      	adds	r7, #16
    7242:	46bd      	mov	sp, r7
    7244:	bd80      	pop	{r7, pc}
    7246:	bf00      	nop
    7248:	10000458 	.word	0x10000458

0000724c <reset_le>:

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    724c:	b580      	push	{r7, lr}
    724e:	af00      	add	r7, sp, #0
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    7250:	481f      	ldr	r0, [pc, #124]	; (72d0 <reset_le+0x84>)
    7252:	f7ff ffe1 	bl	7218 <le_set_access_address>
	le.crc_init  = 0x555555;	       // advertising channel CRCInit
    7256:	4b1f      	ldr	r3, [pc, #124]	; (72d4 <reset_le+0x88>)
    7258:	4a1f      	ldr	r2, [pc, #124]	; (72d8 <reset_le+0x8c>)
    725a:	609a      	str	r2, [r3, #8]
	le.crc_init_reversed = 0xAAAAAA;
    725c:	4b1d      	ldr	r3, [pc, #116]	; (72d4 <reset_le+0x88>)
    725e:	4a1f      	ldr	r2, [pc, #124]	; (72dc <reset_le+0x90>)
    7260:	60da      	str	r2, [r3, #12]
	le.crc_verify = 1;
    7262:	4b1c      	ldr	r3, [pc, #112]	; (72d4 <reset_le+0x88>)
    7264:	2201      	movs	r2, #1
    7266:	611a      	str	r2, [r3, #16]
	le.last_packet = 0;
    7268:	4b1a      	ldr	r3, [pc, #104]	; (72d4 <reset_le+0x88>)
    726a:	2200      	movs	r2, #0
    726c:	641a      	str	r2, [r3, #64]	; 0x40

	le.link_state = LINK_INACTIVE;
    726e:	4b19      	ldr	r3, [pc, #100]	; (72d4 <reset_le+0x88>)
    7270:	2200      	movs	r2, #0
    7272:	751a      	strb	r2, [r3, #20]

	le.channel_idx = 0;
    7274:	4b17      	ldr	r3, [pc, #92]	; (72d4 <reset_le+0x88>)
    7276:	2200      	movs	r2, #0
    7278:	755a      	strb	r2, [r3, #21]
	le.channel_increment = 0;
    727a:	4b16      	ldr	r3, [pc, #88]	; (72d4 <reset_le+0x88>)
    727c:	2200      	movs	r2, #0
    727e:	759a      	strb	r2, [r3, #22]

	le.conn_epoch = 0;
    7280:	4b14      	ldr	r3, [pc, #80]	; (72d4 <reset_le+0x88>)
    7282:	2200      	movs	r2, #0
    7284:	619a      	str	r2, [r3, #24]
	le.interval_timer = 0;
    7286:	4b13      	ldr	r3, [pc, #76]	; (72d4 <reset_le+0x88>)
    7288:	2200      	movs	r2, #0
    728a:	839a      	strh	r2, [r3, #28]
	le.conn_interval = 0;
    728c:	4b11      	ldr	r3, [pc, #68]	; (72d4 <reset_le+0x88>)
    728e:	2200      	movs	r2, #0
    7290:	83da      	strh	r2, [r3, #30]
	le.conn_interval = 0;
    7292:	4b10      	ldr	r3, [pc, #64]	; (72d4 <reset_le+0x88>)
    7294:	2200      	movs	r2, #0
    7296:	83da      	strh	r2, [r3, #30]
	le.conn_count = 0;
    7298:	4b0e      	ldr	r3, [pc, #56]	; (72d4 <reset_le+0x88>)
    729a:	2200      	movs	r2, #0
    729c:	841a      	strh	r2, [r3, #32]

	le.win_size = 0;
    729e:	4b0d      	ldr	r3, [pc, #52]	; (72d4 <reset_le+0x88>)
    72a0:	2200      	movs	r2, #0
    72a2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	le.win_offset = 0;
    72a6:	4b0b      	ldr	r3, [pc, #44]	; (72d4 <reset_le+0x88>)
    72a8:	2200      	movs	r2, #0
    72aa:	849a      	strh	r2, [r3, #36]	; 0x24

	le.update_pending = 0;
    72ac:	4b09      	ldr	r3, [pc, #36]	; (72d4 <reset_le+0x88>)
    72ae:	2200      	movs	r2, #0
    72b0:	629a      	str	r2, [r3, #40]	; 0x28
	le.update_instant = 0;
    72b2:	4b08      	ldr	r3, [pc, #32]	; (72d4 <reset_le+0x88>)
    72b4:	2200      	movs	r2, #0
    72b6:	859a      	strh	r2, [r3, #44]	; 0x2c
	le.interval_update = 0;
    72b8:	4b06      	ldr	r3, [pc, #24]	; (72d4 <reset_le+0x88>)
    72ba:	2200      	movs	r2, #0
    72bc:	85da      	strh	r2, [r3, #46]	; 0x2e
	le.win_size_update = 0;
    72be:	4b05      	ldr	r3, [pc, #20]	; (72d4 <reset_le+0x88>)
    72c0:	2200      	movs	r2, #0
    72c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	le.win_offset_update;

	do_hop = 0;
    72c6:	4b06      	ldr	r3, [pc, #24]	; (72e0 <reset_le+0x94>)
    72c8:	2200      	movs	r2, #0
    72ca:	701a      	strb	r2, [r3, #0]
}
    72cc:	bd80      	pop	{r7, pc}
    72ce:	bf00      	nop
    72d0:	8e89bed6 	.word	0x8e89bed6
    72d4:	10000458 	.word	0x10000458
    72d8:	00555555 	.word	0x00555555
    72dc:	00aaaaaa 	.word	0x00aaaaaa
    72e0:	1000097d 	.word	0x1000097d

000072e4 <reset_le_promisc>:

// reset LE Promisc state
void reset_le_promisc(void) {
    72e4:	b580      	push	{r7, lr}
    72e6:	af00      	add	r7, sp, #0
	memset(&le_promisc, 0, sizeof(le_promisc));
    72e8:	4805      	ldr	r0, [pc, #20]	; (7300 <reset_le_promisc+0x1c>)
    72ea:	2100      	movs	r1, #0
    72ec:	f44f 7284 	mov.w	r2, #264	; 0x108
    72f0:	f7fc ff42 	bl	4178 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    72f4:	4b02      	ldr	r3, [pc, #8]	; (7300 <reset_le_promisc+0x1c>)
    72f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    72fa:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    72fe:	bd80      	pop	{r7, pc}
    7300:	10000bf0 	.word	0x10000bf0

00007304 <bt_generic_le>:

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    7304:	b580      	push	{r7, lr}
    7306:	b088      	sub	sp, #32
    7308:	af00      	add	r7, sp, #0
    730a:	4603      	mov	r3, r0
    730c:	71fb      	strb	r3, [r7, #7]
	u8 *tmp = NULL;
    730e:	2300      	movs	r3, #0
    7310:	60fb      	str	r3, [r7, #12]
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    7312:	4ba4      	ldr	r3, [pc, #656]	; (75a4 <bt_generic_le+0x2a0>)
    7314:	2201      	movs	r2, #1
    7316:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    7318:	4aa3      	ldr	r2, [pc, #652]	; (75a8 <bt_generic_le+0x2a4>)
    731a:	79fb      	ldrb	r3, [r7, #7]
    731c:	7013      	strb	r3, [r2, #0]

	reset_le();
    731e:	f7ff ff95 	bl	724c <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    7322:	4ba2      	ldr	r3, [pc, #648]	; (75ac <bt_generic_le+0x2a8>)
    7324:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7328:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    732a:	4ba1      	ldr	r3, [pc, #644]	; (75b0 <bt_generic_le+0x2ac>)
    732c:	2210      	movs	r2, #16
    732e:	601a      	str	r2, [r3, #0]

	queue_init();
    7330:	f002 f86c 	bl	940c <queue_init>
	dio_ssp_init();
    7334:	f003 fa10 	bl	a758 <dio_ssp_init>
	dma_init();
    7338:	f7fe fa5a 	bl	57f0 <dma_init>
	dio_ssp_start();
    733c:	f7fe fc88 	bl	5c50 <dio_ssp_start>
	cc2400_rx();
    7340:	f7fe fd42 	bl	5dc8 <cc2400_rx>

	cs_trigger_enable();
    7344:	f7fd fb74 	bl	4a30 <cs_trigger_enable>

	hold = 0;
    7348:	2300      	movs	r3, #0
    734a:	77fb      	strb	r3, [r7, #31]

	while (requested_mode == active_mode) {
    734c:	e115      	b.n	757a <bt_generic_le+0x276>
		if (requested_channel != 0) {
    734e:	4b99      	ldr	r3, [pc, #612]	; (75b4 <bt_generic_le+0x2b0>)
    7350:	881b      	ldrh	r3, [r3, #0]
    7352:	b29b      	uxth	r3, r3
    7354:	2b00      	cmp	r3, #0
    7356:	d024      	beq.n	73a2 <bt_generic_le+0x9e>
			cc2400_strobe(SRFOFF);
    7358:	2064      	movs	r0, #100	; 0x64
    735a:	f003 fb91 	bl	aa80 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    735e:	bf00      	nop
    7360:	f003 fb84 	bl	aa6c <cc2400_status>
    7364:	4603      	mov	r3, r0
    7366:	f003 0304 	and.w	r3, r3, #4
    736a:	2b00      	cmp	r3, #0
    736c:	d1f8      	bne.n	7360 <bt_generic_le+0x5c>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    736e:	4b92      	ldr	r3, [pc, #584]	; (75b8 <bt_generic_le+0x2b4>)
    7370:	881b      	ldrh	r3, [r3, #0]
    7372:	b29b      	uxth	r3, r3
    7374:	3b01      	subs	r3, #1
    7376:	b29b      	uxth	r3, r3
    7378:	2002      	movs	r0, #2
    737a:	4619      	mov	r1, r3
    737c:	f003 fabe 	bl	a8fc <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    7380:	2061      	movs	r0, #97	; 0x61
    7382:	f003 fb7d 	bl	aa80 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    7386:	bf00      	nop
    7388:	f003 fb70 	bl	aa6c <cc2400_status>
    738c:	4603      	mov	r3, r0
    738e:	f003 0304 	and.w	r3, r3, #4
    7392:	2b00      	cmp	r3, #0
    7394:	d0f8      	beq.n	7388 <bt_generic_le+0x84>

			/* RX mode */
			cc2400_strobe(SRX);
    7396:	2062      	movs	r0, #98	; 0x62
    7398:	f003 fb72 	bl	aa80 <cc2400_strobe>

			requested_channel = 0;
    739c:	4b85      	ldr	r3, [pc, #532]	; (75b4 <bt_generic_le+0x2b0>)
    739e:	2200      	movs	r2, #0
    73a0:	801a      	strh	r2, [r3, #0]
		}

		if (do_hop) {
    73a2:	4b86      	ldr	r3, [pc, #536]	; (75bc <bt_generic_le+0x2b8>)
    73a4:	781b      	ldrb	r3, [r3, #0]
    73a6:	b2db      	uxtb	r3, r3
    73a8:	2b00      	cmp	r3, #0
    73aa:	d002      	beq.n	73b2 <bt_generic_le+0xae>
			hop();
    73ac:	f7fe ffa2 	bl	62f4 <hop>
    73b0:	e003      	b.n	73ba <bt_generic_le+0xb6>
		} else {
			TXLED_CLR;
    73b2:	4b7f      	ldr	r3, [pc, #508]	; (75b0 <bt_generic_le+0x2ac>)
    73b4:	f44f 7280 	mov.w	r2, #256	; 0x100
    73b8:	601a      	str	r2, [r3, #0]
		}

		RXLED_CLR;
    73ba:	4b7d      	ldr	r3, [pc, #500]	; (75b0 <bt_generic_le+0x2ac>)
    73bc:	2210      	movs	r2, #16
    73be:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    73c0:	f7fc ffa0 	bl	4304 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    73c4:	2380      	movs	r3, #128	; 0x80
    73c6:	74bb      	strb	r3, [r7, #18]
		while ((rx_tc == 0) && (rx_err == 0))
    73c8:	e022      	b.n	7410 <bt_generic_le+0x10c>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    73ca:	2006      	movs	r0, #6
    73cc:	f003 fa80 	bl	a8d0 <cc2400_get>
    73d0:	4603      	mov	r3, r0
    73d2:	0a1b      	lsrs	r3, r3, #8
    73d4:	b29b      	uxth	r3, r3
    73d6:	74fb      	strb	r3, [r7, #19]
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    73d8:	4b79      	ldr	r3, [pc, #484]	; (75c0 <bt_generic_le+0x2bc>)
    73da:	781b      	ldrb	r3, [r3, #0]
    73dc:	b2db      	uxtb	r3, r3
    73de:	2b00      	cmp	r3, #0
    73e0:	d011      	beq.n	7406 <bt_generic_le+0x102>
    73e2:	f997 3012 	ldrsb.w	r3, [r7, #18]
    73e6:	f113 0f80 	cmn.w	r3, #128	; 0x80
    73ea:	d10c      	bne.n	7406 <bt_generic_le+0x102>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    73ec:	4b75      	ldr	r3, [pc, #468]	; (75c4 <bt_generic_le+0x2c0>)
    73ee:	781b      	ldrb	r3, [r3, #0]
    73f0:	b25b      	sxtb	r3, r3
    73f2:	f103 0236 	add.w	r2, r3, #54	; 0x36
    73f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
    73fa:	4293      	cmp	r3, r2
    73fc:	bfb8      	it	lt
    73fe:	4613      	movlt	r3, r2
    7400:	74fb      	strb	r3, [r7, #19]
				rssi_at_trigger = rssi;
    7402:	7cfb      	ldrb	r3, [r7, #19]
    7404:	74bb      	strb	r3, [r7, #18]
			}
			rssi_add(rssi);
    7406:	f997 3013 	ldrsb.w	r3, [r7, #19]
    740a:	4618      	mov	r0, r3
    740c:	f7fc ff94 	bl	4338 <rssi_add>
		RXLED_CLR;

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
    7410:	4b6d      	ldr	r3, [pc, #436]	; (75c8 <bt_generic_le+0x2c4>)
    7412:	681b      	ldr	r3, [r3, #0]
    7414:	2b00      	cmp	r3, #0
    7416:	d103      	bne.n	7420 <bt_generic_le+0x11c>
    7418:	4b6c      	ldr	r3, [pc, #432]	; (75cc <bt_generic_le+0x2c8>)
    741a:	681b      	ldr	r3, [r3, #0]
    741c:	2b00      	cmp	r3, #0
    741e:	d0d4      	beq.n	73ca <bt_generic_le+0xc6>
			}
			rssi_add(rssi);
		}

		/* Keep buffer swapping in sync with DMA. */
		if (rx_tc % 2) {
    7420:	4b69      	ldr	r3, [pc, #420]	; (75c8 <bt_generic_le+0x2c4>)
    7422:	681b      	ldr	r3, [r3, #0]
    7424:	f003 0301 	and.w	r3, r3, #1
    7428:	2b00      	cmp	r3, #0
    742a:	d009      	beq.n	7440 <bt_generic_le+0x13c>
			tmp = active_rxbuf;
    742c:	4b68      	ldr	r3, [pc, #416]	; (75d0 <bt_generic_le+0x2cc>)
    742e:	681b      	ldr	r3, [r3, #0]
    7430:	60fb      	str	r3, [r7, #12]
			active_rxbuf = idle_rxbuf;
    7432:	4b68      	ldr	r3, [pc, #416]	; (75d4 <bt_generic_le+0x2d0>)
    7434:	681b      	ldr	r3, [r3, #0]
    7436:	4a66      	ldr	r2, [pc, #408]	; (75d0 <bt_generic_le+0x2cc>)
    7438:	6013      	str	r3, [r2, #0]
			idle_rxbuf = tmp;
    743a:	4a66      	ldr	r2, [pc, #408]	; (75d4 <bt_generic_le+0x2d0>)
    743c:	68fb      	ldr	r3, [r7, #12]
    743e:	6013      	str	r3, [r2, #0]
		}

		if (rx_err) {
    7440:	4b62      	ldr	r3, [pc, #392]	; (75cc <bt_generic_le+0x2c8>)
    7442:	681b      	ldr	r3, [r3, #0]
    7444:	2b00      	cmp	r3, #0
    7446:	d007      	beq.n	7458 <bt_generic_le+0x154>
			status |= DMA_ERROR;
    7448:	4b63      	ldr	r3, [pc, #396]	; (75d8 <bt_generic_le+0x2d4>)
    744a:	781b      	ldrb	r3, [r3, #0]
    744c:	b2db      	uxtb	r3, r3
    744e:	f043 0302 	orr.w	r3, r3, #2
    7452:	b2da      	uxtb	r2, r3
    7454:	4b60      	ldr	r3, [pc, #384]	; (75d8 <bt_generic_le+0x2d4>)
    7456:	701a      	strb	r2, [r3, #0]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    7458:	4b5b      	ldr	r3, [pc, #364]	; (75c8 <bt_generic_le+0x2c4>)
    745a:	681b      	ldr	r3, [r3, #0]
    745c:	2b00      	cmp	r3, #0
    745e:	d100      	bne.n	7462 <bt_generic_le+0x15e>
			goto rx_continue;
    7460:	e085      	b.n	756e <bt_generic_le+0x26a>

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    7462:	4b59      	ldr	r3, [pc, #356]	; (75c8 <bt_generic_le+0x2c4>)
    7464:	681b      	ldr	r3, [r3, #0]
    7466:	2b01      	cmp	r3, #1
    7468:	d907      	bls.n	747a <bt_generic_le+0x176>
			status |= DMA_OVERFLOW;
    746a:	4b5b      	ldr	r3, [pc, #364]	; (75d8 <bt_generic_le+0x2d4>)
    746c:	781b      	ldrb	r3, [r3, #0]
    746e:	b2db      	uxtb	r3, r3
    7470:	f043 0301 	orr.w	r3, r3, #1
    7474:	b2da      	uxtb	r2, r3
    7476:	4b58      	ldr	r3, [pc, #352]	; (75d8 <bt_generic_le+0x2d4>)
    7478:	701a      	strb	r2, [r3, #0]

		rssi_iir_update();
    747a:	f7fc ff93 	bl	43a4 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    747e:	4b50      	ldr	r3, [pc, #320]	; (75c0 <bt_generic_le+0x2bc>)
    7480:	781b      	ldrb	r3, [r3, #0]
    7482:	b2db      	uxtb	r3, r3
    7484:	2b00      	cmp	r3, #0
    7486:	d103      	bne.n	7490 <bt_generic_le+0x18c>
    7488:	4b54      	ldr	r3, [pc, #336]	; (75dc <bt_generic_le+0x2d8>)
    748a:	781b      	ldrb	r3, [r3, #0]
    748c:	2b00      	cmp	r3, #0
    748e:	d00c      	beq.n	74aa <bt_generic_le+0x1a6>
			status |= CS_TRIGGER;
    7490:	4b51      	ldr	r3, [pc, #324]	; (75d8 <bt_generic_le+0x2d4>)
    7492:	781b      	ldrb	r3, [r3, #0]
    7494:	b2db      	uxtb	r3, r3
    7496:	f043 0308 	orr.w	r3, r3, #8
    749a:	b2da      	uxtb	r2, r3
    749c:	4b4e      	ldr	r3, [pc, #312]	; (75d8 <bt_generic_le+0x2d4>)
    749e:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    74a0:	2302      	movs	r3, #2
    74a2:	77fb      	strb	r3, [r7, #31]
			cs_trigger = 0;
    74a4:	4b46      	ldr	r3, [pc, #280]	; (75c0 <bt_generic_le+0x2bc>)
    74a6:	2200      	movs	r2, #0
    74a8:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    74aa:	4b4d      	ldr	r3, [pc, #308]	; (75e0 <bt_generic_le+0x2dc>)
    74ac:	781b      	ldrb	r3, [r3, #0]
    74ae:	b25a      	sxtb	r2, r3
    74b0:	4b44      	ldr	r3, [pc, #272]	; (75c4 <bt_generic_le+0x2c0>)
    74b2:	781b      	ldrb	r3, [r3, #0]
    74b4:	b25b      	sxtb	r3, r3
    74b6:	3336      	adds	r3, #54	; 0x36
    74b8:	429a      	cmp	r2, r3
    74ba:	db09      	blt.n	74d0 <bt_generic_le+0x1cc>
			status |= RSSI_TRIGGER;
    74bc:	4b46      	ldr	r3, [pc, #280]	; (75d8 <bt_generic_le+0x2d4>)
    74be:	781b      	ldrb	r3, [r3, #0]
    74c0:	b2db      	uxtb	r3, r3
    74c2:	f043 0310 	orr.w	r3, r3, #16
    74c6:	b2da      	uxtb	r2, r3
    74c8:	4b43      	ldr	r3, [pc, #268]	; (75d8 <bt_generic_le+0x2d4>)
    74ca:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    74cc:	2302      	movs	r3, #2
    74ce:	77fb      	strb	r3, [r7, #31]
		}

		/* Send a packet once in a while (6.25 Hz) to keep
		 * host USB reads from timing out. */
		if (keepalive_trigger) {
    74d0:	4b44      	ldr	r3, [pc, #272]	; (75e4 <bt_generic_le+0x2e0>)
    74d2:	781b      	ldrb	r3, [r3, #0]
    74d4:	b2db      	uxtb	r3, r3
    74d6:	2b00      	cmp	r3, #0
    74d8:	d007      	beq.n	74ea <bt_generic_le+0x1e6>
			if (hold == 0)
    74da:	7ffb      	ldrb	r3, [r7, #31]
    74dc:	2b00      	cmp	r3, #0
    74de:	d101      	bne.n	74e4 <bt_generic_le+0x1e0>
				hold = 1;
    74e0:	2301      	movs	r3, #1
    74e2:	77fb      	strb	r3, [r7, #31]
			keepalive_trigger = 0;
    74e4:	4b3f      	ldr	r3, [pc, #252]	; (75e4 <bt_generic_le+0x2e0>)
    74e6:	2200      	movs	r2, #0
    74e8:	701a      	strb	r2, [r3, #0]
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    74ea:	7ffb      	ldrb	r3, [r7, #31]
    74ec:	2b00      	cmp	r3, #0
    74ee:	d100      	bne.n	74f2 <bt_generic_le+0x1ee>
			goto rx_continue;
    74f0:	e03d      	b.n	756e <bt_generic_le+0x26a>
		}
		hold--;
    74f2:	7ffb      	ldrb	r3, [r7, #31]
    74f4:	3b01      	subs	r3, #1
    74f6:	77fb      	strb	r3, [r7, #31]

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    74f8:	483b      	ldr	r0, [pc, #236]	; (75e8 <bt_generic_le+0x2e4>)
    74fa:	493c      	ldr	r1, [pc, #240]	; (75ec <bt_generic_le+0x2e8>)
    74fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
    7500:	f004 ffd0 	bl	c4a4 <memcpy>

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    7504:	2300      	movs	r3, #0
    7506:	61bb      	str	r3, [r7, #24]
    7508:	e025      	b.n	7556 <bt_generic_le+0x252>
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    750a:	2300      	movs	r3, #0
    750c:	617b      	str	r3, [r7, #20]
    750e:	e01c      	b.n	754a <bt_generic_le+0x246>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    7510:	69bb      	ldr	r3, [r7, #24]
    7512:	3332      	adds	r3, #50	; 0x32
    7514:	00da      	lsls	r2, r3, #3
    7516:	697b      	ldr	r3, [r7, #20]
    7518:	4413      	add	r3, r2
    751a:	4a2e      	ldr	r2, [pc, #184]	; (75d4 <bt_generic_le+0x2d0>)
    751c:	6811      	ldr	r1, [r2, #0]
    751e:	69ba      	ldr	r2, [r7, #24]
    7520:	440a      	add	r2, r1
    7522:	7812      	ldrb	r2, [r2, #0]
    7524:	09d2      	lsrs	r2, r2, #7
    7526:	b2d1      	uxtb	r1, r2
    7528:	4a2f      	ldr	r2, [pc, #188]	; (75e8 <bt_generic_le+0x2e4>)
    752a:	54d1      	strb	r1, [r2, r3]
				idle_rxbuf[i] <<= 1;
    752c:	4b29      	ldr	r3, [pc, #164]	; (75d4 <bt_generic_le+0x2d0>)
    752e:	681a      	ldr	r2, [r3, #0]
    7530:	69bb      	ldr	r3, [r7, #24]
    7532:	4413      	add	r3, r2
    7534:	4a27      	ldr	r2, [pc, #156]	; (75d4 <bt_generic_le+0x2d0>)
    7536:	6811      	ldr	r1, [r2, #0]
    7538:	69ba      	ldr	r2, [r7, #24]
    753a:	440a      	add	r2, r1
    753c:	7812      	ldrb	r2, [r2, #0]
    753e:	0052      	lsls	r2, r2, #1
    7540:	b2d2      	uxtb	r2, r2
    7542:	701a      	strb	r2, [r3, #0]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    7544:	697b      	ldr	r3, [r7, #20]
    7546:	3301      	adds	r3, #1
    7548:	617b      	str	r3, [r7, #20]
    754a:	697b      	ldr	r3, [r7, #20]
    754c:	2b07      	cmp	r3, #7
    754e:	dddf      	ble.n	7510 <bt_generic_le+0x20c>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    7550:	69bb      	ldr	r3, [r7, #24]
    7552:	3301      	adds	r3, #1
    7554:	61bb      	str	r3, [r7, #24]
    7556:	69bb      	ldr	r3, [r7, #24]
    7558:	2b31      	cmp	r3, #49	; 0x31
    755a:	ddd6      	ble.n	750a <bt_generic_le+0x206>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    755c:	4b24      	ldr	r3, [pc, #144]	; (75f0 <bt_generic_le+0x2ec>)
    755e:	681b      	ldr	r3, [r3, #0]
    7560:	4821      	ldr	r0, [pc, #132]	; (75e8 <bt_generic_le+0x2e4>)
    7562:	4798      	blx	r3
    7564:	60b8      	str	r0, [r7, #8]
		if (!ret) break;
    7566:	68bb      	ldr	r3, [r7, #8]
    7568:	2b00      	cmp	r3, #0
    756a:	d100      	bne.n	756e <bt_generic_le+0x26a>
    756c:	e00c      	b.n	7588 <bt_generic_le+0x284>

	rx_continue:
		rx_tc = 0;
    756e:	4b16      	ldr	r3, [pc, #88]	; (75c8 <bt_generic_le+0x2c4>)
    7570:	2200      	movs	r2, #0
    7572:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    7574:	4b15      	ldr	r3, [pc, #84]	; (75cc <bt_generic_le+0x2c8>)
    7576:	2200      	movs	r2, #0
    7578:	601a      	str	r2, [r3, #0]

	cs_trigger_enable();

	hold = 0;

	while (requested_mode == active_mode) {
    757a:	4b1e      	ldr	r3, [pc, #120]	; (75f4 <bt_generic_le+0x2f0>)
    757c:	781b      	ldrb	r3, [r3, #0]
    757e:	b2db      	uxtb	r3, r3
    7580:	79fa      	ldrb	r2, [r7, #7]
    7582:	429a      	cmp	r2, r3
    7584:	f43f aee3 	beq.w	734e <bt_generic_le+0x4a>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    7588:	4b1b      	ldr	r3, [pc, #108]	; (75f8 <bt_generic_le+0x2f4>)
    758a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    758e:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    7590:	f7fe fbf2 	bl	5d78 <cc2400_idle>
	dio_ssp_stop();
    7594:	f7fe fb8c 	bl	5cb0 <dio_ssp_stop>
	cs_trigger_disable();
    7598:	f7fd fa68 	bl	4a6c <cs_trigger_disable>
}
    759c:	3720      	adds	r7, #32
    759e:	46bd      	mov	sp, r7
    75a0:	bd80      	pop	{r7, pc}
    75a2:	bf00      	nop
    75a4:	10000a42 	.word	0x10000a42
    75a8:	10000a3e 	.word	0x10000a3e
    75ac:	e000e100 	.word	0xe000e100
    75b0:	2009c03c 	.word	0x2009c03c
    75b4:	10000a44 	.word	0x10000a44
    75b8:	1000049c 	.word	0x1000049c
    75bc:	1000097d 	.word	0x1000097d
    75c0:	100010c0 	.word	0x100010c0
    75c4:	1000044d 	.word	0x1000044d
    75c8:	10000b00 	.word	0x10000b00
    75cc:	100010bc 	.word	0x100010bc
    75d0:	10000450 	.word	0x10000450
    75d4:	10000454 	.word	0x10000454
    75d8:	10000a48 	.word	0x10000a48
    75dc:	1000097e 	.word	0x1000097e
    75e0:	10000b04 	.word	0x10000b04
    75e4:	10000be0 	.word	0x10000be0
    75e8:	10000d08 	.word	0x10000d08
    75ec:	10000e98 	.word	0x10000e98
    75f0:	10000998 	.word	0x10000998
    75f4:	10000a3f 	.word	0x10000a3f
    75f8:	e000e180 	.word	0xe000e180

000075fc <bt_le_sync>:


void bt_le_sync(u8 active_mode)
{
    75fc:	b590      	push	{r4, r7, lr}
    75fe:	b09b      	sub	sp, #108	; 0x6c
    7600:	af00      	add	r7, sp, #0
    7602:	4603      	mov	r3, r0
    7604:	71fb      	strb	r3, [r7, #7]
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    7606:	4b87      	ldr	r3, [pc, #540]	; (7824 <bt_le_sync+0x228>)
    7608:	2201      	movs	r2, #1
    760a:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    760c:	4a86      	ldr	r2, [pc, #536]	; (7828 <bt_le_sync+0x22c>)
    760e:	79fb      	ldrb	r3, [r7, #7]
    7610:	7013      	strb	r3, [r2, #0]

	le.link_state = LINK_LISTENING;
    7612:	4b86      	ldr	r3, [pc, #536]	; (782c <bt_le_sync+0x230>)
    7614:	2201      	movs	r2, #1
    7616:	751a      	strb	r2, [r3, #20]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    7618:	4b85      	ldr	r3, [pc, #532]	; (7830 <bt_le_sync+0x234>)
    761a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    761e:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    7620:	4b84      	ldr	r3, [pc, #528]	; (7834 <bt_le_sync+0x238>)
    7622:	2210      	movs	r2, #16
    7624:	601a      	str	r2, [r3, #0]

	queue_init();
    7626:	f001 fef1 	bl	940c <queue_init>
	dio_ssp_init();
    762a:	f003 f895 	bl	a758 <dio_ssp_init>
	dma_init_le();
    762e:	f7fe f99f 	bl	5970 <dma_init_le>
	dio_ssp_start();
    7632:	f7fe fb0d 	bl	5c50 <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    7636:	4b7d      	ldr	r3, [pc, #500]	; (782c <bt_le_sync+0x230>)
    7638:	681b      	ldr	r3, [r3, #0]
    763a:	4618      	mov	r0, r3
    763c:	f002 ff8c 	bl	a558 <rbit>
    7640:	4603      	mov	r3, r0
    7642:	4618      	mov	r0, r3
    7644:	f7fe fc1e 	bl	5e84 <cc2400_rx_sync>

	while (requested_mode == active_mode) {
    7648:	e247      	b.n	7ada <bt_le_sync+0x4de>
		if (requested_channel != 0) {
    764a:	4b7b      	ldr	r3, [pc, #492]	; (7838 <bt_le_sync+0x23c>)
    764c:	881b      	ldrh	r3, [r3, #0]
    764e:	b29b      	uxth	r3, r3
    7650:	2b00      	cmp	r3, #0
    7652:	d029      	beq.n	76a8 <bt_le_sync+0xac>
			cc2400_strobe(SRFOFF);
    7654:	2064      	movs	r0, #100	; 0x64
    7656:	f003 fa13 	bl	aa80 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    765a:	bf00      	nop
    765c:	f003 fa06 	bl	aa6c <cc2400_status>
    7660:	4603      	mov	r3, r0
    7662:	f003 0304 	and.w	r3, r3, #4
    7666:	2b00      	cmp	r3, #0
    7668:	d1f8      	bne.n	765c <bt_le_sync+0x60>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    766a:	4b74      	ldr	r3, [pc, #464]	; (783c <bt_le_sync+0x240>)
    766c:	881b      	ldrh	r3, [r3, #0]
    766e:	b29b      	uxth	r3, r3
    7670:	3b01      	subs	r3, #1
    7672:	b29b      	uxth	r3, r3
    7674:	2002      	movs	r0, #2
    7676:	4619      	mov	r1, r3
    7678:	f003 f940 	bl	a8fc <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    767c:	2061      	movs	r0, #97	; 0x61
    767e:	f003 f9ff 	bl	aa80 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    7682:	bf00      	nop
    7684:	f003 f9f2 	bl	aa6c <cc2400_status>
    7688:	4603      	mov	r3, r0
    768a:	f003 0304 	and.w	r3, r3, #4
    768e:	2b00      	cmp	r3, #0
    7690:	d0f8      	beq.n	7684 <bt_le_sync+0x88>

			/* RX mode */
			cc2400_strobe(SRX);
    7692:	2062      	movs	r0, #98	; 0x62
    7694:	f003 f9f4 	bl	aa80 <cc2400_strobe>

			saved_request = requested_channel;
    7698:	4b67      	ldr	r3, [pc, #412]	; (7838 <bt_le_sync+0x23c>)
    769a:	881b      	ldrh	r3, [r3, #0]
    769c:	b29a      	uxth	r2, r3
    769e:	4b68      	ldr	r3, [pc, #416]	; (7840 <bt_le_sync+0x244>)
    76a0:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    76a2:	4b65      	ldr	r3, [pc, #404]	; (7838 <bt_le_sync+0x23c>)
    76a4:	2200      	movs	r2, #0
    76a6:	801a      	strh	r2, [r3, #0]
		}

		RXLED_CLR;
    76a8:	4b62      	ldr	r3, [pc, #392]	; (7834 <bt_le_sync+0x238>)
    76aa:	2210      	movs	r2, #16
    76ac:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    76ae:	f7fc fe29 	bl	4304 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    76b2:	bf00      	nop
    76b4:	4b63      	ldr	r3, [pc, #396]	; (7844 <bt_le_sync+0x248>)
    76b6:	681b      	ldr	r3, [r3, #0]
    76b8:	2b00      	cmp	r3, #0
    76ba:	d10e      	bne.n	76da <bt_le_sync+0xde>
    76bc:	4b62      	ldr	r3, [pc, #392]	; (7848 <bt_le_sync+0x24c>)
    76be:	681b      	ldr	r3, [r3, #0]
    76c0:	2b00      	cmp	r3, #0
    76c2:	d10a      	bne.n	76da <bt_le_sync+0xde>
    76c4:	4b61      	ldr	r3, [pc, #388]	; (784c <bt_le_sync+0x250>)
    76c6:	781b      	ldrb	r3, [r3, #0]
    76c8:	b2db      	uxtb	r3, r3
    76ca:	2b00      	cmp	r3, #0
    76cc:	d105      	bne.n	76da <bt_le_sync+0xde>
    76ce:	4b60      	ldr	r3, [pc, #384]	; (7850 <bt_le_sync+0x254>)
    76d0:	781b      	ldrb	r3, [r3, #0]
    76d2:	b2db      	uxtb	r3, r3
    76d4:	79fa      	ldrb	r2, [r7, #7]
    76d6:	429a      	cmp	r2, r3
    76d8:	d0ec      	beq.n	76b4 <bt_le_sync+0xb8>
			;

		if (requested_mode != active_mode) {
    76da:	4b5d      	ldr	r3, [pc, #372]	; (7850 <bt_le_sync+0x254>)
    76dc:	781b      	ldrb	r3, [r3, #0]
    76de:	b2db      	uxtb	r3, r3
    76e0:	79fa      	ldrb	r2, [r7, #7]
    76e2:	429a      	cmp	r2, r3
    76e4:	d000      	beq.n	76e8 <bt_le_sync+0xec>
			goto cleanup;
    76e6:	e1ff      	b.n	7ae8 <bt_le_sync+0x4ec>
		}

		if (rx_err) {
    76e8:	4b57      	ldr	r3, [pc, #348]	; (7848 <bt_le_sync+0x24c>)
    76ea:	681b      	ldr	r3, [r3, #0]
    76ec:	2b00      	cmp	r3, #0
    76ee:	d007      	beq.n	7700 <bt_le_sync+0x104>
			status |= DMA_ERROR;
    76f0:	4b58      	ldr	r3, [pc, #352]	; (7854 <bt_le_sync+0x258>)
    76f2:	781b      	ldrb	r3, [r3, #0]
    76f4:	b2db      	uxtb	r3, r3
    76f6:	f043 0302 	orr.w	r3, r3, #2
    76fa:	b2da      	uxtb	r2, r3
    76fc:	4b55      	ldr	r3, [pc, #340]	; (7854 <bt_le_sync+0x258>)
    76fe:	701a      	strb	r2, [r3, #0]
		}

		if (do_hop)
    7700:	4b52      	ldr	r3, [pc, #328]	; (784c <bt_le_sync+0x250>)
    7702:	781b      	ldrb	r3, [r3, #0]
    7704:	b2db      	uxtb	r3, r3
    7706:	2b00      	cmp	r3, #0
    7708:	d000      	beq.n	770c <bt_le_sync+0x110>
			goto rx_flush;
    770a:	e12b      	b.n	7964 <bt_le_sync+0x368>

		/* No DMA transfer? */
		if (!rx_tc)
    770c:	4b4d      	ldr	r3, [pc, #308]	; (7844 <bt_le_sync+0x248>)
    770e:	681b      	ldr	r3, [r3, #0]
    7710:	2b00      	cmp	r3, #0
    7712:	d100      	bne.n	7716 <bt_le_sync+0x11a>
    7714:	e1e1      	b.n	7ada <bt_le_sync+0x4de>

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    7716:	f107 0308 	add.w	r3, r7, #8
    771a:	65fb      	str	r3, [r7, #92]	; 0x5c
		packet[0] = le.access_address;
    771c:	4b43      	ldr	r3, [pc, #268]	; (782c <bt_le_sync+0x230>)
    771e:	681b      	ldr	r3, [r3, #0]
    7720:	60bb      	str	r3, [r7, #8]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    7722:	4b46      	ldr	r3, [pc, #280]	; (783c <bt_le_sync+0x240>)
    7724:	881b      	ldrh	r3, [r3, #0]
    7726:	b29b      	uxth	r3, r3
    7728:	b2db      	uxtb	r3, r3
    772a:	3b62      	subs	r3, #98	; 0x62
    772c:	b2db      	uxtb	r3, r3
    772e:	4618      	mov	r0, r3
    7730:	f001 fcec 	bl	910c <btle_channel_index>
    7734:	4603      	mov	r3, r0
    7736:	461a      	mov	r2, r3
    7738:	4613      	mov	r3, r2
    773a:	005b      	lsls	r3, r3, #1
    773c:	4413      	add	r3, r2
    773e:	011b      	lsls	r3, r3, #4
    7740:	4a45      	ldr	r2, [pc, #276]	; (7858 <bt_le_sync+0x25c>)
    7742:	4413      	add	r3, r2
    7744:	65bb      	str	r3, [r7, #88]	; 0x58
		for (i = 0; i < 4; i+= 4) {
    7746:	2300      	movs	r3, #0
    7748:	667b      	str	r3, [r7, #100]	; 0x64
    774a:	e034      	b.n	77b6 <bt_le_sync+0x1ba>
			uint32_t v = rxbuf1[i+0] << 24
    774c:	4a43      	ldr	r2, [pc, #268]	; (785c <bt_le_sync+0x260>)
    774e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7750:	4413      	add	r3, r2
    7752:	781b      	ldrb	r3, [r3, #0]
    7754:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    7756:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7758:	3301      	adds	r3, #1
    775a:	4940      	ldr	r1, [pc, #256]	; (785c <bt_le_sync+0x260>)
    775c:	5ccb      	ldrb	r3, [r1, r3]
    775e:	041b      	lsls	r3, r3, #16
    7760:	431a      	orrs	r2, r3
					   | rxbuf1[i+2] << 8
    7762:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7764:	3302      	adds	r3, #2
    7766:	493d      	ldr	r1, [pc, #244]	; (785c <bt_le_sync+0x260>)
    7768:	5ccb      	ldrb	r3, [r1, r3]
    776a:	021b      	lsls	r3, r3, #8
    776c:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    776e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    7770:	3203      	adds	r2, #3
    7772:	493a      	ldr	r1, [pc, #232]	; (785c <bt_le_sync+0x260>)
    7774:	5c8a      	ldrb	r2, [r1, r2]
    7776:	4313      	orrs	r3, r2
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    7778:	657b      	str	r3, [r7, #84]	; 0x54
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    777a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    777c:	2b00      	cmp	r3, #0
    777e:	da00      	bge.n	7782 <bt_le_sync+0x186>
    7780:	3303      	adds	r3, #3
    7782:	109b      	asrs	r3, r3, #2
    7784:	1c5c      	adds	r4, r3, #1
    7786:	6d78      	ldr	r0, [r7, #84]	; 0x54
    7788:	f002 fee6 	bl	a558 <rbit>
    778c:	4601      	mov	r1, r0
    778e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7790:	2b00      	cmp	r3, #0
    7792:	da00      	bge.n	7796 <bt_le_sync+0x19a>
    7794:	3303      	adds	r3, #3
    7796:	109b      	asrs	r3, r3, #2
    7798:	009b      	lsls	r3, r3, #2
    779a:	6dba      	ldr	r2, [r7, #88]	; 0x58
    779c:	4413      	add	r3, r2
    779e:	681b      	ldr	r3, [r3, #0]
    77a0:	ea81 0203 	eor.w	r2, r1, r3
    77a4:	00a3      	lsls	r3, r4, #2
    77a6:	f107 0168 	add.w	r1, r7, #104	; 0x68
    77aa:	440b      	add	r3, r1
    77ac:	f843 2c60 	str.w	r2, [r3, #-96]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
    77b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    77b2:	3304      	adds	r3, #4
    77b4:	667b      	str	r3, [r7, #100]	; 0x64
    77b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    77b8:	2b03      	cmp	r3, #3
    77ba:	ddc7      	ble.n	774c <bt_le_sync+0x150>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		unsigned len = (p[5] & 0x3f) + 2;
    77bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    77be:	3305      	adds	r3, #5
    77c0:	781b      	ldrb	r3, [r3, #0]
    77c2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    77c6:	3302      	adds	r3, #2
    77c8:	653b      	str	r3, [r7, #80]	; 0x50
		if (len > 39)
    77ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    77cc:	2b27      	cmp	r3, #39	; 0x27
    77ce:	d900      	bls.n	77d2 <bt_le_sync+0x1d6>
			goto rx_flush;
    77d0:	e0c8      	b.n	7964 <bt_le_sync+0x368>

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    77d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    77d4:	3306      	adds	r3, #6
    77d6:	089b      	lsrs	r3, r3, #2
    77d8:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (total_transfers < 11) {
    77da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    77dc:	2b0a      	cmp	r3, #10
    77de:	d80d      	bhi.n	77fc <bt_le_sync+0x200>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    77e0:	bf00      	nop
    77e2:	4b1f      	ldr	r3, [pc, #124]	; (7860 <bt_le_sync+0x264>)
    77e4:	681a      	ldr	r2, [r3, #0]
    77e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    77e8:	009b      	lsls	r3, r3, #2
    77ea:	491c      	ldr	r1, [pc, #112]	; (785c <bt_le_sync+0x260>)
    77ec:	440b      	add	r3, r1
    77ee:	429a      	cmp	r2, r3
    77f0:	d20f      	bcs.n	7812 <bt_le_sync+0x216>
    77f2:	4b15      	ldr	r3, [pc, #84]	; (7848 <bt_le_sync+0x24c>)
    77f4:	681b      	ldr	r3, [r3, #0]
    77f6:	2b00      	cmp	r3, #0
    77f8:	d0f3      	beq.n	77e2 <bt_le_sync+0x1e6>
    77fa:	e00a      	b.n	7812 <bt_le_sync+0x216>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    77fc:	bf00      	nop
    77fe:	4b19      	ldr	r3, [pc, #100]	; (7864 <bt_le_sync+0x268>)
    7800:	681b      	ldr	r3, [r3, #0]
    7802:	f003 0301 	and.w	r3, r3, #1
    7806:	2b00      	cmp	r3, #0
    7808:	d003      	beq.n	7812 <bt_le_sync+0x216>
    780a:	4b0f      	ldr	r3, [pc, #60]	; (7848 <bt_le_sync+0x24c>)
    780c:	681b      	ldr	r3, [r3, #0]
    780e:	2b00      	cmp	r3, #0
    7810:	d0f5      	beq.n	77fe <bt_le_sync+0x202>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    7812:	4a15      	ldr	r2, [pc, #84]	; (7868 <bt_le_sync+0x26c>)
    7814:	4b14      	ldr	r3, [pc, #80]	; (7868 <bt_le_sync+0x26c>)
    7816:	681b      	ldr	r3, [r3, #0]
    7818:	f023 0301 	bic.w	r3, r3, #1
    781c:	6013      	str	r3, [r2, #0]

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    781e:	2304      	movs	r3, #4
    7820:	667b      	str	r3, [r7, #100]	; 0x64
    7822:	e058      	b.n	78d6 <bt_le_sync+0x2da>
    7824:	10000a42 	.word	0x10000a42
    7828:	10000a3e 	.word	0x10000a3e
    782c:	10000458 	.word	0x10000458
    7830:	e000e100 	.word	0xe000e100
    7834:	2009c03c 	.word	0x2009c03c
    7838:	10000a44 	.word	0x10000a44
    783c:	1000049c 	.word	0x1000049c
    7840:	10000a46 	.word	0x10000a46
    7844:	10000b00 	.word	0x10000b00
    7848:	100010bc 	.word	0x100010bc
    784c:	1000097d 	.word	0x1000097d
    7850:	10000a3f 	.word	0x10000a3f
    7854:	10000a48 	.word	0x10000a48
    7858:	0000c704 	.word	0x0000c704
    785c:	10001088 	.word	0x10001088
    7860:	50004104 	.word	0x50004104
    7864:	50004110 	.word	0x50004110
    7868:	40030024 	.word	0x40030024
			uint32_t v = rxbuf1[i+0] << 24
    786c:	4aa5      	ldr	r2, [pc, #660]	; (7b04 <bt_le_sync+0x508>)
    786e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7870:	4413      	add	r3, r2
    7872:	781b      	ldrb	r3, [r3, #0]
    7874:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    7876:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7878:	3301      	adds	r3, #1
    787a:	49a2      	ldr	r1, [pc, #648]	; (7b04 <bt_le_sync+0x508>)
    787c:	5ccb      	ldrb	r3, [r1, r3]
    787e:	041b      	lsls	r3, r3, #16
    7880:	431a      	orrs	r2, r3
				       | rxbuf1[i+2] << 8
    7882:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7884:	3302      	adds	r3, #2
    7886:	499f      	ldr	r1, [pc, #636]	; (7b04 <bt_le_sync+0x508>)
    7888:	5ccb      	ldrb	r3, [r1, r3]
    788a:	021b      	lsls	r3, r3, #8
    788c:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    788e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    7890:	3203      	adds	r2, #3
    7892:	499c      	ldr	r1, [pc, #624]	; (7b04 <bt_le_sync+0x508>)
    7894:	5c8a      	ldrb	r2, [r1, r2]
    7896:	4313      	orrs	r3, r2
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    7898:	64bb      	str	r3, [r7, #72]	; 0x48
					   | rxbuf1[i+1] << 16
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    789a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    789c:	2b00      	cmp	r3, #0
    789e:	da00      	bge.n	78a2 <bt_le_sync+0x2a6>
    78a0:	3303      	adds	r3, #3
    78a2:	109b      	asrs	r3, r3, #2
    78a4:	1c5c      	adds	r4, r3, #1
    78a6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    78a8:	f002 fe56 	bl	a558 <rbit>
    78ac:	4601      	mov	r1, r0
    78ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    78b0:	2b00      	cmp	r3, #0
    78b2:	da00      	bge.n	78b6 <bt_le_sync+0x2ba>
    78b4:	3303      	adds	r3, #3
    78b6:	109b      	asrs	r3, r3, #2
    78b8:	009b      	lsls	r3, r3, #2
    78ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
    78bc:	4413      	add	r3, r2
    78be:	681b      	ldr	r3, [r3, #0]
    78c0:	ea81 0203 	eor.w	r2, r1, r3
    78c4:	00a3      	lsls	r3, r4, #2
    78c6:	f107 0168 	add.w	r1, r7, #104	; 0x68
    78ca:	440b      	add	r3, r1
    78cc:	f843 2c60 	str.w	r2, [r3, #-96]
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    78d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    78d2:	3304      	adds	r3, #4
    78d4:	667b      	str	r3, [r7, #100]	; 0x64
    78d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    78d8:	2b2b      	cmp	r3, #43	; 0x2b
    78da:	ddc7      	ble.n	786c <bt_le_sync+0x270>
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    78dc:	4b8a      	ldr	r3, [pc, #552]	; (7b08 <bt_le_sync+0x50c>)
    78de:	691b      	ldr	r3, [r3, #16]
    78e0:	2b00      	cmp	r3, #0
    78e2:	d023      	beq.n	792c <bt_le_sync+0x330>
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    78e4:	4b88      	ldr	r3, [pc, #544]	; (7b08 <bt_le_sync+0x50c>)
    78e6:	68d9      	ldr	r1, [r3, #12]
    78e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    78ea:	1d1a      	adds	r2, r3, #4
    78ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    78ee:	4608      	mov	r0, r1
    78f0:	4611      	mov	r1, r2
    78f2:	461a      	mov	r2, r3
    78f4:	f001 fd0e 	bl	9314 <btle_crcgen_lut>
    78f8:	6478      	str	r0, [r7, #68]	; 0x44
			u32 wire_crc = (p[4+len+2] << 16)
    78fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    78fc:	3306      	adds	r3, #6
    78fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    7900:	4413      	add	r3, r2
    7902:	781b      	ldrb	r3, [r3, #0]
    7904:	041a      	lsls	r2, r3, #16
						 | (p[4+len+1] << 8)
    7906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    7908:	3305      	adds	r3, #5
    790a:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    790c:	440b      	add	r3, r1
    790e:	781b      	ldrb	r3, [r3, #0]
    7910:	021b      	lsls	r3, r3, #8
    7912:	4313      	orrs	r3, r2
						 | (p[4+len+0] << 0);
    7914:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    7916:	3204      	adds	r2, #4
    7918:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    791a:	440a      	add	r2, r1
    791c:	7812      	ldrb	r2, [r2, #0]
    791e:	4313      	orrs	r3, r2
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
			u32 wire_crc = (p[4+len+2] << 16)
    7920:	643b      	str	r3, [r7, #64]	; 0x40
						 | (p[4+len+1] << 8)
						 | (p[4+len+0] << 0);
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    7922:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    7924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    7926:	429a      	cmp	r2, r3
    7928:	d000      	beq.n	792c <bt_le_sync+0x330>
				goto rx_flush;
    792a:	e01b      	b.n	7964 <bt_le_sync+0x368>
		}


		RXLED_SET;
    792c:	4b77      	ldr	r3, [pc, #476]	; (7b0c <bt_le_sync+0x510>)
    792e:	2210      	movs	r2, #16
    7930:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    7932:	4b77      	ldr	r3, [pc, #476]	; (7b10 <bt_le_sync+0x514>)
    7934:	681b      	ldr	r3, [r3, #0]
    7936:	f107 0208 	add.w	r2, r7, #8
    793a:	4610      	mov	r0, r2
    793c:	4798      	blx	r3
		enqueue(LE_PACKET, (uint8_t *)packet);
    793e:	f107 0308 	add.w	r3, r7, #8
    7942:	2001      	movs	r0, #1
    7944:	4619      	mov	r1, r3
    7946:	f7fc fdbf 	bl	44c8 <enqueue>
		le.last_packet = CLK100NS;
    794a:	4b72      	ldr	r3, [pc, #456]	; (7b14 <bt_le_sync+0x518>)
    794c:	681b      	ldr	r3, [r3, #0]
    794e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7952:	f640 4235 	movw	r2, #3125	; 0xc35
    7956:	fb02 f203 	mul.w	r2, r2, r3
    795a:	4b6f      	ldr	r3, [pc, #444]	; (7b18 <bt_le_sync+0x51c>)
    795c:	681b      	ldr	r3, [r3, #0]
    795e:	4413      	add	r3, r2
    7960:	4a69      	ldr	r2, [pc, #420]	; (7b08 <bt_le_sync+0x50c>)
    7962:	6413      	str	r3, [r2, #64]	; 0x40

	rx_flush:
		cc2400_strobe(SFSON);
    7964:	2061      	movs	r0, #97	; 0x61
    7966:	f003 f88b 	bl	aa80 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    796a:	bf00      	nop
    796c:	f003 f87e 	bl	aa6c <cc2400_status>
    7970:	4603      	mov	r3, r0
    7972:	f003 0304 	and.w	r3, r3, #4
    7976:	2b00      	cmp	r3, #0
    7978:	d0f8      	beq.n	796c <bt_le_sync+0x370>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    797a:	4a68      	ldr	r2, [pc, #416]	; (7b1c <bt_le_sync+0x520>)
    797c:	4b67      	ldr	r3, [pc, #412]	; (7b1c <bt_le_sync+0x520>)
    797e:	681b      	ldr	r3, [r3, #0]
    7980:	f023 0301 	bic.w	r3, r3, #1
    7984:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    7986:	e003      	b.n	7990 <bt_le_sync+0x394>
			u8 tmp = (u8)DIO_SSP_DR;
    7988:	4b65      	ldr	r3, [pc, #404]	; (7b20 <bt_le_sync+0x524>)
    798a:	681b      	ldr	r3, [r3, #0]
    798c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    7990:	4b64      	ldr	r3, [pc, #400]	; (7b24 <bt_le_sync+0x528>)
    7992:	681b      	ldr	r3, [r3, #0]
    7994:	f003 0304 	and.w	r3, r3, #4
    7998:	2b00      	cmp	r3, #0
    799a:	d1f5      	bne.n	7988 <bt_le_sync+0x38c>
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    799c:	4b5d      	ldr	r3, [pc, #372]	; (7b14 <bt_le_sync+0x518>)
    799e:	681b      	ldr	r3, [r3, #0]
    79a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
    79a4:	f640 4235 	movw	r2, #3125	; 0xc35
    79a8:	fb02 f203 	mul.w	r2, r2, r3
    79ac:	4b5a      	ldr	r3, [pc, #360]	; (7b18 <bt_le_sync+0x51c>)
    79ae:	681b      	ldr	r3, [r3, #0]
    79b0:	4413      	add	r3, r2
    79b2:	663b      	str	r3, [r7, #96]	; 0x60
		if (now < le.last_packet)
    79b4:	4b54      	ldr	r3, [pc, #336]	; (7b08 <bt_le_sync+0x50c>)
    79b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    79b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    79ba:	429a      	cmp	r2, r3
    79bc:	d905      	bls.n	79ca <bt_le_sync+0x3ce>
			now += 3276800000; // handle rollover
    79be:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    79c0:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    79c4:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    79c8:	663b      	str	r3, [r7, #96]	; 0x60
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    79ca:	4b4f      	ldr	r3, [pc, #316]	; (7b08 <bt_le_sync+0x50c>)
    79cc:	7d1b      	ldrb	r3, [r3, #20]

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
		if  ( // timeout
    79ce:	2b03      	cmp	r3, #3
    79d0:	d003      	beq.n	79da <bt_le_sync+0x3de>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    79d2:	4b4d      	ldr	r3, [pc, #308]	; (7b08 <bt_le_sync+0x50c>)
    79d4:	7d1b      	ldrb	r3, [r3, #20]
    79d6:	2b02      	cmp	r3, #2
    79d8:	d106      	bne.n	79e8 <bt_le_sync+0x3ec>
			&& (now - le.last_packet > 50000000))
    79da:	4b4b      	ldr	r3, [pc, #300]	; (7b08 <bt_le_sync+0x50c>)
    79dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    79de:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    79e0:	1ad3      	subs	r3, r2, r3
    79e2:	4a51      	ldr	r2, [pc, #324]	; (7b28 <bt_le_sync+0x52c>)
    79e4:	4293      	cmp	r3, r2
    79e6:	d803      	bhi.n	79f0 <bt_le_sync+0x3f4>
			// jam finished
			|| (le_jam_count == 1)
    79e8:	4b50      	ldr	r3, [pc, #320]	; (7b2c <bt_le_sync+0x530>)
    79ea:	681b      	ldr	r3, [r3, #0]
    79ec:	2b01      	cmp	r3, #1
    79ee:	d137      	bne.n	7a60 <bt_le_sync+0x464>
			)
		{
			reset_le();
    79f0:	f7ff fc2c 	bl	724c <reset_le>
			le_jam_count = 0;
    79f4:	4b4d      	ldr	r3, [pc, #308]	; (7b2c <bt_le_sync+0x530>)
    79f6:	2200      	movs	r2, #0
    79f8:	601a      	str	r2, [r3, #0]
			TXLED_CLR;
    79fa:	4b4d      	ldr	r3, [pc, #308]	; (7b30 <bt_le_sync+0x534>)
    79fc:	f44f 7280 	mov.w	r2, #256	; 0x100
    7a00:	601a      	str	r2, [r3, #0]

			if (jam_mode == JAM_ONCE) {
    7a02:	4b4c      	ldr	r3, [pc, #304]	; (7b34 <bt_le_sync+0x538>)
    7a04:	781b      	ldrb	r3, [r3, #0]
    7a06:	b2db      	uxtb	r3, r3
    7a08:	2b01      	cmp	r3, #1
    7a0a:	d106      	bne.n	7a1a <bt_le_sync+0x41e>
				jam_mode = JAM_NONE;
    7a0c:	4b49      	ldr	r3, [pc, #292]	; (7b34 <bt_le_sync+0x538>)
    7a0e:	2200      	movs	r2, #0
    7a10:	701a      	strb	r2, [r3, #0]
				requested_mode = MODE_IDLE;
    7a12:	4b49      	ldr	r3, [pc, #292]	; (7b38 <bt_le_sync+0x53c>)
    7a14:	2200      	movs	r2, #0
    7a16:	701a      	strb	r2, [r3, #0]
				goto cleanup;
    7a18:	e066      	b.n	7ae8 <bt_le_sync+0x4ec>
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    7a1a:	79fb      	ldrb	r3, [r7, #7]
    7a1c:	2b0a      	cmp	r3, #10
    7a1e:	d101      	bne.n	7a24 <bt_le_sync+0x428>
				goto cleanup;
    7a20:	bf00      	nop
    7a22:	e061      	b.n	7ae8 <bt_le_sync+0x4ec>

			le.link_state = LINK_LISTENING;
    7a24:	4b38      	ldr	r3, [pc, #224]	; (7b08 <bt_le_sync+0x50c>)
    7a26:	2201      	movs	r2, #1
    7a28:	751a      	strb	r2, [r3, #20]

			cc2400_strobe(SRFOFF);
    7a2a:	2064      	movs	r0, #100	; 0x64
    7a2c:	f003 f828 	bl	aa80 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    7a30:	bf00      	nop
    7a32:	f003 f81b 	bl	aa6c <cc2400_status>
    7a36:	4603      	mov	r3, r0
    7a38:	f003 0304 	and.w	r3, r3, #4
    7a3c:	2b00      	cmp	r3, #0
    7a3e:	d1f8      	bne.n	7a32 <bt_le_sync+0x436>

			/* Retune */
			channel = saved_request != 0 ? saved_request : 2402;
    7a40:	4b3e      	ldr	r3, [pc, #248]	; (7b3c <bt_le_sync+0x540>)
    7a42:	881b      	ldrh	r3, [r3, #0]
    7a44:	b29b      	uxth	r3, r3
    7a46:	2b00      	cmp	r3, #0
    7a48:	d003      	beq.n	7a52 <bt_le_sync+0x456>
    7a4a:	4b3c      	ldr	r3, [pc, #240]	; (7b3c <bt_le_sync+0x540>)
    7a4c:	881b      	ldrh	r3, [r3, #0]
    7a4e:	b29b      	uxth	r3, r3
    7a50:	e001      	b.n	7a56 <bt_le_sync+0x45a>
    7a52:	f640 1362 	movw	r3, #2402	; 0x962
    7a56:	4a3a      	ldr	r2, [pc, #232]	; (7b40 <bt_le_sync+0x544>)
    7a58:	8013      	strh	r3, [r2, #0]
			restart_jamming = 1;
    7a5a:	4b3a      	ldr	r3, [pc, #232]	; (7b44 <bt_le_sync+0x548>)
    7a5c:	2201      	movs	r2, #1
    7a5e:	601a      	str	r2, [r3, #0]
		}

		cc2400_set(SYNCL, le.syncl);
    7a60:	4b29      	ldr	r3, [pc, #164]	; (7b08 <bt_le_sync+0x50c>)
    7a62:	88db      	ldrh	r3, [r3, #6]
    7a64:	202c      	movs	r0, #44	; 0x2c
    7a66:	4619      	mov	r1, r3
    7a68:	f002 ff48 	bl	a8fc <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    7a6c:	4b26      	ldr	r3, [pc, #152]	; (7b08 <bt_le_sync+0x50c>)
    7a6e:	889b      	ldrh	r3, [r3, #4]
    7a70:	202d      	movs	r0, #45	; 0x2d
    7a72:	4619      	mov	r1, r3
    7a74:	f002 ff42 	bl	a8fc <cc2400_set>

		if (do_hop)
    7a78:	4b33      	ldr	r3, [pc, #204]	; (7b48 <bt_le_sync+0x54c>)
    7a7a:	781b      	ldrb	r3, [r3, #0]
    7a7c:	b2db      	uxtb	r3, r3
    7a7e:	2b00      	cmp	r3, #0
    7a80:	d001      	beq.n	7a86 <bt_le_sync+0x48a>
			hop();
    7a82:	f7fe fc37 	bl	62f4 <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    7a86:	4b29      	ldr	r3, [pc, #164]	; (7b2c <bt_le_sync+0x530>)
    7a88:	681b      	ldr	r3, [r3, #0]
    7a8a:	2b00      	cmp	r3, #0
    7a8c:	dd07      	ble.n	7a9e <bt_le_sync+0x4a2>
			le_jam();
    7a8e:	f7fe fbe7 	bl	6260 <le_jam>
			--le_jam_count;
    7a92:	4b26      	ldr	r3, [pc, #152]	; (7b2c <bt_le_sync+0x530>)
    7a94:	681b      	ldr	r3, [r3, #0]
    7a96:	3b01      	subs	r3, #1
    7a98:	4a24      	ldr	r2, [pc, #144]	; (7b2c <bt_le_sync+0x530>)
    7a9a:	6013      	str	r3, [r2, #0]
    7a9c:	e017      	b.n	7ace <bt_le_sync+0x4d2>
		} else {
			/* RX mode */
			dma_init_le();
    7a9e:	f7fd ff67 	bl	5970 <dma_init_le>
			dio_ssp_start();
    7aa2:	f7fe f8d5 	bl	5c50 <dio_ssp_start>

			if (restart_jamming) {
    7aa6:	4b27      	ldr	r3, [pc, #156]	; (7b44 <bt_le_sync+0x548>)
    7aa8:	681b      	ldr	r3, [r3, #0]
    7aaa:	2b00      	cmp	r3, #0
    7aac:	d00c      	beq.n	7ac8 <bt_le_sync+0x4cc>
				cc2400_rx_sync(rbit(le.access_address));
    7aae:	4b16      	ldr	r3, [pc, #88]	; (7b08 <bt_le_sync+0x50c>)
    7ab0:	681b      	ldr	r3, [r3, #0]
    7ab2:	4618      	mov	r0, r3
    7ab4:	f002 fd50 	bl	a558 <rbit>
    7ab8:	4603      	mov	r3, r0
    7aba:	4618      	mov	r0, r3
    7abc:	f7fe f9e2 	bl	5e84 <cc2400_rx_sync>
				restart_jamming = 0;
    7ac0:	4b20      	ldr	r3, [pc, #128]	; (7b44 <bt_le_sync+0x548>)
    7ac2:	2200      	movs	r2, #0
    7ac4:	601a      	str	r2, [r3, #0]
    7ac6:	e002      	b.n	7ace <bt_le_sync+0x4d2>
			} else {
				cc2400_strobe(SRX);
    7ac8:	2062      	movs	r0, #98	; 0x62
    7aca:	f002 ffd9 	bl	aa80 <cc2400_strobe>
			}
		}

		rx_tc = 0;
    7ace:	4b1f      	ldr	r3, [pc, #124]	; (7b4c <bt_le_sync+0x550>)
    7ad0:	2200      	movs	r2, #0
    7ad2:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    7ad4:	4b1e      	ldr	r3, [pc, #120]	; (7b50 <bt_le_sync+0x554>)
    7ad6:	2200      	movs	r2, #0
    7ad8:	601a      	str	r2, [r3, #0]
	dma_init_le();
	dio_ssp_start();

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address

	while (requested_mode == active_mode) {
    7ada:	4b17      	ldr	r3, [pc, #92]	; (7b38 <bt_le_sync+0x53c>)
    7adc:	781b      	ldrb	r3, [r3, #0]
    7ade:	b2db      	uxtb	r3, r3
    7ae0:	79fa      	ldrb	r2, [r7, #7]
    7ae2:	429a      	cmp	r2, r3
    7ae4:	f43f adb1 	beq.w	764a <bt_le_sync+0x4e>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    7ae8:	4b1a      	ldr	r3, [pc, #104]	; (7b54 <bt_le_sync+0x558>)
    7aea:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7aee:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    7af0:	f7fe f942 	bl	5d78 <cc2400_idle>
	dio_ssp_stop();
    7af4:	f7fe f8dc 	bl	5cb0 <dio_ssp_stop>
	cs_trigger_disable();
    7af8:	f7fc ffb8 	bl	4a6c <cs_trigger_disable>
}
    7afc:	376c      	adds	r7, #108	; 0x6c
    7afe:	46bd      	mov	sp, r7
    7b00:	bd90      	pop	{r4, r7, pc}
    7b02:	bf00      	nop
    7b04:	10001088 	.word	0x10001088
    7b08:	10000458 	.word	0x10000458
    7b0c:	2009c038 	.word	0x2009c038
    7b10:	1000099c 	.word	0x1000099c
    7b14:	10000be4 	.word	0x10000be4
    7b18:	40004008 	.word	0x40004008
    7b1c:	40030024 	.word	0x40030024
    7b20:	40030008 	.word	0x40030008
    7b24:	4003000c 	.word	0x4003000c
    7b28:	02faf080 	.word	0x02faf080
    7b2c:	10000994 	.word	0x10000994
    7b30:	2009c03c 	.word	0x2009c03c
    7b34:	10000a40 	.word	0x10000a40
    7b38:	10000a3f 	.word	0x10000a3f
    7b3c:	10000a46 	.word	0x10000a46
    7b40:	1000049c 	.word	0x1000049c
    7b44:	10000a50 	.word	0x10000a50
    7b48:	1000097d 	.word	0x1000097d
    7b4c:	10000b00 	.word	0x10000b00
    7b50:	100010bc 	.word	0x100010bc
    7b54:	e000e180 	.word	0xe000e180

00007b58 <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    7b58:	b580      	push	{r7, lr}
    7b5a:	b08c      	sub	sp, #48	; 0x30
    7b5c:	af00      	add	r7, sp, #0
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    7b5e:	4b6c      	ldr	r3, [pc, #432]	; (7d10 <cb_follow_le+0x1b8>)
    7b60:	881b      	ldrh	r3, [r3, #0]
    7b62:	b29b      	uxth	r3, r3
    7b64:	b2db      	uxtb	r3, r3
    7b66:	3b62      	subs	r3, #98	; 0x62
    7b68:	b2db      	uxtb	r3, r3
    7b6a:	4618      	mov	r0, r3
    7b6c:	f001 face 	bl	910c <btle_channel_index>
    7b70:	4603      	mov	r3, r0
    7b72:	461a      	mov	r2, r3
    7b74:	4b67      	ldr	r3, [pc, #412]	; (7d14 <cb_follow_le+0x1bc>)
    7b76:	5c9b      	ldrb	r3, [r3, r2]
    7b78:	623b      	str	r3, [r7, #32]

	u32 access_address = 0;
    7b7a:	2300      	movs	r3, #0
    7b7c:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < 31; ++i) {
    7b7e:	2300      	movs	r3, #0
    7b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    7b82:	e00e      	b.n	7ba2 <cb_follow_le+0x4a>
		access_address >>= 1;
    7b84:	69fb      	ldr	r3, [r7, #28]
    7b86:	085b      	lsrs	r3, r3, #1
    7b88:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    7b8a:	4a63      	ldr	r2, [pc, #396]	; (7d18 <cb_follow_le+0x1c0>)
    7b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b8e:	4413      	add	r3, r2
    7b90:	781b      	ldrb	r3, [r3, #0]
    7b92:	07db      	lsls	r3, r3, #31
    7b94:	461a      	mov	r2, r3
    7b96:	69fb      	ldr	r3, [r7, #28]
    7b98:	4313      	orrs	r3, r2
    7b9a:	61fb      	str	r3, [r7, #28]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    7b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7b9e:	3301      	adds	r3, #1
    7ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
    7ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7ba4:	2b1e      	cmp	r3, #30
    7ba6:	dded      	ble.n	7b84 <cb_follow_le+0x2c>
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    7ba8:	231f      	movs	r3, #31
    7baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    7bac:	e0a6      	b.n	7cfc <cb_follow_le+0x1a4>
		access_address >>= 1;
    7bae:	69fb      	ldr	r3, [r7, #28]
    7bb0:	085b      	lsrs	r3, r3, #1
    7bb2:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    7bb4:	4a58      	ldr	r2, [pc, #352]	; (7d18 <cb_follow_le+0x1c0>)
    7bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7bb8:	4413      	add	r3, r2
    7bba:	781b      	ldrb	r3, [r3, #0]
    7bbc:	07db      	lsls	r3, r3, #31
    7bbe:	461a      	mov	r2, r3
    7bc0:	69fb      	ldr	r3, [r7, #28]
    7bc2:	4313      	orrs	r3, r2
    7bc4:	61fb      	str	r3, [r7, #28]
		if (access_address == le.access_address) {
    7bc6:	4b55      	ldr	r3, [pc, #340]	; (7d1c <cb_follow_le+0x1c4>)
    7bc8:	681a      	ldr	r2, [r3, #0]
    7bca:	69fb      	ldr	r3, [r7, #28]
    7bcc:	429a      	cmp	r2, r3
    7bce:	f040 8092 	bne.w	7cf6 <cb_follow_le+0x19e>
			for (j = 0; j < 46; ++j) {
    7bd2:	2300      	movs	r3, #0
    7bd4:	62bb      	str	r3, [r7, #40]	; 0x28
    7bd6:	e048      	b.n	7c6a <cb_follow_le+0x112>
				u8 byte = 0;
    7bd8:	2300      	movs	r3, #0
    7bda:	76fb      	strb	r3, [r7, #27]
				for (k = 0; k < 8; k++) {
    7bdc:	2300      	movs	r3, #0
    7bde:	627b      	str	r3, [r7, #36]	; 0x24
    7be0:	e037      	b.n	7c52 <cb_follow_le+0xfa>
					int offset = k + (j * 8) + i - 31;
    7be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7be4:	00da      	lsls	r2, r3, #3
    7be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7be8:	441a      	add	r2, r3
    7bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7bec:	4413      	add	r3, r2
    7bee:	3b1f      	subs	r3, #31
    7bf0:	613b      	str	r3, [r7, #16]
					if (offset >= DMA_SIZE*8*2) break;
    7bf2:	693b      	ldr	r3, [r7, #16]
    7bf4:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    7bf8:	db00      	blt.n	7bfc <cb_follow_le+0xa4>
    7bfa:	e02d      	b.n	7c58 <cb_follow_le+0x100>
					int bit = unpacked[offset];
    7bfc:	4a46      	ldr	r2, [pc, #280]	; (7d18 <cb_follow_le+0x1c0>)
    7bfe:	693b      	ldr	r3, [r7, #16]
    7c00:	4413      	add	r3, r2
    7c02:	781b      	ldrb	r3, [r3, #0]
    7c04:	617b      	str	r3, [r7, #20]
					if (j >= 4) { // unwhiten data bytes
    7c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7c08:	2b03      	cmp	r3, #3
    7c0a:	dd16      	ble.n	7c3a <cb_follow_le+0xe2>
						bit ^= whitening[idx];
    7c0c:	4a44      	ldr	r2, [pc, #272]	; (7d20 <cb_follow_le+0x1c8>)
    7c0e:	6a3b      	ldr	r3, [r7, #32]
    7c10:	4413      	add	r3, r2
    7c12:	781b      	ldrb	r3, [r3, #0]
    7c14:	461a      	mov	r2, r3
    7c16:	697b      	ldr	r3, [r7, #20]
    7c18:	4053      	eors	r3, r2
    7c1a:	617b      	str	r3, [r7, #20]
						idx = (idx + 1) % sizeof(whitening);
    7c1c:	6a3b      	ldr	r3, [r7, #32]
    7c1e:	3301      	adds	r3, #1
    7c20:	4619      	mov	r1, r3
    7c22:	4b40      	ldr	r3, [pc, #256]	; (7d24 <cb_follow_le+0x1cc>)
    7c24:	fba1 2303 	umull	r2, r3, r1, r3
    7c28:	1ac8      	subs	r0, r1, r3
    7c2a:	0840      	lsrs	r0, r0, #1
    7c2c:	4403      	add	r3, r0
    7c2e:	099a      	lsrs	r2, r3, #6
    7c30:	4613      	mov	r3, r2
    7c32:	01db      	lsls	r3, r3, #7
    7c34:	1a9b      	subs	r3, r3, r2
    7c36:	1aca      	subs	r2, r1, r3
    7c38:	623a      	str	r2, [r7, #32]
					}
					byte |= bit << k;
    7c3a:	697a      	ldr	r2, [r7, #20]
    7c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7c3e:	fa02 f303 	lsl.w	r3, r2, r3
    7c42:	b2da      	uxtb	r2, r3
    7c44:	7efb      	ldrb	r3, [r7, #27]
    7c46:	4313      	orrs	r3, r2
    7c48:	b2db      	uxtb	r3, r3
    7c4a:	76fb      	strb	r3, [r7, #27]
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    7c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7c4e:	3301      	adds	r3, #1
    7c50:	627b      	str	r3, [r7, #36]	; 0x24
    7c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7c54:	2b07      	cmp	r3, #7
    7c56:	ddc4      	ble.n	7be2 <cb_follow_le+0x8a>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    7c58:	4b33      	ldr	r3, [pc, #204]	; (7d28 <cb_follow_le+0x1d0>)
    7c5a:	681a      	ldr	r2, [r3, #0]
    7c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7c5e:	4413      	add	r3, r2
    7c60:	7efa      	ldrb	r2, [r7, #27]
    7c62:	701a      	strb	r2, [r3, #0]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    7c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7c66:	3301      	adds	r3, #1
    7c68:	62bb      	str	r3, [r7, #40]	; 0x28
    7c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    7c6c:	2b2d      	cmp	r3, #45	; 0x2d
    7c6e:	ddb3      	ble.n	7bd8 <cb_follow_le+0x80>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    7c70:	4b2a      	ldr	r3, [pc, #168]	; (7d1c <cb_follow_le+0x1c4>)
    7c72:	691b      	ldr	r3, [r3, #16]
    7c74:	2b00      	cmp	r3, #0
    7c76:	d02e      	beq.n	7cd6 <cb_follow_le+0x17e>
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    7c78:	4b2b      	ldr	r3, [pc, #172]	; (7d28 <cb_follow_le+0x1d0>)
    7c7a:	681b      	ldr	r3, [r3, #0]
    7c7c:	3305      	adds	r3, #5
    7c7e:	781b      	ldrb	r3, [r3, #0]
    7c80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7c84:	3302      	adds	r3, #2
    7c86:	60fb      	str	r3, [r7, #12]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
    7c88:	4b24      	ldr	r3, [pc, #144]	; (7d1c <cb_follow_le+0x1c4>)
    7c8a:	68da      	ldr	r2, [r3, #12]
    7c8c:	4b26      	ldr	r3, [pc, #152]	; (7d28 <cb_follow_le+0x1d0>)
    7c8e:	681b      	ldr	r3, [r3, #0]
    7c90:	3304      	adds	r3, #4
    7c92:	4610      	mov	r0, r2
    7c94:	4619      	mov	r1, r3
    7c96:	68fa      	ldr	r2, [r7, #12]
    7c98:	f001 fb3c 	bl	9314 <btle_crcgen_lut>
    7c9c:	60b8      	str	r0, [r7, #8]
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    7c9e:	4b22      	ldr	r3, [pc, #136]	; (7d28 <cb_follow_le+0x1d0>)
    7ca0:	681a      	ldr	r2, [r3, #0]
    7ca2:	68fb      	ldr	r3, [r7, #12]
    7ca4:	3306      	adds	r3, #6
    7ca6:	4413      	add	r3, r2
    7ca8:	781b      	ldrb	r3, [r3, #0]
    7caa:	041a      	lsls	r2, r3, #16
							 | (idle_rxbuf[4+len+1] << 8)
    7cac:	4b1e      	ldr	r3, [pc, #120]	; (7d28 <cb_follow_le+0x1d0>)
    7cae:	6819      	ldr	r1, [r3, #0]
    7cb0:	68fb      	ldr	r3, [r7, #12]
    7cb2:	3305      	adds	r3, #5
    7cb4:	440b      	add	r3, r1
    7cb6:	781b      	ldrb	r3, [r3, #0]
    7cb8:	021b      	lsls	r3, r3, #8
    7cba:	4313      	orrs	r3, r2
							 |  idle_rxbuf[4+len+0];
    7cbc:	4a1a      	ldr	r2, [pc, #104]	; (7d28 <cb_follow_le+0x1d0>)
    7cbe:	6812      	ldr	r2, [r2, #0]
    7cc0:	68f9      	ldr	r1, [r7, #12]
    7cc2:	3104      	adds	r1, #4
    7cc4:	440a      	add	r2, r1
    7cc6:	7812      	ldrb	r2, [r2, #0]
    7cc8:	4313      	orrs	r3, r2

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    7cca:	607b      	str	r3, [r7, #4]
							 | (idle_rxbuf[4+len+1] << 8)
							 |  idle_rxbuf[4+len+0];
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    7ccc:	68ba      	ldr	r2, [r7, #8]
    7cce:	687b      	ldr	r3, [r7, #4]
    7cd0:	429a      	cmp	r2, r3
    7cd2:	d000      	beq.n	7cd6 <cb_follow_le+0x17e>
					break;
    7cd4:	e017      	b.n	7d06 <cb_follow_le+0x1ae>
			}

			// send to PC
			enqueue(LE_PACKET, idle_rxbuf);
    7cd6:	4b14      	ldr	r3, [pc, #80]	; (7d28 <cb_follow_le+0x1d0>)
    7cd8:	681b      	ldr	r3, [r3, #0]
    7cda:	2001      	movs	r0, #1
    7cdc:	4619      	mov	r1, r3
    7cde:	f7fc fbf3 	bl	44c8 <enqueue>
			RXLED_SET;
    7ce2:	4b12      	ldr	r3, [pc, #72]	; (7d2c <cb_follow_le+0x1d4>)
    7ce4:	2210      	movs	r2, #16
    7ce6:	601a      	str	r2, [r3, #0]

			packet_cb(idle_rxbuf);
    7ce8:	4b11      	ldr	r3, [pc, #68]	; (7d30 <cb_follow_le+0x1d8>)
    7cea:	681b      	ldr	r3, [r3, #0]
    7cec:	4a0e      	ldr	r2, [pc, #56]	; (7d28 <cb_follow_le+0x1d0>)
    7cee:	6812      	ldr	r2, [r2, #0]
    7cf0:	4610      	mov	r0, r2
    7cf2:	4798      	blx	r3

			break;
    7cf4:	e007      	b.n	7d06 <cb_follow_le+0x1ae>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    7cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7cf8:	3301      	adds	r3, #1
    7cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    7cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    7cfe:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    7d02:	f6ff af54 	blt.w	7bae <cb_follow_le+0x56>

			break;
		}
	}

	return 1;
    7d06:	2301      	movs	r3, #1
}
    7d08:	4618      	mov	r0, r3
    7d0a:	3730      	adds	r7, #48	; 0x30
    7d0c:	46bd      	mov	sp, r7
    7d0e:	bd80      	pop	{r7, pc}
    7d10:	1000049c 	.word	0x1000049c
    7d14:	0000c6b4 	.word	0x0000c6b4
    7d18:	10000d08 	.word	0x10000d08
    7d1c:	10000458 	.word	0x10000458
    7d20:	0000c634 	.word	0x0000c634
    7d24:	02040811 	.word	0x02040811
    7d28:	10000454 	.word	0x10000454
    7d2c:	2009c038 	.word	0x2009c038
    7d30:	1000099c 	.word	0x1000099c

00007d34 <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    7d34:	b580      	push	{r7, lr}
    7d36:	b08a      	sub	sp, #40	; 0x28
    7d38:	af00      	add	r7, sp, #0
    7d3a:	6078      	str	r0, [r7, #4]
	int i;
	u32 aa = 0;
    7d3c:	2300      	movs	r3, #0
    7d3e:	623b      	str	r3, [r7, #32]
#define ADV_ADDRESS_IDX 0
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
    7d40:	687b      	ldr	r3, [r7, #4]
    7d42:	61fb      	str	r3, [r7, #28]
	u8 header = packet[HEADER_IDX];
    7d44:	687b      	ldr	r3, [r7, #4]
    7d46:	791b      	ldrb	r3, [r3, #4]
    7d48:	76fb      	strb	r3, [r7, #27]
	u8 *data_len = &packet[DATA_LEN_IDX];
    7d4a:	687b      	ldr	r3, [r7, #4]
    7d4c:	3305      	adds	r3, #5
    7d4e:	617b      	str	r3, [r7, #20]
	u8 *data = &packet[DATA_START_IDX];
    7d50:	687b      	ldr	r3, [r7, #4]
    7d52:	3306      	adds	r3, #6
    7d54:	613b      	str	r3, [r7, #16]
	u8 *crc = &packet[DATA_START_IDX + *data_len];
    7d56:	697b      	ldr	r3, [r7, #20]
    7d58:	781b      	ldrb	r3, [r3, #0]
    7d5a:	3306      	adds	r3, #6
    7d5c:	461a      	mov	r2, r3
    7d5e:	687b      	ldr	r3, [r7, #4]
    7d60:	4413      	add	r3, r2
    7d62:	60fb      	str	r3, [r7, #12]

	if (le.link_state == LINK_CONN_PENDING) {
    7d64:	4b8b      	ldr	r3, [pc, #556]	; (7f94 <connection_follow_cb+0x260>)
    7d66:	7d1b      	ldrb	r3, [r3, #20]
    7d68:	2b02      	cmp	r3, #2
    7d6a:	d11c      	bne.n	7da6 <connection_follow_cb+0x72>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    7d6c:	4b89      	ldr	r3, [pc, #548]	; (7f94 <connection_follow_cb+0x260>)
    7d6e:	2203      	movs	r2, #3
    7d70:	751a      	strb	r2, [r3, #20]
		le.conn_epoch = clkn;
    7d72:	4b89      	ldr	r3, [pc, #548]	; (7f98 <connection_follow_cb+0x264>)
    7d74:	681b      	ldr	r3, [r3, #0]
    7d76:	4a87      	ldr	r2, [pc, #540]	; (7f94 <connection_follow_cb+0x260>)
    7d78:	6193      	str	r3, [r2, #24]
		le.interval_timer = le.conn_interval - 1;
    7d7a:	4b86      	ldr	r3, [pc, #536]	; (7f94 <connection_follow_cb+0x260>)
    7d7c:	8bdb      	ldrh	r3, [r3, #30]
    7d7e:	3b01      	subs	r3, #1
    7d80:	b29a      	uxth	r2, r3
    7d82:	4b84      	ldr	r3, [pc, #528]	; (7f94 <connection_follow_cb+0x260>)
    7d84:	839a      	strh	r2, [r3, #28]
		le.conn_count = 0;
    7d86:	4b83      	ldr	r3, [pc, #524]	; (7f94 <connection_follow_cb+0x260>)
    7d88:	2200      	movs	r2, #0
    7d8a:	841a      	strh	r2, [r3, #32]
		le.update_pending = 0;
    7d8c:	4b81      	ldr	r3, [pc, #516]	; (7f94 <connection_follow_cb+0x260>)
    7d8e:	2200      	movs	r2, #0
    7d90:	629a      	str	r2, [r3, #40]	; 0x28

		// hue hue hue
		if (jam_mode != JAM_NONE)
    7d92:	4b82      	ldr	r3, [pc, #520]	; (7f9c <connection_follow_cb+0x268>)
    7d94:	781b      	ldrb	r3, [r3, #0]
    7d96:	b2db      	uxtb	r3, r3
    7d98:	2b00      	cmp	r3, #0
    7d9a:	f000 80f7 	beq.w	7f8c <connection_follow_cb+0x258>
			le_jam_count = JAM_COUNT_DEFAULT;
    7d9e:	4b80      	ldr	r3, [pc, #512]	; (7fa0 <connection_follow_cb+0x26c>)
    7da0:	2228      	movs	r2, #40	; 0x28
    7da2:	601a      	str	r2, [r3, #0]
    7da4:	e0f2      	b.n	7f8c <connection_follow_cb+0x258>

	} else if (le.link_state == LINK_CONNECTED) {
    7da6:	4b7b      	ldr	r3, [pc, #492]	; (7f94 <connection_follow_cb+0x260>)
    7da8:	7d1b      	ldrb	r3, [r3, #20]
    7daa:	2b03      	cmp	r3, #3
    7dac:	d16f      	bne.n	7e8e <connection_follow_cb+0x15a>
		u8 llid =  header & 0x03;
    7dae:	7efb      	ldrb	r3, [r7, #27]
    7db0:	f003 0303 	and.w	r3, r3, #3
    7db4:	72fb      	strb	r3, [r7, #11]

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    7db6:	4b77      	ldr	r3, [pc, #476]	; (7f94 <connection_follow_cb+0x260>)
    7db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7dba:	2b00      	cmp	r3, #0
    7dbc:	d021      	beq.n	7e02 <connection_follow_cb+0xce>
    7dbe:	4b75      	ldr	r3, [pc, #468]	; (7f94 <connection_follow_cb+0x260>)
    7dc0:	8c1b      	ldrh	r3, [r3, #32]
    7dc2:	b29a      	uxth	r2, r3
    7dc4:	4b73      	ldr	r3, [pc, #460]	; (7f94 <connection_follow_cb+0x260>)
    7dc6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    7dc8:	429a      	cmp	r2, r3
    7dca:	d11a      	bne.n	7e02 <connection_follow_cb+0xce>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    7dcc:	4b72      	ldr	r3, [pc, #456]	; (7f98 <connection_follow_cb+0x264>)
    7dce:	681b      	ldr	r3, [r3, #0]
    7dd0:	4a70      	ldr	r2, [pc, #448]	; (7f94 <connection_follow_cb+0x260>)
    7dd2:	6193      	str	r3, [r2, #24]
			le.conn_interval = le.interval_update;
    7dd4:	4b6f      	ldr	r3, [pc, #444]	; (7f94 <connection_follow_cb+0x260>)
    7dd6:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    7dd8:	4b6e      	ldr	r3, [pc, #440]	; (7f94 <connection_follow_cb+0x260>)
    7dda:	83da      	strh	r2, [r3, #30]
			le.interval_timer = le.interval_update - 1;
    7ddc:	4b6d      	ldr	r3, [pc, #436]	; (7f94 <connection_follow_cb+0x260>)
    7dde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    7de0:	3b01      	subs	r3, #1
    7de2:	b29a      	uxth	r2, r3
    7de4:	4b6b      	ldr	r3, [pc, #428]	; (7f94 <connection_follow_cb+0x260>)
    7de6:	839a      	strh	r2, [r3, #28]
			le.win_size = le.win_size_update;
    7de8:	4b6a      	ldr	r3, [pc, #424]	; (7f94 <connection_follow_cb+0x260>)
    7dea:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    7dee:	4b69      	ldr	r3, [pc, #420]	; (7f94 <connection_follow_cb+0x260>)
    7df0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			le.win_offset = le.win_offset_update;
    7df4:	4b67      	ldr	r3, [pc, #412]	; (7f94 <connection_follow_cb+0x260>)
    7df6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    7df8:	4b66      	ldr	r3, [pc, #408]	; (7f94 <connection_follow_cb+0x260>)
    7dfa:	849a      	strh	r2, [r3, #36]	; 0x24
			le.update_pending = 0;
    7dfc:	4b65      	ldr	r3, [pc, #404]	; (7f94 <connection_follow_cb+0x260>)
    7dfe:	2200      	movs	r2, #0
    7e00:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if (llid == 0x03 && data[0] == 0x00) {
    7e02:	7afb      	ldrb	r3, [r7, #11]
    7e04:	2b03      	cmp	r3, #3
    7e06:	d141      	bne.n	7e8c <connection_follow_cb+0x158>
    7e08:	693b      	ldr	r3, [r7, #16]
    7e0a:	781b      	ldrb	r3, [r3, #0]
    7e0c:	2b00      	cmp	r3, #0
    7e0e:	d13d      	bne.n	7e8c <connection_follow_cb+0x158>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    7e10:	687b      	ldr	r3, [r7, #4]
    7e12:	79da      	ldrb	r2, [r3, #7]
    7e14:	4b5f      	ldr	r3, [pc, #380]	; (7f94 <connection_follow_cb+0x260>)
    7e16:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    7e1a:	687b      	ldr	r3, [r7, #4]
    7e1c:	3308      	adds	r3, #8
    7e1e:	781b      	ldrb	r3, [r3, #0]
    7e20:	b29a      	uxth	r2, r3
    7e22:	687b      	ldr	r3, [r7, #4]
    7e24:	3309      	adds	r3, #9
    7e26:	781b      	ldrb	r3, [r3, #0]
    7e28:	b29b      	uxth	r3, r3
    7e2a:	021b      	lsls	r3, r3, #8
    7e2c:	b29b      	uxth	r3, r3
    7e2e:	4413      	add	r3, r2
    7e30:	b29a      	uxth	r2, r3
    7e32:	4b58      	ldr	r3, [pc, #352]	; (7f94 <connection_follow_cb+0x260>)
    7e34:	865a      	strh	r2, [r3, #50]	; 0x32
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    7e36:	687b      	ldr	r3, [r7, #4]
    7e38:	330a      	adds	r3, #10
    7e3a:	781b      	ldrb	r3, [r3, #0]
    7e3c:	b29a      	uxth	r2, r3
    7e3e:	687b      	ldr	r3, [r7, #4]
    7e40:	330b      	adds	r3, #11
    7e42:	781b      	ldrb	r3, [r3, #0]
    7e44:	b29b      	uxth	r3, r3
    7e46:	021b      	lsls	r3, r3, #8
    7e48:	b29b      	uxth	r3, r3
    7e4a:	4413      	add	r3, r2
    7e4c:	b29a      	uxth	r2, r3
    7e4e:	4b51      	ldr	r3, [pc, #324]	; (7f94 <connection_follow_cb+0x260>)
    7e50:	85da      	strh	r2, [r3, #46]	; 0x2e
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    7e52:	687b      	ldr	r3, [r7, #4]
    7e54:	3310      	adds	r3, #16
    7e56:	781b      	ldrb	r3, [r3, #0]
    7e58:	b29a      	uxth	r2, r3
    7e5a:	687b      	ldr	r3, [r7, #4]
    7e5c:	3311      	adds	r3, #17
    7e5e:	781b      	ldrb	r3, [r3, #0]
    7e60:	b29b      	uxth	r3, r3
    7e62:	021b      	lsls	r3, r3, #8
    7e64:	b29b      	uxth	r3, r3
    7e66:	4413      	add	r3, r2
    7e68:	b29a      	uxth	r2, r3
    7e6a:	4b4a      	ldr	r3, [pc, #296]	; (7f94 <connection_follow_cb+0x260>)
    7e6c:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (le.update_instant - le.conn_count < 32767)
    7e6e:	4b49      	ldr	r3, [pc, #292]	; (7f94 <connection_follow_cb+0x260>)
    7e70:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    7e72:	461a      	mov	r2, r3
    7e74:	4b47      	ldr	r3, [pc, #284]	; (7f94 <connection_follow_cb+0x260>)
    7e76:	8c1b      	ldrh	r3, [r3, #32]
    7e78:	b29b      	uxth	r3, r3
    7e7a:	1ad3      	subs	r3, r2, r3
    7e7c:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    7e80:	4293      	cmp	r3, r2
    7e82:	dc03      	bgt.n	7e8c <connection_follow_cb+0x158>
				le.update_pending = 1;
    7e84:	4b43      	ldr	r3, [pc, #268]	; (7f94 <connection_follow_cb+0x260>)
    7e86:	2201      	movs	r2, #1
    7e88:	629a      	str	r2, [r3, #40]	; 0x28
    7e8a:	e07f      	b.n	7f8c <connection_follow_cb+0x258>
    7e8c:	e07e      	b.n	7f8c <connection_follow_cb+0x258>
		}

	} else if (le.link_state == LINK_LISTENING) {
    7e8e:	4b41      	ldr	r3, [pc, #260]	; (7f94 <connection_follow_cb+0x260>)
    7e90:	7d1b      	ldrb	r3, [r3, #20]
    7e92:	2b01      	cmp	r3, #1
    7e94:	d17a      	bne.n	7f8c <connection_follow_cb+0x258>
		u8 pkt_type = packet[4] & 0x0F;
    7e96:	687b      	ldr	r3, [r7, #4]
    7e98:	3304      	adds	r3, #4
    7e9a:	781b      	ldrb	r3, [r3, #0]
    7e9c:	f003 030f 	and.w	r3, r3, #15
    7ea0:	72bb      	strb	r3, [r7, #10]
		if (pkt_type == 0x05) {
    7ea2:	7abb      	ldrb	r3, [r7, #10]
    7ea4:	2b05      	cmp	r3, #5
    7ea6:	d171      	bne.n	7f8c <connection_follow_cb+0x258>
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    7ea8:	4b3a      	ldr	r3, [pc, #232]	; (7f94 <connection_follow_cb+0x260>)
    7eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    7eac:	2b00      	cmp	r3, #0
    7eae:	d014      	beq.n	7eda <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    7eb0:	687b      	ldr	r3, [r7, #4]
    7eb2:	3306      	adds	r3, #6
    7eb4:	483b      	ldr	r0, [pc, #236]	; (7fa4 <connection_follow_cb+0x270>)
    7eb6:	4619      	mov	r1, r3
    7eb8:	2206      	movs	r2, #6
    7eba:	f004 fac1 	bl	c440 <memcmp>
    7ebe:	4603      	mov	r3, r0
	} else if (le.link_state == LINK_LISTENING) {
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    7ec0:	2b00      	cmp	r3, #0
    7ec2:	d00a      	beq.n	7eda <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    7ec4:	687b      	ldr	r3, [r7, #4]
    7ec6:	330c      	adds	r3, #12
    7ec8:	4836      	ldr	r0, [pc, #216]	; (7fa4 <connection_follow_cb+0x270>)
    7eca:	4619      	mov	r1, r3
    7ecc:	2206      	movs	r2, #6
    7ece:	f004 fab7 	bl	c440 <memcmp>
    7ed2:	4603      	mov	r3, r0
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    7ed4:	2b00      	cmp	r3, #0
    7ed6:	d000      	beq.n	7eda <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
    7ed8:	e058      	b.n	7f8c <connection_follow_cb+0x258>
			}

			le.link_state = LINK_CONN_PENDING;
    7eda:	4b2e      	ldr	r3, [pc, #184]	; (7f94 <connection_follow_cb+0x260>)
    7edc:	2202      	movs	r2, #2
    7ede:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    7ee0:	4b2c      	ldr	r3, [pc, #176]	; (7f94 <connection_follow_cb+0x260>)
    7ee2:	2200      	movs	r2, #0
    7ee4:	611a      	str	r2, [r3, #16]

			for (i = 0; i < 4; ++i)
    7ee6:	2300      	movs	r3, #0
    7ee8:	627b      	str	r3, [r7, #36]	; 0x24
    7eea:	e011      	b.n	7f10 <connection_follow_cb+0x1dc>
				aa |= packet[18+i] << (i*8);
    7eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7eee:	3312      	adds	r3, #18
    7ef0:	461a      	mov	r2, r3
    7ef2:	687b      	ldr	r3, [r7, #4]
    7ef4:	4413      	add	r3, r2
    7ef6:	781b      	ldrb	r3, [r3, #0]
    7ef8:	461a      	mov	r2, r3
    7efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7efc:	00db      	lsls	r3, r3, #3
    7efe:	fa02 f303 	lsl.w	r3, r2, r3
    7f02:	461a      	mov	r2, r3
    7f04:	6a3b      	ldr	r3, [r7, #32]
    7f06:	4313      	orrs	r3, r2
    7f08:	623b      	str	r3, [r7, #32]
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    7f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7f0c:	3301      	adds	r3, #1
    7f0e:	627b      	str	r3, [r7, #36]	; 0x24
    7f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7f12:	2b03      	cmp	r3, #3
    7f14:	ddea      	ble.n	7eec <connection_follow_cb+0x1b8>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    7f16:	6a38      	ldr	r0, [r7, #32]
    7f18:	f7ff f97e 	bl	7218 <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    7f1c:	687b      	ldr	r3, [r7, #4]
    7f1e:	3318      	adds	r3, #24
    7f20:	781b      	ldrb	r3, [r3, #0]
    7f22:	041a      	lsls	r2, r3, #16
						| (packet[CRC_INIT+1] << 8)
    7f24:	687b      	ldr	r3, [r7, #4]
    7f26:	3317      	adds	r3, #23
    7f28:	781b      	ldrb	r3, [r3, #0]
    7f2a:	021b      	lsls	r3, r3, #8
    7f2c:	4313      	orrs	r3, r2
						|  packet[CRC_INIT+0];
    7f2e:	687a      	ldr	r2, [r7, #4]
    7f30:	3216      	adds	r2, #22
    7f32:	7812      	ldrb	r2, [r2, #0]
    7f34:	4313      	orrs	r3, r2
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    7f36:	461a      	mov	r2, r3
    7f38:	4b16      	ldr	r3, [pc, #88]	; (7f94 <connection_follow_cb+0x260>)
    7f3a:	609a      	str	r2, [r3, #8]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    7f3c:	4b15      	ldr	r3, [pc, #84]	; (7f94 <connection_follow_cb+0x260>)
    7f3e:	689b      	ldr	r3, [r3, #8]
    7f40:	4618      	mov	r0, r3
    7f42:	f002 fb09 	bl	a558 <rbit>
    7f46:	4602      	mov	r2, r0
    7f48:	4b12      	ldr	r3, [pc, #72]	; (7f94 <connection_follow_cb+0x260>)
    7f4a:	60da      	str	r2, [r3, #12]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    7f4c:	687b      	ldr	r3, [r7, #4]
    7f4e:	7e5a      	ldrb	r2, [r3, #25]
    7f50:	4b10      	ldr	r3, [pc, #64]	; (7f94 <connection_follow_cb+0x260>)
    7f52:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    7f56:	687b      	ldr	r3, [r7, #4]
    7f58:	331a      	adds	r3, #26
    7f5a:	781b      	ldrb	r3, [r3, #0]
    7f5c:	b29a      	uxth	r2, r3
    7f5e:	4b0d      	ldr	r3, [pc, #52]	; (7f94 <connection_follow_cb+0x260>)
    7f60:	849a      	strh	r2, [r3, #36]	; 0x24

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = packet[CONN_INTERVAL];
    7f62:	687b      	ldr	r3, [r7, #4]
    7f64:	331c      	adds	r3, #28
    7f66:	781b      	ldrb	r3, [r3, #0]
    7f68:	b29a      	uxth	r2, r3
    7f6a:	4b0a      	ldr	r3, [pc, #40]	; (7f94 <connection_follow_cb+0x260>)
    7f6c:	83da      	strh	r2, [r3, #30]

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    7f6e:	687b      	ldr	r3, [r7, #4]
    7f70:	3327      	adds	r3, #39	; 0x27
    7f72:	781b      	ldrb	r3, [r3, #0]
    7f74:	f003 031f 	and.w	r3, r3, #31
    7f78:	b2da      	uxtb	r2, r3
    7f7a:	4b06      	ldr	r3, [pc, #24]	; (7f94 <connection_follow_cb+0x260>)
    7f7c:	759a      	strb	r2, [r3, #22]
			le.channel_idx = le.channel_increment;
    7f7e:	4b05      	ldr	r3, [pc, #20]	; (7f94 <connection_follow_cb+0x260>)
    7f80:	7d9a      	ldrb	r2, [r3, #22]
    7f82:	4b04      	ldr	r3, [pc, #16]	; (7f94 <connection_follow_cb+0x260>)
    7f84:	755a      	strb	r2, [r3, #21]

			// Hop to the initial channel immediately
			do_hop = 1;
    7f86:	4b08      	ldr	r3, [pc, #32]	; (7fa8 <connection_follow_cb+0x274>)
    7f88:	2201      	movs	r2, #1
    7f8a:	701a      	strb	r2, [r3, #0]
		}
	}
}
    7f8c:	3728      	adds	r7, #40	; 0x28
    7f8e:	46bd      	mov	sp, r7
    7f90:	bd80      	pop	{r7, pc}
    7f92:	bf00      	nop
    7f94:	10000458 	.word	0x10000458
    7f98:	10000be4 	.word	0x10000be4
    7f9c:	10000a40 	.word	0x10000a40
    7fa0:	10000994 	.word	0x10000994
    7fa4:	1000048c 	.word	0x1000048c
    7fa8:	1000097d 	.word	0x1000097d

00007fac <bt_follow_le>:

void bt_follow_le() {
    7fac:	b580      	push	{r7, lr}
    7fae:	af00      	add	r7, sp, #0
	reset_le();
    7fb0:	f7ff f94c 	bl	724c <reset_le>
	packet_cb = connection_follow_cb;
    7fb4:	4b04      	ldr	r3, [pc, #16]	; (7fc8 <bt_follow_le+0x1c>)
    7fb6:	4a05      	ldr	r2, [pc, #20]	; (7fcc <bt_follow_le+0x20>)
    7fb8:	601a      	str	r2, [r3, #0]
	bt_le_sync(MODE_BT_FOLLOW_LE);
    7fba:	2009      	movs	r0, #9
    7fbc:	f7ff fb1e 	bl	75fc <bt_le_sync>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    7fc0:	4b03      	ldr	r3, [pc, #12]	; (7fd0 <bt_follow_le+0x24>)
    7fc2:	2200      	movs	r2, #0
    7fc4:	701a      	strb	r2, [r3, #0]
}
    7fc6:	bd80      	pop	{r7, pc}
    7fc8:	1000099c 	.word	0x1000099c
    7fcc:	00007d35 	.word	0x00007d35
    7fd0:	10000a3e 	.word	0x10000a3e

00007fd4 <le_promisc_state>:

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    7fd4:	b580      	push	{r7, lr}
    7fd6:	b092      	sub	sp, #72	; 0x48
    7fd8:	af00      	add	r7, sp, #0
    7fda:	4603      	mov	r3, r0
    7fdc:	60b9      	str	r1, [r7, #8]
    7fde:	607a      	str	r2, [r7, #4]
    7fe0:	73fb      	strb	r3, [r7, #15]
	u8 buf[50] = { 0, };
    7fe2:	f107 0314 	add.w	r3, r7, #20
    7fe6:	2200      	movs	r2, #0
    7fe8:	601a      	str	r2, [r3, #0]
    7fea:	3304      	adds	r3, #4
    7fec:	2200      	movs	r2, #0
    7fee:	601a      	str	r2, [r3, #0]
    7ff0:	3304      	adds	r3, #4
    7ff2:	2200      	movs	r2, #0
    7ff4:	601a      	str	r2, [r3, #0]
    7ff6:	3304      	adds	r3, #4
    7ff8:	2200      	movs	r2, #0
    7ffa:	601a      	str	r2, [r3, #0]
    7ffc:	3304      	adds	r3, #4
    7ffe:	2200      	movs	r2, #0
    8000:	601a      	str	r2, [r3, #0]
    8002:	3304      	adds	r3, #4
    8004:	2200      	movs	r2, #0
    8006:	601a      	str	r2, [r3, #0]
    8008:	3304      	adds	r3, #4
    800a:	2200      	movs	r2, #0
    800c:	601a      	str	r2, [r3, #0]
    800e:	3304      	adds	r3, #4
    8010:	2200      	movs	r2, #0
    8012:	601a      	str	r2, [r3, #0]
    8014:	3304      	adds	r3, #4
    8016:	2200      	movs	r2, #0
    8018:	601a      	str	r2, [r3, #0]
    801a:	3304      	adds	r3, #4
    801c:	2200      	movs	r2, #0
    801e:	601a      	str	r2, [r3, #0]
    8020:	3304      	adds	r3, #4
    8022:	2200      	movs	r2, #0
    8024:	601a      	str	r2, [r3, #0]
    8026:	3304      	adds	r3, #4
    8028:	2200      	movs	r2, #0
    802a:	601a      	str	r2, [r3, #0]
    802c:	3304      	adds	r3, #4
    802e:	2200      	movs	r2, #0
    8030:	801a      	strh	r2, [r3, #0]
    8032:	3302      	adds	r3, #2
	if (len > 49)
    8034:	687b      	ldr	r3, [r7, #4]
    8036:	2b31      	cmp	r3, #49	; 0x31
    8038:	d901      	bls.n	803e <le_promisc_state+0x6a>
		len = 49;
    803a:	2331      	movs	r3, #49	; 0x31
    803c:	607b      	str	r3, [r7, #4]

	buf[0] = type;
    803e:	7bfb      	ldrb	r3, [r7, #15]
    8040:	753b      	strb	r3, [r7, #20]
	memcpy(&buf[1], data, len);
    8042:	f107 0314 	add.w	r3, r7, #20
    8046:	3301      	adds	r3, #1
    8048:	4618      	mov	r0, r3
    804a:	68b9      	ldr	r1, [r7, #8]
    804c:	687a      	ldr	r2, [r7, #4]
    804e:	f004 fa29 	bl	c4a4 <memcpy>
	enqueue(LE_PROMISC, buf);
    8052:	f107 0314 	add.w	r3, r7, #20
    8056:	2005      	movs	r0, #5
    8058:	4619      	mov	r1, r3
    805a:	f7fc fa35 	bl	44c8 <enqueue>
}
    805e:	3748      	adds	r7, #72	; 0x48
    8060:	46bd      	mov	sp, r7
    8062:	bd80      	pop	{r7, pc}

00008064 <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    8064:	b580      	push	{r7, lr}
    8066:	b084      	sub	sp, #16
    8068:	af00      	add	r7, sp, #0
    806a:	6078      	str	r0, [r7, #4]
	static u32 first_ts = 0;
	if (channel == 2404) {
    806c:	4b55      	ldr	r3, [pc, #340]	; (81c4 <promisc_recover_hop_increment+0x160>)
    806e:	881b      	ldrh	r3, [r3, #0]
    8070:	b29b      	uxth	r3, r3
    8072:	f640 1264 	movw	r2, #2404	; 0x964
    8076:	4293      	cmp	r3, r2
    8078:	d114      	bne.n	80a4 <promisc_recover_hop_increment+0x40>
		first_ts = CLK100NS;
    807a:	4b53      	ldr	r3, [pc, #332]	; (81c8 <promisc_recover_hop_increment+0x164>)
    807c:	681b      	ldr	r3, [r3, #0]
    807e:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8082:	f640 4235 	movw	r2, #3125	; 0xc35
    8086:	fb02 f203 	mul.w	r2, r2, r3
    808a:	4b50      	ldr	r3, [pc, #320]	; (81cc <promisc_recover_hop_increment+0x168>)
    808c:	681b      	ldr	r3, [r3, #0]
    808e:	4413      	add	r3, r2
    8090:	4a4f      	ldr	r2, [pc, #316]	; (81d0 <promisc_recover_hop_increment+0x16c>)
    8092:	6013      	str	r3, [r2, #0]
		hop_direct_channel = 2406;
    8094:	4b4f      	ldr	r3, [pc, #316]	; (81d4 <promisc_recover_hop_increment+0x170>)
    8096:	f640 1266 	movw	r2, #2406	; 0x966
    809a:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    809c:	4b4e      	ldr	r3, [pc, #312]	; (81d8 <promisc_recover_hop_increment+0x174>)
    809e:	2201      	movs	r2, #1
    80a0:	701a      	strb	r2, [r3, #0]
    80a2:	e08b      	b.n	81bc <promisc_recover_hop_increment+0x158>
	} else if (channel == 2406) {
    80a4:	4b47      	ldr	r3, [pc, #284]	; (81c4 <promisc_recover_hop_increment+0x160>)
    80a6:	881b      	ldrh	r3, [r3, #0]
    80a8:	b29b      	uxth	r3, r3
    80aa:	f640 1266 	movw	r2, #2406	; 0x966
    80ae:	4293      	cmp	r3, r2
    80b0:	d17d      	bne.n	81ae <promisc_recover_hop_increment+0x14a>
		u32 second_ts = CLK100NS;
    80b2:	4b45      	ldr	r3, [pc, #276]	; (81c8 <promisc_recover_hop_increment+0x164>)
    80b4:	681b      	ldr	r3, [r3, #0]
    80b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
    80ba:	f640 4235 	movw	r2, #3125	; 0xc35
    80be:	fb02 f203 	mul.w	r2, r2, r3
    80c2:	4b42      	ldr	r3, [pc, #264]	; (81cc <promisc_recover_hop_increment+0x168>)
    80c4:	681b      	ldr	r3, [r3, #0]
    80c6:	4413      	add	r3, r2
    80c8:	60fb      	str	r3, [r7, #12]
		if (second_ts < first_ts)
    80ca:	4b41      	ldr	r3, [pc, #260]	; (81d0 <promisc_recover_hop_increment+0x16c>)
    80cc:	681b      	ldr	r3, [r3, #0]
    80ce:	68fa      	ldr	r2, [r7, #12]
    80d0:	429a      	cmp	r2, r3
    80d2:	d205      	bcs.n	80e0 <promisc_recover_hop_increment+0x7c>
			second_ts += 3276800000; // handle rollover
    80d4:	68fb      	ldr	r3, [r7, #12]
    80d6:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    80da:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    80de:	60fb      	str	r3, [r7, #12]
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    80e0:	4b3b      	ldr	r3, [pc, #236]	; (81d0 <promisc_recover_hop_increment+0x16c>)
    80e2:	681b      	ldr	r3, [r3, #0]
    80e4:	68fa      	ldr	r2, [r7, #12]
    80e6:	1ad2      	subs	r2, r2, r3
    80e8:	4b3c      	ldr	r3, [pc, #240]	; (81dc <promisc_recover_hop_increment+0x178>)
    80ea:	8bdb      	ldrh	r3, [r3, #30]
    80ec:	4619      	mov	r1, r3
    80ee:	f243 03d4 	movw	r3, #12500	; 0x30d4
    80f2:	fb03 f301 	mul.w	r3, r3, r1
    80f6:	0fd9      	lsrs	r1, r3, #31
    80f8:	440b      	add	r3, r1
    80fa:	105b      	asrs	r3, r3, #1
    80fc:	4413      	add	r3, r2
    80fe:	4a37      	ldr	r2, [pc, #220]	; (81dc <promisc_recover_hop_increment+0x178>)
    8100:	8bd2      	ldrh	r2, [r2, #30]
    8102:	4611      	mov	r1, r2
    8104:	f243 02d4 	movw	r2, #12500	; 0x30d4
    8108:	fb02 f201 	mul.w	r2, r2, r1
    810c:	fbb3 f3f2 	udiv	r3, r3, r2
    8110:	60bb      	str	r3, [r7, #8]
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    8112:	68bb      	ldr	r3, [r7, #8]
    8114:	2b24      	cmp	r3, #36	; 0x24
    8116:	d842      	bhi.n	819e <promisc_recover_hop_increment+0x13a>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    8118:	4a31      	ldr	r2, [pc, #196]	; (81e0 <promisc_recover_hop_increment+0x17c>)
    811a:	68bb      	ldr	r3, [r7, #8]
    811c:	4413      	add	r3, r2
    811e:	781a      	ldrb	r2, [r3, #0]
    8120:	4b2e      	ldr	r3, [pc, #184]	; (81dc <promisc_recover_hop_increment+0x178>)
    8122:	759a      	strb	r2, [r3, #22]
			le.interval_timer = le.conn_interval / 2;
    8124:	4b2d      	ldr	r3, [pc, #180]	; (81dc <promisc_recover_hop_increment+0x178>)
    8126:	8bdb      	ldrh	r3, [r3, #30]
    8128:	085b      	lsrs	r3, r3, #1
    812a:	b29a      	uxth	r2, r3
    812c:	4b2b      	ldr	r3, [pc, #172]	; (81dc <promisc_recover_hop_increment+0x178>)
    812e:	839a      	strh	r2, [r3, #28]
			le.conn_count = 0;
    8130:	4b2a      	ldr	r3, [pc, #168]	; (81dc <promisc_recover_hop_increment+0x178>)
    8132:	2200      	movs	r2, #0
    8134:	841a      	strh	r2, [r3, #32]
			le.conn_epoch = 0;
    8136:	4b29      	ldr	r3, [pc, #164]	; (81dc <promisc_recover_hop_increment+0x178>)
    8138:	2200      	movs	r2, #0
    813a:	619a      	str	r2, [r3, #24]
			do_hop = 0;
    813c:	4b26      	ldr	r3, [pc, #152]	; (81d8 <promisc_recover_hop_increment+0x174>)
    813e:	2200      	movs	r2, #0
    8140:	701a      	strb	r2, [r3, #0]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    8142:	4b26      	ldr	r3, [pc, #152]	; (81dc <promisc_recover_hop_increment+0x178>)
    8144:	7d9b      	ldrb	r3, [r3, #22]
    8146:	1c5a      	adds	r2, r3, #1
    8148:	4b26      	ldr	r3, [pc, #152]	; (81e4 <promisc_recover_hop_increment+0x180>)
    814a:	fb82 0103 	smull	r0, r1, r2, r3
    814e:	1853      	adds	r3, r2, r1
    8150:	1159      	asrs	r1, r3, #5
    8152:	17d3      	asrs	r3, r2, #31
    8154:	1ac9      	subs	r1, r1, r3
    8156:	460b      	mov	r3, r1
    8158:	00db      	lsls	r3, r3, #3
    815a:	440b      	add	r3, r1
    815c:	009b      	lsls	r3, r3, #2
    815e:	440b      	add	r3, r1
    8160:	1ad1      	subs	r1, r2, r3
    8162:	b2ca      	uxtb	r2, r1
    8164:	4b1d      	ldr	r3, [pc, #116]	; (81dc <promisc_recover_hop_increment+0x178>)
    8166:	755a      	strb	r2, [r3, #21]
			le.link_state = LINK_CONNECTED;
    8168:	4b1c      	ldr	r3, [pc, #112]	; (81dc <promisc_recover_hop_increment+0x178>)
    816a:	2203      	movs	r2, #3
    816c:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0;
    816e:	4b1b      	ldr	r3, [pc, #108]	; (81dc <promisc_recover_hop_increment+0x178>)
    8170:	2200      	movs	r2, #0
    8172:	611a      	str	r2, [r3, #16]
			hop_mode = HOP_BTLE;
    8174:	4b1c      	ldr	r3, [pc, #112]	; (81e8 <promisc_recover_hop_increment+0x184>)
    8176:	2203      	movs	r2, #3
    8178:	701a      	strb	r2, [r3, #0]
			packet_cb = connection_follow_cb;
    817a:	4b1c      	ldr	r3, [pc, #112]	; (81ec <promisc_recover_hop_increment+0x188>)
    817c:	4a1c      	ldr	r2, [pc, #112]	; (81f0 <promisc_recover_hop_increment+0x18c>)
    817e:	601a      	str	r2, [r3, #0]
			le_promisc_state(3, &le.channel_increment, 1);
    8180:	2003      	movs	r0, #3
    8182:	491c      	ldr	r1, [pc, #112]	; (81f4 <promisc_recover_hop_increment+0x190>)
    8184:	2201      	movs	r2, #1
    8186:	f7ff ff25 	bl	7fd4 <le_promisc_state>

			if (jam_mode != JAM_NONE)
    818a:	4b1b      	ldr	r3, [pc, #108]	; (81f8 <promisc_recover_hop_increment+0x194>)
    818c:	781b      	ldrb	r3, [r3, #0]
    818e:	b2db      	uxtb	r3, r3
    8190:	2b00      	cmp	r3, #0
    8192:	d003      	beq.n	819c <promisc_recover_hop_increment+0x138>
				le_jam_count = JAM_COUNT_DEFAULT;
    8194:	4b19      	ldr	r3, [pc, #100]	; (81fc <promisc_recover_hop_increment+0x198>)
    8196:	2228      	movs	r2, #40	; 0x28
    8198:	601a      	str	r2, [r3, #0]

			return;
    819a:	e00f      	b.n	81bc <promisc_recover_hop_increment+0x158>
    819c:	e00e      	b.n	81bc <promisc_recover_hop_increment+0x158>
		}
		hop_direct_channel = 2404;
    819e:	4b0d      	ldr	r3, [pc, #52]	; (81d4 <promisc_recover_hop_increment+0x170>)
    81a0:	f640 1264 	movw	r2, #2404	; 0x964
    81a4:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    81a6:	4b0c      	ldr	r3, [pc, #48]	; (81d8 <promisc_recover_hop_increment+0x174>)
    81a8:	2201      	movs	r2, #1
    81aa:	701a      	strb	r2, [r3, #0]
    81ac:	e006      	b.n	81bc <promisc_recover_hop_increment+0x158>
	}
	else {
		hop_direct_channel = 2404;
    81ae:	4b09      	ldr	r3, [pc, #36]	; (81d4 <promisc_recover_hop_increment+0x170>)
    81b0:	f640 1264 	movw	r2, #2404	; 0x964
    81b4:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    81b6:	4b08      	ldr	r3, [pc, #32]	; (81d8 <promisc_recover_hop_increment+0x174>)
    81b8:	2201      	movs	r2, #1
    81ba:	701a      	strb	r2, [r3, #0]
	}
}
    81bc:	3710      	adds	r7, #16
    81be:	46bd      	mov	sp, r7
    81c0:	bd80      	pop	{r7, pc}
    81c2:	bf00      	nop
    81c4:	1000049c 	.word	0x1000049c
    81c8:	10000be4 	.word	0x10000be4
    81cc:	40004008 	.word	0x40004008
    81d0:	10000a54 	.word	0x10000a54
    81d4:	10000980 	.word	0x10000980
    81d8:	1000097d 	.word	0x1000097d
    81dc:	10000458 	.word	0x10000458
    81e0:	0000c6dc 	.word	0x0000c6dc
    81e4:	dd67c8a7 	.word	0xdd67c8a7
    81e8:	1000097c 	.word	0x1000097c
    81ec:	1000099c 	.word	0x1000099c
    81f0:	00007d35 	.word	0x00007d35
    81f4:	1000046e 	.word	0x1000046e
    81f8:	10000a40 	.word	0x10000a40
    81fc:	10000994 	.word	0x10000994

00008200 <promisc_recover_hop_interval>:

void promisc_recover_hop_interval(u8 *packet) {
    8200:	b580      	push	{r7, lr}
    8202:	b086      	sub	sp, #24
    8204:	af00      	add	r7, sp, #0
    8206:	6078      	str	r0, [r7, #4]
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    8208:	4b33      	ldr	r3, [pc, #204]	; (82d8 <promisc_recover_hop_interval+0xd8>)
    820a:	681b      	ldr	r3, [r3, #0]
    820c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    8210:	f640 4235 	movw	r2, #3125	; 0xc35
    8214:	fb02 f203 	mul.w	r2, r2, r3
    8218:	4b30      	ldr	r3, [pc, #192]	; (82dc <promisc_recover_hop_interval+0xdc>)
    821a:	681b      	ldr	r3, [r3, #0]
    821c:	4413      	add	r3, r2
    821e:	617b      	str	r3, [r7, #20]
	if (cur_clk < prev_clk)
    8220:	4b2f      	ldr	r3, [pc, #188]	; (82e0 <promisc_recover_hop_interval+0xe0>)
    8222:	681b      	ldr	r3, [r3, #0]
    8224:	697a      	ldr	r2, [r7, #20]
    8226:	429a      	cmp	r2, r3
    8228:	d203      	bcs.n	8232 <promisc_recover_hop_interval+0x32>
		cur_clk += 3267800000; // handle rollover
    822a:	697a      	ldr	r2, [r7, #20]
    822c:	4b2d      	ldr	r3, [pc, #180]	; (82e4 <promisc_recover_hop_interval+0xe4>)
    822e:	4413      	add	r3, r2
    8230:	617b      	str	r3, [r7, #20]
	u32 clk_diff = cur_clk - prev_clk;
    8232:	4b2b      	ldr	r3, [pc, #172]	; (82e0 <promisc_recover_hop_interval+0xe0>)
    8234:	681b      	ldr	r3, [r3, #0]
    8236:	697a      	ldr	r2, [r7, #20]
    8238:	1ad3      	subs	r3, r2, r3
    823a:	613b      	str	r3, [r7, #16]
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    823c:	693b      	ldr	r3, [r7, #16]
    823e:	f246 12a7 	movw	r2, #24999	; 0x61a7
    8242:	4293      	cmp	r3, r2
    8244:	d800      	bhi.n	8248 <promisc_recover_hop_interval+0x48>
		return;
    8246:	e043      	b.n	82d0 <promisc_recover_hop_interval+0xd0>

	if (clk_diff < le_promisc.smallest_hop_interval)
    8248:	4b27      	ldr	r3, [pc, #156]	; (82e8 <promisc_recover_hop_interval+0xe8>)
    824a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    824e:	693b      	ldr	r3, [r7, #16]
    8250:	429a      	cmp	r2, r3
    8252:	d903      	bls.n	825c <promisc_recover_hop_interval+0x5c>
		le_promisc.smallest_hop_interval = clk_diff;
    8254:	4a24      	ldr	r2, [pc, #144]	; (82e8 <promisc_recover_hop_interval+0xe8>)
    8256:	693b      	ldr	r3, [r7, #16]
    8258:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    825c:	4b22      	ldr	r3, [pc, #136]	; (82e8 <promisc_recover_hop_interval+0xe8>)
    825e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    8262:	f503 3361 	add.w	r3, r3, #230400	; 0x38400
    8266:	f203 3352 	addw	r3, r3, #850	; 0x352
    826a:	4a20      	ldr	r2, [pc, #128]	; (82ec <promisc_recover_hop_interval+0xec>)
    826c:	fba2 2303 	umull	r2, r3, r2, r3
    8270:	0c9b      	lsrs	r3, r3, #18
    8272:	81fb      	strh	r3, [r7, #14]

	if (le.conn_interval == obsv_hop_interval) {
    8274:	4b1e      	ldr	r3, [pc, #120]	; (82f0 <promisc_recover_hop_interval+0xf0>)
    8276:	8bdb      	ldrh	r3, [r3, #30]
    8278:	89fa      	ldrh	r2, [r7, #14]
    827a:	429a      	cmp	r2, r3
    827c:	d11e      	bne.n	82bc <promisc_recover_hop_interval+0xbc>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    827e:	4b1a      	ldr	r3, [pc, #104]	; (82e8 <promisc_recover_hop_interval+0xe8>)
    8280:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    8284:	3301      	adds	r3, #1
    8286:	4a18      	ldr	r2, [pc, #96]	; (82e8 <promisc_recover_hop_interval+0xe8>)
    8288:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    828c:	4b16      	ldr	r3, [pc, #88]	; (82e8 <promisc_recover_hop_interval+0xe8>)
    828e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    8292:	2b05      	cmp	r3, #5
    8294:	d119      	bne.n	82ca <promisc_recover_hop_interval+0xca>
			packet_cb = promisc_recover_hop_increment;
    8296:	4b17      	ldr	r3, [pc, #92]	; (82f4 <promisc_recover_hop_interval+0xf4>)
    8298:	4a17      	ldr	r2, [pc, #92]	; (82f8 <promisc_recover_hop_interval+0xf8>)
    829a:	601a      	str	r2, [r3, #0]
			hop_direct_channel = 2404;
    829c:	4b17      	ldr	r3, [pc, #92]	; (82fc <promisc_recover_hop_interval+0xfc>)
    829e:	f640 1264 	movw	r2, #2404	; 0x964
    82a2:	801a      	strh	r2, [r3, #0]
			hop_mode = HOP_DIRECT;
    82a4:	4b16      	ldr	r3, [pc, #88]	; (8300 <promisc_recover_hop_interval+0x100>)
    82a6:	2204      	movs	r2, #4
    82a8:	701a      	strb	r2, [r3, #0]
			do_hop = 1;
    82aa:	4b16      	ldr	r3, [pc, #88]	; (8304 <promisc_recover_hop_interval+0x104>)
    82ac:	2201      	movs	r2, #1
    82ae:	701a      	strb	r2, [r3, #0]
			le_promisc_state(2, &le.conn_interval, 2);
    82b0:	2002      	movs	r0, #2
    82b2:	4915      	ldr	r1, [pc, #84]	; (8308 <promisc_recover_hop_interval+0x108>)
    82b4:	2202      	movs	r2, #2
    82b6:	f7ff fe8d 	bl	7fd4 <le_promisc_state>
    82ba:	e006      	b.n	82ca <promisc_recover_hop_interval+0xca>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    82bc:	4a0c      	ldr	r2, [pc, #48]	; (82f0 <promisc_recover_hop_interval+0xf0>)
    82be:	89fb      	ldrh	r3, [r7, #14]
    82c0:	83d3      	strh	r3, [r2, #30]
		le_promisc.consec_intervals = 0;
    82c2:	4b09      	ldr	r3, [pc, #36]	; (82e8 <promisc_recover_hop_interval+0xe8>)
    82c4:	2200      	movs	r2, #0
    82c6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	prev_clk = cur_clk;
    82ca:	4a05      	ldr	r2, [pc, #20]	; (82e0 <promisc_recover_hop_interval+0xe0>)
    82cc:	697b      	ldr	r3, [r7, #20]
    82ce:	6013      	str	r3, [r2, #0]
}
    82d0:	3718      	adds	r7, #24
    82d2:	46bd      	mov	sp, r7
    82d4:	bd80      	pop	{r7, pc}
    82d6:	bf00      	nop
    82d8:	10000be4 	.word	0x10000be4
    82dc:	40004008 	.word	0x40004008
    82e0:	10000a58 	.word	0x10000a58
    82e4:	c2c6abc0 	.word	0xc2c6abc0
    82e8:	10000bf0 	.word	0x10000bf0
    82ec:	9119a9c1 	.word	0x9119a9c1
    82f0:	10000458 	.word	0x10000458
    82f4:	1000099c 	.word	0x1000099c
    82f8:	00008065 	.word	0x00008065
    82fc:	10000980 	.word	0x10000980
    8300:	1000097c 	.word	0x1000097c
    8304:	1000097d 	.word	0x1000097d
    8308:	10000476 	.word	0x10000476

0000830c <promisc_follow_cb>:

void promisc_follow_cb(u8 *packet) {
    830c:	b580      	push	{r7, lr}
    830e:	b084      	sub	sp, #16
    8310:	af00      	add	r7, sp, #0
    8312:	6078      	str	r0, [r7, #4]
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    8314:	4b28      	ldr	r3, [pc, #160]	; (83b8 <promisc_follow_cb+0xac>)
    8316:	691b      	ldr	r3, [r3, #16]
    8318:	2b00      	cmp	r3, #0
    831a:	d149      	bne.n	83b0 <promisc_follow_cb+0xa4>
    831c:	687b      	ldr	r3, [r7, #4]
    831e:	3304      	adds	r3, #4
    8320:	781b      	ldrb	r3, [r3, #0]
    8322:	2b01      	cmp	r3, #1
    8324:	d144      	bne.n	83b0 <promisc_follow_cb+0xa4>
    8326:	687b      	ldr	r3, [r7, #4]
    8328:	3305      	adds	r3, #5
    832a:	781b      	ldrb	r3, [r3, #0]
    832c:	2b00      	cmp	r3, #0
    832e:	d13f      	bne.n	83b0 <promisc_follow_cb+0xa4>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    8330:	687b      	ldr	r3, [r7, #4]
    8332:	3308      	adds	r3, #8
    8334:	781b      	ldrb	r3, [r3, #0]
    8336:	041a      	lsls	r2, r3, #16
    8338:	687b      	ldr	r3, [r7, #4]
    833a:	3307      	adds	r3, #7
    833c:	781b      	ldrb	r3, [r3, #0]
    833e:	021b      	lsls	r3, r3, #8
    8340:	4313      	orrs	r3, r2
    8342:	687a      	ldr	r2, [r7, #4]
    8344:	3206      	adds	r2, #6
    8346:	7812      	ldrb	r2, [r2, #0]
    8348:	4313      	orrs	r3, r2
    834a:	60bb      	str	r3, [r7, #8]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    834c:	687b      	ldr	r3, [r7, #4]
    834e:	3304      	adds	r3, #4
    8350:	68b8      	ldr	r0, [r7, #8]
    8352:	4619      	mov	r1, r3
    8354:	2202      	movs	r2, #2
    8356:	f000 ff7b 	bl	9250 <btle_reverse_crc>
    835a:	4602      	mov	r2, r0
    835c:	4b16      	ldr	r3, [pc, #88]	; (83b8 <promisc_follow_cb+0xac>)
    835e:	609a      	str	r2, [r3, #8]
		le.crc_init_reversed = 0;
    8360:	4b15      	ldr	r3, [pc, #84]	; (83b8 <promisc_follow_cb+0xac>)
    8362:	2200      	movs	r2, #0
    8364:	60da      	str	r2, [r3, #12]
		for (i = 0; i < 24; ++i)
    8366:	2300      	movs	r3, #0
    8368:	60fb      	str	r3, [r7, #12]
    836a:	e013      	b.n	8394 <promisc_follow_cb+0x88>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    836c:	4b12      	ldr	r3, [pc, #72]	; (83b8 <promisc_follow_cb+0xac>)
    836e:	68da      	ldr	r2, [r3, #12]
    8370:	4b11      	ldr	r3, [pc, #68]	; (83b8 <promisc_follow_cb+0xac>)
    8372:	6899      	ldr	r1, [r3, #8]
    8374:	68fb      	ldr	r3, [r7, #12]
    8376:	fa21 f303 	lsr.w	r3, r1, r3
    837a:	f003 0101 	and.w	r1, r3, #1
    837e:	68fb      	ldr	r3, [r7, #12]
    8380:	f1c3 0317 	rsb	r3, r3, #23
    8384:	fa01 f303 	lsl.w	r3, r1, r3
    8388:	4313      	orrs	r3, r2
    838a:	4a0b      	ldr	r2, [pc, #44]	; (83b8 <promisc_follow_cb+0xac>)
    838c:	60d3      	str	r3, [r2, #12]
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    838e:	68fb      	ldr	r3, [r7, #12]
    8390:	3301      	adds	r3, #1
    8392:	60fb      	str	r3, [r7, #12]
    8394:	68fb      	ldr	r3, [r7, #12]
    8396:	2b17      	cmp	r3, #23
    8398:	dde8      	ble.n	836c <promisc_follow_cb+0x60>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    839a:	4b07      	ldr	r3, [pc, #28]	; (83b8 <promisc_follow_cb+0xac>)
    839c:	2201      	movs	r2, #1
    839e:	611a      	str	r2, [r3, #16]
		packet_cb = promisc_recover_hop_interval;
    83a0:	4b06      	ldr	r3, [pc, #24]	; (83bc <promisc_follow_cb+0xb0>)
    83a2:	4a07      	ldr	r2, [pc, #28]	; (83c0 <promisc_follow_cb+0xb4>)
    83a4:	601a      	str	r2, [r3, #0]
		le_promisc_state(1, &le.crc_init, 3);
    83a6:	2001      	movs	r0, #1
    83a8:	4906      	ldr	r1, [pc, #24]	; (83c4 <promisc_follow_cb+0xb8>)
    83aa:	2203      	movs	r2, #3
    83ac:	f7ff fe12 	bl	7fd4 <le_promisc_state>
	}
}
    83b0:	3710      	adds	r7, #16
    83b2:	46bd      	mov	sp, r7
    83b4:	bd80      	pop	{r7, pc}
    83b6:	bf00      	nop
    83b8:	10000458 	.word	0x10000458
    83bc:	1000099c 	.word	0x1000099c
    83c0:	00008201 	.word	0x00008201
    83c4:	10000460 	.word	0x10000460

000083c8 <see_aa>:

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    83c8:	b480      	push	{r7}
    83ca:	b087      	sub	sp, #28
    83cc:	af00      	add	r7, sp, #0
    83ce:	6078      	str	r0, [r7, #4]
	int i, max = -1, killme = -1;
    83d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    83d4:	613b      	str	r3, [r7, #16]
    83d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    83da:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < AA_LIST_SIZE; ++i)
    83dc:	2300      	movs	r3, #0
    83de:	617b      	str	r3, [r7, #20]
    83e0:	e015      	b.n	840e <see_aa+0x46>
		if (le_promisc.active_aa[i].aa == aa) {
    83e2:	4a22      	ldr	r2, [pc, #136]	; (846c <see_aa+0xa4>)
    83e4:	697b      	ldr	r3, [r7, #20]
    83e6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    83ea:	687b      	ldr	r3, [r7, #4]
    83ec:	429a      	cmp	r2, r3
    83ee:	d10b      	bne.n	8408 <see_aa+0x40>
			++le_promisc.active_aa[i].count;
    83f0:	4a1e      	ldr	r2, [pc, #120]	; (846c <see_aa+0xa4>)
    83f2:	697b      	ldr	r3, [r7, #20]
    83f4:	00db      	lsls	r3, r3, #3
    83f6:	4413      	add	r3, r2
    83f8:	685b      	ldr	r3, [r3, #4]
    83fa:	1c5a      	adds	r2, r3, #1
    83fc:	491b      	ldr	r1, [pc, #108]	; (846c <see_aa+0xa4>)
    83fe:	697b      	ldr	r3, [r7, #20]
    8400:	00db      	lsls	r3, r3, #3
    8402:	440b      	add	r3, r1
    8404:	605a      	str	r2, [r3, #4]
			return;
    8406:	e02c      	b.n	8462 <see_aa+0x9a>
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    8408:	697b      	ldr	r3, [r7, #20]
    840a:	3301      	adds	r3, #1
    840c:	617b      	str	r3, [r7, #20]
    840e:	697b      	ldr	r3, [r7, #20]
    8410:	2b1f      	cmp	r3, #31
    8412:	dde6      	ble.n	83e2 <see_aa+0x1a>
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    8414:	2300      	movs	r3, #0
    8416:	617b      	str	r3, [r7, #20]
    8418:	e015      	b.n	8446 <see_aa+0x7e>
		if (le_promisc.active_aa[i].count < max || max < 0) {
    841a:	4a14      	ldr	r2, [pc, #80]	; (846c <see_aa+0xa4>)
    841c:	697b      	ldr	r3, [r7, #20]
    841e:	00db      	lsls	r3, r3, #3
    8420:	4413      	add	r3, r2
    8422:	685a      	ldr	r2, [r3, #4]
    8424:	693b      	ldr	r3, [r7, #16]
    8426:	429a      	cmp	r2, r3
    8428:	db02      	blt.n	8430 <see_aa+0x68>
    842a:	693b      	ldr	r3, [r7, #16]
    842c:	2b00      	cmp	r3, #0
    842e:	da07      	bge.n	8440 <see_aa+0x78>
			killme = i;
    8430:	697b      	ldr	r3, [r7, #20]
    8432:	60fb      	str	r3, [r7, #12]
			max = le_promisc.active_aa[i].count;
    8434:	4a0d      	ldr	r2, [pc, #52]	; (846c <see_aa+0xa4>)
    8436:	697b      	ldr	r3, [r7, #20]
    8438:	00db      	lsls	r3, r3, #3
    843a:	4413      	add	r3, r2
    843c:	685b      	ldr	r3, [r3, #4]
    843e:	613b      	str	r3, [r7, #16]
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    8440:	697b      	ldr	r3, [r7, #20]
    8442:	3301      	adds	r3, #1
    8444:	617b      	str	r3, [r7, #20]
    8446:	697b      	ldr	r3, [r7, #20]
    8448:	2b1f      	cmp	r3, #31
    844a:	dde6      	ble.n	841a <see_aa+0x52>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    844c:	4907      	ldr	r1, [pc, #28]	; (846c <see_aa+0xa4>)
    844e:	68fb      	ldr	r3, [r7, #12]
    8450:	687a      	ldr	r2, [r7, #4]
    8452:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    8456:	4a05      	ldr	r2, [pc, #20]	; (846c <see_aa+0xa4>)
    8458:	68fb      	ldr	r3, [r7, #12]
    845a:	00db      	lsls	r3, r3, #3
    845c:	4413      	add	r3, r2
    845e:	2201      	movs	r2, #1
    8460:	605a      	str	r2, [r3, #4]
}
    8462:	371c      	adds	r7, #28
    8464:	46bd      	mov	sp, r7
    8466:	f85d 7b04 	ldr.w	r7, [sp], #4
    846a:	4770      	bx	lr
    846c:	10000bf0 	.word	0x10000bf0

00008470 <cb_le_promisc>:

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    8470:	b590      	push	{r4, r7, lr}
    8472:	b0a1      	sub	sp, #132	; 0x84
    8474:	af00      	add	r7, sp, #0
    8476:	6078      	str	r0, [r7, #4]
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    8478:	f107 031c 	add.w	r3, r7, #28
    847c:	2240      	movs	r2, #64	; 0x40
    847e:	4618      	mov	r0, r3
    8480:	2100      	movs	r1, #0
    8482:	f7fb fe79 	bl	4178 <memset>
    8486:	2301      	movs	r3, #1
    8488:	773b      	strb	r3, [r7, #28]
    848a:	2301      	movs	r3, #1
    848c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    8490:	2301      	movs	r3, #1
    8492:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    8496:	2301      	movs	r3, #1
    8498:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    849c:	2301      	movs	r3, #1
    849e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    84a2:	2301      	movs	r3, #1
    84a4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    84a8:	2301      	movs	r3, #1
    84aa:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    84ae:	2301      	movs	r3, #1
    84b0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    84b4:	2300      	movs	r3, #0
    84b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    84b8:	e041      	b.n	853e <cb_le_promisc+0xce>
		idx = whitening_index[btle_channel_index(channel-2402)];
    84ba:	4ba5      	ldr	r3, [pc, #660]	; (8750 <cb_le_promisc+0x2e0>)
    84bc:	881b      	ldrh	r3, [r3, #0]
    84be:	b29b      	uxth	r3, r3
    84c0:	b2db      	uxtb	r3, r3
    84c2:	3b62      	subs	r3, #98	; 0x62
    84c4:	b2db      	uxtb	r3, r3
    84c6:	4618      	mov	r0, r3
    84c8:	f000 fe20 	bl	910c <btle_channel_index>
    84cc:	4603      	mov	r3, r0
    84ce:	461a      	mov	r2, r3
    84d0:	4ba0      	ldr	r3, [pc, #640]	; (8754 <cb_le_promisc+0x2e4>)
    84d2:	5c9b      	ldrb	r3, [r3, r2]
    84d4:	673b      	str	r3, [r7, #112]	; 0x70

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    84d6:	2300      	movs	r3, #0
    84d8:	67bb      	str	r3, [r7, #120]	; 0x78
    84da:	e02a      	b.n	8532 <cb_le_promisc+0xc2>
			desired[i][j] ^= whitening[idx];
    84dc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    84de:	011b      	lsls	r3, r3, #4
    84e0:	f107 0280 	add.w	r2, r7, #128	; 0x80
    84e4:	441a      	add	r2, r3
    84e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    84e8:	4413      	add	r3, r2
    84ea:	3b64      	subs	r3, #100	; 0x64
    84ec:	781a      	ldrb	r2, [r3, #0]
    84ee:	499a      	ldr	r1, [pc, #616]	; (8758 <cb_le_promisc+0x2e8>)
    84f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    84f2:	440b      	add	r3, r1
    84f4:	781b      	ldrb	r3, [r3, #0]
    84f6:	4053      	eors	r3, r2
    84f8:	b2d9      	uxtb	r1, r3
    84fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    84fc:	011b      	lsls	r3, r3, #4
    84fe:	f107 0280 	add.w	r2, r7, #128	; 0x80
    8502:	441a      	add	r2, r3
    8504:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8506:	4413      	add	r3, r2
    8508:	3b64      	subs	r3, #100	; 0x64
    850a:	460a      	mov	r2, r1
    850c:	701a      	strb	r2, [r3, #0]
			idx = (idx + 1) % sizeof(whitening);
    850e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    8510:	3301      	adds	r3, #1
    8512:	4619      	mov	r1, r3
    8514:	4b91      	ldr	r3, [pc, #580]	; (875c <cb_le_promisc+0x2ec>)
    8516:	fba1 2303 	umull	r2, r3, r1, r3
    851a:	1ac8      	subs	r0, r1, r3
    851c:	0840      	lsrs	r0, r0, #1
    851e:	4403      	add	r3, r0
    8520:	099a      	lsrs	r2, r3, #6
    8522:	4613      	mov	r3, r2
    8524:	01db      	lsls	r3, r3, #7
    8526:	1a9b      	subs	r3, r3, r2
    8528:	1aca      	subs	r2, r1, r3
    852a:	673a      	str	r2, [r7, #112]	; 0x70

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    852c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    852e:	3301      	adds	r3, #1
    8530:	67bb      	str	r3, [r7, #120]	; 0x78
    8532:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8534:	2b0f      	cmp	r3, #15
    8536:	ddd1      	ble.n	84dc <cb_le_promisc+0x6c>
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    8538:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    853a:	3301      	adds	r3, #1
    853c:	67fb      	str	r3, [r7, #124]	; 0x7c
    853e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8540:	2b03      	cmp	r3, #3
    8542:	ddba      	ble.n	84ba <cb_le_promisc+0x4a>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    8544:	2320      	movs	r3, #32
    8546:	67fb      	str	r3, [r7, #124]	; 0x7c
    8548:	e0d0      	b.n	86ec <cb_le_promisc+0x27c>
		int ok[4] = { 1, 1, 1, 1 };
    854a:	4b85      	ldr	r3, [pc, #532]	; (8760 <cb_le_promisc+0x2f0>)
    854c:	f107 040c 	add.w	r4, r7, #12
    8550:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    8552:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		int matching = -1;
    8556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    855a:	66fb      	str	r3, [r7, #108]	; 0x6c

		for (j = 0; j < 4; ++j) {
    855c:	2300      	movs	r3, #0
    855e:	67bb      	str	r3, [r7, #120]	; 0x78
    8560:	e026      	b.n	85b0 <cb_le_promisc+0x140>
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    8562:	2300      	movs	r3, #0
    8564:	677b      	str	r3, [r7, #116]	; 0x74
    8566:	e01d      	b.n	85a4 <cb_le_promisc+0x134>
				if (unpacked[i+k] != desired[j][k]) {
    8568:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    856a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    856c:	4413      	add	r3, r2
    856e:	461a      	mov	r2, r3
    8570:	687b      	ldr	r3, [r7, #4]
    8572:	4413      	add	r3, r2
    8574:	781a      	ldrb	r2, [r3, #0]
    8576:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8578:	011b      	lsls	r3, r3, #4
    857a:	f107 0180 	add.w	r1, r7, #128	; 0x80
    857e:	4419      	add	r1, r3
    8580:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8582:	440b      	add	r3, r1
    8584:	3b64      	subs	r3, #100	; 0x64
    8586:	781b      	ldrb	r3, [r3, #0]
    8588:	429a      	cmp	r2, r3
    858a:	d008      	beq.n	859e <cb_le_promisc+0x12e>
					ok[j] = 0;
    858c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    858e:	009b      	lsls	r3, r3, #2
    8590:	f107 0280 	add.w	r2, r7, #128	; 0x80
    8594:	4413      	add	r3, r2
    8596:	2200      	movs	r2, #0
    8598:	f843 2c74 	str.w	r2, [r3, #-116]
					break;
    859c:	e005      	b.n	85aa <cb_le_promisc+0x13a>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    859e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    85a0:	3301      	adds	r3, #1
    85a2:	677b      	str	r3, [r7, #116]	; 0x74
    85a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    85a6:	2b0f      	cmp	r3, #15
    85a8:	ddde      	ble.n	8568 <cb_le_promisc+0xf8>
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    85aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    85ac:	3301      	adds	r3, #1
    85ae:	67bb      	str	r3, [r7, #120]	; 0x78
    85b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    85b2:	2b03      	cmp	r3, #3
    85b4:	ddd5      	ble.n	8562 <cb_le_promisc+0xf2>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    85b6:	2300      	movs	r3, #0
    85b8:	67bb      	str	r3, [r7, #120]	; 0x78
    85ba:	e00e      	b.n	85da <cb_le_promisc+0x16a>
			if (ok[j]) {
    85bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    85be:	009b      	lsls	r3, r3, #2
    85c0:	f107 0280 	add.w	r2, r7, #128	; 0x80
    85c4:	4413      	add	r3, r2
    85c6:	f853 3c74 	ldr.w	r3, [r3, #-116]
    85ca:	2b00      	cmp	r3, #0
    85cc:	d002      	beq.n	85d4 <cb_le_promisc+0x164>
				matching = j;
    85ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    85d0:	66fb      	str	r3, [r7, #108]	; 0x6c
				break;
    85d2:	e005      	b.n	85e0 <cb_le_promisc+0x170>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    85d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    85d6:	3301      	adds	r3, #1
    85d8:	67bb      	str	r3, [r7, #120]	; 0x78
    85da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    85dc:	2b03      	cmp	r3, #3
    85de:	dded      	ble.n	85bc <cb_le_promisc+0x14c>
				break;
			}
		}

		// skip if no match
		if (matching < 0)
    85e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    85e2:	2b00      	cmp	r3, #0
    85e4:	db7f      	blt.n	86e6 <cb_le_promisc+0x276>
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
    85e6:	4b5a      	ldr	r3, [pc, #360]	; (8750 <cb_le_promisc+0x2e0>)
    85e8:	881b      	ldrh	r3, [r3, #0]
    85ea:	b29b      	uxth	r3, r3
    85ec:	b2db      	uxtb	r3, r3
    85ee:	3b62      	subs	r3, #98	; 0x62
    85f0:	b2db      	uxtb	r3, r3
    85f2:	4618      	mov	r0, r3
    85f4:	f000 fd8a 	bl	910c <btle_channel_index>
    85f8:	4603      	mov	r3, r0
    85fa:	461a      	mov	r2, r3
    85fc:	4b55      	ldr	r3, [pc, #340]	; (8754 <cb_le_promisc+0x2e4>)
    85fe:	5c9b      	ldrb	r3, [r3, r2]
    8600:	673b      	str	r3, [r7, #112]	; 0x70
		for (j = 0; j < 4+3+3; ++j) {
    8602:	2300      	movs	r3, #0
    8604:	67bb      	str	r3, [r7, #120]	; 0x78
    8606:	e04c      	b.n	86a2 <cb_le_promisc+0x232>
			u8 byte = 0;
    8608:	2300      	movs	r3, #0
    860a:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			for (k = 0; k < 8; k++) {
    860e:	2300      	movs	r3, #0
    8610:	677b      	str	r3, [r7, #116]	; 0x74
    8612:	e039      	b.n	8688 <cb_le_promisc+0x218>
				int offset = k + (j * 8) + i - 32;
    8614:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8616:	00da      	lsls	r2, r3, #3
    8618:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    861a:	441a      	add	r2, r3
    861c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    861e:	4413      	add	r3, r2
    8620:	3b20      	subs	r3, #32
    8622:	663b      	str	r3, [r7, #96]	; 0x60
				if (offset >= DMA_SIZE*8*2) break;
    8624:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    8626:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    862a:	db00      	blt.n	862e <cb_le_promisc+0x1be>
    862c:	e02f      	b.n	868e <cb_le_promisc+0x21e>
				int bit = unpacked[offset];
    862e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    8630:	687a      	ldr	r2, [r7, #4]
    8632:	4413      	add	r3, r2
    8634:	781b      	ldrb	r3, [r3, #0]
    8636:	667b      	str	r3, [r7, #100]	; 0x64
				if (j >= 4) { // unwhiten data bytes
    8638:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    863a:	2b03      	cmp	r3, #3
    863c:	dd16      	ble.n	866c <cb_le_promisc+0x1fc>
					bit ^= whitening[idx];
    863e:	4a46      	ldr	r2, [pc, #280]	; (8758 <cb_le_promisc+0x2e8>)
    8640:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    8642:	4413      	add	r3, r2
    8644:	781b      	ldrb	r3, [r3, #0]
    8646:	461a      	mov	r2, r3
    8648:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    864a:	4053      	eors	r3, r2
    864c:	667b      	str	r3, [r7, #100]	; 0x64
					idx = (idx + 1) % sizeof(whitening);
    864e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    8650:	3301      	adds	r3, #1
    8652:	4619      	mov	r1, r3
    8654:	4b41      	ldr	r3, [pc, #260]	; (875c <cb_le_promisc+0x2ec>)
    8656:	fba1 2303 	umull	r2, r3, r1, r3
    865a:	1ac8      	subs	r0, r1, r3
    865c:	0840      	lsrs	r0, r0, #1
    865e:	4403      	add	r3, r0
    8660:	099a      	lsrs	r2, r3, #6
    8662:	4613      	mov	r3, r2
    8664:	01db      	lsls	r3, r3, #7
    8666:	1a9b      	subs	r3, r3, r2
    8668:	1aca      	subs	r2, r1, r3
    866a:	673a      	str	r2, [r7, #112]	; 0x70
				}
				byte |= bit << k;
    866c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    866e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8670:	fa02 f303 	lsl.w	r3, r2, r3
    8674:	b2da      	uxtb	r2, r3
    8676:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
    867a:	4313      	orrs	r3, r2
    867c:	b2db      	uxtb	r3, r3
    867e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    8682:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    8684:	3301      	adds	r3, #1
    8686:	677b      	str	r3, [r7, #116]	; 0x74
    8688:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    868a:	2b07      	cmp	r3, #7
    868c:	ddc2      	ble.n	8614 <cb_le_promisc+0x1a4>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    868e:	4b35      	ldr	r3, [pc, #212]	; (8764 <cb_le_promisc+0x2f4>)
    8690:	681a      	ldr	r2, [r3, #0]
    8692:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    8694:	4413      	add	r3, r2
    8696:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
    869a:	701a      	strb	r2, [r3, #0]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
    869c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    869e:	3301      	adds	r3, #1
    86a0:	67bb      	str	r3, [r7, #120]	; 0x78
    86a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    86a4:	2b09      	cmp	r3, #9
    86a6:	ddaf      	ble.n	8608 <cb_le_promisc+0x198>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    86a8:	4b2e      	ldr	r3, [pc, #184]	; (8764 <cb_le_promisc+0x2f4>)
    86aa:	681b      	ldr	r3, [r3, #0]
    86ac:	3303      	adds	r3, #3
    86ae:	781b      	ldrb	r3, [r3, #0]
    86b0:	061a      	lsls	r2, r3, #24
				 (idle_rxbuf[2] << 16) |
    86b2:	4b2c      	ldr	r3, [pc, #176]	; (8764 <cb_le_promisc+0x2f4>)
    86b4:	681b      	ldr	r3, [r3, #0]
    86b6:	3302      	adds	r3, #2
    86b8:	781b      	ldrb	r3, [r3, #0]
    86ba:	041b      	lsls	r3, r3, #16
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    86bc:	431a      	orrs	r2, r3
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    86be:	4b29      	ldr	r3, [pc, #164]	; (8764 <cb_le_promisc+0x2f4>)
    86c0:	681b      	ldr	r3, [r3, #0]
    86c2:	3301      	adds	r3, #1
    86c4:	781b      	ldrb	r3, [r3, #0]
    86c6:	021b      	lsls	r3, r3, #8
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    86c8:	4313      	orrs	r3, r2
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    86ca:	4a26      	ldr	r2, [pc, #152]	; (8764 <cb_le_promisc+0x2f4>)
    86cc:	6812      	ldr	r2, [r2, #0]
    86ce:	7812      	ldrb	r2, [r2, #0]
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    86d0:	4313      	orrs	r3, r2
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    86d2:	65fb      	str	r3, [r7, #92]	; 0x5c
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
		see_aa(aa);
    86d4:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    86d6:	f7ff fe77 	bl	83c8 <see_aa>

		enqueue(LE_PACKET, idle_rxbuf);
    86da:	4b22      	ldr	r3, [pc, #136]	; (8764 <cb_le_promisc+0x2f4>)
    86dc:	681b      	ldr	r3, [r3, #0]
    86de:	2001      	movs	r0, #1
    86e0:	4619      	mov	r1, r3
    86e2:	f7fb fef1 	bl	44c8 <enqueue>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    86e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    86e8:	3301      	adds	r3, #1
    86ea:	67fb      	str	r3, [r7, #124]	; 0x7c
    86ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    86ee:	f5b3 7f3c 	cmp.w	r3, #752	; 0x2f0
    86f2:	f6ff af2a 	blt.w	854a <cb_le_promisc+0xda>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    86f6:	2300      	movs	r3, #0
    86f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    86fa:	e020      	b.n	873e <cb_le_promisc+0x2ce>
		if (le_promisc.active_aa[i].count > 3) {
    86fc:	4a1a      	ldr	r2, [pc, #104]	; (8768 <cb_le_promisc+0x2f8>)
    86fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8700:	00db      	lsls	r3, r3, #3
    8702:	4413      	add	r3, r2
    8704:	685b      	ldr	r3, [r3, #4]
    8706:	2b03      	cmp	r3, #3
    8708:	dd16      	ble.n	8738 <cb_le_promisc+0x2c8>
			le_set_access_address(le_promisc.active_aa[i].aa);
    870a:	4a17      	ldr	r2, [pc, #92]	; (8768 <cb_le_promisc+0x2f8>)
    870c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    870e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    8712:	4618      	mov	r0, r3
    8714:	f7fe fd80 	bl	7218 <le_set_access_address>
			data_cb = cb_follow_le;
    8718:	4b14      	ldr	r3, [pc, #80]	; (876c <cb_le_promisc+0x2fc>)
    871a:	4a15      	ldr	r2, [pc, #84]	; (8770 <cb_le_promisc+0x300>)
    871c:	601a      	str	r2, [r3, #0]
			packet_cb = promisc_follow_cb;
    871e:	4b15      	ldr	r3, [pc, #84]	; (8774 <cb_le_promisc+0x304>)
    8720:	4a15      	ldr	r2, [pc, #84]	; (8778 <cb_le_promisc+0x308>)
    8722:	601a      	str	r2, [r3, #0]
			le.crc_verify = 0;
    8724:	4b15      	ldr	r3, [pc, #84]	; (877c <cb_le_promisc+0x30c>)
    8726:	2200      	movs	r2, #0
    8728:	611a      	str	r2, [r3, #16]
			le_promisc_state(0, &le.access_address, 4);
    872a:	2000      	movs	r0, #0
    872c:	4913      	ldr	r1, [pc, #76]	; (877c <cb_le_promisc+0x30c>)
    872e:	2204      	movs	r2, #4
    8730:	f7ff fc50 	bl	7fd4 <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    8734:	2300      	movs	r3, #0
    8736:	e006      	b.n	8746 <cb_le_promisc+0x2d6>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    8738:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    873a:	3301      	adds	r3, #1
    873c:	67fb      	str	r3, [r7, #124]	; 0x7c
    873e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    8740:	2b1f      	cmp	r3, #31
    8742:	dddb      	ble.n	86fc <cb_le_promisc+0x28c>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    8744:	2301      	movs	r3, #1
}
    8746:	4618      	mov	r0, r3
    8748:	3784      	adds	r7, #132	; 0x84
    874a:	46bd      	mov	sp, r7
    874c:	bd90      	pop	{r4, r7, pc}
    874e:	bf00      	nop
    8750:	1000049c 	.word	0x1000049c
    8754:	0000c6b4 	.word	0x0000c6b4
    8758:	0000c634 	.word	0x0000c634
    875c:	02040811 	.word	0x02040811
    8760:	0000ced4 	.word	0x0000ced4
    8764:	10000454 	.word	0x10000454
    8768:	10000bf0 	.word	0x10000bf0
    876c:	10000998 	.word	0x10000998
    8770:	00007b59 	.word	0x00007b59
    8774:	1000099c 	.word	0x1000099c
    8778:	0000830d 	.word	0x0000830d
    877c:	10000458 	.word	0x10000458

00008780 <bt_promisc_le>:

void bt_promisc_le() {
    8780:	b580      	push	{r7, lr}
    8782:	af00      	add	r7, sp, #0
	while (requested_mode == MODE_BT_PROMISC_LE) {
    8784:	e02c      	b.n	87e0 <bt_promisc_le+0x60>
		reset_le_promisc();
    8786:	f7fe fdad 	bl	72e4 <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    878a:	4b18      	ldr	r3, [pc, #96]	; (87ec <bt_promisc_le+0x6c>)
    878c:	881b      	ldrh	r3, [r3, #0]
    878e:	b29b      	uxth	r3, r3
    8790:	f003 0301 	and.w	r3, r3, #1
    8794:	2b00      	cmp	r3, #0
    8796:	d003      	beq.n	87a0 <bt_promisc_le+0x20>
			channel = 2440;
    8798:	4b14      	ldr	r3, [pc, #80]	; (87ec <bt_promisc_le+0x6c>)
    879a:	f640 1288 	movw	r2, #2440	; 0x988
    879e:	801a      	strh	r2, [r3, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    87a0:	4b13      	ldr	r3, [pc, #76]	; (87f0 <bt_promisc_le+0x70>)
    87a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    87a4:	2b00      	cmp	r3, #0
    87a6:	d107      	bne.n	87b8 <bt_promisc_le+0x38>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set();
    87a8:	f7fc f908 	bl	49bc <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    87ac:	4b11      	ldr	r3, [pc, #68]	; (87f4 <bt_promisc_le+0x74>)
    87ae:	4a12      	ldr	r2, [pc, #72]	; (87f8 <bt_promisc_le+0x78>)
    87b0:	601a      	str	r2, [r3, #0]
			bt_generic_le(MODE_BT_PROMISC_LE);
    87b2:	200a      	movs	r0, #10
    87b4:	f7fe fda6 	bl	7304 <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    87b8:	4b10      	ldr	r3, [pc, #64]	; (87fc <bt_promisc_le+0x7c>)
    87ba:	781b      	ldrb	r3, [r3, #0]
    87bc:	b2db      	uxtb	r3, r3
    87be:	2b0a      	cmp	r3, #10
    87c0:	d000      	beq.n	87c4 <bt_promisc_le+0x44>
			break;
    87c2:	e012      	b.n	87ea <bt_promisc_le+0x6a>

		le_promisc_state(0, &le.access_address, 4);
    87c4:	2000      	movs	r0, #0
    87c6:	490a      	ldr	r1, [pc, #40]	; (87f0 <bt_promisc_le+0x70>)
    87c8:	2204      	movs	r2, #4
    87ca:	f7ff fc03 	bl	7fd4 <le_promisc_state>
		packet_cb = promisc_follow_cb;
    87ce:	4b0c      	ldr	r3, [pc, #48]	; (8800 <bt_promisc_le+0x80>)
    87d0:	4a0c      	ldr	r2, [pc, #48]	; (8804 <bt_promisc_le+0x84>)
    87d2:	601a      	str	r2, [r3, #0]
		le.crc_verify = 0;
    87d4:	4b06      	ldr	r3, [pc, #24]	; (87f0 <bt_promisc_le+0x70>)
    87d6:	2200      	movs	r2, #0
    87d8:	611a      	str	r2, [r3, #16]
		bt_le_sync(MODE_BT_PROMISC_LE);
    87da:	200a      	movs	r0, #10
    87dc:	f7fe ff0e 	bl	75fc <bt_le_sync>

	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
    87e0:	4b06      	ldr	r3, [pc, #24]	; (87fc <bt_promisc_le+0x7c>)
    87e2:	781b      	ldrb	r3, [r3, #0]
    87e4:	b2db      	uxtb	r3, r3
    87e6:	2b0a      	cmp	r3, #10
    87e8:	d0cd      	beq.n	8786 <bt_promisc_le+0x6>
		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
	}
}
    87ea:	bd80      	pop	{r7, pc}
    87ec:	1000049c 	.word	0x1000049c
    87f0:	10000458 	.word	0x10000458
    87f4:	10000998 	.word	0x10000998
    87f8:	00008471 	.word	0x00008471
    87fc:	10000a3f 	.word	0x10000a3f
    8800:	1000099c 	.word	0x1000099c
    8804:	0000830d 	.word	0x0000830d

00008808 <bt_slave_le>:

void bt_slave_le() {
    8808:	b590      	push	{r4, r7, lr}
    880a:	b089      	sub	sp, #36	; 0x24
    880c:	af00      	add	r7, sp, #0
	u32 calc_crc;
	int i;

	u8 adv_ind[] = {
    880e:	4a35      	ldr	r2, [pc, #212]	; (88e4 <bt_slave_le+0xdc>)
    8810:	1d3b      	adds	r3, r7, #4
    8812:	4614      	mov	r4, r2
    8814:	6820      	ldr	r0, [r4, #0]
    8816:	6861      	ldr	r1, [r4, #4]
    8818:	68a2      	ldr	r2, [r4, #8]
    881a:	c307      	stmia	r3!, {r0, r1, r2}
    881c:	89a2      	ldrh	r2, [r4, #12]
    881e:	801a      	strh	r2, [r3, #0]

		// CRC (calc)
		0xff, 0xff, 0xff,
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;
    8820:	230b      	movs	r3, #11
    8822:	76fb      	strb	r3, [r7, #27]

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    8824:	2300      	movs	r3, #0
    8826:	61fb      	str	r3, [r7, #28]
    8828:	e00e      	b.n	8848 <bt_slave_le+0x40>
		adv_ind[i+2] = slave_mac_address[5-i];
    882a:	69fb      	ldr	r3, [r7, #28]
    882c:	3302      	adds	r3, #2
    882e:	69fa      	ldr	r2, [r7, #28]
    8830:	f1c2 0205 	rsb	r2, r2, #5
    8834:	492c      	ldr	r1, [pc, #176]	; (88e8 <bt_slave_le+0xe0>)
    8836:	5c8a      	ldrb	r2, [r1, r2]
    8838:	f107 0120 	add.w	r1, r7, #32
    883c:	440b      	add	r3, r1
    883e:	f803 2c1c 	strb.w	r2, [r3, #-28]
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    8842:	69fb      	ldr	r3, [r7, #28]
    8844:	3301      	adds	r3, #1
    8846:	61fb      	str	r3, [r7, #28]
    8848:	69fb      	ldr	r3, [r7, #28]
    884a:	2b05      	cmp	r3, #5
    884c:	dded      	ble.n	882a <bt_slave_le+0x22>
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
    884e:	4b27      	ldr	r3, [pc, #156]	; (88ec <bt_slave_le+0xe4>)
    8850:	68d9      	ldr	r1, [r3, #12]
    8852:	7efb      	ldrb	r3, [r7, #27]
    8854:	1d3a      	adds	r2, r7, #4
    8856:	4608      	mov	r0, r1
    8858:	4611      	mov	r1, r2
    885a:	461a      	mov	r2, r3
    885c:	f000 fcb4 	bl	91c8 <btle_calc_crc>
    8860:	6178      	str	r0, [r7, #20]
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
    8862:	7efb      	ldrb	r3, [r7, #27]
    8864:	697a      	ldr	r2, [r7, #20]
    8866:	b2d2      	uxtb	r2, r2
    8868:	f107 0120 	add.w	r1, r7, #32
    886c:	440b      	add	r3, r1
    886e:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    8872:	7efb      	ldrb	r3, [r7, #27]
    8874:	3301      	adds	r3, #1
    8876:	697a      	ldr	r2, [r7, #20]
    8878:	0a12      	lsrs	r2, r2, #8
    887a:	b2d2      	uxtb	r2, r2
    887c:	f107 0120 	add.w	r1, r7, #32
    8880:	440b      	add	r3, r1
    8882:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    8886:	7efb      	ldrb	r3, [r7, #27]
    8888:	3302      	adds	r3, #2
    888a:	697a      	ldr	r2, [r7, #20]
    888c:	0c12      	lsrs	r2, r2, #16
    888e:	b2d2      	uxtb	r2, r2
    8890:	f107 0120 	add.w	r1, r7, #32
    8894:	440b      	add	r3, r1
    8896:	f803 2c1c 	strb.w	r2, [r3, #-28]

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    889a:	e01b      	b.n	88d4 <bt_slave_le+0xcc>
		ICER0 = ICER0_ICE_USB;
    889c:	4b14      	ldr	r3, [pc, #80]	; (88f0 <bt_slave_le+0xe8>)
    889e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    88a2:	601a      	str	r2, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
    88a4:	4b12      	ldr	r3, [pc, #72]	; (88f0 <bt_slave_le+0xe8>)
    88a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    88aa:	601a      	str	r2, [r3, #0]
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    88ac:	7efb      	ldrb	r3, [r7, #27]
    88ae:	3303      	adds	r3, #3
    88b0:	b2da      	uxtb	r2, r3
    88b2:	1d3b      	adds	r3, r7, #4
    88b4:	480f      	ldr	r0, [pc, #60]	; (88f4 <bt_slave_le+0xec>)
    88b6:	4611      	mov	r1, r2
    88b8:	461a      	mov	r2, r3
    88ba:	f7fd fb55 	bl	5f68 <le_transmit>
		ISER0 = ISER0_ISE_USB;
    88be:	4b0e      	ldr	r3, [pc, #56]	; (88f8 <bt_slave_le+0xf0>)
    88c0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    88c4:	601a      	str	r2, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    88c6:	4b0c      	ldr	r3, [pc, #48]	; (88f8 <bt_slave_le+0xf0>)
    88c8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    88cc:	601a      	str	r2, [r3, #0]
		msleep(100);
    88ce:	2064      	movs	r0, #100	; 0x64
    88d0:	f7fc ff4e 	bl	5770 <msleep>
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    88d4:	4b09      	ldr	r3, [pc, #36]	; (88fc <bt_slave_le+0xf4>)
    88d6:	781b      	ldrb	r3, [r3, #0]
    88d8:	b2db      	uxtb	r3, r3
    88da:	2b0c      	cmp	r3, #12
    88dc:	d0de      	beq.n	889c <bt_slave_le+0x94>
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
		msleep(100);
	}
}
    88de:	3724      	adds	r7, #36	; 0x24
    88e0:	46bd      	mov	sp, r7
    88e2:	bd90      	pop	{r4, r7, pc}
    88e4:	0000cee4 	.word	0x0000cee4
    88e8:	1000098c 	.word	0x1000098c
    88ec:	10000458 	.word	0x10000458
    88f0:	e000e180 	.word	0xe000e180
    88f4:	8e89bed6 	.word	0x8e89bed6
    88f8:	e000e100 	.word	0xe000e100
    88fc:	10000a3f 	.word	0x10000a3f

00008900 <specan>:

/* spectrum analysis */
void specan()
{
    8900:	b590      	push	{r4, r7, lr}
    8902:	b091      	sub	sp, #68	; 0x44
    8904:	af00      	add	r7, sp, #0
	u8 epstat;
	u16 f;
	u8 i = 0;
    8906:	2300      	movs	r3, #0
    8908:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	u8 buf[DMA_SIZE];

	RXLED_SET;
    890c:	4b5a      	ldr	r3, [pc, #360]	; (8a78 <specan+0x178>)
    890e:	2210      	movs	r2, #16
    8910:	601a      	str	r2, [r3, #0]

	queue_init();
    8912:	f000 fd7b 	bl	940c <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8916:	4b59      	ldr	r3, [pc, #356]	; (8a7c <specan+0x17c>)
    8918:	2280      	movs	r2, #128	; 0x80
    891a:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    891c:	2012      	movs	r0, #18
    891e:	f642 3122 	movw	r1, #11042	; 0x2b22
    8922:	f001 ffeb 	bl	a8fc <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    8926:	2014      	movs	r0, #20
    8928:	f241 314b 	movw	r1, #4939	; 0x134b
    892c:	f001 ffe6 	bl	a8fc <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    8930:	2020      	movs	r0, #32
    8932:	f240 1101 	movw	r1, #257	; 0x101
    8936:	f001 ffe1 	bl	a8fc <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    893a:	2003      	movs	r0, #3
    893c:	2129      	movs	r1, #41	; 0x29
    893e:	f001 ffdd 	bl	a8fc <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    8942:	bf00      	nop
    8944:	f002 f892 	bl	aa6c <cc2400_status>
    8948:	4603      	mov	r3, r0
    894a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    894e:	2b00      	cmp	r3, #0
    8950:	d0f8      	beq.n	8944 <specan+0x44>
	while ((cc2400_status() & FS_LOCK));
    8952:	bf00      	nop
    8954:	f002 f88a 	bl	aa6c <cc2400_status>
    8958:	4603      	mov	r3, r0
    895a:	f003 0304 	and.w	r3, r3, #4
    895e:	2b00      	cmp	r3, #0
    8960:	d1f8      	bne.n	8954 <specan+0x54>

	while (requested_mode == MODE_SPECAN) {
    8962:	e07a      	b.n	8a5a <specan+0x15a>
		for (f = low_freq; f < high_freq + 1; f++) {
    8964:	4b46      	ldr	r3, [pc, #280]	; (8a80 <specan+0x180>)
    8966:	881b      	ldrh	r3, [r3, #0]
    8968:	87fb      	strh	r3, [r7, #62]	; 0x3e
    896a:	e06f      	b.n	8a4c <specan+0x14c>
			cc2400_set(FSDIV, f - 1);
    896c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    896e:	3b01      	subs	r3, #1
    8970:	b29b      	uxth	r3, r3
    8972:	2002      	movs	r0, #2
    8974:	4619      	mov	r1, r3
    8976:	f001 ffc1 	bl	a8fc <cc2400_set>
			cc2400_strobe(SFSON);
    897a:	2061      	movs	r0, #97	; 0x61
    897c:	f002 f880 	bl	aa80 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    8980:	bf00      	nop
    8982:	f002 f873 	bl	aa6c <cc2400_status>
    8986:	4603      	mov	r3, r0
    8988:	f003 0304 	and.w	r3, r3, #4
    898c:	2b00      	cmp	r3, #0
    898e:	d0f8      	beq.n	8982 <specan+0x82>
			cc2400_strobe(SRX);
    8990:	2062      	movs	r0, #98	; 0x62
    8992:	f002 f875 	bl	aa80 <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    8996:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    899a:	607b      	str	r3, [r7, #4]
    899c:	bf00      	nop
    899e:	687b      	ldr	r3, [r7, #4]
    89a0:	3b01      	subs	r3, #1
    89a2:	607b      	str	r3, [r7, #4]
    89a4:	2b00      	cmp	r3, #0
    89a6:	d1fa      	bne.n	899e <specan+0x9e>
			buf[3 * i] = (f >> 8) & 0xFF;
    89a8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    89ac:	4613      	mov	r3, r2
    89ae:	005b      	lsls	r3, r3, #1
    89b0:	4413      	add	r3, r2
    89b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    89b4:	0a12      	lsrs	r2, r2, #8
    89b6:	b292      	uxth	r2, r2
    89b8:	b2d2      	uxtb	r2, r2
    89ba:	f107 0140 	add.w	r1, r7, #64	; 0x40
    89be:	440b      	add	r3, r1
    89c0:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 1] = f  & 0xFF;
    89c4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    89c8:	4613      	mov	r3, r2
    89ca:	005b      	lsls	r3, r3, #1
    89cc:	4413      	add	r3, r2
    89ce:	3301      	adds	r3, #1
    89d0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    89d2:	b2d2      	uxtb	r2, r2
    89d4:	f107 0140 	add.w	r1, r7, #64	; 0x40
    89d8:	440b      	add	r3, r1
    89da:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    89de:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    89e2:	4613      	mov	r3, r2
    89e4:	005b      	lsls	r3, r3, #1
    89e6:	4413      	add	r3, r2
    89e8:	1c9c      	adds	r4, r3, #2
    89ea:	2006      	movs	r0, #6
    89ec:	f001 ff70 	bl	a8d0 <cc2400_get>
    89f0:	4603      	mov	r3, r0
    89f2:	0a1b      	lsrs	r3, r3, #8
    89f4:	b29b      	uxth	r3, r3
    89f6:	b2da      	uxtb	r2, r3
    89f8:	f107 0340 	add.w	r3, r7, #64	; 0x40
    89fc:	4423      	add	r3, r4
    89fe:	f803 2c38 	strb.w	r2, [r3, #-56]
			i++;
    8a02:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    8a06:	3301      	adds	r3, #1
    8a08:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (i == 16) {
    8a0c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    8a10:	2b10      	cmp	r3, #16
    8a12:	d10d      	bne.n	8a30 <specan+0x130>
				enqueue(SPECAN, buf);
    8a14:	f107 0308 	add.w	r3, r7, #8
    8a18:	2004      	movs	r0, #4
    8a1a:	4619      	mov	r1, r3
    8a1c:	f7fb fd54 	bl	44c8 <enqueue>
				i = 0;
    8a20:	2300      	movs	r3, #0
    8a22:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				handle_usb(clkn);
    8a26:	4b17      	ldr	r3, [pc, #92]	; (8a84 <specan+0x184>)
    8a28:	681b      	ldr	r3, [r3, #0]
    8a2a:	4618      	mov	r0, r3
    8a2c:	f000 fd8e 	bl	954c <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    8a30:	2064      	movs	r0, #100	; 0x64
    8a32:	f002 f825 	bl	aa80 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    8a36:	bf00      	nop
    8a38:	f002 f818 	bl	aa6c <cc2400_status>
    8a3c:	4603      	mov	r3, r0
    8a3e:	f003 0304 	and.w	r3, r3, #4
    8a42:	2b00      	cmp	r3, #0
    8a44:	d1f8      	bne.n	8a38 <specan+0x138>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    8a46:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    8a48:	3301      	adds	r3, #1
    8a4a:	87fb      	strh	r3, [r7, #62]	; 0x3e
    8a4c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    8a4e:	4b0e      	ldr	r3, [pc, #56]	; (8a88 <specan+0x188>)
    8a50:	881b      	ldrh	r3, [r3, #0]
    8a52:	b29b      	uxth	r3, r3
    8a54:	3301      	adds	r3, #1
    8a56:	429a      	cmp	r2, r3
    8a58:	db88      	blt.n	896c <specan+0x6c>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
    8a5a:	4b0c      	ldr	r3, [pc, #48]	; (8a8c <specan+0x18c>)
    8a5c:	781b      	ldrb	r3, [r3, #0]
    8a5e:	b2db      	uxtb	r3, r3
    8a60:	2b04      	cmp	r3, #4
    8a62:	f43f af7f 	beq.w	8964 <specan+0x64>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	mode = MODE_IDLE;
    8a66:	4b0a      	ldr	r3, [pc, #40]	; (8a90 <specan+0x190>)
    8a68:	2200      	movs	r2, #0
    8a6a:	701a      	strb	r2, [r3, #0]
	RXLED_CLR;
    8a6c:	4b09      	ldr	r3, [pc, #36]	; (8a94 <specan+0x194>)
    8a6e:	2210      	movs	r2, #16
    8a70:	601a      	str	r2, [r3, #0]
}
    8a72:	3744      	adds	r7, #68	; 0x44
    8a74:	46bd      	mov	sp, r7
    8a76:	bd90      	pop	{r4, r7, pc}
    8a78:	2009c038 	.word	0x2009c038
    8a7c:	2009c058 	.word	0x2009c058
    8a80:	1000049e 	.word	0x1000049e
    8a84:	10000be4 	.word	0x10000be4
    8a88:	100004a0 	.word	0x100004a0
    8a8c:	10000a3f 	.word	0x10000a3f
    8a90:	10000a3e 	.word	0x10000a3e
    8a94:	2009c03c 	.word	0x2009c03c

00008a98 <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    8a98:	b580      	push	{r7, lr}
    8a9a:	b084      	sub	sp, #16
    8a9c:	af00      	add	r7, sp, #0
	int8_t lvl;
	u8 i = 0;
    8a9e:	2300      	movs	r3, #0
    8aa0:	73fb      	strb	r3, [r7, #15]
	u16 channels[3] = {2412, 2437, 2462};
    8aa2:	4a5b      	ldr	r2, [pc, #364]	; (8c10 <led_specan+0x178>)
    8aa4:	f107 0308 	add.w	r3, r7, #8
    8aa8:	6810      	ldr	r0, [r2, #0]
    8aaa:	6018      	str	r0, [r3, #0]
    8aac:	8892      	ldrh	r2, [r2, #4]
    8aae:	809a      	strh	r2, [r3, #4]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8ab0:	4b58      	ldr	r3, [pc, #352]	; (8c14 <led_specan+0x17c>)
    8ab2:	2280      	movs	r2, #128	; 0x80
    8ab4:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    8ab6:	2012      	movs	r0, #18
    8ab8:	f642 3122 	movw	r1, #11042	; 0x2b22
    8abc:	f001 ff1e 	bl	a8fc <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    8ac0:	2014      	movs	r0, #20
    8ac2:	f241 314b 	movw	r1, #4939	; 0x134b
    8ac6:	f001 ff19 	bl	a8fc <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    8aca:	2020      	movs	r0, #32
    8acc:	f240 1101 	movw	r1, #257	; 0x101
    8ad0:	f001 ff14 	bl	a8fc <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    8ad4:	2003      	movs	r0, #3
    8ad6:	2129      	movs	r1, #41	; 0x29
    8ad8:	f001 ff10 	bl	a8fc <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    8adc:	2006      	movs	r0, #6
    8ade:	21f1      	movs	r1, #241	; 0xf1
    8ae0:	f001 ff0c 	bl	a8fc <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    8ae4:	bf00      	nop
    8ae6:	f001 ffc1 	bl	aa6c <cc2400_status>
    8aea:	4603      	mov	r3, r0
    8aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8af0:	2b00      	cmp	r3, #0
    8af2:	d0f8      	beq.n	8ae6 <led_specan+0x4e>
	while ((cc2400_status() & FS_LOCK));
    8af4:	bf00      	nop
    8af6:	f001 ffb9 	bl	aa6c <cc2400_status>
    8afa:	4603      	mov	r3, r0
    8afc:	f003 0304 	and.w	r3, r3, #4
    8b00:	2b00      	cmp	r3, #0
    8b02:	d1f8      	bne.n	8af6 <led_specan+0x5e>

	while (requested_mode == MODE_LED_SPECAN) {
    8b04:	e079      	b.n	8bfa <led_specan+0x162>
		cc2400_set(FSDIV, channels[i] - 1);
    8b06:	7bfb      	ldrb	r3, [r7, #15]
    8b08:	005b      	lsls	r3, r3, #1
    8b0a:	f107 0210 	add.w	r2, r7, #16
    8b0e:	4413      	add	r3, r2
    8b10:	f833 3c08 	ldrh.w	r3, [r3, #-8]
    8b14:	3b01      	subs	r3, #1
    8b16:	b29b      	uxth	r3, r3
    8b18:	2002      	movs	r0, #2
    8b1a:	4619      	mov	r1, r3
    8b1c:	f001 feee 	bl	a8fc <cc2400_set>
		cc2400_strobe(SFSON);
    8b20:	2061      	movs	r0, #97	; 0x61
    8b22:	f001 ffad 	bl	aa80 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    8b26:	bf00      	nop
    8b28:	f001 ffa0 	bl	aa6c <cc2400_status>
    8b2c:	4603      	mov	r3, r0
    8b2e:	f003 0304 	and.w	r3, r3, #4
    8b32:	2b00      	cmp	r3, #0
    8b34:	d0f8      	beq.n	8b28 <led_specan+0x90>
		cc2400_strobe(SRX);
    8b36:	2062      	movs	r0, #98	; 0x62
    8b38:	f001 ffa2 	bl	aa80 <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    8b3c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    8b40:	607b      	str	r3, [r7, #4]
    8b42:	bf00      	nop
    8b44:	687b      	ldr	r3, [r7, #4]
    8b46:	3b01      	subs	r3, #1
    8b48:	607b      	str	r3, [r7, #4]
    8b4a:	2b00      	cmp	r3, #0
    8b4c:	d1fa      	bne.n	8b44 <led_specan+0xac>
		lvl = cc2400_get(RSSI) >> 8;
    8b4e:	2006      	movs	r0, #6
    8b50:	f001 febe 	bl	a8d0 <cc2400_get>
    8b54:	4603      	mov	r3, r0
    8b56:	0a1b      	lsrs	r3, r3, #8
    8b58:	b29b      	uxth	r3, r3
    8b5a:	73bb      	strb	r3, [r7, #14]
        if (lvl > rssi_threshold) {
    8b5c:	4b2e      	ldr	r3, [pc, #184]	; (8c18 <led_specan+0x180>)
    8b5e:	781b      	ldrb	r3, [r3, #0]
    8b60:	b2db      	uxtb	r3, r3
    8b62:	f997 200e 	ldrsb.w	r2, [r7, #14]
    8b66:	b25b      	sxtb	r3, r3
    8b68:	429a      	cmp	r2, r3
    8b6a:	dd15      	ble.n	8b98 <led_specan+0x100>
            switch (i) {
    8b6c:	7bfb      	ldrb	r3, [r7, #15]
    8b6e:	2b01      	cmp	r3, #1
    8b70:	d009      	beq.n	8b86 <led_specan+0xee>
    8b72:	2b02      	cmp	r3, #2
    8b74:	d00b      	beq.n	8b8e <led_specan+0xf6>
    8b76:	2b00      	cmp	r3, #0
    8b78:	d000      	beq.n	8b7c <led_specan+0xe4>
    8b7a:	e021      	b.n	8bc0 <led_specan+0x128>
                case 0:
                    TXLED_SET;
    8b7c:	4b27      	ldr	r3, [pc, #156]	; (8c1c <led_specan+0x184>)
    8b7e:	f44f 7280 	mov.w	r2, #256	; 0x100
    8b82:	601a      	str	r2, [r3, #0]
                    break;
    8b84:	e007      	b.n	8b96 <led_specan+0xfe>
                case 1:
                    RXLED_SET;
    8b86:	4b25      	ldr	r3, [pc, #148]	; (8c1c <led_specan+0x184>)
    8b88:	2210      	movs	r2, #16
    8b8a:	601a      	str	r2, [r3, #0]
                    break;
    8b8c:	e003      	b.n	8b96 <led_specan+0xfe>
                case 2:
                    USRLED_SET;
    8b8e:	4b23      	ldr	r3, [pc, #140]	; (8c1c <led_specan+0x184>)
    8b90:	2202      	movs	r2, #2
    8b92:	601a      	str	r2, [r3, #0]
                    break;
    8b94:	bf00      	nop
    8b96:	e013      	b.n	8bc0 <led_specan+0x128>
            }
        }
        else {
            switch (i) {
    8b98:	7bfb      	ldrb	r3, [r7, #15]
    8b9a:	2b01      	cmp	r3, #1
    8b9c:	d008      	beq.n	8bb0 <led_specan+0x118>
    8b9e:	2b02      	cmp	r3, #2
    8ba0:	d00a      	beq.n	8bb8 <led_specan+0x120>
    8ba2:	2b00      	cmp	r3, #0
    8ba4:	d10c      	bne.n	8bc0 <led_specan+0x128>
                case 0:
                    TXLED_CLR;
    8ba6:	4b1e      	ldr	r3, [pc, #120]	; (8c20 <led_specan+0x188>)
    8ba8:	f44f 7280 	mov.w	r2, #256	; 0x100
    8bac:	601a      	str	r2, [r3, #0]
                    break;
    8bae:	e007      	b.n	8bc0 <led_specan+0x128>
                case 1:
                    RXLED_CLR;
    8bb0:	4b1b      	ldr	r3, [pc, #108]	; (8c20 <led_specan+0x188>)
    8bb2:	2210      	movs	r2, #16
    8bb4:	601a      	str	r2, [r3, #0]
                    break;
    8bb6:	e003      	b.n	8bc0 <led_specan+0x128>
                case 2:
                    USRLED_CLR;
    8bb8:	4b19      	ldr	r3, [pc, #100]	; (8c20 <led_specan+0x188>)
    8bba:	2202      	movs	r2, #2
    8bbc:	601a      	str	r2, [r3, #0]
                    break;
    8bbe:	bf00      	nop
            }
        }

		i = (i+1) % 3;
    8bc0:	7bfb      	ldrb	r3, [r7, #15]
    8bc2:	1c5a      	adds	r2, r3, #1
    8bc4:	4b17      	ldr	r3, [pc, #92]	; (8c24 <led_specan+0x18c>)
    8bc6:	fb83 3102 	smull	r3, r1, r3, r2
    8bca:	17d3      	asrs	r3, r2, #31
    8bcc:	1ac9      	subs	r1, r1, r3
    8bce:	460b      	mov	r3, r1
    8bd0:	005b      	lsls	r3, r3, #1
    8bd2:	440b      	add	r3, r1
    8bd4:	1ad1      	subs	r1, r2, r3
    8bd6:	460b      	mov	r3, r1
    8bd8:	73fb      	strb	r3, [r7, #15]

		handle_usb(clkn);
    8bda:	4b13      	ldr	r3, [pc, #76]	; (8c28 <led_specan+0x190>)
    8bdc:	681b      	ldr	r3, [r3, #0]
    8bde:	4618      	mov	r0, r3
    8be0:	f000 fcb4 	bl	954c <handle_usb>
        //wait(1);
		cc2400_strobe(SRFOFF);
    8be4:	2064      	movs	r0, #100	; 0x64
    8be6:	f001 ff4b 	bl	aa80 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8bea:	bf00      	nop
    8bec:	f001 ff3e 	bl	aa6c <cc2400_status>
    8bf0:	4603      	mov	r3, r0
    8bf2:	f003 0304 	and.w	r3, r3, #4
    8bf6:	2b00      	cmp	r3, #0
    8bf8:	d1f8      	bne.n	8bec <led_specan+0x154>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols

	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_LED_SPECAN) {
    8bfa:	4b0c      	ldr	r3, [pc, #48]	; (8c2c <led_specan+0x194>)
    8bfc:	781b      	ldrb	r3, [r3, #0]
    8bfe:	b2db      	uxtb	r3, r3
    8c00:	2b07      	cmp	r3, #7
    8c02:	d080      	beq.n	8b06 <led_specan+0x6e>
		handle_usb(clkn);
        //wait(1);
		cc2400_strobe(SRFOFF);
		while ((cc2400_status() & FS_LOCK));
	}
	mode = MODE_IDLE;
    8c04:	4b0a      	ldr	r3, [pc, #40]	; (8c30 <led_specan+0x198>)
    8c06:	2200      	movs	r2, #0
    8c08:	701a      	strb	r2, [r3, #0]
}
    8c0a:	3710      	adds	r7, #16
    8c0c:	46bd      	mov	sp, r7
    8c0e:	bd80      	pop	{r7, pc}
    8c10:	0000cef4 	.word	0x0000cef4
    8c14:	2009c058 	.word	0x2009c058
    8c18:	100004a2 	.word	0x100004a2
    8c1c:	2009c038 	.word	0x2009c038
    8c20:	2009c03c 	.word	0x2009c03c
    8c24:	55555556 	.word	0x55555556
    8c28:	10000be4 	.word	0x10000be4
    8c2c:	10000a3f 	.word	0x10000a3f
    8c30:	10000a3e 	.word	0x10000a3e

00008c34 <main>:

int main()
{
    8c34:	b580      	push	{r7, lr}
    8c36:	af00      	add	r7, sp, #0
	ubertooth_init();
    8c38:	f001 fd84 	bl	a744 <ubertooth_init>
	clkn_init();
    8c3c:	f7fc fcbc 	bl	55b8 <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    8c40:	484b      	ldr	r0, [pc, #300]	; (8d70 <main+0x13c>)
    8c42:	f000 fbbb 	bl	93bc <ubertooth_usb_init>

	while (1) {
		handle_usb(clkn);
    8c46:	4b4b      	ldr	r3, [pc, #300]	; (8d74 <main+0x140>)
    8c48:	681b      	ldr	r3, [r3, #0]
    8c4a:	4618      	mov	r0, r3
    8c4c:	f000 fc7e 	bl	954c <handle_usb>
		if(requested_mode != mode)
    8c50:	4b49      	ldr	r3, [pc, #292]	; (8d78 <main+0x144>)
    8c52:	781b      	ldrb	r3, [r3, #0]
    8c54:	b2da      	uxtb	r2, r3
    8c56:	4b49      	ldr	r3, [pc, #292]	; (8d7c <main+0x148>)
    8c58:	781b      	ldrb	r3, [r3, #0]
    8c5a:	b2db      	uxtb	r3, r3
    8c5c:	429a      	cmp	r2, r3
    8c5e:	f000 8086 	beq.w	8d6e <main+0x13a>
			switch (requested_mode) {
    8c62:	4b45      	ldr	r3, [pc, #276]	; (8d78 <main+0x144>)
    8c64:	781b      	ldrb	r3, [r3, #0]
    8c66:	b2db      	uxtb	r3, r3
    8c68:	2b0f      	cmp	r3, #15
    8c6a:	d87f      	bhi.n	8d6c <main+0x138>
    8c6c:	a201      	add	r2, pc, #4	; (adr r2, 8c74 <main+0x40>)
    8c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8c72:	bf00      	nop
    8c74:	00008d67 	.word	0x00008d67
    8c78:	00008cc1 	.word	0x00008cc1
    8c7c:	00008d6d 	.word	0x00008d6d
    8c80:	00008d03 	.word	0x00008d03
    8c84:	00008d47 	.word	0x00008d47
    8c88:	00008d13 	.word	0x00008d13
    8c8c:	00008d39 	.word	0x00008d39
    8c90:	00008d4d 	.word	0x00008d4d
    8c94:	00008ce5 	.word	0x00008ce5
    8c98:	00008cf1 	.word	0x00008cf1
    8c9c:	00008cf7 	.word	0x00008cf7
    8ca0:	00008cb5 	.word	0x00008cb5
    8ca4:	00008cfd 	.word	0x00008cfd
    8ca8:	00008d53 	.word	0x00008d53
    8cac:	00008ccd 	.word	0x00008ccd
    8cb0:	00008cd9 	.word	0x00008cd9
				 case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    8cb4:	2001      	movs	r0, #1
    8cb6:	f001 fc3d 	bl	a534 <wait>
					reset();
    8cba:	f001 ffeb 	bl	ac94 <reset>
					break;
    8cbe:	e056      	b.n	8d6e <main+0x13a>
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    8cc0:	4b2e      	ldr	r3, [pc, #184]	; (8d7c <main+0x148>)
    8cc2:	2201      	movs	r2, #1
    8cc4:	701a      	strb	r2, [r3, #0]
					bt_stream_legacy();
    8cc6:	f7fd ff03 	bl	6ad0 <bt_stream_legacy>
					break;
    8cca:	e050      	b.n	8d6e <main+0x13a>
				case MODE_RX_FREQ:
					mode = MODE_RX_FREQ;
    8ccc:	4b2b      	ldr	r3, [pc, #172]	; (8d7c <main+0x148>)
    8cce:	220e      	movs	r2, #14
    8cd0:	701a      	strb	r2, [r3, #0]
					bt_stream_freq();
    8cd2:	f7fd fd41 	bl	6758 <bt_stream_freq>
					break;
    8cd6:	e04a      	b.n	8d6e <main+0x13a>
				case MODE_RX_PROPOSED:
					mode = MODE_RX_PROPOSED;
    8cd8:	4b28      	ldr	r3, [pc, #160]	; (8d7c <main+0x148>)
    8cda:	220f      	movs	r2, #15
    8cdc:	701a      	strb	r2, [r3, #0]
					bt_stream_proposed();
    8cde:	f7fd fc15 	bl	650c <bt_stream_proposed>
					break;
    8ce2:	e044      	b.n	8d6e <main+0x13a>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    8ce4:	4b25      	ldr	r3, [pc, #148]	; (8d7c <main+0x148>)
    8ce6:	2208      	movs	r2, #8
    8ce8:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    8cea:	f7fe f8c3 	bl	6e74 <bt_stream_rx>
					break;
    8cee:	e03e      	b.n	8d6e <main+0x13a>
				case MODE_BT_FOLLOW_LE:
					bt_follow_le();
    8cf0:	f7ff f95c 	bl	7fac <bt_follow_le>
					break;
    8cf4:	e03b      	b.n	8d6e <main+0x13a>
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    8cf6:	f7ff fd43 	bl	8780 <bt_promisc_le>
					break;
    8cfa:	e038      	b.n	8d6e <main+0x13a>
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
    8cfc:	f7ff fd84 	bl	8808 <bt_slave_le>
					break;
    8d00:	e035      	b.n	8d6e <main+0x13a>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    8d02:	4b1e      	ldr	r3, [pc, #120]	; (8d7c <main+0x148>)
    8d04:	2203      	movs	r2, #3
    8d06:	701a      	strb	r2, [r3, #0]
					cc2400_txtest(&modulation, &channel);
    8d08:	481d      	ldr	r0, [pc, #116]	; (8d80 <main+0x14c>)
    8d0a:	491e      	ldr	r1, [pc, #120]	; (8d84 <main+0x150>)
    8d0c:	f000 ff92 	bl	9c34 <cc2400_txtest>
					break;
    8d10:	e02d      	b.n	8d6e <main+0x13a>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    8d12:	4b1a      	ldr	r3, [pc, #104]	; (8d7c <main+0x148>)
    8d14:	2205      	movs	r2, #5
    8d16:	701a      	strb	r2, [r3, #0]
					cc2400_rangetest(&channel);
    8d18:	481a      	ldr	r0, [pc, #104]	; (8d84 <main+0x150>)
    8d1a:	f000 fc35 	bl	9588 <cc2400_rangetest>
					mode = MODE_IDLE;
    8d1e:	4b17      	ldr	r3, [pc, #92]	; (8d7c <main+0x148>)
    8d20:	2200      	movs	r2, #0
    8d22:	701a      	strb	r2, [r3, #0]
					if (requested_mode == MODE_RANGE_TEST)
    8d24:	4b14      	ldr	r3, [pc, #80]	; (8d78 <main+0x144>)
    8d26:	781b      	ldrb	r3, [r3, #0]
    8d28:	b2db      	uxtb	r3, r3
    8d2a:	2b05      	cmp	r3, #5
    8d2c:	d103      	bne.n	8d36 <main+0x102>
						requested_mode = MODE_IDLE;
    8d2e:	4b12      	ldr	r3, [pc, #72]	; (8d78 <main+0x144>)
    8d30:	2200      	movs	r2, #0
    8d32:	701a      	strb	r2, [r3, #0]
					break;
    8d34:	e01b      	b.n	8d6e <main+0x13a>
    8d36:	e01a      	b.n	8d6e <main+0x13a>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    8d38:	4b10      	ldr	r3, [pc, #64]	; (8d7c <main+0x148>)
    8d3a:	2206      	movs	r2, #6
    8d3c:	701a      	strb	r2, [r3, #0]
					cc2400_repeater(&channel);
    8d3e:	4811      	ldr	r0, [pc, #68]	; (8d84 <main+0x150>)
    8d40:	f000 fe40 	bl	99c4 <cc2400_repeater>
					break;
    8d44:	e013      	b.n	8d6e <main+0x13a>
				case MODE_SPECAN:
					specan();
    8d46:	f7ff fddb 	bl	8900 <specan>
					break;
    8d4a:	e010      	b.n	8d6e <main+0x13a>
				case MODE_LED_SPECAN:
					led_specan();
    8d4c:	f7ff fea4 	bl	8a98 <led_specan>
					break;
    8d50:	e00d      	b.n	8d6e <main+0x13a>
				case MODE_EGO:
					mode = MODE_EGO;
    8d52:	4b0a      	ldr	r3, [pc, #40]	; (8d7c <main+0x148>)
    8d54:	220d      	movs	r2, #13
    8d56:	701a      	strb	r2, [r3, #0]
					ego_main(ego_mode);
    8d58:	4b0b      	ldr	r3, [pc, #44]	; (8d88 <main+0x154>)
    8d5a:	781b      	ldrb	r3, [r3, #0]
    8d5c:	b2db      	uxtb	r3, r3
    8d5e:	4618      	mov	r0, r3
    8d60:	f001 fb36 	bl	a3d0 <ego_main>
					break;
    8d64:	e003      	b.n	8d6e <main+0x13a>
				case MODE_IDLE:
					cc2400_idle();
    8d66:	f7fd f807 	bl	5d78 <cc2400_idle>
					break;
    8d6a:	e000      	b.n	8d6e <main+0x13a>
				default:
					/* This is really an error state, but what can you do? */
					break;
    8d6c:	bf00      	nop
			}
	}
    8d6e:	e76a      	b.n	8c46 <main+0x12>
    8d70:	00004aa9 	.word	0x00004aa9
    8d74:	10000be4 	.word	0x10000be4
    8d78:	10000a3f 	.word	0x10000a3f
    8d7c:	10000a3e 	.word	0x10000a3e
    8d80:	10000a42 	.word	0x10000a42
    8d84:	1000049c 	.word	0x1000049c
    8d88:	10000a41 	.word	0x10000a41

00008d8c <perm5>:
	}
}

/* 5 bit permutation */
u8 perm5(u8 z, u8 p_high, u16 p_low)
{
    8d8c:	b490      	push	{r4, r7}
    8d8e:	b092      	sub	sp, #72	; 0x48
    8d90:	af00      	add	r7, sp, #0
    8d92:	4603      	mov	r3, r0
    8d94:	71fb      	strb	r3, [r7, #7]
    8d96:	460b      	mov	r3, r1
    8d98:	71bb      	strb	r3, [r7, #6]
    8d9a:	4613      	mov	r3, r2
    8d9c:	80bb      	strh	r3, [r7, #4]
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
    8d9e:	79fb      	ldrb	r3, [r7, #7]
    8da0:	f003 031f 	and.w	r3, r3, #31
    8da4:	71fb      	strb	r3, [r7, #7]
	p_high &= 0x1f;
    8da6:	79bb      	ldrb	r3, [r7, #6]
    8da8:	f003 031f 	and.w	r3, r3, #31
    8dac:	71bb      	strb	r3, [r7, #6]
	p_low &= 0x1ff;
    8dae:	88bb      	ldrh	r3, [r7, #4]
    8db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
    8db4:	80bb      	strh	r3, [r7, #4]

	int i;
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
    8db6:	4a5c      	ldr	r2, [pc, #368]	; (8f28 <perm5+0x19c>)
    8db8:	f107 031c 	add.w	r3, r7, #28
    8dbc:	4614      	mov	r4, r2
    8dbe:	6820      	ldr	r0, [r4, #0]
    8dc0:	6861      	ldr	r1, [r4, #4]
    8dc2:	68a2      	ldr	r2, [r4, #8]
    8dc4:	c307      	stmia	r3!, {r0, r1, r2}
    8dc6:	89a2      	ldrh	r2, [r4, #12]
    8dc8:	801a      	strh	r2, [r3, #0]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};
    8dca:	4a58      	ldr	r2, [pc, #352]	; (8f2c <perm5+0x1a0>)
    8dcc:	f107 030c 	add.w	r3, r7, #12
    8dd0:	4614      	mov	r4, r2
    8dd2:	6820      	ldr	r0, [r4, #0]
    8dd4:	6861      	ldr	r1, [r4, #4]
    8dd6:	68a2      	ldr	r2, [r4, #8]
    8dd8:	c307      	stmia	r3!, {r0, r1, r2}
    8dda:	89a2      	ldrh	r2, [r4, #12]
    8ddc:	801a      	strh	r2, [r3, #0]

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    8dde:	2300      	movs	r3, #0
    8de0:	647b      	str	r3, [r7, #68]	; 0x44
    8de2:	e010      	b.n	8e06 <perm5+0x7a>
		p[i] = (p_low >> i) & 0x01;
    8de4:	88ba      	ldrh	r2, [r7, #4]
    8de6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8de8:	fa42 f303 	asr.w	r3, r2, r3
    8dec:	b2db      	uxtb	r3, r3
    8dee:	f003 0301 	and.w	r3, r3, #1
    8df2:	b2d9      	uxtb	r1, r3
    8df4:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    8df8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8dfa:	4413      	add	r3, r2
    8dfc:	460a      	mov	r2, r1
    8dfe:	701a      	strb	r2, [r3, #0]
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    8e00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8e02:	3301      	adds	r3, #1
    8e04:	647b      	str	r3, [r7, #68]	; 0x44
    8e06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8e08:	2b08      	cmp	r3, #8
    8e0a:	ddeb      	ble.n	8de4 <perm5+0x58>
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    8e0c:	2300      	movs	r3, #0
    8e0e:	647b      	str	r3, [r7, #68]	; 0x44
    8e10:	e011      	b.n	8e36 <perm5+0xaa>
		p[i+9] = (p_high >> i) & 0x01;
    8e12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8e14:	3309      	adds	r3, #9
    8e16:	79b9      	ldrb	r1, [r7, #6]
    8e18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    8e1a:	fa41 f202 	asr.w	r2, r1, r2
    8e1e:	b2d2      	uxtb	r2, r2
    8e20:	f002 0201 	and.w	r2, r2, #1
    8e24:	b2d2      	uxtb	r2, r2
    8e26:	f107 0148 	add.w	r1, r7, #72	; 0x48
    8e2a:	440b      	add	r3, r1
    8e2c:	f803 2c1c 	strb.w	r2, [r3, #-28]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    8e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8e32:	3301      	adds	r3, #1
    8e34:	647b      	str	r3, [r7, #68]	; 0x44
    8e36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8e38:	2b04      	cmp	r3, #4
    8e3a:	ddea      	ble.n	8e12 <perm5+0x86>
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    8e3c:	2300      	movs	r3, #0
    8e3e:	647b      	str	r3, [r7, #68]	; 0x44
    8e40:	e010      	b.n	8e64 <perm5+0xd8>
		z_bit[i] = (z >> i) & 0x01;
    8e42:	79fa      	ldrb	r2, [r7, #7]
    8e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8e46:	fa42 f303 	asr.w	r3, r2, r3
    8e4a:	b2db      	uxtb	r3, r3
    8e4c:	f003 0301 	and.w	r3, r3, #1
    8e50:	b2d9      	uxtb	r1, r3
    8e52:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    8e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8e58:	4413      	add	r3, r2
    8e5a:	460a      	mov	r2, r1
    8e5c:	701a      	strb	r2, [r3, #0]
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    8e5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8e60:	3301      	adds	r3, #1
    8e62:	647b      	str	r3, [r7, #68]	; 0x44
    8e64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8e66:	2b04      	cmp	r3, #4
    8e68:	ddeb      	ble.n	8e42 <perm5+0xb6>
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    8e6a:	230d      	movs	r3, #13
    8e6c:	647b      	str	r3, [r7, #68]	; 0x44
    8e6e:	e036      	b.n	8ede <perm5+0x152>
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
    8e70:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    8e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8e76:	4413      	add	r3, r2
    8e78:	781b      	ldrb	r3, [r3, #0]
    8e7a:	2b00      	cmp	r3, #0
    8e7c:	d02c      	beq.n	8ed8 <perm5+0x14c>
			tmp = z_bit[index1[i]];
    8e7e:	f107 021c 	add.w	r2, r7, #28
    8e82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8e84:	4413      	add	r3, r2
    8e86:	781b      	ldrb	r3, [r3, #0]
    8e88:	f107 0248 	add.w	r2, r7, #72	; 0x48
    8e8c:	4413      	add	r3, r2
    8e8e:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    8e92:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			z_bit[index1[i]] = z_bit[index2[i]];
    8e96:	f107 021c 	add.w	r2, r7, #28
    8e9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8e9c:	4413      	add	r3, r2
    8e9e:	781b      	ldrb	r3, [r3, #0]
    8ea0:	4619      	mov	r1, r3
    8ea2:	f107 020c 	add.w	r2, r7, #12
    8ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8ea8:	4413      	add	r3, r2
    8eaa:	781b      	ldrb	r3, [r3, #0]
    8eac:	f107 0248 	add.w	r2, r7, #72	; 0x48
    8eb0:	4413      	add	r3, r2
    8eb2:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
    8eb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
    8eba:	440b      	add	r3, r1
    8ebc:	f803 2c0c 	strb.w	r2, [r3, #-12]
			z_bit[index2[i]] = tmp;
    8ec0:	f107 020c 	add.w	r2, r7, #12
    8ec4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8ec6:	4413      	add	r3, r2
    8ec8:	781b      	ldrb	r3, [r3, #0]
    8eca:	f107 0248 	add.w	r2, r7, #72	; 0x48
    8ece:	4413      	add	r3, r2
    8ed0:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
    8ed4:	f803 2c0c 	strb.w	r2, [r3, #-12]
	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    8ed8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8eda:	3b01      	subs	r3, #1
    8edc:	647b      	str	r3, [r7, #68]	; 0x44
    8ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8ee0:	2b00      	cmp	r3, #0
    8ee2:	dac5      	bge.n	8e70 <perm5+0xe4>
			z_bit[index2[i]] = tmp;
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
    8ee4:	2300      	movs	r3, #0
    8ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	for (i = 0; i < 5; i++)
    8eea:	2300      	movs	r3, #0
    8eec:	647b      	str	r3, [r7, #68]	; 0x44
    8eee:	e011      	b.n	8f14 <perm5+0x188>
		output += z_bit[i] << i;
    8ef0:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    8ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8ef6:	4413      	add	r3, r2
    8ef8:	781b      	ldrb	r3, [r3, #0]
    8efa:	461a      	mov	r2, r3
    8efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8efe:	fa02 f303 	lsl.w	r3, r2, r3
    8f02:	b2da      	uxtb	r2, r3
    8f04:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    8f08:	4413      	add	r3, r2
    8f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    8f0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8f10:	3301      	adds	r3, #1
    8f12:	647b      	str	r3, [r7, #68]	; 0x44
    8f14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8f16:	2b04      	cmp	r3, #4
    8f18:	ddea      	ble.n	8ef0 <perm5+0x164>
		output += z_bit[i] << i;

	return output;
    8f1a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
}
    8f1e:	4618      	mov	r0, r3
    8f20:	3748      	adds	r7, #72	; 0x48
    8f22:	46bd      	mov	sp, r7
    8f24:	bc90      	pop	{r4, r7}
    8f26:	4770      	bx	lr
    8f28:	0000cefc 	.word	0x0000cefc
    8f2c:	0000cf0c 	.word	0x0000cf0c

00008f30 <next_hop>:

u16 next_hop(u32 clock)
{
    8f30:	b580      	push	{r7, lr}
    8f32:	b08a      	sub	sp, #40	; 0x28
    8f34:	af00      	add	r7, sp, #0
    8f36:	6078      	str	r0, [r7, #4]
	u16 d, y2;
	u32 base_f, f, f_dash;

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
    8f38:	687b      	ldr	r3, [r7, #4]
    8f3a:	089b      	lsrs	r3, r3, #2
    8f3c:	b2db      	uxtb	r3, r3
    8f3e:	f003 031f 	and.w	r3, r3, #31
    8f42:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	y1 = (clock >> 1) & 0x01;
    8f46:	687b      	ldr	r3, [r7, #4]
    8f48:	085b      	lsrs	r3, r3, #1
    8f4a:	b2db      	uxtb	r3, r3
    8f4c:	f003 0301 	and.w	r3, r3, #1
    8f50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	y2 = y1 << 5;
    8f54:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    8f58:	b29b      	uxth	r3, r3
    8f5a:	015b      	lsls	r3, r3, #5
    8f5c:	847b      	strh	r3, [r7, #34]	; 0x22
	a = (a1 ^ (clock >> 21)) & 0x1f;
    8f5e:	687b      	ldr	r3, [r7, #4]
    8f60:	0d5b      	lsrs	r3, r3, #21
    8f62:	b2da      	uxtb	r2, r3
    8f64:	4b4b      	ldr	r3, [pc, #300]	; (9094 <next_hop+0x164>)
    8f66:	781b      	ldrb	r3, [r3, #0]
    8f68:	4053      	eors	r3, r2
    8f6a:	b2db      	uxtb	r3, r3
    8f6c:	f003 031f 	and.w	r3, r3, #31
    8f70:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    8f74:	687b      	ldr	r3, [r7, #4]
    8f76:	0c1b      	lsrs	r3, r3, #16
    8f78:	b2da      	uxtb	r2, r3
    8f7a:	4b47      	ldr	r3, [pc, #284]	; (9098 <next_hop+0x168>)
    8f7c:	781b      	ldrb	r3, [r3, #0]
    8f7e:	4053      	eors	r3, r2
    8f80:	b2db      	uxtb	r3, r3
    8f82:	f003 031f 	and.w	r3, r3, #31
    8f86:	f887 3020 	strb.w	r3, [r7, #32]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    8f8a:	687b      	ldr	r3, [r7, #4]
    8f8c:	09db      	lsrs	r3, r3, #7
    8f8e:	b29a      	uxth	r2, r3
    8f90:	4b42      	ldr	r3, [pc, #264]	; (909c <next_hop+0x16c>)
    8f92:	881b      	ldrh	r3, [r3, #0]
    8f94:	4053      	eors	r3, r2
    8f96:	b29b      	uxth	r3, r3
    8f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
    8f9c:	83fb      	strh	r3, [r7, #30]
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    8f9e:	687b      	ldr	r3, [r7, #4]
    8fa0:	08db      	lsrs	r3, r3, #3
    8fa2:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    8fa6:	f023 030f 	bic.w	r3, r3, #15
    8faa:	61bb      	str	r3, [r7, #24]
	f = base_f % 79;
    8fac:	69b9      	ldr	r1, [r7, #24]
    8fae:	4b3c      	ldr	r3, [pc, #240]	; (90a0 <next_hop+0x170>)
    8fb0:	fba3 2301 	umull	r2, r3, r3, r1
    8fb4:	099a      	lsrs	r2, r3, #6
    8fb6:	4613      	mov	r3, r2
    8fb8:	009b      	lsls	r3, r3, #2
    8fba:	4413      	add	r3, r2
    8fbc:	011b      	lsls	r3, r3, #4
    8fbe:	1a9b      	subs	r3, r3, r2
    8fc0:	1acb      	subs	r3, r1, r3
    8fc2:	617b      	str	r3, [r7, #20]

	perm = perm5(
    8fc4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    8fc8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    8fcc:	4413      	add	r3, r2
    8fce:	b2db      	uxtb	r3, r3
    8fd0:	b2db      	uxtb	r3, r3
    8fd2:	f003 031f 	and.w	r3, r3, #31
    8fd6:	b2da      	uxtb	r2, r3
    8fd8:	4b32      	ldr	r3, [pc, #200]	; (90a4 <next_hop+0x174>)
    8fda:	781b      	ldrb	r3, [r3, #0]
    8fdc:	b2db      	uxtb	r3, r3
    8fde:	4053      	eors	r3, r2
    8fe0:	b2db      	uxtb	r3, r3
    8fe2:	b2d9      	uxtb	r1, r3
    8fe4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    8fe8:	461a      	mov	r2, r3
    8fea:	0152      	lsls	r2, r2, #5
    8fec:	1ad3      	subs	r3, r2, r3
    8fee:	b2db      	uxtb	r3, r3
    8ff0:	b2da      	uxtb	r2, r3
    8ff2:	f897 3020 	ldrb.w	r3, [r7, #32]
    8ff6:	4053      	eors	r3, r2
    8ff8:	b2db      	uxtb	r3, r3
    8ffa:	b2da      	uxtb	r2, r3
    8ffc:	8bfb      	ldrh	r3, [r7, #30]
    8ffe:	4608      	mov	r0, r1
    9000:	4611      	mov	r1, r2
    9002:	461a      	mov	r2, r3
    9004:	f7ff fec2 	bl	8d8c <perm5>
    9008:	4603      	mov	r3, r0
    900a:	74fb      	strb	r3, [r7, #19]
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % CHANNELS];
    900c:	7cfb      	ldrb	r3, [r7, #19]
    900e:	4a26      	ldr	r2, [pc, #152]	; (90a8 <next_hop+0x178>)
    9010:	7812      	ldrb	r2, [r2, #0]
    9012:	4413      	add	r3, r2
    9014:	461a      	mov	r2, r3
    9016:	697b      	ldr	r3, [r7, #20]
    9018:	441a      	add	r2, r3
    901a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    901c:	18d1      	adds	r1, r2, r3
    901e:	4b20      	ldr	r3, [pc, #128]	; (90a0 <next_hop+0x170>)
    9020:	fba3 2301 	umull	r2, r3, r3, r1
    9024:	099a      	lsrs	r2, r3, #6
    9026:	4613      	mov	r3, r2
    9028:	009b      	lsls	r3, r3, #2
    902a:	4413      	add	r3, r2
    902c:	011b      	lsls	r3, r3, #4
    902e:	1a9b      	subs	r3, r3, r2
    9030:	1aca      	subs	r2, r1, r3
    9032:	4b1e      	ldr	r3, [pc, #120]	; (90ac <next_hop+0x17c>)
    9034:	5c9b      	ldrb	r3, [r3, r2]
    9036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(afh_enabled) {
    903a:	4b1d      	ldr	r3, [pc, #116]	; (90b0 <next_hop+0x180>)
    903c:	781b      	ldrb	r3, [r3, #0]
    903e:	2b00      	cmp	r3, #0
    9040:	d01d      	beq.n	907e <next_hop+0x14e>
		f_dash = base_f % used_channels;
    9042:	4b1c      	ldr	r3, [pc, #112]	; (90b4 <next_hop+0x184>)
    9044:	781b      	ldrb	r3, [r3, #0]
    9046:	461a      	mov	r2, r3
    9048:	69bb      	ldr	r3, [r7, #24]
    904a:	fbb3 f1f2 	udiv	r1, r3, r2
    904e:	fb02 f201 	mul.w	r2, r2, r1
    9052:	1a9b      	subs	r3, r3, r2
    9054:	60fb      	str	r3, [r7, #12]
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    9056:	7cfb      	ldrb	r3, [r7, #19]
    9058:	4a13      	ldr	r2, [pc, #76]	; (90a8 <next_hop+0x178>)
    905a:	7812      	ldrb	r2, [r2, #0]
    905c:	4413      	add	r3, r2
    905e:	461a      	mov	r2, r3
    9060:	68fb      	ldr	r3, [r7, #12]
    9062:	441a      	add	r2, r3
    9064:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    9066:	4413      	add	r3, r2
    9068:	4a12      	ldr	r2, [pc, #72]	; (90b4 <next_hop+0x184>)
    906a:	7812      	ldrb	r2, [r2, #0]
    906c:	fbb3 f1f2 	udiv	r1, r3, r2
    9070:	fb02 f201 	mul.w	r2, r2, r1
    9074:	1a9b      	subs	r3, r3, r2
    9076:	4a10      	ldr	r2, [pc, #64]	; (90b8 <next_hop+0x188>)
    9078:	5cd3      	ldrb	r3, [r2, r3]
    907a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return (2402 + next_channel);
    907e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    9082:	b29b      	uxth	r3, r3
    9084:	f603 1362 	addw	r3, r3, #2402	; 0x962
    9088:	b29b      	uxth	r3, r3

}
    908a:	4618      	mov	r0, r3
    908c:	3728      	adds	r7, #40	; 0x28
    908e:	46bd      	mov	sp, r7
    9090:	bd80      	pop	{r7, pc}
    9092:	bf00      	nop
    9094:	1000112b 	.word	0x1000112b
    9098:	1000112c 	.word	0x1000112c
    909c:	100010da 	.word	0x100010da
    90a0:	cf6474a9 	.word	0xcf6474a9
    90a4:	100010d8 	.word	0x100010d8
    90a8:	1000117f 	.word	0x1000117f
    90ac:	10001130 	.word	0x10001130
    90b0:	1000102c 	.word	0x1000102c
    90b4:	100010d9 	.word	0x100010d9
    90b8:	100010dc 	.word	0x100010dc

000090bc <btle_next_hop>:

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    90bc:	b580      	push	{r7, lr}
    90be:	b084      	sub	sp, #16
    90c0:	af00      	add	r7, sp, #0
    90c2:	6078      	str	r0, [r7, #4]
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    90c4:	687b      	ldr	r3, [r7, #4]
    90c6:	7d5b      	ldrb	r3, [r3, #21]
    90c8:	4618      	mov	r0, r3
    90ca:	f000 f84b 	bl	9164 <btle_channel_index_to_phys>
    90ce:	4603      	mov	r3, r0
    90d0:	81fb      	strh	r3, [r7, #14]
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    90d2:	687b      	ldr	r3, [r7, #4]
    90d4:	7d5b      	ldrb	r3, [r3, #21]
    90d6:	461a      	mov	r2, r3
    90d8:	687b      	ldr	r3, [r7, #4]
    90da:	7d9b      	ldrb	r3, [r3, #22]
    90dc:	441a      	add	r2, r3
    90de:	4b0a      	ldr	r3, [pc, #40]	; (9108 <btle_next_hop+0x4c>)
    90e0:	fb82 0103 	smull	r0, r1, r2, r3
    90e4:	1853      	adds	r3, r2, r1
    90e6:	1159      	asrs	r1, r3, #5
    90e8:	17d3      	asrs	r3, r2, #31
    90ea:	1ac9      	subs	r1, r1, r3
    90ec:	460b      	mov	r3, r1
    90ee:	00db      	lsls	r3, r3, #3
    90f0:	440b      	add	r3, r1
    90f2:	009b      	lsls	r3, r3, #2
    90f4:	440b      	add	r3, r1
    90f6:	1ad1      	subs	r1, r2, r3
    90f8:	b2ca      	uxtb	r2, r1
    90fa:	687b      	ldr	r3, [r7, #4]
    90fc:	755a      	strb	r2, [r3, #21]
	return phys;
    90fe:	89fb      	ldrh	r3, [r7, #14]
}
    9100:	4618      	mov	r0, r3
    9102:	3710      	adds	r7, #16
    9104:	46bd      	mov	sp, r7
    9106:	bd80      	pop	{r7, pc}
    9108:	dd67c8a7 	.word	0xdd67c8a7

0000910c <btle_channel_index>:

u32 received_data = 0;

u8 btle_channel_index(u8 channel) {
    910c:	b480      	push	{r7}
    910e:	b085      	sub	sp, #20
    9110:	af00      	add	r7, sp, #0
    9112:	4603      	mov	r3, r0
    9114:	71fb      	strb	r3, [r7, #7]
	u8 idx;
	channel /= 2;
    9116:	79fb      	ldrb	r3, [r7, #7]
    9118:	085b      	lsrs	r3, r3, #1
    911a:	71fb      	strb	r3, [r7, #7]
	if (channel == 0)
    911c:	79fb      	ldrb	r3, [r7, #7]
    911e:	2b00      	cmp	r3, #0
    9120:	d102      	bne.n	9128 <btle_channel_index+0x1c>
		idx = 37;
    9122:	2325      	movs	r3, #37	; 0x25
    9124:	73fb      	strb	r3, [r7, #15]
    9126:	e015      	b.n	9154 <btle_channel_index+0x48>
	else if (channel < 12)
    9128:	79fb      	ldrb	r3, [r7, #7]
    912a:	2b0b      	cmp	r3, #11
    912c:	d803      	bhi.n	9136 <btle_channel_index+0x2a>
		idx = channel - 1;
    912e:	79fb      	ldrb	r3, [r7, #7]
    9130:	3b01      	subs	r3, #1
    9132:	73fb      	strb	r3, [r7, #15]
    9134:	e00e      	b.n	9154 <btle_channel_index+0x48>
	else if (channel == 12)
    9136:	79fb      	ldrb	r3, [r7, #7]
    9138:	2b0c      	cmp	r3, #12
    913a:	d102      	bne.n	9142 <btle_channel_index+0x36>
		idx = 38;
    913c:	2326      	movs	r3, #38	; 0x26
    913e:	73fb      	strb	r3, [r7, #15]
    9140:	e008      	b.n	9154 <btle_channel_index+0x48>
	else if (channel < 39)
    9142:	79fb      	ldrb	r3, [r7, #7]
    9144:	2b26      	cmp	r3, #38	; 0x26
    9146:	d803      	bhi.n	9150 <btle_channel_index+0x44>
		idx = channel - 2;
    9148:	79fb      	ldrb	r3, [r7, #7]
    914a:	3b02      	subs	r3, #2
    914c:	73fb      	strb	r3, [r7, #15]
    914e:	e001      	b.n	9154 <btle_channel_index+0x48>
	else
		idx = 39;
    9150:	2327      	movs	r3, #39	; 0x27
    9152:	73fb      	strb	r3, [r7, #15]
	return idx;
    9154:	7bfb      	ldrb	r3, [r7, #15]
}
    9156:	4618      	mov	r0, r3
    9158:	3714      	adds	r7, #20
    915a:	46bd      	mov	sp, r7
    915c:	f85d 7b04 	ldr.w	r7, [sp], #4
    9160:	4770      	bx	lr
    9162:	bf00      	nop

00009164 <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
    9164:	b480      	push	{r7}
    9166:	b085      	sub	sp, #20
    9168:	af00      	add	r7, sp, #0
    916a:	4603      	mov	r3, r0
    916c:	71fb      	strb	r3, [r7, #7]
	u16 phys;
	if (idx < 11)
    916e:	79fb      	ldrb	r3, [r7, #7]
    9170:	2b0a      	cmp	r3, #10
    9172:	d806      	bhi.n	9182 <btle_channel_index_to_phys+0x1e>
		phys = 2404 + 2 * idx;
    9174:	79fb      	ldrb	r3, [r7, #7]
    9176:	f203 43b2 	addw	r3, r3, #1202	; 0x4b2
    917a:	b29b      	uxth	r3, r3
    917c:	005b      	lsls	r3, r3, #1
    917e:	81fb      	strh	r3, [r7, #14]
    9180:	e01a      	b.n	91b8 <btle_channel_index_to_phys+0x54>
	else if (idx < 37)
    9182:	79fb      	ldrb	r3, [r7, #7]
    9184:	2b24      	cmp	r3, #36	; 0x24
    9186:	d806      	bhi.n	9196 <btle_channel_index_to_phys+0x32>
		phys = 2428 + 2 * (idx - 11);
    9188:	79fb      	ldrb	r3, [r7, #7]
    918a:	f203 43b3 	addw	r3, r3, #1203	; 0x4b3
    918e:	b29b      	uxth	r3, r3
    9190:	005b      	lsls	r3, r3, #1
    9192:	81fb      	strh	r3, [r7, #14]
    9194:	e010      	b.n	91b8 <btle_channel_index_to_phys+0x54>
	else if (idx == 37)
    9196:	79fb      	ldrb	r3, [r7, #7]
    9198:	2b25      	cmp	r3, #37	; 0x25
    919a:	d103      	bne.n	91a4 <btle_channel_index_to_phys+0x40>
		phys = 2402;
    919c:	f640 1362 	movw	r3, #2402	; 0x962
    91a0:	81fb      	strh	r3, [r7, #14]
    91a2:	e009      	b.n	91b8 <btle_channel_index_to_phys+0x54>
	else if (idx == 38)
    91a4:	79fb      	ldrb	r3, [r7, #7]
    91a6:	2b26      	cmp	r3, #38	; 0x26
    91a8:	d103      	bne.n	91b2 <btle_channel_index_to_phys+0x4e>
		phys = 2426;
    91aa:	f640 137a 	movw	r3, #2426	; 0x97a
    91ae:	81fb      	strh	r3, [r7, #14]
    91b0:	e002      	b.n	91b8 <btle_channel_index_to_phys+0x54>
	else
		phys = 2480;
    91b2:	f44f 631b 	mov.w	r3, #2480	; 0x9b0
    91b6:	81fb      	strh	r3, [r7, #14]
	return phys;
    91b8:	89fb      	ldrh	r3, [r7, #14]
}
    91ba:	4618      	mov	r0, r3
    91bc:	3714      	adds	r7, #20
    91be:	46bd      	mov	sp, r7
    91c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    91c4:	4770      	bx	lr
    91c6:	bf00      	nop

000091c8 <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    91c8:	b480      	push	{r7}
    91ca:	b08b      	sub	sp, #44	; 0x2c
    91cc:	af00      	add	r7, sp, #0
    91ce:	60f8      	str	r0, [r7, #12]
    91d0:	60b9      	str	r1, [r7, #8]
    91d2:	607a      	str	r2, [r7, #4]
	u32 state = crc_init & 0xffffff;
    91d4:	68fb      	ldr	r3, [r7, #12]
    91d6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    91da:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
    91dc:	4b1b      	ldr	r3, [pc, #108]	; (924c <btle_calc_crc+0x84>)
    91de:	617b      	str	r3, [r7, #20]
	int i, j;

	for (i = 0; i < len; ++i) {
    91e0:	2300      	movs	r3, #0
    91e2:	623b      	str	r3, [r7, #32]
    91e4:	e027      	b.n	9236 <btle_calc_crc+0x6e>
		u8 cur = data[i];
    91e6:	6a3b      	ldr	r3, [r7, #32]
    91e8:	68ba      	ldr	r2, [r7, #8]
    91ea:	4413      	add	r3, r2
    91ec:	781b      	ldrb	r3, [r3, #0]
    91ee:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    91f0:	2300      	movs	r3, #0
    91f2:	61fb      	str	r3, [r7, #28]
    91f4:	e019      	b.n	922a <btle_calc_crc+0x62>
			int next_bit = (state ^ cur) & 1;
    91f6:	7efa      	ldrb	r2, [r7, #27]
    91f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    91fa:	4053      	eors	r3, r2
    91fc:	f003 0301 	and.w	r3, r3, #1
    9200:	613b      	str	r3, [r7, #16]
			cur >>= 1;
    9202:	7efb      	ldrb	r3, [r7, #27]
    9204:	085b      	lsrs	r3, r3, #1
    9206:	76fb      	strb	r3, [r7, #27]
			state >>= 1;
    9208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    920a:	085b      	lsrs	r3, r3, #1
    920c:	627b      	str	r3, [r7, #36]	; 0x24
			if (next_bit) {
    920e:	693b      	ldr	r3, [r7, #16]
    9210:	2b00      	cmp	r3, #0
    9212:	d007      	beq.n	9224 <btle_calc_crc+0x5c>
				state |= 1 << 23;
    9214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    9216:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    921a:	627b      	str	r3, [r7, #36]	; 0x24
				state ^= lfsr_mask;
    921c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    921e:	697b      	ldr	r3, [r7, #20]
    9220:	4053      	eors	r3, r2
    9222:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    9224:	69fb      	ldr	r3, [r7, #28]
    9226:	3301      	adds	r3, #1
    9228:	61fb      	str	r3, [r7, #28]
    922a:	69fb      	ldr	r3, [r7, #28]
    922c:	2b07      	cmp	r3, #7
    922e:	dde2      	ble.n	91f6 <btle_calc_crc+0x2e>
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    9230:	6a3b      	ldr	r3, [r7, #32]
    9232:	3301      	adds	r3, #1
    9234:	623b      	str	r3, [r7, #32]
    9236:	6a3a      	ldr	r2, [r7, #32]
    9238:	687b      	ldr	r3, [r7, #4]
    923a:	429a      	cmp	r2, r3
    923c:	dbd3      	blt.n	91e6 <btle_calc_crc+0x1e>
				state ^= lfsr_mask;
			}
		}
	}

	return state;
    923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    9240:	4618      	mov	r0, r3
    9242:	372c      	adds	r7, #44	; 0x2c
    9244:	46bd      	mov	sp, r7
    9246:	f85d 7b04 	ldr.w	r7, [sp], #4
    924a:	4770      	bx	lr
    924c:	005a6000 	.word	0x005a6000

00009250 <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    9250:	b480      	push	{r7}
    9252:	b08d      	sub	sp, #52	; 0x34
    9254:	af00      	add	r7, sp, #0
    9256:	60f8      	str	r0, [r7, #12]
    9258:	60b9      	str	r1, [r7, #8]
    925a:	607a      	str	r2, [r7, #4]
	u32 state = crc;
    925c:	68fb      	ldr	r3, [r7, #12]
    925e:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
    9260:	4b2b      	ldr	r3, [pc, #172]	; (9310 <btle_reverse_crc+0xc0>)
    9262:	61fb      	str	r3, [r7, #28]
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    9264:	687b      	ldr	r3, [r7, #4]
    9266:	3b01      	subs	r3, #1
    9268:	627b      	str	r3, [r7, #36]	; 0x24
    926a:	e02d      	b.n	92c8 <btle_reverse_crc+0x78>
		u8 cur = data[i];
    926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    926e:	68ba      	ldr	r2, [r7, #8]
    9270:	4413      	add	r3, r2
    9272:	781b      	ldrb	r3, [r3, #0]
    9274:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    9276:	2300      	movs	r3, #0
    9278:	623b      	str	r3, [r7, #32]
    927a:	e01f      	b.n	92bc <btle_reverse_crc+0x6c>
			int top_bit = state >> 23;
    927c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    927e:	0ddb      	lsrs	r3, r3, #23
    9280:	617b      	str	r3, [r7, #20]
			state = (state << 1) & 0xffffff;
    9282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9284:	005b      	lsls	r3, r3, #1
    9286:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    928a:	62fb      	str	r3, [r7, #44]	; 0x2c
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    928c:	7efa      	ldrb	r2, [r7, #27]
    928e:	6a3b      	ldr	r3, [r7, #32]
    9290:	f1c3 0307 	rsb	r3, r3, #7
    9294:	fa42 f303 	asr.w	r3, r2, r3
    9298:	f003 0201 	and.w	r2, r3, #1
    929c:	697b      	ldr	r3, [r7, #20]
    929e:	4053      	eors	r3, r2
    92a0:	461a      	mov	r2, r3
    92a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    92a4:	4313      	orrs	r3, r2
    92a6:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (top_bit)
    92a8:	697b      	ldr	r3, [r7, #20]
    92aa:	2b00      	cmp	r3, #0
    92ac:	d003      	beq.n	92b6 <btle_reverse_crc+0x66>
				state ^= lfsr_mask;
    92ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    92b0:	69fb      	ldr	r3, [r7, #28]
    92b2:	4053      	eors	r3, r2
    92b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    92b6:	6a3b      	ldr	r3, [r7, #32]
    92b8:	3301      	adds	r3, #1
    92ba:	623b      	str	r3, [r7, #32]
    92bc:	6a3b      	ldr	r3, [r7, #32]
    92be:	2b07      	cmp	r3, #7
    92c0:	dddc      	ble.n	927c <btle_reverse_crc+0x2c>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    92c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92c4:	3b01      	subs	r3, #1
    92c6:	627b      	str	r3, [r7, #36]	; 0x24
    92c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92ca:	2b00      	cmp	r3, #0
    92cc:	dace      	bge.n	926c <btle_reverse_crc+0x1c>
			if (top_bit)
				state ^= lfsr_mask;
		}
	}

	ret = 0;
    92ce:	2300      	movs	r3, #0
    92d0:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < 24; ++i)
    92d2:	2300      	movs	r3, #0
    92d4:	627b      	str	r3, [r7, #36]	; 0x24
    92d6:	e010      	b.n	92fa <btle_reverse_crc+0xaa>
		ret |= ((state >> i) & 1) << (23 - i);
    92d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    92da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92dc:	fa22 f303 	lsr.w	r3, r2, r3
    92e0:	f003 0201 	and.w	r2, r3, #1
    92e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92e6:	f1c3 0317 	rsb	r3, r3, #23
    92ea:	fa02 f303 	lsl.w	r3, r2, r3
    92ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
    92f0:	4313      	orrs	r3, r2
    92f2:	62bb      	str	r3, [r7, #40]	; 0x28
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    92f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92f6:	3301      	adds	r3, #1
    92f8:	627b      	str	r3, [r7, #36]	; 0x24
    92fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    92fc:	2b17      	cmp	r3, #23
    92fe:	ddeb      	ble.n	92d8 <btle_reverse_crc+0x88>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
    9300:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    9302:	4618      	mov	r0, r3
    9304:	3734      	adds	r7, #52	; 0x34
    9306:	46bd      	mov	sp, r7
    9308:	f85d 7b04 	ldr.w	r7, [sp], #4
    930c:	4770      	bx	lr
    930e:	bf00      	nop
    9310:	00b4c000 	.word	0x00b4c000

00009314 <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    9314:	b480      	push	{r7}
    9316:	b089      	sub	sp, #36	; 0x24
    9318:	af00      	add	r7, sp, #0
    931a:	60f8      	str	r0, [r7, #12]
    931c:	60b9      	str	r1, [r7, #8]
    931e:	607a      	str	r2, [r7, #4]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    9320:	68fb      	ldr	r3, [r7, #12]
    9322:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    9326:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < len; ++i) {
    9328:	2300      	movs	r3, #0
    932a:	61bb      	str	r3, [r7, #24]
    932c:	e012      	b.n	9354 <btle_crcgen_lut+0x40>
		key = data[i] ^ (state & 0xff);
    932e:	69bb      	ldr	r3, [r7, #24]
    9330:	68ba      	ldr	r2, [r7, #8]
    9332:	4413      	add	r3, r2
    9334:	781a      	ldrb	r2, [r3, #0]
    9336:	69fb      	ldr	r3, [r7, #28]
    9338:	b2db      	uxtb	r3, r3
    933a:	4053      	eors	r3, r2
    933c:	75fb      	strb	r3, [r7, #23]
		state = (state >> 8) ^ btle_crc_lut[key];
    933e:	69fb      	ldr	r3, [r7, #28]
    9340:	0a1a      	lsrs	r2, r3, #8
    9342:	7dfb      	ldrb	r3, [r7, #23]
    9344:	4909      	ldr	r1, [pc, #36]	; (936c <btle_crcgen_lut+0x58>)
    9346:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    934a:	4053      	eors	r3, r2
    934c:	61fb      	str	r3, [r7, #28]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    934e:	69bb      	ldr	r3, [r7, #24]
    9350:	3301      	adds	r3, #1
    9352:	61bb      	str	r3, [r7, #24]
    9354:	69ba      	ldr	r2, [r7, #24]
    9356:	687b      	ldr	r3, [r7, #4]
    9358:	429a      	cmp	r2, r3
    935a:	dbe8      	blt.n	932e <btle_crcgen_lut+0x1a>
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
	}
	return state;
    935c:	69fb      	ldr	r3, [r7, #28]
}
    935e:	4618      	mov	r0, r3
    9360:	3724      	adds	r7, #36	; 0x24
    9362:	46bd      	mov	sp, r7
    9364:	f85d 7b04 	ldr.w	r7, [sp], #4
    9368:	4770      	bx	lr
    936a:	bf00      	nop
    936c:	100004a8 	.word	0x100004a8

00009370 <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    9370:	b590      	push	{r4, r7, lr}
    9372:	b087      	sub	sp, #28
    9374:	af00      	add	r7, sp, #0
    9376:	60f8      	str	r0, [r7, #12]
    9378:	60b9      	str	r1, [r7, #8]
    937a:	607a      	str	r2, [r7, #4]
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    937c:	68fb      	ldr	r3, [r7, #12]
    937e:	885b      	ldrh	r3, [r3, #2]
    9380:	823b      	strh	r3, [r7, #16]
    9382:	68fb      	ldr	r3, [r7, #12]
    9384:	889b      	ldrh	r3, [r3, #4]
    9386:	827b      	strh	r3, [r7, #18]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    9388:	4b0b      	ldr	r3, [pc, #44]	; (93b8 <usb_vendor_request_handler+0x48>)
    938a:	681c      	ldr	r4, [r3, #0]
    938c:	68fb      	ldr	r3, [r7, #12]
    938e:	7859      	ldrb	r1, [r3, #1]
    9390:	687b      	ldr	r3, [r7, #4]
    9392:	681b      	ldr	r3, [r3, #0]
    9394:	f107 0210 	add.w	r2, r7, #16
    9398:	4608      	mov	r0, r1
    939a:	4611      	mov	r1, r2
    939c:	461a      	mov	r2, r3
    939e:	68bb      	ldr	r3, [r7, #8]
    93a0:	47a0      	blx	r4
    93a2:	6178      	str	r0, [r7, #20]
	return (BOOL) (rv==1);
    93a4:	697b      	ldr	r3, [r7, #20]
    93a6:	2b01      	cmp	r3, #1
    93a8:	bf0c      	ite	eq
    93aa:	2301      	moveq	r3, #1
    93ac:	2300      	movne	r3, #0
    93ae:	b2db      	uxtb	r3, r3
}
    93b0:	4618      	mov	r0, r3
    93b2:	371c      	adds	r7, #28
    93b4:	46bd      	mov	sp, r7
    93b6:	bd90      	pop	{r4, r7, pc}
    93b8:	10003284 	.word	0x10003284

000093bc <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    93bc:	b580      	push	{r7, lr}
    93be:	b082      	sub	sp, #8
    93c0:	af00      	add	r7, sp, #0
    93c2:	6078      	str	r0, [r7, #4]
	// initialise stack
	USBInit();
    93c4:	f001 fdcc 	bl	af60 <USBInit>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    93c8:	480b      	ldr	r0, [pc, #44]	; (93f8 <ubertooth_usb_init+0x3c>)
    93ca:	f002 fa2b 	bl	b824 <USBRegisterDescriptors>

	// Request handler 
	v_req_handler = vendor_req_handler;
    93ce:	4a0b      	ldr	r2, [pc, #44]	; (93fc <ubertooth_usb_init+0x40>)
    93d0:	687b      	ldr	r3, [r7, #4]
    93d2:	6013      	str	r3, [r2, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    93d4:	2002      	movs	r0, #2
    93d6:	490a      	ldr	r1, [pc, #40]	; (9400 <ubertooth_usb_init+0x44>)
    93d8:	4a0a      	ldr	r2, [pc, #40]	; (9404 <ubertooth_usb_init+0x48>)
    93da:	f001 fd9d 	bl	af18 <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    93de:	20ff      	movs	r0, #255	; 0xff
    93e0:	4909      	ldr	r1, [pc, #36]	; (9408 <ubertooth_usb_init+0x4c>)
    93e2:	f002 f9c9 	bl	b778 <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    93e6:	2001      	movs	r0, #1
    93e8:	f001 fefc 	bl	b1e4 <USBHwConnect>

	return 0;
    93ec:	2300      	movs	r3, #0
}
    93ee:	4618      	mov	r0, r3
    93f0:	3708      	adds	r7, #8
    93f2:	46bd      	mov	sp, r7
    93f4:	bd80      	pop	{r7, pc}
    93f6:	bf00      	nop
    93f8:	0000cf1c 	.word	0x0000cf1c
    93fc:	10003284 	.word	0x10003284
    9400:	00009371 	.word	0x00009371
    9404:	10003180 	.word	0x10003180
    9408:	0000cfe0 	.word	0x0000cfe0

0000940c <queue_init>:

volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init()
{
    940c:	b480      	push	{r7}
    940e:	af00      	add	r7, sp, #0
	head = 0;
    9410:	4b04      	ldr	r3, [pc, #16]	; (9424 <queue_init+0x18>)
    9412:	2200      	movs	r2, #0
    9414:	601a      	str	r2, [r3, #0]
	tail = 0;
    9416:	4b04      	ldr	r3, [pc, #16]	; (9428 <queue_init+0x1c>)
    9418:	2200      	movs	r2, #0
    941a:	601a      	str	r2, [r3, #0]
}
    941c:	46bd      	mov	sp, r7
    941e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9422:	4770      	bx	lr
    9424:	10000a5c 	.word	0x10000a5c
    9428:	10000a60 	.word	0x10000a60

0000942c <usb_enqueue>:

usb_pkt_rx *usb_enqueue()
{
    942c:	b480      	push	{r7}
    942e:	b083      	sub	sp, #12
    9430:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    9432:	4b13      	ldr	r3, [pc, #76]	; (9480 <usb_enqueue+0x54>)
    9434:	681b      	ldr	r3, [r3, #0]
    9436:	b2db      	uxtb	r3, r3
    9438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    943c:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    943e:	4b11      	ldr	r3, [pc, #68]	; (9484 <usb_enqueue+0x58>)
    9440:	681b      	ldr	r3, [r3, #0]
    9442:	b2db      	uxtb	r3, r3
    9444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9448:	71bb      	strb	r3, [r7, #6]
	u8 n = (t + 1) & 0x7F;
    944a:	79bb      	ldrb	r3, [r7, #6]
    944c:	3301      	adds	r3, #1
    944e:	b2db      	uxtb	r3, r3
    9450:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9454:	717b      	strb	r3, [r7, #5]

	/* fail if queue is full */
	if (h == n) {
    9456:	79fa      	ldrb	r2, [r7, #7]
    9458:	797b      	ldrb	r3, [r7, #5]
    945a:	429a      	cmp	r2, r3
    945c:	d101      	bne.n	9462 <usb_enqueue+0x36>
		return NULL;
    945e:	2300      	movs	r3, #0
    9460:	e008      	b.n	9474 <usb_enqueue+0x48>
	}

	++tail;
    9462:	4b08      	ldr	r3, [pc, #32]	; (9484 <usb_enqueue+0x58>)
    9464:	681b      	ldr	r3, [r3, #0]
    9466:	3301      	adds	r3, #1
    9468:	4a06      	ldr	r2, [pc, #24]	; (9484 <usb_enqueue+0x58>)
    946a:	6013      	str	r3, [r2, #0]
	return &fifo[t];
    946c:	79bb      	ldrb	r3, [r7, #6]
    946e:	019b      	lsls	r3, r3, #6
    9470:	4a05      	ldr	r2, [pc, #20]	; (9488 <usb_enqueue+0x5c>)
    9472:	4413      	add	r3, r2
	
}
    9474:	4618      	mov	r0, r3
    9476:	370c      	adds	r7, #12
    9478:	46bd      	mov	sp, r7
    947a:	f85d 7b04 	ldr.w	r7, [sp], #4
    947e:	4770      	bx	lr
    9480:	10000a5c 	.word	0x10000a5c
    9484:	10000a60 	.word	0x10000a60
    9488:	10001180 	.word	0x10001180

0000948c <dequeue>:

usb_pkt_rx *dequeue()
{
    948c:	b480      	push	{r7}
    948e:	b083      	sub	sp, #12
    9490:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    9492:	4b10      	ldr	r3, [pc, #64]	; (94d4 <dequeue+0x48>)
    9494:	681b      	ldr	r3, [r3, #0]
    9496:	b2db      	uxtb	r3, r3
    9498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    949c:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    949e:	4b0e      	ldr	r3, [pc, #56]	; (94d8 <dequeue+0x4c>)
    94a0:	681b      	ldr	r3, [r3, #0]
    94a2:	b2db      	uxtb	r3, r3
    94a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    94a8:	71bb      	strb	r3, [r7, #6]

	/* fail if queue is empty */
	if (h == t) {
    94aa:	79fa      	ldrb	r2, [r7, #7]
    94ac:	79bb      	ldrb	r3, [r7, #6]
    94ae:	429a      	cmp	r2, r3
    94b0:	d101      	bne.n	94b6 <dequeue+0x2a>
		return NULL;
    94b2:	2300      	movs	r3, #0
    94b4:	e008      	b.n	94c8 <dequeue+0x3c>
	}

	++head;
    94b6:	4b07      	ldr	r3, [pc, #28]	; (94d4 <dequeue+0x48>)
    94b8:	681b      	ldr	r3, [r3, #0]
    94ba:	3301      	adds	r3, #1
    94bc:	4a05      	ldr	r2, [pc, #20]	; (94d4 <dequeue+0x48>)
    94be:	6013      	str	r3, [r2, #0]
	return &fifo[h];
    94c0:	79fb      	ldrb	r3, [r7, #7]
    94c2:	019b      	lsls	r3, r3, #6
    94c4:	4a05      	ldr	r2, [pc, #20]	; (94dc <dequeue+0x50>)
    94c6:	4413      	add	r3, r2
}
    94c8:	4618      	mov	r0, r3
    94ca:	370c      	adds	r7, #12
    94cc:	46bd      	mov	sp, r7
    94ce:	f85d 7b04 	ldr.w	r7, [sp], #4
    94d2:	4770      	bx	lr
    94d4:	10000a5c 	.word	0x10000a5c
    94d8:	10000a60 	.word	0x10000a60
    94dc:	10001180 	.word	0x10001180

000094e0 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    94e0:	b580      	push	{r7, lr}
    94e2:	b084      	sub	sp, #16
    94e4:	af00      	add	r7, sp, #0
    94e6:	6078      	str	r0, [r7, #4]
	usb_pkt_rx *pkt = dequeue(&pkt);
    94e8:	f107 030c 	add.w	r3, r7, #12
    94ec:	4618      	mov	r0, r3
    94ee:	f7ff ffcd 	bl	948c <dequeue>
    94f2:	4603      	mov	r3, r0
    94f4:	60fb      	str	r3, [r7, #12]
	if (pkt != NULL) {
    94f6:	68fb      	ldr	r3, [r7, #12]
    94f8:	2b00      	cmp	r3, #0
    94fa:	d00a      	beq.n	9512 <dequeue_send+0x32>
		last_usb_pkt = clkn;
    94fc:	4a11      	ldr	r2, [pc, #68]	; (9544 <dequeue_send+0x64>)
    94fe:	687b      	ldr	r3, [r7, #4]
    9500:	6013      	str	r3, [r2, #0]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    9502:	68fb      	ldr	r3, [r7, #12]
    9504:	2082      	movs	r0, #130	; 0x82
    9506:	4619      	mov	r1, r3
    9508:	2240      	movs	r2, #64	; 0x40
    950a:	f001 fec7 	bl	b29c <USBHwEPWrite>
		return 1;
    950e:	2301      	movs	r3, #1
    9510:	e013      	b.n	953a <dequeue_send+0x5a>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    9512:	4b0c      	ldr	r3, [pc, #48]	; (9544 <dequeue_send+0x64>)
    9514:	681b      	ldr	r3, [r3, #0]
    9516:	687a      	ldr	r2, [r7, #4]
    9518:	1ad3      	subs	r3, r2, r3
    951a:	4a0b      	ldr	r2, [pc, #44]	; (9548 <dequeue_send+0x68>)
    951c:	4293      	cmp	r3, r2
    951e:	d90b      	bls.n	9538 <dequeue_send+0x58>
			u8 pkt_type = KEEP_ALIVE;
    9520:	2303      	movs	r3, #3
    9522:	72fb      	strb	r3, [r7, #11]
			last_usb_pkt = clkn;
    9524:	4a07      	ldr	r2, [pc, #28]	; (9544 <dequeue_send+0x64>)
    9526:	687b      	ldr	r3, [r7, #4]
    9528:	6013      	str	r3, [r2, #0]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    952a:	f107 030b 	add.w	r3, r7, #11
    952e:	2082      	movs	r0, #130	; 0x82
    9530:	4619      	mov	r1, r3
    9532:	2201      	movs	r2, #1
    9534:	f001 feb2 	bl	b29c <USBHwEPWrite>
		}
		return 0;
    9538:	2300      	movs	r3, #0
	}
}
    953a:	4618      	mov	r0, r3
    953c:	3710      	adds	r7, #16
    953e:	46bd      	mov	sp, r7
    9540:	bd80      	pop	{r7, pc}
    9542:	bf00      	nop
    9544:	10000a64 	.word	0x10000a64
    9548:	00061a80 	.word	0x00061a80

0000954c <handle_usb>:

void handle_usb(u32 clkn)
{
    954c:	b580      	push	{r7, lr}
    954e:	b084      	sub	sp, #16
    9550:	af00      	add	r7, sp, #0
    9552:	6078      	str	r0, [r7, #4]
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    9554:	2082      	movs	r0, #130	; 0x82
    9556:	f001 fe65 	bl	b224 <USBHwEPGetStatus>
    955a:	4603      	mov	r3, r0
    955c:	73fb      	strb	r3, [r7, #15]
	if (!(epstat & EPSTAT_B1FULL)) {
    955e:	7bfb      	ldrb	r3, [r7, #15]
    9560:	f003 0320 	and.w	r3, r3, #32
    9564:	2b00      	cmp	r3, #0
    9566:	d102      	bne.n	956e <handle_usb+0x22>
		dequeue_send(clkn);
    9568:	6878      	ldr	r0, [r7, #4]
    956a:	f7ff ffb9 	bl	94e0 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    956e:	7bfb      	ldrb	r3, [r7, #15]
    9570:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9574:	2b00      	cmp	r3, #0
    9576:	d102      	bne.n	957e <handle_usb+0x32>
		dequeue_send(clkn);
    9578:	6878      	ldr	r0, [r7, #4]
    957a:	f7ff ffb1 	bl	94e0 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
    957e:	f001 ff53 	bl	b428 <USBHwISR>
}
    9582:	3710      	adds	r7, #16
    9584:	46bd      	mov	sp, r7
    9586:	bd80      	pop	{r7, pc}

00009588 <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    9588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    958c:	b095      	sub	sp, #84	; 0x54
    958e:	af00      	add	r7, sp, #0
    9590:	6078      	str	r0, [r7, #4]
    9592:	4669      	mov	r1, sp
    9594:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u32 command[5];
	u32 result[5];
	int i;
	int j;
	u8 len = 22;
    9596:	2116      	movs	r1, #22
    9598:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
	u8 pa = 0;
    959c:	2100      	movs	r1, #0
    959e:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
	u8 txbuf[len];
    95a2:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    95a6:	4631      	mov	r1, r6
    95a8:	3901      	subs	r1, #1
    95aa:	6439      	str	r1, [r7, #64]	; 0x40
    95ac:	b2f0      	uxtb	r0, r6
    95ae:	f04f 0100 	mov.w	r1, #0
    95b2:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
    95b6:	ea4b 7b50 	orr.w	fp, fp, r0, lsr #29
    95ba:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
    95be:	b2f0      	uxtb	r0, r6
    95c0:	f04f 0100 	mov.w	r1, #0
    95c4:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    95c8:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
    95cc:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    95d0:	4631      	mov	r1, r6
    95d2:	3107      	adds	r1, #7
    95d4:	08c9      	lsrs	r1, r1, #3
    95d6:	00c9      	lsls	r1, r1, #3
    95d8:	ebad 0d01 	sub.w	sp, sp, r1
    95dc:	4669      	mov	r1, sp
    95de:	3100      	adds	r1, #0
    95e0:	63f9      	str	r1, [r7, #60]	; 0x3c
	u8 rxbuf[len];
    95e2:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    95e6:	4631      	mov	r1, r6
    95e8:	3901      	subs	r1, #1
    95ea:	63b9      	str	r1, [r7, #56]	; 0x38
    95ec:	b2f0      	uxtb	r0, r6
    95ee:	f04f 0100 	mov.w	r1, #0
    95f2:	00cd      	lsls	r5, r1, #3
    95f4:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    95f8:	00c4      	lsls	r4, r0, #3
    95fa:	b2f0      	uxtb	r0, r6
    95fc:	f04f 0100 	mov.w	r1, #0
    9600:	00cb      	lsls	r3, r1, #3
    9602:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    9606:	00c2      	lsls	r2, r0, #3
    9608:	4633      	mov	r3, r6
    960a:	3307      	adds	r3, #7
    960c:	08db      	lsrs	r3, r3, #3
    960e:	00db      	lsls	r3, r3, #3
    9610:	ebad 0d03 	sub.w	sp, sp, r3
    9614:	466b      	mov	r3, sp
    9616:	3300      	adds	r3, #0
    9618:	637b      	str	r3, [r7, #52]	; 0x34

	txbuf[0] = len - 1; // length of data (rest of payload)
    961a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
    961e:	3b01      	subs	r3, #1
    9620:	b2da      	uxtb	r2, r3
    9622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9624:	701a      	strb	r2, [r3, #0]
	txbuf[1] = 0; // request
    9626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9628:	2200      	movs	r2, #0
    962a:	705a      	strb	r2, [r3, #1]

	// read device serial number
	command[0] = 58;
    962c:	233a      	movs	r3, #58	; 0x3a
    962e:	623b      	str	r3, [r7, #32]
	iap_entry(command, result);
    9630:	4bb3      	ldr	r3, [pc, #716]	; (9900 <cc2400_rangetest+0x378>)
    9632:	681b      	ldr	r3, [r3, #0]
    9634:	f107 0120 	add.w	r1, r7, #32
    9638:	f107 020c 	add.w	r2, r7, #12
    963c:	4608      	mov	r0, r1
    963e:	4611      	mov	r1, r2
    9640:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    9642:	68fb      	ldr	r3, [r7, #12]
    9644:	b2db      	uxtb	r3, r3
    9646:	2b00      	cmp	r3, #0
    9648:	d001      	beq.n	964e <cc2400_rangetest+0xc6>
    964a:	2300      	movs	r3, #0
		return;
    964c:	e1ac      	b.n	99a8 <cc2400_rangetest+0x420>
	txbuf[2] = (result[1] >> 24) & 0xFF;
    964e:	693b      	ldr	r3, [r7, #16]
    9650:	0e1b      	lsrs	r3, r3, #24
    9652:	b2da      	uxtb	r2, r3
    9654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9656:	709a      	strb	r2, [r3, #2]
	txbuf[3] = (result[1] >> 16) & 0xFF;
    9658:	693b      	ldr	r3, [r7, #16]
    965a:	0c1b      	lsrs	r3, r3, #16
    965c:	b2da      	uxtb	r2, r3
    965e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9660:	70da      	strb	r2, [r3, #3]
	txbuf[4] = (result[1] >> 8) & 0xFF;
    9662:	693b      	ldr	r3, [r7, #16]
    9664:	0a1b      	lsrs	r3, r3, #8
    9666:	b2da      	uxtb	r2, r3
    9668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    966a:	711a      	strb	r2, [r3, #4]
	txbuf[5] = result[1] & 0xFF;
    966c:	693b      	ldr	r3, [r7, #16]
    966e:	b2da      	uxtb	r2, r3
    9670:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9672:	715a      	strb	r2, [r3, #5]
	txbuf[6] = (result[2] >> 24) & 0xFF;
    9674:	697b      	ldr	r3, [r7, #20]
    9676:	0e1b      	lsrs	r3, r3, #24
    9678:	b2da      	uxtb	r2, r3
    967a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    967c:	719a      	strb	r2, [r3, #6]
	txbuf[7] = (result[2] >> 16) & 0xFF;
    967e:	697b      	ldr	r3, [r7, #20]
    9680:	0c1b      	lsrs	r3, r3, #16
    9682:	b2da      	uxtb	r2, r3
    9684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9686:	71da      	strb	r2, [r3, #7]
	txbuf[8] = (result[2] >> 8) & 0xFF;
    9688:	697b      	ldr	r3, [r7, #20]
    968a:	0a1b      	lsrs	r3, r3, #8
    968c:	b2da      	uxtb	r2, r3
    968e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9690:	721a      	strb	r2, [r3, #8]
	txbuf[9] = result[2] & 0xFF;
    9692:	697b      	ldr	r3, [r7, #20]
    9694:	b2da      	uxtb	r2, r3
    9696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    9698:	725a      	strb	r2, [r3, #9]
	txbuf[10] = (result[3] >> 24) & 0xFF;
    969a:	69bb      	ldr	r3, [r7, #24]
    969c:	0e1b      	lsrs	r3, r3, #24
    969e:	b2da      	uxtb	r2, r3
    96a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96a2:	729a      	strb	r2, [r3, #10]
	txbuf[11] = (result[3] >> 16) & 0xFF;
    96a4:	69bb      	ldr	r3, [r7, #24]
    96a6:	0c1b      	lsrs	r3, r3, #16
    96a8:	b2da      	uxtb	r2, r3
    96aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96ac:	72da      	strb	r2, [r3, #11]
	txbuf[12] = (result[3] >> 8) & 0xFF;
    96ae:	69bb      	ldr	r3, [r7, #24]
    96b0:	0a1b      	lsrs	r3, r3, #8
    96b2:	b2da      	uxtb	r2, r3
    96b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96b6:	731a      	strb	r2, [r3, #12]
	txbuf[13] = result[3] & 0xFF;
    96b8:	69bb      	ldr	r3, [r7, #24]
    96ba:	b2da      	uxtb	r2, r3
    96bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96be:	735a      	strb	r2, [r3, #13]
	txbuf[14] = (result[4] >> 24) & 0xFF;
    96c0:	69fb      	ldr	r3, [r7, #28]
    96c2:	0e1b      	lsrs	r3, r3, #24
    96c4:	b2da      	uxtb	r2, r3
    96c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96c8:	739a      	strb	r2, [r3, #14]
	txbuf[15] = (result[4] >> 16) & 0xFF;
    96ca:	69fb      	ldr	r3, [r7, #28]
    96cc:	0c1b      	lsrs	r3, r3, #16
    96ce:	b2da      	uxtb	r2, r3
    96d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96d2:	73da      	strb	r2, [r3, #15]
	txbuf[16] = (result[4] >> 8) & 0xFF;
    96d4:	69fb      	ldr	r3, [r7, #28]
    96d6:	0a1b      	lsrs	r3, r3, #8
    96d8:	b2da      	uxtb	r2, r3
    96da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96dc:	741a      	strb	r2, [r3, #16]
	txbuf[17] = result[4] & 0xFF;
    96de:	69fb      	ldr	r3, [r7, #28]
    96e0:	b2da      	uxtb	r2, r3
    96e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96e4:	745a      	strb	r2, [r3, #17]

	txbuf[18] = pa; // request pa
    96e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96e8:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    96ec:	749a      	strb	r2, [r3, #18]
	txbuf[19] = 0; // request number
    96ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96f0:	2200      	movs	r2, #0
    96f2:	74da      	strb	r2, [r3, #19]
	txbuf[20] = 0xff; // reply pa
    96f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96f6:	22ff      	movs	r2, #255	; 0xff
    96f8:	751a      	strb	r2, [r3, #20]
	txbuf[21] = 0xff; // reply number
    96fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    96fc:	22ff      	movs	r2, #255	; 0xff
    96fe:	755a      	strb	r2, [r3, #21]

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    9700:	2012      	movs	r0, #18
    9702:	f642 3122 	movw	r1, #11042	; 0x2b22
    9706:	f001 f8f9 	bl	a8fc <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    970a:	2014      	movs	r0, #20
    970c:	f241 314b 	movw	r1, #4939	; 0x134b
    9710:	f001 f8f4 	bl	a8fc <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    9714:	2020      	movs	r0, #32
    9716:	f640 51f1 	movw	r1, #3569	; 0xdf1
    971a:	f001 f8ef 	bl	a8fc <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    971e:	687b      	ldr	r3, [r7, #4]
    9720:	881b      	ldrh	r3, [r3, #0]
    9722:	b29b      	uxth	r3, r3
    9724:	2002      	movs	r0, #2
    9726:	4619      	mov	r1, r3
    9728:	f001 f8e8 	bl	a8fc <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    972c:	202d      	movs	r0, #45	; 0x2d
    972e:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    9732:	f001 f8e3 	bl	a8fc <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    9736:	202c      	movs	r0, #44	; 0x2c
    9738:	f241 5184 	movw	r1, #5508	; 0x1584
    973c:	f001 f8de 	bl	a8fc <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    9740:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    9744:	f043 0308 	orr.w	r3, r3, #8
    9748:	b2db      	uxtb	r3, r3
    974a:	b29b      	uxth	r3, r3
    974c:	2005      	movs	r0, #5
    974e:	4619      	mov	r1, r3
    9750:	f001 f8d4 	bl	a8fc <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    9754:	2003      	movs	r0, #3
    9756:	2129      	movs	r1, #41	; 0x29
    9758:	f001 f8d0 	bl	a8fc <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    975c:	bf00      	nop
    975e:	f001 f985 	bl	aa6c <cc2400_status>
    9762:	4603      	mov	r3, r0
    9764:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9768:	2b00      	cmp	r3, #0
    976a:	d0f8      	beq.n	975e <cc2400_rangetest+0x1d6>
	cc2400_strobe(SFSON);
    976c:	2061      	movs	r0, #97	; 0x61
    976e:	f001 f987 	bl	aa80 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    9772:	bf00      	nop
    9774:	f001 f97a 	bl	aa6c <cc2400_status>
    9778:	4603      	mov	r3, r0
    977a:	f003 0304 	and.w	r3, r3, #4
    977e:	2b00      	cmp	r3, #0
    9780:	d0f8      	beq.n	9774 <cc2400_rangetest+0x1ec>
	TXLED_SET;
    9782:	4b60      	ldr	r3, [pc, #384]	; (9904 <cc2400_rangetest+0x37c>)
    9784:	f44f 7280 	mov.w	r2, #256	; 0x100
    9788:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    978a:	4b5f      	ldr	r3, [pc, #380]	; (9908 <cc2400_rangetest+0x380>)
    978c:	2280      	movs	r2, #128	; 0x80
    978e:	601a      	str	r2, [r3, #0]
#endif
	for (pa = 0; pa < 8; pa++) {
    9790:	2300      	movs	r3, #0
    9792:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    9796:	e03e      	b.n	9816 <cc2400_rangetest+0x28e>
		cc2400_set(FREND, 8 | pa);
    9798:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    979c:	f043 0308 	orr.w	r3, r3, #8
    97a0:	b2db      	uxtb	r3, r3
    97a2:	b29b      	uxth	r3, r3
    97a4:	2005      	movs	r0, #5
    97a6:	4619      	mov	r1, r3
    97a8:	f001 f8a8 	bl	a8fc <cc2400_set>
		txbuf[18] = pa;
    97ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    97ae:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    97b2:	749a      	strb	r2, [r3, #18]
		for (i = 0; i < 16; i++) {
    97b4:	2300      	movs	r3, #0
    97b6:	64fb      	str	r3, [r7, #76]	; 0x4c
    97b8:	e025      	b.n	9806 <cc2400_rangetest+0x27e>
			txbuf[19] = i;
    97ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    97bc:	b2da      	uxtb	r2, r3
    97be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    97c0:	74da      	strb	r2, [r3, #19]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    97c2:	bf00      	nop
    97c4:	200e      	movs	r0, #14
    97c6:	f001 f883 	bl	a8d0 <cc2400_get>
    97ca:	4603      	mov	r3, r0
    97cc:	f003 031f 	and.w	r3, r3, #31
    97d0:	2b0f      	cmp	r3, #15
    97d2:	d1f7      	bne.n	97c4 <cc2400_rangetest+0x23c>
			// transmit a packet
			for (j = 0; j < len; j++)
    97d4:	2300      	movs	r3, #0
    97d6:	64bb      	str	r3, [r7, #72]	; 0x48
    97d8:	e00a      	b.n	97f0 <cc2400_rangetest+0x268>
				cc2400_set8(FIFOREG, txbuf[j]);
    97da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    97dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    97de:	4413      	add	r3, r2
    97e0:	781b      	ldrb	r3, [r3, #0]
    97e2:	2070      	movs	r0, #112	; 0x70
    97e4:	4619      	mov	r1, r3
    97e6:	f001 f8b7 	bl	a958 <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    97ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    97ec:	3301      	adds	r3, #1
    97ee:	64bb      	str	r3, [r7, #72]	; 0x48
    97f0:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    97f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    97f6:	429a      	cmp	r2, r3
    97f8:	dcef      	bgt.n	97da <cc2400_rangetest+0x252>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    97fa:	2063      	movs	r0, #99	; 0x63
    97fc:	f001 f940 	bl	aa80 <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    9800:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9802:	3301      	adds	r3, #1
    9804:	64fb      	str	r3, [r7, #76]	; 0x4c
    9806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9808:	2b0f      	cmp	r3, #15
    980a:	ddd6      	ble.n	97ba <cc2400_rangetest+0x232>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    980c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    9810:	3301      	adds	r3, #1
    9812:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    9816:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    981a:	2b07      	cmp	r3, #7
    981c:	d9bc      	bls.n	9798 <cc2400_rangetest+0x210>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    981e:	bf00      	nop
    9820:	200e      	movs	r0, #14
    9822:	f001 f855 	bl	a8d0 <cc2400_get>
    9826:	4603      	mov	r3, r0
    9828:	f003 031f 	and.w	r3, r3, #31
    982c:	2b0f      	cmp	r3, #15
    982e:	d1f7      	bne.n	9820 <cc2400_rangetest+0x298>
	TXLED_CLR;
    9830:	4b36      	ldr	r3, [pc, #216]	; (990c <cc2400_rangetest+0x384>)
    9832:	f44f 7280 	mov.w	r2, #256	; 0x100
    9836:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    9838:	2064      	movs	r0, #100	; 0x64
    983a:	f001 f921 	bl	aa80 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    983e:	bf00      	nop
    9840:	f001 f914 	bl	aa6c <cc2400_status>
    9844:	4603      	mov	r3, r0
    9846:	f003 0304 	and.w	r3, r3, #4
    984a:	2b00      	cmp	r3, #0
    984c:	d1f8      	bne.n	9840 <cc2400_rangetest+0x2b8>
	cc2400_set(FSDIV, *chan_ptr - 1);
    984e:	687b      	ldr	r3, [r7, #4]
    9850:	881b      	ldrh	r3, [r3, #0]
    9852:	b29b      	uxth	r3, r3
    9854:	3b01      	subs	r3, #1
    9856:	b29b      	uxth	r3, r3
    9858:	2002      	movs	r0, #2
    985a:	4619      	mov	r1, r3
    985c:	f001 f84e 	bl	a8fc <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    9860:	bf00      	nop
    9862:	f001 f903 	bl	aa6c <cc2400_status>
    9866:	4603      	mov	r3, r0
    9868:	f003 0340 	and.w	r3, r3, #64	; 0x40
    986c:	2b00      	cmp	r3, #0
    986e:	d0f8      	beq.n	9862 <cc2400_rangetest+0x2da>
	cc2400_strobe(SFSON);
    9870:	2061      	movs	r0, #97	; 0x61
    9872:	f001 f905 	bl	aa80 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    9876:	bf00      	nop
    9878:	f001 f8f8 	bl	aa6c <cc2400_status>
    987c:	4603      	mov	r3, r0
    987e:	f003 0304 	and.w	r3, r3, #4
    9882:	2b00      	cmp	r3, #0
    9884:	d0f8      	beq.n	9878 <cc2400_rangetest+0x2f0>
	RXLED_SET;
    9886:	4b1f      	ldr	r3, [pc, #124]	; (9904 <cc2400_rangetest+0x37c>)
    9888:	2210      	movs	r2, #16
    988a:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    988c:	bf00      	nop
    988e:	200e      	movs	r0, #14
    9890:	f001 f81e 	bl	a8d0 <cc2400_get>
    9894:	4603      	mov	r3, r0
    9896:	f003 031f 	and.w	r3, r3, #31
    989a:	2b0f      	cmp	r3, #15
    989c:	d1f7      	bne.n	988e <cc2400_rangetest+0x306>
		cc2400_strobe(SRX);
    989e:	2062      	movs	r0, #98	; 0x62
    98a0:	f001 f8ee 	bl	aa80 <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    98a4:	bf00      	nop
    98a6:	f001 f8e1 	bl	aa6c <cc2400_status>
    98aa:	4603      	mov	r3, r0
    98ac:	f003 0310 	and.w	r3, r3, #16
    98b0:	2b00      	cmp	r3, #0
    98b2:	d0f8      	beq.n	98a6 <cc2400_rangetest+0x31e>
		USRLED_SET;
    98b4:	4b13      	ldr	r3, [pc, #76]	; (9904 <cc2400_rangetest+0x37c>)
    98b6:	2202      	movs	r2, #2
    98b8:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
    98ba:	2300      	movs	r3, #0
    98bc:	64bb      	str	r3, [r7, #72]	; 0x48
    98be:	e00c      	b.n	98da <cc2400_rangetest+0x352>
			rxbuf[j] = cc2400_get8(FIFOREG);
    98c0:	2070      	movs	r0, #112	; 0x70
    98c2:	f001 f82f 	bl	a924 <cc2400_get8>
    98c6:	4603      	mov	r3, r0
    98c8:	4619      	mov	r1, r3
    98ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    98cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    98ce:	4413      	add	r3, r2
    98d0:	460a      	mov	r2, r1
    98d2:	701a      	strb	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    98d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    98d6:	3301      	adds	r3, #1
    98d8:	64bb      	str	r3, [r7, #72]	; 0x48
    98da:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    98de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    98e0:	429a      	cmp	r2, r3
    98e2:	dced      	bgt.n	98c0 <cc2400_rangetest+0x338>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    98e4:	f001 f8c2 	bl	aa6c <cc2400_status>
    98e8:	4603      	mov	r3, r0
    98ea:	f003 0308 	and.w	r3, r3, #8
    98ee:	2b00      	cmp	r3, #0
    98f0:	d001      	beq.n	98f6 <cc2400_rangetest+0x36e>
			break;
    98f2:	bf00      	nop
		USRLED_CLR;
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    98f4:	e00c      	b.n	9910 <cc2400_rangetest+0x388>
		USRLED_SET;
		for (j = 0; j < len; j++)
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
			break;
		USRLED_CLR;
    98f6:	4b05      	ldr	r3, [pc, #20]	; (990c <cc2400_rangetest+0x384>)
    98f8:	2202      	movs	r2, #2
    98fa:	601a      	str	r2, [r3, #0]
	}
    98fc:	e7c6      	b.n	988c <cc2400_rangetest+0x304>
    98fe:	bf00      	nop
    9900:	100008a8 	.word	0x100008a8
    9904:	2009c038 	.word	0x2009c038
    9908:	2009c058 	.word	0x2009c058
    990c:	2009c03c 	.word	0x2009c03c

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9910:	200e      	movs	r0, #14
    9912:	f000 ffdd 	bl	a8d0 <cc2400_get>
    9916:	4603      	mov	r3, r0
    9918:	f003 031f 	and.w	r3, r3, #31
    991c:	2b0f      	cmp	r3, #15
    991e:	d1f7      	bne.n	9910 <cc2400_rangetest+0x388>
	cc2400_strobe(SRFOFF);
    9920:	2064      	movs	r0, #100	; 0x64
    9922:	f001 f8ad 	bl	aa80 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    9926:	bf00      	nop
    9928:	f001 f8a0 	bl	aa6c <cc2400_status>
    992c:	4603      	mov	r3, r0
    992e:	f003 0304 	and.w	r3, r3, #4
    9932:	2b00      	cmp	r3, #0
    9934:	d1f8      	bne.n	9928 <cc2400_rangetest+0x3a0>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    9936:	4b20      	ldr	r3, [pc, #128]	; (99b8 <cc2400_rangetest+0x430>)
    9938:	2280      	movs	r2, #128	; 0x80
    993a:	601a      	str	r2, [r3, #0]
#endif
	RXLED_CLR;
    993c:	4b1f      	ldr	r3, [pc, #124]	; (99bc <cc2400_rangetest+0x434>)
    993e:	2210      	movs	r2, #16
    9940:	601a      	str	r2, [r3, #0]

	// get test result
	rr.valid       = 1;
    9942:	4b1f      	ldr	r3, [pc, #124]	; (99c0 <cc2400_rangetest+0x438>)
    9944:	2201      	movs	r2, #1
    9946:	701a      	strb	r2, [r3, #0]
	rr.request_pa  = rxbuf[18];
    9948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    994a:	7c9a      	ldrb	r2, [r3, #18]
    994c:	4b1c      	ldr	r3, [pc, #112]	; (99c0 <cc2400_rangetest+0x438>)
    994e:	705a      	strb	r2, [r3, #1]
	rr.request_num = rxbuf[19];
    9950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9952:	7cda      	ldrb	r2, [r3, #19]
    9954:	4b1a      	ldr	r3, [pc, #104]	; (99c0 <cc2400_rangetest+0x438>)
    9956:	709a      	strb	r2, [r3, #2]
	rr.reply_pa    = rxbuf[20];
    9958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    995a:	7d1a      	ldrb	r2, [r3, #20]
    995c:	4b18      	ldr	r3, [pc, #96]	; (99c0 <cc2400_rangetest+0x438>)
    995e:	70da      	strb	r2, [r3, #3]
	rr.reply_num   = rxbuf[21];
    9960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    9962:	7d5a      	ldrb	r2, [r3, #21]
    9964:	4b16      	ldr	r3, [pc, #88]	; (99c0 <cc2400_rangetest+0x438>)
    9966:	711a      	strb	r2, [r3, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    9968:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    996a:	2201      	movs	r2, #1
    996c:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 18; i++)
    996e:	2300      	movs	r3, #0
    9970:	64fb      	str	r3, [r7, #76]	; 0x4c
    9972:	e012      	b.n	999a <cc2400_rangetest+0x412>
		if (rxbuf[i] != txbuf[i])
    9974:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    9976:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9978:	4413      	add	r3, r2
    997a:	781a      	ldrb	r2, [r3, #0]
    997c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    997e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9980:	440b      	add	r3, r1
    9982:	781b      	ldrb	r3, [r3, #0]
    9984:	429a      	cmp	r2, r3
    9986:	d005      	beq.n	9994 <cc2400_rangetest+0x40c>
			rr.valid = 2 + i;
    9988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    998a:	b2db      	uxtb	r3, r3
    998c:	3302      	adds	r3, #2
    998e:	b2da      	uxtb	r2, r3
    9990:	4b0b      	ldr	r3, [pc, #44]	; (99c0 <cc2400_rangetest+0x438>)
    9992:	701a      	strb	r2, [r3, #0]
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    9994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    9996:	3301      	adds	r3, #1
    9998:	64fb      	str	r3, [r7, #76]	; 0x4c
    999a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    999c:	2b11      	cmp	r3, #17
    999e:	dde9      	ble.n	9974 <cc2400_rangetest+0x3ec>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    99a0:	4b06      	ldr	r3, [pc, #24]	; (99bc <cc2400_rangetest+0x434>)
    99a2:	2202      	movs	r2, #2
    99a4:	601a      	str	r2, [r3, #0]
    99a6:	2301      	movs	r3, #1
    99a8:	f8d7 d000 	ldr.w	sp, [r7]
    99ac:	2b01      	cmp	r3, #1
#endif
}
    99ae:	3754      	adds	r7, #84	; 0x54
    99b0:	46bd      	mov	sp, r7
    99b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    99b6:	bf00      	nop
    99b8:	2009c05c 	.word	0x2009c05c
    99bc:	2009c03c 	.word	0x2009c03c
    99c0:	10001080 	.word	0x10001080

000099c4 <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    99c4:	b5f0      	push	{r4, r5, r6, r7, lr}
    99c6:	b089      	sub	sp, #36	; 0x24
    99c8:	af00      	add	r7, sp, #0
    99ca:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	int i;
	int j;
	u8 len = 22;
    99cc:	2116      	movs	r1, #22
    99ce:	75b9      	strb	r1, [r7, #22]
	u8 pa = 0;
    99d0:	2100      	movs	r1, #0
    99d2:	75f9      	strb	r1, [r7, #23]
	u8 buf[len];
    99d4:	7dbe      	ldrb	r6, [r7, #22]
    99d6:	4631      	mov	r1, r6
    99d8:	3901      	subs	r1, #1
    99da:	6139      	str	r1, [r7, #16]
    99dc:	b2f0      	uxtb	r0, r6
    99de:	f04f 0100 	mov.w	r1, #0
    99e2:	00cd      	lsls	r5, r1, #3
    99e4:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    99e8:	00c4      	lsls	r4, r0, #3
    99ea:	b2f0      	uxtb	r0, r6
    99ec:	f04f 0100 	mov.w	r1, #0
    99f0:	00cb      	lsls	r3, r1, #3
    99f2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    99f6:	00c2      	lsls	r2, r0, #3
    99f8:	4633      	mov	r3, r6
    99fa:	3307      	adds	r3, #7
    99fc:	08db      	lsrs	r3, r3, #3
    99fe:	00db      	lsls	r3, r3, #3
    9a00:	ebad 0d03 	sub.w	sp, sp, r3
    9a04:	466b      	mov	r3, sp
    9a06:	3300      	adds	r3, #0
    9a08:	60fb      	str	r3, [r7, #12]

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(LMTST,   0x2b22);
    9a0a:	2012      	movs	r0, #18
    9a0c:	f642 3122 	movw	r1, #11042	; 0x2b22
    9a10:	f000 ff74 	bl	a8fc <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    9a14:	2014      	movs	r0, #20
    9a16:	f241 314b 	movw	r1, #4939	; 0x134b
    9a1a:	f000 ff6f 	bl	a8fc <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    9a1e:	687b      	ldr	r3, [r7, #4]
    9a20:	881b      	ldrh	r3, [r3, #0]
    9a22:	b29b      	uxth	r3, r3
    9a24:	3b01      	subs	r3, #1
    9a26:	b29b      	uxth	r3, r3
    9a28:	2002      	movs	r0, #2
    9a2a:	4619      	mov	r1, r3
    9a2c:	f000 ff66 	bl	a8fc <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    9a30:	202d      	movs	r0, #45	; 0x2d
    9a32:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    9a36:	f000 ff61 	bl	a8fc <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    9a3a:	202c      	movs	r0, #44	; 0x2c
    9a3c:	f241 5184 	movw	r1, #5508	; 0x1584
    9a40:	f000 ff5c 	bl	a8fc <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    9a44:	2005      	movs	r0, #5
    9a46:	2108      	movs	r1, #8
    9a48:	f000 ff58 	bl	a8fc <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    9a4c:	2003      	movs	r0, #3
    9a4e:	2129      	movs	r1, #41	; 0x29
    9a50:	f000 ff54 	bl	a8fc <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    9a54:	bf00      	nop
    9a56:	f001 f809 	bl	aa6c <cc2400_status>
    9a5a:	4603      	mov	r3, r0
    9a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9a60:	2b00      	cmp	r3, #0
    9a62:	d0f8      	beq.n	9a56 <cc2400_repeater+0x92>
		cc2400_strobe(SFSON);
    9a64:	2061      	movs	r0, #97	; 0x61
    9a66:	f001 f80b 	bl	aa80 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    9a6a:	bf00      	nop
    9a6c:	f000 fffe 	bl	aa6c <cc2400_status>
    9a70:	4603      	mov	r3, r0
    9a72:	f003 0304 	and.w	r3, r3, #4
    9a76:	2b00      	cmp	r3, #0
    9a78:	d0f8      	beq.n	9a6c <cc2400_repeater+0xa8>
		RXLED_SET;
    9a7a:	4b6a      	ldr	r3, [pc, #424]	; (9c24 <cc2400_repeater+0x260>)
    9a7c:	2210      	movs	r2, #16
    9a7e:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    9a80:	4b69      	ldr	r3, [pc, #420]	; (9c28 <cc2400_repeater+0x264>)
    9a82:	f44f 7280 	mov.w	r2, #256	; 0x100
    9a86:	601a      	str	r2, [r3, #0]
		USRLED_CLR;
    9a88:	4b67      	ldr	r3, [pc, #412]	; (9c28 <cc2400_repeater+0x264>)
    9a8a:	2202      	movs	r2, #2
    9a8c:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    9a8e:	4b67      	ldr	r3, [pc, #412]	; (9c2c <cc2400_repeater+0x268>)
    9a90:	2280      	movs	r2, #128	; 0x80
    9a92:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9a94:	bf00      	nop
    9a96:	200e      	movs	r0, #14
    9a98:	f000 ff1a 	bl	a8d0 <cc2400_get>
    9a9c:	4603      	mov	r3, r0
    9a9e:	f003 031f 	and.w	r3, r3, #31
    9aa2:	2b0f      	cmp	r3, #15
    9aa4:	d1f7      	bne.n	9a96 <cc2400_repeater+0xd2>
			USRLED_CLR;
    9aa6:	4b60      	ldr	r3, [pc, #384]	; (9c28 <cc2400_repeater+0x264>)
    9aa8:	2202      	movs	r2, #2
    9aaa:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRX);
    9aac:	2062      	movs	r0, #98	; 0x62
    9aae:	f000 ffe7 	bl	aa80 <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    9ab2:	bf00      	nop
    9ab4:	f000 ffda 	bl	aa6c <cc2400_status>
    9ab8:	4603      	mov	r3, r0
    9aba:	f003 0310 	and.w	r3, r3, #16
    9abe:	2b00      	cmp	r3, #0
    9ac0:	d0f8      	beq.n	9ab4 <cc2400_repeater+0xf0>
			USRLED_SET;
    9ac2:	4b58      	ldr	r3, [pc, #352]	; (9c24 <cc2400_repeater+0x260>)
    9ac4:	2202      	movs	r2, #2
    9ac6:	601a      	str	r2, [r3, #0]
			for (i = 0; i < len; i++)
    9ac8:	2300      	movs	r3, #0
    9aca:	61fb      	str	r3, [r7, #28]
    9acc:	e00c      	b.n	9ae8 <cc2400_repeater+0x124>
				buf[i] = cc2400_get8(FIFOREG);
    9ace:	2070      	movs	r0, #112	; 0x70
    9ad0:	f000 ff28 	bl	a924 <cc2400_get8>
    9ad4:	4603      	mov	r3, r0
    9ad6:	4619      	mov	r1, r3
    9ad8:	68fa      	ldr	r2, [r7, #12]
    9ada:	69fb      	ldr	r3, [r7, #28]
    9adc:	4413      	add	r3, r2
    9ade:	460a      	mov	r2, r1
    9ae0:	701a      	strb	r2, [r3, #0]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    9ae2:	69fb      	ldr	r3, [r7, #28]
    9ae4:	3301      	adds	r3, #1
    9ae6:	61fb      	str	r3, [r7, #28]
    9ae8:	7dba      	ldrb	r2, [r7, #22]
    9aea:	69fb      	ldr	r3, [r7, #28]
    9aec:	429a      	cmp	r2, r3
    9aee:	dcee      	bgt.n	9ace <cc2400_repeater+0x10a>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    9af0:	f000 ffbc 	bl	aa6c <cc2400_status>
    9af4:	4603      	mov	r3, r0
    9af6:	f003 0308 	and.w	r3, r3, #8
    9afa:	2b00      	cmp	r3, #0
    9afc:	d003      	beq.n	9b06 <cc2400_repeater+0x142>
				break;
    9afe:	bf00      	nop
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    9b00:	4b4b      	ldr	r3, [pc, #300]	; (9c30 <cc2400_repeater+0x26c>)
    9b02:	61fb      	str	r3, [r7, #28]
    9b04:	e000      	b.n	9b08 <cc2400_repeater+0x144>
			USRLED_SET;
			for (i = 0; i < len; i++)
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
				break;
		}
    9b06:	e7c5      	b.n	9a94 <cc2400_repeater+0xd0>
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    9b08:	69fb      	ldr	r3, [r7, #28]
    9b0a:	3b01      	subs	r3, #1
    9b0c:	61fb      	str	r3, [r7, #28]
    9b0e:	69fb      	ldr	r3, [r7, #28]
    9b10:	2b00      	cmp	r3, #0
    9b12:	d1f9      	bne.n	9b08 <cc2400_repeater+0x144>
		USRLED_CLR;
    9b14:	4b44      	ldr	r3, [pc, #272]	; (9c28 <cc2400_repeater+0x264>)
    9b16:	2202      	movs	r2, #2
    9b18:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    9b1a:	4b43      	ldr	r3, [pc, #268]	; (9c28 <cc2400_repeater+0x264>)
    9b1c:	2210      	movs	r2, #16
    9b1e:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    9b20:	2064      	movs	r0, #100	; 0x64
    9b22:	f000 ffad 	bl	aa80 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    9b26:	bf00      	nop
    9b28:	f000 ffa0 	bl	aa6c <cc2400_status>
    9b2c:	4603      	mov	r3, r0
    9b2e:	f003 0304 	and.w	r3, r3, #4
    9b32:	2b00      	cmp	r3, #0
    9b34:	d1f8      	bne.n	9b28 <cc2400_repeater+0x164>
		while (!(cc2400_status() & XOSC16M_STABLE));
    9b36:	bf00      	nop
    9b38:	f000 ff98 	bl	aa6c <cc2400_status>
    9b3c:	4603      	mov	r3, r0
    9b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b42:	2b00      	cmp	r3, #0
    9b44:	d0f8      	beq.n	9b38 <cc2400_repeater+0x174>
		cc2400_set(FSDIV, *chan_ptr);
    9b46:	687b      	ldr	r3, [r7, #4]
    9b48:	881b      	ldrh	r3, [r3, #0]
    9b4a:	b29b      	uxth	r3, r3
    9b4c:	2002      	movs	r0, #2
    9b4e:	4619      	mov	r1, r3
    9b50:	f000 fed4 	bl	a8fc <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    9b54:	bf00      	nop
    9b56:	f000 ff89 	bl	aa6c <cc2400_status>
    9b5a:	4603      	mov	r3, r0
    9b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9b60:	2b00      	cmp	r3, #0
    9b62:	d0f8      	beq.n	9b56 <cc2400_repeater+0x192>
		cc2400_strobe(SFSON);
    9b64:	2061      	movs	r0, #97	; 0x61
    9b66:	f000 ff8b 	bl	aa80 <cc2400_strobe>
		TXLED_SET;
    9b6a:	4b2e      	ldr	r3, [pc, #184]	; (9c24 <cc2400_repeater+0x260>)
    9b6c:	f44f 7280 	mov.w	r2, #256	; 0x100
    9b70:	601a      	str	r2, [r3, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    9b72:	7dbb      	ldrb	r3, [r7, #22]
    9b74:	3b01      	subs	r3, #1
    9b76:	b2da      	uxtb	r2, r3
    9b78:	68fb      	ldr	r3, [r7, #12]
    9b7a:	701a      	strb	r2, [r3, #0]
		buf[1] = 1; // reply
    9b7c:	68fb      	ldr	r3, [r7, #12]
    9b7e:	2201      	movs	r2, #1
    9b80:	705a      	strb	r2, [r3, #1]
		for (pa = 0; pa < 8; pa++) {
    9b82:	2300      	movs	r3, #0
    9b84:	75fb      	strb	r3, [r7, #23]
    9b86:	e039      	b.n	9bfc <cc2400_repeater+0x238>
			cc2400_set(FREND, 8 | pa);
    9b88:	7dfb      	ldrb	r3, [r7, #23]
    9b8a:	f043 0308 	orr.w	r3, r3, #8
    9b8e:	b2db      	uxtb	r3, r3
    9b90:	b29b      	uxth	r3, r3
    9b92:	2005      	movs	r0, #5
    9b94:	4619      	mov	r1, r3
    9b96:	f000 feb1 	bl	a8fc <cc2400_set>
			buf[20] = pa;
    9b9a:	68fb      	ldr	r3, [r7, #12]
    9b9c:	7dfa      	ldrb	r2, [r7, #23]
    9b9e:	751a      	strb	r2, [r3, #20]
			for (i = 0; i < 16; i++) {
    9ba0:	2300      	movs	r3, #0
    9ba2:	61fb      	str	r3, [r7, #28]
    9ba4:	e024      	b.n	9bf0 <cc2400_repeater+0x22c>
				buf[21] = i;
    9ba6:	69fb      	ldr	r3, [r7, #28]
    9ba8:	b2da      	uxtb	r2, r3
    9baa:	68fb      	ldr	r3, [r7, #12]
    9bac:	755a      	strb	r2, [r3, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9bae:	bf00      	nop
    9bb0:	200e      	movs	r0, #14
    9bb2:	f000 fe8d 	bl	a8d0 <cc2400_get>
    9bb6:	4603      	mov	r3, r0
    9bb8:	f003 031f 	and.w	r3, r3, #31
    9bbc:	2b0f      	cmp	r3, #15
    9bbe:	d1f7      	bne.n	9bb0 <cc2400_repeater+0x1ec>
					for (j = 0; j < len; j++)
    9bc0:	2300      	movs	r3, #0
    9bc2:	61bb      	str	r3, [r7, #24]
    9bc4:	e00a      	b.n	9bdc <cc2400_repeater+0x218>
						cc2400_set8(FIFOREG, buf[j]);
    9bc6:	68fa      	ldr	r2, [r7, #12]
    9bc8:	69bb      	ldr	r3, [r7, #24]
    9bca:	4413      	add	r3, r2
    9bcc:	781b      	ldrb	r3, [r3, #0]
    9bce:	2070      	movs	r0, #112	; 0x70
    9bd0:	4619      	mov	r1, r3
    9bd2:	f000 fec1 	bl	a958 <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
					for (j = 0; j < len; j++)
    9bd6:	69bb      	ldr	r3, [r7, #24]
    9bd8:	3301      	adds	r3, #1
    9bda:	61bb      	str	r3, [r7, #24]
    9bdc:	7dba      	ldrb	r2, [r7, #22]
    9bde:	69bb      	ldr	r3, [r7, #24]
    9be0:	429a      	cmp	r2, r3
    9be2:	dcf0      	bgt.n	9bc6 <cc2400_repeater+0x202>
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    9be4:	2063      	movs	r0, #99	; 0x63
    9be6:	f000 ff4b 	bl	aa80 <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    9bea:	69fb      	ldr	r3, [r7, #28]
    9bec:	3301      	adds	r3, #1
    9bee:	61fb      	str	r3, [r7, #28]
    9bf0:	69fb      	ldr	r3, [r7, #28]
    9bf2:	2b0f      	cmp	r3, #15
    9bf4:	ddd7      	ble.n	9ba6 <cc2400_repeater+0x1e2>
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    9bf6:	7dfb      	ldrb	r3, [r7, #23]
    9bf8:	3301      	adds	r3, #1
    9bfa:	75fb      	strb	r3, [r7, #23]
    9bfc:	7dfb      	ldrb	r3, [r7, #23]
    9bfe:	2b07      	cmp	r3, #7
    9c00:	d9c2      	bls.n	9b88 <cc2400_repeater+0x1c4>
					for (j = 0; j < len; j++)
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    9c02:	4b09      	ldr	r3, [pc, #36]	; (9c28 <cc2400_repeater+0x264>)
    9c04:	f44f 7280 	mov.w	r2, #256	; 0x100
    9c08:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    9c0a:	2064      	movs	r0, #100	; 0x64
    9c0c:	f000 ff38 	bl	aa80 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    9c10:	bf00      	nop
    9c12:	f000 ff2b 	bl	aa6c <cc2400_status>
    9c16:	4603      	mov	r3, r0
    9c18:	f003 0304 	and.w	r3, r3, #4
    9c1c:	2b00      	cmp	r3, #0
    9c1e:	d1f8      	bne.n	9c12 <cc2400_repeater+0x24e>
	}
    9c20:	e6f3      	b.n	9a0a <cc2400_repeater+0x46>
    9c22:	bf00      	nop
    9c24:	2009c038 	.word	0x2009c038
    9c28:	2009c03c 	.word	0x2009c03c
    9c2c:	2009c058 	.word	0x2009c058
    9c30:	001e8480 	.word	0x001e8480

00009c34 <cc2400_txtest>:
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    9c34:	b580      	push	{r7, lr}
    9c36:	b084      	sub	sp, #16
    9c38:	af00      	add	r7, sp, #0
    9c3a:	6078      	str	r0, [r7, #4]
    9c3c:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    9c3e:	687b      	ldr	r3, [r7, #4]
    9c40:	781b      	ldrb	r3, [r3, #0]
    9c42:	b2db      	uxtb	r3, r3
    9c44:	2b00      	cmp	r3, #0
    9c46:	d102      	bne.n	9c4e <cc2400_txtest+0x1a>
		mdmctrl = 0x0040; // 160 kHz frequency deviation
    9c48:	2340      	movs	r3, #64	; 0x40
    9c4a:	81fb      	strh	r3, [r7, #14]
    9c4c:	e008      	b.n	9c60 <cc2400_txtest+0x2c>
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    9c4e:	687b      	ldr	r3, [r7, #4]
    9c50:	781b      	ldrb	r3, [r3, #0]
    9c52:	b2db      	uxtb	r3, r3
    9c54:	2b01      	cmp	r3, #1
    9c56:	d102      	bne.n	9c5e <cc2400_txtest+0x2a>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    9c58:	2340      	movs	r3, #64	; 0x40
    9c5a:	81fb      	strh	r3, [r7, #14]
    9c5c:	e000      	b.n	9c60 <cc2400_txtest+0x2c>
	} else {
		/* oops */
		return;
    9c5e:	e035      	b.n	9ccc <cc2400_txtest+0x98>
	}
	cc2400_set(LMTST,   0x2b22);
    9c60:	2012      	movs	r0, #18
    9c62:	f642 3122 	movw	r1, #11042	; 0x2b22
    9c66:	f000 fe49 	bl	a8fc <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    9c6a:	2014      	movs	r0, #20
    9c6c:	f243 314b 	movw	r1, #13131	; 0x334b
    9c70:	f000 fe44 	bl	a8fc <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    9c74:	2020      	movs	r0, #32
    9c76:	f640 51f1 	movw	r1, #3569	; 0xdf1
    9c7a:	f000 fe3f 	bl	a8fc <cc2400_set>
	cc2400_set(FSDIV,   2435);
    9c7e:	2002      	movs	r0, #2
    9c80:	f640 1183 	movw	r1, #2435	; 0x983
    9c84:	f000 fe3a 	bl	a8fc <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl); 
    9c88:	89fb      	ldrh	r3, [r7, #14]
    9c8a:	2003      	movs	r0, #3
    9c8c:	4619      	mov	r1, r3
    9c8e:	f000 fe35 	bl	a8fc <cc2400_set>
	
//	cc2400_set(FREND, 8 | 0);
	
	while (!(cc2400_status() & XOSC16M_STABLE));
    9c92:	bf00      	nop
    9c94:	f000 feea 	bl	aa6c <cc2400_status>
    9c98:	4603      	mov	r3, r0
    9c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9c9e:	2b00      	cmp	r3, #0
    9ca0:	d0f8      	beq.n	9c94 <cc2400_txtest+0x60>
	cc2400_strobe(SFSON);
    9ca2:	2061      	movs	r0, #97	; 0x61
    9ca4:	f000 feec 	bl	aa80 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    9ca8:	bf00      	nop
    9caa:	f000 fedf 	bl	aa6c <cc2400_status>
    9cae:	4603      	mov	r3, r0
    9cb0:	f003 0304 	and.w	r3, r3, #4
    9cb4:	2b00      	cmp	r3, #0
    9cb6:	d0f8      	beq.n	9caa <cc2400_txtest+0x76>
	TXLED_SET;
    9cb8:	4b06      	ldr	r3, [pc, #24]	; (9cd4 <cc2400_txtest+0xa0>)
    9cba:	f44f 7280 	mov.w	r2, #256	; 0x100
    9cbe:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    9cc0:	2063      	movs	r0, #99	; 0x63
    9cc2:	f000 fedd 	bl	aa80 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    9cc6:	4b04      	ldr	r3, [pc, #16]	; (9cd8 <cc2400_txtest+0xa4>)
    9cc8:	2280      	movs	r2, #128	; 0x80
    9cca:	601a      	str	r2, [r3, #0]
#endif
#endif
}
    9ccc:	3710      	adds	r7, #16
    9cce:	46bd      	mov	sp, r7
    9cd0:	bd80      	pop	{r7, pc}
    9cd2:	bf00      	nop
    9cd4:	2009c038 	.word	0x2009c038
    9cd8:	2009c058 	.word	0x2009c058

00009cdc <ssp_start>:
typedef struct _ego_packet_t {
	u8 rxbuf[EGO_PACKET_LEN];
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
    9cdc:	b480      	push	{r7}
    9cde:	af00      	add	r7, sp, #0
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    9ce0:	4b08      	ldr	r3, [pc, #32]	; (9d04 <ssp_start+0x28>)
    9ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9ce6:	601a      	str	r2, [r3, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    9ce8:	4a07      	ldr	r2, [pc, #28]	; (9d08 <ssp_start+0x2c>)
    9cea:	4b07      	ldr	r3, [pc, #28]	; (9d08 <ssp_start+0x2c>)
    9cec:	681b      	ldr	r3, [r3, #0]
    9cee:	f043 0302 	orr.w	r3, r3, #2
    9cf2:	6013      	str	r3, [r2, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    9cf4:	4b05      	ldr	r3, [pc, #20]	; (9d0c <ssp_start+0x30>)
    9cf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9cfa:	601a      	str	r2, [r3, #0]
}
    9cfc:	46bd      	mov	sp, r7
    9cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d02:	4770      	bx	lr
    9d04:	2009c098 	.word	0x2009c098
    9d08:	40030004 	.word	0x40030004
    9d0c:	2009c09c 	.word	0x2009c09c

00009d10 <ssp_stop>:

static void ssp_stop() {
    9d10:	b480      	push	{r7}
    9d12:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    9d14:	4b06      	ldr	r3, [pc, #24]	; (9d30 <ssp_stop+0x20>)
    9d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9d1a:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    9d1c:	4a05      	ldr	r2, [pc, #20]	; (9d34 <ssp_stop+0x24>)
    9d1e:	4b05      	ldr	r3, [pc, #20]	; (9d34 <ssp_stop+0x24>)
    9d20:	681b      	ldr	r3, [r3, #0]
    9d22:	f023 0302 	bic.w	r3, r3, #2
    9d26:	6013      	str	r3, [r2, #0]
}
    9d28:	46bd      	mov	sp, r7
    9d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9d2e:	4770      	bx	lr
    9d30:	2009c098 	.word	0x2009c098
    9d34:	40030004 	.word	0x40030004

00009d38 <ego_init>:

static void ego_init(void) {
    9d38:	b580      	push	{r7, lr}
    9d3a:	af00      	add	r7, sp, #0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    9d3c:	4b03      	ldr	r3, [pc, #12]	; (9d4c <ego_init+0x14>)
    9d3e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    9d42:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    9d44:	f000 fd08 	bl	a758 <dio_ssp_init>
}
    9d48:	bd80      	pop	{r7, pc}
    9d4a:	bf00      	nop
    9d4c:	e000e100 	.word	0xe000e100

00009d50 <ego_deinit>:

static void ego_deinit(void) {
    9d50:	b580      	push	{r7, lr}
    9d52:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    9d54:	2064      	movs	r0, #100	; 0x64
    9d56:	f000 fe93 	bl	aa80 <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    9d5a:	f7ff ffd9 	bl	9d10 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    9d5e:	4b02      	ldr	r3, [pc, #8]	; (9d68 <ego_deinit+0x18>)
    9d60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    9d64:	601a      	str	r2, [r3, #0]
}
    9d66:	bd80      	pop	{r7, pc}
    9d68:	e000e180 	.word	0xe000e180

00009d6c <rf_on>:

static void rf_on(void) {
    9d6c:	b580      	push	{r7, lr}
    9d6e:	af00      	add	r7, sp, #0
	cc2400_set(MANAND,  0x7fff);
    9d70:	200d      	movs	r0, #13
    9d72:	f647 71ff 	movw	r1, #32767	; 0x7fff
    9d76:	f000 fdc1 	bl	a8fc <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    9d7a:	2012      	movs	r0, #18
    9d7c:	f642 3122 	movw	r1, #11042	; 0x2b22
    9d80:	f000 fdbc 	bl	a8fc <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    9d84:	2014      	movs	r0, #20
    9d86:	f241 314b 	movw	r1, #4939	; 0x134b
    9d8a:	f000 fdb7 	bl	a8fc <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    9d8e:	2020      	movs	r0, #32
    9d90:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    9d94:	f000 fdb2 	bl	a8fc <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    9d98:	4b1e      	ldr	r3, [pc, #120]	; (9e14 <rf_on+0xa8>)
    9d9a:	881b      	ldrh	r3, [r3, #0]
    9d9c:	b29b      	uxth	r3, r3
    9d9e:	3b01      	subs	r3, #1
    9da0:	b29b      	uxth	r3, r3
    9da2:	2002      	movs	r0, #2
    9da4:	4619      	mov	r1, r3
    9da6:	f000 fda9 	bl	a8fc <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    9daa:	2003      	movs	r0, #3
    9dac:	2126      	movs	r1, #38	; 0x26
    9dae:	f000 fda5 	bl	a8fc <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    9db2:	2021      	movs	r0, #33	; 0x21
    9db4:	2103      	movs	r1, #3
    9db6:	f000 fda1 	bl	a8fc <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    9dba:	202d      	movs	r0, #45	; 0x2d
    9dbc:	f246 310f 	movw	r1, #25359	; 0x630f
    9dc0:	f000 fd9c 	bl	a8fc <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    9dc4:	202c      	movs	r0, #44	; 0x2c
    9dc6:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    9dca:	f000 fd97 	bl	a8fc <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    9dce:	bf00      	nop
    9dd0:	f000 fe4c 	bl	aa6c <cc2400_status>
    9dd4:	4603      	mov	r3, r0
    9dd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9dda:	2b00      	cmp	r3, #0
    9ddc:	d0f8      	beq.n	9dd0 <rf_on+0x64>

	ssp_start();
    9dde:	f7ff ff7d 	bl	9cdc <ssp_start>

	cc2400_strobe(SFSON);
    9de2:	2061      	movs	r0, #97	; 0x61
    9de4:	f000 fe4c 	bl	aa80 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    9de8:	bf00      	nop
    9dea:	f000 fe3f 	bl	aa6c <cc2400_status>
    9dee:	4603      	mov	r3, r0
    9df0:	f003 0304 	and.w	r3, r3, #4
    9df4:	2b00      	cmp	r3, #0
    9df6:	d0f8      	beq.n	9dea <rf_on+0x7e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9df8:	bf00      	nop
    9dfa:	200e      	movs	r0, #14
    9dfc:	f000 fd68 	bl	a8d0 <cc2400_get>
    9e00:	4603      	mov	r3, r0
    9e02:	f003 031f 	and.w	r3, r3, #31
    9e06:	2b0f      	cmp	r3, #15
    9e08:	d1f7      	bne.n	9dfa <rf_on+0x8e>

	cc2400_strobe(SRX);
    9e0a:	2062      	movs	r0, #98	; 0x62
    9e0c:	f000 fe38 	bl	aa80 <cc2400_strobe>
}
    9e10:	bd80      	pop	{r7, pc}
    9e12:	bf00      	nop
    9e14:	1000049c 	.word	0x1000049c

00009e18 <do_rx>:

void do_rx(ego_packet_t *packet) {
    9e18:	b480      	push	{r7}
    9e1a:	b085      	sub	sp, #20
    9e1c:	af00      	add	r7, sp, #0
    9e1e:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    9e20:	2300      	movs	r3, #0
    9e22:	60fb      	str	r3, [r7, #12]
    9e24:	e011      	b.n	9e4a <do_rx+0x32>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    9e26:	bf00      	nop
    9e28:	4b0c      	ldr	r3, [pc, #48]	; (9e5c <do_rx+0x44>)
    9e2a:	681b      	ldr	r3, [r3, #0]
    9e2c:	f003 0304 	and.w	r3, r3, #4
    9e30:	2b00      	cmp	r3, #0
    9e32:	d0f9      	beq.n	9e28 <do_rx+0x10>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    9e34:	4b0a      	ldr	r3, [pc, #40]	; (9e60 <do_rx+0x48>)
    9e36:	681b      	ldr	r3, [r3, #0]
    9e38:	b2d9      	uxtb	r1, r3
    9e3a:	687a      	ldr	r2, [r7, #4]
    9e3c:	68fb      	ldr	r3, [r7, #12]
    9e3e:	4413      	add	r3, r2
    9e40:	460a      	mov	r2, r1
    9e42:	701a      	strb	r2, [r3, #0]
	cc2400_strobe(SRX);
}

void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    9e44:	68fb      	ldr	r3, [r7, #12]
    9e46:	3301      	adds	r3, #1
    9e48:	60fb      	str	r3, [r7, #12]
    9e4a:	68fb      	ldr	r3, [r7, #12]
    9e4c:	2b23      	cmp	r3, #35	; 0x23
    9e4e:	ddea      	ble.n	9e26 <do_rx+0xe>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    9e50:	3714      	adds	r7, #20
    9e52:	46bd      	mov	sp, r7
    9e54:	f85d 7b04 	ldr.w	r7, [sp], #4
    9e58:	4770      	bx	lr
    9e5a:	bf00      	nop
    9e5c:	4003000c 	.word	0x4003000c
    9e60:	40030008 	.word	0x40030008

00009e64 <sync_received>:

static inline int sync_received(void) {
    9e64:	b580      	push	{r7, lr}
    9e66:	af00      	add	r7, sp, #0
	return cc2400_status() & SYNC_RECEIVED;
    9e68:	f000 fe00 	bl	aa6c <cc2400_status>
    9e6c:	4603      	mov	r3, r0
    9e6e:	f003 0310 	and.w	r3, r3, #16
}
    9e72:	4618      	mov	r0, r3
    9e74:	bd80      	pop	{r7, pc}
    9e76:	bf00      	nop

00009e78 <sleep_ms>:

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    9e78:	b480      	push	{r7}
    9e7a:	b083      	sub	sp, #12
    9e7c:	af00      	add	r7, sp, #0
    9e7e:	6078      	str	r0, [r7, #4]
    9e80:	6039      	str	r1, [r7, #0]
	state->sleep_start = CLK100NS;
    9e82:	4b0c      	ldr	r3, [pc, #48]	; (9eb4 <sleep_ms+0x3c>)
    9e84:	681b      	ldr	r3, [r3, #0]
    9e86:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9e8a:	f640 4235 	movw	r2, #3125	; 0xc35
    9e8e:	fb02 f203 	mul.w	r2, r2, r3
    9e92:	4b09      	ldr	r3, [pc, #36]	; (9eb8 <sleep_ms+0x40>)
    9e94:	681b      	ldr	r3, [r3, #0]
    9e96:	441a      	add	r2, r3
    9e98:	687b      	ldr	r3, [r7, #4]
    9e9a:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    9e9c:	683b      	ldr	r3, [r7, #0]
    9e9e:	f242 7210 	movw	r2, #10000	; 0x2710
    9ea2:	fb02 f203 	mul.w	r2, r2, r3
    9ea6:	687b      	ldr	r3, [r7, #4]
    9ea8:	60da      	str	r2, [r3, #12]
}
    9eaa:	370c      	adds	r7, #12
    9eac:	46bd      	mov	sp, r7
    9eae:	f85d 7b04 	ldr.w	r7, [sp], #4
    9eb2:	4770      	bx	lr
    9eb4:	10000be4 	.word	0x10000be4
    9eb8:	40004008 	.word	0x40004008

00009ebc <sleep_ms_anchor>:

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
    9ebc:	b480      	push	{r7}
    9ebe:	b083      	sub	sp, #12
    9ec0:	af00      	add	r7, sp, #0
    9ec2:	6078      	str	r0, [r7, #4]
    9ec4:	6039      	str	r1, [r7, #0]
	state->sleep_start = state->anchor;
    9ec6:	687b      	ldr	r3, [r7, #4]
    9ec8:	699a      	ldr	r2, [r3, #24]
    9eca:	687b      	ldr	r3, [r7, #4]
    9ecc:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    9ece:	683b      	ldr	r3, [r7, #0]
    9ed0:	f242 7210 	movw	r2, #10000	; 0x2710
    9ed4:	fb02 f203 	mul.w	r2, r2, r3
    9ed8:	687b      	ldr	r3, [r7, #4]
    9eda:	60da      	str	r2, [r3, #12]
}
    9edc:	370c      	adds	r7, #12
    9ede:	46bd      	mov	sp, r7
    9ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
    9ee4:	4770      	bx	lr
    9ee6:	bf00      	nop

00009ee8 <sleep_elapsed>:

static inline int sleep_elapsed(ego_fsm_state_t *state) {
    9ee8:	b480      	push	{r7}
    9eea:	b085      	sub	sp, #20
    9eec:	af00      	add	r7, sp, #0
    9eee:	6078      	str	r0, [r7, #4]
	u32 now = CLK100NS;
    9ef0:	4b13      	ldr	r3, [pc, #76]	; (9f40 <sleep_elapsed+0x58>)
    9ef2:	681b      	ldr	r3, [r3, #0]
    9ef4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9ef8:	f640 4235 	movw	r2, #3125	; 0xc35
    9efc:	fb02 f203 	mul.w	r2, r2, r3
    9f00:	4b10      	ldr	r3, [pc, #64]	; (9f44 <sleep_elapsed+0x5c>)
    9f02:	681b      	ldr	r3, [r3, #0]
    9f04:	4413      	add	r3, r2
    9f06:	60fb      	str	r3, [r7, #12]
	if (now < state->sleep_start)
    9f08:	687b      	ldr	r3, [r7, #4]
    9f0a:	689a      	ldr	r2, [r3, #8]
    9f0c:	68fb      	ldr	r3, [r7, #12]
    9f0e:	429a      	cmp	r2, r3
    9f10:	d905      	bls.n	9f1e <sleep_elapsed+0x36>
		now += 3276800000;
    9f12:	68fb      	ldr	r3, [r7, #12]
    9f14:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    9f18:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    9f1c:	60fb      	str	r3, [r7, #12]
	return (now - state->sleep_start) >= state->sleep_duration;
    9f1e:	687b      	ldr	r3, [r7, #4]
    9f20:	689b      	ldr	r3, [r3, #8]
    9f22:	68fa      	ldr	r2, [r7, #12]
    9f24:	1ad2      	subs	r2, r2, r3
    9f26:	687b      	ldr	r3, [r7, #4]
    9f28:	68db      	ldr	r3, [r3, #12]
    9f2a:	429a      	cmp	r2, r3
    9f2c:	bf2c      	ite	cs
    9f2e:	2301      	movcs	r3, #1
    9f30:	2300      	movcc	r3, #0
    9f32:	b2db      	uxtb	r3, r3
}
    9f34:	4618      	mov	r0, r3
    9f36:	3714      	adds	r7, #20
    9f38:	46bd      	mov	sp, r7
    9f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f3e:	4770      	bx	lr
    9f40:	10000be4 	.word	0x10000be4
    9f44:	40004008 	.word	0x40004008

00009f48 <nop_state>:

/////////////
// states

// do nothing
void nop_state(ego_fsm_state_t *state) {
    9f48:	b480      	push	{r7}
    9f4a:	b083      	sub	sp, #12
    9f4c:	af00      	add	r7, sp, #0
    9f4e:	6078      	str	r0, [r7, #4]
}
    9f50:	370c      	adds	r7, #12
    9f52:	46bd      	mov	sp, r7
    9f54:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f58:	4770      	bx	lr
    9f5a:	bf00      	nop

00009f5c <init_state>:

// used in follow and jam mode, override the channel supplied by user
void init_state(ego_fsm_state_t *state) {
    9f5c:	b480      	push	{r7}
    9f5e:	b083      	sub	sp, #12
    9f60:	af00      	add	r7, sp, #0
    9f62:	6078      	str	r0, [r7, #4]
	state->channel_index = 0;
    9f64:	687b      	ldr	r3, [r7, #4]
    9f66:	2200      	movs	r2, #0
    9f68:	605a      	str	r2, [r3, #4]
	channel = channels[state->channel_index];
    9f6a:	687b      	ldr	r3, [r7, #4]
    9f6c:	685b      	ldr	r3, [r3, #4]
    9f6e:	4a06      	ldr	r2, [pc, #24]	; (9f88 <init_state+0x2c>)
    9f70:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    9f74:	4b05      	ldr	r3, [pc, #20]	; (9f8c <init_state+0x30>)
    9f76:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    9f78:	687b      	ldr	r3, [r7, #4]
    9f7a:	2201      	movs	r2, #1
    9f7c:	701a      	strb	r2, [r3, #0]
}
    9f7e:	370c      	adds	r7, #12
    9f80:	46bd      	mov	sp, r7
    9f82:	f85d 7b04 	ldr.w	r7, [sp], #4
    9f86:	4770      	bx	lr
    9f88:	100008b0 	.word	0x100008b0
    9f8c:	1000049c 	.word	0x1000049c

00009f90 <start_rf_state>:

void start_rf_state(ego_fsm_state_t *state) {
    9f90:	b580      	push	{r7, lr}
    9f92:	b082      	sub	sp, #8
    9f94:	af00      	add	r7, sp, #0
    9f96:	6078      	str	r0, [r7, #4]
	rf_on();
    9f98:	f7ff fee8 	bl	9d6c <rf_on>
	state->state = EGO_ST_CAP;
    9f9c:	687b      	ldr	r3, [r7, #4]
    9f9e:	2202      	movs	r2, #2
    9fa0:	701a      	strb	r2, [r3, #0]
}
    9fa2:	3708      	adds	r7, #8
    9fa4:	46bd      	mov	sp, r7
    9fa6:	bd80      	pop	{r7, pc}

00009fa8 <cap_state>:

void cap_state(ego_fsm_state_t *state) {
    9fa8:	b580      	push	{r7, lr}
    9faa:	b08c      	sub	sp, #48	; 0x30
    9fac:	af00      	add	r7, sp, #0
    9fae:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    9fb0:	f107 0308 	add.w	r3, r7, #8
    9fb4:	2200      	movs	r2, #0
    9fb6:	601a      	str	r2, [r3, #0]
    9fb8:	3304      	adds	r3, #4
    9fba:	2200      	movs	r2, #0
    9fbc:	601a      	str	r2, [r3, #0]
    9fbe:	3304      	adds	r3, #4
    9fc0:	2200      	movs	r2, #0
    9fc2:	601a      	str	r2, [r3, #0]
    9fc4:	3304      	adds	r3, #4
    9fc6:	2200      	movs	r2, #0
    9fc8:	601a      	str	r2, [r3, #0]
    9fca:	3304      	adds	r3, #4
    9fcc:	2200      	movs	r2, #0
    9fce:	601a      	str	r2, [r3, #0]
    9fd0:	3304      	adds	r3, #4
    9fd2:	2200      	movs	r2, #0
    9fd4:	601a      	str	r2, [r3, #0]
    9fd6:	3304      	adds	r3, #4
    9fd8:	2200      	movs	r2, #0
    9fda:	601a      	str	r2, [r3, #0]
    9fdc:	3304      	adds	r3, #4
    9fde:	2200      	movs	r2, #0
    9fe0:	601a      	str	r2, [r3, #0]
    9fe2:	3304      	adds	r3, #4
    9fe4:	2200      	movs	r2, #0
    9fe6:	601a      	str	r2, [r3, #0]
    9fe8:	3304      	adds	r3, #4
    9fea:	2200      	movs	r2, #0
    9fec:	601a      	str	r2, [r3, #0]
    9fee:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    9ff0:	4b23      	ldr	r3, [pc, #140]	; (a080 <cap_state+0xd8>)
    9ff2:	681b      	ldr	r3, [r3, #0]
    9ff4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9ff8:	f640 4235 	movw	r2, #3125	; 0xc35
    9ffc:	fb02 f203 	mul.w	r2, r2, r3
    a000:	4b20      	ldr	r3, [pc, #128]	; (a084 <cap_state+0xdc>)
    a002:	681b      	ldr	r3, [r3, #0]
    a004:	4413      	add	r3, r2
	rf_on();
	state->state = EGO_ST_CAP;
}

void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    a006:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    a008:	6878      	ldr	r0, [r7, #4]
    a00a:	f7ff ff6d 	bl	9ee8 <sleep_elapsed>
    a00e:	4603      	mov	r3, r0
    a010:	2b00      	cmp	r3, #0
    a012:	d006      	beq.n	a022 <cap_state+0x7a>
		sleep_ms(state, 4);
    a014:	6878      	ldr	r0, [r7, #4]
    a016:	2104      	movs	r1, #4
    a018:	f7ff ff2e 	bl	9e78 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    a01c:	687b      	ldr	r3, [r7, #4]
    a01e:	2203      	movs	r2, #3
    a020:	701a      	strb	r2, [r3, #0]
	}

	if (sync_received()) {
    a022:	f7ff ff1f 	bl	9e64 <sync_received>
    a026:	4603      	mov	r3, r0
    a028:	2b00      	cmp	r3, #0
    a02a:	d019      	beq.n	a060 <cap_state+0xb8>
		RXLED_SET;
    a02c:	4b16      	ldr	r3, [pc, #88]	; (a088 <cap_state+0xe0>)
    a02e:	2210      	movs	r2, #16
    a030:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    a032:	f107 0308 	add.w	r3, r7, #8
    a036:	4618      	mov	r0, r3
    a038:	f7ff feee 	bl	9e18 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    a03c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a03e:	f107 0208 	add.w	r2, r7, #8
    a042:	2006      	movs	r0, #6
    a044:	4611      	mov	r1, r2
    a046:	461a      	mov	r2, r3
    a048:	f7fa fc7a 	bl	4940 <enqueue_with_ts>
		RXLED_CLR;
    a04c:	4b0f      	ldr	r3, [pc, #60]	; (a08c <cap_state+0xe4>)
    a04e:	2210      	movs	r2, #16
    a050:	601a      	str	r2, [r3, #0]

		sleep_ms(state, 6);
    a052:	6878      	ldr	r0, [r7, #4]
    a054:	2106      	movs	r1, #6
    a056:	f7ff ff0f 	bl	9e78 <sleep_ms>
		state->state = EGO_ST_SLEEP;
    a05a:	687b      	ldr	r3, [r7, #4]
    a05c:	2203      	movs	r2, #3
    a05e:	701a      	strb	r2, [r3, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    a060:	687b      	ldr	r3, [r7, #4]
    a062:	781b      	ldrb	r3, [r3, #0]
    a064:	2b02      	cmp	r3, #2
    a066:	d007      	beq.n	a078 <cap_state+0xd0>
		cc2400_strobe(SRFOFF);
    a068:	2064      	movs	r0, #100	; 0x64
    a06a:	f000 fd09 	bl	aa80 <cc2400_strobe>
		ssp_stop();
    a06e:	f7ff fe4f 	bl	9d10 <ssp_stop>
		state->timer_active = 1;
    a072:	687b      	ldr	r3, [r7, #4]
    a074:	2201      	movs	r2, #1
    a076:	611a      	str	r2, [r3, #16]
	}
}
    a078:	3730      	adds	r7, #48	; 0x30
    a07a:	46bd      	mov	sp, r7
    a07c:	bd80      	pop	{r7, pc}
    a07e:	bf00      	nop
    a080:	10000be4 	.word	0x10000be4
    a084:	40004008 	.word	0x40004008
    a088:	2009c038 	.word	0x2009c038
    a08c:	2009c03c 	.word	0x2009c03c

0000a090 <sleep_state>:

void sleep_state(ego_fsm_state_t *state) {
    a090:	b580      	push	{r7, lr}
    a092:	b082      	sub	sp, #8
    a094:	af00      	add	r7, sp, #0
    a096:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    a098:	6878      	ldr	r0, [r7, #4]
    a09a:	f7ff ff25 	bl	9ee8 <sleep_elapsed>
    a09e:	4603      	mov	r3, r0
    a0a0:	2b00      	cmp	r3, #0
    a0a2:	d01e      	beq.n	a0e2 <sleep_state+0x52>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    a0a4:	687b      	ldr	r3, [r7, #4]
    a0a6:	685b      	ldr	r3, [r3, #4]
    a0a8:	1c5a      	adds	r2, r3, #1
    a0aa:	4b0f      	ldr	r3, [pc, #60]	; (a0e8 <sleep_state+0x58>)
    a0ac:	4013      	ands	r3, r2
    a0ae:	2b00      	cmp	r3, #0
    a0b0:	da03      	bge.n	a0ba <sleep_state+0x2a>
    a0b2:	3b01      	subs	r3, #1
    a0b4:	f063 0303 	orn	r3, r3, #3
    a0b8:	3301      	adds	r3, #1
    a0ba:	461a      	mov	r2, r3
    a0bc:	687b      	ldr	r3, [r7, #4]
    a0be:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    a0c0:	687b      	ldr	r3, [r7, #4]
    a0c2:	685b      	ldr	r3, [r3, #4]
    a0c4:	4a09      	ldr	r2, [pc, #36]	; (a0ec <sleep_state+0x5c>)
    a0c6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    a0ca:	4b09      	ldr	r3, [pc, #36]	; (a0f0 <sleep_state+0x60>)
    a0cc:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    a0ce:	6878      	ldr	r0, [r7, #4]
    a0d0:	2107      	movs	r1, #7
    a0d2:	f7ff fed1 	bl	9e78 <sleep_ms>
		state->timer_active = 1;
    a0d6:	687b      	ldr	r3, [r7, #4]
    a0d8:	2201      	movs	r2, #1
    a0da:	611a      	str	r2, [r3, #16]

		state->state = EGO_ST_START_RX;
    a0dc:	687b      	ldr	r3, [r7, #4]
    a0de:	2201      	movs	r2, #1
    a0e0:	701a      	strb	r2, [r3, #0]
	}
}
    a0e2:	3708      	adds	r7, #8
    a0e4:	46bd      	mov	sp, r7
    a0e6:	bd80      	pop	{r7, pc}
    a0e8:	80000003 	.word	0x80000003
    a0ec:	100008b0 	.word	0x100008b0
    a0f0:	1000049c 	.word	0x1000049c

0000a0f4 <continuous_init_state>:

// continuous cap states (reuses START_RX state)
void continuous_init_state(ego_fsm_state_t *state) {
    a0f4:	b480      	push	{r7}
    a0f6:	b083      	sub	sp, #12
    a0f8:	af00      	add	r7, sp, #0
    a0fa:	6078      	str	r0, [r7, #4]
	state->state = EGO_ST_START_RX;
    a0fc:	687b      	ldr	r3, [r7, #4]
    a0fe:	2201      	movs	r2, #1
    a100:	701a      	strb	r2, [r3, #0]
}
    a102:	370c      	adds	r7, #12
    a104:	46bd      	mov	sp, r7
    a106:	f85d 7b04 	ldr.w	r7, [sp], #4
    a10a:	4770      	bx	lr

0000a10c <continuous_cap_state>:

void continuous_cap_state(ego_fsm_state_t *state) {
    a10c:	b580      	push	{r7, lr}
    a10e:	b08c      	sub	sp, #48	; 0x30
    a110:	af00      	add	r7, sp, #0
    a112:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    a114:	f107 0308 	add.w	r3, r7, #8
    a118:	2200      	movs	r2, #0
    a11a:	601a      	str	r2, [r3, #0]
    a11c:	3304      	adds	r3, #4
    a11e:	2200      	movs	r2, #0
    a120:	601a      	str	r2, [r3, #0]
    a122:	3304      	adds	r3, #4
    a124:	2200      	movs	r2, #0
    a126:	601a      	str	r2, [r3, #0]
    a128:	3304      	adds	r3, #4
    a12a:	2200      	movs	r2, #0
    a12c:	601a      	str	r2, [r3, #0]
    a12e:	3304      	adds	r3, #4
    a130:	2200      	movs	r2, #0
    a132:	601a      	str	r2, [r3, #0]
    a134:	3304      	adds	r3, #4
    a136:	2200      	movs	r2, #0
    a138:	601a      	str	r2, [r3, #0]
    a13a:	3304      	adds	r3, #4
    a13c:	2200      	movs	r2, #0
    a13e:	601a      	str	r2, [r3, #0]
    a140:	3304      	adds	r3, #4
    a142:	2200      	movs	r2, #0
    a144:	601a      	str	r2, [r3, #0]
    a146:	3304      	adds	r3, #4
    a148:	2200      	movs	r2, #0
    a14a:	601a      	str	r2, [r3, #0]
    a14c:	3304      	adds	r3, #4
    a14e:	2200      	movs	r2, #0
    a150:	601a      	str	r2, [r3, #0]
    a152:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    a154:	4b1e      	ldr	r3, [pc, #120]	; (a1d0 <continuous_cap_state+0xc4>)
    a156:	681b      	ldr	r3, [r3, #0]
    a158:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a15c:	f640 4235 	movw	r2, #3125	; 0xc35
    a160:	fb02 f203 	mul.w	r2, r2, r3
    a164:	4b1b      	ldr	r3, [pc, #108]	; (a1d4 <continuous_cap_state+0xc8>)
    a166:	681b      	ldr	r3, [r3, #0]
    a168:	4413      	add	r3, r2
void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    a16a:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    a16c:	f7ff fe7a 	bl	9e64 <sync_received>
    a170:	4603      	mov	r3, r0
    a172:	2b00      	cmp	r3, #0
    a174:	d029      	beq.n	a1ca <continuous_cap_state+0xbe>
		RXLED_SET;
    a176:	4b18      	ldr	r3, [pc, #96]	; (a1d8 <continuous_cap_state+0xcc>)
    a178:	2210      	movs	r2, #16
    a17a:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    a17c:	f107 0308 	add.w	r3, r7, #8
    a180:	4618      	mov	r0, r3
    a182:	f7ff fe49 	bl	9e18 <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    a186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    a188:	f107 0208 	add.w	r2, r7, #8
    a18c:	2006      	movs	r0, #6
    a18e:	4611      	mov	r1, r2
    a190:	461a      	mov	r2, r3
    a192:	f7fa fbd5 	bl	4940 <enqueue_with_ts>
		RXLED_CLR;
    a196:	4b11      	ldr	r3, [pc, #68]	; (a1dc <continuous_cap_state+0xd0>)
    a198:	2210      	movs	r2, #16
    a19a:	601a      	str	r2, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    a19c:	2061      	movs	r0, #97	; 0x61
    a19e:	f000 fc6f 	bl	aa80 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    a1a2:	bf00      	nop
    a1a4:	f000 fc62 	bl	aa6c <cc2400_status>
    a1a8:	4603      	mov	r3, r0
    a1aa:	f003 0304 	and.w	r3, r3, #4
    a1ae:	2b00      	cmp	r3, #0
    a1b0:	d0f8      	beq.n	a1a4 <continuous_cap_state+0x98>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    a1b2:	bf00      	nop
    a1b4:	200e      	movs	r0, #14
    a1b6:	f000 fb8b 	bl	a8d0 <cc2400_get>
    a1ba:	4603      	mov	r3, r0
    a1bc:	f003 031f 	and.w	r3, r3, #31
    a1c0:	2b0f      	cmp	r3, #15
    a1c2:	d1f7      	bne.n	a1b4 <continuous_cap_state+0xa8>
		cc2400_strobe(SRX);
    a1c4:	2062      	movs	r0, #98	; 0x62
    a1c6:	f000 fc5b 	bl	aa80 <cc2400_strobe>
	}
}
    a1ca:	3730      	adds	r7, #48	; 0x30
    a1cc:	46bd      	mov	sp, r7
    a1ce:	bd80      	pop	{r7, pc}
    a1d0:	10000be4 	.word	0x10000be4
    a1d4:	40004008 	.word	0x40004008
    a1d8:	2009c038 	.word	0x2009c038
    a1dc:	2009c03c 	.word	0x2009c03c

0000a1e0 <jam_cap_state>:

// jammer states
void jam_cap_state(ego_fsm_state_t *state) {
    a1e0:	b580      	push	{r7, lr}
    a1e2:	b082      	sub	sp, #8
    a1e4:	af00      	add	r7, sp, #0
    a1e6:	6078      	str	r0, [r7, #4]
	if (sync_received()) {
    a1e8:	f7ff fe3c 	bl	9e64 <sync_received>
    a1ec:	4603      	mov	r3, r0
    a1ee:	2b00      	cmp	r3, #0
    a1f0:	d012      	beq.n	a218 <jam_cap_state+0x38>
		state->state = EGO_ST_START_JAMMING;
    a1f2:	687b      	ldr	r3, [r7, #4]
    a1f4:	2204      	movs	r2, #4
    a1f6:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 1;
    a1f8:	687b      	ldr	r3, [r7, #4]
    a1fa:	2201      	movs	r2, #1
    a1fc:	615a      	str	r2, [r3, #20]
		state->anchor = CLK100NS;
    a1fe:	4b16      	ldr	r3, [pc, #88]	; (a258 <jam_cap_state+0x78>)
    a200:	681b      	ldr	r3, [r3, #0]
    a202:	f3c3 0313 	ubfx	r3, r3, #0, #20
    a206:	f640 4235 	movw	r2, #3125	; 0xc35
    a20a:	fb02 f203 	mul.w	r2, r2, r3
    a20e:	4b13      	ldr	r3, [pc, #76]	; (a25c <jam_cap_state+0x7c>)
    a210:	681b      	ldr	r3, [r3, #0]
    a212:	441a      	add	r2, r3
    a214:	687b      	ldr	r3, [r7, #4]
    a216:	619a      	str	r2, [r3, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    a218:	687b      	ldr	r3, [r7, #4]
    a21a:	691b      	ldr	r3, [r3, #16]
    a21c:	2b00      	cmp	r3, #0
    a21e:	d00f      	beq.n	a240 <jam_cap_state+0x60>
    a220:	6878      	ldr	r0, [r7, #4]
    a222:	f7ff fe61 	bl	9ee8 <sleep_elapsed>
    a226:	4603      	mov	r3, r0
    a228:	2b00      	cmp	r3, #0
    a22a:	d009      	beq.n	a240 <jam_cap_state+0x60>
		state->state = EGO_ST_START_JAMMING;
    a22c:	687b      	ldr	r3, [r7, #4]
    a22e:	2204      	movs	r2, #4
    a230:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 0;
    a232:	687b      	ldr	r3, [r7, #4]
    a234:	2200      	movs	r2, #0
    a236:	615a      	str	r2, [r3, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    a238:	6878      	ldr	r0, [r7, #4]
    a23a:	210b      	movs	r1, #11
    a23c:	f7ff fe1c 	bl	9e78 <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    a240:	687b      	ldr	r3, [r7, #4]
    a242:	781b      	ldrb	r3, [r3, #0]
    a244:	2b02      	cmp	r3, #2
    a246:	d004      	beq.n	a252 <jam_cap_state+0x72>
		cc2400_strobe(SRFOFF);
    a248:	2064      	movs	r0, #100	; 0x64
    a24a:	f000 fc19 	bl	aa80 <cc2400_strobe>
		ssp_stop();
    a24e:	f7ff fd5f 	bl	9d10 <ssp_stop>
	}
}
    a252:	3708      	adds	r7, #8
    a254:	46bd      	mov	sp, r7
    a256:	bd80      	pop	{r7, pc}
    a258:	10000be4 	.word	0x10000be4
    a25c:	40004008 	.word	0x40004008

0000a260 <start_jamming_state>:

void start_jamming_state(ego_fsm_state_t *state) {
    a260:	b580      	push	{r7, lr}
    a262:	b082      	sub	sp, #8
    a264:	af00      	add	r7, sp, #0
    a266:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    a268:	200d      	movs	r0, #13
    a26a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    a26e:	f000 fb45 	bl	a8fc <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    a272:	2012      	movs	r0, #18
    a274:	f642 3122 	movw	r1, #11042	; 0x2b22
    a278:	f000 fb40 	bl	a8fc <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    a27c:	2014      	movs	r0, #20
    a27e:	f243 314b 	movw	r1, #13131	; 0x334b
    a282:	f000 fb3b 	bl	a8fc <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    a286:	2020      	movs	r0, #32
    a288:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    a28c:	f000 fb36 	bl	a8fc <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    a290:	4b21      	ldr	r3, [pc, #132]	; (a318 <start_jamming_state+0xb8>)
    a292:	881b      	ldrh	r3, [r3, #0]
    a294:	b29b      	uxth	r3, r3
    a296:	2002      	movs	r0, #2
    a298:	4619      	mov	r1, r3
    a29a:	f000 fb2f 	bl	a8fc <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    a29e:	2003      	movs	r0, #3
    a2a0:	2126      	movs	r1, #38	; 0x26
    a2a2:	f000 fb2b 	bl	a8fc <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    a2a6:	2021      	movs	r0, #33	; 0x21
    a2a8:	2103      	movs	r1, #3
    a2aa:	f000 fb27 	bl	a8fc <cc2400_set>
	cc2400_set(FREND, 0xf);
    a2ae:	2005      	movs	r0, #5
    a2b0:	210f      	movs	r1, #15
    a2b2:	f000 fb23 	bl	a8fc <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    a2b6:	bf00      	nop
    a2b8:	f000 fbd8 	bl	aa6c <cc2400_status>
    a2bc:	4603      	mov	r3, r0
    a2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
    a2c2:	2b00      	cmp	r3, #0
    a2c4:	d0f8      	beq.n	a2b8 <start_jamming_state+0x58>

	cc2400_strobe(SFSON);
    a2c6:	2061      	movs	r0, #97	; 0x61
    a2c8:	f000 fbda 	bl	aa80 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    a2cc:	bf00      	nop
    a2ce:	f000 fbcd 	bl	aa6c <cc2400_status>
    a2d2:	4603      	mov	r3, r0
    a2d4:	f003 0304 	and.w	r3, r3, #4
    a2d8:	2b00      	cmp	r3, #0
    a2da:	d0f8      	beq.n	a2ce <start_jamming_state+0x6e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    a2dc:	bf00      	nop
    a2de:	200e      	movs	r0, #14
    a2e0:	f000 faf6 	bl	a8d0 <cc2400_get>
    a2e4:	4603      	mov	r3, r0
    a2e6:	f003 031f 	and.w	r3, r3, #31
    a2ea:	2b0f      	cmp	r3, #15
    a2ec:	d1f7      	bne.n	a2de <start_jamming_state+0x7e>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    a2ee:	4b0b      	ldr	r3, [pc, #44]	; (a31c <start_jamming_state+0xbc>)
    a2f0:	2280      	movs	r2, #128	; 0x80
    a2f2:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    a2f4:	2063      	movs	r0, #99	; 0x63
    a2f6:	f000 fbc3 	bl	aa80 <cc2400_strobe>
	TXLED_SET;
    a2fa:	4b09      	ldr	r3, [pc, #36]	; (a320 <start_jamming_state+0xc0>)
    a2fc:	f44f 7280 	mov.w	r2, #256	; 0x100
    a300:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    a302:	687b      	ldr	r3, [r7, #4]
    a304:	2205      	movs	r2, #5
    a306:	701a      	strb	r2, [r3, #0]
	sleep_ms_anchor(state, 2);
    a308:	6878      	ldr	r0, [r7, #4]
    a30a:	2102      	movs	r1, #2
    a30c:	f7ff fdd6 	bl	9ebc <sleep_ms_anchor>
}
    a310:	3708      	adds	r7, #8
    a312:	46bd      	mov	sp, r7
    a314:	bd80      	pop	{r7, pc}
    a316:	bf00      	nop
    a318:	1000049c 	.word	0x1000049c
    a31c:	2009c058 	.word	0x2009c058
    a320:	2009c038 	.word	0x2009c038

0000a324 <jamming_state>:

void jamming_state(ego_fsm_state_t *state) {
    a324:	b580      	push	{r7, lr}
    a326:	b082      	sub	sp, #8
    a328:	af00      	add	r7, sp, #0
    a32a:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    a32c:	6878      	ldr	r0, [r7, #4]
    a32e:	f7ff fddb 	bl	9ee8 <sleep_elapsed>
    a332:	4603      	mov	r3, r0
    a334:	2b00      	cmp	r3, #0
    a336:	d025      	beq.n	a384 <jamming_state+0x60>
		cc2400_strobe(SRFOFF);
    a338:	2064      	movs	r0, #100	; 0x64
    a33a:	f000 fba1 	bl	aa80 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    a33e:	4b13      	ldr	r3, [pc, #76]	; (a38c <jamming_state+0x68>)
    a340:	2280      	movs	r2, #128	; 0x80
    a342:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    a344:	4b12      	ldr	r3, [pc, #72]	; (a390 <jamming_state+0x6c>)
    a346:	f44f 7280 	mov.w	r2, #256	; 0x100
    a34a:	601a      	str	r2, [r3, #0]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    a34c:	687b      	ldr	r3, [r7, #4]
    a34e:	685b      	ldr	r3, [r3, #4]
    a350:	1c5a      	adds	r2, r3, #1
    a352:	4b10      	ldr	r3, [pc, #64]	; (a394 <jamming_state+0x70>)
    a354:	4013      	ands	r3, r2
    a356:	2b00      	cmp	r3, #0
    a358:	da03      	bge.n	a362 <jamming_state+0x3e>
    a35a:	3b01      	subs	r3, #1
    a35c:	f063 0303 	orn	r3, r3, #3
    a360:	3301      	adds	r3, #1
    a362:	461a      	mov	r2, r3
    a364:	687b      	ldr	r3, [r7, #4]
    a366:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    a368:	687b      	ldr	r3, [r7, #4]
    a36a:	685b      	ldr	r3, [r3, #4]
    a36c:	4a0a      	ldr	r2, [pc, #40]	; (a398 <jamming_state+0x74>)
    a36e:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    a372:	4b0a      	ldr	r3, [pc, #40]	; (a39c <jamming_state+0x78>)
    a374:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    a376:	687b      	ldr	r3, [r7, #4]
    a378:	2203      	movs	r2, #3
    a37a:	701a      	strb	r2, [r3, #0]
		sleep_ms_anchor(state, 6);
    a37c:	6878      	ldr	r0, [r7, #4]
    a37e:	2106      	movs	r1, #6
    a380:	f7ff fd9c 	bl	9ebc <sleep_ms_anchor>
	}
}
    a384:	3708      	adds	r7, #8
    a386:	46bd      	mov	sp, r7
    a388:	bd80      	pop	{r7, pc}
    a38a:	bf00      	nop
    a38c:	2009c05c 	.word	0x2009c05c
    a390:	2009c03c 	.word	0x2009c03c
    a394:	80000003 	.word	0x80000003
    a398:	100008b0 	.word	0x100008b0
    a39c:	1000049c 	.word	0x1000049c

0000a3a0 <jam_sleep_state>:

void jam_sleep_state(ego_fsm_state_t *state) {
    a3a0:	b580      	push	{r7, lr}
    a3a2:	b082      	sub	sp, #8
    a3a4:	af00      	add	r7, sp, #0
    a3a6:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    a3a8:	6878      	ldr	r0, [r7, #4]
    a3aa:	f7ff fd9d 	bl	9ee8 <sleep_elapsed>
    a3ae:	4603      	mov	r3, r0
    a3b0:	2b00      	cmp	r3, #0
    a3b2:	d009      	beq.n	a3c8 <jam_sleep_state+0x28>
		state->state = EGO_ST_START_RX;
    a3b4:	687b      	ldr	r3, [r7, #4]
    a3b6:	2201      	movs	r2, #1
    a3b8:	701a      	strb	r2, [r3, #0]
		state->timer_active = 1;
    a3ba:	687b      	ldr	r3, [r7, #4]
    a3bc:	2201      	movs	r2, #1
    a3be:	611a      	str	r2, [r3, #16]
		sleep_ms_anchor(state, 11);
    a3c0:	6878      	ldr	r0, [r7, #4]
    a3c2:	210b      	movs	r1, #11
    a3c4:	f7ff fd7a 	bl	9ebc <sleep_ms_anchor>
	}
}
    a3c8:	3708      	adds	r7, #8
    a3ca:	46bd      	mov	sp, r7
    a3cc:	bd80      	pop	{r7, pc}
    a3ce:	bf00      	nop

0000a3d0 <ego_main>:

void ego_main(ego_mode_t mode) {
    a3d0:	b5b0      	push	{r4, r5, r7, lr}
    a3d2:	b09e      	sub	sp, #120	; 0x78
    a3d4:	af00      	add	r7, sp, #0
    a3d6:	4603      	mov	r3, r0
    a3d8:	71fb      	strb	r3, [r7, #7]
	ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    a3da:	f107 0358 	add.w	r3, r7, #88	; 0x58
    a3de:	2200      	movs	r2, #0
    a3e0:	601a      	str	r2, [r3, #0]
    a3e2:	3304      	adds	r3, #4
    a3e4:	2200      	movs	r2, #0
    a3e6:	601a      	str	r2, [r3, #0]
    a3e8:	3304      	adds	r3, #4
    a3ea:	2200      	movs	r2, #0
    a3ec:	601a      	str	r2, [r3, #0]
    a3ee:	3304      	adds	r3, #4
    a3f0:	2200      	movs	r2, #0
    a3f2:	601a      	str	r2, [r3, #0]
    a3f4:	3304      	adds	r3, #4
    a3f6:	2200      	movs	r2, #0
    a3f8:	601a      	str	r2, [r3, #0]
    a3fa:	3304      	adds	r3, #4
    a3fc:	2200      	movs	r2, #0
    a3fe:	601a      	str	r2, [r3, #0]
    a400:	3304      	adds	r3, #4
    a402:	2200      	movs	r2, #0
    a404:	601a      	str	r2, [r3, #0]
    a406:	3304      	adds	r3, #4
		.channel_index = 0,
		.timer_active = 0,
	};

	// hopping connection following
	ego_st_handler follow_handler[] = {
    a408:	4b26      	ldr	r3, [pc, #152]	; (a4a4 <ego_main+0xd4>)
    a40a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
    a40e:	461d      	mov	r5, r3
    a410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a414:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    a418:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		nop_state,
		nop_state,
	};

	// continuous rx on a single channel
	ego_st_handler continuous_rx_handler[] = {
    a41c:	4b22      	ldr	r3, [pc, #136]	; (a4a8 <ego_main+0xd8>)
    a41e:	f107 0424 	add.w	r4, r7, #36	; 0x24
    a422:	461d      	mov	r5, r3
    a424:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a426:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a428:	e895 0003 	ldmia.w	r5, {r0, r1}
    a42c:	e884 0003 	stmia.w	r4, {r0, r1}
		nop_state,
		nop_state,
	};

	// jamming
	ego_st_handler jam_handler[] = {
    a430:	4b1e      	ldr	r3, [pc, #120]	; (a4ac <ego_main+0xdc>)
    a432:	f107 040c 	add.w	r4, r7, #12
    a436:	461d      	mov	r5, r3
    a438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    a43a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    a43c:	e895 0003 	ldmia.w	r5, {r0, r1}
    a440:	e884 0003 	stmia.w	r4, {r0, r1}
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    a444:	79fb      	ldrb	r3, [r7, #7]
    a446:	2b01      	cmp	r3, #1
    a448:	d007      	beq.n	a45a <ego_main+0x8a>
    a44a:	2b02      	cmp	r3, #2
    a44c:	d009      	beq.n	a462 <ego_main+0x92>
    a44e:	2b00      	cmp	r3, #0
    a450:	d10b      	bne.n	a46a <ego_main+0x9a>
		case EGO_FOLLOW:
			handler = follow_handler;
    a452:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    a456:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    a458:	e00b      	b.n	a472 <ego_main+0xa2>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    a45a:	f107 0324 	add.w	r3, r7, #36	; 0x24
    a45e:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    a460:	e007      	b.n	a472 <ego_main+0xa2>
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    a462:	f107 030c 	add.w	r3, r7, #12
    a466:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    a468:	e003      	b.n	a472 <ego_main+0xa2>
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    a46a:	4b11      	ldr	r3, [pc, #68]	; (a4b0 <ego_main+0xe0>)
    a46c:	2200      	movs	r2, #0
    a46e:	701a      	strb	r2, [r3, #0]
    a470:	e015      	b.n	a49e <ego_main+0xce>
			return;
	}

	ego_init();
    a472:	f7ff fc61 	bl	9d38 <ego_init>

	while (1) {
		if (requested_mode != MODE_EGO)
    a476:	4b0e      	ldr	r3, [pc, #56]	; (a4b0 <ego_main+0xe0>)
    a478:	781b      	ldrb	r3, [r3, #0]
    a47a:	b2db      	uxtb	r3, r3
    a47c:	2b0d      	cmp	r3, #13
    a47e:	d003      	beq.n	a488 <ego_main+0xb8>
			break;
    a480:	bf00      	nop
		handler[state.state](&state);
	}

	ego_deinit();
    a482:	f7ff fc65 	bl	9d50 <ego_deinit>
    a486:	e00a      	b.n	a49e <ego_main+0xce>
	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
			break;
		handler[state.state](&state);
    a488:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    a48c:	009b      	lsls	r3, r3, #2
    a48e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    a490:	4413      	add	r3, r2
    a492:	681b      	ldr	r3, [r3, #0]
    a494:	f107 0258 	add.w	r2, r7, #88	; 0x58
    a498:	4610      	mov	r0, r2
    a49a:	4798      	blx	r3
	}
    a49c:	e7eb      	b.n	a476 <ego_main+0xa6>

	ego_deinit();
}
    a49e:	3778      	adds	r7, #120	; 0x78
    a4a0:	46bd      	mov	sp, r7
    a4a2:	bdb0      	pop	{r4, r5, r7, pc}
    a4a4:	0000d008 	.word	0x0000d008
    a4a8:	0000d024 	.word	0x0000d024
    a4ac:	0000d03c 	.word	0x0000d03c
    a4b0:	10000a3f 	.word	0x10000a3f

0000a4b4 <USB_IRQHandler>:
	
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
    a4b4:	b580      	push	{r7, lr}
    a4b6:	af00      	add	r7, sp, #0
	USBHwISR();
    a4b8:	f000 ffb6 	bl	b428 <USBHwISR>
}
    a4bc:	bd80      	pop	{r7, pc}
    a4be:	bf00      	nop

0000a4c0 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    a4c0:	b580      	push	{r7, lr}
    a4c2:	b082      	sub	sp, #8
    a4c4:	af00      	add	r7, sp, #0
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
    a4c6:	4b12      	ldr	r3, [pc, #72]	; (a510 <Reset_Handler+0x50>)
    a4c8:	607b      	str	r3, [r7, #4]
	for(dest = &_data; dest < &_edata; )
    a4ca:	4b12      	ldr	r3, [pc, #72]	; (a514 <Reset_Handler+0x54>)
    a4cc:	603b      	str	r3, [r7, #0]
    a4ce:	e007      	b.n	a4e0 <Reset_Handler+0x20>
	{
		*dest++ = *src++;
    a4d0:	683b      	ldr	r3, [r7, #0]
    a4d2:	1d1a      	adds	r2, r3, #4
    a4d4:	603a      	str	r2, [r7, #0]
    a4d6:	687a      	ldr	r2, [r7, #4]
    a4d8:	1d11      	adds	r1, r2, #4
    a4da:	6079      	str	r1, [r7, #4]
    a4dc:	6812      	ldr	r2, [r2, #0]
    a4de:	601a      	str	r2, [r3, #0]
{
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    a4e0:	683b      	ldr	r3, [r7, #0]
    a4e2:	4a0d      	ldr	r2, [pc, #52]	; (a518 <Reset_Handler+0x58>)
    a4e4:	4293      	cmp	r3, r2
    a4e6:	d3f3      	bcc.n	a4d0 <Reset_Handler+0x10>
	{
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
    a4e8:	4b0c      	ldr	r3, [pc, #48]	; (a51c <Reset_Handler+0x5c>)
    a4ea:	607b      	str	r3, [r7, #4]
	while (src < &_ebss)
    a4ec:	e004      	b.n	a4f8 <Reset_Handler+0x38>
	{
		*src++ = 0;
    a4ee:	687b      	ldr	r3, [r7, #4]
    a4f0:	1d1a      	adds	r2, r3, #4
    a4f2:	607a      	str	r2, [r7, #4]
    a4f4:	2200      	movs	r2, #0
    a4f6:	601a      	str	r2, [r3, #0]
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    a4f8:	687b      	ldr	r3, [r7, #4]
    a4fa:	4a09      	ldr	r2, [pc, #36]	; (a520 <Reset_Handler+0x60>)
    a4fc:	4293      	cmp	r3, r2
    a4fe:	d3f6      	bcc.n	a4ee <Reset_Handler+0x2e>
	{
		*src++ = 0;
	}

    __libc_init_array();
    a500:	f7f9 fe12 	bl	4128 <__libc_init_array>
    
    // Set the vector table location.
    SCB_VTOR = &_interrupt_vector_table;
    a504:	4b07      	ldr	r3, [pc, #28]	; (a524 <Reset_Handler+0x64>)
    a506:	4a08      	ldr	r2, [pc, #32]	; (a528 <Reset_Handler+0x68>)
    a508:	601a      	str	r2, [r3, #0]
    
	main();
    a50a:	f7fe fb93 	bl	8c34 <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    a50e:	e7fe      	b.n	a50e <Reset_Handler+0x4e>
    a510:	0000d0a0 	.word	0x0000d0a0
    a514:	10000020 	.word	0x10000020
    a518:	1000095e 	.word	0x1000095e
    a51c:	10000960 	.word	0x10000960
    a520:	10003288 	.word	0x10003288
    a524:	e000ed08 	.word	0xe000ed08
    a528:	00004000 	.word	0x00004000

0000a52c <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    a52c:	b480      	push	{r7}
    a52e:	af00      	add	r7, sp, #0
    a530:	e7fe      	b.n	a530 <ADC_IRQHandler+0x4>
    a532:	bf00      	nop

0000a534 <wait>:
 */

#include "ubertooth.h"
/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
    a534:	b580      	push	{r7, lr}
    a536:	b082      	sub	sp, #8
    a538:	af00      	add	r7, sp, #0
    a53a:	4603      	mov	r3, r0
    a53c:	71fb      	strb	r3, [r7, #7]
	wait_us(seconds * 1000000);
    a53e:	79fb      	ldrb	r3, [r7, #7]
    a540:	4a04      	ldr	r2, [pc, #16]	; (a554 <wait+0x20>)
    a542:	fb02 f303 	mul.w	r3, r2, r3
    a546:	4618      	mov	r0, r3
    a548:	f000 f818 	bl	a57c <wait_us>
}
    a54c:	3708      	adds	r7, #8
    a54e:	46bd      	mov	sp, r7
    a550:	bd80      	pop	{r7, pc}
    a552:	bf00      	nop
    a554:	000f4240 	.word	0x000f4240

0000a558 <rbit>:
{
	wait_us(ms * 1000);
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
    a558:	b480      	push	{r7}
    a55a:	b085      	sub	sp, #20
    a55c:	af00      	add	r7, sp, #0
    a55e:	6078      	str	r0, [r7, #4]
  u32 result = 0;
    a560:	2300      	movs	r3, #0
    a562:	60fb      	str	r3, [r7, #12]
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    a564:	687b      	ldr	r3, [r7, #4]
    a566:	fa93 f3a3 	rbit	r3, r3
    a56a:	60fb      	str	r3, [r7, #12]
  return result;
    a56c:	68fb      	ldr	r3, [r7, #12]
}
    a56e:	4618      	mov	r0, r3
    a570:	3714      	adds	r7, #20
    a572:	46bd      	mov	sp, r7
    a574:	f85d 7b04 	ldr.w	r7, [sp], #4
    a578:	4770      	bx	lr
    a57a:	bf00      	nop

0000a57c <wait_us>:

/* delay a number of microseconds while on internal oscillator (4 MHz) */
/* we only have a resolution of 1000/400, so to the nearest 2.5        */
static volatile u32 wait_us_counter;
void wait_us(u32 us)
{
    a57c:	b480      	push	{r7}
    a57e:	b083      	sub	sp, #12
    a580:	af00      	add	r7, sp, #0
    a582:	6078      	str	r0, [r7, #4]
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    a584:	687b      	ldr	r3, [r7, #4]
    a586:	089a      	lsrs	r2, r3, #2
    a588:	687b      	ldr	r3, [r7, #4]
    a58a:	08db      	lsrs	r3, r3, #3
    a58c:	441a      	add	r2, r3
    a58e:	687b      	ldr	r3, [r7, #4]
    a590:	099b      	lsrs	r3, r3, #6
    a592:	441a      	add	r2, r3
    a594:	687b      	ldr	r3, [r7, #4]
    a596:	09db      	lsrs	r3, r3, #7
    a598:	441a      	add	r2, r3
    a59a:	687b      	ldr	r3, [r7, #4]
    a59c:	0a9b      	lsrs	r3, r3, #10
    a59e:	441a      	add	r2, r3
    a5a0:	687b      	ldr	r3, [r7, #4]
    a5a2:	0adb      	lsrs	r3, r3, #11
    a5a4:	4413      	add	r3, r2
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    a5a6:	4a07      	ldr	r2, [pc, #28]	; (a5c4 <wait_us+0x48>)
    a5a8:	6013      	str	r3, [r2, #0]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    a5aa:	bf00      	nop
    a5ac:	4b05      	ldr	r3, [pc, #20]	; (a5c4 <wait_us+0x48>)
    a5ae:	681b      	ldr	r3, [r3, #0]
    a5b0:	3b01      	subs	r3, #1
    a5b2:	4a04      	ldr	r2, [pc, #16]	; (a5c4 <wait_us+0x48>)
    a5b4:	6013      	str	r3, [r2, #0]
    a5b6:	2b00      	cmp	r3, #0
    a5b8:	d1f8      	bne.n	a5ac <wait_us+0x30>
}
    a5ba:	370c      	adds	r7, #12
    a5bc:	46bd      	mov	sp, r7
    a5be:	f85d 7b04 	ldr.w	r7, [sp], #4
    a5c2:	4770      	bx	lr
    a5c4:	10000a68 	.word	0x10000a68

0000a5c8 <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    a5c8:	b580      	push	{r7, lr}
    a5ca:	af00      	add	r7, sp, #0
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    a5cc:	f000 f836 	bl	a63c <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    a5d0:	4b10      	ldr	r3, [pc, #64]	; (a614 <gpio_init+0x4c>)
    a5d2:	2200      	movs	r2, #0
    a5d4:	601a      	str	r2, [r3, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    a5d6:	4b10      	ldr	r3, [pc, #64]	; (a618 <gpio_init+0x50>)
    a5d8:	f24c 7212 	movw	r2, #50962	; 0xc712
    a5dc:	601a      	str	r2, [r3, #0]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    a5de:	4b0f      	ldr	r3, [pc, #60]	; (a61c <gpio_init+0x54>)
    a5e0:	f240 12b1 	movw	r2, #433	; 0x1b1
    a5e4:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    a5e6:	4b0e      	ldr	r3, [pc, #56]	; (a620 <gpio_init+0x58>)
    a5e8:	2200      	movs	r2, #0
    a5ea:	601a      	str	r2, [r3, #0]
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    a5ec:	4b0d      	ldr	r3, [pc, #52]	; (a624 <gpio_init+0x5c>)
    a5ee:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    a5f2:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    a5f4:	4b0c      	ldr	r3, [pc, #48]	; (a628 <gpio_init+0x60>)
    a5f6:	2200      	movs	r2, #0
    a5f8:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    a5fa:	4b0c      	ldr	r3, [pc, #48]	; (a62c <gpio_init+0x64>)
    a5fc:	2200      	movs	r2, #0
    a5fe:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    a600:	4b0b      	ldr	r3, [pc, #44]	; (a630 <gpio_init+0x68>)
    a602:	2200      	movs	r2, #0
    a604:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    a606:	4b0b      	ldr	r3, [pc, #44]	; (a634 <gpio_init+0x6c>)
    a608:	2200      	movs	r2, #0
    a60a:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    a60c:	4b0a      	ldr	r3, [pc, #40]	; (a638 <gpio_init+0x70>)
    a60e:	2200      	movs	r2, #0
    a610:	601a      	str	r2, [r3, #0]

#ifdef TC13BADGE
	/* R8C_CTL is active low */
	R8C_CTL_SET;
#endif
}
    a612:	bd80      	pop	{r7, pc}
    a614:	2009c000 	.word	0x2009c000
    a618:	2009c020 	.word	0x2009c020
    a61c:	2009c040 	.word	0x2009c040
    a620:	2009c060 	.word	0x2009c060
    a624:	2009c080 	.word	0x2009c080
    a628:	2009c014 	.word	0x2009c014
    a62c:	2009c034 	.word	0x2009c034
    a630:	2009c054 	.word	0x2009c054
    a634:	2009c074 	.word	0x2009c074
    a638:	2009c094 	.word	0x2009c094

0000a63c <all_pins_off>:

void all_pins_off(void)
{
    a63c:	b480      	push	{r7}
    a63e:	af00      	add	r7, sp, #0
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    a640:	4b27      	ldr	r3, [pc, #156]	; (a6e0 <all_pins_off+0xa4>)
    a642:	2200      	movs	r2, #0
    a644:	601a      	str	r2, [r3, #0]
	PINSEL1 = 0;
    a646:	4b27      	ldr	r3, [pc, #156]	; (a6e4 <all_pins_off+0xa8>)
    a648:	2200      	movs	r2, #0
    a64a:	601a      	str	r2, [r3, #0]
	PINSEL2 = 0;
    a64c:	4b26      	ldr	r3, [pc, #152]	; (a6e8 <all_pins_off+0xac>)
    a64e:	2200      	movs	r2, #0
    a650:	601a      	str	r2, [r3, #0]
	PINSEL3 = 0;
    a652:	4b26      	ldr	r3, [pc, #152]	; (a6ec <all_pins_off+0xb0>)
    a654:	2200      	movs	r2, #0
    a656:	601a      	str	r2, [r3, #0]
	PINSEL4 = 0;
    a658:	4b25      	ldr	r3, [pc, #148]	; (a6f0 <all_pins_off+0xb4>)
    a65a:	2200      	movs	r2, #0
    a65c:	601a      	str	r2, [r3, #0]
	PINSEL7 = 0;
    a65e:	4b25      	ldr	r3, [pc, #148]	; (a6f4 <all_pins_off+0xb8>)
    a660:	2200      	movs	r2, #0
    a662:	601a      	str	r2, [r3, #0]
	PINSEL9 = 0;
    a664:	4b24      	ldr	r3, [pc, #144]	; (a6f8 <all_pins_off+0xbc>)
    a666:	2200      	movs	r2, #0
    a668:	601a      	str	r2, [r3, #0]
	PINSEL10 = 0;
    a66a:	4b24      	ldr	r3, [pc, #144]	; (a6fc <all_pins_off+0xc0>)
    a66c:	2200      	movs	r2, #0
    a66e:	601a      	str	r2, [r3, #0]

	/* configure all pins as inputs */
	FIO0DIR = 0;
    a670:	4b23      	ldr	r3, [pc, #140]	; (a700 <all_pins_off+0xc4>)
    a672:	2200      	movs	r2, #0
    a674:	601a      	str	r2, [r3, #0]
	FIO1DIR = 0;
    a676:	4b23      	ldr	r3, [pc, #140]	; (a704 <all_pins_off+0xc8>)
    a678:	2200      	movs	r2, #0
    a67a:	601a      	str	r2, [r3, #0]
	FIO2DIR = 0;
    a67c:	4b22      	ldr	r3, [pc, #136]	; (a708 <all_pins_off+0xcc>)
    a67e:	2200      	movs	r2, #0
    a680:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    a682:	4b22      	ldr	r3, [pc, #136]	; (a70c <all_pins_off+0xd0>)
    a684:	2200      	movs	r2, #0
    a686:	601a      	str	r2, [r3, #0]
	FIO4DIR = 0;
    a688:	4b21      	ldr	r3, [pc, #132]	; (a710 <all_pins_off+0xd4>)
    a68a:	2200      	movs	r2, #0
    a68c:	601a      	str	r2, [r3, #0]

	/* pull-up on every pin */
	PINMODE0 = 0;
    a68e:	4b21      	ldr	r3, [pc, #132]	; (a714 <all_pins_off+0xd8>)
    a690:	2200      	movs	r2, #0
    a692:	601a      	str	r2, [r3, #0]
	PINMODE1 = 0;
    a694:	4b20      	ldr	r3, [pc, #128]	; (a718 <all_pins_off+0xdc>)
    a696:	2200      	movs	r2, #0
    a698:	601a      	str	r2, [r3, #0]
	PINMODE2 = 0;
    a69a:	4b20      	ldr	r3, [pc, #128]	; (a71c <all_pins_off+0xe0>)
    a69c:	2200      	movs	r2, #0
    a69e:	601a      	str	r2, [r3, #0]
	PINMODE3 = 0;
    a6a0:	4b1f      	ldr	r3, [pc, #124]	; (a720 <all_pins_off+0xe4>)
    a6a2:	2200      	movs	r2, #0
    a6a4:	601a      	str	r2, [r3, #0]
	PINMODE4 = 0;
    a6a6:	4b1f      	ldr	r3, [pc, #124]	; (a724 <all_pins_off+0xe8>)
    a6a8:	2200      	movs	r2, #0
    a6aa:	601a      	str	r2, [r3, #0]
	PINMODE7 = 0;
    a6ac:	4b1e      	ldr	r3, [pc, #120]	; (a728 <all_pins_off+0xec>)
    a6ae:	2200      	movs	r2, #0
    a6b0:	601a      	str	r2, [r3, #0]
	PINMODE9 = 0;
    a6b2:	4b1e      	ldr	r3, [pc, #120]	; (a72c <all_pins_off+0xf0>)
    a6b4:	2200      	movs	r2, #0
    a6b6:	601a      	str	r2, [r3, #0]

	/* set all outputs low */
	FIO0PIN = 0;
    a6b8:	4b1d      	ldr	r3, [pc, #116]	; (a730 <all_pins_off+0xf4>)
    a6ba:	2200      	movs	r2, #0
    a6bc:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    a6be:	4b1d      	ldr	r3, [pc, #116]	; (a734 <all_pins_off+0xf8>)
    a6c0:	2200      	movs	r2, #0
    a6c2:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    a6c4:	4b1c      	ldr	r3, [pc, #112]	; (a738 <all_pins_off+0xfc>)
    a6c6:	2200      	movs	r2, #0
    a6c8:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    a6ca:	4b1c      	ldr	r3, [pc, #112]	; (a73c <all_pins_off+0x100>)
    a6cc:	2200      	movs	r2, #0
    a6ce:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    a6d0:	4b1b      	ldr	r3, [pc, #108]	; (a740 <all_pins_off+0x104>)
    a6d2:	2200      	movs	r2, #0
    a6d4:	601a      	str	r2, [r3, #0]
}
    a6d6:	46bd      	mov	sp, r7
    a6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    a6dc:	4770      	bx	lr
    a6de:	bf00      	nop
    a6e0:	4002c000 	.word	0x4002c000
    a6e4:	4002c004 	.word	0x4002c004
    a6e8:	4002c008 	.word	0x4002c008
    a6ec:	4002c00c 	.word	0x4002c00c
    a6f0:	4002c010 	.word	0x4002c010
    a6f4:	4002c01c 	.word	0x4002c01c
    a6f8:	4002c024 	.word	0x4002c024
    a6fc:	4002c028 	.word	0x4002c028
    a700:	2009c000 	.word	0x2009c000
    a704:	2009c020 	.word	0x2009c020
    a708:	2009c040 	.word	0x2009c040
    a70c:	2009c060 	.word	0x2009c060
    a710:	2009c080 	.word	0x2009c080
    a714:	4002c040 	.word	0x4002c040
    a718:	4002c044 	.word	0x4002c044
    a71c:	4002c048 	.word	0x4002c048
    a720:	4002c04c 	.word	0x4002c04c
    a724:	4002c050 	.word	0x4002c050
    a728:	4002c05c 	.word	0x4002c05c
    a72c:	4002c064 	.word	0x4002c064
    a730:	2009c014 	.word	0x2009c014
    a734:	2009c034 	.word	0x2009c034
    a738:	2009c054 	.word	0x2009c054
    a73c:	2009c074 	.word	0x2009c074
    a740:	2009c094 	.word	0x2009c094

0000a744 <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    a744:	b580      	push	{r7, lr}
    a746:	af00      	add	r7, sp, #0
	gpio_init();
    a748:	f7ff ff3e 	bl	a5c8 <gpio_init>
	cc2400_init();
    a74c:	f000 f860 	bl	a810 <cc2400_init>
	clock_start();
    a750:	f000 f9c2 	bl	aad8 <clock_start>
}
    a754:	bd80      	pop	{r7, pc}
    a756:	bf00      	nop

0000a758 <dio_ssp_init>:

/* configure SSP for CC2400's secondary serial data interface */
void dio_ssp_init()
{
    a758:	b480      	push	{r7}
    a75a:	af00      	add	r7, sp, #0
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    a75c:	4a16      	ldr	r2, [pc, #88]	; (a7b8 <dio_ssp_init+0x60>)
    a75e:	4b16      	ldr	r3, [pc, #88]	; (a7b8 <dio_ssp_init+0x60>)
    a760:	681b      	ldr	r3, [r3, #0]
    a762:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    a766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    a76a:	6013      	str	r3, [r2, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    a76c:	4a12      	ldr	r2, [pc, #72]	; (a7b8 <dio_ssp_init+0x60>)
    a76e:	4b12      	ldr	r3, [pc, #72]	; (a7b8 <dio_ssp_init+0x60>)
    a770:	681b      	ldr	r3, [r3, #0]
    a772:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    a776:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    a77a:	6013      	str	r3, [r2, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    a77c:	4a0e      	ldr	r2, [pc, #56]	; (a7b8 <dio_ssp_init+0x60>)
    a77e:	4b0e      	ldr	r3, [pc, #56]	; (a7b8 <dio_ssp_init+0x60>)
    a780:	681b      	ldr	r3, [r3, #0]
    a782:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    a786:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    a78a:	6013      	str	r3, [r2, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    a78c:	4a0a      	ldr	r2, [pc, #40]	; (a7b8 <dio_ssp_init+0x60>)
    a78e:	4b0a      	ldr	r3, [pc, #40]	; (a7b8 <dio_ssp_init+0x60>)
    a790:	681b      	ldr	r3, [r3, #0]
    a792:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    a796:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    a79a:	6013      	str	r3, [r2, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    a79c:	4b07      	ldr	r3, [pc, #28]	; (a7bc <dio_ssp_init+0x64>)
    a79e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a7a2:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    a7a4:	4b06      	ldr	r3, [pc, #24]	; (a7c0 <dio_ssp_init+0x68>)
    a7a6:	22c7      	movs	r2, #199	; 0xc7
    a7a8:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    a7aa:	4b06      	ldr	r3, [pc, #24]	; (a7c4 <dio_ssp_init+0x6c>)
    a7ac:	220c      	movs	r2, #12
    a7ae:	601a      	str	r2, [r3, #0]
}
    a7b0:	46bd      	mov	sp, r7
    a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    a7b6:	4770      	bx	lr
    a7b8:	4002c000 	.word	0x4002c000
    a7bc:	2009c098 	.word	0x2009c098
    a7c0:	40030000 	.word	0x40030000
    a7c4:	40030004 	.word	0x40030004

0000a7c8 <atest_init>:

void atest_init()
{
    a7c8:	b480      	push	{r7}
    a7ca:	af00      	add	r7, sp, #0
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    a7cc:	4a0d      	ldr	r2, [pc, #52]	; (a804 <atest_init+0x3c>)
    a7ce:	4b0d      	ldr	r3, [pc, #52]	; (a804 <atest_init+0x3c>)
    a7d0:	681b      	ldr	r3, [r3, #0]
    a7d2:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    a7d6:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    a7d8:	4a0b      	ldr	r2, [pc, #44]	; (a808 <atest_init+0x40>)
    a7da:	4b0b      	ldr	r3, [pc, #44]	; (a808 <atest_init+0x40>)
    a7dc:	681b      	ldr	r3, [r3, #0]
    a7de:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    a7e2:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    a7e4:	4a09      	ldr	r2, [pc, #36]	; (a80c <atest_init+0x44>)
    a7e6:	4b09      	ldr	r3, [pc, #36]	; (a80c <atest_init+0x44>)
    a7e8:	681b      	ldr	r3, [r3, #0]
    a7ea:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
    a7ee:	6013      	str	r3, [r2, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    a7f0:	4a06      	ldr	r2, [pc, #24]	; (a80c <atest_init+0x44>)
    a7f2:	4b06      	ldr	r3, [pc, #24]	; (a80c <atest_init+0x44>)
    a7f4:	681b      	ldr	r3, [r3, #0]
    a7f6:	f423 13a0 	bic.w	r3, r3, #1310720	; 0x140000
    a7fa:	6013      	str	r3, [r2, #0]
}
    a7fc:	46bd      	mov	sp, r7
    a7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
    a802:	4770      	bx	lr
    a804:	4002c004 	.word	0x4002c004
    a808:	2009c000 	.word	0x2009c000
    a80c:	4002c044 	.word	0x4002c044

0000a810 <cc2400_init>:

void cc2400_init()
{
    a810:	b580      	push	{r7, lr}
    a812:	af00      	add	r7, sp, #0
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    a814:	f7ff ffd8 	bl	a7c8 <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    a818:	4b09      	ldr	r3, [pc, #36]	; (a840 <cc2400_init+0x30>)
    a81a:	f44f 7200 	mov.w	r2, #512	; 0x200
    a81e:	601a      	str	r2, [r3, #0]
	wait_us(50);
    a820:	2032      	movs	r0, #50	; 0x32
    a822:	f7ff feab 	bl	a57c <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    a826:	4b07      	ldr	r3, [pc, #28]	; (a844 <cc2400_init+0x34>)
    a828:	2220      	movs	r2, #32
    a82a:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    a82c:	4b04      	ldr	r3, [pc, #16]	; (a840 <cc2400_init+0x30>)
    a82e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    a832:	601a      	str	r2, [r3, #0]

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
    a834:	200d      	movs	r0, #13
    a836:	f647 71ff 	movw	r1, #32767	; 0x7fff
    a83a:	f000 f85f 	bl	a8fc <cc2400_set>
}
    a83e:	bd80      	pop	{r7, pc}
    a840:	2009c038 	.word	0x2009c038
    a844:	2009c058 	.word	0x2009c058

0000a848 <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    a848:	b480      	push	{r7}
    a84a:	b085      	sub	sp, #20
    a84c:	af00      	add	r7, sp, #0
    a84e:	4603      	mov	r3, r0
    a850:	6039      	str	r1, [r7, #0]
    a852:	71fb      	strb	r3, [r7, #7]
	u32 msb = 1 << (len - 1);
    a854:	79fb      	ldrb	r3, [r7, #7]
    a856:	3b01      	subs	r3, #1
    a858:	2201      	movs	r2, #1
    a85a:	fa02 f303 	lsl.w	r3, r2, r3
    a85e:	60fb      	str	r3, [r7, #12]

	/* start transaction by dropping CSN */
	CSN_CLR;
    a860:	4b18      	ldr	r3, [pc, #96]	; (a8c4 <cc2400_spi+0x7c>)
    a862:	2220      	movs	r2, #32
    a864:	601a      	str	r2, [r3, #0]

	while (len--) {
    a866:	e01e      	b.n	a8a6 <cc2400_spi+0x5e>
		if (data & msb)
    a868:	683a      	ldr	r2, [r7, #0]
    a86a:	68fb      	ldr	r3, [r7, #12]
    a86c:	4013      	ands	r3, r2
    a86e:	2b00      	cmp	r3, #0
    a870:	d003      	beq.n	a87a <cc2400_spi+0x32>
			MOSI_SET;
    a872:	4b15      	ldr	r3, [pc, #84]	; (a8c8 <cc2400_spi+0x80>)
    a874:	2201      	movs	r2, #1
    a876:	601a      	str	r2, [r3, #0]
    a878:	e002      	b.n	a880 <cc2400_spi+0x38>
		else
			MOSI_CLR;
    a87a:	4b12      	ldr	r3, [pc, #72]	; (a8c4 <cc2400_spi+0x7c>)
    a87c:	2201      	movs	r2, #1
    a87e:	601a      	str	r2, [r3, #0]
		data <<= 1;
    a880:	683b      	ldr	r3, [r7, #0]
    a882:	005b      	lsls	r3, r3, #1
    a884:	603b      	str	r3, [r7, #0]

		SCLK_SET;
    a886:	4b10      	ldr	r3, [pc, #64]	; (a8c8 <cc2400_spi+0x80>)
    a888:	2210      	movs	r2, #16
    a88a:	601a      	str	r2, [r3, #0]
		if (MISO)
    a88c:	4b0f      	ldr	r3, [pc, #60]	; (a8cc <cc2400_spi+0x84>)
    a88e:	681b      	ldr	r3, [r3, #0]
    a890:	f003 0302 	and.w	r3, r3, #2
    a894:	2b00      	cmp	r3, #0
    a896:	d003      	beq.n	a8a0 <cc2400_spi+0x58>
			data |= 1;
    a898:	683b      	ldr	r3, [r7, #0]
    a89a:	f043 0301 	orr.w	r3, r3, #1
    a89e:	603b      	str	r3, [r7, #0]

		SCLK_CLR;
    a8a0:	4b08      	ldr	r3, [pc, #32]	; (a8c4 <cc2400_spi+0x7c>)
    a8a2:	2210      	movs	r2, #16
    a8a4:	601a      	str	r2, [r3, #0]
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    a8a6:	79fb      	ldrb	r3, [r7, #7]
    a8a8:	1e5a      	subs	r2, r3, #1
    a8aa:	71fa      	strb	r2, [r7, #7]
    a8ac:	2b00      	cmp	r3, #0
    a8ae:	d1db      	bne.n	a868 <cc2400_spi+0x20>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    a8b0:	4b05      	ldr	r3, [pc, #20]	; (a8c8 <cc2400_spi+0x80>)
    a8b2:	2220      	movs	r2, #32
    a8b4:	601a      	str	r2, [r3, #0]

	return data;
    a8b6:	683b      	ldr	r3, [r7, #0]
}
    a8b8:	4618      	mov	r0, r3
    a8ba:	3714      	adds	r7, #20
    a8bc:	46bd      	mov	sp, r7
    a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
    a8c2:	4770      	bx	lr
    a8c4:	2009c05c 	.word	0x2009c05c
    a8c8:	2009c058 	.word	0x2009c058
    a8cc:	2009c054 	.word	0x2009c054

0000a8d0 <cc2400_get>:

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    a8d0:	b580      	push	{r7, lr}
    a8d2:	b084      	sub	sp, #16
    a8d4:	af00      	add	r7, sp, #0
    a8d6:	4603      	mov	r3, r0
    a8d8:	71fb      	strb	r3, [r7, #7]
	u32 in;

	u32 out = (reg | 0x80) << 16;
    a8da:	79fb      	ldrb	r3, [r7, #7]
    a8dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a8e0:	b2db      	uxtb	r3, r3
    a8e2:	041b      	lsls	r3, r3, #16
    a8e4:	60fb      	str	r3, [r7, #12]
	in = cc2400_spi(24, out);
    a8e6:	2018      	movs	r0, #24
    a8e8:	68f9      	ldr	r1, [r7, #12]
    a8ea:	f7ff ffad 	bl	a848 <cc2400_spi>
    a8ee:	60b8      	str	r0, [r7, #8]
	return in & 0xFFFF;
    a8f0:	68bb      	ldr	r3, [r7, #8]
    a8f2:	b29b      	uxth	r3, r3
}
    a8f4:	4618      	mov	r0, r3
    a8f6:	3710      	adds	r7, #16
    a8f8:	46bd      	mov	sp, r7
    a8fa:	bd80      	pop	{r7, pc}

0000a8fc <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
    a8fc:	b580      	push	{r7, lr}
    a8fe:	b084      	sub	sp, #16
    a900:	af00      	add	r7, sp, #0
    a902:	4603      	mov	r3, r0
    a904:	460a      	mov	r2, r1
    a906:	71fb      	strb	r3, [r7, #7]
    a908:	4613      	mov	r3, r2
    a90a:	80bb      	strh	r3, [r7, #4]
	u32 out = (reg << 16) | val;
    a90c:	79fb      	ldrb	r3, [r7, #7]
    a90e:	041a      	lsls	r2, r3, #16
    a910:	88bb      	ldrh	r3, [r7, #4]
    a912:	4313      	orrs	r3, r2
    a914:	60fb      	str	r3, [r7, #12]
	cc2400_spi(24, out);
    a916:	2018      	movs	r0, #24
    a918:	68f9      	ldr	r1, [r7, #12]
    a91a:	f7ff ff95 	bl	a848 <cc2400_spi>
}
    a91e:	3710      	adds	r7, #16
    a920:	46bd      	mov	sp, r7
    a922:	bd80      	pop	{r7, pc}

0000a924 <cc2400_get8>:

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    a924:	b580      	push	{r7, lr}
    a926:	b084      	sub	sp, #16
    a928:	af00      	add	r7, sp, #0
    a92a:	4603      	mov	r3, r0
    a92c:	71fb      	strb	r3, [r7, #7]
	u16 in;

	u16 out = (reg | 0x80) << 8;
    a92e:	79fb      	ldrb	r3, [r7, #7]
    a930:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a934:	b2db      	uxtb	r3, r3
    a936:	b29b      	uxth	r3, r3
    a938:	021b      	lsls	r3, r3, #8
    a93a:	81fb      	strh	r3, [r7, #14]
	in = cc2400_spi(16, out);
    a93c:	89fb      	ldrh	r3, [r7, #14]
    a93e:	2010      	movs	r0, #16
    a940:	4619      	mov	r1, r3
    a942:	f7ff ff81 	bl	a848 <cc2400_spi>
    a946:	4603      	mov	r3, r0
    a948:	81bb      	strh	r3, [r7, #12]
	return in & 0xFF;
    a94a:	89bb      	ldrh	r3, [r7, #12]
    a94c:	b2db      	uxtb	r3, r3
}
    a94e:	4618      	mov	r0, r3
    a950:	3710      	adds	r7, #16
    a952:	46bd      	mov	sp, r7
    a954:	bd80      	pop	{r7, pc}
    a956:	bf00      	nop

0000a958 <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
    a958:	b580      	push	{r7, lr}
    a95a:	b084      	sub	sp, #16
    a95c:	af00      	add	r7, sp, #0
    a95e:	4603      	mov	r3, r0
    a960:	460a      	mov	r2, r1
    a962:	71fb      	strb	r3, [r7, #7]
    a964:	4613      	mov	r3, r2
    a966:	71bb      	strb	r3, [r7, #6]
	u32 out = (reg << 8) | val;
    a968:	79fb      	ldrb	r3, [r7, #7]
    a96a:	021a      	lsls	r2, r3, #8
    a96c:	79bb      	ldrb	r3, [r7, #6]
    a96e:	4313      	orrs	r3, r2
    a970:	60fb      	str	r3, [r7, #12]
	cc2400_spi(16, out);
    a972:	2010      	movs	r0, #16
    a974:	68f9      	ldr	r1, [r7, #12]
    a976:	f7ff ff67 	bl	a848 <cc2400_spi>
}
    a97a:	3710      	adds	r7, #16
    a97c:	46bd      	mov	sp, r7
    a97e:	bd80      	pop	{r7, pc}

0000a980 <cc2400_spi_buf>:

/* write multiple bytes to SPI */
void cc2400_spi_buf(u8 reg, u8 len, u8 *data)
{
    a980:	b480      	push	{r7}
    a982:	b085      	sub	sp, #20
    a984:	af00      	add	r7, sp, #0
    a986:	4603      	mov	r3, r0
    a988:	603a      	str	r2, [r7, #0]
    a98a:	71fb      	strb	r3, [r7, #7]
    a98c:	460b      	mov	r3, r1
    a98e:	71bb      	strb	r3, [r7, #6]
	u8 msb = 1 << 7;
    a990:	2380      	movs	r3, #128	; 0x80
    a992:	733b      	strb	r3, [r7, #12]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    a994:	4b33      	ldr	r3, [pc, #204]	; (aa64 <cc2400_spi_buf+0xe4>)
    a996:	2220      	movs	r2, #32
    a998:	601a      	str	r2, [r3, #0]

	for (i = 0; i < 8; ++i) {
    a99a:	2300      	movs	r3, #0
    a99c:	73fb      	strb	r3, [r7, #15]
    a99e:	e018      	b.n	a9d2 <cc2400_spi_buf+0x52>
		if (reg & msb)
    a9a0:	79fa      	ldrb	r2, [r7, #7]
    a9a2:	7b3b      	ldrb	r3, [r7, #12]
    a9a4:	4013      	ands	r3, r2
    a9a6:	b2db      	uxtb	r3, r3
    a9a8:	2b00      	cmp	r3, #0
    a9aa:	d003      	beq.n	a9b4 <cc2400_spi_buf+0x34>
			MOSI_SET;
    a9ac:	4b2e      	ldr	r3, [pc, #184]	; (aa68 <cc2400_spi_buf+0xe8>)
    a9ae:	2201      	movs	r2, #1
    a9b0:	601a      	str	r2, [r3, #0]
    a9b2:	e002      	b.n	a9ba <cc2400_spi_buf+0x3a>
		else
			MOSI_CLR;
    a9b4:	4b2b      	ldr	r3, [pc, #172]	; (aa64 <cc2400_spi_buf+0xe4>)
    a9b6:	2201      	movs	r2, #1
    a9b8:	601a      	str	r2, [r3, #0]
		reg <<= 1;
    a9ba:	79fb      	ldrb	r3, [r7, #7]
    a9bc:	005b      	lsls	r3, r3, #1
    a9be:	71fb      	strb	r3, [r7, #7]
		SCLK_SET;
    a9c0:	4b29      	ldr	r3, [pc, #164]	; (aa68 <cc2400_spi_buf+0xe8>)
    a9c2:	2210      	movs	r2, #16
    a9c4:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    a9c6:	4b27      	ldr	r3, [pc, #156]	; (aa64 <cc2400_spi_buf+0xe4>)
    a9c8:	2210      	movs	r2, #16
    a9ca:	601a      	str	r2, [r3, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    a9cc:	7bfb      	ldrb	r3, [r7, #15]
    a9ce:	3301      	adds	r3, #1
    a9d0:	73fb      	strb	r3, [r7, #15]
    a9d2:	7bfb      	ldrb	r3, [r7, #15]
    a9d4:	2b07      	cmp	r3, #7
    a9d6:	d9e3      	bls.n	a9a0 <cc2400_spi_buf+0x20>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    a9d8:	2300      	movs	r3, #0
    a9da:	73fb      	strb	r3, [r7, #15]
    a9dc:	e026      	b.n	aa2c <cc2400_spi_buf+0xac>
		temp = data[i];
    a9de:	7bfb      	ldrb	r3, [r7, #15]
    a9e0:	683a      	ldr	r2, [r7, #0]
    a9e2:	4413      	add	r3, r2
    a9e4:	781b      	ldrb	r3, [r3, #0]
    a9e6:	737b      	strb	r3, [r7, #13]
		for (j = 0; j < 8; ++j) {
    a9e8:	2300      	movs	r3, #0
    a9ea:	73bb      	strb	r3, [r7, #14]
    a9ec:	e018      	b.n	aa20 <cc2400_spi_buf+0xa0>
			if (temp & msb)
    a9ee:	7b7a      	ldrb	r2, [r7, #13]
    a9f0:	7b3b      	ldrb	r3, [r7, #12]
    a9f2:	4013      	ands	r3, r2
    a9f4:	b2db      	uxtb	r3, r3
    a9f6:	2b00      	cmp	r3, #0
    a9f8:	d003      	beq.n	aa02 <cc2400_spi_buf+0x82>
				MOSI_SET;
    a9fa:	4b1b      	ldr	r3, [pc, #108]	; (aa68 <cc2400_spi_buf+0xe8>)
    a9fc:	2201      	movs	r2, #1
    a9fe:	601a      	str	r2, [r3, #0]
    aa00:	e002      	b.n	aa08 <cc2400_spi_buf+0x88>
			else
				MOSI_CLR;
    aa02:	4b18      	ldr	r3, [pc, #96]	; (aa64 <cc2400_spi_buf+0xe4>)
    aa04:	2201      	movs	r2, #1
    aa06:	601a      	str	r2, [r3, #0]
			temp <<= 1;
    aa08:	7b7b      	ldrb	r3, [r7, #13]
    aa0a:	005b      	lsls	r3, r3, #1
    aa0c:	737b      	strb	r3, [r7, #13]
			SCLK_SET;
    aa0e:	4b16      	ldr	r3, [pc, #88]	; (aa68 <cc2400_spi_buf+0xe8>)
    aa10:	2210      	movs	r2, #16
    aa12:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
    aa14:	4b13      	ldr	r3, [pc, #76]	; (aa64 <cc2400_spi_buf+0xe4>)
    aa16:	2210      	movs	r2, #16
    aa18:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    aa1a:	7bbb      	ldrb	r3, [r7, #14]
    aa1c:	3301      	adds	r3, #1
    aa1e:	73bb      	strb	r3, [r7, #14]
    aa20:	7bbb      	ldrb	r3, [r7, #14]
    aa22:	2b07      	cmp	r3, #7
    aa24:	d9e3      	bls.n	a9ee <cc2400_spi_buf+0x6e>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    aa26:	7bfb      	ldrb	r3, [r7, #15]
    aa28:	3301      	adds	r3, #1
    aa2a:	73fb      	strb	r3, [r7, #15]
    aa2c:	7bfa      	ldrb	r2, [r7, #15]
    aa2e:	79bb      	ldrb	r3, [r7, #6]
    aa30:	429a      	cmp	r2, r3
    aa32:	d3d4      	bcc.n	a9de <cc2400_spi_buf+0x5e>
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    aa34:	2300      	movs	r3, #0
    aa36:	73fb      	strb	r3, [r7, #15]
    aa38:	e008      	b.n	aa4c <cc2400_spi_buf+0xcc>
		SCLK_SET;
    aa3a:	4b0b      	ldr	r3, [pc, #44]	; (aa68 <cc2400_spi_buf+0xe8>)
    aa3c:	2210      	movs	r2, #16
    aa3e:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    aa40:	4b08      	ldr	r3, [pc, #32]	; (aa64 <cc2400_spi_buf+0xe4>)
    aa42:	2210      	movs	r2, #16
    aa44:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    aa46:	7bfb      	ldrb	r3, [r7, #15]
    aa48:	3301      	adds	r3, #1
    aa4a:	73fb      	strb	r3, [r7, #15]
    aa4c:	7bfb      	ldrb	r3, [r7, #15]
    aa4e:	2b07      	cmp	r3, #7
    aa50:	d9f3      	bls.n	aa3a <cc2400_spi_buf+0xba>
		SCLK_SET;
		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    aa52:	4b05      	ldr	r3, [pc, #20]	; (aa68 <cc2400_spi_buf+0xe8>)
    aa54:	2220      	movs	r2, #32
    aa56:	601a      	str	r2, [r3, #0]
}
    aa58:	3714      	adds	r7, #20
    aa5a:	46bd      	mov	sp, r7
    aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa60:	4770      	bx	lr
    aa62:	bf00      	nop
    aa64:	2009c05c 	.word	0x2009c05c
    aa68:	2009c058 	.word	0x2009c058

0000aa6c <cc2400_status>:

/* get the status */
u8 cc2400_status()
{
    aa6c:	b580      	push	{r7, lr}
    aa6e:	af00      	add	r7, sp, #0
	return cc2400_spi(8, 0);
    aa70:	2008      	movs	r0, #8
    aa72:	2100      	movs	r1, #0
    aa74:	f7ff fee8 	bl	a848 <cc2400_spi>
    aa78:	4603      	mov	r3, r0
    aa7a:	b2db      	uxtb	r3, r3
}
    aa7c:	4618      	mov	r0, r3
    aa7e:	bd80      	pop	{r7, pc}

0000aa80 <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    aa80:	b580      	push	{r7, lr}
    aa82:	b082      	sub	sp, #8
    aa84:	af00      	add	r7, sp, #0
    aa86:	4603      	mov	r3, r0
    aa88:	71fb      	strb	r3, [r7, #7]
	return cc2400_spi(8, reg);
    aa8a:	79fb      	ldrb	r3, [r7, #7]
    aa8c:	2008      	movs	r0, #8
    aa8e:	4619      	mov	r1, r3
    aa90:	f7ff feda 	bl	a848 <cc2400_spi>
    aa94:	4603      	mov	r3, r0
    aa96:	b2db      	uxtb	r3, r3
}
    aa98:	4618      	mov	r0, r3
    aa9a:	3708      	adds	r7, #8
    aa9c:	46bd      	mov	sp, r7
    aa9e:	bd80      	pop	{r7, pc}

0000aaa0 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    aaa0:	b580      	push	{r7, lr}
    aaa2:	af00      	add	r7, sp, #0
	cc2400_set(MAIN, 0x0000);
    aaa4:	2000      	movs	r0, #0
    aaa6:	2100      	movs	r1, #0
    aaa8:	f7ff ff28 	bl	a8fc <cc2400_set>
	while (cc2400_get(MAIN) != 0x0000);
    aaac:	bf00      	nop
    aaae:	2000      	movs	r0, #0
    aab0:	f7ff ff0e 	bl	a8d0 <cc2400_get>
    aab4:	4603      	mov	r3, r0
    aab6:	2b00      	cmp	r3, #0
    aab8:	d1f9      	bne.n	aaae <cc2400_reset+0xe>
	cc2400_set(MAIN, 0x8000);
    aaba:	2000      	movs	r0, #0
    aabc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    aac0:	f7ff ff1c 	bl	a8fc <cc2400_set>
	while (cc2400_get(MAIN) != 0x8000);
    aac4:	bf00      	nop
    aac6:	2000      	movs	r0, #0
    aac8:	f7ff ff02 	bl	a8d0 <cc2400_get>
    aacc:	4603      	mov	r3, r0
    aace:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    aad2:	d1f8      	bne.n	aac6 <cc2400_reset+0x26>
}
    aad4:	bd80      	pop	{r7, pc}
    aad6:	bf00      	nop

0000aad8 <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    aad8:	b580      	push	{r7, lr}
    aada:	af00      	add	r7, sp, #0
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    aadc:	4b5e      	ldr	r3, [pc, #376]	; (ac58 <clock_start+0x180>)
    aade:	f244 023a 	movw	r2, #16442	; 0x403a
    aae2:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    aae4:	4b5d      	ldr	r3, [pc, #372]	; (ac5c <clock_start+0x184>)
    aae6:	2200      	movs	r2, #0
    aae8:	601a      	str	r2, [r3, #0]

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    aaea:	4a5d      	ldr	r2, [pc, #372]	; (ac60 <clock_start+0x188>)
    aaec:	4b5c      	ldr	r3, [pc, #368]	; (ac60 <clock_start+0x188>)
    aaee:	681b      	ldr	r3, [r3, #0]
    aaf0:	f023 0302 	bic.w	r3, r3, #2
    aaf4:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    aaf6:	4b5b      	ldr	r3, [pc, #364]	; (ac64 <clock_start+0x18c>)
    aaf8:	22aa      	movs	r2, #170	; 0xaa
    aafa:	601a      	str	r2, [r3, #0]
    aafc:	4b59      	ldr	r3, [pc, #356]	; (ac64 <clock_start+0x18c>)
    aafe:	2255      	movs	r2, #85	; 0x55
    ab00:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    ab02:	bf00      	nop
    ab04:	4b58      	ldr	r3, [pc, #352]	; (ac68 <clock_start+0x190>)
    ab06:	681b      	ldr	r3, [r3, #0]
    ab08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    ab0c:	2b00      	cmp	r3, #0
    ab0e:	d1f9      	bne.n	ab04 <clock_start+0x2c>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    ab10:	4a53      	ldr	r2, [pc, #332]	; (ac60 <clock_start+0x188>)
    ab12:	4b53      	ldr	r3, [pc, #332]	; (ac60 <clock_start+0x188>)
    ab14:	681b      	ldr	r3, [r3, #0]
    ab16:	f023 0301 	bic.w	r3, r3, #1
    ab1a:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    ab1c:	4b51      	ldr	r3, [pc, #324]	; (ac64 <clock_start+0x18c>)
    ab1e:	22aa      	movs	r2, #170	; 0xaa
    ab20:	601a      	str	r2, [r3, #0]
    ab22:	4b50      	ldr	r3, [pc, #320]	; (ac64 <clock_start+0x18c>)
    ab24:	2255      	movs	r2, #85	; 0x55
    ab26:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    ab28:	bf00      	nop
    ab2a:	4b4f      	ldr	r3, [pc, #316]	; (ac68 <clock_start+0x190>)
    ab2c:	681b      	ldr	r3, [r3, #0]
    ab2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    ab32:	2b00      	cmp	r3, #0
    ab34:	d1f9      	bne.n	ab2a <clock_start+0x52>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    ab36:	4b4d      	ldr	r3, [pc, #308]	; (ac6c <clock_start+0x194>)
    ab38:	2200      	movs	r2, #0
    ab3a:	601a      	str	r2, [r3, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    ab3c:	f7ff ffb0 	bl	aaa0 <cc2400_reset>
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
    ab40:	2008      	movs	r0, #8
    ab42:	f241 5170 	movw	r1, #5488	; 0x1570
    ab46:	f7ff fed9 	bl	a8fc <cc2400_set>
	cc2400_strobe(SXOSCON);
    ab4a:	2060      	movs	r0, #96	; 0x60
    ab4c:	f7ff ff98 	bl	aa80 <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    ab50:	bf00      	nop
    ab52:	f7ff ff8b 	bl	aa6c <cc2400_status>
    ab56:	4603      	mov	r3, r0
    ab58:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ab5c:	2b00      	cmp	r3, #0
    ab5e:	d0f8      	beq.n	ab52 <clock_start+0x7a>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    ab60:	4b43      	ldr	r3, [pc, #268]	; (ac70 <clock_start+0x198>)
    ab62:	2220      	movs	r2, #32
    ab64:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    ab66:	bf00      	nop
    ab68:	4b41      	ldr	r3, [pc, #260]	; (ac70 <clock_start+0x198>)
    ab6a:	681b      	ldr	r3, [r3, #0]
    ab6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    ab70:	2b00      	cmp	r3, #0
    ab72:	d0f9      	beq.n	ab68 <clock_start+0x90>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    ab74:	4b3f      	ldr	r3, [pc, #252]	; (ac74 <clock_start+0x19c>)
    ab76:	2208      	movs	r2, #8
    ab78:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    ab7a:	4b3f      	ldr	r3, [pc, #252]	; (ac78 <clock_start+0x1a0>)
    ab7c:	2200      	movs	r2, #0
    ab7e:	601a      	str	r2, [r3, #0]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    ab80:	4b36      	ldr	r3, [pc, #216]	; (ac5c <clock_start+0x184>)
    ab82:	2201      	movs	r2, #1
    ab84:	601a      	str	r2, [r3, #0]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    ab86:	4b3d      	ldr	r3, [pc, #244]	; (ac7c <clock_start+0x1a4>)
    ab88:	4a3d      	ldr	r2, [pc, #244]	; (ac80 <clock_start+0x1a8>)
    ab8a:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    ab8c:	4b35      	ldr	r3, [pc, #212]	; (ac64 <clock_start+0x18c>)
    ab8e:	22aa      	movs	r2, #170	; 0xaa
    ab90:	601a      	str	r2, [r3, #0]
    ab92:	4b34      	ldr	r3, [pc, #208]	; (ac64 <clock_start+0x18c>)
    ab94:	2255      	movs	r2, #85	; 0x55
    ab96:	601a      	str	r2, [r3, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    ab98:	4a31      	ldr	r2, [pc, #196]	; (ac60 <clock_start+0x188>)
    ab9a:	4b31      	ldr	r3, [pc, #196]	; (ac60 <clock_start+0x188>)
    ab9c:	681b      	ldr	r3, [r3, #0]
    ab9e:	f043 0301 	orr.w	r3, r3, #1
    aba2:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    aba4:	4b2f      	ldr	r3, [pc, #188]	; (ac64 <clock_start+0x18c>)
    aba6:	22aa      	movs	r2, #170	; 0xaa
    aba8:	601a      	str	r2, [r3, #0]
    abaa:	4b2e      	ldr	r3, [pc, #184]	; (ac64 <clock_start+0x18c>)
    abac:	2255      	movs	r2, #85	; 0x55
    abae:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    abb0:	bf00      	nop
    abb2:	4b2d      	ldr	r3, [pc, #180]	; (ac68 <clock_start+0x190>)
    abb4:	681b      	ldr	r3, [r3, #0]
    abb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    abba:	2b00      	cmp	r3, #0
    abbc:	d0f9      	beq.n	abb2 <clock_start+0xda>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    abbe:	4b2b      	ldr	r3, [pc, #172]	; (ac6c <clock_start+0x194>)
    abc0:	2203      	movs	r2, #3
    abc2:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    abc4:	4a26      	ldr	r2, [pc, #152]	; (ac60 <clock_start+0x188>)
    abc6:	4b26      	ldr	r3, [pc, #152]	; (ac60 <clock_start+0x188>)
    abc8:	681b      	ldr	r3, [r3, #0]
    abca:	f043 0302 	orr.w	r3, r3, #2
    abce:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    abd0:	4b24      	ldr	r3, [pc, #144]	; (ac64 <clock_start+0x18c>)
    abd2:	22aa      	movs	r2, #170	; 0xaa
    abd4:	601a      	str	r2, [r3, #0]
    abd6:	4b23      	ldr	r3, [pc, #140]	; (ac64 <clock_start+0x18c>)
    abd8:	2255      	movs	r2, #85	; 0x55
    abda:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    abdc:	bf00      	nop
    abde:	4b22      	ldr	r3, [pc, #136]	; (ac68 <clock_start+0x190>)
    abe0:	681b      	ldr	r3, [r3, #0]
    abe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    abe6:	2b00      	cmp	r3, #0
    abe8:	d0f9      	beq.n	abde <clock_start+0x106>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    abea:	4b26      	ldr	r3, [pc, #152]	; (ac84 <clock_start+0x1ac>)
    abec:	2222      	movs	r2, #34	; 0x22
    abee:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    abf0:	4b25      	ldr	r3, [pc, #148]	; (ac88 <clock_start+0x1b0>)
    abf2:	22aa      	movs	r2, #170	; 0xaa
    abf4:	601a      	str	r2, [r3, #0]
    abf6:	4b24      	ldr	r3, [pc, #144]	; (ac88 <clock_start+0x1b0>)
    abf8:	2255      	movs	r2, #85	; 0x55
    abfa:	601a      	str	r2, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    abfc:	4a23      	ldr	r2, [pc, #140]	; (ac8c <clock_start+0x1b4>)
    abfe:	4b23      	ldr	r3, [pc, #140]	; (ac8c <clock_start+0x1b4>)
    ac00:	681b      	ldr	r3, [r3, #0]
    ac02:	f043 0301 	orr.w	r3, r3, #1
    ac06:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    ac08:	4b1f      	ldr	r3, [pc, #124]	; (ac88 <clock_start+0x1b0>)
    ac0a:	22aa      	movs	r2, #170	; 0xaa
    ac0c:	601a      	str	r2, [r3, #0]
    ac0e:	4b1e      	ldr	r3, [pc, #120]	; (ac88 <clock_start+0x1b0>)
    ac10:	2255      	movs	r2, #85	; 0x55
    ac12:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    ac14:	bf00      	nop
    ac16:	4b1e      	ldr	r3, [pc, #120]	; (ac90 <clock_start+0x1b8>)
    ac18:	681b      	ldr	r3, [r3, #0]
    ac1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
    ac1e:	2b00      	cmp	r3, #0
    ac20:	d0f9      	beq.n	ac16 <clock_start+0x13e>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    ac22:	bf00      	nop
    ac24:	4b1a      	ldr	r3, [pc, #104]	; (ac90 <clock_start+0x1b8>)
    ac26:	681b      	ldr	r3, [r3, #0]
    ac28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    ac2c:	2b00      	cmp	r3, #0
    ac2e:	d0f9      	beq.n	ac24 <clock_start+0x14c>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    ac30:	4a16      	ldr	r2, [pc, #88]	; (ac8c <clock_start+0x1b4>)
    ac32:	4b16      	ldr	r3, [pc, #88]	; (ac8c <clock_start+0x1b4>)
    ac34:	681b      	ldr	r3, [r3, #0]
    ac36:	f043 0302 	orr.w	r3, r3, #2
    ac3a:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    ac3c:	4b12      	ldr	r3, [pc, #72]	; (ac88 <clock_start+0x1b0>)
    ac3e:	22aa      	movs	r2, #170	; 0xaa
    ac40:	601a      	str	r2, [r3, #0]
    ac42:	4b11      	ldr	r3, [pc, #68]	; (ac88 <clock_start+0x1b0>)
    ac44:	2255      	movs	r2, #85	; 0x55
    ac46:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    ac48:	bf00      	nop
    ac4a:	4b11      	ldr	r3, [pc, #68]	; (ac90 <clock_start+0x1b8>)
    ac4c:	681b      	ldr	r3, [r3, #0]
    ac4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
    ac52:	2b00      	cmp	r3, #0
    ac54:	d0f9      	beq.n	ac4a <clock_start+0x172>
}
    ac56:	bd80      	pop	{r7, pc}
    ac58:	400fc000 	.word	0x400fc000
    ac5c:	400fc10c 	.word	0x400fc10c
    ac60:	400fc080 	.word	0x400fc080
    ac64:	400fc08c 	.word	0x400fc08c
    ac68:	400fc088 	.word	0x400fc088
    ac6c:	400fc104 	.word	0x400fc104
    ac70:	400fc1a0 	.word	0x400fc1a0
    ac74:	400fc1a8 	.word	0x400fc1a8
    ac78:	400fc1ac 	.word	0x400fc1ac
    ac7c:	400fc084 	.word	0x400fc084
    ac80:	00010018 	.word	0x00010018
    ac84:	400fc0a4 	.word	0x400fc0a4
    ac88:	400fc0ac 	.word	0x400fc0ac
    ac8c:	400fc0a0 	.word	0x400fc0a0
    ac90:	400fc0a8 	.word	0x400fc0a8

0000ac94 <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    ac94:	b580      	push	{r7, lr}
    ac96:	af00      	add	r7, sp, #0
	all_pins_off();
    ac98:	f7ff fcd0 	bl	a63c <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    ac9c:	4b0a      	ldr	r3, [pc, #40]	; (acc8 <reset+0x34>)
    ac9e:	2202      	movs	r2, #2
    aca0:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    aca2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    aca6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    acaa:	681b      	ldr	r3, [r3, #0]
    acac:	f043 0303 	orr.w	r3, r3, #3
    acb0:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    acb2:	4b06      	ldr	r3, [pc, #24]	; (accc <reset+0x38>)
    acb4:	22aa      	movs	r2, #170	; 0xaa
    acb6:	601a      	str	r2, [r3, #0]
    acb8:	4b04      	ldr	r3, [pc, #16]	; (accc <reset+0x38>)
    acba:	2255      	movs	r2, #85	; 0x55
    acbc:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
    acbe:	2001      	movs	r0, #1
    acc0:	f7ff fc38 	bl	a534 <wait>
}
    acc4:	bd80      	pop	{r7, pc}
    acc6:	bf00      	nop
    acc8:	2009c03c 	.word	0x2009c03c
    accc:	40000008 	.word	0x40000008

0000acd0 <_HandleRequest>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    acd0:	b580      	push	{r7, lr}
    acd2:	b088      	sub	sp, #32
    acd4:	af00      	add	r7, sp, #0
    acd6:	60f8      	str	r0, [r7, #12]
    acd8:	60b9      	str	r1, [r7, #8]
    acda:	607a      	str	r2, [r7, #4]
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    acdc:	68fb      	ldr	r3, [r7, #12]
    acde:	781b      	ldrb	r3, [r3, #0]
    ace0:	095b      	lsrs	r3, r3, #5
    ace2:	b2db      	uxtb	r3, r3
    ace4:	f003 0303 	and.w	r3, r3, #3
    ace8:	61fb      	str	r3, [r7, #28]
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    acea:	69fb      	ldr	r3, [r7, #28]
    acec:	2b02      	cmp	r3, #2
    acee:	d10e      	bne.n	ad0e <_HandleRequest+0x3e>
		BOOL fFilterStatus = FALSE;
    acf0:	2300      	movs	r3, #0
    acf2:	617b      	str	r3, [r7, #20]
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    acf4:	f107 0314 	add.w	r3, r7, #20
    acf8:	68f8      	ldr	r0, [r7, #12]
    acfa:	4619      	mov	r1, r3
    acfc:	68ba      	ldr	r2, [r7, #8]
    acfe:	687b      	ldr	r3, [r7, #4]
    ad00:	f000 fcd2 	bl	b6a8 <USBFilterOsVendorMessage>
    ad04:	4603      	mov	r3, r0
    ad06:	2b00      	cmp	r3, #0
    ad08:	d001      	beq.n	ad0e <_HandleRequest+0x3e>
			return fFilterStatus;
    ad0a:	697b      	ldr	r3, [r7, #20]
    ad0c:	e00f      	b.n	ad2e <_HandleRequest+0x5e>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    ad0e:	4a0a      	ldr	r2, [pc, #40]	; (ad38 <_HandleRequest+0x68>)
    ad10:	69fb      	ldr	r3, [r7, #28]
    ad12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ad16:	61bb      	str	r3, [r7, #24]
	if (pfnHandler == NULL) {
    ad18:	69bb      	ldr	r3, [r7, #24]
    ad1a:	2b00      	cmp	r3, #0
    ad1c:	d101      	bne.n	ad22 <_HandleRequest+0x52>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    ad1e:	2300      	movs	r3, #0
    ad20:	e005      	b.n	ad2e <_HandleRequest+0x5e>
	}

	return pfnHandler(pSetup, piLen, ppbData);
    ad22:	69bb      	ldr	r3, [r7, #24]
    ad24:	68f8      	ldr	r0, [r7, #12]
    ad26:	68b9      	ldr	r1, [r7, #8]
    ad28:	687a      	ldr	r2, [r7, #4]
    ad2a:	4798      	blx	r3
    ad2c:	4603      	mov	r3, r0
}
    ad2e:	4618      	mov	r0, r3
    ad30:	3720      	adds	r7, #32
    ad32:	46bd      	mov	sp, r7
    ad34:	bd80      	pop	{r7, pc}
    ad36:	bf00      	nop
    ad38:	10000a80 	.word	0x10000a80

0000ad3c <StallControlPipe>:
	Local function to stall the control endpoint
	
	@param [in]	bEPStat	Endpoint status
 */
static void StallControlPipe(U8 bEPStat)
{
    ad3c:	b580      	push	{r7, lr}
    ad3e:	b084      	sub	sp, #16
    ad40:	af00      	add	r7, sp, #0
    ad42:	4603      	mov	r3, r0
    ad44:	71fb      	strb	r3, [r7, #7]
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    ad46:	2080      	movs	r0, #128	; 0x80
    ad48:	2101      	movs	r1, #1
    ad4a:	f000 fa83 	bl	b254 <USBHwEPStall>

// dump setup packet
	DBG("STALL on [");
	pb = (U8 *)&Setup;
    ad4e:	4b07      	ldr	r3, [pc, #28]	; (ad6c <StallControlPipe+0x30>)
    ad50:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
    ad52:	2300      	movs	r3, #0
    ad54:	60fb      	str	r3, [r7, #12]
    ad56:	e002      	b.n	ad5e <StallControlPipe+0x22>
    ad58:	68fb      	ldr	r3, [r7, #12]
    ad5a:	3301      	adds	r3, #1
    ad5c:	60fb      	str	r3, [r7, #12]
    ad5e:	68fb      	ldr	r3, [r7, #12]
    ad60:	2b07      	cmp	r3, #7
    ad62:	ddf9      	ble.n	ad58 <StallControlPipe+0x1c>
		DBG(" %02x", *pb++);
	}
	DBG("] stat=%x\n", bEPStat);
}
    ad64:	3710      	adds	r7, #16
    ad66:	46bd      	mov	sp, r7
    ad68:	bd80      	pop	{r7, pc}
    ad6a:	bf00      	nop
    ad6c:	10000a6c 	.word	0x10000a6c

0000ad70 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    ad70:	b580      	push	{r7, lr}
    ad72:	b082      	sub	sp, #8
    ad74:	af00      	add	r7, sp, #0
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    ad76:	4b0e      	ldr	r3, [pc, #56]	; (adb0 <DataIn+0x40>)
    ad78:	681b      	ldr	r3, [r3, #0]
    ad7a:	2b40      	cmp	r3, #64	; 0x40
    ad7c:	bfa8      	it	ge
    ad7e:	2340      	movge	r3, #64	; 0x40
    ad80:	607b      	str	r3, [r7, #4]
	USBHwEPWrite(0x80, pbData, iChunk);
    ad82:	4b0c      	ldr	r3, [pc, #48]	; (adb4 <DataIn+0x44>)
    ad84:	681a      	ldr	r2, [r3, #0]
    ad86:	687b      	ldr	r3, [r7, #4]
    ad88:	2080      	movs	r0, #128	; 0x80
    ad8a:	4611      	mov	r1, r2
    ad8c:	461a      	mov	r2, r3
    ad8e:	f000 fa85 	bl	b29c <USBHwEPWrite>
	pbData += iChunk;
    ad92:	4b08      	ldr	r3, [pc, #32]	; (adb4 <DataIn+0x44>)
    ad94:	681a      	ldr	r2, [r3, #0]
    ad96:	687b      	ldr	r3, [r7, #4]
    ad98:	4413      	add	r3, r2
    ad9a:	4a06      	ldr	r2, [pc, #24]	; (adb4 <DataIn+0x44>)
    ad9c:	6013      	str	r3, [r2, #0]
	iResidue -= iChunk;
    ad9e:	4b04      	ldr	r3, [pc, #16]	; (adb0 <DataIn+0x40>)
    ada0:	681a      	ldr	r2, [r3, #0]
    ada2:	687b      	ldr	r3, [r7, #4]
    ada4:	1ad3      	subs	r3, r2, r3
    ada6:	4a02      	ldr	r2, [pc, #8]	; (adb0 <DataIn+0x40>)
    ada8:	6013      	str	r3, [r2, #0]
}
    adaa:	3708      	adds	r7, #8
    adac:	46bd      	mov	sp, r7
    adae:	bd80      	pop	{r7, pc}
    adb0:	10000a78 	.word	0x10000a78
    adb4:	10000a74 	.word	0x10000a74

0000adb8 <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    adb8:	b580      	push	{r7, lr}
    adba:	b084      	sub	sp, #16
    adbc:	af00      	add	r7, sp, #0
    adbe:	4603      	mov	r3, r0
    adc0:	460a      	mov	r2, r1
    adc2:	71fb      	strb	r3, [r7, #7]
    adc4:	4613      	mov	r3, r2
    adc6:	71bb      	strb	r3, [r7, #6]
	int iChunk, iType;

	if (bEP == 0x00) {
    adc8:	79fb      	ldrb	r3, [r7, #7]
    adca:	2b00      	cmp	r3, #0
    adcc:	f040 8091 	bne.w	aef2 <USBHandleControlTransfer+0x13a>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    add0:	79bb      	ldrb	r3, [r7, #6]
    add2:	f003 0304 	and.w	r3, r3, #4
    add6:	2b00      	cmp	r3, #0
    add8:	d041      	beq.n	ae5e <USBHandleControlTransfer+0xa6>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    adda:	2000      	movs	r0, #0
    addc:	4949      	ldr	r1, [pc, #292]	; (af04 <USBHandleControlTransfer+0x14c>)
    adde:	2208      	movs	r2, #8
    ade0:	f000 faaa 	bl	b338 <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    ade4:	4b47      	ldr	r3, [pc, #284]	; (af04 <USBHandleControlTransfer+0x14c>)
    ade6:	781b      	ldrb	r3, [r3, #0]
    ade8:	095b      	lsrs	r3, r3, #5
    adea:	b2db      	uxtb	r3, r3
    adec:	f003 0303 	and.w	r3, r3, #3
    adf0:	60fb      	str	r3, [r7, #12]
			pbData = apbDataStore[iType];
    adf2:	4a45      	ldr	r2, [pc, #276]	; (af08 <USBHandleControlTransfer+0x150>)
    adf4:	68fb      	ldr	r3, [r7, #12]
    adf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    adfa:	4a44      	ldr	r2, [pc, #272]	; (af0c <USBHandleControlTransfer+0x154>)
    adfc:	6013      	str	r3, [r2, #0]
			iResidue = Setup.wLength;
    adfe:	4b41      	ldr	r3, [pc, #260]	; (af04 <USBHandleControlTransfer+0x14c>)
    ae00:	88db      	ldrh	r3, [r3, #6]
    ae02:	461a      	mov	r2, r3
    ae04:	4b42      	ldr	r3, [pc, #264]	; (af10 <USBHandleControlTransfer+0x158>)
    ae06:	601a      	str	r2, [r3, #0]
			iLen = Setup.wLength;
    ae08:	4b3e      	ldr	r3, [pc, #248]	; (af04 <USBHandleControlTransfer+0x14c>)
    ae0a:	88db      	ldrh	r3, [r3, #6]
    ae0c:	461a      	mov	r2, r3
    ae0e:	4b41      	ldr	r3, [pc, #260]	; (af14 <USBHandleControlTransfer+0x15c>)
    ae10:	601a      	str	r2, [r3, #0]

			if ((Setup.wLength == 0) ||
    ae12:	4b3c      	ldr	r3, [pc, #240]	; (af04 <USBHandleControlTransfer+0x14c>)
    ae14:	88db      	ldrh	r3, [r3, #6]
    ae16:	2b00      	cmp	r3, #0
    ae18:	d007      	beq.n	ae2a <USBHandleControlTransfer+0x72>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
    ae1a:	4b3a      	ldr	r3, [pc, #232]	; (af04 <USBHandleControlTransfer+0x14c>)
    ae1c:	781b      	ldrb	r3, [r3, #0]
    ae1e:	09db      	lsrs	r3, r3, #7
    ae20:	b2db      	uxtb	r3, r3
    ae22:	f003 0301 	and.w	r3, r3, #1
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
			pbData = apbDataStore[iType];
			iResidue = Setup.wLength;
			iLen = Setup.wLength;

			if ((Setup.wLength == 0) ||
    ae26:	2b00      	cmp	r3, #0
    ae28:	d068      	beq.n	aefc <USBHandleControlTransfer+0x144>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    ae2a:	4836      	ldr	r0, [pc, #216]	; (af04 <USBHandleControlTransfer+0x14c>)
    ae2c:	4939      	ldr	r1, [pc, #228]	; (af14 <USBHandleControlTransfer+0x15c>)
    ae2e:	4a37      	ldr	r2, [pc, #220]	; (af0c <USBHandleControlTransfer+0x154>)
    ae30:	f7ff ff4e 	bl	acd0 <_HandleRequest>
    ae34:	4603      	mov	r3, r0
    ae36:	2b00      	cmp	r3, #0
    ae38:	d104      	bne.n	ae44 <USBHandleControlTransfer+0x8c>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
    ae3a:	79bb      	ldrb	r3, [r7, #6]
    ae3c:	4618      	mov	r0, r3
    ae3e:	f7ff ff7d 	bl	ad3c <StallControlPipe>
					return;
    ae42:	e05b      	b.n	aefc <USBHandleControlTransfer+0x144>
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    ae44:	4b2f      	ldr	r3, [pc, #188]	; (af04 <USBHandleControlTransfer+0x14c>)
    ae46:	88db      	ldrh	r3, [r3, #6]
    ae48:	461a      	mov	r2, r3
    ae4a:	4b32      	ldr	r3, [pc, #200]	; (af14 <USBHandleControlTransfer+0x15c>)
    ae4c:	681b      	ldr	r3, [r3, #0]
    ae4e:	4293      	cmp	r3, r2
    ae50:	bfa8      	it	ge
    ae52:	4613      	movge	r3, r2
    ae54:	4a2e      	ldr	r2, [pc, #184]	; (af10 <USBHandleControlTransfer+0x158>)
    ae56:	6013      	str	r3, [r2, #0]
				// send first part (possibly a zero-length status message)
				DataIn();
    ae58:	f7ff ff8a 	bl	ad70 <DataIn>
    ae5c:	e04e      	b.n	aefc <USBHandleControlTransfer+0x144>
			}
		}
		else {		
			if (iResidue > 0) {
    ae5e:	4b2c      	ldr	r3, [pc, #176]	; (af10 <USBHandleControlTransfer+0x158>)
    ae60:	681b      	ldr	r3, [r3, #0]
    ae62:	2b00      	cmp	r3, #0
    ae64:	dd3e      	ble.n	aee4 <USBHandleControlTransfer+0x12c>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    ae66:	4b29      	ldr	r3, [pc, #164]	; (af0c <USBHandleControlTransfer+0x154>)
    ae68:	681a      	ldr	r2, [r3, #0]
    ae6a:	4b29      	ldr	r3, [pc, #164]	; (af10 <USBHandleControlTransfer+0x158>)
    ae6c:	681b      	ldr	r3, [r3, #0]
    ae6e:	2000      	movs	r0, #0
    ae70:	4611      	mov	r1, r2
    ae72:	461a      	mov	r2, r3
    ae74:	f000 fa60 	bl	b338 <USBHwEPRead>
    ae78:	60b8      	str	r0, [r7, #8]
				if (iChunk < 0) {
    ae7a:	68bb      	ldr	r3, [r7, #8]
    ae7c:	2b00      	cmp	r3, #0
    ae7e:	da04      	bge.n	ae8a <USBHandleControlTransfer+0xd2>
					StallControlPipe(bEPStat);
    ae80:	79bb      	ldrb	r3, [r7, #6]
    ae82:	4618      	mov	r0, r3
    ae84:	f7ff ff5a 	bl	ad3c <StallControlPipe>
					return;
    ae88:	e038      	b.n	aefc <USBHandleControlTransfer+0x144>
				}
				pbData += iChunk;
    ae8a:	4b20      	ldr	r3, [pc, #128]	; (af0c <USBHandleControlTransfer+0x154>)
    ae8c:	681a      	ldr	r2, [r3, #0]
    ae8e:	68bb      	ldr	r3, [r7, #8]
    ae90:	4413      	add	r3, r2
    ae92:	4a1e      	ldr	r2, [pc, #120]	; (af0c <USBHandleControlTransfer+0x154>)
    ae94:	6013      	str	r3, [r2, #0]
				iResidue -= iChunk;
    ae96:	4b1e      	ldr	r3, [pc, #120]	; (af10 <USBHandleControlTransfer+0x158>)
    ae98:	681a      	ldr	r2, [r3, #0]
    ae9a:	68bb      	ldr	r3, [r7, #8]
    ae9c:	1ad3      	subs	r3, r2, r3
    ae9e:	4a1c      	ldr	r2, [pc, #112]	; (af10 <USBHandleControlTransfer+0x158>)
    aea0:	6013      	str	r3, [r2, #0]
				if (iResidue == 0) {
    aea2:	4b1b      	ldr	r3, [pc, #108]	; (af10 <USBHandleControlTransfer+0x158>)
    aea4:	681b      	ldr	r3, [r3, #0]
    aea6:	2b00      	cmp	r3, #0
    aea8:	d128      	bne.n	aefc <USBHandleControlTransfer+0x144>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    aeaa:	4b16      	ldr	r3, [pc, #88]	; (af04 <USBHandleControlTransfer+0x14c>)
    aeac:	781b      	ldrb	r3, [r3, #0]
    aeae:	095b      	lsrs	r3, r3, #5
    aeb0:	b2db      	uxtb	r3, r3
    aeb2:	f003 0303 	and.w	r3, r3, #3
    aeb6:	60fb      	str	r3, [r7, #12]
					pbData = apbDataStore[iType];
    aeb8:	4a13      	ldr	r2, [pc, #76]	; (af08 <USBHandleControlTransfer+0x150>)
    aeba:	68fb      	ldr	r3, [r7, #12]
    aebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    aec0:	4a12      	ldr	r2, [pc, #72]	; (af0c <USBHandleControlTransfer+0x154>)
    aec2:	6013      	str	r3, [r2, #0]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    aec4:	480f      	ldr	r0, [pc, #60]	; (af04 <USBHandleControlTransfer+0x14c>)
    aec6:	4913      	ldr	r1, [pc, #76]	; (af14 <USBHandleControlTransfer+0x15c>)
    aec8:	4a10      	ldr	r2, [pc, #64]	; (af0c <USBHandleControlTransfer+0x154>)
    aeca:	f7ff ff01 	bl	acd0 <_HandleRequest>
    aece:	4603      	mov	r3, r0
    aed0:	2b00      	cmp	r3, #0
    aed2:	d104      	bne.n	aede <USBHandleControlTransfer+0x126>
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
    aed4:	79bb      	ldrb	r3, [r7, #6]
    aed6:	4618      	mov	r0, r3
    aed8:	f7ff ff30 	bl	ad3c <StallControlPipe>
						return;
    aedc:	e00e      	b.n	aefc <USBHandleControlTransfer+0x144>
					}
					// send status to host
					DataIn();
    aede:	f7ff ff47 	bl	ad70 <DataIn>
    aee2:	e00b      	b.n	aefc <USBHandleControlTransfer+0x144>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    aee4:	2000      	movs	r0, #0
    aee6:	2100      	movs	r1, #0
    aee8:	2200      	movs	r2, #0
    aeea:	f000 fa25 	bl	b338 <USBHwEPRead>
    aeee:	60b8      	str	r0, [r7, #8]
    aef0:	e004      	b.n	aefc <USBHandleControlTransfer+0x144>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    aef2:	79fb      	ldrb	r3, [r7, #7]
    aef4:	2b80      	cmp	r3, #128	; 0x80
    aef6:	d101      	bne.n	aefc <USBHandleControlTransfer+0x144>
		// IN transfer
		// send more data if available (possibly a 0-length packet)
		DataIn();
    aef8:	f7ff ff3a 	bl	ad70 <DataIn>
	}
	else {
		ASSERT(FALSE);
	}
}
    aefc:	3710      	adds	r7, #16
    aefe:	46bd      	mov	sp, r7
    af00:	bd80      	pop	{r7, pc}
    af02:	bf00      	nop
    af04:	10000a6c 	.word	0x10000a6c
    af08:	10000a90 	.word	0x10000a90
    af0c:	10000a74 	.word	0x10000a74
    af10:	10000a78 	.word	0x10000a78
    af14:	10000a7c 	.word	0x10000a7c

0000af18 <USBRegisterRequestHandler>:
	@param [in]	iType			Type of request, e.g. REQTYPE_TYPE_STANDARD
	@param [in]	*pfnHandler		Callback function pointer
	@param [in]	*pbDataStore	Data storage area for this type of request
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
    af18:	b480      	push	{r7}
    af1a:	b085      	sub	sp, #20
    af1c:	af00      	add	r7, sp, #0
    af1e:	60f8      	str	r0, [r7, #12]
    af20:	60b9      	str	r1, [r7, #8]
    af22:	607a      	str	r2, [r7, #4]
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    af24:	4907      	ldr	r1, [pc, #28]	; (af44 <USBRegisterRequestHandler+0x2c>)
    af26:	68fb      	ldr	r3, [r7, #12]
    af28:	68ba      	ldr	r2, [r7, #8]
    af2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	apbDataStore[iType] = pbDataStore;
    af2e:	4906      	ldr	r1, [pc, #24]	; (af48 <USBRegisterRequestHandler+0x30>)
    af30:	68fb      	ldr	r3, [r7, #12]
    af32:	687a      	ldr	r2, [r7, #4]
    af34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    af38:	3714      	adds	r7, #20
    af3a:	46bd      	mov	sp, r7
    af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
    af40:	4770      	bx	lr
    af42:	bf00      	nop
    af44:	10000a80 	.word	0x10000a80
    af48:	10000a90 	.word	0x10000a90

0000af4c <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    af4c:	b480      	push	{r7}
    af4e:	b083      	sub	sp, #12
    af50:	af00      	add	r7, sp, #0
    af52:	4603      	mov	r3, r0
    af54:	71fb      	strb	r3, [r7, #7]
	if (bDevStatus & DEV_STATUS_RESET) {
		DBG("\n!");
	}
}
    af56:	370c      	adds	r7, #12
    af58:	46bd      	mov	sp, r7
    af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
    af5e:	4770      	bx	lr

0000af60 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    af60:	b580      	push	{r7, lr}
    af62:	af00      	add	r7, sp, #0
	// init hardware
	USBHwInit();
    af64:	f000 fb2a 	bl	b5bc <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    af68:	480d      	ldr	r0, [pc, #52]	; (afa0 <USBInit+0x40>)
    af6a:	f000 f913 	bl	b194 <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    af6e:	2000      	movs	r0, #0
    af70:	490c      	ldr	r1, [pc, #48]	; (afa4 <USBInit+0x44>)
    af72:	f000 f8dd 	bl	b130 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    af76:	2080      	movs	r0, #128	; 0x80
    af78:	490a      	ldr	r1, [pc, #40]	; (afa4 <USBInit+0x44>)
    af7a:	f000 f8d9 	bl	b130 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    af7e:	2000      	movs	r0, #0
    af80:	2140      	movs	r1, #64	; 0x40
    af82:	f000 f8b7 	bl	b0f4 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    af86:	2080      	movs	r0, #128	; 0x80
    af88:	2140      	movs	r1, #64	; 0x40
    af8a:	f000 f8b3 	bl	b0f4 <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    af8e:	2000      	movs	r0, #0
    af90:	4905      	ldr	r1, [pc, #20]	; (afa8 <USBInit+0x48>)
    af92:	4a06      	ldr	r2, [pc, #24]	; (afac <USBInit+0x4c>)
    af94:	f7ff ffc0 	bl	af18 <USBRegisterRequestHandler>

	return TRUE;
    af98:	2301      	movs	r3, #1
}
    af9a:	4618      	mov	r0, r3
    af9c:	bd80      	pop	{r7, pc}
    af9e:	bf00      	nop
    afa0:	0000af4d 	.word	0x0000af4d
    afa4:	0000adb9 	.word	0x0000adb9
    afa8:	0000bbf5 	.word	0x0000bbf5
    afac:	10000aa0 	.word	0x10000aa0

0000afb0 <Wait4DevInt>:
    Local function to wait for a device interrupt (and clear it)
        
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    afb0:	b480      	push	{r7}
    afb2:	b083      	sub	sp, #12
    afb4:	af00      	add	r7, sp, #0
    afb6:	6078      	str	r0, [r7, #4]
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    afb8:	bf00      	nop
    afba:	4b07      	ldr	r3, [pc, #28]	; (afd8 <Wait4DevInt+0x28>)
    afbc:	681a      	ldr	r2, [r3, #0]
    afbe:	687b      	ldr	r3, [r7, #4]
    afc0:	401a      	ands	r2, r3
    afc2:	687b      	ldr	r3, [r7, #4]
    afc4:	429a      	cmp	r2, r3
    afc6:	d1f8      	bne.n	afba <Wait4DevInt+0xa>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    afc8:	4a04      	ldr	r2, [pc, #16]	; (afdc <Wait4DevInt+0x2c>)
    afca:	687b      	ldr	r3, [r7, #4]
    afcc:	6013      	str	r3, [r2, #0]
}
    afce:	370c      	adds	r7, #12
    afd0:	46bd      	mov	sp, r7
    afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
    afd6:	4770      	bx	lr
    afd8:	5000c200 	.word	0x5000c200
    afdc:	5000c208 	.word	0x5000c208

0000afe0 <USBHwCmd>:
    Local function to send a command to the USB protocol engine
        
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    afe0:	b580      	push	{r7, lr}
    afe2:	b082      	sub	sp, #8
    afe4:	af00      	add	r7, sp, #0
    afe6:	4603      	mov	r3, r0
    afe8:	71fb      	strb	r3, [r7, #7]
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    afea:	4b07      	ldr	r3, [pc, #28]	; (b008 <USBHwCmd+0x28>)
    afec:	2230      	movs	r2, #48	; 0x30
    afee:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    aff0:	4a06      	ldr	r2, [pc, #24]	; (b00c <USBHwCmd+0x2c>)
    aff2:	79fb      	ldrb	r3, [r7, #7]
    aff4:	041b      	lsls	r3, r3, #16
    aff6:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    affa:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    affc:	2010      	movs	r0, #16
    affe:	f7ff ffd7 	bl	afb0 <Wait4DevInt>
}
    b002:	3708      	adds	r7, #8
    b004:	46bd      	mov	sp, r7
    b006:	bd80      	pop	{r7, pc}
    b008:	5000c208 	.word	0x5000c208
    b00c:	5000c210 	.word	0x5000c210

0000b010 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    b010:	b580      	push	{r7, lr}
    b012:	b082      	sub	sp, #8
    b014:	af00      	add	r7, sp, #0
    b016:	4603      	mov	r3, r0
    b018:	460a      	mov	r2, r1
    b01a:	71fb      	strb	r3, [r7, #7]
    b01c:	4613      	mov	r3, r2
    b01e:	80bb      	strh	r3, [r7, #4]
    // write command code
    USBHwCmd(bCmd);
    b020:	79fb      	ldrb	r3, [r7, #7]
    b022:	4618      	mov	r0, r3
    b024:	f7ff ffdc 	bl	afe0 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    b028:	4a05      	ldr	r2, [pc, #20]	; (b040 <USBHwCmdWrite+0x30>)
    b02a:	88bb      	ldrh	r3, [r7, #4]
    b02c:	041b      	lsls	r3, r3, #16
    b02e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b032:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    b034:	2010      	movs	r0, #16
    b036:	f7ff ffbb 	bl	afb0 <Wait4DevInt>
}
    b03a:	3708      	adds	r7, #8
    b03c:	46bd      	mov	sp, r7
    b03e:	bd80      	pop	{r7, pc}
    b040:	5000c210 	.word	0x5000c210

0000b044 <USBHwCmdRead>:
    @param [in] bCmd        Command to send

    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    b044:	b580      	push	{r7, lr}
    b046:	b082      	sub	sp, #8
    b048:	af00      	add	r7, sp, #0
    b04a:	4603      	mov	r3, r0
    b04c:	71fb      	strb	r3, [r7, #7]
    // write command code
    USBHwCmd(bCmd);
    b04e:	79fb      	ldrb	r3, [r7, #7]
    b050:	4618      	mov	r0, r3
    b052:	f7ff ffc5 	bl	afe0 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    b056:	4a08      	ldr	r2, [pc, #32]	; (b078 <USBHwCmdRead+0x34>)
    b058:	79fb      	ldrb	r3, [r7, #7]
    b05a:	041b      	lsls	r3, r3, #16
    b05c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b060:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CDFULL);
    b062:	2020      	movs	r0, #32
    b064:	f7ff ffa4 	bl	afb0 <Wait4DevInt>
    return USBCmdData;
    b068:	4b04      	ldr	r3, [pc, #16]	; (b07c <USBHwCmdRead+0x38>)
    b06a:	681b      	ldr	r3, [r3, #0]
    b06c:	b2db      	uxtb	r3, r3
}
    b06e:	4618      	mov	r0, r3
    b070:	3708      	adds	r7, #8
    b072:	46bd      	mov	sp, r7
    b074:	bd80      	pop	{r7, pc}
    b076:	bf00      	nop
    b078:	5000c210 	.word	0x5000c210
    b07c:	5000c214 	.word	0x5000c214

0000b080 <USBHwEPRealize>:
        
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    b080:	b580      	push	{r7, lr}
    b082:	b082      	sub	sp, #8
    b084:	af00      	add	r7, sp, #0
    b086:	6078      	str	r0, [r7, #4]
    b088:	460b      	mov	r3, r1
    b08a:	807b      	strh	r3, [r7, #2]
    USBReEp |= (1 << idx);
    b08c:	490a      	ldr	r1, [pc, #40]	; (b0b8 <USBHwEPRealize+0x38>)
    b08e:	4b0a      	ldr	r3, [pc, #40]	; (b0b8 <USBHwEPRealize+0x38>)
    b090:	681b      	ldr	r3, [r3, #0]
    b092:	2001      	movs	r0, #1
    b094:	687a      	ldr	r2, [r7, #4]
    b096:	fa00 f202 	lsl.w	r2, r0, r2
    b09a:	4313      	orrs	r3, r2
    b09c:	600b      	str	r3, [r1, #0]
#ifdef LPC17xx
    USBEpIn = idx;
    b09e:	4a07      	ldr	r2, [pc, #28]	; (b0bc <USBHwEPRealize+0x3c>)
    b0a0:	687b      	ldr	r3, [r7, #4]
    b0a2:	6013      	str	r3, [r2, #0]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    b0a4:	4a06      	ldr	r2, [pc, #24]	; (b0c0 <USBHwEPRealize+0x40>)
    b0a6:	887b      	ldrh	r3, [r7, #2]
    b0a8:	6013      	str	r3, [r2, #0]
    Wait4DevInt(EP_RLZED);
    b0aa:	f44f 7080 	mov.w	r0, #256	; 0x100
    b0ae:	f7ff ff7f 	bl	afb0 <Wait4DevInt>
}
    b0b2:	3708      	adds	r7, #8
    b0b4:	46bd      	mov	sp, r7
    b0b6:	bd80      	pop	{r7, pc}
    b0b8:	5000c244 	.word	0x5000c244
    b0bc:	5000c248 	.word	0x5000c248
    b0c0:	5000c24c 	.word	0x5000c24c

0000b0c4 <USBHwEPEnable>:
        
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    b0c4:	b580      	push	{r7, lr}
    b0c6:	b082      	sub	sp, #8
    b0c8:	af00      	add	r7, sp, #0
    b0ca:	6078      	str	r0, [r7, #4]
    b0cc:	6039      	str	r1, [r7, #0]
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    b0ce:	687b      	ldr	r3, [r7, #4]
    b0d0:	b2db      	uxtb	r3, r3
    b0d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b0d6:	b2db      	uxtb	r3, r3
    b0d8:	b2da      	uxtb	r2, r3
    b0da:	683b      	ldr	r3, [r7, #0]
    b0dc:	2b00      	cmp	r3, #0
    b0de:	d001      	beq.n	b0e4 <USBHwEPEnable+0x20>
    b0e0:	2300      	movs	r3, #0
    b0e2:	e000      	b.n	b0e6 <USBHwEPEnable+0x22>
    b0e4:	2320      	movs	r3, #32
    b0e6:	4610      	mov	r0, r2
    b0e8:	4619      	mov	r1, r3
    b0ea:	f7ff ff91 	bl	b010 <USBHwCmdWrite>
}
    b0ee:	3708      	adds	r7, #8
    b0f0:	46bd      	mov	sp, r7
    b0f2:	bd80      	pop	{r7, pc}

0000b0f4 <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    b0f4:	b580      	push	{r7, lr}
    b0f6:	b084      	sub	sp, #16
    b0f8:	af00      	add	r7, sp, #0
    b0fa:	4603      	mov	r3, r0
    b0fc:	460a      	mov	r2, r1
    b0fe:	71fb      	strb	r3, [r7, #7]
    b100:	4613      	mov	r3, r2
    b102:	80bb      	strh	r3, [r7, #4]
    int idx;
    
    idx = EP2IDX(bEP);
    b104:	79fb      	ldrb	r3, [r7, #7]
    b106:	f003 030f 	and.w	r3, r3, #15
    b10a:	005b      	lsls	r3, r3, #1
    b10c:	79fa      	ldrb	r2, [r7, #7]
    b10e:	09d2      	lsrs	r2, r2, #7
    b110:	b2d2      	uxtb	r2, r2
    b112:	4313      	orrs	r3, r2
    b114:	60fb      	str	r3, [r7, #12]
    
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);
    b116:	88bb      	ldrh	r3, [r7, #4]
    b118:	68f8      	ldr	r0, [r7, #12]
    b11a:	4619      	mov	r1, r3
    b11c:	f7ff ffb0 	bl	b080 <USBHwEPRealize>

    // enable EP
    USBHwEPEnable(idx, TRUE);
    b120:	68f8      	ldr	r0, [r7, #12]
    b122:	2101      	movs	r1, #1
    b124:	f7ff ffce 	bl	b0c4 <USBHwEPEnable>
}
    b128:	3710      	adds	r7, #16
    b12a:	46bd      	mov	sp, r7
    b12c:	bd80      	pop	{r7, pc}
    b12e:	bf00      	nop

0000b130 <USBHwRegisterEPIntHandler>:
        
    @param [in] bEP             Endpoint number
    @param [in] pfnHandler      Callback function
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    b130:	b480      	push	{r7}
    b132:	b085      	sub	sp, #20
    b134:	af00      	add	r7, sp, #0
    b136:	4603      	mov	r3, r0
    b138:	6039      	str	r1, [r7, #0]
    b13a:	71fb      	strb	r3, [r7, #7]
    int idx;
    
    idx = EP2IDX(bEP);
    b13c:	79fb      	ldrb	r3, [r7, #7]
    b13e:	f003 030f 	and.w	r3, r3, #15
    b142:	005b      	lsls	r3, r3, #1
    b144:	79fa      	ldrb	r2, [r7, #7]
    b146:	09d2      	lsrs	r2, r2, #7
    b148:	b2d2      	uxtb	r2, r2
    b14a:	4313      	orrs	r3, r2
    b14c:	60fb      	str	r3, [r7, #12]

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    b14e:	68fb      	ldr	r3, [r7, #12]
    b150:	0fda      	lsrs	r2, r3, #31
    b152:	4413      	add	r3, r2
    b154:	105b      	asrs	r3, r3, #1
    b156:	4619      	mov	r1, r3
    b158:	4a0b      	ldr	r2, [pc, #44]	; (b188 <USBHwRegisterEPIntHandler+0x58>)
    b15a:	683b      	ldr	r3, [r7, #0]
    b15c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    b160:	490a      	ldr	r1, [pc, #40]	; (b18c <USBHwRegisterEPIntHandler+0x5c>)
    b162:	4b0a      	ldr	r3, [pc, #40]	; (b18c <USBHwRegisterEPIntHandler+0x5c>)
    b164:	681b      	ldr	r3, [r3, #0]
    b166:	2001      	movs	r0, #1
    b168:	68fa      	ldr	r2, [r7, #12]
    b16a:	fa00 f202 	lsl.w	r2, r0, r2
    b16e:	4313      	orrs	r3, r2
    b170:	600b      	str	r3, [r1, #0]
    USBDevIntEn |= EP_SLOW;
    b172:	4a07      	ldr	r2, [pc, #28]	; (b190 <USBHwRegisterEPIntHandler+0x60>)
    b174:	4b06      	ldr	r3, [pc, #24]	; (b190 <USBHwRegisterEPIntHandler+0x60>)
    b176:	681b      	ldr	r3, [r3, #0]
    b178:	f043 0304 	orr.w	r3, r3, #4
    b17c:	6013      	str	r3, [r2, #0]
    
    DBG("Registered handler for EP 0x%x\n", bEP);
}
    b17e:	3714      	adds	r7, #20
    b180:	46bd      	mov	sp, r7
    b182:	f85d 7b04 	ldr.w	r7, [sp], #4
    b186:	4770      	bx	lr
    b188:	10000aac 	.word	0x10000aac
    b18c:	5000c234 	.word	0x5000c234
    b190:	5000c204 	.word	0x5000c204

0000b194 <USBHwRegisterDevIntHandler>:
    Registers an device status callback
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    b194:	b480      	push	{r7}
    b196:	b083      	sub	sp, #12
    b198:	af00      	add	r7, sp, #0
    b19a:	6078      	str	r0, [r7, #4]
    _pfnDevIntHandler = pfnHandler;
    b19c:	4a06      	ldr	r2, [pc, #24]	; (b1b8 <USBHwRegisterDevIntHandler+0x24>)
    b19e:	687b      	ldr	r3, [r7, #4]
    b1a0:	6013      	str	r3, [r2, #0]
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    b1a2:	4a06      	ldr	r2, [pc, #24]	; (b1bc <USBHwRegisterDevIntHandler+0x28>)
    b1a4:	4b05      	ldr	r3, [pc, #20]	; (b1bc <USBHwRegisterDevIntHandler+0x28>)
    b1a6:	681b      	ldr	r3, [r3, #0]
    b1a8:	f043 0308 	orr.w	r3, r3, #8
    b1ac:	6013      	str	r3, [r2, #0]

    DBG("Registered handler for device status\n");
}
    b1ae:	370c      	adds	r7, #12
    b1b0:	46bd      	mov	sp, r7
    b1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
    b1b6:	4770      	bx	lr
    b1b8:	10000aa8 	.word	0x10000aa8
    b1bc:	5000c204 	.word	0x5000c204

0000b1c0 <USBHwSetAddress>:
    Sets the USB address.
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    b1c0:	b580      	push	{r7, lr}
    b1c2:	b082      	sub	sp, #8
    b1c4:	af00      	add	r7, sp, #0
    b1c6:	4603      	mov	r3, r0
    b1c8:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    b1ca:	79fb      	ldrb	r3, [r7, #7]
    b1cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b1d0:	b2db      	uxtb	r3, r3
    b1d2:	b29b      	uxth	r3, r3
    b1d4:	20d0      	movs	r0, #208	; 0xd0
    b1d6:	4619      	mov	r1, r3
    b1d8:	f7ff ff1a 	bl	b010 <USBHwCmdWrite>
}
    b1dc:	3708      	adds	r7, #8
    b1de:	46bd      	mov	sp, r7
    b1e0:	bd80      	pop	{r7, pc}
    b1e2:	bf00      	nop

0000b1e4 <USBHwConnect>:
    Connects or disconnects from the USB bus
        
    @param [in] fConnect    If TRUE, connect, otherwise disconnect
 */
void USBHwConnect(BOOL fConnect)
{
    b1e4:	b580      	push	{r7, lr}
    b1e6:	b082      	sub	sp, #8
    b1e8:	af00      	add	r7, sp, #0
    b1ea:	6078      	str	r0, [r7, #4]
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    b1ec:	687b      	ldr	r3, [r7, #4]
    b1ee:	2b00      	cmp	r3, #0
    b1f0:	bf14      	ite	ne
    b1f2:	2301      	movne	r3, #1
    b1f4:	2300      	moveq	r3, #0
    b1f6:	b2db      	uxtb	r3, r3
    b1f8:	b29b      	uxth	r3, r3
    b1fa:	20fe      	movs	r0, #254	; 0xfe
    b1fc:	4619      	mov	r1, r3
    b1fe:	f7ff ff07 	bl	b010 <USBHwCmdWrite>
}
    b202:	3708      	adds	r7, #8
    b204:	46bd      	mov	sp, r7
    b206:	bd80      	pop	{r7, pc}

0000b208 <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    b208:	b580      	push	{r7, lr}
    b20a:	b082      	sub	sp, #8
    b20c:	af00      	add	r7, sp, #0
    b20e:	4603      	mov	r3, r0
    b210:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    b212:	79fb      	ldrb	r3, [r7, #7]
    b214:	b29b      	uxth	r3, r3
    b216:	20f3      	movs	r0, #243	; 0xf3
    b218:	4619      	mov	r1, r3
    b21a:	f7ff fef9 	bl	b010 <USBHwCmdWrite>
}
    b21e:	3708      	adds	r7, #8
    b220:	46bd      	mov	sp, r7
    b222:	bd80      	pop	{r7, pc}

0000b224 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    b224:	b580      	push	{r7, lr}
    b226:	b084      	sub	sp, #16
    b228:	af00      	add	r7, sp, #0
    b22a:	4603      	mov	r3, r0
    b22c:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    b22e:	79fb      	ldrb	r3, [r7, #7]
    b230:	f003 030f 	and.w	r3, r3, #15
    b234:	005b      	lsls	r3, r3, #1
    b236:	79fa      	ldrb	r2, [r7, #7]
    b238:	09d2      	lsrs	r2, r2, #7
    b23a:	b2d2      	uxtb	r2, r2
    b23c:	4313      	orrs	r3, r2
    b23e:	60fb      	str	r3, [r7, #12]

    return USBHwCmdRead(CMD_EP_SELECT | idx);
    b240:	68fb      	ldr	r3, [r7, #12]
    b242:	b2db      	uxtb	r3, r3
    b244:	4618      	mov	r0, r3
    b246:	f7ff fefd 	bl	b044 <USBHwCmdRead>
    b24a:	4603      	mov	r3, r0
}
    b24c:	4618      	mov	r0, r3
    b24e:	3710      	adds	r7, #16
    b250:	46bd      	mov	sp, r7
    b252:	bd80      	pop	{r7, pc}

0000b254 <USBHwEPStall>:
        
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    b254:	b580      	push	{r7, lr}
    b256:	b084      	sub	sp, #16
    b258:	af00      	add	r7, sp, #0
    b25a:	4603      	mov	r3, r0
    b25c:	6039      	str	r1, [r7, #0]
    b25e:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    b260:	79fb      	ldrb	r3, [r7, #7]
    b262:	f003 030f 	and.w	r3, r3, #15
    b266:	005b      	lsls	r3, r3, #1
    b268:	79fa      	ldrb	r2, [r7, #7]
    b26a:	09d2      	lsrs	r2, r2, #7
    b26c:	b2d2      	uxtb	r2, r2
    b26e:	4313      	orrs	r3, r2
    b270:	60fb      	str	r3, [r7, #12]

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    b272:	68fb      	ldr	r3, [r7, #12]
    b274:	b2db      	uxtb	r3, r3
    b276:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b27a:	b2db      	uxtb	r3, r3
    b27c:	b2da      	uxtb	r2, r3
    b27e:	683b      	ldr	r3, [r7, #0]
    b280:	2b00      	cmp	r3, #0
    b282:	bf14      	ite	ne
    b284:	2301      	movne	r3, #1
    b286:	2300      	moveq	r3, #0
    b288:	b2db      	uxtb	r3, r3
    b28a:	b29b      	uxth	r3, r3
    b28c:	4610      	mov	r0, r2
    b28e:	4619      	mov	r1, r3
    b290:	f7ff febe 	bl	b010 <USBHwCmdWrite>
}
    b294:	3710      	adds	r7, #16
    b296:	46bd      	mov	sp, r7
    b298:	bd80      	pop	{r7, pc}
    b29a:	bf00      	nop

0000b29c <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    b29c:	b580      	push	{r7, lr}
    b29e:	b086      	sub	sp, #24
    b2a0:	af00      	add	r7, sp, #0
    b2a2:	4603      	mov	r3, r0
    b2a4:	60b9      	str	r1, [r7, #8]
    b2a6:	607a      	str	r2, [r7, #4]
    b2a8:	73fb      	strb	r3, [r7, #15]
    U32 idx;
    
    idx = EP2IDX(bEP);
    b2aa:	7bfb      	ldrb	r3, [r7, #15]
    b2ac:	f003 030f 	and.w	r3, r3, #15
    b2b0:	005b      	lsls	r3, r3, #1
    b2b2:	7bfa      	ldrb	r2, [r7, #15]
    b2b4:	09d2      	lsrs	r2, r2, #7
    b2b6:	b2d2      	uxtb	r2, r2
    b2b8:	4313      	orrs	r3, r2
    b2ba:	617b      	str	r3, [r7, #20]
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    b2bc:	4a1b      	ldr	r2, [pc, #108]	; (b32c <USBHwEPWrite+0x90>)
    b2be:	7bfb      	ldrb	r3, [r7, #15]
    b2c0:	f003 030f 	and.w	r3, r3, #15
    b2c4:	009b      	lsls	r3, r3, #2
    b2c6:	f043 0302 	orr.w	r3, r3, #2
    b2ca:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    b2cc:	4a18      	ldr	r2, [pc, #96]	; (b330 <USBHwEPWrite+0x94>)
    b2ce:	687b      	ldr	r3, [r7, #4]
    b2d0:	6013      	str	r3, [r2, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    b2d2:	e015      	b.n	b300 <USBHwEPWrite+0x64>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    b2d4:	4917      	ldr	r1, [pc, #92]	; (b334 <USBHwEPWrite+0x98>)
    b2d6:	68bb      	ldr	r3, [r7, #8]
    b2d8:	3303      	adds	r3, #3
    b2da:	781b      	ldrb	r3, [r3, #0]
    b2dc:	061a      	lsls	r2, r3, #24
    b2de:	68bb      	ldr	r3, [r7, #8]
    b2e0:	3302      	adds	r3, #2
    b2e2:	781b      	ldrb	r3, [r3, #0]
    b2e4:	041b      	lsls	r3, r3, #16
    b2e6:	431a      	orrs	r2, r3
    b2e8:	68bb      	ldr	r3, [r7, #8]
    b2ea:	3301      	adds	r3, #1
    b2ec:	781b      	ldrb	r3, [r3, #0]
    b2ee:	021b      	lsls	r3, r3, #8
    b2f0:	4313      	orrs	r3, r2
    b2f2:	68ba      	ldr	r2, [r7, #8]
    b2f4:	7812      	ldrb	r2, [r2, #0]
    b2f6:	4313      	orrs	r3, r2
    b2f8:	600b      	str	r3, [r1, #0]
        pbBuf += 4;
    b2fa:	68bb      	ldr	r3, [r7, #8]
    b2fc:	3304      	adds	r3, #4
    b2fe:	60bb      	str	r3, [r7, #8]
    
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
    b300:	4b0a      	ldr	r3, [pc, #40]	; (b32c <USBHwEPWrite+0x90>)
    b302:	681b      	ldr	r3, [r3, #0]
    b304:	f003 0302 	and.w	r3, r3, #2
    b308:	2b00      	cmp	r3, #0
    b30a:	d1e3      	bne.n	b2d4 <USBHwEPWrite+0x38>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
        pbBuf += 4;
    }

    USBCtrl = 0;
    b30c:	4b07      	ldr	r3, [pc, #28]	; (b32c <USBHwEPWrite+0x90>)
    b30e:	2200      	movs	r2, #0
    b310:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    b312:	697b      	ldr	r3, [r7, #20]
    b314:	b2db      	uxtb	r3, r3
    b316:	4618      	mov	r0, r3
    b318:	f7ff fe62 	bl	afe0 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    b31c:	20fa      	movs	r0, #250	; 0xfa
    b31e:	f7ff fe5f 	bl	afe0 <USBHwCmd>
    
    return iLen;
    b322:	687b      	ldr	r3, [r7, #4]
}
    b324:	4618      	mov	r0, r3
    b326:	3718      	adds	r7, #24
    b328:	46bd      	mov	sp, r7
    b32a:	bd80      	pop	{r7, pc}
    b32c:	5000c228 	.word	0x5000c228
    b330:	5000c224 	.word	0x5000c224
    b334:	5000c21c 	.word	0x5000c21c

0000b338 <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    b338:	b580      	push	{r7, lr}
    b33a:	b088      	sub	sp, #32
    b33c:	af00      	add	r7, sp, #0
    b33e:	4603      	mov	r3, r0
    b340:	60b9      	str	r1, [r7, #8]
    b342:	607a      	str	r2, [r7, #4]
    b344:	73fb      	strb	r3, [r7, #15]
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    b346:	7bfb      	ldrb	r3, [r7, #15]
    b348:	f003 030f 	and.w	r3, r3, #15
    b34c:	005b      	lsls	r3, r3, #1
    b34e:	7bfa      	ldrb	r2, [r7, #15]
    b350:	09d2      	lsrs	r2, r2, #7
    b352:	b2d2      	uxtb	r2, r2
    b354:	4313      	orrs	r3, r2
    b356:	617b      	str	r3, [r7, #20]
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    b358:	4a27      	ldr	r2, [pc, #156]	; (b3f8 <USBHwEPRead+0xc0>)
    b35a:	7bfb      	ldrb	r3, [r7, #15]
    b35c:	f003 030f 	and.w	r3, r3, #15
    b360:	009b      	lsls	r3, r3, #2
    b362:	f043 0301 	orr.w	r3, r3, #1
    b366:	6013      	str	r3, [r2, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    b368:	4b24      	ldr	r3, [pc, #144]	; (b3fc <USBHwEPRead+0xc4>)
    b36a:	681b      	ldr	r3, [r3, #0]
    b36c:	613b      	str	r3, [r7, #16]
    } while ((dwLen & PKT_RDY) == 0);
    b36e:	693b      	ldr	r3, [r7, #16]
    b370:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    b374:	2b00      	cmp	r3, #0
    b376:	d0f7      	beq.n	b368 <USBHwEPRead+0x30>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    b378:	693b      	ldr	r3, [r7, #16]
    b37a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    b37e:	2b00      	cmp	r3, #0
    b380:	d102      	bne.n	b388 <USBHwEPRead+0x50>
        return -1;
    b382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    b386:	e033      	b.n	b3f0 <USBHwEPRead+0xb8>
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    b388:	693b      	ldr	r3, [r7, #16]
    b38a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    b38e:	613b      	str	r3, [r7, #16]
    
    // get data
    dwData = 0;
    b390:	2300      	movs	r3, #0
    b392:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < dwLen; i++) {
    b394:	2300      	movs	r3, #0
    b396:	61fb      	str	r3, [r7, #28]
    b398:	e01a      	b.n	b3d0 <USBHwEPRead+0x98>
        if ((i % 4) == 0) {
    b39a:	69fb      	ldr	r3, [r7, #28]
    b39c:	f003 0303 	and.w	r3, r3, #3
    b3a0:	2b00      	cmp	r3, #0
    b3a2:	d102      	bne.n	b3aa <USBHwEPRead+0x72>
            dwData = USBRxData;
    b3a4:	4b16      	ldr	r3, [pc, #88]	; (b400 <USBHwEPRead+0xc8>)
    b3a6:	681b      	ldr	r3, [r3, #0]
    b3a8:	61bb      	str	r3, [r7, #24]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    b3aa:	68bb      	ldr	r3, [r7, #8]
    b3ac:	2b00      	cmp	r3, #0
    b3ae:	d009      	beq.n	b3c4 <USBHwEPRead+0x8c>
    b3b0:	69fa      	ldr	r2, [r7, #28]
    b3b2:	687b      	ldr	r3, [r7, #4]
    b3b4:	429a      	cmp	r2, r3
    b3b6:	d205      	bcs.n	b3c4 <USBHwEPRead+0x8c>
            pbBuf[i] = dwData & 0xFF;
    b3b8:	68ba      	ldr	r2, [r7, #8]
    b3ba:	69fb      	ldr	r3, [r7, #28]
    b3bc:	4413      	add	r3, r2
    b3be:	69ba      	ldr	r2, [r7, #24]
    b3c0:	b2d2      	uxtb	r2, r2
    b3c2:	701a      	strb	r2, [r3, #0]
        }
        dwData >>= 8;
    b3c4:	69bb      	ldr	r3, [r7, #24]
    b3c6:	0a1b      	lsrs	r3, r3, #8
    b3c8:	61bb      	str	r3, [r7, #24]
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    b3ca:	69fb      	ldr	r3, [r7, #28]
    b3cc:	3301      	adds	r3, #1
    b3ce:	61fb      	str	r3, [r7, #28]
    b3d0:	69fa      	ldr	r2, [r7, #28]
    b3d2:	693b      	ldr	r3, [r7, #16]
    b3d4:	429a      	cmp	r2, r3
    b3d6:	d3e0      	bcc.n	b39a <USBHwEPRead+0x62>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    b3d8:	4b07      	ldr	r3, [pc, #28]	; (b3f8 <USBHwEPRead+0xc0>)
    b3da:	2200      	movs	r2, #0
    b3dc:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    b3de:	697b      	ldr	r3, [r7, #20]
    b3e0:	b2db      	uxtb	r3, r3
    b3e2:	4618      	mov	r0, r3
    b3e4:	f7ff fdfc 	bl	afe0 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    b3e8:	20f2      	movs	r0, #242	; 0xf2
    b3ea:	f7ff fdf9 	bl	afe0 <USBHwCmd>
    
    return dwLen;
    b3ee:	693b      	ldr	r3, [r7, #16]
}
    b3f0:	4618      	mov	r0, r3
    b3f2:	3720      	adds	r7, #32
    b3f4:	46bd      	mov	sp, r7
    b3f6:	bd80      	pop	{r7, pc}
    b3f8:	5000c228 	.word	0x5000c228
    b3fc:	5000c220 	.word	0x5000c220
    b400:	5000c218 	.word	0x5000c218

0000b404 <USBHwConfigDevice>:
    'configured' bit is set in the device status register.
        
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    b404:	b580      	push	{r7, lr}
    b406:	b082      	sub	sp, #8
    b408:	af00      	add	r7, sp, #0
    b40a:	6078      	str	r0, [r7, #4]
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    b40c:	687b      	ldr	r3, [r7, #4]
    b40e:	2b00      	cmp	r3, #0
    b410:	bf14      	ite	ne
    b412:	2301      	movne	r3, #1
    b414:	2300      	moveq	r3, #0
    b416:	b2db      	uxtb	r3, r3
    b418:	b29b      	uxth	r3, r3
    b41a:	20d8      	movs	r0, #216	; 0xd8
    b41c:	4619      	mov	r1, r3
    b41e:	f7ff fdf7 	bl	b010 <USBHwCmdWrite>
}
    b422:	3708      	adds	r7, #8
    b424:	46bd      	mov	sp, r7
    b426:	bd80      	pop	{r7, pc}

0000b428 <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    b428:	b580      	push	{r7, lr}
    b42a:	b086      	sub	sp, #24
    b42c:	af00      	add	r7, sp, #0

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    b42e:	4b5b      	ldr	r3, [pc, #364]	; (b59c <USBHwISR+0x174>)
    b430:	681b      	ldr	r3, [r3, #0]
    b432:	613b      	str	r3, [r7, #16]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    b434:	693b      	ldr	r3, [r7, #16]
    b436:	f003 0301 	and.w	r3, r3, #1
    b43a:	2b00      	cmp	r3, #0
    b43c:	d010      	beq.n	b460 <USBHwISR+0x38>
        // clear int
        USBDevIntClr = FRAME;
    b43e:	4b58      	ldr	r3, [pc, #352]	; (b5a0 <USBHwISR+0x178>)
    b440:	2201      	movs	r2, #1
    b442:	601a      	str	r2, [r3, #0]
        // call handler
        if (_pfnFrameHandler != NULL) {
    b444:	4b57      	ldr	r3, [pc, #348]	; (b5a4 <USBHwISR+0x17c>)
    b446:	681b      	ldr	r3, [r3, #0]
    b448:	2b00      	cmp	r3, #0
    b44a:	d009      	beq.n	b460 <USBHwISR+0x38>
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
    b44c:	20f5      	movs	r0, #245	; 0xf5
    b44e:	f7ff fdf9 	bl	b044 <USBHwCmdRead>
    b452:	4603      	mov	r3, r0
    b454:	81fb      	strh	r3, [r7, #14]
            _pfnFrameHandler(wFrame);
    b456:	4b53      	ldr	r3, [pc, #332]	; (b5a4 <USBHwISR+0x17c>)
    b458:	681b      	ldr	r3, [r3, #0]
    b45a:	89fa      	ldrh	r2, [r7, #14]
    b45c:	4610      	mov	r0, r2
    b45e:	4798      	blx	r3
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    b460:	693b      	ldr	r3, [r7, #16]
    b462:	f003 0308 	and.w	r3, r3, #8
    b466:	2b00      	cmp	r3, #0
    b468:	d02b      	beq.n	b4c2 <USBHwISR+0x9a>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    b46a:	4b4d      	ldr	r3, [pc, #308]	; (b5a0 <USBHwISR+0x178>)
    b46c:	2208      	movs	r2, #8
    b46e:	601a      	str	r2, [r3, #0]
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
    b470:	20fe      	movs	r0, #254	; 0xfe
    b472:	f7ff fde7 	bl	b044 <USBHwCmdRead>
    b476:	4603      	mov	r3, r0
    b478:	737b      	strb	r3, [r7, #13]
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    b47a:	7b7b      	ldrb	r3, [r7, #13]
    b47c:	f003 031a 	and.w	r3, r3, #26
    b480:	2b00      	cmp	r3, #0
    b482:	d01e      	beq.n	b4c2 <USBHwISR+0x9a>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
    b484:	7b7b      	ldrb	r3, [r7, #13]
    b486:	f003 0301 	and.w	r3, r3, #1
    b48a:	2b00      	cmp	r3, #0
    b48c:	bf14      	ite	ne
    b48e:	2301      	movne	r3, #1
    b490:	2300      	moveq	r3, #0
    b492:	b2db      	uxtb	r3, r3
    b494:	b2da      	uxtb	r2, r3
    b496:	7b7b      	ldrb	r3, [r7, #13]
    b498:	f003 0304 	and.w	r3, r3, #4
    b49c:	b2db      	uxtb	r3, r3
    b49e:	4313      	orrs	r3, r2
    b4a0:	b2da      	uxtb	r2, r3
    b4a2:	7b7b      	ldrb	r3, [r7, #13]
    b4a4:	f003 0310 	and.w	r3, r3, #16
    b4a8:	b2db      	uxtb	r3, r3
    b4aa:	4313      	orrs	r3, r2
    b4ac:	b2db      	uxtb	r3, r3
    b4ae:	733b      	strb	r3, [r7, #12]
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    b4b0:	4b3d      	ldr	r3, [pc, #244]	; (b5a8 <USBHwISR+0x180>)
    b4b2:	681b      	ldr	r3, [r3, #0]
    b4b4:	2b00      	cmp	r3, #0
    b4b6:	d004      	beq.n	b4c2 <USBHwISR+0x9a>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    b4b8:	4b3b      	ldr	r3, [pc, #236]	; (b5a8 <USBHwISR+0x180>)
    b4ba:	681b      	ldr	r3, [r3, #0]
    b4bc:	7b3a      	ldrb	r2, [r7, #12]
    b4be:	4610      	mov	r0, r2
    b4c0:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    b4c2:	693b      	ldr	r3, [r7, #16]
    b4c4:	f003 0304 	and.w	r3, r3, #4
    b4c8:	2b00      	cmp	r3, #0
    b4ca:	d063      	beq.n	b594 <USBHwISR+0x16c>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    b4cc:	4b34      	ldr	r3, [pc, #208]	; (b5a0 <USBHwISR+0x178>)
    b4ce:	2204      	movs	r2, #4
    b4d0:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    b4d2:	2300      	movs	r3, #0
    b4d4:	617b      	str	r3, [r7, #20]
    b4d6:	e05a      	b.n	b58e <USBHwISR+0x166>
            dwIntBit = (1 << i);
    b4d8:	2201      	movs	r2, #1
    b4da:	697b      	ldr	r3, [r7, #20]
    b4dc:	fa02 f303 	lsl.w	r3, r2, r3
    b4e0:	60bb      	str	r3, [r7, #8]
            if (USBEpIntSt & dwIntBit) {
    b4e2:	4b32      	ldr	r3, [pc, #200]	; (b5ac <USBHwISR+0x184>)
    b4e4:	681a      	ldr	r2, [r3, #0]
    b4e6:	68bb      	ldr	r3, [r7, #8]
    b4e8:	4013      	ands	r3, r2
    b4ea:	2b00      	cmp	r3, #0
    b4ec:	d04c      	beq.n	b588 <USBHwISR+0x160>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    b4ee:	4a30      	ldr	r2, [pc, #192]	; (b5b0 <USBHwISR+0x188>)
    b4f0:	68bb      	ldr	r3, [r7, #8]
    b4f2:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    b4f4:	2020      	movs	r0, #32
    b4f6:	f7ff fd5b 	bl	afb0 <Wait4DevInt>
                bEPStat = USBCmdData;
    b4fa:	4b2e      	ldr	r3, [pc, #184]	; (b5b4 <USBHwISR+0x18c>)
    b4fc:	681b      	ldr	r3, [r3, #0]
    b4fe:	71fb      	strb	r3, [r7, #7]
                // convert EP pipe stat into something HW independent
                bStat = ((bEPStat & EPSTAT_FE) ? EP_STATUS_DATA : 0) |
    b500:	79fb      	ldrb	r3, [r7, #7]
    b502:	f003 0301 	and.w	r3, r3, #1
    b506:	2b00      	cmp	r3, #0
    b508:	bf14      	ite	ne
    b50a:	2301      	movne	r3, #1
    b50c:	2300      	moveq	r3, #0
    b50e:	b2db      	uxtb	r3, r3
    b510:	b2da      	uxtb	r2, r3
    b512:	79fb      	ldrb	r3, [r7, #7]
    b514:	f003 0302 	and.w	r3, r3, #2
    b518:	b2db      	uxtb	r3, r3
    b51a:	4313      	orrs	r3, r2
    b51c:	b2da      	uxtb	r2, r3
    b51e:	79fb      	ldrb	r3, [r7, #7]
    b520:	f003 0304 	and.w	r3, r3, #4
    b524:	b2db      	uxtb	r3, r3
    b526:	4313      	orrs	r3, r2
    b528:	b2da      	uxtb	r2, r3
    b52a:	79fb      	ldrb	r3, [r7, #7]
    b52c:	f003 0310 	and.w	r3, r3, #16
    b530:	b2db      	uxtb	r3, r3
    b532:	4313      	orrs	r3, r2
    b534:	b2da      	uxtb	r2, r3
    b536:	79fb      	ldrb	r3, [r7, #7]
    b538:	f003 0308 	and.w	r3, r3, #8
    b53c:	b2db      	uxtb	r3, r3
    b53e:	4313      	orrs	r3, r2
    b540:	b2db      	uxtb	r3, r3
    b542:	733b      	strb	r3, [r7, #12]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    b544:	697b      	ldr	r3, [r7, #20]
    b546:	0fda      	lsrs	r2, r3, #31
    b548:	4413      	add	r3, r2
    b54a:	105b      	asrs	r3, r3, #1
    b54c:	461a      	mov	r2, r3
    b54e:	4b1a      	ldr	r3, [pc, #104]	; (b5b8 <USBHwISR+0x190>)
    b550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b554:	2b00      	cmp	r3, #0
    b556:	d017      	beq.n	b588 <USBHwISR+0x160>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    b558:	697b      	ldr	r3, [r7, #20]
    b55a:	0fda      	lsrs	r2, r3, #31
    b55c:	4413      	add	r3, r2
    b55e:	105b      	asrs	r3, r3, #1
    b560:	461a      	mov	r2, r3
    b562:	4b15      	ldr	r3, [pc, #84]	; (b5b8 <USBHwISR+0x190>)
    b564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    b568:	697a      	ldr	r2, [r7, #20]
    b56a:	01d2      	lsls	r2, r2, #7
    b56c:	b2d1      	uxtb	r1, r2
    b56e:	697a      	ldr	r2, [r7, #20]
    b570:	1052      	asrs	r2, r2, #1
    b572:	b2d2      	uxtb	r2, r2
    b574:	f002 020f 	and.w	r2, r2, #15
    b578:	b2d2      	uxtb	r2, r2
    b57a:	430a      	orrs	r2, r1
    b57c:	b2d2      	uxtb	r2, r2
    b57e:	b2d1      	uxtb	r1, r2
    b580:	7b3a      	ldrb	r2, [r7, #12]
    b582:	4608      	mov	r0, r1
    b584:	4611      	mov	r1, r2
    b586:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    b588:	697b      	ldr	r3, [r7, #20]
    b58a:	3301      	adds	r3, #1
    b58c:	617b      	str	r3, [r7, #20]
    b58e:	697b      	ldr	r3, [r7, #20]
    b590:	2b1f      	cmp	r3, #31
    b592:	dda1      	ble.n	b4d8 <USBHwISR+0xb0>
            }
        }
    }
    
DEBUG_LED_OFF(9);       
}
    b594:	3718      	adds	r7, #24
    b596:	46bd      	mov	sp, r7
    b598:	bd80      	pop	{r7, pc}
    b59a:	bf00      	nop
    b59c:	5000c200 	.word	0x5000c200
    b5a0:	5000c208 	.word	0x5000c208
    b5a4:	10000aec 	.word	0x10000aec
    b5a8:	10000aa8 	.word	0x10000aa8
    b5ac:	5000c230 	.word	0x5000c230
    b5b0:	5000c238 	.word	0x5000c238
    b5b4:	5000c214 	.word	0x5000c214
    b5b8:	10000aac 	.word	0x10000aac

0000b5bc <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    b5bc:	b580      	push	{r7, lr}
    b5be:	af00      	add	r7, sp, #0
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    b5c0:	4a2d      	ldr	r2, [pc, #180]	; (b678 <USBHwInit+0xbc>)
    b5c2:	4b2d      	ldr	r3, [pc, #180]	; (b678 <USBHwInit+0xbc>)
    b5c4:	681b      	ldr	r3, [r3, #0]
    b5c6:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    b5ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    b5ce:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    b5d0:	4a2a      	ldr	r2, [pc, #168]	; (b67c <USBHwInit+0xc0>)
    b5d2:	4b2a      	ldr	r3, [pc, #168]	; (b67c <USBHwInit+0xc0>)
    b5d4:	681b      	ldr	r3, [r3, #0]
    b5d6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    b5da:	f043 0310 	orr.w	r3, r3, #16
    b5de:	6013      	str	r3, [r2, #0]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    b5e0:	4a26      	ldr	r2, [pc, #152]	; (b67c <USBHwInit+0xc0>)
    b5e2:	4b26      	ldr	r3, [pc, #152]	; (b67c <USBHwInit+0xc0>)
    b5e4:	681b      	ldr	r3, [r3, #0]
    b5e6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    b5ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    b5ee:	6013      	str	r3, [r2, #0]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    b5f0:	4a23      	ldr	r2, [pc, #140]	; (b680 <USBHwInit+0xc4>)
    b5f2:	4b23      	ldr	r3, [pc, #140]	; (b680 <USBHwInit+0xc4>)
    b5f4:	681b      	ldr	r3, [r3, #0]
    b5f6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    b5fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    b5fe:	6013      	str	r3, [r2, #0]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    b600:	4a1f      	ldr	r2, [pc, #124]	; (b680 <USBHwInit+0xc4>)
    b602:	4b1f      	ldr	r3, [pc, #124]	; (b680 <USBHwInit+0xc4>)
    b604:	681b      	ldr	r3, [r3, #0]
    b606:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    b60a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    b60e:	6013      	str	r3, [r2, #0]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    b610:	4a1c      	ldr	r2, [pc, #112]	; (b684 <USBHwInit+0xc8>)
    b612:	4b1c      	ldr	r3, [pc, #112]	; (b684 <USBHwInit+0xc8>)
    b614:	681b      	ldr	r3, [r3, #0]
    b616:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b61a:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    b61c:	4a1a      	ldr	r2, [pc, #104]	; (b688 <USBHwInit+0xcc>)
    b61e:	4b1a      	ldr	r3, [pc, #104]	; (b688 <USBHwInit+0xcc>)
    b620:	681b      	ldr	r3, [r3, #0]
    b622:	f043 0312 	orr.w	r3, r3, #18
    b626:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    b628:	bf00      	nop
    b62a:	4b18      	ldr	r3, [pc, #96]	; (b68c <USBHwInit+0xd0>)
    b62c:	681b      	ldr	r3, [r3, #0]
    b62e:	f003 0302 	and.w	r3, r3, #2
    b632:	2b00      	cmp	r3, #0
    b634:	d0f9      	beq.n	b62a <USBHwInit+0x6e>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    b636:	bf00      	nop
    b638:	4b14      	ldr	r3, [pc, #80]	; (b68c <USBHwInit+0xd0>)
    b63a:	681b      	ldr	r3, [r3, #0]
    b63c:	f003 0310 	and.w	r3, r3, #16
    b640:	2b00      	cmp	r3, #0
    b642:	d0f9      	beq.n	b638 <USBHwInit+0x7c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    b644:	4b12      	ldr	r3, [pc, #72]	; (b690 <USBHwInit+0xd4>)
    b646:	2200      	movs	r2, #0
    b648:	601a      	str	r2, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    b64a:	4b12      	ldr	r3, [pc, #72]	; (b694 <USBHwInit+0xd8>)
    b64c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b650:	601a      	str	r2, [r3, #0]
    USBDevIntPri = 0;
    b652:	4b11      	ldr	r3, [pc, #68]	; (b698 <USBHwInit+0xdc>)
    b654:	2200      	movs	r2, #0
    b656:	601a      	str	r2, [r3, #0]

    USBEpIntEn = 0;
    b658:	4b10      	ldr	r3, [pc, #64]	; (b69c <USBHwInit+0xe0>)
    b65a:	2200      	movs	r2, #0
    b65c:	601a      	str	r2, [r3, #0]
    USBEpIntClr = 0xFFFFFFFF;
    b65e:	4b10      	ldr	r3, [pc, #64]	; (b6a0 <USBHwInit+0xe4>)
    b660:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    b664:	601a      	str	r2, [r3, #0]
    USBEpIntPri = 0;
    b666:	4b0f      	ldr	r3, [pc, #60]	; (b6a4 <USBHwInit+0xe8>)
    b668:	2200      	movs	r2, #0
    b66a:	601a      	str	r2, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    b66c:	2000      	movs	r0, #0
    b66e:	f7ff fdcb 	bl	b208 <USBHwNakIntEnable>
    // init debug leds
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
    b672:	2301      	movs	r3, #1
}
    b674:	4618      	mov	r0, r3
    b676:	bd80      	pop	{r7, pc}
    b678:	4002c010 	.word	0x4002c010
    b67c:	4002c00c 	.word	0x4002c00c
    b680:	4002c004 	.word	0x4002c004
    b684:	400fc0c4 	.word	0x400fc0c4
    b688:	5000cff4 	.word	0x5000cff4
    b68c:	5000cff8 	.word	0x5000cff8
    b690:	5000c204 	.word	0x5000c204
    b694:	5000c208 	.word	0x5000c208
    b698:	5000c22c 	.word	0x5000c22c
    b69c:	5000c234 	.word	0x5000c234
    b6a0:	5000c238 	.word	0x5000c238
    b6a4:	5000c240 	.word	0x5000c240

0000b6a8 <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    b6a8:	b480      	push	{r7}
    b6aa:	b089      	sub	sp, #36	; 0x24
    b6ac:	af00      	add	r7, sp, #0
    b6ae:	60f8      	str	r0, [r7, #12]
    b6b0:	60b9      	str	r1, [r7, #8]
    b6b2:	607a      	str	r2, [r7, #4]
    b6b4:	603b      	str	r3, [r7, #0]
	if(bMsVendorIndex == 0)	{
    b6b6:	4b2d      	ldr	r3, [pc, #180]	; (b76c <USBFilterOsVendorMessage+0xc4>)
    b6b8:	781b      	ldrb	r3, [r3, #0]
    b6ba:	2b00      	cmp	r3, #0
    b6bc:	d101      	bne.n	b6c2 <USBFilterOsVendorMessage+0x1a>
		// Feature is disabled.
		return FALSE;
    b6be:	2300      	movs	r3, #0
    b6c0:	e04e      	b.n	b760 <USBFilterOsVendorMessage+0xb8>
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    b6c2:	68fb      	ldr	r3, [r7, #12]
    b6c4:	785a      	ldrb	r2, [r3, #1]
    b6c6:	4b29      	ldr	r3, [pc, #164]	; (b76c <USBFilterOsVendorMessage+0xc4>)
    b6c8:	781b      	ldrb	r3, [r3, #0]
    b6ca:	429a      	cmp	r2, r3
    b6cc:	d147      	bne.n	b75e <USBFilterOsVendorMessage+0xb6>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    b6ce:	68bb      	ldr	r3, [r7, #8]
    b6d0:	2200      	movs	r2, #0
    b6d2:	601a      	str	r2, [r3, #0]
	
		int iRequestLength = pSetup->wLength;
    b6d4:	68fb      	ldr	r3, [r7, #12]
    b6d6:	88db      	ldrh	r3, [r3, #6]
    b6d8:	61fb      	str	r3, [r7, #28]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
    b6da:	68fb      	ldr	r3, [r7, #12]
    b6dc:	885b      	ldrh	r3, [r3, #2]
    b6de:	76fb      	strb	r3, [r7, #27]
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    b6e0:	68fb      	ldr	r3, [r7, #12]
    b6e2:	885b      	ldrh	r3, [r3, #2]
    b6e4:	0a1b      	lsrs	r3, r3, #8
    b6e6:	b29b      	uxth	r3, r3
    b6e8:	76bb      	strb	r3, [r7, #26]
	
		switch (pSetup->wIndex) {
    b6ea:	68fb      	ldr	r3, [r7, #12]
    b6ec:	889b      	ldrh	r3, [r3, #4]
    b6ee:	2b04      	cmp	r3, #4
    b6f0:	d002      	beq.n	b6f8 <USBFilterOsVendorMessage+0x50>
    b6f2:	2b05      	cmp	r3, #5
    b6f4:	d007      	beq.n	b706 <USBFilterOsVendorMessage+0x5e>
    b6f6:	e00d      	b.n	b714 <USBFilterOsVendorMessage+0x6c>
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    b6f8:	683b      	ldr	r3, [r7, #0]
    b6fa:	4a1d      	ldr	r2, [pc, #116]	; (b770 <USBFilterOsVendorMessage+0xc8>)
    b6fc:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    b6fe:	687b      	ldr	r3, [r7, #4]
    b700:	2228      	movs	r2, #40	; 0x28
    b702:	601a      	str	r2, [r3, #0]
			break;
    b704:	e008      	b.n	b718 <USBFilterOsVendorMessage+0x70>
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    b706:	683b      	ldr	r3, [r7, #0]
    b708:	4a1a      	ldr	r2, [pc, #104]	; (b774 <USBFilterOsVendorMessage+0xcc>)
    b70a:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    b70c:	687b      	ldr	r3, [r7, #4]
    b70e:	2292      	movs	r2, #146	; 0x92
    b710:	601a      	str	r2, [r3, #0]
			break;
    b712:	e001      	b.n	b718 <USBFilterOsVendorMessage+0x70>

		default:
			return TRUE;
    b714:	2301      	movs	r3, #1
    b716:	e023      	b.n	b760 <USBFilterOsVendorMessage+0xb8>
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    b718:	7ebb      	ldrb	r3, [r7, #26]
    b71a:	041b      	lsls	r3, r3, #16
    b71c:	617b      	str	r3, [r7, #20]
		if (*piLen < iPageOffset) {
    b71e:	687b      	ldr	r3, [r7, #4]
    b720:	681a      	ldr	r2, [r3, #0]
    b722:	697b      	ldr	r3, [r7, #20]
    b724:	429a      	cmp	r2, r3
    b726:	da01      	bge.n	b72c <USBFilterOsVendorMessage+0x84>
			// Not enough data for the requested offset.
			return TRUE;
    b728:	2301      	movs	r3, #1
    b72a:	e019      	b.n	b760 <USBFilterOsVendorMessage+0xb8>
		}
		*ppbData += iPageOffset;
    b72c:	683b      	ldr	r3, [r7, #0]
    b72e:	681a      	ldr	r2, [r3, #0]
    b730:	697b      	ldr	r3, [r7, #20]
    b732:	441a      	add	r2, r3
    b734:	683b      	ldr	r3, [r7, #0]
    b736:	601a      	str	r2, [r3, #0]
		*piLen -= iPageOffset;
    b738:	687b      	ldr	r3, [r7, #4]
    b73a:	681a      	ldr	r2, [r3, #0]
    b73c:	697b      	ldr	r3, [r7, #20]
    b73e:	1ad2      	subs	r2, r2, r3
    b740:	687b      	ldr	r3, [r7, #4]
    b742:	601a      	str	r2, [r3, #0]
		
		if (*piLen > iRequestLength) {
    b744:	687b      	ldr	r3, [r7, #4]
    b746:	681a      	ldr	r2, [r3, #0]
    b748:	69fb      	ldr	r3, [r7, #28]
    b74a:	429a      	cmp	r2, r3
    b74c:	dd02      	ble.n	b754 <USBFilterOsVendorMessage+0xac>
			// Clip data longer than the requested length
			*piLen = iRequestLength;
    b74e:	687b      	ldr	r3, [r7, #4]
    b750:	69fa      	ldr	r2, [r7, #28]
    b752:	601a      	str	r2, [r3, #0]
		}
	
		*pfSuccess = TRUE;
    b754:	68bb      	ldr	r3, [r7, #8]
    b756:	2201      	movs	r2, #1
    b758:	601a      	str	r2, [r3, #0]
		return TRUE;
    b75a:	2301      	movs	r3, #1
    b75c:	e000      	b.n	b760 <USBFilterOsVendorMessage+0xb8>
	}
	
	// These are not the requests you are looking for
	return FALSE;
    b75e:	2300      	movs	r3, #0
}
    b760:	4618      	mov	r0, r3
    b762:	3724      	adds	r7, #36	; 0x24
    b764:	46bd      	mov	sp, r7
    b766:	f85d 7b04 	ldr.w	r7, [sp], #4
    b76a:	4770      	bx	lr
    b76c:	10000afc 	.word	0x10000afc
    b770:	0000d054 	.word	0x0000d054
    b774:	100008cc 	.word	0x100008cc

0000b778 <USBRegisterWinusbInterface>:
	@param [in]		pcInterfaceGuid			ASCII String GUID in curly braces
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
    b778:	b480      	push	{r7}
    b77a:	b087      	sub	sp, #28
    b77c:	af00      	add	r7, sp, #0
    b77e:	4603      	mov	r3, r0
    b780:	6039      	str	r1, [r7, #0]
    b782:	71fb      	strb	r3, [r7, #7]
	bMsVendorIndex = bVendorRequestIndex;
    b784:	4a18      	ldr	r2, [pc, #96]	; (b7e8 <USBRegisterWinusbInterface+0x70>)
    b786:	79fb      	ldrb	r3, [r7, #7]
    b788:	7013      	strb	r3, [r2, #0]
	
	if(!pcInterfaceGuid) {
    b78a:	683b      	ldr	r3, [r7, #0]
    b78c:	2b00      	cmp	r3, #0
    b78e:	d100      	bne.n	b792 <USBRegisterWinusbInterface+0x1a>
		return; // Trust that caller is actually specifying this with nonzero RequestIndex.
    b790:	e024      	b.n	b7dc <USBRegisterWinusbInterface+0x64>
	}
	
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
    b792:	4b16      	ldr	r3, [pc, #88]	; (b7ec <USBRegisterWinusbInterface+0x74>)
    b794:	617b      	str	r3, [r7, #20]
	const int ciMaxLength = 38;
    b796:	2326      	movs	r3, #38	; 0x26
    b798:	60fb      	str	r3, [r7, #12]
	
	for(int i = 0; i < ciMaxLength; i++) {
    b79a:	2300      	movs	r3, #0
    b79c:	613b      	str	r3, [r7, #16]
    b79e:	e012      	b.n	b7c6 <USBRegisterWinusbInterface+0x4e>
		if(!pcInterfaceGuid[i]) break;
    b7a0:	693b      	ldr	r3, [r7, #16]
    b7a2:	683a      	ldr	r2, [r7, #0]
    b7a4:	4413      	add	r3, r2
    b7a6:	781b      	ldrb	r3, [r3, #0]
    b7a8:	2b00      	cmp	r3, #0
    b7aa:	d100      	bne.n	b7ae <USBRegisterWinusbInterface+0x36>
    b7ac:	e00f      	b.n	b7ce <USBRegisterWinusbInterface+0x56>
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    b7ae:	693b      	ldr	r3, [r7, #16]
    b7b0:	683a      	ldr	r2, [r7, #0]
    b7b2:	4413      	add	r3, r2
    b7b4:	781a      	ldrb	r2, [r3, #0]
    b7b6:	697b      	ldr	r3, [r7, #20]
    b7b8:	701a      	strb	r2, [r3, #0]
		pbWriteCursor += 2;
    b7ba:	697b      	ldr	r3, [r7, #20]
    b7bc:	3302      	adds	r3, #2
    b7be:	617b      	str	r3, [r7, #20]
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    b7c0:	693b      	ldr	r3, [r7, #16]
    b7c2:	3301      	adds	r3, #1
    b7c4:	613b      	str	r3, [r7, #16]
    b7c6:	693a      	ldr	r2, [r7, #16]
    b7c8:	68fb      	ldr	r3, [r7, #12]
    b7ca:	429a      	cmp	r2, r3
    b7cc:	dbe8      	blt.n	b7a0 <USBRegisterWinusbInterface+0x28>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    b7ce:	697b      	ldr	r3, [r7, #20]
    b7d0:	2200      	movs	r2, #0
    b7d2:	701a      	strb	r2, [r3, #0]
	pbWriteCursor[2] = 0;
    b7d4:	697b      	ldr	r3, [r7, #20]
    b7d6:	3302      	adds	r3, #2
    b7d8:	2200      	movs	r2, #0
    b7da:	701a      	strb	r2, [r3, #0]
	
}
    b7dc:	371c      	adds	r7, #28
    b7de:	46bd      	mov	sp, r7
    b7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
    b7e4:	4770      	bx	lr
    b7e6:	bf00      	nop
    b7e8:	10000afc 	.word	0x10000afc
    b7ec:	1000090e 	.word	0x1000090e

0000b7f0 <USBGetOsStringDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
    b7f0:	b480      	push	{r7}
    b7f2:	b083      	sub	sp, #12
    b7f4:	af00      	add	r7, sp, #0
    b7f6:	6078      	str	r0, [r7, #4]
    b7f8:	6039      	str	r1, [r7, #0]
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    b7fa:	4b08      	ldr	r3, [pc, #32]	; (b81c <USBGetOsStringDescriptor+0x2c>)
    b7fc:	781a      	ldrb	r2, [r3, #0]
    b7fe:	4b08      	ldr	r3, [pc, #32]	; (b820 <USBGetOsStringDescriptor+0x30>)
    b800:	741a      	strb	r2, [r3, #16]
	
	*ppbData = abOsStringDescriptor;
    b802:	683b      	ldr	r3, [r7, #0]
    b804:	4a06      	ldr	r2, [pc, #24]	; (b820 <USBGetOsStringDescriptor+0x30>)
    b806:	601a      	str	r2, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    b808:	687b      	ldr	r3, [r7, #4]
    b80a:	2212      	movs	r2, #18
    b80c:	601a      	str	r2, [r3, #0]
	return TRUE;
    b80e:	2301      	movs	r3, #1
}
    b810:	4618      	mov	r0, r3
    b812:	370c      	adds	r7, #12
    b814:	46bd      	mov	sp, r7
    b816:	f85d 7b04 	ldr.w	r7, [sp], #4
    b81a:	4770      	bx	lr
    b81c:	10000afc 	.word	0x10000afc
    b820:	100008b8 	.word	0x100008b8

0000b824 <USBRegisterDescriptors>:
	for the device.

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(const U8 *pabDescriptors)
{
    b824:	b480      	push	{r7}
    b826:	b083      	sub	sp, #12
    b828:	af00      	add	r7, sp, #0
    b82a:	6078      	str	r0, [r7, #4]
	pabDescrip = pabDescriptors;
    b82c:	4a03      	ldr	r2, [pc, #12]	; (b83c <USBRegisterDescriptors+0x18>)
    b82e:	687b      	ldr	r3, [r7, #4]
    b830:	6013      	str	r3, [r2, #0]
}
    b832:	370c      	adds	r7, #12
    b834:	46bd      	mov	sp, r7
    b836:	f85d 7b04 	ldr.w	r7, [sp], #4
    b83a:	4770      	bx	lr
    b83c:	10000af8 	.word	0x10000af8

0000b840 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    b840:	b580      	push	{r7, lr}
    b842:	b088      	sub	sp, #32
    b844:	af00      	add	r7, sp, #0
    b846:	60ba      	str	r2, [r7, #8]
    b848:	607b      	str	r3, [r7, #4]
    b84a:	4603      	mov	r3, r0
    b84c:	81fb      	strh	r3, [r7, #14]
    b84e:	460b      	mov	r3, r1
    b850:	81bb      	strh	r3, [r7, #12]
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    b852:	89fb      	ldrh	r3, [r7, #14]
    b854:	0a1b      	lsrs	r3, r3, #8
    b856:	b29b      	uxth	r3, r3
    b858:	75fb      	strb	r3, [r7, #23]
	bIndex = GET_DESC_INDEX(wTypeIndex);
    b85a:	89fb      	ldrh	r3, [r7, #14]
    b85c:	75bb      	strb	r3, [r7, #22]
	
    if (bType == DESC_STRING &&
    b85e:	7dfb      	ldrb	r3, [r7, #23]
    b860:	2b03      	cmp	r3, #3
    b862:	d10b      	bne.n	b87c <USBGetDescriptor+0x3c>
    b864:	7dbb      	ldrb	r3, [r7, #22]
    b866:	2bee      	cmp	r3, #238	; 0xee
    b868:	d108      	bne.n	b87c <USBGetDescriptor+0x3c>
        bIndex == DESC_STRING_OS) {
        
        if (USBGetOsStringDescriptor(piLen, ppbData)) {
    b86a:	68b8      	ldr	r0, [r7, #8]
    b86c:	6879      	ldr	r1, [r7, #4]
    b86e:	f7ff ffbf 	bl	b7f0 <USBGetOsStringDescriptor>
    b872:	4603      	mov	r3, r0
    b874:	2b00      	cmp	r3, #0
    b876:	d001      	beq.n	b87c <USBGetDescriptor+0x3c>
            
            return TRUE;
    b878:	2301      	movs	r3, #1
    b87a:	e036      	b.n	b8ea <USBGetDescriptor+0xaa>
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    b87c:	4b1d      	ldr	r3, [pc, #116]	; (b8f4 <USBGetDescriptor+0xb4>)
    b87e:	681b      	ldr	r3, [r3, #0]
    b880:	61fb      	str	r3, [r7, #28]
	iCurIndex = 0;
    b882:	2300      	movs	r3, #0
    b884:	61bb      	str	r3, [r7, #24]
	
	while (pab[DESC_bLength] != 0) {
    b886:	e02b      	b.n	b8e0 <USBGetDescriptor+0xa0>
		if (pab[DESC_bDescriptorType] == bType) {
    b888:	69fb      	ldr	r3, [r7, #28]
    b88a:	3301      	adds	r3, #1
    b88c:	781b      	ldrb	r3, [r3, #0]
    b88e:	7dfa      	ldrb	r2, [r7, #23]
    b890:	429a      	cmp	r2, r3
    b892:	d11f      	bne.n	b8d4 <USBGetDescriptor+0x94>
			if (iCurIndex == bIndex) {
    b894:	7dba      	ldrb	r2, [r7, #22]
    b896:	69bb      	ldr	r3, [r7, #24]
    b898:	429a      	cmp	r2, r3
    b89a:	d118      	bne.n	b8ce <USBGetDescriptor+0x8e>
				// set data pointer
				*ppbData = pab;
    b89c:	687b      	ldr	r3, [r7, #4]
    b89e:	69fa      	ldr	r2, [r7, #28]
    b8a0:	601a      	str	r2, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    b8a2:	7dfb      	ldrb	r3, [r7, #23]
    b8a4:	2b02      	cmp	r3, #2
    b8a6:	d10b      	bne.n	b8c0 <USBGetDescriptor+0x80>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    b8a8:	69fb      	ldr	r3, [r7, #28]
    b8aa:	3302      	adds	r3, #2
    b8ac:	781b      	ldrb	r3, [r3, #0]
    b8ae:	461a      	mov	r2, r3
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    b8b0:	69fb      	ldr	r3, [r7, #28]
    b8b2:	3303      	adds	r3, #3
    b8b4:	781b      	ldrb	r3, [r3, #0]
    b8b6:	021b      	lsls	r3, r3, #8
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    b8b8:	431a      	orrs	r2, r3
    b8ba:	68bb      	ldr	r3, [r7, #8]
    b8bc:	601a      	str	r2, [r3, #0]
    b8be:	e004      	b.n	b8ca <USBGetDescriptor+0x8a>
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    b8c0:	69fb      	ldr	r3, [r7, #28]
    b8c2:	781b      	ldrb	r3, [r3, #0]
    b8c4:	461a      	mov	r2, r3
    b8c6:	68bb      	ldr	r3, [r7, #8]
    b8c8:	601a      	str	r2, [r3, #0]
				}
				return TRUE;
    b8ca:	2301      	movs	r3, #1
    b8cc:	e00d      	b.n	b8ea <USBGetDescriptor+0xaa>
			}
			iCurIndex++;
    b8ce:	69bb      	ldr	r3, [r7, #24]
    b8d0:	3301      	adds	r3, #1
    b8d2:	61bb      	str	r3, [r7, #24]
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    b8d4:	69fb      	ldr	r3, [r7, #28]
    b8d6:	781b      	ldrb	r3, [r3, #0]
    b8d8:	461a      	mov	r2, r3
    b8da:	69fb      	ldr	r3, [r7, #28]
    b8dc:	4413      	add	r3, r2
    b8de:	61fb      	str	r3, [r7, #28]
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    b8e0:	69fb      	ldr	r3, [r7, #28]
    b8e2:	781b      	ldrb	r3, [r3, #0]
    b8e4:	2b00      	cmp	r3, #0
    b8e6:	d1cf      	bne.n	b888 <USBGetDescriptor+0x48>
		// skip to next descriptor
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
    b8e8:	2300      	movs	r3, #0
}
    b8ea:	4618      	mov	r0, r3
    b8ec:	3720      	adds	r7, #32
    b8ee:	46bd      	mov	sp, r7
    b8f0:	bd80      	pop	{r7, pc}
    b8f2:	bf00      	nop
    b8f4:	10000af8 	.word	0x10000af8

0000b8f8 <USBSetConfiguration>:
	@todo function always returns TRUE, add stricter checking?
	
	@return TRUE if successfully configured, FALSE otherwise
 */
static BOOL USBSetConfiguration(U8 bConfigIndex, U8 bAltSetting)
{
    b8f8:	b580      	push	{r7, lr}
    b8fa:	b086      	sub	sp, #24
    b8fc:	af00      	add	r7, sp, #0
    b8fe:	4603      	mov	r3, r0
    b900:	460a      	mov	r2, r1
    b902:	71fb      	strb	r3, [r7, #7]
    b904:	4613      	mov	r3, r2
    b906:	71bb      	strb	r3, [r7, #6]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    b908:	79fb      	ldrb	r3, [r7, #7]
    b90a:	2b00      	cmp	r3, #0
    b90c:	d103      	bne.n	b916 <USBSetConfiguration+0x1e>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    b90e:	2000      	movs	r0, #0
    b910:	f7ff fd78 	bl	b404 <USBHwConfigDevice>
    b914:	e045      	b.n	b9a2 <USBSetConfiguration+0xaa>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    b916:	4b25      	ldr	r3, [pc, #148]	; (b9ac <USBSetConfiguration+0xb4>)
    b918:	681b      	ldr	r3, [r3, #0]
    b91a:	617b      	str	r3, [r7, #20]
		bCurConfig = 0xFF;
    b91c:	23ff      	movs	r3, #255	; 0xff
    b91e:	74fb      	strb	r3, [r7, #19]
		bCurAltSetting = 0xFF;
    b920:	23ff      	movs	r3, #255	; 0xff
    b922:	74bb      	strb	r3, [r7, #18]

		while (pab[DESC_bLength] != 0) {
    b924:	e036      	b.n	b994 <USBSetConfiguration+0x9c>

			switch (pab[DESC_bDescriptorType]) {
    b926:	697b      	ldr	r3, [r7, #20]
    b928:	3301      	adds	r3, #1
    b92a:	781b      	ldrb	r3, [r3, #0]
    b92c:	2b04      	cmp	r3, #4
    b92e:	d008      	beq.n	b942 <USBSetConfiguration+0x4a>
    b930:	2b05      	cmp	r3, #5
    b932:	d00a      	beq.n	b94a <USBSetConfiguration+0x52>
    b934:	2b02      	cmp	r3, #2
    b936:	d000      	beq.n	b93a <USBSetConfiguration+0x42>
					USBHwEPConfig(bEP, wMaxPktSize);
				}
				break;

			default:
				break;
    b938:	e026      	b.n	b988 <USBSetConfiguration+0x90>

			switch (pab[DESC_bDescriptorType]) {

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    b93a:	697b      	ldr	r3, [r7, #20]
    b93c:	795b      	ldrb	r3, [r3, #5]
    b93e:	74fb      	strb	r3, [r7, #19]
				break;
    b940:	e022      	b.n	b988 <USBSetConfiguration+0x90>

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    b942:	697b      	ldr	r3, [r7, #20]
    b944:	78db      	ldrb	r3, [r3, #3]
    b946:	74bb      	strb	r3, [r7, #18]
				break;
    b948:	e01e      	b.n	b988 <USBSetConfiguration+0x90>

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    b94a:	7cfa      	ldrb	r2, [r7, #19]
    b94c:	79fb      	ldrb	r3, [r7, #7]
    b94e:	429a      	cmp	r2, r3
    b950:	d119      	bne.n	b986 <USBSetConfiguration+0x8e>
    b952:	7cba      	ldrb	r2, [r7, #18]
    b954:	79bb      	ldrb	r3, [r7, #6]
    b956:	429a      	cmp	r2, r3
    b958:	d115      	bne.n	b986 <USBSetConfiguration+0x8e>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
    b95a:	697b      	ldr	r3, [r7, #20]
    b95c:	789b      	ldrb	r3, [r3, #2]
    b95e:	747b      	strb	r3, [r7, #17]
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    b960:	697b      	ldr	r3, [r7, #20]
    b962:	3304      	adds	r3, #4
    b964:	781b      	ldrb	r3, [r3, #0]
    b966:	b29a      	uxth	r2, r3
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    b968:	697b      	ldr	r3, [r7, #20]
    b96a:	3305      	adds	r3, #5
    b96c:	781b      	ldrb	r3, [r3, #0]
    b96e:	021b      	lsls	r3, r3, #8
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    b970:	b29b      	uxth	r3, r3
    b972:	4313      	orrs	r3, r2
    b974:	b29b      	uxth	r3, r3
    b976:	81fb      	strh	r3, [r7, #14]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    b978:	7c7a      	ldrb	r2, [r7, #17]
    b97a:	89fb      	ldrh	r3, [r7, #14]
    b97c:	4610      	mov	r0, r2
    b97e:	4619      	mov	r1, r3
    b980:	f7ff fbb8 	bl	b0f4 <USBHwEPConfig>
				}
				break;
    b984:	e7ff      	b.n	b986 <USBSetConfiguration+0x8e>
    b986:	bf00      	nop

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    b988:	697b      	ldr	r3, [r7, #20]
    b98a:	781b      	ldrb	r3, [r3, #0]
    b98c:	461a      	mov	r2, r3
    b98e:	697b      	ldr	r3, [r7, #20]
    b990:	4413      	add	r3, r2
    b992:	617b      	str	r3, [r7, #20]
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    b994:	697b      	ldr	r3, [r7, #20]
    b996:	781b      	ldrb	r3, [r3, #0]
    b998:	2b00      	cmp	r3, #0
    b99a:	d1c4      	bne.n	b926 <USBSetConfiguration+0x2e>
			// skip to next descriptor
			pab += pab[DESC_bLength];
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    b99c:	2001      	movs	r0, #1
    b99e:	f7ff fd31 	bl	b404 <USBHwConfigDevice>
	}

	return TRUE;
    b9a2:	2301      	movs	r3, #1
}
    b9a4:	4618      	mov	r0, r3
    b9a6:	3718      	adds	r7, #24
    b9a8:	46bd      	mov	sp, r7
    b9aa:	bd80      	pop	{r7, pc}
    b9ac:	10000af8 	.word	0x10000af8

0000b9b0 <HandleStdDeviceReq>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    b9b0:	b580      	push	{r7, lr}
    b9b2:	b086      	sub	sp, #24
    b9b4:	af00      	add	r7, sp, #0
    b9b6:	60f8      	str	r0, [r7, #12]
    b9b8:	60b9      	str	r1, [r7, #8]
    b9ba:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    b9bc:	687b      	ldr	r3, [r7, #4]
    b9be:	681b      	ldr	r3, [r3, #0]
    b9c0:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    b9c2:	68fb      	ldr	r3, [r7, #12]
    b9c4:	785b      	ldrb	r3, [r3, #1]
    b9c6:	2b09      	cmp	r3, #9
    b9c8:	d852      	bhi.n	ba70 <HandleStdDeviceReq+0xc0>
    b9ca:	a201      	add	r2, pc, #4	; (adr r2, b9d0 <HandleStdDeviceReq+0x20>)
    b9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    b9d0:	0000b9f9 	.word	0x0000b9f9
    b9d4:	0000ba69 	.word	0x0000ba69
    b9d8:	0000ba71 	.word	0x0000ba71
    b9dc:	0000ba69 	.word	0x0000ba69
    b9e0:	0000ba71 	.word	0x0000ba71
    b9e4:	0000ba0f 	.word	0x0000ba0f
    b9e8:	0000ba1d 	.word	0x0000ba1d
    b9ec:	0000ba6d 	.word	0x0000ba6d
    b9f0:	0000ba35 	.word	0x0000ba35
    b9f4:	0000ba45 	.word	0x0000ba45
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    b9f8:	697b      	ldr	r3, [r7, #20]
    b9fa:	2200      	movs	r2, #0
    b9fc:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    b9fe:	697b      	ldr	r3, [r7, #20]
    ba00:	3301      	adds	r3, #1
    ba02:	2200      	movs	r2, #0
    ba04:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    ba06:	68bb      	ldr	r3, [r7, #8]
    ba08:	2202      	movs	r2, #2
    ba0a:	601a      	str	r2, [r3, #0]
		break;
    ba0c:	e032      	b.n	ba74 <HandleStdDeviceReq+0xc4>
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    ba0e:	68fb      	ldr	r3, [r7, #12]
    ba10:	885b      	ldrh	r3, [r3, #2]
    ba12:	b2db      	uxtb	r3, r3
    ba14:	4618      	mov	r0, r3
    ba16:	f7ff fbd3 	bl	b1c0 <USBHwSetAddress>
		break;
    ba1a:	e02b      	b.n	ba74 <HandleStdDeviceReq+0xc4>

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    ba1c:	68fb      	ldr	r3, [r7, #12]
    ba1e:	885a      	ldrh	r2, [r3, #2]
    ba20:	68fb      	ldr	r3, [r7, #12]
    ba22:	889b      	ldrh	r3, [r3, #4]
    ba24:	4610      	mov	r0, r2
    ba26:	4619      	mov	r1, r3
    ba28:	68ba      	ldr	r2, [r7, #8]
    ba2a:	687b      	ldr	r3, [r7, #4]
    ba2c:	f7ff ff08 	bl	b840 <USBGetDescriptor>
    ba30:	4603      	mov	r3, r0
    ba32:	e020      	b.n	ba76 <HandleStdDeviceReq+0xc6>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    ba34:	4b12      	ldr	r3, [pc, #72]	; (ba80 <HandleStdDeviceReq+0xd0>)
    ba36:	781a      	ldrb	r2, [r3, #0]
    ba38:	697b      	ldr	r3, [r7, #20]
    ba3a:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    ba3c:	68bb      	ldr	r3, [r7, #8]
    ba3e:	2201      	movs	r2, #1
    ba40:	601a      	str	r2, [r3, #0]
		break;
    ba42:	e017      	b.n	ba74 <HandleStdDeviceReq+0xc4>

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    ba44:	68fb      	ldr	r3, [r7, #12]
    ba46:	885b      	ldrh	r3, [r3, #2]
    ba48:	b2db      	uxtb	r3, r3
    ba4a:	4618      	mov	r0, r3
    ba4c:	2100      	movs	r1, #0
    ba4e:	f7ff ff53 	bl	b8f8 <USBSetConfiguration>
    ba52:	4603      	mov	r3, r0
    ba54:	2b00      	cmp	r3, #0
    ba56:	d101      	bne.n	ba5c <HandleStdDeviceReq+0xac>
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
    ba58:	2300      	movs	r3, #0
    ba5a:	e00c      	b.n	ba76 <HandleStdDeviceReq+0xc6>
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    ba5c:	68fb      	ldr	r3, [r7, #12]
    ba5e:	885b      	ldrh	r3, [r3, #2]
    ba60:	b2da      	uxtb	r2, r3
    ba62:	4b07      	ldr	r3, [pc, #28]	; (ba80 <HandleStdDeviceReq+0xd0>)
    ba64:	701a      	strb	r2, [r3, #0]
		break;
    ba66:	e005      	b.n	ba74 <HandleStdDeviceReq+0xc4>
			// put DEVICE_REMOTE_WAKEUP code here
		}
		if (pSetup->wValue == FEA_TEST_MODE) {
			// put TEST_MODE code here
		}
		return FALSE;
    ba68:	2300      	movs	r3, #0
    ba6a:	e004      	b.n	ba76 <HandleStdDeviceReq+0xc6>

	case REQ_SET_DESCRIPTOR:
		DBG("Device req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    ba6c:	2300      	movs	r3, #0
    ba6e:	e002      	b.n	ba76 <HandleStdDeviceReq+0xc6>

	default:
		DBG("Illegal device req %d\n", pSetup->bRequest);
		return FALSE;
    ba70:	2300      	movs	r3, #0
    ba72:	e000      	b.n	ba76 <HandleStdDeviceReq+0xc6>
	}
	
	return TRUE;
    ba74:	2301      	movs	r3, #1
}
    ba76:	4618      	mov	r0, r3
    ba78:	3718      	adds	r7, #24
    ba7a:	46bd      	mov	sp, r7
    ba7c:	bd80      	pop	{r7, pc}
    ba7e:	bf00      	nop
    ba80:	10000af0 	.word	0x10000af0

0000ba84 <HandleStdInterfaceReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    ba84:	b480      	push	{r7}
    ba86:	b087      	sub	sp, #28
    ba88:	af00      	add	r7, sp, #0
    ba8a:	60f8      	str	r0, [r7, #12]
    ba8c:	60b9      	str	r1, [r7, #8]
    ba8e:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    ba90:	687b      	ldr	r3, [r7, #4]
    ba92:	681b      	ldr	r3, [r3, #0]
    ba94:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    ba96:	68fb      	ldr	r3, [r7, #12]
    ba98:	785b      	ldrb	r3, [r3, #1]
    ba9a:	2b0b      	cmp	r3, #11
    ba9c:	d838      	bhi.n	bb10 <HandleStdInterfaceReq+0x8c>
    ba9e:	a201      	add	r2, pc, #4	; (adr r2, baa4 <HandleStdInterfaceReq+0x20>)
    baa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    baa4:	0000bad5 	.word	0x0000bad5
    baa8:	0000baeb 	.word	0x0000baeb
    baac:	0000bb11 	.word	0x0000bb11
    bab0:	0000baeb 	.word	0x0000baeb
    bab4:	0000bb11 	.word	0x0000bb11
    bab8:	0000bb11 	.word	0x0000bb11
    babc:	0000bb11 	.word	0x0000bb11
    bac0:	0000bb11 	.word	0x0000bb11
    bac4:	0000bb11 	.word	0x0000bb11
    bac8:	0000bb11 	.word	0x0000bb11
    bacc:	0000baef 	.word	0x0000baef
    bad0:	0000bafd 	.word	0x0000bafd

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    bad4:	697b      	ldr	r3, [r7, #20]
    bad6:	2200      	movs	r2, #0
    bad8:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    bada:	697b      	ldr	r3, [r7, #20]
    badc:	3301      	adds	r3, #1
    bade:	2200      	movs	r2, #0
    bae0:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    bae2:	68bb      	ldr	r3, [r7, #8]
    bae4:	2202      	movs	r2, #2
    bae6:	601a      	str	r2, [r3, #0]
		break;
    bae8:	e014      	b.n	bb14 <HandleStdInterfaceReq+0x90>

	case REQ_CLEAR_FEATURE:
	case REQ_SET_FEATURE:
		// not defined for interface
		return FALSE;
    baea:	2300      	movs	r3, #0
    baec:	e013      	b.n	bb16 <HandleStdInterfaceReq+0x92>
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    baee:	697b      	ldr	r3, [r7, #20]
    baf0:	2200      	movs	r2, #0
    baf2:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    baf4:	68bb      	ldr	r3, [r7, #8]
    baf6:	2201      	movs	r2, #1
    baf8:	601a      	str	r2, [r3, #0]
		break;
    bafa:	e00b      	b.n	bb14 <HandleStdInterfaceReq+0x90>
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    bafc:	68fb      	ldr	r3, [r7, #12]
    bafe:	885b      	ldrh	r3, [r3, #2]
    bb00:	2b00      	cmp	r3, #0
    bb02:	d001      	beq.n	bb08 <HandleStdInterfaceReq+0x84>
			return FALSE;
    bb04:	2300      	movs	r3, #0
    bb06:	e006      	b.n	bb16 <HandleStdInterfaceReq+0x92>
		}
		*piLen = 0;
    bb08:	68bb      	ldr	r3, [r7, #8]
    bb0a:	2200      	movs	r2, #0
    bb0c:	601a      	str	r2, [r3, #0]
		break;
    bb0e:	e001      	b.n	bb14 <HandleStdInterfaceReq+0x90>

	default:
		DBG("Illegal interface req %d\n", pSetup->bRequest);
		return FALSE;
    bb10:	2300      	movs	r3, #0
    bb12:	e000      	b.n	bb16 <HandleStdInterfaceReq+0x92>
	}

	return TRUE;
    bb14:	2301      	movs	r3, #1
}
    bb16:	4618      	mov	r0, r3
    bb18:	371c      	adds	r7, #28
    bb1a:	46bd      	mov	sp, r7
    bb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
    bb20:	4770      	bx	lr
    bb22:	bf00      	nop

0000bb24 <HandleStdEndPointReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    bb24:	b580      	push	{r7, lr}
    bb26:	b086      	sub	sp, #24
    bb28:	af00      	add	r7, sp, #0
    bb2a:	60f8      	str	r0, [r7, #12]
    bb2c:	60b9      	str	r1, [r7, #8]
    bb2e:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    bb30:	687b      	ldr	r3, [r7, #4]
    bb32:	681b      	ldr	r3, [r3, #0]
    bb34:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    bb36:	68fb      	ldr	r3, [r7, #12]
    bb38:	785b      	ldrb	r3, [r3, #1]
    bb3a:	2b0c      	cmp	r3, #12
    bb3c:	d853      	bhi.n	bbe6 <HandleStdEndPointReq+0xc2>
    bb3e:	a201      	add	r2, pc, #4	; (adr r2, bb44 <HandleStdEndPointReq+0x20>)
    bb40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    bb44:	0000bb79 	.word	0x0000bb79
    bb48:	0000bbab 	.word	0x0000bbab
    bb4c:	0000bbe7 	.word	0x0000bbe7
    bb50:	0000bbc7 	.word	0x0000bbc7
    bb54:	0000bbe7 	.word	0x0000bbe7
    bb58:	0000bbe7 	.word	0x0000bbe7
    bb5c:	0000bbe7 	.word	0x0000bbe7
    bb60:	0000bbe7 	.word	0x0000bbe7
    bb64:	0000bbe7 	.word	0x0000bbe7
    bb68:	0000bbe7 	.word	0x0000bbe7
    bb6c:	0000bbe7 	.word	0x0000bbe7
    bb70:	0000bbe7 	.word	0x0000bbe7
    bb74:	0000bbe3 	.word	0x0000bbe3
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    bb78:	68fb      	ldr	r3, [r7, #12]
    bb7a:	889b      	ldrh	r3, [r3, #4]
    bb7c:	b2db      	uxtb	r3, r3
    bb7e:	4618      	mov	r0, r3
    bb80:	f7ff fb50 	bl	b224 <USBHwEPGetStatus>
    bb84:	4603      	mov	r3, r0
    bb86:	f003 0302 	and.w	r3, r3, #2
    bb8a:	2b00      	cmp	r3, #0
    bb8c:	bf14      	ite	ne
    bb8e:	2301      	movne	r3, #1
    bb90:	2300      	moveq	r3, #0
    bb92:	b2db      	uxtb	r3, r3
    bb94:	461a      	mov	r2, r3
    bb96:	697b      	ldr	r3, [r7, #20]
    bb98:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    bb9a:	697b      	ldr	r3, [r7, #20]
    bb9c:	3301      	adds	r3, #1
    bb9e:	2200      	movs	r2, #0
    bba0:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    bba2:	68bb      	ldr	r3, [r7, #8]
    bba4:	2202      	movs	r2, #2
    bba6:	601a      	str	r2, [r3, #0]
		break;
    bba8:	e01f      	b.n	bbea <HandleStdEndPointReq+0xc6>
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    bbaa:	68fb      	ldr	r3, [r7, #12]
    bbac:	885b      	ldrh	r3, [r3, #2]
    bbae:	2b00      	cmp	r3, #0
    bbb0:	d107      	bne.n	bbc2 <HandleStdEndPointReq+0x9e>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    bbb2:	68fb      	ldr	r3, [r7, #12]
    bbb4:	889b      	ldrh	r3, [r3, #4]
    bbb6:	b2db      	uxtb	r3, r3
    bbb8:	4618      	mov	r0, r3
    bbba:	2100      	movs	r1, #0
    bbbc:	f7ff fb4a 	bl	b254 <USBHwEPStall>
			break;
    bbc0:	e013      	b.n	bbea <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    bbc2:	2300      	movs	r3, #0
    bbc4:	e012      	b.n	bbec <HandleStdEndPointReq+0xc8>
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    bbc6:	68fb      	ldr	r3, [r7, #12]
    bbc8:	885b      	ldrh	r3, [r3, #2]
    bbca:	2b00      	cmp	r3, #0
    bbcc:	d107      	bne.n	bbde <HandleStdEndPointReq+0xba>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    bbce:	68fb      	ldr	r3, [r7, #12]
    bbd0:	889b      	ldrh	r3, [r3, #4]
    bbd2:	b2db      	uxtb	r3, r3
    bbd4:	4618      	mov	r0, r3
    bbd6:	2101      	movs	r1, #1
    bbd8:	f7ff fb3c 	bl	b254 <USBHwEPStall>
			break;
    bbdc:	e005      	b.n	bbea <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    bbde:	2300      	movs	r3, #0
    bbe0:	e004      	b.n	bbec <HandleStdEndPointReq+0xc8>

	case REQ_SYNCH_FRAME:
		DBG("EP req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    bbe2:	2300      	movs	r3, #0
    bbe4:	e002      	b.n	bbec <HandleStdEndPointReq+0xc8>

	default:
		DBG("Illegal EP req %d\n", pSetup->bRequest);
		return FALSE;
    bbe6:	2300      	movs	r3, #0
    bbe8:	e000      	b.n	bbec <HandleStdEndPointReq+0xc8>
	}
	
	return TRUE;
    bbea:	2301      	movs	r3, #1
}
    bbec:	4618      	mov	r0, r3
    bbee:	3718      	adds	r7, #24
    bbf0:	46bd      	mov	sp, r7
    bbf2:	bd80      	pop	{r7, pc}

0000bbf4 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    bbf4:	b580      	push	{r7, lr}
    bbf6:	b084      	sub	sp, #16
    bbf8:	af00      	add	r7, sp, #0
    bbfa:	60f8      	str	r0, [r7, #12]
    bbfc:	60b9      	str	r1, [r7, #8]
    bbfe:	607a      	str	r2, [r7, #4]
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    bc00:	4b19      	ldr	r3, [pc, #100]	; (bc68 <USBHandleStandardRequest+0x74>)
    bc02:	681b      	ldr	r3, [r3, #0]
    bc04:	2b00      	cmp	r3, #0
    bc06:	d00a      	beq.n	bc1e <USBHandleStandardRequest+0x2a>
    bc08:	4b17      	ldr	r3, [pc, #92]	; (bc68 <USBHandleStandardRequest+0x74>)
    bc0a:	681b      	ldr	r3, [r3, #0]
    bc0c:	68f8      	ldr	r0, [r7, #12]
    bc0e:	68b9      	ldr	r1, [r7, #8]
    bc10:	687a      	ldr	r2, [r7, #4]
    bc12:	4798      	blx	r3
    bc14:	4603      	mov	r3, r0
    bc16:	2b00      	cmp	r3, #0
    bc18:	d001      	beq.n	bc1e <USBHandleStandardRequest+0x2a>
		return TRUE;
    bc1a:	2301      	movs	r3, #1
    bc1c:	e01f      	b.n	bc5e <USBHandleStandardRequest+0x6a>
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    bc1e:	68fb      	ldr	r3, [r7, #12]
    bc20:	781b      	ldrb	r3, [r3, #0]
    bc22:	f003 031f 	and.w	r3, r3, #31
    bc26:	2b01      	cmp	r3, #1
    bc28:	d00a      	beq.n	bc40 <USBHandleStandardRequest+0x4c>
    bc2a:	2b02      	cmp	r3, #2
    bc2c:	d00f      	beq.n	bc4e <USBHandleStandardRequest+0x5a>
    bc2e:	2b00      	cmp	r3, #0
    bc30:	d114      	bne.n	bc5c <USBHandleStandardRequest+0x68>
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
    bc32:	68f8      	ldr	r0, [r7, #12]
    bc34:	68b9      	ldr	r1, [r7, #8]
    bc36:	687a      	ldr	r2, [r7, #4]
    bc38:	f7ff feba 	bl	b9b0 <HandleStdDeviceReq>
    bc3c:	4603      	mov	r3, r0
    bc3e:	e00e      	b.n	bc5e <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
    bc40:	68f8      	ldr	r0, [r7, #12]
    bc42:	68b9      	ldr	r1, [r7, #8]
    bc44:	687a      	ldr	r2, [r7, #4]
    bc46:	f7ff ff1d 	bl	ba84 <HandleStdInterfaceReq>
    bc4a:	4603      	mov	r3, r0
    bc4c:	e007      	b.n	bc5e <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
    bc4e:	68f8      	ldr	r0, [r7, #12]
    bc50:	68b9      	ldr	r1, [r7, #8]
    bc52:	687a      	ldr	r2, [r7, #4]
    bc54:	f7ff ff66 	bl	bb24 <HandleStdEndPointReq>
    bc58:	4603      	mov	r3, r0
    bc5a:	e000      	b.n	bc5e <USBHandleStandardRequest+0x6a>
	default: 						return FALSE;
    bc5c:	2300      	movs	r3, #0
	}
}
    bc5e:	4618      	mov	r0, r3
    bc60:	3710      	adds	r7, #16
    bc62:	46bd      	mov	sp, r7
    bc64:	bd80      	pop	{r7, pc}
    bc66:	bf00      	nop
    bc68:	10000af4 	.word	0x10000af4

0000bc6c <__aeabi_drsub>:
    bc6c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    bc70:	e002      	b.n	bc78 <__adddf3>
    bc72:	bf00      	nop

0000bc74 <__aeabi_dsub>:
    bc74:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000bc78 <__adddf3>:
    bc78:	b530      	push	{r4, r5, lr}
    bc7a:	ea4f 0441 	mov.w	r4, r1, lsl #1
    bc7e:	ea4f 0543 	mov.w	r5, r3, lsl #1
    bc82:	ea94 0f05 	teq	r4, r5
    bc86:	bf08      	it	eq
    bc88:	ea90 0f02 	teqeq	r0, r2
    bc8c:	bf1f      	itttt	ne
    bc8e:	ea54 0c00 	orrsne.w	ip, r4, r0
    bc92:	ea55 0c02 	orrsne.w	ip, r5, r2
    bc96:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    bc9a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    bc9e:	f000 80e2 	beq.w	be66 <__adddf3+0x1ee>
    bca2:	ea4f 5454 	mov.w	r4, r4, lsr #21
    bca6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    bcaa:	bfb8      	it	lt
    bcac:	426d      	neglt	r5, r5
    bcae:	dd0c      	ble.n	bcca <__adddf3+0x52>
    bcb0:	442c      	add	r4, r5
    bcb2:	ea80 0202 	eor.w	r2, r0, r2
    bcb6:	ea81 0303 	eor.w	r3, r1, r3
    bcba:	ea82 0000 	eor.w	r0, r2, r0
    bcbe:	ea83 0101 	eor.w	r1, r3, r1
    bcc2:	ea80 0202 	eor.w	r2, r0, r2
    bcc6:	ea81 0303 	eor.w	r3, r1, r3
    bcca:	2d36      	cmp	r5, #54	; 0x36
    bccc:	bf88      	it	hi
    bcce:	bd30      	pophi	{r4, r5, pc}
    bcd0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    bcd4:	ea4f 3101 	mov.w	r1, r1, lsl #12
    bcd8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    bcdc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    bce0:	d002      	beq.n	bce8 <__adddf3+0x70>
    bce2:	4240      	negs	r0, r0
    bce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    bce8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    bcec:	ea4f 3303 	mov.w	r3, r3, lsl #12
    bcf0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    bcf4:	d002      	beq.n	bcfc <__adddf3+0x84>
    bcf6:	4252      	negs	r2, r2
    bcf8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    bcfc:	ea94 0f05 	teq	r4, r5
    bd00:	f000 80a7 	beq.w	be52 <__adddf3+0x1da>
    bd04:	f1a4 0401 	sub.w	r4, r4, #1
    bd08:	f1d5 0e20 	rsbs	lr, r5, #32
    bd0c:	db0d      	blt.n	bd2a <__adddf3+0xb2>
    bd0e:	fa02 fc0e 	lsl.w	ip, r2, lr
    bd12:	fa22 f205 	lsr.w	r2, r2, r5
    bd16:	1880      	adds	r0, r0, r2
    bd18:	f141 0100 	adc.w	r1, r1, #0
    bd1c:	fa03 f20e 	lsl.w	r2, r3, lr
    bd20:	1880      	adds	r0, r0, r2
    bd22:	fa43 f305 	asr.w	r3, r3, r5
    bd26:	4159      	adcs	r1, r3
    bd28:	e00e      	b.n	bd48 <__adddf3+0xd0>
    bd2a:	f1a5 0520 	sub.w	r5, r5, #32
    bd2e:	f10e 0e20 	add.w	lr, lr, #32
    bd32:	2a01      	cmp	r2, #1
    bd34:	fa03 fc0e 	lsl.w	ip, r3, lr
    bd38:	bf28      	it	cs
    bd3a:	f04c 0c02 	orrcs.w	ip, ip, #2
    bd3e:	fa43 f305 	asr.w	r3, r3, r5
    bd42:	18c0      	adds	r0, r0, r3
    bd44:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    bd48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bd4c:	d507      	bpl.n	bd5e <__adddf3+0xe6>
    bd4e:	f04f 0e00 	mov.w	lr, #0
    bd52:	f1dc 0c00 	rsbs	ip, ip, #0
    bd56:	eb7e 0000 	sbcs.w	r0, lr, r0
    bd5a:	eb6e 0101 	sbc.w	r1, lr, r1
    bd5e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    bd62:	d31b      	bcc.n	bd9c <__adddf3+0x124>
    bd64:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    bd68:	d30c      	bcc.n	bd84 <__adddf3+0x10c>
    bd6a:	0849      	lsrs	r1, r1, #1
    bd6c:	ea5f 0030 	movs.w	r0, r0, rrx
    bd70:	ea4f 0c3c 	mov.w	ip, ip, rrx
    bd74:	f104 0401 	add.w	r4, r4, #1
    bd78:	ea4f 5244 	mov.w	r2, r4, lsl #21
    bd7c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    bd80:	f080 809a 	bcs.w	beb8 <__adddf3+0x240>
    bd84:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    bd88:	bf08      	it	eq
    bd8a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    bd8e:	f150 0000 	adcs.w	r0, r0, #0
    bd92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    bd96:	ea41 0105 	orr.w	r1, r1, r5
    bd9a:	bd30      	pop	{r4, r5, pc}
    bd9c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    bda0:	4140      	adcs	r0, r0
    bda2:	eb41 0101 	adc.w	r1, r1, r1
    bda6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    bdaa:	f1a4 0401 	sub.w	r4, r4, #1
    bdae:	d1e9      	bne.n	bd84 <__adddf3+0x10c>
    bdb0:	f091 0f00 	teq	r1, #0
    bdb4:	bf04      	itt	eq
    bdb6:	4601      	moveq	r1, r0
    bdb8:	2000      	moveq	r0, #0
    bdba:	fab1 f381 	clz	r3, r1
    bdbe:	bf08      	it	eq
    bdc0:	3320      	addeq	r3, #32
    bdc2:	f1a3 030b 	sub.w	r3, r3, #11
    bdc6:	f1b3 0220 	subs.w	r2, r3, #32
    bdca:	da0c      	bge.n	bde6 <__adddf3+0x16e>
    bdcc:	320c      	adds	r2, #12
    bdce:	dd08      	ble.n	bde2 <__adddf3+0x16a>
    bdd0:	f102 0c14 	add.w	ip, r2, #20
    bdd4:	f1c2 020c 	rsb	r2, r2, #12
    bdd8:	fa01 f00c 	lsl.w	r0, r1, ip
    bddc:	fa21 f102 	lsr.w	r1, r1, r2
    bde0:	e00c      	b.n	bdfc <__adddf3+0x184>
    bde2:	f102 0214 	add.w	r2, r2, #20
    bde6:	bfd8      	it	le
    bde8:	f1c2 0c20 	rsble	ip, r2, #32
    bdec:	fa01 f102 	lsl.w	r1, r1, r2
    bdf0:	fa20 fc0c 	lsr.w	ip, r0, ip
    bdf4:	bfdc      	itt	le
    bdf6:	ea41 010c 	orrle.w	r1, r1, ip
    bdfa:	4090      	lslle	r0, r2
    bdfc:	1ae4      	subs	r4, r4, r3
    bdfe:	bfa2      	ittt	ge
    be00:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    be04:	4329      	orrge	r1, r5
    be06:	bd30      	popge	{r4, r5, pc}
    be08:	ea6f 0404 	mvn.w	r4, r4
    be0c:	3c1f      	subs	r4, #31
    be0e:	da1c      	bge.n	be4a <__adddf3+0x1d2>
    be10:	340c      	adds	r4, #12
    be12:	dc0e      	bgt.n	be32 <__adddf3+0x1ba>
    be14:	f104 0414 	add.w	r4, r4, #20
    be18:	f1c4 0220 	rsb	r2, r4, #32
    be1c:	fa20 f004 	lsr.w	r0, r0, r4
    be20:	fa01 f302 	lsl.w	r3, r1, r2
    be24:	ea40 0003 	orr.w	r0, r0, r3
    be28:	fa21 f304 	lsr.w	r3, r1, r4
    be2c:	ea45 0103 	orr.w	r1, r5, r3
    be30:	bd30      	pop	{r4, r5, pc}
    be32:	f1c4 040c 	rsb	r4, r4, #12
    be36:	f1c4 0220 	rsb	r2, r4, #32
    be3a:	fa20 f002 	lsr.w	r0, r0, r2
    be3e:	fa01 f304 	lsl.w	r3, r1, r4
    be42:	ea40 0003 	orr.w	r0, r0, r3
    be46:	4629      	mov	r1, r5
    be48:	bd30      	pop	{r4, r5, pc}
    be4a:	fa21 f004 	lsr.w	r0, r1, r4
    be4e:	4629      	mov	r1, r5
    be50:	bd30      	pop	{r4, r5, pc}
    be52:	f094 0f00 	teq	r4, #0
    be56:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    be5a:	bf06      	itte	eq
    be5c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    be60:	3401      	addeq	r4, #1
    be62:	3d01      	subne	r5, #1
    be64:	e74e      	b.n	bd04 <__adddf3+0x8c>
    be66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    be6a:	bf18      	it	ne
    be6c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    be70:	d029      	beq.n	bec6 <__adddf3+0x24e>
    be72:	ea94 0f05 	teq	r4, r5
    be76:	bf08      	it	eq
    be78:	ea90 0f02 	teqeq	r0, r2
    be7c:	d005      	beq.n	be8a <__adddf3+0x212>
    be7e:	ea54 0c00 	orrs.w	ip, r4, r0
    be82:	bf04      	itt	eq
    be84:	4619      	moveq	r1, r3
    be86:	4610      	moveq	r0, r2
    be88:	bd30      	pop	{r4, r5, pc}
    be8a:	ea91 0f03 	teq	r1, r3
    be8e:	bf1e      	ittt	ne
    be90:	2100      	movne	r1, #0
    be92:	2000      	movne	r0, #0
    be94:	bd30      	popne	{r4, r5, pc}
    be96:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    be9a:	d105      	bne.n	bea8 <__adddf3+0x230>
    be9c:	0040      	lsls	r0, r0, #1
    be9e:	4149      	adcs	r1, r1
    bea0:	bf28      	it	cs
    bea2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    bea6:	bd30      	pop	{r4, r5, pc}
    bea8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    beac:	bf3c      	itt	cc
    beae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    beb2:	bd30      	popcc	{r4, r5, pc}
    beb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    beb8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    bebc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    bec0:	f04f 0000 	mov.w	r0, #0
    bec4:	bd30      	pop	{r4, r5, pc}
    bec6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    beca:	bf1a      	itte	ne
    becc:	4619      	movne	r1, r3
    bece:	4610      	movne	r0, r2
    bed0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    bed4:	bf1c      	itt	ne
    bed6:	460b      	movne	r3, r1
    bed8:	4602      	movne	r2, r0
    beda:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    bede:	bf06      	itte	eq
    bee0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    bee4:	ea91 0f03 	teqeq	r1, r3
    bee8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    beec:	bd30      	pop	{r4, r5, pc}
    beee:	bf00      	nop

0000bef0 <__aeabi_ui2d>:
    bef0:	f090 0f00 	teq	r0, #0
    bef4:	bf04      	itt	eq
    bef6:	2100      	moveq	r1, #0
    bef8:	4770      	bxeq	lr
    befa:	b530      	push	{r4, r5, lr}
    befc:	f44f 6480 	mov.w	r4, #1024	; 0x400
    bf00:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bf04:	f04f 0500 	mov.w	r5, #0
    bf08:	f04f 0100 	mov.w	r1, #0
    bf0c:	e750      	b.n	bdb0 <__adddf3+0x138>
    bf0e:	bf00      	nop

0000bf10 <__aeabi_i2d>:
    bf10:	f090 0f00 	teq	r0, #0
    bf14:	bf04      	itt	eq
    bf16:	2100      	moveq	r1, #0
    bf18:	4770      	bxeq	lr
    bf1a:	b530      	push	{r4, r5, lr}
    bf1c:	f44f 6480 	mov.w	r4, #1024	; 0x400
    bf20:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bf24:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    bf28:	bf48      	it	mi
    bf2a:	4240      	negmi	r0, r0
    bf2c:	f04f 0100 	mov.w	r1, #0
    bf30:	e73e      	b.n	bdb0 <__adddf3+0x138>
    bf32:	bf00      	nop

0000bf34 <__aeabi_f2d>:
    bf34:	0042      	lsls	r2, r0, #1
    bf36:	ea4f 01e2 	mov.w	r1, r2, asr #3
    bf3a:	ea4f 0131 	mov.w	r1, r1, rrx
    bf3e:	ea4f 7002 	mov.w	r0, r2, lsl #28
    bf42:	bf1f      	itttt	ne
    bf44:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    bf48:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    bf4c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    bf50:	4770      	bxne	lr
    bf52:	f092 0f00 	teq	r2, #0
    bf56:	bf14      	ite	ne
    bf58:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    bf5c:	4770      	bxeq	lr
    bf5e:	b530      	push	{r4, r5, lr}
    bf60:	f44f 7460 	mov.w	r4, #896	; 0x380
    bf64:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    bf68:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    bf6c:	e720      	b.n	bdb0 <__adddf3+0x138>
    bf6e:	bf00      	nop

0000bf70 <__aeabi_ul2d>:
    bf70:	ea50 0201 	orrs.w	r2, r0, r1
    bf74:	bf08      	it	eq
    bf76:	4770      	bxeq	lr
    bf78:	b530      	push	{r4, r5, lr}
    bf7a:	f04f 0500 	mov.w	r5, #0
    bf7e:	e00a      	b.n	bf96 <__aeabi_l2d+0x16>

0000bf80 <__aeabi_l2d>:
    bf80:	ea50 0201 	orrs.w	r2, r0, r1
    bf84:	bf08      	it	eq
    bf86:	4770      	bxeq	lr
    bf88:	b530      	push	{r4, r5, lr}
    bf8a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    bf8e:	d502      	bpl.n	bf96 <__aeabi_l2d+0x16>
    bf90:	4240      	negs	r0, r0
    bf92:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    bf96:	f44f 6480 	mov.w	r4, #1024	; 0x400
    bf9a:	f104 0432 	add.w	r4, r4, #50	; 0x32
    bf9e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    bfa2:	f43f aedc 	beq.w	bd5e <__adddf3+0xe6>
    bfa6:	f04f 0203 	mov.w	r2, #3
    bfaa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    bfae:	bf18      	it	ne
    bfb0:	3203      	addne	r2, #3
    bfb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    bfb6:	bf18      	it	ne
    bfb8:	3203      	addne	r2, #3
    bfba:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    bfbe:	f1c2 0320 	rsb	r3, r2, #32
    bfc2:	fa00 fc03 	lsl.w	ip, r0, r3
    bfc6:	fa20 f002 	lsr.w	r0, r0, r2
    bfca:	fa01 fe03 	lsl.w	lr, r1, r3
    bfce:	ea40 000e 	orr.w	r0, r0, lr
    bfd2:	fa21 f102 	lsr.w	r1, r1, r2
    bfd6:	4414      	add	r4, r2
    bfd8:	e6c1      	b.n	bd5e <__adddf3+0xe6>
    bfda:	bf00      	nop

0000bfdc <__aeabi_dmul>:
    bfdc:	b570      	push	{r4, r5, r6, lr}
    bfde:	f04f 0cff 	mov.w	ip, #255	; 0xff
    bfe2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    bfe6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    bfea:	bf1d      	ittte	ne
    bfec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    bff0:	ea94 0f0c 	teqne	r4, ip
    bff4:	ea95 0f0c 	teqne	r5, ip
    bff8:	f000 f8de 	bleq	c1b8 <__aeabi_dmul+0x1dc>
    bffc:	442c      	add	r4, r5
    bffe:	ea81 0603 	eor.w	r6, r1, r3
    c002:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    c006:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    c00a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    c00e:	bf18      	it	ne
    c010:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    c014:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    c01c:	d038      	beq.n	c090 <__aeabi_dmul+0xb4>
    c01e:	fba0 ce02 	umull	ip, lr, r0, r2
    c022:	f04f 0500 	mov.w	r5, #0
    c026:	fbe1 e502 	umlal	lr, r5, r1, r2
    c02a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    c02e:	fbe0 e503 	umlal	lr, r5, r0, r3
    c032:	f04f 0600 	mov.w	r6, #0
    c036:	fbe1 5603 	umlal	r5, r6, r1, r3
    c03a:	f09c 0f00 	teq	ip, #0
    c03e:	bf18      	it	ne
    c040:	f04e 0e01 	orrne.w	lr, lr, #1
    c044:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    c048:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    c04c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    c050:	d204      	bcs.n	c05c <__aeabi_dmul+0x80>
    c052:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    c056:	416d      	adcs	r5, r5
    c058:	eb46 0606 	adc.w	r6, r6, r6
    c05c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    c060:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    c064:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    c068:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    c06c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    c070:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c074:	bf88      	it	hi
    c076:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c07a:	d81e      	bhi.n	c0ba <__aeabi_dmul+0xde>
    c07c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    c080:	bf08      	it	eq
    c082:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    c086:	f150 0000 	adcs.w	r0, r0, #0
    c08a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c08e:	bd70      	pop	{r4, r5, r6, pc}
    c090:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    c094:	ea46 0101 	orr.w	r1, r6, r1
    c098:	ea40 0002 	orr.w	r0, r0, r2
    c09c:	ea81 0103 	eor.w	r1, r1, r3
    c0a0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    c0a4:	bfc2      	ittt	gt
    c0a6:	ebd4 050c 	rsbsgt	r5, r4, ip
    c0aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c0ae:	bd70      	popgt	{r4, r5, r6, pc}
    c0b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c0b4:	f04f 0e00 	mov.w	lr, #0
    c0b8:	3c01      	subs	r4, #1
    c0ba:	f300 80ab 	bgt.w	c214 <__aeabi_dmul+0x238>
    c0be:	f114 0f36 	cmn.w	r4, #54	; 0x36
    c0c2:	bfde      	ittt	le
    c0c4:	2000      	movle	r0, #0
    c0c6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    c0ca:	bd70      	pople	{r4, r5, r6, pc}
    c0cc:	f1c4 0400 	rsb	r4, r4, #0
    c0d0:	3c20      	subs	r4, #32
    c0d2:	da35      	bge.n	c140 <__aeabi_dmul+0x164>
    c0d4:	340c      	adds	r4, #12
    c0d6:	dc1b      	bgt.n	c110 <__aeabi_dmul+0x134>
    c0d8:	f104 0414 	add.w	r4, r4, #20
    c0dc:	f1c4 0520 	rsb	r5, r4, #32
    c0e0:	fa00 f305 	lsl.w	r3, r0, r5
    c0e4:	fa20 f004 	lsr.w	r0, r0, r4
    c0e8:	fa01 f205 	lsl.w	r2, r1, r5
    c0ec:	ea40 0002 	orr.w	r0, r0, r2
    c0f0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    c0f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    c0f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c0fc:	fa21 f604 	lsr.w	r6, r1, r4
    c100:	eb42 0106 	adc.w	r1, r2, r6
    c104:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c108:	bf08      	it	eq
    c10a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c10e:	bd70      	pop	{r4, r5, r6, pc}
    c110:	f1c4 040c 	rsb	r4, r4, #12
    c114:	f1c4 0520 	rsb	r5, r4, #32
    c118:	fa00 f304 	lsl.w	r3, r0, r4
    c11c:	fa20 f005 	lsr.w	r0, r0, r5
    c120:	fa01 f204 	lsl.w	r2, r1, r4
    c124:	ea40 0002 	orr.w	r0, r0, r2
    c128:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c12c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    c130:	f141 0100 	adc.w	r1, r1, #0
    c134:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c138:	bf08      	it	eq
    c13a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c13e:	bd70      	pop	{r4, r5, r6, pc}
    c140:	f1c4 0520 	rsb	r5, r4, #32
    c144:	fa00 f205 	lsl.w	r2, r0, r5
    c148:	ea4e 0e02 	orr.w	lr, lr, r2
    c14c:	fa20 f304 	lsr.w	r3, r0, r4
    c150:	fa01 f205 	lsl.w	r2, r1, r5
    c154:	ea43 0302 	orr.w	r3, r3, r2
    c158:	fa21 f004 	lsr.w	r0, r1, r4
    c15c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c160:	fa21 f204 	lsr.w	r2, r1, r4
    c164:	ea20 0002 	bic.w	r0, r0, r2
    c168:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    c16c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    c170:	bf08      	it	eq
    c172:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    c176:	bd70      	pop	{r4, r5, r6, pc}
    c178:	f094 0f00 	teq	r4, #0
    c17c:	d10f      	bne.n	c19e <__aeabi_dmul+0x1c2>
    c17e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    c182:	0040      	lsls	r0, r0, #1
    c184:	eb41 0101 	adc.w	r1, r1, r1
    c188:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c18c:	bf08      	it	eq
    c18e:	3c01      	subeq	r4, #1
    c190:	d0f7      	beq.n	c182 <__aeabi_dmul+0x1a6>
    c192:	ea41 0106 	orr.w	r1, r1, r6
    c196:	f095 0f00 	teq	r5, #0
    c19a:	bf18      	it	ne
    c19c:	4770      	bxne	lr
    c19e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    c1a2:	0052      	lsls	r2, r2, #1
    c1a4:	eb43 0303 	adc.w	r3, r3, r3
    c1a8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c1ac:	bf08      	it	eq
    c1ae:	3d01      	subeq	r5, #1
    c1b0:	d0f7      	beq.n	c1a2 <__aeabi_dmul+0x1c6>
    c1b2:	ea43 0306 	orr.w	r3, r3, r6
    c1b6:	4770      	bx	lr
    c1b8:	ea94 0f0c 	teq	r4, ip
    c1bc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c1c0:	bf18      	it	ne
    c1c2:	ea95 0f0c 	teqne	r5, ip
    c1c6:	d00c      	beq.n	c1e2 <__aeabi_dmul+0x206>
    c1c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c1cc:	bf18      	it	ne
    c1ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c1d2:	d1d1      	bne.n	c178 <__aeabi_dmul+0x19c>
    c1d4:	ea81 0103 	eor.w	r1, r1, r3
    c1d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c1dc:	f04f 0000 	mov.w	r0, #0
    c1e0:	bd70      	pop	{r4, r5, r6, pc}
    c1e2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c1e6:	bf06      	itte	eq
    c1e8:	4610      	moveq	r0, r2
    c1ea:	4619      	moveq	r1, r3
    c1ec:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c1f0:	d019      	beq.n	c226 <__aeabi_dmul+0x24a>
    c1f2:	ea94 0f0c 	teq	r4, ip
    c1f6:	d102      	bne.n	c1fe <__aeabi_dmul+0x222>
    c1f8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    c1fc:	d113      	bne.n	c226 <__aeabi_dmul+0x24a>
    c1fe:	ea95 0f0c 	teq	r5, ip
    c202:	d105      	bne.n	c210 <__aeabi_dmul+0x234>
    c204:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    c208:	bf1c      	itt	ne
    c20a:	4610      	movne	r0, r2
    c20c:	4619      	movne	r1, r3
    c20e:	d10a      	bne.n	c226 <__aeabi_dmul+0x24a>
    c210:	ea81 0103 	eor.w	r1, r1, r3
    c214:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    c218:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c21c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    c220:	f04f 0000 	mov.w	r0, #0
    c224:	bd70      	pop	{r4, r5, r6, pc}
    c226:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    c22a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    c22e:	bd70      	pop	{r4, r5, r6, pc}

0000c230 <__aeabi_ddiv>:
    c230:	b570      	push	{r4, r5, r6, lr}
    c232:	f04f 0cff 	mov.w	ip, #255	; 0xff
    c236:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    c23a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    c23e:	bf1d      	ittte	ne
    c240:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    c244:	ea94 0f0c 	teqne	r4, ip
    c248:	ea95 0f0c 	teqne	r5, ip
    c24c:	f000 f8a7 	bleq	c39e <__aeabi_ddiv+0x16e>
    c250:	eba4 0405 	sub.w	r4, r4, r5
    c254:	ea81 0e03 	eor.w	lr, r1, r3
    c258:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c25c:	ea4f 3101 	mov.w	r1, r1, lsl #12
    c260:	f000 8088 	beq.w	c374 <__aeabi_ddiv+0x144>
    c264:	ea4f 3303 	mov.w	r3, r3, lsl #12
    c268:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    c26c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    c270:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    c274:	ea4f 2202 	mov.w	r2, r2, lsl #8
    c278:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    c27c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    c280:	ea4f 2600 	mov.w	r6, r0, lsl #8
    c284:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    c288:	429d      	cmp	r5, r3
    c28a:	bf08      	it	eq
    c28c:	4296      	cmpeq	r6, r2
    c28e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    c292:	f504 7440 	add.w	r4, r4, #768	; 0x300
    c296:	d202      	bcs.n	c29e <__aeabi_ddiv+0x6e>
    c298:	085b      	lsrs	r3, r3, #1
    c29a:	ea4f 0232 	mov.w	r2, r2, rrx
    c29e:	1ab6      	subs	r6, r6, r2
    c2a0:	eb65 0503 	sbc.w	r5, r5, r3
    c2a4:	085b      	lsrs	r3, r3, #1
    c2a6:	ea4f 0232 	mov.w	r2, r2, rrx
    c2aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c2ae:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    c2b2:	ebb6 0e02 	subs.w	lr, r6, r2
    c2b6:	eb75 0e03 	sbcs.w	lr, r5, r3
    c2ba:	bf22      	ittt	cs
    c2bc:	1ab6      	subcs	r6, r6, r2
    c2be:	4675      	movcs	r5, lr
    c2c0:	ea40 000c 	orrcs.w	r0, r0, ip
    c2c4:	085b      	lsrs	r3, r3, #1
    c2c6:	ea4f 0232 	mov.w	r2, r2, rrx
    c2ca:	ebb6 0e02 	subs.w	lr, r6, r2
    c2ce:	eb75 0e03 	sbcs.w	lr, r5, r3
    c2d2:	bf22      	ittt	cs
    c2d4:	1ab6      	subcs	r6, r6, r2
    c2d6:	4675      	movcs	r5, lr
    c2d8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    c2dc:	085b      	lsrs	r3, r3, #1
    c2de:	ea4f 0232 	mov.w	r2, r2, rrx
    c2e2:	ebb6 0e02 	subs.w	lr, r6, r2
    c2e6:	eb75 0e03 	sbcs.w	lr, r5, r3
    c2ea:	bf22      	ittt	cs
    c2ec:	1ab6      	subcs	r6, r6, r2
    c2ee:	4675      	movcs	r5, lr
    c2f0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    c2f4:	085b      	lsrs	r3, r3, #1
    c2f6:	ea4f 0232 	mov.w	r2, r2, rrx
    c2fa:	ebb6 0e02 	subs.w	lr, r6, r2
    c2fe:	eb75 0e03 	sbcs.w	lr, r5, r3
    c302:	bf22      	ittt	cs
    c304:	1ab6      	subcs	r6, r6, r2
    c306:	4675      	movcs	r5, lr
    c308:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    c30c:	ea55 0e06 	orrs.w	lr, r5, r6
    c310:	d018      	beq.n	c344 <__aeabi_ddiv+0x114>
    c312:	ea4f 1505 	mov.w	r5, r5, lsl #4
    c316:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    c31a:	ea4f 1606 	mov.w	r6, r6, lsl #4
    c31e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    c322:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    c326:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    c32a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    c32e:	d1c0      	bne.n	c2b2 <__aeabi_ddiv+0x82>
    c330:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c334:	d10b      	bne.n	c34e <__aeabi_ddiv+0x11e>
    c336:	ea41 0100 	orr.w	r1, r1, r0
    c33a:	f04f 0000 	mov.w	r0, #0
    c33e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    c342:	e7b6      	b.n	c2b2 <__aeabi_ddiv+0x82>
    c344:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c348:	bf04      	itt	eq
    c34a:	4301      	orreq	r1, r0
    c34c:	2000      	moveq	r0, #0
    c34e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    c352:	bf88      	it	hi
    c354:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    c358:	f63f aeaf 	bhi.w	c0ba <__aeabi_dmul+0xde>
    c35c:	ebb5 0c03 	subs.w	ip, r5, r3
    c360:	bf04      	itt	eq
    c362:	ebb6 0c02 	subseq.w	ip, r6, r2
    c366:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    c36a:	f150 0000 	adcs.w	r0, r0, #0
    c36e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    c372:	bd70      	pop	{r4, r5, r6, pc}
    c374:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    c378:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    c37c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    c380:	bfc2      	ittt	gt
    c382:	ebd4 050c 	rsbsgt	r5, r4, ip
    c386:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    c38a:	bd70      	popgt	{r4, r5, r6, pc}
    c38c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c390:	f04f 0e00 	mov.w	lr, #0
    c394:	3c01      	subs	r4, #1
    c396:	e690      	b.n	c0ba <__aeabi_dmul+0xde>
    c398:	ea45 0e06 	orr.w	lr, r5, r6
    c39c:	e68d      	b.n	c0ba <__aeabi_dmul+0xde>
    c39e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    c3a2:	ea94 0f0c 	teq	r4, ip
    c3a6:	bf08      	it	eq
    c3a8:	ea95 0f0c 	teqeq	r5, ip
    c3ac:	f43f af3b 	beq.w	c226 <__aeabi_dmul+0x24a>
    c3b0:	ea94 0f0c 	teq	r4, ip
    c3b4:	d10a      	bne.n	c3cc <__aeabi_ddiv+0x19c>
    c3b6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    c3ba:	f47f af34 	bne.w	c226 <__aeabi_dmul+0x24a>
    c3be:	ea95 0f0c 	teq	r5, ip
    c3c2:	f47f af25 	bne.w	c210 <__aeabi_dmul+0x234>
    c3c6:	4610      	mov	r0, r2
    c3c8:	4619      	mov	r1, r3
    c3ca:	e72c      	b.n	c226 <__aeabi_dmul+0x24a>
    c3cc:	ea95 0f0c 	teq	r5, ip
    c3d0:	d106      	bne.n	c3e0 <__aeabi_ddiv+0x1b0>
    c3d2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    c3d6:	f43f aefd 	beq.w	c1d4 <__aeabi_dmul+0x1f8>
    c3da:	4610      	mov	r0, r2
    c3dc:	4619      	mov	r1, r3
    c3de:	e722      	b.n	c226 <__aeabi_dmul+0x24a>
    c3e0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    c3e4:	bf18      	it	ne
    c3e6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    c3ea:	f47f aec5 	bne.w	c178 <__aeabi_dmul+0x19c>
    c3ee:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    c3f2:	f47f af0d 	bne.w	c210 <__aeabi_dmul+0x234>
    c3f6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    c3fa:	f47f aeeb 	bne.w	c1d4 <__aeabi_dmul+0x1f8>
    c3fe:	e712      	b.n	c226 <__aeabi_dmul+0x24a>

0000c400 <__aeabi_d2uiz>:
    c400:	004a      	lsls	r2, r1, #1
    c402:	d211      	bcs.n	c428 <__aeabi_d2uiz+0x28>
    c404:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    c408:	d211      	bcs.n	c42e <__aeabi_d2uiz+0x2e>
    c40a:	d50d      	bpl.n	c428 <__aeabi_d2uiz+0x28>
    c40c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    c410:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    c414:	d40e      	bmi.n	c434 <__aeabi_d2uiz+0x34>
    c416:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    c41a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    c41e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    c422:	fa23 f002 	lsr.w	r0, r3, r2
    c426:	4770      	bx	lr
    c428:	f04f 0000 	mov.w	r0, #0
    c42c:	4770      	bx	lr
    c42e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    c432:	d102      	bne.n	c43a <__aeabi_d2uiz+0x3a>
    c434:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c438:	4770      	bx	lr
    c43a:	f04f 0000 	mov.w	r0, #0
    c43e:	4770      	bx	lr

0000c440 <memcmp>:
    c440:	2a03      	cmp	r2, #3
    c442:	b470      	push	{r4, r5, r6}
    c444:	d926      	bls.n	c494 <memcmp+0x54>
    c446:	ea40 0301 	orr.w	r3, r0, r1
    c44a:	079b      	lsls	r3, r3, #30
    c44c:	d011      	beq.n	c472 <memcmp+0x32>
    c44e:	7804      	ldrb	r4, [r0, #0]
    c450:	780d      	ldrb	r5, [r1, #0]
    c452:	42ac      	cmp	r4, r5
    c454:	d122      	bne.n	c49c <memcmp+0x5c>
    c456:	4402      	add	r2, r0
    c458:	1c43      	adds	r3, r0, #1
    c45a:	e005      	b.n	c468 <memcmp+0x28>
    c45c:	f813 4b01 	ldrb.w	r4, [r3], #1
    c460:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    c464:	42ac      	cmp	r4, r5
    c466:	d119      	bne.n	c49c <memcmp+0x5c>
    c468:	4293      	cmp	r3, r2
    c46a:	d1f7      	bne.n	c45c <memcmp+0x1c>
    c46c:	2000      	movs	r0, #0
    c46e:	bc70      	pop	{r4, r5, r6}
    c470:	4770      	bx	lr
    c472:	460c      	mov	r4, r1
    c474:	4603      	mov	r3, r0
    c476:	681e      	ldr	r6, [r3, #0]
    c478:	6825      	ldr	r5, [r4, #0]
    c47a:	4618      	mov	r0, r3
    c47c:	42ae      	cmp	r6, r5
    c47e:	4621      	mov	r1, r4
    c480:	f103 0304 	add.w	r3, r3, #4
    c484:	f104 0404 	add.w	r4, r4, #4
    c488:	d104      	bne.n	c494 <memcmp+0x54>
    c48a:	3a04      	subs	r2, #4
    c48c:	2a03      	cmp	r2, #3
    c48e:	4618      	mov	r0, r3
    c490:	4621      	mov	r1, r4
    c492:	d8f0      	bhi.n	c476 <memcmp+0x36>
    c494:	2a00      	cmp	r2, #0
    c496:	d1da      	bne.n	c44e <memcmp+0xe>
    c498:	4610      	mov	r0, r2
    c49a:	e7e8      	b.n	c46e <memcmp+0x2e>
    c49c:	1b60      	subs	r0, r4, r5
    c49e:	bc70      	pop	{r4, r5, r6}
    c4a0:	4770      	bx	lr
    c4a2:	bf00      	nop

0000c4a4 <memcpy>:
    c4a4:	4684      	mov	ip, r0
    c4a6:	ea41 0300 	orr.w	r3, r1, r0
    c4aa:	f013 0303 	ands.w	r3, r3, #3
    c4ae:	d149      	bne.n	c544 <memcpy+0xa0>
    c4b0:	3a40      	subs	r2, #64	; 0x40
    c4b2:	d323      	bcc.n	c4fc <memcpy+0x58>
    c4b4:	680b      	ldr	r3, [r1, #0]
    c4b6:	6003      	str	r3, [r0, #0]
    c4b8:	684b      	ldr	r3, [r1, #4]
    c4ba:	6043      	str	r3, [r0, #4]
    c4bc:	688b      	ldr	r3, [r1, #8]
    c4be:	6083      	str	r3, [r0, #8]
    c4c0:	68cb      	ldr	r3, [r1, #12]
    c4c2:	60c3      	str	r3, [r0, #12]
    c4c4:	690b      	ldr	r3, [r1, #16]
    c4c6:	6103      	str	r3, [r0, #16]
    c4c8:	694b      	ldr	r3, [r1, #20]
    c4ca:	6143      	str	r3, [r0, #20]
    c4cc:	698b      	ldr	r3, [r1, #24]
    c4ce:	6183      	str	r3, [r0, #24]
    c4d0:	69cb      	ldr	r3, [r1, #28]
    c4d2:	61c3      	str	r3, [r0, #28]
    c4d4:	6a0b      	ldr	r3, [r1, #32]
    c4d6:	6203      	str	r3, [r0, #32]
    c4d8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    c4da:	6243      	str	r3, [r0, #36]	; 0x24
    c4dc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    c4de:	6283      	str	r3, [r0, #40]	; 0x28
    c4e0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    c4e2:	62c3      	str	r3, [r0, #44]	; 0x2c
    c4e4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    c4e6:	6303      	str	r3, [r0, #48]	; 0x30
    c4e8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    c4ea:	6343      	str	r3, [r0, #52]	; 0x34
    c4ec:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    c4ee:	6383      	str	r3, [r0, #56]	; 0x38
    c4f0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    c4f2:	63c3      	str	r3, [r0, #60]	; 0x3c
    c4f4:	3040      	adds	r0, #64	; 0x40
    c4f6:	3140      	adds	r1, #64	; 0x40
    c4f8:	3a40      	subs	r2, #64	; 0x40
    c4fa:	d2db      	bcs.n	c4b4 <memcpy+0x10>
    c4fc:	3230      	adds	r2, #48	; 0x30
    c4fe:	d30b      	bcc.n	c518 <memcpy+0x74>
    c500:	680b      	ldr	r3, [r1, #0]
    c502:	6003      	str	r3, [r0, #0]
    c504:	684b      	ldr	r3, [r1, #4]
    c506:	6043      	str	r3, [r0, #4]
    c508:	688b      	ldr	r3, [r1, #8]
    c50a:	6083      	str	r3, [r0, #8]
    c50c:	68cb      	ldr	r3, [r1, #12]
    c50e:	60c3      	str	r3, [r0, #12]
    c510:	3010      	adds	r0, #16
    c512:	3110      	adds	r1, #16
    c514:	3a10      	subs	r2, #16
    c516:	d2f3      	bcs.n	c500 <memcpy+0x5c>
    c518:	320c      	adds	r2, #12
    c51a:	d305      	bcc.n	c528 <memcpy+0x84>
    c51c:	f851 3b04 	ldr.w	r3, [r1], #4
    c520:	f840 3b04 	str.w	r3, [r0], #4
    c524:	3a04      	subs	r2, #4
    c526:	d2f9      	bcs.n	c51c <memcpy+0x78>
    c528:	3204      	adds	r2, #4
    c52a:	d008      	beq.n	c53e <memcpy+0x9a>
    c52c:	07d2      	lsls	r2, r2, #31
    c52e:	bf1c      	itt	ne
    c530:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c534:	f800 3b01 	strbne.w	r3, [r0], #1
    c538:	d301      	bcc.n	c53e <memcpy+0x9a>
    c53a:	880b      	ldrh	r3, [r1, #0]
    c53c:	8003      	strh	r3, [r0, #0]
    c53e:	4660      	mov	r0, ip
    c540:	4770      	bx	lr
    c542:	bf00      	nop
    c544:	2a08      	cmp	r2, #8
    c546:	d313      	bcc.n	c570 <memcpy+0xcc>
    c548:	078b      	lsls	r3, r1, #30
    c54a:	d0b1      	beq.n	c4b0 <memcpy+0xc>
    c54c:	f010 0303 	ands.w	r3, r0, #3
    c550:	d0ae      	beq.n	c4b0 <memcpy+0xc>
    c552:	f1c3 0304 	rsb	r3, r3, #4
    c556:	1ad2      	subs	r2, r2, r3
    c558:	07db      	lsls	r3, r3, #31
    c55a:	bf1c      	itt	ne
    c55c:	f811 3b01 	ldrbne.w	r3, [r1], #1
    c560:	f800 3b01 	strbne.w	r3, [r0], #1
    c564:	d3a4      	bcc.n	c4b0 <memcpy+0xc>
    c566:	f831 3b02 	ldrh.w	r3, [r1], #2
    c56a:	f820 3b02 	strh.w	r3, [r0], #2
    c56e:	e79f      	b.n	c4b0 <memcpy+0xc>
    c570:	3a04      	subs	r2, #4
    c572:	d3d9      	bcc.n	c528 <memcpy+0x84>
    c574:	3a01      	subs	r2, #1
    c576:	f811 3b01 	ldrb.w	r3, [r1], #1
    c57a:	f800 3b01 	strb.w	r3, [r0], #1
    c57e:	d2f9      	bcs.n	c574 <memcpy+0xd0>
    c580:	780b      	ldrb	r3, [r1, #0]
    c582:	7003      	strb	r3, [r0, #0]
    c584:	784b      	ldrb	r3, [r1, #1]
    c586:	7043      	strb	r3, [r0, #1]
    c588:	788b      	ldrb	r3, [r1, #2]
    c58a:	7083      	strb	r3, [r0, #2]
    c58c:	4660      	mov	r0, ip
    c58e:	4770      	bx	lr

0000c590 <strlen>:
    c590:	f020 0103 	bic.w	r1, r0, #3
    c594:	f010 0003 	ands.w	r0, r0, #3
    c598:	f1c0 0000 	rsb	r0, r0, #0
    c59c:	f851 3b04 	ldr.w	r3, [r1], #4
    c5a0:	f100 0c04 	add.w	ip, r0, #4
    c5a4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    c5a8:	f06f 0200 	mvn.w	r2, #0
    c5ac:	bf1c      	itt	ne
    c5ae:	fa22 f20c 	lsrne.w	r2, r2, ip
    c5b2:	4313      	orrne	r3, r2
    c5b4:	f04f 0c01 	mov.w	ip, #1
    c5b8:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    c5bc:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    c5c0:	eba3 020c 	sub.w	r2, r3, ip
    c5c4:	ea22 0203 	bic.w	r2, r2, r3
    c5c8:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    c5cc:	bf04      	itt	eq
    c5ce:	f851 3b04 	ldreq.w	r3, [r1], #4
    c5d2:	3004      	addeq	r0, #4
    c5d4:	d0f4      	beq.n	c5c0 <strlen+0x30>
    c5d6:	f1c2 0100 	rsb	r1, r2, #0
    c5da:	ea02 0201 	and.w	r2, r2, r1
    c5de:	fab2 f282 	clz	r2, r2
    c5e2:	f1c2 021f 	rsb	r2, r2, #31
    c5e6:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    c5ea:	4770      	bx	lr
    c5ec:	00000043 	.word	0x00000043

0000c5f0 <_global_impure_ptr>:
    c5f0:	10000020                                 ...

0000c5f4 <advertising_channels>:
    c5f4:	00270c00                                ..'.

0000c5f8 <data_channels>:
    c5f8:	04030201 08070605 0d0b0a09 11100f0e     ................
    c608:	15141312 19181716 1d1c1b1a 21201f1e     .............. !
    c618:	25242322 00000026                       "#$%&...

0000c620 <payload>:
    c620:	aaaaaaca aaaaaaaa aaaaaaaa aaaaaaaa     ................
    c630:	aaaaaaaa                                ....

0000c634 <whitening>:
    c634:	01010101 01000100 00000100 00010000     ................
    c644:	01000101 00010101 01010100 00010000     ................
    c654:	01010001 01010000 00000000 00010100     ................
    c664:	01000101 01010100 00000100 00010100     ................
    c674:	00000100 00000100 00000000 01000001     ................
    c684:	01010000 00000100 01010101 01010100     ................
    c694:	00000000 01010101 00010101 01010000     ................
    c6a4:	01010001 01000000 00000100 00010001     ................

0000c6b4 <whitening_index>:
    c6b4:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    c6c4:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    c6d4:	5a541b28 662f703f                       (.TZ?p/f

0000c6dc <hop_interval_lut>:
    c6dc:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    c6ec:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    c6fc:	120c0916 00000024                       ....$...

0000c704 <whitening_word>:
    c704:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    c714:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    c724:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    c734:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    c744:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    c754:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    c764:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    c774:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    c784:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    c794:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    c7a4:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    c7b4:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    c7c4:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    c7d4:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    c7e4:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    c7f4:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    c804:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    c814:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    c824:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    c834:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    c844:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    c854:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    c864:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    c874:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    c884:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    c894:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    c8a4:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    c8b4:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    c8c4:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    c8d4:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    c8e4:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    c8f4:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    c904:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    c914:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    c924:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    c934:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    c944:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    c954:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    c964:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    c974:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    c984:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    c994:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    c9a4:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    c9b4:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    c9c4:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    c9d4:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    c9e4:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    c9f4:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    ca04:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    ca14:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    ca24:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    ca34:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    ca44:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    ca54:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    ca64:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    ca74:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    ca84:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    ca94:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    caa4:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    cab4:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    cac4:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    cad4:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    cae4:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    caf4:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    cb04:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    cb14:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    cb24:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    cb34:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    cb44:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    cb54:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    cb64:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    cb74:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    cb84:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    cb94:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    cba4:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    cbb4:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    cbc4:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    cbd4:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    cbe4:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    cbf4:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    cc04:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    cc14:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    cc24:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    cc34:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    cc44:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    cc54:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    cc64:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    cc74:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    cc84:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    cc94:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    cca4:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    ccb4:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    ccc4:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    ccd4:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    cce4:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    ccf4:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    cd04:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    cd14:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    cd24:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    cd34:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    cd44:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    cd54:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    cd64:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    cd74:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    cd84:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    cd94:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    cda4:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    cdb4:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    cdc4:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    cdd4:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    cde4:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    cdf4:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    ce04:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    ce14:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    ce24:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    ce34:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    ce44:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    ce54:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    ce64:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    ce74:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

0000ce84 <compile_info>:
    ce84:	72656275 746f6f74 30322068 312d3531     ubertooth 2015-1
    ce94:	31522d30 6f722820 7740746f 69706965     0-R1 (root@weipi
    cea4:	2029676e 206e6f4d 20766f4e 31203720     ng) Mon Nov  7 1
    ceb4:	38353a33 2032333a 2054534b 36313032     3:58:32 KST 2016
    cec4:	00000000 35313032 2d30312d 00003152     ....2015-10-R1..
    ced4:	00000001 00000001 00000001 00000001     ................
    cee4:	ffff0900 ffffffff ff050102 0000ffff     ................
    cef4:	0985096c 0000099e 03010200 03000100     l...............
    cf04:	01020001 00000100 04020301 04020304     ................
    cf14:	03040304 00000203                       ........

0000cf1c <abDescriptors>:
    cf1c:	02000112 400000ff 60021d50 02010101     .......@P..`....
    cf2c:	02090103 01010020 096e8000 02000004     .... .....n.....
    cf3c:	000000ff 02820507 07000040 40020505     ........@......@
    cf4c:	03040000 035c0409 00740068 00700074     ......\.h.t.t.p.
    cf5c:	002f003a 0067002f 00740069 00750068     :././.g.i.t.h.u.
    cf6c:	002e0062 006f0063 002f006d 00720067     b...c.o.m./.g.r.
    cf7c:	00610065 00730074 006f0063 00740074     e.a.t.s.c.o.t.t.
    cf8c:	00610067 00670064 00740065 002f0073     g.a.d.g.e.t.s./.
    cf9c:	00620075 00720065 006f0074 0074006f     u.b.e.r.t.o.o.t.
    cfac:	031e0068 006c0062 00650075 006f0074     h...b.l.u.e.t.o.
    cfbc:	0074006f 005f0068 00780072 00780074     o.t.h._.r.x.t.x.
    cfcc:	00300312 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
    cfdc:	00000031 6361387b 38613734 63632d38     1...{8ac47a88-cc
    cfec:	342d3632 2d396161 62373838 6332342d     26-4aa9-887b-42c
    cffc:	66633861 36613730 00007d33 00009f5d     a8cf07a63}..]...
    d00c:	00009f91 00009fa9 0000a091 00009f49     ............I...
    d01c:	00009f49 00009f49 0000a0f5 00009f91     I...I...........
    d02c:	0000a10d 00009f49 00009f49 00009f49     ....I...I...I...
    d03c:	00009f5d 00009f91 0000a1e1 0000a3a1     ]...............
    d04c:	0000a261 0000a325                       a...%...

0000d054 <abExtendedOsFeatureDescriptor>:
    d054:	00000028 00040100 00000001 00000000     (...............
    d064:	49570100 4253554e 00000000 00000000     ..WINUSB........
    d074:	00000000 00000000                       ........

0000d07c <_init>:
    d07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d07e:	bf00      	nop
    d080:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d082:	bc08      	pop	{r3}
    d084:	469e      	mov	lr, r3
    d086:	4770      	bx	lr

0000d088 <__init_array_start>:
    d088:	00004215 	.word	0x00004215

0000d08c <__frame_dummy_init_array_entry>:
    d08c:	000040f1                                .@..

0000d090 <_fini>:
    d090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d092:	bf00      	nop
    d094:	bcf8      	pop	{r3, r4, r5, r6, r7}
    d096:	bc08      	pop	{r3}
    d098:	469e      	mov	lr, r3
    d09a:	4770      	bx	lr

0000d09c <__fini_array_start>:
    d09c:	000040cd 	.word	0x000040cd
