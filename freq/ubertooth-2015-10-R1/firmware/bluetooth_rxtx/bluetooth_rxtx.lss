
bluetooth_rxtx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008260  00004000  00004000  00004000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .persistent   00000020  10000000  10000000  00018000  2**0
                  ALLOC
  2 .data         0000093e  10000020  0000c260  00010020  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00002920  10000960  0000cb9e  00010960  2**3
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  0001095e  2**0
                  CONTENTS, READONLY
  5 .comment      00000070  00000000  00000000  00010987  2**0
                  CONTENTS, READONLY
  6 .debug_frame  00001c9c  00000000  00000000  000109f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004fab  00000000  00000000  00012694  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001537  00000000  00000000  0001763f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000006c8  00000000  00000000  00018b76  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005e8  00000000  00000000  0001923e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002733  00000000  00000000  00019826  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00002205  00000000  00000000  0001bf59  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00004000 <_NVIC_Handler_Functions>:
    4000:	e0 3f 00 10 95 96 00 00 01 97 00 00 01 97 00 00     .?..............
    4010:	01 97 00 00 01 97 00 00 01 97 00 00 00 00 00 00     ................
    4020:	00 00 00 00 00 00 00 00 00 00 00 00 01 97 00 00     ................
    4030:	01 97 00 00 00 00 00 00 01 97 00 00 01 97 00 00     ................
    4040:	01 97 00 00 b9 53 00 00 01 97 00 00 01 97 00 00     .....S..........
    4050:	01 97 00 00 01 97 00 00 01 97 00 00 01 97 00 00     ................
    4060:	01 97 00 00 01 97 00 00 01 97 00 00 01 97 00 00     ................
    4070:	01 97 00 00 01 97 00 00 01 97 00 00 01 97 00 00     ................
    4080:	01 97 00 00 01 97 00 00 01 97 00 00 01 97 00 00     ................
    4090:	01 97 00 00 d5 54 00 00 01 97 00 00 01 97 00 00     .....T..........
    40a0:	89 96 00 00 01 97 00 00 a1 59 00 00 01 97 00 00     .........Y......
    40b0:	01 97 00 00 01 97 00 00 01 97 00 00 01 97 00 00     ................
    40c0:	01 97 00 00 01 97 00 00 01 97 00 00                 ............

000040cc <__do_global_dtors_aux>:
    40cc:	b510      	push	{r4, lr}
    40ce:	4c05      	ldr	r4, [pc, #20]	; (40e4 <__do_global_dtors_aux+0x18>)
    40d0:	7823      	ldrb	r3, [r4, #0]
    40d2:	b933      	cbnz	r3, 40e2 <__do_global_dtors_aux+0x16>
    40d4:	4b04      	ldr	r3, [pc, #16]	; (40e8 <__do_global_dtors_aux+0x1c>)
    40d6:	b113      	cbz	r3, 40de <__do_global_dtors_aux+0x12>
    40d8:	4804      	ldr	r0, [pc, #16]	; (40ec <__do_global_dtors_aux+0x20>)
    40da:	f3af 8000 	nop.w
    40de:	2301      	movs	r3, #1
    40e0:	7023      	strb	r3, [r4, #0]
    40e2:	bd10      	pop	{r4, pc}
    40e4:	10000960 	.word	0x10000960
    40e8:	00000000 	.word	0x00000000
    40ec:	0000c23c 	.word	0x0000c23c

000040f0 <frame_dummy>:
    40f0:	4b08      	ldr	r3, [pc, #32]	; (4114 <frame_dummy+0x24>)
    40f2:	b510      	push	{r4, lr}
    40f4:	b11b      	cbz	r3, 40fe <frame_dummy+0xe>
    40f6:	4808      	ldr	r0, [pc, #32]	; (4118 <frame_dummy+0x28>)
    40f8:	4908      	ldr	r1, [pc, #32]	; (411c <frame_dummy+0x2c>)
    40fa:	f3af 8000 	nop.w
    40fe:	4808      	ldr	r0, [pc, #32]	; (4120 <frame_dummy+0x30>)
    4100:	6803      	ldr	r3, [r0, #0]
    4102:	b903      	cbnz	r3, 4106 <frame_dummy+0x16>
    4104:	bd10      	pop	{r4, pc}
    4106:	4b07      	ldr	r3, [pc, #28]	; (4124 <frame_dummy+0x34>)
    4108:	2b00      	cmp	r3, #0
    410a:	d0fb      	beq.n	4104 <frame_dummy+0x14>
    410c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4110:	4718      	bx	r3
    4112:	bf00      	nop
    4114:	00000000 	.word	0x00000000
    4118:	0000c23c 	.word	0x0000c23c
    411c:	10000964 	.word	0x10000964
    4120:	10000960 	.word	0x10000960
    4124:	00000000 	.word	0x00000000

00004128 <__libc_init_array>:
    4128:	b570      	push	{r4, r5, r6, lr}
    412a:	4e0f      	ldr	r6, [pc, #60]	; (4168 <__libc_init_array+0x40>)
    412c:	4d0f      	ldr	r5, [pc, #60]	; (416c <__libc_init_array+0x44>)
    412e:	1b76      	subs	r6, r6, r5
    4130:	10b6      	asrs	r6, r6, #2
    4132:	bf18      	it	ne
    4134:	2400      	movne	r4, #0
    4136:	d005      	beq.n	4144 <__libc_init_array+0x1c>
    4138:	3401      	adds	r4, #1
    413a:	f855 3b04 	ldr.w	r3, [r5], #4
    413e:	4798      	blx	r3
    4140:	42a6      	cmp	r6, r4
    4142:	d1f9      	bne.n	4138 <__libc_init_array+0x10>
    4144:	4e0a      	ldr	r6, [pc, #40]	; (4170 <__libc_init_array+0x48>)
    4146:	4d0b      	ldr	r5, [pc, #44]	; (4174 <__libc_init_array+0x4c>)
    4148:	f008 f878 	bl	c23c <_init>
    414c:	1b76      	subs	r6, r6, r5
    414e:	10b6      	asrs	r6, r6, #2
    4150:	bf18      	it	ne
    4152:	2400      	movne	r4, #0
    4154:	d006      	beq.n	4164 <__libc_init_array+0x3c>
    4156:	3401      	adds	r4, #1
    4158:	f855 3b04 	ldr.w	r3, [r5], #4
    415c:	4798      	blx	r3
    415e:	42a6      	cmp	r6, r4
    4160:	d1f9      	bne.n	4156 <__libc_init_array+0x2e>
    4162:	bd70      	pop	{r4, r5, r6, pc}
    4164:	bd70      	pop	{r4, r5, r6, pc}
    4166:	bf00      	nop
    4168:	0000c248 	.word	0x0000c248
    416c:	0000c248 	.word	0x0000c248
    4170:	0000c250 	.word	0x0000c250
    4174:	0000c248 	.word	0x0000c248

00004178 <memset>:
    4178:	b470      	push	{r4, r5, r6}
    417a:	0784      	lsls	r4, r0, #30
    417c:	d046      	beq.n	420c <memset+0x94>
    417e:	1e54      	subs	r4, r2, #1
    4180:	2a00      	cmp	r2, #0
    4182:	d041      	beq.n	4208 <memset+0x90>
    4184:	b2cd      	uxtb	r5, r1
    4186:	4603      	mov	r3, r0
    4188:	e002      	b.n	4190 <memset+0x18>
    418a:	1e62      	subs	r2, r4, #1
    418c:	b3e4      	cbz	r4, 4208 <memset+0x90>
    418e:	4614      	mov	r4, r2
    4190:	f803 5b01 	strb.w	r5, [r3], #1
    4194:	079a      	lsls	r2, r3, #30
    4196:	d1f8      	bne.n	418a <memset+0x12>
    4198:	2c03      	cmp	r4, #3
    419a:	d92e      	bls.n	41fa <memset+0x82>
    419c:	b2cd      	uxtb	r5, r1
    419e:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    41a2:	2c0f      	cmp	r4, #15
    41a4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    41a8:	d919      	bls.n	41de <memset+0x66>
    41aa:	4626      	mov	r6, r4
    41ac:	f103 0210 	add.w	r2, r3, #16
    41b0:	3e10      	subs	r6, #16
    41b2:	2e0f      	cmp	r6, #15
    41b4:	f842 5c10 	str.w	r5, [r2, #-16]
    41b8:	f842 5c0c 	str.w	r5, [r2, #-12]
    41bc:	f842 5c08 	str.w	r5, [r2, #-8]
    41c0:	f842 5c04 	str.w	r5, [r2, #-4]
    41c4:	f102 0210 	add.w	r2, r2, #16
    41c8:	d8f2      	bhi.n	41b0 <memset+0x38>
    41ca:	f1a4 0210 	sub.w	r2, r4, #16
    41ce:	f022 020f 	bic.w	r2, r2, #15
    41d2:	f004 040f 	and.w	r4, r4, #15
    41d6:	3210      	adds	r2, #16
    41d8:	2c03      	cmp	r4, #3
    41da:	4413      	add	r3, r2
    41dc:	d90d      	bls.n	41fa <memset+0x82>
    41de:	461e      	mov	r6, r3
    41e0:	4622      	mov	r2, r4
    41e2:	3a04      	subs	r2, #4
    41e4:	2a03      	cmp	r2, #3
    41e6:	f846 5b04 	str.w	r5, [r6], #4
    41ea:	d8fa      	bhi.n	41e2 <memset+0x6a>
    41ec:	1f22      	subs	r2, r4, #4
    41ee:	f022 0203 	bic.w	r2, r2, #3
    41f2:	3204      	adds	r2, #4
    41f4:	4413      	add	r3, r2
    41f6:	f004 0403 	and.w	r4, r4, #3
    41fa:	b12c      	cbz	r4, 4208 <memset+0x90>
    41fc:	b2c9      	uxtb	r1, r1
    41fe:	441c      	add	r4, r3
    4200:	f803 1b01 	strb.w	r1, [r3], #1
    4204:	42a3      	cmp	r3, r4
    4206:	d1fb      	bne.n	4200 <memset+0x88>
    4208:	bc70      	pop	{r4, r5, r6}
    420a:	4770      	bx	lr
    420c:	4614      	mov	r4, r2
    420e:	4603      	mov	r3, r0
    4210:	e7c2      	b.n	4198 <memset+0x20>
    4212:	bf00      	nop

00004214 <register_fini>:
    4214:	4b02      	ldr	r3, [pc, #8]	; (4220 <register_fini+0xc>)
    4216:	b113      	cbz	r3, 421e <register_fini+0xa>
    4218:	4802      	ldr	r0, [pc, #8]	; (4224 <register_fini+0x10>)
    421a:	f000 b805 	b.w	4228 <atexit>
    421e:	4770      	bx	lr
    4220:	00000000 	.word	0x00000000
    4224:	00004235 	.word	0x00004235

00004228 <atexit>:
    4228:	4601      	mov	r1, r0
    422a:	2000      	movs	r0, #0
    422c:	4602      	mov	r2, r0
    422e:	4603      	mov	r3, r0
    4230:	f000 b816 	b.w	4260 <__register_exitproc>

00004234 <__libc_fini_array>:
    4234:	b538      	push	{r3, r4, r5, lr}
    4236:	4b08      	ldr	r3, [pc, #32]	; (4258 <__libc_fini_array+0x24>)
    4238:	4d08      	ldr	r5, [pc, #32]	; (425c <__libc_fini_array+0x28>)
    423a:	1aed      	subs	r5, r5, r3
    423c:	10ac      	asrs	r4, r5, #2
    423e:	bf18      	it	ne
    4240:	18ed      	addne	r5, r5, r3
    4242:	d005      	beq.n	4250 <__libc_fini_array+0x1c>
    4244:	3c01      	subs	r4, #1
    4246:	f855 3d04 	ldr.w	r3, [r5, #-4]!
    424a:	4798      	blx	r3
    424c:	2c00      	cmp	r4, #0
    424e:	d1f9      	bne.n	4244 <__libc_fini_array+0x10>
    4250:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    4254:	f007 bffc 	b.w	c250 <_fini>
    4258:	0000c25c 	.word	0x0000c25c
    425c:	0000c260 	.word	0x0000c260

00004260 <__register_exitproc>:
    4260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4264:	4c25      	ldr	r4, [pc, #148]	; (42fc <__register_exitproc+0x9c>)
    4266:	4606      	mov	r6, r0
    4268:	6825      	ldr	r5, [r4, #0]
    426a:	4688      	mov	r8, r1
    426c:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    4270:	4692      	mov	sl, r2
    4272:	4699      	mov	r9, r3
    4274:	b3c4      	cbz	r4, 42e8 <__register_exitproc+0x88>
    4276:	6860      	ldr	r0, [r4, #4]
    4278:	281f      	cmp	r0, #31
    427a:	dc17      	bgt.n	42ac <__register_exitproc+0x4c>
    427c:	1c41      	adds	r1, r0, #1
    427e:	b176      	cbz	r6, 429e <__register_exitproc+0x3e>
    4280:	eb04 0380 	add.w	r3, r4, r0, lsl #2
    4284:	f8c3 a088 	str.w	sl, [r3, #136]	; 0x88
    4288:	f8d4 5188 	ldr.w	r5, [r4, #392]	; 0x188
    428c:	2201      	movs	r2, #1
    428e:	4082      	lsls	r2, r0
    4290:	4315      	orrs	r5, r2
    4292:	2e02      	cmp	r6, #2
    4294:	f8c4 5188 	str.w	r5, [r4, #392]	; 0x188
    4298:	f8c3 9108 	str.w	r9, [r3, #264]	; 0x108
    429c:	d01e      	beq.n	42dc <__register_exitproc+0x7c>
    429e:	1c83      	adds	r3, r0, #2
    42a0:	6061      	str	r1, [r4, #4]
    42a2:	2000      	movs	r0, #0
    42a4:	f844 8023 	str.w	r8, [r4, r3, lsl #2]
    42a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42ac:	4b14      	ldr	r3, [pc, #80]	; (4300 <__register_exitproc+0xa0>)
    42ae:	b303      	cbz	r3, 42f2 <__register_exitproc+0x92>
    42b0:	f44f 70c8 	mov.w	r0, #400	; 0x190
    42b4:	f3af 8000 	nop.w
    42b8:	4604      	mov	r4, r0
    42ba:	b1d0      	cbz	r0, 42f2 <__register_exitproc+0x92>
    42bc:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    42c0:	2700      	movs	r7, #0
    42c2:	e884 0088 	stmia.w	r4, {r3, r7}
    42c6:	4638      	mov	r0, r7
    42c8:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42cc:	2101      	movs	r1, #1
    42ce:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    42d2:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    42d6:	2e00      	cmp	r6, #0
    42d8:	d0e1      	beq.n	429e <__register_exitproc+0x3e>
    42da:	e7d1      	b.n	4280 <__register_exitproc+0x20>
    42dc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
    42e0:	431a      	orrs	r2, r3
    42e2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    42e6:	e7da      	b.n	429e <__register_exitproc+0x3e>
    42e8:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    42ec:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    42f0:	e7c1      	b.n	4276 <__register_exitproc+0x16>
    42f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    42f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    42fa:	bf00      	nop
    42fc:	0000b7c4 	.word	0x0000b7c4
    4300:	00000000 	.word	0x00000000

00004304 <rssi_reset>:
int8_t rssi_min;
uint8_t rssi_count = 0;
int32_t rssi_sum = 0;

static void rssi_reset(void)
{
    4304:	b480      	push	{r7}
    4306:	af00      	add	r7, sp, #0
	rssi_count = 0;
    4308:	4b07      	ldr	r3, [pc, #28]	; (4328 <rssi_reset+0x24>)
    430a:	2200      	movs	r2, #0
    430c:	701a      	strb	r2, [r3, #0]
	rssi_sum = 0;
    430e:	4b07      	ldr	r3, [pc, #28]	; (432c <rssi_reset+0x28>)
    4310:	2200      	movs	r2, #0
    4312:	601a      	str	r2, [r3, #0]
	rssi_max = INT8_MIN;
    4314:	4b06      	ldr	r3, [pc, #24]	; (4330 <rssi_reset+0x2c>)
    4316:	2280      	movs	r2, #128	; 0x80
    4318:	701a      	strb	r2, [r3, #0]
	rssi_min = INT8_MAX;
    431a:	4b06      	ldr	r3, [pc, #24]	; (4334 <rssi_reset+0x30>)
    431c:	227f      	movs	r2, #127	; 0x7f
    431e:	701a      	strb	r2, [r3, #0]
}
    4320:	46bd      	mov	sp, r7
    4322:	f85d 7b04 	ldr.w	r7, [sp], #4
    4326:	4770      	bx	lr
    4328:	10000a49 	.word	0x10000a49
    432c:	10000a4c 	.word	0x10000a4c
    4330:	10000b04 	.word	0x10000b04
    4334:	10000bb8 	.word	0x10000bb8

00004338 <rssi_add>:

static void rssi_add(int8_t v)
{
    4338:	b480      	push	{r7}
    433a:	b083      	sub	sp, #12
    433c:	af00      	add	r7, sp, #0
    433e:	4603      	mov	r3, r0
    4340:	71fb      	strb	r3, [r7, #7]
	rssi_max = (v > rssi_max) ? v : rssi_max;
    4342:	4b14      	ldr	r3, [pc, #80]	; (4394 <rssi_add+0x5c>)
    4344:	781b      	ldrb	r3, [r3, #0]
    4346:	b25a      	sxtb	r2, r3
    4348:	f997 3007 	ldrsb.w	r3, [r7, #7]
    434c:	4293      	cmp	r3, r2
    434e:	bfb8      	it	lt
    4350:	4613      	movlt	r3, r2
    4352:	b2da      	uxtb	r2, r3
    4354:	4b0f      	ldr	r3, [pc, #60]	; (4394 <rssi_add+0x5c>)
    4356:	701a      	strb	r2, [r3, #0]
	rssi_min = (v < rssi_min) ? v : rssi_min;
    4358:	4b0f      	ldr	r3, [pc, #60]	; (4398 <rssi_add+0x60>)
    435a:	781b      	ldrb	r3, [r3, #0]
    435c:	b25a      	sxtb	r2, r3
    435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4362:	4293      	cmp	r3, r2
    4364:	bfa8      	it	ge
    4366:	4613      	movge	r3, r2
    4368:	b2da      	uxtb	r2, r3
    436a:	4b0b      	ldr	r3, [pc, #44]	; (4398 <rssi_add+0x60>)
    436c:	701a      	strb	r2, [r3, #0]
	rssi_sum += ((int32_t)v * 256);  // scaled int math (x256)
    436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4372:	021a      	lsls	r2, r3, #8
    4374:	4b09      	ldr	r3, [pc, #36]	; (439c <rssi_add+0x64>)
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	4413      	add	r3, r2
    437a:	4a08      	ldr	r2, [pc, #32]	; (439c <rssi_add+0x64>)
    437c:	6013      	str	r3, [r2, #0]
	rssi_count += 1;
    437e:	4b08      	ldr	r3, [pc, #32]	; (43a0 <rssi_add+0x68>)
    4380:	781b      	ldrb	r3, [r3, #0]
    4382:	3301      	adds	r3, #1
    4384:	b2da      	uxtb	r2, r3
    4386:	4b06      	ldr	r3, [pc, #24]	; (43a0 <rssi_add+0x68>)
    4388:	701a      	strb	r2, [r3, #0]
}
    438a:	370c      	adds	r7, #12
    438c:	46bd      	mov	sp, r7
    438e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4392:	4770      	bx	lr
    4394:	10000b04 	.word	0x10000b04
    4398:	10000bb8 	.word	0x10000bb8
    439c:	10000a4c 	.word	0x10000a4c
    43a0:	10000a49 	.word	0x10000a49

000043a4 <rssi_iir_update>:

/* For sweep mode, update IIR per channel. Otherwise, use single value. */
static void rssi_iir_update(void)
{
    43a4:	b480      	push	{r7}
    43a6:	b085      	sub	sp, #20
    43a8:	af00      	add	r7, sp, #0
	int32_t avg;
	int32_t rssi_iir_acc;

	/* Use array to track 79 Bluetooth channels, or just first
	 * slot of array if not sweeping. */
	if (hop_mode > 0)
    43aa:	4b1f      	ldr	r3, [pc, #124]	; (4428 <rssi_iir_update+0x84>)
    43ac:	781b      	ldrb	r3, [r3, #0]
    43ae:	2b00      	cmp	r3, #0
    43b0:	d006      	beq.n	43c0 <rssi_iir_update+0x1c>
		i = channel - 2402;
    43b2:	4b1e      	ldr	r3, [pc, #120]	; (442c <rssi_iir_update+0x88>)
    43b4:	881b      	ldrh	r3, [r3, #0]
    43b6:	b29b      	uxth	r3, r3
    43b8:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    43bc:	60fb      	str	r3, [r7, #12]
    43be:	e001      	b.n	43c4 <rssi_iir_update+0x20>
	else
		i = 0;
    43c0:	2300      	movs	r3, #0
    43c2:	60fb      	str	r3, [r7, #12]

	// IIR using scaled int math (x256)
	if (rssi_count != 0)
    43c4:	4b1a      	ldr	r3, [pc, #104]	; (4430 <rssi_iir_update+0x8c>)
    43c6:	781b      	ldrb	r3, [r3, #0]
    43c8:	2b00      	cmp	r3, #0
    43ca:	d008      	beq.n	43de <rssi_iir_update+0x3a>
		avg = (rssi_sum  + 128) / rssi_count;
    43cc:	4b19      	ldr	r3, [pc, #100]	; (4434 <rssi_iir_update+0x90>)
    43ce:	681b      	ldr	r3, [r3, #0]
    43d0:	3380      	adds	r3, #128	; 0x80
    43d2:	4a17      	ldr	r2, [pc, #92]	; (4430 <rssi_iir_update+0x8c>)
    43d4:	7812      	ldrb	r2, [r2, #0]
    43d6:	fb93 f3f2 	sdiv	r3, r3, r2
    43da:	60bb      	str	r3, [r7, #8]
    43dc:	e001      	b.n	43e2 <rssi_iir_update+0x3e>
	else
		avg = 0; // really an error
    43de:	2300      	movs	r3, #0
    43e0:	60bb      	str	r3, [r7, #8]
	rssi_iir_acc = rssi_iir[i] * (256-RSSI_IIR_ALPHA);
    43e2:	4a15      	ldr	r2, [pc, #84]	; (4438 <rssi_iir_update+0x94>)
    43e4:	68fb      	ldr	r3, [r7, #12]
    43e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    43ea:	b21a      	sxth	r2, r3
    43ec:	4613      	mov	r3, r2
    43ee:	019b      	lsls	r3, r3, #6
    43f0:	1a9b      	subs	r3, r3, r2
    43f2:	009b      	lsls	r3, r3, #2
    43f4:	4413      	add	r3, r2
    43f6:	607b      	str	r3, [r7, #4]
	rssi_iir_acc += avg * RSSI_IIR_ALPHA;
    43f8:	68ba      	ldr	r2, [r7, #8]
    43fa:	4613      	mov	r3, r2
    43fc:	005b      	lsls	r3, r3, #1
    43fe:	4413      	add	r3, r2
    4400:	687a      	ldr	r2, [r7, #4]
    4402:	4413      	add	r3, r2
    4404:	607b      	str	r3, [r7, #4]
	rssi_iir[i] = (int16_t)((rssi_iir_acc + 128) / 256);
    4406:	687b      	ldr	r3, [r7, #4]
    4408:	3380      	adds	r3, #128	; 0x80
    440a:	2b00      	cmp	r3, #0
    440c:	da00      	bge.n	4410 <rssi_iir_update+0x6c>
    440e:	33ff      	adds	r3, #255	; 0xff
    4410:	121b      	asrs	r3, r3, #8
    4412:	b299      	uxth	r1, r3
    4414:	4a08      	ldr	r2, [pc, #32]	; (4438 <rssi_iir_update+0x94>)
    4416:	68fb      	ldr	r3, [r7, #12]
    4418:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
    441c:	3714      	adds	r7, #20
    441e:	46bd      	mov	sp, r7
    4420:	f85d 7b04 	ldr.w	r7, [sp], #4
    4424:	4770      	bx	lr
    4426:	bf00      	nop
    4428:	1000097c 	.word	0x1000097c
    442c:	1000049c 	.word	0x1000049c
    4430:	10000a49 	.word	0x10000a49
    4434:	10000a4c 	.word	0x10000a4c
    4438:	100009a0 	.word	0x100009a0

0000443c <cs_threshold_set>:
/* Set CC2400 carrier sense threshold and store value to
 * global. CC2400 RSSI is determined by 54dBm + level. CS threshold is
 * in 4dBm steps, so the provided level is rounded to the nearest
 * multiple of 4 by adding 56. Useful range is -100 to -20. */
static void cs_threshold_set(int8_t level, u8 samples)
{
    443c:	b580      	push	{r7, lr}
    443e:	b082      	sub	sp, #8
    4440:	af00      	add	r7, sp, #0
    4442:	4603      	mov	r3, r0
    4444:	460a      	mov	r2, r1
    4446:	71fb      	strb	r3, [r7, #7]
    4448:	4613      	mov	r3, r2
    444a:	71bb      	strb	r3, [r7, #6]
	level = MIN(MAX(level,-120),(-20));
    444c:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4450:	f113 0f14 	cmn.w	r3, #20
    4454:	d00d      	beq.n	4472 <cs_threshold_set+0x36>
    4456:	f997 3007 	ldrsb.w	r3, [r7, #7]
    445a:	f113 0f13 	cmn.w	r3, #19
    445e:	da08      	bge.n	4472 <cs_threshold_set+0x36>
    4460:	f997 3007 	ldrsb.w	r3, [r7, #7]
    4464:	f06f 0277 	mvn.w	r2, #119	; 0x77
    4468:	4293      	cmp	r3, r2
    446a:	bfb8      	it	lt
    446c:	4613      	movlt	r3, r2
    446e:	b2db      	uxtb	r3, r3
    4470:	e000      	b.n	4474 <cs_threshold_set+0x38>
    4472:	23ec      	movs	r3, #236	; 0xec
    4474:	71fb      	strb	r3, [r7, #7]
	cc2400_set(RSSI, (uint8_t)((level + 56) & (0x3f << 2)) | (samples&3));
    4476:	79fb      	ldrb	r3, [r7, #7]
    4478:	3338      	adds	r3, #56	; 0x38
    447a:	b2db      	uxtb	r3, r3
    447c:	b29b      	uxth	r3, r3
    447e:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
    4482:	b29a      	uxth	r2, r3
    4484:	79bb      	ldrb	r3, [r7, #6]
    4486:	b29b      	uxth	r3, r3
    4488:	f003 0303 	and.w	r3, r3, #3
    448c:	b29b      	uxth	r3, r3
    448e:	4313      	orrs	r3, r2
    4490:	b29b      	uxth	r3, r3
    4492:	b29b      	uxth	r3, r3
    4494:	2006      	movs	r0, #6
    4496:	4619      	mov	r1, r3
    4498:	f005 fb1a 	bl	9ad0 <cc2400_set>
	cs_threshold_cur = level;
    449c:	4a08      	ldr	r2, [pc, #32]	; (44c0 <cs_threshold_set+0x84>)
    449e:	79fb      	ldrb	r3, [r7, #7]
    44a0:	7013      	strb	r3, [r2, #0]
	cs_no_squelch = (level <= -120);
    44a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
    44a6:	f113 0f77 	cmn.w	r3, #119	; 0x77
    44aa:	bfb4      	ite	lt
    44ac:	2301      	movlt	r3, #1
    44ae:	2300      	movge	r3, #0
    44b0:	b2db      	uxtb	r3, r3
    44b2:	461a      	mov	r2, r3
    44b4:	4b03      	ldr	r3, [pc, #12]	; (44c4 <cs_threshold_set+0x88>)
    44b6:	701a      	strb	r2, [r3, #0]
}
    44b8:	3708      	adds	r7, #8
    44ba:	46bd      	mov	sp, r7
    44bc:	bd80      	pop	{r7, pc}
    44be:	bf00      	nop
    44c0:	1000044d 	.word	0x1000044d
    44c4:	1000097e 	.word	0x1000097e

000044c8 <enqueue>:

static int enqueue(u8 type, u8 *buf)
{
    44c8:	b580      	push	{r7, lr}
    44ca:	b088      	sub	sp, #32
    44cc:	af00      	add	r7, sp, #0
    44ce:	4603      	mov	r3, r0
    44d0:	6039      	str	r1, [r7, #0]
    44d2:	71fb      	strb	r3, [r7, #7]
	usb_pkt_rx *f = usb_enqueue();
    44d4:	f004 f894 	bl	8600 <usb_enqueue>
    44d8:	61f8      	str	r0, [r7, #28]

	/* fail if queue is full */
	if (f == NULL) {
    44da:	69fb      	ldr	r3, [r7, #28]
    44dc:	2b00      	cmp	r3, #0
    44de:	d109      	bne.n	44f4 <enqueue+0x2c>
		status |= FIFO_OVERFLOW;
    44e0:	4b59      	ldr	r3, [pc, #356]	; (4648 <enqueue+0x180>)
    44e2:	781b      	ldrb	r3, [r3, #0]
    44e4:	b2db      	uxtb	r3, r3
    44e6:	f043 0304 	orr.w	r3, r3, #4
    44ea:	b2da      	uxtb	r2, r3
    44ec:	4b56      	ldr	r3, [pc, #344]	; (4648 <enqueue+0x180>)
    44ee:	701a      	strb	r2, [r3, #0]
		return 0;
    44f0:	2300      	movs	r3, #0
    44f2:	e0a5      	b.n	4640 <enqueue+0x178>
	}

	f->pkt_type = type;
    44f4:	69fb      	ldr	r3, [r7, #28]
    44f6:	79fa      	ldrb	r2, [r7, #7]
    44f8:	701a      	strb	r2, [r3, #0]
	if(type == SPECAN) {
    44fa:	79fb      	ldrb	r3, [r7, #7]
    44fc:	2b04      	cmp	r3, #4
    44fe:	d113      	bne.n	4528 <enqueue+0x60>
		f->clkn_high = (clkn >> 20) & 0xff;
    4500:	4b52      	ldr	r3, [pc, #328]	; (464c <enqueue+0x184>)
    4502:	681b      	ldr	r3, [r3, #0]
    4504:	0d1b      	lsrs	r3, r3, #20
    4506:	b2da      	uxtb	r2, r3
    4508:	69fb      	ldr	r3, [r7, #28]
    450a:	70da      	strb	r2, [r3, #3]
		f->clk100ns = CLK100NS;
    450c:	4b4f      	ldr	r3, [pc, #316]	; (464c <enqueue+0x184>)
    450e:	681b      	ldr	r3, [r3, #0]
    4510:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4514:	f640 4235 	movw	r2, #3125	; 0xc35
    4518:	fb02 f203 	mul.w	r2, r2, r3
    451c:	4b4c      	ldr	r3, [pc, #304]	; (4650 <enqueue+0x188>)
    451e:	681b      	ldr	r3, [r3, #0]
    4520:	441a      	add	r2, r3
    4522:	69fb      	ldr	r3, [r7, #28]
    4524:	605a      	str	r2, [r3, #4]
    4526:	e008      	b.n	453a <enqueue+0x72>
	} else {
		f->clkn_high = idle_buf_clkn_high;
    4528:	4b4a      	ldr	r3, [pc, #296]	; (4654 <enqueue+0x18c>)
    452a:	681b      	ldr	r3, [r3, #0]
    452c:	b2da      	uxtb	r2, r3
    452e:	69fb      	ldr	r3, [r7, #28]
    4530:	70da      	strb	r2, [r3, #3]
		f->clk100ns = idle_buf_clk100ns;
    4532:	4b49      	ldr	r3, [pc, #292]	; (4658 <enqueue+0x190>)
    4534:	681a      	ldr	r2, [r3, #0]
    4536:	69fb      	ldr	r3, [r7, #28]
    4538:	605a      	str	r2, [r3, #4]
	}
	f->channel = idle_buf_channel - 2402;
    453a:	4b48      	ldr	r3, [pc, #288]	; (465c <enqueue+0x194>)
    453c:	881b      	ldrh	r3, [r3, #0]
    453e:	b29b      	uxth	r3, r3
    4540:	b2db      	uxtb	r3, r3
    4542:	3b62      	subs	r3, #98	; 0x62
    4544:	b2da      	uxtb	r2, r3
    4546:	69fb      	ldr	r3, [r7, #28]
    4548:	709a      	strb	r2, [r3, #2]
	f->rssi_min = rssi_min;
    454a:	4b45      	ldr	r3, [pc, #276]	; (4660 <enqueue+0x198>)
    454c:	781b      	ldrb	r3, [r3, #0]
    454e:	b2da      	uxtb	r2, r3
    4550:	69fb      	ldr	r3, [r7, #28]
    4552:	725a      	strb	r2, [r3, #9]
	f->rssi_max = rssi_max;
    4554:	4b43      	ldr	r3, [pc, #268]	; (4664 <enqueue+0x19c>)
    4556:	781b      	ldrb	r3, [r3, #0]
    4558:	b2da      	uxtb	r2, r3
    455a:	69fb      	ldr	r3, [r7, #28]
    455c:	721a      	strb	r2, [r3, #8]
	if (hop_mode != HOP_NONE)
    455e:	4b42      	ldr	r3, [pc, #264]	; (4668 <enqueue+0x1a0>)
    4560:	781b      	ldrb	r3, [r3, #0]
    4562:	2b00      	cmp	r3, #0
    4564:	d009      	beq.n	457a <enqueue+0xb2>
	//	f->rssi_avg = (int8_t)((rssi_iir[idle_buf_channel-2402] + 128)/256);
		f->rssi_avg = rssi_sum/rssi_count;
    4566:	4b41      	ldr	r3, [pc, #260]	; (466c <enqueue+0x1a4>)
    4568:	681b      	ldr	r3, [r3, #0]
    456a:	4a41      	ldr	r2, [pc, #260]	; (4670 <enqueue+0x1a8>)
    456c:	7812      	ldrb	r2, [r2, #0]
    456e:	fb93 f3f2 	sdiv	r3, r3, r2
    4572:	b2da      	uxtb	r2, r3
    4574:	69fb      	ldr	r3, [r7, #28]
    4576:	729a      	strb	r2, [r3, #10]
    4578:	e008      	b.n	458c <enqueue+0xc4>
	else
		//f->rssi_avg = (int8_t)((rssi_iir[0] + 128)/256);
		f->rssi_avg = rssi_sum/rssi_count;
    457a:	4b3c      	ldr	r3, [pc, #240]	; (466c <enqueue+0x1a4>)
    457c:	681b      	ldr	r3, [r3, #0]
    457e:	4a3c      	ldr	r2, [pc, #240]	; (4670 <enqueue+0x1a8>)
    4580:	7812      	ldrb	r2, [r2, #0]
    4582:	fb93 f3f2 	sdiv	r3, r3, r2
    4586:	b2da      	uxtb	r2, r3
    4588:	69fb      	ldr	r3, [r7, #28]
    458a:	729a      	strb	r2, [r3, #10]
	f->rssi_count = rssi_count;
    458c:	4b38      	ldr	r3, [pc, #224]	; (4670 <enqueue+0x1a8>)
    458e:	781a      	ldrb	r2, [r3, #0]
    4590:	69fb      	ldr	r3, [r7, #28]
    4592:	72da      	strb	r2, [r3, #11]

	USRLED_SET;
    4594:	4b37      	ldr	r3, [pc, #220]	; (4674 <enqueue+0x1ac>)
    4596:	2202      	movs	r2, #2
    4598:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    459a:	69fb      	ldr	r3, [r7, #28]
    459c:	330e      	adds	r3, #14
    459e:	61bb      	str	r3, [r7, #24]
	u32 *p2 = (u32 *)buf;
    45a0:	683b      	ldr	r3, [r7, #0]
    45a2:	617b      	str	r3, [r7, #20]
	p1[0] = p2[0];
    45a4:	697b      	ldr	r3, [r7, #20]
    45a6:	681a      	ldr	r2, [r3, #0]
    45a8:	69bb      	ldr	r3, [r7, #24]
    45aa:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    45ac:	69bb      	ldr	r3, [r7, #24]
    45ae:	3304      	adds	r3, #4
    45b0:	697a      	ldr	r2, [r7, #20]
    45b2:	6852      	ldr	r2, [r2, #4]
    45b4:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    45b6:	69bb      	ldr	r3, [r7, #24]
    45b8:	3308      	adds	r3, #8
    45ba:	697a      	ldr	r2, [r7, #20]
    45bc:	6892      	ldr	r2, [r2, #8]
    45be:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    45c0:	69bb      	ldr	r3, [r7, #24]
    45c2:	330c      	adds	r3, #12
    45c4:	697a      	ldr	r2, [r7, #20]
    45c6:	68d2      	ldr	r2, [r2, #12]
    45c8:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    45ca:	69bb      	ldr	r3, [r7, #24]
    45cc:	3310      	adds	r3, #16
    45ce:	697a      	ldr	r2, [r7, #20]
    45d0:	6912      	ldr	r2, [r2, #16]
    45d2:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    45d4:	69bb      	ldr	r3, [r7, #24]
    45d6:	3314      	adds	r3, #20
    45d8:	697a      	ldr	r2, [r7, #20]
    45da:	6952      	ldr	r2, [r2, #20]
    45dc:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    45de:	69bb      	ldr	r3, [r7, #24]
    45e0:	3318      	adds	r3, #24
    45e2:	697a      	ldr	r2, [r7, #20]
    45e4:	6992      	ldr	r2, [r2, #24]
    45e6:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    45e8:	69bb      	ldr	r3, [r7, #24]
    45ea:	331c      	adds	r3, #28
    45ec:	697a      	ldr	r2, [r7, #20]
    45ee:	69d2      	ldr	r2, [r2, #28]
    45f0:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    45f2:	69bb      	ldr	r3, [r7, #24]
    45f4:	3320      	adds	r3, #32
    45f6:	697a      	ldr	r2, [r7, #20]
    45f8:	6a12      	ldr	r2, [r2, #32]
    45fa:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    45fc:	69bb      	ldr	r3, [r7, #24]
    45fe:	3324      	adds	r3, #36	; 0x24
    4600:	697a      	ldr	r2, [r7, #20]
    4602:	6a52      	ldr	r2, [r2, #36]	; 0x24
    4604:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    4606:	69bb      	ldr	r3, [r7, #24]
    4608:	3328      	adds	r3, #40	; 0x28
    460a:	697a      	ldr	r2, [r7, #20]
    460c:	6a92      	ldr	r2, [r2, #40]	; 0x28
    460e:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    4610:	69bb      	ldr	r3, [r7, #24]
    4612:	332c      	adds	r3, #44	; 0x2c
    4614:	697a      	ldr	r2, [r7, #20]
    4616:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4618:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    461a:	69fb      	ldr	r3, [r7, #28]
    461c:	330e      	adds	r3, #14
    461e:	613b      	str	r3, [r7, #16]
	u16 *p4 = (u16 *)buf;
    4620:	683b      	ldr	r3, [r7, #0]
    4622:	60fb      	str	r3, [r7, #12]
	p3[24] = p4[24];
    4624:	693b      	ldr	r3, [r7, #16]
    4626:	3330      	adds	r3, #48	; 0x30
    4628:	68fa      	ldr	r2, [r7, #12]
    462a:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    462c:	801a      	strh	r2, [r3, #0]

	f->status = status;
    462e:	4b06      	ldr	r3, [pc, #24]	; (4648 <enqueue+0x180>)
    4630:	781b      	ldrb	r3, [r3, #0]
    4632:	b2da      	uxtb	r2, r3
    4634:	69fb      	ldr	r3, [r7, #28]
    4636:	705a      	strb	r2, [r3, #1]
	status = 0;
    4638:	4b03      	ldr	r3, [pc, #12]	; (4648 <enqueue+0x180>)
    463a:	2200      	movs	r2, #0
    463c:	701a      	strb	r2, [r3, #0]

	return 1;
    463e:	2301      	movs	r3, #1
}
    4640:	4618      	mov	r0, r3
    4642:	3720      	adds	r7, #32
    4644:	46bd      	mov	sp, r7
    4646:	bd80      	pop	{r7, pc}
    4648:	10000a48 	.word	0x10000a48
    464c:	10000be4 	.word	0x10000be4
    4650:	40004008 	.word	0x40004008
    4654:	10001028 	.word	0x10001028
    4658:	10000bc8 	.word	0x10000bc8
    465c:	10000988 	.word	0x10000988
    4660:	10000bb8 	.word	0x10000bb8
    4664:	10000b04 	.word	0x10000b04
    4668:	1000097c 	.word	0x1000097c
    466c:	10000a4c 	.word	0x10000a4c
    4670:	10000a49 	.word	0x10000a49
    4674:	2009c038 	.word	0x2009c038

00004678 <enqueue_with_ts>:

int enqueue_with_ts(u8 type, u8 *buf, u32 ts)
{
    4678:	b580      	push	{r7, lr}
    467a:	b08a      	sub	sp, #40	; 0x28
    467c:	af00      	add	r7, sp, #0
    467e:	4603      	mov	r3, r0
    4680:	60b9      	str	r1, [r7, #8]
    4682:	607a      	str	r2, [r7, #4]
    4684:	73fb      	strb	r3, [r7, #15]
	usb_pkt_rx *f = usb_enqueue();
    4686:	f003 ffbb 	bl	8600 <usb_enqueue>
    468a:	6278      	str	r0, [r7, #36]	; 0x24

	/* fail if queue is full */
	if (f == NULL) {
    468c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    468e:	2b00      	cmp	r3, #0
    4690:	d109      	bne.n	46a6 <enqueue_with_ts+0x2e>
		status |= FIFO_OVERFLOW;
    4692:	4b3c      	ldr	r3, [pc, #240]	; (4784 <enqueue_with_ts+0x10c>)
    4694:	781b      	ldrb	r3, [r3, #0]
    4696:	b2db      	uxtb	r3, r3
    4698:	f043 0304 	orr.w	r3, r3, #4
    469c:	b2da      	uxtb	r2, r3
    469e:	4b39      	ldr	r3, [pc, #228]	; (4784 <enqueue_with_ts+0x10c>)
    46a0:	701a      	strb	r2, [r3, #0]
		return 0;
    46a2:	2300      	movs	r3, #0
    46a4:	e069      	b.n	477a <enqueue_with_ts+0x102>
	}

	f->clkn_high = 0;
    46a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46a8:	2200      	movs	r2, #0
    46aa:	70da      	strb	r2, [r3, #3]
	f->clk100ns = ts;
    46ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46ae:	687a      	ldr	r2, [r7, #4]
    46b0:	605a      	str	r2, [r3, #4]

	f->channel = channel - 2402;
    46b2:	4b35      	ldr	r3, [pc, #212]	; (4788 <enqueue_with_ts+0x110>)
    46b4:	881b      	ldrh	r3, [r3, #0]
    46b6:	b29b      	uxth	r3, r3
    46b8:	b2db      	uxtb	r3, r3
    46ba:	3b62      	subs	r3, #98	; 0x62
    46bc:	b2da      	uxtb	r2, r3
    46be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46c0:	709a      	strb	r2, [r3, #2]
	f->rssi_avg = 0;
    46c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46c4:	2200      	movs	r2, #0
    46c6:	729a      	strb	r2, [r3, #10]
	f->rssi_count = 0;
    46c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46ca:	2200      	movs	r2, #0
    46cc:	72da      	strb	r2, [r3, #11]

	USRLED_SET;
    46ce:	4b2f      	ldr	r3, [pc, #188]	; (478c <enqueue_with_ts+0x114>)
    46d0:	2202      	movs	r2, #2
    46d2:	601a      	str	r2, [r3, #0]

	// Unrolled copy of 50 bytes from buf to fifo
	u32 *p1 = (u32 *)f->data;
    46d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    46d6:	330e      	adds	r3, #14
    46d8:	623b      	str	r3, [r7, #32]
	u32 *p2 = (u32 *)buf;
    46da:	68bb      	ldr	r3, [r7, #8]
    46dc:	61fb      	str	r3, [r7, #28]
	p1[0] = p2[0];
    46de:	69fb      	ldr	r3, [r7, #28]
    46e0:	681a      	ldr	r2, [r3, #0]
    46e2:	6a3b      	ldr	r3, [r7, #32]
    46e4:	601a      	str	r2, [r3, #0]
	p1[1] = p2[1];
    46e6:	6a3b      	ldr	r3, [r7, #32]
    46e8:	3304      	adds	r3, #4
    46ea:	69fa      	ldr	r2, [r7, #28]
    46ec:	6852      	ldr	r2, [r2, #4]
    46ee:	601a      	str	r2, [r3, #0]
	p1[2] = p2[2];
    46f0:	6a3b      	ldr	r3, [r7, #32]
    46f2:	3308      	adds	r3, #8
    46f4:	69fa      	ldr	r2, [r7, #28]
    46f6:	6892      	ldr	r2, [r2, #8]
    46f8:	601a      	str	r2, [r3, #0]
	p1[3] = p2[3];
    46fa:	6a3b      	ldr	r3, [r7, #32]
    46fc:	330c      	adds	r3, #12
    46fe:	69fa      	ldr	r2, [r7, #28]
    4700:	68d2      	ldr	r2, [r2, #12]
    4702:	601a      	str	r2, [r3, #0]
	p1[4] = p2[4];
    4704:	6a3b      	ldr	r3, [r7, #32]
    4706:	3310      	adds	r3, #16
    4708:	69fa      	ldr	r2, [r7, #28]
    470a:	6912      	ldr	r2, [r2, #16]
    470c:	601a      	str	r2, [r3, #0]
	p1[5] = p2[5];
    470e:	6a3b      	ldr	r3, [r7, #32]
    4710:	3314      	adds	r3, #20
    4712:	69fa      	ldr	r2, [r7, #28]
    4714:	6952      	ldr	r2, [r2, #20]
    4716:	601a      	str	r2, [r3, #0]
	p1[6] = p2[6];
    4718:	6a3b      	ldr	r3, [r7, #32]
    471a:	3318      	adds	r3, #24
    471c:	69fa      	ldr	r2, [r7, #28]
    471e:	6992      	ldr	r2, [r2, #24]
    4720:	601a      	str	r2, [r3, #0]
	p1[7] = p2[7];
    4722:	6a3b      	ldr	r3, [r7, #32]
    4724:	331c      	adds	r3, #28
    4726:	69fa      	ldr	r2, [r7, #28]
    4728:	69d2      	ldr	r2, [r2, #28]
    472a:	601a      	str	r2, [r3, #0]
	p1[8] = p2[8];
    472c:	6a3b      	ldr	r3, [r7, #32]
    472e:	3320      	adds	r3, #32
    4730:	69fa      	ldr	r2, [r7, #28]
    4732:	6a12      	ldr	r2, [r2, #32]
    4734:	601a      	str	r2, [r3, #0]
	p1[9] = p2[9];
    4736:	6a3b      	ldr	r3, [r7, #32]
    4738:	3324      	adds	r3, #36	; 0x24
    473a:	69fa      	ldr	r2, [r7, #28]
    473c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    473e:	601a      	str	r2, [r3, #0]
	p1[10] = p2[10];
    4740:	6a3b      	ldr	r3, [r7, #32]
    4742:	3328      	adds	r3, #40	; 0x28
    4744:	69fa      	ldr	r2, [r7, #28]
    4746:	6a92      	ldr	r2, [r2, #40]	; 0x28
    4748:	601a      	str	r2, [r3, #0]
	p1[11] = p2[11];
    474a:	6a3b      	ldr	r3, [r7, #32]
    474c:	332c      	adds	r3, #44	; 0x2c
    474e:	69fa      	ldr	r2, [r7, #28]
    4750:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    4752:	601a      	str	r2, [r3, #0]
	/* Avoid gcc warning about strict-aliasing */
	u16 *p3 = (u16 *)f->data;
    4754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4756:	330e      	adds	r3, #14
    4758:	61bb      	str	r3, [r7, #24]
	u16 *p4 = (u16 *)buf;
    475a:	68bb      	ldr	r3, [r7, #8]
    475c:	617b      	str	r3, [r7, #20]
	p3[24] = p4[24];
    475e:	69bb      	ldr	r3, [r7, #24]
    4760:	3330      	adds	r3, #48	; 0x30
    4762:	697a      	ldr	r2, [r7, #20]
    4764:	8e12      	ldrh	r2, [r2, #48]	; 0x30
    4766:	801a      	strh	r2, [r3, #0]

	f->status = status;
    4768:	4b06      	ldr	r3, [pc, #24]	; (4784 <enqueue_with_ts+0x10c>)
    476a:	781b      	ldrb	r3, [r3, #0]
    476c:	b2da      	uxtb	r2, r3
    476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    4770:	705a      	strb	r2, [r3, #1]
	status = 0;
    4772:	4b04      	ldr	r3, [pc, #16]	; (4784 <enqueue_with_ts+0x10c>)
    4774:	2200      	movs	r2, #0
    4776:	701a      	strb	r2, [r3, #0]

	return 1;
    4778:	2301      	movs	r3, #1
}
    477a:	4618      	mov	r0, r3
    477c:	3728      	adds	r7, #40	; 0x28
    477e:	46bd      	mov	sp, r7
    4780:	bd80      	pop	{r7, pc}
    4782:	bf00      	nop
    4784:	10000a48 	.word	0x10000a48
    4788:	1000049c 	.word	0x1000049c
    478c:	2009c038 	.word	0x2009c038

00004790 <cs_threshold_calc_and_set>:

static void cs_threshold_calc_and_set(void)
{
    4790:	b580      	push	{r7, lr}
    4792:	b082      	sub	sp, #8
    4794:	af00      	add	r7, sp, #0

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    4796:	4b17      	ldr	r3, [pc, #92]	; (47f4 <cs_threshold_calc_and_set+0x64>)
    4798:	781b      	ldrb	r3, [r3, #0]
    479a:	2b00      	cmp	r3, #0
    479c:	d01d      	beq.n	47da <cs_threshold_calc_and_set+0x4a>
    479e:	4b16      	ldr	r3, [pc, #88]	; (47f8 <cs_threshold_calc_and_set+0x68>)
    47a0:	781b      	ldrb	r3, [r3, #0]
    47a2:	b25b      	sxtb	r3, r3
    47a4:	2b00      	cmp	r3, #0
    47a6:	dd18      	ble.n	47da <cs_threshold_calc_and_set+0x4a>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
    47a8:	4b14      	ldr	r3, [pc, #80]	; (47fc <cs_threshold_calc_and_set+0x6c>)
    47aa:	881b      	ldrh	r3, [r3, #0]
    47ac:	b29b      	uxth	r3, r3
    47ae:	f6a3 1362 	subw	r3, r3, #2402	; 0x962
    47b2:	4a13      	ldr	r2, [pc, #76]	; (4800 <cs_threshold_calc_and_set+0x70>)
    47b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    47b8:	b21b      	sxth	r3, r3
    47ba:	3380      	adds	r3, #128	; 0x80
    47bc:	2b00      	cmp	r3, #0
    47be:	da00      	bge.n	47c2 <cs_threshold_calc_and_set+0x32>
    47c0:	33ff      	adds	r3, #255	; 0xff
    47c2:	121b      	asrs	r3, r3, #8
    47c4:	71bb      	strb	r3, [r7, #6]
		level = rssi - 54 + cs_threshold_req;
    47c6:	79ba      	ldrb	r2, [r7, #6]
    47c8:	4b0b      	ldr	r3, [pc, #44]	; (47f8 <cs_threshold_calc_and_set+0x68>)
    47ca:	781b      	ldrb	r3, [r3, #0]
    47cc:	b2db      	uxtb	r3, r3
    47ce:	4413      	add	r3, r2
    47d0:	b2db      	uxtb	r3, r3
    47d2:	3b36      	subs	r3, #54	; 0x36
    47d4:	b2db      	uxtb	r3, r3
    47d6:	71fb      	strb	r3, [r7, #7]

	/* If threshold is max/avg based (>0), reset here while rx is
	 * off.  TODO - max-to-iir only works in SWEEP mode, where the
	 * channel is known to be in the BT band, i.e., rssi_iir has a
	 * value for it. */
	if ((hop_mode > 0) && (cs_threshold_req > 0)) {
    47d8:	e002      	b.n	47e0 <cs_threshold_calc_and_set+0x50>
		int8_t rssi = (int8_t)((rssi_iir[channel-2402] + 128)/256);
		level = rssi - 54 + cs_threshold_req;
	}
	else {
		level = cs_threshold_req;
    47da:	4b07      	ldr	r3, [pc, #28]	; (47f8 <cs_threshold_calc_and_set+0x68>)
    47dc:	781b      	ldrb	r3, [r3, #0]
    47de:	71fb      	strb	r3, [r7, #7]
	}
	cs_threshold_set(level, CS_SAMPLES_4);
    47e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
    47e4:	4618      	mov	r0, r3
    47e6:	2103      	movs	r1, #3
    47e8:	f7ff fe28 	bl	443c <cs_threshold_set>
}
    47ec:	3708      	adds	r7, #8
    47ee:	46bd      	mov	sp, r7
    47f0:	bd80      	pop	{r7, pc}
    47f2:	bf00      	nop
    47f4:	1000097c 	.word	0x1000097c
    47f8:	1000044c 	.word	0x1000044c
    47fc:	1000049c 	.word	0x1000049c
    4800:	100009a0 	.word	0x100009a0

00004804 <cs_trigger_enable>:
/* CS comes from CC2400 GIO6, which is LPC P2.2, active low. GPIO
 * triggers EINT3, which could be used for other things (but is not
 * currently). TODO - EINT3 should be managed globally, not turned on
 * and off here. */
static void cs_trigger_enable(void)
{
    4804:	b480      	push	{r7}
    4806:	af00      	add	r7, sp, #0
	cs_trigger = 0;
    4808:	4b09      	ldr	r3, [pc, #36]	; (4830 <cs_trigger_enable+0x2c>)
    480a:	2200      	movs	r2, #0
    480c:	701a      	strb	r2, [r3, #0]
	ISER0 = ISER0_ISE_EINT3;
    480e:	4b09      	ldr	r3, [pc, #36]	; (4834 <cs_trigger_enable+0x30>)
    4810:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    4814:	601a      	str	r2, [r3, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4816:	4b08      	ldr	r3, [pc, #32]	; (4838 <cs_trigger_enable+0x34>)
    4818:	2204      	movs	r2, #4
    481a:	601a      	str	r2, [r3, #0]
	IO2IntEnF |= PIN_GIO6;     // Enable port 2.2 falling (CS active low)
    481c:	4a07      	ldr	r2, [pc, #28]	; (483c <cs_trigger_enable+0x38>)
    481e:	4b07      	ldr	r3, [pc, #28]	; (483c <cs_trigger_enable+0x38>)
    4820:	681b      	ldr	r3, [r3, #0]
    4822:	f043 0304 	orr.w	r3, r3, #4
    4826:	6013      	str	r3, [r2, #0]
}
    4828:	46bd      	mov	sp, r7
    482a:	f85d 7b04 	ldr.w	r7, [sp], #4
    482e:	4770      	bx	lr
    4830:	100010b8 	.word	0x100010b8
    4834:	e000e100 	.word	0xe000e100
    4838:	400280ac 	.word	0x400280ac
    483c:	400280b4 	.word	0x400280b4

00004840 <cs_trigger_disable>:

static void cs_trigger_disable(void)
{
    4840:	b480      	push	{r7}
    4842:	af00      	add	r7, sp, #0
	IO2IntEnF &= ~PIN_GIO6;    // Disable port 2.2 falling (CS active low)
    4844:	4a09      	ldr	r2, [pc, #36]	; (486c <cs_trigger_disable+0x2c>)
    4846:	4b09      	ldr	r3, [pc, #36]	; (486c <cs_trigger_disable+0x2c>)
    4848:	681b      	ldr	r3, [r3, #0]
    484a:	f023 0304 	bic.w	r3, r3, #4
    484e:	6013      	str	r3, [r2, #0]
	IO2IntClr = PIN_GIO6;      // Clear pending
    4850:	4b07      	ldr	r3, [pc, #28]	; (4870 <cs_trigger_disable+0x30>)
    4852:	2204      	movs	r2, #4
    4854:	601a      	str	r2, [r3, #0]
	ICER0 = ICER0_ICE_EINT3;
    4856:	4b07      	ldr	r3, [pc, #28]	; (4874 <cs_trigger_disable+0x34>)
    4858:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    485c:	601a      	str	r2, [r3, #0]
	cs_trigger = 0;
    485e:	4b06      	ldr	r3, [pc, #24]	; (4878 <cs_trigger_disable+0x38>)
    4860:	2200      	movs	r2, #0
    4862:	701a      	strb	r2, [r3, #0]
}
    4864:	46bd      	mov	sp, r7
    4866:	f85d 7b04 	ldr.w	r7, [sp], #4
    486a:	4770      	bx	lr
    486c:	400280b4 	.word	0x400280b4
    4870:	400280ac 	.word	0x400280ac
    4874:	e000e180 	.word	0xe000e180
    4878:	100010b8 	.word	0x100010b8

0000487c <vendor_request_handler>:

static int vendor_request_handler(u8 request, u16 *request_params, u8 *data, int *data_len)
{
    487c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4880:	b095      	sub	sp, #84	; 0x54
    4882:	af00      	add	r7, sp, #0
    4884:	60b9      	str	r1, [r7, #8]
    4886:	607a      	str	r2, [r7, #4]
    4888:	603b      	str	r3, [r7, #0]
    488a:	4603      	mov	r3, r0
    488c:	73fb      	strb	r3, [r7, #15]
	u64 ac_copy;
	int i; // loop counter
	u32 clock;
	int clock_offset;
	u8 length; // string length
	usb_pkt_rx *p = NULL;
    488e:	2300      	movs	r3, #0
    4890:	647b      	str	r3, [r7, #68]	; 0x44
	u16 reg_val;

	switch (request) {
    4892:	7bfb      	ldrb	r3, [r7, #15]
    4894:	2b3c      	cmp	r3, #60	; 0x3c
    4896:	f200 8551 	bhi.w	533c <vendor_request_handler+0xac0>
    489a:	a201      	add	r2, pc, #4	; (adr r2, 48a0 <vendor_request_handler+0x24>)
    489c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    48a0:	00004995 	.word	0x00004995
    48a4:	0000499f 	.word	0x0000499f
    48a8:	0000533d 	.word	0x0000533d
    48ac:	000049af 	.word	0x000049af
    48b0:	000049d1 	.word	0x000049d1
    48b4:	000049ed 	.word	0x000049ed
    48b8:	00004a0f 	.word	0x00004a0f
    48bc:	00004a2b 	.word	0x00004a2b
    48c0:	00004a4d 	.word	0x00004a4d
    48c4:	00004a6d 	.word	0x00004a6d
    48c8:	00004a8f 	.word	0x00004a8f
    48cc:	00004d33 	.word	0x00004d33
    48d0:	00004d59 	.word	0x00004d59
    48d4:	00004b05 	.word	0x00004b05
    48d8:	00004b0f 	.word	0x00004b0f
    48dc:	00004aaf 	.word	0x00004aaf
    48e0:	00004bed 	.word	0x00004bed
    48e4:	00004c0d 	.word	0x00004c0d
    48e8:	00004c45 	.word	0x00004c45
    48ec:	00004c65 	.word	0x00004c65
    48f0:	00004c81 	.word	0x00004c81
    48f4:	00004d0d 	.word	0x00004d0d
    48f8:	00004d15 	.word	0x00004d15
    48fc:	00004d27 	.word	0x00004d27
    4900:	00004de3 	.word	0x00004de3
    4904:	00004e01 	.word	0x00004e01
    4908:	0000533d 	.word	0x0000533d
    490c:	00004e0d 	.word	0x00004e0d
    4910:	00004c89 	.word	0x00004c89
    4914:	00004ca5 	.word	0x00004ca5
    4918:	00004ccd 	.word	0x00004ccd
    491c:	00004cc5 	.word	0x00004cc5
    4920:	00004cd5 	.word	0x00004cd5
    4924:	00004ed1 	.word	0x00004ed1
    4928:	00004e69 	.word	0x00004e69
    492c:	00004f45 	.word	0x00004f45
    4930:	00004f53 	.word	0x00004f53
    4934:	00004f63 	.word	0x00004f63
    4938:	00004f75 	.word	0x00004f75
    493c:	00005041 	.word	0x00005041
    4940:	00005087 	.word	0x00005087
    4944:	00005115 	.word	0x00005115
    4948:	00005149 	.word	0x00005149
    494c:	0000516b 	.word	0x0000516b
    4950:	000051c3 	.word	0x000051c3
    4954:	00005341 	.word	0x00005341
    4958:	000051f5 	.word	0x000051f5
    495c:	0000520b 	.word	0x0000520b
    4960:	00005227 	.word	0x00005227
    4964:	0000523d 	.word	0x0000523d
    4968:	00005269 	.word	0x00005269
    496c:	000050b9 	.word	0x000050b9
    4970:	000050eb 	.word	0x000050eb
    4974:	00005285 	.word	0x00005285
    4978:	000052c9 	.word	0x000052c9
    497c:	00004f13 	.word	0x00004f13
    4980:	000052db 	.word	0x000052db
    4984:	0000533d 	.word	0x0000533d
    4988:	000052b3 	.word	0x000052b3
    498c:	0000531f 	.word	0x0000531f
    4990:	0000532b 	.word	0x0000532b

	case UBERTOOTH_PING:
		*data_len = 0;
    4994:	683b      	ldr	r3, [r7, #0]
    4996:	2200      	movs	r2, #0
    4998:	601a      	str	r2, [r3, #0]
		break;
    499a:	f000 bcd2 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_RX_SYMBOLS:
		requested_mode = MODE_RX_SYMBOLS;
    499e:	4ba1      	ldr	r3, [pc, #644]	; (4c24 <vendor_request_handler+0x3a8>)
    49a0:	2201      	movs	r2, #1
    49a2:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    49a4:	683b      	ldr	r3, [r7, #0]
    49a6:	2200      	movs	r2, #0
    49a8:	601a      	str	r2, [r3, #0]
		break;
    49aa:	f000 bcca 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_USRLED:
		data[0] = (USRLED) ? 1 : 0;
    49ae:	4b9e      	ldr	r3, [pc, #632]	; (4c28 <vendor_request_handler+0x3ac>)
    49b0:	681b      	ldr	r3, [r3, #0]
    49b2:	f003 0302 	and.w	r3, r3, #2
    49b6:	2b00      	cmp	r3, #0
    49b8:	bf14      	ite	ne
    49ba:	2301      	movne	r3, #1
    49bc:	2300      	moveq	r3, #0
    49be:	b2db      	uxtb	r3, r3
    49c0:	461a      	mov	r2, r3
    49c2:	687b      	ldr	r3, [r7, #4]
    49c4:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    49c6:	683b      	ldr	r3, [r7, #0]
    49c8:	2201      	movs	r2, #1
    49ca:	601a      	str	r2, [r3, #0]
		break;
    49cc:	f000 bcb9 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
    49d0:	68bb      	ldr	r3, [r7, #8]
    49d2:	881b      	ldrh	r3, [r3, #0]
    49d4:	2b00      	cmp	r3, #0
    49d6:	d004      	beq.n	49e2 <vendor_request_handler+0x166>
			USRLED_SET;
    49d8:	4b94      	ldr	r3, [pc, #592]	; (4c2c <vendor_request_handler+0x3b0>)
    49da:	2202      	movs	r2, #2
    49dc:	601a      	str	r2, [r3, #0]
		else
			USRLED_CLR;
		break;
    49de:	f000 bcb0 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_USRLED:
		if (request_params[0])
			USRLED_SET;
		else
			USRLED_CLR;
    49e2:	4b93      	ldr	r3, [pc, #588]	; (4c30 <vendor_request_handler+0x3b4>)
    49e4:	2202      	movs	r2, #2
    49e6:	601a      	str	r2, [r3, #0]
		break;
    49e8:	f000 bcab 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_RXLED:
		data[0] = (RXLED) ? 1 : 0;
    49ec:	4b8e      	ldr	r3, [pc, #568]	; (4c28 <vendor_request_handler+0x3ac>)
    49ee:	681b      	ldr	r3, [r3, #0]
    49f0:	f003 0310 	and.w	r3, r3, #16
    49f4:	2b00      	cmp	r3, #0
    49f6:	bf14      	ite	ne
    49f8:	2301      	movne	r3, #1
    49fa:	2300      	moveq	r3, #0
    49fc:	b2db      	uxtb	r3, r3
    49fe:	461a      	mov	r2, r3
    4a00:	687b      	ldr	r3, [r7, #4]
    4a02:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4a04:	683b      	ldr	r3, [r7, #0]
    4a06:	2201      	movs	r2, #1
    4a08:	601a      	str	r2, [r3, #0]
		break;
    4a0a:	f000 bc9a 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
    4a0e:	68bb      	ldr	r3, [r7, #8]
    4a10:	881b      	ldrh	r3, [r3, #0]
    4a12:	2b00      	cmp	r3, #0
    4a14:	d004      	beq.n	4a20 <vendor_request_handler+0x1a4>
			RXLED_SET;
    4a16:	4b85      	ldr	r3, [pc, #532]	; (4c2c <vendor_request_handler+0x3b0>)
    4a18:	2210      	movs	r2, #16
    4a1a:	601a      	str	r2, [r3, #0]
		else
			RXLED_CLR;
		break;
    4a1c:	f000 bc91 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_RXLED:
		if (request_params[0])
			RXLED_SET;
		else
			RXLED_CLR;
    4a20:	4b83      	ldr	r3, [pc, #524]	; (4c30 <vendor_request_handler+0x3b4>)
    4a22:	2210      	movs	r2, #16
    4a24:	601a      	str	r2, [r3, #0]
		break;
    4a26:	f000 bc8c 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_TXLED:
		data[0] = (TXLED) ? 1 : 0;
    4a2a:	4b7f      	ldr	r3, [pc, #508]	; (4c28 <vendor_request_handler+0x3ac>)
    4a2c:	681b      	ldr	r3, [r3, #0]
    4a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4a32:	2b00      	cmp	r3, #0
    4a34:	bf14      	ite	ne
    4a36:	2301      	movne	r3, #1
    4a38:	2300      	moveq	r3, #0
    4a3a:	b2db      	uxtb	r3, r3
    4a3c:	461a      	mov	r2, r3
    4a3e:	687b      	ldr	r3, [r7, #4]
    4a40:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4a42:	683b      	ldr	r3, [r7, #0]
    4a44:	2201      	movs	r2, #1
    4a46:	601a      	str	r2, [r3, #0]
		break;
    4a48:	f000 bc7b 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
    4a4c:	68bb      	ldr	r3, [r7, #8]
    4a4e:	881b      	ldrh	r3, [r3, #0]
    4a50:	2b00      	cmp	r3, #0
    4a52:	d005      	beq.n	4a60 <vendor_request_handler+0x1e4>
			TXLED_SET;
    4a54:	4b75      	ldr	r3, [pc, #468]	; (4c2c <vendor_request_handler+0x3b0>)
    4a56:	f44f 7280 	mov.w	r2, #256	; 0x100
    4a5a:	601a      	str	r2, [r3, #0]
		else
			TXLED_CLR;
		break;
    4a5c:	f000 bc71 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_TXLED:
		if (request_params[0])
			TXLED_SET;
		else
			TXLED_CLR;
    4a60:	4b73      	ldr	r3, [pc, #460]	; (4c30 <vendor_request_handler+0x3b4>)
    4a62:	f44f 7280 	mov.w	r2, #256	; 0x100
    4a66:	601a      	str	r2, [r3, #0]
		break;
    4a68:	f000 bc6b 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_1V8:
		data[0] = (CC1V8) ? 1 : 0;
    4a6c:	4b6e      	ldr	r3, [pc, #440]	; (4c28 <vendor_request_handler+0x3ac>)
    4a6e:	681b      	ldr	r3, [r3, #0]
    4a70:	f403 7300 	and.w	r3, r3, #512	; 0x200
    4a74:	2b00      	cmp	r3, #0
    4a76:	bf14      	ite	ne
    4a78:	2301      	movne	r3, #1
    4a7a:	2300      	moveq	r3, #0
    4a7c:	b2db      	uxtb	r3, r3
    4a7e:	461a      	mov	r2, r3
    4a80:	687b      	ldr	r3, [r7, #4]
    4a82:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4a84:	683b      	ldr	r3, [r7, #0]
    4a86:	2201      	movs	r2, #1
    4a88:	601a      	str	r2, [r3, #0]
		break;
    4a8a:	f000 bc5a 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
    4a8e:	68bb      	ldr	r3, [r7, #8]
    4a90:	881b      	ldrh	r3, [r3, #0]
    4a92:	2b00      	cmp	r3, #0
    4a94:	d005      	beq.n	4aa2 <vendor_request_handler+0x226>
			CC1V8_SET;
    4a96:	4b65      	ldr	r3, [pc, #404]	; (4c2c <vendor_request_handler+0x3b0>)
    4a98:	f44f 7200 	mov.w	r2, #512	; 0x200
    4a9c:	601a      	str	r2, [r3, #0]
		else
			CC1V8_CLR;
		break;
    4a9e:	f000 bc50 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_1V8:
		if (request_params[0])
			CC1V8_SET;
		else
			CC1V8_CLR;
    4aa2:	4b63      	ldr	r3, [pc, #396]	; (4c30 <vendor_request_handler+0x3b4>)
    4aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
    4aa8:	601a      	str	r2, [r3, #0]
		break;
    4aaa:	f000 bc4a 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_PARTNUM:
		command[0] = 54; /* read part number */
    4aae:	2336      	movs	r3, #54	; 0x36
    4ab0:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4ab2:	4b60      	ldr	r3, [pc, #384]	; (4c34 <vendor_request_handler+0x3b8>)
    4ab4:	681b      	ldr	r3, [r3, #0]
    4ab6:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4aba:	f107 0210 	add.w	r2, r7, #16
    4abe:	4608      	mov	r0, r1
    4ac0:	4611      	mov	r1, r2
    4ac2:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4ac4:	693b      	ldr	r3, [r7, #16]
    4ac6:	b2da      	uxtb	r2, r3
    4ac8:	687b      	ldr	r3, [r7, #4]
    4aca:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4acc:	687b      	ldr	r3, [r7, #4]
    4ace:	3301      	adds	r3, #1
    4ad0:	697a      	ldr	r2, [r7, #20]
    4ad2:	b2d2      	uxtb	r2, r2
    4ad4:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4ad6:	687b      	ldr	r3, [r7, #4]
    4ad8:	3302      	adds	r3, #2
    4ada:	697a      	ldr	r2, [r7, #20]
    4adc:	0a12      	lsrs	r2, r2, #8
    4ade:	b2d2      	uxtb	r2, r2
    4ae0:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4ae2:	687b      	ldr	r3, [r7, #4]
    4ae4:	3303      	adds	r3, #3
    4ae6:	697a      	ldr	r2, [r7, #20]
    4ae8:	0c12      	lsrs	r2, r2, #16
    4aea:	b2d2      	uxtb	r2, r2
    4aec:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4aee:	687b      	ldr	r3, [r7, #4]
    4af0:	3304      	adds	r3, #4
    4af2:	697a      	ldr	r2, [r7, #20]
    4af4:	0e12      	lsrs	r2, r2, #24
    4af6:	b2d2      	uxtb	r2, r2
    4af8:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4afa:	683b      	ldr	r3, [r7, #0]
    4afc:	2205      	movs	r2, #5
    4afe:	601a      	str	r2, [r3, #0]
		break;
    4b00:	f000 bc1f 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_RESET:
		requested_mode = MODE_RESET;
    4b04:	4b47      	ldr	r3, [pc, #284]	; (4c24 <vendor_request_handler+0x3a8>)
    4b06:	220b      	movs	r2, #11
    4b08:	701a      	strb	r2, [r3, #0]
		break;
    4b0a:	f000 bc1a 	b.w	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_SERIAL:
		command[0] = 58; /* read device serial number */
    4b0e:	233a      	movs	r3, #58	; 0x3a
    4b10:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4b12:	4b48      	ldr	r3, [pc, #288]	; (4c34 <vendor_request_handler+0x3b8>)
    4b14:	681b      	ldr	r3, [r3, #0]
    4b16:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4b1a:	f107 0210 	add.w	r2, r7, #16
    4b1e:	4608      	mov	r0, r1
    4b20:	4611      	mov	r1, r2
    4b22:	4798      	blx	r3
		data[0] = result[0] & 0xFF; /* status */
    4b24:	693b      	ldr	r3, [r7, #16]
    4b26:	b2da      	uxtb	r2, r3
    4b28:	687b      	ldr	r3, [r7, #4]
    4b2a:	701a      	strb	r2, [r3, #0]
		data[1] = result[1] & 0xFF;
    4b2c:	687b      	ldr	r3, [r7, #4]
    4b2e:	3301      	adds	r3, #1
    4b30:	697a      	ldr	r2, [r7, #20]
    4b32:	b2d2      	uxtb	r2, r2
    4b34:	701a      	strb	r2, [r3, #0]
		data[2] = (result[1] >> 8) & 0xFF;
    4b36:	687b      	ldr	r3, [r7, #4]
    4b38:	3302      	adds	r3, #2
    4b3a:	697a      	ldr	r2, [r7, #20]
    4b3c:	0a12      	lsrs	r2, r2, #8
    4b3e:	b2d2      	uxtb	r2, r2
    4b40:	701a      	strb	r2, [r3, #0]
		data[3] = (result[1] >> 16) & 0xFF;
    4b42:	687b      	ldr	r3, [r7, #4]
    4b44:	3303      	adds	r3, #3
    4b46:	697a      	ldr	r2, [r7, #20]
    4b48:	0c12      	lsrs	r2, r2, #16
    4b4a:	b2d2      	uxtb	r2, r2
    4b4c:	701a      	strb	r2, [r3, #0]
		data[4] = (result[1] >> 24) & 0xFF;
    4b4e:	687b      	ldr	r3, [r7, #4]
    4b50:	3304      	adds	r3, #4
    4b52:	697a      	ldr	r2, [r7, #20]
    4b54:	0e12      	lsrs	r2, r2, #24
    4b56:	b2d2      	uxtb	r2, r2
    4b58:	701a      	strb	r2, [r3, #0]
		data[5] = result[2] & 0xFF;
    4b5a:	687b      	ldr	r3, [r7, #4]
    4b5c:	3305      	adds	r3, #5
    4b5e:	69ba      	ldr	r2, [r7, #24]
    4b60:	b2d2      	uxtb	r2, r2
    4b62:	701a      	strb	r2, [r3, #0]
		data[6] = (result[2] >> 8) & 0xFF;
    4b64:	687b      	ldr	r3, [r7, #4]
    4b66:	3306      	adds	r3, #6
    4b68:	69ba      	ldr	r2, [r7, #24]
    4b6a:	0a12      	lsrs	r2, r2, #8
    4b6c:	b2d2      	uxtb	r2, r2
    4b6e:	701a      	strb	r2, [r3, #0]
		data[7] = (result[2] >> 16) & 0xFF;
    4b70:	687b      	ldr	r3, [r7, #4]
    4b72:	3307      	adds	r3, #7
    4b74:	69ba      	ldr	r2, [r7, #24]
    4b76:	0c12      	lsrs	r2, r2, #16
    4b78:	b2d2      	uxtb	r2, r2
    4b7a:	701a      	strb	r2, [r3, #0]
		data[8] = (result[2] >> 24) & 0xFF;
    4b7c:	687b      	ldr	r3, [r7, #4]
    4b7e:	3308      	adds	r3, #8
    4b80:	69ba      	ldr	r2, [r7, #24]
    4b82:	0e12      	lsrs	r2, r2, #24
    4b84:	b2d2      	uxtb	r2, r2
    4b86:	701a      	strb	r2, [r3, #0]
		data[9] = result[3] & 0xFF;
    4b88:	687b      	ldr	r3, [r7, #4]
    4b8a:	3309      	adds	r3, #9
    4b8c:	69fa      	ldr	r2, [r7, #28]
    4b8e:	b2d2      	uxtb	r2, r2
    4b90:	701a      	strb	r2, [r3, #0]
		data[10] = (result[3] >> 8) & 0xFF;
    4b92:	687b      	ldr	r3, [r7, #4]
    4b94:	330a      	adds	r3, #10
    4b96:	69fa      	ldr	r2, [r7, #28]
    4b98:	0a12      	lsrs	r2, r2, #8
    4b9a:	b2d2      	uxtb	r2, r2
    4b9c:	701a      	strb	r2, [r3, #0]
		data[11] = (result[3] >> 16) & 0xFF;
    4b9e:	687b      	ldr	r3, [r7, #4]
    4ba0:	330b      	adds	r3, #11
    4ba2:	69fa      	ldr	r2, [r7, #28]
    4ba4:	0c12      	lsrs	r2, r2, #16
    4ba6:	b2d2      	uxtb	r2, r2
    4ba8:	701a      	strb	r2, [r3, #0]
		data[12] = (result[3] >> 24) & 0xFF;
    4baa:	687b      	ldr	r3, [r7, #4]
    4bac:	330c      	adds	r3, #12
    4bae:	69fa      	ldr	r2, [r7, #28]
    4bb0:	0e12      	lsrs	r2, r2, #24
    4bb2:	b2d2      	uxtb	r2, r2
    4bb4:	701a      	strb	r2, [r3, #0]
		data[13] = result[4] & 0xFF;
    4bb6:	687b      	ldr	r3, [r7, #4]
    4bb8:	330d      	adds	r3, #13
    4bba:	6a3a      	ldr	r2, [r7, #32]
    4bbc:	b2d2      	uxtb	r2, r2
    4bbe:	701a      	strb	r2, [r3, #0]
		data[14] = (result[4] >> 8) & 0xFF;
    4bc0:	687b      	ldr	r3, [r7, #4]
    4bc2:	330e      	adds	r3, #14
    4bc4:	6a3a      	ldr	r2, [r7, #32]
    4bc6:	0a12      	lsrs	r2, r2, #8
    4bc8:	b2d2      	uxtb	r2, r2
    4bca:	701a      	strb	r2, [r3, #0]
		data[15] = (result[4] >> 16) & 0xFF;
    4bcc:	687b      	ldr	r3, [r7, #4]
    4bce:	330f      	adds	r3, #15
    4bd0:	6a3a      	ldr	r2, [r7, #32]
    4bd2:	0c12      	lsrs	r2, r2, #16
    4bd4:	b2d2      	uxtb	r2, r2
    4bd6:	701a      	strb	r2, [r3, #0]
		data[16] = (result[4] >> 24) & 0xFF;
    4bd8:	687b      	ldr	r3, [r7, #4]
    4bda:	3310      	adds	r3, #16
    4bdc:	6a3a      	ldr	r2, [r7, #32]
    4bde:	0e12      	lsrs	r2, r2, #24
    4be0:	b2d2      	uxtb	r2, r2
    4be2:	701a      	strb	r2, [r3, #0]
		*data_len = 17;
    4be4:	683b      	ldr	r3, [r7, #0]
    4be6:	2211      	movs	r2, #17
    4be8:	601a      	str	r2, [r3, #0]
		break;
    4bea:	e3aa      	b.n	5342 <vendor_request_handler+0xac6>

#ifdef UBERTOOTH_ONE
	case UBERTOOTH_GET_PAEN:
		data[0] = (PAEN) ? 1 : 0;
    4bec:	4b12      	ldr	r3, [pc, #72]	; (4c38 <vendor_request_handler+0x3bc>)
    4bee:	681b      	ldr	r3, [r3, #0]
    4bf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    4bf4:	2b00      	cmp	r3, #0
    4bf6:	bf14      	ite	ne
    4bf8:	2301      	movne	r3, #1
    4bfa:	2300      	moveq	r3, #0
    4bfc:	b2db      	uxtb	r3, r3
    4bfe:	461a      	mov	r2, r3
    4c00:	687b      	ldr	r3, [r7, #4]
    4c02:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c04:	683b      	ldr	r3, [r7, #0]
    4c06:	2201      	movs	r2, #1
    4c08:	601a      	str	r2, [r3, #0]
		break;
    4c0a:	e39a      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
    4c0c:	68bb      	ldr	r3, [r7, #8]
    4c0e:	881b      	ldrh	r3, [r3, #0]
    4c10:	2b00      	cmp	r3, #0
    4c12:	d003      	beq.n	4c1c <vendor_request_handler+0x3a0>
			PAEN_SET;
    4c14:	4b09      	ldr	r3, [pc, #36]	; (4c3c <vendor_request_handler+0x3c0>)
    4c16:	2280      	movs	r2, #128	; 0x80
    4c18:	601a      	str	r2, [r3, #0]
		else
			PAEN_CLR;
		break;
    4c1a:	e392      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PAEN:
		if (request_params[0])
			PAEN_SET;
		else
			PAEN_CLR;
    4c1c:	4b08      	ldr	r3, [pc, #32]	; (4c40 <vendor_request_handler+0x3c4>)
    4c1e:	2280      	movs	r2, #128	; 0x80
    4c20:	601a      	str	r2, [r3, #0]
		break;
    4c22:	e38e      	b.n	5342 <vendor_request_handler+0xac6>
    4c24:	10000a3f 	.word	0x10000a3f
    4c28:	2009c034 	.word	0x2009c034
    4c2c:	2009c038 	.word	0x2009c038
    4c30:	2009c03c 	.word	0x2009c03c
    4c34:	10000448 	.word	0x10000448
    4c38:	2009c054 	.word	0x2009c054
    4c3c:	2009c058 	.word	0x2009c058
    4c40:	2009c05c 	.word	0x2009c05c

	case UBERTOOTH_GET_HGM:
		data[0] = (HGM) ? 1 : 0;
    4c44:	4b92      	ldr	r3, [pc, #584]	; (4e90 <vendor_request_handler+0x614>)
    4c46:	681b      	ldr	r3, [r3, #0]
    4c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
    4c4c:	2b00      	cmp	r3, #0
    4c4e:	bf14      	ite	ne
    4c50:	2301      	movne	r3, #1
    4c52:	2300      	moveq	r3, #0
    4c54:	b2db      	uxtb	r3, r3
    4c56:	461a      	mov	r2, r3
    4c58:	687b      	ldr	r3, [r7, #4]
    4c5a:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c5c:	683b      	ldr	r3, [r7, #0]
    4c5e:	2201      	movs	r2, #1
    4c60:	601a      	str	r2, [r3, #0]
		break;
    4c62:	e36e      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
    4c64:	68bb      	ldr	r3, [r7, #8]
    4c66:	881b      	ldrh	r3, [r3, #0]
    4c68:	2b00      	cmp	r3, #0
    4c6a:	d004      	beq.n	4c76 <vendor_request_handler+0x3fa>
			HGM_SET;
    4c6c:	4b89      	ldr	r3, [pc, #548]	; (4e94 <vendor_request_handler+0x618>)
    4c6e:	f44f 7280 	mov.w	r2, #256	; 0x100
    4c72:	601a      	str	r2, [r3, #0]
		else
			HGM_CLR;
		break;
    4c74:	e365      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_HGM:
		if (request_params[0])
			HGM_SET;
		else
			HGM_CLR;
    4c76:	4b88      	ldr	r3, [pc, #544]	; (4e98 <vendor_request_handler+0x61c>)
    4c78:	f44f 7280 	mov.w	r2, #256	; 0x100
    4c7c:	601a      	str	r2, [r3, #0]
		break;
    4c7e:	e360      	b.n	5342 <vendor_request_handler+0xac6>
#endif

#ifdef TX_ENABLE
	case UBERTOOTH_TX_TEST:
		requested_mode = MODE_TX_TEST;
    4c80:	4b86      	ldr	r3, [pc, #536]	; (4e9c <vendor_request_handler+0x620>)
    4c82:	2203      	movs	r2, #3
    4c84:	701a      	strb	r2, [r3, #0]
		break;
    4c86:	e35c      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_PALEVEL:
		data[0] = cc2400_get(FREND) & 0x7;
    4c88:	2005      	movs	r0, #5
    4c8a:	f004 ff0b 	bl	9aa4 <cc2400_get>
    4c8e:	4603      	mov	r3, r0
    4c90:	b2db      	uxtb	r3, r3
    4c92:	f003 0307 	and.w	r3, r3, #7
    4c96:	b2da      	uxtb	r2, r3
    4c98:	687b      	ldr	r3, [r7, #4]
    4c9a:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4c9c:	683b      	ldr	r3, [r7, #0]
    4c9e:	2201      	movs	r2, #1
    4ca0:	601a      	str	r2, [r3, #0]
		break;
    4ca2:	e34e      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
    4ca4:	68bb      	ldr	r3, [r7, #8]
    4ca6:	881b      	ldrh	r3, [r3, #0]
    4ca8:	2b07      	cmp	r3, #7
    4caa:	d809      	bhi.n	4cc0 <vendor_request_handler+0x444>
			cc2400_set(FREND, 8 | request_params[0]);
    4cac:	68bb      	ldr	r3, [r7, #8]
    4cae:	881b      	ldrh	r3, [r3, #0]
    4cb0:	f043 0308 	orr.w	r3, r3, #8
    4cb4:	b29b      	uxth	r3, r3
    4cb6:	2005      	movs	r0, #5
    4cb8:	4619      	mov	r1, r3
    4cba:	f004 ff09 	bl	9ad0 <cc2400_set>
		} else {
			return 0;
		}
		break;
    4cbe:	e340      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_PALEVEL:
		if( request_params[0] < 8 ) {
			cc2400_set(FREND, 8 | request_params[0]);
		} else {
			return 0;
    4cc0:	2300      	movs	r3, #0
    4cc2:	e33f      	b.n	5344 <vendor_request_handler+0xac8>
		}
		break;

	case UBERTOOTH_RANGE_TEST:
		requested_mode = MODE_RANGE_TEST;
    4cc4:	4b75      	ldr	r3, [pc, #468]	; (4e9c <vendor_request_handler+0x620>)
    4cc6:	2205      	movs	r2, #5
    4cc8:	701a      	strb	r2, [r3, #0]
		break;
    4cca:	e33a      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_REPEATER:
		requested_mode = MODE_REPEATER;
    4ccc:	4b73      	ldr	r3, [pc, #460]	; (4e9c <vendor_request_handler+0x620>)
    4cce:	2206      	movs	r2, #6
    4cd0:	701a      	strb	r2, [r3, #0]
		break;
    4cd2:	e336      	b.n	5342 <vendor_request_handler+0xac6>
#endif

	case UBERTOOTH_RANGE_CHECK:
		data[0] = rr.valid;
    4cd4:	4b72      	ldr	r3, [pc, #456]	; (4ea0 <vendor_request_handler+0x624>)
    4cd6:	781a      	ldrb	r2, [r3, #0]
    4cd8:	687b      	ldr	r3, [r7, #4]
    4cda:	701a      	strb	r2, [r3, #0]
		data[1] = rr.request_pa;
    4cdc:	687b      	ldr	r3, [r7, #4]
    4cde:	3301      	adds	r3, #1
    4ce0:	4a6f      	ldr	r2, [pc, #444]	; (4ea0 <vendor_request_handler+0x624>)
    4ce2:	7852      	ldrb	r2, [r2, #1]
    4ce4:	701a      	strb	r2, [r3, #0]
		data[2] = rr.request_num;
    4ce6:	687b      	ldr	r3, [r7, #4]
    4ce8:	3302      	adds	r3, #2
    4cea:	4a6d      	ldr	r2, [pc, #436]	; (4ea0 <vendor_request_handler+0x624>)
    4cec:	7892      	ldrb	r2, [r2, #2]
    4cee:	701a      	strb	r2, [r3, #0]
		data[3] = rr.reply_pa;
    4cf0:	687b      	ldr	r3, [r7, #4]
    4cf2:	3303      	adds	r3, #3
    4cf4:	4a6a      	ldr	r2, [pc, #424]	; (4ea0 <vendor_request_handler+0x624>)
    4cf6:	78d2      	ldrb	r2, [r2, #3]
    4cf8:	701a      	strb	r2, [r3, #0]
		data[4] = rr.reply_num;
    4cfa:	687b      	ldr	r3, [r7, #4]
    4cfc:	3304      	adds	r3, #4
    4cfe:	4a68      	ldr	r2, [pc, #416]	; (4ea0 <vendor_request_handler+0x624>)
    4d00:	7912      	ldrb	r2, [r2, #4]
    4d02:	701a      	strb	r2, [r3, #0]
		*data_len = 5;
    4d04:	683b      	ldr	r3, [r7, #0]
    4d06:	2205      	movs	r2, #5
    4d08:	601a      	str	r2, [r3, #0]
		break;
    4d0a:	e31a      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_STOP:
		requested_mode = MODE_IDLE;
    4d0c:	4b63      	ldr	r3, [pc, #396]	; (4e9c <vendor_request_handler+0x620>)
    4d0e:	2200      	movs	r2, #0
    4d10:	701a      	strb	r2, [r3, #0]
		break;
    4d12:	e316      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_MOD:
		data[0] = modulation;
    4d14:	4b63      	ldr	r3, [pc, #396]	; (4ea4 <vendor_request_handler+0x628>)
    4d16:	781b      	ldrb	r3, [r3, #0]
    4d18:	b2da      	uxtb	r2, r3
    4d1a:	687b      	ldr	r3, [r7, #4]
    4d1c:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4d1e:	683b      	ldr	r3, [r7, #0]
    4d20:	2201      	movs	r2, #1
    4d22:	601a      	str	r2, [r3, #0]
		break;
    4d24:	e30d      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_MOD:
		modulation = request_params[0];
    4d26:	68bb      	ldr	r3, [r7, #8]
    4d28:	881b      	ldrh	r3, [r3, #0]
    4d2a:	b2da      	uxtb	r2, r3
    4d2c:	4b5d      	ldr	r3, [pc, #372]	; (4ea4 <vendor_request_handler+0x628>)
    4d2e:	701a      	strb	r2, [r3, #0]
		break;
    4d30:	e307      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CHANNEL:
		data[0] = channel & 0xFF;
    4d32:	4b5d      	ldr	r3, [pc, #372]	; (4ea8 <vendor_request_handler+0x62c>)
    4d34:	881b      	ldrh	r3, [r3, #0]
    4d36:	b29b      	uxth	r3, r3
    4d38:	b2da      	uxtb	r2, r3
    4d3a:	687b      	ldr	r3, [r7, #4]
    4d3c:	701a      	strb	r2, [r3, #0]
		data[1] = (channel >> 8) & 0xFF;
    4d3e:	687b      	ldr	r3, [r7, #4]
    4d40:	3301      	adds	r3, #1
    4d42:	4a59      	ldr	r2, [pc, #356]	; (4ea8 <vendor_request_handler+0x62c>)
    4d44:	8812      	ldrh	r2, [r2, #0]
    4d46:	b292      	uxth	r2, r2
    4d48:	0a12      	lsrs	r2, r2, #8
    4d4a:	b292      	uxth	r2, r2
    4d4c:	b2d2      	uxtb	r2, r2
    4d4e:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    4d50:	683b      	ldr	r3, [r7, #0]
    4d52:	2202      	movs	r2, #2
    4d54:	601a      	str	r2, [r3, #0]
		break;
    4d56:	e2f4      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CHANNEL:
		requested_channel = request_params[0];
    4d58:	68bb      	ldr	r3, [r7, #8]
    4d5a:	881a      	ldrh	r2, [r3, #0]
    4d5c:	4b53      	ldr	r3, [pc, #332]	; (4eac <vendor_request_handler+0x630>)
    4d5e:	801a      	strh	r2, [r3, #0]
		/* bluetooth band sweep mode, start at channel 2402 */
		if (requested_channel > MAX_FREQ) {
    4d60:	4b52      	ldr	r3, [pc, #328]	; (4eac <vendor_request_handler+0x630>)
    4d62:	881b      	ldrh	r3, [r3, #0]
    4d64:	b29b      	uxth	r3, r3
    4d66:	f640 22ea 	movw	r2, #2794	; 0xaea
    4d6a:	4293      	cmp	r3, r2
    4d6c:	d907      	bls.n	4d7e <vendor_request_handler+0x502>
			hop_mode = HOP_SWEEP;
    4d6e:	4b50      	ldr	r3, [pc, #320]	; (4eb0 <vendor_request_handler+0x634>)
    4d70:	2201      	movs	r2, #1
    4d72:	701a      	strb	r2, [r3, #0]
			requested_channel = 2402;
    4d74:	4b4d      	ldr	r3, [pc, #308]	; (4eac <vendor_request_handler+0x630>)
    4d76:	f640 1262 	movw	r2, #2402	; 0x962
    4d7a:	801a      	strh	r2, [r3, #0]
    4d7c:	e020      	b.n	4dc0 <vendor_request_handler+0x544>
		}
		/* fixed channel mode, can be outside bluetooth band */
		else {
			hop_mode = HOP_NONE;
    4d7e:	4b4c      	ldr	r3, [pc, #304]	; (4eb0 <vendor_request_handler+0x634>)
    4d80:	2200      	movs	r2, #0
    4d82:	701a      	strb	r2, [r3, #0]
			requested_channel = MAX(requested_channel, MIN_FREQ);
    4d84:	4b49      	ldr	r3, [pc, #292]	; (4eac <vendor_request_handler+0x630>)
    4d86:	881b      	ldrh	r3, [r3, #0]
    4d88:	b29b      	uxth	r3, r3
    4d8a:	f640 02dc 	movw	r2, #2268	; 0x8dc
    4d8e:	4293      	cmp	r3, r2
    4d90:	d903      	bls.n	4d9a <vendor_request_handler+0x51e>
    4d92:	4b46      	ldr	r3, [pc, #280]	; (4eac <vendor_request_handler+0x630>)
    4d94:	881b      	ldrh	r3, [r3, #0]
    4d96:	b29b      	uxth	r3, r3
    4d98:	e001      	b.n	4d9e <vendor_request_handler+0x522>
    4d9a:	f640 03dc 	movw	r3, #2268	; 0x8dc
    4d9e:	4a43      	ldr	r2, [pc, #268]	; (4eac <vendor_request_handler+0x630>)
    4da0:	8013      	strh	r3, [r2, #0]
			requested_channel = MIN(requested_channel, MAX_FREQ);
    4da2:	4b42      	ldr	r3, [pc, #264]	; (4eac <vendor_request_handler+0x630>)
    4da4:	881b      	ldrh	r3, [r3, #0]
    4da6:	b29b      	uxth	r3, r3
    4da8:	f640 22e9 	movw	r2, #2793	; 0xae9
    4dac:	4293      	cmp	r3, r2
    4dae:	d803      	bhi.n	4db8 <vendor_request_handler+0x53c>
    4db0:	4b3e      	ldr	r3, [pc, #248]	; (4eac <vendor_request_handler+0x630>)
    4db2:	881b      	ldrh	r3, [r3, #0]
    4db4:	b29b      	uxth	r3, r3
    4db6:	e001      	b.n	4dbc <vendor_request_handler+0x540>
    4db8:	f640 23ea 	movw	r3, #2794	; 0xaea
    4dbc:	4a3b      	ldr	r2, [pc, #236]	; (4eac <vendor_request_handler+0x630>)
    4dbe:	8013      	strh	r3, [r2, #0]
		}

		if (mode != MODE_BT_FOLLOW_LE) {
    4dc0:	4b3c      	ldr	r3, [pc, #240]	; (4eb4 <vendor_request_handler+0x638>)
    4dc2:	781b      	ldrb	r3, [r3, #0]
    4dc4:	b2db      	uxtb	r3, r3
    4dc6:	2b09      	cmp	r3, #9
    4dc8:	d00a      	beq.n	4de0 <vendor_request_handler+0x564>
			channel = requested_channel;
    4dca:	4b38      	ldr	r3, [pc, #224]	; (4eac <vendor_request_handler+0x630>)
    4dcc:	881b      	ldrh	r3, [r3, #0]
    4dce:	b29a      	uxth	r2, r3
    4dd0:	4b35      	ldr	r3, [pc, #212]	; (4ea8 <vendor_request_handler+0x62c>)
    4dd2:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    4dd4:	4b35      	ldr	r3, [pc, #212]	; (4eac <vendor_request_handler+0x630>)
    4dd6:	2200      	movs	r2, #0
    4dd8:	801a      	strh	r2, [r3, #0]

			/* CS threshold is mode-dependent. Update it after
			 * possible mode change. TODO - kludgy. */
			cs_threshold_calc_and_set();
    4dda:	f7ff fcd9 	bl	4790 <cs_threshold_calc_and_set>
		}
		break;
    4dde:	e2b0      	b.n	5342 <vendor_request_handler+0xac6>
    4de0:	e2af      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_ISP:
		command[0] = 57;
    4de2:	2339      	movs	r3, #57	; 0x39
    4de4:	627b      	str	r3, [r7, #36]	; 0x24
		iap_entry(command, result);
    4de6:	4b34      	ldr	r3, [pc, #208]	; (4eb8 <vendor_request_handler+0x63c>)
    4de8:	681b      	ldr	r3, [r3, #0]
    4dea:	f107 0124 	add.w	r1, r7, #36	; 0x24
    4dee:	f107 0210 	add.w	r2, r7, #16
    4df2:	4608      	mov	r0, r1
    4df4:	4611      	mov	r1, r2
    4df6:	4798      	blx	r3
		*data_len = 0; /* should never return */
    4df8:	683b      	ldr	r3, [r7, #0]
    4dfa:	2200      	movs	r2, #0
    4dfc:	601a      	str	r2, [r3, #0]
		break;
    4dfe:	e2a0      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_FLASH:
		bootloader_ctrl = DFU_MODE;
    4e00:	4b2e      	ldr	r3, [pc, #184]	; (4ebc <vendor_request_handler+0x640>)
    4e02:	4a2f      	ldr	r2, [pc, #188]	; (4ec0 <vendor_request_handler+0x644>)
    4e04:	601a      	str	r2, [r3, #0]
		reset();
    4e06:	f005 f82f 	bl	9e68 <reset>
		break;
    4e0a:	e29a      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    4e0c:	68bb      	ldr	r3, [r7, #8]
    4e0e:	881b      	ldrh	r3, [r3, #0]
    4e10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4e14:	d917      	bls.n	4e46 <vendor_request_handler+0x5ca>
    4e16:	68bb      	ldr	r3, [r7, #8]
    4e18:	881b      	ldrh	r3, [r3, #0]
    4e1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    4e1e:	d812      	bhi.n	4e46 <vendor_request_handler+0x5ca>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4e20:	68bb      	ldr	r3, [r7, #8]
    4e22:	3302      	adds	r3, #2
    4e24:	881b      	ldrh	r3, [r3, #0]
		bootloader_ctrl = DFU_MODE;
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
    4e26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
    4e2a:	d90c      	bls.n	4e46 <vendor_request_handler+0x5ca>
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4e2c:	68bb      	ldr	r3, [r7, #8]
    4e2e:	3302      	adds	r3, #2
    4e30:	881b      	ldrh	r3, [r3, #0]
    4e32:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
    4e36:	d806      	bhi.n	4e46 <vendor_request_handler+0x5ca>
				request_params[1] < request_params[0])
    4e38:	68bb      	ldr	r3, [r7, #8]
    4e3a:	3302      	adds	r3, #2
    4e3c:	881a      	ldrh	r2, [r3, #0]
    4e3e:	68bb      	ldr	r3, [r7, #8]
    4e40:	881b      	ldrh	r3, [r3, #0]
		reset();
		break;

	case UBERTOOTH_SPECAN:
		if (request_params[0] < 2049 || request_params[0] > 3072 || 
				request_params[1] < 2049 || request_params[1] > 3072 ||
    4e42:	429a      	cmp	r2, r3
    4e44:	d201      	bcs.n	4e4a <vendor_request_handler+0x5ce>
				request_params[1] < request_params[0])
			return 0;
    4e46:	2300      	movs	r3, #0
    4e48:	e27c      	b.n	5344 <vendor_request_handler+0xac8>
		low_freq = request_params[0];
    4e4a:	68bb      	ldr	r3, [r7, #8]
    4e4c:	881a      	ldrh	r2, [r3, #0]
    4e4e:	4b1d      	ldr	r3, [pc, #116]	; (4ec4 <vendor_request_handler+0x648>)
    4e50:	801a      	strh	r2, [r3, #0]
		high_freq = request_params[1];
    4e52:	68bb      	ldr	r3, [r7, #8]
    4e54:	885a      	ldrh	r2, [r3, #2]
    4e56:	4b1c      	ldr	r3, [pc, #112]	; (4ec8 <vendor_request_handler+0x64c>)
    4e58:	801a      	strh	r2, [r3, #0]
		requested_mode = MODE_SPECAN;
    4e5a:	4b10      	ldr	r3, [pc, #64]	; (4e9c <vendor_request_handler+0x620>)
    4e5c:	2204      	movs	r2, #4
    4e5e:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4e60:	683b      	ldr	r3, [r7, #0]
    4e62:	2200      	movs	r2, #0
    4e64:	601a      	str	r2, [r3, #0]
		break;
    4e66:	e26c      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_LED_SPECAN:
		if (request_params[0] > 256)
    4e68:	68bb      	ldr	r3, [r7, #8]
    4e6a:	881b      	ldrh	r3, [r3, #0]
    4e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    4e70:	d901      	bls.n	4e76 <vendor_request_handler+0x5fa>
			return 0;
    4e72:	2300      	movs	r3, #0
    4e74:	e266      	b.n	5344 <vendor_request_handler+0xac8>
		rssi_threshold = (int8_t)request_params[0];
    4e76:	68bb      	ldr	r3, [r7, #8]
    4e78:	881b      	ldrh	r3, [r3, #0]
    4e7a:	b2da      	uxtb	r2, r3
    4e7c:	4b13      	ldr	r3, [pc, #76]	; (4ecc <vendor_request_handler+0x650>)
    4e7e:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_LED_SPECAN;
    4e80:	4b06      	ldr	r3, [pc, #24]	; (4e9c <vendor_request_handler+0x620>)
    4e82:	2207      	movs	r2, #7
    4e84:	701a      	strb	r2, [r3, #0]
		*data_len = 0;
    4e86:	683b      	ldr	r3, [r7, #0]
    4e88:	2200      	movs	r2, #0
    4e8a:	601a      	str	r2, [r3, #0]
		break;
    4e8c:	e259      	b.n	5342 <vendor_request_handler+0xac6>
    4e8e:	bf00      	nop
    4e90:	2009c054 	.word	0x2009c054
    4e94:	2009c058 	.word	0x2009c058
    4e98:	2009c05c 	.word	0x2009c05c
    4e9c:	10000a3f 	.word	0x10000a3f
    4ea0:	10001078 	.word	0x10001078
    4ea4:	10000a42 	.word	0x10000a42
    4ea8:	1000049c 	.word	0x1000049c
    4eac:	10000a44 	.word	0x10000a44
    4eb0:	1000097c 	.word	0x1000097c
    4eb4:	10000a3e 	.word	0x10000a3e
    4eb8:	10000448 	.word	0x10000448
    4ebc:	1000001c 	.word	0x1000001c
    4ec0:	4305bb21 	.word	0x4305bb21
    4ec4:	1000049e 	.word	0x1000049e
    4ec8:	100004a0 	.word	0x100004a0
    4ecc:	100004a2 	.word	0x100004a2

	case UBERTOOTH_GET_REV_NUM:
		data[0] = 0x00;
    4ed0:	687b      	ldr	r3, [r7, #4]
    4ed2:	2200      	movs	r2, #0
    4ed4:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
    4ed6:	687b      	ldr	r3, [r7, #4]
    4ed8:	3301      	adds	r3, #1
    4eda:	2200      	movs	r2, #0
    4edc:	701a      	strb	r2, [r3, #0]

		length = (u8)strlen(GIT_REVISION);
    4ede:	48a4      	ldr	r0, [pc, #656]	; (5170 <vendor_request_handler+0x8f4>)
    4ee0:	f006 fc40 	bl	b764 <strlen>
    4ee4:	4603      	mov	r3, r0
    4ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[2] = length;
    4eea:	687b      	ldr	r3, [r7, #4]
    4eec:	3302      	adds	r3, #2
    4eee:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    4ef2:	701a      	strb	r2, [r3, #0]

		memcpy(&data[3], GIT_REVISION, length);
    4ef4:	687b      	ldr	r3, [r7, #4]
    4ef6:	1cda      	adds	r2, r3, #3
    4ef8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4efc:	4610      	mov	r0, r2
    4efe:	499c      	ldr	r1, [pc, #624]	; (5170 <vendor_request_handler+0x8f4>)
    4f00:	461a      	mov	r2, r3
    4f02:	f006 fbb9 	bl	b678 <memcpy>

		*data_len = 2 + 1 + length;
    4f06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4f0a:	1cda      	adds	r2, r3, #3
    4f0c:	683b      	ldr	r3, [r7, #0]
    4f0e:	601a      	str	r2, [r3, #0]
		break;
    4f10:	e217      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_COMPILE_INFO:
		length = (u8)strlen(compile_info);
    4f12:	4898      	ldr	r0, [pc, #608]	; (5174 <vendor_request_handler+0x8f8>)
    4f14:	f006 fc26 	bl	b764 <strlen>
    4f18:	4603      	mov	r3, r0
    4f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		data[0] = length;
    4f1e:	687b      	ldr	r3, [r7, #4]
    4f20:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
    4f24:	701a      	strb	r2, [r3, #0]
		memcpy(&data[1], compile_info, length);
    4f26:	687b      	ldr	r3, [r7, #4]
    4f28:	1c5a      	adds	r2, r3, #1
    4f2a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4f2e:	4610      	mov	r0, r2
    4f30:	4990      	ldr	r1, [pc, #576]	; (5174 <vendor_request_handler+0x8f8>)
    4f32:	461a      	mov	r2, r3
    4f34:	f006 fba0 	bl	b678 <memcpy>
		*data_len = 1 + length;
    4f38:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    4f3c:	1c5a      	adds	r2, r3, #1
    4f3e:	683b      	ldr	r3, [r7, #0]
    4f40:	601a      	str	r2, [r3, #0]
		break;
    4f42:	e1fe      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_BOARD_ID:
		data[0] = BOARD_ID;
    4f44:	687b      	ldr	r3, [r7, #4]
    4f46:	2201      	movs	r2, #1
    4f48:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4f4a:	683b      	ldr	r3, [r7, #0]
    4f4c:	2201      	movs	r2, #1
    4f4e:	601a      	str	r2, [r3, #0]
		break;
    4f50:	e1f7      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_SQUELCH:
		cs_threshold_req = (int8_t)request_params[0];
    4f52:	68bb      	ldr	r3, [r7, #8]
    4f54:	881b      	ldrh	r3, [r3, #0]
    4f56:	b2da      	uxtb	r2, r3
    4f58:	4b87      	ldr	r3, [pc, #540]	; (5178 <vendor_request_handler+0x8fc>)
    4f5a:	701a      	strb	r2, [r3, #0]
		cs_threshold_calc_and_set();
    4f5c:	f7ff fc18 	bl	4790 <cs_threshold_calc_and_set>
		break;
    4f60:	e1ef      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_SQUELCH:
		data[0] = cs_threshold_req;
    4f62:	4b85      	ldr	r3, [pc, #532]	; (5178 <vendor_request_handler+0x8fc>)
    4f64:	781b      	ldrb	r3, [r3, #0]
    4f66:	b2da      	uxtb	r2, r3
    4f68:	687b      	ldr	r3, [r7, #4]
    4f6a:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    4f6c:	683b      	ldr	r3, [r7, #0]
    4f6e:	2201      	movs	r2, #1
    4f70:	601a      	str	r2, [r3, #0]
		break;
    4f72:	e1e6      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
    4f74:	4981      	ldr	r1, [pc, #516]	; (517c <vendor_request_handler+0x900>)
    4f76:	f04f 0200 	mov.w	r2, #0
    4f7a:	f04f 0300 	mov.w	r3, #0
    4f7e:	e9c1 2300 	strd	r2, r3, [r1]
		target.access_code = 0;
    4f82:	497e      	ldr	r1, [pc, #504]	; (517c <vendor_request_handler+0x900>)
    4f84:	f04f 0200 	mov.w	r2, #0
    4f88:	f04f 0300 	mov.w	r3, #0
    4f8c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		for(i=0; i < 8; i++) {
    4f90:	2300      	movs	r3, #0
    4f92:	64fb      	str	r3, [r7, #76]	; 0x4c
    4f94:	e025      	b.n	4fe2 <vendor_request_handler+0x766>
			target.address |= (uint64_t)data[i] << 8*i;
    4f96:	4b79      	ldr	r3, [pc, #484]	; (517c <vendor_request_handler+0x900>)
    4f98:	e9d3 ab00 	ldrd	sl, fp, [r3]
    4f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4f9e:	687a      	ldr	r2, [r7, #4]
    4fa0:	4413      	add	r3, r2
    4fa2:	781b      	ldrb	r3, [r3, #0]
    4fa4:	b2da      	uxtb	r2, r3
    4fa6:	f04f 0300 	mov.w	r3, #0
    4faa:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    4fac:	00c9      	lsls	r1, r1, #3
    4fae:	f1a1 0620 	sub.w	r6, r1, #32
    4fb2:	f1c1 0020 	rsb	r0, r1, #32
    4fb6:	fa03 f901 	lsl.w	r9, r3, r1
    4fba:	fa02 f606 	lsl.w	r6, r2, r6
    4fbe:	ea49 0906 	orr.w	r9, r9, r6
    4fc2:	fa22 f000 	lsr.w	r0, r2, r0
    4fc6:	ea49 0900 	orr.w	r9, r9, r0
    4fca:	fa02 f801 	lsl.w	r8, r2, r1
    4fce:	ea4a 0208 	orr.w	r2, sl, r8
    4fd2:	ea4b 0309 	orr.w	r3, fp, r9
    4fd6:	4969      	ldr	r1, [pc, #420]	; (517c <vendor_request_handler+0x900>)
    4fd8:	e9c1 2300 	strd	r2, r3, [r1]
		break;

	case UBERTOOTH_SET_BDADDR:
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
    4fdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4fde:	3301      	adds	r3, #1
    4fe0:	64fb      	str	r3, [r7, #76]	; 0x4c
    4fe2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4fe4:	2b07      	cmp	r3, #7
    4fe6:	ddd6      	ble.n	4f96 <vendor_request_handler+0x71a>
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    4fe8:	2300      	movs	r3, #0
    4fea:	64fb      	str	r3, [r7, #76]	; 0x4c
    4fec:	e024      	b.n	5038 <vendor_request_handler+0x7bc>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
    4fee:	4b63      	ldr	r3, [pc, #396]	; (517c <vendor_request_handler+0x900>)
    4ff0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
    4ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    4ff6:	3308      	adds	r3, #8
    4ff8:	687a      	ldr	r2, [r7, #4]
    4ffa:	4413      	add	r3, r2
    4ffc:	781b      	ldrb	r3, [r3, #0]
    4ffe:	b2da      	uxtb	r2, r3
    5000:	f04f 0300 	mov.w	r3, #0
    5004:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
    5006:	00c9      	lsls	r1, r1, #3
    5008:	f1a1 0620 	sub.w	r6, r1, #32
    500c:	f1c1 0020 	rsb	r0, r1, #32
    5010:	fa03 f501 	lsl.w	r5, r3, r1
    5014:	fa02 f606 	lsl.w	r6, r2, r6
    5018:	4335      	orrs	r5, r6
    501a:	fa22 f000 	lsr.w	r0, r2, r0
    501e:	4305      	orrs	r5, r0
    5020:	fa02 f401 	lsl.w	r4, r2, r1
    5024:	ea48 0204 	orr.w	r2, r8, r4
    5028:	ea49 0305 	orr.w	r3, r9, r5
    502c:	4953      	ldr	r1, [pc, #332]	; (517c <vendor_request_handler+0x900>)
    502e:	e9c1 2302 	strd	r2, r3, [r1, #8]
		target.address = 0;
		target.access_code = 0;
		for(i=0; i < 8; i++) {
			target.address |= (uint64_t)data[i] << 8*i;
		}
		for(i=0; i < 8; i++) {
    5032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5034:	3301      	adds	r3, #1
    5036:	64fb      	str	r3, [r7, #76]	; 0x4c
    5038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    503a:	2b07      	cmp	r3, #7
    503c:	ddd7      	ble.n	4fee <vendor_request_handler+0x772>
			target.access_code |= (uint64_t)data[i+8] << 8*i;
		}
		break;
    503e:	e180      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
    5040:	2300      	movs	r3, #0
    5042:	64bb      	str	r3, [r7, #72]	; 0x48
		for(i=0; i < 4; i++) {
    5044:	2300      	movs	r3, #0
    5046:	64fb      	str	r3, [r7, #76]	; 0x4c
    5048:	e00d      	b.n	5066 <vendor_request_handler+0x7ea>
			clock_offset <<= 8;
    504a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    504c:	021b      	lsls	r3, r3, #8
    504e:	64bb      	str	r3, [r7, #72]	; 0x48
			clock_offset |= data[i];
    5050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5052:	687a      	ldr	r2, [r7, #4]
    5054:	4413      	add	r3, r2
    5056:	781b      	ldrb	r3, [r3, #0]
    5058:	461a      	mov	r2, r3
    505a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    505c:	4313      	orrs	r3, r2
    505e:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		break;

	case UBERTOOTH_START_HOPPING:
		clock_offset = 0;
		for(i=0; i < 4; i++) {
    5060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5062:	3301      	adds	r3, #1
    5064:	64fb      	str	r3, [r7, #76]	; 0x4c
    5066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5068:	2b03      	cmp	r3, #3
    506a:	ddee      	ble.n	504a <vendor_request_handler+0x7ce>
			clock_offset <<= 8;
			clock_offset |= data[i];
		}
		clkn += clock_offset;
    506c:	4b44      	ldr	r3, [pc, #272]	; (5180 <vendor_request_handler+0x904>)
    506e:	681a      	ldr	r2, [r3, #0]
    5070:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    5072:	4413      	add	r3, r2
    5074:	4a42      	ldr	r2, [pc, #264]	; (5180 <vendor_request_handler+0x904>)
    5076:	6013      	str	r3, [r2, #0]
		hop_mode = HOP_BLUETOOTH;
    5078:	4b42      	ldr	r3, [pc, #264]	; (5184 <vendor_request_handler+0x908>)
    507a:	2202      	movs	r2, #2
    507c:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW;
    507e:	4b42      	ldr	r3, [pc, #264]	; (5188 <vendor_request_handler+0x90c>)
    5080:	2208      	movs	r2, #8
    5082:	701a      	strb	r2, [r3, #0]
		break;
    5084:	e15d      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CLOCK:
		clock = data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24;
    5086:	687b      	ldr	r3, [r7, #4]
    5088:	781b      	ldrb	r3, [r3, #0]
    508a:	461a      	mov	r2, r3
    508c:	687b      	ldr	r3, [r7, #4]
    508e:	3301      	adds	r3, #1
    5090:	781b      	ldrb	r3, [r3, #0]
    5092:	021b      	lsls	r3, r3, #8
    5094:	431a      	orrs	r2, r3
    5096:	687b      	ldr	r3, [r7, #4]
    5098:	3302      	adds	r3, #2
    509a:	781b      	ldrb	r3, [r3, #0]
    509c:	041b      	lsls	r3, r3, #16
    509e:	431a      	orrs	r2, r3
    50a0:	687b      	ldr	r3, [r7, #4]
    50a2:	3303      	adds	r3, #3
    50a4:	781b      	ldrb	r3, [r3, #0]
    50a6:	061b      	lsls	r3, r3, #24
    50a8:	4313      	orrs	r3, r2
    50aa:	63fb      	str	r3, [r7, #60]	; 0x3c
		clkn = clock;
    50ac:	4a34      	ldr	r2, [pc, #208]	; (5180 <vendor_request_handler+0x904>)
    50ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    50b0:	6013      	str	r3, [r2, #0]
		cs_threshold_calc_and_set();
    50b2:	f7ff fb6d 	bl	4790 <cs_threshold_calc_and_set>
		break;
    50b6:	e144      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    50b8:	2300      	movs	r3, #0
    50ba:	64fb      	str	r3, [r7, #76]	; 0x4c
    50bc:	e00b      	b.n	50d6 <vendor_request_handler+0x85a>
			afh_map[i] = data[i];
    50be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50c0:	687a      	ldr	r2, [r7, #4]
    50c2:	4413      	add	r3, r2
    50c4:	7819      	ldrb	r1, [r3, #0]
    50c6:	4a31      	ldr	r2, [pc, #196]	; (518c <vendor_request_handler+0x910>)
    50c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50ca:	4413      	add	r3, r2
    50cc:	460a      	mov	r2, r1
    50ce:	701a      	strb	r2, [r3, #0]
		clkn = clock;
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_SET_AFHMAP:
		for(i=0; i < 10; i++) {
    50d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50d2:	3301      	adds	r3, #1
    50d4:	64fb      	str	r3, [r7, #76]	; 0x4c
    50d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50d8:	2b09      	cmp	r3, #9
    50da:	ddf0      	ble.n	50be <vendor_request_handler+0x842>
			afh_map[i] = data[i];
		}
		afh_enabled = 1;
    50dc:	4b2c      	ldr	r3, [pc, #176]	; (5190 <vendor_request_handler+0x914>)
    50de:	2201      	movs	r2, #1
    50e0:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    50e2:	683b      	ldr	r3, [r7, #0]
    50e4:	220a      	movs	r2, #10
    50e6:	601a      	str	r2, [r3, #0]
		break;
    50e8:	e12b      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    50ea:	2300      	movs	r3, #0
    50ec:	64fb      	str	r3, [r7, #76]	; 0x4c
    50ee:	e007      	b.n	5100 <vendor_request_handler+0x884>
			afh_map[i] = 0;
    50f0:	4a26      	ldr	r2, [pc, #152]	; (518c <vendor_request_handler+0x910>)
    50f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50f4:	4413      	add	r3, r2
    50f6:	2200      	movs	r2, #0
    50f8:	701a      	strb	r2, [r3, #0]
		afh_enabled = 1;
		*data_len = 10;
		break;

	case UBERTOOTH_CLEAR_AFHMAP:
		for(i=0; i < 10; i++) {
    50fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    50fc:	3301      	adds	r3, #1
    50fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    5100:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5102:	2b09      	cmp	r3, #9
    5104:	ddf4      	ble.n	50f0 <vendor_request_handler+0x874>
			afh_map[i] = 0;
		}
		afh_enabled = 0;
    5106:	4b22      	ldr	r3, [pc, #136]	; (5190 <vendor_request_handler+0x914>)
    5108:	2200      	movs	r2, #0
    510a:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
    510c:	683b      	ldr	r3, [r7, #0]
    510e:	220a      	movs	r2, #10
    5110:	601a      	str	r2, [r3, #0]
		break;
    5112:	e116      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
    5114:	4b1a      	ldr	r3, [pc, #104]	; (5180 <vendor_request_handler+0x904>)
    5116:	681b      	ldr	r3, [r3, #0]
    5118:	63fb      	str	r3, [r7, #60]	; 0x3c
		for(i=0; i < 4; i++) {
    511a:	2300      	movs	r3, #0
    511c:	64fb      	str	r3, [r7, #76]	; 0x4c
    511e:	e00c      	b.n	513a <vendor_request_handler+0x8be>
			data[i] = (clock >> (8*i)) & 0xff;
    5120:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5122:	687a      	ldr	r2, [r7, #4]
    5124:	4413      	add	r3, r2
    5126:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    5128:	00d2      	lsls	r2, r2, #3
    512a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    512c:	fa21 f202 	lsr.w	r2, r1, r2
    5130:	b2d2      	uxtb	r2, r2
    5132:	701a      	strb	r2, [r3, #0]
		*data_len = 10;
		break;

	case UBERTOOTH_GET_CLOCK:
		clock = clkn;
		for(i=0; i < 4; i++) {
    5134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    5136:	3301      	adds	r3, #1
    5138:	64fb      	str	r3, [r7, #76]	; 0x4c
    513a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    513c:	2b03      	cmp	r3, #3
    513e:	ddef      	ble.n	5120 <vendor_request_handler+0x8a4>
			data[i] = (clock >> (8*i)) & 0xff;
		}
		*data_len = 4;
    5140:	683b      	ldr	r3, [r7, #0]
    5142:	2204      	movs	r2, #4
    5144:	601a      	str	r2, [r3, #0]
		break;
    5146:	e0fc      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SNIFFING:
		*data_len = 0;
    5148:	683b      	ldr	r3, [r7, #0]
    514a:	2200      	movs	r2, #0
    514c:	601a      	str	r2, [r3, #0]

		do_hop = 0;
    514e:	4b11      	ldr	r3, [pc, #68]	; (5194 <vendor_request_handler+0x918>)
    5150:	2200      	movs	r2, #0
    5152:	701a      	strb	r2, [r3, #0]
		hop_mode = HOP_BTLE;
    5154:	4b0b      	ldr	r3, [pc, #44]	; (5184 <vendor_request_handler+0x908>)
    5156:	2203      	movs	r2, #3
    5158:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_FOLLOW_LE;
    515a:	4b0b      	ldr	r3, [pc, #44]	; (5188 <vendor_request_handler+0x90c>)
    515c:	2209      	movs	r2, #9
    515e:	701a      	strb	r2, [r3, #0]

		queue_init();
    5160:	f003 fa3e 	bl	85e0 <queue_init>
		cs_threshold_calc_and_set();
    5164:	f7ff fb14 	bl	4790 <cs_threshold_calc_and_set>
		break;
    5168:	e0eb      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    516a:	2300      	movs	r3, #0
    516c:	64fb      	str	r3, [r7, #76]	; 0x4c
    516e:	e021      	b.n	51b4 <vendor_request_handler+0x938>
    5170:	0000c088 	.word	0x0000c088
    5174:	0000c044 	.word	0x0000c044
    5178:	1000044c 	.word	0x1000044c
    517c:	100010c0 	.word	0x100010c0
    5180:	10000be4 	.word	0x10000be4
    5184:	1000097c 	.word	0x1000097c
    5188:	10000a3f 	.word	0x10000a3f
    518c:	10000bbc 	.word	0x10000bbc
    5190:	10001024 	.word	0x10001024
    5194:	1000097d 	.word	0x1000097d
			data[i] = (le.access_address >> (8*i)) & 0xff;
    5198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    519a:	687a      	ldr	r2, [r7, #4]
    519c:	4413      	add	r3, r2
    519e:	4a6c      	ldr	r2, [pc, #432]	; (5350 <vendor_request_handler+0xad4>)
    51a0:	6811      	ldr	r1, [r2, #0]
    51a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    51a4:	00d2      	lsls	r2, r2, #3
    51a6:	fa21 f202 	lsr.w	r2, r1, r2
    51aa:	b2d2      	uxtb	r2, r2
    51ac:	701a      	strb	r2, [r3, #0]
		queue_init();
		cs_threshold_calc_and_set();
		break;

	case UBERTOOTH_GET_ACCESS_ADDRESS:
		for(i=0; i < 4; i++) {
    51ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    51b0:	3301      	adds	r3, #1
    51b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    51b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    51b6:	2b03      	cmp	r3, #3
    51b8:	ddee      	ble.n	5198 <vendor_request_handler+0x91c>
			data[i] = (le.access_address >> (8*i)) & 0xff;
		}
		*data_len = 4;
    51ba:	683b      	ldr	r3, [r7, #0]
    51bc:	2204      	movs	r2, #4
    51be:	601a      	str	r2, [r3, #0]
		break;
    51c0:	e0bf      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_ACCESS_ADDRESS:
		le_set_access_address(data[0] | data[1] << 8 | data[2] << 16 | data[3] << 24);
    51c2:	687b      	ldr	r3, [r7, #4]
    51c4:	781b      	ldrb	r3, [r3, #0]
    51c6:	461a      	mov	r2, r3
    51c8:	687b      	ldr	r3, [r7, #4]
    51ca:	3301      	adds	r3, #1
    51cc:	781b      	ldrb	r3, [r3, #0]
    51ce:	021b      	lsls	r3, r3, #8
    51d0:	431a      	orrs	r2, r3
    51d2:	687b      	ldr	r3, [r7, #4]
    51d4:	3302      	adds	r3, #2
    51d6:	781b      	ldrb	r3, [r3, #0]
    51d8:	041b      	lsls	r3, r3, #16
    51da:	431a      	orrs	r2, r3
    51dc:	687b      	ldr	r3, [r7, #4]
    51de:	3303      	adds	r3, #3
    51e0:	781b      	ldrb	r3, [r3, #0]
    51e2:	061b      	lsls	r3, r3, #24
    51e4:	4313      	orrs	r3, r2
    51e6:	4618      	mov	r0, r3
    51e8:	f001 f912 	bl	6410 <le_set_access_address>
		le.target_set = 1;
    51ec:	4b58      	ldr	r3, [pc, #352]	; (5350 <vendor_request_handler+0xad4>)
    51ee:	2201      	movs	r2, #1
    51f0:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    51f2:	e0a6      	b.n	5342 <vendor_request_handler+0xac6>
		break;

	case UBERTOOTH_DO_SOMETHING_REPLY:
		// after you do something, tell me what you did!
		// don't commit here please
		data[0] = 0x13;
    51f4:	687b      	ldr	r3, [r7, #4]
    51f6:	2213      	movs	r2, #19
    51f8:	701a      	strb	r2, [r3, #0]
		data[1] = 0x37;
    51fa:	687b      	ldr	r3, [r7, #4]
    51fc:	3301      	adds	r3, #1
    51fe:	2237      	movs	r2, #55	; 0x37
    5200:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    5202:	683b      	ldr	r3, [r7, #0]
    5204:	2202      	movs	r2, #2
    5206:	601a      	str	r2, [r3, #0]
		break;
    5208:	e09b      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_GET_CRC_VERIFY:
		data[0] = le.crc_verify ? 1 : 0;
    520a:	4b51      	ldr	r3, [pc, #324]	; (5350 <vendor_request_handler+0xad4>)
    520c:	691b      	ldr	r3, [r3, #16]
    520e:	2b00      	cmp	r3, #0
    5210:	bf14      	ite	ne
    5212:	2301      	movne	r3, #1
    5214:	2300      	moveq	r3, #0
    5216:	b2db      	uxtb	r3, r3
    5218:	461a      	mov	r2, r3
    521a:	687b      	ldr	r3, [r7, #4]
    521c:	701a      	strb	r2, [r3, #0]
		*data_len = 1;
    521e:	683b      	ldr	r3, [r7, #0]
    5220:	2201      	movs	r2, #1
    5222:	601a      	str	r2, [r3, #0]
		break;
    5224:	e08d      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_SET_CRC_VERIFY:
		le.crc_verify = request_params[0] ? 1 : 0;
    5226:	68bb      	ldr	r3, [r7, #8]
    5228:	881b      	ldrh	r3, [r3, #0]
    522a:	2b00      	cmp	r3, #0
    522c:	bf14      	ite	ne
    522e:	2301      	movne	r3, #1
    5230:	2300      	moveq	r3, #0
    5232:	b2db      	uxtb	r3, r3
    5234:	461a      	mov	r2, r3
    5236:	4b46      	ldr	r3, [pc, #280]	; (5350 <vendor_request_handler+0xad4>)
    5238:	611a      	str	r2, [r3, #16]
		break;
    523a:	e082      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_POLL:
		p = dequeue();
    523c:	f003 fa10 	bl	8660 <dequeue>
    5240:	6478      	str	r0, [r7, #68]	; 0x44
		if (p != NULL) {
    5242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    5244:	2b00      	cmp	r3, #0
    5246:	d008      	beq.n	525a <vendor_request_handler+0x9de>
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
    5248:	6878      	ldr	r0, [r7, #4]
    524a:	6c79      	ldr	r1, [r7, #68]	; 0x44
    524c:	2240      	movs	r2, #64	; 0x40
    524e:	f006 fa13 	bl	b678 <memcpy>
			*data_len = sizeof(usb_pkt_rx);
    5252:	683b      	ldr	r3, [r7, #0]
    5254:	2240      	movs	r2, #64	; 0x40
    5256:	601a      	str	r2, [r3, #0]
		} else {
			data[0] = 0;
			*data_len = 1;
		}
		break;
    5258:	e073      	b.n	5342 <vendor_request_handler+0xac6>
		p = dequeue();
		if (p != NULL) {
			memcpy(data, (void *)p, sizeof(usb_pkt_rx));
			*data_len = sizeof(usb_pkt_rx);
		} else {
			data[0] = 0;
    525a:	687b      	ldr	r3, [r7, #4]
    525c:	2200      	movs	r2, #0
    525e:	701a      	strb	r2, [r3, #0]
			*data_len = 1;
    5260:	683b      	ldr	r3, [r7, #0]
    5262:	2201      	movs	r2, #1
    5264:	601a      	str	r2, [r3, #0]
		}
		break;
    5266:	e06c      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_PROMISC:
		*data_len = 0;
    5268:	683b      	ldr	r3, [r7, #0]
    526a:	2200      	movs	r2, #0
    526c:	601a      	str	r2, [r3, #0]

		hop_mode = HOP_NONE;
    526e:	4b39      	ldr	r3, [pc, #228]	; (5354 <vendor_request_handler+0xad8>)
    5270:	2200      	movs	r2, #0
    5272:	701a      	strb	r2, [r3, #0]
		requested_mode = MODE_BT_PROMISC_LE;
    5274:	4b38      	ldr	r3, [pc, #224]	; (5358 <vendor_request_handler+0xadc>)
    5276:	220a      	movs	r2, #10
    5278:	701a      	strb	r2, [r3, #0]

		queue_init();
    527a:	f003 f9b1 	bl	85e0 <queue_init>
		cs_threshold_calc_and_set();
    527e:	f7ff fa87 	bl	4790 <cs_threshold_calc_and_set>
		break;
    5282:	e05e      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_READ_REGISTER:
		reg_val = cc2400_get(request_params[0]);
    5284:	68bb      	ldr	r3, [r7, #8]
    5286:	881b      	ldrh	r3, [r3, #0]
    5288:	b2db      	uxtb	r3, r3
    528a:	4618      	mov	r0, r3
    528c:	f004 fc0a 	bl	9aa4 <cc2400_get>
    5290:	4603      	mov	r3, r0
    5292:	877b      	strh	r3, [r7, #58]	; 0x3a
		data[0] = (reg_val >> 8) & 0xff;
    5294:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
    5296:	0a1b      	lsrs	r3, r3, #8
    5298:	b29b      	uxth	r3, r3
    529a:	b2da      	uxtb	r2, r3
    529c:	687b      	ldr	r3, [r7, #4]
    529e:	701a      	strb	r2, [r3, #0]
		data[1] = reg_val & 0xff;
    52a0:	687b      	ldr	r3, [r7, #4]
    52a2:	3301      	adds	r3, #1
    52a4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
    52a6:	b2d2      	uxtb	r2, r2
    52a8:	701a      	strb	r2, [r3, #0]
		*data_len = 2;
    52aa:	683b      	ldr	r3, [r7, #0]
    52ac:	2202      	movs	r2, #2
    52ae:	601a      	str	r2, [r3, #0]
		break;
    52b0:	e047      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_WRITE_REGISTER:
		cc2400_set(request_params[0] & 0xff, request_params[1]);
    52b2:	68bb      	ldr	r3, [r7, #8]
    52b4:	881b      	ldrh	r3, [r3, #0]
    52b6:	b2da      	uxtb	r2, r3
    52b8:	68bb      	ldr	r3, [r7, #8]
    52ba:	3302      	adds	r3, #2
    52bc:	881b      	ldrh	r3, [r3, #0]
    52be:	4610      	mov	r0, r2
    52c0:	4619      	mov	r1, r3
    52c2:	f004 fc05 	bl	9ad0 <cc2400_set>
		break;
    52c6:	e03c      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SLAVE:
		memcpy(slave_mac_address, data, 6);
    52c8:	4824      	ldr	r0, [pc, #144]	; (535c <vendor_request_handler+0xae0>)
    52ca:	6879      	ldr	r1, [r7, #4]
    52cc:	2206      	movs	r2, #6
    52ce:	f006 f9d3 	bl	b678 <memcpy>
		requested_mode = MODE_BT_SLAVE_LE;
    52d2:	4b21      	ldr	r3, [pc, #132]	; (5358 <vendor_request_handler+0xadc>)
    52d4:	220c      	movs	r2, #12
    52d6:	701a      	strb	r2, [r3, #0]
		break;
    52d8:	e033      	b.n	5342 <vendor_request_handler+0xac6>

	case UBERTOOTH_BTLE_SET_TARGET:
		// Addresses appear in packets in reverse-octet order.
		// Store the target address in reverse order so that we can do a simple memcmp later
		le.target[0] = data[5];
    52da:	687b      	ldr	r3, [r7, #4]
    52dc:	795a      	ldrb	r2, [r3, #5]
    52de:	4b1c      	ldr	r3, [pc, #112]	; (5350 <vendor_request_handler+0xad4>)
    52e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		le.target[1] = data[4];
    52e4:	687b      	ldr	r3, [r7, #4]
    52e6:	791a      	ldrb	r2, [r3, #4]
    52e8:	4b19      	ldr	r3, [pc, #100]	; (5350 <vendor_request_handler+0xad4>)
    52ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
		le.target[2] = data[3];
    52ee:	687b      	ldr	r3, [r7, #4]
    52f0:	78da      	ldrb	r2, [r3, #3]
    52f2:	4b17      	ldr	r3, [pc, #92]	; (5350 <vendor_request_handler+0xad4>)
    52f4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
		le.target[3] = data[2];
    52f8:	687b      	ldr	r3, [r7, #4]
    52fa:	789a      	ldrb	r2, [r3, #2]
    52fc:	4b14      	ldr	r3, [pc, #80]	; (5350 <vendor_request_handler+0xad4>)
    52fe:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
		le.target[4] = data[1];
    5302:	687b      	ldr	r3, [r7, #4]
    5304:	785a      	ldrb	r2, [r3, #1]
    5306:	4b12      	ldr	r3, [pc, #72]	; (5350 <vendor_request_handler+0xad4>)
    5308:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
		le.target[5] = data[0];
    530c:	687b      	ldr	r3, [r7, #4]
    530e:	781a      	ldrb	r2, [r3, #0]
    5310:	4b0f      	ldr	r3, [pc, #60]	; (5350 <vendor_request_handler+0xad4>)
    5312:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		le.target_set = 1;
    5316:	4b0e      	ldr	r3, [pc, #56]	; (5350 <vendor_request_handler+0xad4>)
    5318:	2201      	movs	r2, #1
    531a:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
    531c:	e011      	b.n	5342 <vendor_request_handler+0xac6>

#ifdef TX_ENABLE
	case UBERTOOTH_JAM_MODE:
		jam_mode = request_params[0];
    531e:	68bb      	ldr	r3, [r7, #8]
    5320:	881b      	ldrh	r3, [r3, #0]
    5322:	b2da      	uxtb	r2, r3
    5324:	4b0e      	ldr	r3, [pc, #56]	; (5360 <vendor_request_handler+0xae4>)
    5326:	701a      	strb	r2, [r3, #0]
		break;
    5328:	e00b      	b.n	5342 <vendor_request_handler+0xac6>
	case UBERTOOTH_EGO:
#ifndef TX_ENABLE
		if (ego_mode == EGO_JAM)
			return 0;
#endif
		requested_mode = MODE_EGO;
    532a:	4b0b      	ldr	r3, [pc, #44]	; (5358 <vendor_request_handler+0xadc>)
    532c:	220d      	movs	r2, #13
    532e:	701a      	strb	r2, [r3, #0]
		ego_mode = request_params[0];
    5330:	68bb      	ldr	r3, [r7, #8]
    5332:	881b      	ldrh	r3, [r3, #0]
    5334:	b2da      	uxtb	r2, r3
    5336:	4b0b      	ldr	r3, [pc, #44]	; (5364 <vendor_request_handler+0xae8>)
    5338:	701a      	strb	r2, [r3, #0]
		break;
    533a:	e002      	b.n	5342 <vendor_request_handler+0xac6>

	default:
		return 0;
    533c:	2300      	movs	r3, #0
    533e:	e001      	b.n	5344 <vendor_request_handler+0xac8>
		le.target_set = 1;
		break;

	case UBERTOOTH_DO_SOMETHING:
		// do something! just don't commit anything here
		break;
    5340:	bf00      	nop
		break;

	default:
		return 0;
	}
	return 1;
    5342:	2301      	movs	r3, #1
}
    5344:	4618      	mov	r0, r3
    5346:	3754      	adds	r7, #84	; 0x54
    5348:	46bd      	mov	sp, r7
    534a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    534e:	bf00      	nop
    5350:	10000458 	.word	0x10000458
    5354:	1000097c 	.word	0x1000097c
    5358:	10000a3f 	.word	0x10000a3f
    535c:	1000098c 	.word	0x1000098c
    5360:	10000a40 	.word	0x10000a40
    5364:	10000a41 	.word	0x10000a41

00005368 <clkn_init>:

static void clkn_init()
{
    5368:	b480      	push	{r7}
    536a:	af00      	add	r7, sp, #0
	 * and in timer mode.  The TIMER0 peripheral clock should have been set by
	 * clock_start().
	 */

	/* stop and reset the timer to zero */
	T0TCR = TCR_Counter_Reset;
    536c:	4b0c      	ldr	r3, [pc, #48]	; (53a0 <clkn_init+0x38>)
    536e:	2202      	movs	r2, #2
    5370:	601a      	str	r2, [r3, #0]
	clkn = 0;
    5372:	4b0c      	ldr	r3, [pc, #48]	; (53a4 <clkn_init+0x3c>)
    5374:	2200      	movs	r2, #0
    5376:	601a      	str	r2, [r3, #0]
#else
	/*
	 * The peripheral clock has a period of 20ns.  5 pclk periods
	 * makes one CLK100NS period (100 ns).
	 */
	T0PR = 4;
    5378:	4b0b      	ldr	r3, [pc, #44]	; (53a8 <clkn_init+0x40>)
    537a:	2204      	movs	r2, #4
    537c:	601a      	str	r2, [r3, #0]
#endif
	/* 3125 * 100 ns = 312.5 us, the Bluetooth clock (CLKN). */
	T0MR0 = 3124;
    537e:	4b0b      	ldr	r3, [pc, #44]	; (53ac <clkn_init+0x44>)
    5380:	f640 4234 	movw	r2, #3124	; 0xc34
    5384:	601a      	str	r2, [r3, #0]
	T0MCR = TMCR_MR0R | TMCR_MR0I;
    5386:	4b0a      	ldr	r3, [pc, #40]	; (53b0 <clkn_init+0x48>)
    5388:	2203      	movs	r2, #3
    538a:	601a      	str	r2, [r3, #0]
	ISER0 = ISER0_ISE_TIMER0;
    538c:	4b09      	ldr	r3, [pc, #36]	; (53b4 <clkn_init+0x4c>)
    538e:	2202      	movs	r2, #2
    5390:	601a      	str	r2, [r3, #0]

	/* start timer */
	T0TCR = TCR_Counter_Enable;
    5392:	4b03      	ldr	r3, [pc, #12]	; (53a0 <clkn_init+0x38>)
    5394:	2201      	movs	r2, #1
    5396:	601a      	str	r2, [r3, #0]
}
    5398:	46bd      	mov	sp, r7
    539a:	f85d 7b04 	ldr.w	r7, [sp], #4
    539e:	4770      	bx	lr
    53a0:	40004004 	.word	0x40004004
    53a4:	10000be4 	.word	0x10000be4
    53a8:	4000400c 	.word	0x4000400c
    53ac:	40004018 	.word	0x40004018
    53b0:	40004014 	.word	0x40004014
    53b4:	e000e100 	.word	0xe000e100

000053b8 <TIMER0_IRQHandler>:

/* Update CLKN. */
void TIMER0_IRQHandler()
{
    53b8:	b480      	push	{r7}
    53ba:	b083      	sub	sp, #12
    53bc:	af00      	add	r7, sp, #0
	// Use non-volatile working register to shave off a couple instructions
	u32 next;
	u32 le_clk;

	if (T0IR & TIR_MR0_Interrupt) {
    53be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    53c2:	681b      	ldr	r3, [r3, #0]
    53c4:	f003 0301 	and.w	r3, r3, #1
    53c8:	2b00      	cmp	r3, #0
    53ca:	d06d      	beq.n	54a8 <TIMER0_IRQHandler+0xf0>

		clkn++;
    53cc:	4b39      	ldr	r3, [pc, #228]	; (54b4 <TIMER0_IRQHandler+0xfc>)
    53ce:	681b      	ldr	r3, [r3, #0]
    53d0:	3301      	adds	r3, #1
    53d2:	4a38      	ldr	r2, [pc, #224]	; (54b4 <TIMER0_IRQHandler+0xfc>)
    53d4:	6013      	str	r3, [r2, #0]
		next = clkn;
    53d6:	4b37      	ldr	r3, [pc, #220]	; (54b4 <TIMER0_IRQHandler+0xfc>)
    53d8:	681b      	ldr	r3, [r3, #0]
    53da:	607b      	str	r3, [r7, #4]
		le_clk = (next - le.conn_epoch) & 0x03;
    53dc:	4b36      	ldr	r3, [pc, #216]	; (54b8 <TIMER0_IRQHandler+0x100>)
    53de:	699b      	ldr	r3, [r3, #24]
    53e0:	687a      	ldr	r2, [r7, #4]
    53e2:	1ad3      	subs	r3, r2, r3
    53e4:	f003 0303 	and.w	r3, r3, #3
    53e8:	603b      	str	r3, [r7, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
    53ea:	4b34      	ldr	r3, [pc, #208]	; (54bc <TIMER0_IRQHandler+0x104>)
    53ec:	781b      	ldrb	r3, [r3, #0]
    53ee:	2b00      	cmp	r3, #0
    53f0:	d003      	beq.n	53fa <TIMER0_IRQHandler+0x42>
    53f2:	4b32      	ldr	r3, [pc, #200]	; (54bc <TIMER0_IRQHandler+0x104>)
    53f4:	781b      	ldrb	r3, [r3, #0]
    53f6:	2b01      	cmp	r3, #1
    53f8:	d109      	bne.n	540e <TIMER0_IRQHandler+0x56>
			if ((next & 0x7f) == 0)
    53fa:	687b      	ldr	r3, [r7, #4]
    53fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5400:	2b00      	cmp	r3, #0
    5402:	d103      	bne.n	540c <TIMER0_IRQHandler+0x54>
				do_hop = 1;
    5404:	4b2e      	ldr	r3, [pc, #184]	; (54c0 <TIMER0_IRQHandler+0x108>)
    5406:	2201      	movs	r2, #1
    5408:	701a      	strb	r2, [r3, #0]

		/* Trigger hop based on mode */

		/* NONE or SWEEP -> 25 Hz */
		if (hop_mode == HOP_NONE || hop_mode == HOP_SWEEP) {
			if ((next & 0x7f) == 0)
    540a:	e037      	b.n	547c <TIMER0_IRQHandler+0xc4>
    540c:	e036      	b.n	547c <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
		}
		/* BLUETOOTH -> 1600 Hz */
		else if (hop_mode == HOP_BLUETOOTH) {
    540e:	4b2b      	ldr	r3, [pc, #172]	; (54bc <TIMER0_IRQHandler+0x104>)
    5410:	781b      	ldrb	r3, [r3, #0]
    5412:	2b02      	cmp	r3, #2
    5414:	d108      	bne.n	5428 <TIMER0_IRQHandler+0x70>
			if ((next & 0x1) == 0)
    5416:	687b      	ldr	r3, [r7, #4]
    5418:	f003 0301 	and.w	r3, r3, #1
    541c:	2b00      	cmp	r3, #0
    541e:	d12d      	bne.n	547c <TIMER0_IRQHandler+0xc4>
				do_hop = 1;
    5420:	4b27      	ldr	r3, [pc, #156]	; (54c0 <TIMER0_IRQHandler+0x108>)
    5422:	2201      	movs	r2, #1
    5424:	701a      	strb	r2, [r3, #0]
    5426:	e029      	b.n	547c <TIMER0_IRQHandler+0xc4>
		}
		/* BLUETOOTH Low Energy -> 7.5ms - 4.0s in multiples of 1.25 ms */
		else if (hop_mode == HOP_BTLE) {
    5428:	4b24      	ldr	r3, [pc, #144]	; (54bc <TIMER0_IRQHandler+0x104>)
    542a:	781b      	ldrb	r3, [r3, #0]
    542c:	2b03      	cmp	r3, #3
    542e:	d125      	bne.n	547c <TIMER0_IRQHandler+0xc4>
			// Only hop if connected
			if (le.link_state == LINK_CONNECTED && le_clk == 0) {
    5430:	4b21      	ldr	r3, [pc, #132]	; (54b8 <TIMER0_IRQHandler+0x100>)
    5432:	7d1b      	ldrb	r3, [r3, #20]
    5434:	2b03      	cmp	r3, #3
    5436:	d121      	bne.n	547c <TIMER0_IRQHandler+0xc4>
    5438:	683b      	ldr	r3, [r7, #0]
    543a:	2b00      	cmp	r3, #0
    543c:	d11e      	bne.n	547c <TIMER0_IRQHandler+0xc4>
				--le.interval_timer;
    543e:	4b1e      	ldr	r3, [pc, #120]	; (54b8 <TIMER0_IRQHandler+0x100>)
    5440:	8b9b      	ldrh	r3, [r3, #28]
    5442:	b29b      	uxth	r3, r3
    5444:	3b01      	subs	r3, #1
    5446:	b29a      	uxth	r2, r3
    5448:	4b1b      	ldr	r3, [pc, #108]	; (54b8 <TIMER0_IRQHandler+0x100>)
    544a:	839a      	strh	r2, [r3, #28]
				if (le.interval_timer == 0) {
    544c:	4b1a      	ldr	r3, [pc, #104]	; (54b8 <TIMER0_IRQHandler+0x100>)
    544e:	8b9b      	ldrh	r3, [r3, #28]
    5450:	b29b      	uxth	r3, r3
    5452:	2b00      	cmp	r3, #0
    5454:	d10e      	bne.n	5474 <TIMER0_IRQHandler+0xbc>
					do_hop = 1;
    5456:	4b1a      	ldr	r3, [pc, #104]	; (54c0 <TIMER0_IRQHandler+0x108>)
    5458:	2201      	movs	r2, #1
    545a:	701a      	strb	r2, [r3, #0]
					++le.conn_count;
    545c:	4b16      	ldr	r3, [pc, #88]	; (54b8 <TIMER0_IRQHandler+0x100>)
    545e:	8c1b      	ldrh	r3, [r3, #32]
    5460:	b29b      	uxth	r3, r3
    5462:	3301      	adds	r3, #1
    5464:	b29a      	uxth	r2, r3
    5466:	4b14      	ldr	r3, [pc, #80]	; (54b8 <TIMER0_IRQHandler+0x100>)
    5468:	841a      	strh	r2, [r3, #32]
					le.interval_timer = le.conn_interval;
    546a:	4b13      	ldr	r3, [pc, #76]	; (54b8 <TIMER0_IRQHandler+0x100>)
    546c:	8bda      	ldrh	r2, [r3, #30]
    546e:	4b12      	ldr	r3, [pc, #72]	; (54b8 <TIMER0_IRQHandler+0x100>)
    5470:	839a      	strh	r2, [r3, #28]
    5472:	e003      	b.n	547c <TIMER0_IRQHandler+0xc4>
				} else {
					TXLED_CLR; // hack!
    5474:	4b13      	ldr	r3, [pc, #76]	; (54c4 <TIMER0_IRQHandler+0x10c>)
    5476:	f44f 7280 	mov.w	r2, #256	; 0x100
    547a:	601a      	str	r2, [r3, #0]
				}
			}
		}

		/* Keepalive trigger fires at 3200/2^9 = 6.25 Hz */
		if ((next & 0x1ff) == 0)
    547c:	687b      	ldr	r3, [r7, #4]
    547e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5482:	2b00      	cmp	r3, #0
    5484:	d102      	bne.n	548c <TIMER0_IRQHandler+0xd4>
			keepalive_trigger = 1;
    5486:	4b10      	ldr	r3, [pc, #64]	; (54c8 <TIMER0_IRQHandler+0x110>)
    5488:	2201      	movs	r2, #1
    548a:	701a      	strb	r2, [r3, #0]

		/* Ack interrupt */
		T0MR0 = 3124 - clock_trim;
    548c:	4a0f      	ldr	r2, [pc, #60]	; (54cc <TIMER0_IRQHandler+0x114>)
    548e:	4b10      	ldr	r3, [pc, #64]	; (54d0 <TIMER0_IRQHandler+0x118>)
    5490:	681b      	ldr	r3, [r3, #0]
    5492:	f5c3 6343 	rsb	r3, r3, #3120	; 0xc30
    5496:	3304      	adds	r3, #4
    5498:	6013      	str	r3, [r2, #0]
		clock_trim = 0;
    549a:	4b0d      	ldr	r3, [pc, #52]	; (54d0 <TIMER0_IRQHandler+0x118>)
    549c:	2200      	movs	r2, #0
    549e:	601a      	str	r2, [r3, #0]
		T0IR = TIR_MR0_Interrupt;
    54a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
    54a4:	2201      	movs	r2, #1
    54a6:	601a      	str	r2, [r3, #0]
	}
}
    54a8:	370c      	adds	r7, #12
    54aa:	46bd      	mov	sp, r7
    54ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    54b0:	4770      	bx	lr
    54b2:	bf00      	nop
    54b4:	10000be4 	.word	0x10000be4
    54b8:	10000458 	.word	0x10000458
    54bc:	1000097c 	.word	0x1000097c
    54c0:	1000097d 	.word	0x1000097d
    54c4:	2009c03c 	.word	0x2009c03c
    54c8:	10000be0 	.word	0x10000be0
    54cc:	40004018 	.word	0x40004018
    54d0:	10000984 	.word	0x10000984

000054d4 <EINT3_IRQHandler>:

/* EINT3 handler is also defined in ubertooth.c for TC13BADGE. */
#ifndef TC13BADGE
//static volatile u8 txledstate = 1;
void EINT3_IRQHandler()
{
    54d4:	b480      	push	{r7}
    54d6:	af00      	add	r7, sp, #0
	/* TODO - check specific source of shared interrupt */
	IO2IntClr = PIN_GIO6;            // clear interrupt
    54d8:	4b0b      	ldr	r3, [pc, #44]	; (5508 <EINT3_IRQHandler+0x34>)
    54da:	2204      	movs	r2, #4
    54dc:	601a      	str	r2, [r3, #0]
	cs_trigger = 1;                  // signal trigger
    54de:	4b0b      	ldr	r3, [pc, #44]	; (550c <EINT3_IRQHandler+0x38>)
    54e0:	2201      	movs	r2, #1
    54e2:	701a      	strb	r2, [r3, #0]
	cs_timestamp = CLK100NS;         // time at trigger
    54e4:	4b0a      	ldr	r3, [pc, #40]	; (5510 <EINT3_IRQHandler+0x3c>)
    54e6:	681b      	ldr	r3, [r3, #0]
    54e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    54ec:	f640 4235 	movw	r2, #3125	; 0xc35
    54f0:	fb02 f203 	mul.w	r2, r2, r3
    54f4:	4b07      	ldr	r3, [pc, #28]	; (5514 <EINT3_IRQHandler+0x40>)
    54f6:	681b      	ldr	r3, [r3, #0]
    54f8:	4413      	add	r3, r2
    54fa:	4a07      	ldr	r2, [pc, #28]	; (5518 <EINT3_IRQHandler+0x44>)
    54fc:	6013      	str	r3, [r2, #0]
}
    54fe:	46bd      	mov	sp, r7
    5500:	f85d 7b04 	ldr.w	r7, [sp], #4
    5504:	4770      	bx	lr
    5506:	bf00      	nop
    5508:	400280ac 	.word	0x400280ac
    550c:	100010b8 	.word	0x100010b8
    5510:	10000be4 	.word	0x10000be4
    5514:	40004008 	.word	0x40004008
    5518:	10000bdc 	.word	0x10000bdc
    551c:	00000000 	.word	0x00000000

00005520 <msleep>:

/* Sleep (busy wait) for 'millis' milliseconds. The 'wait' routines in
 * ubertooth.c are matched to the clock setup at boot time and can not
 * be used while the board is running at 100MHz. */
static void msleep(uint32_t millis)
{
    5520:	b5b0      	push	{r4, r5, r7, lr}
    5522:	b084      	sub	sp, #16
    5524:	af00      	add	r7, sp, #0
    5526:	6078      	str	r0, [r7, #4]
	uint32_t stop_at = clkn + millis * 312.5 / 1000;  // millis -> clkn ticks
    5528:	4b1b      	ldr	r3, [pc, #108]	; (5598 <msleep+0x78>)
    552a:	681b      	ldr	r3, [r3, #0]
    552c:	4618      	mov	r0, r3
    552e:	f005 fdc9 	bl	b0c4 <__aeabi_ui2d>
    5532:	4604      	mov	r4, r0
    5534:	460d      	mov	r5, r1
    5536:	6878      	ldr	r0, [r7, #4]
    5538:	f005 fdc4 	bl	b0c4 <__aeabi_ui2d>
    553c:	4602      	mov	r2, r0
    553e:	460b      	mov	r3, r1
    5540:	4610      	mov	r0, r2
    5542:	4619      	mov	r1, r3
    5544:	a312      	add	r3, pc, #72	; (adr r3, 5590 <msleep+0x70>)
    5546:	e9d3 2300 	ldrd	r2, r3, [r3]
    554a:	f005 fe31 	bl	b1b0 <__aeabi_dmul>
    554e:	4602      	mov	r2, r0
    5550:	460b      	mov	r3, r1
    5552:	4610      	mov	r0, r2
    5554:	4619      	mov	r1, r3
    5556:	f04f 0200 	mov.w	r2, #0
    555a:	4b10      	ldr	r3, [pc, #64]	; (559c <msleep+0x7c>)
    555c:	f005 ff52 	bl	b404 <__aeabi_ddiv>
    5560:	4602      	mov	r2, r0
    5562:	460b      	mov	r3, r1
    5564:	4620      	mov	r0, r4
    5566:	4629      	mov	r1, r5
    5568:	f005 fc70 	bl	ae4c <__adddf3>
    556c:	4602      	mov	r2, r0
    556e:	460b      	mov	r3, r1
    5570:	4610      	mov	r0, r2
    5572:	4619      	mov	r1, r3
    5574:	f006 f82e 	bl	b5d4 <__aeabi_d2uiz>
    5578:	4603      	mov	r3, r0
    557a:	60fb      	str	r3, [r7, #12]
	do { } while (clkn < stop_at);                   // TODO: handle wrapping
    557c:	4b06      	ldr	r3, [pc, #24]	; (5598 <msleep+0x78>)
    557e:	681a      	ldr	r2, [r3, #0]
    5580:	68fb      	ldr	r3, [r7, #12]
    5582:	429a      	cmp	r2, r3
    5584:	d3fa      	bcc.n	557c <msleep+0x5c>
}
    5586:	3710      	adds	r7, #16
    5588:	46bd      	mov	sp, r7
    558a:	bdb0      	pop	{r4, r5, r7, pc}
    558c:	f3af 8000 	nop.w
    5590:	00000000 	.word	0x00000000
    5594:	40738800 	.word	0x40738800
    5598:	10000be4 	.word	0x10000be4
    559c:	408f4000 	.word	0x408f4000

000055a0 <dma_init>:

static void dma_init()
{
    55a0:	b480      	push	{r7}
    55a2:	af00      	add	r7, sp, #0
	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    55a4:	4a3f      	ldr	r2, [pc, #252]	; (56a4 <dma_init+0x104>)
    55a6:	4b3f      	ldr	r3, [pc, #252]	; (56a4 <dma_init+0x104>)
    55a8:	681b      	ldr	r3, [r3, #0]
    55aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    55ae:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    55b0:	4b3d      	ldr	r3, [pc, #244]	; (56a8 <dma_init+0x108>)
    55b2:	2200      	movs	r2, #0
    55b4:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    55b6:	4b3d      	ldr	r3, [pc, #244]	; (56ac <dma_init+0x10c>)
    55b8:	2200      	movs	r2, #0
    55ba:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    55bc:	4b3c      	ldr	r3, [pc, #240]	; (56b0 <dma_init+0x110>)
    55be:	2200      	movs	r2, #0
    55c0:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    55c2:	4b3c      	ldr	r3, [pc, #240]	; (56b4 <dma_init+0x114>)
    55c4:	2200      	movs	r2, #0
    55c6:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    55c8:	4b3b      	ldr	r3, [pc, #236]	; (56b8 <dma_init+0x118>)
    55ca:	2200      	movs	r2, #0
    55cc:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    55ce:	4b3b      	ldr	r3, [pc, #236]	; (56bc <dma_init+0x11c>)
    55d0:	2200      	movs	r2, #0
    55d2:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    55d4:	4b3a      	ldr	r3, [pc, #232]	; (56c0 <dma_init+0x120>)
    55d6:	2200      	movs	r2, #0
    55d8:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    55da:	4b3a      	ldr	r3, [pc, #232]	; (56c4 <dma_init+0x124>)
    55dc:	2200      	movs	r2, #0
    55de:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    55e0:	4b39      	ldr	r3, [pc, #228]	; (56c8 <dma_init+0x128>)
    55e2:	22ff      	movs	r2, #255	; 0xff
    55e4:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    55e6:	4b39      	ldr	r3, [pc, #228]	; (56cc <dma_init+0x12c>)
    55e8:	22ff      	movs	r2, #255	; 0xff
    55ea:	601a      	str	r2, [r3, #0]

	/* DMA linked lists */
	rx_dma_lli1.src = (u32)&(DIO_SSP_DR);
    55ec:	4b38      	ldr	r3, [pc, #224]	; (56d0 <dma_init+0x130>)
    55ee:	4a39      	ldr	r2, [pc, #228]	; (56d4 <dma_init+0x134>)
    55f0:	601a      	str	r2, [r3, #0]
	rx_dma_lli1.dest = (u32)&rxbuf1[0];
    55f2:	4a39      	ldr	r2, [pc, #228]	; (56d8 <dma_init+0x138>)
    55f4:	4b36      	ldr	r3, [pc, #216]	; (56d0 <dma_init+0x130>)
    55f6:	605a      	str	r2, [r3, #4]
	rx_dma_lli1.next_lli = (u32)&rx_dma_lli2;
    55f8:	4a38      	ldr	r2, [pc, #224]	; (56dc <dma_init+0x13c>)
    55fa:	4b35      	ldr	r3, [pc, #212]	; (56d0 <dma_init+0x130>)
    55fc:	609a      	str	r2, [r3, #8]
	rx_dma_lli1.control = (DMA_SIZE) |
    55fe:	4b34      	ldr	r3, [pc, #208]	; (56d0 <dma_init+0x130>)
    5600:	4a37      	ldr	r2, [pc, #220]	; (56e0 <dma_init+0x140>)
    5602:	60da      	str	r2, [r3, #12]
			(0 << 18) |        /* source width 8 bits */
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	rx_dma_lli2.src = (u32)&(DIO_SSP_DR);
    5604:	4b35      	ldr	r3, [pc, #212]	; (56dc <dma_init+0x13c>)
    5606:	4a33      	ldr	r2, [pc, #204]	; (56d4 <dma_init+0x134>)
    5608:	601a      	str	r2, [r3, #0]
	rx_dma_lli2.dest = (u32)&rxbuf2[0];
    560a:	4a36      	ldr	r2, [pc, #216]	; (56e4 <dma_init+0x144>)
    560c:	4b33      	ldr	r3, [pc, #204]	; (56dc <dma_init+0x13c>)
    560e:	605a      	str	r2, [r3, #4]
	rx_dma_lli2.next_lli = (u32)&rx_dma_lli1;
    5610:	4a2f      	ldr	r2, [pc, #188]	; (56d0 <dma_init+0x130>)
    5612:	4b32      	ldr	r3, [pc, #200]	; (56dc <dma_init+0x13c>)
    5614:	609a      	str	r2, [r3, #8]
	rx_dma_lli2.control = (DMA_SIZE) |
    5616:	4b31      	ldr	r3, [pc, #196]	; (56dc <dma_init+0x13c>)
    5618:	4a31      	ldr	r2, [pc, #196]	; (56e0 <dma_init+0x140>)
    561a:	60da      	str	r2, [r3, #12]
			(0 << 21) |        /* destination width 8 bits */
			DMACCxControl_DI | /* destination increment */
			DMACCxControl_I;   /* terminal count interrupt enable */

	/* disable DMA interrupts */
	ICER0 = ICER0_ICE_DMA;
    561c:	4b32      	ldr	r3, [pc, #200]	; (56e8 <dma_init+0x148>)
    561e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5622:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    5624:	4b31      	ldr	r3, [pc, #196]	; (56ec <dma_init+0x14c>)
    5626:	2201      	movs	r2, #1
    5628:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    562a:	bf00      	nop
    562c:	4b2f      	ldr	r3, [pc, #188]	; (56ec <dma_init+0x14c>)
    562e:	681b      	ldr	r3, [r3, #0]
    5630:	f003 0301 	and.w	r3, r3, #1
    5634:	2b00      	cmp	r3, #0
    5636:	d0f9      	beq.n	562c <dma_init+0x8c>

	/* configure DMA channel 1 */
	DMACC0SrcAddr = rx_dma_lli1.src;
    5638:	4a2d      	ldr	r2, [pc, #180]	; (56f0 <dma_init+0x150>)
    563a:	4b25      	ldr	r3, [pc, #148]	; (56d0 <dma_init+0x130>)
    563c:	681b      	ldr	r3, [r3, #0]
    563e:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = rx_dma_lli1.dest;
    5640:	4a2c      	ldr	r2, [pc, #176]	; (56f4 <dma_init+0x154>)
    5642:	4b23      	ldr	r3, [pc, #140]	; (56d0 <dma_init+0x130>)
    5644:	685b      	ldr	r3, [r3, #4]
    5646:	6013      	str	r3, [r2, #0]
	DMACC0LLI = rx_dma_lli1.next_lli;
    5648:	4a2b      	ldr	r2, [pc, #172]	; (56f8 <dma_init+0x158>)
    564a:	4b21      	ldr	r3, [pc, #132]	; (56d0 <dma_init+0x130>)
    564c:	689b      	ldr	r3, [r3, #8]
    564e:	6013      	str	r3, [r2, #0]
	DMACC0Control = rx_dma_lli1.control;
    5650:	4a2a      	ldr	r2, [pc, #168]	; (56fc <dma_init+0x15c>)
    5652:	4b1f      	ldr	r3, [pc, #124]	; (56d0 <dma_init+0x130>)
    5654:	68db      	ldr	r3, [r3, #12]
    5656:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    5658:	4b13      	ldr	r3, [pc, #76]	; (56a8 <dma_init+0x108>)
    565a:	f24d 0206 	movw	r2, #53254	; 0xd006
    565e:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    5660:	4b27      	ldr	r3, [pc, #156]	; (5700 <dma_init+0x160>)
    5662:	681b      	ldr	r3, [r3, #0]
    5664:	0d1b      	lsrs	r3, r3, #20
    5666:	b2db      	uxtb	r3, r3
    5668:	4a26      	ldr	r2, [pc, #152]	; (5704 <dma_init+0x164>)
    566a:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    566c:	4b24      	ldr	r3, [pc, #144]	; (5700 <dma_init+0x160>)
    566e:	681b      	ldr	r3, [r3, #0]
    5670:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5674:	f640 4235 	movw	r2, #3125	; 0xc35
    5678:	fb02 f203 	mul.w	r2, r2, r3
    567c:	4b22      	ldr	r3, [pc, #136]	; (5708 <dma_init+0x168>)
    567e:	681b      	ldr	r3, [r3, #0]
    5680:	4413      	add	r3, r2
    5682:	4a22      	ldr	r2, [pc, #136]	; (570c <dma_init+0x16c>)
    5684:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    5686:	4b22      	ldr	r3, [pc, #136]	; (5710 <dma_init+0x170>)
    5688:	881b      	ldrh	r3, [r3, #0]
    568a:	b29a      	uxth	r2, r3
    568c:	4b21      	ldr	r3, [pc, #132]	; (5714 <dma_init+0x174>)
    568e:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    5690:	4b21      	ldr	r3, [pc, #132]	; (5718 <dma_init+0x178>)
    5692:	2200      	movs	r2, #0
    5694:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    5696:	4b21      	ldr	r3, [pc, #132]	; (571c <dma_init+0x17c>)
    5698:	2200      	movs	r2, #0
    569a:	601a      	str	r2, [r3, #0]
}
    569c:	46bd      	mov	sp, r7
    569e:	f85d 7b04 	ldr.w	r7, [sp], #4
    56a2:	4770      	bx	lr
    56a4:	400fc0c4 	.word	0x400fc0c4
    56a8:	50004110 	.word	0x50004110
    56ac:	50004130 	.word	0x50004130
    56b0:	50004150 	.word	0x50004150
    56b4:	50004170 	.word	0x50004170
    56b8:	50004190 	.word	0x50004190
    56bc:	500041b0 	.word	0x500041b0
    56c0:	500041d0 	.word	0x500041d0
    56c4:	500041f0 	.word	0x500041f0
    56c8:	50004008 	.word	0x50004008
    56cc:	50004010 	.word	0x50004010
    56d0:	10001064 	.word	0x10001064
    56d4:	40030008 	.word	0x40030008
    56d8:	10001080 	.word	0x10001080
    56dc:	10000bcc 	.word	0x10000bcc
    56e0:	88009032 	.word	0x88009032
    56e4:	1000102c 	.word	0x1000102c
    56e8:	e000e180 	.word	0xe000e180
    56ec:	50004030 	.word	0x50004030
    56f0:	50004100 	.word	0x50004100
    56f4:	50004104 	.word	0x50004104
    56f8:	50004108 	.word	0x50004108
    56fc:	5000410c 	.word	0x5000410c
    5700:	10000be4 	.word	0x10000be4
    5704:	10000be8 	.word	0x10000be8
    5708:	40004008 	.word	0x40004008
    570c:	10001020 	.word	0x10001020
    5710:	1000049c 	.word	0x1000049c
    5714:	1000098a 	.word	0x1000098a
    5718:	10000b00 	.word	0x10000b00
    571c:	100010b4 	.word	0x100010b4

00005720 <dma_init_le>:

static void dma_init_le()
{
    5720:	b480      	push	{r7}
    5722:	b083      	sub	sp, #12
    5724:	af00      	add	r7, sp, #0
	int i;

	/* power up GPDMA controller */
	PCONP |= PCONP_PCGPDMA;
    5726:	4a4b      	ldr	r2, [pc, #300]	; (5854 <dma_init_le+0x134>)
    5728:	4b4a      	ldr	r3, [pc, #296]	; (5854 <dma_init_le+0x134>)
    572a:	681b      	ldr	r3, [r3, #0]
    572c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    5730:	6013      	str	r3, [r2, #0]

	/* zero out channel configs and clear interrupts */
	DMACC0Config = 0;
    5732:	4b49      	ldr	r3, [pc, #292]	; (5858 <dma_init_le+0x138>)
    5734:	2200      	movs	r2, #0
    5736:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5738:	4b48      	ldr	r3, [pc, #288]	; (585c <dma_init_le+0x13c>)
    573a:	2200      	movs	r2, #0
    573c:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    573e:	4b48      	ldr	r3, [pc, #288]	; (5860 <dma_init_le+0x140>)
    5740:	2200      	movs	r2, #0
    5742:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5744:	4b47      	ldr	r3, [pc, #284]	; (5864 <dma_init_le+0x144>)
    5746:	2200      	movs	r2, #0
    5748:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    574a:	4b47      	ldr	r3, [pc, #284]	; (5868 <dma_init_le+0x148>)
    574c:	2200      	movs	r2, #0
    574e:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5750:	4b46      	ldr	r3, [pc, #280]	; (586c <dma_init_le+0x14c>)
    5752:	2200      	movs	r2, #0
    5754:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    5756:	4b46      	ldr	r3, [pc, #280]	; (5870 <dma_init_le+0x150>)
    5758:	2200      	movs	r2, #0
    575a:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    575c:	4b45      	ldr	r3, [pc, #276]	; (5874 <dma_init_le+0x154>)
    575e:	2200      	movs	r2, #0
    5760:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5762:	4b45      	ldr	r3, [pc, #276]	; (5878 <dma_init_le+0x158>)
    5764:	22ff      	movs	r2, #255	; 0xff
    5766:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5768:	4b44      	ldr	r3, [pc, #272]	; (587c <dma_init_le+0x15c>)
    576a:	22ff      	movs	r2, #255	; 0xff
    576c:	601a      	str	r2, [r3, #0]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
    576e:	4b44      	ldr	r3, [pc, #272]	; (5880 <dma_init_le+0x160>)
    5770:	2201      	movs	r2, #1
    5772:	601a      	str	r2, [r3, #0]
	while (!(DMACConfig & DMACConfig_E));
    5774:	bf00      	nop
    5776:	4b42      	ldr	r3, [pc, #264]	; (5880 <dma_init_le+0x160>)
    5778:	681b      	ldr	r3, [r3, #0]
    577a:	f003 0301 	and.w	r3, r3, #1
    577e:	2b00      	cmp	r3, #0
    5780:	d0f9      	beq.n	5776 <dma_init_le+0x56>

	for (i = 0; i < 11; ++i) {
    5782:	2300      	movs	r3, #0
    5784:	607b      	str	r3, [r7, #4]
    5786:	e02a      	b.n	57de <dma_init_le+0xbe>
		le_dma_lli[i].src = (u32)&(DIO_SSP_DR);
    5788:	4a3e      	ldr	r2, [pc, #248]	; (5884 <dma_init_le+0x164>)
    578a:	687b      	ldr	r3, [r7, #4]
    578c:	011b      	lsls	r3, r3, #4
    578e:	4413      	add	r3, r2
    5790:	4a3d      	ldr	r2, [pc, #244]	; (5888 <dma_init_le+0x168>)
    5792:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].dest = (u32)&rxbuf1[4 * i];
    5794:	687b      	ldr	r3, [r7, #4]
    5796:	009b      	lsls	r3, r3, #2
    5798:	4a3c      	ldr	r2, [pc, #240]	; (588c <dma_init_le+0x16c>)
    579a:	4413      	add	r3, r2
    579c:	4619      	mov	r1, r3
    579e:	4a39      	ldr	r2, [pc, #228]	; (5884 <dma_init_le+0x164>)
    57a0:	687b      	ldr	r3, [r7, #4]
    57a2:	011b      	lsls	r3, r3, #4
    57a4:	4413      	add	r3, r2
    57a6:	6059      	str	r1, [r3, #4]
		le_dma_lli[i].next_lli = i < 10 ? (u32)&le_dma_lli[i+1] : 0;
    57a8:	687b      	ldr	r3, [r7, #4]
    57aa:	2b09      	cmp	r3, #9
    57ac:	dc06      	bgt.n	57bc <dma_init_le+0x9c>
    57ae:	687b      	ldr	r3, [r7, #4]
    57b0:	3301      	adds	r3, #1
    57b2:	011b      	lsls	r3, r3, #4
    57b4:	4a33      	ldr	r2, [pc, #204]	; (5884 <dma_init_le+0x164>)
    57b6:	4413      	add	r3, r2
    57b8:	461a      	mov	r2, r3
    57ba:	e000      	b.n	57be <dma_init_le+0x9e>
    57bc:	2200      	movs	r2, #0
    57be:	4931      	ldr	r1, [pc, #196]	; (5884 <dma_init_le+0x164>)
    57c0:	687b      	ldr	r3, [r7, #4]
    57c2:	011b      	lsls	r3, r3, #4
    57c4:	440b      	add	r3, r1
    57c6:	3308      	adds	r3, #8
    57c8:	601a      	str	r2, [r3, #0]
		le_dma_lli[i].control = 4 |
    57ca:	4a2e      	ldr	r2, [pc, #184]	; (5884 <dma_init_le+0x164>)
    57cc:	687b      	ldr	r3, [r7, #4]
    57ce:	011b      	lsls	r3, r3, #4
    57d0:	4413      	add	r3, r2
    57d2:	3308      	adds	r3, #8
    57d4:	4a2e      	ldr	r2, [pc, #184]	; (5890 <dma_init_le+0x170>)
    57d6:	605a      	str	r2, [r3, #4]

	/* enable DMA globally */
	DMACConfig = DMACConfig_E;
	while (!(DMACConfig & DMACConfig_E));

	for (i = 0; i < 11; ++i) {
    57d8:	687b      	ldr	r3, [r7, #4]
    57da:	3301      	adds	r3, #1
    57dc:	607b      	str	r3, [r7, #4]
    57de:	687b      	ldr	r3, [r7, #4]
    57e0:	2b0a      	cmp	r3, #10
    57e2:	ddd1      	ble.n	5788 <dma_init_le+0x68>
				DMACCxControl_DI | /* destination increment */
				DMACCxControl_I;   /* terminal count interrupt enable */
	}

	/* configure DMA channel 0 */
	DMACC0SrcAddr = le_dma_lli[0].src;
    57e4:	4a2b      	ldr	r2, [pc, #172]	; (5894 <dma_init_le+0x174>)
    57e6:	4b27      	ldr	r3, [pc, #156]	; (5884 <dma_init_le+0x164>)
    57e8:	681b      	ldr	r3, [r3, #0]
    57ea:	6013      	str	r3, [r2, #0]
	DMACC0DestAddr = le_dma_lli[0].dest;
    57ec:	4a2a      	ldr	r2, [pc, #168]	; (5898 <dma_init_le+0x178>)
    57ee:	4b25      	ldr	r3, [pc, #148]	; (5884 <dma_init_le+0x164>)
    57f0:	685b      	ldr	r3, [r3, #4]
    57f2:	6013      	str	r3, [r2, #0]
	DMACC0LLI = le_dma_lli[0].next_lli;
    57f4:	4a29      	ldr	r2, [pc, #164]	; (589c <dma_init_le+0x17c>)
    57f6:	4b23      	ldr	r3, [pc, #140]	; (5884 <dma_init_le+0x164>)
    57f8:	689b      	ldr	r3, [r3, #8]
    57fa:	6013      	str	r3, [r2, #0]
	DMACC0Control = le_dma_lli[0].control;
    57fc:	4a28      	ldr	r2, [pc, #160]	; (58a0 <dma_init_le+0x180>)
    57fe:	4b21      	ldr	r3, [pc, #132]	; (5884 <dma_init_le+0x164>)
    5800:	68db      	ldr	r3, [r3, #12]
    5802:	6013      	str	r3, [r2, #0]
	DMACC0Config =
    5804:	4b14      	ldr	r3, [pc, #80]	; (5858 <dma_init_le+0x138>)
    5806:	f24d 0206 	movw	r2, #53254	; 0xd006
    580a:	601a      	str	r2, [r3, #0]
			DIO_SSP_SRC |
			(0x2 << 11) |           /* peripheral to memory */
			DMACCxConfig_IE |       /* allow error interrupts */
			DMACCxConfig_ITC;       /* allow terminal count interrupts */

	active_buf_clkn_high = (clkn >> 20) & 0xff;
    580c:	4b25      	ldr	r3, [pc, #148]	; (58a4 <dma_init_le+0x184>)
    580e:	681b      	ldr	r3, [r3, #0]
    5810:	0d1b      	lsrs	r3, r3, #20
    5812:	b2db      	uxtb	r3, r3
    5814:	4a24      	ldr	r2, [pc, #144]	; (58a8 <dma_init_le+0x188>)
    5816:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    5818:	4b22      	ldr	r3, [pc, #136]	; (58a4 <dma_init_le+0x184>)
    581a:	681b      	ldr	r3, [r3, #0]
    581c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    5820:	f640 4235 	movw	r2, #3125	; 0xc35
    5824:	fb02 f203 	mul.w	r2, r2, r3
    5828:	4b20      	ldr	r3, [pc, #128]	; (58ac <dma_init_le+0x18c>)
    582a:	681b      	ldr	r3, [r3, #0]
    582c:	4413      	add	r3, r2
    582e:	4a20      	ldr	r2, [pc, #128]	; (58b0 <dma_init_le+0x190>)
    5830:	6013      	str	r3, [r2, #0]
	active_buf_channel = channel;
    5832:	4b20      	ldr	r3, [pc, #128]	; (58b4 <dma_init_le+0x194>)
    5834:	881b      	ldrh	r3, [r3, #0]
    5836:	b29a      	uxth	r2, r3
    5838:	4b1f      	ldr	r3, [pc, #124]	; (58b8 <dma_init_le+0x198>)
    583a:	801a      	strh	r2, [r3, #0]

	/* reset interrupt counters */
	rx_tc = 0;
    583c:	4b1f      	ldr	r3, [pc, #124]	; (58bc <dma_init_le+0x19c>)
    583e:	2200      	movs	r2, #0
    5840:	601a      	str	r2, [r3, #0]
	rx_err = 0;
    5842:	4b1f      	ldr	r3, [pc, #124]	; (58c0 <dma_init_le+0x1a0>)
    5844:	2200      	movs	r2, #0
    5846:	601a      	str	r2, [r3, #0]
}
    5848:	370c      	adds	r7, #12
    584a:	46bd      	mov	sp, r7
    584c:	f85d 7b04 	ldr.w	r7, [sp], #4
    5850:	4770      	bx	lr
    5852:	bf00      	nop
    5854:	400fc0c4 	.word	0x400fc0c4
    5858:	50004110 	.word	0x50004110
    585c:	50004130 	.word	0x50004130
    5860:	50004150 	.word	0x50004150
    5864:	50004170 	.word	0x50004170
    5868:	50004190 	.word	0x50004190
    586c:	500041b0 	.word	0x500041b0
    5870:	500041d0 	.word	0x500041d0
    5874:	500041f0 	.word	0x500041f0
    5878:	50004008 	.word	0x50004008
    587c:	50004010 	.word	0x50004010
    5880:	50004030 	.word	0x50004030
    5884:	10000b08 	.word	0x10000b08
    5888:	40030008 	.word	0x40030008
    588c:	10001080 	.word	0x10001080
    5890:	88001004 	.word	0x88001004
    5894:	50004100 	.word	0x50004100
    5898:	50004104 	.word	0x50004104
    589c:	50004108 	.word	0x50004108
    58a0:	5000410c 	.word	0x5000410c
    58a4:	10000be4 	.word	0x10000be4
    58a8:	10000be8 	.word	0x10000be8
    58ac:	40004008 	.word	0x40004008
    58b0:	10001020 	.word	0x10001020
    58b4:	1000049c 	.word	0x1000049c
    58b8:	1000098a 	.word	0x1000098a
    58bc:	10000b00 	.word	0x10000b00
    58c0:	100010b4 	.word	0x100010b4

000058c4 <bt_stream_dma_handler>:

void bt_stream_dma_handler(void) {
    58c4:	b480      	push	{r7}
    58c6:	af00      	add	r7, sp, #0
	idle_buf_clkn_high = active_buf_clkn_high;
    58c8:	4b25      	ldr	r3, [pc, #148]	; (5960 <bt_stream_dma_handler+0x9c>)
    58ca:	681b      	ldr	r3, [r3, #0]
    58cc:	4a25      	ldr	r2, [pc, #148]	; (5964 <bt_stream_dma_handler+0xa0>)
    58ce:	6013      	str	r3, [r2, #0]
	active_buf_clkn_high = (clkn >> 20) & 0xff;
    58d0:	4b25      	ldr	r3, [pc, #148]	; (5968 <bt_stream_dma_handler+0xa4>)
    58d2:	681b      	ldr	r3, [r3, #0]
    58d4:	0d1b      	lsrs	r3, r3, #20
    58d6:	b2db      	uxtb	r3, r3
    58d8:	4a21      	ldr	r2, [pc, #132]	; (5960 <bt_stream_dma_handler+0x9c>)
    58da:	6013      	str	r3, [r2, #0]

	idle_buf_clk100ns = active_buf_clk100ns;
    58dc:	4b23      	ldr	r3, [pc, #140]	; (596c <bt_stream_dma_handler+0xa8>)
    58de:	681b      	ldr	r3, [r3, #0]
    58e0:	4a23      	ldr	r2, [pc, #140]	; (5970 <bt_stream_dma_handler+0xac>)
    58e2:	6013      	str	r3, [r2, #0]
	active_buf_clk100ns = CLK100NS;
    58e4:	4b20      	ldr	r3, [pc, #128]	; (5968 <bt_stream_dma_handler+0xa4>)
    58e6:	681b      	ldr	r3, [r3, #0]
    58e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    58ec:	f640 4235 	movw	r2, #3125	; 0xc35
    58f0:	fb02 f203 	mul.w	r2, r2, r3
    58f4:	4b1f      	ldr	r3, [pc, #124]	; (5974 <bt_stream_dma_handler+0xb0>)
    58f6:	681b      	ldr	r3, [r3, #0]
    58f8:	4413      	add	r3, r2
    58fa:	4a1c      	ldr	r2, [pc, #112]	; (596c <bt_stream_dma_handler+0xa8>)
    58fc:	6013      	str	r3, [r2, #0]

	idle_buf_channel = active_buf_channel;
    58fe:	4b1e      	ldr	r3, [pc, #120]	; (5978 <bt_stream_dma_handler+0xb4>)
    5900:	881b      	ldrh	r3, [r3, #0]
    5902:	b29a      	uxth	r2, r3
    5904:	4b1d      	ldr	r3, [pc, #116]	; (597c <bt_stream_dma_handler+0xb8>)
    5906:	801a      	strh	r2, [r3, #0]
	active_buf_channel = channel;
    5908:	4b1d      	ldr	r3, [pc, #116]	; (5980 <bt_stream_dma_handler+0xbc>)
    590a:	881b      	ldrh	r3, [r3, #0]
    590c:	b29a      	uxth	r2, r3
    590e:	4b1a      	ldr	r3, [pc, #104]	; (5978 <bt_stream_dma_handler+0xb4>)
    5910:	801a      	strh	r2, [r3, #0]

	/* interrupt on channel 0 */
	if (DMACIntStat & (1 << 0)) {
    5912:	4b1c      	ldr	r3, [pc, #112]	; (5984 <bt_stream_dma_handler+0xc0>)
    5914:	681b      	ldr	r3, [r3, #0]
    5916:	f003 0301 	and.w	r3, r3, #1
    591a:	2b00      	cmp	r3, #0
    591c:	d01b      	beq.n	5956 <bt_stream_dma_handler+0x92>
		if (DMACIntTCStat & (1 << 0)) {
    591e:	4b1a      	ldr	r3, [pc, #104]	; (5988 <bt_stream_dma_handler+0xc4>)
    5920:	681b      	ldr	r3, [r3, #0]
    5922:	f003 0301 	and.w	r3, r3, #1
    5926:	2b00      	cmp	r3, #0
    5928:	d007      	beq.n	593a <bt_stream_dma_handler+0x76>
			DMACIntTCClear = (1 << 0);
    592a:	4b18      	ldr	r3, [pc, #96]	; (598c <bt_stream_dma_handler+0xc8>)
    592c:	2201      	movs	r2, #1
    592e:	601a      	str	r2, [r3, #0]
			++rx_tc;
    5930:	4b17      	ldr	r3, [pc, #92]	; (5990 <bt_stream_dma_handler+0xcc>)
    5932:	681b      	ldr	r3, [r3, #0]
    5934:	3301      	adds	r3, #1
    5936:	4a16      	ldr	r2, [pc, #88]	; (5990 <bt_stream_dma_handler+0xcc>)
    5938:	6013      	str	r3, [r2, #0]
		}
		if (DMACIntErrStat & (1 << 0)) {
    593a:	4b16      	ldr	r3, [pc, #88]	; (5994 <bt_stream_dma_handler+0xd0>)
    593c:	681b      	ldr	r3, [r3, #0]
    593e:	f003 0301 	and.w	r3, r3, #1
    5942:	2b00      	cmp	r3, #0
    5944:	d007      	beq.n	5956 <bt_stream_dma_handler+0x92>
			DMACIntErrClr = (1 << 0);
    5946:	4b14      	ldr	r3, [pc, #80]	; (5998 <bt_stream_dma_handler+0xd4>)
    5948:	2201      	movs	r2, #1
    594a:	601a      	str	r2, [r3, #0]
			++rx_err;
    594c:	4b13      	ldr	r3, [pc, #76]	; (599c <bt_stream_dma_handler+0xd8>)
    594e:	681b      	ldr	r3, [r3, #0]
    5950:	3301      	adds	r3, #1
    5952:	4a12      	ldr	r2, [pc, #72]	; (599c <bt_stream_dma_handler+0xd8>)
    5954:	6013      	str	r3, [r2, #0]
		}
	}
}
    5956:	46bd      	mov	sp, r7
    5958:	f85d 7b04 	ldr.w	r7, [sp], #4
    595c:	4770      	bx	lr
    595e:	bf00      	nop
    5960:	10000be8 	.word	0x10000be8
    5964:	10001028 	.word	0x10001028
    5968:	10000be4 	.word	0x10000be4
    596c:	10001020 	.word	0x10001020
    5970:	10000bc8 	.word	0x10000bc8
    5974:	40004008 	.word	0x40004008
    5978:	1000098a 	.word	0x1000098a
    597c:	10000988 	.word	0x10000988
    5980:	1000049c 	.word	0x1000049c
    5984:	50004000 	.word	0x50004000
    5988:	50004004 	.word	0x50004004
    598c:	50004008 	.word	0x50004008
    5990:	10000b00 	.word	0x10000b00
    5994:	5000400c 	.word	0x5000400c
    5998:	50004010 	.word	0x50004010
    599c:	100010b4 	.word	0x100010b4

000059a0 <DMA_IRQHandler>:

void DMA_IRQHandler()
{
    59a0:	b580      	push	{r7, lr}
    59a2:	af00      	add	r7, sp, #0
	switch (mode) {
    59a4:	4b12      	ldr	r3, [pc, #72]	; (59f0 <DMA_IRQHandler+0x50>)
    59a6:	781b      	ldrb	r3, [r3, #0]
    59a8:	b2db      	uxtb	r3, r3
    59aa:	3b01      	subs	r3, #1
    59ac:	2b0b      	cmp	r3, #11
    59ae:	d81e      	bhi.n	59ee <DMA_IRQHandler+0x4e>
    59b0:	a201      	add	r2, pc, #4	; (adr r2, 59b8 <DMA_IRQHandler+0x18>)
    59b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    59b6:	bf00      	nop
    59b8:	000059e9 	.word	0x000059e9
    59bc:	000059ef 	.word	0x000059ef
    59c0:	000059ef 	.word	0x000059ef
    59c4:	000059e9 	.word	0x000059e9
    59c8:	000059ef 	.word	0x000059ef
    59cc:	000059ef 	.word	0x000059ef
    59d0:	000059ef 	.word	0x000059ef
    59d4:	000059e9 	.word	0x000059e9
    59d8:	000059e9 	.word	0x000059e9
    59dc:	000059e9 	.word	0x000059e9
    59e0:	000059ef 	.word	0x000059ef
    59e4:	000059e9 	.word	0x000059e9
		case MODE_SPECAN:
		case MODE_BT_FOLLOW:
		case MODE_BT_FOLLOW_LE:
		case MODE_BT_PROMISC_LE:
		case MODE_BT_SLAVE_LE:
			bt_stream_dma_handler();
    59e8:	f7ff ff6c 	bl	58c4 <bt_stream_dma_handler>
			break;
    59ec:	bf00      	nop
	}
}
    59ee:	bd80      	pop	{r7, pc}
    59f0:	10000a3e 	.word	0x10000a3e

000059f4 <dio_ssp_start>:

static void dio_ssp_start()
{
    59f4:	b480      	push	{r7}
    59f6:	af00      	add	r7, sp, #0
	/* make sure the (active low) slave select signal is not active */
	DIO_SSEL_SET;
    59f8:	4b10      	ldr	r3, [pc, #64]	; (5a3c <dio_ssp_start+0x48>)
    59fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    59fe:	601a      	str	r2, [r3, #0]

	/* enable rx DMA on DIO_SSP */
	DIO_SSP_DMACR |= SSPDMACR_RXDMAE;
    5a00:	4a0f      	ldr	r2, [pc, #60]	; (5a40 <dio_ssp_start+0x4c>)
    5a02:	4b0f      	ldr	r3, [pc, #60]	; (5a40 <dio_ssp_start+0x4c>)
    5a04:	681b      	ldr	r3, [r3, #0]
    5a06:	f043 0301 	orr.w	r3, r3, #1
    5a0a:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 |= SSPCR1_SSE;
    5a0c:	4a0d      	ldr	r2, [pc, #52]	; (5a44 <dio_ssp_start+0x50>)
    5a0e:	4b0d      	ldr	r3, [pc, #52]	; (5a44 <dio_ssp_start+0x50>)
    5a10:	681b      	ldr	r3, [r3, #0]
    5a12:	f043 0302 	orr.w	r3, r3, #2
    5a16:	6013      	str	r3, [r2, #0]
	
	/* enable DMA */
	DMACC0Config |= DMACCxConfig_E;
    5a18:	4a0b      	ldr	r2, [pc, #44]	; (5a48 <dio_ssp_start+0x54>)
    5a1a:	4b0b      	ldr	r3, [pc, #44]	; (5a48 <dio_ssp_start+0x54>)
    5a1c:	681b      	ldr	r3, [r3, #0]
    5a1e:	f043 0301 	orr.w	r3, r3, #1
    5a22:	6013      	str	r3, [r2, #0]
	ISER0 = ISER0_ISE_DMA;
    5a24:	4b09      	ldr	r3, [pc, #36]	; (5a4c <dio_ssp_start+0x58>)
    5a26:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5a2a:	601a      	str	r2, [r3, #0]

	/* activate slave select pin */
	DIO_SSEL_CLR;
    5a2c:	4b08      	ldr	r3, [pc, #32]	; (5a50 <dio_ssp_start+0x5c>)
    5a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5a32:	601a      	str	r2, [r3, #0]
}
    5a34:	46bd      	mov	sp, r7
    5a36:	f85d 7b04 	ldr.w	r7, [sp], #4
    5a3a:	4770      	bx	lr
    5a3c:	2009c098 	.word	0x2009c098
    5a40:	40030024 	.word	0x40030024
    5a44:	40030004 	.word	0x40030004
    5a48:	50004110 	.word	0x50004110
    5a4c:	e000e100 	.word	0xe000e100
    5a50:	2009c09c 	.word	0x2009c09c

00005a54 <dio_ssp_stop>:

static void dio_ssp_stop()
{
    5a54:	b480      	push	{r7}
    5a56:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    5a58:	4b21      	ldr	r3, [pc, #132]	; (5ae0 <dio_ssp_stop+0x8c>)
    5a5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5a5e:	601a      	str	r2, [r3, #0]

	// disable DMA on SSP; disable SSP
	DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    5a60:	4a20      	ldr	r2, [pc, #128]	; (5ae4 <dio_ssp_stop+0x90>)
    5a62:	4b20      	ldr	r3, [pc, #128]	; (5ae4 <dio_ssp_stop+0x90>)
    5a64:	681b      	ldr	r3, [r3, #0]
    5a66:	f023 0301 	bic.w	r3, r3, #1
    5a6a:	6013      	str	r3, [r2, #0]
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    5a6c:	4a1e      	ldr	r2, [pc, #120]	; (5ae8 <dio_ssp_stop+0x94>)
    5a6e:	4b1e      	ldr	r3, [pc, #120]	; (5ae8 <dio_ssp_stop+0x94>)
    5a70:	681b      	ldr	r3, [r3, #0]
    5a72:	f023 0302 	bic.w	r3, r3, #2
    5a76:	6013      	str	r3, [r2, #0]

	// disable DMA engine:
	// refer to UM10360 LPC17xx User Manual Ch 31 Sec 31.6.1, PDF page 607

	// disable DMA interrupts
	ICER0 = ICER0_ICE_DMA;
    5a78:	4b1c      	ldr	r3, [pc, #112]	; (5aec <dio_ssp_stop+0x98>)
    5a7a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    5a7e:	601a      	str	r2, [r3, #0]

	// disable active channels
	DMACC0Config = 0;
    5a80:	4b1b      	ldr	r3, [pc, #108]	; (5af0 <dio_ssp_stop+0x9c>)
    5a82:	2200      	movs	r2, #0
    5a84:	601a      	str	r2, [r3, #0]
	DMACC1Config = 0;
    5a86:	4b1b      	ldr	r3, [pc, #108]	; (5af4 <dio_ssp_stop+0xa0>)
    5a88:	2200      	movs	r2, #0
    5a8a:	601a      	str	r2, [r3, #0]
	DMACC2Config = 0;
    5a8c:	4b1a      	ldr	r3, [pc, #104]	; (5af8 <dio_ssp_stop+0xa4>)
    5a8e:	2200      	movs	r2, #0
    5a90:	601a      	str	r2, [r3, #0]
	DMACC3Config = 0;
    5a92:	4b1a      	ldr	r3, [pc, #104]	; (5afc <dio_ssp_stop+0xa8>)
    5a94:	2200      	movs	r2, #0
    5a96:	601a      	str	r2, [r3, #0]
	DMACC4Config = 0;
    5a98:	4b19      	ldr	r3, [pc, #100]	; (5b00 <dio_ssp_stop+0xac>)
    5a9a:	2200      	movs	r2, #0
    5a9c:	601a      	str	r2, [r3, #0]
	DMACC5Config = 0;
    5a9e:	4b19      	ldr	r3, [pc, #100]	; (5b04 <dio_ssp_stop+0xb0>)
    5aa0:	2200      	movs	r2, #0
    5aa2:	601a      	str	r2, [r3, #0]
	DMACC6Config = 0;
    5aa4:	4b18      	ldr	r3, [pc, #96]	; (5b08 <dio_ssp_stop+0xb4>)
    5aa6:	2200      	movs	r2, #0
    5aa8:	601a      	str	r2, [r3, #0]
	DMACC7Config = 0;
    5aaa:	4b18      	ldr	r3, [pc, #96]	; (5b0c <dio_ssp_stop+0xb8>)
    5aac:	2200      	movs	r2, #0
    5aae:	601a      	str	r2, [r3, #0]
	DMACIntTCClear = 0xFF;
    5ab0:	4b17      	ldr	r3, [pc, #92]	; (5b10 <dio_ssp_stop+0xbc>)
    5ab2:	22ff      	movs	r2, #255	; 0xff
    5ab4:	601a      	str	r2, [r3, #0]
	DMACIntErrClr = 0xFF;
    5ab6:	4b17      	ldr	r3, [pc, #92]	; (5b14 <dio_ssp_stop+0xc0>)
    5ab8:	22ff      	movs	r2, #255	; 0xff
    5aba:	601a      	str	r2, [r3, #0]

	// Disable the DMA controller by writing 0 to the DMA Enable bit in the DMACConfig
	// register.
	DMACConfig &= ~DMACConfig_E;
    5abc:	4a16      	ldr	r2, [pc, #88]	; (5b18 <dio_ssp_stop+0xc4>)
    5abe:	4b16      	ldr	r3, [pc, #88]	; (5b18 <dio_ssp_stop+0xc4>)
    5ac0:	681b      	ldr	r3, [r3, #0]
    5ac2:	f023 0301 	bic.w	r3, r3, #1
    5ac6:	6013      	str	r3, [r2, #0]
	while (DMACConfig & DMACConfig_E);
    5ac8:	bf00      	nop
    5aca:	4b13      	ldr	r3, [pc, #76]	; (5b18 <dio_ssp_stop+0xc4>)
    5acc:	681b      	ldr	r3, [r3, #0]
    5ace:	f003 0301 	and.w	r3, r3, #1
    5ad2:	2b00      	cmp	r3, #0
    5ad4:	d1f9      	bne.n	5aca <dio_ssp_stop+0x76>
}
    5ad6:	46bd      	mov	sp, r7
    5ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
    5adc:	4770      	bx	lr
    5ade:	bf00      	nop
    5ae0:	2009c098 	.word	0x2009c098
    5ae4:	40030024 	.word	0x40030024
    5ae8:	40030004 	.word	0x40030004
    5aec:	e000e180 	.word	0xe000e180
    5af0:	50004110 	.word	0x50004110
    5af4:	50004130 	.word	0x50004130
    5af8:	50004150 	.word	0x50004150
    5afc:	50004170 	.word	0x50004170
    5b00:	50004190 	.word	0x50004190
    5b04:	500041b0 	.word	0x500041b0
    5b08:	500041d0 	.word	0x500041d0
    5b0c:	500041f0 	.word	0x500041f0
    5b10:	50004008 	.word	0x50004008
    5b14:	50004010 	.word	0x50004010
    5b18:	50004030 	.word	0x50004030

00005b1c <cc2400_idle>:

static void cc2400_idle()
{
    5b1c:	b580      	push	{r7, lr}
    5b1e:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    5b20:	2064      	movs	r0, #100	; 0x64
    5b22:	f004 f897 	bl	9c54 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    5b26:	bf00      	nop
    5b28:	f004 f88a 	bl	9c40 <cc2400_status>
    5b2c:	4603      	mov	r3, r0
    5b2e:	f003 0304 	and.w	r3, r3, #4
    5b32:	2b00      	cmp	r3, #0
    5b34:	d1f8      	bne.n	5b28 <cc2400_idle+0xc>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5b36:	4b0a      	ldr	r3, [pc, #40]	; (5b60 <cc2400_idle+0x44>)
    5b38:	2280      	movs	r2, #128	; 0x80
    5b3a:	601a      	str	r2, [r3, #0]
	HGM_CLR;
    5b3c:	4b08      	ldr	r3, [pc, #32]	; (5b60 <cc2400_idle+0x44>)
    5b3e:	f44f 7280 	mov.w	r2, #256	; 0x100
    5b42:	601a      	str	r2, [r3, #0]
#endif

	RXLED_CLR;
    5b44:	4b07      	ldr	r3, [pc, #28]	; (5b64 <cc2400_idle+0x48>)
    5b46:	2210      	movs	r2, #16
    5b48:	601a      	str	r2, [r3, #0]
	TXLED_CLR;
    5b4a:	4b06      	ldr	r3, [pc, #24]	; (5b64 <cc2400_idle+0x48>)
    5b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
    5b50:	601a      	str	r2, [r3, #0]
	USRLED_CLR;
    5b52:	4b04      	ldr	r3, [pc, #16]	; (5b64 <cc2400_idle+0x48>)
    5b54:	2202      	movs	r2, #2
    5b56:	601a      	str	r2, [r3, #0]
	mode = MODE_IDLE;
    5b58:	4b03      	ldr	r3, [pc, #12]	; (5b68 <cc2400_idle+0x4c>)
    5b5a:	2200      	movs	r2, #0
    5b5c:	701a      	strb	r2, [r3, #0]
}
    5b5e:	bd80      	pop	{r7, pc}
    5b60:	2009c05c 	.word	0x2009c05c
    5b64:	2009c03c 	.word	0x2009c03c
    5b68:	10000a3e 	.word	0x10000a3e

00005b6c <cc2400_rx>:

/* start un-buffered rx */
static void cc2400_rx()
{
    5b6c:	b580      	push	{r7, lr}
    5b6e:	b082      	sub	sp, #8
    5b70:	af00      	add	r7, sp, #0
	u16 mdmctrl;
	if (modulation == MOD_BT_BASIC_RATE) {
    5b72:	4b2a      	ldr	r3, [pc, #168]	; (5c1c <cc2400_rx+0xb0>)
    5b74:	781b      	ldrb	r3, [r3, #0]
    5b76:	b2db      	uxtb	r3, r3
    5b78:	2b00      	cmp	r3, #0
    5b7a:	d102      	bne.n	5b82 <cc2400_rx+0x16>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5b7c:	2329      	movs	r3, #41	; 0x29
    5b7e:	80fb      	strh	r3, [r7, #6]
    5b80:	e008      	b.n	5b94 <cc2400_rx+0x28>
	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5b82:	4b26      	ldr	r3, [pc, #152]	; (5c1c <cc2400_rx+0xb0>)
    5b84:	781b      	ldrb	r3, [r3, #0]
    5b86:	b2db      	uxtb	r3, r3
    5b88:	2b01      	cmp	r3, #1
    5b8a:	d102      	bne.n	5b92 <cc2400_rx+0x26>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5b8c:	2340      	movs	r3, #64	; 0x40
    5b8e:	80fb      	strh	r3, [r7, #6]
    5b90:	e000      	b.n	5b94 <cc2400_rx+0x28>
	} else {
		/* oops */
		return;
    5b92:	e040      	b.n	5c16 <cc2400_rx+0xaa>
	}

	cc2400_set(MANAND,  0x7fff);
    5b94:	200d      	movs	r0, #13
    5b96:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5b9a:	f003 ff99 	bl	9ad0 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5b9e:	2012      	movs	r0, #18
    5ba0:	f642 3122 	movw	r1, #11042	; 0x2b22
    5ba4:	f003 ff94 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    5ba8:	2014      	movs	r0, #20
    5baa:	f241 314b 	movw	r1, #4939	; 0x134b
    5bae:	f003 ff8f 	bl	9ad0 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    5bb2:	2020      	movs	r0, #32
    5bb4:	f240 1101 	movw	r1, #257	; 0x101
    5bb8:	f003 ff8a 	bl	9ad0 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 2 preamble bytes of 01010101
	//      |  +-----------------> not packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5bbc:	4b18      	ldr	r3, [pc, #96]	; (5c20 <cc2400_rx+0xb4>)
    5bbe:	881b      	ldrh	r3, [r3, #0]
    5bc0:	b29b      	uxth	r3, r3
    5bc2:	3b01      	subs	r3, #1
    5bc4:	b29b      	uxth	r3, r3
    5bc6:	2002      	movs	r0, #2
    5bc8:	4619      	mov	r1, r3
    5bca:	f003 ff81 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5bce:	88fb      	ldrh	r3, [r7, #6]
    5bd0:	2003      	movs	r0, #3
    5bd2:	4619      	mov	r1, r3
    5bd4:	f003 ff7c 	bl	9ad0 <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5bd8:	f7fe fdda 	bl	4790 <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5bdc:	bf00      	nop
    5bde:	f004 f82f 	bl	9c40 <cc2400_status>
    5be2:	4603      	mov	r3, r0
    5be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5be8:	2b00      	cmp	r3, #0
    5bea:	d0f8      	beq.n	5bde <cc2400_rx+0x72>
	cc2400_strobe(SFSON);
    5bec:	2061      	movs	r0, #97	; 0x61
    5bee:	f004 f831 	bl	9c54 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5bf2:	bf00      	nop
    5bf4:	f004 f824 	bl	9c40 <cc2400_status>
    5bf8:	4603      	mov	r3, r0
    5bfa:	f003 0304 	and.w	r3, r3, #4
    5bfe:	2b00      	cmp	r3, #0
    5c00:	d0f8      	beq.n	5bf4 <cc2400_rx+0x88>
	cc2400_strobe(SRX);
    5c02:	2062      	movs	r0, #98	; 0x62
    5c04:	f004 f826 	bl	9c54 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5c08:	4b06      	ldr	r3, [pc, #24]	; (5c24 <cc2400_rx+0xb8>)
    5c0a:	2280      	movs	r2, #128	; 0x80
    5c0c:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5c0e:	4b05      	ldr	r3, [pc, #20]	; (5c24 <cc2400_rx+0xb8>)
    5c10:	f44f 7280 	mov.w	r2, #256	; 0x100
    5c14:	601a      	str	r2, [r3, #0]
#endif
}
    5c16:	3708      	adds	r7, #8
    5c18:	46bd      	mov	sp, r7
    5c1a:	bd80      	pop	{r7, pc}
    5c1c:	10000a42 	.word	0x10000a42
    5c20:	1000049c 	.word	0x1000049c
    5c24:	2009c058 	.word	0x2009c058

00005c28 <cc2400_rx_sync>:

/* start un-buffered rx */
static void cc2400_rx_sync(u32 sync)
{
    5c28:	b580      	push	{r7, lr}
    5c2a:	b084      	sub	sp, #16
    5c2c:	af00      	add	r7, sp, #0
    5c2e:	6078      	str	r0, [r7, #4]
	u16 grmdm, mdmctrl;

	if (modulation == MOD_BT_BASIC_RATE) {
    5c30:	4b33      	ldr	r3, [pc, #204]	; (5d00 <cc2400_rx_sync+0xd8>)
    5c32:	781b      	ldrb	r3, [r3, #0]
    5c34:	b2db      	uxtb	r3, r3
    5c36:	2b00      	cmp	r3, #0
    5c38:	d105      	bne.n	5c46 <cc2400_rx_sync+0x1e>
		mdmctrl = 0x0029; // 160 kHz frequency deviation
    5c3a:	2329      	movs	r3, #41	; 0x29
    5c3c:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0461; // un-buffered mode, packet w/ sync word detection
    5c3e:	f240 4361 	movw	r3, #1121	; 0x461
    5c42:	81fb      	strh	r3, [r7, #14]
    5c44:	e00b      	b.n	5c5e <cc2400_rx_sync+0x36>
		//   |  |  | +---------------> 0 preamble bytes of 01010101
		//   |  |  +-----------------> packet mode
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else if (modulation == MOD_BT_LOW_ENERGY) {
    5c46:	4b2e      	ldr	r3, [pc, #184]	; (5d00 <cc2400_rx_sync+0xd8>)
    5c48:	781b      	ldrb	r3, [r3, #0]
    5c4a:	b2db      	uxtb	r3, r3
    5c4c:	2b01      	cmp	r3, #1
    5c4e:	d105      	bne.n	5c5c <cc2400_rx_sync+0x34>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    5c50:	2340      	movs	r3, #64	; 0x40
    5c52:	81bb      	strh	r3, [r7, #12]
		grmdm = 0x0561; // un-buffered mode, packet w/ sync word detection
    5c54:	f240 5361 	movw	r3, #1377	; 0x561
    5c58:	81fb      	strh	r3, [r7, #14]
    5c5a:	e000      	b.n	5c5e <cc2400_rx_sync+0x36>
		//   |  +--------------------> un-buffered mode
		//   +-----------------------> sync error bits: 0

	} else {
		/* oops */
		return;
    5c5c:	e04d      	b.n	5cfa <cc2400_rx_sync+0xd2>
	}

	cc2400_set(MANAND,  0x7fff);
    5c5e:	200d      	movs	r0, #13
    5c60:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5c64:	f003 ff34 	bl	9ad0 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    5c68:	2012      	movs	r0, #18
    5c6a:	f642 3122 	movw	r1, #11042	; 0x2b22
    5c6e:	f003 ff2f 	bl	9ad0 <cc2400_set>

	cc2400_set(MDMTST0, 0x124b);
    5c72:	2014      	movs	r0, #20
    5c74:	f241 214b 	movw	r1, #4683	; 0x124b
    5c78:	f003 ff2a 	bl	9ad0 <cc2400_set>
	//    +--------------------> PRNG off
	//
	// ref: CC2400 datasheet page 67
	// AFC settling explained page 41/42

	cc2400_set(GRMDM,   grmdm);
    5c7c:	89fb      	ldrh	r3, [r7, #14]
    5c7e:	2020      	movs	r0, #32
    5c80:	4619      	mov	r1, r3
    5c82:	f003 ff25 	bl	9ad0 <cc2400_set>

	cc2400_set(SYNCL,   sync & 0xffff);
    5c86:	687b      	ldr	r3, [r7, #4]
    5c88:	b29b      	uxth	r3, r3
    5c8a:	202c      	movs	r0, #44	; 0x2c
    5c8c:	4619      	mov	r1, r3
    5c8e:	f003 ff1f 	bl	9ad0 <cc2400_set>
	cc2400_set(SYNCH,   (sync >> 16) & 0xffff);
    5c92:	687b      	ldr	r3, [r7, #4]
    5c94:	0c1b      	lsrs	r3, r3, #16
    5c96:	b29b      	uxth	r3, r3
    5c98:	202d      	movs	r0, #45	; 0x2d
    5c9a:	4619      	mov	r1, r3
    5c9c:	f003 ff18 	bl	9ad0 <cc2400_set>
	
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    5ca0:	4b18      	ldr	r3, [pc, #96]	; (5d04 <cc2400_rx_sync+0xdc>)
    5ca2:	881b      	ldrh	r3, [r3, #0]
    5ca4:	b29b      	uxth	r3, r3
    5ca6:	3b01      	subs	r3, #1
    5ca8:	b29b      	uxth	r3, r3
    5caa:	2002      	movs	r0, #2
    5cac:	4619      	mov	r1, r3
    5cae:	f003 ff0f 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl);
    5cb2:	89bb      	ldrh	r3, [r7, #12]
    5cb4:	2003      	movs	r0, #3
    5cb6:	4619      	mov	r1, r3
    5cb8:	f003 ff0a 	bl	9ad0 <cc2400_set>

	// Set up CS register
	cs_threshold_calc_and_set();
    5cbc:	f7fe fd68 	bl	4790 <cs_threshold_calc_and_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5cc0:	bf00      	nop
    5cc2:	f003 ffbd 	bl	9c40 <cc2400_status>
    5cc6:	4603      	mov	r3, r0
    5cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5ccc:	2b00      	cmp	r3, #0
    5cce:	d0f8      	beq.n	5cc2 <cc2400_rx_sync+0x9a>
	cc2400_strobe(SFSON);
    5cd0:	2061      	movs	r0, #97	; 0x61
    5cd2:	f003 ffbf 	bl	9c54 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5cd6:	bf00      	nop
    5cd8:	f003 ffb2 	bl	9c40 <cc2400_status>
    5cdc:	4603      	mov	r3, r0
    5cde:	f003 0304 	and.w	r3, r3, #4
    5ce2:	2b00      	cmp	r3, #0
    5ce4:	d0f8      	beq.n	5cd8 <cc2400_rx_sync+0xb0>
	cc2400_strobe(SRX);
    5ce6:	2062      	movs	r0, #98	; 0x62
    5ce8:	f003 ffb4 	bl	9c54 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5cec:	4b06      	ldr	r3, [pc, #24]	; (5d08 <cc2400_rx_sync+0xe0>)
    5cee:	2280      	movs	r2, #128	; 0x80
    5cf0:	601a      	str	r2, [r3, #0]
	HGM_SET;
    5cf2:	4b05      	ldr	r3, [pc, #20]	; (5d08 <cc2400_rx_sync+0xe0>)
    5cf4:	f44f 7280 	mov.w	r2, #256	; 0x100
    5cf8:	601a      	str	r2, [r3, #0]
#endif
}
    5cfa:	3710      	adds	r7, #16
    5cfc:	46bd      	mov	sp, r7
    5cfe:	bd80      	pop	{r7, pc}
    5d00:	10000a42 	.word	0x10000a42
    5d04:	1000049c 	.word	0x1000049c
    5d08:	2009c058 	.word	0x2009c058

00005d0c <le_transmit>:
 * All modulation parameters are set within this function. The data
 * should not be pre-whitened, but the CRC should be calculated and
 * included in the data length.
 */
void le_transmit(u32 aa, u8 len, u8 *data)
{
    5d0c:	b580      	push	{r7, lr}
    5d0e:	b09a      	sub	sp, #104	; 0x68
    5d10:	af00      	add	r7, sp, #0
    5d12:	60f8      	str	r0, [r7, #12]
    5d14:	460b      	mov	r3, r1
    5d16:	607a      	str	r2, [r7, #4]
    5d18:	72fb      	strb	r3, [r7, #11]
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5d1a:	2300      	movs	r3, #0
    5d1c:	667b      	str	r3, [r7, #100]	; 0x64
    5d1e:	e035      	b.n	5d8c <le_transmit+0x80>
		byte = aa & 0xff;
    5d20:	68fb      	ldr	r3, [r7, #12]
    5d22:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		aa >>= 8;
    5d26:	68fb      	ldr	r3, [r7, #12]
    5d28:	0a1b      	lsrs	r3, r3, #8
    5d2a:	60fb      	str	r3, [r7, #12]
		txbuf[i] = 0;
    5d2c:	f107 0210 	add.w	r2, r7, #16
    5d30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d32:	4413      	add	r3, r2
    5d34:	2200      	movs	r2, #0
    5d36:	701a      	strb	r2, [r3, #0]
		for (j = 0; j < 8; ++j) {
    5d38:	2300      	movs	r3, #0
    5d3a:	663b      	str	r3, [r7, #96]	; 0x60
    5d3c:	e020      	b.n	5d80 <le_transmit+0x74>
			txbuf[i] |= (byte & 1) << (7 - j);
    5d3e:	f107 0210 	add.w	r2, r7, #16
    5d42:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d44:	4413      	add	r3, r2
    5d46:	781b      	ldrb	r3, [r3, #0]
    5d48:	b2d9      	uxtb	r1, r3
    5d4a:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5d4e:	f003 0301 	and.w	r3, r3, #1
    5d52:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5d54:	f1c2 0207 	rsb	r2, r2, #7
    5d58:	4093      	lsls	r3, r2
    5d5a:	b2db      	uxtb	r3, r3
    5d5c:	460a      	mov	r2, r1
    5d5e:	4313      	orrs	r3, r2
    5d60:	b2db      	uxtb	r3, r3
    5d62:	b2d9      	uxtb	r1, r3
    5d64:	f107 0210 	add.w	r2, r7, #16
    5d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d6a:	4413      	add	r3, r2
    5d6c:	460a      	mov	r2, r1
    5d6e:	701a      	strb	r2, [r3, #0]
			byte >>= 1;
    5d70:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5d74:	085b      	lsrs	r3, r3, #1
    5d76:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
		byte = aa & 0xff;
		aa >>= 8;
		txbuf[i] = 0;
		for (j = 0; j < 8; ++j) {
    5d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5d7c:	3301      	adds	r3, #1
    5d7e:	663b      	str	r3, [r7, #96]	; 0x60
    5d80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5d82:	2b07      	cmp	r3, #7
    5d84:	d9db      	bls.n	5d3e <le_transmit+0x32>
	u8 tx_len;
	u8 byte;
	u16 gio_save;

	// first four bytes: AA
	for (i = 0; i < 4; ++i) {
    5d86:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d88:	3301      	adds	r3, #1
    5d8a:	667b      	str	r3, [r7, #100]	; 0x64
    5d8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5d8e:	2b03      	cmp	r3, #3
    5d90:	d9c6      	bls.n	5d20 <le_transmit+0x14>
			byte >>= 1;
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
    5d92:	4b93      	ldr	r3, [pc, #588]	; (5fe0 <le_transmit+0x2d4>)
    5d94:	881b      	ldrh	r3, [r3, #0]
    5d96:	b29b      	uxth	r3, r3
    5d98:	b2db      	uxtb	r3, r3
    5d9a:	3b62      	subs	r3, #98	; 0x62
    5d9c:	b2db      	uxtb	r3, r3
    5d9e:	4618      	mov	r0, r3
    5da0:	f002 fa9e 	bl	82e0 <btle_channel_index>
    5da4:	4603      	mov	r3, r0
    5da6:	461a      	mov	r2, r3
    5da8:	4b8e      	ldr	r3, [pc, #568]	; (5fe4 <le_transmit+0x2d8>)
    5daa:	5c9b      	ldrb	r3, [r3, r2]
    5dac:	65bb      	str	r3, [r7, #88]	; 0x58
	for (i = 0; i < len; ++i) {
    5dae:	2300      	movs	r3, #0
    5db0:	667b      	str	r3, [r7, #100]	; 0x64
    5db2:	e050      	b.n	5e56 <le_transmit+0x14a>
		byte = data[i];
    5db4:	687a      	ldr	r2, [r7, #4]
    5db6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5db8:	4413      	add	r3, r2
    5dba:	781b      	ldrb	r3, [r3, #0]
    5dbc:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
		txbuf[i+4] = 0;
    5dc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5dc2:	3304      	adds	r3, #4
    5dc4:	f107 0268 	add.w	r2, r7, #104	; 0x68
    5dc8:	4413      	add	r3, r2
    5dca:	2200      	movs	r2, #0
    5dcc:	f803 2c58 	strb.w	r2, [r3, #-88]
		for (j = 0; j < 8; ++j) {
    5dd0:	2300      	movs	r3, #0
    5dd2:	663b      	str	r3, [r7, #96]	; 0x60
    5dd4:	e039      	b.n	5e4a <le_transmit+0x13e>
			bit = (byte & 1) ^ whitening[idx];
    5dd6:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5dda:	f003 0301 	and.w	r3, r3, #1
    5dde:	4982      	ldr	r1, [pc, #520]	; (5fe8 <le_transmit+0x2dc>)
    5de0:	6dba      	ldr	r2, [r7, #88]	; 0x58
    5de2:	440a      	add	r2, r1
    5de4:	7812      	ldrb	r2, [r2, #0]
    5de6:	4053      	eors	r3, r2
    5de8:	657b      	str	r3, [r7, #84]	; 0x54
			idx = (idx + 1) % sizeof(whitening);
    5dea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    5dec:	3301      	adds	r3, #1
    5dee:	4619      	mov	r1, r3
    5df0:	4b7e      	ldr	r3, [pc, #504]	; (5fec <le_transmit+0x2e0>)
    5df2:	fba1 2303 	umull	r2, r3, r1, r3
    5df6:	1ac8      	subs	r0, r1, r3
    5df8:	0840      	lsrs	r0, r0, #1
    5dfa:	4403      	add	r3, r0
    5dfc:	099a      	lsrs	r2, r3, #6
    5dfe:	4613      	mov	r3, r2
    5e00:	01db      	lsls	r3, r3, #7
    5e02:	1a9b      	subs	r3, r3, r2
    5e04:	1aca      	subs	r2, r1, r3
    5e06:	65ba      	str	r2, [r7, #88]	; 0x58
			byte >>= 1;
    5e08:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
    5e0c:	085b      	lsrs	r3, r3, #1
    5e0e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
			txbuf[i+4] |= bit << (7 - j);
    5e12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e14:	3304      	adds	r3, #4
    5e16:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    5e18:	3204      	adds	r2, #4
    5e1a:	f107 0168 	add.w	r1, r7, #104	; 0x68
    5e1e:	440a      	add	r2, r1
    5e20:	f812 2c58 	ldrb.w	r2, [r2, #-88]
    5e24:	b2d1      	uxtb	r1, r2
    5e26:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    5e28:	f1c2 0207 	rsb	r2, r2, #7
    5e2c:	4610      	mov	r0, r2
    5e2e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    5e30:	4082      	lsls	r2, r0
    5e32:	b2d2      	uxtb	r2, r2
    5e34:	430a      	orrs	r2, r1
    5e36:	b2d2      	uxtb	r2, r2
    5e38:	b2d2      	uxtb	r2, r2
    5e3a:	f107 0168 	add.w	r1, r7, #104	; 0x68
    5e3e:	440b      	add	r3, r1
    5e40:	f803 2c58 	strb.w	r2, [r3, #-88]
	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
		byte = data[i];
		txbuf[i+4] = 0;
		for (j = 0; j < 8; ++j) {
    5e44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5e46:	3301      	adds	r3, #1
    5e48:	663b      	str	r3, [r7, #96]	; 0x60
    5e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    5e4c:	2b07      	cmp	r3, #7
    5e4e:	d9c2      	bls.n	5dd6 <le_transmit+0xca>
		}
	}

	// whiten the data and copy it into the txbuf
	int idx = whitening_index[btle_channel_index(channel-2402)];
	for (i = 0; i < len; ++i) {
    5e50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e52:	3301      	adds	r3, #1
    5e54:	667b      	str	r3, [r7, #100]	; 0x64
    5e56:	7afa      	ldrb	r2, [r7, #11]
    5e58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5e5a:	429a      	cmp	r2, r3
    5e5c:	d8aa      	bhi.n	5db4 <le_transmit+0xa8>
			byte >>= 1;
			txbuf[i+4] |= bit << (7 - j);
		}
	}

	len += 4; // include the AA in len
    5e5e:	7afb      	ldrb	r3, [r7, #11]
    5e60:	3304      	adds	r3, #4
    5e62:	72fb      	strb	r3, [r7, #11]

	// Bluetooth-like modulation
	cc2400_set(MANAND,  0x7fff);
    5e64:	200d      	movs	r0, #13
    5e66:	f647 71ff 	movw	r1, #32767	; 0x7fff
    5e6a:	f003 fe31 	bl	9ad0 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    5e6e:	2012      	movs	r0, #18
    5e70:	f642 3122 	movw	r1, #11042	; 0x2b22
    5e74:	f003 fe2c 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);    // no PRNG
    5e78:	2014      	movs	r0, #20
    5e7a:	f241 314b 	movw	r1, #4939	; 0x134b
    5e7e:	f003 fe27 	bl	9ad0 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    5e82:	2020      	movs	r0, #32
    5e84:	f640 4101 	movw	r1, #3073	; 0xc01
    5e88:	f003 fe22 	bl	9ad0 <cc2400_set>
	//      |  | |   +-----------> sync word: 8 MSB bits of SYNC_WORD
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	cc2400_set(FSDIV,   channel);
    5e8c:	4b54      	ldr	r3, [pc, #336]	; (5fe0 <le_transmit+0x2d4>)
    5e8e:	881b      	ldrh	r3, [r3, #0]
    5e90:	b29b      	uxth	r3, r3
    5e92:	2002      	movs	r0, #2
    5e94:	4619      	mov	r1, r3
    5e96:	f003 fe1b 	bl	9ad0 <cc2400_set>
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    5e9a:	2005      	movs	r0, #5
    5e9c:	210b      	movs	r1, #11
    5e9e:	f003 fe17 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    5ea2:	2003      	movs	r0, #3
    5ea4:	2140      	movs	r1, #64	; 0x40
    5ea6:	f003 fe13 	bl	9ad0 <cc2400_set>
	cc2400_set(INT,     0x0014);	// FIFO_THRESHOLD: 20 bytes
    5eaa:	2023      	movs	r0, #35	; 0x23
    5eac:	2114      	movs	r1, #20
    5eae:	f003 fe0f 	bl	9ad0 <cc2400_set>

	// sync byte depends on the first transmitted bit of the AA
	if (aa & 1)
    5eb2:	68fb      	ldr	r3, [r7, #12]
    5eb4:	f003 0301 	and.w	r3, r3, #1
    5eb8:	2b00      	cmp	r3, #0
    5eba:	d005      	beq.n	5ec8 <le_transmit+0x1bc>
		cc2400_set(SYNCH,   0xaaaa);
    5ebc:	202d      	movs	r0, #45	; 0x2d
    5ebe:	f64a 21aa 	movw	r1, #43690	; 0xaaaa
    5ec2:	f003 fe05 	bl	9ad0 <cc2400_set>
    5ec6:	e004      	b.n	5ed2 <le_transmit+0x1c6>
	else
		cc2400_set(SYNCH,   0x5555);
    5ec8:	202d      	movs	r0, #45	; 0x2d
    5eca:	f245 5155 	movw	r1, #21845	; 0x5555
    5ece:	f003 fdff 	bl	9ad0 <cc2400_set>

	// set GIO to FIFO_FULL
	gio_save = cc2400_get(IOCFG);
    5ed2:	2008      	movs	r0, #8
    5ed4:	f003 fde6 	bl	9aa4 <cc2400_get>
    5ed8:	4603      	mov	r3, r0
    5eda:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
	cc2400_set(IOCFG, (GIO_FIFO_FULL << 9) | (gio_save & 0x1ff));
    5ede:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    5ee2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5ee6:	b29b      	uxth	r3, r3
    5ee8:	f443 439c 	orr.w	r3, r3, #19968	; 0x4e00
    5eec:	b29b      	uxth	r3, r3
    5eee:	b29b      	uxth	r3, r3
    5ef0:	2008      	movs	r0, #8
    5ef2:	4619      	mov	r1, r3
    5ef4:	f003 fdec 	bl	9ad0 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    5ef8:	bf00      	nop
    5efa:	f003 fea1 	bl	9c40 <cc2400_status>
    5efe:	4603      	mov	r3, r0
    5f00:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5f04:	2b00      	cmp	r3, #0
    5f06:	d0f8      	beq.n	5efa <le_transmit+0x1ee>
	cc2400_strobe(SFSON);
    5f08:	2061      	movs	r0, #97	; 0x61
    5f0a:	f003 fea3 	bl	9c54 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    5f0e:	bf00      	nop
    5f10:	f003 fe96 	bl	9c40 <cc2400_status>
    5f14:	4603      	mov	r3, r0
    5f16:	f003 0304 	and.w	r3, r3, #4
    5f1a:	2b00      	cmp	r3, #0
    5f1c:	d0f8      	beq.n	5f10 <le_transmit+0x204>
	TXLED_SET;
    5f1e:	4b34      	ldr	r3, [pc, #208]	; (5ff0 <le_transmit+0x2e4>)
    5f20:	f44f 7280 	mov.w	r2, #256	; 0x100
    5f24:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    5f26:	4b33      	ldr	r3, [pc, #204]	; (5ff4 <le_transmit+0x2e8>)
    5f28:	2280      	movs	r2, #128	; 0x80
    5f2a:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5f2c:	bf00      	nop
    5f2e:	200e      	movs	r0, #14
    5f30:	f003 fdb8 	bl	9aa4 <cc2400_get>
    5f34:	4603      	mov	r3, r0
    5f36:	f003 031f 	and.w	r3, r3, #31
    5f3a:	2b0f      	cmp	r3, #15
    5f3c:	d1f7      	bne.n	5f2e <le_transmit+0x222>
	cc2400_strobe(STX);
    5f3e:	2063      	movs	r0, #99	; 0x63
    5f40:	f003 fe88 	bl	9c54 <cc2400_strobe>

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    5f44:	2300      	movs	r3, #0
    5f46:	667b      	str	r3, [r7, #100]	; 0x64
    5f48:	e021      	b.n	5f8e <le_transmit+0x282>
		while (GIO6) ; // wait for the FIFO to drain (FIFO_FULL false)
    5f4a:	bf00      	nop
    5f4c:	4b2a      	ldr	r3, [pc, #168]	; (5ff8 <le_transmit+0x2ec>)
    5f4e:	681b      	ldr	r3, [r3, #0]
    5f50:	f003 0304 	and.w	r3, r3, #4
    5f54:	2b00      	cmp	r3, #0
    5f56:	d1f9      	bne.n	5f4c <le_transmit+0x240>
		tx_len = len - i;
    5f58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5f5a:	b2db      	uxtb	r3, r3
    5f5c:	7afa      	ldrb	r2, [r7, #11]
    5f5e:	1ad3      	subs	r3, r2, r3
    5f60:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (tx_len > 16)
    5f64:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    5f68:	2b10      	cmp	r3, #16
    5f6a:	d902      	bls.n	5f72 <le_transmit+0x266>
			tx_len = 16;
    5f6c:	2310      	movs	r3, #16
    5f6e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
    5f72:	f107 0210 	add.w	r2, r7, #16
    5f76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5f78:	4413      	add	r3, r2
    5f7a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
    5f7e:	2070      	movs	r0, #112	; 0x70
    5f80:	4611      	mov	r1, r2
    5f82:	461a      	mov	r2, r3
    5f84:	f003 fde6 	bl	9b54 <cc2400_spi_buf>
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
	cc2400_strobe(STX);

	// put the packet into the FIFO
	for (i = 0; i < len; i += 16) {
    5f88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5f8a:	3310      	adds	r3, #16
    5f8c:	667b      	str	r3, [r7, #100]	; 0x64
    5f8e:	7afa      	ldrb	r2, [r7, #11]
    5f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    5f92:	429a      	cmp	r2, r3
    5f94:	d8d9      	bhi.n	5f4a <le_transmit+0x23e>
		if (tx_len > 16)
			tx_len = 16;
		cc2400_spi_buf(FIFOREG, tx_len, txbuf + i);
	}

	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    5f96:	bf00      	nop
    5f98:	200e      	movs	r0, #14
    5f9a:	f003 fd83 	bl	9aa4 <cc2400_get>
    5f9e:	4603      	mov	r3, r0
    5fa0:	f003 031f 	and.w	r3, r3, #31
    5fa4:	2b0f      	cmp	r3, #15
    5fa6:	d1f7      	bne.n	5f98 <le_transmit+0x28c>
	TXLED_CLR;
    5fa8:	4b14      	ldr	r3, [pc, #80]	; (5ffc <le_transmit+0x2f0>)
    5faa:	f44f 7280 	mov.w	r2, #256	; 0x100
    5fae:	601a      	str	r2, [r3, #0]

	cc2400_strobe(SRFOFF);
    5fb0:	2064      	movs	r0, #100	; 0x64
    5fb2:	f003 fe4f 	bl	9c54 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    5fb6:	bf00      	nop
    5fb8:	f003 fe42 	bl	9c40 <cc2400_status>
    5fbc:	4603      	mov	r3, r0
    5fbe:	f003 0304 	and.w	r3, r3, #4
    5fc2:	2b00      	cmp	r3, #0
    5fc4:	d1f8      	bne.n	5fb8 <le_transmit+0x2ac>

#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    5fc6:	4b0e      	ldr	r3, [pc, #56]	; (6000 <le_transmit+0x2f4>)
    5fc8:	2280      	movs	r2, #128	; 0x80
    5fca:	601a      	str	r2, [r3, #0]
#endif

	// reset GIO
	cc2400_set(IOCFG, gio_save);
    5fcc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
    5fd0:	2008      	movs	r0, #8
    5fd2:	4619      	mov	r1, r3
    5fd4:	f003 fd7c 	bl	9ad0 <cc2400_set>
}
    5fd8:	3768      	adds	r7, #104	; 0x68
    5fda:	46bd      	mov	sp, r7
    5fdc:	bd80      	pop	{r7, pc}
    5fde:	bf00      	nop
    5fe0:	1000049c 	.word	0x1000049c
    5fe4:	0000b874 	.word	0x0000b874
    5fe8:	0000b7f4 	.word	0x0000b7f4
    5fec:	02040811 	.word	0x02040811
    5ff0:	2009c038 	.word	0x2009c038
    5ff4:	2009c058 	.word	0x2009c058
    5ff8:	2009c054 	.word	0x2009c054
    5ffc:	2009c03c 	.word	0x2009c03c
    6000:	2009c05c 	.word	0x2009c05c

00006004 <le_jam>:

void le_jam(void) {
    6004:	b580      	push	{r7, lr}
    6006:	af00      	add	r7, sp, #0
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    6008:	200d      	movs	r0, #13
    600a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    600e:	f003 fd5f 	bl	9ad0 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);    // LNA and receive mixers test register
    6012:	2012      	movs	r0, #18
    6014:	f642 3122 	movw	r1, #11042	; 0x2b22
    6018:	f003 fd5a 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMTST0, 0x234b);    // PRNG, 1 MHz offset
    601c:	2014      	movs	r0, #20
    601e:	f242 314b 	movw	r1, #9035	; 0x234b
    6022:	f003 fd55 	bl	9ad0 <cc2400_set>

	cc2400_set(GRMDM,   0x0c01);
    6026:	2020      	movs	r0, #32
    6028:	f640 4101 	movw	r1, #3073	; 0xc01
    602c:	f003 fd50 	bl	9ad0 <cc2400_set>
	//      |  | +---------------> 0 preamble bytes of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> buffered mode

	// cc2400_set(FSDIV,   channel);
	cc2400_set(FREND,   0b1011);    // amplifier level (-7 dBm, picked from hat)
    6030:	2005      	movs	r0, #5
    6032:	210b      	movs	r1, #11
    6034:	f003 fd4c 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040);    // 250 kHz frequency deviation
    6038:	2003      	movs	r0, #3
    603a:	2140      	movs	r1, #64	; 0x40
    603c:	f003 fd48 	bl	9ad0 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    6040:	bf00      	nop
    6042:	f003 fdfd 	bl	9c40 <cc2400_status>
    6046:	4603      	mov	r3, r0
    6048:	f003 0340 	and.w	r3, r3, #64	; 0x40
    604c:	2b00      	cmp	r3, #0
    604e:	d0f8      	beq.n	6042 <le_jam+0x3e>
	cc2400_strobe(SFSON);
    6050:	2061      	movs	r0, #97	; 0x61
    6052:	f003 fdff 	bl	9c54 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6056:	bf00      	nop
    6058:	f003 fdf2 	bl	9c40 <cc2400_status>
    605c:	4603      	mov	r3, r0
    605e:	f003 0304 	and.w	r3, r3, #4
    6062:	2b00      	cmp	r3, #0
    6064:	d0f8      	beq.n	6058 <le_jam+0x54>
	TXLED_SET;
    6066:	4b0a      	ldr	r3, [pc, #40]	; (6090 <le_jam+0x8c>)
    6068:	f44f 7280 	mov.w	r2, #256	; 0x100
    606c:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    606e:	4b09      	ldr	r3, [pc, #36]	; (6094 <le_jam+0x90>)
    6070:	2280      	movs	r2, #128	; 0x80
    6072:	601a      	str	r2, [r3, #0]
#endif
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    6074:	bf00      	nop
    6076:	200e      	movs	r0, #14
    6078:	f003 fd14 	bl	9aa4 <cc2400_get>
    607c:	4603      	mov	r3, r0
    607e:	f003 031f 	and.w	r3, r3, #31
    6082:	2b0f      	cmp	r3, #15
    6084:	d1f7      	bne.n	6076 <le_jam+0x72>
	cc2400_strobe(STX);
    6086:	2063      	movs	r0, #99	; 0x63
    6088:	f003 fde4 	bl	9c54 <cc2400_strobe>
#endif
}
    608c:	bd80      	pop	{r7, pc}
    608e:	bf00      	nop
    6090:	2009c038 	.word	0x2009c038
    6094:	2009c058 	.word	0x2009c058

00006098 <hop>:

/* TODO - return whether hop happened, or should caller have to keep
 * track of this? */
void hop(void)
{
    6098:	b580      	push	{r7, lr}
    609a:	af00      	add	r7, sp, #0
	do_hop = 0;
    609c:	4b41      	ldr	r3, [pc, #260]	; (61a4 <hop+0x10c>)
    609e:	2200      	movs	r2, #0
    60a0:	701a      	strb	r2, [r3, #0]

	// No hopping, if channel is set correctly, do nothing
	if (hop_mode == HOP_NONE) {
    60a2:	4b41      	ldr	r3, [pc, #260]	; (61a8 <hop+0x110>)
    60a4:	781b      	ldrb	r3, [r3, #0]
    60a6:	2b00      	cmp	r3, #0
    60a8:	d10b      	bne.n	60c2 <hop+0x2a>
		if (cc2400_get(FSDIV) == (channel - 1))
    60aa:	2002      	movs	r0, #2
    60ac:	f003 fcfa 	bl	9aa4 <cc2400_get>
    60b0:	4603      	mov	r3, r0
    60b2:	461a      	mov	r2, r3
    60b4:	4b3d      	ldr	r3, [pc, #244]	; (61ac <hop+0x114>)
    60b6:	881b      	ldrh	r3, [r3, #0]
    60b8:	b29b      	uxth	r3, r3
    60ba:	3b01      	subs	r3, #1
    60bc:	429a      	cmp	r2, r3
    60be:	d147      	bne.n	6150 <hop+0xb8>
			return;
    60c0:	e06e      	b.n	61a0 <hop+0x108>
	}

	// Slow sweep (100 hops/sec)
	else if (hop_mode == HOP_SWEEP) {
    60c2:	4b39      	ldr	r3, [pc, #228]	; (61a8 <hop+0x110>)
    60c4:	781b      	ldrb	r3, [r3, #0]
    60c6:	2b01      	cmp	r3, #1
    60c8:	d114      	bne.n	60f4 <hop+0x5c>
		channel += 32;
    60ca:	4b38      	ldr	r3, [pc, #224]	; (61ac <hop+0x114>)
    60cc:	881b      	ldrh	r3, [r3, #0]
    60ce:	b29b      	uxth	r3, r3
    60d0:	3320      	adds	r3, #32
    60d2:	b29a      	uxth	r2, r3
    60d4:	4b35      	ldr	r3, [pc, #212]	; (61ac <hop+0x114>)
    60d6:	801a      	strh	r2, [r3, #0]
		if (channel > 2480)
    60d8:	4b34      	ldr	r3, [pc, #208]	; (61ac <hop+0x114>)
    60da:	881b      	ldrh	r3, [r3, #0]
    60dc:	b29b      	uxth	r3, r3
    60de:	f5b3 6f1b 	cmp.w	r3, #2480	; 0x9b0
    60e2:	d935      	bls.n	6150 <hop+0xb8>
			channel -= 79;
    60e4:	4b31      	ldr	r3, [pc, #196]	; (61ac <hop+0x114>)
    60e6:	881b      	ldrh	r3, [r3, #0]
    60e8:	b29b      	uxth	r3, r3
    60ea:	3b4f      	subs	r3, #79	; 0x4f
    60ec:	b29a      	uxth	r2, r3
    60ee:	4b2f      	ldr	r3, [pc, #188]	; (61ac <hop+0x114>)
    60f0:	801a      	strh	r2, [r3, #0]
    60f2:	e02d      	b.n	6150 <hop+0xb8>
	}

	else if (hop_mode == HOP_BLUETOOTH) {
    60f4:	4b2c      	ldr	r3, [pc, #176]	; (61a8 <hop+0x110>)
    60f6:	781b      	ldrb	r3, [r3, #0]
    60f8:	2b02      	cmp	r3, #2
    60fa:	d10d      	bne.n	6118 <hop+0x80>
		TXLED_SET;
    60fc:	4b2c      	ldr	r3, [pc, #176]	; (61b0 <hop+0x118>)
    60fe:	f44f 7280 	mov.w	r2, #256	; 0x100
    6102:	601a      	str	r2, [r3, #0]
		channel = next_hop(clkn);
    6104:	4b2b      	ldr	r3, [pc, #172]	; (61b4 <hop+0x11c>)
    6106:	681b      	ldr	r3, [r3, #0]
    6108:	4618      	mov	r0, r3
    610a:	f001 fffb 	bl	8104 <next_hop>
    610e:	4603      	mov	r3, r0
    6110:	461a      	mov	r2, r3
    6112:	4b26      	ldr	r3, [pc, #152]	; (61ac <hop+0x114>)
    6114:	801a      	strh	r2, [r3, #0]
    6116:	e01b      	b.n	6150 <hop+0xb8>
	}

	else if (hop_mode == HOP_BTLE) {
    6118:	4b23      	ldr	r3, [pc, #140]	; (61a8 <hop+0x110>)
    611a:	781b      	ldrb	r3, [r3, #0]
    611c:	2b03      	cmp	r3, #3
    611e:	d10b      	bne.n	6138 <hop+0xa0>
		TXLED_SET;
    6120:	4b23      	ldr	r3, [pc, #140]	; (61b0 <hop+0x118>)
    6122:	f44f 7280 	mov.w	r2, #256	; 0x100
    6126:	601a      	str	r2, [r3, #0]
		channel = btle_next_hop(&le);
    6128:	4823      	ldr	r0, [pc, #140]	; (61b8 <hop+0x120>)
    612a:	f002 f8b1 	bl	8290 <btle_next_hop>
    612e:	4603      	mov	r3, r0
    6130:	461a      	mov	r2, r3
    6132:	4b1e      	ldr	r3, [pc, #120]	; (61ac <hop+0x114>)
    6134:	801a      	strh	r2, [r3, #0]
    6136:	e00b      	b.n	6150 <hop+0xb8>
	}

	else if (hop_mode == HOP_DIRECT) {
    6138:	4b1b      	ldr	r3, [pc, #108]	; (61a8 <hop+0x110>)
    613a:	781b      	ldrb	r3, [r3, #0]
    613c:	2b04      	cmp	r3, #4
    613e:	d107      	bne.n	6150 <hop+0xb8>
		TXLED_SET;
    6140:	4b1b      	ldr	r3, [pc, #108]	; (61b0 <hop+0x118>)
    6142:	f44f 7280 	mov.w	r2, #256	; 0x100
    6146:	601a      	str	r2, [r3, #0]
		channel = hop_direct_channel;
    6148:	4b1c      	ldr	r3, [pc, #112]	; (61bc <hop+0x124>)
    614a:	881a      	ldrh	r2, [r3, #0]
    614c:	4b17      	ldr	r3, [pc, #92]	; (61ac <hop+0x114>)
    614e:	801a      	strh	r2, [r3, #0]
	}

        /* IDLE mode, but leave amp on, so don't call cc2400_idle(). */
	cc2400_strobe(SRFOFF);
    6150:	2064      	movs	r0, #100	; 0x64
    6152:	f003 fd7f 	bl	9c54 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    6156:	bf00      	nop
    6158:	f003 fd72 	bl	9c40 <cc2400_status>
    615c:	4603      	mov	r3, r0
    615e:	f003 0304 	and.w	r3, r3, #4
    6162:	2b00      	cmp	r3, #0
    6164:	d1f8      	bne.n	6158 <hop+0xc0>

	/* Retune */
	cc2400_set(FSDIV, channel - 1);
    6166:	4b11      	ldr	r3, [pc, #68]	; (61ac <hop+0x114>)
    6168:	881b      	ldrh	r3, [r3, #0]
    616a:	b29b      	uxth	r3, r3
    616c:	3b01      	subs	r3, #1
    616e:	b29b      	uxth	r3, r3
    6170:	2002      	movs	r0, #2
    6172:	4619      	mov	r1, r3
    6174:	f003 fcac 	bl	9ad0 <cc2400_set>
	
	/* Update CS register if hopping.  */
	if (hop_mode > 0) {
    6178:	4b0b      	ldr	r3, [pc, #44]	; (61a8 <hop+0x110>)
    617a:	781b      	ldrb	r3, [r3, #0]
    617c:	2b00      	cmp	r3, #0
    617e:	d001      	beq.n	6184 <hop+0xec>
		cs_threshold_calc_and_set();
    6180:	f7fe fb06 	bl	4790 <cs_threshold_calc_and_set>
	}

	/* Wait for lock */
	cc2400_strobe(SFSON);
    6184:	2061      	movs	r0, #97	; 0x61
    6186:	f003 fd65 	bl	9c54 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    618a:	bf00      	nop
    618c:	f003 fd58 	bl	9c40 <cc2400_status>
    6190:	4603      	mov	r3, r0
    6192:	f003 0304 	and.w	r3, r3, #4
    6196:	2b00      	cmp	r3, #0
    6198:	d0f8      	beq.n	618c <hop+0xf4>
	
	/* RX mode */
	cc2400_strobe(SRX);
    619a:	2062      	movs	r0, #98	; 0x62
    619c:	f003 fd5a 	bl	9c54 <cc2400_strobe>

}
    61a0:	bd80      	pop	{r7, pc}
    61a2:	bf00      	nop
    61a4:	1000097d 	.word	0x1000097d
    61a8:	1000097c 	.word	0x1000097c
    61ac:	1000049c 	.word	0x1000049c
    61b0:	2009c038 	.word	0x2009c038
    61b4:	10000be4 	.word	0x10000be4
    61b8:	10000458 	.word	0x10000458
    61bc:	10000980 	.word	0x10000980

000061c0 <cc2400_spi_rev>:


u32 cc2400_spi_rev(u8 len, u32 data)
{
    61c0:	b480      	push	{r7}
    61c2:	b085      	sub	sp, #20
    61c4:	af00      	add	r7, sp, #0
    61c6:	4603      	mov	r3, r0
    61c8:	6039      	str	r1, [r7, #0]
    61ca:	71fb      	strb	r3, [r7, #7]
    //    u32 first_ts, second_ts, diff;


        u32 msb = 1 << (len - 1);
    61cc:	79fb      	ldrb	r3, [r7, #7]
    61ce:	3b01      	subs	r3, #1
    61d0:	2201      	movs	r2, #1
    61d2:	fa02 f303 	lsl.w	r3, r2, r3
    61d6:	60fb      	str	r3, [r7, #12]

        /* start transaction by dropping CSN */
        CSN_CLR;
    61d8:	4b18      	ldr	r3, [pc, #96]	; (623c <cc2400_spi_rev+0x7c>)
    61da:	2220      	movs	r2, #32
    61dc:	601a      	str	r2, [r3, #0]
	
//	first_ts = CLK100NS;
        while (len--) {
    61de:	e01e      	b.n	621e <cc2400_spi_rev+0x5e>
                if (data & msb)
    61e0:	683a      	ldr	r2, [r7, #0]
    61e2:	68fb      	ldr	r3, [r7, #12]
    61e4:	4013      	ands	r3, r2
    61e6:	2b00      	cmp	r3, #0
    61e8:	d003      	beq.n	61f2 <cc2400_spi_rev+0x32>
                        MOSI_SET;
    61ea:	4b15      	ldr	r3, [pc, #84]	; (6240 <cc2400_spi_rev+0x80>)
    61ec:	2201      	movs	r2, #1
    61ee:	601a      	str	r2, [r3, #0]
    61f0:	e002      	b.n	61f8 <cc2400_spi_rev+0x38>
                else
                        MOSI_CLR;
    61f2:	4b12      	ldr	r3, [pc, #72]	; (623c <cc2400_spi_rev+0x7c>)
    61f4:	2201      	movs	r2, #1
    61f6:	601a      	str	r2, [r3, #0]
                data <<= 1;
    61f8:	683b      	ldr	r3, [r7, #0]
    61fa:	005b      	lsls	r3, r3, #1
    61fc:	603b      	str	r3, [r7, #0]

                SCLK_SET;
    61fe:	4b10      	ldr	r3, [pc, #64]	; (6240 <cc2400_spi_rev+0x80>)
    6200:	2210      	movs	r2, #16
    6202:	601a      	str	r2, [r3, #0]
                if (MISO)
    6204:	4b0f      	ldr	r3, [pc, #60]	; (6244 <cc2400_spi_rev+0x84>)
    6206:	681b      	ldr	r3, [r3, #0]
    6208:	f003 0302 	and.w	r3, r3, #2
    620c:	2b00      	cmp	r3, #0
    620e:	d003      	beq.n	6218 <cc2400_spi_rev+0x58>
                        data |= 1;
    6210:	683b      	ldr	r3, [r7, #0]
    6212:	f043 0301 	orr.w	r3, r3, #1
    6216:	603b      	str	r3, [r7, #0]

                SCLK_CLR;
    6218:	4b08      	ldr	r3, [pc, #32]	; (623c <cc2400_spi_rev+0x7c>)
    621a:	2210      	movs	r2, #16
    621c:	601a      	str	r2, [r3, #0]

        /* start transaction by dropping CSN */
        CSN_CLR;
	
//	first_ts = CLK100NS;
        while (len--) {
    621e:	79fb      	ldrb	r3, [r7, #7]
    6220:	1e5a      	subs	r2, r3, #1
    6222:	71fa      	strb	r2, [r7, #7]
    6224:	2b00      	cmp	r3, #0
    6226:	d1db      	bne.n	61e0 <cc2400_spi_rev+0x20>
                SCLK_CLR;
        }
//	second_ts = CLK100NS;
//	diff_ts = second_ts - first_ts;

	CSN_SET;
    6228:	4b05      	ldr	r3, [pc, #20]	; (6240 <cc2400_spi_rev+0x80>)
    622a:	2220      	movs	r2, #32
    622c:	601a      	str	r2, [r3, #0]
	return data;
    622e:	683b      	ldr	r3, [r7, #0]
}
    6230:	4618      	mov	r0, r3
    6232:	3714      	adds	r7, #20
    6234:	46bd      	mov	sp, r7
    6236:	f85d 7b04 	ldr.w	r7, [sp], #4
    623a:	4770      	bx	lr
    623c:	2009c05c 	.word	0x2009c05c
    6240:	2009c058 	.word	0x2009c058
    6244:	2009c054 	.word	0x2009c054

00006248 <cc2400_get_rev>:



u8 cc2400_get_rev(u8 reg)
{
    6248:	b580      	push	{r7, lr}
    624a:	b084      	sub	sp, #16
    624c:	af00      	add	r7, sp, #0
    624e:	4603      	mov	r3, r0
    6250:	71fb      	strb	r3, [r7, #7]
        u32 in;

        u32 out = (reg | 0x80) << 8;
    6252:	79fb      	ldrb	r3, [r7, #7]
    6254:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6258:	b2db      	uxtb	r3, r3
    625a:	021b      	lsls	r3, r3, #8
    625c:	60fb      	str	r3, [r7, #12]
        in = cc2400_spi_rev(16, out);
    625e:	2010      	movs	r0, #16
    6260:	68f9      	ldr	r1, [r7, #12]
    6262:	f7ff ffad 	bl	61c0 <cc2400_spi_rev>
    6266:	60b8      	str	r0, [r7, #8]
        return in & 0xFF;
    6268:	68bb      	ldr	r3, [r7, #8]
    626a:	b2db      	uxtb	r3, r3
}
    626c:	4618      	mov	r0, r3
    626e:	3710      	adds	r7, #16
    6270:	46bd      	mov	sp, r7
    6272:	bd80      	pop	{r7, pc}

00006274 <bt_stream_rx>:


/* Bluetooth packet monitoring */
// wpson
void bt_stream_rx()
{
    6274:	b580      	push	{r7, lr}
    6276:	b08e      	sub	sp, #56	; 0x38
    6278:	af00      	add	r7, sp, #0
	u8 epstat;
	u16 f;
	u8 i = 0;
    627a:	2300      	movs	r3, #0
    627c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	u8 buf[DMA_SIZE];

	queue_init();
    6280:	f002 f9ae 	bl	85e0 <queue_init>
	dio_ssp_init();
    6284:	f003 fb52 	bl	992c <dio_ssp_init>
	dma_init_le();
    6288:	f7ff fa4a 	bl	5720 <dma_init_le>
	dio_ssp_start();
    628c:	f7ff fbb2 	bl	59f4 <dio_ssp_start>


#ifdef UBERTOOTH_ONE
	PAEN_SET;
    6290:	4b57      	ldr	r3, [pc, #348]	; (63f0 <bt_stream_rx+0x17c>)
    6292:	2280      	movs	r2, #128	; 0x80
    6294:	601a      	str	r2, [r3, #0]
//	HGM_SET;
#endif
	cc2400_set(MANAND, 0x7fff);
    6296:	200d      	movs	r0, #13
    6298:	f647 71ff 	movw	r1, #32767	; 0x7fff
    629c:	f003 fc18 	bl	9ad0 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    62a0:	2012      	movs	r0, #18
    62a2:	f642 3122 	movw	r1, #11042	; 0x2b22
    62a6:	f003 fc13 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMTST0, 0x124b); // without PRNG
    62aa:	2014      	movs	r0, #20
    62ac:	f241 214b 	movw	r1, #4683	; 0x124b
    62b0:	f003 fc0e 	bl	9ad0 <cc2400_set>
	cc2400_set(GRMDM,   0x0561); // un-buffered mode, GFSK
    62b4:	2020      	movs	r0, #32
    62b6:	f240 5161 	movw	r1, #1377	; 0x561
    62ba:	f003 fc09 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0040); // 160 kHz frequency deviation
    62be:	2003      	movs	r0, #3
    62c0:	2140      	movs	r1, #64	; 0x40
    62c2:	f003 fc05 	bl	9ad0 <cc2400_set>
//	cc2400_set(SYNCH, 0xf9ae);
//	cc2400_set(SYNCL, 0x1584);
//	cc2400_set(SYNCH, 0x00ff);
//	cc2400_set(SYNCL, 0x00ff);
	
	cc2400_set(SYNCL,   rbit(0x8e89bed6) & 0xffff);
    62c6:	484b      	ldr	r0, [pc, #300]	; (63f4 <bt_stream_rx+0x180>)
    62c8:	f003 fa30 	bl	972c <rbit>
    62cc:	4603      	mov	r3, r0
    62ce:	b29b      	uxth	r3, r3
    62d0:	202c      	movs	r0, #44	; 0x2c
    62d2:	4619      	mov	r1, r3
    62d4:	f003 fbfc 	bl	9ad0 <cc2400_set>
	cc2400_set(SYNCH,   (rbit(0x8e89bed6) >> 16) & 0xffff);
    62d8:	4846      	ldr	r0, [pc, #280]	; (63f4 <bt_stream_rx+0x180>)
    62da:	f003 fa27 	bl	972c <rbit>
    62de:	4603      	mov	r3, r0
    62e0:	0c1b      	lsrs	r3, r3, #16
    62e2:	b29b      	uxth	r3, r3
    62e4:	202d      	movs	r0, #45	; 0x2d
    62e6:	4619      	mov	r1, r3
    62e8:	f003 fbf2 	bl	9ad0 <cc2400_set>
	
	while (!(cc2400_status() & XOSC16M_STABLE));
    62ec:	bf00      	nop
    62ee:	f003 fca7 	bl	9c40 <cc2400_status>
    62f2:	4603      	mov	r3, r0
    62f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    62f8:	2b00      	cmp	r3, #0
    62fa:	d0f8      	beq.n	62ee <bt_stream_rx+0x7a>
	while ((cc2400_status() & FS_LOCK));
    62fc:	bf00      	nop
    62fe:	f003 fc9f 	bl	9c40 <cc2400_status>
    6302:	4603      	mov	r3, r0
    6304:	f003 0304 	and.w	r3, r3, #4
    6308:	2b00      	cmp	r3, #0
    630a:	d1f8      	bne.n	62fe <bt_stream_rx+0x8a>

	cc2400_set(FSDIV, channel - 1);
    630c:	4b3a      	ldr	r3, [pc, #232]	; (63f8 <bt_stream_rx+0x184>)
    630e:	881b      	ldrh	r3, [r3, #0]
    6310:	b29b      	uxth	r3, r3
    6312:	3b01      	subs	r3, #1
    6314:	b29b      	uxth	r3, r3
    6316:	2002      	movs	r0, #2
    6318:	4619      	mov	r1, r3
    631a:	f003 fbd9 	bl	9ad0 <cc2400_set>
	cc2400_strobe(SFSON);
    631e:	2061      	movs	r0, #97	; 0x61
    6320:	f003 fc98 	bl	9c54 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    6324:	bf00      	nop
    6326:	f003 fc8b 	bl	9c40 <cc2400_status>
    632a:	4603      	mov	r3, r0
    632c:	f003 0304 	and.w	r3, r3, #4
    6330:	2b00      	cmp	r3, #0
    6332:	d0f8      	beq.n	6326 <bt_stream_rx+0xb2>
	cc2400_strobe(SRX);
    6334:	2062      	movs	r0, #98	; 0x62
    6336:	f003 fc8d 	bl	9c54 <cc2400_strobe>
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    633a:	e04d      	b.n	63d8 <bt_stream_rx+0x164>
		
		while (!(cc2400_status () & SYNC_RECEIVED));	
    633c:	bf00      	nop
    633e:	f003 fc7f 	bl	9c40 <cc2400_status>
    6342:	4603      	mov	r3, r0
    6344:	f003 0310 	and.w	r3, r3, #16
    6348:	2b00      	cmp	r3, #0
    634a:	d0f8      	beq.n	633e <bt_stream_rx+0xca>
		int i = 0;
    634c:	2300      	movs	r3, #0
    634e:	637b      	str	r3, [r7, #52]	; 0x34
//		while (!rx_tc)
		for (i = 0; i < 50; i++)
    6350:	2300      	movs	r3, #0
    6352:	637b      	str	r3, [r7, #52]	; 0x34
    6354:	e00c      	b.n	6370 <bt_stream_rx+0xfc>
		{
			buf[i] = cc2400_get_rev(FREQEST);
    6356:	2007      	movs	r0, #7
    6358:	f7ff ff76 	bl	6248 <cc2400_get_rev>
    635c:	4603      	mov	r3, r0
    635e:	4619      	mov	r1, r3
    6360:	463a      	mov	r2, r7
    6362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6364:	4413      	add	r3, r2
    6366:	460a      	mov	r2, r1
    6368:	701a      	strb	r2, [r3, #0]
	while (requested_mode == MODE_RX_SYMBOLS) {
		
		while (!(cc2400_status () & SYNC_RECEIVED));	
		int i = 0;
//		while (!rx_tc)
		for (i = 0; i < 50; i++)
    636a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    636c:	3301      	adds	r3, #1
    636e:	637b      	str	r3, [r7, #52]	; 0x34
    6370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    6372:	2b31      	cmp	r3, #49	; 0x31
    6374:	ddef      	ble.n	6356 <bt_stream_rx+0xe2>
		{
			buf[i] = cc2400_get_rev(FREQEST);
		}

		RXLED_SET;
    6376:	4b21      	ldr	r3, [pc, #132]	; (63fc <bt_stream_rx+0x188>)
    6378:	2210      	movs	r2, #16
    637a:	601a      	str	r2, [r3, #0]
                if (calc_crc != wire_crc) // skip packets with a bad CRC
                        goto rx_flush;
*/
//		if (p[39] == 0x3d && p[40] == 0x00)
		{
			enqueue(MESSAGE, buf);
    637c:	463b      	mov	r3, r7
    637e:	2002      	movs	r0, #2
    6380:	4619      	mov	r1, r3
    6382:	f7fe f8a1 	bl	44c8 <enqueue>
			handle_usb(clkn);
    6386:	4b1e      	ldr	r3, [pc, #120]	; (6400 <bt_stream_rx+0x18c>)
    6388:	681b      	ldr	r3, [r3, #0]
    638a:	4618      	mov	r0, r3
    638c:	f002 f9c8 	bl	8720 <handle_usb>
		}

		RXLED_CLR;
    6390:	4b1c      	ldr	r3, [pc, #112]	; (6404 <bt_stream_rx+0x190>)
    6392:	2210      	movs	r2, #16
    6394:	601a      	str	r2, [r3, #0]
	rx_flush:
	
	         
		cc2400_strobe (SRFOFF);
    6396:	2064      	movs	r0, #100	; 0x64
    6398:	f003 fc5c 	bl	9c54 <cc2400_strobe>
		while ((cc2400_status () & FS_LOCK));
    639c:	bf00      	nop
    639e:	f003 fc4f 	bl	9c40 <cc2400_status>
    63a2:	4603      	mov	r3, r0
    63a4:	f003 0304 	and.w	r3, r3, #4
    63a8:	2b00      	cmp	r3, #0
    63aa:	d1f8      	bne.n	639e <bt_stream_rx+0x12a>

		while (!(cc2400_status () & XOSC16M_STABLE));
    63ac:	bf00      	nop
    63ae:	f003 fc47 	bl	9c40 <cc2400_status>
    63b2:	4603      	mov	r3, r0
    63b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    63b8:	2b00      	cmp	r3, #0
    63ba:	d0f8      	beq.n	63ae <bt_stream_rx+0x13a>
		
		cc2400_strobe (SFSON);
    63bc:	2061      	movs	r0, #97	; 0x61
    63be:	f003 fc49 	bl	9c54 <cc2400_strobe>
		while (!(cc2400_status () & FS_LOCK));
    63c2:	bf00      	nop
    63c4:	f003 fc3c 	bl	9c40 <cc2400_status>
    63c8:	4603      	mov	r3, r0
    63ca:	f003 0304 	and.w	r3, r3, #4
    63ce:	2b00      	cmp	r3, #0
    63d0:	d0f8      	beq.n	63c4 <bt_stream_rx+0x150>
		}
		dma_init_le ();
		dio_ssp_start();
*/
//		msleep(500);	
		cc2400_strobe (SRX);
    63d2:	2062      	movs	r0, #98	; 0x62
    63d4:	f003 fc3e 	bl	9c54 <cc2400_strobe>
	cc2400_set(FSDIV, channel - 1);
	cc2400_strobe(SFSON);
	while (!(cc2400_status() & FS_LOCK));
	cc2400_strobe(SRX);
	
	while (requested_mode == MODE_RX_SYMBOLS) {
    63d8:	4b0b      	ldr	r3, [pc, #44]	; (6408 <bt_stream_rx+0x194>)
    63da:	781b      	ldrb	r3, [r3, #0]
    63dc:	b2db      	uxtb	r3, r3
    63de:	2b01      	cmp	r3, #1
    63e0:	d0ac      	beq.n	633c <bt_stream_rx+0xc8>
		cc2400_strobe (SRX);
//		rx_tc = 0;
//		rx_err = 0;

	}
	mode = MODE_IDLE;
    63e2:	4b0a      	ldr	r3, [pc, #40]	; (640c <bt_stream_rx+0x198>)
    63e4:	2200      	movs	r2, #0
    63e6:	701a      	strb	r2, [r3, #0]
}
    63e8:	3738      	adds	r7, #56	; 0x38
    63ea:	46bd      	mov	sp, r7
    63ec:	bd80      	pop	{r7, pc}
    63ee:	bf00      	nop
    63f0:	2009c058 	.word	0x2009c058
    63f4:	8e89bed6 	.word	0x8e89bed6
    63f8:	1000049c 	.word	0x1000049c
    63fc:	2009c038 	.word	0x2009c038
    6400:	10000be4 	.word	0x10000be4
    6404:	2009c03c 	.word	0x2009c03c
    6408:	10000a3f 	.word	0x10000a3f
    640c:	10000a3e 	.word	0x10000a3e

00006410 <le_set_access_address>:


/* set LE access address */
static void le_set_access_address(u32 aa) {
    6410:	b580      	push	{r7, lr}
    6412:	b084      	sub	sp, #16
    6414:	af00      	add	r7, sp, #0
    6416:	6078      	str	r0, [r7, #4]
	u32 aa_rev;

	le.access_address = aa;
    6418:	4a09      	ldr	r2, [pc, #36]	; (6440 <le_set_access_address+0x30>)
    641a:	687b      	ldr	r3, [r7, #4]
    641c:	6013      	str	r3, [r2, #0]
	aa_rev = rbit(aa);
    641e:	6878      	ldr	r0, [r7, #4]
    6420:	f003 f984 	bl	972c <rbit>
    6424:	60f8      	str	r0, [r7, #12]
	le.syncl = aa_rev & 0xffff;
    6426:	68fb      	ldr	r3, [r7, #12]
    6428:	b29a      	uxth	r2, r3
    642a:	4b05      	ldr	r3, [pc, #20]	; (6440 <le_set_access_address+0x30>)
    642c:	80da      	strh	r2, [r3, #6]
	le.synch = aa_rev >> 16;
    642e:	68fb      	ldr	r3, [r7, #12]
    6430:	0c1b      	lsrs	r3, r3, #16
    6432:	b29a      	uxth	r2, r3
    6434:	4b02      	ldr	r3, [pc, #8]	; (6440 <le_set_access_address+0x30>)
    6436:	809a      	strh	r2, [r3, #4]
}
    6438:	3710      	adds	r7, #16
    643a:	46bd      	mov	sp, r7
    643c:	bd80      	pop	{r7, pc}
    643e:	bf00      	nop
    6440:	10000458 	.word	0x10000458

00006444 <reset_le>:

/* reset le state, called by bt_generic_le and bt_follow_le() */
void reset_le() {
    6444:	b580      	push	{r7, lr}
    6446:	af00      	add	r7, sp, #0
	le_set_access_address(0x8e89bed6);     // advertising channel access address
    6448:	481f      	ldr	r0, [pc, #124]	; (64c8 <reset_le+0x84>)
    644a:	f7ff ffe1 	bl	6410 <le_set_access_address>
	le.crc_init  = 0x555555;	       // advertising channel CRCInit
    644e:	4b1f      	ldr	r3, [pc, #124]	; (64cc <reset_le+0x88>)
    6450:	4a1f      	ldr	r2, [pc, #124]	; (64d0 <reset_le+0x8c>)
    6452:	609a      	str	r2, [r3, #8]
	le.crc_init_reversed = 0xAAAAAA;
    6454:	4b1d      	ldr	r3, [pc, #116]	; (64cc <reset_le+0x88>)
    6456:	4a1f      	ldr	r2, [pc, #124]	; (64d4 <reset_le+0x90>)
    6458:	60da      	str	r2, [r3, #12]
	le.crc_verify = 1;
    645a:	4b1c      	ldr	r3, [pc, #112]	; (64cc <reset_le+0x88>)
    645c:	2201      	movs	r2, #1
    645e:	611a      	str	r2, [r3, #16]
	le.last_packet = 0;
    6460:	4b1a      	ldr	r3, [pc, #104]	; (64cc <reset_le+0x88>)
    6462:	2200      	movs	r2, #0
    6464:	641a      	str	r2, [r3, #64]	; 0x40

	le.link_state = LINK_INACTIVE;
    6466:	4b19      	ldr	r3, [pc, #100]	; (64cc <reset_le+0x88>)
    6468:	2200      	movs	r2, #0
    646a:	751a      	strb	r2, [r3, #20]

	le.channel_idx = 0;
    646c:	4b17      	ldr	r3, [pc, #92]	; (64cc <reset_le+0x88>)
    646e:	2200      	movs	r2, #0
    6470:	755a      	strb	r2, [r3, #21]
	le.channel_increment = 0;
    6472:	4b16      	ldr	r3, [pc, #88]	; (64cc <reset_le+0x88>)
    6474:	2200      	movs	r2, #0
    6476:	759a      	strb	r2, [r3, #22]

	le.conn_epoch = 0;
    6478:	4b14      	ldr	r3, [pc, #80]	; (64cc <reset_le+0x88>)
    647a:	2200      	movs	r2, #0
    647c:	619a      	str	r2, [r3, #24]
	le.interval_timer = 0;
    647e:	4b13      	ldr	r3, [pc, #76]	; (64cc <reset_le+0x88>)
    6480:	2200      	movs	r2, #0
    6482:	839a      	strh	r2, [r3, #28]
	le.conn_interval = 0;
    6484:	4b11      	ldr	r3, [pc, #68]	; (64cc <reset_le+0x88>)
    6486:	2200      	movs	r2, #0
    6488:	83da      	strh	r2, [r3, #30]
	le.conn_interval = 0;
    648a:	4b10      	ldr	r3, [pc, #64]	; (64cc <reset_le+0x88>)
    648c:	2200      	movs	r2, #0
    648e:	83da      	strh	r2, [r3, #30]
	le.conn_count = 0;
    6490:	4b0e      	ldr	r3, [pc, #56]	; (64cc <reset_le+0x88>)
    6492:	2200      	movs	r2, #0
    6494:	841a      	strh	r2, [r3, #32]

	le.win_size = 0;
    6496:	4b0d      	ldr	r3, [pc, #52]	; (64cc <reset_le+0x88>)
    6498:	2200      	movs	r2, #0
    649a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	le.win_offset = 0;
    649e:	4b0b      	ldr	r3, [pc, #44]	; (64cc <reset_le+0x88>)
    64a0:	2200      	movs	r2, #0
    64a2:	849a      	strh	r2, [r3, #36]	; 0x24

	le.update_pending = 0;
    64a4:	4b09      	ldr	r3, [pc, #36]	; (64cc <reset_le+0x88>)
    64a6:	2200      	movs	r2, #0
    64a8:	629a      	str	r2, [r3, #40]	; 0x28
	le.update_instant = 0;
    64aa:	4b08      	ldr	r3, [pc, #32]	; (64cc <reset_le+0x88>)
    64ac:	2200      	movs	r2, #0
    64ae:	859a      	strh	r2, [r3, #44]	; 0x2c
	le.interval_update = 0;
    64b0:	4b06      	ldr	r3, [pc, #24]	; (64cc <reset_le+0x88>)
    64b2:	2200      	movs	r2, #0
    64b4:	85da      	strh	r2, [r3, #46]	; 0x2e
	le.win_size_update = 0;
    64b6:	4b05      	ldr	r3, [pc, #20]	; (64cc <reset_le+0x88>)
    64b8:	2200      	movs	r2, #0
    64ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	le.win_offset_update;

	do_hop = 0;
    64be:	4b06      	ldr	r3, [pc, #24]	; (64d8 <reset_le+0x94>)
    64c0:	2200      	movs	r2, #0
    64c2:	701a      	strb	r2, [r3, #0]
}
    64c4:	bd80      	pop	{r7, pc}
    64c6:	bf00      	nop
    64c8:	8e89bed6 	.word	0x8e89bed6
    64cc:	10000458 	.word	0x10000458
    64d0:	00555555 	.word	0x00555555
    64d4:	00aaaaaa 	.word	0x00aaaaaa
    64d8:	1000097d 	.word	0x1000097d

000064dc <reset_le_promisc>:

// reset LE Promisc state
void reset_le_promisc(void) {
    64dc:	b580      	push	{r7, lr}
    64de:	af00      	add	r7, sp, #0
	memset(&le_promisc, 0, sizeof(le_promisc));
    64e0:	4805      	ldr	r0, [pc, #20]	; (64f8 <reset_le_promisc+0x1c>)
    64e2:	2100      	movs	r1, #0
    64e4:	f44f 7284 	mov.w	r2, #264	; 0x108
    64e8:	f7fd fe46 	bl	4178 <memset>
	le_promisc.smallest_hop_interval = 0xffffffff;
    64ec:	4b02      	ldr	r3, [pc, #8]	; (64f8 <reset_le_promisc+0x1c>)
    64ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    64f2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    64f6:	bd80      	pop	{r7, pc}
    64f8:	10000bec 	.word	0x10000bec

000064fc <bt_generic_le>:

/* generic le mode */
void bt_generic_le(u8 active_mode)
{
    64fc:	b580      	push	{r7, lr}
    64fe:	b088      	sub	sp, #32
    6500:	af00      	add	r7, sp, #0
    6502:	4603      	mov	r3, r0
    6504:	71fb      	strb	r3, [r7, #7]
	u8 *tmp = NULL;
    6506:	2300      	movs	r3, #0
    6508:	60fb      	str	r3, [r7, #12]
	u8 hold;
	int i, j;
	int8_t rssi, rssi_at_trigger;

	modulation = MOD_BT_LOW_ENERGY;
    650a:	4ba4      	ldr	r3, [pc, #656]	; (679c <bt_generic_le+0x2a0>)
    650c:	2201      	movs	r2, #1
    650e:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    6510:	4aa3      	ldr	r2, [pc, #652]	; (67a0 <bt_generic_le+0x2a4>)
    6512:	79fb      	ldrb	r3, [r7, #7]
    6514:	7013      	strb	r3, [r2, #0]

	reset_le();
    6516:	f7ff ff95 	bl	6444 <reset_le>

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    651a:	4ba2      	ldr	r3, [pc, #648]	; (67a4 <bt_generic_le+0x2a8>)
    651c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6520:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    6522:	4ba1      	ldr	r3, [pc, #644]	; (67a8 <bt_generic_le+0x2ac>)
    6524:	2210      	movs	r2, #16
    6526:	601a      	str	r2, [r3, #0]

	queue_init();
    6528:	f002 f85a 	bl	85e0 <queue_init>
	dio_ssp_init();
    652c:	f003 f9fe 	bl	992c <dio_ssp_init>
	dma_init();
    6530:	f7ff f836 	bl	55a0 <dma_init>
	dio_ssp_start();
    6534:	f7ff fa5e 	bl	59f4 <dio_ssp_start>
	cc2400_rx();
    6538:	f7ff fb18 	bl	5b6c <cc2400_rx>

	cs_trigger_enable();
    653c:	f7fe f962 	bl	4804 <cs_trigger_enable>

	hold = 0;
    6540:	2300      	movs	r3, #0
    6542:	77fb      	strb	r3, [r7, #31]

	while (requested_mode == active_mode) {
    6544:	e115      	b.n	6772 <bt_generic_le+0x276>
		if (requested_channel != 0) {
    6546:	4b99      	ldr	r3, [pc, #612]	; (67ac <bt_generic_le+0x2b0>)
    6548:	881b      	ldrh	r3, [r3, #0]
    654a:	b29b      	uxth	r3, r3
    654c:	2b00      	cmp	r3, #0
    654e:	d024      	beq.n	659a <bt_generic_le+0x9e>
			cc2400_strobe(SRFOFF);
    6550:	2064      	movs	r0, #100	; 0x64
    6552:	f003 fb7f 	bl	9c54 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    6556:	bf00      	nop
    6558:	f003 fb72 	bl	9c40 <cc2400_status>
    655c:	4603      	mov	r3, r0
    655e:	f003 0304 	and.w	r3, r3, #4
    6562:	2b00      	cmp	r3, #0
    6564:	d1f8      	bne.n	6558 <bt_generic_le+0x5c>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    6566:	4b92      	ldr	r3, [pc, #584]	; (67b0 <bt_generic_le+0x2b4>)
    6568:	881b      	ldrh	r3, [r3, #0]
    656a:	b29b      	uxth	r3, r3
    656c:	3b01      	subs	r3, #1
    656e:	b29b      	uxth	r3, r3
    6570:	2002      	movs	r0, #2
    6572:	4619      	mov	r1, r3
    6574:	f003 faac 	bl	9ad0 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    6578:	2061      	movs	r0, #97	; 0x61
    657a:	f003 fb6b 	bl	9c54 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    657e:	bf00      	nop
    6580:	f003 fb5e 	bl	9c40 <cc2400_status>
    6584:	4603      	mov	r3, r0
    6586:	f003 0304 	and.w	r3, r3, #4
    658a:	2b00      	cmp	r3, #0
    658c:	d0f8      	beq.n	6580 <bt_generic_le+0x84>

			/* RX mode */
			cc2400_strobe(SRX);
    658e:	2062      	movs	r0, #98	; 0x62
    6590:	f003 fb60 	bl	9c54 <cc2400_strobe>

			requested_channel = 0;
    6594:	4b85      	ldr	r3, [pc, #532]	; (67ac <bt_generic_le+0x2b0>)
    6596:	2200      	movs	r2, #0
    6598:	801a      	strh	r2, [r3, #0]
		}

		if (do_hop) {
    659a:	4b86      	ldr	r3, [pc, #536]	; (67b4 <bt_generic_le+0x2b8>)
    659c:	781b      	ldrb	r3, [r3, #0]
    659e:	b2db      	uxtb	r3, r3
    65a0:	2b00      	cmp	r3, #0
    65a2:	d002      	beq.n	65aa <bt_generic_le+0xae>
			hop();
    65a4:	f7ff fd78 	bl	6098 <hop>
    65a8:	e003      	b.n	65b2 <bt_generic_le+0xb6>
		} else {
			TXLED_CLR;
    65aa:	4b7f      	ldr	r3, [pc, #508]	; (67a8 <bt_generic_le+0x2ac>)
    65ac:	f44f 7280 	mov.w	r2, #256	; 0x100
    65b0:	601a      	str	r2, [r3, #0]
		}

		RXLED_CLR;
    65b2:	4b7d      	ldr	r3, [pc, #500]	; (67a8 <bt_generic_le+0x2ac>)
    65b4:	2210      	movs	r2, #16
    65b6:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    65b8:	f7fd fea4 	bl	4304 <rssi_reset>
		rssi_at_trigger = INT8_MIN;
    65bc:	2380      	movs	r3, #128	; 0x80
    65be:	74bb      	strb	r3, [r7, #18]
		while ((rx_tc == 0) && (rx_err == 0))
    65c0:	e022      	b.n	6608 <bt_generic_le+0x10c>
		{
			rssi = (int8_t)(cc2400_get(RSSI) >> 8);
    65c2:	2006      	movs	r0, #6
    65c4:	f003 fa6e 	bl	9aa4 <cc2400_get>
    65c8:	4603      	mov	r3, r0
    65ca:	0a1b      	lsrs	r3, r3, #8
    65cc:	b29b      	uxth	r3, r3
    65ce:	74fb      	strb	r3, [r7, #19]
			if (cs_trigger && (rssi_at_trigger == INT8_MIN)) {
    65d0:	4b79      	ldr	r3, [pc, #484]	; (67b8 <bt_generic_le+0x2bc>)
    65d2:	781b      	ldrb	r3, [r3, #0]
    65d4:	b2db      	uxtb	r3, r3
    65d6:	2b00      	cmp	r3, #0
    65d8:	d011      	beq.n	65fe <bt_generic_le+0x102>
    65da:	f997 3012 	ldrsb.w	r3, [r7, #18]
    65de:	f113 0f80 	cmn.w	r3, #128	; 0x80
    65e2:	d10c      	bne.n	65fe <bt_generic_le+0x102>
				rssi = MAX(rssi,(cs_threshold_cur+54));
    65e4:	4b75      	ldr	r3, [pc, #468]	; (67bc <bt_generic_le+0x2c0>)
    65e6:	781b      	ldrb	r3, [r3, #0]
    65e8:	b25b      	sxtb	r3, r3
    65ea:	f103 0236 	add.w	r2, r3, #54	; 0x36
    65ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
    65f2:	4293      	cmp	r3, r2
    65f4:	bfb8      	it	lt
    65f6:	4613      	movlt	r3, r2
    65f8:	74fb      	strb	r3, [r7, #19]
				rssi_at_trigger = rssi;
    65fa:	7cfb      	ldrb	r3, [r7, #19]
    65fc:	74bb      	strb	r3, [r7, #18]
			}
			rssi_add(rssi);
    65fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
    6602:	4618      	mov	r0, r3
    6604:	f7fd fe98 	bl	4338 <rssi_add>
		RXLED_CLR;

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
		rssi_at_trigger = INT8_MIN;
		while ((rx_tc == 0) && (rx_err == 0))
    6608:	4b6d      	ldr	r3, [pc, #436]	; (67c0 <bt_generic_le+0x2c4>)
    660a:	681b      	ldr	r3, [r3, #0]
    660c:	2b00      	cmp	r3, #0
    660e:	d103      	bne.n	6618 <bt_generic_le+0x11c>
    6610:	4b6c      	ldr	r3, [pc, #432]	; (67c4 <bt_generic_le+0x2c8>)
    6612:	681b      	ldr	r3, [r3, #0]
    6614:	2b00      	cmp	r3, #0
    6616:	d0d4      	beq.n	65c2 <bt_generic_le+0xc6>
			}
			rssi_add(rssi);
		}

		/* Keep buffer swapping in sync with DMA. */
		if (rx_tc % 2) {
    6618:	4b69      	ldr	r3, [pc, #420]	; (67c0 <bt_generic_le+0x2c4>)
    661a:	681b      	ldr	r3, [r3, #0]
    661c:	f003 0301 	and.w	r3, r3, #1
    6620:	2b00      	cmp	r3, #0
    6622:	d009      	beq.n	6638 <bt_generic_le+0x13c>
			tmp = active_rxbuf;
    6624:	4b68      	ldr	r3, [pc, #416]	; (67c8 <bt_generic_le+0x2cc>)
    6626:	681b      	ldr	r3, [r3, #0]
    6628:	60fb      	str	r3, [r7, #12]
			active_rxbuf = idle_rxbuf;
    662a:	4b68      	ldr	r3, [pc, #416]	; (67cc <bt_generic_le+0x2d0>)
    662c:	681b      	ldr	r3, [r3, #0]
    662e:	4a66      	ldr	r2, [pc, #408]	; (67c8 <bt_generic_le+0x2cc>)
    6630:	6013      	str	r3, [r2, #0]
			idle_rxbuf = tmp;
    6632:	4a66      	ldr	r2, [pc, #408]	; (67cc <bt_generic_le+0x2d0>)
    6634:	68fb      	ldr	r3, [r7, #12]
    6636:	6013      	str	r3, [r2, #0]
		}

		if (rx_err) {
    6638:	4b62      	ldr	r3, [pc, #392]	; (67c4 <bt_generic_le+0x2c8>)
    663a:	681b      	ldr	r3, [r3, #0]
    663c:	2b00      	cmp	r3, #0
    663e:	d007      	beq.n	6650 <bt_generic_le+0x154>
			status |= DMA_ERROR;
    6640:	4b63      	ldr	r3, [pc, #396]	; (67d0 <bt_generic_le+0x2d4>)
    6642:	781b      	ldrb	r3, [r3, #0]
    6644:	b2db      	uxtb	r3, r3
    6646:	f043 0302 	orr.w	r3, r3, #2
    664a:	b2da      	uxtb	r2, r3
    664c:	4b60      	ldr	r3, [pc, #384]	; (67d0 <bt_generic_le+0x2d4>)
    664e:	701a      	strb	r2, [r3, #0]
		}

		/* No DMA transfer? */
		if (!rx_tc)
    6650:	4b5b      	ldr	r3, [pc, #364]	; (67c0 <bt_generic_le+0x2c4>)
    6652:	681b      	ldr	r3, [r3, #0]
    6654:	2b00      	cmp	r3, #0
    6656:	d100      	bne.n	665a <bt_generic_le+0x15e>
			goto rx_continue;
    6658:	e085      	b.n	6766 <bt_generic_le+0x26a>

		/* Missed a DMA trasfer? */
		if (rx_tc > 1)
    665a:	4b59      	ldr	r3, [pc, #356]	; (67c0 <bt_generic_le+0x2c4>)
    665c:	681b      	ldr	r3, [r3, #0]
    665e:	2b01      	cmp	r3, #1
    6660:	d907      	bls.n	6672 <bt_generic_le+0x176>
			status |= DMA_OVERFLOW;
    6662:	4b5b      	ldr	r3, [pc, #364]	; (67d0 <bt_generic_le+0x2d4>)
    6664:	781b      	ldrb	r3, [r3, #0]
    6666:	b2db      	uxtb	r3, r3
    6668:	f043 0301 	orr.w	r3, r3, #1
    666c:	b2da      	uxtb	r2, r3
    666e:	4b58      	ldr	r3, [pc, #352]	; (67d0 <bt_generic_le+0x2d4>)
    6670:	701a      	strb	r2, [r3, #0]

		rssi_iir_update();
    6672:	f7fd fe97 	bl	43a4 <rssi_iir_update>

		/* Set squelch hold if there was either a CS trigger, squelch
		 * is disabled, or if the current rssi_max is above the same
		 * threshold. Currently, this is redundant, but allows for
		 * per-channel or other rssi triggers in the future. */
		if (cs_trigger || cs_no_squelch) {
    6676:	4b50      	ldr	r3, [pc, #320]	; (67b8 <bt_generic_le+0x2bc>)
    6678:	781b      	ldrb	r3, [r3, #0]
    667a:	b2db      	uxtb	r3, r3
    667c:	2b00      	cmp	r3, #0
    667e:	d103      	bne.n	6688 <bt_generic_le+0x18c>
    6680:	4b54      	ldr	r3, [pc, #336]	; (67d4 <bt_generic_le+0x2d8>)
    6682:	781b      	ldrb	r3, [r3, #0]
    6684:	2b00      	cmp	r3, #0
    6686:	d00c      	beq.n	66a2 <bt_generic_le+0x1a6>
			status |= CS_TRIGGER;
    6688:	4b51      	ldr	r3, [pc, #324]	; (67d0 <bt_generic_le+0x2d4>)
    668a:	781b      	ldrb	r3, [r3, #0]
    668c:	b2db      	uxtb	r3, r3
    668e:	f043 0308 	orr.w	r3, r3, #8
    6692:	b2da      	uxtb	r2, r3
    6694:	4b4e      	ldr	r3, [pc, #312]	; (67d0 <bt_generic_le+0x2d4>)
    6696:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    6698:	2302      	movs	r3, #2
    669a:	77fb      	strb	r3, [r7, #31]
			cs_trigger = 0;
    669c:	4b46      	ldr	r3, [pc, #280]	; (67b8 <bt_generic_le+0x2bc>)
    669e:	2200      	movs	r2, #0
    66a0:	701a      	strb	r2, [r3, #0]
		}

		if (rssi_max >= (cs_threshold_cur + 54)) {
    66a2:	4b4d      	ldr	r3, [pc, #308]	; (67d8 <bt_generic_le+0x2dc>)
    66a4:	781b      	ldrb	r3, [r3, #0]
    66a6:	b25a      	sxtb	r2, r3
    66a8:	4b44      	ldr	r3, [pc, #272]	; (67bc <bt_generic_le+0x2c0>)
    66aa:	781b      	ldrb	r3, [r3, #0]
    66ac:	b25b      	sxtb	r3, r3
    66ae:	3336      	adds	r3, #54	; 0x36
    66b0:	429a      	cmp	r2, r3
    66b2:	db09      	blt.n	66c8 <bt_generic_le+0x1cc>
			status |= RSSI_TRIGGER;
    66b4:	4b46      	ldr	r3, [pc, #280]	; (67d0 <bt_generic_le+0x2d4>)
    66b6:	781b      	ldrb	r3, [r3, #0]
    66b8:	b2db      	uxtb	r3, r3
    66ba:	f043 0310 	orr.w	r3, r3, #16
    66be:	b2da      	uxtb	r2, r3
    66c0:	4b43      	ldr	r3, [pc, #268]	; (67d0 <bt_generic_le+0x2d4>)
    66c2:	701a      	strb	r2, [r3, #0]
			hold = CS_HOLD_TIME;
    66c4:	2302      	movs	r3, #2
    66c6:	77fb      	strb	r3, [r7, #31]
		}

		/* Send a packet once in a while (6.25 Hz) to keep
		 * host USB reads from timing out. */
		if (keepalive_trigger) {
    66c8:	4b44      	ldr	r3, [pc, #272]	; (67dc <bt_generic_le+0x2e0>)
    66ca:	781b      	ldrb	r3, [r3, #0]
    66cc:	b2db      	uxtb	r3, r3
    66ce:	2b00      	cmp	r3, #0
    66d0:	d007      	beq.n	66e2 <bt_generic_le+0x1e6>
			if (hold == 0)
    66d2:	7ffb      	ldrb	r3, [r7, #31]
    66d4:	2b00      	cmp	r3, #0
    66d6:	d101      	bne.n	66dc <bt_generic_le+0x1e0>
				hold = 1;
    66d8:	2301      	movs	r3, #1
    66da:	77fb      	strb	r3, [r7, #31]
			keepalive_trigger = 0;
    66dc:	4b3f      	ldr	r3, [pc, #252]	; (67dc <bt_generic_le+0x2e0>)
    66de:	2200      	movs	r2, #0
    66e0:	701a      	strb	r2, [r3, #0]
		}

		/* Hold expired? Ignore data. */
		if (hold == 0) {
    66e2:	7ffb      	ldrb	r3, [r7, #31]
    66e4:	2b00      	cmp	r3, #0
    66e6:	d100      	bne.n	66ea <bt_generic_le+0x1ee>
			goto rx_continue;
    66e8:	e03d      	b.n	6766 <bt_generic_le+0x26a>
		}
		hold--;
    66ea:	7ffb      	ldrb	r3, [r7, #31]
    66ec:	3b01      	subs	r3, #1
    66ee:	77fb      	strb	r3, [r7, #31]

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);
    66f0:	483b      	ldr	r0, [pc, #236]	; (67e0 <bt_generic_le+0x2e4>)
    66f2:	493c      	ldr	r1, [pc, #240]	; (67e4 <bt_generic_le+0x2e8>)
    66f4:	f44f 72c8 	mov.w	r2, #400	; 0x190
    66f8:	f004 ffbe 	bl	b678 <memcpy>

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    66fc:	2300      	movs	r3, #0
    66fe:	61bb      	str	r3, [r7, #24]
    6700:	e025      	b.n	674e <bt_generic_le+0x252>
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    6702:	2300      	movs	r3, #0
    6704:	617b      	str	r3, [r7, #20]
    6706:	e01c      	b.n	6742 <bt_generic_le+0x246>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
    6708:	69bb      	ldr	r3, [r7, #24]
    670a:	3332      	adds	r3, #50	; 0x32
    670c:	00da      	lsls	r2, r3, #3
    670e:	697b      	ldr	r3, [r7, #20]
    6710:	4413      	add	r3, r2
    6712:	4a2e      	ldr	r2, [pc, #184]	; (67cc <bt_generic_le+0x2d0>)
    6714:	6811      	ldr	r1, [r2, #0]
    6716:	69ba      	ldr	r2, [r7, #24]
    6718:	440a      	add	r2, r1
    671a:	7812      	ldrb	r2, [r2, #0]
    671c:	09d2      	lsrs	r2, r2, #7
    671e:	b2d1      	uxtb	r1, r2
    6720:	4a2f      	ldr	r2, [pc, #188]	; (67e0 <bt_generic_le+0x2e4>)
    6722:	54d1      	strb	r1, [r2, r3]
				idle_rxbuf[i] <<= 1;
    6724:	4b29      	ldr	r3, [pc, #164]	; (67cc <bt_generic_le+0x2d0>)
    6726:	681a      	ldr	r2, [r3, #0]
    6728:	69bb      	ldr	r3, [r7, #24]
    672a:	4413      	add	r3, r2
    672c:	4a27      	ldr	r2, [pc, #156]	; (67cc <bt_generic_le+0x2d0>)
    672e:	6811      	ldr	r1, [r2, #0]
    6730:	69ba      	ldr	r2, [r7, #24]
    6732:	440a      	add	r2, r1
    6734:	7812      	ldrb	r2, [r2, #0]
    6736:	0052      	lsls	r2, r2, #1
    6738:	b2d2      	uxtb	r2, r2
    673a:	701a      	strb	r2, [r3, #0]
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
			/* output one byte for each received symbol (0x00 or 0x01) */
			for (j = 0; j < 8; ++j) {
    673c:	697b      	ldr	r3, [r7, #20]
    673e:	3301      	adds	r3, #1
    6740:	617b      	str	r3, [r7, #20]
    6742:	697b      	ldr	r3, [r7, #20]
    6744:	2b07      	cmp	r3, #7
    6746:	dddf      	ble.n	6708 <bt_generic_le+0x20c>

		// copy the previously unpacked symbols to the front of the buffer
		memcpy(unpacked, unpacked + DMA_SIZE*8, DMA_SIZE*8);

		// unpack the new packet to the end of the buffer
		for (i = 0; i < DMA_SIZE; ++i) {
    6748:	69bb      	ldr	r3, [r7, #24]
    674a:	3301      	adds	r3, #1
    674c:	61bb      	str	r3, [r7, #24]
    674e:	69bb      	ldr	r3, [r7, #24]
    6750:	2b31      	cmp	r3, #49	; 0x31
    6752:	ddd6      	ble.n	6702 <bt_generic_le+0x206>
				unpacked[DMA_SIZE*8 + i * 8 + j] = (idle_rxbuf[i] & 0x80) >> 7;
				idle_rxbuf[i] <<= 1;
			}
		}

		int ret = data_cb(unpacked);
    6754:	4b24      	ldr	r3, [pc, #144]	; (67e8 <bt_generic_le+0x2ec>)
    6756:	681b      	ldr	r3, [r3, #0]
    6758:	4821      	ldr	r0, [pc, #132]	; (67e0 <bt_generic_le+0x2e4>)
    675a:	4798      	blx	r3
    675c:	60b8      	str	r0, [r7, #8]
		if (!ret) break;
    675e:	68bb      	ldr	r3, [r7, #8]
    6760:	2b00      	cmp	r3, #0
    6762:	d100      	bne.n	6766 <bt_generic_le+0x26a>
    6764:	e00c      	b.n	6780 <bt_generic_le+0x284>

	rx_continue:
		rx_tc = 0;
    6766:	4b16      	ldr	r3, [pc, #88]	; (67c0 <bt_generic_le+0x2c4>)
    6768:	2200      	movs	r2, #0
    676a:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    676c:	4b15      	ldr	r3, [pc, #84]	; (67c4 <bt_generic_le+0x2c8>)
    676e:	2200      	movs	r2, #0
    6770:	601a      	str	r2, [r3, #0]

	cs_trigger_enable();

	hold = 0;

	while (requested_mode == active_mode) {
    6772:	4b1e      	ldr	r3, [pc, #120]	; (67ec <bt_generic_le+0x2f0>)
    6774:	781b      	ldrb	r3, [r3, #0]
    6776:	b2db      	uxtb	r3, r3
    6778:	79fa      	ldrb	r2, [r7, #7]
    677a:	429a      	cmp	r2, r3
    677c:	f43f aee3 	beq.w	6546 <bt_generic_le+0x4a>
		rx_tc = 0;
		rx_err = 0;
	}

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6780:	4b1b      	ldr	r3, [pc, #108]	; (67f0 <bt_generic_le+0x2f4>)
    6782:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6786:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    6788:	f7ff f9c8 	bl	5b1c <cc2400_idle>
	dio_ssp_stop();
    678c:	f7ff f962 	bl	5a54 <dio_ssp_stop>
	cs_trigger_disable();
    6790:	f7fe f856 	bl	4840 <cs_trigger_disable>
}
    6794:	3720      	adds	r7, #32
    6796:	46bd      	mov	sp, r7
    6798:	bd80      	pop	{r7, pc}
    679a:	bf00      	nop
    679c:	10000a42 	.word	0x10000a42
    67a0:	10000a3e 	.word	0x10000a3e
    67a4:	e000e100 	.word	0xe000e100
    67a8:	2009c03c 	.word	0x2009c03c
    67ac:	10000a44 	.word	0x10000a44
    67b0:	1000049c 	.word	0x1000049c
    67b4:	1000097d 	.word	0x1000097d
    67b8:	100010b8 	.word	0x100010b8
    67bc:	1000044d 	.word	0x1000044d
    67c0:	10000b00 	.word	0x10000b00
    67c4:	100010b4 	.word	0x100010b4
    67c8:	10000450 	.word	0x10000450
    67cc:	10000454 	.word	0x10000454
    67d0:	10000a48 	.word	0x10000a48
    67d4:	1000097e 	.word	0x1000097e
    67d8:	10000b04 	.word	0x10000b04
    67dc:	10000be0 	.word	0x10000be0
    67e0:	10000d00 	.word	0x10000d00
    67e4:	10000e90 	.word	0x10000e90
    67e8:	10000998 	.word	0x10000998
    67ec:	10000a3f 	.word	0x10000a3f
    67f0:	e000e180 	.word	0xe000e180

000067f4 <bt_le_sync>:


void bt_le_sync(u8 active_mode)
{
    67f4:	b590      	push	{r4, r7, lr}
    67f6:	b09b      	sub	sp, #108	; 0x6c
    67f8:	af00      	add	r7, sp, #0
    67fa:	4603      	mov	r3, r0
    67fc:	71fb      	strb	r3, [r7, #7]
	int i;
	int8_t rssi;
	static int restart_jamming = 0;

	modulation = MOD_BT_LOW_ENERGY;
    67fe:	4b87      	ldr	r3, [pc, #540]	; (6a1c <bt_le_sync+0x228>)
    6800:	2201      	movs	r2, #1
    6802:	701a      	strb	r2, [r3, #0]
	mode = active_mode;
    6804:	4a86      	ldr	r2, [pc, #536]	; (6a20 <bt_le_sync+0x22c>)
    6806:	79fb      	ldrb	r3, [r7, #7]
    6808:	7013      	strb	r3, [r2, #0]

	le.link_state = LINK_LISTENING;
    680a:	4b86      	ldr	r3, [pc, #536]	; (6a24 <bt_le_sync+0x230>)
    680c:	2201      	movs	r2, #1
    680e:	751a      	strb	r2, [r3, #20]

	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    6810:	4b85      	ldr	r3, [pc, #532]	; (6a28 <bt_le_sync+0x234>)
    6812:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6816:	601a      	str	r2, [r3, #0]

	RXLED_CLR;
    6818:	4b84      	ldr	r3, [pc, #528]	; (6a2c <bt_le_sync+0x238>)
    681a:	2210      	movs	r2, #16
    681c:	601a      	str	r2, [r3, #0]

	queue_init();
    681e:	f001 fedf 	bl	85e0 <queue_init>
	dio_ssp_init();
    6822:	f003 f883 	bl	992c <dio_ssp_init>
	dma_init_le();
    6826:	f7fe ff7b 	bl	5720 <dma_init_le>
	dio_ssp_start();
    682a:	f7ff f8e3 	bl	59f4 <dio_ssp_start>

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address
    682e:	4b7d      	ldr	r3, [pc, #500]	; (6a24 <bt_le_sync+0x230>)
    6830:	681b      	ldr	r3, [r3, #0]
    6832:	4618      	mov	r0, r3
    6834:	f002 ff7a 	bl	972c <rbit>
    6838:	4603      	mov	r3, r0
    683a:	4618      	mov	r0, r3
    683c:	f7ff f9f4 	bl	5c28 <cc2400_rx_sync>

	while (requested_mode == active_mode) {
    6840:	e247      	b.n	6cd2 <bt_le_sync+0x4de>
		if (requested_channel != 0) {
    6842:	4b7b      	ldr	r3, [pc, #492]	; (6a30 <bt_le_sync+0x23c>)
    6844:	881b      	ldrh	r3, [r3, #0]
    6846:	b29b      	uxth	r3, r3
    6848:	2b00      	cmp	r3, #0
    684a:	d029      	beq.n	68a0 <bt_le_sync+0xac>
			cc2400_strobe(SRFOFF);
    684c:	2064      	movs	r0, #100	; 0x64
    684e:	f003 fa01 	bl	9c54 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK)); // need to wait for unlock?
    6852:	bf00      	nop
    6854:	f003 f9f4 	bl	9c40 <cc2400_status>
    6858:	4603      	mov	r3, r0
    685a:	f003 0304 	and.w	r3, r3, #4
    685e:	2b00      	cmp	r3, #0
    6860:	d1f8      	bne.n	6854 <bt_le_sync+0x60>

			/* Retune */
			cc2400_set(FSDIV, channel - 1);
    6862:	4b74      	ldr	r3, [pc, #464]	; (6a34 <bt_le_sync+0x240>)
    6864:	881b      	ldrh	r3, [r3, #0]
    6866:	b29b      	uxth	r3, r3
    6868:	3b01      	subs	r3, #1
    686a:	b29b      	uxth	r3, r3
    686c:	2002      	movs	r0, #2
    686e:	4619      	mov	r1, r3
    6870:	f003 f92e 	bl	9ad0 <cc2400_set>

			/* Wait for lock */
			cc2400_strobe(SFSON);
    6874:	2061      	movs	r0, #97	; 0x61
    6876:	f003 f9ed 	bl	9c54 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    687a:	bf00      	nop
    687c:	f003 f9e0 	bl	9c40 <cc2400_status>
    6880:	4603      	mov	r3, r0
    6882:	f003 0304 	and.w	r3, r3, #4
    6886:	2b00      	cmp	r3, #0
    6888:	d0f8      	beq.n	687c <bt_le_sync+0x88>

			/* RX mode */
			cc2400_strobe(SRX);
    688a:	2062      	movs	r0, #98	; 0x62
    688c:	f003 f9e2 	bl	9c54 <cc2400_strobe>

			saved_request = requested_channel;
    6890:	4b67      	ldr	r3, [pc, #412]	; (6a30 <bt_le_sync+0x23c>)
    6892:	881b      	ldrh	r3, [r3, #0]
    6894:	b29a      	uxth	r2, r3
    6896:	4b68      	ldr	r3, [pc, #416]	; (6a38 <bt_le_sync+0x244>)
    6898:	801a      	strh	r2, [r3, #0]
			requested_channel = 0;
    689a:	4b65      	ldr	r3, [pc, #404]	; (6a30 <bt_le_sync+0x23c>)
    689c:	2200      	movs	r2, #0
    689e:	801a      	strh	r2, [r3, #0]
		}

		RXLED_CLR;
    68a0:	4b62      	ldr	r3, [pc, #392]	; (6a2c <bt_le_sync+0x238>)
    68a2:	2210      	movs	r2, #16
    68a4:	601a      	str	r2, [r3, #0]

		/* Wait for DMA. Meanwhile keep track of RSSI. */
		rssi_reset();
    68a6:	f7fd fd2d 	bl	4304 <rssi_reset>
		while ((rx_tc == 0) && (rx_err == 0) && (do_hop == 0) && requested_mode == active_mode)
    68aa:	bf00      	nop
    68ac:	4b63      	ldr	r3, [pc, #396]	; (6a3c <bt_le_sync+0x248>)
    68ae:	681b      	ldr	r3, [r3, #0]
    68b0:	2b00      	cmp	r3, #0
    68b2:	d10e      	bne.n	68d2 <bt_le_sync+0xde>
    68b4:	4b62      	ldr	r3, [pc, #392]	; (6a40 <bt_le_sync+0x24c>)
    68b6:	681b      	ldr	r3, [r3, #0]
    68b8:	2b00      	cmp	r3, #0
    68ba:	d10a      	bne.n	68d2 <bt_le_sync+0xde>
    68bc:	4b61      	ldr	r3, [pc, #388]	; (6a44 <bt_le_sync+0x250>)
    68be:	781b      	ldrb	r3, [r3, #0]
    68c0:	b2db      	uxtb	r3, r3
    68c2:	2b00      	cmp	r3, #0
    68c4:	d105      	bne.n	68d2 <bt_le_sync+0xde>
    68c6:	4b60      	ldr	r3, [pc, #384]	; (6a48 <bt_le_sync+0x254>)
    68c8:	781b      	ldrb	r3, [r3, #0]
    68ca:	b2db      	uxtb	r3, r3
    68cc:	79fa      	ldrb	r2, [r7, #7]
    68ce:	429a      	cmp	r2, r3
    68d0:	d0ec      	beq.n	68ac <bt_le_sync+0xb8>
			;

		if (requested_mode != active_mode) {
    68d2:	4b5d      	ldr	r3, [pc, #372]	; (6a48 <bt_le_sync+0x254>)
    68d4:	781b      	ldrb	r3, [r3, #0]
    68d6:	b2db      	uxtb	r3, r3
    68d8:	79fa      	ldrb	r2, [r7, #7]
    68da:	429a      	cmp	r2, r3
    68dc:	d000      	beq.n	68e0 <bt_le_sync+0xec>
			goto cleanup;
    68de:	e1ff      	b.n	6ce0 <bt_le_sync+0x4ec>
		}

		if (rx_err) {
    68e0:	4b57      	ldr	r3, [pc, #348]	; (6a40 <bt_le_sync+0x24c>)
    68e2:	681b      	ldr	r3, [r3, #0]
    68e4:	2b00      	cmp	r3, #0
    68e6:	d007      	beq.n	68f8 <bt_le_sync+0x104>
			status |= DMA_ERROR;
    68e8:	4b58      	ldr	r3, [pc, #352]	; (6a4c <bt_le_sync+0x258>)
    68ea:	781b      	ldrb	r3, [r3, #0]
    68ec:	b2db      	uxtb	r3, r3
    68ee:	f043 0302 	orr.w	r3, r3, #2
    68f2:	b2da      	uxtb	r2, r3
    68f4:	4b55      	ldr	r3, [pc, #340]	; (6a4c <bt_le_sync+0x258>)
    68f6:	701a      	strb	r2, [r3, #0]
		}

		if (do_hop)
    68f8:	4b52      	ldr	r3, [pc, #328]	; (6a44 <bt_le_sync+0x250>)
    68fa:	781b      	ldrb	r3, [r3, #0]
    68fc:	b2db      	uxtb	r3, r3
    68fe:	2b00      	cmp	r3, #0
    6900:	d000      	beq.n	6904 <bt_le_sync+0x110>
			goto rx_flush;
    6902:	e12b      	b.n	6b5c <bt_le_sync+0x368>

		/* No DMA transfer? */
		if (!rx_tc)
    6904:	4b4d      	ldr	r3, [pc, #308]	; (6a3c <bt_le_sync+0x248>)
    6906:	681b      	ldr	r3, [r3, #0]
    6908:	2b00      	cmp	r3, #0
    690a:	d100      	bne.n	690e <bt_le_sync+0x11a>
    690c:	e1e1      	b.n	6cd2 <bt_le_sync+0x4de>

		/////////////////////
		// process the packet

		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
    690e:	f107 0308 	add.w	r3, r7, #8
    6912:	65fb      	str	r3, [r7, #92]	; 0x5c
		packet[0] = le.access_address;
    6914:	4b43      	ldr	r3, [pc, #268]	; (6a24 <bt_le_sync+0x230>)
    6916:	681b      	ldr	r3, [r3, #0]
    6918:	60bb      	str	r3, [r7, #8]

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
    691a:	4b46      	ldr	r3, [pc, #280]	; (6a34 <bt_le_sync+0x240>)
    691c:	881b      	ldrh	r3, [r3, #0]
    691e:	b29b      	uxth	r3, r3
    6920:	b2db      	uxtb	r3, r3
    6922:	3b62      	subs	r3, #98	; 0x62
    6924:	b2db      	uxtb	r3, r3
    6926:	4618      	mov	r0, r3
    6928:	f001 fcda 	bl	82e0 <btle_channel_index>
    692c:	4603      	mov	r3, r0
    692e:	461a      	mov	r2, r3
    6930:	4613      	mov	r3, r2
    6932:	005b      	lsls	r3, r3, #1
    6934:	4413      	add	r3, r2
    6936:	011b      	lsls	r3, r3, #4
    6938:	4a45      	ldr	r2, [pc, #276]	; (6a50 <bt_le_sync+0x25c>)
    693a:	4413      	add	r3, r2
    693c:	65bb      	str	r3, [r7, #88]	; 0x58
		for (i = 0; i < 4; i+= 4) {
    693e:	2300      	movs	r3, #0
    6940:	667b      	str	r3, [r7, #100]	; 0x64
    6942:	e034      	b.n	69ae <bt_le_sync+0x1ba>
			uint32_t v = rxbuf1[i+0] << 24
    6944:	4a43      	ldr	r2, [pc, #268]	; (6a54 <bt_le_sync+0x260>)
    6946:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6948:	4413      	add	r3, r2
    694a:	781b      	ldrb	r3, [r3, #0]
    694c:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    694e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6950:	3301      	adds	r3, #1
    6952:	4940      	ldr	r1, [pc, #256]	; (6a54 <bt_le_sync+0x260>)
    6954:	5ccb      	ldrb	r3, [r1, r3]
    6956:	041b      	lsls	r3, r3, #16
    6958:	431a      	orrs	r2, r3
					   | rxbuf1[i+2] << 8
    695a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    695c:	3302      	adds	r3, #2
    695e:	493d      	ldr	r1, [pc, #244]	; (6a54 <bt_le_sync+0x260>)
    6960:	5ccb      	ldrb	r3, [r1, r3]
    6962:	021b      	lsls	r3, r3, #8
    6964:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    6966:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    6968:	3203      	adds	r2, #3
    696a:	493a      	ldr	r1, [pc, #232]	; (6a54 <bt_le_sync+0x260>)
    696c:	5c8a      	ldrb	r2, [r1, r2]
    696e:	4313      	orrs	r3, r2
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6970:	657b      	str	r3, [r7, #84]	; 0x54
					   | rxbuf1[i+1] << 16
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    6972:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6974:	2b00      	cmp	r3, #0
    6976:	da00      	bge.n	697a <bt_le_sync+0x186>
    6978:	3303      	adds	r3, #3
    697a:	109b      	asrs	r3, r3, #2
    697c:	1c5c      	adds	r4, r3, #1
    697e:	6d78      	ldr	r0, [r7, #84]	; 0x54
    6980:	f002 fed4 	bl	972c <rbit>
    6984:	4601      	mov	r1, r0
    6986:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6988:	2b00      	cmp	r3, #0
    698a:	da00      	bge.n	698e <bt_le_sync+0x19a>
    698c:	3303      	adds	r3, #3
    698e:	109b      	asrs	r3, r3, #2
    6990:	009b      	lsls	r3, r3, #2
    6992:	6dba      	ldr	r2, [r7, #88]	; 0x58
    6994:	4413      	add	r3, r2
    6996:	681b      	ldr	r3, [r3, #0]
    6998:	ea81 0203 	eor.w	r2, r1, r3
    699c:	00a3      	lsls	r3, r4, #2
    699e:	f107 0168 	add.w	r1, r7, #104	; 0x68
    69a2:	440b      	add	r3, r1
    69a4:	f843 2c60 	str.w	r2, [r3, #-96]
		uint32_t packet[48/4+1];
		u8 *p = (u8 *)packet;
		packet[0] = le.access_address;

		const uint32_t *whit = whitening_word[btle_channel_index(channel-2402)];
		for (i = 0; i < 4; i+= 4) {
    69a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    69aa:	3304      	adds	r3, #4
    69ac:	667b      	str	r3, [r7, #100]	; 0x64
    69ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    69b0:	2b03      	cmp	r3, #3
    69b2:	ddc7      	ble.n	6944 <bt_le_sync+0x150>
					   | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		unsigned len = (p[5] & 0x3f) + 2;
    69b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    69b6:	3305      	adds	r3, #5
    69b8:	781b      	ldrb	r3, [r3, #0]
    69ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    69be:	3302      	adds	r3, #2
    69c0:	653b      	str	r3, [r7, #80]	; 0x50
		if (len > 39)
    69c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    69c4:	2b27      	cmp	r3, #39	; 0x27
    69c6:	d900      	bls.n	69ca <bt_le_sync+0x1d6>
			goto rx_flush;
    69c8:	e0c8      	b.n	6b5c <bt_le_sync+0x368>

		// transfer the minimum number of bytes from the CC2400
		// this allows us enough time to resume RX for subsequent packets on the same channel
		unsigned total_transfers = ((len + 3) + 4 - 1) / 4;
    69ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    69cc:	3306      	adds	r3, #6
    69ce:	089b      	lsrs	r3, r3, #2
    69d0:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (total_transfers < 11) {
    69d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    69d4:	2b0a      	cmp	r3, #10
    69d6:	d80d      	bhi.n	69f4 <bt_le_sync+0x200>
			while (DMACC0DestAddr < (uint32_t)rxbuf1 + 4 * total_transfers && rx_err == 0)
    69d8:	bf00      	nop
    69da:	4b1f      	ldr	r3, [pc, #124]	; (6a58 <bt_le_sync+0x264>)
    69dc:	681a      	ldr	r2, [r3, #0]
    69de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    69e0:	009b      	lsls	r3, r3, #2
    69e2:	491c      	ldr	r1, [pc, #112]	; (6a54 <bt_le_sync+0x260>)
    69e4:	440b      	add	r3, r1
    69e6:	429a      	cmp	r2, r3
    69e8:	d20f      	bcs.n	6a0a <bt_le_sync+0x216>
    69ea:	4b15      	ldr	r3, [pc, #84]	; (6a40 <bt_le_sync+0x24c>)
    69ec:	681b      	ldr	r3, [r3, #0]
    69ee:	2b00      	cmp	r3, #0
    69f0:	d0f3      	beq.n	69da <bt_le_sync+0x1e6>
    69f2:	e00a      	b.n	6a0a <bt_le_sync+0x216>
				;
		} else { // max transfers? just wait till DMA's done
			while (DMACC0Config & DMACCxConfig_E && rx_err == 0)
    69f4:	bf00      	nop
    69f6:	4b19      	ldr	r3, [pc, #100]	; (6a5c <bt_le_sync+0x268>)
    69f8:	681b      	ldr	r3, [r3, #0]
    69fa:	f003 0301 	and.w	r3, r3, #1
    69fe:	2b00      	cmp	r3, #0
    6a00:	d003      	beq.n	6a0a <bt_le_sync+0x216>
    6a02:	4b0f      	ldr	r3, [pc, #60]	; (6a40 <bt_le_sync+0x24c>)
    6a04:	681b      	ldr	r3, [r3, #0]
    6a06:	2b00      	cmp	r3, #0
    6a08:	d0f5      	beq.n	69f6 <bt_le_sync+0x202>
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6a0a:	4a15      	ldr	r2, [pc, #84]	; (6a60 <bt_le_sync+0x26c>)
    6a0c:	4b14      	ldr	r3, [pc, #80]	; (6a60 <bt_le_sync+0x26c>)
    6a0e:	681b      	ldr	r3, [r3, #0]
    6a10:	f023 0301 	bic.w	r3, r3, #1
    6a14:	6013      	str	r3, [r2, #0]

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    6a16:	2304      	movs	r3, #4
    6a18:	667b      	str	r3, [r7, #100]	; 0x64
    6a1a:	e058      	b.n	6ace <bt_le_sync+0x2da>
    6a1c:	10000a42 	.word	0x10000a42
    6a20:	10000a3e 	.word	0x10000a3e
    6a24:	10000458 	.word	0x10000458
    6a28:	e000e100 	.word	0xe000e100
    6a2c:	2009c03c 	.word	0x2009c03c
    6a30:	10000a44 	.word	0x10000a44
    6a34:	1000049c 	.word	0x1000049c
    6a38:	10000a46 	.word	0x10000a46
    6a3c:	10000b00 	.word	0x10000b00
    6a40:	100010b4 	.word	0x100010b4
    6a44:	1000097d 	.word	0x1000097d
    6a48:	10000a3f 	.word	0x10000a3f
    6a4c:	10000a48 	.word	0x10000a48
    6a50:	0000b8c4 	.word	0x0000b8c4
    6a54:	10001080 	.word	0x10001080
    6a58:	50004104 	.word	0x50004104
    6a5c:	50004110 	.word	0x50004110
    6a60:	40030024 	.word	0x40030024
			uint32_t v = rxbuf1[i+0] << 24
    6a64:	4aa5      	ldr	r2, [pc, #660]	; (6cfc <bt_le_sync+0x508>)
    6a66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6a68:	4413      	add	r3, r2
    6a6a:	781b      	ldrb	r3, [r3, #0]
    6a6c:	061a      	lsls	r2, r3, #24
					   | rxbuf1[i+1] << 16
    6a6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6a70:	3301      	adds	r3, #1
    6a72:	49a2      	ldr	r1, [pc, #648]	; (6cfc <bt_le_sync+0x508>)
    6a74:	5ccb      	ldrb	r3, [r1, r3]
    6a76:	041b      	lsls	r3, r3, #16
    6a78:	431a      	orrs	r2, r3
				       | rxbuf1[i+2] << 8
    6a7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6a7c:	3302      	adds	r3, #2
    6a7e:	499f      	ldr	r1, [pc, #636]	; (6cfc <bt_le_sync+0x508>)
    6a80:	5ccb      	ldrb	r3, [r1, r3]
    6a82:	021b      	lsls	r3, r3, #8
    6a84:	4313      	orrs	r3, r2
					   | rxbuf1[i+3] << 0;
    6a86:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    6a88:	3203      	adds	r2, #3
    6a8a:	499c      	ldr	r1, [pc, #624]	; (6cfc <bt_le_sync+0x508>)
    6a8c:	5c8a      	ldrb	r2, [r1, r2]
    6a8e:	4313      	orrs	r3, r2
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
			uint32_t v = rxbuf1[i+0] << 24
    6a90:	64bb      	str	r3, [r7, #72]	; 0x48
					   | rxbuf1[i+1] << 16
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
    6a92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6a94:	2b00      	cmp	r3, #0
    6a96:	da00      	bge.n	6a9a <bt_le_sync+0x2a6>
    6a98:	3303      	adds	r3, #3
    6a9a:	109b      	asrs	r3, r3, #2
    6a9c:	1c5c      	adds	r4, r3, #1
    6a9e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
    6aa0:	f002 fe44 	bl	972c <rbit>
    6aa4:	4601      	mov	r1, r0
    6aa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6aa8:	2b00      	cmp	r3, #0
    6aaa:	da00      	bge.n	6aae <bt_le_sync+0x2ba>
    6aac:	3303      	adds	r3, #3
    6aae:	109b      	asrs	r3, r3, #2
    6ab0:	009b      	lsls	r3, r3, #2
    6ab2:	6dba      	ldr	r2, [r7, #88]	; 0x58
    6ab4:	4413      	add	r3, r2
    6ab6:	681b      	ldr	r3, [r3, #0]
    6ab8:	ea81 0203 	eor.w	r2, r1, r3
    6abc:	00a3      	lsls	r3, r4, #2
    6abe:	f107 0168 	add.w	r1, r7, #104	; 0x68
    6ac2:	440b      	add	r3, r1
    6ac4:	f843 2c60 	str.w	r2, [r3, #-96]
				;
		}
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;

		// unwhiten the rest of the packet
		for (i = 4; i < 44; i += 4) {
    6ac8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6aca:	3304      	adds	r3, #4
    6acc:	667b      	str	r3, [r7, #100]	; 0x64
    6ace:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    6ad0:	2b2b      	cmp	r3, #43	; 0x2b
    6ad2:	ddc7      	ble.n	6a64 <bt_le_sync+0x270>
				       | rxbuf1[i+2] << 8
					   | rxbuf1[i+3] << 0;
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
    6ad4:	4b8a      	ldr	r3, [pc, #552]	; (6d00 <bt_le_sync+0x50c>)
    6ad6:	691b      	ldr	r3, [r3, #16]
    6ad8:	2b00      	cmp	r3, #0
    6ada:	d023      	beq.n	6b24 <bt_le_sync+0x330>
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
    6adc:	4b88      	ldr	r3, [pc, #544]	; (6d00 <bt_le_sync+0x50c>)
    6ade:	68d9      	ldr	r1, [r3, #12]
    6ae0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    6ae2:	1d1a      	adds	r2, r3, #4
    6ae4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6ae6:	4608      	mov	r0, r1
    6ae8:	4611      	mov	r1, r2
    6aea:	461a      	mov	r2, r3
    6aec:	f001 fcfc 	bl	84e8 <btle_crcgen_lut>
    6af0:	6478      	str	r0, [r7, #68]	; 0x44
			u32 wire_crc = (p[4+len+2] << 16)
    6af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6af4:	3306      	adds	r3, #6
    6af6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    6af8:	4413      	add	r3, r2
    6afa:	781b      	ldrb	r3, [r3, #0]
    6afc:	041a      	lsls	r2, r3, #16
						 | (p[4+len+1] << 8)
    6afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    6b00:	3305      	adds	r3, #5
    6b02:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    6b04:	440b      	add	r3, r1
    6b06:	781b      	ldrb	r3, [r3, #0]
    6b08:	021b      	lsls	r3, r3, #8
    6b0a:	4313      	orrs	r3, r2
						 | (p[4+len+0] << 0);
    6b0c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    6b0e:	3204      	adds	r2, #4
    6b10:	6df9      	ldr	r1, [r7, #92]	; 0x5c
    6b12:	440a      	add	r2, r1
    6b14:	7812      	ldrb	r2, [r2, #0]
    6b16:	4313      	orrs	r3, r2
			packet[i/4+1] = rbit(v) ^ whit[i/4];
		}

		if (le.crc_verify) {
			u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, p + 4, len);
			u32 wire_crc = (p[4+len+2] << 16)
    6b18:	643b      	str	r3, [r7, #64]	; 0x40
						 | (p[4+len+1] << 8)
						 | (p[4+len+0] << 0);
			if (calc_crc != wire_crc) // skip packets with a bad CRC
    6b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    6b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    6b1e:	429a      	cmp	r2, r3
    6b20:	d000      	beq.n	6b24 <bt_le_sync+0x330>
				goto rx_flush;
    6b22:	e01b      	b.n	6b5c <bt_le_sync+0x368>
		}


		RXLED_SET;
    6b24:	4b77      	ldr	r3, [pc, #476]	; (6d04 <bt_le_sync+0x510>)
    6b26:	2210      	movs	r2, #16
    6b28:	601a      	str	r2, [r3, #0]
		packet_cb((uint8_t *)packet);
    6b2a:	4b77      	ldr	r3, [pc, #476]	; (6d08 <bt_le_sync+0x514>)
    6b2c:	681b      	ldr	r3, [r3, #0]
    6b2e:	f107 0208 	add.w	r2, r7, #8
    6b32:	4610      	mov	r0, r2
    6b34:	4798      	blx	r3
		enqueue(LE_PACKET, (uint8_t *)packet);
    6b36:	f107 0308 	add.w	r3, r7, #8
    6b3a:	2001      	movs	r0, #1
    6b3c:	4619      	mov	r1, r3
    6b3e:	f7fd fcc3 	bl	44c8 <enqueue>
		le.last_packet = CLK100NS;
    6b42:	4b72      	ldr	r3, [pc, #456]	; (6d0c <bt_le_sync+0x518>)
    6b44:	681b      	ldr	r3, [r3, #0]
    6b46:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6b4a:	f640 4235 	movw	r2, #3125	; 0xc35
    6b4e:	fb02 f203 	mul.w	r2, r2, r3
    6b52:	4b6f      	ldr	r3, [pc, #444]	; (6d10 <bt_le_sync+0x51c>)
    6b54:	681b      	ldr	r3, [r3, #0]
    6b56:	4413      	add	r3, r2
    6b58:	4a69      	ldr	r2, [pc, #420]	; (6d00 <bt_le_sync+0x50c>)
    6b5a:	6413      	str	r3, [r2, #64]	; 0x40

	rx_flush:
		cc2400_strobe(SFSON);
    6b5c:	2061      	movs	r0, #97	; 0x61
    6b5e:	f003 f879 	bl	9c54 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    6b62:	bf00      	nop
    6b64:	f003 f86c 	bl	9c40 <cc2400_status>
    6b68:	4603      	mov	r3, r0
    6b6a:	f003 0304 	and.w	r3, r3, #4
    6b6e:	2b00      	cmp	r3, #0
    6b70:	d0f8      	beq.n	6b64 <bt_le_sync+0x370>

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
    6b72:	4a68      	ldr	r2, [pc, #416]	; (6d14 <bt_le_sync+0x520>)
    6b74:	4b67      	ldr	r3, [pc, #412]	; (6d14 <bt_le_sync+0x520>)
    6b76:	681b      	ldr	r3, [r3, #0]
    6b78:	f023 0301 	bic.w	r3, r3, #1
    6b7c:	6013      	str	r3, [r2, #0]
		while (SSP1SR & SSPSR_RNE) {
    6b7e:	e003      	b.n	6b88 <bt_le_sync+0x394>
			u8 tmp = (u8)DIO_SSP_DR;
    6b80:	4b65      	ldr	r3, [pc, #404]	; (6d18 <bt_le_sync+0x524>)
    6b82:	681b      	ldr	r3, [r3, #0]
    6b84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		cc2400_strobe(SFSON);
		while (!(cc2400_status() & FS_LOCK));

		// flush any excess bytes from the SSP's buffer
		DIO_SSP_DMACR &= ~SSPDMACR_RXDMAE;
		while (SSP1SR & SSPSR_RNE) {
    6b88:	4b64      	ldr	r3, [pc, #400]	; (6d1c <bt_le_sync+0x528>)
    6b8a:	681b      	ldr	r3, [r3, #0]
    6b8c:	f003 0304 	and.w	r3, r3, #4
    6b90:	2b00      	cmp	r3, #0
    6b92:	d1f5      	bne.n	6b80 <bt_le_sync+0x38c>
			u8 tmp = (u8)DIO_SSP_DR;
		}

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
    6b94:	4b5d      	ldr	r3, [pc, #372]	; (6d0c <bt_le_sync+0x518>)
    6b96:	681b      	ldr	r3, [r3, #0]
    6b98:	f3c3 0313 	ubfx	r3, r3, #0, #20
    6b9c:	f640 4235 	movw	r2, #3125	; 0xc35
    6ba0:	fb02 f203 	mul.w	r2, r2, r3
    6ba4:	4b5a      	ldr	r3, [pc, #360]	; (6d10 <bt_le_sync+0x51c>)
    6ba6:	681b      	ldr	r3, [r3, #0]
    6ba8:	4413      	add	r3, r2
    6baa:	663b      	str	r3, [r7, #96]	; 0x60
		if (now < le.last_packet)
    6bac:	4b54      	ldr	r3, [pc, #336]	; (6d00 <bt_le_sync+0x50c>)
    6bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    6bb0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6bb2:	429a      	cmp	r2, r3
    6bb4:	d905      	bls.n	6bc2 <bt_le_sync+0x3ce>
			now += 3276800000; // handle rollover
    6bb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    6bb8:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    6bbc:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    6bc0:	663b      	str	r3, [r7, #96]	; 0x60
		if  ( // timeout
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    6bc2:	4b4f      	ldr	r3, [pc, #316]	; (6d00 <bt_le_sync+0x50c>)
    6bc4:	7d1b      	ldrb	r3, [r3, #20]

		// timeout - FIXME this is an ugly hack
		u32 now = CLK100NS;
		if (now < le.last_packet)
			now += 3276800000; // handle rollover
		if  ( // timeout
    6bc6:	2b03      	cmp	r3, #3
    6bc8:	d003      	beq.n	6bd2 <bt_le_sync+0x3de>
			((le.link_state == LINK_CONNECTED || le.link_state == LINK_CONN_PENDING)
    6bca:	4b4d      	ldr	r3, [pc, #308]	; (6d00 <bt_le_sync+0x50c>)
    6bcc:	7d1b      	ldrb	r3, [r3, #20]
    6bce:	2b02      	cmp	r3, #2
    6bd0:	d106      	bne.n	6be0 <bt_le_sync+0x3ec>
			&& (now - le.last_packet > 50000000))
    6bd2:	4b4b      	ldr	r3, [pc, #300]	; (6d00 <bt_le_sync+0x50c>)
    6bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6bd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    6bd8:	1ad3      	subs	r3, r2, r3
    6bda:	4a51      	ldr	r2, [pc, #324]	; (6d20 <bt_le_sync+0x52c>)
    6bdc:	4293      	cmp	r3, r2
    6bde:	d803      	bhi.n	6be8 <bt_le_sync+0x3f4>
			// jam finished
			|| (le_jam_count == 1)
    6be0:	4b50      	ldr	r3, [pc, #320]	; (6d24 <bt_le_sync+0x530>)
    6be2:	681b      	ldr	r3, [r3, #0]
    6be4:	2b01      	cmp	r3, #1
    6be6:	d137      	bne.n	6c58 <bt_le_sync+0x464>
			)
		{
			reset_le();
    6be8:	f7ff fc2c 	bl	6444 <reset_le>
			le_jam_count = 0;
    6bec:	4b4d      	ldr	r3, [pc, #308]	; (6d24 <bt_le_sync+0x530>)
    6bee:	2200      	movs	r2, #0
    6bf0:	601a      	str	r2, [r3, #0]
			TXLED_CLR;
    6bf2:	4b4d      	ldr	r3, [pc, #308]	; (6d28 <bt_le_sync+0x534>)
    6bf4:	f44f 7280 	mov.w	r2, #256	; 0x100
    6bf8:	601a      	str	r2, [r3, #0]

			if (jam_mode == JAM_ONCE) {
    6bfa:	4b4c      	ldr	r3, [pc, #304]	; (6d2c <bt_le_sync+0x538>)
    6bfc:	781b      	ldrb	r3, [r3, #0]
    6bfe:	b2db      	uxtb	r3, r3
    6c00:	2b01      	cmp	r3, #1
    6c02:	d106      	bne.n	6c12 <bt_le_sync+0x41e>
				jam_mode = JAM_NONE;
    6c04:	4b49      	ldr	r3, [pc, #292]	; (6d2c <bt_le_sync+0x538>)
    6c06:	2200      	movs	r2, #0
    6c08:	701a      	strb	r2, [r3, #0]
				requested_mode = MODE_IDLE;
    6c0a:	4b49      	ldr	r3, [pc, #292]	; (6d30 <bt_le_sync+0x53c>)
    6c0c:	2200      	movs	r2, #0
    6c0e:	701a      	strb	r2, [r3, #0]
				goto cleanup;
    6c10:	e066      	b.n	6ce0 <bt_le_sync+0x4ec>
			}

			// go back to promisc if the connection dies
			if (active_mode == MODE_BT_PROMISC_LE)
    6c12:	79fb      	ldrb	r3, [r7, #7]
    6c14:	2b0a      	cmp	r3, #10
    6c16:	d101      	bne.n	6c1c <bt_le_sync+0x428>
				goto cleanup;
    6c18:	bf00      	nop
    6c1a:	e061      	b.n	6ce0 <bt_le_sync+0x4ec>

			le.link_state = LINK_LISTENING;
    6c1c:	4b38      	ldr	r3, [pc, #224]	; (6d00 <bt_le_sync+0x50c>)
    6c1e:	2201      	movs	r2, #1
    6c20:	751a      	strb	r2, [r3, #20]

			cc2400_strobe(SRFOFF);
    6c22:	2064      	movs	r0, #100	; 0x64
    6c24:	f003 f816 	bl	9c54 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    6c28:	bf00      	nop
    6c2a:	f003 f809 	bl	9c40 <cc2400_status>
    6c2e:	4603      	mov	r3, r0
    6c30:	f003 0304 	and.w	r3, r3, #4
    6c34:	2b00      	cmp	r3, #0
    6c36:	d1f8      	bne.n	6c2a <bt_le_sync+0x436>

			/* Retune */
			channel = saved_request != 0 ? saved_request : 2402;
    6c38:	4b3e      	ldr	r3, [pc, #248]	; (6d34 <bt_le_sync+0x540>)
    6c3a:	881b      	ldrh	r3, [r3, #0]
    6c3c:	b29b      	uxth	r3, r3
    6c3e:	2b00      	cmp	r3, #0
    6c40:	d003      	beq.n	6c4a <bt_le_sync+0x456>
    6c42:	4b3c      	ldr	r3, [pc, #240]	; (6d34 <bt_le_sync+0x540>)
    6c44:	881b      	ldrh	r3, [r3, #0]
    6c46:	b29b      	uxth	r3, r3
    6c48:	e001      	b.n	6c4e <bt_le_sync+0x45a>
    6c4a:	f640 1362 	movw	r3, #2402	; 0x962
    6c4e:	4a3a      	ldr	r2, [pc, #232]	; (6d38 <bt_le_sync+0x544>)
    6c50:	8013      	strh	r3, [r2, #0]
			restart_jamming = 1;
    6c52:	4b3a      	ldr	r3, [pc, #232]	; (6d3c <bt_le_sync+0x548>)
    6c54:	2201      	movs	r2, #1
    6c56:	601a      	str	r2, [r3, #0]
		}

		cc2400_set(SYNCL, le.syncl);
    6c58:	4b29      	ldr	r3, [pc, #164]	; (6d00 <bt_le_sync+0x50c>)
    6c5a:	88db      	ldrh	r3, [r3, #6]
    6c5c:	202c      	movs	r0, #44	; 0x2c
    6c5e:	4619      	mov	r1, r3
    6c60:	f002 ff36 	bl	9ad0 <cc2400_set>
		cc2400_set(SYNCH, le.synch);
    6c64:	4b26      	ldr	r3, [pc, #152]	; (6d00 <bt_le_sync+0x50c>)
    6c66:	889b      	ldrh	r3, [r3, #4]
    6c68:	202d      	movs	r0, #45	; 0x2d
    6c6a:	4619      	mov	r1, r3
    6c6c:	f002 ff30 	bl	9ad0 <cc2400_set>

		if (do_hop)
    6c70:	4b33      	ldr	r3, [pc, #204]	; (6d40 <bt_le_sync+0x54c>)
    6c72:	781b      	ldrb	r3, [r3, #0]
    6c74:	b2db      	uxtb	r3, r3
    6c76:	2b00      	cmp	r3, #0
    6c78:	d001      	beq.n	6c7e <bt_le_sync+0x48a>
			hop();
    6c7a:	f7ff fa0d 	bl	6098 <hop>

		// ♪ you can jam but you keep turning off the light ♪
		if (le_jam_count > 0) {
    6c7e:	4b29      	ldr	r3, [pc, #164]	; (6d24 <bt_le_sync+0x530>)
    6c80:	681b      	ldr	r3, [r3, #0]
    6c82:	2b00      	cmp	r3, #0
    6c84:	dd07      	ble.n	6c96 <bt_le_sync+0x4a2>
			le_jam();
    6c86:	f7ff f9bd 	bl	6004 <le_jam>
			--le_jam_count;
    6c8a:	4b26      	ldr	r3, [pc, #152]	; (6d24 <bt_le_sync+0x530>)
    6c8c:	681b      	ldr	r3, [r3, #0]
    6c8e:	3b01      	subs	r3, #1
    6c90:	4a24      	ldr	r2, [pc, #144]	; (6d24 <bt_le_sync+0x530>)
    6c92:	6013      	str	r3, [r2, #0]
    6c94:	e017      	b.n	6cc6 <bt_le_sync+0x4d2>
		} else {
			/* RX mode */
			dma_init_le();
    6c96:	f7fe fd43 	bl	5720 <dma_init_le>
			dio_ssp_start();
    6c9a:	f7fe feab 	bl	59f4 <dio_ssp_start>

			if (restart_jamming) {
    6c9e:	4b27      	ldr	r3, [pc, #156]	; (6d3c <bt_le_sync+0x548>)
    6ca0:	681b      	ldr	r3, [r3, #0]
    6ca2:	2b00      	cmp	r3, #0
    6ca4:	d00c      	beq.n	6cc0 <bt_le_sync+0x4cc>
				cc2400_rx_sync(rbit(le.access_address));
    6ca6:	4b16      	ldr	r3, [pc, #88]	; (6d00 <bt_le_sync+0x50c>)
    6ca8:	681b      	ldr	r3, [r3, #0]
    6caa:	4618      	mov	r0, r3
    6cac:	f002 fd3e 	bl	972c <rbit>
    6cb0:	4603      	mov	r3, r0
    6cb2:	4618      	mov	r0, r3
    6cb4:	f7fe ffb8 	bl	5c28 <cc2400_rx_sync>
				restart_jamming = 0;
    6cb8:	4b20      	ldr	r3, [pc, #128]	; (6d3c <bt_le_sync+0x548>)
    6cba:	2200      	movs	r2, #0
    6cbc:	601a      	str	r2, [r3, #0]
    6cbe:	e002      	b.n	6cc6 <bt_le_sync+0x4d2>
			} else {
				cc2400_strobe(SRX);
    6cc0:	2062      	movs	r0, #98	; 0x62
    6cc2:	f002 ffc7 	bl	9c54 <cc2400_strobe>
			}
		}

		rx_tc = 0;
    6cc6:	4b1f      	ldr	r3, [pc, #124]	; (6d44 <bt_le_sync+0x550>)
    6cc8:	2200      	movs	r2, #0
    6cca:	601a      	str	r2, [r3, #0]
		rx_err = 0;
    6ccc:	4b1e      	ldr	r3, [pc, #120]	; (6d48 <bt_le_sync+0x554>)
    6cce:	2200      	movs	r2, #0
    6cd0:	601a      	str	r2, [r3, #0]
	dma_init_le();
	dio_ssp_start();

	cc2400_rx_sync(rbit(le.access_address)); // bit-reversed access address

	while (requested_mode == active_mode) {
    6cd2:	4b17      	ldr	r3, [pc, #92]	; (6d30 <bt_le_sync+0x53c>)
    6cd4:	781b      	ldrb	r3, [r3, #0]
    6cd6:	b2db      	uxtb	r3, r3
    6cd8:	79fa      	ldrb	r2, [r7, #7]
    6cda:	429a      	cmp	r2, r3
    6cdc:	f43f adb1 	beq.w	6842 <bt_le_sync+0x4e>
	}

cleanup:

	// disable USB interrupts
	ICER0 = ICER0_ICE_USB;
    6ce0:	4b1a      	ldr	r3, [pc, #104]	; (6d4c <bt_le_sync+0x558>)
    6ce2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6ce6:	601a      	str	r2, [r3, #0]

	// reset the radio completely
	cc2400_idle();
    6ce8:	f7fe ff18 	bl	5b1c <cc2400_idle>
	dio_ssp_stop();
    6cec:	f7fe feb2 	bl	5a54 <dio_ssp_stop>
	cs_trigger_disable();
    6cf0:	f7fd fda6 	bl	4840 <cs_trigger_disable>
}
    6cf4:	376c      	adds	r7, #108	; 0x6c
    6cf6:	46bd      	mov	sp, r7
    6cf8:	bd90      	pop	{r4, r7, pc}
    6cfa:	bf00      	nop
    6cfc:	10001080 	.word	0x10001080
    6d00:	10000458 	.word	0x10000458
    6d04:	2009c038 	.word	0x2009c038
    6d08:	1000099c 	.word	0x1000099c
    6d0c:	10000be4 	.word	0x10000be4
    6d10:	40004008 	.word	0x40004008
    6d14:	40030024 	.word	0x40030024
    6d18:	40030008 	.word	0x40030008
    6d1c:	4003000c 	.word	0x4003000c
    6d20:	02faf080 	.word	0x02faf080
    6d24:	10000994 	.word	0x10000994
    6d28:	2009c03c 	.word	0x2009c03c
    6d2c:	10000a40 	.word	0x10000a40
    6d30:	10000a3f 	.word	0x10000a3f
    6d34:	10000a46 	.word	0x10000a46
    6d38:	1000049c 	.word	0x1000049c
    6d3c:	10000a50 	.word	0x10000a50
    6d40:	1000097d 	.word	0x1000097d
    6d44:	10000b00 	.word	0x10000b00
    6d48:	100010b4 	.word	0x100010b4
    6d4c:	e000e180 	.word	0xe000e180

00006d50 <cb_follow_le>:



/* low energy connection following
 * follows a known AA around */
int cb_follow_le() {
    6d50:	b580      	push	{r7, lr}
    6d52:	b08c      	sub	sp, #48	; 0x30
    6d54:	af00      	add	r7, sp, #0
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];
    6d56:	4b6c      	ldr	r3, [pc, #432]	; (6f08 <cb_follow_le+0x1b8>)
    6d58:	881b      	ldrh	r3, [r3, #0]
    6d5a:	b29b      	uxth	r3, r3
    6d5c:	b2db      	uxtb	r3, r3
    6d5e:	3b62      	subs	r3, #98	; 0x62
    6d60:	b2db      	uxtb	r3, r3
    6d62:	4618      	mov	r0, r3
    6d64:	f001 fabc 	bl	82e0 <btle_channel_index>
    6d68:	4603      	mov	r3, r0
    6d6a:	461a      	mov	r2, r3
    6d6c:	4b67      	ldr	r3, [pc, #412]	; (6f0c <cb_follow_le+0x1bc>)
    6d6e:	5c9b      	ldrb	r3, [r3, r2]
    6d70:	623b      	str	r3, [r7, #32]

	u32 access_address = 0;
    6d72:	2300      	movs	r3, #0
    6d74:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < 31; ++i) {
    6d76:	2300      	movs	r3, #0
    6d78:	62fb      	str	r3, [r7, #44]	; 0x2c
    6d7a:	e00e      	b.n	6d9a <cb_follow_le+0x4a>
		access_address >>= 1;
    6d7c:	69fb      	ldr	r3, [r7, #28]
    6d7e:	085b      	lsrs	r3, r3, #1
    6d80:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    6d82:	4a63      	ldr	r2, [pc, #396]	; (6f10 <cb_follow_le+0x1c0>)
    6d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6d86:	4413      	add	r3, r2
    6d88:	781b      	ldrb	r3, [r3, #0]
    6d8a:	07db      	lsls	r3, r3, #31
    6d8c:	461a      	mov	r2, r3
    6d8e:	69fb      	ldr	r3, [r7, #28]
    6d90:	4313      	orrs	r3, r2
    6d92:	61fb      	str	r3, [r7, #28]
int cb_follow_le() {
	int i, j, k;
	int idx = whitening_index[btle_channel_index(channel-2402)];

	u32 access_address = 0;
	for (i = 0; i < 31; ++i) {
    6d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6d96:	3301      	adds	r3, #1
    6d98:	62fb      	str	r3, [r7, #44]	; 0x2c
    6d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6d9c:	2b1e      	cmp	r3, #30
    6d9e:	dded      	ble.n	6d7c <cb_follow_le+0x2c>
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    6da0:	231f      	movs	r3, #31
    6da2:	62fb      	str	r3, [r7, #44]	; 0x2c
    6da4:	e0a6      	b.n	6ef4 <cb_follow_le+0x1a4>
		access_address >>= 1;
    6da6:	69fb      	ldr	r3, [r7, #28]
    6da8:	085b      	lsrs	r3, r3, #1
    6daa:	61fb      	str	r3, [r7, #28]
		access_address |= (unpacked[i] << 31);
    6dac:	4a58      	ldr	r2, [pc, #352]	; (6f10 <cb_follow_le+0x1c0>)
    6dae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6db0:	4413      	add	r3, r2
    6db2:	781b      	ldrb	r3, [r3, #0]
    6db4:	07db      	lsls	r3, r3, #31
    6db6:	461a      	mov	r2, r3
    6db8:	69fb      	ldr	r3, [r7, #28]
    6dba:	4313      	orrs	r3, r2
    6dbc:	61fb      	str	r3, [r7, #28]
		if (access_address == le.access_address) {
    6dbe:	4b55      	ldr	r3, [pc, #340]	; (6f14 <cb_follow_le+0x1c4>)
    6dc0:	681a      	ldr	r2, [r3, #0]
    6dc2:	69fb      	ldr	r3, [r7, #28]
    6dc4:	429a      	cmp	r2, r3
    6dc6:	f040 8092 	bne.w	6eee <cb_follow_le+0x19e>
			for (j = 0; j < 46; ++j) {
    6dca:	2300      	movs	r3, #0
    6dcc:	62bb      	str	r3, [r7, #40]	; 0x28
    6dce:	e048      	b.n	6e62 <cb_follow_le+0x112>
				u8 byte = 0;
    6dd0:	2300      	movs	r3, #0
    6dd2:	76fb      	strb	r3, [r7, #27]
				for (k = 0; k < 8; k++) {
    6dd4:	2300      	movs	r3, #0
    6dd6:	627b      	str	r3, [r7, #36]	; 0x24
    6dd8:	e037      	b.n	6e4a <cb_follow_le+0xfa>
					int offset = k + (j * 8) + i - 31;
    6dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6ddc:	00da      	lsls	r2, r3, #3
    6dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6de0:	441a      	add	r2, r3
    6de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6de4:	4413      	add	r3, r2
    6de6:	3b1f      	subs	r3, #31
    6de8:	613b      	str	r3, [r7, #16]
					if (offset >= DMA_SIZE*8*2) break;
    6dea:	693b      	ldr	r3, [r7, #16]
    6dec:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    6df0:	db00      	blt.n	6df4 <cb_follow_le+0xa4>
    6df2:	e02d      	b.n	6e50 <cb_follow_le+0x100>
					int bit = unpacked[offset];
    6df4:	4a46      	ldr	r2, [pc, #280]	; (6f10 <cb_follow_le+0x1c0>)
    6df6:	693b      	ldr	r3, [r7, #16]
    6df8:	4413      	add	r3, r2
    6dfa:	781b      	ldrb	r3, [r3, #0]
    6dfc:	617b      	str	r3, [r7, #20]
					if (j >= 4) { // unwhiten data bytes
    6dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e00:	2b03      	cmp	r3, #3
    6e02:	dd16      	ble.n	6e32 <cb_follow_le+0xe2>
						bit ^= whitening[idx];
    6e04:	4a44      	ldr	r2, [pc, #272]	; (6f18 <cb_follow_le+0x1c8>)
    6e06:	6a3b      	ldr	r3, [r7, #32]
    6e08:	4413      	add	r3, r2
    6e0a:	781b      	ldrb	r3, [r3, #0]
    6e0c:	461a      	mov	r2, r3
    6e0e:	697b      	ldr	r3, [r7, #20]
    6e10:	4053      	eors	r3, r2
    6e12:	617b      	str	r3, [r7, #20]
						idx = (idx + 1) % sizeof(whitening);
    6e14:	6a3b      	ldr	r3, [r7, #32]
    6e16:	3301      	adds	r3, #1
    6e18:	4619      	mov	r1, r3
    6e1a:	4b40      	ldr	r3, [pc, #256]	; (6f1c <cb_follow_le+0x1cc>)
    6e1c:	fba1 2303 	umull	r2, r3, r1, r3
    6e20:	1ac8      	subs	r0, r1, r3
    6e22:	0840      	lsrs	r0, r0, #1
    6e24:	4403      	add	r3, r0
    6e26:	099a      	lsrs	r2, r3, #6
    6e28:	4613      	mov	r3, r2
    6e2a:	01db      	lsls	r3, r3, #7
    6e2c:	1a9b      	subs	r3, r3, r2
    6e2e:	1aca      	subs	r2, r1, r3
    6e30:	623a      	str	r2, [r7, #32]
					}
					byte |= bit << k;
    6e32:	697a      	ldr	r2, [r7, #20]
    6e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e36:	fa02 f303 	lsl.w	r3, r2, r3
    6e3a:	b2da      	uxtb	r2, r3
    6e3c:	7efb      	ldrb	r3, [r7, #27]
    6e3e:	4313      	orrs	r3, r2
    6e40:	b2db      	uxtb	r3, r3
    6e42:	76fb      	strb	r3, [r7, #27]
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
				u8 byte = 0;
				for (k = 0; k < 8; k++) {
    6e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e46:	3301      	adds	r3, #1
    6e48:	627b      	str	r3, [r7, #36]	; 0x24
    6e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    6e4c:	2b07      	cmp	r3, #7
    6e4e:	ddc4      	ble.n	6dda <cb_follow_le+0x8a>
						bit ^= whitening[idx];
						idx = (idx + 1) % sizeof(whitening);
					}
					byte |= bit << k;
				}
				idle_rxbuf[j] = byte;
    6e50:	4b33      	ldr	r3, [pc, #204]	; (6f20 <cb_follow_le+0x1d0>)
    6e52:	681a      	ldr	r2, [r3, #0]
    6e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e56:	4413      	add	r3, r2
    6e58:	7efa      	ldrb	r2, [r7, #27]
    6e5a:	701a      	strb	r2, [r3, #0]

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
		if (access_address == le.access_address) {
			for (j = 0; j < 46; ++j) {
    6e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e5e:	3301      	adds	r3, #1
    6e60:	62bb      	str	r3, [r7, #40]	; 0x28
    6e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
    6e64:	2b2d      	cmp	r3, #45	; 0x2d
    6e66:	ddb3      	ble.n	6dd0 <cb_follow_le+0x80>
				}
				idle_rxbuf[j] = byte;
			}

			// verify CRC
			if (le.crc_verify) {
    6e68:	4b2a      	ldr	r3, [pc, #168]	; (6f14 <cb_follow_le+0x1c4>)
    6e6a:	691b      	ldr	r3, [r3, #16]
    6e6c:	2b00      	cmp	r3, #0
    6e6e:	d02e      	beq.n	6ece <cb_follow_le+0x17e>
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
    6e70:	4b2b      	ldr	r3, [pc, #172]	; (6f20 <cb_follow_le+0x1d0>)
    6e72:	681b      	ldr	r3, [r3, #0]
    6e74:	3305      	adds	r3, #5
    6e76:	781b      	ldrb	r3, [r3, #0]
    6e78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    6e7c:	3302      	adds	r3, #2
    6e7e:	60fb      	str	r3, [r7, #12]
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
    6e80:	4b24      	ldr	r3, [pc, #144]	; (6f14 <cb_follow_le+0x1c4>)
    6e82:	68da      	ldr	r2, [r3, #12]
    6e84:	4b26      	ldr	r3, [pc, #152]	; (6f20 <cb_follow_le+0x1d0>)
    6e86:	681b      	ldr	r3, [r3, #0]
    6e88:	3304      	adds	r3, #4
    6e8a:	4610      	mov	r0, r2
    6e8c:	4619      	mov	r1, r3
    6e8e:	68fa      	ldr	r2, [r7, #12]
    6e90:	f001 fb2a 	bl	84e8 <btle_crcgen_lut>
    6e94:	60b8      	str	r0, [r7, #8]
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    6e96:	4b22      	ldr	r3, [pc, #136]	; (6f20 <cb_follow_le+0x1d0>)
    6e98:	681a      	ldr	r2, [r3, #0]
    6e9a:	68fb      	ldr	r3, [r7, #12]
    6e9c:	3306      	adds	r3, #6
    6e9e:	4413      	add	r3, r2
    6ea0:	781b      	ldrb	r3, [r3, #0]
    6ea2:	041a      	lsls	r2, r3, #16
							 | (idle_rxbuf[4+len+1] << 8)
    6ea4:	4b1e      	ldr	r3, [pc, #120]	; (6f20 <cb_follow_le+0x1d0>)
    6ea6:	6819      	ldr	r1, [r3, #0]
    6ea8:	68fb      	ldr	r3, [r7, #12]
    6eaa:	3305      	adds	r3, #5
    6eac:	440b      	add	r3, r1
    6eae:	781b      	ldrb	r3, [r3, #0]
    6eb0:	021b      	lsls	r3, r3, #8
    6eb2:	4313      	orrs	r3, r2
							 |  idle_rxbuf[4+len+0];
    6eb4:	4a1a      	ldr	r2, [pc, #104]	; (6f20 <cb_follow_le+0x1d0>)
    6eb6:	6812      	ldr	r2, [r2, #0]
    6eb8:	68f9      	ldr	r1, [r7, #12]
    6eba:	3104      	adds	r1, #4
    6ebc:	440a      	add	r2, r1
    6ebe:	7812      	ldrb	r2, [r2, #0]
    6ec0:	4313      	orrs	r3, r2

			// verify CRC
			if (le.crc_verify) {
				int len		 = (idle_rxbuf[5] & 0x3f) + 2;
				u32 calc_crc = btle_crcgen_lut(le.crc_init_reversed, idle_rxbuf + 4, len);
				u32 wire_crc = (idle_rxbuf[4+len+2] << 16)
    6ec2:	607b      	str	r3, [r7, #4]
							 | (idle_rxbuf[4+len+1] << 8)
							 |  idle_rxbuf[4+len+0];
				if (calc_crc != wire_crc) // skip packets with a bad CRC
    6ec4:	68ba      	ldr	r2, [r7, #8]
    6ec6:	687b      	ldr	r3, [r7, #4]
    6ec8:	429a      	cmp	r2, r3
    6eca:	d000      	beq.n	6ece <cb_follow_le+0x17e>
					break;
    6ecc:	e017      	b.n	6efe <cb_follow_le+0x1ae>
			}

			// send to PC
			enqueue(LE_PACKET, idle_rxbuf);
    6ece:	4b14      	ldr	r3, [pc, #80]	; (6f20 <cb_follow_le+0x1d0>)
    6ed0:	681b      	ldr	r3, [r3, #0]
    6ed2:	2001      	movs	r0, #1
    6ed4:	4619      	mov	r1, r3
    6ed6:	f7fd faf7 	bl	44c8 <enqueue>
			RXLED_SET;
    6eda:	4b12      	ldr	r3, [pc, #72]	; (6f24 <cb_follow_le+0x1d4>)
    6edc:	2210      	movs	r2, #16
    6ede:	601a      	str	r2, [r3, #0]

			packet_cb(idle_rxbuf);
    6ee0:	4b11      	ldr	r3, [pc, #68]	; (6f28 <cb_follow_le+0x1d8>)
    6ee2:	681b      	ldr	r3, [r3, #0]
    6ee4:	4a0e      	ldr	r2, [pc, #56]	; (6f20 <cb_follow_le+0x1d0>)
    6ee6:	6812      	ldr	r2, [r2, #0]
    6ee8:	4610      	mov	r0, r2
    6eea:	4798      	blx	r3

			break;
    6eec:	e007      	b.n	6efe <cb_follow_le+0x1ae>
	for (i = 0; i < 31; ++i) {
		access_address >>= 1;
		access_address |= (unpacked[i] << 31);
	}

	for (i = 31; i < DMA_SIZE * 8 + 32; i++) {
    6eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6ef0:	3301      	adds	r3, #1
    6ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
    6ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6ef6:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
    6efa:	f6ff af54 	blt.w	6da6 <cb_follow_le+0x56>

			break;
		}
	}

	return 1;
    6efe:	2301      	movs	r3, #1
}
    6f00:	4618      	mov	r0, r3
    6f02:	3730      	adds	r7, #48	; 0x30
    6f04:	46bd      	mov	sp, r7
    6f06:	bd80      	pop	{r7, pc}
    6f08:	1000049c 	.word	0x1000049c
    6f0c:	0000b874 	.word	0x0000b874
    6f10:	10000d00 	.word	0x10000d00
    6f14:	10000458 	.word	0x10000458
    6f18:	0000b7f4 	.word	0x0000b7f4
    6f1c:	02040811 	.word	0x02040811
    6f20:	10000454 	.word	0x10000454
    6f24:	2009c038 	.word	0x2009c038
    6f28:	1000099c 	.word	0x1000099c

00006f2c <connection_follow_cb>:

/**
 * Called when we receive a packet in connection following mode.
 */
void connection_follow_cb(u8 *packet) {
    6f2c:	b580      	push	{r7, lr}
    6f2e:	b08a      	sub	sp, #40	; 0x28
    6f30:	af00      	add	r7, sp, #0
    6f32:	6078      	str	r0, [r7, #4]
	int i;
	u32 aa = 0;
    6f34:	2300      	movs	r3, #0
    6f36:	623b      	str	r3, [r7, #32]
#define ADV_ADDRESS_IDX 0
#define HEADER_IDX 4
#define DATA_LEN_IDX 5
#define DATA_START_IDX 6

	u8 *adv_addr = &packet[ADV_ADDRESS_IDX];
    6f38:	687b      	ldr	r3, [r7, #4]
    6f3a:	61fb      	str	r3, [r7, #28]
	u8 header = packet[HEADER_IDX];
    6f3c:	687b      	ldr	r3, [r7, #4]
    6f3e:	791b      	ldrb	r3, [r3, #4]
    6f40:	76fb      	strb	r3, [r7, #27]
	u8 *data_len = &packet[DATA_LEN_IDX];
    6f42:	687b      	ldr	r3, [r7, #4]
    6f44:	3305      	adds	r3, #5
    6f46:	617b      	str	r3, [r7, #20]
	u8 *data = &packet[DATA_START_IDX];
    6f48:	687b      	ldr	r3, [r7, #4]
    6f4a:	3306      	adds	r3, #6
    6f4c:	613b      	str	r3, [r7, #16]
	u8 *crc = &packet[DATA_START_IDX + *data_len];
    6f4e:	697b      	ldr	r3, [r7, #20]
    6f50:	781b      	ldrb	r3, [r3, #0]
    6f52:	3306      	adds	r3, #6
    6f54:	461a      	mov	r2, r3
    6f56:	687b      	ldr	r3, [r7, #4]
    6f58:	4413      	add	r3, r2
    6f5a:	60fb      	str	r3, [r7, #12]

	if (le.link_state == LINK_CONN_PENDING) {
    6f5c:	4b8b      	ldr	r3, [pc, #556]	; (718c <connection_follow_cb+0x260>)
    6f5e:	7d1b      	ldrb	r3, [r3, #20]
    6f60:	2b02      	cmp	r3, #2
    6f62:	d11c      	bne.n	6f9e <connection_follow_cb+0x72>
		// We received a packet in the connection pending state, so now the device *should* be connected
		le.link_state = LINK_CONNECTED;
    6f64:	4b89      	ldr	r3, [pc, #548]	; (718c <connection_follow_cb+0x260>)
    6f66:	2203      	movs	r2, #3
    6f68:	751a      	strb	r2, [r3, #20]
		le.conn_epoch = clkn;
    6f6a:	4b89      	ldr	r3, [pc, #548]	; (7190 <connection_follow_cb+0x264>)
    6f6c:	681b      	ldr	r3, [r3, #0]
    6f6e:	4a87      	ldr	r2, [pc, #540]	; (718c <connection_follow_cb+0x260>)
    6f70:	6193      	str	r3, [r2, #24]
		le.interval_timer = le.conn_interval - 1;
    6f72:	4b86      	ldr	r3, [pc, #536]	; (718c <connection_follow_cb+0x260>)
    6f74:	8bdb      	ldrh	r3, [r3, #30]
    6f76:	3b01      	subs	r3, #1
    6f78:	b29a      	uxth	r2, r3
    6f7a:	4b84      	ldr	r3, [pc, #528]	; (718c <connection_follow_cb+0x260>)
    6f7c:	839a      	strh	r2, [r3, #28]
		le.conn_count = 0;
    6f7e:	4b83      	ldr	r3, [pc, #524]	; (718c <connection_follow_cb+0x260>)
    6f80:	2200      	movs	r2, #0
    6f82:	841a      	strh	r2, [r3, #32]
		le.update_pending = 0;
    6f84:	4b81      	ldr	r3, [pc, #516]	; (718c <connection_follow_cb+0x260>)
    6f86:	2200      	movs	r2, #0
    6f88:	629a      	str	r2, [r3, #40]	; 0x28

		// hue hue hue
		if (jam_mode != JAM_NONE)
    6f8a:	4b82      	ldr	r3, [pc, #520]	; (7194 <connection_follow_cb+0x268>)
    6f8c:	781b      	ldrb	r3, [r3, #0]
    6f8e:	b2db      	uxtb	r3, r3
    6f90:	2b00      	cmp	r3, #0
    6f92:	f000 80f7 	beq.w	7184 <connection_follow_cb+0x258>
			le_jam_count = JAM_COUNT_DEFAULT;
    6f96:	4b80      	ldr	r3, [pc, #512]	; (7198 <connection_follow_cb+0x26c>)
    6f98:	2228      	movs	r2, #40	; 0x28
    6f9a:	601a      	str	r2, [r3, #0]
    6f9c:	e0f2      	b.n	7184 <connection_follow_cb+0x258>

	} else if (le.link_state == LINK_CONNECTED) {
    6f9e:	4b7b      	ldr	r3, [pc, #492]	; (718c <connection_follow_cb+0x260>)
    6fa0:	7d1b      	ldrb	r3, [r3, #20]
    6fa2:	2b03      	cmp	r3, #3
    6fa4:	d16f      	bne.n	7086 <connection_follow_cb+0x15a>
		u8 llid =  header & 0x03;
    6fa6:	7efb      	ldrb	r3, [r7, #27]
    6fa8:	f003 0303 	and.w	r3, r3, #3
    6fac:	72fb      	strb	r3, [r7, #11]

		// Apply any connection parameter update if necessary
		if (le.update_pending && le.conn_count == le.update_instant) {
    6fae:	4b77      	ldr	r3, [pc, #476]	; (718c <connection_follow_cb+0x260>)
    6fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    6fb2:	2b00      	cmp	r3, #0
    6fb4:	d021      	beq.n	6ffa <connection_follow_cb+0xce>
    6fb6:	4b75      	ldr	r3, [pc, #468]	; (718c <connection_follow_cb+0x260>)
    6fb8:	8c1b      	ldrh	r3, [r3, #32]
    6fba:	b29a      	uxth	r2, r3
    6fbc:	4b73      	ldr	r3, [pc, #460]	; (718c <connection_follow_cb+0x260>)
    6fbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    6fc0:	429a      	cmp	r2, r3
    6fc2:	d11a      	bne.n	6ffa <connection_follow_cb+0xce>
			// This is the first packet received in the connection interval for which the new parameters apply
			le.conn_epoch = clkn;
    6fc4:	4b72      	ldr	r3, [pc, #456]	; (7190 <connection_follow_cb+0x264>)
    6fc6:	681b      	ldr	r3, [r3, #0]
    6fc8:	4a70      	ldr	r2, [pc, #448]	; (718c <connection_follow_cb+0x260>)
    6fca:	6193      	str	r3, [r2, #24]
			le.conn_interval = le.interval_update;
    6fcc:	4b6f      	ldr	r3, [pc, #444]	; (718c <connection_follow_cb+0x260>)
    6fce:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
    6fd0:	4b6e      	ldr	r3, [pc, #440]	; (718c <connection_follow_cb+0x260>)
    6fd2:	83da      	strh	r2, [r3, #30]
			le.interval_timer = le.interval_update - 1;
    6fd4:	4b6d      	ldr	r3, [pc, #436]	; (718c <connection_follow_cb+0x260>)
    6fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
    6fd8:	3b01      	subs	r3, #1
    6fda:	b29a      	uxth	r2, r3
    6fdc:	4b6b      	ldr	r3, [pc, #428]	; (718c <connection_follow_cb+0x260>)
    6fde:	839a      	strh	r2, [r3, #28]
			le.win_size = le.win_size_update;
    6fe0:	4b6a      	ldr	r3, [pc, #424]	; (718c <connection_follow_cb+0x260>)
    6fe2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
    6fe6:	4b69      	ldr	r3, [pc, #420]	; (718c <connection_follow_cb+0x260>)
    6fe8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
			le.win_offset = le.win_offset_update;
    6fec:	4b67      	ldr	r3, [pc, #412]	; (718c <connection_follow_cb+0x260>)
    6fee:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
    6ff0:	4b66      	ldr	r3, [pc, #408]	; (718c <connection_follow_cb+0x260>)
    6ff2:	849a      	strh	r2, [r3, #36]	; 0x24
			le.update_pending = 0;
    6ff4:	4b65      	ldr	r3, [pc, #404]	; (718c <connection_follow_cb+0x260>)
    6ff6:	2200      	movs	r2, #0
    6ff8:	629a      	str	r2, [r3, #40]	; 0x28
		}

		if (llid == 0x03 && data[0] == 0x00) {
    6ffa:	7afb      	ldrb	r3, [r7, #11]
    6ffc:	2b03      	cmp	r3, #3
    6ffe:	d141      	bne.n	7084 <connection_follow_cb+0x158>
    7000:	693b      	ldr	r3, [r7, #16]
    7002:	781b      	ldrb	r3, [r3, #0]
    7004:	2b00      	cmp	r3, #0
    7006:	d13d      	bne.n	7084 <connection_follow_cb+0x158>
			// This is a CONNECTION_UPDATE_REQ.
			// The host is changing the connection parameters.
			le.win_size_update = packet[7];
    7008:	687b      	ldr	r3, [r7, #4]
    700a:	79da      	ldrb	r2, [r3, #7]
    700c:	4b5f      	ldr	r3, [pc, #380]	; (718c <connection_follow_cb+0x260>)
    700e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			le.win_offset_update = packet[8] + ((u16)packet[9] << 8);
    7012:	687b      	ldr	r3, [r7, #4]
    7014:	3308      	adds	r3, #8
    7016:	781b      	ldrb	r3, [r3, #0]
    7018:	b29a      	uxth	r2, r3
    701a:	687b      	ldr	r3, [r7, #4]
    701c:	3309      	adds	r3, #9
    701e:	781b      	ldrb	r3, [r3, #0]
    7020:	b29b      	uxth	r3, r3
    7022:	021b      	lsls	r3, r3, #8
    7024:	b29b      	uxth	r3, r3
    7026:	4413      	add	r3, r2
    7028:	b29a      	uxth	r2, r3
    702a:	4b58      	ldr	r3, [pc, #352]	; (718c <connection_follow_cb+0x260>)
    702c:	865a      	strh	r2, [r3, #50]	; 0x32
			le.interval_update = packet[10] + ((u16)packet[11] << 8);
    702e:	687b      	ldr	r3, [r7, #4]
    7030:	330a      	adds	r3, #10
    7032:	781b      	ldrb	r3, [r3, #0]
    7034:	b29a      	uxth	r2, r3
    7036:	687b      	ldr	r3, [r7, #4]
    7038:	330b      	adds	r3, #11
    703a:	781b      	ldrb	r3, [r3, #0]
    703c:	b29b      	uxth	r3, r3
    703e:	021b      	lsls	r3, r3, #8
    7040:	b29b      	uxth	r3, r3
    7042:	4413      	add	r3, r2
    7044:	b29a      	uxth	r2, r3
    7046:	4b51      	ldr	r3, [pc, #324]	; (718c <connection_follow_cb+0x260>)
    7048:	85da      	strh	r2, [r3, #46]	; 0x2e
			le.update_instant = packet[16] + ((u16)packet[17] << 8);
    704a:	687b      	ldr	r3, [r7, #4]
    704c:	3310      	adds	r3, #16
    704e:	781b      	ldrb	r3, [r3, #0]
    7050:	b29a      	uxth	r2, r3
    7052:	687b      	ldr	r3, [r7, #4]
    7054:	3311      	adds	r3, #17
    7056:	781b      	ldrb	r3, [r3, #0]
    7058:	b29b      	uxth	r3, r3
    705a:	021b      	lsls	r3, r3, #8
    705c:	b29b      	uxth	r3, r3
    705e:	4413      	add	r3, r2
    7060:	b29a      	uxth	r2, r3
    7062:	4b4a      	ldr	r3, [pc, #296]	; (718c <connection_follow_cb+0x260>)
    7064:	859a      	strh	r2, [r3, #44]	; 0x2c
			if (le.update_instant - le.conn_count < 32767)
    7066:	4b49      	ldr	r3, [pc, #292]	; (718c <connection_follow_cb+0x260>)
    7068:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
    706a:	461a      	mov	r2, r3
    706c:	4b47      	ldr	r3, [pc, #284]	; (718c <connection_follow_cb+0x260>)
    706e:	8c1b      	ldrh	r3, [r3, #32]
    7070:	b29b      	uxth	r3, r3
    7072:	1ad3      	subs	r3, r2, r3
    7074:	f647 72fe 	movw	r2, #32766	; 0x7ffe
    7078:	4293      	cmp	r3, r2
    707a:	dc03      	bgt.n	7084 <connection_follow_cb+0x158>
				le.update_pending = 1;
    707c:	4b43      	ldr	r3, [pc, #268]	; (718c <connection_follow_cb+0x260>)
    707e:	2201      	movs	r2, #1
    7080:	629a      	str	r2, [r3, #40]	; 0x28
    7082:	e07f      	b.n	7184 <connection_follow_cb+0x258>
    7084:	e07e      	b.n	7184 <connection_follow_cb+0x258>
		}

	} else if (le.link_state == LINK_LISTENING) {
    7086:	4b41      	ldr	r3, [pc, #260]	; (718c <connection_follow_cb+0x260>)
    7088:	7d1b      	ldrb	r3, [r3, #20]
    708a:	2b01      	cmp	r3, #1
    708c:	d17a      	bne.n	7184 <connection_follow_cb+0x258>
		u8 pkt_type = packet[4] & 0x0F;
    708e:	687b      	ldr	r3, [r7, #4]
    7090:	3304      	adds	r3, #4
    7092:	781b      	ldrb	r3, [r3, #0]
    7094:	f003 030f 	and.w	r3, r3, #15
    7098:	72bb      	strb	r3, [r7, #10]
		if (pkt_type == 0x05) {
    709a:	7abb      	ldrb	r3, [r7, #10]
    709c:	2b05      	cmp	r3, #5
    709e:	d171      	bne.n	7184 <connection_follow_cb+0x258>
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    70a0:	4b3a      	ldr	r3, [pc, #232]	; (718c <connection_follow_cb+0x260>)
    70a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    70a4:	2b00      	cmp	r3, #0
    70a6:	d014      	beq.n	70d2 <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    70a8:	687b      	ldr	r3, [r7, #4]
    70aa:	3306      	adds	r3, #6
    70ac:	483b      	ldr	r0, [pc, #236]	; (719c <connection_follow_cb+0x270>)
    70ae:	4619      	mov	r1, r3
    70b0:	2206      	movs	r2, #6
    70b2:	f004 faaf 	bl	b614 <memcmp>
    70b6:	4603      	mov	r3, r0
	} else if (le.link_state == LINK_LISTENING) {
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
    70b8:	2b00      	cmp	r3, #0
    70ba:	d00a      	beq.n	70d2 <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
    70bc:	687b      	ldr	r3, [r7, #4]
    70be:	330c      	adds	r3, #12
    70c0:	4836      	ldr	r0, [pc, #216]	; (719c <connection_follow_cb+0x270>)
    70c2:	4619      	mov	r1, r3
    70c4:	2206      	movs	r2, #6
    70c6:	f004 faa5 	bl	b614 <memcmp>
    70ca:	4603      	mov	r3, r0
		u8 pkt_type = packet[4] & 0x0F;
		if (pkt_type == 0x05) {
			// This is a connect packet
			// if we have a target, see if InitA or AdvA matches
			if (le.target_set &&
			    memcmp(le.target, &packet[6], 6) &&  // Target address doesn't match Initiator.
    70cc:	2b00      	cmp	r3, #0
    70ce:	d000      	beq.n	70d2 <connection_follow_cb+0x1a6>
			    memcmp(le.target, &packet[12], 6)) {  // Target address doesn't match Advertiser.
				return;
    70d0:	e058      	b.n	7184 <connection_follow_cb+0x258>
			}

			le.link_state = LINK_CONN_PENDING;
    70d2:	4b2e      	ldr	r3, [pc, #184]	; (718c <connection_follow_cb+0x260>)
    70d4:	2202      	movs	r2, #2
    70d6:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC
    70d8:	4b2c      	ldr	r3, [pc, #176]	; (718c <connection_follow_cb+0x260>)
    70da:	2200      	movs	r2, #0
    70dc:	611a      	str	r2, [r3, #16]

			for (i = 0; i < 4; ++i)
    70de:	2300      	movs	r3, #0
    70e0:	627b      	str	r3, [r7, #36]	; 0x24
    70e2:	e011      	b.n	7108 <connection_follow_cb+0x1dc>
				aa |= packet[18+i] << (i*8);
    70e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    70e6:	3312      	adds	r3, #18
    70e8:	461a      	mov	r2, r3
    70ea:	687b      	ldr	r3, [r7, #4]
    70ec:	4413      	add	r3, r2
    70ee:	781b      	ldrb	r3, [r3, #0]
    70f0:	461a      	mov	r2, r3
    70f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    70f4:	00db      	lsls	r3, r3, #3
    70f6:	fa02 f303 	lsl.w	r3, r2, r3
    70fa:	461a      	mov	r2, r3
    70fc:	6a3b      	ldr	r3, [r7, #32]
    70fe:	4313      	orrs	r3, r2
    7100:	623b      	str	r3, [r7, #32]
			}

			le.link_state = LINK_CONN_PENDING;
			le.crc_verify = 0; // we will drop many packets if we attempt to filter by CRC

			for (i = 0; i < 4; ++i)
    7102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    7104:	3301      	adds	r3, #1
    7106:	627b      	str	r3, [r7, #36]	; 0x24
    7108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    710a:	2b03      	cmp	r3, #3
    710c:	ddea      	ble.n	70e4 <connection_follow_cb+0x1b8>
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);
    710e:	6a38      	ldr	r0, [r7, #32]
    7110:	f7ff f97e 	bl	6410 <le_set_access_address>

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    7114:	687b      	ldr	r3, [r7, #4]
    7116:	3318      	adds	r3, #24
    7118:	781b      	ldrb	r3, [r3, #0]
    711a:	041a      	lsls	r2, r3, #16
						| (packet[CRC_INIT+1] << 8)
    711c:	687b      	ldr	r3, [r7, #4]
    711e:	3317      	adds	r3, #23
    7120:	781b      	ldrb	r3, [r3, #0]
    7122:	021b      	lsls	r3, r3, #8
    7124:	4313      	orrs	r3, r2
						|  packet[CRC_INIT+0];
    7126:	687a      	ldr	r2, [r7, #4]
    7128:	3216      	adds	r2, #22
    712a:	7812      	ldrb	r2, [r2, #0]
    712c:	4313      	orrs	r3, r2
			for (i = 0; i < 4; ++i)
				aa |= packet[18+i] << (i*8);
			le_set_access_address(aa);

#define CRC_INIT (2+4+6+6+4)
			le.crc_init = (packet[CRC_INIT+2] << 16)
    712e:	461a      	mov	r2, r3
    7130:	4b16      	ldr	r3, [pc, #88]	; (718c <connection_follow_cb+0x260>)
    7132:	609a      	str	r2, [r3, #8]
						| (packet[CRC_INIT+1] << 8)
						|  packet[CRC_INIT+0];
			le.crc_init_reversed = rbit(le.crc_init);
    7134:	4b15      	ldr	r3, [pc, #84]	; (718c <connection_follow_cb+0x260>)
    7136:	689b      	ldr	r3, [r3, #8]
    7138:	4618      	mov	r0, r3
    713a:	f002 faf7 	bl	972c <rbit>
    713e:	4602      	mov	r2, r0
    7140:	4b12      	ldr	r3, [pc, #72]	; (718c <connection_follow_cb+0x260>)
    7142:	60da      	str	r2, [r3, #12]

#define WIN_SIZE (2+4+6+6+4+3)
			le.win_size = packet[WIN_SIZE];
    7144:	687b      	ldr	r3, [r7, #4]
    7146:	7e5a      	ldrb	r2, [r3, #25]
    7148:	4b10      	ldr	r3, [pc, #64]	; (718c <connection_follow_cb+0x260>)
    714a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

#define WIN_OFFSET (2+4+6+6+4+3+1)
			le.win_offset = packet[WIN_OFFSET];
    714e:	687b      	ldr	r3, [r7, #4]
    7150:	331a      	adds	r3, #26
    7152:	781b      	ldrb	r3, [r3, #0]
    7154:	b29a      	uxth	r2, r3
    7156:	4b0d      	ldr	r3, [pc, #52]	; (718c <connection_follow_cb+0x260>)
    7158:	849a      	strh	r2, [r3, #36]	; 0x24

#define CONN_INTERVAL (2+4+6+6+4+3+1+2)
			le.conn_interval = packet[CONN_INTERVAL];
    715a:	687b      	ldr	r3, [r7, #4]
    715c:	331c      	adds	r3, #28
    715e:	781b      	ldrb	r3, [r3, #0]
    7160:	b29a      	uxth	r2, r3
    7162:	4b0a      	ldr	r3, [pc, #40]	; (718c <connection_follow_cb+0x260>)
    7164:	83da      	strh	r2, [r3, #30]

#define CHANNEL_INC (2+4+6+6+4+3+1+2+2+2+2+5)
			le.channel_increment = packet[CHANNEL_INC] & 0x1f;
    7166:	687b      	ldr	r3, [r7, #4]
    7168:	3327      	adds	r3, #39	; 0x27
    716a:	781b      	ldrb	r3, [r3, #0]
    716c:	f003 031f 	and.w	r3, r3, #31
    7170:	b2da      	uxtb	r2, r3
    7172:	4b06      	ldr	r3, [pc, #24]	; (718c <connection_follow_cb+0x260>)
    7174:	759a      	strb	r2, [r3, #22]
			le.channel_idx = le.channel_increment;
    7176:	4b05      	ldr	r3, [pc, #20]	; (718c <connection_follow_cb+0x260>)
    7178:	7d9a      	ldrb	r2, [r3, #22]
    717a:	4b04      	ldr	r3, [pc, #16]	; (718c <connection_follow_cb+0x260>)
    717c:	755a      	strb	r2, [r3, #21]

			// Hop to the initial channel immediately
			do_hop = 1;
    717e:	4b08      	ldr	r3, [pc, #32]	; (71a0 <connection_follow_cb+0x274>)
    7180:	2201      	movs	r2, #1
    7182:	701a      	strb	r2, [r3, #0]
		}
	}
}
    7184:	3728      	adds	r7, #40	; 0x28
    7186:	46bd      	mov	sp, r7
    7188:	bd80      	pop	{r7, pc}
    718a:	bf00      	nop
    718c:	10000458 	.word	0x10000458
    7190:	10000be4 	.word	0x10000be4
    7194:	10000a40 	.word	0x10000a40
    7198:	10000994 	.word	0x10000994
    719c:	1000048c 	.word	0x1000048c
    71a0:	1000097d 	.word	0x1000097d

000071a4 <bt_follow_le>:

void bt_follow_le() {
    71a4:	b580      	push	{r7, lr}
    71a6:	af00      	add	r7, sp, #0
	reset_le();
    71a8:	f7ff f94c 	bl	6444 <reset_le>
	packet_cb = connection_follow_cb;
    71ac:	4b04      	ldr	r3, [pc, #16]	; (71c0 <bt_follow_le+0x1c>)
    71ae:	4a05      	ldr	r2, [pc, #20]	; (71c4 <bt_follow_le+0x20>)
    71b0:	601a      	str	r2, [r3, #0]
	bt_le_sync(MODE_BT_FOLLOW_LE);
    71b2:	2009      	movs	r0, #9
    71b4:	f7ff fb1e 	bl	67f4 <bt_le_sync>
	data_cb = cb_follow_le;
	packet_cb = connection_follow_cb;
	bt_generic_le(MODE_BT_FOLLOW_LE);
	*/

	mode = MODE_IDLE;
    71b8:	4b03      	ldr	r3, [pc, #12]	; (71c8 <bt_follow_le+0x24>)
    71ba:	2200      	movs	r2, #0
    71bc:	701a      	strb	r2, [r3, #0]
}
    71be:	bd80      	pop	{r7, pc}
    71c0:	1000099c 	.word	0x1000099c
    71c4:	00006f2d 	.word	0x00006f2d
    71c8:	10000a3e 	.word	0x10000a3e

000071cc <le_promisc_state>:

// issue state change message
void le_promisc_state(u8 type, void *data, unsigned len) {
    71cc:	b580      	push	{r7, lr}
    71ce:	b092      	sub	sp, #72	; 0x48
    71d0:	af00      	add	r7, sp, #0
    71d2:	4603      	mov	r3, r0
    71d4:	60b9      	str	r1, [r7, #8]
    71d6:	607a      	str	r2, [r7, #4]
    71d8:	73fb      	strb	r3, [r7, #15]
	u8 buf[50] = { 0, };
    71da:	f107 0314 	add.w	r3, r7, #20
    71de:	2200      	movs	r2, #0
    71e0:	601a      	str	r2, [r3, #0]
    71e2:	3304      	adds	r3, #4
    71e4:	2200      	movs	r2, #0
    71e6:	601a      	str	r2, [r3, #0]
    71e8:	3304      	adds	r3, #4
    71ea:	2200      	movs	r2, #0
    71ec:	601a      	str	r2, [r3, #0]
    71ee:	3304      	adds	r3, #4
    71f0:	2200      	movs	r2, #0
    71f2:	601a      	str	r2, [r3, #0]
    71f4:	3304      	adds	r3, #4
    71f6:	2200      	movs	r2, #0
    71f8:	601a      	str	r2, [r3, #0]
    71fa:	3304      	adds	r3, #4
    71fc:	2200      	movs	r2, #0
    71fe:	601a      	str	r2, [r3, #0]
    7200:	3304      	adds	r3, #4
    7202:	2200      	movs	r2, #0
    7204:	601a      	str	r2, [r3, #0]
    7206:	3304      	adds	r3, #4
    7208:	2200      	movs	r2, #0
    720a:	601a      	str	r2, [r3, #0]
    720c:	3304      	adds	r3, #4
    720e:	2200      	movs	r2, #0
    7210:	601a      	str	r2, [r3, #0]
    7212:	3304      	adds	r3, #4
    7214:	2200      	movs	r2, #0
    7216:	601a      	str	r2, [r3, #0]
    7218:	3304      	adds	r3, #4
    721a:	2200      	movs	r2, #0
    721c:	601a      	str	r2, [r3, #0]
    721e:	3304      	adds	r3, #4
    7220:	2200      	movs	r2, #0
    7222:	601a      	str	r2, [r3, #0]
    7224:	3304      	adds	r3, #4
    7226:	2200      	movs	r2, #0
    7228:	801a      	strh	r2, [r3, #0]
    722a:	3302      	adds	r3, #2
	if (len > 49)
    722c:	687b      	ldr	r3, [r7, #4]
    722e:	2b31      	cmp	r3, #49	; 0x31
    7230:	d901      	bls.n	7236 <le_promisc_state+0x6a>
		len = 49;
    7232:	2331      	movs	r3, #49	; 0x31
    7234:	607b      	str	r3, [r7, #4]

	buf[0] = type;
    7236:	7bfb      	ldrb	r3, [r7, #15]
    7238:	753b      	strb	r3, [r7, #20]
	memcpy(&buf[1], data, len);
    723a:	f107 0314 	add.w	r3, r7, #20
    723e:	3301      	adds	r3, #1
    7240:	4618      	mov	r0, r3
    7242:	68b9      	ldr	r1, [r7, #8]
    7244:	687a      	ldr	r2, [r7, #4]
    7246:	f004 fa17 	bl	b678 <memcpy>
	enqueue(LE_PROMISC, buf);
    724a:	f107 0314 	add.w	r3, r7, #20
    724e:	2005      	movs	r0, #5
    7250:	4619      	mov	r1, r3
    7252:	f7fd f939 	bl	44c8 <enqueue>
}
    7256:	3748      	adds	r7, #72	; 0x48
    7258:	46bd      	mov	sp, r7
    725a:	bd80      	pop	{r7, pc}

0000725c <promisc_recover_hop_increment>:

// divide, rounding to the nearest integer: round up at 0.5.
#define DIVIDE_ROUND(N, D) ((N) + (D)/2) / (D)

void promisc_recover_hop_increment(u8 *packet) {
    725c:	b580      	push	{r7, lr}
    725e:	b084      	sub	sp, #16
    7260:	af00      	add	r7, sp, #0
    7262:	6078      	str	r0, [r7, #4]
	static u32 first_ts = 0;
	if (channel == 2404) {
    7264:	4b55      	ldr	r3, [pc, #340]	; (73bc <promisc_recover_hop_increment+0x160>)
    7266:	881b      	ldrh	r3, [r3, #0]
    7268:	b29b      	uxth	r3, r3
    726a:	f640 1264 	movw	r2, #2404	; 0x964
    726e:	4293      	cmp	r3, r2
    7270:	d114      	bne.n	729c <promisc_recover_hop_increment+0x40>
		first_ts = CLK100NS;
    7272:	4b53      	ldr	r3, [pc, #332]	; (73c0 <promisc_recover_hop_increment+0x164>)
    7274:	681b      	ldr	r3, [r3, #0]
    7276:	f3c3 0313 	ubfx	r3, r3, #0, #20
    727a:	f640 4235 	movw	r2, #3125	; 0xc35
    727e:	fb02 f203 	mul.w	r2, r2, r3
    7282:	4b50      	ldr	r3, [pc, #320]	; (73c4 <promisc_recover_hop_increment+0x168>)
    7284:	681b      	ldr	r3, [r3, #0]
    7286:	4413      	add	r3, r2
    7288:	4a4f      	ldr	r2, [pc, #316]	; (73c8 <promisc_recover_hop_increment+0x16c>)
    728a:	6013      	str	r3, [r2, #0]
		hop_direct_channel = 2406;
    728c:	4b4f      	ldr	r3, [pc, #316]	; (73cc <promisc_recover_hop_increment+0x170>)
    728e:	f640 1266 	movw	r2, #2406	; 0x966
    7292:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    7294:	4b4e      	ldr	r3, [pc, #312]	; (73d0 <promisc_recover_hop_increment+0x174>)
    7296:	2201      	movs	r2, #1
    7298:	701a      	strb	r2, [r3, #0]
    729a:	e08b      	b.n	73b4 <promisc_recover_hop_increment+0x158>
	} else if (channel == 2406) {
    729c:	4b47      	ldr	r3, [pc, #284]	; (73bc <promisc_recover_hop_increment+0x160>)
    729e:	881b      	ldrh	r3, [r3, #0]
    72a0:	b29b      	uxth	r3, r3
    72a2:	f640 1266 	movw	r2, #2406	; 0x966
    72a6:	4293      	cmp	r3, r2
    72a8:	d17d      	bne.n	73a6 <promisc_recover_hop_increment+0x14a>
		u32 second_ts = CLK100NS;
    72aa:	4b45      	ldr	r3, [pc, #276]	; (73c0 <promisc_recover_hop_increment+0x164>)
    72ac:	681b      	ldr	r3, [r3, #0]
    72ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
    72b2:	f640 4235 	movw	r2, #3125	; 0xc35
    72b6:	fb02 f203 	mul.w	r2, r2, r3
    72ba:	4b42      	ldr	r3, [pc, #264]	; (73c4 <promisc_recover_hop_increment+0x168>)
    72bc:	681b      	ldr	r3, [r3, #0]
    72be:	4413      	add	r3, r2
    72c0:	60fb      	str	r3, [r7, #12]
		if (second_ts < first_ts)
    72c2:	4b41      	ldr	r3, [pc, #260]	; (73c8 <promisc_recover_hop_increment+0x16c>)
    72c4:	681b      	ldr	r3, [r3, #0]
    72c6:	68fa      	ldr	r2, [r7, #12]
    72c8:	429a      	cmp	r2, r3
    72ca:	d205      	bcs.n	72d8 <promisc_recover_hop_increment+0x7c>
			second_ts += 3276800000; // handle rollover
    72cc:	68fb      	ldr	r3, [r7, #12]
    72ce:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    72d2:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    72d6:	60fb      	str	r3, [r7, #12]
		// Number of channels hopped between previous and current timestamp.
		u32 channels_hopped = DIVIDE_ROUND(second_ts - first_ts,
    72d8:	4b3b      	ldr	r3, [pc, #236]	; (73c8 <promisc_recover_hop_increment+0x16c>)
    72da:	681b      	ldr	r3, [r3, #0]
    72dc:	68fa      	ldr	r2, [r7, #12]
    72de:	1ad2      	subs	r2, r2, r3
    72e0:	4b3c      	ldr	r3, [pc, #240]	; (73d4 <promisc_recover_hop_increment+0x178>)
    72e2:	8bdb      	ldrh	r3, [r3, #30]
    72e4:	4619      	mov	r1, r3
    72e6:	f243 03d4 	movw	r3, #12500	; 0x30d4
    72ea:	fb03 f301 	mul.w	r3, r3, r1
    72ee:	0fd9      	lsrs	r1, r3, #31
    72f0:	440b      	add	r3, r1
    72f2:	105b      	asrs	r3, r3, #1
    72f4:	4413      	add	r3, r2
    72f6:	4a37      	ldr	r2, [pc, #220]	; (73d4 <promisc_recover_hop_increment+0x178>)
    72f8:	8bd2      	ldrh	r2, [r2, #30]
    72fa:	4611      	mov	r1, r2
    72fc:	f243 02d4 	movw	r2, #12500	; 0x30d4
    7300:	fb02 f201 	mul.w	r2, r2, r1
    7304:	fbb3 f3f2 	udiv	r3, r3, r2
    7308:	60bb      	str	r3, [r7, #8]
										   le.conn_interval * LE_BASECLK);
		if (channels_hopped < 37) {
    730a:	68bb      	ldr	r3, [r7, #8]
    730c:	2b24      	cmp	r3, #36	; 0x24
    730e:	d842      	bhi.n	7396 <promisc_recover_hop_increment+0x13a>
			// Get the hop increment based on the number of channels hopped.
			le.channel_increment = hop_interval_lut[channels_hopped];
    7310:	4a31      	ldr	r2, [pc, #196]	; (73d8 <promisc_recover_hop_increment+0x17c>)
    7312:	68bb      	ldr	r3, [r7, #8]
    7314:	4413      	add	r3, r2
    7316:	781a      	ldrb	r2, [r3, #0]
    7318:	4b2e      	ldr	r3, [pc, #184]	; (73d4 <promisc_recover_hop_increment+0x178>)
    731a:	759a      	strb	r2, [r3, #22]
			le.interval_timer = le.conn_interval / 2;
    731c:	4b2d      	ldr	r3, [pc, #180]	; (73d4 <promisc_recover_hop_increment+0x178>)
    731e:	8bdb      	ldrh	r3, [r3, #30]
    7320:	085b      	lsrs	r3, r3, #1
    7322:	b29a      	uxth	r2, r3
    7324:	4b2b      	ldr	r3, [pc, #172]	; (73d4 <promisc_recover_hop_increment+0x178>)
    7326:	839a      	strh	r2, [r3, #28]
			le.conn_count = 0;
    7328:	4b2a      	ldr	r3, [pc, #168]	; (73d4 <promisc_recover_hop_increment+0x178>)
    732a:	2200      	movs	r2, #0
    732c:	841a      	strh	r2, [r3, #32]
			le.conn_epoch = 0;
    732e:	4b29      	ldr	r3, [pc, #164]	; (73d4 <promisc_recover_hop_increment+0x178>)
    7330:	2200      	movs	r2, #0
    7332:	619a      	str	r2, [r3, #24]
			do_hop = 0;
    7334:	4b26      	ldr	r3, [pc, #152]	; (73d0 <promisc_recover_hop_increment+0x174>)
    7336:	2200      	movs	r2, #0
    7338:	701a      	strb	r2, [r3, #0]
			// Move on to regular connection following.
			le.channel_idx = (1 + le.channel_increment) % 37;
    733a:	4b26      	ldr	r3, [pc, #152]	; (73d4 <promisc_recover_hop_increment+0x178>)
    733c:	7d9b      	ldrb	r3, [r3, #22]
    733e:	1c5a      	adds	r2, r3, #1
    7340:	4b26      	ldr	r3, [pc, #152]	; (73dc <promisc_recover_hop_increment+0x180>)
    7342:	fb82 0103 	smull	r0, r1, r2, r3
    7346:	1853      	adds	r3, r2, r1
    7348:	1159      	asrs	r1, r3, #5
    734a:	17d3      	asrs	r3, r2, #31
    734c:	1ac9      	subs	r1, r1, r3
    734e:	460b      	mov	r3, r1
    7350:	00db      	lsls	r3, r3, #3
    7352:	440b      	add	r3, r1
    7354:	009b      	lsls	r3, r3, #2
    7356:	440b      	add	r3, r1
    7358:	1ad1      	subs	r1, r2, r3
    735a:	b2ca      	uxtb	r2, r1
    735c:	4b1d      	ldr	r3, [pc, #116]	; (73d4 <promisc_recover_hop_increment+0x178>)
    735e:	755a      	strb	r2, [r3, #21]
			le.link_state = LINK_CONNECTED;
    7360:	4b1c      	ldr	r3, [pc, #112]	; (73d4 <promisc_recover_hop_increment+0x178>)
    7362:	2203      	movs	r2, #3
    7364:	751a      	strb	r2, [r3, #20]
			le.crc_verify = 0;
    7366:	4b1b      	ldr	r3, [pc, #108]	; (73d4 <promisc_recover_hop_increment+0x178>)
    7368:	2200      	movs	r2, #0
    736a:	611a      	str	r2, [r3, #16]
			hop_mode = HOP_BTLE;
    736c:	4b1c      	ldr	r3, [pc, #112]	; (73e0 <promisc_recover_hop_increment+0x184>)
    736e:	2203      	movs	r2, #3
    7370:	701a      	strb	r2, [r3, #0]
			packet_cb = connection_follow_cb;
    7372:	4b1c      	ldr	r3, [pc, #112]	; (73e4 <promisc_recover_hop_increment+0x188>)
    7374:	4a1c      	ldr	r2, [pc, #112]	; (73e8 <promisc_recover_hop_increment+0x18c>)
    7376:	601a      	str	r2, [r3, #0]
			le_promisc_state(3, &le.channel_increment, 1);
    7378:	2003      	movs	r0, #3
    737a:	491c      	ldr	r1, [pc, #112]	; (73ec <promisc_recover_hop_increment+0x190>)
    737c:	2201      	movs	r2, #1
    737e:	f7ff ff25 	bl	71cc <le_promisc_state>

			if (jam_mode != JAM_NONE)
    7382:	4b1b      	ldr	r3, [pc, #108]	; (73f0 <promisc_recover_hop_increment+0x194>)
    7384:	781b      	ldrb	r3, [r3, #0]
    7386:	b2db      	uxtb	r3, r3
    7388:	2b00      	cmp	r3, #0
    738a:	d003      	beq.n	7394 <promisc_recover_hop_increment+0x138>
				le_jam_count = JAM_COUNT_DEFAULT;
    738c:	4b19      	ldr	r3, [pc, #100]	; (73f4 <promisc_recover_hop_increment+0x198>)
    738e:	2228      	movs	r2, #40	; 0x28
    7390:	601a      	str	r2, [r3, #0]

			return;
    7392:	e00f      	b.n	73b4 <promisc_recover_hop_increment+0x158>
    7394:	e00e      	b.n	73b4 <promisc_recover_hop_increment+0x158>
		}
		hop_direct_channel = 2404;
    7396:	4b0d      	ldr	r3, [pc, #52]	; (73cc <promisc_recover_hop_increment+0x170>)
    7398:	f640 1264 	movw	r2, #2404	; 0x964
    739c:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    739e:	4b0c      	ldr	r3, [pc, #48]	; (73d0 <promisc_recover_hop_increment+0x174>)
    73a0:	2201      	movs	r2, #1
    73a2:	701a      	strb	r2, [r3, #0]
    73a4:	e006      	b.n	73b4 <promisc_recover_hop_increment+0x158>
	}
	else {
		hop_direct_channel = 2404;
    73a6:	4b09      	ldr	r3, [pc, #36]	; (73cc <promisc_recover_hop_increment+0x170>)
    73a8:	f640 1264 	movw	r2, #2404	; 0x964
    73ac:	801a      	strh	r2, [r3, #0]
		do_hop = 1;
    73ae:	4b08      	ldr	r3, [pc, #32]	; (73d0 <promisc_recover_hop_increment+0x174>)
    73b0:	2201      	movs	r2, #1
    73b2:	701a      	strb	r2, [r3, #0]
	}
}
    73b4:	3710      	adds	r7, #16
    73b6:	46bd      	mov	sp, r7
    73b8:	bd80      	pop	{r7, pc}
    73ba:	bf00      	nop
    73bc:	1000049c 	.word	0x1000049c
    73c0:	10000be4 	.word	0x10000be4
    73c4:	40004008 	.word	0x40004008
    73c8:	10000a54 	.word	0x10000a54
    73cc:	10000980 	.word	0x10000980
    73d0:	1000097d 	.word	0x1000097d
    73d4:	10000458 	.word	0x10000458
    73d8:	0000b89c 	.word	0x0000b89c
    73dc:	dd67c8a7 	.word	0xdd67c8a7
    73e0:	1000097c 	.word	0x1000097c
    73e4:	1000099c 	.word	0x1000099c
    73e8:	00006f2d 	.word	0x00006f2d
    73ec:	1000046e 	.word	0x1000046e
    73f0:	10000a40 	.word	0x10000a40
    73f4:	10000994 	.word	0x10000994

000073f8 <promisc_recover_hop_interval>:

void promisc_recover_hop_interval(u8 *packet) {
    73f8:	b580      	push	{r7, lr}
    73fa:	b086      	sub	sp, #24
    73fc:	af00      	add	r7, sp, #0
    73fe:	6078      	str	r0, [r7, #4]
	static u32 prev_clk = 0;

	u32 cur_clk = CLK100NS;
    7400:	4b33      	ldr	r3, [pc, #204]	; (74d0 <promisc_recover_hop_interval+0xd8>)
    7402:	681b      	ldr	r3, [r3, #0]
    7404:	f3c3 0313 	ubfx	r3, r3, #0, #20
    7408:	f640 4235 	movw	r2, #3125	; 0xc35
    740c:	fb02 f203 	mul.w	r2, r2, r3
    7410:	4b30      	ldr	r3, [pc, #192]	; (74d4 <promisc_recover_hop_interval+0xdc>)
    7412:	681b      	ldr	r3, [r3, #0]
    7414:	4413      	add	r3, r2
    7416:	617b      	str	r3, [r7, #20]
	if (cur_clk < prev_clk)
    7418:	4b2f      	ldr	r3, [pc, #188]	; (74d8 <promisc_recover_hop_interval+0xe0>)
    741a:	681b      	ldr	r3, [r3, #0]
    741c:	697a      	ldr	r2, [r7, #20]
    741e:	429a      	cmp	r2, r3
    7420:	d203      	bcs.n	742a <promisc_recover_hop_interval+0x32>
		cur_clk += 3267800000; // handle rollover
    7422:	697a      	ldr	r2, [r7, #20]
    7424:	4b2d      	ldr	r3, [pc, #180]	; (74dc <promisc_recover_hop_interval+0xe4>)
    7426:	4413      	add	r3, r2
    7428:	617b      	str	r3, [r7, #20]
	u32 clk_diff = cur_clk - prev_clk;
    742a:	4b2b      	ldr	r3, [pc, #172]	; (74d8 <promisc_recover_hop_interval+0xe0>)
    742c:	681b      	ldr	r3, [r3, #0]
    742e:	697a      	ldr	r2, [r7, #20]
    7430:	1ad3      	subs	r3, r2, r3
    7432:	613b      	str	r3, [r7, #16]
	u16 obsv_hop_interval; // observed hop interval

	// probably consecutive data packets on the same channel
	if (clk_diff < 2 * LE_BASECLK)
    7434:	693b      	ldr	r3, [r7, #16]
    7436:	f246 12a7 	movw	r2, #24999	; 0x61a7
    743a:	4293      	cmp	r3, r2
    743c:	d800      	bhi.n	7440 <promisc_recover_hop_interval+0x48>
		return;
    743e:	e043      	b.n	74c8 <promisc_recover_hop_interval+0xd0>

	if (clk_diff < le_promisc.smallest_hop_interval)
    7440:	4b27      	ldr	r3, [pc, #156]	; (74e0 <promisc_recover_hop_interval+0xe8>)
    7442:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    7446:	693b      	ldr	r3, [r7, #16]
    7448:	429a      	cmp	r2, r3
    744a:	d903      	bls.n	7454 <promisc_recover_hop_interval+0x5c>
		le_promisc.smallest_hop_interval = clk_diff;
    744c:	4a24      	ldr	r2, [pc, #144]	; (74e0 <promisc_recover_hop_interval+0xe8>)
    744e:	693b      	ldr	r3, [r7, #16]
    7450:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

	obsv_hop_interval = DIVIDE_ROUND(le_promisc.smallest_hop_interval, 37 * LE_BASECLK);
    7454:	4b22      	ldr	r3, [pc, #136]	; (74e0 <promisc_recover_hop_interval+0xe8>)
    7456:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    745a:	f503 3361 	add.w	r3, r3, #230400	; 0x38400
    745e:	f203 3352 	addw	r3, r3, #850	; 0x352
    7462:	4a20      	ldr	r2, [pc, #128]	; (74e4 <promisc_recover_hop_interval+0xec>)
    7464:	fba2 2303 	umull	r2, r3, r2, r3
    7468:	0c9b      	lsrs	r3, r3, #18
    746a:	81fb      	strh	r3, [r7, #14]

	if (le.conn_interval == obsv_hop_interval) {
    746c:	4b1e      	ldr	r3, [pc, #120]	; (74e8 <promisc_recover_hop_interval+0xf0>)
    746e:	8bdb      	ldrh	r3, [r3, #30]
    7470:	89fa      	ldrh	r2, [r7, #14]
    7472:	429a      	cmp	r2, r3
    7474:	d11e      	bne.n	74b4 <promisc_recover_hop_interval+0xbc>
		// 5 consecutive hop intervals: consider it legit and move on
		++le_promisc.consec_intervals;
    7476:	4b1a      	ldr	r3, [pc, #104]	; (74e0 <promisc_recover_hop_interval+0xe8>)
    7478:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    747c:	3301      	adds	r3, #1
    747e:	4a18      	ldr	r2, [pc, #96]	; (74e0 <promisc_recover_hop_interval+0xe8>)
    7480:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
		if (le_promisc.consec_intervals == 5) {
    7484:	4b16      	ldr	r3, [pc, #88]	; (74e0 <promisc_recover_hop_interval+0xe8>)
    7486:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    748a:	2b05      	cmp	r3, #5
    748c:	d119      	bne.n	74c2 <promisc_recover_hop_interval+0xca>
			packet_cb = promisc_recover_hop_increment;
    748e:	4b17      	ldr	r3, [pc, #92]	; (74ec <promisc_recover_hop_interval+0xf4>)
    7490:	4a17      	ldr	r2, [pc, #92]	; (74f0 <promisc_recover_hop_interval+0xf8>)
    7492:	601a      	str	r2, [r3, #0]
			hop_direct_channel = 2404;
    7494:	4b17      	ldr	r3, [pc, #92]	; (74f4 <promisc_recover_hop_interval+0xfc>)
    7496:	f640 1264 	movw	r2, #2404	; 0x964
    749a:	801a      	strh	r2, [r3, #0]
			hop_mode = HOP_DIRECT;
    749c:	4b16      	ldr	r3, [pc, #88]	; (74f8 <promisc_recover_hop_interval+0x100>)
    749e:	2204      	movs	r2, #4
    74a0:	701a      	strb	r2, [r3, #0]
			do_hop = 1;
    74a2:	4b16      	ldr	r3, [pc, #88]	; (74fc <promisc_recover_hop_interval+0x104>)
    74a4:	2201      	movs	r2, #1
    74a6:	701a      	strb	r2, [r3, #0]
			le_promisc_state(2, &le.conn_interval, 2);
    74a8:	2002      	movs	r0, #2
    74aa:	4915      	ldr	r1, [pc, #84]	; (7500 <promisc_recover_hop_interval+0x108>)
    74ac:	2202      	movs	r2, #2
    74ae:	f7ff fe8d 	bl	71cc <le_promisc_state>
    74b2:	e006      	b.n	74c2 <promisc_recover_hop_interval+0xca>
		}
	} else {
		le.conn_interval = obsv_hop_interval;
    74b4:	4a0c      	ldr	r2, [pc, #48]	; (74e8 <promisc_recover_hop_interval+0xf0>)
    74b6:	89fb      	ldrh	r3, [r7, #14]
    74b8:	83d3      	strh	r3, [r2, #30]
		le_promisc.consec_intervals = 0;
    74ba:	4b09      	ldr	r3, [pc, #36]	; (74e0 <promisc_recover_hop_interval+0xe8>)
    74bc:	2200      	movs	r2, #0
    74be:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	}

	prev_clk = cur_clk;
    74c2:	4a05      	ldr	r2, [pc, #20]	; (74d8 <promisc_recover_hop_interval+0xe0>)
    74c4:	697b      	ldr	r3, [r7, #20]
    74c6:	6013      	str	r3, [r2, #0]
}
    74c8:	3718      	adds	r7, #24
    74ca:	46bd      	mov	sp, r7
    74cc:	bd80      	pop	{r7, pc}
    74ce:	bf00      	nop
    74d0:	10000be4 	.word	0x10000be4
    74d4:	40004008 	.word	0x40004008
    74d8:	10000a58 	.word	0x10000a58
    74dc:	c2c6abc0 	.word	0xc2c6abc0
    74e0:	10000bec 	.word	0x10000bec
    74e4:	9119a9c1 	.word	0x9119a9c1
    74e8:	10000458 	.word	0x10000458
    74ec:	1000099c 	.word	0x1000099c
    74f0:	0000725d 	.word	0x0000725d
    74f4:	10000980 	.word	0x10000980
    74f8:	1000097c 	.word	0x1000097c
    74fc:	1000097d 	.word	0x1000097d
    7500:	10000476 	.word	0x10000476

00007504 <promisc_follow_cb>:

void promisc_follow_cb(u8 *packet) {
    7504:	b580      	push	{r7, lr}
    7506:	b084      	sub	sp, #16
    7508:	af00      	add	r7, sp, #0
    750a:	6078      	str	r0, [r7, #4]
	int i;

	// get the CRCInit
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
    750c:	4b28      	ldr	r3, [pc, #160]	; (75b0 <promisc_follow_cb+0xac>)
    750e:	691b      	ldr	r3, [r3, #16]
    7510:	2b00      	cmp	r3, #0
    7512:	d149      	bne.n	75a8 <promisc_follow_cb+0xa4>
    7514:	687b      	ldr	r3, [r7, #4]
    7516:	3304      	adds	r3, #4
    7518:	781b      	ldrb	r3, [r3, #0]
    751a:	2b01      	cmp	r3, #1
    751c:	d144      	bne.n	75a8 <promisc_follow_cb+0xa4>
    751e:	687b      	ldr	r3, [r7, #4]
    7520:	3305      	adds	r3, #5
    7522:	781b      	ldrb	r3, [r3, #0]
    7524:	2b00      	cmp	r3, #0
    7526:	d13f      	bne.n	75a8 <promisc_follow_cb+0xa4>
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];
    7528:	687b      	ldr	r3, [r7, #4]
    752a:	3308      	adds	r3, #8
    752c:	781b      	ldrb	r3, [r3, #0]
    752e:	041a      	lsls	r2, r3, #16
    7530:	687b      	ldr	r3, [r7, #4]
    7532:	3307      	adds	r3, #7
    7534:	781b      	ldrb	r3, [r3, #0]
    7536:	021b      	lsls	r3, r3, #8
    7538:	4313      	orrs	r3, r2
    753a:	687a      	ldr	r2, [r7, #4]
    753c:	3206      	adds	r2, #6
    753e:	7812      	ldrb	r2, [r2, #0]
    7540:	4313      	orrs	r3, r2
    7542:	60bb      	str	r3, [r7, #8]

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
    7544:	687b      	ldr	r3, [r7, #4]
    7546:	3304      	adds	r3, #4
    7548:	68b8      	ldr	r0, [r7, #8]
    754a:	4619      	mov	r1, r3
    754c:	2202      	movs	r2, #2
    754e:	f000 ff69 	bl	8424 <btle_reverse_crc>
    7552:	4602      	mov	r2, r0
    7554:	4b16      	ldr	r3, [pc, #88]	; (75b0 <promisc_follow_cb+0xac>)
    7556:	609a      	str	r2, [r3, #8]
		le.crc_init_reversed = 0;
    7558:	4b15      	ldr	r3, [pc, #84]	; (75b0 <promisc_follow_cb+0xac>)
    755a:	2200      	movs	r2, #0
    755c:	60da      	str	r2, [r3, #12]
		for (i = 0; i < 24; ++i)
    755e:	2300      	movs	r3, #0
    7560:	60fb      	str	r3, [r7, #12]
    7562:	e013      	b.n	758c <promisc_follow_cb+0x88>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);
    7564:	4b12      	ldr	r3, [pc, #72]	; (75b0 <promisc_follow_cb+0xac>)
    7566:	68da      	ldr	r2, [r3, #12]
    7568:	4b11      	ldr	r3, [pc, #68]	; (75b0 <promisc_follow_cb+0xac>)
    756a:	6899      	ldr	r1, [r3, #8]
    756c:	68fb      	ldr	r3, [r7, #12]
    756e:	fa21 f303 	lsr.w	r3, r1, r3
    7572:	f003 0101 	and.w	r1, r3, #1
    7576:	68fb      	ldr	r3, [r7, #12]
    7578:	f1c3 0317 	rsb	r3, r3, #23
    757c:	fa01 f303 	lsl.w	r3, r1, r3
    7580:	4313      	orrs	r3, r2
    7582:	4a0b      	ldr	r2, [pc, #44]	; (75b0 <promisc_follow_cb+0xac>)
    7584:	60d3      	str	r3, [r2, #12]
	if (!le.crc_verify && packet[4] == 0x01 && packet[5] == 0x00) {
		u32 crc = (packet[8] << 16) | (packet[7] << 8) | packet[6];

		le.crc_init = btle_reverse_crc(crc, packet + 4, 2);
		le.crc_init_reversed = 0;
		for (i = 0; i < 24; ++i)
    7586:	68fb      	ldr	r3, [r7, #12]
    7588:	3301      	adds	r3, #1
    758a:	60fb      	str	r3, [r7, #12]
    758c:	68fb      	ldr	r3, [r7, #12]
    758e:	2b17      	cmp	r3, #23
    7590:	dde8      	ble.n	7564 <promisc_follow_cb+0x60>
			le.crc_init_reversed |= ((le.crc_init >> i) & 1) << (23 - i);

		le.crc_verify = 1;
    7592:	4b07      	ldr	r3, [pc, #28]	; (75b0 <promisc_follow_cb+0xac>)
    7594:	2201      	movs	r2, #1
    7596:	611a      	str	r2, [r3, #16]
		packet_cb = promisc_recover_hop_interval;
    7598:	4b06      	ldr	r3, [pc, #24]	; (75b4 <promisc_follow_cb+0xb0>)
    759a:	4a07      	ldr	r2, [pc, #28]	; (75b8 <promisc_follow_cb+0xb4>)
    759c:	601a      	str	r2, [r3, #0]
		le_promisc_state(1, &le.crc_init, 3);
    759e:	2001      	movs	r0, #1
    75a0:	4906      	ldr	r1, [pc, #24]	; (75bc <promisc_follow_cb+0xb8>)
    75a2:	2203      	movs	r2, #3
    75a4:	f7ff fe12 	bl	71cc <le_promisc_state>
	}
}
    75a8:	3710      	adds	r7, #16
    75aa:	46bd      	mov	sp, r7
    75ac:	bd80      	pop	{r7, pc}
    75ae:	bf00      	nop
    75b0:	10000458 	.word	0x10000458
    75b4:	1000099c 	.word	0x1000099c
    75b8:	000073f9 	.word	0x000073f9
    75bc:	10000460 	.word	0x10000460

000075c0 <see_aa>:

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
    75c0:	b480      	push	{r7}
    75c2:	b087      	sub	sp, #28
    75c4:	af00      	add	r7, sp, #0
    75c6:	6078      	str	r0, [r7, #4]
	int i, max = -1, killme = -1;
    75c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    75cc:	613b      	str	r3, [r7, #16]
    75ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    75d2:	60fb      	str	r3, [r7, #12]
	for (i = 0; i < AA_LIST_SIZE; ++i)
    75d4:	2300      	movs	r3, #0
    75d6:	617b      	str	r3, [r7, #20]
    75d8:	e015      	b.n	7606 <see_aa+0x46>
		if (le_promisc.active_aa[i].aa == aa) {
    75da:	4a22      	ldr	r2, [pc, #136]	; (7664 <see_aa+0xa4>)
    75dc:	697b      	ldr	r3, [r7, #20]
    75de:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    75e2:	687b      	ldr	r3, [r7, #4]
    75e4:	429a      	cmp	r2, r3
    75e6:	d10b      	bne.n	7600 <see_aa+0x40>
			++le_promisc.active_aa[i].count;
    75e8:	4a1e      	ldr	r2, [pc, #120]	; (7664 <see_aa+0xa4>)
    75ea:	697b      	ldr	r3, [r7, #20]
    75ec:	00db      	lsls	r3, r3, #3
    75ee:	4413      	add	r3, r2
    75f0:	685b      	ldr	r3, [r3, #4]
    75f2:	1c5a      	adds	r2, r3, #1
    75f4:	491b      	ldr	r1, [pc, #108]	; (7664 <see_aa+0xa4>)
    75f6:	697b      	ldr	r3, [r7, #20]
    75f8:	00db      	lsls	r3, r3, #3
    75fa:	440b      	add	r3, r1
    75fc:	605a      	str	r2, [r3, #4]
			return;
    75fe:	e02c      	b.n	765a <see_aa+0x9a>
}

// called when we see an AA, add it to the list
void see_aa(u32 aa) {
	int i, max = -1, killme = -1;
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7600:	697b      	ldr	r3, [r7, #20]
    7602:	3301      	adds	r3, #1
    7604:	617b      	str	r3, [r7, #20]
    7606:	697b      	ldr	r3, [r7, #20]
    7608:	2b1f      	cmp	r3, #31
    760a:	dde6      	ble.n	75da <see_aa+0x1a>
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    760c:	2300      	movs	r3, #0
    760e:	617b      	str	r3, [r7, #20]
    7610:	e015      	b.n	763e <see_aa+0x7e>
		if (le_promisc.active_aa[i].count < max || max < 0) {
    7612:	4a14      	ldr	r2, [pc, #80]	; (7664 <see_aa+0xa4>)
    7614:	697b      	ldr	r3, [r7, #20]
    7616:	00db      	lsls	r3, r3, #3
    7618:	4413      	add	r3, r2
    761a:	685a      	ldr	r2, [r3, #4]
    761c:	693b      	ldr	r3, [r7, #16]
    761e:	429a      	cmp	r2, r3
    7620:	db02      	blt.n	7628 <see_aa+0x68>
    7622:	693b      	ldr	r3, [r7, #16]
    7624:	2b00      	cmp	r3, #0
    7626:	da07      	bge.n	7638 <see_aa+0x78>
			killme = i;
    7628:	697b      	ldr	r3, [r7, #20]
    762a:	60fb      	str	r3, [r7, #12]
			max = le_promisc.active_aa[i].count;
    762c:	4a0d      	ldr	r2, [pc, #52]	; (7664 <see_aa+0xa4>)
    762e:	697b      	ldr	r3, [r7, #20]
    7630:	00db      	lsls	r3, r3, #3
    7632:	4413      	add	r3, r2
    7634:	685b      	ldr	r3, [r3, #4]
    7636:	613b      	str	r3, [r7, #16]
			++le_promisc.active_aa[i].count;
			return;
		}

	// evict someone
	for (i = 0; i < AA_LIST_SIZE; ++i)
    7638:	697b      	ldr	r3, [r7, #20]
    763a:	3301      	adds	r3, #1
    763c:	617b      	str	r3, [r7, #20]
    763e:	697b      	ldr	r3, [r7, #20]
    7640:	2b1f      	cmp	r3, #31
    7642:	dde6      	ble.n	7612 <see_aa+0x52>
		if (le_promisc.active_aa[i].count < max || max < 0) {
			killme = i;
			max = le_promisc.active_aa[i].count;
		}

	le_promisc.active_aa[killme].aa = aa;
    7644:	4907      	ldr	r1, [pc, #28]	; (7664 <see_aa+0xa4>)
    7646:	68fb      	ldr	r3, [r7, #12]
    7648:	687a      	ldr	r2, [r7, #4]
    764a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	le_promisc.active_aa[killme].count = 1;
    764e:	4a05      	ldr	r2, [pc, #20]	; (7664 <see_aa+0xa4>)
    7650:	68fb      	ldr	r3, [r7, #12]
    7652:	00db      	lsls	r3, r3, #3
    7654:	4413      	add	r3, r2
    7656:	2201      	movs	r2, #1
    7658:	605a      	str	r2, [r3, #4]
}
    765a:	371c      	adds	r7, #28
    765c:	46bd      	mov	sp, r7
    765e:	f85d 7b04 	ldr.w	r7, [sp], #4
    7662:	4770      	bx	lr
    7664:	10000bec 	.word	0x10000bec

00007668 <cb_le_promisc>:

/* le promiscuous mode */
int cb_le_promisc(char *unpacked) {
    7668:	b590      	push	{r4, r7, lr}
    766a:	b0a1      	sub	sp, #132	; 0x84
    766c:	af00      	add	r7, sp, #0
    766e:	6078      	str	r0, [r7, #4]
	int i, j, k;
	int idx;

	// empty data PDU: 01 00
	char desired[4][16] = {
    7670:	f107 031c 	add.w	r3, r7, #28
    7674:	2240      	movs	r2, #64	; 0x40
    7676:	4618      	mov	r0, r3
    7678:	2100      	movs	r1, #0
    767a:	f7fc fd7d 	bl	4178 <memset>
    767e:	2301      	movs	r3, #1
    7680:	773b      	strb	r3, [r7, #28]
    7682:	2301      	movs	r3, #1
    7684:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    7688:	2301      	movs	r3, #1
    768a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    768e:	2301      	movs	r3, #1
    7690:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
    7694:	2301      	movs	r3, #1
    7696:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    769a:	2301      	movs	r3, #1
    769c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
    76a0:	2301      	movs	r3, #1
    76a2:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
    76a6:	2301      	movs	r3, #1
    76a8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    76ac:	2300      	movs	r3, #0
    76ae:	67fb      	str	r3, [r7, #124]	; 0x7c
    76b0:	e041      	b.n	7736 <cb_le_promisc+0xce>
		idx = whitening_index[btle_channel_index(channel-2402)];
    76b2:	4ba5      	ldr	r3, [pc, #660]	; (7948 <cb_le_promisc+0x2e0>)
    76b4:	881b      	ldrh	r3, [r3, #0]
    76b6:	b29b      	uxth	r3, r3
    76b8:	b2db      	uxtb	r3, r3
    76ba:	3b62      	subs	r3, #98	; 0x62
    76bc:	b2db      	uxtb	r3, r3
    76be:	4618      	mov	r0, r3
    76c0:	f000 fe0e 	bl	82e0 <btle_channel_index>
    76c4:	4603      	mov	r3, r0
    76c6:	461a      	mov	r2, r3
    76c8:	4ba0      	ldr	r3, [pc, #640]	; (794c <cb_le_promisc+0x2e4>)
    76ca:	5c9b      	ldrb	r3, [r3, r2]
    76cc:	673b      	str	r3, [r7, #112]	; 0x70

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    76ce:	2300      	movs	r3, #0
    76d0:	67bb      	str	r3, [r7, #120]	; 0x78
    76d2:	e02a      	b.n	772a <cb_le_promisc+0xc2>
			desired[i][j] ^= whitening[idx];
    76d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    76d6:	011b      	lsls	r3, r3, #4
    76d8:	f107 0280 	add.w	r2, r7, #128	; 0x80
    76dc:	441a      	add	r2, r3
    76de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    76e0:	4413      	add	r3, r2
    76e2:	3b64      	subs	r3, #100	; 0x64
    76e4:	781a      	ldrb	r2, [r3, #0]
    76e6:	499a      	ldr	r1, [pc, #616]	; (7950 <cb_le_promisc+0x2e8>)
    76e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    76ea:	440b      	add	r3, r1
    76ec:	781b      	ldrb	r3, [r3, #0]
    76ee:	4053      	eors	r3, r2
    76f0:	b2d9      	uxtb	r1, r3
    76f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    76f4:	011b      	lsls	r3, r3, #4
    76f6:	f107 0280 	add.w	r2, r7, #128	; 0x80
    76fa:	441a      	add	r2, r3
    76fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    76fe:	4413      	add	r3, r2
    7700:	3b64      	subs	r3, #100	; 0x64
    7702:	460a      	mov	r2, r1
    7704:	701a      	strb	r2, [r3, #0]
			idx = (idx + 1) % sizeof(whitening);
    7706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7708:	3301      	adds	r3, #1
    770a:	4619      	mov	r1, r3
    770c:	4b91      	ldr	r3, [pc, #580]	; (7954 <cb_le_promisc+0x2ec>)
    770e:	fba1 2303 	umull	r2, r3, r1, r3
    7712:	1ac8      	subs	r0, r1, r3
    7714:	0840      	lsrs	r0, r0, #1
    7716:	4403      	add	r3, r0
    7718:	099a      	lsrs	r2, r3, #6
    771a:	4613      	mov	r3, r2
    771c:	01db      	lsls	r3, r3, #7
    771e:	1a9b      	subs	r3, r3, r2
    7720:	1aca      	subs	r2, r1, r3
    7722:	673a      	str	r2, [r7, #112]	; 0x70

	for (i = 0; i < 4; ++i) {
		idx = whitening_index[btle_channel_index(channel-2402)];

		// whiten the desired data
		for (j = 0; j < (int)sizeof(desired[i]); ++j) {
    7724:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7726:	3301      	adds	r3, #1
    7728:	67bb      	str	r3, [r7, #120]	; 0x78
    772a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    772c:	2b0f      	cmp	r3, #15
    772e:	ddd1      	ble.n	76d4 <cb_le_promisc+0x6c>
		  0, 0, 0, 0, 0, 0, 0, 0, },
		{ 1, 0, 1, 1, 0, 0, 0, 0,
		  0, 0, 0, 0, 0, 0, 0, 0, },
	};

	for (i = 0; i < 4; ++i) {
    7730:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7732:	3301      	adds	r3, #1
    7734:	67fb      	str	r3, [r7, #124]	; 0x7c
    7736:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7738:	2b03      	cmp	r3, #3
    773a:	ddba      	ble.n	76b2 <cb_le_promisc+0x4a>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    773c:	2320      	movs	r3, #32
    773e:	67fb      	str	r3, [r7, #124]	; 0x7c
    7740:	e0d0      	b.n	78e4 <cb_le_promisc+0x27c>
		int ok[4] = { 1, 1, 1, 1 };
    7742:	4b85      	ldr	r3, [pc, #532]	; (7958 <cb_le_promisc+0x2f0>)
    7744:	f107 040c 	add.w	r4, r7, #12
    7748:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    774a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		int matching = -1;
    774e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7752:	66fb      	str	r3, [r7, #108]	; 0x6c

		for (j = 0; j < 4; ++j) {
    7754:	2300      	movs	r3, #0
    7756:	67bb      	str	r3, [r7, #120]	; 0x78
    7758:	e026      	b.n	77a8 <cb_le_promisc+0x140>
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    775a:	2300      	movs	r3, #0
    775c:	677b      	str	r3, [r7, #116]	; 0x74
    775e:	e01d      	b.n	779c <cb_le_promisc+0x134>
				if (unpacked[i+k] != desired[j][k]) {
    7760:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    7762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7764:	4413      	add	r3, r2
    7766:	461a      	mov	r2, r3
    7768:	687b      	ldr	r3, [r7, #4]
    776a:	4413      	add	r3, r2
    776c:	781a      	ldrb	r2, [r3, #0]
    776e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7770:	011b      	lsls	r3, r3, #4
    7772:	f107 0180 	add.w	r1, r7, #128	; 0x80
    7776:	4419      	add	r1, r3
    7778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    777a:	440b      	add	r3, r1
    777c:	3b64      	subs	r3, #100	; 0x64
    777e:	781b      	ldrb	r3, [r3, #0]
    7780:	429a      	cmp	r2, r3
    7782:	d008      	beq.n	7796 <cb_le_promisc+0x12e>
					ok[j] = 0;
    7784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7786:	009b      	lsls	r3, r3, #2
    7788:	f107 0280 	add.w	r2, r7, #128	; 0x80
    778c:	4413      	add	r3, r2
    778e:	2200      	movs	r2, #0
    7790:	f843 2c74 	str.w	r2, [r3, #-116]
					break;
    7794:	e005      	b.n	77a2 <cb_le_promisc+0x13a>
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
			for (k = 0; k < (int)sizeof(desired[j]); ++k) {
    7796:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7798:	3301      	adds	r3, #1
    779a:	677b      	str	r3, [r7, #116]	; 0x74
    779c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    779e:	2b0f      	cmp	r3, #15
    77a0:	ddde      	ble.n	7760 <cb_le_promisc+0xf8>
	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
		int ok[4] = { 1, 1, 1, 1 };
		int matching = -1;

		for (j = 0; j < 4; ++j) {
    77a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77a4:	3301      	adds	r3, #1
    77a6:	67bb      	str	r3, [r7, #120]	; 0x78
    77a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77aa:	2b03      	cmp	r3, #3
    77ac:	ddd5      	ble.n	775a <cb_le_promisc+0xf2>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    77ae:	2300      	movs	r3, #0
    77b0:	67bb      	str	r3, [r7, #120]	; 0x78
    77b2:	e00e      	b.n	77d2 <cb_le_promisc+0x16a>
			if (ok[j]) {
    77b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77b6:	009b      	lsls	r3, r3, #2
    77b8:	f107 0280 	add.w	r2, r7, #128	; 0x80
    77bc:	4413      	add	r3, r2
    77be:	f853 3c74 	ldr.w	r3, [r3, #-116]
    77c2:	2b00      	cmp	r3, #0
    77c4:	d002      	beq.n	77cc <cb_le_promisc+0x164>
				matching = j;
    77c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77c8:	66fb      	str	r3, [r7, #108]	; 0x6c
				break;
    77ca:	e005      	b.n	77d8 <cb_le_promisc+0x170>
				}
			}
		}

		// see if any match
		for (j = 0; j < 4; ++j) {
    77cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77ce:	3301      	adds	r3, #1
    77d0:	67bb      	str	r3, [r7, #120]	; 0x78
    77d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    77d4:	2b03      	cmp	r3, #3
    77d6:	dded      	ble.n	77b4 <cb_le_promisc+0x14c>
				break;
			}
		}

		// skip if no match
		if (matching < 0)
    77d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    77da:	2b00      	cmp	r3, #0
    77dc:	db7f      	blt.n	78de <cb_le_promisc+0x276>
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
    77de:	4b5a      	ldr	r3, [pc, #360]	; (7948 <cb_le_promisc+0x2e0>)
    77e0:	881b      	ldrh	r3, [r3, #0]
    77e2:	b29b      	uxth	r3, r3
    77e4:	b2db      	uxtb	r3, r3
    77e6:	3b62      	subs	r3, #98	; 0x62
    77e8:	b2db      	uxtb	r3, r3
    77ea:	4618      	mov	r0, r3
    77ec:	f000 fd78 	bl	82e0 <btle_channel_index>
    77f0:	4603      	mov	r3, r0
    77f2:	461a      	mov	r2, r3
    77f4:	4b55      	ldr	r3, [pc, #340]	; (794c <cb_le_promisc+0x2e4>)
    77f6:	5c9b      	ldrb	r3, [r3, r2]
    77f8:	673b      	str	r3, [r7, #112]	; 0x70
		for (j = 0; j < 4+3+3; ++j) {
    77fa:	2300      	movs	r3, #0
    77fc:	67bb      	str	r3, [r7, #120]	; 0x78
    77fe:	e04c      	b.n	789a <cb_le_promisc+0x232>
			u8 byte = 0;
    7800:	2300      	movs	r3, #0
    7802:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
			for (k = 0; k < 8; k++) {
    7806:	2300      	movs	r3, #0
    7808:	677b      	str	r3, [r7, #116]	; 0x74
    780a:	e039      	b.n	7880 <cb_le_promisc+0x218>
				int offset = k + (j * 8) + i - 32;
    780c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    780e:	00da      	lsls	r2, r3, #3
    7810:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7812:	441a      	add	r2, r3
    7814:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7816:	4413      	add	r3, r2
    7818:	3b20      	subs	r3, #32
    781a:	663b      	str	r3, [r7, #96]	; 0x60
				if (offset >= DMA_SIZE*8*2) break;
    781c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    781e:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
    7822:	db00      	blt.n	7826 <cb_le_promisc+0x1be>
    7824:	e02f      	b.n	7886 <cb_le_promisc+0x21e>
				int bit = unpacked[offset];
    7826:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    7828:	687a      	ldr	r2, [r7, #4]
    782a:	4413      	add	r3, r2
    782c:	781b      	ldrb	r3, [r3, #0]
    782e:	667b      	str	r3, [r7, #100]	; 0x64
				if (j >= 4) { // unwhiten data bytes
    7830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7832:	2b03      	cmp	r3, #3
    7834:	dd16      	ble.n	7864 <cb_le_promisc+0x1fc>
					bit ^= whitening[idx];
    7836:	4a46      	ldr	r2, [pc, #280]	; (7950 <cb_le_promisc+0x2e8>)
    7838:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    783a:	4413      	add	r3, r2
    783c:	781b      	ldrb	r3, [r3, #0]
    783e:	461a      	mov	r2, r3
    7840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
    7842:	4053      	eors	r3, r2
    7844:	667b      	str	r3, [r7, #100]	; 0x64
					idx = (idx + 1) % sizeof(whitening);
    7846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    7848:	3301      	adds	r3, #1
    784a:	4619      	mov	r1, r3
    784c:	4b41      	ldr	r3, [pc, #260]	; (7954 <cb_le_promisc+0x2ec>)
    784e:	fba1 2303 	umull	r2, r3, r1, r3
    7852:	1ac8      	subs	r0, r1, r3
    7854:	0840      	lsrs	r0, r0, #1
    7856:	4403      	add	r3, r0
    7858:	099a      	lsrs	r2, r3, #6
    785a:	4613      	mov	r3, r2
    785c:	01db      	lsls	r3, r3, #7
    785e:	1a9b      	subs	r3, r3, r2
    7860:	1aca      	subs	r2, r1, r3
    7862:	673a      	str	r2, [r7, #112]	; 0x70
				}
				byte |= bit << k;
    7864:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    7866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7868:	fa02 f303 	lsl.w	r3, r2, r3
    786c:	b2da      	uxtb	r2, r3
    786e:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
    7872:	4313      	orrs	r3, r2
    7874:	b2db      	uxtb	r3, r3
    7876:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
			u8 byte = 0;
			for (k = 0; k < 8; k++) {
    787a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    787c:	3301      	adds	r3, #1
    787e:	677b      	str	r3, [r7, #116]	; 0x74
    7880:	6f7b      	ldr	r3, [r7, #116]	; 0x74
    7882:	2b07      	cmp	r3, #7
    7884:	ddc2      	ble.n	780c <cb_le_promisc+0x1a4>
					bit ^= whitening[idx];
					idx = (idx + 1) % sizeof(whitening);
				}
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
    7886:	4b35      	ldr	r3, [pc, #212]	; (795c <cb_le_promisc+0x2f4>)
    7888:	681a      	ldr	r2, [r3, #0]
    788a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    788c:	4413      	add	r3, r2
    788e:	f897 206b 	ldrb.w	r2, [r7, #107]	; 0x6b
    7892:	701a      	strb	r2, [r3, #0]
		if (matching < 0)
			continue;

		// found a match! unwhiten it and send it home
		idx = whitening_index[btle_channel_index(channel-2402)];
		for (j = 0; j < 4+3+3; ++j) {
    7894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    7896:	3301      	adds	r3, #1
    7898:	67bb      	str	r3, [r7, #120]	; 0x78
    789a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    789c:	2b09      	cmp	r3, #9
    789e:	ddaf      	ble.n	7800 <cb_le_promisc+0x198>
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    78a0:	4b2e      	ldr	r3, [pc, #184]	; (795c <cb_le_promisc+0x2f4>)
    78a2:	681b      	ldr	r3, [r3, #0]
    78a4:	3303      	adds	r3, #3
    78a6:	781b      	ldrb	r3, [r3, #0]
    78a8:	061a      	lsls	r2, r3, #24
				 (idle_rxbuf[2] << 16) |
    78aa:	4b2c      	ldr	r3, [pc, #176]	; (795c <cb_le_promisc+0x2f4>)
    78ac:	681b      	ldr	r3, [r3, #0]
    78ae:	3302      	adds	r3, #2
    78b0:	781b      	ldrb	r3, [r3, #0]
    78b2:	041b      	lsls	r3, r3, #16
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    78b4:	431a      	orrs	r2, r3
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    78b6:	4b29      	ldr	r3, [pc, #164]	; (795c <cb_le_promisc+0x2f4>)
    78b8:	681b      	ldr	r3, [r3, #0]
    78ba:	3301      	adds	r3, #1
    78bc:	781b      	ldrb	r3, [r3, #0]
    78be:	021b      	lsls	r3, r3, #8
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
    78c0:	4313      	orrs	r3, r2
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
    78c2:	4a26      	ldr	r2, [pc, #152]	; (795c <cb_le_promisc+0x2f4>)
    78c4:	6812      	ldr	r2, [r2, #0]
    78c6:	7812      	ldrb	r2, [r2, #0]
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
    78c8:	4313      	orrs	r3, r2
				byte |= bit << k;
			}
			idle_rxbuf[j] = byte;
		}

		u32 aa = (idle_rxbuf[3] << 24) |
    78ca:	65fb      	str	r3, [r7, #92]	; 0x5c
				 (idle_rxbuf[2] << 16) |
				 (idle_rxbuf[1] <<  8) |
				 (idle_rxbuf[0]);
		see_aa(aa);
    78cc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
    78ce:	f7ff fe77 	bl	75c0 <see_aa>

		enqueue(LE_PACKET, idle_rxbuf);
    78d2:	4b22      	ldr	r3, [pc, #136]	; (795c <cb_le_promisc+0x2f4>)
    78d4:	681b      	ldr	r3, [r3, #0]
    78d6:	2001      	movs	r0, #1
    78d8:	4619      	mov	r1, r3
    78da:	f7fc fdf5 	bl	44c8 <enqueue>
			idx = (idx + 1) % sizeof(whitening);
		}
	}

	// then look for that bitsream in our receive buffer
	for (i = 32; i < (DMA_SIZE*8*2 - 32 - 16); i++) {
    78de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    78e0:	3301      	adds	r3, #1
    78e2:	67fb      	str	r3, [r7, #124]	; 0x7c
    78e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    78e6:	f5b3 7f3c 	cmp.w	r3, #752	; 0x2f0
    78ea:	f6ff af2a 	blt.w	7742 <cb_le_promisc+0xda>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    78ee:	2300      	movs	r3, #0
    78f0:	67fb      	str	r3, [r7, #124]	; 0x7c
    78f2:	e020      	b.n	7936 <cb_le_promisc+0x2ce>
		if (le_promisc.active_aa[i].count > 3) {
    78f4:	4a1a      	ldr	r2, [pc, #104]	; (7960 <cb_le_promisc+0x2f8>)
    78f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    78f8:	00db      	lsls	r3, r3, #3
    78fa:	4413      	add	r3, r2
    78fc:	685b      	ldr	r3, [r3, #4]
    78fe:	2b03      	cmp	r3, #3
    7900:	dd16      	ble.n	7930 <cb_le_promisc+0x2c8>
			le_set_access_address(le_promisc.active_aa[i].aa);
    7902:	4a17      	ldr	r2, [pc, #92]	; (7960 <cb_le_promisc+0x2f8>)
    7904:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7906:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    790a:	4618      	mov	r0, r3
    790c:	f7fe fd80 	bl	6410 <le_set_access_address>
			data_cb = cb_follow_le;
    7910:	4b14      	ldr	r3, [pc, #80]	; (7964 <cb_le_promisc+0x2fc>)
    7912:	4a15      	ldr	r2, [pc, #84]	; (7968 <cb_le_promisc+0x300>)
    7914:	601a      	str	r2, [r3, #0]
			packet_cb = promisc_follow_cb;
    7916:	4b15      	ldr	r3, [pc, #84]	; (796c <cb_le_promisc+0x304>)
    7918:	4a15      	ldr	r2, [pc, #84]	; (7970 <cb_le_promisc+0x308>)
    791a:	601a      	str	r2, [r3, #0]
			le.crc_verify = 0;
    791c:	4b15      	ldr	r3, [pc, #84]	; (7974 <cb_le_promisc+0x30c>)
    791e:	2200      	movs	r2, #0
    7920:	611a      	str	r2, [r3, #16]
			le_promisc_state(0, &le.access_address, 4);
    7922:	2000      	movs	r0, #0
    7924:	4913      	ldr	r1, [pc, #76]	; (7974 <cb_le_promisc+0x30c>)
    7926:	2204      	movs	r2, #4
    7928:	f7ff fc50 	bl	71cc <le_promisc_state>
			// quit using the old stuff and switch to sync mode
			return 0;
    792c:	2300      	movs	r3, #0
    792e:	e006      	b.n	793e <cb_le_promisc+0x2d6>
		enqueue(LE_PACKET, idle_rxbuf);

	}

	// once we see an AA 5 times, start following it
	for (i = 0; i < AA_LIST_SIZE; ++i) {
    7930:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7932:	3301      	adds	r3, #1
    7934:	67fb      	str	r3, [r7, #124]	; 0x7c
    7936:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    7938:	2b1f      	cmp	r3, #31
    793a:	dddb      	ble.n	78f4 <cb_le_promisc+0x28c>
			// quit using the old stuff and switch to sync mode
			return 0;
		}
	}

	return 1;
    793c:	2301      	movs	r3, #1
}
    793e:	4618      	mov	r0, r3
    7940:	3784      	adds	r7, #132	; 0x84
    7942:	46bd      	mov	sp, r7
    7944:	bd90      	pop	{r4, r7, pc}
    7946:	bf00      	nop
    7948:	1000049c 	.word	0x1000049c
    794c:	0000b874 	.word	0x0000b874
    7950:	0000b7f4 	.word	0x0000b7f4
    7954:	02040811 	.word	0x02040811
    7958:	0000c094 	.word	0x0000c094
    795c:	10000454 	.word	0x10000454
    7960:	10000bec 	.word	0x10000bec
    7964:	10000998 	.word	0x10000998
    7968:	00006d51 	.word	0x00006d51
    796c:	1000099c 	.word	0x1000099c
    7970:	00007505 	.word	0x00007505
    7974:	10000458 	.word	0x10000458

00007978 <bt_promisc_le>:

void bt_promisc_le() {
    7978:	b580      	push	{r7, lr}
    797a:	af00      	add	r7, sp, #0
	while (requested_mode == MODE_BT_PROMISC_LE) {
    797c:	e02c      	b.n	79d8 <bt_promisc_le+0x60>
		reset_le_promisc();
    797e:	f7fe fdad 	bl	64dc <reset_le_promisc>

		// jump to a random data channel and turn up the squelch
		if ((channel & 1) == 1)
    7982:	4b18      	ldr	r3, [pc, #96]	; (79e4 <bt_promisc_le+0x6c>)
    7984:	881b      	ldrh	r3, [r3, #0]
    7986:	b29b      	uxth	r3, r3
    7988:	f003 0301 	and.w	r3, r3, #1
    798c:	2b00      	cmp	r3, #0
    798e:	d003      	beq.n	7998 <bt_promisc_le+0x20>
			channel = 2440;
    7990:	4b14      	ldr	r3, [pc, #80]	; (79e4 <bt_promisc_le+0x6c>)
    7992:	f640 1288 	movw	r2, #2440	; 0x988
    7996:	801a      	strh	r2, [r3, #0]

		// if the PC hasn't given us AA, determine by listening
		if (!le.target_set) {
    7998:	4b13      	ldr	r3, [pc, #76]	; (79e8 <bt_promisc_le+0x70>)
    799a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    799c:	2b00      	cmp	r3, #0
    799e:	d107      	bne.n	79b0 <bt_promisc_le+0x38>
			// cs_threshold_req = -80;
			cs_threshold_calc_and_set();
    79a0:	f7fc fef6 	bl	4790 <cs_threshold_calc_and_set>
			data_cb = cb_le_promisc;
    79a4:	4b11      	ldr	r3, [pc, #68]	; (79ec <bt_promisc_le+0x74>)
    79a6:	4a12      	ldr	r2, [pc, #72]	; (79f0 <bt_promisc_le+0x78>)
    79a8:	601a      	str	r2, [r3, #0]
			bt_generic_le(MODE_BT_PROMISC_LE);
    79aa:	200a      	movs	r0, #10
    79ac:	f7fe fda6 	bl	64fc <bt_generic_le>
		}

		// could have got mode change in middle of above
		if (requested_mode != MODE_BT_PROMISC_LE)
    79b0:	4b10      	ldr	r3, [pc, #64]	; (79f4 <bt_promisc_le+0x7c>)
    79b2:	781b      	ldrb	r3, [r3, #0]
    79b4:	b2db      	uxtb	r3, r3
    79b6:	2b0a      	cmp	r3, #10
    79b8:	d000      	beq.n	79bc <bt_promisc_le+0x44>
			break;
    79ba:	e012      	b.n	79e2 <bt_promisc_le+0x6a>

		le_promisc_state(0, &le.access_address, 4);
    79bc:	2000      	movs	r0, #0
    79be:	490a      	ldr	r1, [pc, #40]	; (79e8 <bt_promisc_le+0x70>)
    79c0:	2204      	movs	r2, #4
    79c2:	f7ff fc03 	bl	71cc <le_promisc_state>
		packet_cb = promisc_follow_cb;
    79c6:	4b0c      	ldr	r3, [pc, #48]	; (79f8 <bt_promisc_le+0x80>)
    79c8:	4a0c      	ldr	r2, [pc, #48]	; (79fc <bt_promisc_le+0x84>)
    79ca:	601a      	str	r2, [r3, #0]
		le.crc_verify = 0;
    79cc:	4b06      	ldr	r3, [pc, #24]	; (79e8 <bt_promisc_le+0x70>)
    79ce:	2200      	movs	r2, #0
    79d0:	611a      	str	r2, [r3, #16]
		bt_le_sync(MODE_BT_PROMISC_LE);
    79d2:	200a      	movs	r0, #10
    79d4:	f7fe ff0e 	bl	67f4 <bt_le_sync>

	return 1;
}

void bt_promisc_le() {
	while (requested_mode == MODE_BT_PROMISC_LE) {
    79d8:	4b06      	ldr	r3, [pc, #24]	; (79f4 <bt_promisc_le+0x7c>)
    79da:	781b      	ldrb	r3, [r3, #0]
    79dc:	b2db      	uxtb	r3, r3
    79de:	2b0a      	cmp	r3, #10
    79e0:	d0cd      	beq.n	797e <bt_promisc_le+0x6>
		le_promisc_state(0, &le.access_address, 4);
		packet_cb = promisc_follow_cb;
		le.crc_verify = 0;
		bt_le_sync(MODE_BT_PROMISC_LE);
	}
}
    79e2:	bd80      	pop	{r7, pc}
    79e4:	1000049c 	.word	0x1000049c
    79e8:	10000458 	.word	0x10000458
    79ec:	10000998 	.word	0x10000998
    79f0:	00007669 	.word	0x00007669
    79f4:	10000a3f 	.word	0x10000a3f
    79f8:	1000099c 	.word	0x1000099c
    79fc:	00007505 	.word	0x00007505

00007a00 <bt_slave_le>:

void bt_slave_le() {
    7a00:	b590      	push	{r4, r7, lr}
    7a02:	b089      	sub	sp, #36	; 0x24
    7a04:	af00      	add	r7, sp, #0
	u32 calc_crc;
	int i;

	u8 adv_ind[] = {
    7a06:	4a35      	ldr	r2, [pc, #212]	; (7adc <bt_slave_le+0xdc>)
    7a08:	1d3b      	adds	r3, r7, #4
    7a0a:	4614      	mov	r4, r2
    7a0c:	6820      	ldr	r0, [r4, #0]
    7a0e:	6861      	ldr	r1, [r4, #4]
    7a10:	68a2      	ldr	r2, [r4, #8]
    7a12:	c307      	stmia	r3!, {r0, r1, r2}
    7a14:	89a2      	ldrh	r2, [r4, #12]
    7a16:	801a      	strh	r2, [r3, #0]

		// CRC (calc)
		0xff, 0xff, 0xff,
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;
    7a18:	230b      	movs	r3, #11
    7a1a:	76fb      	strb	r3, [r7, #27]

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    7a1c:	2300      	movs	r3, #0
    7a1e:	61fb      	str	r3, [r7, #28]
    7a20:	e00e      	b.n	7a40 <bt_slave_le+0x40>
		adv_ind[i+2] = slave_mac_address[5-i];
    7a22:	69fb      	ldr	r3, [r7, #28]
    7a24:	3302      	adds	r3, #2
    7a26:	69fa      	ldr	r2, [r7, #28]
    7a28:	f1c2 0205 	rsb	r2, r2, #5
    7a2c:	492c      	ldr	r1, [pc, #176]	; (7ae0 <bt_slave_le+0xe0>)
    7a2e:	5c8a      	ldrb	r2, [r1, r2]
    7a30:	f107 0120 	add.w	r1, r7, #32
    7a34:	440b      	add	r3, r1
    7a36:	f803 2c1c 	strb.w	r2, [r3, #-28]
	};

	u8 adv_ind_len = sizeof(adv_ind) - 3;

	// copy the user-specified mac address
	for (i = 0; i < 6; ++i)
    7a3a:	69fb      	ldr	r3, [r7, #28]
    7a3c:	3301      	adds	r3, #1
    7a3e:	61fb      	str	r3, [r7, #28]
    7a40:	69fb      	ldr	r3, [r7, #28]
    7a42:	2b05      	cmp	r3, #5
    7a44:	dded      	ble.n	7a22 <bt_slave_le+0x22>
		adv_ind[i+2] = slave_mac_address[5-i];

	calc_crc = btle_calc_crc(le.crc_init_reversed, adv_ind, adv_ind_len);
    7a46:	4b27      	ldr	r3, [pc, #156]	; (7ae4 <bt_slave_le+0xe4>)
    7a48:	68d9      	ldr	r1, [r3, #12]
    7a4a:	7efb      	ldrb	r3, [r7, #27]
    7a4c:	1d3a      	adds	r2, r7, #4
    7a4e:	4608      	mov	r0, r1
    7a50:	4611      	mov	r1, r2
    7a52:	461a      	mov	r2, r3
    7a54:	f000 fca2 	bl	839c <btle_calc_crc>
    7a58:	6178      	str	r0, [r7, #20]
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
    7a5a:	7efb      	ldrb	r3, [r7, #27]
    7a5c:	697a      	ldr	r2, [r7, #20]
    7a5e:	b2d2      	uxtb	r2, r2
    7a60:	f107 0120 	add.w	r1, r7, #32
    7a64:	440b      	add	r3, r1
    7a66:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
    7a6a:	7efb      	ldrb	r3, [r7, #27]
    7a6c:	3301      	adds	r3, #1
    7a6e:	697a      	ldr	r2, [r7, #20]
    7a70:	0a12      	lsrs	r2, r2, #8
    7a72:	b2d2      	uxtb	r2, r2
    7a74:	f107 0120 	add.w	r1, r7, #32
    7a78:	440b      	add	r3, r1
    7a7a:	f803 2c1c 	strb.w	r2, [r3, #-28]
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;
    7a7e:	7efb      	ldrb	r3, [r7, #27]
    7a80:	3302      	adds	r3, #2
    7a82:	697a      	ldr	r2, [r7, #20]
    7a84:	0c12      	lsrs	r2, r2, #16
    7a86:	b2d2      	uxtb	r2, r2
    7a88:	f107 0120 	add.w	r1, r7, #32
    7a8c:	440b      	add	r3, r1
    7a8e:	f803 2c1c 	strb.w	r2, [r3, #-28]

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    7a92:	e01b      	b.n	7acc <bt_slave_le+0xcc>
		ICER0 = ICER0_ICE_USB;
    7a94:	4b14      	ldr	r3, [pc, #80]	; (7ae8 <bt_slave_le+0xe8>)
    7a96:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7a9a:	601a      	str	r2, [r3, #0]
		ICER0 = ICER0_ICE_DMA;
    7a9c:	4b12      	ldr	r3, [pc, #72]	; (7ae8 <bt_slave_le+0xe8>)
    7a9e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7aa2:	601a      	str	r2, [r3, #0]
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
    7aa4:	7efb      	ldrb	r3, [r7, #27]
    7aa6:	3303      	adds	r3, #3
    7aa8:	b2da      	uxtb	r2, r3
    7aaa:	1d3b      	adds	r3, r7, #4
    7aac:	480f      	ldr	r0, [pc, #60]	; (7aec <bt_slave_le+0xec>)
    7aae:	4611      	mov	r1, r2
    7ab0:	461a      	mov	r2, r3
    7ab2:	f7fe f92b 	bl	5d0c <le_transmit>
		ISER0 = ISER0_ISE_USB;
    7ab6:	4b0e      	ldr	r3, [pc, #56]	; (7af0 <bt_slave_le+0xf0>)
    7ab8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    7abc:	601a      	str	r2, [r3, #0]
		ISER0 = ISER0_ISE_DMA;
    7abe:	4b0c      	ldr	r3, [pc, #48]	; (7af0 <bt_slave_le+0xf0>)
    7ac0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
    7ac4:	601a      	str	r2, [r3, #0]
		msleep(100);
    7ac6:	2064      	movs	r0, #100	; 0x64
    7ac8:	f7fd fd2a 	bl	5520 <msleep>
	adv_ind[adv_ind_len+0] = (calc_crc >>  0) & 0xff;
	adv_ind[adv_ind_len+1] = (calc_crc >>  8) & 0xff;
	adv_ind[adv_ind_len+2] = (calc_crc >> 16) & 0xff;

	// spam advertising packets
	while (requested_mode == MODE_BT_SLAVE_LE) {
    7acc:	4b09      	ldr	r3, [pc, #36]	; (7af4 <bt_slave_le+0xf4>)
    7ace:	781b      	ldrb	r3, [r3, #0]
    7ad0:	b2db      	uxtb	r3, r3
    7ad2:	2b0c      	cmp	r3, #12
    7ad4:	d0de      	beq.n	7a94 <bt_slave_le+0x94>
		le_transmit(0x8e89bed6, adv_ind_len+3, adv_ind);
		ISER0 = ISER0_ISE_USB;
		ISER0 = ISER0_ISE_DMA;
		msleep(100);
	}
}
    7ad6:	3724      	adds	r7, #36	; 0x24
    7ad8:	46bd      	mov	sp, r7
    7ada:	bd90      	pop	{r4, r7, pc}
    7adc:	0000c0a4 	.word	0x0000c0a4
    7ae0:	1000098c 	.word	0x1000098c
    7ae4:	10000458 	.word	0x10000458
    7ae8:	e000e180 	.word	0xe000e180
    7aec:	8e89bed6 	.word	0x8e89bed6
    7af0:	e000e100 	.word	0xe000e100
    7af4:	10000a3f 	.word	0x10000a3f

00007af8 <specan>:

/* spectrum analysis */
void specan()
{
    7af8:	b590      	push	{r4, r7, lr}
    7afa:	b091      	sub	sp, #68	; 0x44
    7afc:	af00      	add	r7, sp, #0
	u8 epstat;
	u16 f;
	u8 i = 0;
    7afe:	2300      	movs	r3, #0
    7b00:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	u8 buf[DMA_SIZE];

	RXLED_SET;
    7b04:	4b5a      	ldr	r3, [pc, #360]	; (7c70 <specan+0x178>)
    7b06:	2210      	movs	r2, #16
    7b08:	601a      	str	r2, [r3, #0]

	queue_init();
    7b0a:	f000 fd69 	bl	85e0 <queue_init>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7b0e:	4b59      	ldr	r3, [pc, #356]	; (7c74 <specan+0x17c>)
    7b10:	2280      	movs	r2, #128	; 0x80
    7b12:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    7b14:	2012      	movs	r0, #18
    7b16:	f642 3122 	movw	r1, #11042	; 0x2b22
    7b1a:	f001 ffd9 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7b1e:	2014      	movs	r0, #20
    7b20:	f241 314b 	movw	r1, #4939	; 0x134b
    7b24:	f001 ffd4 	bl	9ad0 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    7b28:	2020      	movs	r0, #32
    7b2a:	f240 1101 	movw	r1, #257	; 0x101
    7b2e:	f001 ffcf 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    7b32:	2003      	movs	r0, #3
    7b34:	2129      	movs	r1, #41	; 0x29
    7b36:	f001 ffcb 	bl	9ad0 <cc2400_set>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
    7b3a:	bf00      	nop
    7b3c:	f002 f880 	bl	9c40 <cc2400_status>
    7b40:	4603      	mov	r3, r0
    7b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7b46:	2b00      	cmp	r3, #0
    7b48:	d0f8      	beq.n	7b3c <specan+0x44>
	while ((cc2400_status() & FS_LOCK));
    7b4a:	bf00      	nop
    7b4c:	f002 f878 	bl	9c40 <cc2400_status>
    7b50:	4603      	mov	r3, r0
    7b52:	f003 0304 	and.w	r3, r3, #4
    7b56:	2b00      	cmp	r3, #0
    7b58:	d1f8      	bne.n	7b4c <specan+0x54>

	while (requested_mode == MODE_SPECAN) {
    7b5a:	e07a      	b.n	7c52 <specan+0x15a>
		for (f = low_freq; f < high_freq + 1; f++) {
    7b5c:	4b46      	ldr	r3, [pc, #280]	; (7c78 <specan+0x180>)
    7b5e:	881b      	ldrh	r3, [r3, #0]
    7b60:	87fb      	strh	r3, [r7, #62]	; 0x3e
    7b62:	e06f      	b.n	7c44 <specan+0x14c>
			cc2400_set(FSDIV, f - 1);
    7b64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    7b66:	3b01      	subs	r3, #1
    7b68:	b29b      	uxth	r3, r3
    7b6a:	2002      	movs	r0, #2
    7b6c:	4619      	mov	r1, r3
    7b6e:	f001 ffaf 	bl	9ad0 <cc2400_set>
			cc2400_strobe(SFSON);
    7b72:	2061      	movs	r0, #97	; 0x61
    7b74:	f002 f86e 	bl	9c54 <cc2400_strobe>
			while (!(cc2400_status() & FS_LOCK));
    7b78:	bf00      	nop
    7b7a:	f002 f861 	bl	9c40 <cc2400_status>
    7b7e:	4603      	mov	r3, r0
    7b80:	f003 0304 	and.w	r3, r3, #4
    7b84:	2b00      	cmp	r3, #0
    7b86:	d0f8      	beq.n	7b7a <specan+0x82>
			cc2400_strobe(SRX);
    7b88:	2062      	movs	r0, #98	; 0x62
    7b8a:	f002 f863 	bl	9c54 <cc2400_strobe>

			/* give the CC2400 time to acquire RSSI reading */
			volatile u32 j = 500; while (--j); //FIXME crude delay
    7b8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    7b92:	607b      	str	r3, [r7, #4]
    7b94:	bf00      	nop
    7b96:	687b      	ldr	r3, [r7, #4]
    7b98:	3b01      	subs	r3, #1
    7b9a:	607b      	str	r3, [r7, #4]
    7b9c:	2b00      	cmp	r3, #0
    7b9e:	d1fa      	bne.n	7b96 <specan+0x9e>
			buf[3 * i] = (f >> 8) & 0xFF;
    7ba0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7ba4:	4613      	mov	r3, r2
    7ba6:	005b      	lsls	r3, r3, #1
    7ba8:	4413      	add	r3, r2
    7baa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7bac:	0a12      	lsrs	r2, r2, #8
    7bae:	b292      	uxth	r2, r2
    7bb0:	b2d2      	uxtb	r2, r2
    7bb2:	f107 0140 	add.w	r1, r7, #64	; 0x40
    7bb6:	440b      	add	r3, r1
    7bb8:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 1] = f  & 0xFF;
    7bbc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7bc0:	4613      	mov	r3, r2
    7bc2:	005b      	lsls	r3, r3, #1
    7bc4:	4413      	add	r3, r2
    7bc6:	3301      	adds	r3, #1
    7bc8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7bca:	b2d2      	uxtb	r2, r2
    7bcc:	f107 0140 	add.w	r1, r7, #64	; 0x40
    7bd0:	440b      	add	r3, r1
    7bd2:	f803 2c38 	strb.w	r2, [r3, #-56]
			buf[(3 * i) + 2] = cc2400_get(RSSI) >> 8;
    7bd6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
    7bda:	4613      	mov	r3, r2
    7bdc:	005b      	lsls	r3, r3, #1
    7bde:	4413      	add	r3, r2
    7be0:	1c9c      	adds	r4, r3, #2
    7be2:	2006      	movs	r0, #6
    7be4:	f001 ff5e 	bl	9aa4 <cc2400_get>
    7be8:	4603      	mov	r3, r0
    7bea:	0a1b      	lsrs	r3, r3, #8
    7bec:	b29b      	uxth	r3, r3
    7bee:	b2da      	uxtb	r2, r3
    7bf0:	f107 0340 	add.w	r3, r7, #64	; 0x40
    7bf4:	4423      	add	r3, r4
    7bf6:	f803 2c38 	strb.w	r2, [r3, #-56]
			i++;
    7bfa:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    7bfe:	3301      	adds	r3, #1
    7c00:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
			if (i == 16) {
    7c04:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
    7c08:	2b10      	cmp	r3, #16
    7c0a:	d10d      	bne.n	7c28 <specan+0x130>
				enqueue(SPECAN, buf);
    7c0c:	f107 0308 	add.w	r3, r7, #8
    7c10:	2004      	movs	r0, #4
    7c12:	4619      	mov	r1, r3
    7c14:	f7fc fc58 	bl	44c8 <enqueue>
				i = 0;
    7c18:	2300      	movs	r3, #0
    7c1a:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d

				handle_usb(clkn);
    7c1e:	4b17      	ldr	r3, [pc, #92]	; (7c7c <specan+0x184>)
    7c20:	681b      	ldr	r3, [r3, #0]
    7c22:	4618      	mov	r0, r3
    7c24:	f000 fd7c 	bl	8720 <handle_usb>
			}

			cc2400_strobe(SRFOFF);
    7c28:	2064      	movs	r0, #100	; 0x64
    7c2a:	f002 f813 	bl	9c54 <cc2400_strobe>
			while ((cc2400_status() & FS_LOCK));
    7c2e:	bf00      	nop
    7c30:	f002 f806 	bl	9c40 <cc2400_status>
    7c34:	4603      	mov	r3, r0
    7c36:	f003 0304 	and.w	r3, r3, #4
    7c3a:	2b00      	cmp	r3, #0
    7c3c:	d1f8      	bne.n	7c30 <specan+0x138>
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
		for (f = low_freq; f < high_freq + 1; f++) {
    7c3e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
    7c40:	3301      	adds	r3, #1
    7c42:	87fb      	strh	r3, [r7, #62]	; 0x3e
    7c44:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
    7c46:	4b0e      	ldr	r3, [pc, #56]	; (7c80 <specan+0x188>)
    7c48:	881b      	ldrh	r3, [r3, #0]
    7c4a:	b29b      	uxth	r3, r3
    7c4c:	3301      	adds	r3, #1
    7c4e:	429a      	cmp	r2, r3
    7c50:	db88      	blt.n	7b64 <specan+0x6c>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
	//FIXME maybe set RSSI.RSSI_FILT
	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_SPECAN) {
    7c52:	4b0c      	ldr	r3, [pc, #48]	; (7c84 <specan+0x18c>)
    7c54:	781b      	ldrb	r3, [r3, #0]
    7c56:	b2db      	uxtb	r3, r3
    7c58:	2b04      	cmp	r3, #4
    7c5a:	f43f af7f 	beq.w	7b5c <specan+0x64>

			cc2400_strobe(SRFOFF);
			while ((cc2400_status() & FS_LOCK));
		}
	}
	mode = MODE_IDLE;
    7c5e:	4b0a      	ldr	r3, [pc, #40]	; (7c88 <specan+0x190>)
    7c60:	2200      	movs	r2, #0
    7c62:	701a      	strb	r2, [r3, #0]
	RXLED_CLR;
    7c64:	4b09      	ldr	r3, [pc, #36]	; (7c8c <specan+0x194>)
    7c66:	2210      	movs	r2, #16
    7c68:	601a      	str	r2, [r3, #0]
}
    7c6a:	3744      	adds	r7, #68	; 0x44
    7c6c:	46bd      	mov	sp, r7
    7c6e:	bd90      	pop	{r4, r7, pc}
    7c70:	2009c038 	.word	0x2009c038
    7c74:	2009c058 	.word	0x2009c058
    7c78:	1000049e 	.word	0x1000049e
    7c7c:	10000be4 	.word	0x10000be4
    7c80:	100004a0 	.word	0x100004a0
    7c84:	10000a3f 	.word	0x10000a3f
    7c88:	10000a3e 	.word	0x10000a3e
    7c8c:	2009c03c 	.word	0x2009c03c

00007c90 <led_specan>:

/* LED based spectrum analysis */
void led_specan()
{
    7c90:	b580      	push	{r7, lr}
    7c92:	b084      	sub	sp, #16
    7c94:	af00      	add	r7, sp, #0
	int8_t lvl;
	u8 i = 0;
    7c96:	2300      	movs	r3, #0
    7c98:	73fb      	strb	r3, [r7, #15]
	u16 channels[3] = {2412, 2437, 2462};
    7c9a:	4a5b      	ldr	r2, [pc, #364]	; (7e08 <led_specan+0x178>)
    7c9c:	f107 0308 	add.w	r3, r7, #8
    7ca0:	6810      	ldr	r0, [r2, #0]
    7ca2:	6018      	str	r0, [r3, #0]
    7ca4:	8892      	ldrh	r2, [r2, #4]
    7ca6:	809a      	strh	r2, [r3, #4]
	//void (*set[3]) = {TXLED_SET, RXLED_SET, USRLED_SET};
	//void (*clr[3]) = {TXLED_CLR, RXLED_CLR, USRLED_CLR};

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    7ca8:	4b58      	ldr	r3, [pc, #352]	; (7e0c <led_specan+0x17c>)
    7caa:	2280      	movs	r2, #128	; 0x80
    7cac:	601a      	str	r2, [r3, #0]
	//HGM_SET;
#endif
	cc2400_set(LMTST,   0x2b22);
    7cae:	2012      	movs	r0, #18
    7cb0:	f642 3122 	movw	r1, #11042	; 0x2b22
    7cb4:	f001 ff0c 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    7cb8:	2014      	movs	r0, #20
    7cba:	f241 314b 	movw	r1, #4939	; 0x134b
    7cbe:	f001 ff07 	bl	9ad0 <cc2400_set>
	cc2400_set(GRMDM,   0x0101); // un-buffered mode, GFSK
    7cc2:	2020      	movs	r0, #32
    7cc4:	f240 1101 	movw	r1, #257	; 0x101
    7cc8:	f001 ff02 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    7ccc:	2003      	movs	r0, #3
    7cce:	2129      	movs	r1, #41	; 0x29
    7cd0:	f001 fefe 	bl	9ad0 <cc2400_set>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols
    7cd4:	2006      	movs	r0, #6
    7cd6:	21f1      	movs	r1, #241	; 0xf1
    7cd8:	f001 fefa 	bl	9ad0 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    7cdc:	bf00      	nop
    7cde:	f001 ffaf 	bl	9c40 <cc2400_status>
    7ce2:	4603      	mov	r3, r0
    7ce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    7ce8:	2b00      	cmp	r3, #0
    7cea:	d0f8      	beq.n	7cde <led_specan+0x4e>
	while ((cc2400_status() & FS_LOCK));
    7cec:	bf00      	nop
    7cee:	f001 ffa7 	bl	9c40 <cc2400_status>
    7cf2:	4603      	mov	r3, r0
    7cf4:	f003 0304 	and.w	r3, r3, #4
    7cf8:	2b00      	cmp	r3, #0
    7cfa:	d1f8      	bne.n	7cee <led_specan+0x5e>

	while (requested_mode == MODE_LED_SPECAN) {
    7cfc:	e079      	b.n	7df2 <led_specan+0x162>
		cc2400_set(FSDIV, channels[i] - 1);
    7cfe:	7bfb      	ldrb	r3, [r7, #15]
    7d00:	005b      	lsls	r3, r3, #1
    7d02:	f107 0210 	add.w	r2, r7, #16
    7d06:	4413      	add	r3, r2
    7d08:	f833 3c08 	ldrh.w	r3, [r3, #-8]
    7d0c:	3b01      	subs	r3, #1
    7d0e:	b29b      	uxth	r3, r3
    7d10:	2002      	movs	r0, #2
    7d12:	4619      	mov	r1, r3
    7d14:	f001 fedc 	bl	9ad0 <cc2400_set>
		cc2400_strobe(SFSON);
    7d18:	2061      	movs	r0, #97	; 0x61
    7d1a:	f001 ff9b 	bl	9c54 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    7d1e:	bf00      	nop
    7d20:	f001 ff8e 	bl	9c40 <cc2400_status>
    7d24:	4603      	mov	r3, r0
    7d26:	f003 0304 	and.w	r3, r3, #4
    7d2a:	2b00      	cmp	r3, #0
    7d2c:	d0f8      	beq.n	7d20 <led_specan+0x90>
		cc2400_strobe(SRX);
    7d2e:	2062      	movs	r0, #98	; 0x62
    7d30:	f001 ff90 	bl	9c54 <cc2400_strobe>

		/* give the CC2400 time to acquire RSSI reading */
		volatile u32 j = 500; while (--j); //FIXME crude delay
    7d34:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    7d38:	607b      	str	r3, [r7, #4]
    7d3a:	bf00      	nop
    7d3c:	687b      	ldr	r3, [r7, #4]
    7d3e:	3b01      	subs	r3, #1
    7d40:	607b      	str	r3, [r7, #4]
    7d42:	2b00      	cmp	r3, #0
    7d44:	d1fa      	bne.n	7d3c <led_specan+0xac>
		lvl = cc2400_get(RSSI) >> 8;
    7d46:	2006      	movs	r0, #6
    7d48:	f001 feac 	bl	9aa4 <cc2400_get>
    7d4c:	4603      	mov	r3, r0
    7d4e:	0a1b      	lsrs	r3, r3, #8
    7d50:	b29b      	uxth	r3, r3
    7d52:	73bb      	strb	r3, [r7, #14]
        if (lvl > rssi_threshold) {
    7d54:	4b2e      	ldr	r3, [pc, #184]	; (7e10 <led_specan+0x180>)
    7d56:	781b      	ldrb	r3, [r3, #0]
    7d58:	b2db      	uxtb	r3, r3
    7d5a:	f997 200e 	ldrsb.w	r2, [r7, #14]
    7d5e:	b25b      	sxtb	r3, r3
    7d60:	429a      	cmp	r2, r3
    7d62:	dd15      	ble.n	7d90 <led_specan+0x100>
            switch (i) {
    7d64:	7bfb      	ldrb	r3, [r7, #15]
    7d66:	2b01      	cmp	r3, #1
    7d68:	d009      	beq.n	7d7e <led_specan+0xee>
    7d6a:	2b02      	cmp	r3, #2
    7d6c:	d00b      	beq.n	7d86 <led_specan+0xf6>
    7d6e:	2b00      	cmp	r3, #0
    7d70:	d000      	beq.n	7d74 <led_specan+0xe4>
    7d72:	e021      	b.n	7db8 <led_specan+0x128>
                case 0:
                    TXLED_SET;
    7d74:	4b27      	ldr	r3, [pc, #156]	; (7e14 <led_specan+0x184>)
    7d76:	f44f 7280 	mov.w	r2, #256	; 0x100
    7d7a:	601a      	str	r2, [r3, #0]
                    break;
    7d7c:	e007      	b.n	7d8e <led_specan+0xfe>
                case 1:
                    RXLED_SET;
    7d7e:	4b25      	ldr	r3, [pc, #148]	; (7e14 <led_specan+0x184>)
    7d80:	2210      	movs	r2, #16
    7d82:	601a      	str	r2, [r3, #0]
                    break;
    7d84:	e003      	b.n	7d8e <led_specan+0xfe>
                case 2:
                    USRLED_SET;
    7d86:	4b23      	ldr	r3, [pc, #140]	; (7e14 <led_specan+0x184>)
    7d88:	2202      	movs	r2, #2
    7d8a:	601a      	str	r2, [r3, #0]
                    break;
    7d8c:	bf00      	nop
    7d8e:	e013      	b.n	7db8 <led_specan+0x128>
            }
        }
        else {
            switch (i) {
    7d90:	7bfb      	ldrb	r3, [r7, #15]
    7d92:	2b01      	cmp	r3, #1
    7d94:	d008      	beq.n	7da8 <led_specan+0x118>
    7d96:	2b02      	cmp	r3, #2
    7d98:	d00a      	beq.n	7db0 <led_specan+0x120>
    7d9a:	2b00      	cmp	r3, #0
    7d9c:	d10c      	bne.n	7db8 <led_specan+0x128>
                case 0:
                    TXLED_CLR;
    7d9e:	4b1e      	ldr	r3, [pc, #120]	; (7e18 <led_specan+0x188>)
    7da0:	f44f 7280 	mov.w	r2, #256	; 0x100
    7da4:	601a      	str	r2, [r3, #0]
                    break;
    7da6:	e007      	b.n	7db8 <led_specan+0x128>
                case 1:
                    RXLED_CLR;
    7da8:	4b1b      	ldr	r3, [pc, #108]	; (7e18 <led_specan+0x188>)
    7daa:	2210      	movs	r2, #16
    7dac:	601a      	str	r2, [r3, #0]
                    break;
    7dae:	e003      	b.n	7db8 <led_specan+0x128>
                case 2:
                    USRLED_CLR;
    7db0:	4b19      	ldr	r3, [pc, #100]	; (7e18 <led_specan+0x188>)
    7db2:	2202      	movs	r2, #2
    7db4:	601a      	str	r2, [r3, #0]
                    break;
    7db6:	bf00      	nop
            }
        }

		i = (i+1) % 3;
    7db8:	7bfb      	ldrb	r3, [r7, #15]
    7dba:	1c5a      	adds	r2, r3, #1
    7dbc:	4b17      	ldr	r3, [pc, #92]	; (7e1c <led_specan+0x18c>)
    7dbe:	fb83 3102 	smull	r3, r1, r3, r2
    7dc2:	17d3      	asrs	r3, r2, #31
    7dc4:	1ac9      	subs	r1, r1, r3
    7dc6:	460b      	mov	r3, r1
    7dc8:	005b      	lsls	r3, r3, #1
    7dca:	440b      	add	r3, r1
    7dcc:	1ad1      	subs	r1, r2, r3
    7dce:	460b      	mov	r3, r1
    7dd0:	73fb      	strb	r3, [r7, #15]

		handle_usb(clkn);
    7dd2:	4b13      	ldr	r3, [pc, #76]	; (7e20 <led_specan+0x190>)
    7dd4:	681b      	ldr	r3, [r3, #0]
    7dd6:	4618      	mov	r0, r3
    7dd8:	f000 fca2 	bl	8720 <handle_usb>
        //wait(1);
		cc2400_strobe(SRFOFF);
    7ddc:	2064      	movs	r0, #100	; 0x64
    7dde:	f001 ff39 	bl	9c54 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    7de2:	bf00      	nop
    7de4:	f001 ff2c 	bl	9c40 <cc2400_status>
    7de8:	4603      	mov	r3, r0
    7dea:	f003 0304 	and.w	r3, r3, #4
    7dee:	2b00      	cmp	r3, #0
    7df0:	d1f8      	bne.n	7de4 <led_specan+0x154>
	cc2400_set(RSSI,    0x00F1); // RSSI Sample over 2 symbols

	while (!(cc2400_status() & XOSC16M_STABLE));
	while ((cc2400_status() & FS_LOCK));

	while (requested_mode == MODE_LED_SPECAN) {
    7df2:	4b0c      	ldr	r3, [pc, #48]	; (7e24 <led_specan+0x194>)
    7df4:	781b      	ldrb	r3, [r3, #0]
    7df6:	b2db      	uxtb	r3, r3
    7df8:	2b07      	cmp	r3, #7
    7dfa:	d080      	beq.n	7cfe <led_specan+0x6e>
		handle_usb(clkn);
        //wait(1);
		cc2400_strobe(SRFOFF);
		while ((cc2400_status() & FS_LOCK));
	}
	mode = MODE_IDLE;
    7dfc:	4b0a      	ldr	r3, [pc, #40]	; (7e28 <led_specan+0x198>)
    7dfe:	2200      	movs	r2, #0
    7e00:	701a      	strb	r2, [r3, #0]
}
    7e02:	3710      	adds	r7, #16
    7e04:	46bd      	mov	sp, r7
    7e06:	bd80      	pop	{r7, pc}
    7e08:	0000c0b4 	.word	0x0000c0b4
    7e0c:	2009c058 	.word	0x2009c058
    7e10:	100004a2 	.word	0x100004a2
    7e14:	2009c038 	.word	0x2009c038
    7e18:	2009c03c 	.word	0x2009c03c
    7e1c:	55555556 	.word	0x55555556
    7e20:	10000be4 	.word	0x10000be4
    7e24:	10000a3f 	.word	0x10000a3f
    7e28:	10000a3e 	.word	0x10000a3e

00007e2c <main>:

int main()
{
    7e2c:	b580      	push	{r7, lr}
    7e2e:	af00      	add	r7, sp, #0
	ubertooth_init();
    7e30:	f001 fd72 	bl	9918 <ubertooth_init>
	clkn_init();
    7e34:	f7fd fa98 	bl	5368 <clkn_init>
	ubertooth_usb_init(vendor_request_handler);
    7e38:	4842      	ldr	r0, [pc, #264]	; (7f44 <main+0x118>)
    7e3a:	f000 fba9 	bl	8590 <ubertooth_usb_init>

	while (1) {
		handle_usb(clkn);
    7e3e:	4b42      	ldr	r3, [pc, #264]	; (7f48 <main+0x11c>)
    7e40:	681b      	ldr	r3, [r3, #0]
    7e42:	4618      	mov	r0, r3
    7e44:	f000 fc6c 	bl	8720 <handle_usb>
		if(requested_mode != mode)
    7e48:	4b40      	ldr	r3, [pc, #256]	; (7f4c <main+0x120>)
    7e4a:	781b      	ldrb	r3, [r3, #0]
    7e4c:	b2da      	uxtb	r2, r3
    7e4e:	4b40      	ldr	r3, [pc, #256]	; (7f50 <main+0x124>)
    7e50:	781b      	ldrb	r3, [r3, #0]
    7e52:	b2db      	uxtb	r3, r3
    7e54:	429a      	cmp	r2, r3
    7e56:	d074      	beq.n	7f42 <main+0x116>
			switch (requested_mode) {
    7e58:	4b3c      	ldr	r3, [pc, #240]	; (7f4c <main+0x120>)
    7e5a:	781b      	ldrb	r3, [r3, #0]
    7e5c:	b2db      	uxtb	r3, r3
    7e5e:	2b0d      	cmp	r3, #13
    7e60:	d86e      	bhi.n	7f40 <main+0x114>
    7e62:	a201      	add	r2, pc, #4	; (adr r2, 7e68 <main+0x3c>)
    7e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    7e68:	00007f3b 	.word	0x00007f3b
    7e6c:	00007ead 	.word	0x00007ead
    7e70:	00007f41 	.word	0x00007f41
    7e74:	00007ed7 	.word	0x00007ed7
    7e78:	00007f1b 	.word	0x00007f1b
    7e7c:	00007ee7 	.word	0x00007ee7
    7e80:	00007f0d 	.word	0x00007f0d
    7e84:	00007f21 	.word	0x00007f21
    7e88:	00007eb9 	.word	0x00007eb9
    7e8c:	00007ec5 	.word	0x00007ec5
    7e90:	00007ecb 	.word	0x00007ecb
    7e94:	00007ea1 	.word	0x00007ea1
    7e98:	00007ed1 	.word	0x00007ed1
    7e9c:	00007f27 	.word	0x00007f27
				 case MODE_RESET:
					/* Allow time for the USB command to return correctly */
					wait(1);
    7ea0:	2001      	movs	r0, #1
    7ea2:	f001 fc31 	bl	9708 <wait>
					reset();
    7ea6:	f001 ffdf 	bl	9e68 <reset>
					break;
    7eaa:	e04a      	b.n	7f42 <main+0x116>
				case MODE_RX_SYMBOLS:
					mode = MODE_RX_SYMBOLS;
    7eac:	4b28      	ldr	r3, [pc, #160]	; (7f50 <main+0x124>)
    7eae:	2201      	movs	r2, #1
    7eb0:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    7eb2:	f7fe f9df 	bl	6274 <bt_stream_rx>
					break;
    7eb6:	e044      	b.n	7f42 <main+0x116>
				case MODE_BT_FOLLOW:
					mode = MODE_BT_FOLLOW;
    7eb8:	4b25      	ldr	r3, [pc, #148]	; (7f50 <main+0x124>)
    7eba:	2208      	movs	r2, #8
    7ebc:	701a      	strb	r2, [r3, #0]
					bt_stream_rx();
    7ebe:	f7fe f9d9 	bl	6274 <bt_stream_rx>
					break;
    7ec2:	e03e      	b.n	7f42 <main+0x116>
				case MODE_BT_FOLLOW_LE:
					bt_follow_le();
    7ec4:	f7ff f96e 	bl	71a4 <bt_follow_le>
					break;
    7ec8:	e03b      	b.n	7f42 <main+0x116>
				case MODE_BT_PROMISC_LE:
					bt_promisc_le();
    7eca:	f7ff fd55 	bl	7978 <bt_promisc_le>
					break;
    7ece:	e038      	b.n	7f42 <main+0x116>
				case MODE_BT_SLAVE_LE:
					bt_slave_le();
    7ed0:	f7ff fd96 	bl	7a00 <bt_slave_le>
					break;
    7ed4:	e035      	b.n	7f42 <main+0x116>
				case MODE_TX_TEST:
					mode = MODE_TX_TEST;
    7ed6:	4b1e      	ldr	r3, [pc, #120]	; (7f50 <main+0x124>)
    7ed8:	2203      	movs	r2, #3
    7eda:	701a      	strb	r2, [r3, #0]
					cc2400_txtest(&modulation, &channel);
    7edc:	481d      	ldr	r0, [pc, #116]	; (7f54 <main+0x128>)
    7ede:	491e      	ldr	r1, [pc, #120]	; (7f58 <main+0x12c>)
    7ee0:	f000 ff92 	bl	8e08 <cc2400_txtest>
					break;
    7ee4:	e02d      	b.n	7f42 <main+0x116>
				case MODE_RANGE_TEST:
					mode = MODE_RANGE_TEST;
    7ee6:	4b1a      	ldr	r3, [pc, #104]	; (7f50 <main+0x124>)
    7ee8:	2205      	movs	r2, #5
    7eea:	701a      	strb	r2, [r3, #0]
					cc2400_rangetest(&channel);
    7eec:	481a      	ldr	r0, [pc, #104]	; (7f58 <main+0x12c>)
    7eee:	f000 fc35 	bl	875c <cc2400_rangetest>
					mode = MODE_IDLE;
    7ef2:	4b17      	ldr	r3, [pc, #92]	; (7f50 <main+0x124>)
    7ef4:	2200      	movs	r2, #0
    7ef6:	701a      	strb	r2, [r3, #0]
					if (requested_mode == MODE_RANGE_TEST)
    7ef8:	4b14      	ldr	r3, [pc, #80]	; (7f4c <main+0x120>)
    7efa:	781b      	ldrb	r3, [r3, #0]
    7efc:	b2db      	uxtb	r3, r3
    7efe:	2b05      	cmp	r3, #5
    7f00:	d103      	bne.n	7f0a <main+0xde>
						requested_mode = MODE_IDLE;
    7f02:	4b12      	ldr	r3, [pc, #72]	; (7f4c <main+0x120>)
    7f04:	2200      	movs	r2, #0
    7f06:	701a      	strb	r2, [r3, #0]
					break;
    7f08:	e01b      	b.n	7f42 <main+0x116>
    7f0a:	e01a      	b.n	7f42 <main+0x116>
				case MODE_REPEATER:
					mode = MODE_REPEATER;
    7f0c:	4b10      	ldr	r3, [pc, #64]	; (7f50 <main+0x124>)
    7f0e:	2206      	movs	r2, #6
    7f10:	701a      	strb	r2, [r3, #0]
					cc2400_repeater(&channel);
    7f12:	4811      	ldr	r0, [pc, #68]	; (7f58 <main+0x12c>)
    7f14:	f000 fe40 	bl	8b98 <cc2400_repeater>
					break;
    7f18:	e013      	b.n	7f42 <main+0x116>
				case MODE_SPECAN:
					specan();
    7f1a:	f7ff fded 	bl	7af8 <specan>
					break;
    7f1e:	e010      	b.n	7f42 <main+0x116>
				case MODE_LED_SPECAN:
					led_specan();
    7f20:	f7ff feb6 	bl	7c90 <led_specan>
					break;
    7f24:	e00d      	b.n	7f42 <main+0x116>
				case MODE_EGO:
					mode = MODE_EGO;
    7f26:	4b0a      	ldr	r3, [pc, #40]	; (7f50 <main+0x124>)
    7f28:	220d      	movs	r2, #13
    7f2a:	701a      	strb	r2, [r3, #0]
					ego_main(ego_mode);
    7f2c:	4b0b      	ldr	r3, [pc, #44]	; (7f5c <main+0x130>)
    7f2e:	781b      	ldrb	r3, [r3, #0]
    7f30:	b2db      	uxtb	r3, r3
    7f32:	4618      	mov	r0, r3
    7f34:	f001 fb36 	bl	95a4 <ego_main>
					break;
    7f38:	e003      	b.n	7f42 <main+0x116>
				case MODE_IDLE:
					cc2400_idle();
    7f3a:	f7fd fdef 	bl	5b1c <cc2400_idle>
					break;
    7f3e:	e000      	b.n	7f42 <main+0x116>
				default:
					/* This is really an error state, but what can you do? */
					break;
    7f40:	bf00      	nop
			}
	}
    7f42:	e77c      	b.n	7e3e <main+0x12>
    7f44:	0000487d 	.word	0x0000487d
    7f48:	10000be4 	.word	0x10000be4
    7f4c:	10000a3f 	.word	0x10000a3f
    7f50:	10000a3e 	.word	0x10000a3e
    7f54:	10000a42 	.word	0x10000a42
    7f58:	1000049c 	.word	0x1000049c
    7f5c:	10000a41 	.word	0x10000a41

00007f60 <perm5>:
	}
}

/* 5 bit permutation */
u8 perm5(u8 z, u8 p_high, u16 p_low)
{
    7f60:	b490      	push	{r4, r7}
    7f62:	b092      	sub	sp, #72	; 0x48
    7f64:	af00      	add	r7, sp, #0
    7f66:	4603      	mov	r3, r0
    7f68:	71fb      	strb	r3, [r7, #7]
    7f6a:	460b      	mov	r3, r1
    7f6c:	71bb      	strb	r3, [r7, #6]
    7f6e:	4613      	mov	r3, r2
    7f70:	80bb      	strh	r3, [r7, #4]
	/* z is constrained to 5 bits, p_high to 5 bits, p_low to 9 bits */
	z &= 0x1f;
    7f72:	79fb      	ldrb	r3, [r7, #7]
    7f74:	f003 031f 	and.w	r3, r3, #31
    7f78:	71fb      	strb	r3, [r7, #7]
	p_high &= 0x1f;
    7f7a:	79bb      	ldrb	r3, [r7, #6]
    7f7c:	f003 031f 	and.w	r3, r3, #31
    7f80:	71bb      	strb	r3, [r7, #6]
	p_low &= 0x1ff;
    7f82:	88bb      	ldrh	r3, [r7, #4]
    7f84:	f3c3 0308 	ubfx	r3, r3, #0, #9
    7f88:	80bb      	strh	r3, [r7, #4]

	int i;
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
    7f8a:	4a5c      	ldr	r2, [pc, #368]	; (80fc <perm5+0x19c>)
    7f8c:	f107 031c 	add.w	r3, r7, #28
    7f90:	4614      	mov	r4, r2
    7f92:	6820      	ldr	r0, [r4, #0]
    7f94:	6861      	ldr	r1, [r4, #4]
    7f96:	68a2      	ldr	r2, [r4, #8]
    7f98:	c307      	stmia	r3!, {r0, r1, r2}
    7f9a:	89a2      	ldrh	r2, [r4, #12]
    7f9c:	801a      	strh	r2, [r3, #0]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};
    7f9e:	4a58      	ldr	r2, [pc, #352]	; (8100 <perm5+0x1a0>)
    7fa0:	f107 030c 	add.w	r3, r7, #12
    7fa4:	4614      	mov	r4, r2
    7fa6:	6820      	ldr	r0, [r4, #0]
    7fa8:	6861      	ldr	r1, [r4, #4]
    7faa:	68a2      	ldr	r2, [r4, #8]
    7fac:	c307      	stmia	r3!, {r0, r1, r2}
    7fae:	89a2      	ldrh	r2, [r4, #12]
    7fb0:	801a      	strh	r2, [r3, #0]

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    7fb2:	2300      	movs	r3, #0
    7fb4:	647b      	str	r3, [r7, #68]	; 0x44
    7fb6:	e010      	b.n	7fda <perm5+0x7a>
		p[i] = (p_low >> i) & 0x01;
    7fb8:	88ba      	ldrh	r2, [r7, #4]
    7fba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7fbc:	fa42 f303 	asr.w	r3, r2, r3
    7fc0:	b2db      	uxtb	r3, r3
    7fc2:	f003 0301 	and.w	r3, r3, #1
    7fc6:	b2d9      	uxtb	r1, r3
    7fc8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    7fcc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7fce:	4413      	add	r3, r2
    7fd0:	460a      	mov	r2, r1
    7fd2:	701a      	strb	r2, [r3, #0]
	u8 tmp, output, z_bit[5], p[14];
	u8 index1[] = {0, 2, 1, 3, 0, 1, 0, 3, 1, 0, 2, 1, 0, 1};
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
    7fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7fd6:	3301      	adds	r3, #1
    7fd8:	647b      	str	r3, [r7, #68]	; 0x44
    7fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7fdc:	2b08      	cmp	r3, #8
    7fde:	ddeb      	ble.n	7fb8 <perm5+0x58>
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    7fe0:	2300      	movs	r3, #0
    7fe2:	647b      	str	r3, [r7, #68]	; 0x44
    7fe4:	e011      	b.n	800a <perm5+0xaa>
		p[i+9] = (p_high >> i) & 0x01;
    7fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    7fe8:	3309      	adds	r3, #9
    7fea:	79b9      	ldrb	r1, [r7, #6]
    7fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    7fee:	fa41 f202 	asr.w	r2, r1, r2
    7ff2:	b2d2      	uxtb	r2, r2
    7ff4:	f002 0201 	and.w	r2, r2, #1
    7ff8:	b2d2      	uxtb	r2, r2
    7ffa:	f107 0148 	add.w	r1, r7, #72	; 0x48
    7ffe:	440b      	add	r3, r1
    8000:	f803 2c1c 	strb.w	r2, [r3, #-28]
	u8 index2[] = {1, 3, 2, 4, 4, 3, 2, 4, 4, 3, 4, 3, 3, 2};

	/* bits of p_low and p_high are control signals */
	for (i = 0; i < 9; i++)
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
    8004:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8006:	3301      	adds	r3, #1
    8008:	647b      	str	r3, [r7, #68]	; 0x44
    800a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    800c:	2b04      	cmp	r3, #4
    800e:	ddea      	ble.n	7fe6 <perm5+0x86>
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    8010:	2300      	movs	r3, #0
    8012:	647b      	str	r3, [r7, #68]	; 0x44
    8014:	e010      	b.n	8038 <perm5+0xd8>
		z_bit[i] = (z >> i) & 0x01;
    8016:	79fa      	ldrb	r2, [r7, #7]
    8018:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    801a:	fa42 f303 	asr.w	r3, r2, r3
    801e:	b2db      	uxtb	r3, r3
    8020:	f003 0301 	and.w	r3, r3, #1
    8024:	b2d9      	uxtb	r1, r3
    8026:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    802a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    802c:	4413      	add	r3, r2
    802e:	460a      	mov	r2, r1
    8030:	701a      	strb	r2, [r3, #0]
		p[i] = (p_low >> i) & 0x01;
	for (i = 0; i < 5; i++)
		p[i+9] = (p_high >> i) & 0x01;

	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
    8032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8034:	3301      	adds	r3, #1
    8036:	647b      	str	r3, [r7, #68]	; 0x44
    8038:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    803a:	2b04      	cmp	r3, #4
    803c:	ddeb      	ble.n	8016 <perm5+0xb6>
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    803e:	230d      	movs	r3, #13
    8040:	647b      	str	r3, [r7, #68]	; 0x44
    8042:	e036      	b.n	80b2 <perm5+0x152>
		/* swap bits according to index arrays if control signal tells us to */
		if (p[i]) {
    8044:	f107 022c 	add.w	r2, r7, #44	; 0x2c
    8048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    804a:	4413      	add	r3, r2
    804c:	781b      	ldrb	r3, [r3, #0]
    804e:	2b00      	cmp	r3, #0
    8050:	d02c      	beq.n	80ac <perm5+0x14c>
			tmp = z_bit[index1[i]];
    8052:	f107 021c 	add.w	r2, r7, #28
    8056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8058:	4413      	add	r3, r2
    805a:	781b      	ldrb	r3, [r3, #0]
    805c:	f107 0248 	add.w	r2, r7, #72	; 0x48
    8060:	4413      	add	r3, r2
    8062:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
    8066:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
			z_bit[index1[i]] = z_bit[index2[i]];
    806a:	f107 021c 	add.w	r2, r7, #28
    806e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    8070:	4413      	add	r3, r2
    8072:	781b      	ldrb	r3, [r3, #0]
    8074:	4619      	mov	r1, r3
    8076:	f107 020c 	add.w	r2, r7, #12
    807a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    807c:	4413      	add	r3, r2
    807e:	781b      	ldrb	r3, [r3, #0]
    8080:	f107 0248 	add.w	r2, r7, #72	; 0x48
    8084:	4413      	add	r3, r2
    8086:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
    808a:	f107 0348 	add.w	r3, r7, #72	; 0x48
    808e:	440b      	add	r3, r1
    8090:	f803 2c0c 	strb.w	r2, [r3, #-12]
			z_bit[index2[i]] = tmp;
    8094:	f107 020c 	add.w	r2, r7, #12
    8098:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    809a:	4413      	add	r3, r2
    809c:	781b      	ldrb	r3, [r3, #0]
    809e:	f107 0248 	add.w	r2, r7, #72	; 0x48
    80a2:	4413      	add	r3, r2
    80a4:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
    80a8:	f803 2c0c 	strb.w	r2, [r3, #-12]
	/* bit swapping will be easier with an array of bits */
	for (i = 0; i < 5; i++)
		z_bit[i] = (z >> i) & 0x01;

	/* butterfly operations */
	for (i = 13; i >= 0; i--) {
    80ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    80ae:	3b01      	subs	r3, #1
    80b0:	647b      	str	r3, [r7, #68]	; 0x44
    80b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    80b4:	2b00      	cmp	r3, #0
    80b6:	dac5      	bge.n	8044 <perm5+0xe4>
			z_bit[index2[i]] = tmp;
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
    80b8:	2300      	movs	r3, #0
    80ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	for (i = 0; i < 5; i++)
    80be:	2300      	movs	r3, #0
    80c0:	647b      	str	r3, [r7, #68]	; 0x44
    80c2:	e011      	b.n	80e8 <perm5+0x188>
		output += z_bit[i] << i;
    80c4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
    80c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    80ca:	4413      	add	r3, r2
    80cc:	781b      	ldrb	r3, [r3, #0]
    80ce:	461a      	mov	r2, r3
    80d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    80d2:	fa02 f303 	lsl.w	r3, r2, r3
    80d6:	b2da      	uxtb	r2, r3
    80d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
    80dc:	4413      	add	r3, r2
    80de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
		}
	}

	/* reconstruct output from rearranged bits */
	output = 0;
	for (i = 0; i < 5; i++)
    80e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    80e4:	3301      	adds	r3, #1
    80e6:	647b      	str	r3, [r7, #68]	; 0x44
    80e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    80ea:	2b04      	cmp	r3, #4
    80ec:	ddea      	ble.n	80c4 <perm5+0x164>
		output += z_bit[i] << i;

	return output;
    80ee:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
}
    80f2:	4618      	mov	r0, r3
    80f4:	3748      	adds	r7, #72	; 0x48
    80f6:	46bd      	mov	sp, r7
    80f8:	bc90      	pop	{r4, r7}
    80fa:	4770      	bx	lr
    80fc:	0000c0bc 	.word	0x0000c0bc
    8100:	0000c0cc 	.word	0x0000c0cc

00008104 <next_hop>:

u16 next_hop(u32 clock)
{
    8104:	b580      	push	{r7, lr}
    8106:	b08a      	sub	sp, #40	; 0x28
    8108:	af00      	add	r7, sp, #0
    810a:	6078      	str	r0, [r7, #4]
	u16 d, y2;
	u32 base_f, f, f_dash;

	clock &= 0xffffffff;
	/* Variable names used in Vol 2, Part B, Section 2.6 of the spec */
	x = (clock >> 2) & 0x1f;
    810c:	687b      	ldr	r3, [r7, #4]
    810e:	089b      	lsrs	r3, r3, #2
    8110:	b2db      	uxtb	r3, r3
    8112:	f003 031f 	and.w	r3, r3, #31
    8116:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	y1 = (clock >> 1) & 0x01;
    811a:	687b      	ldr	r3, [r7, #4]
    811c:	085b      	lsrs	r3, r3, #1
    811e:	b2db      	uxtb	r3, r3
    8120:	f003 0301 	and.w	r3, r3, #1
    8124:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	y2 = y1 << 5;
    8128:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    812c:	b29b      	uxth	r3, r3
    812e:	015b      	lsls	r3, r3, #5
    8130:	847b      	strh	r3, [r7, #34]	; 0x22
	a = (a1 ^ (clock >> 21)) & 0x1f;
    8132:	687b      	ldr	r3, [r7, #4]
    8134:	0d5b      	lsrs	r3, r3, #21
    8136:	b2da      	uxtb	r2, r3
    8138:	4b4b      	ldr	r3, [pc, #300]	; (8268 <next_hop+0x164>)
    813a:	781b      	ldrb	r3, [r3, #0]
    813c:	4053      	eors	r3, r2
    813e:	b2db      	uxtb	r3, r3
    8140:	f003 031f 	and.w	r3, r3, #31
    8144:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	/* b is already defined */
	c = (c1 ^ (clock >> 16)) & 0x1f;
    8148:	687b      	ldr	r3, [r7, #4]
    814a:	0c1b      	lsrs	r3, r3, #16
    814c:	b2da      	uxtb	r2, r3
    814e:	4b47      	ldr	r3, [pc, #284]	; (826c <next_hop+0x168>)
    8150:	781b      	ldrb	r3, [r3, #0]
    8152:	4053      	eors	r3, r2
    8154:	b2db      	uxtb	r3, r3
    8156:	f003 031f 	and.w	r3, r3, #31
    815a:	f887 3020 	strb.w	r3, [r7, #32]
	d = (d1 ^ (clock >> 7)) & 0x1ff;
    815e:	687b      	ldr	r3, [r7, #4]
    8160:	09db      	lsrs	r3, r3, #7
    8162:	b29a      	uxth	r2, r3
    8164:	4b42      	ldr	r3, [pc, #264]	; (8270 <next_hop+0x16c>)
    8166:	881b      	ldrh	r3, [r3, #0]
    8168:	4053      	eors	r3, r2
    816a:	b29b      	uxth	r3, r3
    816c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    8170:	83fb      	strh	r3, [r7, #30]
	/* e is already defined */
	base_f = (clock >> 3) & 0x1fffff0;
    8172:	687b      	ldr	r3, [r7, #4]
    8174:	08db      	lsrs	r3, r3, #3
    8176:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
    817a:	f023 030f 	bic.w	r3, r3, #15
    817e:	61bb      	str	r3, [r7, #24]
	f = base_f % 79;
    8180:	69b9      	ldr	r1, [r7, #24]
    8182:	4b3c      	ldr	r3, [pc, #240]	; (8274 <next_hop+0x170>)
    8184:	fba3 2301 	umull	r2, r3, r3, r1
    8188:	099a      	lsrs	r2, r3, #6
    818a:	4613      	mov	r3, r2
    818c:	009b      	lsls	r3, r3, #2
    818e:	4413      	add	r3, r2
    8190:	011b      	lsls	r3, r3, #4
    8192:	1a9b      	subs	r3, r3, r2
    8194:	1acb      	subs	r3, r1, r3
    8196:	617b      	str	r3, [r7, #20]

	perm = perm5(
    8198:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
    819c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
    81a0:	4413      	add	r3, r2
    81a2:	b2db      	uxtb	r3, r3
    81a4:	b2db      	uxtb	r3, r3
    81a6:	f003 031f 	and.w	r3, r3, #31
    81aa:	b2da      	uxtb	r2, r3
    81ac:	4b32      	ldr	r3, [pc, #200]	; (8278 <next_hop+0x174>)
    81ae:	781b      	ldrb	r3, [r3, #0]
    81b0:	b2db      	uxtb	r3, r3
    81b2:	4053      	eors	r3, r2
    81b4:	b2db      	uxtb	r3, r3
    81b6:	b2d9      	uxtb	r1, r3
    81b8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
    81bc:	461a      	mov	r2, r3
    81be:	0152      	lsls	r2, r2, #5
    81c0:	1ad3      	subs	r3, r2, r3
    81c2:	b2db      	uxtb	r3, r3
    81c4:	b2da      	uxtb	r2, r3
    81c6:	f897 3020 	ldrb.w	r3, [r7, #32]
    81ca:	4053      	eors	r3, r2
    81cc:	b2db      	uxtb	r3, r3
    81ce:	b2da      	uxtb	r2, r3
    81d0:	8bfb      	ldrh	r3, [r7, #30]
    81d2:	4608      	mov	r0, r1
    81d4:	4611      	mov	r1, r2
    81d6:	461a      	mov	r2, r3
    81d8:	f7ff fec2 	bl	7f60 <perm5>
    81dc:	4603      	mov	r3, r0
    81de:	74fb      	strb	r3, [r7, #19]
		((x + a) % 32) ^ b,
		(y1 * 0x1f) ^ c,
		d);
	/* hop selection */
	next_channel = bank[(perm + e + f + y2) % CHANNELS];
    81e0:	7cfb      	ldrb	r3, [r7, #19]
    81e2:	4a26      	ldr	r2, [pc, #152]	; (827c <next_hop+0x178>)
    81e4:	7812      	ldrb	r2, [r2, #0]
    81e6:	4413      	add	r3, r2
    81e8:	461a      	mov	r2, r3
    81ea:	697b      	ldr	r3, [r7, #20]
    81ec:	441a      	add	r2, r3
    81ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    81f0:	18d1      	adds	r1, r2, r3
    81f2:	4b20      	ldr	r3, [pc, #128]	; (8274 <next_hop+0x170>)
    81f4:	fba3 2301 	umull	r2, r3, r3, r1
    81f8:	099a      	lsrs	r2, r3, #6
    81fa:	4613      	mov	r3, r2
    81fc:	009b      	lsls	r3, r3, #2
    81fe:	4413      	add	r3, r2
    8200:	011b      	lsls	r3, r3, #4
    8202:	1a9b      	subs	r3, r3, r2
    8204:	1aca      	subs	r2, r1, r3
    8206:	4b1e      	ldr	r3, [pc, #120]	; (8280 <next_hop+0x17c>)
    8208:	5c9b      	ldrb	r3, [r3, r2]
    820a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if(afh_enabled) {
    820e:	4b1d      	ldr	r3, [pc, #116]	; (8284 <next_hop+0x180>)
    8210:	781b      	ldrb	r3, [r3, #0]
    8212:	2b00      	cmp	r3, #0
    8214:	d01d      	beq.n	8252 <next_hop+0x14e>
		f_dash = base_f % used_channels;
    8216:	4b1c      	ldr	r3, [pc, #112]	; (8288 <next_hop+0x184>)
    8218:	781b      	ldrb	r3, [r3, #0]
    821a:	461a      	mov	r2, r3
    821c:	69bb      	ldr	r3, [r7, #24]
    821e:	fbb3 f1f2 	udiv	r1, r3, r2
    8222:	fb02 f201 	mul.w	r2, r2, r1
    8226:	1a9b      	subs	r3, r3, r2
    8228:	60fb      	str	r3, [r7, #12]
		next_channel = afh_bank[(perm + e + f_dash + y2) % used_channels];
    822a:	7cfb      	ldrb	r3, [r7, #19]
    822c:	4a13      	ldr	r2, [pc, #76]	; (827c <next_hop+0x178>)
    822e:	7812      	ldrb	r2, [r2, #0]
    8230:	4413      	add	r3, r2
    8232:	461a      	mov	r2, r3
    8234:	68fb      	ldr	r3, [r7, #12]
    8236:	441a      	add	r2, r3
    8238:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
    823a:	4413      	add	r3, r2
    823c:	4a12      	ldr	r2, [pc, #72]	; (8288 <next_hop+0x184>)
    823e:	7812      	ldrb	r2, [r2, #0]
    8240:	fbb3 f1f2 	udiv	r1, r3, r2
    8244:	fb02 f201 	mul.w	r2, r2, r1
    8248:	1a9b      	subs	r3, r3, r2
    824a:	4a10      	ldr	r2, [pc, #64]	; (828c <next_hop+0x188>)
    824c:	5cd3      	ldrb	r3, [r2, r3]
    824e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	return (2402 + next_channel);
    8252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
    8256:	b29b      	uxth	r3, r3
    8258:	f603 1362 	addw	r3, r3, #2402	; 0x962
    825c:	b29b      	uxth	r3, r3

}
    825e:	4618      	mov	r0, r3
    8260:	3728      	adds	r7, #40	; 0x28
    8262:	46bd      	mov	sp, r7
    8264:	bd80      	pop	{r7, pc}
    8266:	bf00      	nop
    8268:	10001123 	.word	0x10001123
    826c:	10001124 	.word	0x10001124
    8270:	100010d2 	.word	0x100010d2
    8274:	cf6474a9 	.word	0xcf6474a9
    8278:	100010d0 	.word	0x100010d0
    827c:	10001177 	.word	0x10001177
    8280:	10001128 	.word	0x10001128
    8284:	10001024 	.word	0x10001024
    8288:	100010d1 	.word	0x100010d1
    828c:	100010d4 	.word	0x100010d4

00008290 <btle_next_hop>:

extern u8 le_channel_idx;
extern u8 le_hop_amount;

u16 btle_next_hop(le_state_t *le)
{
    8290:	b580      	push	{r7, lr}
    8292:	b084      	sub	sp, #16
    8294:	af00      	add	r7, sp, #0
    8296:	6078      	str	r0, [r7, #4]
	u16 phys = btle_channel_index_to_phys(le->channel_idx);
    8298:	687b      	ldr	r3, [r7, #4]
    829a:	7d5b      	ldrb	r3, [r3, #21]
    829c:	4618      	mov	r0, r3
    829e:	f000 f84b 	bl	8338 <btle_channel_index_to_phys>
    82a2:	4603      	mov	r3, r0
    82a4:	81fb      	strh	r3, [r7, #14]
	le->channel_idx = (le->channel_idx + le->channel_increment) % 37;
    82a6:	687b      	ldr	r3, [r7, #4]
    82a8:	7d5b      	ldrb	r3, [r3, #21]
    82aa:	461a      	mov	r2, r3
    82ac:	687b      	ldr	r3, [r7, #4]
    82ae:	7d9b      	ldrb	r3, [r3, #22]
    82b0:	441a      	add	r2, r3
    82b2:	4b0a      	ldr	r3, [pc, #40]	; (82dc <btle_next_hop+0x4c>)
    82b4:	fb82 0103 	smull	r0, r1, r2, r3
    82b8:	1853      	adds	r3, r2, r1
    82ba:	1159      	asrs	r1, r3, #5
    82bc:	17d3      	asrs	r3, r2, #31
    82be:	1ac9      	subs	r1, r1, r3
    82c0:	460b      	mov	r3, r1
    82c2:	00db      	lsls	r3, r3, #3
    82c4:	440b      	add	r3, r1
    82c6:	009b      	lsls	r3, r3, #2
    82c8:	440b      	add	r3, r1
    82ca:	1ad1      	subs	r1, r2, r3
    82cc:	b2ca      	uxtb	r2, r1
    82ce:	687b      	ldr	r3, [r7, #4]
    82d0:	755a      	strb	r2, [r3, #21]
	return phys;
    82d2:	89fb      	ldrh	r3, [r7, #14]
}
    82d4:	4618      	mov	r0, r3
    82d6:	3710      	adds	r7, #16
    82d8:	46bd      	mov	sp, r7
    82da:	bd80      	pop	{r7, pc}
    82dc:	dd67c8a7 	.word	0xdd67c8a7

000082e0 <btle_channel_index>:

u32 received_data = 0;

u8 btle_channel_index(u8 channel) {
    82e0:	b480      	push	{r7}
    82e2:	b085      	sub	sp, #20
    82e4:	af00      	add	r7, sp, #0
    82e6:	4603      	mov	r3, r0
    82e8:	71fb      	strb	r3, [r7, #7]
	u8 idx;
	channel /= 2;
    82ea:	79fb      	ldrb	r3, [r7, #7]
    82ec:	085b      	lsrs	r3, r3, #1
    82ee:	71fb      	strb	r3, [r7, #7]
	if (channel == 0)
    82f0:	79fb      	ldrb	r3, [r7, #7]
    82f2:	2b00      	cmp	r3, #0
    82f4:	d102      	bne.n	82fc <btle_channel_index+0x1c>
		idx = 37;
    82f6:	2325      	movs	r3, #37	; 0x25
    82f8:	73fb      	strb	r3, [r7, #15]
    82fa:	e015      	b.n	8328 <btle_channel_index+0x48>
	else if (channel < 12)
    82fc:	79fb      	ldrb	r3, [r7, #7]
    82fe:	2b0b      	cmp	r3, #11
    8300:	d803      	bhi.n	830a <btle_channel_index+0x2a>
		idx = channel - 1;
    8302:	79fb      	ldrb	r3, [r7, #7]
    8304:	3b01      	subs	r3, #1
    8306:	73fb      	strb	r3, [r7, #15]
    8308:	e00e      	b.n	8328 <btle_channel_index+0x48>
	else if (channel == 12)
    830a:	79fb      	ldrb	r3, [r7, #7]
    830c:	2b0c      	cmp	r3, #12
    830e:	d102      	bne.n	8316 <btle_channel_index+0x36>
		idx = 38;
    8310:	2326      	movs	r3, #38	; 0x26
    8312:	73fb      	strb	r3, [r7, #15]
    8314:	e008      	b.n	8328 <btle_channel_index+0x48>
	else if (channel < 39)
    8316:	79fb      	ldrb	r3, [r7, #7]
    8318:	2b26      	cmp	r3, #38	; 0x26
    831a:	d803      	bhi.n	8324 <btle_channel_index+0x44>
		idx = channel - 2;
    831c:	79fb      	ldrb	r3, [r7, #7]
    831e:	3b02      	subs	r3, #2
    8320:	73fb      	strb	r3, [r7, #15]
    8322:	e001      	b.n	8328 <btle_channel_index+0x48>
	else
		idx = 39;
    8324:	2327      	movs	r3, #39	; 0x27
    8326:	73fb      	strb	r3, [r7, #15]
	return idx;
    8328:	7bfb      	ldrb	r3, [r7, #15]
}
    832a:	4618      	mov	r0, r3
    832c:	3714      	adds	r7, #20
    832e:	46bd      	mov	sp, r7
    8330:	f85d 7b04 	ldr.w	r7, [sp], #4
    8334:	4770      	bx	lr
    8336:	bf00      	nop

00008338 <btle_channel_index_to_phys>:

u16 btle_channel_index_to_phys(u8 idx) {
    8338:	b480      	push	{r7}
    833a:	b085      	sub	sp, #20
    833c:	af00      	add	r7, sp, #0
    833e:	4603      	mov	r3, r0
    8340:	71fb      	strb	r3, [r7, #7]
	u16 phys;
	if (idx < 11)
    8342:	79fb      	ldrb	r3, [r7, #7]
    8344:	2b0a      	cmp	r3, #10
    8346:	d806      	bhi.n	8356 <btle_channel_index_to_phys+0x1e>
		phys = 2404 + 2 * idx;
    8348:	79fb      	ldrb	r3, [r7, #7]
    834a:	f203 43b2 	addw	r3, r3, #1202	; 0x4b2
    834e:	b29b      	uxth	r3, r3
    8350:	005b      	lsls	r3, r3, #1
    8352:	81fb      	strh	r3, [r7, #14]
    8354:	e01a      	b.n	838c <btle_channel_index_to_phys+0x54>
	else if (idx < 37)
    8356:	79fb      	ldrb	r3, [r7, #7]
    8358:	2b24      	cmp	r3, #36	; 0x24
    835a:	d806      	bhi.n	836a <btle_channel_index_to_phys+0x32>
		phys = 2428 + 2 * (idx - 11);
    835c:	79fb      	ldrb	r3, [r7, #7]
    835e:	f203 43b3 	addw	r3, r3, #1203	; 0x4b3
    8362:	b29b      	uxth	r3, r3
    8364:	005b      	lsls	r3, r3, #1
    8366:	81fb      	strh	r3, [r7, #14]
    8368:	e010      	b.n	838c <btle_channel_index_to_phys+0x54>
	else if (idx == 37)
    836a:	79fb      	ldrb	r3, [r7, #7]
    836c:	2b25      	cmp	r3, #37	; 0x25
    836e:	d103      	bne.n	8378 <btle_channel_index_to_phys+0x40>
		phys = 2402;
    8370:	f640 1362 	movw	r3, #2402	; 0x962
    8374:	81fb      	strh	r3, [r7, #14]
    8376:	e009      	b.n	838c <btle_channel_index_to_phys+0x54>
	else if (idx == 38)
    8378:	79fb      	ldrb	r3, [r7, #7]
    837a:	2b26      	cmp	r3, #38	; 0x26
    837c:	d103      	bne.n	8386 <btle_channel_index_to_phys+0x4e>
		phys = 2426;
    837e:	f640 137a 	movw	r3, #2426	; 0x97a
    8382:	81fb      	strh	r3, [r7, #14]
    8384:	e002      	b.n	838c <btle_channel_index_to_phys+0x54>
	else
		phys = 2480;
    8386:	f44f 631b 	mov.w	r3, #2480	; 0x9b0
    838a:	81fb      	strh	r3, [r7, #14]
	return phys;
    838c:	89fb      	ldrh	r3, [r7, #14]
}
    838e:	4618      	mov	r0, r3
    8390:	3714      	adds	r7, #20
    8392:	46bd      	mov	sp, r7
    8394:	f85d 7b04 	ldr.w	r7, [sp], #4
    8398:	4770      	bx	lr
    839a:	bf00      	nop

0000839c <btle_calc_crc>:
//			0x6ff46e
//
//		bytes in packet will be:
//		  { 0x6e, 0xf4, 0x6f }
//
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
    839c:	b480      	push	{r7}
    839e:	b08b      	sub	sp, #44	; 0x2c
    83a0:	af00      	add	r7, sp, #0
    83a2:	60f8      	str	r0, [r7, #12]
    83a4:	60b9      	str	r1, [r7, #8]
    83a6:	607a      	str	r2, [r7, #4]
	u32 state = crc_init & 0xffffff;
    83a8:	68fb      	ldr	r3, [r7, #12]
    83aa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    83ae:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
    83b0:	4b1b      	ldr	r3, [pc, #108]	; (8420 <btle_calc_crc+0x84>)
    83b2:	617b      	str	r3, [r7, #20]
	int i, j;

	for (i = 0; i < len; ++i) {
    83b4:	2300      	movs	r3, #0
    83b6:	623b      	str	r3, [r7, #32]
    83b8:	e027      	b.n	840a <btle_calc_crc+0x6e>
		u8 cur = data[i];
    83ba:	6a3b      	ldr	r3, [r7, #32]
    83bc:	68ba      	ldr	r2, [r7, #8]
    83be:	4413      	add	r3, r2
    83c0:	781b      	ldrb	r3, [r3, #0]
    83c2:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    83c4:	2300      	movs	r3, #0
    83c6:	61fb      	str	r3, [r7, #28]
    83c8:	e019      	b.n	83fe <btle_calc_crc+0x62>
			int next_bit = (state ^ cur) & 1;
    83ca:	7efa      	ldrb	r2, [r7, #27]
    83cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    83ce:	4053      	eors	r3, r2
    83d0:	f003 0301 	and.w	r3, r3, #1
    83d4:	613b      	str	r3, [r7, #16]
			cur >>= 1;
    83d6:	7efb      	ldrb	r3, [r7, #27]
    83d8:	085b      	lsrs	r3, r3, #1
    83da:	76fb      	strb	r3, [r7, #27]
			state >>= 1;
    83dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    83de:	085b      	lsrs	r3, r3, #1
    83e0:	627b      	str	r3, [r7, #36]	; 0x24
			if (next_bit) {
    83e2:	693b      	ldr	r3, [r7, #16]
    83e4:	2b00      	cmp	r3, #0
    83e6:	d007      	beq.n	83f8 <btle_calc_crc+0x5c>
				state |= 1 << 23;
    83e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    83ea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
    83ee:	627b      	str	r3, [r7, #36]	; 0x24
				state ^= lfsr_mask;
    83f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    83f2:	697b      	ldr	r3, [r7, #20]
    83f4:	4053      	eors	r3, r2
    83f6:	627b      	str	r3, [r7, #36]	; 0x24
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    83f8:	69fb      	ldr	r3, [r7, #28]
    83fa:	3301      	adds	r3, #1
    83fc:	61fb      	str	r3, [r7, #28]
    83fe:	69fb      	ldr	r3, [r7, #28]
    8400:	2b07      	cmp	r3, #7
    8402:	dde2      	ble.n	83ca <btle_calc_crc+0x2e>
u32 btle_calc_crc(u32 crc_init, u8 *data, int len) {
	u32 state = crc_init & 0xffffff;
	u32 lfsr_mask = 0x5a6000; // 010110100110000000000000
	int i, j;

	for (i = 0; i < len; ++i) {
    8404:	6a3b      	ldr	r3, [r7, #32]
    8406:	3301      	adds	r3, #1
    8408:	623b      	str	r3, [r7, #32]
    840a:	6a3a      	ldr	r2, [r7, #32]
    840c:	687b      	ldr	r3, [r7, #4]
    840e:	429a      	cmp	r2, r3
    8410:	dbd3      	blt.n	83ba <btle_calc_crc+0x1e>
				state ^= lfsr_mask;
			}
		}
	}

	return state;
    8412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
    8414:	4618      	mov	r0, r3
    8416:	372c      	adds	r7, #44	; 0x2c
    8418:	46bd      	mov	sp, r7
    841a:	f85d 7b04 	ldr.w	r7, [sp], #4
    841e:	4770      	bx	lr
    8420:	005a6000 	.word	0x005a6000

00008424 <btle_reverse_crc>:
// runs the CRC in reverse to generate a CRCInit
//
//	crc should be big endian
//	the return will be big endian
//
u32 btle_reverse_crc(u32 crc, u8 *data, int len) {
    8424:	b480      	push	{r7}
    8426:	b08d      	sub	sp, #52	; 0x34
    8428:	af00      	add	r7, sp, #0
    842a:	60f8      	str	r0, [r7, #12]
    842c:	60b9      	str	r1, [r7, #8]
    842e:	607a      	str	r2, [r7, #4]
	u32 state = crc;
    8430:	68fb      	ldr	r3, [r7, #12]
    8432:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
    8434:	4b2b      	ldr	r3, [pc, #172]	; (84e4 <btle_reverse_crc+0xc0>)
    8436:	61fb      	str	r3, [r7, #28]
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    8438:	687b      	ldr	r3, [r7, #4]
    843a:	3b01      	subs	r3, #1
    843c:	627b      	str	r3, [r7, #36]	; 0x24
    843e:	e02d      	b.n	849c <btle_reverse_crc+0x78>
		u8 cur = data[i];
    8440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8442:	68ba      	ldr	r2, [r7, #8]
    8444:	4413      	add	r3, r2
    8446:	781b      	ldrb	r3, [r3, #0]
    8448:	76fb      	strb	r3, [r7, #27]
		for (j = 0; j < 8; ++j) {
    844a:	2300      	movs	r3, #0
    844c:	623b      	str	r3, [r7, #32]
    844e:	e01f      	b.n	8490 <btle_reverse_crc+0x6c>
			int top_bit = state >> 23;
    8450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8452:	0ddb      	lsrs	r3, r3, #23
    8454:	617b      	str	r3, [r7, #20]
			state = (state << 1) & 0xffffff;
    8456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8458:	005b      	lsls	r3, r3, #1
    845a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    845e:	62fb      	str	r3, [r7, #44]	; 0x2c
			state |= top_bit ^ ((cur >> (7 - j)) & 1);
    8460:	7efa      	ldrb	r2, [r7, #27]
    8462:	6a3b      	ldr	r3, [r7, #32]
    8464:	f1c3 0307 	rsb	r3, r3, #7
    8468:	fa42 f303 	asr.w	r3, r2, r3
    846c:	f003 0201 	and.w	r2, r3, #1
    8470:	697b      	ldr	r3, [r7, #20]
    8472:	4053      	eors	r3, r2
    8474:	461a      	mov	r2, r3
    8476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    8478:	4313      	orrs	r3, r2
    847a:	62fb      	str	r3, [r7, #44]	; 0x2c
			if (top_bit)
    847c:	697b      	ldr	r3, [r7, #20]
    847e:	2b00      	cmp	r3, #0
    8480:	d003      	beq.n	848a <btle_reverse_crc+0x66>
				state ^= lfsr_mask;
    8482:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    8484:	69fb      	ldr	r3, [r7, #28]
    8486:	4053      	eors	r3, r2
    8488:	62fb      	str	r3, [r7, #44]	; 0x2c
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
		u8 cur = data[i];
		for (j = 0; j < 8; ++j) {
    848a:	6a3b      	ldr	r3, [r7, #32]
    848c:	3301      	adds	r3, #1
    848e:	623b      	str	r3, [r7, #32]
    8490:	6a3b      	ldr	r3, [r7, #32]
    8492:	2b07      	cmp	r3, #7
    8494:	dddc      	ble.n	8450 <btle_reverse_crc+0x2c>
	u32 state = crc;
	u32 lfsr_mask = 0xb4c000; // 101101001100000000000000
	u32 ret;
	int i, j;

	for (i = len - 1; i >= 0; --i) {
    8496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    8498:	3b01      	subs	r3, #1
    849a:	627b      	str	r3, [r7, #36]	; 0x24
    849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    849e:	2b00      	cmp	r3, #0
    84a0:	dace      	bge.n	8440 <btle_reverse_crc+0x1c>
			if (top_bit)
				state ^= lfsr_mask;
		}
	}

	ret = 0;
    84a2:	2300      	movs	r3, #0
    84a4:	62bb      	str	r3, [r7, #40]	; 0x28
	for (i = 0; i < 24; ++i)
    84a6:	2300      	movs	r3, #0
    84a8:	627b      	str	r3, [r7, #36]	; 0x24
    84aa:	e010      	b.n	84ce <btle_reverse_crc+0xaa>
		ret |= ((state >> i) & 1) << (23 - i);
    84ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    84ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84b0:	fa22 f303 	lsr.w	r3, r2, r3
    84b4:	f003 0201 	and.w	r2, r3, #1
    84b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84ba:	f1c3 0317 	rsb	r3, r3, #23
    84be:	fa02 f303 	lsl.w	r3, r2, r3
    84c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
    84c4:	4313      	orrs	r3, r2
    84c6:	62bb      	str	r3, [r7, #40]	; 0x28
				state ^= lfsr_mask;
		}
	}

	ret = 0;
	for (i = 0; i < 24; ++i)
    84c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84ca:	3301      	adds	r3, #1
    84cc:	627b      	str	r3, [r7, #36]	; 0x24
    84ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    84d0:	2b17      	cmp	r3, #23
    84d2:	ddeb      	ble.n	84ac <btle_reverse_crc+0x88>
		ret |= ((state >> i) & 1) << (23 - i);

	return ret;
    84d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
    84d6:	4618      	mov	r0, r3
    84d8:	3734      	adds	r7, #52	; 0x34
    84da:	46bd      	mov	sp, r7
    84dc:	f85d 7b04 	ldr.w	r7, [sp], #4
    84e0:	4770      	bx	lr
    84e2:	bf00      	nop
    84e4:	00b4c000 	.word	0x00b4c000

000084e8 <btle_crcgen_lut>:
 * Michael Ossmann for writing and optimizing this.
 *
 * Arguments: CRCInit, pointer to start of packet, length of packet in
 * bytes
 * */
u32 btle_crcgen_lut(u32 crc_init, u8 *data, int len) {
    84e8:	b480      	push	{r7}
    84ea:	b089      	sub	sp, #36	; 0x24
    84ec:	af00      	add	r7, sp, #0
    84ee:	60f8      	str	r0, [r7, #12]
    84f0:	60b9      	str	r1, [r7, #8]
    84f2:	607a      	str	r2, [r7, #4]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
    84f4:	68fb      	ldr	r3, [r7, #12]
    84f6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    84fa:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < len; ++i) {
    84fc:	2300      	movs	r3, #0
    84fe:	61bb      	str	r3, [r7, #24]
    8500:	e012      	b.n	8528 <btle_crcgen_lut+0x40>
		key = data[i] ^ (state & 0xff);
    8502:	69bb      	ldr	r3, [r7, #24]
    8504:	68ba      	ldr	r2, [r7, #8]
    8506:	4413      	add	r3, r2
    8508:	781a      	ldrb	r2, [r3, #0]
    850a:	69fb      	ldr	r3, [r7, #28]
    850c:	b2db      	uxtb	r3, r3
    850e:	4053      	eors	r3, r2
    8510:	75fb      	strb	r3, [r7, #23]
		state = (state >> 8) ^ btle_crc_lut[key];
    8512:	69fb      	ldr	r3, [r7, #28]
    8514:	0a1a      	lsrs	r2, r3, #8
    8516:	7dfb      	ldrb	r3, [r7, #23]
    8518:	4909      	ldr	r1, [pc, #36]	; (8540 <btle_crcgen_lut+0x58>)
    851a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    851e:	4053      	eors	r3, r2
    8520:	61fb      	str	r3, [r7, #28]
	u32 state;
	int i;
	u8 key;

	state = crc_init & 0xffffff;
	for (i = 0; i < len; ++i) {
    8522:	69bb      	ldr	r3, [r7, #24]
    8524:	3301      	adds	r3, #1
    8526:	61bb      	str	r3, [r7, #24]
    8528:	69ba      	ldr	r2, [r7, #24]
    852a:	687b      	ldr	r3, [r7, #4]
    852c:	429a      	cmp	r2, r3
    852e:	dbe8      	blt.n	8502 <btle_crcgen_lut+0x1a>
		key = data[i] ^ (state & 0xff);
		state = (state >> 8) ^ btle_crc_lut[key];
	}
	return state;
    8530:	69fb      	ldr	r3, [r7, #28]
}
    8532:	4618      	mov	r0, r3
    8534:	3724      	adds	r7, #36	; 0x24
    8536:	46bd      	mov	sp, r7
    8538:	f85d 7b04 	ldr.w	r7, [sp], #4
    853c:	4770      	bx	lr
    853e:	bf00      	nop
    8540:	100004a8 	.word	0x100004a8

00008544 <usb_vendor_request_handler>:
*/

VendorRequestHandler *v_req_handler;

BOOL usb_vendor_request_handler(TSetupPacket *pSetup, int *piLen, u8 **ppbData)
{
    8544:	b590      	push	{r4, r7, lr}
    8546:	b087      	sub	sp, #28
    8548:	af00      	add	r7, sp, #0
    854a:	60f8      	str	r0, [r7, #12]
    854c:	60b9      	str	r1, [r7, #8]
    854e:	607a      	str	r2, [r7, #4]
	int rv;
	u16 params[2] = {pSetup->wValue, pSetup->wIndex};
    8550:	68fb      	ldr	r3, [r7, #12]
    8552:	885b      	ldrh	r3, [r3, #2]
    8554:	823b      	strh	r3, [r7, #16]
    8556:	68fb      	ldr	r3, [r7, #12]
    8558:	889b      	ldrh	r3, [r3, #4]
    855a:	827b      	strh	r3, [r7, #18]
	rv = v_req_handler(pSetup->bRequest, params, *ppbData, piLen);
    855c:	4b0b      	ldr	r3, [pc, #44]	; (858c <usb_vendor_request_handler+0x48>)
    855e:	681c      	ldr	r4, [r3, #0]
    8560:	68fb      	ldr	r3, [r7, #12]
    8562:	7859      	ldrb	r1, [r3, #1]
    8564:	687b      	ldr	r3, [r7, #4]
    8566:	681b      	ldr	r3, [r3, #0]
    8568:	f107 0210 	add.w	r2, r7, #16
    856c:	4608      	mov	r0, r1
    856e:	4611      	mov	r1, r2
    8570:	461a      	mov	r2, r3
    8572:	68bb      	ldr	r3, [r7, #8]
    8574:	47a0      	blx	r4
    8576:	6178      	str	r0, [r7, #20]
	return (BOOL) (rv==1);
    8578:	697b      	ldr	r3, [r7, #20]
    857a:	2b01      	cmp	r3, #1
    857c:	bf0c      	ite	eq
    857e:	2301      	moveq	r3, #1
    8580:	2300      	movne	r3, #0
    8582:	b2db      	uxtb	r3, r3
}
    8584:	4618      	mov	r0, r3
    8586:	371c      	adds	r7, #28
    8588:	46bd      	mov	sp, r7
    858a:	bd90      	pop	{r4, r7, pc}
    858c:	1000327c 	.word	0x1000327c

00008590 <ubertooth_usb_init>:

int ubertooth_usb_init(VendorRequestHandler *vendor_req_handler)
{
    8590:	b580      	push	{r7, lr}
    8592:	b082      	sub	sp, #8
    8594:	af00      	add	r7, sp, #0
    8596:	6078      	str	r0, [r7, #4]
	// initialise stack
	USBInit();
    8598:	f001 fdcc 	bl	a134 <USBInit>
	
	// register device descriptors
	USBRegisterDescriptors(abDescriptors);
    859c:	480b      	ldr	r0, [pc, #44]	; (85cc <ubertooth_usb_init+0x3c>)
    859e:	f002 fa2b 	bl	a9f8 <USBRegisterDescriptors>

	// Request handler 
	v_req_handler = vendor_req_handler;
    85a2:	4a0b      	ldr	r2, [pc, #44]	; (85d0 <ubertooth_usb_init+0x40>)
    85a4:	687b      	ldr	r3, [r7, #4]
    85a6:	6013      	str	r3, [r2, #0]

	// override standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_VENDOR, usb_vendor_request_handler, abVendorReqData);
    85a8:	2002      	movs	r0, #2
    85aa:	490a      	ldr	r1, [pc, #40]	; (85d4 <ubertooth_usb_init+0x44>)
    85ac:	4a0a      	ldr	r2, [pc, #40]	; (85d8 <ubertooth_usb_init+0x48>)
    85ae:	f001 fd9d 	bl	a0ec <USBRegisterRequestHandler>

	// enable USB interrupts
	//ISER0 = ISER0_ISE_USB;

	// Enable WCID / driverless setup on Windows - Consumes Vendor Request 0xFF
	USBRegisterWinusbInterface(0xFF, "{8ac47a88-cc26-4aa9-887b-42ca8cf07a63}");
    85b2:	20ff      	movs	r0, #255	; 0xff
    85b4:	4909      	ldr	r1, [pc, #36]	; (85dc <ubertooth_usb_init+0x4c>)
    85b6:	f002 f9c9 	bl	a94c <USBRegisterWinusbInterface>

	// connect to bus
	USBHwConnect(TRUE);
    85ba:	2001      	movs	r0, #1
    85bc:	f001 fefc 	bl	a3b8 <USBHwConnect>

	return 0;
    85c0:	2300      	movs	r3, #0
}
    85c2:	4618      	mov	r0, r3
    85c4:	3708      	adds	r7, #8
    85c6:	46bd      	mov	sp, r7
    85c8:	bd80      	pop	{r7, pc}
    85ca:	bf00      	nop
    85cc:	0000c0dc 	.word	0x0000c0dc
    85d0:	1000327c 	.word	0x1000327c
    85d4:	00008545 	.word	0x00008545
    85d8:	10003178 	.word	0x10003178
    85dc:	0000c1a0 	.word	0x0000c1a0

000085e0 <queue_init>:

volatile u32 head = 0;
volatile u32 tail = 0;

void queue_init()
{
    85e0:	b480      	push	{r7}
    85e2:	af00      	add	r7, sp, #0
	head = 0;
    85e4:	4b04      	ldr	r3, [pc, #16]	; (85f8 <queue_init+0x18>)
    85e6:	2200      	movs	r2, #0
    85e8:	601a      	str	r2, [r3, #0]
	tail = 0;
    85ea:	4b04      	ldr	r3, [pc, #16]	; (85fc <queue_init+0x1c>)
    85ec:	2200      	movs	r2, #0
    85ee:	601a      	str	r2, [r3, #0]
}
    85f0:	46bd      	mov	sp, r7
    85f2:	f85d 7b04 	ldr.w	r7, [sp], #4
    85f6:	4770      	bx	lr
    85f8:	10000a5c 	.word	0x10000a5c
    85fc:	10000a60 	.word	0x10000a60

00008600 <usb_enqueue>:

usb_pkt_rx *usb_enqueue()
{
    8600:	b480      	push	{r7}
    8602:	b083      	sub	sp, #12
    8604:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    8606:	4b13      	ldr	r3, [pc, #76]	; (8654 <usb_enqueue+0x54>)
    8608:	681b      	ldr	r3, [r3, #0]
    860a:	b2db      	uxtb	r3, r3
    860c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8610:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    8612:	4b11      	ldr	r3, [pc, #68]	; (8658 <usb_enqueue+0x58>)
    8614:	681b      	ldr	r3, [r3, #0]
    8616:	b2db      	uxtb	r3, r3
    8618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    861c:	71bb      	strb	r3, [r7, #6]
	u8 n = (t + 1) & 0x7F;
    861e:	79bb      	ldrb	r3, [r7, #6]
    8620:	3301      	adds	r3, #1
    8622:	b2db      	uxtb	r3, r3
    8624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8628:	717b      	strb	r3, [r7, #5]

	/* fail if queue is full */
	if (h == n) {
    862a:	79fa      	ldrb	r2, [r7, #7]
    862c:	797b      	ldrb	r3, [r7, #5]
    862e:	429a      	cmp	r2, r3
    8630:	d101      	bne.n	8636 <usb_enqueue+0x36>
		return NULL;
    8632:	2300      	movs	r3, #0
    8634:	e008      	b.n	8648 <usb_enqueue+0x48>
	}

	++tail;
    8636:	4b08      	ldr	r3, [pc, #32]	; (8658 <usb_enqueue+0x58>)
    8638:	681b      	ldr	r3, [r3, #0]
    863a:	3301      	adds	r3, #1
    863c:	4a06      	ldr	r2, [pc, #24]	; (8658 <usb_enqueue+0x58>)
    863e:	6013      	str	r3, [r2, #0]
	return &fifo[t];
    8640:	79bb      	ldrb	r3, [r7, #6]
    8642:	019b      	lsls	r3, r3, #6
    8644:	4a05      	ldr	r2, [pc, #20]	; (865c <usb_enqueue+0x5c>)
    8646:	4413      	add	r3, r2
	
}
    8648:	4618      	mov	r0, r3
    864a:	370c      	adds	r7, #12
    864c:	46bd      	mov	sp, r7
    864e:	f85d 7b04 	ldr.w	r7, [sp], #4
    8652:	4770      	bx	lr
    8654:	10000a5c 	.word	0x10000a5c
    8658:	10000a60 	.word	0x10000a60
    865c:	10001178 	.word	0x10001178

00008660 <dequeue>:

usb_pkt_rx *dequeue()
{
    8660:	b480      	push	{r7}
    8662:	b083      	sub	sp, #12
    8664:	af00      	add	r7, sp, #0
	u8 h = head & 0x7F;
    8666:	4b10      	ldr	r3, [pc, #64]	; (86a8 <dequeue+0x48>)
    8668:	681b      	ldr	r3, [r3, #0]
    866a:	b2db      	uxtb	r3, r3
    866c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8670:	71fb      	strb	r3, [r7, #7]
	u8 t = tail & 0x7F;
    8672:	4b0e      	ldr	r3, [pc, #56]	; (86ac <dequeue+0x4c>)
    8674:	681b      	ldr	r3, [r3, #0]
    8676:	b2db      	uxtb	r3, r3
    8678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    867c:	71bb      	strb	r3, [r7, #6]

	/* fail if queue is empty */
	if (h == t) {
    867e:	79fa      	ldrb	r2, [r7, #7]
    8680:	79bb      	ldrb	r3, [r7, #6]
    8682:	429a      	cmp	r2, r3
    8684:	d101      	bne.n	868a <dequeue+0x2a>
		return NULL;
    8686:	2300      	movs	r3, #0
    8688:	e008      	b.n	869c <dequeue+0x3c>
	}

	++head;
    868a:	4b07      	ldr	r3, [pc, #28]	; (86a8 <dequeue+0x48>)
    868c:	681b      	ldr	r3, [r3, #0]
    868e:	3301      	adds	r3, #1
    8690:	4a05      	ldr	r2, [pc, #20]	; (86a8 <dequeue+0x48>)
    8692:	6013      	str	r3, [r2, #0]
	return &fifo[h];
    8694:	79fb      	ldrb	r3, [r7, #7]
    8696:	019b      	lsls	r3, r3, #6
    8698:	4a05      	ldr	r2, [pc, #20]	; (86b0 <dequeue+0x50>)
    869a:	4413      	add	r3, r2
}
    869c:	4618      	mov	r0, r3
    869e:	370c      	adds	r7, #12
    86a0:	46bd      	mov	sp, r7
    86a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    86a6:	4770      	bx	lr
    86a8:	10000a5c 	.word	0x10000a5c
    86ac:	10000a60 	.word	0x10000a60
    86b0:	10001178 	.word	0x10001178

000086b4 <dequeue_send>:

#define USB_KEEP_ALIVE 400000
u32 last_usb_pkt = 0;  // for keep alive packets

int dequeue_send(u32 clkn)
{
    86b4:	b580      	push	{r7, lr}
    86b6:	b084      	sub	sp, #16
    86b8:	af00      	add	r7, sp, #0
    86ba:	6078      	str	r0, [r7, #4]
	usb_pkt_rx *pkt = dequeue(&pkt);
    86bc:	f107 030c 	add.w	r3, r7, #12
    86c0:	4618      	mov	r0, r3
    86c2:	f7ff ffcd 	bl	8660 <dequeue>
    86c6:	4603      	mov	r3, r0
    86c8:	60fb      	str	r3, [r7, #12]
	if (pkt != NULL) {
    86ca:	68fb      	ldr	r3, [r7, #12]
    86cc:	2b00      	cmp	r3, #0
    86ce:	d00a      	beq.n	86e6 <dequeue_send+0x32>
		last_usb_pkt = clkn;
    86d0:	4a11      	ldr	r2, [pc, #68]	; (8718 <dequeue_send+0x64>)
    86d2:	687b      	ldr	r3, [r7, #4]
    86d4:	6013      	str	r3, [r2, #0]
		USBHwEPWrite(BULK_IN_EP, (u8 *)pkt, sizeof(usb_pkt_rx));
    86d6:	68fb      	ldr	r3, [r7, #12]
    86d8:	2082      	movs	r0, #130	; 0x82
    86da:	4619      	mov	r1, r3
    86dc:	2240      	movs	r2, #64	; 0x40
    86de:	f001 fec7 	bl	a470 <USBHwEPWrite>
		return 1;
    86e2:	2301      	movs	r3, #1
    86e4:	e013      	b.n	870e <dequeue_send+0x5a>
	} else {
		if (clkn - last_usb_pkt > USB_KEEP_ALIVE) {
    86e6:	4b0c      	ldr	r3, [pc, #48]	; (8718 <dequeue_send+0x64>)
    86e8:	681b      	ldr	r3, [r3, #0]
    86ea:	687a      	ldr	r2, [r7, #4]
    86ec:	1ad3      	subs	r3, r2, r3
    86ee:	4a0b      	ldr	r2, [pc, #44]	; (871c <dequeue_send+0x68>)
    86f0:	4293      	cmp	r3, r2
    86f2:	d90b      	bls.n	870c <dequeue_send+0x58>
			u8 pkt_type = KEEP_ALIVE;
    86f4:	2303      	movs	r3, #3
    86f6:	72fb      	strb	r3, [r7, #11]
			last_usb_pkt = clkn;
    86f8:	4a07      	ldr	r2, [pc, #28]	; (8718 <dequeue_send+0x64>)
    86fa:	687b      	ldr	r3, [r7, #4]
    86fc:	6013      	str	r3, [r2, #0]
			USBHwEPWrite(BULK_IN_EP, &pkt_type, 1);
    86fe:	f107 030b 	add.w	r3, r7, #11
    8702:	2082      	movs	r0, #130	; 0x82
    8704:	4619      	mov	r1, r3
    8706:	2201      	movs	r2, #1
    8708:	f001 feb2 	bl	a470 <USBHwEPWrite>
		}
		return 0;
    870c:	2300      	movs	r3, #0
	}
}
    870e:	4618      	mov	r0, r3
    8710:	3710      	adds	r7, #16
    8712:	46bd      	mov	sp, r7
    8714:	bd80      	pop	{r7, pc}
    8716:	bf00      	nop
    8718:	10000a64 	.word	0x10000a64
    871c:	00061a80 	.word	0x00061a80

00008720 <handle_usb>:

void handle_usb(u32 clkn)
{
    8720:	b580      	push	{r7, lr}
    8722:	b084      	sub	sp, #16
    8724:	af00      	add	r7, sp, #0
    8726:	6078      	str	r0, [r7, #4]
	u8 epstat;

	/* write queued packets to USB if possible */
	epstat = USBHwEPGetStatus(BULK_IN_EP);
    8728:	2082      	movs	r0, #130	; 0x82
    872a:	f001 fe65 	bl	a3f8 <USBHwEPGetStatus>
    872e:	4603      	mov	r3, r0
    8730:	73fb      	strb	r3, [r7, #15]
	if (!(epstat & EPSTAT_B1FULL)) {
    8732:	7bfb      	ldrb	r3, [r7, #15]
    8734:	f003 0320 	and.w	r3, r3, #32
    8738:	2b00      	cmp	r3, #0
    873a:	d102      	bne.n	8742 <handle_usb+0x22>
		dequeue_send(clkn);
    873c:	6878      	ldr	r0, [r7, #4]
    873e:	f7ff ffb9 	bl	86b4 <dequeue_send>
	}
	if (!(epstat & EPSTAT_B2FULL)) {
    8742:	7bfb      	ldrb	r3, [r7, #15]
    8744:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8748:	2b00      	cmp	r3, #0
    874a:	d102      	bne.n	8752 <handle_usb+0x32>
		dequeue_send(clkn);
    874c:	6878      	ldr	r0, [r7, #4]
    874e:	f7ff ffb1 	bl	86b4 <dequeue_send>
	}

	/* polled "interrupt" */
	USBHwISR();
    8752:	f001 ff53 	bl	a5fc <USBHwISR>
}
    8756:	3710      	adds	r7, #16
    8758:	46bd      	mov	sp, r7
    875a:	bd80      	pop	{r7, pc}

0000875c <cc2400_rangetest>:
 *     reply number: 1 byte
 *   crc: 2 bytes
 */

void cc2400_rangetest(volatile u16 *chan_ptr)
{
    875c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8760:	b095      	sub	sp, #84	; 0x54
    8762:	af00      	add	r7, sp, #0
    8764:	6078      	str	r0, [r7, #4]
    8766:	4669      	mov	r1, sp
    8768:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u32 command[5];
	u32 result[5];
	int i;
	int j;
	u8 len = 22;
    876a:	2116      	movs	r1, #22
    876c:	f887 1046 	strb.w	r1, [r7, #70]	; 0x46
	u8 pa = 0;
    8770:	2100      	movs	r1, #0
    8772:	f887 1047 	strb.w	r1, [r7, #71]	; 0x47
	u8 txbuf[len];
    8776:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    877a:	4631      	mov	r1, r6
    877c:	3901      	subs	r1, #1
    877e:	6439      	str	r1, [r7, #64]	; 0x40
    8780:	b2f0      	uxtb	r0, r6
    8782:	f04f 0100 	mov.w	r1, #0
    8786:	ea4f 0bc1 	mov.w	fp, r1, lsl #3
    878a:	ea4b 7b50 	orr.w	fp, fp, r0, lsr #29
    878e:	ea4f 0ac0 	mov.w	sl, r0, lsl #3
    8792:	b2f0      	uxtb	r0, r6
    8794:	f04f 0100 	mov.w	r1, #0
    8798:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    879c:	ea49 7950 	orr.w	r9, r9, r0, lsr #29
    87a0:	ea4f 08c0 	mov.w	r8, r0, lsl #3
    87a4:	4631      	mov	r1, r6
    87a6:	3107      	adds	r1, #7
    87a8:	08c9      	lsrs	r1, r1, #3
    87aa:	00c9      	lsls	r1, r1, #3
    87ac:	ebad 0d01 	sub.w	sp, sp, r1
    87b0:	4669      	mov	r1, sp
    87b2:	3100      	adds	r1, #0
    87b4:	63f9      	str	r1, [r7, #60]	; 0x3c
	u8 rxbuf[len];
    87b6:	f897 6046 	ldrb.w	r6, [r7, #70]	; 0x46
    87ba:	4631      	mov	r1, r6
    87bc:	3901      	subs	r1, #1
    87be:	63b9      	str	r1, [r7, #56]	; 0x38
    87c0:	b2f0      	uxtb	r0, r6
    87c2:	f04f 0100 	mov.w	r1, #0
    87c6:	00cd      	lsls	r5, r1, #3
    87c8:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    87cc:	00c4      	lsls	r4, r0, #3
    87ce:	b2f0      	uxtb	r0, r6
    87d0:	f04f 0100 	mov.w	r1, #0
    87d4:	00cb      	lsls	r3, r1, #3
    87d6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    87da:	00c2      	lsls	r2, r0, #3
    87dc:	4633      	mov	r3, r6
    87de:	3307      	adds	r3, #7
    87e0:	08db      	lsrs	r3, r3, #3
    87e2:	00db      	lsls	r3, r3, #3
    87e4:	ebad 0d03 	sub.w	sp, sp, r3
    87e8:	466b      	mov	r3, sp
    87ea:	3300      	adds	r3, #0
    87ec:	637b      	str	r3, [r7, #52]	; 0x34

	txbuf[0] = len - 1; // length of data (rest of payload)
    87ee:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
    87f2:	3b01      	subs	r3, #1
    87f4:	b2da      	uxtb	r2, r3
    87f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    87f8:	701a      	strb	r2, [r3, #0]
	txbuf[1] = 0; // request
    87fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    87fc:	2200      	movs	r2, #0
    87fe:	705a      	strb	r2, [r3, #1]

	// read device serial number
	command[0] = 58;
    8800:	233a      	movs	r3, #58	; 0x3a
    8802:	623b      	str	r3, [r7, #32]
	iap_entry(command, result);
    8804:	4bb3      	ldr	r3, [pc, #716]	; (8ad4 <cc2400_rangetest+0x378>)
    8806:	681b      	ldr	r3, [r3, #0]
    8808:	f107 0120 	add.w	r1, r7, #32
    880c:	f107 020c 	add.w	r2, r7, #12
    8810:	4608      	mov	r0, r1
    8812:	4611      	mov	r1, r2
    8814:	4798      	blx	r3
	if ((result[0] & 0xFF) != 0) //status check
    8816:	68fb      	ldr	r3, [r7, #12]
    8818:	b2db      	uxtb	r3, r3
    881a:	2b00      	cmp	r3, #0
    881c:	d001      	beq.n	8822 <cc2400_rangetest+0xc6>
    881e:	2300      	movs	r3, #0
		return;
    8820:	e1ac      	b.n	8b7c <cc2400_rangetest+0x420>
	txbuf[2] = (result[1] >> 24) & 0xFF;
    8822:	693b      	ldr	r3, [r7, #16]
    8824:	0e1b      	lsrs	r3, r3, #24
    8826:	b2da      	uxtb	r2, r3
    8828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    882a:	709a      	strb	r2, [r3, #2]
	txbuf[3] = (result[1] >> 16) & 0xFF;
    882c:	693b      	ldr	r3, [r7, #16]
    882e:	0c1b      	lsrs	r3, r3, #16
    8830:	b2da      	uxtb	r2, r3
    8832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8834:	70da      	strb	r2, [r3, #3]
	txbuf[4] = (result[1] >> 8) & 0xFF;
    8836:	693b      	ldr	r3, [r7, #16]
    8838:	0a1b      	lsrs	r3, r3, #8
    883a:	b2da      	uxtb	r2, r3
    883c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    883e:	711a      	strb	r2, [r3, #4]
	txbuf[5] = result[1] & 0xFF;
    8840:	693b      	ldr	r3, [r7, #16]
    8842:	b2da      	uxtb	r2, r3
    8844:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8846:	715a      	strb	r2, [r3, #5]
	txbuf[6] = (result[2] >> 24) & 0xFF;
    8848:	697b      	ldr	r3, [r7, #20]
    884a:	0e1b      	lsrs	r3, r3, #24
    884c:	b2da      	uxtb	r2, r3
    884e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8850:	719a      	strb	r2, [r3, #6]
	txbuf[7] = (result[2] >> 16) & 0xFF;
    8852:	697b      	ldr	r3, [r7, #20]
    8854:	0c1b      	lsrs	r3, r3, #16
    8856:	b2da      	uxtb	r2, r3
    8858:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    885a:	71da      	strb	r2, [r3, #7]
	txbuf[8] = (result[2] >> 8) & 0xFF;
    885c:	697b      	ldr	r3, [r7, #20]
    885e:	0a1b      	lsrs	r3, r3, #8
    8860:	b2da      	uxtb	r2, r3
    8862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8864:	721a      	strb	r2, [r3, #8]
	txbuf[9] = result[2] & 0xFF;
    8866:	697b      	ldr	r3, [r7, #20]
    8868:	b2da      	uxtb	r2, r3
    886a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    886c:	725a      	strb	r2, [r3, #9]
	txbuf[10] = (result[3] >> 24) & 0xFF;
    886e:	69bb      	ldr	r3, [r7, #24]
    8870:	0e1b      	lsrs	r3, r3, #24
    8872:	b2da      	uxtb	r2, r3
    8874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8876:	729a      	strb	r2, [r3, #10]
	txbuf[11] = (result[3] >> 16) & 0xFF;
    8878:	69bb      	ldr	r3, [r7, #24]
    887a:	0c1b      	lsrs	r3, r3, #16
    887c:	b2da      	uxtb	r2, r3
    887e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8880:	72da      	strb	r2, [r3, #11]
	txbuf[12] = (result[3] >> 8) & 0xFF;
    8882:	69bb      	ldr	r3, [r7, #24]
    8884:	0a1b      	lsrs	r3, r3, #8
    8886:	b2da      	uxtb	r2, r3
    8888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    888a:	731a      	strb	r2, [r3, #12]
	txbuf[13] = result[3] & 0xFF;
    888c:	69bb      	ldr	r3, [r7, #24]
    888e:	b2da      	uxtb	r2, r3
    8890:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8892:	735a      	strb	r2, [r3, #13]
	txbuf[14] = (result[4] >> 24) & 0xFF;
    8894:	69fb      	ldr	r3, [r7, #28]
    8896:	0e1b      	lsrs	r3, r3, #24
    8898:	b2da      	uxtb	r2, r3
    889a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    889c:	739a      	strb	r2, [r3, #14]
	txbuf[15] = (result[4] >> 16) & 0xFF;
    889e:	69fb      	ldr	r3, [r7, #28]
    88a0:	0c1b      	lsrs	r3, r3, #16
    88a2:	b2da      	uxtb	r2, r3
    88a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88a6:	73da      	strb	r2, [r3, #15]
	txbuf[16] = (result[4] >> 8) & 0xFF;
    88a8:	69fb      	ldr	r3, [r7, #28]
    88aa:	0a1b      	lsrs	r3, r3, #8
    88ac:	b2da      	uxtb	r2, r3
    88ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88b0:	741a      	strb	r2, [r3, #16]
	txbuf[17] = result[4] & 0xFF;
    88b2:	69fb      	ldr	r3, [r7, #28]
    88b4:	b2da      	uxtb	r2, r3
    88b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88b8:	745a      	strb	r2, [r3, #17]

	txbuf[18] = pa; // request pa
    88ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88bc:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    88c0:	749a      	strb	r2, [r3, #18]
	txbuf[19] = 0; // request number
    88c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88c4:	2200      	movs	r2, #0
    88c6:	74da      	strb	r2, [r3, #19]
	txbuf[20] = 0xff; // reply pa
    88c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88ca:	22ff      	movs	r2, #255	; 0xff
    88cc:	751a      	strb	r2, [r3, #20]
	txbuf[21] = 0xff; // reply number
    88ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    88d0:	22ff      	movs	r2, #255	; 0xff
    88d2:	755a      	strb	r2, [r3, #21]

	// Bluetooth-like modulation
	cc2400_set(LMTST,   0x2b22);
    88d4:	2012      	movs	r0, #18
    88d6:	f642 3122 	movw	r1, #11042	; 0x2b22
    88da:	f001 f8f9 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b);
    88de:	2014      	movs	r0, #20
    88e0:	f241 314b 	movw	r1, #4939	; 0x134b
    88e4:	f001 f8f4 	bl	9ad0 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1);  // default value
    88e8:	2020      	movs	r0, #32
    88ea:	f640 51f1 	movw	r1, #3569	; 0xdf1
    88ee:	f001 f8ef 	bl	9ad0 <cc2400_set>
	cc2400_set(FSDIV,   *chan_ptr);
    88f2:	687b      	ldr	r3, [r7, #4]
    88f4:	881b      	ldrh	r3, [r3, #0]
    88f6:	b29b      	uxth	r3, r3
    88f8:	2002      	movs	r0, #2
    88fa:	4619      	mov	r1, r3
    88fc:	f001 f8e8 	bl	9ad0 <cc2400_set>
	cc2400_set(SYNCH,   0xf9ae);
    8900:	202d      	movs	r0, #45	; 0x2d
    8902:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    8906:	f001 f8e3 	bl	9ad0 <cc2400_set>
	cc2400_set(SYNCL,   0x1584);
    890a:	202c      	movs	r0, #44	; 0x2c
    890c:	f241 5184 	movw	r1, #5508	; 0x1584
    8910:	f001 f8de 	bl	9ad0 <cc2400_set>
	cc2400_set(FREND,   8 | pa);
    8914:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8918:	f043 0308 	orr.w	r3, r3, #8
    891c:	b2db      	uxtb	r3, r3
    891e:	b29b      	uxth	r3, r3
    8920:	2005      	movs	r0, #5
    8922:	4619      	mov	r1, r3
    8924:	f001 f8d4 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0029);
    8928:	2003      	movs	r0, #3
    892a:	2129      	movs	r1, #41	; 0x29
    892c:	f001 f8d0 	bl	9ad0 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8930:	bf00      	nop
    8932:	f001 f985 	bl	9c40 <cc2400_status>
    8936:	4603      	mov	r3, r0
    8938:	f003 0340 	and.w	r3, r3, #64	; 0x40
    893c:	2b00      	cmp	r3, #0
    893e:	d0f8      	beq.n	8932 <cc2400_rangetest+0x1d6>
	cc2400_strobe(SFSON);
    8940:	2061      	movs	r0, #97	; 0x61
    8942:	f001 f987 	bl	9c54 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8946:	bf00      	nop
    8948:	f001 f97a 	bl	9c40 <cc2400_status>
    894c:	4603      	mov	r3, r0
    894e:	f003 0304 	and.w	r3, r3, #4
    8952:	2b00      	cmp	r3, #0
    8954:	d0f8      	beq.n	8948 <cc2400_rangetest+0x1ec>
	TXLED_SET;
    8956:	4b60      	ldr	r3, [pc, #384]	; (8ad8 <cc2400_rangetest+0x37c>)
    8958:	f44f 7280 	mov.w	r2, #256	; 0x100
    895c:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    895e:	4b5f      	ldr	r3, [pc, #380]	; (8adc <cc2400_rangetest+0x380>)
    8960:	2280      	movs	r2, #128	; 0x80
    8962:	601a      	str	r2, [r3, #0]
#endif
	for (pa = 0; pa < 8; pa++) {
    8964:	2300      	movs	r3, #0
    8966:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    896a:	e03e      	b.n	89ea <cc2400_rangetest+0x28e>
		cc2400_set(FREND, 8 | pa);
    896c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    8970:	f043 0308 	orr.w	r3, r3, #8
    8974:	b2db      	uxtb	r3, r3
    8976:	b29b      	uxth	r3, r3
    8978:	2005      	movs	r0, #5
    897a:	4619      	mov	r1, r3
    897c:	f001 f8a8 	bl	9ad0 <cc2400_set>
		txbuf[18] = pa;
    8980:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8982:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
    8986:	749a      	strb	r2, [r3, #18]
		for (i = 0; i < 16; i++) {
    8988:	2300      	movs	r3, #0
    898a:	64fb      	str	r3, [r7, #76]	; 0x4c
    898c:	e025      	b.n	89da <cc2400_rangetest+0x27e>
			txbuf[19] = i;
    898e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8990:	b2da      	uxtb	r2, r3
    8992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8994:	74da      	strb	r2, [r3, #19]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8996:	bf00      	nop
    8998:	200e      	movs	r0, #14
    899a:	f001 f883 	bl	9aa4 <cc2400_get>
    899e:	4603      	mov	r3, r0
    89a0:	f003 031f 	and.w	r3, r3, #31
    89a4:	2b0f      	cmp	r3, #15
    89a6:	d1f7      	bne.n	8998 <cc2400_rangetest+0x23c>
			// transmit a packet
			for (j = 0; j < len; j++)
    89a8:	2300      	movs	r3, #0
    89aa:	64bb      	str	r3, [r7, #72]	; 0x48
    89ac:	e00a      	b.n	89c4 <cc2400_rangetest+0x268>
				cc2400_set8(FIFOREG, txbuf[j]);
    89ae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
    89b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    89b2:	4413      	add	r3, r2
    89b4:	781b      	ldrb	r3, [r3, #0]
    89b6:	2070      	movs	r0, #112	; 0x70
    89b8:	4619      	mov	r1, r3
    89ba:	f001 f8b7 	bl	9b2c <cc2400_set8>
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
			txbuf[19] = i;
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			// transmit a packet
			for (j = 0; j < len; j++)
    89be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    89c0:	3301      	adds	r3, #1
    89c2:	64bb      	str	r3, [r7, #72]	; 0x48
    89c4:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    89c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    89ca:	429a      	cmp	r2, r3
    89cc:	dcef      	bgt.n	89ae <cc2400_rangetest+0x252>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
    89ce:	2063      	movs	r0, #99	; 0x63
    89d0:	f001 f940 	bl	9c54 <cc2400_strobe>
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
		cc2400_set(FREND, 8 | pa);
		txbuf[18] = pa;
		for (i = 0; i < 16; i++) {
    89d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    89d6:	3301      	adds	r3, #1
    89d8:	64fb      	str	r3, [r7, #76]	; 0x4c
    89da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    89dc:	2b0f      	cmp	r3, #15
    89de:	ddd6      	ble.n	898e <cc2400_rangetest+0x232>
	while (!(cc2400_status() & FS_LOCK));
	TXLED_SET;
#ifdef UBERTOOTH_ONE
	PAEN_SET;
#endif
	for (pa = 0; pa < 8; pa++) {
    89e0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    89e4:	3301      	adds	r3, #1
    89e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    89ea:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
    89ee:	2b07      	cmp	r3, #7
    89f0:	d9bc      	bls.n	896c <cc2400_rangetest+0x210>
				cc2400_set8(FIFOREG, txbuf[j]);
			cc2400_strobe(STX);
		}
	}
	// sent packet, now look for repeated packet
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    89f2:	bf00      	nop
    89f4:	200e      	movs	r0, #14
    89f6:	f001 f855 	bl	9aa4 <cc2400_get>
    89fa:	4603      	mov	r3, r0
    89fc:	f003 031f 	and.w	r3, r3, #31
    8a00:	2b0f      	cmp	r3, #15
    8a02:	d1f7      	bne.n	89f4 <cc2400_rangetest+0x298>
	TXLED_CLR;
    8a04:	4b36      	ldr	r3, [pc, #216]	; (8ae0 <cc2400_rangetest+0x384>)
    8a06:	f44f 7280 	mov.w	r2, #256	; 0x100
    8a0a:	601a      	str	r2, [r3, #0]
	cc2400_strobe(SRFOFF);
    8a0c:	2064      	movs	r0, #100	; 0x64
    8a0e:	f001 f921 	bl	9c54 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    8a12:	bf00      	nop
    8a14:	f001 f914 	bl	9c40 <cc2400_status>
    8a18:	4603      	mov	r3, r0
    8a1a:	f003 0304 	and.w	r3, r3, #4
    8a1e:	2b00      	cmp	r3, #0
    8a20:	d1f8      	bne.n	8a14 <cc2400_rangetest+0x2b8>
	cc2400_set(FSDIV, *chan_ptr - 1);
    8a22:	687b      	ldr	r3, [r7, #4]
    8a24:	881b      	ldrh	r3, [r3, #0]
    8a26:	b29b      	uxth	r3, r3
    8a28:	3b01      	subs	r3, #1
    8a2a:	b29b      	uxth	r3, r3
    8a2c:	2002      	movs	r0, #2
    8a2e:	4619      	mov	r1, r3
    8a30:	f001 f84e 	bl	9ad0 <cc2400_set>
	while (!(cc2400_status() & XOSC16M_STABLE));
    8a34:	bf00      	nop
    8a36:	f001 f903 	bl	9c40 <cc2400_status>
    8a3a:	4603      	mov	r3, r0
    8a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8a40:	2b00      	cmp	r3, #0
    8a42:	d0f8      	beq.n	8a36 <cc2400_rangetest+0x2da>
	cc2400_strobe(SFSON);
    8a44:	2061      	movs	r0, #97	; 0x61
    8a46:	f001 f905 	bl	9c54 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8a4a:	bf00      	nop
    8a4c:	f001 f8f8 	bl	9c40 <cc2400_status>
    8a50:	4603      	mov	r3, r0
    8a52:	f003 0304 	and.w	r3, r3, #4
    8a56:	2b00      	cmp	r3, #0
    8a58:	d0f8      	beq.n	8a4c <cc2400_rangetest+0x2f0>
	RXLED_SET;
    8a5a:	4b1f      	ldr	r3, [pc, #124]	; (8ad8 <cc2400_rangetest+0x37c>)
    8a5c:	2210      	movs	r2, #16
    8a5e:	601a      	str	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8a60:	bf00      	nop
    8a62:	200e      	movs	r0, #14
    8a64:	f001 f81e 	bl	9aa4 <cc2400_get>
    8a68:	4603      	mov	r3, r0
    8a6a:	f003 031f 	and.w	r3, r3, #31
    8a6e:	2b0f      	cmp	r3, #15
    8a70:	d1f7      	bne.n	8a62 <cc2400_rangetest+0x306>
		cc2400_strobe(SRX);
    8a72:	2062      	movs	r0, #98	; 0x62
    8a74:	f001 f8ee 	bl	9c54 <cc2400_strobe>
		while (!(cc2400_status() & SYNC_RECEIVED));
    8a78:	bf00      	nop
    8a7a:	f001 f8e1 	bl	9c40 <cc2400_status>
    8a7e:	4603      	mov	r3, r0
    8a80:	f003 0310 	and.w	r3, r3, #16
    8a84:	2b00      	cmp	r3, #0
    8a86:	d0f8      	beq.n	8a7a <cc2400_rangetest+0x31e>
		USRLED_SET;
    8a88:	4b13      	ldr	r3, [pc, #76]	; (8ad8 <cc2400_rangetest+0x37c>)
    8a8a:	2202      	movs	r2, #2
    8a8c:	601a      	str	r2, [r3, #0]
		for (j = 0; j < len; j++)
    8a8e:	2300      	movs	r3, #0
    8a90:	64bb      	str	r3, [r7, #72]	; 0x48
    8a92:	e00c      	b.n	8aae <cc2400_rangetest+0x352>
			rxbuf[j] = cc2400_get8(FIFOREG);
    8a94:	2070      	movs	r0, #112	; 0x70
    8a96:	f001 f82f 	bl	9af8 <cc2400_get8>
    8a9a:	4603      	mov	r3, r0
    8a9c:	4619      	mov	r1, r3
    8a9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8aa2:	4413      	add	r3, r2
    8aa4:	460a      	mov	r2, r1
    8aa6:	701a      	strb	r2, [r3, #0]
	while (1) {
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
		cc2400_strobe(SRX);
		while (!(cc2400_status() & SYNC_RECEIVED));
		USRLED_SET;
		for (j = 0; j < len; j++)
    8aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8aaa:	3301      	adds	r3, #1
    8aac:	64bb      	str	r3, [r7, #72]	; 0x48
    8aae:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
    8ab2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    8ab4:	429a      	cmp	r2, r3
    8ab6:	dced      	bgt.n	8a94 <cc2400_rangetest+0x338>
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
    8ab8:	f001 f8c2 	bl	9c40 <cc2400_status>
    8abc:	4603      	mov	r3, r0
    8abe:	f003 0308 	and.w	r3, r3, #8
    8ac2:	2b00      	cmp	r3, #0
    8ac4:	d001      	beq.n	8aca <cc2400_rangetest+0x36e>
			break;
    8ac6:	bf00      	nop
		USRLED_CLR;
	}

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8ac8:	e00c      	b.n	8ae4 <cc2400_rangetest+0x388>
		USRLED_SET;
		for (j = 0; j < len; j++)
			rxbuf[j] = cc2400_get8(FIFOREG);
		if (cc2400_status() & STATUS_CRC_OK)
			break;
		USRLED_CLR;
    8aca:	4b05      	ldr	r3, [pc, #20]	; (8ae0 <cc2400_rangetest+0x384>)
    8acc:	2202      	movs	r2, #2
    8ace:	601a      	str	r2, [r3, #0]
	}
    8ad0:	e7c6      	b.n	8a60 <cc2400_rangetest+0x304>
    8ad2:	bf00      	nop
    8ad4:	100008a8 	.word	0x100008a8
    8ad8:	2009c038 	.word	0x2009c038
    8adc:	2009c058 	.word	0x2009c058
    8ae0:	2009c03c 	.word	0x2009c03c

	// done
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8ae4:	200e      	movs	r0, #14
    8ae6:	f000 ffdd 	bl	9aa4 <cc2400_get>
    8aea:	4603      	mov	r3, r0
    8aec:	f003 031f 	and.w	r3, r3, #31
    8af0:	2b0f      	cmp	r3, #15
    8af2:	d1f7      	bne.n	8ae4 <cc2400_rangetest+0x388>
	cc2400_strobe(SRFOFF);
    8af4:	2064      	movs	r0, #100	; 0x64
    8af6:	f001 f8ad 	bl	9c54 <cc2400_strobe>
	while ((cc2400_status() & FS_LOCK));
    8afa:	bf00      	nop
    8afc:	f001 f8a0 	bl	9c40 <cc2400_status>
    8b00:	4603      	mov	r3, r0
    8b02:	f003 0304 	and.w	r3, r3, #4
    8b06:	2b00      	cmp	r3, #0
    8b08:	d1f8      	bne.n	8afc <cc2400_rangetest+0x3a0>
#ifdef UBERTOOTH_ONE
	PAEN_CLR;
    8b0a:	4b20      	ldr	r3, [pc, #128]	; (8b8c <cc2400_rangetest+0x430>)
    8b0c:	2280      	movs	r2, #128	; 0x80
    8b0e:	601a      	str	r2, [r3, #0]
#endif
	RXLED_CLR;
    8b10:	4b1f      	ldr	r3, [pc, #124]	; (8b90 <cc2400_rangetest+0x434>)
    8b12:	2210      	movs	r2, #16
    8b14:	601a      	str	r2, [r3, #0]

	// get test result
	rr.valid       = 1;
    8b16:	4b1f      	ldr	r3, [pc, #124]	; (8b94 <cc2400_rangetest+0x438>)
    8b18:	2201      	movs	r2, #1
    8b1a:	701a      	strb	r2, [r3, #0]
	rr.request_pa  = rxbuf[18];
    8b1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b1e:	7c9a      	ldrb	r2, [r3, #18]
    8b20:	4b1c      	ldr	r3, [pc, #112]	; (8b94 <cc2400_rangetest+0x438>)
    8b22:	705a      	strb	r2, [r3, #1]
	rr.request_num = rxbuf[19];
    8b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b26:	7cda      	ldrb	r2, [r3, #19]
    8b28:	4b1a      	ldr	r3, [pc, #104]	; (8b94 <cc2400_rangetest+0x438>)
    8b2a:	709a      	strb	r2, [r3, #2]
	rr.reply_pa    = rxbuf[20];
    8b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b2e:	7d1a      	ldrb	r2, [r3, #20]
    8b30:	4b18      	ldr	r3, [pc, #96]	; (8b94 <cc2400_rangetest+0x438>)
    8b32:	70da      	strb	r2, [r3, #3]
	rr.reply_num   = rxbuf[21];
    8b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    8b36:	7d5a      	ldrb	r2, [r3, #21]
    8b38:	4b16      	ldr	r3, [pc, #88]	; (8b94 <cc2400_rangetest+0x438>)
    8b3a:	711a      	strb	r2, [r3, #4]

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
    8b3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    8b3e:	2201      	movs	r2, #1
    8b40:	705a      	strb	r2, [r3, #1]
	for (i = 0; i < 18; i++)
    8b42:	2300      	movs	r3, #0
    8b44:	64fb      	str	r3, [r7, #76]	; 0x4c
    8b46:	e012      	b.n	8b6e <cc2400_rangetest+0x412>
		if (rxbuf[i] != txbuf[i])
    8b48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    8b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b4c:	4413      	add	r3, r2
    8b4e:	781a      	ldrb	r2, [r3, #0]
    8b50:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
    8b52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b54:	440b      	add	r3, r1
    8b56:	781b      	ldrb	r3, [r3, #0]
    8b58:	429a      	cmp	r2, r3
    8b5a:	d005      	beq.n	8b68 <cc2400_rangetest+0x40c>
			rr.valid = 2 + i;
    8b5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b5e:	b2db      	uxtb	r3, r3
    8b60:	3302      	adds	r3, #2
    8b62:	b2da      	uxtb	r2, r3
    8b64:	4b0b      	ldr	r3, [pc, #44]	; (8b94 <cc2400_rangetest+0x438>)
    8b66:	701a      	strb	r2, [r3, #0]
	rr.reply_pa    = rxbuf[20];
	rr.reply_num   = rxbuf[21];

	// make sure rx packet is as expected
	txbuf[1] = 1; // expected value in rxbuf
	for (i = 0; i < 18; i++)
    8b68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b6a:	3301      	adds	r3, #1
    8b6c:	64fb      	str	r3, [r7, #76]	; 0x4c
    8b6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    8b70:	2b11      	cmp	r3, #17
    8b72:	dde9      	ble.n	8b48 <cc2400_rangetest+0x3ec>
		if (rxbuf[i] != txbuf[i])
			rr.valid = 2 + i;

	USRLED_CLR;
    8b74:	4b06      	ldr	r3, [pc, #24]	; (8b90 <cc2400_rangetest+0x434>)
    8b76:	2202      	movs	r2, #2
    8b78:	601a      	str	r2, [r3, #0]
    8b7a:	2301      	movs	r3, #1
    8b7c:	f8d7 d000 	ldr.w	sp, [r7]
    8b80:	2b01      	cmp	r3, #1
#endif
}
    8b82:	3754      	adds	r7, #84	; 0x54
    8b84:	46bd      	mov	sp, r7
    8b86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8b8a:	bf00      	nop
    8b8c:	2009c05c 	.word	0x2009c05c
    8b90:	2009c03c 	.word	0x2009c03c
    8b94:	10001078 	.word	0x10001078

00008b98 <cc2400_repeater>:

/* This is the repeater implementation to be used with cc2400_rangetest(). */
void cc2400_repeater(volatile u16 *chan_ptr)
{
    8b98:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b9a:	b089      	sub	sp, #36	; 0x24
    8b9c:	af00      	add	r7, sp, #0
    8b9e:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	int i;
	int j;
	u8 len = 22;
    8ba0:	2116      	movs	r1, #22
    8ba2:	75b9      	strb	r1, [r7, #22]
	u8 pa = 0;
    8ba4:	2100      	movs	r1, #0
    8ba6:	75f9      	strb	r1, [r7, #23]
	u8 buf[len];
    8ba8:	7dbe      	ldrb	r6, [r7, #22]
    8baa:	4631      	mov	r1, r6
    8bac:	3901      	subs	r1, #1
    8bae:	6139      	str	r1, [r7, #16]
    8bb0:	b2f0      	uxtb	r0, r6
    8bb2:	f04f 0100 	mov.w	r1, #0
    8bb6:	00cd      	lsls	r5, r1, #3
    8bb8:	ea45 7550 	orr.w	r5, r5, r0, lsr #29
    8bbc:	00c4      	lsls	r4, r0, #3
    8bbe:	b2f0      	uxtb	r0, r6
    8bc0:	f04f 0100 	mov.w	r1, #0
    8bc4:	00cb      	lsls	r3, r1, #3
    8bc6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
    8bca:	00c2      	lsls	r2, r0, #3
    8bcc:	4633      	mov	r3, r6
    8bce:	3307      	adds	r3, #7
    8bd0:	08db      	lsrs	r3, r3, #3
    8bd2:	00db      	lsls	r3, r3, #3
    8bd4:	ebad 0d03 	sub.w	sp, sp, r3
    8bd8:	466b      	mov	r3, sp
    8bda:	3300      	adds	r3, #0
    8bdc:	60fb      	str	r3, [r7, #12]

	//FIXME allow to be turned off
	while (1) {
		cc2400_set(LMTST,   0x2b22);
    8bde:	2012      	movs	r0, #18
    8be0:	f642 3122 	movw	r1, #11042	; 0x2b22
    8be4:	f000 ff74 	bl	9ad0 <cc2400_set>
		cc2400_set(MDMTST0, 0x134b);
    8be8:	2014      	movs	r0, #20
    8bea:	f241 314b 	movw	r1, #4939	; 0x134b
    8bee:	f000 ff6f 	bl	9ad0 <cc2400_set>
		cc2400_set(FSDIV,   *chan_ptr - 1);
    8bf2:	687b      	ldr	r3, [r7, #4]
    8bf4:	881b      	ldrh	r3, [r3, #0]
    8bf6:	b29b      	uxth	r3, r3
    8bf8:	3b01      	subs	r3, #1
    8bfa:	b29b      	uxth	r3, r3
    8bfc:	2002      	movs	r0, #2
    8bfe:	4619      	mov	r1, r3
    8c00:	f000 ff66 	bl	9ad0 <cc2400_set>
		cc2400_set(SYNCH,   0xf9ae);
    8c04:	202d      	movs	r0, #45	; 0x2d
    8c06:	f64f 11ae 	movw	r1, #63918	; 0xf9ae
    8c0a:	f000 ff61 	bl	9ad0 <cc2400_set>
		cc2400_set(SYNCL,   0x1584);
    8c0e:	202c      	movs	r0, #44	; 0x2c
    8c10:	f241 5184 	movw	r1, #5508	; 0x1584
    8c14:	f000 ff5c 	bl	9ad0 <cc2400_set>
		cc2400_set(FREND,   0x0008); // minimum tx power
    8c18:	2005      	movs	r0, #5
    8c1a:	2108      	movs	r1, #8
    8c1c:	f000 ff58 	bl	9ad0 <cc2400_set>
		cc2400_set(MDMCTRL, 0x0029); // 160 kHz frequency deviation
    8c20:	2003      	movs	r0, #3
    8c22:	2129      	movs	r1, #41	; 0x29
    8c24:	f000 ff54 	bl	9ad0 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8c28:	bf00      	nop
    8c2a:	f001 f809 	bl	9c40 <cc2400_status>
    8c2e:	4603      	mov	r3, r0
    8c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8c34:	2b00      	cmp	r3, #0
    8c36:	d0f8      	beq.n	8c2a <cc2400_repeater+0x92>
		cc2400_strobe(SFSON);
    8c38:	2061      	movs	r0, #97	; 0x61
    8c3a:	f001 f80b 	bl	9c54 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    8c3e:	bf00      	nop
    8c40:	f000 fffe 	bl	9c40 <cc2400_status>
    8c44:	4603      	mov	r3, r0
    8c46:	f003 0304 	and.w	r3, r3, #4
    8c4a:	2b00      	cmp	r3, #0
    8c4c:	d0f8      	beq.n	8c40 <cc2400_repeater+0xa8>
		RXLED_SET;
    8c4e:	4b6a      	ldr	r3, [pc, #424]	; (8df8 <cc2400_repeater+0x260>)
    8c50:	2210      	movs	r2, #16
    8c52:	601a      	str	r2, [r3, #0]
		TXLED_CLR;
    8c54:	4b69      	ldr	r3, [pc, #420]	; (8dfc <cc2400_repeater+0x264>)
    8c56:	f44f 7280 	mov.w	r2, #256	; 0x100
    8c5a:	601a      	str	r2, [r3, #0]
		USRLED_CLR;
    8c5c:	4b67      	ldr	r3, [pc, #412]	; (8dfc <cc2400_repeater+0x264>)
    8c5e:	2202      	movs	r2, #2
    8c60:	601a      	str	r2, [r3, #0]
#ifdef UBERTOOTH_ONE
		PAEN_SET;
    8c62:	4b67      	ldr	r3, [pc, #412]	; (8e00 <cc2400_repeater+0x268>)
    8c64:	2280      	movs	r2, #128	; 0x80
    8c66:	601a      	str	r2, [r3, #0]
#endif
		while (1) {
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8c68:	bf00      	nop
    8c6a:	200e      	movs	r0, #14
    8c6c:	f000 ff1a 	bl	9aa4 <cc2400_get>
    8c70:	4603      	mov	r3, r0
    8c72:	f003 031f 	and.w	r3, r3, #31
    8c76:	2b0f      	cmp	r3, #15
    8c78:	d1f7      	bne.n	8c6a <cc2400_repeater+0xd2>
			USRLED_CLR;
    8c7a:	4b60      	ldr	r3, [pc, #384]	; (8dfc <cc2400_repeater+0x264>)
    8c7c:	2202      	movs	r2, #2
    8c7e:	601a      	str	r2, [r3, #0]
			cc2400_strobe(SRX);
    8c80:	2062      	movs	r0, #98	; 0x62
    8c82:	f000 ffe7 	bl	9c54 <cc2400_strobe>
			while (!(cc2400_status() & SYNC_RECEIVED));
    8c86:	bf00      	nop
    8c88:	f000 ffda 	bl	9c40 <cc2400_status>
    8c8c:	4603      	mov	r3, r0
    8c8e:	f003 0310 	and.w	r3, r3, #16
    8c92:	2b00      	cmp	r3, #0
    8c94:	d0f8      	beq.n	8c88 <cc2400_repeater+0xf0>
			USRLED_SET;
    8c96:	4b58      	ldr	r3, [pc, #352]	; (8df8 <cc2400_repeater+0x260>)
    8c98:	2202      	movs	r2, #2
    8c9a:	601a      	str	r2, [r3, #0]
			for (i = 0; i < len; i++)
    8c9c:	2300      	movs	r3, #0
    8c9e:	61fb      	str	r3, [r7, #28]
    8ca0:	e00c      	b.n	8cbc <cc2400_repeater+0x124>
				buf[i] = cc2400_get8(FIFOREG);
    8ca2:	2070      	movs	r0, #112	; 0x70
    8ca4:	f000 ff28 	bl	9af8 <cc2400_get8>
    8ca8:	4603      	mov	r3, r0
    8caa:	4619      	mov	r1, r3
    8cac:	68fa      	ldr	r2, [r7, #12]
    8cae:	69fb      	ldr	r3, [r7, #28]
    8cb0:	4413      	add	r3, r2
    8cb2:	460a      	mov	r2, r1
    8cb4:	701a      	strb	r2, [r3, #0]
			while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
			USRLED_CLR;
			cc2400_strobe(SRX);
			while (!(cc2400_status() & SYNC_RECEIVED));
			USRLED_SET;
			for (i = 0; i < len; i++)
    8cb6:	69fb      	ldr	r3, [r7, #28]
    8cb8:	3301      	adds	r3, #1
    8cba:	61fb      	str	r3, [r7, #28]
    8cbc:	7dba      	ldrb	r2, [r7, #22]
    8cbe:	69fb      	ldr	r3, [r7, #28]
    8cc0:	429a      	cmp	r2, r3
    8cc2:	dcee      	bgt.n	8ca2 <cc2400_repeater+0x10a>
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
    8cc4:	f000 ffbc 	bl	9c40 <cc2400_status>
    8cc8:	4603      	mov	r3, r0
    8cca:	f003 0308 	and.w	r3, r3, #8
    8cce:	2b00      	cmp	r3, #0
    8cd0:	d003      	beq.n	8cda <cc2400_repeater+0x142>
				break;
    8cd2:	bf00      	nop
		}
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    8cd4:	4b4b      	ldr	r3, [pc, #300]	; (8e04 <cc2400_repeater+0x26c>)
    8cd6:	61fb      	str	r3, [r7, #28]
    8cd8:	e000      	b.n	8cdc <cc2400_repeater+0x144>
			USRLED_SET;
			for (i = 0; i < len; i++)
				buf[i] = cc2400_get8(FIFOREG);
			if (cc2400_status() & STATUS_CRC_OK)
				break;
		}
    8cda:	e7c5      	b.n	8c68 <cc2400_repeater+0xd0>
		// got packet, now repeat it
		i = 2000000; while (--i); // allow time for requester to switch to rx
    8cdc:	69fb      	ldr	r3, [r7, #28]
    8cde:	3b01      	subs	r3, #1
    8ce0:	61fb      	str	r3, [r7, #28]
    8ce2:	69fb      	ldr	r3, [r7, #28]
    8ce4:	2b00      	cmp	r3, #0
    8ce6:	d1f9      	bne.n	8cdc <cc2400_repeater+0x144>
		USRLED_CLR;
    8ce8:	4b44      	ldr	r3, [pc, #272]	; (8dfc <cc2400_repeater+0x264>)
    8cea:	2202      	movs	r2, #2
    8cec:	601a      	str	r2, [r3, #0]
		RXLED_CLR;
    8cee:	4b43      	ldr	r3, [pc, #268]	; (8dfc <cc2400_repeater+0x264>)
    8cf0:	2210      	movs	r2, #16
    8cf2:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    8cf4:	2064      	movs	r0, #100	; 0x64
    8cf6:	f000 ffad 	bl	9c54 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8cfa:	bf00      	nop
    8cfc:	f000 ffa0 	bl	9c40 <cc2400_status>
    8d00:	4603      	mov	r3, r0
    8d02:	f003 0304 	and.w	r3, r3, #4
    8d06:	2b00      	cmp	r3, #0
    8d08:	d1f8      	bne.n	8cfc <cc2400_repeater+0x164>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8d0a:	bf00      	nop
    8d0c:	f000 ff98 	bl	9c40 <cc2400_status>
    8d10:	4603      	mov	r3, r0
    8d12:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8d16:	2b00      	cmp	r3, #0
    8d18:	d0f8      	beq.n	8d0c <cc2400_repeater+0x174>
		cc2400_set(FSDIV, *chan_ptr);
    8d1a:	687b      	ldr	r3, [r7, #4]
    8d1c:	881b      	ldrh	r3, [r3, #0]
    8d1e:	b29b      	uxth	r3, r3
    8d20:	2002      	movs	r0, #2
    8d22:	4619      	mov	r1, r3
    8d24:	f000 fed4 	bl	9ad0 <cc2400_set>
		while (!(cc2400_status() & XOSC16M_STABLE));
    8d28:	bf00      	nop
    8d2a:	f000 ff89 	bl	9c40 <cc2400_status>
    8d2e:	4603      	mov	r3, r0
    8d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8d34:	2b00      	cmp	r3, #0
    8d36:	d0f8      	beq.n	8d2a <cc2400_repeater+0x192>
		cc2400_strobe(SFSON);
    8d38:	2061      	movs	r0, #97	; 0x61
    8d3a:	f000 ff8b 	bl	9c54 <cc2400_strobe>
		TXLED_SET;
    8d3e:	4b2e      	ldr	r3, [pc, #184]	; (8df8 <cc2400_repeater+0x260>)
    8d40:	f44f 7280 	mov.w	r2, #256	; 0x100
    8d44:	601a      	str	r2, [r3, #0]
		buf[0] = len - 1; // length of data (rest of payload)
    8d46:	7dbb      	ldrb	r3, [r7, #22]
    8d48:	3b01      	subs	r3, #1
    8d4a:	b2da      	uxtb	r2, r3
    8d4c:	68fb      	ldr	r3, [r7, #12]
    8d4e:	701a      	strb	r2, [r3, #0]
		buf[1] = 1; // reply
    8d50:	68fb      	ldr	r3, [r7, #12]
    8d52:	2201      	movs	r2, #1
    8d54:	705a      	strb	r2, [r3, #1]
		for (pa = 0; pa < 8; pa++) {
    8d56:	2300      	movs	r3, #0
    8d58:	75fb      	strb	r3, [r7, #23]
    8d5a:	e039      	b.n	8dd0 <cc2400_repeater+0x238>
			cc2400_set(FREND, 8 | pa);
    8d5c:	7dfb      	ldrb	r3, [r7, #23]
    8d5e:	f043 0308 	orr.w	r3, r3, #8
    8d62:	b2db      	uxtb	r3, r3
    8d64:	b29b      	uxth	r3, r3
    8d66:	2005      	movs	r0, #5
    8d68:	4619      	mov	r1, r3
    8d6a:	f000 feb1 	bl	9ad0 <cc2400_set>
			buf[20] = pa;
    8d6e:	68fb      	ldr	r3, [r7, #12]
    8d70:	7dfa      	ldrb	r2, [r7, #23]
    8d72:	751a      	strb	r2, [r3, #20]
			for (i = 0; i < 16; i++) {
    8d74:	2300      	movs	r3, #0
    8d76:	61fb      	str	r3, [r7, #28]
    8d78:	e024      	b.n	8dc4 <cc2400_repeater+0x22c>
				buf[21] = i;
    8d7a:	69fb      	ldr	r3, [r7, #28]
    8d7c:	b2da      	uxtb	r2, r3
    8d7e:	68fb      	ldr	r3, [r7, #12]
    8d80:	755a      	strb	r2, [r3, #21]
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8d82:	bf00      	nop
    8d84:	200e      	movs	r0, #14
    8d86:	f000 fe8d 	bl	9aa4 <cc2400_get>
    8d8a:	4603      	mov	r3, r0
    8d8c:	f003 031f 	and.w	r3, r3, #31
    8d90:	2b0f      	cmp	r3, #15
    8d92:	d1f7      	bne.n	8d84 <cc2400_repeater+0x1ec>
					for (j = 0; j < len; j++)
    8d94:	2300      	movs	r3, #0
    8d96:	61bb      	str	r3, [r7, #24]
    8d98:	e00a      	b.n	8db0 <cc2400_repeater+0x218>
						cc2400_set8(FIFOREG, buf[j]);
    8d9a:	68fa      	ldr	r2, [r7, #12]
    8d9c:	69bb      	ldr	r3, [r7, #24]
    8d9e:	4413      	add	r3, r2
    8da0:	781b      	ldrb	r3, [r3, #0]
    8da2:	2070      	movs	r0, #112	; 0x70
    8da4:	4619      	mov	r1, r3
    8da6:	f000 fec1 	bl	9b2c <cc2400_set8>
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
				buf[21] = i;
				while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
					for (j = 0; j < len; j++)
    8daa:	69bb      	ldr	r3, [r7, #24]
    8dac:	3301      	adds	r3, #1
    8dae:	61bb      	str	r3, [r7, #24]
    8db0:	7dba      	ldrb	r2, [r7, #22]
    8db2:	69bb      	ldr	r3, [r7, #24]
    8db4:	429a      	cmp	r2, r3
    8db6:	dcf0      	bgt.n	8d9a <cc2400_repeater+0x202>
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
    8db8:	2063      	movs	r0, #99	; 0x63
    8dba:	f000 ff4b 	bl	9c54 <cc2400_strobe>
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
			cc2400_set(FREND, 8 | pa);
			buf[20] = pa;
			for (i = 0; i < 16; i++) {
    8dbe:	69fb      	ldr	r3, [r7, #28]
    8dc0:	3301      	adds	r3, #1
    8dc2:	61fb      	str	r3, [r7, #28]
    8dc4:	69fb      	ldr	r3, [r7, #28]
    8dc6:	2b0f      	cmp	r3, #15
    8dc8:	ddd7      	ble.n	8d7a <cc2400_repeater+0x1e2>
		while (!(cc2400_status() & XOSC16M_STABLE));
		cc2400_strobe(SFSON);
		TXLED_SET;
		buf[0] = len - 1; // length of data (rest of payload)
		buf[1] = 1; // reply
		for (pa = 0; pa < 8; pa++) {
    8dca:	7dfb      	ldrb	r3, [r7, #23]
    8dcc:	3301      	adds	r3, #1
    8dce:	75fb      	strb	r3, [r7, #23]
    8dd0:	7dfb      	ldrb	r3, [r7, #23]
    8dd2:	2b07      	cmp	r3, #7
    8dd4:	d9c2      	bls.n	8d5c <cc2400_repeater+0x1c4>
					for (j = 0; j < len; j++)
						cc2400_set8(FIFOREG, buf[j]);
				cc2400_strobe(STX);
			}
		}
		TXLED_CLR;
    8dd6:	4b09      	ldr	r3, [pc, #36]	; (8dfc <cc2400_repeater+0x264>)
    8dd8:	f44f 7280 	mov.w	r2, #256	; 0x100
    8ddc:	601a      	str	r2, [r3, #0]
		cc2400_strobe(SRFOFF);
    8dde:	2064      	movs	r0, #100	; 0x64
    8de0:	f000 ff38 	bl	9c54 <cc2400_strobe>
		while ((cc2400_status() & FS_LOCK));
    8de4:	bf00      	nop
    8de6:	f000 ff2b 	bl	9c40 <cc2400_status>
    8dea:	4603      	mov	r3, r0
    8dec:	f003 0304 	and.w	r3, r3, #4
    8df0:	2b00      	cmp	r3, #0
    8df2:	d1f8      	bne.n	8de6 <cc2400_repeater+0x24e>
	}
    8df4:	e6f3      	b.n	8bde <cc2400_repeater+0x46>
    8df6:	bf00      	nop
    8df8:	2009c038 	.word	0x2009c038
    8dfc:	2009c03c 	.word	0x2009c03c
    8e00:	2009c058 	.word	0x2009c058
    8e04:	001e8480 	.word	0x001e8480

00008e08 <cc2400_txtest>:
#endif
}

void cc2400_txtest(volatile u8 *mod_ptr, volatile u16 *chan_ptr)
{
    8e08:	b580      	push	{r7, lr}
    8e0a:	b084      	sub	sp, #16
    8e0c:	af00      	add	r7, sp, #0
    8e0e:	6078      	str	r0, [r7, #4]
    8e10:	6039      	str	r1, [r7, #0]
#ifdef TX_ENABLE
	u16 mdmctrl;
	if (*mod_ptr == MOD_BT_BASIC_RATE) {
    8e12:	687b      	ldr	r3, [r7, #4]
    8e14:	781b      	ldrb	r3, [r3, #0]
    8e16:	b2db      	uxtb	r3, r3
    8e18:	2b00      	cmp	r3, #0
    8e1a:	d102      	bne.n	8e22 <cc2400_txtest+0x1a>
		mdmctrl = 0x0040; // 160 kHz frequency deviation
    8e1c:	2340      	movs	r3, #64	; 0x40
    8e1e:	81fb      	strh	r3, [r7, #14]
    8e20:	e008      	b.n	8e34 <cc2400_txtest+0x2c>
	} else if (*mod_ptr == MOD_BT_LOW_ENERGY) {
    8e22:	687b      	ldr	r3, [r7, #4]
    8e24:	781b      	ldrb	r3, [r3, #0]
    8e26:	b2db      	uxtb	r3, r3
    8e28:	2b01      	cmp	r3, #1
    8e2a:	d102      	bne.n	8e32 <cc2400_txtest+0x2a>
		mdmctrl = 0x0040; // 250 kHz frequency deviation
    8e2c:	2340      	movs	r3, #64	; 0x40
    8e2e:	81fb      	strh	r3, [r7, #14]
    8e30:	e000      	b.n	8e34 <cc2400_txtest+0x2c>
	} else {
		/* oops */
		return;
    8e32:	e035      	b.n	8ea0 <cc2400_txtest+0x98>
	}
	cc2400_set(LMTST,   0x2b22);
    8e34:	2012      	movs	r0, #18
    8e36:	f642 3122 	movw	r1, #11042	; 0x2b22
    8e3a:	f000 fe49 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    8e3e:	2014      	movs	r0, #20
    8e40:	f243 314b 	movw	r1, #13131	; 0x334b
    8e44:	f000 fe44 	bl	9ad0 <cc2400_set>
	cc2400_set(GRMDM,   0x0df1); // default value
    8e48:	2020      	movs	r0, #32
    8e4a:	f640 51f1 	movw	r1, #3569	; 0xdf1
    8e4e:	f000 fe3f 	bl	9ad0 <cc2400_set>
	cc2400_set(FSDIV,   2435);
    8e52:	2002      	movs	r0, #2
    8e54:	f640 1183 	movw	r1, #2435	; 0x983
    8e58:	f000 fe3a 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMCTRL, mdmctrl); 
    8e5c:	89fb      	ldrh	r3, [r7, #14]
    8e5e:	2003      	movs	r0, #3
    8e60:	4619      	mov	r1, r3
    8e62:	f000 fe35 	bl	9ad0 <cc2400_set>
	
//	cc2400_set(FREND, 8 | 0);
	
	while (!(cc2400_status() & XOSC16M_STABLE));
    8e66:	bf00      	nop
    8e68:	f000 feea 	bl	9c40 <cc2400_status>
    8e6c:	4603      	mov	r3, r0
    8e6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8e72:	2b00      	cmp	r3, #0
    8e74:	d0f8      	beq.n	8e68 <cc2400_txtest+0x60>
	cc2400_strobe(SFSON);
    8e76:	2061      	movs	r0, #97	; 0x61
    8e78:	f000 feec 	bl	9c54 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8e7c:	bf00      	nop
    8e7e:	f000 fedf 	bl	9c40 <cc2400_status>
    8e82:	4603      	mov	r3, r0
    8e84:	f003 0304 	and.w	r3, r3, #4
    8e88:	2b00      	cmp	r3, #0
    8e8a:	d0f8      	beq.n	8e7e <cc2400_txtest+0x76>
	TXLED_SET;
    8e8c:	4b06      	ldr	r3, [pc, #24]	; (8ea8 <cc2400_txtest+0xa0>)
    8e8e:	f44f 7280 	mov.w	r2, #256	; 0x100
    8e92:	601a      	str	r2, [r3, #0]
	cc2400_strobe(STX);
    8e94:	2063      	movs	r0, #99	; 0x63
    8e96:	f000 fedd 	bl	9c54 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
	PAEN_SET;
    8e9a:	4b04      	ldr	r3, [pc, #16]	; (8eac <cc2400_txtest+0xa4>)
    8e9c:	2280      	movs	r2, #128	; 0x80
    8e9e:	601a      	str	r2, [r3, #0]
#endif
#endif
}
    8ea0:	3710      	adds	r7, #16
    8ea2:	46bd      	mov	sp, r7
    8ea4:	bd80      	pop	{r7, pc}
    8ea6:	bf00      	nop
    8ea8:	2009c038 	.word	0x2009c038
    8eac:	2009c058 	.word	0x2009c058

00008eb0 <ssp_start>:
typedef struct _ego_packet_t {
	u8 rxbuf[EGO_PACKET_LEN];
	u32 rxtime;
} ego_packet_t;

static void ssp_start(void) {
    8eb0:	b480      	push	{r7}
    8eb2:	af00      	add	r7, sp, #0
	// make sure the (active low) slave select signal is not active
	DIO_SSEL_SET;
    8eb4:	4b08      	ldr	r3, [pc, #32]	; (8ed8 <ssp_start+0x28>)
    8eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8eba:	601a      	str	r2, [r3, #0]

	// enable SSP
	DIO_SSP_CR1 |= SSPCR1_SSE;
    8ebc:	4a07      	ldr	r2, [pc, #28]	; (8edc <ssp_start+0x2c>)
    8ebe:	4b07      	ldr	r3, [pc, #28]	; (8edc <ssp_start+0x2c>)
    8ec0:	681b      	ldr	r3, [r3, #0]
    8ec2:	f043 0302 	orr.w	r3, r3, #2
    8ec6:	6013      	str	r3, [r2, #0]

	// activate slave select pin
	DIO_SSEL_CLR;
    8ec8:	4b05      	ldr	r3, [pc, #20]	; (8ee0 <ssp_start+0x30>)
    8eca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8ece:	601a      	str	r2, [r3, #0]
}
    8ed0:	46bd      	mov	sp, r7
    8ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
    8ed6:	4770      	bx	lr
    8ed8:	2009c098 	.word	0x2009c098
    8edc:	40030004 	.word	0x40030004
    8ee0:	2009c09c 	.word	0x2009c09c

00008ee4 <ssp_stop>:

static void ssp_stop() {
    8ee4:	b480      	push	{r7}
    8ee6:	af00      	add	r7, sp, #0
	// disable CC2400's output (active low)
	DIO_SSEL_SET;
    8ee8:	4b06      	ldr	r3, [pc, #24]	; (8f04 <ssp_stop+0x20>)
    8eea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    8eee:	601a      	str	r2, [r3, #0]

	// disable SSP
	DIO_SSP_CR1 &= ~SSPCR1_SSE;
    8ef0:	4a05      	ldr	r2, [pc, #20]	; (8f08 <ssp_stop+0x24>)
    8ef2:	4b05      	ldr	r3, [pc, #20]	; (8f08 <ssp_stop+0x24>)
    8ef4:	681b      	ldr	r3, [r3, #0]
    8ef6:	f023 0302 	bic.w	r3, r3, #2
    8efa:	6013      	str	r3, [r2, #0]
}
    8efc:	46bd      	mov	sp, r7
    8efe:	f85d 7b04 	ldr.w	r7, [sp], #4
    8f02:	4770      	bx	lr
    8f04:	2009c098 	.word	0x2009c098
    8f08:	40030004 	.word	0x40030004

00008f0c <ego_init>:

static void ego_init(void) {
    8f0c:	b580      	push	{r7, lr}
    8f0e:	af00      	add	r7, sp, #0
	// enable USB interrupts
	ISER0 = ISER0_ISE_USB;
    8f10:	4b03      	ldr	r3, [pc, #12]	; (8f20 <ego_init+0x14>)
    8f12:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8f16:	601a      	str	r2, [r3, #0]

	dio_ssp_init();
    8f18:	f000 fd08 	bl	992c <dio_ssp_init>
}
    8f1c:	bd80      	pop	{r7, pc}
    8f1e:	bf00      	nop
    8f20:	e000e100 	.word	0xe000e100

00008f24 <ego_deinit>:

static void ego_deinit(void) {
    8f24:	b580      	push	{r7, lr}
    8f26:	af00      	add	r7, sp, #0
	cc2400_strobe(SRFOFF);
    8f28:	2064      	movs	r0, #100	; 0x64
    8f2a:	f000 fe93 	bl	9c54 <cc2400_strobe>
	ssp_stop(); // TODO disable SSP
    8f2e:	f7ff ffd9 	bl	8ee4 <ssp_stop>
	ICER0 = ICER0_ICE_USB;
    8f32:	4b02      	ldr	r3, [pc, #8]	; (8f3c <ego_deinit+0x18>)
    8f34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8f38:	601a      	str	r2, [r3, #0]
}
    8f3a:	bd80      	pop	{r7, pc}
    8f3c:	e000e180 	.word	0xe000e180

00008f40 <rf_on>:

static void rf_on(void) {
    8f40:	b580      	push	{r7, lr}
    8f42:	af00      	add	r7, sp, #0
	cc2400_set(MANAND,  0x7fff);
    8f44:	200d      	movs	r0, #13
    8f46:	f647 71ff 	movw	r1, #32767	; 0x7fff
    8f4a:	f000 fdc1 	bl	9ad0 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    8f4e:	2012      	movs	r0, #18
    8f50:	f642 3122 	movw	r1, #11042	; 0x2b22
    8f54:	f000 fdbc 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMTST0, 0x134b); // without PRNG
    8f58:	2014      	movs	r0, #20
    8f5a:	f241 314b 	movw	r1, #4939	; 0x134b
    8f5e:	f000 fdb7 	bl	9ad0 <cc2400_set>
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    8f62:	2020      	movs	r0, #32
    8f64:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    8f68:	f000 fdb2 	bl	9ad0 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel - 1); // 1 MHz IF
    8f6c:	4b1e      	ldr	r3, [pc, #120]	; (8fe8 <rf_on+0xa8>)
    8f6e:	881b      	ldrh	r3, [r3, #0]
    8f70:	b29b      	uxth	r3, r3
    8f72:	3b01      	subs	r3, #1
    8f74:	b29b      	uxth	r3, r3
    8f76:	2002      	movs	r0, #2
    8f78:	4619      	mov	r1, r3
    8f7a:	f000 fda9 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    8f7e:	2003      	movs	r0, #3
    8f80:	2126      	movs	r1, #38	; 0x26
    8f82:	f000 fda5 	bl	9ad0 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    8f86:	2021      	movs	r0, #33	; 0x21
    8f88:	2103      	movs	r1, #3
    8f8a:	f000 fda1 	bl	9ad0 <cc2400_set>

    // 630f9ffe86
	cc2400_set(SYNCH,   0x630f);
    8f8e:	202d      	movs	r0, #45	; 0x2d
    8f90:	f246 310f 	movw	r1, #25359	; 0x630f
    8f94:	f000 fd9c 	bl	9ad0 <cc2400_set>
	cc2400_set(SYNCL,   0x9ffe);
    8f98:	202c      	movs	r0, #44	; 0x2c
    8f9a:	f649 71fe 	movw	r1, #40958	; 0x9ffe
    8f9e:	f000 fd97 	bl	9ad0 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    8fa2:	bf00      	nop
    8fa4:	f000 fe4c 	bl	9c40 <cc2400_status>
    8fa8:	4603      	mov	r3, r0
    8faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
    8fae:	2b00      	cmp	r3, #0
    8fb0:	d0f8      	beq.n	8fa4 <rf_on+0x64>

	ssp_start();
    8fb2:	f7ff ff7d 	bl	8eb0 <ssp_start>

	cc2400_strobe(SFSON);
    8fb6:	2061      	movs	r0, #97	; 0x61
    8fb8:	f000 fe4c 	bl	9c54 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    8fbc:	bf00      	nop
    8fbe:	f000 fe3f 	bl	9c40 <cc2400_status>
    8fc2:	4603      	mov	r3, r0
    8fc4:	f003 0304 	and.w	r3, r3, #4
    8fc8:	2b00      	cmp	r3, #0
    8fca:	d0f8      	beq.n	8fbe <rf_on+0x7e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    8fcc:	bf00      	nop
    8fce:	200e      	movs	r0, #14
    8fd0:	f000 fd68 	bl	9aa4 <cc2400_get>
    8fd4:	4603      	mov	r3, r0
    8fd6:	f003 031f 	and.w	r3, r3, #31
    8fda:	2b0f      	cmp	r3, #15
    8fdc:	d1f7      	bne.n	8fce <rf_on+0x8e>

	cc2400_strobe(SRX);
    8fde:	2062      	movs	r0, #98	; 0x62
    8fe0:	f000 fe38 	bl	9c54 <cc2400_strobe>
}
    8fe4:	bd80      	pop	{r7, pc}
    8fe6:	bf00      	nop
    8fe8:	1000049c 	.word	0x1000049c

00008fec <do_rx>:

void do_rx(ego_packet_t *packet) {
    8fec:	b480      	push	{r7}
    8fee:	b085      	sub	sp, #20
    8ff0:	af00      	add	r7, sp, #0
    8ff2:	6078      	str	r0, [r7, #4]
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    8ff4:	2300      	movs	r3, #0
    8ff6:	60fb      	str	r3, [r7, #12]
    8ff8:	e011      	b.n	901e <do_rx+0x32>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
    8ffa:	bf00      	nop
    8ffc:	4b0c      	ldr	r3, [pc, #48]	; (9030 <do_rx+0x44>)
    8ffe:	681b      	ldr	r3, [r3, #0]
    9000:	f003 0304 	and.w	r3, r3, #4
    9004:	2b00      	cmp	r3, #0
    9006:	d0f9      	beq.n	8ffc <do_rx+0x10>
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
    9008:	4b0a      	ldr	r3, [pc, #40]	; (9034 <do_rx+0x48>)
    900a:	681b      	ldr	r3, [r3, #0]
    900c:	b2d9      	uxtb	r1, r3
    900e:	687a      	ldr	r2, [r7, #4]
    9010:	68fb      	ldr	r3, [r7, #12]
    9012:	4413      	add	r3, r2
    9014:	460a      	mov	r2, r1
    9016:	701a      	strb	r2, [r3, #0]
	cc2400_strobe(SRX);
}

void do_rx(ego_packet_t *packet) {
	int i;
	for (i = 0; i < EGO_PACKET_LEN; i++) {
    9018:	68fb      	ldr	r3, [r7, #12]
    901a:	3301      	adds	r3, #1
    901c:	60fb      	str	r3, [r7, #12]
    901e:	68fb      	ldr	r3, [r7, #12]
    9020:	2b23      	cmp	r3, #35	; 0x23
    9022:	ddea      	ble.n	8ffa <do_rx+0xe>
		// make sure there are bytes ready
		while (!(SSP1SR & SSPSR_RNE)) ;
		packet->rxbuf[i] = (u8)DIO_SSP_DR;
	}
}
    9024:	3714      	adds	r7, #20
    9026:	46bd      	mov	sp, r7
    9028:	f85d 7b04 	ldr.w	r7, [sp], #4
    902c:	4770      	bx	lr
    902e:	bf00      	nop
    9030:	4003000c 	.word	0x4003000c
    9034:	40030008 	.word	0x40030008

00009038 <sync_received>:

static inline int sync_received(void) {
    9038:	b580      	push	{r7, lr}
    903a:	af00      	add	r7, sp, #0
	return cc2400_status() & SYNC_RECEIVED;
    903c:	f000 fe00 	bl	9c40 <cc2400_status>
    9040:	4603      	mov	r3, r0
    9042:	f003 0310 	and.w	r3, r3, #16
}
    9046:	4618      	mov	r0, r3
    9048:	bd80      	pop	{r7, pc}
    904a:	bf00      	nop

0000904c <sleep_ms>:

// sleep for some milliseconds
static void sleep_ms(ego_fsm_state_t *state, u32 duration) {
    904c:	b480      	push	{r7}
    904e:	b083      	sub	sp, #12
    9050:	af00      	add	r7, sp, #0
    9052:	6078      	str	r0, [r7, #4]
    9054:	6039      	str	r1, [r7, #0]
	state->sleep_start = CLK100NS;
    9056:	4b0c      	ldr	r3, [pc, #48]	; (9088 <sleep_ms+0x3c>)
    9058:	681b      	ldr	r3, [r3, #0]
    905a:	f3c3 0313 	ubfx	r3, r3, #0, #20
    905e:	f640 4235 	movw	r2, #3125	; 0xc35
    9062:	fb02 f203 	mul.w	r2, r2, r3
    9066:	4b09      	ldr	r3, [pc, #36]	; (908c <sleep_ms+0x40>)
    9068:	681b      	ldr	r3, [r3, #0]
    906a:	441a      	add	r2, r3
    906c:	687b      	ldr	r3, [r7, #4]
    906e:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    9070:	683b      	ldr	r3, [r7, #0]
    9072:	f242 7210 	movw	r2, #10000	; 0x2710
    9076:	fb02 f203 	mul.w	r2, r2, r3
    907a:	687b      	ldr	r3, [r7, #4]
    907c:	60da      	str	r2, [r3, #12]
}
    907e:	370c      	adds	r7, #12
    9080:	46bd      	mov	sp, r7
    9082:	f85d 7b04 	ldr.w	r7, [sp], #4
    9086:	4770      	bx	lr
    9088:	10000be4 	.word	0x10000be4
    908c:	40004008 	.word	0x40004008

00009090 <sleep_ms_anchor>:

// sleep for some milliseconds relative to the current anchor point
static void sleep_ms_anchor(ego_fsm_state_t *state, u32 duration) {
    9090:	b480      	push	{r7}
    9092:	b083      	sub	sp, #12
    9094:	af00      	add	r7, sp, #0
    9096:	6078      	str	r0, [r7, #4]
    9098:	6039      	str	r1, [r7, #0]
	state->sleep_start = state->anchor;
    909a:	687b      	ldr	r3, [r7, #4]
    909c:	699a      	ldr	r2, [r3, #24]
    909e:	687b      	ldr	r3, [r7, #4]
    90a0:	609a      	str	r2, [r3, #8]
	state->sleep_duration = duration * 1000*10;
    90a2:	683b      	ldr	r3, [r7, #0]
    90a4:	f242 7210 	movw	r2, #10000	; 0x2710
    90a8:	fb02 f203 	mul.w	r2, r2, r3
    90ac:	687b      	ldr	r3, [r7, #4]
    90ae:	60da      	str	r2, [r3, #12]
}
    90b0:	370c      	adds	r7, #12
    90b2:	46bd      	mov	sp, r7
    90b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    90b8:	4770      	bx	lr
    90ba:	bf00      	nop

000090bc <sleep_elapsed>:

static inline int sleep_elapsed(ego_fsm_state_t *state) {
    90bc:	b480      	push	{r7}
    90be:	b085      	sub	sp, #20
    90c0:	af00      	add	r7, sp, #0
    90c2:	6078      	str	r0, [r7, #4]
	u32 now = CLK100NS;
    90c4:	4b13      	ldr	r3, [pc, #76]	; (9114 <sleep_elapsed+0x58>)
    90c6:	681b      	ldr	r3, [r3, #0]
    90c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    90cc:	f640 4235 	movw	r2, #3125	; 0xc35
    90d0:	fb02 f203 	mul.w	r2, r2, r3
    90d4:	4b10      	ldr	r3, [pc, #64]	; (9118 <sleep_elapsed+0x5c>)
    90d6:	681b      	ldr	r3, [r3, #0]
    90d8:	4413      	add	r3, r2
    90da:	60fb      	str	r3, [r7, #12]
	if (now < state->sleep_start)
    90dc:	687b      	ldr	r3, [r7, #4]
    90de:	689a      	ldr	r2, [r3, #8]
    90e0:	68fb      	ldr	r3, [r7, #12]
    90e2:	429a      	cmp	r2, r3
    90e4:	d905      	bls.n	90f2 <sleep_elapsed+0x36>
		now += 3276800000;
    90e6:	68fb      	ldr	r3, [r7, #12]
    90e8:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
    90ec:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
    90f0:	60fb      	str	r3, [r7, #12]
	return (now - state->sleep_start) >= state->sleep_duration;
    90f2:	687b      	ldr	r3, [r7, #4]
    90f4:	689b      	ldr	r3, [r3, #8]
    90f6:	68fa      	ldr	r2, [r7, #12]
    90f8:	1ad2      	subs	r2, r2, r3
    90fa:	687b      	ldr	r3, [r7, #4]
    90fc:	68db      	ldr	r3, [r3, #12]
    90fe:	429a      	cmp	r2, r3
    9100:	bf2c      	ite	cs
    9102:	2301      	movcs	r3, #1
    9104:	2300      	movcc	r3, #0
    9106:	b2db      	uxtb	r3, r3
}
    9108:	4618      	mov	r0, r3
    910a:	3714      	adds	r7, #20
    910c:	46bd      	mov	sp, r7
    910e:	f85d 7b04 	ldr.w	r7, [sp], #4
    9112:	4770      	bx	lr
    9114:	10000be4 	.word	0x10000be4
    9118:	40004008 	.word	0x40004008

0000911c <nop_state>:

/////////////
// states

// do nothing
void nop_state(ego_fsm_state_t *state) {
    911c:	b480      	push	{r7}
    911e:	b083      	sub	sp, #12
    9120:	af00      	add	r7, sp, #0
    9122:	6078      	str	r0, [r7, #4]
}
    9124:	370c      	adds	r7, #12
    9126:	46bd      	mov	sp, r7
    9128:	f85d 7b04 	ldr.w	r7, [sp], #4
    912c:	4770      	bx	lr
    912e:	bf00      	nop

00009130 <init_state>:

// used in follow and jam mode, override the channel supplied by user
void init_state(ego_fsm_state_t *state) {
    9130:	b480      	push	{r7}
    9132:	b083      	sub	sp, #12
    9134:	af00      	add	r7, sp, #0
    9136:	6078      	str	r0, [r7, #4]
	state->channel_index = 0;
    9138:	687b      	ldr	r3, [r7, #4]
    913a:	2200      	movs	r2, #0
    913c:	605a      	str	r2, [r3, #4]
	channel = channels[state->channel_index];
    913e:	687b      	ldr	r3, [r7, #4]
    9140:	685b      	ldr	r3, [r3, #4]
    9142:	4a06      	ldr	r2, [pc, #24]	; (915c <init_state+0x2c>)
    9144:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    9148:	4b05      	ldr	r3, [pc, #20]	; (9160 <init_state+0x30>)
    914a:	801a      	strh	r2, [r3, #0]
	state->state = EGO_ST_START_RX;
    914c:	687b      	ldr	r3, [r7, #4]
    914e:	2201      	movs	r2, #1
    9150:	701a      	strb	r2, [r3, #0]
}
    9152:	370c      	adds	r7, #12
    9154:	46bd      	mov	sp, r7
    9156:	f85d 7b04 	ldr.w	r7, [sp], #4
    915a:	4770      	bx	lr
    915c:	100008b0 	.word	0x100008b0
    9160:	1000049c 	.word	0x1000049c

00009164 <start_rf_state>:

void start_rf_state(ego_fsm_state_t *state) {
    9164:	b580      	push	{r7, lr}
    9166:	b082      	sub	sp, #8
    9168:	af00      	add	r7, sp, #0
    916a:	6078      	str	r0, [r7, #4]
	rf_on();
    916c:	f7ff fee8 	bl	8f40 <rf_on>
	state->state = EGO_ST_CAP;
    9170:	687b      	ldr	r3, [r7, #4]
    9172:	2202      	movs	r2, #2
    9174:	701a      	strb	r2, [r3, #0]
}
    9176:	3708      	adds	r7, #8
    9178:	46bd      	mov	sp, r7
    917a:	bd80      	pop	{r7, pc}

0000917c <cap_state>:

void cap_state(ego_fsm_state_t *state) {
    917c:	b580      	push	{r7, lr}
    917e:	b08c      	sub	sp, #48	; 0x30
    9180:	af00      	add	r7, sp, #0
    9182:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    9184:	f107 0308 	add.w	r3, r7, #8
    9188:	2200      	movs	r2, #0
    918a:	601a      	str	r2, [r3, #0]
    918c:	3304      	adds	r3, #4
    918e:	2200      	movs	r2, #0
    9190:	601a      	str	r2, [r3, #0]
    9192:	3304      	adds	r3, #4
    9194:	2200      	movs	r2, #0
    9196:	601a      	str	r2, [r3, #0]
    9198:	3304      	adds	r3, #4
    919a:	2200      	movs	r2, #0
    919c:	601a      	str	r2, [r3, #0]
    919e:	3304      	adds	r3, #4
    91a0:	2200      	movs	r2, #0
    91a2:	601a      	str	r2, [r3, #0]
    91a4:	3304      	adds	r3, #4
    91a6:	2200      	movs	r2, #0
    91a8:	601a      	str	r2, [r3, #0]
    91aa:	3304      	adds	r3, #4
    91ac:	2200      	movs	r2, #0
    91ae:	601a      	str	r2, [r3, #0]
    91b0:	3304      	adds	r3, #4
    91b2:	2200      	movs	r2, #0
    91b4:	601a      	str	r2, [r3, #0]
    91b6:	3304      	adds	r3, #4
    91b8:	2200      	movs	r2, #0
    91ba:	601a      	str	r2, [r3, #0]
    91bc:	3304      	adds	r3, #4
    91be:	2200      	movs	r2, #0
    91c0:	601a      	str	r2, [r3, #0]
    91c2:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    91c4:	4b23      	ldr	r3, [pc, #140]	; (9254 <cap_state+0xd8>)
    91c6:	681b      	ldr	r3, [r3, #0]
    91c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
    91cc:	f640 4235 	movw	r2, #3125	; 0xc35
    91d0:	fb02 f203 	mul.w	r2, r2, r3
    91d4:	4b20      	ldr	r3, [pc, #128]	; (9258 <cap_state+0xdc>)
    91d6:	681b      	ldr	r3, [r3, #0]
    91d8:	4413      	add	r3, r2
	rf_on();
	state->state = EGO_ST_CAP;
}

void cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    91da:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sleep_elapsed(state)) {
    91dc:	6878      	ldr	r0, [r7, #4]
    91de:	f7ff ff6d 	bl	90bc <sleep_elapsed>
    91e2:	4603      	mov	r3, r0
    91e4:	2b00      	cmp	r3, #0
    91e6:	d006      	beq.n	91f6 <cap_state+0x7a>
		sleep_ms(state, 4);
    91e8:	6878      	ldr	r0, [r7, #4]
    91ea:	2104      	movs	r1, #4
    91ec:	f7ff ff2e 	bl	904c <sleep_ms>
		state->state = EGO_ST_SLEEP;
    91f0:	687b      	ldr	r3, [r7, #4]
    91f2:	2203      	movs	r2, #3
    91f4:	701a      	strb	r2, [r3, #0]
	}

	if (sync_received()) {
    91f6:	f7ff ff1f 	bl	9038 <sync_received>
    91fa:	4603      	mov	r3, r0
    91fc:	2b00      	cmp	r3, #0
    91fe:	d019      	beq.n	9234 <cap_state+0xb8>
		RXLED_SET;
    9200:	4b16      	ldr	r3, [pc, #88]	; (925c <cap_state+0xe0>)
    9202:	2210      	movs	r2, #16
    9204:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    9206:	f107 0308 	add.w	r3, r7, #8
    920a:	4618      	mov	r0, r3
    920c:	f7ff feee 	bl	8fec <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    9210:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    9212:	f107 0208 	add.w	r2, r7, #8
    9216:	2006      	movs	r0, #6
    9218:	4611      	mov	r1, r2
    921a:	461a      	mov	r2, r3
    921c:	f7fb fa2c 	bl	4678 <enqueue_with_ts>
		RXLED_CLR;
    9220:	4b0f      	ldr	r3, [pc, #60]	; (9260 <cap_state+0xe4>)
    9222:	2210      	movs	r2, #16
    9224:	601a      	str	r2, [r3, #0]

		sleep_ms(state, 6);
    9226:	6878      	ldr	r0, [r7, #4]
    9228:	2106      	movs	r1, #6
    922a:	f7ff ff0f 	bl	904c <sleep_ms>
		state->state = EGO_ST_SLEEP;
    922e:	687b      	ldr	r3, [r7, #4]
    9230:	2203      	movs	r2, #3
    9232:	701a      	strb	r2, [r3, #0]
	}

	// kill RF on state change
	if (state->state != EGO_ST_CAP) {
    9234:	687b      	ldr	r3, [r7, #4]
    9236:	781b      	ldrb	r3, [r3, #0]
    9238:	2b02      	cmp	r3, #2
    923a:	d007      	beq.n	924c <cap_state+0xd0>
		cc2400_strobe(SRFOFF);
    923c:	2064      	movs	r0, #100	; 0x64
    923e:	f000 fd09 	bl	9c54 <cc2400_strobe>
		ssp_stop();
    9242:	f7ff fe4f 	bl	8ee4 <ssp_stop>
		state->timer_active = 1;
    9246:	687b      	ldr	r3, [r7, #4]
    9248:	2201      	movs	r2, #1
    924a:	611a      	str	r2, [r3, #16]
	}
}
    924c:	3730      	adds	r7, #48	; 0x30
    924e:	46bd      	mov	sp, r7
    9250:	bd80      	pop	{r7, pc}
    9252:	bf00      	nop
    9254:	10000be4 	.word	0x10000be4
    9258:	40004008 	.word	0x40004008
    925c:	2009c038 	.word	0x2009c038
    9260:	2009c03c 	.word	0x2009c03c

00009264 <sleep_state>:

void sleep_state(ego_fsm_state_t *state) {
    9264:	b580      	push	{r7, lr}
    9266:	b082      	sub	sp, #8
    9268:	af00      	add	r7, sp, #0
    926a:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    926c:	6878      	ldr	r0, [r7, #4]
    926e:	f7ff ff25 	bl	90bc <sleep_elapsed>
    9272:	4603      	mov	r3, r0
    9274:	2b00      	cmp	r3, #0
    9276:	d01e      	beq.n	92b6 <sleep_state+0x52>
		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    9278:	687b      	ldr	r3, [r7, #4]
    927a:	685b      	ldr	r3, [r3, #4]
    927c:	1c5a      	adds	r2, r3, #1
    927e:	4b0f      	ldr	r3, [pc, #60]	; (92bc <sleep_state+0x58>)
    9280:	4013      	ands	r3, r2
    9282:	2b00      	cmp	r3, #0
    9284:	da03      	bge.n	928e <sleep_state+0x2a>
    9286:	3b01      	subs	r3, #1
    9288:	f063 0303 	orn	r3, r3, #3
    928c:	3301      	adds	r3, #1
    928e:	461a      	mov	r2, r3
    9290:	687b      	ldr	r3, [r7, #4]
    9292:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    9294:	687b      	ldr	r3, [r7, #4]
    9296:	685b      	ldr	r3, [r3, #4]
    9298:	4a09      	ldr	r2, [pc, #36]	; (92c0 <sleep_state+0x5c>)
    929a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    929e:	4b09      	ldr	r3, [pc, #36]	; (92c4 <sleep_state+0x60>)
    92a0:	801a      	strh	r2, [r3, #0]

		// set 7 ms timeout for RX
		sleep_ms(state, 7);
    92a2:	6878      	ldr	r0, [r7, #4]
    92a4:	2107      	movs	r1, #7
    92a6:	f7ff fed1 	bl	904c <sleep_ms>
		state->timer_active = 1;
    92aa:	687b      	ldr	r3, [r7, #4]
    92ac:	2201      	movs	r2, #1
    92ae:	611a      	str	r2, [r3, #16]

		state->state = EGO_ST_START_RX;
    92b0:	687b      	ldr	r3, [r7, #4]
    92b2:	2201      	movs	r2, #1
    92b4:	701a      	strb	r2, [r3, #0]
	}
}
    92b6:	3708      	adds	r7, #8
    92b8:	46bd      	mov	sp, r7
    92ba:	bd80      	pop	{r7, pc}
    92bc:	80000003 	.word	0x80000003
    92c0:	100008b0 	.word	0x100008b0
    92c4:	1000049c 	.word	0x1000049c

000092c8 <continuous_init_state>:

// continuous cap states (reuses START_RX state)
void continuous_init_state(ego_fsm_state_t *state) {
    92c8:	b480      	push	{r7}
    92ca:	b083      	sub	sp, #12
    92cc:	af00      	add	r7, sp, #0
    92ce:	6078      	str	r0, [r7, #4]
	state->state = EGO_ST_START_RX;
    92d0:	687b      	ldr	r3, [r7, #4]
    92d2:	2201      	movs	r2, #1
    92d4:	701a      	strb	r2, [r3, #0]
}
    92d6:	370c      	adds	r7, #12
    92d8:	46bd      	mov	sp, r7
    92da:	f85d 7b04 	ldr.w	r7, [sp], #4
    92de:	4770      	bx	lr

000092e0 <continuous_cap_state>:

void continuous_cap_state(ego_fsm_state_t *state) {
    92e0:	b580      	push	{r7, lr}
    92e2:	b08c      	sub	sp, #48	; 0x30
    92e4:	af00      	add	r7, sp, #0
    92e6:	6078      	str	r0, [r7, #4]
	ego_packet_t packet = {
    92e8:	f107 0308 	add.w	r3, r7, #8
    92ec:	2200      	movs	r2, #0
    92ee:	601a      	str	r2, [r3, #0]
    92f0:	3304      	adds	r3, #4
    92f2:	2200      	movs	r2, #0
    92f4:	601a      	str	r2, [r3, #0]
    92f6:	3304      	adds	r3, #4
    92f8:	2200      	movs	r2, #0
    92fa:	601a      	str	r2, [r3, #0]
    92fc:	3304      	adds	r3, #4
    92fe:	2200      	movs	r2, #0
    9300:	601a      	str	r2, [r3, #0]
    9302:	3304      	adds	r3, #4
    9304:	2200      	movs	r2, #0
    9306:	601a      	str	r2, [r3, #0]
    9308:	3304      	adds	r3, #4
    930a:	2200      	movs	r2, #0
    930c:	601a      	str	r2, [r3, #0]
    930e:	3304      	adds	r3, #4
    9310:	2200      	movs	r2, #0
    9312:	601a      	str	r2, [r3, #0]
    9314:	3304      	adds	r3, #4
    9316:	2200      	movs	r2, #0
    9318:	601a      	str	r2, [r3, #0]
    931a:	3304      	adds	r3, #4
    931c:	2200      	movs	r2, #0
    931e:	601a      	str	r2, [r3, #0]
    9320:	3304      	adds	r3, #4
    9322:	2200      	movs	r2, #0
    9324:	601a      	str	r2, [r3, #0]
    9326:	3304      	adds	r3, #4
		.rxtime = CLK100NS,
    9328:	4b1e      	ldr	r3, [pc, #120]	; (93a4 <continuous_cap_state+0xc4>)
    932a:	681b      	ldr	r3, [r3, #0]
    932c:	f3c3 0313 	ubfx	r3, r3, #0, #20
    9330:	f640 4235 	movw	r2, #3125	; 0xc35
    9334:	fb02 f203 	mul.w	r2, r2, r3
    9338:	4b1b      	ldr	r3, [pc, #108]	; (93a8 <continuous_cap_state+0xc8>)
    933a:	681b      	ldr	r3, [r3, #0]
    933c:	4413      	add	r3, r2
void continuous_init_state(ego_fsm_state_t *state) {
	state->state = EGO_ST_START_RX;
}

void continuous_cap_state(ego_fsm_state_t *state) {
	ego_packet_t packet = {
    933e:	62fb      	str	r3, [r7, #44]	; 0x2c
		.rxtime = CLK100NS,
	};

	if (sync_received()) {
    9340:	f7ff fe7a 	bl	9038 <sync_received>
    9344:	4603      	mov	r3, r0
    9346:	2b00      	cmp	r3, #0
    9348:	d029      	beq.n	939e <continuous_cap_state+0xbe>
		RXLED_SET;
    934a:	4b18      	ldr	r3, [pc, #96]	; (93ac <continuous_cap_state+0xcc>)
    934c:	2210      	movs	r2, #16
    934e:	601a      	str	r2, [r3, #0]
		do_rx(&packet);
    9350:	f107 0308 	add.w	r3, r7, #8
    9354:	4618      	mov	r0, r3
    9356:	f7ff fe49 	bl	8fec <do_rx>
		enqueue_with_ts(EGO_PACKET, packet.rxbuf, packet.rxtime);
    935a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    935c:	f107 0208 	add.w	r2, r7, #8
    9360:	2006      	movs	r0, #6
    9362:	4611      	mov	r1, r2
    9364:	461a      	mov	r2, r3
    9366:	f7fb f987 	bl	4678 <enqueue_with_ts>
		RXLED_CLR;
    936a:	4b11      	ldr	r3, [pc, #68]	; (93b0 <continuous_cap_state+0xd0>)
    936c:	2210      	movs	r2, #16
    936e:	601a      	str	r2, [r3, #0]

		// restart cap with radio warm
		cc2400_strobe(SFSON);
    9370:	2061      	movs	r0, #97	; 0x61
    9372:	f000 fc6f 	bl	9c54 <cc2400_strobe>
		while (!(cc2400_status() & FS_LOCK));
    9376:	bf00      	nop
    9378:	f000 fc62 	bl	9c40 <cc2400_status>
    937c:	4603      	mov	r3, r0
    937e:	f003 0304 	and.w	r3, r3, #4
    9382:	2b00      	cmp	r3, #0
    9384:	d0f8      	beq.n	9378 <continuous_cap_state+0x98>
		while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    9386:	bf00      	nop
    9388:	200e      	movs	r0, #14
    938a:	f000 fb8b 	bl	9aa4 <cc2400_get>
    938e:	4603      	mov	r3, r0
    9390:	f003 031f 	and.w	r3, r3, #31
    9394:	2b0f      	cmp	r3, #15
    9396:	d1f7      	bne.n	9388 <continuous_cap_state+0xa8>
		cc2400_strobe(SRX);
    9398:	2062      	movs	r0, #98	; 0x62
    939a:	f000 fc5b 	bl	9c54 <cc2400_strobe>
	}
}
    939e:	3730      	adds	r7, #48	; 0x30
    93a0:	46bd      	mov	sp, r7
    93a2:	bd80      	pop	{r7, pc}
    93a4:	10000be4 	.word	0x10000be4
    93a8:	40004008 	.word	0x40004008
    93ac:	2009c038 	.word	0x2009c038
    93b0:	2009c03c 	.word	0x2009c03c

000093b4 <jam_cap_state>:

// jammer states
void jam_cap_state(ego_fsm_state_t *state) {
    93b4:	b580      	push	{r7, lr}
    93b6:	b082      	sub	sp, #8
    93b8:	af00      	add	r7, sp, #0
    93ba:	6078      	str	r0, [r7, #4]
	if (sync_received()) {
    93bc:	f7ff fe3c 	bl	9038 <sync_received>
    93c0:	4603      	mov	r3, r0
    93c2:	2b00      	cmp	r3, #0
    93c4:	d012      	beq.n	93ec <jam_cap_state+0x38>
		state->state = EGO_ST_START_JAMMING;
    93c6:	687b      	ldr	r3, [r7, #4]
    93c8:	2204      	movs	r2, #4
    93ca:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 1;
    93cc:	687b      	ldr	r3, [r7, #4]
    93ce:	2201      	movs	r2, #1
    93d0:	615a      	str	r2, [r3, #20]
		state->anchor = CLK100NS;
    93d2:	4b16      	ldr	r3, [pc, #88]	; (942c <jam_cap_state+0x78>)
    93d4:	681b      	ldr	r3, [r3, #0]
    93d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
    93da:	f640 4235 	movw	r2, #3125	; 0xc35
    93de:	fb02 f203 	mul.w	r2, r2, r3
    93e2:	4b13      	ldr	r3, [pc, #76]	; (9430 <jam_cap_state+0x7c>)
    93e4:	681b      	ldr	r3, [r3, #0]
    93e6:	441a      	add	r2, r3
    93e8:	687b      	ldr	r3, [r7, #4]
    93ea:	619a      	str	r2, [r3, #24]
	}
	if (state->timer_active && sleep_elapsed(state)) {
    93ec:	687b      	ldr	r3, [r7, #4]
    93ee:	691b      	ldr	r3, [r3, #16]
    93f0:	2b00      	cmp	r3, #0
    93f2:	d00f      	beq.n	9414 <jam_cap_state+0x60>
    93f4:	6878      	ldr	r0, [r7, #4]
    93f6:	f7ff fe61 	bl	90bc <sleep_elapsed>
    93fa:	4603      	mov	r3, r0
    93fc:	2b00      	cmp	r3, #0
    93fe:	d009      	beq.n	9414 <jam_cap_state+0x60>
		state->state = EGO_ST_START_JAMMING;
    9400:	687b      	ldr	r3, [r7, #4]
    9402:	2204      	movs	r2, #4
    9404:	701a      	strb	r2, [r3, #0]
		state->packet_observed = 0;
    9406:	687b      	ldr	r3, [r7, #4]
    9408:	2200      	movs	r2, #0
    940a:	615a      	str	r2, [r3, #20]
		sleep_ms(state, 11); // 11 ms hop interval
    940c:	6878      	ldr	r0, [r7, #4]
    940e:	210b      	movs	r1, #11
    9410:	f7ff fe1c 	bl	904c <sleep_ms>
	}

	// state changed, kill radio
	if (state->state != EGO_ST_CAP) {
    9414:	687b      	ldr	r3, [r7, #4]
    9416:	781b      	ldrb	r3, [r3, #0]
    9418:	2b02      	cmp	r3, #2
    941a:	d004      	beq.n	9426 <jam_cap_state+0x72>
		cc2400_strobe(SRFOFF);
    941c:	2064      	movs	r0, #100	; 0x64
    941e:	f000 fc19 	bl	9c54 <cc2400_strobe>
		ssp_stop();
    9422:	f7ff fd5f 	bl	8ee4 <ssp_stop>
	}
}
    9426:	3708      	adds	r7, #8
    9428:	46bd      	mov	sp, r7
    942a:	bd80      	pop	{r7, pc}
    942c:	10000be4 	.word	0x10000be4
    9430:	40004008 	.word	0x40004008

00009434 <start_jamming_state>:

void start_jamming_state(ego_fsm_state_t *state) {
    9434:	b580      	push	{r7, lr}
    9436:	b082      	sub	sp, #8
    9438:	af00      	add	r7, sp, #0
    943a:	6078      	str	r0, [r7, #4]
#ifdef TX_ENABLE
	cc2400_set(MANAND,  0x7fff);
    943c:	200d      	movs	r0, #13
    943e:	f647 71ff 	movw	r1, #32767	; 0x7fff
    9442:	f000 fb45 	bl	9ad0 <cc2400_set>
	cc2400_set(LMTST,   0x2b22);
    9446:	2012      	movs	r0, #18
    9448:	f642 3122 	movw	r1, #11042	; 0x2b22
    944c:	f000 fb40 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMTST0, 0x334b); // with PRNG
    9450:	2014      	movs	r0, #20
    9452:	f243 314b 	movw	r1, #13131	; 0x334b
    9456:	f000 fb3b 	bl	9ad0 <cc2400_set>
	// cc2400_set(GRMDM,   0x04e0); // un-buffered mode, 2FSK
	cc2400_set(GRMDM,   0x04c0); // un-buffered mode, 2FSK
    945a:	2020      	movs	r0, #32
    945c:	f44f 6198 	mov.w	r1, #1216	; 0x4c0
    9460:	f000 fb36 	bl	9ad0 <cc2400_set>
	//      |  | |   |  +--------> CRC off
	//      |  | |   +-----------> sync word: 24 MSB bits of SYNC_WORD
	//      |  | +---------------> 1 byte of 01010101
	//      |  +-----------------> packet mode
	//      +--------------------> un-buffered mode
	cc2400_set(FSDIV,   channel); // no IF for TX
    9464:	4b21      	ldr	r3, [pc, #132]	; (94ec <start_jamming_state+0xb8>)
    9466:	881b      	ldrh	r3, [r3, #0]
    9468:	b29b      	uxth	r3, r3
    946a:	2002      	movs	r0, #2
    946c:	4619      	mov	r1, r3
    946e:	f000 fb2f 	bl	9ad0 <cc2400_set>
	cc2400_set(MDMCTRL, 0x0026); // 150 kHz frequency deviation
    9472:	2003      	movs	r0, #3
    9474:	2126      	movs	r1, #38	; 0x26
    9476:	f000 fb2b 	bl	9ad0 <cc2400_set>
	cc2400_set(GRDEC,  3);       // 250 kbit
    947a:	2021      	movs	r0, #33	; 0x21
    947c:	2103      	movs	r1, #3
    947e:	f000 fb27 	bl	9ad0 <cc2400_set>
	cc2400_set(FREND, 0xf);
    9482:	2005      	movs	r0, #5
    9484:	210f      	movs	r1, #15
    9486:	f000 fb23 	bl	9ad0 <cc2400_set>

	while (!(cc2400_status() & XOSC16M_STABLE));
    948a:	bf00      	nop
    948c:	f000 fbd8 	bl	9c40 <cc2400_status>
    9490:	4603      	mov	r3, r0
    9492:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9496:	2b00      	cmp	r3, #0
    9498:	d0f8      	beq.n	948c <start_jamming_state+0x58>

	cc2400_strobe(SFSON);
    949a:	2061      	movs	r0, #97	; 0x61
    949c:	f000 fbda 	bl	9c54 <cc2400_strobe>
	while (!(cc2400_status() & FS_LOCK));
    94a0:	bf00      	nop
    94a2:	f000 fbcd 	bl	9c40 <cc2400_status>
    94a6:	4603      	mov	r3, r0
    94a8:	f003 0304 	and.w	r3, r3, #4
    94ac:	2b00      	cmp	r3, #0
    94ae:	d0f8      	beq.n	94a2 <start_jamming_state+0x6e>
	while ((cc2400_get(FSMSTATE) & 0x1f) != STATE_STROBE_FS_ON);
    94b0:	bf00      	nop
    94b2:	200e      	movs	r0, #14
    94b4:	f000 faf6 	bl	9aa4 <cc2400_get>
    94b8:	4603      	mov	r3, r0
    94ba:	f003 031f 	and.w	r3, r3, #31
    94be:	2b0f      	cmp	r3, #15
    94c0:	d1f7      	bne.n	94b2 <start_jamming_state+0x7e>

#ifdef UBERTOOTH_ONE
	PAEN_SET;
    94c2:	4b0b      	ldr	r3, [pc, #44]	; (94f0 <start_jamming_state+0xbc>)
    94c4:	2280      	movs	r2, #128	; 0x80
    94c6:	601a      	str	r2, [r3, #0]
#endif

	cc2400_strobe(STX);
    94c8:	2063      	movs	r0, #99	; 0x63
    94ca:	f000 fbc3 	bl	9c54 <cc2400_strobe>
	TXLED_SET;
    94ce:	4b09      	ldr	r3, [pc, #36]	; (94f4 <start_jamming_state+0xc0>)
    94d0:	f44f 7280 	mov.w	r2, #256	; 0x100
    94d4:	601a      	str	r2, [r3, #0]
#endif

	state->state = EGO_ST_JAMMING;
    94d6:	687b      	ldr	r3, [r7, #4]
    94d8:	2205      	movs	r2, #5
    94da:	701a      	strb	r2, [r3, #0]
	sleep_ms_anchor(state, 2);
    94dc:	6878      	ldr	r0, [r7, #4]
    94de:	2102      	movs	r1, #2
    94e0:	f7ff fdd6 	bl	9090 <sleep_ms_anchor>
}
    94e4:	3708      	adds	r7, #8
    94e6:	46bd      	mov	sp, r7
    94e8:	bd80      	pop	{r7, pc}
    94ea:	bf00      	nop
    94ec:	1000049c 	.word	0x1000049c
    94f0:	2009c058 	.word	0x2009c058
    94f4:	2009c038 	.word	0x2009c038

000094f8 <jamming_state>:

void jamming_state(ego_fsm_state_t *state) {
    94f8:	b580      	push	{r7, lr}
    94fa:	b082      	sub	sp, #8
    94fc:	af00      	add	r7, sp, #0
    94fe:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    9500:	6878      	ldr	r0, [r7, #4]
    9502:	f7ff fddb 	bl	90bc <sleep_elapsed>
    9506:	4603      	mov	r3, r0
    9508:	2b00      	cmp	r3, #0
    950a:	d025      	beq.n	9558 <jamming_state+0x60>
		cc2400_strobe(SRFOFF);
    950c:	2064      	movs	r0, #100	; 0x64
    950e:	f000 fba1 	bl	9c54 <cc2400_strobe>
#ifdef UBERTOOTH_ONE
		PAEN_CLR;
    9512:	4b13      	ldr	r3, [pc, #76]	; (9560 <jamming_state+0x68>)
    9514:	2280      	movs	r2, #128	; 0x80
    9516:	601a      	str	r2, [r3, #0]
#endif
		TXLED_CLR;
    9518:	4b12      	ldr	r3, [pc, #72]	; (9564 <jamming_state+0x6c>)
    951a:	f44f 7280 	mov.w	r2, #256	; 0x100
    951e:	601a      	str	r2, [r3, #0]

		// change channel
		state->channel_index = (state->channel_index + 1) % 4;
    9520:	687b      	ldr	r3, [r7, #4]
    9522:	685b      	ldr	r3, [r3, #4]
    9524:	1c5a      	adds	r2, r3, #1
    9526:	4b10      	ldr	r3, [pc, #64]	; (9568 <jamming_state+0x70>)
    9528:	4013      	ands	r3, r2
    952a:	2b00      	cmp	r3, #0
    952c:	da03      	bge.n	9536 <jamming_state+0x3e>
    952e:	3b01      	subs	r3, #1
    9530:	f063 0303 	orn	r3, r3, #3
    9534:	3301      	adds	r3, #1
    9536:	461a      	mov	r2, r3
    9538:	687b      	ldr	r3, [r7, #4]
    953a:	605a      	str	r2, [r3, #4]
		channel = channels[state->channel_index];
    953c:	687b      	ldr	r3, [r7, #4]
    953e:	685b      	ldr	r3, [r3, #4]
    9540:	4a0a      	ldr	r2, [pc, #40]	; (956c <jamming_state+0x74>)
    9542:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
    9546:	4b0a      	ldr	r3, [pc, #40]	; (9570 <jamming_state+0x78>)
    9548:	801a      	strh	r2, [r3, #0]

		state->state = EGO_ST_SLEEP;
    954a:	687b      	ldr	r3, [r7, #4]
    954c:	2203      	movs	r2, #3
    954e:	701a      	strb	r2, [r3, #0]
		sleep_ms_anchor(state, 6);
    9550:	6878      	ldr	r0, [r7, #4]
    9552:	2106      	movs	r1, #6
    9554:	f7ff fd9c 	bl	9090 <sleep_ms_anchor>
	}
}
    9558:	3708      	adds	r7, #8
    955a:	46bd      	mov	sp, r7
    955c:	bd80      	pop	{r7, pc}
    955e:	bf00      	nop
    9560:	2009c05c 	.word	0x2009c05c
    9564:	2009c03c 	.word	0x2009c03c
    9568:	80000003 	.word	0x80000003
    956c:	100008b0 	.word	0x100008b0
    9570:	1000049c 	.word	0x1000049c

00009574 <jam_sleep_state>:

void jam_sleep_state(ego_fsm_state_t *state) {
    9574:	b580      	push	{r7, lr}
    9576:	b082      	sub	sp, #8
    9578:	af00      	add	r7, sp, #0
    957a:	6078      	str	r0, [r7, #4]
	if (sleep_elapsed(state)) {
    957c:	6878      	ldr	r0, [r7, #4]
    957e:	f7ff fd9d 	bl	90bc <sleep_elapsed>
    9582:	4603      	mov	r3, r0
    9584:	2b00      	cmp	r3, #0
    9586:	d009      	beq.n	959c <jam_sleep_state+0x28>
		state->state = EGO_ST_START_RX;
    9588:	687b      	ldr	r3, [r7, #4]
    958a:	2201      	movs	r2, #1
    958c:	701a      	strb	r2, [r3, #0]
		state->timer_active = 1;
    958e:	687b      	ldr	r3, [r7, #4]
    9590:	2201      	movs	r2, #1
    9592:	611a      	str	r2, [r3, #16]
		sleep_ms_anchor(state, 11);
    9594:	6878      	ldr	r0, [r7, #4]
    9596:	210b      	movs	r1, #11
    9598:	f7ff fd7a 	bl	9090 <sleep_ms_anchor>
	}
}
    959c:	3708      	adds	r7, #8
    959e:	46bd      	mov	sp, r7
    95a0:	bd80      	pop	{r7, pc}
    95a2:	bf00      	nop

000095a4 <ego_main>:

void ego_main(ego_mode_t mode) {
    95a4:	b5b0      	push	{r4, r5, r7, lr}
    95a6:	b09e      	sub	sp, #120	; 0x78
    95a8:	af00      	add	r7, sp, #0
    95aa:	4603      	mov	r3, r0
    95ac:	71fb      	strb	r3, [r7, #7]
	ego_st_handler *handler; // set depending on mode
	ego_fsm_state_t state = {
    95ae:	f107 0358 	add.w	r3, r7, #88	; 0x58
    95b2:	2200      	movs	r2, #0
    95b4:	601a      	str	r2, [r3, #0]
    95b6:	3304      	adds	r3, #4
    95b8:	2200      	movs	r2, #0
    95ba:	601a      	str	r2, [r3, #0]
    95bc:	3304      	adds	r3, #4
    95be:	2200      	movs	r2, #0
    95c0:	601a      	str	r2, [r3, #0]
    95c2:	3304      	adds	r3, #4
    95c4:	2200      	movs	r2, #0
    95c6:	601a      	str	r2, [r3, #0]
    95c8:	3304      	adds	r3, #4
    95ca:	2200      	movs	r2, #0
    95cc:	601a      	str	r2, [r3, #0]
    95ce:	3304      	adds	r3, #4
    95d0:	2200      	movs	r2, #0
    95d2:	601a      	str	r2, [r3, #0]
    95d4:	3304      	adds	r3, #4
    95d6:	2200      	movs	r2, #0
    95d8:	601a      	str	r2, [r3, #0]
    95da:	3304      	adds	r3, #4
		.channel_index = 0,
		.timer_active = 0,
	};

	// hopping connection following
	ego_st_handler follow_handler[] = {
    95dc:	4b26      	ldr	r3, [pc, #152]	; (9678 <ego_main+0xd4>)
    95de:	f107 043c 	add.w	r4, r7, #60	; 0x3c
    95e2:	461d      	mov	r5, r3
    95e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    95e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    95e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    95ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		nop_state,
		nop_state,
	};

	// continuous rx on a single channel
	ego_st_handler continuous_rx_handler[] = {
    95f0:	4b22      	ldr	r3, [pc, #136]	; (967c <ego_main+0xd8>)
    95f2:	f107 0424 	add.w	r4, r7, #36	; 0x24
    95f6:	461d      	mov	r5, r3
    95f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    95fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    95fc:	e895 0003 	ldmia.w	r5, {r0, r1}
    9600:	e884 0003 	stmia.w	r4, {r0, r1}
		nop_state,
		nop_state,
	};

	// jamming
	ego_st_handler jam_handler[] = {
    9604:	4b1e      	ldr	r3, [pc, #120]	; (9680 <ego_main+0xdc>)
    9606:	f107 040c 	add.w	r4, r7, #12
    960a:	461d      	mov	r5, r3
    960c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    960e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    9610:	e895 0003 	ldmia.w	r5, {r0, r1}
    9614:	e884 0003 	stmia.w	r4, {r0, r1}
		jam_sleep_state,
		start_jamming_state,
		jamming_state,
	};

	switch (mode) {
    9618:	79fb      	ldrb	r3, [r7, #7]
    961a:	2b01      	cmp	r3, #1
    961c:	d007      	beq.n	962e <ego_main+0x8a>
    961e:	2b02      	cmp	r3, #2
    9620:	d009      	beq.n	9636 <ego_main+0x92>
    9622:	2b00      	cmp	r3, #0
    9624:	d10b      	bne.n	963e <ego_main+0x9a>
		case EGO_FOLLOW:
			handler = follow_handler;
    9626:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    962a:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    962c:	e00b      	b.n	9646 <ego_main+0xa2>
		case EGO_CONTINUOUS_RX:
			handler = continuous_rx_handler;
    962e:	f107 0324 	add.w	r3, r7, #36	; 0x24
    9632:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    9634:	e007      	b.n	9646 <ego_main+0xa2>
#ifdef TX_ENABLE
		case EGO_JAM:
			handler = jam_handler;
    9636:	f107 030c 	add.w	r3, r7, #12
    963a:	677b      	str	r3, [r7, #116]	; 0x74
			break;
    963c:	e003      	b.n	9646 <ego_main+0xa2>
#endif
		default: // should never happen
			requested_mode = MODE_IDLE;
    963e:	4b11      	ldr	r3, [pc, #68]	; (9684 <ego_main+0xe0>)
    9640:	2200      	movs	r2, #0
    9642:	701a      	strb	r2, [r3, #0]
    9644:	e015      	b.n	9672 <ego_main+0xce>
			return;
	}

	ego_init();
    9646:	f7ff fc61 	bl	8f0c <ego_init>

	while (1) {
		if (requested_mode != MODE_EGO)
    964a:	4b0e      	ldr	r3, [pc, #56]	; (9684 <ego_main+0xe0>)
    964c:	781b      	ldrb	r3, [r3, #0]
    964e:	b2db      	uxtb	r3, r3
    9650:	2b0d      	cmp	r3, #13
    9652:	d003      	beq.n	965c <ego_main+0xb8>
			break;
    9654:	bf00      	nop
		handler[state.state](&state);
	}

	ego_deinit();
    9656:	f7ff fc65 	bl	8f24 <ego_deinit>
    965a:	e00a      	b.n	9672 <ego_main+0xce>
	ego_init();

	while (1) {
		if (requested_mode != MODE_EGO)
			break;
		handler[state.state](&state);
    965c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    9660:	009b      	lsls	r3, r3, #2
    9662:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    9664:	4413      	add	r3, r2
    9666:	681b      	ldr	r3, [r3, #0]
    9668:	f107 0258 	add.w	r2, r7, #88	; 0x58
    966c:	4610      	mov	r0, r2
    966e:	4798      	blx	r3
	}
    9670:	e7eb      	b.n	964a <ego_main+0xa6>

	ego_deinit();
}
    9672:	3778      	adds	r7, #120	; 0x78
    9674:	46bd      	mov	sp, r7
    9676:	bdb0      	pop	{r4, r5, r7, pc}
    9678:	0000c1c8 	.word	0x0000c1c8
    967c:	0000c1e4 	.word	0x0000c1e4
    9680:	0000c1fc 	.word	0x0000c1fc
    9684:	10000a3f 	.word	0x10000a3f

00009688 <USB_IRQHandler>:
	
	return fifo_get(&rxfifo, &c) ? c : EOF;
}

void USB_IRQHandler()
{
    9688:	b580      	push	{r7, lr}
    968a:	af00      	add	r7, sp, #0
	USBHwISR();
    968c:	f000 ffb6 	bl	a5fc <USBHwISR>
}
    9690:	bd80      	pop	{r7, pc}
    9692:	bf00      	nop

00009694 <Reset_Handler>:
extern void __libc_init_array(void);
extern int main(void);

/* Reset Handler */
void Reset_Handler(void)
{
    9694:	b580      	push	{r7, lr}
    9696:	b082      	sub	sp, #8
    9698:	af00      	add	r7, sp, #0
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
    969a:	4b12      	ldr	r3, [pc, #72]	; (96e4 <Reset_Handler+0x50>)
    969c:	607b      	str	r3, [r7, #4]
	for(dest = &_data; dest < &_edata; )
    969e:	4b12      	ldr	r3, [pc, #72]	; (96e8 <Reset_Handler+0x54>)
    96a0:	603b      	str	r3, [r7, #0]
    96a2:	e007      	b.n	96b4 <Reset_Handler+0x20>
	{
		*dest++ = *src++;
    96a4:	683b      	ldr	r3, [r7, #0]
    96a6:	1d1a      	adds	r2, r3, #4
    96a8:	603a      	str	r2, [r7, #0]
    96aa:	687a      	ldr	r2, [r7, #4]
    96ac:	1d11      	adds	r1, r2, #4
    96ae:	6079      	str	r1, [r7, #4]
    96b0:	6812      	ldr	r2, [r2, #0]
    96b2:	601a      	str	r2, [r3, #0]
{
    unsigned long *src, *dest;

	// Copy the data segment initializers from flash to SRAM
	src = &_etext;
	for(dest = &_data; dest < &_edata; )
    96b4:	683b      	ldr	r3, [r7, #0]
    96b6:	4a0d      	ldr	r2, [pc, #52]	; (96ec <Reset_Handler+0x58>)
    96b8:	4293      	cmp	r3, r2
    96ba:	d3f3      	bcc.n	96a4 <Reset_Handler+0x10>
	{
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
    96bc:	4b0c      	ldr	r3, [pc, #48]	; (96f0 <Reset_Handler+0x5c>)
    96be:	607b      	str	r3, [r7, #4]
	while (src < &_ebss)
    96c0:	e004      	b.n	96cc <Reset_Handler+0x38>
	{
		*src++ = 0;
    96c2:	687b      	ldr	r3, [r7, #4]
    96c4:	1d1a      	adds	r2, r3, #4
    96c6:	607a      	str	r2, [r7, #4]
    96c8:	2200      	movs	r2, #0
    96ca:	601a      	str	r2, [r3, #0]
		*dest++ = *src++;
	}

	// Initialize the .bss segment of memory to zeros
	src = &_bss;
	while (src < &_ebss)
    96cc:	687b      	ldr	r3, [r7, #4]
    96ce:	4a09      	ldr	r2, [pc, #36]	; (96f4 <Reset_Handler+0x60>)
    96d0:	4293      	cmp	r3, r2
    96d2:	d3f6      	bcc.n	96c2 <Reset_Handler+0x2e>
	{
		*src++ = 0;
	}

    __libc_init_array();
    96d4:	f7fa fd28 	bl	4128 <__libc_init_array>
    
    // Set the vector table location.
    SCB_VTOR = &_interrupt_vector_table;
    96d8:	4b07      	ldr	r3, [pc, #28]	; (96f8 <Reset_Handler+0x64>)
    96da:	4a08      	ldr	r2, [pc, #32]	; (96fc <Reset_Handler+0x68>)
    96dc:	601a      	str	r2, [r3, #0]
    
	main();
    96de:	f7fe fba5 	bl	7e2c <main>

	// In case main() fails, have something to breakpoint
	while (1) {;}
    96e2:	e7fe      	b.n	96e2 <Reset_Handler+0x4e>
    96e4:	0000c260 	.word	0x0000c260
    96e8:	10000020 	.word	0x10000020
    96ec:	1000095e 	.word	0x1000095e
    96f0:	10000960 	.word	0x10000960
    96f4:	10003280 	.word	0x10003280
    96f8:	e000ed08 	.word	0xe000ed08
    96fc:	00004000 	.word	0x00004000

00009700 <ADC_IRQHandler>:
extern unsigned long _StackTop;

extern void Reset_Handler(void);

/* Default interrupt handler */
static void Default_Handler(void) { while(1) {;} }
    9700:	b480      	push	{r7}
    9702:	af00      	add	r7, sp, #0
    9704:	e7fe      	b.n	9704 <ADC_IRQHandler+0x4>
    9706:	bf00      	nop

00009708 <wait>:
 */

#include "ubertooth.h"
/* delay a number of seconds while on internal oscillator (4 MHz) */
void wait(u8 seconds)
{
    9708:	b580      	push	{r7, lr}
    970a:	b082      	sub	sp, #8
    970c:	af00      	add	r7, sp, #0
    970e:	4603      	mov	r3, r0
    9710:	71fb      	strb	r3, [r7, #7]
	wait_us(seconds * 1000000);
    9712:	79fb      	ldrb	r3, [r7, #7]
    9714:	4a04      	ldr	r2, [pc, #16]	; (9728 <wait+0x20>)
    9716:	fb02 f303 	mul.w	r3, r2, r3
    971a:	4618      	mov	r0, r3
    971c:	f000 f818 	bl	9750 <wait_us>
}
    9720:	3708      	adds	r7, #8
    9722:	46bd      	mov	sp, r7
    9724:	bd80      	pop	{r7, pc}
    9726:	bf00      	nop
    9728:	000f4240 	.word	0x000f4240

0000972c <rbit>:
{
	wait_us(ms * 1000);
}

/* efficiently reverse the bits of a 32-bit word */
u32 rbit(u32 value) {
    972c:	b480      	push	{r7}
    972e:	b085      	sub	sp, #20
    9730:	af00      	add	r7, sp, #0
    9732:	6078      	str	r0, [r7, #4]
  u32 result = 0;
    9734:	2300      	movs	r3, #0
    9736:	60fb      	str	r3, [r7, #12]
  asm("rbit %0, %1" : "=r" (result) : "r" (value));
    9738:	687b      	ldr	r3, [r7, #4]
    973a:	fa93 f3a3 	rbit	r3, r3
    973e:	60fb      	str	r3, [r7, #12]
  return result;
    9740:	68fb      	ldr	r3, [r7, #12]
}
    9742:	4618      	mov	r0, r3
    9744:	3714      	adds	r7, #20
    9746:	46bd      	mov	sp, r7
    9748:	f85d 7b04 	ldr.w	r7, [sp], #4
    974c:	4770      	bx	lr
    974e:	bf00      	nop

00009750 <wait_us>:

/* delay a number of microseconds while on internal oscillator (4 MHz) */
/* we only have a resolution of 1000/400, so to the nearest 2.5        */
static volatile u32 wait_us_counter;
void wait_us(u32 us)
{
    9750:	b480      	push	{r7}
    9752:	b083      	sub	sp, #12
    9754:	af00      	add	r7, sp, #0
    9756:	6078      	str	r0, [r7, #4]
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
    9758:	687b      	ldr	r3, [r7, #4]
    975a:	089a      	lsrs	r2, r3, #2
    975c:	687b      	ldr	r3, [r7, #4]
    975e:	08db      	lsrs	r3, r3, #3
    9760:	441a      	add	r2, r3
    9762:	687b      	ldr	r3, [r7, #4]
    9764:	099b      	lsrs	r3, r3, #6
    9766:	441a      	add	r2, r3
    9768:	687b      	ldr	r3, [r7, #4]
    976a:	09db      	lsrs	r3, r3, #7
    976c:	441a      	add	r2, r3
    976e:	687b      	ldr	r3, [r7, #4]
    9770:	0a9b      	lsrs	r3, r3, #10
    9772:	441a      	add	r2, r3
    9774:	687b      	ldr	r3, [r7, #4]
    9776:	0adb      	lsrs	r3, r3, #11
    9778:	4413      	add	r3, r2
{
	/* This is binary multiply by ~0.3999, i.e, multiply by
	   0.011011011b. The loop also contains 6 instructions at -Os, so
	   why this factor works is not at all related to the comment
	   above ;-) */
	wait_us_counter =
    977a:	4a07      	ldr	r2, [pc, #28]	; (9798 <wait_us+0x48>)
    977c:	6013      	str	r3, [r2, #0]
		(us>>2) + (us>>3) + (us>>6) + (us>>7) + (us>>10) + (us>>11);
	while(--wait_us_counter);
    977e:	bf00      	nop
    9780:	4b05      	ldr	r3, [pc, #20]	; (9798 <wait_us+0x48>)
    9782:	681b      	ldr	r3, [r3, #0]
    9784:	3b01      	subs	r3, #1
    9786:	4a04      	ldr	r2, [pc, #16]	; (9798 <wait_us+0x48>)
    9788:	6013      	str	r3, [r2, #0]
    978a:	2b00      	cmp	r3, #0
    978c:	d1f8      	bne.n	9780 <wait_us+0x30>
}
    978e:	370c      	adds	r7, #12
    9790:	46bd      	mov	sp, r7
    9792:	f85d 7b04 	ldr.w	r7, [sp], #4
    9796:	4770      	bx	lr
    9798:	10000a68 	.word	0x10000a68

0000979c <gpio_init>:
/*
 * This should be called very early by every firmware in order to ensure safe
 * operating conditions for the CC2400.
 */
void gpio_init()
{
    979c:	b580      	push	{r7, lr}
    979e:	af00      	add	r7, sp, #0
	/* 
	 * Set all pins for GPIO.  This shouldn't be necessary after a reset, but
	 * we might get called at other times.
	 */
	all_pins_off();
    97a0:	f000 f836 	bl	9810 <all_pins_off>
	FIO2DIR = PIN_SSEL0;
	FIO3DIR = 0;
	FIO4DIR = (PIN_RXLED | PIN_TXLED);
#endif
#ifdef UBERTOOTH_ONE
	FIO0DIR = 0;
    97a4:	4b10      	ldr	r3, [pc, #64]	; (97e8 <gpio_init+0x4c>)
    97a6:	2200      	movs	r2, #0
    97a8:	601a      	str	r2, [r3, #0]
	FIO1DIR = (PIN_USRLED | PIN_RXLED | PIN_TXLED | PIN_CC3V3 |
    97aa:	4b10      	ldr	r3, [pc, #64]	; (97ec <gpio_init+0x50>)
    97ac:	f24c 7212 	movw	r2, #50962	; 0xc712
    97b0:	601a      	str	r2, [r3, #0]
			PIN_RX | PIN_CC1V8 | PIN_BTGR);
	FIO2DIR = (PIN_CSN | PIN_SCLK | PIN_MOSI | PIN_PAEN | PIN_HGM);
    97b2:	4b0f      	ldr	r3, [pc, #60]	; (97f0 <gpio_init+0x54>)
    97b4:	f240 12b1 	movw	r2, #433	; 0x1b1
    97b8:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    97ba:	4b0e      	ldr	r3, [pc, #56]	; (97f4 <gpio_init+0x58>)
    97bc:	2200      	movs	r2, #0
    97be:	601a      	str	r2, [r3, #0]
	FIO4DIR = (PIN_TX | PIN_SSEL1);
    97c0:	4b0d      	ldr	r3, [pc, #52]	; (97f8 <gpio_init+0x5c>)
    97c2:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
    97c6:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
	FIO4DIR = 0;
#endif

	/* set all outputs low */
	FIO0PIN = 0;
    97c8:	4b0c      	ldr	r3, [pc, #48]	; (97fc <gpio_init+0x60>)
    97ca:	2200      	movs	r2, #0
    97cc:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    97ce:	4b0c      	ldr	r3, [pc, #48]	; (9800 <gpio_init+0x64>)
    97d0:	2200      	movs	r2, #0
    97d2:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    97d4:	4b0b      	ldr	r3, [pc, #44]	; (9804 <gpio_init+0x68>)
    97d6:	2200      	movs	r2, #0
    97d8:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    97da:	4b0b      	ldr	r3, [pc, #44]	; (9808 <gpio_init+0x6c>)
    97dc:	2200      	movs	r2, #0
    97de:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    97e0:	4b0a      	ldr	r3, [pc, #40]	; (980c <gpio_init+0x70>)
    97e2:	2200      	movs	r2, #0
    97e4:	601a      	str	r2, [r3, #0]

#ifdef TC13BADGE
	/* R8C_CTL is active low */
	R8C_CTL_SET;
#endif
}
    97e6:	bd80      	pop	{r7, pc}
    97e8:	2009c000 	.word	0x2009c000
    97ec:	2009c020 	.word	0x2009c020
    97f0:	2009c040 	.word	0x2009c040
    97f4:	2009c060 	.word	0x2009c060
    97f8:	2009c080 	.word	0x2009c080
    97fc:	2009c014 	.word	0x2009c014
    9800:	2009c034 	.word	0x2009c034
    9804:	2009c054 	.word	0x2009c054
    9808:	2009c074 	.word	0x2009c074
    980c:	2009c094 	.word	0x2009c094

00009810 <all_pins_off>:

void all_pins_off(void)
{
    9810:	b480      	push	{r7}
    9812:	af00      	add	r7, sp, #0
	/* configure all pins for GPIO */
	PINSEL0 = 0;
    9814:	4b27      	ldr	r3, [pc, #156]	; (98b4 <all_pins_off+0xa4>)
    9816:	2200      	movs	r2, #0
    9818:	601a      	str	r2, [r3, #0]
	PINSEL1 = 0;
    981a:	4b27      	ldr	r3, [pc, #156]	; (98b8 <all_pins_off+0xa8>)
    981c:	2200      	movs	r2, #0
    981e:	601a      	str	r2, [r3, #0]
	PINSEL2 = 0;
    9820:	4b26      	ldr	r3, [pc, #152]	; (98bc <all_pins_off+0xac>)
    9822:	2200      	movs	r2, #0
    9824:	601a      	str	r2, [r3, #0]
	PINSEL3 = 0;
    9826:	4b26      	ldr	r3, [pc, #152]	; (98c0 <all_pins_off+0xb0>)
    9828:	2200      	movs	r2, #0
    982a:	601a      	str	r2, [r3, #0]
	PINSEL4 = 0;
    982c:	4b25      	ldr	r3, [pc, #148]	; (98c4 <all_pins_off+0xb4>)
    982e:	2200      	movs	r2, #0
    9830:	601a      	str	r2, [r3, #0]
	PINSEL7 = 0;
    9832:	4b25      	ldr	r3, [pc, #148]	; (98c8 <all_pins_off+0xb8>)
    9834:	2200      	movs	r2, #0
    9836:	601a      	str	r2, [r3, #0]
	PINSEL9 = 0;
    9838:	4b24      	ldr	r3, [pc, #144]	; (98cc <all_pins_off+0xbc>)
    983a:	2200      	movs	r2, #0
    983c:	601a      	str	r2, [r3, #0]
	PINSEL10 = 0;
    983e:	4b24      	ldr	r3, [pc, #144]	; (98d0 <all_pins_off+0xc0>)
    9840:	2200      	movs	r2, #0
    9842:	601a      	str	r2, [r3, #0]

	/* configure all pins as inputs */
	FIO0DIR = 0;
    9844:	4b23      	ldr	r3, [pc, #140]	; (98d4 <all_pins_off+0xc4>)
    9846:	2200      	movs	r2, #0
    9848:	601a      	str	r2, [r3, #0]
	FIO1DIR = 0;
    984a:	4b23      	ldr	r3, [pc, #140]	; (98d8 <all_pins_off+0xc8>)
    984c:	2200      	movs	r2, #0
    984e:	601a      	str	r2, [r3, #0]
	FIO2DIR = 0;
    9850:	4b22      	ldr	r3, [pc, #136]	; (98dc <all_pins_off+0xcc>)
    9852:	2200      	movs	r2, #0
    9854:	601a      	str	r2, [r3, #0]
	FIO3DIR = 0;
    9856:	4b22      	ldr	r3, [pc, #136]	; (98e0 <all_pins_off+0xd0>)
    9858:	2200      	movs	r2, #0
    985a:	601a      	str	r2, [r3, #0]
	FIO4DIR = 0;
    985c:	4b21      	ldr	r3, [pc, #132]	; (98e4 <all_pins_off+0xd4>)
    985e:	2200      	movs	r2, #0
    9860:	601a      	str	r2, [r3, #0]

	/* pull-up on every pin */
	PINMODE0 = 0;
    9862:	4b21      	ldr	r3, [pc, #132]	; (98e8 <all_pins_off+0xd8>)
    9864:	2200      	movs	r2, #0
    9866:	601a      	str	r2, [r3, #0]
	PINMODE1 = 0;
    9868:	4b20      	ldr	r3, [pc, #128]	; (98ec <all_pins_off+0xdc>)
    986a:	2200      	movs	r2, #0
    986c:	601a      	str	r2, [r3, #0]
	PINMODE2 = 0;
    986e:	4b20      	ldr	r3, [pc, #128]	; (98f0 <all_pins_off+0xe0>)
    9870:	2200      	movs	r2, #0
    9872:	601a      	str	r2, [r3, #0]
	PINMODE3 = 0;
    9874:	4b1f      	ldr	r3, [pc, #124]	; (98f4 <all_pins_off+0xe4>)
    9876:	2200      	movs	r2, #0
    9878:	601a      	str	r2, [r3, #0]
	PINMODE4 = 0;
    987a:	4b1f      	ldr	r3, [pc, #124]	; (98f8 <all_pins_off+0xe8>)
    987c:	2200      	movs	r2, #0
    987e:	601a      	str	r2, [r3, #0]
	PINMODE7 = 0;
    9880:	4b1e      	ldr	r3, [pc, #120]	; (98fc <all_pins_off+0xec>)
    9882:	2200      	movs	r2, #0
    9884:	601a      	str	r2, [r3, #0]
	PINMODE9 = 0;
    9886:	4b1e      	ldr	r3, [pc, #120]	; (9900 <all_pins_off+0xf0>)
    9888:	2200      	movs	r2, #0
    988a:	601a      	str	r2, [r3, #0]

	/* set all outputs low */
	FIO0PIN = 0;
    988c:	4b1d      	ldr	r3, [pc, #116]	; (9904 <all_pins_off+0xf4>)
    988e:	2200      	movs	r2, #0
    9890:	601a      	str	r2, [r3, #0]
	FIO1PIN = 0;
    9892:	4b1d      	ldr	r3, [pc, #116]	; (9908 <all_pins_off+0xf8>)
    9894:	2200      	movs	r2, #0
    9896:	601a      	str	r2, [r3, #0]
	FIO2PIN = 0;
    9898:	4b1c      	ldr	r3, [pc, #112]	; (990c <all_pins_off+0xfc>)
    989a:	2200      	movs	r2, #0
    989c:	601a      	str	r2, [r3, #0]
	FIO3PIN = 0;
    989e:	4b1c      	ldr	r3, [pc, #112]	; (9910 <all_pins_off+0x100>)
    98a0:	2200      	movs	r2, #0
    98a2:	601a      	str	r2, [r3, #0]
	FIO4PIN = 0;
    98a4:	4b1b      	ldr	r3, [pc, #108]	; (9914 <all_pins_off+0x104>)
    98a6:	2200      	movs	r2, #0
    98a8:	601a      	str	r2, [r3, #0]
}
    98aa:	46bd      	mov	sp, r7
    98ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    98b0:	4770      	bx	lr
    98b2:	bf00      	nop
    98b4:	4002c000 	.word	0x4002c000
    98b8:	4002c004 	.word	0x4002c004
    98bc:	4002c008 	.word	0x4002c008
    98c0:	4002c00c 	.word	0x4002c00c
    98c4:	4002c010 	.word	0x4002c010
    98c8:	4002c01c 	.word	0x4002c01c
    98cc:	4002c024 	.word	0x4002c024
    98d0:	4002c028 	.word	0x4002c028
    98d4:	2009c000 	.word	0x2009c000
    98d8:	2009c020 	.word	0x2009c020
    98dc:	2009c040 	.word	0x2009c040
    98e0:	2009c060 	.word	0x2009c060
    98e4:	2009c080 	.word	0x2009c080
    98e8:	4002c040 	.word	0x4002c040
    98ec:	4002c044 	.word	0x4002c044
    98f0:	4002c048 	.word	0x4002c048
    98f4:	4002c04c 	.word	0x4002c04c
    98f8:	4002c050 	.word	0x4002c050
    98fc:	4002c05c 	.word	0x4002c05c
    9900:	4002c064 	.word	0x4002c064
    9904:	2009c014 	.word	0x2009c014
    9908:	2009c034 	.word	0x2009c034
    990c:	2009c054 	.word	0x2009c054
    9910:	2009c074 	.word	0x2009c074
    9914:	2009c094 	.word	0x2009c094

00009918 <ubertooth_init>:
/*
 * Every application that uses the main oscillator (including any that use both
 * USB and the CC2400) should start with this.
 */
void ubertooth_init()
{
    9918:	b580      	push	{r7, lr}
    991a:	af00      	add	r7, sp, #0
	gpio_init();
    991c:	f7ff ff3e 	bl	979c <gpio_init>
	cc2400_init();
    9920:	f000 f860 	bl	99e4 <cc2400_init>
	clock_start();
    9924:	f000 f9c2 	bl	9cac <clock_start>
}
    9928:	bd80      	pop	{r7, pc}
    992a:	bf00      	nop

0000992c <dio_ssp_init>:

/* configure SSP for CC2400's secondary serial data interface */
void dio_ssp_init()
{
    992c:	b480      	push	{r7}
    992e:	af00      	add	r7, sp, #0
	/* set P1.18 as MOSI0 */
	PINSEL1 = (PINSEL1 & ~(3 << 4)) | (2 << 4);
#endif
#if defined UBERTOOTH_ONE || defined TC13BADGE
	/* set P0.7 as SCK1 */
	PINSEL0 = (PINSEL0 & ~(3 << 14)) | (2 << 14);
    9930:	4a16      	ldr	r2, [pc, #88]	; (998c <dio_ssp_init+0x60>)
    9932:	4b16      	ldr	r3, [pc, #88]	; (998c <dio_ssp_init+0x60>)
    9934:	681b      	ldr	r3, [r3, #0]
    9936:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
    993a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    993e:	6013      	str	r3, [r2, #0]

	/* set P0.6 as SSEL1 */
	PINSEL0 = (PINSEL0 & ~(3 << 12)) | (2 << 12);
    9940:	4a12      	ldr	r2, [pc, #72]	; (998c <dio_ssp_init+0x60>)
    9942:	4b12      	ldr	r3, [pc, #72]	; (998c <dio_ssp_init+0x60>)
    9944:	681b      	ldr	r3, [r3, #0]
    9946:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
    994a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    994e:	6013      	str	r3, [r2, #0]

	/* set P0.8 as MISO1 */
	PINSEL0 = (PINSEL0 & ~(3 << 16)) | (2 << 16);
    9950:	4a0e      	ldr	r2, [pc, #56]	; (998c <dio_ssp_init+0x60>)
    9952:	4b0e      	ldr	r3, [pc, #56]	; (998c <dio_ssp_init+0x60>)
    9954:	681b      	ldr	r3, [r3, #0]
    9956:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    995a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    995e:	6013      	str	r3, [r2, #0]

	/* set P0.9 as MOSI1 */
	PINSEL0 = (PINSEL0 & ~(3 << 18)) | (2 << 18);
    9960:	4a0a      	ldr	r2, [pc, #40]	; (998c <dio_ssp_init+0x60>)
    9962:	4b0a      	ldr	r3, [pc, #40]	; (998c <dio_ssp_init+0x60>)
    9964:	681b      	ldr	r3, [r3, #0]
    9966:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    996a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    996e:	6013      	str	r3, [r2, #0]
	 * interface.  Since the CC2400 doesn't have a slave select output, we
	 * control it with this.  DIO_SSEL should already be configured by
	 * gpio_init().  We set it high by default because it is an active low
	 * signal.
	 */
	DIO_SSEL_SET;
    9970:	4b07      	ldr	r3, [pc, #28]	; (9990 <dio_ssp_init+0x64>)
    9972:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9976:	601a      	str	r2, [r3, #0]

	/* configure DIO_SSP */
	DIO_SSP_CR0 = (0x7 /* 8 bit transfer */ | SSPCR0_CPOL | SSPCR0_CPHA);
    9978:	4b06      	ldr	r3, [pc, #24]	; (9994 <dio_ssp_init+0x68>)
    997a:	22c7      	movs	r2, #199	; 0xc7
    997c:	601a      	str	r2, [r3, #0]
	DIO_SSP_CR1 = (SSPCR1_MS | SSPCR1_SOD);
    997e:	4b06      	ldr	r3, [pc, #24]	; (9998 <dio_ssp_init+0x6c>)
    9980:	220c      	movs	r2, #12
    9982:	601a      	str	r2, [r3, #0]
}
    9984:	46bd      	mov	sp, r7
    9986:	f85d 7b04 	ldr.w	r7, [sp], #4
    998a:	4770      	bx	lr
    998c:	4002c000 	.word	0x4002c000
    9990:	2009c098 	.word	0x2009c098
    9994:	40030000 	.word	0x40030000
    9998:	40030004 	.word	0x40030004

0000999c <atest_init>:

void atest_init()
{
    999c:	b480      	push	{r7}
    999e:	af00      	add	r7, sp, #0
	 * ADC can optionally be configured for ATEST1 and ATEST2, but for now we
	 * set them as floating inputs.
	 */

	/* P0.25 is ATEST1, P0.26 is ATEST2 */
	PINSEL1 &= ~((0x3 << 20) | (0x3 << 18)); // set as GPIO
    99a0:	4a0d      	ldr	r2, [pc, #52]	; (99d8 <atest_init+0x3c>)
    99a2:	4b0d      	ldr	r3, [pc, #52]	; (99d8 <atest_init+0x3c>)
    99a4:	681b      	ldr	r3, [r3, #0]
    99a6:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
    99aa:	6013      	str	r3, [r2, #0]
	FIO0DIR &= ~(0x3 << 25); // set as input
    99ac:	4a0b      	ldr	r2, [pc, #44]	; (99dc <atest_init+0x40>)
    99ae:	4b0b      	ldr	r3, [pc, #44]	; (99dc <atest_init+0x40>)
    99b0:	681b      	ldr	r3, [r3, #0]
    99b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
    99b6:	6013      	str	r3, [r2, #0]
	PINMODE1 |= (0x5 << 19); // no pull-up/pull-down
    99b8:	4a09      	ldr	r2, [pc, #36]	; (99e0 <atest_init+0x44>)
    99ba:	4b09      	ldr	r3, [pc, #36]	; (99e0 <atest_init+0x44>)
    99bc:	681b      	ldr	r3, [r3, #0]
    99be:	f443 1320 	orr.w	r3, r3, #2621440	; 0x280000
    99c2:	6013      	str	r3, [r2, #0]
	PINMODE1 &= ~(0x5 << 18); // no pull-up/pull-down
    99c4:	4a06      	ldr	r2, [pc, #24]	; (99e0 <atest_init+0x44>)
    99c6:	4b06      	ldr	r3, [pc, #24]	; (99e0 <atest_init+0x44>)
    99c8:	681b      	ldr	r3, [r3, #0]
    99ca:	f423 13a0 	bic.w	r3, r3, #1310720	; 0x140000
    99ce:	6013      	str	r3, [r2, #0]
}
    99d0:	46bd      	mov	sp, r7
    99d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    99d6:	4770      	bx	lr
    99d8:	4002c004 	.word	0x4002c004
    99dc:	2009c000 	.word	0x2009c000
    99e0:	4002c044 	.word	0x4002c044

000099e4 <cc2400_init>:

void cc2400_init()
{
    99e4:	b580      	push	{r7, lr}
    99e6:	af00      	add	r7, sp, #0
	FIO1PIN = 0; /* assuming we have already asserted R8C_CTL low */
	FIO2PIN = 0;
	FIO3PIN = 0;
	FIO4PIN = 0;
#else
	atest_init();
    99e8:	f7ff ffd8 	bl	999c <atest_init>
#endif

	/* activate 1V8 supply for CC2400 */
	CC1V8_SET;
    99ec:	4b09      	ldr	r3, [pc, #36]	; (9a14 <cc2400_init+0x30>)
    99ee:	f44f 7200 	mov.w	r2, #512	; 0x200
    99f2:	601a      	str	r2, [r3, #0]
	wait_us(50);
    99f4:	2032      	movs	r0, #50	; 0x32
    99f6:	f7ff feab 	bl	9750 <wait_us>

	/* CSN (slave select) is active low */
	CSN_SET;
    99fa:	4b07      	ldr	r3, [pc, #28]	; (9a18 <cc2400_init+0x34>)
    99fc:	2220      	movs	r2, #32
    99fe:	601a      	str	r2, [r3, #0]

	/* activate 3V3 supply for CC2400 IO */
	CC3V3_SET;
    9a00:	4b04      	ldr	r3, [pc, #16]	; (9a14 <cc2400_init+0x30>)
    9a02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    9a06:	601a      	str	r2, [r3, #0]

	/* initialise various cc2400 settings - see datasheet pg63 */
	cc2400_set(MANAND,  0x7fff);
    9a08:	200d      	movs	r0, #13
    9a0a:	f647 71ff 	movw	r1, #32767	; 0x7fff
    9a0e:	f000 f85f 	bl	9ad0 <cc2400_set>
}
    9a12:	bd80      	pop	{r7, pc}
    9a14:	2009c038 	.word	0x2009c038
    9a18:	2009c058 	.word	0x2009c058

00009a1c <cc2400_spi>:
 * 2. We're saving the second SPI peripheral for an expansion port.
 * 3. The CC2400 needs CSN held low for the entire transaction which the
 *    LPC17xx SPI peripheral won't do without some workaround anyway.
 */
u32 cc2400_spi(u8 len, u32 data)
{
    9a1c:	b480      	push	{r7}
    9a1e:	b085      	sub	sp, #20
    9a20:	af00      	add	r7, sp, #0
    9a22:	4603      	mov	r3, r0
    9a24:	6039      	str	r1, [r7, #0]
    9a26:	71fb      	strb	r3, [r7, #7]
	u32 msb = 1 << (len - 1);
    9a28:	79fb      	ldrb	r3, [r7, #7]
    9a2a:	3b01      	subs	r3, #1
    9a2c:	2201      	movs	r2, #1
    9a2e:	fa02 f303 	lsl.w	r3, r2, r3
    9a32:	60fb      	str	r3, [r7, #12]

	/* start transaction by dropping CSN */
	CSN_CLR;
    9a34:	4b18      	ldr	r3, [pc, #96]	; (9a98 <cc2400_spi+0x7c>)
    9a36:	2220      	movs	r2, #32
    9a38:	601a      	str	r2, [r3, #0]

	while (len--) {
    9a3a:	e01e      	b.n	9a7a <cc2400_spi+0x5e>
		if (data & msb)
    9a3c:	683a      	ldr	r2, [r7, #0]
    9a3e:	68fb      	ldr	r3, [r7, #12]
    9a40:	4013      	ands	r3, r2
    9a42:	2b00      	cmp	r3, #0
    9a44:	d003      	beq.n	9a4e <cc2400_spi+0x32>
			MOSI_SET;
    9a46:	4b15      	ldr	r3, [pc, #84]	; (9a9c <cc2400_spi+0x80>)
    9a48:	2201      	movs	r2, #1
    9a4a:	601a      	str	r2, [r3, #0]
    9a4c:	e002      	b.n	9a54 <cc2400_spi+0x38>
		else
			MOSI_CLR;
    9a4e:	4b12      	ldr	r3, [pc, #72]	; (9a98 <cc2400_spi+0x7c>)
    9a50:	2201      	movs	r2, #1
    9a52:	601a      	str	r2, [r3, #0]
		data <<= 1;
    9a54:	683b      	ldr	r3, [r7, #0]
    9a56:	005b      	lsls	r3, r3, #1
    9a58:	603b      	str	r3, [r7, #0]

		SCLK_SET;
    9a5a:	4b10      	ldr	r3, [pc, #64]	; (9a9c <cc2400_spi+0x80>)
    9a5c:	2210      	movs	r2, #16
    9a5e:	601a      	str	r2, [r3, #0]
		if (MISO)
    9a60:	4b0f      	ldr	r3, [pc, #60]	; (9aa0 <cc2400_spi+0x84>)
    9a62:	681b      	ldr	r3, [r3, #0]
    9a64:	f003 0302 	and.w	r3, r3, #2
    9a68:	2b00      	cmp	r3, #0
    9a6a:	d003      	beq.n	9a74 <cc2400_spi+0x58>
			data |= 1;
    9a6c:	683b      	ldr	r3, [r7, #0]
    9a6e:	f043 0301 	orr.w	r3, r3, #1
    9a72:	603b      	str	r3, [r7, #0]

		SCLK_CLR;
    9a74:	4b08      	ldr	r3, [pc, #32]	; (9a98 <cc2400_spi+0x7c>)
    9a76:	2210      	movs	r2, #16
    9a78:	601a      	str	r2, [r3, #0]
	u32 msb = 1 << (len - 1);

	/* start transaction by dropping CSN */
	CSN_CLR;

	while (len--) {
    9a7a:	79fb      	ldrb	r3, [r7, #7]
    9a7c:	1e5a      	subs	r2, r3, #1
    9a7e:	71fa      	strb	r2, [r7, #7]
    9a80:	2b00      	cmp	r3, #0
    9a82:	d1db      	bne.n	9a3c <cc2400_spi+0x20>

		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    9a84:	4b05      	ldr	r3, [pc, #20]	; (9a9c <cc2400_spi+0x80>)
    9a86:	2220      	movs	r2, #32
    9a88:	601a      	str	r2, [r3, #0]

	return data;
    9a8a:	683b      	ldr	r3, [r7, #0]
}
    9a8c:	4618      	mov	r0, r3
    9a8e:	3714      	adds	r7, #20
    9a90:	46bd      	mov	sp, r7
    9a92:	f85d 7b04 	ldr.w	r7, [sp], #4
    9a96:	4770      	bx	lr
    9a98:	2009c05c 	.word	0x2009c05c
    9a9c:	2009c058 	.word	0x2009c058
    9aa0:	2009c054 	.word	0x2009c054

00009aa4 <cc2400_get>:

/* read 16 bit value from a register */
u16 cc2400_get(u8 reg)
{
    9aa4:	b580      	push	{r7, lr}
    9aa6:	b084      	sub	sp, #16
    9aa8:	af00      	add	r7, sp, #0
    9aaa:	4603      	mov	r3, r0
    9aac:	71fb      	strb	r3, [r7, #7]
	u32 in;

	u32 out = (reg | 0x80) << 16;
    9aae:	79fb      	ldrb	r3, [r7, #7]
    9ab0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9ab4:	b2db      	uxtb	r3, r3
    9ab6:	041b      	lsls	r3, r3, #16
    9ab8:	60fb      	str	r3, [r7, #12]
	in = cc2400_spi(24, out);
    9aba:	2018      	movs	r0, #24
    9abc:	68f9      	ldr	r1, [r7, #12]
    9abe:	f7ff ffad 	bl	9a1c <cc2400_spi>
    9ac2:	60b8      	str	r0, [r7, #8]
	return in & 0xFFFF;
    9ac4:	68bb      	ldr	r3, [r7, #8]
    9ac6:	b29b      	uxth	r3, r3
}
    9ac8:	4618      	mov	r0, r3
    9aca:	3710      	adds	r7, #16
    9acc:	46bd      	mov	sp, r7
    9ace:	bd80      	pop	{r7, pc}

00009ad0 <cc2400_set>:

/* write 16 bit value to a register */
void cc2400_set(u8 reg, u16 val)
{
    9ad0:	b580      	push	{r7, lr}
    9ad2:	b084      	sub	sp, #16
    9ad4:	af00      	add	r7, sp, #0
    9ad6:	4603      	mov	r3, r0
    9ad8:	460a      	mov	r2, r1
    9ada:	71fb      	strb	r3, [r7, #7]
    9adc:	4613      	mov	r3, r2
    9ade:	80bb      	strh	r3, [r7, #4]
	u32 out = (reg << 16) | val;
    9ae0:	79fb      	ldrb	r3, [r7, #7]
    9ae2:	041a      	lsls	r2, r3, #16
    9ae4:	88bb      	ldrh	r3, [r7, #4]
    9ae6:	4313      	orrs	r3, r2
    9ae8:	60fb      	str	r3, [r7, #12]
	cc2400_spi(24, out);
    9aea:	2018      	movs	r0, #24
    9aec:	68f9      	ldr	r1, [r7, #12]
    9aee:	f7ff ff95 	bl	9a1c <cc2400_spi>
}
    9af2:	3710      	adds	r7, #16
    9af4:	46bd      	mov	sp, r7
    9af6:	bd80      	pop	{r7, pc}

00009af8 <cc2400_get8>:

/* read 8 bit value from a register */
u8 cc2400_get8(u8 reg)
{
    9af8:	b580      	push	{r7, lr}
    9afa:	b084      	sub	sp, #16
    9afc:	af00      	add	r7, sp, #0
    9afe:	4603      	mov	r3, r0
    9b00:	71fb      	strb	r3, [r7, #7]
	u16 in;

	u16 out = (reg | 0x80) << 8;
    9b02:	79fb      	ldrb	r3, [r7, #7]
    9b04:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9b08:	b2db      	uxtb	r3, r3
    9b0a:	b29b      	uxth	r3, r3
    9b0c:	021b      	lsls	r3, r3, #8
    9b0e:	81fb      	strh	r3, [r7, #14]
	in = cc2400_spi(16, out);
    9b10:	89fb      	ldrh	r3, [r7, #14]
    9b12:	2010      	movs	r0, #16
    9b14:	4619      	mov	r1, r3
    9b16:	f7ff ff81 	bl	9a1c <cc2400_spi>
    9b1a:	4603      	mov	r3, r0
    9b1c:	81bb      	strh	r3, [r7, #12]
	return in & 0xFF;
    9b1e:	89bb      	ldrh	r3, [r7, #12]
    9b20:	b2db      	uxtb	r3, r3
}
    9b22:	4618      	mov	r0, r3
    9b24:	3710      	adds	r7, #16
    9b26:	46bd      	mov	sp, r7
    9b28:	bd80      	pop	{r7, pc}
    9b2a:	bf00      	nop

00009b2c <cc2400_set8>:

/* write 8 bit value to a register */
void cc2400_set8(u8 reg, u8 val)
{
    9b2c:	b580      	push	{r7, lr}
    9b2e:	b084      	sub	sp, #16
    9b30:	af00      	add	r7, sp, #0
    9b32:	4603      	mov	r3, r0
    9b34:	460a      	mov	r2, r1
    9b36:	71fb      	strb	r3, [r7, #7]
    9b38:	4613      	mov	r3, r2
    9b3a:	71bb      	strb	r3, [r7, #6]
	u32 out = (reg << 8) | val;
    9b3c:	79fb      	ldrb	r3, [r7, #7]
    9b3e:	021a      	lsls	r2, r3, #8
    9b40:	79bb      	ldrb	r3, [r7, #6]
    9b42:	4313      	orrs	r3, r2
    9b44:	60fb      	str	r3, [r7, #12]
	cc2400_spi(16, out);
    9b46:	2010      	movs	r0, #16
    9b48:	68f9      	ldr	r1, [r7, #12]
    9b4a:	f7ff ff67 	bl	9a1c <cc2400_spi>
}
    9b4e:	3710      	adds	r7, #16
    9b50:	46bd      	mov	sp, r7
    9b52:	bd80      	pop	{r7, pc}

00009b54 <cc2400_spi_buf>:

/* write multiple bytes to SPI */
void cc2400_spi_buf(u8 reg, u8 len, u8 *data)
{
    9b54:	b480      	push	{r7}
    9b56:	b085      	sub	sp, #20
    9b58:	af00      	add	r7, sp, #0
    9b5a:	4603      	mov	r3, r0
    9b5c:	603a      	str	r2, [r7, #0]
    9b5e:	71fb      	strb	r3, [r7, #7]
    9b60:	460b      	mov	r3, r1
    9b62:	71bb      	strb	r3, [r7, #6]
	u8 msb = 1 << 7;
    9b64:	2380      	movs	r3, #128	; 0x80
    9b66:	733b      	strb	r3, [r7, #12]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;
    9b68:	4b33      	ldr	r3, [pc, #204]	; (9c38 <cc2400_spi_buf+0xe4>)
    9b6a:	2220      	movs	r2, #32
    9b6c:	601a      	str	r2, [r3, #0]

	for (i = 0; i < 8; ++i) {
    9b6e:	2300      	movs	r3, #0
    9b70:	73fb      	strb	r3, [r7, #15]
    9b72:	e018      	b.n	9ba6 <cc2400_spi_buf+0x52>
		if (reg & msb)
    9b74:	79fa      	ldrb	r2, [r7, #7]
    9b76:	7b3b      	ldrb	r3, [r7, #12]
    9b78:	4013      	ands	r3, r2
    9b7a:	b2db      	uxtb	r3, r3
    9b7c:	2b00      	cmp	r3, #0
    9b7e:	d003      	beq.n	9b88 <cc2400_spi_buf+0x34>
			MOSI_SET;
    9b80:	4b2e      	ldr	r3, [pc, #184]	; (9c3c <cc2400_spi_buf+0xe8>)
    9b82:	2201      	movs	r2, #1
    9b84:	601a      	str	r2, [r3, #0]
    9b86:	e002      	b.n	9b8e <cc2400_spi_buf+0x3a>
		else
			MOSI_CLR;
    9b88:	4b2b      	ldr	r3, [pc, #172]	; (9c38 <cc2400_spi_buf+0xe4>)
    9b8a:	2201      	movs	r2, #1
    9b8c:	601a      	str	r2, [r3, #0]
		reg <<= 1;
    9b8e:	79fb      	ldrb	r3, [r7, #7]
    9b90:	005b      	lsls	r3, r3, #1
    9b92:	71fb      	strb	r3, [r7, #7]
		SCLK_SET;
    9b94:	4b29      	ldr	r3, [pc, #164]	; (9c3c <cc2400_spi_buf+0xe8>)
    9b96:	2210      	movs	r2, #16
    9b98:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    9b9a:	4b27      	ldr	r3, [pc, #156]	; (9c38 <cc2400_spi_buf+0xe4>)
    9b9c:	2210      	movs	r2, #16
    9b9e:	601a      	str	r2, [r3, #0]
	u8 i, j, temp;

	/* start transaction by dropping CSN */
	CSN_CLR;

	for (i = 0; i < 8; ++i) {
    9ba0:	7bfb      	ldrb	r3, [r7, #15]
    9ba2:	3301      	adds	r3, #1
    9ba4:	73fb      	strb	r3, [r7, #15]
    9ba6:	7bfb      	ldrb	r3, [r7, #15]
    9ba8:	2b07      	cmp	r3, #7
    9baa:	d9e3      	bls.n	9b74 <cc2400_spi_buf+0x20>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    9bac:	2300      	movs	r3, #0
    9bae:	73fb      	strb	r3, [r7, #15]
    9bb0:	e026      	b.n	9c00 <cc2400_spi_buf+0xac>
		temp = data[i];
    9bb2:	7bfb      	ldrb	r3, [r7, #15]
    9bb4:	683a      	ldr	r2, [r7, #0]
    9bb6:	4413      	add	r3, r2
    9bb8:	781b      	ldrb	r3, [r3, #0]
    9bba:	737b      	strb	r3, [r7, #13]
		for (j = 0; j < 8; ++j) {
    9bbc:	2300      	movs	r3, #0
    9bbe:	73bb      	strb	r3, [r7, #14]
    9bc0:	e018      	b.n	9bf4 <cc2400_spi_buf+0xa0>
			if (temp & msb)
    9bc2:	7b7a      	ldrb	r2, [r7, #13]
    9bc4:	7b3b      	ldrb	r3, [r7, #12]
    9bc6:	4013      	ands	r3, r2
    9bc8:	b2db      	uxtb	r3, r3
    9bca:	2b00      	cmp	r3, #0
    9bcc:	d003      	beq.n	9bd6 <cc2400_spi_buf+0x82>
				MOSI_SET;
    9bce:	4b1b      	ldr	r3, [pc, #108]	; (9c3c <cc2400_spi_buf+0xe8>)
    9bd0:	2201      	movs	r2, #1
    9bd2:	601a      	str	r2, [r3, #0]
    9bd4:	e002      	b.n	9bdc <cc2400_spi_buf+0x88>
			else
				MOSI_CLR;
    9bd6:	4b18      	ldr	r3, [pc, #96]	; (9c38 <cc2400_spi_buf+0xe4>)
    9bd8:	2201      	movs	r2, #1
    9bda:	601a      	str	r2, [r3, #0]
			temp <<= 1;
    9bdc:	7b7b      	ldrb	r3, [r7, #13]
    9bde:	005b      	lsls	r3, r3, #1
    9be0:	737b      	strb	r3, [r7, #13]
			SCLK_SET;
    9be2:	4b16      	ldr	r3, [pc, #88]	; (9c3c <cc2400_spi_buf+0xe8>)
    9be4:	2210      	movs	r2, #16
    9be6:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
    9be8:	4b13      	ldr	r3, [pc, #76]	; (9c38 <cc2400_spi_buf+0xe4>)
    9bea:	2210      	movs	r2, #16
    9bec:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
		temp = data[i];
		for (j = 0; j < 8; ++j) {
    9bee:	7bbb      	ldrb	r3, [r7, #14]
    9bf0:	3301      	adds	r3, #1
    9bf2:	73bb      	strb	r3, [r7, #14]
    9bf4:	7bbb      	ldrb	r3, [r7, #14]
    9bf6:	2b07      	cmp	r3, #7
    9bf8:	d9e3      	bls.n	9bc2 <cc2400_spi_buf+0x6e>
		reg <<= 1;
		SCLK_SET;
		SCLK_CLR;
	}

	for (i = 0; i < len; ++i) {
    9bfa:	7bfb      	ldrb	r3, [r7, #15]
    9bfc:	3301      	adds	r3, #1
    9bfe:	73fb      	strb	r3, [r7, #15]
    9c00:	7bfa      	ldrb	r2, [r7, #15]
    9c02:	79bb      	ldrb	r3, [r7, #6]
    9c04:	429a      	cmp	r2, r3
    9c06:	d3d4      	bcc.n	9bb2 <cc2400_spi_buf+0x5e>
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    9c08:	2300      	movs	r3, #0
    9c0a:	73fb      	strb	r3, [r7, #15]
    9c0c:	e008      	b.n	9c20 <cc2400_spi_buf+0xcc>
		SCLK_SET;
    9c0e:	4b0b      	ldr	r3, [pc, #44]	; (9c3c <cc2400_spi_buf+0xe8>)
    9c10:	2210      	movs	r2, #16
    9c12:	601a      	str	r2, [r3, #0]
		SCLK_CLR;
    9c14:	4b08      	ldr	r3, [pc, #32]	; (9c38 <cc2400_spi_buf+0xe4>)
    9c16:	2210      	movs	r2, #16
    9c18:	601a      	str	r2, [r3, #0]
			SCLK_CLR;
		}
	}

	// this is necessary to clock in the last byte
	for (i = 0; i < 8; ++i) {
    9c1a:	7bfb      	ldrb	r3, [r7, #15]
    9c1c:	3301      	adds	r3, #1
    9c1e:	73fb      	strb	r3, [r7, #15]
    9c20:	7bfb      	ldrb	r3, [r7, #15]
    9c22:	2b07      	cmp	r3, #7
    9c24:	d9f3      	bls.n	9c0e <cc2400_spi_buf+0xba>
		SCLK_SET;
		SCLK_CLR;
	}

	/* end transaction by raising CSN */
	CSN_SET;
    9c26:	4b05      	ldr	r3, [pc, #20]	; (9c3c <cc2400_spi_buf+0xe8>)
    9c28:	2220      	movs	r2, #32
    9c2a:	601a      	str	r2, [r3, #0]
}
    9c2c:	3714      	adds	r7, #20
    9c2e:	46bd      	mov	sp, r7
    9c30:	f85d 7b04 	ldr.w	r7, [sp], #4
    9c34:	4770      	bx	lr
    9c36:	bf00      	nop
    9c38:	2009c05c 	.word	0x2009c05c
    9c3c:	2009c058 	.word	0x2009c058

00009c40 <cc2400_status>:

/* get the status */
u8 cc2400_status()
{
    9c40:	b580      	push	{r7, lr}
    9c42:	af00      	add	r7, sp, #0
	return cc2400_spi(8, 0);
    9c44:	2008      	movs	r0, #8
    9c46:	2100      	movs	r1, #0
    9c48:	f7ff fee8 	bl	9a1c <cc2400_spi>
    9c4c:	4603      	mov	r3, r0
    9c4e:	b2db      	uxtb	r3, r3
}
    9c50:	4618      	mov	r0, r3
    9c52:	bd80      	pop	{r7, pc}

00009c54 <cc2400_strobe>:

/* strobe register, return status */
u8 cc2400_strobe(u8 reg)
{
    9c54:	b580      	push	{r7, lr}
    9c56:	b082      	sub	sp, #8
    9c58:	af00      	add	r7, sp, #0
    9c5a:	4603      	mov	r3, r0
    9c5c:	71fb      	strb	r3, [r7, #7]
	return cc2400_spi(8, reg);
    9c5e:	79fb      	ldrb	r3, [r7, #7]
    9c60:	2008      	movs	r0, #8
    9c62:	4619      	mov	r1, r3
    9c64:	f7ff feda 	bl	9a1c <cc2400_spi>
    9c68:	4603      	mov	r3, r0
    9c6a:	b2db      	uxtb	r3, r3
}
    9c6c:	4618      	mov	r0, r3
    9c6e:	3708      	adds	r7, #8
    9c70:	46bd      	mov	sp, r7
    9c72:	bd80      	pop	{r7, pc}

00009c74 <cc2400_reset>:
/*
 * Warning: This should only be called when running on the internal oscillator.
 * Otherwise use clock_start().
 */
void cc2400_reset()
{
    9c74:	b580      	push	{r7, lr}
    9c76:	af00      	add	r7, sp, #0
	cc2400_set(MAIN, 0x0000);
    9c78:	2000      	movs	r0, #0
    9c7a:	2100      	movs	r1, #0
    9c7c:	f7ff ff28 	bl	9ad0 <cc2400_set>
	while (cc2400_get(MAIN) != 0x0000);
    9c80:	bf00      	nop
    9c82:	2000      	movs	r0, #0
    9c84:	f7ff ff0e 	bl	9aa4 <cc2400_get>
    9c88:	4603      	mov	r3, r0
    9c8a:	2b00      	cmp	r3, #0
    9c8c:	d1f9      	bne.n	9c82 <cc2400_reset+0xe>
	cc2400_set(MAIN, 0x8000);
    9c8e:	2000      	movs	r0, #0
    9c90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    9c94:	f7ff ff1c 	bl	9ad0 <cc2400_set>
	while (cc2400_get(MAIN) != 0x8000);
    9c98:	bf00      	nop
    9c9a:	2000      	movs	r0, #0
    9c9c:	f7ff ff02 	bl	9aa4 <cc2400_get>
    9ca0:	4603      	mov	r3, r0
    9ca2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    9ca6:	d1f8      	bne.n	9c9a <cc2400_reset+0x26>
}
    9ca8:	bd80      	pop	{r7, pc}
    9caa:	bf00      	nop

00009cac <clock_start>:

/* activate the CC2400's 16 MHz oscillator and sync LPC175x to it */
void clock_start()
{
    9cac:	b580      	push	{r7, lr}
    9cae:	af00      	add	r7, sp, #0
	/* configure flash accelerator for higher clock rate */
	FLASHCFG = (0x03A | (FLASHTIM << 12));
    9cb0:	4b5e      	ldr	r3, [pc, #376]	; (9e2c <clock_start+0x180>)
    9cb2:	f244 023a 	movw	r2, #16442	; 0x403a
    9cb6:	601a      	str	r2, [r3, #0]

	/* switch to the internal oscillator if necessary */
	CLKSRCSEL = 0;
    9cb8:	4b5d      	ldr	r3, [pc, #372]	; (9e30 <clock_start+0x184>)
    9cba:	2200      	movs	r2, #0
    9cbc:	601a      	str	r2, [r3, #0]

	/* disconnect PLL0 */
	PLL0CON &= ~PLL0CON_PLLC0;
    9cbe:	4a5d      	ldr	r2, [pc, #372]	; (9e34 <clock_start+0x188>)
    9cc0:	4b5c      	ldr	r3, [pc, #368]	; (9e34 <clock_start+0x188>)
    9cc2:	681b      	ldr	r3, [r3, #0]
    9cc4:	f023 0302 	bic.w	r3, r3, #2
    9cc8:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9cca:	4b5b      	ldr	r3, [pc, #364]	; (9e38 <clock_start+0x18c>)
    9ccc:	22aa      	movs	r2, #170	; 0xaa
    9cce:	601a      	str	r2, [r3, #0]
    9cd0:	4b59      	ldr	r3, [pc, #356]	; (9e38 <clock_start+0x18c>)
    9cd2:	2255      	movs	r2, #85	; 0x55
    9cd4:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLC0_STAT);
    9cd6:	bf00      	nop
    9cd8:	4b58      	ldr	r3, [pc, #352]	; (9e3c <clock_start+0x190>)
    9cda:	681b      	ldr	r3, [r3, #0]
    9cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    9ce0:	2b00      	cmp	r3, #0
    9ce2:	d1f9      	bne.n	9cd8 <clock_start+0x2c>

	/* turn off PLL0 */
	PLL0CON &= ~PLL0CON_PLLE0;
    9ce4:	4a53      	ldr	r2, [pc, #332]	; (9e34 <clock_start+0x188>)
    9ce6:	4b53      	ldr	r3, [pc, #332]	; (9e34 <clock_start+0x188>)
    9ce8:	681b      	ldr	r3, [r3, #0]
    9cea:	f023 0301 	bic.w	r3, r3, #1
    9cee:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9cf0:	4b51      	ldr	r3, [pc, #324]	; (9e38 <clock_start+0x18c>)
    9cf2:	22aa      	movs	r2, #170	; 0xaa
    9cf4:	601a      	str	r2, [r3, #0]
    9cf6:	4b50      	ldr	r3, [pc, #320]	; (9e38 <clock_start+0x18c>)
    9cf8:	2255      	movs	r2, #85	; 0x55
    9cfa:	601a      	str	r2, [r3, #0]
	while (PLL0STAT & PLL0STAT_PLLE0_STAT);
    9cfc:	bf00      	nop
    9cfe:	4b4f      	ldr	r3, [pc, #316]	; (9e3c <clock_start+0x190>)
    9d00:	681b      	ldr	r3, [r3, #0]
    9d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    9d06:	2b00      	cmp	r3, #0
    9d08:	d1f9      	bne.n	9cfe <clock_start+0x52>

	/* temporarily set CPU clock divider to 1 */
	CCLKCFG = 0;
    9d0a:	4b4d      	ldr	r3, [pc, #308]	; (9e40 <clock_start+0x194>)
    9d0c:	2200      	movs	r2, #0
    9d0e:	601a      	str	r2, [r3, #0]

	/* configure CC2400 oscillator, output carrier sense on GIO6 */
	cc2400_reset();
    9d10:	f7ff ffb0 	bl	9c74 <cc2400_reset>
	cc2400_set(IOCFG, (GIO_CARRIER_SENSE_N << 9) | (GIO_CLK_16M << 3));
    9d14:	2008      	movs	r0, #8
    9d16:	f241 5170 	movw	r1, #5488	; 0x1570
    9d1a:	f7ff fed9 	bl	9ad0 <cc2400_set>
	cc2400_strobe(SXOSCON);
    9d1e:	2060      	movs	r0, #96	; 0x60
    9d20:	f7ff ff98 	bl	9c54 <cc2400_strobe>
	while (!(cc2400_status() & XOSC16M_STABLE));
    9d24:	bf00      	nop
    9d26:	f7ff ff8b 	bl	9c40 <cc2400_status>
    9d2a:	4603      	mov	r3, r0
    9d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9d30:	2b00      	cmp	r3, #0
    9d32:	d0f8      	beq.n	9d26 <clock_start+0x7a>

	/* activate main oscillator */
	SCS = SCS_OSCEN;
    9d34:	4b43      	ldr	r3, [pc, #268]	; (9e44 <clock_start+0x198>)
    9d36:	2220      	movs	r2, #32
    9d38:	601a      	str	r2, [r3, #0]
	while (!(SCS & SCS_OSCSTAT));
    9d3a:	bf00      	nop
    9d3c:	4b41      	ldr	r3, [pc, #260]	; (9e44 <clock_start+0x198>)
    9d3e:	681b      	ldr	r3, [r3, #0]
    9d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
    9d44:	2b00      	cmp	r3, #0
    9d46:	d0f9      	beq.n	9d3c <clock_start+0x90>
	 * connecting PLL0
 	 */
#ifdef TC13BADGE
	PCLKSEL0  = (1 << 2); /* TIMER0 at cclk (30 MHz) */
#else
	PCLKSEL0  = (2 << 2); /* TIMER0 at cclk/2 (50 MHz) */
    9d48:	4b3f      	ldr	r3, [pc, #252]	; (9e48 <clock_start+0x19c>)
    9d4a:	2208      	movs	r2, #8
    9d4c:	601a      	str	r2, [r3, #0]
#endif
	PCLKSEL1  = 0;
    9d4e:	4b3f      	ldr	r3, [pc, #252]	; (9e4c <clock_start+0x1a0>)
    9d50:	2200      	movs	r2, #0
    9d52:	601a      	str	r2, [r3, #0]

	/* switch to main oscillator */
	CLKSRCSEL = 1;
    9d54:	4b36      	ldr	r3, [pc, #216]	; (9e30 <clock_start+0x184>)
    9d56:	2201      	movs	r2, #1
    9d58:	601a      	str	r2, [r3, #0]

	/* configure PLL0 */
	PLL0CFG = (MSEL0 << 0) | (NSEL0 << 16);
    9d5a:	4b3d      	ldr	r3, [pc, #244]	; (9e50 <clock_start+0x1a4>)
    9d5c:	4a3d      	ldr	r2, [pc, #244]	; (9e54 <clock_start+0x1a8>)
    9d5e:	601a      	str	r2, [r3, #0]
	PLL0FEED_SEQUENCE;
    9d60:	4b35      	ldr	r3, [pc, #212]	; (9e38 <clock_start+0x18c>)
    9d62:	22aa      	movs	r2, #170	; 0xaa
    9d64:	601a      	str	r2, [r3, #0]
    9d66:	4b34      	ldr	r3, [pc, #208]	; (9e38 <clock_start+0x18c>)
    9d68:	2255      	movs	r2, #85	; 0x55
    9d6a:	601a      	str	r2, [r3, #0]

	/* turn on PLL0 */
	PLL0CON |= PLL0CON_PLLE0;
    9d6c:	4a31      	ldr	r2, [pc, #196]	; (9e34 <clock_start+0x188>)
    9d6e:	4b31      	ldr	r3, [pc, #196]	; (9e34 <clock_start+0x188>)
    9d70:	681b      	ldr	r3, [r3, #0]
    9d72:	f043 0301 	orr.w	r3, r3, #1
    9d76:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9d78:	4b2f      	ldr	r3, [pc, #188]	; (9e38 <clock_start+0x18c>)
    9d7a:	22aa      	movs	r2, #170	; 0xaa
    9d7c:	601a      	str	r2, [r3, #0]
    9d7e:	4b2e      	ldr	r3, [pc, #184]	; (9e38 <clock_start+0x18c>)
    9d80:	2255      	movs	r2, #85	; 0x55
    9d82:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLE0_STAT));
    9d84:	bf00      	nop
    9d86:	4b2d      	ldr	r3, [pc, #180]	; (9e3c <clock_start+0x190>)
    9d88:	681b      	ldr	r3, [r3, #0]
    9d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
    9d8e:	2b00      	cmp	r3, #0
    9d90:	d0f9      	beq.n	9d86 <clock_start+0xda>

	/* set CPU clock divider */
	CCLKCFG = CCLKSEL;
    9d92:	4b2b      	ldr	r3, [pc, #172]	; (9e40 <clock_start+0x194>)
    9d94:	2203      	movs	r2, #3
    9d96:	601a      	str	r2, [r3, #0]

	/* connect PLL0 */
	PLL0CON |= PLL0CON_PLLC0;
    9d98:	4a26      	ldr	r2, [pc, #152]	; (9e34 <clock_start+0x188>)
    9d9a:	4b26      	ldr	r3, [pc, #152]	; (9e34 <clock_start+0x188>)
    9d9c:	681b      	ldr	r3, [r3, #0]
    9d9e:	f043 0302 	orr.w	r3, r3, #2
    9da2:	6013      	str	r3, [r2, #0]
	PLL0FEED_SEQUENCE;
    9da4:	4b24      	ldr	r3, [pc, #144]	; (9e38 <clock_start+0x18c>)
    9da6:	22aa      	movs	r2, #170	; 0xaa
    9da8:	601a      	str	r2, [r3, #0]
    9daa:	4b23      	ldr	r3, [pc, #140]	; (9e38 <clock_start+0x18c>)
    9dac:	2255      	movs	r2, #85	; 0x55
    9dae:	601a      	str	r2, [r3, #0]
	while (!(PLL0STAT & PLL0STAT_PLLC0_STAT));
    9db0:	bf00      	nop
    9db2:	4b22      	ldr	r3, [pc, #136]	; (9e3c <clock_start+0x190>)
    9db4:	681b      	ldr	r3, [r3, #0]
    9db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    9dba:	2b00      	cmp	r3, #0
    9dbc:	d0f9      	beq.n	9db2 <clock_start+0x106>

	/* configure PLL1 */
	PLL1CFG = (MSEL1 << 0) | (PSEL1 << 5);
    9dbe:	4b26      	ldr	r3, [pc, #152]	; (9e58 <clock_start+0x1ac>)
    9dc0:	2222      	movs	r2, #34	; 0x22
    9dc2:	601a      	str	r2, [r3, #0]
	PLL1FEED_SEQUENCE;
    9dc4:	4b25      	ldr	r3, [pc, #148]	; (9e5c <clock_start+0x1b0>)
    9dc6:	22aa      	movs	r2, #170	; 0xaa
    9dc8:	601a      	str	r2, [r3, #0]
    9dca:	4b24      	ldr	r3, [pc, #144]	; (9e5c <clock_start+0x1b0>)
    9dcc:	2255      	movs	r2, #85	; 0x55
    9dce:	601a      	str	r2, [r3, #0]

	/* turn on PLL1 */
	PLL1CON |= PLL1CON_PLLE1;
    9dd0:	4a23      	ldr	r2, [pc, #140]	; (9e60 <clock_start+0x1b4>)
    9dd2:	4b23      	ldr	r3, [pc, #140]	; (9e60 <clock_start+0x1b4>)
    9dd4:	681b      	ldr	r3, [r3, #0]
    9dd6:	f043 0301 	orr.w	r3, r3, #1
    9dda:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    9ddc:	4b1f      	ldr	r3, [pc, #124]	; (9e5c <clock_start+0x1b0>)
    9dde:	22aa      	movs	r2, #170	; 0xaa
    9de0:	601a      	str	r2, [r3, #0]
    9de2:	4b1e      	ldr	r3, [pc, #120]	; (9e5c <clock_start+0x1b0>)
    9de4:	2255      	movs	r2, #85	; 0x55
    9de6:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLE1_STAT));
    9de8:	bf00      	nop
    9dea:	4b1e      	ldr	r3, [pc, #120]	; (9e64 <clock_start+0x1b8>)
    9dec:	681b      	ldr	r3, [r3, #0]
    9dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
    9df2:	2b00      	cmp	r3, #0
    9df4:	d0f9      	beq.n	9dea <clock_start+0x13e>
	while (!(PLL1STAT & PLL1STAT_PLOCK1));
    9df6:	bf00      	nop
    9df8:	4b1a      	ldr	r3, [pc, #104]	; (9e64 <clock_start+0x1b8>)
    9dfa:	681b      	ldr	r3, [r3, #0]
    9dfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    9e00:	2b00      	cmp	r3, #0
    9e02:	d0f9      	beq.n	9df8 <clock_start+0x14c>

	/* connect PLL1 */
	PLL1CON |= PLL1CON_PLLC1;
    9e04:	4a16      	ldr	r2, [pc, #88]	; (9e60 <clock_start+0x1b4>)
    9e06:	4b16      	ldr	r3, [pc, #88]	; (9e60 <clock_start+0x1b4>)
    9e08:	681b      	ldr	r3, [r3, #0]
    9e0a:	f043 0302 	orr.w	r3, r3, #2
    9e0e:	6013      	str	r3, [r2, #0]
	PLL1FEED_SEQUENCE;
    9e10:	4b12      	ldr	r3, [pc, #72]	; (9e5c <clock_start+0x1b0>)
    9e12:	22aa      	movs	r2, #170	; 0xaa
    9e14:	601a      	str	r2, [r3, #0]
    9e16:	4b11      	ldr	r3, [pc, #68]	; (9e5c <clock_start+0x1b0>)
    9e18:	2255      	movs	r2, #85	; 0x55
    9e1a:	601a      	str	r2, [r3, #0]
	while (!(PLL1STAT & PLL1STAT_PLLC1_STAT));
    9e1c:	bf00      	nop
    9e1e:	4b11      	ldr	r3, [pc, #68]	; (9e64 <clock_start+0x1b8>)
    9e20:	681b      	ldr	r3, [r3, #0]
    9e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
    9e26:	2b00      	cmp	r3, #0
    9e28:	d0f9      	beq.n	9e1e <clock_start+0x172>
}
    9e2a:	bd80      	pop	{r7, pc}
    9e2c:	400fc000 	.word	0x400fc000
    9e30:	400fc10c 	.word	0x400fc10c
    9e34:	400fc080 	.word	0x400fc080
    9e38:	400fc08c 	.word	0x400fc08c
    9e3c:	400fc088 	.word	0x400fc088
    9e40:	400fc104 	.word	0x400fc104
    9e44:	400fc1a0 	.word	0x400fc1a0
    9e48:	400fc1a8 	.word	0x400fc1a8
    9e4c:	400fc1ac 	.word	0x400fc1ac
    9e50:	400fc084 	.word	0x400fc084
    9e54:	00010018 	.word	0x00010018
    9e58:	400fc0a4 	.word	0x400fc0a4
    9e5c:	400fc0ac 	.word	0x400fc0ac
    9e60:	400fc0a0 	.word	0x400fc0a0
    9e64:	400fc0a8 	.word	0x400fc0a8

00009e68 <reset>:

/* reset the LPC17xx, the cc2400 will be handled by the boot code */
void reset()
{
    9e68:	b580      	push	{r7, lr}
    9e6a:	af00      	add	r7, sp, #0
	all_pins_off();
    9e6c:	f7ff fcd0 	bl	9810 <all_pins_off>

	/* Enable the watchdog with reset enabled */
	USRLED_CLR;
    9e70:	4b0a      	ldr	r3, [pc, #40]	; (9e9c <reset+0x34>)
    9e72:	2202      	movs	r2, #2
    9e74:	601a      	str	r2, [r3, #0]
	WDMOD |= WDMOD_WDEN | WDMOD_WDRESET;
    9e76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9e7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9e7e:	681b      	ldr	r3, [r3, #0]
    9e80:	f043 0303 	orr.w	r3, r3, #3
    9e84:	6013      	str	r3, [r2, #0]
	WDFEED_SEQUENCE;
    9e86:	4b06      	ldr	r3, [pc, #24]	; (9ea0 <reset+0x38>)
    9e88:	22aa      	movs	r2, #170	; 0xaa
    9e8a:	601a      	str	r2, [r3, #0]
    9e8c:	4b04      	ldr	r3, [pc, #16]	; (9ea0 <reset+0x38>)
    9e8e:	2255      	movs	r2, #85	; 0x55
    9e90:	601a      	str	r2, [r3, #0]
	
	/* Set watchdog timeout to 256us (minimum) */
	
	/* sleep for 1s (minimum) */
	wait(1);
    9e92:	2001      	movs	r0, #1
    9e94:	f7ff fc38 	bl	9708 <wait>
}
    9e98:	bd80      	pop	{r7, pc}
    9e9a:	bf00      	nop
    9e9c:	2009c03c 	.word	0x2009c03c
    9ea0:	40000008 	.word	0x40000008

00009ea4 <_HandleRequest>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handles successfully
 */
static BOOL _HandleRequest(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    9ea4:	b580      	push	{r7, lr}
    9ea6:	b088      	sub	sp, #32
    9ea8:	af00      	add	r7, sp, #0
    9eaa:	60f8      	str	r0, [r7, #12]
    9eac:	60b9      	str	r1, [r7, #8]
    9eae:	607a      	str	r2, [r7, #4]
	TFnHandleRequest *pfnHandler;
	int iType;
	
	iType = REQTYPE_GET_TYPE(pSetup->bmRequestType);
    9eb0:	68fb      	ldr	r3, [r7, #12]
    9eb2:	781b      	ldrb	r3, [r3, #0]
    9eb4:	095b      	lsrs	r3, r3, #5
    9eb6:	b2db      	uxtb	r3, r3
    9eb8:	f003 0303 	and.w	r3, r3, #3
    9ebc:	61fb      	str	r3, [r7, #28]
	
	if(iType == REQTYPE_TYPE_VENDOR) {
    9ebe:	69fb      	ldr	r3, [r7, #28]
    9ec0:	2b02      	cmp	r3, #2
    9ec2:	d10e      	bne.n	9ee2 <_HandleRequest+0x3e>
		BOOL fFilterStatus = FALSE;
    9ec4:	2300      	movs	r3, #0
    9ec6:	617b      	str	r3, [r7, #20]
		if(USBFilterOsVendorMessage(pSetup, &fFilterStatus, piLen, ppbData)) {
    9ec8:	f107 0314 	add.w	r3, r7, #20
    9ecc:	68f8      	ldr	r0, [r7, #12]
    9ece:	4619      	mov	r1, r3
    9ed0:	68ba      	ldr	r2, [r7, #8]
    9ed2:	687b      	ldr	r3, [r7, #4]
    9ed4:	f000 fcd2 	bl	a87c <USBFilterOsVendorMessage>
    9ed8:	4603      	mov	r3, r0
    9eda:	2b00      	cmp	r3, #0
    9edc:	d001      	beq.n	9ee2 <_HandleRequest+0x3e>
			return fFilterStatus;
    9ede:	697b      	ldr	r3, [r7, #20]
    9ee0:	e00f      	b.n	9f02 <_HandleRequest+0x5e>
		}
	}
	
	pfnHandler = apfnReqHandlers[iType];
    9ee2:	4a0a      	ldr	r2, [pc, #40]	; (9f0c <_HandleRequest+0x68>)
    9ee4:	69fb      	ldr	r3, [r7, #28]
    9ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9eea:	61bb      	str	r3, [r7, #24]
	if (pfnHandler == NULL) {
    9eec:	69bb      	ldr	r3, [r7, #24]
    9eee:	2b00      	cmp	r3, #0
    9ef0:	d101      	bne.n	9ef6 <_HandleRequest+0x52>
		DBG("No handler for reqtype %d\n", iType);
		return FALSE;
    9ef2:	2300      	movs	r3, #0
    9ef4:	e005      	b.n	9f02 <_HandleRequest+0x5e>
	}

	return pfnHandler(pSetup, piLen, ppbData);
    9ef6:	69bb      	ldr	r3, [r7, #24]
    9ef8:	68f8      	ldr	r0, [r7, #12]
    9efa:	68b9      	ldr	r1, [r7, #8]
    9efc:	687a      	ldr	r2, [r7, #4]
    9efe:	4798      	blx	r3
    9f00:	4603      	mov	r3, r0
}
    9f02:	4618      	mov	r0, r3
    9f04:	3720      	adds	r7, #32
    9f06:	46bd      	mov	sp, r7
    9f08:	bd80      	pop	{r7, pc}
    9f0a:	bf00      	nop
    9f0c:	10000a80 	.word	0x10000a80

00009f10 <StallControlPipe>:
	Local function to stall the control endpoint
	
	@param [in]	bEPStat	Endpoint status
 */
static void StallControlPipe(U8 bEPStat)
{
    9f10:	b580      	push	{r7, lr}
    9f12:	b084      	sub	sp, #16
    9f14:	af00      	add	r7, sp, #0
    9f16:	4603      	mov	r3, r0
    9f18:	71fb      	strb	r3, [r7, #7]
	U8	*pb;
	int	i;

	USBHwEPStall(0x80, TRUE);
    9f1a:	2080      	movs	r0, #128	; 0x80
    9f1c:	2101      	movs	r1, #1
    9f1e:	f000 fa83 	bl	a428 <USBHwEPStall>

// dump setup packet
	DBG("STALL on [");
	pb = (U8 *)&Setup;
    9f22:	4b07      	ldr	r3, [pc, #28]	; (9f40 <StallControlPipe+0x30>)
    9f24:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < 8; i++) {
    9f26:	2300      	movs	r3, #0
    9f28:	60fb      	str	r3, [r7, #12]
    9f2a:	e002      	b.n	9f32 <StallControlPipe+0x22>
    9f2c:	68fb      	ldr	r3, [r7, #12]
    9f2e:	3301      	adds	r3, #1
    9f30:	60fb      	str	r3, [r7, #12]
    9f32:	68fb      	ldr	r3, [r7, #12]
    9f34:	2b07      	cmp	r3, #7
    9f36:	ddf9      	ble.n	9f2c <StallControlPipe+0x1c>
		DBG(" %02x", *pb++);
	}
	DBG("] stat=%x\n", bEPStat);
}
    9f38:	3710      	adds	r7, #16
    9f3a:	46bd      	mov	sp, r7
    9f3c:	bd80      	pop	{r7, pc}
    9f3e:	bf00      	nop
    9f40:	10000a6c 	.word	0x10000a6c

00009f44 <DataIn>:

/**
	Sends next chunk of data (possibly 0 bytes) to host
 */
static void DataIn(void)
{
    9f44:	b580      	push	{r7, lr}
    9f46:	b082      	sub	sp, #8
    9f48:	af00      	add	r7, sp, #0
	int iChunk;

	iChunk = MIN(MAX_PACKET_SIZE0, iResidue);
    9f4a:	4b0e      	ldr	r3, [pc, #56]	; (9f84 <DataIn+0x40>)
    9f4c:	681b      	ldr	r3, [r3, #0]
    9f4e:	2b40      	cmp	r3, #64	; 0x40
    9f50:	bfa8      	it	ge
    9f52:	2340      	movge	r3, #64	; 0x40
    9f54:	607b      	str	r3, [r7, #4]
	USBHwEPWrite(0x80, pbData, iChunk);
    9f56:	4b0c      	ldr	r3, [pc, #48]	; (9f88 <DataIn+0x44>)
    9f58:	681a      	ldr	r2, [r3, #0]
    9f5a:	687b      	ldr	r3, [r7, #4]
    9f5c:	2080      	movs	r0, #128	; 0x80
    9f5e:	4611      	mov	r1, r2
    9f60:	461a      	mov	r2, r3
    9f62:	f000 fa85 	bl	a470 <USBHwEPWrite>
	pbData += iChunk;
    9f66:	4b08      	ldr	r3, [pc, #32]	; (9f88 <DataIn+0x44>)
    9f68:	681a      	ldr	r2, [r3, #0]
    9f6a:	687b      	ldr	r3, [r7, #4]
    9f6c:	4413      	add	r3, r2
    9f6e:	4a06      	ldr	r2, [pc, #24]	; (9f88 <DataIn+0x44>)
    9f70:	6013      	str	r3, [r2, #0]
	iResidue -= iChunk;
    9f72:	4b04      	ldr	r3, [pc, #16]	; (9f84 <DataIn+0x40>)
    9f74:	681a      	ldr	r2, [r3, #0]
    9f76:	687b      	ldr	r3, [r7, #4]
    9f78:	1ad3      	subs	r3, r2, r3
    9f7a:	4a02      	ldr	r2, [pc, #8]	; (9f84 <DataIn+0x40>)
    9f7c:	6013      	str	r3, [r2, #0]
}
    9f7e:	3708      	adds	r7, #8
    9f80:	46bd      	mov	sp, r7
    9f82:	bd80      	pop	{r7, pc}
    9f84:	10000a78 	.word	0x10000a78
    9f88:	10000a74 	.word	0x10000a74

00009f8c <USBHandleControlTransfer>:
 *
 *	@param [in]	bEP		Endpoint address
 *	@param [in]	bEPStat	Endpoint status
 */
void USBHandleControlTransfer(U8 bEP, U8 bEPStat)
{
    9f8c:	b580      	push	{r7, lr}
    9f8e:	b084      	sub	sp, #16
    9f90:	af00      	add	r7, sp, #0
    9f92:	4603      	mov	r3, r0
    9f94:	460a      	mov	r2, r1
    9f96:	71fb      	strb	r3, [r7, #7]
    9f98:	4613      	mov	r3, r2
    9f9a:	71bb      	strb	r3, [r7, #6]
	int iChunk, iType;

	if (bEP == 0x00) {
    9f9c:	79fb      	ldrb	r3, [r7, #7]
    9f9e:	2b00      	cmp	r3, #0
    9fa0:	f040 8091 	bne.w	a0c6 <USBHandleControlTransfer+0x13a>
		// OUT transfer
		if (bEPStat & EP_STATUS_SETUP) {
    9fa4:	79bb      	ldrb	r3, [r7, #6]
    9fa6:	f003 0304 	and.w	r3, r3, #4
    9faa:	2b00      	cmp	r3, #0
    9fac:	d041      	beq.n	a032 <USBHandleControlTransfer+0xa6>
			// setup packet, reset request message state machine
			USBHwEPRead(0x00, (U8 *)&Setup, sizeof(Setup));
    9fae:	2000      	movs	r0, #0
    9fb0:	4949      	ldr	r1, [pc, #292]	; (a0d8 <USBHandleControlTransfer+0x14c>)
    9fb2:	2208      	movs	r2, #8
    9fb4:	f000 faaa 	bl	a50c <USBHwEPRead>
			DBG("S%x", Setup.bRequest);

			// defaults for data pointer and residue
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    9fb8:	4b47      	ldr	r3, [pc, #284]	; (a0d8 <USBHandleControlTransfer+0x14c>)
    9fba:	781b      	ldrb	r3, [r3, #0]
    9fbc:	095b      	lsrs	r3, r3, #5
    9fbe:	b2db      	uxtb	r3, r3
    9fc0:	f003 0303 	and.w	r3, r3, #3
    9fc4:	60fb      	str	r3, [r7, #12]
			pbData = apbDataStore[iType];
    9fc6:	4a45      	ldr	r2, [pc, #276]	; (a0dc <USBHandleControlTransfer+0x150>)
    9fc8:	68fb      	ldr	r3, [r7, #12]
    9fca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9fce:	4a44      	ldr	r2, [pc, #272]	; (a0e0 <USBHandleControlTransfer+0x154>)
    9fd0:	6013      	str	r3, [r2, #0]
			iResidue = Setup.wLength;
    9fd2:	4b41      	ldr	r3, [pc, #260]	; (a0d8 <USBHandleControlTransfer+0x14c>)
    9fd4:	88db      	ldrh	r3, [r3, #6]
    9fd6:	461a      	mov	r2, r3
    9fd8:	4b42      	ldr	r3, [pc, #264]	; (a0e4 <USBHandleControlTransfer+0x158>)
    9fda:	601a      	str	r2, [r3, #0]
			iLen = Setup.wLength;
    9fdc:	4b3e      	ldr	r3, [pc, #248]	; (a0d8 <USBHandleControlTransfer+0x14c>)
    9fde:	88db      	ldrh	r3, [r3, #6]
    9fe0:	461a      	mov	r2, r3
    9fe2:	4b41      	ldr	r3, [pc, #260]	; (a0e8 <USBHandleControlTransfer+0x15c>)
    9fe4:	601a      	str	r2, [r3, #0]

			if ((Setup.wLength == 0) ||
    9fe6:	4b3c      	ldr	r3, [pc, #240]	; (a0d8 <USBHandleControlTransfer+0x14c>)
    9fe8:	88db      	ldrh	r3, [r3, #6]
    9fea:	2b00      	cmp	r3, #0
    9fec:	d007      	beq.n	9ffe <USBHandleControlTransfer+0x72>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
    9fee:	4b3a      	ldr	r3, [pc, #232]	; (a0d8 <USBHandleControlTransfer+0x14c>)
    9ff0:	781b      	ldrb	r3, [r3, #0]
    9ff2:	09db      	lsrs	r3, r3, #7
    9ff4:	b2db      	uxtb	r3, r3
    9ff6:	f003 0301 	and.w	r3, r3, #1
			iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
			pbData = apbDataStore[iType];
			iResidue = Setup.wLength;
			iLen = Setup.wLength;

			if ((Setup.wLength == 0) ||
    9ffa:	2b00      	cmp	r3, #0
    9ffc:	d068      	beq.n	a0d0 <USBHandleControlTransfer+0x144>
				(REQTYPE_GET_DIR(Setup.bmRequestType) == REQTYPE_DIR_TO_HOST)) {
				// ask installed handler to process request
				if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    9ffe:	4836      	ldr	r0, [pc, #216]	; (a0d8 <USBHandleControlTransfer+0x14c>)
    a000:	4939      	ldr	r1, [pc, #228]	; (a0e8 <USBHandleControlTransfer+0x15c>)
    a002:	4a37      	ldr	r2, [pc, #220]	; (a0e0 <USBHandleControlTransfer+0x154>)
    a004:	f7ff ff4e 	bl	9ea4 <_HandleRequest>
    a008:	4603      	mov	r3, r0
    a00a:	2b00      	cmp	r3, #0
    a00c:	d104      	bne.n	a018 <USBHandleControlTransfer+0x8c>
					DBG("_HandleRequest1 failed\n");
					StallControlPipe(bEPStat);
    a00e:	79bb      	ldrb	r3, [r7, #6]
    a010:	4618      	mov	r0, r3
    a012:	f7ff ff7d 	bl	9f10 <StallControlPipe>
					return;
    a016:	e05b      	b.n	a0d0 <USBHandleControlTransfer+0x144>
				}
				// send smallest of requested and offered length
				iResidue = MIN(iLen, Setup.wLength);
    a018:	4b2f      	ldr	r3, [pc, #188]	; (a0d8 <USBHandleControlTransfer+0x14c>)
    a01a:	88db      	ldrh	r3, [r3, #6]
    a01c:	461a      	mov	r2, r3
    a01e:	4b32      	ldr	r3, [pc, #200]	; (a0e8 <USBHandleControlTransfer+0x15c>)
    a020:	681b      	ldr	r3, [r3, #0]
    a022:	4293      	cmp	r3, r2
    a024:	bfa8      	it	ge
    a026:	4613      	movge	r3, r2
    a028:	4a2e      	ldr	r2, [pc, #184]	; (a0e4 <USBHandleControlTransfer+0x158>)
    a02a:	6013      	str	r3, [r2, #0]
				// send first part (possibly a zero-length status message)
				DataIn();
    a02c:	f7ff ff8a 	bl	9f44 <DataIn>
    a030:	e04e      	b.n	a0d0 <USBHandleControlTransfer+0x144>
			}
		}
		else {		
			if (iResidue > 0) {
    a032:	4b2c      	ldr	r3, [pc, #176]	; (a0e4 <USBHandleControlTransfer+0x158>)
    a034:	681b      	ldr	r3, [r3, #0]
    a036:	2b00      	cmp	r3, #0
    a038:	dd3e      	ble.n	a0b8 <USBHandleControlTransfer+0x12c>
				// store data
				iChunk = USBHwEPRead(0x00, pbData, iResidue);
    a03a:	4b29      	ldr	r3, [pc, #164]	; (a0e0 <USBHandleControlTransfer+0x154>)
    a03c:	681a      	ldr	r2, [r3, #0]
    a03e:	4b29      	ldr	r3, [pc, #164]	; (a0e4 <USBHandleControlTransfer+0x158>)
    a040:	681b      	ldr	r3, [r3, #0]
    a042:	2000      	movs	r0, #0
    a044:	4611      	mov	r1, r2
    a046:	461a      	mov	r2, r3
    a048:	f000 fa60 	bl	a50c <USBHwEPRead>
    a04c:	60b8      	str	r0, [r7, #8]
				if (iChunk < 0) {
    a04e:	68bb      	ldr	r3, [r7, #8]
    a050:	2b00      	cmp	r3, #0
    a052:	da04      	bge.n	a05e <USBHandleControlTransfer+0xd2>
					StallControlPipe(bEPStat);
    a054:	79bb      	ldrb	r3, [r7, #6]
    a056:	4618      	mov	r0, r3
    a058:	f7ff ff5a 	bl	9f10 <StallControlPipe>
					return;
    a05c:	e038      	b.n	a0d0 <USBHandleControlTransfer+0x144>
				}
				pbData += iChunk;
    a05e:	4b20      	ldr	r3, [pc, #128]	; (a0e0 <USBHandleControlTransfer+0x154>)
    a060:	681a      	ldr	r2, [r3, #0]
    a062:	68bb      	ldr	r3, [r7, #8]
    a064:	4413      	add	r3, r2
    a066:	4a1e      	ldr	r2, [pc, #120]	; (a0e0 <USBHandleControlTransfer+0x154>)
    a068:	6013      	str	r3, [r2, #0]
				iResidue -= iChunk;
    a06a:	4b1e      	ldr	r3, [pc, #120]	; (a0e4 <USBHandleControlTransfer+0x158>)
    a06c:	681a      	ldr	r2, [r3, #0]
    a06e:	68bb      	ldr	r3, [r7, #8]
    a070:	1ad3      	subs	r3, r2, r3
    a072:	4a1c      	ldr	r2, [pc, #112]	; (a0e4 <USBHandleControlTransfer+0x158>)
    a074:	6013      	str	r3, [r2, #0]
				if (iResidue == 0) {
    a076:	4b1b      	ldr	r3, [pc, #108]	; (a0e4 <USBHandleControlTransfer+0x158>)
    a078:	681b      	ldr	r3, [r3, #0]
    a07a:	2b00      	cmp	r3, #0
    a07c:	d128      	bne.n	a0d0 <USBHandleControlTransfer+0x144>
					// received all, send data to handler
					iType = REQTYPE_GET_TYPE(Setup.bmRequestType);
    a07e:	4b16      	ldr	r3, [pc, #88]	; (a0d8 <USBHandleControlTransfer+0x14c>)
    a080:	781b      	ldrb	r3, [r3, #0]
    a082:	095b      	lsrs	r3, r3, #5
    a084:	b2db      	uxtb	r3, r3
    a086:	f003 0303 	and.w	r3, r3, #3
    a08a:	60fb      	str	r3, [r7, #12]
					pbData = apbDataStore[iType];
    a08c:	4a13      	ldr	r2, [pc, #76]	; (a0dc <USBHandleControlTransfer+0x150>)
    a08e:	68fb      	ldr	r3, [r7, #12]
    a090:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    a094:	4a12      	ldr	r2, [pc, #72]	; (a0e0 <USBHandleControlTransfer+0x154>)
    a096:	6013      	str	r3, [r2, #0]
					if (!_HandleRequest(&Setup, &iLen, &pbData)) {
    a098:	480f      	ldr	r0, [pc, #60]	; (a0d8 <USBHandleControlTransfer+0x14c>)
    a09a:	4913      	ldr	r1, [pc, #76]	; (a0e8 <USBHandleControlTransfer+0x15c>)
    a09c:	4a10      	ldr	r2, [pc, #64]	; (a0e0 <USBHandleControlTransfer+0x154>)
    a09e:	f7ff ff01 	bl	9ea4 <_HandleRequest>
    a0a2:	4603      	mov	r3, r0
    a0a4:	2b00      	cmp	r3, #0
    a0a6:	d104      	bne.n	a0b2 <USBHandleControlTransfer+0x126>
						DBG("_HandleRequest2 failed\n");
						StallControlPipe(bEPStat);
    a0a8:	79bb      	ldrb	r3, [r7, #6]
    a0aa:	4618      	mov	r0, r3
    a0ac:	f7ff ff30 	bl	9f10 <StallControlPipe>
						return;
    a0b0:	e00e      	b.n	a0d0 <USBHandleControlTransfer+0x144>
					}
					// send status to host
					DataIn();
    a0b2:	f7ff ff47 	bl	9f44 <DataIn>
    a0b6:	e00b      	b.n	a0d0 <USBHandleControlTransfer+0x144>
				}
			}
			else {
				// absorb zero-length status message
				iChunk = USBHwEPRead(0x00, NULL, 0);
    a0b8:	2000      	movs	r0, #0
    a0ba:	2100      	movs	r1, #0
    a0bc:	2200      	movs	r2, #0
    a0be:	f000 fa25 	bl	a50c <USBHwEPRead>
    a0c2:	60b8      	str	r0, [r7, #8]
    a0c4:	e004      	b.n	a0d0 <USBHandleControlTransfer+0x144>
				DBG(iChunk > 0 ? "?" : "");
			}
		}
	}
	else if (bEP == 0x80) {
    a0c6:	79fb      	ldrb	r3, [r7, #7]
    a0c8:	2b80      	cmp	r3, #128	; 0x80
    a0ca:	d101      	bne.n	a0d0 <USBHandleControlTransfer+0x144>
		// IN transfer
		// send more data if available (possibly a 0-length packet)
		DataIn();
    a0cc:	f7ff ff3a 	bl	9f44 <DataIn>
	}
	else {
		ASSERT(FALSE);
	}
}
    a0d0:	3710      	adds	r7, #16
    a0d2:	46bd      	mov	sp, r7
    a0d4:	bd80      	pop	{r7, pc}
    a0d6:	bf00      	nop
    a0d8:	10000a6c 	.word	0x10000a6c
    a0dc:	10000a90 	.word	0x10000a90
    a0e0:	10000a74 	.word	0x10000a74
    a0e4:	10000a78 	.word	0x10000a78
    a0e8:	10000a7c 	.word	0x10000a7c

0000a0ec <USBRegisterRequestHandler>:
	@param [in]	iType			Type of request, e.g. REQTYPE_TYPE_STANDARD
	@param [in]	*pfnHandler		Callback function pointer
	@param [in]	*pbDataStore	Data storage area for this type of request
 */
void USBRegisterRequestHandler(int iType, TFnHandleRequest *pfnHandler, U8 *pbDataStore)
{
    a0ec:	b480      	push	{r7}
    a0ee:	b085      	sub	sp, #20
    a0f0:	af00      	add	r7, sp, #0
    a0f2:	60f8      	str	r0, [r7, #12]
    a0f4:	60b9      	str	r1, [r7, #8]
    a0f6:	607a      	str	r2, [r7, #4]
	ASSERT(iType >= 0);
	ASSERT(iType < 4);
	apfnReqHandlers[iType] = pfnHandler;
    a0f8:	4907      	ldr	r1, [pc, #28]	; (a118 <USBRegisterRequestHandler+0x2c>)
    a0fa:	68fb      	ldr	r3, [r7, #12]
    a0fc:	68ba      	ldr	r2, [r7, #8]
    a0fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	apbDataStore[iType] = pbDataStore;
    a102:	4906      	ldr	r1, [pc, #24]	; (a11c <USBRegisterRequestHandler+0x30>)
    a104:	68fb      	ldr	r3, [r7, #12]
    a106:	687a      	ldr	r2, [r7, #4]
    a108:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    a10c:	3714      	adds	r7, #20
    a10e:	46bd      	mov	sp, r7
    a110:	f85d 7b04 	ldr.w	r7, [sp], #4
    a114:	4770      	bx	lr
    a116:	bf00      	nop
    a118:	10000a80 	.word	0x10000a80
    a11c:	10000a90 	.word	0x10000a90

0000a120 <HandleUsbReset>:
	USB reset handler
	
	@param [in] bDevStatus	Device status
 */
static void HandleUsbReset(U8 bDevStatus)
{
    a120:	b480      	push	{r7}
    a122:	b083      	sub	sp, #12
    a124:	af00      	add	r7, sp, #0
    a126:	4603      	mov	r3, r0
    a128:	71fb      	strb	r3, [r7, #7]
	if (bDevStatus & DEV_STATUS_RESET) {
		DBG("\n!");
	}
}
    a12a:	370c      	adds	r7, #12
    a12c:	46bd      	mov	sp, r7
    a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
    a132:	4770      	bx	lr

0000a134 <USBInit>:
	installing default callbacks.
	
	@return TRUE if initialisation was successful
 */
BOOL USBInit(void)
{
    a134:	b580      	push	{r7, lr}
    a136:	af00      	add	r7, sp, #0
	// init hardware
	USBHwInit();
    a138:	f000 fb2a 	bl	a790 <USBHwInit>
	
	// register bus reset handler
	USBHwRegisterDevIntHandler(HandleUsbReset);
    a13c:	480d      	ldr	r0, [pc, #52]	; (a174 <USBInit+0x40>)
    a13e:	f000 f913 	bl	a368 <USBHwRegisterDevIntHandler>
	
	// register control transfer handler on EP0
	USBHwRegisterEPIntHandler(0x00, USBHandleControlTransfer);
    a142:	2000      	movs	r0, #0
    a144:	490c      	ldr	r1, [pc, #48]	; (a178 <USBInit+0x44>)
    a146:	f000 f8dd 	bl	a304 <USBHwRegisterEPIntHandler>
	USBHwRegisterEPIntHandler(0x80, USBHandleControlTransfer);
    a14a:	2080      	movs	r0, #128	; 0x80
    a14c:	490a      	ldr	r1, [pc, #40]	; (a178 <USBInit+0x44>)
    a14e:	f000 f8d9 	bl	a304 <USBHwRegisterEPIntHandler>
	
	// setup control endpoints
	USBHwEPConfig(0x00, MAX_PACKET_SIZE0);
    a152:	2000      	movs	r0, #0
    a154:	2140      	movs	r1, #64	; 0x40
    a156:	f000 f8b7 	bl	a2c8 <USBHwEPConfig>
	USBHwEPConfig(0x80, MAX_PACKET_SIZE0);
    a15a:	2080      	movs	r0, #128	; 0x80
    a15c:	2140      	movs	r1, #64	; 0x40
    a15e:	f000 f8b3 	bl	a2c8 <USBHwEPConfig>
	
	// register standard request handler
	USBRegisterRequestHandler(REQTYPE_TYPE_STANDARD, USBHandleStandardRequest, abStdReqData);
    a162:	2000      	movs	r0, #0
    a164:	4905      	ldr	r1, [pc, #20]	; (a17c <USBInit+0x48>)
    a166:	4a06      	ldr	r2, [pc, #24]	; (a180 <USBInit+0x4c>)
    a168:	f7ff ffc0 	bl	a0ec <USBRegisterRequestHandler>

	return TRUE;
    a16c:	2301      	movs	r3, #1
}
    a16e:	4618      	mov	r0, r3
    a170:	bd80      	pop	{r7, pc}
    a172:	bf00      	nop
    a174:	0000a121 	.word	0x0000a121
    a178:	00009f8d 	.word	0x00009f8d
    a17c:	0000adc9 	.word	0x0000adc9
    a180:	10000aa0 	.word	0x10000aa0

0000a184 <Wait4DevInt>:
    Local function to wait for a device interrupt (and clear it)
        
    @param [in] dwIntr      Bitmask of interrupts to wait for   
 */
static void Wait4DevInt(U32 dwIntr)
{
    a184:	b480      	push	{r7}
    a186:	b083      	sub	sp, #12
    a188:	af00      	add	r7, sp, #0
    a18a:	6078      	str	r0, [r7, #4]
    // wait for specific interrupt
    while ((USBDevIntSt & dwIntr) != dwIntr);
    a18c:	bf00      	nop
    a18e:	4b07      	ldr	r3, [pc, #28]	; (a1ac <Wait4DevInt+0x28>)
    a190:	681a      	ldr	r2, [r3, #0]
    a192:	687b      	ldr	r3, [r7, #4]
    a194:	401a      	ands	r2, r3
    a196:	687b      	ldr	r3, [r7, #4]
    a198:	429a      	cmp	r2, r3
    a19a:	d1f8      	bne.n	a18e <Wait4DevInt+0xa>
    // clear the interrupt bits
    USBDevIntClr = dwIntr;
    a19c:	4a04      	ldr	r2, [pc, #16]	; (a1b0 <Wait4DevInt+0x2c>)
    a19e:	687b      	ldr	r3, [r7, #4]
    a1a0:	6013      	str	r3, [r2, #0]
}
    a1a2:	370c      	adds	r7, #12
    a1a4:	46bd      	mov	sp, r7
    a1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
    a1aa:	4770      	bx	lr
    a1ac:	5000c200 	.word	0x5000c200
    a1b0:	5000c208 	.word	0x5000c208

0000a1b4 <USBHwCmd>:
    Local function to send a command to the USB protocol engine
        
    @param [in] bCmd        Command to send
 */
static void USBHwCmd(U8 bCmd)
{
    a1b4:	b580      	push	{r7, lr}
    a1b6:	b082      	sub	sp, #8
    a1b8:	af00      	add	r7, sp, #0
    a1ba:	4603      	mov	r3, r0
    a1bc:	71fb      	strb	r3, [r7, #7]
    // clear CDFULL/CCEMTY
    USBDevIntClr = CDFULL | CCEMTY;
    a1be:	4b07      	ldr	r3, [pc, #28]	; (a1dc <USBHwCmd+0x28>)
    a1c0:	2230      	movs	r2, #48	; 0x30
    a1c2:	601a      	str	r2, [r3, #0]
    // write command code
    USBCmdCode = 0x00000500 | (bCmd << 16);
    a1c4:	4a06      	ldr	r2, [pc, #24]	; (a1e0 <USBHwCmd+0x2c>)
    a1c6:	79fb      	ldrb	r3, [r7, #7]
    a1c8:	041b      	lsls	r3, r3, #16
    a1ca:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
    a1ce:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    a1d0:	2010      	movs	r0, #16
    a1d2:	f7ff ffd7 	bl	a184 <Wait4DevInt>
}
    a1d6:	3708      	adds	r7, #8
    a1d8:	46bd      	mov	sp, r7
    a1da:	bd80      	pop	{r7, pc}
    a1dc:	5000c208 	.word	0x5000c208
    a1e0:	5000c210 	.word	0x5000c210

0000a1e4 <USBHwCmdWrite>:
        
    @param [in] bCmd        Command to send
    @param [in] bData       Data to send
 */
static void USBHwCmdWrite(U8 bCmd, U16 bData)
{
    a1e4:	b580      	push	{r7, lr}
    a1e6:	b082      	sub	sp, #8
    a1e8:	af00      	add	r7, sp, #0
    a1ea:	4603      	mov	r3, r0
    a1ec:	460a      	mov	r2, r1
    a1ee:	71fb      	strb	r3, [r7, #7]
    a1f0:	4613      	mov	r3, r2
    a1f2:	80bb      	strh	r3, [r7, #4]
    // write command code
    USBHwCmd(bCmd);
    a1f4:	79fb      	ldrb	r3, [r7, #7]
    a1f6:	4618      	mov	r0, r3
    a1f8:	f7ff ffdc 	bl	a1b4 <USBHwCmd>

    // write command data
    USBCmdCode = 0x00000100 | (bData << 16);
    a1fc:	4a05      	ldr	r2, [pc, #20]	; (a214 <USBHwCmdWrite+0x30>)
    a1fe:	88bb      	ldrh	r3, [r7, #4]
    a200:	041b      	lsls	r3, r3, #16
    a202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    a206:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CCEMTY);
    a208:	2010      	movs	r0, #16
    a20a:	f7ff ffbb 	bl	a184 <Wait4DevInt>
}
    a20e:	3708      	adds	r7, #8
    a210:	46bd      	mov	sp, r7
    a212:	bd80      	pop	{r7, pc}
    a214:	5000c210 	.word	0x5000c210

0000a218 <USBHwCmdRead>:
    @param [in] bCmd        Command to send

    @return the data
 */
static U8 USBHwCmdRead(U8 bCmd)
{
    a218:	b580      	push	{r7, lr}
    a21a:	b082      	sub	sp, #8
    a21c:	af00      	add	r7, sp, #0
    a21e:	4603      	mov	r3, r0
    a220:	71fb      	strb	r3, [r7, #7]
    // write command code
    USBHwCmd(bCmd);
    a222:	79fb      	ldrb	r3, [r7, #7]
    a224:	4618      	mov	r0, r3
    a226:	f7ff ffc5 	bl	a1b4 <USBHwCmd>
    
    // get data
    USBCmdCode = 0x00000200 | (bCmd << 16);
    a22a:	4a08      	ldr	r2, [pc, #32]	; (a24c <USBHwCmdRead+0x34>)
    a22c:	79fb      	ldrb	r3, [r7, #7]
    a22e:	041b      	lsls	r3, r3, #16
    a230:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a234:	6013      	str	r3, [r2, #0]
    Wait4DevInt(CDFULL);
    a236:	2020      	movs	r0, #32
    a238:	f7ff ffa4 	bl	a184 <Wait4DevInt>
    return USBCmdData;
    a23c:	4b04      	ldr	r3, [pc, #16]	; (a250 <USBHwCmdRead+0x38>)
    a23e:	681b      	ldr	r3, [r3, #0]
    a240:	b2db      	uxtb	r3, r3
}
    a242:	4618      	mov	r0, r3
    a244:	3708      	adds	r7, #8
    a246:	46bd      	mov	sp, r7
    a248:	bd80      	pop	{r7, pc}
    a24a:	bf00      	nop
    a24c:	5000c210 	.word	0x5000c210
    a250:	5000c214 	.word	0x5000c214

0000a254 <USBHwEPRealize>:
        
    @param [in] idx         Endpoint index
    @param [in] wMaxPSize   Maximum packet size for this endpoint
 */
static void USBHwEPRealize(int idx, U16 wMaxPSize)
{
    a254:	b580      	push	{r7, lr}
    a256:	b082      	sub	sp, #8
    a258:	af00      	add	r7, sp, #0
    a25a:	6078      	str	r0, [r7, #4]
    a25c:	460b      	mov	r3, r1
    a25e:	807b      	strh	r3, [r7, #2]
    USBReEp |= (1 << idx);
    a260:	490a      	ldr	r1, [pc, #40]	; (a28c <USBHwEPRealize+0x38>)
    a262:	4b0a      	ldr	r3, [pc, #40]	; (a28c <USBHwEPRealize+0x38>)
    a264:	681b      	ldr	r3, [r3, #0]
    a266:	2001      	movs	r0, #1
    a268:	687a      	ldr	r2, [r7, #4]
    a26a:	fa00 f202 	lsl.w	r2, r0, r2
    a26e:	4313      	orrs	r3, r2
    a270:	600b      	str	r3, [r1, #0]
#ifdef LPC17xx
    USBEpIn = idx;
    a272:	4a07      	ldr	r2, [pc, #28]	; (a290 <USBHwEPRealize+0x3c>)
    a274:	687b      	ldr	r3, [r7, #4]
    a276:	6013      	str	r3, [r2, #0]
#else
    USBEpInd = idx;
#endif
    USBMaxPSize = wMaxPSize;
    a278:	4a06      	ldr	r2, [pc, #24]	; (a294 <USBHwEPRealize+0x40>)
    a27a:	887b      	ldrh	r3, [r7, #2]
    a27c:	6013      	str	r3, [r2, #0]
    Wait4DevInt(EP_RLZED);
    a27e:	f44f 7080 	mov.w	r0, #256	; 0x100
    a282:	f7ff ff7f 	bl	a184 <Wait4DevInt>
}
    a286:	3708      	adds	r7, #8
    a288:	46bd      	mov	sp, r7
    a28a:	bd80      	pop	{r7, pc}
    a28c:	5000c244 	.word	0x5000c244
    a290:	5000c248 	.word	0x5000c248
    a294:	5000c24c 	.word	0x5000c24c

0000a298 <USBHwEPEnable>:
        
    @param [in] idx     Endpoint index
    @param [in] fEnable TRUE to enable, FALSE to disable
 */
static void USBHwEPEnable(int idx, BOOL fEnable)
{
    a298:	b580      	push	{r7, lr}
    a29a:	b082      	sub	sp, #8
    a29c:	af00      	add	r7, sp, #0
    a29e:	6078      	str	r0, [r7, #4]
    a2a0:	6039      	str	r1, [r7, #0]
    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fEnable ? 0 : EP_DA);
    a2a2:	687b      	ldr	r3, [r7, #4]
    a2a4:	b2db      	uxtb	r3, r3
    a2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a2aa:	b2db      	uxtb	r3, r3
    a2ac:	b2da      	uxtb	r2, r3
    a2ae:	683b      	ldr	r3, [r7, #0]
    a2b0:	2b00      	cmp	r3, #0
    a2b2:	d001      	beq.n	a2b8 <USBHwEPEnable+0x20>
    a2b4:	2300      	movs	r3, #0
    a2b6:	e000      	b.n	a2ba <USBHwEPEnable+0x22>
    a2b8:	2320      	movs	r3, #32
    a2ba:	4610      	mov	r0, r2
    a2bc:	4619      	mov	r1, r3
    a2be:	f7ff ff91 	bl	a1e4 <USBHwCmdWrite>
}
    a2c2:	3708      	adds	r7, #8
    a2c4:	46bd      	mov	sp, r7
    a2c6:	bd80      	pop	{r7, pc}

0000a2c8 <USBHwEPConfig>:
        
    @param [in] bEP             Endpoint number
    @param [in] wMaxPacketSize  Maximum packet size for this EP
 */
void USBHwEPConfig(U8 bEP, U16 wMaxPacketSize)
{
    a2c8:	b580      	push	{r7, lr}
    a2ca:	b084      	sub	sp, #16
    a2cc:	af00      	add	r7, sp, #0
    a2ce:	4603      	mov	r3, r0
    a2d0:	460a      	mov	r2, r1
    a2d2:	71fb      	strb	r3, [r7, #7]
    a2d4:	4613      	mov	r3, r2
    a2d6:	80bb      	strh	r3, [r7, #4]
    int idx;
    
    idx = EP2IDX(bEP);
    a2d8:	79fb      	ldrb	r3, [r7, #7]
    a2da:	f003 030f 	and.w	r3, r3, #15
    a2de:	005b      	lsls	r3, r3, #1
    a2e0:	79fa      	ldrb	r2, [r7, #7]
    a2e2:	09d2      	lsrs	r2, r2, #7
    a2e4:	b2d2      	uxtb	r2, r2
    a2e6:	4313      	orrs	r3, r2
    a2e8:	60fb      	str	r3, [r7, #12]
    
    // realise EP
    USBHwEPRealize(idx, wMaxPacketSize);
    a2ea:	88bb      	ldrh	r3, [r7, #4]
    a2ec:	68f8      	ldr	r0, [r7, #12]
    a2ee:	4619      	mov	r1, r3
    a2f0:	f7ff ffb0 	bl	a254 <USBHwEPRealize>

    // enable EP
    USBHwEPEnable(idx, TRUE);
    a2f4:	68f8      	ldr	r0, [r7, #12]
    a2f6:	2101      	movs	r1, #1
    a2f8:	f7ff ffce 	bl	a298 <USBHwEPEnable>
}
    a2fc:	3710      	adds	r7, #16
    a2fe:	46bd      	mov	sp, r7
    a300:	bd80      	pop	{r7, pc}
    a302:	bf00      	nop

0000a304 <USBHwRegisterEPIntHandler>:
        
    @param [in] bEP             Endpoint number
    @param [in] pfnHandler      Callback function
 */
void USBHwRegisterEPIntHandler(U8 bEP, TFnEPIntHandler *pfnHandler)
{
    a304:	b480      	push	{r7}
    a306:	b085      	sub	sp, #20
    a308:	af00      	add	r7, sp, #0
    a30a:	4603      	mov	r3, r0
    a30c:	6039      	str	r1, [r7, #0]
    a30e:	71fb      	strb	r3, [r7, #7]
    int idx;
    
    idx = EP2IDX(bEP);
    a310:	79fb      	ldrb	r3, [r7, #7]
    a312:	f003 030f 	and.w	r3, r3, #15
    a316:	005b      	lsls	r3, r3, #1
    a318:	79fa      	ldrb	r2, [r7, #7]
    a31a:	09d2      	lsrs	r2, r2, #7
    a31c:	b2d2      	uxtb	r2, r2
    a31e:	4313      	orrs	r3, r2
    a320:	60fb      	str	r3, [r7, #12]

    ASSERT(idx<32);

    /* add handler to list of EP handlers */
    _apfnEPIntHandlers[idx / 2] = pfnHandler;
    a322:	68fb      	ldr	r3, [r7, #12]
    a324:	0fda      	lsrs	r2, r3, #31
    a326:	4413      	add	r3, r2
    a328:	105b      	asrs	r3, r3, #1
    a32a:	4619      	mov	r1, r3
    a32c:	4a0b      	ldr	r2, [pc, #44]	; (a35c <USBHwRegisterEPIntHandler+0x58>)
    a32e:	683b      	ldr	r3, [r7, #0]
    a330:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    
    /* enable EP interrupt */
    USBEpIntEn |= (1 << idx);
    a334:	490a      	ldr	r1, [pc, #40]	; (a360 <USBHwRegisterEPIntHandler+0x5c>)
    a336:	4b0a      	ldr	r3, [pc, #40]	; (a360 <USBHwRegisterEPIntHandler+0x5c>)
    a338:	681b      	ldr	r3, [r3, #0]
    a33a:	2001      	movs	r0, #1
    a33c:	68fa      	ldr	r2, [r7, #12]
    a33e:	fa00 f202 	lsl.w	r2, r0, r2
    a342:	4313      	orrs	r3, r2
    a344:	600b      	str	r3, [r1, #0]
    USBDevIntEn |= EP_SLOW;
    a346:	4a07      	ldr	r2, [pc, #28]	; (a364 <USBHwRegisterEPIntHandler+0x60>)
    a348:	4b06      	ldr	r3, [pc, #24]	; (a364 <USBHwRegisterEPIntHandler+0x60>)
    a34a:	681b      	ldr	r3, [r3, #0]
    a34c:	f043 0304 	orr.w	r3, r3, #4
    a350:	6013      	str	r3, [r2, #0]
    
    DBG("Registered handler for EP 0x%x\n", bEP);
}
    a352:	3714      	adds	r7, #20
    a354:	46bd      	mov	sp, r7
    a356:	f85d 7b04 	ldr.w	r7, [sp], #4
    a35a:	4770      	bx	lr
    a35c:	10000aac 	.word	0x10000aac
    a360:	5000c234 	.word	0x5000c234
    a364:	5000c204 	.word	0x5000c204

0000a368 <USBHwRegisterDevIntHandler>:
    Registers an device status callback
        
    @param [in] pfnHandler  Callback function
 */
void USBHwRegisterDevIntHandler(TFnDevIntHandler *pfnHandler)
{
    a368:	b480      	push	{r7}
    a36a:	b083      	sub	sp, #12
    a36c:	af00      	add	r7, sp, #0
    a36e:	6078      	str	r0, [r7, #4]
    _pfnDevIntHandler = pfnHandler;
    a370:	4a06      	ldr	r2, [pc, #24]	; (a38c <USBHwRegisterDevIntHandler+0x24>)
    a372:	687b      	ldr	r3, [r7, #4]
    a374:	6013      	str	r3, [r2, #0]
    
    // enable device interrupt
    USBDevIntEn |= DEV_STAT;
    a376:	4a06      	ldr	r2, [pc, #24]	; (a390 <USBHwRegisterDevIntHandler+0x28>)
    a378:	4b05      	ldr	r3, [pc, #20]	; (a390 <USBHwRegisterDevIntHandler+0x28>)
    a37a:	681b      	ldr	r3, [r3, #0]
    a37c:	f043 0308 	orr.w	r3, r3, #8
    a380:	6013      	str	r3, [r2, #0]

    DBG("Registered handler for device status\n");
}
    a382:	370c      	adds	r7, #12
    a384:	46bd      	mov	sp, r7
    a386:	f85d 7b04 	ldr.w	r7, [sp], #4
    a38a:	4770      	bx	lr
    a38c:	10000aa8 	.word	0x10000aa8
    a390:	5000c204 	.word	0x5000c204

0000a394 <USBHwSetAddress>:
    Sets the USB address.
        
    @param [in] bAddr       Device address to set
 */
void USBHwSetAddress(U8 bAddr)
{
    a394:	b580      	push	{r7, lr}
    a396:	b082      	sub	sp, #8
    a398:	af00      	add	r7, sp, #0
    a39a:	4603      	mov	r3, r0
    a39c:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_ADDRESS, DEV_EN | bAddr);
    a39e:	79fb      	ldrb	r3, [r7, #7]
    a3a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a3a4:	b2db      	uxtb	r3, r3
    a3a6:	b29b      	uxth	r3, r3
    a3a8:	20d0      	movs	r0, #208	; 0xd0
    a3aa:	4619      	mov	r1, r3
    a3ac:	f7ff ff1a 	bl	a1e4 <USBHwCmdWrite>
}
    a3b0:	3708      	adds	r7, #8
    a3b2:	46bd      	mov	sp, r7
    a3b4:	bd80      	pop	{r7, pc}
    a3b6:	bf00      	nop

0000a3b8 <USBHwConnect>:
    Connects or disconnects from the USB bus
        
    @param [in] fConnect    If TRUE, connect, otherwise disconnect
 */
void USBHwConnect(BOOL fConnect)
{
    a3b8:	b580      	push	{r7, lr}
    a3ba:	b082      	sub	sp, #8
    a3bc:	af00      	add	r7, sp, #0
    a3be:	6078      	str	r0, [r7, #4]
    FIO0CLR = (1<<14);
  else
    FIO0SET = (1<<14);
#endif
#endif
    USBHwCmdWrite(CMD_DEV_STATUS, fConnect ? CON : 0);
    a3c0:	687b      	ldr	r3, [r7, #4]
    a3c2:	2b00      	cmp	r3, #0
    a3c4:	bf14      	ite	ne
    a3c6:	2301      	movne	r3, #1
    a3c8:	2300      	moveq	r3, #0
    a3ca:	b2db      	uxtb	r3, r3
    a3cc:	b29b      	uxth	r3, r3
    a3ce:	20fe      	movs	r0, #254	; 0xfe
    a3d0:	4619      	mov	r1, r3
    a3d2:	f7ff ff07 	bl	a1e4 <USBHwCmdWrite>
}
    a3d6:	3708      	adds	r7, #8
    a3d8:	46bd      	mov	sp, r7
    a3da:	bd80      	pop	{r7, pc}

0000a3dc <USBHwNakIntEnable>:
    from NAK interrupt by checking the bits in their bEPStatus argument.
    
    @param [in] bIntBits    Bitmap indicating which NAK interrupts to enable
 */
void USBHwNakIntEnable(U8 bIntBits)
{
    a3dc:	b580      	push	{r7, lr}
    a3de:	b082      	sub	sp, #8
    a3e0:	af00      	add	r7, sp, #0
    a3e2:	4603      	mov	r3, r0
    a3e4:	71fb      	strb	r3, [r7, #7]
    USBHwCmdWrite(CMD_DEV_SET_MODE, bIntBits);
    a3e6:	79fb      	ldrb	r3, [r7, #7]
    a3e8:	b29b      	uxth	r3, r3
    a3ea:	20f3      	movs	r0, #243	; 0xf3
    a3ec:	4619      	mov	r1, r3
    a3ee:	f7ff fef9 	bl	a1e4 <USBHwCmdWrite>
}
    a3f2:	3708      	adds	r7, #8
    a3f4:	46bd      	mov	sp, r7
    a3f6:	bd80      	pop	{r7, pc}

0000a3f8 <USBHwEPGetStatus>:
        
    @param [in] bEP     Endpoint number
    @return Endpoint status byte (containing EP_STATUS_xxx bits)
 */
U8  USBHwEPGetStatus(U8 bEP)
{
    a3f8:	b580      	push	{r7, lr}
    a3fa:	b084      	sub	sp, #16
    a3fc:	af00      	add	r7, sp, #0
    a3fe:	4603      	mov	r3, r0
    a400:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    a402:	79fb      	ldrb	r3, [r7, #7]
    a404:	f003 030f 	and.w	r3, r3, #15
    a408:	005b      	lsls	r3, r3, #1
    a40a:	79fa      	ldrb	r2, [r7, #7]
    a40c:	09d2      	lsrs	r2, r2, #7
    a40e:	b2d2      	uxtb	r2, r2
    a410:	4313      	orrs	r3, r2
    a412:	60fb      	str	r3, [r7, #12]

    return USBHwCmdRead(CMD_EP_SELECT | idx);
    a414:	68fb      	ldr	r3, [r7, #12]
    a416:	b2db      	uxtb	r3, r3
    a418:	4618      	mov	r0, r3
    a41a:	f7ff fefd 	bl	a218 <USBHwCmdRead>
    a41e:	4603      	mov	r3, r0
}
    a420:	4618      	mov	r0, r3
    a422:	3710      	adds	r7, #16
    a424:	46bd      	mov	sp, r7
    a426:	bd80      	pop	{r7, pc}

0000a428 <USBHwEPStall>:
        
    @param [in] bEP     Endpoint number
    @param [in] fStall  TRUE to stall, FALSE to unstall
 */
void USBHwEPStall(U8 bEP, BOOL fStall)
{
    a428:	b580      	push	{r7, lr}
    a42a:	b084      	sub	sp, #16
    a42c:	af00      	add	r7, sp, #0
    a42e:	4603      	mov	r3, r0
    a430:	6039      	str	r1, [r7, #0]
    a432:	71fb      	strb	r3, [r7, #7]
    int idx = EP2IDX(bEP);
    a434:	79fb      	ldrb	r3, [r7, #7]
    a436:	f003 030f 	and.w	r3, r3, #15
    a43a:	005b      	lsls	r3, r3, #1
    a43c:	79fa      	ldrb	r2, [r7, #7]
    a43e:	09d2      	lsrs	r2, r2, #7
    a440:	b2d2      	uxtb	r2, r2
    a442:	4313      	orrs	r3, r2
    a444:	60fb      	str	r3, [r7, #12]

    USBHwCmdWrite(CMD_EP_SET_STATUS | idx, fStall ? EP_ST : 0);
    a446:	68fb      	ldr	r3, [r7, #12]
    a448:	b2db      	uxtb	r3, r3
    a44a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    a44e:	b2db      	uxtb	r3, r3
    a450:	b2da      	uxtb	r2, r3
    a452:	683b      	ldr	r3, [r7, #0]
    a454:	2b00      	cmp	r3, #0
    a456:	bf14      	ite	ne
    a458:	2301      	movne	r3, #1
    a45a:	2300      	moveq	r3, #0
    a45c:	b2db      	uxtb	r3, r3
    a45e:	b29b      	uxth	r3, r3
    a460:	4610      	mov	r0, r2
    a462:	4619      	mov	r1, r3
    a464:	f7ff febe 	bl	a1e4 <USBHwCmdWrite>
}
    a468:	3710      	adds	r7, #16
    a46a:	46bd      	mov	sp, r7
    a46c:	bd80      	pop	{r7, pc}
    a46e:	bf00      	nop

0000a470 <USBHwEPWrite>:
    @param [in] iLen    Number of bytes to write
            
    @return number of bytes written into the endpoint buffer
*/
int USBHwEPWrite(U8 bEP, U8 *pbBuf, U32 iLen)
{
    a470:	b580      	push	{r7, lr}
    a472:	b086      	sub	sp, #24
    a474:	af00      	add	r7, sp, #0
    a476:	4603      	mov	r3, r0
    a478:	60b9      	str	r1, [r7, #8]
    a47a:	607a      	str	r2, [r7, #4]
    a47c:	73fb      	strb	r3, [r7, #15]
    U32 idx;
    
    idx = EP2IDX(bEP);
    a47e:	7bfb      	ldrb	r3, [r7, #15]
    a480:	f003 030f 	and.w	r3, r3, #15
    a484:	005b      	lsls	r3, r3, #1
    a486:	7bfa      	ldrb	r2, [r7, #15]
    a488:	09d2      	lsrs	r2, r2, #7
    a48a:	b2d2      	uxtb	r2, r2
    a48c:	4313      	orrs	r3, r2
    a48e:	617b      	str	r3, [r7, #20]
    
    // set write enable for specific endpoint
    USBCtrl = WR_EN | ((bEP & 0xF) << 2);
    a490:	4a1b      	ldr	r2, [pc, #108]	; (a500 <USBHwEPWrite+0x90>)
    a492:	7bfb      	ldrb	r3, [r7, #15]
    a494:	f003 030f 	and.w	r3, r3, #15
    a498:	009b      	lsls	r3, r3, #2
    a49a:	f043 0302 	orr.w	r3, r3, #2
    a49e:	6013      	str	r3, [r2, #0]
    
    // set packet length
    USBTxPLen = iLen;
    a4a0:	4a18      	ldr	r2, [pc, #96]	; (a504 <USBHwEPWrite+0x94>)
    a4a2:	687b      	ldr	r3, [r7, #4]
    a4a4:	6013      	str	r3, [r2, #0]
    
    // write data
    while (USBCtrl & WR_EN) {
    a4a6:	e015      	b.n	a4d4 <USBHwEPWrite+0x64>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
    a4a8:	4917      	ldr	r1, [pc, #92]	; (a508 <USBHwEPWrite+0x98>)
    a4aa:	68bb      	ldr	r3, [r7, #8]
    a4ac:	3303      	adds	r3, #3
    a4ae:	781b      	ldrb	r3, [r3, #0]
    a4b0:	061a      	lsls	r2, r3, #24
    a4b2:	68bb      	ldr	r3, [r7, #8]
    a4b4:	3302      	adds	r3, #2
    a4b6:	781b      	ldrb	r3, [r3, #0]
    a4b8:	041b      	lsls	r3, r3, #16
    a4ba:	431a      	orrs	r2, r3
    a4bc:	68bb      	ldr	r3, [r7, #8]
    a4be:	3301      	adds	r3, #1
    a4c0:	781b      	ldrb	r3, [r3, #0]
    a4c2:	021b      	lsls	r3, r3, #8
    a4c4:	4313      	orrs	r3, r2
    a4c6:	68ba      	ldr	r2, [r7, #8]
    a4c8:	7812      	ldrb	r2, [r2, #0]
    a4ca:	4313      	orrs	r3, r2
    a4cc:	600b      	str	r3, [r1, #0]
        pbBuf += 4;
    a4ce:	68bb      	ldr	r3, [r7, #8]
    a4d0:	3304      	adds	r3, #4
    a4d2:	60bb      	str	r3, [r7, #8]
    
    // set packet length
    USBTxPLen = iLen;
    
    // write data
    while (USBCtrl & WR_EN) {
    a4d4:	4b0a      	ldr	r3, [pc, #40]	; (a500 <USBHwEPWrite+0x90>)
    a4d6:	681b      	ldr	r3, [r3, #0]
    a4d8:	f003 0302 	and.w	r3, r3, #2
    a4dc:	2b00      	cmp	r3, #0
    a4de:	d1e3      	bne.n	a4a8 <USBHwEPWrite+0x38>
        USBTxData = (pbBuf[3] << 24) | (pbBuf[2] << 16) | (pbBuf[1] << 8) | pbBuf[0];
        pbBuf += 4;
    }

    USBCtrl = 0;
    a4e0:	4b07      	ldr	r3, [pc, #28]	; (a500 <USBHwEPWrite+0x90>)
    a4e2:	2200      	movs	r2, #0
    a4e4:	601a      	str	r2, [r3, #0]

    // select endpoint and validate buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    a4e6:	697b      	ldr	r3, [r7, #20]
    a4e8:	b2db      	uxtb	r3, r3
    a4ea:	4618      	mov	r0, r3
    a4ec:	f7ff fe62 	bl	a1b4 <USBHwCmd>
    USBHwCmd(CMD_EP_VALIDATE_BUFFER);
    a4f0:	20fa      	movs	r0, #250	; 0xfa
    a4f2:	f7ff fe5f 	bl	a1b4 <USBHwCmd>
    
    return iLen;
    a4f6:	687b      	ldr	r3, [r7, #4]
}
    a4f8:	4618      	mov	r0, r3
    a4fa:	3718      	adds	r7, #24
    a4fc:	46bd      	mov	sp, r7
    a4fe:	bd80      	pop	{r7, pc}
    a500:	5000c228 	.word	0x5000c228
    a504:	5000c224 	.word	0x5000c224
    a508:	5000c21c 	.word	0x5000c21c

0000a50c <USBHwEPRead>:
            
    @return the number of bytes available in the EP (possibly more than iMaxLen),
    or <0 in case of error.
 */
int USBHwEPRead(U8 bEP, U8 *pbBuf, U32 iMaxLen)
{
    a50c:	b580      	push	{r7, lr}
    a50e:	b088      	sub	sp, #32
    a510:	af00      	add	r7, sp, #0
    a512:	4603      	mov	r3, r0
    a514:	60b9      	str	r1, [r7, #8]
    a516:	607a      	str	r2, [r7, #4]
    a518:	73fb      	strb	r3, [r7, #15]
    U32 i, idx;
    U32 dwData, dwLen;
    
    idx = EP2IDX(bEP);
    a51a:	7bfb      	ldrb	r3, [r7, #15]
    a51c:	f003 030f 	and.w	r3, r3, #15
    a520:	005b      	lsls	r3, r3, #1
    a522:	7bfa      	ldrb	r2, [r7, #15]
    a524:	09d2      	lsrs	r2, r2, #7
    a526:	b2d2      	uxtb	r2, r2
    a528:	4313      	orrs	r3, r2
    a52a:	617b      	str	r3, [r7, #20]
    
    // set read enable bit for specific endpoint
    USBCtrl = RD_EN | ((bEP & 0xF) << 2);
    a52c:	4a27      	ldr	r2, [pc, #156]	; (a5cc <USBHwEPRead+0xc0>)
    a52e:	7bfb      	ldrb	r3, [r7, #15]
    a530:	f003 030f 	and.w	r3, r3, #15
    a534:	009b      	lsls	r3, r3, #2
    a536:	f043 0301 	orr.w	r3, r3, #1
    a53a:	6013      	str	r3, [r2, #0]
    
    // wait for PKT_RDY
    do {
        dwLen = USBRxPLen;
    a53c:	4b24      	ldr	r3, [pc, #144]	; (a5d0 <USBHwEPRead+0xc4>)
    a53e:	681b      	ldr	r3, [r3, #0]
    a540:	613b      	str	r3, [r7, #16]
    } while ((dwLen & PKT_RDY) == 0);
    a542:	693b      	ldr	r3, [r7, #16]
    a544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
    a548:	2b00      	cmp	r3, #0
    a54a:	d0f7      	beq.n	a53c <USBHwEPRead+0x30>
    
    // packet valid?
    if ((dwLen & DV) == 0) {
    a54c:	693b      	ldr	r3, [r7, #16]
    a54e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    a552:	2b00      	cmp	r3, #0
    a554:	d102      	bne.n	a55c <USBHwEPRead+0x50>
        return -1;
    a556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    a55a:	e033      	b.n	a5c4 <USBHwEPRead+0xb8>
    }
    
    // get length
    dwLen &= PKT_LNGTH_MASK;
    a55c:	693b      	ldr	r3, [r7, #16]
    a55e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    a562:	613b      	str	r3, [r7, #16]
    
    // get data
    dwData = 0;
    a564:	2300      	movs	r3, #0
    a566:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < dwLen; i++) {
    a568:	2300      	movs	r3, #0
    a56a:	61fb      	str	r3, [r7, #28]
    a56c:	e01a      	b.n	a5a4 <USBHwEPRead+0x98>
        if ((i % 4) == 0) {
    a56e:	69fb      	ldr	r3, [r7, #28]
    a570:	f003 0303 	and.w	r3, r3, #3
    a574:	2b00      	cmp	r3, #0
    a576:	d102      	bne.n	a57e <USBHwEPRead+0x72>
            dwData = USBRxData;
    a578:	4b16      	ldr	r3, [pc, #88]	; (a5d4 <USBHwEPRead+0xc8>)
    a57a:	681b      	ldr	r3, [r3, #0]
    a57c:	61bb      	str	r3, [r7, #24]
        }
        if ((pbBuf != NULL) && (i < iMaxLen)) {
    a57e:	68bb      	ldr	r3, [r7, #8]
    a580:	2b00      	cmp	r3, #0
    a582:	d009      	beq.n	a598 <USBHwEPRead+0x8c>
    a584:	69fa      	ldr	r2, [r7, #28]
    a586:	687b      	ldr	r3, [r7, #4]
    a588:	429a      	cmp	r2, r3
    a58a:	d205      	bcs.n	a598 <USBHwEPRead+0x8c>
            pbBuf[i] = dwData & 0xFF;
    a58c:	68ba      	ldr	r2, [r7, #8]
    a58e:	69fb      	ldr	r3, [r7, #28]
    a590:	4413      	add	r3, r2
    a592:	69ba      	ldr	r2, [r7, #24]
    a594:	b2d2      	uxtb	r2, r2
    a596:	701a      	strb	r2, [r3, #0]
        }
        dwData >>= 8;
    a598:	69bb      	ldr	r3, [r7, #24]
    a59a:	0a1b      	lsrs	r3, r3, #8
    a59c:	61bb      	str	r3, [r7, #24]
    // get length
    dwLen &= PKT_LNGTH_MASK;
    
    // get data
    dwData = 0;
    for (i = 0; i < dwLen; i++) {
    a59e:	69fb      	ldr	r3, [r7, #28]
    a5a0:	3301      	adds	r3, #1
    a5a2:	61fb      	str	r3, [r7, #28]
    a5a4:	69fa      	ldr	r2, [r7, #28]
    a5a6:	693b      	ldr	r3, [r7, #16]
    a5a8:	429a      	cmp	r2, r3
    a5aa:	d3e0      	bcc.n	a56e <USBHwEPRead+0x62>
        }
        dwData >>= 8;
    }

    // make sure RD_EN is clear
    USBCtrl = 0;
    a5ac:	4b07      	ldr	r3, [pc, #28]	; (a5cc <USBHwEPRead+0xc0>)
    a5ae:	2200      	movs	r2, #0
    a5b0:	601a      	str	r2, [r3, #0]

    // select endpoint and clear buffer
    USBHwCmd(CMD_EP_SELECT | idx);
    a5b2:	697b      	ldr	r3, [r7, #20]
    a5b4:	b2db      	uxtb	r3, r3
    a5b6:	4618      	mov	r0, r3
    a5b8:	f7ff fdfc 	bl	a1b4 <USBHwCmd>
    USBHwCmd(CMD_EP_CLEAR_BUFFER);
    a5bc:	20f2      	movs	r0, #242	; 0xf2
    a5be:	f7ff fdf9 	bl	a1b4 <USBHwCmd>
    
    return dwLen;
    a5c2:	693b      	ldr	r3, [r7, #16]
}
    a5c4:	4618      	mov	r0, r3
    a5c6:	3720      	adds	r7, #32
    a5c8:	46bd      	mov	sp, r7
    a5ca:	bd80      	pop	{r7, pc}
    a5cc:	5000c228 	.word	0x5000c228
    a5d0:	5000c220 	.word	0x5000c220
    a5d4:	5000c218 	.word	0x5000c218

0000a5d8 <USBHwConfigDevice>:
    'configured' bit is set in the device status register.
        
    @param [in] fConfigured If TRUE, configure device, else unconfigure
 */
void USBHwConfigDevice(BOOL fConfigured)
{
    a5d8:	b580      	push	{r7, lr}
    a5da:	b082      	sub	sp, #8
    a5dc:	af00      	add	r7, sp, #0
    a5de:	6078      	str	r0, [r7, #4]
    // set configured bit
    USBHwCmdWrite(CMD_DEV_CONFIG, fConfigured ? CONF_DEVICE : 0);
    a5e0:	687b      	ldr	r3, [r7, #4]
    a5e2:	2b00      	cmp	r3, #0
    a5e4:	bf14      	ite	ne
    a5e6:	2301      	movne	r3, #1
    a5e8:	2300      	moveq	r3, #0
    a5ea:	b2db      	uxtb	r3, r3
    a5ec:	b29b      	uxth	r3, r3
    a5ee:	20d8      	movs	r0, #216	; 0xd8
    a5f0:	4619      	mov	r1, r3
    a5f2:	f7ff fdf7 	bl	a1e4 <USBHwCmdWrite>
}
    a5f6:	3708      	adds	r7, #8
    a5f8:	46bd      	mov	sp, r7
    a5fa:	bd80      	pop	{r7, pc}

0000a5fc <USBHwISR>:
    @todo Get all 11 bits of frame number instead of just 8

    Endpoint interrupts are mapped to the slow interrupt
 */
void USBHwISR(void)
{
    a5fc:	b580      	push	{r7, lr}
    a5fe:	b086      	sub	sp, #24
    a600:	af00      	add	r7, sp, #0

// LED9 monitors total time in interrupt routine
DEBUG_LED_ON(9);

    // handle device interrupts
    dwStatus = USBDevIntSt;
    a602:	4b5b      	ldr	r3, [pc, #364]	; (a770 <USBHwISR+0x174>)
    a604:	681b      	ldr	r3, [r3, #0]
    a606:	613b      	str	r3, [r7, #16]
    
    // frame interrupt
    if (dwStatus & FRAME) {
    a608:	693b      	ldr	r3, [r7, #16]
    a60a:	f003 0301 	and.w	r3, r3, #1
    a60e:	2b00      	cmp	r3, #0
    a610:	d010      	beq.n	a634 <USBHwISR+0x38>
        // clear int
        USBDevIntClr = FRAME;
    a612:	4b58      	ldr	r3, [pc, #352]	; (a774 <USBHwISR+0x178>)
    a614:	2201      	movs	r2, #1
    a616:	601a      	str	r2, [r3, #0]
        // call handler
        if (_pfnFrameHandler != NULL) {
    a618:	4b57      	ldr	r3, [pc, #348]	; (a778 <USBHwISR+0x17c>)
    a61a:	681b      	ldr	r3, [r3, #0]
    a61c:	2b00      	cmp	r3, #0
    a61e:	d009      	beq.n	a634 <USBHwISR+0x38>
            wFrame = USBHwCmdRead(CMD_DEV_READ_CUR_FRAME_NR);
    a620:	20f5      	movs	r0, #245	; 0xf5
    a622:	f7ff fdf9 	bl	a218 <USBHwCmdRead>
    a626:	4603      	mov	r3, r0
    a628:	81fb      	strh	r3, [r7, #14]
            _pfnFrameHandler(wFrame);
    a62a:	4b53      	ldr	r3, [pc, #332]	; (a778 <USBHwISR+0x17c>)
    a62c:	681b      	ldr	r3, [r3, #0]
    a62e:	89fa      	ldrh	r2, [r7, #14]
    a630:	4610      	mov	r0, r2
    a632:	4798      	blx	r3
        }
    }
    
    // device status interrupt
    if (dwStatus & DEV_STAT) {
    a634:	693b      	ldr	r3, [r7, #16]
    a636:	f003 0308 	and.w	r3, r3, #8
    a63a:	2b00      	cmp	r3, #0
    a63c:	d02b      	beq.n	a696 <USBHwISR+0x9a>
        /*  Clear DEV_STAT interrupt before reading DEV_STAT register.
            This prevents corrupted device status reads, see
            LPC2148 User manual revision 2, 25 july 2006.
        */
        USBDevIntClr = DEV_STAT;
    a63e:	4b4d      	ldr	r3, [pc, #308]	; (a774 <USBHwISR+0x178>)
    a640:	2208      	movs	r2, #8
    a642:	601a      	str	r2, [r3, #0]
        bDevStat = USBHwCmdRead(CMD_DEV_STATUS);
    a644:	20fe      	movs	r0, #254	; 0xfe
    a646:	f7ff fde7 	bl	a218 <USBHwCmdRead>
    a64a:	4603      	mov	r3, r0
    a64c:	737b      	strb	r3, [r7, #13]
        if (bDevStat & (CON_CH | SUS_CH | RST)) {
    a64e:	7b7b      	ldrb	r3, [r7, #13]
    a650:	f003 031a 	and.w	r3, r3, #26
    a654:	2b00      	cmp	r3, #0
    a656:	d01e      	beq.n	a696 <USBHwISR+0x9a>
            // convert device status into something HW independent
            bStat = ((bDevStat & CON) ? DEV_STATUS_CONNECT : 0) |
    a658:	7b7b      	ldrb	r3, [r7, #13]
    a65a:	f003 0301 	and.w	r3, r3, #1
    a65e:	2b00      	cmp	r3, #0
    a660:	bf14      	ite	ne
    a662:	2301      	movne	r3, #1
    a664:	2300      	moveq	r3, #0
    a666:	b2db      	uxtb	r3, r3
    a668:	b2da      	uxtb	r2, r3
    a66a:	7b7b      	ldrb	r3, [r7, #13]
    a66c:	f003 0304 	and.w	r3, r3, #4
    a670:	b2db      	uxtb	r3, r3
    a672:	4313      	orrs	r3, r2
    a674:	b2da      	uxtb	r2, r3
    a676:	7b7b      	ldrb	r3, [r7, #13]
    a678:	f003 0310 	and.w	r3, r3, #16
    a67c:	b2db      	uxtb	r3, r3
    a67e:	4313      	orrs	r3, r2
    a680:	b2db      	uxtb	r3, r3
    a682:	733b      	strb	r3, [r7, #12]
                    ((bDevStat & SUS) ? DEV_STATUS_SUSPEND : 0) |
                    ((bDevStat & RST) ? DEV_STATUS_RESET : 0);
            // call handler
            if (_pfnDevIntHandler != NULL) {
    a684:	4b3d      	ldr	r3, [pc, #244]	; (a77c <USBHwISR+0x180>)
    a686:	681b      	ldr	r3, [r3, #0]
    a688:	2b00      	cmp	r3, #0
    a68a:	d004      	beq.n	a696 <USBHwISR+0x9a>
DEBUG_LED_ON(8);        
                _pfnDevIntHandler(bStat);
    a68c:	4b3b      	ldr	r3, [pc, #236]	; (a77c <USBHwISR+0x180>)
    a68e:	681b      	ldr	r3, [r3, #0]
    a690:	7b3a      	ldrb	r2, [r7, #12]
    a692:	4610      	mov	r0, r2
    a694:	4798      	blx	r3
            }
        }
    }
    
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
    a696:	693b      	ldr	r3, [r7, #16]
    a698:	f003 0304 	and.w	r3, r3, #4
    a69c:	2b00      	cmp	r3, #0
    a69e:	d063      	beq.n	a768 <USBHwISR+0x16c>
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
    a6a0:	4b34      	ldr	r3, [pc, #208]	; (a774 <USBHwISR+0x178>)
    a6a2:	2204      	movs	r2, #4
    a6a4:	601a      	str	r2, [r3, #0]
        // check all endpoints
        for (i = 0; i < 32; i++) {
    a6a6:	2300      	movs	r3, #0
    a6a8:	617b      	str	r3, [r7, #20]
    a6aa:	e05a      	b.n	a762 <USBHwISR+0x166>
            dwIntBit = (1 << i);
    a6ac:	2201      	movs	r2, #1
    a6ae:	697b      	ldr	r3, [r7, #20]
    a6b0:	fa02 f303 	lsl.w	r3, r2, r3
    a6b4:	60bb      	str	r3, [r7, #8]
            if (USBEpIntSt & dwIntBit) {
    a6b6:	4b32      	ldr	r3, [pc, #200]	; (a780 <USBHwISR+0x184>)
    a6b8:	681a      	ldr	r2, [r3, #0]
    a6ba:	68bb      	ldr	r3, [r7, #8]
    a6bc:	4013      	ands	r3, r2
    a6be:	2b00      	cmp	r3, #0
    a6c0:	d04c      	beq.n	a75c <USBHwISR+0x160>
                // clear int (and retrieve status)
                USBEpIntClr = dwIntBit;
    a6c2:	4a30      	ldr	r2, [pc, #192]	; (a784 <USBHwISR+0x188>)
    a6c4:	68bb      	ldr	r3, [r7, #8]
    a6c6:	6013      	str	r3, [r2, #0]
                Wait4DevInt(CDFULL);
    a6c8:	2020      	movs	r0, #32
    a6ca:	f7ff fd5b 	bl	a184 <Wait4DevInt>
                bEPStat = USBCmdData;
    a6ce:	4b2e      	ldr	r3, [pc, #184]	; (a788 <USBHwISR+0x18c>)
    a6d0:	681b      	ldr	r3, [r3, #0]
    a6d2:	71fb      	strb	r3, [r7, #7]
                // convert EP pipe stat into something HW independent
                bStat = ((bEPStat & EPSTAT_FE) ? EP_STATUS_DATA : 0) |
    a6d4:	79fb      	ldrb	r3, [r7, #7]
    a6d6:	f003 0301 	and.w	r3, r3, #1
    a6da:	2b00      	cmp	r3, #0
    a6dc:	bf14      	ite	ne
    a6de:	2301      	movne	r3, #1
    a6e0:	2300      	moveq	r3, #0
    a6e2:	b2db      	uxtb	r3, r3
    a6e4:	b2da      	uxtb	r2, r3
    a6e6:	79fb      	ldrb	r3, [r7, #7]
    a6e8:	f003 0302 	and.w	r3, r3, #2
    a6ec:	b2db      	uxtb	r3, r3
    a6ee:	4313      	orrs	r3, r2
    a6f0:	b2da      	uxtb	r2, r3
    a6f2:	79fb      	ldrb	r3, [r7, #7]
    a6f4:	f003 0304 	and.w	r3, r3, #4
    a6f8:	b2db      	uxtb	r3, r3
    a6fa:	4313      	orrs	r3, r2
    a6fc:	b2da      	uxtb	r2, r3
    a6fe:	79fb      	ldrb	r3, [r7, #7]
    a700:	f003 0310 	and.w	r3, r3, #16
    a704:	b2db      	uxtb	r3, r3
    a706:	4313      	orrs	r3, r2
    a708:	b2da      	uxtb	r2, r3
    a70a:	79fb      	ldrb	r3, [r7, #7]
    a70c:	f003 0308 	and.w	r3, r3, #8
    a710:	b2db      	uxtb	r3, r3
    a712:	4313      	orrs	r3, r2
    a714:	b2db      	uxtb	r3, r3
    a716:	733b      	strb	r3, [r7, #12]
                        ((bEPStat & EPSTAT_ST) ? EP_STATUS_STALLED : 0) |
                        ((bEPStat & EPSTAT_STP) ? EP_STATUS_SETUP : 0) |
                        ((bEPStat & EPSTAT_EPN) ? EP_STATUS_NACKED : 0) |
                        ((bEPStat & EPSTAT_PO) ? EP_STATUS_ERROR : 0);
                // call handler
                if (_apfnEPIntHandlers[i / 2] != NULL) {
    a718:	697b      	ldr	r3, [r7, #20]
    a71a:	0fda      	lsrs	r2, r3, #31
    a71c:	4413      	add	r3, r2
    a71e:	105b      	asrs	r3, r3, #1
    a720:	461a      	mov	r2, r3
    a722:	4b1a      	ldr	r3, [pc, #104]	; (a78c <USBHwISR+0x190>)
    a724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a728:	2b00      	cmp	r3, #0
    a72a:	d017      	beq.n	a75c <USBHwISR+0x160>
DEBUG_LED_ON(10);       
                    _apfnEPIntHandlers[i / 2](IDX2EP(i), bStat);
    a72c:	697b      	ldr	r3, [r7, #20]
    a72e:	0fda      	lsrs	r2, r3, #31
    a730:	4413      	add	r3, r2
    a732:	105b      	asrs	r3, r3, #1
    a734:	461a      	mov	r2, r3
    a736:	4b15      	ldr	r3, [pc, #84]	; (a78c <USBHwISR+0x190>)
    a738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    a73c:	697a      	ldr	r2, [r7, #20]
    a73e:	01d2      	lsls	r2, r2, #7
    a740:	b2d1      	uxtb	r1, r2
    a742:	697a      	ldr	r2, [r7, #20]
    a744:	1052      	asrs	r2, r2, #1
    a746:	b2d2      	uxtb	r2, r2
    a748:	f002 020f 	and.w	r2, r2, #15
    a74c:	b2d2      	uxtb	r2, r2
    a74e:	430a      	orrs	r2, r1
    a750:	b2d2      	uxtb	r2, r2
    a752:	b2d1      	uxtb	r1, r2
    a754:	7b3a      	ldrb	r2, [r7, #12]
    a756:	4608      	mov	r0, r1
    a758:	4611      	mov	r1, r2
    a75a:	4798      	blx	r3
    // endpoint interrupt
    if (dwStatus & EP_SLOW) {
        // clear EP_SLOW
        USBDevIntClr = EP_SLOW;
        // check all endpoints
        for (i = 0; i < 32; i++) {
    a75c:	697b      	ldr	r3, [r7, #20]
    a75e:	3301      	adds	r3, #1
    a760:	617b      	str	r3, [r7, #20]
    a762:	697b      	ldr	r3, [r7, #20]
    a764:	2b1f      	cmp	r3, #31
    a766:	dda1      	ble.n	a6ac <USBHwISR+0xb0>
            }
        }
    }
    
DEBUG_LED_OFF(9);       
}
    a768:	3718      	adds	r7, #24
    a76a:	46bd      	mov	sp, r7
    a76c:	bd80      	pop	{r7, pc}
    a76e:	bf00      	nop
    a770:	5000c200 	.word	0x5000c200
    a774:	5000c208 	.word	0x5000c208
    a778:	10000aec 	.word	0x10000aec
    a77c:	10000aa8 	.word	0x10000aa8
    a780:	5000c230 	.word	0x5000c230
    a784:	5000c238 	.word	0x5000c238
    a788:	5000c214 	.word	0x5000c214
    a78c:	10000aac 	.word	0x10000aac

0000a790 <USBHwInit>:
    acts as a pull-up and so prevents detection of USB disconnect.
        
    @return TRUE if the hardware was successfully initialised
 */
BOOL USBHwInit(void)
{
    a790:	b580      	push	{r7, lr}
    a792:	af00      	add	r7, sp, #0
#ifdef LPC17xx
	// P2.9 is USB_CONNECT
    PINSEL4 = (PINSEL4 & ~(3 << 18)) | (1 << 18);
    a794:	4a2d      	ldr	r2, [pc, #180]	; (a84c <USBHwInit+0xbc>)
    a796:	4b2d      	ldr	r3, [pc, #180]	; (a84c <USBHwInit+0xbc>)
    a798:	681b      	ldr	r3, [r3, #0]
    a79a:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
    a79e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    a7a2:	6013      	str	r3, [r2, #0]

	// P1.18 is USB_UP_LED
    PINSEL3 = (PINSEL3 & ~(3 << 4)) | (1 << 4);
    a7a4:	4a2a      	ldr	r2, [pc, #168]	; (a850 <USBHwInit+0xc0>)
    a7a6:	4b2a      	ldr	r3, [pc, #168]	; (a850 <USBHwInit+0xc0>)
    a7a8:	681b      	ldr	r3, [r3, #0]
    a7aa:	f023 0330 	bic.w	r3, r3, #48	; 0x30
    a7ae:	f043 0310 	orr.w	r3, r3, #16
    a7b2:	6013      	str	r3, [r2, #0]

	// P1.30 is VBUS
    PINSEL3 = (PINSEL3 & ~(3 << 28)) | (2 << 28);
    a7b4:	4a26      	ldr	r2, [pc, #152]	; (a850 <USBHwInit+0xc0>)
    a7b6:	4b26      	ldr	r3, [pc, #152]	; (a850 <USBHwInit+0xc0>)
    a7b8:	681b      	ldr	r3, [r3, #0]
    a7ba:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    a7be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    a7c2:	6013      	str	r3, [r2, #0]

	// P0.29 is USB_D+
    PINSEL1 = (PINSEL1 & ~(3 << 26)) | (1 << 26);
    a7c4:	4a23      	ldr	r2, [pc, #140]	; (a854 <USBHwInit+0xc4>)
    a7c6:	4b23      	ldr	r3, [pc, #140]	; (a854 <USBHwInit+0xc4>)
    a7c8:	681b      	ldr	r3, [r3, #0]
    a7ca:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
    a7ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    a7d2:	6013      	str	r3, [r2, #0]

	// P0.30 is USB_D-
    PINSEL1 = (PINSEL1 & ~(3 << 28)) | (1 << 28);
    a7d4:	4a1f      	ldr	r2, [pc, #124]	; (a854 <USBHwInit+0xc4>)
    a7d6:	4b1f      	ldr	r3, [pc, #124]	; (a854 <USBHwInit+0xc4>)
    a7d8:	681b      	ldr	r3, [r3, #0]
    a7da:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
    a7de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    a7e2:	6013      	str	r3, [r2, #0]

	// enable PUSB
	PCONP |= PCONP_PCUSB;
    a7e4:	4a1c      	ldr	r2, [pc, #112]	; (a858 <USBHwInit+0xc8>)
    a7e6:	4b1c      	ldr	r3, [pc, #112]	; (a858 <USBHwInit+0xc8>)
    a7e8:	681b      	ldr	r3, [r3, #0]
    a7ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    a7ee:	6013      	str	r3, [r2, #0]

	/* enable the USB controller clocks */
    USBClkCtrl |= (USBClkCtrl_DEV_CLK_EN | USBClkCtrl_AHB_CLK_EN);
    a7f0:	4a1a      	ldr	r2, [pc, #104]	; (a85c <USBHwInit+0xcc>)
    a7f2:	4b1a      	ldr	r3, [pc, #104]	; (a85c <USBHwInit+0xcc>)
    a7f4:	681b      	ldr	r3, [r3, #0]
    a7f6:	f043 0312 	orr.w	r3, r3, #18
    a7fa:	6013      	str	r3, [r2, #0]
    while (!(USBClkSt & USBClkSt_DEV_CLK_ON));
    a7fc:	bf00      	nop
    a7fe:	4b18      	ldr	r3, [pc, #96]	; (a860 <USBHwInit+0xd0>)
    a800:	681b      	ldr	r3, [r3, #0]
    a802:	f003 0302 	and.w	r3, r3, #2
    a806:	2b00      	cmp	r3, #0
    a808:	d0f9      	beq.n	a7fe <USBHwInit+0x6e>
    while (!(USBClkSt & USBClkSt_AHB_CLK_ON));
    a80a:	bf00      	nop
    a80c:	4b14      	ldr	r3, [pc, #80]	; (a860 <USBHwInit+0xd0>)
    a80e:	681b      	ldr	r3, [r3, #0]
    a810:	f003 0310 	and.w	r3, r3, #16
    a814:	2b00      	cmp	r3, #0
    a816:	d0f9      	beq.n	a80c <USBHwInit+0x7c>
#endif

#endif
    
    // disable/clear all interrupts for now
    USBDevIntEn = 0;
    a818:	4b12      	ldr	r3, [pc, #72]	; (a864 <USBHwInit+0xd4>)
    a81a:	2200      	movs	r2, #0
    a81c:	601a      	str	r2, [r3, #0]
    USBDevIntClr = 0xFFFFFFFF;
    a81e:	4b12      	ldr	r3, [pc, #72]	; (a868 <USBHwInit+0xd8>)
    a820:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a824:	601a      	str	r2, [r3, #0]
    USBDevIntPri = 0;
    a826:	4b11      	ldr	r3, [pc, #68]	; (a86c <USBHwInit+0xdc>)
    a828:	2200      	movs	r2, #0
    a82a:	601a      	str	r2, [r3, #0]

    USBEpIntEn = 0;
    a82c:	4b10      	ldr	r3, [pc, #64]	; (a870 <USBHwInit+0xe0>)
    a82e:	2200      	movs	r2, #0
    a830:	601a      	str	r2, [r3, #0]
    USBEpIntClr = 0xFFFFFFFF;
    a832:	4b10      	ldr	r3, [pc, #64]	; (a874 <USBHwInit+0xe4>)
    a834:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    a838:	601a      	str	r2, [r3, #0]
    USBEpIntPri = 0;
    a83a:	4b0f      	ldr	r3, [pc, #60]	; (a878 <USBHwInit+0xe8>)
    a83c:	2200      	movs	r2, #0
    a83e:	601a      	str	r2, [r3, #0]

    // by default, only ACKs generate interrupts
    USBHwNakIntEnable(0);
    a840:	2000      	movs	r0, #0
    a842:	f7ff fdcb 	bl	a3dc <USBHwNakIntEnable>
    // init debug leds
    DEBUG_LED_INIT(8);
    DEBUG_LED_INIT(9);
    DEBUG_LED_INIT(10);

    return TRUE;
    a846:	2301      	movs	r3, #1
}
    a848:	4618      	mov	r0, r3
    a84a:	bd80      	pop	{r7, pc}
    a84c:	4002c010 	.word	0x4002c010
    a850:	4002c00c 	.word	0x4002c00c
    a854:	4002c004 	.word	0x4002c004
    a858:	400fc0c4 	.word	0x400fc0c4
    a85c:	5000cff4 	.word	0x5000cff4
    a860:	5000cff8 	.word	0x5000cff8
    a864:	5000c204 	.word	0x5000c204
    a868:	5000c208 	.word	0x5000c208
    a86c:	5000c22c 	.word	0x5000c22c
    a870:	5000c234 	.word	0x5000c234
    a874:	5000c238 	.word	0x5000c238
    a878:	5000c240 	.word	0x5000c240

0000a87c <USBFilterOsVendorMessage>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the request was handled by this filter, FALSE otherwise
 */
BOOL USBFilterOsVendorMessage(TSetupPacket *pSetup, BOOL *pfSuccess, int *piLen, U8 **ppbData)
{
    a87c:	b480      	push	{r7}
    a87e:	b089      	sub	sp, #36	; 0x24
    a880:	af00      	add	r7, sp, #0
    a882:	60f8      	str	r0, [r7, #12]
    a884:	60b9      	str	r1, [r7, #8]
    a886:	607a      	str	r2, [r7, #4]
    a888:	603b      	str	r3, [r7, #0]
	if(bMsVendorIndex == 0)	{
    a88a:	4b2d      	ldr	r3, [pc, #180]	; (a940 <USBFilterOsVendorMessage+0xc4>)
    a88c:	781b      	ldrb	r3, [r3, #0]
    a88e:	2b00      	cmp	r3, #0
    a890:	d101      	bne.n	a896 <USBFilterOsVendorMessage+0x1a>
		// Feature is disabled.
		return FALSE;
    a892:	2300      	movs	r3, #0
    a894:	e04e      	b.n	a934 <USBFilterOsVendorMessage+0xb8>
	}
	
	if(pSetup->bRequest == bMsVendorIndex) {
    a896:	68fb      	ldr	r3, [r7, #12]
    a898:	785a      	ldrb	r2, [r3, #1]
    a89a:	4b29      	ldr	r3, [pc, #164]	; (a940 <USBFilterOsVendorMessage+0xc4>)
    a89c:	781b      	ldrb	r3, [r3, #0]
    a89e:	429a      	cmp	r2, r3
    a8a0:	d147      	bne.n	a932 <USBFilterOsVendorMessage+0xb6>
		// Fail unless we make it to the end.
		*pfSuccess = FALSE;
    a8a2:	68bb      	ldr	r3, [r7, #8]
    a8a4:	2200      	movs	r2, #0
    a8a6:	601a      	str	r2, [r3, #0]
	
		int iRequestLength = pSetup->wLength;
    a8a8:	68fb      	ldr	r3, [r7, #12]
    a8aa:	88db      	ldrh	r3, [r3, #6]
    a8ac:	61fb      	str	r3, [r7, #28]
		U8 bInterfaceNumber = GET_OS_DESC_INTERFACE(pSetup->wValue);
    a8ae:	68fb      	ldr	r3, [r7, #12]
    a8b0:	885b      	ldrh	r3, [r3, #2]
    a8b2:	76fb      	strb	r3, [r7, #27]
		U8 bPageNumber = GET_OS_DESC_PAGE(pSetup->wValue);
    a8b4:	68fb      	ldr	r3, [r7, #12]
    a8b6:	885b      	ldrh	r3, [r3, #2]
    a8b8:	0a1b      	lsrs	r3, r3, #8
    a8ba:	b29b      	uxth	r3, r3
    a8bc:	76bb      	strb	r3, [r7, #26]
	
		switch (pSetup->wIndex) {
    a8be:	68fb      	ldr	r3, [r7, #12]
    a8c0:	889b      	ldrh	r3, [r3, #4]
    a8c2:	2b04      	cmp	r3, #4
    a8c4:	d002      	beq.n	a8cc <USBFilterOsVendorMessage+0x50>
    a8c6:	2b05      	cmp	r3, #5
    a8c8:	d007      	beq.n	a8da <USBFilterOsVendorMessage+0x5e>
    a8ca:	e00d      	b.n	a8e8 <USBFilterOsVendorMessage+0x6c>
		case DESC_EXT_OS_FEATURES:
			*ppbData = (U8*)abExtendedOsFeatureDescriptor;
    a8cc:	683b      	ldr	r3, [r7, #0]
    a8ce:	4a1d      	ldr	r2, [pc, #116]	; (a944 <USBFilterOsVendorMessage+0xc8>)
    a8d0:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedOsFeatureDescriptor);
    a8d2:	687b      	ldr	r3, [r7, #4]
    a8d4:	2228      	movs	r2, #40	; 0x28
    a8d6:	601a      	str	r2, [r3, #0]
			break;
    a8d8:	e008      	b.n	a8ec <USBFilterOsVendorMessage+0x70>
			
		case DESC_EXT_OS_PROPERTIES:
			*ppbData = abExtendedPropertiesFeatureDescriptor;
    a8da:	683b      	ldr	r3, [r7, #0]
    a8dc:	4a1a      	ldr	r2, [pc, #104]	; (a948 <USBFilterOsVendorMessage+0xcc>)
    a8de:	601a      	str	r2, [r3, #0]
			*piLen = sizeof(abExtendedPropertiesFeatureDescriptor);			
    a8e0:	687b      	ldr	r3, [r7, #4]
    a8e2:	2292      	movs	r2, #146	; 0x92
    a8e4:	601a      	str	r2, [r3, #0]
			break;
    a8e6:	e001      	b.n	a8ec <USBFilterOsVendorMessage+0x70>

		default:
			return TRUE;
    a8e8:	2301      	movs	r3, #1
    a8ea:	e023      	b.n	a934 <USBFilterOsVendorMessage+0xb8>
		}
		
		// Decide what portion of the descriptor to return.
		int iPageOffset = bPageNumber*0x10000; // This will probably always be zero...
    a8ec:	7ebb      	ldrb	r3, [r7, #26]
    a8ee:	041b      	lsls	r3, r3, #16
    a8f0:	617b      	str	r3, [r7, #20]
		if (*piLen < iPageOffset) {
    a8f2:	687b      	ldr	r3, [r7, #4]
    a8f4:	681a      	ldr	r2, [r3, #0]
    a8f6:	697b      	ldr	r3, [r7, #20]
    a8f8:	429a      	cmp	r2, r3
    a8fa:	da01      	bge.n	a900 <USBFilterOsVendorMessage+0x84>
			// Not enough data for the requested offset.
			return TRUE;
    a8fc:	2301      	movs	r3, #1
    a8fe:	e019      	b.n	a934 <USBFilterOsVendorMessage+0xb8>
		}
		*ppbData += iPageOffset;
    a900:	683b      	ldr	r3, [r7, #0]
    a902:	681a      	ldr	r2, [r3, #0]
    a904:	697b      	ldr	r3, [r7, #20]
    a906:	441a      	add	r2, r3
    a908:	683b      	ldr	r3, [r7, #0]
    a90a:	601a      	str	r2, [r3, #0]
		*piLen -= iPageOffset;
    a90c:	687b      	ldr	r3, [r7, #4]
    a90e:	681a      	ldr	r2, [r3, #0]
    a910:	697b      	ldr	r3, [r7, #20]
    a912:	1ad2      	subs	r2, r2, r3
    a914:	687b      	ldr	r3, [r7, #4]
    a916:	601a      	str	r2, [r3, #0]
		
		if (*piLen > iRequestLength) {
    a918:	687b      	ldr	r3, [r7, #4]
    a91a:	681a      	ldr	r2, [r3, #0]
    a91c:	69fb      	ldr	r3, [r7, #28]
    a91e:	429a      	cmp	r2, r3
    a920:	dd02      	ble.n	a928 <USBFilterOsVendorMessage+0xac>
			// Clip data longer than the requested length
			*piLen = iRequestLength;
    a922:	687b      	ldr	r3, [r7, #4]
    a924:	69fa      	ldr	r2, [r7, #28]
    a926:	601a      	str	r2, [r3, #0]
		}
	
		*pfSuccess = TRUE;
    a928:	68bb      	ldr	r3, [r7, #8]
    a92a:	2201      	movs	r2, #1
    a92c:	601a      	str	r2, [r3, #0]
		return TRUE;
    a92e:	2301      	movs	r3, #1
    a930:	e000      	b.n	a934 <USBFilterOsVendorMessage+0xb8>
	}
	
	// These are not the requests you are looking for
	return FALSE;
    a932:	2300      	movs	r3, #0
}
    a934:	4618      	mov	r0, r3
    a936:	3724      	adds	r7, #36	; 0x24
    a938:	46bd      	mov	sp, r7
    a93a:	f85d 7b04 	ldr.w	r7, [sp], #4
    a93e:	4770      	bx	lr
    a940:	10000afc 	.word	0x10000afc
    a944:	0000c214 	.word	0x0000c214
    a948:	100008cc 	.word	0x100008cc

0000a94c <USBRegisterWinusbInterface>:
	@param [in]		pcInterfaceGuid			ASCII String GUID in curly braces
												Windows will use this as a 
												Device Interface GUID
 */
void USBRegisterWinusbInterface(U8 bVendorRequestIndex, const char* pcInterfaceGuid)
{
    a94c:	b480      	push	{r7}
    a94e:	b087      	sub	sp, #28
    a950:	af00      	add	r7, sp, #0
    a952:	4603      	mov	r3, r0
    a954:	6039      	str	r1, [r7, #0]
    a956:	71fb      	strb	r3, [r7, #7]
	bMsVendorIndex = bVendorRequestIndex;
    a958:	4a18      	ldr	r2, [pc, #96]	; (a9bc <USBRegisterWinusbInterface+0x70>)
    a95a:	79fb      	ldrb	r3, [r7, #7]
    a95c:	7013      	strb	r3, [r2, #0]
	
	if(!pcInterfaceGuid) {
    a95e:	683b      	ldr	r3, [r7, #0]
    a960:	2b00      	cmp	r3, #0
    a962:	d100      	bne.n	a966 <USBRegisterWinusbInterface+0x1a>
		return; // Trust that caller is actually specifying this with nonzero RequestIndex.
    a964:	e024      	b.n	a9b0 <USBRegisterWinusbInterface+0x64>
	}
	
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
    a966:	4b16      	ldr	r3, [pc, #88]	; (a9c0 <USBRegisterWinusbInterface+0x74>)
    a968:	617b      	str	r3, [r7, #20]
	const int ciMaxLength = 38;
    a96a:	2326      	movs	r3, #38	; 0x26
    a96c:	60fb      	str	r3, [r7, #12]
	
	for(int i = 0; i < ciMaxLength; i++) {
    a96e:	2300      	movs	r3, #0
    a970:	613b      	str	r3, [r7, #16]
    a972:	e012      	b.n	a99a <USBRegisterWinusbInterface+0x4e>
		if(!pcInterfaceGuid[i]) break;
    a974:	693b      	ldr	r3, [r7, #16]
    a976:	683a      	ldr	r2, [r7, #0]
    a978:	4413      	add	r3, r2
    a97a:	781b      	ldrb	r3, [r3, #0]
    a97c:	2b00      	cmp	r3, #0
    a97e:	d100      	bne.n	a982 <USBRegisterWinusbInterface+0x36>
    a980:	e00f      	b.n	a9a2 <USBRegisterWinusbInterface+0x56>
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
    a982:	693b      	ldr	r3, [r7, #16]
    a984:	683a      	ldr	r2, [r7, #0]
    a986:	4413      	add	r3, r2
    a988:	781a      	ldrb	r2, [r3, #0]
    a98a:	697b      	ldr	r3, [r7, #20]
    a98c:	701a      	strb	r2, [r3, #0]
		pbWriteCursor += 2;
    a98e:	697b      	ldr	r3, [r7, #20]
    a990:	3302      	adds	r3, #2
    a992:	617b      	str	r3, [r7, #20]
	// Copy GUID into Extended Properties feature descriptor.
	// Trust that the caller did the right thing, but ensure double null termination if string terminates early.
	U8* pbWriteCursor = abExtendedPropertiesFeatureDescriptor + EXTENDEDPROPERTIESFEATURE_GUIDSTRINGOFFSET;
	const int ciMaxLength = 38;
	
	for(int i = 0; i < ciMaxLength; i++) {
    a994:	693b      	ldr	r3, [r7, #16]
    a996:	3301      	adds	r3, #1
    a998:	613b      	str	r3, [r7, #16]
    a99a:	693a      	ldr	r2, [r7, #16]
    a99c:	68fb      	ldr	r3, [r7, #12]
    a99e:	429a      	cmp	r2, r3
    a9a0:	dbe8      	blt.n	a974 <USBRegisterWinusbInterface+0x28>
		if(!pcInterfaceGuid[i]) break;
		pbWriteCursor[0] = (U8) pcInterfaceGuid[i];
		pbWriteCursor += 2;
	}
	// Double terminate
	pbWriteCursor[0] = 0;
    a9a2:	697b      	ldr	r3, [r7, #20]
    a9a4:	2200      	movs	r2, #0
    a9a6:	701a      	strb	r2, [r3, #0]
	pbWriteCursor[2] = 0;
    a9a8:	697b      	ldr	r3, [r7, #20]
    a9aa:	3302      	adds	r3, #2
    a9ac:	2200      	movs	r2, #0
    a9ae:	701a      	strb	r2, [r3, #0]
	
}
    a9b0:	371c      	adds	r7, #28
    a9b2:	46bd      	mov	sp, r7
    a9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9b8:	4770      	bx	lr
    a9ba:	bf00      	nop
    a9bc:	10000afc 	.word	0x10000afc
    a9c0:	1000090e 	.word	0x1000090e

0000a9c4 <USBGetOsStringDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetOsStringDescriptor(int *piLen, U8 **ppbData)
{
    a9c4:	b480      	push	{r7}
    a9c6:	b083      	sub	sp, #12
    a9c8:	af00      	add	r7, sp, #0
    a9ca:	6078      	str	r0, [r7, #4]
    a9cc:	6039      	str	r1, [r7, #0]
	// The last character in the OS String descriptor specifies the vendor request index to use.
	abOsStringDescriptor[sizeof(abOsStringDescriptor)-2] = bMsVendorIndex;
    a9ce:	4b08      	ldr	r3, [pc, #32]	; (a9f0 <USBGetOsStringDescriptor+0x2c>)
    a9d0:	781a      	ldrb	r2, [r3, #0]
    a9d2:	4b08      	ldr	r3, [pc, #32]	; (a9f4 <USBGetOsStringDescriptor+0x30>)
    a9d4:	741a      	strb	r2, [r3, #16]
	
	*ppbData = abOsStringDescriptor;
    a9d6:	683b      	ldr	r3, [r7, #0]
    a9d8:	4a06      	ldr	r2, [pc, #24]	; (a9f4 <USBGetOsStringDescriptor+0x30>)
    a9da:	601a      	str	r2, [r3, #0]
	*piLen = sizeof(abOsStringDescriptor);
    a9dc:	687b      	ldr	r3, [r7, #4]
    a9de:	2212      	movs	r2, #18
    a9e0:	601a      	str	r2, [r3, #0]
	return TRUE;
    a9e2:	2301      	movs	r3, #1
}
    a9e4:	4618      	mov	r0, r3
    a9e6:	370c      	adds	r7, #12
    a9e8:	46bd      	mov	sp, r7
    a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
    a9ee:	4770      	bx	lr
    a9f0:	10000afc 	.word	0x10000afc
    a9f4:	100008b8 	.word	0x100008b8

0000a9f8 <USBRegisterDescriptors>:
	for the device.

	@param [in]	pabDescriptors	The descriptor byte array
 */
void USBRegisterDescriptors(const U8 *pabDescriptors)
{
    a9f8:	b480      	push	{r7}
    a9fa:	b083      	sub	sp, #12
    a9fc:	af00      	add	r7, sp, #0
    a9fe:	6078      	str	r0, [r7, #4]
	pabDescrip = pabDescriptors;
    aa00:	4a03      	ldr	r2, [pc, #12]	; (aa10 <USBRegisterDescriptors+0x18>)
    aa02:	687b      	ldr	r3, [r7, #4]
    aa04:	6013      	str	r3, [r2, #0]
}
    aa06:	370c      	adds	r7, #12
    aa08:	46bd      	mov	sp, r7
    aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
    aa0e:	4770      	bx	lr
    aa10:	10000af8 	.word	0x10000af8

0000aa14 <USBGetDescriptor>:
	@param [out]	*ppbData	Descriptor data
	
	@return TRUE if the descriptor was found, FALSE otherwise
 */
BOOL USBGetDescriptor(U16 wTypeIndex, U16 wLangID, int *piLen, U8 **ppbData)
{
    aa14:	b580      	push	{r7, lr}
    aa16:	b088      	sub	sp, #32
    aa18:	af00      	add	r7, sp, #0
    aa1a:	60ba      	str	r2, [r7, #8]
    aa1c:	607b      	str	r3, [r7, #4]
    aa1e:	4603      	mov	r3, r0
    aa20:	81fb      	strh	r3, [r7, #14]
    aa22:	460b      	mov	r3, r1
    aa24:	81bb      	strh	r3, [r7, #12]
	U8	*pab;
	int iCurIndex;
	
	ASSERT(pabDescrip != NULL);

	bType = GET_DESC_TYPE(wTypeIndex);
    aa26:	89fb      	ldrh	r3, [r7, #14]
    aa28:	0a1b      	lsrs	r3, r3, #8
    aa2a:	b29b      	uxth	r3, r3
    aa2c:	75fb      	strb	r3, [r7, #23]
	bIndex = GET_DESC_INDEX(wTypeIndex);
    aa2e:	89fb      	ldrh	r3, [r7, #14]
    aa30:	75bb      	strb	r3, [r7, #22]
	
    if (bType == DESC_STRING &&
    aa32:	7dfb      	ldrb	r3, [r7, #23]
    aa34:	2b03      	cmp	r3, #3
    aa36:	d10b      	bne.n	aa50 <USBGetDescriptor+0x3c>
    aa38:	7dbb      	ldrb	r3, [r7, #22]
    aa3a:	2bee      	cmp	r3, #238	; 0xee
    aa3c:	d108      	bne.n	aa50 <USBGetDescriptor+0x3c>
        bIndex == DESC_STRING_OS) {
        
        if (USBGetOsStringDescriptor(piLen, ppbData)) {
    aa3e:	68b8      	ldr	r0, [r7, #8]
    aa40:	6879      	ldr	r1, [r7, #4]
    aa42:	f7ff ffbf 	bl	a9c4 <USBGetOsStringDescriptor>
    aa46:	4603      	mov	r3, r0
    aa48:	2b00      	cmp	r3, #0
    aa4a:	d001      	beq.n	aa50 <USBGetDescriptor+0x3c>
            
            return TRUE;
    aa4c:	2301      	movs	r3, #1
    aa4e:	e036      	b.n	aabe <USBGetDescriptor+0xaa>
        }
    }
    	
	
	pab = (U8 *)pabDescrip;
    aa50:	4b1d      	ldr	r3, [pc, #116]	; (aac8 <USBGetDescriptor+0xb4>)
    aa52:	681b      	ldr	r3, [r3, #0]
    aa54:	61fb      	str	r3, [r7, #28]
	iCurIndex = 0;
    aa56:	2300      	movs	r3, #0
    aa58:	61bb      	str	r3, [r7, #24]
	
	while (pab[DESC_bLength] != 0) {
    aa5a:	e02b      	b.n	aab4 <USBGetDescriptor+0xa0>
		if (pab[DESC_bDescriptorType] == bType) {
    aa5c:	69fb      	ldr	r3, [r7, #28]
    aa5e:	3301      	adds	r3, #1
    aa60:	781b      	ldrb	r3, [r3, #0]
    aa62:	7dfa      	ldrb	r2, [r7, #23]
    aa64:	429a      	cmp	r2, r3
    aa66:	d11f      	bne.n	aaa8 <USBGetDescriptor+0x94>
			if (iCurIndex == bIndex) {
    aa68:	7dba      	ldrb	r2, [r7, #22]
    aa6a:	69bb      	ldr	r3, [r7, #24]
    aa6c:	429a      	cmp	r2, r3
    aa6e:	d118      	bne.n	aaa2 <USBGetDescriptor+0x8e>
				// set data pointer
				*ppbData = pab;
    aa70:	687b      	ldr	r3, [r7, #4]
    aa72:	69fa      	ldr	r2, [r7, #28]
    aa74:	601a      	str	r2, [r3, #0]
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
    aa76:	7dfb      	ldrb	r3, [r7, #23]
    aa78:	2b02      	cmp	r3, #2
    aa7a:	d10b      	bne.n	aa94 <USBGetDescriptor+0x80>
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    aa7c:	69fb      	ldr	r3, [r7, #28]
    aa7e:	3302      	adds	r3, #2
    aa80:	781b      	ldrb	r3, [r3, #0]
    aa82:	461a      	mov	r2, r3
								(pab[CONF_DESC_wTotalLength + 1] << 8);
    aa84:	69fb      	ldr	r3, [r7, #28]
    aa86:	3303      	adds	r3, #3
    aa88:	781b      	ldrb	r3, [r3, #0]
    aa8a:	021b      	lsls	r3, r3, #8
				// set data pointer
				*ppbData = pab;
				// get length from structure
				if (bType == DESC_CONFIGURATION) {
					// configuration descriptor is an exception, length is at offset 2 and 3
					*piLen =	(pab[CONF_DESC_wTotalLength]) |
    aa8c:	431a      	orrs	r2, r3
    aa8e:	68bb      	ldr	r3, [r7, #8]
    aa90:	601a      	str	r2, [r3, #0]
    aa92:	e004      	b.n	aa9e <USBGetDescriptor+0x8a>
								(pab[CONF_DESC_wTotalLength + 1] << 8);
				}
				else {
					// normally length is at offset 0
					*piLen = pab[DESC_bLength];
    aa94:	69fb      	ldr	r3, [r7, #28]
    aa96:	781b      	ldrb	r3, [r3, #0]
    aa98:	461a      	mov	r2, r3
    aa9a:	68bb      	ldr	r3, [r7, #8]
    aa9c:	601a      	str	r2, [r3, #0]
				}
				return TRUE;
    aa9e:	2301      	movs	r3, #1
    aaa0:	e00d      	b.n	aabe <USBGetDescriptor+0xaa>
			}
			iCurIndex++;
    aaa2:	69bb      	ldr	r3, [r7, #24]
    aaa4:	3301      	adds	r3, #1
    aaa6:	61bb      	str	r3, [r7, #24]
		}
		// skip to next descriptor
		pab += pab[DESC_bLength];
    aaa8:	69fb      	ldr	r3, [r7, #28]
    aaaa:	781b      	ldrb	r3, [r3, #0]
    aaac:	461a      	mov	r2, r3
    aaae:	69fb      	ldr	r3, [r7, #28]
    aab0:	4413      	add	r3, r2
    aab2:	61fb      	str	r3, [r7, #28]
    	
	
	pab = (U8 *)pabDescrip;
	iCurIndex = 0;
	
	while (pab[DESC_bLength] != 0) {
    aab4:	69fb      	ldr	r3, [r7, #28]
    aab6:	781b      	ldrb	r3, [r3, #0]
    aab8:	2b00      	cmp	r3, #0
    aaba:	d1cf      	bne.n	aa5c <USBGetDescriptor+0x48>
		// skip to next descriptor
		pab += pab[DESC_bLength];
	}
	// nothing found
	DBG("Desc %x not found!\n", wTypeIndex);
	return FALSE;
    aabc:	2300      	movs	r3, #0
}
    aabe:	4618      	mov	r0, r3
    aac0:	3720      	adds	r7, #32
    aac2:	46bd      	mov	sp, r7
    aac4:	bd80      	pop	{r7, pc}
    aac6:	bf00      	nop
    aac8:	10000af8 	.word	0x10000af8

0000aacc <USBSetConfiguration>:
	@todo function always returns TRUE, add stricter checking?
	
	@return TRUE if successfully configured, FALSE otherwise
 */
static BOOL USBSetConfiguration(U8 bConfigIndex, U8 bAltSetting)
{
    aacc:	b580      	push	{r7, lr}
    aace:	b086      	sub	sp, #24
    aad0:	af00      	add	r7, sp, #0
    aad2:	4603      	mov	r3, r0
    aad4:	460a      	mov	r2, r1
    aad6:	71fb      	strb	r3, [r7, #7]
    aad8:	4613      	mov	r3, r2
    aada:	71bb      	strb	r3, [r7, #6]
	U8	bEP;
	U16	wMaxPktSize;
	
	ASSERT(pabDescrip != NULL);

	if (bConfigIndex == 0) {
    aadc:	79fb      	ldrb	r3, [r7, #7]
    aade:	2b00      	cmp	r3, #0
    aae0:	d103      	bne.n	aaea <USBSetConfiguration+0x1e>
		// unconfigure device
		USBHwConfigDevice(FALSE);
    aae2:	2000      	movs	r0, #0
    aae4:	f7ff fd78 	bl	a5d8 <USBHwConfigDevice>
    aae8:	e045      	b.n	ab76 <USBSetConfiguration+0xaa>
	}
	else {
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
    aaea:	4b25      	ldr	r3, [pc, #148]	; (ab80 <USBSetConfiguration+0xb4>)
    aaec:	681b      	ldr	r3, [r3, #0]
    aaee:	617b      	str	r3, [r7, #20]
		bCurConfig = 0xFF;
    aaf0:	23ff      	movs	r3, #255	; 0xff
    aaf2:	74fb      	strb	r3, [r7, #19]
		bCurAltSetting = 0xFF;
    aaf4:	23ff      	movs	r3, #255	; 0xff
    aaf6:	74bb      	strb	r3, [r7, #18]

		while (pab[DESC_bLength] != 0) {
    aaf8:	e036      	b.n	ab68 <USBSetConfiguration+0x9c>

			switch (pab[DESC_bDescriptorType]) {
    aafa:	697b      	ldr	r3, [r7, #20]
    aafc:	3301      	adds	r3, #1
    aafe:	781b      	ldrb	r3, [r3, #0]
    ab00:	2b04      	cmp	r3, #4
    ab02:	d008      	beq.n	ab16 <USBSetConfiguration+0x4a>
    ab04:	2b05      	cmp	r3, #5
    ab06:	d00a      	beq.n	ab1e <USBSetConfiguration+0x52>
    ab08:	2b02      	cmp	r3, #2
    ab0a:	d000      	beq.n	ab0e <USBSetConfiguration+0x42>
					USBHwEPConfig(bEP, wMaxPktSize);
				}
				break;

			default:
				break;
    ab0c:	e026      	b.n	ab5c <USBSetConfiguration+0x90>

			switch (pab[DESC_bDescriptorType]) {

			case DESC_CONFIGURATION:
				// remember current configuration index
				bCurConfig = pab[CONF_DESC_bConfigurationValue];
    ab0e:	697b      	ldr	r3, [r7, #20]
    ab10:	795b      	ldrb	r3, [r3, #5]
    ab12:	74fb      	strb	r3, [r7, #19]
				break;
    ab14:	e022      	b.n	ab5c <USBSetConfiguration+0x90>

			case DESC_INTERFACE:
				// remember current alternate setting
				bCurAltSetting = pab[INTF_DESC_bAlternateSetting];
    ab16:	697b      	ldr	r3, [r7, #20]
    ab18:	78db      	ldrb	r3, [r3, #3]
    ab1a:	74bb      	strb	r3, [r7, #18]
				break;
    ab1c:	e01e      	b.n	ab5c <USBSetConfiguration+0x90>

			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
    ab1e:	7cfa      	ldrb	r2, [r7, #19]
    ab20:	79fb      	ldrb	r3, [r7, #7]
    ab22:	429a      	cmp	r2, r3
    ab24:	d119      	bne.n	ab5a <USBSetConfiguration+0x8e>
    ab26:	7cba      	ldrb	r2, [r7, #18]
    ab28:	79bb      	ldrb	r3, [r7, #6]
    ab2a:	429a      	cmp	r2, r3
    ab2c:	d115      	bne.n	ab5a <USBSetConfiguration+0x8e>
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
    ab2e:	697b      	ldr	r3, [r7, #20]
    ab30:	789b      	ldrb	r3, [r3, #2]
    ab32:	747b      	strb	r3, [r7, #17]
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    ab34:	697b      	ldr	r3, [r7, #20]
    ab36:	3304      	adds	r3, #4
    ab38:	781b      	ldrb	r3, [r3, #0]
    ab3a:	b29a      	uxth	r2, r3
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
    ab3c:	697b      	ldr	r3, [r7, #20]
    ab3e:	3305      	adds	r3, #5
    ab40:	781b      	ldrb	r3, [r3, #0]
    ab42:	021b      	lsls	r3, r3, #8
			case DESC_ENDPOINT:
				if ((bCurConfig == bConfigIndex) &&
					(bCurAltSetting == bAltSetting)) {
					// endpoint found for desired config and alternate setting
					bEP = pab[ENDP_DESC_bEndpointAddress];
					wMaxPktSize = 	(pab[ENDP_DESC_wMaxPacketSize]) |
    ab44:	b29b      	uxth	r3, r3
    ab46:	4313      	orrs	r3, r2
    ab48:	b29b      	uxth	r3, r3
    ab4a:	81fb      	strh	r3, [r7, #14]
									(pab[ENDP_DESC_wMaxPacketSize + 1] << 8);
					// configure endpoint
					USBHwEPConfig(bEP, wMaxPktSize);
    ab4c:	7c7a      	ldrb	r2, [r7, #17]
    ab4e:	89fb      	ldrh	r3, [r7, #14]
    ab50:	4610      	mov	r0, r2
    ab52:	4619      	mov	r1, r3
    ab54:	f7ff fbb8 	bl	a2c8 <USBHwEPConfig>
				}
				break;
    ab58:	e7ff      	b.n	ab5a <USBSetConfiguration+0x8e>
    ab5a:	bf00      	nop

			default:
				break;
			}
			// skip to next descriptor
			pab += pab[DESC_bLength];
    ab5c:	697b      	ldr	r3, [r7, #20]
    ab5e:	781b      	ldrb	r3, [r3, #0]
    ab60:	461a      	mov	r2, r3
    ab62:	697b      	ldr	r3, [r7, #20]
    ab64:	4413      	add	r3, r2
    ab66:	617b      	str	r3, [r7, #20]
		// configure endpoints for this configuration/altsetting
		pab = (U8 *)pabDescrip;
		bCurConfig = 0xFF;
		bCurAltSetting = 0xFF;

		while (pab[DESC_bLength] != 0) {
    ab68:	697b      	ldr	r3, [r7, #20]
    ab6a:	781b      	ldrb	r3, [r3, #0]
    ab6c:	2b00      	cmp	r3, #0
    ab6e:	d1c4      	bne.n	aafa <USBSetConfiguration+0x2e>
			// skip to next descriptor
			pab += pab[DESC_bLength];
		}
		
		// configure device
		USBHwConfigDevice(TRUE);
    ab70:	2001      	movs	r0, #1
    ab72:	f7ff fd31 	bl	a5d8 <USBHwConfigDevice>
	}

	return TRUE;
    ab76:	2301      	movs	r3, #1
}
    ab78:	4618      	mov	r0, r3
    ab7a:	3718      	adds	r7, #24
    ab7c:	46bd      	mov	sp, r7
    ab7e:	bd80      	pop	{r7, pc}
    ab80:	10000af8 	.word	0x10000af8

0000ab84 <HandleStdDeviceReq>:
	@param [in,out]	ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdDeviceReq(TSetupPacket *pSetup, int *piLen, U8 **ppbData)
{
    ab84:	b580      	push	{r7, lr}
    ab86:	b086      	sub	sp, #24
    ab88:	af00      	add	r7, sp, #0
    ab8a:	60f8      	str	r0, [r7, #12]
    ab8c:	60b9      	str	r1, [r7, #8]
    ab8e:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    ab90:	687b      	ldr	r3, [r7, #4]
    ab92:	681b      	ldr	r3, [r3, #0]
    ab94:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    ab96:	68fb      	ldr	r3, [r7, #12]
    ab98:	785b      	ldrb	r3, [r3, #1]
    ab9a:	2b09      	cmp	r3, #9
    ab9c:	d852      	bhi.n	ac44 <HandleStdDeviceReq+0xc0>
    ab9e:	a201      	add	r2, pc, #4	; (adr r2, aba4 <HandleStdDeviceReq+0x20>)
    aba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    aba4:	0000abcd 	.word	0x0000abcd
    aba8:	0000ac3d 	.word	0x0000ac3d
    abac:	0000ac45 	.word	0x0000ac45
    abb0:	0000ac3d 	.word	0x0000ac3d
    abb4:	0000ac45 	.word	0x0000ac45
    abb8:	0000abe3 	.word	0x0000abe3
    abbc:	0000abf1 	.word	0x0000abf1
    abc0:	0000ac41 	.word	0x0000ac41
    abc4:	0000ac09 	.word	0x0000ac09
    abc8:	0000ac19 	.word	0x0000ac19
	
	case REQ_GET_STATUS:
		// bit 0: self-powered
		// bit 1: remote wakeup = not supported
		pbData[0] = 0;
    abcc:	697b      	ldr	r3, [r7, #20]
    abce:	2200      	movs	r2, #0
    abd0:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    abd2:	697b      	ldr	r3, [r7, #20]
    abd4:	3301      	adds	r3, #1
    abd6:	2200      	movs	r2, #0
    abd8:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    abda:	68bb      	ldr	r3, [r7, #8]
    abdc:	2202      	movs	r2, #2
    abde:	601a      	str	r2, [r3, #0]
		break;
    abe0:	e032      	b.n	ac48 <HandleStdDeviceReq+0xc4>
		
	case REQ_SET_ADDRESS:
		USBHwSetAddress(pSetup->wValue);
    abe2:	68fb      	ldr	r3, [r7, #12]
    abe4:	885b      	ldrh	r3, [r3, #2]
    abe6:	b2db      	uxtb	r3, r3
    abe8:	4618      	mov	r0, r3
    abea:	f7ff fbd3 	bl	a394 <USBHwSetAddress>
		break;
    abee:	e02b      	b.n	ac48 <HandleStdDeviceReq+0xc4>

	case REQ_GET_DESCRIPTOR:
		DBG("D%x", pSetup->wValue);
		return USBGetDescriptor(pSetup->wValue, pSetup->wIndex, piLen, ppbData);
    abf0:	68fb      	ldr	r3, [r7, #12]
    abf2:	885a      	ldrh	r2, [r3, #2]
    abf4:	68fb      	ldr	r3, [r7, #12]
    abf6:	889b      	ldrh	r3, [r3, #4]
    abf8:	4610      	mov	r0, r2
    abfa:	4619      	mov	r1, r3
    abfc:	68ba      	ldr	r2, [r7, #8]
    abfe:	687b      	ldr	r3, [r7, #4]
    ac00:	f7ff ff08 	bl	aa14 <USBGetDescriptor>
    ac04:	4603      	mov	r3, r0
    ac06:	e020      	b.n	ac4a <HandleStdDeviceReq+0xc6>

	case REQ_GET_CONFIGURATION:
		// indicate if we are configured
		pbData[0] = bConfiguration;
    ac08:	4b12      	ldr	r3, [pc, #72]	; (ac54 <HandleStdDeviceReq+0xd0>)
    ac0a:	781a      	ldrb	r2, [r3, #0]
    ac0c:	697b      	ldr	r3, [r7, #20]
    ac0e:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    ac10:	68bb      	ldr	r3, [r7, #8]
    ac12:	2201      	movs	r2, #1
    ac14:	601a      	str	r2, [r3, #0]
		break;
    ac16:	e017      	b.n	ac48 <HandleStdDeviceReq+0xc4>

	case REQ_SET_CONFIGURATION:
		if (!USBSetConfiguration(pSetup->wValue & 0xFF, 0)) {
    ac18:	68fb      	ldr	r3, [r7, #12]
    ac1a:	885b      	ldrh	r3, [r3, #2]
    ac1c:	b2db      	uxtb	r3, r3
    ac1e:	4618      	mov	r0, r3
    ac20:	2100      	movs	r1, #0
    ac22:	f7ff ff53 	bl	aacc <USBSetConfiguration>
    ac26:	4603      	mov	r3, r0
    ac28:	2b00      	cmp	r3, #0
    ac2a:	d101      	bne.n	ac30 <HandleStdDeviceReq+0xac>
			DBG("USBSetConfiguration failed!\n");
			return FALSE;
    ac2c:	2300      	movs	r3, #0
    ac2e:	e00c      	b.n	ac4a <HandleStdDeviceReq+0xc6>
		}
		// configuration successful, update current configuration
		bConfiguration = pSetup->wValue & 0xFF;	
    ac30:	68fb      	ldr	r3, [r7, #12]
    ac32:	885b      	ldrh	r3, [r3, #2]
    ac34:	b2da      	uxtb	r2, r3
    ac36:	4b07      	ldr	r3, [pc, #28]	; (ac54 <HandleStdDeviceReq+0xd0>)
    ac38:	701a      	strb	r2, [r3, #0]
		break;
    ac3a:	e005      	b.n	ac48 <HandleStdDeviceReq+0xc4>
			// put DEVICE_REMOTE_WAKEUP code here
		}
		if (pSetup->wValue == FEA_TEST_MODE) {
			// put TEST_MODE code here
		}
		return FALSE;
    ac3c:	2300      	movs	r3, #0
    ac3e:	e004      	b.n	ac4a <HandleStdDeviceReq+0xc6>

	case REQ_SET_DESCRIPTOR:
		DBG("Device req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    ac40:	2300      	movs	r3, #0
    ac42:	e002      	b.n	ac4a <HandleStdDeviceReq+0xc6>

	default:
		DBG("Illegal device req %d\n", pSetup->bRequest);
		return FALSE;
    ac44:	2300      	movs	r3, #0
    ac46:	e000      	b.n	ac4a <HandleStdDeviceReq+0xc6>
	}
	
	return TRUE;
    ac48:	2301      	movs	r3, #1
}
    ac4a:	4618      	mov	r0, r3
    ac4c:	3718      	adds	r7, #24
    ac4e:	46bd      	mov	sp, r7
    ac50:	bd80      	pop	{r7, pc}
    ac52:	bf00      	nop
    ac54:	10000af0 	.word	0x10000af0

0000ac58 <HandleStdInterfaceReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdInterfaceReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    ac58:	b480      	push	{r7}
    ac5a:	b087      	sub	sp, #28
    ac5c:	af00      	add	r7, sp, #0
    ac5e:	60f8      	str	r0, [r7, #12]
    ac60:	60b9      	str	r1, [r7, #8]
    ac62:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    ac64:	687b      	ldr	r3, [r7, #4]
    ac66:	681b      	ldr	r3, [r3, #0]
    ac68:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    ac6a:	68fb      	ldr	r3, [r7, #12]
    ac6c:	785b      	ldrb	r3, [r3, #1]
    ac6e:	2b0b      	cmp	r3, #11
    ac70:	d838      	bhi.n	ace4 <HandleStdInterfaceReq+0x8c>
    ac72:	a201      	add	r2, pc, #4	; (adr r2, ac78 <HandleStdInterfaceReq+0x20>)
    ac74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ac78:	0000aca9 	.word	0x0000aca9
    ac7c:	0000acbf 	.word	0x0000acbf
    ac80:	0000ace5 	.word	0x0000ace5
    ac84:	0000acbf 	.word	0x0000acbf
    ac88:	0000ace5 	.word	0x0000ace5
    ac8c:	0000ace5 	.word	0x0000ace5
    ac90:	0000ace5 	.word	0x0000ace5
    ac94:	0000ace5 	.word	0x0000ace5
    ac98:	0000ace5 	.word	0x0000ace5
    ac9c:	0000ace5 	.word	0x0000ace5
    aca0:	0000acc3 	.word	0x0000acc3
    aca4:	0000acd1 	.word	0x0000acd1

	case REQ_GET_STATUS:
		// no bits specified
		pbData[0] = 0;
    aca8:	697b      	ldr	r3, [r7, #20]
    acaa:	2200      	movs	r2, #0
    acac:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    acae:	697b      	ldr	r3, [r7, #20]
    acb0:	3301      	adds	r3, #1
    acb2:	2200      	movs	r2, #0
    acb4:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    acb6:	68bb      	ldr	r3, [r7, #8]
    acb8:	2202      	movs	r2, #2
    acba:	601a      	str	r2, [r3, #0]
		break;
    acbc:	e014      	b.n	ace8 <HandleStdInterfaceReq+0x90>

	case REQ_CLEAR_FEATURE:
	case REQ_SET_FEATURE:
		// not defined for interface
		return FALSE;
    acbe:	2300      	movs	r3, #0
    acc0:	e013      	b.n	acea <HandleStdInterfaceReq+0x92>
	
	case REQ_GET_INTERFACE:	// TODO use bNumInterfaces
        // there is only one interface, return n-1 (= 0)
		pbData[0] = 0;
    acc2:	697b      	ldr	r3, [r7, #20]
    acc4:	2200      	movs	r2, #0
    acc6:	701a      	strb	r2, [r3, #0]
		*piLen = 1;
    acc8:	68bb      	ldr	r3, [r7, #8]
    acca:	2201      	movs	r2, #1
    accc:	601a      	str	r2, [r3, #0]
		break;
    acce:	e00b      	b.n	ace8 <HandleStdInterfaceReq+0x90>
	
	case REQ_SET_INTERFACE:	// TODO use bNumInterfaces
		// there is only one interface (= 0)
		if (pSetup->wValue != 0) {
    acd0:	68fb      	ldr	r3, [r7, #12]
    acd2:	885b      	ldrh	r3, [r3, #2]
    acd4:	2b00      	cmp	r3, #0
    acd6:	d001      	beq.n	acdc <HandleStdInterfaceReq+0x84>
			return FALSE;
    acd8:	2300      	movs	r3, #0
    acda:	e006      	b.n	acea <HandleStdInterfaceReq+0x92>
		}
		*piLen = 0;
    acdc:	68bb      	ldr	r3, [r7, #8]
    acde:	2200      	movs	r2, #0
    ace0:	601a      	str	r2, [r3, #0]
		break;
    ace2:	e001      	b.n	ace8 <HandleStdInterfaceReq+0x90>

	default:
		DBG("Illegal interface req %d\n", pSetup->bRequest);
		return FALSE;
    ace4:	2300      	movs	r3, #0
    ace6:	e000      	b.n	acea <HandleStdInterfaceReq+0x92>
	}

	return TRUE;
    ace8:	2301      	movs	r3, #1
}
    acea:	4618      	mov	r0, r3
    acec:	371c      	adds	r7, #28
    acee:	46bd      	mov	sp, r7
    acf0:	f85d 7b04 	ldr.w	r7, [sp], #4
    acf4:	4770      	bx	lr
    acf6:	bf00      	nop

0000acf8 <HandleStdEndPointReq>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
static BOOL HandleStdEndPointReq(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    acf8:	b580      	push	{r7, lr}
    acfa:	b086      	sub	sp, #24
    acfc:	af00      	add	r7, sp, #0
    acfe:	60f8      	str	r0, [r7, #12]
    ad00:	60b9      	str	r1, [r7, #8]
    ad02:	607a      	str	r2, [r7, #4]
	U8	*pbData = *ppbData;
    ad04:	687b      	ldr	r3, [r7, #4]
    ad06:	681b      	ldr	r3, [r3, #0]
    ad08:	617b      	str	r3, [r7, #20]

	switch (pSetup->bRequest) {
    ad0a:	68fb      	ldr	r3, [r7, #12]
    ad0c:	785b      	ldrb	r3, [r3, #1]
    ad0e:	2b0c      	cmp	r3, #12
    ad10:	d853      	bhi.n	adba <HandleStdEndPointReq+0xc2>
    ad12:	a201      	add	r2, pc, #4	; (adr r2, ad18 <HandleStdEndPointReq+0x20>)
    ad14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ad18:	0000ad4d 	.word	0x0000ad4d
    ad1c:	0000ad7f 	.word	0x0000ad7f
    ad20:	0000adbb 	.word	0x0000adbb
    ad24:	0000ad9b 	.word	0x0000ad9b
    ad28:	0000adbb 	.word	0x0000adbb
    ad2c:	0000adbb 	.word	0x0000adbb
    ad30:	0000adbb 	.word	0x0000adbb
    ad34:	0000adbb 	.word	0x0000adbb
    ad38:	0000adbb 	.word	0x0000adbb
    ad3c:	0000adbb 	.word	0x0000adbb
    ad40:	0000adbb 	.word	0x0000adbb
    ad44:	0000adbb 	.word	0x0000adbb
    ad48:	0000adb7 	.word	0x0000adb7
	case REQ_GET_STATUS:
		// bit 0 = endpointed halted or not
		pbData[0] = (USBHwEPGetStatus(pSetup->wIndex) & EP_STATUS_STALLED) ? 1 : 0;
    ad4c:	68fb      	ldr	r3, [r7, #12]
    ad4e:	889b      	ldrh	r3, [r3, #4]
    ad50:	b2db      	uxtb	r3, r3
    ad52:	4618      	mov	r0, r3
    ad54:	f7ff fb50 	bl	a3f8 <USBHwEPGetStatus>
    ad58:	4603      	mov	r3, r0
    ad5a:	f003 0302 	and.w	r3, r3, #2
    ad5e:	2b00      	cmp	r3, #0
    ad60:	bf14      	ite	ne
    ad62:	2301      	movne	r3, #1
    ad64:	2300      	moveq	r3, #0
    ad66:	b2db      	uxtb	r3, r3
    ad68:	461a      	mov	r2, r3
    ad6a:	697b      	ldr	r3, [r7, #20]
    ad6c:	701a      	strb	r2, [r3, #0]
		pbData[1] = 0;
    ad6e:	697b      	ldr	r3, [r7, #20]
    ad70:	3301      	adds	r3, #1
    ad72:	2200      	movs	r2, #0
    ad74:	701a      	strb	r2, [r3, #0]
		*piLen = 2;
    ad76:	68bb      	ldr	r3, [r7, #8]
    ad78:	2202      	movs	r2, #2
    ad7a:	601a      	str	r2, [r3, #0]
		break;
    ad7c:	e01f      	b.n	adbe <HandleStdEndPointReq+0xc6>
		
	case REQ_CLEAR_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    ad7e:	68fb      	ldr	r3, [r7, #12]
    ad80:	885b      	ldrh	r3, [r3, #2]
    ad82:	2b00      	cmp	r3, #0
    ad84:	d107      	bne.n	ad96 <HandleStdEndPointReq+0x9e>
			// clear HALT by unstalling
			USBHwEPStall(pSetup->wIndex, FALSE);
    ad86:	68fb      	ldr	r3, [r7, #12]
    ad88:	889b      	ldrh	r3, [r3, #4]
    ad8a:	b2db      	uxtb	r3, r3
    ad8c:	4618      	mov	r0, r3
    ad8e:	2100      	movs	r1, #0
    ad90:	f7ff fb4a 	bl	a428 <USBHwEPStall>
			break;
    ad94:	e013      	b.n	adbe <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    ad96:	2300      	movs	r3, #0
    ad98:	e012      	b.n	adc0 <HandleStdEndPointReq+0xc8>
	
	case REQ_SET_FEATURE:
		if (pSetup->wValue == FEA_ENDPOINT_HALT) {
    ad9a:	68fb      	ldr	r3, [r7, #12]
    ad9c:	885b      	ldrh	r3, [r3, #2]
    ad9e:	2b00      	cmp	r3, #0
    ada0:	d107      	bne.n	adb2 <HandleStdEndPointReq+0xba>
			// set HALT by stalling
			USBHwEPStall(pSetup->wIndex, TRUE);
    ada2:	68fb      	ldr	r3, [r7, #12]
    ada4:	889b      	ldrh	r3, [r3, #4]
    ada6:	b2db      	uxtb	r3, r3
    ada8:	4618      	mov	r0, r3
    adaa:	2101      	movs	r1, #1
    adac:	f7ff fb3c 	bl	a428 <USBHwEPStall>
			break;
    adb0:	e005      	b.n	adbe <HandleStdEndPointReq+0xc6>
		}
		// only ENDPOINT_HALT defined for endpoints
		return FALSE;
    adb2:	2300      	movs	r3, #0
    adb4:	e004      	b.n	adc0 <HandleStdEndPointReq+0xc8>

	case REQ_SYNCH_FRAME:
		DBG("EP req %d not implemented\n", pSetup->bRequest);
		return FALSE;
    adb6:	2300      	movs	r3, #0
    adb8:	e002      	b.n	adc0 <HandleStdEndPointReq+0xc8>

	default:
		DBG("Illegal EP req %d\n", pSetup->bRequest);
		return FALSE;
    adba:	2300      	movs	r3, #0
    adbc:	e000      	b.n	adc0 <HandleStdEndPointReq+0xc8>
	}
	
	return TRUE;
    adbe:	2301      	movs	r3, #1
}
    adc0:	4618      	mov	r0, r3
    adc2:	3718      	adds	r7, #24
    adc4:	46bd      	mov	sp, r7
    adc6:	bd80      	pop	{r7, pc}

0000adc8 <USBHandleStandardRequest>:
	@param [in]		ppbData		Data buffer.

	@return TRUE if the request was handled successfully
 */
BOOL USBHandleStandardRequest(TSetupPacket	*pSetup, int *piLen, U8 **ppbData)
{
    adc8:	b580      	push	{r7, lr}
    adca:	b084      	sub	sp, #16
    adcc:	af00      	add	r7, sp, #0
    adce:	60f8      	str	r0, [r7, #12]
    add0:	60b9      	str	r1, [r7, #8]
    add2:	607a      	str	r2, [r7, #4]
	// try the custom request handler first
	if ((pfnHandleCustomReq != NULL) && pfnHandleCustomReq(pSetup, piLen, ppbData)) {
    add4:	4b19      	ldr	r3, [pc, #100]	; (ae3c <USBHandleStandardRequest+0x74>)
    add6:	681b      	ldr	r3, [r3, #0]
    add8:	2b00      	cmp	r3, #0
    adda:	d00a      	beq.n	adf2 <USBHandleStandardRequest+0x2a>
    addc:	4b17      	ldr	r3, [pc, #92]	; (ae3c <USBHandleStandardRequest+0x74>)
    adde:	681b      	ldr	r3, [r3, #0]
    ade0:	68f8      	ldr	r0, [r7, #12]
    ade2:	68b9      	ldr	r1, [r7, #8]
    ade4:	687a      	ldr	r2, [r7, #4]
    ade6:	4798      	blx	r3
    ade8:	4603      	mov	r3, r0
    adea:	2b00      	cmp	r3, #0
    adec:	d001      	beq.n	adf2 <USBHandleStandardRequest+0x2a>
		return TRUE;
    adee:	2301      	movs	r3, #1
    adf0:	e01f      	b.n	ae32 <USBHandleStandardRequest+0x6a>
	}
	
	switch (REQTYPE_GET_RECIP(pSetup->bmRequestType)) {
    adf2:	68fb      	ldr	r3, [r7, #12]
    adf4:	781b      	ldrb	r3, [r3, #0]
    adf6:	f003 031f 	and.w	r3, r3, #31
    adfa:	2b01      	cmp	r3, #1
    adfc:	d00a      	beq.n	ae14 <USBHandleStandardRequest+0x4c>
    adfe:	2b02      	cmp	r3, #2
    ae00:	d00f      	beq.n	ae22 <USBHandleStandardRequest+0x5a>
    ae02:	2b00      	cmp	r3, #0
    ae04:	d114      	bne.n	ae30 <USBHandleStandardRequest+0x68>
	case REQTYPE_RECIP_DEVICE:		return HandleStdDeviceReq(pSetup, piLen, ppbData);
    ae06:	68f8      	ldr	r0, [r7, #12]
    ae08:	68b9      	ldr	r1, [r7, #8]
    ae0a:	687a      	ldr	r2, [r7, #4]
    ae0c:	f7ff feba 	bl	ab84 <HandleStdDeviceReq>
    ae10:	4603      	mov	r3, r0
    ae12:	e00e      	b.n	ae32 <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_INTERFACE:	return HandleStdInterfaceReq(pSetup, piLen, ppbData);
    ae14:	68f8      	ldr	r0, [r7, #12]
    ae16:	68b9      	ldr	r1, [r7, #8]
    ae18:	687a      	ldr	r2, [r7, #4]
    ae1a:	f7ff ff1d 	bl	ac58 <HandleStdInterfaceReq>
    ae1e:	4603      	mov	r3, r0
    ae20:	e007      	b.n	ae32 <USBHandleStandardRequest+0x6a>
	case REQTYPE_RECIP_ENDPOINT: 	return HandleStdEndPointReq(pSetup, piLen, ppbData);
    ae22:	68f8      	ldr	r0, [r7, #12]
    ae24:	68b9      	ldr	r1, [r7, #8]
    ae26:	687a      	ldr	r2, [r7, #4]
    ae28:	f7ff ff66 	bl	acf8 <HandleStdEndPointReq>
    ae2c:	4603      	mov	r3, r0
    ae2e:	e000      	b.n	ae32 <USBHandleStandardRequest+0x6a>
	default: 						return FALSE;
    ae30:	2300      	movs	r3, #0
	}
}
    ae32:	4618      	mov	r0, r3
    ae34:	3710      	adds	r7, #16
    ae36:	46bd      	mov	sp, r7
    ae38:	bd80      	pop	{r7, pc}
    ae3a:	bf00      	nop
    ae3c:	10000af4 	.word	0x10000af4

0000ae40 <__aeabi_drsub>:
    ae40:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
    ae44:	e002      	b.n	ae4c <__adddf3>
    ae46:	bf00      	nop

0000ae48 <__aeabi_dsub>:
    ae48:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000ae4c <__adddf3>:
    ae4c:	b530      	push	{r4, r5, lr}
    ae4e:	ea4f 0441 	mov.w	r4, r1, lsl #1
    ae52:	ea4f 0543 	mov.w	r5, r3, lsl #1
    ae56:	ea94 0f05 	teq	r4, r5
    ae5a:	bf08      	it	eq
    ae5c:	ea90 0f02 	teqeq	r0, r2
    ae60:	bf1f      	itttt	ne
    ae62:	ea54 0c00 	orrsne.w	ip, r4, r0
    ae66:	ea55 0c02 	orrsne.w	ip, r5, r2
    ae6a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
    ae6e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    ae72:	f000 80e2 	beq.w	b03a <__adddf3+0x1ee>
    ae76:	ea4f 5454 	mov.w	r4, r4, lsr #21
    ae7a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
    ae7e:	bfb8      	it	lt
    ae80:	426d      	neglt	r5, r5
    ae82:	dd0c      	ble.n	ae9e <__adddf3+0x52>
    ae84:	442c      	add	r4, r5
    ae86:	ea80 0202 	eor.w	r2, r0, r2
    ae8a:	ea81 0303 	eor.w	r3, r1, r3
    ae8e:	ea82 0000 	eor.w	r0, r2, r0
    ae92:	ea83 0101 	eor.w	r1, r3, r1
    ae96:	ea80 0202 	eor.w	r2, r0, r2
    ae9a:	ea81 0303 	eor.w	r3, r1, r3
    ae9e:	2d36      	cmp	r5, #54	; 0x36
    aea0:	bf88      	it	hi
    aea2:	bd30      	pophi	{r4, r5, pc}
    aea4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    aea8:	ea4f 3101 	mov.w	r1, r1, lsl #12
    aeac:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
    aeb0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
    aeb4:	d002      	beq.n	aebc <__adddf3+0x70>
    aeb6:	4240      	negs	r0, r0
    aeb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    aebc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
    aec0:	ea4f 3303 	mov.w	r3, r3, lsl #12
    aec4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
    aec8:	d002      	beq.n	aed0 <__adddf3+0x84>
    aeca:	4252      	negs	r2, r2
    aecc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    aed0:	ea94 0f05 	teq	r4, r5
    aed4:	f000 80a7 	beq.w	b026 <__adddf3+0x1da>
    aed8:	f1a4 0401 	sub.w	r4, r4, #1
    aedc:	f1d5 0e20 	rsbs	lr, r5, #32
    aee0:	db0d      	blt.n	aefe <__adddf3+0xb2>
    aee2:	fa02 fc0e 	lsl.w	ip, r2, lr
    aee6:	fa22 f205 	lsr.w	r2, r2, r5
    aeea:	1880      	adds	r0, r0, r2
    aeec:	f141 0100 	adc.w	r1, r1, #0
    aef0:	fa03 f20e 	lsl.w	r2, r3, lr
    aef4:	1880      	adds	r0, r0, r2
    aef6:	fa43 f305 	asr.w	r3, r3, r5
    aefa:	4159      	adcs	r1, r3
    aefc:	e00e      	b.n	af1c <__adddf3+0xd0>
    aefe:	f1a5 0520 	sub.w	r5, r5, #32
    af02:	f10e 0e20 	add.w	lr, lr, #32
    af06:	2a01      	cmp	r2, #1
    af08:	fa03 fc0e 	lsl.w	ip, r3, lr
    af0c:	bf28      	it	cs
    af0e:	f04c 0c02 	orrcs.w	ip, ip, #2
    af12:	fa43 f305 	asr.w	r3, r3, r5
    af16:	18c0      	adds	r0, r0, r3
    af18:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
    af1c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    af20:	d507      	bpl.n	af32 <__adddf3+0xe6>
    af22:	f04f 0e00 	mov.w	lr, #0
    af26:	f1dc 0c00 	rsbs	ip, ip, #0
    af2a:	eb7e 0000 	sbcs.w	r0, lr, r0
    af2e:	eb6e 0101 	sbc.w	r1, lr, r1
    af32:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
    af36:	d31b      	bcc.n	af70 <__adddf3+0x124>
    af38:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    af3c:	d30c      	bcc.n	af58 <__adddf3+0x10c>
    af3e:	0849      	lsrs	r1, r1, #1
    af40:	ea5f 0030 	movs.w	r0, r0, rrx
    af44:	ea4f 0c3c 	mov.w	ip, ip, rrx
    af48:	f104 0401 	add.w	r4, r4, #1
    af4c:	ea4f 5244 	mov.w	r2, r4, lsl #21
    af50:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
    af54:	f080 809a 	bcs.w	b08c <__adddf3+0x240>
    af58:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    af5c:	bf08      	it	eq
    af5e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    af62:	f150 0000 	adcs.w	r0, r0, #0
    af66:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    af6a:	ea41 0105 	orr.w	r1, r1, r5
    af6e:	bd30      	pop	{r4, r5, pc}
    af70:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
    af74:	4140      	adcs	r0, r0
    af76:	eb41 0101 	adc.w	r1, r1, r1
    af7a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    af7e:	f1a4 0401 	sub.w	r4, r4, #1
    af82:	d1e9      	bne.n	af58 <__adddf3+0x10c>
    af84:	f091 0f00 	teq	r1, #0
    af88:	bf04      	itt	eq
    af8a:	4601      	moveq	r1, r0
    af8c:	2000      	moveq	r0, #0
    af8e:	fab1 f381 	clz	r3, r1
    af92:	bf08      	it	eq
    af94:	3320      	addeq	r3, #32
    af96:	f1a3 030b 	sub.w	r3, r3, #11
    af9a:	f1b3 0220 	subs.w	r2, r3, #32
    af9e:	da0c      	bge.n	afba <__adddf3+0x16e>
    afa0:	320c      	adds	r2, #12
    afa2:	dd08      	ble.n	afb6 <__adddf3+0x16a>
    afa4:	f102 0c14 	add.w	ip, r2, #20
    afa8:	f1c2 020c 	rsb	r2, r2, #12
    afac:	fa01 f00c 	lsl.w	r0, r1, ip
    afb0:	fa21 f102 	lsr.w	r1, r1, r2
    afb4:	e00c      	b.n	afd0 <__adddf3+0x184>
    afb6:	f102 0214 	add.w	r2, r2, #20
    afba:	bfd8      	it	le
    afbc:	f1c2 0c20 	rsble	ip, r2, #32
    afc0:	fa01 f102 	lsl.w	r1, r1, r2
    afc4:	fa20 fc0c 	lsr.w	ip, r0, ip
    afc8:	bfdc      	itt	le
    afca:	ea41 010c 	orrle.w	r1, r1, ip
    afce:	4090      	lslle	r0, r2
    afd0:	1ae4      	subs	r4, r4, r3
    afd2:	bfa2      	ittt	ge
    afd4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
    afd8:	4329      	orrge	r1, r5
    afda:	bd30      	popge	{r4, r5, pc}
    afdc:	ea6f 0404 	mvn.w	r4, r4
    afe0:	3c1f      	subs	r4, #31
    afe2:	da1c      	bge.n	b01e <__adddf3+0x1d2>
    afe4:	340c      	adds	r4, #12
    afe6:	dc0e      	bgt.n	b006 <__adddf3+0x1ba>
    afe8:	f104 0414 	add.w	r4, r4, #20
    afec:	f1c4 0220 	rsb	r2, r4, #32
    aff0:	fa20 f004 	lsr.w	r0, r0, r4
    aff4:	fa01 f302 	lsl.w	r3, r1, r2
    aff8:	ea40 0003 	orr.w	r0, r0, r3
    affc:	fa21 f304 	lsr.w	r3, r1, r4
    b000:	ea45 0103 	orr.w	r1, r5, r3
    b004:	bd30      	pop	{r4, r5, pc}
    b006:	f1c4 040c 	rsb	r4, r4, #12
    b00a:	f1c4 0220 	rsb	r2, r4, #32
    b00e:	fa20 f002 	lsr.w	r0, r0, r2
    b012:	fa01 f304 	lsl.w	r3, r1, r4
    b016:	ea40 0003 	orr.w	r0, r0, r3
    b01a:	4629      	mov	r1, r5
    b01c:	bd30      	pop	{r4, r5, pc}
    b01e:	fa21 f004 	lsr.w	r0, r1, r4
    b022:	4629      	mov	r1, r5
    b024:	bd30      	pop	{r4, r5, pc}
    b026:	f094 0f00 	teq	r4, #0
    b02a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
    b02e:	bf06      	itte	eq
    b030:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
    b034:	3401      	addeq	r4, #1
    b036:	3d01      	subne	r5, #1
    b038:	e74e      	b.n	aed8 <__adddf3+0x8c>
    b03a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b03e:	bf18      	it	ne
    b040:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
    b044:	d029      	beq.n	b09a <__adddf3+0x24e>
    b046:	ea94 0f05 	teq	r4, r5
    b04a:	bf08      	it	eq
    b04c:	ea90 0f02 	teqeq	r0, r2
    b050:	d005      	beq.n	b05e <__adddf3+0x212>
    b052:	ea54 0c00 	orrs.w	ip, r4, r0
    b056:	bf04      	itt	eq
    b058:	4619      	moveq	r1, r3
    b05a:	4610      	moveq	r0, r2
    b05c:	bd30      	pop	{r4, r5, pc}
    b05e:	ea91 0f03 	teq	r1, r3
    b062:	bf1e      	ittt	ne
    b064:	2100      	movne	r1, #0
    b066:	2000      	movne	r0, #0
    b068:	bd30      	popne	{r4, r5, pc}
    b06a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
    b06e:	d105      	bne.n	b07c <__adddf3+0x230>
    b070:	0040      	lsls	r0, r0, #1
    b072:	4149      	adcs	r1, r1
    b074:	bf28      	it	cs
    b076:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
    b07a:	bd30      	pop	{r4, r5, pc}
    b07c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
    b080:	bf3c      	itt	cc
    b082:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
    b086:	bd30      	popcc	{r4, r5, pc}
    b088:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b08c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
    b090:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b094:	f04f 0000 	mov.w	r0, #0
    b098:	bd30      	pop	{r4, r5, pc}
    b09a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
    b09e:	bf1a      	itte	ne
    b0a0:	4619      	movne	r1, r3
    b0a2:	4610      	movne	r0, r2
    b0a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
    b0a8:	bf1c      	itt	ne
    b0aa:	460b      	movne	r3, r1
    b0ac:	4602      	movne	r2, r0
    b0ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b0b2:	bf06      	itte	eq
    b0b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
    b0b8:	ea91 0f03 	teqeq	r1, r3
    b0bc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
    b0c0:	bd30      	pop	{r4, r5, pc}
    b0c2:	bf00      	nop

0000b0c4 <__aeabi_ui2d>:
    b0c4:	f090 0f00 	teq	r0, #0
    b0c8:	bf04      	itt	eq
    b0ca:	2100      	moveq	r1, #0
    b0cc:	4770      	bxeq	lr
    b0ce:	b530      	push	{r4, r5, lr}
    b0d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b0d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b0d8:	f04f 0500 	mov.w	r5, #0
    b0dc:	f04f 0100 	mov.w	r1, #0
    b0e0:	e750      	b.n	af84 <__adddf3+0x138>
    b0e2:	bf00      	nop

0000b0e4 <__aeabi_i2d>:
    b0e4:	f090 0f00 	teq	r0, #0
    b0e8:	bf04      	itt	eq
    b0ea:	2100      	moveq	r1, #0
    b0ec:	4770      	bxeq	lr
    b0ee:	b530      	push	{r4, r5, lr}
    b0f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b0f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b0f8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
    b0fc:	bf48      	it	mi
    b0fe:	4240      	negmi	r0, r0
    b100:	f04f 0100 	mov.w	r1, #0
    b104:	e73e      	b.n	af84 <__adddf3+0x138>
    b106:	bf00      	nop

0000b108 <__aeabi_f2d>:
    b108:	0042      	lsls	r2, r0, #1
    b10a:	ea4f 01e2 	mov.w	r1, r2, asr #3
    b10e:	ea4f 0131 	mov.w	r1, r1, rrx
    b112:	ea4f 7002 	mov.w	r0, r2, lsl #28
    b116:	bf1f      	itttt	ne
    b118:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
    b11c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b120:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
    b124:	4770      	bxne	lr
    b126:	f092 0f00 	teq	r2, #0
    b12a:	bf14      	ite	ne
    b12c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
    b130:	4770      	bxeq	lr
    b132:	b530      	push	{r4, r5, lr}
    b134:	f44f 7460 	mov.w	r4, #896	; 0x380
    b138:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
    b13c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b140:	e720      	b.n	af84 <__adddf3+0x138>
    b142:	bf00      	nop

0000b144 <__aeabi_ul2d>:
    b144:	ea50 0201 	orrs.w	r2, r0, r1
    b148:	bf08      	it	eq
    b14a:	4770      	bxeq	lr
    b14c:	b530      	push	{r4, r5, lr}
    b14e:	f04f 0500 	mov.w	r5, #0
    b152:	e00a      	b.n	b16a <__aeabi_l2d+0x16>

0000b154 <__aeabi_l2d>:
    b154:	ea50 0201 	orrs.w	r2, r0, r1
    b158:	bf08      	it	eq
    b15a:	4770      	bxeq	lr
    b15c:	b530      	push	{r4, r5, lr}
    b15e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
    b162:	d502      	bpl.n	b16a <__aeabi_l2d+0x16>
    b164:	4240      	negs	r0, r0
    b166:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    b16a:	f44f 6480 	mov.w	r4, #1024	; 0x400
    b16e:	f104 0432 	add.w	r4, r4, #50	; 0x32
    b172:	ea5f 5c91 	movs.w	ip, r1, lsr #22
    b176:	f43f aedc 	beq.w	af32 <__adddf3+0xe6>
    b17a:	f04f 0203 	mov.w	r2, #3
    b17e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b182:	bf18      	it	ne
    b184:	3203      	addne	r2, #3
    b186:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
    b18a:	bf18      	it	ne
    b18c:	3203      	addne	r2, #3
    b18e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
    b192:	f1c2 0320 	rsb	r3, r2, #32
    b196:	fa00 fc03 	lsl.w	ip, r0, r3
    b19a:	fa20 f002 	lsr.w	r0, r0, r2
    b19e:	fa01 fe03 	lsl.w	lr, r1, r3
    b1a2:	ea40 000e 	orr.w	r0, r0, lr
    b1a6:	fa21 f102 	lsr.w	r1, r1, r2
    b1aa:	4414      	add	r4, r2
    b1ac:	e6c1      	b.n	af32 <__adddf3+0xe6>
    b1ae:	bf00      	nop

0000b1b0 <__aeabi_dmul>:
    b1b0:	b570      	push	{r4, r5, r6, lr}
    b1b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b1b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b1ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b1be:	bf1d      	ittte	ne
    b1c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b1c4:	ea94 0f0c 	teqne	r4, ip
    b1c8:	ea95 0f0c 	teqne	r5, ip
    b1cc:	f000 f8de 	bleq	b38c <__aeabi_dmul+0x1dc>
    b1d0:	442c      	add	r4, r5
    b1d2:	ea81 0603 	eor.w	r6, r1, r3
    b1d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
    b1da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
    b1de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
    b1e2:	bf18      	it	ne
    b1e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
    b1e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b1ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    b1f0:	d038      	beq.n	b264 <__aeabi_dmul+0xb4>
    b1f2:	fba0 ce02 	umull	ip, lr, r0, r2
    b1f6:	f04f 0500 	mov.w	r5, #0
    b1fa:	fbe1 e502 	umlal	lr, r5, r1, r2
    b1fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
    b202:	fbe0 e503 	umlal	lr, r5, r0, r3
    b206:	f04f 0600 	mov.w	r6, #0
    b20a:	fbe1 5603 	umlal	r5, r6, r1, r3
    b20e:	f09c 0f00 	teq	ip, #0
    b212:	bf18      	it	ne
    b214:	f04e 0e01 	orrne.w	lr, lr, #1
    b218:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
    b21c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    b220:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
    b224:	d204      	bcs.n	b230 <__aeabi_dmul+0x80>
    b226:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
    b22a:	416d      	adcs	r5, r5
    b22c:	eb46 0606 	adc.w	r6, r6, r6
    b230:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
    b234:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
    b238:	ea4f 20c5 	mov.w	r0, r5, lsl #11
    b23c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
    b240:	ea4f 2ece 	mov.w	lr, lr, lsl #11
    b244:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b248:	bf88      	it	hi
    b24a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b24e:	d81e      	bhi.n	b28e <__aeabi_dmul+0xde>
    b250:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
    b254:	bf08      	it	eq
    b256:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
    b25a:	f150 0000 	adcs.w	r0, r0, #0
    b25e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b262:	bd70      	pop	{r4, r5, r6, pc}
    b264:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
    b268:	ea46 0101 	orr.w	r1, r6, r1
    b26c:	ea40 0002 	orr.w	r0, r0, r2
    b270:	ea81 0103 	eor.w	r1, r1, r3
    b274:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
    b278:	bfc2      	ittt	gt
    b27a:	ebd4 050c 	rsbsgt	r5, r4, ip
    b27e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b282:	bd70      	popgt	{r4, r5, r6, pc}
    b284:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b288:	f04f 0e00 	mov.w	lr, #0
    b28c:	3c01      	subs	r4, #1
    b28e:	f300 80ab 	bgt.w	b3e8 <__aeabi_dmul+0x238>
    b292:	f114 0f36 	cmn.w	r4, #54	; 0x36
    b296:	bfde      	ittt	le
    b298:	2000      	movle	r0, #0
    b29a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
    b29e:	bd70      	pople	{r4, r5, r6, pc}
    b2a0:	f1c4 0400 	rsb	r4, r4, #0
    b2a4:	3c20      	subs	r4, #32
    b2a6:	da35      	bge.n	b314 <__aeabi_dmul+0x164>
    b2a8:	340c      	adds	r4, #12
    b2aa:	dc1b      	bgt.n	b2e4 <__aeabi_dmul+0x134>
    b2ac:	f104 0414 	add.w	r4, r4, #20
    b2b0:	f1c4 0520 	rsb	r5, r4, #32
    b2b4:	fa00 f305 	lsl.w	r3, r0, r5
    b2b8:	fa20 f004 	lsr.w	r0, r0, r4
    b2bc:	fa01 f205 	lsl.w	r2, r1, r5
    b2c0:	ea40 0002 	orr.w	r0, r0, r2
    b2c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
    b2c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
    b2cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b2d0:	fa21 f604 	lsr.w	r6, r1, r4
    b2d4:	eb42 0106 	adc.w	r1, r2, r6
    b2d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b2dc:	bf08      	it	eq
    b2de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b2e2:	bd70      	pop	{r4, r5, r6, pc}
    b2e4:	f1c4 040c 	rsb	r4, r4, #12
    b2e8:	f1c4 0520 	rsb	r5, r4, #32
    b2ec:	fa00 f304 	lsl.w	r3, r0, r4
    b2f0:	fa20 f005 	lsr.w	r0, r0, r5
    b2f4:	fa01 f204 	lsl.w	r2, r1, r4
    b2f8:	ea40 0002 	orr.w	r0, r0, r2
    b2fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b300:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
    b304:	f141 0100 	adc.w	r1, r1, #0
    b308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b30c:	bf08      	it	eq
    b30e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b312:	bd70      	pop	{r4, r5, r6, pc}
    b314:	f1c4 0520 	rsb	r5, r4, #32
    b318:	fa00 f205 	lsl.w	r2, r0, r5
    b31c:	ea4e 0e02 	orr.w	lr, lr, r2
    b320:	fa20 f304 	lsr.w	r3, r0, r4
    b324:	fa01 f205 	lsl.w	r2, r1, r5
    b328:	ea43 0302 	orr.w	r3, r3, r2
    b32c:	fa21 f004 	lsr.w	r0, r1, r4
    b330:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b334:	fa21 f204 	lsr.w	r2, r1, r4
    b338:	ea20 0002 	bic.w	r0, r0, r2
    b33c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
    b340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
    b344:	bf08      	it	eq
    b346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
    b34a:	bd70      	pop	{r4, r5, r6, pc}
    b34c:	f094 0f00 	teq	r4, #0
    b350:	d10f      	bne.n	b372 <__aeabi_dmul+0x1c2>
    b352:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
    b356:	0040      	lsls	r0, r0, #1
    b358:	eb41 0101 	adc.w	r1, r1, r1
    b35c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b360:	bf08      	it	eq
    b362:	3c01      	subeq	r4, #1
    b364:	d0f7      	beq.n	b356 <__aeabi_dmul+0x1a6>
    b366:	ea41 0106 	orr.w	r1, r1, r6
    b36a:	f095 0f00 	teq	r5, #0
    b36e:	bf18      	it	ne
    b370:	4770      	bxne	lr
    b372:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
    b376:	0052      	lsls	r2, r2, #1
    b378:	eb43 0303 	adc.w	r3, r3, r3
    b37c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    b380:	bf08      	it	eq
    b382:	3d01      	subeq	r5, #1
    b384:	d0f7      	beq.n	b376 <__aeabi_dmul+0x1c6>
    b386:	ea43 0306 	orr.w	r3, r3, r6
    b38a:	4770      	bx	lr
    b38c:	ea94 0f0c 	teq	r4, ip
    b390:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b394:	bf18      	it	ne
    b396:	ea95 0f0c 	teqne	r5, ip
    b39a:	d00c      	beq.n	b3b6 <__aeabi_dmul+0x206>
    b39c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b3a0:	bf18      	it	ne
    b3a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b3a6:	d1d1      	bne.n	b34c <__aeabi_dmul+0x19c>
    b3a8:	ea81 0103 	eor.w	r1, r1, r3
    b3ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b3b0:	f04f 0000 	mov.w	r0, #0
    b3b4:	bd70      	pop	{r4, r5, r6, pc}
    b3b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b3ba:	bf06      	itte	eq
    b3bc:	4610      	moveq	r0, r2
    b3be:	4619      	moveq	r1, r3
    b3c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b3c4:	d019      	beq.n	b3fa <__aeabi_dmul+0x24a>
    b3c6:	ea94 0f0c 	teq	r4, ip
    b3ca:	d102      	bne.n	b3d2 <__aeabi_dmul+0x222>
    b3cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
    b3d0:	d113      	bne.n	b3fa <__aeabi_dmul+0x24a>
    b3d2:	ea95 0f0c 	teq	r5, ip
    b3d6:	d105      	bne.n	b3e4 <__aeabi_dmul+0x234>
    b3d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
    b3dc:	bf1c      	itt	ne
    b3de:	4610      	movne	r0, r2
    b3e0:	4619      	movne	r1, r3
    b3e2:	d10a      	bne.n	b3fa <__aeabi_dmul+0x24a>
    b3e4:	ea81 0103 	eor.w	r1, r1, r3
    b3e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
    b3ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b3f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    b3f4:	f04f 0000 	mov.w	r0, #0
    b3f8:	bd70      	pop	{r4, r5, r6, pc}
    b3fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
    b3fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
    b402:	bd70      	pop	{r4, r5, r6, pc}

0000b404 <__aeabi_ddiv>:
    b404:	b570      	push	{r4, r5, r6, lr}
    b406:	f04f 0cff 	mov.w	ip, #255	; 0xff
    b40a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
    b40e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
    b412:	bf1d      	ittte	ne
    b414:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
    b418:	ea94 0f0c 	teqne	r4, ip
    b41c:	ea95 0f0c 	teqne	r5, ip
    b420:	f000 f8a7 	bleq	b572 <__aeabi_ddiv+0x16e>
    b424:	eba4 0405 	sub.w	r4, r4, r5
    b428:	ea81 0e03 	eor.w	lr, r1, r3
    b42c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b430:	ea4f 3101 	mov.w	r1, r1, lsl #12
    b434:	f000 8088 	beq.w	b548 <__aeabi_ddiv+0x144>
    b438:	ea4f 3303 	mov.w	r3, r3, lsl #12
    b43c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    b440:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
    b444:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b448:	ea4f 2202 	mov.w	r2, r2, lsl #8
    b44c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
    b450:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
    b454:	ea4f 2600 	mov.w	r6, r0, lsl #8
    b458:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
    b45c:	429d      	cmp	r5, r3
    b45e:	bf08      	it	eq
    b460:	4296      	cmpeq	r6, r2
    b462:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
    b466:	f504 7440 	add.w	r4, r4, #768	; 0x300
    b46a:	d202      	bcs.n	b472 <__aeabi_ddiv+0x6e>
    b46c:	085b      	lsrs	r3, r3, #1
    b46e:	ea4f 0232 	mov.w	r2, r2, rrx
    b472:	1ab6      	subs	r6, r6, r2
    b474:	eb65 0503 	sbc.w	r5, r5, r3
    b478:	085b      	lsrs	r3, r3, #1
    b47a:	ea4f 0232 	mov.w	r2, r2, rrx
    b47e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b482:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
    b486:	ebb6 0e02 	subs.w	lr, r6, r2
    b48a:	eb75 0e03 	sbcs.w	lr, r5, r3
    b48e:	bf22      	ittt	cs
    b490:	1ab6      	subcs	r6, r6, r2
    b492:	4675      	movcs	r5, lr
    b494:	ea40 000c 	orrcs.w	r0, r0, ip
    b498:	085b      	lsrs	r3, r3, #1
    b49a:	ea4f 0232 	mov.w	r2, r2, rrx
    b49e:	ebb6 0e02 	subs.w	lr, r6, r2
    b4a2:	eb75 0e03 	sbcs.w	lr, r5, r3
    b4a6:	bf22      	ittt	cs
    b4a8:	1ab6      	subcs	r6, r6, r2
    b4aa:	4675      	movcs	r5, lr
    b4ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
    b4b0:	085b      	lsrs	r3, r3, #1
    b4b2:	ea4f 0232 	mov.w	r2, r2, rrx
    b4b6:	ebb6 0e02 	subs.w	lr, r6, r2
    b4ba:	eb75 0e03 	sbcs.w	lr, r5, r3
    b4be:	bf22      	ittt	cs
    b4c0:	1ab6      	subcs	r6, r6, r2
    b4c2:	4675      	movcs	r5, lr
    b4c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
    b4c8:	085b      	lsrs	r3, r3, #1
    b4ca:	ea4f 0232 	mov.w	r2, r2, rrx
    b4ce:	ebb6 0e02 	subs.w	lr, r6, r2
    b4d2:	eb75 0e03 	sbcs.w	lr, r5, r3
    b4d6:	bf22      	ittt	cs
    b4d8:	1ab6      	subcs	r6, r6, r2
    b4da:	4675      	movcs	r5, lr
    b4dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
    b4e0:	ea55 0e06 	orrs.w	lr, r5, r6
    b4e4:	d018      	beq.n	b518 <__aeabi_ddiv+0x114>
    b4e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
    b4ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
    b4ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
    b4f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
    b4f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
    b4fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
    b4fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
    b502:	d1c0      	bne.n	b486 <__aeabi_ddiv+0x82>
    b504:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b508:	d10b      	bne.n	b522 <__aeabi_ddiv+0x11e>
    b50a:	ea41 0100 	orr.w	r1, r1, r0
    b50e:	f04f 0000 	mov.w	r0, #0
    b512:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
    b516:	e7b6      	b.n	b486 <__aeabi_ddiv+0x82>
    b518:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    b51c:	bf04      	itt	eq
    b51e:	4301      	orreq	r1, r0
    b520:	2000      	moveq	r0, #0
    b522:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
    b526:	bf88      	it	hi
    b528:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
    b52c:	f63f aeaf 	bhi.w	b28e <__aeabi_dmul+0xde>
    b530:	ebb5 0c03 	subs.w	ip, r5, r3
    b534:	bf04      	itt	eq
    b536:	ebb6 0c02 	subseq.w	ip, r6, r2
    b53a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
    b53e:	f150 0000 	adcs.w	r0, r0, #0
    b542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
    b546:	bd70      	pop	{r4, r5, r6, pc}
    b548:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
    b54c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
    b550:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
    b554:	bfc2      	ittt	gt
    b556:	ebd4 050c 	rsbsgt	r5, r4, ip
    b55a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
    b55e:	bd70      	popgt	{r4, r5, r6, pc}
    b560:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    b564:	f04f 0e00 	mov.w	lr, #0
    b568:	3c01      	subs	r4, #1
    b56a:	e690      	b.n	b28e <__aeabi_dmul+0xde>
    b56c:	ea45 0e06 	orr.w	lr, r5, r6
    b570:	e68d      	b.n	b28e <__aeabi_dmul+0xde>
    b572:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
    b576:	ea94 0f0c 	teq	r4, ip
    b57a:	bf08      	it	eq
    b57c:	ea95 0f0c 	teqeq	r5, ip
    b580:	f43f af3b 	beq.w	b3fa <__aeabi_dmul+0x24a>
    b584:	ea94 0f0c 	teq	r4, ip
    b588:	d10a      	bne.n	b5a0 <__aeabi_ddiv+0x19c>
    b58a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
    b58e:	f47f af34 	bne.w	b3fa <__aeabi_dmul+0x24a>
    b592:	ea95 0f0c 	teq	r5, ip
    b596:	f47f af25 	bne.w	b3e4 <__aeabi_dmul+0x234>
    b59a:	4610      	mov	r0, r2
    b59c:	4619      	mov	r1, r3
    b59e:	e72c      	b.n	b3fa <__aeabi_dmul+0x24a>
    b5a0:	ea95 0f0c 	teq	r5, ip
    b5a4:	d106      	bne.n	b5b4 <__aeabi_ddiv+0x1b0>
    b5a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
    b5aa:	f43f aefd 	beq.w	b3a8 <__aeabi_dmul+0x1f8>
    b5ae:	4610      	mov	r0, r2
    b5b0:	4619      	mov	r1, r3
    b5b2:	e722      	b.n	b3fa <__aeabi_dmul+0x24a>
    b5b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
    b5b8:	bf18      	it	ne
    b5ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
    b5be:	f47f aec5 	bne.w	b34c <__aeabi_dmul+0x19c>
    b5c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
    b5c6:	f47f af0d 	bne.w	b3e4 <__aeabi_dmul+0x234>
    b5ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
    b5ce:	f47f aeeb 	bne.w	b3a8 <__aeabi_dmul+0x1f8>
    b5d2:	e712      	b.n	b3fa <__aeabi_dmul+0x24a>

0000b5d4 <__aeabi_d2uiz>:
    b5d4:	004a      	lsls	r2, r1, #1
    b5d6:	d211      	bcs.n	b5fc <__aeabi_d2uiz+0x28>
    b5d8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    b5dc:	d211      	bcs.n	b602 <__aeabi_d2uiz+0x2e>
    b5de:	d50d      	bpl.n	b5fc <__aeabi_d2uiz+0x28>
    b5e0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    b5e4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    b5e8:	d40e      	bmi.n	b608 <__aeabi_d2uiz+0x34>
    b5ea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    b5ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    b5f2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    b5f6:	fa23 f002 	lsr.w	r0, r3, r2
    b5fa:	4770      	bx	lr
    b5fc:	f04f 0000 	mov.w	r0, #0
    b600:	4770      	bx	lr
    b602:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    b606:	d102      	bne.n	b60e <__aeabi_d2uiz+0x3a>
    b608:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    b60c:	4770      	bx	lr
    b60e:	f04f 0000 	mov.w	r0, #0
    b612:	4770      	bx	lr

0000b614 <memcmp>:
    b614:	2a03      	cmp	r2, #3
    b616:	b470      	push	{r4, r5, r6}
    b618:	d926      	bls.n	b668 <memcmp+0x54>
    b61a:	ea40 0301 	orr.w	r3, r0, r1
    b61e:	079b      	lsls	r3, r3, #30
    b620:	d011      	beq.n	b646 <memcmp+0x32>
    b622:	7804      	ldrb	r4, [r0, #0]
    b624:	780d      	ldrb	r5, [r1, #0]
    b626:	42ac      	cmp	r4, r5
    b628:	d122      	bne.n	b670 <memcmp+0x5c>
    b62a:	4402      	add	r2, r0
    b62c:	1c43      	adds	r3, r0, #1
    b62e:	e005      	b.n	b63c <memcmp+0x28>
    b630:	f813 4b01 	ldrb.w	r4, [r3], #1
    b634:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    b638:	42ac      	cmp	r4, r5
    b63a:	d119      	bne.n	b670 <memcmp+0x5c>
    b63c:	4293      	cmp	r3, r2
    b63e:	d1f7      	bne.n	b630 <memcmp+0x1c>
    b640:	2000      	movs	r0, #0
    b642:	bc70      	pop	{r4, r5, r6}
    b644:	4770      	bx	lr
    b646:	460c      	mov	r4, r1
    b648:	4603      	mov	r3, r0
    b64a:	681e      	ldr	r6, [r3, #0]
    b64c:	6825      	ldr	r5, [r4, #0]
    b64e:	4618      	mov	r0, r3
    b650:	42ae      	cmp	r6, r5
    b652:	4621      	mov	r1, r4
    b654:	f103 0304 	add.w	r3, r3, #4
    b658:	f104 0404 	add.w	r4, r4, #4
    b65c:	d104      	bne.n	b668 <memcmp+0x54>
    b65e:	3a04      	subs	r2, #4
    b660:	2a03      	cmp	r2, #3
    b662:	4618      	mov	r0, r3
    b664:	4621      	mov	r1, r4
    b666:	d8f0      	bhi.n	b64a <memcmp+0x36>
    b668:	2a00      	cmp	r2, #0
    b66a:	d1da      	bne.n	b622 <memcmp+0xe>
    b66c:	4610      	mov	r0, r2
    b66e:	e7e8      	b.n	b642 <memcmp+0x2e>
    b670:	1b60      	subs	r0, r4, r5
    b672:	bc70      	pop	{r4, r5, r6}
    b674:	4770      	bx	lr
    b676:	bf00      	nop

0000b678 <memcpy>:
    b678:	4684      	mov	ip, r0
    b67a:	ea41 0300 	orr.w	r3, r1, r0
    b67e:	f013 0303 	ands.w	r3, r3, #3
    b682:	d149      	bne.n	b718 <memcpy+0xa0>
    b684:	3a40      	subs	r2, #64	; 0x40
    b686:	d323      	bcc.n	b6d0 <memcpy+0x58>
    b688:	680b      	ldr	r3, [r1, #0]
    b68a:	6003      	str	r3, [r0, #0]
    b68c:	684b      	ldr	r3, [r1, #4]
    b68e:	6043      	str	r3, [r0, #4]
    b690:	688b      	ldr	r3, [r1, #8]
    b692:	6083      	str	r3, [r0, #8]
    b694:	68cb      	ldr	r3, [r1, #12]
    b696:	60c3      	str	r3, [r0, #12]
    b698:	690b      	ldr	r3, [r1, #16]
    b69a:	6103      	str	r3, [r0, #16]
    b69c:	694b      	ldr	r3, [r1, #20]
    b69e:	6143      	str	r3, [r0, #20]
    b6a0:	698b      	ldr	r3, [r1, #24]
    b6a2:	6183      	str	r3, [r0, #24]
    b6a4:	69cb      	ldr	r3, [r1, #28]
    b6a6:	61c3      	str	r3, [r0, #28]
    b6a8:	6a0b      	ldr	r3, [r1, #32]
    b6aa:	6203      	str	r3, [r0, #32]
    b6ac:	6a4b      	ldr	r3, [r1, #36]	; 0x24
    b6ae:	6243      	str	r3, [r0, #36]	; 0x24
    b6b0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    b6b2:	6283      	str	r3, [r0, #40]	; 0x28
    b6b4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    b6b6:	62c3      	str	r3, [r0, #44]	; 0x2c
    b6b8:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    b6ba:	6303      	str	r3, [r0, #48]	; 0x30
    b6bc:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    b6be:	6343      	str	r3, [r0, #52]	; 0x34
    b6c0:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    b6c2:	6383      	str	r3, [r0, #56]	; 0x38
    b6c4:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    b6c6:	63c3      	str	r3, [r0, #60]	; 0x3c
    b6c8:	3040      	adds	r0, #64	; 0x40
    b6ca:	3140      	adds	r1, #64	; 0x40
    b6cc:	3a40      	subs	r2, #64	; 0x40
    b6ce:	d2db      	bcs.n	b688 <memcpy+0x10>
    b6d0:	3230      	adds	r2, #48	; 0x30
    b6d2:	d30b      	bcc.n	b6ec <memcpy+0x74>
    b6d4:	680b      	ldr	r3, [r1, #0]
    b6d6:	6003      	str	r3, [r0, #0]
    b6d8:	684b      	ldr	r3, [r1, #4]
    b6da:	6043      	str	r3, [r0, #4]
    b6dc:	688b      	ldr	r3, [r1, #8]
    b6de:	6083      	str	r3, [r0, #8]
    b6e0:	68cb      	ldr	r3, [r1, #12]
    b6e2:	60c3      	str	r3, [r0, #12]
    b6e4:	3010      	adds	r0, #16
    b6e6:	3110      	adds	r1, #16
    b6e8:	3a10      	subs	r2, #16
    b6ea:	d2f3      	bcs.n	b6d4 <memcpy+0x5c>
    b6ec:	320c      	adds	r2, #12
    b6ee:	d305      	bcc.n	b6fc <memcpy+0x84>
    b6f0:	f851 3b04 	ldr.w	r3, [r1], #4
    b6f4:	f840 3b04 	str.w	r3, [r0], #4
    b6f8:	3a04      	subs	r2, #4
    b6fa:	d2f9      	bcs.n	b6f0 <memcpy+0x78>
    b6fc:	3204      	adds	r2, #4
    b6fe:	d008      	beq.n	b712 <memcpy+0x9a>
    b700:	07d2      	lsls	r2, r2, #31
    b702:	bf1c      	itt	ne
    b704:	f811 3b01 	ldrbne.w	r3, [r1], #1
    b708:	f800 3b01 	strbne.w	r3, [r0], #1
    b70c:	d301      	bcc.n	b712 <memcpy+0x9a>
    b70e:	880b      	ldrh	r3, [r1, #0]
    b710:	8003      	strh	r3, [r0, #0]
    b712:	4660      	mov	r0, ip
    b714:	4770      	bx	lr
    b716:	bf00      	nop
    b718:	2a08      	cmp	r2, #8
    b71a:	d313      	bcc.n	b744 <memcpy+0xcc>
    b71c:	078b      	lsls	r3, r1, #30
    b71e:	d0b1      	beq.n	b684 <memcpy+0xc>
    b720:	f010 0303 	ands.w	r3, r0, #3
    b724:	d0ae      	beq.n	b684 <memcpy+0xc>
    b726:	f1c3 0304 	rsb	r3, r3, #4
    b72a:	1ad2      	subs	r2, r2, r3
    b72c:	07db      	lsls	r3, r3, #31
    b72e:	bf1c      	itt	ne
    b730:	f811 3b01 	ldrbne.w	r3, [r1], #1
    b734:	f800 3b01 	strbne.w	r3, [r0], #1
    b738:	d3a4      	bcc.n	b684 <memcpy+0xc>
    b73a:	f831 3b02 	ldrh.w	r3, [r1], #2
    b73e:	f820 3b02 	strh.w	r3, [r0], #2
    b742:	e79f      	b.n	b684 <memcpy+0xc>
    b744:	3a04      	subs	r2, #4
    b746:	d3d9      	bcc.n	b6fc <memcpy+0x84>
    b748:	3a01      	subs	r2, #1
    b74a:	f811 3b01 	ldrb.w	r3, [r1], #1
    b74e:	f800 3b01 	strb.w	r3, [r0], #1
    b752:	d2f9      	bcs.n	b748 <memcpy+0xd0>
    b754:	780b      	ldrb	r3, [r1, #0]
    b756:	7003      	strb	r3, [r0, #0]
    b758:	784b      	ldrb	r3, [r1, #1]
    b75a:	7043      	strb	r3, [r0, #1]
    b75c:	788b      	ldrb	r3, [r1, #2]
    b75e:	7083      	strb	r3, [r0, #2]
    b760:	4660      	mov	r0, ip
    b762:	4770      	bx	lr

0000b764 <strlen>:
    b764:	f020 0103 	bic.w	r1, r0, #3
    b768:	f010 0003 	ands.w	r0, r0, #3
    b76c:	f1c0 0000 	rsb	r0, r0, #0
    b770:	f851 3b04 	ldr.w	r3, [r1], #4
    b774:	f100 0c04 	add.w	ip, r0, #4
    b778:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
    b77c:	f06f 0200 	mvn.w	r2, #0
    b780:	bf1c      	itt	ne
    b782:	fa22 f20c 	lsrne.w	r2, r2, ip
    b786:	4313      	orrne	r3, r2
    b788:	f04f 0c01 	mov.w	ip, #1
    b78c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
    b790:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
    b794:	eba3 020c 	sub.w	r2, r3, ip
    b798:	ea22 0203 	bic.w	r2, r2, r3
    b79c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
    b7a0:	bf04      	itt	eq
    b7a2:	f851 3b04 	ldreq.w	r3, [r1], #4
    b7a6:	3004      	addeq	r0, #4
    b7a8:	d0f4      	beq.n	b794 <strlen+0x30>
    b7aa:	f1c2 0100 	rsb	r1, r2, #0
    b7ae:	ea02 0201 	and.w	r2, r2, r1
    b7b2:	fab2 f282 	clz	r2, r2
    b7b6:	f1c2 021f 	rsb	r2, r2, #31
    b7ba:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    b7be:	4770      	bx	lr
    b7c0:	00000043 	.word	0x00000043

0000b7c4 <_global_impure_ptr>:
    b7c4:	10000020                                 ...

0000b7c8 <advertising_channels>:
    b7c8:	00270c00                                ..'.

0000b7cc <data_channels>:
    b7cc:	04030201 08070605 0d0b0a09 11100f0e     ................
    b7dc:	15141312 19181716 1d1c1b1a 21201f1e     .............. !
    b7ec:	25242322 00000026                       "#$%&...

0000b7f4 <whitening>:
    b7f4:	01010101 01000100 00000100 00010000     ................
    b804:	01000101 00010101 01010100 00010000     ................
    b814:	01010001 01010000 00000000 00010100     ................
    b824:	01000101 01010100 00000100 00010100     ................
    b834:	00000100 00000100 00000000 01000001     ................
    b844:	01010000 00000100 01010101 01010100     ................
    b854:	00000000 01010101 00010101 01010000     ................
    b864:	01010001 01000000 00000100 00010001     ................

0000b874 <whitening_index>:
    b874:	6f783e46 650f2e4d 1a1f2742 597d5350     F>xoM..eB'..PS}Y
    b884:	3608230a 0021117a 5e06733a 14343156     .#.6z.!.:s.^V14.
    b894:	5a541b28 662f703f                       (.TZ?p/f

0000b89c <hop_interval_lut>:
    b89c:	19130100 101f0f1c 1b1a210e 05081422     .........!.."...
    b8ac:	02231807 1d201e0d 0b0a0311 06151704     ..#... .........
    b8bc:	120c0916 00000024                       ....$...

0000b8c4 <whitening_word>:
    b8c4:	c3bcb240 5f4a371f 9a9cf685 44c5d6c1     @....7J_.......D
    b8d4:	e1de5920 afa51b8f cd4e7b42 2262eb60      Y......B{N.`.b"
    b8e4:	f0ef2c90 57d28dc7 66a73da1 113175b0     .,.....W.=.f.u1.
    b8f4:	bcb24089 4a371fc3 9cf6855f c5d6c19a     .@....7J_.......
    b904:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    b914:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    b924:	3da157d2 75b066a7 96481131 46e3f877     .W.=.f.u1.H.w..F
    b934:	9ed0abe9 bad83353 cb240898 a371fc3b     ....S3....$.;.q.
    b944:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    b954:	42afa51b 60cd4e7b 902262eb c7f0ef2c     ...B{N.`.b".,...
    b964:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    b974:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    b984:	3f877964 0abe946e 833539ed 40898bad     dy.?n....95....@
    b994:	1fc3bcb2 855f4a37 c19a9cf6 2044c5d6     ....7J_.......D 
    b9a4:	8fe1de59 42afa51b 60cd4e7b 902262eb     Y......B{N.`.b".
    b9b4:	40898bad 1fc3bcb2 855f4a37 c19a9cf6     ...@....7J_.....
    b9c4:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    b9d4:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    b9e4:	c19a9cf6 2044c5d6 8fe1de59 42afa51b     ......D Y......B
    b9f4:	60cd4e7b 902262eb c7f0ef2c a157d28d     {N.`.b".,.....W.
    ba04:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    ba14:	be946e3f 3539ed0a 898bad83 c3bcb240     ?n....95....@...
    ba24:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    ba34:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    ba44:	3bcb2408 f4a371fc a9cf6855 4c5d6c19     .$.;.q..Uh...l]L
    ba54:	1de59204 fa51b8fe d4e7b42a 262eb60c     ......Q.*......&
    ba64:	0ef2c902 7d28dc7f 6a73da15 13175b06     ......(}..sj.[..
    ba74:	44c5d6c1 e1de5920 afa51b8f cd4e7b42     ...D Y......B{N.
    ba84:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    ba94:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    baa4:	c5d6c19a de592044 a51b8fe1 4e7b42af     ....D Y......B{N
    bab4:	62eb60cd ef2c9022 d28dc7f0 a73da157     .`.b".,.....W.=.
    bac4:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    bad4:	bad83353 cb240898 a371fc3b cf6855f4     S3....$.;.q..Uh.
    bae4:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    baf4:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    bb04:	c7f0ef2c a157d28d b066a73d 48113175     ,.....W.=.f.u1.H
    bb14:	e3f87796 d0abe946 d833539e 240898ba     .w..F....S3....$
    bb24:	71fc3bcb 6855f4a3 6c19a9cf 92044c5d     .;.q..Uh...l]L..
    bb34:	b8fe1de5 b42afa51 b60cd4e7 c902262e     ....Q.*......&..
    bb44:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    bb54:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    bb64:	39ed0abe 8bad8335 bcb24089 4a371fc3     ...95....@....7J
    bb74:	9cf6855f c5d6c19a de592044 a51b8fe1     _.......D Y.....
    bb84:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    bb94:	46e3f877 9ed0abe9 bad83353 cb240898     w..F....S3....$.
    bba4:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    bbb4:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    bbc4:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    bbd4:	19a9cf68 044c5d6c fe1de592 2afa51b8     h...l]L......Q.*
    bbe4:	0cd4e7b4 02262eb6 7f0ef2c9 157d28dc     ......&......(}.
    bbf4:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    bc04:	262eb60c 0ef2c902 7d28dc7f 6a73da15     ...&......(}..sj
    bc14:	13175b06 87796481 be946e3f 3539ed0a     .[...dy.?n....95
    bc24:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    bc34:	66a73da1 113175b0 f8779648 abe946e3     .=.f.u1.H.w..F..
    bc44:	33539ed0 0898bad8 fc3bcb24 55f4a371     ..S3....$.;.q..U
    bc54:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    bc64:	592044c5 1b8fe1de 7b42afa5 eb60cd4e     .D Y......B{N.`.
    bc74:	2c902262 8dc7f0ef 3da157d2 75b066a7     b".,.....W.=.f.u
    bc84:	cf6855f4 5d6c19a9 e592044c 51b8fe1d     .Uh...l]L......Q
    bc94:	e7b42afa 2eb60cd4 f2c90226 28dc7f0e     .*......&......(
    bca4:	73da157d 175b066a 79648113 946e3f87     }..sj.[...dy.?n.
    bcb4:	b066a73d 48113175 e3f87796 d0abe946     =.f.u1.H.w..F...
    bcc4:	d833539e 240898ba 71fc3bcb 6855f4a3     .S3....$.;.q..Uh
    bcd4:	6c19a9cf 92044c5d b8fe1de5 b42afa51     ...l]L......Q.*.
    bce4:	3175b066 77964811 e946e3f8 539ed0ab     f.u1.H.w..F....S
    bcf4:	98bad833 3bcb2408 f4a371fc a9cf6855     3....$.;.q..Uh..
    bd04:	4c5d6c19 1de59204 fa51b8fe d4e7b42a     .l]L......Q.*...
    bd14:	4e7b42af 62eb60cd ef2c9022 d28dc7f0     .B{N.`.b".,.....
    bd24:	a73da157 3175b066 77964811 e946e3f8     W.=.f.u1.H.w..F.
    bd34:	539ed0ab 98bad833 3bcb2408 f4a371fc     ...S3....$.;.q..
    bd44:	cb240898 a371fc3b cf6855f4 5d6c19a9     ..$.;.q..Uh...l]
    bd54:	e592044c 51b8fe1d e7b42afa 2eb60cd4     L......Q.*......
    bd64:	f2c90226 28dc7f0e 73da157d 175b066a     &......(}..sj.[.
    bd74:	b42afa51 b60cd4e7 c902262e dc7f0ef2     Q.*......&......
    bd84:	da157d28 5b066a73 64811317 6e3f8779     (}..sj.[...dy.?n
    bd94:	ed0abe94 ad833539 b240898b 371fc3bc     ....95....@....7
    bda4:	3539ed0a 898bad83 c3bcb240 5f4a371f     ..95....@....7J_
    bdb4:	9a9cf685 44c5d6c1 e1de5920 afa51b8f     .......D Y......
    bdc4:	cd4e7b42 2262eb60 f0ef2c90 57d28dc7     B{N.`.b".,.....W
    bdd4:	4a371fc3 9cf6855f c5d6c19a de592044     ..7J_.......D Y.
    bde4:	a51b8fe1 4e7b42af 62eb60cd ef2c9022     .....B{N.`.b".,.
    bdf4:	d28dc7f0 a73da157 3175b066 77964811     ....W.=.f.u1.H.w
    be04:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    be14:	1b8fe1de 7b42afa5 eb60cd4e 2c902262     ......B{N.`.b".,
    be24:	8dc7f0ef 3da157d2 75b066a7 96481131     .....W.=.f.u1.H.
    be34:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    be44:	240898ba 71fc3bcb 6855f4a3 6c19a9cf     ...$.;.q..Uh...l
    be54:	92044c5d b8fe1de5 b42afa51 b60cd4e7     ]L......Q.*.....
    be64:	c902262e dc7f0ef2 da157d28 5b066a73     .&......(}..sj.[
    be74:	64811317 6e3f8779 ed0abe94 ad833539     ...dy.?n....95..
    be84:	b240898b 371fc3bc f6855f4a d6c19a9c     ..@....7J_......
    be94:	b60cd4e7 c902262e dc7f0ef2 da157d28     .....&......(}..
    bea4:	5b066a73 64811317 6e3f8779 ed0abe94     sj.[...dy.?n....
    beb4:	ad833539 b240898b 371fc3bc f6855f4a     95....@....7J_..
    bec4:	2262eb60 f0ef2c90 57d28dc7 66a73da1     `.b".,.....W.=.f
    bed4:	113175b0 f8779648 abe946e3 33539ed0     .u1.H.w..F....S3
    bee4:	0898bad8 fc3bcb24 55f4a371 19a9cf68     ....$.;.q..Uh...
    bef4:	5d6c19a9 e592044c 51b8fe1d e7b42afa     ..l]L......Q.*..
    bf04:	2eb60cd4 f2c90226 28dc7f0e 73da157d     ....&......(}..s
    bf14:	175b066a 79648113 946e3f87 39ed0abe     j.[...dy.?n....9
    bf24:	dc7f0ef2 da157d28 5b066a73 64811317     ....(}..sj.[...d
    bf34:	6e3f8779 ed0abe94 ad833539 b240898b     y.?n....95....@.
    bf44:	371fc3bc f6855f4a d6c19a9c 592044c5     ...7J_.......D Y
    bf54:	a371fc3b cf6855f4 5d6c19a9 e592044c     ;.q..Uh...l]L...
    bf64:	51b8fe1d e7b42afa 2eb60cd4 f2c90226     ...Q.*......&...
    bf74:	28dc7f0e 73da157d 175b066a 79648113     ...(}..sj.[...dy
    bf84:	de592044 a51b8fe1 4e7b42af 62eb60cd     D Y......B{N.`.b
    bf94:	ef2c9022 d28dc7f0 a73da157 3175b066     ".,.....W.=.f.u1
    bfa4:	77964811 e946e3f8 539ed0ab 98bad833     .H.w..F....S3...
    bfb4:	a157d28d b066a73d 48113175 e3f87796     ..W.=.f.u1.H.w..
    bfc4:	d0abe946 d833539e 240898ba 71fc3bcb     F....S3....$.;.q
    bfd4:	6855f4a3 6c19a9cf 92044c5d b8fe1de5     ..Uh...l]L......
    bfe4:	2044c5d6 8fe1de59 42afa51b 60cd4e7b     ..D Y......B{N.`
    bff4:	902262eb c7f0ef2c a157d28d b066a73d     .b".,.....W.=.f.
    c004:	48113175 e3f87796 d0abe946 d833539e     u1.H.w..F....S3.
    c014:	5f4a371f 9a9cf685 44c5d6c1 e1de5920     .7J_.......D Y..
    c024:	afa51b8f cd4e7b42 2262eb60 f0ef2c90     ....B{N.`.b".,..
    c034:	57d28dc7 66a73da1 113175b0 f8779648     ...W.=.f.u1.H.w.

0000c044 <compile_info>:
    c044:	72656275 746f6f74 30322068 312d3531     ubertooth 2015-1
    c054:	31522d30 6f722820 7740746f 69706965     0-R1 (root@weipi
    c064:	2029676e 20646557 20766f4e 31203220     ng) Wed Nov  2 1
    c074:	38323a39 2037303a 2054534b 36313032     9:28:07 KST 2016
    c084:	00000000 35313032 2d30312d 00003152     ....2015-10-R1..
    c094:	00000001 00000001 00000001 00000001     ................
    c0a4:	ffff0900 ffffffff ff050102 0000ffff     ................
    c0b4:	0985096c 0000099e 03010200 03000100     l...............
    c0c4:	01020001 00000100 04020301 04020304     ................
    c0d4:	03040304 00000203                       ........

0000c0dc <abDescriptors>:
    c0dc:	02000112 400000ff 60021d50 02010101     .......@P..`....
    c0ec:	02090103 01010020 096e8000 02000004     .... .....n.....
    c0fc:	000000ff 02820507 07000040 40020505     ........@......@
    c10c:	03040000 035c0409 00740068 00700074     ......\.h.t.t.p.
    c11c:	002f003a 0067002f 00740069 00750068     :././.g.i.t.h.u.
    c12c:	002e0062 006f0063 002f006d 00720067     b...c.o.m./.g.r.
    c13c:	00610065 00730074 006f0063 00740074     e.a.t.s.c.o.t.t.
    c14c:	00610067 00670064 00740065 002f0073     g.a.d.g.e.t.s./.
    c15c:	00620075 00720065 006f0074 0074006f     u.b.e.r.t.o.o.t.
    c16c:	031e0068 006c0062 00650075 006f0074     h...b.l.u.e.t.o.
    c17c:	0074006f 005f0068 00780072 00780074     o.t.h._.r.x.t.x.
    c18c:	00300312 00300030 00300030 00300030     ..0.0.0.0.0.0.0.
    c19c:	00000031 6361387b 38613734 63632d38     1...{8ac47a88-cc
    c1ac:	342d3632 2d396161 62373838 6332342d     26-4aa9-887b-42c
    c1bc:	66633861 36613730 00007d33 00009131     a8cf07a63}..1...
    c1cc:	00009165 0000917d 00009265 0000911d     e...}...e.......
    c1dc:	0000911d 0000911d 000092c9 00009165     ............e...
    c1ec:	000092e1 0000911d 0000911d 0000911d     ................
    c1fc:	00009131 00009165 000093b5 00009575     1...e.......u...
    c20c:	00009435 000094f9                       5.......

0000c214 <abExtendedOsFeatureDescriptor>:
    c214:	00000028 00040100 00000001 00000000     (...............
    c224:	49570100 4253554e 00000000 00000000     ..WINUSB........
    c234:	00000000 00000000                       ........

0000c23c <_init>:
    c23c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c23e:	bf00      	nop
    c240:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c242:	bc08      	pop	{r3}
    c244:	469e      	mov	lr, r3
    c246:	4770      	bx	lr

0000c248 <__init_array_start>:
    c248:	00004215 	.word	0x00004215

0000c24c <__frame_dummy_init_array_entry>:
    c24c:	000040f1                                .@..

0000c250 <_fini>:
    c250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c252:	bf00      	nop
    c254:	bcf8      	pop	{r3, r4, r5, r6, r7}
    c256:	bc08      	pop	{r3}
    c258:	469e      	mov	lr, r3
    c25a:	4770      	bx	lr

0000c25c <__fini_array_start>:
    c25c:	000040cd 	.word	0x000040cd
